
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();	
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	ТекущаяНастройка = Объект.Настройка;
	ЗаполнитьКэшЗначений();
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Элементы управления для измерений несуществующих в смежном решении	
	// создаются программно для унификации кода.
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияПротоколРасхожденийБюджета(Элементы);
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект,
		"ДанныеБюджета", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	УстановитьУсловноеОформление();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров);
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли; 
	
	УстановитьСостояниеДокумента();
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбратьПериодЗавершение" И Источник = УникальныйИдентификатор Тогда	
		РедактированиеПериодаЗавершение(Параметр.Результат, Неопределено);
	ИначеЕсли ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ПротоколРасхожденийБюджета";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДанныеБюджетаКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ДанныеБюджета.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура("Текст, Заголовок, ИмяТабличногоПоля, ИмяПоля"
	                                     , ТекущаяСтрока.Комментарий
										 , "Комментарий"
										 , "Данные бюджета"
										 , "Комментарий");
										 
	Оповещение = Новый ОписаниеОповещения("НачалоВыбораКомментарийОкончание", ЭтотОбъект); 									 
	ОткрытьФорму("ОбщаяФорма.бит_ФормаРедактированияТекста", ПараметрыФормы, ЭтаФорма,,,,Оповещение);
	
КонецПроцедуры

// Процедура окончание выбора комментария. 
//
// Параметры:
//  РезультатВыбора - Структура.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте 
Процедура НачалоВыбораКомментарийОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		ТекущаяСтрока 				= Элементы.ДанныеБюджета.ТекущиеДанные;
		ТекущаяСтрока.Комментарий 	= РезультатВыбора.Текст;
		Модифицированность = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораКомментарийОкончание()

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ВопросОчисткиИзменениеНастройки", ЭтотОбъект); 
	Если Объект.ДанныеБюджета.Количество()>0 Тогда
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// Процедура окончание процедуры "НастройкаПриИзменении". 
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВопросОчисткиИзменениеНастройки(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДанныеБюджета.Очистить();
		ТекущаяНастройка = Объект.Настройка;
	Иначе	
		Объект.Настройка = ТекущаяНастройка;
	КонецЕсли; 
                
КонецПроцедуры // ВопросОчисткиИзменениеНастройки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеБюджета

&НаКлиенте
Процедура ДанныеБюджетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБюджетаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеБюджетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
 
	ТекущаяСтрока = Объект.ДанныеБюджета.НайтиПоИдентификатору(ВыбраннаяСтрока);

	Если НЕ ТекущаяСтрока = Неопределено Тогда

		ИмяРеквизита = СтрЗаменить(Поле.Имя, "ДанныеБюджета", "");
		ТекЗнч = ТекущаяСтрока[ИмяРеквизита];

		Если ЗначениеЗаполнено(ТекЗнч) Тогда

			ПоказатьЗначение(,ТекЗнч);

		КонецЕсли; 

	КонецЕсли; 
 
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеБюджета.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, "ДанныеБюджета", "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеБюджета.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, "ДанныеБюджета", "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеБюджета.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, "ДанныеБюджета", "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти 

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ЗначениеЗаполнено(Объект.Настройка) Тогда
		
		Отказ = НЕ ПериодЗаполненПравильно(ЭтотОбъект);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 

		Оповещение = Новый ОписаниеОповещения("ВопросОчисткиДанныеБюджетаЗавершение", ЭтотОбъект); 
		Если Объект.ДанныеБюджета.Количество()>0 Тогда
			ПоказатьВопрос(Оповещение, НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте 
Процедура ВопросОчисткиДанныеБюджетаЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
		УправлениеЭлементамиФормы();
	КонецЕсли; 
                
КонецПроцедуры // ВопросОчисткиДанныеБюджета()

&НаКлиенте
Процедура КомандаРедактироватьПериод(Команда)
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.ДатаНачала);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);
	
КонецПроцедуры

// Процедура обработчик оповещения "РедактированиеПериодаЗавершение".
// 
// Параметры:
// Период - Произвольный
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура РедактированиеПериодаЗавершение(Период, ДополнительныеДанные)

	Если НЕ Период = Неопределено Тогда
		
		Объект.ДатаНачала    = Период.ДатаНачала;
		Объект.ДатаОкончания = Период.ДатаОкончания;			
		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЦФО", Объект.ЦФО);		
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

// Процедура управляем видимостью-доступностью элементов формы. 
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()

	Настройка = Объект.Настройка;
	
	Если ЗначениеЗаполнено(Настройка) Тогда
		Для каждого нЭлемент Из Настройка.Измерения Цикл
			Если Найти(нЭлемент.Имя, "Аналитика")>0
				И фКэшЗначений.НастройкиИзмерений.Получить(нЭлемент.Имя)=Неопределено Тогда
			
				Продолжить;
			КонецЕсли; 
			Элементы["ДанныеБюджета"+нЭлемент.Имя].Видимость = нЭлемент.Выполнять;
		КонецЦикла; 
	КонецЕсли; 
	
	Для каждого нРес Из Объект.Настройка.Ресурсы Цикл
		Элементы["ДанныеБюджета"+нРес.Ресурс+"План"].Видимость = нРес.Выполнять;
		Элементы["ДанныеБюджета"+нРес.Ресурс+"Факт"].Видимость = нРес.Выполнять;
		Элементы["ДанныеБюджета"+нРес.Ресурс+"ОтклонениеОтн"].Видимость = нРес.Выполнять;
		Элементы["ДанныеБюджета"+нРес.Ресурс+"ОтклонениеАбс"].Видимость = нРес.Выполнять;
		Элементы["ДанныеБюджетаНадпись" + нРес.Ресурс].Видимость 		= нРес.Выполнять;
	КонецЦикла; 
	
	// Управление доступностью некоторых элементов в зависимости от статуса Черновик.
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Черновик);
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	Если ТипЗнч(МассивСтатусов.Найти(Статус)) = Тип("Неопределено") Тогда
		Элементы.ДанныеБюджета.КоманднаяПанель.Доступность = Ложь;
		Элементы.КомандаРедактироватьПериод.Доступность = Ложь;
	Иначе
		Элементы.ДанныеБюджета.КоманднаяПанель.Доступность = Истина;
		Элементы.КомандаРедактироватьПериод.Доступность = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры	

// Процедура устанавливает доступность элементам формы.
// 
// Параметры:
//  Доступность - Булево.
// 
&НаСервере
Процедура УстановитьДоступностьЭлементов()

	ЭлементыТолькоПросмотр = ?(Статус = Справочники.бит_СтатусыОбъектов.ПротоколРасхожденийБюджета_Черновик
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Ложь, Истина);

	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда  
			Элемент.ТолькоПросмотр = ЭлементыТолькоПросмотр;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

// Процедура обрабатывает изменение настройки формы ввода.
// 
&НаСервере
Функция ЗаполнитьНаСервере()
	
	НастройкиПротокола = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Настройка, "ТекстЗапроса, Периодичность, Бюджет, НастройкаСхемы");
	
	// Копирование отбора из настройки.
	СохрНастройка = НастройкиПротокола.НастройкаСхемы.Получить();
	Если НЕ ТипЗнч(СохрНастройка) = Тип("Структура") Тогда
		СохрНастройка = Новый Структура;
	КонецЕсли; 	
	ВосстановитьОтбор(СохрНастройка);
	
	ТекстЗапроса = НастройкиПротокола.ТекстЗапроса;
	АдресКомпоновки = Справочники.бит_НастройкиПротоколовРасхожденийБюджета.ИнициализироватьКомпоновщик(ТекстЗапроса, Компоновщик, УникальныйИдентификатор);	
	
	СКД = ПолучитьИзВременногоХранилища(АдресКомпоновки);
	
	НастройкиКомпоновщика =  Компоновщик.ПолучитьНастройки();
	
	КоллекцияВыбранныхПолей = НастройкиКомпоновщика.Выбор.Элементы;
	Для каждого ВыбранноеПоле Из КоллекцияВыбранныхПолей Цикл
		Если ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Валюта")
			ИЛИ ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Регистратор") Тогда
			
			ВыбранноеПоле.Использование = Ложь;
			//КоллекцияВыбранныхПолей.Удалить(ВыбранноеПоле);
		КонецЕсли; 
	КонецЦикла; 
	
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, НастройкиКомпоновщика);
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ВалютаСценария",			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СценарийФакт, "Валюта"));
	Запрос.Параметры.Вставить("ВалютаСценарияЭталон",	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СценарийПлан, "Валюта"));
	Запрос.Параметры.Вставить("НачалоПериода",			Объект.ДатаНачала);
	Запрос.Параметры.Вставить("КонецПериода",			КонецДня(Объект.ДатаОкончания));
	Запрос.Параметры.Вставить("Сценарий",				Объект.СценарийФакт);
	Запрос.Параметры.Вставить("СценарийЭталон",			Объект.СценарийПлан);
	Запрос.Параметры.Вставить("Периодичность",			НастройкиПротокола.Периодичность);
	Если ЗначениеЗаполнено(НастройкиПротокола.Бюджет) Тогда
		Запрос.Параметры.Вставить("Бюджет", НастройкиПротокола.Бюджет);
	КонецЕсли; 
	Попытка
		Запрос.Текст = МакетСКД.НаборыДанных.НаборДанныхОсновной.Запрос;
	Исключение
		ТекстСообщения =  НСтр("ru = 'Не удалось установить отбор для получения дерева.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецПопытки;
	
	// Устанавливаем параметры запроса.
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		Если НЕ МакетСКД.ЗначенияПараметров.Найти(ОписаниеПараметраЗапроса.Имя) = Неопределено Тогда
			Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
		КонецЕсли; 
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Объект.ДанныеБюджета.Очистить();
	
	Пока Выборка.Следующий() Цикл
		// Не выводим строки с нулевым отклонением регл.
		Если (Выборка.СуммаРеглФакт - Выборка.СуммаРеглПлан)=0 Тогда
			Продолжить;
		КонецЕсли; 
		НоваяСтрока = Объект.ДанныеБюджета.Добавить();   
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецФункции

// Процедура восстанавливает отбор из хранилища значения.
// 
// Параметры:
//  СохраненнаяНастройка - Структура.
// 
&НаСервере
Процедура ВосстановитьОтбор(СохраненнаяНастройка)

	Если СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") 
		И ТипЗнч(СохраненнаяНастройка.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных")  Тогда
		
		Компоновщик.ЗагрузитьНастройки(СохраненнаяНастройка.НастройкиКомпоновщика);
	КонецЕсли; 
	
КонецПроцедуры // ВосстановитьОтбор()

&НаКлиентеНаСервереБезКонтекста 
Функция ПериодЗаполненПравильно(Форма)

	ЗаполненПравильно = Истина;
	
	Объект = Форма.Объект;
	Отказ  = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Дата начала"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаНачала", ,Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Дата окончания"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаОкончания", ,Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
			ТекстСообщения = НСтр("ru ='Период указан неверно. Дата начала больше даты окончания.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаОкончания", ,Отказ);
		КонецЕсли;
	КонецЕсли; 
	
	Если Отказ Тогда
		ЗаполненПравильно = Ложь;
	КонецЕсли;  
	
	Возврат ЗаполненПравильно; 

КонецФункции // ПериодЗаполненПравильно()

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеБюджетаНадписьКоличество");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДанныеБюджета.НомерСтроки", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Количество'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеБюджетаНадписьСуммаРегл");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДанныеБюджета.НомерСтроки", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сумма регл.'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеБюджетаНадписьСуммаУпр");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДанныеБюджета.НомерСтроки", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сумма упр.'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеБюджетаНадписьСуммаСценарий");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.ДанныеБюджета.НомерСтроки", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сумма сценарий'"));
	
КонецПроцедуры
 
#КонецОбласти

