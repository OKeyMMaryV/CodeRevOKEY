#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мБылПроведен; // Служит для передачи признака проведения между обработчиками.

Перем мРежимЗаписи; // Служит для передачи режима записи между обработчиками.

Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мБылПроведен = Проведен;
	мРежимЗаписи = РежимЗаписи;
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	 // Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Документы.бит_мто_ПередачаВОбеспечениеСоСклада.ПроверитьОстаткиПоСкладу(Ссылка, Отказ);
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Выполним движения
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,Отказ,Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		ЗаявкаОб = ДокументОснование.ПолучитьОбъект();
		ЗаявкаОб.УстановитьСтатус();
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	Если НЕ Отказ Тогда
	
		ЗаявкаОб = ДокументОснование.ПолучитьОбъект();
		ЗаявкаОб.УстановитьСтатус();
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_мто_ЗаявкаНаПотребность") Тогда
		
		ЭтотОбъект.ДокументОснование = ДанныеЗаполнения;
		ЗаполнитьПоОснованию(ДанныеЗаполнения);
	
	Иначе 
	
		ЗаполнитьШапкуДокумента();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Товары.Очистить();
	ЗаполнитьПоОснованию(ОбъектКопирования.ДокументОснование);
	
	Если Товары.Количество()=0 Тогда
	
		ДокументОснование = Документы.бит_мто_ЗаявкаНаПотребность.ПустаяСсылка();
		ТекстСообщения =  НСтр("ru = 'Превышен остаток по номенклатуре!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет документ по документу основанию.
// 
// Параметры:
//  Основание - ДокументСсылка.бит_мто_ЗаявкаНаПотребность.
// 
Процедура ЗаполнитьПоОснованию(Основание) Экспорт 

	МетаОснование = Основание.Метаданные();
	
	Если МетаОснование.Имя = "бит_мто_ЗаявкаНаПотребность" Тогда
		
		Исключения = "Дата,Номер,Проведен,ПометкаУдаления";
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,,Исключения);
		
		ТаблицаОстатков = Документы.бит_мто_ЗаявкаНаПотребность.ПолучитьОстаткиНоменклатурыТабЧастиТовары(Основание);	 
		
		Для каждого Строка Из Основание.Товары Цикл
		
			СтрОтбора = Новый Структура("Номенклатура", Строка.Номенклатура);
			СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтрОтбора);
			
			Если СтрокиОстатков.Количество()>0 
				И СтрокиОстатков[0].СуммаОстаток > 0 Тогда
			
				НоваяСтрока = ЭтотОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Количество = СтрокиОстатков[0].СуммаОстаток;
				НоваяСтрока.Потребность = Строка.Номенклатура;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьПоОснованию()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет шапку документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.бит_мто_ЗаявкаНаПотребность.
// 
Процедура ЗаполнитьШапкуДокумента(ПараметрОбъектКопирования = Неопределено)
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Важность = Перечисления.бит_Важность.Средняя;
		
	Иначе // Документ скопирован.
		
		
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
												
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,Отказ,Заголовок)
	
	Документы.бит_мто_ПередачаВОбеспечениеСоСклада.КонтрольОстатковНоменклатуры(Ссылка, Отказ);
	
	// Движение по регистру бит_мто_ПотребностьНоменклатуры.
	ДвиженияПоРегиструПотребностьНоменклатуры(СтруктураШапкиДокумента);
	
	// Движение по РН.бит_мто_НоменклатураКВыдачеПоЗаявкамНаПотребность.
	СформироватьДвиженияПоРегиструНоменклатураКВыдаче(СтруктураШапкиДокумента);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура выполняет движения по регистру бит_мто_ПотребностьНоменклатуры.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
Процедура ДвиженияПоРегиструПотребностьНоменклатуры(СтруктураШапкиДокумента)

	Для каждого НаборЗаписей Из Движения Цикл
	
		НаборЗаписей.Записывать = Истина;
	
	КонецЦикла; 

	НаборЗаписей = Движения.бит_мто_ПотребностиНоменклатуры; 
	 
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Строка Из Товары Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация 			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ДокументПланирования = СтруктураШапкиДокумента.ДокументОснование;
		СтрокаДвижений.Номенклатура			= Строка.Потребность;
		СтрокаДвижений.Количество			= Строка.Количество;
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
	
		НаборЗаписей.мПериод          = ТекущаяДата();
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписей.ВыполнитьРасход();
		НаборЗаписей.Записать();
	
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегиструПотребностьНоменклатуры()

// Процедура выполняет движения по регистру бит_мто_НоменклатураКВыдачеПоЗаявкамНаПотребность. 
// 
Процедура СформироватьДвиженияПоРегиструНоменклатураКВыдаче(СтруктураШапкиДокумента)

	НаборЗаписей = Движения.бит_мто_НоменклатураКВыдачеПоЗаявкамНаПотребность; 
	
	НаборЗаписей.Записывать = Истина;
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Стр Из Товары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Организация 		= СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ЦФО		 			= СтруктураШапкиДокумента.ЦФО;
		НоваяСтрока.ЗаявкаНаПотребность = СтруктураШапкиДокумента.ДокументОснование;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборЗаписей.мПериод          = Дата;
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписей.ВыполнитьПриход();
		НаборЗаписей.Записать();
		
	КонецЕсли;	

КонецПроцедуры // СформироватьДвиженияПоРегиструНоменклатураКВыдаче()

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мНастройкиПрограммы = Новый Соответствие;

// Хранилище должно быть доступно и в объекте и в форме, поэтому определим его сразу.
мАдресХранилищаСтрокПревышения = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);

#КонецОбласти 

#КонецЕсли
