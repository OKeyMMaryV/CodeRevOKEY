#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверитьОстаткиПоСкладу(Объект, Отказ) Экспорт 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"	,Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"			,Объект.ЦФО);
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Объект.Дата,,СтруктураПараметров,"Ошибки");	
	КонтрольОстатков = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы,ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьОстаткиНаСкладеДляПередачи);
	
	Если КонтрольОстатков = Перечисления.бит_мто_ВидыКонтроляПоЗаявкамНаЗакупку.НеКонтролировать Тогда
		Возврат;
	КонецЕсли; 
	
	ТоварыДокумента = Объект.Товары.Выгрузить();
	ТоварыДокумента.Свернуть("Номенклатура", "Количество");
	ДатаРасчетов     = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ДатаОстаткиЦены = ?(НЕ ЗначениеЗаполнено(ДатаРасчетов), ПолучитьДатуОстатковПоУмолчанию(), ДатаРасчетов);
	
	СписокСчетов = Новый Массив;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	СписокСчетов = ПолучитьСписокСчетов(СписокСчетов, ВидыСубконто, Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстаткиЦены"	, ДатаОстаткиЦены);
	Запрос.УстановитьПараметр("СчетаЗапасов"	, СписокСчетов);
	Запрос.УстановитьПараметр("ВидыСубконто"	, ВидыСубконто);
	Запрос.УстановитьПараметр("Организация"		, Объект.Организация);
	Запрос.УстановитьПараметр("Товары"			, ТоварыДокумента);
	Запрос.УстановитьПараметр("Склад"			, Объект.Склад);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.Номенклатура,
	               |	Товары.Количество
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	&Товары КАК Товары
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура,
	               |	Товары.Количество - ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0) КАК КоличествоОсталосьПогасить,
	               |	Товары.Количество,
	               |	СУММА(1) КАК НомерСтроки
	               |ИЗ
	               |	Товары КАК Товары,
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&ДатаОстаткиЦены,
	               |			Счет В (&СчетаЗапасов),
	               |			&ВидыСубконто,
	               |			Субконто2 = &Склад
	               |				И Организация = &Организация
	               |				И Субконто1 В
	               |					(ВЫБРАТЬ
	               |						Товары.Номенклатура
	               |					ИЗ
	               |						Товары КАК Товары)) КАК ОстаткиНаСкладе
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.Номенклатура,
	               |	Товары.Количество,
	               |	Товары.Количество - ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоОсталосьПогасить > 0 Тогда
			
			Если КонтрольОстатков = Перечисления.бит_мто_ВидыКонтроляПоЗаявкамНаЗакупку.Контролировать Тогда
				ТекстОшибки = НСтр("ru='Указанное количество превышает остаток по складу. Остаток: %1; Не хватает: %2'");
				СообщитьОбОшибке(
					ТекстОшибки,
					Выборка.Количество, 
					Выборка.КоличествоОсталосьПогасить, 
					Объект, 
					Выборка.НомерСтроки, 
					Отказ);
			Иначе	
				ТекстОшибки = НСтр("ru='Указанное количество превышает остаток по складу. Остаток: %1%; Не хватает: %2%'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(
																				ТекстОшибки,
																				Выборка.Количество - Выборка.КоличествоОсталосьПогасить,
																				Выборка.КоличествоОсталосьПогасить);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура осуществляет контроль количества номенклатуры по регистру бит_мто_ПотребностьНоменклатуры.
// 
// Параметры:
//  ТаблицаТовары            - ТаблицаЗначений.
//  Отказ                    - Булево.
// 
Процедура КонтрольОстатковНоменклатуры(Объект, Отказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Товары.Потребность КАК Номенклатура,
	               |	СУММА(Товары.Количество) КАК Количество,
	               |	Товары.ЕдиницаИзмерения,
	               |	Товары.Ссылка.ДокументОснование КАК ЗаявкаНаПотребность,
	               |	Товары.НомерСтроки
	               |ПОМЕСТИТЬ Товары
	               |ИЗ
	               |	Документ.бит_мто_ПередачаВОбеспечениеСоСклада.Товары КАК Товары
	               |ГДЕ
	               |	Товары.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.Потребность,
	               |	Товары.ЕдиницаИзмерения,
	               |	Товары.Ссылка.ДокументОснование,
	               |	Товары.НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Товары.Номенклатура,
	               |	СУММА(ЕСТЬNULL(Товары.Количество - ПотребностиНоменклатурыОстатки.КоличествоОстаток, 0)) КАК Превышение,
	               |	СУММА(ЕСТЬNULL(ПотребностиНоменклатурыОстатки.КоличествоОстаток, 0)) КАК Остаток,
	               |	Товары.ЕдиницаИзмерения,
	               |	СУММА(Товары.Количество) КАК Количество,
	               |	Товары.НомерСтроки
	               |ИЗ
	               |	Товары КАК Товары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_мто_ПотребностиНоменклатуры.Остатки КАК ПотребностиНоменклатурыОстатки
	               |		ПО Товары.Номенклатура = ПотребностиНоменклатурыОстатки.Номенклатура
	               |			И Товары.ЗаявкаНаПотребность = ПотребностиНоменклатурыОстатки.ДокументПланирования
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Товары.Номенклатура,
	               |	Товары.ЕдиницаИзмерения,
	               |	Товары.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Превышение > 0 ИЛИ Выборка.Остаток = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Указанное количество превышает остаток по потребности. Остаток: %1; Не хватает: %2'");
			
			СообщитьОбОшибке(
				ТекстОшибки,
				Выборка.Остаток+Выборка.Превышение, 
				Выборка.Превышение, 
				Объект, 
				Выборка.НомерСтроки, 
				Отказ);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура СообщитьОбОшибке(ТекстОшибки, Количество, КоличествоОсталосьПогасить, Объект, НомерСтроки = "", Отказ)

	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
		Количество - КоличествоОсталосьПогасить,
		КоличествоОсталосьПогасить);
		
	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
		"Колонка", 
		"Корректность",
		НСтр("ru = 'Количество'"),
		НомерСтроки,
		"Товары",
		ТекстОшибки);
		
	ПолеКоличество	= "Товары[" + Формат(НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ПолеКоличество, "Объект", Отказ);

КонецПроцедуры

Функция ПолучитьДатуОстатковПоУмолчанию()
	
	ТекущаяРабочаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ТекущаяРабочаяДата = НачалоДня(ТекущаяДатаСеанса()) Тогда
		Возврат ТекущаяДатаСеанса();
	Иначе
		Возврат ТекущаяРабочаяДата;
	КонецЕсли; 
	
КонецФункции 

Функция ПолучитьСписокСчетов(Знач СписокСчетов, Знач СписокСубконто, Знач ПоказыватьЗабалансовые)

	Запрос = Новый Запрос;
	
	Исключения = Новый Массив;
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.ГТД);
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации);
	
	Запрос.УстановитьПараметр("СписокСубконто", СписокСубконто);
	Запрос.УстановитьПараметр("Исключения", Исключения);
	Если СписокСчетов.Количество() <> 0 Тогда
	
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто В(&СписокСубконто)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка В (&Исключения)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках" 
	+ ?(ПоказыватьЗабалансовые, "", " И НЕ ХозрасчетныйВидыСубконто.Ссылка.Забалансовый")
	+?(СписокСчетов.Количество() = 0, "", " И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (&СписокСчетов)");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецЕсли
