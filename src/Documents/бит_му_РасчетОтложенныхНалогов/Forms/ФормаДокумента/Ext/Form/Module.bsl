
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Объект.СтавкаНалогаНаПрибыль) Тогда
			// Заполним ставку налога на прибыль.
			ЗаполнитьСтавкуНалогаНаПрибыль();
		КонецЕсли; 
		УстановитьСостояниеДокумента();
		
		//bit auavseenkov++ Расчет отложенных налогов 24.11.2014
		АвтозаполнениеПолей();
		//}
	Иначе
		ЗаполнитьТаблицуРасшифровкиИзРегистра();
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	// Кешируем количество субконто.
	фКоличествоСубконтоМУ = 4;
	
	ОформитьСубконто();	
	
	УстановитьПараметрыВыбораДляСчетов();
	
	ПереключениеГруппировкиСубконто();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	//bit Amerkulov 26.11.2014 ++ Расчет отложенных налогов		
	СформироватьДеревоЗначенийНалоговаяБазаБалансоваяОценка();
	СформироватьДеревоЗначенийКорректировкаПоБалансу();
	СформироватьДеревоЗначенийПостоянныеРазницы();	
	
	ПеренумероватьТаблицуРасшифровки();		
	//bit Amerkulov 26.11.2014 -- Расчет отложенных налогов	
	
	РассчитатьИтогиДеревьев(); // agoncharenko #1886 05102015
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	// Действия при создании нового документа.
	Если ЭтоНовый Тогда		
		Объект.ДатаСторно = НачалоМесяца(ДобавитьМесяц(Объект.Дата, 1));				
		//bit auavseenkov++ Расчет отложенных налогов 24.11.2014
		Объект.Субконто_3 = рс_ОбщийМодуль.ПолучитьМесяцНачисленияПоДате(Объект.Дата);
		//}
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	мКэшРеквизитовФормы.Вставить("Организация");
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("СтавкаНалогаНаПрибыль");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	ДобавитьВКэш("Организация");
	ДобавитьВКэш("Дата");
	ДобавитьВКэш("СтавкаНалогаНаПрибыль");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()
 
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьНастройкиДоступныхСубконто();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ЗаписатьРасшифровкуРасчетов(РасшифровкаРасчетов);
			
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьНастройкиДоступныхСубконто();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПослеЗаписиНаСервере()
 
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПереключениеГруппировкиСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_РасчетОтложенныхНалогов";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если мКэшРеквизитовФормы.Дата <> Объект.Дата И Объект.РасчетыОН.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменилась дата документа. Табличная часть будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросДатаПриИзменении", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
									
	Иначе
			
		ДобавитьВКэш("Дата");		
		ИзменениеВалютыКлиент();
		//bit auavseenkov++ Расчет отложенных налогов 24.11.2014
		Объект.ДатаСторно = НачалоМесяца(ДобавитьМесяц(Объект.Дата, 1));
		Объект.Субконто_3 = рс_ОбщийМодуль.ПолучитьМесяцНачисленияПоДате(Объект.Дата);
		//}	
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Обработка оповещения вопроса пользователю.
// 
// Параметры:
//  Ответ        - Строка.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ВопросДатаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		РасшифровкаРасчетов.Очистить();
		Объект.РасчетыОН.Очистить();
		//bit Amerkulov 03.12.2014 ++ Расчет отложенных налогов	
		Объект.РасшифровкиНалоговаяБазаБалансоваяОценка.Очистить();
		Объект.РасшифровкаКорректировкаПоБалансу.Очистить();
		Объект.РасшифровкаПостоянныеРазницы.Очистить();
		//bit Amerkulov 03.12.2014 -- Расчет отложенных налогов	
		
		ДобавитьВКэш("Дата");		
		ИзменениеВалютыКлиент();
		//bit auavseenkov++ Расчет отложенных налогов 24.11.2014
		Объект.ДатаСторно = НачалоМесяца(ДобавитьМесяц(Объект.Дата, 1));
		Объект.Субконто_3 = рс_ОбщийМодуль.ПолучитьМесяцНачисленияПоДате(Объект.Дата);
		//}
		
	Иначе
		
		ИзвлечьИзКэша("Дата");
		    
	КонецЕсли;

КонецПроцедуры // ВопросДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
								
	// Спросим, а не пересчитать ли суммы.
	Если мКэшРеквизитовФормы.Организация <> Объект.Организация Тогда
		
		Если Объект.РасчетыОН.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Изменилась организация документа. Табличная часть будет очищена. Продолжить?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении", ЭтотОбъект, ВалютаДокументаЗаполнена);
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		Иначе
			
			ИзменениеОрганизацииСервер();
			
			ДобавитьВКэш("Организация");
			Если Не ВалютаДокументаЗаполнена
				И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
				
				ДобавитьВКэш("ВалютаДокумента");
				ДобавитьВКэш("КратностьДокумента");
				ДобавитьВКэш("КурсДокумента");
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли; 	
	 	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Ответ, ВалютаДокументаЗаполнена) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
				
		РасшифровкаРасчетов.Очистить();
		Объект.РасчетыОН.Очистить();
		//bit Amerkulov 03.12.2014 ++ Расчет отложенных налогов	
		Объект.РасшифровкиНалоговаяБазаБалансоваяОценка.Очистить();
		Объект.РасшифровкаКорректировкаПоБалансу.Очистить();
		Объект.РасшифровкаПостоянныеРазницы.Очистить();
		//bit Amerkulov 03.12.2014 -- Расчет отложенных налогов				
		ИзменениеОрганизацииСервер();
					
	Иначе
				
		Объект.Организация = мКэшРеквизитовФормы.Организация;
			    
	КонецЕсли;

			
	ДобавитьВКэш("Организация");
		
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;

КонецПроцедуры // ВопросОрганизацияПриИзменении()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

&НаКлиенте
Процедура СтавкаНалогаНаПрибыльПриИзменении(Элемент)
	
	ИзменениеСтавки();
	
КонецПроцедуры // СтавкаНалогаНаПрибыльПриИзменении()


&НаКлиенте
Процедура СчетРасходовДоходовМУПриИзменении(Элемент)
	
	ИзменениеСчетаМУ();
	
КонецПроцедуры // СчетРасходовДоходовМУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоМУ_<i>".
// 
&НаКлиенте
Процедура СубконтоМУПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоМУ(Объект,ЗначениеСубконто);
	
КонецПроцедуры // СубконтоМУПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоМУ_<i>".
// 
&НаКлиенте
Процедура СубконтоМУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконтоМУ(Элемент,СтандартнаяОбработка,Объект,ЗначениеСубконто);
   
КонецПроцедуры // СубконтоМУНачалоВыбора()

&НаКлиенте
Процедура СубконтоМУАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "Субконто_"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // СубконтоМУАвтоПодбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчетыОН

&НаКлиенте
Процедура РасчетыОНПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборДляТаблицыРасшифровки();
		
КонецПроцедуры // РасчетыОНПриАктивизацииСтроки()

&НаКлиенте
Процедура РасчетыОНПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // РасчетыОНПередНачаломДобавления()

&НаКлиенте
Процедура РасчетыОНПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РасчетыОН.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		УдалитьДанныеПоВидуАктивовОбязательств(ТекущиеДанные.ВидАктивовОбязательств);
			
	КонецЕсли;
	
КонецПроцедуры // РасчетыОНПередУдалением()

&НаКлиенте
Процедура РасчетыОНСуммаПРПриИзменении(Элемент)
	
	ИзменениеСтрокиРасчетовОН();
		   	
КонецПроцедуры // РасчетыОНСуммаПРПриИзменении()

&НаКлиенте
Процедура РасчетыОНСчетРасходовДоходовПриИзменении(Элемент)
	
	Идентификатор     = Элементы.РасчетыОН.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаТабличноеПолеМУ(Идентификатор);
	
КонецПроцедуры // РасчетыОНСчетРасходовДоходовПриИзменении()

&НаКлиенте
Процедура РасчетыОНСубконтоПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.РасчетыОН.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "РасчетыОН", Элемент.Имя);		
	ИзменениеСубконтоМУ(Элементы.РасчетыОН.ТекущиеДанные, ЗначениеСубконто);
	
КонецПроцедуры // РасчетыОНСубконтоПриИзменении()

&НаКлиенте
Процедура РасчетыОНСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.РасчетыОН.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "РасчетыОН", Элемент.Имя);		
	НачалоВыбораСубконтоМУ(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто);
	
КонецПроцедуры // РасчетыОНСубконтоНачалоВыбора()
   
&НаКлиенте
Процедура РасчетыОНСтавкаНалогаНаПрибыльПриИзменении(Элемент)
	
	ИзменениеСтрокиРасчетовОН();
		
КонецПроцедуры // РасчетыОНСтавкаНалогаНаПрибыльПриИзменении() 

&НаКлиенте
Процедура РасчетыОНСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		Имя = Прав(Элемент.Имя, 10);
	
		ТекущиеДанные = Элементы.РасчетыОН.ТекущиеДанные;
	
		ЗначениеСубконто = ТекущиеДанные[Имя];	
		ИсключитьОрганизацию = Ложь;
		бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
													 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто_"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , ИсключитьОрганизацию);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаРасчетов

&НаКлиенте
Процедура РасшифровкаРасчетовСуммаПРПриИзменении(Элемент)
	
	ИзменениеСтрокиРасшифровкиРасчетов();
	
КонецПроцедуры // РасшифровкаРасчетовСуммаПРПриИзменении()

&НаКлиенте
Процедура РасшифровкаРасчетовСтавкаНалогаНаПрибыльПриИзменении(Элемент)
	
	ИзменениеСтрокиРасшифровкиРасчетов();
	
КонецПроцедуры // РасшифровкаРасчетовСтавкаНалогаНаПрибыльПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоОрганизации(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстСообщения = Нстр("ru = 'Запишите документ перед заполнением.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	Если Объект.РасчетыОН.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличная часть «Расчеты отложенных налогов» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаполнитьПоОрганизации", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	Иначе
		
		ОбновитьДанныеДляРасчетовОН(Ложь, Истина);	

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоОрганизации()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ        - Строка.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ВопросЗаполнитьПоОрганизации(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		//bit Amerkulov 03.12.2014 ++ Расчет отложенных налогов
		ЗаполнитьПоОрганизацииРОН();
		//bit Amerkulov 03.12.2014 -- Расчет отложенных налогов
		ОбновитьДанныеДляРасчетовОН(Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры // ВопросЗаполнитьПоОрганизации()

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеДляРасчетовОН(Ложь);	
	
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОбновитьТекущуюСтроку(Команда)
	
	ОбновитьДанныеДляРасчетовОН();	
	
КонецПроцедуры // ОбновитьТекущуюСтроку()

&НаКлиенте
Процедура ОбновитьСтавку(Команда)
	
	ЗаполнитьСтавкуНалогаНаПрибыль();
	ИзменениеСтавки();

КонецПроцедуры // ОбновитьСтавку()

&НаКлиенте
Процедура ПереключитьГруппировкуСубконто(Команда)
	
	фГруппироватьСубконтоВертикально = Не фГруппироватьСубконтоВертикально;
	ПереключениеГруппировкиСубконто();
	
КонецПроцедуры // ПереключитьГруппировкуСубконто()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.РасчетыОНСчетРасходовДоходов);
	МассивЭлементов.Добавить(Элементы.СчетУчетаОНА);
	МассивЭлементов.Добавить(Элементы.СчетУчетаОНО);
	МассивЭлементов.Добавить(Элементы.СчетРасходовДоходов);

	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
		
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	СтрукутраМСФО = бит_КурсыВалют.ПолучитьКурсВалюты(фКэшЗначений.ВалютаМСФО, Объект.Дата);
	фКэшЗначений.Вставить("КурсМСФО"	 , СтрукутраМСФО.Курс);
	фКэшЗначений.Вставить("КратностьМСФО", СтрукутраМСФО.Кратность);
	
	// Валюта регламентированного учета.
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Пустые значения.
	фКэшЗначений.Вставить("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	фКэшЗначений.Вставить("ПустойВидАктивовОбязательств", Справочники.бит_му_ВидыАктивовОбязательств.ПустаяСсылка());
	фКэшЗначений.Вставить("ПустойИсточникДанных", Справочники.бит_ИсточникиДанных.ПустаяСсылка());
	
	фКэшЗначений.Вставить("СтавкаЕдинаДляВсехОрганизаций", Метаданные.РегистрыСведений.Найти("СтавкиНалогаНаПрибыльДляВсехОрганизаций") <> Неопределено);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция формирует структуру данных, 
// куда входит информация по валюте документа и валюта регламентированного учета,
// организация, дата документа.
//  
// Возвращаемое значение:
//   Структура. 
//
&НаСервере
Функция ПолучитьСтруктуруДанных()

	СтруктураВалют = Новый Структура("ВалютаМСФО, КурсМСФО, КратностьМСФО"
									, фКэшЗначений.ВалютаМСФО, фКэшЗначений.КурсМСФО, фКэшЗначений.КратностьМСФО);
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	СтруктуруДанных = ДокументОбъект.ПолучитьСтруктуруДанных(СтруктураВалют);
	
	Возврат СтруктуруДанных;	

КонецФункции // ПолучитьСтруктуруДанных()

// Процедура восстанавливает настройки субконто.
// 
&НаСервере
Процедура ВосстановитьНастройкиДоступныхСубконто()

    Для каждого СтрокаТаблицы Из Объект.РасчетыОН Цикл
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетРасходовДоходов);	
		СтрокаТаблицы.КоличествоДоступныхСубконтоМУ = СвСч.КоличествоСубконто;
	КонецЦикла;	

КонецПроцедуры // ВосстановитьНастройкиДоступныхСубконто()

// Процедура заполняет ставку налога на прибыль.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНалогаНаПрибыль()

	Объект.СтавкаНалогаНаПрибыль = бит_му_ОбщегоНазначения.ПолучитьСтавкуНалогаНаПрибыль(Объект.Дата, Объект.Организация);
	
КонецПроцедуры // ЗаполнитьСтавкуНалогаНаПрибыль()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	СтрукутраМСФО    = бит_КурсыВалют.ПолучитьКурсВалюты(фКэшЗначений.ВалютаМСФО, Объект.Дата);
	фКэшЗначений.Вставить("КурсМСФО"	 , СтрукутраМСФО.Курс);
	фКэшЗначений.Вставить("КратностьМСФО", СтрукутраМСФО.Кратность);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

// Процедура заполняет таблицу расшифровки из регистра бит_му_РасчетыОтложенныхНалогов.
// 
&НаСервере
Процедура ЗаполнитьТаблицуРасшифровкиИзРегистра()

	РасшифровкаРасчетов.Очистить();
	
	НаборЗаписей = РегистрыСведений.бит_му_РасчетыОтложенныхНалогов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		СтрРасшифровки = РасшифровкаРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрРасшифровки, Запись);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуРасшифровкиИзРегистра()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура пересчитывает сумму из валюты в валюту.
// 
// Параметры:
//  Сумма  	          - Число.
//  СтруктураИсточник - Структура.
//  СтруктураПриемник - Структура.
// 
&НаСервере
Процедура ПересчитатьСуммуПоВалюте(Сумма, СтруктураИсточник, СтруктураПриемник = Неопределено)

	Если СтруктураПриемник = Неопределено Тогда
		СтруктураПриемник = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента",
											Объект.ВалютаДокумента,
											Объект.КурсДокумента,
											Объект.КратностьДокумента);	
	КонецЕсли; 
	
	Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма
															 ,СтруктураИсточник.ВалютаДокумента
															 ,СтруктураПриемник.ВалютаДокумента
															 ,СтруктураИсточник.КурсДокумента
															 ,СтруктураПриемник.КурсДокумента
															 ,СтруктураИсточник.КратностьДокумента
															 ,СтруктураПриемник.КратностьДокумента);
                                                                                
КонецПроцедуры // ПересчитатьСуммуПоВалюте()
														 
// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  КэшРеквизитовФормы - Структура.
// 
&НаСервере
Процедура ИзменениеВалютыСервер(КэшРеквизитовФормы = Неопределено)
	          	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	Если КэшРеквизитовФормы <> Неопределено Тогда
		
		// Выполним пересчет сумм строк табличной части.
		Для каждого СтрокаТаблицы Из РасшифровкаРасчетов Цикл
			
			ПересчитатьСуммуПоВалюте(СтрокаТаблицы.СуммаНУ,  КэшРеквизитовФормы);
			ПересчитатьСуммуПоВалюте(СтрокаТаблицы.СуммаМУ,  КэшРеквизитовФормы);
			ПересчитатьСуммуПоВалюте(СтрокаТаблицы.СуммаПР,  КэшРеквизитовФормы);
					
		КонецЦикла; 
		
		РасчитатьСуммыИтогиОН();
		 	
	КонецЕсли; 
	
	ВосстановитьНастройкиДоступныхСубконто();
	
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
	Если Не фКэшЗначений.СтавкаЕдинаДляВсехОрганизаций Тогда 
		ЗаполнитьСтавкуНалогаНаПрибыль();
	КонецЕсли;
		
КонецПроцедуры // ИзменениеОрганизацииСервер()


// Процедура обрабатывает изменение счета МУ.
// 
&НаСервере
Процедура ИзменениеСчетаМУ()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходовДоходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект,НастройкиСубконто,"Субконто_");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"Субконто_");

КонецПроцедуры // ИзменениеСчетаМУ()

// Процедура обрабатывает изменение счета БУ в табличном поле.
// 
// Параметры:
//  Идентификатор - Число - Индентификатор строки табличной части.
// 
&НаСервере
Процедура ИзменениеСчетаТабличноеПолеМУ(Идентификатор)
	
	ТекущаяСтрока = Объект.РасчетыОН.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетРасходовДоходов, фКоличествоСубконтоМУ);									  
    бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "Субконто_");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетРасходовДоходов);
	
	ТекущаяСтрока.КоличествоДоступныхСубконтоМУ = СвСч.КоличествоСубконто;
	                 	
КонецПроцедуры // ИзменениеСчетаВТабличномПолеМУ()

&НаСервере
Процедура ПереключениеГруппировкиСубконто()
	
	Элементы.РасчетыОНСубконто.Группировка = ?(фГруппироватьСубконтоВертикально, ГруппировкаКолонок.Вертикальная, ГруппировкаКолонок.Горизонтальная);
	Элементы.РасчетыОНПереключитьГруппировкуСубконто.Заголовок = ?(фГруппироватьСубконтоВертикально
													, "Группировать субконто горизонтально"
													, "Группировать субконто вертикально");
	
КонецПроцедуры // ПереключениеГруппировкиСубконто()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииДляРасчетовОтложенныхНалогов

// Функция получает данные для расчетов отложенных налогов.
// 
// Параметры:
//  СтруктураДанных - Структура
//  
// Возвращаемое значение:
//  Массив. 
// 
&НаСервере
Функция ПолучитьДанныеДляРасчетовОН(СтруктураДанных)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	МассивРезультата = ДокументОбъект.ПолучитьДанныеДляРасчетовОН(СтруктураДанных, РасшифровкаРасчетов);
	
	// Ок Видяйкин 20170526 +
	// не заполнялась ТЧ "РасшифровкиНалоговаяБазаБалансоваяОценка" при заполнении основной вкладки по кнопке "Заполнить по организации"» 
	ТЗврем = ДокументОбъект.РасшифровкиНалоговаяБазаБалансоваяОценка.Выгрузить();
    Объект.РасшифровкиНалоговаяБазаБалансоваяОценка.Загрузить(ТЗврем);
	// Ок Видяйкин 20170526 -
	
	Возврат МассивРезультата;
	
КонецФункции // ПолучитьДанныеДляРасчетовОН()

// Процедура обновляет данные табличной части РасчетыОН.
// 
// Параметры:
//  СтруктураДанных    - Структура.
//  СформироватьЗаного - Булево.
// 
&НаСервере
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ОбновитьДанныеТаблицыДляРасчетовОН(СтруктураДанных, СформироватьЗаного = Ложь)
Процедура ОбновитьДанныеТаблицыДляРасчетовОН(СтруктураДанных, СформироватьЗаного = Ложь, ОбновлятьПРиКорректировки = Истина)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	СтавкаНалогаНаПрибыль = СтруктураДанных.СтавкаНалогаНаПрибыль;
	
	Если Не СформироватьЗаного Тогда
		ТаблицаОбъектов = Объект.РасчетыОН.Выгрузить(, "ВидАктивовОбязательств");
		МассивВидов  = ТаблицаОбъектов.ВыгрузитьКолонку("ВидАктивовОбязательств");
		СтруктураДанных.Вставить("ВидыАктивовОбязательств", МассивВидов);
	КонецЕсли;   
	
	//bit Amerkulov 09.12.2014 ++ Расчет отложенных налогов
	Если НЕ ОбновлятьПРиКорректировки Тогда
		// Кэширование сумм ПР и рекласса
		ТаблицаКорректировок = РасшифровкаРасчетов.Выгрузить();
		ТаблицаКорректировок.Свернуть("Объект, ВидАктивовОбязательств", "СуммаПР,СуммаРекласс");
	КонецЕсли;
	//bit Amerkulov 09.12.2014 -- Расчет отложенных налогов		
	
	ДанныеДляРасчетовОН = ПолучитьДанныеДляРасчетовОН(СтруктураДанных);
	
	Если СформироватьЗаного Тогда
		
		Объект.РасчетыОН.Очистить(); 	
		//bit Amerkulov 09.12.2014 ++ Расчет отложенных налогов
		Для Каждого Стр Из РасшифровкаРасчетов Цикл
			Стр.СуммаПР 		= 0;
			Стр.СуммаРекласс 	= 0;			
		КонецЦикла;
		//bit Amerkulov 09.12.2014 -- Расчет отложенных налогов	
			
		Для каждого СтрокаДанных Из ДанныеДляРасчетовОН Цикл
			
			НоваяСтрокаТаб = Объект.РасчетыОН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаб, СтрокаДанных);
			НоваяСтрокаТаб.СтавкаНалогаНаПрибыль = СтавкаНалогаНаПрибыль;
					
		КонецЦикла;	
		
		//bit Amerkulov 26.11.2014 ++ Расчет отложенных налогов		
		ДополнитьСтрокиДаннымиПРиКорректировок();
		ПересчитатьДанныеНаОсновнойВкладке();
		//bit Amerkulov 26.11.2014 -- Расчет отложенных налогов			
		
	Иначе
	
		МассивВидов = Новый Массив;
		
		Для каждого СтрокаДанных Из  ДанныеДляРасчетовОН Цикл
			
			Отбор = Новый Структура("ВидАктивовОбязательств", СтрокаДанных.ВидАктивовОбязательств); 
			НайденныеСтроки = Объект.РасчетыОН.НайтиСтроки(Отбор);	
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденнаяСтрока = НайденныеСтроки[0]; 
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаДанных);
				НайденнаяСтрока.СтавкаНалогаНаПрибыль  = СтавкаНалогаНаПрибыль;
				НайденнаяСтрока.ВидАктивовОбязательств = СтрокаДанных.ВидАктивовОбязательств;
				
				МассивВидов.Добавить(СтрокаДанных.ВидАктивовОбязательств);
				
			КонецЕсли;
			
		КонецЦикла; 
		
		// Очистим объекты, по которым нет данных в регистре накопления.
		Для каждого СтрокаТаб Из Объект.РасчетыОН Цикл
			НайденнаяСтрока = МассивВидов.Найти(СтрокаТаб.ВидАктивовОбязательств);
			Если НайденнаяСтрока = Неопределено Тогда
				СтрокаТаб.СуммаНУ  = 0;
				СтрокаТаб.СуммаМУ  = 0;
				СтрокаТаб.СуммаПР  = 0;
				СтрокаТаб.СуммаВР  = 0;
				СтрокаТаб.СуммаОНА = 0;
				СтрокаТаб.СуммаОНО = 0;
				СтрокаТаб.СтавкаНалогаНаПрибыль = 0;
			КонецЕсли;
		КонецЦикла;		
		
		//bit Amerkulov 26.11.2014 ++ Расчет отложенных налогов	
		Для Каждого Стр Из РасшифровкаРасчетов Цикл
			Стр.СуммаПР 		= 0;
			Стр.СуммаРекласс 	= 0;			
		КонецЦикла;
		
		Если ОбновлятьПРиКорректировки = Истина Тогда
			 ДополнитьСтрокиДаннымиПРиКорректировок();
		Иначе		
			Для Каждого Стр Из ТаблицаКорректировок Цикл
				НоваяСтрока = РасшифровкаРасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
			КонецЦикла;
			
		КонецЕсли;
		ПересчитатьДанныеНаОсновнойВкладке();
		//bit Amerkulov 26.11.2014 -- Расчет отложенных налогов		
			
	КонецЕсли;
	
	//bit Amerkulov 26.11.2014 ++ Расчет отложенных налогов
	СформироватьДеревоЗначенийНалоговаяБазаБалансоваяОценка();
	//bit Amerkulov 26.11.2014 -- Расчет отложенных налогов	
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьНастройкиДоступныхСубконто();
	
КонецПроцедуры // ОбновитьДанныеТаблицыДляРасчетовОН()
   
// Процедура расчитывает суммы документа.
// 
// Параметры:
//  Ставка 					- Число.
// 	ВидАктивовОбязательств  - СправочникСсылка.бит_му_ВидАктивовОбязательств.
//  ТолькоИтоги				- Булево.
// 
&НаСервере
Процедура РасчитатьСуммыИтогиОН(Ставка = Неопределено, ВидАктивовОбязательств = Неопределено, ТолькоИтоги = Ложь)

	Если Не ТолькоИтоги Тогда
		
		Для каждого СтрРасш Из РасшифровкаРасчетов Цикл
		
			Если Ставка <> Неопределено Тогда
				СтрРасш.СтавкаНалогаНаПрибыль = Ставка;		
			КонецЕсли; 
			
			Если ВидАктивовОбязательств = Неопределено
				ИЛИ СтрРасш.ВидАктивовОбязательств = ВидАктивовОбязательств Тогда
				бит_му_ОбщегоНазначения.РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств(СтрРасш, СтрРасш.СтавкаНалогаНаПрибыль);
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли; 	
			
	Запрос = Новый Запрос;
	ТаблРасшифровки = ДанныеФормыВЗначение(РасшифровкаРасчетов, Тип("ТаблицаЗначений"));
	Запрос.УстановитьПараметр("РасшифровкаРасчетов", ТаблРасшифровки);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Табл.ВидАктивовОбязательств,
	|	Табл.СуммаНУ,
	|	Табл.СуммаМУ,
	|	Табл.СуммаПР,
	|	Табл.СуммаВР,
	|	Табл.СтавкаНалогаНаПрибыль,
	|	Табл.СуммаОНО,
	|	Табл.СуммаОНА
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	&РасшифровкаРасчетов КАК Табл
	|%ГДЕ%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   %ДопПоля%
	|	ВремТабл.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	ВремТабл.СуммаНУ  				КАК СуммаНУ,
	|	ВремТабл.СуммаМУ  				КАК СуммаМУ,
	|	ВремТабл.СуммаПР  				КАК СуммаПР,
	|	ВремТабл.СуммаВР  				КАК СуммаВР,
	|	ВремТабл.СтавкаНалогаНаПрибыль  КАК СтавкаНалогаНаПрибыль,
	|	ВремТабл.СуммаОНО 				КАК СуммаОНО,
	|	ВремТабл.СуммаОНА 				КАК СуммаОНА,
	|	1 								КАК Количество
	|ИЗ
	|	ВремТабл КАК ВремТабл
	|ИТОГИ
	|	%ДопИтоги%
	|	СУММА(СуммаНУ),
	|	СУММА(СуммаМУ),
	|	СУММА(СуммаПР),
	|	СУММА(СуммаВР),
	|	СУММА(СтавкаНалогаНаПрибыль)/СУММА(Количество) КАК СтавкаНалогаНаПрибыль,
	|	СУММА(СуммаОНО),
	|	СУММА(СуммаОНА)
	|ПО
	|	ВидАктивовОбязательств
	|";

	ТекстГде	  = "";
	ТекстДопПоля  = "";
	ТекстДопИтоги = "";	
	
	Если ВидАктивовОбязательств <> Неопределено Тогда
		Запрос.УстановитьПараметр("Вид", ВидАктивовОбязательств);
		ТекстГде 	  = "ГДЕ Табл.ВидАктивовОбязательств = &Вид";
		ТекстДопПоля  = ТекстДопПоля  + "Истина КАК ОтредактированоВручную, ";
		ТекстДопИтоги = ТекстДопИтоги + "МАКСИМУМ(ОтредактированоВручную), ";
	КонецЕсли;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ГДЕ%"		, ТекстГде);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДопПоля%"	, ТекстДопПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДопИтоги%"	, ТекстДопИтоги);
	
	Результат = Запрос.Выполнить();

	// Обход результата запроса.
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
 	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Объект.РасчетыОН.НайтиСтроки(Новый Структура("ВидАктивовОбязательств", Выборка.ВидАктивовОбязательств));	
		
		Для каждого Стр Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(Стр, Выборка);	
		КонецЦикла; 
		
	КонецЦикла;  

КонецПроцедуры // РасчитатьСуммыИтогиОН()

// Процедура - обработчик события "ПриИзменении" поля "СуммаПР" таблицы "РасшифровкаРасчетов".
// 
&НаСервере
Процедура РасчитатьСуммыОН(Идентификатор)
	
	ТекущиеДанные = РасшифровкаРасчетов.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные <> Неопределено Тогда
		бит_му_ОбщегоНазначения.РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств(ТекущиеДанные, ТекущиеДанные.СтавкаНалогаНаПрибыль);
		ТекущиеДанные.ОтредактированоВручную = Истина;
	КонецЕсли;
	
КонецПроцедуры // РасчитатьСуммыОН()

// Процедура удаляет запись протокола для текущего вида активов/обяхательств.
// 
&НаСервере
Процедура УдалитьДанныеПоВидуАктивовОбязательств(ВидАктивовОбязательств)

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.УдалитьДанныеПоВидуАктивовОбязательств(ВидАктивовОбязательств, РасшифровкаРасчетов); 
	
КонецПроцедуры // УдалитьДанныеПоВидуАктивовОбязательств()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция получает значение субконто в табличном поле исходя из имени элемента и имени табличного поля.
// Значение получается исходя из предположения что ИмяЭлементаУправления = ИмяТабличногоПоля+ИмяРеквизита.
// 
// Параметры:
//  ТекущаяСтрока      - ДанныеФормыКоллекция.
//  ИмяТабличногоПоля  - Строка.
//  ИмяЭлемента        - Строка.
//  ЗначениеСубконто   - Произвольный.
// 
// Возвращаемое значение:
//  Произвольный - значение субконто.
// 
&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяТабличногоПоля = "РасчетыОН";
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

// Процедура обрабатывает изменение субконто МУ.
// 
// Параметры:
//  Контейнер         - Произвольный.
//  ЗначениеСубконто  - Произвольный - Текущее значение субконто.
// 
&НаКлиенте
Процедура ИзменениеСубконтоМУ(Контейнер, ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "Субконто_" , фКоличествоСубконтоМУ);
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "Субконто_", ЗначениеСубконто  , фКоличествоСубконтоМУ);
      бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "Субконто_",""  , фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

// Процедура обрабатывает начало выбора субконто МУ.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
//  ЗначениеСубконто     - Произвольный.
// 
&НаКлиенте
Процедура НачалоВыбораСубконтоМУ(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"Субконто_"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ТаблицаОбъекта = Объект.РасчетыОН;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И (Не ТаблицаОбъекта.Итог("СуммаМУ") = 0
			ИЛИ Не ТаблицаОбъекта.Итог("СуммаНУ") = 0
			ИЛИ Не ТаблицаОбъекта.Итог("СуммаПР") = 0) Тогда
			
		ТекстВОпроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВОпроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					  		
	Иначе	
		
	    ИзменениеВалютыСервер();
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли; 
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ        - Строка.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменениеВалютыСервер(мКэшРеквизитовФормы);	
	Иначе	
	    ИзменениеВалютыСервер();
	КонецЕсли;
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент()

// Процедура выполняет действия, необъодимые при изменений данных строки таблицы расшифровки.
// 
&НаКлиенте
Процедура ИзменениеСтрокиРасшифровкиРасчетов()

	ТекущиеДанные = Элементы.РасшифровкаРасчетов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РасчитатьСуммыОН(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;  	
	
	РасчитатьСуммыИтогиОН(, ТекущиеДанные.ВидАктивовОбязательств, Истина);
	
	// Признаки модифицированности.
	ЭтаФорма.Модифицированность 			= Истина;
	
КонецПроцедуры // ИзменениеСтрокиРасшифровкиРасчетов()

// Процедура выполняет действия, необъодимые при изменений данных строки таблицы РасчетыОН.
// 
&НаКлиенте
Процедура ИзменениеСтрокиРасчетовОН()

	ТекущиеДанные = Элементы.РасчетыОН.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		УдалитьДанныеПоВидуАктивовОбязательств(ТекущиеДанные.ВидАктивовОбязательств);
		
		СтрокаРасшифровки = РасшифровкаРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, ТекущиеДанные);
		СтрокаРасшифровки.ИД = Новый УникальныйИдентификатор;
		СтрокаРасшифровки.ОтредактированоВручную = Истина;
		СтрокаРасшифровки.НомерСтроки = 1;
		
		РасчитатьСуммыИтогиОН(, ТекущиеДанные.ВидАктивовОбязательств);
		
	КонецЕсли;
	
	УстановитьОтборДляТаблицыРасшифровки();

КонецПроцедуры // ИзменениеСтрокиРасчетовОН()

// Процедура выполняет действия, необъодимые при изменении ставки налога на прибыль.
// 
&НаКлиенте
Процедура ИзменениеСтавки()

	Если Объект.РасчетыОН.Количество() > 0  Тогда
		// И Объект.СтавкаНалогаНаПрибыль <> мКэшРеквизитовФормы.СтавкаНалогаНаПрибыль.
		
		ТекстВопроса = Нстр("ru = 'Измениласть ставка налога на прибыль. Будут пересчитаны суммы документа. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеСтавки", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
				
	КонецЕсли;	

КонецПроцедуры // ИзменениеСтавки()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ        - Строка.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ВопросИзменениеСтавки(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет 
		ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
		
		ИзвлечьИзКэша("СтавкаНалогаНаПрибыль");
		
	Иначе
		
		РасчитатьСуммыИтогиОН(Объект.СтавкаНалогаНаПрибыль);
		УстановитьОтборДляТаблицыРасшифровки();
	    ДобавитьВКэш("СтавкаНалогаНаПрибыль"); 
		
	КонецЕсли;	

КонецПроцедуры // ВопросИзменениеСтавки()

// Процедура получает из регистра накопления и записывает в текущие данные
// сумму начисленных процентов, контрагента и договор контрагента. 
// 
// Параметры:
//  СтруктураДанных.
// 
&НаКлиенте
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ОбновитьДанныеСтрокиДляРасчетовОН(СтруктураДанных)
Процедура ОбновитьДанныеСтрокиДляРасчетовОН(СтруктураДанных, ОбновлятьПРиКорректировки = Истина)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	ТекущиеДанные = Элементы.РасчетыОН.ТекущиеДанные;	
                                                           	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	ТекстСостояния = "Выполняется обновление данных для текущей строки N " 
				+ ТекущиеДанные.НомерСтроки +  " основной табличной части документа.";
	бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(ТекущиеДанные.ВидАктивовОбязательств);
	СтруктураДанных.Вставить("ВидыАктивовОбязательств", МассивВидов);
	
	ДанныеДляРасчетовОН = ПолучитьДанныеДляРасчетовОН(СтруктураДанных);//, Истина);	
	
	Если ДанныеДляРасчетовОН.Количество() > 0 Тогда 
			
		СтрокаРасчетовОН = ДанныеДляРасчетовОН[0];
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаРасчетовОН);
		ТекущиеДанные.СтавкаНалогаНаПрибыль = Объект.СтавкаНалогаНаПрибыль;
		
	КонецЕсли;
	
	//bit Amerkulov 26.11.2014 ++ Расчет отложенных налогов
	Для Каждого Стр Из РасшифровкаРасчетов Цикл
		Если Стр.ВидАктивовОбязательств = МассивВидов[0] Тогда
			Стр.СуммаПР 		= 0;
			Стр.СуммаРекласс 	= 0;
		КонецЕсли;
	КонецЦикла;			
	
	Если ОбновлятьПРиКорректировки = Истина Тогда		
		
		ДополнитьСтрокиДаннымиПРиКорректировок(МассивВидов[0]);
		
	Иначе
		
		ОбновитьДанныеСтрокиДляРасчетовОННаСервере(МассивВидов);
		
	КонецЕсли;
	
	ПересчитатьДанныеНаОсновнойВкладке();	
	СформироватьДеревоЗначенийНалоговаяБазаБалансоваяОценка();	
	//bit Amerkulov 26.11.2014 -- Расчет отложенных налогов		
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьНастройкиДоступныхСубконто();
		
КонецПроцедуры // ОбновитьДанныеСтрокиДляРасчетовОН()

// Процедура получает из регистра накопления и записывает 
// сумму начисленных процентов, контрагента и договор контрагента. 
// 
// 
// Параметры:
//  ТолькоПоОднойСтроке.
//  СформироватьЗаного.
//  МассивВидов.
// 
&НаКлиенте
Процедура ОбновитьДанныеДляРасчетовОН(ТолькоПоОднойСтроке = Истина, СформироватьЗаного = Ложь, МассивВидов = Неопределено)
	
	Если Объект.Проведен Тогда
		ТекстСообщения = Нстр("ru = 'Нельзя обновить данные для проведенного документа. Отмените проведение.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	//bit Amerkulov 05.02.2015 ++ Расчет отложенных налогов
	Если  НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ТекстСообщения = Нстр("ru = 'Запишите документ перед заполнением.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
	КонецЕсли;
	//bit Amerkulov 05.02.2015 -- Расчет отложенных налогов	
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	Если МассивВидов <> Неопределено Тогда
		СтруктураДанных.Вставить("ВидыАктивовОбязательств", МассивВидов);	
	КонецЕсли;
	
	Если ТолькоПоОднойСтроке Тогда
		
		ОбновитьДанныеСтрокиДляРасчетовОН(СтруктураДанных);
		
	Иначе
		
		Если СформироватьЗаного Тогда
			ТекстСостояния = "Выполняется заполнение основной табличной части документа.";
		Иначе
			ТекстСостояния = "Выполняется обновление основной табличной части документа.";
		КонецЕсли;
		бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
		
		ОбновитьДанныеТаблицыДляРасчетовОН(СтруктураДанных, СформироватьЗаного);
		
	КонецЕсли; 
	
	УстановитьОтборДляТаблицыРасшифровки();
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ОбновитьДанныеДляРасчетовОН()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
	
КонецПроцедуры // УправлениеЭлементамиФормы()
											   
// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет устанавливает связи параметров выбора и связи по типу субконто,
// восстанавливает настройки субконто, задает настройки оформления для полей субконто.
// 
&НаСервере 
Процедура ОформитьСубконто()
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетРасходовДоходов", "Субконто_", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	 											  ,"СчетРасходовДоходов"
												  ,"Субконто_"
												  ,фКоличествоСубконтоМУ
												  ,"РасчетыОН"
												  ,"Элементы.РасчетыОН.ТекущиеДанные");
												  
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	ВосстановитьНастройкиДоступныхСубконто(); 
	
	УсловноеОформление.Элементы.Очистить();

	// Настройки оформления для полей субконто.
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"РасчетыОН"
															   ,"Субконто_"
															   ,"КоличествоДоступныхСубконтоМУ"
															   ,фКоличествоСубконтоМУ);
	
	
	// Установить видимость реквизитов и заголовков колонок.	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходовДоходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "Субконто_");	
	
КонецПроцедуры // ОформитьСубконто()

 // Процедура устанавливает отбор для таблицы расшифровки 
 // по текущему виду активов/обязательств.
 // 
&НаКлиенте
Процедура УстановитьОтборДляТаблицыРасшифровки()

	ТекущиеДанные = Элементы.РасчетыОН.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбор = Новый Структура("ВидАктивовОбязательств", ТекущиеДанные.ВидАктивовОбязательств);
		ФиксСтруктура = Новый ФиксированнаяСтруктура(СтруктураОтбор);
	
		Элементы.РасшифровкаРасчетов.ОтборСтрок = ФиксСтруктура;
			
	КонецЕсли;	

КонецПроцедуры // УстановитьОтборДляТаблицыРасшифровки()

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ОбновитьДанныеСтрокиДляРасчетовОННаСервере(МассивВидов)
	ТаблицаКорректировок = СформироватьСохраненнуюТаблицу();
	
	Для Каждого Стр Из ТаблицаКорректировок Цикл
		Если Стр.ВидАктивовОбязательств = МассивВидов[0] Тогда
			НоваяСтрока = РасшифровкаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОрганизацииРОН()
	//Обновление ТЧ коректировок
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 1);
	СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.БалансовыеКорректировки"));
	ОбновитьДанныеДляРасчетовОНКорректировкиПоБалансу(СтруктураДанных);	
	СформироватьДеревоЗначенийКорректировкаПоБалансу();	

	//Обновление ТЧ ПР
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 1);
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза"));
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.ПостоянныеРазницы"));
	СтруктураДанных.Вставить("ТипыНастройки", СписокТипов);	
	ОбновитьДанныеДляРасчетовОНПостоянныеРазницы(СтруктураДанных);	
	СформироватьДеревоЗначенийПостоянныеРазницы();	
КонецПроцедуры

//bit auavseenkov++ Расчет отложенных налогов 24.11.2014
&НаСервере
Процедура АвтозаполнениеПолей()
	
 	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_му_Настройки.Значение,
		|	бит_му_Настройки.ИмяНастройки
		|ИЗ
		|	РегистрСведений.бит_му_Настройки КАК бит_му_Настройки
		|ГДЕ
		|	бит_му_Настройки.Группа = &Группа
		|	И бит_му_Настройки.ИмяНастройки В(&ИмяНастройки)";

	ИменаНастройки = Новый Массив;
	ИменаНастройки.Добавить("Счет ОНА");
	ИменаНастройки.Добавить("Счет ОНО");
	ИменаНастройки.Добавить("Счет расходов/доходов");
	ИменаНастройки.Добавить("Субконто «Объект» счета расходов/доходов");
	ИменаНастройки.Добавить("Субконто «Функция» счета расходов/доходов");
	
	Запрос.УстановитьПараметр("Группа", "Отложенные налоги");
	Запрос.УстановитьПараметр("ИмяНастройки", ИменаНастройки);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИмяНастройки = "Счет ОНА" Тогда 
			Объект.СчетУчетаОНА = Выборка.Значение ;
		ИначеЕсли  Выборка.ИмяНастройки = "Счет ОНО" Тогда 
			Объект.СчетУчетаОНО = Выборка.Значение ;
		ИначеЕсли  Выборка.ИмяНастройки = "Счет расходов/доходов" Тогда 
			Объект.СчетРасходовДоходов = Выборка.Значение ;
		ИначеЕсли  Выборка.ИмяНастройки = "Субконто «Объект» счета расходов/доходов" Тогда
			Объект.Субконто_1 = Выборка.Значение ;
		ИначеЕсли  Выборка.ИмяНастройки = "Субконто «Функция» счета расходов/доходов" Тогда
			Объект.Субконто_2 = Выборка.Значение ;
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры 

//bit Amerkulov 26.11.2014 ++ Расчет отложенных налогов	

&НаСервере
Функция СформироватьСохраненнуюТаблицу()
	
	ТаблицаКорректировок = РасшифровкаРасчетов.Выгрузить();
	ТаблицаКорректировок.Свернуть("Объект, ВидАктивовОбязательств", "СуммаПР,СуммаРекласс");
	Возврат ТаблицаКорректировок;
	
КонецФункции


&НаСервере
Процедура ПересчитатьДанныеНаОсновнойВкладке() 
	
	Отбор = Новый Структура;
	Отбор.Вставить("СопоставлятьПоОбъекту",Ложь);	
	ОтборПоКорректировкам = Новый Структура;

	ОтборПоКорректировкам.Вставить("Объект",Справочники.ОбъектыСтроительства.ПустаяСсылка());
	ОтборПоКорректировкам.Вставить("ДобавленоВручную",Истина);
	
	
	ТаблицаДляСвертки = РасшифровкаРасчетов.Выгрузить();	
	Для Каждого Стр Из ТаблицаДляСвертки Цикл
		Отбор.Вставить("ВидАктивовОбязательств",Стр.ВидАктивовОбязательств);
		СтрокиБезРасшифровкиПоОбъекту = Объект.РасшифровкиНалоговаяБазаБалансоваяОценка.НайтиСтроки(Отбор);
		
		ОтборПоКорректировкам.Вставить("ВидАктивовОбязательств",Стр.ВидАктивовОбязательств);
		СтрокиКорректировки1 = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(ОтборПоКорректировкам);
		СтрокиКорректировки2 = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(ОтборПоКорректировкам);
		
		
		Если СтрокиБезРасшифровкиПоОбъекту.Количество() ИЛИ СтрокиКорректировки1.Количество() ИЛИ СтрокиКорректировки2.Количество() Тогда
			Стр.Объект = Неопределено;	
		КонецЕсли;		
	КонецЦикла;
	ТаблицаДляСвертки.Свернуть("Объект, ВидАктивовОбязательств", "СуммаНУ,СуммаМУ,СуммаПР,СуммаОНА,СуммаОНО,СуммаРекласс");		
	РасшифровкаРасчетов.Загрузить(ТаблицаДляСвертки);
	
	
	Для Каждого Стр Из Объект.РасчетыОН Цикл
		Стр["СуммаПР"] 		= 0;
		Стр["СуммаРекласс"] = 0;	
	КонецЦикла;
	
	
	
	Для Каждого Стр Из РасшифровкаРасчетов Цикл
		Стр.ИД = Новый УникальныйИдентификатор;	
		Стр.СтавкаНалогаНаПрибыль 	= Объект.СтавкаНалогаНаПрибыль;
		Стр.Организация 			= Объект.Организация;
		РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств(Стр);
		
		Отбор = Новый Структура("ВидАктивовОбязательств", Стр.ВидАктивовОбязательств); 
		НайденныеСтроки = Объект.РасчетыОН.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.СуммаПР 		= НайденнаяСтрока.СуммаПР + Стр.СуммаПР;
			НайденнаяСтрока.СуммаРекласс 	= НайденнаяСтрока.СуммаРекласс + Стр.СуммаРекласс;
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеОНАОНО = Новый Соответствие;
	
	Для каждого СтрокаТаб Из Объект.РасчетыОН Цикл
		РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств(СтрокаТаб,Истина);	
		
		Если ЗначениеЗаполнено(СтрокаТаб.СуммаОНА) Тогда
			СоответствиеОНАОНО.Вставить(СтрокаТаб.ВидАктивовОбязательств, "ОНА");	
		Иначе
			СоответствиеОНАОНО.Вставить(СтрокаТаб.ВидАктивовОбязательств, "ОНО");				
		КонецЕсли;
		
		
	КонецЦикла;
	
	МассивКУдалению = Новый Массив;
	Для Каждого Стр Из РасшифровкаРасчетов Цикл
		Если Стр.СуммаНУ = 0 И Стр.СуммаМУ = 0 И Стр.СуммаПР = 0 И Стр.СуммаРекласс = 0 Тогда
			МассивКУдалению.Добавить(Стр);	
		КонецЕсли;
		
		ОНАОНО = СоответствиеОНАОНО.Получить(Стр.ВидАктивовОбязательств);
		Если ОНАОНО = "ОНА" И ЗначениеЗаполнено(Стр.СуммаОНО) Тогда
			Стр.СуммаОНА = -1* Стр.СуммаОНО;	
			Стр.СуммаОНО = 0;	
		КонецЕсли;
		
		Если ОНАОНО = "ОНО" И ЗначениеЗаполнено(Стр.СуммаОНА) Тогда
			Стр.СуммаОНО = -1* Стр.СуммаОНА;	
			Стр.СуммаОНА = 0;	
		КонецЕсли;
		
		
	КонецЦикла;
	
	Для Каждого Стр Из МассивКУдалению Цикл
		РасшифровкаРасчетов.Удалить(Стр);	
	КонецЦикла;
	
	МассивКУдалению = Новый Массив;
	Для Каждого Стр Из Объект.РасчетыОН Цикл
		Если Стр.СуммаНУ = 0 И Стр.СуммаМУ = 0 И Стр.СуммаПР = 0 И Стр.СуммаРекласс = 0 Тогда
			МассивКУдалению.Добавить(Стр);	
		КонецЕсли;
	КонецЦикла;	
	Для Каждого Стр Из МассивКУдалению Цикл
		Объект.РасчетыОН.Удалить(Стр);	
	КонецЦикла;		
	Объект.РасчетыОН.Сортировать("ВидАктивовОбязательств Возр");

	
	РасшифровкаРасчетов.Сортировать("ВидАктивовОбязательств, Объект Возр");
	ПеренумероватьТаблицуРасшифровки();	
	
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьТаблицуРасшифровки()
	
	ВидТекущий = Неопределено;
	СчетчикПоОбъекту = 1;
	Для Каждого Стр Из РасшифровкаРасчетов Цикл
		
		Если Стр.ВидАктивовОбязательств <> ВидТекущий Тогда
			СчетчикПоОбъекту = 1;
			ВидТекущий = Стр.ВидАктивовОбязательств;
		Иначе
			СчетчикПоОбъекту = СчетчикПоОбъекту + 1;
		КонецЕсли;
		
		Отбор = Новый Структура("ВидАктивовОбязательств", Стр.ВидАктивовОбязательств); 
		НайденныеСтроки = Объект.РасчетыОН.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Стр.НомерСтроки = Строка(НайденныеСтроки[0].НомерСтроки) + "." + СчетчикПоОбъекту; 
		КонецЕсли;			
		
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ДополнитьСтрокиДаннымиПРиКорректировок(ВидАктивовОбязательств = Неопределено)
	
	ДополнитьСтрокиДаннымиПР(ВидАктивовОбязательств);	
	ДополнитьСтрокиДаннымиКорректировок(ВидАктивовОбязательств);	
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокиДаннымиПР(ВидАктивовОбязательств = Неопределено)
	
	Для Каждого Строка Из Объект.РасшифровкаПостоянныеРазницы Цикл
		
		Если ВидАктивовОбязательств <> Неопределено И Строка.ВидАктивовОбязательств <> ВидАктивовОбязательств Тогда
			Продолжить;	
		КонецЕсли;			
		
		ДобавленнаяСтрока = РасшифровкаРасчетов.Добавить();
		ДобавленнаяСтрока.СуммаПР 				= Строка.СуммаКорректировки;
		ДобавленнаяСтрока.Объект 				= Строка.Объект;
		ДобавленнаяСтрока.ВидАктивовОбязательств = Строка.ВидАктивовОбязательств;
		ДобавленнаяСтрока.Организация			= Объект.Организация;		
		
		Отбор = Новый Структура("ВидАктивовОбязательств", Строка.ВидАктивовОбязательств); 
		НайденныеСтроки = Объект.РасчетыОН.НайтиСтроки(Отбор);	
		Если НайденныеСтроки.Количество() = 0 Тогда			
			НайденнаяСтрока = Объект.РасчетыОН.Добавить();
			НайденнаяСтрока.СтавкаНалогаНаПрибыль  = Объект.СтавкаНалогаНаПрибыль;
			НайденнаяСтрока.ВидАктивовОбязательств = Строка.ВидАктивовОбязательств;	
		КонецЕсли;
						
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокиДаннымиКорректировок(ВидАктивовОбязательств = Неопределено)
	
	Для Каждого Строка Из Объект.РасшифровкаКорректировкаПоБалансу Цикл
		
		Если ВидАктивовОбязательств <> Неопределено И Строка.ВидАктивовОбязательств <> ВидАктивовОбязательств Тогда
			Продолжить;	
		КонецЕсли;
		
		ДобавленнаяСтрока = РасшифровкаРасчетов.Добавить();
		ДобавленнаяСтрока.СуммаРекласс 				= Строка.СуммаКорректировки;
		ДобавленнаяСтрока.Объект 					= Строка.Объект;
		ДобавленнаяСтрока.ВидАктивовОбязательств 	= Строка.ВидАктивовОбязательств;
		ДобавленнаяСтрока.Организация				= Объект.Организация;
		
		
		Отбор = Новый Структура("ВидАктивовОбязательств", Строка.ВидАктивовОбязательств); 
		НайденныеСтроки = Объект.РасчетыОН.НайтиСтроки(Отбор);	
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденнаяСтрока = Объект.РасчетыОН.Добавить();
			НайденнаяСтрока.СтавкаНалогаНаПрибыль  = Объект.СтавкаНалогаНаПрибыль;
			НайденнаяСтрока.ВидАктивовОбязательств = Строка.ВидАктивовОбязательств;	
		КонецЕсли;		
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокиДаннымиКорректировокПоИсточнику(ВидАктивовОбязательств, ИсточникДанных)
	
	Для Каждого Строка Из Объект.РасшифровкаКорректировкаПоБалансу Цикл
		
		Если Строка.ВидАктивовОбязательств <> ВидАктивовОбязательств  ИЛИ Строка.ИсточникДанных <> ИсточникДанных Тогда
			Продолжить;	
		КонецЕсли;
		
		ДобавленнаяСтрока = РасшифровкаРасчетов.Добавить();
		ДобавленнаяСтрока.СуммаРекласс 				= Строка.СуммаКорректировки;
		ДобавленнаяСтрока.Объект 					= Строка.Объект;
		ДобавленнаяСтрока.ВидАктивовОбязательств 	= Строка.ВидАктивовОбязательств;
		ДобавленнаяСтрока.Организация				= Объект.Организация;
		
		
		Отбор = Новый Структура("ВидАктивовОбязательств", Строка.ВидАктивовОбязательств); 
		НайденныеСтроки = Объект.РасчетыОН.НайтиСтроки(Отбор);	
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденнаяСтрока = Объект.РасчетыОН.Добавить();
			НайденнаяСтрока.СтавкаНалогаНаПрибыль  = Объект.СтавкаНалогаНаПрибыль;
			НайденнаяСтрока.ВидАктивовОбязательств = Строка.ВидАктивовОбязательств;	
		КонецЕсли;		
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
Процедура РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств(ТекущиеДанные, ГоловнаяСтрока = Ложь) Экспорт
	
	Ставка = ТекущиеДанные.СтавкаНалогаНаПрибыль/100;
	
	// Временные разницы вычисляются по формуле:  
	// Налоговая база - Балансовая стоимость - Постоянные разницы.
	СуммаВР =  ТекущиеДанные.СуммаНУ + ТекущиеДанные.СуммаРекласс - ТекущиеДанные.СуммаМУ - ТекущиеДанные.СуммаПР;
	ТекущиеДанные.СуммаВР = СуммаВР;
	
	// СуммаОНА  равно произведению положительной суммы временных разниц 
	// на ставку налога на прибыль; 
	// если сумма в графе «Временные разницы» отрицательна или нулевая, ОНА равно нулю
	Если СуммаВР <= 0 Тогда
		ТекущиеДанные.СуммаОНА = 0;			
	Иначе
	    ТекущиеДанные.СуммаОНА = СуммаВР * Ставка;		
	КонецЕсли; 
	
	// СуммаОНО равно произведению отрицательной суммы временных разниц 
	// на ставку налога на прибыль со знаком минус; 
	// если сумма в графе «Временные разницы» положительна или нулевая, ОНО равно нулю
	Если СуммаВР >= 0 Тогда
		ТекущиеДанные.СуммаОНО = 0;			
	Иначе
	    ТекущиеДанные.СуммаОНО = СуммаВР * (Ставка * -1);		
	КонецЕсли;	
	
	Если ГоловнаяСтрока Тогда
		ТекущиеДанные.МСФО_ИтогоНалоговаяБаза = ТекущиеДанные.СуммаНУ + ТекущиеДанные.СуммаРекласс;		
	КонецЕсли;
	

КонецПроцедуры // РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств()



// ИНТЕРФЕЙС - ФОРМИРОВАНИЕ ДЕРЕВА ЗНАЧЕНИЙ ИЗ ТАБЛИЦЫ
&НаСервере
Процедура СформироватьДеревоЗначенийНалоговаяБазаБалансоваяОценка()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТЗ.ВидАктивовОбязательств,
	                      |	ТЗ.ИсточникДанных,
	                      |	ТЗ.НомерПоДереву,
	                      |	ТЗ.СуммаНУ,
	                      |	ТЗ.СуммаМУ
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	&ТЗ КАК ТЗ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	                      |	ВТ.ИсточникДанных КАК ИсточникДанных,
	                      |	ВТ.НомерПоДереву КАК НомерПоДереву,
	                      |	СУММА(ВТ.СуммаНУ) КАК СуммаНУ,
	                      |	СУММА(ВТ.СуммаМУ) КАК СуммаМУ
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.ВидАктивовОбязательств,
	                      |	ВТ.ИсточникДанных,
	                      |	ВТ.НомерПоДереву
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерПоДереву
	                      |ИТОГИ
	                      |	СУММА(СуммаНУ),
	                      |	СУММА(СуммаМУ)
	                      |ПО
	                      |	ВидАктивовОбязательств
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ТЗ",Объект.РасшифровкиНалоговаяБазаБалансоваяОценка.Выгрузить());
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам),"ДеревоНалоговаяБазаБалансоваяОценка");
	
	РассчитатьИтогиДеревьев(); // agoncharenko #1886 05102015 начало
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоЗначенийКорректировкаПоБалансу()
	
	ПеренумероватьСтрокиКорректировки();		
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТЗ.ВидАктивовОбязательств,
	                      |	ТЗ.ИсточникДанных,
	                      |	ТЗ.СуммаКорректировки,
	                      |	ТЗ.ИсточникДанныхДляВычета,
	                      |	ТЗ.НомерСтрокиПарнойКорректировки,
	                      |	ТЗ.НомерСтрокиТекущий КАК НомерСтроки,
	                      |	ТЗ.ЗеркальнаяКорректировка,
	                      |	ТЗ.ДобавленоВручную,
	                      |	ТЗ.ВидДобавленВручную
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	&ТЗ КАК ТЗ
	                      |ГДЕ
	                      |	НЕ ТЗ.Скрывать
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	                      |	ВТ.ИсточникДанных КАК ИсточникДанных,
	                      |	СУММА(ВТ.СуммаКорректировки) КАК СуммаКорректировки,
	                      |	ВТ.ИсточникДанныхДляВычета,
	                      |	ВТ.НомерСтрокиПарнойКорректировки,
	                      |	ВТ.НомерСтроки КАК НомерСтроки,
	                      |	ВТ.ЗеркальнаяКорректировка,
	                      |	МАКСИМУМ(ВТ.ДобавленоВручную) КАК ДобавленоВручную,
	                      |	МАКСИМУМ(ВТ.ВидДобавленВручную) КАК ВидДобавленВручную
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.ВидАктивовОбязательств,
	                      |	ВТ.ИсточникДанных,
	                      |	ВТ.НомерСтроки,
	                      |	ВТ.ЗеркальнаяКорректировка,
	                      |	ВТ.ИсточникДанныхДляВычета,
	                      |	ВТ.НомерСтрокиПарнойКорректировки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтроки
	                      |ИТОГИ ПО
	                      |	ВидАктивовОбязательств
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ТЗ",Объект.РасшифровкаКорректировкаПоБалансу.Выгрузить());
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаАО Из Дерево.Строки Цикл	
		СтрокаАО.ДобавленоВручную = Ложь;
		Если СтрокаАО.ВидДобавленВручную = Истина Тогда
			Если СтрокаАО.Строки.Количество() = 1 И СтрокаАО.Строки[0].ДобавленоВручную = Ложь Тогда
				СтрокаАО.Строки.Удалить(СтрокаАО.Строки[0]);	
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоКорректировкаПоБалансу");
	РассчитатьИтогиДеревьев(); // agoncharenko #1886 05102015 начало
		
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиКорректировки() Экспорт
	
	//ТекущийНомер = Неопределено;

	//СчетчикОсновной 				= -1;
	//СчетчикЗеркальныхКорректировок 	=  0;
	//
	//Для Каждого Стр Из Объект.РасшифровкаКорректировкаПоБалансу Цикл
	//	Стр.Перенумерован = Ложь;
	//	Если Стр.ЗеркальнаяКорректировка Тогда
	//		Стр.НомерСтрокиТекущий 				= Стр.НомерСтрокиПарнойКорректировки;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//
	//Объект.РасшифровкаКорректировкаПоБалансу.Сортировать("НомерСтрокиТекущий, ВидАктивовОбязательств, ИсточникДанных, ИсточникДанныхДляВычета, ЗеркальнаяКорректировка возр"); 	
	//
	//Для Каждого Стр Из Объект.РасшифровкаКорректировкаПоБалансу Цикл
	//			
	//	Если ТекущийНомер <> Стр.НомерСтрокиТекущий Тогда
	//		СчетчикОсновной 				= СчетчикОсновной + 2;
	//		СчетчикЗеркальныхКорректировок 	= СчетчикЗеркальныхКорректировок + 2;
	//		ТекущийНомер = Стр.НомерСтрокиТекущий;			
	//	КонецЕсли;
	//			
	//	Если Стр.ЗеркальнаяКорректировка Тогда
	//		Стр.НомерСтрокиТекущий 				= СчетчикЗеркальныхКорректировок;
	//		Стр.НомерСтрокиПарнойКорректировки 	= СчетчикОсновной;
	//	Иначе
	//		Стр.НомерСтрокиТекущий 				= СчетчикОсновной;
	//		Стр.НомерСтрокиПарнойКорректировки 	= СчетчикЗеркальныхКорректировок;					
	//	КонецЕсли;
	//	
	//	Стр.Перенумерован = Истина;				
	//	
	//КонецЦикла;
	
	Таблица = Объект.РасшифровкаКорректировкаПоБалансу.Выгрузить();
	Таблица.Колонки.Добавить("исхНомерСтрокиТекущий");
	Таблица.Колонки.Добавить("исхНомерСтрокиПарнойКорректировки");
	
	Для Каждого Стр Из Таблица Цикл
		Стр.исхНомерСтрокиТекущий 				= Стр.НомерСтрокиТекущий;	
		Стр.исхНомерСтрокиПарнойКорректировки 	= Стр.НомерСтрокиПарнойКорректировки;	
	КонецЦикла;
	
	СчетчикОсновной 				= 0;
	текущийВидАктивовОбязательств	= Неопределено;
	текущийИсточникДанных		 	= Неопределено;
	текущийИсточникДанныхДляВычета 	= Неопределено;
	Таблица.Сортировать("ВидАктивовОбязательств, ИсточникДанных, ИсточникДанныхДляВычета"); 
	Для Каждого Стр Из Таблица Цикл
		
		Если Стр.ИсточникДанныхДляВычета <> текущийИсточникДанныхДляВычета Или Стр.ИсточникДанных <> текущийИсточникДанных ИЛИ Стр.ВидАктивовОбязательств <> текущийВидАктивовОбязательств Тогда
			
			текущийВидАктивовОбязательств = Стр.ВидАктивовОбязательств;
			текущийИсточникДанных = Стр.ИсточникДанных;
			текущийИсточникДанныхДляВычета = Стр.ИсточникДанныхДляВычета;
			СчетчикОсновной = СчетчикОсновной + 1;
			
		КонецЕсли;
		
		Стр.НомерСтрокиТекущий 				= СчетчикОсновной;
		Стр.НомерСтрокиПарнойКорректировки 	= 0;
		
	КонецЦикла;
	
	Для Каждого Стр Из Таблица Цикл
		
		Если Не ЗначениеЗаполнено(Стр.НомерСтрокиПарнойКорректировки) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("исхНомерСтрокиТекущий", Стр.исхНомерСтрокиТекущий);
			СтрокиИсходные = Таблица.НайтиСтроки(Отбор);
			Отбор = Новый Структура;			
			Отбор.Вставить("исхНомерСтрокиПарнойКорректировки", Стр.исхНомерСтрокиТекущий);
			СтрокиКорректировки = Таблица.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаНайденная Из СтрокиИсходные Цикл
				Если СтрокиКорректировки.Количество() Тогда
					СтрокаНайденная.НомерСтрокиПарнойКорректировки = СтрокиКорректировки[0].НомерСтрокиТекущий;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаНайденная Из СтрокиКорректировки Цикл
				Если СтрокиИсходные.Количество() Тогда
					СтрокаНайденная.НомерСтрокиПарнойКорректировки = СтрокиИсходные[0].НомерСтрокиТекущий;
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;	
		
	КонецЦикла;
	
	
	Объект.РасшифровкаКорректировкаПоБалансу.Загрузить(Таблица);	
	
	Объект.РасшифровкаКорректировкаПоБалансу.Сортировать("НомерСтрокиТекущий, ВидАктивовОбязательств, ИсточникДанных, ИсточникДанныхДляВычета, Объект возр"); 
	
	ТекущийНомер = 0;
	СчетчикПООбъекту = 0;
	Для Каждого Стр Из Объект.РасшифровкаКорректировкаПоБалансу Цикл
		
		Если ТекущийНомер <> Стр.НомерСтрокиТекущий Тогда
			ТекущийНомер =  Стр.НомерСтрокиТекущий;
			СчетчикПООбъекту = 1;
		Иначе
			СчетчикПООбъекту = СчетчикПООбъекту + 1;			
		КонецЕсли;
		
		Стр.НомерПоОбъекту = Строка(Стр.НомерСтрокиТекущий) + "." + СчетчикПООбъекту;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоЗначенийПостоянныеРазницы()
	
	ПеренумероватьСтрокиКорректировкиПР();	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТЗ.ВидАктивовОбязательств,
	                      |	ТЗ.ИсточникДанных,
	                      |	ТЗ.СуммаКорректировки,
	                      |	ТЗ.ИсточникДанныхДляВычета,
	                      |	ТЗ.НомерСтрокиТекущий КАК НомерСтроки,
	                      |	ТЗ.ДобавленоВручную,
	                      |	ТЗ.ВидДобавленВручную,
	                      |	ТЗ.ТипНастройки
	                      |ПОМЕСТИТЬ ВТ
	                      |ИЗ
	                      |	&ТЗ КАК ТЗ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	                      |	ВТ.ИсточникДанных КАК ИсточникДанных,
	                      |	СУММА(ВТ.СуммаКорректировки) КАК СуммаКорректировки,
	                      |	ВТ.ИсточникДанныхДляВычета,
	                      |	ВТ.НомерСтроки КАК НомерСтроки,
	                      |	МАКСИМУМ(ВТ.ДобавленоВручную) КАК ДобавленоВручную,
	                      |	МАКСИМУМ(ВТ.ВидДобавленВручную) КАК ВидДобавленВручную,
	                      |	ВТ.ТипНастройки
	                      |ИЗ
	                      |	ВТ КАК ВТ
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ.ВидАктивовОбязательств,
	                      |	ВТ.ИсточникДанных,
	                      |	ВТ.НомерСтроки,
	                      |	ВТ.ИсточникДанныхДляВычета,
	                      |	ВТ.ТипНастройки
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	НомерСтроки
	                      |ИТОГИ ПО
	                      |	ВидАктивовОбязательств
	                      |АВТОУПОРЯДОЧИВАНИЕ");
						  
	Запрос.УстановитьПараметр("ТЗ",Объект.РасшифровкаПостоянныеРазницы.Выгрузить());
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СтрокаАО Из Дерево.Строки Цикл	
		СтрокаАО.ДобавленоВручную = Ложь;
		Если СтрокаАО.ВидДобавленВручную = Истина Тогда
			Если СтрокаАО.Строки.Количество() = 1 И СтрокаАО.Строки[0].ДобавленоВручную = Ложь Тогда
				СтрокаАО.Строки.Удалить(СтрокаАО.Строки[0]);	
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоПостоянныеРазницы");
	
	РассчитатьИтогиДеревьев(); // agoncharenko #1886 05102015 начало	
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиКорректировкиПР() 
	
	ТекущийВид 						= Неопределено;
	ТекущийИсточникДанных 			= Неопределено;
	ТекущийИсточникДанныхДляВычета 	= Неопределено;
	ТекущийТипНастройки			 	= Неопределено;

	СчетчикОсновной 				= 0;
	СчетчикПООбъекту 				= 1;
		
	Объект.РасшифровкаПостоянныеРазницы.Сортировать("ВидАктивовОбязательств, ИсточникДанных, ИсточникДанныхДляВычета, ТипНастройки, Объект возр"); 	
	
	Для Каждого Стр Из Объект.РасшифровкаПостоянныеРазницы Цикл
		
		Если ТекущийВид <> Стр.ВидАктивовОбязательств 
			ИЛИ ТекущийИсточникДанных 			<> Стр.ИсточникДанных
			ИЛИ ТекущийИсточникДанныхДляВычета 	<> Стр.ИсточникДанныхДляВычета
			ИЛИ ТекущийТипНастройки				<> Стр.ТипНастройки		
			Тогда
			СчетчикОсновной 				= СчетчикОсновной + 1;
			СчетчикПООбъекту = 1;		
			
			ТекущийВид = Стр.ВидАктивовОбязательств; 
			ТекущийИсточникДанных 			=Стр.ИсточникДанных;
			ТекущийИсточникДанныхДляВычета = Стр.ИсточникДанныхДляВычета;
			ТекущийТипНастройки				= Стр.ТипНастройки;					
			
		Иначе
			СчетчикПООбъекту = СчетчикПООбъекту + 1;
		КонецЕсли;
		
		Стр.НомерСтрокиТекущий 				= СчетчикОсновной;				
		Стр.НомерПоОбъекту = Строка(Стр.НомерСтрокиТекущий) + "." + СчетчикПООбъекту;		
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДляДереваНалоговаяБазаБалансоваяОценка()

	ТекущиеДанные = Элементы.ДеревоНалоговаяБазаБалансоваяОценка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ИсточникДанных) Тогда
			СтруктураОтбор = Новый Структура("ИсточникДанных", ТекущиеДанные.ИсточникДанных);			
		Иначе			
			СтруктураОтбор = Новый Структура("ВидАктивовОбязательств", ТекущиеДанные.ВидАктивовОбязательств);
		КонецЕсли;
		
		ФиксСтруктура = Новый ФиксированнаяСтруктура(СтруктураОтбор);
	
		Элементы.РасшифровкиНалоговаяБазаБалансоваяОценка.ОтборСтрок = ФиксСтруктура;
			
	КонецЕсли;	

КонецПроцедуры // УстановитьОтборДляТаблицыРасшифровки()

&НаКлиенте
Процедура УстановитьОтборДляДереваКорректировкаПоБалансу()

	ТекущиеДанные = Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбор = Новый Структура("ВидАктивовОбязательств", ТекущиеДанные.ВидАктивовОбязательств);
		
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ИсточникДанных) Тогда
			СтруктураОтбор.Вставить("ИсточникДанных", ТекущиеДанные.ИсточникДанных);			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда
			СтруктураОтбор.Вставить("НомерСтрокиТекущий", ТекущиеДанные.НомерСтроки);			
		КонецЕсли;			
	
		Если  ТекущиеДанные.ДобавленоВручную = Истина Тогда
			СтруктураОтбор.Вставить("ДобавленоВручнуюПоОбъекту", Истина);			
		КонецЕсли;
		
		
		ФиксСтруктура = Новый ФиксированнаяСтруктура(СтруктураОтбор);
	
		Элементы.РасшифровкаКорректировкаПоБалансу.ОтборСтрок = ФиксСтруктура;
			
	КонецЕсли;	

КонецПроцедуры // УстановитьОтборДляТаблицыРасшифровки()

&НаКлиенте
Процедура УстановитьОтборДляДереваПостоянныеРазницы()

	ТекущиеДанные = Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбор = Новый Структура("ВидАктивовОбязательств", ТекущиеДанные.ВидАктивовОбязательств);
				
		Если ЗначениеЗаполнено(ТекущиеДанные.ИсточникДанных) Тогда
			СтруктураОтбор.Вставить("ИсточникДанных", ТекущиеДанные.ИсточникДанных);			
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипНастройки) Тогда
			СтруктураОтбор.Вставить("ТипНастройки", ТекущиеДанные.ТипНастройки);			
		КонецЕсли;		
	
		Если  ТекущиеДанные.ДобавленоВручную = Истина Тогда
			СтруктураОтбор.Вставить("ДобавленоВручнуюПоОбъекту", Истина);			
		КонецЕсли;

		Если  ТекущиеДанные.ВидДобавленВручную = Истина Тогда
			СтруктураОтбор.Вставить("ДобавленоВручнуюПоОбъекту", Истина);			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда
			СтруктураОтбор.Вставить("НомерСтрокиТекущий", ТекущиеДанные.НомерСтроки);			
		КонецЕсли;		
		
		ФиксСтруктура = Новый ФиксированнаяСтруктура(СтруктураОтбор);
	
		Элементы.РасшифровкаПостоянныеРазницы.ОтборСтрок = ФиксСтруктура;
			
	КонецЕсли;	

КонецПроцедуры // УстановитьОтборДляТаблицыРасшифровки()



// ИНТЕРФЕЙС - ОБРАБОТЧИКИ СОБЫТИЙ
&НаКлиенте
Процедура ДеревоНалоговаяБазаБалансоваяОценкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНалоговаяБазаБалансоваяОценкаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНалоговаяБазаБалансоваяОценкаПриАктивизацииСтроки(Элемент)
	УстановитьОтборДляДереваНалоговаяБазаБалансоваяОценка();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКорректировкаПоБалансуПриАктивизацииСтроки(Элемент)
	УстановитьОтборДляДереваКорректировкаПоБалансу();
	//Если ЗначениеЗаполнено(НомерСтрокиДляПозиционированияКорректировка) Тогда
	//	Элементы.ДеревоКорректировкаПоБалансу.ВыделенныеСтроки.Очистить();
	//	НомерСтрокиДляПозиционированияКорректировка = Неопределено;
	//КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) И НЕ ТекущиеДанные.ЗеркальнаяКорректировка Тогда			
		Элементы.ДеревоКорректировкаПоБалансуДобавитьКопированиемКорректировки.Доступность = Истина;
	Иначе
		Элементы.ДеревоКорректировкаПоБалансуДобавитьКопированиемКорректировки.Доступность = Ложь;		
	КонецЕсли;	
	
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И  НЕ ТекущиеДанные.ЗеркальнаяКорректировка И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда	
		
			
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтрокиТекущий",ТекущиеДанные.НомерСтроки);	
		НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
		Если  НайденныеСтроки.Количество() И НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Ложь Тогда
			Элементы.ДеревоКорректировкаПоБалансуДобавитьРасшифровкуПоОбъектуКорректировка.Доступность = Истина;
		Иначе
			Элементы.ДеревоКорректировкаПоБалансуДобавитьРасшифровкуПоОбъектуКорректировка.Доступность = Ложь;			
		КонецЕсли;
		
		Элементы.РасшифровкаКорректировкаПоБалансуДобаитьПоОбъектуКорректировки.Доступность = Истина;
		Элементы.РасшифровкаКорректировкаПоБалансуДобавитьКопированиемПоОбъектуКорректировки.Доступность = Истина;
		Элементы.РасшифровкаКорректировкаПоБалансуУдалитьПоОбъектуКорректировки.Доступность = Истина;
		
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтрокиТекущий",ТекущиеДанные.НомерСтроки);	
		Отбор.Вставить("ДобавленоВручную", Истина);	
		
		НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			Элементы.ДеревоКорректировкаПоБалансуУдалитьРасшифровкиКорректировки.Доступность = Истина;
		Иначе
			Элементы.ДеревоКорректировкаПоБалансуУдалитьРасшифровкиКорректировки.Доступность = Ложь;				
		КонецЕсли;
		
			
		
	Иначе
    	Элементы.ДеревоКорректировкаПоБалансуДобавитьРасшифровкуПоОбъектуКорректировка.Доступность = Ложь;
		Элементы.ДеревоКорректировкаПоБалансуУдалитьРасшифровкиКорректировки.Доступность = Ложь;						
		
		Элементы.РасшифровкаКорректировкаПоБалансуДобаитьПоОбъектуКорректировки.Доступность = Ложь;
		Элементы.РасшифровкаКорректировкаПоБалансуДобавитьКопированиемПоОбъектуКорректировки.Доступность = Ложь;
		Элементы.РасшифровкаКорректировкаПоБалансуУдалитьПоОбъектуКорректировки.Доступность = Ложь;	
		
	КонецЕсли;
	
	Элементы.ДеревоКорректировкаПоБалансуУдалитьТекущийЭлементКорректировки.Доступность = Ложь;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) 
		ИЛИ ТекущиеДанные <> Неопределено И ТекущиеДанные.ВидДобавленВручную И ЗначениеЗаполнено(ТекущиеДанные.ВидАктивовОбязательств) И НЕ ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда
		Элементы.ДеревоКорректировкаПоБалансуУдалитьТекущийЭлементКорректировки.Доступность = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКорректировкаПоБалансуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКорректировкаПоБалансуПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока =  Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	
	Если ТекущаяСтрока.ДобавленоВручную <> Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоКорректировкаПоБалансуСуммаКорректировки" И ТекущаяСтрока.ЗеркальнаяКорректировка = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоКорректировкаПоБалансуИсточникДанных" Тогда
		Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов("Строка");	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКорректировкаПоБалансуПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНалоговаяБазаБалансоваяОценкаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаКорректировкаПоБалансуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаКорректировкаПоБалансуПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока =  Элементы.РасшифровкаКорректировкаПоБалансу.ТекущиеДанные;
	
	Если ТекущаяСтрока.ДобавленоВручнуюПоОбъекту <> Истина Тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Если ТекущаяСтрока.ЗеркальнаяКорректировка = Истина Тогда
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаКорректировкаПоБалансуПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаКорректировкаПоБалансуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаКорректировкаПоБалансу.ТекущиеДанные;
	НомерСтроки =  ТекущиеДанные.НомерСтрокиТекущий;
	Отбор = Новый Структура;
	Отбор.Вставить("ИДСтроки",ТекущиеДанные.ИДСтроки);	
	Отбор.Вставить("ЗеркальнаяКорректировка",Истина);	
	
	РасшифровкаКорректировкаПоБалансуПриИзмененииНаСервере(Отбор,ТекущиеДанные.СуммаКорректировки, ТекущиеДанные.Объект); 
	СформироватьДеревоЗначенийКорректировкаПоБалансу();
	СпозиционироватьсяНаВложеннойСтрокеТЧ("НомерСтроки", НомерСтроки);	
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаКорректировкаПоБалансуПриИзмененииНаСервере(Отбор, СуммаКорректировки, ОбъектСсылка)

	СтрокиЗеркальнойКорректировки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	
	СтрокиЗеркальнойКорректировки[0].Объект = ОбъектСсылка;
	СтрокиЗеркальнойКорректировки[0].СуммаКорректировки = -1 * СуммаКорректировки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПостоянныеРазницыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПостоянныеРазницыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока =  Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	
	Если ТекущаяСтрока.ДобавленоВручную <> Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоПостоянныеРазницыИсточникДанных" Тогда
		Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов("Строка");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПостоянныеРазницыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПостоянныеРазницыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПостоянныеРазницыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяСтрока =  Элементы.РасшифровкаПостоянныеРазницы.ТекущиеДанные;
	
	Если ТекущаяСтрока.ДобавленоВручнуюПоОбъекту <> Истина Тогда
		Отказ = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПостоянныеРазницыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПостоянныеРазницыПриАктивизацииСтроки(Элемент)
	УстановитьОтборДляДереваПостоянныеРазницы();
	
	ТекущиеДанные = Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда			
		Элементы.ДеревоПостоянныеРазницыДобавитьКопированиемПостоянныеРазницы.Доступность = Истина;
	Иначе
		Элементы.ДеревоПостоянныеРазницыДобавитьКопированиемПостоянныеРазницы.Доступность = Ложь;		
	КонецЕсли;	
	
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда				
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтрокиТекущий",ТекущиеДанные.НомерСтроки);	
		НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() И НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Ложь Тогда
			Элементы.ДеревоПостоянныеРазницыДобавитьРасшифровкуПоОбъектуПостоянныеРазницы.Доступность = Истина;
		Иначе
			Элементы.ДеревоПостоянныеРазницыДобавитьРасшифровкуПоОбъектуПостоянныеРазницы.Доступность = Ложь;			
		КонецЕсли;
		
		Элементы.РасшифровкаПостоянныеРазницыДобавитьПоОбъектуПостоянныеРазницы.Доступность = Истина;
		Элементы.РасшифровкаПостоянныеРазницыДобавитьКопированиемПоОбъектуПостоянныеРазницы.Доступность = Истина;
		Элементы.РасшифровкаПостоянныеРазницыУдалитьПоОбъектуПостоянныеРазницы.Доступность = Истина;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтрокиТекущий",ТекущиеДанные.НомерСтроки);	
		Отбор.Вставить("ДобавленоВручную", Истина);	
		
		НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			Элементы.ДеревоПостоянныеРазницыУдалитьРасшифровкиКорректировки.Доступность = Истина;
		Иначе
			Элементы.ДеревоПостоянныеРазницыУдалитьРасшифровкиКорректировки.Доступность = Ложь;				
		КонецЕсли;		
		
	Иначе
    	Элементы.ДеревоПостоянныеРазницыДобавитьРасшифровкуПоОбъектуПостоянныеРазницы.Доступность = Ложь;
		Элементы.ДеревоПостоянныеРазницыУдалитьРасшифровкиКорректировки.Доступность = Ложь;				
		
		Элементы.РасшифровкаПостоянныеРазницыДобавитьПоОбъектуПостоянныеРазницы.Доступность = Ложь;
		Элементы.РасшифровкаПостоянныеРазницыДобавитьКопированиемПоОбъектуПостоянныеРазницы.Доступность = Ложь;
		Элементы.РасшифровкаПостоянныеРазницыУдалитьПоОбъектуПостоянныеРазницы.Доступность = Ложь;
		
	КонецЕсли;
	
	Элементы.ДеревоПостоянныеРазницыУдалитьТекущийЭлементПостоянныеРазницы.Доступность = Ложь;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) 
		ИЛИ ТекущиеДанные <> Неопределено И ТекущиеДанные.ВидДобавленВручную И ЗначениеЗаполнено(ТекущиеДанные.ВидАктивовОбязательств) И НЕ ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда
		Элементы.ДеревоПостоянныеРазницыУдалитьТекущийЭлементПостоянныеРазницы.Доступность = Истина;
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПостоянныеРазницыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные 	= Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	ВидАО			= ТекущиеДанные.ВидАктивовОбязательств;
	НомерСтроки		= ТекущиеДанные.НомерСтроки;
	
	Структура = Новый Структура;
    Структура.Вставить("ВидАктивовОбязательств", 	ТекущиеДанные.ВидАктивовОбязательств);
    Структура.Вставить("ИсточникДанных",			ТекущиеДанные.ИсточникДанных);
    Структура.Вставить("ИсточникДанныхДляВычета",	ТекущиеДанные.ИсточникДанныхДляВычета);
    Структура.Вставить("СуммаКорректировки",		ТекущиеДанные.СуммаКорректировки);
    Структура.Вставить("НомерСтрокиТекущий",		ТекущиеДанные.НомерСтроки);
	
	ОбновитьСтрокуКорректировкиПриРедактированииДереваПР(Структура);
	
	
	СформироватьДеревоЗначенийПостоянныеРазницы();		
	СпозиционироватьсяНаВложеннойСтрокеТЧПР("НомерСтроки", НомерСтроки);
	
	
	
КонецПроцедуры

Процедура ОбновитьСтрокуКорректировкиПриРедактированииДереваПР(ТекущиеДанные)
		
	НайденныеСтроки  = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Новый Структура("НомерСтрокиТекущий",ТекущиеДанные.НомерСтрокиТекущий));
	Если НайденныеСтроки.Количество() = 1 Тогда
    	НайденныеСтроки[0].СуммаКорректировки 			= ТекущиеДанные.СуммаКорректировки;
	КонецЕсли;
	Для Каждого Строка Из НайденныеСтроки Цикл
	   	Строка.ИсточникДанных 				= ТекущиеДанные.ИсточникДанных;	
  	 	Строка.ИсточникДанныхДляВычета 		= ТекущиеДанные.ИсточникДанныхДляВычета;
	КонецЦикла;
		
КонецПроцедуры



// ВСПОМОГАТЕЛЬНЫЕ
&НаСервере
Функция ПолучитьМаксимальныйНомерСтроки(ИмяТЧ)
	
	МаксНомер = 1;
	Для Каждого СтрокаТЗ Из Объект[ИмяТЧ] Цикл
		МаксНомер = ?(МаксНомер < СтрокаТЗ.НомерСтрокиТекущий, СтрокаТЗ.НомерСтрокиТекущий, МаксНомер);
	КонецЦикла;
	
	МаксНомер = МаксНомер + 1;
	
	Возврат МаксНомер;
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокуТЧКорректировки(Номер)
	
	Строки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиТекущий",Номер));
	Если Строки.Количество() Тогда
		Объект.РасшифровкаКорректировкаПоБалансу.Удалить(Строки[0]);
	КонецЕсли;
	
	Строки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиПарнойКорректировки",Номер));
	Если Строки.Количество() Тогда
		Объект.РасшифровкаКорректировкаПоБалансу.Удалить(Строки[0]);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуТЧКорректировки(Номер, ВидАО)
	
	
	СтрокиИсходные 		= Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиТекущий",Номер));	
	СтрокиКорректровки 	= Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиТекущий",СтрокиИсходные[0].НомерСтрокиПарнойКорректировки));
	
	Если СтрокиИсходные[0].ДобавленоВручнуюПоОбъекту = Ложь Тогда
		СтрокаКорректровки = СтрокиКорректровки[0];
		СтрокаКорректровки.Скрывать 				= Ложь;
		СтрокаКорректровки.ВидАктивовОбязательств 	= ВидАО;
		СтрокаКорректровки.СуммаКорректировки 		= -1 * СтрокиИсходные[0].СуммаКорректировки;
		Если НЕ ЗначениеЗаполнено(СтрокаКорректровки.ИсточникДанных) Тогда
			СтрокаКорректровки.ИсточникДанных 		= СтрокиИсходные[0].ИсточникДанных;
		КонецЕсли;
		
	Иначе
		
		Для Каждого Стр Из СтрокиИсходные Цикл
			Отбор = Новый Структура;	
			Отбор.Вставить("НомерСтрокиТекущий", Стр.НомерСтрокиПарнойКорректировки);
			Отбор.Вставить("ИДСтроки", Стр.ИДСтроки);
			СтрокиКорректровки 	= Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
			СтрокаКорректровки = СтрокиКорректровки[0];
			
			СтрокаКорректровки.Скрывать 				= Ложь;
			СтрокаКорректровки.ВидАктивовОбязательств 	= ВидАО;
			СтрокаКорректровки.СуммаКорректировки 		= -1 * Стр.СуммаКорректировки;
			СтрокаКорректровки.ИсточникДанных 		= Стр.ИсточникДанных;
			СтрокаКорректровки.Объект 				= Стр.Объект;
			
		КонецЦикла;
		
		
	КонецЕсли;
	

	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммуКорректировки(Номер)
	
	СтрокиИсходные 		= Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиТекущий",Номер));	
	СтрокиКорректровки 	= Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиТекущий",СтрокиИсходные[0].НомерСтрокиПарнойКорректировки));
	
	СтрокаКорректровки = СтрокиКорректровки[0];
	СтрокаКорректровки.СуммаКорректировки 		= -1 * СтрокиИсходные[0].СуммаКорректировки;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСтрокуКорректировкиПриРедактированииДерева(ТекущиеДанные)
	
	НайденныеСтроки  = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиТекущий",ТекущиеДанные.НомерСтрокиТекущий));
	Если НайденныеСтроки.Количество() = 1 Тогда
    	НайденныеСтроки[0].СуммаКорректировки 			= ТекущиеДанные.СуммаКорректировки;
	КонецЕсли;
	Для Каждого Строка Из НайденныеСтроки Цикл
	   	Строка.ИсточникДанных 				= ТекущиеДанные.ИсточникДанных;	
	КонецЦикла;
	
	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиПарнойКорректировки",ТекущиеДанные.НомерСтрокиТекущий));
	Если НайденныеСтроки.Количество() = 1 Тогда
    	НайденныеСтроки[0].СуммаКорректировки 			= -1 * ТекущиеДанные.СуммаКорректировки;
	КонецЕсли;
	Для Каждого Строка Из НайденныеСтроки Цикл
	   	Строка.ИсточникДанных 				= ТекущиеДанные.ИсточникДанных;	
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура  СпозиционироватьсяНаСтрокеТЧ(ИмяРеквизита,ЗначениеРеквизита)
	
	Для Каждого СтрокаДерева Из ДеревоКорректировкаПоБалансу.ПолучитьЭлементы() Цикл		
		Если СтрокаДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда
			Элементы.ДеревоКорректировкаПоБалансу.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();		
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура  СпозиционироватьсяНаВложеннойСтрокеТЧ(ИмяРеквизита,ЗначениеРеквизита)
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоКорректировкаПоБалансу.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева  Из СтрокаВерхнегоУровня.ПолучитьЭлементы() Цикл		
			Если СтрокаДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда
				Элементы.ДеревоКорректировкаПоБалансу.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор());
				Элементы.ДеревоКорректировкаПоБалансу.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();		
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаВложеннойСтрокеТЧПоОтбору(Вид, Источник, АктивныйЭлемент = Неопределено)
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоКорректировкаПоБалансу.ПолучитьЭлементы() Цикл
		Если СтрокаВерхнегоУровня.ВидАктивовОбязательств = Вид Тогда
			Для Каждого СтрокаДерева  Из СтрокаВерхнегоУровня.ПолучитьЭлементы() Цикл		
				Если СтрокаДерева.ИсточникДанных = Источник Тогда
					Элементы.ДеревоКорректировкаПоБалансу.ВыделенныеСтроки.Очистить();
					Элементы.ДеревоКорректировкаПоБалансу.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор());
					Элементы.ДеревоКорректировкаПоБалансу.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					Если АктивныйЭлемент = Неопределено Тогда
						Элементы.ДеревоКорректировкаПоБалансу.ТекущийЭлемент = Элементы.ДеревоКорректировкаПоБалансу.ПодчиненныеЭлементы.ДеревоКорректировкаПоБалансуСуммаКорректировки;
						//Элементы.ДеревоКорректировкаПоБалансу.ИзменитьСтроку();
					Иначе
						Элементы.ДеревоКорректировкаПоБалансу.ТекущийЭлемент = Элементы.ДеревоКорректировкаПоБалансу.ПодчиненныеЭлементы[АктивныйЭлемент];
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура  СпозиционироватьсяНаВложеннойСтрокеТЧПР(ИмяРеквизита,ЗначениеРеквизита)
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоПостоянныеРазницы.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева  Из СтрокаВерхнегоУровня.ПолучитьЭлементы() Цикл		
			Если СтрокаДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда				
				Элементы.ДеревоПостоянныеРазницы.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор());
				Элементы.ДеревоПостоянныеРазницы.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();		
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры


&НаКлиенте
Процедура СпозиционироватьсяНаВложеннойСтрокеТЧПРПоОтбору(Вид, Источник)
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоПостоянныеРазницы.ПолучитьЭлементы() Цикл
		Если СтрокаВерхнегоУровня.ВидАктивовОбязательств = Вид Тогда
			Для Каждого СтрокаДерева  Из СтрокаВерхнегоУровня.ПолучитьЭлементы() Цикл		
				Если СтрокаДерева.ИсточникДанных = Источник Тогда
					Элементы.ДеревоПостоянныеРазницы.ВыделенныеСтроки.Очистить();
					Элементы.ДеревоПостоянныеРазницы.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор());
					Элементы.ДеревоПостоянныеРазницы.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;		
	
КонецПроцедуры


&НаСервере
Функция ДобавлятьЗеркальнуюСтрокуКорректировки(Номер)
	
	СтрокиКорректровки 	= Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиПарнойКорректировки",Номер));
	
	Возврат СтрокиКорректровки[0].Скрывать;
		
КонецФункции


// ИНТЕРФЕЙС - ОБРАБОТЧИКИ КНОПОК
&НаКлиенте
Процедура ЗаполнитьПоОрганизацииКорректировки(Команда)

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	Если Объект.РасшифровкаКорректировкаПоБалансу.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Корректировки по балансу» будет очищена. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 1);
	СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.БалансовыеКорректировки"));
	
	ОбновитьДанныеДляРасчетовОНКорректировкиПоБалансу(СтруктураДанных);
	
	СформироватьДеревоЗначенийКорректировкаПоБалансу();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляРасчетовОНКорректировкиПоБалансу(СтруктураДанных)
	
	Если Объект.Проведен Тогда
		ТекстСообщения = Нстр("ru = 'Нельзя обновить данные для проведённого документа. Отмените проведение.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
		
	ТекстСостояния = "Выполняется заполнение";
	бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ЗаполнитьТЧРасшифровкаКорректировкаПоБалансу(СтруктураДанных);	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ОбновитьДанныеДляРасчетовОНКорректировкиПоБалансу()


&НаСервере
Процедура ОбновитьДанныеДляРасчетовОНПостоянныеРазницы(СтруктураДанных)
	
	Если Объект.Проведен Тогда
		ТекстСообщения = Нстр("ru = 'Нельзя обновить данные для проведённого документа. Отмените проведение.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
		
	ТекстСостояния = "Выполняется заполнение";
	бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ЗаполнитьТЧРасшифровкаПостоянныеРазницы(СтруктураДанных);	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ОбновитьДанныеДляРасчетовОНКорректировкиПоБалансу()


&НаКлиенте
Процедура ОбновитьКорректировки(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	Если Объект.РасшифровкаКорректировкаПоБалансу.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Корректировки по балансу» будет перезаполнена с очисткой всех строк, кроме введенных вручную. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 2);
	СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.БалансовыеКорректировки"));
	
	ОбновитьДанныеДляРасчетовОНКорректировкиПоБалансу(СтруктураДанных);
	
	СформироватьДеревоЗначенийКорректировкаПоБалансу();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКорректировкиПоВидуАО(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	
	Если Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = Нстр("ru = 'Выберите строку с видом А/О'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	
	Если Объект.РасшифровкаКорректировкаПоБалансу.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Корректировки по балансу» будет перезаполнена с очисткой всех строк по виду АО, кроме введенных вручную. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 3);
	СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.БалансовыеКорректировки"));
	СтруктураДанных.Вставить("ВидАктивовОбязательств", Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные.ВидАктивовОбязательств);
	
	ОбновитьДанныеДляРасчетовОНКорректировкиПоБалансу(СтруктураДанных);
	
	СформироватьДеревоЗначенийКорректировкаПоБалансу();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКорректировкиПоИсточнику(Команда)

	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	
	Если Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные = Неопределено  Тогда
		
		ТекстСообщения = Нстр("ru = 'Выберите строку с источником данных!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	
	Если Объект.РасшифровкаКорректировкаПоБалансу.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Корректировки по балансу» будет перезаполнена с очисткой всех строк по источнику, кроме введенных вручную. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 4);
	СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.БалансовыеКорректировки"));
	СтруктураДанных.Вставить("ИсточникДанных", Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные.ИсточникДанных);
	
	ОбновитьДанныеДляРасчетовОНКорректировкиПоБалансу(СтруктураДанных);
	
	СформироватьДеревоЗначенийКорректировкаПоБалансу();	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьВидАОКорректировки(Команда)
	
	ВидАО = ПредопределенноеЗначение("Справочник.бит_му_ВидыАктивовОбязательств.ПустаяСсылка");
	ВвестиЗначение(ВидАО, "Выберите вид добавляемого А/О");
	
	Если ЗначениеЗаполнено(ВидАО) Тогда
		Отбор = Новый Структура("ВидАктивовОбязательств",ВидАО);	
		
		НайденВид = Ложь;
		Для Каждого СтрокаДерева Из ДеревоКорректировкаПоБалансу.ПолучитьЭлементы() Цикл
			
			Если СтрокаДерева.ВидАктивовОбязательств = ВидАО Тогда
				НайденВид = Истина;
				Если Вопрос("По данному виду А/О уже есть корректировки. Перейти к данному виду активов/ обязательств?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					Элементы.ДеревоКорректировкаПоБалансу.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();		
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не НайденВид Тогда
			Строка = Объект.РасшифровкаКорректировкаПоБалансу.Добавить();
			Строка.ВидАктивовОбязательств 	= ВидАО;
			Строка.ВидДобавленВручную 		= Истина;
			СформироватьДеревоЗначенийКорректировкаПоБалансу();				
		КонецЕсли;
		
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБезРасшифрокиКорректировки(Команда)
	
	ТекущиеДанные = Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда	
		ВидАктивовОбязательств = ТекущиеДанные.ВидАктивовОбязательств;
		ИсточникДанных = ТекущиеДанные.ИсточникДанных;
		НомерСтроки = ДобавитьБезРасшифрокиКорректировкиСервер(ТекущиеДанные.ВидАктивовОбязательств);
		СформироватьДеревоЗначенийКорректировкаПоБалансу();
		СпозиционироватьсяНаВложеннойСтрокеТЧПоОтбору(ВидАктивовОбязательств, ИсточникДанных, "ДеревоКорректировкаПоБалансуИсточникДанных");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ДобавитьБезРасшифрокиКорректировкиСервер(ВидАктивовОбязательств)
		
	Отбор = Новый Структура;
	Отбор.Вставить("ВидАктивовОбязательств",ВидАктивовОбязательств);
	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 1 И НайденныеСтроки[0].ВидДобавленВручную = Истина И НЕ ЗначениеЗаполнено(НайденныеСтроки[0].ИсточникДанных) Тогда
		Строка = НайденныеСтроки[0];
	Иначе
		Строка = Объект.РасшифровкаКорректировкаПоБалансу.Добавить();
		Строка.ВидАктивовОбязательств = ВидАктивовОбязательств;
	КонецЕсли;
	
	Строка.ДобавленоВручную 	= Истина;
	Строка.НомерСтрокиТекущий   = ПолучитьМаксимальныйНомерСтроки("РасшифровкаКорректировкаПоБалансу");
	
	// Формируем зеркальную корректировку и скрываем до определения вида А/О	
	СтрокаКорректировки = Объект.РасшифровкаКорректировкаПоБалансу.Добавить();
	СтрокаКорректировки.Скрывать 						= Истина;
	СтрокаКорректировки.ЗеркальнаяКорректировка 		= Истина;
	СтрокаКорректировки.ДобавленоВручную 				= Истина;
	СтрокаКорректировки.НомерСтрокиТекущий 				= Строка.НомерСтрокиТекущий + 1;
	СтрокаКорректировки.НомерСтрокиПарнойКорректировки 	= Строка.НомерСтрокиТекущий;	
	
	Строка.НомерСтрокиПарнойКорректировки   = СтрокаКорректировки.НомерСтрокиТекущий;
	
	
	Возврат Строка.НомерСтрокиТекущий;
	
КонецФункции

&НаКлиенте
Процедура ДеревоКорректировкаПоБалансуПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	
	ТекущиеДанные 	= Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	ВидАО			= ТекущиеДанные.ВидАктивовОбязательств;
	НомерСтроки		= ТекущиеДанные.НомерСтроки;
	
	Структура = Новый Структура;
    Структура.Вставить("ВидАктивовОбязательств", 	ТекущиеДанные.ВидАктивовОбязательств);
    Структура.Вставить("ИсточникДанных",			ТекущиеДанные.ИсточникДанных);
    Структура.Вставить("СуммаКорректировки",		ТекущиеДанные.СуммаКорректировки);
    Структура.Вставить("НомерСтрокиТекущий",		ТекущиеДанные.НомерСтроки);
	
	ОбновитьСтрокуКорректировкиПриРедактированииДерева(Структура);
	
	Если ТекущиеДанные.ЗеркальнаяКорректировка = Ложь И ДобавлятьЗеркальнуюСтрокуКорректировки(ТекущиеДанные.НомерСтроки) Тогда
		
		ВидАОРекласса = ПредопределенноеЗначение("Справочник.бит_му_ВидыАктивовОбязательств.ПустаяСсылка");
		ВвестиЗначение(ВидАОРекласса, "Укажите вид А/О для рекласса");
		
		Если НЕ ЗначениеЗаполнено(ВидАОРекласса) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указан вид А/О для рекласса, строка будет удалена";
			Сообщение.Сообщить();
			
			УдалитьСтрокуТЧКорректировки(ТекущиеДанные.НомерСтроки);
			СформироватьДеревоЗначенийКорректировкаПоБалансу();		
			СпозиционироватьсяНаСтрокеТЧ("ВидАктивовОбязательств", ВидАО);
			Возврат;
		КонецЕсли;
		
		
		ОбновитьСтрокуТЧКорректировки(НомерСтроки, ВидАОРекласса);
	КонецЕсли;
	
	СформироватьДеревоЗначенийКорректировкаПоБалансу();		
	НомерСтрокиДляПозиционированияКорректировка = НомерСтроки;
	СпозиционироватьсяНаВложеннойСтрокеТЧПоОтбору(Структура.ВидАктивовОбязательств, Структура.ИсточникДанных);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКопированиемКорректировки(Команда)

	ТекущиеДанные = Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда	
		ВидАОРекласса = ПредопределенноеЗначение("Справочник.бит_му_ВидыАктивовОбязательств.ПустаяСсылка");
		ВвестиЗначение(ВидАОРекласса, "Укажите вид А/О для рекласса");		
		Если ЗначениеЗаполнено(ВидАОРекласса) Тогда	
			
			Структура = Новый Структура;
			Структура.Вставить("ВидАктивовОбязательств", 	ТекущиеДанные.ВидАктивовОбязательств);
			Структура.Вставить("ВидАктивовОбязательствДляРекласса", ВидАОРекласса);
			Структура.Вставить("ИсточникДанных",			ТекущиеДанные.ИсточникДанных);
			Структура.Вставить("СуммаКорректировки",		ТекущиеДанные.СуммаКорректировки);
			Структура.Вставить("НомерСтрокиТекущий",		ТекущиеДанные.НомерСтроки);
			
			НомерСтроки = ДобавитьКопированиемКорректировкиСервер(Структура);
			СформироватьДеревоЗначенийКорректировкаПоБалансу();
			СпозиционироватьсяНаВложеннойСтрокеТЧ("НомерСтроки", НомерСтроки);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция  ДобавитьКопированиемКорректировкиСервер(СтруктураДанных)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидАктивовОбязательств", 	СтруктураДанных.ВидАктивовОбязательств);
	Отбор.Вставить("ИсточникДанных",			СтруктураДанных.ИсточникДанных);
	Отбор.Вставить("НомерСтрокиТекущий",		СтруктураДанных.НомерСтрокиТекущий);
	
	СтрокиСРасшифровкой = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	
	Для Каждого Стр Из СтрокиСРасшифровкой Цикл
		
		НомерСтрокиТекущий = ПолучитьМаксимальныйНомерСтроки("РасшифровкаКорректировкаПоБалансу");
				
		Строка = Объект.РасшифровкаКорректировкаПоБалансу.Добавить();
		ЗаполнитьЗначенияСвойств(Строка,Стр);
		Строка.ДобавленоВручную 	= Истина;
		Строка.НомерСтрокиТекущий   = НомерСтрокиТекущий;
		Строка.ИсточникДанных		= "";
		
		// Формируем зеркальную корректировку и скрываем до определения вида А/О	
		СтрокаКорректировки = Объект.РасшифровкаКорректировкаПоБалансу.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорректировки,Стр);		
		СтрокаКорректировки.ВидАктивовОбязательств = СтруктураДанных.ВидАктивовОбязательствДляРекласса;	
		СтрокаКорректировки.ДобавленоВручную 	= Истина;
		СтрокаКорректировки.ЗеркальнаяКорректировка 	= Истина;
		СтрокаКорректировки.ИсточникДанных		= "";
		СтрокаКорректировки.СуммаКорректировки	= -1 * Стр.СуммаКорректировки;
		
		СтрокаКорректировки.НомерСтрокиТекущий 				= НомерСтрокиТекущий+ 1;
		СтрокаКорректировки.НомерСтрокиПарнойКорректировки 	= НомерСтрокиТекущий;	
		
		Строка.НомерСтрокиПарнойКорректировки   = НомерСтрокиТекущий+ 1;
		
		Если Стр.ДобавленоВручнуюПоОбъекту Тогда
			УИД = Новый УникальныйИдентификатор;
			Строка.ИДСтроки 				= УИД;		
			СтрокаКорректировки.ИДСтроки 	= УИД;		
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	
	Возврат НомерСтрокиТекущий;
	
КонецФункции


&НаКлиенте
Процедура УдалитьТекущийЭлементКорректировки(Команда)
	
	ТекущиеДанные = Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда
		
		Если Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УдалитьТекущийЭлементКорректировкиНаСервере(ТекущиеДанные.НомерСтроки);
			СформироватьДеревоЗначенийКорректировкаПоБалансу();
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ВидДобавленВручную И ЗначениеЗаполнено(ТекущиеДанные.ВидАктивовОбязательств) И НЕ ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда
		
		Если Вопрос("Удалить вид А/О?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УдалитьТекущийЭлементАОКорректировкиНаСервере(ТекущиеДанные.ВидАктивовОбязательств);
			СформироватьДеревоЗначенийКорректировкаПоБалансу();
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТекущийЭлементКорректировкиНаСервере(НомерСтроки)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	Для Каждого Стр Из НайденныеСтроки Цикл
		Объект.РасшифровкаКорректировкаПоБалансу.Удалить(Стр);	
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиПарнойКорректировки",НомерСтроки);	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	Для Каждого Стр Из НайденныеСтроки Цикл
		Объект.РасшифровкаКорректировкаПоБалансу.Удалить(Стр);	
	КонецЦикла;
		
	ЭтаФорма.Модифицированность = Истина;		
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТекущийЭлементАОКорректировкиНаСервере(ВидАО)
	
	МассивНомеровУдаленныхСтрок = Новый Массив;
	Отбор = Новый Структура;
	Отбор.Вставить("ВидАктивовОбязательств",ВидАО);
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	Для Каждого Стр Из НайденныеСтроки Цикл
		МассивНомеровУдаленныхСтрок.Добавить(Стр.НомерСтрокиПарнойКорректировки);
		Объект.РасшифровкаКорректировкаПоБалансу.Удалить(Стр);	
	КонецЦикла;
	
	
	Для Каждого Элемент Из МассивНомеровУдаленныхСтрок Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтрокиТекущий", Элемент);	
		НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
		Для Каждого Стр Из НайденныеСтроки Цикл
			Объект.РасшифровкаКорректировкаПоБалансу.Удалить(Стр);	
		КонецЦикла;
	КонецЦикла;
	
	
	ЭтаФорма.Модифицированность = Истина;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасшифровкуПоОбъектуКорректировка(Команда)
	ТекущиеДанные = Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	НомерСтроки = ТекущиеДанные.НомерСтроки;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И  НЕ ТекущиеДанные.ЗеркальнаяКорректировка И ЗначениеЗаполнено(НомерСтроки) Тогда	
		
		ДобавитьРасшифровкуПоОбъектуКорректировкаНаСервере(НомерСтроки);
		СформироватьДеревоЗначенийКорректировкаПоБалансу();
		СпозиционироватьсяНаВложеннойСтрокеТЧ("НомерСтроки", НомерСтроки);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьРасшифровкуПоОбъектуКорректировкаНаСервере(НомерСтроки)
	
	УИД = Новый УникальныйИдентификатор;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиПарнойКорректировки",НомерСтроки);	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Истина;
	НайденныеСтроки[0].ИДСтроки = УИД;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Истина;
 	НайденныеСтроки[0].ИДСтроки = УИД;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоОбъектуКорректировки(Команда)
	ТекущиеДанные = Элементы.РасшифровкаКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручнуюПоОбъекту И НЕ ТекущиеДанные.ЗеркальнаяКорректировка И ЗначениеЗаполнено(ТекущиеДанные.НомерСтрокиТекущий) Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтрокиТекущий;
		ДобавитьСтрокуРасшифровкиПоОбъектуКорректировкаНаСервере(НомерСтроки,Истина);
		СформироватьДеревоЗначенийКорректировкаПоБалансу();
		СпозиционироватьсяНаВложеннойСтрокеТЧ("НомерСтроки", НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКопированиемПоОбъектуКорректировки(Команда)
	ТекущиеДанные = Элементы.РасшифровкаКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручнуюПоОбъекту И НЕ ТекущиеДанные.ЗеркальнаяКорректировка И ЗначениеЗаполнено(ТекущиеДанные.НомерСтрокиТекущий) Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтрокиТекущий;
		ДобавитьСтрокуРасшифровкиПоОбъектуКорректировкаНаСервере(НомерСтроки,Ложь);
		СформироватьДеревоЗначенийКорректировкаПоБалансу();
		СпозиционироватьсяНаВложеннойСтрокеТЧ("НомерСтроки", НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуРасшифровкиПоОбъектуКорректировкаНаСервере(НомерСтроки, НовыйОбъект)
	
	УИД = Новый УникальныйИдентификатор;
		
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	
	ДобавленнаяСтрока = Объект.РасшифровкаКорректировкаПоБалансу.Добавить();
	ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,НайденныеСтроки[0]);
	ДобавленнаяСтрока.ИДСтроки = УИД;
	ДобавленнаяСтрока.ДобавленоВручную = Истина;
	
	Если НовыйОбъект Тогда
		ДобавленнаяСтрока.Объект = Неопределено;
		ДобавленнаяСтрока.СуммаКорректировки = 0;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиПарнойКорректировки",НомерСтроки);	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);	
		
	СтрокаКорректировки = Объект.РасшифровкаКорректировкаПоБалансу.Добавить();	
	ЗаполнитьЗначенияСвойств(СтрокаКорректировки,НайденныеСтроки[0]);
	СтрокаКорректировки.ИДСтроки = УИД;
	СтрокаКорректировки.ДобавленоВручную = Истина;	
	СтрокаКорректировки.СуммаКорректировки = -1 * ДобавленнаяСтрока.СуммаКорректировки;
	СтрокаКорректировки.Объект =  ДобавленнаяСтрока.Объект;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоОбъектуКорректировки(Команда)
	
	ТекущиеДанные = Элементы.РасшифровкаКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручнуюПоОбъекту И НЕ ТекущиеДанные.ЗеркальнаяКорректировка И ЗначениеЗаполнено(ТекущиеДанные.НомерСтрокиТекущий) И ТекущиеДанные.ЗеркальнаяКорректировка = Ложь Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтрокиТекущий;
		УдалитьСтрокуРасшифровкиПоОбъектуКорректировкаНаСервере(НомерСтроки, ТекущиеДанные.ИДСтроки );
		СформироватьДеревоЗначенийКорректировкаПоБалансу();
		СпозиционироватьсяНаВложеннойСтрокеТЧ("НомерСтроки", НомерСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуРасшифровкиПоОбъектуКорректировкаНаСервере(НомерСтроки, ИДСтроки)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);	
		
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		НайденныеСтроки[0].Объект = Неопределено;
		НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Ложь;
		
	Иначе
		
		Для Каждого Стр Из НайденныеСтроки Цикл			
			Если Стр.ИДСтроки = ИДСтроки Тогда
				Объект.РасшифровкаКорректировкаПоБалансу.Удалить(Стр);
			КонецЕсли;
		КонецЦикла;
				
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиПарнойКорректировки",НомерСтроки);	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		НайденныеСтроки[0].Объект = Неопределено;
		НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Ложь;
		
	Иначе
		
		Для Каждого Стр Из НайденныеСтроки Цикл			
			Если Стр.ИДСтроки = ИДСтроки Тогда
				Объект.РасшифровкаКорректировкаПоБалансу.Удалить(Стр);
			КонецЕсли;
		КонецЦикла;
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРасшифровкиКорректировки(Команда)

	ТекущиеДанные = Элементы.ДеревоКорректировкаПоБалансу.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ТекущиеДанные.ЗеркальнаяКорректировка = Ложь Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтроки;
		УдалитьРасшифровкиПоОбъектуКорректировкаНаСервере(НомерСтроки);
		СформироватьДеревоЗначенийКорректировкаПоБалансу();
		СпозиционироватьсяНаВложеннойСтрокеТЧ("НомерСтроки", НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРасшифровкиПоОбъектуКорректировкаНаСервере(НомерСтроки)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);	
	Отбор.Вставить("ДобавленоВручную", Истина);	
		
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		Для инд = 2 По НайденныеСтроки.Количество() Цикл
			Объект.РасшифровкаКорректировкаПоБалансу.Удалить(НайденныеСтроки[инд-1]);	
		КонецЦикла;
	КонецЕсли;
	
	Сумма = НайденныеСтроки[0].СуммаКорректировки;
	НайденныеСтроки[0].Объект 			= Неопределено;
	НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Ложь;
	НайденныеСтроки[0].ИДСтроки			= Неопределено;
	
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиПарнойКорректировки",НомерСтроки);
	Отбор.Вставить("ДобавленоВручную", Истина);	
	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 1 Тогда
		Для инд = 2 По НайденныеСтроки.Количество() Цикл
			Объект.РасшифровкаКорректировкаПоБалансу.Удалить(НайденныеСтроки[инд-1]);	
		КонецЦикла;
	КонецЕсли;
	НайденныеСтроки[0].СуммаКорректировки 	= -1 * Сумма;
	НайденныеСтроки[0].Объект 				= Неопределено;
	НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту 	= Ложь;
	НайденныеСтроки[0].ИДСтроки				= Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОрганизацииПостоянныеРазницы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	Если Объект.РасшифровкаПостоянныеРазницы.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Постоянные разницы» будет очищена. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 1);
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза"));
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.ПостоянныеРазницы"));
	СтруктураДанных.Вставить("ТипыНастройки", СписокТипов);
	
	ОбновитьДанныеДляРасчетовОНПостоянныеРазницы(СтруктураДанных);
	
	СформироватьДеревоЗначенийПостоянныеРазницы();	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПостоянныеРазницы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	Если Объект.РасшифровкаПостоянныеРазницы.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Постоянные разницы» будет перезаполнена с очисткой всех строк, кроме введенных вручную. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 2);
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза"));
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.ПостоянныеРазницы"));
	СтруктураДанных.Вставить("ТипыНастройки", СписокТипов);
	
	ОбновитьДанныеДляРасчетовОНПостоянныеРазницы(СтруктураДанных);
	
	СформироватьДеревоЗначенийПостоянныеРазницы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПостоянныеРазницыПоВидуАО(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	
	Если Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = Нстр("ru = 'Выберите строку с видом А/О'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	
	Если Объект.РасшифровкаПостоянныеРазницы.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Постоянные разницы» будет перезаполнена с очисткой всех строк по виду АО, кроме введенных вручную. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 3);
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза"));
	СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.ПостоянныеРазницы"));
	СтруктураДанных.Вставить("ТипыНастройки", СписокТипов);

	СтруктураДанных.Вставить("ВидАктивовОбязательств", Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные.ВидАктивовОбязательств);
	
	ОбновитьДанныеДляРасчетовОНПостоянныеРазницы(СтруктураДанных);
	
	СформироватьДеревоЗначенийПостоянныеРазницы();	


КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПостоянныеРазницыПоИсточнику(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	
	Если Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные = Неопределено  Тогда
		
		ТекстСообщения = Нстр("ru = 'Выберите строку с источником данных!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	
	Если Объект.РасшифровкаПостоянныеРазницы.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Постоянные разницы» будет перезаполнена с очисткой всех строк по виду АО, кроме введенных вручную. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 4);
	
	ИсточникДанных = Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные.ИсточникДанных;
	
	Если ИсточникДанных =  "Постоянные разницы по РСБУ" Тогда
		СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза"));	
		СтруктураДанных.Вставить("ВидЗаполнения", 4.1);
		СтруктураДанных.Вставить("ВидАктивовОбязательств", Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные.ВидАктивовОбязательств);	
	Иначе
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза"));
		СписокТипов.Добавить(ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.ПостоянныеРазницы"));
		СтруктураДанных.Вставить("ТипыНастройки", СписокТипов);	
		СтруктураДанных.Вставить("ИсточникДанных", Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные.ИсточникДанных);
		
	КонецЕсли;	
	
	ОбновитьДанныеДляРасчетовОНПостоянныеРазницы(СтруктураДанных);
	
	СформироватьДеревоЗначенийПостоянныеРазницы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВидАОПостоянныеРазницы(Команда)
	
	ВидАО = ПредопределенноеЗначение("Справочник.бит_му_ВидыАктивовОбязательств.ПустаяСсылка");
	ВвестиЗначение(ВидАО, "Выберите вид добавляемого А/О");
	
	Если ЗначениеЗаполнено(ВидАО) Тогда
		Отбор = Новый Структура("ВидАктивовОбязательств",ВидАО);	
		
		НайденВид = Ложь;
		Для Каждого СтрокаДерева Из ДеревоПостоянныеРазницы.ПолучитьЭлементы() Цикл
			
			Если СтрокаДерева.ВидАктивовОбязательств = ВидАО Тогда
				НайденВид = Истина;
				Если Вопрос("По данному виду А/О уже есть корректировки. Перейти к данному виду активов/ обязательств?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					Элементы.ДеревоПостоянныеРазницы.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();		
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не НайденВид Тогда
			Строка = Объект.РасшифровкаПостоянныеРазницы.Добавить();
			Строка.ВидАктивовОбязательств 	= ВидАО;
			Строка.ВидДобавленВручную 		= Истина;
			СформироватьДеревоЗначенийПостоянныеРазницы();				
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБезРасшифрокиПостоянныеРазницы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда	
		ВидАктивовОбязательств = ТекущиеДанные.ВидАктивовОбязательств;
		НомерСтроки = ДобавитьБезРасшифрокиПостоянныеРазницыСервер(ТекущиеДанные.ВидАктивовОбязательств);
		СформироватьДеревоЗначенийПостоянныеРазницы();
		СпозиционироватьсяНаВложеннойСтрокеТЧПРПоОтбору(ВидАктивовОбязательств, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ДобавитьБезРасшифрокиПостоянныеРазницыСервер(ВидАктивовОбязательств)
		
	Отбор = Новый Структура;
	Отбор.Вставить("ВидАктивовОбязательств",ВидАктивовОбязательств);
	
	НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 1 И НайденныеСтроки[0].ВидДобавленВручную = Истина Тогда
		Строка = НайденныеСтроки[0];
	Иначе
		Строка = Объект.РасшифровкаПостоянныеРазницы.Добавить();
		Строка.ВидАктивовОбязательств = ВидАктивовОбязательств;
	КонецЕсли;
	
	Строка.ДобавленоВручную 	= Истина;
	Строка.НомерСтрокиТекущий   = ПолучитьМаксимальныйНомерСтроки("РасшифровкаПостоянныеРазницы");
		
	Возврат Строка.НомерСтрокиТекущий;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКопированиемПостоянныеРазницы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда	

		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтрокиТекущий", ТекущиеДанные.НомерСтроки);
		
		НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
		НовыйНомер = ПолучитьМаксимальныйНомерСтроки("РасшифровкаПостоянныеРазницы");
		
		Для Каждого Стр Из НайденныеСтроки Цикл
			ДобавленнаяСтрока = Объект.РасшифровкаПостоянныеРазницы.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,Стр);
			ДобавленнаяСтрока.НомерСтрокиТекущий = НовыйНомер;
			ДобавленнаяСтрока.ИсточникДанных = "";
		КонецЦикла;	
		
		СформироватьДеревоЗначенийПостоянныеРазницы();
		СпозиционироватьсяНаВложеннойСтрокеТЧПР("НомерСтроки", НовыйНомер);
		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущийЭлементПостоянныеРазницы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда	
		Если Вопрос("Удалить запись?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УдалитьТекущийЭлементПостоянныеРазницыНаСервере(ТекущиеДанные.НомерСтроки);
			СформироватьДеревоЗначенийПостоянныеРазницы();
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьТекущийЭлементПостоянныеРазницыНаСервере(НомерСтроки)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);
	НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
	Для Каждого Стр Из НайденныеСтроки Цикл
		Объект.РасшифровкаПостоянныеРазницы.Удалить(Стр);	
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРасшифровкуПоОбъектуПостоянныеРазницы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную И ЗначениеЗаполнено(ТекущиеДанные.НомерСтроки) Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтроки;
		ДобавитьРасшифровкуПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки);
		СформироватьДеревоЗначенийПостоянныеРазницы();
		СпозиционироватьсяНаВложеннойСтрокеТЧПР("НомерСтроки", НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРасшифровкуПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки)
	
	УИД = Новый УникальныйИдентификатор;
		
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);	
	НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
	НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Истина;
 	НайденныеСтроки[0].ИДСтроки = УИД;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоОбъектуПостоянныеРазницы(Команда)
	ТекущиеДанные = Элементы.РасшифровкаПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручнуюПоОбъекту И ЗначениеЗаполнено(ТекущиеДанные.НомерСтрокиТекущий) Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтрокиТекущий;
		ДобавитьСтрокуРасшифровкиПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки,Истина);
		СформироватьДеревоЗначенийПостоянныеРазницы();
		СпозиционироватьсяНаВложеннойСтрокеТЧПР("НомерСтроки", НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКопированиемПоОбъектуПостоянныеРазницы(Команда)
	ТекущиеДанные = Элементы.РасшифровкаПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручнуюПоОбъекту И ЗначениеЗаполнено(ТекущиеДанные.НомерСтрокиТекущий) Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтрокиТекущий;
		ДобавитьСтрокуРасшифровкиПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки,Ложь);
		СформироватьДеревоЗначенийПостоянныеРазницы();
		СпозиционироватьсяНаВложеннойСтрокеТЧПР("НомерСтроки", НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоОбъектуПостоянныеРазницы(Команда)
	
	ТекущиеДанные = Элементы.РасшифровкаПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручнуюПоОбъекту И ЗначениеЗаполнено(ТекущиеДанные.НомерСтрокиТекущий)  Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтрокиТекущий;
		УдалитьСтрокуРасшифровкиПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки, ТекущиеДанные.ИДСтроки );
		СформироватьДеревоЗначенийПостоянныеРазницы();
		СпозиционироватьсяНаВложеннойСтрокеТЧПР("НомерСтроки", НомерСтроки);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуРасшифровкиПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки, ИДСтроки)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);	
		
	НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		НайденныеСтроки[0].Объект = Неопределено;
		НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Ложь;
		
	Иначе
		
		Для Каждого Стр Из НайденныеСтроки Цикл			
			Если Стр.ИДСтроки = ИДСтроки Тогда
				Объект.РасшифровкаПостоянныеРазницы.Удалить(Стр);
			КонецЕсли;
		КонецЦикла;
				
	КонецЕсли;
	
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуРасшифровкиПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки, НовыйОбъект)
	
	УИД = Новый УникальныйИдентификатор;
		
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);	
	НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
	
	ДобавленнаяСтрока = Объект.РасшифровкаПостоянныеРазницы.Добавить();
	ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,НайденныеСтроки[0]);
	ДобавленнаяСтрока.ИДСтроки = УИД;
	ДобавленнаяСтрока.ДобавленоВручную = Истина;
	
	Если НовыйОбъект Тогда
		ДобавленнаяСтрока.Объект = Неопределено;
		ДобавленнаяСтрока.СуммаКорректировки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПостоянныеРазницыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПостоянныеРазницы.ТекущиеДанные;
	НомерСтроки =  ТекущиеДанные.НомерСтрокиТекущий;
	Отбор = Новый Структура;
	Отбор.Вставить("ИДСтроки",ТекущиеДанные.ИДСтроки);	
	
	РасшифровкаПостоянныеРазницыПриИзмененииНаСервере(Отбор,ТекущиеДанные.СуммаКорректировки, ТекущиеДанные.Объект); 
	СформироватьДеревоЗначенийПостоянныеРазницы();
	СпозиционироватьсяНаВложеннойСтрокеТЧПР("НомерСтроки", НомерСтроки);	
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПостоянныеРазницыПриИзмененииНаСервере(Отбор, СуммаКорректировки, ОбъектСсылка)

	СтрокиЗеркальнойКорректировки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
	
	СтрокиЗеркальнойКорректировки[0].Объект = ОбъектСсылка;
	СтрокиЗеркальнойКорректировки[0].СуммаКорректировки = СуммаКорректировки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПостоянныеРазницыРСБУ(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	Если Объект.РасшифровкаПостоянныеРазницы.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Постоянные разницы» будет перезаполнена с очисткой всех строк  по РСБУ, кроме введенных вручную. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 5);
	СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза"));
	
	ОбновитьДанныеДляРасчетовОНПостоянныеРазницы(СтруктураДанных);
	
	СформироватьДеревоЗначенийПостоянныеРазницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПостоянныеРазницыМСФО(Команда)
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстСообщения = Нстр("ru = 'Укажите организацию.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;				
		
	КонецЕсли;
	
	Если Объект.РасшифровкаПостоянныеРазницы.Количество() > 0 Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Табличная часть «Постоянные разницы» будет перезаполнена с очисткой всех строк  по МСФО, кроме введенных вручную. Продолжить?'")
		,РежимДиалогаВопрос.ДаНет
		,30
		,КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	СтруктураДанных.Вставить("ВидЗаполнения", 6);
	СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.ПостоянныеРазницы"));
	
	ОбновитьДанныеДляРасчетовОНПостоянныеРазницы(СтруктураДанных);
	
	СформироватьДеревоЗначенийПостоянныеРазницы();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРасшифровкиПостоянныеРазницы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПостоянныеРазницы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДобавленоВручную Тогда	
		НомерСтроки = ТекущиеДанные.НомерСтроки;
		УдалитьРасшифровкиПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки);
		СформироватьДеревоЗначенийПостоянныеРазницы();
		СпозиционироватьсяНаВложеннойСтрокеТЧПР("НомерСтроки", НомерСтроки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьРасшифровкиПоОбъектуПостоянныеРазницыНаСервере(НомерСтроки)
	
	Отбор = Новый Структура;
	Отбор.Вставить("НомерСтрокиТекущий",НомерСтроки);	
	Отбор.Вставить("ДобавленоВручную", Истина);	
		
	НайденныеСтроки = Объект.РасшифровкаПостоянныеРазницы.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		Для инд = 2 По НайденныеСтроки.Количество() Цикл
			Объект.РасшифровкаПостоянныеРазницы.Удалить(НайденныеСтроки[инд-1]);	
		КонецЦикла;
	КонецЕсли;
	
	Сумма = НайденныеСтроки[0].СуммаКорректировки;
	НайденныеСтроки[0].Объект 			= Неопределено;
	НайденныеСтроки[0].ДобавленоВручнуюПоОбъекту = Ложь;
	НайденныеСтроки[0].ИДСтроки			= Неопределено;
	
КонецПроцедуры


// ИНТЕРФЕЙС - ОБРАБОТЧИКИ КНОПОК ОСНОВНОЙ ВКЛАДКИ
&НаКлиенте
Процедура Осн_ОбновитьБалансовыеКорректировки(Команда)
	
	Осн_ОбновитьБалансовыеКорректировкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Осн_ОбновитьБалансовыеКорректировкиНаСервере(ВидАктивовОбязательств = Неопределено)
	
	ОчиститьПоказатели("СуммаРекласс", ВидАктивовОбязательств);
	ОчиститьПоказатели("СуммаВР", ВидАктивовОбязательств);
	ДополнитьСтрокиДаннымиКорректировок(ВидАктивовОбязательств);	
	ПересчитатьДанныеНаОсновнойВкладке();
	
КонецПроцедуры

&НаСервере
Процедура Осн_ОбновитьБалансовыеКорректировкиНаСервереПоНомеруСтроки(ВидАО)
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(ВидАО);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидАктивовОбязательств", ВидАО);
	
	НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
	
	Для Каждого Стр Из НайденныеСтроки Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтрокиТекущий", Стр.НомерСтрокиПарнойКорректировки);
		НайденныеСтроки = Объект.РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда	
			МассивВидов.Добавить(НайденныеСтроки[0].ВидАктивовОбязательств);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивВидов);
	
	Для Каждого ВидАктивовОбязательств Из МассивВидов Цикл		
		ОчиститьПоказатели("СуммаРекласс", ВидАктивовОбязательств);
		ОчиститьПоказатели("СуммаВР", ВидАктивовОбязательств);
		ДополнитьСтрокиДаннымиКорректировок(ВидАктивовОбязательств);			
	КонецЦикла;
	
	
	ПересчитатьДанныеНаОсновнойВкладке();
	
	
КонецПроцедуры


 &НаСервере
Процедура ОчиститьПоказатели(Имя, ВидАО = Неопределено)
	
	Для Каждого Стр Из Объект.РасчетыОН Цикл
		Если ВидАО = Неопределено Тогда
			Стр[Имя] = 0;
		ИначеЕсли ВидАО = Стр.ВидАктивовОбязательств Тогда
			Стр[Имя] = 0;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Стр Из РасшифровкаРасчетов Цикл
		Если ВидАО = Неопределено Тогда
			Стр[Имя] = 0;
		ИначеЕсли ВидАО = Стр.ВидАктивовОбязательств Тогда
			Стр[Имя] = 0;
		КонецЕсли;	
	КонецЦикла;
	
	
КонецПроцедуры

// &НаСервере
//Процедура ОчиститьПоказателиПоИсточнику(Имя, ВидАО, Источник)
//	
//	КУдалению = 0;
//	
//	Для Каждого Стр Из РасшифровкаРасчетов Цикл
//		Если ВидАО = Стр.ВидАктивовОбязательств  И Стр.ИсточникДанных = Источник Тогда
//			КУдалению = КУдалению + Стр[Имя];
//			Стр[Имя] = 0;
//		КонецЕсли;	
//	КонецЦикла;
//	
//	Для Каждого Стр Из Объект.РасчетыОН Цикл
//		Если ВидАО = Стр.ВидАктивовОбязательств Тогда
//			Стр[Имя] = Стр[Имя]-КУдалению;
//		КонецЕсли;	
//	КонецЦикла;
//	
//	
//	
//КонецПроцедуры


&НаКлиенте
Процедура Осн_ОбновитьБалансовыеКорректировкиПоСтроке(Команда)
	
	Если Элементы.РасчетыОН.ТекущиеДанные <> Неопределено Тогда
		Осн_ОбновитьБалансовыеКорректировкиНаСервереПоНомеруСтроки(Элементы.РасчетыОН.ТекущиеДанные.ВидАктивовОбязательств);
	Иначе
		Предупреждение("Выберите строку с видом А/О");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Осн_ОбновитьПостоянныеРазницы(Команда)
	Осн_ОбновитьПостоянныеРазницыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Осн_ОбновитьПостоянныеРазницыПоСтроке(Команда)
	
	Если Элементы.РасчетыОН.ТекущиеДанные <> Неопределено Тогда
		Осн_ОбновитьПостоянныеРазницыНаСервере(Элементы.РасчетыОН.ТекущиеДанные.ВидАктивовОбязательств);
	Иначе
		Предупреждение("Выберите строку с видом А/О");
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура Осн_ОбновитьПостоянныеРазницыНаСервере(ВидАктивовОбязательств = Неопределено)
	
	ОчиститьПоказатели("СуммаПР", ВидАктивовОбязательств);
	ОчиститьПоказатели("СуммаВР", ВидАктивовОбязательств);
	ДополнитьСтрокиДаннымиПР(ВидАктивовОбязательств);	
	ПересчитатьДанныеНаОсновнойВкладке();
	
КонецПроцедуры

&НаКлиенте
Процедура Осн_ОбновитьВсеКорректировки(Команда)

	Осн_ОбновитьВсеКорректировкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Осн_ОбновитьВсеКорректировкиПоСтроке(Команда)

	Если Элементы.РасчетыОН.ТекущиеДанные <> Неопределено Тогда
		Осн_ОбновитьВсеКорректировкиНаСервере(Элементы.РасчетыОН.ТекущиеДанные.ВидАктивовОбязательств);
	Иначе
		Предупреждение("Выберите строку с видом А/О");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура Осн_ОбновитьВсеКорректировкиНаСервере(ВидАктивовОбязательств = Неопределено)
	
	ОчиститьПоказатели("СуммаРекласс", ВидАктивовОбязательств);
	ОчиститьПоказатели("СуммаПР", ВидАктивовОбязательств);
	ОчиститьПоказатели("СуммаВР", ВидАктивовОбязательств);
	ДополнитьСтрокиДаннымиПР(ВидАктивовОбязательств);		
	ДополнитьСтрокиДаннымиКорректировок(ВидАктивовОбязательств);	
	ПересчитатьДанныеНаОсновнойВкладке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНалоговуюБалансовуюБазу(Команда)
	битОбновитьДанныеДляРасчетовОН(Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура битОбновитьДанныеДляРасчетовОН(ТолькоПоОднойСтроке = Истина, СформироватьЗаного = Ложь, МассивВидов = Неопределено)
	
	Если Объект.Проведен Тогда
		ТекстСообщения = Нстр("ru = 'Нельзя обновить данные для проведённого документа. Отмените проведение.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	СтруктураДанных = ПолучитьСтруктуруДанных();
	Если МассивВидов <> Неопределено Тогда
		СтруктураДанных.Вставить("ВидыАктивовОбязательств", МассивВидов);	
	КонецЕсли;
	
	Если ТолькоПоОднойСтроке Тогда
		
		ОбновитьДанныеСтрокиДляРасчетовОН(СтруктураДанных,  Ложь);
		
	Иначе
		
		Если СформироватьЗаного Тогда
			ТекстСостояния = "Выполняется заполнение основной табличной части документа.";
		Иначе
			ТекстСостояния = "Выполняется обновление основной табличной части документа.";
		КонецЕсли;
		бит_ОбщегоНазначения.бит_Состояние(ТекстСостояния);
		
		ОбновитьДанныеТаблицыДляРасчетовОН(СтруктураДанных, СформироватьЗаного, Ложь);
		
	КонецЕсли; 
		
	УстановитьОтборДляТаблицыРасшифровки();
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ОбновитьДанныеДляРасчетовОН()

&НаКлиенте
Процедура ОбновитьНалоговуюБалансовуюБазуПоСтроке(Команда)
	битОбновитьДанныеДляРасчетовОН();	
КонецПроцедуры

//bit Amerkulov 26.11.2014 -- Расчет отложенных налогов	


// agoncharenko #1886 05102015 начало

&НаСервере
Процедура РассчитатьИтогиДеревьев()
	
	РассчитатьИтогДереваНаСервере("ДеревоКорректировкаПоБалансу", 			"СуммаКорректировки", 	"ИтогДеревоКорректировкаПоБалансу");
	РассчитатьИтогДереваНаСервере("ДеревоПостоянныеРазницы", 				"СуммаКорректировки", 	"ИтогДеревоПостоянныеРазницы");
	РассчитатьИтогДереваНаСервере("ДеревоНалоговаяБазаБалансоваяОценка", 	"СуммаНУ", 				"ИтогДеревоНалоговаяБазаБалансоваяОценкаНУ");
	РассчитатьИтогДереваНаСервере("ДеревоНалоговаяБазаБалансоваяОценка", 	"СуммаМУ", 				"ИтогДеревоНалоговаяБазаБалансоваяОценкаМУ");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогДереваНаСервере(ИмяДерева, ИмяКолонки, ИмяПоля)
	
	Дерево = РеквизитФормыВЗначение(ИмяДерева);
	
	ЭтаФорма[ИмяПоля] = СуммаСтрок(Дерево, ИмяКолонки);
	
КонецПроцедуры

&НаСервере
Функция СуммаСтрок(СтрокаДерева, Поле)
  Сумма = 0;
  Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
    Если ДочерняяСтрока.Строки.Количество()=0 Тогда
      Сумма = Сумма+ДочерняяСтрока[Поле];
    Иначе
      Сумма = Сумма+СуммаСтрок(ДочерняяСтрока, Поле);
    КонецЕсли;
  КонецЦикла;

  Возврат Сумма;
КонецФункции


&НаКлиенте
Процедура ДеревоНалоговаяБазаБалансоваяОценкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьИтогиДеревьев(); // agoncharenko #1886 05102015 начало
КонецПроцедуры
