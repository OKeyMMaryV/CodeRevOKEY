#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Справка - расчет отложенных налогов.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "СправкаРасчетОН";
	КомандаПечати.Представление				= НСтр("ru = 'Справка - расчет отложенных налогов'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок					= 10;	
	
	// Справка - расчет отложенных налогов с расшифровкой.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор					= "ПолнаяСправкаРасчетОН";
	КомандаПечати.Представление					= НСтр("ru = 'Справка - расчет отложенных налогов с расшифровкой'");
	КомандаПечати.Обработчик					= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью= Истина;
	КомандаПечати.Порядок						= 20;	
	
	//bit Avseenkov 09.12.2014 ++ Расчет отложенных налогов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор					= "бит_СверкаАО";
	КомандаПечати.Представление					= НСтр("ru = 'Сверка реклассификационных корректировок налоговых баз активов и обязательств'");
	КомандаПечати.Обработчик					= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью= Истина;
	КомандаПечати.Порядок						= 30;
	//bit Avseenkov 09.12.2014 - Расчет отложенных налогов
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетОН") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетОН",
			НСтр("ru = 'Справка-расчет в валюте регл. учета'"), 
			СформироватьПечатнуюФормуСправкаРасчетОН(МассивОбъектов),,
			"Документ.бит_му_РасчетОтложенныхНалогов.СправкаРасчетОН");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПолнаяСправкаРасчетОН") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПолнаяСправкаРасчетОН",
			НСтр("ru = 'Справка-расчет в валюте взаиморасчетов'"), 
			СформироватьПечатнуюФормуПолнойСправкиРасчетОН(МассивОбъектов),,
			"Документ.бит_му_РасчетОтложенныхНалогов.ПолнаяСправкаРасчетОН");
	КонецЕсли;
	
	//bit Avseenkov 09.12.2014 ++ Расчет отложенных налогов
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "бит_СверкаАО") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "бит_СверкаАО",
			НСтр("ru = 'Сверка реклассификационных корректировок налоговых баз активов и обязательств'"), 
			СформироватьПечатнуюФормубит_СверкаАО("бит_СверкаАО", МассивОбъектов),,
			"Документ.бит_му_РасчетОтложенныхНалогов.бит_СверкаАО");
	КонецЕсли;
	//}		
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует печатную форму заявки на оплату.
// 
// Параметры:
//  МассивСсылок - Массив.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуСправкаРасчетОН(МассивСсылок)

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_РасчетОтложенныхНалогов_СправкаРасчетОН";  	
	
	// Таблица по документам.
	ТаблицаДокументов = ПолучитьТаблицуДокументов(МассивСсылок);
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
			
		// Получаем макет и области.
		Макет = Документы.бит_му_РасчетОтложенныхНалогов.ПолучитьМакет("СправкаРасчетОН");
		ОбластьЗаголовок 	  = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка 		  = Макет.ПолучитьОбласть("Шапка");
		ОбластьРасчетыОНШапка = Макет.ПолучитьОбласть("РасчетыОНШапка");
		ОбластьРасчетыОН 	  = Макет.ПолучитьОбласть("РасчетыОН");
		ОбластьПодвал 		  = Макет.ПолучитьОбласть("Подвал");
	    ОбластьИтоги          = Макет.ПолучитьОбласть("Итоги");
		
		
		// Таблица по табличной части.
		ТаблицаРасчетовОН = ПолучитьТаблицуПоРасчетамОН(МассивСсылок);
		
		// Вывод результатов.
		ПервыйДокумент   = Истина;
				
		Для каждого СтрДокумент Из ТаблицаДокументов Цикл
					
			// Текущий документ.
			ТекДокумент = СтрДокумент.Ссылка;
			// Отбор для таблиц по текущему документу.
			Отбор = Новый Структура;
			Отбор.Вставить("Ссылка", ТекДокумент);
											
			// Разделитель страниц.
			Если Не ПервыйДокумент Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;

			// Заполним общие для документа параметры.
			ОбластьЗаголовок.Параметры.Заполнить(СтрДокумент);
			ОбластьЗаголовок.Параметры.Дата = Формат(СтрДокумент.Дата, "ДФ=dd.MM.yyyy");
			ОбластьШапка.Параметры.Заполнить(СтрДокумент);
			ОбластьПодвал.Параметры.Заполнить(СтрДокумент);
			
			// Выведем Заголовок и шапку.
			ТабДок.Вывести(ОбластьЗаголовок);
		    ТабДок.Вывести(ОбластьШапка);
		    ТабДок.Вывести(ОбластьРасчетыОНШапка);  	
			
			// Заполняем данные по табличной части и итогам для печатной формы.
			МассивСтрок = ТаблицаРасчетовОН.НайтиСтроки(Отбор);
			Для Каждого ТекСтрока Из МассивСтрок Цикл
				
				Если ТекСтрока.ЭтоИтоги Тогда
				    ОбластьИтоги.Параметры.Заполнить(ТекСтрока);
				Иначе
					ОбластьРасчетыОН.Параметры.Заполнить(ТекСтрока);
					// Выводим строки таблицы.
					ТабДок.Вывести(ОбластьРасчетыОН);
				КонецЕсли;
						
			КонецЦикла; 

			// Выводим итоги и подвал.
			ТабДок.Вывести(ОбластьИтоги);
			ТабДок.Вывести(ОбластьПодвал);
			
		КонецЦикла;
	
	КонецЕсли;

	ТабДок.АвтоМасштаб = Истина;
	
    Возврат ТабДок;
	
КонецФункции

// Функция формирует печатную форму заявки на оплату.
// 
// Параметры:
//  МассивСсылок - Массив.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуПолнойСправкиРасчетОН(МассивСсылок)

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_РасчетОтложенныхНалогов_ПолнаяСправкаРасчетОН";  	
	
	// Таблица по документам.
	ТаблицаДокументов = ПолучитьТаблицуДокументов(МассивСсылок);
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
			
		// Получаем макет и области.
		Макет = Документы.бит_му_РасчетОтложенныхНалогов.ПолучитьМакет("ПолнаяСправкаРасчетОН");
		ОбластьЗаголовок 	  = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка 		  = Макет.ПолучитьОбласть("Шапка");
		ОбластьРасчетыОНШапка = Макет.ПолучитьОбласть("РасчетыОНШапка");
		ОбластьРасчетыОН 	  = Макет.ПолучитьОбласть("РасчетыОН");
		//bit Avseenkov 09.12.2014 ++ Расчет отложенных налогов
		//ОбластьИсточник       = Макет.ПолучитьОбласть("Источник");
		//ОбластьРасшифровка    = Макет.ПолучитьОбласть("Расшифровка");
		//}	
		ОбластьПодвал 		  = Макет.ПолучитьОбласть("Подвал");
	    ОбластьИтоги          = Макет.ПолучитьОбласть("Итоги");
		//bit Avseenkov 09.12.2014 ++ Расчет отложенных налогов
		ОбластьОбъект 		  = Макет.ПолучитьОбласть("Объект");
		//}
		
		// Результат основного запроса.
		Результат = ПолучитьРезультатПолный(МассивСсылок);
		
		// Вывод результатов.
		ПервыйДокумент   = Истина;
		ВыборкаДокументы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаДокументы.Следующий() Цикл
			
			// Текущий документ.
			ТекДокумент = ВыборкаДокументы.Ссылка;
			// Отбор для таблиц по текущему документу.
			Отбор = Новый Структура;
			Отбор.Вставить("Ссылка", ТекДокумент);
									
			// Разделитель страниц.
			Если Не ПервыйДокумент Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;


			// Заполним общие для документа параметры.
			МассивСтрок = ТаблицаДокументов.НайтиСтроки(Отбор);
			Для каждого Стр Из МассивСтрок Цикл
				ОбластьЗаголовок.Параметры.Заполнить(Стр);
				ОбластьЗаголовок.Параметры.Дата = Формат(Стр.Дата, "ДФ=dd.MM.yyyy");
				ОбластьШапка.Параметры.Заполнить(Стр);
				ОбластьПодвал.Параметры.Заполнить(Стр);
			КонецЦикла;
			ОбластьИтоги.Параметры.Заполнить(ВыборкаДокументы);
			
			// Выведем Заголовок и шапку.
			ТабДок.Вывести(ОбластьЗаголовок);
		    ТабДок.Вывести(ОбластьШапка);
		    ТабДок.Вывести(ОбластьРасчетыОНШапка);  	
			
			ТабДок.НачатьАвтогруппировкуСтрок();
			
			// Заполняем данные по табличной части и итогам для печатной формы.
			ВыборкаВиды = ВыборкаДокументы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаВиды.Следующий() Цикл
				
				ОбластьРасчетыОН.Параметры.Заполнить(ВыборкаВиды);
				ТабДок.Вывести(ОбластьРасчетыОН, 0);
					
				ВыборкаИсточники = ВыборкаВиды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				Пока ВыборкаИсточники.Следующий() Цикл
					
					//bit Avseenkov 09.12.2014 ++ Расчет отложенных налогов
					
					//ОбластьИсточник.Параметры.Заполнить(ВыборкаИсточники);
					//ТабДок.Вывести(ОбластьИсточник, 1);
					ОбластьОбъект.Параметры.Заполнить(ВыборкаИсточники);
					ТабДок.Вывести(ОбластьОбъект, 1);
					//}
					
					//bit Avseenkov 09.12.2014 ++ Расчет отложенных налогов
					//ВыборкаРасш = ВыборкаИсточники.Выбрать();
					//Пока ВыборкаРасш.Следующий() Цикл

					//	ОбластьРасшифровка.Параметры.Заполнить(ВыборкаРасш);
					//	ТабДок.Вывести(ОбластьРасшифровка, 2);
					//							
					//КонецЦикла;
					//}

				КонецЦикла;
			
			КонецЦикла; 
			
			ТабДок.ЗакончитьАвтогруппировкуСтрок();
			ТабДок.ОтображатьГруппировки = Истина;
			ТабДок.ФиксацияСлева = 10;
			    						
			// ТабДок.ПоказатьУровеньГруппировокСтрок(1);
			
			// Выводим итоги и подвал.
			ТабДок.Вывести(ОбластьИтоги);
			ТабДок.Вывести(ОбластьПодвал);
			
		КонецЦикла;
					
	КонецЕсли; 
	
	ТабДок.АвтоМасштаб = Истина;  	
	
    Возврат ТабДок;
	
КонецФункции

// Функция получает результат основного запроса.
// 
// Параметры:
//  МассивСсылок - Массив.
//  
// Возвращаемое значение:
//   Результат запроса.
// 
Функция ПолучитьТаблицуДокументов(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
    |	ДокументыРасчетОН.Ссылка,
    |	ДокументыРасчетОН.ВалютаДокумента,
    |	ДокументыРасчетОН.Дата,
    |	ДокументыРасчетОН.Организация,
    |	ДокументыРасчетОН.Ответственный,
    |	ДокументыРасчетОН.СтавкаНалогаНаПрибыль,
    |	ДокументыРасчетОН.Номер
    |ИЗ
    |	Документ.бит_му_РасчетОтложенныхНалогов КАК ДокументыРасчетОН
    |ГДЕ
    |	ДокументыРасчетОН.Ссылка В(&МассивСсылок)
	|";
	Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
	Результат = Запрос.Выполнить();
	
	ТаблицаДокументов = Результат.Выгрузить();
	
	Возврат ТаблицаДокументов;
	
КонецФункции

// Функция получает данные по табличным частям документов.
// 
// Параметры:
//  МассивСсылок - Массив ссылок на документ бит_РасчетОтложенныхНалогов.
//  
// Возвращаемое значение:
//   Таблица значений.
// 
Функция ПолучитьТаблицуПоРасчетамОН(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасчетыОН.Ссылка,
	|	ЛОЖЬ КАК ЭтоИтоги,
	|	РасчетыОН.ВидАктивовОбязательств,
	|	РасчетыОН.СуммаНУ 				КАК СуммаНУ,
	|	РасчетыОН.СуммаМУ 				КАК СуммаМУ,
	|	РасчетыОН.СуммаПР 				КАК СуммаПР,
	|	РасчетыОН.СуммаВР	 			КАК СуммаВР,
	|	РасчетыОН.СтавкаНалогаНаПрибыль КАК СтавкаНалогаНаПрибыль,
	|	РасчетыОН.СуммаОНА 				КАК СуммаОНА,
	|	РасчетыОН.СуммаОНО 				КАК СуммаОНО
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	|	,РасчетыОН.МСФО_ИтогоНалоговаяБаза КАК МСФО_ИтогоНалоговаяБаза,
	|	РасчетыОН.СуммаРекласс КАК СуммаРекласс
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	|ИЗ
	|	Документ.бит_му_РасчетОтложенныхНалогов.РасчетыОН КАК РасчетыОН
	|ГДЕ
	|	РасчетыОН.Ссылка  В(&МассивСсылок)
	|ИТОГИ
	|	МАКСИМУМ(Ссылка),
	|	ИСТИНА КАК ЭтоИтоги,
	|	СУММА(СуммаНУ),
	|	СУММА(СуммаМУ),
	|	СУММА(СуммаПР),
	|	СУММА(СуммаОНА),
	|	СУММА(СуммаОНО)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	|	,СУММА(МСФО_ИтогоНалоговаяБаза),
	|	СУММА(СуммаРекласс)	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	|ПО
	|	ОБЩИЕ
	|";
	Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
	Результат = Запрос.Выполнить();
	
	ТаблицаПоРасчетамОН = Результат.Выгрузить();
	
	Возврат ТаблицаПоРасчетамОН;
	
КонецФункции

// Функция получает данные по табличным частям документов
// и по регистру сведений бит_му_РасчетОтложенныхНалогов. 
// 
// Параметры:
//  МассивСсылок - Массив ссылок на документ бит_РасчетОтложенныхНалогов.
//  
// Возвращаемое значение:
//   Таблица значений.
// 
Функция ПолучитьРезультатПолный(МассивСсылок)
	                          	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РасчетыОН.Ссылка КАК Ссылка,
	|	РасчетыОН.ВидАктивовОбязательств 			КАК ВидАктивовОбязательств,
	|	ВЫБОР КОГДА РасшифровкаРасчетов.ИсточникДанных = ЗНАЧЕНИЕ(Справочник.бит_ИсточникиДанных.ПустаяСсылка)
	|		ТОГДА ""Отредактировано вручную""
	|		ИНАЧЕ РасшифровкаРасчетов.ИсточникДанных
	|	КОНЕЦ КАК ИсточникДанных,
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//|	РасшифровкаРасчетов.СуммаНУ 				КАК СуммаНУ,
	|	РасшифровкаРасчетов.СуммаНУ + РасшифровкаРасчетов.СуммаРекласс КАК СуммаНУ,
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	|	РасшифровкаРасчетов.СуммаМУ 				КАК СуммаМУ,
	|	РасшифровкаРасчетов.СуммаПР 				КАК СуммаПР,
	|	РасшифровкаРасчетов.СуммаВР 				КАК СуммаВР,
	|	РасшифровкаРасчетов.СтавкаНалогаНаПрибыль 	КАК СтавкаНалогаНаПрибыль,
	|	РасшифровкаРасчетов.СуммаОНА 				КАК СуммаОНА,
	|	РасшифровкаРасчетов.СуммаОНО 				КАК СуммаОНО,
	|	РасшифровкаРасчетов.Организация,
	|	РасшифровкаРасчетов.Субконто1,
	|	РасшифровкаРасчетов.Субконто2,
	|	РасшифровкаРасчетов.Субконто3,
	|	1 											КАК Количество
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	|	,РасшифровкаРасчетов.Объект КАК Объект
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	|ИЗ
	|	Документ.бит_му_РасчетОтложенныхНалогов.РасчетыОН КАК РасчетыОН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_РасчетыОтложенныхНалогов КАК РасшифровкаРасчетов
	|		ПО РасчетыОН.Ссылка = РасшифровкаРасчетов.Документ
	|			И РасчетыОН.ВидАктивовОбязательств = РасшифровкаРасчетов.ВидАктивовОбязательств
	|ГДЕ
	|	РасчетыОН.Ссылка В(&МассивСсылок)
	|ИТОГИ
	|	СУММА(СуммаНУ),
	|	СУММА(СуммаМУ),
	|	СУММА(СуммаПР),
	|	СУММА(СуммаВР),
	|	СУММА(СтавкаНалогаНаПрибыль)/СУММА(Количество) КАК СтавкаНалогаНаПрибыль,
	|	СУММА(СуммаОНА),
	|	СУММА(СуммаОНО)
	|ПО
	|	Ссылка,
	|	ВидАктивовОбязательств,
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//|	ИсточникДанных
	|	Объект
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	|";
	
	Запрос.Параметры.Вставить("МассивСсылок", МассивСсылок);
	Результат = Запрос.Выполнить();
			
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли

//bit Avseenkov 09.12.2014 ++ Расчет отложенных налогов
Функция СформироватьПечатнуюФормубит_СверкаАО (ИмяМакета, МассивСсылок)
	
	ТабДок = Новый ТабличныйДокумент;
	
    ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_РасчетОтложенныхНалогов_бит_СверкаАО";  	
	
	// Таблица по документам
	ТаблицаДокументов = ПолучитьТаблицуДокументов(МассивСсылок);
	//1С-ИжТиСи, Кондратьев, 27.03.2020, Обновление (
	ПервыйДокумент		 = Истина;
	//1С-ИжТиСи, Кондратьев, 27.03.2020, Обновление )
	
	Если ТаблицаДокументов.Количество() > 0 Тогда
			
		// Получаем макет и области
		Макет = Документы.бит_му_РасчетОтложенныхНалогов.ПолучитьМакет(ИмяМакета);
		ОбластьЗаголовок 	  = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");		
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		// Таблица по табличной части
		ТаблицаРасчетовОН = ПолучитьТаблицуПоРасчетамОН(МассивСсылок);
		
		// Вывод результатов
		ПервыйДокумент   = Истина;
				
		Для каждого СтрДокумент Из ТаблицаДокументов Цикл
					
			// Текущий документ
			ТекДокумент = СтрДокумент.Ссылка;
			// Отбор для таблиц по текущему документу
			Отбор = Новый Структура;
			Отбор.Вставить("Ссылка", ТекДокумент);
											
			// Разделитель страниц
			//1С-ИжТиСи, Кондратьев, 27.03.2020, Обновление (
			//бит_ПечатьСервер.ВывестиГоризонтальныйРазделительСтраниц(ТабДок, ПервыйДокумент);
			Если Не ПервыйДокумент Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			//1С-ИжТиСи, Кондратьев, 27.03.2020, Обновление )

			// Заполним общие для документа параметры
			ОбластьЗаголовок.Параметры.Заполнить(СтрДокумент);
			ОбластьЗаголовок.Параметры.Дата = Формат(СтрДокумент.Дата, "ДФ=dd.MM.yyyy");
						
			// Выведем Заголовок и шапку
			ТабДок.Вывести(ОбластьЗаголовок);
		  	
			
			СтруктураДанных = ПолучитьСтруктуруДанных(СтрДокумент);
			СтруктураДанных.Вставить("ТипНастройки", ПредопределенноеЗначение("Перечисление.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.СверкаПоРеклассам"));
			
			ГраницаНач = НачалоДня(ДобавитьМесяц(СтрДокумент.Дата, -12));
			ГраницаКон = Новый Граница(КонецДня(СтрДокумент.Дата), ВидГраницы.Включая);
			
			СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
			
			ТаблицаОтбора = Новый ТаблицаЗначений;
			ТаблицаОтбора.Колонки.Добавить("Использование");
			ТаблицаОтбора.Колонки.Добавить("Имя");
			ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
			ТаблицаОтбора.Колонки.Добавить("Значение");
			// Организация
			СтрокаОтбора = ТаблицаОтбора.Добавить();
			СтрокаОтбора.Использование = Истина;
			СтрокаОтбора.Имя 		   = "Организация";
			СтрокаОтбора.ВидСравнения  = ВидСравнения.Равно;
			СтрокаОтбора.Значение 	   = СтрДокумент.Организация;

			СтрПар.ОтборВОтчете  = ТаблицаОтбора;
			
			РезультатЗапросаНастроек = бит_му_ОбщегоНазначения.ПолучитьНастройкиРасчетаОтложенныхНалоговРасширенная(СтруктураДанных);
			
			ВыборкаВидАО = РезультатЗапросаНастроек.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			ТаблицаИсточников = Новый ТаблицаЗначений;
			ТаблицаИсточников.Колонки.Добавить("ВидАО");
			ТаблицаИсточников.Колонки.Добавить("СуммаМСФО");   
			ТаблицаИсточников.Колонки.Добавить("СуммаКорректировок");
			ТаблицаИсточников.Колонки.Добавить("Разница");
			Пока ВыборкаВидАО.Следующий() Цикл
				
				Строка = ТаблицаИсточников.Добавить();
				
				ВидАктивовОбязательств 	= ВыборкаВидАО.ВидАктивовОбязательств;
				Строка.ВидАО = ВидАктивовОбязательств;
				ВыборкаТипНастройки = ВыборкаВидАО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				
				Пока  ВыборкаТипНастройки.Следующий() Цикл
					
					ТипНастройки = ВыборкаТипНастройки.ТипНастройки;
					
					ВыборкаИсточники = ВыборкаТипНастройки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаИсточники.Следующий() Цикл
						
						ИсточникДанных 			= ВыборкаИсточники.ИсточникДанных;	
						
						ТаблицаПоИсточнику 			=  Новый ТаблицаЗначений;
						
						Если ЗначениеЗаполнено(ИсточникДанных) Тогда
							ТаблицаПоИсточнику = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанных, ГраницаНач, ГраницаКон, СтрПар);
							Если ТипЗНЧ(ТаблицаПоИсточнику) = Тип("ТаблицаЗначений") Тогда
								Строка.СуммаМСФО = ТаблицаПоИсточнику.Итог("Сумма");
								Строка.СуммаКорректировок = 0;
								Строка.Разница = Строка.СуммаМСФО;
							Иначе	
								Строка.СуммаМСФО = 0;
								Строка.СуммаКорректировок = 0;
								Строка.Разница = 0;
							КонецЕсли;	
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
						
			// Заполняем данные по табличной части и итогам для печатной формы
			МассивСтрок = ТаблицаРасчетовОН.НайтиСтроки(Отбор);
			
			ПолучитьИтоговуюТаблицу(ТаблицаИсточников,МассивСтрок);
			НомерСтроки = 1;
			Для Каждого ТекСтрока Из ТаблицаИсточников Цикл
			   
			   ОбластьСтрока.Параметры.Заполнить(ТекСтрока);
			   ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			   ТабДок.Вывести(ОбластьСтрока);	
			   НомерСтроки = НомерСтроки+1;
			КонецЦикла; 

			ОбластьИтого.Параметры.ИтогоСуммаМСФО = ТаблицаИсточников.Итог("СуммаМСФО");
			ОбластьИтого.Параметры.ИтогоСуммаКорректировок = ТаблицаИсточников.Итог("СуммаКорректировок");
			ОбластьИтого.Параметры.ИтогоРазница = ТаблицаИсточников.Итог("Разница");
			// Выводим итоги и подвал
			ТабДок.Вывести(ОбластьИтого);
			
			
		КонецЦикла;
	
	КонецЕсли;

	ТабДок.АвтоМасштаб = Истина;
	
    Возврат ТабДок;

	
КонецФункции

 Функция ПолучитьСтруктуруДанных(СтрДокумент)

	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Валюта"   		, СтрДокумент.ВалютаДокумента);
	СтруктураДанных.Вставить("Курс"     		, СтрДокумент.Ссылка.КурсДокумента);
	СтруктураДанных.Вставить("Кратность"		, СтрДокумент.Ссылка.КратностьДокумента);
		
    СтруктураДанных.Вставить("Дата"		  			, СтрДокумент.Дата);
	СтруктураДанных.Вставить("Организация"			, СтрДокумент.Организация);
	СтруктураДанных.Вставить("СтавкаНалогаНаПрибыль", СтрДокумент.СтавкаНалогаНаПрибыль);
		
	Возврат СтруктураДанных;
	
КонецФункции

Процедура  ПолучитьИтоговуюТаблицу (ТаблицаИсточников,МассивСтрок)
	
		
	Для Каждого Эл  из МассивСтрок Цикл 
		
		Если ЗначениеЗаполнено(Эл.ВидАктивовОбязательств) Тогда 
			ЭлементТаблицы =ТаблицаИсточников.Найти(Эл.ВидАктивовОбязательств);
			
			Если ЭлементТаблицы <> Неопределено Тогда 
				
				ЭлементТаблицы.СуммаКорректировок = Эл.СуммаРекласс;
				ЭлементТаблицы.Разница = ЭлементТаблицы.СуммаМСФО -  ЭлементТаблицы.СуммаКорректировок;
			Иначе 
				Если  Эл.СуммаРекласс <> 0 Тогда 
					Строка = ТаблицаИсточников.Добавить();
					Строка.СуммаМСФО = 0;
					Строка.СуммаКорректировок = Эл.СуммаРекласс;
					Строка.Разница = Строка.СуммаМСФО -  Строка.СуммаКорректировок;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрок = ТаблицаИсточников.Количество();
	
	Сч = КоличествоСтрок;
	
	
	Пока Сч <>0 Цикл 
		
		СуммаМСФО =  ТаблицаИсточников[Сч-1].СуммаМСФО;
		СуммаКорректировок =  ТаблицаИсточников[Сч-1].СуммаКорректировок;

		Если СуммаМСФО = 0 И СуммаКорректировок = 0 Тогда 
			ТаблицаИсточников.Удалить(Сч-1);
			Продолжить;
		КонецЕсли;
		
		Сч = Сч-1;
	КонецЦикла;
	
	
КонецПроцедуры
//bit Avseenkov 09.12.2014 -- Расчет отложенных налогов
