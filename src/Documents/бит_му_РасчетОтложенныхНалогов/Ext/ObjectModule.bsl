#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ; // Хранит количество субконто МУ.

Перем мОрганизацияКонсолидирующая; // agoncharenko #1886 05102015 Начало

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
	     ЗаполнитьШапкуПоСтруктуре(ДанныеЗаполнения);
	КонецЕсли;
	 
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	мОрганизацияКонсолидирующая = ОпределитьКонсолидированностьОрганизации(); // agoncharenko #1886 05102015 Начало
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр, Регл, МУ, Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
               
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда.
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента) Экспорт
	
	// Расчеты ОН.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Табл.ВидАктивовОбязательств,
	|	ЕСТЬNULL(Табл.СуммаОНА, 0) КАК СуммаОНА,
	|	ЕСТЬNULL(Табл.СуммаОНО, 0) КАК СуммаОНО,
	|	ВЫБОР
	|		КОГДА Табл.СчетРасходовДоходов = ЗНАЧЕНИЕ(ПланСчетов.бит_Дополнительный_2.ПустаяСсылка)
	|			ТОГДА Документ.СчетРасходовДоходов
	|		ИНАЧЕ Табл.СчетРасходовДоходов
	|	КОНЕЦ КАК СчетРасходовДоходов,
	|	ВЫБОР
	|		КОГДА Табл.СчетРасходовДоходов = ЗНАЧЕНИЕ(ПланСчетов.бит_Дополнительный_2.ПустаяСсылка)
	|			ТОГДА Документ.Субконто_1
	|		ИНАЧЕ Табл.Субконто_1
	|	КОНЕЦ КАК Субконто_1,
	|	ВЫБОР
	|		КОГДА Табл.СчетРасходовДоходов = ЗНАЧЕНИЕ(ПланСчетов.бит_Дополнительный_2.ПустаяСсылка)
	|			ТОГДА Документ.Субконто_2
	|		ИНАЧЕ Табл.Субконто_2
	|	КОНЕЦ КАК Субконто_2,
	|	ВЫБОР
	|		КОГДА Табл.СчетРасходовДоходов = ЗНАЧЕНИЕ(ПланСчетов.бит_Дополнительный_2.ПустаяСсылка)
	|			ТОГДА Документ.Субконто_3
	|		ИНАЧЕ Табл.Субконто_3
	|	КОНЕЦ КАК Субконто_3,
	|	ВЫБОР
	|		КОГДА Табл.СчетРасходовДоходов = ЗНАЧЕНИЕ(ПланСчетов.бит_Дополнительный_2.ПустаяСсылка)
	|			ТОГДА Документ.Субконто_4
	|		ИНАЧЕ Табл.Субконто_4
	|	КОНЕЦ КАК Субконто_4,
	|	Табл.ОтредактированоВручную
	|ИЗ
	|	Документ.бит_му_РасчетОтложенныхНалогов.РасчетыОН КАК Табл,
	|	Документ.бит_му_РасчетОтложенныхНалогов КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И Табл.Ссылка = &Ссылка
	|";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоРасчетыОН = РезультатЗапроса.Выгрузить();
	
	// Структура таблиц.
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("РасчетыОН"		 , ТаблицаПоРасчетыОН);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Функция формирует структуру данных, 
// куда входит информация по валюте документа и валюта регламентированного учета,
// организация, дата документа.
// 
// Параметры:
//  СтруктураВалют - Структура.
//  
// Возвращаемое значение:
//   Структура 
// 
Функция ПолучитьСтруктуруДанных(СтруктураВалют) Экспорт

	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Валюта"   		, ВалютаДокумента);
	СтруктураДанных.Вставить("Курс"     		, КурсДокумента);
	СтруктураДанных.Вставить("Кратность"		, КратностьДокумента);
	
	СтруктураДанных.Вставить("ВалютаМСФО"   , СтруктураВалют.ВалютаМСФО);
	СтруктураДанных.Вставить("КурсМСФО"     , СтруктураВалют.КурсМСФО);
	СтруктураДанных.Вставить("КратностьМСФО", СтруктураВалют.КратностьМСФО);
	
	СтруктураДанных.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
    СтруктураДанных.Вставить("Дата"		  			, Дата);
	СтруктураДанных.Вставить("Организация"			, Организация);
	СтруктураДанных.Вставить("СтавкаНалогаНаПрибыль", СтавкаНалогаНаПрибыль);
		
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруКурсов()

// Процедура заполняет таблицу расшифровки.
// 
// Параметры:
//  ТаблицаРасшифровки - Таблица значений.
//  СтруктураДанных    - Структура.
// 
Процедура ЗаполнитьТаблицуРасшифровки(ТаблицаРасшифровки, СтруктураДанных, Источник) Экспорт
	
	ТаблицаОтбора = ПолучитьТаблицуОтбора();
	
	ГраницаНач = НачалоДня(ДобавитьМесяц(Дата, -12));// НачалоМесяца(Дата);
    ГраницаКон = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
	СтрПар.ОтборВОтчете = ТаблицаОтбора;
	
 	ТаблицаПоИсточнику = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(Источник, ГраницаНач, ГраницаКон, СтрПар);
																	
	Для каждого СтрПоИсточнику Из ТаблицаПоИсточнику Цикл	
		
		СтрРасшифровки = ТаблицаРасшифровки.Добавить();												
		ЗаполнитьЗначенияСвойств(СтрРасшифровки, СтрПоИсточнику);
		
		//bit Amerkulov 03.12.2014 ++ Расчет отложенных налогов
		/////////////////////////////////////////////////////////////////////////////
		//// Валютные пересчеты 
		//// СуммаМУ: из валюты МСФО в валюту документа.			
		//СтрРасшифровки.СуммаМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрРасшифровки.СуммаМУ
		//												 ,СтруктураДанных.ВалютаМСФО
		//												 ,ВалютаДокумента
		//												 ,СтруктураДанных.КурсМСФО
		//												 ,КурсДокумента
		//												 ,СтруктураДанных.КратностьМСФО
		//												 ,КратностьДокумента);
		//// Остальные суммы: из валюты регламентированного учета в валюту документа.
		//ПересчитатьИзВалютыРегл(СтрРасшифровки.СуммаНУ, СтруктураДанных);
		//ПересчитатьИзВалютыРегл(СтрРасшифровки.СуммаПР, СтруктураДанных);
		//		
		//
		/////////////////////////////////////////////////////////////////////////////
		//// Вычислим значения: СуммаВР, СуммаОНА, СуммаОНО.
		//
		//бит_му_ОбщегоНазначения.РасчитатьСуммыОтложенныхНалоговыхАктивовОбязательств(СтрРасшифровки, СтавкаНалогаНаПрибыль)	
		СтрРасшифровки.СуммаПР	= 0;
		//bit Amerkulov 03.12.2014 -- Расчет отложенных налогов
				
	КонецЦикла;
 	
КонецПроцедуры // ЗаполнитьТаблицуРасшифровки()

// Процедура удаляет запись протокола для текущего вида активов/обяхательств.
//
// Параметры:
//  ВидАктивовОбязательств - СправочникСсылка.бит_му_ВидыАктивовОбязательств.
//  РасшифровкаРасчетов    - ТаблицаЗначений.
//
Процедура УдалитьДанныеПоВидуАктивовОбязательств(ВидАктивовОбязательств, РасшифровкаРасчетов) Экспорт

	НайденныеСтроки = РасшифровкаРасчетов.НайтиСтроки(Новый Структура("ВидАктивовОбязательств", ВидАктивовОбязательств));
	Для каждого Стр Из НайденныеСтроки Цикл	
		РасшифровкаРасчетов.Удалить(Стр);	
	КонецЦикла; 
	
КонецПроцедуры // УдалитьЗаписьПротокола()

// Функция получает данные для расчетов отложенных налогов.
// 
// Параметры:
//  СтруктураДанных     - Структура.
//  РасшифровкаРасчетов - ТаблицаЗначений.
//  
// Возвращаемое значение:
//  Массив.
// 
Функция ПолучитьДанныеДляРасчетовОН(СтруктураДанных, РасшифровкаРасчетов) Экспорт
	
	//bit Amerkulov 26.11.2014 ++ Расчет отложенных налогов					
	РасшифровкиНалоговаяБазаБалансоваяОценка.Очистить();
	//bit Amerkulov 26.11.2014 -- Расчет отложенных налогов	  
	
	// Массив результата.
	МассивРезультата = Новый Массив;
	
	// Описание типов для вспомогательной таблицы:
	Тип_Число_15_2  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	Тип_Организация = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Тип_СубконтоХоз = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		
	// Вспомогательная таблица.
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("Организация", Тип_Организация);
	ТаблицаРасшифровки.Колонки.Добавить("СуммаМУ"	 , Тип_Число_15_2);
	ТаблицаРасшифровки.Колонки.Добавить("СуммаНУ"	 , Тип_Число_15_2);
	ТаблицаРасшифровки.Колонки.Добавить("СуммаПР"	 , Тип_Число_15_2);
	ТаблицаРасшифровки.Колонки.Добавить("СуммаВР"	 , Тип_Число_15_2);
	ТаблицаРасшифровки.Колонки.Добавить("СуммаОНА"   , Тип_Число_15_2);
	ТаблицаРасшифровки.Колонки.Добавить("СуммаОНО"   , Тип_Число_15_2);
	ТаблицаРасшифровки.Колонки.Добавить("Субконто1"  , Тип_СубконтоХоз); 
	ТаблицаРасшифровки.Колонки.Добавить("Субконто2"  , Тип_СубконтоХоз); 
	ТаблицаРасшифровки.Колонки.Добавить("Субконто3"  , Тип_СубконтоХоз); 
	
	// Ставка налога на прибыль.
	ТекСтавкаНалогаНаПрибыль = СтруктураДанных.СтавкаНалогаНаПрибыль;
	 	
	// Формируем ТаблицаДанных для заполнения табличной части РасчетыОН.
	РезультатЗапроса = бит_му_ОбщегоНазначения.ПолучитьНастройкиРасчетаОтложенныхНалогов(СтруктураДанных);
	
	ВыборкаВидАО = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаВидАО.Следующий() Цикл
		
		ВидАктивовОбязательств = ВыборкаВидАО.ВидАктивовОбязательств;
		НомерСтроки = 1;
		
		УдалитьДанныеПоВидуАктивовОбязательств(ВидАктивовОбязательств, РасшифровкаРасчетов);
		
		СуммаНУ  = 0;
		СуммаМУ  = 0;
		СуммаПР  = 0;
		СуммаВР  = 0;
		СуммаОНА = 0;
		СуммаОНО = 0;  
			
		// Выборка по источникам.
		ВыборкаИсточники = ВыборкаВидАО.Выбрать();
     	Пока ВыборкаИсточники.Следующий() Цикл
			
			ТаблицаРасшифровки.Очистить();
			Источник = ВыборкаИсточники.ИсточникДанных;
	
			ЗаполнитьТаблицуРасшифровки(ТаблицаРасшифровки, СтруктураДанных, Источник);
			
			Для каждого СтрРасш Из ТаблицаРасшифровки Цикл
				
				СтрРасшифровки = РасшифровкаРасчетов.Добавить();
				СтрРасшифровки.ВидАктивовОбязательств = ВидАктивовОбязательств;
				СтрРасшифровки.ИсточникДанных 		  = Источник;
				СтрРасшифровки.ИД 					  = Новый УникальныйИдентификатор;
				СтрРасшифровки.НомерСтроки 		      = НомерСтроки;
				СтрРасшифровки.СтавкаНалогаНаПрибыль  = ТекСтавкаНалогаНаПрибыль;
				
				ЗаполнитьЗначенияСвойств(СтрРасшифровки, СтрРасш);
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
			СуммаНУ   = СуммаНУ   + ТаблицаРасшифровки.Итог("СуммаНУ");
			СуммаМУ   = СуммаМУ   + ТаблицаРасшифровки.Итог("СуммаМУ");
			СуммаПР   = СуммаПР   + ТаблицаРасшифровки.Итог("СуммаПР");
			СуммаВР   = СуммаВР   + ТаблицаРасшифровки.Итог("СуммаВР");
			СуммаОНА  = СуммаОНА  + ТаблицаРасшифровки.Итог("СуммаОНА");
			СуммаОНО  = СуммаОНО  + ТаблицаРасшифровки.Итог("СуммаОНО");
			
		КонецЦикла;
				
		// Записываем в массив результата.
		СтрокаРезультата = Новый Структура("ВидАктивовОбязательств, ИсточникДанных, 
										|СуммаНУ, СуммаМУ, СуммаПР, СуммаВР, СуммаОНА, СуммаОНО,
										//bit Amerkulov 03.12.2014 ++ Расчет отложенных налогов	 
										| Объект,
										//bit Amerkulov 03.12.2014 -- Расчет отложенных налогов	
										|ОтредактированоВручную");
        СтрокаРезультата.Вставить("ВидАктивовОбязательств", ВыборкаВидАО.ВидАктивовОбязательств);
		СтрокаРезультата.Вставить("СуммаНУ" , СуммаНУ);
		СтрокаРезультата.Вставить("СуммаМУ" , СуммаМУ);
		СтрокаРезультата.Вставить("СуммаПР" , СуммаПР);
		СтрокаРезультата.Вставить("СуммаВР" , СуммаВР);
		СтрокаРезультата.Вставить("СуммаОНА", СуммаОНА);
		СтрокаРезультата.Вставить("СуммаОНО", СуммаОНО);
		МассивРезультата.Добавить(СтрокаРезультата);
		
		ТаблицаРасшифровки.Очистить();
		
	КонецЦикла;
	
	//bit Amerkulov 02.12.2014 ++ Расчет отложенных налогов	
	РасшифровкиНалоговаяБазаБалансоваяОценка.Очистить();
	Для каждого СтрРасш Из ТаблицаРасшифровки Цикл			
		СтрРасшифровки.СуммаПР	= 0;
		
		СтрРасшифровкиНалоговаяБаза = РасшифровкиНалоговаяБазаБалансоваяОценка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрРасшифровкиНалоговаяБаза,СтрРасш);
		СтрРасшифровкиНалоговаяБаза.ВидАктивовОбязательств 	= ВидАктивовОбязательств;
		СтрРасшифровкиНалоговаяБаза.ИсточникДанных 		  	= Источник;	
		
		Если ЗначениеЗаполнено(СтрРасшифровкиНалоговаяБаза.ИсточникДанных) И СтрРасшифровкиНалоговаяБаза.ИсточникДанных.НастройкиПостроителя.Получить().ПараметрыПостроителя.Свойство("СопоставлятьПООбъекту") Тогда
			СтрРасшифровкиНалоговаяБаза.СопоставлятьПоОбъекту = СтрРасшифровкиНалоговаяБаза.ИсточникДанных.НастройкиПостроителя.Получить().ПараметрыПостроителя.СопоставлятьПООбъекту;	
		КонецЕсли;
		
	КонецЦикла;
	
	
	Таблица = РасшифровкаРасчетов.Выгрузить();
	Таблица.Свернуть("ВидАктивовОбязательств,ИсточникДанных,Объект","СуммаНУ,СуммаМУ");
	
	МассивКУдалению = Новый Массив;
	Для Каждого Стр Из Таблица Цикл
		Если Стр.СуммаНУ = 0 И Стр.СуммаМУ = 0 Тогда
			МассивКУдалению.Добавить(Стр);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из МассивКУдалению Цикл
		Таблица.Удалить(Стр);	
	КонецЦикла;
	
	Таблица.Сортировать("ВидАктивовОбязательств, ИсточникДанных, Объект");
	Таблица.Колонки.Добавить("НомерПоДереву");
	Таблица.Колонки.Добавить("НомерПоОбъекту");
	Таблица.Колонки.Добавить("СопоставлятьПоОбъекту");
	ТекущийИсточник 	= Неопределено;
	СчетчикПоДереву 	= 0;
	СчетчикПоОбъекту 	= 0;
	Для Каждого Стр Из Таблица Цикл
		
		Если Стр.ИсточникДанных <> ТекущийИсточник Тогда
			СчетчикПоДереву 	= СчетчикПоДереву + 1;
			СчетчикПоОбъекту 	= 1;
			ТекущийИсточник =  Стр.ИсточникДанных;
		Иначе
			СчетчикПоОбъекту 	= СчетчикПоОбъекту + 1;
		КонецЕсли;
		
		Стр.НомерПоДереву 	= СчетчикПоДереву;
		Стр.НомерПоОбъекту 	= Строка(СчетчикПоДереву) + "." + Строка(СчетчикПоОбъекту);
		
		Если ЗначениеЗаполнено(Стр.ИсточникДанных) И Стр.ИсточникДанных.НастройкиПостроителя.Получить().ПараметрыПостроителя.Свойство("СопоставлятьПООбъекту") Тогда
			Стр.СопоставлятьПоОбъекту = Стр.ИсточникДанных.НастройкиПостроителя.Получить().ПараметрыПостроителя.СопоставлятьПООбъекту;	
		КонецЕсли;
		
		
	КонецЦикла;
	
	РасшифровкиНалоговаяБазаБалансоваяОценка.Загрузить(Таблица);
	//bit Amerkulov 02.12.2014 -- Расчет отложенных налогов	 
	
	Возврат МассивРезультата;
	
КонецФункции // ПолучитьДанныеДляРасчетовОН()

// Процедура заполняет табличную часть "РасчетыОН".
// 
// Параметры:
//  СтруктураДанных     - Структура.
//  РасшифровкаРасчетов - ТаблицаЗначений.
// 
Процедура ЗаполнитьТчРасчетыОН(СтруктураДанных, РасшифровкаРасчетов) Экспорт
	
	ДанныеДляРасчетовОН = ПолучитьДанныеДляРасчетовОН(СтруктураДанных, РасшифровкаРасчетов);	
	Для каждого СтрокаДанных Из ДанныеДляРасчетовОН Цикл
		
		НоваяСтрокаТаб = РасчетыОН.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаб, СтрокаДанных);
		НоваяСтрокаТаб.СтавкаНалогаНаПрибыль = СтруктураДанных.СтавкаНалогаНаПрибыль;
				
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТчРасчетыОН()

// Процедура - записывает расшифровку расчетов в регистр бит_му_РасчетыОтложенныхНалогов.
//
// Параметры:
//  РасшифровкаРасчетов - ТаблицаЗначений.
//
Процедура ЗаписатьРасшифровкуРасчетов(РасшифровкаРасчетов) Экспорт
	
	НаборЗаписей = РегистрыСведений.бит_му_РасчетыОтложенныхНалогов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для каждого Стр Из РасшифровкаРасчетов Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Стр);
		Запись.Документ = Ссылка;
	КонецЦикла;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры // ЗаписатьРасшифровкуРасчетов()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
// Возвращаемое значение: 
//  ТаблицаЗначений - таблица для записи в регистр сведений бит_му_РасчетыОтложенныхНалогов.
//
Функция ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	Если ТипЗнч(СтруктураЗаполнения) = Тип("Структура") Тогда
	     ЗаполнитьШапкуПоСтруктуре(СтруктураЗаполнения);
	КонецЕсли;
	
	ПервоначальноеЗаполнениеДокумента(Неопределено);
	
	// Изменения кода. Начало: 07.02.2017  {{ 
	// Должно заполниться из структуры или в "ПервоначальноеЗаполнениеДокумента"
	//// Получим валюту международного учета.
	//ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	//ИзменениеВалютыМодуль();
	//
	//// Дата сторно
	//ДатаСторно = НачалоМесяца(ДобавитьМесяц(Дата, 1));
	//
	//// Ставка налога на прибыль
	//СтавкаНалогаНаПрибыль = бит_му_ОбщегоНазначения.ПолучитьСтавкуНалогаНаПрибыль(Дата, Организация);
	// Изменения кода. Конец 07.02.2017  }}. 
	
	// Таблица - данные регистра бит_му_РасчетыОтложенныхНалогов
	РасшифровкаРасчетов = Новый ТаблицаЗначений;
	Набор               = РегистрыСведений.бит_му_РасчетыОтложенныхНалогов.СоздатьНаборЗаписей();
	РасшифровкаРасчетов = Набор.ВыгрузитьКолонки();	
	//МетаРег = Метаданные.РегистрыСведений.бит_му_РасчетыОтложенныхНалогов;
	//Для каждого РсИзм Из МетаРег.Измерения Цикл
	//	//Если РсИзм.Имя <> "Документ" Тогда
	//	РасшифровкаРасчетов.Колонки.Добавить(РсИзм.Имя, РсИзм.Тип);		
	//	//КонецЕсли;	
	//КонецЦикла;
	//Для каждого РсИзм Из МетаРег.Ресурсы Цикл
	//	РасшифровкаРасчетов.Колонки.Добавить(РсИзм.Имя, РсИзм.Тип);		
	//КонецЦикла;
	//Для каждого РсИзм Из МетаРег.Реквизиты Цикл
	//	РасшифровкаРасчетов.Колонки.Добавить(РсИзм.Имя, РсИзм.Тип);		
	//КонецЦикла;
	РасшифровкаРасчетов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
		
	СтруктураВалют = Новый Структура("ВалютаМСФО, КурсМСФО, КратностьМСФО"
									, ВалютаДокумента, КурсДокумента, КратностьДокумента);
	СтруктураДанных = ПолучитьСтруктуруДанных(СтруктураВалют);
	
	// Заполняет табличную часть "РасчетыОН".
	ЗаполнитьТчРасчетыОН(СтруктураДанных, РасшифровкаРасчетов);	

	Возврат РасшифровкаРасчетов;
	
КонецФункции // ЗаполнитьДокумент()
  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет данные.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц  		- Структура.
// 	Отказ     				- Булево.
//  Заголовок 				- Строка.
// 
Процедура ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)

	// Проверка на заполненность счета расходов/доходов.
	Если Не ЗначениеЗаполнено(СчетРасходовДоходов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СчетРасходовДоходов", ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
		Запрос.Текст = "
		|ВЫБРАТЬ
        |	РасчетыОН.НомерСтроки,
        |	РасчетыОН.ВидАктивовОбязательств,
        |	РасчетыОН.СчетРасходовДоходов
        |ИЗ
        |	Документ.бит_му_РасчетОтложенныхНалогов.РасчетыОН КАК РасчетыОН
        |ГДЕ
        |	РасчетыОН.Ссылка = &Ссылка
        |	И РасчетыОН.СчетРасходовДоходов = &СчетРасходовДоходов
		|";
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщения = Нстр("ru = 'В строке номер %НомерСтроки% не указан счет расходов/доходов для вида активов/обязательств %ВидАктивовОбязательств%.'");
		    	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%"	 	   , Выборка.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидАктивовОбязательств%", Выборка.ВидАктивовОбязательств);
				бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
				
			КонецЦикла;
			
			ТекстСообщения = Нстр("ru = 'Укажите счета расходов/доходов для названных строк или заполните значение счета по умолчанию на вкладке ""Счет расходов/доходов"".'");
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			
		КонецЕсли; 
 	
	КонецЕсли; 
	
КонецПроцедуры // ПроверкаДанных()

// Функция формирует таблицу отбора.
// 
// Параметры:
// СтруктураДанных - Структура.
// 
// Возвращаемое значение:
//  Таблица значений (Использование, Имя, ВидСравнения, Значение).
// 
Функция ПолучитьТаблицуОтбора()

	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Использование");
	ТаблицаОтбора.Колонки.Добавить("Имя");
	ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
	ТаблицаОтбора.Колонки.Добавить("Значение");
	// Организация.
	СтрокаОтбора = ТаблицаОтбора.Добавить();
	СтрокаОтбора.Использование = Истина;
	СтрокаОтбора.Имя 		   = "Организация";
	СтрокаОтбора.ВидСравнения  = ВидСравнения.Равно;
	СтрокаОтбора.Значение 	   = Организация;

	Возврат ТаблицаОтбора;
	
КонецФункции // ПолучитьТаблицуОтбора()

// Процедура пересчитывает сумму из валюты регл учета в валюту.
// 
// Параметры:
//  Сумма  	  	    - Число.
//  СтруктураДанных - Структура.
// 
Процедура ПересчитатьИзВалютыРегл(Сумма, СтруктураДанных)

	Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Сумма
													  ,СтруктураДанных.ВалютаРеглУчета
													  ,СтруктураДанных.Валюта
													  ,1
													  ,СтруктураДанных.Курс
													  ,1
													  ,СтруктураДанных.Кратность);
	
КонецПроцедуры // ПересчитатьИзВалютыРегл()
												  
// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	РучнаяКорректировка = Ложь;
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
												
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДатаСторно) Тогда
		ДатаСторно = НачалоМесяца(ДобавитьМесяц(Дата, 1));
	КонецЕсли; 

	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
	Иначе
		
		РасчетыОН.Очистить();
		//bit Amerkulov 03.12.2014 ++ Расчет отложенных налогов	
		РасшифровкиНалоговаяБазаБалансоваяОценка.Очистить();
		РасшифровкаКорректировкаПоБалансу.Очистить();
		РасшифровкаПостоянныеРазницы.Очистить();
		//bit Amerkulov 03.12.2014 -- Расчет отложенных налогов		
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
    
	// Ставка налога на прибыль.
	Если (ПараметрОбъектКопирования = Неопределено И НЕ ЗначениеЗаполнено(СтавкаНалогаНаПрибыль)) 
	 ИЛИ НЕ ПараметрОбъектКопирования = Неопределено Тогда
		СтавкаНалогаНаПрибыль = бит_му_ОбщегоНазначения.ПолучитьСтавкуНалогаНаПрибыль(Дата, Организация);
	КонецЕсли; 
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

Процедура ЗаполнитьШапкуПоСтруктуре(ДанныеЗаполнения)

    Для каждого КлючЗначение Из ДанныеЗаполнения Цикл
		Если бит_ОбщегоНазначения.ЕстьРеквизит(КлючЗначение.Ключ,Метаданные()) 
		   И НЕ ЗначениеЗаполнено(ЭтотОбъект[КлючЗначение.Ключ]) Тогда
			ЭтотОбъект[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Функция подготавливает структуру данных.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют     - Структура.
//  
// Возвращаемое значение:
//   Структура.
// 
Функция ПодготовитьСтруктуруДанных(СтруктураШапкиДокумента, СтруктураКурсыВалют)

	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Организация"			, СтруктураШапкиДокумента.Организация);
	СтруктураДанных.Вставить("Дата"		  			, СтруктураШапкиДокумента.Дата);
	
	СтруктураДанных.Вставить("ВалютаМСФО" 	 		, СтруктураКурсыВалют.МУ.Валюта);
	СтруктураДанных.Вставить("КурсМСФО"   	 		, СтруктураКурсыВалют.МУ.Курс);
	СтруктураДанных.Вставить("КратностьМСФО" 		, СтруктураКурсыВалют.МУ.Кратность);
	
	СтруктураДанных.Вставить("ВалютаРеглУчета" 	 	, СтруктураКурсыВалют.Регл.Валюта);
	
	СтруктураДанных.Вставить("Валюта" 	 			, СтруктураКурсыВалют.Документ.Валюта);
	СтруктураДанных.Вставить("Курс"   	 			, СтруктураКурсыВалют.Документ.Курс);
	СтруктураДанных.Вставить("Кратность" 			, СтруктураКурсыВалют.Документ.Кратность);

	Возврат СтруктураДанных;
	
КонецФункции // ПодготовитьСтруктуруДанных()

// Процедура формирует движение по взаиморасчетам Дт 207 Кт 208. ДЕМО.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьДвиженияМУ(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)

	// ДТ СчетУчетаОНА 	КТ СчетРасходовДоходов 	СуммаОНА.
	Если СтрокаТаблицы.СуммаОНА <> 0 Тогда
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура("Организация, Период, Валюта, СчетДт, СчетКт, Сумма, Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтруктураШапкиДокумента.ВалютаДокумента
										 ,СчетУчетаОНА  // Дт
										 ,СтрокаТаблицы.СчетРасходовДоходов // Кт
										 ,СтрокаТаблицы.СуммаОНА
										 ,"Отложенные налоговые активы");
										 
	
		
		ДобавитьЗаписиМУ(СтрокаТаблицы, СтруктураПараметров, СтруктураКурсыВалют);
			
	КонецЕсли;
	
	// ДТ СчетРасходовДоходов КТ СчетУчетаОНО СуммаОНО.
	Если СтрокаТаблицы.СуммаОНО <> 0 Тогда
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура("Организация, Период, Валюта, СчетДт, СчетКт, Сумма, Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтруктураШапкиДокумента.ВалютаДокумента
										 ,СтрокаТаблицы.СчетРасходовДоходов // Дт
										 ,СчетУчетаОНО // Кт
										 ,СтрокаТаблицы.СуммаОНО
										 ,"Отложенные налоговые обязательства");
		
	    ДобавитьЗаписиМУ(СтрокаТаблицы, СтруктураПараметров, СтруктураКурсыВалют);
			
	КонецЕсли;
	
КонецПроцедуры // СформироватьДвиженияМУ()

// Процедура заполняет запись по регистру бухгалтерии бит_Дополнительный_2.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
//  СтруктураКурсыВалют  - Структура.
// 
Процедура ДобавитьЗаписиМУ(СтрокаТаблицы, СтруктураПараметров, СтруктураКурсыВалют)

	// Запись.
	Запись = Движения.бит_Дополнительный_2.Добавить();	
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);	
	////bit auavseenkov++ Расчет отложенных налогов 26.11.2014
	СтрокаССубконтоКт = Запись.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ВидыАктивовОбязательств,"ВидСубконто");
	Если СтрокаССубконтоКт <> Неопределено Тогда		
		Запись.СубконтоКт.ВидыАктивовОбязательств = СтрокаТаблицы.ВидАктивовОбязательств;
	КонецЕсли;
	СтрокаССубконтоДт = Запись.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ВидыАктивовОбязательств,"ВидСубконто");
	Если СтрокаССубконтоДт <> Неопределено Тогда		
		Запись.СубконтоДт.ВидыАктивовОбязательств = СтрокаТаблицы.ВидАктивовОбязательств;
     КонецЕсли;
	//}		
    // Заполнение аналитик.	
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись, СтрокаТаблицы, "Субконто_", "Субконто_", мКоличествоСубконтоМУ);
  	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	// agoncharenko #1886 05102015 Начало	
	Если мОрганизацияКонсолидирующая Тогда
		Запись.СуммаМУ = 0;
	КонецЕсли;
	// agoncharenko #1886 Конец
	
	// Изменение кода. Начало. 13.11.2013{{
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ВидыАктивовОбязательств", СтрокаТаблицы.ВидАктивовОбязательств);  
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ВидыАктивовОбязательств", СтрокаТаблицы.ВидАктивовОбязательств);
	// Изменение кода. Конец. 13.11.2013}}
	
	// Запись сторно.
	ЗаписьСторно = Движения.бит_Дополнительный_2.Добавить();
	СтруктураПараметров.Вставить("Период", ДатаСторно);
	СтруктураПараметров.Вставить("Сумма", СтруктураПараметров.Сумма * -1);
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(ЗаписьСторно, СтруктураПараметров);
	////bit auavseenkov++ Расчет отложенных налогов 26.11.2014
	СтрокаССубконтоКт = ЗаписьСторно.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ВидыАктивовОбязательств,"ВидСубконто");
	Если СтрокаССубконтоКт <> Неопределено Тогда		
		ЗаписьСторно.СубконтоКт.ВидыАктивовОбязательств = СтрокаТаблицы.ВидАктивовОбязательств;
	КонецЕсли;
	СтрокаССубконтоДт = ЗаписьСторно.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ВидыАктивовОбязательств,"ВидСубконто");
	Если СтрокаССубконтоДт <> Неопределено Тогда		
		ЗаписьСторно.СубконтоДт.ВидыАктивовОбязательств = СтрокаТаблицы.ВидАктивовОбязательств;
     КонецЕсли;
	//}	
	// Заполнение аналитик.	
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(ЗаписьСторно, СтрокаТаблицы, "Субконто_", "Субконто_", мКоличествоСубконтоМУ);
  	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, ЗаписьСторно, СтруктураКурсыВалют);
	
	
	// Изменение кода. Начало. 13.11.2013{{
	бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьСторно.СчетДт, ЗаписьСторно.СубконтоДт, "ВидыАктивовОбязательств", СтрокаТаблицы.ВидАктивовОбязательств);  
	бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьСторно.СчетКт, ЗаписьСторно.СубконтоКт, "ВидыАктивовОбязательств", СтрокаТаблицы.ВидАктивовОбязательств);
	// Изменение кода. Конец. 13.11.2013}}
	
	// agoncharenko #1886 05102015 Начало	
	Если мОрганизацияКонсолидирующая Тогда
		ЗаписьСторно.СуммаМУ = 0;
	КонецЕсли;
	// agoncharenko #1886 Конец
	
КонецПроцедуры // ДобавитьЗаписиМУ()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.РасчетыОН;
	
	СтруктураДанных = ПодготовитьСтруктуруДанных(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			
		// Формируем проводку по отложенным активам и обязательствам.
		// ДТ СчетУчетаОНА 		  КТ СчетРасходовДоходов 	СуммаОНА.
		// ДТ СчетРасходовДоходов КТ СчетУчетаОНО 			СуммаОНО.
		СформироватьДвиженияМУ(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
	
	КонецЦикла;	
		
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецОбласти

//bit Amerkulov 27.11.2014 ++ Расчет отложенных налогов
Процедура ЗаполнитьТЧРасшифровкаКорректировкаПоБалансу(СтруктураДанных) Экспорт
	
	Если СтруктураДанных.ВидЗаполнения =  1 Тогда  // По организации 
		РасшифровкаКорректировкаПоБалансу.Очистить();
	КонецЕсли;
		
	Если СтруктураДанных.ВидЗаполнения =  2 Тогда  // Обновить 	
		Сч = 0;
		Пока Сч < РасшифровкаКорректировкаПоБалансу.Количество() Цикл
			СтрокаТаблицы = РасшифровкаКорректировкаПоБалансу.Получить(Сч);
			Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную Тогда
				Сч = Сч + 1;
			Иначе
				РасшифровкаКорректировкаПоБалансу.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Если СтруктураДанных.ВидЗаполнения = 3 Тогда // Обновить по виду А/О
		Сч = 0;
		МассивКУдалению = Новый Массив;
		Пока Сч < РасшифровкаКорректировкаПоБалансу.Количество() Цикл
			СтрокаТаблицы = РасшифровкаКорректировкаПоБалансу.Получить(Сч);
			Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную ИЛИ СтрокаТаблицы.ВидАктивовОбязательств <> СтруктураДанных.ВидАктивовОбязательств Тогда
				Сч = Сч + 1;
			ИначеЕсли  СтрокаТаблицы.ВидАктивовОбязательств = СтруктураДанных.ВидАктивовОбязательств И НЕ СтрокаТаблицы.ДобавленоВручную Тогда
				МассивКУдалению.Добавить(СтрокаТаблицы.НомерСтрокиТекущий);	
				РасшифровкаКорректировкаПоБалансу.Удалить(СтрокаТаблицы);				
			Иначе
				РасшифровкаКорректировкаПоБалансу.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаМассива Из МассивКУдалению Цикл
			СтрокиКУдалению = РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиПарнойКорректировки",СтрокаМассива));
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				РасшифровкаКорректировкаПоБалансу.Удалить(СтрокаКУдалению);				
			КонецЦикла;
		КонецЦикла;
		
		
	КонецЕсли;
	
	Если СтруктураДанных.ВидЗаполнения = 4 Тогда // Обновить по источнику данных
		Сч = 0;
		МассивКУдалению = Новый Массив;
		Пока Сч < РасшифровкаКорректировкаПоБалансу.Количество() Цикл
			СтрокаТаблицы = РасшифровкаКорректировкаПоБалансу.Получить(Сч);
			Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную ИЛИ СтрокаТаблицы.ИсточникДанных <> СтруктураДанных.ИсточникДанных Тогда
				Сч = Сч + 1;
			ИначеЕсли  СтрокаТаблицы.ИсточникДанных = СтруктураДанных.ИсточникДанных И НЕ СтрокаТаблицы.ДобавленоВручную Тогда
				МассивКУдалению.Добавить(СтрокаТаблицы.НомерСтрокиТекущий);	
				РасшифровкаКорректировкаПоБалансу.Удалить(СтрокаТаблицы);				
			Иначе
				РасшифровкаКорректировкаПоБалансу.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаМассива Из МассивКУдалению Цикл
			СтрокиКУдалению = РасшифровкаКорректировкаПоБалансу.НайтиСтроки(Новый Структура("НомерСтрокиПарнойКорректировки",СтрокаМассива));
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				РасшифровкаКорректировкаПоБалансу.Удалить(СтрокаКУдалению);				
			КонецЦикла;
		КонецЦикла;
		
		
	КонецЕсли;
	
	КэшРезультатовРасчетаИсточников = Новый Соответствие;
	
	ГраницаНач = НачалоДня(ДобавитьМесяц(Дата, -12));
    ГраницаКон = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
	СтрПар.ОтборВОтчете  = ПолучитьТаблицуОтбора();
	
	РезультатЗапросаНастроек = бит_му_ОбщегоНазначения.ПолучитьНастройкиРасчетаОтложенныхНалоговРасширенная(СтруктураДанных);
	
	ВыборкаВидАО = РезультатЗапросаНастроек.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	     
	// Номера строк хранятся в отдельных реквизитах, т.к. табличная часть содержит расширенные данные с детализацией пообъектно,
	// а нумерация строк нужна на более высоком уровне детализации аналитик - в дереве значений
	МаксНомерСтроки = ПолучитьМаксимальныйНомерСтроки("РасшифровкаКорректировкаПоБалансу");
	СчетчикОсновной 				= МаксНомерСтроки-2;
	СчетчикЗеркальныхКорректировок 	= МаксНомерСтроки-1;
	
	Пока ВыборкаВидАО.Следующий() Цикл
		ВидАктивовОбязательств 	= ВыборкаВидАО.ВидАктивовОбязательств;
			
		ВыборкаТипНастройки = ВыборкаВидАО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока  ВыборкаТипНастройки.Следующий() Цикл
			
			ТипНастройки = ВыборкаТипНастройки.ТипНастройки;
			
			ВыборкаИсточники = ВыборкаТипНастройки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаИсточники.Следующий() Цикл
								
				ИсточникДанных 			= ВыборкаИсточники.ИсточникДанных;	
				ИсточникДанныхДляВычета = ВыборкаИсточники.ИсточникДанныхДляВычета;
				
				// Получение двух ТЗ с данными по источникам
				ТаблицаПоИсточнику 			=  Новый ТаблицаЗначений;
				ТаблицаПоИсточникуДляВычета =  Новый ТаблицаЗначений;
				
				Если ЗначениеЗаполнено(ИсточникДанных) Тогда
					ТаблицаПоИсточнику = КэшРезультатовРасчетаИсточников.Получить(ИсточникДанных);
					Если ТаблицаПоИсточнику = Неопределено Тогда
						ТаблицаПоИсточнику = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанных, ГраницаНач, ГраницаКон, СтрПар);
						
						УстановитьЗнакВТаблице(ИсточникДанных, ТаблицаПоИсточнику);
					
						
						КэшРезультатовРасчетаИсточников.Вставить(ИсточникДанных,ТаблицаПоИсточнику); 
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИсточникДанныхДляВычета) Тогда
					ТаблицаПоИсточникуДляВычета = КэшРезультатовРасчетаИсточников.Получить(ИсточникДанныхДляВычета);
					Если ТаблицаПоИсточникуДляВычета = Неопределено Тогда
						ТаблицаПоИсточникуДляВычета = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанныхДляВычета, ГраницаНач, ГраницаКон, СтрПар);
						
						УстановитьЗнакВТаблице(ИсточникДанныхДляВычета, ТаблицаПоИсточникуДляВычета);

						
						КэшРезультатовРасчетаИсточников.Вставить(ИсточникДанныхДляВычета,ТаблицаПоИсточникуДляВычета); 
					КонецЕсли;
				КонецЕсли;				
				
				
				// Формирование сводной таблицы по источникам
				ТаблицаКорректировок = СформироватьТаблицуКорректировокПоИсточникам(ТаблицаПоИсточнику, ТаблицаПоИсточникуДляВычета);
				
				Если ТаблицаКорректировок.Количество() Тогда
					СчетчикОсновной					= СчетчикОсновной + 2;
					СчетчикЗеркальныхКорректировок 	= СчетчикЗеркальныхКорректировок + 2;
					
					
					// Заполнение табличной части документа				
					Для Каждого Строка Из ТаблицаКорректировок Цикл
						
						СтрокаДобавленная = РасшифровкаКорректировкаПоБалансу.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДобавленная,Строка);
						СтрокаДобавленная.ИсточникДанных 			= ИсточникДанных;
						СтрокаДобавленная.ИсточникДанныхДляВычета 	= ИсточникДанныхДляВычета;
						СтрокаДобавленная.ВидАктивовОбязательств 	= ВидАктивовОбязательств;
						
						СтрокаЗеркальнаяКорректировка = РасшифровкаКорректировкаПоБалансу.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗеркальнаяКорректировка,СтрокаДобавленная);
						СтрокаЗеркальнаяКорректировка.ВидАктивовОбязательств 			= ВыборкаИсточники.ВидАктивовОбязательствДляРекласса;					
						СтрокаЗеркальнаяКорректировка.ЗеркальнаяКорректировка 			= Истина;
						СтрокаЗеркальнаяКорректировка.НомерСтрокиПарнойКорректировки 	= СчетчикОсновной;
						СтрокаЗеркальнаяКорректировка.НомерСтрокиТекущий			 	= СчетчикЗеркальныхКорректировок;
						СтрокаЗеркальнаяКорректировка.СуммаКорректировки 				= -1 * СтрокаДобавленная.СуммаКорректировки;
						
						СтрокаДобавленная.НомерСтрокиПарнойКорректировки 	= СчетчикЗеркальныхКорректировок;
						СтрокаДобавленная.НомерСтрокиТекущий			 	= СчетчикОсновной;
						
					КонецЦикла;	
				КонецЕсли;
				
			КонецЦикла;			
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Функция СформироватьТаблицуКорректировокПоИсточникам(ТаблицаПоИсточнику, ТаблицаПоИсточникуДляВычета)
	
	
	ТаблицаКорректировок = РасшифровкаКорректировкаПоБалансу.Выгрузить();
	ТаблицаКорректировок.Очистить();
	ТаблицаКорректировок.Колонки.СуммаКорректировки.Имя = "Сумма";
	ТаблицаКорректировок.Колонки.Добавить("СуммаИсх");
	ТаблицаКорректировок.Колонки.Добавить("СуммаВычет");
	
	Для Каждого СтрокаПоИсточнику Из ТаблицаПоИсточнику Цикл
		ДобавленнаяСтрока = ТаблицаКорректировок.Добавить();    
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,СтрокаПоИсточнику); 
		ДобавленнаяСтрока.СуммаИсх = ДобавленнаяСтрока.Сумма;
	КонецЦикла;
	
	Для Каждого СтрокаПоИсточнику Из ТаблицаПоИсточникуДляВычета Цикл
		ДобавленнаяСтрока = ТаблицаКорректировок.Добавить();    
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,СтрокаПоИсточнику); 
		ДобавленнаяСтрока.СуммаВычет = ДобавленнаяСтрока.Сумма;		
		ДобавленнаяСтрока.Сумма = -1 * ДобавленнаяСтрока.Сумма;
	КонецЦикла;  
	
	ТаблицаКорректировок.Колонки.Сумма.Имя = "СуммаКорректировки";
	ТаблицаКорректировок.Свернуть("Объект","СуммаКорректировки,СуммаИсх,СуммаВычет");		

	МассивКУдалению = Новый Массив;
	Для Каждого Стр Из ТаблицаКорректировок Цикл
		Если Стр.СуммаКорректировки = 0 Тогда
			МассивКУдалению.Добавить(Стр);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из МассивКУдалению Цикл
		ТаблицаКорректировок.Удалить(Стр);	
	КонецЦикла;
	
	Возврат ТаблицаКорректировок;
	
КонецФункции

Процедура ПеренумероватьСтрокиКорректировки() Экспорт
	
	ТекущийНомер = Неопределено;

	СчетчикОсновной 				= -1;
	СчетчикЗеркальныхКорректировок 	=  0;
	
	Для Каждого Стр Из РасшифровкаКорректировкаПоБалансу Цикл
		Стр.Перенумерован = Ложь;
		Если Стр.ЗеркальнаяКорректировка Тогда
			Стр.НомерСтрокиТекущий 				= Стр.НомерСтрокиПарнойКорректировки;
		КонецЕсли;
	КонецЦикла;
	
	
	РасшифровкаКорректировкаПоБалансу.Сортировать("НомерСтрокиТекущий, ВидАктивовОбязательств, ИсточникДанных, ИсточникДанныхДляВычета, ЗеркальнаяКорректировка возр"); 	
	
	Для Каждого Стр Из РасшифровкаКорректировкаПоБалансу Цикл
				
		Если ТекущийНомер <> Стр.НомерСтрокиТекущий Тогда
			СчетчикОсновной 				= СчетчикОсновной + 2;
			СчетчикЗеркальныхКорректировок 	= СчетчикЗеркальныхКорректировок + 2;
			ТекущийНомер = Стр.НомерСтрокиТекущий;			
		КонецЕсли;
				
		Если Стр.ЗеркальнаяКорректировка Тогда
			Стр.НомерСтрокиТекущий 				= СчетчикЗеркальныхКорректировок;
			Стр.НомерСтрокиПарнойКорректировки 	= СчетчикОсновной;
		Иначе
			Стр.НомерСтрокиТекущий 				= СчетчикОсновной;
			Стр.НомерСтрокиПарнойКорректировки 	= СчетчикЗеркальныхКорректировок;					
		КонецЕсли;
		
		Стр.Перенумерован = Истина;				
		
	КонецЦикла;
	
	РасшифровкаКорректировкаПоБалансу.Сортировать("НомерСтрокиТекущий, ВидАктивовОбязательств, ИсточникДанных, ИсточникДанныхДляВычета, Объект возр"); 
	
	ТекущийНомер = 0;
	СчетчикПООбъекту = 0;
	Для Каждого Стр Из РасшифровкаКорректировкаПоБалансу Цикл
		
		Если ТекущийНомер <> Стр.НомерСтрокиТекущий Тогда
			ТекущийНомер =  Стр.НомерСтрокиТекущий;
			СчетчикПООбъекту = 1;
		Иначе
			СчетчикПООбъекту = СчетчикПООбъекту + 1;			
		КонецЕсли;
		
		Стр.НомерПоОбъекту = Строка(Стр.НомерСтрокиТекущий) + "." + СчетчикПООбъекту;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Функция ПолучитьМаксимальныйНомерСтроки(ИмяТЧ)
	
	МаксНомер = 1;
	Для Каждого СтрокаТЗ Из Ссылка[ИмяТЧ] Цикл
		МаксНомер = ?(МаксНомер < СтрокаТЗ.НомерСтрокиТекущий, СтрокаТЗ.НомерСтрокиТекущий, МаксНомер);
	КонецЦикла;
	
	МаксНомер = МаксНомер + 1;
	
	Возврат МаксНомер;
	
КонецФункции

Процедура ЗаполнитьТЧРасшифровкаПостоянныеРазницы(СтруктураДанных) Экспорт
	
	Если СтруктураДанных.ВидЗаполнения =  1 Тогда  // По организации 
		РасшифровкаПостоянныеРазницы.Очистить();
	КонецЕсли;
	
	Если СтруктураДанных.ВидЗаполнения =  2 Тогда  // Обновить 	
		Сч = 0;
		Пока Сч < РасшифровкаПостоянныеРазницы.Количество() Цикл
			СтрокаТаблицы = РасшифровкаПостоянныеРазницы.Получить(Сч);
			Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную Тогда
				Сч = Сч + 1;
			Иначе
				РасшифровкаПостоянныеРазницы.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Если СтруктураДанных.ВидЗаполнения = 3 Тогда // Обновить по виду А/О
		Сч = 0;
		Пока Сч < РасшифровкаПостоянныеРазницы.Количество() Цикл
			СтрокаТаблицы = РасшифровкаПостоянныеРазницы.Получить(Сч);
			Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную ИЛИ СтрокаТаблицы.ВидАктивовОбязательств <> СтруктураДанных.ВидАктивовОбязательств Тогда
				Сч = Сч + 1;				
			Иначе
				РасшифровкаПостоянныеРазницы.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	
	Если СтруктураДанных.ВидЗаполнения = 4 Тогда // Обновить по источнику
		Сч = 0;
		Пока Сч < РасшифровкаПостоянныеРазницы.Количество() Цикл
			СтрокаТаблицы = РасшифровкаПостоянныеРазницы.Получить(Сч);
			
			Если СтруктураДанных.Свойство("ТипыНастройки") Тогда // Отбор по указанному источнику			
				Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную ИЛИ СтрокаТаблицы.ИсточникДанных <> СтруктураДанных.ИсточникДанных Тогда
					Сч = Сч + 1;				
				Иначе
					РасшифровкаПостоянныеРазницы.Удалить(СтрокаТаблицы);
				КонецЕсли;
			Иначе  // Отбор по всем РСБУ
				Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную ИЛИ СтрокаТаблицы.ИсточникДанных <> "Постоянные разницы по РСБУ" Тогда
					Сч = Сч + 1;				
				Иначе
					РасшифровкаПостоянныеРазницы.Удалить(СтрокаТаблицы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;
	
	
	Если СтруктураДанных.ВидЗаполнения = 4.1 Тогда // Обновить по источнику / консолидированные
		Сч = 0;
		Пока Сч < РасшифровкаПостоянныеРазницы.Количество() Цикл
			СтрокаТаблицы = РасшифровкаПостоянныеРазницы.Получить(Сч);
			Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную ИЛИ СтрокаТаблицы.ИсточникДанных <> "Постоянные разницы по РСБУ" ИЛИ СтрокаТаблицы.ВидАктивовОбязательств <> СтруктураДанных.ВидАктивовОбязательств Тогда
				Сч = Сч + 1;				
			Иначе
				РасшифровкаПостоянныеРазницы.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	
	Если СтруктураДанных.ВидЗаполнения = 5 ИЛИ СтруктураДанных.ВидЗаполнения = 6 Тогда // Обновить типу
		Сч = 0;
		Пока Сч < РасшифровкаПостоянныеРазницы.Количество() Цикл
			СтрокаТаблицы = РасшифровкаПостоянныеРазницы.Получить(Сч);
			Если СтрокаТаблицы.ДобавленоВручную ИЛИ СтрокаТаблицы.ВидДобавленВручную ИЛИ СтрокаТаблицы.ТипНастройки <> СтруктураДанных.ТипНастройки Тогда
				Сч = Сч + 1;				
			Иначе
				РасшифровкаПостоянныеРазницы.Удалить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	КэшРезультатовРасчетаИсточников = Новый Соответствие;
	
	ГраницаНач = НачалоДня(ДобавитьМесяц(Дата, -12));
    ГраницаКон = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
	СтрПар.ОтборВОтчете  = ПолучитьТаблицуОтбора();
	
	РезультатЗапросаНастроек = бит_му_ОбщегоНазначения.ПолучитьНастройкиРасчетаОтложенныхНалоговРасширенная(СтруктураДанных);
	
	ВыборкаВидАО = РезультатЗапросаНастроек.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СчетчикОсновной 				= ПолучитьМаксимальныйНомерСтроки("РасшифровкаПостоянныеРазницы");
	
	Пока ВыборкаВидАО.Следующий() Цикл
		ВидАктивовОбязательств 	= ВыборкаВидАО.ВидАктивовОбязательств;
			
		ВыборкаТипНастройки = ВыборкаВидАО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока  ВыборкаТипНастройки.Следующий() Цикл
			
			ТипНастройки = ВыборкаТипНастройки.ТипНастройки;
			
			ВыборкаИсточники = ВыборкаТипНастройки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ТипНастройки = Перечисления.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза Тогда
				СчетчикОсновной					= СчетчикОсновной + 1;
			КонецЕсли;
			
			
			Пока ВыборкаИсточники.Следующий() Цикл	
				Если ТипНастройки <> Перечисления.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза  Тогда
					СчетчикОсновной					= СчетчикОсновной + 1;
				КонецЕсли;
				
				
				ИсточникДанных 			= ВыборкаИсточники.ИсточникДанных;	
				ИсточникДанныхДляВычета = ВыборкаИсточники.ИсточникДанныхДляВычета;
				
				// Получение двух ТЗ с данными по источникам
				ТаблицаПоИсточнику 			=  Новый ТаблицаЗначений;
				ТаблицаПоИсточникуДляВычета =  Новый ТаблицаЗначений;
				
				Если ЗначениеЗаполнено(ИсточникДанных) Тогда
					ТаблицаПоИсточнику = КэшРезультатовРасчетаИсточников.Получить(ИсточникДанных);
					Если ТаблицаПоИсточнику = Неопределено Тогда
						ТаблицаПоИсточнику = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанных, ГраницаНач, ГраницаКон, СтрПар);
						УстановитьЗнакВТаблице(ИсточникДанных, ТаблицаПоИсточнику);
	
						КэшРезультатовРасчетаИсточников.Вставить(ИсточникДанных); 
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИсточникДанныхДляВычета) Тогда
					ТаблицаПоИсточникуДляВычета = КэшРезультатовРасчетаИсточников.Получить(ИсточникДанныхДляВычета);
					Если ТаблицаПоИсточникуДляВычета = Неопределено Тогда
						ТаблицаПоИсточникуДляВычета = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанныхДляВычета, ГраницаНач, ГраницаКон, СтрПар);
						
						УстановитьЗнакВТаблице(ИсточникДанныхДляВычета, ТаблицаПоИсточникуДляВычета);

						КэшРезультатовРасчетаИсточников.Вставить(ИсточникДанныхДляВычета,ТаблицаПоИсточникуДляВычета); 
					КонецЕсли;
				КонецЕсли;
				
				
					// Формирование сводной таблицы по источникам
				ТаблицаКорректировок = СформироватьТаблицуКорректировокПРПоИсточникам(ТаблицаПоИсточнику, ТаблицаПоИсточникуДляВычета, ТипНастройки);
				
				Если ТаблицаКорректировок.Количество() Тогда
								
					// Заполнение табличной части документа				
					Для Каждого Строка Из ТаблицаКорректировок Цикл
						
						//BIT AMerkulov 06-07-2015 ++
						Если ТипНастройки = Перечисления.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза Тогда
							Продолжить;
						КонецЕсли;
						
						
						СтрокаДобавленная = РасшифровкаПостоянныеРазницы.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДобавленная,Строка);
						//Если ТипНастройки = Перечисления.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза Тогда
						//	
						//	СтрокаДобавленная.ИсточникДанных 			= "Постоянные разницы по РСБУ";
						//	СтрокаДобавленная.ИсточникДанныхДляВычета 	= Неопределено;
						//	
						//Иначе
							СтрокаДобавленная.ИсточникДанных 			= ИсточникДанных;
							СтрокаДобавленная.ИсточникДанныхДляВычета 	= ИсточникДанныхДляВычета;
						//КонецЕсли;
						СтрокаДобавленная.ВидАктивовОбязательств 		= ВидАктивовОбязательств;
						СтрокаДобавленная.НомерСтрокиТекущий			= СчетчикОсновной;
						СтрокаДобавленная.ТипНастройки					= ТипНастройки;
						//BIT AMerkulov 06-07-2015 --
						
					КонецЦикла;	
					
				КонецЕсли;
				
			КонецЦикла;			
			
		КонецЦикла;
		
	КонецЦикла;
	
	РасшифровкаПостоянныеРазницы.Свернуть("НомерСтрокиТекущий, ВидАктивовОбязательств, ИсточникДанных, ИсточникДанныхДляВычета, Объект, ДобавленоВручную, ВидДобавленВручную, ДобавленоВручнуюПоОбъекту, ИДСтроки, ТипНастройки", "СуммаКорректировки"); 	
		
КонецПроцедуры

Функция СформироватьТаблицуКорректировокПРПоИсточникам(ТаблицаПоИсточнику, ТаблицаПоИсточникуДляВычета, ТипНастройки)
	
	
	ТаблицаКорректировок = РасшифровкаПостоянныеРазницы.Выгрузить();
	ТаблицаКорректировок.Очистить();
	Если ТипНастройки = Перечисления.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза Тогда
		ТаблицаКорректировок.Колонки.СуммаКорректировки.Имя = "СуммаПр";
	Иначе
		ТаблицаКорректировок.Колонки.СуммаКорректировки.Имя = "Сумма";
	КонецЕсли;
	
	
	Для Каждого СтрокаПоИсточнику Из ТаблицаПоИсточнику Цикл
		ДобавленнаяСтрока = ТаблицаКорректировок.Добавить();    
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,СтрокаПоИсточнику); 
	КонецЦикла;
	
	Для Каждого СтрокаПоИсточнику Из ТаблицаПоИсточникуДляВычета Цикл
		ДобавленнаяСтрока = ТаблицаКорректировок.Добавить();    
		ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,СтрокаПоИсточнику); 
		ДобавленнаяСтрока.Сумма = -1 * ДобавленнаяСтрока.Сумма;
	КонецЦикла;  	
	 
	
	Если ТипНастройки = Перечисления.бит_РОН_ТипыНастройкиРасчетаОтложенныхНалоговМСФО.НалоговаяБалансоваяБаза Тогда
		ТаблицаКорректировок.Колонки.СуммаПр.Имя = "СуммаКорректировки";
	Иначе	
		ТаблицаКорректировок.Колонки.Сумма.Имя = "СуммаКорректировки";
	КонецЕсли;
	
	
	ТаблицаКорректировок.Свернуть("Объект","СуммаКорректировки");		

	МассивКУдалению = Новый Массив;
	Для Каждого Стр Из ТаблицаКорректировок Цикл
		Если Стр.СуммаКорректировки = 0 Тогда
			МассивКУдалению.Добавить(Стр);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из МассивКУдалению Цикл
		ТаблицаКорректировок.Удалить(Стр);	
	КонецЦикла;
	
	
	Возврат ТаблицаКорректировок;
	
КонецФункции

Процедура УстановитьЗнакВТаблице(ИсточникДанных, ТаблицаПоИсточнику)
	ПолеСуммы = ИсточникДанных.Поля.Найти("Сумма", "Синоним");
	Если ПолеСуммы <> Неопределено И Найти(ПолеСуммы.Имя,"Кт") > 0 Тогда						
		Для Каждого Стр Из ТаблицаПоИсточнику Цикл
			Стр.Сумма = -1*Стр.Сумма;	
		КонецЦикла;						
	КонецЕсли;		
КонецПроцедуры

// agoncharenko #1886 05102015 Начало
Функция ОпределитьКонсолидированностьОрганизации()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация,
	               |	МАКСИМУМ(бит_му_СоставПериметровКонсолидацииСрезПоследних.ТипКонсолидации) КАК ТипКонсолидации
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(
	               |			&Период,
	               |			Организация = &Организация
	               |				И ТипКонсолидации = &КонсолидирующийТип) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |ГДЕ
	               |	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Период
	               |			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = &ПустаяДата)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", 			  Дата);
	Запрос.УстановитьПараметр("ПустаяДата",			  Дата('00010101'));
	Запрос.УстановитьПараметр("Организация",		  Организация);
	Запрос.УстановитьПараметр("КонсолидирующийТип",	  Перечисления.бит_му_ТипыКонсолидации.Консолидирующая);
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаОрганизаций.Количество() > 0 И ТаблицаОрганизаций[0]. ТипКонсолидации = Перечисления.бит_му_ТипыКонсолидации.Консолидирующая Тогда
		 Возврат Истина;
	Иначе		 
		 Возврат Ложь;
	КонецЕсли;
	
КонецФункции
// agoncharenko #1886 Конец

#Область Инициализация

мКоличествоСубконтоМУ = 4;

мОрганизацияКонсолидирующая = Ложь; // agoncharenko #1886 05102015 Начало

#КонецОбласти

#КонецЕсли
