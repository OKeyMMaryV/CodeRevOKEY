////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним реквизиты формы из параметров.
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,
		"Дата, ИмяТаблицы, Организация, СчетУчета, Номенклатура,
		|Субконто, СчетДоходов, СчетРасходов,
		|СчетУчетаНДСПоРеализации, СуммаНДС, ДокументБезНДС
		//izhtc alena 18.08.2015(
		|,Субконто2, Субконто3");
		//izhtc alena 18.08.2015)
		
	УстановитьФункциональныеОпцииФормы();
	
	НаименованиеНоменклатуры = "";
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ДанныеОбъекта = Новый Структура("Дата, Организация", Дата, Организация);
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
			Номенклатура, ДанныеОбъекта, Ложь);
		НаименованиеНоменклатуры = СведенияОНоменклатуре.Наименование;
		НоменклатурнаяГруппа	 = СведенияОНоменклатуре.НоменклатурнаяГруппа;
	ИначеЕсли ИспользоватьОднуНоменклатурнуюГруппу Тогда
		НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
	КонецЕсли;
	
	Элементы.СчетУчетаНДСПоРеализации.Видимость = Не ДокументБезНДС;
	
	// Снимем видимость с полей, которые не применяются для текущего вида операции.
	ЭтоУслуги 	= ИмяТаблицы = "Услуги";
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Счета учета: %1'"),
		НаименованиеНоменклатуры);
	
	Элементы.СчетУчетаНДСПоРеализации.ОтметкаНезаполненного = СуммаНДС <> 0;
	
	Если ЭтоУслуги Тогда
		Элементы.СчетУчета.Видимость = Ложь;
		Элементы.СчетРасходов.ОтметкаНезаполненного = ТребуетсяСчетРасходовПоОказаниюУслуг;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
		СчетУчетаЗабалансовый = СвойстваСчетаУчета.Забалансовый;
	КонецЕсли;
	
	УстановитьДоступностьСубконтоНаСервере();
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Документ.РеализацияТоваровУслуг",
		"ФормаРедактированияСтрокиТоварыУслуги",
		НСтр("ru='Новости: Реализация (акт, накладная)'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) 

	Если ЗавершениеРаботы И (Модифицированность ИЛИ ПеренестиВДокумент) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ПеренестиВДокумент Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;

	Если ПеренестиВДокумент И НЕ Отказ Тогда
		Отказ = НЕ ПроверитьЗаполнениеНаКлиенте();
	КонецЕсли;

	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ПеренестиВДокумент Тогда
		СтруктураРезультат = Новый Структура("СчетУчета,
			|СчетДоходов, СчетРасходов, СчетУчетаНДСПоРеализации,
		//izhtc alena 18.08.2015(
			//|Субконто, ИмяТаблицы");
			|Субконто,Субконто2, Субконто3, ИмяТаблицы");
		//izhtc alena 18.08.2015)
		
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЭтаФорма);
		ОповеститьОВыборе(СтруктураРезультат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ФормаРедактированияСтроки_Закрыть" И Источник = ВладелецФормы Тогда
		// Сообщение от основной формы документа при нажатии там Esc.
		// Сбрасываем флаг модифицированности и закрываем форму редактирования строки без вопросов.
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета);
	СчетУчетаЗабалансовый = СвойстваСчета.Забалансовый;

КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	УстановитьДоступностьСубконтоНаСервере();
	
	Если Не ЭтоУслуги И (НЕ СчетДоходовВедетсяУчетПоНоменклатурнымГруппам)
		И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоПрочимДоходамИРасходам(СчетДоходов) Тогда
		
		Субконто = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РеализацияПрочегоИмущества");
		
	КонецЕсли;
	
	Если СчетДоходовВедетсяУчетПоНоменклатурнымГруппам И НЕ ЗначениеЗаполнено(Субконто) Тогда
		Субконто = НоменклатурнаяГруппа;
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДоходов);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	//ОК Калинин М. 260313
	УстановитьТипСубконто(3, СчетДоходов);
	//ОК Калинин М.
		
	// БИТ AMerkulov 09012014 ++ /Возможность выбора второго субконто
	Если НЕ (ДанныеСчета.КоличествоСубконто > 1 
		И ДанныеСчета.ВидСубконто1 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы")) Тогда
		УстановитьТипСубконто(2, СчетДоходов);
	Иначе
		Субконто2 = Неопределено;
	КонецЕсли;
	// БИТ AMerkulov --		
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// Субконто

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Субконто");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СчетДоходовВедетсяУчетПоНоменклатурнымГруппам", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетДоходов, СчетРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетДоходов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетРасходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетУчетаНДСПоРеализации

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетУчетаНДСПоРеализации");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// СчетРасходов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СчетРасходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоУслуги", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТребуетсяСчетРасходовПоОказаниюУслуг", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтаФорма, Организация, Дата);
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	
	ТребуетсяСчетРасходовПоОказаниюУслуг = 
		РегистрыНакопления.РеализацияУслуг.ТребуетсяСчетРасходовПоОказаниюУслуг(Дата, Организация);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()

	Отказ = Ложь;

	Если НЕ ЭтоУслуги Тогда

		Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет учета'"));
			Поле = "СчетУчета";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;

	КонецЕсли;

	Если ЭтоУслуги ИЛИ НЕ СчетУчетаЗабалансовый Тогда
		Если НЕ ЗначениеЗаполнено(СчетДоходов) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет доходов'"));
			Поле = "СчетДоходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
	КонецЕсли;

	Если ПлательщикНДФЛ 
		И ЗначениеЗаполнено(СчетДоходов)
		И СчетДоходовВедетсяУчетПоНоменклатурнымГруппам
		И НЕ ЗначениеЗаполнено(Субконто) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Субконто'"));
		Поле = "Субконто";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;

	Если НЕ ЭтоУслуги ИЛИ ТребуетсяСчетРасходовПоОказаниюУслуг Тогда
		Если НЕ ЗначениеЗаполнено(СчетРасходов) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет расходов'"));
			Поле = "СчетРасходов";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаНДС <> 0 И НЕ СчетУчетаЗабалансовый Тогда
		Если НЕ ЗначениеЗаполнено(СчетУчетаНДСПоРеализации) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет учета НДС по реализации'"));
			Поле = "СчетУчетаНДСПоРеализации";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
	КонецЕсли;

	Возврат Не Отказ;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)
	
	Результат = БухгалтерскийУчетКлиентСервер.НовыеПараметрыУстановкиСвойствСубконто();
	
	Результат.ПоляФормы.Субконто1   = "Субконто";
	Результат.ПоляОбъекта.Субконто1 = "Субконто";
	Результат.ПоляОбъекта.СчетУчета = "СчетДоходов";
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Организация);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УстановитьДоступностьСубконтоНаСервере()
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, ЭтотОбъект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	Если ЗначениеЗаполнено(СчетДоходов) Тогда
		СчетДоходовВедетсяУчетПоНоменклатурнымГруппам =
			(БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДоходов).ВидСубконто1
				= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	Иначе
		
		СчетДоходовВедетсяУчетПоНоменклатурнымГруппам = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

//izhtc alena 18.08.2015(
&НаКлиенте 
Процедура УстановитьТипСубконто(номер, Счет)
		
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
    СубконтоИмя="Субконто"+строка(номер);
	
	Если ДанныеСчета.КоличествоСубконто >= номер Тогда
		ЭтаФорма[СубконтоИмя] = ДанныеСчета["ВидСубконто" + номер + "ТипЗначения"].ПривестиЗначение();
		ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + номер + "ТипЗначения"];
		Элементы[СубконтоИмя].ОграничениеТипа = ТипЗначенияСубконто;
	Иначе                                                           
		ЭтаФорма[СубконтоИмя] = Неопределено;
		Элементы[СубконтоИмя].ОграничениеТипа =Новый ОписаниеТипов("Неопределено");
	КонецЕсли;

	Элементы[СубконтоИмя].Доступность = НЕ (НЕ ЗначениеЗаполнено(Счет) ИЛИ (ДанныеСчета.КоличествоСубконто < номер));
КонецПроцедуры

&НаКлиенте
Процедура Субконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Субконто2) Тогда 
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДоходов);
		
		Если ДанныеСчета.КоличествоСубконто > 1 И ДанныеСчета.ВидСубконто2 = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы") Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
			Массив.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
			Массив.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
			ОписаниеТиповСубконто2 = Новый ОписаниеТипов(Массив);
			Элемент.ОграничениеТипа = ОписаниеТиповСубконто2;
		//Иначе
		//	Элемент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		КонецЕсли;	
	Иначе 
		Массив = Новый Массив;		
		Массив.Добавить(ТипЗнч(Субконто2));
		ОписаниеТиповСубконто2 = Новый ОписаниеТипов(Массив);
		Элемент.ОграничениеТипа = ОписаниеТиповСубконто2;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Субконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Субконто3) Тогда 
		Массив = Новый Массив;		
		Массив.Добавить(ТипЗнч(Субконто3));
		ОписаниеТиповСубконто3 = Новый ОписаниеТипов(Массив);
		Элемент.ОграничениеТипа = ОписаниеТиповСубконто3;
	//Иначе
	//	Элемент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
КонецПроцедуры
//izhtc alena 18.08.2015)
