#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Переменная, хранящее значение структуры шапки документа.
	Перем СтруктураШапкиДокумента;
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов
	// ВидыКурсов = Новый Структура("Упр,Регл,МУ");
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	// СтруктураКурсыВалют.Вставить("Документ",СтруктураКурсыВалют.МУ);
	
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	Если НЕ ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = НСтр("ru='Для организации ""%1"" не указана валюта международного учета!'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,СтруктураШапкиДокумента.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
		                                                  ЭтотОбъект,
														  ,
														  , 
														  Отказ);
	                               
	КонецЕсли; 
	
	// Поиск уже выполненных начислений амортизации.
	НайтиЗадвоенныеНачисления(Отказ,Заголовок);
	
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц,СтруктураШапкиДокумента,Отказ,Заголовок);
	
	// Получим исторические(на дату принятия к учету) курсы валют по каждому НМА.
	МассивОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	МассивОС = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивОС);
	ИсторическиеКурсы = ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, КонецМесяца(СтруктураШапкиДокумента.Дата), СтруктураКурсыВалют);

	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц, СтруктураКурсыВалют,ИсторическиеКурсы, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("ОсновноеСредство");
	
	// Проверим наличие дублей в табличной части "ОсновныеСредства".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 ,"ОсновныеСредства"
																	 ,СтруктураНеДублирующихсяПолей
																	 ,Отказ);
																	 
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция формирует массив недоступных параметров ОС в зависимости от
// от метода начисления амортизации.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОсновныеСредства.
// 
// Возвращаемое значение:
//  Массив;
// 
Функция СформироватьМассивНедоступныхПараметров(ТекущаяСтрока) Экспорт
	
	МассивНедоступныхПараметров = Новый Массив;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат МассивНедоступныхПараметров;
	КонецЕсли;
	
	МенеджерПеречисления	   = Перечисления.бит_му_МетодыНачисленияАмортизации;
	МетодНачисленияАмортизации = ТекущаяСтрока.МетодНачисленияАмортизации;
	
	Если МетодНачисленияАмортизации = МенеджерПеречисления.Линейный
		Или МетодНачисленияАмортизации = МенеджерПеречисления.УменьшаемогоОстатка Тогда
		
		МассивНедоступныхПараметров.Добавить("ПредполагаемыйОбъемПродукции");
		
	КонецЕсли;
	
	Возврат МассивНедоступныхПараметров;
	
КонецФункции // СформироватьМассивНедоступныхПараметров()

// Процедура очищает недоступные параметры ОС в зависимости от метода начисления амортизации.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОсновныеСредства.
// 
Процедура ОчиститьНедоступныеПараметрыОС(ТекущаяСтрока) Экспорт
	
	// Получим массив недоступных параметров.
	МассивНедоступныхПараметров = СформироватьМассивНедоступныхПараметров(ТекущаяСтрока);
	
	Для Каждого ТекИмяПараметра Из МассивНедоступныхПараметров Цикл
		ТекущаяСтрока[ТекИмяПараметра] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьНедоступныеПараметрыОС()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура выполняет валютные пересчеты из валюты МУ в валюту документа.
// 
// Параметры:
//  ПараметрыОС
// 
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыОС) Экспорт
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ВидыКурсов = Новый Структура("МУ, Документ");
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	МассивСуммДляПересчета = Новый Массив;
	МассивСуммДляПересчета.Добавить("СуммаАмортизации");
	МассивСуммДляПересчета.Добавить("ПервоначальнаяСтоимость");
	МассивСуммДляПересчета.Добавить("НачисленнаяАмортизация");
	МассивСуммДляПересчета.Добавить("СуммаОбесценения");
	МассивСуммДляПересчета.Добавить("ЛиквидационнаяСтоимость");
	
	МассивОС = Новый Массив; 
	Для каждого КлючИЗначение Из ПараметрыОС Цикл
		МассивОС.Добавить(КлючИЗначение.Ключ);
	КонецЦикла; 
	ТаблицаДанных = ПодготовитьТаблицуДатПринятияОС(МассивОС);
	ТаблицаПериодов = ТаблицаДанных.Скопировать(, "Период");
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалют);
	
	СоответствиеКурсовИОС = Новый Соответствие;
	
	Для каждого Строка Из ТаблицаДанных Цикл
		СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	КонецЦикла; 

	Для Каждого КлючИЗначение Из ПараметрыОС Цикл
		
		КурсыМУ 	  = СоответствиеКурсовИОС[КлючИЗначение.Ключ].МУ;
		КурсыДокумент = СоответствиеКурсовИОС[КлючИЗначение.Ключ].Документ;
		
		ВНА = КлючИЗначение.Значение;
		
		Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
			
			
			ВНА[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ВНА[ИмяСуммы]
							,КурсыМУ.Валюта
							,КурсыДокумент.Валюта
							,КурсыМУ.Курс
							,КурсыДокумент.Курс
							,КурсыМУ.Кратность
							,КурсыДокумент.Кратность);
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль()

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийНачислениеАмортизацииОС.ОсновныеСредства Тогда
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	Иначе
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("Организация"		  , Организация);                             
	ПараметрыПодбора.Вставить("Режим"			  , Перечисления.бит_му_РежимыПодбораВНА.НачислениеАмортизацииОС);
	ПараметрыПодбора.Вставить("ДатаОкончания"	  , КонецМесяца(Дата));
	ПараметрыПодбора.Вставить("МОЛ"				  , МОЛ);
	ПараметрыПодбора.Вставить("Местонахождение"	  , Подразделение);
	ПараметрыПодбора.Вставить("ВидКласса"		  , ВидКласса);	

	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

// Процедура заполняет табличную часть "ОсновныеСредства".
// 
// Параметры:
//  ВыбранноеЗначение - Структура.
//  ЭтоНовыйДокумент  - Булево.
// 
Процедура ЗаполнитьТчОсновныеСредстваПоДаннымПодбора(ВыбранноеЗначение, ЭтоНовыйДокумент = Истина) Экспорт
	
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов, ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	// Получаем параметры и рассчитываем амортизацию.
	МассивОС    = ТаблицаДанных.ВыгрузитьКолонку("ВНА");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивОС);
	
	МоментВремени = ?(ЭтоНовыйДокумент, КонецДня(Дата), Ссылка.МоментВремени());
	ПараметрыОС = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивОС, Организация, МоментВремени, Истина);	
	
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыОС);
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ВНА);
		
		МассивСтрок = ОсновныеСредства.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			// Результат расчета амортизации.
			СтрокаПараметров = ПараметрыОС[СтрокаТаблицы.ВНА];
			// СтрокаПараметров.СуммаАмортизации <> 0
			
			// Новая строка 
			НоваяСтрока = ОсновныеСредства.Добавить();
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ВНА;
			
			Если СтрокаПараметров <> Неопределено Тогда				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПараметров);				
			КонецЕсли; 
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Основное средство ""%1%"" инв. № %2% уже подобрано в строке №%3%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					,СтрокаТаблицы.ВНА
																					,СтрокаТаблицы.ИнвентарныйНомер
																					,НайденнаяСтрока.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных		

КонецПроцедуры // ЗаполнитьТчОсновныеСредстваПоДаннымПодбора()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация, ВидОперации
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
	
	// Заполняет табличную часть "ОсновныеСредства"
	ВыбранноеЗначение = ВыполнитьПодборОС();
	ЗаполнитьТчОсновныеСредстваПоДаннымПодбора(ВыбранноеЗначение);	

КонецПроцедуры // ЗаполнитьДокумент()

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Получим список ОС документа.
	СписокОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(СписокОС, Истина);
	
	СтруктураШапкиДокумента.Вставить("СписокОС", СписокОС);
	
	// Получим Вид класса ОС документа.
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийНачислениеАмортизацииОС.ОсновныеСредства Тогда
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	Иначе
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВидКласса", ВидКласса);
	
КонецПроцедуры

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	// Движения по регистру бухгалтерии бит_Дополнительный_2.
	Запрос = Новый Запрос;
	
    Запрос.УстановитьПараметр("Ссылка",Ссылка);	
	Запрос.УстановитьПараметр("ПараметрКласс",ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	Запрос.УстановитьПараметр("ПараметрНачислятьАмортизацию",ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС);
	Запрос.УстановитьПараметр("ПараметрНачислятьАмортизациюСТекущегоПериода",ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизациюСТекущегоПериода_ОС);
	Запрос.УстановитьПараметр("МоментВремени"   ,КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация"     ,Организация);
	Запрос.УстановитьПараметр("СостояниеПринято",Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыОС.ОсновноеСредство,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПараметрыОС.Параметр = &ПараметрНачислятьАмортизацию
	               |				ТОГДА ПараметрыОС.ЗначениеПараметра
	               |			ИНАЧЕ NULL
	               |		КОНЕЦ) КАК НачислятьАмортизацию,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПараметрыОС.Параметр = &ПараметрНачислятьАмортизациюСТекущегоПериода
	               |				ТОГДА ПараметрыОС.ЗначениеПараметра
	               |			ИНАЧЕ NULL
	               |		КОНЕЦ) КАК НачислятьАмортизациюСТекущегоПериода,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПараметрыОС.Параметр = &ПараметрКласс
	               |				ТОГДА ПараметрыОС.ЗначениеПараметра.ВидКласса
	               |			ИНАЧЕ NULL
	               |		КОНЕЦ) КАК ВидКласса
	               |ПОМЕСТИТЬ ТаблицаПараметров
	               |ИЗ
	               |	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
	               |			&МоментВремени,
	               |			ОсновноеСредство В
	               |					(ВЫБРАТЬ
	               |						бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство
	               |					ИЗ
	               |						Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК бит_му_НачислениеАмортизацииОСОсновныеСредства
	               |					ГДЕ
	               |						бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка = &Ссылка)
	               |				И Организация = &Организация
	               |				И (Параметр = &ПараметрНачислятьАмортизацию
	               |					ИЛИ Параметр = &ПараметрКласс
	               |					ИЛИ Параметр = &ПараметрНачислятьАмортизациюСТекущегоПериода)) КАК ПараметрыОС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПараметрыОС.ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_му_НачислениеАмортизацииОСОсновныеСредства.НомерСтроки,
	               |	бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	               |	бит_му_НачислениеАмортизацииОСОсновныеСредства.СуммаАмортизации КАК СуммаАмортизации,
	               |	бит_му_НачислениеАмортизацииОСОсновныеСредства.ПервоначальнаяСтоимость - бит_му_НачислениеАмортизацииОСОсновныеСредства.НачисленнаяАмортизация - бит_му_НачислениеАмортизацииОСОсновныеСредства.СуммаОбесценения - бит_му_НачислениеАмортизацииОСОсновныеСредства.ЛиквидационнаяСтоимость - бит_му_НачислениеАмортизацииОСОсновныеСредства.СуммаАмортизации КАК БалансоваяСтоимостьПосле,
	               |	бит_му_НачислениеАмортизацииОСОсновныеСредства.СпособОтраженияРасходовПоАмортизации,
	               |	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат,
	               |	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1,
	               |	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2,
	               |	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3,
	               |	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто4,
	               |	ЕСТЬNULL(бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Коэффициент, 0) КАК Коэффициент,
	               |	бит_му_НачислениеАмортизацииОСОсновныеСредства.СчетНачисленияАмортизации,
	               |	ЕСТЬNULL(ПараметрИнвНомер.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	               |	ТаблицаПараметров.ВидКласса КАК ВидКласса,
	               |	ЕСТЬNULL(ТаблицаПараметров.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизацию,
	               |	ЕСТЬNULL(ТаблицаПараметров.НачислятьАмортизациюСТекущегоПериода, ЛОЖЬ) КАК НачислятьАмортизациюСТекущегоПериода,
	               |	ЕСТЬNULL(СостоянияОС.ДатаСостояния, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчету
	               |ИЗ
	               |	Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК бит_му_НачислениеАмортизацииОСОсновныеСредства
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_му_СпособыОтраженияРасходовПоАмортизации.Способы КАК бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы
	               |		ПО бит_му_НачислениеАмортизацииОСОсновныеСредства.СпособОтраженияРасходовПоАмортизации = бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	               |				&МоментВремени,
	               |				ОсновноеСредство В
	               |						(ВЫБРАТЬ
	               |							бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство
	               |						ИЗ
	               |							Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК бит_му_НачислениеАмортизацииОСОсновныеСредства
	               |						ГДЕ
	               |							бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка = &Ссылка)
	               |					И Организация = &Организация) КАК ПараметрИнвНомер
	               |		ПО бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство = ПараметрИнвНомер.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
	               |		ПО бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство = ТаблицаПараметров.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК СостоянияОС
	               |		ПО бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	               |			И (СостоянияОС.Организация = &Организация)
	               |			И (СостоянияОС.Состояние = &СостояниеПринято)
	               |ГДЕ
	               |	бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка = &Ссылка
	               |ИТОГИ
	               |	МАКСИМУМ(СуммаАмортизации),
				   |    СУММА(Коэффициент)
	               |ПО
	               |	ОсновноеСредство
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПараметров";
				   
	
	Результат = Запрос.Выполнить();
	
	
	СтруктураТаблиц = Новый Структура;

	СтруктураТаблиц.Вставить("ОС", Результат);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицуБДДС()

// Функция подготавливает таблицу дат принятия ОС.
// 
// Параметры:
//  МассивОС - Массив
// 
// Возвращаемое значение:
//  ТаблицаЗначения
// 
Функция ПодготовитьТаблицуДатПринятияОС(МассивОС) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СостояниеПринято", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_му_СостоянияОС.ОсновноеСредство,
	|	бит_му_СостоянияОС.ДатаСостояния КАК Период
	|ИЗ
	|	РегистрСведений.бит_му_СостоянияОС КАК бит_му_СостоянияОС
	|ГДЕ
	|	бит_му_СостоянияОС.ОсновноеСредство В(&МассивОС)
	|	И бит_му_СостоянияОС.Состояние = &СостояниеПринято
	|	И бит_му_СостоянияОС.Организация = &Организация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	НовыйВидОперации = ВидОперации;
	
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);

	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		
		Дата = КонецМесяца(ТекущаяДатаСеанса());
		
	Иначе
		
		Дата = КонецМесяца(Дата);
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(НовыйВидОперации) Тогда
		// Если этого не сделать, то при создании нового система не предложит выбрать вид операции.
		ВидОперации = НовыйВидОперации;
	КонецЕсли;
	
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Функция выполняет подбор ОС через обработку подбора
//
Функция ВыполнитьПодборОС()
	
	ПараметрыПодбора  = ЗаполнитьПараметрыПодбора();
	ОбработкаПодбора = Обработки.бит_му_ПодборВНА.Создать();
	ВыбранноеЗначение = ОбработкаПодбора.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	
	Возврат ВыбранноеЗначение;
	
КонецФункции // ВыполнитьПодборОС()

//  Осуществляет поиск задвоенных начислений амортизации ОС в текущем периоде.
// 
Процедура НайтиЗадвоенныеНачисления(Отказ,Заголовок)
	
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("ДатаНачала"   ,НачалоМесяца(Дата));
	запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(Дата));
	запрос.УстановитьПараметр("Ссылка"       ,Ссылка);
	
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ТекДокумент.ОсновноеСредство,
	             |	ТекДокумент.Ссылка,
	             |	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер, """") КАК ИнвентарныйНомер
	             |ИЗ
	             |	Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК ТекДокумент
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	             |				&ДатаОкончания,
	             |				ОсновноеСредство В
	             |					(ВЫБРАТЬ
	             |						бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство
	             |					ИЗ
	             |						Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК бит_му_НачислениеАмортизацииОСОсновныеСредства
	             |					ГДЕ
	             |						бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	             |		ПО ТекДокумент.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	             |ГДЕ
	             |	ТекДокумент.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	             |	И ТекДокумент.Ссылка.Проведен
	             |	И ТекДокумент.Ссылка.Ссылка <> &Ссылка
	             |	И ТекДокумент.ОсновноеСредство В
	             |			(ВЫБРАТЬ
	             |				ТекДокумент.ОсновноеСредство
	             |			ИЗ
	             |				Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК ТекДокумент
	             |			ГДЕ
	             |				ТекДокумент.Ссылка = &Ссылка)";
				 
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ОсновноеСредство) Тогда
			ТекстСообщения = НСтр("ru='По основному средству инв. № %1% ""%2%"" было проведено начисление амортизации за период: %3%. Повторное начисление амортизации невозможно!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																					,Выборка.ИнвентарныйНомер
																					,Выборка.ОсновноеСредство
																					,Формат(Дата,"ДФ=MMMM-YYYY"));
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // бит_НайтиЗадвоенныеНачисления()

// Процедура проверяет правильность заполнения строк таблиц документа.
// 
// Параметры: 
//  СтруктураТаблиц			- Структура, таблицы значений, содержащая данные для проведения и проверки.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийНачислениеАмортизацииОС.ОсновныеСредства Тогда
		ТекущийВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийНачислениеАмортизацииОС.ИнвестиционнаяСобственность Тогда	
		ТекущийВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли; 
	
	ВыборкаОС = СтруктураТаблиц.ОС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОС.Следующий() Цикл
		
		ВыборкаДетали = ВыборкаОС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДетали.Следующий() Цикл
			
			// Проверки
			Если ТекущийВидКласса <> ВыборкаДетали.ВидКласса Тогда
				
				ТекстСообщения = НСтр("ru='В строке №%1% табличной части ""Основные средства"" вид класса ""%2%"" основного средства инв. № "
				+"%3% ""%4%"" не соответствует виду операции!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						,ВыборкаДетали.НомерСтроки
																						,ВыборкаДетали.ВидКласса
																						,ВыборкаДетали.ИнвентарныйНомер
																						,ВыборкаДетали.ОсновноеСредство);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
				
			КонецЕсли; 
			
			
			Если НЕ ВыборкаДетали.НачислятьАмортизацию Тогда
				
				ТекстСообщения = НСтр("ru='По основному средству инв. № %1% ""%2%"" амортизация не начисляется!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						,ВыборкаДетали.ИнвентарныйНомер
																						,ВыборкаДетали.ОсновноеСредство);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
				
			КонецЕсли; 
			
			
			Если ВыборкаДетали.НачислятьАмортизацию 
				И НЕ ВыборкаДетали.НачислятьАмортизациюСТекущегоПериода
				И КонецМесяца(ВыборкаДетали.ДатаПринятияКУчету) = КонецМесяца(СтруктураШапкиДокумента.Дата)  Тогда
				
				ТекстСообщения = НСтр("ru='По основному средству инв. № %1% ""%2%"" за период %3% амортизация не начисляется!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						,ВыборкаДетали.ИнвентарныйНомер
																						,ВыборкаДетали.ОсновноеСредство
																						,Формат(СтруктураШапкиДокумента.Дата,"ДФ=MMMM-YYYY"));
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
				
			КонецЕсли; 
			
			
			// В остальных записях группировки ОС тот же - достаточно проверить первую запись группировки.
			Прервать;
			
		КонецЦикла; // По детальным записям
		
	КонецЦикла; // По ОС
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицДокумента()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц, СтруктураКурсыВалют,ИсторическиеКурсы, Отказ, Заголовок)
	
	
	// Движения по регистру бухгалтерии бит_Дополнительный_2.
	ВыборкаОС = СтруктураТаблиц.ОС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОС.Следующий() Цикл
	
		ВыборкаДетали = ВыборкаОС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СуммаАмортизацииОбщая       = ВыборкаОС.СуммаАмортизации;
		СуммаКоэффициентОбщий		= ВыборкаОС.Коэффициент;
		СуммаАмортизацииНачисленная = 0;
		
		нд = 1;
		ФлагСброшен = Ложь;		
		КоличествоДетали = ВыборкаДетали.Количество();
		Пока ВыборкаДетали.Следующий() Цикл
			  
			  // Распределяем согласно коэффициентам способа отражения расходов.
			  // Изменение кода. Начало. 31.05.2016{{
			  //СуммаАмортизации = Окр(СуммаАмортизацииОбщая*ВыборкаДетали.Коэффициент,2);
			  СуммаАмортизации = Окр(СуммаАмортизацииОбщая * ВыборкаДетали.Коэффициент / СуммаКоэффициентОбщий, 2, 1);
			  // Изменение кода. Конец. 31.05.2016}}
			  СуммаАмортизацииНачисленная = СуммаАмортизацииНачисленная + СуммаАмортизации;
			  
			  // Убираем ошибки округления
			  Если нд = КоличествоДетали Тогда			  
			  	 СуммаАмортизации = СуммаАмортизации + СуммаАмортизацииОбщая - СуммаАмортизацииНачисленная; 			  
			  КонецЕсли; 
			  
			 // Формируем движение по начислению амортизации
			 // ДТ СчетЗатрат КТ СчетНачисленияАмортизации СуммаАмортизации.
			 СоздатьЗаписьПоНачислениюАмортизации(СтруктураШапкиДокумента,ВыборкаДетали,СуммаАмортизации,ИсторическиеКурсы[ВыборкаДетали.ОсновноеСредство]);
			 // СоздатьЗаписьПоНачислениюАмортизации(СтруктураШапкиДокумента,ВыборкаДетали,СуммаАмортизации,СтруктураКурсыВалют);
			  
			  // Если полностью самортизировали ОС - сбрасываем флаг НачислятьАмортизацию.
			  Если НЕ ФлагСброшен 
				   И ВыборкаДетали.БалансоваяСтоимостьПосле <=0 Тогда
				  
				  Запись = Движения.бит_му_ПараметрыОС.Добавить();
				  Запись.Период      = СтруктураШапкиДокумента.Дата;
				  Запись.Организация = СтруктураШапкиДокумента.Организация;
				  Запись.ОсновноеСредство = ВыборкаДетали.ОсновноеСредство;
				  Запись.Параметр         = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС;
				  Запись.ЗначениеПараметра= Ложь;
				  ФлагСброшен             = Истина;				  
				  
			  КонецЕсли; 
			  
			  нд = нд+1;
			  
		КонецЦикла; // По детальным записям
		
		// По регистру события ОС
		Запись = Движения.бит_му_СобытияОС.Добавить();
		Запись.Период           = СтруктураШапкиДокумента.Дата;
		Запись.Организация      = СтруктураШапкиДокумента.Организация;
		Запись.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
		Запись.Событие          = Перечисления.бит_му_СобытияОС.НачислениеАмортизации;
		
	КонецЦикла; // По ОС
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует проводку по списанию амортизации ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТаблицыЗначений.
//  ВалютаМУ                 - СправочникСсылка.Валюты.
//  СтруктураКурсыВалют      - Структура.
//                
Процедура СоздатьЗаписьПоНачислениюАмортизации(СтруктураШапкиДокумента,СтрокаТаблицы,Сумма,СтруктураКурсыВалют)

	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли; 

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	СодержаниеПроводки = НСтр("ru='начислена амортизация'");
	
	// Заполнение атрибутов записи	
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   //БИТ Тртилек 27.07.2012
										   //,КонецМесяца(СтруктураШапкиДокумента.Дата)
										   ,СтруктураШапкиДокумента.Дата
										   ///БИТ Тртилек
										   // ,мВалютаМеждУчета
										   ,СтруктураКурсыВалют.Документ.Валюта
										   ,СтрокаТаблицы.СчетЗатрат
										   ,СтрокаТаблицы.СчетНачисленияАмортизации
										   ,Сумма
										   ,СодержаниеПроводки);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполнение аналитики	
	Для НомерСубконто = 1 по мКоличествоСубконтоМУ Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,НомерСубконто,СтрокаТаблицы["Субконто"+НомерСубконто]);			
	КонецЦикла; 
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"ОсновныеСредства",СтрокаТаблицы.ОсновноеСредство);		
	
	
	// Выполнение валютных пересчетов	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ);

    Если СтрокаТаблицы.БалансоваяСтоимостьПосле = 0 Тогда
		СтруктураСуммы = Документы.бит_му_НачислениеАмортизацииОС.ВычислитьСуммыАмортизации(СтруктураШапкиДокумента.Организация, СтрокаТаблицы.ОсновноеСредство, МоментВремени());		
		ЗаполнитьЗначенияСвойств(Запись, СтруктураСуммы);
	КонецЕсли;
	
	//БИТ Тртилек 29.06.2012 заполнить субконто "объект", опираясь на основное средство	
	Если ЗначениеЗаполнено(Запись.СубконтоДт.ОсновныеСредства) Тогда
		ОбъектСтроительства = Запись.СубконтоДт.ОсновныеСредства.Объект;
	ИначеЕсли ЗначениеЗаполнено(Запись.СубконтоКт.ОсновныеСредства) Тогда
		ОбъектСтроительства = Запись.СубконтоКт.ОсновныеСредства.Объект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСтроительства) Тогда
		Запись.СубконтоКт.Вставить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект, ОбъектСтроительства);
		Запись.СубконтоДт.Вставить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект, ОбъектСтроительства);
	КонецЕсли;
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	///БИТ Тртилек
	
	//ОК Калинин 170513
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"Периоды",Период);		
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,"Периоды",Период);		
	//ОК Калинин
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюАмортизации()

Функция ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, Период, СтруктураКурсыВалют)
	
	ИсторическиеКурсы = бит_му_ВНА.ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, Период, СтруктураКурсыВалют);	
	
	// Получим дату принятия к учету для каждого ОС.
	ТаблицаДатПринятияОС = ПодготовитьТаблицуДатПринятияОС(МассивОС);
	
	ТаблицаПериодов = ТаблицаДатПринятияОС.Скопировать();
	ТаблицаПериодов.Свернуть("Период");
	СтруктураКурсыВалютДокумент = Новый Структура;
	СтруктураКурсыВалютДокумент.Вставить("Документ", СтруктураКурсыВалют.Документ); 
	
	// Получим курсы валюты документа для каждого ОС на дату принятия к учету.
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалютДокумент);

	СоответствиеКурсовИОС = Новый Соответствие;
	 
	Для каждого Строка Из ТаблицаДатПринятияОС Цикл
		СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	КонецЦикла; 
	
	Для Каждого ТекОС Из ИсторическиеКурсы Цикл
		ТекКурсы = СоответствиеКурсовИОС[ТекОС.Ключ];
		Если ТипЗнч(ТекКурсы) = Тип("Структура") И ТекКурсы.Свойство("Документ") Тогда
			
			ТекОС.Значение.Документ = ТекКурсы.Документ;
			
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
