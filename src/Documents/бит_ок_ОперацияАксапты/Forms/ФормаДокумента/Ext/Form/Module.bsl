
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-08 (#3076)
&НаКлиенте
Перем ИдентификаторСтрокиПроводки;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-08 (#3076)

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-04 (#3124)
	Если Объект.бтИсправление И
		 ЗначениеЗаполнено(Объект.Ссылка)
	Тогда 
		ок_ОперацияБух = Документы.бит_ок_ОперацияАксапты.ПолучитьСвязаннуюОперациюБУХ(Объект.Ссылка);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-04 (#3124)
	
	УстановитьВидимостьХозрасчетный();
	УстановитьВидимостьМеждународный();
	 //***БИТ***Теплова***(
	ОтобразитьИсправления(); 	
	УстановитьДоступностьОборотыАксапты();
	//***БИТ***Теплова***)
	
	//Начало изменений Широков Н. <SoftBalance> 10/10/13-12:39 
	УстановитьВидимостьКорректировкиРСБУ();
	//Конец изменений Широков Н. 
	
	// БИТ Тртилек 31.07.2012 Установить доступность формы с учетом даты запрета редактирования	
	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-14 (#3155)
	//Перенесено в событие ПриЧтенииДанных
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-29 (#3076)
	//ЗаполнитьКэшЗначений();
	//// Отображение дополнительных измерений в табличных полях.
	//бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
	//																, "ок_ОперацияБухАксапта"
	//																, фКэшЗначений.ИзмеренияДоп
	//																, фКэшЗначений.НастройкиИзмерений);
	//																
	//

	//Элементы.ок_ОперацияБухАксапта.Видимость = Объект.бтИсправление;
	//Если Объект.бтИсправление Тогда
	//	ЗаполнитьТЧОперацияБухАксапта();
	//КонецЕсли;
	//
	//ОтобразитьНомерЗаявки();	
	//
	//БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
	//		ок_ОперацияБухАксапта, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	//		
	//УстановитьУсловноеОформление();		
	//		
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-29 (#3076)	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-14 (#3155)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-14 (#3101)
	Элементы.Группа_ок_СтруктураПодчиненностиБК.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	
	Если УправлениеДоступом.ЕстьРоль("бит_БК_ГлавныйБК") Тогда 
		
		НоваяКоманда = Команды.Добавить("ок_ТранслироватьВБК");
		НоваяКоманда.Действие  = "ТранслироватьВБККоманда";
		НоваяКоманда.Заголовок = "Транслировать в БК";
		НоваяКоманда.Подсказка = "Транслировать выделенные документы в БК";
		
		НоваяКнопка = Элементы.Добавить("ТранслироватьВБК", Тип("КнопкаФормы"), Элементы.ФормаКоманднаяПанель);
		НоваяКнопка.ИмяКоманды = "ок_ТранслироватьВБК";			

	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-14 (#3101)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-30 (#3533)
	ок_УправлениеФормами.ПриЧтенииНаСервере(ЭтаФорма, Объект);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-30 (#3533)
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьХозрасчетный()
	
	Если Объект.Движения.Хозрасчетный.Количество() > 0 Тогда
		Элементы.РСБУ.Видимость = Истина;
	Иначе
		Элементы.РСБУ.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьМеждународный()
	
	//БИТ Тртилек 
	//Установим видимость только для тех пользователей, у кого есть доступ
	//к подсистеме МСФО
	Элементы.МСФО.Видимость = Ложь;
	РолиПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Роли;
	Для Каждого Роль из РолиПользователяИБ Цикл
		//ОК Довбешка Т. 11.11.2019 видимость для роли 
		//Если Роль.Имя = "бит_му_ПолныеПрава" ИЛИ Роль.Имя = "ПолныеПрава" Тогда
		Если Роль.Имя = "бит_му_ПолныеПрава" ИЛИ Роль.Имя = "ПолныеПрава" ИЛИ Роль.Имя = "ок_МСФО_просмотр" Тогда
			Если Объект.Движения.бит_Дополнительный_2.Количество() > 0 Тогда	
				Элементы.МСФО.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	///БИТ Тртилек
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКорректировкиРСБУ()
	
	//Начало изменений Широков Н. <SoftBalance> 10/10/13-13:16 
	
	РазрешеноПользователю = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("бит_му_ПолныеПрава");
		
	Элементы.СБ_КорректировкиРСБУ.Видимость = РазрешеноПользователю 
		И Объект.Движения.СБ_КорректировкаРСБУ.Количество() > 0;
		
	//Конец изменений Широков Н. 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНеСопоставленные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки,
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение
		|ИЗ
		|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
		|ГДЕ
		|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа";

	Запрос.УстановитьПараметр("Группа", "Служебные элементы Не сопоставлено");

	Результат = Запрос.Выполнить();

	Возврат Результат.Выгрузить();
	
КонецФункции

//***БИТ***Теплова***(

&НаСервере
Процедура УстановитьДоступностьОборотыАксапты()
	Если РольДоступна("бтРедактированиеОперацииАксапты") или РольДоступна("ПолныеПрава") Тогда
		Элементы.РСБУ.ТолькоПросмотр = Ложь;	
	КонецЕсли;
//ОК Ванюков К. +// необходимо открыть вкладку "Обороты аксапты" в документе "Операция АХ" на редактирование для роли «Полные права» // 2012-05-30
	Если Не РольДоступна("бтРедактированиеОперацииАксапты") Тогда
		Если Не РольДоступна("ПолныеПрава") Тогда
			Элементы.ОборотыАксапты.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
//ОК Ванюков К. -	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеПриИзменении(Элемент)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-29 (#3076)
	//Элементы.Исправления.Видимость = Объект.бтИсправление;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-29 (#3076)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//Элементы.СсылкаНаОперацию.Видимость = Объект.бтИсправление;	
	//Заменено на:
	Элементы.СсылкаНаОперацию.Видимость = Объект.бтИсправление 
										  И ЗначениеЗаполнено(ок_ОперацияБух);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
	УстановкаОтбораПоРегистру();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-29 (#3076)
	Элементы.ок_ОперацияБухАксапта.Видимость = Объект.бтИсправление;
	Если Объект.бтИсправление Тогда 
		ЗаполнитьТЧОперацияБухАксапта();		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-29 (#3076)
	
КонецПроцедуры

&НаСервере
Процедура УстановкаОтбораПоРегистру()

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//Если НЕ Объект.бтСсылкаНаДокументОперация = ПредопределенноеЗначение("Документ.ОперацияБух.ПустаяСсылка") и НЕ ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.бтСсылкаНаДокументОперация, "ПометкаУдаления") Тогда
	//Заменено на:
	Если НЕ ок_ОперацияБух = ПредопределенноеЗначение("Документ.ОперацияБух.ПустаяСсылка") и НЕ ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ок_ОперацияБух, "ПометкаУдаления") Тогда
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		ОтобразитьИсправления()
	ИначеЕсли Объект.бтИсправление Тогда
		НаборДок = Объект.Движения.Хозрасчетный.Выгрузить();
		КорректировкаПроводок.Загрузить(НаборДок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьДокументОперация_Сервер(ДатаОткрытогоПериодаМСФО, Документ, ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ДатаОткрытогоПериодаМСФО) И Объект.Дата < ДатаОткрытогоПериодаМСФО Тогда		
		ДвиженияДок = Документ.Движения.бит_Дополнительный_2;
		ДвиженияДок.Прочитать();
		ТаблицаДвижений = ДвиженияДок.Выгрузить();
		
		//Документ.Дата = ТекущаяДатаСеанса();
		
		Для Каждого Стр Из ТаблицаДвижений Цикл
			Стр.Период = ДатаОткрытогоПериодаМСФО;	
		КонецЦикла;
		
		Документ.Записать(РежимЗаписиДокумента.Запись);
		
		ДвиженияДок.Загрузить(ТаблицаДвижений);
		ДвиженияДок.Записать();	
	КонецЕсли;
	
	ТребуетсяПерезапись = Истина;
	
	// BIT AMerkulov 03092014 --
	
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создан документ " + Документ.Ссылка);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//Объект.бтСсылкаНаДокументОперация = Документ.Ссылка;
	//ТекущийОбъект.бтСсылкаНаДокументОперация = Документ.Ссылка;
	//Заменено на:
	ок_ОперацияБух = Документ.Ссылка;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)

КонецФункции


&НаСервере
Процедура СоздатьДокументОперация(ТекущийОбъект)
	Документ = Документы.ОперацияБух.СоздатьДокумент();
	Документ.Организация = Объект.Организация;
	Документ.Дата = Объект.Дата;
	Документ.СпособЗаполнения = "Вручную";
	Документ.СуммаОперации = 0;
	Документ.ТиповаяОперация = Объект.Ссылка;
	Документ.Содержание = "Создано на основании документа " + Объект.Ссылка;
//ОК Ванюков К. +//  при проставлении в операции АХ галки "Исправление" и создании операции бух., в нее копировался реквизит ID исходной операции АХ // 2013-02-20
    Документ.ОК_ID_Разноска	= Объект.ОК_ID_Разноска;
//ОК Ванюков К. -	
//ОК Калинин М. 260313
	Документ.Ответственный= ПользователиКлиентСервер.ТекущийПользователь();
//ОК Калинин М. 

	Документ.Записать(РежимЗаписиДокумента.Запись);

	// BIT AMerkulov 03092014 ++
	
	РБ_МУ = СБ_МеханизмКонтроляТрансляцииПовтИсп.ОбъектМетаданных_РБ_МУ();	
	ДатыОткрытогоПериода = бит_КонтрольЗакрытогоПериода.ПолучитьДатыОткрытогоПериода(Объект.Организация, РБ_МУ);
	ДатаОткрытогоПериодаМСФО = ДатыОткрытогоПериода[РБ_МУ];
	
	СоздатьДокументОперация_Сервер(ДатаОткрытогоПериодаМСФО,Документ, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИсправления()
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-13 (#3076)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//Элементы.СсылкаНаОперацию.Видимость = Объект.бтИсправление;
	//Заменено на:
	Элементы.СсылкаНаОперацию.Видимость = Объект.бтИсправление 
										  И ЗначениеЗаполнено(ок_ОперацияБух);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-12-29 (#3415)
	Элементы.Исправление.Доступность = ДоступноИсправление();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-12-29 (#3415)

	Возврат;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-13-13 (#3076)
	
	Элементы.Исправления.Видимость = Объект.бтИсправление;
	Элементы.СсылкаНаОперацию.Видимость = Объект.бтИсправление;
	
	НаборБух = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//НаборБух.Отбор.Регистратор.Установить(Объект.бтСсылкаНаДокументОперация);
	//Заменено на:
	НаборБух.Отбор.Регистратор.Установить(ок_ОперацияБух);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
	НаборБух.Прочитать();
	
	НаборДвиженийОперации = НаборБух.Выгрузить();
	
	СтруктураПоиска = Новый Структура("НомерСтроки, Сумма, СчетДт, СчетКт") ;
	
	КорректировкаПроводок.Очистить();
	НаборКорректировкаПроводок = РеквизитФормыВЗначение("КорректировкаПроводок");
	Для каждого Стр Из Объект.Движения.Хозрасчетный Цикл
		СтруктураПоиска.НомерСтроки = Стр.НомерСтроки;
		СтруктураПоиска.Сумма = Стр.Сумма;
		СтруктураПоиска.СчетДт = Стр.СчетДт;
		СтруктураПоиска.СчетКт = Стр.СчетКт;
		
		Строка = НаборДвиженийОперации.НайтиСтроки(СтруктураПоиска);
		
		Если Строка.Количество()>0 Тогда
			Для каждого СтрокаПроводки Из Строка Цикл
				СтрокаКорректировки = НаборКорректировкаПроводок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКорректировки,СтрокаПроводки);
				
				СтрокаКорректировки.СубконтоДт.Вставить(СтрокаПроводки.ВидСубконтоДт1, СтрокаПроводки.СубконтоДт1); 
				СтрокаКорректировки.СубконтоДт.Вставить(СтрокаПроводки.ВидСубконтоДт2, СтрокаПроводки.СубконтоДт2); 
				СтрокаКорректировки.СубконтоДт.Вставить(СтрокаПроводки.ВидСубконтоДт3, СтрокаПроводки.СубконтоДт3); 
				СтрокаКорректировки.СубконтоКт.Вставить(СтрокаПроводки.ВидСубконтоКт1, СтрокаПроводки.СубконтоКт1); 
				СтрокаКорректировки.СубконтоКт.Вставить(СтрокаПроводки.ВидСубконтоКт2, СтрокаПроводки.СубконтоКт2); 
				СтрокаКорректировки.СубконтоКт.Вставить(СтрокаПроводки.ВидСубконтоКт3, СтрокаПроводки.СубконтоКт3); 
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	ЗначениеВРеквизитФормы(НаборКорректировкаПроводок, "КорректировкаПроводок");
КонецПроцедуры

&НаСервере
Функция СинхронизироватьСДокументомОперация(ТекущийОбъект)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-06 (#3076)	
	Если ок_ОперацияБухАксапта.Количество()=0 Тогда 
		Возврат "";
	КонецЕсли;
	
	НачатьТранзакцию();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//Если Не ЗначениеЗаполнено(Объект.бтСсылкаНаДокументОперация) Тогда 
	//Заменено на:
	Если Не ЗначениеЗаполнено(ок_ОперацияБух) Тогда 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		пОперацияОбъект = Документы.ОперацияБух.СоздатьДокумент();
		
		пОперацияОбъект.Дата = Объект.Дата;
		пОперацияОбъект.СпособЗаполнения		 = "Сторно";
		пОперацияОбъект.СторнируемыйДокумент  = Объект.Ссылка;
		пОперацияОбъект.Организация           = Объект.Организация;
						
		пОперацияОбъект.Содержание	  = "Создано на основании документа " + Объект.Ссылка;
		пОперацияОбъект.ОК_ID_Разноска = Объект.ОК_ID_Разноска;
		пОперацияОбъект.Ответственный  = ПользователиКлиентСервер.ТекущийПользователь();
		
		Если Не ЗначениеЗаполнено(пОперацияОбъект.Ссылка) Тогда 
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-21 (#3155)
			пОперацияОбъект.ОбменДанными.Загрузка = Истина;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-21 (#3155)		
			
			Попытка	
				пОперацияОбъект.Записать(РежимЗаписиДокумента.Запись);
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
				//Объект.бтСсылкаНаДокументОперация		 = пОперацияОбъект.Ссылка;
				//ТекущийОбъект.бтСсылкаНаДокументОперация = пОперацияОбъект.Ссылка;
				//Заменено на:
				ок_ОперацияБух		 = пОперацияОбъект.Ссылка;				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
			Исключение
				ОтменитьТранзакцию();
				пТекстОшибки = НСтр("ru = 'Не удалось создать операцию бух. по причине:%1'");
				пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
				Возврат пТекстОшибки;
			КонецПопытки;	
			
		КонецЕсли;        	                  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-21 (#3155)	
	Иначе 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
		//пОперацияОбъект = Объект.бтСсылкаНаДокументОперация.ПолучитьОбъект();
		//Заменено на:
		пОперацияОбъект = ок_ОперацияБух.ПолучитьОбъект();
		пОперацияОбъект.СторнируемыйДокумент  = Объект.Ссылка;
		пОперацияОбъект.Организация           = Объект.Организация;
						
		пОперацияОбъект.Содержание			  = "Создано на основании документа " + Объект.Ссылка;
		пОперацияОбъект.ОК_ID_Разноска		  = Объект.ОК_ID_Разноска;
		пОперацияОбъект.Ответственный 	      = ПользователиКлиентСервер.ТекущийПользователь();
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-21 (#3155)	
	КонецЕсли;   
	
	//ТЗХозрасчетный			= ОперацияОбъект.Движения.Хозрасчетный.Выгрузить();
	//ТЗОпБ 					= ОперацияОбъект.Движения.бит_ОборотыПоБюджетам.Выгрузить();
	//ТЗСоотЗаписейТрансляции = ОперацияОбъект.Движения.бит_СоответствиеЗаписейТрансляции.Выгрузить();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-21 (#3155)
	//пОперацияОбъект = Объект.бтСсылкаНаДокументОперация.ПолучитьОбъект();
	//Заменено на:
	пОперацияОбъект.ОбменДанными.Загрузка = Ложь;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-21 (#3155)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//пОперацияОбъект = Объект.бтСсылкаНаДокументОперация.ПолучитьОбъект();
	//Заменено на:
	пОперацияОбъект = ок_ОперацияБух.ПолучитьОбъект();	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-17 (#3267)
	СтруктураНеСопоставлено = Новый Структура("Сценарий, СтатьяОборотов");	
 	СтруктураНеСопоставлено.Сценарий 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Служебные элементы Не сопоставлено", "Сценарии", ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка"));
 	СтруктураНеСопоставлено.СтатьяОборотов 	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Служебные элементы Не сопоставлено", "Статьи оборотов", ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка"));	
	//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-17 (#3267)
	
	пОперацияОбъект.Движения.Хозрасчетный.Записывать = Истина;	
	
	пСвойствоСчетаКэш = Новый Соответствие;
	
	ТекНомерСтроки = 1;
			
	Для Каждого пДвижение ИЗ Объект.Движения.Хозрасчетный Цикл 
				
		пСтрокаХР = пОперацияОбъект.Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(пСтрокаХР, пДвижение);		
					
		БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(пСтрокаХР.СчетДт, пСтрокаХР.СубконтоДт, пСвойствоСчетаКэш, пДвижение.СубконтоДт1, пДвижение.СубконтоДт2, пДвижение.СубконтоДт3);		
		БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(пСтрокаХР.СчетКт, пСтрокаХР.СубконтоКт, пСвойствоСчетаКэш, пДвижение.СубконтоКт1, пДвижение.СубконтоКт2, пДвижение.СубконтоКт3);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
		//пСтрокаХР.Регистратор = Объект.бтСсылкаНаДокументОперация;
		//Заменено на:
		пСтрокаХР.Регистратор = ок_ОперацияБух;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-16 (#3155)
		//пСтрокаХР.Период	  = Объект.бтСсылкаНаДокументОперация.Дата;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-16 (#3155)
		
		
		Если ЗначениеЗаполнено(пСтрокаХР.Сумма) Тогда 
			пСтрокаХР.Сумма			  = -пСтрокаХР.Сумма;
		КонецЕсли;
		         
		Если ЗначениеЗаполнено(пСтрокаХР.ВалютнаяСуммаДт) Тогда 
			пСтрокаХР.ВалютнаяСуммаДт = -пСтрокаХР.ВалютнаяСуммаДт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.ВалютнаяСуммаКт) Тогда
			пСтрокаХР.ВалютнаяСуммаКт = -пСтрокаХР.ВалютнаяСуммаКт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.КоличествоДт) Тогда
			пСтрокаХР.КоличествоДт	  = -пСтрокаХР.КоличествоДт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.КоличествоКт) Тогда
			пСтрокаХР.КоличествоКт	  = -пСтрокаХР.КоличествоКт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.СуммаВРДт) Тогда
			пСтрокаХР.СуммаВРДт 	  = -пСтрокаХР.СуммаВРДт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.СуммаНУДт) Тогда
			пСтрокаХР.СуммаНУДт 	  = -пСтрокаХР.СуммаНУДт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.СуммаПРДт) Тогда
			пСтрокаХР.СуммаПРДт		  = -пСтрокаХР.СуммаПРДт;		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.СуммаВРКт) Тогда
			пСтрокаХР.СуммаВРКт		  = -пСтрокаХР.СуммаВРКт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.СуммаНУКт) Тогда
			пСтрокаХР.СуммаНУКт		  = -пСтрокаХР.СуммаНУКт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пСтрокаХР.СуммаПРКт) Тогда
			пСтрокаХР.СуммаПРКт		  = -пСтрокаХР.СуммаПРКт;	
		КонецЕсли;
		
		пСтрокаХР.Активность 	  = Истина;
							
		ТекНомерСтроки = ТекНомерСтроки + 1;
		
	КонецЦикла;
	
	пНомерСтрокиОпБ = 1;
	мдРесурсыОпБ = Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Ресурсы;
	
	Для Каждого пДвижение ИЗ Объект.Движения.бит_ОборотыПоБюджетам Цикл 
		
		пСтрокаОпБ = пОперацияОбъект.Движения.бит_ОборотыПоБюджетам.Добавить();
		ЗаполнитьЗначенияСвойств(пСтрокаОпБ, пДвижение);		
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
		//пСтрокаОпБ.Регистратор = Объект.бтСсылкаНаДокументОперация;
		//Заменено на:
		пСтрокаОпБ.Регистратор = ок_ОперацияБух;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-16 (#3155)
		//пСтрокаОпБ.Период	   = Объект.бтСсылкаНаДокументОперация.Дата;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-16 (#3155)
		
		Для Каждого Ресурс Из мдРесурсыОпБ Цикл 
			Если ЗначениеЗаполнено(пСтрокаОпБ[Ресурс.Имя]) И
				 ТипЗнч(пСтрокаОпБ[Ресурс.Имя]) = Тип("Число")
			Тогда 
			    пСтрокаОпБ[Ресурс.Имя] = -пСтрокаОпБ[Ресурс.Имя];
			КонецЕсли;
		КонецЦикла;		
				
		пСтрокаОпБ.Активность 	  = Истина;
					
		пНомерСтрокиОпБ = пНомерСтрокиОпБ + 1;
		
	КонецЦикла;
			
	пИсточник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	пПриемник = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам);
	
	пВалютаУпрУчета = Константы.бит_ВалютаУправленческогоУчета.Получить();
	п19Сч = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям");	
	
	соотСценарийОчищаемыеПоля = Новый Соответствие;
	мдЗнчПеречисления = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления;
	КолонкиОпБ = пОперацияОбъект.Движения.бит_ОборотыПоБюджетам.Выгрузить().Колонки;
		
	Для Каждого пСтрокаОперацияАксапта Из ок_ОперацияБухАксапта Цикл 
					
		пСтрокаХР = пОперацияОбъект.Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(пСтрокаХР, пСтрокаОперацияАксапта);		
		
		БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(пСтрокаХР.СчетДт, пСтрокаХР.СубконтоДт, пСвойствоСчетаКэш, пСтрокаОперацияАксапта.СубконтоДт1, пСтрокаОперацияАксапта.СубконтоДт2, пСтрокаОперацияАксапта.СубконтоДт3);		
		БухгалтерскийУчет.УстановитьСубконтоПоКешуСвойствСчета(пСтрокаХР.СчетКт, пСтрокаХР.СубконтоКт, пСвойствоСчетаКэш, пСтрокаОперацияАксапта.СубконтоКт1, пСтрокаОперацияАксапта.СубконтоКт2, пСтрокаОперацияАксапта.СубконтоКт3);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
		//пСтрокаХР.Регистратор = Объект.бтСсылкаНаДокументОперация;
		//Заменено на:
		пСтрокаХР.Регистратор = ок_ОперацияБух;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-16 (#3155)
		//пСтрокаХР.Период	  = Объект.бтСсылкаНаДокументОперация.Дата;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-16 (#3155)		
				
		пСтрокаХР.Активность  = Истина;
				
		Если фКэшЗначений.Свойство("ИсправленияПоБК") И
			 фКэшЗначений.ИсправленияПоБК
		Тогда 
		
			Если Не ЗначениеЗаполнено(пСтрокаОперацияАксапта.Сценарий) Тогда 
				Продолжить;
			КонецЕсли;
					
			СтрокаОпБ = пОперацияОбъект.Движения.бит_ОборотыПоБюджетам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОпБ, пСтрокаОперацияАксапта);			
			
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-17 (#3267)
			// оформим сценарий
			СтрокаОпБ.Сценарий = ОК_ОбщегоНазначения.ОпределитьСценарийПоСтатьеОборотов(СтрокаОпБ.СтатьяОборотов, СтруктураНеСопоставлено);
			//ОКЕЙ Наумов А.Н.(СофтЛаб) Начало 2019-05-17 (#3267)
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
			//СтрокаОпБ.Регистратор = Объект.бтСсылкаНаДокументОперация;
			//Заменено на:			
			СтрокаОпБ.Регистратор = ок_ОперацияБух;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
						
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-16 (#3155)
			//СтрокаОпБ.Период	  = Объект.бтСсылкаНаДокументОперация.Дата;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-16 (#3155)		
			СтрокаОпБ.Активность  = Истина;
			
			//Расчет сумм (начало)
			СтрокаОпБ.СуммаРегл = пСтрокаОперацияАксапта.Сумма;
			
			сохрСтавкаНДС = СтрокаОпБ.СтавкаНДС;
			ВалютаБылаЗаполнена = ЗначениеЗаполнено(СтрокаОпБ.Валюта);
			
			СтрокаОпБ.СтавкаНДС = Неопределено;
			Если НЕ ВалютаБылаЗаполнена Тогда 
				СтрокаОпБ.Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			КонецЕсли;
			
			мИсклчаемые = Новый Массив;
			мИсклчаемые.Добавить("СуммаРегл");					
			
			пВалютаСценария = СтрокаОпБ.Сценарий.Валюта;
			Если Не ЗначениеЗаполнено(пВалютаСценария) Тогда 
				пВалютаСценария = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			КонецЕсли;
			
			ОК_ОбщегоНазначения.ПересчитатьСуммыОпБПоСуммеРегл(СтрокаОпБ,мИсклчаемые,пВалютаСценария,пВалютаУпрУчета,Объект.Дата); 	
			
			Если НЕ ВалютаБылаЗаполнена Тогда 
				СтрокаОпБ.Валюта = Неопределено;
			КонецЕсли;
			
			СтрокаОпБ.СтавкаНДС = сохрСтавкаНДС;
									
			Если пСтрокаОперацияАксапта.СчетДт.ПринадлежитЭлементу(п19Сч) ИЛИ
				 пСтрокаОперацияАксапта.СчетКт.ПринадлежитЭлементу(п19Сч)
			Тогда 
			    СтрокаОпБ.Сумма			 = 0;
				СтрокаОпБ.СуммаРегл		 = 0;
				СтрокаОпБ.СуммаУпр		 = 0;
				СтрокаОпБ.СуммаСценарий	 = 0;
			Иначе
			    СтрокаОпБ.СуммаСНДС			 = СтрокаОпБ.Сумма;
				СтрокаОпБ.СуммаСНДСРегл		 = СтрокаОпБ.СуммаРегл;
				СтрокаОпБ.СуммаСНДСУпр		 = СтрокаОпБ.СуммаУпр;
				СтрокаОпБ.СуммаСНДССценарий	 = СтрокаОпБ.СуммаСценарий;				
			КонецЕсли;				 

			//Расчет сумм (конец)
			
			СтрокаОпБ.бит_БК_Организация = Объект.Организация;
			
			СтрокаСоотЗаписейТрансляции = пОперацияОбъект.Движения.бит_СоответствиеЗаписейТрансляции.Добавить();
			СтрокаСоотЗаписейТрансляции.Источник			 = пИсточник;
			СтрокаСоотЗаписейТрансляции.Приемник			 = пПриемник;
			СтрокаСоотЗаписейТрансляции.Организация			 = Объект.Организация;
			СтрокаСоотЗаписейТрансляции.НомерСтрокиИсточника = ТекНомерСтроки;
			СтрокаСоотЗаписейТрансляции.НомерСтрокиПриемника = пНомерСтрокиОпБ;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
			//СтрокаСоотЗаписейТрансляции.Регистратор = Объект.бтСсылкаНаДокументОперация;
			//Заменено на:						
			СтрокаСоотЗаписейТрансляции.Регистратор = ок_ОперацияБух;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)

			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-16 (#3155)
			//СтрокаСоотЗаписейТрансляции.Период	    = Объект.бтСсылкаНаДокументОперация.Дата;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-16 (#3155)					
			СтрокаСоотЗаписейТрансляции.Активность  = Истина;
			
			бит_КонтрольПоБюджету.ОчиститьНеиспользуемыеИзмеренияКонтроля(СтрокаОпБ,соотСценарийОчищаемыеПоля,мдЗнчПеречисления,КолонкиОпБ);
			
			ТекНомерСтроки  = ТекНомерСтроки  + 1;
			пНомерСтрокиОпБ = пНомерСтрокиОпБ + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если пОперацияОбъект.Движения.бит_ОборотыПоБюджетам.Количество() Тогда 
		пОперацияОбъект.Движения.бит_ОборотыПоБюджетам.Записывать = Истина;
		пОперацияОбъект.Движения.бит_СоответствиеЗаписейТрансляции.Записывать = Истина;
	КонецЕсли;
	
	Если ок_ДопДанныеОперацииАксапты.Количество()>0 Тогда
		пОперацияОбъект.ДополнительныеСвойства.Вставить("ок_ФВБ"	  , ок_ДопДанныеОперацииАксапты[0].НомерЗаявки);
		пОперацияОбъект.ДополнительныеСвойства.Вставить("Аналитика"	  , ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"));			
	КонецЕсли;      		 
	
	пОперацияОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-06 (#3076)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//Если Объект.бтСсылкаНаДокументОперация = Документы.ОперацияБух.ПустаяСсылка() Тогда
	//Заменено на:
	Если ок_ОперацияБух = Документы.ОперацияБух.ПустаяСсылка() Тогда
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		СоздатьДокументОперация(ТекущийОбъект);
	КонецЕсли;

	//Начало изменений Широков Н. <SoftBalance> 11/10/13-14:05 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//ОперацияОбъект = Объект.бтСсылкаНаДокументОперация.ПолучитьОбъект();
	//Заменено на:
	ОперацияОбъект = ок_ОперацияБух.ПолучитьОбъект();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
	ОперацияОбъект.ДополнительныеСвойства.Вставить("Трансляция", Истина);
	
	СБ_МеханизмКонтроляТрансляцииСервер.СБ_МеханизмКонтроляТрансляцииПередЗаписьюПередЗаписью(ОперацияОбъект, Ложь, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	//Конец изменений Широков Н. 
	
	НаборБух = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//НаборБух.Отбор.Регистратор.Установить(Объект.бтСсылкаНаДокументОперация);
	//Заменено на:
	НаборБух.Отбор.Регистратор.Установить(ок_ОперацияБух);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
	НаборБух.Прочитать();
	НаборБух.Очистить();
	
	НаборДок = ТекущийОбъект.Движения.Хозрасчетный;
	Если КорректировкаПроводок.Количество()=0 Тогда
		НаборДляКорректировки = ТекущийОбъект.Движения.Хозрасчетный.Выгрузить();
		КорректировкаПроводок.Загрузить(НаборДляКорректировки);
	КонецЕсли;
	
	Если Объект.Движения.Хозрасчетный.Количество() =0 Тогда
	   КорректировкаПроводок.Очистить();
	КонецЕсли;
	
	тзКорректировкаПроводок = РеквизитФормыВЗначение("КорректировкаПроводок");
	Для каждого СтрокаКорректировки Из тзКорректировкаПроводок Цикл
		НоваяСтрока = НаборБух.Добавить();
		
		ЗаполнитьДвиженияПоКорректировке(НоваяСтрока, СтрокаКорректировки, Метаданные.РегистрыБухгалтерии.Хозрасчетный);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-16 (#3155)
		//НоваяСтрока.Период = Объект.Дата;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-16 (#3155)				
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
		//НоваяСтрока.Регистратор = Объект.бтСсылкаНаДокументОперация;
		//Заменено на:
		НоваяСтрока.Регистратор = ок_ОперацияБух;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		
	КонецЦикла;
	
	Для каждого СтрокаНабора Из НаборДок Цикл
		НоваяСтрока = НаборБух.Добавить();
		
		ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(НоваяСтрока, СтрокаНабора, Метаданные.РегистрыБухгалтерии.Хозрасчетный);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-16 (#3155)
		//НоваяСтрока.Период = Объект.Дата;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-16 (#3155)						
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
		//НоваяСтрока.Регистратор = Объект.бтСсылкаНаДокументОперация;
		//Заменено на:
		НоваяСтрока.Регистратор = ок_ОперацияБух;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		
	КонецЦикла;
	
	// ++ БИТ Amerkulov 10022014 
	ТаблицаПроводок = НаборБух.Выгрузить();
	ТаблицаПроводок.Колонки.Удалить("НомерСтроки");
	ТаблицаПроводок.Колонки.Удалить("МоментВремени");
	
	ГуппируемыеКолонки="";
	СуммируемыеКолонки="";
	
	Для каждого Колонка Из ТаблицаПроводок.Колонки Цикл
		Если Найти(Колонка.Имя,"Сумма")>0 Или Найти(Колонка.Имя, "Количество")>0  Тогда
			СуммируемыеКолонки = СуммируемыеКолонки +
			?(ЗначениеЗаполнено(СуммируемыеКолонки),",",
			"")+Колонка.Имя;
			
		Иначе
			ГуппируемыеКолонки= ГуппируемыеКолонки+
			?(ЗначениеЗаполнено(ГуппируемыеКолонки),",",
			"")+Колонка.Имя;
			
		КонецЕсли;
	КонецЦикла;

	//ТаблицаПроводок.Свернуть( ГуппируемыеКолонки, СуммируемыеКолонки);	//ОК Аверьянова С. 15.05.14 - закомментировано, так как сворачивать проводки в 0 неправильно 
	//#AT-1186722 от 13.05.14 - свернутые проводки не отражаются на закладке исправления
	
    НаборБух.Загрузить(ТаблицаПроводок);
	// --  БИТ Amerkulov 
    	 	
	НаборБух.Записать();	
	
	// ++ БИТ Amerkulov 16022015 
	НаборКорректировки = РегистрыБухгалтерии.СБ_КорректировкаРСБУ.СоздатьНаборЗаписей();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//НаборКорректировки.Отбор.Регистратор.Установить(Объект.бтСсылкаНаДокументОперация);
	//Заменено на:
	НаборКорректировки.Отбор.Регистратор.Установить(ок_ОперацияБух);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)                              
	НаборКорректировки.Прочитать();
	НаборКорректировки.Очистить();	
	НаборКорректировки.Загрузить(ТаблицаПроводок);
	НаборКорректировки.Записать();	
	// ++ БИТ Amerkulov 16022015
		
	// ++ БИТ Amerkulov 22102014 
	ОперацияОбъект.Записать(РежимЗаписиДокумента.Запись);
КонецФункции



&НаСервере
Процедура ЗаполнитьДвиженияПоКорректировке(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	Движение.Активность = Истина;
	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда
				
		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Если ЗначениеЗаполнено(Субконто.Ключ)Тогда
				Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Если ЗначениеЗаполнено(Субконто.Ключ)Тогда
				Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЕсли;
		КонецЦикла;
		
	Иначе

		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] =  Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] =  Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] =  Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

&НаСервере
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	Движение.Активность = Истина;
	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда

		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Если ЗначениеЗаполнено(Субконто.Ключ)Тогда
				Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Если ЗначениеЗаполнено(Субконто.Ключ)Тогда
				Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			КонецЕсли;
		КонецЦикла;

	Иначе

		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

&НаКлиенте
Процедура СсылкаНаОперациюНажатие(Элемент, СтандартнаяОбработка)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
	//Структура_Параметры = Новый Структура("Ключ",Объект.бтСсылкаНаДокументОперация);
	//Заменено на:
	Структура_Параметры = Новый Структура("Ключ",ок_ОперацияБух);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
	ОткрытьФорму("Документ.ОперацияБух.ФормаОбъекта",Структура_Параметры);
	
КонецПроцедуры



&НаКлиенте
Процедура КорректировкаПроводокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаПроводокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыАксаптыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыАксаптыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-30 (#3076)
	//Если ТекущийОбъект.бтИсправление Тогда 
	//	СинхронизироватьСДокументомОперация(ТекущийОбъект);	
	//КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-30 (#3076)
КонецПроцедуры

&НаСервере
Функция ПослеЗаписи_Сервер(глРежимЗаписи)
	//Начало изменений Широков Н. <SoftBalance> 10/10/13-13:17 
	УстановитьВидимостьКорректировкиРСБУ();
	//Конец изменений Широков Н.
	
	// BIT Amerkulov 03092014 ++
	
	Если ТребуетсяПерезапись = Истина Тогда
		
		Записать();
		ТребуетсяПерезапись = Ложь;
		
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-04 (#3124)
	ОтобразитьИсправления();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-04 (#3124)
	
КонецФункции


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//Начало изменений Широков Н. <SoftBalance> 10/10/13-13:17 
	ПослеЗаписи_Сервер(ПараметрыЗаписи.РежимЗаписи);
	
	//ОКЕЙ Щербакова С.В. (СофтЛаб) Начало 2019-12-07 (#3415)
	
	Если ДоступноИсправление() Тогда
		Элементы.Исправление.Доступность = Истина;
	Иначе
		Элементы.Исправление.Доступность = Ложь;	
	КонецЕсли;
	//ОКЕЙ Щербакова С.В. (СофтЛаб) Конец 2019-12-07 (#3415)

	
	// BIT Amerkulov 03092014 --
	
КонецПроцедуры

//***БИТ***Теплова***)


//ОК Калинин М. 021212

// Процедура - обработчик события "НачалоВыбора" полей СубконтоДт
//
&НаКлиенте
Процедура ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,ТекущаяСтрока)

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         Объект.Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
		
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить("СубконтоДт%Индекс%", "%Индекс%", Индекс);
		Если ТипЗнч(ТекущаяСтрока[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущаяСтрока[ИмяПоля]);
		ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ТекущаяСтрока[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущаяСтрока[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущаяСтрока[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущаяСтрока[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;

	
	СписокПараметров.Вставить("СторонаПроводки", "Дт");
    СписокПараметров.Вставить("ЭтоНовыйДокумент",Объект.Ссылка.Пустая());
		
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);


КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
&НаКлиенте
Процедура ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,ТекущаяСтрока)
   
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         Объект.Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетКт);
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить("СубконтоКт%Индекс%", "%Индекс%", Индекс);
		Если ТипЗнч(ТекущаяСтрока[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущаяСтрока[ИмяПоля]);
		ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ТекущаяСтрока[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущаяСтрока[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущаяСтрока[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущаяСтрока[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("СторонаПроводки", "Кт");
    СписокПараметров.Вставить("ЭтоНовыйДокумент",Объект.Ссылка.Пустая());
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, СписокПараметров);
	
	

КонецПроцедуры   

&НаКлиенте
Процедура ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбораРСБУ(Элемент, СтандартнаяОбработка)

	ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.РСБУ.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбораРСБУ(Элемент, СтандартнаяОбработка)

	ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.РСБУ.ТекущиеДанные);

КонецПроцедуры  

&НаКлиенте
Процедура ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбораИсправления(Элемент, СтандартнаяОбработка)
	
	ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.КорректировкаПроводок.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбораИсправления(Элемент, СтандартнаяОбработка)
	
	ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.КорректировкаПроводок.ТекущиеДанные);
		
КонецПроцедуры

//ОК Калинин М.


// ++ БИТ Amerkulov 10022014 / Доработка по НУ {

&НаКлиенте
Процедура РасчетСуммПоНУ(ВидКорреспонденции)
	
	ТекущиеДанные = Элементы.КорректировкаПроводок.ТекущиеДанные;
	
	ТекущиеДанные["СуммаПР" 	+ ВидКорреспонденции] 									= 0;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные["Счет" + ВидКорреспонденции]);
	
	Если ДанныеСчета.НалоговыйУчет  Тогда
		ТекущиеДанные["СуммаНУ" 	+ ВидКорреспонденции]								= ТекущиеДанные.Сумма;		
	Иначе
		ТекущиеДанные["СуммаНУ" 	+ ВидКорреспонденции]								= 0;			
	КонецЕсли;
	
	ЭтоСубконтоНеУчитываемыеВЦеляхНалогообложения = Ложь;
	ЭтоСубконтоПрочиеДоходыИРасходыПринятиеКналоговомуУчету = Ложь;
	
	Для НомерСубконто = 1 По ДанныеСчета.КоличествоСубконто цикл
		ЭтоСубконтоНеУчитываемыеВЦеляхНалогообложения = ЭтоСубконтоНеУчитываемыеВЦеляхНалогообложения(ТекущиеДанные["Субконто" 	+ ВидКорреспонденции + НомерСубконто]);
		Если ЭтоСубконтоНеУчитываемыеВЦеляхНалогообложения Тогда Прервать; КонецЕсли;
	КонецЦикла;
	
	Для НомерСубконто = 1 По ДанныеСчета.КоличествоСубконто цикл
		ЭтоСубконтоПрочиеДоходыИРасходыПринятиеКналоговомуУчету = ЭтоСубконтоПрочиеДоходыИРасходыПринятиеКналоговомуУчету(ТекущиеДанные["Субконто" 	+ ВидКорреспонденции + НомерСубконто]);
		Если ЭтоСубконтоПрочиеДоходыИРасходыПринятиеКналоговомуУчету Тогда Прервать; КонецЕсли;
	КонецЦикла;

			
	Если ЭтоСубконтоНеУчитываемыеВЦеляхНалогообложения Тогда
			ТекущиеДанные["СуммаПР" 	+ ВидКорреспонденции] 							= ТекущиеДанные.Сумма;
			ТекущиеДанные["СуммаНУ" 	+ ВидКорреспонденции]							= 0;	
	КонецЕсли;

	Если ЭтоСубконтоПрочиеДоходыИРасходыПринятиеКналоговомуУчету Тогда
			ТекущиеДанные["СуммаПР" 	+ ВидКорреспонденции] 							= ТекущиеДанные.Сумма;
			ТекущиеДанные["СуммаНУ" 	+ ВидКорреспонденции]							= 0;				
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Функция ЭтоСубконтоПрочиеДоходыИРасходыПринятиеКналоговомуУчету(Субконто)
	Возврат ТипЗнч(Субконто) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")
		И ЗначениеЗаполнено(Субконто)
		И Субконто.ПринятиеКналоговомуУчету = Ложь;
КонецФункции
	
&НаСервере
Функция ЭтоСубконтоНеУчитываемыеВЦеляхНалогообложения(Субконто)
	Возврат ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") И Субконто <> Неопределено 
		И Субконто.ВидРасходовНУ 	= Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения;
КонецФункции

&НаКлиенте
Процедура РСБУСубконтоДт1ПриИзменении(Элемент)

	РасчетСуммПоНУ("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура РСБУСубконтоДт2ПриИзменении(Элемент)
	
	РасчетСуммПоНУ("Дт");

КонецПроцедуры

&НаКлиенте
Процедура РСБУСубконтоДт3ПриИзменении(Элемент)

	РасчетСуммПоНУ("Дт");

КонецПроцедуры

&НаКлиенте
Процедура РСБУСубконтоКт1ПриИзменении(Элемент)

	РасчетСуммПоНУ("Кт");

КонецПроцедуры

&НаКлиенте
Процедура РСБУСубконтоКт2ПриИзменении(Элемент)

	РасчетСуммПоНУ("Кт");

КонецПроцедуры

&НаКлиенте
Процедура РСБУСубконтоКт3ПриИзменении(Элемент)

	РасчетСуммПоНУ("Кт");

КонецПроцедуры

&НаКлиенте
Процедура РСБУСчетДтПриИзменении(Элемент)

	РасчетСуммПоНУ("Дт");

КонецПроцедуры

&НаКлиенте
Процедура РСБУСчетКтПриИзменении(Элемент)

	РасчетСуммПоНУ("Кт");

КонецПроцедуры

&НаКлиенте
Процедура РСБУСуммаПриИзменении(Элемент)

	РасчетСуммПоНУ("Дт"); 
	РасчетСуммПоНУ("Кт");

КонецПроцедуры

// -- БИТ Amerkulov 10022014 }

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РежимЗаписи = ПараметрыЗаписи.РежимЗаписи;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//Автозаполнение реквизитов Период и Организация
		Для Каждого Проводка Из ТекущийОбъект.Движения.Хозрасчетный Цикл
			
			Проводка.Период      = ТекущийОбъект.Дата;
			Проводка.Организация = ТекущийОбъект.Организация;
			
		КонецЦикла;
		
		ТекущийОбъект.Движения.Хозрасчетный.Записывать = Истина;
		
		// Установим флаг "Загружено с ошибкой" если есть не сопоставленные элементы
		ЕстьНеСопоставленные = Ложь;
		Если ТекущийОбъект.Движения.Хозрасчетный.Количество() > 0 Тогда
			// получим все элементы "Не сопоставлено"л
			МассивНеСопоставлено = ПолучитьНеСопоставленные().ВыгрузитьКолонку("Значение");
			
			// обойдём проводки и 
			Для каждого Проводка из ТекущийОбъект.Движения.Хозрасчетный Цикл
				////заполнение незаполненной аналитики справочниками "Не сопоставлено"
				Для каждого Субконто из Проводка.СубконтоДт Цикл
					НайдЭлемент = МассивНеСопоставлено.Найти(Субконто.Значение);
					Если НайдЭлемент <> Неопределено Тогда
						ЕстьНеСопоставленные = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого Субконто из Проводка.СубконтоКт Цикл
					НайдЭлемент = МассивНеСопоставлено.Найти(Субконто.Значение);
					Если НайдЭлемент <> Неопределено Тогда
						ЕстьНеСопоставленные = Истина;
					КонецЕсли;				
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		ТекущийОбъект.ЗагруженоСОшибкой = ЕстьНеСопоставленные;
		
		
		//Автозаполнение реквизитов Период и Организация
		Для Каждого Проводка Из ТекущийОбъект.Движения.Хозрасчетный Цикл
			
			Проводка.Период      = ТекущийОбъект.Дата;
			Проводка.Организация = ТекущийОбъект.Организация;
			
		КонецЦикла;
		
		ТекущийОбъект.Движения.Хозрасчетный.Записывать = Истина;
		
		// Установим флаг "Загружено с ошибкой" если есть не сопоставленные элементы
		Если ТекущийОбъект.Движения.бит_Дополнительный_2.Количество() > 0 Тогда
			// получим все элементы "Не сопоставлено"л
			МассивНеСопоставлено = ПолучитьНеСопоставленные().ВыгрузитьКолонку("Значение");
			
			// обойдём проводки и 
			Для каждого Проводка из ТекущийОбъект.Движения.бит_Дополнительный_2 Цикл
				////заполнение незаполненной аналитики справочниками "Не сопоставлено"
				Для каждого Субконто из Проводка.СубконтоДт Цикл
					НайдЭлемент = МассивНеСопоставлено.Найти(Субконто.Значение);
					Если НайдЭлемент <> Неопределено Тогда
						ЕстьНеСопоставленные = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого Субконто из Проводка.СубконтоКт Цикл
					НайдЭлемент = МассивНеСопоставлено.Найти(Субконто.Значение);
					Если НайдЭлемент <> Неопределено Тогда
						ЕстьНеСопоставленные = Истина;
					КонецЕсли;				
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		ТекущийОбъект.ЗагруженоСОшибкой = ЕстьНеСопоставленные;
	КонецЕсли;
	
	
	// BIT AMerkulov 14-03-2015 ++
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-30 (#3076)
	Если ТекущийОбъект.бтИсправление Тогда 
		СинхронизироватьСДокументомОперация(ТекущийОбъект);	
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-30 (#3076)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-04 (#3124)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ок_ОперацияБух", ок_ОперацияБух);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-04 (#3124)
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-29 (#3076)
&НаСервере
Процедура ЗаполнитьТЧОперацияБухАксапта()
	
	ок_ОперацияБухАксапта.Очистить();
		
	Если 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-14 (#3155)
		Модифицированность ИЛИ
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-14 (#3155)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
		//Не ЗначениеЗаполнено(Объект.бтСсылкаНаДокументОперация) 
		//Заменено на:
		Не ЗначениеЗаполнено(ок_ОперацияБух) 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		
	Тогда 
		
		пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоотЗаписейТрансляцииОбАксЖРБП.Регистратор КАК ОперацияАксапты,
		|	СоотЗаписейТрансляцииОбАксЖРБП.НомерСтрокиПриемника КАК НомерСтрокиРБП,
		|	СоотЗаписейТрансляцииОбАксОпБ.НомерСтрокиПриемника КАК НомерСтрокиОпБ
		|ПОМЕСТИТЬ ВТ0_СоответствиеЖРПБ_ОпБ
		|ИЗ
		|	РегистрСведений.бит_СоответствиеЗаписейТрансляции.СрезПоследних(
		|			&Дата,
		|			Регистратор = &ОперацияАксапты
		|				И Источник = &ОборотыАксапты
		|				И Приемник = &ЖурналПроводок) КАК СоотЗаписейТрансляцииОбАксЖРБП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеЗаписейТрансляции.СрезПоследних(
		|				&Дата,
		|				Регистратор = &ОперацияАксапты
		|					И Источник = &ОборотыАксапты
		|					И Приемник = &ОборотыПоБюджетам) КАК СоотЗаписейТрансляцииОбАксОпБ
		|		ПО СоотЗаписейТрансляцииОбАксЖРБП.Регистратор = СоотЗаписейТрансляцииОбАксОпБ.Регистратор
		|			И СоотЗаписейТрансляцииОбАксЖРБП.НомерСтрокиИсточника = СоотЗаписейТрансляцииОбАксОпБ.НомерСтрокиИсточника
		|
		|СГРУППИРОВАТЬ ПО
		|	СоотЗаписейТрансляцииОбАксЖРБП.Регистратор,
		|	СоотЗаписейТрансляцииОбАксОпБ.НомерСтрокиПриемника,
		|	СоотЗаписейТрансляцииОбАксЖРБП.НомерСтрокиПриемника
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтрокиРБП,
		|	НомерСтрокиОпБ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт КАК ВалютаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт КАК ВалютаКт,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт КАК ПодразделениеДт,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт КАК ПодразделениеКт,
		|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоДт КАК КоличествоДт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК КоличествоКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУДт КАК СуммаНУДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУКт КАК СуммаНУКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРДт КАК СуммаПРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРКт КАК СуммаПРКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРДт КАК СуммаВРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРКт КАК СуммаВРКт,
		|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание,
		|	бит_ОборотыПоБюджетам.Сценарий КАК Сценарий,
		|	бит_ОборотыПоБюджетам.ЦФО КАК ЦФО,
		|	бит_ОборотыПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
		|	бит_ОборотыПоБюджетам.Контрагент КАК Контрагент,
		|	бит_ОборотыПоБюджетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	бит_ОборотыПоБюджетам.Проект КАК Проект,
		|	бит_ОборотыПоБюджетам.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	бит_ОборотыПоБюджетам.БанковскийСчет КАК БанковскийСчет,
		|	бит_ОборотыПоБюджетам.Аналитика_1 КАК Аналитика_1,
		|	бит_ОборотыПоБюджетам.Аналитика_2 КАК Аналитика_2,
		|	бит_ОборотыПоБюджетам.Аналитика_3 КАК Аналитика_3,
		|	бит_ОборотыПоБюджетам.Аналитика_4 КАК Аналитика_4,
		|	бит_ОборотыПоБюджетам.Аналитика_5 КАК Аналитика_5,
		|	бит_ОборотыПоБюджетам.Аналитика_6 КАК Аналитика_6,
		|	бит_ОборотыПоБюджетам.Аналитика_7 КАК Аналитика_7,
		|	бит_ОборотыПоБюджетам.Количество КАК Количество,
		|	бит_ОборотыПоБюджетам.Сумма КАК СуммаОпБ,
		|	бит_ОборотыПоБюджетам.СуммаРегл КАК СуммаРегл,
		|	бит_ОборотыПоБюджетам.СуммаУпр КАК СуммаУпр,
		|	бит_ОборотыПоБюджетам.СуммаСценарий КАК СуммаСценарий,
		|	бит_ОборотыПоБюджетам.СуммаСНДС КАК СуммаСНДС,
		|	бит_ОборотыПоБюджетам.СуммаСНДСРегл КАК СуммаСНДСРегл,
		|	бит_ОборотыПоБюджетам.СуммаСНДСУпр КАК СуммаСНДСУпр,
		|	бит_ОборотыПоБюджетам.СуммаСНДССценарий КАК СуммаСНДССценарий,
		|	бит_ОборотыПоБюджетам.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА бит_ОборотыПоБюджетам.Регистратор ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОтображатьКолонкиБК,
		|	бит_ОборотыПоБюджетам.Период КАК Период		
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &ОперацияАксапты, , ) КАК ХозрасчетныйДвиженияССубконто
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ0_СоответствиеЖРПБ_ОпБ КАК ВТ0_СоответствиеЖРПБ_ОпБ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
		|			ПО ВТ0_СоответствиеЖРПБ_ОпБ.ОперацияАксапты = бит_ОборотыПоБюджетам.Регистратор
		|				И ВТ0_СоответствиеЖРПБ_ОпБ.НомерСтрокиОпБ = бит_ОборотыПоБюджетам.НомерСтроки
		|		ПО (ВТ0_СоответствиеЖРПБ_ОпБ.ОперацияАксапты = ХозрасчетныйДвиженияССубконто.Регистратор)
		|			И (ВТ0_СоответствиеЖРПБ_ОпБ.НомерСтрокиРБП = ХозрасчетныйДвиженияССубконто.НомерСтроки)");
		
		пЗапрос.УстановитьПараметр("Дата"				,	Объект.Дата);
		пЗапрос.УстановитьПараметр("ОперацияАксапты"	,	Объект.Ссылка);
		пЗапрос.УстановитьПараметр("ОборотыАксапты" 	, 	бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ок_ОборотыАксапты));
		пЗапрос.УстановитьПараметр("ЖурналПроводок"		, 	бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.Хозрасчетный));
		пЗапрос.УстановитьПараметр("ОборотыПоБюджетам"  , 	бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам));
		
					
	Иначе 
		пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт КАК ВалютаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт КАК ВалютаКт,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт КАК ПодразделениеДт,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт КАК ПодразделениеКт,
		|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоДт КАК КоличествоДт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоКт КАК КоличествоКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУДт КАК СуммаНУДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУКт КАК СуммаНУКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРДт КАК СуммаПРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРКт КАК СуммаПРКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРДт КАК СуммаВРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРКт КАК СуммаВРКт,		
		|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание,
		|	бит_ОборотыПоБюджетам.Сценарий КАК Сценарий,
		|	бит_ОборотыПоБюджетам.ЦФО КАК ЦФО,
		|	бит_ОборотыПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
		|	бит_ОборотыПоБюджетам.Контрагент КАК Контрагент,
		|	бит_ОборотыПоБюджетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	бит_ОборотыПоБюджетам.Проект КАК Проект,
		|	бит_ОборотыПоБюджетам.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	бит_ОборотыПоБюджетам.БанковскийСчет КАК БанковскийСчет,
		|	бит_ОборотыПоБюджетам.Аналитика_1 КАК Аналитика_1,
		|	бит_ОборотыПоБюджетам.Аналитика_2 КАК Аналитика_2,
		|	бит_ОборотыПоБюджетам.Аналитика_3 КАК Аналитика_3,
		|	бит_ОборотыПоБюджетам.Аналитика_4 КАК Аналитика_4,
		|	бит_ОборотыПоБюджетам.Аналитика_5 КАК Аналитика_5,
		|	бит_ОборотыПоБюджетам.Аналитика_6 КАК Аналитика_6,
		|	бит_ОборотыПоБюджетам.Аналитика_7 КАК Аналитика_7,		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-07 (#3155)
		//|	бит_ОборотыПоБюджетам.Количество КАК Количество,
		//|	бит_ОборотыПоБюджетам.Сумма КАК СуммаОпБ,
		//|	бит_ОборотыПоБюджетам.СуммаРегл КАК СуммаРегл,
		//|	бит_ОборотыПоБюджетам.СуммаУпр КАК СуммаУпр,
		//|	бит_ОборотыПоБюджетам.СуммаСценарий КАК СуммаСценарий,
		//|	бит_ОборотыПоБюджетам.СуммаСНДС КАК СуммаСНДС,
		//|	бит_ОборотыПоБюджетам.СуммаСНДСРегл КАК СуммаСНДСРегл,
		//|	бит_ОборотыПоБюджетам.СуммаСНДСУпр КАК СуммаСНДСУпр,
		//|	бит_ОборотыПоБюджетам.СуммаСНДССценарий КАК СуммаСНДССценарий,
		//Заменено на:
		|	СУММА(бит_ОборотыПоБюджетам.Количество) КАК Количество,
		|	СУММА(бит_ОборотыПоБюджетам.Сумма) КАК СуммаОпБ,
		|	СУММА(бит_ОборотыПоБюджетам.СуммаРегл) КАК СуммаРегл,
		|	СУММА(бит_ОборотыПоБюджетам.СуммаУпр) КАК СуммаУпр,
		|	СУММА(бит_ОборотыПоБюджетам.СуммаСценарий) КАК СуммаСценарий,
		|	СУММА(бит_ОборотыПоБюджетам.СуммаСНДС) КАК СуммаСНДС,
		|	СУММА(бит_ОборотыПоБюджетам.СуммаСНДСРегл) КАК СуммаСНДСРегл,
		|	СУММА(бит_ОборотыПоБюджетам.СуммаСНДСУпр) КАК СуммаСНДСУпр,
		|	СУММА(бит_ОборотыПоБюджетам.СуммаСНДССценарий) КАК СуммаСНДССценарий,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-07 (#3155)
		|	бит_ОборотыПоБюджетам.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА бит_ОборотыПоБюджетам.Регистратор ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОтображатьКолонкиБК,		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-07 (#3155)
		//|	бит_ОборотыПоБюджетам.Период КАК Период
		//Заменено на:
		|	МИНИМУМ(бит_ОборотыПоБюджетам.Период) КАК Период
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-07 (#3155)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &ОперацияБУХ, , ) КАК ХозрасчетныйДвиженияССубконто
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеЗаписейТрансляции.СрезПоследних(
		|				&Дата,
		|				Регистратор = &ОперацияБУХ
		|					И Источник = &ЖурналПроводок
		|					И Приемник = &ОборотыПоБюджетам) КАК СоотЗаписейТрансляцииОбАксЖРБП
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-24 (#3155)
		//|			ПО ((ВЫРАЗИТЬ(СоотЗаписейТрансляцииОбАксЖРБП.Регистратор КАК Документ.бит_ок_ОперацияАксапты)) = бит_ОборотыПоБюджетам.Регистратор)
		//Заменено на:
		|			ПО ((ВЫРАЗИТЬ(СоотЗаписейТрансляцииОбАксЖРБП.Регистратор КАК Документ.ОперацияБУХ)) = бит_ОборотыПоБюджетам.Регистратор)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-24 (#3155)                                        		
		|				И ((ВЫРАЗИТЬ(СоотЗаписейТрансляцииОбАксЖРБП.НомерСтрокиПриемника КАК ЧИСЛО)) = бит_ОборотыПоБюджетам.НомерСтроки)
		|		ПО (СоотЗаписейТрансляцииОбАксЖРБП.Регистратор = ХозрасчетныйДвиженияССубконто.Регистратор)
		|			И (СоотЗаписейТрансляцииОбАксЖРБП.НомерСтрокиИсточника = ХозрасчетныйДвиженияССубконто.НомерСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &ОперацияАксапта, , ) КАК ХозрасчетныйДвиженияССубконтоАксапта
		|		ПО ХозрасчетныйДвиженияССубконто.Период = ХозрасчетныйДвиженияССубконтоАксапта.Период
		|			И ХозрасчетныйДвиженияССубконто.СчетДт = ХозрасчетныйДвиженияССубконтоАксапта.СчетДт
		|			И (ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(ХозрасчетныйДвиженияССубконтоАксапта.СубконтоДт1, НЕОПРЕДЕЛЕНО))
		|			И (ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(ХозрасчетныйДвиженияССубконтоАксапта.СубконтоДт2, НЕОПРЕДЕЛЕНО))
		|			И (ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(ХозрасчетныйДвиженияССубконтоАксапта.СубконтоДт3, НЕОПРЕДЕЛЕНО))
		|			И ХозрасчетныйДвиженияССубконто.СчетКт = ХозрасчетныйДвиженияССубконтоАксапта.СчетКт
		|			И (ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(ХозрасчетныйДвиженияССубконтоАксапта.СубконтоКт1, НЕОПРЕДЕЛЕНО))
		|			И (ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(ХозрасчетныйДвиженияССубконтоАксапта.СубконтоКт2, НЕОПРЕДЕЛЕНО))
		|			И (ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(ХозрасчетныйДвиженияССубконтоАксапта.СубконтоКт3, НЕОПРЕДЕЛЕНО))
		|			И (-ХозрасчетныйДвиженияССубконто.Сумма = ХозрасчетныйДвиженияССубконтоАксапта.Сумма)
		|ГДЕ
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-07 (#3155)
		//|	ХозрасчетныйДвиженияССубконтоАксапта.Регистратор ЕСТЬ NULL");
		//Заменено на:
		|	ХозрасчетныйДвиженияССубконтоАксапта.Регистратор ЕСТЬ NULL
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт,
		|	ХозрасчетныйДвиженияССубконто.Сумма,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
		|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаНУКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаПРКт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРДт,
		|	ХозрасчетныйДвиженияССубконто.СуммаВРКт,
		|	ХозрасчетныйДвиженияССубконто.СчетДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
		|	бит_ОборотыПоБюджетам.ДоговорКонтрагента,
		|	ХозрасчетныйДвиженияССубконто.СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
		|	бит_ОборотыПоБюджетам.Аналитика_1,
		|	бит_ОборотыПоБюджетам.Аналитика_6,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
		|	бит_ОборотыПоБюджетам.Валюта,
		|	бит_ОборотыПоБюджетам.ЦФО,
		|	бит_ОборотыПоБюджетам.НоменклатурнаяГруппа,
		|	бит_ОборотыПоБюджетам.Аналитика_3,
		|	бит_ОборотыПоБюджетам.СтатьяОборотов,
		|	ХозрасчетныйДвиженияССубконто.Содержание,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
		|	бит_ОборотыПоБюджетам.Контрагент,
		|	бит_ОборотыПоБюджетам.Аналитика_2,
		|	бит_ОборотыПоБюджетам.Аналитика_4,
		|	бит_ОборотыПоБюджетам.Проект,
		|	бит_ОборотыПоБюджетам.Аналитика_7,
		|	бит_ОборотыПоБюджетам.БанковскийСчет,
		|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт,
		|	бит_ОборотыПоБюджетам.Аналитика_5,
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	бит_ОборотыПоБюджетам.Сценарий,
		|	ВЫБОР
		|		КОГДА бит_ОборотыПоБюджетам.Регистратор ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|	ИНАЧЕ ИСТИНА
		|	КОНЕЦ");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-07 (#3155)
		           		
		пЗапрос.УстановитьПараметр("Дата"				,	Объект.Дата);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-03 (#3124)
		//пЗапрос.УстановитьПараметр("ОперацияБУХ"		,	Объект.бтСсылкаНаДокументОперация);
		//Заменено на:
		пЗапрос.УстановитьПараметр("ОперацияБУХ"		,	ок_ОперацияБух);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-03 (#3124)
		пЗапрос.УстановитьПараметр("ЖурналПроводок"		, 	бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.Хозрасчетный));
		пЗапрос.УстановитьПараметр("ОборотыПоБюджетам"  , 	бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам));	
		пЗапрос.УстановитьПараметр("ОперацияАксапта"  	, 	Объект.Ссылка);	
		
	КонецЕсли;
	
	Выборка = пЗапрос.Выполнить().Выбрать();
	
	пОтображатьКолонкиБКИсправлений = Ложь;
			Пока Выборка.Следующий() Цикл 
	пСтрокаИсправления = ок_ОперацияБухАксапта.Добавить();
		ЗаполнитьЗначенияСвойств(пСтрокаИсправления, Выборка);
		пСтрокаИсправления.Организация = Объект.Организация;
		
		Элементы.ок_ОперацияБухАксапта.ТекущаяСтрока = пСтрокаИсправления.ПолучитьИдентификатор();
		ОбработатьИзменениеСчета(ЭтотОбъект, "Дт");
		ОбработатьИзменениеСчета(ЭтотОбъект, "Кт");
		
		Если Выборка.ОтображатьКолонкиБК Тогда 
			пОтображатьКолонкиБКИсправлений = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	//Элементы.ок_ОперацияБухАксаптаКолонкиБК.Видимость = пОтображатьКолонкиБКИсправлений;		
			 
	фКэшЗначений.Вставить("ИсправленияПоБК"		  , пОтображатьКолонкиБКИсправлений);
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
			
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений"	  , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      	  , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	
	// Произвольные измерения
	фКэшЗначений.Вставить("Измерения"         	  , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
	фКэшЗначений.Вставить("ИсправленияПоБК"		  , Ложь);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	фКэшЗначений.Вставить("СчетаИсключенияДляОперАХ", бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Проведение по БК", "Список счетов БУ исключений для операции Аксапты", Новый СписокЗначений));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
			
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	//ПриИзмененииСубконтоЗаполнениеАналитик(Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.СубконтоДт1,,1);
	//Заменено на:
	ПриИзмененииСубконтоЗаполнениеАналитик(,1);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	//ПриИзмененииСубконтоЗаполнениеАналитик(Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.СубконтоДт2,,2);
	//Заменено на:
	ПриИзмененииСубконтоЗаполнениеАналитик(,2);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоДт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Дт");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	//ПриИзмененииСубконтоЗаполнениеАналитик(Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.СубконтоДт3,,3);
	//Заменено на:
	ПриИзмененииСубконтоЗаполнениеАналитик(,3);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	//ПриИзмененииСубконтоЗаполнениеАналитик(Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.СубконтоКт1,"Кт",1);
	//Заменено на:
	ПриИзмененииСубконтоЗаполнениеАналитик("Кт",1);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)	
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	//ПриИзмененииСубконтоЗаполнениеАналитик(Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.СубконтоКт2,"Кт",2);
	//Заменено на:
	ПриИзмененииСубконтоЗаполнениеАналитик("Кт",2);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)	
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоКт3ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "Кт");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	//ПриИзмененииСубконтоЗаполнениеАналитик(Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ок_ОперацияБухАксапта.ТекущиеДанные.СубконтоКт3,"Кт",3);
	//Заменено на:
	ПриИзмененииСубконтоЗаполнениеАналитик("Кт",3);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНомерЗаявки()
	
	ок_ДопДанныеОперацииАксапты.Отбор.Документ.ВидСравнения  = ВидСравнения.Равно;
	ок_ДопДанныеОперацииАксапты.Отбор.Документ.Значение	     = Объект.Ссылка;
	ок_ДопДанныеОперацииАксапты.Отбор.Документ.Использование = Истина;
	
	Набор_ДопДанныеОперацииАксапты = РеквизитФормыВЗначение("ок_ДопДанныеОперацииАксапты");
	Набор_ДопДанныеОперацииАксапты.Прочитать();
	ЗначениеВРеквизитФормы(Набор_ДопДанныеОперацииАксапты, "ок_ДопДанныеОперацииАксапты");
	
КонецПроцедуры


&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
	//НачалоВыбораОперБухАксаптаСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	//ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.ок_ОперацияБухАксапта.ТекущиеДанные);
КонецПроцедуры


&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
	
	//НачалоВыбораОперБухАксаптаСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	//ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.ок_ОперацияБухАксапта.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);
	
	//НачалоВыбораОперБухАксаптаСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	//ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.ок_ОперацияБухАксапта.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);
	
	//НачалоВыбораОперБухАксаптаСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	//ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.ок_ОперацияБухАксапта.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);
	
	//НачалоВыбораОперБухАксаптаСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	//ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.ок_ОперацияБухАксапта.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);
	
	//НачалоВыбораОперБухАксаптаСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	//ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбораСтроки(Элемент, СтандартнаяОбработка,Элементы.ок_ОперацияБухАксапта.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСчетДтПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета(ЭтотОбъект, "Дт");
	
	//ТекущиеДанные = Элементы.ок_ОперацияБухАксапта.ТекущиеДанные;
	//		
	//БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
	//	ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаСчетКтПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета(ЭтотОбъект, "Кт");
	
	//ТекущиеДанные = Элементы.ок_ОперацияБухАксапта.ТекущиеДанные;
	//
	//БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоСтрокиПриИзмененииСчета(
	//	ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект,"Кт"));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма,ДтКт = "Дт")

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"ок_ОперацияБухАксаптаСубконто"+ДтКт, "ок_ОперацияБухАксаптаПодразделение"+ДтКт, "Субконто"+ДтКт, "Подразделение"+ДтКт, "Счет"+ДтКт);
		
	Результат.ПоляОбъекта.Вставить("ПодразделениеДоступность", "Подразделение"+ДтКт+"Доступность");
	Результат.ПоляОбъекта.Вставить("УчетПоПодразделениям"	 , "Подразделение"+ДтКт+"Доступность");	
	
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиЗатрат.ПрочиеЗатраты"));
	Результат.ЗначенияПоУмолчанию.Вставить(
		ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"),
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы"));
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.СкрыватьСубконто = Ложь;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура НачалоВыбораОперБухАксаптаСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Элементы.ок_ОперацияБухАксапта.ТекущиеДанные, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСчета(Форма, ДтКт)

	ИдСтроки = Форма.Элементы.ок_ОперацияБухАксапта.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ок_ОперацияБухАксапта.НайтиПоИдентификатору(ИдСтроки);
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = "ок_ОперацияБухАксаптаСубконто" + ДтКт + "1";
	ПоляФормы.Субконто2 = "ок_ОперацияБухАксаптаСубконто" + ДтКт + "2";
	ПоляФормы.Субконто3 = "ок_ОперацияБухАксаптаСубконто" + ДтКт + "3";
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(СтрокаТаблицы["Счет" + ДтКт], Форма, ПоляФормы, Неопределено, Истина, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Подразделение,Валютный,Количественный,Организация");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + "3";
	ПоляОбъекта.Подразделение  = "Подразделение" + ДтКт;
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт;
	ПоляОбъекта.Организация    = Форма.Объект.Организация;
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы["Счет" + ДтКт], СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "", ОчищатьСвязанныеСубконто = Истина)
	
	ИдСтроки = Форма.Элементы.ок_ОперацияБухАксапта.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.ок_ОперацияБухАксапта.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоДт1,СубконтоДт2,СубконтоДт3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоДт%Индекс%", "ок_ОперацияБухАксаптаСубконтоДт%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;
	Если ДтКт <> "Дт" Тогда
		
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		
		Если ОчищатьСвязанныеСубконто Тогда
			ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
		Иначе
			ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоКт1,СубконтоКт2,СубконтоКт3");
			ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
		КонецЕсли;
		
		БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоКт%Индекс%", "ок_ОперацияБухАксаптаСубконтоКт%Индекс%", ПараметрыДокумента);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Форма.Объект.Организация, ТекущиеДанные[ИмяПоляСчетУчета], "Кт");
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.ок_ОперацияБухАксапта.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтотОбъект, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтотОбъект, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	// Субконто
	Для Сч = 1 По 3 Цикл

		// Видимость СубконтоДт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ок_ОперацияБухАксапта.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


		// Выделение не заполненного СубконтоДт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ок_ОперацияБухАксапта.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ок_ОперацияБухАксапта.СубконтоДт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		

		// Видимость СубконтоКт

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ок_ОперацияБухАксапта.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		

		// Выделение не заполненного СубконтоКт
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ок_ОперацияБухАксапта.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ок_ОперацияБухАксапта.СубконтоКт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;

	// ПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ПодразделениеДт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ПодразделениеКт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// Количество и валюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаКоличествоДт");
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаНадписьКоличествоДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйКоличествоКт, ХозрасчетныйНадписьКоличествоКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаКоличествоКт");
	//КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйВалютаДт, ХозрасчетныйВалютнаяСуммаДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаВалютаДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаВалютнаяСуммаДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйВалютаКт, ХозрасчетныйВалютнаяСуммаКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаВалютаКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаВалютнаяСуммаКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ок_ОперацияБухАксапта.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-14 (#3155)
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаПериод");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаЦФО");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаСтатьяОборотов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаПроект");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ок_ОперацияБухАксаптаАналитика_2");
		
	ТолькоПросмотрБК = Истина;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	бит_КонтрольныеЗначенияБюджетов.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК бит_КонтрольныеЗначенияБюджетов
		|ГДЕ
		|	бит_КонтрольныеЗначенияБюджетов.Активность
		|	И бит_КонтрольныеЗначенияБюджетов.Регистратор = &Регистратор");
		
		Запрос.УстановитьПараметр("Регистратор"	, Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ТолькоПросмотрБК = Результат.Пустой();
		
	КонецЕсли;	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр"  , ТолькоПросмотрБК);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-14 (#3155)
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ок_ОперацияБухАксапта.ТекущиеДанные;
	ИдСтроки      = Элементы.ок_ОперацияБухАксапта.ТекущаяСтрока;
	
	Если ИдСтроки <> ИдентификаторСтрокиПроводки Тогда
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ок_ОперацияБухАксаптаСубконтоДт1", "ок_ОперацияБухАксаптаСубконтоДт2", "ок_ОперацияБухАксаптаСубконтоДт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ок_ОперацияБухАксаптаСубконтоКт1", "ок_ОперацияБухАксаптаСубконтоКт2", "ок_ОперацияБухАксаптаСубконтоКт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "", Ложь);
		
		ИдентификаторСтрокиПроводки = ИдСтроки;
	
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
//Процедура ПриИзмененииСубконтоЗаполнениеАналитик(ИдентификаторСтроки, Значение, ДтКт = "Дт", НомерСубконто)
//Заменено на:
&НаКлиенте
Процедура ПриИзмененииСубконтоЗаполнениеАналитик(ДтКт = "Дт", НомерСубконто)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)	

	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-24 (#3155)
	Если НЕ фКэшЗначений.ИсправленияПоБК Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-24 (#3155)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	//ТекущаяСтрока = ок_ОперацияБухАксапта.НайтиПоИдентификатору(ИдентификаторСтроки);
	//Заменено на:
	ТекущаяСтрока = Элементы.ок_ОперацияБухАксапта.ТекущиеДанные;
	
	Если фКэшЗначений.СчетаИсключенияДляОперАХ.НайтиПоЗначению(ТекущаяСтрока["Счет" + ДтКт])<>Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Значение 	  = ТекущаяСтрока["Субконто"+ДтКт+НомерСубконто];
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		ТекущаяСтрока.Аналитика_2 = ПолучитьОбъектСтроительстваДляАналитики2(Значение);	
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
		//ТекущаяСтрока.Аналитика_2 = Значение.Объект;	
		//Заменено на:
		ТекущаяСтрока.Аналитика_2 = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение,"Объект");	
		ТекущаяСтрока.ЦФО = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение,"ОК_Функция");	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
	//Если ТипЗнч(Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
	//	ТекущаяСтрока.ЦФО = Значение.ОК_Функция;	
	//КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Подразделения") Тогда
		ТекущаяСтрока.ЦФО = Значение;	
	КонецЕсли;	
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
		//ТекущаяСтрока.Аналитика_2 = Значение.Объект;	
		//Заменено на:
		ТекущаяСтрока.Аналитика_2 = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение,"Объект");	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ТекущаяСтрока.Контрагент = Значение;
		ТекущаяСтрока.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
		//ТекущаяСтрока.Контрагент		 = Значение.Владелец;
		//Заменено на:
		ТекущаяСтрока.Контрагент		 = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение,"Владелец");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
		ТекущаяСтрока.ДоговорКонтрагента = Значение;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		
		стрРезультат = ПолучитьСтатьюОборотовНаСервере(Значение);
		Если стрРезультат.Свойство("Ошибки") Тогда 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(стрРезультат.Ошибки,,"Объект.ок_ОперацияБухАксапта["+Объект.ок_ОперацияБухАксапта.Индекс(ТекущаяСтрока)+"].Субконто" +ДтКт+ НомерСубконто);
			ТекущаяСтрока.СтатьяОборотов = ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка");
			
		ИначеЕсли стрРезультат.Свойство("СтатьяОборотов") Тогда 
			
			ТекущаяСтрока.СтатьяОборотов = стрРезультат.СтатьяОборотов;
			
		КонецЕсли;		
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
		//Запрос = Новый Запрос;	
		//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
		//|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
		//|ИЗ
		//|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
		//|ГДЕ
		//|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.ПрочиеДоходыИРасходы 
		//| И бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &Статья";					   
		//Запрос.УстановитьПараметр("Статья",Значение);
		//Результат = Запрос.Выполнить();
		//Если НЕ Результат.Пустой() Тогда
		//	Выборка = Результат.Выбрать();
		//	Выборка.Следующий();
		//	ТекущаяСтрока.СтатьяОборотов = Выборка.СтатьяОборотов;	
		//КонецЕсли;                        
		//Заменено на:
		пСтатьяОборотов = ПолучитьСтатьюПДР(Значение);
		Если ЗначениеЗаполнено(пСтатьяОборотов) Тогда 
			ТекущаяСтрока.СтатьяОборотов = пСтатьяОборотов;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)       
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбъектСтроительстваДляАналитики2(ОбъектСтроительства)
	
	пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыСтроительства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|ГДЕ
	|	ОбъектыСтроительства.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ");
	пЗапрос.УстановитьПараметр("Ссылка",	ОбъектСтроительства);
	
	пРезультат = пЗапрос.Выполнить();
	
	Если пРезультат.Пустой() Тогда 
		Возврат ОбъектСтроительства;
	КонецЕсли;
	
	Выборка = пРезультат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтатьюОборотовНаСервере(СтатьяЗатрат);
	
	Возврат ОК_ОбщегоНазначения.ПолучитьСтатьюОборотовНаСервере(СтатьяЗатрат);
			
КонецФункции

Процедура ОчиститьНеиспользуемыеИзмеренияКонтроля(Движение,соотСценарийОчищаемыеПоля,мдЗнчПеречисления,КолонкиТаблицыДвижений)
	
	мОчищаемыеПоля = соотСценарийОчищаемыеПоля.Получить(Движение.Сценарий);
	
	Если мОчищаемыеПоля = Неопределено Тогда 
		
		мОчищаемыеПоля = Новый Массив;
		
		бит_СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", Движение.Сценарий, Новый СписокЗначений, "СписокЗначений"); 					
		
		Для Каждого ЗнчПеречисления ИЗ мдЗнчПеречисления Цикл 
			Если бит_СписокИзмеренийКонтроляБюджета.НайтиПоЗначению(Перечисления.бит_БК_ИзмеренияКонтроляБюджета[ЗнчПеречисления.Имя]) = Неопределено И
				НЕ ЗнчПеречисления.Имя = "Сценарий" И
				НЕ ЗнчПеречисления.Имя = "СтатьяОборотов"			
				Тогда  
				Если КолонкиТаблицыДвижений.Найти(ЗнчПеречисления.Имя)<>Неопределено Тогда 
					мОчищаемыеПоля.Добавить(ЗнчПеречисления.Имя);				
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;  
		
		соотСценарийОчищаемыеПоля.Вставить(Движение.Сценарий, мОчищаемыеПоля);		
		
	КонецЕсли;
	
	Если мОчищаемыеПоля.Количество()>0 Тогда 
		Для Каждого пИмяПоля Из мОчищаемыеПоля Цикл 
			Движение[пИмяПоля] = Неопределено;
		КонецЦикла;			
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-29 (#3076)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-16 (#3101)
&НаКлиенте
Процедура ТранслироватьВБККоманда(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ТранслироватьВБКНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ТранслироватьВБКНаСервере()
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-11 (#3101)
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ВыбранныеОперации"	,	Объект.Ссылка);
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	бит_ок_ОперацияАксапты.Ссылка КАК Ссылка
	//|ИЗ
	//|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный,
	//|	Документ.бит_ок_ОперацияАксапты КАК бит_ок_ОперацияАксапты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	//|		ПО (бит_ОборотыПоБюджетам.Регистратор = бит_ок_ОперацияАксапты.Ссылка)
	//|			И (бит_ОборотыПоБюджетам.Активность)
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК бит_ДополнительныеДанныеПоОперациямАксапты
	//|		ПО (бит_ДополнительныеДанныеПоОперациямАксапты.Документ = бит_ок_ОперацияАксапты.Ссылка)
	//|ГДЕ
	//|	бит_ОборотыПоБюджетам.Регистратор ЕСТЬ NULL
	//|	И бит_ок_ОперацияАксапты.Ссылка В (&ВыбранныеОперации)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	бит_ок_ОперацияАксапты.Ссылка";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//МассивИсточники = Новый Массив;
	//Источник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_ок_ОборотыАксапты");
	//Если ЗначениеЗаполнено(Источник) Тогда
	//	МассивИсточники.Добавить(Источник);
	//КонецЕсли;
	//МассивПриемники = Новый Массив;
	//Приемник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_ОборотыПоБюджетам");
	//Если ЗначениеЗаполнено(Приемник) Тогда
	//	МассивПриемники.Добавить(Приемник);
	//КонецЕсли;
	//Приемник = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное","РегистрНакопления.бит_КонтрольныеЗначенияБюджетов");
	//Если ЗначениеЗаполнено(Приемник) Тогда
	//	МассивПриемники.Добавить(Приемник);
	//КонецЕсли;
	//	
	//ОК_ОбщегоНазначения.ВыполнитьТрансляциюОперацийАксаптыВРегистрыБК(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"), МассивИсточники, МассивПриемники);
	//Заменено на:
	Документы.бит_ок_ОперацияАксапты.ТранслироватьВБК(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-11 (#3101)			
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-16 (#3101)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-14 (#3155)
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	                     	
	ЗаполнитьКэшЗначений();
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
																	, "ок_ОперацияБухАксапта"
																	, фКэшЗначений.ИзмеренияДоп
																	, фКэшЗначений.НастройкиИзмерений);
																	
	

	Элементы.ок_ОперацияБухАксапта.Видимость = Объект.бтИсправление;
	Элементы.ок_ОперацияБухАксапта.Видимость = Объект.бтИсправление;
	Если Объект.бтИсправление Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-21 (#3267)
		Если ЗначениеЗаполнено(Объект.Ссылка)
			 И НЕ ЗначениеЗаполнено(ок_ОперацияБух)
		Тогда 
			ок_ОперацияБух = Документы.бит_ок_ОперацияАксапты.ПолучитьСвязаннуюОперациюБУХ(Объект.Ссылка);
		КонецЕсли;	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-21 (#3267)		
		ЗаполнитьТЧОперацияБухАксапта();
	КонецЕсли;
	
	ОтобразитьНомерЗаявки();	
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоТаблицы(
			ок_ОперацияБухАксапта, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
			
	УстановитьУсловноеОформление();		
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-30 (#3533)
	ок_УправлениеФормами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-30 (#3533)
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-14 (#3155)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-04 (#3275)
&НаСервереБезКонтекста
Функция ПолучитьСтатьюПДР(Статья)
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов,
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл
	|ИЗ
	|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	|ГДЕ
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл ССЫЛКА Справочник.ПрочиеДоходыИРасходы 
	| И бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл = &Статья";					   
	Запрос.УстановитьПараметр("Статья",Статья);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СтатьяОборотов;	
	КонецЕсли;                        
КонецФункции

//ОКЕЙ Щербакова С.В. (СофтЛаб) Начало 2019-11-11 (#3415)
&НаКлиенте
Процедура СоздатьРБП(Команда)
	
	пТекущиеДанные = Элементы.ок_ОперацияБухАксапта.ТекущиеДанные; // Данные строки
	пТекущаяСтрока = Элементы.ок_ОперацияБухАксапта.ТекущаяСтрока; // Индекс строки (идентификатор)
	
	Если пТекущиеДанные <> Неопределено Тогда
		
		РБП_НеСопоставлено = бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Служебные элементы Не сопоставлено", "Расходы будущих периодов");
		
		Если НЕ ЗначениеЗаполнено(пТекущиеДанные.СубконтоДт1)
			ИЛИ пТекущиеДанные.СубконтоДт1 = РБП_НеСопоставлено Тогда
			
			СтруктураОснование = Новый Структура();
			СтруктураОснование.Вставить("Событие", 			"СозданиеРБПизОперацииАксапты");
			СтруктураОснование.Вставить("ОперацияАксапты",	Объект.Ссылка);
			СтруктураОснование.Вставить("ИндексСтроки", 	пТекущаяСтрока);
			СтруктураОснование.Вставить("НомерСтрокиТЧ", 	пТекущаяСтрока + 1);
			СтруктураОснование.Вставить("СтавкаНДС", 		ПолучитьСтавкуНДСДляРБП());
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Основание", СтруктураОснование);
			
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеСозданияРБП", ЭтотОбъект, СтруктураОснование);
			
			ОткрытьФорму("Справочник.РасходыБудущихПериодов.ФормаОбъекта", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = "Выберите строку табличной части ""Исправления"".";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ок_СоздатьРБП");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеСозданияРБП(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		НайденнаяСтрока = ок_ОперацияБухАксапта.Получить(ДополнительныеПараметры.ИндексСтроки);
		НайденнаяСтрока.СубконтоДт1 = РезультатЗакрытия;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОперацияБухАксаптаПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные<> Неопределено Тогда 
		Если ПроверитьПринадлежностьСчетаРБП(Элемент.ТекущиеДанные.СчетДт) Тогда
			Элементы.ок_СоздатьРБП.Доступность = Истина;
		Иначе 
			Элементы.ок_СоздатьРБП.Доступность = Ложь;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПринадлежностьСчетаРБП(ТекущийСчет)
	Если ТекущийСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов) Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ДоступноИсправление()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
		"ВЫБРАТЬ
		|	ВТ_ТЧ.СчетДт КАК СчетДт,
		|	ВТ_ТЧ.Регистратор КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ТЧ
		|ИЗ
		|	&ВТ_ТЧ КАК ВТ_ТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТЧ.СчетДт КАК СчетДт
		|ПОМЕСТИТЬ ВТ_Счета
		|ИЗ
		|	ВТ_ТЧ КАК ВТ_ТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДополнительныеДанныеПоОперациямАксапты КАК бит_ДополнительныеДанныеПоОперациямАксапты
		|		ПО ВТ_ТЧ.Ссылка = бит_ДополнительныеДанныеПоОперациямАксапты.Документ
		|ГДЕ
		|	НЕ бит_ДополнительныеДанныеПоОперациямАксапты.Документ ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ВТ_Счета.СчетДт В ИЕРАРХИИ (&СчетДт)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Счет97
		|ИЗ
		|	ВТ_Счета КАК ВТ_Счета" ;
	
	Запрос.УстановитьПараметр("ВТ_ТЧ", Объект.Движения.Хозрасчетный.Выгрузить());
	Запрос.УстановитьПараметр("СчетДТ", ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	Результат = Запрос.Выполнить().Выгрузить();
	Если  Результат.Количество() = 1 И Результат[0].Счет97 = Ложь Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСтавкуНДСДляРБП()
	
	ЗапросПоНДС = Новый Запрос;
	ЗапросПоНДС.Текст = 
		"ВЫБРАТЬ
		|	СчетаТЧ.СчетДт КАК СчетДт
		|ПОМЕСТИТЬ ВТ_Счета
		|ИЗ
		|	&СчетаТЧ КАК СчетаТЧ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Счета.СчетДт КАК СчетДт
		|ИЗ
		|	ВТ_Счета КАК ВТ_Счета
		|ГДЕ
		|	ВТ_Счета.СчетДт В ИЕРАРХИИ(&СчетНДС)"
	;
	ЗапросПоНДС.УстановитьПараметр("СчетаТЧ", ок_ОперацияБухАксапта.Выгрузить(,"СчетДт"));
	ЗапросПоНДС.УстановитьПараметр("СчетНДС", ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям);
	Результат = ЗапросПоНДС.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;
	
КонецФункции
//ОКЕЙ Щербакова С.В. (СофтЛаб) Конец 2019-11-11 (#3415)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-04 (#3275)
