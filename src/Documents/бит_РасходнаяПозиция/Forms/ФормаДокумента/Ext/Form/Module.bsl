
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьТипВидаОперации(ЭтотОбъект);
	КонецЕсли;

	ТекущаяДатаПлатежаКрайняя = Объект.ДатаПлатежаКрайняя;
	ТекущаяДатаРасхода		  = Объект.ДатаРасхода;
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	// Заполним текст про платежный документ.
	ЗаполнитьТекстПроДокументЗатрат();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	УправлениеЭлементомВидОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Рассчитаем сумму без НДС для отображения на форме.
	РассчитатьСуммуБезНДС(Объект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьТипВидаОперации(ЭтотОбъект);
	ОбновитьПараметрыСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_РасходнаяПозиция";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаРасхода".
// 
&НаКлиенте 
Процедура ДатаРасходаПриИзменении(Элемент)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаРасхода"  , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	
	Если Не бит_Казначейство.ДатаРасходаКорректна(СтруктураПараметров, Истина) Тогда
		Объект.ДатаРасхода = ТекущаяДатаРасхода;
		Возврат;
	КонецЕсли; 
	
	ТекущаяДатаРасхода = Объект.ДатаРасхода;
	
	СтруктураПараметров.Вставить("Дата"				 , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", Объект.ДатаПлатежаКрайняя);
	
	Если ЗначениеЗаполнено(Объект.ДатаПлатежаКрайняя) 
		И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Ложь) Тогда
		
		Объект.ДатаПлатежаКрайняя = Объект.ДатаРасхода;
		ТекущаяДатаПлатежаКрайняя = Объект.ДатаРасхода;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаПлатежаКрайняя".
// 
&НаКлиенте 
Процедура ДатаПлатежаКрайняяПриИзменении(Элемент)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"				 , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", Объект.ДатаПлатежаКрайняя);
	
	Если бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Истина) Тогда
		Объект.ДатаПлатежаКрайняя = ТекущаяДатаПлатежаКрайняя;
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаПлатежаКрайняя = Объект.ДатаПлатежаКрайняя;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма".
// 
&НаКлиенте 
Процедура СуммаПриИзменении(Элемент)
	
	// Изменим значения сумм 
	ПроверитьОстатокПоСтроке(Объект);
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС(Объект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтавкаНДС".
// 
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	// Изменим значения сумм в строке распределения.
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС(Объект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи "ГиперссылкаДокументЗатрат".
// 
&НаКлиенте
Процедура ГиперссылкаДокументЗатратНажатие(Элемент)
	
	// Если документа затрат нет, то и открывать нечего.
	Если НЕ ЗначениеЗаполнено(мДокументЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	// Откроем платежный документ.
	бит_КазначействоКлиент.ОткрытьПлатежныйДокумент(Объект.Ссылка, ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасходногоДокументаПриИзменении(Элемент)
	
	УстановитьТипВидаОперации(ЭтотОбъект);
	УправлениеЭлементомВидОперации(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура СоздатьДокументЗатрат(Команда)
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Документ изменен. Перед созданием документа затрат его необходимо записать. Записать?'");
					   
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗаписатьДокумент", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 30, ,НСтр("ru = 'Документ изменен'"));
	Иначе
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДатаРасхода", Объект.ДатаРасхода);
		
		СозданныйДокумент = СоздатьДокументЗатратСервер(СтруктураПараметров);
		ПоказатьЗначение(,СозданныйДокумент);		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	
	Если Статус = Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеЭлементомВидОперации(Форма)
	
	Элементы = Форма.Элементы;
	Объект 	 = Форма.Объект;
	
	Если Объект.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.ПоступлениеДопРасходов")
		ИЛИ Объект.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.ПустаяСсылка") Тогда
		
		Элементы.ВидОперации.АвтоОтметкаНезаполненного = Ложь;	
		Элементы.ВидОперации.ОтметкаНезаполненного = Ложь;	
	Иначе
		Элементы.ВидОперации.АвтоОтметкаНезаполненного = Истина;	
		Элементы.ВидОперации.ОтметкаНезаполненного = Истина;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ВидыРасходныхДокументов"		   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыРасходныхДокументов));
	КэшПеречисления.Вставить("СтавкиНДС"				   		   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Статусы расходной позиции.
	КэшированныеЗначения.Вставить("РасходнаяПозиция_Рабочая", Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Рабочая);
	КэшированныеЗначения.Вставить("РасходнаяПозиция_Закрыта", Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта);
	КэшированныеЗначения.Вставить("РасходнаяПозиция_Выполнена", Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Выполнена);
	
	КэшированныеЗначения.Вставить("ВалютаРеглУчета"		, Константы.ВалютаРегламентированногоУчета.Получить());
	
	КэшированныеЗначения.Вставить("флЭтоБухгалтерияПредприятия"  , Истина);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим процент превышения суммы заявки.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"		  , Объект.ДокументОснование.ЦФО);
	
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Объект.Дата,, СтруктураПараметров, "Ошибки");
	
	ПроцентПревышения  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.ДопустимыйПроцентПревышенияСуммыЗаявкиНаЗатраты);
	
	КэшированныеЗначения.Вставить("ПроцентПревышенияСуммыЗаявки", ПроцентПревышения);
	
	// Получим признак того, что расчеты ведутся в условных единицах.
	РасчетыВУЕ = Объект.ДокументОснование.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	КэшированныеЗначения.Вставить("РасчетыВУЕ", РасчетыВУЕ);
	
	КэшированныеЗначения.Вставить("ДоговорОснования"	, Объект.ДокументОснование.ДоговорКонтрагента);
	
КонецПроцедуры

// Заполняет текст про документ затрат в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьТекстПроДокументЗатрат()

	// Для новой расходной позиции не надо искать платежный документ.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	мДокументЗатрат = бит_Казначейство.НайтиПлатежныйДокументПоПлатежнойПозиции(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(мДокументЗатрат) Тогда
		
		Элементы.ГиперссылкаДокументЗатрат.Заголовок   = Строка(мДокументЗатрат);
		Элементы.ГиперссылкаДокументЗатрат.ГиперСсылка = Истина;
		
	Иначе
		Элементы.ГиперссылкаДокументЗатрат.Заголовок   = "Документ затрат";
		Элементы.ГиперссылкаДокументЗатрат.ГиперСсылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
																			 
	Элементы.ВидРасходногоДокумента.ТолькоПросмотр = ЗначениеЗаполнено(мДокументЗатрат);																		 
	
	// Для некоторых ролей(например, бит_рлс_ИсполнительЗаявкиНаЗатраты) создание бух.документов запрещено
	// скроем кнопку для таких ролей.
	Если ЗначениеЗаполнено(Объект.ВидРасходногоДокумента) Тогда
		ИмяДокумента = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ВидыРасходныхДокументов, Объект.ВидРасходногоДокумента); 
		МетаРасходныйДокумент = Метаданные.Документы[ИмяДокумента];
		Элементы.ФормаСоздатьДокументЗатрат.Видимость = ПравоДоступа("Добавление", МетаРасходныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Функция получает струтуру сумм остатка.
// 
// Параметры:
//  нет
// 
&НаСервереБезКонтекста  
Функция ПолучитьСтруктуруОстатка(Заявка, РасходнаяПозиция)
	 
	СтруктураСтрокиОстатка = Документы.бит_ЗаявкаНаЗатраты.ПолучитьОстаткиПоЗаявке(Заявка, РасходнаяПозиция);
	Возврат СтруктураСтрокиОстатка;
	
КонецФункции

// Функция выполняет запись документа.
// 
// Параметры:
// 	нет
// 
// Возвращаемое значение:
// 	ДействиеВыполнено - булево 
// 
&НаСервере
Функция ЗаписатьПровестиДокумент()
	
	Если Объект.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Запишем документ.
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОбъект, РежимЗаписи,, "Ошибки");
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Процедура выполняет действия необходимые при создании документа затрат.
// 
// Параметры:
// 	нет
// 
&НаСервере
Функция СоздатьДокументЗатратСервер(СтруктураПараметров)
	
	СозданныйДокумент = бит_ДоговораСервер.СоздатьДокументЗатрат(Объект.Ссылка, РежимЗаписиДокумента.Запись, СтруктураПараметров, "Ошибки");
	
	Если НЕ СозданныйДокумент = Неопределено Тогда 
		// Заполним текст про документ затрат.
		ЗаполнитьТекстПроДокументЗатрат();
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	Возврат СозданныйДокумент;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипВидаОперации(Форма)
	
	Элементы = Форма.Элементы;
	Объект 	 = Форма.Объект;
	
	Если Объект.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.АвансовыйОтчет") Тогда
		Элементы.ВидОперации.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийАвансовыйОтчет");
	ИначеЕсли Объект.ВидРасходногоДокумента = ПредопределенноеЗначение("Перечисление.бит_ВидыРасходныхДокументов.ПоступлениеТоваровУслуг") Тогда
		Элементы.ВидОперации.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг");
	Иначе
		Элементы.ВидОперации.ОграничениеТипа = Новый ОписаниеТипов();
		Объект.ВидОперации = Неопределено;
	КонецЕсли;
	
	Объект.ВидОперации = Элементы.ВидОперации.ОграничениеТипа.ПривестиЗначение(Объект.ВидОперации);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура расчитывает суммму без НДС.
// 
// Параметры:
//  Контейнер - Объект, СтрокаТабличнойЧасти.
// 
&НаКлиенте
Процедура РассчитатьСуммуБезНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.СуммаБезНДС = Контейнер.Сумма - Контейнер.СуммаНДС;
																							
КонецПроцедуры

// Процедура расчитывает суммму НДС.
// 
// Параметры:
//  Контейнер - Объект, СтрокаТабличнойЧасти.
// 
&НаКлиенте 
Процедура РассчитатьСуммуНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС
																	   ,мКэшЗначений.Перечисления.СтавкиНДС);
	
	Контейнер.СуммаНДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
																	  	,Истина
																		,Истина
																		,СтавкаНДСЧисло);
																							
КонецПроцедуры

// Процедура проверяет возможность ввода суммы 
// В случае превышения суммы заявки выдается предупреждение и сумма корректируется.
// 
// Параметры:
//  Контейнер - 
// 
&НаКлиенте 
Процедура ПроверитьОстатокПоСтроке(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстСообщения = "";
	
	ПроцентПревышения = мКэшЗначений.ПроцентПревышенияСуммыЗаявки;
	
	// Получим структуру строки остатка.
	СтруктураСтрокиОстатка = ПолучитьСтруктуруОстатка(Объект.ДокументОснование, Объект.Ссылка);
	
	ПредельнаяСумма = СтруктураСтрокиОстатка.СуммаЗаявки * (100 + ПроцентПревышения) / 100;
	СуммаКонтроль	= СтруктураСтрокиОстатка.СуммаРП + Контейнер.Сумма;
	
	Если СуммаКонтроль > ПредельнаяСумма Тогда
		
		ТекстСообщения = "Сумма расходных позиций "
						 + бит_ОбщегоНазначения.ФорматСумм(СуммаКонтроль, Объект.ВалютаДокумента)
						 + " превысила сумму заявки "
						 + бит_ОбщегоНазначения.ФорматСумм(СтруктураСтрокиОстатка.СуммаЗаявки, Объект.ВалютаДокумента);
						 
		Если Не ПроцентПревышения = 0 Тогда
			
			ТекстСообщения = ТекстСообщения	
							 + " более чем на "
							 + ПроцентПревышения
							 + "%";
			
		КонецЕсли; 				  
		
		ТекстСообщения = ТекстСообщения + ". Сумма расходной позиции будет скорректирована.";
		
		ПоказатьПредупреждение(,ТекстСообщения, 30);
		
		Контейнер.Сумма = СтруктураСтрокиОстатка.Сумма;
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросЗаписатьДокумент(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДействиеВыполнено = ЗаписатьПровестиДокумент();
		
		Модифицированность = НЕ ДействиеВыполнено;
		
	    СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДатаРасхода", Объект.ДатаРасхода);
		
		СозданныйДокумент = СоздатьДокументЗатратСервер(СтруктураПараметров);
		ПоказатьЗначение(,СозданныйДокумент);		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти
