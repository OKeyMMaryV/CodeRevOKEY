#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.
Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.
Перем мТекущийСтатус Экспорт; // Хранит текущий статус.
Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения <> Тип("Структура") И ТипДанныхЗаполнения = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Основание") Тогда
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения.Основание);
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") Тогда 	
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
// 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив();
	
	бит_ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	Если НЕ ДокументОснование.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Документ основание ""%1%"" не проведен. Проведение не возможно.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ДокументОснование);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,, Отказ);
	КонецЕсли;
	
	Если ВидРасходногоДокумента = Перечисления.бит_ВидыРасходныхДокументов.ПоступлениеДопРасходов
		ИЛИ ВидРасходногоДокумента = Перечисления.бит_ВидыРасходныхДокументов.ПустаяСсылка() Тогда
		НепроверяемыеРеквизиты.Добавить("ВидОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);	
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
	Если НЕ Отказ Тогда
		ПересчитатьСуммы();
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
	
	Если НЕ Отказ Тогда
		// Установим статус документа.
		УстановитьСтатус();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента 		 = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокументаОснования = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл"));
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВзаиморасчетовПоДокументу(ДокументОснование,ДокументОснование.Метаданные(),Дата);
	
	СтруктураКурсыВалют.Вставить("Взаиморасчеты",СтрКурса);
	
	ТаблицаЗатрат = ПодготовитьТаблицуПланируемыеЗатраты();
	
	// Выполним движения
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураШапкиДокументаОснования,СтруктураКурсыВалют,ТаблицаЗатрат,Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Проверим допустимость отмены проведения 
	Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта
		ИЛИ мТекущийСтатус = Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Выполнена Тогда
		
		ТекстСообщения = НСтр("ru = 'Отмена проведения документа: %1%'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СокрЛП(Ссылка));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		ТекстСообщения = НСтр("ru = 'Документ в статусе ""%1%"", отмена проведения не возможна!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СокрЛП(мТекущийСтатус));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,, Отказ);
		
	КонецЕсли; 
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выполняет пересчет сумм документа в разные валюты.
// 
Процедура ПересчитатьСуммы() Экспорт

	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Регл,Упр"));
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("СуммаНДС");
	
	бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(ЭтотОбъект,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);

	// Для вывода структуры подчиненности
	СуммаДокумента = Сумма;
	
КонецПроцедуры

// Процедура устанавливает статус документа.
// 
// Параметры:
// 	Нет.
// 
Процедура Удалить_УстановитьСтатус() Экспорт
	
	Если мТекущийСтатус <> Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта Тогда
		
		Статус = Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Рабочая;
		
		// Если статус изменился - запишем его
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			КонецЕсли; 	
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция определяет текущий статус заявки на затраты.
// 
// Параметры:
//  ТекущийОбъект    - ДокументСсылка.бит_ЗаявкаНаЗатраты.
//  НачальныйСтатус  - текущее значение статуса.
//  ВсеВизыПолучены  - Булево.
//  ЗатратыСтруктура  - Структура.
// 
// Возвращаемое значение:
//   РезСтатус   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСтатусРасходнойПозиции(ТекущийОбъект,НачальныйСтатус,ЗатратыСтруктура) Экспорт

	РезСтатус = НачальныйСтатус;
	
	СуммаЗатраты = ЗатратыСтруктура.СуммаЗатраты + ЗатратыСтруктура.СуммаЗакрыта;
	
	// Установим статус по затратам
	Если СуммаЗатраты>0 
		 И СуммаЗатраты>=ЗатратыСтруктура.СуммаПлан Тогда
		 РезСтатус = Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Выполнена;
	Иначе
		 РезСтатус = Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Рабочая;
	КонецЕсли; 
	
	Возврат РезСтатус;
  
КонецФункции

// Процедура устанавливает статус документа.
// 
// Параметры:
// 	Нет.
// 
Процедура УстановитьСтатус() Экспорт
	
	Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗатратыСтруктура = бит_ДоговораСервер.ПолучитьЗатратыПоРасходнойПозиции(Ссылка);
	ЗатратыСтруктура.СуммаПлан = Сумма;
	
	// Определим статус заявки
	Статус = ОпределитьСтатусРасходнойПозиции(ЭтотОбъект,мТекущийСтатус,ЗатратыСтруктура);

	// Если статус изменился - запишем его
	Если мТекущийСтатус <> Статус Тогда
		
		ДатаИзмененияСтатуса = ТекущаяДата();
		
		ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																	,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																	,Статус
																	,мТекущийСтатус
																	,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																	,ДатаИзмененияСтатуса);
		
		Если ДействиеВыполнено Тогда
			
			мТекущийСтатус = Статус;
			мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура расчитывает суммму НДС.
// 
// 
Процедура РассчитатьСуммуНДС(Контейнер) Экспорт

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Контейнер.СуммаНДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
												,Истина
												,СуммаВключаетНДС
												,бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС));
																							
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет шапку документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.бит_РасходнаяПозиция.
// 
Процедура ЗаполнитьШапкуДокумента()
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Дата) Тогда
		ЭтотОбъект.Дата =  ТекущаяДатаСеанса();	
	КонецЕсли;
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, ТекущийПользователь,,, Ложь);
												
КонецПроцедуры

// Функция готовит таблицу по планируемым затратам для проведения.
// 
// 
// Возвращаемое значение:
//   РезТаблица   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуПланируемыеЗатраты()

	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ВЫБОР
    |		КОГДА &БДРПланируетсяСНДС = ИСТИНА
    |			ТОГДА бит_РасходнаяПозиция.Сумма
    |		ИНАЧЕ бит_РасходнаяПозиция.Сумма - бит_РасходнаяПозиция.СуммаНДС
    |	КОНЕЦ КАК Сумма,
	|	бит_РасходнаяПозиция.СтавкаНДС,
	|	бит_РасходнаяПозиция.СуммаНДС,
	|	бит_ЗаявкаНаЗатраты.ЦФО,
	|	бит_ЗаявкаНаЗатраты.СтатьяОборотов,
	|	бит_ЗаявкаНаЗатраты.Проект,
	|	бит_ЗаявкаНаЗатраты.ДоговорКонтрагента,
	|	бит_ЗаявкаНаЗатраты.НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаЗатраты.Аналитика_1,
	|	бит_ЗаявкаНаЗатраты.Аналитика_2,
	|	бит_ЗаявкаНаЗатраты.Аналитика_3,
	|	бит_ЗаявкаНаЗатраты.Аналитика_4,
	|	бит_ЗаявкаНаЗатраты.Аналитика_5,
	|	бит_ЗаявкаНаЗатраты.Аналитика_6,
	|	бит_ЗаявкаНаЗатраты.Аналитика_7
	|ИЗ
	|	Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаЗатраты КАК бит_ЗаявкаНаЗатраты
	|		ПО бит_РасходнаяПозиция.ДокументОснование = бит_ЗаявкаНаЗатраты.Ссылка
	|ГДЕ
	|	бит_РасходнаяПозиция.Ссылка = &РасходнаяПозиция
	|	И бит_ЗаявкаНаЗатраты.Ссылка = &Заявка
	|	И бит_РасходнаяПозиция.Сумма <> 0";
	
	Запрос.УстановитьПараметр("РасходнаяПозиция",Ссылка);
	Запрос.УстановитьПараметр("Заявка",ДокументОснование);
	
	БДРПланируетсяСНДС = бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("бит_БДРПланируетсяСНДС");
	Запрос.УстановитьПараметр("БДРПланируетсяСНДС", БДРПланируетсяСНДС);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;

КонецФункции

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураШапкиДокументаОснования,СтруктураКурсыВалют,ТаблицаЗатрат,Отказ,Заголовок)
	
	 // Движения по регистру бит_ПланируемыеЗатраты.
	 
	// Отразим планируемый расход по платежной позиции.
	ТаблицаДвижений = Движения.бит_ПланируемыеЗатраты.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаЗатрат Из ТаблицаЗатрат Цикл
		
	    СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		СтрокаДвижений.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Валюта      = СтруктураШапкиДокумента.ВалютаДокумента;
		
		СтрокаДвижений.Контрагент           = СтруктураШапкиДокументаОснования.Контрагент;
		
		СтрокаДвижений.СтатьяОборотов       = СтрокаЗатрат.СтатьяОборотов;
		СтрокаДвижений.Проект               = СтрокаЗатрат.Проект;
		СтрокаДвижений.ЦФО                  = СтрокаЗатрат.ЦФО;
		СтрокаДвижений.НоменклатурнаяГруппа = СтрокаЗатрат.НоменклатурнаяГруппа;	
		СтрокаДвижений.ДоговорКонтрагента   = СтрокаЗатрат.ДоговорКонтрагента;
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		Для н = 1 По МаксКолвоДопАналитик Цикл
			СтрокаДвижений["Аналитика_"+н]	= СтрокаЗатрат["Аналитика_"+н];
		КонецЦикла;
		
		СтрокаДвижений.ДокументПланирования = СтруктураШапкиДокумента.Ссылка;
		
		СтрокаДвижений.Сумма = СтрокаЗатрат.Сумма; 
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	Движения.бит_ПланируемыеЗатраты.мПериод          = СтруктураШапкиДокумента.ДатаРасхода;
	Движения.бит_ПланируемыеЗатраты.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ПланируемыеЗатраты.ВыполнитьПриход();
	
	// Снимем данную сумму с заявки
	
	ТаблицаДвижений = Движения.бит_ПланируемыеЗатраты.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаЗатрат Из ТаблицаЗатрат Цикл
		
	    СтрокаДвиженийЗатрат = ТаблицаДвижений.Добавить();		
		
		СтрокаДвиженийЗатрат.Организация = СтруктураШапкиДокумента.Организация;
		СтрокаДвиженийЗатрат.Валюта      = СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаДвиженийЗатрат.СтатьяОборотов       = СтрокаЗатрат.СтатьяОборотов;
		СтрокаДвиженийЗатрат.Проект               = СтрокаЗатрат.Проект;
		СтрокаДвиженийЗатрат.ЦФО                  = СтрокаЗатрат.ЦФО;
		СтрокаДвиженийЗатрат.НоменклатурнаяГруппа = СтрокаЗатрат.НоменклатурнаяГруппа;		
		СтрокаДвиженийЗатрат.Контрагент           = СтруктураШапкиДокументаОснования.Контрагент;
		СтрокаДвиженийЗатрат.ДоговорКонтрагента   = СтрокаЗатрат.ДоговорКонтрагента;
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		Для н = 1 По МаксКолвоДопАналитик Цикл
			СтрокаДвиженийЗатрат["Аналитика_"+н]  = СтрокаЗатрат["Аналитика_"+н];
		КонецЦикла;
		
		СтрокаДвиженийЗатрат.ДокументПланирования = СтруктураШапкиДокумента.ДокументОснование;
		
		СтрокаДвиженийЗатрат.Сумма              = СтрокаЗатрат.Сумма; 
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвиженийЗатрат,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	Движения.бит_ПланируемыеЗатраты.мПериод          = СтруктураШапкиДокументаОснования.ДатаРасхода;
	Движения.бит_ПланируемыеЗатраты.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ПланируемыеЗатраты.ВыполнитьРасход();
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(ДокументОснование)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	бит_ЗаявкаНаЗатраты.Ссылка КАК ДокументОснование,
		|	бит_ЗаявкаНаЗатраты.Важность КАК Важность,
		|	бит_ЗаявкаНаЗатраты.ДатаРасхода КАК ДатаРасхода,
		|	бит_ЗаявкаНаЗатраты.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя,
		|	бит_ЗаявкаНаЗатраты.ВалютаДокумента КАК ВалютаДокумента,
		|	бит_ЗаявкаНаЗатраты.КурсДокумента КАК КурсДокумента,
		|	бит_ЗаявкаНаЗатраты.СтавкаНДС КАК СтавкаНДС,
		|	бит_ЗаявкаНаЗатраты.КратностьДокумента КАК КратностьДокумента,
		|	бит_ЗаявкаНаЗатраты.ВидРасходногоДокумента КАК ВидРасходногоДокумента,
		|	бит_ЗаявкаНаЗатраты.СодержаниеЗатрат КАК СодержаниеЗатрат,
		|	бит_ЗаявкаНаЗатраты.Организация КАК Организация,
		|	бит_ЗаявкаНаЗатраты.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	бит_ЗаявкаНаЗатраты.Сумма КАК Сумма,
		|	бит_ЗаявкаНаЗатраты.ВидОперации КАК ВидОперации
		|ИЗ
		|	Документ.бит_ЗаявкаНаЗатраты КАК бит_ЗаявкаНаЗатраты
		|ГДЕ
		|	бит_ЗаявкаНаЗатраты.Ссылка = &ДокументОснование";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если  Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка,, "Сумма");
		КонецЕсли;
		
		Остатки				= Документы.бит_ЗаявкаНаЗатраты.ПолучитьОстаткиПоЗаявке(ДокументОснование);
		ЭтотОбъект.Сумма	= Остатки.Сумма;
		ЭтотОбъект.СуммаНДС	= бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(ЭтотОбъект.Сумма, Истина, Выборка.СуммаВключаетНДС
																				,бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Выборка.СтавкаНДС)); 
																				
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_РасходнаяПозиция") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	бит_РасходнаяПозиция.ДокументОснование КАК ДокументОснование,
		|	бит_РасходнаяПозиция.Важность КАК Важность,
		|	бит_РасходнаяПозиция.ДатаРасхода КАК ДатаРасхода,
		|	бит_РасходнаяПозиция.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя,
		|	бит_РасходнаяПозиция.ВалютаДокумента КАК ВалютаДокумента,
		|	бит_РасходнаяПозиция.КурсДокумента КАК КурсДокумента,
		|	бит_РасходнаяПозиция.СтавкаНДС КАК СтавкаНДС,
		|	бит_РасходнаяПозиция.Сумма КАК Сумма,
		|	бит_РасходнаяПозиция.СуммаНДС КАК СуммаНДС,
		|	бит_РасходнаяПозиция.ВидРасходногоДокумента КАК ВидРасходногоДокумента,
		|	бит_РасходнаяПозиция.СодержаниеЗатрат КАК СодержаниеЗатрат,
		|	бит_РасходнаяПозиция.Ответственный КАК Ответственный,
		|	бит_РасходнаяПозиция.Комментарий КАК Комментарий,
		|	бит_РасходнаяПозиция.РучнаяКорректировка КАК РучнаяКорректировка,
		|	бит_РасходнаяПозиция.Организация КАК Организация,
		|	бит_РасходнаяПозиция.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	бит_РасходнаяПозиция.КратностьДокумента КАК КратностьДокумента,
		|	бит_РасходнаяПозиция.СуммаРегл КАК СуммаРегл,
		|	бит_РасходнаяПозиция.СуммаНДСРегл КАК СуммаНДСРегл,
		|	бит_РасходнаяПозиция.СуммаУпр КАК СуммаУпр,
		|	бит_РасходнаяПозиция.СуммаНДСУпр КАК СуммаНДСУпр,
		|	бит_РасходнаяПозиция.ДокументЗатрат КАК ДокументЗатрат,
		|	бит_РасходнаяПозиция.СуммаДокумента КАК СуммаДокумента,
		|	бит_РасходнаяПозиция.ВидОперации КАК ВидОперации
		|ИЗ
		|	Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
		|ГДЕ
		|	бит_РасходнаяПозиция.Ссылка = &Ссылка";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если  Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		КонецЕсли;
		
		Остатки = Документы.бит_ЗаявкаНаЗатраты.ПолучитьОстаткиПоЗаявке(ЭтотОбъект.ДокументОснование);
		Если ЭтотОбъект.Сумма > Остатки.Сумма Тогда
			ЭтотОбъект.Сумма = Остатки.Сумма;
			бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(ЭтотОбъект.Сумма, Истина, ЭтотОбъект.СуммаВключаетНДС
																				,бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ЭтотОбъект.СтавкаНДС));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета  = Константы.ВалютаРегламентированногоУчета.Получить();

мНастройкиПрограммы = Новый Соответствие;

РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

#КонецОбласти

#КонецЕсли
