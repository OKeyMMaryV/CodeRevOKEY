
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Свойство("ДокументОснование") Тогда
	
		Если ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
			ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мто_ВыдачаТМЦПоЗаявкамНаПотребность"));
			ДокОбъект.Заполнить(Параметры.ДокументОснование);
			ЗначениеВДанныеФормы(ДокОбъект, Объект);
		КонецЕсли; 
				
	КонецЕсли; 
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
			
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_мто_ВыдачаТМЦПоЗаявкамНаПотребность";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		
		// Надо отследить момент окончания проведения или отказа от него
		// в веб-клиенте функциональность отключена, т.к. приводит к возникновению исключения.
		ПодключитьОбработчикОжидания("ОжиданиеПроведенияДокумента", 0.1, Истина);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТоварыНоменклатураПриИзмененииНаСервере(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДокументОснованиеНачалоВыбораНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	мКэшЗначений = Новый Структура;
	
	ДокументЗаявкаНаПотребность = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мто_ВыдачаТМЦПоЗаявкамНаПотребность"));
	
	// Запишем параметр для формирования заголовка.
	мКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляем видимостью-доступностью элементов формы. 
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()

	
	
КонецПроцедуры // УправлениеЭлементамиФормы()

// Процедура является обработчиком ожидания, отслеживает окончание транзакции записи/проведения документа.
// 
&НаКлиенте
Процедура ОжиданиеПроведенияДокумента()
	
	ОтключитьОбработчикОжидания("ОжиданиеПроведенияДокумента");
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	Объект.Товары.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		СтрВозврата = бит_мто.ПроверитьВозможностьСозданияДокументаВыдачи(Объект.ДокументОснование);
	
		Если НЕ СтрВозврата.Возможно Тогда
			
			Если ЗначениеЗаполнено(СтрВозврата.ТекстСообщения) Тогда
			
				ТекстСообщения = СтрВозврата.ТекстСообщения;
				
			Иначе	
				ТекстСообщения =  НСтр("ru = 'Превышен остаток по номенклатуре!'");
			КонецЕсли; 
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Объект.ДокументОснование = Документы.бит_мто_ЗаявкаНаПотребность.ПустаяСсылка();
			Возврат;
			
		КонецЕсли; 
		
		ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мто_ВыдачаТМЦПоЗаявкамНаПотребность"));
		ДокОбъект.ЗаполнитьПоОснованию(Объект.ДокументОснование);
		ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ИД)
	
	ТекДанные = Объект.Товары.НайтиПоИдентификатору(ИД);
	ТекДанные.ЕдиницаИзмерения =  ТекДанные.Номенклатура.ЕдиницаИзмерения;
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеНачалоВыбораНаСервере()

	НовыеСвязи = Новый ФиксированныйМассив(Новый Массив());
	Элементы.ДокументОснование.СвязиПараметровВыбора = НовыеСвязи;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДокументОснование.СвязиПараметровВыбора = НовыеСвязи;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЦФО) Тогда
	
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ЦФО", "Объект.ЦФО");
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДокументОснование.СвязиПараметровВыбора = НовыеСвязи;
		
	КонецЕсли;

КонецПроцедуры // ДокументОснованиеНачалоВыбораНаСервере()

#КонецОбласти 

#Область УправлениеВнешнимВидомФормы

// Процедура устнавливает заголовок формы.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти 

#КонецОбласти
