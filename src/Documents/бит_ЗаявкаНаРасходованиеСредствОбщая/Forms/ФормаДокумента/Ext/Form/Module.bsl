
#Область ОписаниеПеременных

&НаКлиенте
Перем мФормироватьНПУпрАвтоматически; // Хранит признак, того что НазначениеПлатежаУпр следует заполняет автоматически.

&НаКлиенте
Перем мТекущаяВалютаДокумента; // Хранит текущую валюту взаиморасчетов

&НаКлиенте
Перем мТекущийКурсДокумента; // Хранит текущий курс документа

&НаКлиенте
Перем мТекущаяКратностьДокумента; // Хранит текущую кратность документа

&НаКлиенте 
Перем мСписокВидовДоговоров; // Хранит список доступных для выбора видов договоров.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	// Заполняем кэш значений	
	ЗаполнитьКэшЗначений();
	
	// Сформируем список доступных валют.
	ЗаполнитьСписокВыбораВалютыДокумента(Объект.Ссылка);
	
	// Заполним список имен элементов управления, которые необходимо блокировать при изменении статусов.
	ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке();
	
	мКэшЗначений.Вставить("ДатаРасхода"         ,Объект.ДатаРасхода);
	мКэшЗначений.Вставить("ДатаПлатежаКрайняя"  ,Объект.ДатаПлатежаКрайняя);
	мКэшЗначений.Вставить("Организация"         ,Объект.Организация);
	мКэшЗначений.Вставить("ЦФО"                 ,Объект.ЦФО);
	мКэшЗначений.Вставить("ПредставлениеОбъекта",Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	Распределение = Объект.Распределение;
	
	Если Распределение.Количество() = 0 Тогда
		
		СтрокаРаспределение = Распределение.Добавить();
		УстановитьИДСтроки(СтрокаРаспределение.ИД);
		
	КонецЕсли;
	
	// Показ расшифровки платежа списком.
	Элементы.ФормаКомандаСписок.Пометка = ?(Распределение.Количество() > 1, Истина, Ложь);
	
	// Настроим отображение полей доп. аналитик в табличном поле Распределение.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект
																			 			,"Распределение"
																						,мКэшЗначений.ИзмеренияДоп
																						,мКэшЗначений.НастройкиИзмерений);
	
	// Настроим отображение полей доп. аналитик в форме.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтотОбъект
																				 ,мКэшЗначений.ИзмеренияДоп
																				 ,мКэшЗначений.НастройкиИзмерений);
	
	
	УправлениеЭлементамиФормы();
	
	// Заполним текст про график платежей.
	ЗаполнитьТекстПроГрафикПлатежей();
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		
		ЕстьПодчиненныеДокументы = бит_ОбщегоНазначения.ЕстьПодчиненныеДокументы(Объект.Ссылка, "бит_ЗаявкаНаРасходованиеСредств");
		
		Если ЕстьПодчиненныеДокументы Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	// Изменение кода. Начало. 31.01.2018{{
	ОбъектСкопирован = ?(ЗначениеЗаполнено(Параметры.ЗначениеКопирования), Истина, Ложь);
	// Изменение кода. Конец. 31.01.2018}}
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	УстановитьСостояниеДокумента();
	
	// +СБ. Широков Николай. 2014-09-09. ТЗ "Казначейство" 
	//СБ_КазначействоКлиент.бит_ЗаявкаНаРасходованиеСредствОбщаяФормаДокументаПриОткрытии(ЭтаФорма);
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_ЗаявкаНаРасходованиеСредствОбщая.ФормаДокументаУправляемая");
	// -СБ. Широков Николай 
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-05-12 (#ТП_БП05_ФР15)
	ок_МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-05-12 (#ТП_БП05_ФР15)
	
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-05-21 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	Если Параметры.Свойство("ок_ДокументОснование") Тогда
		Если ТипЗнч(Параметры.ок_ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			ЗаполнитьЗначенияСвойств(Объект, Параметры);
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-05-21 (#ТП_БП05_ФР12, #ТП_БП05_ФР13)
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьВозможностьВводаДокумента(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	// Для нового документа вызываем форму выбора вида операции.
	Если ЭтоНовый Тогда
		ИзменениеСтатьиОборотов(Объект);
		
		// Проверим принадлежность ЦФО к статье оборотов.
		ПроверитьПринадлежностьЦФОКСтатьеОборотов(Объект);
	КонецЕсли;
	
	// Сохраним значения реквизитов формы
	мТекущаяВалютаДокумента    	= Объект.ВалютаДокумента;
	мТекущийКурсДокумента      	= Объект.КурсДокумента;
	мТекущаяКратностьДокумента 	= Объект.КратностьДокумента;	
	
	// Вычислим значение флага автоформирования назначения платежа.
	УстановитьФлагФормироватьНПУпрАвтоматически();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоровПоОперации();
	
	// Рассчитаем сумму без НДС для отображения на форме.
	РассчитатьСуммуБезНДС();
	
	// Установим отбор для статей оборотов	
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.РаспределениеДоговорКонтрагента);		
	
	// Оставим только те разрезы, которые указаны в статье оборотов.
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//НастроитьВидимостьАналитикБюджетирования();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
			
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +СБ. Широков Николай. 2014-09-10. ТЗ "Казначейство" 2.2.2.11.	
	СБ_КазначействоКлиент.бит_ЗаявкаНаРасходованиеСредствОбщаяУстановитьВидимостьЭлементов(ЭтаФорма);
	// -СБ. Широков Николай
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Вставить содержимое обработчика.
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		 Если ВыбранноеЗначение.Свойство("Статус") Тогда
		 
			 ЭтотОбъект.Статус               = ВыбранноеЗначение.Статус;
			 ЭтотОбъект.ДатаИзмененияСтатуса = ВыбранноеЗначение.ДатаИзмененияСтатуса;
			 СтруктураПараметров  = Новый Структура("Статус,ДатаИзмененияСтатуса"
			                                        ,ВыбранноеЗначение.Статус
													,ВыбранноеЗначение.ДатаИзмененияСтатуса);
			 ИнформацияСтатус     = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
		 
		 КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Инициализируем значение переменных модуля объекта.
	ТекущийОбъект.мСписок = Элементы.ФормаКомандаСписок.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект",Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров);
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	УправлениеЭлементамиФормы();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ЗаявкаНаРасходованиеСредствОбщая";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалюты();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменениеОрганизации();
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(Объект, Истина);
	
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);	
	
	мКэшЗначений.Организация = Объект.Организация;
	
	// Проверим принадлежность ЦФО к статье оборотов в Распределении.
	Для Каждого ТекСтрока Из Объект.Распределение Цикл
		ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекСтрока, Истина, ТекСтрока.НомерСтроки - 1);
	КонецЦикла;
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ЦФО".
// 
&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(Объект, Истина);
	
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	
	мКэшЗначений.ЦФО = Объект.ЦФО;
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяОборотов".
// 
&НаКлиенте
Процедура СтатьяОборотовПриИзменении(Элемент)
	
    ИзменениеСтатьиОборотов(Объект);	
	РассчитатьСуммуБезНДС();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма".
// 
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтавкаНДС".
// 
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_<N>".
// 
&НаКлиенте
Процедура Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      ,Элемент
	                                                      ,Объект
														  ,Элемент.Имя
														  ,СтандартнаяОбработка
														  ,мКэшЗначений.НастройкиИзмерений);
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-05-12 (#ТП_БП05_ФР15)
	Если Элемент.ДоступныеТипы = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица") Тогда
	СтандартнаяОбработка = Ложь;
	Парам = Новый Структура;
	Парам.Вставить("РежимВыбора", Истина);
	Парам.Вставить("ок_Организация", Объект.Организация);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаСписка",Парам, ЭтотОбъект);
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-05-12 (#ТП_БП05_ФР15)

КонецПроцедуры

&НаКлиенте
Процедура Аналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      ,Элемент
	                                                      ,Объект
														  ,Элемент.Имя
														  ,СтандартнаяОбработка
														  ,мКэшЗначений.НастройкиИзмерений);
                                                          
КонецПроцедуры

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_<N>".
// 
&НаКлиенте
Процедура Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,Объект
	                                                                        ,Элемент.Имя
																			,СтандартнаяОбработка
																			,мКэшЗначений.НастройкиИзмерений);
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаРасхода".
// 
&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаРасхода",Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ДатаДокумента",Объект.Дата);
	Если НЕ бит_КазначействоКлиент.ДатаРасходаКорректна(СтруктураПараметров,Истина) Тогда
	
		Объект.ДатаРасхода = мКэшЗначений.ДатаРасхода;
		Возврат;
	
	КонецЕсли; 
	
	мКэшЗначений.ДатаРасхода = Объект.ДатаРасхода;
	
	
	СтруктураПараметров.Вставить("Дата",Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты", "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя",Объект.ДатаПлатежаКрайняя);
	Если ЗначениеЗаполнено(Объект.ДатаПлатежаКрайняя) 
		 И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Ложь) Тогда
		Объект.ДатаПлатежаКрайняя   = Объект.ДатаРасхода;
		мКэшЗначений.ДатаПлатежаКрайняя 	= Объект.ДатаРасхода;
	КонецЕсли;
	
	// +СБ. Широков Николай. 2014-10-14. ТЗ "Казначейство" 2.2.2.11.
	ДатаРасходаПриИзмененииНаСервере();
	// -СБ. Широков Николай 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаПлатежаКрайняя".
// 
&НаКлиенте
Процедура ДатаПлатежаКрайняяПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты", "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя",Объект.ДатаПлатежаКрайняя);
	
	Если бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Истина) Тогда
		Объект.ДатаПлатежаКрайняя = мКэшЗначений.ДатаПлатежаКрайняя;
		Возврат;
	КонецЕсли;
	
	мКэшЗначений.ДатаПлатежаКрайняя = Объект.ДатаПлатежаКрайняя;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НазначениеПлатежа".
// 
&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	Если мФормироватьНПУпрАвтоматически Тогда
	
		Объект.НазначениеПлатежаУпр = Объект.НазначениеПлатежа;
	
	КонецЕсли; 
	УстановитьФлагФормироватьНПУпрАвтоматически();		
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаУпрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Формирование списка выбора.
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Объект.НазначениеПлатежа);

КонецПроцедуры // НазначениеПлатежаУпрНачалоВыбора()

&НаКлиенте
Процедура НазначениеПлатежаУпрАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	// Формирование списка выбора.
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Объект.НазначениеПлатежа);
	
КонецПроцедуры // НазначениеПлатежаУпрАвтоПодбор()

&НаКлиенте
Процедура НазначениеПлатежаУпрПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНПУпрАвтоматически();	
	
КонецПроцедуры // НазначениеПлатежаУпрПриИзменении()


// Процедура - обработчик события "НачалоВыбора" поля ввода "БанковскийСчетОрганизации".
// 
&НаКлиенте
Процедура БанковскийСчетОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец"       			, Объект.Организация);
	СтруктураПараметров.Вставить("ВалютаДенежныхСредств"	, Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизация", Объект.БанковскийСчетОрганизации);
    СтруктураПараметров.Вставить("ЭлементВладелец"			, Элемент);

	бит_РаботаСДиалогамиКлиент.ОткрытьФормуВыбораРасчетногоСчета(СтруктураПараметров);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФормаОплаты".
// 
&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Объект.БанковскийСчетОрганизации = Неопределено;
		
	Если мКэшЗначений.ЕстьСправочникКассы Тогда
		
		Объект.Касса = Неопределено;
		
	КонецЕсли;
	
	Если Объект.ФормаОплаты = мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			УстановитьБанковскийСчетСервер(Объект.БанковскийСчетОрганизации, Объект.Организация, 
																	Объект.ВалютаДокумента);
		КонецЕсли;
	
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменениеКонтрагента();
	
	// Могли поменять договор.
	ПриИзмененииДоговораКлиент();
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сумма");	
	МассивИсключений.Добавить("НДС");
	
	СинхронизироватьРеквизитыШапкиИСтроки("Строка", МассивИсключений);
	
	// Проверим владельцев договоров распределения.
	ПроверитьВладельцевДоговоровРаспределения();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.РаспределениеДоговорКонтрагента);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыВФорме();
		
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределение

&НаКлиенте
Процедура РаспределениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		УстановитьИДСтроки(ТекущиеДанные.ИД);
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные
																		   ,мКэшЗначений.ИзмеренияДоп
																		   ,мКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	
	СтрокаРаспределение = Неопределено;
	
	Если Объект.Распределение.Количество() > 0 Тогда
		СтрокаРаспределение = Объект.Распределение[0];
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования
		И НЕ ТекущиеДанные = Неопределено
		И ТекущиеДанные = СтрокаРаспределение Тогда
		
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("Сумма");	
		МассивИсключений.Добавить("НДС");		
		
		СинхронизироватьРеквизитыШапкиИСтроки("Шапка",МассивИсключений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПередУдалением(Элемент, Отказ)
	
	Если Объект.Распределение.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЦФОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИндексСтроки  = ТекущиеДанные.НомерСтроки - 1;
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекущиеДанные, Истина, ИндексСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	
	ИзменениеСтатьиОборотов(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИндексСтроки  = ТекущиеДанные.НомерСтроки - 1;
	
	мКэшЗначений.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(, ИндексСтроки);
	УстановитьПараметрыВыбораСтатей(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИндексСтроки  = ТекущиеДанные.НомерСтроки - 1;
	
	ПриИзмененииДоговораКлиент(ИндексСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-05-12 (#ТП_БП05_ФР15)
	Если ИмяАналитики = "Аналитика_5" Тогда
	СтандартнаяОбработка = Ложь;
	Парам = Новый Структура;
	Парам.Вставить("РежимВыбора", Истина);
	Парам.Вставить("ок_Организация", Объект.Организация);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаСписка",Парам, ЭтотОбъект);
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-05-12 (#ТП_БП05_ФР15)

															   
КонецПроцедуры

// Процедура - обработчик события "АвтоПодбор" полей ввода "Аналитика_i" (i от 1 до 4).
// в строке табличной части "Распределение".
//
&НаКлиенте
Процедура РаспределениеАналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,ТекущиеДанные
															   ,ИмяАналитики
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
                                                               
КонецПроцедуры
                                                           
&НаКлиенте
Процедура РаспределениеАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущиеДанные
	                                                                       	,ИмяАналитики
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
																			
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПослеУдаления(Элемент)
	
	// Оставим только те разрезы, которые указаны в статье оборотов.
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//НастроитьВидимостьАналитикБюджетирования();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаСписок(Команда)
	
	КнопкаСписок = Элементы.ФормаКомандаСписок;
	
	Если КнопкаСписок.Пометка 
		И Объект.Распределение.Количество() > 1 Тогда
		
		// Необходимо спросить пользователя
		Оповещение = Новый ОписаниеОповещения("УдалениеСтрокТабЧасти",ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Все строки табличной части, кроме первой, будут удалены.
					   |Продолжить?'");		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да, НСтр("ru = 'Прогноз платежа'"));
		
	Иначе	
		
		НажатиеКнопкиСписок(КнопкаСписок);
			
		// Установить видимость реквизитов и заголовков колонок.	
		УправлениеЭлементамиФормы();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "УдалениеСтрокТабЧасти".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура УдалениеСтрокТабЧасти(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли; 
	
	НажатиеКнопкиСписок(Элементы.ФормаКомандаСписок);
		
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // УдалениеСтрокТабЧасти

&НаКлиенте
Процедура АктуализироватьПоКурсам(Команда)
	
	Если Модифицированность Тогда
	
		Оповещение = Новый ОписаниеОповещения("ВопросАктуализировать", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Выполнить запись?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе	
		
		АктуализироватьПоКурсамСервер();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения вопроса о необходимости записи документа 
// перед актуализацией. 
//
&НаКлиенте
Процедура ВопросАктуализировать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флОК = Записать();
		
		Если флОК Тогда
			АктуализироватьПоКурсамСервер();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ВопросАктуализировать	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	мКэшЗначений = Новый Структура;
	
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("СтавкиНДС",бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	КэшПеречисления.Вставить("бит_РасходДоход",бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов",бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ВидыДенежныхСредств",бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств));
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов));
	КэшПеречисления.Вставить("бит_ТипыЗаявокНаРасходованиеСредств",бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыЗаявокНаРасходованиеСредств));
	
	мКэшЗначений.Вставить("Перечисления",КэшПеречисления);
	
	мКэшЗначений.Вставить("ЗаявкаЗакрыта"	,Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта);
	мКэшЗначений.Вставить("ЗаявкаУтверждена",Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Утверждена);
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредствОбщая"));
	
	мКэшЗначений.Вставить("ИзмеренияДоп"      ,ДокументЗаявка.мИзмеренияДоп);
	мКэшЗначений.Вставить("НастройкиИзмерений",ДокументЗаявка.мНастройкиИзмерений);
	
	// Произвольные измерения
	мКэшЗначений.Вставить("Измерения"         , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
	мКэшЗначений.Вставить("СписокСтатейПринадлежность",ПолучитьСписокСтатейПоПринадлежности());
	
	// Валюта регламентированного учета
	мКэшЗначений.Вставить("мВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());	
	мКэшЗначений.Вставить("ЕстьСправочникКассы", Метаданные.Справочники.Найти("Кассы") <> Неопределено);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура Устанавливает ид строки табличной части.
// 
// Параметры:
//  ТекущаяСтрока_ИД - Строка - СтрокаТабличнойЧасти.ИД.
// 
&НаСервереБезКонтекста 
Процедура УстановитьИДСтроки(ТекущаяСтрока_ИД)

	ТекущаяСтрока_ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры

&НаСервере
Процедура ИзменениеВалюты()
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредствОбщая"));
	ДокументЗаявка.ИзменениеВалютыМодуль();
	ЗначениеВДанныеФормы(ДокументЗаявка,Объект);
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчетОрганизации) 
		И Объект.БанковскийСчетОрганизации.ВалютаДенежныхСредств <> Объект.ВалютаДокумента Тогда
		
		Объект.БанковскийСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	ВидимостьАктуализацииКурсов();
	
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ИзменениеЦФО(СтруктураПараметров, ИндексСтроки=Неопределено)

	Если ЗначениеЗаполнено(Объект.ЦФО) Тогда
		СтруктураПараметров.СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежности(Истина, ИндексСтроки);
	КонецЕсли;

КонецПроцедуры // ИзменениеЦФО()

// Процедура обрабатывает изменение контрагента.
// 
&НаСервереБезКонтекста
Процедура ИзменениеКонтрагентаСервер(Договор, Контрагент, Организация, СписокВидовДоговоров)
	
	// Выполняем общие действия для всех документов при изменении Контрагент.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Договор, Контрагент, Организация, СписокВидовДоговоров);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьБанковскийСчетСервер(Счет, ВладелецСчета, Валюта)
	
	бит_МеханизмыТиповых.УстановитьБанковскийСчет(Счет, ВладелецСчета, Валюта);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеОрганизации()
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредствОбщая"));
	
	// Выполняем общие действия для всех документов при изменении Организация.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументЗаявка, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументЗаявка, Объект);
	
	Распределение = Объект.Распределение;
	
	// Проверка организаций договора по табличной части.
	Для каждого СтрокаТаблицы Из Распределение Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) 
			 И Не СтрокаТаблицы.ДоговорКонтрагента.Организация = Объект.Организация  Тогда
			 
			ТекстСообщения = "В строке № "
							 + СтрокаТаблицы.НомерСтроки
							 + " организация договора """
							 + СтрокаТаблицы.ДоговорКонтрагента
							 + """ не соответствует организации заявки. Договор очищен.";
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.Распределение");
			
			СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработаем банковский счет организации
	Если Объект.ФормаОплаты = мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			бит_МеханизмыТиповых.УстановитьБанковскийСчет(Объект.БанковскийСчетОрганизации, Объект.Организация, Объект.ВалютаДокумента);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.БанковскийСчетОрганизации) Тогда
			Объект.БанковскийСчетОрганизации = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменениеОрганизации()

&НаСервере 
Процедура ПроверитьВладельцевДоговоровРаспределения()
	
	Распределение = Объект.Распределение;
	
	Для Каждого СтрокаТаблицы Из Распределение Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) 
			И Не СтрокаТаблицы.ДоговорКонтрагента.Владелец = Объект.Контрагент Тогда
			
			ТекстСообщения = "ru = 'В строке № "
							 + СтрокаТаблицы.НомерСтроки
							 + " владелец договора """
							 + СтрокаТаблицы.ДоговорКонтрагента
							 + """ не соответствует контрагенту заявки. Договор очищен.'";
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр(ТекстСообщения), Объект, "Объект.Распределение");
			
			СтрокаТаблицы.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьВладельцевДоговоровРаспределения();

&НаСервере 
Процедура ПриИзмененииДоговораСервер(ИндексСтроки = Неопределено)
	
	Контейнер = ?(ИндексСтроки = Неопределено, Объект, Объект.Распределение[ИндексСтроки]); 	
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если Не ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента) Тогда
		Если ИндексСтроки = Неопределено Тогда
			ЗаполнитьСписокВыбораВалютыДокумента(Контейнер);
		Иначе
			Если Контейнер.НомерСтроки = 1 Тогда
				ЗаполнитьСписокВыбораВалютыДокумента(Контейнер);
			КонецЕсли; 
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Контейнер.ДоговорКонтрагента.Организация;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Контейнер.ДоговорКонтрагента.Владелец;
	КонецЕсли; 
	
	Если ТипЗнч(Контейнер) = Тип("ДанныеФормыСтруктура") Тогда
		
		ЗаполнитьСписокВыбораВалютыДокумента(Контейнер); 		
		Объект.ВалютаДокумента   = ?(Контейнер.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
								    ,мКэшЗначений.мВалютаРеглУчета
								    ,Контейнер.ДоговорКонтрагента.ВалютаВзаиморасчетов);		
		
	Иначе
		
		Если Контейнер.НомерСтроки = 1 Тогда
			
			ЗаполнитьСписокВыбораВалютыДокумента(Контейнер);
			Объект.ВалютаДокумента   = ?(Контейнер.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
									    ,мКэшЗначений.мВалютаРеглУчета
									    ,Контейнер.ДоговорКонтрагента.ВалютаВзаиморасчетов);		   
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контейнер.ЦФО) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_ЦФО) Тогда
		Контейнер.ЦФО = Контейнер.ДоговорКонтрагента.бит_ЦФО; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контейнер.СтатьяОборотов) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотов) Тогда
		Если Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотов.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
			Контейнер.СтатьяОборотов = Контейнер.ДоговорКонтрагента.бит_ОсновнаяСтатьяОборотов;
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
			//НастроитьВидимостьАналитикБюджетирования();
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		КонецЕсли;	
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Контейнер.Проект) 
		И ЗначениеЗаполнено(Контейнер.ДоговорКонтрагента.бит_Проект) Тогда
		Контейнер.Проект = Контейнер.ДоговорКонтрагента.бит_Проект;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговораСервер()

&НаСервере 
Процедура СинхронизироватьРеквизитыШапкиИСтроки(ИмяПриемника, МассивИсключений = Неопределено)
	
	ДокументЗаявка = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредствОбщая"));
	ДокументЗаявка.СинхронизироватьРеквизитыШапкиИСтроки(0, ИмяПриемника, МассивИсключений);
	ЗначениеВДанныеФормы(ДокументЗаявка, Объект);
	
КонецПроцедуры // СинхронизироватьРеквизитыШапкиИСтроки()

&НаСервереБезКонтекста 
Процедура УстановитьСтавкуНДС(КонтейнерПриемникСтавкиНДС, СтатьяОборотовИсточник)
	
	КонтейнерПриемникСтавкиНДС = СтатьяОборотовИсточник.СтавкаНДС;
	
КонецПроцедуры // УстановитьСтавкуНДС()

&НаСервере
Функция ПолучитьСписокСтатейПоПринадлежности(ВыводитьСообщения = Ложь, ИндексСтроки=Неопределено)

	ДокументЗаявка = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредствОбщая"));
	СписокСтатей = ДокументЗаявка.ПолучитьСписокСтатейПоПринадлежностиМодуль(ВыводитьСообщения, ИндексСтроки);

    Возврат СписокСтатей;
	
КонецФункции // ПолучитьСписокСтатейПоПринадлежности()

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение",Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО",Объект.ЦФО);		
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка,Объект.Дата,СтруктураПараметров);
	
КонецПроцедуры

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()

	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтотОбъект, Объект, Статус);
	
КонецПроцедуры

// Функция определяет следует ли заблокировать ключевые реквизиты заявки. Сервер.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//   ЗаблокироватьРеквизиты - Булево.
// 
&НаСервере 
Функция НужноЗаблокироватьКлючевыеЭлементыСервер()

	флЗаблокироватьЭлементы = Ложь;
	
	Если Объект.Проведен 
		Или Статус = мКэшЗначений.ЗаявкаУтверждена 
		Или Статус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта Тогда
		
		флЗаблокироватьЭлементы = Истина;
		
	КонецЕсли; 
	
	Возврат флЗаблокироватьЭлементы;
	
КонецФункции // НужноЗаблокироватьКлючевыеЭлементыСервер()

// Процедура заполняет список имен элементов управления,
// которые необходимо блокировать при изменении статусов.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке()
	
	// Имена элементов управления, подлежащие блокировке в статусах выше рабочего.
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ТипЗаявки");
	ИменаЭлементов.Добавить("ФормаОплаты");
	ИменаЭлементов.Добавить("Организация");
	ИменаЭлементов.Добавить("Организация_Список");
	ИменаЭлементов.Добавить("ЦФО");
	ИменаЭлементов.Добавить("Сценарий");
	ИменаЭлементов.Добавить("Сценарий_Список");
	ИменаЭлементов.Добавить("СтатьяОборотов");
	ИменаЭлементов.Добавить("Проект");
	ИменаЭлементов.Добавить("НоменклатурнаяГруппа");
	ИменаЭлементов.Добавить("Контрагент");
	ИменаЭлементов.Добавить("Контрагент_Список");
	ИменаЭлементов.Добавить("ДоговорКонтрагента");
	ИменаЭлементов.Добавить("БанковскийСчетОрганизации");
	ИменаЭлементов.Добавить("БанковскийСчетОрганизации_Список");
	ИменаЭлементов.Добавить("ДатаРасхода");
	ИменаЭлементов.Добавить("ДатаПлатежаКрайняя");
	ИменаЭлементов.Добавить("ДатаРасхода_Список");
	ИменаЭлементов.Добавить("ДатаПлатежаКрайняя_Список");
	ИменаЭлементов.Добавить("НазначениеПлатежа");
	ИменаЭлементов.Добавить("НазначениеПлатежа_Список");
	ИменаЭлементов.Добавить("НазначениеПлатежаУпр");
	ИменаЭлементов.Добавить("НазначениеПлатежаУпр_Список");
	ИменаЭлементов.Добавить("ВалютаДокумента");
	ИменаЭлементов.Добавить("ВалютаДокумента_Список");
	ИменаЭлементов.Добавить("КурсДокумента");
	ИменаЭлементов.Добавить("КурсДокумента_Список");
	ИменаЭлементов.Добавить("Сумма");
	ИменаЭлементов.Добавить("СтавкаНДС");
	
	МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По МаксКолвоДопАналитик Цикл
		ИменаЭлементов.Добавить("Аналитика_"+н);
	КонецЦикла;
	
	// Добавим именя элементов табличного поля Распределение.
	ИменаЭлементов.Добавить("РаспределениеЦФО");
	ИменаЭлементов.Добавить("РаспределениеСтатьяОборотов");
	ИменаЭлементов.Добавить("РаспределениеПроект");
	ИменаЭлементов.Добавить("РаспределениеНоменклатурнаяГруппа");
	ИменаЭлементов.Добавить("РаспределениеДоговорКонтрагента");
	
	МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По МаксКолвоДопАналитик Цикл
		ИменаЭлементов.Добавить("РаспределениеАналитика_"+н);
	КонецЦикла;
	
	ИменаЭлементов.Добавить("РаспределениеСумма");
	ИменаЭлементов.Добавить("РаспределениеСтавкаНДС");
	ИменаЭлементов.Добавить("РаспределениеНДС");
	
	мКэшЗначений.Вставить("ИменаЭлементов", ИменаЭлементов);
	
КонецПроцедуры // ЗаполнитьСписокИменЭлементовУправленияПодлежащиеБлокировке()

// Заполняет текст про график платежей в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьТекстПроГрафикПлатежей()

    Если Объект.ТипЗаявки = мКэшЗначений.Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей Тогда
        
        ДокГрафикПлатежей = бит_Казначейство.НайтиДокументГрафикаПлатежей(Объект.Ссылка);
        
        Если ЗначениеЗаполнено(ДокГрафикПлатежей) Тогда
            
            Элементы.ГиперссылкаГрафикПлатежей.Заголовок   = Строка(ДокГрафикПлатежей);
            Элементы.ГиперссылкаГрафикПлатежей.ГиперСсылка = Истина;
            
        Иначе
            Элементы.ГиперссылкаГрафикПлатежей.Заголовок   = "Не найден";
            Элементы.ГиперссылкаГрафикПлатежей.ГиперСсылка = Ложь;
        КонецЕсли;
        
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьТекстПроГрафикПлатежей()

// Процедура заполняет список выбора валюты документа.
// 
&НаСервере
Процедура ЗаполнитьСписокВыбораВалютыДокумента(Контейнер)

	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Контейнер);
	МассивВалют = СписокВалют.ВыгрузитьЗначения();
	
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(МассивВалют);
	Элементы.ВалютаДокумента_Список.СписокВыбора.ЗагрузитьЗначения(МассивВалют);

КонецПроцедуры // ЗаполнитьСписокВыбораВалютыДокумента()

// Процедура актуализирует курсы на текущую дату. 
//
&НаСервере
Процедура АктуализироватьПоКурсамСервер()

	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредствОбщая"));
	ДокОбъект.АктуализироватьПоКурсам();
	ЗначениеВДанныеФормы(ДокОбъект, Объект); 

КонецПроцедуры // АктуализироватьПоКурсамСервер()


#КонецОбласти
 
#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанавливает отборы для статьи оборотов.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатей(Контейнер)

	МассивПараметров = Новый Массив;
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.РасходДоход",мКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
	МассивПараметров.Добавить(НовыйПараметр);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипСтатьи",мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДДС);
	МассивПараметров.Добавить(НовыйПараметр);
	
	Если ТипЗнч(мКэшЗначений.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка",мКэшЗначений.СписокСтатейПринадлежность);
		МассивПараметров.Добавить(НовыйПараметр);
		
	КонецЕсли; 
	
	Контейнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры // УстановитьПараметрыОтбораСтатей()

// Процедура расчитывает суммму НДС.
// 
// 
&НаКлиенте
Процедура РассчитатьСуммуНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС,мКэшЗначений.Перечисления.СтавкиНДС);
	
	Контейнер.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
												,Истина
												,Истина
												,СтавкаНДСЧисло);
																							
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура расчитывает суммму без НДС.
// 
&НаКлиенте
Процедура РассчитатьСуммуБезНДС()

	ЭтотОбъект.СуммаБезНДС = Объект.Сумма - Объект.НДС;
																							
КонецПроцедуры // РассчитатьСуммуБезНДС()

// Процедура обрабатывает изменение валюты документа в форме документа.
// 
&НаКлиенте
Процедура ИзменениеВалютыВФорме() 
	
	ИзменениеВалюты();
	
	// Спросим, а не пересчитать ли суммы
	Если мТекущаяВалютаДокумента <> Объект.ВалютаДокумента И Объект.Сумма <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыОповещение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
				
	Иначе	
	
		мТекущаяВалютаДокумента    = Объект.ВалютаДокумента;
		мТекущаяКратностьДокумента = Объект.КратностьДокумента;
		мТекущийКурсДокумента      = Объект.КурсДокумента;
	
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеВалютыВФорме()

// Процедура обработчик оповещения "ИзменениеВалютыОповещение".
// 
// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ИзменениеВалютыОповещение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Сумма = бит_ОбщегоНазначенияКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.Сумма
		                                                             ,мТекущаяВалютаДокумента
																	 ,Объект.ВалютаДокумента
																	 ,мТекущийКурсДокумента
																	 ,Объект.КурсДокумента
																	 ,мТекущаяКратностьДокумента
																	 ,Объект.КратностьДокумента);
																	 
		РассчитатьСуммуНДС(Объект);
        РассчитатьСуммуБезНДС();				
		
		Распределение = Объект.Распределение;
		
		Для Каждого СтрокаТаблицы Из Распределение Цикл
			
			СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
																				 ,мТекущаяВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мТекущийКурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мТекущаяКратностьДокумента
																				 ,Объект.КратностьДокумента);
			
			РассчитатьСуммуНДС(СтрокаТаблицы);
			
		КонецЦикла;
			
	КонецЕсли;
	
	мТекущаяВалютаДокумента    = Объект.ВалютаДокумента;
	мТекущаяКратностьДокумента = Объект.КратностьДокумента;
	мТекущийКурсДокумента      = Объект.КурсДокумента;
	
КонецПроцедуры // ИзменениеВалютыОповещение

// Процедура определяет, следует ли формировать назначение платежа упр. автоматически.
// 
&НаКлиенте
Процедура УстановитьФлагФормироватьНПУпрАвтоматически()

	Если ПустаяСтрока(Объект.НазначениеПлатежаУпр) 
		 ИЛИ Объект.НазначениеПлатежа = Объект.НазначениеПлатежаУпр Тогда
		мФормироватьНПУпрАвтоматически = Истина;
	Иначе
		мФормироватьНПУпрАвтоматически = Ложь;
	КонецЕсли; 

КонецПроцедуры // УстановитьФлагФормироватьНПУпрАвтоматически()

// Процедура выполняет действия на сервере, необходимые при изменении СтатьиОборотов.
// 
&НаКлиенте
Процедура ИзменениеСтатьиОборотов(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) И НЕ ОбъектСкопирован Тогда
		
		УстановитьСтавкуНДС(Контейнер.СтавкаНДС, Контейнер.СтатьяОборотов);
		РассчитатьСуммуНДС(Контейнер);
		
	КонецЕсли;
	
	Если ТипЗнч(Контейнер) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		 ИД = Контейнер.ПолучитьИдентификатор();
		
	Иначе	
		
		ИД = Неопределено;
		
	КонецЕсли; 
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//НастроитьВидимостьАналитикБюджетирования();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	ИзменениеСтатьиОборотовСервер(ИД);
	
	
КонецПроцедуры // ИзменениеСтатьиОборотов()

// Процедура обрабатывает изменение статьи на сервере 
//
&НаСервере
Процедура ИзменениеСтатьиОборотовСервер(ИД)

	Если ТипЗнч(ИД) = Тип("Число") Тогда
		
		Контейнер = Объект.Распределение.НайтиПоИдентификатору(ИД);
		
	Иначе	
		
		Контейнер = Объект;
		
	КонецЕсли; 

	Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
		
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(Контейнер.СтатьяОборотов);
		бит_Бюджетирование.УстановитьИспользованиеАналитики(Контейнер, НастройкиСтатьи, мКэшЗначений.ИзмеренияДоп);
		
	КонецЕсли; 
	
	
КонецПроцедуры // ИзменениеСтатьиОборотов()


// Процедура настраивает видимость элементов формы в соответствии с используемыми разрезами бюджетирования
// 	в статье оборотов.
// 
// Параметры:
// 	СтатьяОборотовИсточник 	   - СправочникСсылка.бит_СтатьиОборотов 
// 					(статья оборотов, в соответствии с которой будет настраиваться видимость элементов формы)
// 	ТекущаяФорма 			   - Управляемая форма (форма для которой настраивается видимость элементов формы)
//  Измерения          		   - Структура (измерения регистра бит_ОборотыПоБюджетам)
//  НастройкиИзмерений 		   - Соответствие (настройки используемых дополнительных измерений)
//  СоответствиеИмен   		   - Сответствие 
// 					(соответствие имен измерений регистра и имен элементов управления на форме)
// 									Ключ 	 - Строка 	 (имя измерения в регистре)
// 									Значение - Структура (ИмяПоляВвода)
//  МассивИсключаемыхИзмерений - Массив (имена измерений для которых настройку видимости устанавливать не надо).
// 
&НаСервере
Процедура НастроитьВидимостьАналитикБюджетирования()
	
	НастройкиИзмерений = Неопределено;
	
	Если Элементы.ФормаКомандаСписок.Пометка Тогда
		МассивСтатей = ПолучитьМассивСтатейОборотов();
		Префикс = "Распределение";
	Иначе
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(Объект.СтатьяОборотов);
		Префикс = "";
	КонецЕсли;
	
	МассивИсключаемыхИзмерений = Новый Массив;
	МассивИсключаемыхИзмерений.Добавить("Организация");
	МассивИсключаемыхИзмерений.Добавить("Сценарий");
	МассивИсключаемыхИзмерений.Добавить("ЦФО");
	МассивИсключаемыхИзмерений.Добавить("СтатьяОборотов");
	МассивИсключаемыхИзмерений.Добавить("Проект");
	МассивИсключаемыхИзмерений.Добавить("Контрагент");
	МассивИсключаемыхИзмерений.Добавить("ДоговорКонтрагента");
	МассивИсключаемыхИзмерений.Добавить("ФизическоеЛицо");
	
	НастройкаВидимости = бит_Бюджетирование.ПолучитьНастройкуВидимостиКолонок(МассивСтатей, НастройкиИзмерений);
	
	Для Каждого ТекИзмерение Из МассивИсключаемыхИзмерений Цикл
		
		Если НЕ НастройкаВидимости.Свойство(ТекИзмерение) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаВидимости.Удалить(ТекИзмерение);
		
	КонецЦикла;
	
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы, НастройкаВидимости, Префикс);
	
	// Изменение кода. Начало. 19.05.2015{{
	Документы.бит_ЗаявкаНаРасходованиеСредств.ВидимостьНазначенныхАналитик(ЭтотОбъект);
	// Изменение кода. Конец. 19.05.2015}}
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтатейОборотов()
	
	МассивСтатей = Объект.Распределение.Выгрузить().ВыгрузитьКолонку("СтатьяОборотов");
	
	Возврат МассивСтатей;
	
КонецФункции

// Процедура проверяет принадлежность ЦФО к Статье оборотов.
// 
// Параметры:
//  Контейнер 		  - ДанныеФормыСтруктура.
//  ВыводитьСообщения - Булево.
//  ИндексСтроки	  - Число, по умолчанию Неопределено.
// 
&НаКлиенте 
Процедура ПроверитьПринадлежностьЦФОКСтатьеОборотов(Контейнер, ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокСтатейПринадлежность", мКэшЗначений.СписокСтатейПринадлежность);
	СтруктураПараметров.Вставить("ЦФО"						 , Контейнер.ЦФО);
	СтруктураПараметров.Вставить("СтатьяОборотов"			 , Контейнер.СтатьяОборотов);
	СтруктураПараметров.Вставить("ВыводитьСообщения"		 , ВыводитьСообщения);	
	
	ИзменениеЦФО(СтруктураПараметров, ИндексСтроки);
	
	мКэшЗначений.СписокСтатейПринадлежность = СтруктураПараметров.СписокСтатейПринадлежность;	
	
	Если Не бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		Контейнер.СтатьяОборотов = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПроверитьПринадлежностьЦФОКСтатьеОборотов() 

// Процедура выполняет действия на сервере, необходимые при изменении Контрагента.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ИзменениеКонтрагента()
	
	ИзменениеКонтрагентаСервер(Объект.ДоговорКонтрагента
							  ,Объект.Контрагент
							  ,Объект.Организация
							  ,мСписокВидовДоговоров);
	
КонецПроцедуры // ИзменениеКонтрагента()

// Процедура обрабатывает изменение договора Клиент.
// 
// Параметры:
//  ИндексСтроки - Число, по умолчанию Неопределено.
// 
&НаКлиенте 
Процедура ПриИзмененииДоговораКлиент(ИндексСтроки = Неопределено)
	
	ПриИзмененииДоговораСервер(ИндексСтроки);
	
	ИзменениеВалютыВФорме();
	
КонецПроцедуры // ПриИзмененииДоговораКлиент()

// Процедура формирует список доступных видов договоров.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоровПоОперации()
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	// Если Объект.ВидОперации = 
	// мКэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		
		мСписокВидовДоговоров.Добавить(мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		мСписокВидовДоговоров.Добавить(мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		бит_ДоговораКлиентСервер.ДобавитьВидДоговора(мСписокВидовДоговоров, мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов, "СКомиссионеромНаЗакупку");
		бит_ДоговораКлиентСервер.ДобавитьВидДоговора(мСписокВидовДоговоров, мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");						
		
	// ИначеЕсли Объект.ВидОперации = мКэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику Тогда.
		
		мСписокВидовДоговоров.Добавить(мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		// МСписокВидовДоговоров.Добавить(мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		// мСписокВидовДоговоров.Добавить(мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);	
		
	// Иначе	
		мСписокВидовДоговоров.Добавить(мКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	// КонецЕсли; 
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент - ПолеФормы. Для которого необходимо установить параметры выбора.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент)

	СтруктураОтбора = Новый Структура;
	
	// +СБ. Широков Николай. 2014-09-11. ТЗ "Казначейство" 2.2.2.11.
	//Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	//	СтруктураОтбора.Вставить("Владелец", Объект.Контрагент);
	//КонецЕсли;	
	Если Элемент.Имя = "РаспределениеДоговорКонтрагента" Тогда
		Если НЕ (Элементы.Распределение.ТекущиеДанные = Неопределено) Тогда
		    Если ЗначениеЗаполнено(Элементы.Распределение.ТекущиеДанные.СБ_Контрагент) Тогда
				СтруктураОтбора.Вставить("Владелец", Элементы.Распределение.ТекущиеДанные.СБ_Контрагент);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				СтруктураОтбора.Вставить("Владелец", Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
	Иначе
	    Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Владелец", Объект.Контрагент);
		КонецЕсли;
	КонецЕсли; 
	// -СБ. Широков Николай
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мСписокВидовДоговоров) Тогда
		СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(мСписокВидовДоговоров.ВыгрузитьЗначения()));
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура обрабатывает нажатие на кнопки "Список" командной панели формы.
// 
// Параметры:
//  Кнопка - Кнопка.
// 
&НаКлиенте 
Процедура НажатиеКнопкиСписок(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	
	Если Не Кнопка.Пометка Тогда
		
		Если Объект.Распределение.Количество() > 1 Тогда
			
			// Оставим только первую строку.
			Пока Объект.Распределение.Количество() > 1 Цикл
				
				СтрокаУдаления = Объект.Распределение[1];
				Объект.Распределение.Удалить(СтрокаУдаления);
				
			КонецЦикла;
			
		КонецЕсли; 
		
		СинхронизироватьРеквизитыШапкиИСтроки("Шапка");
		РассчитатьСуммуБезНДС();
		
	Иначе
		СинхронизироватьРеквизитыШапкиИСтроки("Строка");
	КонецЕсли;	
	
	// Оставим только те разрезы, которые указаны в статье оборотов.
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//НастроитьВидимостьАналитикБюджетирования();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры // НажатиеКнопкиСписок()

// Процедура проверяет возможность ввода документа.
// 
// Параметры:
//  Отказ - Булево.
// 
&НаКлиенте 
Процедура ПроверитьВозможностьВводаДокумента(Отказ)
	
	// Проверка ввода на основании.
	
	Если Объект.Комментарий = "_*_В_Копировании_Отказано_*_" Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьВводаДокумента()

&НаКлиенте
Процедура ГиперссылкаГрафикПлатежейНажатие(Элемент)
	
	// Откроем график платежей.
    бит_КазначействоКлиент.ОткрытьГрафикПлатежей(Объект, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
    // Если статус документа "Закрыта", тогда
	// форма доступна только для просмотра.
	Если Статус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЗаблокироватьЭлементы = НужноЗаблокироватьКлючевыеЭлементыСервер();
	
	Элементы.ФормаКомандаСписок.Доступность = НЕ ЗаблокироватьЭлементы;	
	
	Для каждого ИмяЭлемента Из мКэшЗначений.ИменаЭлементов Цикл
		Элементы[ИмяЭлемента].ТолькоПросмотр = ЗаблокироватьЭлементы;
	КонецЦикла;
	
	// Изменение кода. Начало. 21.01.2014{{
	ЕстьКнопкаПровестиИЗакрыть = Элементы.Найти("ФормаПровестиИЗакрыть");
	
	// Под ограниченными правами управляемая форма сама удаляет кнопку.
	Если НЕ ЕстьКнопкаПровестиИЗакрыть = Неопределено Тогда
		Элементы.ФормаПровестиИЗакрыть.Доступность = Не ЗаблокироватьЭлементы;
	КонецЕсли;
	// Изменение кода. Конец. 21.01.2014}}
	
	Элементы.ФормаЗаписать.Доступность 		   = Не ЗаблокироватьЭлементы;
	
	Элементы.НеВключатьВПлатежныйКалендарь.Доступность = Не ЗаблокироватьЭлементы;
	Элементы.ЭтоКазначейство.Доступность	   		   = Не ЗаблокироватьЭлементы;
	Элементы.Распределение.ИзменятьСоставСтрок 		   = Не ЗаблокироватьЭлементы;
	
	ОтобразитьКассу = Ложь;		
	
	ЭтоГрафикПлатежей = ?(Объект.ТипЗаявки = мКэшЗначений.Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей
						 ,Истина
						 ,Ложь);
	
	Элементы.НадписьГрафикПлатежей.Видимость     = ЭтоГрафикПлатежей;
	Элементы.ГиперссылкаГрафикПлатежей.Видимость = ЭтоГрафикПлатежей;
	
	Элементы.Касса.Видимость 		= ОтобразитьКассу;
	Элементы.Касса_Список.Видимость = ОтобразитьКассу;
	
	ОтобразитьБанковскийСчет = Объект.ФормаОплаты = мКэшЗначений.Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	
	Элементы.БанковскийСчетОрганизации.Видимость		= ОтобразитьБанковскийСчет;
	Элементы.БанковскийСчетОрганизации_Список.Видимость = ОтобразитьБанковскийСчет;
	
	ИмяСтраницыДляУстановки = "";
	СтраницыПанели 			= Элементы.ГруппаСтраницыОсновная.ПодчиненныеЭлементы;
	
	Если Элементы.ФормаКомандаСписок.Пометка Тогда
		
		Если Элементы.ГруппаСтраницыОсновная.ТекущаяСтраница = СтраницыПанели.ГруппаЗаявка Тогда
			ИмяСтраницыДляУстановки = "ГруппаСписок";
		КонецЕсли; 		
		
		СтраницыПанели["ГруппаЗаявка"].Видимость = Ложь;
		СтраницыПанели["ГруппаСписок"].Видимость = Истина;
		
		Элементы.РаспределениеИтогСумма.Видимость 	= Истина;
		Элементы.РаспределениеИтогНДС.Видимость 	= Истина;
		
	Иначе
		
		Если Элементы.ГруппаСтраницыОсновная.ТекущаяСтраница = СтраницыПанели.ГруппаСписок Тогда
			ИмяСтраницыДляУстановки = "ГруппаЗаявка";
		КонецЕсли;
		
		СтраницыПанели["ГруппаЗаявка"].Видимость = Истина;
		СтраницыПанели["ГруппаСписок"].Видимость = Ложь;
		
		Элементы.РаспределениеИтогСумма.Видимость 	= Ложь;
		Элементы.РаспределениеИтогНДС.Видимость 	= Ложь;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяСтраницыДляУстановки) Тогда
		Элементы.ГруппаСтраницыОсновная.ТекущаяСтраница = СтраницыПанели[ИмяСтраницыДляУстановки];
	КонецЕсли;
	
	ВидимостьАктуализацииКурсов();
	
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	
	// Оставим только те разрезы, которые указаны в статье оборотов.
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//НастроитьВидимостьАналитикБюджетирования();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
			
КонецПроцедуры // УправлениеЭлементамиФормы()

&НаСервере
Процедура ВидимостьАктуализацииКурсов()

	Элементы.АвтоматическиАктуализироватьКурсы.Видимость 	= Объект.ВалютаДокумента <> мКэшЗначений.мВалютаРеглУчета;
	Элементы.ФормаАктуализироватьПоКурсам.Видимость 		= Объект.ВалютаДокумента <> мКэшЗначений.мВалютаРеглУчета;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

// +СБ. Широков Николай. 2014-10-14. ТЗ "Казначейство" 2.2.2.11.
&НаСервере
Процедура ДатаРасходаПриИзмененииНаСервере()

	Для каждого СтрТЧ Из Объект.Распределение Цикл
		СтрТЧ.СБ_ДатаРасхода = Объект.ДатаРасхода;	
	КонецЦикла; 

КонецПроцедуры // ДатаРасходаПриИзмененииНаСервере()
// -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-09-10. ТЗ "Казначейство" 2.2.2.11.	
&НаКлиенте
Процедура СБ_СценарийПриИзменении(Элемент)
	СБ_КазначействоКлиент.бит_ЗаявкаНаРасходованиеСредствОбщаяСценарийПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-10. ТЗ "Казначейство" 2.2.2.11.	
&НаКлиенте
Процедура СБ_Сценарий_СписокПриИзменении(Элемент)
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-02-19
	// В режиме "список" при измении сценария появлялась ошибка:
	// "Поле объекта не обнаружено (Элементы)"
	// было
	//СБ_КазначействоКлиент.бит_ЗаявкаНаРасходованиеСредствОбщаяСценарийПриИзменении(ЭтаФорма.Объект, Элемент);
	// заменено на 
	СБ_КазначействоКлиент.бит_ЗаявкаНаРасходованиеСредствОбщаяСценарийПриИзменении(ЭтаФорма, Элемент);
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-02-19
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-10. ТЗ "Казначейство" 2.2.2.11.	
&НаКлиенте
Процедура СБ_ВалютаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = бит_Казначейство.СформироватьСписокДоступныхВалют(ЭтотОбъект);	//мСписокВалют;
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-10. ТЗ "Казначейство" 2.2.2.11.	
&НаКлиенте
Процедура СБ_ВалютаПриИзменении(Элемент)
	
	ЭлементыФормы = ЭтаФорма.Элементы;
	ТекущиеДанные = ЭлементыФормы.Распределение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;                                 	
	КонецЕсли; 
	
	СтрКурса = ПолучитьКурсВалюты(ТекущиеДанные.СБ_Валюта, Объект.Дата);
	ТекущиеДанные.СБ_Курс      = СтрКурса.Курс;
	ТекущиеДанные.СБ_Кратность = СтрКурса.Кратность;
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		Объект.ВалютаДокумента			= ТекущиеДанные.СБ_Валюта;
		Объект.КурсДокумента 			= ТекущиеДанные.СБ_Курс;
		Объект.КратностьДокумента 		= ТекущиеДанные.СБ_Кратность;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьКурсВалюты(Валюта, НаДату)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, НаДату);

КонецФункции // ПолучитьКурсВалюты()
// -СБ. Широков Николай 

// +СБ. Широков Николай. 2014-09-10. ТЗ "Казначейство" 2.2.2.11.	
&НаКлиенте
Процедура СБ_БанковскийСчетОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	 ЭлементыФормы = ЭтаФорма.Элементы;
	ТекущиеДанные = ЭлементыФормы.Распределение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;                                 	
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец"       			,Объект.Организация);
	СтруктураПараметров.Вставить("ВалютаДенежныхСредств"    ,ТекущиеДанные.СБ_Валюта);
	СтруктураПараметров.Вставить("РасчетыВУЕ"     			,Ложь);
	//СтруктураПараметров.Вставить("ТекущийЭлемент" 			,ТекущиеДанные.СБ_БанковскийСчетОрганизации);	
	СтруктураПараметров.Вставить("ЭлементВладелец"			,Элемент);
	
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуВыбораРасчетногоСчета(СтруктураПараметров);
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-11. ТЗ "Казначейство" 2.2.2.11.	
&НаКлиенте
Процедура СБ_КонтрагентПриИзменении(Элемент)
	
		ЭлементыФормы = ЭтаФорма.Элементы;
	ТекущиеДанные = ЭлементыФормы.Распределение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;                                 	
	КонецЕсли; 
	
	Если ТекущиеДанные.СБ_Контрагент <> ТекущиеДанные.ДоговорКонтрагента.Владелец Тогда
		ТекущиеДанные.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");	
	КонецЕсли; 
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		Контрагент 			= ТекущиеДанные.СБ_Контрагент;
		ДоговорКонтрагента 	= ТекущиеДанные.ДоговорКонтрагента;
	КонецЕсли; 
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-23. ТЗ "Казначейство" 2.2.2.11.	
&НаКлиенте
Процедура СБ_ДатаРасходаПриИзменении(Элемент)
	
	ЭлементыФормы = ЭтаФорма.Элементы;
	ТекущиеДанные = ЭлементыФормы.Распределение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;                                 	
	КонецЕсли; 
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		ДатаРасхода			= ТекущиеДанные.СБ_ДатаРасхода;
	КонецЕсли; 
	
КонецПроцедуры // -СБ. Широков Николай

// +СБ. Широков Николай. 2014-09-23. ТЗ "Казначейство" 2.2.2.11.	
&НаКлиенте
Процедура СБ_БанковскийСчетОрганизацииПриИзменении(Элемент)
	
	ЭлементыФормы = ЭтаФорма.Элементы;
	ТекущиеДанные = ЭлементыФормы.Распределение.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;                                 	
	КонецЕсли; 
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда
		БанковскийСчетОрганизации = ТекущиеДанные.СБ_БанковскийСчетОрганизации;
	КонецЕсли; 
	
КонецПроцедуры // -СБ. Широков Николай


//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-05-12 (#ТП_БП05_ФР15)
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаСписка" Тогда
		Если ТипЗнч(ЭтотОбъект.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ЭтотОбъект.ТекущийЭлемент.ТекущиеДанные.Аналитика_5  = ВыбранноеЗначение;
		Иначе
		Объект.Аналитика_5 = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-05-12 (#ТП_БП05_ФР15)
