#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мБылПроведен; // Служит для передачи признака проведения между обработчиками.

Перем мРежимЗаписи; // Служит для передачи режима записи между обработчиками.

Перем мСписок Экспорт; // Определяет способ редактирования документа - в списке или нет.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения регистра ПланируемоеПоступлениеДенежныхСредств.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

Перем мЕстьСправочникКассы Экспорт; // Хранит признак того, что в конфигурации есть справочник кассы.

Перем мПометкаИзГрафикаПлатажей Экспорт; // Опеределяет выполнение пометки на удаление из графика платежей.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// +СБ. Широков Николай. 2014-09-23. ТЗ "Казначейство" 2.2.2.11. 
	ЭтоСценарийОперативногоПланирования = (Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования"));
	// -СБ. Широков Николай 

	Заголовок = "";
	
	Если Распределение.Количество() > 1 Тогда 
		ИмяКонтейнера = "Распределение.";
	Иначе
		ИмяКонтейнера = "";
	КонецЕсли;
	
// +СБ. Широков Николай. 2014-09-23. ТЗ "Казначейство" 2.2.2.11. 	
	//ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "ЦФО");
    Если НЕ ЭтоСценарийОперативногоПланирования Тогда
		ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера +"ДатаРасхода");
		ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера +"ВалютаДокумента");
		ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера +"КурсДокумента");
		ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера +"КратностьДокумента");
	КонецЕсли; 
// -СБ. Широков Николай 		
	ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "СтатьяОборотов");
	ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "Сумма");
	ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "СтавкаНДС");
	
	бит_ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ПроверитьВалютыДоговоров(Отказ,Заголовок);
	
	// Обязательные измерения из разряда дополнительных.
	Для Каждого КлючИЗначение Из мНастройкиИзмерений Цикл
	
		ИмяИзмерения = КлючИЗначение.Ключ;
		Настройка    = КлючИЗначение.Значение;
		
		Если Настройка.Обязательное Тогда
			
			ТекстСообщения = "Не заполнено значение реквизита """+Настройка.Синоним+"""!";
		    ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + ИмяИзмерения);	
		
		КонецЕсли; 
	
	КонецЦикла;
	
// +СБ. Широков Николай. 2014-09-23. ТЗ "Казначейство" 2.2.2.11. 
    ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаРасхода");
    ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВалютаДокумента");
    ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КурсДокумента");
    ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КратностьДокумента");
// -СБ. Широков Николай	
	
	// Установка настроек обязательности реквизитов.
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мБылПроведен = Проведен;
	мРежимЗаписи = РежимЗаписи;
	
    Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	бит_МеханизмДопИзмерений.КонтрольТиповДополнительныАналитик(Распределение);
	
	Если ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей 
		И Не мПометкаИзГрафикаПлатажей Тогда
		// Проверим возможность выполнения действия.
		бит_Казначейство.ПроверитьВозможностьЗаписиДокументаПланирования(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
	
		ПересчитатьСуммы();
	
        // Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
        бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
        
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
	
	Если НЕ Отказ  Тогда
		
		Если НЕ мРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			УстановитьСтатус(мРежимЗаписи);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
    // Если заявка закрыта.
    Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта Тогда
		
		ТекстСообщения = "Документ в статусе """ + СокрЛП(мТекущийСтатус) + """, проведение невозможно!";
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
		
	КонецЕсли;
    
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл"));
	
	ТаблицаРасход = ПолучитьТаблицуРаспределение();
	
	// Выполним движения.
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаРасход,СтруктураКурсыВалют,Отказ,Заголовок);
		
		// Заполним перечень виз.
		Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ мБылПроведен Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Организация);
			СтруктураПараметров.Вставить("ЦФО",ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
			
		КонецЕсли; 
		
        // Установим статус документа.
        УстановитьСтатус(РежимЗаписиДокумента.Проведение);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта Тогда
		// Сообщим пользователю о запрете проведения документа в статусе "Закрыта".
		бит_ОбщегоНазначения.СообщитьОбОшибке("Документ в статусе """ + СокрЛП(мТекущийСтатус) + """, отмена проведения не возможна!", Отказ, 
										  "Отмена проведения документа: " + СокрЛП(Ссылка));
	КонецЕсли;
	
	ЕстьПодчиненныеДокументы = бит_ОбщегоНазначения.ЕстьПодчиненныеДокументы(Ссылка, "бит_ЗаявкаНаРасходованиеСредств");
	
	Если ЕстьПодчиненныеДокументы Тогда
		бит_ОбщегоНазначения.СообщитьОбОшибке("У документа есть подчиненные документы, отмена проведения не возможна!", Отказ, 
										  "Отмена проведения документа: " + СокрЛП(Ссылка));
	КонецЕсли;
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
    
    Если НЕ Отказ Тогда
		// Очистим визы.
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);		
		
	КонецЕсли;
    
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ЭтоНовый() Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		СуммаВключаетНДС = Истина;
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ВалютаДокумента      = ВалютаРегламентированногоУчета;
			КурсДокумента        = 1;
			КратностьДокумента   = 1;			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ФормаОплаты) Тогда
			ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТипЗаявки) Тогда
			ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
		КонецЕсли;
		
		 // Заполнить реквизиты значениями по умолчанию.
		 бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, Пользователи.ТекущийПользователь(),
		 	Неопределено,"РасходованиеБДДС");												   
													   
		ИзменениеСтатьиОборотовМодуль();

		ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
		Если НачалоДня(ДатаРасхода) < НачалоДня(ТекущаяДата) Тогда
			ДатаРасхода = НачалоДня(ТекущаяДата);
		КонецЕсли;  
        
        // Проверим принадлежность ЦФО к статье оборотов.
		СписокСтатейПринадлежность = ПолучитьСписокСтатейПоПринадлежностиМодуль();
		ПараметрыПроверки = Новый Структура; 
		ПараметрыПроверки.Вставить("СписокСтатейПринадлежность", СписокСтатейПринадлежность);
		ПараметрыПроверки.Вставить("ЦФО", 						 ЦФО);
		ПараметрыПроверки.Вставить("СтатьяОборотов", 			 СтатьяОборотов);
		
		ПринадлежитЦФО = бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(ПараметрыПроверки);
		Если НЕ ПринадлежитЦФО Тогда
			  СтатьяОборотов = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
		КонецЕсли; 
		
		// Проверим корректность направления и типа статьи.
		ПараметрыПроверки = Новый Структура; 
		ПараметрыПроверки.Вставить("СтатьяОборотов", СтатьяОборотов);
		ПараметрыПроверки.Вставить("РасходДоход", 	 Перечисления.бит_РасходДоход.Расходование);
		ПараметрыПроверки.Вставить("ТипСтатьи", 	 Перечисления.бит_ТипыСтатейОборотов.БДДС);
		СтатьяОборотовКорректна = бит_Казначейство.СтатьяОборотовКорректна(ПараметрыПроверки);									   
	    Если НЕ СтатьяОборотовКорректна Тогда
			  СтатьяОборотов = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
		КонецЕсли; 											   
		
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект,
			мИзмеренияДоп,мНастройкиИзмерений);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда 
		// Если тип документа "График платежей", тогда.
		Если ОбъектКопирования.ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей Тогда
			
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Копирование документа ""%1"": 
							 |Копировать документ с типом ""График платежей"" запрещено!'"), ОбъектКопирования.Ссылка); 
			ВызватьИсключение ТекстСообщения;		
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, Пользователи.ТекущийПользователь(), 
		ОбъектКопирования, "РасходованиеБДДС");
		
	ДатаРасхода 		= ОбщегоНазначения.ТекущаяДатаПользователя(); 
	ДатаПлатежаКрайняя 	= Дата('00010101');
	Комментарий 		= "";
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура получает статус объекта.
// 
Процедура ПолучитьСтатусМодуль()  Экспорт
	
	// Получаем статус и дату изменения статуса для документа.
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		   = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	мДатаИзмененияСтатуса  = РезСтруктура.Дата;
	
КонецПроцедуры // ПолучитьСтатусМодуль()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтрКурса.Курс;
	КратностьДокумента = СтрКурса.Кратность;
	
КонецПроцедуры // ИзменениеВалюты()

// Процедура обрабатывает изменение ставки НДС.
// 
Процедура ИзменениеСтатьиОборотовМодуль() Экспорт

	СтавкаНДС = СтатьяОборотов.СтавкаНДС;
	РассчитатьСуммуНДСМодуль(ЭтотОбъект);

КонецПроцедуры // ИзменениеСтатьиОборотовМодуль()

// Процедура рассчитывает сумму НДС.
// 
Процедура РассчитатьСуммуНДСМодуль(Контейнер) Экспорт

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Контейнер.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма, Истина, Истина,
						бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС));
																							
																							
КонецПроцедуры // РассчитатьСуммуНДС()

// функция получает список статей, принадлежащих данному ЦФО.
// 
Функция ПолучитьСписокСтатейПоПринадлежностиМодуль(ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено) Экспорт
	
	Если ИндексСтроки = Неопределено Тогда              	
		ПараметрЦФО = ЦФО;
	Иначе 
		ПараметрЦФО = Распределение[ИндексСтроки].ЦФО;	
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"       ,Дата);
	СтруктураПараметров.Вставить("ЦФО"        ,ПараметрЦФО);
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("РасходДоход",Перечисления.бит_РасходДоход.Расходование);
	СтруктураПараметров.Вставить("ТипСтатьи"  ,Перечисления.бит_ТипыСтатейОборотов.БДДС);
	
	Если ВыводитьСообщения Тогда
		
		СтруктураПараметров.Вставить("ВыводитьСообщения",Истина);
		
	КонецЕсли; 
	
	СписокСтатей = бит_Казначейство.ПолучитьСписокСтатейПоПринадлежности(СтруктураПараметров);
	
	
	Возврат СписокСтатей;
	
КонецФункции // ПолучитьСписокСтатейПоПринадлежности()

// Процедура Устанавливает ид строки табличной части.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.
// 
Процедура УстановитьИДСтроки(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры // УстановитьИДСтроки()

// Процедура выполняет пересчет сумм документа в разные валюты.
// 
Процедура ПересчитатьСуммы() Экспорт
	
	Если Распределение.Количество()=0 Тогда
		СтрокаРаспределение = Распределение.Добавить();
		УстановитьИДСтроки(СтрокаРаспределение);
	Иначе
		СтрокаРаспределение = Распределение[0];
	КонецЕсли; 
	
	Если мСписок = Неопределено Тогда
		мСписок = ?(Распределение.Количество()>1,Истина,Ложь);
	КонецЕсли; 
	
	Если мСписок Тогда
		Если Распределение.Количество()>1 Тогда
			МассивИсключений = Новый Массив;
			МассивИсключений.Добавить("Сумма");
			МассивИсключений.Добавить("НДС");	
		КонецЕсли; 		
		СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка",МассивИсключений);
		Сумма = Распределение.Итог("Сумма");
		НДС   = Распределение.Итог("НДС");			
	Иначе	
		СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Строка",МассивИсключений);		
	КонецЕсли;
	
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Регл,Упр"));
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("НДС");
	
	бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(ЭтотОбъект,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
	
	// Для вывода структуры подчиненности
	СуммаДокумента = Сумма;
	
КонецПроцедуры // ПересчитатьСуммы()

// Процедура синхронизирует реквизиты шапки документа и строки табличной части.
// 
// Параметры:
//  СтрокаТабличнойЧасти  - СтрокаТабличнойЧасти.Распределение.
//  ИмяПриемника          - Строка: "Шапка","Строка".
// 
Процедура СинхронизироватьРеквизитыШапкиИСтроки(СтрокаТабличнойЧасти,ИмяПриемника,МассивИсключений=Неопределено) Экспорт

	Если МассивИсключений = Неопределено Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаТабличнойЧасти) = Тип("Число") Тогда
		СтрокаТабличнойЧасти = Распределение[СтрокаТабличнойЧасти];
	КонецЕсли;
	
	ИменаРеквизитов = Документы.бит_ЗаявкаНаРасходованиеСредствОбщая.НовыеРеквизитыДляСинхронизации();
	Для каждого КлючИСтруктура Из ИменаРеквизитов Цикл
		
		Если МассивИсключений.Найти(КлючИСтруктура.Ключ)<>Неопределено Тогда
			 Продолжить;
		КонецЕсли; 
		
		ИмяРеквизитаШапка = КлючИСтруктура.Ключ;
		ИмяРеквизитаСтрока= КлючИСтруктура.Значение;
		ЗначениеШапка     = ЭтотОбъект[ИмяРеквизитаШапка];
		ЗначениеСтрока    = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока];
		
		Если ЗначениеШапка <> ЗначениеСтрока Тогда
			
			Если ВРег(ИмяПриемника) = "ШАПКА" Тогда
				
				ЭтотОбъект[ИмяРеквизитаШапка] = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока];
				
			ИначеЕсли ВРег(ИмяПриемника) = "СТРОКА" Тогда	
				
				СтрокаТабличнойЧасти[ИмяРеквизитаСтрока] = ЭтотОбъект[ИмяРеквизитаШапка];
				
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры // СинхронизироватьРеквизитыШапкиИСтроки()

// Процедура устанавливает статус документа.
// 
// Параметры:
// 	Нет.
// 
Процедура УстановитьСтатус(ВхРежимЗаписи = Неопределено) Экспорт
	
	СтрАлгоритмы                    = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса       = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
	
	
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		
		Если вхРежимЗаписи = Неопределено Тогда
		     РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
		     РежимЗаписи = вхРежимЗаписи;
		КонецЕсли; 
		
		Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта Тогда
			Возврат;
		КонецЕсли; 
		
		// Вычислим переменные, необходимые для установки статуса.
	    ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);				
	    
	    Статус = ОпределитьСтатус(ЭтотОбъект, мТекущийСтатус, ВсеВизыПолучены, ЕстьОтклонено, РежимЗаписи);
		
		// Если статус изменился - запишем его
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			КонецЕсли; 	
			
		КонецЕсли;
	
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
	
	
КонецПроцедуры // УстановитьСтатус()

// Функция определяет статус документа.
// 
// 
Функция ОпределитьСтатус(ТекущийОбъект, НачальныйСтатус, ВсеВизыПолучены, ЕстьОтклонено, вхРежимЗаписи) Экспорт

    РезСтатус = НачальныйСтатус;
    
    Если вхРежимЗаписи = РежимЗаписиДокумента.Проведение 
        ИЛИ (вхРежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
        РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Рабочая;
    Иначе
        РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Черновик;
    КонецЕсли; 
    
    Если РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Рабочая 
        ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Утверждена
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Отклонен Тогда
		
		Если ЕстьОтклонено Тогда
			
			РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Отклонен;
			
		Иначе	
			
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Утверждена;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Рабочая;
			КонецЕсли; 
			
		КонецЕсли;
        
    КонецЕсли; 
    
    Возврат РезСтатус;
    
КонецФункции // ОпределитьСтатус()

// Функция актуализирует курсы заявки на текущую дату.
//
Функция АктуализироватьПоКурсам(РежимСообщений = "Все") Экспорт 

	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Оплачена Тогда 
	
		ТекстСообщения =  НСтр("ru = 'По документу " + Ссылка + " произведена оплата,
									|актуализация невозможна!'");
									
		Если РежимыВывода.ВыводитьИнформацию Тогда
		
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
				
		Возврат Ложь;
	КонецЕсли;	
		
	// Наличие платежного документа.
	МассивДок = Документы.бит_ЗаявкаНаРасходованиеСредств.НайтиДокументыОплатыЗаявки(Ссылка);
	
	Если МассивДок.Количество()>0 Тогда
	
		ТекстСообщения =  НСтр("ru = 'По документу " + Ссылка + " найден документ оплаты,
									|актуализация невозможна!'");
									
		Если РежимыВывода.ВыводитьИнформацию Тогда
		
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
		Возврат Ложь;
	КонецЕсли; 	
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
	
	Если СтрКурса.Курс = КурсДокумента Тогда
	
		ТекстСообщения =  НСтр("ru = 'По документу " + Ссылка + " курс соответствует курсу на текущую дату,
									|актуализация невозможна!'");
									
		Если РежимыВывода.ВыводитьИнформацию Тогда
		
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
		Возврат Ложь;
	КонецЕсли; 
	
	КурсДокумента 		= СтрКурса.Курс;
	КратностьДокумента 	= СтрКурса.Кратность;
	
	Попытка
	
		Записать(РежимЗаписиДокумента.Запись);
	
	Исключение
		
		ТекстСообщения =  ИнформацияОбОшибке();
									
		Если РежимыВывода.ВыводитьИнформацию Тогда
		
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		ИначеЕсли РежимыВывода.ВыводитьОшибки Тогда
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		    ЗаписьЖурналаРегистрации(ТекстСообщения 
		                        	 ,УровеньЖурналаРегистрации.Информация 
		                        	 , 
		                        	 ,
		                        	 ,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		КонецЕсли; 
		
		Возврат Ложь;
		
	КонецПопытки; 
	
	Если Проведен Тогда
	
		ТаблицаРасход = ПолучитьТаблицуРаспределение();
		
		СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

		СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.Сценарий.Валюта, СтруктураШапкиДокумента.Дата);		
		СтруктураШапкиДокумента.Вставить("КурсСценарий"     , СтруктураСценарий.Курс);
		СтруктураШапкиДокумента.Вставить("КратностьСценарий", СтруктураСценарий.Кратность);

		СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаРасход, СтруктураКурсыВалют, Ложь, бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));  
		
		Попытка
		
			Движения.бит_ПланируемыйРасходДенежныхСредств.Записать();
		
		Исключение
			ТекстСообщения =  ИнформацияОбОшибке();
										
			Если РежимыВывода.ВыводитьИнформацию Тогда
			
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			ИначеЕсли РежимыВывода.ВыводитьОшибки Тогда
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
			    ЗаписьЖурналаРегистрации(ТекстСообщения 
			                        	 ,УровеньЖурналаРегистрации.Информация 
			                        	 , 
			                        	 ,
			                        	 ,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
										 
			КонецЕсли; 
			
			Возврат Ложь;
									 
		КонецПопытки; 
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // АктуализироватьПоКурсам()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет допустимость использования договоров в табличной части распределение. 
// Анализируется валюта платежа.
// 
// Параметры:
//  Отказ  - Булево.
//  Заголовок - Строка.
// 
Процедура ПроверитьВалютыДоговоров(Отказ,Заголовок)

	Если Распределение.Количество()=0 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ТаблицаВрем = Новый ТаблицаЗначений;
	ТаблицаВрем.Колонки.Добавить("НомерСтроки");	
	ТаблицаВрем.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаВрем.Колонки.Добавить("РасчетыВУЕ");
	ТаблицаВрем.Колонки.Добавить("ВалютаВзаиморасчетов");
	ТаблицаВрем.Колонки.Добавить("ВалютаПлатежа");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для каждого СтрокаРаспределение Из Распределение Цикл
	
		НоваяСтрока = ТаблицаВрем.Добавить();
		НоваяСтрока.НомерСтроки        = СтрокаРаспределение.НомерСтроки;
		НоваяСтрока.ДоговорКонтрагента = СтрокаРаспределение.ДоговорКонтрагента;
		НоваяСтрока.РасчетыВУЕ         = СтрокаРаспределение.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
		НоваяСтрока.ВалютаВзаиморасчетов = СтрокаРаспределение.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		НоваяСтрока.ВалютаПлатежа        = бит_Казначейство.ОпределитьВалютуПлатежа(
			НоваяСтрока.ВалютаВзаиморасчетов, НоваяСтрока.РасчетыВУЕ, ВалютаРегламентированногоУчета);
	
	КонецЦикла; 
	
	ВалютаЭталон  = ТаблицаВрем[0].ВалютаПлатежа;
	ДоговорЭталон = ТаблицаВрем[0].ДоговорКонтрагента;
	
	Для каждого СтрокаТаблицы Из ТаблицаВрем Цикл
		
		Если ВалютаДокумента <> ВалютаРегламентированногоУчета
			И ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента)
			И СтрокаТаблицы.ВалютаВзаиморасчетов <> ВалютаДокумента Тогда
		
				 ТекстСообщения = "В строке № "
								  +СтрокаТаблицы.НомерСтроки
								  +" табличной части ""Распределение"" валюта взаиморасчетов """
								  +СтрокаТаблицы.ВалютаВзаиморасчетов
								  +""" по договору """
								  +СтрокаТаблицы.ДоговорКонтрагента
								  +""" не соответствует валюте документа """
								  +ВалютаДокумента+""".";
								  
				 бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);				  
		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ДоговорЭталон) И ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) 
			И СтрокаТаблицы.ВалютаПлатежа <> ВалютаЭталон Тогда
		
				 ТекстСообщения = "В строке № "
								  +СтрокаТаблицы.НомерСтроки
								  +" табличной части ""Распределение"" валюта платежа """
								  +СтрокаТаблицы.ВалютаПлатежа
								  +""" по договору """
								  +СтрокаТаблицы.ДоговорКонтрагента
								  +""" не соответствует валюте платежа по документу """
								  +ВалютаЭталон+""".";
								  
				 бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);				  
		
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры // ПроверитьВалютыДоговоров()

// Функция получает данные по табличной части Распределение.
// 
Функция ПолучитьТаблицуРаспределение()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.ЦФО,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.СтатьяОборотов,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Проект,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.Контрагент,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.ДоговорКонтрагента,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Сумма,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.СтавкаНДС,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.НДС,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_1,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_2,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_3,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_4,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_5,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_6,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_7,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.ВалютаДокумента,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.ФормаОплаты,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.Организация,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.БанковскийСчетОрганизации,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.Касса
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая.Распределение КАК бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка = &Ссылка";
	
	// +СБ. Широков Николай. 2014-09-11. ТЗ "Казначейство" 2.2.2.11. 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокТЧ.ЦФО,
	|	ДокТЧ.СтатьяОборотов,
	|	ДокТЧ.Проект,
	|	ВЫБОР
	|		КОГДА &БратьРеквизитыТЧ
	|			ТОГДА ДокТЧ.СБ_Контрагент
	|		ИНАЧЕ Док.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ДокТЧ.ДоговорКонтрагента,
	|	ДокТЧ.Сумма,
	|	ДокТЧ.СтавкаНДС,
	|	ДокТЧ.НДС,
	|	ДокТЧ.НоменклатурнаяГруппа,
	|	ДокТЧ.Аналитика_1,
	|	ДокТЧ.Аналитика_2,
	|	ДокТЧ.Аналитика_3,
	|	ДокТЧ.Аналитика_4,
	|	ДокТЧ.Аналитика_5,
	|	ДокТЧ.Аналитика_6,
	|	ДокТЧ.Аналитика_7,
	|	ВЫБОР
	|		КОГДА &БратьРеквизитыТЧ
	|			ТОГДА ДокТЧ.СБ_Валюта
	|		ИНАЧЕ Док.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	Док.ФормаОплаты,
	|	Док.Организация,
	|	ВЫБОР
	|		КОГДА &БратьРеквизитыТЧ
	|			ТОГДА ДокТЧ.СБ_БанковскийСчетОрганизации
	|		ИНАЧЕ Док.БанковскийСчетОрганизации
	|	КОНЕЦ КАК БанковскийСчетОрганизации,
	|	Док.Касса,
	|	ДокТЧ.СБ_Валюта,
	|	ДокТЧ.СБ_Курс,
	|	ДокТЧ.СБ_Кратность,
	|	&БратьРеквизитыТЧ,
	|	ВЫБОР
	|		КОГДА &БратьРеквизитыТЧ
	|			ТОГДА ДокТЧ.СБ_ДатаРасхода
	|		ИНАЧЕ Док.ДатаРасхода
	|	КОНЕЦ КАК ДатаРасхода,
	|	ДокТЧ.ИД
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая.Распределение КАК ДокТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК Док
	|		ПО ДокТЧ.Ссылка = Док.Ссылка
	|ГДЕ
	|	ДокТЧ.Ссылка = &Ссылка";
	
	БратьРеквизитыТЧ = (Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования")
		И Распределение.Количество() > 1);
	
	Запрос.УстановитьПараметр("БратьРеквизитыТЧ", БратьРеквизитыТЧ);
// -СБ. Широков Николай 

	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаРасход,СтруктураКурсыВалют,Отказ,Заголовок)
	
	 // Движения по регистру бит_ПланируемыйРасходДенежныхСредств.
	 
	НаборЗаписей = Движения.бит_ПланируемыйРасходДенежныхСредств; 
	 
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаРасход Из ТаблицаРасход Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация 			= СтрокаРасход.Организация;
		СтрокаДвижений.Валюта      			= СтрокаРасход.ВалютаДокумента;
		СтрокаДвижений.ВидДенежныхСредств   = СтрокаРасход.ФормаОплаты;
		СтрокаДвижений.Контрагент			= СтрокаРасход.Контрагент;
		СтрокаДвижений.ДоговорКонтрагента 	= СтрокаРасход.ДоговорКонтрагента;
		Если ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
			СтрокаДвижений.БанковскийСчет   	= СтрокаРасход.Касса;
		Иначе
			СтрокаДвижений.БанковскийСчет   	= СтрокаРасход.БанковскийСчетОрганизации;
		КонецЕсли;
		СтрокаДвижений.СтатьяОборотов       = СтрокаРасход.СтатьяОборотов;
		СтрокаДвижений.Проект               = СтрокаРасход.Проект;
		СтрокаДвижений.НоменклатурнаяГруппа = СтрокаРасход.НоменклатурнаяГруппа;
		СтрокаДвижений.ЦФО                  = СтрокаРасход.ЦФО;	
		СтрокаДвижений.ДокументПланирования = СтруктураШапкиДокумента.Ссылка;
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		Для н = 1 По МаксКолвоДопАналитик Цикл
			СтрокаДвижений["Аналитика_"+н]	= СтрокаРасход["Аналитика_"+н];
		КонецЦикла;
		
		СтрокаДвижений.Сумма              = СтрокаРасход.Сумма; 
		СтрокаДвижений.СуммаВзаиморасчеты = СтрокаРасход.Сумма; 	
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
// +СБ. Широков Николай. 2014-09-11. ТЗ "Казначейство" 2.2.2.11. 
		СтрокаДвижений.Период 				= ?(ЗначениеЗаполнено(СтрокаРасход.ДатаРасхода), СтрокаРасход.ДатаРасхода, Дата);
		СтрокаДвижений.МоментВремени		= Ссылка.МоментВремени();
		СтрокаДвижений.Регистратор          = Ссылка;
		Если СтрокаРасход.БратьРеквизитыТЧ Тогда
			СтруктураКурсВалютыСтроки = СтруктураКурсыВалют.Документ;
			
			СтруктураКурсВалютыСтроки.Валюта 	= СтрокаРасход.СБ_Валюта;
			СтруктураКурсВалютыСтроки.Курс 		= СтрокаРасход.СБ_Курс;
			СтруктураКурсВалютыСтроки.Кратность	= СтрокаРасход.СБ_Кратность;
			
		КонецЕсли; 
// -СБ. Широков Николай		
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла;

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//НаборЗаписей.мПериод          = СтруктураШапкиДокумента.ДатаРасхода;
	НаборЗаписей.мПериод          = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаРасхода),СтруктураШапкиДокумента.ДатаРасхода, Дата) ;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#Область Инициализация

ПолучитьСтатусМодуль();

мРежимОбновленияВиз             = Константы.бит_РежимОбновленияПеречняВиз.Получить();

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

мЕстьСправочникКассы = Метаданные.Справочники.Найти("Кассы") <> Неопределено;

мПометкаИзГрафикаПлатажей = Ложь;

#КонецОбласти

#КонецЕсли
