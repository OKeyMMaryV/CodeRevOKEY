////izhtc_translator ИЗМЕНЕННЫЕ СОБЫТИЯ ФОРМЫ (
////Событие КонтрагентОбработкаВыбора() заменилось на КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
////Событие СтатьяОборотовНачалоВыбора(Элемент, СтандартнаяОбработка)() заменилось на СтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие СБ_ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)() заменилось на СБ_ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие НомерЗаявкиОчистка() заменилось на НомерЗаявкиОчистка(Элемент, СтандартнаяОбработка)
////Событие НомерЗаявкиОбработкаВыбора() заменилось на НомерЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
////Событие бит_НомерПриИзменении() заменилось на бит_НомерПриИзменении(Элемент)
////Событие бит_ДатаПриИзменении() заменилось на бит_ДатаПриИзменении(Элемент)
////Событие УправленческаяАналитикаАналитика_2НачалоВыбора(Элемент, СтандартнаяОбработка)() заменилось на УправленческаяАналитикаАналитика_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие КонтрольБюджетаОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)() заменилось на КонтрольБюджетаОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие УправленческаяАналитикаПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)() заменилось на УправленческаяАналитикаПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)() заменилось на ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие КонтрольБюджетаТипРасходовНачалоВыбора(Элемент, СтандартнаяОбработка)() заменилось на КонтрольБюджетаТипРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие ЯвляетсяДокументомОплатыПриИзменении() заменилось на ЯвляетсяДокументомОплатыПриИзменении(Элемент)
////Событие КонтрагентПриИзменении() заменилось на КонтрагентПриИзменении(Элемент)
////Событие НомерЗаявкиПриИзменении() заменилось на НомерЗаявкиПриИзменении(Элемент)
////Событие НомерЗаявкиНачалоВыбора(Элемент, СтандартнаяОбработка)() заменилось на НомерЗаявкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие УправленческаАналитикаПослеУдаления() заменилось на УправленческаАналитикаПослеУдаления(Элемент)
////Событие КонтрольБюджетаПослеУдаления() заменилось на КонтрольБюджетаПослеУдаления(Элемент)
////Событие КонтрольБюджетаПриОкончанииРедактирования() заменилось на КонтрольБюджетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
////Событие УправленческаАналитикаПриОкончанииРедактирования() заменилось на УправленческаАналитикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
////Событие ДатаКурсаПриИзменении() заменилось на ДатаКурсаПриИзменении(Элемент)
////Событие ВалютаПриИзменении() заменилось на ВалютаПриИзменении(Элемент)
////Событие СуммаСНДСПриИзменении() заменилось на СуммаСНДСПриИзменении(Элемент)
////Событие СуммаБезНДСПриИзменении() заменилось на СуммаБезНДСПриИзменении(Элемент)
////Событие СтавкаНДСПриИзменении() заменилось на СтавкаНДСПриИзменении(Элемент)
////Событие ПослеЗаписи() заменилось на ПослеЗаписи(ПараметрыЗаписи)
////Событие РеквизитыДокументаОплатыВидДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)() заменилось на РеквизитыДокументаОплатыВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////Событие ВидДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)() заменилось на ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
////izhtc_translator ИЗМЕНЕННЫЕ СОБЫТИЯ ФОРМЫ )


//// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
////
//&НаКлиенте
//Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Команда)
//	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, Объект, ЭтаФорма, Команда.Текст);
//	
//КонецПроцедуры

//// Процедура - обработчик нажатия на кнопку "Печать"
////
//&НаКлиенте
//Процедура ОсновныеДействияФормыПечать(Команда)
//	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, Объект, ЭтаФорма, Команда.Текст);
//	
//КонецПроцедуры

//// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
////
////Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
////// izhtc_translator Предупреждение
////Процедура не используется
////Необходимо добавить текущий документ в общую команду "ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта"
//	
//	//Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
//		
//		//УстановитьКнопкиПечати();
//		
//	//КонецЕсли; 
//	
//	
////КонецПроцедуры

//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура УстановитьДоступность()
//	Если ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ДокументОплаты") тогда
//		Элементы.ЯвляетсяДокументомОплаты.Доступность = Истина;
//	иначе
//		Элементы.ЯвляетсяДокументомОплаты.Доступность = Истина;
//	КонецЕсли;
//КонецПроцедуры

//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура УстановитьЗначенияПриИзменении()
//    Если НЕ ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ДокументОплаты") тогда
//		Объект.ЯвляетсяДокументомОплаты = Ложь;
//	КонецЕсли;	
//КонецПроцедуры


//&НаКлиенте
//Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	ФормаВыбора = ПолучитьФорму("Справочник.бит_БК_ВидыДокументов.ФормаВыбора");
//	ФормаВыбора.МножественныйВыбор = Ложь;
//	ФормаВыбора.Отбор.ЗакрывающийДокумент.Значение = Истина;
//	ФормаВыбора.Отбор.ЗакрывающийДокумент.Использование = Истина;
//	ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.ЗакрывающийДокумент.Доступность = Ложь;
//	ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
//	Если НЕ ЗначениеВыбора = Неопределено Тогда 
//		Объект.ВидДокумента = ЗначениеВыбора;
//	КонецЕсли;
//КонецПроцедуры


//&НаКлиенте
//Процедура РеквизитыДокументаОплатыВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	ФормаВыбора = ПолучитьФорму("Справочник.бит_БК_ВидыДокументов.ФормаВыбора");
//	ФормаВыбора.МножественныйВыбор = Ложь;
//	ФормаВыбора.Отбор.ДокументОплаты.Значение = Истина;
//	ФормаВыбора.Отбор.ДокументОплаты.Использование = Истина;
//	ФормаВыбора.Элементы.СправочникСписок.НастройкаОтбора.ДокументОплаты.Доступность = Ложь;
//	ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
//	Если НЕ ЗначениеВыбора = Неопределено Тогда 
//		Элемент.Значение = ЗначениеВыбора;
//	КонецЕсли;
//КонецПроцедуры

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
////izhtc_translator предупреждение:
////Функция УправлениеПечатью.ПриСозданииНаСервере не используется в 3.0.
////Для замены её функционала в модуль менеджера нужно добавить процедуру ДобавитьКомандыПечати(
////В этой процедуре должны быть перечислены печатные формы вместе со своими обработчиками.
////Эта информация есть в модуле объекта исходной базы.

//	// СтандартныеПодсистемы.Печать
//	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаВажныеКоманды);
//	// Конец СтандартныеПодсистемы.Печать

//	// ДополнительныеОтчетыИОбработки
//	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
//	// Конец ДополнительныеОтчетыИОбработки

//	Если Объект.Ссылка.Пустая() Тогда
//// izhtc_translator Не найдено соответствие для функции ВыбратьВидОперации
//		//Вместо Неопределено можно добавить массив значений вида операций для исключения
//		РаботаСДиалогами.ВыбратьВидОперации(Объект, Отказ, Неопределено);
//	КонецЕсли;;
//	Если Объект.Ссылка.Пустая() Тогда
//// izhtc_translator Найдено 2 соответствий для функции в модулях:бит_ОбщегоНазначения; рс_ОбщийМодуль;   		
//		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(Объект, ПользователиКлиентСервер.ТекущийПользователь(), Параметры.ЗначениеКопирования);
//		// Валюта
//		Объект.ДатаКурсаДокумента = Объект.Дата;
//		Объект.ВалютаДокумента = мВалютаРегламентированногоУчета;
//		ИзменениеВалюты();
////ОК Ванюков К. +// Подстановка ставки в шапке// 2012-03-30
//		Если не ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда 
//        	Объект.СтавкаНДС		= ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию( "ОсновнаяСтавкаНДС", ПользователиКлиентСервер.ТекущийПользователь());
//		КонецЕсли;
////ОК Ванюков К. -		
//		НастройкаРегион = бит_БК_Общий.ПолучитьИмяНастройкиБК("Регион",ПараметрыСеанса.ТекущийПользователь);
//		Если НастройкаРегион.Количество() = 0 Тогда 
//			Сообщить("Не заполнено значение настройки <Регион>; регистр <Настройки БК>",СтатусСообщения.Информация);
//		Иначе 
//			Объект.Регион =НастройкаРегион[0].Значение;
//		КонецЕсли;
//		//СтавкаНДС = Перечисления.СтавкиНДС.НДС18;

//	КонецЕсли;
//	//Начало_бит_БК_Магомедов_15.11.2011 
//	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
//	// формы, значениями перечисления "Вид операции" данного вида документа.
//	// В качестве обработки выбора вида операции назначается процедура 
//	// ДействияФормыДействиеУстановитьОперацию модуля формы.
//	бит_РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(Элементы.ПодменюВидаОперации,
//	                                    Объект.ВидОперации.Метаданные().ЗначенияПеречисления,"ДействияФормыДействиеУстановитьОперацию");;
//	Элементы.Номер.ТолькоПросмотр	= Истина;
////ОК Ванюков К. -
//	КоличествоСтрокТЧ();
//	УстановитьДоступностьКолонокТЧ();
//	УстановитьВидимостьКолонокТЧ();
//	УстановитьВидимостьЭлементовФормы();
//	
//	//ОК Калинин М. Делаем  реквизит ИД недоступным для редактирования (под полными правами должен быть доступен). 
//	Если не РольДоступна("ПолныеПрава") тогда
//		Элементы.ID_Разнесения.Доступность=Ложь;		
//	конецесли;
//КонецПроцедуры



//&НаКлиенте
//Процедура ПослеЗаписи(ПараметрыЗаписи);
//КонецПроцедуры

//		//   действия с суммами 
//		
//		//в ТЧ 
//&НаКлиенте
//Функция ТекущаяСтрока()
//	Если Элементы.ТекущаяСтраница.Имя = "РеквизитыДокументаОплаты" Тогда
//		Возврат Элементы.РеквизитыДокументаОплаты.ТекущиеДанные;
//	ИначеЕсли Элементы.ТекущаяСтраница.Имя = "КонтрольБюджета" Тогда
//		Возврат Элементы.КонтрольБюджета.ТекущиеДанные;
//	ИначеЕсли Элементы.ТекущаяСтраница.Имя = "УправленческаяАналитика" Тогда
//		Возврат Элементы.УправленческаяАналитика.ТекущиеДанные;
//	КонецЕсли;
//	
//КонецФункции
////РеквизитыДокумента
//&НаКлиенте
//Процедура РеквизитыДокументаОплатыСуммаСНДСПриИзменении(Элемент)	
//	ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаСНДС", ТекущаяСтрока());
//	ПересчитатьСуммаФактаСНДС();
//КонецПроцедуры

//&НаКлиенте
//Процедура РеквизитыДокументаОплатыСуммаБезНДСПриИзменении(Элемент)
//	ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаБезНДС", ТекущаяСтрока());
//	ПересчитатьСуммаФактаСНДС();
//КонецПроцедуры

//&НаКлиенте
//Процедура РеквизитыДокументаОплатыСтавкаНДСПриИзменении(Элемент)
//	ПересчитатьСуммыВТЧ_Вызов_Функции("СтавкаНДС", ТекущаяСтрока());
//	ПересчитатьСуммаФактаСНДС();
//КонецПроцедуры 

//&НаКлиенте
//Процедура РеквизитыДокументаОплатыСуммаВВалютеБезНДСПриИзменении(Элемент)
//	ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаВВалютеБезНДС", ТекущаяСтрока());
//	ПересчитатьСуммаФактаСНДС();
//КонецПроцедуры

//&НаКлиенте
//Процедура ПересчитатьСуммаФактаСНДС()
//	ТекСтрока = ТекущаяСтрока();
//	ТекСтрока.СуммаФактаСНДС = ТекСтрока.СуммаСНДС;
//КонецПроцедуры

////Валюта
//&НаКлиенте
//Процедура РеквизитыДокументаОплатыВалютаПриИзменении(Элемент)
//	ИзменениеВалютыВСтроке(ТекущаяСтрока());
//	ПересчитатьСуммыВТЧ_Вызов_Функции("Валюта", ТекущаяСтрока());
//КонецПроцедуры

//&НаКлиенте
//Процедура РеквизитыДокументаОплатыДатаКурсаПриИзменении(Элемент)
//	ИзменениеВалютыВСтроке(ТекущаяСтрока());
//	ПересчитатьСуммыВТЧ_Вызов_Функции("Валюта", ТекущаяСтрока());
//КонецПроцедуры

//&НаСервере
//Процедура ИзменениеВалютыВСтроке(ТекСтрока)	
//	СтрКурса =
//// izhtc_translator Найдено 2 соответствий для функции в модулях:бит_КурсыВалют; РаботаСКурсамиВалют; 
// МодульВалютногоУчета.ПолучитьКурсВалюты(ТекСтрока.Валюта, ТекСтрока.ДатаКурса);
//	ТекСтрока.Курс      = СтрКурса.Курс;
//	ТекСтрока.Кратность = СтрКурса.Кратность;
//	
//КонецПроцедуры //ИзменениеВалюты()
////КонтрольБюджета
//&НаКлиенте
//Процедура КонтрольБюджетаСуммаБезНДСПриИзменении(Элемент)
//	ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаБезНДС", ТекущаяСтрока(), Ложь);
//КонецПроцедуры
////управленч аналитика
//&НаКлиенте
//Процедура УправленческаАналитикаСуммаБезНДСПриИзменении(Элемент)
//		ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаБезНДС", ТекущаяСтрока(), Ложь);
//КонецПроцедуры

////в Шапке
//&НаКлиенте
//Процедура СтавкаНДСПриИзменении(Элемент)
//	УстановитьЗначенияНДСВСтроках_Вызов_Функции();
//	ПересчитатьСуммыВШапке_Вызов_Функции("СтавкаНДС");
//КонецПроцедуры

//&НаКлиенте
//Процедура СуммаБезНДСПриИзменении(Элемент)
//	ПересчитатьСуммыВШапке_Вызов_Функции("СуммаБезНДС");
//КонецПроцедуры

//&НаКлиенте
//Процедура СуммаСНДСПриИзменении(Элемент)
//	ПересчитатьСуммыВШапке_Вызов_Функции("СуммаСНДС");
//КонецПроцедуры

////Валюта
//&НаКлиенте
//Процедура ВалютаПриИзменении(Элемент)
//	ИзменениеВалюты();
//	ПересчитатьСуммыВШапке_Вызов_Функции("Валюта");
//КонецПроцедуры

//&НаКлиенте
//Процедура ДатаКурсаПриИзменении(Элемент)
//	ИзменениеВалюты();
//	ПересчитатьСуммыВШапке_Вызов_Функции("Валюта");
//КонецПроцедуры

//&НаСервере
//Процедура ИзменениеВалюты()	
//	СтрКурса =
//// izhtc_translator Найдено 2 соответствий для функции в модулях:бит_КурсыВалют; РаботаСКурсамиВалют; 
// МодульВалютногоУчета.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаКурсаДокумента);
//	Объект.КурсДокумента      = СтрКурса.Курс;
//	Объект.КратностьДокумента = СтрКурса.Кратность;
//	
//КонецПроцедуры //ИзменениеВалюты()

////Кол-во строк
//&НаКлиенте
//Процедура УправленческаАналитикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
//	КоличествоСтрокТЧ();
//	ЗаполнитьТипДанныхУправленческаяАналитика_Вызов_Функции();
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтрольБюджетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
//	КоличествоСтрокТЧ();
//	ЗаполнитьТипДанныхКонтрольБюджета_Вызов_Функции();
//КонецПроцедуры 

//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура КоличествоСтрокТЧ() 
//	КоличествоСтрокКБ = Объект.КонтрольБюджета.Количество();
//	Элементы.НадписьКоличествоСтрокКБ.Заголовок = "Кол-во строк:"+ КоличествоСтрокКБ;
//	КоличествоСтрокУА = Объект.УправленческаяАналитика.Количество();
//	Элементы.НадписьКоличествоСтрокУА.Заголовок = "Кол-во строк:"+ КоличествоСтрокУА;
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтрольБюджетаПослеУдаления(Элемент)
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура УправленческаАналитикаПослеУдаления(Элемент)
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаСервере
//Функция НомерЗаявкиНачалоВыбора_Сервер(Список, Форма, Элемент)
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный") Тогда 
//		Список.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный"));
//		
//		// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
//		Список.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный"));		
//		// - БИТ AMerkulov 
//		
//	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный") Тогда 
//		Список.Добавить(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт"));
//	КонецЕсли;
//	Форма.Отбор.ВидОперации.ВидСравнения = ВидСравнения.ВСписке;
//	Форма.Отбор.ВидОперации.Значение = Список;
//	Форма.Отбор.ВидОперации.Использование = Истина;
//	Форма.Элементы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
//	
//	//отбор по контрагенту только для инвест
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный") И ЗначениеЗаполнено(Объект.Контрагент) Тогда
//		Форма.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно;
//		Форма.Отбор.Контрагент.Значение = Объект.Контрагент;
//		Форма.Отбор.Контрагент.Использование = Истина;
//		Форма.Элементы.ДокументСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
//	КонецЕсли;
//	
//	//отбор по статусам заявок только для опер
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный") Тогда 
//		СписокСтатусов = Новый СписокЗначений;
//		СписокСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании"));
//		СписокСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована"));
//		СписокЗаявок = бит_БК_Общий.ПолучитьСписокЗаявокПоСтаусу(СписокСтатусов);
//		Форма.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
//		Форма.Отбор.Ссылка.Значение = СписокЗаявок;
//		Форма.Отбор.Ссылка.Использование = Истина;
//		Форма.Элементы.ДокументСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
//	КонецЕсли;
//	
//	Форма.НачальноеЗначениеВыбора = Элемент.Значение;
//КонецФункции


////при выборе номера заявки
//&НаКлиенте
//Процедура НомерЗаявкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	Форма = ПолучитьФорму("Документ.бит_ФормаВводаБюджета.ФормаВыбора",,Элемент);
//		//отбор по виду операции
//	Список = Новый СписокЗначений;
//	НомерЗаявкиНачалоВыбора_Сервер(Список, // izhtc_translator(Передача на сервер недопустимого параметра с типом "форма")
//Форма, // izhtc_translator(Передача на сервер недопустимого параметра с типом "полеввода")
//Элемент);
//	ВозврЗначение = Форма.ОткрытьМодально();
//	Если НЕ ВозврЗначение = Неопределено Тогда 
//		Элемент.Значение = ВозврЗначение;	
//	КонецЕсли;
//    ОбновитьИнициатора(); //ОК+ Аверьянова 12.08.14
//КонецПроцедуры

//&НаКлиенте
//Процедура НомерЗаявкиПриИзменении(Элемент)
//	ПроверитьСтатусЗаявки();
//	ПроверитьКонтрагента();
//	ОбновитьИнициатора(); //ОК+ Аверьянова 12.08.14
////+СБ.Скиба С. 25-09-2014 заполнение поля Договор контрагента
//	Если ЗначениеЗаполнено(Объект.НомерЗаявки) и Объект.ВидОперации=ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный") тогда
//		 Объект.СБ_ДоговорКонтрагента=ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.НомерЗаявки, "ДоговорКонтрагента");
//	КонецЕсли;
////-СБ.Скиба С.
//КонецПроцедуры

//&НаСервере
//Функция ПроверитьСтатусЗаявки_Сервер(ТекСтатус)
//	
//	ТекСтатус = РегистрыСведений.бит_СтатусыОбъектов.Получить(Новый Структура("Объект, ВидСтатуса",Объект.НомерЗаявки, ПредопределенноеЗначение("Перечисление.бит_ВидыСтатусовОбъектов.Статус")));
//КонецФункции


//&НаКлиенте
//Процедура ПроверитьСтатусЗаявки()
//	Перем ТекСтатус;
//	
//	Если НЕ ЗначениеЗаполнено(Объект.НомерЗаявки) Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	ПроверитьСтатусЗаявки_Сервер(ТекСтатус);
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный") Тогда 
//		Если ТекСтатус.Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании") Тогда
//			Предупреждение("Заявка на согласовании с "+ТекСтатус.ДатаИзмененияСтатуса,5);
//		ИначеЕсли НЕ ТекСтатус.Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована") Тогда
//			Предупреждение("Заявка не согласована ",5);
//		КонецЕсли;
//	Иначе 
//		Если НЕ ТекСтатус.Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Заключен") Тогда
//			Предупреждение("Статус документа Контракт не равен <Заключен>",5);
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура ПроверитьКонтрагента()
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный") Тогда 
//		Если НЕ Объект.Контрагент = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.НомерЗаявки, "Контрагент") Тогда 
//			Объект.Контрагент = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.НомерЗаявки, "Контрагент");
//		КонецЕсли;
//	КонецЕсли;	
//КонецПроцедуры

////при изменении контрагента
//&НаКлиенте
//Процедура КонтрагентПриИзменении(Элемент)
//	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
//		//ОК+ Аверьянова 25.02.15 очистим и договор
//		Объект.СБ_ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
//		//ОК- Аверьянова 25.02.15
//		Возврат;
//	КонецЕсли;
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный") Тогда 
//		Если НЕ ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.НомерЗаявки, "Контрагент") = Объект.Контрагент Тогда 
//			Объект.НомерЗаявки = ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
//		КонецЕсли;
//	КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//Процедура ИсторияДокументаНажатие(Элемент)
//	Если Объект.Ссылка.Пустая() Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Форма = ПолучитьФорму("РегистрСведений.бит_БК_ИсторияСобытийОбъектов.ФормаСписка",, ЭтаФорма);
//	Поле = Новый ПолеКомпоновкиДанных("Объект");
//	ДоступноеПоле = Форма.Список.Отбор.ДоступныеПоляОтбора.НайтиПоле(Поле);
//	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ЭлементОтбора.ЛевоеЗначение = Поле;
//	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
//	ЭлементОтбора.Использование = Истина;
//	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
//	Форма.Открыть();
//КонецПроцедуры

//&НаСервере
//Функция ЯвляетсяДокументомОплатыПриИзменении_Сервер()
//	
//	//Если Не т строк, добавим одну
//	Если Объект.РеквизитыДокументаОплаты.Количество() = 0 Тогда
//		Объект.РеквизитыДокументаОплаты.Добавить();
//	КонецЕсли;
//	
////ОК Ванюков К. +// При установке флажка «Является документом оплаты» должны стираться все ячейки, кроме «Вид документа». // 2012-03-05
//    	КолонкиРеквизитыДокументаОплаты = Объект.РеквизитыДокументаОплаты.ВыгрузитьКолонки();
////ОК Ванюков К. -	
//	//переносим данные из шапки в ТЧ 
//	Для Каждого ТекСтрока Из Объект.РеквизитыДокументаОплаты Цикл
////ОК Ванюков К. +// При установке флажка «Является документом оплаты» должны стираться все ячейки, кроме «Вид документа». // 2012-03-05
//		Для Каждого Кол из КолонкиРеквизитыДокументаОплаты.Колонки Цикл
//			Если Кол.Имя <> "ВидДокумента" 
//				и Кол.Имя <> "НомерСтроки" Тогда 
//				ТекСтрока[Кол.Имя] = "";
//			КонецЕсли;
//		КонецЦикла;
////ОК Ванюков К. -	
//		ТекСтрока.Валюта = Объект.ВалютаДокумента;
//		ТекСтрока.СуммаСНДС = Объект.СуммаСНДС;
//		ТекСтрока.СтавкаНДС = Объект.СтавкаНДС;
//		ТекСтрока.СуммаБезНДС = Объект.СуммаБезНДС;
//		Если ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ДокументОплаты") Тогда 
//			ТекСтрока.ВидДокумента = Объект.ВидДокумента;
//		КонецЕсли;
//		ТекСтрока.Дата = Объект.бит_Дата;
//		ТекСтрока.Номер = Объект.бит_Номер;
//		ТекСтрока.ПроцентПредоплаты = 0;
//		ТекСтрока.СуммаФактаСНДС = Объект.СуммаСНДС;
//	КонецЦикла;
//КонецФункции


////установка флага ЯвляетсяДокументомОплаты 
//&НаКлиенте
//Процедура ЯвляетсяДокументомОплатыПриИзменении(Элемент)
//	//Валюта
//	//Сумма с НДС
//	//Ставка с НДС
//	//Сумма без НДС в руб
//	//Вид документа
//	//Дата
//	//Номер
//	//% предоплаты = 100%
//	
//	УстановитьДоступностьКолонокТЧ();
//	Если НЕ Объект.ЯвляетсяДокументомОплаты  Тогда
//		Возврат;
//	КонецЕсли;
//	Если НЕ Объект.РеквизитыДокументаОплаты.Количество() = 0 Тогда 	
//		Ответ = Вопрос("Данные в табличной части будут изменены. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
//		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
//			Объект.ЯвляетсяДокументомОплаты = Ложь;
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	//Если Не т строк, добавим одну
//	ЯвляетсяДокументомОплатыПриИзменении_Сервер();
//	
//КонецПроцедуры

//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура УстановитьДоступностьКолонокТЧ()
//	 
//		Элементы.РеквизитыДокументаОплаты.ПодчиненныеЭлементы.Валюта.ТолькоПросмотр = Объект.ЯвляетсяДокументомОплаты;
//		Элементы.РеквизитыДокументаОплаты.ПодчиненныеЭлементы.СуммаСНДС.ТолькоПросмотр = Объект.ЯвляетсяДокументомОплаты;
//		Элементы.РеквизитыДокументаОплаты.ПодчиненныеЭлементы.СтавкаНДС.ТолькоПросмотр = Объект.ЯвляетсяДокументомОплаты;
//		Элементы.РеквизитыДокументаОплаты.ПодчиненныеЭлементы.СуммаБезНДС.ТолькоПросмотр = Объект.ЯвляетсяДокументомОплаты;
//		Если ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ДокументОплаты") Тогда 
//			Элементы.РеквизитыДокументаОплаты.ПодчиненныеЭлементы.ВидДокумента.ТолькоПросмотр = Объект.ЯвляетсяДокументомОплаты;
//		КонецЕсли;
//		Элементы.РеквизитыДокументаОплаты.ПодчиненныеЭлементы.Дата.ТолькоПросмотр = Объект.ЯвляетсяДокументомОплаты;
//		Элементы.РеквизитыДокументаОплаты.ПодчиненныеЭлементы.Номер.ТолькоПросмотр = Объект.ЯвляетсяДокументомОплаты;
//		Элементы.РеквизитыДокументаОплаты.ПодчиненныеЭлементы.ПроцентПредоплаты.ТолькоПросмотр = Объект.ЯвляетсяДокументомОплаты;
//		
//КонецПроцедуры

//&НаСервере
//Функция ДействияФормыДействиеУстановитьОперацию_Сервер(ПредыдущийВидОперации, ТекущийВидОперации)

//	ПредыдущийВидОперации=Объект.ВидОперации; //Сохраним пред. вид операции для его сравнения с новым
//	
//	Если Команда <> Неопределено Тогда // найти новое значение вида операции
//		ТекущийВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов[Команда.Имя];
//	КонецЕсли;
//КонецФункции

//	
//// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
//// формы. Процедура устанавливает значение реквизита ВидОперации.
//&НаКлиенте
//Процедура ДействияФормыДействиеУстановитьОперацию(Команда)
//	Перем ПредыдущийВидОперации, ТекущийВидОперации;

//	ДействияФормыДействиеУстановитьОперацию_Сервер(ПредыдущийВидОперации, ТекущийВидОперации);
//	
//	//Если операция не поменялась то выходим
//	Если  ПредыдущийВидОперации = ТекущийВидОперации Тогда 
//		Возврат;
//	иначе
//		Если Объект.КонтрольБюджета.Количество()>0 ИЛИ Объект.РеквизитыДокументаОплаты.Количество() >0 ИЛИ Объект.УправленческаяАналитика.Количество()> 0 ИЛИ ЗначениеЗаполнено(Объект.НомерЗаявки) Тогда
//			Ответ = Вопрос("Данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
//			Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
//				Возврат;
//			иначе
//				ОчиститьТаблицы_Вызов_Функции();
//				Объект.НомерЗаявки = ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка");
//			КонецЕсли;			
//			
//		КонецЕсли; 
//		Объект.ВидОперации = ТекущийВидОперации;
//		
//	КонецЕсли;;

//	УстановитьВидимостьКолонокТЧ();
//	УстановитьВидимостьЭлементовФормы();
//КонецПроцедуры

//&НаСервере
//Функция КонтрольБюджетаТипРасходовНачалоВыбора_Сервер(Список, Форма)
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный") Тогда 
//		Список.Добавить(ПредопределенноеЗначение("Справочник.бит_СценарииБюджетирования.Факт_У"));
//	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный") Тогда 
//		Список.Добавить(ПредопределенноеЗначение("Справочник.бит_СценарииБюджетирования.Факт_Инвест"));
//	КонецЕсли;	
//	Форма.Отбор.Ссылка.Значение = Список;
//	Форма.Отбор.Ссылка.Использование = Истина;
//	Форма.Элементы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Ложь;
//КонецФункции
// // ДействияФормыДействиеУстановитьОперацию()

//&НаКлиенте
//Процедура КонтрольБюджетаТипРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	Форма = ПолучитьФорму("Справочник.бит_СценарииБюджетирования.ФормаВыбора",,Элемент);
//	Форма.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
//	Список = Новый СписокЗначений;
//	Список.Добавить(ПредопределенноеЗначение("Справочник.бит_СценарииБюджетирования.Факт_А"));
//	КонтрольБюджетаТипРасходовНачалоВыбора_Сервер(Список, // izhtc_translator(Передача на сервер недопустимого параметра с типом "форма")
//Форма);
//	Элемент.Значение = Форма.ОткрытьМодально();

//КонецПроцедуры

//&НаКлиенте
//Процедура УправленческаяАналитикаПериодПриИзменении(Элемент)
//	ТекСтрока = ТекущаяСтрока();
//	ТекСтрока.Период = НачалоМесяца(ТекСтрока.Период);
//	ТекСтрока.ПредставлениеПериодаРегистрации = Формат(ТекСтрока.Период, "ДФ='MMMM yyyy'");
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтрольБюджетаПериодПриИзменении(Элемент)
//	ТекСтрока = ТекущаяСтрока();
//	ТекСтрока.Период = НачалоМесяца(ТекСтрока.Период);
//	ТекСтрока.ПредставлениеПериодаРегистрации = Формат(ТекСтрока.Период, "ДФ='MMMM yyyy'");

//КонецПроцедуры


//	//Кнопки ТЧ

////КонтрольБюджета 
//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета1Очистить(Команда)
//	Если Объект.КонтрольБюджета.Количество()>0 Тогда
//		Ответ = Вопрос("Данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
//		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
//			Возврат;
//		КонецЕсли;
//		Объект.КонтрольБюджета.Очистить();
//	КонецЕсли; 
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета1Сумма(Команда)
//	Если Объект.КонтрольБюджета.Количество() = 0 Тогда 
//		НовСтрока = Объект.КонтрольБюджета.Добавить();
//	Иначе 
//		НовСтрока = Объект.КонтрольБюджета[0];
//	КонецЕсли;
//	НовСтрока.СтавкаНДС = Объект.СтавкаНДС;
//	Если НЕ Объект.СуммаСНДС = 0 Тогда 
//		НовСтрока.СуммаБезНДС = Объект.СуммаБезНДС;
//	Иначе 
//		//добавить сумму из ТЧ
//		НовСтрока.СуммаБезНДС = Объект.РеквизитыДокументаОплаты.Итог("СуммаБезНДС");
//	КонецЕсли;
//	ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаБезНДС", НовСтрока, Ложь);
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета2ПоискПоБюджету(Команда)
//	бит_ПоискПоБюджету_Вызов_Функции();
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета1Распределить(Команда)
//	ТекСтрока = ТекущаяСтрока();
//	Если ТекСтрока = Неопределено Тогда 
//		Предупреждение("Выберите строку для распределения", 5);
//		Возврат;
//	КонецЕсли;
//	бит_РаспределитьКонтрольБюджета_Вызов_Функции(ТекСтрока);
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета1УменьшитьНаКоэффициент(Команда)
//	Коэффициент = 1.18;
//	Если ВвестиЧисло(Коэффициент, "Введите коэффициент уменьшения", 10, 2)  Тогда 
//		Для Каждого ТекСтрока Из Объект.КонтрольБюджета Цикл
//			Если Коэффициент = 0 Тогда 
//				Прервать;
//			КонецЕсли;
//			
//			ТекСтрока.СуммаБезНДС = ТекСтрока.СуммаБезНДС/Коэффициент;
//			ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаБезНДС", ТекСтрока, Ложь);
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета1УвеличитьНаКоэффициент(Команда)
//	Коэффициент = 1.18;
//	Если ВвестиЧисло(Коэффициент, "Введите коэффициент увеличения", 10, 2)  Тогда 
//		Для Каждого ТекСтрока Из Объект.КонтрольБюджета Цикл
//			Если Коэффициент = 0 Тогда 
//				Прервать;
//			КонецЕсли;
//			
//			ТекСтрока.СуммаБезНДС = ТекСтрока.СуммаБезНДС*Коэффициент;
//			ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаБезНДС", ТекСтрока, Ложь);
//		КонецЦикла;
//	КонецЕсли;	
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета2ПосчитатьОбщуюСумму(Команда)
//	ПосчитатьОбщуюСумму_Вызов_Функции("КонтрольБюджета");
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета2СкопироватьИзБДР(Команда)
//	//Переносит данные В ТЧ контрольБюджета из ТЧ УправленческаяАналитика
//	Если НЕ Объект.КонтрольБюджета.Количество() = 0 Тогда 
//		Ответ = Вопрос("Данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
//		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;	
//	СкопироватьИзБДР_Вызов_Функции();
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета1Буфер(Команда)
//	бит_Буфер_Вызов_Функции("КонтрольБюджета");
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета2ВариантыРаспределения(Команда)
//	//Распределяем по первой строке
//	Если Объект.КонтрольБюджета.Количество() = 0 Тогда 
//		Возврат;
//	КонецЕсли;
//	Ответ = Вопрос("Данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
//	Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
//		Возврат;
//	КонецЕсли;

//	ТекСтрока = Объект.КонтрольБюджета[0];
//	Форма = ПолучитьФорму("Справочник.бит_БК_ВариантыРаспределения.ФормаВыбора");
//	ВариантРаспределения = Форма.ОткрытьМодально();
//	Если НЕ ВариантРаспределения = Неопределено Тогда 
//		бит_ВариантыРаспределения_Вызов_Функции(ТекСтрока, ВариантРаспределения);
//	КонецЕсли;
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//	//УправленческаяАналитика
//&НаКлиенте
//Процедура КоманднаяПанельУправленческаяАналитика1Очистить(Команда)
//	Если Объект.УправленческаяАналитика.Количество()>0 Тогда
//		Ответ = Вопрос("Данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
//		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
//			Возврат;
//		КонецЕсли;
//		Объект.УправленческаяАналитика.Очистить();
//	КонецЕсли; 
//    КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельУправленческаяАналитика1РаспределитьПоБДР(Команда)
//	//Переносит данные ТЧ контрольБюджета в ТЧ УправленческаяАналитика
//	Если НЕ Объект.УправленческаяАналитика.Количество() = 0 Тогда 
//		Ответ = Вопрос("Данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
//		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	РаспределитьПоБДР_Вызов_Функции();
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельУправленческаяАналитика1Распределить(Команда)
//	ТекСтрока = ТекущаяСтрока();
//	Если ТекСтрока = Неопределено Тогда 
//		Предупреждение("Выберите строку для распределения", 5);
//		Возврат;
//	КонецЕсли;
//	бит_РаспределитьУправленческаяАналитика_Вызов_Функции(ТекСтрока);
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельУправленческаяАналитика2ПосчитатьОбщуюСумму(Команда)
//	ПосчитатьОбщуюСумму_Вызов_Функции("УправленческаяАналитика");
//КонецПроцедуры

//&НаКлиенте
//Процедура КоманднаяПанельУправленческаяАналитика1Буфер(Команда)
//	бит_Буфер_Вызов_Функции("УправленческаяАналитика");
//	КоличествоСтрокТЧ();
//КонецПроцедуры

//&НаСервере
//Функция КоманднаяПанель1ЗаполнитьПоЗаявке_Сервер(Форма)
//	
//	СтрокиЗаявки = Объект.НомерЗаявки.БДДС.Выгрузить();
//	
//	// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
//	Если ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.НомерЗаявки, "ВидОперации") = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный") Тогда
//		
//		МассивКУдалению = Новый Массив;
//		Для Каждого Стр Из СтрокиЗаявки Цикл
//			Если Стр.Сценарий <> ПредопределенноеЗначение("Справочник.бит_СценарииБюджетирования.Заявка_У") Тогда
//				МассивКУдалению.Добавить(Стр);
//			КонецЕсли;
//		КонецЦикла;
//		
//		Для Каждого Стр Из МассивКУдалению Цикл
//			СтрокиЗаявки.Удалить(Стр);	
//		КонецЦикла;
//		
//		
//	КонецЕсли;
//	// - БИТ AMerkulov
//	
//	СтрокиЗаявки.Колонки.Вставить(0,"Выбран",Новый ОписаниеТипов("Булево") ,,);
//	Форма = Объект.ПолучитьФорму("ФормаВыбораСтрокЗаявки",Элементы.КонтрольБюджета);
//	Форма.Элементы.ТабличноеПолеВыбора.Значение = СтрокиЗаявки;
//	Форма.СуммаДляЗагрузки = СтрокиЗаявки.Итог("бит_БК_СуммаБезНДС");
//КонецФункции


//&НаСервере
//Функция КоманднаяПанель1ЗаполнитьПоЗаявке_Сервер_1(Результат)
//	СтрокиДляЗагрузки =РеквизитФормыВЗначение("СтрокиЗаявки").Скопировать(Новый Структура("Выбран",Истина));
//	СуммаВыбранных = СтрокиДляЗагрузки.Итог("бит_БК_СуммаБезНДС");
//	Если СуммаВыбранных = Результат.СуммаДляЗагрузки Тогда 
//		Коэфф = 1;
//	иначе
//		Коэфф = Результат.СуммаДляЗагрузки/СуммаВыбранных;
//	КонецЕсли;
//	//здесь копим сумму округлений
//	ОкруглБезНДС = 0;
//	ОкруглСНДС = 0;
//	Для Каждого ТекСтрока Из СтрокиДляЗагрузки Цикл
//		Если НЕ ТекСтрока.Выбран Тогда 
//			Продолжить;
//		КонецЕсли;
//		//округляем в тек. строке
//		ТекСуммаБезНДС = ТекСтрока.бит_БК_СуммаБезНДС * Коэфф;
//		ОкруглБезНДС = ОкруглБезНДС + (ТекСуммаБезНДС - Окр(ТекСуммаБезНДС,2));
//		Если Окр(ОкруглБезНДС,2) <> 0 Тогда
//			ТекСуммаБезНДС = ТекСуммаБезНДС + Окр(ОкруглБезНДС,2);
//			ОкруглБезНДС = ОкруглБезНДС - Окр(ОкруглБезНДС,2);
//		КонецЕсли;
//		ТекСуммаСНДС = ТекСтрока.Сумма * Коэфф;
//		ОкруглСНДС = ОкруглСНДС + (ТекСуммаСНДС - Окр(ТекСуммаСНДС,2));
//		Если Окр(ОкруглСНДС,2) <> 0 Тогда
//			ТекСуммаСНДС = ТекСуммаСНДС + Окр(ОкруглСНДС,2);
//			ОкруглСНДС = ОкруглСНДС - Окр(ОкруглСНДС,2);
//		КонецЕсли;
//		
//		НоваяСтрока = Объект.КонтрольБюджета.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
//		НоваяСтрока.СуммаБезНДС = ТекСуммаБезНДС;
//		НоваяСтрока.НДС = ТекСтрока.НДС * Коэфф;
//		НоваяСтрока.СтавкаНДС = ТекСтрока.СтавкаНДС;
//		НоваяСтрока.СуммаСНДС = ТекСуммаСНДС;
//		НоваяСтрока.Сценарий = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный"),ПредопределенноеЗначение("Справочник.бит_СценарииБюджетирования.Факт_У"), ПредопределенноеЗначение("Справочник.бит_СценарииБюджетирования.Факт_Инвест"));
//	КонецЦикла;
//	ЗаполнитьПредставлениеПериодаРегистрацииВТЧ_Вызов_Функции();
//	КоличествоСтрокТЧ();
//КонецФункции


////Основная
//&НаКлиенте
//Процедура КоманднаяПанель1ЗаполнитьПоЗаявке(Команда)
//	Перем Форма;
//	Если НЕ ЗначениеЗаполнено(Объект.НомерЗаявки) Тогда
//		Предупреждение("Не выбрана заявка");
//		Возврат;
//	КонецЕсли;
//	
//	КоманднаяПанель1ЗаполнитьПоЗаявке_Сервер(// izhtc_translator(Передача на сервер недопустимого параметра с типом "форма")
//Форма);
//	
//	Результат = Форма.ОткрытьМодально(); 
//	Если Результат = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	Если Результат.СуммаДляЗагрузки = 0 Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Если Результат.СпособЗагрузки = "Загрузить" И НЕ Объект.КонтрольБюджета.Количество() = 0 Тогда 
//		Ответ = Вопрос("Данные на закладке <Контроль бюджета> будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,15,КодВозвратаДиалога.Нет); 
//		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
//			Возврат;
//		иначе
//			Объект.КонтрольБюджета.Очистить();
//		КонецЕсли;
//	КонецЕсли;
//	КоманднаяПанель1ЗаполнитьПоЗаявке_Сервер_1(Результат);
//КонецПроцедуры

//&НаСервере
//Функция КоманднаяПанельКонтрольБюджета1ПроверитьБюджет_Сервер()
//			Записать();;
//КонецФункции


////формирует отчет по разнесению оборотов
//&НаКлиенте
//Процедура КоманднаяПанельКонтрольБюджета1ПроверитьБюджет(Команда)
//	
//	Если Объект.Ссылка.Пустая() Тогда
//		Если Вопрос("Для продолжения необходимо записать документ. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
//			КоманднаяПанельКонтрольБюджета1ПроверитьБюджет_Сервер();;
//		Иначе
//			Возврат;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ФормаОтчета = ПолучитьФорму("Отчет.бит_БК_ОтчетПоРазнесениюОборотов.Форма");
//	ФормаОтчета.Документ = Объект.Ссылка;
//	ФормаОтчета.СформироватьОтчет();
//	ФормаОтчета.Открыть();
//		
//КонецПроцедуры

//&НаСервере
//Процедура КоманднаяПанель1ПроверитьПерерасход(Команда)
//	Отчет = Отчеты.бит_БК_ОтчетПоРазнесениюОборотов.Создать();
//	Форма = Отчет.ПолучитьФорму("ФормаОтчета");
//	Форма.Документ = Объект.Ссылка;
//	форма.Открыть();
//	Форма.СформироватьОтчет();
//КонецПроцедуры

//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура УстановитьВидимостьЭлементовФормы()
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный") Тогда 
//		//izhtc_translator предупреждение: Элемент формы НадписьНомерЗаявки был удален. Проверьте корректность замены или удаления кода, связанного с этим элементом
// 
//		Элементы.НомерЗаявки.Заголовок = "№ контракта:";
//	Иначе
//		//izhtc_translator предупреждение: Элемент формы НадписьНомерЗаявки был удален. Проверьте корректность замены или удаления кода, связанного с этим элементом

//		Элементы.НомерЗаявки.Заголовок = "№ заявки:";
//	КонецЕсли;
//	
//КонецПроцедуры

//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура УстановитьВидимостьКолонокТЧ()
//	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный") Тогда 
//		Элементы.КонтрольБюджета.ПодчиненныеЭлементы.Проект.Видимость = Истина;
//		Элементы.УправленческаяАналитика.ПодчиненныеЭлементы.Проект.Видимость = Истина;
//	Иначе
//		Элементы.КонтрольБюджета.ПодчиненныеЭлементы.Проект.Видимость = Ложь;
//		Элементы.УправленческаяАналитика.ПодчиненныеЭлементы.Проект.Видимость = Ложь;
//	КонецЕсли;
//	
//КонецПроцедуры


//// ОБРАБОТЧИКИ ПРЕДСТАВЛЕНИЯ ПЕРИОДА

//// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
////
//&НаКлиенте
//Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
//	Если НЕ ЗначениеЗаполнено(Элементы.КонтрольБюджета.ТекущиеДанные.Период) Тогда 
//		Элементы.КонтрольБюджета.ТекущиеДанные.Период = НачалоМесяца(ТекущаяДата());
//		Элементы.КонтрольБюджета.ТекущиеДанные.ПредставлениеПериодаРегистрации =
//// izhtc_translator Не найдено соответствие для функции ПолучитьПредставлениеПериодаРегистрации
// РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(НачалоМесяца(ТекущаяДата()));
//	КонецЕсли;
//// izhtc_translator Не найдено соответствие для функции РегулированиеПредставленияПериодаРегистрации
//	
//	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, Элементы.КонтрольБюджета.ТекущиеДанные.Период, Элементы.КонтрольБюджета.ТекущиеДанные.ПредставлениеПериодаРегистрации);
//	ПредставлениеПериодаРегистрацииПриИзменении(Элемент);
//		
//	//РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
//	//МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

//	// Проверка на последний рабочий день месяца.
//	//ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Дата);

//	//УстановитьВидимостьКолонок();

//КонецПроцедуры

//// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
////
//&НаКлиенте
//Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	Если НЕ ЗначениеЗаполнено(Элементы.КонтрольБюджета.ТекущиеДанные.Период) Тогда 
//		Элементы.КонтрольБюджета.ТекущиеДанные.Период = НачалоМесяца(ТекущаяДата());
//		//ЭлементыФормы.КонтрольБюджета.ТекущаяСтрока.ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(НачалоМесяца(ТекущаяДата()));
//	КонецЕсли;
//// izhtc_translator Не найдено соответствие для функции НачалоВыбораИзСпискаПредставленияПериодаРегистрации

//	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Элементы.КонтрольБюджета.ТекущиеДанные.Период, ЭтаФорма);
//	ПредставлениеПериодаРегистрацииПриИзменении(Элемент);
//	
//	//РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
//	//МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

//	// Проверка на последний рабочий день месяца.
//	//ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Дата);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПредставлениеПериодаРегистрацииПриИзменении(Элемент)
//	ТекСтрока = Элементы.КонтрольБюджета.ТекущиеДанные;
//	ТекСтрока.Период = НачалоМесяца(ТекСтрока.Период);
//КонецПроцедуры

////упр аналитика
//&НаКлиенте
//Процедура УправленческаяАналитикаПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	Если НЕ ЗначениеЗаполнено(Элементы.УправленческаяАналитика.ТекущиеДанные.Период) Тогда 
//		Элементы.УправленческаяАналитика.ТекущиеДанные.Период = НачалоМесяца(ТекущаяДата());
//		//ЭлементыФормы.КонтрольБюджета.ТекущаяСтрока.ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(НачалоМесяца(ТекущаяДата()));
//	КонецЕсли;
//// izhtc_translator Не найдено соответствие для функции НачалоВыбораИзСпискаПредставленияПериодаРегистрации

//	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Элементы.УправленческаяАналитика.ТекущиеДанные.Период, ЭтаФорма);
//	ПредставлениеПериодаРегистрацииПриИзменении(Элемент);

//КонецПроцедуры

//&НаКлиенте
//Процедура УправленческаяАналитикаПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
//	Если НЕ ЗначениеЗаполнено(Элементы.УправленческаяАналитика.ТекущиеДанные.Период) Тогда 
//		Элементы.УправленческаяАналитика.ТекущиеДанные.Период = НачалоМесяца(ТекущаяДата());
//		Элементы.УправленческаяАналитика.ТекущиеДанные.ПредставлениеПериодаРегистрации =
//// izhtc_translator Не найдено соответствие для функции ПолучитьПредставлениеПериодаРегистрации
// РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(НачалоМесяца(ТекущаяДата()));
//	КонецЕсли;
//// izhtc_translator Не найдено соответствие для функции РегулированиеПредставленияПериодаРегистрации
//	
//	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, Элементы.УправленческаяАналитика.ТекущиеДанные.Период, Элементы.УправленческаяАналитика.ТекущиеДанные.ПредставлениеПериодаРегистрации);
//	ПредставлениеПериодаРегистрацииПриИзменении(Элемент);

//КонецПроцедуры

//&НаКлиенте
//Процедура УправленческаяАналитикаПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;

//КонецПроцедуры

//&НаКлиенте
//Процедура УправленческаяАналитикаПредставлениеПериодаРегистрацииПриИзменении(Элемент)
//	ТекСтрока = Элементы.УправленческаяАналитика.ТекущиеДанные;
//	ТекСтрока.Период = НачалоМесяца(ТекСтрока.Период);

//КонецПроцедуры

//&НаСервере
//Функция КонтрольБюджетаОбъектНачалоВыбора_Сервер(СтандартнаяОбработка, Элемент)
//	СтандартнаяОбработка = Ложь;
//	бит_БК_Общий.ОбъектНачалоВыбора(Элемент);
//КонецФункции



////обработка выбора объекта
////контроль бюджета
//&НаКлиенте
//Процедура КонтрольБюджетаОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	КонтрольБюджетаОбъектНачалоВыбора_Сервер(СтандартнаяОбработка, // izhtc_translator(Передача на сервер недопустимого параметра с типом "полеввода")
//Элемент);
//КонецПроцедуры

//&НаСервере
//Функция КонтрольБюджетаОбъектАвтоПодборТекста_Сервер(СтандартнаяОбработка, Текст, ТекстАвтоПодбора)
//	СтандартнаяОбработка = Ложь;
//	бит_БК_Общий.ОбъектАвтоПодборТекста(Текст,ТекстАвтоПодбора);
//КонецФункции


//&НаКлиенте

//// izhtc_translator(
//// Реализовать функционал через АвтоПодбор
//Процедура КонтрольБюджетаОбъектАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
//	КонтрольБюджетаОбъектАвтоПодборТекста_Сервер(СтандартнаяОбработка, Текст, ТекстАвтоПодбора);	
//КонецПроцедуры

//&НаКлиенте
////izhtc_translator предупреждение в данной процедуре изменился параметр: ДанныеВыбора раньше назывался Значение.
//Процедура КонтрольБюджетаОбъектОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	бит_БК_Общий.ОбъектОкончаниеВводаТекста(Текст, ДанныеВыбора);	
//КонецПроцедуры

//&НаСервере
//Функция УправленческаяАналитикаАналитика_2НачалоВыбора_Сервер(СтандартнаяОбработка, Элемент)
//	СтандартнаяОбработка = Ложь;
//	бит_БК_Общий.ОбъектНачалоВыбора(Элемент);
//КонецФункции


////упр аналитика
//&НаКлиенте
//Процедура УправленческаяАналитикаАналитика_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	УправленческаяАналитикаАналитика_2НачалоВыбора_Сервер(СтандартнаяОбработка, // izhtc_translator(Передача на сервер недопустимого параметра с типом "полеввода")
//Элемент);
//КонецПроцедуры

//&НаСервере
//Функция УправленческаяАналитикаАналитика_2АвтоПодборТекста_Сервер(СтандартнаяОбработка, Текст, ТекстАвтоПодбора)
//	СтандартнаяОбработка = Ложь;
//	бит_БК_Общий.ОбъектАвтоПодборТекста(Текст,ТекстАвтоПодбора);
//КонецФункции


//&НаКлиенте

//// izhtc_translator(
//// Реализовать функционал через АвтоПодбор
//Процедура УправленческаяАналитикаАналитика_2АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
//	УправленческаяАналитикаАналитика_2АвтоПодборТекста_Сервер(СтандартнаяОбработка, Текст, ТекстАвтоПодбора);
//КонецПроцедуры

//&НаКлиенте
////izhtc_translator предупреждение в данной процедуре изменился параметр: ДанныеВыбора раньше назывался Значение.
//Процедура УправленческаяАналитикаАналитика_2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	бит_БК_Общий.ОбъектОкончаниеВводаТекста(Текст, ДанныеВыбора);
//КонецПроцедуры

////Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
////// izhtc_translator Предупреждение
////Процедура не используется
//	//бит_РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
////КонецПроцедуры

//&НаСервере
//Процедура ДействияФормыДвиженияДокументаПоРегистрам(Команда)
//	бит_РаботаСДиалогами.НапечататьДвиженияДокумента(Объект.Ссылка);
//КонецПроцедуры

////ОК Ванюков К. + //2012-02-09
////При вводе реквизитов  «Номер закрывающего документа» и «Дата закрывающего документа» необходимо проверить
////что не существует уже введенного документа «Разнсение оборотов» с таким контрагентом, номерому закр.док. и датой закр. док.

//&НаКлиенте
//Процедура бит_ДатаПриИзменении(Элемент)
//	ПроверитьСуществованиеДокумента_Вызов_Функции();
//КонецПроцедуры

//&НаКлиенте
//Процедура бит_НомерПриИзменении(Элемент)
//	ПроверитьСуществованиеДокумента_Вызов_Функции();
//КонецПроцедуры

////ОК Ванюков К. + //2012-02-09
////На вкладке УправленческаяАналитика нужна кнопка "Сумма" как на КонтрольБюджета
//&НаКлиенте
//Процедура КоманднаяПанельУправленческаяАналитика1Сумма(Команда)
//	Если Объект.УправленческаяАналитика.Количество() = 0 Тогда 
//		НовСтрока = Объект.УправленческаяАналитика.Добавить();
//	Иначе 
//		НовСтрока = Объект.УправленческаяАналитика[0];
//	КонецЕсли;
//	НовСтрока.СтавкаНДС = Объект.СтавкаНДС;
//	НовСтрока.СуммаБезНДС = Объект.СуммаБезНДС;
//	ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаБезНДС", НовСтрока, Ложь);
//КонецПроцедуры

////ОК Ванюков К. + //2012-03-01
////«Заполнить по заявке» разместить под самой заявкой
//&НаКлиенте
//Процедура ЗаполнитьПоЗаявкеНажатие(Элемент)
//	КоманднаяПанель1ЗаполнитьПоЗаявке(Элемент);
//КонецПроцедуры

////ОК Ванюков К. + // «Уменьшить на коэффициент» на вкладку «управленческий учет»» //2012-03-01
//&НаКлиенте
//Процедура КоманднаяПанельУправленческаяАналитика1УменьшитьНаКоэффициент(Команда)
//	Коэффициент = 1.18;
//	Если ВвестиЧисло(Коэффициент, "Введите коэффициент уменьшения", 10, 2)  Тогда 
//		Для Каждого ТекСтрока Из Объект.УправленческаяАналитика Цикл
//			Если Коэффициент = 0 Тогда 
//				Прервать;
//			КонецЕсли;
//			
//			ТекСтрока.СуммаБезНДС = ТекСтрока.СуммаБезНДС/Коэффициент;
//			ПересчитатьСуммыВТЧ_Вызов_Функции("СуммаБезНДС", ТекСтрока, Ложь);
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

////ОК Ванюков К. +// // 2012-03-29
//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура ОК_ДополнитьДействияФормы()
//	
//	Элементы.РеквизитыДокументаОплаты.УстановитьДействие("ПередНачаломДобавления","ОК_РеквизитыДокументаОплаты_ПередНачаломДобавления");
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОК_РеквизитыДокументаОплаты_ПередНачаломДобавления(Элемент, Отказ, Копирование)

//// Скопировать валюту из шапки документа
//	Если не Копирование Тогда 
//		Отказ 				= Истина;
//		НовСтр				= Объект.РеквизитыДокументаОплаты.Добавить();
//		НовСтр.Валюта 		= Объект.ВалютаДокумента;
//		НовСтр.СтавкаНДС	= Объект.СтавкаНДС;
//	КонецЕсли;		
//КонецПроцедуры

//// Процедура разрешения/запрещения редактирования номера документа
//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура ДействияФормыРедактироватьНомер(Команда)
//			
//КонецПроцедуры

//&НаСервере
//Функция КоманднаяПанель1ПроверитьПерерасходСКонтролСтатьей_Сервер(имяотчета_)
//		ИмяФайла = ПолучитьИмяВременногоФайла("erf");		
//		Справочники.ВнешниеОбработки.НайтиПоНаименованию(имяотчета_).ХранилищеВнешнейОбработки.Получить().Записать(ИмяФайла);
//		Отчет = ВнешниеОтчеты.Создать(ИмяФайла);
//		Форма = Отчет.ПолучитьФорму("ФормаОтчета");
//		Форма.Документ = Объект.Ссылка;
//		форма.Открыть();
//		Форма.СформироватьОтчет();
//КонецФункции

//	
////ОК Ванюков К. -

////ОК Калинин М. 120213
//&НаКлиенте
//Процедура КоманднаяПанель1ПроверитьПерерасходСКонтролСтатьей()
//	имяотчета_="Отчет по разнесению оборотов(БИТ) С контролирующей статьей";
//	попытка
//		КоманднаяПанель1ПроверитьПерерасходСКонтролСтатьей_Сервер(имяотчета_);
//	исключение
//		возврат;
//	конецпопытки;			
//КонецПроцедуры	
////ОК Калинин М.

////ОК Калинин М. 250613
//&НаКлиенте
//Процедура КонтекстноеМенюЗаполнитьКолонку(Команда)
//	табличноеПоле=этаформа.ТекущийЭлемент;
//	
//	КолонкаИмя = табличноеПоле.ТекущаяКолонка.Данные;
//	ТекущееЗначение = табличноеПоле.ТекущиеДанные[КолонкаИмя];
//	Для Каждого ТекСтрока Из Объект[табличноеПоле.Данные] Цикл
//		ТекСтрока[КолонкаИмя] = ТекущееЗначение;
//	КонецЦикла;
//	
//	Если табличноеПоле.Данные="КонтрольБюджета" и КолонкаИмя = "СуммаБезНДС" Тогда
//		КонтрольБюджетаСуммаБезНДСПриИзменении(неопределено);
//	ИначеЕсли табличноеПоле.Данные="УправленческаяАналитика" и КолонкаИмя = "СуммаБезНДС" Тогда
//		//УправленческаАналитикаСуммаБезНДСПриИзменении(неопределено);		
//	КонецЕсли;
//	
//КонецПроцедуры

////ОК+ Аверьянова 120814
//&НаКлиенте
//Процедура НомерЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
//	ОбновитьИнициатора();	
//КонецПроцедуры

//&НаКлиенте
//Процедура НомерЗаявкиОчистка(Элемент, СтандартнаяОбработка)
//	ОбновитьИнициатора();
//КонецПроцедуры

//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура ОбновитьИнициатора()
//	Если ЗначениеЗаполнено(Объект.НомерЗаявки) Тогда
//		Объект.Инициатор = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(Объект.НомерЗаявки, "бит_БК_Инициатор");
//	Иначе
//		Объект.Инициатор = ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка");
//	КонецЕсли;	
//КонецПроцедуры // ОбновитьИнициатора()
////ОК- Аверьянова 120814

////+СБ.Скиба С. 01-10-2014 ТЗ казначейство v5_4 блока: 2.2.2.5. Доработки документа «Разнесение оборотов»
//&НаКлиенте
//Процедура СБ_ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка=Ложь;
//	ФормаВыбора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора.ФормаСписка",,Элемент);
//	ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение = Объект.Контрагент;
//	ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения = ВидСравнения.Равно;
//	ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
//	
//	ФормаВыбора.СправочникСписок.Отбор.Организация.Значение = Объект.Организация;
//	ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно;
//	ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
//	ФормаВыбора.Открыть();

//КонецПроцедуры
////-СБ.Скиба С.

////ОК+ Аверьянова 11.11.14
//&НаКлиенте
//Процедура СтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	СтандартнаяОбработка = Ложь;
//	Форма = ПолучитьФорму("Справочник.бит_СтатьиОборотов.ФормаВыбора");
//	Форма.Заголовок="Справочник Статьи оборотов (не БДДС)";
//	Форма.Отбор.ТипСтатьи.Использование=Истина;
//	Форма.Отбор.ТипСтатьи.ВидСравнения=ВидСравнения.НеРавно;
//	Форма.Отбор.ТипСтатьи.Значение	= ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС");
//	Форма.Элементы.СправочникСписок.ИерархическийПросмотр = истина;
//	
//	ВыбранноеЗначение=Форма.ОткрытьМодально();
//КонецПроцедуры

//&НаКлиенте
//Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
//	Если Элемент.Значение <> ВыбранноеЗначение Тогда
//		Объект.СБ_ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
//	КонецЕсли;
//КонецПроцедуры

//&НаСервере
//Функция Инициализация_Сервер()
////ОК-

//   
////ОК Калинин М.
////////////////////////////////////////////////////////////////////////////////// 
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 
//// 

//мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

////ОК Ванюков К. +//  // 2012-03-29
//ОК_ДополнитьДействияФормы();
////ОК Ванюков К. -

////ОК Калинин М. 250613 Добавление командной панели
//Элементы.Добавить(Тип("КоманднаяПанель"),"КонтекстноеМенюКонтрольБюджета",истина,Элементы.Панель1);	
//НоваяКнопка = Элементы.КонтекстноеМенюКонтрольБюджета.Кнопки.Добавить("ЗаполнитьКолонку",ТипКнопкиКоманднойПанели.Действие,"Заполнить колонку","КонтекстноеМенюЗаполнитьКолонку");
//НоваяКнопка.Картинка=БиблиотекаКартинок.бит_СкопироватьВверхВниз;
//НоваяКнопка.Отображение = ОтображениеКнопки.Авто;
//                                           	
//Элементы.КонтрольБюджета.КонтекстноеМеню=//izhtc_translator предупреждение: Элемент формы КонтекстноеМенюКонтрольБюджета был удален. Проверьте корректность замены или удаления кода, связанного с этим элементом
//Элементы.КонтекстноеМенюКонтрольБюджета;
//Элементы.УправленческаяАналитика.КонтекстноеМеню=//izhtc_translator предупреждение: Элемент формы КонтекстноеМенюКонтрольБюджета был удален. Проверьте корректность замены или удаления кода, связанного с этим элементом
//Элементы.КонтекстноеМенюКонтрольБюджета;
//КонецФункции


//&НаСервере
//Функция ПересчитатьСуммыВТЧ_Вызов_Функции(ТочкаВхода, ТекущаяСтрока, ЕстьВалюта=Истина)
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.ПересчитатьСуммыВТЧ(ТочкаВхода, ТекущаяСтрока, ЕстьВалюта);
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция УстановитьЗначенияНДСВСтроках_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.УстановитьЗначенияНДСВСтроках();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция ПересчитатьСуммыВШапке_Вызов_Функции(ТочкаВхода)
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.ПересчитатьСуммыВШапке(ТочкаВхода);
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция ЗаполнитьТипДанныхУправленческаяАналитика_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.ЗаполнитьТипДанныхУправленческаяАналитика();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция ЗаполнитьТипДанныхКонтрольБюджета_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.ЗаполнитьТипДанныхКонтрольБюджета();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция ОчиститьТаблицы_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.ОчиститьТаблицы();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция бит_ПоискПоБюджету_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.бит_ПоискПоБюджету();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция бит_РаспределитьКонтрольБюджета_Вызов_Функции(ТекущаяСтрока)
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.бит_РаспределитьКонтрольБюджета(ТекущаяСтрока);
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция ПосчитатьОбщуюСумму_Вызов_Функции(ИмяТЧ)
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.ПосчитатьОбщуюСумму(ИмяТЧ);
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция СкопироватьИзБДР_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.СкопироватьИзБДР();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция бит_Буфер_Вызов_Функции(ИмяТЧ)
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.бит_Буфер(ИмяТЧ);
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция бит_ВариантыРаспределения_Вызов_Функции(ТекСтрока, ВариантРаспределения)
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.бит_ВариантыРаспределения(ТекСтрока, ВариантРаспределения);
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция РаспределитьПоБДР_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.РаспределитьПоБДР();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция бит_РаспределитьУправленческаяАналитика_Вызов_Функции(ТекущаяСтрока)
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.бит_РаспределитьУправленческаяАналитика(ТекущаяСтрока);
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция ЗаполнитьПредставлениеПериодаРегистрацииВТЧ_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.ЗаполнитьПредставлениеПериодаРегистрацииВТЧ();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции

//&НаСервере
//Функция ПроверитьСуществованиеДокумента_Вызов_Функции()
//	_объект=РеквизитФормыВЗначение("Объект");
//	_объект.ПроверитьСуществованиеДокумента();
//	ЗначениеВРеквизитФормы(_объект, "Объект");
//КонецФункции
////ОК-

//   
////ОК Калинин М.
////////////////////////////////////////////////////////////////////////////////// 
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 
//// 

//Инициализация_Сервер();
////ОК Калинин М. 