////izhtc_translator ИЗМЕНЕННЫЕ СОБЫТИЯ ФОРМЫ (
////Событие ТипПоискаДанныхОткрытие() заменилось на ТипПоискаДанныхОткрытие(Элемент, СтандартнаяОбработка)
////Событие ТипПоискаДанныхОбработкаВыбора() заменилось на ТипПоискаДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
////Событие ЗначениеОтбораСпискаКонтрагентовАвтоПодборТекста() заменилось на ЗначениеОтбораСпискаКонтрагентовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
////Событие ЗначениеОтбораСпискаКонтрагентовПриИзменении() заменилось на ЗначениеОтбораСпискаКонтрагентовПриИзменении(Элемент)
////Событие ДокументСписокПриАктивизацииСтроки() заменилось на ДокументСписокПриАктивизацииСтроки(Элемент)
////izhtc_translator ИЗМЕНЕННЫЕ СОБЫТИЯ ФОРМЫ )


//&НаКлиенте
//Процедура ДокументСписокПриАктивизацииСтроки(Элемент)
//	Если ЗначениеЗаполнено(Элементы.Список.ТекущиеДанные) Тогда 
//		ПолеВводаКомментарий = Элементы.ДокументСписок.ТекущиеДанные.Комментарий;
//	КонецЕсли;
//КонецПроцедуры

////УНИВЕРСАЛЬНЫЙ ПОИСК ОБЪЕКТОВ
/////////////////////////////////////////////////////////////////////////////////

//// Процедура - обработчик события ПриИзменении элемента управления ЗначениеОтбораСпискаКонтрагентов.
////
//&НаКлиенте
//Процедура ЗначениеОтбораСпискаКонтрагентовПриИзменении(Элемент)
//	
//	ЗначениеОтбораПоискаданныхПриИзменении(Элемент, ЗначениеОтбораСпискаКонтрагентов);
//				
//КонецПроцедуры

//// Процедура - обработчик события АвтоПодборТекста элемента управления ЗначениеОтбораСпискаКонтрагентов.
////
//&НаКлиенте
//Процедура ЗначениеОтбораСпискаКонтрагентовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
//	
//	АвтоПодборТекстаПоиска(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
//			
//КонецПроцедуры
//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
//	
//	//мПоискОбъектовВСпискахДанных.СписокПриВыводеСтрокиСпискаОтбораДанных(Элемент, ОформлениеСтроки, ДанныеСтроки);
//			
//КонецПроцедуры


//&НаКлиенте
//Процедура ТипПоискаДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
//	
//	// обработка выбора элемента из списка
//	ОбработатьВыборТипаОграниченияИзСписка(ЭтаФорма, Элемент, ВыбранноеЗначение, 
//		СтандартнаяОбработка, ЗначениеОтбораСпискаКонтрагентов);
//	
//КонецПроцедуры

//&НаСервере
//Функция ТипПоискаДанныхОткрытие_Сервер(Элемент, СтандартнаяОбработка)
//	
//	мПоискОбъектовВСпискахДанных.НастройкаОтбораДанныхОткрытие(ЗначениеОтбораСпискаКонтрагентов, Элемент, СтандартнаяОбработка, ЭтаФорма);
//КонецФункции


//// кнопка открытия настройки
//&НаКлиенте
//Процедура ТипПоискаДанныхОткрытие(Элемент, СтандартнаяОбработка)
//	
//	ТипПоискаДанныхОткрытие_Сервер(// izhtc_translator(Передача на сервер недопустимого параметра с типом "полевыбора")
//Элемент, СтандартнаяОбработка);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ДействияФормыДействиеУчетныеЗаписиИнтернетПользователей(Команда)
//	ПолучитьФорму("РегистрСведений.УчетныеЗаписиИнтернетПользователей.ФормаСписка").Открыть();
//КонецПроцедуры

////функция создает сервисный объект для поиска Контрагенты
//&НаСервере
//Функция СоздатьОбъектПоискаДанныхДляКонтрагентов(Знач ЭлементФормыЗначениеОтбора, Знач ОбъектФормыСписок, Знач СписокДанных) Экспорт
//	
//	мПоискОбъектовВСпискахДанных = Обработки.ОК_ПоискОбъектовВСпискахДанных.Создать();

//	мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных = ЭлементФормыЗначениеОтбора;
//	мПоискОбъектовВСпискахДанных.ОбъектФормыСписок = ОбъектФормыСписок;
//	мПоискОбъектовВСпискахДанных.Список = СписокДанных;
//	мПоискОбъектовВСпискахДанных.ПрефиксПутиСохраненияНастроекПользователя = "Документы.бит_БК_РазнесениеОборотов.ФормаСписка";
//		
//	Возврат мПоискОбъектовВСпискахДанных;
//	
//КонецФункции

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	
//	мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(Элементы.ТипПоискаДанных.СписокВыбора);
//	мПоискОбъектовВСпискахДанных.ВосстановитьНастройки(Элементы.ТипПоискаДанных);
//	мПоискОбъектовВСпискахДанных.ВосстановитьСписокОтбораДанных();

//	ЭтаФорма.ТипПоискаДанных		= "РеквизитНаименованиеПолное";
//	ОбработатьВыборТипаОграниченияИзСписка(ЭтаФорма, Элементы.ТипПоискаДанных, "РеквизитНаименованиеПолное", 
//		Истина, "");
//КонецПроцедуры



//// Процедура - обработчик события АвтоПодборТекста элемента управления 
////
//&НаСервере

//// izhtc_translator(
//// Реализовать функционал через АвтоПодбор
//Процедура АвтоПодборТекстаПоиска(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
//	
//	СтандартнаяОбработка = Ложь;
//	// только быстые отборы автоматим дополняем
//	Если мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ПроизвестиБыстрыйОтборДанных" Тогда// izhtc_translator(Вызов с сервера клиентской функции)

//		
//		ВыполнитьБыстрыйОтборДанных(Текст, мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных, мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных);
//		
//	КонецЕсли;
//		
//КонецПроцедуры

//// процедура устанавливает быстрый отбор данных
//&НаКлиенте
//Процедура ВыполнитьБыстрыйОтборДанных(Знач ЗначениеОтбораДанных, Знач НаименованиеНастройки, Знач ИмяНастройкиОтбораДанных) Экспорт
//	
//	ПроизвестиОтборДанных(ЗначениеОтбораДанных, Истина, 1000, НаименованиеНастройки, ИмяНастройкиОтбораДанных, Истина);
//	
//КонецПроцедуры

//// процедура производит отбор по заданым ограничениям
//&НаКлиенте
//Процедура ПроизвестиОтборДанных(ЗначениеОтбора, Знач ПредлагатьСнятьИерархическийПросмотр = Ложь, 
//		Знач МаксимальноеКоличествоНайденныхОбъектов = 0, Знач ИмяОтбораДанных, Знач ИмяНастройкаОтбораДанных, 
//		Знач УстановитьБыструюНастройкуОтбора = Ложь, Знач ВыполнитьПоискПоВсемВидимымПолям = Ложь,
//		Знач ВыполнитьПоискПоПоследнейНастройке = Ложь) Экспорт
////izhtc_translator Предупреждение
//// серверный код не перенесен в отдельные функции, т.к. найдено 8 переход(а|ов) на сервер

//			
//	ОчиститьОтборыПоискаПоПолям(мПоискОбъектовВСпискахДанных.Список, мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам, мПоискОбъектовВСпискахДанных.СписокВидимыхДляПоискаПолей);
//	
//	ЕстьОтборПоСтрокеПоиска = ЗначениеЗаполнено(ЗначениеОтбора);
//		
//	// в зависимости от вида отбора выполняем действия
//	Если УстановитьБыструюНастройкуОтбора Тогда
//			
//		Если НЕ ЕстьОтборПоСтрокеПоиска Тогда
//			Возврат;		
//		КонецЕсли;
//		
//		УстановитьБыстрыйОтборДанных(мПоискОбъектовВСпискахДанных.Список, ЗначениеОтбора, ИмяОтбораДанных);
//		
//		// добавляем строку поиска
//		ДобавитьВСписокЗначенийУнивер(мПоискОбъектовВСпискахДанных.СписокЗначенийОтбораДанных, мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения + ИмяНастройкаОтбораДанных, мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных, ЗначениеОтбора);;
//			
//	Иначе
//			
//		Если (МаксимальноеКоличествоНайденныхОбъектов = -1) Тогда
//			Возврат;
//		КонецЕсли;
//							
//		// отбор по всем видимым полям
//		ОбработкаУниверсальногоПоиска = Обработки.УниверсальныйПоискОбъектов.Создать();
//			
//		Если ВыполнитьПоискПоВсемВидимымПолям Тогда
//				
//			Если НЕ ЕстьОтборПоСтрокеПоиска Тогда
//				Возврат;		
//			КонецЕсли;
//				
//			// поиск по всем видимым полям
//			СписокВидимыхДляПоискаПолей = ОбработкаУниверсальногоПоиска.СформироватьСписокПолейПоиска(мПоискОбъектовВСпискахДанных.ОбъектФормыСписок, мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска);
//				
//			СписокНайденныхОбъектов = ОбработкаУниверсальногоПоиска.ВыполнитьПрограммныйПоискОбъектовПоСпискуПолей(мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска, 
//				СписокВидимыхДляПоискаПолей, ЗначениеОтбора, МаксимальноеКоличествоНайденныхОбъектов, мПоискОбъектовВСпискахДанных.Список.Отбор, мПоискОбъектовВСпискахДанных.ПоказыватьФормуХодаВыполненияПоискаДанных);
//				
//			// добавляем строку поиска
//			ДобавитьВСписокЗначенийУнивер(мПоискОбъектовВСпискахДанных.СписокЗначенийОтбораДанных, мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения + ИмяНастройкаОтбораДанных, мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных, ЗначениеОтбора);;	
//			
//		Иначе
//			
//			// последняя настройка для поиска данных
//			ПоследняяНастройкаПоиска = Неопределено;
//			
//			Если ВыполнитьПоискПоПоследнейНастройке Тогда
//				
//				ПоследняяНастройкаПоиска = мПоискОбъектовВСпискахДанных.ПоследняяНастройкаПоискаДанных;
//				
//			Иначе
//				
//				// нужно получить настройку поиска по имени
//				СтруктураНастройки = ПолучитьПараметрыНастройкиПоискаПоИмени(мПоискОбъектовВСпискахДанных.СоответсвиеИмяКнопокИОтборов, мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска, ИмяОтбораДанных,
//						мПоискОбъектовВСпискахДанных.ПользовательНастройкиОбмена, мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных);
//						
//				Если СтруктураНастройки <> Неопределено Тогда
//							
//					ПоследняяНастройкаПоиска = СтруктураНастройки.СохраненнаяНастройка;
//					
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//			// если пустая настройка поиска, то тоже ничего не делаем
//			Если ПоследняяНастройкаПоиска <> Неопределено Тогда
//						
//				Если НЕ ВыполнитьПоискПоПоследнейНастройке Тогда
//					
//					ПользовательНастройкиОбмена = СтруктураНастройки.Пользователь;
//					
//				КонецЕсли;
//						
//			КонецЕсли;
//			
//			// надо проверить можно ли выполнять отбор если не заполнена строка поиска
//			Если НЕ ЕстьОтборПоСтрокеПоиска Тогда
//				
//				// смотрим нужно ли производить отбор или нет
//				МожноВыполнитьПоиск = ОбработкаУниверсальногоПоиска.ОпределитьВозможностьПроведенияПоискаДанных(мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска, ПоследняяНастройкаПоиска, ЗначениеОтбора);
//				
//				Если МожноВыполнитьПоиск <> Истина Тогда
//					Возврат;
//				КонецЕсли;
//				
//			КонецЕсли;
//				
//			СписокНайденныхОбъектов = ОбработкаУниверсальногоПоиска.ВыполнитьПрограммныйПоискОбъектовПоНастройкеПоиска(мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска, 
//				ПоследняяНастройкаПоиска, ЗначениеОтбора, МаксимальноеКоличествоНайденныхОбъектов, мПоискОбъектовВСпискахДанных.Список.Отбор, мПоискОбъектовВСпискахДанных.ПоказыватьФормуХодаВыполненияПоискаДанных);
//				
//			// добавляем строку поиска
//			ДобавитьВСписокЗначенийУнивер(мПоискОбъектовВСпискахДанных.СписокЗначенийОтбораДанных, мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения + ИмяНастройкаОтбораДанных, мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных, ЗначениеОтбора);;	
//				
//		КонецЕсли;
//		
//		Если СписокНайденныхОбъектов = Неопределено Тогда
//			Возврат;
//		КонецЕсли;
//				
//		Состояние("Установка ограничения на список");
//		
//		мПоискОбъектовВСпискахДанных.Список.Отбор.Ссылка.Использование = Истина;
//		мПоискОбъектовВСпискахДанных.Список.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
//		мПоискОбъектовВСпискахДанных.Список.Отбор.Ссылка.Значение = СписокНайденныхОбъектов;
//				
//		Состояние("");
//		
//		мПоискОбъектовВСпискахДанных.ОбъектФормыСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
//					   	    		
//	КонецЕсли;
//		
//	мПоискОбъектовВСпискахДанных.Список.Обновить();
//	
//КонецПроцедуры

//// процедура снимает все отборы посика по полям
//&НаСервере
//Процедура ОчиститьОтборыПоискаПоПолям(Список, СписокБыстрыхОтборовПоРеквизитам, СписокПолейПоиска) Экспорт
//	
//	СнятьБыстрыеОтборыДанных(Список, СписокБыстрыхОтборовПоРеквизитам);
//	СписокПолейПоиска = Неопределено;
//	Список.Обновить();
//	
//КонецПроцедуры

//// Процедура устанавливает отборы у списка номенклатуры, которые были установлены из ЭУ "быстрых" отборов на форме.
//// 
//&НаСервере
//Процедура УстановитьБыстрыйОтборДанных(ОбъектДанных, Знач ЗначениеОтбора = "", Знач ИмяОтбораДанных = Неопределено) Экспорт

//	Если НЕ ЗначениеЗаполнено(ИмяОтбораДанных) тогда
//		Возврат;
//	КонецЕсли;
//	
//	Попытка
//		//ОбъектДанных.Отбор[ИмяОтбораДанных].Использование = ЗначениеЗаполнено(ЗначениеОтбора);
//		ОбъектДанных.Отбор.Контрагент.Использование = ЗначениеЗаполнено(ЗначениеОтбора);
//	Исключение
//		// может быть передано поле которого нет в отборах
//		Возврат;
//	КонецПопытки;
//	
//	//Если ОбъектДанных.Отбор[ИмяОтбораДанных].Использование Тогда
//	//	
//	//	ОбъектДанных.Отбор[ИмяОтбораДанных].ВидСравнения  = ВидСравнения.Содержит;
//	//	ОбъектДанных.Отбор[ИмяОтбораДанных].Значение = ЗначениеОтбора;
//	//	
//	//КонецЕсли;

//	Если ОбъектДанных.Отбор.Контрагент.Использование Тогда
//		
//		ОбъектДанных.Отбор.Контрагент.ВидСравнения  = ВидСравнения.ВСписке;
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = "
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	бит_БК_РазнесениеОборотов.Контрагент
//		|ИЗ
//		|	Документ.бит_БК_РазнесениеОборотов КАК бит_БК_РазнесениеОборотов
//		|ГДЕ
//		|	бит_БК_РазнесениеОборотов.Контрагент." + ИмяОтбораДанных + " ПОДОБНО ""%"" + &ЗначениеОтбора + ""%""
//		|СГРУППИРОВАТЬ ПО
//		|	бит_БК_РазнесениеОборотов.Контрагент";
//		
//		Запрос.УстановитьПараметр("ЗначениеОтбора", ЗначениеОтбора);
//		
//		ТЗРезультат = Запрос.Выполнить().Выгрузить();
//		
//		ОбъектДанных.Отбор.Контрагент.Значение.Очистить();
//		ОбъектДанных.Отбор.Контрагент.Значение.ЗагрузитьЗначения(ТЗРезультат.ВыгрузитьКолонку("Контрагент"));
//		
//	КонецЕсли;
//КонецПроцедуры

//// Процедура добавляет в список последних 10-ти значений элементов
//// Параметры :
////		СписокСохраняемыхЗначений - список значений куда нужно поместить очередной элемент
////      ИмяПараметраДляСохранения - под каким именем сохранить значение (если пустая - то ничего не сохраняем)
////      ЭлементСписка			  - выбранный элемент списка
//&НаСервере
//Процедура ДобавитьВСписокЗначенийУнивер(СписокСохраняемыхЗначений, ИмяПараметраДляСохранения = "", ЭлементСписка, 
//	Знач ЗначениеПоиска = "") Экспорт

//	Если ПустаяСтрока(ЗначениеПоиска) Тогда
//		ДобавляемоеЗначение = ЭлементСписка.Значение;
//	Иначе
//		ДобавляемоеЗначение = ЗначениеПоиска;
//    КонецЕсли;
//	
//	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ДобавляемоеЗначение);
//	Если НайденныйЭлемент <> Неопределено Тогда
//		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
//	КонецЕсли;
//	
//	СписокСохраняемыхЗначений.Вставить(0, ДобавляемоеЗначение);
//	
//	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
//		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
//	КонецЦикла;
//	
//	Если (ЗначениеЗаполнено(ИмяПараметраДляСохранения)) И ТипЗнч(ИмяПараметраДляСохранения) = Тип("Строка") Тогда
//		ХранилищеСистемныхНастроек.Сохранить(ИмяПараметраДляСохранения,, СписокСохраняемыхЗначений.Скопировать());
//	КонецЕсли;
//	
//	ЭлементСписка.СписокВыбора.Очистить();
//	Для Каждого тек_Значение_уник Из РеквизитФормыВЗначение("СписокСохраняемыхЗначений").Скопировать() Цикл
//	
//	ЭлементСписка.СписокВыбора.Добавить(тек_Значение_уник.Значение, тек_Значение_уник.Представление);
//	КонецЦикла;

//КонецПроцедуры

////функция возвращает настройку поиска по имени
//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Функция ПолучитьПараметрыНастройкиПоискаПоИмени(Знач СоответсвиеИмяКнопокИОтборов, Знач ТипОбъектовПоиска, Знач ИмяНастройки,
//	Знач ПользовательНастройкиОбмена, Знач НастройкаОтбораДанных) Экспорт
//	
//	ИмяОбъектаНастройки = ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска);
//				
//	Если ПустаяСтрока(ИмяОбъектаНастройки) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	// нужно получить настройку поиска по имени
//	ЗначениеСоответсвия = СоответсвиеИмяКнопокИОтборов.Получить(ИмяНастройки);
//	
//	СтруктураНастройки = Новый Структура;
//	СтруктураНастройки.Вставить("ИмяОбъекта", ИмяОбъектаНастройки);

//	
//	Если ЗначениеСоответсвия = Неопределено тогда
//		
//		// в соответствии не нашли нужных параметров
//		СтруктураНастройки.Вставить("Пользователь", ПользовательНастройкиОбмена);
//		СтруктураНастройки.Вставить("НаименованиеНастройки", НастройкаОтбораДанных);
//	Иначе	
//				
//		СтруктураНастройки.Вставить("Пользователь", ЗначениеСоответсвия.Пользователь);
//		СтруктураНастройки.Вставить("НаименованиеНастройки", ЗначениеСоответсвия.ИмяНастройки);
//	
//	КонецЕсли;
//            			
//	НастройкаНайдена = ПолучитьНастройку(СтруктураНастройки);
//					
//	Если НЕ НастройкаНайдена Тогда
//		
//		СтруктураНастройки = Неопределено;
//		
//	КонецЕсли;
//	
//	Возврат СтруктураНастройки;
//	
//КонецФункции

//// Процедура снимает отборы у списка номенклатуры, которые были установлены из ЭУ "быстрых" отборов на форме.
//// 
//&НаСервере
//Процедура СнятьБыстрыеОтборыДанных(ОбъектДанных, СписокОтборов) Экспорт

//	Если ТипЗнч(СписокОтборов) = Тип("СписокЗначений") тогда
//		
//		Для Каждого ЭлементСписка Из СписокОтборов Цикл
//			
//			Попытка
//				//ОбъектДанных.Отбор[ЭлементСписка.Значение].Использование = Ложь;
//				ОбъектДанных.Отбор.Контрагент.Использование = Ложь;
//			Исключение
//			КонецПопытки;
//			
//		КонецЦикла;
//		
//		// принудительно убираем ограничение по ссылке
//		ОбъектДанных.Отбор["Ссылка"].Использование = Ложь;
//	
//	Иначе
//		
//		Попытка
//			ОбъектДанных.Отбор[СписокОтборов].Использование = Ложь;
//			ОбъектДанных.Отбор.Контрагент.Использование = Ложь;
//		Исключение
//		КонецПопытки;
//		
//	КонецЕсли;

//КонецПроцедуры

////Функция возвращает наименование объекта настройки
//&НаСервере
//Функция ПолучитьИмяОбъектаНастройки(ТипОбъектовПоиска) Экспорт
//	
//	Если ТипОбъектовПоиска = Неопределено Тогда
//		Возврат "";
//	КонецЕсли;
//		
//	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипОбъектовПоиска);	
//	
//	Возврат "ОбработкаОбъект.УниверсальныйПоискОбъектов.СправочникСсылка." + МетаданныеСправочника.Имя;
//	
//КонецФункции

//&НаСервере
//Функция ПолучитьНастройку(СтруктураНастройки) Экспорт
//	
//	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
//		
//		Возврат Ложь;
//		
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	СохраненныеНастройки.Пользователь,
//	|	СохраненныеНастройки.ИмяОбъекта,
//	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
//	|	СохраненныеНастройки.СохраненнаяНастройка,
//	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
//	|	СохраненныеНастройки.СохранятьАвтоматически
//	|ИЗ
//	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
//	|ГДЕ
//	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
//	|	И СохраненныеНастройки.Пользователь = &Пользователь
//	|	И СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки");
//	
//	Если СтруктураНастройки.Свойство("Пользователь") Тогда
//					
//		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
//					
//	Иначе
//					
//		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
//					
//	КонецЕсли;
//		
//	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
//	Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//		
//	Если РезультатЗапроса.Пустой() Тогда
//			
//		Возврат Ложь;
//			
//	Иначе
//			
//		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
//		ВыборкаИзРезультатаЗапроса.Следующий();
//		
//		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
//		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", ВыборкаИзРезультатаЗапроса.ИспользоватьПриОткрытии);
//		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
//		
//	КонецЕсли;
//	
//	Возврат Истина;
//	
//КонецФункции // ПолучитьНастройку()

//// Процедура - обработчик события ПриИзменении элемента управления.
////
//&НаКлиенте
//Процедура ЗначениеОтбораПоискаданныхПриИзменении(Элемент, Знач ЗначениеПоискаДанных) Экспорт
////izhtc_translator Предупреждение
//// серверный код не перенесен в отдельные функции, т.к. найдено 4 переход(а|ов) на сервер

//	
//	// не производим повторный поиск если до этого был произведен поиск по части текста с таким же типом выбора
//	Если мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ПроизвестиОтборПоНастройке" Тогда
//		
//		ВыполнитьОтборПоНастройке(ЗначениеПоискаДанных, мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных, мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных);
//		
//	ИначеЕсли мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ПроизвестиБыстрыйОтборДанных" Тогда
//		
//		ВыполнитьБыстрыйОтборДанных(ЗначениеПоискаДанных, мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных, мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных);
//		
//	ИначеЕсли мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ПроизвестиПоискПоВсемВидимымПолям" Тогда	
//		
//		ВыполнитьПоискПоВсемВидимымПолям(ЗначениеПоискаДанных, мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных, мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных);
//		
//	ИначеЕсли мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ВыполнитьОтборПоПоследнейНастройкеПоиска" Тогда
//		
//		ВыполнитьОтборПоПоследнейНастройке(ЗначениеПоискаДанных, мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных, мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных);
//				
//	КонецЕсли;
//		
//КонецПроцедуры

//// процедура выполняет отбор по настройке поиска
//&НаКлиенте
//Процедура ВыполнитьОтборПоНастройке(ЗначениеОтбораДанных, Знач НаименованиеНастройки, Знач ИмяНастройкиОтбораДанных) Экспорт
//	
//	ПроизвестиОтборДанных(ЗначениеОтбораДанных, Истина, 1000, НаименованиеНастройки, ИмяНастройкиОтбораДанных);
//    	
//КонецПроцедуры

//// процедура выполняет отбор по настройке поиска
//&НаКлиенте
//Процедура ВыполнитьОтборПоПоследнейНастройке(ЗначениеОтбораДанных, Знач НаименованиеНастройки, Знач ИмяНастройкиОтбораДанных) Экспорт
//	
//	ПроизвестиОтборДанных(ЗначениеОтбораДанных, Истина, 1000, НаименованиеНастройки, ИмяНастройкиОтбораДанных, Ложь, Ложь, Истина);
//    	
//КонецПроцедуры

//// процедура производит поиск по всем видимым полям
//&НаКлиенте
//Процедура ВыполнитьПоискПоВсемВидимымПолям(ЗначениеОтбораДанных, Знач НаименованиеНастройки, Знач ИмяНастройкиОтбораДанных) Экспорт
//	
//	ПроизвестиОтборДанных(ЗначениеОтбораДанных, Истина, 1000, НаименованиеНастройки, ИмяНастройкиОтбораДанных, Ложь, Истина);
//    	
//КонецПроцедуры

//// обработка выбора типа ограничения из списка
//&НаКлиенте
//Процедура ОбработатьВыборТипаОграниченияИзСписка(ФормаВладелец, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЗначениеПоиска) Экспорт
//	
//	Если ВыбранноеЗначение = Неопределено
//		ИЛИ ВыбранноеЗначение = "" Тогда
//		
//		Возврат;
//		
//	КонецЕсли;
//	
//	ПредставлениеНастройкиОтбора = "";
//	СтрокаВыбора = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
//	Если СтрокаВыбора <> Неопределено Тогда
//		ПредставлениеНастройкиОтбора = СтрокаВыбора.Представление;
//	КонецЕсли;
//	
//	// надо определить, что это за тип поиска и вызвать соответствующую процедуру
//	ПриведенноеЗначениеЭлементаПоиска = "";
//	ТипПоиска = ОпределитьТипПоискаДанных(ВыбранноеЗначение, ПриведенноеЗначениеЭлементаПоиска);
//	
//	Если ТипПоиска = 1 Тогда
//		
//		ВыполнитьБыстрыйОтборДанныхДляСпискаВыбора(ЗначениеПоиска, ПриведенноеЗначениеЭлементаПоиска, ПредставлениеНастройкиОтбора);	
//		
//	ИначеЕсли ТипПоиска = 2 Тогда
//		
//		ВыполнитьПоискПоВсемВидимымПолямДляСпискаВыбора(ЗначениеПоиска, ПриведенноеЗначениеЭлементаПоиска, ПредставлениеНастройкиОтбора);	
//		
//	ИначеЕсли ТипПоиска = 3 Тогда
//		
//		ВыполнитьОтборПоНастройкеДляСпискаВыбора(ЗначениеПоиска, ПриведенноеЗначениеЭлементаПоиска, ПредставлениеНастройкиОтбора);	
//		
//	ИначеЕсли ТипПоиска = 4 Тогда
//		
//		ВыполнитьОтборПоПоследнейНастройкеПоискаДляСпискаВыбора(ЗначениеПоиска, ФормаВладелец);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

////Функция определяет тип поиска и возвращает значение списка поиска
//// izhtc_translator(Функция доступна на клиенте и на сервере. Для оптимизации проверить используемость функции в других функциях и установить соответствующую директиву)
//&НаСервере
//Функция ОпределитьТипПоискаДанных(Знач ЗначениеЭлементаПоиска, ПриведенноеЗначениеЭлементаПоиска = "")
//	
//	ТипПоиска = 0;
//	
//	Если ЗначениеЭлементаПоиска = "ОтборВсеВидимыеПоля" Тогда
//		
//		ТипПоиска = 2;
//		ПриведенноеЗначениеЭлементаПоиска = ЗначениеЭлементаПоиска;
//		
//	ИначеЕсли ЗначениеЭлементаПоиска = "ПоследняяНастройкаОтбораДанных" Тогда
//		
//		ТипПоиска = 4;
//		ПриведенноеЗначениеЭлементаПоиска = ЗначениеЭлементаПоиска;
//		
//	Иначе
//		
//		ПозицияРеквизита = Найти(ЗначениеЭлементаПоиска, "Реквизит");
//		
//		Если ПозицияРеквизита = 1 Тогда
//			
//			// поиск по реквизиту
//			ТипПоиска = 1;
//			ПриведенноеЗначениеЭлементаПоиска = Сред(ЗначениеЭлементаПоиска, СтрДлина("Реквизит") + 1);
//			
//		Иначе
//			// поиск по произвольной настройке поиска
//			ТипПоиска = 3;
//			ПриведенноеЗначениеЭлементаПоиска = ЗначениеЭлементаПоиска;
//			
//		КонецЕсли;
//		
//	КонецЕсли;		
//	
//	Возврат ТипПоиска;
//	
//КонецФункции

//&НаСервере
//Функция ВыполнитьБыстрыйОтборДанныхДляСпискаВыбора_Сервер(мПоискОбъектовВСпискахДанных, ПредставлениеНастройкиОтбора)
//	
//	// списки восстанивливаем
//	ВосстановитьСписокЗначенийУнивер(мПоискОбъектовВСпискахДанных.СписокЗначенийОтбораДанных, мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения + ПредставлениеНастройкиОтбора, мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных.СписокВыбора);
//КонецФункции


//// процедура устанавливает быстрый отбор данных
//&НаКлиенте
//Процедура ВыполнитьБыстрыйОтборДанныхДляСпискаВыбора(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора) Экспорт
//	Перем мПоискОбъектовВСпискахДанных;
//	
//	// списки восстанивливаем
//	ВыполнитьБыстрыйОтборДанныхДляСпискаВыбора_Сервер(// izhtc_translator(Передача на сервер недопустимого параметра с типом "обработкаобъект")
//мПоискОбъектовВСпискахДанных, ПредставлениеНастройкиОтбора);	
//	
//	ВыполнитьБыстрыйОтборДанных(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора);
//	
//	мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных = ПредставлениеНастройкиОтбора;
//	мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных = ИмяОтбораДанных; 
//	мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ПроизвестиБыстрыйОтборДанных";
//		
//КонецПроцедуры

//&НаСервере
//Функция ВыполнитьПоискПоВсемВидимымПолямДляСпискаВыбора_Сервер(мПоискОбъектовВСпискахДанных, ПредставлениеНастройкиОтбора)
//	
//	// списки восстанивливаем
//	ВосстановитьСписокЗначенийУнивер(мПоискОбъектовВСпискахДанных.СписокЗначенийОтбораДанных, мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения + ПредставлениеНастройкиОтбора, мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных.СписокВыбора);
//КонецФункции


//// процедура устанавливает быстрый отбор данных
//&НаКлиенте
//Процедура ВыполнитьПоискПоВсемВидимымПолямДляСпискаВыбора(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора) Экспорт
//	Перем мПоискОбъектовВСпискахДанных;
//	
//	// списки восстанивливаем
//	ВыполнитьПоискПоВсемВидимымПолямДляСпискаВыбора_Сервер(// izhtc_translator(Передача на сервер недопустимого параметра с типом "обработкаобъект")
//мПоискОбъектовВСпискахДанных, ПредставлениеНастройкиОтбора);	
//	
//	ВыполнитьПоискПоВсемВидимымПолям(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора);
//	
//	мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных = ПредставлениеНастройкиОтбора;
//	мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных = ИмяОтбораДанных; 
//	мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ПроизвестиПоискПоВсемВидимымПолям";
//		
//КонецПроцедуры

//&НаСервере
//Функция ВыполнитьОтборПоНастройкеДляСпискаВыбора_Сервер(мПоискОбъектовВСпискахДанных, ПредставлениеНастройкиОтбора)
//	
//	// списки восстанивливаем
//	ВосстановитьСписокЗначенийУнивер(мПоискОбъектовВСпискахДанных.СписокЗначенийОтбораДанных, мПоискОбъектовВСпискахДанных.ПрефиксНазванияСпискаДляСохранения + ПредставлениеНастройкиОтбора, мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных.СписокВыбора);
//КонецФункции


//// процедура устанавливает быстрый отбор данных
//&НаКлиенте
//Процедура ВыполнитьОтборПоНастройкеДляСпискаВыбора(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора) Экспорт
//	Перем мПоискОбъектовВСпискахДанных;
//	
//	// списки восстанивливаем
//	ВыполнитьОтборПоНастройкеДляСпискаВыбора_Сервер(// izhtc_translator(Передача на сервер недопустимого параметра с типом "обработкаобъект")
//мПоискОбъектовВСпискахДанных, ПредставлениеНастройкиОтбора);	
//	
//	ВыполнитьОтборПоНастройке(ЗначениеОтбораДанных, ИмяОтбораДанных, ПредставлениеНастройкиОтбора);	
//	
//	мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных = ПредставлениеНастройкиОтбора;
//	мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных = ИмяОтбораДанных; 
//	мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ПроизвестиОтборПоНастройке";	
//		
//КонецПроцедуры

//&НаСервере
//Функция ВыполнитьОтборПоПоследнейНастройкеПоискаДляСпискаВыбора_Сервер(РезультатПоиска, РезультирующаяНастройкаПоиска, мПоискОбъектовВСпискахДанных, ЗначениеОтбораДанных)
//		
//	Если РезультатПоиска Тогда
//			
//		СписокВидимыхДляПоискаПолей = Неопределено;
//		ПоследняяНастройкаПоискаДанных = РезультирующаяНастройкаПоиска;
//		мПоискОбъектовВСпискахДанных.ОбъектФормыЗначениеОтбораСпискаДанных.Значение = ЗначениеОтбораДанных;
//		
//		мПоискОбъектовВСпискахДанных.НастройкаОтбораДанных = "Отбор пользователя";
//		мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоОтбораДанных = "ПоследняяНастройкаОтбораДанных"; 
//		мПоискОбъектовВСпискахДанных.НаименованиеПоследнегоДействияПоиска = "ВыполнитьОтборПоПоследнейНастройкеПоиска";
//		
//	КонецЕсли;
//КонецФункции


//&НаКлиенте
//Процедура ВыполнитьОтборПоПоследнейНастройкеПоискаДляСпискаВыбора(Знач ЗначениеОтбораДанных, Знач ФормаВладелец = Неопределено) Экспорт
//	
//	РезультирующаяНастройкаПоиска = Неопределено;
//		
//	РезультатПоиска = ВыполнитьИнтерактивныйПоискОбъектовВСписке(мПоискОбъектовВСпискахДанных.ТипОбъектовПоиска, 
//		мПоискОбъектовВСпискахДанных.Список, мПоискОбъектовВСпискахДанных.ОбъектФормыСписок, мПоискОбъектовВСпискахДанных.СписокБыстрыхОтборовПоРеквизитам, мПоискОбъектовВСпискахДанных.ПоследняяНастройкаПоискаДанных, РезультирующаяНастройкаПоиска,
//		ЗначениеОтбораДанных, ФормаВладелец);
//		
//	ВыполнитьОтборПоПоследнейНастройкеПоискаДляСпискаВыбора_Сервер(РезультатПоиска, РезультирующаяНастройкаПоиска, // izhtc_translator(Передача на сервер недопустимого параметра с типом "обработкаобъект")
//мПоискОбъектовВСпискахДанных, ЗначениеОтбораДанных);
//	
//КонецПроцедуры

//// Процедура восстанавливает список 10 последних выпавших значений элемента
//&НаСервере
//Процедура ВосстановитьСписокЗначенийУнивер(СписокЗначений, ИмяПараметраДляСохранения = "", СписокЭлементаВизуализации) Экспорт

//	Если НЕ ЗначениеЗаполнено(ИмяПараметраДляСохранения) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СписокЗначений.Очистить();
//	
//	ВосстановленноеЗначение = ХранилищеСистемныхНастроек.Загрузить(ИмяПараметраДляСохранения);
//	Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
//		СписокЗначений = ВосстановленноеЗначение;
//		СписокЭлементаВизуализации =РеквизитФормыВЗначение("СписокЗначений").Скопировать();
//	КонецЕсли; 
//	
//КонецПроцедуры

//&НаКлиенте
//Функция ВыполнитьИнтерактивныйПоискОбъектовВСписке(ТипОбъектовПоиска, СписокПоиска, ТабличноеПолеПоиска,
//	Знач НеИспользуемыеПараметрыОтбора = Неопределено, Знач НастройкаПоиска = Неопределено, 
//	РезультирующееДеревоПоиска = Неопределено, СтрокаПоискаДанных = "",
//	Знач ФормаВладелец = Неопределено) Экспорт
////izhtc_translator Предупреждение
//// серверный код не перенесен в отдельные функции, т.к. найдено 3 переход(а|ов) на сервер

//	
//	Если СписокПоиска = Неопределено 
//		ИЛИ ТабличноеПолеПоиска = Неопределено Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	// отборов в списке может и не быть
//	ДанныеНеИспользуемыеПараметрыОтбора = Неопределено;
//	Если НеИспользуемыеПараметрыОтбора <> Неопределено Тогда
//		ДанныеНеИспользуемыеПараметрыОтбора =РеквизитФормыВЗначение("НеИспользуемыеПараметрыОтбора").Скопировать();		
//	КонецЕсли;
//	
//	ДополнительныйОтбор = СписокПоиска.Отбор;
//		
//	ОбработкаУниверсальногоПоиска = Обработки.УниверсальныйПоискОбъектов.Создать();
//	ОбработкаУниверсальногоПоиска.НастройкаПоискаДанных = НастройкаПоиска;
//	
//	СписокНайденныхОбъектов = ОбработкаУниверсальногоПоиска.ВыполнитьИнтерактивныйПоискОбъектов(ТипОбъектовПоиска, Ложь, ДополнительныйОтбор,
//		ДанныеНеИспользуемыеПараметрыОтбора, РезультирующееДеревоПоиска, СтрокаПоискаДанных, ФормаВладелец);
//	
//	Если СписокНайденныхОбъектов = Неопределено Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	// нужно для всех неиспользуемых отборов убрать признак использования
//	Если ДанныеНеИспользуемыеПараметрыОтбора <> Неопределено Тогда
//		
//		Для Каждого СтрокаДанныхОтбора Из ДанныеНеИспользуемыеПараметрыОтбора Цикл 
//			
//			Попытка
//				//СписокПоиска.Отбор[СтрокаДанныхОтбора.Значение].Использование = Ложь;
//				СписокПоиска.Отбор.Контрагент.Использование = Ложь;
//			Исключение
//				
//			КонецПопытки;
//			
//		КонецЦикла;
//			
//	КонецЕсли;
//		
//	СписокПоиска.Отбор.Ссылка.Использование = Истина;
//	СписокПоиска.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
//	СписокПоиска.Отбор.Ссылка.Значение = СписокНайденныхОбъектов;
//	
//	ТабличноеПолеПоиска.НастройкаОтбора.Ссылка.Доступность = Истина;
//	
//	Если ТабличноеПолеПоиска.ИерархическийПросмотр Тогда
//		ОтветНаВопрос = Вопрос("Для удобства поиска рекомендуется снять режим иерархического просмотра. Снять?", РежимДиалогаВопрос.ДаНет);
//		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
//			ТабличноеПолеПоиска.ИерархическийПросмотр = Ложь;
//		КонецЕсли; 
//	КонецЕсли;
//	
//	Возврат Истина;
//	
//КонецФункции

//&НаКлиенте
//Процедура ДействияФормыДвиженияДокументаПоРегистрам(Команда)
//	Если Элементы.Список.ТекущиеДанные = Неопределено тогда
//		Возврат
//	КонецЕсли;

//	бит_РаботаСДиалогами.НапечататьДвиженияДокумента(Элементы.ДокументСписок.ТекущиеДанные.Ссылка);
//КонецПроцедуры
//// izhtc_translator(
//// Данного события нет в управляемой форме. Необходимо провести анализ и выполнить перевнедрение функционала. Возможные варианты:
//// 1. Доработка условного оформления формы
//// 2. Добавление новой колонки и её заполнение
//// 3. Настройка запроса динамического списка)

////Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
////// izhtc_translator Предупреждение
////Процедура не используется
//	//Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
//		//Возврат;
//	//КонецЕсли;

//	//бит_РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

////КонецПроцедуры
//&НаКлиенте
//Процедура ДокументСписокПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки)

//	
//	//Запрос = Новый Запрос;
//	//Запрос.Текст = 
////"ВЫБРАТЬ РАЗРЕШЕННЫЕ
////	               |	бит_БК_ИсторияСобытийОбъектовСрезПоследних.Пользователь
////	               |ИЗ
////	               |	РегистрСведений.бит_БК_ИсторияСобытийОбъектов.СрезПоследних(
////	               |			,
////	               |			Объект = &Объект
////	               |				И Событие = ЗНАЧЕНИЕ(Перечисление.бит_БК_СобытияОбъекта.Создание)) КАК бит_БК_ИсторияСобытийОбъектовСрезПоследних"//;
//	
//	//Запрос.УстановитьПараметр("Объект", ДанныеСтроки.ДанныеСтроки.Ссылка);
//	//Выборка = Запрос.Выполнить().Выбрать();
//	
//	//Если Выборка.Следующий() Тогда 
//	    //bit avseenkov++
//		//Если ДанныеСтроки.ДанныеСтроки.Ссылка.бит_ЗагруженИзАксапты Тогда
//			//ДанныеСтроки.Ячейки.Автор.Значение = ДанныеСтроки.ДанныеСтроки.Ссылка.бит_Автор;
//		//Иначе 
//		//}--	
//			//ДанныеСтроки.Ячейки.Автор.Значение = Выборка.Пользователь;
//		//КонецЕсли;
//		
//	
//	//КонецЕсли;;
//	

//КонецПроцедуры

//&НаСервере
//Функция Инициализация_Сервер()
////ОК Ванюков К. -

//мПоискОбъектовВСпискахДанных = СоздатьОбъектПоискаДанныхДляКонтрагентов(Элементы.ЗначениеОтбораСпискаКонтрагентов, 
//	Элементы.Список, Список);
//КонецФункции

////ОК Ванюков К. -

//Инициализация_Сервер();
