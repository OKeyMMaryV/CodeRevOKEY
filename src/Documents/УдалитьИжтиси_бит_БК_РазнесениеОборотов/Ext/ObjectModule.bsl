////структура задается перед записью объекта
//Перем ПараметрыЗаписи Экспорт;

//Перем мВалютаРегламентированногоУчета Экспорт;

//Процедура ПриКопировании(ОбъектКопирования)
//	ЭтотОбъект.НомерЗаявки = Документы.бит_ФормаВводаБюджета.ПустаяСсылка();
//	СуммаСчета = 0;
//	НомерСчета = "";
//	ДатаСчета = Дата(0001,01,01);
//	ДатаПередачиСчетаВКазначейство = Дата(0001,01,01);
//	//ОК Калинин М. 140912 ID при копировании должен очищаться и формироваться как в новом документе.
//		ID_Разнесения="";
//		ID_РазнесенияЧ="";	
//	//ОК Калинин М.
//	//bit auavseenkov++ 29.03.2015 Загрузка из AX
//	бит_Автор = Справочники.Пользователи.ПустаяСсылка();
//	бит_ЗагруженИзАксапты = Ложь;
//	Инициатор = Справочники.бит_БК_Инициаторы.ПустаяСсылка();
//	//--
//КонецПроцедуры

//Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
//	
//	//При проведении суммы КонтрольБюджета  и УправленческаАналитика должны совпадать
//	Если РежимЗаписи = РежимЗаписиДокумента.Проведение тогда
//		Если НЕ КонтрольБюджета.Итог("СуммаБезНДС") = УправленческаяАналитика.Итог("СуммаБезНДС") Тогда 
//			//rarus + 
//			//Предупреждение("Не совпадают суммы по ТЧ <КонтрольБюджета> и <УправленческаяАналитика>",5); 
//			Сообщить("Не совпадают суммы по ТЧ <КонтрольБюджета> и <УправленческаяАналитика>"); 
//			//rarus -
//		КонецЕсли;
//	КонецЕсли;
//	//Пересчитываем СуммуСНДС в строках если ставка НДС = 18/118
//	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
//		ПересчитатьСтрокиДляСтавки18_118();
//	иначе
//		УстановитьЗначенияНДСВСтроках();
//	КонецЕсли;
//	
//	//Проверка на соответствие сценариев в ТЧ Виду операции
//	Для Каждого ТекСтрока ИЗ КонтрольБюджета Цикл
//		Текст = "В строке № "+ ТекСтрока.НомерСтроки+", закладка <Контроль бюджета>: Тип расходов не применим с видом операции "+ВидОперации;
//		Сообщать = Ложь;
//		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный тогда
//			Если НЕ (ТекСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_А ИЛИ
//				ТекСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_У) Тогда 
//				Сообщать = Истина;
//			КонецЕсли;
//		ИначеЕсли ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный тогда
//			Если НЕ (ТекСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_А ИЛИ
//				ТекСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_Инвест) Тогда 
//				Сообщать = Истина;
//			КонецЕсли;
//		КонецЕсли;
//		Если Сообщать Тогда 
//			Сообщить(Текст,СтатусСообщения.Важное);
//			Отказ = Истина;
//		КонецЕсли;
//	КонецЦикла;
//	
//	//Заполняет аналитику_1 в ТЧ значением НомерЗаявки
//	УстановитьАналитику_1ВСтроках();
//	
//	//Устанавливает реквизиты документа для отображения в списке
//	УстановитьРеквизитыСписка(Отказ);
//	
//	//ОК Калинин 140912 если не затирать
//	Если не ЗначениеЗаполнено(ID_Разнесения) тогда
//	//ОК Калинин 140912 
//		//устанавливает ID_Разнесения И ID_РазнесенияЧ
//		УстановитьIDРазнесения(Отказ);
//	конецесли;
////ОК Ванюков К. + //2012-02-09
// 	ПроверитьСуществованиеДокумента();
////ОК Ванюков К. -
//    //bit avseenkov++
//	Если бит_ЗагруженИзАксапты и РежимЗаписи = РежимЗаписиДокумента.Проведение и
//		Не ЗначениеЗаполнено(бит_Автор) Тогда 
//		бит_Автор = ПараметрыСеанса.ТекущийПользователь;
//    КонецЕсли;
//	//}-- 
//КонецПроцедуры                     

////Устанавливает реквизиты документа для отображения в списке
//Процедура УстановитьРеквизитыСписка(Отказ)
//	//Установка флага Контроль
//	мСуммаДляСравнения = ?(СуммаБезНДС = 0,РеквизитыДокументаОплаты.Итог("СуммаБезНДС"),СуммаБезНДС);
//	Если мСуммаДляСравнения = КонтрольБюджета.Итог("СуммаБезНДС") И НЕ КонтрольБюджета.Количество() = 0 Тогда 
//		Контроль = Истина;
//	Иначе 
//		Контроль = Ложь;
//	КонецЕсли;
//	//Установка флага БДР
//	Если мСуммаДляСравнения = УправленческаяАналитика.Итог("СуммаБезНДС") И НЕ УправленческаяАналитика.Количество() = 0 Тогда 
//		БДР = Истина;
//	Иначе 
//		БДР = Ложь;
//	КонецЕсли;
//	//Установка флага Акты
//	Если ЗначениеЗаполнено(ВидДокумента) И ЗначениеЗаполнено(бит_Дата) И ЗначениеЗаполнено(бит_Номер) Тогда 
//		Акты = Истина;
//	Иначе 
//		Акты = Ложь;
//	КонецЕсли;
//	//Установка реквизитов по первой строке ТЧ РеквизитыДокументаОплаты
//	Если РеквизитыДокументаОплаты.Количество() > 0 Тогда
//		ТекСтрока = РеквизитыДокументаОплаты[0];
//		СуммаСчета = ТекСтрока.СуммаСНДС;
//		НомерСчета = ТекСтрока.Номер;
//		ДатаСчета = ТекСтрока.Дата;
//		ДатаПередачиСчетаВКазначейство = ТекСтрока.ДатаПередачиВКазначейство;
//	Иначе 
//		СуммаСчета = 0;
//		НомерСчета = "";
//		ДатаСчета = Дата(0001,01,01);
//		ДатаПередачиСчетаВКазначейство = Дата(0001,01,01);
//	КонецЕсли;
//	
//КонецПроцедуры

////устанавливает ID_Разнесения И ID_РазнесенияЧ
//Процедура УстановитьIDРазнесения(Отказ)
//	
//	//ОК Калинин М. 180912 по умолчанию берем первый бит как единица
//	//Префикс = Формат(ВидДокумента.Первый_бит_ID,"ЧЦ=1; ЧН=");
//	Префикс = Формат(?(ЗначениеЗаполнено(ВидДокумента),ВидДокумента.Первый_бит_ID,1),"ЧЦ=1; ЧН=");
//	//ОК Калинин М. 
//	
//	Корень = Формат(Число(Номер),"ЧЦ=6; ЧВН=; ЧГ=0");
//	СтрокаРезультат = Префикс + Корень;
//	
//	//вычисляем постфикс
//	Сумма = 0;
//	Для сч = 0 по 6 Цикл
//		НомерСимвола = 7-сч; //от 7 до 1
//		СимволС = Сред(СтрокаРезультат,НомерСимвола,1);
//		СимволЧ = Число(СимволС);
//		Если Цел(НомерСимвола/2) = НомерСимвола/2 Тогда
//			СимволЧ = СимволЧ * 2;
//			Если СимволЧ > 9 Тогда 
//				СимволЧ = СимволЧ - 9;
//			КонецЕсли;
//		КонецЕсли;
//		Сумма = Сумма + СимволЧ;
//	КонецЦикла;
//	Сумма = (1-(Сумма/10 - Цел(Сумма/10)))*10;
//	Если Сумма = 10 Тогда 
//		Сумма = 0;
//	КонецЕсли;
//	СтрокаРезультат = СтрокаРезультат + Строка(Сумма);
//	
//	ID_РазнесенияЧ = Число(СтрокаРезультат);
//	ID_Разнесения = Сред(СтрокаРезультат,1,4) + "-" + Сред(СтрокаРезультат,5,4); 						
//КонецПроцедуры


//// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

////Процедура выполняет проверку заполнения шапки и таб. частей
////
//// Параметры:
//// Отказ - булево
//// Заголовок  – Строка
//Процедура ПроверкаРеквизитов(Отказ,Заголовок)
//	//Если не заполнена ни одна ТЧ
//	Если РеквизитыДокументаОплаты.Итог("СуммаБезНДС")+ КонтрольБюджета.Итог("СуммаБезНДС") + УправленческаяАналитика.Итог("СуммаБезНДС") = 0 Тогда 
//		Сообщить("Ни одна из сумм не заполнена!");
//		Отказ = Истина;
//	КонецЕсли;
//	// проверим заполнение шапки
//	СтруктураОбязательныхПолей = Новый Структура;
//	//СтруктураОбязательныхПолей.Вставить("НастройкаФормы");
//	//СтруктураОбязательныхПолей.Вставить("ЕдиницаИзмеренияСумм");
//	//СтруктураОбязательныхПолей.Вставить("ВалютаДокумента");
//	//СтруктураОбязательныхПолей.Вставить("КурсДокумента");
//	//СтруктураОбязательныхПолей.Вставить("КратностьДокумента");
////ОК Ванюков К. +// При проведении определенные поля должны быть заполнены // 2012-02-22
//	СтруктураОбязательныхПолей.Вставить("Организация");
//	СтруктураОбязательныхПолей.Вставить("Контрагент");
//	Если РеквизитыДокументаОплаты.Количество() = 0 Тогда 
//		СтруктураОбязательныхПолей.Вставить("ВидДокумента");
//	Иначе 
//		Для Каждого СтрокаТЧ из РеквизитыДокументаОплаты Цикл 
//			Если не ЗначениеЗаполнено(СтрокаТЧ.ВидДокумента) Тогда 
//				Сообщить("Реквизиты документа оплаты, строка " + СтрокаТЧ.НомерСтроки + ": не заполнен Вид Документа");
//				Отказ = Истина;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;	
////ОК Ванюков К. -	
//	СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
//	ТаблицаСценариев = КонтрольБюджета.Выгрузить(,"Сценарий");
//	ТаблицаСценариев.Свернуть("Сценарий");
//	Если ТаблицаСценариев.Количество() > 0 Тогда
//		Если НЕ (ТаблицаСценариев.Количество() = 1 И ТаблицаСценариев[0].Сценарий = Справочники.бит_СценарииБюджетирования.Факт_А) Тогда 
//			СтруктураОбязательныхПолей.Вставить("НомерЗаявки");
//		КонецЕсли;
//	КонецЕсли;
//	//проверка статуса контракта
//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный И ЗначениеЗаполнено(НомерЗаявки) Тогда 
//		ТекСтатус = РегистрыСведений.бит_СтатусыОбъектов.Получить(Новый Структура("Объект, ВидСтатуса",НомерЗаявки, Перечисления.бит_ВидыСтатусовОбъектов.Статус));
//		Если НЕ ТекСтатус.Статус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Заключен Тогда
//			//rarus +
//			//Предупреждение("Статус документа Контракт не равен <Заключен>",5);
//			Сообщить("Статус документа Контракт не равен <Заключен>");
//			//rarus -
//		КонецЕсли;
//	КонецЕсли;
//	//проверка статуса заявки операционной
//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Операционный И ЗначениеЗаполнено(НомерЗаявки) Тогда 
//		ТекСтатус = РегистрыСведений.бит_СтатусыОбъектов.Получить(Новый Структура("Объект, ВидСтатуса",НомерЗаявки, Перечисления.бит_ВидыСтатусовОбъектов.Статус));
//		Если НЕ ТекСтатус.Статус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована Тогда
//			//rarus +
//			//Предупреждение("Статус документа Заявка не равен <Согласован(а)>",5);
//			Сообщить("Статус документа Заявка не равен <Согласован(а)>");
//			//rarus -
//		КонецЕсли;
//	КонецЕсли;

//	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,  СтруктураОбязательныхПолей,   Отказ, Заголовок);
//	
//	// проверим таблицу КонтрольБюджета
//	СтруктураОбязательныхПолей = Новый Структура;
//	СтруктураОбязательныхПолей.Вставить("Период");		
//	СтруктураОбязательныхПолей.Вставить("Сценарий");
//	СтруктураОбязательныхПолей.Вставить("ЦФО");
//	СтруктураОбязательныхПолей.Вставить("СтатьяОборотов");	
//	СтруктураОбязательныхПолей.Вставить("Аналитика_2");
//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный Тогда 
//		СтруктураОбязательныхПолей.Вставить("Проект");
//	КонецЕсли;
//	
//		
//	бит_Бюджетирование.ПроверитьЗаполнениеТабличнойЧастиБДДС(ЭтотОбъект,"КонтрольБюджета",СтруктураОбязательныхПолей,Отказ,Заголовок);
//		
//КонецПроцедуры //ПроверкаРеквизитов()

//Функция ПодготовитьТаблицуКонтрольБюджета()
//	
//	//РазмерностьСумм = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);
//	
//	Текст = "ВЫБРАТЬ
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Период,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.ВалютаДокумента КАК Валюта,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Сценарий КАК Сценарий,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.ЦФО КАК ЦФО,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.СтатьяОборотов КАК СтатьяОборотов,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Аналитика_2 КАК Аналитика_2,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.СтавкаНДС,
//	|	0 КАК Количество,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаСНДС, 0) КАК Сумма,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаБезНДС, 0) КАК СуммаБезНДС,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаСНДС, 0) КАК СуммаРегл,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаБезНДС, 0) КАК СуммаБезНДСРегл,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаСНДС, 0) КАК СуммаУпр,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаБезНДС, 0) КАК СуммаБезНДСУпр,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаСНДС, 0) КАК СуммаСценарий,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаБезНДС, 0) КАК СуммаБезНДССценарий,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.Организация КАК бит_БК_Организация,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаБезНДС, 0) КАК бит_БК_СуммаВРамкахБюджетаБезНДС,
//	|	0 КАК бит_БК_СуммаЗаРамкамиБюджетаБезНДС,
//	|	0 КАК бит_БК_СуммаВРамкахБюджетаСНДС,
//	|	0 КАК бит_БК_СуммаЗаРамкамиБюджетаСНДС,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.НомерЗаявки КАК Аналитика_1";
//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный Тогда 
//		Текст = Текст + ",
//		|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.Контрагент,
//		|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.НомерЗаявки.ДоговорКонтрагента КАК ДоговорКонтрагента,
//		|	бит_БК_РазнесениеОборотовКонтрольБюджета.Проект";
//	КонецЕсли;
//	Текст = Текст+"
//	|ИЗ
//	|	Документ.бит_БК_РазнесениеОборотов.КонтрольБюджета КАК бит_БК_РазнесениеОборотовКонтрольБюджета
//	|ГДЕ
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка = &Ссылка";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = Текст;
//	Запрос.УстановитьПараметр("Ссылка"		   , Ссылка);			   
//	//	Запрос.УстановитьПараметр("РазмерностьСумм", РазмерностьСумм);
//	
//	Результат = Запрос.Выполнить();
//	
//	ТаблицаБДДС = Результат.Выгрузить();
//	
//	// получим таблицу периодов
//	КурсыПоПериодам = Неопределено;
//	
//	//Если Сценарий.ИспользоватьКурсыСценария Тогда
//	//	
//	//	ТаблицаПериодов = БДДС.Выгрузить();
//	//	ТаблицаПериодов.Свернуть("Период");
//	//	
//	//	 установим настройки для получения курсов по периодам
//	//	СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий,ВалютаДокумента);
//	//	
//	//	 получим курсы по периодам
//	//	КурсыПоПериодам = бит_ОбщегоНазначения.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,Сценарий,СтруктураПараметров);
//	//	
//	//КонецЕсли;
//	
//	//бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаБДДС,КурсыПоПериодам,СтруктураКурсыВалют);
//	
//	Возврат ТаблицаБДДС;
//	
//КонецФункции // ПодготовитьТаблицуБДДС()
//Функция ПодготовитьТаблицуУправленческаяАналитика()
//	
//	//РазмерностьСумм = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);
//	
//	Текст = "ВЫБРАТЬ
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Период,
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Ссылка.ВалютаДокумента КАК Валюта,
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Сценарий КАК Сценарий,
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.ЦФО КАК ЦФО,
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.СтатьяОборотов КАК СтатьяОборотов,
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Аналитика_2 КАК Аналитика_2,
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Ссылка.СтавкаНДС,
//	|	0 КАК Количество,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаСНДС, 0) КАК Сумма,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаБезНДС, 0) КАК СуммаБезНДС,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаСНДС, 0) КАК СуммаРегл,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаБезНДС, 0) КАК СуммаБезНДСРегл,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаСНДС, 0) КАК СуммаУпр,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаБезНДС, 0) КАК СуммаБезНДСУпр,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаСНДС, 0) КАК СуммаСценарий,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаБезНДС, 0) КАК СуммаБезНДССценарий,
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Ссылка.Организация КАК бит_БК_Организация,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовУправленческаяАналитика.СуммаБезНДС, 0) КАК бит_БК_СуммаВРамкахБюджетаБезНДС,
//	|	0 КАК бит_БК_СуммаЗаРамкамиБюджетаБезНДС,
//	|	0 КАК бит_БК_СуммаВРамкахБюджетаСНДС,
//	|	0 КАК бит_БК_СуммаЗаРамкамиБюджетаСНДС,
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Ссылка.НомерЗаявки КАК Аналитика_1";
//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный Тогда 
//		Текст = Текст + ",
//		|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Ссылка.Контрагент,
//		|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Ссылка.НомерЗаявки.ДоговорКонтрагента КАК ДоговорКонтрагента,
//		|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Проект";
//	КонецЕсли;
//	Текст = Текст+"
//	|ИЗ
//	|	Документ.бит_БК_РазнесениеОборотов.УправленческаяАналитика КАК бит_БК_РазнесениеОборотовУправленческаяАналитика
//	|ГДЕ
//	|	бит_БК_РазнесениеОборотовУправленческаяАналитика.Ссылка = &Ссылка";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = Текст;
//	Запрос.УстановитьПараметр("Ссылка"		   , Ссылка);			   
//	//	Запрос.УстановитьПараметр("РазмерностьСумм", РазмерностьСумм);
//	
//	Результат = Запрос.Выполнить();
//	
//	Таблица = Результат.Выгрузить();
//	
//	// получим таблицу периодов
//	КурсыПоПериодам = Неопределено;
//	
//	//Если Сценарий.ИспользоватьКурсыСценария Тогда
//	//	
//	//	ТаблицаПериодов = БДДС.Выгрузить();
//	//	ТаблицаПериодов.Свернуть("Период");
//	//	
//	//	// установим настройки для получения курсов по периодам
//	//	СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий,ВалютаДокумента);
//	//	
//	//	// получим курсы по периодам
//	//	КурсыПоПериодам = бит_ОбщегоНазначения.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,Сценарий,СтруктураПараметров);
//	//	
//	//КонецЕсли;
//	//
//	//бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаБДДС,КурсыПоПериодам,СтруктураКурсыВалют);
//	
//	Возврат Таблица;
//	
//КонецФункции // ПодготовитьТаблицуБДДС()

//Функция ПодготовитьТаблицуКонтрольБюджетаПоСценарию(Сценарий)
//	
//	//РазмерностьСумм = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Период,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.ВалютаДокумента КАК Валюта,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Сценарий КАК Сценарий,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.ЦФО КАК ЦФО,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.СтатьяОборотов КАК СтатьяОборотов,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Аналитика_2 КАК Аналитика_2,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.СтавкаНДС,
//	|	0 КАК Количество,
//	|	0 КАК Сумма,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаБезНДС, 0) КАК СуммаБезНДС,
//	|	0 КАК СуммаРегл,
//	|	0 КАК СуммаБезНДСРегл,
//	|	0 КАК СуммаУпр,
//	|	0 КАК СуммаБезНДСУпр,
//	|	0 КАК СуммаСценарий,
//	|	0 КАК СуммаБезНДССценарий,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.Организация КАК бит_БК_Организация,
//	|	ЕСТЬNULL(бит_БК_РазнесениеОборотовКонтрольБюджета.СуммаБезНДС, 0) КАК бит_БК_СуммаВРамкахБюджетаБезНДС,
//	|	0 КАК бит_БК_СуммаЗаРамкамиБюджетаБезНДС,
//	|	0 КАК бит_БК_СуммаВРамкахБюджетаСНДС,
//	|	0 КАК бит_БК_СуммаЗаРамкамиБюджетаСНДС,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка.НомерЗаявки КАК Аналитика_1,
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Проект
//	|ИЗ
//	|	Документ.бит_БК_РазнесениеОборотов.КонтрольБюджета КАК бит_БК_РазнесениеОборотовКонтрольБюджета
//	|ГДЕ
//	|	бит_БК_РазнесениеОборотовКонтрольБюджета.Ссылка = &Ссылка
//	|	И бит_БК_РазнесениеОборотовКонтрольБюджета.Сценарий = &Сценарий";
//	
//	Запрос.УстановитьПараметр("Ссылка"		   , Ссылка);			   
//	Запрос.УстановитьПараметр("Сценарий"		   , Сценарий);
//	//	Запрос.УстановитьПараметр("РазмерностьСумм", РазмерностьСумм);
//	
//	Результат = Запрос.Выполнить();
//	
//	Таблица = Результат.Выгрузить();
//	
//	// получим таблицу периодов
//	КурсыПоПериодам = Неопределено;
//	
//	//Если Сценарий.ИспользоватьКурсыСценария Тогда
//	//	
//	//	ТаблицаПериодов = БДДС.Выгрузить();
//	//	ТаблицаПериодов.Свернуть("Период");
//	//	
//	//	// установим настройки для получения курсов по периодам
//	//	СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий,ВалютаДокумента);
//	//	
//	//	// получим курсы по периодам
//	//	КурсыПоПериодам = бит_ОбщегоНазначения.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,Сценарий,СтруктураПараметров);
//	//	
//	//КонецЕсли;
//	//
//	//бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаБДДС,КурсыПоПериодам,СтруктураКурсыВалют);
//	
//	Возврат Таблица;
//	
//КонецФункции // ПодготовитьТаблицуБДДС()

//// Процедура выполняет движения по регистрам
////                
//Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаБДДС,Отказ,Заголовок,ТаблицаУправленческаяАналитика)
//	
//	// движения по регистру обороты по бюджетам
//	ТаблицаДвижений = Движения.бит_ОборотыПоБюджетам.Выгрузить();
//	ТаблицаДвижений.Очистить();
//	
//	Для каждого СтрокаТаблицы Из ТаблицаБДДС Цикл
//		//Начало_бит_БК_Магомедов_15.11.2011 
//		
//		НоваяСтрока = ТаблицаДвижений.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
//		Если Не ЗначениеЗаполнено(НоваяСтрока.Аналитика_3) Тогда 
//			НоваяСтрока.Аналитика_3 = Перечисления.бит_БК_ВариантыБюджета.ВРамкахБюджета;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Для каждого СтрокаТаблицы Из ТаблицаУправленческаяАналитика Цикл
//		//Начало_бит_БК_Магомедов_15.11.2011 
//		
//		НоваяСтрока = ТаблицаДвижений.Добавить();
//		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
//		Если Не ЗначениеЗаполнено(НоваяСтрока.Аналитика_3) Тогда 
//			НоваяСтрока.Аналитика_3 = Перечисления.бит_БК_ВариантыБюджета.ВРамкахБюджета;
//		КонецЕсли;
//		НоваяСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_УУ;
//	КонецЦикла; 
//	
//	
//	Движения.бит_ОборотыПоБюджетам.мТаблицаДвижений = ТаблицаДвижений;
//	Движения.бит_ОборотыПоБюджетам.ДобавитьДвижение();
//	
//	
//	// по регистру контрольные значения
//	ТаблицаСценариев = КонтрольБюджета.Выгрузить(,"Сценарий");
//	ТаблицаСценариев.Свернуть("Сценарий");
//	
//	ТаблицаДвижений = Движения.бит_КонтрольныеЗначенияБюджетов.Выгрузить();    
//	ТаблицаДвижений.Очистить();
//	ТекТаблицаДвижений = ТаблицаДвижений.Скопировать();
//	
//	Для Каждого СтрокаСценарий Из ТаблицаСценариев Цикл
//		ТекСценарий = СтрокаСценарий.Сценарий;
//		ТаблицаБДДСПоСценарию = ПодготовитьТаблицуКонтрольБюджетаПоСценарию(ТекСценарий);
//		ТекТаблицаДвижений.Очистить();
//		ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаБДДСПоСценарию,Отказ,Заголовок,ТекСценарий,ТекТаблицаДвижений);	
//		
//		Для Каждого ТекСтрока Из ТекТаблицаДвижений Цикл
//			НовСтрока = ТаблицаДвижений.Добавить();
//			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
//		КонецЦикла;
//		
//	КонецЦикла;
//	Движения.бит_КонтрольныеЗначенияБюджетов.мТаблицаДвижений = ТаблицаДвижений;
//	Движения.бит_КонтрольныеЗначенияБюджетов.ДобавитьДвижение();
//	
//	// регистру бухгалтерии бюджетирование
//	//	бит_Бюджетирование.СформироватьПроводкиБюджетирования(ТаблицаБДДС,Движения.бит_Бюджетирование);
//	
//КонецПроцедуры //ДвиженияПоРегистрам()

////бит_MZyubin Процедура выполняет движения по регистру бит_КонтрольныеЗначенияБюджетов
//// и осуществляет контроль по бюджету.
////
//// Параметры:
////  СтруктураШапкиДокумента  – Структура
////  ТаблицаРасход            - ТаблицаЗначений
////  Отказ                    - Булево
////  Заголовок                - Строка
////
//Процедура ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаБДДС,Отказ,Заголовок,Сценарий,ТаблицаДвижений)
//	СверхБюджета = Истина;
//	
//	//Начало_бит_БК_Магомедов_16.11.2011
//	//получаем необходимые Настройки
//	СценарийКонтролируемый = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий", Сценарий);
//	СценарийКонтролирующий = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролирующий сценарий", Сценарий);
//	ЗначениеПревышения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Допустимый % превышения", Сценарий, 0);
//	
//	ТаблицаДляКонтроля = ТаблицаБДДС.Скопировать();
//	
//	МассивИсключений = Новый Массив;
//	МассивИсключений.Добавить("Сценарий");
//	МассивИсключений.Добавить("СтатьяОборотов");
//	
//	//Начало_бит_БК_Магомедов_16.11.2011 
//	//Добавим в массив исключений не входящие в настройку измерения если такая настройка есть
//	бит_СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", СценарийКонтролирующий, Новый СписокЗначений, "СписокЗначений"); 
//	Для Каждого ЗначениеПеречисления Из Перечисления.бит_БК_ИзмеренияКонтроляБюджета Цикл
//		Если бит_СписокИзмеренийКонтроляБюджета.НайтиПоЗначению(ЗначениеПеречисления) = Неопределено Тогда
//			Мета = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления[Перечисления.бит_БК_ИзмеренияКонтроляБюджета.Индекс(ЗначениеПеречисления)];
//			МассивИсключений.Добавить(Мета.Имя);
//		КонецЕсли;
//	КонецЦикла;	
//	//Конец_бит_БК_Магомедов_17.11.2011 
//	
//	ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,);
//	
//	Периодичность = бит_КонтрольПоБюджету.ПолучитьПериодичностьКонтроляСценария(Сценарий);	
//	бит_БК_Общий.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
//	
//	
//	СтруктураПараметров = Новый Структура;
//	СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
//	СтруктураПараметров.Вставить("Сценарий"                     ,Сценарий);
//	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
//	СтруктураПараметров.Вставить("РежимКонтроля"                ,"Бюджет");
//	//Начало_бит_БК_Магомедов_30.11.2011 
//	СтруктураПараметров.Вставить("ВидОперации"                ,Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ПустаяСсылка());
//	//Конец_бит_БК_Магомедов_30.11.2011 
//	
//	ТекстЗапросаДляКонтроля = бит_БК_Общий.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапросаДляКонтроля;
//	
//	
//	ТаблицаДляКонтроля.Сортировать("Период Возр");
//	
//	Если ТаблицаДляКонтроля.Количество()>0 Тогда
//		
//		ДатаНачала    = ТаблицаДляКонтроля[0].Период;
//		ДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;
//		
//	Иначе
//		
//		ДатаНачала    = Дата;
//		ДатаОкончания = Дата;
//		
//	КонецЕсли; 
//	
//	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала,Периодичность);
//	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания,Периодичность);
//	
//	МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
//	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
//	
//	Если Сценарий = Справочники.бит_СценарииБюджетирования.Факт_Инвест Или
//		Сценарий = Справочники.бит_СценарииБюджетирования.Факт_У Тогда 
//		ТаблицаДляКонтроля.ЗаполнитьЗначения(НомерЗаявки, "Аналитика_1");
//	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
//	Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
//	Запрос.УстановитьПараметр("СценарийКонтролируемый", Сценарий);
//	Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
//	Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
//	Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
//	Запрос.УстановитьПараметр("ЗначениеПревышения",ЗначениеПревышения);
//	//Начало_бит_БК_Магомедов_28.11.2011 
//	Запрос.УстановитьПараметр("ЭтоФинПлан",Ложь);
//	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
//	
//	
//	Результат = Запрос.Выполнить();	
//	
//	//Начало_бит_Магомедов_15.01.2013
//	СоответствиеСтатей = бит_БК_Общий.ПолучитьТаблицуСоответствиеСтатей(ТаблицаДляКонтроля);
//	ТекстСообщения = "";
//	бит_БК_Общий.УстановитьСооветствиеСтатейОборотов(СоответствиеСтатей, Отказ, ТекстСообщения);
//	Если Отказ Тогда
//		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
//		Возврат;
//	КонецЕсли;
//	//сделаем то же для Упр аналитики
//	СоответствиеСтатейУпрАналитика = бит_БК_Общий.ПолучитьТаблицуСоответствиеСтатей(УправленческаяАналитика.Выгрузить());
//	ТекстСообщения = "";
//	бит_БК_Общий.УстановитьСооветствиеСтатейОборотов(СоответствиеСтатейУпрАналитика, Отказ, ТекстСообщения);
//	Если Отказ Тогда
//		Сообщить("Управленческая аналитика:" +Символы.ПС+ТекстСообщения, СтатусСообщения.Важное);
//		Возврат;
//	КонецЕсли;
//	//Только сценария Факт_А  
//	//Заменяем статьи оборотов на Контролирующие  в ТаблицаДляКонтроля.
//	Если Сценарий = Справочники.бит_СценарииБюджетирования.Факт_А Тогда 
//		Для Каждого СтрокаСоответствия Из СоответствиеСтатей Цикл
//			Если СтрокаСоответствия.КонтрольПоСтатье = Истина Тогда 
//				МассивСтрок = ТаблицаДляКонтроля.НайтиСтроки(Новый Структура("Период,СтатьяОборотов",СтрокаСоответствия.Период, СтрокаСоответствия.СтатьяОборотов));
//				Для Каждого ТекСтрока Из МассивСтрок Цикл
//					ТекСтрока.СтатьяОборотов = СтрокаСоответствия.КонтролирующаяСтатья;
//				КонецЦикла;
//			КонецЕсли;
//		КонецЦикла;
//		
//		//Формируем параметр для запроса
//		МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
//		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
//		Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
//		//по этому результату будет осуществлятся контроль
//		РезультатДляКонтроля = Запрос.Выполнить();
//		
//	КонецЕсли;
//	//Конец_бит_Магомедов_15.01.2013 
//	
//	СтруктураПараметров = Новый Структура;
//	СтруктураПараметров.Вставить("ИзмеренияКонтроля"   ,ИзмеренияКонтроля);
//	СтруктураПараметров.Вставить("Сценарий"            ,Сценарий);
//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан тогда
//		СтруктураПараметров.Вставить("КонтролироватьБюджет",Ложь);
//	иначе
//		СтруктураПараметров.Вставить("КонтролироватьБюджет",Истина);
//	КонецЕсли;
//	СтруктураПараметров.Вставить("СверхБюджета"        ,СверхБюджета);
//	//Начало_бит_БК_Магомедов_16.11.2011 
//	СтруктураПараметров.Вставить("СценарийКонтролируемый", СценарийКонтролируемый);
//	СтруктураПараметров.Вставить("СценарийКонтролирующий", СценарийКонтролирующий);
//	СтруктураПараметров.Вставить("ВидОперации", Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ПустаяСсылка());
//	СтруктураПараметров.Вставить("ДокументСсылка",Ссылка);
//	//Начало_бит_Магомедов_15.01.2013 
//	//Для сценария Факт_А передаем в параметр соответствие статей для движений
//	Если  Сценарий = Справочники.бит_СценарииБюджетирования.Факт_А Тогда 
//		СтруктураПараметров.Вставить("СоответствиеСтатей",СоответствиеСтатей);
//	КонецЕсли;
//	
//	Если Сценарий = Справочники.бит_СценарииБюджетирования.Факт_А Тогда 
//		бит_БК_Общий.ОбработатьРезультатКонтроля(РезультатДляКонтроля,Неопределено,СтруктураПараметров,Отказ,Заголовок);
//		Если Не Отказ Тогда 
//			бит_БК_Общий.ВыполнитьДвиженияРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок);
//		КонецЕсли;
//	Иначе 
//		бит_БК_Общий.ОбработатьРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок,,, Ссылка);
//	КонецЕсли; 
//	
//	
//КонецПроцедуры //ДвиженияПоРегиструКонтрольныхЗначений()

//Процедура ОбработкаПроведения(Отказ, РежимПроведения)
//	// Заголовок для сообщений об ошибках проведения.
//	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
//	
//	// Проверка ручной корректировки
//	Если ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
//		Возврат
//	КонецЕсли;
//	
//	ПроверкаРеквизитов(Отказ,Заголовок);
//	
//	Если Отказ Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
//	
//	//СтруктураКурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(ЭтотОбъект,Дата, Новый Структура("Документ, Регл, Упр, Сценарий"));
//	
//	ТаблицаКонтрольБюджета = ПодготовитьТаблицуКонтрольБюджета();
//	ТаблицаУправленческаяАналитика = ПодготовитьТаблицуУправленческаяАналитика();
//	Если НЕ Отказ Тогда
//		
//		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаКонтрольБюджета,Отказ,Заголовок,ТаблицаУправленческаяАналитика);
//		
//	КонецЕсли; 
//	
//	//ОК Ванюков К. +// При проведении документа "Разнесение оборотов" брать контрагента, указанного в поле "Контрагент" и проверять стоит ли у него в карточке галка "контрагент БК". Если не стоит - ставить ее // 2012-05-21
//	//Если Не Контрагент.ОК_КонтрагентБК Тогда 
//	//	Объект	= Контрагент.ПолучитьОбъект();
//	//	Объект.ОК_КонтрагентБК	= Истина;
//	//	Объект.Записать();
//	//КонецЕсли;
//	//ОК Ванюков К. -	
//	
//КонецПроцедуры

//Процедура ОбработкаУдаленияПроведения(Отказ)
//	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, );
//	
//	//Если НЕ Отказ Тогда
//	//	
//	//	// Очистим визы.
//	//	бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
//	//	
//	//КонецЕсли;
//	
//КонецПроцедуры


////Действия с документом
//Процедура ОчиститьТаблицы() Экспорт
//	
//	РеквизитыДокументаОплаты.Очистить();
//	КонтрольБюджета.Очистить();
//	УправленческаяАналитика.Очистить();
//	
//КонецПроцедуры


////   действия с суммами

////В Шапке
//Процедура ПересчитатьСуммыВШапке(ТочкаВхода) Экспорт
//	Если ТочкаВхода = "СуммаСНДС" Тогда
//		ПересчитатьСуммыПриИзмененииСуммаСНДСВШапке();
//	ИначеЕсли ТочкаВхода = "СуммаБезНДС" Тогда
//		ПересчитатьСуммыПриИзмененииСуммаБезНДСВШапке();
//	ИначеЕсли ТочкаВхода = "СтавкаНДС" Тогда
//		ПересчитатьСуммыПриИзмененииСтавкаНДСВШапке();
//	ИначеЕсли ТочкаВхода = "СуммаВВалютеБезНДС" Тогда
//		ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДСВШапке();
//	ИначеЕсли ТочкаВхода = "Валюта" Тогда
//		ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДСВШапке();
//	КонецЕсли;
//КонецПроцедуры
////Ставка НДС
//Процедура ПересчитатьСуммыПриИзмененииСтавкаНДСВШапке()	
//	Если ЗначениеЗаполнено(СуммаБезНДС) Тогда
//		ПересчитатьСуммыПриИзмененииСуммаБезНДСВШапке();
//	ИначеЕсли ЗначениеЗаполнено(СуммаСНДС) Тогда  
//		ПересчитатьСуммыПриИзмененииСуммаСНДСВШапке();
//	КонецЕсли; 		
//КонецПроцедуры

//Процедура ПересчитатьСуммыПриИзмененииСуммаСНДСВШапке()
//	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
//		Возврат;
//	КонецЕсли;
//	НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(СуммаСНДС, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
//	СуммаБезНДС = СуммаСНДС - НДС;
//	СуммаВВалютеБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаБезНДС,
//	мВалютаРегламентированногоУчета,
//	ВалютаДокумента,
//	1,
//	КурсДокумента,
//	1,
//	КратностьДокумента);
//КонецПроцедуры
//Процедура ПересчитатьСуммыПриИзмененииСуммаБезНДСВШапке()
//	
//	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
//		Возврат;
//	КонецЕсли;
//	НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
//	СуммаСНДС = СуммаБезНДС + НДС;
//	СуммаВВалютеБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаБезНДС,
//	мВалютаРегламентированногоУчета,
//	ВалютаДокумента,
//	1,
//	КурсДокумента,
//	1,
//	КратностьДокумента);
//	
//КонецПроцедуры
//Процедура ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДСВШапке()
//	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВВалютеБезНДС,
//	ВалютаДокумента,
//	мВалютаРегламентированногоУчета,
//	КурсДокумента,
//	1,
//	КратностьДокумента,
//	1);
//	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
//		Возврат;
//	КонецЕсли;
//	НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
//	СуммаСНДС = СуммаБезНДС + НДС;	
//КонецПроцедуры

////В ТЧ
//Процедура ПересчитатьСуммыКонтрольБюджета(ТочкаВхода) Экспорт
//	Для Каждого ТекСтрока Из КонтрольБюджета Цикл
//		ПересчитатьСуммыВТЧ(ТочкаВхода, ТекСтрока, Ложь);
//	КонецЦикла;
//КонецПроцедуры
//Процедура ПересчитатьСуммыУправленческаяАналитика(ТочкаВхода) Экспорт
//	Для Каждого ТекСтрока Из УправленческаяАналитика Цикл
//		ПересчитатьСуммыВТЧ(ТочкаВхода, ТекСтрока, Ложь);
//	КонецЦикла;
//КонецПроцедуры

//Процедура ПересчитатьСуммыВТЧ(ТочкаВхода, ТекущаяСтрока, ЕстьВалюта = Истина) Экспорт
//	Если ТочкаВхода = "СуммаСНДС" Тогда
//		ПересчитатьСуммыПриИзмененииСуммаСНДС(ТекущаяСтрока, ЕстьВалюта);
//	ИначеЕсли ТочкаВхода = "СуммаБезНДС" Тогда
//		ПересчитатьСуммыПриИзмененииСуммаБезНДС(ТекущаяСтрока, ЕстьВалюта);
//	ИначеЕсли ТочкаВхода = "СтавкаНДС" Тогда
//		ПересчитатьСуммыПриИзмененииСтавкаНДС(ТекущаяСтрока, ЕстьВалюта);
//	ИначеЕсли ТочкаВхода = "СуммаВВалютеБезНДС" Тогда
//		ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекущаяСтрока);
//	ИначеЕсли ТочкаВхода = "Валюта" Тогда
//		ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекущаяСтрока);
//	КонецЕсли;
//КонецПроцедуры
////Ставка НДС
//Процедура ПересчитатьСуммыПриИзмененииСтавкаНДС(ТекСтрока, ЕстьВалюта)	
//	Если ЗначениеЗаполнено(ТекСтрока.СуммаБезНДС) Тогда
//		ПересчитатьСуммыПриИзмененииСуммаБезНДС(ТекСтрока, ЕстьВалюта);
//	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.СуммаСНДС) Тогда  
//		ПересчитатьСуммыПриИзмененииСуммаСНДС(ТекСтрока, ЕстьВалюта);
//	КонецЕсли; 		
//КонецПроцедуры

//Процедура ПересчитатьСуммыПриИзмененииСуммаСНДС(ТекСтрока, ЕстьВалюта)
//	Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Или ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
//		Возврат;
//	КонецЕсли;
//	ТекСтрока.НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(ТекСтрока.СуммаСНДС, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
//	ТекСтрока.СуммаБезНДС = ТекСтрока.СуммаСНДС - ТекСтрока.НДС;
//	Если ЕстьВалюта тогда
//		ТекСтрока.СуммаВВалютеБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаБезНДС,
//		мВалютаРегламентированногоУчета,
//		ТекСтрока.Валюта,
//		1,
//		ТекСтрока.Курс,
//		1,
//		ТекСтрока.Кратность);
//	КонецЕсли;
//	
//КонецПроцедуры
//Процедура ПересчитатьСуммыПриИзмененииСуммаБезНДС(ТекСтрока, ЕстьВалюта)
//	Если ЕстьВалюта Тогда 
//		ТекСтрока.СуммаВВалютеБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаБезНДС,
//		мВалютаРегламентированногоУчета,
//		ТекСтрока.Валюта,
//		1,
//		ТекСтрока.Курс,
//		1,
//		ТекСтрока.Кратность);
//	КонецЕсли;

//	Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Или ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
//		Возврат;
//	КонецЕсли;
//	ТекСтрока.НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(ТекСтрока.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
//	ТекСтрока.СуммаСНДС = ТекСтрока.СуммаБезНДС + ТекСтрока.НДС;
//		
//КонецПроцедуры
//Процедура ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекСтрока)
//	Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	ТекСтрока.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВВалютеБезНДС,
//	ТекСтрока.Валюта,
//	мВалютаРегламентированногоУчета,
//	ТекСтрока.Курс,
//	1,
//	ТекСтрока.Кратность,
//	1);
//	Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Или ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда 
//		Возврат;
//	КонецЕсли;
//	ТекСтрока.НДС = бит_ОбщегоНазначения.РассчитатьСуммуНДС(ТекСтрока.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТекСтрока.СтавкаНДС));
//	ТекСтрока.СуммаСНДС = ТекСтрока.СуммаБезНДС + ТекСтрока.НДС;	
//КонецПроцедуры

//Процедура УстановитьЗначенияНДСВСтроках() Экспорт
//	Для Каждого ТекСтрока ИЗ КонтрольБюджета Цикл
//		Если НЕ ТекСтрока.СтавкаНДС = СтавкаНДС Тогда 
//			ТекСтрока.СтавкаНДС = СтавкаНДС;
//			ПересчитатьСуммыВТЧ("СуммаБезНДС", ТекСтрока, Ложь); 
//		КонецЕсли;
//	КонецЦикла;
//	Для Каждого ТекСтрока ИЗ УправленческаяАналитика Цикл
//		Если НЕ ТекСтрока.СтавкаНДС = СтавкаНДС Тогда 
//			ТекСтрока.СтавкаНДС = СтавкаНДС;
//			ПересчитатьСуммыВТЧ("СуммаБезНДС", ТекСтрока, Ложь);
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры

//Процедура ПересчитатьСтрокиДляСтавки18_118()
//	//
//	Коэфф = 0;
//	Если ЗначениеЗаполнено(СуммаБезНДС) И ЗначениеЗаполнено(СуммаСНДС) Тогда
//		Коэфф = СуммаСНДС/СуммаБезНДС;
//	ИначеЕсли НЕ РеквизитыДокументаОплаты.Количество() = 0 Тогда
//		ИтогСуммаСНДС = РеквизитыДокументаОплаты.Итог("СуммаСНДС");
//		ИтогСуммаБезНДС = РеквизитыДокументаОплаты.Итог("СуммаБезНДС");
//		Если Не ИтогСуммаБезНДС = 0 Тогда 
//			Коэфф = ИтогСуммаСНДС/ИтогСуммаБезНДС;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Для Каждого ТекСтрока Из КонтрольБюджета Цикл
//		ТекСтрока.СуммаСНДС = ТекСтрока.СуммаБезНДС * Коэфф;
//		ТекСтрока.НДС = ТекСтрока.СуммаСНДС - ТекСтрока.СуммаБезНДС;
//	КонецЦикла;
//	
//	Для Каждого ТекСтрока Из УправленческаяАналитика Цикл
//		ТекСтрока.СуммаСНДС = ТекСтрока.СуммаБезНДС * Коэфф;
//		ТекСтрока.НДС = ТекСтрока.СуммаСНДС - ТекСтрока.СуммаБезНДС;
//	КонецЦикла;
//КонецПроцедуры


////Действия кнопки ТЧ

////копирует разнесенные суммы со всеми аналитиками с закладки «Контроль бюджета»
//Процедура РаспределитьПоБДР() Экспорт
//	//Переносит данные ТЧ контрольБюджета в ТЧ УправленческаяАналитика
//	УправленческаяАналитика.Загрузить(КонтрольБюджета.Выгрузить());
//	ЗаполнитьТипДанныхУправленческаяАналитика();
//КонецПроцедуры
////копирует разнесенные суммы со всеми аналитиками с закладки «Управленческая аналитика».
//Процедура СкопироватьИзБДР() Экспорт
//	КонтрольБюджета.Загрузить(УправленческаяАналитика.Выгрузить());
//	Для Каждого ТекСтрока Из КонтрольБюджета Цикл
//		ТекСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.ПустаяСсылка();
//	КонецЦикла;	
//КонецПроцедуры

////Поиск по бюджету и распределение сумм
//Процедура бит_ПоискПоБюджету() Экспорт	
//	Обработка = Обработки.бит_БК_ПоискПоБюджету.Создать();
//	Обработка.Объект = ЭтотОбъект;
//	Обработка.СуммаКРаспределению = СуммаБезНДС;
//	Форма = Обработка.ПолучитьФорму();
//	Форма.Открыть();
//КонецПроцедуры
//Процедура бит_БК_ЗагрузитьРезультатыПоискПоБюджету(Таблица) Экспорт
//	Если Таблица.Количество() = 0 тогда
//		Возврат;
//	КонецЕсли;
//	//запоминаем значения из первой строки
//	ПерваяСтрока = Новый Структура;
//	Если НЕ КонтрольБюджета.Количество() = 0 Тогда 
//		ПерваяСтрока.Вставить("СтавкаНДС", КонтрольБюджета[0].СтавкаНДС);
//	КонецЕсли;
//	
//	КонтрольБюджета.Загрузить(Таблица);
//	Для Каждого ТекСтрока Из КонтрольБюджета Цикл 
//		Для Каждого ЭлементПервойСтроки ИЗ ПерваяСтрока Цикл
//			ТекСтрока[ЭлементПервойСтроки.Ключ] = ПерваяСтрока[ЭлементПервойСтроки.Ключ];
//		КонецЦикла;
//	КонецЦикла;
//	ПересчитатьСуммыКонтрольБюджета("СуммаБезНДС");
//	ЗаполнитьПредставлениеПериодаРегистрацииВТЧ();
//КонецПроцедуры

////Распределение текущей строки по периодам
//Процедура бит_РаспределитьКонтрольБюджета(ТекущаяСтрока) Экспорт
//	МассивСтрок = Новый Массив;
//	МассивСтрок.Добавить(ТекущаяСтрока);
//	Таблица = КонтрольБюджета.Выгрузить(МассивСтрок);
//	Индекс = КонтрольБюджета.Индекс(ТекущаяСтрока);
//	
//	Обработка = Обработки.бит_БК_Распределить.Создать();
//	Обработка.Объект = ЭтотОбъект;
//	Обработка.ИмяТЧ = "КонтрольБюджета";
//	Обработка.ИмяКолонкиСуммы = "СуммаБезНДС";
//	Форма = Обработка.ПолучитьФорму();
//	Форма.ОткрытьМодально();	
//	
//КонецПроцедуры
//Процедура бит_РаспределитьУправленческаяАналитика(ТекущаяСтрока) Экспорт
//	МассивСтрок = Новый Массив;
//	МассивСтрок.Добавить(ТекущаяСтрока);
//	Таблица = УправленческаяАналитика.Выгрузить(МассивСтрок);
//	Индекс = УправленческаяАналитика.Индекс(ТекущаяСтрока);
//	
//	Обработка = Обработки.бит_БК_Распределить.Создать();
//	Обработка.Объект = ЭтотОбъект;
//	Обработка.ИмяТЧ = "УправленческаяАналитика";
//	Обработка.ИмяКолонкиСуммы = "СуммаБезНДС";
//	Форма = Обработка.ПолучитьФорму();
//	Форма.ОткрытьМодально();
//	ЗаполнитьТипДанныхУправленческаяАналитика();
//КонецПроцедуры
//Процедура бит_БК_ЗагрузитьРезультатыРаспределить(Таблица, ИмяТЧ) Экспорт
//	ТЧ = ЭтотОбъект[ИмяТЧ];	
//	Если Таблица.Количество() = 0 тогда
//		Возврат;
//	КонецЕсли;		
//	ТЧ.Очистить();
//	Для Каждого ТекСтрока Из Таблица Цикл
//		НовСтрока = ТЧ.Добавить();
//		ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрока);
//		НовСтрока.СуммаБезНДС = ТекСтрока.РаспределеннаяСумма;
//	КонецЦикла;
//	
//	Если ИмяТЧ = "УправленческаяАналитика" Тогда 
//		ПересчитатьСуммыУправленческаяАналитика("СуммаБезНДС");
//	ИначеЕсли ИмяТЧ = "КонтрольБюджета" Тогда 
//		ПересчитатьСуммыКонтрольБюджета("СуммаБезНДС");
//	КонецЕсли;
//	ЗаполнитьПредставлениеПериодаРегистрацииВТЧ();
//КонецПроцедуры

////Распределение по варианту распределения
//Процедура бит_ВариантыРаспределения(ТекСтрока, ВариантРаспределения) Экспорт
//	
//	Индекс = КонтрольБюджета.Индекс(ТекСтрока);
//	
//	Обработка = Обработки.бит_БК_ВариантыРаспределения.Создать();
//	Обработка.Объект = ЭтотОбъект;
//	Обработка.Индекс = Индекс;	
//	Обработка.ИмяТЧ = "КонтрольБюджета";
//	Обработка.СуммаКРаспределению = ТекСтрока.СуммаБезНДС;
//	Обработка.ВариантРаспределения = ВариантРаспределения;
//	Обработка.Распределить();
//	
//КонецПроцедуры
//Процедура бит_БК_ЗагрузитьРезультатыВариантыРаспределения(Таблица, ИмяТЧ = Неопределено) Экспорт
//	
//	Если Таблица.Количество() = 0 тогда
//		Возврат;
//	КонецЕсли;
//	ТЧ = ЭтотОбъект[ИмяТЧ];
//	ТЧ.Очистить();
//	Для Каждого ТекСтрока Из Таблица Цикл
//		НовСтрока = ТЧ.Добавить();
//		ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрока);
//		НовСтрока.СуммаБезНДС = ТекСтрока.РаспределеннаяСумма;
//	КонецЦикла;
//	
//	Если ИмяТЧ = "УправленческаяАналитика" Тогда 
//		ПересчитатьСуммыУправленческаяАналитика("СуммаБезНДС");
//	ИначеЕсли ИмяТЧ = "КонтрольБюджета" Тогда 
//		ПересчитатьСуммыКонтрольБюджета("СуммаБезНДС");
//	КонецЕсли; 
//	ЗаполнитьПредставлениеПериодаРегистрацииВТЧ();
//КонецПроцедуры

////Заполнение ТЧ из Произвольного файла EXCEL
//Процедура бит_Буфер(ИмяТЧ) Экспорт	
//	Обработка = Обработки.бит_БК_ЗагрузкаИзExcelВТЧ.Создать();
//	Обработка.ИмяТЧ = ИмяТЧ;
//	Обработка.Объект = ЭтотОбъект;
//	Форма = Обработка.ПолучитьФорму();
//	Форма.Открыть();
//	
//КонецПроцедуры
//Процедура бит_БК_ЗагрузитьРезультатыБуфер(Таблица, ИмяТЧ = Неопределено) Экспорт
//	
//	Если Таблица.Количество() = 0 тогда
//		Возврат;
//	КонецЕсли;
//	ТЧ = ЭтотОбъект[ИмяТЧ];
//	ТЧ.Очистить();
//	Для Каждого ТекСтрока Из Таблица Цикл
//		НовСтрока = ТЧ.Добавить();
//		ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрока);
//		НовСтрока.СуммаБезНДС = ТекСтрока.Сумма;
//	КонецЦикла;
//	
//	Если ИмяТЧ = "УправленческаяАналитика" Тогда 
//		ПересчитатьСуммыУправленческаяАналитика("СуммаБезНДС");
//	ИначеЕсли ИмяТЧ = "КонтрольБюджета" Тогда 
//		ПересчитатьСуммыКонтрольБюджета("СуммаБезНДС");
//	КонецЕсли; 
//	ЗаполнитьПредставлениеПериодаРегистрацииВТЧ();
//КонецПроцедуры

////Переносит сумму без НДС соотв ТЧ в шапку 
//Процедура ПосчитатьОбщуюСумму(ИмяТЧ) Экспорт
//	ТЧ = ЭтотОбъект[ИмяТЧ];
//	СуммаБезНДС = ТЧ.Итог("СуммаБезНДС");
//	ПересчитатьСуммыВШапке("СуммаБезНДС");
//КонецПроцедуры

//Процедура ЗаполнитьТипДанныхУправленческаяАналитика() Экспорт
//	Для Каждого ТекСтрока Из УправленческаяАналитика Цикл
//		Если НЕ ТекСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_УУ Тогда 
//			ТекСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_УУ;
//		КонецЕсли;
//	КонецЦикла;	
//КонецПроцедуры 
//Процедура ЗаполнитьТипДанныхКонтрольБюджета() Экспорт
//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийРазнесениеОборотов.Инвестиционный Тогда 
//		Для Каждого ТекСтрока Из КонтрольБюджета Цикл
//			Если НЕ ЗначениеЗаполнено(ТекСтрока.Сценарий) Тогда 
//				ТекСтрока.Сценарий = Справочники.бит_СценарииБюджетирования.Факт_Инвест;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//КонецПроцедуры 

//// Возвращает доступные варианты печати документа
////
//// Возвращаемое значение:
////  Структура, каждая строка которой соответствует одному из вариантов печати
////  
//Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
//	
//	Возврат Новый Структура;
//	
//КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//Процедура ЗаполнитьПредставлениеПериодаРегистрацииВТЧ() Экспорт
//	Для Каждого ТекСтрока Из КонтрольБюджета Цикл
//		Если НЕ ЗначениеЗаполнено(ТекСтрока.Период) Тогда 
//			Продолжить;
//		КонецЕсли;
//		ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ТекСтрока.Период);
//		Если ТекСтрока.ПредставлениеПериодаРегистрации = ПредставлениеПериодаРегистрации  Тогда 
//			Продолжить;
//		КонецЕсли;
//		ТекСтрока.ПредставлениеПериодаРегистрации = ПредставлениеПериодаРегистрации;
//	КонецЦикла;	
//	//упр аналитика
//	Для Каждого ТекСтрока Из УправленческаяАналитика Цикл
//		Если НЕ ЗначениеЗаполнено(ТекСтрока.Период) Тогда 
//			Продолжить;
//		КонецЕсли;
//		ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ТекСтрока.Период);
//		Если ТекСтрока.ПредставлениеПериодаРегистрации = ПредставлениеПериодаРегистрации  Тогда 
//			Продолжить;
//		КонецЕсли;
//		ТекСтрока.ПредставлениеПериодаРегистрации = ПредставлениеПериодаРегистрации;
//	КонецЦикла;	
//КонецПроцедуры

////ОК Ванюков К. + //2012-02-09
////При вводе реквизитов  «Номер закрывающего документа» и «Дата закрывающего документа» необходимо проверить
////что не существует уже введенного документа «Разнсение оборотов» с таким контрагентом, номерому закр.док. и датой закр. док.
//Процедура ПроверитьСуществованиеДокумента() Экспорт

//	Если ЗначениеЗаполнено(Контрагент)
//		и ЗначениеЗаполнено(бит_Номер)
//		и ЗначениеЗаполнено(бит_Дата)
//		Тогда 
//		
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		               |	бит_БК_РазнесениеОборотов.Ссылка
//		               |ИЗ
//		               |	Документ.бит_БК_РазнесениеОборотов КАК бит_БК_РазнесениеОборотов
//		               |ГДЕ
//		               |	бит_БК_РазнесениеОборотов.Контрагент = &Контрагент
//		               |	И бит_БК_РазнесениеОборотов.бит_Дата = &бит_Дата
//		               |	И бит_БК_РазнесениеОборотов.бит_Номер = &бит_Номер
//		               |	И бит_БК_РазнесениеОборотов.Ссылка <> &Ссылка
//		               |	И НЕ бит_БК_РазнесениеОборотов.ПометкаУдаления";
//		
//		Запрос.УстановитьПараметр("Контрагент", Контрагент);
//		Запрос.УстановитьПараметр("бит_Дата", 	бит_Дата);
//		Запрос.УстановитьПараметр("бит_Номер", 	бит_Номер);
//		Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		
//		Если Выборка.Следующий() Тогда
//			//bit auavseenkov++{
//			//Предупреждение("Существует документ «Разнсение оборотов» с таким контрагентом, номером закр.док. и датой закр. док
//			//|" + Выборка.Ссылка );
//			Сообщить("Существует документ «Разнесение оборотов» с таким контрагентом, номером закр.док. и датой закр. док
//			|" + Выборка.Ссылка );
//			//bit}--
//		КонецЕсли;
//	КонецЕсли;
//	
//	

//КонецПроцедуры

//// BIT AMerkulov 2015-04-01 --
//Процедура ПриЗаписи(Отказ)
//	ПроверитьСуществованиеДокументовПоТЧ();
//КонецПроцедуры

//Процедура ПроверитьСуществованиеДокументовПоТЧ() Экспорт
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//	                      |	бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Ссылка.Контрагент,
//	                      |	бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Номер,
//	                      |	бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Дата,
//	                      |	бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.СуммаСНДС
//	                      |ПОМЕСТИТЬ ВТ_ТЧ
//	                      |ИЗ
//	                      |	Документ.бит_БК_РазнесениеОборотов.РеквизитыДокументаОплаты КАК бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты
//	                      |ГДЕ
//	                      |	бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Ссылка = &Ссылка
//	                      |;
//	                      |
//	                      |////////////////////////////////////////////////////////////////////////////////
//	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
//	                      |	бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Ссылка
//	                      |ИЗ
//	                      |	ВТ_ТЧ КАК ВТ_ТЧ
//	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_БК_РазнесениеОборотов.РеквизитыДокументаОплаты КАК бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты
//	                      |		ПО ВТ_ТЧ.Контрагент = бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Ссылка.Контрагент
//	                      |			И ВТ_ТЧ.Номер = бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Номер
//	                      |			И ВТ_ТЧ.Дата = бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Дата
//	                      |			И ВТ_ТЧ.СуммаСНДС = бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.СуммаСНДС
//	                      |ГДЕ
//	                      |	бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Ссылка <> &Ссылка
//	                      |
//	                      |СГРУППИРОВАТЬ ПО
//	                      |	бит_БК_РазнесениеОборотовРеквизитыДокументаОплаты.Ссылка");
//						  
//		Запрос.УстановитьПараметр("Ссылка", 	Ссылка);
//						  
//		Результат = Запрос.Выполнить();
//		
//		Если Не Результат.Пустой() Тогда
//			
//			Сообщить("Существуют документы «Разнесение оборотов» с такими документами оплаты:");
//			Выборка = Результат.Выбрать();
//			
//			Пока Выборка.Следующий()  Цикл
//				Сообщить("
//				|" + Выборка.Ссылка );
//			КонецЦикла;
//		КонецЕсли;
//						  
//	
//КонецПроцедуры
//// BIT AMerkulov 2015-04-01 --


//Процедура УстановитьАналитику_1ВСтроках() Экспорт
//	Для Каждого ТекСтрока Из КонтрольБюджета Цикл
//		Если НЕ ТекСтрока.Аналитика_1 = НомерЗаявки Тогда 
//			ТекСтрока.Аналитика_1 = НомерЗаявки;
//		КонецЕсли;
//	КонецЦикла;
//	Для Каждого ТекСтрока Из УправленческаяАналитика Цикл
//		Если НЕ ТекСтрока.Аналитика_1 = НомерЗаявки Тогда 
//			ТекСтрока.Аналитика_1 = НомерЗаявки;
//		КонецЕсли;
//	КонецЦикла;	
//КонецПроцедуры

////ОК Ванюков К. -
////здесь задаем структуру для чтения в процедуре записи истории по объекту в общем модуле
//ПараметрыЗаписи = Новый Структура("СобытиеПередЗаписью", Перечисления.бит_БК_СобытияОбъекта.ПустаяСсылка());

//мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
