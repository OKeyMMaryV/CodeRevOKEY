#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мПостроительОтчета Экспорт; // ПостроительОтчета - содержит текст запроса для отбора записей.
Перем НастройкиИзмерений Экспорт; // Соответствие - содержит дополнительно используемые измерения регистров накопления.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, 
			Пользователи.ТекущийПользователь(), Неопределено,, Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации <> Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольБюджета Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СценарийКонтролируемый"));
				
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
               

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	ПроверкаРеквизитов(Отказ,Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ТаблицаКонтрольныхЗначений = ПодготовитьТаблицуКонтрольныхЗначений();
	
	ПроверкаМножественногоКонтроля(ТаблицаКонтрольныхЗначений, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаКонтрольныхЗначений, Отказ, Заголовок);
	КонецЕсли; 
    
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = Пользователи.ТекущийПользователь();
	Комментарий   = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
// 
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
// 
// Параметры:
//  НазваниеМакета - строка, название макета.
// 
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
КонецПроцедуры // Печать()

#КонецЕсли

// Функция возвращает доступные варианты печати документа.
// 
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	// Возврат Новый Структура("ПФ","Печатная форма");

	Возврат Неопределено;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура формирует текст запроса построителя отчета, результат выполнения которого
// используется при проведении документа.
// 
// Параметры:
//  ПостроительОтчета - ПостроительОтчета.
// 
Процедура ИнициализироватьПостроительОтчета(ПостроительОтчета) Экспорт
	
	// ----------------------------------------------------------------------
	// Текст запроса
	
	ТекстПолей   = "";
	ТекстУсловия = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
		
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Или ИмяИзмерения = "СтатьяОборотов" Тогда
			Продолжить;		
		КонецЕсли;
		
		// Поля запроса
		ТекстПолей = ТекстПолей + "
					|	ВЫБОР
					|		КОГДА &НЗ_" + ИмяИзмерения + "
					|			ТОГДА бит_ОборотыПоБюджетам." + ИмяИзмерения + "
					|		ИНАЧЕ NULL
					|	КОНЕЦ КАК " + ИмяИзмерения + ",";
					
		Если Лев(ИмяИзмерения, 10) <> "Аналитика_" Тогда
			ТекстУсловия = ТекстУсловия + ",
						|	бит_ОборотыПоБюджетам." + ИмяИзмерения + ".*";			
		КонецЕсли;					
				
	КонецЦикла;  
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	бит_ОборотыПоБюджетам.Период 			КАК Период,
	|	бит_ОборотыПоБюджетам.Сценарий 			КАК Сценарий,
	|	&СценарийКонтролируемый 				КАК СценарийКонтролируемый,
	|	бит_ОборотыПоБюджетам.СтатьяОборотов 	КАК СтатьяОборотов,
	|   " + ТекстПолей + " 	
	|	ВЫБОР
	|		КОГДА &ВидОтклонения = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОтклоненийКонтрольныхЗначений.Процент)
	|			ТОГДА бит_ОборотыПоБюджетам.СуммаСценарий + бит_ОборотыПоБюджетам.СуммаСценарий * &ЗначениеОтклонения / 100
	|		КОГДА &ВидОтклонения = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное)
	|			ТОГДА бит_ОборотыПоБюджетам.СуммаСценарий + &ЗначениеОтклонения
	|		ИНАЧЕ бит_ОборотыПоБюджетам.СуммаСценарий
	|	КОНЕЦ КАК СуммаСценарийКонтроль,
	|	ВЫБОР
	|		КОГДА &ВидОтклоненияКоличество = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОтклоненийКонтрольныхЗначений.Процент)
	|			ТОГДА бит_ОборотыПоБюджетам.Количество + бит_ОборотыПоБюджетам.Количество * &ЗначениеОтклоненияКоличество / 100
	|		КОГДА &ВидОтклоненияКоличество = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное)
	|			ТОГДА бит_ОборотыПоБюджетам.Количество + &ЗначениеОтклоненияКоличество
	|		ИНАЧЕ бит_ОборотыПоБюджетам.Количество
	|	КОНЕЦ КАК КоличествоСценарийКонтроль
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|ГДЕ
	|	бит_ОборотыПоБюджетам.Сценарий = &Сценарий
	|	И бит_ОборотыПоБюджетам.Период <= &ДатаОкончания
	|	И бит_ОборотыПоБюджетам.Период >= &ДатаНачала
	|{ГДЕ
	|	бит_ОборотыПоБюджетам.СтатьяОборотов.*" + ТекстУсловия + "
	|// %ТекстОтбораПоДополнительнымИзмерениям%
	|}
	|";
		
	СтруктураСоответствийИмен = Новый Структура;
	
	ТекстОтбораПостроителя = "";
	Для Каждого ЭлементНастройки ИЗ НастройкиИзмерений Цикл
		ТекстОтбораПостроителя = ТекстОтбораПостроителя 
								+ бит_МеханизмДопИзмерений.СформироватьТекстПоляОтбора("бит_ОборотыПоБюджетам", ЭлементНастройки.Ключ, ЭлементНастройки.Значение);
								
		СтруктураСоответствийИмен.Вставить(ЭлементНастройки.Ключ, ЭлементНастройки.Значение.Синоним);						
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// %ТекстОтбораПоДополнительнымИзмерениям%", ТекстОтбораПостроителя);
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	#Если Клиент Тогда
	бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПредставленияПолей(СтруктураСоответствийИмен, ПостроительОтчета);
	#КонецЕсли
	
	// ----------------------------------------------------------------------
	// Отборы 
	СохраненнаяНастройка = ХранилищеНастроекОтбора.Получить();
	Если ТипЗнч(СохраненнаяНастройка) = Тип("НастройкиПостроителяОтчета") Тогда
		
		ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка);	
		
	ИначеЕсли ТипЗнч(СохраненнаяНастройка) = Тип("Структура") Тогда	
		                       		
		Для каждого СтрокаОтбора Из СохраненнаяНастройка.Отбор Цикл
			Если ЗначениеЗаполнено(СтрокаОтбора.ПутьКДанным) Тогда
				ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(СтрокаОтбора.ПутьКДанным);
				ЗаполнитьЗначенияСвойств(ЭлементОтбора, СтрокаОтбора);
			КонецЕсли;									
		КонецЦикла;	
		
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	// Параметры
	Если ВидОперации = Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольГрафиковДоговоров Тогда		
		ПостроительОтчета.Параметры.Вставить("СценарийКонтролируемый", Перечисления.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров); 		
	Иначе                           		
		ПостроительОтчета.Параметры.Вставить("СценарийКонтролируемый", СценарийКонтролируемый);	
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Сценарий"					   , Сценарий);
	ПостроительОтчета.Параметры.Вставить("ДатаНачала"				   , ДатаНачала);
	ПостроительОтчета.Параметры.Вставить("ДатаОкончания"			   , ДатаОкончания);
	ПостроительОтчета.Параметры.Вставить("ВидОтклонения"			   , ВидОтклонения);
	ПостроительОтчета.Параметры.Вставить("ЗначениеОтклонения"		   , ЗначениеОтклонения);
	ПостроительОтчета.Параметры.Вставить("ВидОтклоненияКоличество"	   , ВидОтклоненияКоличество);
	ПостроительОтчета.Параметры.Вставить("ЗначениеОтклоненияКоличество", ЗначениеОтклоненияКоличество);
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Или ИмяИзмерения = "СтатьяОборотов" Тогда
			Продолжить;		
		КонецЕсли;
		ИмяПараметра = "НЗ_" + ИмяИзмерения;
		ПостроительОтчета.Параметры.Вставить(ИмяПараметра, ЭтотОбъект[ИмяПараметра]);
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьПостроительОтчета()

// Процедура сохраняет настройки отбора построителя.
// 
// Параметры:
//  СтруктураНастроек - Структура.
// 
Процедура СохранитьНастройкиПостроителя(СтруктураНастроек)  Экспорт
	
	ХранилищеНастроекОтбора = Новый ХранилищеЗначения(СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиПостроителя()

// Функция получает настройки отбора построителя.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
// 
Функция ПолучитьНастройкиПостроителя() Экспорт
	
	СтруктураНастроек = ХранилищеНастроекОтбора.Получить();
	
	Возврат СтруктураНастроек;
	
КонецФункции // ПолучитьНастройкиПостроителя()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет проверку заполнения шапки.
// 
// Параметры:
//  Отказ - булево
//  Заголовок  - Строка
// 
Процедура ПроверкаРеквизитов(Отказ,Заголовок)

	Если ВидОтклонения = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент
		И (ЗначениеОтклонения > 100
		ИЛИ ЗначениеОтклонения < -100) Тогда
		
		бит_ОбщегоНазначения.СообщитьОбОшибке("Значение отклонения выраженного в процентах располагается в диапазоне от -100 до 100!", Отказ);	
		
	КонецЕсли;
		
КонецПроцедуры // ПроверкаРеквизитов()

Процедура ПроверкаМножественногоКонтроля(ТаблицаКонтрольныхЗначений,Отказ,Заголовок)
          	
	Периодичность = бит_Бюджетирование.ПолучитьПериодичностьСценария(СценарийКонтролируемый);
	СтрПериодичность = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования,Периодичность);
	        	
	Если ВидОперации = Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольБюджета Тогда
		
	   // Проверка на множественный контроль
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Период,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
		|	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов
		|ИЗ
		|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(&НачалоПериода, 
		|							&КонецПериода,
		|							" + Периодичность + ",
		|							СценарийКонтролируемый = &СценарийКонтролируемый) КАК бит_КонтрольныеЗначенияБюджетовОбороты
		|";   		
		Запрос.УстановитьПараметр("НачалоПериода"         ,ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода"          ,ДатаОкончания);
		Запрос.УстановитьПараметр("СценарийКонтролируемый",СценарийКонтролируемый);
		
		Результат = Запрос.Выполнить();
		
		ТаблицаДляКонтроля = Результат.Выгрузить();
		
		Для каждого СтрокаТаблицы Из ТаблицаКонтрольныхЗначений Цикл
		
			НоваяСтрока = ТаблицаДляКонтроля.Добавить();
			НоваяСтрока.Период        = СтрокаТаблицы.Период;
			НоваяСтрока.Сценарий      = СтрокаТаблицы.Сценарий;
			НоваяСтрока.СтатьяОборотов = СтрокаТаблицы.СтатьяОборотов;
		
		КонецЦикла; 
		
		ТаблицаДляКонтроля.Свернуть("Период, Сценарий, СтатьяОборотов");
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
        |	ТаблицаДляКонтроля.Период,
        |	ТаблицаДляКонтроля.Сценарий,
        |	ТаблицаДляКонтроля.СтатьяОборотов
        |ПОМЕСТИТЬ ТаблицаКонтроля
        |ИЗ
        |	&ТаблицаДляКонтроля КАК ТаблицаДляКонтроля
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ТаблицаКонтроля.Период,
        |	ТаблицаКонтроля.СтатьяОборотов,
        |	ТаблицаКонтроля.Сценарий,
        |	ТаблицаКонтроляКопия.Сценарий КАК СценарийКопия
        |ИЗ
        |	ТаблицаКонтроля КАК ТаблицаКонтроля
        |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКонтроля КАК ТаблицаКонтроляКопия
        |		ПО ТаблицаКонтроля.Период = ТаблицаКонтроляКопия.Период
        |			И ТаблицаКонтроля.СтатьяОборотов = ТаблицаКонтроляКопия.СтатьяОборотов
        |			И ТаблицаКонтроля.Сценарий <> ТаблицаКонтроляКопия.Сценарий
        |ГДЕ
        |	(НЕ ТаблицаКонтроляКопия.Сценарий ЕСТЬ NULL )
        |	И ТаблицаКонтроля.Сценарий <> &Сценарий
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |УНИЧТОЖИТЬ ТаблицаКонтроля
		|
		|";    		
		Запрос.УстановитьПараметр("ТаблицаДляКонтроля", ТаблицаДляКонтроля);
		Запрос.УстановитьПараметр("Сценарий"		  , Сценарий);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		// Вывод сообщений в случае множественного контроля.
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Сценарий) Тогда
				
		      ПредставлениеПериода = бит_Бюджетирование.СформироватьПредставлениеПериода(Выборка.Период, Периодичность);   
				
				
				ТекстСообщения = "В течение периода """
				 + ПредставлениеПериода
				 + """ статья """
				 + Выборка.СтатьяОборотов
				 + """ контролируется и сценарием """
				 + Выборка.Сценарий
				 + """ и сценарием """
				 + Выборка.СценарийКопия
				 + """. Множественный контроль запрещен!";
				 
			   бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, СтатусСообщения.Важное);				 
                      			
			КонецЕсли; 
		
		КонецЦикла; 
		
		// Вывод сообщений в случае наличия движений до включения контроля.
		Выборка = Результат.Выбрать();
		
		флЕстьОшибки = Ложь;
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.Сценарий) Тогда
				
		        ПредставлениеПериода = бит_Бюджетирование.СформироватьПредставлениеПериода(Выборка.Период, Периодичность);   				
				
				ТекстСообщения = "В течение периода """
				 + ПредставлениеПериода
				 + """ по статье """
				 + Выборка.СтатьяОборотов
				 + """ были сформированы движения до установки контроля!";
				 
			   бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Внимание);				 

			   флЕстьОшибки = Истина;
			
			КонецЕсли; 
			
			Если флЕстьОшибки Тогда
				
			   ТекстСообщения = "Рекомендуется перепровести соотвествующие документы после включения контроля!";	
			   бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Внимание);				 
			
			КонецЕсли; 
			
		КонецЦикла;    		
		
	КонецЕсли; 
	
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольЗаявок Тогда
		
		// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
		ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		
		// Проверка наличия движений до включения контроля.
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Период,
        |	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
        |	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов,
        |	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот) КАК СуммаСценарийИсполнениеОборот
        |ИЗ
        |	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
        |			&НачалоПериода,
        |			&КонецПериода,
        |			Месяц,
        |			Сценарий = &Сценарий
        |				И СценарийКонтролируемый = ЗНАЧЕНИЕ(Справочник." + ИмяСправочникаСценарии + ".ПустаяСсылка)
        |				И СтатьяОборотов В (&МассивСтатей)) КАК бит_КонтрольныеЗначенияБюджетовОбороты
        |ГДЕ
        |	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот <> 0
        |
        |СГРУППИРОВАТЬ ПО
        |	бит_КонтрольныеЗначенияБюджетовОбороты.Период,
        |	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
        |	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов
		|";
		
		Запрос.УстановитьПараметр("НачалоПериода"        ,ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода"         ,ДатаОкончания);
		Запрос.УстановитьПараметр("Сценарий"             ,Сценарий);
		МассивСтатей = ТаблицаКонтрольныхЗначений.ВыгрузитьКолонку("СтатьяОборотов");
		Запрос.УстановитьПараметр("МассивСтатей"         ,МассивСтатей);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		флЕстьОшибки = Ложь;
		Пока Выборка.Следующий() Цикл
				
		        ПредставлениеПериода = бит_Бюджетирование.СформироватьПредставлениеПериода(Выборка.Период, Периодичность);   				
				
				ТекстСообщения = "В течение периода """
				 + ПредставлениеПериода
				 + """ по статье """
				 + Выборка.СтатьяОборотов
				 + """ были сформированы движения до установки контроля!";
				 
			   бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Внимание);				 

			   флЕстьОшибки = Истина;
			
			
			Если флЕстьОшибки Тогда
				
			   ТекстСообщения = "Рекомендуется перепровести соотвествующие документы после включения контроля!";	
			   бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Внимание);				 
			
			КонецЕсли; 
			
		КонецЦикла;    		
	
	КонецЕсли; 

	Если ВидОперации = Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольГрафиковДоговоров Тогда
		
		// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
		ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		
		// Проверка наличия движений до включения контроля.
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
        |	бит_КонтрольныеЗначенияБюджетовОбороты.Период,
        |	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
        |	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов,
        |	СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот) КАК СуммаСценарийИсполнениеОборот
        |ИЗ
        |	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
        |			&НачалоПериода,
        |			&КонецПериода,
        |			Месяц,
        |			Сценарий = &Сценарий
        |				И СценарийКонтролируемый = ЗНАЧЕНИЕ(Перечисление.бит_РежимыКонтроляПоБюджету.ГрафикиДоговоров)
        |				И СтатьяОборотов В (&МассивСтатей)) КАК бит_КонтрольныеЗначенияБюджетовОбороты
        |ГДЕ
        |	бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот <> 0
        |
        |СГРУППИРОВАТЬ ПО
        |	бит_КонтрольныеЗначенияБюджетовОбороты.Период,
        |	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
        |	бит_КонтрольныеЗначенияБюджетовОбороты.СтатьяОборотов
	    |";
		
		Запрос.УстановитьПараметр("НачалоПериода"        ,ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода"         ,ДатаОкончания);
		Запрос.УстановитьПараметр("Сценарий"             ,Сценарий);
		МассивСтатей = ТаблицаКонтрольныхЗначений.ВыгрузитьКолонку("СтатьяОборотов");
		Запрос.УстановитьПараметр("МассивСтатей"         ,МассивСтатей);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		флЕстьОшибки = Ложь;
		Пока Выборка.Следующий() Цикл
				
		        ПредставлениеПериода = бит_Бюджетирование.СформироватьПредставлениеПериода(Выборка.Период, Периодичность);   				
				
				ТекстСообщения = "В течение периода """
				 + ПредставлениеПериода
				 + """ по статье """
				 + Выборка.СтатьяОборотов
				 + """ были сформированы движения до установки контроля!";
				 
			   бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Внимание);				 

			   флЕстьОшибки = Истина;
			
			
			Если флЕстьОшибки Тогда
				
			   ТекстСообщения = "Рекомендуется перепровести соответствующие документы после включения контроля!";	
			   бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Внимание);				 
			
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаМножественногоКонтроля()

// Функция готовит таблицу движений для проведения.
// 
// Возвращаемое значение:
//   ТаблицаКонтрольныхЗначений   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуКонтрольныхЗначений()
	
	// При программном проведении документа текст запроса не корректен, сфоримируем его еще раз.
	ИнициализироватьПостроительОтчета(мПостроительОтчета);
	мПостроительОтчета.Выполнить(); 
	ТаблицаКонтрольныхЗначений = мПостроительОтчета.Результат.Выгрузить();
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольБюджета Тогда
		
		// Приведем суммы к валюте контролируемого сценария.
		
		// Получим таблицу периодов
		ТаблицаПериодов = ТаблицаКонтрольныхЗначений.Скопировать();
		ТаблицаПериодов.Свернуть("Период");
		
		// Установим настройки для получения курсов по периодам.
		СтруктураПараметров = Новый Структура;
		Параметры = Новый Структура;
		Параметры.Вставить("Валюта",Сценарий.Валюта);
		СтруктураПараметров.Вставить("Сценарий",Параметры);
		
		Параметры = Новый Структура;
		Параметры.Вставить("Валюта",СценарийКонтролируемый.Валюта);
		СтруктураПараметров.Вставить("СценарийКонтролируемый",Параметры);
		
		// Получим курсы по периодам
		КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,Сценарий,СтруктураПараметров);
		
		Для каждого СтрокаТаблицы Из ТаблицаКонтрольныхЗначений Цикл
			
			КурсыПериода = КурсыПоПериодам[СтрокаТаблицы.Период];
			
			Если КурсыПериода <> Неопределено Тогда
				
				КурсыСценарий = КурсыПериода.Сценарий;
				КурсыСценарийКонтролируемый = КурсыПериода.СценарийКонтролируемый;
				
				СтрокаТаблицы.СуммаСценарийКонтроль 
				     = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСценарийКонтроль
					                                                   ,КурсыСценарий.Валюта
																	   ,КурсыСценарийКонтролируемый.Валюта
																	   ,КурсыСценарий.Курс
																	   ,КурсыСценарийКонтролируемый.Курс
																	   ,КурсыСценарий.Кратность
																	   ,КурсыСценарийКонтролируемый.Кратность);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат ТаблицаКонтрольныхЗначений;
	
КонецФункции // ПодготовитьТаблицуКонтрольныхЗначений()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаКонтрольныхЗначений, Отказ, Заголовок)
	
	// Движения по регистру "бит_КонтрольныеЗначенияБюджетов".
	ТаблицаДвижений = Движения.бит_КонтрольныеЗначенияБюджетов.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрольныхЗначений Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		
	КонецЦикла; 
	
	Движения.бит_КонтрольныеЗначенияБюджетов.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_КонтрольныеЗначенияБюджетов.ДобавитьДвижение();
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#Область Инициализация

НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

мПостроительОтчета = Новый ПостроительОтчета;
ИнициализироватьПостроительОтчета(мПостроительОтчета); 

#КонецОбласти

#КонецЕсли
