
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеЗадания = ТекущиеЗадания();
	Для каждого Элемент Из ТекущиеЗадания Цикл
		НоваяСтрока = Настройки.Добавить();
		Если Элемент.Параметры.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Параметры[0]);
		КонецЕсли; 
		
		НоваяСтрока.Использование = Элемент.Использование;
		ЗаполнитьДобавленныеКолонкиСтроки(НоваяСтрока, Элемент.Расписание);
	КонецЦикла; 
	
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверкаНаДубли(Отказ);
	ПроверитьНаВытеснение(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыВыполнения

&НаКлиенте
Процедура ПараметрыВыполненияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
		ТекущиеДанные.Использование = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
		ТекущиеДанные.НастроитьРасписание = Нстр("ru = 'Настроить расписание'");
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		ЗаполнитьДобавленныеКолонкиСтроки(ТекущиеДанные, Расписание);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НастройкиНастроитьРасписание Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
		Если ПустаяСтрока(ТекущиеДанные.Расписание) Тогда
			Расписание = Новый РасписаниеРегламентногоЗадания;
		Иначе	
			Расписание = ЗначениеИзСтрокиXML(ТекущиеДанные.Расписание);
		КонецЕсли; 
		
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		Диалог.Показать(Новый ОписаниеОповещения("ПараметрыВыполненияВыборЗавершение", ЭтотОбъект));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыполненияВыборЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
		ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
		ТекущиеДанные.Расписание = ЗначениеВСтрокуXML(Расписание);
		ТекущиеДанные.РасписаниеПредставление = Строка(Расписание);
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		СохранениеНесохраненныхДанныхНаСервере();
		Закрыть(АвтоматическиПроводитьДокументы);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере 
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НастройкиСценарий");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Настройки.Сценарий", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Любой сценарий>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НастройкиВидОперации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Настройки.ВидОперации", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Любой вид операции>'"));
		
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НастройкиНачалоПериода");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"Настройки.НачалоПериода", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<За весь период>'"));
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы, Расписание)

	СтрокаТаблицы.НастроитьРасписание = Нстр("ru = 'Настроить расписание'");	
	СтрокаТаблицы.Расписание = ЗначениеВСтрокуXML(Расписание);
	СтрокаТаблицы.РасписаниеПредставление = Строка(Расписание);

КонецПроцедуры
 
&НаСервере
Функция ТекущиеЗадания()

	Возврат РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", 
				Метаданные.РегламентныеЗадания.бит_УстановкаКонтрольныхЗначений));

КонецФункции
 
&НаСервереБезКонтекста
Функция ЗначениеВСтрокуXML(Расписание)

	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Расписание);

КонецФункции
 
&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиXML(Расписание)

	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(Расписание);

КонецФункции
 
&НаСервере
Процедура СохранениеНесохраненныхДанныхНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеЗадания = ТекущиеЗадания();
	Для каждого Элемент Из ТекущиеЗадания Цикл
		Элемент.Удалить();
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Настройки Цикл
		
		ПараметрыУстановки = Документы.бит_УстановкаКонтрольныхЗначений.НовыеПараметрыУстановкиВФоне();
		ЗаполнитьЗначенияСвойств(ПараметрыУстановки, СтрокаТаблицы); 
		
		НовоеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("бит_УстановкаКонтрольныхЗначений");
		ПредставлениеЗадания = ПредставлениеЗадания(СтрокаТаблицы);
		НовоеЗадание.Наименование = СтрШаблон(Нстр("ru = 'Установка контрольных значений по: %1'"), ПредставлениеЗадания);
		НовоеЗадание.Ключ = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ПараметрыУстановки);
		НовоеЗадание.Параметры.Добавить(ПараметрыУстановки);
		НовоеЗадание.Расписание = ЗначениеИзСтрокиXML(СтрокаТаблицы.Расписание);
		НовоеЗадание.Использование = СтрокаТаблицы.Использование;
		НовоеЗадание.Записать();
		АвтоматическиПроводитьДокументы = Макс(АвтоматическиПроводитьДокументы, СтрокаТаблицы.Использование);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеЗадания(СтрокаТаблицы)

	Сценарий      = ?(ЗначениеЗаполнено(СтрокаТаблицы.Сценарий), 
						Строка(СтрокаТаблицы.Сценарий), Нстр("ru = '<Любой сценарий>'"));
	ВидОперации   = ?(ЗначениеЗаполнено(СтрокаТаблицы.ВидОперации), 
						Строка(СтрокаТаблицы.ВидОперации), Нстр("ru = '<Любой вид операции>'"));
	НачалоПериода = ?(ЗначениеЗаполнено(СтрокаТаблицы.НачалоПериода),
						Формат(СтрокаТаблицы.НачалоПериода,"ДФ=dd.MM.yyyy"), Нстр("ru = '<За весь период>'"));
						
	Возврат СтрШаблон("%1, %2, %3", Сценарий, ВидОперации, НачалоПериода);
	
КонецФункции 

&НаСервере
Процедура ПроверкаНаДубли(Отказ)

	ШаблонСообщения = НСтр("ru = 'Сценарий и вид операции строки %1 списка ""Настройки"" повторяются в строке %2.'");
	Поле  		    = "Настройки[%1].Сценарий";
	
	ТаблицаДляПроверки = РеквизитФормыВЗначение("Настройки");
	ТаблицаДляПроверки.Колонки.Добавить("Проверено", Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаТаблицы Из ТаблицаДляПроверки Цикл
		СтрокаТаблицы.Проверено = Истина;
		ТекущийИндекс = ТаблицаДляПроверки.Индекс(СтрокаТаблицы);
		Фильтр = Новый Структура("Сценарий, ВидОперации, Проверено",,,Ложь); 
		ЗаполнитьЗначенияСвойств(Фильтр, СтрокаТаблицы,, "Проверено");
		НайденныеСтроки = ТаблицаДляПроверки.НайтиСтроки(Фильтр);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Индекс 		   = ТаблицаДляПроверки.Индекс(НайденнаяСтрока);
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекущийИндекс + 1, Индекс + 1);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , СтрШаблон(Поле, ТекущийИндекс), ,Отказ);
				НайденнаяСтрока.Проверено = Истина;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаВытеснение(Отказ)
	
	// Пустой (любой) сценарий и пустой (любой) вид операции обработают все документы.
	// Другие записи не имеют смысла.
	ШаблонСценарий = НСтр("ru = 'Сценарий или вид операции в строке %1 списка ""Настройки"" будет обработан по настройке в строке %2.'");
	ПолеСценарий   = "Настройки[%1].Сценарий";
	
	ТаблицаДляПроверки = РеквизитФормыВЗначение("Настройки");
	ТаблицаДляПроверки.Колонки.Добавить("Проверено", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаТаблицы Из ТаблицаДляПроверки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сценарий) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидОперации) Тогда
			СтрокаТаблицы.Проверено = Истина;
			ТекущийИндекс = ТаблицаДляПроверки.Индекс(СтрокаТаблицы);
			Фильтр = Новый Структура("Проверено",Ложь);
			НайденныеСтроки = ТаблицаДляПроверки.НайтиСтроки(Фильтр);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Индекс = ТаблицаДляПроверки.Индекс(НайденнаяСтрока);
					ТекстСообщения = СтрШаблон(ШаблонСценарий, Индекс + 1, ТекущийИндекс + 1);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , СтрШаблон(ПолеСценарий, Индекс), ,Отказ);
					НайденнаяСтрока.Проверено = Истина;
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;

	// Пустой (любой) сценарий обработают документы с любым сченарием по назначенным видом операции.	
	ШаблонСценарий = НСтр("ru = 'Сценарий в строке %1 списка ""Настройки"" будет обработан по настройке в строке %2.'");
	ПолеСценарий   = "Настройки[%1].Сценарий";
	ТаблицаДляПроверки.ЗаполнитьЗначения(Ложь, "Проверено");
	
	Для каждого СтрокаТаблицы Из ТаблицаДляПроверки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сценарий) Тогда
			СтрокаТаблицы.Проверено = Истина;
			ТекущийИндекс = ТаблицаДляПроверки.Индекс(СтрокаТаблицы);
			Фильтр = Новый Структура("ВидОперации, Проверено",,Ложь);
			ЗаполнитьЗначенияСвойств(Фильтр, СтрокаТаблицы,, "Проверено");
			НайденныеСтроки = ТаблицаДляПроверки.НайтиСтроки(Фильтр);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Индекс = ТаблицаДляПроверки.Индекс(НайденнаяСтрока);
					ТекстСообщения = СтрШаблон(ШаблонСценарий, Индекс + 1, ТекущийИндекс + 1);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , СтрШаблон(ПолеСценарий, Индекс), ,Отказ);
					НайденнаяСтрока.Проверено = Истина;
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	ШаблонОперация = НСтр("ru = 'Вид операции в строке %1 списка ""Настройки"" будет обработан по настройке в строке %2.'");
	ПолеОперация   = "Настройки[%1].ВидОперации";
	ТаблицаДляПроверки.ЗаполнитьЗначения(Ложь, "Проверено");
	
	Для каждого СтрокаТаблицы Из ТаблицаДляПроверки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидОперации) Тогда
			СтрокаТаблицы.Проверено = Истина;
			ТекущийИндекс = ТаблицаДляПроверки.Индекс(СтрокаТаблицы);
			Фильтр = Новый Структура("Сценарий, Проверено",,Ложь);
			ЗаполнитьЗначенияСвойств(Фильтр, СтрокаТаблицы,, "Проверено");
			НайденныеСтроки = ТаблицаДляПроверки.НайтиСтроки(Фильтр);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Индекс = ТаблицаДляПроверки.Индекс(НайденнаяСтрока);
					ТекстСообщения = СтрШаблон(ШаблонОперация, Индекс + 1, ТекущийИндекс + 1);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , СтрШаблон(ПолеОперация, Индекс), ,Отказ);
					НайденнаяСтрока.Проверено = Истина;
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти