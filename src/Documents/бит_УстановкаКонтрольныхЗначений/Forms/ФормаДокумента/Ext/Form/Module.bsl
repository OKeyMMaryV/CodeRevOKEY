
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте
Перем мТекущийВидСравнения; // Служит для передачи вида сравнения между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ВосстановитьНастройкиПостроителя(Параметры.ЗначениеКопирования.ПолучитьОбъект());		
	Иначе
		ВосстановитьНастройкиПостроителя(РеквизитФормыВЗначение("Объект"));
	КонецЕсли;  
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ТекущийВидОперации = Объект.ВидОперации;
	
	ЗаполнитьКэшЗначений();
	
	// Отображение разрезов бюджетирования в табличном поле "Настройки заполнения".
	ОтобразитьРазрезыБюджетирования();
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	бит_МеханизмПолученияДанных.УстановитьОформлениеТаблицыОтбор(УсловноеОформление);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьРазрезыБюджетирования();
	
	// Сохранение отбора построителя
	СтруктураНастройки = Новый Структура;
	
	МассивОтбор = Новый Массив;
	Для каждого СтрокаОтбор Из ТаблицаОтбор Цикл
	
		 ЭлементОтбора = бит_МеханизмПолученияДанных.ЭлементОтбора();
		 
		 ЗаполнитьЗначенияСвойств(ЭлементОтбора, СтрокаОтбор);
		 МассивОтбор.Добавить(ЭлементОтбора);
		 
	КонецЦикла; 
	
	СтруктураНастройки.Вставить("Отбор", МассивОтбор);	
	
	ТекущийОбъект.СохранитьНастройкиПостроителя(СтруктураНастройки);

КонецПроцедуры // ПередЗаписьюНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбратьПериодЗавершение" И Источник = УникальныйИдентификатор Тогда	
		
		РедактированиеПериодаЗавершение(Параметр.Результат, Неопределено);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_УстановкаКонтрольныхЗначений";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры
  
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОтклоненияПриИзменении(Элемент)
	
	ИзменениеВидаОтклоненияСервер("ВидОтклонения", "ЗначениеОтклонения");
	
КонецПроцедуры // ВидОтклоненияПриИзменении()

&НаКлиенте
Процедура ВидОтклоненияКоличествоПриИзменении(Элемент)
	
	ИзменениеВидаОтклоненияСервер("ВидОтклоненияКоличество", "ЗначениеОтклоненияКоличество");
	
КонецПроцедуры // ВидОтклоненияКоличествоПриИзменении()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации
	КонецЕсли; 
	
	// Если операция не поменялась, то выходим.
	Если ТекущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВидОперации = Объект.ВидОперации;

	ИзменениеВидаОперации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыастройкаЗаполнения

&НаКлиенте
Процедура НастройкаЗаполненияИспользоватьРазрезПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкаЗаполнения.ТекущиеДанные;
	Объект[ТекущиеДанные.ИмяРеквизита] = ТекущиеДанные.ИспользоватьРазрез; 
	
	Модифицированность = Истина;
	
КонецПроцедуры // НастройкаЗаполненияИспользоватьРазрезПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОтбор

&НаКлиенте
Процедура ТаблицаОтборПриИзменении(Элемент)
	
	ТаблицаОтборКоличество = КоличествоСтрокОтбора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТаблицаОтборПредставление Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;	
		ТекущиеДанные.Использование  = Истина;  
		ТекущиеДанные.ВидСравнения   = фКэшЗначений.ВидСравненияРавно; 

		СтрПар = Новый Структура("ТекстЗапроса", ТекстЗапроса);
		бит_мпд_Клиент.ОткрытьФормуПолейПостроителя(ТекущиеДанные, "ТаблицаОтбор", "ПутьКДанным", "Отбор", "", СтрПар);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И Не Копирование Тогда

		ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;		

		Если Копирование Тогда
			ТекущиеДанные.ПутьКДанным = "";
		Иначе
			ТекущиеДанные.Использование  = Истина;  
			ТекущиеДанные.ВидСравнения   = фКэшЗначений.ВидСравненияРавно; 
		КонецЕсли; 	

		СтрПар = Новый Структура("ТекстЗапроса", ТекстЗапроса);
		бит_мпд_Клиент.ОткрытьФормуПолейПостроителя(ТекущиеДанные, "ТаблицаОтбор", "ПутьКДанным", "Отбор", "", СтрПар);

	КонецЕсли; 
	
КонецПроцедуры // ТаблицаОтборПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	
	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор());

	Элемент.СписокВыбора.Очистить();
	Для каждого Эл Из СписокВидов Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборВидСравненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;

	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
		ТекущиеДанные.ВидСравнения = ВыбранноеЗначение;
	    ИзменениеВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);		
	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	ИзменениеВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);
	
КонецПроцедуры // ТаблицаОтборВидСравненияПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;	
	бит_мпд_Клиент.ТаблицаОтборЗначениеНачалоВыбора(ЭтаФорма
												, ТекущиеДанные
												, Элемент
												, ДанныеВыбора
												, СтандартнаяОбработка);
                                               	
КонецПроцедуры // ТаблицаОтборЗначениеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;	
	бит_мпд_Клиент.ТаблицаОтборЗначениеОчистка(ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТаблицаОтборЗначениеОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаНастройкиПериода(Команда)
	
	//бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериодаПоДатам(Объект, ЭтаФорма);
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.ДатаНачала);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);
	
КонецПроцедуры // КомандаНастройкиПериода()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	фКэшЗначений.Вставить("СборкаFДоступна",  бит_ЛицензированиеБФCервер.СборкаДоступна("УУ"));
	
	фКэшЗначений.Вставить("ВидСравненияРавно", ВидСравнения.Равно);
	
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	
	КэшПеречислений = Новый Структура;
	КэшПеречислений.Вставить("бит_ВидыОперацийУстановкаКонтрольныхЗначений", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречислений);
	      
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьВидимостьДоступность(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ЗначениеОтклонения.Доступность 		  = ЗначениеЗаполнено(Объект.ВидОтклонения);
	Элементы.ЗначениеОтклоненияКоличество.Доступность = ЗначениеЗаполнено(Объект.ВидОтклоненияКоличество);
	
	ЭтоКонтрольБюджета = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольБюджета");
	Элементы.СценарийКонтролируемый.Доступность = ЭтоКонтрольБюджета;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиПостроителя(ТекущийОбъект)
	
	Построитель = Новый ПостроительОтчета;	
	НастройкиОтбора = ТекущийОбъект.ПолучитьНастройкиПостроителя(); 
	ТекущийОбъект.ИнициализироватьПостроительОтчета(Построитель);
	ТекстЗапроса = Построитель.Текст;
	
	Если НастройкиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтарыйВариантНастроек = ТипЗнч(НастройкиОтбора) = Тип("НастройкиПостроителяОтчета");
	Если Не ЭтоСтарыйВариантНастроек И Не (ТипЗнч(НастройкиОтбора) = Тип("Структура")) Тогда
		Возврат;
	КонецЕсли;
	 	 	
	// Старый формат хранения настроек - для совместимости версий.
	Если ЭтоСтарыйВариантНастроек Тогда
		Построитель.УстановитьНастройки(НастройкиОтбора, Истина, Ложь, Истина, Истина);
		Для каждого ЭО Из Построитель.Отбор Цикл
			СтрокаОтбор = ТаблицаОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтбор, ЭО);
		КонецЦикла; 
	Иначе
		Если НастройкиОтбора.Свойство("Отбор") Тогда
			Для каждого ЭлементОтбора Из НастройкиОтбора.Отбор Цикл
				СтрокаОтбор = ТаблицаОтбор.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтбор, ЭлементОтбора);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	ТаблицаОтборКоличество = КоличествоСтрокОтбора(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольЗаявок
		ИЛИ Объект.ВидОперации = Перечисления.бит_ВидыОперацийУстановкаКонтрольныхЗначений.КонтрольГрафиковДоговоров Тогда
	
		Объект.СценарийКонтролируемый = Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования()].ПустаяСсылка();
	КонецЕсли; 
	
	// Установить видимость реквизитов по виду операции.
	УстановитьВидимостьДоступность(ЭтотОбъект);

КонецПроцедуры // ИзменениеВидаОперации()

&НаСервере
Процедура ИзменениеВидаОтклоненияСервер(ИмяВидаОтклонения, ИмяЗначенияОтклонения) 

	Если Объект[ИмяВидаОтклонения] = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное Тогда
		
		Если ИмяВидаОтклонения = "ВидОтклоненияКоличество" Тогда
			КвалификаторыЧисла = Новый КвалификаторыЧисла(15,3, ДопустимыйЗнак.Любой);
		Иначе	
			КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Любой);
		КонецЕсли; 
		
		Элементы[ИмяЗначенияОтклонения].ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
		
		Объект[ИмяЗначенияОтклонения] = Элементы[ИмяЗначенияОтклонения].ОграничениеТипа.ПривестиЗначение(Объект.ЗначениеОтклонения);
		
	ИначеЕсли Объект[ИмяВидаОтклонения] = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент Тогда
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Любой);
		Элементы[ИмяЗначенияОтклонения].ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
		
		Объект[ИмяЗначенияОтклонения] = Элементы[ИмяЗначенияОтклонения].ОграничениеТипа.ПривестиЗначение(Объект.ЗначениеОтклонения);
		
		Если Объект[ИмяЗначенияОтклонения] > 100 Тогда
			Объект[ИмяЗначенияОтклонения] = 100;
		ИначеЕсли Объект[ИмяЗначенияОтклонения] < -100 Тогда
			Объект[ИмяЗначенияОтклонения] = -100;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект[ИмяВидаОтклонения]) Тогда
		Объект[ИмяЗначенияОтклонения] = 0;
	КонецЕсли;
	
	// Доступность значений отклонений
	Если ИмяВидаОтклонения = "ВидОтклонения" Тогда
		Элементы.ЗначениеОтклонения.Доступность 		  = ЗначениеЗаполнено(Объект.ВидОтклонения);
	Иначе	
		Элементы.ЗначениеОтклоненияКоличество.Доступность = ЗначениеЗаполнено(Объект.ВидОтклоненияКоличество);
	КонецЕсли; 

КонецПроцедуры // ИзменениеВидаОтклоненияСервер()

&НаСервере
Процедура ИзменениеВидаСравнения(ИдСтроки, ПредВидСравнения)
	
	ТекущиеДанные = ТаблицаОтбор.НайтиПоИдентификатору(ИдСтроки); 	
	бит_МеханизмПолученияДанных.ИзменениеВидаСравнения(ТекущиеДанные, ПредВидСравнения);
		
КонецПроцедуры // ИзменениеВидаСравнения()

&НаСервере
Функция СформироватьСписокВыбораВидаСравнения(ИдСтроки)
	
	ТекущиеДанные = ТаблицаОтбор.НайтиПоИдентификатору(ИдСтроки);
	СписокВидов = бит_МеханизмПолученияДанных.СписокВыбораВидаСравнения(ТекущиеДанные);
	
    Возврат СписокВидов;
	
КонецФункции // СформироватьСписокВыбораВидаСравнения()
        
&НаСервере 
Процедура ОтобразитьРазрезыБюджетирования()

	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все", "синоним", , МассивИсключений);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Для каждого КлючИЗначение Из Измерения Цикл
		
		ИмяРеквизита = "НЗ_" + КлючИЗначение.Ключ;
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита, МетаданныеОбъекта) Тогда
			
			НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
			
			ТекущаяНастройка = НастройкиИзмерений[КлючИЗначение.Ключ];
			Если Найти(ВРег(КлючИЗначение.Ключ), "АНАЛИТИКА") > 0 Тогда
				Если НЕ ТекущаяНастройка = Неопределено Тогда
					НоваяСтрока                    = НастройкаЗаполнения.Добавить();
					НоваяСтрока.ИмяРеквизита       = ИмяРеквизита;
					НоваяСтрока.ИспользоватьРазрез = Объект[ИмяРеквизита];
					НоваяСтрока.Измерение          = ТекущаяНастройка.Синоним;
				КонецЕсли; 				
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока                    = НастройкаЗаполнения.Добавить();
			НоваяСтрока.ИмяРеквизита       = ИмяРеквизита;
			НоваяСтрока.ИспользоватьРазрез = Объект[ИмяРеквизита];
			НоваяСтрока.Измерение          = КлючИЗначение.Значение;
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьРазрезыБюджетирования()
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	Для каждого СтрокаТаблицы Из НастройкаЗаполнения Цикл
		ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита, МетаданныеОбъекта) Тогда
			Если Объект[ИмяРеквизита] <> СтрокаТаблицы.ИспользоватьРазрез Тогда
				Объект[ИмяРеквизита] = СтрокаТаблицы.ИспользоватьРазрез;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте 
Процедура РедактированиеПериодаЗавершение(ПериодРезультат, ДополнительныеДанные)

	Если ПериодРезультат <> Неопределено Тогда
	
		Объект.ДатаНачала    = ПериодРезультат.ДатаНачала;
		Объект.ДатаОкончания = ПериодРезультат.ДатаОкончания;
		
		ЭтотОбъект.Модифицированность = Истина; 		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Если ТаблицаОтбор.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	НастройкиДопИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	НастройкиОснИзмерений = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Все"  , "Синоним");
	
	Для каждого СтрокаТаблицы Из ТаблицаОтбор Цикл
		ЭлементыПути = СтрРазделить(СтрокаТаблицы.ПутьКДанным, ".");
		Если ЭлементыПути.Количество() > 1 Тогда
			Измерение = ЭлементыПути[0];
			ЭлементыПути.Удалить(0);
			СвойстваИзмерения = "." + СтрСоединить(ЭлементыПути, ".");
		Иначе	
			Измерение 		  = СтрокаТаблицы.ПутьКДанным;
			СвойстваИзмерения = "";
		КонецЕсли; 
		
		ОписаниеИзмерения = НастройкиДопИзмерений.Получить(Измерение);
		Если ОписаниеИзмерения <> Неопределено Тогда
			СтрокаТаблицы.Представление = ОписаниеИзмерения.Синоним;
		Иначе
			Если НастройкиОснИзмерений.Свойство(Измерение, ОписаниеИзмерения) Тогда
				СтрокаТаблицы.Представление = ОписаниеИзмерения;
			КонецЕсли; 
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Представление) Тогда
			СтрокаТаблицы.Представление = СтрокаТаблицы.Представление + СвойстваИзмерения;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоСтрокОтбора(Форма)

	Возврат Форма.ТаблицаОтбор.Количество();

КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
