#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура РасчитатьОбщуюСумму() Экспорт
	
	СуммаЗаказа = СодержаниеЗаказа.Итог("Сумма");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	РасчитатьОбщуюСумму();
	
	ДолжностьПриемщика = Приемщик.Должность;
	
	Если СодержаниеЗаказа.Количество() Тогда
		СуммаТЧ = СодержаниеЗаказа[0].Сумма;
		ПредметЗаказаТЧ = СодержаниеЗаказа[0].ПредметЗаказа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияИзЗаказа(ДанныеЗаполнения) Экспорт
	
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	
	// BIT AMerkulov 30102014 ++
	Суффикс 		= ПолучитьМаксимальныйСуффикс();
	Если Суффикс > 99 Тогда
		Номер 			= СокрЛП(ДанныеЗаполнения.Номер) + "-" + Формат(Суффикс,"ЧЦ=3; ЧВН=");		
	Иначе		
		Номер 			= СокрЛП(ДанныеЗаполнения.Номер) + "-" + Формат(Суффикс,"ЧЦ=2; ЧВН=");
	КонецЕсли;
	// BIT AMerkulov 30102014 --
	
	Организация 	= ДанныеЗаполнения.бит_БК_Организация;
	
	ОбщийEmail 		= "buh@okmarket.ru";
	
	Если ДанныеЗаполнения.ОК_РазмерПредоплаты > 0 Тогда
		УсловияОплаты	= "Размер предоплаты: " + ДанныеЗаполнения.ОК_РазмерПредоплаты + "%";
	Иначе
		УсловияОплаты	= "Постоплата";	
	КонецЕсли;
	
	Инициатор		= ДанныеЗаполнения.бит_БК_Инициатор;
	ИнициаторEmail	= Инициатор.Email;
	
	ТЗБДДС = ДанныеЗаполнения.БДДС.Выгрузить();
	
	Если ДанныеЗаполнения.БДДС.Количество() Тогда
		
		Объект = ДанныеЗаполнения.БДДС[0].Аналитика_2;
		
		ТЗБДДС.Сортировать("Период Возр");
		ПериодОказанияУслугиС  = ТЗБДДС[0].Период;
		ТЗБДДС.Сортировать("Период Убыв");
		ПериодОказанияУслугиПо  = КонецМесяца(ТЗБДДС[0].Период);		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		Значение = ПолучитьЗначениеДопСведения(Объект, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Директор (Объект строительства)"));
		Если Значение <> Неопределено Тогда 
			Приемщик = Значение;
		КонецЕсли;
		
		Значение = ПолучитьЗначениеДопСведения(Объект, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Адрес (Объект строительства)"));
		Если Значение <> Неопределено Тогда 
			Адрес = Значение;
		КонецЕсли;
			                                    
	КонецЕсли;
	
	Контрагент = ДанныеЗаполнения.бит_БК_ПредпологаемыйКонтрагент;
	
	Для Каждого Стр Из ДанныеЗаполнения.БДДС Цикл                                                
		
		ДобавленнаяСтрока 					=  СодержаниеЗаказа.Добавить();
		ДобавленнаяСтрока.Объект 			= Стр.Аналитика_2;
		ДобавленнаяСтрока.Период			= Стр.Период;
		ДобавленнаяСтрока.ПредметЗаказа 	= Стр.ОК_НоменклатураПроизв;
		ДобавленнаяСтрока.Количество		= Стр.Количество;
		ДобавленнаяСтрока.ЕдиницаИзмерения 	= Стр.бит_БК_ЕдиницаИзмерения;
		//ДобавленнаяСтрока.СтавкаНДС		 	= Стр.СтавкаНДС;
		ДобавленнаяСтрока.Цена			 	= Стр.бит_БК_ЦенаСНДС;
		ДобавленнаяСтрока.Сумма				= ДобавленнаяСтрока.Количество * ДобавленнаяСтрока.Цена;                                 
		
	КонецЦикла;
	
	РасчитатьОбщуюСумму();	
	                                
КонецПроцедуры

// BIT Amerkulov 30102014 ++		
Функция ПолучитьМаксимальныйСуффикс()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	МАКСИМУМ(ЕСТЬNULL(бит_ЗаказРасходы.Суффикс, 0)) КАК Суффикс
	                      |ИЗ
	                      |	Документ.бит_ЗаказРасходы КАК бит_ЗаказРасходы
	                      |ГДЕ
	                      |	бит_ЗаказРасходы.ДокументОснование = &Основание");
						  
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Суффикс) Тогда
		Возврат Выборка.Суффикс+1;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции
// BIT Amerkulov 30102014 --		

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	КонтрольПревышенияСогласованнойЗаявки(Отказ);
	
	// BIT Amerkulov 30102014 ++		
	СформироватьДвиженияПоЗаявке(СодержаниеЗаказа);
	// BIT Amerkulov 30102014 --		
	
КонецПроцедуры

Процедура КонтрольПревышенияСогласованнойЗаявки(Отказ)
	
	СвернутаяТаблицаЗаказа =  СодержаниеЗаказа.Выгрузить();
	// BIT AMerkulov 30102014 ++
	
//	СвернутаяТаблицаЗаказа.Свернуть("Объект,Период", "Сумма");
	СвернутаяТаблицаЗаказа.Свернуть("Объект", "Сумма");
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	бит_СогласованныеЛимитыПоЗаявкамОстатки.Заявка,
	                      |	бит_СогласованныеЛимитыПоЗаявкамОстатки.Объект,
	                      |	бит_СогласованныеЛимитыПоЗаявкамОстатки.ПериодЗатраты КАК Период,
	                      |	СУММА(бит_СогласованныеЛимитыПоЗаявкамОстатки.СуммаОстаток) КАК Сумма
	                      |ИЗ
	                      |	РегистрНакопления.бит_СогласованныеЛимитыПоЗаявкам.Остатки(&Дата, Заявка = &Заявка) КАК бит_СогласованныеЛимитыПоЗаявкамОстатки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	бит_СогласованныеЛимитыПоЗаявкамОстатки.Объект,
	                      |	бит_СогласованныеЛимитыПоЗаявкамОстатки.ПериодЗатраты,
	                      |	бит_СогласованныеЛимитыПоЗаявкамОстатки.Заявка");
	Запрос.УстановитьПараметр("Заявка", ДокументОснование);
	Запрос.УстановитьПараметр("Дата", Ссылка.МоментВремени());
	
	СвернутаяТаблицаЗаявки = Запрос.Выполнить().Выгрузить();
//	СвернутаяТаблицаЗаявки.Свернуть("Объект,Период", "Сумма");
	СвернутаяТаблицаЗаявки.Свернуть("Объект", "Сумма");
	
	Для Каждого Строка Из СвернутаяТаблицаЗаказа Цикл
		
		Отбор = Новый Структура;
//		Отбор.Вставить("Период", 		Строка.Период);
		Отбор.Вставить("Объект",	 	Строка.Объект);
		НайденныеСтроки = СвернутаяТаблицаЗаявки.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() Тогда
			СуммаЗаявки = НайденныеСтроки[0].Сумма;
		Иначе
			СуммаЗаявки = 0;
		КонецЕсли;
		
		// BIT AMerkulov 22082014 ++
	//	Если Строка.Сумма > СуммаЗаявки Тогда		
		Если Строка.Сумма - СуммаЗаявки > 1 Тогда
		// BIT AMerkulov 22082014 --
		
			Сообщение = Новый СообщениеПользователю;
//			Сообщение.Текст = "Общая сумма "+Строка.Сумма+"  по периоду "+Строка.Период+" для объекта "+Строка.Объект+" превышает согласованный остаток в заявке "+СуммаЗаявки;
			Сообщение.Текст = "Общая сумма "+Строка.Сумма+" для объекта "+Строка.Объект+" превышает согласованный остаток в заявке "+СуммаЗаявки;

			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// BIT AMerkulov 30102014 --
	
КонецПроцедуры

Функция ОтправитьСообщение(НастройкиДоставки,Письмо,Вложение,ПротоколОтправки="") Экспорт
		
	флДействиеВыполнено = Ложь;			
	
	ИПП 					= Новый ИнтернетПочтовыйПрофиль;
	ИПП.АдресСервераSMTP 	= НастройкиДоставки.АдресSMTP;   
	ИПП.ПортSMTP 			= НастройкиДоставки.ПортSMTP;
	//Если НЕ ПустаяСтрока(СокрЛП(НастройкиДоставки.SMTPАутентификация)) Тогда		
	//	ИПП.АутентификацияSMTP 	= СпособSMTPАутентификации[СокрЛП(НастройкиДоставки.SMTPАутентификация)];		
	//КонецЕсли; 
	ИПП.АутентификацияSMTP 	= СпособSMTPАутентификации.Login;			
	ИПП.ПользовательSMTP 	= СтрЗаменить(НастройкиДоставки.ПользовательSMTP,"OKEY\","");
	ИПП.ПарольSMTP 			= НастройкиДоставки.ПарольSMTP;	
	
	Сообщение = Новый ИнтернетПочтовоеСообщение; 
	//Сообщение.Отправитель.Адрес = НастройкиДоставки.ПользовательSMTP;
	Сообщение.ОбратныйАдрес.Добавить(ИнициаторEmail);	
	Сообщение.ИмяОтправителя =  ИнициаторEmail;

	// BIT AMerkulov 24072014 ++
	Сообщение.Отправитель = ИнициаторEmail;
	// BIT AMerkulov 24072014 ++
	
	//Сообщение.ОбратныйАдрес.Добавить(ИнициаторEmail);			
	Сообщение.Получатели.Добавить(EmailКонтактногоЛица);
	
	Если ЗначениеЗаполнено(ИнициаторEmail) Тогда
		Сообщение.Копии.Добавить(ИнициаторEmail);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Приемщик.Email) Тогда
		Сообщение.Копии.Добавить(Приемщик.Email);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбщийEmail) Тогда
		Сообщение.Копии.Добавить(ОбщийEmail);
	КонецЕсли;
	
	Сообщение.Тема = "Новый заказ " + Номер; 
	Сообщение.Тексты.Добавить(Письмо,ТипТекстаПочтовогоСообщения.HTML); 
	Сообщение.ОбработатьТексты();
	
	имяФайлаСвложением = КаталогВременныхФайлов() + "Заказ_на_расход.html";				
	Вложение.Записать(имяФайлаСвложением,ТипФайлаТабличногоДокумента.HTML4);
	Сообщение.Вложения.Добавить(имяФайлаСвложением);
	
	// Подключимся и отправим сформированное сообщение
	Попытка
		
		Почта = Новый ИнтернетПочта; 
		Почта.Подключиться(ИПП); 
		Почта.Послать(Сообщение); 
		флДействиеВыполнено = Истина;
		ПротоколОтправки    = "Сообщение отправлено по адресу "
		+EmailКонтактногоЛица
		+"  "
		+ТекущаяДата()
		+".";
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.бит_ИсторияОтправкиЭлектронныхПисемПоЗаказам.СоздатьМенеджерЗаписи();
		НаборЗаписей.Заказ 					=	 Ссылка;
		НаборЗаписей.ДатаОтправки 			= ТекущаяДатаСеанса();
		НаборЗаписей.EmailКонтактногоЛица 	= EmailКонтактногоЛица;
		НаборЗаписей.Инициатор				= Ссылка.Инициатор;
		НаборЗаписей.ОбщийEmail				= ОбщийEmail;
		
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		
	Исключение
		
		флДействиеВыполнено = Ложь;
		ПротоколОтправки    = "Сообщение  не удалось отправить по адресу "
		+EmailКонтактногоЛица
		+"  "
		+ТекущаяДата()
		+" по причине "
		+ОписаниеОшибки()
		+".";
		
		
	КонецПопытки;
	
	Почта.Отключиться(); 
	
	
	Возврат ПротоколОтправки;
	
КонецФункции

// BIT Amerkulov 15122014 ++		
Процедура УстановитьЦОДНаСервере() Экспорт
	
	Если Контрагент.бит_Федеральный Тогда
		ОбъектЦОД = Справочники.ОбъектыСтроительства.НайтиПоНаименованию("204 ФО СПб");			
	Иначе
		
		СписокОбъектов = СодержаниеЗаказа.Выгрузить();
		СписокОбъектов = СписокОбъектов.ВыгрузитьКолонку("Объект");
		
		ТаблицаРезультата = ПолучитьЗначениеДопСведения(СписокОбъектов, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Город (Объект строительства)"), , Истина);
		
		Если ТаблицаРезультата.Количество() > 1 Или СписокОбъектов.Количество() > 1 Тогда
			ОбъектЦОД = Справочники.ОбъектыСтроительства.НайтиПоНаименованию("204 ФО СПб");
		ИначеЕсли  ТаблицаРезультата.Количество() = 1 Тогда
			
			Город 	= ТаблицаРезультата[0].Значение;	
						
			ФорматСМ 	= Перечисления.бит_БК_ФорматОбъекта.СМ;
			ФорматГМ	= Перечисления.бит_БК_ФорматОбъекта.ГМ;
			
			
			Если СодержаниеЗаказа.Количество() И СписокОбъектов.Количество() = 1 Тогда
				
				Если ПроверитьТип(СодержаниеЗаказа[0].Объект.Ссылка, ФорматГМ) ИЛИ ПроверитьТип(СодержаниеЗаказа[0].Объект.Ссылка, ФорматСМ) Тогда
					ОбъектЦОД = СодержаниеЗаказа[0].Объект;					
				Иначе
					ОбъектЦОД = Справочники.ОбъектыСтроительства.НайтиПоНаименованию("204 ФО СПб");				
				КонецЕсли;
				
				
			КонецЕсли;
			
			
			
			
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	УстановитьАдресОбъектаЦОД();



КонецПроцедуры
// BIT Amerkulov 15122014 --		

// BIT AMerkulov 03112014 ++
Функция ПроверитьТип(ОбъектПроверки, ПроверяемыйТип)
	
	Возврат Документы.бит_ЗаказРасходы.ПроверитьТип(ОбъектПроверки, ПроверяемыйТип);
	
КонецФункции
// BIT AMerkulov 03112014 --

Функция ОбъектГМ(ОбъектПроверки)
		
	Значение = ПолучитьЗначениеДопСведения(ОбъектПроверки, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Формат объекта (Объект строительства)"), Перечисления.бит_БК_ФорматОбъекта.ГМ);
	
	Возврат ?(Значение = Неопределено, Ложь, Истина);
	
КонецФункции

Процедура УстановитьАдресОбъектаЦОД()
	
	Значение = ПолучитьЗначениеДопСведения(ОбъектЦОД.Ссылка, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Адрес (Объект строительства)"));
	
	Если Значение <> Неопределено Тогда
		АдресОбъекта = Значение;
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьОбъектПоФормату(Город,Формат)
	
	Возврат Документы.бит_ЗаказРасходы.ПолучитьОбъектПоФормату(Город, Формат);
	
КонецФункции

Процедура УстановитьАдресОбъектаПриемки() Экспорт
	
	Значение = ПолучитьЗначениеДопСведения(Объект, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Адрес (Объект строительства)"));
	
	Если Значение <> Неопределено Тогда
		Адрес = Значение;
	КонецЕсли;
	
КонецПроцедуры

// BIT Amerkulov 30102014 ++	
Процедура СформироватьДвиженияПоЗаявке(ТаблицаБДДС)
	
	ТаблицаДвижений = Движения.бит_СогласованныеЛимитыПоЗаявкам;
	
	Для Каждого Стр Из ТаблицаБДДС Цикл
		
		СтрокаДвижения 					= ТаблицаДвижений.ДобавитьРасход(); 
		СтрокаДвижения.Заявка 			= ДокументОснование; 
		СтрокаДвижения.Объект 			= Стр.Объект; 
		СтрокаДвижения.ПериодЗатраты 	= Стр.Период; 
		СтрокаДвижения.Период			= Дата;
		СтрокаДвижения.Сумма			= Стр.Сумма;
		                           
	КонецЦикла;
	
	ТаблицаДвижений.Записывать = Истина;
	
КонецПроцедуры	
// BIT Amerkulov 30102014 --

Функция ПолучитьЗначениеДопСведения(Объекты, Свойство, Значение = Неопределено, фВернутьТаблицу = Ложь)
	
	Возврат Документы.бит_ЗаказРасходы.ПолучитьЗначениеДопСведения(Объекты, Свойство, Значение, фВернутьТаблицу);
	
КонецФункции

#КонецЕсли