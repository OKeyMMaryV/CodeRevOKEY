
&НаКлиенте
Процедура СодержаниеЗаказаСуммаПриИзменении(Элемент)
	
	РасчитатьОбщуюСумму();  
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеЗаказаКоличествоПриИзменении(Элемент)
	ПересчитатьСуммы("Количество");
КонецПроцедуры

&НаКлиенте   
Процедура ПересчитатьСуммы(ТочкаВхода)
  	ПересчитатьСуммыПоСтроке(ТочкаВхода,этаформа.Элементы.СодержаниеЗаказа.ТекущиеДанные.НомерСтроки-1);
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьСуммыПоСтроке(ТочкаВхода,БДДС_ТекущиеДанные_НомерСтроки_МинусОдин)  
	
	ТекСтрока = Объект.СодержаниеЗаказа[БДДС_ТекущиеДанные_НомерСтроки_МинусОдин];
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;

КонецПроцедуры 

&НаКлиенте
Процедура СодержаниеЗаказаЦенаПриИзменении(Элемент)
	ПересчитатьСуммы("Цена");
КонецПроцедуры

&НаКлиенте
Процедура РазбитьПоОбъекткам(Команда)
	
	Если Модифицированность ИЛИ ЭтоНовый() Тогда
		ПоказатьПредупреждение(Неопределено, "Запишите документ перед разбивкой!");
		Возврат;
	КонецЕсли;
	
	// BIT AMerkulov 30102014 ++
	//Если Объект.Суффикс <> 1 Тогда
	//	Предупреждение("Этот документ уже был разбит по объектам ранее!");
	//	Возврат;
	//КонецЕсли;
	// BIT AMerkulov 30102014 --
	
	 МассивСсылок = РазбитьНаСервере();
	 Для Каждого Стр Из МассивСсылок Цикл
		ПоказатьЗначение(Неопределено, Стр);
	 КонецЦикла;
	 	 
	 РасчитатьОбщуюСумму(); 
	 
	 Записать();
	 
КонецПроцедуры

&НаСервере
Функция РазбитьНаСервере()
	
	Таблица = Объект.СодержаниеЗаказа.Выгрузить();
	
	МассивОбъектов = Таблица.ВыгрузитьКолонку("Объект");
	МассивСсылок = Новый Массив;                                                     
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОбъектов);
	
	Если МассивОбъектов.Количество() Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Объект", МассивОбъектов[0]);
		
		НайденныеСтроки = Объект.СодержаниеЗаказа.НайтиСтроки(СтруктураОтбора);		
		Объект.СодержаниеЗаказа.Очистить();
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			ДобавленнаяСтрока = Объект.СодержаниеЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,Строка);
			
		КонецЦикла;		
		МассивОбъектов.Удалить(0);
		
		УстановитьЦОДНаСервере();		

	КонецЕсли;
	
	//BIT AMerkulov 10-06-2015 ++
	й=Объект.Суффикс;
	//BIT AMerkulov 10-06-2015 --
	
	Для Каждого СтрокаМассива Из МассивОбъектов Цикл
		й = й+1;
		
		ОбъектЗаказ = Объект.Ссылка.Скопировать();
		ОбъектЗаказ.Объект = СтрокаМассива.Ссылка;
		ОбъектЗаказ.Суффикс = й;
		ОбъектЗаказ.Дата = ТекущаяДатаСеанса();
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-04 (#2873)
		//ОбъектЗаказ.Номер 	= Лев(Объект.Номер,9) + "-" + Формат(ОбъектЗаказ.Суффикс,"ЧЦ=2; ЧВН=");
		//Заменено на:
		ОбъектЗаказ.Номер 	= Лев(Объект.Номер,9) + "-" 
								+ Формат(ОбъектЗаказ.Суффикс,"ЧЦ="+?(ОбъектЗаказ.Суффикс<100,2,3)+"; ЧВН=");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-04 (#2873)
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Объект",  СтрокаМассива.Ссылка);
		
		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураОтбора);		
		ОбъектЗаказ.СодержаниеЗаказа.Очистить();	
		Для Каждого Строка Из НайденныеСтроки Цикл		
			ДобавленнаяСтрока = ОбъектЗаказ.СодержаниеЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока,Строка);			
		КонецЦикла;				
		
		ОбъектЗаказ.УстановитьЦОДНаСервере();		
		ОбъектЗаказ.УстановитьАдресОбъектаПриемки();
		
		ОбъектЗаказ.Записать();
		
		МассивСсылок.Добавить(ОбъектЗаказ.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаКлиенте
Функция ЭтоНовый()

	Возврат НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура РасчитатьОбщуюСумму() 
	
	Объект.СуммаЗаказа = Объект.СодержаниеЗаказа.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИмейлИнициатора() 
	
	Объект.ИнициаторEmail	= ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Инициатор, "Email");
	
КонецПроцедуры

// BIT AMerkulov 16092014 ++
&НаКлиенте
Процедура ИзменитьТелефонПриемщика() 
	
	Объект.ПриемщикТелефон = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Приемщик, "Телефон");
	
КонецПроцедуры
// BIT AMerkulov 16092014 ++

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("Ссылка") И ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Об = РеквизитФормыВЗначение("Объект");
		Об.ОбработкаЗаполненияИзЗаказа(Параметры.Ссылка);
		ЗначениеВРеквизитФормы(Об, "Объект");
	КонецЕсли;
	
	// BIT AMerkulov 16092014 ++
	Если Не ЗначениеЗаполнено(Объект.ПриемщикТелефон) Тогда
		Объект.ПриемщикТелефон = Объект.Приемщик.Телефон;
	КонецЕсли;
	// BIT AMerkulov 16092014 ++
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВыборПечатнойФормы = "Форма с ценами";	
	УстановитьДоступностьКнопкиОтправки();
КонецПроцедуры

&НаКлиенте
Процедура Декорация10Нажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.ДокументОснование);	
		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	ФормаСтруктурыПодчиненности = ПолучитьФорму("ОбщаяФорма.бит_ФормаСтруктурыПодчиненностиТонкийКлиент");
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	ФормаСтруктурыПодчиненности.ДокументСсылка = Объект.Ссылка;
	ФормаСтруктурыПодчиненности.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЦОДПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ОбъектЦОД) Тогда
		УстановитьАдресОбъектаЦОД();
	КонецЕсли;
	
	УстановитьДоступностьКнопкиОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектЦОД) Тогда
		УстановитьАдресОбъектаПриемки();
	КонецЕсли;

	УстановитьДоступностьКнопкиОтправки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресОбъектаЦОД()
	
	Значение = Документы.бит_ЗаказРасходы.ПолучитьЗначениеДопСведения(Объект.ОбъектЦОД, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Адрес (Объект строительства)"));
	
	Если Значение <> Неопределено Тогда
		Объект.АдресОбъекта = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресОбъектаПриемки()
	
	Значение = Документы.бит_ЗаказРасходы.ПолучитьЗначениеДопСведения(Объект.Объект, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Адрес (Объект строительства)"));
	
	Если Значение <> Неопределено Тогда
		Объект.Адрес = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	УстановитьЦОДНаСервере();
	УстановитьДанныеПоКонтрагенту();
	УстановитьДоступностьКнопкиОтправки();
КонецПроцедуры

&НаСервере
Процедура УстановитьЦОДНаСервере()
	
	Если Объект.Контрагент.бит_Федеральный Тогда
		Объект.ОбъектЦОД = Справочники.ОбъектыСтроительства.НайтиПоНаименованию("204 ФО СПб");
	Иначе
		
		СписокОбъектов = Объект.СодержаниеЗаказа.Выгрузить();
		СписокОбъектов = СписокОбъектов.ВыгрузитьКолонку("Объект");
		
		ТаблицаРезультата = Документы.бит_ЗаказРасходы.ПолучитьЗначениеДопСведения(СписокОбъектов, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Город (Объект строительства)"), , Истина);
		
		Если ТаблицаРезультата.Количество() > 1 Или СписокОбъектов.Количество() > 1 Тогда
			Объект.ОбъектЦОД = Справочники.ОбъектыСтроительства.НайтиПоНаименованию("204 ФО СПб");
		ИначеЕсли  ТаблицаРезультата.Количество() = 1 Тогда
			
			Город 	= ТаблицаРезультата[0].Значение;	
			
			// BIT AMerkulov 03112014 ++
			
			ФорматСМ 	= Перечисления.бит_БК_ФорматОбъекта.СМ;
			ФорматГМ	= Перечисления.бит_БК_ФорматОбъекта.ГМ;
			
			
			//Если Объект.СодержаниеЗаказа.Количество() Тогда
			//	Если ОбъектГМ(Объект.СодержаниеЗаказа[0].Объект.Ссылка) Тогда
			//		Объект.ОбъектЦОД = Объект.СодержаниеЗаказа[0].Объект;
			//	Иначе
			//		Объект.ОбъектЦОД =  ПолучитьОбъектПоФормату(Город,ФорматГО);
			//	КонецЕсли;	
			//	
			//Иначе
			//	Объект.ОбъектЦОД = ПолучитьОбъектПоФормату(Город,ФорматГО);
			//КонецЕсли;
			//
			
			Если Объект.СодержаниеЗаказа.Количество() И СписокОбъектов.Количество() = 1 Тогда
				
				Если ПроверитьТип(Объект.СодержаниеЗаказа[0].Объект.Ссылка, ФорматГМ) ИЛИ ПроверитьТип(Объект.СодержаниеЗаказа[0].Объект.Ссылка, ФорматСМ) Тогда
					Объект.ОбъектЦОД = Объект.СодержаниеЗаказа[0].Объект;					
				Иначе
					Объект.ОбъектЦОД = Справочники.ОбъектыСтроительства.НайтиПоНаименованию("204 ФО СПб");				
				КонецЕсли;
				
				
			КонецЕсли;
			
			// BIT AMerkulov 03112014 --
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьАдресОбъектаЦОД();

КонецПроцедуры

// BIT AMerkulov 03112014 ++
&НаСервере
Функция ПроверитьТип(ОбъектПроверки, ПроверяемыйТип)
		
	Возврат Документы.бит_ЗаказРасходы.ПроверитьТип(ОбъектПроверки, ПроверяемыйТип);
	
КонецФункции
// BIT AMerkulov 03112014 --

&НаСервере
Функция ПолучитьОбъектПоФормату(Город,Формат)
	
	Возврат Документы.бит_ЗаказРасходы.ПолучитьОбъектПоФормату(Город, Формат);
	
КонецФункции

&НаСервере
Процедура УстановитьДанныеПоКонтрагенту()
	
	Сведения  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Контрагент,  Объект.Дата);
    Объект.АдресКонтрагента = Сведения.ФактическийАдрес;
	
	Объект.КонтактноеЛицо = Объект.Контрагент.ОсновноеКонтактноеЛицо;
	
	СтруктураОтбора = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
	мРезультат = Объект.КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
	
	Если мРезультат.Количество()<>0 Тогда
		Объект.ТелефонКонтактногоЛица = мРезультат[0].Представление;	
	КонецЕсли;
	
	//izhtc alena 02.10.2015(
	//Объект.EmailКонтактногоЛица = Объект.КонтактноеЛицо.битEmail;
	СтруктураОтбора = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица);
	мРезультат = Объект.КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
	
	Если мРезультат.Количество()<>0 Тогда
		Объект.EmailКонтактногоЛица = мРезультат[0].Представление;	
	КонецЕсли;
	//izhtc alena 02.10.2015)
			
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоКонтактномуЛицу()
	
	// БИТ_YK_н #2233 02/16
	// Сначала очистим поля на случай если у нового контактного лица нет конт. информации.
	Объект.EmailКонтактногоЛица   = "";
	Объект.ТелефонКонтактногоЛица = "";
	// БИТ_YK_к
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		СтруктураОтбора = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
		мРезультат = Объект.КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если мРезультат.Количество()<>0 Тогда
			Объект.ТелефонКонтактногоЛица = мРезультат[0].Представление;	
		КонецЕсли;
		
		//izhtc alena 02.10.2015(
		//Объект.EmailКонтактногоЛица = Объект.КонтактноеЛицо.битEmail;
		СтруктураОтбора = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица);
		мРезультат = Объект.КонтактноеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если мРезультат.Количество()<>0 Тогда
			Объект.EmailКонтактногоЛица = мРезультат[0].Представление;	
		КонецЕсли;
		//izhtc alena 02.10.2015)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	УстановитьДоступностьКнопкиОтправки();
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	УстановитьДанныеПоКонтактномуЛицу();	
	УстановитьДоступностьКнопкиОтправки();
КонецПроцедуры

&НаКлиенте
Процедура EmailКонтактногоЛицаПриИзменении(Элемент)
	УстановитьДоступностьКнопкиОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ОбщийEmailПриИзменении(Элемент)
	УстановитьДоступностьКнопкиОтправки();
КонецПроцедуры

&НаКлиенте
Процедура АдресОбъектаПриИзменении(Элемент)
	УстановитьДоступностьКнопкиОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ПриемщикПриИзменении(Элемент)
	УстановитьДоступностьКнопкиОтправки();
	// BIT AMerkulov 16092014 ++
	ИзменитьТелефонПриемщика();
	// BIT AMerkulov 16092014 ++
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПриИзменении(Элемент)
	ИзменитьИмейлИнициатора();
КонецПроцедуры

///////////////////////////////////////////////////////
// ОТПРАВКА КОНТРАГЕНТУ
&НаКлиенте
Процедура УстановитьДоступностьКнопкиОтправки()

	Если НЕ ЗначениеЗаполнено(Объект.Инициатор) 
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.ИнициаторEmail)
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.Объект)
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.Адрес)	
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.EmailКонтактногоЛица)	
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.Приемщик)	
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.ОбъектЦОД)	
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.АдресОбъекта)	
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.ОбщийEmail)
	ИЛИ  НЕ ЗначениеЗаполнено(Объект.Контрагент)		
		Тогда
		
		Элементы.ОтправитьКонтрагенту.Доступность = Ложь;		
	Иначе
		Элементы.ОтправитьКонтрагенту.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКонтрагенту(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.EmailКонтактногоЛица) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите e-mail контрагента для отправки письма!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если Не Объект.Проведен Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Проведите заказ перед отправкой!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	НастройкиДоставки = Новый Структура;
	бит_БК_Общий.ЗаполнитьНастройкиДоставки(НастройкиДоставки);
		
	ПолучитьДанныеАутентификацииSMTP(Объект.Инициатор, НастройкиДоставки);
	
	Если НЕ ПодключениеКСерверуSMTP(НастройкиДоставки) Тогда 
		ПараметрыАутентификацииПользователя = ПолучитьПараметрыАутентификацииПользователя();
		Если ПараметрыАутентификацииПользователя = неопределено Тогда 
			Возврат;
		КонецЕсли;
		НастройкиДоставки.ПарольSMTP = ПараметрыАутентификацииПользователя.ПарольSMTP;
		СохранитьПарольИнициатора(Объект.Инициатор, НастройкиДоставки.ПарольSMTP);
	КонецЕсли;	

	РезультатОтправки = ОтправитьКонтрагентуНаСервере(ВыборПечатнойФормы, НастройкиДоставки);

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = РезультатОтправки;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыАутентификацииПользователя() 
	СтруктураПараметров = ОткрытьФормуМодально("Документ.бит_ЗаказРасходы.Форма.ОкноАутентификацииSMTP");
	Если СтруктураПараметров = Неопределено Тогда 
		Возврат Неопределено;
	иначе
		Возврат СтруктураПараметров;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеАутентификацииSMTP(Инициатор, НастройкиДоставки)
	
	НастройкиДоставки.ПользовательSMTP 	= Инициатор.DomainName;
	НастройкиДоставки.ПарольSMTP		= Инициатор.DomainPassword;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПарольИнициатора(Инициатор, Пароль)
	
	Попытка
		ИнициаторОбъект	= Инициатор.ПолучитьОбъект();
		ИнициаторОбъект.DomainPassword = Пароль;
		ИнициаторОбъект.Записать();
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьКонтрагентуНаСервере(ВыборПечатнойФормы, НастройкиДоставки)
	
	ТабличныйДокументВложение 	= СформироватьТабличныйДокумент(ВыборПечатнойФормы);
	ТабличныйДокументТекст		= СформироватьТабличныйДокументДляПисьма(ВыборПечатнойФормы);
	
	имяФайлаСвложением = КаталогВременныхФайлов()+"tmp.html";				
	ТабличныйДокументТекст.Записать(имяФайлаСвложением,ТипФайлаТабличногоДокумента.HTML4);

	Чтение = Новый ЧтениеТекста(имяФайлаСвложением);
	Текст = Чтение.Прочитать();
			 
	Возврат РеквизитФормыВЗначение("Объект").ОтправитьСообщение(НастройкиДоставки, Текст, ТабличныйДокументВложение);
	
КонецФункции

&НаСервере
Функция СформироватьТабличныйДокумент(ВыборПечатнойФормы)
	
	ОбъектИсточникДанных = РеквизитФормыВЗначение("Объект");		
	
	Если ВыборПечатнойФормы = "Форма с ценами" Тогда
		Макет = ОбъектИсточникДанных.ПолучитьМакет("ПФ1");
	Иначе
		Макет = ОбъектИсточникДанных.ПолучитьМакет("ПФ2");		
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.Заполнить(ОбъектИсточникДанных);
	
	ОбластьШапки.Параметры.ИнициаторДолжность 	= Объект.Инициатор.Должность;
	ОбластьШапки.Параметры.ИнициаторПочта	 	= Объект.ИнициаторEmail;
	ОбластьШапки.Параметры.ИнициаторТелефон 	= Объект.Инициатор.Телефон;
		
	ОбластьШапки.Параметры.ПриемщикДолжность 	= Объект.Приемщик.Должность;
	ОбластьШапки.Параметры.ПриемщикПочта	 	= Объект.Приемщик.Email;
	ОбластьШапки.Параметры.ПриемщикТелефон		= Объект.ПриемщикТелефон;	
	
	ТабДок.Вывести(ОбластьШапки);
	
	Для Каждого Строка Из ОбъектИсточникДанных.СодержаниеЗаказа Цикл
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		ОбластьСтроки.Параметры.Заполнить(Строка);
		ОбластьСтроки.Параметры.Период = Формат(Строка.Период,"ДФ=""ММММ гггг""");
		
		ТабДок.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДок;
	
КонецФункции

 &НаСервере
Функция СформироватьТабличныйДокументДляПисьма(ВыборПечатнойФормы)
	
	ОбъектИсточникДанных = РеквизитФормыВЗначение("Объект");		
	
	Если ВыборПечатнойФормы = "Форма с ценами" Тогда
		Макет = ОбъектИсточникДанных.ПолучитьМакет("Письмо");
	Иначе
		Макет = ОбъектИсточникДанных.ПолучитьМакет("ПисьмоБезСумм");		
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапки.Параметры.Заполнить(ОбъектИсточникДанных);
	
	ТабДок.Вывести(ОбластьШапки);
	
	ВыводитьИмяСтроки = Истина;
	
	Для Каждого Строка Из ОбъектИсточникДанных.СодержаниеЗаказа Цикл
		ОбластьСтроки = Макет.ПолучитьОбласть("СоставЗаказа");
		
		Если ВыводитьИмяСтроки Тогда
			ОбластьСтроки.Параметры.ПредметЗаказаИмя = "Предмет заказа";
			ВыводитьИмяСтроки = Ложь;
		КонецЕсли;	
        
		ОбластьСтроки.Параметры.ПредметЗаказа = Строка.ПредметЗаказа;
		
		ТабДок.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвала.Параметры.ПериодОказанияУслуги = "С " + Формат(ОбъектИсточникДанных.ПериодОказанияУслугиС,"ДФ=dd.MM.yyyy")  + " по " + Формат(ОбъектИсточникДанных.ПериодОказанияУслугиПо,"ДФ=dd.MM.yyyy");
	ОбластьПодвала.Параметры.Заполнить(ОбъектИсточникДанных);
	
	ТабДок.Вывести(ОбластьПодвала);
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ПодключениеКСерверуSMTP(НастройкиДоставки)
	 флДействиеВыполнено = Ложь;
	 
	// сформируем почтовый профиль
	ИПП 					= Новый ИнтернетПочтовыйПрофиль;
	ИПП.АдресСервераSMTP 	= НастройкиДоставки.АдресSMTP;   
	ИПП.ПортSMTP 			= НастройкиДоставки.ПортSMTP;
		
	ИПП.АутентификацияSMTP 	= СпособSMTPАутентификации.Login;
		
	ИПП.ПользовательSMTP 	= СтрЗаменить(НастройкиДоставки.ПользовательSMTP,"OKEY\","");
	ИПП.ПарольSMTP 			= НастройкиДоставки.ПарольSMTP;
	
	// Подключимся
	Попытка
		
		Почта = Новый ИнтернетПочта; 
		Почта.Подключиться(ИПП); 
		
		флДействиеВыполнено = Истина;
		
	Исключение
		
		флДействиеВыполнено = Ложь;
		
	КонецПопытки;
	
	Почта.Отключиться(); 

	Возврат флДействиеВыполнено;
КонецФункции // ПодключениеКСерверуSMTP()

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("ОК_КонтрагентБК",Истина));		
	ОткрытьФорму("Справочник.Контрагенты.Форма.битФормаВыбораУправляемая", ПараметрыФормы, Элемент); 
	
КонецПроцедуры

// BIT Amerkulov 26082014 ++
&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) тогда
		лимит=50;
		Список=СписокКонтрагентовНаСервере(Текст,лимит+1);
		Если Список.Количество()>лимит тогда
			ПоказатьПредупреждение(Неопределено, "Найденно более "+Строка(Лимит)+" элементов!"+Символы.ПС+"Задайте более длинную строку или воспользуйтесь кнопкой выбора."); 
			Возврат;    		
		ИначеЕсли Список.Количество()>0 тогда		
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("КонтрагентОкончаниеВводаТекстаЗавершение", ЭтотОбъект), Список,Элемент);		
		КонецЕсли;	
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекстаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ВыбранныйЭлемент;
    Если не ВыбранноеЗначение=Неопределено тогда
        Объект.Контрагент=ВыбранноеЗначение.Значение;   			
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокКонтрагентовНаСервере(Наименование,лимит)
	рез=Новый СписокЗначений;
	Запрос=новый Запрос;
	Запрос.Текст="ВЫБРАТЬ первые $$лимит$$
	             |	Контрагенты.Ссылка.Ссылка КАК Ссылка				 
	             |ИЗ
	             |	Справочник.Контрагенты КАК Контрагенты
	             |ГДЕ
	             |	Контрагенты.Наименование ПОДОБНО ""%"" + &Наименование + ""%""
				 | И Контрагенты.ОК_КонтрагентБК
				| ";
	Запрос.УстановитьПараметр("Наименование",Наименование);	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"$$лимит$$",лимит);
	результатЗапроса=Запрос.Выполнить();
	Если НЕ результатЗапроса.Пустой() тогда
		рез.ЗагрузитьЗначения(результатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));				 	
	КонецЕсли;
	
	Возврат рез;
КонецФункции

// BIT Amerkulov 26082014 --


// + БИТ AMerkulov 2015-04-22 
&НаКлиенте
Процедура СписокФайловДляОтправляемогоПисьмаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
		Имя = СтрЗаменить(ДиалогОткрытияФайла.ПолноеИмяФайла, ДиалогОткрытияФайла.Каталог, "");
		СписокФайловДляОтправляемогоПисьмаПередНачаломДобавленияНаСервере(ДвоичныеДанные,Имя);
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере 
Процедура СписокФайловДляОтправляемогоПисьмаПередНачаломДобавленияНаСервере(Данные,Имя)
	 ХранилищеЭлемент = Справочники.бит_ХранилищеДополнительнойИнформации.СоздатьЭлемент();
	 ХранилищеЭлемент.Хранилище = Новый ХранилищеЗначения(Данные);
	 ХранилищеЭлемент.ИмяФайла = Имя;
	 ХранилищеЭлемент.Записать();
	 
	 Строка = СписокФайловДляОтправляемогоПисьма.Добавить();
	 Строка.ИмяФайла 	= Имя;
	 Строка.Адрес		= ХранилищеЭлемент.Ссылка;
	 
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ПередЗакрытиемНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПередЗакрытиемНаСервере()
	
	Для Каждого Строка Из СписокФайловДляОтправляемогоПисьма Цикл
		УстановитьПривилегированныйРежим(Истина);		
		ОбъектХранилище = Строка.Адрес.ПолучитьОбъект();
		ОбъектХранилище.Удалить();
		УстановитьПривилегированныйРежим(Ложь);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьНастройкиВложениями(НастройкиДоставки)
	
	МассивИменВложений 		= Новый Массив;	
	МассивСсылокВложений	= Новый Массив;	
	Для Каждого Строка Из СписокФайловДляОтправляемогоПисьма Цикл
		МассивИменВложений.Добавить(Строка.ИмяФайла);
		МассивСсылокВложений.Добавить(Строка.Адрес);
	КонецЦикла;
	
	НастройкиДоставки.Вставить("МассивИменВложений",МассивИменВложений);
	НастройкиДоставки.Вставить("МассивСсылокВложений",МассивСсылокВложений);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловДляОтправляемогоПисьмаПередУдалением(Элемент, Отказ)
	СписокФайловДляОтправляемогоПисьмаПередУдалениемНаСервере(Элемент.ТекущиеДанные.Адрес);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокФайловДляОтправляемогоПисьмаПередУдалениемНаСервере(Файл)
	Если ЗначениеЗаполнено(Файл) Тогда
		ОбъектХранилище = Файл.ПолучитьОбъект();
		ОбъектХранилище.Удалить();		
	КонецЕсли;
КонецПроцедуры

// - БИТ AMerkulov 2015-04-22 

