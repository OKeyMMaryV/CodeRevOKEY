#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
		ЗаполнитьПоЗаявке(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
		
	ТаблицаОстатков = бит_Казначейство.ПолучитьОстаткиПоСтрокамРаспределения(ДокументОснование, Документы.бит_ПлатежнаяПозиция.ПустаяСсылка());
	КоличествоСтрок = Распределение.Количество();
	Для й = 1 по КоличествоСтрок Цикл
		СтрокаТаблицы = Распределение[КоличествоСтрок-й];
		СтрокаОстаток = ТаблицаОстатков.Найти(СтрокаТаблицы.ИД,"ИД");
		Если СтрокаОстаток <> Неопределено Тогда
			СтрокаТаблицы.Сумма = Мин(СтрокаТаблицы.Сумма,СтрокаОстаток.Сумма);
			РассчитатьСуммуНДС(СтрокаТаблицы);	
		Иначе
			Распределение.Удалить(СтрокаТаблицы);
		КонецЕсли; 
	КонецЦикла; 

	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// +СБ. Широков Николай. 2014-10-05. Оптимизация
	Если ДополнительныеСвойства.Свойство("НеВыполнятьДополнительныеДействияПриОтменеПроведения") Тогда
		Возврат;	
	КонецЕсли;
	// -СБ. Широков Николай
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	бит_Визирование.ЗаполнитьТекущийСтатус(ЭтотОбъект);
	
	ВидОперации    = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ВидОперации");
	ОперацияБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС().Найти(ВидОперации) <> Неопределено;
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-20 (#3618)
	//Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога Тогда
	//	ПеречислениеВБюджет = Истина;
	//КонецЕсли;
	Если Ссылка.Пустая() Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-20 (#3618)
	Если ДокументОснование.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога 
		//ОКЕЙ Щербакова С.В. (СофтЛаб) Начало 2019-10-29 (#3437)
		ИЛИ (ЗначениеЗаполнено(Контрагент) и Контрагент.ГосударственныйОрган = Истина)
		//ОКЕЙ Щербакова С.В. (СофтЛаб) Конец 2019-10-29 (#3437)
		Тогда
		ПеречислениеВБюджет = Истина;
		// BF-2922. Возможно устаревшие данные. 
		// В случае возникновения проблем необходимо обратиться к аналитику.
		//ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-20 (#3618)
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-20 (#3618)
	
	Если ОперацияБезНДС Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		НДС		  = 0;
		НДСРегл	  = 0;
		НДСУпр	  = 0;
		Для каждого СтрокаТаблицы Из Распределение Цикл
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаТаблицы.НДС		= 0;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		ПересчитатьСуммы();
	КонецЕсли;
	
	Если ПеречислениеВБюджет Тогда
		ИдентификаторПлатежа = "";	
	Иначе	
	    УИН = "";
	КонецЕсли;
	
	// +СБ. Широков Николай. 2014-10-02. ТЗ "Казначейство" 2.2.2.8. 
	НеОсущесвтлятьПроверку = Отказ 
		ИЛИ ЭтоНовый() 
		ИЛИ ДополнительныеСвойства.Свойство("НеОсуществлятьПроверкуИзмененияДатыРасходы");
	
	Если Не НеОсущесвтлятьПроверку Тогда
		
		Заявка_ДатаРасхода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ДатаРасхода");
		
		Если ДатаРасхода <> Заявка_ДатаРасхода Тогда
			СБ_ПользовательИзменилДатуРасхода = Пользователи.ТекущийПользователь();	
		КонецЕсли; 
		
	КонецЕсли; 
	// -СБ. Широков Николай 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	Если ПеречислениеВБюджет Тогда
		
		Если ЗначениеЗаполнено(ДокументОснование)
			И ЗначениеЗаполнено(ДокументОснование.ДоговорКонтрагента) Тогда
			
			ДокументОснование_ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
			
			Если ЗначениеЗаполнено(ДокументОснование_ДоговорКонтрагента.ок_КБК) 
				И КодБК <> ДокументОснование_ДоговорКонтрагента.ок_КБК Тогда
				КодБК = ДокументОснование_ДоговорКонтрагента.ок_КБК;
			ИначеЕсли НЕ ЗначениеЗаполнено(КодБК) Тогда
				КодБК = "0";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОснование_ДоговорКонтрагента.ок_УИН)
				И УИН <> ДокументОснование_ДоговорКонтрагента.ок_УИН Тогда
				УИН = ДокументОснование_ДоговорКонтрагента.ок_УИН;
			ИначеЕсли НЕ ЗначениеЗаполнено(УИН) Тогда
				УИН = "0";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументОснование_ДоговорКонтрагента.ок_КодОКТМО) 
				И КодОКАТО <> ДокументОснование_ДоговорКонтрагента.ок_КодОКТМО Тогда
				КодОКАТО = ДокументОснование_ДоговорКонтрагента.ок_КодОКТМО;
			ИначеЕсли НЕ ЗначениеЗаполнено(КодОКАТО) Тогда
				КодОКАТО = "0";
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	 
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	ПроверитьЗаполнение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, 
									"ПроверитьЗаполнение", Истина);
	
	Если ПроверитьЗаполнение Тогда
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	// Сбросим флаг, что бы при повторном программном проведении, вызвать проверку. См. ОбработкаПроверкиЗаполнения().
	ДополнительныеСвойства.Вставить("ПроверитьЗаполнение", Истина);

	РеквизитыДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	РеквизитыОснования = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-03-31 (#НТП_БП12_ФР01)
	#Область ТиповойКод
	//КурсыВалютДокумента = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Дата, Новый Структура("Документ,Упр,Регл"));
	//КурсыВалютЗаявки    = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ДокументОснование, Дата, Новый Структура("Документ,Упр,Регл"));
	//КурсВзаиморасчетов  = бит_КурсыВалют.ПолучитьКурсВзаиморасчетовПоДокументу(ДокументОснование,ДокументОснование.Метаданные(),Дата);
	#КонецОбласти
	// Изменена дата получения курсво с "Дата" на "ДатаРасхода"
	КурсыВалютДокумента = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, ДатаРасхода, Новый Структура("Документ,Упр,Регл"));
	КурсыВалютЗаявки    = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ДокументОснование, ДатаРасхода, Новый Структура("Документ,Упр,Регл"));
	КурсВзаиморасчетов  = бит_КурсыВалют.ПолучитьКурсВзаиморасчетовПоДокументу(ДокументОснование,ДокументОснование.Метаданные(),ДатаРасхода);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-03-31 (#НТП_БП12_ФР01)
	
	КурсыВалютДокумента.Вставить("Взаиморасчеты", КурсВзаиморасчетов);
	КурсыВалютЗаявки.Вставить("Взаиморасчеты", КурсВзаиморасчетов);
	
	РеквизитыДокумента.Вставить("КурсыВалют", КурсыВалютДокумента);
	РеквизитыОснования.Вставить("КурсыВалют", КурсыВалютЗаявки);

	ТаблицаРасход = ПодготовитьТаблицуПланируемыйРасход();
	
	// Выполним движения
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(РеквизитыДокумента,РеквизитыОснования,КурсыВалютДокумента,ТаблицаРасход,Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// +СБ. Широков Николай. 2014-10-05. Оптимизация
	Если ДополнительныеСвойства.Свойство("НеВыполнятьДополнительныеДействияПриОтменеПроведения") Тогда
		бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
		Возврат;	
	КонецЕсли;
	// -СБ. Широков Николай
	
	// Проверим допустимость отмены проведения 
	ТекущийСтатус = ДополнительныеСвойства.ТекущийСтатус;
	Если ТекущийСтатус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта   Тогда
		ТекстСообщения = СтрШаблон(НСтр("en = 'Документ в статусе ""%1"".';
								   	 |ru = 'Документ в статусе ""%1"".'"), ТекущийСтатус);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// +СБ. Широков Николай. 2014-10-05. Оптимизация
	Если ДополнительныеСвойства.Свойство("НеВыполнятьДополнительныеДействияПриОтменеПроведения") Тогда
		Возврат;
	КонецЕсли;
	// -СБ. Широков Николай
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		УстановитьСтатус();
	КонецЕсли; 

КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	РеквизитыОснования = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	
	ПроверкаРеквизитов(РеквизитыОснования, ПроверяемыеРеквизиты, Отказ);

	ДополнительныеСвойства.Вставить("ПроверитьЗаполнение", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выполняет пересчет сумм документа в разные валюты.
// 
Процедура ПересчитатьСуммы() Экспорт

	Сумма = Распределение.Итог("Сумма");
	НДС   = Распределение.Итог("НДС");
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-03-31 (#НТП_БП12_ФР01)
	#Область ТиповойКод
	//СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Регл,Упр"));
	#КонецОбласти
	// Изменена дата получения курсво с "Дата" на "ДатаРасхода"
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,ДатаРасхода,Новый Структура("Документ,Регл,Упр"));
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-03-31 (#НТП_БП12_ФР01)
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("НДС");
	
	бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(ЭтотОбъект,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);

	// Для вывода структуры подчиненности
	СуммаДокумента = Сумма;
	
КонецПроцедуры // ПересчитатьСуммы()

// Процедура расчитывает суммму НДС.
// 
// 
Процедура РассчитатьСуммуНДС(Контейнер) Экспорт

	Если Контейнер = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Контейнер.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
												,Истина
												,СуммаВключаетНДС
												,бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС));
																							
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура устанавливает статус документа.
// 
// Параметры:
// 	Нет.
// 
Процедура УстановитьСтатус() Экспорт
	
	Если НЕ ДополнительныеСвойства.Свойство("ТекущийСтатус") Тогда
		бит_Визирование.ЗаполнитьТекущийСтатус(ЭтотОбъект);	
	КонецЕсли;
	
	ТекущийСтатус = ДополнительныеСвойства.ТекущийСтатус;
	Если ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта Тогда
		НовыйСтатус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Рабочая;
		бит_Визирование.ИзменитьСтатусОбъекта(ЭтотОбъект, Перечисления.бит_ВидыСтатусовОбъектов.Статус,
			НовыйСтатус, ТекущийСтатус, Пользователи.ТекущийПользователь(), ТекущаяДатаСеанса()); 
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает список статусов отправителя п/п на перечисление в бюджет.
// 
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с возможными значениями статуса отправителя.
// 
Функция ПолучитьСписокСтатусовОтправителя() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Список.Добавить("02", "02 - налоговый агент");
	Список.Добавить("03", "03 - организация федеральной почтовой связи, оформившая расчетный документ на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами");
	Список.Добавить("04", "04 - налоговый орган");
	Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Список.Добавить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо");
	Список.Добавить("07", "07 - таможенный орган");
	Список.Добавить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) - индивидуальный предприниматель");
	Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) - частный нотариус");
	Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) - адвокат, учредивший адвокатский кабинет");
	Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) - глава крестьянского (фермерского) хозяйства");
	Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) - иное физическое лицо - клиент банка (владелец счета)");
	Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
	Список.Добавить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами без открытия банковского счета");
	Список.Добавить("16", "16 - участник внешнеэкономической деятельности - физическое лицо");
	Список.Добавить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель");
	Список.Добавить("18", "18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей");
	Список.Добавить("19", "19 - организации, оформившие расчетный документ на перечисление на счет органа Федерального казначейства денежных средств, удержанных из заработка (дохода) должника - физического лица в счет погашения задолженности по таможенным платежам");
	Список.Добавить("20", "20 - кредитная организация, оформившая расчетный документ по каждому платежу физического лица на перечисление таможенных платежей, уплачиваемых физическими лицами без открытия банковского счета");
	
	// Изменение кода. Начало. 27.12.2016{{
	Если Дата >= '2014-02-04' Тогда
		
		Список = Новый СписокЗначений;
		
		Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
		Список.Добавить("02", "02 - налоговый агент");
		Список.Добавить("03", "03 - организация федеральной почтовой связи, составившая распоряжение по каждому платежу физического лица");
		Список.Добавить("04", "04 - налоговый орган");
		Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
		Список.Добавить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо");
		Список.Добавить("07", "07 - таможенный орган");
		Список.Добавить("08", "08 - юридическое лицо (индивидуальный предприниматель), уплачивающее страховые взносы и иные платежи");
		Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) - индивидуальный предприниматель");
		Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) - частный нотариус");
		Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) - адвокат, учредивший адвокатский кабинет");
		Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) - глава крестьянского (фермерского) хозяйства");
		Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) - иное физическое лицо - клиент банка (владелец счета)");
		Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам");
		Список.Добавить("15", "15 - кредитная организация (филиал кредитной организации), платежный агент, организация федеральной почтовой связи, составившие платежное поручение на общую сумму с реестром");
		Список.Добавить("16", "16 - участник внешнеэкономической деятельности - физическое лицо");
		Список.Добавить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель");
		Список.Добавить("18", "18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей");
		Список.Добавить("19", "19 - организации, переводящие средства, удержанные из заработной платы на основании исполнительного документа");
		Список.Добавить("20", "20 - кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение по каждому платежу физического лица");
		Список.Добавить("21", "21 - ответственный участник консолидированной группы налогоплательщиков");
		Список.Добавить("22", "22 - участник консолидированной группы налогоплательщиков");
		Список.Добавить("23", "23 - органы контроля за уплатой страховых взносов");
		Список.Добавить("24", "24 - физическое лицо, уплачивающее страховые взносы и иные платежи");
		Список.Добавить("25", "25 - банки - гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации за плательщика суммы налога на добавленную стоимость, излишне полученной им (зачтенной ему) в результате возмещения налога на добавленную стоимость в заявительном порядке, а также по уплате акцизов, исчисленных по операциям реализации подакцизных товаров за пределы территории Российской Федерации, и акцизов в размере авансового платежа акцизов по алкогольной и (или) подакцизной спиртосодержащей продукции");
		Список.Добавить("26", "26 - учредители (участники) должника, собственники имущества должника - унитарного предприятия или третьи лица, составившие распоряжение на погашение задолженности по обязательным платежам, включенным в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве");
		
	КонецЕсли;
	// Изменение кода. Конец. 27.12.2016}}
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокСтатусовОтправителя()

// Возвращает список показателей основания п/п на перечисление в бюджет налогового платежа.
// 
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с возможными значениями основания.
// 
Функция ПолучитьСписокОснованийНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - платежи текущего года");
	Список.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим налоговым периодам");
	Список.Добавить("БФ","БФ - текущие платежи физических лиц - клиентов банка (владельцев счета), уплачиваемые со своего банковского счета");
	Список.Добавить("ТР", "ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа");
	Список.Добавить("РС", "РС - погашение рассроченной задолженности");
	Список.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	Список.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	Список.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	Список.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	Список.Добавить("АП", "АП - погашение задолженности по акту проверки");
	Список.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийНалоговогоПлатежа()

// Возвращает список показателей основания п/п на перечисление в бюджет таможенного платежа.
// 
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с возможными значениями основания.
// 
Функция ПолучитьСписокОснованийТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ДЕ", "ДЕ - таможенная декларация");
	Список.Добавить("ПО", "ПО - таможенный приходный ордер");
	Список.Добавить("КВ", "КВ - постановление-квитанция (при уплате штрафа)");
	Список.Добавить("КТ", "КТ - форма корректировки таможенной стоимости и таможенных платежей");
	Список.Добавить("ИД", "ИД - исполнительный документ");
	Список.Добавить("ИП", "ИП - инкассовое поручение");
	Список.Добавить("ТУ", "ТУ - требование об уплате таможенных платежей");
	Список.Добавить("БД", "БД - документы бухгалтерских служб таможенных органов");
	Список.Добавить("ИН", "ИН - документ инкассации");
	Список.Добавить("КП", "КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийТаможенногоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет налогового платежа.
// 
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с возможными значениями типа.
// 
Функция ПолучитьСписокПоказателейТипаНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ПЕ", "ПЕ - уплата пени");
	Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	
	Если ДатаРасхода < Дата("20140402") Тогда
	
		Список.Добавить("НС", "НС - уплата налога или сбора");
		Список.Добавить("ПЛ", "ПЛ - уплата платежа");
		Список.Добавить("ГП", "ГП - уплата пошлины");
		Список.Добавить("ВЗ", "ВЗ - уплата взноса");
		Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
		Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
		Список.Добавить("АШ", "АШ - административные штрафы");
		Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
	
	КонецЕсли; 
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаНалоговогоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет таможенного платежа.
// 
// Возвращаемое значение:
//  СписокЗначений - в котором создаются элементы с возможными значениями типа.
// 
Функция ПолучитьСписокПоказателейТипаТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - текущий платеж");
	Список.Добавить("ШТ", "ШТ - уплата штрафа");
	Список.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаТаможенногоПлатежа()

// Процедура заполняет реквизиты платежа в бюджет значениями по умолчанию.
// 
// Параметры:
//  УстановитьРеквизитыПоказателяПериода - Булево, по умолчанию Ложь - Возвращаемый.
// 
Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию(УстановитьРеквизитыПоказателяПериода = Ложь) Экспорт

	Если ПеречислениеВБюджет Тогда
	
		РегистрацияВНО = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(Организация, КПППлательщика);
		Если ЗначениеЗаполнено(РегистрацияВНО) Тогда
			КодТерритории  = Справочники.РегистрацииВНалоговомОргане.КодТерритории(РегистрацияВНО, Дата);
			Если ЗначениеЗаполнено(КодТерритории) Тогда
				ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, Дата);
				КодОКАТО = КодТерритории;
			КонецЕсли;
		КонецЕсли; 

		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
			СписокПоказателейОснования = ПолучитьСписокОснованийНалоговогоПлатежа();
			СписокПоказателейТипа	   = ПолучитьСписокПоказателейТипаНалоговогоПлатежа();
			
			СтатусСоставителя   = ?(бит_ОбщегоНазначения.ОрганизацияЯвляетсяЮрЛицом(Организация), "01", "09");
			ПоказательОснования = СписокПоказателейОснования[0].Значение;
			ПоказательТипа      = СписокПоказателейТипа.НайтиПоЗначению("0").Значение;
			ПоказательПериода   = "МС." + Формат(Месяц(Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(Дата), "ЧГ=");
			
			УстановитьРеквизитыПоказателяПериода = Истина;
			
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			
			СписокПоказателейОснования = ПолучитьСписокОснованийТаможенногоПлатежа();
			СписокПоказателейТипа	   = ПолучитьСписокПоказателейТипаТаможенногоПлатежа();
			
			СтатусСоставителя   = ?(бит_ОбщегоНазначения.ОрганизацияЯвляетсяЮрЛицом(Организация), "06", "17");
			ПоказательОснования = СписокПоказателейОснования[0].Значение;
			ПоказательТипа      = СписокПоказателейТипа[0].Значение;
			ПоказательПериода   = "0";
			ПоказательНомера    = "0";
			
		Иначе
			
			СтатусСоставителя   = "08";
			ПоказательОснования = "0";
			ПоказательТипа      = "0";
			ПоказательПериода   = "0";
			ПоказательНомера    = "0";
			
		КонецЕсли;
	
	Иначе
		
		КодБК               = "";
		КодОКАТО            = "";
		СтатусСоставителя   = "";
		ПоказательОснования = "";
		ПоказательТипа      = "";
		ПоказательПериода   = "";
		ПоказательНомера    = "";
		ПоказательДаты      = "";
		
	КонецЕсли;

КонецПроцедуры

// Процедура актуализирует курсы заявки на текущую дату. 
//
Процедура АктуализироватьПоКурсам() Экспорт 

	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РеквизитыДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	РеквизитыОснования = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-03-31 (#НТП_БП12_ФР01)
	#Область ТиповойКод
	//КурсыВалютДокумента = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Дата, Новый Структура("Документ,Упр,Регл"));
	//КурсыВалютЗаявки    = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ДокументОснование, Дата, Новый Структура("Документ,Упр,Регл"));
	//КурсВзаиморасчетов  = бит_КурсыВалют.ПолучитьКурсВзаиморасчетовПоДокументу(ДокументОснование,ДокументОснование.Метаданные(),Дата);
	#КонецОбласти
	// Изменена дата получения курсво с "Дата" на "ДатаРасхода"
	КурсыВалютДокумента = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, ДатаРасхода, Новый Структура("Документ,Упр,Регл"));
	КурсыВалютЗаявки    = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ДокументОснование, ДатаРасхода, Новый Структура("Документ,Упр,Регл"));
	КурсВзаиморасчетов  = бит_КурсыВалют.ПолучитьКурсВзаиморасчетовПоДокументу(ДокументОснование,ДокументОснование.Метаданные(),ДатаРасхода);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-03-31 (#НТП_БП12_ФР01)
	
	КурсыВалютДокумента.Вставить("Взаиморасчеты", КурсВзаиморасчетов);
	КурсыВалютЗаявки.Вставить("Взаиморасчеты", КурсВзаиморасчетов);
	
	РеквизитыДокумента.Вставить("КурсыВалют", КурсыВалютДокумента);
	РеквизитыОснования.Вставить("КурсыВалют", КурсыВалютЗаявки);
	
	ТаблицаРасход = ПодготовитьТаблицуПланируемыйРасход();
	
	ДвиженияПоРегистрам(РеквизитыДокумента,РеквизитыОснования, КурсыВалютДокумента, ТаблицаРасход, Ложь, Заголовок);

	Движения.бит_ПланируемыйРасходДенежныхСредств.Записать();
	
КонецПроцедуры // АктуализироватьПоКурсам() 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли; 

	ВидОперацииОснование = бит_ОбщегоНазначения.ПолучитьЗначениеРеквизитаОбъекта(ДокументОснование, "ВидОперации");
	ЭтоНалоги = (ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога
					ИЛИ ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц);
	
	Если НЕ ЗначениеЗаполнено(ОчередностьПлатежа) Тогда
		Если ТекущаяДатаСеанса() >= '20131214' Тогда
			ОчередностьПлатежа = 5;
		Иначе 
			ОчередностьПлатежа = 6;
		КонецЕсли;
	Иначе
		Если ТекущаяДатаСеанса() >= '20131214' И ОчередностьПлатежа = 6 Тогда
			ОчередностьПлатежа = 5;
		КонецЕсли;
	КонецЕсли; 
	
	//ОКЕЙ Щербакова С.В. (СофтЛаб) Начало 2019-10-29 (#3437)
	//Если ОбъектКопирования = Неопределено И ЭтоНалоги Тогда
	Если ОбъектКопирования = Неопределено И ЭтоНалоги
		ИЛИ (ЗначениеЗаполнено(Контрагент) и Контрагент.ГосударственныйОрган = Истина)
		Тогда
	//ОКЕЙ Щербакова С.В. (СофтЛаб) Конец 2019-10-29 (#3437)
		ПеречислениеВБюджет = Истина;
		УстановитьВидПлатежаВБюджет();
		ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(СпособПогашенияЗадолженности) Тогда
		СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	КонецЕсли;
		
	Если Распределение.Количество() > 0 Тогда
		СтавкаНДС = Распределение[0].СтавкаНДС;
	КонецЕсли; 
	
	Сумма = Распределение.Итог("Сумма");
	НДС   = Распределение.Итог("НДС"); 
	
	// ВАЖНО. "НазначениеПлатежа" заполнять после вычисления сумм и заполнения счетов.
	Если ОбъектКопирования <> Неопределено И НЕ ПустаяСтрока(ОбъектКопирования.НазначениеПлатежа) Тогда	
		НазначениеПлатежа = ОбъектКопирования.НазначениеПлатежа;
	КонецЕсли; 
	
	Документы.бит_ПлатежнаяПозиция.СформироватьНазначениеПлатежа(ЭтотОбъект, НазначениеПлатежа);
	
	Ответственный = Пользователи.ТекущийПользователь();

	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, Ответственный, ОбъектКопирования);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявке(Заявка)

	СвойстваЗаявки = Новый Массив; 
	СвойстваЗаявки.Добавить("ЦФО");
	СвойстваЗаявки.Добавить("Организация");
	СвойстваЗаявки.Добавить("Контрагент");
	СвойстваЗаявки.Добавить("ДатаРасхода");
	СвойстваЗаявки.Добавить("ДатаПлатежаКрайняя");
	СвойстваЗаявки.Добавить("ФизическоеЛицо");
	СвойстваЗаявки.Добавить("ВалютаДокумента");
	СвойстваЗаявки.Добавить("КурсДокумента");
	СвойстваЗаявки.Добавить("КратностьДокумента");
	СвойстваЗаявки.Добавить("Важность");
	СвойстваЗаявки.Добавить("СуммаВключаетНДС");
	СвойстваЗаявки.Добавить("ВидОперации");
	СвойстваЗаявки.Добавить("Получатель");
	СвойстваЗаявки.Добавить("ФормаОплаты");
	СвойстваЗаявки.Добавить("ДоговорКонтрагента");
	СвойстваЗаявки.Добавить("ДокументОснование");
	СвойстваЗаявки.Добавить("НазначениеПлатежа");
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявка, СвойстваЗаявки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаявки,, "ДокументОснование");
	
	ДокументОснование   = Заявка;
	УсловиеПоКурсу   	= Перечисления.бит_УсловияПоКурсу.ЦБ;
	ТипОснованияПлатежа = Перечисления.бит_ОснованияПлатежа.Счет;
	ТипОплаты        	= Перечисления.бит_ТипыОплатыПлатежнойПозиции.РазовыйПлатеж;
    ОчередностьПлатежа 	= бит_Казначейство.ОпределитьОчередностьПлатежа(РеквизитыЗаявки.ВидОперации, 
											?(ЗначениеЗаполнено(ДатаРасхода), ДатаРасхода, ТекущаяДатаСеанса()));
	ПереключательСчетаФизЛица = Истина;
	КПППлательщика 			  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
	
	Если РеквизитыЗаявки.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц Тогда
		Контрагент = РеквизитыЗаявки.Получатель;
	ИначеЕсли РеквизитыЗаявки.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДивидендов Тогда 
		
	КонецЕсли; 
	
	Если ДатаРасхода < Дата('20120709') Тогда
		ВидПлатежа = "Электронно";
	Иначе
		ВидПлатежа = "";
	КонецЕсли; 
	
	ЭтоБезналичнаяОплата = РеквизитыЗаявки.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	РасчетыВУЕ		     = РеквизитыЗаявки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	ВалютаРеглУчета		 = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Модуль = Документы.бит_ЗаявкаНаРасходованиеСредств;
	ОперацииСФизЛицом = Модуль.ОперацииСФизЛицом();
	
	ПеречислениеФизическомуЛицу = (ОперацииСФизЛицом.Найти(РеквизитыЗаявки.ВидОперации) <> Неопределено);
	
	Если ЭтоБезналичнаяОплата Тогда
		// Банковские счета
		//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-10-28 (#4429)
		//БанковскийСчетОрганизация = бит_Казначейство.ПроверитьБанковскийСчетПоУмолчанию(
		//		Организация.ОсновнойБанковскийСчет, ВалютаДокумента, 
		//		РасчетыВУЕ, Организация);
		//																					
		//Если ЗначениеЗаполнено(РеквизитыЗаявки.ДокументОснование)
		//	И ТипЗнч(РеквизитыЗаявки.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
		//	// Если заявка создана на основании прогноза, то банковский счет возьмем из прогноза.
		//	БанковскийСчетПрогноза = бит_Казначейство.ПроверитьБанковскийСчетПоУмолчанию(
		//		РеквизитыЗаявки.ДокументОснование.БанковскийСчетОрганизации,ВалютаДокумента, РасчетыВУЕ);
		//											
		//	Если ЗначениеЗаполнено(БанковскийСчетПрогноза) Тогда
		//		БанковскийСчетОрганизация = БанковскийСчетПрогноза;
		//	КонецЕсли;
		//КонецЕсли;
		БанковскиеСчетаОрганизации = ОК_ОбщегоНазначения.БанковскиеСчетаОрганизации(Организация, ВалютаДокумента, ДатаРасхода);
		Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
			БанковскийСчетОрганизация = БанковскиеСчетаОрганизации[0].Ссылка;
		КонецЕсли;
		//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-10-28 (#4429)
																						
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(БанковскийСчетОрганизацияПриемник, ОрганизацияПриемник,
			?(РасчетыВУЕ, ВалютаРеглУчета, ВалютаДокумента));																				

		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-01 (#3890)	
		//УчетДенежныхСредствБП.УстановитьБанковскийСчет(БанковскийСчетКонтрагент, Контрагент,
		//	?(РасчетыВУЕ, ВалютаРеглУчета, ВалютаДокумента));
		БанковскийСчетКонтрагент =  Заявка.СБ_БанковскийСчетКонтрагента;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-01 (#3890)			
			
		Если ПеречислениеФизическомуЛицу Тогда
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(БанковскийСчетФизЛица, ФизическоеЛицо,
				?(РасчетыВУЕ, ВалютаРеглУчета, ВалютаДокумента));	
		КонецЕсли;	
	КонецЕсли;																				
		
	ТаблицаОстатков = бит_Казначейство.ПолучитьОстаткиПоСтрокамРаспределения(Заявка, Ссылка);
	Для каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		НоваяСтрока = Распределение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-20 (#3446) //#3842
		Если ТипЗнч(Заявка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда 
			Продолжить;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-20 (#3446) //#3842
		НоваяСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма, Истина,
			РеквизитыЗаявки.СуммаВключаетНДС, бит_БухгалтерияСервер.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС)); 
	КонецЦикла; 
		
	// +СБ. Чеплин Денис. 2016-08-23. Факторинг (#2612)
	//БанковскийСчетКонтрагент = ДанныеЗаполнения.СБ_БанковскийСчетКонтрагента;
	//*Дремов
	Если ЗначениеЗаполнено(Заявка.СБ_БанковскийСчетКонтрагента) и Заявка.ДоговорКонтрагента.бит_НаправлениеДоговора = справочники.бит_НаправленияДоговоров.НайтиПоНаименованию("ФАКТОРИНГ") Тогда
		БанковскийСчетКонтрагент = Заявка.СБ_БанковскийСчетКонтрагента;
	КонецЕсли;
	//*Дремов
	// -СБ. Чеплин Денис 
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-09 (#ТП_БП05_ФР07)
	Если Заявка.ок_СпособСоздания = 11 Тогда  		
		//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-07-14 (#ТП_БП05_ФР07)
		//ПереключательСчетаФизЛица = Истина;
		ПереключательСчетаФизЛица = Ложь;  
		//ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-07-14 (#ТП_БП05_ФР07)		
		Контрагент = Заявка.Получатель;
		БанковскийСчетКонтрагент = Заявка.СБ_БанковскийСчетКонтрагента;
		БанковскийСчетОрганизация = ок_ПолучитьБанковскийСчетОрганизация(Заявка);
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-09 (#ТП_БП05_ФР07)

	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-12 (#3908) // перенос из старого релиза задача #3619 #3534
	Если бит_ОбщегоНазначения.ЕстьРасчетыСПоставщикамиПокупателями(Заявка.ВидОперации) Тогда 
	
		ТипОснованияПлатежа = Перечисления.бит_ОснованияПлатежа.Договор;
		ВидПлатежа 			= "Электронно";
		
		СписокОрганизаций_НеПогашатьЗадолженность = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_НеПогашатьЗадолженность");
		Если СписокОрганизаций_НеПогашатьЗадолженность <> Неопределено
			И СписокОрганизаций_НеПогашатьЗадолженность.НайтиПоЗначению(Организация) <> Неопределено Тогда
			
			СпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
			
		//ОКЕЙ Цветков А. (СофтЛаб) Начало 2019-11-25 (#3534)
		Иначе
			ОснованиеЗаявки = Заявка.ДокументОснование;
			Если ЗначениеЗаполнено(ОснованиеЗаявки) Тогда
				МассивОснований = Новый Массив;
				МассивОснований.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
				МассивОснований.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
				МассивОснований.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-03 (#4017)
				МассивОснований.Добавить(Тип("ДокументСсылка.ПоступлениеДенежныхДокументов"));
				МассивОснований.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
				МассивОснований.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-03 (#4017)
				ТипОснованияЗаявки = ТипЗнч(ОснованиеЗаявки);
				Если Не МассивОснований.Найти(ТипЗнч(ОснованиеЗаявки)) = Неопределено Тогда
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-02-05 (#4017)
					Если НЕ ЗначениеЗаполнено(Сделка) 
						ИЛИ Сделка <> ОснованиеЗаявки Тогда
						Сделка = ОснованиеЗаявки;
					КонецЕсли; 
					//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-02-05 (#4017)
					СпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
				КонецЕсли;
			КонецЕсли;
		//ОКЕЙ Цветков А. (СофтЛаб) Конец 2019-11-25 (#3534)
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-12 (#3908)
	
КонецПроцедуры

Процедура УстановитьВидПлатежаВБюджет()

	Если ПеречислениеВБюджет Тогда
		Если ДокументОснование.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога
			ИЛИ ДокументОснование.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц Тогда
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		Иначе
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
	Иначе
		ВидПеречисленияВБюджет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-09 (#ТП_БП05_ФР07)
Функция ок_ПолучитьБанковскийСчетОрганизация(Заявка)
	БанковскийСчетОрганизация = Справочники.БанковскиеСчета.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_3 КАК Справочник.БанковскиеСчета)) КАК БанковскийСчетОрганизации
	               |ИЗ
	               |	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
				   |ГДЕ
				   |	бит_СоответствияАналитик.ВидСоответствия = &ВидСоответствия
				   |	И бит_СоответствияАналитик.ЛеваяАналитика_1 = &ЛеваяАналитика_1 				   
				   //ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Начало 2021-07-14 (#ТП_БП05_ФР07)			   
				   // |	И бит_СоответствияАналитик.ЛеваяАналитика_2 = &ЛеваяАналитика_2";
				   // Заменено на:
				   |	И бит_СоответствияАналитик.ПраваяАналитика_1 = &ПраваяАналитика_1";				   
				   //ОКЕЙ Дмитриева В.В. (ПервыйБИТ) Конец 2021-07-14 (#ТП_БП05_ФР07)
	Запрос.УстановитьПараметр("ВидСоответствия", Справочники.бит_ВидыСоответствийАналитик.НайтиПоНаименованию("СоответствиеБСч_ПодотчетникаБСч_Организации"));
	Запрос.УстановитьПараметр("ЛеваяАналитика_1",Заявка.Организация);
	Запрос.УстановитьПараметр("ПраваяАналитика_1",Заявка.Получатель);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() Тогда
		Выборка.Следующий();
		БанковскийСчетОрганизация = Выборка.БанковскийСчетОрганизации;
	КонецЕсли;
	возврат БанковскийСчетОрганизация;
КонецФункции
//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-09 (#ТП_БП05_ФР07)
#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

Процедура ПроверкаРеквизитов(Реквизиты, ПроверяемыеРеквизиты, Отказ)

	СтруктураПараметров = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ДокументОснование);
	
	ОперацииБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС();
	ОперацияБезНДС = ОперацииБезНДС.Найти(Реквизиты.ВидОперации) <> Неопределено;

	// Проверим заполнение шапки
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("ДокументОснование");
	
	Если Распределение.Количество() <= 1 Тогда
		ПроверяемыеРеквизиты.Добавить("Сумма");
	КонецЕсли;
	
	Если СтруктураПараметров.КонтрагентОбязателен Тогда
		ПроверяемыеРеквизиты.Добавить("Контрагент");
	КонецЕсли; 
	
	Если бит_ОбщегоНазначения.ЕстьРасчетыСПоставщикамиПокупателями(Реквизиты.ВидОперации) Тогда
		ПроверяемыеРеквизиты.Добавить("СпособПогашенияЗадолженности");
	КонецЕсли;
	
	Если Распределение.Количество() > 1 Тогда
		ПроверяемыеРеквизиты.Добавить("Распределение.Сумма");
		Если НЕ ОперацияБезНДС Тогда
			ПроверяемыеРеквизиты.Добавить("Распределение.СтавкаНДС");
		КонецЕсли; 
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-28 (#4128)
	//Если НЕ ДокументОснование.Проведен Тогда
	Если НЕ ДокументОснование.Проведен 
		И НЕ (ДополнительныеСвойства.Свойство("ок_ДокументОснования_РежимЗаписиДокумента_Проведение")
				И ДополнительныеСвойства.ок_ДокументОснования_РежимЗаписиДокумента_Проведение = Истина) Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-28 (#4128)
		ТекстСообщения = СтрШаблон(НСтр("en = 'Документ основание ""%1"" не проведен.';
								   	 |ru = 'Документ основание ""%1"" не проведен.'"), ДокументОснование); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументОснование", ,Отказ); 		
	КонецЕсли; 
	
КонецПроцедуры

// Функция готовит таблицу по планируемому расходу ДС для проведения.
// 
// 
// Возвращаемое значение:
//   РезТаблица   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуПланируемыйРасход()

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	бит_ПлатежнаяПозицияРаспределение.Сумма,
	                |	бит_ПлатежнаяПозицияРаспределение.СтавкаНДС,
	                |	бит_ПлатежнаяПозицияРаспределение.НДС,
	                |	бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО,
	                |	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов,
	                |	бит_ЗаявкаНаРасходованиеСредствРаспределение.Проект,
	                |	бит_ЗаявкаНаРасходованиеСредствРаспределение.ДоговорКонтрагента,
	                |	бит_ЗаявкаНаРасходованиеСредствРаспределение.НоменклатурнаяГруппа,
					|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_1,
					|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_2,
					|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_3,
					|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_4,
					|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_5,
					|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_6,
					|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_7
	                |ИЗ
	                |	Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	                //БИТ АКриштопов 28022016
					//|		ПО бит_ПлатежнаяПозицияРаспределение.ИД = бит_ЗаявкаНаРасходованиеСредствРаспределение.ИД
	                |		ПО бит_ПлатежнаяПозицияРаспределение.НомерСтроки = бит_ЗаявкаНаРасходованиеСредствРаспределение.НомерСтроки
					//БИТ АКриштопов 28022016
	                |ГДЕ
	                |	бит_ПлатежнаяПозицияРаспределение.Ссылка = &ПлатежнаяПозиция
	                |	И бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка = &Заявка
	                |	И бит_ПлатежнаяПозицияРаспределение.Сумма <> 0";
					
	Запрос.УстановитьПараметр("ПлатежнаяПозиция",Ссылка);
	Запрос.УстановитьПараметр("Заявка",ДокументОснование);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;

КонецФункции // ПодготовитьТаблицуПланируемыйРасхода()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(РеквизитыДокумента, РеквизитыОснования, КурсыВалют, ТаблицаРасход, Отказ, Заголовок)
	
	// Отразим планируемый расход по платежной позиции.
	ТаблицаДвижений = Движения.бит_ПланируемыйРасходДенежныхСредств.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаРасход Из ТаблицаРасход Цикл
		
	    СтрокаДвижений = ТаблицаДвижений.Добавить();
		
		СтрокаДвижений.Организация = РеквизитыДокумента.Организация;
		СтрокаДвижений.Валюта      = РеквизитыДокумента.ВалютаДокумента;
		
		// Банковский счет или касса
		Если ДокументОснование.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные
			И ЗначениеЗаполнено(РеквизитыДокумента.БанковскийСчетОрганизация) Тогда
			СтрокаДвижений.БанковскийСчет       = РеквизитыДокумента.БанковскийСчетОрганизация;
		ИначеЕсли ДокументОснование.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные
			И ЗначениеЗаполнено(РеквизитыДокумента.Касса) Тогда
		    СтрокаДвижений.БанковскийСчет       = РеквизитыДокумента.Касса;		
		КонецЕсли;                                                              			
		
		СтрокаДвижений.ВидДенежныхСредств   = РеквизитыОснования.ФормаОплаты;
		СтрокаДвижений.Контрагент           = РеквизитыОснования.Контрагент;
		
		СтрокаДвижений.СтатьяОборотов       = СтрокаРасход.СтатьяОборотов;
		СтрокаДвижений.Проект               = СтрокаРасход.Проект;
		СтрокаДвижений.ЦФО                  = СтрокаРасход.ЦФО;
		СтрокаДвижений.НоменклатурнаяГруппа = СтрокаРасход.НоменклатурнаяГруппа;	
		СтрокаДвижений.ДоговорКонтрагента   = СтрокаРасход.ДоговорКонтрагента;
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		Для н = 1 По МаксКолвоДопАналитик Цикл
			СтрокаДвижений["Аналитика_"+н]	= СтрокаРасход["Аналитика_"+н];
		КонецЦикла;
		
		СтрокаДвижений.ДокументПланирования = РеквизитыДокумента.Ссылка;
		
		СтрокаДвижений.Сумма = СтрокаРасход.Сумма; 
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений, ИменаРеквизитов, КурсыВалют, КурсыВалют.Документ);
		
	КонецЦикла; 
	
	Движения.бит_ПланируемыйРасходДенежныхСредств.мПериод          = РеквизитыДокумента.ДатаРасхода;
	Движения.бит_ПланируемыйРасходДенежныхСредств.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ПланируемыйРасходДенежныхСредств.ВыполнитьПриход();
	
	// Снимем данную сумму с заявки
	ТаблицаДвижений = Движения.бит_ПланируемыйРасходДенежныхСредств.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаРасход Из ТаблицаРасход Цикл
		
	    СтрокаДвиженийРасход = ТаблицаДвижений.Добавить();		
		
		СтрокаДвиженийРасход.Организация = РеквизитыДокумента.Организация;
		СтрокаДвиженийРасход.Валюта      = РеквизитыДокумента.ВалютаДокумента;
		СтрокаДвиженийРасход.ВидДенежныхСредств   = РеквизитыОснования.ФормаОплаты;
		// Касса, если наличные - банковский счет не указываем, так как его нет в заявке.
		Если ДокументОснование.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные
			И ЗначениеЗаполнено(РеквизитыДокумента.Касса) Тогда
		    СтрокаДвиженийРасход.БанковскийСчет       = РеквизитыДокумента.Касса;		
		КонецЕсли;
		СтрокаДвиженийРасход.СтатьяОборотов       = СтрокаРасход.СтатьяОборотов;
		СтрокаДвиженийРасход.Проект               = СтрокаРасход.Проект;
		СтрокаДвиженийРасход.ЦФО                  = СтрокаРасход.ЦФО;
		СтрокаДвиженийРасход.НоменклатурнаяГруппа = СтрокаРасход.НоменклатурнаяГруппа;		
		СтрокаДвиженийРасход.Контрагент           = РеквизитыОснования.Контрагент;
		СтрокаДвиженийРасход.ДоговорКонтрагента   = СтрокаРасход.ДоговорКонтрагента;
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		Для н = 1 По МаксКолвоДопАналитик Цикл
			СтрокаДвиженийРасход["Аналитика_"+н]  = СтрокаРасход["Аналитика_"+н];
		КонецЦикла;
		
		СтрокаДвиженийРасход.ДокументПланирования = РеквизитыДокумента.ДокументОснование;
		
		СтрокаДвиженийРасход.Сумма              = СтрокаРасход.Сумма; 
		
		// Из-за "актуализации" курсов оплаченных и неоплаченных позиций
		// могут возникать суммовые разницы. Расход выполняем по курсу заявки.
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвиженийРасход, ИменаРеквизитов, РеквизитыОснования.КурсыВалют, РеквизитыОснования.КурсыВалют.Документ);
		
	КонецЦикла; 
	
	Движения.бит_ПланируемыйРасходДенежныхСредств.мПериод          = РеквизитыОснования.ДатаРасхода;
	Движения.бит_ПланируемыйРасходДенежныхСредств.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ПланируемыйРасходДенежныхСредств.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияПоРегистрам()
	
#КонецОбласти

#КонецОбласти


#Область Инициализация

мНастройкиПрограммы = Новый Соответствие;

#КонецОбласти

#КонецЕсли
