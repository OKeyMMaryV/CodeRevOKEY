
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ВидОперации    = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ВидОперации");
	ОперацияБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС().Найти(ВидОперации) <> Неопределено;

	Если Параметры.Ключ.Пустая() Тогда
		Если Объект.ПеречислениеВБюджет Тогда
			УстановитьВидПлатежаВБюджет();
			ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчаниюВФорме();
		КонецЕсли;
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если НЕ (Параметры.Ключ.Пустая() И ПустаяСтрока(Объект.НазначениеПлатежа)) Тогда
		СгенерированноеНазначенияПлатежа = Документы.бит_ПлатежнаяПозиция.ПолучитьНазначениеПлатежа(Объект,,Истина);
	КонецЕсли; 

	// +СБ. Широков Николай. 2014-09-09. ТЗ "Казначейство"
	//СБ_КазначействоКлиент.ПлатежнаяПозицияФормаДокументаПриОткрытии(ЭтаФорма);
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_ПлатежнаяПозиция.ФормаДокументаУправляемая");
	// -СБ. Широков Николай
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ВидОперации    = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ВидОперации");
	ОперацияБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС().Найти(ВидОперации) <> Неопределено;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "КонтрагентЮрФизЛицо");
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(мКэшЗначений);
	ВывестиИнфНадписи();
	
	// Заполним текст про платежный документ.
	ЗаполнитьТекстПроПлатежныйДокумент();
	
	// Установим списки выбора полей платежей в бюджет.
	УстановитьСпискиВыбораПолейПлатежейВБюджет();
	
	ЗаполнитьСписокВыбораВидНалоговогоОбязательства();
	
	Если Объект.ПеречислениеВБюджет Тогда
		ЗаполнитьСписокВыбораКПП();
		ИзменениеСчетаУчетаБУ_НУ("БУ");
	КонецЕсли; 
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	Элементы.КодОКАТО.Заголовок = СинонимОкато(Объект.ДатаРасхода);
	Элементы.КодОКАТО.Подсказка = СинонимОкато(Объект.ДатаРасхода);

	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		УстановитьРеквизитыПоказателяПериода();
	КонецЕсли;

	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Распределение.Количество() > 0 Тогда
		
		СтрокаСДанными = Объект.Распределение[0];
		
		// Заполним значения сумм формы.
		Сумма 	  = СтрокаСДанными.Сумма;
		СтавкаНДС = СтрокаСДанными.СтавкаНДС;
		НДС 	  = СтрокаСДанными.НДС;
		
	КонецЕсли;
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Рассчитаем сумму без НДС для отображения на форме.
	РассчитатьСуммуБезНДС(Объект);
	
	УстановитьПараметрыВыбораРасчетногоСчета(Элементы.РасчетныйСчетОрганизации        , Объект.Организация);
	УстановитьПараметрыВыбораРасчетногоСчета(Элементы.РасчетныйСчетОрганизацииИсточник, Объект.Организация);
	УстановитьПараметрыВыбораРасчетногоСчета(Элементы.РасчетныйСчетОрганизацииПриемник, Объект.Организация);								 
	УстановитьПараметрыВыбораРасчетногоСчета(Элементы.РасчетныйСчетКонтрагента        , Объект.Контрагент);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// Обработка выбора строки регистра сведений РеквизитыУплатыНалоговИПлатежейВБюджет.
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыСтруктура") 
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.РеквизитыУплатыНалоговИПлатежейВБюджет") Тогда
		
		ОбработкаВыбораСтрокиРеквизитовПлатежаВБюджет(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	УправлениеЭлементамиФормы();
	
	// Сохраним списки кодов.
	СохранитьСпискиКодовБКиОКАТО();
	
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Оплачен ИЛИ Закрыт Тогда
		Отказ = Истина;
		ВызватьИсключение ПричинаБлокировки(Оплачен, Закрыт);
	КонецЕсли;  	
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ПлатежнаяПозиция";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ОтражатьВНалоговомУчете".
// 
&НаКлиенте 
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ПеречислениеВБюджет".
// 
&НаКлиенте 
Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	
	ИзменениеПеречислениеВБюджет();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СпособПогашенияЗадолженности".
// 
&НаКлиенте 
Процедура СпособПогашенияЗадолженностиПриИзменении(Элемент)
	
	Если Не Объект.СпособПогашенияЗадолженности = мКэшЗначений.Перечисления.СпособыПогашенияЗадолженности.ПоДокументу Тогда
		Объект.Сделка = Неопределено;
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
// 
&НаКлиенте 
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияСделки(СтандартнаяОбработка);
					
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "УсловиеПоКурсу".
// 
&НаКлиенте 
Процедура УсловиеПоКурсуПриИзменении(Элемент)
	
	ИзменениеУсловияПоКурсуСервер();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеСумма".
// 
&НаКлиенте 
Процедура ПолеСуммаПриИзменении(Элемент)
	
	Если Объект.Распределение.Количество() > 0 Тогда
		
		СтрокаСДанными = Объект.Распределение[0];
		СтрокаСДанными.Сумма = Сумма;
		
		// Изменим значения сумм в строке распределения.
		ПроверитьОстатокПоСтроке(СтрокаСДанными);
		РассчитатьСуммуНДС(СтрокаСДанными);
		РассчитатьСуммуБезНДС(СтрокаСДанными);
		
		Сумма = СтрокаСДанными.Сумма;
		НДС	  = СтрокаСДанными.НДС;
		
		ОбновитьИтоги(ЭтотОбъект);
		СформироватьНазначениеПлатежаСервер(Истина);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеСтавкаНДС".
// 
&НаКлиенте 
Процедура ПолеСтавкаНДСПриИзменении(Элемент)
	
	Если Объект.Распределение.Количество() > 0 Тогда
		
		СтрокаСДанными = Объект.Распределение[0];
		СтрокаСДанными.СтавкаНДС = СтавкаНДС;
		
		// Изменим значения сумм в строке распределения.
		РассчитатьСуммуНДС(СтрокаСДанными);
		РассчитатьСуммуБезНДС(СтрокаСДанными);
		
		НДС = СтрокаСДанными.НДС;
		
		ОбновитьИтоги(ЭтотОбъект);
		СформироватьНазначениеПлатежаСервер(Истина);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи о плате.
// Процедура открывает форму существующего графика платежей, если тот найден.
// 
&НаКлиенте 
Процедура ГиперссылкаПлатежныйДокументНажатие(Элемент)
	
	// Откроем платежный документ.
	бит_КазначействоКлиент.ОткрытьПлатежныйДокумент(Объект.Ссылка, ЭтаФорма)
	
КонецПроцедуры // ГиперссылкаПлатежныйДокументНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеНДС".
// 
&НаКлиенте
Процедура ПолеНДСПриИзменении(Элемент)
	
	Если Объект.Распределение.Количество() > 0 Тогда
		
		СтрокаСДанными = Объект.Распределение[0];
		СтрокаСДанными.НДС = НДС;
		
		РассчитатьСуммуБезНДС(СтрокаСДанными);
		ОбновитьИтоги(ЭтотОбъект);
		СформироватьНазначениеПлатежаСервер(Истина);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Налог".
// 
&НаКлиенте
Процедура НалогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		НалогПриИзмененииНаСервере();
	КонецЕсли;
	
	ИзменениеСчетаУчетаБУ_НУ("БУ");
	
КонецПроцедуры

&НаКлиенте
Процедура КПППлательщикаПриИзменении(Элемент)
	
	Объект.КодОКАТО = РегистрацияВНалоговомОрганеКодПоОКТМО(Объект.Организация, Объект.КПППлательщика);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
//  поля "ВидНалоговогоОбязательства".
// 
&НаКлиенте
Процедура ВидНалоговогоОбязательстваПриИзменении(Элемент)
	
	ВидНалоговогоОбязательстваПриИзмененииСервер();
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормыЗакладкиОсновные

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаРасхода".
// 
&НаКлиенте 
Процедура ДатаРасходаПриИзменении(Элемент)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаРасхода"  , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	
	Если Не бит_Казначейство.ДатаРасходаКорректна(СтруктураПараметров, Истина) Тогда
		ИзвлечьИзКэша("ДатаРасхода");
		Возврат;
	КонецЕсли; 
	
	ДобавитьВКэш("ДатаРасхода");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"				 , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", Объект.ДатаПлатежаКрайняя);
	
	СинхронизацияДатыПлатежа = бит_Казначейство.СинхронизироватьДатуПлатежаИДатуНеПозднее(Объект.Организация, Объект.ЦФО);
	
	Если СинхронизацияДатыПлатежа
		И ЗначениеЗаполнено(Объект.ДатаПлатежаКрайняя) 
		И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Ложь) Тогда
		
		Объект.ДатаПлатежаКрайняя = Объект.ДатаРасхода;
		ТекущаяДатаПлатежаКрайняя = Объект.ДатаРасхода;
		
	КонецЕсли;
	
	Элементы.КодОКАТО.Заголовок = СинонимОкато(Объект.ДатаРасхода);
	Элементы.КодОКАТО.Подсказка = СинонимОкато(Объект.ДатаРасхода);
	
	Если Объект.ДатаРасхода >= Дата("20140331") И Объект.ПеречислениеВБюджет = Ложь Тогда
	
		Элементы.ИдентификаторПлатежа.Видимость = Истина;
	Иначе	
		Элементы.ИдентификаторПлатежа.Видимость = Ложь;
	КонецЕсли; 
	
	ПолучитьПоказателиТипаНалоговогоПлатежа();	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаПлатежаКрайняя".
// 
&НаКлиенте 
Процедура ДатаПлатежаКрайняяПриИзменении(Элемент)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"				 , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", Объект.ДатаПлатежаКрайняя);
	
	Если ЗначениеЗаполнено(Объект.ДатаПлатежаКрайняя)
		И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Истина) Тогда
		
		ИзвлечьИзКэша("ДатаПлатежаКрайняя");
		Возврат;
		
	КонецЕсли;
	
	ДобавитьВКэш("ДатаПлатежаКрайняя");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыЗакладкиСчета

// Процедура - обработчик события "ПриИзменении" поля ввода "РасчетныйСчетОрганизации".
// 
&НаКлиенте 
Процедура РасчетныйСчетОрганизацииПриИзменении(Элемент)
	
	ВывестиИнфНадписи();
	ЗаполнитьИдентификаторПлатежаИзГосКонтракта();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "РасчетныйСчетОрганизации".
// 
&НаКлиенте 
Процедура РасчетныйСчетОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораРасчетногоСчета(Элемент, Объект.Организация);								 
									 
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "РасчетныйСчетКонтрагента".
// 
&НаКлиенте 
Процедура РасчетныйСчетКонтрагентаПриИзменении(Элемент)
	
	РасчетныйСчетКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "РасчетныйСчетКонтрагента".
// 
&НаКлиенте 
Процедура РасчетныйСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораРасчетногоСчета(Элемент, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательСчетаФизЛицаПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыЗакладкиПеревод

// Процедура - обработчик события "ПриИзменении" поля ввода "РасчетныйСчетОрганизацииИсточник".
// 
&НаКлиенте 
Процедура РасчетныйСчетОрганизацииИсточникПриИзменении(Элемент)
	
	ВывестиИнфНадписи();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "РасчетныйСчетОрганизацииИсточник".
// 
&НаКлиенте 
Процедура РасчетныйСчетОрганизацииИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораРасчетногоСчета(Элемент, Объект.Организация);								 									 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "РасчетныйСчетОрганизацииПриемник1".
// 
&НаКлиенте 
Процедура РасчетныйСчетОрганизацииПриемникПриИзменении(Элемент)
	
	ВывестиИнфНадписи();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "РасчетныйСчетОрганизацииПриемник1".
// 
&НаКлиенте 
Процедура РасчетныйСчетОрганизацииПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораРасчетногоСчета(Элемент, Объект.Организация);								 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыЗакладкиПеречислениеВБюджет

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидПеречисленияВБюджет".
// 
&НаКлиенте 
Процедура ВидПеречисленияВБюджетПриИзменении(Элемент)
	
	ИзменениеВидПеречисленияВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура КодБКПриИзменении(Элемент)
	
	Если Элементы.КодБК.СписокВыбора.НайтиПоЗначению(Объект.КодБК) = Неопределено Тогда
		Элементы.КодБК.СписокВыбора.Добавить(СокрЛП(Объект.КодБК));
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поле выбора "ПериодичностьУплаты".
// 
&НаКлиенте 
Процедура ПериодичностьУплатыПриИзменении(Элемент)
	
	Если ПериодичностьУплаты = Неопределено Тогда
		ПериодичностьУплаты = "0";
	КонецЕсли;
	
	Если Не ПериодичностьУплаты = "0" 
		И Не ПериодичностьУплаты = "-" Тогда
		
		Если Объект.ВидПлатежа = 0 Тогда
			ГодПлатежа = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		
		Если ПериодичностьУплаты = "ГД" Тогда
			ПериодПлатежа = 0;
		Иначе
			
			Если ПериодичностьУплаты = "МС" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 12);
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 4);
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 2);
			КонецЕсли;
			
			ПериодПлатежа = Макс(1, ПериодПлатежа);
			
		КонецЕсли;
		
	Иначе
		ГодПлатежа = 0;
	КонецЕсли;
	
	ДатаПлатежа = Неопределено;
	
	УстановитьПоказательПериода();
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ГодПлатежа".
// 
&НаКлиенте 
Процедура ГодПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	УстановитьВидимостьРеквизитовПлатежаВБюджет();

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-15 (#3916)
	//УстановитьНазначениеПлатежаПлатежаВБюджет();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-15 (#3916)
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПериодПлатежа".
// 
&НаКлиенте 
Процедура ПериодПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	УстановитьВидимостьРеквизитовПлатежаВБюджет();

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-15 (#3916)
	//УстановитьНазначениеПлатежаПлатежаВБюджет();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-15 (#3916)
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаПлатежа".
// 
&НаКлиенте 
Процедура ДатаПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура КПППлательщикаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КПППлательщика = "";
	Объект.КодОКАТО       = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыЗакладкиАналитика

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетУчетаБУ".
// 
&НаКлиенте 
Процедура СчетУчетаБУПриИзменении(Элемент)
	
	ИзменениеСчетаУчетаБУ_НУ("БУ");
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаБУ".
// 
&НаКлиенте 
Процедура СчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекстПредупреждения = "";
	
	СтандартнаяОбработка = СчетМожноИспользоватьВПроводках(ВыбранноеЗначение, ТекстПредупреждения);
	
	Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(,НСтр(ТекстПредупреждения));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Субконто1".
// 
&НаКлиенте 
Процедура Субконто1ПриИзменении(Элемент)
	
	бит_БухгалтерияСервер.ЗаменитьСубконтоНУ(Объект.СчетУчетаБУ, Объект.СчетУчетаНУ, 1, Объект.Субконто1, Объект.СубконтоНУ1);
	ЗаполнитьВидНалоговогоОбязательства(Объект.Субконто1);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Субконто2".
// 
&НаКлиенте 
Процедура Субконто2ПриИзменении(Элемент)
	
	бит_БухгалтерияСервер.ЗаменитьСубконтоНУ(Объект.СчетУчетаБУ, Объект.СчетУчетаНУ, 2, Объект.Субконто2, Объект.СубконтоНУ2);
	ЗаполнитьВидНалоговогоОбязательства(Объект.Субконто2);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Субконто3".
// 
&НаКлиенте 
Процедура Субконто3ПриИзменении(Элемент)
	
	бит_БухгалтерияСервер.ЗаменитьСубконтоНУ(Объект.СчетУчетаБУ, Объект.СчетУчетаНУ, 3, Объект.Субконто3, Объект.СубконтоНУ3);
	ЗаполнитьВидНалоговогоОбязательства(Объект.Субконто3);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Субконто i" (i от 1 до 3).
// 
&НаКлиенте 
Процедура СубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	
	Для Ном = 1 По мКэшЗначений.КоличествоСубконтоБУ Цикл
		
		ТипТекСубконто = ТипЗнч(Объект["Субконто" + Ном]);
		
		Если ТипТекСубконто = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект["Субконто" + Ном]);
			
		ИначеЕсли ТипТекСубконто = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект["Субконто" + Ном]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьВыборСубконто(Элемент, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "Субконто"
													 , ЗначениеСубконто
													 , мКэшЗначений.КоличествоСубконтоБУ
													 , Ложь);
	
КонецПроцедуры // СубконтоАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетУчетаНУ".
// 
&НаКлиенте 
Процедура СчетУчетаНУПриИзменении(Элемент)
	
	ИзменениеСчетаУчетаБУ_НУ("НУ");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоНУ i" (i от 1 до 3).
// 
&НаКлиенте 
Процедура СубконтоНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	
	Для Ном = 1 По мКэшЗначений.КоличествоСубконтоБУ Цикл
		
		ТипТекСубконто = ТипЗнч(Объект["СубконтоНУ" + Ном]);
		
		Если ТипТекСубконто = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", Объект["СубконтоНУ" + Ном]);
			
		ИначеЕсли ТипТекСубконто = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", Объект["СубконтоНУ" + Ном]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьВыборСубконто(Элемент, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНУАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоНУ"
													 , ЗначениеСубконто
													 , мКэшЗначений.КоличествоСубконтоНУ
													 , Ложь);
	
КонецПроцедуры // СубконтоНУАвтоПодбор()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределение

// Процедура - обработчик события "ПередНачаломДобавления" 
// табличной поля "Распределение".
// 
&НаКлиенте 
Процедура РаспределениеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заявка"		  , Объект.ДокументОснование);
	ПараметрыФормы.Вставить("ПлатежнаяПозиция", Объект.Ссылка);
	
	ОткрытьФорму("Документ.бит_ПлатежнаяПозиция.Форма.ФормаПодбораСтрок", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// табличной поля "Распределение".
// 
&НаКлиенте 
Процедура РаспределениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИД", ВыбранноеЗначение.ИД);
		
		МассивСтрок = Объект.Распределение.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Распределение.Добавить();
			НоваяСтрока.ИД 		  = ВыбранноеЗначение.ИД;
			НоваяСтрока.Сумма 	  = ВыбранноеЗначение.Сумма;
			НоваяСтрока.СтавкаНДС = ВыбранноеЗначение.СтавкаНДС;
			
			РассчитатьСуммуНДС(НоваяСтрока);
			
			// Заполним реквизиты отображающие аналитику по распределению.
			ЗаполнитьРеквизитыОтображающиеАналитикуРаспределенияКлиент(ВыбранноеЗначение, НоваяСтрока);
			
			// Запомним сумму по строке
			мКэшЗначений.СоответствиеСумм.Вставить(ВыбранноеЗначение.ИД, ВыбранноеЗначение.Сумма);
			
		Иначе	
			
			ТекстСообщения = "ru = 'Данная строка уже подобрана в табличную часть.'";
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр(ТекстСообщения), Объект, "Объект.Распределение");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// табличной поля "Распределение".
// 
&НаКлиенте 
Процедура РаспределениеПередУдалением(Элемент, Отказ)
	
	Если Объект.Распределение.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма
// в строке табличной части "Распределение".
// 
&НаКлиенте 
Процедура РаспределениеСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ПроверитьОстатокПоСтроке(ТекущиеДанные);
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДС
// в строке табличной части "Распределение".
// 
&НаКлиенте 
Процедура РаспределениеСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	СформироватьНазначениеПлатежаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПослеУдаления(Элемент)
	
	ОбновитьИтоги(ЭтотОбъект);
	СформироватьНазначениеПлатежаСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьРеквизитыПлатежаВБюджет(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Объект.Организация);
	СписокОрганизаций.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", СписокОрганизаций);
	Если НЕ Элементы.ВидПеречисленияВБюджет.Доступность Тогда
		СтруктураОтбора.Вставить("ВидПеречисленияВБюджет", Объект.ВидПеречисленияВБюджет);
	КонецЕсли;
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура сохраняет списки кодов БК и ОКАТО.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура СохранитьСпискиКодовБКиОКАТО()

	Если Не Объект.ПеречислениеВБюджет Тогда
		Возврат;
	КонецЕсли;
	
	СписокКодовБК 	 = мКэшЗначений.СписокКодовБК;
	СписокКодовОКАТО = мКэшЗначений.СписокКодовОКАТО;
	
	Если НЕ ПустаяСтрока(Объект.КодБК) И СписокКодовБК.НайтиПоЗначению(Объект.КодБК) = Неопределено Тогда
		
		СписокКодовБК.Вставить(0, Объект.КодБК);
		
		Пока СписокКодовБК.Количество() > 15 Цикл
			СписокКодовБК.Удалить(СписокКодовБК.Количество() - 1);
		КонецЦикла;
		
		СписокКодовБК.СортироватьПоЗначению();
		ХранилищеОбщихНастроек.Сохранить("Документ.бит_ПлатежнаяПозиция", "СписокСохраненныхКодовБК", СписокКодовБК);
		
	КонецЕсли;

	Если Не ПустаяСтрока(Объект.КодОКАТО) И СписокКодовОКАТО.НайтиПоЗначению(Объект.КодОКАТО) = Неопределено Тогда
		
		СписокКодовОКАТО.Вставить(0, Объект.КодОКАТО);
		
		Пока СписокКодовОКАТО.Количество() > 15 Цикл
			СписокКодовОКАТО.Удалить(СписокКодовОКАТО.Количество() - 1);
		КонецЦикла;
		
		СписокКодовОКАТО.СортироватьПоЗначению();
		ХранилищеОбщихНастроек.Сохранить("Документ.бит_ПлатежнаяПозиция", "СписокСохраненныхКодовОКАТО", СписокКодовОКАТО);
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьСпискиКодовБКиОКАТО()

// Процедура устанавливает вид платежа в бюджте.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УстановитьВидПлатежаВБюджет()

	Если Объект.ПеречислениеВБюджет Тогда
		Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога 
			ИЛИ ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		Иначе
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
	Иначе
		Объект.ВидПеречисленияВБюджет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизиты платежа в бюджет значениями по умолчанию в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчаниюВФорме()

	флУстановитьРеквизитыПоказателяПериода = Ложь;
	
	ДокументОплата = РеквизитФормыВЗначение("Объект");
	ДокументОплата.ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию(флУстановитьРеквизитыПоказателяПериода);
	
	ЗначениеВДанныеФормы(ДокументОплата, Объект);
	
	Если флУстановитьРеквизитыПоказателяПериода Тогда
		УстановитьРеквизитыПоказателяПериода();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчаниюВФорме()

// Процедура устанавливает видимость реквизиты показателя периода.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьРеквизитыПоказателяПериода()

	Если Объект.ПоказательПериода = "0" 
		Или ПустаяСтрока(Объект.ПоказательПериода) 
		Или ПустаяСтрока(СтрЗаменить(Объект.ПоказательПериода, ".", "")) Тогда
		ПериодичностьУплаты = "0";
	Иначе
		
		СтрокаВидаПериода = Лев(Объект.ПоказательПериода, 2);
		СтрокаПериода     = Сред(Объект.ПоказательПериода, 4, 2);
		СтрокаГода        = Сред(Объект.ПоказательПериода, 7);
		
		Если СтрокаВидаПериода = "ГД" Тогда
			ПериодичностьУплаты = "ГД";
		ИначеЕсли СтрокаВидаПериода = "ПЛ" Тогда
			ПериодичностьУплаты = "ПЛ";
		ИначеЕсли СтрокаВидаПериода = "КВ" Тогда
			ПериодичностьУплаты = "КВ";
		ИначеЕсли СтрокаВидаПериода = "МС" Тогда
			ПериодичностьУплаты = "МС";
		Иначе
			ПериодичностьУплаты = "-";
		КонецЕсли;
		
		Попытка
			
			ГодЧислом    = Число(СтрокаГода);
			ПериодЧислом = Число(СтрокаПериода);
			Если ПериодичностьУплаты = "-" Тогда
				ДеньЧислом  = Число(СтрокаВидаПериода);
				ДатаПериода = Дата(ГодЧислом, ПериодЧислом, ДеньЧислом);
			Иначе
				ГодПлатежа    = ГодЧислом;
				ПериодПлатежа = ПериодЧислом;
			КонецЕсли;
			
		Исключение
			
			Объект.ПоказательПериода   = "0";
			ПериодичностьУплаты = "0";
			
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();

КонецПроцедуры // УстановитьРеквизитыПоказателяПериода()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Получим признак изменения схемы движения документов по платежам.
	СхемаДвиженияПоПлатежамИзменена = бит_ОбщегоНазначения.СхемаДвиженияДокументовПоПлатежамИзменена();
	КэшированныеЗначения.Вставить("СхемаДвиженияПоПлатежамИзменена", СхемаДвиженияПоПлатежамИзменена);
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ВидыОперацийЗаявкаНаРасходование", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование));
	КэшПеречисления.Вставить("бит_УсловияПоКурсу"				   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_УсловияПоКурсу));
	КэшПеречисления.Вставить("СтавкиНДС"				   		   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	КэшПеречисления.Вставить("ВидыПеречисленийВБюджет"			   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.ВидыПеречисленийВБюджет));
	
	// Если схема движения документов по платежам изменена, тогда.
	Если СхемаДвиженияПоПлатежамИзменена Тогда
		КэшПеречисления.Вставить("СпособыПогашенияЗадолженности", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СпособыПогашенияЗадолженности));
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Статусы платежной позиции.
	КэшированныеЗначения.Вставить("ПлатежнаяПозиция_Рабочая", Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Рабочая);
	КэшированныеЗначения.Вставить("ПлатежнаяПозиция_Закрыта", Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта);
	КэшированныеЗначения.Вставить("ВалютаРеглУчета"		, 	  Константы.ВалютаРегламентированногоУчета.Получить());
	
	флЭтоБухгалтерияПредприятия   = бит_ОбщегоНазначения.ЭтоБухгалтерияПредприятия();
	
	КэшированныеЗначения.Вставить("флЭтоБухгалтерияПредприятия"  , флЭтоБухгалтерияПредприятия);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим процент превышения суммы заявки.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"		  , Объект.ЦФО);
	
	ДатаСреза = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ДатаСреза,, СтруктураПараметров, "Ошибки");
	ПроцентПревышения  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.ДопустимыйПроцентПревышенияСуммыЗаявки);
	
	КэшированныеЗначения.Вставить("ПроцентПревышенияСуммыЗаявки", ПроцентПревышения);
	
	// Получим признак того, что расчеты ведутся в условных единицах.
	РасчетыВУЕ = Объект.ДокументОснование.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	КэшированныеЗначения.Вставить("РасчетыВУЕ", РасчетыВУЕ);
	
	КэшированныеЗначения.Вставить("КоличествоСубконтоБУ", 3);
	КэшированныеЗначения.Вставить("КоличествоСубконтоНУ", 4);
	
	КэшированныеЗначения.Вставить("ДоговорОснования", Объект.ДокументОснование.ДоговорКонтрагента);
	
	КэшированныеЗначения.Вставить("СоответствиеСумм", СформироватьСоответствиеСумм());
	                                        	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

// Процедура выводит информационные надписи в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ВывестиИнфНадписи()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстЗаголовка = "ИНН: " + СокрЛП(Объект.Организация.ИНН);
		ТекстЗаголовка = бит_СтрокиКлиентСервер.ДополнитьСтроку(ТекстЗаголовка, " КПП: ", СокрЛП(Объект.Организация.КПП));
		
		Элементы.ИнфОрганизация.Заголовок = ТекстЗаголовка;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПриемник) Тогда
		
		ТекстОрганизацияПриемник = "ИНН: " + СокрЛП(Объект.ОрганизацияПриемник.ИНН);	
		ТекстОрганизацияПриемник = бит_СтрокиКлиентСервер.ДополнитьСтроку(ТекстОрганизацияПриемник
																	   ," КПП: "
																	   ,СокрЛП(Объект.ОрганизацияПриемник.КПП));
		
		Элементы.ИнфОрганизацияПриемник.Заголовок      = ТекстОрганизацияПриемник;
		Элементы.ИнфОрганизацияПриемникВзнос.Заголовок = ТекстОрганизацияПриемник;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ТекстЗаголовка = "ИНН: " + СокрЛП(Объект.Контрагент.ИНН);
		ТекстЗаголовка = бит_СтрокиКлиентСервер.ДополнитьСтроку(ТекстЗаголовка ," КПП: ", СокрЛП(Объект.Контрагент.КПП));
		
		Элементы.ИнфКонтрагент.Заголовок = ТекстЗаголовка;	
		
	КонецЕсли;
	
	// Изменение кода. Начало. 16.04.2015{{
	Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) Тогда
		
		ТекстЗаголовка = "ИНН: " + СокрЛП(Объект.ФизическоеЛицо.ИНН);
		
		Элементы.ИнфФизЛицо.Заголовок = ТекстЗаголовка;	
		
	КонецЕсли;
	Элементы.ИнфРасчетныйСчетКонтрагента.Заголовок = бит_Казначейство.СформироватьИнформациюОРасчетномСчете(Объект.БанковскийСчетФизЛица);	
	// Изменение кода. Конец. 16.04.2015}}
	
	Элементы.ИнфРасчетныйСчетКонтрагента.Заголовок    	   = бит_Казначейство.СформироватьИнформациюОРасчетномСчете(Объект.БанковскийСчетКонтрагент);	
	Элементы.ИнфРасчетныйСчетОрганизации.Заголовок    	   = бит_Казначейство.СформироватьИнформациюОРасчетномСчете(Объект.БанковскийСчетОрганизация);	
	Элементы.ИнфРасчетныйСчетОрганизацииИсточник.Заголовок = бит_Казначейство.СформироватьИнформациюОРасчетномСчете(Объект.БанковскийСчетОрганизация);	
	
	ТекстСчетОрганизацияПриемник = бит_Казначейство.СформироватьИнформациюОРасчетномСчете(Объект.БанковскийСчетОрганизацияПриемник);	
	
	Элементы.ИнфРасчетныйСчетОрганизацииПриемник.Заголовок      = ТекстСчетОрганизацияПриемник;	
	Элементы.ИнфРасчетныйСчетОрганизацииПриемникВзнос.Заголовок = ТекстСчетОрганизацияПриемник;
	
КонецПроцедуры // ВывестиИнфНадписи()

// Заполняет текст про платежный документ в форме документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьТекстПроПлатежныйДокумент()

	ДокПлатежныйДокумент = бит_Казначейство.НайтиПлатежныйДокументПоПлатежнойПозиции(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ДокПлатежныйДокумент)
		И ТипЗнч(ДокПлатежныйДокумент) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		Элементы.ГиперссылкаПлатежныйДокумент.Заголовок   = Строка(ДокПлатежныйДокумент)+
																" (Вх. № "+ ДокПлатежныйДокумент.НомерВходящегоДокумента+
																" от "+ Формат(ДокПлатежныйДокумент.ДатаВходящегоДокумента, НСтр("ru='ДФ=дд.ММ.гггг'"))+")";
																
		Элементы.ГиперссылкаПлатежныйДокумент.ГиперСсылка = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ДокПлатежныйДокумент) Тогда 	
		Элементы.ГиперссылкаПлатежныйДокумент.Заголовок   = Строка(ДокПлатежныйДокумент);
		Элементы.ГиперссылкаПлатежныйДокумент.ГиперСсылка = Истина;
	Иначе
		Элементы.ГиперссылкаПлатежныйДокумент.Заголовок   = "Платежный документ";
		Элементы.ГиперссылкаПлатежныйДокумент.ГиперСсылка = Ложь;
	КонецЕсли;
	
	Элементы.ГиперссылкаПлатежныйДокумент.Видимость = ЗначениеЗаполнено(ДокПлатежныйДокумент);
	
КонецПроцедуры // ЗаполнитьТекстПроПлатежныйДокумент()

// Процедура устанавливает списки выбора полей платежей в бюджет.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УстановитьСпискиВыбораПолейПлатежейВБюджет()

	Если Не Объект.ПеречислениеВБюджет
		Или мКэшЗначений.Свойство("СпискиВыбораПолейПлатежейВБюджетУстановлены") Тогда
		Возврат;
	КонецЕсли;
	
	СписокКодовБК = ХранилищеОбщихНастроек.Загрузить("Документ.бит_ПлатежнаяПозиция", "СписокСохраненныхКодовБК");
	Если Не ТипЗнч(СписокКодовБК) = Тип("СписокЗначений") Тогда
		СписокКодовБК = Новый СписокЗначений;
	КонецЕсли;
	
	СписокКодовОКАТО = ХранилищеОбщихНастроек.Загрузить("Документ.бит_ПлатежнаяПозиция", "СписокСохраненныхКодовОКАТО");
	Если Не ТипЗнч(СписокКодовОКАТО) = Тип("СписокЗначений") Тогда
		СписокКодовОКАТО = Новый СписокЗначений;
	КонецЕсли;
	
	Элементы.КодБК.СписокВыбора.ЗагрузитьЗначения(СписокКодовБК.ВыгрузитьЗначения()); 
	мКэшЗначений.Вставить("СписокКодовБК"	, СписокКодовБК);
	мКэшЗначений.Вставить("СписокКодовОКАТО", СписокКодовОКАТО);
	
	ДокументОплата = РеквизитФормыВЗначение("Объект");
	
	// Получим списки.
	СписокСтатусСоставителя 		 = ДокументОплата.ПолучитьСписокСтатусовОтправителя();
	СписокПоказательОснования 		 = ДокументОплата.ПолучитьСписокОснованийНалоговогоПлатежа();
	СписокПоказательТипа			 = ДокументОплата.ПолучитьСписокПоказателейТипаНалоговогоПлатежа();
	СписокПоказательОснованияТаможня = ДокументОплата.ПолучитьСписокОснованийТаможенногоПлатежа();
	СписокПоказательТипаТаможня 	 = ДокументОплата.ПолучитьСписокПоказателейТипаТаможенногоПлатежа();

	СписокПериодичностьУплаты = Новый СписокЗначений;
	СписокПериодичностьУплаты.Добавить("МС", "МС - месячный платеж");
	СписокПериодичностьУплаты.Добавить("КВ", "КВ - квартальный платеж");
	СписокПериодичностьУплаты.Добавить("ПЛ", "ПЛ - полугодовой платеж");
	СписокПериодичностьУплаты.Добавить("ГД", "ГД - годовой платеж"); 
	СписокПериодичностьУплаты.Добавить("-",  "Платеж по конкретной дате");
	СписокПериодичностьУплаты.Добавить("0",  "0 - значение не указывается");
	
	// Заполним списки выбора.
	ЗагрузитьВСписокЗначений(СписокСтатусСоставителя		 , Элементы.СтатусСоставителя.СписокВыбора);
	ЗагрузитьВСписокЗначений(СписокПоказательОснования		 , Элементы.ПоказательОснования.СписокВыбора);
	ЗагрузитьВСписокЗначений(СписокПоказательТипа			 , Элементы.ПоказательТипа.СписокВыбора);
	ЗагрузитьВСписокЗначений(СписокПоказательОснованияТаможня, Элементы.ПоказательОснованияТаможня.СписокВыбора);
	ЗагрузитьВСписокЗначений(СписокПоказательТипаТаможня	 , Элементы.ПоказательТипаТаможня.СписокВыбора);
	ЗагрузитьВСписокЗначений(СписокПериодичностьУплаты		 , Элементы.ПериодичностьУплаты.СписокВыбора);
	
	мКэшЗначений.Вставить("СпискиВыбораПолейПлатежейВБюджетУстановлены");
	
КонецПроцедуры // УстановитьСпискиВыбораПолейПлатежейВБюджет()

// Процедура расчитывает суммму НДС. Сервер.
// 
// Параметры:
//  Контейнер - Объект, СтрокаТабличнойЧасти.
// 
&НаСервере 
Процедура РассчитатьСуммуНДССервер(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС
																	   ,Перечисления.СтавкиНДС);
	
	Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
																	  	,Истина
																		,Объект.ДокументОснование.СуммаВключаетНДС
																		,СтавкаНДСЧисло);
	
КонецПроцедуры // РассчитатьСуммуНДССервер()

// Процедура выполняет действия на сервере, необходимые при изменении УсловиеПоКурсу.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеУсловияПоКурсуСервер()
	
	Если ЗначениеЗаполнено(Объект.УсловиеПоКурсу) 
		И Не Объект.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.ЦБ Тогда
		
		МассивОперацийВВалюте = бит_ОбщегоНазначения.СформироватьМассивВидовОперацийВВалютеДокумента();									
		ОперацияВходитВМассив = бит_Казначейство.ОперацияЗаявкиВходитВМассивВидовТиповыхОпераций(ВидОперации
																						 		,МассивОперацийВВалюте
																								,Объект.ДокументОснование.ФормаОплаты);
		
		Если ОперацияВходитВМассив 
			Или Не Объект.ДокументОснование.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			
			ТекстСообщения = "Условие по курсу """ 
							 + Объект.УсловиеПоКурсу 
							 + """ может быть использовано только в случае расчетов в у.е.";
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, Объект, "Объект.УсловиеПоКурсу");
			
			Объект.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.ЦБ;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ИзменениеУсловияПоКурсуСервер()

// Функция получает струтуру сумм остатка по строке распределения.
// 
// Параметры:
//  ИдСтроки - Строка.
// 
&НаСервере 
Функция ПолучитьОстаткиПоСтрокеРаспределения(ИдСтроки)
	
	ТаблицаОстатки = бит_Казначейство.ПолучитьОстаткиПоСтрокамРаспределения(Объект.ДокументОснование, Объект.Ссылка);
	СтрокаОстатки  = ТаблицаОстатки.Найти(ИдСтроки, "ИД");
	
	Если СтрокаОстатки = Неопределено Тогда
		СтруктураСтрокиОстатка = Неопределено;
	Иначе
		
		СтруктураСтрокиОстатка = Новый Структура;
		СтруктураСтрокиОстатка.Вставить("НомерСтроки", СтрокаОстатки.НомерСтроки);
		СтруктураСтрокиОстатка.Вставить("СуммаЗаявки", СтрокаОстатки.СуммаЗаявки);
		СтруктураСтрокиОстатка.Вставить("СуммаПП"	 , СтрокаОстатки.СуммаПП);
		СтруктураСтрокиОстатка.Вставить("Сумма"		 , СтрокаОстатки.Сумма);
		
	КонецЕсли;
	
	Возврат СтруктураСтрокиОстатка;
	
КонецФункции // ПолучитьСтруктуруОстаткаПоСтрокеРаспределения()

// Процедура выполняет действия на сервере, необходимые при изменении ВидПеречисленияВБюджет.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ИзменениеВидПеречисленияВБюджет()
	
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчаниюВФорме();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ИзменениеВидПеречисленияВБюджет()

// Процедура выполняет действия на сервере, необходимые при изменении ПеречислениеВБюджет.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ИзменениеПеречислениеВБюджет()
	
	УстановитьВидПлатежаВБюджет();
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчаниюВФорме();
	ЗаполнитьСписокВыбораКПП();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	Если Объект.ПеречислениеВБюджет Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаПеречислениеВБюджет;
		
		// Установим списки выбора полей платежей в бюджет.
		УстановитьСпискиВыбораПолейПлатежейВБюджет();
		
	КонецЕсли;
	
КонецПроцедуры // ИзменениеПеречислениеВБюджет()

// Процедура выполняет действия на сервере, необходимые при изменении Счета учета БУ или НУ.
// 
// Параметры:
//  Суфикс - Строка.
// 
&НаСервере 
Процедура ИзменениеСчетаУчетаБУ_НУ(Суфикс)
	
	СтрСубконто    = Новый Структура;
	СуфиксЭлемента = ?(Суфикс = "НУ", "НУ", "");
	
	Для Ном = 1 По мКэшЗначений.КоличествоСубконтоБУ Цикл
		СтрСубконто.Вставить("Субконто" + Ном, Элементы["Субконто" + СуфиксЭлемента + Ном]);
	КонецЦикла; 
	
	ПриВыбореСчета(Объект["СчетУчета" + Суфикс], СтрСубконто, мКэшЗначений.КоличествоСубконтоБУ);
	
	Если Суфикс = "БУ" Тогда
		
		УстановитьВидимостьСубконто(Объект.СчетУчетаБУ, "", Истина);
		
		// Если схема движения документов по платежам не изменена, тогда.
		Если Не мКэшЗначений.СхемаДвиженияПоПлатежамИзменена Тогда
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Счет",		"СчетУчетаБУ");
			СтруктураПараметров.Вставить("Субконто1",	"СубконтоНУ1");
			СтруктураПараметров.Вставить("Субконто2",	"СубконтоНУ2");
			СтруктураПараметров.Вставить("Субконто3",	"СубконтоНУ3");
			СтруктураПараметров.Вставить("СчетНУ",		"СчетУчетаНУ");
			
			ИзменениеСчетаУчетаБУ_НУ("НУ")
			
		КонецЕсли;
		
		Если ТипЗнч(Объект.Субконто1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет") Тогда
			
			СвязиПараметров = Новый Массив;
			Связь = Новый СвязьПараметраВыбора("Отбор.Владелец","Объект.Организация",РежимИзмененияСвязанногоЗначения.Очищать) ;
			СвязиПараметров.Добавить(Связь);
			
			Элементы.Субконто2.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметров);
			Элементы.Субконто3.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметров);
			
		Иначе	
			
			СвязиПараметров = Новый Массив;
			Связь = Новый СвязьПараметраВыбора("Отбор.Владелец","Объект.Субконто1",РежимИзмененияСвязанногоЗначения.НеИзменять) ;
			СвязиПараметров.Добавить(Связь);
			Элементы.Субконто2.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметров);
			
			СвязиПараметров = Новый Массив;
			Связь = Новый СвязьПараметраВыбора("Отбор.Владелец","Объект.Субконто2",РежимИзмененияСвязанногоЗначения.НеИзменять) ;
			СвязиПараметров.Добавить(Связь);
			Элементы.Субконто3.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметров);
			
		КонецЕсли; 
		
	КонецЕсли;
		
КонецПроцедуры // ИзменениеСчетаУчетаБУ_НУ()

// Процедура загружает список приемник значениями списка источника.
// 
// Параметры:
//  СписокИсточник - СписокЗначений, откуда берутся значения.
//  СписокПриемник - СписокЗначений, куда добавляются значения.
// 
&НаСервереБезКонтекста 
Процедура ЗагрузитьВСписокЗначений(СписокИсточник, СписокПриемник)
	
	Для Каждого ТекЭлемент Из СписокИсточник Цикл
		СписокПриемник.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВСписокЗначений()

// Процедура установки типа и доступности субконто в зависимости от выбранного счета.
// 
// Параметры:
//  Счет			   - ПланСчетовСсылка.
//  ЭлементыСубконто   - Структура.
//  КоличествоСубконто - Число.
// 
&НаСервере 
Процедура ПриВыбореСчета(Счет, ЭлементыСубконто, КоличествоСубконто)
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	ЧислоАктивныхСубконто = СвСч.КоличествоСубконто;
	
	Для Ном = 1 По ЧислоАктивныхСубконто Цикл
		
		ТипСубк = СвСч["ВидСубконто" + Ном + "ТипЗначения"];
		
		ЭлементФормы = ЭлементыСубконто["Субконто" + Ном];
		ТекЗначение  = Объект[ЭлементФормы.Имя];
		
		ЭлементФормы.Видимость = Не ТолькоПросмотр;
		ЭлементФормы.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		
		// Чтобы не устанавливался флаг модифицированности.
		Если Не ТипСубк.ПривестиЗначение(ТекЗначение) = ТекЗначение Тогда
			Объект[ЭлементФормы.Имя] = ТипСубк.ПривестиЗначение(ТекЗначение);
		КонецЕсли;

		ЭлементФормы.Заголовок = СвСч["ВидСубконто" + Ном + "Наименование"] + ":";
		
	КонецЦикла;
	
	Для Ном = (ЧислоАктивныхСубконто + 1) По КоличествоСубконто Цикл
		
		ЭлементФормы = ЭлементыСубконто["Субконто" + Ном];
		
		Если Объект[ЭлементФормы.Имя] <> Неопределено Тогда
			Объект[ЭлементФормы.Имя] = Неопределено;
		КонецЕсли;
		
		ЭлементФормы.Видимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // ПриВыбореСчета()

// Функция проверяет возможность использования счета в проводках.
// 
// Параметры:
//  Счет				- Проверяемый счет.
//  ТекстПредупреждения - Строка. Возвращаемый.
// 
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках.
//  
&НаСервереБезКонтекста 
Функция СчетМожноИспользоватьВПроводках(Счет, ТекстПредупреждения)

	Если Не ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Возврат Ложь; // Неправильный тип.
	КонецЕсли;

	Если Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться.
	КонецЕсли;

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	Если СвСч.ЗапретитьИспользоватьВПроводках Тогда
		
		ТекстПредупреждения = "ru = 'Счет " 
							  + СокрЛП(Счет) 
							  + " """ 
							  + Счет.Наименование 
							  + """ нельзя использовать в проводках.'";

		Возврат Ложь; // Счет использовать в проводках нельзя.

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках.

КонецФункции // СчетМожноИспользоватьВПроводках()

&НаСервере
Функция СформироватьСоответствиеСумм()
	
	СоответствиеСумм = Новый Соответствие;
	
	Для Каждого ТекущаяСтрока Из Объект.Распределение Цикл
		
		СоответствиеСумм.Вставить(ТекущаяСтрока.ИД, ТекущаяСтрока.Сумма);
		
	КонецЦикла;
	
	Возврат СоответствиеСумм;
	
КонецФункции

// Процедура заполняет реквизиты уплаты платежей в бюджет.
// 
&НаСервере
Процедура ОбработкаВыбораСтрокиРеквизитовПлатежаВБюджет(ВыбраннаяСтрока)
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-06 (#4084)
	//ИзменениеПеречислениеВБюджет();
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-06 (#4084)
	
	ПредыдущийМесяц = НачалоМесяца(Объект.ДатаРасхода);
	ДанныеДляЗаполнения = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.ДанныеЗаполнения(ВыбраннаяСтрока, ПредыдущийМесяц, Объект.Организация);
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.РегистрацияВНалоговомОргане) Тогда
		Объект.КПППлательщика = ДанныеДляЗаполнения.КПП;
		Если ДанныеДляЗаполнения.Свойство("КодОКАТО") Тогда
			Объект.КодОКАТО = ДанныеДляЗаполнения.КодОКАТО; 
		КонецЕсли; 
	Иначе
		Объект.КодОКАТО = РегистрацияВНалоговомОрганеКодПоОКТМО(Объект.Организация, Объект.КПППлательщика);
	КонецЕсли; 
	
	ИсключаемыеСвойства = "Контрагент";
	Если НЕ Элементы.ВидПеречисленияВБюджет.Доступность Тогда
		ИсключаемыеСвойства = ИсключаемыеСвойства + ",ВидПеречисленияВБюджет";
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-06 (#4084)
	//Если НЕ ЗначениеЗаполнено(ДанныеДляЗаполнения.НазначениеПлатежа) Тогда
	//	ИсключаемыеСвойства = ИсключаемыеСвойства + ",НазначениеПлатежа";
	//КонецЕсли;
	
	Если ПериодПлатежа > 0 И ГодПлатежа > 0 Тогда
		ИсключаемыеСвойства = ИсключаемыеСвойства + ",ПоказательПериода";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		ИсключаемыеСвойства = ИсключаемыеСвойства + ",НазначениеПлатежа";
	КонецЕсли;
	
	Если Объект.УИН <> "0" Тогда
		Объект.УИН = "0";
	КонецЕсли;	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-06 (#4084) 
	
	// Заполнение объекта данными из шаблона.
	ЗаполнитьЗначенияСвойств(Объект, ДанныеДляЗаполнения,,ИсключаемыеСвойства);
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.СчетУчета) Тогда
		Объект.СчетУчетаБУ = ДанныеДляЗаполнения.СчетУчета;
	КонецЕсли; 
	
	// Заполнение счета плательщика, если он не заполнен.
	Если Объект.Контрагент = ДанныеДляЗаполнения.Контрагент Тогда
		ВалютаСчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляЗаполнения.СчетКонтрагента, "ВалютаДенежныхСредств");
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагент)
			ИЛИ Объект.ВалютаДокумента = ВалютаСчетКонтрагента Тогда 
			Объект.БанковскийСчетКонтрагент = ДанныеДляЗаполнения.СчетКонтрагента;
		КонецЕсли;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                 ВыбраннаяСтрока.Организация);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ВыбраннаяСтрока.РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("ВидПлатежа",                  ВыбраннаяСтрока.ВидПлатежа);
	Запрос.УстановитьПараметр("ПоказательТипа",              ВыбраннаяСтрока.ПоказательТипа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройка.ПоказательПериода КАК ПоказательПериода
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК Настройка
	|ГДЕ
	|	Настройка.ВидПлатежа = &ВидПлатежа
	|	И Настройка.Организация = &Организация
	|	И Настройка.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И Настройка.ПоказательТипа = &ПоказательТипа";
	
	Настройка = Запрос.Выполнить().Выбрать();
	Настройка.Следующий();
	
	ПериодичностьУплаты = Настройка.ПоказательПериода;
	СтрокаПериода     = Сред(Объект.ПоказательПериода, 4, 2);
	СтрокаГода        = Сред(Объект.ПоказательПериода, 7);
	Объект.ПоказательПериода = ПериодичностьУплаты+"."+СтрокаПериода+"."+СтрокаГода;
	
	УправлениеЭлементамиФормы();
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		УстановитьРеквизитыПоказателяПериода();
	КонецЕсли;
	
КонецПроцедуры

// Функция получает информацию по регистрации в налоговом органе организации.
// 
&НаСервере
Функция РегистрацияВНалоговомОрганеКодПоОКТМО(Владелец, КПП)
	
	КодПоОКТМО = "";

	РегистрацияВНО = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(Владелец, КПП);
	Если ЗначениеЗаполнено(РегистрацияВНО) Тогда
		КодТерритории  = Справочники.РегистрацииВНалоговомОргане.КодТерритории(РегистрацияВНО, Объект.Дата);
		Если ЗначениеЗаполнено(КодТерритории) Тогда
			ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, Объект.Дата);
			КодПоОКТМО = КодТерритории;
		КонецЕсли;
	КонецЕсли; 

	Возврат КодПоОКТМО;
	
КонецФункции

// Процедура Назначает список показателей типа платежа п/п на перечисление в бюджет налогового платежа.
// 
&НаСервере
Процедура  ПолучитьПоказателиТипаНалоговогоПлатежа()

	Элементы.ПоказательТипа.СписокВыбора.Очистить();
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ПЕ", "ПЕ - уплата пени");
	Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	
	Если Объект.ДатаРасхода < Дата("20140402") Тогда
	
		Список.Добавить("НС", "НС - уплата налога или сбора");
		Список.Добавить("ПЛ", "ПЛ - уплата платежа");
		Список.Добавить("ГП", "ГП - уплата пошлины");
		Список.Добавить("ВЗ", "ВЗ - уплата взноса");
		Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
		Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
		Список.Добавить("АШ", "АШ - административные штрафы");
		Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
	
	КонецЕсли; 
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	ЗагрузитьВСписокЗначений(Список, Элементы.ПоказательТипа.СписокВыбора);
	
	Если ЗначениеЗаполнено(Объект.ПоказательТипа)
		И Список.НайтиПоЗначению(Объект.ПоказательТипа) = Неопределено Тогда
	
		Объект.ПоказательТипа = Список.НайтиПоЗначению("0").Значение;
	
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьСписокПоказателейТипаНалоговогоПлатежа()

// Процедура заполняет список выбора КПП. 
//
&НаСервере
Процедура ЗаполнитьСписокВыбораКПП()

	Элементы.КПППлательщика.СписокВыбора.Очистить();
	
	ОсновнойКПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "КПП");
	
	ТекстКППвладельца = НСтр("ru = '%1 - КПП, указанный для плательщика (основной)'");
	ТекстКППвладельца = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстКППвладельца, ОсновнойКПП);
		
	Элементы.КПППлательщика.СписокВыбора.Добавить(ОсновнойКПП, ТекстКППвладельца);
	
	СписокКПП = Новый СписокЗначений(); 
	ЗаполнитьСписокКПП(СписокКПП, ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация));
		
	Если СписокКПП.Количество() > 1 Тогда
		Для каждого ЭлементКПП Из СписокКПП Цикл
			Если Элементы.КПППлательщика.СписокВыбора.НайтиПоЗначению(ЭлементКПП.Значение) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстШаблона = НСтр("ru = '%1 - КПП в налоговом органе ""%2""'");
			КПППредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстШаблона, ЭлементКПП.Значение, ЭлементКПП.Представление);
			Элементы.КПППлательщика.СписокВыбора.Добавить(ЭлементКПП.Значение, КПППредставление);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСписокВыбораКПП()

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокКПП(СписокКПП, Владелец)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Спр.Наименование,
	|	Спр.КПП КАК КПП
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК Спр
	|ГДЕ
	|	Спр.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	КПП";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТекстШаблон = НСтр("ru = '%1 (%2)'");
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокКПП.Добавить(Выборка.КПП, Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура при изменении поля Налог, на сервере.
// 
&НаСервере
Процедура НалогПриИзмененииНаСервере()

	ЗаполнитьВидНалоговогоОбязательства(,Истина);
	
	ИсточникДанныхКонтекста = ИсточникДанныхКонтекстаПлатежногоДокумента(ЭтотОбъект);
	
	Данные = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ИсточникДанныхКонтекста);
	ЗначенияПоУмолчанию = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Данные);
	
	Если НЕ ЗначениеЗаполнено(ИсточникДанныхКонтекста.РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане");
	КонецЕсли; 
	Объект.КПППлательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
	
	Объект.ВидПеречисленияВБюджет 	= ЗначенияПоУмолчанию.ВидПеречисления;
	Объект.КодБК 					= ЗначенияПоУмолчанию.КБК;
	//ОК Довбешка Т. 26.01.2018 затирается Назначение платежа ,которое заполнено из ЗНРДс
	//Если ЗначениеЗаполнено(ЗначенияПоУмолчанию.НазначениеПлатежа) Тогда
	//	Объект.НазначениеПлатежа 	= ЗначенияПоУмолчанию.НазначениеПлатежа;
	//КонецЕсли; 
	Объект.ОчередностьПлатежа 		= ЗначенияПоУмолчанию.ОчередностьПлатежа;
	Объект.ПоказательПериода 		= ЗначенияПоУмолчанию.НалоговыйПериод;
	Объект.КодОКАТО 				= ЗначенияПоУмолчанию.КодТерритории;
	Объект.ПоказательОснования		= ЗначенияПоУмолчанию.ОснованиеПлатежа;
	Объект.СтатусСоставителя		= ЗначенияПоУмолчанию.СтатусПлательщика;
	Объект.СчетУчетаБУ 				= Объект.Налог.СчетУчета;
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		УстановитьРеквизитыПоказателяПериода();
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
	ИзменениеСчетаУчетаБУ_НУ("БУ");

	ЗаполнитьСписокВыбораВидНалоговогоОбязательства();
	
КонецПроцедуры // НалогПриИзмененииНаСервере()

&НаСервере
Процедура УстановитьНазначениеПлатежаПлатежаВБюджет()
	
	Если ЗначениеЗаполнено(Объект.Налог) Тогда
		ПараметрыПередачи 		 = ИсточникДанныхКонтекстаПлатежногоДокумента(ЭтотОбъект);
		Данные 					 = ПлатежиВБюджетПереопределяемый.КонтекстПлатежногоДокумента(ПараметрыПередачи);
		ЗначенияПоУмолчанию 	 = ПлатежиВБюджетКлиентСервер.ЗначенияПоУмолчанию(Данные);
		Если НЕ ПустаяСтрока(ЗначенияПоУмолчанию.НазначениеПлатежа) Тогда
			Объект.НазначениеПлатежа = ЗначенияПоУмолчанию.НазначениеПлатежа;	
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры
  
&НаСервереБезКонтекста
Функция ИсточникДанныхКонтекстаПлатежногоДокумента(Форма)
	
	Объект = Форма.Объект;
	
	ИсточникДанныхКонтекста = ПлатежиВБюджетПереопределяемый.НовыйИсточникДанныхКонтекстаПлатежногоДокумента();
	
	Если ИсточникДанныхКонтекста.Свойство("Период") Тогда
		ИсточникДанныхКонтекста.Период = Объект.Дата;
	КонецЕсли; 
	
	Если ИсточникДанныхКонтекста.Свойство("ПериодПлатежа") Тогда
		Если ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(Объект.ПоказательПериода) Тогда
			ПоказателиПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Объект.ПоказательПериода);
			ИсточникДанныхКонтекста.ПериодПлатежа = ПоказателиПериода.Дата;
		Иначе
			ИсточникДанныхКонтекста.ПериодПлатежа = Объект.ДатаРасхода;
		КонецЕсли;
	КонецЕсли; 
	
	Если ИсточникДанныхКонтекста.Свойство("Организация") Тогда
		ИсточникДанныхКонтекста.Организация = Объект.Организация;
	КонецЕсли; 
	
	Если ИсточникДанныхКонтекста.Свойство("КПППлательщика") Тогда
		ИсточникДанныхКонтекста.КПППлательщика = Объект.КПППлательщика;
	КонецЕсли; 
	
	Если ИсточникДанныхКонтекста.Свойство("Получатель") Тогда
		ИсточникДанныхКонтекста.Получатель = Объект.Контрагент;
	КонецЕсли; 
	
	Если ИсточникДанныхКонтекста.Свойство("СчетПолучателя") Тогда
		ИсточникДанныхКонтекста.СчетПолучателя = Объект.БанковскийСчетКонтрагент;
	КонецЕсли; 
	
	Если ИсточникДанныхКонтекста.Свойство("Налог") Тогда
		ИсточникДанныхКонтекста.Налог = Объект.Налог;
	КонецЕсли; 
	
	Если ИсточникДанныхКонтекста.Свойство("ВидНалоговогоОбязательства") Тогда
		ИсточникДанныхКонтекста.ВидНалоговогоОбязательства = Объект.ВидНалоговогоОбязательства;
	КонецЕсли; 
	
	Возврат ИсточникДанныхКонтекста;
	
КонецФункции

// Процедура заполняет список выбора ВидНалоговогоОбязательства.
//
&НаСервере
Процедура ЗаполнитьСписокВыбораВидНалоговогоОбязательства()

	Если НЕ Объект.ПеречислениеВБюджет Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовНалоговыхОбязательств = Перечисления.ВидыПлатежейВГосБюджет.СписокВидовНалоговыхОбязательств(Объект.Налог, Объект.Дата);
	
	Элементы.ВидНалоговогоОбязательства.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокВидовНалоговыхОбязательств Цикл
		Элементы.ВидНалоговогоОбязательства.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВыбораВидНалоговогоОбязательства()

// Процедура заполняет ВидНалоговогоОбязательства.
//
&НаСервере
Процедура ЗаполнитьВидНалоговогоОбязательства(Субконто=Неопределено, ИзменениеНалога=Ложь)

	Если НЕ Объект.ПеречислениеВБюджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Субконто) Тогда
	
		Объект.ВидНалоговогоОбязательства = Субконто;
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидНалоговогоОбязательства)
		ИЛИ ИзменениеНалога Тогда
	
		Объект.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	
	КонецЕсли; 
	
	Если Субконто=Неопределено Тогда
	
		ВидНалоговогоОбязательстваПриИзмененииСервер();
	
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьВидНалоговогоОбязательства()

// Процедура - обработчик события "ПриИзменении" 
//  поля "ВидНалоговогоОбязательства" на сервере.
// 
&НаСервере
Процедура ВидНалоговогоОбязательстваПриИзмененииСервер()
	
	Объект.Субконто1 = Объект.ВидНалоговогоОбязательства;
	
КонецПроцедуры // ВидНалоговогоОбязательстваПриИзмененииСервер()

// Процедура заполняет идентификатор платежа если заполнен флаг -
//  Используется для расчетов по контракту государственного оборонного заказа. 
//
&НаСервере
Процедура ЗаполнитьИдентификаторПлатежаИзГосКонтракта()

	БанкСчет = Объект.БанковскийСчетОрганизация;
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ГосударственныйКонтракт", БанкСчет.Метаданные())
		И ЗначениеЗаполнено(БанкСчет.ГосударственныйКонтракт) Тогда
	
		Объект.ИдентификаторПлатежа = БанкСчет.ГосударственныйКонтракт.Код;
	
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьИдентификаторПлатежаИзГосКонтракта()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
		
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
	
		Заявка = бит_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование
																, "ДоговорКонтрагента, ВидОперации");
	Иначе	
		Заявка = Объект.ДокументОснование;
	КонецЕсли; 
	
	СхемаДвиженияПоПлатежамИзменена = мКэшЗначений.СхемаДвиженияПоПлатежамИзменена;
	
	// Если схема движения документов по платежам изменена.
	Если СхемаДвиженияПоПлатежамИзменена Тогда
		
		ПоРасчетнымДокументам 	  = ?(Объект.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу
									 ,Истина
									 ,Ложь);
				
		ЕстьРасчетыСКонтрагентами = бит_ОбщегоНазначения.ЕстьРасчетыСПоставщикамиПокупателями(ВидОперации);
		
	Иначе
		
		ДоговорОснование = Заявка.ДоговорКонтрагента;
		
		Если ЗначениеЗаполнено(ДоговорОснование) Тогда
			
			// Если это "Бухгалтерия предприятия".
			Если мКэшЗначений.флЭтоБухгалтерияПредприятия Тогда
				
				ПоРасчетнымДокументам = ДоговорОснование.ВедениеВзаиморасчетов = Перечисления["ВедениеВзаиморасчетовПоДоговорам"].ПоРасчетнымДокументам;
				
			Иначе
				ПоРасчетнымДокументам = Истина;
			КонецЕсли; 
			
		Иначе	
			ПоРасчетнымДокументам = Ложь;	  
		КонецЕсли;
		
		ЕстьРасчетыСКонтрагентами = Истина;
		
	КонецЕсли;
	
	Элементы.СпособПогашенияЗадолженности.Видимость = СхемаДвиженияПоПлатежамИзменена И ЕстьРасчетыСКонтрагентами;
	
	Элементы.Сделка.Доступность = ПоРасчетнымДокументам И ЕстьРасчетыСКонтрагентами;
	
	ПараметрыОтображения = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(Объект.ДокументОснование);
	
	// Видимость страниц панели.
	СтраницыПанели = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы;
	
	СтраницыПанели.ГруппаАналитика.Видимость = ПараметрыОтображения.ЭтоПрочее 
											   Или ПараметрыОтображения.ЭтоНалоги 
											   Или ПараметрыОтображения.ЭтоРасчетыПоКредитам 
											   Или ПараметрыОтображения.ЭтоРасчетыКонтраПрочие 
											   Или ПараметрыОтображения.ЭтоЗарплата
											   Или ПараметрыОтображения.ЭтоИнкассация
											   ИЛИ ПараметрыОтображения.ЭтоВыплатаЗПРаботнику;
	
	СтраницыПанели.ГруппаПеревод.Видимость			   = ПараметрыОтображения.ЭтоПеревод;
	СтраницыПанели.ГруппаСчета.Видимость			   = ПараметрыОтображения.ЭтоБезнал И Не ПараметрыОтображения.ЭтоПеревод;
	СтраницыПанели.ГруппаВзнос.Видимость			   = ПараметрыОтображения.ЭтоВзнос;
	СтраницыПанели.ГруппаПеречислениеВБюджет.Видимость = Объект.ПеречислениеВБюджет;
	
	Элементы.Контрагент.Видимость 				= НЕ ПараметрыОтображения.ФизическоеЛицоНеобходим;
	Элементы.РасчетныйСчетКонтрагента.Видимость = НЕ ПараметрыОтображения.ФизическоеЛицоНеобходим ИЛИ ПараметрыОтображения.Дивиденды;
	Элементы.ГруппаСчетаПраво.Видимость 		= НЕ ПараметрыОтображения.ФизическоеЛицоНеобходим ИЛИ ПараметрыОтображения.Дивиденды;
	Элементы.ГруппаСчетаФизЛицо.Видимость 		= ПараметрыОтображения.ФизическоеЛицоНеобходим;
	Элементы.Налог.Видимость 					= ПараметрыОтображения.ЭтоНалоги;
	Элементы.ПоказательТипа.Видимость			= НЕ ПараметрыОтображения.ЭтоНалоги;
	Элементы.Контрагент.АвтоОтметкаНезаполненного = ПараметрыОтображения.КонтрагентОбязателен;
	Элементы.Контрагент.АвтоВыборНезаполненного   = ПараметрыОтображения.КонтрагентОбязателен;
	Элементы.Контрагент.ОтметкаНезаполненного     = ПараметрыОтображения.КонтрагентОбязателен И Не ЗначениеЗаполнено(Объект.Контрагент);
	
	ВидОперацииОснование = Заявка.ВидОперации;
	
	Если ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.СнятиеНаличных Тогда
		Элементы.ГруппаСчетаПраво.Видимость = Ложь;
	КонецЕсли;	
	
	Если ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику 
		ИЛИ ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда
		ИЛИ ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику
		ИЛИ ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов Тогда
		
		Элементы.ПереключательСчетаФизЛица.Видимость = Истина;
		Переключатель = Объект.ПереключательСчетаФизЛица;
		
		Элементы.Контрагент.Видимость 				= НЕ Переключатель;
		Элементы.БанковскийСчетФизЛица.Видимость 	= Переключатель;
		Элементы.РасчетныйСчетКонтрагента.Видимость = НЕ Переключатель;
		Элементы.ГруппаСчетаПраво.Видимость 		= НЕ Переключатель;
		Элементы.Контрагент.ТолькоПросмотр 			= Переключатель;
		
	ИначеЕсли ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДивидендов Тогда
				
		Элементы.ПереключательСчетаФизЛица.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		
		Если ЗначениеЗаполнено(КонтрагентЮрФизЛицо) Тогда
			Элементы.ГруппаСчетаПраво.Видимость   = КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			Элементы.ГруппаСчетаФизЛицо.Видимость = КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			
		Иначе	
			Элементы.ГруппаСчетаПраво.Видимость   = Ложь;
			Элементы.ГруппаСчетаФизЛицо.Видимость = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.ПеречислениеВБюджет.Доступность = ПараметрыОтображения.ЭтоБезнал
											   И (Не ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалога)
											   И (Не ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПереводНаДругойСчет)
											   И (Не ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.СнятиеНаличных)
											   И (Не ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику)
											   И (Не ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда)
											   И (Не ВидОперацииОснование = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП);
											   
	
	Элементы.ВидПеречисленияВБюджет.АвтоОтметкаНезаполненного = Объект.ПеречислениеВБюджет;
	
	Если Не Объект.ПеречислениеВБюджет Тогда
		Элементы.ВидПеречисленияВБюджет.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.ОчередностьПлатежа.Видимость = ПараметрыОтображения.ЭтоБезнал;
	Элементы.ВидПлатежа.Видимость         = ПараметрыОтображения.ЭтоБезнал;
	
	Если мКэшЗначений.флЭтоБухгалтерияПредприятия Тогда
		ОтобразитьКассу = Ложь;
		ОтобразитьКнопкуЗаполнитьПоШаблону = Истина;
	Иначе
		ОтобразитьКассу = Ложь;
		ОтобразитьКнопкуЗаполнитьПоШаблону = Ложь;
	КонецЕсли;
	
	Элементы.Касса.Видимость = ОтобразитьКассу;
	
	Элементы.ЗаполнитьРеквизитыПлатежаВБюджет.Видимость = ОтобразитьКнопкуЗаполнитьПоШаблону;
	
	ВидимостьСписок = ?(Объект.ДокументОснование.Распределение.Количество() > 1, Истина, Ложь);
	
	Элементы.ГруппаРасшифровкаПлатежа.Видимость = ВидимостьСписок;
	Элементы.ГруппаСумма.Видимость  	   = Не ВидимостьСписок;	 
	
	КолонкиРаспределение = Элементы.Распределение.ПодчиненныеЭлементы;
	
	КолонкиРаспределение.РаспределениеДоговорКонтрагента.Видимость = ПараметрыОтображения.ДоговорНеобходим;
	
	Элементы.ПолеСтавкаНДС.Видимость			= НЕ ОперацияБезНДС;
	Элементы.ПолеНДС.Видимость					= НЕ ОперацияБезНДС;
	Элементы.СуммаБезНДС.Видимость				= НЕ ОперацияБезНДС;
	Элементы.РаспределениеСтавкаНДС.Видимость	= НЕ ОперацияБезНДС;
	Элементы.РаспределениеНДС.Видимость			= НЕ ОперацияБезНДС;
	Элементы.РаспределениеИтогНДС.Видимость 	= ВидимостьСписок И НЕ ОперацияБезНДС;
	Элементы.РаспределениеИтогСумма.Видимость 	= ВидимостьСписок И НЕ ОперацияБезНДС;
	
	// Условия оплаты.
	Элементы.УсловиеПоКурсу.Доступность = ?(Объект.ВалютаДокумента = мКэшЗначений.ВалютаРеглУчета, Ложь, Истина);
	
	ЭтоУсловиеПроцент  = ?(Объект.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.ЦБпроц  , Истина, Ложь);
	ЭтоУсловиеОператор = ?(Объект.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.Оператор, Истина, Ложь);
	
	Элементы.Процент.Видимость 		   = ЭтоУсловиеПроцент;
	Элементы.КурсДокумента.Видимость   = Не ЭтоУсловиеПроцент;
	Элементы.КурсДокумента.Доступность = ЭтоУсловиеОператор;
	
	// Видимость аналитики БУ/НУ.
	ВидимостьБУ = Не ПараметрыОтображения.ЭтоРасчетыПоКредитам И Не ПараметрыОтображения.ЭтоРасчетыКонтраПрочие;
	ВидимостьНУ = Объект.ОтражатьВНалоговомУчете 
				  И Не ПараметрыОтображения.ЭтоНалоги 
				  И Не ПараметрыОтображения.ЭтоРасчетыПоКредитам 
				  И Не ПараметрыОтображения.ЭтоРасчетыКонтраПрочие
				  И Не ПараметрыОтображения.ЭтоИнкассация;
	
	УстановитьВидимостьСубконто(Объект.СчетУчетаБУ, ""  , ВидимостьБУ);
	УстановитьВидимостьСубконто(Объект.СчетУчетаНУ, "НУ", ВидимостьНУ);
	
	Элементы.ГруппаСчетаИАналитикаНУ.Видимость = ВидимостьНУ;
	
	Если Объект.ПеречислениеВБюджет Тогда
		УстановитьВидимостьРеквизитовПлатежаВБюджет();
	КонецЕсли;
	
	Элементы.ДекорацияОтраженияВУчете.Видимость = Не СхемаДвиженияПоПлатежамИзменена;
	Элементы.ОтражатьВНалоговомУчете.Видимость  = Не СхемаДвиженияПоПлатежамИзменена;
	
	Если СхемаДвиженияПоПлатежамИзменена Тогда
		Элементы.ГруппаСчетаИАналитикаБУ.Заголовок = "Счет и аналитика:";
	КонецЕсли;
	
	Если Объект.ДатаРасхода >= Дата("20140331") И Объект.ПеречислениеВБюджет = Ложь Тогда
	
		Элементы.ИдентификаторПлатежа.Видимость = Истина;
	
	Иначе	
		Элементы.ИдентификаторПлатежа.Видимость = Ложь;
	КонецЕсли; 
	
	УстановитьНастройкиДоступностиЭлементов();
	
	Если ЗначениеЗаполнено(Объект.ДатаРасхода) Тогда
		
		Элементы.ОчередностьПлатежа.МаксимальноеЗначение = ?(Объект.ДатаРасхода >= '20131214', 5, 6);
		
	Иначе	
		
		Элементы.ОчередностьПлатежа.МаксимальноеЗначение = ?(ТекущаяДатаСеанса() >= '20131214', 5, 6);		
		
	КонецЕсли; 
	
	Элементы.ДекорацияПредупредениеОБлокировкеДокумента.Заголовок = ПричинаБлокировки(Оплачен, Закрыт);
	Элементы.ГруппаДекорацияПредупреждения.Видимость = Оплачен ИЛИ Закрыт;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПричинаБлокировки(Оплачен, Закрыт)
	
	Если Закрыт Тогда 	
		Причина = НСтр("ru = 'закрыт'");
	ИначеЕсли Оплачен Тогда
		Причина = НСтр("ru = 'оплачен'"); 
	Иначе
		Причина = "";
	КонецЕсли; 
	
	Возврат СтрШаблон(НСтр("ru = 'Документ %1. Закройте документ без сохранения.'"), Причина); 
	
КонецФункции
 
// Процедура устанавливает видимость реквизитов для платежа в бюджет.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьВидимостьРеквизитовПлатежаВБюджет()
	
	СтраницыПанелиГруппаПлатежейВБюджет = Элементы.ГруппаПлатежейВБюджет.ПодчиненныеЭлементы;
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		ИмяСтраницыДляУстановки = "ГруппаНалоговыйПлатеж";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		ИмяСтраницыДляУстановки = "ГруппаТаможенныйПлатеж";
		
	Иначе
		ИмяСтраницыДляУстановки = "ГруппаИнойПлатеж";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяСтраницыДляУстановки) Тогда
		Элементы.ГруппаПлатежейВБюджет.ТекущаяСтраница = СтраницыПанелиГруппаПлатежейВБюджет[ИмяСтраницыДляУстановки];
	КонецЕсли;
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
		Если ПериодичностьУплаты = "0" Тогда
			Элементы.ГруппаПоказателяПериода.Видимость = Ложь;
		Иначе
			
			Элементы.ГруппаПоказателяПериода.Видимость = Истина;
			
			Если ПериодичностьУплаты = "-" Тогда
				Элементы.ГруппаПлатежПоПериоду.Видимость = Ложь;
				Элементы.ДатаПлатежа.Видимость 			 = Истина;
			Иначе
				
				Элементы.ГруппаПлатежПоПериоду.Видимость = Истина;
				Элементы.ДатаПлатежа.Видимость 			 = Ложь;
				Элементы.ПериодПлатежа.Видимость         = Не ПериодичностьУплаты = "ГД";
				
				Если ПериодичностьУплаты = "МС" Тогда
					
					Элементы.ПериодПлатежа.МаксимальноеЗначение = 12;
					Элементы.ПериодПлатежа.Заголовок     		= "Месяц:";
					
				ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
					
					Элементы.ПериодПлатежа.МаксимальноеЗначение = 4;
					Элементы.ПериодПлатежа.Заголовок     		= "Квартал:";
					
				ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
					
					Элементы.ПериодПлатежа.МаксимальноеЗначение = 2;
					Элементы.ПериодПлатежа.Заголовок     		= "Полугодие:";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли; // Если это налоговый платеж.

КонецПроцедуры // УстановитьВидимостьРеквизитовПлатежаВБюджет()

// Процедура устанавливает видимость субконто в зависимости от выбранного счета.
// 
// Параметры:
//  Счет		   - ПланСчетовСсылка.
//  Суфикс 		   - Строка.
//  ВидимостьСчета - Булево.
// 
&НаСервере 
Процедура УстановитьВидимостьСубконто(Счет, Суфикс, ВидимостьСчета)
	
	Если Суфикс = "НУ" И мКэшЗначений.СхемаДвиженияПоПлатежамИзменена Тогда
		КоличествоСубконто = 0;
    Иначе
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		КоличествоСубконто = СвСч.КоличествоСубконто;
	КонецЕсли;
	
	Для Ном = 1 По мКэшЗначений.КоличествоСубконтоБУ Цикл
		
		Если ВидимостьСчета И (Ном <= КоличествоСубконто) 
			И (ЗначениеЗаполнено(Счет)) Тогда
			
			ЭлементФормы = Элементы["Субконто" + Суфикс + Ном];
			
			ЭлементФормы.Заголовок = Строка(СвСч["ВидСубконто" + Ном]);
			ЭлементФормы.Видимость = Истина;
			
		Иначе
			Элементы["Субконто" + Суфикс + Ном].Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСубконто()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	ТекущаяДатаПлатежаКрайняя = Объект.ДатаПлатежаКрайняя;
	ТекущаяДатаРасхода 		  = Объект.ДатаРасхода;
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	ЭтотОбъект["Текущая" + ИмяРеквизита] = Объект[ИмяРеквизита];
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = ЭтотОбъект["Текущая" + ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

// Функция определяет синоним для ОКАТО в зависимости от даты платежа.
// 
// Параметры:
//  ДатаРасхода - Дата
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СинонимОкато(ДатаРасхода)

	Результат = ?(ДатаРасхода >= Дата('20140101'),"Код ОКТМО","Код ОКАТО");

	Возврат Результат;
	
КонецФункции // СинонимОкато()

#КонецОбласти

&НаСервере
Процедура РасчетныйСчетКонтрагентаПриИзмененииНаСервере()

	ВывестиИнфНадписи();	
	СформироватьНазначениеПлатежаСервер();
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	// Заполним реквизиты отображающие аналитику по распределению.
	РаспределениеОснования = Объект.ДокументОснование.Распределение;
	
	Если РаспределениеОснования.Количество() > 1 Тогда
		РаспределениеОплаты = Объект.Распределение;
		Для Каждого ТекСтрока Из РаспределениеОплаты Цикл
			СтрокаИсточникАналитики = РаспределениеОснования.Найти(ТекСтрока.ИД, "ИД");
			Если Не СтрокаИсточникАналитики = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекСтрока, СтрокаИсточникАналитики, 
					"ЦФО, СтатьяОборотов, Проект, НоменклатурнаяГруппа, ДоговорКонтрагента");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура расчитывает суммму НДС.
// 
// Параметры:
//  Контейнер - Объект, СтрокаТабличнойЧасти.
// 
&НаКлиенте 
Процедура РассчитатьСуммуНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияКлиентСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС
																	   ,мКэшЗначений.Перечисления.СтавкиНДС);
	
	Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
																	  	,Истина
																		,Истина
																		,СтавкаНДСЧисло);
																							
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура расчитывает суммму без НДС.
// 
// Параметры:
//  Контейнер - Объект, СтрокаТабличнойЧасти.
// 
&НаКлиенте
Процедура РассчитатьСуммуБезНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммаБезНДС = Контейнер.Сумма - Контейнер.НДС;
																							
КонецПроцедуры // РассчитатьСуммуБезНДС()

// Процедура проверяет возможность ввода суммы в строку табличной части Распределение. 
// В случае превышения суммы соответствующей строки в заявки выдается предупреждение и сумма корректируется.
// 
// Параметры:
//  Контейнер - СтрокаТабличнойЧасти.Распределение.
// 
&НаКлиенте 
Процедура ПроверитьОстатокПоСтроке(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстСообщения = "";
	
	ПроцентПревышения = мКэшЗначений.ПроцентПревышенияСуммыЗаявки;
	
	СтруктураСтрокиОстатка = ПолучитьОстаткиПоСтрокеРаспределения(Контейнер.ИД);
	
	// Получим предыдущее значение суммы
	СуммаСтарая = мКэшЗначений.СоответствиеСумм[Контейнер.ИД];
	Если СуммаСтарая = Неопределено Тогда
		мКэшЗначений.СоответствиеСумм.Вставить(Контейнер.ИД, 0);
		СуммаСтарая = 0;
	КонецЕсли;
	
	Если СтруктураСтрокиОстатка = Неопределено Тогда
		Контейнер.Сумма = СуммаСтарая;
		Возврат;
	КонецЕсли; 
	
	ПредельнаяСумма = СтруктураСтрокиОстатка.СуммаЗаявки * (100 + ПроцентПревышения) / 100;
	СуммаКонтроль	= СтруктураСтрокиОстатка.СуммаПП + Контейнер.Сумма;
	СуммаКонтрольСтарая	= СтруктураСтрокиОстатка.СуммаПП + СуммаСтарая;
	
	Если СуммаКонтроль > ПредельнаяСумма Тогда
		
		Если Объект.Распределение.Количество() > 1 Тогда
			
			ТекстПоСтроке  = " (по строке № " + СтруктураСтрокиОстатка.НомерСтроки + " заявки) ";
			ТекстПоСтроке2 = " (по строке № " + СтруктураСтрокиОстатка.НомерСтроки + ") ";			
			
		Иначе
			ТекстПоСтроке  = "";
			ТекстПоСтроке2 = "";			
		КонецЕсли; 
		
		ТекстСообщения = "Сумма платежных позиций "
						 + ТекстПоСтроке
						 + бит_ОбщегоНазначения.ФорматСумм(СуммаКонтроль, Объект.ВалютаДокумента)
						 + " превысила сумму заявки "
						 + ТекстПоСтроке2
						 + бит_ОбщегоНазначения.ФорматСумм(СтруктураСтрокиОстатка.СуммаЗаявки, Объект.ВалютаДокумента);
		
		Если Не ПроцентПревышения = 0 Тогда
			
			ТекстСообщения = ТекстСообщения	
							 + " более чем на "
							 + ПроцентПревышения
							 + "%";
			
		КонецЕсли; 				  
		
		ТекстСообщения = ТекстСообщения + НСтр("ru = '. Сумма платежной позиции будет скорректирована.'");
		
		ПоказатьПредупреждение(,ТекстСообщения, 30);
		
		Если СуммаКонтрольСтарая <= ПредельнаяСумма Тогда
			Контейнер.Сумма = СуммаСтарая;
		Иначе
			Контейнер.Сумма = СтруктураСтрокиОстатка.Сумма;
		КонецЕсли;
		
	КонецЕсли; 
	
	мКэшЗначений.СоответствиеСумм.Вставить(Контейнер.ИД, Контейнер.Сумма);
	
КонецПроцедуры // ПроверитьОстатокПоСтроке()

// Процедура устанавливает параметры выбора банковских счетов.
// 
// Параметры:
//  Элемент - ПолеФормы.
//  ВладелецСчета - СправочникСсылка.Организации, СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораРасчетногоСчета(Элемент, ВладелецСчета)

	Если ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПереводНаДругойСчет") Тогда
	     ВалютаДляОтбора = Объект.ВалютаДокумента;
	Иначе	
		 ВалютаДляОтбора = ?(мКэшЗначений.РасчетыВУЕ, мКэшЗначений.ВалютаРеглУчета, Объект.ВалютаДокумента);
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("Владелец", 			  ВладелецСчета);
    СтруктураОтбора.Вставить("ВалютаДенежныхСредств", ВалютаДляОтбора);
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);

КонецПроцедуры

// Процедура устанавливает показатель периода.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьПоказательПериода()
	
	Если ПериодичностьУплаты = Неопределено Тогда
		ПериодичностьУплаты = "";
	КонецЕсли;
	
	Если ПериодичностьУплаты = "0" Тогда
		
		Объект.ПоказательПериода = "0";
		
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
		
		Объект.ПоказательПериода = Формат(ДатаПлатежа, НСтр("ru='ДФ=дд.ММ.гггг'"));
		
	Иначе
		Объект.ПоказательПериода = ПериодичностьУплаты 
								   + "." + Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=") 
								   + "." + Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
	КонецЕсли;
	
КонецПроцедуры // УстановитьПоказательПериода()

// Процедура устанавливает отборы в формах выбора субконто, такие как
// Организация, Контрагент и др.
// 
// Параметры:
//  Элемент			 - ПолеФормы.
//  СписокПараметров - СписокЗначений.
// 
&НаКлиенте 
Процедура ОбработатьВыборСубконто(Элемент, СписокПараметров)
								 
	ЭлементЗначение = Объект[Элемент.Имя];
	ТипЭлемента 	= ТипЗнч(ЭлементЗначение);
	
	Если ТипЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура;
	
	Если СписокПараметров.Свойство("Контрагент") Тогда
		СтруктураОтбора.Вставить("Контрагент", СписокПараметров.Контрагент);
	КонецЕсли;
	
	Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
		СтруктураОтбора.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
	КонецЕсли;
	
	Если ТипЭлемента 	= Тип("СправочникСсылка.БанковскиеСчета")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		СтруктураОтбора.Вставить("Владелец", Объект.Организация);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтруктураОтбора.Вставить("Организация", бит_ОбщегоНазначения.ГоловнаяОрганизация(Объект.Организация));
		
		Если СписокПараметров.Свойство("Контрагент") Тогда
			СтруктураОтбора.Вставить("Владелец", СписокПараметров.Контрагент);
		КонецЕсли; 

	КонецЕсли;

	// Установим параметры выбора субконто.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // ОбработатьВыборСубконто()

// Процедура заполняет реквизиты отображающие аналитику распределения. Клиент.
// 
// Параметры:
//  СтрокаИсточник - СтрокаТабличнойЧасти.
//  СтрокаПриемник - ДанныеФормыЭлементКоллекции.
// 
&НаКлиенте 
Процедура ЗаполнитьРеквизитыОтображающиеАналитикуРаспределенияКлиент(СтрокаИсточник, СтрокаПриемник)
	
	// Заполним реквизиты отображающие аналитику по распределению.
	СтрокаПриемник.ЦФО 					= СтрокаИсточник.ЦФО;
	СтрокаПриемник.СтатьяОборотов 		= СтрокаИсточник.СтатьяОборотов;
	СтрокаПриемник.Проект 				= СтрокаИсточник.Проект;
	СтрокаПриемник.НоменклатурнаяГруппа = СтрокаИсточник.НоменклатурнаяГруппа;
	СтрокаПриемник.ДоговорКонтрагента 	= СтрокаИсточник.ДоговорКонтрагента;
	
КонецПроцедуры // ЗаполнитьРеквизитыОтображающиеАналитикуРаспределенияКлиент()

// Процедура обрабатывает начало выбора Сделки.
// 
// Параметры:
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораЗначенияСделки(СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("Контрагент" , Объект.Контрагент);
	
	ДоговорКонтрагента = мКэшЗначений.ДоговорОснования;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
		
	// Установим параметры выбора сделки.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.Сделка, СтруктураОтбора);
	
КонецПроцедуры // НачалоВыбораЗначенияСделки()

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

	Закрыт  = (Статус = Справочники.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта);
	Оплачен = ОплаченПолностью();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ОплаченПолностью()
	
	ТипыПлатежныхДокуметов = Новый Массив(); 
	ТипыПлатежныхДокуметов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
	ТипыПлатежныхДокуметов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	// В запросе анализируются документы списания, что бы понимать, что документ оплачен, а не закрыт.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиция", 				Объект.Ссылка);
	Запрос.УстановитьПараметр("ТипыПлатежныхДокуметов", ТипыПлатежныхДокуметов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПринятоКУчету.ДокументПланирования КАК ДокументПланирования,
	|	ПринятоКУчету.СуммаПриход КАК Приход
	|ПОМЕСТИТЬ ВТ_ПринятоКУчету
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(, , , ДокументПланирования = &Позиция) КАК ПринятоКУчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Списано.ДокументПланирования КАК ДокументПланирования,
	|	СУММА(Списано.СуммаРасход) КАК Списано
	|ПОМЕСТИТЬ ВТ_Списания
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(, , Регистратор, ДокументПланирования = &Позиция) КАК Списано
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Списано.Регистратор) В (&ТипыПлатежныхДокуметов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Списано.ДокументПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПринятоКУчету.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ПринятоКУчету.Приход КАК Приход,
	|	ЕСТЬNULL(ВТ_Списания.Списано, 0) КАК Списано,
	|	ВТ_ПринятоКУчету.Приход - ЕСТЬNULL(ВТ_Списания.Списано, 0) КАК Остаток
	|ИЗ
	|	ВТ_ПринятоКУчету КАК ВТ_ПринятоКУчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Списания КАК ВТ_Списания
	|		ПО ВТ_ПринятоКУчету.ДокументПланирования = ВТ_Списания.ДокументПланирования";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОплаченПолностью = Ложь;
	Пока Выборка.Следующий() Цикл
		ОплаченПолностью = (Выборка.Остаток <= 0);
	КонецЦикла;
	
	Возврат ОплаченПолностью;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежаСервер(ТолькоСумму = Ложь, ПричинаИзменения = "", Принудительно = Ложь)
	
	ФормаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ФормаОплаты");
	Если ФормаОплаты <> Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) ИЛИ Объект.НазначениеПлатежа = СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.бит_ПлатежнаяПозиция.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму,, Принудительно);
		СгенерированноеНазначенияПлатежа = Объект.НазначениеПлатежа;
	ИначеЕсли ТолькоСумму И Объект.НазначениеПлатежа <> СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.бит_ПлатежнаяПозиция.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму,, Принудительно);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	Объект.Сумма = Объект.Распределение.Итог("Сумма");
	Объект.НДС 	 = Объект.Распределение.Итог("НДС");
	
КонецПроцедуры
 
#КонецОбласти