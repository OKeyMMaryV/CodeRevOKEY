#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВводНаОсновании        = Ложь;
	ЗаполнитьСодержаниеУСН = Ложь;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Массив") Тогда
		Если ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
			ИЛИ ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
			ЗаполнитьПоВедомостям(ДанныеЗаполнения);
			ВводНаОсновании = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		ВводНаОсновании = Истина;
	ИначеЕсли ЗагрузкаВыпискиПоБанковскомуСчету.ЭтоДанныеБанка(ДанныеЗаполнения) Тогда
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ПлатежноеПоручение) Тогда
			ЗаполнитьДаннымиБанка(ДанныеЗаполнения);
			ЗаполнитьСодержаниеУСН = Истина;
		Иначе
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьДаннымиБанкаОперация(ЭтотОбъект, ДанныеЗаполнения);
			НеизменяемыеДанные = Новый Структура("СуммаДокумента, НазначениеПлатежа");
			ЗаполнитьЗначенияСвойств(НеизменяемыеДанные, ЭтотОбъект);
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения.ПлатежноеПоручение, СуммаДокумента);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, НеизменяемыеДанные);
			
			// Запомним сумму из платежного поручения на случай, если оплачено частично.
			СуммаПлатежногоПоручения = РасшифровкаПлатежа.Итог("СуммаПлатежа");
			Если СуммаПлатежногоПоручения = 0 Тогда
				СуммаПлатежногоПоручения = СуммаДокумента;
			КонецЕсли;
			
			ЗаполнитьСуммыЧастичноеИсполнение(СуммаПлатежногоПоручения);
			
			ДанныеЗаполнения = ДанныеЗаполнения.ПлатежноеПоручение;
			ВводНаОсновании  = Истина;
			
		КонецЕсли;
	ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И Не ДанныеЗаполнения.Свойство("ДанныеЗаполнения") Тогда
		ЗаполнитьПоСтруктуре(ДанныеЗаполнения);
		ВводНаОсновании = Истина;
	КонецЕсли;
	
	// Заполнение счетов учета вызываем самостоятельно в конце текущей процедуры,
	// когда будут окончательно определены все реквизиты (договор и прочие).
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Ложь);
	
	БезЗакрывающихДокументов = УчетКассовымМетодом.БезЗакрывающихДокументов(Организация, Дата, ВидОперации);
	
	Если НЕ Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	//определяем счет банка по валюте
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОплатаВВалюте = ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	Если ОплатаВВалюте И НЕ ЗначениеЗаполнено(СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Нельзя выполнить оплату в валюте %1, т.к. у организации %2 не задан банковский счет в указанной валюте.'"),
			ВалютаДокумента,
			Организация);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.СпособПогашенияЗадолженности.Пустая() Тогда
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
	КонецЦикла;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	//СБ Ванюков К. + //Если Документ заполняется на основании Платежного поручения поставим из него: Ответственного, Статью ДДС, Комментарий
	Если ТипДанныхЗаполнения = Тип("Массив") Тогда
		Если ДанныеЗаполнения <> Неопределено и ДанныеЗаполнения.Количество() > 0 тогда
			Если ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ПлатежноеПоручение") тогда
				//Отказались от Изменения 20-09-08: Инициатор Мокрякова, подтвердила Каинова
				//Ответственный             		= Основание.Ответственный;
				Комментарий               		= ДанныеЗаполнения[0].Комментарий;
				СтатьяДвиженияДенежныхСредств 	= ДанныеЗаполнения[0].СтатьяДвиженияДенежныхСредств;
				Если РасшифровкаПлатежа.Количество() > 0 Тогда
					РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств	= ДанныеЗаполнения[0].СтатьяДвиженияДенежныхСредств;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//СБ Ванюков К.-	
	
	УчетДенежныхСредствБП.ЗаполнитьДоговорКонтрагента(ЭтотОбъект, ДанныеЗаполнения, ОплатаВВалюте);
	
	// Заполняем счета учета по текущим данным объекта.
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ЭтотОбъект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(ЭтотОбъект, ЗаполнитьСодержаниеУСН);
	
	// бит_Финанс изменения кода. Начало.
	// Заполняет реквизиты БИТ.ФИНАНС.
	бит_Казначейство.ОбработкаЗаполненияСписаниеСРасчетногоСчета(ЭтотОбъект, ДанныеЗаполнения);
	// бит_Финанс изменения кода. Конец. 
	
	// ++ 1c-izhtc Клинцов 2016.03.17 (
	// +СБ. Широков Николай. 2014-12-16. Доработка #1192 
	СчетУчетаРасчетовСКонтрагентом 	= СБ_КазначействоСервер.СчетРСБУПоПрофилюРазноски(СБ_ПрофильРазноски);
	
	Способ_НеПогашать 				= ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
	
	СписокОрганизаций_НеПогашатьЗадолженность = Неопределено;
	
	
	//Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	//	ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика) Тогда
		
		СписокОрганизаций_НеПогашатьЗадолженность = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_НеПогашатьЗадолженность");
		
	//КонецЕсли;
	ОрганизацияВСпискеНеПогашать = СписокОрганизаций_НеПогашатьЗадолженность <> Неопределено 
	И СписокОрганизаций_НеПогашатьЗадолженность.НайтиПоЗначению(Организация) <> Неопределено;
	
	Счет_5701 = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	Счет_5721 = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
	
	Если СчетУчетаРасчетовСКонтрагентом = Счет_5701 
		ИЛИ СчетУчетаРасчетовСКонтрагентом = Счет_5721
		Тогда
		
		Если СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			Если РасшифровкаПлатежа.Количество() > 0 Тогда 
				СубконтоКт1 = СБ_КазначействоСервер.ВидПереводовПоСтатьеДДС(РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
		Иначе			
			СубконтоКт1 = СБ_КазначействоСервер.ВидПереводовПоСтатьеДДС(СтатьяДвиженияДенежныхСредств);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		
		Если ОрганизацияВСпискеНеПогашать Тогда
			
			СтрокаПлатеж.СпособПогашенияЗадолженности = Способ_НеПогашать;
			
		КонецЕсли; 
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;	
		
		Если СтрокаПлатеж.СпособПогашенияЗадолженности = Способ_НеПогашать Тогда
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
		
	КонецЦикла; 
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-06-04 (#НТП_МП_ФР07)
	#Область СтарыйКод
	// +СБ. Широков Николай. 2015-05-26. Доработка #1577
	//Если ОрганизацияВСпискеНеПогашать Тогда
	//	ПодразделениеОрганизации = СБ_КазначействоПовтИсп.ПодразделениеПоПрофилюРазноски(Организация, СБ_ПрофильРазноски);
	//КонецЕсли; 
	// -СБ. Широков Николай 	
	#КонецОбласти
	ПодразделениеОрганизации = СБ_КазначействоПовтИсп.ПодразделениеПоПрофилюРазноски(Организация, СБ_ПрофильРазноски);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-06-04 (#НТП_МП_ФР07)
	// -- 1c-izhtc Клинцов 2016.03.17 )	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата                    = ОбщегоНазначения.ТекущаяДатаПользователя();
	Ответственный           = Пользователи.ТекущийПользователь();
	ДокументОснование       = Неопределено;
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = '00010101';
	НомерЧекаККМ            = 0;
	
	УстановитьСчетПриСнятииНаличных();
	
	УстановитьСчетПриПереводеНаДругойСчет();
	
	ПроверитьОбновитьРеквизитыПлатежаВБюджет(ОбъектКопирования);
	
	НалоговыйУчетУСН.ПриКопированииДокумента(ЭтотОбъект, ОбъектКопирования);
	
	Если ОбъектКопирования.БезЗакрывающихДокументов Тогда
		БезЗакрывающихДокументов = УчетКассовымМетодом.БезЗакрывающихДокументов(Организация, Дата, ВидОперации);
	КонецЕсли;
	
	// Все документы по счетам интеграции загружаются из банка.
	// Вручную можно создавать документы только по счетам, для которых не включена интеграция.
	// Поэтому счет интеграции очистим, а интерактивно в документе можно выбрать только счет без интеграции.
	Если ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(СчетОрганизации) Тогда
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	// БИТ_YK_н 02/16
	СБ_ВыгруженВAXAPTA            = Ложь;
	СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
	// БИТ_YK_к
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Отключаем проверку реквизитов шапки.
	
	Если НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
		ПроверкаРеквизитовОрганизации.ОбработкаПроверкиЗаполнения(Организация, СчетОрганизации, Ложь, Отказ);
	КонецЕсли;
	
	Если НЕ Документы.СписаниеСРасчетногоСчета.КонтрагентДолженБытьЗаполнен(ВидОперации) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		
		ВалютаСчетаОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "ВалютаДенежныхСредств");
		ВалютаСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетКонтрагента, "ВалютаДенежныхСредств");
		
		Если ВалютаСчетаОрганизации <> ВалютаСчетаКонтрагента Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Валюта счета получателя ""%1"" не совпадает с валютой документа ""%2""'"), ВалютаСчетаКонтрагента, ВалютаСчетаОрганизации);
			ТекстОшибкиЗаполнения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Счет получателя'"),,, ТекстСообщения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиЗаполнения, ЭтотОбъект, "СчетКонтрагента", "Объект", Отказ);
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("СчетКонтрагента");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если Не Справочники.ВидыНалоговИПлатежейВБюджет.ОрганизацияМожетУплачиватьНалог(Налог, Организация) Тогда
			
			ДопустимыйВидОрганизации = ?(ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация),
				НСтр("ru = 'физическими лицами'"),
				НСтр("ru = 'организациями'"));
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбранный налог (взнос) уплачивается %1'"), ДопустимыйВидОрганизации);
			
			ТекстОшибкиЗаполнения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Налог'"),,, ТекстСообщения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиЗаполнения, ЭтотОбъект, "Налог", "Объект", Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Налог)
			И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(Налог.ВидНалога)
			И Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить()
			И ПеречислениеНДФЛ.Количество() > 0 
			И ПеречислениеНДФЛ.Итог("Сумма") <> СуммаДокумента Тогда
			
			ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка по сотрудникам'");
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "НадписьСуммаДокумента",, Отказ);
			
		КонецЕсли;
		
		Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента
		   И НалоговыйАгентНДС.Количество() = 0 Тогда
		
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Список", "Заполнение",,, НСтр("ru = 'Расшифровка платежа'"),); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, Ссылка, "ПорядокОтраженияБУ",, Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НалоговыйПериод) Тогда
			КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
			Если НалоговыйПериод < КорректныйПериод.НачалоКорректногоПериода
				Или НалоговыйПериод > КорректныйПериод.КонецКорректногоПериода Тогда
				ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru = 'Период'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НалоговыйПериод", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Налог");
		МассивНепроверяемыхРеквизитов.Добавить("ВидНалоговогоОбязательства");
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Налогоплательщик");
	КонецЕсли;
	
	// Заполнение регистрации проверяется при необходимости только в форме документа.
	МассивНепроверяемыхРеквизитов.Добавить("РегистрацияВНалоговомОргане");
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам");
	КонецЕсли;
	
	СообщенияПроверки = Документы.СписаниеСРасчетногоСчета.ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(
		ЭтотОбъект,, Отказ, ПроверяемыеРеквизиты, Ложь); // Счета учета ТЧ РасшифровкиПлатежа проверяются ниже вместе с другими реквизитам документа.
	Документы.СписаниеСРасчетногоСчета.ОбработкаПроверкиЗаполненияПеречислениеЗаработнойПлаты(
		ЭтотОбъект,, Отказ, ПроверяемыеРеквизиты);
	Документы.СписаниеСРасчетногоСчета.ОбработкаПроверкиЗаполненияПеречислениеДепонентов(ЭтотОбъект,, Отказ, ПроверяемыеРеквизиты);
	
	// Отключаем проверку реквизитов, связанных с перечислением заработной платы.
	// Если установлен флаг ручная корректировка - то заполненность полей по заработной плате не проверяем.
	
	Если (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
		И НЕ РучнаяКорректировка Тогда
		
		ПроверятьСоответствиеСуммыДокументаИВедомости = Документы.СписаниеСРасчетногоСчета.ПроверятьСоответствиеСуммыДокументаИВедомостиПоЗарплате();
		
		Если НЕ ПроверятьСоответствиеСуммыДокументаИВедомости
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ПлатежнаяВедомость");
		ПроверятьСоответствиеСуммыДокументаИВедомости = Ложь;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа расшифровке платежа.
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ТекстСообщения);
			Если РасшифровкаПлатежа.Количество() > 1 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "НадписьСуммаДокумента",, Отказ);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомостей на выплату зарплаты.
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		И ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
		
		Если ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа и общая сумма по платежным ведомостям'");
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
			Если ПеречислениеЗаработнойПлаты.Количество() > 1 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "НадписьСуммаДокумента",, Отказ);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка соответствия суммы документа и ведомости на выплату зарплаты.
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		
		Если ПроверятьСоответствиеСуммыДокументаИВедомости Тогда
			Если ЗначениеЗаполнено(ПлатежнаяВедомость) И ЗначениеЗаполнено(Контрагент) Тогда
				
				Ведомости = Новый Массив;
				Ведомости.Добавить(ПлатежнаяВедомость);
				
				ТаблицаНеоплаченныхВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Ложь);
				ТаблицаОплаченныхВедомостей   = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, Ведомости, Контрагент, Истина);
				
				Если ТаблицаНеоплаченныхВедомостей.Количество() = 0 И ТаблицаОплаченныхВедомостей.Количество() = 0 Тогда
					
					ШаблонСообщения = НСтр("ru = 'В выбранной ведомости отсутствуют сведения о заработной плате сотрудника %1.'");
					ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контрагент);
					ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
						"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ШаблонСообщения);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
					
				Иначе
					
					Если ТаблицаОплаченныхВедомостей.Количество() <> 0 Тогда
							ШаблонСообщения = НСтр("ru = 'По текущей ведомости заработная плата сотрудника %1 выплачена ранее.'");
							ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Контрагент);
							
							ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
								"Поле", "Корректность", НСтр("ru = 'Ведомость'"),,, ШаблонСообщения);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПлатежнаяВедомость", "Объект", Отказ);
					Иначе
						СтрокаВедомости = ТаблицаНеоплаченныхВедомостей[0];
						СуммаПоВедомости = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
						
						Если СуммаПоВедомости <> СуммаДокумента Тогда
							ШаблонСообщения = НСтр("ru = 'Не совпадают сумма документа (%1 руб.) и сумма по платежной ведомости (%2 руб.).'");
							ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СуммаДокумента, СуммаПоВедомости);
							
							ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
								"Поле", "Корректность", НСтр("ru = 'Сумма документа'"),,, ШаблонСообщения);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
		И (ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")
		И НЕ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3066)
	Сценарий = ПолучитьСценарийЗаявкиОснования();
	
	Если Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") ИЛИ
		 Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования")
	Тогда 
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Ок_СтатьяОборотовБДР");
	КонецЕсли;							 							
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3066)	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, , СообщенияПроверки, Ложь);
	
	Документы.СписаниеСРасчетногоСчета.СообщитьРезультатПроверки(
		ЭтотОбъект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.СписаниеСРасчетногоСчета.ТабличныеЧасти.РасшифровкаПлатежа);
	
	// Для отдельных видов операций некоторые счета проверяются вне зависимости от настроек пользователя,
	// кроме режима Интеграции с банком
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		И Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПроверяемыеРеквизиты.Добавить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	// Переопределим представление сообщения об ошибке для случая,
	// когда имя и синоним реквизита не соответствуют его роли.
	Сообщили = Новый Массив;
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику
		Или ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		Если ПроверяемыеРеквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено
			И НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет затрат'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "СчетУчетаРасчетовСКонтрагентом", "Объект", Отказ);
			Сообщили.Добавить("СчетУчетаРасчетовСКонтрагентом");
			
		КонецЕсли;
	КонецЕсли;
	
//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 07.08.2015 9:18:37
	Профиль = ПроверяемыеРеквизиты.Найти("СБ_ПрофильРазноски");
	Если Не ЗначениеЗаполнено(Профиль) Тогда
		// +СБ. Широков Николай. 2014-12-02. 
		ПроверяемыеРеквизиты.Добавить("СБ_ПрофильРазноски");
		// -СБ. Широков Николай 
	КонецЕсли;
	
	// БИТ_YK_н Ошибка (функц.) #2236 02/16
	// Проверка реквизита нужна даже если табличная часть скрыта, т.к. данный реквизит используется для выгрузки в Аксапту.
	
	// Нужно попытаться заполнить реквизит СтатьяДвиженияДенежныхСредств ТЧ Расшифровка платежа для случаев,
	// когда ТЧ скрыта.
	Если  ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда 
		Для каждого Стр из РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств) Тогда
				Стр.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//БИТ АКриштопов -- механизм перенесен в процедуру "перед записью"
	СтатьяДДС = ПроверяемыеРеквизиты.Найти("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	Если Не ЗначениеЗаполнено(СтатьяДДС) Тогда
		// +СБ. Широков Николай. 2014-11-25. ТЗ "Казначейство" 2.2.10.2
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		// -СБ. Широков Николай
	КонецЕсли;
	// БИТ_YK_к
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу тогда
		ПроверяемыеРеквизиты.Добавить("СтатьяДвиженияДенежныхСредств");
	КонецЕсли;	
	//-- СВВ}Сапожников Вадим 07.08.2015 9:18:37	
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, Сообщили);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.СписаниеСРасчетногоСчета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-08 (#3066)
	Если Не Отказ Тогда 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-21 (#3491)
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-17 (#3268)
		//СценарийЗНРДС = ПолучитьСценарийЗаявкиОснования();
		//
		//Если ЗначениеЗаполнено(СценарийЗНРДС) И
		//	(СценарийЗНРДС = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") ИЛИ
		//	СценарийЗНРДС = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования")) И
		//	ПроверитьЗаполненностьПолейТЧНеобходимыхДляПроведенияПоБК(Отказ)			 
		//Тогда 
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-17 (#3268)
		//	ПроверитьСоответствиеСтатейБДРИБДДСТЧ(Отказ);
		//	ПроверитьСоответствиеСтатейОборотовДДСИСтатейДДС(Отказ);
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-17 (#3268)
		//КонецЕсли;
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-17 (#3268)
		
		СценарийЗНРДС = ПолучитьСценарийЗаявкиОснования();
		Если 
			(ЗначениеЗаполнено(СценарийЗНРДС) 
				И (СценарийЗНРДС = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") 
					ИЛИ СценарийЗНРДС = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования"))
				ИЛИ ок_ПоИсполнительнымЛистам 
					И бит_РаспределениеБюджета.Количество() > 0
					И ЗначениеЗаполнено(бит_РаспределениеБюджета[0].Аналитика_1))
			И ПроверитьЗаполненностьПолейТЧНеобходимыхДляПроведенияПоБК(Отказ)
		Тогда 
		    Если ок_ПоИсполнительнымЛистам Тогда
				ПроверитьСоответствиеСтатейБДРИБДДСТЧ();
				ПроверитьСоответствиеСтатейОборотовДДСИСтатейДДС();
			Иначе
				ПроверитьСоответствиеСтатейБДРИБДДСТЧ(Отказ);
				ПроверитьСоответствиеСтатейОборотовДДСИСтатейДДС(Отказ);
			КонецЕсли; 
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-21 (#3491)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-08 (#3066)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаВзаиморасчеты  = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
	
	ТаблицаСуммовыхРазниц = УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Отказ);
	
	// Структура таблиц для отражения в налоговом учете УСН
	ТаблицаВыплатаЗарплаты   = УчетЗарплаты.ПолучитьТаблицуВыплатыЗарплатыДляУСН(ПараметрыПроведения.ПеречислениеЗарплаты);
	ТаблицаВыплатаДепонентов = УчетЗарплаты.ПолучитьТаблицуВыплатыЗарплатыДляУСН(ПараметрыПроведения.ПеречислениеДепонентов);
	
	СтруктураТаблицУСН = Новый Структура;
	СтруктураТаблицУСН.Вставить("ТаблицаРасчетов",          ТаблицаВзаиморасчеты);
	СтруктураТаблицУСН.Вставить("ТаблицаВыплатаЗарплаты",   ТаблицаВыплатаЗарплаты);
	СтруктураТаблицУСН.Вставить("ТаблицаПеречислениеНДФЛ",  ПараметрыПроведения.ПеречислениеНДФЛ);
	СтруктураТаблицУСН.Вставить("ТаблицаВыплатаДепонентов", ТаблицаВыплатаДепонентов);
	
	ТаблицаУплатаТорговогоСбораУСН = УчетУСН.ПодготовитьТаблицуУплатыТорговогоСбораДляРаздела5КУДиР(
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.Реквизиты);
	
	// Учет доходов и расходов ИП
	ТаблицыОплатыПоставщикуИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыОплатыПоставщику(
		ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты);
	
	ТаблицаОплатыОСиНМА = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОплатыОСиНМА(
		ТаблицыОплатыПоставщикуИП, 
		ПараметрыПроведения.Реквизиты);
	
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаУслуг,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
	
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаУслуг", ТаблицаУслугИП);
	
	ТаблицыУплатыВзносовФОТИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыУплатыВзносовФОТ(
		ПараметрыПроведения.ПеречислениеНалогаИПТаблица, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВыплатыЗарплатыИП   = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВыплатыЗарплаты(
		ПараметрыПроведения.ПеречислениеЗарплаты, ПараметрыПроведения.Реквизиты);
	
	ТаблицыВыплатыДепонентовИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыВыплатыЗарплаты(
		ПараметрыПроведения.ПеречислениеДепонентов, ПараметрыПроведения.Реквизиты);
	
	ТаблицыПрочихУдержанийИП   = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыПеречислениеПрочихУдержаний(
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.Реквизиты);
		
	ТаблицыУплатаНалогов = Новый Структура("ПеречислениеНалогов, ПеречислениеНДФЛ",
		ПараметрыПроведения.РасшифровкаПлатежаПрочее, ПараметрыПроведения.ПеречислениеНДФЛ);
		
	ТаблицыВыплатаДивидендовФизическомуЛицу = УчетЗарплаты.ПодготовитьТаблицуВыплатаДивидендов(
		ПараметрыПроведения.ВыплатаДивидендов);
		
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчеты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыхРазниц,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПеречислениеВыплатаЗарплаты(ЭтотОбъект, ПараметрыПроведения.ПеречислениеЗарплаты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияОплатаПоДоговорамПодряда(ЭтотОбъект, ПараметрыПроведения.ОплатаПоДоговорамПодряда,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияВыплатаДепонентов(ПараметрыПроведения.ПеречислениеДепонентов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УставныйКапитал.СформироватьДвиженияВыплатаДивидендов(ПараметрыПроведения.ВыплатаДивидендов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияВыплатаДивидендов(ТаблицыВыплатаДивидендовФизическомуЛицу,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПрочееСписание(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПоНалогамИВзносамСФОТ(ПараметрыПроведения.Реквизиты,
		ТаблицыУплатаНалогов, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты, Движения, Отказ);
	
	УчетНДСРаздельный.СформироватьДвиженияКурсовыеРазницыНалоговыйАгент(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчеты, Движения, Отказ);
	
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	УчетУСН.СформироватьДвиженияКУДиРРаздел5(ТаблицаУплатаТорговогоСбораУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
		ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПоставщику(
		ТаблицыОплатыПоставщикуИП, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов,,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаНДФЛ(
		ПараметрыПроведения.ПеречислениеНалогаИПТаблица,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияУплатаВзносовФОТ(
		ТаблицыУплатыВзносовФОТИП.СписокВзносов, ТаблицыУплатыВзносовФОТИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВыплатаЗарплаты(
		ТаблицыВыплатыЗарплатыИП.СписокВыплат, ТаблицыВыплатыЗарплатыИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияВыплатаЗарплаты(
		ТаблицыВыплатыДепонентовИП.СписокВыплат, ТаблицыВыплатыДепонентовИП.СписокПереплат,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПеречислениеПрочихУдержаний(
		ТаблицыПрочихУдержанийИП.СписокОплаченныхРасчетов, ТаблицыПрочихУдержанийИП.СписокОплаченныхУдержаний,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.РегистрацияСведенийОбОплатеОСиНМА(
		ТаблицаОплатыОСиНМА, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	// ПЕРЕОЦЕНКА ВАЛЮТНЫХ ОСТАТКОВ		
	// +СБ. Широков Николай. 2015-08-19. Доработка #1704
	//ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
	//	ПараметрыПроведения.Реквизиты, Движения, Отказ);
	//
	//УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
	//	ПараметрыПроведения.Реквизиты, Движения, Отказ);
	//
	//УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
	//	ПараметрыПроведения.Реквизиты, Движения, Отказ);	
	СписокОрганизаций_НеПогашатьЗадолженность = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_НеПогашатьЗадолженность");
	Если НЕ (СписокОрганизаций_НеПогашатьЗадолженность <> Неопределено 
		И СписокОрганизаций_НеПогашатьЗадолженность.НайтиПоЗначению(Организация) <> Неопределено) Тогда
		ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
		УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
	КонецЕсли;
	// СБ- Широков Николай. 2015-08-19. Доработка #1704
	
	Если НЕ ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
	
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-21 (#3066)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-17 (#3268)
	Если ЗначениеЗаполнено(СценарийЗНРДС) И (
		СценарийЗНРДС = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") ИЛИ
		СценарийЗНРДС = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования"))
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-21 (#3491)
		ИЛИ ок_ПоИсполнительнымЛистам 
			И бит_РаспределениеБюджета.Количество() > 0
			И ЗначениеЗаполнено(бит_РаспределениеБюджета[0].Аналитика_1)
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-21 (#3491)
	Тогда 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-17 (#3268)
		ДвиженияПоРегистрамБК(ПараметрыПроведения);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-17 (#3268)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-17 (#3268)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-21 (#3066)
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-21 (#3066)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-12 (#3491)
//Процедура ДвиженияПоРегистрамБК(ПараметрыПроведения)
Процедура ДвиженияПоРегистрамБК(ПараметрыПроведения) Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-12 (#3491)

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ТЧРаспределение.бит_ЦФО КАК ЦФО,
	//|	ТЧРаспределение.бит_СтатьяОборотов КАК СтатьяДДС,
	//|	ТЧРаспределение.бит_СтатьяОборотов.ВидСтатьи КАК ВидСтатьиДДС,
	//|	ТЧРаспределение.бит_Проект КАК Проект,
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	////|	ТЧРаспределение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	////Заменено на:
	//|	СписаниеСРасчетногоСчета.Контрагент КАК Контрагент,
	//|	СписаниеСРасчетногоСчета.ДоговорКонтрагента КАК ДоговорКонтрагента,
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)	
	//|	ТЧРаспределение.бит_Аналитика_1 КАК Аналитика_1,
	//|	ТЧРаспределение.бит_Аналитика_2 КАК Аналитика_2,
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-10 (#3491)
	//|	ТЧРаспределение.бит_Аналитика_4 КАК Аналитика_4,
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-10 (#3491)
	//|	ТЧРаспределение.СуммаПлатежа - ТЧРаспределение.СуммаНДС КАК СуммаБезНДС,
	//|	ТЧРаспределение.СуммаНДС КАК НДС,
	//|	ТЧРаспределение.ок_СтатьяОборотовБДР КАК СтатьяБДР,
	//|	ТЧРаспределение.ок_СтатьяОборотовБДР.ВидСтатьи КАК ВидСтатьиБДР,
	//|	ТЧРаспределение.Ссылка КАК Ссылка
	//|ПОМЕСТИТЬ ВТ0_ИсходныеДанные
	//|ИЗ
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	//|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)
	//|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТЧРаспределение
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	//|		ПО ТЧРаспределение.Ссылка = СписаниеСРасчетногоСчета.Ссылка
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)
	//|ГДЕ
	//|	ТЧРаспределение.Ссылка = &Ссылка
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	//|	И СписаниеСРасчетногоСчета.Ссылка = &Ссылка
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)
	//|	И (ВЫРАЗИТЬ(ТЧРаспределение.бит_Аналитика_1 КАК Документ.бит_ФормаВводаБюджета)) <> ЗНАЧЕНИЕ(Документ.бит_ФормаВводаБюджета.ПустаяСсылка)
	пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	битРаспределениеБюджета.ЦФО КАК ЦФО,
	|	битРаспределениеБюджета.СтатьяОборотов КАК СтатьяДДС,
	|	битРаспределениеБюджета.СтатьяОборотов.ВидСтатьи КАК ВидСтатьиДДС,
	|	битРаспределениеБюджета.Проект КАК Проект,
	|	СписаниеСРасчетногоСчета.Контрагент КАК Контрагент,
	|	СписаниеСРасчетногоСчета.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	битРаспределениеБюджета.Аналитика_1 КАК Аналитика_1,
	|	битРаспределениеБюджета.Аналитика_2 КАК Аналитика_2,
	|	битРаспределениеБюджета.Аналитика_4 КАК Аналитика_4,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-07 (#3900)
	//|	битРаспределениеБюджета.СуммаПлатежа - ТЧРаспределение.СуммаНДС КАК СуммаБезНДС,
	|	битРаспределениеБюджета.СуммаПлатежа - битРаспределениеБюджета.СуммаНДС КАК СуммаБезНДС,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-07 (#3900)
	|	битРаспределениеБюджета.СуммаНДС КАК НДС,
	|	ТЧРаспределение.ок_СтатьяОборотовБДР КАК СтатьяБДР,
	|	ТЧРаспределение.ок_СтатьяОборотовБДР.ВидСтатьи КАК ВидСтатьиБДР,
	|	ТЧРаспределение.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ0_ИсходныеДанные
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТЧРаспределение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.бит_РаспределениеБюджета КАК битРаспределениеБюджета
	|				ПО битРаспределениеБюджета.Ссылка = ТЧРаспределение.Ссылка
	|				И битРаспределениеБюджета.бит_КлючСтроки = ТЧРаспределение.бит_КлючСтроки
	|			ПО ТЧРаспределение.Ссылка = СписаниеСРасчетногоСчета.Ссылка
	|ГДЕ
	|	ТЧРаспределение.Ссылка = &Ссылка
	|	И СписаниеСРасчетногоСчета.Ссылка = &Ссылка
	|	И (ВЫРАЗИТЬ(битРаспределениеБюджета.Аналитика_1 КАК Документ.бит_ФормаВводаБюджета)) <> ЗНАЧЕНИЕ(Документ.бит_ФормаВводаБюджета.ПустаяСсылка)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСтатьиДДС,
	|	ВидСтатьиБДР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ0_ИсходныеДанные.ВидСтатьиБДР = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ЗаявкаНаОплату_И)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ЗаявкаНаОплату_У)
	|	КОНЕЦ КАК Сценарий,
	|	ВТ0_ИсходныеДанные.ЦФО КАК ЦФО,
	|	ВТ0_ИсходныеДанные.СтатьяБДР КАК СтатьяБДР,
	|	ВТ0_ИсходныеДанные.Аналитика_2 КАК Аналитика_2,
	|	ВТ0_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	|	ВТ0_ИсходныеДанные.Контрагент КАК Контрагент,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)
	|	ВТ0_ИсходныеДанные.Проект КАК Проект,
	|	ВТ0_ИсходныеДанные.Аналитика_1 КАК Аналитика_1,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-10 (#3491)
	|	ВТ0_ИсходныеДанные.Аналитика_4 КАК Аналитика_4,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-10 (#3491)
	|	ВТ0_ИсходныеДанные.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ0_ИсходныеДанные.НДС КАК НДС,
	|	ВТ0_ИсходныеДанные.СтатьяДДС КАК СтатьяДДС,
	|	ВТ0_ИсходныеДанные.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ01_ИсходнаяДляОборотов
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ01_ИсходнаяДляОборотов.Сценарий КАК Сценарий,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-15 (#3270)
	|	Истина КАК Активность,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-15 (#3270)
	|	ВЫРАЗИТЬ(СоответствияСценариев.ЗначениеСсылка КАК Справочник.СценарииПланирования) КАК СценарийКонтролируемый,
	|	ВТ01_ИсходнаяДляОборотов.ЦФО КАК ЦФО,
	|	ВТ01_ИсходнаяДляОборотов.СтатьяБДР КАК СтатьяБДР,
	|	ВТ01_ИсходнаяДляОборотов.Аналитика_2 КАК Аналитика_2,
	|	ВТ01_ИсходнаяДляОборотов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	|	ВТ01_ИсходнаяДляОборотов.Контрагент КАК Контрагент,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)
	|	ВТ01_ИсходнаяДляОборотов.Проект КАК Проект,
	|	ВТ01_ИсходнаяДляОборотов.Аналитика_1 КАК Аналитика_1,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-10 (#3491)
	|	ВТ01_ИсходнаяДляОборотов.Аналитика_4 КАК Аналитика_4,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-10 (#3491)
	|	ВТ01_ИсходнаяДляОборотов.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ01_ИсходнаяДляОборотов.НДС КАК НДС,
	|	ВТ01_ИсходнаяДляОборотов.СтатьяДДС КАК СтатьяДДС,
	|	ВТ01_ИсходнаяДляОборотов.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ01_ИсходнаяДляОборотов КАК ВТ01_ИсходнаяДляОборотов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_НастройкиБК КАК СоответствияСценариев
	|		ПО (ВТ01_ИсходнаяДляОборотов.Сценарий = (ВЫРАЗИТЬ(СоответствияСценариев.ИмяНастройки КАК Справочник.СценарииПланирования)))
	|			И (СоответствияСценариев.Группа = ""Контролируемый сценарий"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ01_ИсходнаяДляОборотов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ0_ИсходныеДанные.ЦФО КАК ЦФО,
	|	ВЫБОР
	|		КОГДА ВТ0_ИсходныеДанные.ВидСтатьиБДР = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ЗаявкаНаОплату_И)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ЗаявкаНаОплату_У)
	|	КОНЕЦ КАК Сценарий,
	|	ВТ0_ИсходныеДанные.Проект КАК Проект,
	|	ВТ0_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	|	ВТ0_ИсходныеДанные.Контрагент КАК Контрагент,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)
	|	ВТ0_ИсходныеДанные.Аналитика_1 КАК Аналитика_1,
	|	ВТ0_ИсходныеДанные.Аналитика_2 КАК Аналитика_2,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-10 (#3491)
	|	ВТ0_ИсходныеДанные.Аналитика_4 КАК Аналитика_4,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-10 (#3491)
	|	ВТ0_ИсходныеДанные.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ0_ИсходныеДанные.НДС КАК НДС,
	|	ВТ0_ИсходныеДанные.СтатьяБДР КАК СтатьяОборотов,
	|	ВТ0_ИсходныеДанные.Ссылка КАК Регистратор,
	|	ИСТИНА КАК ЭтоСтатьяБДР
	|ПОМЕСТИТЬ ВТ1_ДанныеСоСценариямиПоСтатьям
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ0_ИсходныеДанные.ЦФО,
	|	ВЫБОР
	|		КОГДА ВТ0_ИсходныеДанные.ВидСтатьиДДС = ЗНАЧЕНИЕ(Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ЗаявкаНаОплату_И)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ЗаявкаНаОплату_У)
	|	КОНЕЦ,
	|	ВТ0_ИсходныеДанные.Проект,
	|	ВТ0_ИсходныеДанные.ДоговорКонтрагента,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	|	ВТ0_ИсходныеДанные.Контрагент КАК Контрагент,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)
	|	ВТ0_ИсходныеДанные.Аналитика_1,
	|	ВТ0_ИсходныеДанные.Аналитика_2,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-10 (#3491)
	|	ВТ0_ИсходныеДанные.Аналитика_4 КАК Аналитика_4,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-10 (#3491)
	|	ВТ0_ИсходныеДанные.СуммаБезНДС,
	|	ВТ0_ИсходныеДанные.НДС,
	|	ВТ0_ИсходныеДанные.СтатьяДДС,
	|	ВТ0_ИсходныеДанные.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ0_ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.ЦФО КАК ЦФО,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-15 (#3270)
	|	Истина КАК Активность,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-15 (#3270)
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Сценарий КАК Сценарий,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Проект КАК Проект,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Аналитика_1 КАК Аналитика_1,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Аналитика_2 КАК Аналитика_2,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-10 (#3491)
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Аналитика_4 КАК Аналитика_4,
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-10 (#3491)
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.СуммаБезНДС КАК СуммаСценарийИсполнение,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.НДС КАК НДСИсполнение,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.СтатьяОборотов КАК СтатьяОборотов,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(СоответствияСценариев.ЗначениеСсылка КАК Справочник.СценарииПланирования) КАК СценарийКонтролируемый,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.ЭтоСтатьяБДР КАК ЭтоСтатьяБДР,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3494)
	//|	ВТ1_ДанныеСоСценариямиПоСтатьям.ДоговорКонтрагента.Владелец КАК Контрагент
	//Заменено на:
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Контрагент КАК Контрагент
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3494)

	|ИЗ
	|	ВТ1_ДанныеСоСценариямиПоСтатьям КАК ВТ1_ДанныеСоСценариямиПоСтатьям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_НастройкиБК КАК СоответствияСценариев
	|		ПО (ВТ1_ДанныеСоСценариямиПоСтатьям.Сценарий = (ВЫРАЗИТЬ(СоответствияСценариев.ИмяНастройки КАК Справочник.СценарииПланирования)))
	|			И (СоответствияСценариев.Группа = ""Контролируемый сценарий"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ1_ДанныеСоСценариямиПоСтатьям");
	
	пЗапрос.УстановитьПараметр("Ссылка"	,	Ссылка);
	
	РезультатПакета = пЗапрос.ВыполнитьПакет();
	
	стрЗаполненияСумм = Новый Структура;
	стрЗаполненияСумм.Вставить("Дата", Дата('00010101'));
	стрЗаполненияСумм.Вставить("ВалютаРегламентированногоУчета"	, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	стрЗаполненияСумм.Вставить("бит_ВалютаУправленческогоУчета"	, Константы.бит_ВалютаУправленческогоУчета.Получить());
	
	СтрКурсаДокумента = бит_КурсыВалют.ПолучитьКурсВалюты(ПараметрыПроведения.Реквизиты[0].ВалютаДокумента, ПараметрыПроведения.Реквизиты[0].Период);
	
	ОК_ID_Разноска_ДокОснования = "";
	
	пПлатежнаяПозиция = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Ссылка,
									   	   ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция"), ПредопределенноеЗначение("Документ.бит_ПлатежнаяПозиция.ПустаяСсылка"));
	Если ЗначениеЗаполнено(пПлатежнаяПозиция) Тогда 
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-17 (#3389)
		ОК_ID_Разноска_ДокОснования = рс_ОбщийМодуль.ОбработатьID(пПлатежнаяПозиция.ДокументОснование.ОК_ID_Разноска_ДокОснования);
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-17 (#3389)
	КонецЕсли;
	
	//КЗБ
	Выборка = РезультатПакета[РезультатПакета.Количество()-2].Выбрать();
	
	пТаблицаДвижений = Движения.бит_КонтрольныеЗначенияБюджетов.Выгрузить();
	пТаблицаДвижений.Очистить();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
	ОперационыйСценарийПланирования	   					= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования");
	ИнвестиционныйСценарийПланирования 					= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования");
	ОперационыйСценарийПланирования_Контролируемый 		= бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий", ОперационыйСценарийПланирования);
	ИнвестиционныйСценарийПланирования_Контролируемый 	= бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий", ИнвестиционныйСценарийПланирования);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		
	
	Пока Выборка.Следующий() Цикл 
		
		пДвижение = пТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(пДвижение, Выборка);
		
		пДвижение.Период 	  = ПараметрыПроведения.Реквизиты[0].Период;
								
		пДвижение.Контрагент		 = Выборка.Контрагент;
		пДвижение.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;	
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-10 (#3491)
		//пДвижение.Аналитика_4 = ОК_ID_Разноска_ДокОснования;
		Если ок_ПоИсполнительнымЛистам Тогда
			пДвижение.Аналитика_4 = Выборка.Аналитика_4;
		Иначе
			пДвижение.Аналитика_4 = ОК_ID_Разноска_ДокОснования;
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-10 (#3491)
				
		//Только исполнение
		СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(пДвижение.СуммаСценарийИсполнение
		, ПараметрыПроведения.Реквизиты[0].ВалютаДокумента
		, стрЗаполненияСумм.ВалютаРегламентированногоУчета
		, СтрКурсаДокумента.Курс
		, 1
		, СтрКурсаДокумента.Кратность
		, 1);
		
		
		пДвижение.СуммаСценарийИсполнение = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(СуммаРегл, ПараметрыПроведения.Реквизиты[0].Период, пДвижение.Сценарий, стрЗаполненияСумм);			 
		
		пДвижение.СуммаСценарийИсполнениеСНДС = пДвижение.СуммаСценарийИсполнение;
		
		пДвижение.бит_БК_Организация = ПараметрыПроведения.Реквизиты[0].Организация;
		
		Если Выборка.НДСИсполнение<>0 Тогда 
			
			НДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.НДСИсполнение
																			, ПараметрыПроведения.Реквизиты[0].ВалютаДокумента
																			, стрЗаполненияСумм.ВалютаРегламентированногоУчета
																			, СтрКурсаДокумента.Курс
																			, 1
																			, СтрКурсаДокумента.Кратность
																			, 1);
			
			пДвижение.СуммаСценарийИсполнениеСНДС = пДвижение.СуммаСценарийИсполнениеСНДС + 
			бит_МеханизмТрансляции.ПересчитатьРеглСценарий(НДСРегл, ПараметрыПроведения.Реквизиты[0].Период, пДвижение.Сценарий, стрЗаполненияСумм);			 
			
			
			
		КонецЕсли;						
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
		Если Выборка.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
			
			пДвижение.Сценарий 					= ОперационыйСценарийПланирования;
			пДвижение.СценарийКонтролируемый	= ОперационыйСценарийПланирования_Контролируемый;
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-20 (#4390)
			//пДвижение.Проект 					= ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-20 (#4390)
			
		ИначеЕсли Выборка.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			
			пДвижение.Сценарий 					= ИнвестиционныйСценарийПланирования;			
			пДвижение.СценарийКонтролируемый	= ИнвестиционныйСценарийПланирования_Контролируемый;
			
		КонецЕсли;	
				
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		
	КонецЦикла;
	
	пДвиженияКЗБ = Движения.бит_КонтрольныеЗначенияБюджетов;
	пДвиженияКЗБ.Записывать = Истина;
	пДвиженияКЗБ.мТаблицаДвижений = пТаблицаДвижений;
	пДвиженияКЗБ.ДобавитьДвижение();
	
	
	//ОпБ 	
	пТаблицаДвижений = Движения.бит_ОборотыПоБюджетам.Выгрузить();
	пТаблицаДвижений.Очистить();
	
	Выборка = РезультатПакета[2].Выбрать();
	
	пКонтрагент = Ссылка.Контрагент;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-14 (#3270)
	пИндексДвижения = 1;	
	пТаблицаСоответствия = Движения.бит_СоответствиеЗаписейТрансляции.Выгрузить();
	ОбСистемы_ОПБ = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "РегистрНакопления.бит_ОборотыПоБюджетам");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-14 (#3270)	
	
	Пока Выборка.Следующий() Цикл 
		
		//Движение по статье БДР
		пДвижение = пТаблицаДвижений.Добавить();
				
		ЗаполнитьЗначенияСвойств(пДвижение, Выборка);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-04 (#3066)
		пДвижение.Сценарий = Выборка.СценарийКонтролируемый;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-04 (#3066)
		
		пДвижение.Период = ПараметрыПроведения.Реквизиты[0].Период;
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-01-10 (#3491)
		//пДвижение.Аналитика_4 	 = ОК_ID_Разноска_ДокОснования;
		Если ок_ПоИсполнительнымЛистам Тогда
			пДвижение.Аналитика_4 = Выборка.Аналитика_4;
		Иначе
			пДвижение.Аналитика_4 = ОК_ID_Разноска_ДокОснования;
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-01-10 (#3491)
						
		пДвижение.Валюта 	  	 = ПараметрыПроведения.Реквизиты[0].ВалютаДокумента;
		
		пДвижение.СтатьяОборотов = Выборка.СтатьяБДР;
		
		пДвижение.Контрагент		 = пКонтрагент;
		пДвижение.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;			
		
		пДвижение.Сумма		= Выборка.СуммаБезНДС;
		пДвижение.СуммаСНДС = Выборка.СуммаБезНДС + Выборка.НДС; 
		
		пДвижение.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(пДвижение.Сумма
												, ПараметрыПроведения.Реквизиты[0].ВалютаДокумента
												, стрЗаполненияСумм.ВалютаРегламентированногоУчета
												, СтрКурсаДокумента.Курс
												, 1
												, СтрКурсаДокумента.Кратность
												, 1);
												
		пДвижение.СуммаСНДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(пДвижение.СуммаСНДС
												, ПараметрыПроведения.Реквизиты[0].ВалютаДокумента
												, стрЗаполненияСумм.ВалютаРегламентированногоУчета
												, СтрКурсаДокумента.Курс
												, 1
												, СтрКурсаДокумента.Кратность
												, 1);
		
		Если пДвижение.СуммаРегл<>0 Тогда 
			пДвижение.СуммаСценарий = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаРегл, ПараметрыПроведения.Реквизиты[0].Период, пДвижение.Сценарий, стрЗаполненияСумм);			 
			пДвижение.СуммаУпр	    = бит_МеханизмТрансляции.ПересчитатьРеглУпр(пДвижение.СуммаРегл, ПараметрыПроведения.Реквизиты[0].Период, стрЗаполненияСумм);	
		КонецЕсли;
				
		Если пДвижение.СуммаСНДСРегл<>0 Тогда 
			пДвижение.СуммаСНДССценарий = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаСНДСРегл, ПараметрыПроведения.Реквизиты[0].Период, пДвижение.Сценарий, стрЗаполненияСумм);			 
			пДвижение.СуммаСНДСУпр 	    = бит_МеханизмТрансляции.ПересчитатьРеглУпр(пДвижение.СуммаСНДСРегл, ПараметрыПроведения.Реквизиты[0].Период, стрЗаполненияСумм);
		КонецЕсли;		
			
		пДвижение.бит_БК_Организация = ПараметрыПроведения.Реквизиты[0].Организация;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-14 (#3270)				
		пДвижение.НомерСтроки = пИндексДвижения;	
		пИндексДвижения = пИндексДвижения + 1;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-14 (#3270)
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
		Если Выборка.СтатьяБДР.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
			пДвижение.Сценарий = ОперационыйСценарийПланирования_Контролируемый;
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-20 (#4390)
			//пДвижение.Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-20 (#4390)
		ИначеЕсли Выборка.СтатьяБДР.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			пДвижение.Сценарий = ИнвестиционныйСценарийПланирования_Контролируемый;
		КонецЕсли;	
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		
		
		//Движение по статье ДДС
		пДвижениеДДС = пТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(пДвижениеДДС, пДвижение);
		пДвижениеДДС.СтатьяОборотов = Выборка.СтатьяДДС;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-14 (#3270)
		пДвижениеДДС.НомерСтроки = пИндексДвижения;
				
		пДвижениеПоСоответствию	= пТаблицаСоответствия.Добавить();
		
		пДвижениеПоСоответствию.Период	 		 	 = ПараметрыПроведения.Реквизиты[0].Период;
		пДвижениеПоСоответствию.Активность 		 	 = Истина;
		пДвижениеПоСоответствию.Источник 		 	 = ОбСистемы_ОПБ;
		пДвижениеПоСоответствию.Приемник			 = ОбСистемы_ОПБ;
		пДвижениеПоСоответствию.Организация			 = Организация;
		пДвижениеПоСоответствию.НомерСтрокиИсточника = пДвижение.НомерСтроки;		
		пДвижениеПоСоответствию.НомерСтрокиПриемника = пДвижениеДДС.НомерСтроки;		
		
		пИндексДвижения = пИндексДвижения + 1;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-14 (#3270)
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
		Если Выборка.СтатьяДДС.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
			пДвижениеДДС.Сценарий = ОперационыйСценарийПланирования_Контролируемый;
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Начало 2021-10-20 (#4390)
			//пДвижениеДДС.Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
			// ОКЕЙ Сафронов А.А. (СофтЛаб) Конец 2021-10-20 (#4390)
		ИначеЕсли Выборка.СтатьяДДС.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			пДвижениеДДС.Сценарий = ИнвестиционныйСценарийПланирования_Контролируемый;
		КонецЕсли;	
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)		
		
	КонецЦикла;
	
	пДвиженияОпБ = Движения.бит_ОборотыПоБюджетам;
	пДвиженияОпБ.Записывать = Истина;
	пДвиженияОпБ.мТаблицаДвижений = пТаблицаДвижений;
	пДвиженияОпБ.ДобавитьДвижение();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-14 (#3270)		
	пДвиженияСоответстивия = Движения.бит_СоответствиеЗаписейТрансляции;
	пДвиженияСоответстивия.Записывать = Истина;
	пДвиженияСоответстивия.Загрузить(пТаблицаСоответствия);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-14 (#3270)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-12 (#3491)
	//Если ок_ПоИсполнительнымЛистам Тогда
	//
	//	ДополнитьДвиженияКЗБПоОпБ(ПараметрыПроведения);
	//	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-13 (#3654)
	//	//ДополнитьДвиженияПоОпБ();
	//	//Заменено на:
	//	ДополнитьДвиженияПоОпБ(ОбСистемы_ОПБ,ПараметрыПроведения);
	//	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-13 (#3654)		
	//
	//КонецЕсли; 
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-12 (#3491)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)
	
КонецПроцедуры //ДвиженияПоРегистрамБК()

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-21 (#3491)
//Процедура ПроверитьСоответствиеСтатейБДРИБДДСТЧ(Отказ)
Процедура ПроверитьСоответствиеСтатейБДРИБДДСТЧ(Отказ = Ложь, ВыводитьСообщенияОбОшибках = Истина, пТекстОшибки = "") Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-21 (#3491)
	
	ОперационыйСценарийПланирования	   = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования");
	ИнвестиционныйСценарийПланирования = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования");
	
	Сценарий = ПолучитьСценарийЗаявкиОснования();
							
	Если Сценарий<>ОперационыйСценарийПланирования И
		 Сценарий<>ИнвестиционныйСценарийПланирования
		 //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-21 (#3491)
		 И НЕ ок_ПоИсполнительнымЛистам
		 //ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-21 (#3491)
	Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|		ПО (СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ок_СтатьяОборотовБДР = (ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.бит_СтатьиОборотов)))
	|			И (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//|			И (СписаниеСРасчетногоСчетаРасшифровкаПлатежа.бит_СтатьяОборотов <> (ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.бит_СтатьиОборотов)))
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	|			И (СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ок_СтатьяОборотовБДР <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
	|			И (СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = &Ссылка)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.бит_РаспределениеБюджета КАК СписаниеСРасчетногоСчетабит_РаспределениеБюджета
	|		ПО СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Ссылка
	|		И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.бит_КлючСтроки = СписаниеСРасчетногоСчетабит_РаспределениеБюджета.бит_КлючСтроки
	|		И СписаниеСРасчетногоСчетабит_РаспределениеБюджета.СтатьяОборотов <> (ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.бит_СтатьиОборотов))
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-10 (#3654)
	|			И (СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СуммаПлатежа >= 0)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-10 (#3654)	
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка"	 , Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	ИначеЕсли РасшифровкаПлатежа.Количество()=1 Тогда 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-1-30 #3491)
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3240)
		////ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Статья оборотов БДР не соответствует статье оборотов ДДС документа'"),,,,Отказ);
		////Заменено на:
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Статья ДДС не соответствует статье оборотов БДР'"),,,,Отказ);
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3240)		
		пТекстОшибки = НСтр("ru = 'Статья ДДС не соответствует статье оборотов БДР'");
		Если ВыводитьСообщенияОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-30 #3491)
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	пСтрокиОшибки = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		пСтрокиОшибки = пСтрокиОшибки + "," + ВыборкаДетальныеЗаписи.НомерСтроки;
	КонецЦикла;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3240)
	//пТекстОшибки = НСтр("ru = 'Статья оборотов БДР не соответствует статье оборотов ДДС документа в следующих строках: %1'");
	//Заменено на:
	пТекстОшибки = НСтр("ru = 'Статья ДДС не соответствует статье оборотов БДР в следующих строках: %1'");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3240)
	
	пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, Сред(пСтрокиОшибки,2));
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-1-30 #3491)
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);
	Если ВыводитьСообщенияОбОшибках Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-30 #3491)
		
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-21 (#3491)
//Процедура ПроверитьСоответствиеСтатейОборотовДДСИСтатейДДС(Отказ)
Процедура ПроверитьСоответствиеСтатейОборотовДДСИСтатейДДС(Отказ = Ложь, ВыводитьСообщенияОбОшибках = Истина, пТекстОшибки = "") Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-21 (#3491)
	
	ОперационыйСценарийПланирования	   = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования");
	ИнвестиционныйСценарийПланирования = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования");
	
	Сценарий = ПолучитьСценарийЗаявкиОснования();
								
	Если Сценарий<>ОперационыйСценарийПланирования И
		 Сценарий<>ИнвестиционныйСценарийПланирования
		 //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-21 (#3491)
		 И НЕ ок_ПоИсполнительнымЛистам
		 //ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-21 (#3491)
	Тогда 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.бит_СтатьяОборотов КАК бит_СтатьяОборотов,
	|	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.СтатьяОборотов КАК бит_СтатьяОборотов,
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ ВТ0_ДанныеДляПроверки
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.бит_РаспределениеБюджета КАК СписаниеСРасчетногоСчетабит_РаспределениеБюджета
	|		ПО СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Ссылка
	|		И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.бит_КлючСтроки = СписаниеСРасчетногоСчетабит_РаспределениеБюджета.бит_КлючСтроки
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	|ГДЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ок_СтатьяОборотовБДР <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.бит_СтатьяОборотов <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	|	И СписаниеСРасчетногоСчетабит_РаспределениеБюджета.СтатьяОборотов <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	бит_СтатьяОборотов
	|;
	|
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-03 (#3816) вместо МАКСИМУМ проверяем все соответствия по статье, если нашли, то "Ок".
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов КАК СтатьяОборотов,
	//|	МАКСИМУМ(бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл) КАК СтатьяРегл
	//|ПОМЕСТИТЬ ВТ1_Эталон
	//|ИЗ
	//|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ0_ДанныеДляПроверки КАК ВТ0_ДанныеДляПроверки
	//|		ПО бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов = ВТ0_ДанныеДляПроверки.бит_СтатьяОборотов
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	СтатьяОборотов,
	//|	СтатьяРегл
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ0_ДанныеДляПроверки.НомерСтроки КАК НомерСтроки
	//|ИЗ
	//|	ВТ0_ДанныеДляПроверки КАК ВТ0_ДанныеДляПроверки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ1_Эталон КАК ВТ1_Эталон
	//|		ПО ВТ0_ДанныеДляПроверки.бит_СтатьяОборотов = ВТ1_Эталон.СтатьяОборотов
	//|ГДЕ
	//|	ВТ0_ДанныеДляПроверки.СтатьяДвиженияДенежныхСредств <> ВТ1_Эталон.СтатьяРегл
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВТ0_ДанныеДляПроверки.НомерСтроки
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки";
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_СтатьиОборотов_СтатьиРегл.СтатьяРегл КАК СтатьяРегл
	|ПОМЕСТИТЬ ВТ1_Эталон
	|ИЗ
	|	РегистрСведений.бит_СтатьиОборотов_СтатьиРегл КАК бит_СтатьиОборотов_СтатьиРегл
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ0_ДанныеДляПроверки КАК ВТ0_ДанныеДляПроверки
	|		ПО бит_СтатьиОборотов_СтатьиРегл.СтатьяОборотов = ВТ0_ДанныеДляПроверки.бит_СтатьяОборотов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяОборотов,
	|	СтатьяРегл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ0_ДанныеДляПроверки.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА ВТ0_ДанныеДляПроверки.СтатьяДвиженияДенежныхСредств <> ВТ1_Эталон.СтатьяРегл
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ), ЛОЖЬ) КАК СоответствиеНайдено
	|ПОМЕСТИТЬ ВТ_Результат
	|ИЗ
	|	ВТ0_ДанныеДляПроверки КАК ВТ0_ДанныеДляПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ1_Эталон КАК ВТ1_Эталон
	|		ПО ВТ0_ДанныеДляПроверки.бит_СтатьяОборотов = ВТ1_Эталон.СтатьяОборотов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ0_ДанныеДляПроверки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_Результат КАК Результат
	|ГДЕ
	|	НЕ Результат.СоответствиеНайдено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Результат.НомерСтроки";
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-03 (#3816)
	 	
	Запрос.УстановитьПараметр("Ссылка"	 , Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	ИначеЕсли РасшифровкаПлатежа.Количество()=1 Тогда 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-1-30 #3491)
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Статья оборотов ДДС не соответствует статье движения денежных средств (регл.) документа'"),,,,Отказ);
		пТекстОшибки = НСтр("ru = 'Статья оборотов ДДС не соответствует статье движения денежных средств (регл.) документа'");
		Если ВыводитьСообщенияОбОшибках Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-30 #3491)
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	пСтрокиОшибки = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		пСтрокиОшибки = пСтрокиОшибки + "," + ВыборкаДетальныеЗаписи.НомерСтроки;
	КонецЦикла;
	
	пТекстОшибки = НСтр("ru = 'Статья оборотов ДДС не соответствует статье движения денежных средств (регл.) документа в следующих строках: %1'");
	
	пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, Сред(пСтрокиОшибки,2));
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-1-30 #3491)
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);
	Если ВыводитьСообщенияОбОшибках Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-30 #3491)
		
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-21 (#3491)
//Функция ПолучитьСценарийЗаявкиОснования()
Функция ПолучитьСценарийЗаявкиОснования() Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-21 (#3491)
	
	Если ДополнительныеСвойства.Свойство("СценарийЗНРДС") Тогда 
		Возврат ДополнительныеСвойства.СценарийЗНРДС;
	КонецЕсли;
	
	Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-13 (#4338)
	Если Ссылка.Пустая() Тогда
	
		ПлатежныеПозиции = ПолучитьПлатежныеПозицииДокументаОснования();
		Если ПлатежныеПозиции.Количество() > 0 Тогда
			ПлатПозиция = ПлатежныеПозиции[0];
		Иначе
			ПлатПозиция = ПредопределенноеЗначение("Документ.бит_ПлатежнаяПозиция.ПустаяСсылка");
		КонецЕсли; 
		
	Иначе
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-13 (#4338)
	
	ПлатПозиция = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Ссылка,
						ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция"), ПредопределенноеЗначение("Документ.бит_ПлатежнаяПозиция.ПустаяСсылка"));
						
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-13 (#4338)
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-13 (#4338)
	
	Если ЗначениеЗаполнено(ПлатПозиция)	Тогда 
		Если ЗначениеЗаполнено(ПлатПозиция.ДокументОснование) Тогда 
			Сценарий = ПлатПозиция.ДокументОснование.Сценарий;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СценарийЗНРДС", Сценарий);
	
	Возврат Сценарий;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-21 (#3066)

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнениеЗадачБухгалтера.ПриЗаписиПлатежа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Все документы по счетам интеграции загружаются из банка.
	// Удалять интерактивно такие документы запещено.
	Если ПометкаУдаления
		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(СчетОрганизации) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НеПодтвержденоВыпискойБанка И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи    = ?(Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		ТекстСообщения =
			НСтр("ru = 'Проведение документа возможно только после установки флага ""Подтверждено выпиской банка"". Документ записан без движений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НеПодтвержденоВыпискойБанка", "Объект", Ложь);
	КонецЕсли;
	
	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	Если НЕ УчетУСН.СодержаниеУСНРедактируетсяПользователем(ЭтотОбъект) Тогда
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	КонецЕсли;
	НалоговыйУчетУСН.ЗаполнитьДоходыРасходыВсего(ЭтотОбъект, ПараметрыУСН);
	
	// Обновление счета для вида операции СнятиеНаличных выполняем всегда для учета
	// возможных изменений в учетной политике
	УстановитьСчетПриСнятииНаличных();
	
	// Обновление счета для вида операции ПереводНаДругойСчет выполняем всегда для учета
	// возможных изменений в учетной политике
	УстановитьСчетПриПереводеНаДругойСчет();
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		// "Снятие наличных" не может вводится на основании платежного поручения.
		// Если основание платежное поручение, нужно его очистить.
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	ПлатежноеПоручениеОснование = Документы.СписаниеСРасчетногоСчета.НайтиДокументПлатежноеПоручение(
		Ссылка, ДокументОснование, ВидОперации, Проведен);
	Если ЗначениеЗаполнено(ПлатежноеПоручениеОснование) И ТипЗнч(ПлатежноеПоручениеОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		ВыпискаПроведена = РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если ВыпискаПроведена Тогда
			
			РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
				ПлатежноеПоручениеОснование, Перечисления.СостоянияБанковскихДокументов.Оплачено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Документы.СписаниеСРасчетногоСчета.ЕстьРасшифровкаПлатежа(ВидОперации) И РасшифровкаПлатежа.Количество() > 0 Тогда
		РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(РасшифровкаПлатежа, ЭтотОбъект);
		ДоговорКонтрагента            = РасшифровкаПлатежа[0].ДоговорКонтрагента;
		СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И Не ЗначениеЗаполнено(СчетОрганизации)
		И Не Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация)
		И Не ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	ЗагрузкаВыпискиПоБанковскомуСчету.ПроверитьИзменениеДанныхАвтозаполненияСписание(ЭтотОбъект);
	
	// +СБ. Широков Николай. 2014-12-22. ТЗ "Казначейство" 2.2.11.5
	Если СБ_ВыгруженВAXAPTA_Актуальный 
		И НЕ ДополнительныеСвойства.Свойство("НеСбрасыватьПризнакВыгрузки") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокШапка.Номер,
		|	ДокШапка.Дата,
		|	ДокШапка.Контрагент,
		|	ДокШапка.СуммаДокумента,
		|	ДокШапка.ВалютаДокумента,
		|	ДокШапка.СчетОрганизации,
		|	ДокШапка.СБ_ПрофильРазноски,
		|	ДокТЧ.ДоговорКонтрагента,
		|	ДокТЧ.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ДокТЧ
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-09 (#3904)
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК ДокШапка
		|		ПРАВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК ДокШапка
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-09 (#3904)
		|		ПО ДокТЧ.Ссылка = ДокШапка.Ссылка
		|ГДЕ
		|	ДокШапка.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ПроверяемыеРеквизитыШапка = Новый Массив;
		ПроверяемыеРеквизитыШапка.Добавить("Номер");
		ПроверяемыеРеквизитыШапка.Добавить("Дата");
		ПроверяемыеРеквизитыШапка.Добавить("Контрагент");
		ПроверяемыеРеквизитыШапка.Добавить("СуммаДокумента");
		ПроверяемыеРеквизитыШапка.Добавить("ВалютаДокумента");
		ПроверяемыеРеквизитыШапка.Добавить("СчетОрганизации");
		ПроверяемыеРеквизитыШапка.Добавить("СБ_ПрофильРазноски");
		
		ПроверяемыеРеквизитыРасшифровка = Новый Массив;
		ПроверяемыеРеквизитыРасшифровка.Добавить("ДоговорКонтрагента");
		ПроверяемыеРеквизитыРасшифровка.Добавить("СтатьяДвиженияДенежныхСредств");
		
		Для каждого ИмяРеквизита Из ПроверяемыеРеквизитыШапка Цикл
			
			Если ЭтотОбъект[ИмяРеквизита] <> Выборка[ИмяРеквизита] Тогда
				СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
				Прервать;
			КонецЕсли; 	
			
		КонецЦикла; 
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-09 (#3904)
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-25 (#3880)
		//Если РасшифровкаПлатежа.Количество() > 0 Тогда
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-25 (#3880)
		Если СБ_ВыгруженВAXAPTA_Актуальный
			И РасшифровкаПлатежа.Количество() > 0 Тогда
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-09 (#3904)
		
		СтрокаПлатежа = РасшифровкаПлатежа[0];
		
		Для каждого ИмяРеквизита Из ПроверяемыеРеквизитыРасшифровка Цикл
			
			Если СтрокаПлатежа[ИмяРеквизита] <> Выборка[ИмяРеквизита] Тогда
				СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
				Прервать;
			КонецЕсли; 	
			
		КонецЦикла; 
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-25 (#3880)
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-25 (#3880)
		
		Если Не СБ_ВыгруженВAXAPTA_Актуальный Тогда
			Сообщить("У документа " + СокрЛП(Ссылка) + " сброшен признак выгрузки в AXAPTA. Требуется перевыгрузить документ.");		
		КонецЕсли; 
		
	КонецЕсли; 
	// -СБ. Широков Николай 
	
	//БИТ АКриштопов 03032016 -->>
	//Перенос механизма заполнения статьи движения ДС из процедуры "обработка проверки заполнения"
	Если  ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику или 
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда 
		Для каждого Стр из РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств) Тогда
				Стр.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//БИТ АКриштопов 03032016 <<--
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-21 (#3066)
	//// +СБ. Чеплин Денис. 10-10-2016. Свёртывание ТЧ #2683
	//РасшифровкаПлатежа.Свернуть("ДоговорКонтрагента, СпособПогашенияЗадолженности, Сделка, КурсВзаиморасчетов,
	//|СтавкаНДС, СтатьяДвиженияДенежныхСредств, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, 
	//|КратностьВзаиморасчетов, бит_ЦФО, бит_СтатьяОборотов, бит_Проект, бит_НоменклатурнаяГруппа, бит_Аналитика_1,
	////|бит_Аналитика_2, бит_Аналитика_3, бит_Аналитика_4, бит_Аналитика_5, бит_Аналитика_6, бит_Аналитика_7,
	//|бит_ПлатежнаяПозиция, РаспределятьРасходыУСН, СчетНаОплату, ВидПлатежаПоКредитамЗаймам",
	//"СуммаПлатежа, СуммаВзаиморасчетов, СуммаНДС, РасходыУСН, НДСУСН");
	//// -СБ. Чеплин Денис
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-21 (#3066)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет установленные курсы валют документа перед пересчетом сумм.
// Нулевые курсы устанавливаются в 1.
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж)
	
	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ на основании массива ведомостей на выплату зарплаты.
//
Процедура ЗаполнитьПоВедомостям(ПлатежныеВедомости)
	
	ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	
	ПлатежнаяВедомость = ПлатежныеВедомости[0];
	ДокументОснование  = ПлатежнаяВедомость;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "Организация");
	Если ПлатежныеВедомости.Количество() = 1 Тогда
		Если ТипЗнч(ПлатежнаяВедомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
			ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "ПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПлатежнаяВедомость, "Подразделение");
		КонецЕсли;
	КонецЕсли;
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	ТаблицаВедомостей = УчетЗарплаты.ПолучитьДанныеВедомостейДляОплатыТаблично(Ссылка, ПлатежныеВедомости,, Ложь);
	
	ТаблицаВедомостей.Свернуть("Ведомость", "СуммаКВыплате, КомпенсацияЗаЗадержкуЗарплаты");
	Если ТаблицаВедомостей.Количество() = 0 Тогда
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
			Если ПлатежныеВедомости.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'По выбранным документам нет сумм к выплате!'");
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 нет сумм к выплате!'"), ПлатежнаяВедомость);
			КонецЕсли;
		Иначе
			Если ПлатежныеВедомости.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Выбранные документы полностью оплачены!'");
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 полностью оплачен!'"), ПлатежнаяВедомость);
			КонецЕсли;
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
	Иначе
		Для каждого СтрокаВедомости Из ТаблицаВедомостей Цикл
			Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
				Если СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет
					И СтрокаВедомости.Ведомость.ВидМестаВыплаты <> Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документ %1 оплачивается через кассу!'"), СтрокаВедомости.Ведомость);
					ВызватьИсключение ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
			
			ПеречислениеЗаработнойПлаты.Очистить();
			
			СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
			СтрокаВедомость.Ведомость = СтрокаВедомости.Ведомость;
			СуммаКВыплате = СтрокаВедомости.СуммаКВыплате + СтрокаВедомости.КомпенсацияЗаЗадержкуЗарплаты;
			СтрокаВедомость.СуммаПлатежа = СуммаКВыплате;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = ТаблицаВедомостей.Итог("СуммаКВыплате") + ТаблицаВедомостей.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание, СуммаКОплате = Неопределено, ДанныеПлПоручение = Неопределено)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	// Валюта документа должна соответствовать валюте банковского счета!
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "ВалютаДенежныхСредств");
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ДокументОснование = Основание;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		КурсДокумента      = 1;
		КратностьДокумента = 1;
	Иначе
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ТипЗначенияОснования = ТипЗнч(Основание);
	
	Если ТипЗначенияОснования    = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНМА")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.ВыкупПредметовЛизинга")
		ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		КонецЕсли;
		
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, УчетАгентскогоНДС");
		
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента = ДанныеДоговора.ВалютаВзаиморасчетов;
		Иначе
			ВалютаДокумента = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			И НЕ ЗначениеЗаполнено(ДанныеПлПоручение) И ЗначениеЗаполнено(Основание.БанковскийСчетКонтрагента) Тогда
			СчетКонтрагента = Основание.БанковскийСчетКонтрагента;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеДоговора.ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаСуммОснования = Новый ТаблицаЗначений();
			ТаблицаСуммОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			ТаблицаСуммОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
			
			СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
			
			СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
			СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДСВознаграждения");
			СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения") + Основание.Услуги.Итог("СуммаНДСВознаграждения");
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТаблицаСуммОснования = СтатусыДокументов.ТаблицаСуммКОплатеВРазрезеСтавокНДС(
				Новый Структура("Основание, ДатаОснования, Организация", Основание, Основание.Дата, Основание.Организация),
				УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание));
			ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
		Иначе
			ТаблицаСуммОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
			Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				
				Если Основание.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах Тогда
					ТаблицаСуммОснования.ЗаполнитьЗначения(0, "СуммаНДС");
					ТаблицаСуммОснования.ЗаполнитьЗначения(Перечисления.СтавкиНДС.ПустаяСсылка(), "СтавкаНДС");
					Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") Тогда
						СуммаКоррПлатежа = ТаблицаСуммОснования.Итог("СуммаПлатежа")
							- ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
						НоваяКолонкаСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррПлатежа, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаСумм <> Неопределено Тогда
							ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаСумм, "СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
					
					Если ДанныеДоговора.УчетАгентскогоНДС Тогда
						СуммаКоррНДС    = ТаблицаСуммОснования.Итог("СуммаПлатежа") - Основание.Товары.Итог("СуммаНДС");
						НоваяКолонкаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
							СуммаКоррНДС, ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа"));
						Если НоваяКолонкаНДС <> Неопределено Тогда
							ТаблицаСуммОснования.ЗагрузитьКолонку(НоваяКолонкаНДС, "СуммаПлатежа");
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТаблицаСуммОснования.Очистить();
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				
				ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Сумма, СуммаНДС, СтавкаНДС, СуммаВключаетНДС");
				
				Если ДанныеОснования.Сумма > 0 ИЛИ ДанныеОснования.СуммаНДС > 0 Тогда
					Если ТаблицаСуммОснования.Количество() = 0 Тогда
						СтрокаТаблицыСумм = ТаблицаСуммОснования.Добавить();
					Иначе
						СтрокаТаблицыСумм = ТаблицаСуммОснования[0];
					КонецЕсли;
					
					СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ДанныеОснования.Сумма;
					СтрокаТаблицыСумм.СуммаНДС     = СтрокаТаблицыСумм.СуммаНДС + ДанныеОснования.СуммаНДС;
					Если НЕ ДанныеОснования.СуммаВключаетНДС Тогда
						СтрокаТаблицыСумм.СуммаПлатежа = СтрокаТаблицыСумм.СуммаПлатежа + ДанныеОснования.СуммаНДС;
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаСуммОснования.ЗаполнитьЗначения(ДанныеОснования.СтавкаНДС, "СтавкаНДС");
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Сумма платежа может не совпадать с итогом ТаблицаСуммОснования.
		СуммаПоОснованиям = ТаблицаСуммОснования.Итог("СуммаПлатежа");
		Если ЗначениеЗаполнено(СуммаКОплате) И СуммаКОплате <> СуммаПоОснованиям Тогда
			Если ТаблицаСуммОснования.Количество() = 0 И ЗначениеЗаполнено(ДанныеПлПоручение) Тогда
				// Это ввод на основании платежного поручения, сумма должна быть заполнена.
				СтрокаТаблицы = ТаблицаСуммОснования.Добавить();
				СтрокаТаблицы.СтавкаНДС    = ДанныеПлПоручение.СтавкаНДС;
				СтрокаТаблицы.СуммаНДС     = Окр(СуммаКОплате * ДанныеПлПоручение.СуммаНДС / ДанныеПлПоручение.СуммаДокумента, 2, 1);
				СтрокаТаблицы.СуммаПлатежа = СуммаКОплате;
			ИначеЕсли ТаблицаСуммОснования.Количество() = 1 Тогда
				Если ЗначениеЗаполнено(ДанныеПлПоручение) Тогда
					ТаблицаСуммОснования[0].СуммаНДС     = Окр(СуммаКОплате * ДанныеПлПоручение.СуммаНДС / ДанныеПлПоручение.СуммаДокумента, 2, 1);
					ТаблицаСуммОснования[0].СуммаПлатежа = СуммаКОплате;
				Иначе
					ТаблицаСуммОснования[0].СуммаНДС = Окр(СуммаКОплате * ТаблицаСуммОснования[0].СуммаНДС / ТаблицаСуммОснования[0].СуммаПлатежа, 2, 1);
					ТаблицаСуммОснования[0].СуммаПлатежа = СуммаКОплате;
				КонецЕсли;
			Иначе
				МассивСуммОснований = ТаблицаСуммОснования.ВыгрузитьКолонку("СуммаПлатежа");
				МассивСуммКОплате = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаКОплате, МассивСуммОснований);
				Счетчик = 0;
				Для каждого СтрокаОснования Из ТаблицаСуммОснования Цикл
					СтрокаОснования.СуммаНДС = Окр(МассивСуммКОплате[Счетчик] * СтрокаОснования.СуммаНДС / СтрокаОснования.СуммаПлатежа, 2, 1);
					СтрокаОснования.СуммаПлатежа = МассивСуммКОплате[Счетчик];
					Счетчик = Счетчик + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаСуммОснования.Количество() > 0 И ТаблицаПлатежей.Количество() > 0 Тогда
			ТаблицаПлатежей.Очистить();
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСуммОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		
		// При вводе на основании устанавливаем режим распределения оплаты "По документу",
		// кроме ввода на основании отчета комитенту - задолженность перед комитентом образуется другими документами
		// и ввода на основании счета поставщика - данный документ не формирует задолженности перед поставщиком.
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			ИЛИ ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "СпособПогашенияЗадолженности");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу,   "СпособПогашенияЗадолженности");
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "Сделка");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
				"УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов");
		Иначе
			ДанныеДоговора = Новый Структура("УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов",
				Ложь, Ложь, Ложь);
		КонецЕсли;
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
			"КурсВзаиморасчетов, КратностьВзаиморасчетов, ВалютаДокумента");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			Если ДанныеДоговора.УчетАгентскогоНДС Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаПлатежа - СтрокаПлатеж.СуммаНДС;
				СтрокаПлатеж.СуммаНДС     = 0;
				СтрокаПлатеж.СтавкаНДС    = Перечисления.СтавкиНДС.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СчетНаОплатуПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетНаОплатуПоставщика");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетНаОплатуПоставщика, "СчетНаОплату");
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		КурсДокументаОснования      = ДанныеОснования.КурсВзаиморасчетов;
		КратностьДокументаОснования = ДанныеОснования.КратностьВзаиморасчетов;
		
		// Если Списание с расчетного счета вводится на основании Платежного поручения,
		// которое введено на основании Счета (или реализации) в условных единицах,
		// то курс и кратность нужно брать на дату Платежного поручения
		СложныйВводНаОснованииВУЕ = Ложь;
		Если ДанныеДоговора.РасчетыВУсловныхЕдиницах И ДанныеОснования.ВалютаДокумента <> ВалютаРегламентированногоУчета
			И СуммаКОплате <> Неопределено И ЗначениеЗаполнено(ДанныеПлПоручение) Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОснования.ВалютаДокумента, ДанныеПлПоручение.Дата);
			КурсДокументаОснования      = СтруктураКурса.Курс;
			КратностьДокументаОснования = СтруктураКурса.Кратность;
			СложныйВводНаОснованииВУЕ   = Истина;
		КонецЕсли;
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж);
			Если ДанныеДоговора.РасчетыВУсловныхЕдиницах Тогда
				КурсВзаиморасчетов      = СтрокаПлатеж.КурсВзаиморасчетов;
				КратностьВзаиморасчетов = СтрокаПлатеж.КратностьВзаиморасчетов;
				Если ДанныеОснования.ВалютаДокумента = ВалютаРегламентированногоУчета ИЛИ СложныйВводНаОснованииВУЕ Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаПлатежа,
						ВалютаРегламентированногоУчета, ДанныеДоговора.ВалютаВзаиморасчетов,
						1, КурсДокументаОснования,
						1, КратностьДокументаОснования);
					
					Если СложныйВводНаОснованииВУЕ Тогда
						КурсВзаиморасчетов      = КурсДокументаОснования;
						КратностьВзаиморасчетов = КратностьДокументаОснования;
						СтрокаПлатеж.КурсВзаиморасчетов      = КурсВзаиморасчетов;
						СтрокаПлатеж.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
					Иначе
						СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
							СтрокаПлатеж.СуммаНДС,
							ВалютаРегламентированногоУчета, ДанныеДоговора.ВалютаВзаиморасчетов,
							1, КурсДокументаОснования,
							1, КратностьДокументаОснования);
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ СложныйВводНаОснованииВУЕ Тогда // Сумма платежа уже правильная, пересчитывать не нужно.
					СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаВзаиморасчетов,
						ДанныеДоговора.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
						КурсВзаиморасчетов, 1,
						КратностьВзаиморасчетов, 1);
					
					// Если счет в валюте, а договор в у.е., то сумму НДС вычисляем заново по ставке НДС из суммы рублевого покрытия.
					// Т.к. если пересчитывать рублевый НДС из его валютного значения получается большая погрешность.
					ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
					СтрокаПлатеж.СуммаНДС = Окр(УчетНДСКлиентСервер.РассчитатьСуммуНДС(
						СтрокаПлатеж.СуммаПлатежа, Истина, ЗначениеСтавкиНДС), 2);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовЗаПосредническиеУслуги"), "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамВыданным"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансам"), "СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
			
			ТаблицаПлатежей.ЗагрузитьКолонку(
				ТаблицаПлатежей.ВыгрузитьКолонку("СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "СчетНаОплату");
		ИначеЕсли ТипЗначенияОснования <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			СчетУчетаРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетУчетаРасчетов.СчетУчетаРасчетовСКонтрагентом, "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетУчетаРасчетов.СчетУчетаРасчетовПоАвансам,     "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
			"ВидОперации, Налог, ВидНалоговогоОбязательства, Налогоплательщик, Контрагент, Дата, Номер, СчетКонтрагента, ПоказательПериода, НачислениеДивидендов,
			|НазначениеПлатежа, ДокументОснование, ПеречислениеВБюджет, ПлатежнаяВедомость, СуммаДокумента, ВидПеречисленияВБюджет, ДоговорКонтрагента,
			|КодОКАТО, КодБК, ПоказательОснования, ПоказательТипа, КПППлательщика, СтатьяДвиженияДенежныхСредств, СтавкаНДС, СуммаНДС, СуммаПроцентов");
		ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		ВидОперации             = ДанныеОснования.ВидОперации;
		ДатаВходящегоДокумента  = ДанныеОснования.Дата;
		НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОснования.Номер, Истина, Истина);
		СчетКонтрагента         = ДанныеОснования.СчетКонтрагента;
		
		Если ЗначениеЗаполнено(ДанныеОснования.ДокументОснование) И НЕ ДанныеОснования.ПеречислениеВБюджет
			И ТипЗнч(ДанныеОснования.ДокументОснование) <> Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
			Если ТипЗнч(ДанныеОснования.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк")
				ИЛИ ТипЗнч(ДанныеОснования.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
					ДанныеЗаполнения = Новый Массив;
					ДанныеЗаполнения.Добавить(ДанныеОснования.ДокументОснование);
					ЗаполнитьПоВедомостям(ДанныеЗаполнения);
				Иначе
					ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, ДанныеОснования.СуммаДокумента);
					ПлатежнаяВедомость = ДанныеОснования.ПлатежнаяВедомость;
					СуммаДокумента     = ДанныеОснования.СуммаДокумента;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СуммаКОплате) Тогда
					ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, СуммаКОплате, ДанныеОснования);
				Иначе
					ЗаполнитьПоДокументуОснованию(ДанныеОснования.ДокументОснование, ДанныеОснования.СуммаДокумента, ДанныеОснования);
				КонецЕсли;
			КонецЕсли;
			
			ДокументОснование = Основание;
			
			// установим Назначение платежа и СтатьюДДС из Платежного поручения
			НазначениеПлатежа = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
			СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
			КоличествоСтрокРасшифровки = РасшифровкаПлатежа.Количество();
			Если КоличествоСтрокРасшифровки > 0 Тогда
				МассивДДС = Новый Массив;
				Для сч = 1 По КоличествоСтрокРасшифровки Цикл
					МассивДДС.Добавить(СтатьяДвиженияДенежныхСредств);
				КонецЦикла;
				
				РасшифровкаПлатежа.ЗагрузитьКолонку(МассивДДС, "СтатьяДвиженияДенежныхСредств");
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
			Налогоплательщик = ДанныеОснования.Налогоплательщик;
		КонецЕсли;
		
		НазначениеПлатежа             = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
		СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		
		РасшифровкаПлатежа.Очистить();
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
			
			СуммаДокумента     = ДанныеОснования.СуммаДокумента;
			ПлатежнаяВедомость = ДанныеОснования.ПлатежнаяВедомость;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
			
			СуммаДокумента = ДанныеОснования.СуммаДокумента;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			
			Налог = ДанныеОснования.Налог;
			ВидНалоговогоОбязательства = ДанныеОснования.ВидНалоговогоОбязательства;
			
			СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ДанныеОснования.Дата);
			
			АналитикаРасчетов = Документы.СписаниеСРасчетногоСчета.ДанныеЗаполненияАналитикиНаСчетеРасчетовСБюджетом(
				СчетУчетаРасчетовСКонтрагентом,
				Организация,
				Контрагент,
				ДанныеОснования.КодОКАТО, // КодТерритории (ОКАТО/ОКТМО)
				ДанныеОснования.КПППлательщика,
				ДанныеОснования.КодБК,
				ДанныеОснования.ПоказательОснования,
				ДанныеОснования.ПоказательТипа,
				ДанныеОснования.ВидНалоговогоОбязательства);
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, АналитикаРасчетов);
			
			Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДФЛ
				И БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций() Тогда
				Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
					Если Справочники.Организации.КППНаДату(Организация, ДанныеОснования.Дата) <> ДанныеОснования.КПППлательщика Тогда
						РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКПП(
							Организация, ДанныеОснования.КПППлательщика);
					КонецЕсли;
				Иначе
					Если Справочники.Организации.КодПоОКТМОНаДату(Организация, ДанныеОснования.Дата) <> ДанныеОснования.КодОКАТО Тогда
						РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоКодуТерритории(
							Организация, ДанныеОснования.КодОКАТО);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(ДанныеОснования.ПоказательПериода);
			Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
				НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(ДанныеОснования.Дата, -1));
			Иначе
				НалоговыйПериод = ОписаниеПериода.Дата;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Налог) Тогда
				ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
				Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога) Тогда
					НалоговыйПериод = НачалоГода(НалоговыйПериод);
				ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ВидНалога) Тогда
					НалоговыйПериод = УчетУСН.НалоговыйПериодПоДаннымПлатежногоДокумента(
						ОписаниеПериода,
						ДанныеОснования.Дата,
						Организация);
				ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ_ИП(ВидНалога) Тогда
					НалоговыйПериод = УчетНДФЛПредпринимателя.НалоговыйПериодПоПлатежнымДанным(
						ДанныеОснования.ПоказательПериода,
						ДанныеОснования.Дата);
				КонецЕсли;
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии")
				И ЗначениеЗаполнено(ДанныеОснования.НачислениеДивидендов)
				И ЗначениеЗаполнено(Налог)
				И ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНДФЛ(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога")) Тогда
				
				НачислениеДивидендов = ДанныеОснования.НачислениеДивидендов;
				
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НачислениеДивидендов, "Дата, Учредитель, СуммаНалога");
				ТекущаяСтрока = ПеречислениеНДФЛ.Добавить();
				ТекущаяСтрока.ФизическоеЛицо        = РеквизитыДокумента.Учредитель;
				ТекущаяСтрока.Сумма                 = РеквизитыДокумента.СуммаНалога;
				ТекущаяСтрока.ИсчисленоПоДивидендам = Истина;
				ТекущаяСтрока.Ставка                = УчетЗарплаты.СтавкаНДФЛДивиденды(РеквизитыДокумента.Дата);
			КонецЕсли;
			
			СуммаДокумента  = ДанныеОснования.СуммаДокумента;
			
		Иначе
			
			ВалютаДокумента = ВалютаРегламентированногоУчета;
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Если ДанныеДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета И НЕ ДанныеДоговора.РасчетыВУсловныхЕдиницах Тогда
					ВалютаДокумента = ДанныеДоговора.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
			СтрокаПлатеж.СтавкаНДС    = ДанныеОснования.СтавкаНДС;
			СтрокаПлатеж.СуммаНДС     = ДанныеОснования.СуммаНДС;
			
			СписокВидовДоговора = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
			ПараметрыПлатежа = Новый Структура("ОплатаВВалюте", Новый Структура("ЗначениеОтбора", Ложь));
			Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
				РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
					ДоговорКонтрагента, Налогоплательщик, Организация, СписокВидовДоговора, ПараметрыПлатежа);
			Иначе
				РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
					ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора, ПараметрыПлатежа);
			КонецЕсли;
			
			СтрокаПлатеж.ДоговорКонтрагента      = ДоговорКонтрагента;
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				?(ЗначениеЗаполнено(ДанныеДоговора.ВалютаВзаиморасчетов), ДанныеДоговора.ВалютаВзаиморасчетов, ВалютаДокумента), Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
				И ДанныеОснования.ПеречислениеВБюджет Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчетаРасчетовПоКБК(
					ДанныеОснования.КодБК);
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
				ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
				СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
				СтрокаПлатеж.СуммаНДС  = 0;
				
				Если ДанныеОснования.СуммаПроцентов = 0 Тогда
					СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию("ПогашениеДолга");
				ИначеЕсли ДанныеОснования.СуммаДокумента = ДанныеОснования.СуммаПроцентов Тогда
					СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию("УплатаПроцентов");
				Иначе
					СтрокаПлатеж.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента - ДанныеОснования.СуммаПроцентов;
					СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию("ПогашениеДолга");
					
					СтрокаПроцентов = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПроцентов, СтрокаПлатеж);
					СтрокаПроцентов.СуммаПлатежа = ДанныеОснования.СуммаПроцентов;
					СтрокаПроцентов.ВидПлатежаПоКредитамЗаймам = Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов;
					СтрокаПроцентов.СтатьяДвиженияДенежныхСредств = УчетДенежныхСредствБП.СтатьяДДСПоУмолчанию("УплатаПроцентов");
					
					СтрокаПроцентов.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПроцентов.СуммаПлатежа,
						ВалютаДокумента, ДанныеДоговора.ВалютаВзаиморасчетов,
						КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
						КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
				КонецЕсли;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц Тогда
				
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Организация, Налогоплательщик, СтрокаПлатеж.ДоговорКонтрагента);
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
				
			КонецЕсли;
			
			СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаПлатежа,
				ВалютаДокумента, ДанныеДоговора.ВалютаВзаиморасчетов,
				КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
			
		КонецЕсли;
		
		Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
			И ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
			Если ЗначениеЗаполнено(ДанныеОснования.СчетКонтрагента) Тогда
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.СчетКонтрагента, "Владелец") <> ДанныеОснования.Контрагент Тогда
					СчетКонтрагента = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу;
		Контрагент  = Основание.ФизЛицо;
		
		ШаблонНазначенияПлатежа = НСтр("ru = 'Перечисление перерасхода по авансовому отчету %1 от %2'");
		НазначениеПлатежа       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНазначенияПлатежа,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Основание.Номер, Истина, Ложь),
			Формат(Основание.Дата, "ДЛФ=D"));
		
		СуммаАванса      = Документы.АвансовыйОтчет.ПолучитьСуммуВыданныхАвансов(Основание);
		ПерерасходАванса = Макс(0, Основание.СуммаДокумента - СуммаАванса);
		СуммаДокумента   = ПерерасходАванса;
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ОтчетОператораСистемыПлатон") Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		
		СчетУчетаРасчетовСКонтрагентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом");
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.СуммаПлатежа = Основание.ТранспортныеСредства.Итог("Сумма");
		НоваяСтрока.КурсВзаиморасчетов = 1;
		НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаПлатежа;
		НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.КратностьВзаиморасчетов = 1;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
		
		ВалютаДокумента      = ВалютаРегламентированногоУчета;
		ВидОперации          = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов;
		Контрагент           = Основание.Учредитель;
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетКонтрагента, Контрагент, ВалютаДокумента);
		СуммаДокумента       = Основание.СуммаДохода - Основание.СуммаНалога;
		НачислениеДивидендов = Основание;
		НазначениеПлатежа    = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ЗаполнитьПоПоступлениюНаРасчетныйСчет();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюНаРасчетныйСчет()
	
	ВидОперацииДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ВидОперации");
	Если ВидОперацииДокументаОснования = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "ВалютаДокумента, Дата, Контрагент,РасшифровкаПлатежа");
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОснования.ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		СтруктураКурсаОснования = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОснования.ВалютаДокумента, ДанныеОснования.Дата);
		КурсОснования      = СтруктураКурсаОснования.Курс;
		КратностьОснования = СтруктураКурсаОснования.Кратность;
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		Контрагент  = ДанныеОснования.Контрагент;
		
		Если ПолучитьФункциональнуюОпцию("ИспользуетсяНалогНаПрофессиональныйДоход") Тогда
		
			СведенияОЧекеНПД = РегистрыСведений.ЧекиНПД.СведенияОЧеке(ДокументОснование);
		
			Если ЗначениеЗаполнено(СведенияОЧекеНПД) Тогда
				НомерЧекаНПД = СведенияОЧекеНПД.НомерЧека;
			КонецЕсли;
		
		КонецЕсли;
		
		РасшифровкаПлатежаДокументаОснования = ДанныеОснования.РасшифровкаПлатежа.Выгрузить();
		
		Для каждого СтрокаОснование Из РасшифровкаПлатежаДокументаОснования Цикл
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента      = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов"), Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа = СтрокаОснование.СуммаПлатежа;
			
			// При вводе на основании устанавливаем режим распределения оплаты "По документу"
			Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
				СтрокаПлатеж.Сделка = ДокументОснование;
			Иначе
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС = СтрокаОснование.СтавкаНДС;
			
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СтрокаОснование.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтрокаОснование.СчетУчетаРасчетовСКонтрагентом;
			
		КонецЦикла;
		
		Для Индекс = 0 По РасшифровкаПлатежаДокументаОснования.Количество() - 1 Цикл
			СтрокаПлатеж    = РасшифровкаПлатежа[Индекс];
			СтрокаОснование = РасшифровкаПлатежаДокументаОснования[Индекс];
			ВалютаВзаиморасчетовДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОснование.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				И СтрокаПлатеж.ДоговорКонтрагента = СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
				
				СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа,
					ДанныеОснования.ВалютаДокумента, ВалютаВзаиморасчетовДоговора,
					КурсОснования, СтрокаОснование.КурсВзаиморасчетов,
					КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетовДоговора, ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
					СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
			Иначе
				Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовДоговора) Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов  = 1;
					СтрокаПлатеж.КратностьВзаиморасчетов = 1;
				Иначе
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
						ВалютаДокумента, ВалютаВзаиморасчетовДоговора,
						КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
						КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
			СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		КонецЦикла;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Иначе
		// Документ НЕ вводится на основании поступления на расчетный счет с другими видами операций
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетПриСнятииНаличных()
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных Тогда
		ИспользоватьПереводыВПути = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Организация, Дата);
		ТребуетсяЗаполнение = Ложь;
		Если ИспользоватьПереводыВПути Тогда
			Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПути
				И СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПутиВал Тогда
				ТребуетсяЗаполнение = Истина;
			КонецЕсли;
		Иначе
			Если БухгалтерскийУчетПовтИсп.СчетВИерархии(СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Хозрасчетный.Касса) Тогда
				ТребуетсяЗаполнение = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТребуетсяЗаполнение Тогда
			Отбор = Новый Структура("РеквизитыПолноеИмя", Новый Соответствие);
			Отбор.РеквизитыПолноеИмя.Вставить("СчетУчетаРасчетовСКонтрагентом", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт1", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт2", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт3", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("ПодразделениеДт", Истина);
			СчетаУчетаВДокументах.Заполнить(ЭтотОбъект, Отбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетПриПереводеНаДругойСчет()
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ИспользоватьПереводыВПути = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Организация, Дата);
		ТребуетсяЗаполнение = Ложь;
		Если ИспользоватьПереводыВПути Тогда
			Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПути
				И СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПутиВал Тогда
				ТребуетсяЗаполнение = Истина;
			КонецЕсли;
		Иначе
			СчетаБанка = СписаниеСРасчетногоСчетаФормы.СчетаБанка(ЭтотОбъект);
			Если СчетаБанка.Найти(СчетУчетаРасчетовСКонтрагентом) = Неопределено Тогда
				ТребуетсяЗаполнение = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТребуетсяЗаполнение Тогда
			Отбор = Новый Структура("РеквизитыПолноеИмя", Новый Соответствие);
			Отбор.РеквизитыПолноеИмя.Вставить("СчетУчетаРасчетовСКонтрагентом", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт1", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт2", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("СубконтоДт3", Истина);
			СчетаУчетаВДокументах.Заполнить(ЭтотОбъект, Отбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиБанка(ДанныеЗаполнения)
	
	НеПодтвержденоВыпискойБанка = Ложь;
	
	ЗагрузкаВыпискиПоБанковскомуСчету.НачатьЗаполнениеДаннымиБанка(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация <> Неопределено Тогда
		
		// Реквизиты, заполнение которых зависит от вида операции.
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "Налог", ДанныеЗаполнения.ХозяйственнаяОперация);
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "ВидНалоговогоОбязательства", ДанныеЗаполнения.ХозяйственнаяОперация);
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "НалоговыйПериод", ДанныеЗаполнения.ХозяйственнаяОперация);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "СчетУчетаРасчетовСКонтрагентом", ДанныеЗаполнения.ХозяйственнаяОперация, "СчетДт");
			ЗагрузкаВыпискиПоБанковскомуСчету.ЗаполнитьРеквизит(ЭтотОбъект, "ПодразделениеДт",                ДанныеЗаполнения.ХозяйственнаяОперация);
			
			// СубконтоДт1, СубконтоДт2, СубконтоДт3.
			Если ДанныеЗаполнения.ХозяйственнаяОперация <> Неопределено 
				И ДанныеЗаполнения.ХозяйственнаяОперация.Свойство("СубконтоДт")
				И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
				
				Для Каждого ОписаниеВидаСубконто Из СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
					НомерСубконто    = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Индекс(ОписаниеВидаСубконто) + 1;
					ЗначениеСубконто = ДанныеЗаполнения.ХозяйственнаяОперация.СубконтоДт[ОписаниеВидаСубконто.ВидСубконто];
					ЭтотОбъект["СубконтоДт" + НомерСубконто] = ЗначениеСубконто;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузкаВыпискиПоБанковскомуСчету.ЗавершитьЗаполнениеДаннымиБанка(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьСуммыЧастичноеИсполнение(СуммаПлатежногоПоручения)
	
	Если СуммаДокумента = СуммаПлатежногоПоручения Или СуммаПлатежногоПоручения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Платежное поручение может быть оплачено частично.
	// В этом случае пересчитаем сумму в табличной части.
	// Это возможно, только когда в расшифровке только одна запись.
	Если РасшифровкаПлатежа.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициент = СуммаДокумента / СуммаПлатежногоПоручения;
	
	РасшифровкаПлатежа[0].СуммаПлатежа        = СуммаДокумента;
	РасшифровкаПлатежа[0].СуммаВзаиморасчетов = РасшифровкаПлатежа[0].СуммаВзаиморасчетов * Коэффициент;
	РасшифровкаПлатежа[0].СуммаНДС            = РасшифровкаПлатежа[0].СуммаНДС            * Коэффициент;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуре(ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		Если ДанныеЗаполнения.Свойство("СчетУчета")
			И ДанныеЗаполнения.Свойство("Субконто1")
			И ДанныеЗаполнения.Свойство("Субконто2")
			И ДанныеЗаполнения.Свойство("Субконто3") Тогда
			
			СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчета;
			СубконтоДт1 = ДанныеЗаполнения.Субконто1;
			СубконтоДт2 = ДанныеЗаполнения.Субконто2;
			СубконтоДт3 = ДанныеЗаполнения.Субконто3;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			
			ВидИКодГосударственногоОргана = ДанныеГосударственныхОрганов.ВидИКодГосударственногоОрганаПоНалогу(
				Налог, Организация, Дата);
			ПолучательПлатежа = Документы.ПлатежноеПоручение.ПолучательДляПлатежаГосударственномуОргану(
				ВидИКодГосударственногоОргана.Вид, ВидИКодГосударственногоОргана.Код);
			
			Контрагент      = ПолучательПлатежа.Контрагент;
			СчетКонтрагента = ПолучательПлатежа.БанковскийСчет;
			
		КонецЕсли;
		
		// Если в данных заполнения передан Налоговый период, то задаем период платежа.
		Если ДанныеЗаполнения.Свойство("НалоговыйПериод") И ЗначениеЗаполнено(ДанныеЗаполнения.НалоговыйПериод) Тогда
			НалоговыйПериод = ДанныеЗаполнения.НалоговыйПериод;
		ИначеЕсли ДанныеЗаполнения.Свойство("ВидНалога") Тогда
			Если ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ДанныеЗаполнения.ВидНалога) Тогда
				НалоговыйПериод = НачалоГода(Дата);
			ИначеЕсли ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоНалогУСН(ДанныеЗаполнения.ВидНалога) Тогда
				НалоговыйПериод = УчетУСН.РелевантныйПериодНалоговогоПлатежа(Дата, Организация);
			КонецЕсли;
		Иначе
			НалоговыйПериод = НачалоМесяца(ДобавитьМесяц(Дата, -1));
		КонецЕсли;
		
		ИсточникДанныхКонтекста
			= Документы.СписаниеСРасчетногоСчета.ИсточникДанныхКонтекстаПлатежногоДокумента(ЭтотОбъект);
		
		ДанныеЗаполнения.Свойство("ВидНалоговогоОбязательства", ИсточникДанныхКонтекста.ВидНалоговогоОбязательства);
		Если Не ЗначениеЗаполнено(ИсточникДанныхКонтекста.ВидНалоговогоОбязательства) Тогда
			ИсточникДанныхКонтекста.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
		
		РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(ЭтотОбъект);
		Документы.СписаниеСРасчетногоСчета.ЗаполнитьРеквизитыПлатежаВБюджетДопустимымиЗначениями(
			РеквизитыОбъекта, ИсточникДанныхКонтекста, ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьОбновитьРеквизитыПлатежаВБюджет(ОбъектКопирования)
	
	Если ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
		ИЛИ НЕ ЗначениеЗаполнено(Налог) ИЛИ Налог = Справочники.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НеактуальныеНалоги = ПлатежиВБюджетКлиентСерверПереопределяемый.НеактуальныеНалоги(Дата);
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	Если НеактуальныеНалоги[ВидНалога] <> Неопределено Тогда
		Если НеактуальныеНалоги[ВидНалога].Свойство("АктуальныйНалог") Тогда
			АктуальныйНалог = НеактуальныеНалоги[ВидНалога].АктуальныйНалог;
			Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(АктуальныйНалог);
		Иначе
			Если НЕ Справочники.ВидыНалоговИПлатежейВБюджет.РеквизитыАктуальны(Налог, Дата) Тогда
				Справочники.ВидыНалоговИПлатежейВБюджет.ОбновитьПоставляемыеДанныеИзКлассификатора();
			КонецЕсли;
			
			Получатель = ДанныеГосударственныхОрганов.АдминистраторНалогаОрганизации(Налог, Организация, Дата);
			Если Контрагент <> Получатель Тогда
				Контрагент = Получатель;
				УчетДенежныхСредствБП.УстановитьБанковскийСчет(
					СчетКонтрагента, Контрагент, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-17 (#3268)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-21 (#3491)
//Функция ПроверитьЗаполненностьПолейТЧНеобходимыхДляПроведенияПоБК(Отказ)
Функция ПроверитьЗаполненностьПолейТЧНеобходимыхДляПроведенияПоБК(Отказ) Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-21 (#3491)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТЧ_НезаполненныеЗначения.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА бит_ФормаВводаБюджета.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Аналитика1НеЗаполнена,
	|	ВЫБОР
	|		КОГДА ТЧ_НезаполненныеЗначения.СтатьяОборотов = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатьяБДДСНеЗаполнена
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.бит_РаспределениеБюджета КАК ТЧ_НезаполненныеЗначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|		ПО ТЧ_НезаполненныеЗначения.Аналитика_1 = бит_ФормаВводаБюджета.Ссылка
	|ГДЕ
	|	(бит_ФормаВводаБюджета.Ссылка ЕСТЬ NULL
	|			ИЛИ ТЧ_НезаполненныеЗначения.СтатьяОборотов = ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
	|	И ТЧ_НезаполненныеЗначения.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В строке %1'");
		Если ВыборкаДетальныеЗаписи.Аналитика1НеЗаполнена И
			 ВыборкаДетальныеЗаписи.СтатьяБДДСНеЗаполнена
		Тогда 
			ДопТекстОшибки = НСтр("ru = 'не заполнены реквизиты № заявки и статья БДДС!'");
		ИначеЕсли ВыборкаДетальныеЗаписи.Аналитика1НеЗаполнена Тогда 
			ДопТекстОшибки = НСтр("ru = 'не заполнен реквизит № заявки!'");
		ИначеЕсли ВыборкаДетальныеЗаписи.СтатьяБДДСНеЗаполнена Тогда 
			ДопТекстОшибки = НСтр("ru = 'не заполнен реквизит статья БДДС!'");
		КонецЕсли;
		
		ДопТекстОшибки = "" + ВыборкаДетальныеЗаписи.НомерСтроки + " " + ДопТекстОшибки;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДопТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-17 (#3268)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-12 (#3491)
Процедура ДополнитьДвиженияКЗБПоОпБ(ПараметрыПроведения)
	
	Движения.бит_КонтрольныеЗначенияБюджетов.Очистить();
	
	стрЗаполненияСумм = Новый Структура;
	стрЗаполненияСумм.Вставить("ВалютаРегламентированногоУчета"	, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтрКурсаДокумента = бит_КурсыВалют.ПолучитьКурсВалюты(ПараметрыПроведения.Реквизиты[0].ВалютаДокумента, ПараметрыПроведения.Реквизиты[0].Период);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//Для каждого СтрокаТЧ Из РасшифровкаПлатежа Цикл
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СпособПогашенияЗадолженности КАК СпособПогашенияЗадолженности,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Сделка КАК Сделка,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.РасходыУСН КАК РасходыУСН,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.НДСУСН КАК НДСУСН,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.РаспределятьРасходыУСН КАК РаспределятьРасходыУСН,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СчетНаОплату КАК СчетНаОплату,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам КАК ВидПлатежаПоКредитамЗаймам,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ПорядокОтраженияДохода КАК ПорядокОтраженияДохода,
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ок_СтатьяОборотовБДР КАК ок_СтатьяОборотовБДР,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.ЦФО КАК бит_ЦФО,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.СтатьяОборотов КАК бит_СтатьяОборотов,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Проект КАК бит_Проект,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.НоменклатурнаяГруппа КАК бит_НоменклатурнаяГруппа,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Аналитика_1 КАК бит_Аналитика_1,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Аналитика_2 КАК бит_Аналитика_2,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Аналитика_3 КАК бит_Аналитика_3,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Аналитика_4 КАК бит_Аналитика_4,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Аналитика_5 КАК бит_Аналитика_5,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Аналитика_6 КАК бит_Аналитика_6,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Аналитика_7 КАК бит_Аналитика_7,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.СуммаПлатежа КАК бит_СуммаПлатежа,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.СуммаНДС КАК бит_СуммаНДС,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.СуммаВзаиморасчетов КАК бит_СуммаВзаиморасчетов,
	                      |	СписаниеСРасчетногоСчетабит_РаспределениеБюджета.ДокументПланирования КАК бит_ПлатежнаяПозиция
	                      |ИЗ
	                      |	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.бит_РаспределениеБюджета КАК СписаниеСРасчетногоСчетабит_РаспределениеБюджета
	                      |		ПО СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = СписаниеСРасчетногоСчетабит_РаспределениеБюджета.Ссылка
	                      |			И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.бит_КлючСтроки = СписаниеСРасчетногоСчетабит_РаспределениеБюджета.бит_КлючСтроки
	                      |ГДЕ
	                      |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	СтрокаТЧ = Запрос.Выполнить().Выбрать();
	Пока СтрокаТЧ.Следующий() Цикл
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
			                 
		//Движение по паре сценариев «Заявка на оплату-Факт оплаты», исполнение, два движения по статье БДДС и БДР
		
		// Статья оборотов
		НоваяЗапись_И = Движения.бит_КонтрольныеЗначенияБюджетов.Добавить();
		НоваяЗапись_И.Период 				= ПараметрыПроведения.Реквизиты[0].Период;
		НоваяЗапись_И.СтатьяОборотов 		= СтрокаТЧ.бит_СтатьяОборотов;
		Если НоваяЗапись_И.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			НоваяЗапись_И.Сценарий 			= ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_И");
		Иначе
			НоваяЗапись_И.Сценарий 			= ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_У");
		КонецЕсли;
		НоваяЗапись_И.СценарийКонтролируемый= бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий", НоваяЗапись_И.Сценарий);
		НоваяЗапись_И.ЦФО 					= СтрокаТЧ.бит_ЦФО;
		НоваяЗапись_И.Аналитика_1 			= СтрокаТЧ.бит_Аналитика_1;
		НоваяЗапись_И.Аналитика_2 			= СтрокаТЧ.бит_Аналитика_2;
		НоваяЗапись_И.Аналитика_4 			= СтрокаТЧ.бит_Аналитика_4;
		НоваяЗапись_И.ДоговорКонтрагента 	= СтрокаТЧ.ДоговорКонтрагента;
		НоваяЗапись_И.Контрагент 			= Контрагент;
		НоваяЗапись_И.Проект 				= СтрокаТЧ.бит_Проект;
		
		//Только исполнение
		КоэффициентПересчетаВВалюта = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(1
																		, ПараметрыПроведения.Реквизиты[0].ВалютаДокумента
																		, стрЗаполненияСумм.ВалютаРегламентированногоУчета
																		, СтрКурсаДокумента.Курс
																		, 1
																		, СтрКурсаДокумента.Кратность
																		, 1);
		
		КоэффициентПересчетаВВалюта = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(КоэффициентПересчетаВВалюта, ПараметрыПроведения.Реквизиты[0].Период, НоваяЗапись_И.Сценарий, стрЗаполненияСумм);
																		
		НоваяЗапись_И.СуммаСценарийИсполнение		= (СтрокаТЧ.СуммаПлатежа - СтрокаТЧ.СуммаНДС) * КоэффициентПересчетаВВалюта;
		НоваяЗапись_И.СуммаСценарийИсполнениеСНДС 	= СтрокаТЧ.СуммаПлатежа * КоэффициентПересчетаВВалюта;
		
		НоваяЗапись_И.бит_БК_Организация = ПараметрыПроведения.Реквизиты[0].Организация;
		
		
		// Статья БДР
		НоваяЗапись_БДР_И = Движения.бит_КонтрольныеЗначенияБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись_БДР_И, НоваяЗапись_И);
		НоваяЗапись_БДР_И.СтатьяОборотов = СтрокаТЧ.ок_СтатьяОборотовБДР;
		Если НоваяЗапись_БДР_И.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			НоваяЗапись_БДР_И.Сценарий 	= ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_И");
		Иначе
			НоваяЗапись_БДР_И.Сценарий 	= ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_У");
		КонецЕсли;
		
		//Движение по паре сценариев «Заявка на оплату-Факт оплаты», контроль, два двидения по статье БДДС и БДР
		НоваяЗапись_К = Движения.бит_КонтрольныеЗначенияБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись_К, НоваяЗапись_И);
		НоваяЗапись_К.СуммаСценарийКонтроль 			= НоваяЗапись_К.СуммаСценарийИсполнение;
		НоваяЗапись_К.СуммаСценарийИсполнение 			= 0;
		НоваяЗапись_К.СуммаСценарийКонтрольСНДС 		= НоваяЗапись_К.СуммаСценарийИсполнениеСНДС;
		НоваяЗапись_К.СуммаСценарийИсполнениеСНДС 		= 0;
		
		НоваяЗапись_БДР_К = Движения.бит_КонтрольныеЗначенияБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись_БДР_К, НоваяЗапись_БДР_И);
		НоваяЗапись_БДР_К.СуммаСценарийКонтроль 		= НоваяЗапись_БДР_К.СуммаСценарийИсполнение;
		НоваяЗапись_БДР_К.СуммаСценарийИсполнение 		= 0;
		НоваяЗапись_БДР_К.СуммаСценарийКонтрольСНДС 	= НоваяЗапись_БДР_К.СуммаСценарийИсполнениеСНДС;
		НоваяЗапись_БДР_К.СуммаСценарийИсполнениеСНДС 	= 0;
		
		//Движение по паре сценариев «Факт – Заявка на оплату», исполнение только по БДР
		НоваяЗапись_БДР_И_Факт = Движения.бит_КонтрольныеЗначенияБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись_БДР_И_Факт, НоваяЗапись_БДР_И);
		
		НоваяЗапись_БДР_И_Факт.Сценарий = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролирующий сценарий", НоваяЗапись_БДР_И_Факт.Сценарий);
		
		Если НоваяЗапись_БДР_И_Факт.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			НоваяЗапись_БДР_И_Факт.СценарийКонтролируемый = ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_И");
		Иначе
			НоваяЗапись_БДР_И_Факт.СценарийКонтролируемый = ПредопределенноеЗначение("Справочник.СценарииПланирования.ЗаявкаНаОплату_У");
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-13 (#3654)
//Процедура ДополнитьДвиженияПоОпБ()
//Заменено на:
Процедура ДополнитьДвиженияПоОпБ(ОбСистемы_ОПБ,ПараметрыПроведения)
	Перем пДвижениеПоСоответствию;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-13 (#3654)
	
	пОборотыПоБюджетам = Движения.бит_ОборотыПоБюджетам.Выгрузить();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
	пОборотыПоБюджетамКопия = пОборотыПоБюджетам.Скопировать();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
	пИнд = пОборотыПоБюджетам.Количество();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)

	Для каждого СтрокаТЧ Из пОборотыПоБюджетам Цикл
	                 
		пСценарий = бит_БК_Общий.ПолучитьИмяНастройкиБК("Контролируемый сценарий", СтрокаТЧ.Сценарий);
		Если пСценарий.Количество() > 0  Тогда
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
			//НоваяЗапись = Движения.бит_ОборотыПоБюджетам.Добавить();
			//Заменено на:
			НоваяЗапись = пОборотыПоБюджетамКопия.Добавить();
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3567)			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЧ);
			НоваяЗапись.Сценарий = пСценарий[0].Значение;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
			пИнд = пИнд+1;			
			НоваяЗапись.НомерСтроки = пИнд;
			
			Если пДвижениеПоСоответствию = Неопределено 
			 ИЛИ ЗначениеЗаполнено(пДвижениеПоСоответствию.НомерСтрокиПриемника) Тогда 
				пДвижениеПоСоответствию	= Движения.бит_СоответствиеЗаписейТрансляции.Добавить();
				
				пДвижениеПоСоответствию.Период	 		 	 = ПараметрыПроведения.Реквизиты[0].Период;
				пДвижениеПоСоответствию.Активность 		 	 = Истина;
				пДвижениеПоСоответствию.Источник 		 	 = ОбСистемы_ОПБ;
				пДвижениеПоСоответствию.Приемник			 = ОбСистемы_ОПБ;
				пДвижениеПоСоответствию.Организация			 = Организация;
				пДвижениеПоСоответствию.НомерСтрокиИсточника = пИнд;
			Иначе 
				пДвижениеПоСоответствию.НомерСтрокиПриемника = пИнд;
			КонецЕсли;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
			
		КонецЕсли;
		
	КонецЦикла;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-02-14 (#3654)
	пДвиженияОпБ = Движения.бит_ОборотыПоБюджетам;
	пДвиженияОпБ.Очистить();
	пДвиженияОпБ.Записывать = Истина;
	пДвиженияОпБ.мТаблицаДвижений = пОборотыПоБюджетамКопия;
	пДвиженияОпБ.ДобавитьДвижение();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-02-14 (#3654)
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-12 (#3491)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-09-13 (#4338)
Функция ПолучитьПлатежныеПозицииДокументаОснования()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПлатежныеПозиции.ПлатежнаяПозиция КАК ПлатежнаяПозиция
		|ИЗ
		|	Документ.ПлатежноеПоручение.бит_ПлатежныеПозиции КАК ПлатежныеПозиции
		|ГДЕ
		|	ПлатежныеПозиции.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);

	ПлатежныеПозиции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПлатежнаяПозиция");
	
	Возврат ПлатежныеПозиции;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-09-13 (#4338)

#КонецЕсли