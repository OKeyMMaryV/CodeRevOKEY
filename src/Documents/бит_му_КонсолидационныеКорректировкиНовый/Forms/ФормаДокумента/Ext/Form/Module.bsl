
#Область ОписаниеПеременных   

&НаСервере
Перем мПротоколЗаполнения; // Хранит структуру для формирования протокола заполнения документа.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// заполняем кэш значений	
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	ЗаполнитьСписокОрганизаций();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	фПротоколЗаполнения = ДокументОбъект.ПротоколЗаполнения.Получить();
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
		
		КнопкаГруппыПодменю = ЭтотОбъект.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтотОбъект.Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
		
	КонецЦикла;
	
	// кешируем количество субконто
	фКоличествоСубконтоМУ = 4;
	 
	// устанавливаем связи параметров выбора и связи по типу субконто
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетИнвестиций", "СубконтоИнвестиций", фКоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетИнвестиций, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоИнвестиций");
	
	// устанавливаем связи параметров выбора и связи по типу субконто
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетДоходов", "СубконтоДоходов", фКоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");
	
	// устанавливаем связи параметров выбора и связи по типу субконто
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетУбыткаОбесцененияГудвилла", "СубконтоУбыткаОбесцененияГудвилла", фКоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетУбыткаОбесцененияГудвилла, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоУбыткаОбесцененияГудвилла");

	УправлениеЭлементамиФормыСервер();
	
	УстановитьПараметрыВыбораДляСчетов();

	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// установить заголовок формы
	УстановитьЗаголовокФормыДокумента();
	
	ОбъектСистемыПриИзменении(Элементы.ОбъектСистемы);
	
	ЗаполнитьДеревоСоставНРП();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПротоколЗаполнения = Новый ХранилищеЗначения(фПротоколЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы статус документа.
	УстановитьЗаголовокФормыДокумента();
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_КонсолидационныеКорректировкиНовый";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериметрКонсолидацииПриИзменении(Элемент)
	
	ИзменениеПериметраКонсолидации();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериметрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Периметр) И (Объект.Периметр <> ВыбранноеЗначение) Тогда 
		
		Если (Объект.Гудвилл.Количество() > 0 
			ИЛИ Объект.СоставНРП.Количество()> 0
			ИЛИ Объект.СоставНРП.Количество()> 0
			ИЛИ Объект.СоставНРП.Количество()> 0)Тогда
		
			СтандартнаяОбработка = Ложь;
			
			ДопПараметры = Новый Структура("ЗапомнитьПериметр", Объект.Периметр);
			Текст = "ru = 'При изменении периметра консолидации табличные части документа будут очищены! Продолжить?'";
			Оповещение = Новый ОписаниеОповещения("ВопросОбОчистке1Завершение", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(Оповещение, НСтр(Текст), РежимДиалогаВопрос.ДаНет, 0);
		
		Иначе
			
			ЗаполнитьДеревоСоставНРП();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбОчистке1Завершение".
//
&НаКлиенте
Процедура ВопросОбОчистке1Завершение(Ответ, ДопПараметры) Экспорт

	ЗапомнитьПериметр = ДопПараметры.ЗапомнитьПериметр;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Гудвилл.Очистить();
		Объект.СоставНРП.Очистить();
		ЗаполнитьДеревоСоставНРП();
		Объект.Капитал.Очистить();
		
		ИзменениеПериметраКонсолидации();
	
	Иначе
		
		Объект.Периметр = ЗапомнитьПериметр;
		
	КонецЕсли;
	
КонецПроцедуры // ВопросОбОчистке1Завершение()

&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(мКэшЗначений.ВидОбъекта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.ОбъектСистемы);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", мКэшЗначений.ДоступныеОбъектыСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	ИзменениеОбъектаСистемы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) И (Объект.ОбъектСистемы <> ВыбранноеЗначение) Тогда
		
		СтандартнаяОбработка = Ложь;
			
		ДопПараметры = Новый Структура("ЗапомнитьОбъектСистемы, ВыбранноеЗначение", Объект.ОбъектСистемы, ВыбранноеЗначение);
		Текст = "ru = 'При изменении регистра бухгалтерии счета учета в документе будут очищены! Продолжить?'";
		Оповещение = Новый ОписаниеОповещения("ВопросОбОчистке2Завершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, НСтр(Текст), РежимДиалогаВопрос.ДаНет, 0);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбОчистке2Завершение".
//
&НаКлиенте
Процедура ВопросОбОчистке2Завершение(Ответ, ДопПараметры) Экспорт

	ЗапомнитьОбъектСистемы = ДопПараметры.ЗапомнитьОбъектСистемы;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ОбъектСистемы 					= ДопПараметры.ВыбранноеЗначение;
		Объект.СчетВспомогательный 				= Неопределено;
		Объект.СчетГудвилла						= Неопределено;
		Объект.СчетСписанияОбесцененияГудвилла	= Неопределено;
		Объект.ОсновнойСчетНПР					= Неопределено;
		Объект.СписокСчетовНРП.Очистить();

		//Объект.СписокСчетовАкционерногоКапитала.Очистить();
		//Объект.СписокСчетовЭмиссионногоДохода.Очистить();
		
		ИзменениеОбъектаСистемы();
	
	Иначе
		
		Объект.ОбъектСистемы = ЗапомнитьОбъектСистемы;
		
	КонецЕсли;
	
КонецПроцедуры // ВопросОбОчистке2Завершение()

&НаКлиенте
Процедура СчетИнвестицийПриИзменении(Элемент)
	
	ИзменениеСчетИнвестиций();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоИнвестицийПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоИнвестиций(Объект, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоИнвестицийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконтоИнвестиций(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоИнвестицийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	
	ИсключитьОрганизацию = Ложь;	
	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоИнвестиций"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , ИсключитьОрганизацию);
													 
КонецПроцедуры // СубконтоИнвестицийАвтоПодбор()
												 
&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	ИзменениеСчетДоходов();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоДоходов(Объект, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	НачалоВыбораСубконтоДоходов(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	
	ИсключитьОрганизацию = Ложь;	
	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоДоходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , ИсключитьОрганизацию);
													 
КонецПроцедуры // СубконтоДоходовАвтоПодбор()

&НаКлиенте
Процедура СчетУбыткаОбесцененияГудвиллаПриИзменении(Элемент)
	
	ИзменениеСчетУбыткаОбесцененияГудвилла();

КонецПроцедуры

&НаКлиенте
Процедура СубконтоУбыткаОбесцененияГудвиллаПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоУбыткаОбесцененияГудвилла(Объект, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоУбыткаОбесцененияГудвиллаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	НачалоВыбораСубконтоУбыткаОбесцененияГудвилла(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоУбыткаОбесцененияГудвиллаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	
	ИсключитьОрганизацию = Ложь;	
	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоУбыткаОбесцененияГудвилла"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , ИсключитьОрганизацию);
													 
КонецПроцедуры // СубконтоУбыткаОбесцененияГудвиллаАвтоПодбор()

&НаКлиенте
Процедура СуммаИнвестицийПриИзменении(Элемент)
	
	РассчитатьГудвилПриобретенияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГудвилл

&НаКлиенте
Процедура ГудвиллСправедливаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Гудвилл.ТекущиеДанные;
	
	Обесценение = ТекущиеДанные.СправедливаяСтоимость - ТекущиеДанные.НаОтчетнуюДату;
	ТекущиеДанные.Обесценение = Обесценение;
	
КонецПроцедуры

&НаКлиенте
Процедура ГудвиллНаОтчетнуюДатуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Гудвилл.ТекущиеДанные;
	
	Обесценение = ТекущиеДанные.СправедливаяСтоимость - ТекущиеДанные.НаОтчетнуюДату;
	ТекущиеДанные.Обесценение = Обесценение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДочернииКомпании

&НаКлиенте
Процедура ДочернииКомпанииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДочернииКомпании.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	     Возврат;
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки);
	ФиксСтруктура   = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
	Элементы.Капитал.ОтборСтрок = ФиксСтруктура;
	
	РасчитатьСуммуКапитала();
	
КонецПроцедуры

&НаКлиенте
Процедура ДочернииКомпанииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	УстановитьДоступностьЗаполненияКапитала();
	
КонецПроцедуры

&НаКлиенте
Процедура ДочернииКомпанииПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДочернииКомпании.ТекущиеДанные;
	
	ПривестиТаблицуКапиталКДочернииКомпании(ТекущиеДанные.КлючСтроки);
		 
КонецПроцедуры

&НаКлиенте
Процедура ДочернииКомпанииПослеУдаления(Элемент)
	
	УправлениеЭлементамиФормыСервер();

	РасчитатьСуммуКапитала();
	
КонецПроцедуры

&НаКлиенте
Процедура ДочернииКомпанииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		КлючСтроки = 0;
		ДочернииКомпанииПриНачалеРедактированияНаСервере(КлючСтроки);
		Элементы.ДочернииКомпании.ТекущиеДанные.КлючСтроки = КлючСтроки;
		
		УправлениеЭлементамиФормыСервер();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДочернииКомпанииПриНачалеРедактированияНаСервере(КлючСтроки)
	
	// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей "Капиатал".
	// Значение должно быть уникальным в пределах таблицы ДочернииКомпании.
	НеУстановлено = Истина;
	Кандидат      = Объект.ДочернииКомпании.Количество();
	Отбор         = Новый Структура("КлючСтроки", Кандидат);
	Пока НеУстановлено Цикл
		
		Отбор.Вставить("КлючСтроки",Кандидат);
		
		Массив = Объект.ДочернииКомпании.НайтиСтроки(Отбор);
		Если Массив.Количество() = 0 Тогда
			// Уникальное значение ключа
			КлючСтроки = Кандидат;
			НеУстановлено = Ложь;
			
		Иначе
			// Такое значение ключа уже использовано
			Кандидат = Кандидат + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКапитал

&НаКлиенте
Процедура КапиталПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
	
		КлючСтроки = Элементы.ДочернииКомпании.ТекущиеДанные.КлючСтроки;
	    Элемент.ТекущиеДанные.КлючСтроки = КлючСтроки;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КапиталНаОтчетнуюДатуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Капитал.ТекущиеДанные;
	ТекущиеДанные.Изменение = ТекущиеДанные.НаОтчетнуюДату - ТекущиеДанные.НаКонецПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура КапиталНаКонецПериодаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Капитал.ТекущиеДанные;
	ТекущиеДанные.Изменение = ТекущиеДанные.НаОтчетнуюДату - ТекущиеДанные.НаКонецПериода;

КонецПроцедуры

&НаКлиенте
Процедура КапиталПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РасчитатьСуммуКапитала();
	
КонецПроцедуры

&НаКлиенте
Процедура КапиталПослеУдаления(Элемент)
	
	РасчитатьСуммуКапитала();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставНРП

// Процедура - обработчик события "ПриАктивизацииЯчейки" табличного поля "СоставНРП".
//
&НаКлиенте
Процедура СоставНРППриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.СоставНРП.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементДерева = Элементы.СоставНРП.ТекущийЭлемент;
	
	Если ТекущийЭлементДерева.Имя = "СоставНРПСумма" Тогда
		Если (ТекущиеДанные.ПолучитьЭлементы().Количество() > 0) ИЛИ (ТекущиеДанные.Аналитика = мКэшЗначений.Составляющие["ОбесценениеГудвилла"])
			ИЛИ (ТекущиеДанные.Аналитика = мКэшЗначений.Составляющие["Итого"])
		Тогда
			ТекущийЭлементДерева.ТолькоПросмотр = Истина;
		Иначе
			ТекущийЭлементДерева.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма" табличного поля "СоставНРП".
//
&НаКлиенте
Процедура СоставНРПСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставНРП.ТекущиеДанные;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	ПосчитатьИтогиДляВеткиДерева(Родитель);
	
	Если ТипЗнч(ТекущиеДанные.Аналитика) = Тип("СправочникСсылка.Организации") Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СоставляющаяНРП", Родитель.Аналитика);
		ПараметрыОтбора.Вставить("Организация", 	ТекущиеДанные.Аналитика);
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СоставляющаяНРП", ТекущиеДанные.Аналитика);
		ПараметрыОтбора.Вставить("Организация", 	мКэшЗначений.ОрганизацияПустаяСсылка);
	КонецЕсли;
	
	НайденныеСтроки = Объект.СоставНРП.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = Объект.СоставНРП.Добавить();
		НоваяСтрока.СоставляющаяНРП = ПараметрыОтбора.СоставляющаяНРП;
		НоваяСтрока.Организация		= ПараметрыОтбора.Организация;
		
		НайденныеСтроки.Добавить(НоваяСтрока);
	КонецЕсли;
	
	НайденныеСтроки[0].Сумма = ТекущиеДанные.Сумма;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, 	"_");
	ИмяПодменю      = Лев(ИмяКнопки, 	Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки, 	Позиция + 1);
	
	Объект.ВидОперации = мКэшЗначений.Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
																
	ОбработатьИзменениеВидаОперацииСервер();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

&НаКлиенте
Процедура КомандаВыборПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала 	= Объект.ДатаНач;
	Диалог.Период.ДатаОкончания = Объект.ДатаКон;
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыборПериодаЗавершение".
//
// Параметры:
// Период - СтандартныйПериод
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВыборПериодаЗавершение(Период, ДополнительныеДанные) Экспорт

	Если Период <> Неопределено Тогда
	
		Объект.ДатаНач = Период.ДатаНачала;
		Объект.ДатаКон = Период.ДатаОкончания;
	
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПериодаЗавершение

&НаКлиенте
Процедура ЗаполнитьНРП(Команда)
		
	Если Объект.СоставНРП.Количество() > 0 Тогда
		
		Текст = "ru = 'Очистить таблицу ""Состав НРП""?'";
		Оповещение = Новый ОписаниеОповещения("ВопросОбОчисткеСоставаНРПЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, НСтр(Текст), РежимДиалогаВопрос.ДаНет, 0);	
		
	Иначе
		
		ЗаполнитьСоставНПРНаСервере();
		
		// обновим дерево значений
		ЗаполнитьДеревоСоставНРП();
		
		Если Объект.СоставНРП.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбОчисткеСоставаНРПЗавершение".
//
&НаКлиенте
Процедура ВопросОбОчисткеСоставаНРПЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Объект.СоставНРП.Очистить();
	Модифицированность = Истина;
	
	ЗаполнитьСоставНПРНаСервере();
	
	// обновим дерево значений
	ЗаполнитьДеревоСоставНРП();
	
	Если Объект.СоставНРП.Количество() > 0 Тогда
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ВопросОбОчисткеСоставаНРПЗавершение()

&НаКлиенте
Процедура ЗаполнитьДеревоСоставНРП()

	Соотв = Новый Соответствие;
	
	ЭлементыДерева = СоставНРП.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	// заполним дерево элементами первого уровня
	Для каждого ТекСоставляющаяНРП Из мКэшЗначений.Составляющие Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.Аналитика = ТекСоставляющаяНРП.Значение;
		Соотв.Вставить(СтрокаНовая.Аналитика, СтрокаНовая);
	КонецЦикла;
	
	// заполним дерево дочерними элементами из табличной части
	Для каждого ТекСтр Из Объект.СоставНРП Цикл
		Ветка = Соотв[ТекСтр.СоставляющаяНРП];
		
		Если ЗначениеЗаполнено(ТекСтр.Организация) Тогда			
			СтрокаНовая = Ветка.ПолучитьЭлементы().Добавить();
			СтрокаНовая.Аналитика = ТекСтр.Организация;
		Иначе
			СтрокаНовая = Ветка;
		КонецЕсли;
		
		СтрокаНовая.Сумма	  = ТекСтр.Сумма;
	КонецЦикла;
	
	// развернем все элементы дерева
	ЭлементыДерева = СоставНРП.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Элементы.СоставНРП.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
		ПосчитатьИтогиДляВеткиДерева(Элемент);		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДеревоСоставНРП() 

&НаКлиенте
Процедура ЗаполнитьДочерниеКомпании(Команда)
		
	Если Объект.ДочернииКомпании.Количество() > 0 Тогда
				
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Оповещение = Новый ОписаниеОповещения("ВопросОбОчисткеДочернихКомпанийПередЗаполнениемЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Дочерние компании");
				
	Иначе	

		ЗаполнитьДочерниеКомпанииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОчисткеДочернихКомпанийПередЗаполнениемЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДочерниеКомпанииНаСервере();
	
КонецПроцедуры // ВопросОбОчисткеДочернихКомпанийПередЗаполнениемЗавершение()
 
&НаКлиенте
Процедура ЗаполнитьКапитал(Команда)
	
	ЗаполнитьТабличнуюЧастьКапитал();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьСчетНПРОсновным(Команда)
	
	ТекущиеДанные = Элементы.СписокСчетовНРП.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОсновнойСчетНПР = ТекущиеДанные.Счет;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыПриобретения(Команда)
	
	РассчитатьСуммыПриобретенияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура осуществляет управление доступностью/видимостью элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура УправлениеЭлементамиФормыСервер()
	
	//Элементы.ОбъектСистемы.Видимость = ЛОЖЬ;
	//Элементы.ОбъектСистемы.ТолькоПросмотр = ИСТИНА;
	
	ВидыОпераций   = мКэшЗначений.Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок;
	НаОтчетнуюДату = (Объект.ВидОперации = ВидыОпераций.НаОтчетнуюДату);
	
	Элементы.ГруппаПериод.Видимость  = НаОтчетнуюДату;
	
	Элементы.ГруппаГудвиллОтчетный.Видимость     = НаОтчетнуюДату;
	Элементы.ГруппаГудвиллПриопретения.Видимость = НЕ НаОтчетнуюДату;
	
	Элементы.ДочернииКомпании.ИзменятьСоставСтрок = НаОтчетнуюДату;
	УстановитьДоступностьЗаполненияКапитала();
	Элементы.КапиталНаКонецПериода.Видимость      = НаОтчетнуюДату;
	Элементы.КапиталИзменение.Видимость           = НаОтчетнуюДату;	
	Если НЕ НаОтчетнуюДату Тогда
		
		Элементы.ГруппаКапитал.Заголовок                  = "Доли капитала";
        Элементы.ГруппаСчетовСовокупногоДохода.Заголовок  = "Счета капитала";
		Элементы.КапиталНаОтчетнуюДату.Заголовок          = "На дату приобретения";
		Элементы.КапиталНаОтчетнуюДату.ПутьКДаннымПодвала = "СуммаКапитала";
	
	КонецЕсли; 
	
	Элементы.СчетСписанияОбесцененияГудвилла.Видимость     = НаОтчетнуюДату;
	Элементы.ГруппаСчетУбыткаОбесцененияГудвилла.Видимость = НаОтчетнуюДату;
	Элементы.СчетДолиВПрибылиУбытке.Видимость              = НаОтчетнуюДату;
    Элементы.СчетНРП.Видимость                             = НаОтчетнуюДату;
	Элементы.ГруппаСчетаДоходов.Видимость                  = НЕ НаОтчетнуюДату;
	                                  		
	Элементы.ГруппаНРП.Видимость = ЛОЖЬ;
	
	Если НЕ НаОтчетнуюДату 
	   И Объект.ДочернииКомпании.Количество()>0 
	   И Элементы.ДочернииКомпании.ТекущаяСтрока  = Неопределено Тогда
	   
	   Элементы.ДочернииКомпании.ТекущаяСтрока = 0;
	   
	КонецЕсли;	
	
КонецПроцедуры // УправлениеЭлементамиФормыСервер()

// Процедура - устанавливает доступность табличной части "Капитал".
//
&НаСервере
Процедура УстановитьДоступностьЗаполненияКапитала()

	Элементы.Капитал.Доступность = (НЕ Объект.ДочернииКомпании.Количество() = 0);	

КонецПроцедуры // УстановитьДоступностьЗаполненияКапитала()

&НаСервере 
Процедура ЗаполнитьДочерниеКомпанииНаСервере()
	
	Объект.ДочернииКомпании.Очистить();
	Объект.Капитал.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_му_СоставПериметровКонсолидацииСрезПоследних.ПериметрКонсолидации КАК ПериметрКонсолидации,
	|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация КАК ОбъектИнвестиций
	|ПОМЕСТИТЬ ОбъектыИнвестиций
	|ИЗ
	|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Период, ПериметрКонсолидации = &Периметр) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	|ГДЕ
	|	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Период
	|			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|	И бит_му_СоставПериметровКонсолидацииСрезПоследних.МетодКонсолидации = &ПолнаяКонсолидация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставыИнвесторов.СоставИнвесторов КАК СоставИнвесторов,
	|	МАКСИМУМ(СоставыИнвесторов.Период) КАК Период
	|ПОМЕСТИТЬ СоставыИнвесторов
	|ИЗ
	|	РегистрСведений.бит_му_СоставИнвесторов.СрезПоследних(&Период, ) КАК СоставыИнвесторов
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставыИнвесторов.СоставИнвесторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставыИнвесторов.СоставИнвесторов,
	|	СоставыИнвесторов.Период,
	|	ДолиАкционеров.Акционер КАК Инвестор,
	|	ДолиАкционеров.ДоляВЧистыхАктивах
	|ПОМЕСТИТЬ ИнвесторыОбъектовИнвестиций
	|ИЗ
	|	СоставыИнвесторов КАК СоставыИнвесторов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СоставИнвесторов КАК ДолиАкционеров
	|		ПО СоставыИнвесторов.СоставИнвесторов = ДолиАкционеров.СоставИнвесторов
	|			И СоставыИнвесторов.Период = ДолиАкционеров.Период
	|ГДЕ
	|	ДолиАкционеров.Акционер В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ОбъектыИнвестиций.ОбъектИнвестиций
	|			ИЗ
	|				ОбъектыИнвестиций КАК ОбъектыИнвестиций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставПериметровКонсолидации.ПериметрКонсолидации КАК ПериметрКонсолидации,
	|	СоставПериметровКонсолидации.Организация КАК ОбъектИнвестиций,
	|	ИнвесторыОбъектовИнвестиций.Инвестор,
	|	ИнвесторыОбъектовИнвестиций.ДоляВЧистыхАктивах КАК Доля
	|ИЗ
	|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Период, ПериметрКонсолидации = &Периметр) КАК СоставПериметровКонсолидации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнвесторыОбъектовИнвестиций КАК ИнвесторыОбъектовИнвестиций
	|		ПО СоставПериметровКонсолидации.Организация = ИнвесторыОбъектовИнвестиций.СоставИнвесторов.ОбъектИнвестирования
	|ГДЕ
	|	(КОНЕЦПЕРИОДА(СоставПериметровКонсолидации.ДатаОкончания, ДЕНЬ) >= &Период
	|			ИЛИ СоставПериметровКонсолидации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|	И СоставПериметровКонсолидации.ТипКонсолидации = &Обычная
	|	И СоставПериметровКонсолидации.МетодКонсолидации = &ПолнаяКонсолидация";
	
	Запрос.УстановитьПараметр("Период",             Объект.Дата);
	Запрос.УстановитьПараметр("Периметр",           Объект.Периметр);
	Запрос.УстановитьПараметр("Обычная",            Перечисления.бит_му_ТипыКонсолидации.Обычная);
	Запрос.УстановитьПараметр("ПолнаяКонсолидация", Перечисления.бит_му_МетодыКонсолидации.ПолнаяКонсолидация);

	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// Изменение кода. Начало. 24.01.2012{{
		
		Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок.НаДатуПриобретенияБизнеса 
			  И НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Инвестор) Тогда
		
			  Продолжить;
		
		КонецЕсли; 
		
		// Изменение кода. Конец. 24.01.2012}}		
		
		НоваяСтрока = Объект.ДочернииКомпании.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.КлючСтроки = НоваяСтрока.НомерСтроки;
		
	КонецЦикла;
	
	УстановитьДоступностьЗаполненияКапитала();  	

КонецПроцедуры // ЗаполнитьДочерниеКомпанииНаСервере()

// Процедура обрабатывает изменение вида операции.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()

	ВидыОпераций = мКэшЗначений.Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок;
	
	// Если вид операции "НаДатуПриобретения", то нужно, 
	// что бы в ТЧ "ДочернииОрганизации" осталась только одна строка.
	Если Объект.ВидОперации = ВидыОпераций.НаДатуПриобретенияБизнеса Тогда
	
		Если Объект.ДочернииКомпании.Количество() = 0 Тогда
			ТекущиеДанные = Объект.ДочернииКомпании.Добавить();
			КлючСтроки = 0;
			ДочернииКомпанииПриНачалеРедактированияНаСервере(КлючСтроки);
			ТекущиеДанные.КлючСтроки = КлючСтроки;
		Иначе
			Индекс = Объект.ДочернииКомпании.Количество() - 1;
			Пока Индекс > 0 Цикл //Оставляем строку № 1 (Инд = 0)
				
				ТекущиеДанные = Объект.ДочернииКомпании.Получить(Индекс);
				ПривестиТаблицуКапиталКДочернииКомпании(ТекущиеДанные.КлючСтроки);
				
				Объект.ДочернииКомпании.Удалить(Индекс);
			    Индекс = Индекс - 1;
			КонецЦикла; 
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	Модифицированность = Истина;

КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

// Процедура заполняет список доступных для выбора организаций.
//
// Параметры:
//  нет.
//
&НаСервере
Процедура ЗаполнитьСписокОрганизаций()

	СоставПериметраКонсолидацииКонсолидирующие = ПолучитьСоставПериметраКонсолидации(Объект.Периметр, Объект.Дата, мКэшЗначений.ТипКонсолидирующая);
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(СоставПериметраКонсолидацииКонсолидирующие);
	
	СоставПериметраКонсолидацииОбычные = ПолучитьСоставПериметраКонсолидации(Объект.Периметр, Объект.Дата, мКэшЗначений.ТипОбычная);
	
	Элементы.ГудвиллИнвестор.СписокВыбора.ЗагрузитьЗначения(СоставПериметраКонсолидацииОбычные);
	Элементы.фИнвестор.СписокВыбора.ЗагрузитьЗначения(СоставПериметраКонсолидацииОбычные);
	Элементы.ДочернииКомпанииИнвестор.СписокВыбора.ЗагрузитьЗначения(СоставПериметраКонсолидацииОбычные);
		
КонецПроцедуры // ЗаполнитьСписокОрганизаций()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)

	КэшированныеЗначения = Новый Структура;
 
	мКэшЗначений.Вставить("ПредставлениеОбъекта",  				Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	мКэшЗначений.Вставить("ВидОбъекта",	  		   				Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	мКэшЗначений.Вставить("ТипОбычная", 						Перечисления.бит_му_ТипыКонсолидации.Обычная);
	мКэшЗначений.Вставить("ТипКонсолидирующая", 				Перечисления.бит_му_ТипыКонсолидации.Консолидирующая);
	                                                	
	мКэшЗначений.Вставить("МетодПолнаяКонсолидация", 			Перечисления.бит_му_МетодыКонсолидации.ПолнаяКонсолидация);
	мКэшЗначений.Вставить("МетодДолевоеУчастие", 				Перечисления.бит_му_МетодыКонсолидации.ДолевоеУчастие);
	мКэшЗначений.Вставить("МетодПропорциональнаяКонсолидация", 	Перечисления.бит_му_МетодыКонсолидации.ПропорциональнаяКонсолидация);
	
	мКэшЗначений.Вставить("ОрганизацияПустаяСсылка",			Справочники.Организации.ПустаяСсылка());
	
	// Составляющие НРП
	Составляющие = Новый Структура; 	
	Для каждого ТекСтр Из Метаданные.Перечисления.бит_му_СоставляющиеНРП.ЗначенияПеречисления Цикл
		Составляющие.Вставить(ТекСтр.Имя, Перечисления.бит_му_СоставляющиеНРП[ТекСтр.Имя]);
	КонецЦикла;     	
	мКэшЗначений.Вставить("Составляющие", Составляющие);
	
	// Список выбора доступных регистров бухгалтерии
	ДоступныеОбъектыСистемы = Новый СписокЗначений;
	МетаОбъект    = Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2;
	ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
	ДоступныеОбъектыСистемы.Добавить(ОбъектСистемы);
	
	ДоступныеОбъектыСистемы.СортироватьПоЗначению();
	
	КэшированныеЗначения.Вставить("ДоступныеОбъектыСистемы", ДоступныеОбъектыСистемы);	
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_му_ВидыОперацийКонсолидационныхКорректировок", 	бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);

КонецПроцедуры

// Функция получает состав периметра консолидации на указанную дату.
//
// Параметры:
//  ПериметрКонсолидации - СправочникСсылка.бит_му_ПериметрыКонсолидации.
//  Период - Дата.
//	ТипКонсолидации - ПеречислениеСсылка.бит_му_ТипыКонсолидации.
//	ОтборПоФлагуОсуществляетКонтрольПериметра - Булево.
//	МетодКонсолидации - ПеречислениеСсылка.бит_му_МетодыКонсолидации.
//
// Возвращаемое значение:
//  Результат - ТаблицаЗначений.
//
&НаСервере
Функция ПолучитьСоставПериметраКонсолидации(ПериметрКонсолидации, Период, ТипКонсолидации, ОтборПоФлагуОсуществляетКонтрольПериметра = Ложь, МетодКонсолидации = Неопределено)
	
	Возврат ПолучитьСоставПериметраКонсолидацииВсеПоля(ПериметрКонсолидации, Период, ТипКонсолидации, ОтборПоФлагуОсуществляетКонтрольПериметра, МетодКонсолидации).ВыгрузитьКолонку("Организация");
	
КонецФункции

// Функция получает состав периметра консолидации на указанную дату.
//
// Параметры:
//  ПериметрКонсолидации - СправочникСсылка.бит_му_ПериметрыКонсолидации.
//  Период - Дата.
//	ТипКонсолидации - ПеречислениеСсылка.бит_му_ТипыКонсолидации.
//	ОтборПоФлагуОсуществляетКонтрольПериметра - Булево.
//	МетодКонсолидации - ПеречислениеСсылка.бит_му_МетодыКонсолидации.
//
// Возвращаемое значение:
//  Результат - Массив.
//
&НаСервере
Функция ПолучитьСоставПериметраКонсолидацииВсеПоля(ПериметрКонсолидации, Период, ТипКонсолидации = Неопределено, 
	ОтборПоФлагуОсуществляетКонтрольПериметра = Ложь, МетодКонсолидации = Неопределено)

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация,
				   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ТипКонсолидации,
				   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.МетодКонсолидации,
				   |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ОсуществляетКонтрольПериметра
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Период, ПериметрКонсолидации = &ПериметрКонсолидации) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |ГДЕ
	               |	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Период
	               |			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))"
				   + ?(НЕ ОтборПоФлагуОсуществляетКонтрольПериметра, "", "
				   |	И бит_му_СоставПериметровКонсолидацииСрезПоследних.ОсуществляетКонтрольПериметра")
				   + ?(МетодКонсолидации = Неопределено, "", "
				   |	И бит_му_СоставПериметровКонсолидацииСрезПоследних.МетодКонсолидации = &МетодКонсолидации")
				   + ?(ТипКонсолидации = Неопределено, "", "
				   |	И бит_му_СоставПериметровКонсолидацииСрезПоследних.ТипКонсолидации = &ТипКонсолидации") + "
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", 				Период);
	Запрос.УстановитьПараметр("ТипКонсолидации",		ТипКонсолидации);
	Запрос.УстановитьПараметр("МетодКонсолидации",		МетодКонсолидации);
	Запрос.УстановитьПараметр("ПериметрКонсолидации", 	ПериметрКонсолидации);
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции // ПолучитьСоставПериметраКонсолидации()

// Функция получает имя плана счетов для указанного регистра.
//
// Параметры:
//  ОбъектСистемыСсылка - СправочникСсылка.бит_ОбъектыСистемы.
//
// Возвращаемое значение:
//  Результат - Строка.
//
&НаСервереБезКонтекста
Функция ПолучитьИмяПланаСчетов(ОбъектСистемыСсылка)

	Возврат Метаданные.РегистрыБухгалтерии[ОбъектСистемыСсылка.ИмяОбъекта].ПланСчетов.Имя;
	
КонецФункции

// Процедура заполняет табличную часть "СоставНПР".
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьСоставНПРНаСервере()

	мПротоколЗаполнения = Неопределено;

	СоставПериметра = ПолучитьСоставПериметраКонсолидацииВсеПоля(Объект.Периметр, Объект.Дата);
	
	МатеринскиеКомпании 	= Новый Массив;
	ЭлиминирующиеКомпании 	= Новый Массив;
	
	Для каждого ТекСтр Из СоставПериметра Цикл
		
		//
		Если ТекСтр.ОсуществляетКонтрольПериметра Тогда
			МатеринскиеКомпании.Добавить(ТекСтр.Организация);
			Продолжить;
		КонецЕсли;
		
		//
		Если ТекСтр.ТипКонсолидации = мКэшЗначений.ТипКонсолидирующая Тогда
			ЭлиминирующиеКомпании.Добавить(ТекСтр.Организация);
			Продолжить;
		КонецЕсли;
		
		Если ТекСтр.МетодКонсолидации = мКэшЗначений.МетодПолнаяКонсолидация Тогда
		
			// расчет составляющей НРП "НРПДочернейКомпании"
			СоставляющаяНРП = мКэшЗначений.Составляющие["НРПДочернейКомпании"];
			СуммаОборотовНРП = ПолучитьСуммуОборотаНРП(ТекСтр.Организация, мКэшЗначений.МетодПолнаяКонсолидация, СоставляющаяНРП);
			ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, СуммаОборотовНРП);
			
		ИначеЕсли ТекСтр.МетодКонсолидации = мКэшЗначений.МетодДолевоеУчастие Тогда
		
			// расчет составляющей НРП "НРПАссоциированнойКомпании"
			СоставляющаяНРП = мКэшЗначений.Составляющие["НРПАссоциированнойКомпании"];
			СуммаОборотовНРП = ПолучитьСуммуОборотаНРП(ТекСтр.Организация, мКэшЗначений.МетодДолевоеУчастие, СоставляющаяНРП);
			ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, СуммаОборотовНРП);
			
		ИначеЕсли ТекСтр.МетодКонсолидации = мКэшЗначений.МетодПропорциональнаяКонсолидация Тогда
		
			// расчет составляющей НРП "НРПСовместноКонтролируемойКомпании"
			СоставляющаяНРП = мКэшЗначений.Составляющие["НРПСовместноКонтролируемойКомпании"];
			СуммаОборотовНРП = ПолучитьСуммуОборотаНРП(ТекСтр.Организация, мКэшЗначений.МетодПропорциональнаяКонсолидация, СоставляющаяНРП);
			ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, СуммаОборотовНРП);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// расчет составляющей НРП "НРПМатеринскойКомпании"
	СоставляющаяНРП = мКэшЗначений.Составляющие["НРПМатеринскойКомпании"];
	ТаблицаОстатковНРП = ПолучитьОстатокНРП(МатеринскиеКомпании, СоставляющаяНРП);
	
	Для каждого ТекСтр Из ТаблицаОстатковНРП Цикл	
		ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, ТекСтр.Сумма);
	КонецЦикла;

	// расчет составляющей НРП "УдалениеНереализованнойПрибылиГруппы"
	СоставляющаяНРП = мКэшЗначений.Составляющие["УдалениеНереализованнойПрибылиГруппы"];
	ТаблицаОстатковНРП = ПолучитьОстатокНРП(ЭлиминирующиеКомпании, СоставляющаяНРП);
	
	Для каждого ТекСтр Из ТаблицаОстатковНРП Цикл	
		ДобавитьСтрокуСоставНРП(СоставляющаяНРП, ТекСтр.Организация, ТекСтр.Сумма);
	КонецЦикла;
	
	// сформируем протокол заполнения документа
	фПротоколЗаполнения = Документы.бит_му_КонсолидационныеКорректировкиНовый.СформироватьПротоколЗаполненияДокумента(мПротоколЗаполнения);
	
КонецПроцедуры // ЗаполнитьСоставНПРНаСервере() 

// Функция получает сумму оборота за указанный период.
//
// Параметры:
//	ДатаНач - Дата.
//	ДатаКон - Дата.
//	Организация - СправочникСсылка.Организации.
//	СписокСчетов - Массив.
//	РегистрБухгалтерии - Строка.
//
// Возвращаемое значение:
//  Результат - Число.
//
&НаСервереБезКонтекста
Функция ПолучитьСуммуОборотаНРПЗаПериод(ДатаНач, ДатаКон, Организация, СписокСчетов, РегистрБухгалтерии)
	
	Результат = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрБухгалтерии.СуммаУпрОборот КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии." + РегистрБухгалтерии + ".Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК РегистрБухгалтерии";
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Запрос.УстановитьПараметр("ДатаНач",		ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",		ДатаКон);
	Запрос.УстановитьПараметр("СписокСчетов",	СписокСчетов);
	Запрос.УстановитьПараметр("Организация",	Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Сумма;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает строку из таблицы значений.
//
// Параметры:
//  СоставляющаяНРП - ПеречислениеСсылка.бит_му_СоставляющиеНРП.
//  Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//  Результат - Строка таблицы значений.
//
&НаСервере
Функция ПолучитьСтрокуПротоколаЗаполнения(СоставляющаяНРП, Организация)

	Если мПротоколЗаполнения = Неопределено Тогда
		мПротоколЗаполнения = Новый ТаблицаЗначений;
		мПротоколЗаполнения.Колонки.Добавить("СоставляющаяНРП");
		мПротоколЗаполнения.Колонки.Добавить("СуммаОборот");
		мПротоколЗаполнения.Колонки.Добавить("СуммаРезультат");
		мПротоколЗаполнения.Колонки.Добавить("ПодчиненныеДанные");
	КонецЕсли;
	
	ТекСтрокаПротоколаПоСоставляющейНРП = мПротоколЗаполнения.Найти(СоставляющаяНРП, "СоставляющаяНРП");
	Если ТекСтрокаПротоколаПоСоставляющейНРП = Неопределено Тогда
    	ТекСтрокаПротоколаПоСоставляющейНРП = мПротоколЗаполнения.Добавить();
		ТекСтрокаПротоколаПоСоставляющейНРП.СоставляющаяНРП = СоставляющаяНРП;
	КонецЕсли;
	
	Если ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные = Неопределено Тогда
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные = Новый ТаблицаЗначений;
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Колонки.Добавить("Организация");
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Колонки.Добавить("СуммаОборот");
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Колонки.Добавить("СуммаРезультат");
		ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Колонки.Добавить("ПодчиненныеДанные");
	КонецЕсли;
	
	ТекСтрокаПротоколаПоОрганизации = ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Найти(Организация, "Организация");	
	Если ТекСтрокаПротоколаПоОрганизации = Неопределено Тогда
		ТекСтрокаПротоколаПоОрганизации = ТекСтрокаПротоколаПоСоставляющейНРП.ПодчиненныеДанные.Добавить();
		ТекСтрокаПротоколаПоОрганизации.Организация = Организация;
	КонецЕсли;		
	
	Если ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные = Неопределено Тогда
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные = Новый ТаблицаЗначений;
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("ДатаНач");
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("ДатаКон");
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("Доля");
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("СуммаОборот");
		ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Колонки.Добавить("СуммаРезультат");
	КонецЕсли;

	Возврат ТекСтрокаПротоколаПоОрганизации;
	
КонецФункции // ПолучитьСтрокуПротоколаЗаполнения()

// Функция возвращает обороты НРП.
//
// Параметры:
//	Организация - СправочникСсылка.Организации.
//	МетодКонсолидации - ПеречислениеСсылка.бит_му_МетодыКонсолидации.
//	СоставляющаяНРП - ПеречислениеСсылка.бит_му_СоставляющиеНРП.
//
// Возвращаемое значение:
//  Результат - Число.
//
&НаСервере
Функция ПолучитьСуммуОборотаНРП(Организация, МетодКонсолидации, СоставляющаяНРП)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода",		КонецДня(Объект.ДатаКон));
	Запрос.УстановитьПараметр("СписокСчетов",		Объект.СписокСчетовНРП.Выгрузить().ВыгрузитьКолонку("Счет"));
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Периметр",			Объект.Периметр);
	Запрос.УстановитьПараметр("МетодКонсолидации",	МетодКонсолидации);
	Запрос.Текст = "ВЫБРАТЬ
	               |	МУ_ОБОРОТЫ.Период КАК Период,
	               |	МУ_ОБОРОТЫ.Организация,
	               |	МУ_ОБОРОТЫ.СуммаУпрОборот
	               |ПОМЕСТИТЬ ТаблицаОбороты
	               |ИЗ
	               |	РегистрБухгалтерии." + Объект.ОбъектСистемы.ИмяОбъекта + ".Обороты(, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК МУ_ОБОРОТЫ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаМертвыхПериодов.Период КАК ДатаОкончания,
	               |	ТаблицаМертвыхПериодов.ДатаПовторногоВхода
	               |ПОМЕСТИТЬ МертвыеПериоды
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПериодыВыхода.Период КАК Период,
	               |		ЕСТЬNULL(МИНИМУМ(АктивныеПериоды.Период), &КонецПериода) КАК ДатаПовторногоВхода
	               |	ИЗ
	               |		РегистрСведений.бит_му_СоставПериметровКонсолидации КАК ПериодыВыхода
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				бит_му_СоставПериметровКонсолидации.Период КАК Период
	               |			ИЗ
	               |				РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
	               |			ГДЕ
	               |				бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации = &Периметр
	               |				И бит_му_СоставПериметровКонсолидации.Организация = &Организация
	               |				И бит_му_СоставПериметровКонсолидации.МетодКонсолидации = &МетодКонсолидации) КАК АктивныеПериоды
	               |			ПО ПериодыВыхода.Период < АктивныеПериоды.Период
	               |	ГДЕ
	               |		ПериодыВыхода.ПериметрКонсолидации = &Периметр
	               |		И ПериодыВыхода.Организация = &Организация
	               |		И ПериодыВыхода.Период <= &КонецПериода
	               |		И ПериодыВыхода.МетодКонсолидации <> &МетодКонсолидации
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПериодыВыхода.Период
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ПериодыВыхода.ДатаОкончания,
	               |		МИНИМУМ(АктивныеПериоды.Период)
	               |	ИЗ
	               |		РегистрСведений.бит_му_СоставПериметровКонсолидации КАК ПериодыВыхода
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				бит_му_СоставПериметровКонсолидации.Период КАК Период
	               |			ИЗ
	               |				РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
	               |			ГДЕ
	               |				бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации = &Периметр
	               |				И бит_му_СоставПериметровКонсолидации.Организация = &Организация
	               |				И бит_му_СоставПериметровКонсолидации.МетодКонсолидации = &МетодКонсолидации) КАК АктивныеПериоды
	               |			ПО ПериодыВыхода.ДатаОкончания < АктивныеПериоды.Период
	               |	ГДЕ
	               |		ПериодыВыхода.ПериметрКонсолидации = &Периметр
	               |		И ПериодыВыхода.Организация = &Организация
	               |		И ПериодыВыхода.Период <= &КонецПериода
	               |		И ПериодыВыхода.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	               |		И ПериодыВыхода.МетодКонсолидации = &МетодКонсолидации
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ПериодыВыхода.ДатаОкончания) КАК ТаблицаМертвыхПериодов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	бит_му_СоставПериметровКонсолидации.Период,
	               |	бит_му_СоставПериметровКонсолидации.Организация,
	               |	бит_му_СоставПериметровКонсолидации.ПолнаяДоляВладения КАК ПолнаяДоляВладения
	               |ПОМЕСТИТЬ ПараметрыПериметра
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
	               |ГДЕ
	               |	бит_му_СоставПериметровКонсолидации.Организация = &Организация
	               |	И бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации = &Периметр
	               |	И бит_му_СоставПериметровКонсолидации.Период <= &КонецПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВложенныйЗапрос.Период
	               |ПОМЕСТИТЬ Периоды
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НАЧАЛОПЕРИОДА(ПараметрыПериметра.Период, МЕСЯЦ) КАК Период
	               |	ИЗ
	               |		ПараметрыПериметра КАК ПараметрыПериметра
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НАЧАЛОПЕРИОДА(ТаблицаОбороты.Период, МЕСЯЦ)
	               |	ИЗ
	               |		ТаблицаОбороты КАК ТаблицаОбороты) КАК ВложенныйЗапрос
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатыПараметров.Период КАК Период,
	               |	ВЫБОР
	               |		КОГДА МертвыеПериоды.ДатаОкончания ЕСТЬ NULL 
	               |			ТОГДА ПараметрыПериметра.ПолнаяДоляВладения
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПолнаяДоляВладения,
	               |	ВЫБОР
	               |		КОГДА МертвыеПериоды.ДатаОкончания ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК МертвыйПериод
	               |ПОМЕСТИТЬ ТаблицаПроценты
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Периоды.Период КАК Период,
	               |		МАКСИМУМ(ПараметрыПериметра.Период) КАК ПериодПараметры
	               |	ИЗ
	               |		Периоды КАК Периоды
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПериметра КАК ПараметрыПериметра
	               |			ПО Периоды.Период >= ПараметрыПериметра.Период
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Периоды.Период) КАК ДатыПараметров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПериметра КАК ПараметрыПериметра
	               |		ПО ДатыПараметров.ПериодПараметры = ПараметрыПериметра.Период
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МертвыеПериоды КАК МертвыеПериоды
	               |		ПО ДатыПараметров.Период >= МертвыеПериоды.ДатаОкончания
	               |			И ДатыПараметров.Период < МертвыеПериоды.ДатаПовторногоВхода
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДатыПараметров.Период,
	               |	ДатыПараметров.ПериодПараметры,
	               |	ВЫБОР
	               |		КОГДА МертвыеПериоды.ДатаОкончания ЕСТЬ NULL 
	               |			ТОГДА ПараметрыПериметра.ПолнаяДоляВладения
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА МертвыеПериоды.ДатаОкончания ЕСТЬ NULL 
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбороты.Период КАК Период,
	               |	ТаблицаОбороты.Организация,
	               |	ТаблицаОбороты.СуммаУпрОборот
	               |ИЗ
	               |	ТаблицаОбороты КАК ТаблицаОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МертвыеПериоды.ДатаОкончания КАК ДатаОкончания,
	               |	МертвыеПериоды.ДатаПовторногоВхода
	               |ИЗ
	               |	МертвыеПериоды КАК МертвыеПериоды
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПараметрыПериметра.Период КАК Период,
	               |	ПараметрыПериметра.Организация,
	               |	ПараметрыПериметра.ПолнаяДоляВладения
	               |ИЗ
	               |	ПараметрыПериметра КАК ПараметрыПериметра
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Периоды.Период КАК Период
	               |ИЗ
	               |	Периоды КАК Периоды
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПроценты.Период КАК Период,
	               |	ТаблицаПроценты.ПолнаяДоляВладения,
	               |	ТаблицаПроценты.МертвыйПериод
	               |ИЗ
	               |	ТаблицаПроценты КАК ТаблицаПроценты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбороты.Период КАК Период,
	               |	ТаблицаОбороты.СуммаУпрОборот,
	               |	ЕСТЬNULL(ТаблицаПроценты.ПолнаяДоляВладения, 0) КАК ПолнаяДоляВладения,
	               |	ТаблицаОбороты.СуммаУпрОборот * ЕСТЬNULL(ТаблицаПроценты.ПолнаяДоляВладения, 0) / 100 КАК СуммаРезультат
	               |ИЗ
	               |	ТаблицаОбороты КАК ТаблицаОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроценты КАК ТаблицаПроценты
	               |		ПО ТаблицаОбороты.Период = ТаблицаПроценты.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ПараметрыПериметра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ Периоды
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаПроценты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ МертвыеПериоды";
				   
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаРезультат = МассивРезультатов[10].Выгрузить();
	СуммаРезультат = ТаблицаРезультат.Итог("СуммаРезультат");
	
	МертвыеПериоды = МассивРезультатов[6].Выгрузить();
	МертвыеПериоды.Свернуть("ДатаОкончания");
	МертвыеПериоды.Колонки.Добавить("СуммаРезультат");
	
	// посчитаем суммы оборотов в "мертвых" периодах
	Для каждого ТекСтр Из МертвыеПериоды Цикл
		Если ТекСтр.ДатаОкончания = НачалоМесяца(ТекСтр.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		
		Сумма = ПолучитьСуммуОборотаНРПЗаПериод(НачалоМесяца(ТекСтр.ДатаОкончания), ТекСтр.ДатаОкончания, Организация, Запрос.Параметры.СписокСчетов, Объект.ОбъектСистемы.ИмяОбъекта);		
		ТекСтр.СуммаРезультат 	= Сумма;
		СуммаРезультат 			= СуммаРезультат - Сумма;
	КонецЦикла;
	
	// сформируем структуру для протокола заполнения документа
	ТекСтрокаПротоколаПоОрганизации = ПолучитьСтрокуПротоколаЗаполнения(СоставляющаяНРП, Организация);

	ТекДоля = Неопределено;  ТекДатаНач = Неопределено;  ТекСуммаУпрОборот = 0;  ТекСуммаУпрРезультат = 0;
	
	Для каждого ТекСтр Из ТаблицаРезультат Цикл
		
		Индекс = ТаблицаРезультат.Индекс(ТекСтр);
		Если Индекс < (ТаблицаРезультат.Количество() - 1) Тогда
			ПериодСлед = ТаблицаРезультат.Получить(Индекс + 1).Период;
		Иначе
			ПериодСлед = КонецМесяца(Объект.ДатаКон) + 1;
		КонецЕсли;
		
		Если ТекСтр.ПолнаяДоляВладения = ТекДоля Тогда
			// проверим мертвые периоды
			СтрокаПериодов = ДатаВходитВМертвыеПериоды(ТекСтр.Период, ПериодСлед, МертвыеПериоды);
			Если СтрокаПериодов <> Неопределено Тогда
				СтрокаПериодов.СуммаРезультат = СтрокаПериодов.СуммаРезультат*ТекДоля/100;
				ТекСуммаУпрОборот 		= ТекСуммаУпрОборот + СтрокаПериодов.СуммаРезультат;
				ТекСуммаУпрРезультат 	= ТекСуммаУпрРезультат + СтрокаПериодов.СуммаРезультат;
				
				// добавим строку в протокол заполнения
				НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
				НоваяСтрока.ДатаНач 		= ТекДатаНач;
				НоваяСтрока.ДатаКон 		= СтрокаПериодов.ДатаОкончания;
				НоваяСтрока.Доля			= ТекДоля;
				НоваяСтрока.СуммаОборот 	= ТекСуммаУпрОборот;
				НоваяСтрока.СуммаРезультат 	= ТекСуммаУпрРезультат;
				
				ТекДоля = Неопределено;  ТекДатаНач = Неопределено;  ТекСуммаУпрОборот = 0;  ТекСуммаУпрРезультат = 0;
			Иначе
				ТекСуммаУпрОборот 		= ТекСуммаУпрОборот + ТекСтр.СуммаУпрОборот;
				ТекСуммаУпрРезультат 	= ТекСуммаУпрРезультат + ТекСтр.СуммаРезультат;
			КонецЕсли;
		Иначе
			Если (ТекДоля <> Неопределено) И (ТекДоля <> 0) Тогда
				// добавим строку в протокол заполнения
				НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
				НоваяСтрока.ДатаНач 		= ТекДатаНач;
				НоваяСтрока.ДатаКон 		= ТекСтр.Период - 1;
				НоваяСтрока.Доля			= ТекДоля;
				НоваяСтрока.СуммаОборот 	= ТекСуммаУпрОборот;
				НоваяСтрока.СуммаРезультат 	= ТекСуммаУпрРезультат;
			КонецЕсли;
			
			ТекДоля 					= ТекСтр.ПолнаяДоляВладения;
			ТекДатаНач 					= ТекСтр.Период;
			
			// проверим мертвые периоды
			СтрокаПериодов = ДатаВходитВМертвыеПериоды(ТекСтр.Период, ПериодСлед, МертвыеПериоды);
			Если СтрокаПериодов <> Неопределено Тогда
				СтрокаПериодов.СуммаРезультат = СтрокаПериодов.СуммаРезультат*ТекДоля/100;
				ТекСуммаУпрОборот 	 	= СтрокаПериодов.СуммаРезультат;
				ТекСуммаУпрРезультат 	= СтрокаПериодов.СуммаРезультат;
				
				// добавим строку в протокол заполнения
				НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
				НоваяСтрока.ДатаНач 		= ТекДатаНач;
				НоваяСтрока.ДатаКон 		= СтрокаПериодов.ДатаОкончания;
				НоваяСтрока.Доля			= ТекДоля;
				НоваяСтрока.СуммаОборот 	= ТекСуммаУпрОборот;
				НоваяСтрока.СуммаРезультат 	= ТекСуммаУпрРезультат;
				
				ТекДоля = Неопределено;  ТекДатаНач = Неопределено;  ТекСуммаУпрОборот = 0;  ТекСуммаУпрРезультат = 0;
			Иначе			
				ТекСуммаУпрОборот 		= ТекСтр.СуммаУпрОборот;
				ТекСуммаУпрРезультат 	= ТекСтр.СуммаРезультат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ТекДоля <> Неопределено) И (ТекДоля <> 0) Тогда		
		// добавим строку в протокол заполнения
		НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
		НоваяСтрока.ДатаНач 		= ТекДатаНач;
		НоваяСтрока.ДатаКон 		= ТекСтр.Период - 1;
		НоваяСтрока.Доля			= ТекДоля;
		НоваяСтрока.СуммаОборот 	= ТекСуммаУпрОборот;
		НоваяСтрока.СуммаРезультат 	= ТекСуммаУпрРезультат;
	КонецЕсли;
	
	// посчитаем итог для организации
	ТекСтрокаПротоколаПоОрганизации.СуммаОборот 	= ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Итог("СуммаОборот");
	ТекСтрокаПротоколаПоОрганизации.СуммаРезультат 	= ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Итог("СуммаРезультат");
	
	Возврат СуммаРезультат;
	
КонецФункции

// Функция определяет, попадает ли указанная дата в "мертвые" периоды.
//
// Параметры:
//	Период - Дата.
//	ПериодСлед - Дата.
//	ТаблицаЗначенийПериоды - ТаблицаЗначений.
//
// Возвращаемое значение:
//  Результат - Строка таблицы значений.
//
&НаСервере
Функция ДатаВходитВМертвыеПериоды(Период, ПериодСлед, ТаблицаЗначенийПериоды)
	
	Для каждого ТекСтр Из ТаблицаЗначенийПериоды Цикл
		Если ТекСтр.ДатаОкончания = НачалоМесяца(ТекСтр.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ((Период < ТекСтр.ДатаОкончания) И ((ПериодСлед > ТекСтр.ДатаОкончания))) Тогда
			Возврат ТекСтр;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает остатки НРП.
//
// Параметры:
//	МатеринскиеКомпании - массив элементов СправочникСсылка.Организации.
//  СоставляющаяНРП - ПеречислениеСсылка.бит_му_СоставляющиеНРП.
//
// Возвращаемое значение:
//  Результат - ТаблицаЗначений.
//
&НаСервере
Функция ПолучитьОстатокНРП(МатеринскиеКомпании, СоставляющаяНРП)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрБухгалтерии.СуммаУпрОстаток КАК Сумма,
	               |	Организации.Ссылка КАК Организация
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии." + Объект.ОбъектСистемы.ИмяОбъекта + ".Остатки(&ДатаКон, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация В (&МатеринскиеКомпании)) КАК РегистрБухгалтерии
	               |		ПО Организации.Ссылка = РегистрБухгалтерии.Организация
	               |ГДЕ
	               |	Организации.Ссылка В(&МатеринскиеКомпании)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаКон",			 КонецДня(Объект.ДатаКон));
	Запрос.УстановитьПараметр("МатеринскиеКомпании", МатеринскиеКомпании);
	Запрос.УстановитьПараметр("СписокСчетов",		 Объект.СписокСчетовНРП.Выгрузить().ВыгрузитьКолонку("Счет"));
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтр Из ТаблицаРезультат Цикл
		
		//
		ТекСтрокаПротоколаПоОрганизации = ПолучитьСтрокуПротоколаЗаполнения(СоставляющаяНРП, ТекСтр.Организация);
		
		// добавим строку в протокол заполнения
		НоваяСтрока = ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Добавить();
		НоваяСтрока.ДатаКон 		= КонецДня(Объект.ДатаКон);
		НоваяСтрока.СуммаОборот 	= ТекСтр.Сумма;
		НоваяСтрока.СуммаРезультат 	= ТекСтр.Сумма;
		
		// посчитаем итог для организации
		ТекСтрокаПротоколаПоОрганизации.СуммаОборот 	= ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Итог("СуммаОборот");
		ТекСтрокаПротоколаПоОрганизации.СуммаРезультат 	= ТекСтрокаПротоколаПоОрганизации.ПодчиненныеДанные.Итог("СуммаРезультат");
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// процедура заполняет табличную часть "Капитал".
//
// Параметры:
//  СписокОрганизаций - Массив.
//
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьКапитал()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Дочки.ОбъектИнвестиций,
	|	Дочки.КлючСтроки
	|ПОМЕСТИТЬ ДочернииКомпании
	|ИЗ
	|	&ДочернииКомпании КАК Дочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчета.Счет
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	&СчетаУчета КАК СчетаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДочернииКомпании.ОбъектИнвестиций,
	|	бит_Дополнительный_2.Ссылка КАК Счет,
	|	ДочернииКомпании.КлючСтроки
	|ПОМЕСТИТЬ Настройки
	|ИЗ
	|	ДочернииКомпании КАК ДочернииКомпании
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.бит_Дополнительный_2 КАК бит_Дополнительный_2
	|		ПО (ИСТИНА)
	|ГДЕ
	|	бит_Дополнительный_2.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				СчетаУчета.Счет
	|			ИЗ
	|				СчетаУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Настройки.КлючСтроки КАК КлючСтроки,
	|	Настройки.Счет КАК Счет,
	|	-РегистрБухгалтерии.СуммаУпрОстаток КАК НаОтчетнуюДату,
	|	ВЫБОР
	|		КОГДА &НаОтчетнуюДату
	|			ТОГДА ЕСТЬNULL(СовокупныйДоход.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаКонецПериода,
	|	ЕСТЬNULL(-РегистрБухгалтерии.СуммаУпрОстаток, 0) - ВЫБОР
	|		КОГДА &НаОтчетнуюДату
	|			ТОГДА ЕСТЬNULL(СовокупныйДоход.Сумма, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Изменение
	|ИЗ
	|	Настройки КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&ДатаКон,
	|				Счет В ИЕРАРХИИ
	|					(ВЫБРАТЬ
	|						Настройки.Счет
	|					ИЗ
	|						Настройки),
	|				,
	|				Организация В
	|					(ВЫБРАТЬ
	|						Настройки.ОбъектИнвестиций
	|					ИЗ
	|						Настройки)) КАК РегистрБухгалтерии
	|		ПО Настройки.ОбъектИнвестиций = РегистрБухгалтерии.Организация
	|			И Настройки.Счет = РегистрБухгалтерии.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СовокупныйДоходОбъектовИнвестиций.СрезПоследних(
	|				&ДатаКон,
	|				Счет В ИЕРАРХИИ
	|						(ВЫБРАТЬ
	|							Настройки.Счет
	|						ИЗ
	|							Настройки)
	|					И ОбъектИнвестиций В
	|						(ВЫБРАТЬ
	|							Настройки.ОбъектИнвестиций
	|						ИЗ
	|							Настройки)) КАК СовокупныйДоход
	|		ПО Настройки.ОбъектИнвестиций = СовокупныйДоход.ОбъектИнвестиций
	|			И Настройки.Счет = СовокупныйДоход.Счет
	|ГДЕ
	|	(РегистрБухгалтерии.СуммаУпрОстаток <> 0
	|			ИЛИ СовокупныйДоход.Сумма <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСтроки,
	|	Настройки.Счет.Порядок";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаКон",		   КонецДня(Объект.Дата)+1);
	Запрос.УстановитьПараметр("ДочернииКомпании",  Объект.ДочернииКомпании.Выгрузить());
	Запрос.УстановитьПараметр("СчетаУчета",        Объект.СчетаСовокупногоДохода.Выгрузить());
	
	НаОтчетнуюДату = (Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок.НаОтчетнуюДату);
	Запрос.УстановитьПараметр("НаОтчетнуюДату", НаОтчетнуюДату);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Объект.Капитал.Загрузить(Результат);
	
	РасчитатьСуммуКапиталаНаСервере();
	РассчитатьГудвилПриобретенияНаСервере();
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьКапитал()

// Удаляет строки табличной части Капитал с отбором по КлючСтроки,
// переданной в списке при изменении состава строк ТЧ ДочернииКомпании.
// 
&НаСервере
Процедура ПривестиТаблицуКапиталКДочернииКомпании(КлючСтроки)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	СтрокиКУдалению = Объект.Капитал.НайтиСтроки(Отбор);
	
	Для каждого Запись Из СтрокиКУдалению Цикл
		Объект.Капитал.Удалить(Запись);
	КонецЦикла; 
	
КонецПроцедуры

// Процедура обрабатывает изменение счета "СчетРасходов".
//
&НаСервере
Процедура ИзменениеСчетИнвестиций()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетИнвестиций, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоИнвестиций");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоИнвестиций");

КонецПроцедуры // ИзменениеСчетРасходов()

// Процедура обрабатывает изменение счета "СчетДоходов".
//
&НаСервере
Процедура ИзменениеСчетДоходов()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоДоходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");

КонецПроцедуры // ИзменениеСчетДоходов()

// Процедура обрабатывает изменение счета "СчетУбыткаОбесцененияГудвилла".
//
&НаСервере
Процедура ИзменениеСчетУбыткаОбесцененияГудвилла()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетУбыткаОбесцененияГудвилла, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоУбыткаОбесцененияГудвилла");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоУбыткаОбесцененияГудвилла");

КонецПроцедуры // ИзменениеСчетДоходов()

// Процедура получает итог таблицы Капитал с учетом отбора по ключу строки
// 
&НаСервере
Процедура РасчитатьСуммуКапиталаНаСервере()
	
	СуммаКапитала     = 0;
	
	КлючСтроки    = Элементы.Капитал.ОтборСтрок.КлючСтроки;
	Отбор         = Новый Структура("КлючСтроки", КлючСтроки);
	Копия         = Объект.Капитал.Выгрузить(Отбор);
	СуммаКапитала = Копия.Итог("Изменение");
	
	РассчитатьГудвилПриобретенияНаСервере();
	
КонецПроцедуры

// Процедура рассчитывает сумму гудвила
//
// Параметры:
//	нет
//
&НаСервере
Процедура РассчитатьГудвилПриобретенияНаСервере()

	Доля = 0;
	Если Объект.ДочернииКомпании.Количество() > 0 Тогда
	
		Доля = Объект.ДочернииКомпании[0].Доля;
	
	КонецЕсли; 
	
	СуммаДолиКапитала    = СуммаКапитала*Доля/100;
	Объект.СуммаГудвилла = Объект.СуммаИнвестиций - СуммаДолиКапитала;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыПриобретенияНаСервере()

	Построитель = Новый ПостроительЗапроса;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	бит_Дополнительный_2Остатки.СуммаУпрОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&НачПериода, Счет = &СчетИнвестиций,
	|   , Организация = &Организация {(Субконто1), (Субконто2), (Субконто3), (Субконто4)}) 
	|   КАК бит_Дополнительный_2Остатки";
	
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	Построитель.Параметры.Вставить("НачПериода",     КонецДня(Объект.Дата)+1);
	Построитель.Параметры.Вставить("СчетИнвестиций", Объект.СчетИнвестиций);
	
	Если Объект.ДочернииКомпании.Количество() > 0 Тогда
	     ОрганизацияИнвестор = Объект.ДочернииКомпании[0].Инвестор;
	Иначе	
	     ОрганизацияИнвестор = Справочники.Организации.ПустаяСсылка();
	КонецЕсли; 

	Построитель.Параметры.Вставить("Организация", ОрганизацияИнвестор);

	Для Сч = 1 ПО фКоличествоСубконтоМУ Цикл
		Если НЕ Объект["СубконтоИнвестиций" + Сч] = Неопределено Тогда
			
			Отбор = Построитель.Отбор.Добавить("Субконто" + Сч);
			Отбор.Установить(Объект["СубконтоИнвестиций" + Сч]);
			
		КонецЕсли; 
	КонецЦикла; 
	
	Построитель.Выполнить();
	Результат = Построитель.Результат;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.СуммаИнвестиций = ВыборкаДетальныеЗаписи.Остаток;
	КонецЦикла;

    РассчитатьГудвилПриобретенияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетИнвестиций);
	МассивЭлементов.Добавить(Элементы.СписокСчетовНРПСчет);
	МассивЭлементов.Добавить(Элементы.СчетаСовокупногоДоходаСчет);
	МассивЭлементов.Добавить(Элементы.КапиталСчет);
	МассивЭлементов.Добавить(Элементы.СчетВспомогательный);
	МассивЭлементов.Добавить(Элементы.СчетГудвилла);
	МассивЭлементов.Добавить(Элементы.СчетСписанияОбесцененияГудвилла);
	МассивЭлементов.Добавить(Элементы.СчетУбыткаОбесцененияГудвилла);
	МассивЭлементов.Добавить(Элементы.СчетДолиВКапитале);
	МассивЭлементов.Добавить(Элементы.СчетДолиВПрибылиУбытке);
	МассивЭлементов.Добавить(Элементы.СчетНРП);
	МассивЭлементов.Добавить(Элементы.СчетДоходов);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаКлиенте
Процедура УстановитьЗаголовокФормыДокумента()

 	СтруктураЗаголовка = Новый Структура;
 	СтруктураЗаголовка.Вставить("ЭтоНовый"            , Параметры.Ключ.Пустая());
 	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
 	СтруктураЗаголовка.Вставить("ДокументПроведен"    , Объект.Проведен);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));

 	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаСервере
Процедура ДобавитьСтрокуСоставНРП(СоставляющаяНРП, Организация, Сумма)

	НоваяСтрока = Объект.СоставНРП.Добавить();
	НоваяСтрока.СоставляющаяНРП = СоставляющаяНРП;
	НоваяСтрока.Организация		= Организация;
	НоваяСтрока.Сумма			= Сумма;

КонецПроцедуры // ДобавитьСтрокуСоставНРП() 

&НаКлиенте
Процедура ПосчитатьИтогиДляВеткиДерева(Ветка)

	// посчитаем итоги
	Если Ветка <> Неопределено Тогда
		ДочерниеЭлементы = Ветка.ПолучитьЭлементы();
	
		Если ДочерниеЭлементы.Количество() > 0 Тогда
			Сумма = 0;
			Для каждого ТекСтр Из ДочерниеЭлементы Цикл
				Сумма = Сумма + ТекСтр.Сумма;
			КонецЦикла;
			Ветка.Сумма = Сумма;
		КонецЕсли;
	КонецЕсли;
	
	// обновим сумму для строки "Итого"
	СуммаИтого 	   = 0;
	ЭлементыДерева = СоставНРП.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из ЭлементыДерева Цикл
		Если ТекСтр.Аналитика = мКэшЗначений.Составляющие["Итого"] Тогда
			СоставляющаяИтого = ТекСтр;
		Иначе
			СуммаИтого = СуммаИтого + ТекСтр.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	СоставляющаяИтого.Сумма = СуммаИтого;
	Объект.СуммаНПРИтого 	= СуммаИтого;

КонецПроцедуры // ПосчитатьИтогиДляВеткиДерева()

&НаКлиенте
Процедура ИзменениеСубконтоИнвестиций(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоИнвестиций", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоИнвестиций", ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "СубконтоИнвестиций", "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоСубконтоРасходов()

&НаКлиенте
Процедура НачалоВыбораСубконтоИнвестиций(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоИнвестиций"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// в обычном приложении открываем формы с отборами
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоРасходов()

&НаКлиенте
Процедура ИзменениеСубконтоДоходов(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоДоходов", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоДоходов", ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "СубконтоДоходов", "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоСубконтоРасходов()

&НаКлиенте
Процедура НачалоВыбораСубконтоДоходов(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоДоходов"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// в обычном приложении открываем формы с отборами
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоРасходов()

&НаКлиенте
Процедура НачалоВыбораСубконтоУбыткаОбесцененияГудвилла(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоУбыткаОбесцененияГудвилла"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// в обычном приложении открываем формы с отборами
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоРасходов()

&НаКлиенте
Процедура ИзменениеСубконтоУбыткаОбесцененияГудвилла(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоУбыткаОбесцененияГудвилла", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоУбыткаОбесцененияГудвилла", ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "СубконтоУбыткаОбесцененияГудвилла", "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоСубконтоРасходов()

&НаКлиенте
Процедура РасчитатьСуммуКапитала()

	РасчитатьСуммуКапиталаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПериметраКонсолидации()
	
	ЗаполнитьСписокОрганизаций();
	
	Если Элементы.Организация.СписокВыбора.Количество() = 1 Тогда
		Объект.Организация = Элементы.Организация.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеОбъектаСистемы()
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка." + ПолучитьИмяПланаСчетов(Объект.ОбъектСистемы));
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов();
	КонецЕсли;
	
	Элементы.СчетВспомогательный.ОграничениеТипа 					= ОграничениеТипа;
	Элементы.СчетГудвилла.ОграничениеТипа							= ОграничениеТипа;
	Элементы.СчетСписанияОбесцененияГудвилла.ОграничениеТипа 		= ОграничениеТипа;
	Элементы.СписокСчетовНРПСчет.ОграничениеТипа					= ОграничениеТипа;
	
	Элементы.СчетДолиВКапитале.ОграничениеТипа              = ОграничениеТипа;
	Элементы.СчетДолиВПрибылиУбытке.ОграничениеТипа         = ОграничениеТипа;
	Элементы.СчетНРП.ОграничениеТипа                        = ОграничениеТипа;
	Элементы.СчетИнвестиций.ОграничениеТипа                 = ОграничениеТипа;
	Элементы.СчетДоходов.ОграничениеТипа                    = ОграничениеТипа;
	Элементы.СчетУбыткаОбесцененияГудвилла.ОграничениеТипа  = ОграничениеТипа;
	Элементы.СчетаСовокупногоДоходаСчет.ОграничениеТипа     = ОграничениеТипа;
	Элементы.КапиталСчет.ОграничениеТипа                    = ОграничениеТипа;
	
КонецПроцедуры


#КонецОбласти

