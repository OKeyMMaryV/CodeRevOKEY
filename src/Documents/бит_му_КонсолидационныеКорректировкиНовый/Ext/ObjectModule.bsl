#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
&НаСервере
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
// 
&НаСервере
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
&НаСервере
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
&НаСервере
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента      = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Дата = КонецДня(СтруктураШапкиДокумента.Дата);
	
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
&НаСервере
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
// 
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
// 
&НаСервере
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник)

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура рассчитывает сумму гудвила
// 
// Параметры:
// 	нет
// 
&НаСервере
Процедура РассчитатьГудвилПриобретения() Экспорт

	Доля = 0;
	Если ДочернииКомпании.Количество() > 0 Тогда
	
		Доля = ДочернииКомпании[0].Доля;
	
	КонецЕсли; 

	СуммаКапитала = Капитал.Итог("Изменение");
	СуммаГудвилла = СуммаИнвестиций - ОКР(СуммаКапитала*Доля/100,2);
	
КонецПроцедуры

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
&НаСервере
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	ВидыОпераций    = Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок;
	СтруктураТаблиц = Новый Структура;
	
	// Табличная часть "Гудвилл"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.НаОтчетнуюДату Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Гудвил.Инвестор,
		|	Гудвил.НаОтчетнуюДату,
		|	Гудвил.СправедливаяСтоимость,
		|	Гудвил.НМА КАК НМА,
		|	Гудвил.ОбъектИнвестиций КАК ОбъектИнвестиций, 
		|	-Гудвил.Обесценение КАК Обесценение
		|ИЗ
		|	Документ.бит_му_КонсолидационныеКорректировкиНовый.Гудвилл КАК Гудвил
		|ГДЕ
		|	Гудвил.Ссылка = &Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаГудвилл   = РезультатЗапроса.Выгрузить();	
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧДочернииКомпании.Инвестор,
		|	ТЧДочернииКомпании.ОбъектИнвестиций,
		|	Документ.НМА,
		|	Документ.СуммаГудвилла КАК СуммаГудвилла
		|ИЗ
		|	Документ.бит_му_КонсолидационныеКорректировкиНовый.ДочернииКомпании КАК ТЧДочернииКомпании
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_му_КонсолидационныеКорректировкиНовый КАК Документ
		|		ПО ТЧДочернииКомпании.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Ссылка = &Ссылка";
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаГудвилл   = РезультатЗапроса.Выгрузить();
		
		Если ТаблицаГудвилл.Количество() = 0 Тогда
		     ТекстСообщения = "Не заполнена таблица ""Дочернии компании"", не удалось получить Инвестора и Объект инвестиции.";
			 бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли; 
		
	КонецЕсли; 
	
	СтруктураТаблиц.Вставить("Гудвилл", ТаблицаГудвилл);
	
	// Табличная часть "Капитал"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДочернииКомпании.ОбъектИнвестиций КАК ОбъектИнвестиций,
	|	ДочернииКомпании.Инвестор КАК Инвестор,
	|	Капитал.Счет КАК Счет,
	|	Капитал.НаОтчетнуюДату КАК Сумма,
	|	Капитал.Изменение КАК Изменение,
	|	ДочернииКомпании.Доля,
	|	ТЧКапиталСвернуто.Изменение КАК ИтогоИзменение
	|ИЗ
	|	Документ.бит_му_КонсолидационныеКорректировкиНовый.ДочернииКомпании КАК ДочернииКомпании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_му_КонсолидационныеКорректировкиНовый.Капитал КАК Капитал
	|		ПО ДочернииКомпании.КлючСтроки = Капитал.КлючСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧКапитал.НомерСтроки КАК НомерСтроки,
	|			СУММА(ТЧКапитал.Изменение) КАК Изменение
	|		ИЗ
	|			Документ.бит_му_КонсолидационныеКорректировкиНовый.Капитал КАК ТЧКапитал
	|		ГДЕ
	|			ТЧКапитал.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧКапитал.НомерСтроки) КАК ТЧКапиталСвернуто
	|		ПО ДочернииКомпании.КлючСтроки = ТЧКапиталСвернуто.НомерСтроки
	|ГДЕ
	|	ДочернииКомпании.Ссылка = &Ссылка
	|	И ЕСТЬNULL(Капитал.Изменение, 0) <> 0
	|	И Капитал.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектИнвестиций,
	|	Счет";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаКапитал   = РезультатЗапроса.Выгрузить();
		
	СтруктураТаблиц.Вставить("Капитал", ТаблицаКапитал);
	
	// ТаблицаДочерниеКомпании
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧДочерниеКомпании.Инвестор,
	|	ТЧДочерниеКомпании.ОбъектИнвестиций,
	|	ТЧДочерниеКомпании.Доля,
	|	ТЧКапитал.Изменение КАК ИтогоИзменение
	|ИЗ
	|	Документ.бит_му_КонсолидационныеКорректировкиНовый.ДочернииКомпании КАК ТЧДочерниеКомпании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧКапитал.КлючСтроки КАК КлючСтроки,
	|			СУММА(ТЧКапитал.Изменение) КАК Изменение
	|		ИЗ
	|			Документ.бит_му_КонсолидационныеКорректировкиНовый.Капитал КАК ТЧКапитал
	|		ГДЕ
	|			ТЧКапитал.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧКапитал.КлючСтроки) КАК ТЧКапитал
	|		ПО ТЧДочерниеКомпании.КлючСтроки = ТЧКапитал.КлючСтроки
	|ГДЕ
	|	ТЧДочерниеКомпании.Ссылка = &Ссылка";
	
	РезультатЗапроса        = Запрос.Выполнить();
	ТаблицаДочернииКомпании = РезультатЗапроса.Выгрузить();
		
	СтруктураТаблиц.Вставить("ДочернииКомпании", ТаблицаДочернииКомпании);

	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
&НаСервере
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
												
	Если ПараметрОбъектКопирования <> Неопределено Тогда
		СоставНРП.Очистить();
		Капитал.Очистить();
	Иначе
		// Изменение кода. Начало. 19.02.2016{{
		//ОбъектСистемы = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнойРегистрБухгалтерииУУ);
		Если НЕ ЗначениеЗаполнено(ОбъектСистемы) И бит_ОбщегоНазначения.ЕстьОбъектыМСФО() Тогда
			ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
			ПУстойСчетМУ   				  = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
			СчетИнвестиций 				  = ПУстойСчетМУ;
			СчетДоходов    				  = ПУстойСчетМУ;
			СчетУбыткаОбесцененияГудвилла = ПУстойСчетМУ;
		КонецЕсли;
		// Изменение кода. Конец. 19.02.2016}}
	КонецЕсли;												
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()
    
// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
&НаСервере
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	// ПОКА ДВИЖЕНИЯ ВЫПОЛНЯЮТСЯ БЕЗ УЧЕТА ВИДА ОПЕРАЦИИ.
	
	ТаблицаДанных = СтруктураТаблиц.Гудвилл;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Сформируем проводки по табличной части "Гудвилл".
		СформироватьЗаписьГудвилл(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		
	КонецЦикла;
	
	ТаблицаКапитал = СтруктураТаблиц.Капитал;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКапитал Цикл
		
		// Сформируем проводки по табличной части "Капитал".
		СформироватьЗаписьКапитал(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		
	КонецЦикла;
	
	ТаблицаДочернииКомпании = СтруктураТаблиц.ДочернииКомпании;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДочернииКомпании Цикл
		
		// Сформируем проводки по табличной части "ДочернииКомпании".
		СформироватьЗаписьДочерниеКомпании(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		
	КонецЦикла;
	
	// "Запомним" сумму на текущую отчетную дату из таблицы "Капитал".
	НаборДвижений = Движения.бит_му_СовокупныйДоходОбъектовИнвестиций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ЗагрузитьВТаблицуЗначений(ТаблицаКапитал, ТаблицаДвижений);
	
	НаборДвижений.мПериод          = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.бит_му_СовокупныйДоходОбъектовИнвестиций.ВыполнитьДвижения();
	КонецЕсли;

	
КонецПроцедуры // ДвиженияПоРегистрам()

&НаСервере
Функция ВернутьКонтрагентаОрганизации(Организация)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                      |	СобственныеКонтрагенты.Контрагент
	                      |ИЗ
	                      |	РегистрСведений.бит_СобственныеКонтрагенты КАК СобственныеКонтрагенты
	                      |ГДЕ
	                      |	СобственныеКонтрагенты.ВидСвязи = &ВидСвязи
	                      |	И СобственныеКонтрагенты.Объект = &Объект");
	Запрос.УстановитьПараметр("ВидСвязи", Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
	Запрос.УстановитьПараметр("Объект", Организация);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Рез.Количество()>0 тогда
		Найденнаяорганизация = Рез[0].Контрагент;
	Иначе
		Найденнаяорганизация = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Возврат Найденнаяорганизация;
КонецФункции

// Процедура формирует движение по строке табличной части "Гудвилл".
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы - Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
&НаСервере
Процедура СформироватьЗаписьГудвилл(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок;
	
	Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.НаДатуПриобретенияБизнеса Тогда
		
		Сумма = СтрокаТаблицы.СуммаГудвилла;
		
		Если Сумма > 0 Тогда
			
			// 1. ДТ Счет Гудвилла - КТ Счет вспомогательный, на сумму СуммаГудвилла.
			Запись = Движения[ОбъектСистемы.ИмяОбъекта].Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура;
			
			СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
			СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
			СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
			СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетГудвилла);
			СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетВспомогательный);
			СтруктураПараметров.Вставить("Сумма",      Сумма);
			СтруктураПараметров.Вставить("Содержание", Строка(СтрокаТаблицы.Инвестор) + " (признание гудвилла)");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			Запись.СуммаУпр = Сумма;
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НМА);
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.Гудвил);
			
			// Выполним валютные пересчеты.
			ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
			
			// 2.  ДТ СчетВспомогательный - КТ СчетИнвестиций, на СуммаГудвилла.
			
			Запись = Движения[ОбъектСистемы.ИмяОбъекта].Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура;           
			
			СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
			СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
			СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
			СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетВспомогательный);
			СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетИнвестиций);
			СтруктураПараметров.Вставить("Сумма",      Сумма);
			СтруктураПараметров.Вставить("Содержание", "");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			Запись.СуммаУпр = Сумма;
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.Гудвил);
			
			СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетКт);
			КолВоСубконто =  СвСчКт.КоличествоСубконто;
			Для Сч = 1 По КолВоСубконто Цикл
				
				ЗначениеСубконто = СтруктураШапкиДокумента["СубконтоИнвестиций" + Сч];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Сч, ЗначениеСубконто);
				КонецЕсли;  
				
			КонецЦикла;
			
			// Выполним валютные пересчеты.
			ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
			
			Разница = СтруктураШапкиДокумента.СуммаИнвестиций - Сумма;
			
			// 3. ДТ СчетВспомогательный - КТ СчетИнвестиций, на СуммаИнвестиций - СуммаГудвилла.
			Запись = Движения[ОбъектСистемы.ИмяОбъекта].Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура;           
			
			СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
			СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
			СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
			СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетВспомогательный);
			СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетИнвестиций);
			СтруктураПараметров.Вставить("Сумма",      Разница);
			СтруктураПараметров.Вставить("Содержание", "");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			Запись.СуммаУпр = Разница;
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.КапиталИИнвестиции);
			
			СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетКт);
			КолВоСубконто =  СвСчКт.КоличествоСубконто;
			Для Сч = 1 По КолВоСубконто Цикл
				
				ЗначениеСубконто = СтруктураШапкиДокумента["СубконтоИнвестиций" + Сч];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Сч, ЗначениеСубконто);
				КонецЕсли;  
				
			КонецЦикла;
			
			// Выполним валютные пересчеты.
			ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
			
		ИначеЕсли Сумма < 0 Тогда	
			
			// 1. ДТ Счет вспомогательный - КТ СчетДоходов, на сумму СуммаГудвилла.
			Запись = Движения[ОбъектСистемы.ИмяОбъекта].Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура;
			
			СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
			СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
			СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
			СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетВспомогательный);
			СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетДоходов);
			СтруктураПараметров.Вставить("Сумма",      -Сумма);
			СтруктураПараметров.Вставить("Содержание", Строка(СтрокаТаблицы.Инвестор) + " (признание гудвилла)");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			Запись.СуммаУпр = -Сумма;
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.КапиталИИнвестиции);
			
			СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетКт);
			КолВоСубконто =  СвСчКт.КоличествоСубконто;
			Для Сч = 1 По КолВоСубконто Цикл
				
				ЗначениеСубконто = СтруктураШапкиДокумента["СубконтоДоходов" + Сч];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Сч, ЗначениеСубконто);
				КонецЕсли;  
				
			КонецЦикла; 
			
			// Выполним валютные пересчеты.
			ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
			
			// 2. ДТ СчетВспомогательный - КТ СчетИнвестиций, на СуммаИнвестиций.
			Запись = Движения[ОбъектСистемы.ИмяОбъекта].Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура;           
			
			СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
			СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
			СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
			СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетВспомогательный);
			СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетИнвестиций);
			СтруктураПараметров.Вставить("Сумма",      СтруктураШапкиДокумента.СуммаИнвестиций);
			СтруктураПараметров.Вставить("Содержание", "");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			Запись.СуммаУпр = СтруктураШапкиДокумента.СуммаИнвестиций;
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.КапиталИИнвестиции);
			
			СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетКт);
			КолВоСубконто =  СвСчКт.КоличествоСубконто;
			Для Сч = 1 По КолВоСубконто Цикл
				
				ЗначениеСубконто = СтруктураШапкиДокумента["СубконтоИнвестиций" + Сч];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Сч, ЗначениеСубконто);
				КонецЕсли;  
				
			КонецЦикла;
			
			// Выполним валютные пересчеты.
			ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);

		КонецЕсли; 
		
	Иначе
		
		Обесценение = СтрокаТаблицы.Обесценение;
		
		Если НЕ Обесценение = 0 Тогда
			
			// 1. ДТ СчетУбыткаОбесцененияГудвилла - КТ СчетВспомогательный на сумму "Обесценение".
			
			Запись = Движения.бит_Дополнительный_2.Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура;
			
			СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
			СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
			СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
			СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетУбыткаОбесцененияГудвилла);
			СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетВспомогательный);
			СтруктураПараметров.Вставить("Сумма",      Обесценение);
			СтруктураПараметров.Вставить("Содержание", Строка(СтрокаТаблицы.Инвестор) + " (обесценение гудвилла)");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			Запись.СуммаУпр = Обесценение;
            
            СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетДт);
			КолВоСубконто =  СвСчДт.КоличествоСубконто;
			Для Сч = 1 По КолВоСубконто Цикл
				
				ЗначениеСубконто = СтруктураШапкиДокумента["СубконтоУбыткаОбесцененияГудвилла" + Сч];
				Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
					бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Сч, ЗначениеСубконто);
				КонецЕсли;  
				
			КонецЦикла;

			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.Гудвил);
			
			// Выполним валютные пересчеты.
			ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
			
			// 2. ДТ СчетВспомогательный				КТ СчетСписанияОбесцененияГудвилла на Обесценение.
			Запись = Движения.бит_Дополнительный_2.Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура;
			
			СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
			СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
			СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
			СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетВспомогательный);
			СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетСписанияОбесцененияГудвилла);
			СтруктураПараметров.Вставить("Сумма",      Обесценение);
			СтруктураПараметров.Вставить("Содержание", Строка(СтрокаТаблицы.Инвестор) + " (обесценение гудвила)");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			Запись.СуммаУпр = Обесценение;
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.Гудвил);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
			
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "НематериальныеАктивы", СтрокаТаблицы.НМА);
			
			// Выполним валютные пересчеты.
			ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует движение по строке табличной части "Капитал".
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
&НаСервере
Процедура СформироватьЗаписьКапитал(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок.НаОтчетнуюДату Тогда
		
		// 1. ДТ СчетПрибылиУбытка - КТ СчетВспомогательный на сумму "Изменение"
		// , где "СчетПрибылиУбытка" - поле Счет ТЧ "Капитал".
		Запись = Движения.бит_Дополнительный_2.Добавить();
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
		СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
		СтруктураПараметров.Вставить("СчетДт",     СтрокаТаблицы.Счет);
		СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетВспомогательный);
		СтруктураПараметров.Вставить("Сумма",      СтрокаТаблицы.Изменение);
		СтруктураПараметров.Вставить("Содержание", Строка(СтруктураШапкиДокумента.Организация) + " (изменение совокупного дохода)");
		
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
		Запись.СуммаУпр = СтрокаТаблицы.Изменение;
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.КапиталИИнвестиции);
		
		// Выполним валютные пересчеты.
		ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
		
		// // 2. ДТ СчетВспомогательный - КТ СчетНРП на сумму Доля*Изменение/ИтогоИзменение
		// Запись = Движения.бит_Дополнительный_2.Добавить();
		// 
		// Сумма = ОКР(СтрокаТаблицы.ИтогоИзменение*СтрокаТаблицы.Доля/100,2);
		// 
		//// Заполнение атрибутов записи.
		// СтруктураПараметров = Новый Структура;
		// 
		// СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
		// СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
		// СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
		// СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетВспомогательный);
		// СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетНРП);
		// СтруктураПараметров.Вставить("Сумма",      Сумма);
		// СтруктураПараметров.Вставить("Содержание"
		//      , Строка(СтруктураШапкиДокумента.Организация) + " (изменение совокупного дохода)");
		// 
		// бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
		// Запись.СуммаУпр = Сумма;
		// 
		// бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт
		// , Запись.СубконтоДт, "СобственнаяОрганизация"
		// , ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
		// бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт
		// , Запись.СубконтоДт, "Контрагенты"
		// , ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
		// бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт
		// , Запись.СубконтоДт, "ТипЭлиминации"		
		// , Перечисления.бит_му_ВидыКонсолидационныхПоправок.КапиталИИнвестиции);
		// 
		//// Выполним валютные пересчеты.
		// ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
		
	Иначе
		
		// 1. ДТ Счет капитала - КТ СчетВспомогательный, на сумму капитала.
		Запись = Движения.бит_Дополнительный_2.Добавить();
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
		СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
		СтруктураПараметров.Вставить("СчетДт",     СтрокаТаблицы.Счет);
		СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетВспомогательный);
		СтруктураПараметров.Вставить("Сумма",      СтрокаТаблицы.Сумма);
		СтруктураПараметров.Вставить("Содержание", "");
		
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
		Запись.СуммаУпр = СтрокаТаблицы.Сумма;
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.КапиталИИнвестиции);
			
		// Выполним валютные пересчеты.
		ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);

	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаписьДочерниеКомпании(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)

	СуммаДолиБольшинства = ОКР(СтрокаТаблицы.ИтогоИзменение*СтрокаТаблицы.Доля/100,2);
	СуммаДолиМеньшенства = СтрокаТаблицы.ИтогоИзменение - СуммаДолиБольшинства;
	
	Если СуммаДолиБольшинства <> 0 
	   И СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок.НаОтчетнуюДату Тогда
		// 1. ДТ СчетВспомогательный - КТ СчетНРП на сумму Доля*Изменение/ИтогоИзменение.
		Запись = Движения.бит_Дополнительный_2.Добавить();
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
		СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
		СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетВспомогательный);
		СтруктураПараметров.Вставить("СчетКт",     СтруктураШапкиДокумента.СчетНРП);
		СтруктураПараметров.Вставить("Сумма",      СуммаДолиБольшинства);
		СтруктураПараметров.Вставить("Содержание", Строка(СтруктураШапкиДокумента.Организация) + " (изменение совокупного дохода)");
		
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
		Запись.СуммаУпр = СуммаДолиБольшинства;
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.КапиталИИнвестиции);
		
		// Выполним валютные пересчеты.
		ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	КонецЕсли;

	Если СуммаДолиМеньшенства <> 0 Тогда
		// 2. ДТ СчетВспомогательный - КТ СчетДолиВПрибылиУбытке(СчетДолиВКапитале)
		// , на сумму ИтогоИзменение * (100 - Доля)/100. 	
		Запись = Движения.бит_Дополнительный_2.Добавить();
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийКонсолидационныхКорректировок.НаОтчетнуюДату Тогда
			СчетКт = СтруктураШапкиДокумента.СчетДолиВПрибылиУбытке;
		Иначе	
			СчетКт = СтруктураШапкиДокумента.СчетДолиВКапитале;
		КонецЕсли; 
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Организация",СтруктураШапкиДокумента.Организация);
		СтруктураПараметров.Вставить("Период",     СтруктураШапкиДокумента.Дата);
		СтруктураПараметров.Вставить("Валюта",     СтруктураКурсыВалют["Упр"].Валюта);
		СтруктураПараметров.Вставить("СчетДт",     СтруктураШапкиДокумента.СчетВспомогательный);
		СтруктураПараметров.Вставить("СчетКт",     СчетКт);
		СтруктураПараметров.Вставить("Сумма",      СуммаДолиМеньшенства);
		СтруктураПараметров.Вставить("Содержание", "");
		
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
		Запись.СуммаУпр = СуммаДолиМеньшенства;
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "СобственнаяОрганизация", ВернутьКонтрагентаОрганизации(СтрокаТаблицы.Инвестор));
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты",           ВернутьКонтрагентаОрганизации(СтрокаТаблицы.ОбъектИнвестиций));
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ВидыКонсолидационныхПоправок"		, Справочники.бит_му_ВидыКонсолидационныхПоправок.КапиталИИнвестиции);
		
		// Выполним валютные пересчеты.
		ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	КонецЕсли;
	
КонецПроцедуры
 
// Функция определяет будут ли движения по международному учету.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Результат - Булево.
// 
&НаСервере
Функция ЕстьМеждународныйУчет()

	Если Метаданные.РегистрыБухгалтерии[ОбъектСистемы.ИмяОбъекта].Ресурсы.Найти("СуммаМУ") = Неопределено Тогда
		ЕстьМеждународныйУчет = Ложь;
	Иначе
		ЕстьМеждународныйУчет = Истина;
	КонецЕсли;

	Возврат ЕстьМеждународныйУчет;
	
КонецФункции // ЕстьМеждународныйУчет()	

// Процедура выполняет расчет сумм "Регламентного и международного и управленческого учета".
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Запись					- РегистрБухгалтерииЗапись.бит_Дополнительный.
//  СтруктураКурсыВалют 	- Структура.
// 
&НаСервере
Процедура ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют)
	
	Запись.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Запись.СуммаУпр,
																	СтруктураКурсыВалют["Упр"].Валюта, СтруктураКурсыВалют["Регл"].Валюта,
																	СтруктураКурсыВалют["Упр"].Курс, СтруктураКурсыВалют["Регл"].Курс,
																	СтруктураКурсыВалют["Упр"].Кратность, СтруктураКурсыВалют["Регл"].Кратность);
	Если ЕстьМеждународныйУчет() Тогда
		Запись.СуммаМУ = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Запись.СуммаУпр,
																	СтруктураКурсыВалют["Упр"].Валюта, СтруктураКурсыВалют["МУ"].Валюта,
																	СтруктураКурсыВалют["Упр"].Курс, СтруктураКурсыВалют["МУ"].Курс,
																	СтруктураКурсыВалют["Упр"].Кратность, СтруктураКурсыВалют["МУ"].Кратность);
	КонецЕсли;																	
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли
