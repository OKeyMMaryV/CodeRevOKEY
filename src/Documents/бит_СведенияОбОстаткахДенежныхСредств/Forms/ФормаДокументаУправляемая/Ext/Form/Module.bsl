
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущаяОрганизация; // Хранит текущую организацию.

&НаКлиенте
Перем мТекущаяВалютаВСтроке; // Хранит валюту в текущей строке таблицы Сведения.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Cтандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
			
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();

	ЗаполнитьНомераСчетовВСведениях();
	
	УправлениеЭлементамиФормы(ЭтаФорма, мКэшЗначений);
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();

	мТекущаяОрганизация = Объект.Организация;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	ЗаполнитьНомераСчетовВСведениях();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_СведенияОбОстаткахДенежныхСредств";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведения

&НаКлиенте
Процедура СведенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить организацию'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
	КонецЕсли;
		
КонецПроцедуры // СведенияПередНачаломДобавления()

&НаКлиенте
Процедура СведенияБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТекущаяВалютаВСтроке = ТекущиеДанные.Валюта;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Владелец", Объект.Организация);
		
	Если Не мКэшЗначений.флЕстьСправочникКассы Тогда
		
		СтруктураПараметров.Вставить("БанковскийСчетОрганизация" , ТекущиеДанные.БанковскийСчет);
		СтруктураПараметров.Вставить("ЭлементВладелец"			 , Элемент);

		бит_РаботаСДиалогамиКлиент.ОткрытьФормуВыбораРасчетногоСчета(СтруктураПараметров);
		
	Иначе
	
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Тип("СправочникСсылка.БанковскиеСчета"));
		СписокТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Элемент", Элемент);
		ДопПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
		ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборСведенияБанковскийСчет", ЭтотОбъект, ДопПараметры);
		ЭтаФорма.ПоказатьВыборИзСписка(ОповещениеОЗакрытии, СписокТипов);
		
	КонецЕсли;
	
КонецПроцедуры // СведенияБанковскийСчетНачалоВыбора()

// Обработка выбора типа реквизита "БанковскийСчет". 
// 
// Параметры:
//  ВыбранныйТип - Тип.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ВыборСведенияБанковскийСчет(ВыбранныйТип, ДопПараметры) экспорт

	Элемент             = ДопПараметры.Элемент;
	СтруктураПараметров = ДопПараметры.СтруктураПараметров;
	ТекущиеДанные       = ДопПараметры.ТекущиеДанные;
	
	Если ВыбранныйТип <> Неопределено Тогда
			
		МассивТипов = Новый Массив;
	  	МассивТипов.Добавить(ВыбранныйТип.Значение);
		
		Описание = Новый ОписаниеТипов(МассивТипов);
		
		Элемент.ОграничениеТипа = Описание;
        Элемент.ВыбиратьТип 	= Ложь;
		
		Если ВыбранныйТип.Значение = Тип("СправочникСсылка.БанковскиеСчета") Тогда 
			
			СтруктураПараметров.Вставить("БанковскийСчетОрганизация" , ТекущиеДанные.БанковскийСчет);
			СтруктураПараметров.Вставить("ЭлементВладелец"			 , Элемент);
			
			бит_РаботаСДиалогамиКлиент.ОткрытьФормуВыбораРасчетногоСчета(СтруктураПараметров);
			
		КонецЕсли;
			
	КонецЕсли; 

КонецПроцедуры // ВыборСведенияБанковскийСчетНачалоВыбора()

&НаКлиенте
Процедура СведенияБанковскийСчетАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТекущаяВалютаВСтроке = ТекущиеДанные.Валюта;
	
	СтандартнаяОбработка = Истина;
			
КонецПроцедуры // СведенияБанковскийСчетАвтоПодбор()

&НаКлиенте
Процедура СведенияБанковскийСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.БанковскийСчет) Тогда
		
		ПриИзмененииБанковскогоСчетаСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
		ИзменениеВалютыВСтроке(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры // СведенияБанковскийСчетПриИзменении()

&НаКлиенте
Процедура СведенияВалютаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;
	
	ИзменениеВалютыВСтроке(ТекущиеДанные);
	
КонецПроцедуры // СведенияВалютаПриИзменении()

&НаКлиенте
Процедура СведенияВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;
	
	мТекущаяВалютаВСтроке = ТекущиеДанные.Валюта;

КонецПроцедуры // СведенияВалютаНачалоВыбора()

&НаКлиенте
Процедура СведенияСуммаРасходПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;
	
	РассчитатьСуммуКонечныйОстатокВСтроке(ТекущиеДанные);
	
КонецПроцедуры // СведенияСуммаРасходПриИзменении()

&НаКлиенте
Процедура СведенияСуммаПриходПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;
	
	РассчитатьСуммуКонечныйОстатокВСтроке(ТекущиеДанные);
	
КонецПроцедуры // СведенияСуммаПриходПриИзменении()

&НаКлиенте
Процедура СведенияСуммаНачПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сведения.ТекущиеДанные;
	
	РассчитатьСуммуКонечныйОстатокВСтроке(ТекущиеДанные);
	
КонецПроцедуры // СведенияСуммаНачПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоБУ(Команда)
	
	Если Объект.Сведения.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОчисткаТЧСведения", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15);
			
	Иначе
		
		ЗаполнитьПоДаннымБухгалтерскогоУчета();
		
	КонецЕсли; 	
		
КонецПроцедуры // ЗаполнитьПоБУ()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросОчисткаТЧСведения(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Сведения.Очистить();
		
		ЗаполнитьПоДаннымБухгалтерскогоУчета();

	КонецЕсли; 
		
КонецПроцедуры // ВопросОчисткаТЧСведения()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если мТекущаяОрганизация <> Объект.Организация Тогда
		
		Если Объект.Сведения.Количество() > 0 Тогда
			
			ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении", ЭтотОбъект);
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
						
		КонецЕсли;		
		
	Иначе
		
		мТекущаяОрганизация = Объект.Организация;
		ИзменениеОрганизации();
		УправлениеЭлементамиФормы(ЭтаФорма, мКэшЗначений);
		
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Сведения.Очистить();
		
		мТекущаяОрганизация = Объект.Организация;
		ИзменениеОрганизации();
		УправлениеЭлементамиФормы(ЭтаФорма, мКэшЗначений);

	Иначе
		
		Объект.Организация = мТекущаяОрганизация;
		
	КонецЕсли;

КонецПроцедуры // ВопросОрганизацияПриИзменении()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	мКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	мКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
		
	мКэшЗначений.Вставить("флЕстьСправочникКассы", Метаданные.Справочники.Найти("Кассы") <> Неопределено);
	
	// Флаг нужен для использования в условном оформлении.
	флЕстьСправочникКассы = мКэшЗначений.флЕстьСправочникКассы;
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура выполняет действия на сервере, необходимые при изменении Организации.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеОрганизации()
	
	ДокументЗаявка = РеквизитФормыВЗначение("Объект");
	
	// Выполняем общие действия для всех документов при изменении Организация.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументЗаявка, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	
	ЗначениеВРеквизитФормы(ДокументЗаявка, "Объект");
	
КонецПроцедуры // ИзменениеОрганизации()

// Процедура управляет видимостью\доступностью элементов формы.
// 
// Параметры:
// 	Форма - УправляемаяФорма
// 	КэшЗначений - структура
// 
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма, КэшЗначений)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
КонецПроцедуры // УправлениеЭлементамиФормы()

// Функция возвращает структуру курса и кратности переданной валюты.
// 
&НаСервере
Функция ПолучитьКурсКратностьВалюты(Валюта)
	
	СтруктураКурса = Новый Структура("Курс, Кратность");
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Объект.Дата);
	
	СтруктураКурса.Курс      = СтрКурса.Курс;
	СтруктураКурса.Кратность = СтрКурса.Кратность;
	
	Возврат СтруктураКурса;
	
КонецФункции // ПолучитьКурсКратностьВалюты()

// Процедура выполняет действия необходимые при изменении банковского счета.
// 
&НаСервере
Процедура ПриИзмененииБанковскогоСчетаСервер(ИДТекущейСтроки)
	
	ТекущиеДанные = Объект.Сведения.НайтиПоИдентификатору(ИДТекущейСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Валюта = ТекущиеДанные.БанковскийСчет.ВалютаДенежныхСредств;
	
	ЗаполнитьНомерСчетаВСтроке(ТекущиеДанные, мКэшЗначений);
	
КонецПроцедуры // ПриИзмененииБанковскогоСчетаСервер()

// Процедура инициирует заполнение таблицы Сведения.
// 
&НаСервере
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДокументОбъект.ЗаполнитьПоДаннымБухгалтерскогоУчета();	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьНомераСчетовВСведениях();
	
КонецПроцедуры // ЗаполнитьПоДаннымБухгалтерскогоУчета()

&НаСервере
Процедура ЗаполнитьНомераСчетовВСведениях()
	
	Для Каждого ТекущаяСтрока Из Объект.Сведения Цикл
		
		ЗаполнитьНомерСчетаВСтроке(ТекущаяСтрока, мКэшЗначений);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНомераСчетовВСведениях()

&НаСервереБезКонтекста
Процедура ЗаполнитьНомерСчетаВСтроке(ТекущаяСтрока, КэшЗначений)
	
	Если ТипЗнч(ТекущаяСтрока.БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.БанковскийСчет) Тогда
			ТекущаяСтрока.НомерСчетаТекст = ТекущаяСтрока.БанковскийСчет.НомерСчета;
		ИначеЕсли НЕ КэшЗначений.флЕстьСправочникКассы Тогда
			ТекущаяСтрока.НомерСчетаТекст = "Касса";
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.НомерСчетаТекст = "Касса";
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНомерСчетаВСтроке()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаКлиенте
Процедура РассчитатьСуммуКонечныйОстатокВСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаКон = ТекущиеДанные.СуммаНач + ТекущиеДанные.СуммаПриход - ТекущиеДанные.СуммаРасход;
	
КонецПроцедуры // РассчитатьСуммуКонечныйОстатокВСтроке()

&НаКлиенте
Процедура ИзменениеВалютыВСтроке(ТекущиеДанные) 

	// Спросим, а не пересчитать ли суммы
	Если мТекущаяВалютаВСтроке <> ТекущиеДанные.Валюта
		И (ТекущиеДанные.СуммаНач <> 0
		ИЛИ ТекущиеДанные.СуммаПриход <> 0
		ИЛИ ТекущиеДанные.СуммаРасход <> 0
		ИЛИ ТекущиеДанные.СуммаКон <> 0) Тогда
		
		ТекстВопроса = "Изменилась валюта в строке табличной части. Пересчитать суммы в строке?";
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыВСтроке", ЭтотОбъект, ТекущиеДанные);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
						
	Иначе
		
		мТекущаяВалютаВСтроке = ТекущиеДанные.Валюта;
		
	КонецЕсли; 
		
КонецПроцедуры // ИзменениеВалютыВФорме()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ТекущиеДанные - ТаблицаЗначений.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыВСтроке(Ответ, ТекущиеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда    
			
		СтруктураКурсаТекущейВалюты = ПолучитьКурсКратностьВалюты(мТекущаяВалютаВСтроке);
		СтруктураКурсаНовойВалюты   = ПолучитьКурсКратностьВалюты(ТекущиеДанные.Валюта);
		
		ТекущиеДанные.СуммаНач = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаНач
																,мТекущаяВалютаВСтроке
																,ТекущиеДанные.Валюта
																,СтруктураКурсаТекущейВалюты.Курс
																,СтруктураКурсаНовойВалюты.Курс
																,СтруктураКурсаТекущейВалюты.Кратность
																,СтруктураКурсаНовойВалюты.Кратность);
		
		ТекущиеДанные.СуммаПриход = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаПриход
																,мТекущаяВалютаВСтроке
																,ТекущиеДанные.Валюта
																,СтруктураКурсаТекущейВалюты.Курс
																,СтруктураКурсаНовойВалюты.Курс
																,СтруктураКурсаТекущейВалюты.Кратность
																,СтруктураКурсаНовойВалюты.Кратность);
		
		ТекущиеДанные.СуммаРасход = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаРасход
																,мТекущаяВалютаВСтроке
																,ТекущиеДанные.Валюта
																,СтруктураКурсаТекущейВалюты.Курс
																,СтруктураКурсаНовойВалюты.Курс
																,СтруктураКурсаТекущейВалюты.Кратность
																,СтруктураКурсаНовойВалюты.Кратность);
		
		ТекущиеДанные.СуммаКон = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.СуммаКон
																,мТекущаяВалютаВСтроке
																,ТекущиеДанные.Валюта
																,СтруктураКурсаТекущейВалюты.Курс
																,СтруктураКурсаНовойВалюты.Курс
																,СтруктураКурсаТекущейВалюты.Кратность
																,СтруктураКурсаНовойВалюты.Кратность);														
																
		

	КонецЕсли;
		
	мТекущаяВалютаВСтроке = ТекущиеДанные.Валюта;
		
КонецПроцедуры // ВопросИзменениеВалютыВСтроке()

#КонецОбласти
 
&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти

