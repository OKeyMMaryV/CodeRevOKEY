#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем мЕстьСправочникКассы Экспорт; // Хранит признак того, что в конфигурации есть справочник "Кассы".

#КонецОбласти

#Область ОбработчикиСобытий

// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
												
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда 	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
												
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	ПроверкаРеквизитов(Отказ,Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ТаблицаСведения = ПодготовитьТаблицуСведения();
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаСведения,Отказ,Заголовок);
	КонецЕсли; 
        
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет табличную часть по данным бухгалтерского учета.
// 
// Параметры:
//  Нет
// 
Процедура ЗаполнитьПоДаннымБухгалтерскогоУчета() Экспорт

	МассивСчетовБанк  = Новый Массив;                        	
	МассивСчетовБанк.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета); 		// 51
    МассивСчетовБанк.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);  		// 52
    МассивСчетовБанк.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);		// 55
	
	МассивСчетовКасса = Новый Массив;
	МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); 		// 50.01
	МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);		// 50.02
	МассивСчетовКасса.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал); 	// 50.21
    	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	     , Организация);
	Запрос.УстановитьПараметр("Период"	         , Дата);
	Запрос.УстановитьПараметр("МассивСчетовБанк" , МассивСчетовБанк);
	Запрос.УстановитьПараметр("МассивСчетовКасса", МассивСчетовКасса);
	
	Если мЕстьСправочникКассы Тогда
		
		ТекстКассы = "
		|ВЫБРАТЬ
		|	Ложь,
		|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.Регистратор.Касса, ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)),
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
		|	
		|	ВЫБОР
		|		КОГДА ХозрасчетныйДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ИЛИ ХозрасчетныйДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
		|			ТОГДА (ВЫБОР
		|					КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовКасса)
		|						ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.Сумма, 0)
		|					ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.Сумма, 0) * -1
		|					КОНЕЦ)
		|		ИНАЧЕ (ВЫБОР
		|				КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В (&МассивСчетовКасса)
		|					ТОГДА ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт, 0)
		|				ИНАЧЕ ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт, 0) * -1
		|			КОНЕЦ)
		|	КОНЕЦ 
		|	
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			,
		|			&Период,
		|			Организация = &Организация
		|				И (СчетДт В (&МассивСчетовКасса)
		|					ИЛИ СчетКт В (&МассивСчетовКасса)),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|";
		
	Иначе
	
		ТекстКассы = "
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)),
		|	ХозрасчетныйОстатки.Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|				ИЛИ ХозрасчетныйОстатки.Валюта ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0)
		|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0)
		|	КОНЕЦ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&МассивСчетовКасса), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|";
				
	
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Константы.ВалютаРегламентированногоУчета
	|ПОМЕСТИТЬ ТаблКонстанты
	|ИЗ
	|	Константы КАК Константы
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	// |	ХозрасчетныйОстатки.Счет,
	|	ИСТИНА КАК ЭтоБанк,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)) КАК БанковскийСчет,
	|	ХозрасчетныйОстатки.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ХозрасчетныйОстатки.Валюта ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0)
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0)
	|	КОНЕЦ КАК СуммаНач
	|ПОМЕСТИТЬ Табл
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&МассивСчетовБанк), , Организация = &Организация) КАК ХозрасчетныйОстатки
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|" + ТекстКассы + "
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Табл.ЭтоБанк,
	|	Табл.БанковскийСчет,
	|	ВЫБОР
	|		КОГДА Табл.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ Табл.Валюта ЕСТЬ NULL 
	|			ТОГДА Константы.ВалютаРегламентированногоУчета
	|		ИНАЧЕ Табл.Валюта
	|	КОНЕЦ КАК Валюта,
	|	СУММА(Табл.СуммаНач) КАК СуммаНач
	|ИЗ
	|	Табл КАК Табл,
	|	ТаблКонстанты КАК Константы
    |
	|СГРУППИРОВАТЬ ПО
	|	Табл.ЭтоБанк,
	|	Табл.БанковскийСчет,
	|	ВЫБОР
	|		КОГДА Табл.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ Табл.Валюта ЕСТЬ NULL 
	|			ТОГДА Константы.ВалютаРегламентированногоУчета
	|		ИНАЧЕ Табл.Валюта
	|	КОНЕЦ
    |
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоБанк УБЫВ
	|";
		
	Результат = Запрос.Выполнить();
		
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТч = Сведения.Добавить();
		// Заполнение БанковскийСчет, Валюта, СуммаНач.
		ЗаполнитьЗначенияСвойств(СтрокаТч, Выборка);
			
	КонецЦикла;    

КонецПроцедуры // ЗаполнитьПоДаннымБухгалтерскогоУчета()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура проверяет заполненность реквизитов документа и табличной части.
// 
// Параметры:
//  Отказ  	  - Булево
//  Заголовок - Строка
// 
Процедура ПроверкаТабличнойЧастиНаПовторы(Отказ, Заголовок)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
    |	ВЫБОР
    |		КОГДА Сведения.БанковскийСчет ЕСТЬ NULL 
    |				ИЛИ Сведения.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
    |			ТОГДА ""Касса "" + Сведения.Валюта.Наименование
    |		ИНАЧЕ Сведения.БанковскийСчет
    |	КОНЕЦ КАК БанковскийСчетКасса,
    |	Сведения.НомерСтроки,
    |	Сведения.БанковскийСчет КАК БанковскийСчет,
    |	1 КАК Количество
    |ИЗ
    |	Документ.бит_СведенияОбОстаткахДенежныхСредств.Сведения КАК Сведения
    |ГДЕ
    |	Сведения.Ссылка = &Ссылка
    |ИТОГИ
    |	МАКСИМУМ(БанковскийСчет),
    |	СУММА(Количество)
    |ПО
    |	БанковскийСчетКасса
	|";
	Результат = Запрос.Выполнить();
	
	ВыборкаВерх = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаВерх.Следующий() Цикл
		
		ЭтоБанковскийСчет = ЗначениеЗаполнено(ВыборкаВерх.БанковскийСчет);		
		
		ЕстьПовтор = ?(ВыборкаВерх.Количество > 1, Истина, Ложь);
		НомераСтрок = "";
		
		Выборка = ВыборкаВерх.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЕстьПовтор Тогда
				НомерСтроки =  Строка(Выборка.НомерСтроки);
				НомераСтрок = ?(НомераСтрок = "", НомерСтроки, НомераСтрок + ", " + НомерСтроки);			
			КонецЕсли;
		
		КонецЦикла;
		
		Если ЕстьПовтор Тогда
			ТекстСообщения = Нстр("ru = 'В строках № %1% повторяется значение %2%'");
			ПовторяющиесяПоля = ?(ЭтоБанковскийСчет, "банковского счета", "кассы");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, НомераСтрок, ПовторяющиесяПоля);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла; 	

КонецПроцедуры // ПроверкаТабличнойЧастиНаПовторы()

// Процедура выполняет проверку заполнения шапки и таб. частей.
// 
// Параметры:
// Отказ - булево
// Заголовок  - Строка
Процедура ПроверкаРеквизитов(Отказ,Заголовок)

	// Проверим заполнение шапки
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Организация");
	
	бит_РаботаСМетаданными.ПроверитьЗаполнениеШапки(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверим таблицу Сведения
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Валюта");		
	
	бит_РаботаСМетаданными.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект,"Сведения",СтруктураОбязательныхПолей,Отказ,Заголовок);
	
	ПроверкаТабличнойЧастиНаПовторы(Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Функция готовит таблицу Сведения для проведения.
// 
// Возвращаемое значение:
//   ТаблицаСведения   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуСведения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбОстаткахДенежныхСредств.Ссылка.Дата КАК Период,
	|	СведенияОбОстаткахДенежныхСредств.Ссылка.Организация,
	|	СведенияОбОстаткахДенежныхСредств.БанковскийСчет,
	|	СведенияОбОстаткахДенежныхСредств.Валюта,
	|	%ВидДенежныхСредств%,
	|	СведенияОбОстаткахДенежныхСредств.СуммаНач,
	|	СведенияОбОстаткахДенежныхСредств.СуммаПриход,
	|	СведенияОбОстаткахДенежныхСредств.СуммаРасход,
	|	СведенияОбОстаткахДенежныхСредств.СуммаКон,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОбОстаткахДенежныхСредств.СуммаНач * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК СуммаНачРегл,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОбОстаткахДенежныхСредств.СуммаПриход * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК СуммаПриходРегл,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОбОстаткахДенежныхСредств.СуммаРасход * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК СуммаРасходРегл,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СведенияОбОстаткахДенежныхСредств.СуммаКон * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК СуммаКонРегл
	|ИЗ
	|	Документ.бит_СведенияОбОстаткахДенежныхСредств.Сведения КАК СведенияОбОстаткахДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|		ПО СведенияОбОстаткахДенежныхСредств.Валюта = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	СведенияОбОстаткахДенежныхСредств.Ссылка = &ЭтотДокумент";
	
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.УстановитьПараметр("Период"		, Дата);
	Если мЕстьСправочникКассы Тогда
		ТекстСчетКасса = "
		|	ВЫБОР
		|		КОГДА СведенияОбОстаткахДенежныхСредств.БанковскийСчет ССЫЛКА Справочник.БанковскиеСчета
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)
		|	КОНЕЦ КАК ВидДенежныхСредств";
	Иначе
	    ТекстСчетКасса = "
		|	ВЫБОР
		|		КОГДА СведенияОбОстаткахДенежныхСредств.БанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Наличные)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.бит_ВидыДенежныхСредств.Безналичные)
		|	КОНЕЦ КАК ВидДенежныхСредств";	
	КонецЕсли;		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидДенежныхСредств%", ТекстСчетКасса);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаСведения = Результат.Выгрузить();
	
	Возврат ТаблицаСведения;
	
КонецФункции // ПодготовитьТаблицуСведения()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаСведения,Отказ,Заголовок)
	
	// Движения по регистру сведений Сведения об остатках денежных средств.
	ТаблицаДвижений = Движения.бит_СведенияОбОстаткахДенежныхСредств.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСведения Цикл
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
	КонецЦикла; 
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	Движения.бит_СведенияОбОстаткахДенежныхСредств.Загрузить(ТаблицаДвижений);
	
	
	// Движения по регистру накопления Сведения о движении денежных средств.
	ТаблицаДвижений = Движения.бит_СведенияОДвиженииДенежныхСредств.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаСведения Цикл
		
		Если НЕ СтрокаТаблицы.СуммаПриход = 0 Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			
			НоваяСтрока.ПриходРасход = Перечисления.бит_ВидДвиженияНакопления.Приход;
			НоваяСтрока.Сумма 		 = СтрокаТаблицы.СуммаПриход;
			НоваяСтрока.СуммаРегл	 = СтрокаТаблицы.СуммаПриходРегл;
			
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.СуммаРасход = 0 Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			
			НоваяСтрока.ПриходРасход = Перечисления.бит_ВидДвиженияНакопления.Расход;
			НоваяСтрока.Сумма 		 = СтрокаТаблицы.СуммаРасход;
			НоваяСтрока.СуммаРегл	 = СтрокаТаблицы.СуммаРасходРегл;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Движения.бит_СведенияОДвиженииДенежныхСредств.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_СведенияОДвиженииДенежныхСредств.ДобавитьДвижение();
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#Область Инициализация

мЕстьСправочникКассы = Метаданные.Справочники.Найти("Кассы") <> Неопределено;
  
#КонецОбласти

#КонецЕсли
