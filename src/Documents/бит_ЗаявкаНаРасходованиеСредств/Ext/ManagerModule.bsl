#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Заявка на оплату.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьЗаявкаНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на оплату'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 10;
	
	// Заявка на оплату (по платежам).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьЗаявкаНаОплатуПоПлатежам";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на оплату (по платежам)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 20;
	
	// Заявка на оплату (по платежам).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьЗаявкаНаОплатуСписок";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на оплату (для списка)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 30;
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-10 (#ТП_БП05_ФР07)
	Если Пользователи.РолиДоступны("ПолныеПрава,ок_ИспользованиеОбработкиПечатьВедомостиДляЗнРДСПоФормеБанка") Тогда 
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьВедомостиПоФормеБанка";
	КомандаПечати.Представление = НСтр("ru = 'Печать ведомости форме банка (ОКЕЙ)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.МенеджерПечати = "Обработка.ок_ПечатьВедомостиДляЗнРДСПоФормеБанка";
	КомандаПечати.Порядок       = 40;
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-10 (#ТП_БП05_ФР07)
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЗаявкаНаОплату") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПечатьЗаявкаНаОплату", НСтр("ru = 'Заявка на оплату'"),
			СформироватьПечатнуюФормуЗаявкиНаОплату(МассивОбъектов),,
			"Документ.бит_ЗаявкаНаРасходованиеСредств.ЗаявкаНаОплату");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЗаявкаНаОплатуПоПлатежам") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПечатьЗаявкаНаОплатуПоПлатежам",НСтр("ru = 'Заявка на оплату (по платежам)'"),
			СформироватьПечатнуюФормуЗаявкиНаОплату(МассивОбъектов, Истина),,
			"Документ.бит_ЗаявкаНаРасходованиеСредств.ЗаявкаНаОплату");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьЗаявкаНаОплатуСписок") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПечатьЗаявкаНаОплатуСписок", НСтр("ru = 'Заявка на оплату (для списка)'"),
			СформироватьПечатнуюФормуЗаявкиНаОплату(МассивОбъектов,,Истина),,
			"Документ.бит_ЗаявкаНаРасходованиеСредств.ЗаявкаНаОплату");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, 
		КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует дерево видов операций для выбора вида операции перед вводом заявки.
//
// Параметры:
//  ОбъектЗаполнения - ПеречислениеСсылка.бит_ВидыОперацийЗаявкаНаРасходованиеСредств.
//  Исключения       - Соответствие - Значения: массивы значений перечислений, которые необходимо исключать из меню.
//  ВеткиДляВывода	 - Строка - название ветки, которую нужно вывести ("наличные" или "безналичные").
//
// Возвращаемое значение:
//  ДеревоВидовОпераций - ДеревоЗначений.
//
Функция СформироватьДеревоВидовОперацийДляЗаявки(ОбъектЗаполнения, Исключения = Неопределено, ВеткиДляВывода = "все") Экспорт

	// Устарело.
	
	Если ТипЗнч(Исключения) <> Тип("Соответствие") Тогда
		Исключения = Новый Соответствие;
	КонецЕсли;
	
	ДеревоВидовОперацийИсточник = Новый ДеревоЗначений;
	
	ДеревоВидовОперацийИсточник.Колонки.Добавить("ВидОперации");
	
	Если ВеткиДляВывода = "все" Или ВеткиДляВывода = "безналичные" Тогда
		
		// Получим имя документа по списанию денежных средств со счета.
		ИмяДокументаПоСписаниюДС = бит_ОбщегоНазначения.ПолучитьИмяДокументаПоСписаниюДС();
		
		СоответствиеКонтроль = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл(ИмяДокументаПоСписаниюДС);									
		ДобавитьВеткуДереваВидыОпераций(ДеревоВидовОперацийИсточник
		                               ,СоответствиеКонтроль
									   ,Перечисления.бит_ВидыДенежныхСредств.Безналичные
									   ,ОбъектЗаполнения
									   ,Исключения["Безналичные"]);
    КонецЕсли;
	
	Если ВеткиДляВывода = "все" Или ВеткиДляВывода = "наличные" Тогда
    		
		СоответствиеКонтроль = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("РасходныйКассовыйОрдер");	
		ДобавитьВеткуДереваВидыОпераций(ДеревоВидовОперацийИсточник
	    	                           ,СоответствиеКонтроль
									   ,Перечисления.бит_ВидыДенежныхСредств.Наличные
									   ,ОбъектЗаполнения
									   ,Исключения["Наличные"]);
	КонецЕсли;
	
	Возврат ДеревоВидовОперацийИсточник;
	
КонецФункции // СформироватьДеревоВидовОперацийДляЗаявки()

// Процедура управляет видимостью полей назначенных аналитик.
// 
Процедура ВидимостьНазначенныхАналитик(Форма) Экспорт 

	Объект	  = Форма.Объект;
	Элементы  = Форма.Элементы;
	Настройки = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Для каждого Настройка Из Настройки Цикл
		
		Если НЕ Настройка.Значение.ЭтоСоставнойТип
			И Настройка.Значение.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда 
			
			Форма.Элементы[Настройка.Ключ].Видимость = Ложь;
			Если Объект.СтатьяОборотов["Учет_"+Настройка.Ключ] Тогда
				Объект[Настройка.Ключ] = Объект.Организация;
			Иначе	
				Объект[Настройка.Ключ] = Справочники.Организации.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;	
	КонецЦикла;	
		
КонецПроцедуры

Процедура ВидимостьНазначенныхАналитикТаблицы(Форма, ПараметрыУстановки) Экспорт 
		
	Объект	 = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПоляФормы   = ПараметрыУстановки.ПоляФормы;
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;

	Настройки = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	ВГраница  = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	
	Для Индекс = 1 По ВГраница Цикл
	
		Если НЕ ЗначениеЗаполнено(ПоляФормы["Аналитика_" + Индекс])
			ИЛИ НЕ ЗначениеЗаполнено(ПоляОбъекта["Аналитика_" + Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы = Элементы.Найти(ПоляФормы["Аналитика_" + Индекс]);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Настройка = Настройки["Аналитика_" + Индекс];
		Если Настройка = Неопределено Тогда
			Продолжить;		
		КонецЕсли; 
		
		Если НЕ Настройка.ЭтоСоставнойТип Тогда
			Если Настройка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				ЭлементФормы.Видимость = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
		
КонецПроцедуры

// Вызывается перед записью.
//
Процедура ЗаполнитьНазначенныеАналитикиТаблицыИзШапки(Таблица, Реквизиты) Экспорт

	Перем Организация;
	Перем ФизическоеЛицо;
	
	Настройки 	= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	ВГраница 	= бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	
	Реквизиты.Свойство("Организация", Организация);
	Реквизиты.Свойство("ФизическоеЛицо", ФизическоеЛицо);
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Для Индекс = 1 По ВГраница Цикл
			
			Настройка = Настройки["Аналитика_" + Индекс];
			Если Настройка = Неопределено Тогда
				Продолжить;		
			КонецЕсли; 
			
			Если НЕ Настройка.ЭтоСоставнойТип Тогда
				Если Настройка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
					СтрокаТаблицы["Аналитика_" + Индекс] = Организация;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 

КонецПроцедуры

Функция ПараметрыУстановкиСвойствАналитик(Объект, Префикс = "") Экспорт

	Результат = бит_МеханизмДопИзмеренийКлиентСервер.ПараметрыУстановкиСвойствАналитикПоШаблону(
		Префикс + "Аналитика_", "Аналитика_", "СтатьяОборотов");
		
	Результат.ДопРеквизиты.Вставить("Организация", Объект.Организация);
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДопАналитикуПоДаннымДокумента(Данные, Значение, ПараметрыУстановки) Экспорт

	Настройки 	= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	ВГраница 	= бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	
	ПоляОбъекта = ПараметрыУстановки.ПоляОбъекта;
	Для Индекс = 1 По ВГраница Цикл
		
		Настройка   = Настройки["Аналитика_" + Индекс];
		Если Настройка = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ Настройка.ЭтоСоставнойТип Тогда
			ПолеОбъекта = "";
			Если ПоляОбъекта.Свойство("Аналитика_" + Индекс, ПолеОбъекта) Тогда
				Если Настройка.ТипЗначения.СодержитТип(ТипЗнч(Значение)) И НЕ ЗначениеЗаполнено(Данные[ПолеОбъекта]) Тогда
					Данные[ПолеОбъекта] = Значение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Устарело, следует использовать СвязанныеДокументы(Заявка).
// 
Функция НайтиДокументыОплатыЗаявки(Заявка) Экспорт
	
	ДокументыОплаты = Новый Массив;
	
	СвязанныеДокументы = СвязанныеДокументы(Заявка);
	Для каждого СтрокаТаблицы Из СвязанныеДокументы Цикл
		Если НЕ СтрокаТаблицы.Оплачено Тогда
			ДокументыОплаты.Добавить(СтрокаТаблицы.Позиция);
		КонецЕсли; 
	КонецЦикла; 

	Возврат ДокументыОплаты;
	
КонецФункции	

Функция СвязанныеДокументы(Заявка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ДополнительныеАналитики.ЗначениеАналитики КАК Позиция
	|ПОМЕСТИТЬ ОплаченныеПозиции
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|ГДЕ
	|	бит_ДополнительныеАналитики.Аналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция)
	|	И ВЫРАЗИТЬ(бит_ДополнительныеАналитики.ЗначениеАналитики КАК Документ.бит_ПлатежнаяПозиция).ДокументОснование = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция
	|ИЗ
	|	РегистрСведений.бит_ДокументыМножественнойОплаты КАК бит_ДокументыМножественнойОплаты
	|ГДЕ
	|	бит_ДокументыМножественнойОплаты.ПлатежнаяПозиция.ДокументОснование = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПлатежнаяПозиция.Ссылка КАК Позиция,
	|	1 КАК Количество,
	|	ВЫБОР
	|		КОГДА ОплаченныеПозиции.Позиция ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Оплачено,
	|	ВЫБОР
	|		КОГДА ОплаченныеПозиции.Позиция ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоОплачено,
	|	бит_ПлатежнаяПозиция.УсловиеПоКурсу КАК УсловиеАктуализации
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплаченныеПозиции КАК ОплаченныеПозиции
	|		ПО (ОплаченныеПозиции.Позиция = бит_ПлатежнаяПозиция.Ссылка)
	|ГДЕ
	|	бит_ПлатежнаяПозиция.ДокументОснование = &ДокументОснование
	|	И НЕ бит_ПлатежнаяПозиция.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ДокументОснование", Заявка);

	РезультатЗапроса   = Запрос.Выполнить();
	СвязанныеДокументы = РезультатЗапроса.Выгрузить(); 
	
	Возврат СвязанныеДокументы;	
	
КонецФункции
 
Процедура ПеренестиНазначениеПлатежаПриПереходеНаНовуюВерсию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекущийОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.НазначениеПлатежаУпр = ТекущийОбъект.УдалитьНазначениеПлатежаУпр;   
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект);
		
	КонецЦикла;	

КонецПроцедуры

Функция ГотовКАктуализацииПоКурсам(Реквизиты, КурсыВалют, РежимыВывода, Отказ = Ложь) Экспорт

	ГотовКАктуализации = Истина;
	ТекстСообщения     = "";   
	
	//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-07-09 (#AT-2115538#) 
	#Область СтарыйКод
	//Если Реквизиты.ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Оплачена Тогда 
	//	ТекстСообщения = СтрШаблон(НСтр("ru = 'По документу %1 произведена оплата. Актуализация курса невозможна.'"), Реквизиты.Ссылка);
	//	ГотовКАктуализации = Ложь;
	//КонецЕсли;	
	//
	//Если ГотовКАктуализации Тогда
	//	Если КурсыВалют.Курс = Реквизиты.КурсДокумента Тогда
	//		ТекстСообщения = СтрШаблон(НСтр("ru = 'По документу %1 курс соответствует курсу на текущую дату. Актуализация курса не требуется.'"), Реквизиты.Ссылка);
	//		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-19 (#НТП_БП12_ФР04)
	//		РежимыВывода.ВыводитьИнформацию = Ложь;
	//		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) конец2021-05-19 (#НТП_БП12_ФР04)
	//		ГотовКАктуализации = Ложь;
	//	КонецЕсли; 
	//КонецЕсли; 
	#КонецОбласти
	
	#Область НовыйКод
	Если КурсыВалют.Курс = Реквизиты.КурсДокумента Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'По документу %1 курс соответствует курсу на текущую дату. Актуализация курса не требуется.'"), Реквизиты.Ссылка);
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-19 (#НТП_БП12_ФР04)
		РежимыВывода.ВыводитьИнформацию = Ложь;
		Отказ = Истина;
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) конец2021-05-19 (#НТП_БП12_ФР04)
		ГотовКАктуализации = Ложь;
	КонецЕсли; 
	
	Если ГотовКАктуализации Тогда
		Если Реквизиты.ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Оплачена Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По документу %1 произведена оплата. Актуализация курса невозможна.'"), Реквизиты.Ссылка);
			ГотовКАктуализации = Ложь;
		КонецЕсли;	
	КонецЕсли; 
	#КонецОбласти
	//ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-07-09 (#AT-2115538#)

	Если НЕ ГотовКАктуализации Тогда
		Если РежимыВывода.ВыводитьИнформацию Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Реквизиты.Ссылка,,,Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ГотовКАктуализации;
	
КонецФункции

Процедура ПроверитьПоСтатьеОборотовИЗаполнитьАналитику(АналитикаНоменклатуры, НастройкиСтатьи, ДанныеОбъекта, ТекущиеДанные) Экспорт
	
	СтрНастр = Неопределено;
	НастройкиСтатьи.Измерения.Свойство(АналитикаНоменклатуры, СтрНастр);
	Если ТипЗнч(СтрНастр) = Тип("Структура") Тогда
		Если НЕ СтрНастр.Учет Тогда
			ДанныеОбъекта[АналитикаНоменклатуры] = Неопределено;
		Иначе	
			ДанныеОбъекта[АналитикаНоменклатуры] = ТекущиеДанные.Номенклатура;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Функция КонтрольныеЗначенияВозвратаЛимита(ДокументСсылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрольныеЗначения.Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	КонтрольныеЗначения.НомерСтроки КАК НомерСтроки,
	|	КонтрольныеЗначения.Сценарий КАК Сценарий,
	|	КонтрольныеЗначения.ЦФО КАК ЦФО,
	|	КонтрольныеЗначения.СтатьяОборотов КАК СтатьяОборотов,
	|	КонтрольныеЗначения.Контрагент КАК Контрагент,
	|	КонтрольныеЗначения.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КонтрольныеЗначения.Проект КАК Проект,
	|	КонтрольныеЗначения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КонтрольныеЗначения.БанковскийСчет КАК БанковскийСчет,
	|	КонтрольныеЗначения.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	КонтрольныеЗначения.Аналитика_1 КАК Аналитика_1,
	|	КонтрольныеЗначения.Аналитика_2 КАК Аналитика_2,
	|	КонтрольныеЗначения.Аналитика_3 КАК Аналитика_3,
	|	КонтрольныеЗначения.Аналитика_4 КАК Аналитика_4,
	|	КонтрольныеЗначения.Аналитика_5 КАК Аналитика_5,
	|	КонтрольныеЗначения.Аналитика_6 КАК Аналитика_6,
	|	КонтрольныеЗначения.Аналитика_7 КАК Аналитика_7,
	|	-КонтрольныеЗначения.СуммаСценарийИсполнение КАК Разность,
	|	-КонтрольныеЗначения.КоличествоСценарийИсполнение КАК КоличествоРазность
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК КонтрольныеЗначения
	|ГДЕ
	|	КонтрольныеЗначения.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	КонтрольныеЗначения = Новый Массив(); 
	Для каждого СтрокаТаблицы Из РезультатЗапроса Цикл
		КонтрольныеЗначения.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы));
	КонецЦикла;
	
	Возврат КонтрольныеЗначения;

КонецФункции

Функция ОперацииБезНДС() Экспорт

	ВидыОпераций = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование;
	ОперацииБезНДС = Новый Массив(); 
	ОперацииБезНДС.Добавить(ВидыОпераций.ВыплатаЗаработнойПлатыРаботнику);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПеречислениеЗП);
	ОперацииБезНДС.Добавить(ВидыОпераций.ВыплатаДепонентов);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПеречислениеНалога);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПеречислениеДенежныхСредствПодотчетнику);

	ОперацииБезНДС.Добавить(ВидыОпераций.ИнкассацияДенежныхСредств);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПеречислениеСотрудникуПоДоговоруПодряда);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПеречислениеДивидендов);
	ОперацииБезНДС.Добавить(ВидыОпераций.ВзносНаличнымиВБанк);
	ОперацииБезНДС.Добавить(ВидыОпераций.ВыдачаЗаймаКонтрагенту);
	ОперацииБезНДС.Добавить(ВидыОпераций.ВозвратЗайма);
	ОперацииБезНДС.Добавить(ВидыОпераций.ВозвратКредита);
	ОперацииБезНДС.Добавить(ВидыОпераций.ВыдачаЗаймаРаботнику);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПрочееСписаниеБезналичныхДенежныхСредств);
	ОперацииБезНДС.Добавить(ВидыОпераций.СнятиеНаличных);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПеречислениеНалогаЗаТретьихЛиц);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПрочиеРасчетыСКонтрагентами);
	ОперацииБезНДС.Добавить(ВидыОпераций.ПереводНаДругойСчет);
	
	Возврат ОперацииБезНДС;

КонецФункции

Функция ОперацииСФизЛицом() Экспорт

	ОперацииСФизЛицом = Новый Массив(); 
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаЗаработнойПлатыРаботнику);
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов);
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыдачаЗаймаРаботнику);
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику);
	ОперацииСФизЛицом.Добавить(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеСотрудникуПоДоговоруПодряда);
	
	Возврат ОперацииСФизЛицом;
	
КонецФункции
	
Функция ПолучитьНазначениеПлатежа(Объект, ТолькоСумму = Ложь, ПолучитьСгенерированноеНазначение = Ложь, Принудительно = Ложь) Экспорт
	
	Если Принудительно Тогда
		Автозаполнение = Истина;
	Иначе		
		Автозаполнение = бит_Казначейство.ЗаполнятьНазначениеПлатежаВЗаявкеНаРасходованиеДС(Объект.Организация, Объект.Дата);
	КонецЕсли; 
	
	Если Автозаполнение Тогда
		НазначениеПлатежа = "";
		Если Объект.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
			Контекст = КонтекстПлатежногоДокумента(Объект);
			НазначениеПлатежа = Документы.СписаниеСРасчетногоСчета.ПолучитьНазначениеПлатежа(Контекст, 
									ТолькоСумму, ПолучитьСгенерированноеНазначение);
		КонецЕсли; 
	Иначе
		НазначениеПлатежа = Объект.НазначениеПлатежа;
	КонецЕсли; 
	
	Возврат НазначениеПлатежа;
	
КонецФункции

// Формирует документы оплаты на основании заявки.
//
// Параметры:
//  ВидДокумента	 - Строка - вид формируемого документа. 
//						Может принмать значения: "Поручение", "Списание".
//  НовыеДокументы	 - Массив - результат формирования документов.
//  ПараметрыЗаявки	 - Структура - свойства заявки нелбходимые для выполнения опеарции.
//						см. НовыеПараметрыЗаявкиДляСозданияПлатежныхДокументов() 
//
Процедура СоздатьНаОснованииПлатежныйДокумент(ВидДокумента, НовыеДокументы, ПараметрыЗаявки) Экспорт
	
	ПараметрыОплаты = ПараметрыОплаты(ВидДокумента, ПараметрыЗаявки);
	Если НЕ ПараметрыОплаты.ГотовКОплате Тогда
		ВызватьИсключение ПараметрыОплаты.Ошибка;
	КонецЕсли;
	
	НастройкиПараметров = Новый Соответствие; 
	ПодготовитьСписокПлатежныхПозиций(НастройкиПараметров, ПараметрыОплаты);
	
	Для каждого Элемент Из НастройкиПараметров Цикл
		
		ПлатежныеПозиции = Элемент.Значение.ПлатежныеПозиции;
		
		Для каждого ПлатежнаяПозиция Из ПлатежныеПозиции Цикл
			ПараметрыФормирования = Элемент.Значение;
			Попытка
				ПлатежныеДокументы = бит_Казначейство.СформироватьДокументыОплаты(ПлатежнаяПозиция, 
				ПараметрыФормирования);
				Для каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
					НовыеДокументы.Добавить(ПлатежныйДокумент); 
				КонецЦикла; 				
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось сформировать платежный документ для %1 по причине: %2'"), 
					ПлатежнаяПозиция, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПлатежнаяПозиция); 	
			КонецПопытки; 
		КонецЦикла; 		
	КонецЦикла; 
	
КонецПроцедуры

// Контструктор параметра процедуры СоздатьНаОснованииПлатежныйДокумент().
// 
// Возвращаемое значение:
//  Параметры - Структура, содержащая значения параметров.
//
Функция НовыеПараметрыЗаявкиДляСозданияПлатежныхДокументов() Экспорт

	Параметры = Новый Структура("Ссылка, Статус, ВалютаДокумента"); 
	Возврат Параметры;
	
КонецФункции
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает результат основного запроса по заявке.
//
// Параметры:
//  МассивСсылок  		   - Массив.
//  СчитатьСуммуПоПлатежам - Булево. По умолчанию Ложь.
//  
// Возвращаемое значение:
//   Результат запроса.
//
Функция ПолучитьРезультатЗапросаПоЗаявке(МассивСсылок, СчитатьСуммуПоПлатежам)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок"		  , МассивСсылок);
	Запрос.УстановитьПараметр("СчитатьСуммуПоПлатежам", СчитатьСуммуПоПлатежам);
 	Запрос.Текст = "ВЫБРАТЬ
 	               |	ДокЗаявка.Ссылка,
 	               |	ДокЗаявка.Номер,
 	               |	ДокЗаявка.Дата КАК ДатаДок,
 	               |	ДокЗаявка.Организация КАК Плательщик,
 	               |	ДокЗаявка.ТипЗаявки,
 	               |	ВЫБОР
 	               |		КОГДА ДокЗаявка.ЭтоКазначейство
 	               |			ТОГДА "" / Казначейская""
 	               |		ИНАЧЕ """"
 	               |	КОНЕЦ КАК Казначейство,
 	               |	ДокЗаявка.ФормаОплаты,
 	               |	ДокЗаявка.ДатаРасхода,
 	               |	ДокЗаявка.ВалютаДокумента,
 	               |	ВЫБОР
 	               |		КОГДА &СчитатьСуммуПоПлатежам
 	               |			ТОГДА ВложенныйЗапрос.Сумма
 	               |		ИНАЧЕ ДокЗаявка.Сумма
 	               |	КОНЕЦ КАК Сумма,
 	               |	ВЫБОР
 	               |		КОГДА &СчитатьСуммуПоПлатежам
 	               |			ТОГДА ВложенныйЗапрос.НДС
 	               |		ИНАЧЕ ДокЗаявка.НДС
 	               |	КОНЕЦ КАК СуммаНДС,
 	               |	ДокЗаявка.СтатьяОборотов,
 	               |	ДокЗаявка.Проект,
 	               |	ДокЗаявка.НазначениеПлатежа,
 	               |	ДокЗаявка.Ответственный КАК СтрокаОтветственный,
 	               |	ДокЗаявка.Комментарий,
 	               |	ДокЗаявка.СтатьяОборотов.Код КАК СтатьяОборотовКод,
 	               |	ДокЗаявка.СтатьяОборотов.Родитель КАК СтатьяРодитель,
 	               |	ДокЗаявка.СтатьяОборотов.Родитель.Код КАК СтатьяРодительКод,
 	               |	ДокЗаявка.Проект.Код КАК ПроектКод,
 	               |	ДокЗаявка.ЦФО КАК Подразделение,
 	               |	ДокЗаявка.Важность,
 	               |	ДокЗаявка.СверхБюджета,
 	               |	ДокЗаявка.Контрагент,
 	               |	ДокЗаявка.ФизическоеЛицо,
 	               |	ДокЗаявка.ДоговорКонтрагента КАК Договор,
 	               |	ДокЗаявка.ДоговорКонтрагента.Код КАК ДоговорКод
 	               |ИЗ
 	               |	Документ.бит_ЗаявкаНаРасходованиеСредств КАК ДокЗаявка
 	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
 	               |			бит_ПлатежнаяПозиция.ДокументОснование КАК ДокументОснование,
 	               |			СУММА(бит_ПлатежнаяПозиция.Сумма) КАК Сумма,
 	               |			СУММА(бит_ПлатежнаяПозиция.НДС) КАК НДС
 	               |		ИЗ
 	               |			Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
 	               |		ГДЕ
 	               |			бит_ПлатежнаяПозиция.ДокументОснование В(&МассивСсылок)
 	               |			И бит_ПлатежнаяПозиция.Проведен
 	               |		
 	               |		СГРУППИРОВАТЬ ПО
 	               |			бит_ПлатежнаяПозиция.ДокументОснование) КАК ВложенныйЗапрос
 	               |		ПО ДокЗаявка.Ссылка = ВложенныйЗапрос.ДокументОснование
 	               |ГДЕ
 	               |	ДокЗаявка.Ссылка В(&МассивСсылок)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьРезультатЗапросаПоЗаявке()

// Функция получает таблицу значений по установленным визам.
//
// Параметры:
//  МассивСсылок  - Массив.
//  
// Возвращаемое значение:
//   Таблица значений.
//
Функция ТаблицаПоВизам(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("РежимПечатиНеВыводить", Перечисления.бит_РежимПечатиВиз.НеВыводить);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегВизы.Объект КАК Ссылка,
	|	РегВизы.Виза,
	|	РегВизы.ФизическоеЛицо КАК ФИО
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК РегВизы
	|ГДЕ
	|	РегВизы.Объект В(&МассивСсылок)
	|	И РегВизы.Виза.РежимПечати <> &РежимПечатиНеВыводить
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегВизы.КодСортировки";
	
	ТаблицаПоВизам = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаПоВизам;
	
КонецФункции // ПолучитьТаблицуПоВизам()

// Функция получает таблицу значений по табличной части документов.
//
// Параметры:
//  МассивСсылок  - Массив.
//  
// Возвращаемое значение:
//   Таблица значений.
//
Функция ТаблицаПоСписку(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЧасть.Ссылка,
	               |	ТабЧасть.НомерСтроки,
	               |	ТабЧасть.ЦФО,
	               |	ТабЧасть.СтатьяОборотов,
	               |	ТабЧасть.Проект,
	               |	ТабЧасть.Сумма,
	               |	ТабЧасть.СтавкаНДС,
	               |	ТабЧасть.НДС КАК СуммаНДС,
	               |	ТабЧасть.ДоговорКонтрагента КАК Договор
	               |ИЗ
	               |	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК ТабЧасть
	               |ГДЕ
	               |	ТабЧасть.Ссылка В(&МассивСсылок)";
	
	ТаблицаПоСписку = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаПоСписку;
	
КонецФункции // ПолучитьТаблицуПоВизам()

// Функция формирует печатную форму заявки на оплату.
//
// Параметры:
//  ИмяМакета			   - Строка.
//  МассивСсылок  		   - Массив.
//  СчитатьСуммуПоПлатежам - Булево. По умолчанию Ложь.
//
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуЗаявкиНаОплату(МассивСсылок, СчитатьСуммуПоПлатежам = Ложь, ВыводитьСписок = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_ЗаявкаНаРасходованиеСредств_ЗаявкаНаОплату";
	
	// Формируем запрос по заявкам.
	РезультатЗапроса = ПолучитьРезультатЗапросаПоЗаявке(МассивСсылок, СчитатьСуммуПоПлатежам);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		// Получаем макет и области.
		Макет = ПолучитьМакет("ЗаявкаНаОплату");
		// Получаем области.
		Заявка 			 = Макет.ПолучитьОбласть("Заявка");
		БддсСтатьяПроект = Макет.ПолучитьОбласть("БддсСтатьяПроект");
		Плательщик  	 = Макет.ПолучитьОбласть("Плательщик");
		Договор		  	 = Макет.ПолучитьОбласть("Договор");
		ШапкаВиза    	 = Макет.ПолучитьОбласть("ШапкаВиза");
		СтрокаВиза  	 = Макет.ПолучитьОбласть("СтрокаВиза");
		ЗаявкаНиз  		 = Макет.ПолучитьОбласть("ЗаявкаНиз");
		ШапкаСписок  	 = Макет.ПолучитьОбласть("ШапкаСписок");
		СтрокаСписок 	 = Макет.ПолучитьОбласть("СтрокаСписок");
		
		
		// Получим таблицу установленных виз.
		ТаблицаПоВизам  = ТаблицаПоВизам(МассивСсылок);
		// И таблицу по табличной части документа.
		ТаблицаПоСписку = ТаблицаПоСписку(МассивСсылок);
		
		ПервыйДокумент   = Истина;
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл 
			
			ТекДокумент = ВыборкаИзЗапроса.Ссылка;
			// Отбор для таблиц по текущему документу.
			Отбор = Новый Структура;
			Отбор.Вставить("Ссылка", ТекДокумент); 			
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			// Заполяем параметры областей.
			Заявка.Параметры.Заполнить(ВыборкаИзЗапроса);			   
			БддсСтатьяПроект.Параметры.Заполнить(ВыборкаИзЗапроса);
			Плательщик.Параметры.Заполнить(ВыборкаИзЗапроса);
			
			ФормаОплаты 	= ?(ВыборкаИзЗапроса.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные, " НАЛИЧНЫХ ", " БЕЗНАЛИЧНЫХ ");
			ЗаявкаЗаголовок = СтрШаблон(НСтр("ru = 'ЗАЯВКА НА РАСХОДОВАНИЕ %1 ДЕНЕЖНЫХ СРЕДСТВ от'"), ФормаОплаты);
			
			Если ВыборкаИзЗапроса.СверхБюджета Тогда
				ТекстСверхБюджета = "ru = 'Да'";
			Иначе
				ТекстСверхБюджета = "ru = 'Нет'";
			КонецЕсли;
			
			СуммаДокумента = ?(ЗначениеЗаполнено(ВыборкаИзЗапроса.Сумма), ВыборкаИзЗапроса.Сумма, 0);
			
			Заявка.Параметры.Заголовок 	   = ЗаявкаЗаголовок;
			Заявка.Параметры.НомерДок 	   = бит_ОбщегоНазначенияКлиентСервер.ПолучитьНомерНаПечать(ТекДокумент);
			Заявка.Параметры.СверхБюджета  = НСтр(ТекстСверхБюджета);
			Заявка.Параметры.СуммаПрописью = бит_ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаДокумента, ВыборкаИзЗапроса.ВалютаДокумента);
			
			СтруктураПараметров = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ТекДокумент);
			// Если получатель - физическое лицо, тогда выводим его вместо контрагента.
			Если СтруктураПараметров.ЭтоПодотчет
				ИЛИ СтруктураПараметров.ЭтоВыплатаЗПРаботнику Тогда
				Плательщик.Параметры.Контрагент = ВыборкаИзЗапроса.ФизическоеЛицо;
			КонецЕсли;	
						
			// Выводим область "Заявка" в табличный документ.
			ТабличныйДокумент.Вывести(Заявка);
			Если Не ВыводитьСписок Тогда
				// Выводим область "БддсСтатьяПроект" в табличный документ.
				ТабличныйДокумент.Вывести(БддсСтатьяПроект);
			КонецЕсли;
			// Выводим область "Плательщик" в табличный документ.
			ТабличныйДокумент.Вывести(Плательщик);
			
			Если ЗначениеЗаполнено(ВыборкаИзЗапроса.Договор) Тогда
			
				// Выводим область "Договор" в табличный документ.
				Договор.Параметры.Заполнить(ВыборкаИзЗапроса);
				ТабличныйДокумент.Вывести(Договор);
			
			КонецЕсли; 
			
			Если ВыводитьСписок Тогда
				
				ТабличныйДокумент.Вывести(ШапкаСписок);
				// Заполняем и выводим в табличный документ строки по табличной части текущего документа.
				МассивСтрок = ТаблицаПоСписку.НайтиСтроки(Отбор);
				Для Каждого ТекСтрока Из МассивСтрок Цикл
					СтрокаСписок.Параметры.Заполнить(ТекСтрока);
					ТабличныйДокумент.Вывести(СтрокаСписок);
				КонецЦикла; 
              						
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ШапкаВиза);
			// Заполняем и выводим в табличный документ строки с визами для текущего документа.
			МассивСтрок = ТаблицаПоВизам.НайтиСтроки(Отбор);
			Для Каждого ТекСтрока Из МассивСтрок Цикл
				СтрокаВиза.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(СтрокаВиза);
			КонецЦикла;
			
			// Выводим область "ЗаявкаНиз" в табличный документ.
			ЗаявкаНиз.Параметры.Заполнить(ВыборкаИзЗапроса);
			ТабличныйДокумент.Вывести(ЗаявкаНиз);
			
		КонецЦикла; // Пока ВыборкаИзЗапроса.Следующий() Цикл
		
	КонецЕсли; // Если Не РезультатЗапроса.Пустой() Тогда
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуЗаявкиНаОплату()

// Процедура добавляет ветку в дерево видов операций.
//
// Параметры:
//  Дерево видов операций  - Дерево
//  СооответствиеКонтроль - Соответствие
//  ОбъектЗаполнения      - коллекция для заполнения пунктов подменю.
//  МассивИсключений      - массив исключений для данного пункта подменю.
//
Процедура ДобавитьВеткуДереваВидыОпераций(ДеревоВидыОпераций
										 ,СоответствиеКонтроль
										 ,ВидОперацииГруппа
										 ,ОбъектЗаполнения
										 ,МассивИсключений)

	Если Не ТипЗнч(МассивИсключений) = Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли; 
	
	// Добавляем строку верхнего уровня.
	СтрокаГруппа = ДеревоВидыОпераций.Строки.Добавить();
	СтрокаГруппа.ВидОперации = ВидОперацииГруппа;

	Для Каждого КлючЗначение Из ОбъектЗаполнения Цикл
		
		ЗначениеПеречисления = КлючЗначение.Значение;
		
		Если Не СоответствиеКонтроль[ЗначениеПеречисления] = Неопределено Тогда
			
			Если МассивИсключений.Найти(ЗначениеПеречисления) = Неопределено Тогда
				
				 НоваяСтрока = СтрокаГруппа.Строки.Добавить();
				 НоваяСтрока.ВидОперации = ЗначениеПеречисления;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла; // по объектам заполнения

КонецПроцедуры // ДобавитьВеткуДереваВидыОпераций()
 
Функция КонтекстПлатежногоДокумента(Объект)

	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеОпераций = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("СписаниеСРасчетногоСчета");
	
	Контекст = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(Контекст, Объект);
	
	Контекст.ВидОперации 		= СоответствиеОпераций.Получить(Объект.ВидОперации);
	Контекст.ПлатежнаяВедомость = Объект.ПлатежнаяВедомость;
	Контекст.Дата 				= Объект.Дата;
	Контекст.СуммаДокумента 	= Объект.Сумма;
	Контекст.Организация 		= Объект.Организация;
	
	Если ОперацииСФизЛицом().Найти(Объект.ВидОперации) = Неопределено Тогда
		Контекст.Контрагент = Объект.Контрагент;
	Иначе	
		Контекст.Контрагент = Объект.ФизическоеЛицо;
	КонецЕсли;  
	
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		НоваяСтрока = Контекст.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
		НоваяСтрока.СтавкаНДС 		   = СтрокаТаблицы.СтавкаНДС;
		НоваяСтрока.СуммаНДС  		   = СтрокаТаблицы.НДС;
	КонецЦикла; 
	
	Возврат Контекст;
	
КонецФункции

Функция ПараметрыОплаты(ВидДокумента, ПараметрыЗаявки)

	Результат = Новый Структура("ПереченьДокументов, ГотовКОплате, Ошибка"); 
		
	Результат.Вставить("НеФормироватьПлатежныеПоручения", ВидДокумента = "Списание");
	Результат.Вставить("НеФормироватьДокументыОплаты", 	  ВидДокумента = "Поручение");
	
	ГотовКОплате 	   = Истина;
	ТекстСообщения 	   = "";
	ПереченьДокументов = Новый ТаблицаЗначений;

	Если ПараметрыЗаявки.Статус <> Справочники.бит_СтатусыОбъектов.Заявка_Утверждена Тогда
		ТекстСообщения = НСтр("ru = 'Оплатить можно только утвержденный документ.'");
		ГотовКОплате = Ложь;
	КонецЕсли; 
	
	Если ГотовКОплате Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежнаяПозиция.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(БанковскиеСчета.ВалютаДенежныхСредств, ПлатежнаяПозиция.ДокументОснование.ВалютаДокумента) КАК ВалютаПлатежа,
		|	ПлатежнаяПозиция.ДокументОснование.ВалютаДокумента КАК ВалютаЗаявки
		|ПОМЕСТИТЬ ДокументыПланирования
		|ИЗ
		|	Документ.бит_ПлатежнаяПозиция КАК ПлатежнаяПозиция
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ПО ПлатежнаяПозиция.БанковскийСчетОрганизация = БанковскиеСчета.Ссылка
		|ГДЕ
		|	ПлатежнаяПозиция.ДокументОснование = &Заявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПланирования.Ссылка КАК ДокументПланирования,
		|	ВЫБОР
		|		КОГДА ДокументыПланирования.Ссылка.ДатаРасхода = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ТекущаяДата
		|		ИНАЧЕ ДокументыПланирования.Ссылка.ДатаРасхода
		|	КОНЕЦ КАК ДатаОплаты,
		|	ПланируемыйРасходДенежныхСредств.СуммаОстаток КАК СуммаКОплате,
		|	ДокументыПланирования.ВалютаПлатежа КАК ВалютаПлатежа,
		|	ДокументыПланирования.ВалютаПлатежа = ДокументыПланирования.ВалютаЗаявки КАК СуммаВВалютеПлатежа
		|ИЗ
		|	ДокументыПланирования КАК ДокументыПланирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(
		|				,
		|				ДокументПланирования В
		|					(ВЫБРАТЬ
		|						ДокументыПланирования.Ссылка КАК Ссылка
		|					ИЗ
		|						ДокументыПланирования КАК ДокументыПланирования)) КАК ПланируемыйРасходДенежныхСредств
		|		ПО ДокументыПланирования.Ссылка = ПланируемыйРасходДенежныхСредств.ДокументПланирования";
		
		Запрос.УстановитьПараметр("Заявка", 	 ПараметрыЗаявки.Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата", ОбщегоНазначения.ТекущаяДатаПользователя());
		
		РезультатЗапроса   = Запрос.Выполнить();
		ПереченьДокументов = РезультатЗапроса.Выгрузить();
		Если ПереченьДокументов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Нет неоплаченных платежных позиций.'"); 
			ГотовКОплате  = Ложь;
		КонецЕсли; 
	КонецЕсли; 	

	Результат.Вставить("ГотовКОплате", 		 ГотовКОплате);
	Результат.Вставить("ПереченьДокументов", ПереченьДокументов);
	Результат.Вставить("Ошибка", 			 ТекстСообщения);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодготовитьСписокПлатежныхПозиций(НастройкиПараметров, ПараметрыОплаты)
	
	Для каждого СтрокаТаблицы Из ПараметрыОплаты.ПереченьДокументов Цикл
		ПараметрыФормирования = бит_Казначейство.НовыеПараметрыФормированияПлатежныхДокументов();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, ПараметрыОплаты);
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, СтрокаТаблицы, 
			"ДатаОплаты, СуммаКОплате, ВалютаПлатежа, СуммаВВалютеПлатежа");

		ПараметрыФормирования.ПлатежныеПозиции.Добавить(СтрокаТаблицы.ДокументПланирования);
		НастройкиПараметров.Вставить(СтрокаТаблицы.ДокументПланирования, ПараметрыФормирования);
	КонецЦикла; 

КонецПроцедуры 

//СофтЛаб Начало 2019-08-10 #3418
Функция ВыполнитьПроверкуНаПревышениеЛимита(Объект, Отказ = Ложь) Экспорт 
			
	СверхБюджета = Ложь;
	
	СтатьяДДС = Объект.СтатьяОборотов; // Статья ДДС
	ВидСтатьи = Объект.СтатьяОборотов.ВидСтатьи; //Вид статьи Операционная (Выручка) / Инвестиционная деятельность (ИнвестиционнаяДеятельность) (СправочникСсылка.бит_ВидыСтатейОборотов)
	//РН бит_КонтрольныеЗначенияБюджетов

	Если ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
	
		Сценарий 				= ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У");
		СценарийКонтролируемый	= ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У");
	
	ИначеЕсли ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
	
		Сценарий 				= ПредопределенноеЗначение("Справочник.СценарииПланирования.Контракт_Инвест");
		СценарийКонтролируемый	= ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест");
		
	Иначе 
		
		Возврат СверхБюджета;
		
	КонецЕсли; 
	
	Если Объект.Распределение.Количество() > 0 Тогда
	
		СтрокаТЧ = Объект.Распределение[0];
		
		Аналитика1 			= ?(ЗначениеЗаполнено(СтрокаТЧ.Аналитика_1), СтрокаТЧ.Аналитика_1, Объект.Аналитика_1);
		Контрагент 			= Неопределено;
		ДоговорКонтрагента 	= Неопределено;
		
		Если ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			Контрагент 			= Объект.Контрагент;
			ДоговорКонтрагента 	= ?(ЗначениеЗаполнено(СтрокаТЧ.Аналитика_1), СтрокаТЧ.ДоговорКонтрагента, Объект.ДоговорКонтрагента);
		КонецЕсли;
		
	Иначе 
		
		Возврат СверхБюджета;
		
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Аналитика1", 				Аналитика1);
	СтруктураПараметров.Вставить("Контрагент", 				Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 		ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сценарий", 				Сценарий);
	СтруктураПараметров.Вставить("СценарийКонтролируемый", 	СценарийКонтролируемый);

	СтруктураПревышенияЛимита = РассчитатьСуммуПревышенияЛимита(СтруктураПараметров);
	
	Если СтруктураПревышенияЛимита.СуммаПревышенияЛимита < 0 Тогда
	
		ЦФО = СтруктураПревышенияЛимита.ЦФО;
		СтруктураЛимитов = ПолучитьОтклоненияПоЛимитамЗнРДС(ЦФО, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
		
		Если СтруктураЛимитов = Неопределено Тогда
			
			Если Объект.ДополнительныеСвойства.Свойство("ВыводитьСообщениеОбОшибкеЧерезВызватьИсключение")
				И Объект.ДополнительныеСвойства.ВыводитьСообщениеОбОшибкеЧерезВызватьИсключение Тогда
				Отказ = Истина;
				ВызватьИсключение НСтр("ru = 'Не найдены отклонения по лимитам ЗнРДС. Проведение документа отменено!'");
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не найдены отклонения по лимитам ЗнРДС. Проведение документа отменено!'"),,,,Отказ);
			КонецЕсли;
			Возврат Неопределено;
			
		КонецЕсли; 
		
		СуммаПревышенияЛимита = -СтруктураПревышенияЛимита.СуммаПревышенияЛимита;
		СуммаСценарийКонтроль = СтруктураПревышенияЛимита.СуммаСценарийКонтроль;
		
		Если СуммаПревышенияЛимита > СтруктураЛимитов.МинЗначение
			И СуммаПревышенияЛимита <= СтруктураЛимитов.МаксЗначение Тогда
			
			Если СуммаСценарийКонтроль = 0 Тогда
				Возврат Истина;
			КонецЕсли;
			
			ПроцентноеОтклонение = (СуммаПревышенияЛимита * 100 / СуммаСценарийКонтроль);
			Если ПроцентноеОтклонение > СтруктураЛимитов.Процент Тогда
			
				СверхБюджета = Истина;
				
			Иначе
				
				СверхБюджета = Ложь;
				
			КонецЕсли; 
			
		ИначеЕсли СуммаПревышенияЛимита > СтруктураЛимитов.МаксЗначение Тогда
			
			СверхБюджета = Истина;
			
		ИначеЕсли СуммаПревышенияЛимита > СтруктураЛимитов.МаксЗначение Тогда
			
			СверхБюджета = Ложь;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СверхБюджета;
	
КонецФункции

Функция РассчитатьСуммуПревышенияЛимита(СтруктураПараметров) Экспорт

	СтруктураПревышенияЛимита = Новый Структура();
	СтруктураПревышенияЛимита.Вставить("СуммаПревышенияЛимита", 	0);
	СтруктураПревышенияЛимита.Вставить("СуммаСценарийИсполнение", 	0);
	СтруктураПревышенияЛимита.Вставить("СуммаСценарийКонтроль", 	0);
	СтруктураПревышенияЛимита.Вставить("ПоВсемЦФО", 				Ложь);
	СтруктураПревышенияЛимита.Вставить("ЦФО", 						ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО) > 1
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ, ЛОЖЬ) КАК ПоВсемЦФО,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО) > 1
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|			ИНАЧЕ МАКСИМУМ(бит_КонтрольныеЗначенияБюджетовОбороты.ЦФО)
		|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК ЦФО,
		|	ЕСТЬNULL(СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот) - СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот), 0) КАК СуммаПревышенияЛимита,
		|	ЕСТЬNULL(СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийИсполнениеОборот), 0) КАК СуммаСценарийИсполнение,
		|	ЕСТЬNULL(СУММА(бит_КонтрольныеЗначенияБюджетовОбороты.СуммаСценарийКонтрольОборот), 0) КАК СуммаСценарийКонтроль
		|ИЗ
		|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты КАК бит_КонтрольныеЗначенияБюджетовОбороты
		|ГДЕ
		|	бит_КонтрольныеЗначенияБюджетовОбороты.Аналитика_1 = &Аналитика1
		|	И бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий = &Сценарий
		|	И бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый = &СценарийКонтролируемый
		|	И ВЫБОР
		|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ бит_КонтрольныеЗначенияБюджетовОбороты.Контрагент = &Контрагент
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ДоговорКонтрагента = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ бит_КонтрольныеЗначенияБюджетовОбороты.ДоговорКонтрагента = &ДоговорКонтрагента
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Аналитика1", 			СтруктураПараметров.Аналитика1);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 	?(СтруктураПараметров.Свойство("ДоговорКонтрагента") И ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента), СтруктураПараметров.ДоговорКонтрагента, Неопределено));
	Запрос.УстановитьПараметр("Контрагент", 			?(СтруктураПараметров.Свойство("Контрагент") И ЗначениеЗаполнено(СтруктураПараметров.Контрагент), СтруктураПараметров.Контрагент, Неопределено));
	Запрос.УстановитьПараметр("Сценарий", 				СтруктураПараметров.Сценарий);
	Запрос.УстановитьПараметр("СценарийКонтролируемый", СтруктураПараметров.СценарийКонтролируемый);
	
	РезультатЗапроса 		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПревышенияЛимита, ВыборкаДетальныеЗаписи);
	КонецЕсли;

	Возврат СтруктураПревышенияЛимита;
	
КонецФункции

Функция ПолучитьОтклоненияПоЛимитамЗнРДС(ЦФО, Знач Период) Экспорт

	СтруктураЛимитов = Новый Структура();
	СтруктураЛимитов.Вставить("МинЗначение", 0);
	СтруктураЛимитов.Вставить("МаксЗначение", 0);
	СтруктураЛимитов.Вставить("Процент", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС.МинЗначение КАК МинЗначение,
		|	ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС.МаксЗначение КАК МаксЗначение,
		|	ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС.Процент КАК Процент
		|ИЗ
		|	РегистрСведений.ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС.СрезПоследних(&Период, ЦФО = &ЦФО) КАК ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС.МинЗначение,
		|	ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС.МаксЗначение,
		|	ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС.Процент
		|ИЗ
		|	РегистрСведений.ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС.СрезПоследних(&Период, ЦФО = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)) КАК ок_ОтклоненияПоЛимитамЗаявокНаРасходованиеДС";
	
	Запрос.УстановитьПараметр("ЦФО", ЦФО);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураЛимитов, ВыборкаДетальныеЗаписи);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат СтруктураЛимитов;
	
КонецФункции
//СофтЛаб Конец 2019-08-10 #3418

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
Функция СформироватьНазначениеПлатежа(ДокументЗнРДС) Экспорт
	
	//Если ДокументЗнРДС.ок_СпособСоздания <> 1
	//	И ДокументЗнРДС.ок_СпособСоздания <> 4 Тогда
	//
	//	Возврат ДокументЗнРДС.НазначениеПлатежа;
	//
	//КонецЕсли; 
	
	НазначениеПлатежа = "";
	
	Если ТипЗнч(ДокументЗнРДС.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументЗнРДС.ДокументОснование.Услуги.Количество() > 0 Тогда
		
		НазначениеПлатежа = "Оплата за %1 по %2 по док. №%3 от %4, в т.ч. %5";
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
								ДокументЗнРДС.ДокументОснование.Услуги[0].Содержание,								//%1
							 	ДокументЗнРДС.ДоговорКонтрагента.Наименование,										//%2
							 	ДокументЗнРДС.ДокументОснование.НомерВходящегоДокумента,                            //%3
							 	Формат(ДокументЗнРДС.ДокументОснование.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"),	//%4
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%5
								);
		
		
	ИначеЕсли ТипЗнч(ДокументЗнРДС.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументЗнРДС.ДокументОснование.Товары.Количество() > 0 Тогда
		
		НазначениеПлатежа = "Оплата за %1 по %2 по док. №%3 от %4, в т.ч. %5";
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
								"ТМЦ",																				//%1
							 	ДокументЗнРДС.ДоговорКонтрагента.Наименование,										//%2
							 	ДокументЗнРДС.ДокументОснование.НомерВходящегоДокумента,                            //%3
							 	Формат(ДокументЗнРДС.ДокументОснование.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"),	//%4
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%5
								);
	//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Начало 2021-10-11 (#AT-2117278)
	ИначеЕсли ТипЗнч(ДокументЗнРДС.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументЗнРДС.ДокументОснование.АгентскиеУслуги.Количество() > 0 Тогда
		
		НазначениеПлатежа = "Оплата за %1 по %2 по док. №%3 от %4, в т.ч. %5";
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
								ДокументЗнРДС.ДокументОснование.АгентскиеУслуги[0].Содержание,								//%1
							 	ДокументЗнРДС.ДоговорКонтрагента.Наименование,										//%2
							 	ДокументЗнРДС.ДокументОснование.НомерВходящегоДокумента,                            //%3
							 	Формат(ДокументЗнРДС.ДокументОснование.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"),	//%4
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%5
								);
		
	//ОКЕЙ Завьялова Е.А.(ПервыйБИТ) Конец  2021-10-11 (#AT-2117278)
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2021-07-13 (ФР-МП-12)      
	ИначеЕсли ТипЗнч(ДокументЗнРДС.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументЗнРДС.ДокументОснование.ОбъектыСтроительства.Количество() > 0 Тогда
		
		НазначениеПлатежа = "Оплата за %1 по %2 по док. №%3 от %4, в т.ч. %5";
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
								"СМР",																				//%1
							 	ДокументЗнРДС.ДоговорКонтрагента.Наименование,										//%2
							 	ДокументЗнРДС.ДокументОснование.НомерВходящегоДокумента,                            //%3
							 	Формат(ДокументЗнРДС.ДокументОснование.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"),	//%4
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%5
								);
	ИначеЕсли ТипЗнч(ДокументЗнРДС.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		И ДокументЗнРДС.ДокументОснование.Оборудование.Количество() > 0 Тогда
		
		НазначениеПлатежа = "Оплата за %1 по %2 по док. №%3 от %4, в т.ч. %5";
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
								"оборудование",																		//%1
							 	ДокументЗнРДС.ДоговорКонтрагента.Наименование,										//%2
							 	ДокументЗнРДС.ДокументОснование.НомерВходящегоДокумента,                            //%3
							 	Формат(ДокументЗнРДС.ДокументОснование.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"),	//%4
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%5
								);
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2021-07-13 (ФР-МП-12)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-23 (#3842)
	ИначеЕсли ТипЗнч(ДокументЗнРДС.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		
		НазначениеПлатежа = "Возврат денежных средств по п/п %1 от %2, в т.ч. %3";
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
							 	ДокументЗнРДС.ДокументОснование.НомерВходящегоДокумента,                           	//%1
							 	Формат(ДокументЗнРДС.ДокументОснование.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"),	//%2
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%3
								);
								
	ИначеЕсли ТипЗнч(ДокументЗнРДС.ДокументОснование) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-07 (#4337)
		НазначениеПлатежаЗаполнено = Ложь;
		
		Если ДокументЗнРДС.Свойство("ДокументОбъект") Тогда
			
			Статьи = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Ок_НеЗаполнятьНазначениеПлатежаДляСтатей");
			
			Если ТипЗнч(Статьи) = Тип("СписокЗначений") Тогда
				
				Для Каждого Статья Из Статьи Цикл 
					
					МассивСтрок = ДокументЗнРДС.ДокументОбъект.Распределение.НайтиСтроки(Новый Структура("Ок_СтатьяОборотовБДР", Статья.Значение));
					
					Если МассивСтрок.Количество() > 0 Тогда
						НазначениеПлатежаЗаполнено = Истина;
						НазначениеПлатежа = ДокументЗнРДС.ДокументОбъект.НазначениеПлатежа;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не НазначениеПлатежаЗаполнено Тогда 
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-07 (#4337)
			НазначениеПлатежа = "Оплата по договору №%1 от %2, в т.ч. %3";
			НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
							 	ДокументЗнРДС.ДоговорКонтрагента.Номер,                           					//%1
							 	Формат(ДокументЗнРДС.ДоговорКонтрагента.Дата, "ДФ=dd.MM.yyyy"),						//%2
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%3
								);
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-07 (#4337)						
		КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-07 (#4337)
								
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-23 (#3842)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-05 (#4145)
	ИначеЕсли ТипЗнч(ДокументЗнРДС.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
		
		НазначениеПлатежа = "Оплата за работы (услуги) по %1 по док. №%2 от %3, в т.ч. %4";
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
								ДокументЗнРДС.ДоговорКонтрагента.Наименование,										//%1
							 	ДокументЗнРДС.ДокументОснование.НомерВходящегоДокумента,                            //%2
							 	Формат(ДокументЗнРДС.ДокументОснование.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"),	//%3
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%4
								);
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-05 (#4145)
	
	ИначеЕсли ТипЗнч(ДокументЗнРДС.ДокументОснование) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		АлгоритмПоВидуСтатьиОборотов = "";
		
		//Если вид – операционная деятельность
		Если ДокументЗнРДС.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
		
			АлгоритмПоВидуСтатьиОборотов = "работы (услуги)";
			
		//Если вид – инвестиционная деятельность
		ИначеЕсли ДокументЗнРДС.СтатьяОборотов.ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			
			СтатьяОборотов_ПриобретениеОборудования	= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокСтатейОборотов_ПриобритениеОборудования");
			СтатьяОборотов_ПриобретениеЗемли 		= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗемли");
			СтатьяОборотов_ПриобретениеЗданий 		= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗданий");
			
			Если ТипЗнч(СтатьяОборотов_ПриобретениеЗданий) = Тип("СписокЗначений")
				И СтатьяОборотов_ПриобретениеЗданий.НайтиПоЗначению(ДокументЗнРДС.СтатьяОборотов) <> Неопределено 
				ИЛИ ДокументЗнРДС.СтатьяОборотов = СтатьяОборотов_ПриобретениеЗданий Тогда
				АлгоритмПоВидуСтатьиОборотов = "здания";
			ИначеЕсли ТипЗнч(СтатьяОборотов_ПриобретениеЗемли) = Тип("СписокЗначений")
				И СтатьяОборотов_ПриобретениеЗемли.НайтиПоЗначению(ДокументЗнРДС.СтатьяОборотов) <> Неопределено 
				ИЛИ ДокументЗнРДС.СтатьяОборотов = СтатьяОборотов_ПриобретениеЗемли Тогда
				АлгоритмПоВидуСтатьиОборотов = "землю";
			ИначеЕсли ТипЗнч(СтатьяОборотов_ПриобретениеОборудования) = Тип("СписокЗначений")
				И СтатьяОборотов_ПриобретениеОборудования.НайтиПоЗначению(ДокументЗнРДС.СтатьяОборотов) <> Неопределено
				ИЛИ ДокументЗнРДС.СтатьяОборотов = СтатьяОборотов_ПриобретениеОборудования Тогда
				АлгоритмПоВидуСтатьиОборотов = "оборудование";
			Иначе
				АлгоритмПоВидуСтатьиОборотов = "работы (услуги)";
			КонецЕсли;
			
		КонецЕсли;
		
		НазначениеПлатежа = "Оплата за %1 по %2, в т.ч. %3";
		НазначениеПлатежа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазначениеПлатежа, 
								АлгоритмПоВидуСтатьиОборотов,														//%1
							 	ДокументЗнРДС.ДоговорКонтрагента.Наименование,										//%2
							 	?(ДокументЗнРДС.НДС = 0, "Без НДС", "НДС " + ДокументЗнРДС.НДС)						//%3
								);
								
	КонецЕсли;
	
	Возврат НазначениеПлатежа
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
Процедура ЗаполнитьКодНазначенияПлатежа(Объект) Экспорт
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-06-21 (#4232)
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-17 (#3816)
	////Если ТипЗнч(Объект) <> Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредств") Тогда
	//Если ТипЗнч(Объект) <> Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредств") 
	//	ИЛИ ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура")
	//		И Объект.Свойство("Ссылка")
	//		И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-17 (#3816)
	Если НЕ (ТипЗнч(Объект) = Тип("ДокументОбъект.бит_ЗаявкаНаРасходованиеСредств") 
		ИЛИ ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура")
			И Объект.Свойство("Ссылка")
			И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств")) Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-06-21 (#4232)
		Возврат;
	КонецЕсли; 
	
	Если Объект.Контрагент.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		Если Объект.ок_КодНазначенияПлатежа <> 0 Тогда
			Объект.ок_КодНазначенияПлатежа = 0;
		КонецЕсли;
		Возврат;
	КонецЕсли; 
	
	ТекстОшибки = "";
	Если Объект.Распределение.Количество() < 2 Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("СтатьяБДДС", 	Объект.СтатьяОборотов);
		СтруктураПараметров.Вставить("СтатьяБДР", 	Объект.Ок_СтатьяОборотовБДР);
		
		КодВидаДоходовПоЗнРДС = ОК_ОбщегоНазначения.ПолучитьКодВидаДоходовПоСтруктуреПараметров(СтруктураПараметров, ТекстОшибки);
		
	Иначе
		
		ТаблицаРаспределение = Объект.Распределение.Выгрузить(,"СтатьяОборотов, Ок_СтатьяОборотовБДР");
		ТаблицаРаспределение.Свернуть("СтатьяОборотов, Ок_СтатьяОборотовБДР");
		
		КодВидаДоходовПоЗнРДС = ОК_ОбщегоНазначения.ПолучитьКодВидаДоходовПоТаблицеСтатей(ТаблицаРаспределение, ТекстОшибки);
		
	КонецЕсли; 
	
	Если ТекстОшибки <> "" Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
	ИначеЕсли КодВидаДоходовПоЗнРДС <> Неопределено 
		И КодВидаДоходовПоЗнРДС <> 0 Тогда
		
		Если Объект.ок_КодНазначенияПлатежа <> КодВидаДоходовПоЗнРДС Тогда
			Объект.ок_КодНазначенияПлатежа = КодВидаДоходовПоЗнРДС;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ок_КодНазначенияПлатежа <> 0 Тогда
		Объект.ок_КодНазначенияПлатежа = 0;
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-18 (#3842)
Функция ВыполнитьПроверкуНаНаличиеДЗ(Объект) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
		|	ХозрасчетныйОстатки.Субконто3 КАК ДокументРасчетов,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт КАК СуммаОстатокКтВВалюте
		|ПОМЕСТИТЬ ВТ_ОстаткиПоБУ_Общая
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В (&СписокСчетов),
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто2.бит_СтадияДоговора <> ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Закрыт)
		|	И ХозрасчетныйОстатки.Субконто2.бит_СтадияДоговора <> ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтадийДоговоров.Замечания)
		|	И ХозрасчетныйОстатки.Субконто2.Владелец.бит_Статус <> ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.БлокированыОплаты)
		|	И ХозрасчетныйОстатки.Субконто2.Владелец.бит_Статус <> ЗНАЧЕНИЕ(Перечисление.бит_СтатусыПоставщиковAX.БлокированоВсе)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоБУ.Организация КАК Организация,
		|	ОстаткиПоБУ.Контрагент КАК Контрагент,
		|	ОстаткиПоБУ.ДокументРасчетов КАК ДокументРасчетов
		|ПОМЕСТИТЬ ВТ_ДокументыРасчетов
		|ИЗ
		|	ВТ_ОстаткиПоБУ_Общая КАК ОстаткиПоБУ
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоБУ.Организация,
		|	ОстаткиПоБУ.Контрагент,
		|	ОстаткиПоБУ.ДокументРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыРасчетов.Организация КАК Организация,
		|	ДокументыРасчетов.Контрагент КАК Контрагент,
		|	СУММА(ВЫБОР
		|			КОГДА СтатусыОбъектов.Статус В (&СтатусыЗаявокДляИсключений)
		|				ТОГДА ЕСТЬNULL(ПланируемыйРасходДенежныхСредств.СуммаРегл, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаСформированныхЗнРДС
		|ПОМЕСТИТЬ ВТ_ЗнРДС_ПоКонтрагенту
		|ИЗ
		|	ВТ_ДокументыРасчетов КАК ДокументыРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК ЗаявкаНаРасходованиеСредств
		|		ПО ДокументыРасчетов.ДокументРасчетов = ЗаявкаНаРасходованиеСредств.ДокументОснование
		|			И (ДокументыРасчетов.ДокументРасчетов <> НЕОПРЕДЕЛЕНО)
		|			И (НЕ ЗаявкаНаРасходованиеСредств.ПометкаУдаления)
		|			И (ЗаявкаНаРасходованиеСредств.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств КАК ПланируемыйРасходДенежныхСредств
		|		ПО (ЗаявкаНаРасходованиеСредств.Ссылка = ПланируемыйРасходДенежныхСредств.Регистратор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО (ЗаявкаНаРасходованиеСредств.Ссылка = СтатусыОбъектов.Объект)
		|			И (СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
		|ГДЕ
		|	ПланируемыйРасходДенежныхСредств.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ДокументыРасчетов.ДокументРасчетов <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыРасчетов.Организация,
		|	ДокументыРасчетов.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток_ПоКонтрагенту,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт_ПоКонтрагенту
		|ПОМЕСТИТЬ ВТ_ОстаткиПоБУ_Контрагент
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В ИЕРАРХИИ (&СписокСчетовДЗ),
		|			&ВидыСубконтоДЗ,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Организация,
		|	ХозрасчетныйОстатки.Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(-1 * ОстаткиПоБУ_Контрагент.СуммаОстаток_ПоКонтрагенту, 0) КАК СвернутоеСальдо,
		|	ЕСТЬNULL(ЗнРДС_ПоКонтрагенту.СуммаСформированныхЗнРДС, 0) КАК СуммаСформированныхЗнРДС,
		|	ЕСТЬNULL(-1 * ОстаткиПоБУ_Контрагент.СуммаОстаток_ПоКонтрагенту, 0) - ЕСТЬNULL(ЗнРДС_ПоКонтрагенту.СуммаСформированныхЗнРДС, 0) КАК ДоступноеСальдо,
		|	&СуммаПоДокументу КАК СуммаПоДокументу,
		|	ЕСТЬNULL(-1 * ОстаткиПоБУ_Контрагент.СуммаОстаток_ПоКонтрагенту, 0) - ЕСТЬNULL(ЗнРДС_ПоКонтрагенту.СуммаСформированныхЗнРДС, 0) < &СуммаПоДокументу КАК НаличиеДЗ
		|ИЗ
		|	ВТ_ОстаткиПоБУ_Контрагент КАК ОстаткиПоБУ_Контрагент
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЗнРДС_ПоКонтрагенту КАК ЗнРДС_ПоКонтрагенту
		|		ПО ОстаткиПоБУ_Контрагент.Организация = ЗнРДС_ПоКонтрагенту.Организация
		|			И ОстаткиПоБУ_Контрагент.Контрагент = ЗнРДС_ПоКонтрагенту.Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", 				Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
	Запрос.УстановитьПараметр("Период", 					?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("СуммаПоДокументу", 			Объект.СуммаРегл);
	
	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты"));
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры"));
	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами"));
	
	ВидыСубконтоДЗ = Новый Массив();
	ВидыСубконтоДЗ.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты"));
	
	Запрос.УстановитьПараметр("ВидыСубконто", 				ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыСубконтоДЗ", 			ВидыСубконтоДЗ);
	Запрос.УстановитьПараметр("СписокСчетов", 				Обработки.ок_ФормированиеЗнРДС.ПолучитьСписокСчетов());
	Запрос.УстановитьПараметр("СписокСчетовДЗ", 			Обработки.ок_ФормированиеЗнРДС.ПолучитьСписокСчетовДЗ());
	Запрос.УстановитьПараметр("СтатусыЗаявокДляИсключений", Обработки.ок_ФормированиеЗнРДС.ПолучитьСтатусыЗаявокДляИсключений());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат НЕ ВыборкаДетальныеЗаписи.НаличиеДЗ;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-18 (#3842)
#КонецОбласти

#КонецЕсли

// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
Функция ПолучитьПризнакПересчетаКурсаПоДоговорамРаспределения(ДоговорыРаспереления, ОсновнойДоговор) Экспорт
	
	НуженПересчет = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ДоговорыРаспереления) И ЗначениеЗаполнено(ОсновнойДоговор) Тогда
		
		НуженПересчет = ОсновнойДоговор.Ок_ПересчетКурса;
		
	Иначе	
		
		Для каждого ДоговорРаспереления Из ДоговорыРаспереления Цикл
			
			Если НЕ ЗначениеЗаполнено(ДоговорРаспереления) Тогда
				Продолжить;	
			КонецЕсли;
			
			Если НуженПересчет Тогда
				Прервать;	
			КонецЕсли;
			
			НуженПересчет = ДоговорРаспереления.Ок_ПересчетКурса;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат НуженПересчет;
	
КонецФункции
// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)
