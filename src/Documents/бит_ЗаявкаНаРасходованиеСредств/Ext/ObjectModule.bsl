#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мИгнорироватьЗапись Экспорт; // Хранит признак того, что статус в данной транзакции уже установлен.

Перем АлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.
 
Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.

Перем мПометкаИзГрафикаПлатажей Экспорт; // Опеределяет выполнение пометки на удаление из графика платежей.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения регистра ПланируемоеПоступлениеДенежныхСредств.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.
 
#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив(); 
	
	// Получим настройки программы.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	// +СБ. Широков Николай. 2014-09-08. ТЗ "Казначейство" 2.2.2.2.
	//СтруктураПараметров.Вставить("ЦФО"		  , ЦФО); 	
	// -СБ. Широков Николай
	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата , , СтруктураПараметров, "Ошибки");
	
	ИмяКонтейнера 	    = ?(Распределение.Количество() > 1, "Распределение.", "");
	СтруктураПараметров = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ЭтотОбъект);
	
	// +СБ. Широков Николай. 2014-09-08. ТЗ "Казначейство" 2.2.2.2.
	//ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "ЦФО");
	// -СБ. Широков Николай
	ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "СтатьяОборотов");
	ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "Сумма");
	//СофтЛаб Начало 2019-09-05 #3423
	//ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "СтавкаНДС");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-07 (#3816)
	//Если ок_СпособСоздания <> 1 Тогда
	ОперацииБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС();
	БезНДС 		   = ОперацииБезНДС.Найти(ВидОперации) <> Неопределено;
	
	Если ок_СпособСоздания <> 1 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-11-17 (#3842)
		И ок_СпособСоздания <> 10
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-11-17 (#3842)
		И НЕ БезНДС Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-07 (#3816)
		ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "СтавкаНДС");
	КонецЕсли; 
	//СофтЛаб Конец 2019-09-05 #3423
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3065)
	Если Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") ИЛИ
		Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования")
		Тогда
		ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "Ок_СтатьяОборотовБДР");
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3065)
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма 
		ИЛИ ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита Тогда
		
		ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "ВидПлатежаПоКредитамЗаймам");
	КонецЕсли;
	
	Если СтруктураПараметров.ДоговорОбязателен Тогда
		ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + "ДоговорКонтрагента");	
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ТретьеЛицоНеобходимо Тогда
		НепроверяемыеРеквизиты.Добавить("Получатель");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.КонтрагентОбязателен Тогда
		НепроверяемыеРеквизиты.Добавить("Контрагент");
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ФизическоеЛицоОбязателен Тогда
		НепроверяемыеРеквизиты.Добавить("ФизическоеЛицо");	
	КонецЕсли; 	
	
	Если ВидОперации <> Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДивидендов Тогда
		НепроверяемыеРеквизиты.Добавить("КонтрагентЮрФизЛицо");	
	КонецЕсли;
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-03 (#ТП_БП05_ФР07)
	Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику Тогда
		НепроверяемыеРеквизиты.Добавить("ФизическоеЛицо");	
	КонецЕсли; 	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-03 (#ТП_БП05_ФР07)
	
	// Обязательные измерения из разряда дополнительных.
	Для Каждого КлючИЗначение Из мНастройкиИзмерений Цикл
	
		ИмяИзмерения = КлючИЗначение.Ключ;
		Настройка    = КлючИЗначение.Значение;
		
		Если Настройка.Обязательное Тогда 			
			ТекстСообщения = "Не заполнено значение реквизита """ + Настройка.Синоним + """.";
		    ПроверяемыеРеквизиты.Добавить(ИмяКонтейнера + ИмяИзмерения);			
		КонецЕсли; 
	
	КонецЦикла;
	
	// Проверки для заявки введенной на основании прогноза.
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
		
		ИменаНастроек = ПланыВидовХарактеристик.бит_НастройкиПрограммы;
		
		// Проверим дату расхода.
		КонтролироватьОтклонениеДатыРасхода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,
																	ИменаНастроек.КонтролироватьОтклонениеДатыПлатежаВЗаявкахОтПрогнозаПлатежа);
		Если КонтролироватьОтклонениеДатыРасхода Тогда
			РазрешенноеОтклонение = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,
														ИменаНастроек.ОтклонениеДатыПлатежаВЗаявкахОтПрогнозаПлатежа);
			Отклонение = бит_Бюджетирование.РазностьДат(ДатаРасхода, ДокументОснование.ДатаРасхода, "День"); 
			
			Если бит_ОбщегоНазначения.МодульЧисла(Отклонение) > РазрешенноеОтклонение Тогда
				Пояснение 	   = НСтр("ru='Дата расхода в заявке превышает разрешенное отклонение от даты расхода прогноза платежа.'");
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,"Корректность", НСтр("ru = 'Дата расхода'"),,,Пояснение); 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаРасхода", , Отказ); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП Тогда
		НепроверяемыеРеквизиты.Добавить("ПеречислениеЗаработнойПлаты.Ведомость");
	КонецЕсли;
	
	Если СтруктураПараметров.ДоговорНеобходим Тогда
		ВыполнитьВалютныйКонтрольДоговоров(Отказ);
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	бит_ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	// +СБ. Широков Николай. 2014-10-24. Доработка #1061
	Если СБ_ИдентификаторЗаписиAXAPTA = 0 Тогда
		//Документ введен вручную
		Если НЕ СБ_КазначействоСервер.ПрофильРазноскиСоответствуетВидуОперации(СБ_ПрофильРазноски, ВидОперации) Тогда
			ТекстСообщения = НСтр("ru='Профиль разноски не соответствует виду операции заявки!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	// -СБ. Широков Николай	

	// Установка настроек обязательности реквизитов.
	бит_Визирование.ЗаполнитьТекущийСтатус(ЭтотОбъект, Справочники.бит_СтатусыОбъектов.Заявка_Черновик);
	СтатусДляПоискаНастроек = ДополнительныеСвойства.ТекущийСтатус;
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// +СБ. Широков Николай. 2014-10-05. Оптимизация
	Если ДополнительныеСвойства.Свойство("НеВыполнятьДополнительныеДействияПриОтменеПроведения") Тогда
		Возврат;
	КонецЕсли;
	// -СБ. Широков Николай
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-02 (#3816)
	Для каждого СтрокаТаблицы Из Распределение Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИД) Тогда
			СтрокаТаблицы.ИД = Строка(Новый УникальныйИдентификатор());
		КонецЕсли; 
	КонецЦикла;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-02 (#3816)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	бит_Визирование.ЗаполнитьТекущийСтатус(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("Проведен",	  Проведен);
	ДополнительныеСвойства.Вставить("РежимЗаписи",РежимЗаписи);
	ДополнительныеСвойства.Вставить("ЭтоНовый",	  ЭтоНовый());
	ДополнительныеСвойства.Вставить("УстановкаПометкиУдаления", ПометкаУдаления <> Ссылка.ПометкаУдаления);
			
	ОчиститьНеиспользуемыеРеквизиты();
	
	Реквизиты = Новый Структура("Организация, ФизическоеЛицо"); 
	ЗаполнитьЗначенияСвойств(Реквизиты, ЭтотОбъект);
	
	Документы.бит_ЗаявкаНаРасходованиеСредств.ЗаполнитьНазначенныеАналитикиТаблицыИзШапки(Распределение, Реквизиты);
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДивидендов
		И НЕ ЗначениеЗаполнено(КонтрагентЮрФизЛицо) Тогда
		Контрагент 		= Справочники.Контрагенты.ПустаяСсылка();
		ФизическоеЛицо 	= Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-15 (#3537)
	//Если ок_СпособСоздания <> 1
	//	И НЕ ЗначениеЗаполнено(СБ_БанковскийСчетКонтрагента) Тогда
	//	
	//	//Определяем банковский счет
	//	ОсновнойСчетДоговора = ДоговорКонтрагента.ок_БанковскиеСчета.Найти(Истина, "Основной");
	//	
	//	Если ДоговорКонтрагента.ок_БанковскиеСчета.Количество() <> 0  Тогда
	//		Если ДоговорКонтрагента.ок_БанковскиеСчета.Количество()=1 Тогда
	//			СБ_БанковскийСчетКонтрагента = ДоговорКонтрагента.ок_БанковскиеСчета[0].БанковскийСчет;
	//		ИначеЕсли ДоговорКонтрагента.ок_БанковскиеСчета.Количество() > 1  и ОсновнойСчетДоговора <> Неопределено Тогда
	//			СБ_БанковскийСчетКонтрагента = ОсновнойСчетДоговора.БанковскийСчет;	
	//		Иначе 
	//			СБ_БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();	
	//		КонецЕсли;
	//	ИначеЕсли ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
	//		СБ_БанковскийСчетКонтрагента = Контрагент.ОсновнойБанковскийСчет; 
	//	Иначе 
	//		СБ_БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	//	КонецЕсли;
	//
	//КонецЕсли; 
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-15 (#3537)
	Если НЕ ЗначениеЗаполнено(СБ_БанковскийСчетКонтрагента) 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
		И НЕ Отказ
		И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)
		И (НЕ ДополнительныеСвойства.Свойство("НеЗаполнятьБанкоскийСчетПриЗаписи") 
			ИЛИ ДополнительныеСвойства.НеЗаполнятьБанкоскийСчетПриЗаписи <> Истина) Тогда
		СБ_БанковскийСчетКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьБанковскийСчетКонтрагента(ДоговорКонтрагента, Контрагент);
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
	Если НЕ Отказ
		И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения
		И НЕ ЗначениеЗаполнено(ок_КодНазначенияПлатежа) 
		И (НЕ ДополнительныеСвойства.Свойство("ИнтерактивноеРедактированиеДокумента") 
			ИЛИ ДополнительныеСвойства.ИнтерактивноеРедактированиеДокумента <> Истина) Тогда
			
		Документы.бит_ЗаявкаНаРасходованиеСредств.ЗаполнитьКодНазначенияПлатежа(ЭтотОбъект);
			
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("ЦФО",ЦФО);

	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата,,СтруктураПараметров,"Ошибки");	
	
	ПересчитатьСуммы();
	
	// ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-26 (#4412)
	АктуализироватьНазначениеПлатежа();
	// ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-26 (#4412)
	
    Если ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей 
        И Не мПометкаИзГрафикаПлатажей Тогда
        // Проверим возможность выполнения действия.
        бит_Казначейство.ПроверитьВозможностьЗаписиДокументаПланирования(ЭтотОбъект, Отказ);
    КонецЕсли;
    
	Если Не Отказ Тогда
	    ТекущийСтатус = ДополнительныеСвойства.ТекущийСтатус;
		Если ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.Заявка_Оплачена 
			// +СБ. Широков Николай. 2014-10-06. ТЗ "Казначейство" 2.2.2.4.
			ИЛИ ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Рабочая
			// -СБ. Широков Николай			
			ИЛИ ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.Заявка_Закрыта
			ИЛИ ПометкаУдаления <> Ссылка.ПометкаУдаления  Тогда
			 
			 СинхронизироватьПлатежныеПозиции();
		КонецЕсли;
		
		// Изменим платежные позиции.
		ИзменитьПлатежныеПозицииПоЗаявке();
	КонецЕсли;
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	Заголовок = НСтр("ru = 'Проверка прав доступа:'"); 
	Если РольДоступна("бит_рлс_ФинансистЦФО") Тогда
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект, Распределение,"Распределение",Заголовок,Отказ);
	Иначе
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект, Распределение,"Распределение",Заголовок,Отказ);
	КонецЕсли;

	//БИТ АКриштопов ++ Копия кода для заполнения
	//+Сундукова 21.04.2016 №2352
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		Исполнитель 			= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный 			= Исполнитель;
	КонецЕсли;
	//-Сундукова 21.04.2016 №2352
	//БИТ АКриштопов -- №2352
	
	//+Сучков 18.07.2016 №2563
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		ЗаполнитьРеквизитОтветственный();//+ Сенин 21.07.2016 №2576
		//+ Сенин 09.09.2016 №2652
		бит_БК_ПроверитьНаДубль();
		//- Сенин 09.09.2016 №2652
	КонецЕсли;
	//-Сучков 18.07.2016 №2563
	
	//СофтЛаб Начало 2019-08-10 #3418
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		//И НЕ СверхБюджета 
		//И мТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Рабочая")
		Тогда
		
		АналитикаФВБЗаполнена = Ложь;
		Для каждого СтрокаТЧ Из ЭтотОбъект.Распределение Цикл
			Если ТипЗнч(СтрокаТЧ.Аналитика_1) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") 
				И ЗначениеЗаполнено(СтрокаТЧ.Аналитика_1) Тогда
				АналитикаФВБЗаполнена = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если АналитикаФВБЗаполнена Тогда
		
			пСверхБюджета = Документы.бит_ЗаявкаНаРасходованиеСредств.ВыполнитьПроверкуНаПревышениеЛимита(ЭтотОбъект, Отказ);
			
			Если НЕ Отказ
				И пСверхБюджета <> Неопределено
				И СверхБюджета <> пСверхБюджета Тогда
				СверхБюджета = пСверхБюджета;
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли;
	//СофтЛаб Конец 2019-08-10 #3418
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-18 (#3842)
	Если ок_СпособСоздания = 4 Тогда
		
		пГруппа = "Служебные элементы Не сопоставлено";
		пИмяНастройки = "Контрагенты";
		Контрагент_НеСопоставлено = РегистрыСведений.бит_ок_НастройкиМеханизмаИмпортаДанных.Получить(Новый Структура("Группа, ИмяНастройки", пГруппа, пИмяНастройки)).Значение;
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Организация)
			И ЗначениеЗаполнено(ЭтотОбъект.Контрагент) 
			И ЭтотОбъект.Контрагент <> Контрагент_НеСопоставлено
			И (ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику")
				ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю")
				ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПрочиеРасчетыСКонтрагентами")) Тогда
				
			Если ок_НаличиеДЗ = Документы.бит_ЗаявкаНаРасходованиеСредств.ВыполнитьПроверкуНаНаличиеДЗ(ЭтотОбъект) Тогда
				
				ок_НаличиеДЗ = НЕ ок_НаличиеДЗ;
					
			КонецЕсли;
			
		ИначеЕсли ок_НаличиеДЗ Тогда 
			
			ок_НаличиеДЗ = НЕ ок_НаличиеДЗ;
			
		КонецЕсли;
		
	КонецЕсли;	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-18 (#3842)
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-17 (#НТП_БП12_ФР04)
	ок_НалоговыйАгент = ДоговорКонтрагента.УчетАгентскогоНДС;
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-17 (#НТП_БП12_ФР04)
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	// +СБ. Широков Николай. 2014-10-05. Оптимизация
	Если ДополнительныеСвойства.Свойство("НеВыполнятьДополнительныеДействияПриОтменеПроведения") Тогда
		Возврат;
	КонецЕсли;
	// -СБ. Широков Николай	
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	//ОКЕЙ Калюжный А.Ю.(СофтЛаб) 2019-09-27 Начало (#3488)
	ИтогСумма = Распределение.Итог("Сумма");
	Если ИтогСумма <> Сумма Тогда
		Текст = "Сумма в строках ТЧ " + ИтогСумма + " не равна итоговой сумме документа " + Сумма;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	//ОКЕЙ Калюжный А.Ю.(СофтЛаб) 2019-09-27 Конец (#3488)	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
		УстановитьСтатус(ДополнительныеСвойства.РежимЗаписи);
	КонецЕсли; 

	Если ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОбновитьНазначениеПлатежаВСвязанныхДокументах();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, "", ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	//СофтЛаб Начало 2019-09-21 #3486
	//Если НЕ Отказ Тогда
	//	
	//	ТекстОшибки = "";
	//	Если НЕ ВыполнитьПроверкуСтатусаБлокировкиОплат(ТекстОшибки) Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	//		Отказ = Истина;
	//	КонецЕсли;
	//
	//КонецЕсли; 
	//СофтЛаб Конец 2019-09-21 #3486
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3065)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-18 (#3269)		
	Если ЗначениеЗаполнено(Сценарий) И
		(Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") ИЛИ
		Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования")) И
		Дата >= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ДатаНачалаРаботыНовойЦелевойСхемыДвиженийПоБК",Дата('39990101'))		 
	Тогда  
		
		мНомераСтрокСПустымиФВБ = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДокТЧ.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК ДокТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК ФВБ
		|		ПО ДокТЧ.Аналитика_1 = ФВБ.Ссылка
		|ГДЕ
		|	ДокТЧ.Ссылка = &Ссылка
		|	И ФВБ.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РЗ_ПроверкаНомераЗаявки = Запрос.Выполнить();	
		
		Если Не ЗначениеЗаполнено(Аналитика_1) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен реквизит № заявки'"),,"Аналитика_1","Объект");
			Отказ = Истина;			
		ИначеЕсли НЕ РЗ_ПроверкаНомераЗаявки.Пустой() Тогда 
			НомераСтрок = "";
			ВыборкаДетальныеЗаписи = РЗ_ПроверкаНомераЗаявки.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НомераСтрок = "," + НомераСтрок;
			КонецЦикла;
			
			ТекстОшибки = НСтр("ru = 'Не заполнен реквизит № заявки в следующих строках: %1'");
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Сред(НомераСтрок,2));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			Отказ = Истина;
			
		Иначе
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-18 (#3269)
			ПроверитьСоответствиеСценарияПоВидуСтатейТЧ(Отказ);
			ПроверитьСоответствиеСтатейБДРИБДДСТЧ(Отказ);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-18 (#3269)
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-18 (#3269)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3065)	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
	#Область ТиповойКод
	//СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.Сценарий.Валюта, СтруктураШапкиДокумента.Дата);		
	#КонецОбласти
	// Изменена дата получения курсов валюты с "Дата" на "ДатаРасхода"
	СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.Сценарий.Валюта, СтруктураШапкиДокумента.ДатаРасхода);		
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
	СтруктураШапкиДокумента.Вставить("КурсСценарий"     , СтруктураСценарий.Курс);
	СтруктураШапкиДокумента.Вставить("КратностьСценарий", СтруктураСценарий.Кратность);
	
	ТаблицаРасход = ПодготовитьТаблицуПланируемыйРасход();
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-10 (#ТП_БП05_ФР07)
	ТаблицаДвиженияРасход = ок_ПодготовитьТаблицуДвиженийРасход();
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-10 (#ТП_БП05_ФР07)

	
	// Выполним движения.
	Если НЕ Отказ Тогда
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
		#Область ТиповойКод
		//СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
		#КонецОбласти
		// Изменена дата получения курсов валюты с "Дата" на "ДатаРасхода"
		СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, ДатаРасхода, Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
		
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-10 (#ТП_БП05_ФР07)
		#Область ТиповойКод
		//ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураКурсыВалют,ТаблицаРасход,Отказ,"");
		#КонецОбласти
		// Добавлены движения с видом расход в регистре Планируемый расход денежных средств
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураКурсыВалют, ТаблицаРасход, Отказ, "", ТаблицаДвиженияРасход);
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-10 (#ТП_БП05_ФР07)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-08 (#3065)
		//ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаРасход,Отказ,"");
		Если (Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") ИЛИ
			Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования")) И
			Дата >= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ДатаНачалаРаботыНовойЦелевойСхемыДвиженийПоБК",Дата('39990101'))
			Тогда
			ДвиженияПоРегистрамБК(СтруктураШапкиДокумента,Отказ);
		Иначе
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-08 (#3065)
			ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаРасход,Отказ,"");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-08 (#3065)
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-08 (#3065)		
	КонецЕсли;
	
	БылПроведен = ДополнительныеСвойства.Проведен;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
		
	// Заполним перечень виз.
	Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ БылПроведен Тогда
		// +СБ. Широков Николай. 2014-09-05. "Казначейство" 2.2.1.4.
		//СтруктураПараметров = Новый Структура;
		//СтруктураПараметров.Вставить("СтруктурноеПодразделение", Организация);
		//СтруктураПараметров.Вставить("ЦФО"					   , ЦФО);		
		//бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);		
		//// +СБ. Михайлов Никита. 2014-05-08. Загрузка платежных документов AXAPTA
		//Если НЕ ЭтотОбъект.ДополнительныеСвойства.Свойство("СБ_ЗагрузкаПД_AXAPTA") Тогда
		//// -СБ. Михайлов Никита
		Если НЕ СБ_СгенерированАвтоматическиAXAPTA Тогда
		// -СБ. Широков Николай
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение", Организация);
			СтруктураПараметров.Вставить("ЦФО"					   , ЦФО);	
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-07 (#4084)
			Если ДополнительныеСвойства.Свойство("ТребуетсяСогласованиеБГ") И ДополнительныеСвойства.ТребуетсяСогласованиеБГ = Истина Тогда
				
				Свойство_ТребуетсяСогласованиеБГ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Требуется согласование БГ");
				Если ЗначениеЗаполнено(Свойство_ТребуетсяСогласованиеБГ) Тогда					
					ЗаписьРегистра = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					ЗаписьРегистра.Объект = Ссылка;
					ЗаписьРегистра.Свойство = Свойство_ТребуетсяСогласованиеБГ;
					ЗаписьРегистра.Значение = Истина;
					ЗаписьРегистра.Записать();
				КонецЕсли;
				
			КонецЕсли;
			//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-07 (#4084)
			бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);
		// +СБ. Широков Николай. 2014-09-05. "Казначейство" 2.2.1.4.
		ИначеЕсли НЕ ЭтотОбъект.ДополнительныеСвойства.Свойство("СБ_ЗагрузкаПД_AXAPTA") Тогда
			СБ_КазначействоСервер.ПроставитьСогласующееРешениеПоВизамЗаявки(Ссылка, Дата);
		// -СБ. Широков Николай
		// +СБ. Михайлов Никита. 2014-05-08. Загрузка платежных документов AXAPTA
		КонецЕсли;
		// -СБ. Михайлов Никита		
	КонецЕсли;
	
	УстановитьСтатус(РежимЗаписиДокумента.Проведение);
	
	СформироватьПлатежнуюПозицию();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-07 (#4242)
	ПользовательскоеУсловие_РаботаСДокументомЗнРДСВОграниченномРежиме = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("РаботаСДокументомЗнРДСВОграниченномРежиме"); 
	
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ТекущийОбъект", Ссылка);
	РаботаСДокументомЗнРДСВОграниченномРежиме = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(ПользовательскоеУсловие_РаботаСДокументомЗнРДСВОграниченномРежиме,ПараметрыУсловия);
	
	Если РаботаСДокументомЗнРДСВОграниченномРежиме 
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда 
		
		МаксимальнаяСуммаПредоплаты = 0;
		ОбщаяСуммаСозданныхДокументов = 0;
		ВалютаДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СУММА(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВВалютеСНДС) КАК СуммаВВалютеСНДС,
		|	бит_ФормаВводаБюджетаБДДС.Ссылка.ОК_РазмерПредоплаты КАК РазмерПредоплаты,
		|	МАКСИМУМ(бит_ФормаВводаБюджетаБДДС.бит_БК_ВалютаДоговора) КАК ВалютаДоговора
		|ИЗ
		|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
		|ГДЕ
		|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	бит_ФормаВводаБюджетаБДДС.Ссылка.ОК_РазмерПредоплаты";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
		РезультатЗапроса = Запрос.Выполнить();		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			МаксимальнаяСуммаПредоплаты = ВыборкаДетальныеЗаписи.СуммаВВалютеСНДС * ВыборкаДетальныеЗаписи.РазмерПредоплаты / 100;
			ВалютаДоговора = ВыборкаДетальныеЗаписи.ВалютаДоговора;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаПриход) КАК СуммаПриход,
		|	ВЫРАЗИТЬ(бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств) КАК ДокументПланирования,
		|	бит_ПланируемыйРасходДенежныхСредствОбороты.Валюта КАК Валюта,
		|	ВЫРАЗИТЬ(бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств).Дата КАК ДатаЗаявки
		|ПОМЕСТИТЬ втЗаписиРегистра
		|ИЗ
		|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(
		|			,
		|			,
		|			,
		|			Аналитика_1 = &ФВБ
		|				И ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств
		|				И ВЫРАЗИТЬ(ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств).ДокументОснование = &ФВБ) КАК бит_ПланируемыйРасходДенежныхСредствОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|		ПО бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования = бит_СтатусыОбъектов.Объект
		|			И (бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
		|ГДЕ
		|	бит_СтатусыОбъектов.Статус В(&МассивСтатусов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств),
		|	бит_ПланируемыйРасходДенежныхСредствОбороты.Валюта,
		|	ВЫРАЗИТЬ(бит_ПланируемыйРасходДенежныхСредствОбороты.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств).Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗаписиРегистра.ДатаЗаявки КАК ДатаЗаявки,
		|	&ВалютаФВБ КАК Валюта
		|ПОМЕСТИТЬ втДатаВалюта
		|ИЗ
		|	втЗаписиРегистра КАК втЗаписиРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДатаВалюта.ДатаЗаявки КАК ДатаЗаявки,
		|	втДатаВалюта.Валюта КАК Валюта,
		|	МАКСИМУМ(КурсыВалют.Период) КАК Период
		|ПОМЕСТИТЬ втДатаКурса
		|ИЗ
		|	втДатаВалюта КАК втДатаВалюта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ПО втДатаВалюта.Валюта = КурсыВалют.Валюта
		|			И втДатаВалюта.ДатаЗаявки >= КурсыВалют.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	втДатаВалюта.ДатаЗаявки,
		|	втДатаВалюта.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДатаКурса.ДатаЗаявки КАК ДатаЗаявки,
		|	втДатаКурса.Валюта КАК Валюта,
		|	КурсыВалют.Курс КАК Курс,
		|	КурсыВалют.Кратность КАК Кратность
		|ПОМЕСТИТЬ КурсыВалютСрез
		|ИЗ
		|	втДатаКурса КАК втДатаКурса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		|		ПО втДатаКурса.Валюта = КурсыВалют.Валюта
		|			И втДатаКурса.Период = КурсыВалют.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА втЗаписиРегистра.Валюта = &ВалютаФВБ
		|				ТОГДА ЕСТЬNULL(втЗаписиРегистра.СуммаПриход,0)
		|			ИНАЧЕ ВЫРАЗИТЬ(втЗаписиРегистра.СуммаПриход / ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|							ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|						ИНАЧЕ 1
		|					КОНЕЦ КАК ЧИСЛО(15, 2))
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	втЗаписиРегистра КАК втЗаписиРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютСрез КАК КурсыВалют
		|		ПО втЗаписиРегистра.ДатаЗаявки = КурсыВалют.ДатаЗаявки";
				
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Рабочая"));
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Утверждена"));
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_СозданоПП"));
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Оплачена"));
		МассивСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Отклонена"));
		
		Запрос.УстановитьПараметр("ФВБ", 			ДокументОснование);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.УстановитьПараметр("ВалютаФВБ", 		ВалютаДоговора);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ОбщаяСуммаСозданныхДокументов = ВыборкаДетальныеЗаписи.Сумма;
		КонецЕсли;
		
		Если ОбщаяСуммаСозданныхДокументов > (МаксимальнаяСуммаПредоплаты + 10) Тогда 
			ТекстОшибки = НСтр("ru = 'Сумма к оплате %1, с учетом ранее сформированных заявок на оплату, превышает сумму %2, рассчитанную по проценту предоплаты. Документ не проведен'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ОбщаяСуммаСозданныхДокументов, МаксимальнаяСуммаПредоплаты);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
			ЗаписьЖурналаРегистрации("Данные.Проведение", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.бит_ЗаявкаНаРасходованиеСредств, Ссылка, ТекстОшибки);
		КонецЕсли;	
		
	КонецЕсли;	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-07 (#4242)
	
КонецПроцедуры
	
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// +СБ. Широков Николай. 2014-10-05. Оптимизация
	Если ДополнительныеСвойства.Свойство("НеВыполнятьДополнительныеДействияПриОтменеПроведения") Тогда
		Возврат;
	КонецЕсли;
	// -СБ. Широков Николай
	
	ТекущийСтатус = ДополнительныеСвойства.ТекущийСтатус;
	Если ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Закрыта
	 ИЛИ ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Оплачена Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ в статусе ""%1"".'"), ТекущийСтатус);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	Если НЕ Отказ Тогда
		
		// Очистим визы
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
		
		// Отменим проведение платежных позиций.
		МассивПозиций = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка, "бит_ПлатежнаяПозиция", "Проведен");
		Для каждого Позиция Из МассивПозиций Цикл
			Если НЕ Позиция.ПометкаУдаления Тогда
				ПозицияОбъект = Позиция.ПолучитьОбъект();
				бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект, РежимЗаписиДокумента.ОтменаПроведения, , "Ошибки");
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Распределение.Очистить();
	ПеречислениеЗаработнойПлаты.Очистить();
	ПеречислениеДепонентов.Очистить();

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
		
		ЗаполнитьПоЗаявкеНаЗатраты(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_мто_ЗаявкаНаЗакупку") Тогда
		
		ЗаполнитьПоЗаявкеНаЗакупку(ДанныеЗаполнения);
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-28 (#3842)
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
		ЗаполнитьПоЗаявкеНаДоговор(ДанныеЗаполнения);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-28 (#3842)
	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда 
		
		ЗаполнитьПоАвансовомуОтчету(ДанныеЗаполнения);
		
	// БИТ_YK_н Доработка #2127 01/16
	// БИТ_YK_н + Сундуков + АКриштопов #2227
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-23 (#3065)
		ВызватьИсключение "Для формирования заявок расходования ДС воспользуйтесь кнопкой ""Создать заявки расходования ДС"" формы текущего документа";
		Возврат;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-23 (#3065)
	
		ДокументОснование = ДанныеЗаполнения;
		Контракт = ДанныеЗаполнения.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.Контракт;
		Если Контракт
			или ДанныеЗаполнения.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ЗаявкаУниверсальная
			или ДанныеЗаполнения.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ЗаявкаОперационная Тогда			
			Дата 					= ТекущаяДата();
			Сценарий 				= Справочники.СценарииПланирования.НайтиПоКоду("ЭУ0000002");
			ДатаРасхода 			= бит_Общий.СледующаяРабочаяДата(дата);			
			СверхБюджета			= ДанныеЗаполнения.СверхБюджета;		
			Контрагент 				= ?(Контракт,ДанныеЗаполнения.контрагент,Неопределено);
			ДоговорКонтрагента 		= ?(Контракт,ДанныеЗаполнения.ДоговорКонтрагента,Неопределено);
			СБ_ПрофильРазноски 		= ?(Контракт,ДанныеЗаполнения.ДоговорКонтрагента.СБ_ПрофильРазноски,Неопределено);			
			Организация 			= ?(Контракт,ДанныеЗаполнения.ДоговорКонтрагента.Организация,ДанныеЗаполнения.бит_БК_Организация);			
			СБ_Инициатор 			= ДанныеЗаполнения.бит_БК_Инициатор;				
			ВидОперации 			= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
			ФормаОплаты 			= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
			ТипЗаявки 				= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
			Важность 				= Перечисления.бит_Важность.Средняя; 
			СуммаВключаетНДС 		= Истина;
			ВалютаДокумента			= справочники.Валюты.НайтиПоКоду("643");
			КурсДокумента 			= 1;
			КратностьДокумента 		= 1;
			Исполнитель 			= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			Ответственный 			= Исполнитель;
			
			СоотвествияСтатейОборотов = получитьСоотвествиеСтатейОборотов(ДанныеЗаполнения.БДДС.выгрузитьКолонку("СтатьяОборотов"));			
			ТЗВрем = Распределение.ВыгрузитьКолонки();
			Для каждого Стр из ДанныеЗаполнения.БДДС Цикл
				НоваяСтр 			= ТЗВрем.Добавить();
				НоваяСтр.ЦФО 		= Стр.ЦФО;				
				НоваяСтр.Проект 	= ?(Контракт,Стр.Проект,Неопределено);
				СтрочкаСтатьи 		= СоотвествияСтатейОборотов.найти(стр.статьяОборотов,"ЛеваяАналитика_1");
				
				Если СтрочкаСтатьи = Неопределено тогда					
					ТекстСообщения 	= "Не найдено соответствие для статьи "+стр.статьяОборотов+" по сценарию "+Сценарий;
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				иначе
					НоваяСтр.СтатьяОборотов = СтрочкаСтатьи.ПраваяАналитика_1;
				КонецЕсли;
				
				НоваяСтр.ДоговорКонтрагента = ДоговорКонтрагента;
				НоваяСтр.Аналитика_1 		= ДанныеЗаполнения; // № Заявки, ссылка на Форму ввода бюджета
				НоваяСтр.Аналитика_2 		= Стр.Аналитика_2; // Объект строительства
				НоваяСтр.СтавкаНДС 			= ?(ЗначениеЗаполнено(Стр.бит_СтавкаНДС),Стр.бит_СтавкаНДС,Перечисления.СтавкиНДС.НДС18);
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-08 (#3121)
				Если Дата >= Дата('20190101') Тогда 
					Если НоваяСтр.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18") Тогда 
						НоваяСтр.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
					ИначеЕсли НоваяСтр.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
						НоваяСтр.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120");
					КонецЕсли;
				КонецЕсли;		
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-08 (#3121)
				
				СтавкаНДСЧисло 				= бит_БухгалтерияСервер.ПолучитьСтавкуНДС(НоваяСтр.СтавкаНДС);				
				НоваяСтр.СуммаБезНДС        = Стр.бит_БК_СуммаБезНДС;
				НоваяСтр.Сумма = НоваяСтр.СуммаБезНДС/100*(100 + СтавкаНДСЧисло);
				НоваяСтр.НДС  				= бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(НоваяСтр.Сумма,Истина,Истина,СтавкаНДСЧисло);
			КонецЦикла;
			ТЗВрем.Свернуть("ЦФО,СтатьяОборотов,Проект,ДоговорКонтрагента,СтавкаНДС,Аналитика_1,Аналитика_2","Сумма,НДС,СуммаБезНДС");
			Распределение.Загрузить(ТЗВрем);
			
			Сумма 					= Распределение.Итог("Сумма");
			СуммаВзаиморасчеты 		= Сумма;
			СуммаРегл 				= Сумма; 
			СуммаУпр 				= Сумма; 
			СуммаДокумента 			= Сумма; 
			НДС 					= Распределение.Итог("НДС");
			НДСВзаиморасчеты 		= НДС;
			НДСУпр 					= НДС;
			НДСРегл 				= НДС;
			НазначениеПлатежа 		= "Оплата по договору №"+ДоговорКонтрагента.Номер +" по счет № , в т.ч. НДС " + НДС;
			НазначениеПлатежаУпр	= НазначениеПлатежа;
			Если Распределение.Количество() тогда
				Стр = Распределение.Получить(0);
				СтавкаНДС 		= стр.СтавкаНДС;
				Аналитика_1 	= Стр.Аналитика_1; // № Заявки, ссылка на Форму ввода бюджета
				Аналитика_2 	= Стр.Аналитика_2; // Объект строительства
				ЦФО 			= Стр.ЦФО;				
				СтатьяОборотов 	= Стр.СтатьяОборотов;
				Проект 			= стр.Проект;
			КонецЕсли; 			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_БюджетнаяОперация") Тогда
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-23 (#3065)
		ВызватьИсключение "Для формирования заявок расходования ДС воспользуйтесь кнопкой ""Создать заявки расходования ДС"" формы текущего документа";
		Возврат;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-23 (#3065)
		
		Организация				= ДанныеЗаполнения.бит_Организация;
		ДокументОснование 		= ДанныеЗаполнения.Ссылка;
		Аналитика_1				= ДанныеЗаполнения.НомерЗаявки;
		Дата 					= НачалоДня(ТекущаяДата());
		ДатаРасхода 			= бит_Общий.СледующаяРабочаяДата(дата);			
		ТипПлатежа 				= Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Оплата");		
		Сценарий 				= Справочники.СценарииПланирования.НайтиПоКоду("ЭУ0000002");
		ВидОперации 			= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
		ФормаОплаты 			= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		ТипЗаявки 				= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
		Важность 				= Перечисления.бит_Важность.Средняя; 
		СуммаВключаетНДС 		= Истина;
		ВалютаДокумента			= справочники.Валюты.НайтиПоКоду("643");
		КурсДокумента 			= 1;
		КратностьДокумента 		= 1;
		Исполнитель 			= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		Ответственный 			= Исполнитель;
		СверхБюджета			= ДанныеЗаполнения.СверхБюджета;
		Если ДанныеЗаполнения.БДДС.Количество() Тогда 
			стрБДДС 			= ДанныеЗаполнения.БДДС[0];
			Контрагент 			= стрБДДС.Контрагент;	
			ДоговорКонтрагента 	= стрБДДС.ДоговорКонтрагента;
			Аналитика_2 		= стрБДДС.Аналитика_2;			
			ТЗДляСтавкиНДС		= ДанныеЗаполнения.НомерЗаявки.БДДС.выгрузить();
			
			ТЗДляСтавкиНДС.свернуть("бит_СтавкаНДС","Сумма");
			Если ТЗДляСтавкиНДС.количество() = 0 тогда
				СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			ИначеЕсли  ТЗДляСтавкиНДС.количество() = 1 тогда
				СтавкаНДС = ТЗДляСтавкиНДС[0].бит_СтавкаНДС;
				Если не ЗначениеЗаполнено(СтавкаНДС) тогда
					СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				КонецЕсли;
			иначе
				СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
			конецЕсли;
		КонецЕсли;
				
		СБ_ПрофильРазноски 			=  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СБ_ПрофильРазноски");
		СБ_Инициатор				= Аналитика_1.бит_БК_Инициатор;
		ОК_ID_Разноска_ДокОснования = ДанныеЗаполнения.ОК_ID_Разноска;
		
		СоотвествияСтатейОборотов 	= получитьСоотвествиеСтатейОборотов(ДанныеЗаполнения.БДДС.выгрузитьКолонку("СтатьяОборотов"));			
		ФактИнвест 					= ДанныеЗаполнения.сценарий = справочники.СценарииПланирования.Факт_Инвест;		
		
		Для Каждого СтрокаИсходная Из ДанныеЗаполнения.БДДС Цикл
			ДобавленнаяСтрока 						= Распределение.Добавить();			
			СоответствиеПоСтатье 					= СоотвествияСтатейОборотов.Найти(СтрокаИсходная.СтатьяОборотов);
			ДобавленнаяСтрока.СтатьяОборотов 		= ?(СоответствиеПоСтатье = Неопределено,Неопределено,СоответствиеПоСтатье.ПраваяАналитика_1);
			ДобавленнаяСтрока.СтавкаНДС 			= СтавкаНДС;	
			ДобавленнаяСтрока.ЦФО 					= СтрокаИсходная.ЦФО;
			ДобавленнаяСтрока.Проект 				= ?(ФактИнвест,СтрокаИсходная.Проект,Неопределено);
			ДобавленнаяСтрока.ДоговорКонтрагента 	= ДоговорКонтрагента;
			ДобавленнаяСтрока.Аналитика_1 			= Аналитика_1;
			ДобавленнаяСтрока.Аналитика_2 			= СтрокаИсходная.Аналитика_2;			
			СтавкаНДСЧисло 							= бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ДобавленнаяСтрока.СтавкаНДС);
			ДобавленнаяСтрока.СуммаБезНДС 			= СтрокаИсходная.Сумма;
			ДобавленнаяСтрока.Сумма 				= ДобавленнаяСтрока.СуммаБезНДС/100*(100 + СтавкаНДСЧисло);
			ДобавленнаяСтрока.НДС  					= бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(ДобавленнаяСтрока.Сумма,Истина,Истина,СтавкаНДСЧисло);			
		КонецЦикла;
		
		Распределение.Свернуть("ЦФО,СтатьяОборотов, Проект, ДоговорКонтрагента, СтавкаНДС, НоменклатурнаяГруппа, Аналитика_1, Аналитика_2, Аналитика_3, Аналитика_4, Аналитика_5, Аналитика_6, Аналитика_7","Сумма, НДС,СуммаБезНДС");
		Сумма 					= Распределение.Итог("Сумма");
		СуммаВзаиморасчеты 		= Сумма;
		СуммаРегл 				= Сумма; 
		СуммаУпр 				= Сумма; 
		СуммаДокумента 			= Сумма; 
		НДС 					= Распределение.Итог("НДС");
		НДСВзаиморасчеты 		= НДС;
		НДСУпр 					= НДС;
		НДСРегл 				= НДС;
		
		Если Распределение.Количество() тогда
			Стр 			= Распределение.Получить(0);
			ЦФО 			= Стр.ЦФО;				
			СтатьяОборотов 	= Стр.СтатьяОборотов;
			Проект 			= стр.Проект;
		КонецЕсли; 	
		НазначениеПлатежа 		= "Оплата по договору №"+ДоговорКонтрагента.Номер +" по счет № , в т.ч. НДС " + Распределение.Итог("НДС");
		НазначениеПлатежаУпр 	= НазначениеПлатежа;		
	// БИТ_YK_н Доработка #2127 01/16
	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
		
		ЗаполнитьПоПрогнозуПлатежа(ДанныеЗаполнения);
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-23 (#3842)
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		
		ЗаполнитьПоПоступлениюНаРасчетныйСчет(ДанныеЗаполнения);
	
	ИначеЕсли ок_СпособСоздания = 5
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеНМА")) Тогда
	
		ВызватьИсключение "Создание ЗнРДС на основании выбранного документа осуществляется только с помощью обработки";
		Возврат;
		
	ИначеЕсли Ссылка.Пустая()
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) Тогда
	
		ВызватьИсключение "Создание ЗнРДС на основании выбранного документа осуществляется только с помощью обработки";
		Возврат;
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-23 (#3842)
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДанныеЗаполнения)) 
		И ОбщегоНазначения.ЭтоДокумент(ДанныеЗаполнения.Метаданные()) Тогда
		
		//ОКЕЙ Рычаков А.С.(СофтЛаб) 2019-10-29 Начало (#3423)
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда 
			ок_СпособСоздания = 4;
		КонецЕсли;
		//ОКЕЙ Рычаков А.С.(СофтЛаб) 2019-10-29 Конец (#3423)		
		
		бит_Казначейство.ПроверитьВозможностьЗаполненияДокументаПоОснованию(ЭтотОбъект, ДанныеЗаполнения, "");
		ЗаполнитьПоОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-20 (#3920)
	СуммаВключаетНДС = Истина;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-20 (#3920)
	
	//ЗаполнитьШапкуДокумента();   //1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-18 (#3795)
	Документы.бит_ЗаявкаНаРасходованиеСредств.ЗаполнитьКодНазначенияПлатежа(ЭтотОбъект);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-18 (#3795)
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
	Для каждого СтрокаТаблицы Из Распределение Цикл
	    СтрокаТаблицы.ИД = Строка(Новый УникальныйИдентификатор());
	КонецЦикла;
	
	// БИТ АКриштопов 05.04.2016 ++
	//Очищаем значения и указываем текущего ответственного
	ОК_ID_Разноска_ДокОснования = "";
	ЦФО = Справочники.Подразделения.ПустаяСсылка();
	СтатьяОборотов = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
	Проект = Справочники.Проекты.ПустаяСсылка();
	//Комментарий = "";  Комментарий не трогаем
	Ответственный = Пользователи.ТекущийПользователь();
	// БИТ АКриштопов 05.04.2016 --
	//ОК+ Аверьянова 08.09.2016 исправления (заявка АТ-1446137 от 02.09.16)
	СБ_СгенерированАвтоматическиAXAPTA = Ложь;
	//ОК-

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-28 (#3629)
	ок_СпособСоздания = 5;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-28 (#3629)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-11-17 (#3842)
	ок_НаличиеДЗ = Ложь;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-11-17 (#3842)
	
КонецПроцедуры
                     
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
	
// Процедура выполняет пересчет сумм документа в разные валюты.
//
Процедура ПересчитатьСуммы() Экспорт
	
	Если Распределение.Количество()=0 Тогда
		СтрокаРаспределение = Распределение.Добавить();
		СтрокаРаспределение.ИД = Строка(Новый УникальныйИдентификатор());
	Иначе
		СтрокаРаспределение = Распределение[0];
	КонецЕсли; 
	
	МногострочныйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, 
								"МногострочныйДокумент", Распределение.Количество() > 1);
	
	Если МногострочныйДокумент Тогда
		Если Распределение.Количество()>1 Тогда
			МассивИсключений = Новый Массив;
			МассивИсключений.Добавить("Сумма");
			МассивИсключений.Добавить("НДС");	
		КонецЕсли; 		
		СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка",МассивИсключений);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-14 (#3488)
		//Сумма = Распределение.Итог("Сумма");
		Если НЕ (ДополнительныеСвойства.Свойство("ПересчитыватьСуммы")
				И НЕ ДополнительныеСвойства.ПересчитыватьСуммы) Тогда
			Сумма = Распределение.Итог("Сумма");
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-14 (#3488)		
		НДС   = Распределение.Итог("НДС");			
	Иначе	
		СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Строка");		
	КонецЕсли; 
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
	#Область ТиповойКод
	//СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Регл,Упр,Взаиморасчеты"));
	#КонецОбласти
	// Изменена дата получения курсов валюты с "Дата" на "ДатаРасхода"
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,ДатаРасхода,Новый Структура("Документ,Регл,Упр,Взаиморасчеты"));
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("НДС");
	
	бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(ЭтотОбъект,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
	
	// Для вывода структуры подчиненности.
	СуммаДокумента = Сумма;
	  
КонецПроцедуры //ПересчитатьСуммы()

// Процедура устанавливает статус.
//
// Параметры:
//  ВхРежимЗаписи			 - РежимЗаписиДокумента.
//  ВхСтруктураОплаты		 - Структура.
//  ВхСинхронизироватьОплаты - Булево. По умолчанию Истина.
//
Процедура УстановитьСтатус(ПараметрРежимЗаписи = Неопределено, ПараметрыОплаты = Неопределено, 
			СинхронизироватьОплаты = Истина) Экспорт
						  
	АлгоритмИзмененияСтатуса = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,
								Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов).ИзменениеСтатусовОбъектов;
								
	Пользователь = Пользователи.ТекущийПользователь(); 
	
	Если НЕ ДополнительныеСвойства.Свойство("ТекущийСтатус") Тогда
		бит_Визирование.ЗаполнитьТекущийСтатус(ЭтотОбъект);	
	КонецЕсли;
	
	ТекущийСтатус = ДополнительныеСвойства.ТекущийСтатус;
	
	Если НЕ ЗначениеЗаполнено(АлгоритмИзмененияСтатуса) Тогда
		УстановитьСтатусЗаявки(ПараметрРежимЗаписи, ПараметрыОплаты, СинхронизироватьОплаты, ТекущийСтатус);
	Иначе	
		УстановитьСтатусПоАлгоритму(ПараметрыОплаты, Пользователь, СинхронизироватьОплаты);
	КонецЕсли; 
	
	// Создает планируемое поступление ДС для некоторых видов операций.
	бит_Казначейство.СоздатьПланируемоеПоступлениеДС(ДополнительныеСвойства.ТекущийСтатус, Неопределено, Ссылка);
	
КонецПроцедуры

// Процедура Устанавливает ид строки табличной части.
//
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.
//
Процедура УстановитьИДСтроки(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ИД = Новый УникальныйИдентификатор();

КонецПроцедуры

// Процедура синхронизирует реквизиты шапки документа и строки табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти  - СтрокаТабличнойЧасти.Распределение.
//  ИмяПриемника          - Строка: "Шапка","Строка".
//
Процедура СинхронизироватьРеквизитыШапкиИСтроки(СтрокаТабличнойЧасти,ИмяПриемника,МассивИсключений=Неопределено) Экспорт

	Если МассивИсключений = Неопределено Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-14 (#3488)
	Если ДополнительныеСвойства.Свойство("ПересчитыватьСуммы")
		И НЕ ДополнительныеСвойства.ПересчитыватьСуммы 
		И МассивИсключений.Найти("Сумма") = Неопределено Тогда
		МассивИсключений.Добавить("Сумма");
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-14 (#3488)	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-06-15 (#4221)
	Если Распределение.Количество() > 1 Тогда
		МассивИсключений.Добавить("Сумма");
		МассивИсключений.Добавить("НДС");
		МассивИсключений.Добавить("СуммаБезНДС");
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = -1 Тогда
		
		ПарныеРеквизиты = ПарныеРеквизитыТаблицы();
		Для каждого КлючИСтруктура Из ПарныеРеквизиты Цикл
			МассивИсключений.Добавить(КлючИСтруктура.Ключ);
		КонецЦикла;
		
		МассивИсключений = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивИсключений);
		
		//Проверяемые реквизиты
		Если МассивИсключений.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			МассивИсключений.Удалить(МассивИсключений.Найти("ДоговорКонтрагента"));
		КонецЕсли; 
		
		Для каждого СтрокаТабличнойЧасти Из Распределение Цикл
			
			Для каждого КлючИСтруктура Из ПарныеРеквизиты Цикл
				
				Если МассивИсключений.Найти(КлючИСтруктура.Ключ)<>Неопределено Тогда
					 Продолжить;
				КонецЕсли; 
				
				ИмяРеквизитаШапка = КлючИСтруктура.Ключ;
				ИмяРеквизитаСтрока= КлючИСтруктура.Значение;
				ЗначениеШапка     = ЭтотОбъект[ИмяРеквизитаШапка];
				ЗначениеСтрока    = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока];
				
				Если ЗначениеШапка <> ЗначениеСтрока Тогда
					Если ВРег(ИмяПриемника) = "ШАПКА" Тогда
						ЭтотОбъект[ИмяРеквизитаШапка] = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока];
					ИначеЕсли ВРег(ИмяПриемника) = "СТРОКА" Тогда	
						
						Если ИмяРеквизитаШапка = "ДоговорКонтрагента"
							И ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаСтрока]) Тогда
						
							РеквизитыДоговора = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СтрокаТабличнойЧасти[ИмяРеквизитаСтрока], "Владелец, Организация");
							Если РеквизитыДоговора.Владелец = Контрагент
								И РеквизитыДоговора.Организация = Организация Тогда
								
								Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаШапка]) Тогда
									ЭтотОбъект[ИмяРеквизитаШапка] = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока]
								КонецЕсли;
								
							Иначе
								СтрокаТабличнойЧасти[ИмяРеквизитаСтрока] = ЭтотОбъект[ИмяРеквизитаШапка];
							КонецЕсли; 
							
						Иначе
							СтрокаТабличнойЧасти[ИмяРеквизитаСтрока] = ЭтотОбъект[ИмяРеквизитаШапка];
						КонецЕсли; 
						
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			
			Если ВРег(ИмяПриемника) = "ШАПКА" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-06-15 (#4221)
	
	Если ТипЗнч(СтрокаТабличнойЧасти) = Тип("Число") Тогда
		СтрокаТабличнойЧасти = Распределение[СтрокаТабличнойЧасти];
	КонецЕсли;
	
	ПарныеРеквизиты = ПарныеРеквизитыТаблицы();
	Для каждого КлючИСтруктура Из ПарныеРеквизиты Цикл
		
		Если МассивИсключений.Найти(КлючИСтруктура.Ключ)<>Неопределено Тогда
			 Продолжить;
		КонецЕсли; 
		
		ИмяРеквизитаШапка = КлючИСтруктура.Ключ;
		ИмяРеквизитаСтрока= КлючИСтруктура.Значение;
		ЗначениеШапка     = ЭтотОбъект[ИмяРеквизитаШапка];
		ЗначениеСтрока    = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока];
		
		Если ЗначениеШапка <> ЗначениеСтрока Тогда
			Если ВРег(ИмяПриемника) = "ШАПКА" Тогда
				ЭтотОбъект[ИмяРеквизитаШапка] = СтрокаТабличнойЧасти[ИмяРеквизитаСтрока];
			ИначеЕсли ВРег(ИмяПриемника) = "СТРОКА" Тогда	
				СтрокаТабличнойЧасти[ИмяРеквизитаСтрока] = ЭтотОбъект[ИмяРеквизитаШапка];
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-06-15 (#4221)
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-06-15 (#4221)
	
КонецПроцедуры

// Функция актуализирует курсы заявки на текущую дату.
//
Функция АктуализироватьПоКурсам(РежимСообщений = "Все") Экспорт 

	РежимыВывода       = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	Реквизиты          = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
	#Область ТиповойКод
	//КурсыВалют 	 	   = бит_КурсыВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, ОбщегоНазначения.ТекущаяДатаПользователя());
	#КонецОбласти
	// Изменена дата получения курсов валюты с "Дата" на "ДатаРасхода"
	КурсыВалют 	 	   = бит_КурсыВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаДокумента, ДатаРасхода);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
	
	бит_Визирование.ЗаполнитьТекущийСтатус(ЭтотОбъект);
	Реквизиты.Вставить("ТекущийСтатус", ДополнительныеСвойства.ТекущийСтатус);
	
	Отказ = Ложь;
	Документы.бит_ЗаявкаНаРасходованиеСредств.ГотовКАктуализацииПоКурсам(Реквизиты, КурсыВалют, РежимыВывода, Отказ); 

	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	СвязанныеДокументы = Документы.бит_ЗаявкаНаРасходованиеСредств.СвязанныеДокументы(Реквизиты.Ссылка);
	ЕстьОплаты 		   = СвязанныеДокументы.Итог("КоличествоОплачено") <> 0;
	
	ДополнительныеСвойства.Вставить("АктуализацияКурсов", Истина);
	
	Если НЕ ЕстьОплаты Тогда
		КурсДокумента 		= КурсыВалют.Курс;
		КратностьДокумента 	= КурсыВалют.Кратность;
		НачатьТранзакцию();
		Попытка
			Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при актуализации курса. По причине: %1'"), 
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
								
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Актуализация курса'", ОбщегоНазначения.КодОсновногоЯзыка()),
										УровеньЖурналаРегистрации.Ошибка,,Ссылка,ТекстСообщения);
		КонецПопытки; 
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Проведен Тогда
		Если НЕ ЕстьОплаты Тогда
			// Транзакция открыта выше.
			ТаблицаРасход = ПодготовитьТаблицуПланируемыйРасход();
			
			ВалютаСценария     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Сценарий, "Валюта");
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
			#Область ТиповойКод
			///КурсВалютыСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария, Реквизиты.Дата);		
			#КонецОбласти
			// Изменена дата получения курсов валюты с "Дата" на "ДатаРасхода"
			КурсВалютыСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария, ДатаРасхода);		
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
			
			Реквизиты.Вставить("КурсСценарий"     , КурсВалютыСценарий.Курс);
			Реквизиты.Вставить("КратностьСценарий", КурсВалютыСценарий.Кратность);
			
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
			#Область ТиповойКод
			//СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
			#КонецОбласти
			// Изменена дата получения курсов валюты с "Дата" на "ДатаРасхода"
			СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,ДатаРасхода,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
			
			//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-10 (#ТП_БП05_ФР07)
			ТаблицаДвиженияРасход = ок_ПодготовитьТаблицуДвиженийРасход();
			//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-10 (#ТП_БП05_ФР07)
			
			//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-10 (#ТП_БП05_ФР07)
			#Область ТиповойКод
			//ДвиженияПоРегистрам(Реквизиты, СтруктураКурсыВалют, ТаблицаРасход, Ложь, бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка));
			#КонецОбласти
			// Добавлены движения с видом расход в регистре Планируемый расход денежных средств
			ДвиженияПоРегистрам(Реквизиты, СтруктураКурсыВалют, ТаблицаРасход, Ложь, бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка), ТаблицаДвиженияРасход);
			//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-10 (#ТП_БП05_ФР07)

			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-12 (#НТП_БП12_ФР01)
			Если (Реквизиты.Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") 
				ИЛИ	Реквизиты.Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования")) 
				И Дата >= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ДатаНачалаРаботыНовойЦелевойСхемыДвиженийПоБК",Дата('39990101')) Тогда
				ДвиженияПоРегистрамБК(Реквизиты,Отказ);
				
				Движения.бит_КонтрольныеЗначенияБюджетов.мПериод 	= Движения.бит_ПланируемыйРасходДенежныхСредств.мПериод;
				Движения.бит_ОборотыПоБюджетам.мПериод 				= Движения.бит_ПланируемыйРасходДенежныхСредств.мПериод;
				
				Движения.бит_КонтрольныеЗначенияБюджетов.Записать(Истина);
				Движения.бит_ОборотыПоБюджетам.Записать(Истина);
			Иначе
				ДвиженияПоРегиструКонтрольныхЗначений(Реквизиты,ТаблицаРасход,Отказ,"");
			КонецЕсли;
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-12 (#НТП_БП12_ФР01)
		Иначе
			НачатьТранзакцию();
		КонецЕсли; 

		Попытка
			АктуализироватьПоКурсамСвязанныеДокуенты(СвязанныеДокументы, КурсыВалют, РежимыВывода, Отказ);
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при актуализации курса. По причине: %1'"), 
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
								
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,,Отказ);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Актуализация курса'", ОбщегоНазначения.КодОсновногоЯзыка()),
										УровеньЖурналаРегистрации.Ошибка,,Ссылка,ТекстСообщения);
		КонецПопытки; 
	КонецЕсли; 
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	Возврат НЕ Отказ;
	
КонецФункции
 
Процедура СинхронизироватьПлатежныеПозиции()
	
	// Массив позиция для синхронизации.
	МассивПозиций = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка,"бит_ПлатежнаяПозиция");
	Если МассивПозиций.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	// Для быстрого доступа к строкам табличной части
	КэшТабЧасть = Новый Соответствие;
	Для каждого СтрокаТаблицы Из Распределение Цикл
		МодельСтроки = Новый Структура("ИД, СтавкаНДС, Сумма, НДС");
		ЗаполнитьЗначенияСвойств(МодельСтроки, СтрокаТаблицы); 
		//БИТ АКриштопов 17022016 внесены изменение из-за того, что формирования кэша по таблице распределения
		//формируется с одинаковым ИД
		//КэшТабЧасть.Вставить(СтрокаТаблицы.ИД, МодельСтроки);
		КэшТабЧасть.Вставить(СтрокаТаблицы.НомерСтроки, МодельСтроки);		
	КонецЦикла; 

	// Актуализация сумм в платежных позициях - выполняем если позиций больше 1.
	// Для 1 позиции просто заменяем табличную часть.
	РезРаспределение = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РасчетыВУЕ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "РасчетыВУсловныхЕдиницах");
	Иначе
		РасчетыВУЕ = Ложь;
	КонецЕсли; 
	
	РаспределениеНач = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
							ДополнительныеСвойства, "РаспределениеНач", Неопределено);
	Если МассивПозиций.Количество() > 1 И НЕ РаспределениеНач = Неопределено Тогда
		
		флЭтоСоответствие = ?(ТипЗнч(РаспределениеНач) = Тип("Соответствие"), Истина, Ложь);
		
		ТаблицаКРаспределению = Распределение.Выгрузить(,"ИД, Сумма");
		ТаблицаКРаспределению.Колонки.Добавить("СуммаНач", Новый ОписаниеТипов("Число"));
		Индекс = ТаблицаКРаспределению.Количество() - 1;
		
		// Определим, в каких строка были изменены суммы.
		Пока Индекс >= 0 Цикл
			
			СтрокаТаблицы = ТаблицаКРаспределению.Получить(Индекс);
			
			Если флЭтоСоответствие Тогда
				СуммаСтроки = РаспределениеНач.Получить(СтрокаТаблицы.ИД);
				Если СуммаСтроки = Неопределено Тогда
					СтрокаНач = Неопределено;
				Иначе
					СтрокаНач = Новый Структура("Сумма", СуммаСтроки);
				КонецЕсли;
			Иначе
				СтрокаНач = РаспределениеНач.Найти(СтрокаТаблицы.ИД,"ИД");
			КонецЕсли;
			
			Если СтрокаНач = Неопределено Тогда
				ТаблицаКРаспределению.Удалить(СтрокаТаблицы);
			Иначе
				Если СтрокаНач.Сумма = СтрокаТаблицы.Сумма Тогда
					ТаблицаКРаспределению.Удалить(СтрокаТаблицы);
				Иначе
					СтрокаТаблицы.СуммаНач = СтрокаНач.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			Индекс = Индекс - 1;
		КонецЦикла; 
		
		// Выполним распределение.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивИД",			  ТаблицаКРаспределению.ВыгрузитьКолонку("ИД"));
		Запрос.УстановитьПараметр("Заявка",				  Ссылка);
		Запрос.УстановитьПараметр("ТаблицаКРаспределению",ТаблицаКРаспределению);

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКРаспределению.ИД КАК ИД,
		|	ТаблицаКРаспределению.Сумма КАК Сумма,
		|	ТаблицаКРаспределению.СуммаНач КАК СуммаНач
		|ПОМЕСТИТЬ ТаблицаКРаспределению
		|ИЗ
		|	&ТаблицаКРаспределению КАК ТаблицаКРаспределению
		|ГДЕ
		|	ТаблицаКРаспределению.СуммаНач <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бит_ПлатежнаяПозицияРаспределение.Ссылка КАК Позиция,
		|	бит_ПлатежнаяПозицияРаспределение.ИД КАК ИД,
		|	бит_ПлатежнаяПозицияРаспределение.Сумма КАК СуммаТек,
		|	ЕСТЬNULL(бит_ПлатежнаяПозицияРаспределение.Сумма, 0) / ЕСТЬNULL(ТаблицаКРаспределению.СуммаНач, 1) КАК Коэффициент,
		|	ЕСТЬNULL(ТаблицаКРаспределению.Сумма, 0) * ЕСТЬNULL(бит_ПлатежнаяПозицияРаспределение.Сумма, 0) / ЕСТЬNULL(ТаблицаКРаспределению.СуммаНач, 1) КАК Сумма,
		|	ТаблицаКРаспределению.Сумма КАК СуммаКРаспределению,
		|	ТаблицаКРаспределению.СуммаНач КАК СуммаКРаспределениюНач
		|ПОМЕСТИТЬ Распределено
		|ИЗ
		|	Документ.бит_ПлатежнаяПозиция.Распределение КАК бит_ПлатежнаяПозицияРаспределение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКРаспределению КАК ТаблицаКРаспределению
		|		ПО бит_ПлатежнаяПозицияРаспределение.ИД = ТаблицаКРаспределению.ИД
		|ГДЕ
		|	бит_ПлатежнаяПозицияРаспределение.Ссылка.ДокументОснование = &Заявка
		|	И бит_ПлатежнаяПозицияРаспределение.ИД В(&МассивИД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ИД КАК ИД,
		|	ВложенныйЗапрос.Сумма - ВложенныйЗапрос.СуммаКРаспределению КАК Ошибка,
		|	ВложенныйЗапрос.Позиция КАК Позиция,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СуммаКРаспределениюНач < ВложенныйЗапрос.СуммаТек
		|				ИЛИ ВложенныйЗапрос.Сумма > ВложенныйЗапрос.СуммаКРаспределению
		|				ИЛИ ВложенныйЗапрос.СуммаКРаспределениюНач = ВложенныйЗапрос.СуммаТек
		|					И ВложенныйЗапрос.Сумма <> ВложенныйЗапрос.СуммаКРаспределению
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КорректироватьСуммуНаСуммуОшибки
		|ПОМЕСТИТЬ ТаблицаОшибки
		|ИЗ
		|	(ВЫБРАТЬ
		|		Распределено.ИД КАК ИД,
		|		СУММА(Распределено.Сумма) КАК Сумма,
		|		МАКСИМУМ(Распределено.СуммаКРаспределению) КАК СуммаКРаспределению,
		|		МАКСИМУМ(Распределено.Позиция) КАК Позиция,
		|		МАКСИМУМ(Распределено.СуммаКРаспределениюНач) КАК СуммаКРаспределениюНач,
		|		СУММА(Распределено.СуммаТек) КАК СуммаТек
		|	ИЗ
		|		Распределено КАК Распределено
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Распределено.ИД) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Сумма - ВложенныйЗапрос.СуммаКРаспределению <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распределено.Позиция КАК Позиция,
		|	Распределено.ИД КАК ИД,
		|	Распределено.СуммаТек КАК СуммаТек,
		|	Распределено.Коэффициент КАК Коэффициент,
		|	Распределено.Сумма КАК СуммаРаспределено,
		|	ВЫБОР
		|		КОГДА ТаблицаОшибки.КорректироватьСуммуНаСуммуОшибки
		|			ТОГДА ЕСТЬNULL(Распределено.Сумма, 0) + ЕСТЬNULL(ТаблицаОшибки.Ошибка, 0)
		|		ИНАЧЕ ЕСТЬNULL(Распределено.Сумма, 0)
		|	КОНЕЦ КАК Сумма,
		|	Распределено.СуммаКРаспределению КАК СуммаКРаспределению,
		|	ТаблицаОшибки.Ошибка КАК Ошибка
		|ИЗ
		|	Распределено КАК Распределено
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОшибки КАК ТаблицаОшибки
		|		ПО Распределено.ИД = ТаблицаОшибки.ИД
		|			И Распределено.Позиция = ТаблицаОшибки.Позиция
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	Позиция"; 
		
		Результат = Запрос.Выполнить();
		
		// Заполним соответствие результатами распределения.
		ВыборкаПозиция = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПозиция.Следующий() Цикл
			
			СуммыРаспределения = Новый Соответствие; 
			Выборка = ВыборкаПозиция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				СуммыРаспределения.Вставить(Выборка.ИД,Выборка.Сумма);
			КонецЦикла; 
			РезРаспределение.Вставить(ВыборкаПозиция.Позиция,СуммыРаспределения);
		КонецЦикла; 
	КонецЕсли; 
	
	ПричинаАктуализацияКурса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
								ДополнительныеСвойства, "АктуализацияКурсов", Ложь);
								
	РеквизитыШапкиПоДаннымБД = РеквизитыШапкиПоДаннымБД(Ссылка);	
	Для каждого Позиция Из МассивПозиций Цикл
		
		ПозицияОбъект = Позиция.ПолучитьОбъект();				
		
		// Синхронизируем пометку удаления платежных позиций и заявки.			
		Если ПометкаУдаления <> РеквизитыШапкиПоДаннымБД.ПометкаУдаления И ПозицияОбъект.ПометкаУдаления <> ПометкаУдаления Тогда
			ПозицияОбъект = Позиция.ПолучитьОбъект();
			Параметры 	  = Новый Структура("ОбъектПолучен");
			бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ПозицияОбъект, ПометкаУдаления,, "Нет", Параметры);
		КонецЕсли; 
		
		// Синхронизируем реквизиты.
		флЕстьИзменения = Ложь;
		ПарныеРеквизиты = ПарныеРеквизитыШапки();
		
		Если ПричинаАктуализацияКурса Тогда
			ПарныеРеквизиты.Удалить("ДатаРасхода");
			ПарныеРеквизиты.Удалить("ДатаПлатежаКрайняя");		
		КонецЕсли; 
		
		Для каждого КлючИЗначение Из ПарныеРеквизиты Цикл
			
			ИмяРеквизитаЗаявка = КлючИЗначение.Ключ;
			ИмяРеквизитаПозиция= КлючИЗначение.Значение;
			ВидыОпераций = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование;
			
			Если ИмяРеквизитаЗаявка = "НазначениеПлатежа" Тогда
				// Назначение платежа формируется в конце заполнения реквизитов.
				Продолжить;
			КонецЕсли; 
			
			Если НЕ ПозицияОбъект.ПереключательСчетаФизЛица
				И (ВидОперации = ВидыОпераций.ПеречислениеДенежныхСредствПодотчетнику 
				ИЛИ ВидОперации = ВидыОпераций.ПеречислениеСотрудникуПоДоговоруПодряда
				ИЛИ ВидОперации = ВидыОпераций.ВыдачаЗаймаРаботнику
				ИЛИ ВидОперации = ВидыОпераций.ВыплатаДепонентов)
				И ИмяРеквизитаПозиция = "Контрагент" Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ИмяРеквизитаЗаявка = "КурсДокумента" ИЛИ ИмяРеквизитаЗаявка = "КратностьДокумента" Тогда
				Если ПозицияОбъект.УсловиеПоКурсу = Перечисления.бит_УсловияПоКурсу.Оператор Тогда
					// Изменние курса/кратности заявки не является основанием для изменения позиции,
					// курс валюты в которой установлен оператором.
					Продолжить;				
				КонецЕсли; 
			КонецЕсли; 			
			
			Если ИмяРеквизитаЗаявка = "ДатаРасхода" ИЛИ ИмяРеквизитаЗаявка = "ДатаПлатежаКрайняя" Тогда
				// Если "Дата расхода" в позиции изменена пользователем, 
				// тогда синхронизация пропускается.
				// В это же случае пропускается "Дата платежа крайняя".
				Если РеквизитыШапкиПоДаннымБД.ДатаРасхода <> ПозицияОбъект.ДатаРасхода Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			Если ЭтотОбъект[ИмяРеквизитаЗаявка] <> ПозицияОбъект[ИмяРеквизитаПозиция] Тогда
				
				ПозицияОбъект[ИмяРеквизитаПозиция] = ЭтотОбъект[ИмяРеквизитаЗаявка];
				Если ИмяРеквизитаПозиция = "Организация" ИЛИ ИмяРеквизитаПозиция = "ВалютаДокумента" Тогда 
					
					//ОКЕЙ Василенко В.В. (СофтЛаб) Начало 2021-10-28 (#4429)
					//ПозицияОбъект.БанковскийСчетОрганизация = бит_Казначейство.ПроверитьБанковскийСчетПоУмолчанию(
					//		ПозицияОбъект.Организация.ОсновнойБанковскийСчет, ВалютаДокумента, РасчетыВУЕ,
					//		ПозицияОбъект.Организация);
					БанковскиеСчетаОрганизации = ОК_ОбщегоНазначения.БанковскиеСчетаОрганизации(ПозицияОбъект.Организация, ПозицияОбъект.ВалютаДокумента, ПозицияОбъект.ДатаРасхода);
					Если БанковскиеСчетаОрганизации.Количество() = 1 Тогда
						ПозицияОбъект.БанковскийСчетОрганизация = БанковскиеСчетаОрганизации[0].Ссылка;
					КонецЕсли;
					//ОКЕЙ Василенко В.В. (СофтЛаб) Конец 2021-10-28 (#4429)
							
					Если ЗначениеЗаполнено(ПозицияОбъект.ОрганизацияПриемник) Тогда
						ПозицияОбъект.ОрганизацияПриемник = ПозицияОбъект.Организация;
						ПозицияОбъект.БанковскийСчетОрганизацияПриемник = бит_Казначейство.ПроверитьБанковскийСчетПоУмолчанию(
							ПозицияОбъект.ОрганизацияПриемник.ОсновнойБанковскийСчет, ВалютаДокумента, РасчетыВУЕ,
							ПозицияОбъект.ОрганизацияПриемник);			
					КонецЕсли;
					
				КонецЕсли; 
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-05 (#3423)
				//Если ИмяРеквизитаПозиция = "Контрагент" ИЛИ ИмяРеквизитаПозиция = "ВалютаДокумента" Тогда 
				//	
				//	ПозицияОбъект.БанковскийСчетКонтрагент = бит_Казначейство.ПроверитьБанковскийСчетПоУмолчанию(
				//			ПозицияОбъект.Контрагент.ОсновнойБанковскийСчет, ВалютаДокумента, РасчетыВУЕ,
				//			ПозицияОбъект.Контрагент);
				//	
				//КонецЕсли;
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-05 (#3423)						
						

				Если ИмяРеквизитаПозиция = "ФизическоеЛицо" ИЛИ ИмяРеквизитаПозиция = "ВалютаДокумента" Тогда
					ПозицияОбъект.БанковскийСчетФизЛица = бит_Казначейство.ПроверитьБанковскийСчетПоУмолчанию(
							ПозицияОбъект.ФизическоеЛицо.ОсновнойБанковскийСчет, ВалютаДокумента, РасчетыВУЕ,
							ПозицияОбъект.ФизическоеЛицо);
				КонецЕсли; 
				флЕстьИзменения = Истина;
			КонецЕсли; 
		КонецЦикла; // По синхронизируемым реквизитам
		
		// Ставку НДС синхронизируем всегда.
		Для каждого СтрокаРаспределениеПозиция Из ПозицияОбъект.Распределение Цикл
		
			МодельСтрокиЗаявки = КэшТабЧасть[СтрокаРаспределениеПозиция.ИД];
			Если НЕ МодельСтрокиЗаявки = Неопределено Тогда
				СтрокаРаспределениеПозиция.СтавкаНДС = МодельСтрокиЗаявки.СтавкаНДС;
                ПозицияОбъект.РассчитатьСуммуНДС(СтрокаРаспределениеПозиция);				
			КонецЕсли; 
		КонецЦикла; 
		
		ОчередностьПлатежа = бит_Казначейство.ОпределитьОчередностьПлатежа(ВидОперации ,ПозицияОбъект.ДатаРасхода);
		Если ОчередностьПлатежа <> ПозицияОбъект.ОчередностьПлатежа Тогда
			ПозицияОбъект.ОчередностьПлатежа = ОчередностьПлатежа;
			флЕстьИзменения = Истина;					
		КонецЕсли;  
		
		Если МассивПозиций.Количество() = 1 Тогда
			 // если позиция одна - заменяем таб. часть
			 ПозицияОбъект.Распределение.Очистить();
			 Для каждого КиЗ Из КэшТабЧасть Цикл
				 ЗаполнитьЗначенияСвойств(ПозицияОбъект.Распределение.Добавить(), КиЗ.Значение);
			 КонецЦикла; 
			флЕстьИзменения = Истина;								 
			 
		Иначе	
			// Синхронизация сумм.
			СуммыРаспределения = РезРаспределение[Позиция];
			Если СуммыРаспределения <> Неопределено Тогда
				Для каждого СтрокаТаблицы Из ПозицияОбъект.Распределение Цикл
					СуммаНовая = СуммыРаспределения[СтрокаТаблицы.ИД];
					Если СуммаНовая <> Неопределено Тогда
						СтрокаТаблицы.Сумма = СуммаНовая;
						ПозицияОбъект.РассчитатьСуммуНДС(СтрокаТаблицы);
						флЕстьИзменения = Истина;
					КонецЕсли; 
				КонецЦикла; // По строкам табличной части Распределение платежной позиции.
			КонецЕсли; // Есть суммы к замене.
		КонецЕсли; 
		
		Если ПозицияОбъект.Распределение.Количество() > 0 Тогда
			ПозицияОбъект.СтавкаНДС = ПозицияОбъект.Распределение[0].СтавкаНДС;
		КонецЕсли; 
		
		ПозицияОбъект.Сумма = Распределение.Итог("Сумма");
		ПозицияОбъект.НДС   = Распределение.Итог("НДС"); 

		// Запишем позицию при необходимости.
		Если флЕстьИзменения Тогда
			ТекстЗаголовка = НСтр("en = 'Синхронизация реквизитов документов ""%1"" и ""%2"".';
									|ru = 'Синхронизация реквизитов документов ""%1"" и ""%2"".'");
			ТекстЗаголовка = СтрШаблон(ТекстЗаголовка, Ссылка, Позиция); 
			РежимЗаписиПозиция = ?(ПозицияОбъект.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись); 
			
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-04-21 (#4128)
			Если РежимЗаписиПозиция <> РежимЗаписиДокумента.Проведение
				И ЭтотОбъект.ДополнительныеСвойства.Свойство("ок_ЗагрузкаПД_СинхронизироватьПлатежныеПозиции")
				И НЕ ПозицияОбъект.ПометкаУдаления Тогда
			
				РежимЗаписиПозиция = ?(ДополнительныеСвойства.ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена,
										РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			
			КонецЕсли;
			
			Если РежимЗаписиПозиция = РежимЗаписиДокумента.Проведение Тогда
				ПозицияОбъект.ДополнительныеСвойства.Вставить("ок_ДокументОснования_РежимЗаписиДокумента_Проведение", Истина);
			КонецЕсли; 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-04-21 (#4128)
			
			бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект,РежимЗаписиПозиция,ТекстЗаголовка,"Ошибки");
		КонецЕсли; 
	КонецЦикла; // По платежным позициям.
	
	ДополнительныеСвойства.Вставить("РаспределениеНач", Неопределено);
	
КонецПроцедуры

// Процедура выполняет изменение платежных позиций по заявке при необходимости.
//
// Параметры:
//  Нет.
//
Процедура ИзменитьПлатежныеПозицииПоЗаявке() Экспорт
	
	// Если изменен вид операции и схема движения документов по платежам.
	Если ВидОперации <> Ссылка.ВидОперации Тогда
		
		ЕстьРасчетыВВидеОперации 		   = бит_ОбщегоНазначения.ЕстьРасчетыСПоставщикамиПокупателями(ВидОперации);
		ЕстьРасчетыВПредыдущемВидеОперации = бит_ОбщегоНазначения.ЕстьРасчетыСПоставщикамиПокупателями(Ссылка.ВидОперации);
		
		Если ЕстьРасчетыВВидеОперации
			Или ЕстьРасчетыВПредыдущемВидеОперации Тогда
			
			ЗаполнитьСпособПогашения = ?(   ЕстьРасчетыВВидеОперации, Истина, Ложь);
			ОчиститьСпособПогашения  = ?(Не ЕстьРасчетыВВидеОперации, Истина, Ложь);
			
			// Получим платежные позиций заявки.
			ПодчиненныеДокументы 	   = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка, "бит_ПлатежнаяПозиция");
			КоличествоПлатежныхПозиций = ПодчиненныеДокументы.Количество();
			
			Если Не КоличествоПлатежныхПозиций = 0 Тогда
				
				АтоматическиПогашать = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				
				Для Каждого ТекПлатежнаяПозиция Из ПодчиненныеДокументы Цикл
					
					ТекСпособПогашения 		= ТекПлатежнаяПозиция.СпособПогашенияЗадолженности;
					СпособПогашенияЗаполнен = ?(ЗначениеЗаполнено(ТекСпособПогашения), Истина, Ложь);
					ПогашатьАвтоматически	= ?(СпособПогашенияЗаполнен И ТекСпособПогашения = АтоматическиПогашать, Истина, Ложь);
					
					Если ПогашатьАвтоматически И ЗаполнитьСпособПогашения Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не СпособПогашенияЗаполнен И ОчиститьСпособПогашения Тогда
						Продолжить;
					КонецЕсли;
					
					ПлатежнаяПозицияОбъект = ТекПлатежнаяПозиция.ПолучитьОбъект();
					
					Если ЗаполнитьСпособПогашения Тогда
						ПлатежнаяПозицияОбъект.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
					Иначе
						ПлатежнаяПозицияОбъект.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПустаяСсылка();
					КонецЕсли;
					
					// Очистим документ сделки.
					ПлатежнаяПозицияОбъект.Сделка = Неопределено;
					
					ПлатежнаяПозицияОбъект.ДополнительныеСвойства.Вставить("ПрограммнаяЗапись");
					бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПлатежнаяПозицияОбъект, РежимЗаписиДокумента.Запись,, "Нет");
						
				КонецЦикла;
				
			КонецЕсли; // Есть платежные позиции для заявки.
				
		КонецЕсли; // Есть расчеты с поставщиками, покупателями.
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
 
Процедура ОбновитьНазначениеПлатежаВСвязанныхДокументах()

	ПлатежныеПозиции = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка,"бит_ПлатежнаяПозиция");
	Если ПлатежныеПозиции.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 

	УстановкаПометкиУдаления = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
								ДополнительныеСвойства, "УстановкаПометкиУдаления", Ложь);
								
	Если УстановкаПометкиУдаления Тогда
		Возврат;	
	КонецЕсли; 	
	
	Автозаполнение = бит_Казначейство.ЗаполнятьНазначениеПлатежаВЗаявкеНаРасходованиеДС(Организация, Дата);
	
	Для каждого ПлатежнаяПозиция Из ПлатежныеПозиции Цикл
				
		ПозицияОбъект = ПлатежнаяПозиция.ПолучитьОбъект();
		Документы.бит_ПлатежнаяПозиция.СформироватьНазначениеПлатежа(ПозицияОбъект, НазначениеПлатежа);
				
		Попытка
			ПозицияОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ВызватьИсключение СтрШаблон(НСтр("en = 'Ошибка при синхронизации платежной позиции %1 по причине: %2'; 
				|ru = 'Ошибка при синхронизации платежной позиции %1 по причине: %2'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьСтатусПоАлгоритму(ПараметрыОплаты, Пользователь, СинхронизироватьОплаты)
		
	КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(
								"КомментироватьХодВыполненияАлгоритмовПроцессов", Пользователь);	
	
	РежимСообщений = ?(КомментироватьВыполнение, "Все", "Ошибки");			
	
	Контекст = Новый Структура;
	Контекст.Вставить("ТекущийОбъект",ЭтотОбъект);
	Если НЕ ПараметрыОплаты = Неопределено Тогда
		Контекст.Вставить("ОплатаЗаявки",ПараметрыОплаты);
	КонецЕсли; 
	
	бит_уп_Сервер.ВыполнитьАлгоритм(АлгоритмИзмененияСтатуса,Контекст,РежимСообщений);
	
	Если СинхронизироватьОплаты Тогда
		СинхронизироватьПроведениеПозиций(Проведен, ДополнительныеСвойства.ТекущийСтатус);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСтатусЗаявки(ПараметрРежимЗаписи, ПараметрыОплаты, СинхронизироватьОплаты, ТекущийСтатус)
	
	Если ПараметрРежимЗаписи = Неопределено Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	Иначе	
		РежимЗаписи = ПараметрРежимЗаписи;
	КонецЕсли; 
	
	Если ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Закрыта Тогда
		Возврат;
	КонецЕсли; 
	
	// Вычислим переменные, необходимые для установки статуса.
	ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
	ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);		
	
	Если ПараметрыОплаты = Неопределено Тогда
		// +СБ. Широков Николай. 2014-10-03. Оптимизация
		//СтруктураОплаты = бит_Казначейство.ПолучитьОплатыПоЗаявке(Ссылка);		
		Если НЕ ДополнительныеСвойства.Свойство("СБ_ЗагрузкаПД_AXAPTA") Тогда
		// -СБ. Широков Николай
			СтруктураОплаты = бит_Казначейство.ПолучитьОплатыПоЗаявке(Ссылка);
		// +СБ. Широков Николай. 2014-10-03. Оптимизация
		Иначе
			СтруктураОплаты = Новый Структура;
			СтруктураОплаты.Вставить("СуммаПлан"				, 0);
			СтруктураОплаты.Вставить("СуммаОплата"				, 0);
			СтруктураОплаты.Вставить("СуммаЗакрыта"				, 0);
			СтруктураОплаты.Вставить("Разность"					, 0);
			СтруктураОплаты.Вставить("СуммаДокументаПлан"		, 0);
			СтруктураОплаты.Вставить("СуммаДокументаОплата"		, 0);
			СтруктураОплаты.Вставить("СуммаДокументаЗакрыта"	, 0);
			СтруктураОплаты.Вставить("СуммаДокументаРазность"	, 0);
		КонецЕсли;
		// -СБ. Широков Николай 		
		СтруктураОплаты.СуммаПлан = СуммаВзаиморасчеты;
	Иначе	
		СтруктураОплаты = ПараметрыОплаты;
	КонецЕсли; 
	
	НовыйСтатус = бит_Визирование.ОпределитьСтатусЗаявки(ЭтотОбъект, ТекущийСтатус, 
					РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено, СтруктураОплаты);
	
	СтатусМожетБытьИзменен = ТекущийСтатус <> НовыйСтатус;	
	
	бит_Визирование.ИзменитьСтатусОбъекта(ЭтотОбъект, Перечисления.бит_ВидыСтатусовОбъектов.Статус,
		НовыйСтатус, ТекущийСтатус, Пользователи.ТекущийПользователь(), ТекущаяДатаСеанса());
		
	СтатусУспешноИзменен = (СтатусМожетБытьИзменен И ДополнительныеСвойства.ТекущийСтатус = НовыйСтатус);
	
	Если СтатусУспешноИзменен Тогда				
		Если СинхронизироватьОплаты Тогда
			СинхронизироватьПроведениеПозиций(Проведен, ДополнительныеСвойства.ТекущийСтатус);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьКурсВалюты()
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
	#Область ТиповойКод
	//Результат = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	#КонецОбласти
	// Изменена дата получения курсов валюты с "Дата" на "ДатаРасхода"
	Результат = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаРасхода);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
	КурсДокумента      = Результат.Курс;
	КратностьДокумента = Результат.Кратность;

КонецПроцедуры

Процедура РассчитатьСуммуНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Контейнер.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма, Истина, СуммаВключаетНДС,
		бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС));
		
	//+Сундукова 08.04.16 №2349
	Если не типзнч(Контейнер) = тип("ДанныеФормыСтруктура") тогда
		Контейнер.СуммаБезНДС = Контейнер.Сумма - Контейнер.НДС;
	КонецЕсли;
	//-Сундукова 08.04.16
		
КонецПроцедуры

Процедура СформироватьПлатежнуюПозицию()
		
	ЕстьПлатежнаяПозиция = бит_ОбщегоНазначения.ЕстьПодчиненныеДокументы(Ссылка,"бит_ПлатежнаяПозиция");
	Если ЕстьПлатежнаяПозиция Тогда
		Возврат;	
	КонецЕсли; 
	
	ПлатежнаяПозиция = Документы.бит_ПлатежнаяПозиция.СоздатьДокумент();
	ПлатежнаяПозиция.Заполнить(Ссылка);
	ПлатежнаяПозиция.ДополнительныеСвойства.Вставить("ПрограммнаяЗапись");
	
	Если ДополнительныеСвойства.Свойство("БанковскиеСчетаПлатежнойПозиции") Тогда
		ПлатежнаяПозиция.Заполнить(ДополнительныеСвойства.БанковскиеСчетаПлатежнойПозиции);
	КонецЕсли; 
	
	// +СБ. Михайлов Никита. 2014-05-08. Загрузка платежных документов AXAPTA 
	// +СБ. Широков Николай. 2014-09-04. "Казначейство" 2.2.1.5.
	//Если ЭтотОбъект.ДополнительныеСвойства.Свойство("СБ_ЗагрузкаПД_AXAPTA") Тогда
	Если СБ_ИдентификаторЗаписиAXAPTA <> 0 Тогда
	// -СБ. Широков Николай 
		
		// +СБ. Широков Николай. 2014-09-08. ТЗ "Казначейство" 2.2.1.8. 
		
		ВидыОпераций = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование; 
		
		ВидыОперацийБезДоговора = Новый Массив;
		ВидыОперацийБезДоговора.Добавить(ВидыОпераций.ПеречислениеНалога);
		ВидыОперацийБезДоговора.Добавить(ВидыОпераций.ПереводНаДругойСчет);
		ВидыОперацийБезДоговора.Добавить(ВидыОпераций.ПеречислениеЗП);
		ВидыОперацийБезДоговора.Добавить(ВидыОпераций.ПрочееСписаниеБезналичныхДенежныхСредств);
		
		Если ВидыОперацийБезДоговора.Найти(ВидОперации) = Неопределено Тогда
			
			ПлатежнаяПозиция.ТипОснованияПлатежа 			= Перечисления.бит_ОснованияПлатежа.Договор; 	
			ПлатежнаяПозиция.СпособПогашенияЗадолженности 	= Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
			
		Иначе
			
			ПлатежнаяПозиция.ТипОснованияПлатежа 			= Перечисления.бит_ОснованияПлатежа.Прочее; 	
			
		КонецЕсли; 
		
		Если ВидОперации = ВидыОпераций.ПеречислениеНалога Тогда
			ПлатежнаяПозиция.ПоказательНомера 	= "0";
			ПлатежнаяПозиция.УИН 				= "0";
		КонецЕсли; 
		
		// -СБ. Широков Николай 				
		
		ПлатежнаяПозиция.ВидПлатежа = "Электронно";
		
	КонецЕсли; 
	// -СБ. Михайлов Никита
	
	// +СБ. Широков Николай. 2014-10-06. //Вынесено из условия. Поступило требование заполнять счет по профилю разноски не только для загруженных заявок.
	ВидыОпераций = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование; 
	
	ВидыОперацийЕстьСчет = Новый Массив;
	ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПеречислениеНалога);
	ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПереводНаДругойСчет);
	ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПеречислениеЗП);
	ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПрочееСписаниеБезналичныхДенежныхСредств);
	ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.РасчетыПоКредитамИЗаймамСКонтрагентами);
	ВидыОперацийЕстьСчет.Добавить(ВидыОпераций.ПрочиеРасчетыСКонтрагентами);
	
	Если ВидыОперацийЕстьСчет.Найти(ВидОперации) <> Неопределено Тогда
		
		Если ДополнительныеСвойства.Свойство("СчетРСБУ") Тогда
			СчетУчетаБУ = ДополнительныеСвойства.СчетРСБУ;				
		Иначе
			СчетУчетаБУ = СБ_КазначействоСервер.СчетРСБУПоПрофилюРазноски(СБ_ПрофильРазноски);
		КонецЕсли;
		
		ПлатежнаяПозиция.СчетУчетаБУ = СчетУчетаБУ;
		
		Если СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПереводыВПути // 57.01
			ИЛИ СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал // 57.21
			Тогда
			
			Если ДополнительныеСвойства.Свойство("ВидПеревода") Тогда
				ПлатежнаяПозиция.Субконто1 = ДополнительныеСвойства.ВидПеревода;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// -СБ. Широков Николай	
	
	РежимЗаписиПозиция = ?(ДополнительныеСвойства.ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена,
		РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
		
	//СофтЛаб Начало 2019-09-18 #3423
	Если ДополнительныеСвойства.Свойство("СозданоОбработкой_ФормированиеЗнРДС")
		И ДополнительныеСвойства.СозданоОбработкой_ФормированиеЗнРДС = Истина Тогда
		
		ПлатежнаяПозиция.Сделка 					= ДокументОснование;
		ПлатежнаяПозиция.ДатаВходящегоДокумента 	= Неопределено;
		ПлатежнаяПозиция.НомерВходящегоДокумента 	= Неопределено;
		ПлатежнаяПозиция.ДокументОснование			= Ссылка;
		ПлатежнаяПозиция.ВидПлатежа					= "Электронно";
		ПлатежнаяПозиция.ОчередностьПлатежа			= 5;
		ПлатежнаяПозиция.Важность 					= Важность;
		ПлатежнаяПозиция.ПеречислениеВБюджет 		= Контрагент.ГосударственныйОрган;
		ПлатежнаяПозиция.Организация 				= Организация;
		ПлатежнаяПозиция.Контрагент 				= Контрагент;
		ПлатежнаяПозиция.ДатаРасхода 				= ДатаРасхода;
		ПлатежнаяПозиция.ДатаПлатежаКрайняя 		= ДатаПлатежаКрайняя;
		ПлатежнаяПозиция.УсловиеПоКурсу				= ПредопределенноеЗначение("Перечисление.бит_УсловияПоКурсу.ЦБ");
		ПлатежнаяПозиция.КурсДокумента 				= КурсДокумента;
		ПлатежнаяПозиция.Сумма 						= Сумма;
		ПлатежнаяПозиция.СтавкаНДС 					= СтавкаНДС;
		ПлатежнаяПозиция.НДС 						= НДС;
		ПлатежнаяПозиция.НазначениеПлатежа 			= НазначениеПлатежа;
		ПлатежнаяПозиция.ТипОснованияПлатежа		= ПредопределенноеЗначение("Перечисление.бит_ОснованияПлатежа.Договор");
		ПлатежнаяПозиция.БанковскийСчетОрганизация 	= Неопределено;
		ПлатежнаяПозиция.БанковскийСчетКонтрагент 	= СБ_БанковскийСчетКонтрагента;
		ПлатежнаяПозиция.Ответственный 				= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		ПлатежнаяПозиция.Комментарий 				= "Создано автоматически с помощью обработки";
		ПлатежнаяПозиция.ИдентификаторПлатежа 		= Неопределено;
		
	КонецЕсли;
	//СофтЛаб Конец 2019-09-18 #3423	 
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-31 (#4084)
	Если ДополнительныеСвойства.Свойство("ПараметрыПлатежнойПозиции") И ТипЗнч(ДополнительныеСвойства.ПараметрыПлатежнойПозиции) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПлатежнаяПозиция, ДополнительныеСвойства.ПараметрыПлатежнойПозиции);
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-31 (#4084) 
	
	бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПлатежнаяПозиция,РежимЗаписиПозиция, , "Нет");
	
КонецПроцедуры

Процедура ЗаполнитьПоПрогнозуПлатежа(ДанныеЗаполнения)
	
	СтатусыОбъекта = бит_Визирование.ПолучитьСтатусОбъекта(ДанныеЗаполнения);
	Если СтатусыОбъекта.Статус <> Справочники.бит_СтатусыОбъектов.ЗаявкаОбщая_Утверждена Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ввод на основании документа в статусе ""%1"" запрещен.'"), СтатусыОбъекта.Статус);
	КонецЕсли;
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументОснование,
	|	Реквизиты.ДатаРасхода КАК ДатаРасхода,
	|	Реквизиты.ФормаОплаты КАК ФормаОплаты,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Реквизиты.НазначениеПлатежаУпр КАК НазначениеПлатежаУпр,
	|	Реквизиты.ЭтоКазначейство КАК ЭтоКазначейство,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.СтавкаНДС КАК СтавкаНДС,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.НДС КАК НДС,
	|	Реквизиты.СтатьяОборотов КАК СтатьяОборотов,
	|	Реквизиты.ЦФО КАК ЦФО,
	|	Реквизиты.Проект КАК Проект,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Реквизиты.НеВключатьВПлатежныйКалендарь КАК НеВключатьВПлатежныйКалендарь,
	|	Реквизиты.Аналитика_1 КАК Аналитика_1,
	|	Реквизиты.Аналитика_2 КАК Аналитика_2,
	|	Реквизиты.Аналитика_3 КАК Аналитика_3,
	|	Реквизиты.Аналитика_4 КАК Аналитика_4,
	|	Реквизиты.Аналитика_5 КАК Аналитика_5,
	|	Реквизиты.Аналитика_6 КАК Аналитика_6,
	|	Реквизиты.Аналитика_7 КАК Аналитика_7,
	|	Реквизиты.Касса КАК Касса,
	|	Реквизиты.АвтоматическиАктуализироватьКурсы КАК АвтоматическиАктуализироватьКурсы
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Распределение.НомерСтроки КАК НомерСтроки,
	|	Распределение.ЦФО КАК ЦФО,
	|	Распределение.СтатьяОборотов КАК СтатьяОборотов,
	|	Распределение.Проект КАК Проект,
	|	Распределение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Распределение.Сумма КАК Сумма,
	|	Распределение.СтавкаНДС КАК СтавкаНДС,
	|	Распределение.НДС КАК НДС,
	|	Распределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Распределение.Аналитика_1 КАК Аналитика_1,
	|	Распределение.Аналитика_2 КАК Аналитика_2,
	|	Распределение.Аналитика_3 КАК Аналитика_3,
	|	Распределение.Аналитика_4 КАК Аналитика_4,
	|	Распределение.Аналитика_5 КАК Аналитика_5,
	|	Распределение.Аналитика_6 КАК Аналитика_6,
	|	Распределение.Аналитика_7 КАК Аналитика_7,
	|	Распределение.ИД КАК ИД_Прогноз
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая.Распределение КАК Распределение
	|ГДЕ
	|	Распределение.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ЦФО КАК ЦФО,
	|	Остатки.СтатьяОборотов КАК СтатьяОборотов,
	|	Остатки.Проект КАК Проект,
	|	Остатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Остатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Остатки.Аналитика_1 КАК Аналитика_1,
	|	Остатки.Аналитика_2 КАК Аналитика_2,
	|	Остатки.Аналитика_3 КАК Аналитика_3,
	|	Остатки.Аналитика_4 КАК Аналитика_4,
	|	Остатки.Аналитика_5 КАК Аналитика_5,
	|	Остатки.Аналитика_6 КАК Аналитика_6,
	|	Остатки.Аналитика_7 КАК Аналитика_7,
	|	Остатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(, ДокументПланирования = &Ссылка) КАК Остатки
	|ГДЕ
	|	Остатки.СуммаОстаток > 0";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
	Дата 		= ОбщегоНазначения.ТекущаяДатаПользователя();
	
	// Шапка документа.
	РеквизитыОснования = Пакет[0].Выгрузить()[0];
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования);
	
	Если ЗначениеЗаполнено(ДатаРасхода) Тогда
		ДатаРасходаКУстановке = ДатаРасхода;
	Иначе
		ДатаРасходаКУстановке = РеквизитыОснования.ДатаРасхода;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаРасхода"	, ДатаРасходаКУстановке);
	СтруктураПараметров.Вставить("ДатаДокумента", Дата);
	Если бит_Казначейство.ДатаРасходаКорректна(СтруктураПараметров, Ложь) Тогда
		ДатаРасхода = ДатаРасходаКУстановке;
	КонецЕсли; 
	
	СуммаВключаетНДС = Истина;	
	ТипЗаявки        = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
	
	// ТЧ "Распределение".
	ТаблицаДокумента = Пакет[1].Выгрузить();
	бит_МеханизмДопИзмерений.КонтрольТиповДополнительныАналитик(ТаблицаДокумента);

	Остатки = Пакет[2].Выбрать();
	
	РезультатРаспределения = ТаблицаДокумента.СкопироватьКолонки();
	Пока Остатки.Следующий() Цикл
		// Распределение остатка по строкам документа (ставкам НДС).
		ПоляТаблицы = "ЦФО, СтатьяОборотов, Проект, НоменклатурнаяГруппа, ДоговорКонтрагента,"
					+ "Аналитика_1, Аналитика_2, Аналитика_3, Аналитика_4, Аналитика_5, Аналитика_6, Аналитика_7";		
		Отбор = Новый Структура(ПоляТаблицы); 
		ЗаполнитьЗначенияСвойств(Отбор, Остатки);
		НайденныеСтроки = ТаблицаДокумента.Скопировать(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Коэффициенты = НайденныеСтроки.ВыгрузитьКолонку("Сумма");
			Результат    = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
								Остатки.Сумма, Коэффициенты, 2);
			Если Результат = Неопределено Тогда
				Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
					СтрокаТаблицы.Сумма = 0;
				КонецЦикла; 
			Иначе	
				НайденныеСтроки.ЗагрузитьКолонку(Результат, "Сумма");
			КонецЕсли; 					
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденныеСтроки, РезультатРаспределения);
	КонецЦикла; 
	
	// Заполнение табличной части.
	РезультатРаспределения.Сортировать("НомерСтроки");
	Для каждого Стр Из РезультатРаспределения Цикл
		НоваяСтрока = Распределение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		РассчитатьСуммуНДС(НоваяСтрока);
		НоваяСтрока.ИД = Строка(Новый УникальныйИдентификатор());
	КонецЦикла; 
	
	Если НЕ Распределение.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Распределение[0];
	Иначе	
		СтрокаТабличнойЧасти = Распределение.Добавить();
		СтрокаТабличнойЧасти.ИД = Новый УникальныйИдентификатор();
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(СтрокаТабличнойЧасти,мИзмеренияДоп,мНастройкиИзмерений);
	КонецЕсли;
	
	ПроверитьСоответствиеВидаОперацииИДанныхОснования();
	СинхронизироватьРеквизитыШапкиИСтроки(Распределение[0], "Шапка");
	
	Ответственный = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнойОтветственный");		

КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаЗатраты(ДанныеЗаполнения)
	
	СтатусыОбъекта = бит_Визирование.ПолучитьСтатусОбъекта(ДанныеЗаполнения);
	
	ДопустимыеСтатусы = Новый Массив(); 
	ДопустимыеСтатусы.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Выполнена);
	ДопустимыеСтатусы.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Утверждена);
	ДопустимыеСтатусы.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Рабочая);
	
	Если ДопустимыеСтатусы.Найти(СтатусыОбъекта.Статус) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ввод на основании документа в статусе ""%1"" запрещен.'"), СтатусыОбъекта.Статус);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК ДокументОснование,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Важность КАК Важность,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	Реквизиты.ЦФО КАК ЦФО,
	|	Реквизиты.Проект КАК Проект,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Реквизиты.ДатаПлатежаКрайняя КАК ДатаПлатежаКрайняя,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.СтавкаНДС КАК СтавкаНДС,
	|	Реквизиты.Сумма КАК Сумма,
	|	Реквизиты.СодержаниеЗатрат КАК СодержаниеЗатрат,
	|	Реквизиты.Исполнитель КАК Исполнитель,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Реквизиты.СодержаниеЗатрат КАК НазначениеПлатежа,
	|	Реквизиты.ДатаРасхода КАК ДатаРасходаЗаявки,
	|	Реквизиты.Аналитика_1 КАК Аналитика_1,
	|	Реквизиты.Аналитика_2 КАК Аналитика_2,
	|	Реквизиты.Аналитика_3 КАК Аналитика_3,
	|	Реквизиты.Аналитика_4 КАК Аналитика_4,
	|	Реквизиты.Аналитика_5 КАК Аналитика_5,
	|	Реквизиты.Аналитика_6 КАК Аналитика_6,
	|	Реквизиты.Аналитика_7 КАК Аналитика_7
	|ИЗ
	|	Документ.бит_ЗаявкаНаЗатраты КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТекДата = НачалоДня(ТекущаяДатаСеанса());
	Если Выборка.ДатаРасходаЗаявки >= ТекДата Тогда
		ДатаРасхода = Выборка.ДатаРасходаЗаявки;
	Иначе
		ДатаРасхода = ТекДата;
	КонецЕсли;
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Если бит_РаботаСМетаданными.ЕстьПредопределенныйЭлемент("Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС") Тогда
		СтатьяОборотов = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(
			Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС, ДанныеЗаполнения.СтатьяОборотов);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаЗакупку(ДанныеЗаполнения)
	
	СтатусыОбъекта = бит_Визирование.ПолучитьСтатусОбъекта(ДанныеЗаполнения);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Исключения = Исключения + ",ВидОперации";
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	ДопустимыеСтатусы = Новый Массив(); 
	ДопустимыеСтатусы.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Утверждена);
	ДопустимыеСтатусы.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_ЧастичноИсполнена);
	ДопустимыеСтатусы.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Исполнена);
	
	Если ДопустимыеСтатусы.Найти(СтатусыОбъекта.Статус) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ввод на основании документа в статусе ""%1"" запрещен.'"), СтатусыОбъекта.Статус);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаЗакупку.Ссылка КАК Ссылка,
	|	ЗаявкаНаЗакупку.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ЗаявкаНаЗакупку.Организация КАК Организация,
	|	ЗаявкаНаЗакупку.ВидОперации КАК ВидОперации,
	|	ЗаявкаНаЗакупку.ДатаЗакупкиПлан КАК ДатаЗакупкиПлан,
	|	ЗаявкаНаЗакупку.ДатаЗакупкиНеПозднее КАК ДатаЗакупкиНеПозднее,
	|	ЗаявкаНаЗакупку.СтатьяОборотов КАК СтатьяОборотов,
	|	ЗаявкаНаЗакупку.СтатьяОборотов.ТипСтатьи КАК ТипСтатьи,
	|	ЗаявкаНаЗакупку.ЦФО КАК ЦФО,
	|	ЗаявкаНаЗакупку.Контрагент КАК Контрагент,
	|	ЗаявкаНаЗакупку.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкаНаЗакупку.Проект КАК Проект,
	|	ЗаявкаНаЗакупку.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЗаявкаНаЗакупку.БанковскийСчет КАК БанковскийСчет,
	|	ЗаявкаНаЗакупку.Аналитика_1 КАК Аналитика_1,
	|	ЗаявкаНаЗакупку.Аналитика_2 КАК Аналитика_2,
	|	ЗаявкаНаЗакупку.Аналитика_3 КАК Аналитика_3,
	|	ЗаявкаНаЗакупку.Аналитика_4 КАК Аналитика_4,
	|	ЗаявкаНаЗакупку.Аналитика_5 КАК Аналитика_5,
	|	ЗаявкаНаЗакупку.Аналитика_6 КАК Аналитика_6,
	|	ЗаявкаНаЗакупку.Аналитика_7 КАК Аналитика_7,
	|	ЗаявкаНаЗакупку.Исполнитель КАК Исполнитель,
	|	ЗаявкаНаЗакупку.Ответственный КАК Ответственный,
	|	ЗаявкаНаЗакупку.Комментарий КАК Комментарий,
	|	ЗаявкаНаЗакупку.ТипЦен КАК ТипЦен,
	|	ЗаявкаНаЗакупку.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаявкаНаЗакупку.КурсДокумента КАК КурсДокумента,
	|	ЗаявкаНаЗакупку.КратностьДокумента КАК КратностьДокумента,
	|	ЗаявкаНаЗакупку.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ЗаявкаНаЗакупку.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаявкаНаЗакупку.СверхБюджета КАК СверхБюджета,
	|	ЗаявкаНаЗакупку.Сценарий КАК Сценарий,
	|	ЗаявкаНаЗакупку.Склад КАК Склад,
	|	ЗаявкаНаЗакупку.Сумма КАК Сумма
	|ИЗ
	|	Документ.бит_мто_ЗаявкаНаЗакупку КАК ЗаявкаНаЗакупку
	|ГДЕ
	|	ЗаявкаНаЗакупку.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Содержание КАК Содержание,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Потребность КАК Потребность,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Коэффициент КАК Коэффициент,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Сумма КАК Сумма,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Всего КАК Всего,
	|	ТаблицаТовары.ЗаявкаНаПотребность КАК ЗаявкаНаПотребность
	|ИЗ
	|	Документ.бит_мто_ЗаявкаНаЗакупку.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	ВыборкаТовары = Результат[1].Выбрать();	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты,,"СтатьяОборотов");
	
	ТекДата = НачалоДня(ТекущаяДатаСеанса());
	Если Реквизиты.ДатаЗакупкиПлан >= ТекДата Тогда
		ДатаРасхода = Реквизиты.ДатаЗакупкиПлан;
	Иначе
		ДатаРасхода = ТекДата;
	КонецЕсли;
	
	Дата 				= ТекущаяДатаСеанса();
	ДокументОснование 	= ДанныеЗаполнения;
	СверхБюджета		= Ложь;
	
	АналитикиНоменклатуры = Новый Массив(); // Может быть несколько аналитик одного типа.
	Если ВыборкаТовары.Количество() > 0  Тогда
		Для каждого КлючЗначение Из мНастройкиИзмерений Цикл
			Настйрока = КлючЗначение.Значение;
			Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") 
				И КлючЗначение.Значение.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				АналитикиНоменклатуры.Добавить(КлючЗначение.Ключ)
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Реквизиты.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
		СтатьяОборотовОсновная = Реквизиты.СтатьяОборотов;
	ИначеЕсли Реквизиты.ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда
		СтатьяОборотовОсновная = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(
			Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС, Реквизиты.СтатьяОборотов);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтатьяОборотовОсновная) Тогда
		СтатьяОборотовОсновная = СтатьяОборотов;
	КонецЕсли;
	
	НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(СтатьяОборотовОсновная);
	
	Если ВыборкаТовары.Количество() = 1 Тогда
		
		ВыборкаТовары.Следующий();
		Если СуммаВключаетНДС Тогда
			Сумма = ВыборкаТовары.Сумма;
		Иначе
			Сумма = ВыборкаТовары.Всего;
		КонецЕсли;
		НДС			= ВыборкаТовары.СуммаНДС;
		СтавкаНДС	= ВыборкаТовары.СтавкаНДС;
		СтатьяОборотов = СтатьяОборотовОсновная;
		
		Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
			Для Каждого АналитикаНоменклатуры Из АналитикиНоменклатуры Цикл
				Документы.бит_ЗаявкаНаРасходованиеСредств.ПроверитьПоСтатьеОборотовИЗаполнитьАналитику(
					АналитикаНоменклатуры, НастройкиСтатьи, ЭтотОбъект, ВыборкаТовары);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ВыборкаТовары.Количество() > 1 Тогда	
		
		Пока ВыборкаТовары.Следующий() Цикл
			
			СтатьяОборотов = СтатьяОборотовОсновная;
			НоваяСтрока	= Распределение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Реквизиты,,"СтатьяОборотов");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			
			Если НЕ СуммаВключаетНДС Тогда
				НоваяСтрока.Сумма = ВыборкаТовары.Всего;
			КонецЕсли;
			НоваяСтрока.НДС = ВыборкаТовары.СуммаНДС;
			НоваяСтрока.СтатьяОборотов = СтатьяОборотовОсновная;
			
			Если ЗначениеЗаполнено(НоваяСтрока.СтатьяОборотов) Тогда
				Для Каждого АналитикаНоменклатуры Из АналитикиНоменклатуры Цикл
					Документы.бит_ЗаявкаНаРасходованиеСредств.ПроверитьПоСтатьеОборотовИЗаполнитьАналитику(
						АналитикаНоменклатуры, НастройкиСтатьи, НоваяСтрока, ВыборкаТовары);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоАвансовомуОтчету(ДанныеЗаполнения)
	
	Дата 				= ТекущаяДатаСеанса();
	ДокументОснование 	= ДанныеЗаполнения;
	ВидОперации 		= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику;
	ФормаОплаты 		= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	Организация 		= ДанныеЗаполнения.Организация;
	ФизическоеЛицо 		= ДанныеЗаполнения.ФизЛицо;
	
	СуммаАванса = Документы.АвансовыйОтчет.ПолучитьСуммуВыданныхАвансов(ДанныеЗаполнения);
	ПерерасходАванса = Макс(0, ДанныеЗаполнения.СуммаДокумента - СуммаАванса);
	Сумма = ПерерасходАванса;
	
	// Из дополнительных аналитик основания.	
	ЗначенияАналитик = ПоляТаблицыРаспределение();
	ТаблицаАналитик  = бит_Казначейство.ЗаполнитьТаблицуАналитик(ЭтотОбъект, ДокументОснование, 
						мНастройкиИзмерений, "Распределение");
						
	Для каждого СтрокаТаблицы Из ТаблицаАналитик Цикл
		ЗначенияАналитик.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
	КонецЦикла; 
	
	СтатьяКандидат = ЗначенияАналитик.СтатьяОборотов;
	Если ЗначениеЗаполнено(СтатьяКандидат) Тогда
		ТипСтатьи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяКандидат, "ТипСтатьи");
		Если ТипСтатьи <> Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
			СтатьяКандидат = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	ЗначенияАналитик.Вставить("СтатьяОборотов", СтатьяКандидат);
	
	// Из настроек пользователя.
	Пользователь = Пользователи.ТекущийПользователь();
	Если НЕ ЗначениеЗаполнено(ЗначенияАналитик.ЦФО) Тогда
		ЗначенияАналитик.Вставить("ЦФО", бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеЦФО", Пользователь));
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ЗначенияАналитик.Проект) Тогда
		ЗначенияАналитик.Вставить("Проект", бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект", Пользователь));
	КонецЕсли; 

	НоваяСтрока = ДобавитьСтрокуРаспределения(ЗначенияАналитик); 
	
	СтрокаРаспределение = Распределение[0];
	СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка");
	
	ВсегоТовары    = ДанныеЗаполнения.Товары.Итог("Сумма");
	ВсегоТоварыНДС = ДанныеЗаполнения.Товары.Итог("СуммаНДС");
	
	ВсегоПрочее    = ДанныеЗаполнения.Прочее.Итог("Сумма");
	ВсегоПрочееНДС = ДанныеЗаполнения.Прочее.Итог("СуммаНДС");
	
	Если НЕ ДанныеЗаполнения.СуммаВключаетНДС Тогда
		ВсегоТовары = ВсегоТовары + ВсегоТоварыНДС;
		ВсегоПрочее = ВсегоПрочее + ВсегоПрочееНДС;
	КонецЕсли;
	
	ИтогАвансов = 0;
	Для каждого СтрокаТаблицы Из ДанныеЗаполнения.ВыданныеАвансы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументАванса) Тогда
			Продолжить;
		КонецЕсли;
		
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-08-30 (#ТП_БП05_ФР12,#ТП_БП05_ФР13)
		// Закомментировано. Суммы аванса теперь хранятся в ТЧ ВыданныеАвансы
		//РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		//СтрокаТаблицы.ДокументАванса,
		//"СуммаДокумента");
		//Если РеквизитыДокумента <> Неопределено Тогда
		//	ИтогАвансов = РеквизитыДокумента.СуммаДокумента;
		//КонецЕсли;
		ИтогАвансов = ИтогАвансов+СтрокаТаблицы.ок_СуммаАванса;
		//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-08-30 (#ТП_БП05_ФР12,#ТП_БП05_ФР13)
		
	КонецЦикла;
	
	ИтогПоОтчету = ВсегоТовары + ДанныеЗаполнения.ОплатаПоставщикам.Итог("Сумма") + ВсегоПрочее;
	ИтогоОстаток = ИтогПоОтчету - ИтогАвансов;
	Сумма = ИтогоОстаток;
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-23 (#3842)
Процедура ЗаполнитьПоЗаявкеНаДоговор(Основание)
	
	Распределение.Очистить();
	
	Дата 							= ТекущаяДатаСеанса();
	ДокументОснование 				= Основание;
	
	ФормаОплаты 					= ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные");
	ВидОперации						= ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику");
	Важность						= ПредопределенноеЗначение("Перечисление.бит_Важность.Средняя");
	ТипЗаявки 						= ПредопределенноеЗначение("Перечисление.бит_ТипыЗаявокНаРасходованиеСредств.Плановая");
	ТипПлатежа						= Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Оплата");
	Сценарий 						= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования");
	Организация 					= Основание.Организация;
	Контрагент	 					= Основание.Контрагент;
	ДоговорКонтрагента				= Основание.ДоговорКонтрагента;
	ВалютаДокумента					= ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СБ_БанковскийСчетКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПолучитьБанковскийСчетКонтрагента(ДоговорКонтрагента, Контрагент);
	СтавкаНДС						= Основание.СтавкаНДС;
	СтавкаНДСЧисло 					= бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтавкаНДС);
	НеВключатьВПлатежныйКалендарь	= Ложь;
	ок_СпособСоздания 				= 4;
	
	ПолучитьКурсВалюты();
	
	ТЗ_ЦФО = Основание.База.Выгрузить(,"ФункцияЦФО");
	ТЗ_ЦФО.Свернуть("ФункцияЦФО");
	Если ТЗ_ЦФО.Количество() = 1 Тогда
		ЦФО = ТЗ_ЦФО[0].ФункцияЦФО;
	КонецЕсли; 
	
	ТЗ_СтатьиОборотов = Основание.База.Выгрузить(,"СтатьяОборотов");
	ТЗ_СтатьиОборотов.Свернуть("СтатьяОборотов");
	
	СоответствияСтатьиБДДС = ПолучитьСоответствияСтатьиБДДССтатейБДР(ТЗ_СтатьиОборотов.ВыгрузитьКолонку("СтатьяОборотов"));
	МассивСтатейОборотовБДР = Новый Массив;
	
	Если СоответствияСтатьиБДДС.Количество() > 1 Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По выбранной заявке на договор определено более 1 статьи БДДС. Необходимо создать несколько ЗнРДС"); 
		
		НДС 				= 0;
		НДСВзаиморасчеты 	= 0;
		НДСРегл 			= 0;
		НДСУпр 				= 0;
		Сумма 				= 0;
		СуммаБезНДС 		= 0;
		СуммаВзаиморасчеты 	= 0;
		СуммаДокумента 		= 0;
		СуммаРегл 			= 0;
		СуммаУпр 			= 0;
		
		НоваяСтрока = Распределение.Добавить();
		
		МассивИсключ = Новый Массив;
		МассивИсключ.Добавить("ДоговорКонтрагента");		
		СинхронизироватьРеквизитыШапкиИСтроки(НоваяСтрока, "Шапка", МассивИсключ);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.ИД = Новый УникальныйИдентификатор();	 
		
	Иначе
		
		Если СоответствияСтатьиБДДС.Количество() = 1 Тогда
			
			Для каждого ЭлементСоответствия Из СоответствияСтатьиБДДС Цикл
			
				СтатьяОборотов = ЭлементСоответствия.Ключ;
				МассивСтатейОборотовБДР = ЭлементСоответствия.Значение; 
			
			КонецЦикла; 
			
		КонецЕсли;
	
		// Из дополнительных аналитик основания.
		ЗначенияАналитик = ПоляТаблицыРаспределение();
		ТаблицаАналитик  = бит_Казначейство.ЗаполнитьТаблицуАналитик(ЭтотОбъект, ДокументОснование, мНастройкиИзмерений, "Распределение");
		
		ЗначенияАналитик.Вставить("ЦФО", ЦФО);
		ЗначенияАналитик.Вставить("СтатьяОборотов", СтатьяОборотов);
		ЗначенияАналитик.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		
		КолонкиИзмерения = "";
		КолонкиИзмерения = КолонкиИзмерения + "СтатьяОборотов";
		КолонкиИзмерения = КолонкиИзмерения + ", ФункцияЦФО";
		КолонкиИзмерения = КолонкиИзмерения + ", Объект";
		КолонкиРесурсы = "";
		КолонкиРесурсы = КолонкиРесурсы + "СуммаБезНДС";
		
		Основание_База = Основание.База.Выгрузить(,КолонкиИзмерения + ", " + КолонкиРесурсы);
		Основание_База.Свернуть(КолонкиИзмерения, КолонкиРесурсы);
		
		Для каждого Основание_СтрокаБаза Из Основание_База Цикл
		
			НоваяСтрока = ДобавитьСтрокуРаспределения(ЭтотОбъект);			
			НоваяСтрока.Ок_СтатьяОборотовБДР= Основание_СтрокаБаза.СтатьяОборотов;
			НоваяСтрока.ЦФО					= Основание_СтрокаБаза.ФункцияЦФО;
			НоваяСтрока.Аналитика_2			= Основание_СтрокаБаза.Объект;
			НоваяСтрока.СуммаБезНДС			= Основание_СтрокаБаза.СуммаБезНДС;
			
			НоваяСтрока.Сумма				= НоваяСтрока.СуммаБезНДС / 100* (100 + СтавкаНДСЧисло);
			НоваяСтрока.НДС  				= НоваяСтрока.Сумма - НоваяСтрока.СуммаБезНДС;
		
		КонецЦикла; 
		
		Если Распределение.Количество() = 0 Тогда
			НоваяСтрока = ДобавитьСтрокуРаспределения(ЭтотОбъект);
		КонецЕсли; 
	
	КонецЕсли;

	СтрокаРаспределение = Распределение[0];
	МассивИсключ = Новый Массив;
	СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка",МассивИсключ);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДокументОснование", 	ДокументОснование);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 	ДоговорКонтрагента);
	СтруктураПараметров.Вставить("НДС", 				НДС);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4337)
	СтруктураПараметров.Вставить("ДокументОбъект", ЭтотОбъект);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4337)
	
	НазначениеПлатежа = Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьНазначениеПлатежа(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюНаРасчетныйСчет(Основание)
	
	Распределение.Очистить();

	Дата 							= ТекущаяДатаСеанса();
	ДокументОснование 				= Основание;
	
	ФормаОплаты 					= ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные");
	ВидОперации						= ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю");
	Важность						= ПредопределенноеЗначение("Перечисление.бит_Важность.Средняя");
	ТипЗаявки 						= ПредопределенноеЗначение("Перечисление.бит_ТипыЗаявокНаРасходованиеСредств.Плановая");
	ТипПлатежа 						= Справочники.бит_ТипыПлатежей.НайтиПоНаименованию("Оплата");		
	Сценарий 						= СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования");
	Организация 					= Основание.Организация;
	Контрагент	 					= Основание.Контрагент;
	ДоговорКонтрагента				= Основание.ДоговорКонтрагента;
	ВалютаДокумента					= ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СБ_БанковскийСчетКонтрагента 	= Справочники.ДоговорыКонтрагентов.ПолучитьБанковскийСчетКонтрагента(ДоговорКонтрагента, Контрагент);
	НеВключатьВПлатежныйКалендарь 	= Истина;
	ок_СпособСоздания 				= 4;
	
	ПолучитьКурсВалюты();
	
	КолонкиИзмерения = "";
	КолонкиИзмерения = КолонкиИзмерения + "ДоговорКонтрагента";
	КолонкиИзмерения = КолонкиИзмерения + ", СтавкаНДС";
	КолонкиРесурсы = "";
	КолонкиРесурсы = КолонкиРесурсы + "СуммаВзаиморасчетов";
	КолонкиРесурсы = КолонкиРесурсы + ", СуммаНДС";	
	
	Основание_РасшифровкаПлатежа = Основание.РасшифровкаПлатежа.Выгрузить(,КолонкиИзмерения + ", " + КолонкиРесурсы);
	Основание_РасшифровкаПлатежа.Свернуть(КолонкиИзмерения, КолонкиРесурсы);
	
	Для каждого Основание_СтрокаРасшифровкаПлатежа Из Основание_РасшифровкаПлатежа Цикл
	
		НоваяСтрока = ДобавитьСтрокуРаспределения(ЭтотОбъект);
		НоваяСтрока.ДоговорКонтрагента 	= Основание_СтрокаРасшифровкаПлатежа.ДоговорКонтрагента;
		НоваяСтрока.СтавкаНДС 			= Основание_СтрокаРасшифровкаПлатежа.СтавкаНДС;
		НоваяСтрока.Сумма 				= Основание_СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов;
		НоваяСтрока.НДС 				= Основание_СтрокаРасшифровкаПлатежа.СуммаНДС;
		НоваяСтрока.СуммаБезНДС			= НоваяСтрока.Сумма - НоваяСтрока.НДС;
	
	КонецЦикла; 
	
	Если Распределение.Количество() = 0 Тогда
		НоваяСтрока = ДобавитьСтрокуРаспределения(ЭтотОбъект);
	КонецЕсли; 
	
	СтрокаРаспределение = Распределение[0];
	МассивИсключ = Новый Массив;
	СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка",МассивИсключ);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДокументОснование", 	ДокументОснование);
	СтруктураПараметров.Вставить("НДС", 				НДС);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4337)
	СтруктураПараметров.Вставить("ДокументОбъект", ЭтотОбъект);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4337)
	
	НазначениеПлатежа = Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьНазначениеПлатежа(СтруктураПараметров);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-23 (#3842)

Процедура ЗаполнитьПоОснованию(Основание)

	МетаданныеОснования = Основание.Метаданные();
	
	// Устанавливаем вид основной панели - список.
	Распределение.Очистить();
	
	// Устанавливаем значения реквизитов шапки.
	ДокументОснование = Основание;
	ЕстьДоговор		  = ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеОснования); 
	
	ИменаРеквизитовОснования = "Организация, Проведен, Дата";
	
	//БИТ АКриштопов 15.03.2016 ++
	Попытка
		ОК_ID_Разноска_ДокОснования = Основание.ОК_ID_Разноска;
	Исключение
	КонецПопытки;
	//БИТ АКриштопов 15.03.2016 --	
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОснования) Тогда
		ИменаРеквизитовОснования = ИменаРеквизитовОснования + ", Контрагент"; 
	КонецЕсли;
	Если ЕстьДоговор Тогда
		ИменаРеквизитовОснования = ИменаРеквизитовОснования + ", ДоговорКонтрагента";
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеОснования) Тогда
		ИменаРеквизитовОснования = ИменаРеквизитовОснования + ", ВалютаДокумента";
	Иначе
		ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ФормаОплаты", МетаданныеОснования) Тогда
		ИменаРеквизитовОснования = ИменаРеквизитовОснования + ", ФормаОплаты";
	КонецЕсли;
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, ИменаРеквизитовОснования);
	Если НЕ ЕстьДоговор Тогда
		РеквизитыОснования.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());	
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыОснования,, "Проведен, Дата");
	ПолучитьКурсВалюты();
	
	ТипЗаявки 	= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
	ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	ВидОперации	= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
	
	// Из дополнительных аналитик основания.
	ЗначенияАналитик = ПоляТаблицыРаспределение();
	ТаблицаАналитик  = бит_Казначейство.ЗаполнитьТаблицуАналитик(ЭтотОбъект, ДокументОснование, 
						мНастройкиИзмерений, "Распределение");
						
	Для каждого СтрокаТаблицы Из ТаблицаАналитик Цикл
		ЗначенияАналитик.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
	КонецЦикла; 
						
	// Из договора.
	Если ЗначениеЗаполнено(РеквизитыОснования.ДоговорКонтрагента) Тогда
		СписокРеквизитов  = "бит_Проект, бит_ЦФО, бит_ОсновнаяСтатьяОборотов, бит_СтатьиОборотов, СрокОплаты";
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыОснования.ДоговорКонтрагента, СписокРеквизитов);
		
		ДатаОснования 			  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
		ПредполагаемаяДатаРасхода = ДатаОснования + РеквизитыДоговора.СрокОплаты *60*60*24;
		ДатаРасхода = Макс(ОбщегоНазначения.ТекущаяДатаПользователя(), ПредполагаемаяДатаРасхода);
		
		СтатьяКандидат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияАналитик,"СтатьяОборотов", Неопределено);		
		Если ЗначениеЗаполнено(СтатьяКандидат) Тогда
			ТипСтатьи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяКандидат, "ТипСтатьи");
			Если ТипСтатьи <> Перечисления.бит_ТипыСтатейОборотов.БДДС Тогда
				СтатьяКандидат = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтатьяКандидат) Тогда
			Если ЗначениеЗаполнено(РеквизитыДоговора.бит_ОсновнаяСтатьяОборотов) Тогда
				СтатьяКандидат = РеквизитыДоговора.бит_ОсновнаяСтатьяОборотов;
			Иначе	
				ТаблицаСтатьиОборотов = РеквизитыДоговора.бит_СтатьиОборотов.Выгрузить();
				Результат = ТаблицаСтатьиОборотов.НайтиСтроки(Новый Структура("РасходДоход", Перечисления.бит_РасходДоход.Расходование));
				Для каждого СтрокаТаблицы Из Результат Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяОборотов) Тогда
						ТипСтатьи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.СтатьяОборотов, "ТипСтатьи");
						Если ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР Тогда
							СтатьяКандидат = СтрокаТаблицы.СтатьяОборотов;
							Прервать;				
						КонецЕсли;  
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		ЗначенияАналитик.Вставить("СтатьяОборотов", СтатьяКандидат);
		ЗначенияАналитик.Вставить("ДоговорКонтрагента", Основание.ДоговорКонтрагента);
		
		Если НЕ ЗначениеЗаполнено(ЗначенияАналитик.Проект) Тогда
			ЗначенияАналитик.Вставить("Проект", РеквизитыДоговора.бит_Проект);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ЗначенияАналитик.ЦФО) Тогда
			ЗначенияАналитик.Вставить("ЦФО", РеквизитыДоговора.бит_ЦФО);
		КонецЕсли; 		
	КонецЕсли; 
		
	// Из настроек пользователя.
	Пользователь = Пользователи.ТекущийПользователь();
	Если НЕ ЗначениеЗаполнено(ЗначенияАналитик.ЦФО) Тогда
		ЗначенияАналитик.Вставить("ЦФО", бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновноеЦФО", Пользователь));
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ЗначенияАналитик.Проект) Тогда
		ЗначенияАналитик.Вставить("Проект", бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект", Пользователь));
	КонецЕсли; 
	
	Результат = бит_Казначейство.ПолучитьРезультатЗапросаПоСуммам(Основание);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-21 (#3816)
	//Если Результат.Пустой() Тогда
	Если ТипЗнч(Результат) <> Тип("РезультатЗапроса")
		ИЛИ Результат.Пустой() 
		Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-21 (#3816)
		НоваяСтрока = ДобавитьСтрокуРаспределения(ЗначенияАналитик); 
	Иначе	
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДобавитьСтрокуРаспределения(ЗначенияАналитик);
			НоваяСтрока.Сумма 				= Выборка.Сумма;
			НоваяСтрока.СтавкаНДС 			= Выборка.СтавкаНДС;
			НоваяСтрока.НДС 				= Выборка.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаРаспределение = Распределение[0];
	МассивИсключ = Новый Массив;
	СинхронизироватьРеквизитыШапкиИСтроки(СтрокаРаспределение,"Шапка",МассивИсключ);
		
	// Инициализация доп измерений для общей формы и для списка.
	Если Распределение.Количество() > 1 Тогда
		Для каждого Строка Из Распределение Цикл
			бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(Строка,мИзмеренияДоп,мНастройкиИзмерений);
		КонецЦикла;
	Иначе 
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект,мИзмеренияДоп,мНастройкиИзмерений);	
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ДокументОснование", 	ДокументОснование);
		СтруктураПараметров.Вставить("ДоговорКонтрагента", 	ДоговорКонтрагента);
		СтруктураПараметров.Вставить("СтатьяОборотов", 		СтатьяОборотов);
		СтруктураПараметров.Вставить("НДС", 				НДС);
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4337)
		СтруктураПараметров.Вставить("ДокументОбъект", ЭтотОбъект);
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4337)
		
		НазначениеПлатежа = Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьНазначениеПлатежа(СтруктураПараметров);

	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СБ_БанковскийСчетКонтрагента) Тогда
		СБ_БанковскийСчетКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьБанковскийСчетКонтрагента(ДоговорКонтрагента, Контрагент);
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизиты()

	ВидимостьРеквизитов = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ЭтотОбъект);

	Если НЕ ВидимостьРеквизитов.КонтрагентНеобходим Тогда
		Контрагент = Неопределено;
	КонецЕсли; 
	Если НЕ ВидимостьРеквизитов.ДоговорНеобходим Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли; 
	Если НЕ ВидимостьРеквизитов.ФизическоеЛицоНеобходим Тогда
		ФизическоеЛицо = Неопределено;
	КонецЕсли;
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-03 (#ТП_БП05_ФР07)
	// Добавлено заполнение получателя при виде операции выдача подотчетному лицу
	//Если НЕ ВидимостьРеквизитов.ТретьеЛицоНеобходимо Тогда
	//	Получатель = Неопределено;
	//КонецЕсли;
	Если Не ВидимостьРеквизитов.ТретьеЛицоНеобходимо И Не ВидимостьРеквизитов.ЭтоПодотчет  Тогда
		Получатель = Неопределено;
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-03 (#ТП_БП05_ФР07)

	Если ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей Тогда
		ДокументОснование = Неопределено;
	КонецЕсли; 	
	
	ОперацииБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС();
	БезНДС 		   = ОперацииБезНДС.Найти(ВидОперации) <> Неопределено;
	
	Если БезНДС Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		НДС		  = 0;
	КонецЕсли; 

	Для каждого СтрокаТаблицы Из Распределение Цикл
		Если НЕ ВидимостьРеквизитов.ДоговорНеобходим Тогда
			СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
		КонецЕсли; 
		Если БезНДС Тогда
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаТаблицы.НДС		= 0;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Соответствие имен реквизитов шапки и платежной позиции для синхронизации.
//
Функция ПарныеРеквизитыШапки()
	
	// Пример: ПарныеРеквизиты.Вставить(РеквизитЗаявки, РеквизитПозиции);
	ПарныеРеквизиты = Новый Структура;
	ПарныеРеквизиты.Вставить("ПометкаУдаления"   , "ПометкаУдаления");
	ПарныеРеквизиты.Вставить("Организация"       , "Организация");
	ПарныеРеквизиты.Вставить("Контрагент"        , "Контрагент");
	ПарныеРеквизиты.Вставить("ЦФО"               , "ЦФО"); 
	ПарныеРеквизиты.Вставить("Важность"          , "Важность");
	//ПарныеРеквизиты.Вставить("НазначениеПлатежа" , "НазначениеПлатежа");
	ПарныеРеквизиты.Вставить("ДатаРасхода"       , "ДатаРасхода");
	ПарныеРеквизиты.Вставить("ДатаПлатежаКрайняя", "ДатаПлатежаКрайняя");
	ПарныеРеквизиты.Вставить("ВалютаДокумента"   , "ВалютаДокумента");
	ПарныеРеквизиты.Вставить("КурсДокумента"     , "КурсДокумента");
	ПарныеРеквизиты.Вставить("КратностьДокумента", "КратностьДокумента");
	ПарныеРеквизиты.Вставить("СтавкаНДС"         , "СтавкаНДС");
	ПарныеРеквизиты.Вставить("ФизическоеЛицо"    , "ФизическоеЛицо");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-05 (#3423)
	ПарныеРеквизиты.Вставить("СБ_БанковскийСчетКонтрагента", "БанковскийСчетКонтрагент");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-05 (#3423)
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеНалогаЗаТретьихЛиц Тогда
		ПарныеРеквизиты.Вставить("Получатель", "Контрагент");
	КонецЕсли;
	
	Возврат ПарныеРеквизиты;
	
КонецФункции

// Соответствие имен реквизитов шапки и ТЧ для синхронизации.
//
Функция ПарныеРеквизитыТаблицы()
	
	ПарныеРеквизиты = Новый Структура;
	ПарныеРеквизиты.Вставить("ЦФО"                       , "ЦФО");
	ПарныеРеквизиты.Вставить("СтатьяОборотов"            , "СтатьяОборотов");
	ПарныеРеквизиты.Вставить("ВидПлатежаПоКредитамЗаймам", "ВидПлатежаПоКредитамЗаймам");
	ПарныеРеквизиты.Вставить("Проект"                    , "Проект");
	ПарныеРеквизиты.Вставить("ДоговорКонтрагента"        , "ДоговорКонтрагента");
	ПарныеРеквизиты.Вставить("Сумма"                     , "Сумма");
	ПарныеРеквизиты.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	ПарныеРеквизиты.Вставить("НДС"                       , "НДС");
	ПарныеРеквизиты.Вставить("НоменклатурнаяГруппа"      , "НоменклатурнаяГруппа");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-14 (#3065)
	ПарныеРеквизиты.Вставить("Ок_СтатьяОборотовБДР"      , "Ок_СтатьяОборотовБДР");
	ПарныеРеквизиты.Вставить("СуммаБезНДС"               , "СуммаБезНДС");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-14 (#3065)
	
	МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По МаксКолвоДопАналитик Цикл
		ПарныеРеквизиты.Вставить("Аналитика_" + н	, "Аналитика_" + н);
	КонецЦикла;
	
	Возврат ПарныеРеквизиты;
	
КонецФункции

Функция ПоляТаблицыРаспределение()

	Реквизиты 	= Новый Структура;
	Реквизиты.Вставить("ДоговорКонтрагента",   Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Реквизиты.Вставить("ЦФО", 				   Справочники.Подразделения.ПустаяСсылка());
	Реквизиты.Вставить("СтатьяОборотов", 	   Справочники.бит_СтатьиОборотов.ПустаяСсылка());
	Реквизиты.Вставить("Проект", 			   Справочники.Проекты.ПустаяСсылка());
	Реквизиты.Вставить("НоменклатурнаяГруппа", Справочники.НоменклатурныеГруппы.ПустаяСсылка());
	
	Для Индекс = 1 По 7 Цикл
		Реквизиты.Вставить("Аналитика_" + Индекс);	
	КонецЦикла; 
	
	Возврат Реквизиты;
	
КонецФункции

// Процедура синхронизирует проведение заявки и платежных позиций.
//
// Параметры:
//  флПроведен  - Булево.
//  ТекущийСтатус - Справочники.бит_СтатусыОбъектов.
//
Процедура СинхронизироватьПроведениеПозиций(флПроведен,ТекущийСтатус)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийСтатус = Справочники.бит_СтатусыОбъектов.Заявка_Утверждена И флПроведен Тогда
		// В статусе утвержден проведем непроведенные платежные позиции.
		МассивПозиций = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка,"бит_ПлатежнаяПозиция","НеПроведен");
		Для каждого Позиция Из МассивПозиций Цикл
			
			Если НЕ Позиция.ПометкаУдаления Тогда
				
				ПозицияОбъект = Позиция.ПолучитьОбъект();
			    ПозицияОбъект.ДополнительныеСвойства.Вставить("ПрограммнаяЗапись");				
				Удача = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект,
								РежимЗаписиДокумента.Проведение,,"Ошибки");
				Если НЕ Удача Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось провести %1'"), Позиция);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли (ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.Заявка_Закрыта 
		        И ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.Заявка_Оплачена) Тогда
		
		// В более ранних статусах проведенных позиций быть не должно.
		Если ТекущийСтатус <> Справочники.бит_СтатусыОбъектов.Заявка_Рабочая Тогда
		
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Документ.Ссылка КАК Ссылка,
			|	ЕСТЬNULL(СостояниеОплаты.Статус, ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.ПустаяСсылка)) КАК СостояниеОплаты
			|ИЗ
			|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК Документ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК СостояниеОплаты
			|		ПО Документ.Ссылка = СостояниеОплаты.Объект
			|			И (СостояниеОплаты.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.СостояниеОплаты))
			|ГДЕ
			|	Документ.Ссылка = &Ссылка";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.СостояниеОплаты)
					И (Выборка.СостояниеОплаты = Справочники.бит_СтатусыОбъектов.Оплата
					ИЛИ Выборка.СостояниеОплаты = Справочники.бит_СтатусыОбъектов.Переплата
					ИЛИ Выборка.СостояниеОплаты = Справочники.бит_СтатусыОбъектов.ЧастичнаяОплата) Тогда
					
					УстановитьПривилегированныйРежим(Ложь);
					Возврат;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		
		МассивПозиций = бит_ОбщегоНазначения.НайтиПодчиненныеДокументы(Ссылка,"бит_ПлатежнаяПозиция","Проведен");
		Для каждого Позиция Из МассивПозиций Цикл
			Если НЕ Позиция.ПометкаУдаления Тогда
				ПозицияОбъект = Позиция.ПолучитьОбъект();
				бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПозицияОбъект,РежимЗаписиДокумента.ОтменаПроведения,,"Ошибки");
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // СинхронизироватьПроведениеПозиций()

Процедура АктуализироватьПоКурсамСвязанныеДокуенты(СвязанныеДокументы, КурсыВалют, РежимыВывода, Отказ)
	
	Для каждого СтрокаТаблицы Из СвязанныеДокументы Цикл
		
		Если СтрокаТаблицы.Оплачено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.УсловиеАктуализации = Перечисления.бит_УсловияПоКурсу.Оператор Тогда
			Продолжить;		
		КонецЕсли; 
		
		Если ТранзакцияАктивна() Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.бит_ПлатежнаяПозиция");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.Позиция);
			Попытка
				Блокировка.Заблокировать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при актуализации курса документа %1. 
												|Не удалось заблокировать объект. По причине: %2'"), 
												СтрокаТаблицы.Позиция, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Позиция,,,Отказ);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Актуализация курса'", ОбщегоНазначения.КодОсновногоЯзыка()),
											УровеньЖурналаРегистрации.Ошибка,,Ссылка,ТекстСообщения);
				Продолжить;
			КонецПопытки; 
		КонецЕсли; 
		
		ТекущийДокумент = СтрокаТаблицы.Позиция.ПолучитьОбъект();
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
		ТекущийДокумент.ДатаРасхода = ДатаРасхода;
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
		ТекущийДокумент.КурсДокумента 		= КурсыВалют.Курс;
		ТекущийДокумент.КратностьДокумента 	= КурсыВалют.Кратность;
		
		Попытка
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при актуализации курса документа %1. По причине: %2'"), 
								СтрокаТаблицы.Позиция, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
								
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Позиция,,,Отказ);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Актуализация курса'", ОбщегоНазначения.КодОсновногоЯзыка()),
										УровеньЖурналаРегистрации.Ошибка,,Ссылка,ТекстСообщения);
		КонецПопытки; 
		
		Если НЕ Отказ И ТекущийДокумент.Проведен Тогда
			ТекущийДокумент.АктуализироватьПоКурсам();
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-05-19 (#НТП_БП12_ФР04)
			//ТекстСообщения = СтрШаблон(НСтр("ru = '%1. Курс актуализирован.'"), СтрокаТаблицы.Позиция); 
			//ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Позиция);
			//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-05-19 (#НТП_БП12_ФР04)
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Функция РеквизитыШапкиПоДаннымБД(ДокументСсылка)

	ПарныеРеквизитыШапки = ПарныеРеквизитыШапки();
	КонтролируемыеРеквизиты = Новый Массив; 
	Для каждого КлючЗначение Из ПарныеРеквизитыШапки Цикл
		КонтролируемыеРеквизиты.Добавить(КлючЗначение.Ключ);
	КонецЦикла; 
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, 
									КонтролируемыеРеквизиты);
	
	Возврат Реквизиты;
	
КонецФункции

// ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-10-26 (#4412)
Процедура АктуализироватьНазначениеПлатежа()
	
	Если ДополнительныеСвойства.Свойство("АктуализироватьНазначениеПлатежа_СуммаНДС") Тогда
	
		Если НДСРегл <> 0
			И СтрНайти(НРег(НазначениеПлатежа), НРег("в т.ч. НДС")) <> 0 Тогда
			
			НазначениеПлатежа = СтрШаблон("%1 %2 %3", 
											Лев(НазначениеПлатежа, СтрНайти(НРег(НазначениеПлатежа), НРег("в т.ч. НДС"))),
											"в т.ч. НДС",
											?(ок_НалоговыйАгент, 0, НДСРегл));
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры
// ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-10-26 (#4412) 
#КонецОбласти 

#Область ПроцедурыИФункцииОбщегоНазначения

Функция ДобавитьСтрокуРаспределения(ДанныеЗаполнения)

	НоваяСтрока    = Распределение.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	НоваяСтрока.ИД = Новый УникальныйИдентификатор();
	
	Возврат НоваяСтрока;
	
КонецФункции

// Процедура формирует список доступных видов договоров.
//
Функция ОпределитьСписокДоступныхВидовДоговоровПоОперацииМодуль()
	
	СписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		бит_ДоговораСервер.ДобавитьВидыДоговоровНаЗакупку(СписокВидовДоговоров);
		
	ИначеЕсли ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику Тогда
		
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);	
		бит_ДоговораСервер.ДобавитьВидыДоговоровНаЗакупку(СписокВидовДоговоров);		
		
	Иначе	
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли; 
	
	Возврат СписокВидовДоговоров;
	
КонецФункции

// Процедура проверяет подходят ли реквизиты прогноза для текущего вида операции.
//
Процедура ПроверитьСоответствиеВидаОперацииИДанныхОснования() Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование) 
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	// Проверим реквизиты, используемые в текущем виде операции, если реквизит не используется(скрыт) - очистим его. 	
	СтруктураПараметров = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ЭтотОбъект);
	
	Если Не СтруктураПараметров.КонтрагентНеобходим Тогда
		Контрагент = Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПараметров.ДоговорНеобходим Тогда
		Для Каждого СтрокаТаблицы Из Распределение Цикл
			СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	СписокВидовДоговоров = ОпределитьСписокДоступныхВидовДоговоровПоОперацииМодуль();
	
	Для Каждого СтрокаТаблицы Из Распределение Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидДоговораВСтроке = СтрокаТаблицы.ДоговорКонтрагента.ВидДоговора;
		
		Если СписокВидовДоговоров.НайтиПоЗначению(ВидДоговораВСтроке) = Неопределено Тогда
			СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если Распределение.Количество() > 0 Тогда
		СинхронизироватьРеквизитыШапкиИСтроки(Распределение[0], "Шапка");
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет шапку документа.
//
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.бит_ЗаявкаНаРасходованиеСредств.
//
Процедура ЗаполнитьШапкуДокумента(ПараметрОбъектКопирования = Неопределено)
	
	Дата = ТекущаяДатаСеанса();
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ВалютаДокумента    = Константы.ВалютаРегламентированногоУчета.Получить();
			КурсДокумента      = 1;
			КратностьДокумента = 1;			
		КонецЕсли; 
		Важность = Перечисления.бит_Важность.Средняя;
	Иначе // Документ скопирован.
		ДокументОснование	= Неопределено;
		ЭтоКазначейство		= Ложь;
		ДатаРасхода			= Дата('00010101');
		ДатаПлатежаКрайняя	= Дата('00010101');
		ПолучитьКурсВалюты();
	КонецЕсли;
	
	СуммаВключаетНДС = Истина;
		
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, Пользователи.ТекущийПользователь(), 
		ПараметрОбъектКопирования,"РасходованиеБДДС");
												
	// Ищет сценарий в настройках программы, иначе берет из настроек пользователя.
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-17 (#3269)
	//// Ищет сценарий в настройках программы, иначе берет из настроек пользователя.
	//СценарийКандидат = ЗаполнитьСценарий();
	//
	//Если ЗначениеЗаполнено(СценарийКандидат) Тогда
	//	Сценарий = СценарийКандидат;
	//КонецЕсли; 
	//Заменено на:
	Сценарий	= Неопределено;
	Аналитика_1 = Неопределено;
	Распределение.ЗагрузитьКолонку(Новый Массив(Распределение.Количество()), "Аналитика_1");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-17 (#3269)
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипЗаявки) Тогда
		ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику
	КонецЕсли; 
	
	ОперацииБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС(); 
	Если ОперацииБезНДС.Найти(ВидОперации) <> Неопределено  Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		НДС		  = 0;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтавкаНДС) И ЗначениеЗаполнено(СтатьяОборотов) Тогда
			СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяОборотов, "СтавкаНДС");
		КонецЕсли; 
	КонецЕсли; 
	
	// Инициализируем значения доп. измерений.
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект, мИзмеренияДоп, мНастройкиИзмерений);
	
	// Заполнение доп. аналитик по данным документа.	
	// 1. Шапка
	Шапка = Новый Массив(); 
	Шапка.Добавить("Контрагент");
	Шапка.Добавить("ФизическоеЛицо");
	Шапка.Добавить("Проект");
	Шапка.Добавить("НоменклатурнаяГруппа");
	
	// 2. ТЧ "Распределение"
	ПоляТаблицы = Новый Массив(); 
	ПоляТаблицы.Добавить("ДоговорКонтрагента");
	ПоляТаблицы.Добавить("Проект");
	ПоляТаблицы.Добавить("НоменклатурнаяГруппа");

	ПараметрыУстановки   = Документы.бит_ЗаявкаНаРасходованиеСредств.ПараметрыУстановкиСвойствАналитик(ЭтотОбъект);
	ПараметрыУстановкиТЧ = Документы.бит_ЗаявкаНаРасходованиеСредств.ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "Распределение");
	
	// Заполнение полей ЭтотОбъект.Аналитика_1 ... _7 по реквизитам шапки.
	Для каждого Реквизит Из Шапка Цикл
		Документы.бит_ЗаявкаНаРасходованиеСредств.ЗаполнитьДопАналитикуПоДаннымДокумента(ЭтотОбъект,
			ЭтотОбъект[Реквизит], ПараметрыУстановки);
	КонецЦикла;
	
	// Заполнение полей ЭтотОбъект.Распределение[0...n].Аналитика_1 ... _7 по реквизитам строки.
	Для каждого СтрокаТаблицы Из Распределение Цикл
		Для каждого Реквизит Из ПоляТаблицы Цикл
			Документы.бит_ЗаявкаНаРасходованиеСредств.ЗаполнитьДопАналитикуПоДаннымДокумента(СтрокаТаблицы, 
				СтрокаТаблицы[Реквизит], ПараметрыУстановкиТЧ);
		КонецЦикла; 
	КонецЦикла;
		
	Сумма = Распределение.Итог("Сумма");
	НДС   = Распределение.Итог("НДС");
		
	Если Распределение.Количество() = 0 Тогда
		СтрокаТаблицы = Распределение.Добавить();
		СтрокаТаблицы.ИД = Строка(Новый УникальныйИдентификатор());
		СинхронизироватьРеквизитыШапкиИСтроки(СтрокаТаблицы, "Строка");
	КонецЕсли; 

	СверхБюджета = Ложь;
	ДатаРасхода = ОбщегоНазначения.ТекущаяДатаПользователя();
	Если ПустаяСтрока(НазначениеПлатежа) Тогда
		НазначениеПлатежа = Документы.бит_ЗаявкаНаРасходованиеСредств.ПолучитьНазначениеПлатежа(ЭтотОбъект, Ложь, Истина);
	КонецЕсли; 
	
КонецПроцедуры

// Функция заполняет сценарий.
//
Функция ЗаполнитьСценарий() Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	
	Если ЗначениеЗаполнено(Дата) Тогда 
		НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата , , СтруктураПараметров, "Ошибки");
	Иначе 
		НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя()), , СтруктураПараметров, "Ошибки");
	КонецЕсли;	
	
	флКонтролироватьЗаявку = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, "КонтролироватьЗаявкуПоБюджету");
	флСценарийКонтроляПоБюджету = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, "СценарийКонтроляПоБюджету");
	
	Если флКонтролироватьЗаявку Тогда
   		Возврат флСценарийКонтроляПоБюджету;
	КонецЕсли; 
	
КонецФункции // ЗаполнитьСценарий()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

Процедура ВыполнитьВалютныйКонтрольДоговоров(Отказ)
	
	МожетБытьВВалюте = Ложь;
	Если ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
		ВсеВидыОперацийРегл	= бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("РасходныйКассовыйОрдер");
		ВидОперацииРегл		= ВсеВидыОперацийРегл[ВидОперации];
		МожетБытьВВалюте 	= РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(ВидОперацииРегл);
	Иначе	
		ВсеВидыОперацийРегл	= бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("СписаниеСРасчетногоСчета");
		ВидОперацииРегл		= ВсеВидыОперацийРегл[ВидОперации];
		МожетБытьВВалюте 	= СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(ВидОперацииРегл);
	КонецЕсли;	
	
	Договоры 		   = Распределение.ВыгрузитьКолонку("ДоговорКонтрагента");
	РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Договоры, 
							"РасчетыВУсловныхЕдиницах, ВалютаВзаиморасчетов, Валютный, ОплатаВВалюте");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ОплатаВВалюте = ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	ШаблонСообщения = НСтр("ru = 'Валюта взаиморасчетов не соответствует условиям оплаты.'");
	МногострочныйДокумент = Распределение.Количество() > 1;
	
	Для каждого СтрокаТаблицы Из Распределение Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			Продолжить;		
		КонецЕсли;
		
		Если МногострочныйДокумент Тогда
			Поле = "Распределение[%1].ДоговорКонтрагента";
			Поле = СтрШаблон(Поле, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
		Иначе
			Поле = "ДоговорКонтрагента";
		КонецЕсли; 
		
		РеквизитыДоговора = РеквизитыДоговоров[СтрокаТаблицы.ДоговорКонтрагента];
		Ошибка 			  = Ложь;
		
		Если ОплатаВВалюте И РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаДокумента Тогда
			Ошибка = Истина;
		КонецЕсли; 
		
		Если НЕ ОплатаВВалюте И РеквизитыДоговора.ОплатаВВалюте <> ОплатаВВалюте Тогда
			Ошибка = Истина;
		КонецЕсли; 

		Если НЕ МожетБытьВВалюте Тогда
			Если РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
				Ошибка = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		Если Ошибка Тогда
			Если МногострочныйДокумент Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"КОЛОНКА", "КОРРЕКТНОСТЬ", НСтр("ru = 'Договор'"), СтрокаТаблицы.НомерСтроки,
					НСтр("ru = 'Распределение'"), ШаблонСообщения);
			Иначе	
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, 
					"КОРРЕКТНОСТЬ", НСтр("ru = 'Договор'"),,, ШаблонСообщения);
			КонецЕсли; 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
				ЭтотОбъект, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицуПланируемыйРасход()

	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	Распределение.ЦФО КАК ЦФО,
	|	Распределение.СтатьяОборотов КАК СтатьяОборотов,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-08 (#3065)
	|	Распределение.Ок_СтатьяОборотовБДР,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-08 (#3065)	
	|	Распределение.Проект КАК Проект,
	|	Распределение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Распределение.Сумма КАК Сумма,
	|	Распределение.СтавкаНДС КАК СтавкаНДС,
	|	Распределение.НДС КАК НДС,
	|	Распределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Распределение.Аналитика_1 КАК Аналитика_1,
	|	Распределение.Аналитика_2 КАК Аналитика_2,
	|	Распределение.Аналитика_3 КАК Аналитика_3,
	|	Распределение.Аналитика_4 КАК Аналитика_4,
	|	Распределение.Аналитика_5 КАК Аналитика_5,
	|	Распределение.Аналитика_6 КАК Аналитика_6,
	|	Распределение.Аналитика_7 КАК Аналитика_7,
	|	Распределение.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	Распределение.Ссылка.ФормаОплаты КАК ФормаОплаты,
	|	Распределение.Ссылка.Организация КАК Организация
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК Распределение
	|ГДЕ
	|	Распределение.Ссылка = &Ссылка";
					
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;

КонецФункции // ПодготовитьТаблицуПланируемыйРасхода()

Функция ПолучитьОстаткиПоОбщейЗаявке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Организация,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.ВидДенежныхСредств,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Валюта,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.ДокументПланирования,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.ЦФО,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.СтатьяОборотов,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Проект,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.НоменклатурнаяГруппа,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Контрагент,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.ДоговорКонтрагента,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.БанковскийСчет,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Аналитика_1,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Аналитика_2,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Аналитика_3,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Аналитика_4,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Аналитика_5,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Аналитика_6,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.Аналитика_7,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.СуммаКонечныйОстаток КАК Сумма,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.СуммаРеглКонечныйОстаток КАК СуммаРегл,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК СуммаУпр,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.СуммаВзаиморасчетыКонечныйОстаток КАК СуммаВзаиморасчеты,
	|	бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты.СуммаПриход КАК СуммаПрогноз
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.ОстаткиИОбороты(, , Период, , ДокументПланирования = &ДокументПланирования) КАК бит_ПланируемыйРасходДенежныхСредствОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("ДокументПланирования", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаОстатков = Результат.Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции

Функция ТаблицаРасходПоПрогнозуПлатежа()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.ЦФО,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.СтатьяОборотов,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Проект,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.ДоговорКонтрагента,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Сумма,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтавкаНДС,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НДС,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_1,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_2,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_3,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_4,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_5,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_6,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Аналитика_7,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.ИД,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.ВалютаДокумента,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.ФормаОплаты,
	|	бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка.Организация
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредствОбщая.Распределение КАК бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	|		ПО бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.ИД = бит_ЗаявкаНаРасходованиеСредствРаспределение.ИД_Прогноз
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка = &Ссылка
	|	И бит_ЗаявкаНаРасходованиеСредствОбщаяРаспределение.Ссылка = &ДокументОснование";
					
	Запрос.УстановитьПараметр("Ссылка"			 , Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции

Процедура СписатьОстаткиСОбщейЗаявки(СтруктураШапкиДокумента, ТаблицаНабораЗаписей, Отказ, Заголовок)
	
	Если ЗначениеЗаполнено(ДокументОснование) 
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	// Получим настройки программы
	флКонтрольОстаткаПоОбщейЗаявке = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьОстаткиПоОбщейЗаявке);
	ПроцентПревышения = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,ПланыВидовХарактеристик.бит_НастройкиПрограммы.ДопустимыйПроцентПревышенияСуммыПрогнозаПлатежа);
	
	СтруктураШапкиДокументаОснование = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументОснование);
	
	// Получим таблицу движений
	НаборЗаписей = Движения.бит_ПланируемыйРасходДенежныхСредств; 
	
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Получим таблицу данных по прогнозу
	ТаблицаРасход = ТаблицаРасходПоПрогнозуПлатежа();
	
	// Добавим колонки для контроля сумм.
	
	// При контроле остатков наличие суммы в поле КонтрольСуммаЗаявки говорит о том
	// , что данные по текущей строке есть в заявке.
	ТаблицаДвижений.Колонки.Добавить("КонтрольСуммаЗаявки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	// При контроле остатков наличие суммы в поле КонтрольСуммаПрогноз говорит о том
	// , что данные по текущей строке есть в регистре.
	ТаблицаДвижений.Колонки.Добавить("КонтрольСуммаПрогноз", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	// При контроле остатков сумма в поле КонтрольСуммаОстаток 
	// - это остаток, который получится после закрытия прогноза суммами из заявки.
	ТаблицаДвижений.Колонки.Добавить("КонтрольСуммаОстаток", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Получим список колонок таблицы движений
	
	МетаПланируемыйРасходДС = НаборЗаписей.Метаданные();
	ИзмеренияРегистра = МетаПланируемыйРасходДС.Измерения;
	РесурсыРегистра   = МетаПланируемыйРасходДС.Ресурсы;
	
	КолонкиГруппировок  	= "";
	КолонкиСуммирования 	= "";
	КолонкиСуммированияДоп 	= "КонтрольСуммаЗаявки,КонтрольСуммаОстаток,КонтрольСуммаПрогноз";
	
	Для Каждого ИзмерениеРегистра Из ИзмеренияРегистра Цикл
		КолонкиГруппировок = КолонкиГруппировок + ?(ПустаяСтрока(КолонкиГруппировок), "", ",") + ИзмерениеРегистра.Имя;
	КонецЦикла;
	
	Для Каждого РесурсРегистра Из РесурсыРегистра Цикл
		КолонкиСуммирования = КолонкиСуммирования + ?(ПустаяСтрока(КолонкиСуммирования), "", ",") + РесурсРегистра.Имя;
	КонецЦикла;
	
	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Сумма");
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
	#Область ТиповойКод
	//СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
	//СтруктураКурсыВалютОснование = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ДокументОснование,Дата,Новый Структура("Документ,Регл,Упр,Взаиморасчеты"));
	#КонецОбласти
	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,ДатаРасхода,Новый Структура("Документ,Упр,Регл,Взаиморасчеты"));
	СтруктураКурсыВалютОснование = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ДокументОснование,ДатаРасхода,Новый Структура("Документ,Регл,Упр,Взаиморасчеты"));
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
	
	// Заполним таблицу движений.
	Для Каждого СтрокаРасход Из ТаблицаРасход Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация 			= СтруктураШапкиДокументаОснование.Организация;
		СтрокаДвижений.Контрагент           = СтруктураШапкиДокументаОснование.Контрагент;		
		СтрокаДвижений.Валюта      			= СтруктураШапкиДокументаОснование.ВалютаДокумента;
		СтрокаДвижений.ВидДенежныхСредств   = СтруктураШапкиДокументаОснование.ФормаОплаты;
		
		Если СтруктураШапкиДокумента.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные
			И ЗначениеЗаполнено(СтруктураШапкиДокумента.Касса) Тогда
			
			СтрокаДвижений.БанковскийСчет = СтруктураШапкиДокументаОснование.Касса;
		ИначеЕсли СтруктураШапкиДокумента.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
			
			СтрокаДвижений.БанковскийСчет = СтруктураШапкиДокументаОснование.БанковскийСчетОрганизации;
		КонецЕсли;
		
		СтрокаДвижений.СтатьяОборотов       = СтрокаРасход.СтатьяОборотов;
		СтрокаДвижений.Проект               = СтрокаРасход.Проект;
		СтрокаДвижений.ЦФО                  = СтрокаРасход.ЦФО;
		СтрокаДвижений.НоменклатурнаяГруппа = СтрокаРасход.НоменклатурнаяГруппа;
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		Для н = 1 По МаксКолвоДопАналитик Цикл
			СтрокаДвижений["Аналитика_"+н] 	= СтрокаРасход["Аналитика_"+н];
		КонецЦикла;
		
		СтрокаДвижений.ДоговорКонтрагента   = СтрокаРасход.ДоговорКонтрагента;	
		СтрокаДвижений.ДокументПланирования = СтруктураШапкиДокументаОснование.Ссылка;
		
		СтрокаДвижений.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаРасход.Сумма
																			,СтруктураШапкиДокумента.ВалютаДокумента
																			,СтруктураКурсыВалютОснование.Документ.Валюта
																			,СтруктураШапкиДокумента.КурсДокумента
																			,СтруктураКурсыВалютОснование.Документ.Курс
																			,СтруктураШапкиДокумента.КратностьДокумента
																			,СтруктураКурсыВалютОснование.Документ.Кратность);
		
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалютОснование,СтруктураКурсыВалютОснование.Документ);
		
		СтрокаДвижений.КонтрольСуммаЗаявки = СтрокаДвижений.Сумма;
	КонецЦикла;
	
	ТаблицаДляЗаписи = ТаблицаДвижений.Скопировать(,КолонкиГруппировок+","+КолонкиСуммирования);
	
	НаборЗаписей.мПериод          = СтруктураШапкиДокументаОснование.ДатаРасхода;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДляЗаписи;
	НаборЗаписей.ВыполнитьРасход();
	
	НаборЗаписей.Записать();
	
	// Проверим остатки.
	ТаблицаОстатков = ПолучитьОстаткиПоОбщейЗаявке();
	
	ЕстьПревышениеОстатка = Ложь;
	
	ОбщаяСуммаПрогноза = ТаблицаОстатков.Итог("СуммаПрогноз");
	
	Для Каждого СтрокаОстаток Из ТаблицаОстатков Цикл
		Если СтрокаОстаток.Сумма < 0 Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстаток);
			
			// Инициализируем доп.аналитики, т.к. в таблице остатков не заполненные. 
			// Измерения с составным типом приведены к Неопределено
			// , а в таблице движений аналитики приведены к типам -> свертка не произойдет.
			бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока,мИзмеренияДоп,мНастройкиИзмерений);
			
			НоваяСтрока.КонтрольСуммаПрогноз = СтрокаОстаток.СуммаПрогноз;
			НоваяСтрока.КонтрольСуммаОстаток = СтрокаОстаток.Сумма;
			
			ЕстьПревышениеОстатка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПревышениеОстатка Тогда
		// Поймем каким документом сформированы отрицательные остатки, для этого свернем таблицу движений.
		
		// Получим состояние регистра до записи движений текущим документом.
		ТаблицаДвижений.Свернуть(КолонкиГруппировок, КолонкиСуммирования+","+КолонкиСуммированияДоп);
		
		ПредельнаяСуммаПревышения = ОбщаяСуммаПрогноза*(ПроцентПревышения)/100;
		СуммаПревышения = -ТаблицаДвижений.Итог("КонтрольСуммаОстаток");
		
		Если флКонтрольОстаткаПоОбщейЗаявке Тогда
			Если СуммаПревышения > ПредельнаяСуммаПревышения Тогда
				
				СуммаЗаявокСтр = бит_ОбщегоНазначения.ФорматСумм(ОбщаяСуммаПрогноза + СуммаПревышения,
								СтруктураШапкиДокументаОснование.ВалютаДокумента);
								
				СуммаПрогнозаСтр = бит_ОбщегоНазначения.ФорматСумм(ОбщаяСуммаПрогноза,
									СтруктураШапкиДокументаОснование.ВалютаДокумента);
								
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Сумма заявок %1 превысила сумму прогноза %2'"), СуммаЗаявокСтр, СуммаПрогнозаСтр); 
				
				Если ПроцентПревышения <> 0 Тогда
					ТекстУточнения = СтрШаблон(НСтр("ru = ' более чем на %1 %%'"), ПроцентПревышения);
				Иначе
					ТекстУточнения = "";
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Сумма заявок %1 превысила сумму прогноза %2%3.'"),
					СуммаЗаявокСтр, СуммаПрогнозаСтр, ТекстУточнения);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ); 
			КонецЕсли;
		Иначе
			// Остатки по прогнозу не контролируются 
			// - движения сформируем на сумму остатка по прогнозу или на сумму заявки если она не превышает остаток.
		КонецЕсли;
		
		МассивКУдалению = Новый Массив;
		
		Для Каждого СтрокаДвижений Из ТаблицаДвижений Цикл
			
			Если СтрокаДвижений.КонтрольСуммаЗаявки = 0 Тогда 
				// Строка попала сюда по ошибке, такая комбинация измерений есть в остатках, но отсутствует в заявке.
				МассивКУдалению.Добавить(СтрокаДвижений);
				
			ИначеЕсли СтрокаДвижений.Сумма <= 0 Тогда
				
				Если флКонтрольОстаткаПоОбщейЗаявке Тогда
					ОстатокСтр 	   = бит_ОбщегоНазначения.ФорматСумм(СтрокаДвижений.Сумма,
										СтруктураШапкиДокументаОснование.ВалютаДокумента, 0);
					СуммаЗаявокСтр = бит_ОбщегоНазначения.ФорматСумм(СтрокаДвижений.КонтрольСуммаЗаявки,
										СтруктураШапкиДокументаОснование.ВалютаДокумента);
					РазностьСтр    = бит_ОбщегоНазначения.ФорматСумм(СтрокаДвижений.КонтрольСуммаОстаток,
										СтруктураШапкиДокументаОснование.ВалютаДокумента);
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Превышен остаток по прогнозу платежа."
								   + "Остаток %1, Сумма по заявке %2, Разность %3.'") , ОстатокСтр, СуммаЗаявокСтр, РазностьСтр);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , ,Отказ); 
				Иначе
					МассивКУдалению.Добавить(СтрокаДвижений);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из МассивКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			// Восстановим состояние набора записей до списания остатков с прогноза платежа.
			НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
			
			// Спишем остатки с прогноза платежа.
			ТаблицаДляЗаписи = ТаблицаДвижений.Скопировать(,КолонкиГруппировок+","+КолонкиСуммирования);
			
			НаборЗаписей.мПериод          = СтруктураШапкиДокументаОснование.ДатаРасхода;
			НаборЗаписей.мТаблицаДвижений = ТаблицаДляЗаписи;
			НаборЗаписей.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-10 (#ТП_БП05_ФР07)
// добавлен параметр ТаблицаДвиженийРасход
//Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураКурсыВалют,ТаблицаРасход,Отказ,Заголовок)
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураКурсыВалют,ТаблицаРасход,Отказ,Заголовок,ТаблицаДвиженийРасход)
//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-10 (#ТП_БП05_ФР07)

	Для каждого НаборЗаписей Из Движения Цикл
	
		НаборЗаписей.Записывать = Истина;
	
	КонецЦикла; 
	Движения.бит_ПланируемыйРасходДенежныхСредств.БлокироватьДляИзменения = Истина;
	 // Движения по регистру бит_ПланируемыйРасходДенежныхСредств.
	 
	НаборЗаписей = Движения.бит_ПланируемыйРасходДенежныхСредств; 
	 
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого СтрокаРасход Из ТаблицаРасход Цикл
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация 			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Контрагент           = СтруктураШапкиДокумента.Контрагент;		
		СтрокаДвижений.Валюта      			= СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаДвижений.ВидДенежныхСредств   = СтруктураШапкиДокумента.ФормаОплаты;
		Если ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные
			И ЗначениеЗаполнено(СтруктураШапкиДокумента.Касса) Тогда
			СтрокаДвижений.БанковскийСчет   	= СтруктураШапкиДокумента.Касса;
		КонецЕсли;
		СтрокаДвижений.СтатьяОборотов       = СтрокаРасход.СтатьяОборотов;
		СтрокаДвижений.Проект               = СтрокаРасход.Проект;
		СтрокаДвижений.ЦФО                  = СтрокаРасход.ЦФО;
		СтрокаДвижений.НоменклатурнаяГруппа = СтрокаРасход.НоменклатурнаяГруппа;	
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		Для н = 1 По МаксКолвоДопАналитик Цикл
			СтрокаДвижений["Аналитика_"+н]	= СтрокаРасход["Аналитика_"+н];
		КонецЦикла;
		
		СтрокаДвижений.ДоговорКонтрагента   = СтрокаРасход.ДоговорКонтрагента;	
		СтрокаДвижений.Сумма                = СтрокаРасход.Сумма; 
		
		СтрокаДвижений.ДокументПланирования = СтруктураШапкиДокумента.Ссылка;
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	НаборЗаписей.мПериод          = СтруктураШапкиДокумента.ДатаРасхода;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ВыполнитьПриход();
	
	// Если заявка введена на основании общей - спишем сумму с общей заявки.
	СписатьОстаткиСОбщейЗаявки(СтруктураШапкиДокумента, НаборЗаписей.Выгрузить(), Отказ, Заголовок);
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-10 (#ТП_БП05_ФР07)
	Для Каждого СтрокаРасход Из ТаблицаДвиженийРасход Цикл
		
		СтрокаДвижений = НаборЗаписей.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаРасход);
		СтрокаДвижений.Период               = СтруктураШапкиДокумента.ДатаРасхода;
		
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(СтрокаДвижений,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-10 (#ТП_БП05_ФР07)

	
	Движения.бит_ПланируемыйРасходДенежныхСредств.Записать();
	
	Если ПровестиКонтрольСумм() Тогда
		бит_ДоговораСервер.ПровестиКонтрольСуммПоЗаявкам(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры //ДвиженияПоРегистрам()

Процедура ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаРасход,Отказ,Заголовок)
	
	СтруктураПараметров = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ЭтотОбъект);
	Если НЕ СтруктураПараметров.ПроверятьПоБюджету Тогда
		Возврат;
	КонецЕсли; 
	
	НеУчитыватьСверхБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,
								ПланыВидовХарактеристик.бит_НастройкиПрограммы.НеУчитыватьСверхБюджетныеЗаявкиПриКонтролеПоБюджету);
	
	Если НеУчитыватьСверхБюджет И СверхБюджета Тогда
		Возврат;
	КонецЕсли;
	
	КонтролироватьБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,
								ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьЗаявкуПоБюджету);
	Периодичность        = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);	
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаРасхода,Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаРасхода,Периодичность);
	
	// Получаем имя типа Сценарии бюджетирования в зависимости от текущего решения.
	ИмяТипаСценарии = бит_ОбщегоНазначения.ПолучитьИмяТипаСценарииБюджетирования();
	
	ТаблицаДляКонтроля = Распределение.Выгрузить();
	ТаблицаДляКонтроля.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТаблицаДляКонтроля.ЗаполнитьЗначения(0,"Количество");	
	ТаблицаДляКонтроля.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДляКонтроля.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент,"Контрагент");
	ТаблицаДляКонтроля.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата"));
	ТаблицаДляКонтроля.ЗаполнитьЗначения(ДатаНач,"Период");
	ТаблицаДляКонтроля.Колонки.Добавить("Сценарий",Новый ОписаниеТипов(ИмяТипаСценарии));
	ТаблицаДляКонтроля.ЗаполнитьЗначения(Сценарий,"Сценарий");
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	МассивИсключений.Добавить("БанковскийСчет");
	
	ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,мНастройкиИзмерений);
	
	бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
	
	НаборЗаписей = Движения.бит_КонтрольныеЗначенияБюджетов;    
	ТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
	НоваяТаблицаДляКонтроля = ТаблицаДляКонтроля.СкопироватьКолонки();
	
	// ++ Списание по методу уменьшаемого остатка.
	ОписаниеПериода = Новый Структура; 
	ОписаниеПериода.Вставить("Периодичность", Периодичность);
	ОписаниеПериода.Вставить("НачалоПериода", ДатаНач);
	ОписаниеПериода.Вставить("КонецПериода",  ДатаКон);
	
    Остатки = ОстаткиПоКонтрольнымЗначениям(ТаблицаДляКонтроля, ИзмеренияКонтроля, ОписаниеПериода);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"                     ,Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
	СтруктураПараметров.Вставить("РежимКонтроля"                ,"Заявки");
	
	ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	ИзменитьТекстЗапросаДляЦелейКонтроля(ТекстЗапроса, ИзмеренияКонтроля);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;  
	
	МассивСтрокПревышения = Новый Массив;
	
	Для каждого СтрокаТаблицыКонтроля Из ТаблицаДляКонтроля Цикл

		НоваяТаблицаДляКонтроля = ТаблицаДляКонтроля.СкопироватьКолонки();
		НоваяСтрока = НоваяТаблицаДляКонтроля.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыКонтроля);
		
		ВалютаСценария    = Сценарий.Валюта;
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-01 (#НТП_БП12_ФР01)
		#Область ТиповойКод
		//СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария,Дата);
		#КонецОбласти
		// Изменена дата получения курсов валюты с "Дата" на "ДатаРасхода"
		СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария,ДатаРасхода);
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-01 (#НТП_БП12_ФР01)
				
		
		Для каждого СтрокаТаблицы Из НоваяТаблицаДляКонтроля Цикл
			
			СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
																						,ВалютаДокумента
																						,ВалютаСценария
																						,КурсДокумента
																						,СтруктураСценарий.Курс
																						,КратностьДокумента
																						,СтруктураСценарий.Кратность);
		КонецЦикла; 
				
		МассивСтатей = НоваяТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
		ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		
		Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
		Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
		Запрос.УстановитьПараметр("Сценарий"      ,Сценарий);
		Запрос.УстановитьПараметр("СценарийКонтролируемый", Справочники[ИмяСправочникаСценарии].ПустаяСсылка());
		Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
		Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
		Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , НоваяТаблицаДляКонтроля);
		Запрос.УстановитьПараметр("ТаблицаОстатков", Остатки);

		бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(НоваяТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
		Результат = Запрос.Выполнить();
		
		// Корректировка остатков.
		ИзменитьОстаткиКонтрольныхЗначенийПоСтрокеСписания(Остатки, Результат, ИзмеренияКонтроля);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИзмеренияКонтроля"   ,ИзмеренияКонтроля);
		СтруктураПараметров.Вставить("Сценарий"            ,Сценарий);
		СтруктураПараметров.Вставить("КонтролироватьБюджет",КонтролироватьБюджет);
		СтруктураПараметров.Вставить("СверхБюджета"        ,СверхБюджета);
		СтруктураПараметров.Вставить("РежимКонтроля"       ,"Заявки");
		СтруктураПараметров.Вставить("Объект",			   Ссылка);
		
		флОтказДоПроверки = Отказ;
		
		МассивПревышения = бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок);
		Для каждого СтрокаПревышения Из МассивПревышения Цикл
			МассивСтрокПревышения.Добавить(СтрокаПревышения);
		КонецЦикла; 
		
		Если флОтказДоПроверки Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла; 
			
	АдресВХранилище = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "АдресХранилищаСтрокПревышения");
		
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		ПоместитьВоВременноеХранилище(МассивСтрокПревышения, АдресВХранилище);
	КонецЕсли; 	
	
	НаборЗаписей.мПериод          = СтруктураШапкиДокумента.ДатаРасхода;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
	
КонецПроцедуры

Процедура ИзменитьОстаткиКонтрольныхЗначенийПоСтрокеСписания(Остатки, Результат, ИзмеренияКонтроля)
		
	РезультатОбъединения = Результат.Выгрузить();
	
	Поля = Новый Массив(); 
	Поля.Добавить("ЦФО");
	Поля.Добавить("Контрагент");
	Поля.Добавить("ДоговорКонтрагента");
	Поля.Добавить("Проект");
	Поля.Добавить("НоменклатурнаяГруппа");
	
	ШаблонПоля = "Аналитика_%1";
	Для Индекс = 1 По 7 Цикл
		Если ИзмеренияКонтроля.Свойство("Аналитика_" + Индекс) Тогда
			Поля.Добавить(СтрШаблон(ШаблонПоля, Индекс));
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из РезультатОбъединения Цикл
		
		Отбор = Новый Структура("СтатьяОборотов", СтрокаТаблицы.СтатьяОборотов);
		Отбор.Вставить("Период", СтрокаТаблицы.Период);
		
		Для каждого Поле Из Поля Цикл
			Если СтрокаТаблицы["Есть" + Поле] = 1 Тогда
				Отбор.Вставить(Поле,СтрокаТаблицы[Поле]);
			Иначе
				// Если нет контроля и значение в поле строки не заполнено, 
				// тогда выполняем поиск на "равно" по пустому значению.
				// Если этого не сделать, в результат отбора войдут строки с любыми комбинациями в поле, т.е.
				// с пустым значеним и заполненным.
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[Поле]) Тогда
					Если ИзмеренияКонтроля.Свойство(Поле) Тогда
						Отбор.Вставить(Поле,ИзмеренияКонтроля[Поле]["ПустоеЗначение"]);
					КонецЕсли;  
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		
		НайденныеСтроки = Остатки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.КоличествоОстаток = СтрокаТаблицы.КоличествоРазность;
				НайденнаяСтрока.Остаток = СтрокаТаблицы.Разность;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ИзменитьТекстЗапросаДляЦелейКонтроля(ТекстЗапроса, ИзмеренияКонтроля)
	
	ТекстТаблицаВсеОстатки = ТекстЗапросаТаблицаВсеОстатки(ИзмеренияКонтроля);
	ТекстТаблицаОстаток    = ТексЗапросаТаблицаОстаток(ИзмеренияКонтроля);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	Схема.ПакетЗапросов.Удалить(1); // Удален запрос к остаткам.
	
	ЗапросПакета = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ЗапросПакета.УстановитьТекстЗапроса(ТекстТаблицаВсеОстатки);
	Схема.ПакетЗапросов.Переместить(Схема.ПакетЗапросов.Количество() - 1, 1);
	
	ЗапросПакета = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ЗапросПакета.УстановитьТекстЗапроса(ТекстТаблицаОстаток);
	Схема.ПакетЗапросов.Переместить(Схема.ПакетЗапросов.Количество() - 1, 2);
	
	ЗапросПакета = Схема.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросПакета.ИмяТаблицы = "ТаблицаВсеОстатки";
	
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();

КонецПроцедуры

Функция ОстаткиПоКонтрольнымЗначениям(ТаблицаДляКонтроля, ИзмеренияКонтроля, ОписаниеПериода)
	
	Периодичность = ОписаниеПериода.Периодичность;
	НачалоПериода = ОписаниеПериода.НачалоПериода;
	КонецПериода  = ОписаниеПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТакстЗапросаОстаткиКонтрольныеЗначения(ИзмеренияКонтроля, Периодичность);
	
	Запрос.УстановитьПараметр("ДатаНачала"    ,НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания" ,КонецПериода);
	Запрос.УстановитьПараметр("Сценарий"      ,Сценарий);
	Запрос.УстановитьПараметр("СценарийКонтролируемый",  Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования()].ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивСтатьяОборотов"  ,  ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов"));
	Запрос.УстановитьПараметр("Ссылка"                ,  Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    ,  ТаблицаДляКонтроля);
	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
	
	Остатки = Запрос.Выполнить().Выгрузить();
	Возврат Остатки;
	
КонецФункции

Функция ТексЗапросаТаблицаОстаток(ИзмеренияКонтроля)
		
	ТекстТаблицаОстаток =	
	"ВЫБРАТЬ
	|	ТаблицаВсеОстатки.СуммаСценарийКонтроль КАК СуммаСценарийКонтроль,
	|	ТаблицаВсеОстатки.СуммаСценарийИсполнение КАК СуммаСценарийИсполнение,
	|	ТаблицаВсеОстатки.Остаток КАК Остаток,
	|	ТаблицаВсеОстатки.КоличествоСценарийКонтроль КАК КоличествоСценарийКонтроль,
	|	ТаблицаВсеОстатки.КоличествоСценарийИсполнение КАК КоличествоСценарийИсполнение,
	|	ТаблицаВсеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ТаблицаВсеОстатки.Период КАК Период,
	|	ТаблицаВсеОстатки.Сценарий КАК Сценарий,
	|	ТаблицаВсеОстатки.СтатьяОборотов КАК СтатьяОборотов,
	|	ТаблицаВсеОстатки.ЦФО КАК ЦФО,
	|	ТаблицаВсеОстатки.Контрагент КАК Контрагент,
	|	ТаблицаВсеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаВсеОстатки.Проект КАК Проект,
	|	ТаблицаВсеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ТаблицаОстаток
	|ИЗ
	|	ТаблицаВсеОстатки КАК ТаблицаВсеОстатки
	|ГДЕ
	|	ТаблицаВсеОстатки.ЦФО В(&МассивЦФО)
	|	И ТаблицаВсеОстатки.Контрагент В(&МассивКонтрагент)
	|	И ТаблицаВсеОстатки.ДоговорКонтрагента В(&МассивДоговорКонтрагента)
	|	И ТаблицаВсеОстатки.Проект В(&МассивПроект)";
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстТаблицаОстаток);
	Оператор = Схема.ПакетЗапросов[0].Операторы[0];
	Источник = Оператор.Источники[0].Источник;
	
	ШаблонПоляЗапроса = "Аналитика_%1";
	ШаблонУсловия 	  = "ТаблицаВсеОстатки.Аналитика_%1 В(&МассивАналитика_%1)";
	Для Индекс = 1 По 7 Цикл
		Если ИзмеренияКонтроля.Свойство("Аналитика_" + Индекс) Тогда
			Источник.ДоступныеПоля.Добавить(СтрШаблон(ШаблонПоляЗапроса, Индекс));
			Оператор.ВыбираемыеПоля.Добавить(СтрШаблон(ШаблонПоляЗапроса, Индекс));
			Оператор.Отбор.Добавить(СтрШаблон(ШаблонУсловия, Индекс));
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Схема.ПолучитьТекстЗапроса();

КонецФункции

Функция ТекстЗапросаТаблицаВсеОстатки(ИзмеренияКонтроля)
	
	Перем ТекстТаблицаВсеОстатки;
	
	ТекстТаблицаВсеОстатки = 
	"ВЫБРАТЬ
	|	ТаблицаВсеОстатки.СуммаСценарийКонтроль КАК СуммаСценарийКонтроль,
	|	ТаблицаВсеОстатки.СуммаСценарийИсполнение КАК СуммаСценарийИсполнение,
	|	ТаблицаВсеОстатки.Остаток КАК Остаток,
	|	ТаблицаВсеОстатки.КоличествоСценарийКонтроль КАК КоличествоСценарийКонтроль,
	|	ТаблицаВсеОстатки.КоличествоСценарийИсполнение КАК КоличествоСценарийИсполнение,
	|	ТаблицаВсеОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ТаблицаВсеОстатки.Период КАК Период,
	|	ТаблицаВсеОстатки.Сценарий КАК Сценарий,
	|	ТаблицаВсеОстатки.СтатьяОборотов КАК СтатьяОборотов,
	|	ТаблицаВсеОстатки.ЦФО КАК ЦФО,
	|	ТаблицаВсеОстатки.Контрагент КАК Контрагент,
	|	ТаблицаВсеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаВсеОстатки.Проект КАК Проект,
	|	ТаблицаВсеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ТаблицаВсеОстатки
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаВсеОстатки";
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстТаблицаВсеОстатки);
	Оператор = Схема.ПакетЗапросов[0].Операторы[0];
	
	ШаблонПоляЗапроса = "ТаблицаВсеОстатки.Аналитика_%1";
	Для Индекс = 1 По 7 Цикл
		Если ИзмеренияКонтроля.Свойство("Аналитика_" + Индекс) Тогда
			Оператор.ВыбираемыеПоля.Добавить(СтрШаблон(ШаблонПоляЗапроса, Индекс));
		КонецЕсли; 
	КонецЦикла; 

	Возврат Схема.ПолучитьТекстЗапроса();

КонецФункции

Функция ТакстЗапросаОстаткиКонтрольныеЗначения(ИзмеренияКонтроля, Периодичность)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначения.СуммаСценарийКонтрольОборот, 0)) КАК СуммаСценарийКонтроль,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначения.СуммаСценарийИсполнениеОборот, 0)) КАК СуммаСценарийИсполнение,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначения.СуммаСценарийКонтрольОборот, 0) - ЕСТЬNULL(КонтрольныеЗначения.СуммаСценарийИсполнениеОборот, 0)) КАК Остаток,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначения.КоличествоСценарийКонтрольОборот, 0)) КАК КоличествоСценарийКонтроль,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначения.КоличествоСценарийИсполнениеОборот, 0)) КАК КоличествоСценарийИсполнение,
	|	СУММА(ЕСТЬNULL(КонтрольныеЗначения.КоличествоСценарийКонтрольОборот, 0) - ЕСТЬNULL(КонтрольныеЗначения.КоличествоСценарийИсполнениеОборот, 0)) КАК КоличествоОстаток,
	|	КонтрольныеЗначения.Период КАК Период,
	|	КонтрольныеЗначения.Сценарий КАК Сценарий,
	|	КонтрольныеЗначения.СтатьяОборотов КАК СтатьяОборотов,
	|	КонтрольныеЗначения.ЦФО КАК ЦФО,
	|	КонтрольныеЗначения.Контрагент КАК Контрагент,
	|	КонтрольныеЗначения.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КонтрольныеЗначения.Проект КАК Проект,
	|	КонтрольныеЗначения.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Месяц,
	|			ВЫБОР
	|					КОГДА СценарийКонтролируемый = НЕОПРЕДЕЛЕНО
	|							ИЛИ СценарийКонтролируемый ЕСТЬ NULL
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.СценарииПланирования.ПустаяСсылка) = &СценарийКонтролируемый
	|					ИНАЧЕ СценарийКонтролируемый = &СценарийКонтролируемый
	|				КОНЕЦ
	|				И Сценарий = &Сценарий
	|				И СтатьяОборотов В ИЕРАРХИИ (&МассивСтатьяОборотов)
	|				И ЦФО В (&МассивЦФО)
	|				И Контрагент В (&МассивКонтрагент)
	|				И ДоговорКонтрагента В (&МассивДоговорКонтрагента)
	|				И Проект В (&МассивПроект)
	|				И НоменклатурнаяГруппа В (&МассивНоменклатурнаяГруппа)) КАК КонтрольныеЗначения
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрольныеЗначения.Период,
	|	КонтрольныеЗначения.Сценарий,
	|	КонтрольныеЗначения.СтатьяОборотов,
	|	КонтрольныеЗначения.ЦФО,
	|	КонтрольныеЗначения.Контрагент,
	|	КонтрольныеЗначения.ДоговорКонтрагента,
	|	КонтрольныеЗначения.Проект,
	|	КонтрольныеЗначения.НоменклатурнаяГруппа";
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Оператор  = Схема.ПакетЗапросов[0].Операторы[0];
	Таблица   = Оператор.Источники.НайтиПоПсевдониму("КонтрольныеЗначения").Источник;
	Параметры = Таблица.Параметры;
	
	ШаблонПоляЗапроса = "КонтрольныеЗначения.Аналитика_%1";
	ШаблонУсловия 	  = " И Аналитика_%1 В (&МассивАналитика_%1)";
	ТекстУсловия 	  = Строка(Параметры[3].Выражение);
	
	Для Индекс = 1 По 7 Цикл
		Если ИзмеренияКонтроля.Свойство("Аналитика_" + Индекс) Тогда
			Оператор.ВыбираемыеПоля.Добавить(СтрШаблон(ШаблонПоляЗапроса, Индекс));
			Оператор.Группировка.Добавить(СтрШаблон(ШаблонПоляЗапроса, Индекс));
			ТекстУсловия = ТекстУсловия + СтрШаблон(ШаблонУсловия, Индекс);
		КонецЕсли; 
	КонецЦикла;
	
	Параметры[2].Выражение = Новый ВыражениеСхемыЗапроса(Строка(Периодичность)); // Периодичность.
	Параметры[3].Выражение = Новый ВыражениеСхемыЗапроса(ТекстУсловия); 		 // Условия отбора.
	
	Возврат Схема.ПолучитьТекстЗапроса();
	
КонецФункции
 
Функция ПровестиКонтрольСумм()

	Результат = Ложь;
	
	Если ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
		Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю
			ИЛИ ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
			
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
		Если ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
	
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПровестиКонтрольСумм()

//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-10 (#ТП_БП05_ФР07)
Функция ок_ПодготовитьТаблицуДвиженийРасход()

	Запрос = Новый Запрос;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.ЦФО КАК ЦФО,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ок_СтатьяОборотовБДР КАК Ок_СтатьяОборотовБДР,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Проект КАК Проект,
	|	бит_ЗаявкаНаРасходованиеСредствОбщая.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Сумма КАК Сумма,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.СтавкаНДС КАК СтавкаНДС,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НДС КАК НДС,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_1 КАК Аналитика_1,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_2 КАК Аналитика_2,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_3 КАК Аналитика_3,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_4 КАК Аналитика_4,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_5 КАК Аналитика_5,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_6 КАК Аналитика_6,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Аналитика_7 КАК Аналитика_7,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.ВалютаДокумента КАК Валюта,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.ФормаОплаты КАК ВидДенежныхСредств,
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.Организация КАК Организация,
	|	бит_ЗаявкаНаРасходованиеСредствОбщая.Контрагент КАК Контрагент,
	|	бит_ЗаявкаНаРасходованиеСредствОбщая.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка КАК ДокументПланирования
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредствОбщая КАК бит_ЗаявкаНаРасходованиеСредствОбщая
	|		ПО бит_ЗаявкаНаРасходованиеСредствРаспределение.ок_ПрогнозПлатежа = бит_ЗаявкаНаРасходованиеСредствОбщая.Ссылка
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка = &Ссылка
	|	И бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка.ВидОперации = &ВидОперации";
					
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ВидОперации",Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;

КонецФункции // ПодготовитьТаблицуПланируемыйРасхода()
//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-10 (#ТП_БП05_ФР07)
#КонецОбласти

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-08 (#3065)
Процедура ДвиженияПоРегистрамБК(СтруктураШапкиДокумента,Отказ)
	
	пЗапрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧРаспределение.ЦФО КАК ЦФО,
	|	ТЧРаспределение.СтатьяОборотов КАК СтатьяДДС,
	|	ТЧРаспределение.СтатьяОборотов.ВидСтатьи КАК ВидСтатьиДДС,
	|	ТЧРаспределение.Проект КАК Проект,
	|	ТЧРаспределение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТЧРаспределение.Аналитика_1 КАК Аналитика_1,
	|	ТЧРаспределение.Аналитика_2 КАК Аналитика_2,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-13 (#3082)
	//|	ТЧРаспределение.СуммаБезНДС КАК СуммаБезНДС,
	//Заменено на:
	|	ВЫБОР 
	|		КОГДА ТЧРаспределение.СуммаБезНДС = 0 И ТЧРаспределение.Сумма<>0 ТОГДА
	|	     	ТЧРаспределение.Сумма - ТЧРаспределение.НДС
	|	    ИНАЧЕ
	|	    	ТЧРаспределение.СуммаБезНДС
	|	КОНЕЦ КАК СуммаБезНДС,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-13 (#3082)
	|	ТЧРаспределение.НДС КАК НДС,
	|	ТЧРаспределение.Ок_СтатьяОборотовБДР КАК СтатьяБДР,
	|	ТЧРаспределение.Ок_СтатьяОборотовБДР.ВидСтатьи КАК ВидСтатьиБДР,
	|	ТЧРаспределение.Ссылка КАК Ссылка,
	|	ТЧРаспределение.Ссылка.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ ВТ0_ИсходныеДанные
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК ТЧРаспределение
	|ГДЕ
	|	ТЧРаспределение.Ссылка = &Ссылка
	|	И (ВЫРАЗИТЬ(ТЧРаспределение.Аналитика_1 КАК Документ.бит_ФормаВводаБюджета)) <> ЗНАЧЕНИЕ(Документ.бит_ФормаВводаБюджета.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСтатьиДДС,
	|	ВидСтатьиБДР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ0_ИсходныеДанные.Сценарий КАК Сценарий,
	|	ВТ0_ИсходныеДанные.ЦФО КАК ЦФО,
	|	ВТ0_ИсходныеДанные.СтатьяБДР КАК СтатьяБДР,
	|	ВТ0_ИсходныеДанные.Аналитика_2 КАК Аналитика_2,
	|	ВТ0_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ0_ИсходныеДанные.Проект КАК Проект,
	|	ВТ0_ИсходныеДанные.Аналитика_1 КАК Аналитика_1,
	|	ВТ0_ИсходныеДанные.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ0_ИсходныеДанные.НДС КАК НДС,
	|	ВТ0_ИсходныеДанные.СтатьяДДС КАК СтатьяДДС,
	|	ВТ0_ИсходныеДанные.Ссылка КАК Регистратор
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ0_ИсходныеДанные.ЦФО КАК ЦФО,
	|	ВТ0_ИсходныеДанные.Сценарий КАК Сценарий,
	|	ВТ0_ИсходныеДанные.Проект КАК Проект,
	|	ВТ0_ИсходныеДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ0_ИсходныеДанные.Аналитика_1 КАК Аналитика_1,
	|	ВТ0_ИсходныеДанные.Аналитика_2 КАК Аналитика_2,
	|	ВТ0_ИсходныеДанные.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ0_ИсходныеДанные.НДС КАК НДС,
	|	ВТ0_ИсходныеДанные.СтатьяБДР КАК СтатьяОборотов,
	|	ВТ0_ИсходныеДанные.Ссылка КАК Регистратор,
	|	ИСТИНА КАК ЭтоСтатьяБДР
	|ПОМЕСТИТЬ ВТ1_ДанныеСоСценариямиПоСтатьям
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ0_ИсходныеДанные.ЦФО,
	|	ВТ0_ИсходныеДанные.Сценарий,
	|	ВТ0_ИсходныеДанные.Проект,
	|	ВТ0_ИсходныеДанные.ДоговорКонтрагента,
	|	ВТ0_ИсходныеДанные.Аналитика_1,
	|	ВТ0_ИсходныеДанные.Аналитика_2,
	|	ВТ0_ИсходныеДанные.СуммаБезНДС,
	|	ВТ0_ИсходныеДанные.НДС,
	|	ВТ0_ИсходныеДанные.СтатьяДДС,
	|	ВТ0_ИсходныеДанные.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ0_ИсходныеДанные КАК ВТ0_ИсходныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ0_ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.ЦФО КАК ЦФО,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Сценарий КАК СценарийКонтролируемый,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Проект КАК Проект,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Аналитика_1 КАК Аналитика_1,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Аналитика_2 КАК Аналитика_2,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.НДС КАК НДС,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.СтатьяОборотов КАК СтатьяОборотов,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(СоответствияСценариев.ИмяНастройки КАК Справочник.СценарииПланирования) КАК Сценарий,
	|	ВТ1_ДанныеСоСценариямиПоСтатьям.ЭтоСтатьяБДР КАК ЭтоСтатьяБДР
	|ПОМЕСТИТЬ ВТ2_Исполнение
	|ИЗ
	|	ВТ1_ДанныеСоСценариямиПоСтатьям КАК ВТ1_ДанныеСоСценариямиПоСтатьям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_НастройкиБК КАК СоответствияСценариев
	|		ПО (ВТ1_ДанныеСоСценариямиПоСтатьям.Сценарий = (ВЫРАЗИТЬ(СоответствияСценариев.ЗначениеСсылка КАК Справочник.СценарииПланирования)))
	|			И (СоответствияСценариев.Группа = ""Контролируемый сценарий"")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СценарийКонтролируемый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ2_Исполнение.Регистратор КАК Регистратор,
	|	ВТ2_Исполнение.ЦФО КАК ЦФО,
	|	ВТ2_Исполнение.СтатьяОборотов КАК СтатьяОборотов,
	|	ВТ2_Исполнение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ2_Исполнение.СценарийКонтролируемый КАК Сценарий,
	|	ВТ2_Исполнение.Проект КАК Проект,
	|	ВТ2_Исполнение.Аналитика_1 КАК Аналитика_1,
	|	ВТ2_Исполнение.Аналитика_2 КАК Аналитика_2,
	|	ВЫРАЗИТЬ(СоответствияСценариев.ЗначениеСсылка КАК Справочник.СценарииПланирования) КАК СценарийКонтролируемый,
	|	ВТ2_Исполнение.СуммаБезНДС КАК СуммаБезНДС,
	|	ВТ2_Исполнение.НДС КАК НДС
	|ПОМЕСТИТЬ ВТ3_Контроль
	|ИЗ
	|	ВТ2_Исполнение КАК ВТ2_Исполнение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_НастройкиБК КАК СоответствияСценариев
	|		ПО (ВТ2_Исполнение.СценарийКонтролируемый = (ВЫРАЗИТЬ(СоответствияСценариев.ИмяНастройки КАК Справочник.СценарииПланирования)))
	|			И (СоответствияСценариев.Группа = ""Контролируемый сценарий"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ1_ДанныеСоСценариямиПоСтатьям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ2_Исполнение.ЦФО КАК ЦФО,
	|	ВТ2_Исполнение.Сценарий КАК Сценарий,
	|	ВТ2_Исполнение.Проект КАК Проект,
	|	ВТ2_Исполнение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ2_Исполнение.Аналитика_1 КАК Аналитика_1,
	|	ВТ2_Исполнение.Аналитика_2 КАК Аналитика_2,
	|	ВТ2_Исполнение.СуммаБезНДС КАК СуммаСценарийИсполнение,
	|	ВТ2_Исполнение.НДС КАК НДСИсполнение,
	|	ВТ2_Исполнение.СтатьяОборотов КАК СтатьяОборотов,
	|	ВТ2_Исполнение.Регистратор КАК Регистратор,
	|	ВТ2_Исполнение.СценарийКонтролируемый КАК СценарийКонтролируемый,
	|	0 КАК СуммаСценарийКонтроль,
	|	0 КАК НДСКонтроль
	|ИЗ
	|	ВТ2_Исполнение КАК ВТ2_Исполнение
	|ГДЕ
	|	ВТ2_Исполнение.ЭтоСтатьяБДР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ3_Контроль.ЦФО,
	|	ВТ3_Контроль.Сценарий,
	|	ВТ3_Контроль.Проект,
	|	ВТ3_Контроль.ДоговорКонтрагента,
	|	ВТ3_Контроль.Аналитика_1,
	|	ВТ3_Контроль.Аналитика_2,
	|	0,
	|	0,
	|	ВТ3_Контроль.СтатьяОборотов,
	|	ВТ3_Контроль.Регистратор,
	|	ВТ3_Контроль.СценарийКонтролируемый,
	|	ВТ3_Контроль.СуммаБезНДС,
	|	ВТ3_Контроль.НДС
	|ИЗ
	|	ВТ3_Контроль КАК ВТ3_Контроль");
	
	пЗапрос.УстановитьПараметр("Ссылка"	,	Ссылка);
	
	РезультатПакета = пЗапрос.ВыполнитьПакет();
	
	стрЗаполненияСумм = Новый Структура;
	стрЗаполненияСумм.Вставить("Дата", Дата('00010101'));
	стрЗаполненияСумм.Вставить("ВалютаРегламентированногоУчета"	, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	стрЗаполненияСумм.Вставить("бит_ВалютаУправленческогоУчета"	, Константы.бит_ВалютаУправленческогоУчета.Получить());
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-12 (#НТП_БП12_ФР05)	
	//СтрКурсаДокумента = бит_КурсыВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ДатаРасхода);
	// Заменено на:
	СтрКурсаДокумента = Новый Структура;
	СтрКурсаДокумента.Вставить("Курс", 		КурсДокумента);
	СтрКурсаДокумента.Вставить("Кратность", КратностьДокумента);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-12 (#НТП_БП12_ФР05)
	
	//КЗБ
	Выборка = РезультатПакета[РезультатПакета.Количество()-1].Выбрать();
	
	пТаблицаДвижений = Движения.бит_КонтрольныеЗначенияБюджетов.Выгрузить();
	пТаблицаДвижений.Очистить();
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-17 (#3389)
	мОК_ID_Разноска_ДокОснования = рс_ОбщийМодуль.ОбработатьID(ОК_ID_Разноска_ДокОснования);
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-17 (#3389)	
	Пока Выборка.Следующий() Цикл 
		
		пДвижение = пТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(пДвижение, Выборка);
		
		пДвижение.Период 	  = СтруктураШапкиДокумента.ДатаРасхода;
								
		пДвижение.Контрагент		 = СтруктураШапкиДокумента.Контрагент;
		пДвижение.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;	
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-17 (#3389)
		пДвижение.Аналитика_4 = мОК_ID_Разноска_ДокОснования; 
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-17 (#3389)
		пДвижение.бит_БК_Организация = СтруктураШапкиДокумента.Организация;
		
		//Контроль
		Если пДвижение.СуммаСценарийКонтроль<>0 Тогда 
			
			СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(пДвижение.СуммаСценарийКонтроль
																			 , СтруктураШапкиДокумента.ВалютаДокумента
																			 , стрЗаполненияСумм.ВалютаРегламентированногоУчета
																			 , СтрКурсаДокумента.Курс
																			 , 1
																			 , СтрКурсаДокумента.Кратность
																			 , 1);
												
						
			пДвижение.СуммаСценарийКонтроль = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(СуммаРегл, СтруктураШапкиДокумента.ДатаРасхода, пДвижение.Сценарий, стрЗаполненияСумм);			 
			
			пДвижение.СуммаСценарийКонтрольСНДС = пДвижение.СуммаСценарийКонтроль;
			
			Если Выборка.НДСКонтроль<>0 Тогда 
				
				НДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.НДСКонтроль
																			   , СтруктураШапкиДокумента.ВалютаДокумента
																			   , стрЗаполненияСумм.ВалютаРегламентированногоУчета
																			   , СтрКурсаДокумента.Курс
																			   , 1
																			   , СтрКурсаДокумента.Кратность
																			   , 1);
				
				пДвижение.СуммаСценарийКонтрольСНДС = пДвижение.СуммаСценарийКонтрольСНДС + 
													  бит_МеханизмТрансляции.ПересчитатьРеглСценарий(НДСРегл, СтруктураШапкиДокумента.ДатаРасхода, пДвижение.Сценарий, стрЗаполненияСумм);			 
				
				
				
			КонецЕсли;			
			
		КонецЕсли;
		
		//Исполнение
		Если пДвижение.СуммаСценарийИсполнение<>0 Тогда 
			
			СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(пДвижение.СуммаСценарийИсполнение
																			 , СтруктураШапкиДокумента.ВалютаДокумента
																			 , стрЗаполненияСумм.ВалютаРегламентированногоУчета
																			 , СтрКурсаДокумента.Курс
																			 , 1
																			 , СтрКурсаДокумента.Кратность
																			 , 1);
												
						
			пДвижение.СуммаСценарийИсполнение = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(СуммаРегл, СтруктураШапкиДокумента.ДатаРасхода, пДвижение.Сценарий, стрЗаполненияСумм);			 
			
			пДвижение.СуммаСценарийИсполнениеСНДС = пДвижение.СуммаСценарийИсполнение;
			
			Если Выборка.НДСИсполнение<>0 Тогда 
				
				НДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.НДСИсполнение
																			   , СтруктураШапкиДокумента.ВалютаДокумента
																			   , стрЗаполненияСумм.ВалютаРегламентированногоУчета
																			   , СтрКурсаДокумента.Курс
																			   , 1
																			   , СтрКурсаДокумента.Кратность
																			   , 1);
				
				пДвижение.СуммаСценарийИсполнениеСНДС = пДвижение.СуммаСценарийИсполнениеСНДС + 
													  бит_МеханизмТрансляции.ПересчитатьРеглСценарий(НДСРегл, СтруктураШапкиДокумента.ДатаРасхода, пДвижение.Сценарий, стрЗаполненияСумм);			 
				
				
				
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если пТаблицаДвижений.Количество()>0 Тогда 
		пДвиженияКЗБ = Движения.бит_КонтрольныеЗначенияБюджетов;
		пДвиженияКЗБ.Записывать = Истина;
		пДвиженияКЗБ.мТаблицаДвижений = пТаблицаДвижений;
		пДвиженияКЗБ.ДобавитьДвижение();
	КонецЕсли;
	
	//ОпБ 	
	пТаблицаДвижений = Движения.бит_ОборотыПоБюджетам.Выгрузить();
	пТаблицаДвижений.Очистить();
	
	Выборка = РезультатПакета[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		//Движение по статье БДР
		пДвижение = пТаблицаДвижений.Добавить();
				
		ЗаполнитьЗначенияСвойств(пДвижение, Выборка);
		
		пДвижение.Период = СтруктураШапкиДокумента.ДатаРасхода;
		
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2019-07-17 (#3389)
		пДвижение.Аналитика_4 = мОК_ID_Разноска_ДокОснования; 
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2019-07-17 (#3389)
						
		пДвижение.Валюта 	  	 = СтруктураШапкиДокумента.ВалютаДокумента;
		
		пДвижение.СтатьяОборотов = Выборка.СтатьяБДР;
		
		пДвижение.Контрагент		 = СтруктураШапкиДокумента.Контрагент;
		пДвижение.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;			
		
		пДвижение.Сумма		= Выборка.СуммаБезНДС;
		пДвижение.СуммаСНДС = Выборка.СуммаБезНДС + Выборка.НДС; 
		
		пДвижение.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(пДвижение.Сумма
												, СтруктураШапкиДокумента.ВалютаДокумента
												, стрЗаполненияСумм.ВалютаРегламентированногоУчета
												, СтрКурсаДокумента.Курс
												, 1
												, СтрКурсаДокумента.Кратность
												, 1);
												
		пДвижение.СуммаСНДСРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(пДвижение.СуммаСНДС
												, СтруктураШапкиДокумента.ВалютаДокумента
												, стрЗаполненияСумм.ВалютаРегламентированногоУчета
												, СтрКурсаДокумента.Курс
												, 1
												, СтрКурсаДокумента.Кратность
												, 1);
		
		Если пДвижение.СуммаРегл<>0 Тогда 
			пДвижение.СуммаСценарий = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаРегл, СтруктураШапкиДокумента.ДатаРасхода, пДвижение.Сценарий, стрЗаполненияСумм);			 
			пДвижение.СуммаУпр	    = бит_МеханизмТрансляции.ПересчитатьРеглУпр(пДвижение.СуммаРегл, СтруктураШапкиДокумента.ДатаРасхода, стрЗаполненияСумм);	
		КонецЕсли;
				
		Если пДвижение.СуммаСНДСРегл<>0 Тогда 
			пДвижение.СуммаСНДССценарий = бит_МеханизмТрансляции.ПересчитатьРеглСценарий(пДвижение.СуммаСНДСРегл, СтруктураШапкиДокумента.ДатаРасхода, пДвижение.Сценарий, стрЗаполненияСумм);			 
			пДвижение.СуммаСНДСУпр 	    = бит_МеханизмТрансляции.ПересчитатьРеглУпр(пДвижение.СуммаСНДСРегл, СтруктураШапкиДокумента.ДатаРасхода, стрЗаполненияСумм);
		КонецЕсли;		
			
		пДвижение.бит_БК_Организация = СтруктураШапкиДокумента.Организация;
		
		//Движение по статье ДДС
		пДвижениеДДС = пТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(пДвижениеДДС, пДвижение);
		пДвижениеДДС.СтатьяОборотов = Выборка.СтатьяДДС;
		
	КонецЦикла;
	
	Если пТаблицаДвижений.Количество()>0 Тогда 
		пДвиженияОпБ = Движения.бит_ОборотыПоБюджетам;
		пДвиженияОпБ.Записывать = Истина;
		пДвиженияОпБ.мТаблицаДвижений = пТаблицаДвижений;
		пДвиженияОпБ.ДобавитьДвижение();
	КонецЕсли;
	
КонецПроцедуры //ДвиженияПоРегистрамБК()
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-08 (#3065)

//бит_Сундукова функция возвращает список статей оборотов из регистра бит_ЗависимыеОбороты
//с отбором по сценарию. Функция нужна для создания заявки на основании формы ввода бюджета
//
Функция получитьСоотвествиеСтатейОборотов(МассивСтатей)
	//БИТ АКриштопов 03032016 -->>
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_СоответствияАналитик.ЛеваяАналитика_1,
	|	бит_СоответствияАналитик.ПраваяАналитика_1
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия = &Вид
	|	И бит_СоответствияАналитик.ЛеваяАналитика_1 В(&СписокСтатей)");
	
	Запрос.УстановитьПараметр("Вид", Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС);
	Запрос.УстановитьПараметр("СписокСтатей", МассивСтатей);
	
	//Запрос = новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	бит_ЗависимыеОборотыСрезПоследних.СтатьяОборотов,
	//|	бит_ЗависимыеОборотыСрезПоследних.СтатьяОборотов_Зависимый
	//|ИЗ
	//|	РегистрСведений.бит_ЗависимыеОбороты.СрезПоследних(
	//|			,
	//|			Сценарий = &Сценарий
	//|				И СтатьяОборотов В (&Статьи)) КАК бит_ЗависимыеОборотыСрезПоследних";
	//Запрос.УстановитьПараметр("Сценарий",Сценарий);
	//ЗАпрос.УстановитьПараметр("Статьи",МассивСтатей);
	//БИТ АКриштопов 03032016 <<--
	возврат запрос.Выполнить().Выгрузить();
КонецФункции

//БИТ АКриштопов 03032016 -->>
&НаСервере
Процедура СформироватьНазначениеПлатежа(ДанныеШапки, ДокОб)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Предмет", 		ПредметОплаты(ДанныеШапки.СтатьяОборотов, ДанныеШапки.СтатьяОборотов.ВидСтатьи));
	СтруктураПараметров.Вставить("ВидДокумента", 	"Договор");//ВыборкаДокументРазнесения.НазначениеПлатежаВидДокумента);
	СтруктураПараметров.Вставить("НомерДокумента",	ДанныеШапки.ДоговорКонтрагента.Номер);
	СтруктураПараметров.Вставить("ДатаДокумента",	ДанныеШапки.ДоговорКонтрагента.Дата);
	
	СтруктураПараметров.Вставить("СтавкаНДС",		Перечисления.СтавкиНДС.НДС18);
	СтруктураПараметров.Вставить("СуммаНДС",		Формат(ДокОб.Распределение.Итог("НДС"),"ЧДЦ=2"));
	
	ДокОб.НазначениеПлатежа=ТекстНазначенияПлатежа(СтруктураПараметров); 
	ДокОб.НазначениеПлатежаУпр=ТекстНазначенияПлатежа(СтруктураПараметров);	
	
	
КонецПроцедуры

&НаСервере
Функция ПредметОплаты(СтатьяОборотов, ВидСтатьи)
	
	ЗначениеПоУмолчанию = "";
	
	Если Не ЗначениеЗаполнено(СтатьяОборотов) Тогда
		Возврат ЗначениеПоУмолчанию;	
	КонецЕсли; 
	
	ОперативнаяДеятельность 	= ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка");
	ИнвестиционнаяДеятельность 	= ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность");
	
	Если ВидСтатьи = ОперативнаяДеятельность Тогда
		Возврат "услуги";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗданий") Тогда	
		Возврат "здания";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗемли") Тогда	
		Возврат "землю";
	ИначеЕсли СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокСтатейОборотов_ПриобритениеОборудования").НайтиПоЗначению(СтатьяОборотов) <> Неопределено Тогда	
		Возврат "оборудование";
	ИначеЕсли ВидСтатьи = ИнвестиционнаяДеятельность Тогда
		Возврат "услуги";
	Иначе 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли; 
	
КонецФункции // ()

&НаСервере
Функция ТекстНазначенияПлатежа(Параметры)
	
	Шаблон = "Оплата за %1 по %2 № %3 от %4, в т.ч. НДС %5.";
	
	Результат = СтрЗаменить(Шаблон, 	"%1", Параметры.Предмет);
	Результат = СтрЗаменить(Результат, 	"%2", Параметры.ВидДокумента);
	Результат = СтрЗаменить(Результат, 	"%3", Параметры.НомерДокумента);
	Результат = СтрЗаменить(Результат, 	"%4", Формат(Параметры.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	//10.12.14
	Если Параметры.СтавкаНДС=ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") тогда
		Результат = СтрЗаменить(Результат, 	", в т.ч. НДС %5.", " без НДС");
	Иначе
		Результат = СтрЗаменить(Результат, 	"%5", Параметры.СуммаНДС);
	КонецЕсли;
	Возврат Результат;	
	
КонецФункции // ()
//БИТ АКриштопов 03032016 <<--

//+ Сенин 21.07.2016 №2576
//
Процедура ЗаполнитьРеквизитОтветственный()

	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	Отделы = новый массив;
		Отделы.Добавить("Отдел инвестиционного финансового контроля");
		Отделы.Добавить("Отдел операционного финансового контроля");
		Отделы.Добавить("Управление финансового контроля");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_БК_Инициаторы.Пользователь
		|ИЗ
		|	Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
		|ГДЕ
		|	бит_БК_Инициаторы.Отдел В(&Отделы)
		|	И бит_БК_Инициаторы.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Отделы", 		Отделы);
	Запрос.УстановитьПараметр("Пользователь",	ТекПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Ответственный = ТекПользователь;	
	
	КонецЕсли;	

КонецПроцедуры
//-Сенин 21.07.2016 №2576

//+ Сенин 09.09.2016 №2652
//
//При проведении документа ЗнРДС, добавить проверку на выявление дублей среди проведенных документов ЗнРДС по правилу:
//	“Контрагент” + “№ Счета” + “Дата Счета” + “Сумма”.
//
Процедура бит_БК_ПроверитьНаДубль()
	
	бит_БК_НомерСчета = СокрЛП(бит_БК_НомерСчета);
	
	Если СБ_ИдентификаторЗаписиAXAPTA<>0
		или Не ЗначениеЗаполнено(Контрагент)
		или Не ЗначениеЗаполнено(бит_БК_НомерСчета) 
		или Не ЗначениеЗаполнено(бит_БК_ДатаСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_ЗаявкаНаРасходованиеСредств.Ссылка
		|ИЗ
		|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
		|ГДЕ
		|	бит_ЗаявкаНаРасходованиеСредств.бит_БК_НомерСчета 	= &бит_БК_НомерСчета
		|	И бит_ЗаявкаНаРасходованиеСредств.бит_БК_ДатаСчета 	= &бит_БК_ДатаСчета
		|	И бит_ЗаявкаНаРасходованиеСредств.Контрагент 		= &Контрагент
		|	И бит_ЗаявкаНаРасходованиеСредств.Сумма 			= &Сумма
		|	И бит_ЗаявкаНаРасходованиеСредств.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("бит_БК_НомерСчета",	бит_БК_НомерСчета);
	Запрос.УстановитьПараметр("бит_БК_ДатаСчета",	бит_БК_ДатаСчета);
	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
	Запрос.УстановитьПараметр("Сумма",				Сумма);
	Запрос.УстановитьПараметр("Ссылка",				Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
	
		Сообщить(	"Найдена схожая оплата по документу """+Выборка.Ссылка
					+""", Контрагенту """+Контрагент
					+""",  № счета """+бит_БК_НомерСчета
					+""", Дата счета """+бит_БК_ДатаСчета
					+"""  на Сумму """+Сумма+""".");	
	
	КонецЕсли;	

КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3065)
Процедура ПроверитьСоответствиеСценарияПоВидуСтатейТЧ(Отказ)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-18 (#3269)
	//ОперационыйСценарийПланирования = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования");
	//ИнвестиционныйСценарийПланирования = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования");
	//
	//Если ЗначениеЗаполнено(Сценарий) И
	//	 Сценарий<>ОперационыйСценарийПланирования И
	//	 Сценарий<>ИнвестиционныйСценарийПланирования
	//Тогда 
	//	Возврат;
	//КонецЕсли;
	//Заменено на:
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-18 (#3269)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.Ок_СтатьяОборотовБДР.ВидСтатьи <> &ВидСтатьи
	|	И бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-18 (#3269)
	//Запрос.УстановитьПараметр("ВидСтатьи", ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов."+?(Сценарий=ОперационыйСценарийПланирования,"Выручка","ИнвестиционнаяДеятельность")));
	//Заменено на:
	Запрос.УстановитьПараметр("ВидСтатьи", ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов."+?(Сценарий=СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования"),"Выручка","ИнвестиционнаяДеятельность")));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-18 (#3269)
	Запрос.УстановитьПараметр("Ссылка"	 , Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	ИначеЕсли Распределение.Количество()=1 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вид статьи оборотов БДР не соответствует сценарию документа'"),,,,Отказ);
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	пСтрокиОшибки = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		пСтрокиОшибки = пСтрокиОшибки + "," + ВыборкаДетальныеЗаписи.НомерСтроки;
	КонецЦикла;
	
	пТекстОшибки = НСтр("ru = 'Вид статьи оборотов БДР не соответствует сценарию документа в следующих строках: %1'");
	пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, Сред(пСтрокиОшибки,2));

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);  	

КонецПроцедуры

Процедура ПроверитьСоответствиеСтатейБДРИБДДСТЧ(Отказ)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-18 (#3269)
	//ОперационыйСценарийПланирования = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования");
	//ИнвестиционныйСценарийПланирования = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования");
	//
	//Если ЗначениеЗаполнено(Сценарий) И
	//	 Сценарий<>ОперационыйСценарийПланирования И
	//	 Сценарий<>ИнвестиционныйСценарийПланирования
	//Тогда 
	//	Возврат;
	//КонецЕсли;
	//Заменено на:
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-18 (#3269)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств.Распределение КАК бит_ЗаявкаНаРасходованиеСредствРаспределение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|		ПО (бит_ЗаявкаНаРасходованиеСредствРаспределение.Ок_СтатьяОборотовБДР = (ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.бит_СтатьиОборотов)))
	|			И (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
	|			И (бит_ЗаявкаНаРасходованиеСредствРаспределение.СтатьяОборотов <> (ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.бит_СтатьиОборотов)))
	|			И (бит_ЗаявкаНаРасходованиеСредствРаспределение.Ок_СтатьяОборотовБДР <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))
	|			И (бит_ЗаявкаНаРасходованиеСредствРаспределение.Ссылка = &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ЗаявкаНаРасходованиеСредствРаспределение.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка"	 , Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	ИначеЕсли Распределение.Количество()=1 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Статья оборотов БДР не соответствует статье оборотов ДДС документа'"),,,,Отказ);
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	пСтрокиОшибки = "";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		пСтрокиОшибки = пСтрокиОшибки + "," + ВыборкаДетальныеЗаписи.НомерСтроки;
	КонецЦикла;
	
	пТекстОшибки = НСтр("ru = 'Статья оборотов БДР не соответствует статье оборотов ДДС документа в следующих строках: %1'");
	
	пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, Сред(пСтрокиОшибки,2));
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,,,,Отказ);
		
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3065)

//СофтЛаб Начало 2019-09-21 #3486
Функция ВыполнитьПроверкуСтатусаБлокировкиОплат(ТекстОшибки)

	ОбъектыВСтатусе_БлокированыОплаты = "";
	
	СтруктураСтатусаКонтрагента = Справочники.Контрагенты.ПолучитьСтатус(Контрагент);
	Если СтруктураСтатусаКонтрагента <> Неопределено
		И СтруктураСтатусаКонтрагента.Статус = ПредопределенноеЗначение("Перечисление.бит_СтатусыПоставщиковAX.БлокированыОплаты") Тогда
		ОбъектыВСтатусе_БлокированыОплаты = ОбъектыВСтатусе_БлокированыОплаты + Символы.ПС + Контрагент;
	КонецЕсли; 
		
	Для каждого СтрокаТЧ Из Распределение Цикл
		СтруктураСтатусаДоговора = Справочники.ДоговорыКонтрагентов.ПолучитьСтатус(СтрокаТЧ.ДоговорКонтрагента);
		Если СтруктураСтатусаДоговора <> Неопределено
			И СтруктураСтатусаДоговора.Статус = ПредопределенноеЗначение("Перечисление.бит_ВидыСтадийДоговоров.Замечания") Тогда
			ОбъектыВСтатусе_БлокированыОплаты = ОбъектыВСтатусе_БлокированыОплаты + Символы.ПС + "Строка(" + СтрокаТЧ.НомерСтроки + ")" + " " + СтрокаТЧ.ДоговорКонтрагента;
		КонецЕсли;
	КонецЦикла; 
	
	Если ОбъектыВСтатусе_БлокированыОплаты <> "" Тогда
	
		ТекстОшибки = НСтр("ru = 'Проведение документа запрещено, выбраны договора/контрагент в статусе «Бокированы оплаты»:" + ОбъектыВСтатусе_БлокированыОплаты + "'");
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции
 //СофтЛаб Конец 2019-09-21 #3486

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-28 (#3842)
Функция ПолучитьСоответствияСтатьиБДДССтатейБДР(МассивСтатейБДР)
	
	СоответствиеСтатей = Новый Соответствие();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиОборотов.Ссылка КАК СтатьяОборотовБДР
		|ПОМЕСТИТЬ ВТ_СтатьиОборотов
		|ИЗ
		|	Справочник.бит_СтатьиОборотов КАК СтатьиОборотов
		|ГДЕ
		|	СтатьиОборотов.Ссылка В(&МассивСтатейОборотов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиОборотов.СтатьяОборотовБДР КАК СтатьяОборотовБДР,
		|	ЕСТЬNULL(бит_СоответствияАналитик.ПраваяАналитика_1, ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)) КАК СтатьяОборотовБДДС
		|ИЗ
		|	ВТ_СтатьиОборотов КАК СтатьиОборотов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		|		ПО (бит_СоответствияАналитик.ВидСоответствия = ЗНАЧЕНИЕ(Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС))
		|			И СтатьиОборотов.СтатьяОборотовБДР = бит_СоответствияАналитик.ЛеваяАналитика_1
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатьиОборотов.СтатьяОборотовБДР,
		|	ЕСТЬNULL(бит_СоответствияАналитик.ПраваяАналитика_1, ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("МассивСтатейОборотов", МассивСтатейБДР);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МассивСтатейБДР = СоответствиеСтатей.Получить(ВыборкаДетальныеЗаписи.СтатьяОборотовБДДС);
		Если МассивСтатейБДР = Неопределено Тогда
			МассивСтатейБДР = Новый Массив;
		КонецЕсли; 
		МассивСтатейБДР.Добавить(ВыборкаДетальныеЗаписи.СтатьяОборотовБДР);
		СоответствиеСтатей.Вставить(ВыборкаДетальныеЗаписи.СтатьяОборотовБДДС, МассивСтатейБДР);
		
	КонецЦикла;

	Возврат СоответствиеСтатей;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-28 (#3842)
 
#Область Инициализация

//ПолучитьСтатусМодуль();

мИгнорироватьЗапись = Ложь;

мПометкаИзГрафикаПлатажей = Ложь;

мНастройкиПрограммы = Новый Соответствие;

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
мРежимОбновленияВиз = Константы.бит_РежимОбновленияПеречняВиз.Получить();

#КонецОбласти

#КонецЕсли
