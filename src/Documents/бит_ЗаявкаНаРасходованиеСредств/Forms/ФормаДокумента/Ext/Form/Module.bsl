
#Область ОписаниеПеременных

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
&НаКлиенте 
Перем мУжеПоказанВопрос;
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ОК Довбешка 21.05.2015
	МоментОткрытияДо	= ТекущаяДата();
	//ОК Довбешка
	
	// +СБ. Широков Николай. 2014-09-04.
	//СБ_КазначействоКлиент.ЗаявкаНаРасходованиеДСФормаДокументаПриОткрытии(ЭтаФорма);
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_ЗаявкаНаРасходованиеСредств.ФормаДокументаУправляемая");
	// -СБ. Широков Николай
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	АдресХранилищаБанкСчета = Параметры.АдресХранилищаБанкСчета;
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументЗаявка = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументЗаявка, МассивТипов, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьХранилищеСтрокПревышения();
	ИнициализироватьСвойстваРаспределения(ЭтотОбъект);
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		
		Если НЕ МожетБытьВВалюте И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
			Объект.ВалютаДокумента 	  = ВалютаРегламентированногоУчета;
			Объект.КурсДокумента   	  = 1;
			Объект.КратностьДокумента = 1;
		КонецЕсли; 
	КонецЕсли; 
	
	// Настроим отображение полей доп. аналитик в табличном поле Распределение.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(
		ЭтотОбъект,"Распределение",мКэшЗначений.ИзмеренияДоп,мКэшЗначений.НастройкиИзмерений);
								
	// Настроим отображение полей доп. аналитик в форме.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтотОбъект,
		мКэшЗначений.ИзмеренияДоп, мКэшЗначений.НастройкиИзмерений);
								
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьНачальныеСвойстваАналитикШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));																			 
		
	УстановитьУсловноеОформление();
		
	ЗаполнитьКонтролируемыеРеквизиты(ЭтотОбъект);
	
	// Заполним текст про график платежей.
	ЗаполнитьТекстПроГрафикПлатежей();
	
	Если НЕ (Параметры.Ключ.Пустая() И ПустаяСтрока(Объект.НазначениеПлатежа)) Тогда
		СгенерированноеНазначенияПлатежа = Документы.бит_ЗаявкаНаРасходованиеСредств.ПолучитьНазначениеПлатежа(Объект,,Истина);
	КонецЕсли; 

	УстановитьФлагФормироватьНПУпрАвтоматически(ЭтотОбъект);

	ОбъектСкопирован = ?(ЗначениеЗаполнено(Параметры.ЗначениеКопирования), Истина, Ложь);
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-09-14 (#ТП_БП05_ФР08)
	// Закомментировано
	//МногострочныйДокумент = (Объект.Распределение.Количество() > 1); 
	// Если ВидОперации - ПеречислениеДенежныхСредствПодотчетнику, всегда показывать ТЧ
	МногострочныйДокумент = (Объект.Распределение.Количество() > 1) 
								Или Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику; 
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-09-14 (#ТП_БП05_ФР08)
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ОтобразитьСкрытьКнопкуПечатиСписка();
	КонецЕсли;

	Элементы.Исполнитель.ТолькоПросмотр = бит_ОбщегоНазначения.РольДоступнаРлс();

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-09-29 (#3488)
	//УправлениеЭлементамиФормы();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-09-29 (#3488)
	
	//ОК Довбешка
	Если Не Параметры.Ключ.Пустая() Тогда
		МоментОткрытияПосле = МоментОткрытияДо;
		МоментОткрытияДо = 0;
	Иначе
		МоментОткрытияДо = ТекущаяДата() - МоментОткрытияДо;
		МоментОткрытияПосле	= ТекущаяДата();
	КонецЕсли;
	//ОК Довбешка
	
	// БИТ НАГолубева 01.03.2016 ++
	Элементы.РаспределениеКонтекстноеМенюЗаполнитьКолонку.Доступность = Не Объект.Проведен;
	// БИТ НАГолубева 01.03.2016 --
	
	//БИТ АКриштопов 15.03.2016 ++
	Если Объект.ОК_ID_Разноска_ДокОснования = "" И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Попытка
			Объект.ОК_ID_Разноска_ДокОснования = Объект.ДокументОснование.ОК_ID_Разноска;
		Исключение
		КонецПопытки;
	КонецЕсли;
	//БИТ АКриштопов 15.03.2016 --
	
	// +СБ. Чеплин Денис. 2016-09-14. Факторинг (#2612)
	СБ_РаботаСФормамиОбъекты.СБ_бит_ЗаявкаНаРасходованиеСредств_ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -СБ. Чеплин Денис
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3065)
	Если Объект.Сценарий <> СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") ИЛИ
		Объект.Сценарий <> СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования")
		Тогда
		Элементы.Ок_СтатьяОборотовБДР.ОтметкаНезаполненного = Ложь;
		Элементы.РаспределениеОк_СтатьяОборотовБДР.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3065)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-09-29 (#3488)
	Если Параметры.Свойство("ок_НастройкиДоступностиПолейОбъектовДляРедактирования")
		И Параметры.Свойство("ок_НастройкиДоступностиПолейОбъектовДляРедактирования_Виза") Тогда
		
		ок_НастройкиДоступностиПолейОбъектовДляРедактирования = Параметры.ок_НастройкиДоступностиПолейОбъектовДляРедактирования;
		ок_НастройкиДоступностиПолейОбъектовДляРедактирования_Виза = Параметры.ок_НастройкиДоступностиПолейОбъектовДляРедактирования_Виза;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Виза", ок_НастройкиДоступностиПолейОбъектовДляРедактирования_Виза);
		СтруктураПараметров.Вставить("Объект", "Документ.бит_ЗаявкаНаРасходованиеСредств");
		СписокДоступныхПолей = бит_РаботаСДиалогамиСервер.ПолучитьСписокДоступныхПолей(ЭтаФорма, СтруктураПараметров);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-31 (#3488)
		Элементы.КнопкаСписок.Пометка = Истина;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-31 (#3488)
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-04 (#3816)
		МногострочныйДокумент = Истина;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-04 (#3816)
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-09-29 (#3488)
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб) 2019-10-29 Начало (#3423)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-30 (#3629)
	//Если Параметры.Ключ.Пустая() Тогда 
	Если Параметры.Ключ.Пустая() 
		И НЕ ЗначениеЗаполнено(Объект.ок_СпособСоздания) Тогда 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-30 (#3629)
		Объект.ок_СпособСоздания = 5;
	КонецЕсли;
	//ОКЕЙ Рычаков А.С.(СофтЛаб) 2019-10-29 Конец (#3423)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-30 (#3842)
	Если (Объект.ок_СпособСоздания = 5
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ок_СпособСоздания))
		И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ок_СпособСоздания = 4;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-30 (#3842)
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-03-24 (#ТП_БП05_ФР08)
	ок_МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-03-24 (#ТП_БП05_ФР08)

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//+Сундукова 170316 №2227
	Если Параметры.Ключ.Пустая() Тогда
		ПроверитьИмеющиесяЗаявкиПоОснованию();
	КонецЕсли;	
	//-Сундукова 170316 №2227	
	
	ПриОткрытииОкончание();

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//ОК Довбешка 21.05.2015
	//ЗамерОткрытияФормы(МоментОткрытияДо, МоментОткрытияПосле);
	//ОК Довбешка
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-09-29 (#3488)
	Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Форма", 	ЭтаФорма);
		СтруктураПараметров.Вставить("Объект", "Документ.бит_ЗаявкаНаРасходованиеСредств");
		бит_РаботаСДиалогамиКлиентСервер.ВыполнитьБлокировкуПолейНаФормеОбъекта(СтруктураПараметров, СписокДоступныхПолей);
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-09-29 (#3488)
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-03 (#ТП_БП05_ФР07)
	ок_УстановитьВидимостьЭлементов();
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-03 (#ТП_БП05_ФР07)

	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-06 (#4209)
	ок_УправлениеФормамиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-06 (#4209)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведение.бит_ЗаявкаНаРасходованиеСредств";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина);
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		
		// Надо отследить момент окончания проведения или отказа от него
		// в веб-клиенте функциональность отключена, т.к. приводит к возникновению исключения.
		ПодключитьОбработчикОжидания("ОжиданиеПроведенияДокумента", 0.1, Истина);
		
	#КонецЕсли
	
	Если МногострочныйДокумент И Параметры.Ключ.Пустая() Тогда
		ПересчитатьСуммыФорма();
	КонецЕсли;
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-02 (#4209)
	ВыполнитьПроверкуЗаполненияБС(Отказ, ПараметрыЗаписи);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-02 (#4209)
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если МногострочныйДокумент Тогда
		СинхронизироватьРеквизитыШапкиИСтроки("Шапка");
	Иначе
		СинхронизироватьРеквизитыШапкиИСтроки("Строка");
	КонецЕсли; 
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("МногострочныйДокумент", МногострочныйДокумент);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РаспределениеНач", мКэшЗначений.Соответствие_ИД_Сумма);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Статус = Справочники.бит_СтатусыОбъектов.Заявка_Закрыта 
			Или Статус = Справочники.бит_СтатусыОбъектов.Заявка_Оплачена Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ в статусе ""%1"", проведение невозможно.'"), Статус);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Получим адрес, где будет храниться массив строк по которым прошло превышение бюджета.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ИнициализироватьХранилищеСтрокПревышения();
				
		ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресХранилищаСтрокПревышения",
			АдресХранилищаСтрокПревышения);
		
		Если ЭтоАдресВременногоХранилища(АдресХранилищаБанкСчета) Тогда
			
			ТекущийОбъект.ДополнительныеСвойства.Вставить("БанковскиеСчетаПлатежнойПозиции", 
				ПолучитьИзВременногоХранилища(АдресХранилищаБанкСчета));
		
		КонецЕсли; 
	КонецЕсли;	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-14 (#3488)
	Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПересчитыватьСуммы", Элементы.Сумма.Доступность);
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-14 (#3488)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НеЗаполнятьБанкоскийСчетПриЗаписи", Истина);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИнтерактивноеРедактированиеДокумента", Истина);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Запомним начальные значения табличной части распределение.
	ЗапомнитьНачальныеЗначенияТЧРаспределение();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров);
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОтметитьСтрокиРаспределения();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеЭлементамиФормы();
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-06 (#4209)
	ок_УправлениеФормамиКлиент.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-06 (#4209)
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ОтметитьСтрокиРаспределения();
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УстановитьНастройкиДоступностиЭлементов();
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = КонтролируемыеРеквизиты.ВидОперации;
	КонецЕсли; 
	
	Если Объект.ВидОперации <> КонтролируемыеРеквизиты.ВидОперации Тогда
		ПриИзмененииВидаОперации();
	КонецЕсли; 
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-03 (#ТП_БП05_ФР07)
	ок_УстановитьВидимостьЭлементов();
	ок_ЗаполнитьПризнакНеСоздаватьПлатежноеПоручение();
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-03 (#ТП_БП05_ФР07)
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляУправленияВидимостью()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыДляУправления = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ДокументОбъект);

	Возврат ПараметрыДляУправления;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьКурсКратностьДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаявкиПриИзменении(Элемент)
		
	ОбновитьКонтролируемыеРеквизиты("ТипЗаявки", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте 
Процедура ГиперссылкаГрафикПлатежейНажатие(Элемент)
    
    // Откроем график платежей.
    бит_КазначействоКлиент.ОткрытьГрафикПлатежей(Объект, ЭтотОбъект);
	
КонецПроцедуры // ГиперссылкаГрафикПлатежейНажатие()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(Объект, Истина);
	
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	
	// Проверим принадлежность ЦФО к статье оборотов в Распределении.
	Для Каждого ТекСтрока Из Объект.Распределение Цикл
		ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекСтрока, Истина, ТекСтрока.НомерСтроки - 1);
	КонецЦикла;
	
	ЗаполнитьСценарий(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	ИзменениеФизЛица();
	ПриИзмененииПоставляемыхРеквизитов(Объект.ФизическоеЛицо);	

КонецПроцедуры

&НаКлиенте
Процедура ЦФОПриИзменении(Элемент)
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(Объект, Истина);
	
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяОборотовПриИзменении(Элемент)
	
	ИзменениеСтатьиОборотов(Объект);
	РассчитатьСуммуБезНДС();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	ПриИзмененииОснованийДляНазначениеПлатежа("СтатьяОборотов");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагента();

	СформироватьНазначениеПлатежаСервер(Ложь, "Контрагент");
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-15 (#3537)
	ЗаполнитьОсновнойБанковскийСчетКонтрагента();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-15 (#3537)
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_СписокПриИзменении(Элемент)
	
	ПриИзмененииКонтрагента();
	
	СформироватьНазначениеПлатежаСервер(Ложь, "Контрагент");
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-15 (#3537)
	ЗаполнитьОсновнойБанковскийСчетКонтрагента();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-15 (#3537)
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // Аналитика_НачалоВыбора()

// Процедура - обработчик события "АвтоПодбор" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
                                                               
КонецПроцедуры // Аналитика_АвтоПодбор()

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_i" (i от 1 до 4).
// 
&НаКлиенте
Процедура Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,Объект
	                                                                       	,Элемент.Имя
																		   	,СтандартнаяОбработка
																		   	,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры // Аналитика_Очистка()

&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	ИзменениеДатыРасхода();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПлатежаКрайняяПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"				 , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", Объект.ДатаПлатежаКрайняя);
	
	Если ЗначениеЗаполнено(Объект.ДатаПлатежаКрайняя)
		И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Истина) Тогда 
		
		Объект.ДатаПлатежаКрайняя = Объект.ДатаРасхода;
	КонецЕсли;
	
	ОбновитьКонтролируемыеРеквизиты("ДатаПлатежаКрайняя", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ПриИзмененииВалюты();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокумента_СписокПриИзменении(Элемент)
	
	ПриИзмененииВалюты();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма".
// 
&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	РассчитатьСуммуНДС(Объект);
	РассчитатьСуммуБезНДС();
	
	РаспределитьСуммуПоВедомостям();
	СинхронизироватьРеквизитыШапкиИСтроки("Строка");
	СформироватьНазначениеПлатежаСервер(Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтавкаНДС".
// 
&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-15 (#3488)
	//РассчитатьСуммуНДС(Объект);
	//РассчитатьСуммуБезНДС();	
	//Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования
	//	И НЕ Элементы.Сумма.Доступность Тогда
		
		РассчитатьСуммуНДС(Объект, Ложь);
	//	Возврат;
	//	
	//КонецЕсли; 
	
	
	////+сундукова 20.04.16 №2319
	////РассчитатьСуммуНДС(Объект);
	//РассчитатьСуммуНДС(Объект,Истина);
	////+сундукова 20.04.16 №2319
	//РассчитатьСуммуБезНДС();
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-15 (#3488)
	
	СинхронизироватьРеквизитыШапкиИСтроки("Строка");
	СформироватьНазначениеПлатежаСервер(Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НазначениеПлатежа".
// 
&НаКлиенте
Процедура НазначениеПлатежаПриИзменении(Элемент)
	
	Если ФормироватьНПУпрАвтоматически Тогда
		Объект.НазначениеПлатежаУпр = Объект.НазначениеПлатежа;
	КонецЕсли;
	
	УстановитьФлагФормироватьНПУпрАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НазначениеПлатежаУпр".
// 
&НаКлиенте
Процедура НазначениеПлатежаУпрПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНПУпрАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "НазначениеПлатежаУпр".
// 
&НаКлиенте
Процедура НазначениеПлатежаУпрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда  	
		ФормироватьНПУпрАвтоматически = Истина;
	КонецЕсли; 
	
КонецПроцедуры // НазначениеПлатежаУпрОбработкаВыбора()

// Процедура - обработчик события "АвтоПодбор" поля ввода "НазначениеПлатежаУпр".
// 
&НаКлиенте
Процедура НазначениеПлатежаУпрАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Объект.НазначениеПлатежа);
	
КонецПроцедуры // НазначениеПлатежаУпрАвтоПодбор()

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора(-1, Истина);
	
	// +СБ. Широков Николай. 2014-10-23. Заполнение профиля разноски из договора
	Объект.СБ_ПрофильРазноски = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "СБ_ПрофильРазноски");
	// -СБ. Широков Николай
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-15 (#3537)
	ЗаполнитьОсновнойБанковскийСчетКонтрагента();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-15 (#3537)
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЮрФизЛицоПриИзменении(Элемент)

	КонтрагентЮрФизЛицоПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Функция выполняет запись документа
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	ДействиеВыполнено - булево 
//
&НаСервере
Функция ЗаписатьПровестиДокумент()
	
	Если Объект.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	// Запишем документ.
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОбъект, РежимЗаписи,, "Ошибки");
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Процедура - обработчик события "Нажатие" кнопки "ОплатаЗаСчет".
//
&НаКлиенте
Процедура ОплатаЗаСчет(Команда)
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаСтрокПревышения) Тогда
		МассивСтрокПревышения = ПолучитьИзВременногоХранилища(АдресХранилищаСтрокПревышения);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОплатаЗаСчетИзменение", ЭтотОбъект); 
		ТекстВопроса = НСтр("ru = 'Документ изменен. Перед вводом корректировки его необходимо записать. Записать?'");
		ПоказатьВопрос(Оповещение
						, ТекстВопроса 
						, РежимДиалогаВопрос.ДаНетОтмена
						, 30
						,
						, НСтр("ru = 'Документ изменен'"));
					   
			
	Иначе
		
		ОбработатьПроцедурыОкончанияОплатаЗаСчет();
		
	КонецЕсли;	
		
КонецПроцедуры

// Процедура выполняет окончательные действия процедуры "ОплатаЗаСчет".
//
&НаКлиенте
Процедура ОбработатьПроцедурыОкончанияОплатаЗаСчет()

	МассивСтрокПревышения = ПолучитьИзВременногоХранилища(АдресХранилищаСтрокПревышения);
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеЗаполнения.Вставить("ДокОснование"		 , Объект.Ссылка);
	ДанныеЗаполнения.Вставить("МассивСтрокПревышения", МассивСтрокПревышения);
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Основание", ДанныеЗаполнения);
	
	ОткрытьФорму("Документ.бит_КорректировкаКонтрольныхЗначений.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры // ОбработатьПроцедурыОкончанияОплатаЗаСчет()

// Процедура обработчик оповещения "ОплатаЗаСчетИзменение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ОплатаЗаСчетИзменение(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ДействиеВыполнено = ЗаписатьПровестиДокумент();
	
	Модифицированность = НЕ ДействиеВыполнено;
	
	ОбработатьПроцедурыОкончанияОплатаЗаСчет();
	
КонецПроцедуры // ОплатаЗаСчетИзменение

// Процедура - обработчик события "ПриИзменении" флажка "СверхБюджета".
//
&НаКлиенте
Процедура СверхБюджетаПриИзменении(Элемент)
	
	УстановитьВидимостьКнопкиОплатитьЗаСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение)
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		
		Если ВыбранноеЗначение = Тип("ДокументСсылка.бит_ВалютныйСвоп") Тогда
			Объект.ДокументОснование = Неопределено;
			ТекстСообщения = НСтр("ru = 'Заполнение по документу ""Валютный своп"" из формы этого документа не поддерживается.'"); 
			ПоказатьПредупреждение(,ТекстСообщения);
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-19 (#НТП_БП12_ФР04)
		Если ВыбранноеЗначение = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			Объект.ДокументОснование = Неопределено;
			ТекстСообщения = НСтр("ru = 'Ручное заполнение невозможно. Воспользуйтесь обработкой по формирования ЗнРДС.'"); 
			ПоказатьПредупреждение(,ТекстСообщения);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-19 (#НТП_БП12_ФР04)
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-07 (#4337)
		Если ВыбранноеЗначение = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор")
			И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтандартнаяОбработка = Ложь;
			ЗаполнитьДокументОснованияИзЗаявкиНаДоговорПриЗакрытии();
		КонецЕсли;
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-07 (#4337)
	Иначе
		Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		СтандартнаяОбработка = Ложь;
		
		Объект.ДокументОснование = ВыбранноеЗначение;
		//+Сундукова 20.04.16 №2412
		ПроверитьИмеющиесяЗаявкиПоОснованию();
		//-Сундукова 20.04.16 №2412		
		ПриИзмененииДокументаОснования();
		РассчитатьСуммуБезНДС();
		УправлениеЭлементамиФормы();
		ЗаполнитьКонтролируемыеРеквизиты(ЭтотОбъект);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-30 (#3842)
		Объект.ок_СпособСоздания = 4;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-30 (#3842)
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-07 (#4337)
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор")
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-07 (#4337)
	
	Отборы = Новый Массив;  
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отборы.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
		Отборы.Добавить(Новый ПараметрВыбора("Отбор.ФормаОплаты", Объект.ФормаОплаты))
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Отборы);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПриИзмененииПоставляемыхРеквизитов(Объект.Проект);	
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)
	
	ПриИзмененииПоставляемыхРеквизитов(Объект.НоменклатурнаяГруппа);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные") Тогда
		СписаниеСРасчетногоСчетаФормыКлиент.ВедомостьЗарплатаРаботникуНачалоВыбора(
			ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);

	Иначе	
		РасходныйКассовыйОрдерФормыКлиент.ВедомостьЗарплатаРаботникуНачалоВыбора(ЭтотОбъект, 
			Элемент, ДанныеВыбора, СтандартнаяОбработка);	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуПриИзменении(Элемент)
	
	ВедомостьЗарплатаРаботникуПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьЗарплатаРаботникуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(Объект.ПлатежнаяВедомость);

КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
		Объект.ФормаОплаты = КонтролируемыеРеквизиты.ФормаОплаты; 
	КонецЕсли; 

	Если КонтролируемыеРеквизиты.ФормаОплаты = Объект.ФормаОплаты Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПараметрыВыбораВидаОперации(ЭтотОбъект);
	
	ДоступныеЗначения = ДоступныеЗначенияВидовОпераций(Объект.ФормаОплаты);
	Если ДоступныеЗначения.НайтиПоЗначению(Объект.ВидОперации) = Неопределено Тогда
		Объект.ВидОперации = ДоступныеЗначения[0].Значение;
		ПриИзмененииВидаОперации();
	Иначе
		ЗаполнитьКонтролируемыеРеквизиты(ЭтотОбъект);
		// Зарплатные реквизиты очищать всегда, т.к. они содержат типы данных чувствительные к форме оплаты.
		Объект.ПлатежнаяВедомость = Неопределено;
		Объект.ПеречислениеЗаработнойПлаты.Очистить();
		Объект.ПеречислениеДепонентов.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределение

&НаКлиенте
Процедура РаспределениеПриИзменении(Элемент)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-05 (#3816)
	//Объект.Сумма = Объект.Распределение.Итог("Сумма");
	Если НЕ ок_НастройкиДоступностиПолейОбъектовДляРедактирования Тогда
		Объект.Сумма = Объект.Распределение.Итог("Сумма");
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-05 (#3816)
	СформироватьНазначениеПлатежаСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПередУдалением(Элемент, Отказ)
	
	Если Объект.Распределение.Количество() = 1 Тогда
		Отказ = Истина;
	Иначе
		ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
		Если ТекущиеДанные.ВведенаПлатежнаяПозиция Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Эта строка связана с платежной позицией.'"); 
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		УстановитьИДСтроки(ТекущиеДанные.ИД);
		ТекущиеДанные.ВведенаПлатежнаяПозиция = Ложь;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваРаспределения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	Если НЕ ОтменаРедактирования И ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	КонецЕсли;
	СформироватьНазначениеПлатежаСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПослеУдаления(Элемент)
	
	НастроитьВидимостьАналитикБюджетирования();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.ОбработкаВыбораПоляТабличногоПоля("Распределение", Объект.Распределение,
																Поле, ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеЦФОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИндексСтроки  = ТекущиеДанные.НомерСтроки - 1;
	
	// Проверим принадлежность ЦФО к статье оборотов.
	ПроверитьПринадлежностьЦФОКСтатьеОборотов(ТекущиеДанные, Истина, ИндексСтроки);
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	
	ИзменениеСтатьиОборотов(ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеВидПлатежаПоКредитамЗаймамПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИндексСтроки  = ТекущиеДанные.НомерСтроки - 1;
	
	мКэшЗначений.СписокСтатейПринадлежность = СписокСтатейПоПринадлежности(, ИндексСтроки);
	УстановитьПараметрыВыбораСтатей(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	
	// Первый заполненный договор оказывает влияние на значение валюты документа и
	// настройку параметров выбора элемента "РаспределениеДоговорКонтрагента" в таблице целиком.
	// Если это единственный договор в списке, то он влияет на валюту документа.
	КоличествоВхождений = 0;
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		Если ТекущиеДанные.НомерСтроки = СтрокаТаблицы.НомерСтроки Тогда
			// Редактируемая строка всегда идет в зачет.
			КоличествоВхождений = КоличествоВхождений + 1;
		Иначе	
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
				// Учитываются заполненные договоры в других строках.
				КоличествоВхождений = КоличествоВхождений + 1;	
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
	ИзменитьВалюту = (КоличествоВхождений <= 1);

	ПриИзмененииДоговора(Идентификатор, ИзменитьВалюту);
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика_i" (i от 1 до 4).
// в строке табличной части "Распределение".
//
&НаКлиенте
Процедура РаспределениеАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные,
		ИмяАналитики, СтандартнаяОбработка, мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодбор" полей ввода "Аналитика_i" (i от 1 до 4).
// в строке табличной части "Распределение".
//
&НаКлиенте
Процедура РаспределениеАналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные,
		ИмяАналитики, СтандартнаяОбработка, мКэшЗначений.НастройкиИзмерений);
                                                               
КонецПроцедуры

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_i" (i от 1 до 4).
// в строке табличной части "Распределение".
//
&НаКлиенте
Процедура РаспределениеАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "Распределение", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, 
		ИмяАналитики, СтандартнаяОбработка, мКэшЗначений.НастройкиИзмерений);
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеАналитика_ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма
// в строке табличной части "Распределение".
//
&НаКлиенте
Процедура РаспределениеСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДС
// в строке табличной части "Распределение".
//
&НаКлиенте
Процедура РаспределениеСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьНачальныеСвойстваАналитикСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "Распределение"));
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПроектПриИзменении(Элемент)
	
	ПриИзмененииПоставляемыхРеквизитов(Элементы.Распределение.ТекущиеДанные.Проект);
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеНоменклатурнаяГруппаПриИзменении(Элемент)
	
	ПриИзмененииПоставляемыхРеквизитов(Элементы.Распределение.ТекущиеДанные.НоменклатурнаяГруппа);
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеречислениеЗаработнойПлаты

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриИзменении(Элемент)
	
	Объект.Сумма = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	СформироватьНазначениеПлатежаСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
		УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(ТекущиеДанные.Ведомость);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущаяВедомость = ТекущиеДанные.Ведомость;
			Если ПроверитьДублиВедомостей(ТекущаяВедомость) Тогда
				УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(ТекущиеДанные.Ведомость);	
				ТекущиеДанные.СуммаПлатежа = 0;
				ОтменаРедактирования = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.Сумма = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыПослеУдаления(Элемент)
	
	Объект.Сумма = Объект.ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
	
	СуммаКВыплатеДоИзменения = ТекущиеДанные.СуммаПлатежа;
	
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные") Тогда
		ТекущиеДанные.СуммаПлатежа = СписаниеСРасчетногоСчетаФормыВызовСервера.СуммаЗаработнойПлатыПоВедомости(
										ТекущиеДанные.Ведомость, Неопределено, УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		ТекущиеДанные.СуммаКВыплате = РасходныйКассовыйОрдерВызовСервера.СуммаВыплаченнойЗарплатыПоВедомости(
										ТекущиеДанные.Ведомость, Объект.Ссылка, ТекущиеДанные.НомерСтроки,
										УчетЗарплатыИКадровВоВнешнейПрограмме, Ложь);
	КонецЕсли;
	
	Если СуммаКВыплатеДоИзменения <> ТекущиеДанные.СуммаПлатежа Тогда
		ТекстСообщения = НСтр("ru = 'Состав оплачиваемых ведомостей был изменен. Сумма документа пересчитана.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные") Тогда
		СписаниеСРасчетногоСчетаФормыКлиент.ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(
			ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	Иначе	
		РасходныйКассовыйОрдерФормыКлиент.ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(
			ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
	УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(ТекущиеДанные.Ведомость);

КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеЗаработнойПлатыВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПроверитьДублиВедомостей(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеречислениеДепонентов

&НаКлиенте
Процедура ПеречислениеДепонентовПриИзменении(Элемент)
	
	Объект.Сумма = Объект.ПеречислениеДепонентов.Итог("СуммаПлатежа");
	СформироватьНазначениеПлатежаСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
		
		СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеДепонентовВедомость(
			ЭтотОбъект, ТекущиеДанные.Ведомость);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПеречислениеДепонентовПриОкончанииРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект.Сумма = Объект.ПеречислениеДепонентов.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовПослеУдаления(Элемент)

	Объект.Сумма = Объект.ПеречислениеДепонентов.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьПриИзменении(Элемент)
	
	СтрокаПлатеж = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
	СтрокаПлатеж.СуммаПлатежа = СписаниеСРасчетногоСчетаФормыВызовСервера.СуммаНеВыплаченнойЗарплатыРаботнику(
		Объект.Ссылка, Объект.Организация, Объект.Дата, Объект.ФизическоеЛицо, СтрокаПлатеж.Ведомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
		
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПеречислениеДепонентовВедомостьНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписаниеСРасчетногоСчетаФормыКлиент.ПеречислениеДепонентовВедомостьОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеДепонентовВедомостьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПеречислениеДепонентов.ТекущиеДанные;
	СписаниеСРасчетногоСчетаФормыКлиентСервер.УстановитьПустоеЗначениеПеречислениеДепонентовВедомость(ЭтотОбъект, ТекущиеДанные.Ведомость);
	
	Модифицированность = Истина;
	
КонецПроцедуры
 
#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ДействияФормыСписок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДействияФормыСписокЗавершение", ЭтотОбъект);
	
	Если МногострочныйДокумент И Объект.Распределение.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Все строки табличной части, кроме первой, будут удалены.
					   |Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, 
						НСтр("ru = 'Заявка на расходование денежных средств'"));  			   
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте 
Процедура ДействияФормыСписокЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НажатиеКнопкиСписок();
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьПоКурсам(Команда)
	
	Если Модифицированность Тогда
	
		Оповещение = Новый ОписаниеОповещения("ВопросАктуализировать", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Выполнить запись?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе	
		
		АктуализироватьПоКурсамСервер();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения вопроса о необходимости записи документа 
// перед актуализацией. 
//
&НаКлиенте
Процедура ВопросАктуализировать(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флОК = Записать();
		
		Если флОК Тогда
			АктуализироватьПоКурсамСервер();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ВопросАктуализировать	

&НаКлиенте
Процедура РаспределитьПо(Команда)
	
	ТекЭлемент = Элементы.Распределение.ТекущийЭлемент;
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СтрЗаменить(ТекЭлемент.Имя, "Распределение", "");
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	
	Если НЕ РаспределениеПоддерживается(ТекущиеДанные, ТекЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗначение = ТекущиеДанные[ИмяКолонки];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоАналитике"));
	ПараметрыФормы.Вставить("ИмяКолонки", ИмяКолонки);
	ПараметрыФормы.Вставить("ТекущееЗначение", ТекущееЗначение);
	
	Отборы = Новый Структура;
	Если ТекЭлемент.ПараметрыВыбора.Количество() <> 0 Тогда
		Для каждого Параметр Из ТекЭлемент.ПараметрыВыбора Цикл
			Отборы.Вставить(СтрЗаменить(Параметр.Имя,"Отбор.", ""), Параметр.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	Если ТекЭлемент = Элементы.РаспределениеДоговорКонтрагента Тогда
		Отборы.Вставить("Владелец",    Объект.Контрагент);
		Отборы.Вставить("Организация", Объект.Организация);
	КонецЕсли; 
	ПараметрыФормы.Вставить("Отбор", Отборы);
	
	Оповещение = Новый ОписаниеОповещения("РаспределитьПоАналитикеЗавершение", ЭтотОбъект);
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);

КонецПроцедуры

// Процедура обработчик оповещения "РаспределитьПоАналитикеЗавершение".
//
// Параметры:
// Ответ - Структура
// ДополнительныеДанные - Произвольный.
//
&НаКлиенте 
Процедура РаспределитьПоАналитикеЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		ВыделенныеСтроки = Элементы.Распределение.ВыделенныеСтроки;
		ВыполнитьРаспределение(ВыделенныеСтроки, Ответ);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначение(Команда)
	
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Наличные") Тогда
		ТекстСообщения = НСтр("ru = 'Кассовые документы не требуют заполнения назначения платежа.
									|Назначение платежа, при необходимости, заполняется пользователем.'"); 
		ПоказатьПредупреждение(, ТекстСообщения,,НСтр("ru = 'Назначение платежа'"));
	Иначе	
		Объект.НазначениеПлатежа = "";
		ПричиныИзмененияНазначенияПлатежа.Очистить();
		СформироватьНазначениеПлатежаСервер(Ложь,, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииПлатежноеПоручение(Команда)
	
	СоздатьПлатежныйДокумент("Поручение");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииПлатежныйДокумент(Команда)
	
	СоздатьПлатежныйДокумент("Списание");
	
КонецПроцедуры
  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция АналитическиеРазрезы()

	Разрезы = Новый Массив(); 
	Разрезы.Добавить("НоменклатурнаяГруппа");
	Для Индекс = 1 По 7 Цикл
		Разрезы.Добавить("Аналитика_" + Индекс);
	КонецЦикла; 
	
	Возврат Разрезы;
	
КонецФункции
 
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	Разрезы = АналитическиеРазрезы();
	Для каждого Разрез Из Разрезы Цикл
		
		// Доступность аналитик
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Распределение" + Разрез);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Распределение." + Разрез + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
				
		// Автоотметка незаполненого у полей таблицы.
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Распределение" + Разрез);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Распределение." + Разрез + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Распределение." + Разрез + "Проверять", ВидСравненияКомпоновкиДанных.Равно, Истина);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Распределение." + Разрез, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьСтрокиРаспределения()
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК ВведенаПлатежнаяПозиция,
	|	ПлатежнаяПозицияРаспределение.ИД КАК ИД
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция.Распределение КАК ПлатежнаяПозицияРаспределение
	|ГДЕ
	|	ПлатежнаяПозицияРаспределение.Ссылка.ДокументОснование = &Заявка";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПлатежныеПозиции = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		СтрокаТаблицы.ВведенаПлатежнаяПозиция = (ПлатежныеПозиции.Найти(СтрокаТаблицы.ИД, "ИД") <> Неопределено);
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы)
	
	СвойстваСтатьи = бит_БюджетированиеПовтИспВызовСервера.ПолучитьСвойстваСтатьи(СтрокаТаблицы.СтатьяОборотов);
	Разрезы = АналитическиеРазрезы(); 
	
	Для каждого Разрез Из Разрезы Цикл
		СтрокаТаблицы[Разрез + "Доступность"] = СвойстваСтатьи[Разрез];
		СтрокаТаблицы[Разрез + "Проверять"] = СвойстваСтатьи[Разрез + "ПроверятьЗаполнение"];
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	мКэшЗначений = Новый Структура;
	
	ИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

	Статьи = СписокСтатейПоПринадлежности();
	
	мКэшЗначений.Вставить("ИзмеренияДоп"      		  , ИзмеренияДоп);
	мКэшЗначений.Вставить("НастройкиИзмерений"		  , НастройкиИзмерений);
	мКэшЗначений.Вставить("СписокСтатейПринадлежность", Статьи);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("СтавкиНДС"						   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.СтавкиНДС));
	КэшПеречисления.Вставить("бит_РасходДоход"					   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов"			   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ВидыДенежныхСредств"			   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыДенежныхСредств));
	КэшПеречисления.Вставить("бит_ТипыЗаявокНаРасходованиеСредств" , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыЗаявокНаРасходованиеСредств));
	КэшПеречисления.Вставить("бит_ВидыОперацийЗаявкаНаРасходование", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование));
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов"		   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов));
	
	мКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	ВидыДоговоровПоОперации(ЭтотОбъект);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДокументМожетБытьОформленВВалюте(ЭтотОбъект);
	
	УстановитьСостояниеДокумента();
	УстановитьПараметрыВыбораВалюты(ЭтотОбъект); 
	
	УстановитьПараметрыВыбораВидаОперации(ЭтотОбъект);
	УстановитьПараметрыВыбораДоговораКонтрагента(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Распределение = Объект.Распределение;
	
	Если Распределение.Количество() = 0 Тогда
		СтрокаРаспределение = Распределение.Добавить();
		УстановитьИДСтроки(СтрокаРаспределение.ИД);
	КонецЕсли;
	
	ЗапомнитьНачальныеЗначенияТЧРаспределение();
	
КонецПроцедуры

&НаСервере 
Функция ИменаЭлементовУправленияПодлежащиеБлокировке()
	
	// Имена элементов управления, подлежащие блокировке в статусах выше рабочего.
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("ТипЗаявки");
	ИменаЭлементов.Добавить("Организация");
	ИменаЭлементов.Добавить("Организация_Список");
	ИменаЭлементов.Добавить("ЦФО");
	ИменаЭлементов.Добавить("Сценарий");
	ИменаЭлементов.Добавить("Сценарий_Список");
	ИменаЭлементов.Добавить("СтатьяОборотов");
	ИменаЭлементов.Добавить("Проект");
	ИменаЭлементов.Добавить("НоменклатурнаяГруппа");
	ИменаЭлементов.Добавить("КонтрагентЮрФизЛицо");
	ИменаЭлементов.Добавить("КонтрагентЮрФизЛицо1");
	ИменаЭлементов.Добавить("Контрагент");
	ИменаЭлементов.Добавить("Контрагент_Список");
	ИменаЭлементов.Добавить("ФизическоеЛицо");
	ИменаЭлементов.Добавить("ФизическоеЛицо1");
	ИменаЭлементов.Добавить("ДоговорКонтрагента");
	ИменаЭлементов.Добавить("ДатаРасхода");
	ИменаЭлементов.Добавить("ДатаПлатежаКрайняя");
	ИменаЭлементов.Добавить("ДатаРасхода_Список");
	ИменаЭлементов.Добавить("ДатаПлатежаКрайняя_Список");
	ИменаЭлементов.Добавить("ЗаполнитьНазначение");
	ИменаЭлементов.Добавить("НазначениеПлатежа");
	ИменаЭлементов.Добавить("НазначениеПлатежа_Список");
	ИменаЭлементов.Добавить("НазначениеПлатежаУпр");
	ИменаЭлементов.Добавить("НазначениеПлатежаУпр_Список");
	ИменаЭлементов.Добавить("ВалютаДокумента");
	ИменаЭлементов.Добавить("ВалютаДокумента_Список");
	ИменаЭлементов.Добавить("КурсДокумента");
	ИменаЭлементов.Добавить("КурсДокумента_Список");
	ИменаЭлементов.Добавить("Сумма");
	ИменаЭлементов.Добавить("СтавкаНДС");
	ИменаЭлементов.Добавить("Важность");
	ИменаЭлементов.Добавить("РаспределениеКонтекстноеМенюРаспрделитьПо");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-04 (#3065)
	ИменаЭлементов.Добавить("НДС");
	ИменаЭлементов.Добавить("СуммаБезНДС");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-04 (#3065
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Начало 2019-10-24 (#3488)
	ИменаЭлементов.Добавить("Ок_СтатьяОборотовБДР");
	ИменаЭлементов.Добавить("РаспределениеОк_СтатьяОборотовБДР");
	ИменаЭлементов.Добавить("СБ_БанковскийСчетКонтрагента");
	ИменаЭлементов.Добавить("ок_БанковскийСчетКонтрагента_МнЗаявка");
	//ОКЕЙ Рычаков А.С.(СофтЛаб) Конец 2019-10-24 (#3488)
	
	ИменаЭлементов.Добавить("ФормаОплаты");
	ИменаЭлементов.Добавить("ВидОперации");
	ИменаЭлементов.Добавить("ВидПлатежаПоКредитамЗаймам");
	
	МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для н = 1 По МаксКолвоДопАналитик Цикл
		ИменаЭлементов.Добавить("Аналитика_"+н);
	КонецЦикла;
	
	ИменаЭлементов.Добавить("ТипПлатежа");
	ИменаЭлементов.Добавить("ДокументОснование");
	
	// Добавим именя элементов табличного поля Распределение.
	ИменаЭлементов.Добавить("РаспределениеЦФО");
	ИменаЭлементов.Добавить("РаспределениеСтатьяОборотов");
	ИменаЭлементов.Добавить("РаспределениеПроект");
	ИменаЭлементов.Добавить("РаспределениеНоменклатурнаяГруппа");
	ИменаЭлементов.Добавить("РаспределениеДоговорКонтрагента");
	
	Для н = 1 По МаксКолвоДопАналитик Цикл
		ИменаЭлементов.Добавить("РаспределениеАналитика_"+н);
	КонецЦикла;
	
	ИменаЭлементов.Добавить("РаспределениеСумма");
	ИменаЭлементов.Добавить("РаспределениеСтавкаНДС");
	ИменаЭлементов.Добавить("РаспределениеНДС");
	
	Возврат ИменаЭлементов;
	
КонецФункции

// Функция определяет следует ли заблокировать ключевые реквизиты заявки. Сервер.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   ЗаблокироватьРеквизиты - Булево.
//
&НаСервере 
Функция НужноЗаблокироватьКлючевыеЭлементыСервер()

	флЗаблокироватьЭлементы = Ложь;
	Если Объект.Проведен 
		Или Статус = СсылкаСтатуса("Заявка_Утверждена")
		Или Статус = СсылкаСтатуса("Заявка_Оплачена")
		Или Статус = СсылкаСтатуса("Заявка_Закрыта") Тогда
		
		флЗаблокироватьЭлементы = Истина;
		
	КонецЕсли; 
	
	Возврат флЗаблокироватьЭлементы;
	
КонецФункции // НужноЗаблокироватьКлючевыеЭлементыСервер()

// Процедура получает вид договора контрагента.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
&НаСервереБезКонтекста 
Функция ПолучитьВидДоговораКонтрагента(ДоговорКонтрагента)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");	
	Иначе	
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
	КонецЕсли; 
	
	Возврат ВидДоговора;
	
КонецФункции

&НаСервереБезКонтекста 
Процедура УстановитьСтавкуНДС(СтавкаНДС, СтатьяОборотов, ВидОперации)
	
	ОперацииБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС();
	Если ОперацииБезНДС.Найти(ВидОперации) <> Неопределено Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		Если ЗначениеЗаполнено(СтатьяОборотов) Тогда
			СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяОборотов, "СтавкаНДС");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьКурсКратностьДокумента()
	
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента 	  = КурсВалюты.Курс;
	Объект.КратностьДокумента = КурсВалюты.Кратность;
	
КонецПроцедуры

// Процедура выполняет действия на сервере, необходимые при изменении Организации.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПричиныИзмененияНазначенияПлатежа.Добавить("Организация");	

	// Выполняем общие действия для всех документов при изменении Организация.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
		
	Документы.бит_ЗаявкаНаРасходованиеСредств.ВидимостьНазначенныхАналитик(ЭтотОбъект);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3235)
	//бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикШапкиПриИзмененииОрганизации(
	//	ЭтотОбъект, Объект, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));
	//Заменено на:
	ИсключенияСвязанныхТипов = Новый Массив;
	ИсключенияСвязанныхТипов.Добавить(Тип("ДокументСсылка.бит_ФормаВводаБюджета"));
	
	СтрПараметрыСвАналитики = ПараметрыУстановкиСвойствАналитик(ЭтотОбъект);
	СтрПараметрыСвАналитики.Вставить("ИсключенияСвязанныхТипов",ИсключенияСвязанныхТипов);
	
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, СтрПараметрыСвАналитики);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3235)	
	                                              
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-02-15 (#3235)
	//бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикТаблицыПриИзмененииОрганизации(
	//	Объект.Распределение,
	//	ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "Распределение"));
	ИсключенияСвязанныхТипов = Новый Массив;
	ИсключенияСвязанныхТипов.Добавить(Тип("ДокументСсылка.бит_ФормаВводаБюджета"));
	
	СтрПараметрыСвАналитики = ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "Распределение");
	СтрПараметрыСвАналитики.Вставить("ИсключенияСвязанныхТипов",ИсключенияСвязанныхТипов);   	
	
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикТаблицыПриИзмененииОрганизации(
		Объект.Распределение,
		СтрПараметрыСвАналитики);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-02-15 (#3235)
	
	СформироватьНазначениеПлатежаСервер(Ложь, "Организация");
	ПриИзмененииДоговораНаСервере(-1, Ложь);
	
КонецПроцедуры

&НаКлиенте 
Процедура ИзменениеДатыРасхода()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаРасхода"  , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ДатаДокумента", Объект.Дата);
	
	Если Не бит_Казначейство.ДатаРасходаКорректна(СтруктураПараметров, Истина) Тогда
		Объект.ДатаРасхода = КонтролируемыеРеквизиты.ДатаРасхода;
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ДатаПлатежаКрайняя) Тогда
		Объект.ДатаПлатежаКрайняя = Макс(Объект.ДатаРасхода, Объект.ДатаПлатежаКрайняя);
	КонецЕсли; 

	СтруктураПараметров.Вставить("Дата"				 , Объект.ДатаРасхода);
	СтруктураПараметров.Вставить("ВидДаты"			 , "Дата расхода");
	СтруктураПараметров.Вставить("ДатаПлатежаКрайняя", Объект.ДатаПлатежаКрайняя);
	
	СинхронизацияДатыПлатежа = бит_Казначейство.СинхронизироватьДатуПлатежаИДатуНеПозднее(Объект.Организация, Объект.ЦФО);
	
	Если СинхронизацияДатыПлатежа
		И ЗначениеЗаполнено(Объект.ДатаПлатежаКрайняя) 
		И бит_КазначействоКлиент.ДатаПозжеЧемДатаПлатежаКрайняя(СтруктураПараметров, Ложь) Тогда
		
		Объект.ДатаПлатежаКрайняя = Объект.ДатаРасхода;
	КонецЕсли;
	
	ОбновитьКонтролируемыеРеквизиты("ДатаРасхода", 		ЭтотОбъект);
	ОбновитьКонтролируемыеРеквизиты("ДатаПлатежаКрайняя",  ЭтотОбъект);

КонецПроцедуры

// Процедура выполняет действия на сервере, необходимые при изменении ЦФО.
//
// Параметры:
//  СтруктураПараметров - Структура.
//  ИндексСтроки 		- Число, по умолчанию Неопределено.
//
&НаСервере
Процедура ИзменениеЦФО(СтруктураПараметров, ИндексСтроки = Неопределено)

	Если ЗначениеЗаполнено(Объект.ЦФО) Тогда
		
		ВыводитьСообщения = ?(СтруктураПараметров.Свойство("ВыводитьСообщения"), СтруктураПараметров.ВыводитьСообщения, Ложь);
	
		СтруктураПараметров.СписокСтатейПринадлежность = СписокСтатейПоПринадлежности(ВыводитьСообщения, ИндексСтроки);
		
	КонецЕсли;

КонецПроцедуры // ИзменениеЦФО()

&НаСервереБезКонтекста
Процедура ИзменениеКонтрагентаСервер(Договор, Контрагент, Организация, СписокВидовДоговоров, ПараметрыВыбора)
	
	// Выполняем общие действия для всех документов при изменении Контрагент.
	Дополнительно = Новый Структура; 
	Для каждого Элемент Из ПараметрыВыбора Цикл
		ПолеОтбора = СтрЗаменить(Элемент.Имя, "Отбор.", "");
		Если ПолеОтбора = "ВидДоговора" Тогда
			Продолжить;		
		КонецЕсли; 		
		Дополнительно.Вставить(ПолеОтбора, Новый Структура("ЗначениеОтбора", Элемент.Значение));
	КонецЦикла; 
	
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Договор, Контрагент, Организация, СписокВидовДоговоров, Дополнительно);
	
КонецПроцедуры

&НаСервере 
Процедура ПриИзмененииДоговораНаСервере(ИдентификаторСтроки, ИзменитьВалюту)
	
	Если ИдентификаторСтроки = -1 Тогда
		Данные = Объект;
	Иначе	
		Данные = Объект.Распределение.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли; 
	
	Если ИдентификаторСтроки = -1 Тогда
		СинхронизироватьРеквизитыШапкиИСтроки("Строка");
		ПричиныИзмененияНазначенияПлатежа.Добавить("ДоговорКонтрагента");
		СформироватьНазначениеПлатежаСервер(Ложь, "ДоговорКонтрагента");
	КонецЕсли; 
		
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	СписокРеквизитов  = "ВалютаВзаиморасчетов, бит_ЦФО, бит_ОсновнаяСтатьяОборотов, бит_Проект";
	РеквизитыДоговора = Новый Структура(СписокРеквизитов); 
	Если ЗначениеЗаполнено(Данные.ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.ДоговорКонтрагента, СписокРеквизитов);
	КонецЕсли; 

	Если ИзменитьВалюту Тогда
		Если ЗначениеЗаполнено(Данные.ДоговорКонтрагента) Тогда
			Объект.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
			УстановитьКурсКратностьДокумента();
			УправлениеЭлементамиВалютныеОперации(ЭтотОбъект);
		КонецЕсли; 
	КонецЕсли; 
		
	Если НЕ ЗначениеЗаполнено(Данные.ЦФО) 
		И ЗначениеЗаполнено(РеквизитыДоговора.бит_ЦФО) Тогда
		Данные.ЦФО = РеквизитыДоговора.бит_ЦФО; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Данные.СтатьяОборотов) 
		И ЗначениеЗаполнено(РеквизитыДоговора.бит_ОсновнаяСтатьяОборотов) Тогда
		Если РеквизитыДоговора.бит_ОсновнаяСтатьяОборотов.РасходДоход = Перечисления.бит_РасходДоход.Расходование Тогда
			
			Данные.СтатьяОборотов = РеквизитыДоговора.бит_ОсновнаяСтатьяОборотов;
			НастроитьВидимостьАналитикБюджетирования();
			УстановитьСтавкуНДС(Данные.СтавкаНДС, Данные.СтатьяОборотов, Объект.ВидОперации);
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Данные.Проект) 
		И ЗначениеЗаполнено(РеквизитыДоговора.бит_Проект) Тогда
		Данные.Проект = РеквизитыДоговора.бит_Проект;
	КонецЕсли;
	
	ЗаполнитьКонтролируемыеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

// Процедура синхронизирует реквизиты шапки документа и строки табличной части.
//
// Параметры:
//  ИмяПриемника     - Строка: "Шапка", "Строка".
//  МассивИсключений - Массив, по умолчанию Неопределено.
//
&НаСервере 
Процедура СинхронизироватьРеквизитыШапкиИСтроки(ИмяПриемника, МассивИсключений = Неопределено)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-06-15 (#4221)
	Если МногострочныйДокумент 
		И ВРег(ИмяПриемника) = "СТРОКА" Тогда
		СтрокаТабличнойЧасти = -1;
	Иначе
		СтрокаТабличнойЧасти = 0;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-06-15 (#4221)
	
	ДокументЗаявка = РеквизитФормыВЗначение("Объект");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-06-15 (#4221)
	//ДокументЗаявка.СинхронизироватьРеквизитыШапкиИСтроки(0, ИмяПриемника, МассивИсключений);
	ДокументЗаявка.СинхронизироватьРеквизитыШапкиИСтроки(СтрокаТабличнойЧасти, ИмяПриемника, МассивИсключений);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-06-15 (#4221)
	ЗначениеВДанныеФормы(ДокументЗаявка, Объект);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Функция СписокСтатейПоПринадлежности(ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено)

	Если ТипЗнч(ИндексСтроки) = Тип("Число") Тогда
		ЦФО = Объект.Распределение[ИндексСтроки].ЦФО;
	Иначе
		ЦФО = Объект.ЦФО;
	КонецЕсли;
	
	ПараметрыОпределения = Новый Структура; 
	ПараметрыОпределения.Вставить("ЦФО", 		 	   ЦФО);
	ПараметрыОпределения.Вставить("Организация", 	   Объект.Организация);
	ПараметрыОпределения.Вставить("Дата", 		 	   Объект.Дата);
	ПараметрыОпределения.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	ПараметрыОпределения.Вставить("РасходДоход", 	   Перечисления.бит_РасходДоход.Расходование);
	ПараметрыОпределения.Вставить("ТипСтатьи", 		   Перечисления.бит_ТипыСтатейОборотов.БДДС);
	
	СписокСтатей = бит_Казначейство.ПолучитьСписокСтатейПоПринадлежности(ПараметрыОпределения);
	
    Возврат СписокСтатей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"					   , Объект.ЦФО);		
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

// Процедура применяет настройки доступности и видимости для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтотОбъект, Объект, Статус);
	
КонецПроцедуры

// Процедура Устанавливает ид строки табличной части.
//
// Параметры:
//  ТекущаяСтрока_ИД - Строка - СтрокаТабличнойЧасти.ИД.
//
&НаСервереБезКонтекста 
Процедура УстановитьИДСтроки(ТекущаяСтрока_ИД)

	ТекущаяСтрока_ИД = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры

&НаСервере 
Процедура ЗапомнитьНачальныеЗначенияТЧРаспределение()
	
	Соответствие_ИД_Сумма = Новый Соответствие;
	Распределение 		  = Объект.Распределение;
	
	Для Каждого ТекСтрока Из Распределение Цикл
		Соответствие_ИД_Сумма.Вставить(ТекСтрока.ИД, ТекСтрока.Сумма);
	КонецЦикла;
	
	// Запомним начальные значения табличной части Распределение.
	мКэшЗначений.Вставить("Соответствие_ИД_Сумма", Соответствие_ИД_Сумма);
	
КонецПроцедуры // ЗапомнитьНачальныеЗначенияТЧРаспределение()

&НаСервере 
Процедура ЗаполнитьТекстПроГрафикПлатежей()

    Если Объект.ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей Тогда
        
        ДокГрафикПлатежей = бит_Казначейство.НайтиДокументГрафикаПлатежей(Объект.Ссылка);
        
        Если ЗначениеЗаполнено(ДокГрафикПлатежей) Тогда
            
            Элементы.ГиперссылкаГрафикПлатежей.Заголовок   = Строка(ДокГрафикПлатежей);
            Элементы.ГиперссылкаГрафикПлатежей.ГиперСсылка = Истина;
            
        Иначе
            Элементы.ГиперссылкаГрафикПлатежей.Заголовок   = "Не найден";
            Элементы.ГиперссылкаГрафикПлатежей.ГиперСсылка = Ложь;
        КонецЕсли;
        
	КонецЕсли;	

КонецПроцедуры // ЗаполнитьТекстПроГрафикПлатежей()

&НаСервере
Процедура ПриИзмененииДокументаОснования()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		УправлениеЭлементамиФормы();
		Возврат;
	КонецЕсли;
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-07 (#4337)
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Статус <> Справочники.бит_СтатусыОбъектов.Заявка_Черновик Тогда
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-07 (#4337)
		ЕстьПодчиненныеДокументы = бит_ОбщегоНазначения.ЕстьПодчиненныеДокументы(Объект.Ссылка, "бит_ПлатежнаяПозиция");
		Если ЕстьПодчиненныеДокументы Тогда
			Объект.ДокументОснование = Неопределено;
			ТекстСообщения = НСтр("ru='У текущей заявки сформированы платежные позиции. Заполнение прервано.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли; 
		
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Попытка
		ДокументОбъект.Заполнить(Объект.ДокументОснование);
	Исключение
		Объект.ДокументОснование = Неопределено;
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке()); 
	КонецПопытки; 
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	// Показ расшифровки платежа списком
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-09-14 (#ТП_БП05_ФР08)
	// Закомментировано
	//МногострочныйДокумент = (Объект.Распределение.Количество() > 1);
	// Если ВидОперации - ПеречислениеДенежныхСредствПодотчетнику, всегда показывать ТЧ
	МногострочныйДокумент = (Объект.Распределение.Количество() > 1) 
								Или Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику; 
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-09-14 (#ТП_БП05_ФР08)
	
	// возможно таб.часть была перезаполнена
	Если Объект.Распределение.Количество() = 0 Тогда
		СтрокаРаспределение = Объект.Распределение.Добавить();
		УстановитьИДСтроки(СтрокаРаспределение);		
	КонецЕсли;
	
	ПриИзмененииДоговораНаСервере(-1, Истина);
	
КонецПроцедуры

// Процедура выполняет синхронизацию реквизитов таб.части и объекта
//	т.к. платформенный метод проверки заполнения реквизитов вызывается до выполнения метода модуля объекта ПередЗаписью
//	то требуется дополнительная инициация синхронизации реквизитов.
//
&НаСервере
Процедура ПересчитатьСуммыФорма() 
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("МногострочныйДокумент", МногострочныйДокумент);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-14 (#3488)
	Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПересчитыватьСуммы", Элементы.Сумма.Доступность)
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-14 (#3488)
	
	ТекущийОбъект.ПересчитатьСуммы();
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
КонецПроцедуры

// Процедура заполняет сценарий при изменении поля документа. 
// 
// Параметры: Имя - Строка
//
&НаСервере
Процедура ЗаполнитьСценарий(Имя)

	СтруктураПараметров = Новый Структура;
	Если Имя = "Организация" Тогда
		
		СтруктураПараметров.Вставить("Организация", Объект.Организация);
		
	КонецЕсли; 
	
	НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Объект.Дата , , СтруктураПараметров, "Ошибки");
	
	флКонтролироватьЗаявку = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, "КонтролироватьЗаявкуПоБюджету");
	пСценарий = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, "СценарийКонтроляПоБюджету");
	
	Если ЗначениеЗаполнено(пСценарий) И флКонтролироватьЗаявку Тогда
	
		Объект.Сценарий = пСценарий;
	
	КонецЕсли; 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3065)
	пОтметкаНезаполненного = Объект.Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования") ИЛИ
	                         Объект.Сценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования");
	
	Элементы.Ок_СтатьяОборотовБДР.ОтметкаНезаполненного 			 = пОтметкаНезаполненного;
	Элементы.РаспределениеОк_СтатьяОборотовБДР.ОтметкаНезаполненного = пОтметкаНезаполненного;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3065)	

КонецПроцедуры // ЗаполнитьСценарий()

&НаСервереБезКонтекста
Функция ВидОперацииСФизЛицом()

	Возврат Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииСФизЛицом();
	
КонецФункции

&НаСервере
Процедура ОтобразитьСкрытьКнопкуПечатиСписка()

	МенюПечати = Элементы.ПодменюПечать.ПодчиненныеЭлементы.ПодменюПечатьОбычное.ПодчиненныеЭлементы;
	КнопкаПечатиСписка = МенюПечати.ПодменюПечатьОбычное_ПечатьЗаявкаНаОплатуСписок;
	КнопкаПечатиСписка.Видимость = МногострочныйДокумент;
	
КонецПроцедуры

&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	ДокументОбъект 			= РеквизитФормыВЗначение("Объект");
	ПараметрыЭлементовФормы = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ДокументОбъект);
	
	// Контрагент
	Элементы.Контрагент.Видимость		 = ПараметрыЭлементовФормы.КонтрагентНеобходим;
	Элементы.Контрагент_Список.Видимость = ПараметрыЭлементовФормы.КонтрагентНеобходим;
	
	// Договор контрагента
	Элементы.ДоговорКонтрагента.Видимость 			   = ПараметрыЭлементовФормы.ДоговорНеобходим;
	Элементы.РаспределениеДоговорКонтрагента.Видимость = ПараметрыЭлементовФормы.ДоговорНеобходим;
	
	// Физическое лицо
	
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-03 (#ТП_БП05_ФР07)
	Если ДокументОбъект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Элементы.ФизическоеЛицо.Видимость				= Ложь;
		Элементы.ФизическоеЛицо1.Видимость				= Ложь;
		Элементы.ФизическоеЛицо.ОтметкаНезаполненного 	= Ложь;
		Элементы.ФизическоеЛицо1.ОтметкаНезаполненного	= Ложь;
		Элементы.Получатель.Видимость 	   				= Истина;
		Элементы.Получатель1.Видимость     				= Истина;

	Иначе
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-03 (#ТП_БП05_ФР07)
	
		Элементы.ФизическоеЛицо.Видимость  = ПараметрыЭлементовФормы.ФизическоеЛицоНеобходим;
		Элементы.ФизическоеЛицо1.Видимость = ПараметрыЭлементовФормы.ФизическоеЛицоНеобходим;
		Элементы.Получатель.Видимость 	   = ПараметрыЭлементовФормы.ТретьеЛицоНеобходимо;
		Элементы.Получатель1.Видимость     = ПараметрыЭлементовФормы.ТретьеЛицоНеобходимо;
		
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-03 (#ТП_БП05_ФР07)
	КонецЕсли;
	//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-03 (#ТП_БП05_ФР07)

	
	// +СБ. Широков Николай. 2014-11-26. Доработка #1176
	ДоступноИзменениеЭлемента = Новый Структура;
	// -СБ. Широков Николай 
	
	Элементы.Контрагент.Заголовок = ?(ПараметрыЭлементовФормы.ТретьеЛицоНеобходимо, НСтр("ru = 'Налогоплательщик'"), НСтр("ru = 'Контрагент'"));
	
	// установим видимость реквизита ВидПлатежаПоКредитамЗаймам
	Если Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма
		ИЛИ Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита Тогда
		
		Элементы.ВидПлатежаПоКредитамЗаймам.Видимость = Истина;
		Элементы.РаспределениеВидПлатежаПоКредитамЗаймам.Видимость = Истина;
	Иначе
		Элементы.ВидПлатежаПоКредитамЗаймам.Видимость = Ложь;
		Элементы.РаспределениеВидПлатежаПоКредитамЗаймам.Видимость = Ложь;
	КонецЕсли;
	
	ЗаблокироватьЭлементы = НужноЗаблокироватьКлючевыеЭлементыСервер();
	
	// +СБ. Широков Николай. 2014-09-24. ТЗ "Казначейство" 2.2.2.4. 
    СБ_КазначействоСервер.ПереопределитьДоступностьРедактированияЗаявки(ЭтаФорма, ЗаблокироватьЭлементы, ДоступноИзменениеЭлемента);
	// -СБ. Широков Николай
	
	Элементы.КнопкаСписок.Доступность           = НЕ ЗаблокироватьЭлементы;	
	Элементы.Распределение.ИзменятьСоставСтрок  = НЕ ЗаблокироватьЭлементы;
	Элементы.Распределение.ИзменятьПорядокСтрок = НЕ ЗаблокироватьЭлементы;
	
	ИменаЭлементов = ИменаЭлементовУправленияПодлежащиеБлокировке();
	Для каждого ИмяЭлемента Из ИменаЭлементов Цикл
		Если ТипЗнч(Элементы[ИмяЭлемента]) = Тип("КнопкаФормы") Тогда
			Элементы[ИмяЭлемента].Доступность = НЕ ЗаблокироватьЭлементы;
		Иначе	
			Элементы[ИмяЭлемента].ТолькоПросмотр = ЗаблокироватьЭлементы;
		КонецЕсли; 
	КонецЦикла; 
	
	ЭтоГрафикПлатежей = Объект.ТипЗаявки = Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.ГрафикПлатежей;
	
	// Если элементы формы не заблокированы
	// и тип заявки "График платежей", тогда запретим его редактирование.
	Если Не ЗаблокироватьЭлементы И ЭтоГрафикПлатежей Тогда
		Элементы.ТипЗаявки.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ДокументОснование.Видимость 		 = Не ЭтоГрафикПлатежей;
	Элементы.НадписьГрафикПлатежей.Видимость     = ЭтоГрафикПлатежей;
	Элементы.ГиперссылкаГрафикПлатежей.Видимость = ЭтоГрафикПлатежей;
	
	ЕстьКнопкаПровестиИЗакрыть = Элементы.Найти("ФормаПровестиИЗакрыть");
	
	// под ограниченными правами управляемая форма сама удаляет кнопку
	Если НЕ ЕстьКнопкаПровестиИЗакрыть = Неопределено Тогда
		Элементы.ФормаПровестиИЗакрыть.Доступность = Не ЗаблокироватьЭлементы;
	КонецЕсли;
	
	Элементы.ФормаЗаписать.Доступность 		   = Не ЗаблокироватьЭлементы;
	
	Элементы.НеВключатьВПлатежныйКалендарь.Доступность = Не ЗаблокироватьЭлементы;
	Элементы.ЭтоКазначейство.Доступность	   		   = Не ЗаблокироватьЭлементы;
	Элементы.СверхБюджета.Доступность		   		   = Не ЗаблокироватьЭлементы;
	//Элементы.Распределение.ТолькоПросмотр	 		   = ЗаблокироватьЭлементы;
	
	Если Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДивидендов Тогда
		Элементы.КонтрагентЮрФизЛицо.Видимость = Истина;
		Элементы.КонтрагентЮрФизЛицо1.Видимость = Истина;
		ВидимостьРеквизитовОперацияПеречислениеДивидендов();
	Иначе	
		Элементы.КонтрагентЮрФизЛицо.Видимость = Ложь;
		Элементы.КонтрагентЮрФизЛицо1.Видимость = Ложь;
	КонецЕсли; 	
	
	ТекущаяСтраница	= Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если МногострочныйДокумент Тогда
		Если ТекущаяСтраница = Элементы.ГруппаЗаявка Тогда
			ТекущаяСтраница = Элементы.ГруппаСписок;
		КонецЕсли; 		
		Элементы.ГруппаЗаявка.Видимость = Ложь;
		Элементы.ГруппаСписок.Видимость = Истина;
	Иначе
		Если ТекущаяСтраница = Элементы.ГруппаСписок Тогда
			ТекущаяСтраница = Элементы.ГруппаЗаявка;
		КонецЕсли;
		Элементы.ГруппаЗаявка.Видимость = Истина;
		Элементы.ГруппаСписок.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> ТекущаяСтраница Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница; 
	КонецЕсли; 
			
	НастроитьВидимостьАналитикБюджетирования();
	
	// Настройки доступности валюты
	Элементы.ВалютаДокумента.ТолькоПросмотр = ПараметрыЭлементовФормы.ДоступнаТолькоВалютаРеглУчета ИЛИ ЗаблокироватьЭлементы;
	
	ОперацииБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС();
	Если ОперацииБезНДС.Найти(Объект.ВидОперации) = Неопределено Тогда	
		Элементы.ГруппаНДС.Видимость 			  = Истина;
		Элементы.РаспределениеСтавкаНДС.Видимость = Истина;
		Элементы.РаспределениеНДС.Видимость 	  = Истина;
	Иначе
		Элементы.ГруппаНДС.Видимость 			  = Ложь;
		Элементы.РаспределениеСтавкаНДС.Видимость = Ложь;
		Элементы.РаспределениеНДС.Видимость 	  = Ложь;
	КонецЕсли; 
	
	УправлениеЭлементамиВалютныеОперации(ЭтотОбъект);
	УстановитьВидимостьСтраниц(ЗаблокироватьЭлементы);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-12 (#4242)
	//// Установим настройки доступности элементов формы.
	//УстановитьНастройкиДоступностиЭлементов();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-12 (#4242)

	Если Статус = Справочники.бит_СтатусыОбъектов.Заявка_Закрыта Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.КнопкаСписок.Пометка = МногострочныйДокумент;
	
	// Кнопки ввода на основании.
	ЕстьПравоНаПлатежноеПоручение = ПравоДоступа("Редактирование", Метаданные.Документы.ПлатежноеПоручение);
	ЕстьПравоНаСписание 		  = ПравоДоступа("Редактирование", Метаданные.Документы.СписаниеСРасчетногоСчета);
	ЕстьПравоНаРКО 				  = ПравоДоступа("Редактирование", Метаданные.Документы.РасходныйКассовыйОрдер);
	
	Если Объект.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные Тогда
		Элементы.ФормаПлатежноеПоручение.Видимость = Ложь;
	Иначе
		Элементы.ФормаПлатежноеПоручение.Видимость = ЕстьПравоНаПлатежноеПоручение;
	КонецЕсли; 
	
	Если Объект.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Наличные 
		И ЕстьПравоНаРКО Тогда
		Элементы.ФормаПлатежныйДокумент.Видимость = Истина;
		Элементы.ФормаПлатежныйДокумент.Заголовок = НСтр("ru = 'Выдача наличных'"); 
	ИначеЕсли Объект.ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные 
		И ЕстьПравоНаСписание Тогда	
		Элементы.ФормаПлатежныйДокумент.Видимость = Истина;
		Элементы.ФормаПлатежныйДокумент.Заголовок = НСтр("ru = 'Списание с расчетного счета'");
	Иначе	
		Элементы.ФормаПлатежныйДокумент.Видимость = Ложь;
	КонецЕсли; 
	
	Элементы.ЗаполнитьНазначение.Видимость = 
		бит_Казначейство.ЗаполнятьНазначениеПлатежаВЗаявкеНаРасходованиеДС(Объект.Организация, Объект.Дата);
		
	// +СБ. Широков Николай. 2014-11-26. Доработка #1176
	Элементы.СтатьяОборотов.ТолькоПросмотр	 							= НЕ ДоступноИзменениеЭлемента["СтатьяОборотов"];												
	Элементы.Распределение.ПодчиненныеЭлементы.РаспределениеСтатьяОборотов.ТолькоПросмотр 	= НЕ ДоступноИзменениеЭлемента["СтатьяОборотов"];													
	// -СБ. Широков Николай
	
	// БИТ НАГолубева 01.03.2016 ++
	Элементы.РаспределениеКонтекстноеМенюЗаполнитьКолонку.Доступность = Не Объект.Проведен;
	// БИТ НАГолубева 01.03.2016 --
	
	//+ Сенин 09.09.2016 №2652
	Элементы.бит_БК_ГруппаСчет.ТолькоПросмотр 							= ЗаблокироватьЭлементы;
	//- Сенин 09.09.2016 №2652

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-09-29 (#3488)
	Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Форма", 	ЭтаФорма);
		СтруктураПараметров.Вставить("Объект", "Документ.бит_ЗаявкаНаРасходованиеСредств");
		бит_РаботаСДиалогамиКлиентСервер.ВыполнитьБлокировкуПолейНаФормеОбъекта(СтруктураПараметров, СписокДоступныхПолей);
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-09-29 (#3488)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-12 (#4242)
	// Установим настройки доступности элементов формы.
	УстановитьНастройкиДоступностиЭлементов();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-12 (#4242)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеЭлементамиВалютныеОперации(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ОплатаВВалюте = Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-04 (#3816)
	//Элементы.АвтоматическиАктуализироватьКурсы.Видимость 		= ОплатаВВалюте;
	//Элементы.АвтоматическиАктуализироватьКурсыСписок.Видимость 	= ОплатаВВалюте;
	//Элементы.ФормаАктуализироватьПоКурсам.Видимость 			= ОплатаВВалюте;
	//
	//Элементы.КурсДокумента.Видимость	    = ОплатаВВалюте;
	//Элементы.КурсДокумента_Список.Видимость = ОплатаВВалюте;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-04 (#3816)

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраниц(ЗаблокироватьЭлементы)

	ВидимаяСтраница = Неопределено;
	СтраницыФормы = Новый Массив(); 
	СтраницыФормы.Добавить(Элементы.ГруппаПеречислениеЗарплаты);
	СтраницыФормы.Добавить(Элементы.ГруппаВыплатаДепонентов);
	
	Если НЕ УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
		Если Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП Тогда
			Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость = Истина;
			Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Ложь;
			ВидимаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		ИначеЕсли Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаЗаработнойПлатыРаботнику Тогда	
			Элементы.ГруппаВыплатаЗарплатыПоВедомостям.Видимость = Ложь;
			Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.Видимость = Истина;
			ВидимаяСтраница = Элементы.ГруппаПеречислениеЗарплаты;
		ИначеЕсли Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов Тогда	
			ВидимаяСтраница = Элементы.ГруппаВыплатаДепонентов;
		КонецЕсли;
	КонецЕсли; 
	
	Для каждого ТекСтраница Из СтраницыФормы Цикл
		Если ТекСтраница <> ВидимаяСтраница Тогда
			Если ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ ТекСтраница.Видимость Тогда
				ТекСтраница.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаВыплатаЗарплатыПоОдномуРаботнику.ТолькоПросмотр = ЗаблокироватьЭлементы;
	Элементы.ГруппаВыплатаЗарплатыПоВедомостям.ТолькоПросмотр 	   = ЗаблокироватьЭлементы;
	Элементы.ГруппаВыплатаДепонентов.ТолькоПросмотр 			   = ЗаблокироватьЭлементы;
	
КонецПроцедуры

// Процедура актуализирует курсы на текущую дату. 
//
&НаСервере
Процедура АктуализироватьПоКурсамСервер()

	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.АктуализироватьПоКурсам();
	ЗначениеВДанныеФормы(ДокОбъект, Объект); 
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры // АктуализироватьПоКурсамСервер()
 
&НаКлиентеНаСервереБезКонтекста  
Процедура ЗаполнитьКонтролируемыеРеквизиты(Форма)
	
	НаборРеквизитов = Новый Структура;
	НаборРеквизитов.Вставить("ТипЗаявки");
	НаборРеквизитов.Вставить("ДатаПлатежаКрайняя");
	НаборРеквизитов.Вставить("ДатаРасхода");
	НаборРеквизитов.Вставить("ВалютаДокумента");
	НаборРеквизитов.Вставить("КратностьДокумента");
	НаборРеквизитов.Вставить("КурсДокумента");
	НаборРеквизитов.Вставить("ДокументОснование");
	НаборРеквизитов.Вставить("ВидОперации");
	НаборРеквизитов.Вставить("ФормаОплаты");
	
	ЗаполнитьЗначенияСвойств(НаборРеквизитов, Форма.Объект);
	
	Форма.КонтролируемыеРеквизиты = Новый ФиксированнаяСтруктура(НаборРеквизитов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбновитьКонтролируемыеРеквизиты(ИмяРеквизита, Форма)
	
	НаборРеквизитов = Новый Структура;
	Для каждого КлючЗначение Из Форма.КонтролируемыеРеквизиты Цикл
		НаборРеквизитов.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла; 
	НаборРеквизитов.Вставить(КлючЗначение.Ключ, Форма.Объект[ИмяРеквизита]);
	
	Форма.КонтролируемыеРеквизиты = Новый ФиксированнаяСтруктура(НаборРеквизитов);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоставляемыхРеквизитов(Значение)

	Если МногострочныйДокумент Тогда
		ПараметрыУстановки = ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "Распределение");	
			ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
			ЗаполнитьДопАналитикуПоДаннымДокумента(ТекущиеДанные.ПолучитьИдентификатор(), Значение, ПараметрыУстановки);
	Иначе	
		ЗаполнитьДопАналитикуПоДаннымДокумента(-1, Значение, 
			ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));
	КонецЕсли; 	
	
КонецПроцедуры
 
&НаСервере 
Процедура ЗаполнитьДопАналитикуПоДаннымДокумента(ИндексСтроки, Значение, ПараметрыУстановки)

	Если ИндексСтроки = -1 Тогда
		Данные = Объект;
	Иначе
		Данные = Объект.Распределение.НайтиПоИдентификатору(ИндексСтроки);
	КонецЕсли; 
		
	Документы.бит_ЗаявкаНаРасходованиеСредств.ЗаполнитьДопАналитикуПоДаннымДокумента(Данные, Значение, ПараметрыУстановки);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатей(Элемент)

	НовыеПараметры = Новый Массив;
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ТипСтатьи", 
		ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС")));
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю") Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.РасходДоход", 
			ПредопределенноеЗначение("Перечисление.бит_РасходДоход.Расходование")));
	КонецЕсли;	
	
	Если ТипЗнч(мКэшЗначений.СписокСтатейПринадлежность) = Тип("СписокЗначений") Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка" , мКэшЗначений.СписокСтатейПринадлежность));
	КонецЕсли; 
	
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Учет_Сумма"	, Истина));
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3065)
	МассивПараметровБДР = Новый Массив;
	
	НовыйПараметрБДР = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов.БДР);
	МассивПараметровБДР.Добавить(НовыйПараметрБДР);
	
	Элементы.Ок_СтатьяОборотовБДР.ПараметрыВыбора			   = Новый ФиксированныйМассив(МассивПараметровБДР);
	Элементы.РаспределениеОк_СтатьяОборотовБДР.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровБДР);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3065)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьПараметрыВыбораВидаОперации(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НовыеПараметры = Новый Массив; 
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ФормаОплаты", Объект.ФормаОплаты));
	Элементы.ВидОперации.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ОплатаВВалюте = Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = Форма.СписокВидовДоговоров.ВыгрузитьЗначения();
	// +СБ. Широков Николай. 2014-10-24. Доработка #1061 
	//НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	Форма.СписокВидовДоговоров.Очистить();
	// -СБ. Широков Николай
		
	Если ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", ОплатаВВалюте));
	КонецЕсли;

	Если НЕ ОплатаВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", ОплатаВВалюте));
	КонецЕсли; 
	
	Если НЕ Форма.МожетБытьВВалюте Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-08 (#4242)
	РаботаСДокументомЗнРДСВОграниченномРежиме = ОК_ОбщегоНазначения.ПолучитьЗначениеПараметраСеанса("ок_РаботаСДокументомЗнРДСВОграниченномРежиме");
	
	Если РаботаСДокументомЗнРДСВОграниченномРежиме = 0 Тогда
	
		ПользовательскоеУсловие_РаботаСДокументомЗнРДСВОграниченномРежиме = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("РаботаСДокументомЗнРДСВОграниченномРежиме"); 
	
		ПараметрыУсловия = Новый Структура;
		ПараметрыУсловия.Вставить("ТекущийОбъект", Объект.Ссылка);
		РаботаСДокументомЗнРДСВОграниченномРежиме = бит_уп_Сервер.ПроверитьПользовательскоеУсловие(ПользовательскоеУсловие_РаботаСДокументомЗнРДСВОграниченномРежиме,ПараметрыУсловия);
		
		Если РаботаСДокументомЗнРДСВОграниченномРежиме Тогда
			РаботаСДокументомЗнРДСВОграниченномРежиме = 1;
		Иначе
			РаботаСДокументомЗнРДСВОграниченномРежиме = 2;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если РаботаСДокументомЗнРДСВОграниченномРежиме = 1 
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ПараметрВыбора_ВалютаВзаиморасчетов = Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
		Если НовыеПараметры.Найти(ПараметрВыбора_ВалютаВзаиморасчетов) = Неопределено Тогда
			НовыеПараметры.Добавить(ПараметрВыбора_ВалютаВзаиморасчетов);
		КонецЕсли; 
	
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-08 (#4242)
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора 			 = Новый ФиксированныйМассив(НовыеПараметры);
	Элементы.РаспределениеДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровВыбораДоговора()

	Договоры = Новый Массив; 
	
	Если МногострочныйДокумент Тогда
		Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
				Договоры.Добавить(СтрокаТаблицы.ДоговорКонтрагента);
			КонецЕсли;
		КонецЦикла; 
		Если Договоры.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(Договоры);
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Договоры.Добавить(Объект.ДоговорКонтрагента);
		КонецЕсли; 
	КонецЕсли;

	Если Договоры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДоговорИзменен     = Ложь;
	СписокРеквизитов   = "ВидДоговора, ВалютаВзаиморасчетов, Валютный, ОплатаВВалюте, РасчетыВУсловныхЕдиницах";
	РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Договоры, СписокРеквизитов);
	
	Если МногострочныйДокумент Тогда
		Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
			ПрименитьПараметрыВыбораДоговора(СтрокаТаблицы.ДоговорКонтрагента, РеквизитыДоговоров, ДоговорИзменен);
		КонецЦикла; 
	Иначе
		ПрименитьПараметрыВыбораДоговора(Объект.ДоговорКонтрагента, РеквизитыДоговоров, ДоговорИзменен);
	КонецЕсли; 

	Если ДоговорИзменен Тогда
		ПричиныИзмененияНазначенияПлатежа.Добавить("ДоговорКонтрагента");
		СформироватьНазначениеПлатежаСервер(Ложь, "ДоговорКонтрагента"); 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыВыбораДоговора(ДоговорКонтрагента, РеквизитыДоговоров, ДоговорИзменен)
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;		
	КонецЕсли; 
	
	НачальноеЗначение = ДоговорКонтрагента;
	ОплатаВВалюте 	  = Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета;
	РеквизитыДоговора = РеквизитыДоговоров.Получить(ДоговорКонтрагента);
	Если СписокВидовДоговоров.НайтиПоЗначению(РеквизитыДоговора.ВидДоговора) = Неопределено Тогда
		ДоговорКонтрагента = Неопределено;
	Иначе	
		Если МожетБытьВВалюте Тогда
			Если РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				Если ОплатаВВалюте И РеквизитыДоговора.ВалютаВзаиморасчетов <> Объект.ВалютаДокумента Тогда
					ДоговорКонтрагента = Неопределено;
					ДоговорИзменен 	   = Истина;
				КонецЕсли; 
			Иначе	
				Если РеквизитыДоговора.ВалютаВзаиморасчетов <> Объект.ВалютаДокумента Тогда
					ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			Если РеквизитыДоговора.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
				ДоговорКонтрагента = Неопределено;
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли;
	
	Если НачальноеЗначение <> ДоговорКонтрагента Тогда
		ДоговорИзменен = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровВыбораСтатьиОборотов()

	Статьи = Новый Массив; 
	
	Если МногострочныйДокумент Тогда
		Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяОборотов) Тогда
				Статьи.Добавить(СтрокаТаблицы.СтатьяОборотов);
			КонецЕсли;
		КонецЦикла; 
		Если Статьи.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(Статьи);
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Статьи.Добавить(Объект.СтатьяОборотов);
		КонецЕсли; 
	КонецЕсли;

	Если Статьи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отборы   = Новый Структура;
	СписокРеквизитов = Новый Массив; 
	Для каждого Элемент Из Элементы.СтатьяОборотов.ПараметрыВыбора Цикл
		ИмяЭлемента = СтрЗаменить(Элемент.Имя, "Отбор.", "");
		СписокРеквизитов.Добавить(ИмяЭлемента);
		Отборы.Вставить(ИмяЭлемента, Элемент.Значение);
	КонецЦикла;
	
	РеквизитыСтатей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Статьи, СтрСоединить(СписокРеквизитов, ","));
	ЕстьИзменения 	= Ложь;
	
	Если МногострочныйДокумент Тогда
		ПараметрыСвойствАналитик = ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "Распределение");
		Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
			ПрименитьПараметрыВыбораСтатьиОборотов(СтрокаТаблицы, РеквизитыСтатей, Отборы, ЕстьИзменения);
			Если ЕстьИзменения Тогда
				ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		ПрименитьПараметрыВыбораСтатьиОборотов(Объект, РеквизитыСтатей, Отборы, ЕстьИзменения);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПрименитьПараметрыВыбораСтатьиОборотов(Данные, РеквизитыСтатей, КритерииОтбора, ЕстьИзменения)

	ЕстьИзменения = Ложь;
	РеквизитыСтатьи = РеквизитыСтатей[Данные.СтатьяОборотов];
	
	Для каждого КлючЗначение Из КритерииОтбора Цикл
		Если ЕстьИзменения Тогда
			Прервать;
		КонецЕсли; 
		
		ИмяРеквизита   = КлючЗначение.Ключ;
		ЗначениеОтбора = КлючЗначение.Значение;
		Если ТипЗнч(ЗначениеОтбора) = Тип("ФиксированныйМассив") Тогда
			ЕстьИзменения = ЗначениеОтбора.Найти(РеквизитыСтатьи[ИмяРеквизита]) = Неопределено;
		Иначе	
			ЕстьИзменения = РеквизитыСтатьи[ИмяРеквизита] <> ЗначениеОтбора;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			Данные.СтатьяОборотов = Неопределено;
			Разрезы = АналитическиеРазрезы();
			Для каждого Разрез Из Разрезы Цикл
				Данные[Разрез] = Неопределено;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьПараметрыВыбораВалюты(Форма)
	
	Элементы	   = Форма.Элементы;
	НовыеПараметры = Новый Массив; 
	
	Если НЕ Форма.МожетБытьВВалюте Тогда
		Валюты = Новый Массив;
		Валюты.Добавить(Форма.ВалютаРегламентированногоУчета);
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(Валюты)));
	КонецЕсли; 
	
	Элементы.ВалютаДокумента.ПараметрыВыбора 		= Новый ФиксированныйМассив(НовыеПараметры);
	Элементы.ВалютаДокумента_Список.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры
 
// Процедура расчитывает суммму НДС.
//
// Параметры:
//  Контейнер - Объект, СтрокаТабличнойЧасти.
//
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
//&НаКлиентеНаСервереБезКонтекста 
&НаКлиенте
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
//+сундукова 15.04.16
//Процедура РассчитатьСуммуНДС(Контейнер)
Процедура РассчитатьСуммуНДС(Контейнер,ИзменятьСумму = ложь)
//-сундукова 15.04.16

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС);
	
	//+сундукова 15.04.16
	//Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
	//																  	,Истина
	//																	,Истина
	//																	,СтавкаНДСЧисло);
	Если ИзменятьСумму тогда
		Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.СуммаБезНДС
																	  	,Истина
																		,Ложь
																		,СтавкаНДСЧисло);
		Контейнер.Сумма = Контейнер.СуммаБезНДС + Контейнер.НДС;
	Иначе
		Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
																		  	,Истина
																			,Истина
																			,СтавкаНДСЧисло);
																							
	 	Контейнер.СуммаБезНДС = Контейнер.Сумма - Контейнер.НДС;
	КонецЕсли;	
	//-сундукова 15.04.16
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-03 (#3065)	
	////+Сундукова 30.03.16	
	//Если не типзнч(Контейнер) = тип("ДанныеФормыСтруктура") тогда
	//	//+сундукова 15.04.16
	//	Если ИзменятьСумму и не Контейнер.СуммаБезНДС = 0 тогда
	//		Контейнер.Сумма = Контейнер.СуммаБезНДС + Контейнер.НДС;
	//	иначе
	//		//-сундукова 15.04.16
	//		Контейнер.СуммаБезНДС = Контейнер.Сумма - Контейнер.НДС;
	//	КонецЕсли;
	//	//+сундукова 20.04.16 №2319
	//Иначе 
	//	Если ИзменятьСумму и не ЭтаФорма.СуммаБезНДС = 0 тогда
	//		Контейнер.Сумма = ЭтаФорма.СуммаБезНДС + Контейнер.НДС;	
	//	КонецЕсли;
	//	//+сундукова 20.04.16 №2319
	//КонецЕсли;
	////-Сундукова 30.03.16	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-03 (#3065)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	ПриИзмененииОснованийДляНазначениеПлатежа("НДС");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
КонецПроцедуры // РассчитатьСуммуНДС()

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
#Если НаСервере Тогда
 
&НаСервере 
Процедура РассчитатьСуммуНДС(Контейнер,ИзменятьСумму = ложь)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДСЧисло = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС);
	
	Если ИзменятьСумму тогда
		Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.СуммаБезНДС
																	  	,Истина
																		,Ложь
																		,СтавкаНДСЧисло);
		Контейнер.Сумма = Контейнер.СуммаБезНДС + Контейнер.НДС;
	Иначе
		Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
																		  	,Истина
																			,Истина
																			,СтавкаНДСЧисло);
																							
	 	Контейнер.СуммаБезНДС = Контейнер.Сумма - Контейнер.НДС;
	КонецЕсли;	
	
КонецПроцедуры // РассчитатьСуммуНДС()

#КонецЕсли
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)


// Процедура расчитывает суммму без НДС.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура РассчитатьСуммуБезНДС()

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-04 (#3065)
	//ЭтаФорма.СуммаБезНДС = Объект.Сумма - Объект.НДС;
	//Заменено на:
	Объект.СуммаБезНДС = Объект.Сумма - Объект.НДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-04 (#3065)
	
КонецПроцедуры // РассчитатьСуммуБезНДС()

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьФлагФормироватьНПУпрАвтоматически(Форма)

	Объект = Форма.Объект;
	Если ПустаяСтрока(Объект.НазначениеПлатежаУпр) 
		Или Объект.НазначениеПлатежа = Объект.НазначениеПлатежаУпр Тогда
		Форма.ФормироватьНПУпрАвтоматически = Истина;
	Иначе
		Форма.ФормироватьНПУпрАвтоматически = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВалюты()
	
	УстановитьПараметрыВыбораДоговораКонтрагента(ЭтотОбъект);
	ПриИзмененииПараметровВыбораДоговора();
	
	УстановитьКурсКратностьДокумента();
	УправлениеЭлементамиВалютныеОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПриИзмененииКонтрагента()

	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-07 (#4147)
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ВыполнитьПроверкуБлокировкиКонтрагента();
	КонецЕсли;
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-07 (#4147)
	
	ПричиныИзмененияНазначенияПлатежа.Добавить("Контрагент"); 

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
	ЗаполнитьКодНазначенияПлатежа();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)
	
	Если Элементы.ДоговорКонтрагента.Видимость Тогда
		Если МногострочныйДокумент Тогда
			Если Объект.Распределение.Количество() = 1 Тогда
				СтрокаТаблицы = Объект.Распределение[0];
				ИзменениеКонтрагентаСервер(СтрокаТаблицы.ДоговорКонтрагента, Объект.Контрагент, 
					//1С-ИжТиСи, Кондратьев, 09.2020, Обновление (К задаче 1061)(
					//Объект.Организация, СписокВидовДоговоров, Элементы.ДоговорКонтрагента.ПараметрыВыбора);
					Объект.Организация, Неопределено, Элементы.ДоговорКонтрагента.ПараметрыВыбора);
					//1С-ИжТиСи, Кондратьев, 09.2020, Обновление )						
				Объект.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;	
				ПриИзмененииДоговора(СтрокаТаблицы.ПолучитьИдентификатор(), Истина);
			КонецЕсли; 
		Иначе	
			ИзменениеКонтрагентаСервер(Объект.ДоговорКонтрагента, Объект.Контрагент, 
				//1С-ИжТиСи, Кондратьев, 09.2020, Обновление (К задаче 1061)(
				//Объект.Организация, СписокВидовДоговоров, Элементы.ДоговорКонтрагента.ПараметрыВыбора);
				Объект.Организация, Неопределено, Элементы.ДоговорКонтрагента.ПараметрыВыбора);
				//1С-ИжТиСи, Кондратьев, 09.2020, Обновление )	
			СтрокаТаблицы = Объект.Распределение[0];
			СтрокаТаблицы.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
			ПриИзмененииДоговора(, Истина);
		КонецЕсли; 
	КонецЕсли; 
	
	ПриИзмененииПоставляемыхРеквизитов(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте 
Процедура ПриИзмененииДоговора(ИдентификаторСтроки = -1, ИзменитьВалюту = Ложь)
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-07 (#4147)
	ВыполнитьПроверкуБлокировкиДоговора(ИдентификаторСтроки);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-07 (#4147)
	
	ПриИзмененииДоговораНаСервере(ИдентификаторСтроки, ИзменитьВалюту);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	ПриИзмененииОснованийДляНазначениеПлатежа("ДоговорКонтрагента");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
	Если ИдентификаторСтроки = -1 Тогда
		Данные = Объект;
	Иначе	
		Данные = Объект.Распределение.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли; 
	
	РассчитатьСуммуНДС(Данные);
	РассчитатьСуммуБезНДС();
	
	ПриИзмененииПоставляемыхРеквизитов(Данные.ДоговорКонтрагента);
	УправлениеЭлементамиВалютныеОперации(ЭтотОбъект);
		
	УстановитьПараметрыВыбораДоговораКонтрагента(ЭтотОбъект);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3065)
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
	//Объект.Ок_ПересчетКурса = ПолучитьПризнакПересчетаКурса(Объект.ДоговорКонтрагента);
	Объект.Ок_ПересчетКурса = ПолучитьПризнакПересчетаКурсаПоДоговорамРаспределения(Объект.Распределение, Объект.ДоговорКонтрагента);
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3065)	

КонецПроцедуры

&НаКлиенте 
Процедура НажатиеКнопкиСписок(Отказ = Ложь)
	
	Если МногострочныйДокумент Тогда
		Если Объект.Распределение.Количество() > 1 Тогда
			
			ПроверитьСписокПередОчисткой(Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Индекс = Объект.Распределение.Количество() - 1;
			// Оставляем 1-ю строку.
			Пока Индекс >= 1 Цикл
				Объект.Распределение.Удалить(Индекс);
				Индекс = Индекс - 1;		
			КонецЦикла; 
		КонецЕсли; 
		СинхронизироватьРеквизитыШапкиИСтроки("Шапка");
		РассчитатьСуммуБезНДС();
	Иначе
		СинхронизироватьРеквизитыШапкиИСтроки("Строка");
	КонецЕсли;		
	
	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, Объект.Распределение[0]);
	
	МногострочныйДокумент = Не МногострочныйДокумент;
	
	ОтобразитьСкрытьКнопкуПечатиСписка();
	НастроитьВидимостьАналитикБюджетирования();
	
	СформироватьНазначениеПлатежаСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСписокПередОчисткой(Отказ)
	
	Шаблон = НСтр("ru='Строка № %1 связана с платежной позицией.'"); 
	Для каждого СтрокаТаблицы Из Объект.Распределение Цикл
		Если СтрокаТаблицы.ВведенаПлатежнаяПозиция Тогда
			ТекстСообщения = СтрШаблон(Шаблон, СтрокаТаблицы.НомерСтроки);
			Поле = СтрШаблон("Распределение[%1].НомерСтроки", Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧГ="));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, "Объект", Отказ); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Переход в однострочный режим невозможен.'"); 
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ВидыДоговоровПоОперации(Форма)
	
	Объект = Форма.Объект;
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные") Тогда
		ИмяДокумента = "СписаниеСРасчетногоСчета";
	Иначе	
		ИмяДокумента = "РасходныйКассовыйОрдер";
	КонецЕсли; 
	ВидыДоговоров = бит_КазначействоКлиентСервер.ВидДоговораСКонтрагентомПоОперации(Объект.ВидОперации, ИмяДокумента);

	Форма.СписокВидовДоговоров.ЗагрузитьЗначения(ВидыДоговоров);
	
КонецПроцедуры

// Процедура проверяет принадлежность ЦФО к Статье оборотов.
//
// Параметры:
//  Контейнер 		  - ДанныеФормыСтруктура.
//  ВыводитьСообщения - Булево.
//  ИндексСтроки	  - Число, по умолчанию Неопределено.
//
&НаКлиенте 
Процедура ПроверитьПринадлежностьЦФОКСтатьеОборотов(Контейнер, ВыводитьСообщения = Ложь, ИндексСтроки = Неопределено)
	 	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокСтатейПринадлежность", мКэшЗначений.СписокСтатейПринадлежность);
	СтруктураПараметров.Вставить("ЦФО"						 , Контейнер.ЦФО);
	СтруктураПараметров.Вставить("СтатьяОборотов"			 , Контейнер.СтатьяОборотов);
	СтруктураПараметров.Вставить("ВыводитьСообщения"		 , ВыводитьСообщения);	
	
	ИзменениеЦФО(СтруктураПараметров, ИндексСтроки);
	
	мКэшЗначений.СписокСтатейПринадлежность = СтруктураПараметров.СписокСтатейПринадлежность;	
	
	Если Не бит_КазначействоКлиентСервер.СтатьяОборотовПринадлежитЦФО(СтруктураПараметров) Тогда
		Контейнер.СтатьяОборотов = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПроверитьПринадлежностьЦФОКСтатьеОборотов() 

// Процедура выполняет действия на сервере, необходимые при изменении СтатьиОборотов.
//
// Параметры:
//  Контейнер - ДанныеФормыСтруктура, СтрокаТабличнойЧасти.
//
&НаКлиенте 
Процедура ИзменениеСтатьиОборотов(Контейнер, ИзменитьСтавкуНДС = Истина)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
	ЗаполнитьКодНазначенияПлатежа();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)
	
	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// +СБ. Широков Николай. 2016-09-16. 2565 Не пересчитывать НДС при измении статья оборотов
	//Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) И НЕ ОбъектСкопирован Тогда
	//	
	//	Если ИзменитьСтавкуНДС Тогда
	//		УстановитьСтавкуНДС(Контейнер.СтавкаНДС, Контейнер.СтатьяОборотов);
	//	КонецЕсли; 
	//	РассчитатьСуммуНДС(Контейнер);
	//	
	//КонецЕсли;
	// -СБ. Широков Николай
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратКредита") Тогда
		
		ЗаполнитьВидПлатежаПоСтатьеОборотов();
		
	КонецЕсли;
	
	Если ТипЗнч(Контейнер) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ИД = Контейнер.ПолучитьИдентификатор();
	Иначе	
		ИД = Неопределено;
	КонецЕсли; 
    ИзменениеСтатьиОборотовСервер(ИД);
	
	НастроитьВидимостьАналитикБюджетирования();
	
КонецПроцедуры // ИзменениеСтатьиОборотов()

// Процедура обрабатывает изменение статьи на сервере 
//
&НаСервере
Процедура ИзменениеСтатьиОборотовСервер(ИД)

	Если ТипЗнч(ИД) = Тип("Число") Тогда
		Контейнер = Объект.Распределение.НайтиПоИдентификатору(ИД);
	Иначе	
		Контейнер = Объект;
	КонецЕсли; 

	Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
		
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(Контейнер.СтатьяОборотов);
		бит_Бюджетирование.УстановитьИспользованиеАналитики(Контейнер, НастройкиСтатьи, мКэшЗначений.ИзмеренияДоп);
		
		Если НастройкиСтатьи.Свойство("Измерения")
			И НастройкиСтатьи.Измерения.Свойство("НоменклатурнаяГруппа") Тогда
			
			Если НЕ НастройкиСтатьи.Измерения.НоменклатурнаяГруппа.Учет Тогда
				Контейнер.НоменклатурнаяГруппа = Неопределено;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ИД = Неопределено Тогда
		бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикШапкиПриИзмененииСтатьиОборотов(
				ЭтотОбъект, Контейнер, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));
	Иначе	
		бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикСтрокиПриИзмененииСтатьиОборотов(
				ЭтотОбъект, Контейнер, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "Распределение"));
		ЗаполнитьДобавленныеКолонкиСтроки(Контейнер);
	КонецЕсли; 

КонецПроцедуры // ИзменениеСтатьиОборотов()

// Процедура заполняет вид платежа в строке ТЧ "ГрафикПлатежей".
//
// Параметры:
//
&НаСервере
Процедура ЗаполнитьВидПлатежаПоСтатьеОборотов()

	// Изменение кода. Начало. 29.09.2015{{
	Если бит_РаботаСМетаданными.ЕстьПредопределенныйЭлемент("Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотов_ВидыПлатежей") Тогда

		Объект.ВидПлатежаПоКредитамЗаймам = РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотов_ВидыПлатежей
																						,Объект.СтатьяОборотов);
																																														
	КонецЕсли;
	// Изменение кода. Конец. 29.09.2015}}

КонецПроцедуры // ЗаполнитьВидПлатежаПоСтатьеОборотов()

&НаСервере
Функция СтатьиОборотовДокумента()
	
	МассивСтатей = Объект.Распределение.Выгрузить().ВыгрузитьКолонку("СтатьяОборотов");
	
	Возврат МассивСтатей;
	
КонецФункции

// Процедура настраивает видимость элементов формы в соответствии с используемыми разрезами бюджетирования.
//	в статье оборотов.
//
// Параметры:
//	СтатьяОборотовИсточник 	   - СправочникСсылка.бит_СтатьиОборотов 
//					(статья оборотов, в соответствии с которой будет настраиваться видимость элементов формы)
//	ТекущаяФорма 			   - Управляемая форма (форма для которой настраивается видимость элементов формы)
//  Измерения          		   - Структура (измерения регистра бит_ОборотыПоБюджетам)
//  НастройкиИзмерений 		   - Соответствие (настройки используемых дополнительных измерений)
//  СоответствиеИмен   		   - Сответствие 
//					(соответствие имен измерений регистра и имен элементов управления на форме)
//									Ключ 	 - Строка 	 (имя измерения в регистре)
//									Значение - Структура (ИмяПоляВвода)
//  МассивИсключаемыхИзмерений - Массив (имена измерений для которых настройку видимости устанавливать не надо).
//
&НаСервере
Процедура НастроитьВидимостьАналитикБюджетирования()
	
	НастройкиИзмерений = Неопределено;
	
	Если МногострочныйДокумент Тогда
		МассивСтатей = СтатьиОборотовДокумента();
		Префикс = "Распределение";
	Иначе
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(Объект.СтатьяОборотов);
		Префикс = "";
	КонецЕсли;
	
	Исключения = Новый Массив;
	Исключения.Добавить("Организация");
	Исключения.Добавить("Сценарий");
	Исключения.Добавить("ЦФО");
	Исключения.Добавить("СтатьяОборотов");
	Исключения.Добавить("Проект");
	Исключения.Добавить("Контрагент");
	Исключения.Добавить("ДоговорКонтрагента");
	Исключения.Добавить("ФизическоеЛицо");
	
	ОперацииБезНДС = Документы.бит_ЗаявкаНаРасходованиеСредств.ОперацииБезНДС();
	Если ОперацииБезНДС.Найти(Объект.ВидОперации) <> Неопределено Тогда	
		Исключения.Добавить("НДС");
	КонецЕсли; 

	НастройкаВидимости = бит_Бюджетирование.ПолучитьНастройкуВидимостиКолонок(МассивСтатей, НастройкиИзмерений);
	
	Для Каждого ТекИзмерение Из Исключения Цикл
		Если НастройкаВидимости.Свойство(ТекИзмерение) Тогда
			НастройкаВидимости.Удалить(ТекИзмерение);
		КонецЕсли;
	КонецЦикла;
	
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы, НастройкаВидимости, Префикс);
	
	Документы.бит_ЗаявкаНаРасходованиеСредств.ВидимостьНазначенныхАналитик(ЭтотОбъект);
	
	Документы.бит_ЗаявкаНаРасходованиеСредств.ВидимостьНазначенныхАналитикТаблицы(ЭтотОбъект, 
		ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "Распределение")); 
	
КонецПроцедуры

// Процедура управляет видимостью кнопки ОплатитьЗаСчет
//
// Параметры:
//	нет
//
&НаКлиенте
Процедура УстановитьВидимостьКнопкиОплатитьЗаСчет()
	
	Элементы.ОплатаЗаСчет.Видимость = Ложь;
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаСтрокПревышения) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокПревышения = ПолучитьИзВременногоХранилища(АдресХранилищаСтрокПревышения);
	Если ТипЗнч(МассивСтрокПревышения) = Тип("Массив")
		И НЕ МассивСтрокПревышения.Количество() = 0
		И НЕ Объект.СверхБюджета Тогда 
		
		Элементы.ОплатаЗаСчет.Видимость = Истина;
	Иначе
		Элементы.ОплатаЗаСчет.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком ожидания, отслеживает окончание транзакции записи/проведения документа.
//
// Параметры:
//	нет
//
&НаКлиенте
Процедура ОжиданиеПроведенияДокумента()
	
	ОтключитьОбработчикОжидания("ОжиданиеПроведенияДокумента");
	
	УстановитьВидимостьКнопкиОплатитьЗаСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииОкончание()
	
	// Рассчитаем сумму без НДС для отображения на форме.
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-11-18 (#3542)
	//// Рассчитаем сумму без НДС для отображения на форме.
	//РассчитатьСуммуБезНДС();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-11-18 (#3542)
	
	// Установим отбор для статей оборотов.
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	УстановитьПараметрыВыбораСтатей(Элементы.РаспределениеСтатьяОборотов);	

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	УправлениеЭлементамиФормы();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
КонецПроцедуры

&НаСервере 
Процедура ИзменениеФизЛица()

	ПричиныИзмененияНазначенияПлатежа.Добавить("Контрагент");
	СформироватьНазначениеПлатежаСервер(Ложь, "Контрагент");
	Документы.бит_ЗаявкаНаРасходованиеСредств.ВидимостьНазначенныхАналитик(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентЮрФизЛицоПриИзмененииСервер()

	ВидимостьРеквизитовОперацияПеречислениеДивидендов();
	Объект.Контрагент 		= Справочники.Контрагенты.ПустаяСсылка();
	Объект.ФизическоеЛицо 	= Справочники.ФизическиеЛица.ПустаяСсылка();
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьРеквизитовОперацияПеречислениеДивидендов()

	Элементы.Контрагент.Видимость 		= Объект.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Элементы.Контрагент_Список.Видимость 		= Объект.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Элементы.ФизическоеЛицо.Видимость 	= Объект.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Элементы.ФизическоеЛицо1.Видимость 	= Объект.КонтрагентЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствАналитик(Форма, Префикс = "")

	Результат = бит_МеханизмДопИзмеренийКлиентСервер.ПараметрыУстановкиСвойствАналитикПоШаблону(
		Префикс + "Аналитика_", "Аналитика_", "СтатьяОборотов");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция РаспределениеПоддерживается(ДанныеСтроки, ПолеФормы)
	
	Поддерживается = Истина;
	ТекстСообщения = "";
	Разрез  = СтрЗаменить(ПолеФормы.Имя, "Распределение", "");
	Представление = "";
	
	Если НЕ ПустаяСтрока(ПолеФормы.Заголовок) Тогда
		Представление = ПолеФормы.Заголовок;
	Иначе	
		Представление = Разрез;  
	КонецЕсли; 
	
	Исключения = Новый Массив;
	// Технологические.
	Исключения.Добавить(Элементы.РаспределениеНомерСтроки);
	Исключения.Добавить(Элементы.РаспределениеСтатьяОборотов);
	// Значащие.
	Исключения.Добавить(Элементы.РаспределениеСумма);
	Исключения.Добавить(Элементы.РаспределениеСтавкаНДС);
	Исключения.Добавить(Элементы.РаспределениеНДС);
	
	Если Исключения.Найти(ПолеФормы) <> Неопределено Тогда
		Поддерживается = Ложь;
		ТекстСообщения = НСтр("ru = 'По этой колонке распределение не поддерживается.'");
	КонецЕсли;
	
	Если Поддерживается Тогда
		// Если по статье не ведется учет по данной аналитике - распределение невозможно.		
		НастройкиСтатьи = ПолучитьНастройкиСтатьи(ДанныеСтроки.СтатьяОборотов);
		Если НЕ НастройкиСтатьи = Неопределено Тогда
			ВедетсяУчет = Ложь;
			НастройкиСтатьи.Свойство("Учет_" + Разрез, ВедетсяУчет);
			Если НЕ ВедетсяУчет = Истина Тогда
				Поддерживается = Ложь;
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Для статьи ""%1"" по аналитике ""%2"" учет не ведется. Распределение не поддерживается.'"),
									ДанныеСтроки.СтатьяОборотов, Представление);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ Поддерживается Тогда
		ПоказатьПредупреждение(, ТекстСообщения,, НСтр("ru = 'Распределить по ...'"));	
	КонецЕсли; 
	
	Возврат Поддерживается;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиСтатьи(ТекСтатья) 

	НастройкиСтатей = Новый Соответствие;
	бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(ТекСтатья, НастройкиСтатей);
	ТекНастройка = НастройкиСтатей[ТекСтатья];
	Возврат ТекНастройка;
	
КонецФункции

&НаСервере
Процедура ВыполнитьРаспределение(ВыделенныеСтроки, НастройкиРаспределения)
	
	Ресурсы = Новый Массив(); 
	Ресурсы.Добавить("Сумма");
	Ресурсы.Добавить("НДС");
	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		СтрокаИсточник = Объект.Распределение.НайтиПоИдентификатору(ИдСтроки);	
		Если СтрокаИсточник <> Неопределено Тогда
			// Распределение по профилю.
			МассивСтрок = бит_Бюджетирование.РаспределитьПоПрофилюАналитики(НастройкиРаспределения, 
							Объект.Распределение, СтрокаИсточник, Ресурсы);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьХранилищеСтрокПревышения()

	АдресХранилищаСтрокПревышения = ПоместитьВоВременноеХранилище(
				Новый Массив, Новый УникальныйИдентификатор());

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция СсылкаСтатуса(Статус)

	Статусы = Новый Структура; 
	Статусы.Вставить("Заявка_Черновик",   ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Черновик"));
	Статусы.Вставить("Заявка_Утверждена", ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Утверждена"));
	Статусы.Вставить("Заявка_Оплачена",   ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Оплачена"));
	Статусы.Вставить("Заявка_Закрыта",    ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Закрыта"));

	ПустаяСсылка = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ПустаяСсылка");
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Статусы, Статус, ПустаяСсылка);
	
КонецФункции
 
&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ВедомостьЗарплатаРаботникуПриИзмененииНаСервере()

	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные") Тогда
		Если ЗначениеЗаполнено(Объект.ФизическоеЛицо) И ЗначениеЗаполнено(Объект.ПлатежнаяВедомость) Тогда
			Объект.Сумма = СписаниеСРасчетногоСчетаФормы.СуммаВыплаченнойЗарплатыРаботнику(Неопределено, 
			Объект.ФизическоеЛицо, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);	
		Иначе
			Объект.Сумма = 0;
		КонецЕсли;
	Иначе	
		Объект.Сумма = РасходныйКассовыйОрдерФормы.СуммаВыплаченнойЗарплатыРаботнику(Объект.Ссылка, 
			Объект.ФизическоеЛицо, Объект.ПлатежнаяВедомость, УчетЗарплатыИКадровВоВнешнейПрограмме);
	КонецЕсли; 
	
	СформироватьНазначениеПлатежаСервер();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДублиВедомостей(ТекущаяВедомость)
	
	ЕстьДублиВедомостей = Ложь;
	
	СтрокаПоиска    = Новый Структура("Ведомость", ТекущаяВедомость);
	НайденныеСтроки = Объект.ПеречислениеЗаработнойПлаты.НайтиСтроки(СтрокаПоиска);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Если НайденныеСтроки.Количество() = 1 Тогда
			Если Элементы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.НомерСтроки <> НайденныеСтроки[0].НомерСтроки Тогда
				ЕстьДублиВедомостей = Истина;
			КонецЕсли;
		Иначе
			ЕстьДублиВедомостей = Истина;
		КонецЕсли;
		
		Если ЕстьДублиВедомостей Тогда
			ТекстСообщения = НСтр("ru = 'Ведомость уже подобранна.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьДублиВедомостей;
	
КонецФункции

&НаКлиенте 
Процедура УстановитьПустоеЗначениеПеречислениеЗаработнойПлатыВедомость(ТекущаяВедомость)
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		ТекущаяВедомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Безналичные") Тогда
			ТекущаяВедомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ПустаяСсылка");			
		Иначе
			ТекущаяВедомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаОперации()

	Если КонтролируемыеРеквизиты.ВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли; 
	
	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийДокументОснование = Объект.ДокументОснование;
	
	ОчиститьОснование = Ложь;
	Если Не КонтролируемыеРеквизиты.ФормаОплаты = Объект.ФормаОплаты 
	   И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая") Тогда
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
	
	ДокументМожетБытьОформленВВалюте(ЭтотОбъект);	
	
	Если НЕ МожетБытьВВалюте Тогда
		Объект.ВалютаДокумента 	  = ВалютаРегламентированногоУчета;
		Объект.КурсДокумента   	  = 1;
		Объект.КратностьДокумента = 1;
	КонецЕсли; 
	
	// Определим список доступных видов договоров.
	ВидыДоговоровПоОперации(ЭтотОбъект);
		
	ПричиныИзмененияНазначенияПлатежа.Добавить("ВидОперации");
	
	СтруктураПараметров = ПараметрыДляУправленияВидимостью();
	Если НЕ СтруктураПараметров.КонтрагентНеобходим Тогда
		Объект.Контрагент = Неопределено;
	КонецЕсли; 
	
	Если НЕ СтруктураПараметров.ФизическоеЛицоНеобходим Тогда
		Объект.ФизическоеЛицо = Неопределено;
	КонецЕсли; 
	
	Объект.НазначениеПлатежа  = "";
	Объект.ПлатежнаяВедомость = Неопределено;
	Объект.ПеречислениеЗаработнойПлаты.Очистить();
	Объект.ПеречислениеДепонентов.Очистить();
	
	ВозвратДенежныхСредствПокупателю = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВозвратДенежныхСредствПокупателю");
	
	Если Объект.ВидОперации = ВозвратДенежныхСредствПокупателю
	 ИЛИ КонтролируемыеРеквизиты.ВидОперации = ВозвратДенежныхСредствПокупателю Тогда
		// Переход между видами операций, чувствительный к "направлению" статьи оборотов.
		ОчиститьСтатьи = Истина;
	Иначе	
		ОчиститьСтатьи = Ложь;
	КонецЕсли; 
	
	УстановитьПараметрыВыбораВалюты(ЭтотОбъект); 
	
	// Установим отбор для статей оборотов.
	УстановитьПараметрыВыбораСтатей(Элементы.СтатьяОборотов);
	УстановитьПараметрыВыбораСтатей(Элементы.РаспределениеСтатьяОборотов);
	УстановитьПараметрыВыбораДоговораКонтрагента(ЭтотОбъект);
	
	ПриИзмененииВидаОперацииНаСервере();
	
	СформироватьНазначениеПлатежаСервер(Ложь, "ВидОперации");
	
	ЗаполнитьКонтролируемыеРеквизиты(ЭтотОбъект);
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();

	ЗаполнитьЗначенияСвойств(СвойстваРаспределения, Объект.Распределение[0]);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОперацииНаСервере()

	ПриИзмененииПараметровВыбораСтатьиОборотов();
	ПриИзмененииПараметровВыбораДоговора();

КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ДоступныеЗначенияВидовОпераций(ФормаОплаты)
	
	Модуль = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование;
	
	Возврат Модуль.ПолучитьДоступныеЗначения(Новый Структура("ФормаОплаты", ФормаОплаты)).ДоступныеЗначения;
	
КонецФункции 

&НаКлиенте 
Процедура РаспределитьСуммуПоВедомостям()
	
	Перем ТаблицаОбъекта;
	
	Если Объект.Сумма = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеЗП") Тогда
		ТаблицаОбъекта = Объект.ПеречислениеЗаработнойПлаты;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ВыплатаДепонентов") Тогда
		ТаблицаОбъекта = Объект.ПеречислениеДепонентов;
	КонецЕсли; 

	Если ТаблицаОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТаблицаОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Коэффициенты = Новый Массив(); 
	Для каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
		Коэффициенты.Добавить(СтрокаТаблицы.СуммаПлатежа);
	КонецЦикла; 
	
	Результат = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(Объект.Сумма, 
					Коэффициенты, 2);
					
	Если Результат <> Неопределено Тогда
		Индекс = 0;
		Для каждого Элемент Из Результат Цикл
			ТаблицаОбъекта.Получить(Индекс).СуммаПлатежа = Элемент;
			Индекс = Индекс + 1;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНазначениеПлатежаСервер(ТолькоСумму = Ложь, ПричинаИзменения = "", Принудительно = Ложь)

	Если ПричиныИзмененияНазначенияПлатежа.Количество() > 0 Тогда
		// Процедура может потребовать обращений к базе данных, поэтому минимизируем ее вызовы -
		// вызовем только в начале стека вызовов.
		// Подробности: см. форму документа Списание с расчетного счета.
		МожноВыполнитьПозже = Истина;
		ПричиныЗаменыНазначенияПлатежа = ",ВидОперации,Организация,Контрагент,ДоговорКонтрагента,";
		Для ИндексОбработчикаИзменения = 0 По ПричиныИзмененияНазначенияПлатежа.Количество() - 1 Цикл
			// Дойдем до первой причины в стеке вызовов, которая может привести к замене назначения платежа.
			// Если обработчик этой причины не вызван уже сейчас,
			// то он будет вызываться позже и заполнение назначения можно отложить до него.
			ПричинаИзмененияИзСтека = ПричиныИзмененияНазначенияПлатежа[ИндексОбработчикаИзменения].Значение;
			Если СтрНайти(ПричиныЗаменыНазначенияПлатежа, "," + ПричинаИзмененияИзСтека + ",") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ПричинаИзменения = ПричинаИзмененияИзСтека Тогда
				МожноВыполнитьПозже = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если МожноВыполнитьПозже Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) ИЛИ Объект.НазначениеПлатежа = СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.бит_ЗаявкаНаРасходованиеСредств.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму,, Принудительно);
		СгенерированноеНазначенияПлатежа = Объект.НазначениеПлатежа;
	ИначеЕсли ТолькоСумму И Объект.НазначениеПлатежа <> СгенерированноеНазначенияПлатежа Тогда
		Объект.НазначениеПлатежа = Документы.бит_ЗаявкаНаРасходованиеСредств.ПолучитьНазначениеПлатежа(Объект, ТолькоСумму,, Принудительно);
	КонецЕсли;

	Если ФормироватьНПУпрАвтоматически Тогда
		Объект.НазначениеПлатежаУпр = Объект.НазначениеПлатежа;
	КонецЕсли;
	УстановитьФлагФормироватьНПУпрАвтоматически(ЭтотОбъект);

	ПричиныИзмененияНазначенияПлатежа.Очистить();
	
КонецПроцедуры

&НаСервере 
Процедура ПересчитатьВВалютуРеглУчета()
	
	ВалСтруктураСтарая = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента"
											, Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
	
	Объект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	Объект.КурсДокумента      = 1;
	Объект.КратностьДокумента = 1;
	
	Объект.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.Сумма,
					ВалСтруктураСтарая.ВалютаДокумента, Объект.ВалютаДокумента,
					ВалСтруктураСтарая.КурсДокумента, Объект.КурсДокумента,
					ВалСтруктураСтарая.КратностьДокумента, Объект.КратностьДокумента);
	
	РассчитатьСуммуНДС(Объект);
	СуммаБезНДС = Объект.Сумма - Объект.НДС;
	
	Распределение = Объект.Распределение;
	
	Для Каждого СтрокаТаблицы Из Распределение Цикл
		
		СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
								ВалСтруктураСтарая.ВалютаДокумента, Объект.ВалютаДокумента,
								ВалСтруктураСтарая.КурсДокумента, Объект.КурсДокумента,
								ВалСтруктураСтарая.КратностьДокумента, Объект.КратностьДокумента);
		
		РассчитатьСуммуНДС(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежныйДокумент(ВидДокумента)

	НовыеДокументы = Новый Массив(); 
	СоздатьПлатежныйДокументНаСервере(ВидДокумента, НовыеДокументы);
	
	Для каждого Элемент Из НовыеДокументы Цикл
		Если ВидДокумента = "Поручение" Тогда
			ИмяФормыДокумента = "Документ.ПлатежноеПоручение.ФормаОбъекта";
		Иначе	
			Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Наличные") Тогда
				ИмяФормыДокумента = "Документ.РасходныйКассовыйОрдер.ФормаОбъекта";
			Иначе	
				ИмяФормыДокумента = "Документ.СписаниеСРасчетногоСчета.ФормаОбъекта";
			КонецЕсли; 
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Ключ", Элемент); 
		ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПлатежныйДокументНаСервере(ВидДокумента, НовыеДокументы)
	
	Модуль 			= Документы.бит_ЗаявкаНаРасходованиеСредств;
	ПараметрыЗаявки = Модуль.НовыеПараметрыЗаявкиДляСозданияПлатежныхДокументов();
	ПараметрыЗаявки.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыЗаявки.Вставить("Статус", Статус);
	ПараметрыЗаявки.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	
	Модуль.СоздатьНаОснованииПлатежныйДокумент(ВидДокумента, НовыеДокументы, ПараметрыЗаявки);
	
КонецПроцедуры

&НаСервере
Функция ДоговорПодходит(ДоговорКонтрагента)

	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДокументМожетБытьОформленВВалюте(Форма)
	
	Объект = Форма.Объект;
	Форма.МожетБытьВВалюте = Ложь;
	
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.бит_ВидыДенежныхСредств.Наличные") Тогда
		ВсеВидыОперацийРегл	   = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("РасходныйКассовыйОрдер");
		ВидОперацииРегл		   = ВсеВидыОперацийРегл[Объект.ВидОперации];
		Форма.МожетБытьВВалюте = РасходныйКассовыйОрдерФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(ВидОперацииРегл);
	Иначе	
		ВсеВидыОперацийРегл	   = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("СписаниеСРасчетногоСчета");
		ВидОперацииРегл		   = ВсеВидыОперацийРегл[Объект.ВидОперации];
		Форма.МожетБытьВВалюте = СписаниеСРасчетногоСчетаФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(ВидОперацииРегл);
	КонецЕсли;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьСвойстваРаспределения(Форма)

	СвойстваРаспределения = Новый Структура();
	СвойстваРаспределения.Вставить("ДоговорКонтрагента",              ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	СвойстваРаспределения.Вставить("ЦФО",             				  ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка"));
	СвойстваРаспределения.Вставить("СтатьяОборотов",             	  ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка"));
	СвойстваРаспределения.Вставить("Проект",             			  ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
	СвойстваРаспределения.Вставить("НоменклатурнаяГруппа", 			  ПредопределенноеЗначение("Справочник.НоменклатурныеГруппы.ПустаяСсылка"));
	СвойстваРаспределения.Вставить("НоменклатурнаяГруппаДоступность", Ложь);
	СвойстваРаспределения.Вставить("НоменклатурнаяГруппаПроверять",   Ложь);
	СвойстваРаспределения.Вставить("СтавкаНДС",                       ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
	СвойстваРаспределения.Вставить("ВидПлатежаПоКредитамЗаймам",      ПредопределенноеЗначение("Перечисление.ВидыПлатежейПоКредитамЗаймам.ПустаяСсылка"));
	
	Для Индекс = 1 По 7 Цикл
		СвойстваРаспределения.Вставить("Аналитика_" + Индекс + "Доступность", Ложь);
		СвойстваРаспределения.Вставить("Аналитика_" + Индекс + "Проверять",   Ложь);
		СвойстваРаспределения.Вставить("Аналитика_" + Индекс,				  Неопределено);
	КонецЦикла;
	
	Форма.СвойстваРаспределения = СвойстваРаспределения;
	
КонецПроцедуры
 
#КонецОбласти

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-07 (#3065)
&НаСервереБезКонтекста
Функция ПолучитьПризнакПересчетаКурса(ДоговорКонтрагента)
	Возврат ДоговорКонтрагента.Ок_ПересчетКурса;
КонецФункции

&НаКлиенте
Процедура РаспределениеОк_СтатьяОборотовБДРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;		
	ТекущиеДанные.СтатьяОборотов = ПолучитьСоответствующуюСтатьюБДДС(ТекущиеДанные.Ок_СтатьяОборотовБДР);
	
	пСценарий = ПолучитьСценарийПоСтатьеБДР(ТекущиеДанные.СтатьяОборотов);
	
	Если ЗначениеЗаполнено(пСценарий) Тогда 
		Объект.Сценарий = пСценарий;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
	ЗаполнитьКодНазначенияПлатежа();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствующуюСтатьюБДДС(СтатьяОборотов)
	
	Возврат РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(ПредопределенноеЗначение("Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС"),СтатьяОборотов);
	
КонецФункции

&НаКлиенте
Процедура Ок_СтатьяОборотовБДРПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ок_СтатьяОборотовБДР) Тогда 
		Возврат;
	КонецЕсли;
		
	Объект.СтатьяОборотов = ПолучитьСоответствующуюСтатьюБДДС(Объект.Ок_СтатьяОборотовБДР);
	
	пСценарий = ПолучитьСценарийПоСтатьеБДР(Объект.Ок_СтатьяОборотовБДР);
	
	Если ЗначениеЗаполнено(пСценарий) Тогда 
		Объект.Сценарий = пСценарий;
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	ПриИзмененииОснованийДляНазначениеПлатежа("СтатьяОборотов");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
	ЗаполнитьКодНазначенияПлатежа();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСценарийПоСтатьеБДР(СтатьяОборотов)
	
	пСценарий  = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
	пВидСтатьи = СтатьяОборотов.ВидСтатьи;
		
	Если пВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда 
		пСценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ИнвестиционныйСценарийПланирования");
	ИначеЕсли пВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда    //Опер. деятельность
		 пСценарий = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ок_ОперационныйСценарийПланирования");
	КонецЕсли;
		
	Возврат пСценарий;
	
КонецФункции	
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-07 (#3065)

//ОК Довбешка Т. 15.12.2014
&НаСервере
Функция ПроверитьТипДокументаОснования(СтрокаТипа)
	Возврат (ТипЗнч(Объект.ДокументОснование) = Тип(СокрЛП(СтрокаТипа)));
КонецФункции // ПроверитьТипДокументаОснования()
//ОК Довбешка Т. 

//&НаСервереБезКонтекста
//Процедура ЗамерОткрытияФормы(МоментОткрытияДо, МоментОткрытияПосле)

//    //ОК Довбешка 21.05.2015
//	ДатаЗамера =  ТекущаяДата();
//	Время = ДатаЗамера - МоментОткрытияПосле;
//	Время = Время + МоментОткрытияДо;
//	КлючеваяОперация = Справочники.КлючевыеОперации.НайтиПоКоду("000000117");
//	ТекНабор = РегистрыСведений.ОК_ЗамерыВремени_ОткрытияФорм.СоздатьНаборЗаписей();
//	ТекНабор.Отбор.ДатаЗамера.Установить(ДатаЗамера);
//	ТекНабор.Отбор.КлючеваяОперация.Установить(КлючеваяОперация);
//	
//	Запись = ТекНабор.Добавить();
//	Запись.Период = ДатаЗамера;
//	Запись.ДатаЗамера = ДатаЗамера;
//	Запись.КлючеваяОперация = КлючеваяОперация;
//	Запись.Информация = "Форма документа";
//	Запись.ВремяВыполнения = Время;
//	Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
//	Запись.Компьютер = ИмяКомпьютера();
//	Попытка
//		ТекНабор.Записать();
//	Исключение
//	КонецПопытки;
//    //ОК Довбешка
//	
//КонецПроцедуры // ЗамерОткрытияФормы()

// +СБ. Широков Николай. 2014-09-04. ТЗ "Казначейство" 2.2.2.2.	
&НаКлиенте
Процедура СБ_ПрофильРазноскиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СБ_КазначействоКлиент.СБ_ПрофильРазноскиНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры // -СБ. Широков Николай

&НаКлиенте
Процедура СБ_ПрофильРазноскиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СБ_КазначействоКлиент.СБ_ПрофильРазноскиАвтоПодборТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры
// +СБ. Широков Николай. 2014-09-04. ТЗ "Казначейство" 2.2.2.2.	
&НаКлиенте
Процедура СБ_ПрофильРазноскиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
    СБ_КазначействоКлиент.СБ_ПрофильРазноскиОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры // -СБ. Широков Николай
// +СБ. Широков Николай. 2014-10-22. Доработка #1094
&НаКлиенте
Процедура СБ_ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	СБ_КазначействоКлиент.ОрганизацияНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);
КонецПроцедуры // -СБ. Широков Николай

// BIT AMerkulov 11-02-2016 ++
&НаКлиенте
Процедура НДСПриИзменении(Элемент)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-21 (#3321)
	//ЭтаФорма.СуммаБезНДС = Объект.Сумма - Объект.НДС;
	//Заменено на:	
	Объект.СуммаБезНДС = Объект.Сумма - Объект.НДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-21 (#3321)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	ПриИзмененииОснованийДляНазначениеПлатежа("НДС");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаБезНДСПриИзменении(Элемент)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-15 (#3488)
	Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования
		И НЕ Элементы.Сумма.Доступность Тогда
		
		Объект.НДС = Объект.Сумма - Объект.СуммаБезНДС;
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
		ПриИзмененииОснованийДляНазначениеПлатежа("НДС");
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
		Возврат;
		
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-15 (#3488)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-12-04 (#3065
	//Объект.Сумма = ЭтаФорма.СуммаБезНДС + Объект.НДС;
	//Заменено на:
	РассчитатьСуммуНДС(Объект,Истина);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-12-04 (#3065)
КонецПроцедуры
// BIT AMerkulov 11-02-2016 ++

// БИТ НАГолубева 01.03.2016 ++
&НаКлиенте
Процедура ЗаполнитьКолонку(Команда)
	КолонкаИмя = Элементы.Распределение.ТекущийЭлемент.Имя;
	ПутьКДанным = СтрЗаменить(КолонкаИмя, "Распределение", "");
	ТекущееЗначение = Элементы.Распределение.ТекущиеДанные[ПутьКДанным];
	Для Каждого ТекСтрока Из Объект.Распределение Цикл
		ТекСтрока[ПутьКДанным] = ТекущееЗначение;
		//+Сундукова 29.03.2016 Заявка из реестра БК №110
		Если КолонкаИмя= 	"РаспределениеСтавкаНДС" тогда
		//СофтЛаб Начало 2019-07-06 #3375
			//// БИТ НАГолубева 29.03.2016 ++
			////Процедура РассчитатьСуммуНДС() не производит заполнение ТЧ
			////+Сундукова 30.03.2016 - добавила в процедуру рассчета ндс расчет суммы без НДС
			//РассчитатьСуммуНДС(ТекСтрока);			
			////СтавкаНДСЧисло = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(ТекущееЗначение);
			////ТекСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма,Истина,Истина,СтавкаНДСЧисло);
			////ТекСтрока.СуммаБезНДС = ТекСтрока.Сумма - ТекСтрока.НДС;
			//// БИТ НАГолубева 29.03.2016 --
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-15 (#3488)
			//РассчитатьСуммуНДС(ТекСтрока,Истина);
			Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования
				И НЕ Элементы.РаспределениеСумма.Доступность Тогда
				РассчитатьСуммуНДС(ТекСтрока,Ложь);
			Иначе
				РассчитатьСуммуНДС(ТекСтрока,Истина);
			КонецЕсли; 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-15 (#3488)
		ИначеЕсли КолонкаИмя = "РаспределениеСумма" Тогда
			РассчитатьСуммуНДС(ТекСтрока);
			ТекСтрока.СуммаБезНДС = ТекСтрока.Сумма - ТекСтрока.НДС;
		ИначеЕсли КолонкаИмя = "РаспределениеНДС" тогда
			ТекСтрока.СуммаБезНДС = ТекСтрока.Сумма - ТекСтрока.НДС;	
		ИначеЕсли КолонкаИмя = "РаспределениеСуммаБезНДС" тогда
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-15 (#3488)
			//РассчитатьСуммуНДСОтСуммыБезНДС(ТекСтрока);
			//ТекСтрока.Сумма = ТекСтрока.СуммаБезНДС + ТекСтрока.НДС;
			Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования
				И НЕ Элементы.РаспределениеСумма.Доступность Тогда
				ТекСтрока.НДС = ТекСтрока.Сумма - ТекСтрока.СуммаБезНДС;
			Иначе
				РассчитатьСуммуНДСОтСуммыБезНДС(ТекСтрока);
				ТекСтрока.Сумма = ТекСтрока.СуммаБезНДС + ТекСтрока.НДС;
			КонецЕсли; 
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-15 (#3488)
		//СофтЛаб Конец 2019-07-06 #3375
		КонецЕсли;
		//-Сундукова 29.03.2016
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-14 (#3065)
		Если КолонкаИмя = "РаспределениеОк_СтатьяОборотовБДР" Тогда 
			ТекСтрока.СтатьяОборотов = ПолучитьСоответствующуюСтатьюБДДС(ТекущееЗначение);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-14 (#3065)
		
	КонецЦикла;
КонецПроцедуры
// БИТ НАГолубева 01.03.2016 --

&НаСервере
Процедура ПроверитьИмеющиесяЗаявкиПоОснованию();
	Если ЗначениеЗаполнено(объект.ДокументОснование) тогда
		бит_КазначействоКлиентСервер.ПроверитьИмеющиесяЗаявкиПоОснованию(объект.ДокументОснование,Объект.ссылка.Метаданные().Имя,Объект.Ссылка,объект);
	КонецЕсли;
КонецПроцедуры

//+Сундукова
&НаКлиенте
Процедура РаспределениеСуммаБезНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-10-15 (#3488)
	//РассчитатьСуммуНДСОтСуммыБезНДС(ТекущиеДанные);
	//ТекущиеДанные.Сумма = ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС;
	Если ок_НастройкиДоступностиПолейОбъектовДляРедактирования
		И НЕ Элементы.РаспределениеСумма.Доступность Тогда
		ТекущиеДанные.НДС = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаБезНДС;
	Иначе
		РассчитатьСуммуНДСОтСуммыБезНДС(ТекущиеДанные);
		ТекущиеДанные.Сумма = ТекущиеДанные.СуммаБезНДС + ТекущиеДанные.НДС;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-10-15 (#3488)
			
КонецПроцедуры
	
&НаКлиенте 
Процедура РассчитатьСуммуНДСОтСуммыБезНДС(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	

	СтавкаНДСЧисло = бит_БухгалтерияСервер.ПолучитьСтавкуНДС(Контейнер.СтавкаНДС);
	Контейнер.Сумма = Контейнер.СуммаБезНДС/100*(100 + СтавкаНДСЧисло);	
	Контейнер.НДС  = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Контейнер.Сумма
																	  	,Истина
																		,Истина
																		,СтавкаНДСЧисло);
	
КонецПроцедуры // РассчитатьСуммуНДС()

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-22 (#3321)
&НаКлиенте
Процедура РаспределениеНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Распределение.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;	
	КонецЕсли;
	
	ТекущиеДанные.СуммаБезНДС = ТекущиеДанные.Сумма - ТекущиеДанные.НДС;	
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-22 (#3321)

// ОКЕЙ Гиль А.В.(Софтлаб) Начало 02.10.2019 (#3497) 
&НаСервереБезКонтекста
Функция ПолучитьПризнакПересчетаКурсаПоДоговорамРаспределения(Знач ТаблицаРаспределенияДоговоров, Знач ОсновнойДоговор)
	Возврат Документы.бит_ЗаявкаНаРасходованиеСредств.ПолучитьПризнакПересчетаКурсаПоДоговорамРаспределения(ТаблицаРаспределенияДоговоров.Выгрузить(,"ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента"), ОсновнойДоговор);
КонецФункции
// ОКЕЙ Гиль А.В.(Софтлаб) Конец 02.10.2019 (#3497)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2019-11-15 (#3537)
&НаСервере
Процедура ЗаполнитьОсновнойБанковскийСчетКонтрагента()
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
	//ОсновнойСчетДоговора = Объект.ДоговорКонтрагента.ок_БанковскиеСчета.Найти(Истина, "Основной");
	//
	//Если Объект.ДоговорКонтрагента.ок_БанковскиеСчета.Количество() <> 0  Тогда
	//	Если Объект.ДоговорКонтрагента.ок_БанковскиеСчета.Количество() = 1 Тогда
	//		Объект.СБ_БанковскийСчетКонтрагента = Объект.ДоговорКонтрагента.ок_БанковскиеСчета[0].БанковскийСчет;
	//	ИначеЕсли Объект.ДоговорКонтрагента.ок_БанковскиеСчета.Количество() > 1  и ОсновнойСчетДоговора <> Неопределено Тогда
	//		Объект.СБ_БанковскийСчетКонтрагента = ОсновнойСчетДоговора.БанковскийСчет;	
	//	Иначе 
	//		Объект.СБ_БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();	
	//	КонецЕсли;
	//ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент.ОсновнойБанковскийСчет) Тогда
	//	Объект.СБ_БанковскийСчетКонтрагента = Объект.Контрагент.ОсновнойБанковскийСчет; 
	//Иначе 
	//	Объект.СБ_БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	//КонецЕсли;
	Объект.СБ_БанковскийСчетКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьБанковскийСчетКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2019-11-15 (#3537)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-17 (#3795)
&НаКлиенте 
Процедура ЗаполнитьКодНазначенияПлатежа()
	
	ЗаполнитьКодНазначенияПлатежаНаСервере();
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьКодНазначенияПлатежаНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-17 (#3758)
	//Документы.бит_ЗаявкаНаРасходованиеСредств.ЗаполнитьКодНазначенияПлатежа(ДокументОбъект);
	//ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	Документы.бит_ЗаявкаНаРасходованиеСредств.ЗаполнитьКодНазначенияПлатежа(Объект);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-17 (#3758)
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-17 (#3795)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3629)
&НаКлиенте
Процедура ПриИзмененииОснованийДляНазначениеПлатежа(пОснование)
	
	Если мУжеПоказанВопрос = Истина 
		ИЛИ Объект.ок_СпособСоздания <> 4 Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДокументОснование", 	Объект.ДокументОснование);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("СтатьяОборотов", 		Объект.СтатьяОборотов);
	СтруктураПараметров.Вставить("НДС", 				Объект.НДС);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4337)
	СтруктураПараметров.Вставить("ДокументОбъект", Объект);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4337)
	
	НовоеНазначениеПлатежа = СформироватьНазначениеПлатежаНаСервере(СтруктураПараметров);
	
	Если Объект.НазначениеПлатежа <> НовоеНазначениеПлатежа Тогда
		
		мУжеПоказанВопрос = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеНазначениеПлатежа", ЭтотОбъект, НовоеНазначениеПлатежа); 
		Если пОснование = "ДоговорКонтрагента" Тогда
			ТекстСообщения = "Изменилось значение реквизита «Договор контрагента». Обновить поле «Назначение платежа»?»";
		ИначеЕсли пОснование = "СтатьяОборотов" Тогда
			ТекстСообщения = "Изменилось значение реквизита «Статья оборотов». Обновить поле «Назначение платежа»?»";
		ИначеЕсли пОснование = "НДС" Тогда
			ТекстСообщения = "Изменилась сумма НДС. Обновить поле «Назначение платежа»?»";
		Иначе
			ТекстСообщения = "Изменилось значение реквизита «" + пОснование + "». Обновить поле «Назначение платежа»?»";
		КонецЕсли;
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да); 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьНазначениеПлатежаНаСервере(СтруктураПараметров)
	
	НовоеНазначениеПлатежа = Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьНазначениеПлатежа(СтруктураПараметров);
	Возврат НовоеНазначениеПлатежа;
	
КонецФункции

&НаКлиенте 
Процедура ИзменениеНазначениеПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	мУжеПоказанВопрос = Ложь;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ДокументОснование", 	Объект.ДокументОснование);
		СтруктураПараметров.Вставить("ДоговорКонтрагента", 	Объект.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("СтатьяОборотов", 		Объект.СтатьяОборотов);
		СтруктураПараметров.Вставить("НДС", 				Объект.НДС);
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-08 (#4337)
		СтруктураПараметров.Вставить("ДокументОбъект", Объект);
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-08 (#4337)
		
		НовоеНазначениеПлатежа = СформироватьНазначениеПлатежаНаСервере(СтруктураПараметров);
		
		Если ПустаяСтрока(Объект.НазначениеПлатежаУпр) 
			Или Объект.НазначениеПлатежа = Объект.НазначениеПлатежаУпр Тогда
			Объект.НазначениеПлатежа = НовоеНазначениеПлатежа;
			Объект.НазначениеПлатежаУпр = НовоеНазначениеПлатежа;
		Иначе
			Объект.НазначениеПлатежа = НовоеНазначениеПлатежа;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеОперации

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-02 (#4209)
&НаКлиенте
Процедура ПровестиИЗакрытьФорму(Команда)

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("Закрыть",		Истина);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОсновнойБСКонтрагента(Контрагент, Договор)
	
	Возврат Справочники.ДоговорыКонтрагентов.ПолучитьБанковскийСчетКонтрагента(Договор, Контрагент, Истина);
	
КонецФункции // ПолучитьОсновнойБСКонтрагента(Контрагент, Договор)

&НаКлиенте
Процедура ВыполнитьПроверкуЗаполненияБС(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (Объект.ок_СпособСоздания = 4 Или Объект.ок_СпособСоздания = 5)
		И Не ПараметрыЗаписи.Свойство("ПропуститьПроверкуЗаполненияБС") Тогда
		
		ОсновнойБанковскийСчет = ПолучитьОсновнойБСКонтрагента(Объект.Контрагент, Объект.ДоговорКонтрагента);
		
		Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) 
			И ОсновнойБанковскийСчет <> Объект.СБ_БанковскийСчетКонтрагента Тогда
			Отказ = Истина;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПроверкуЗаполненияБСЗавершение", ЭтотОбъект, ПараметрыЗаписи);
			ПоказатьВопрос(ОписаниеОповещения,
							"Банковский счет заполнен не по правилам, продолжить проведение документа?",
							РежимДиалогаВопрос.ДаНет);
							
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуЗаполненияБСЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ТипЗнч(ПараметрыЗаписи) <> Тип("Структура") Тогда
			ПараметрыЗаписи = Новый Структура; 
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ПропуститьПроверкуЗаполненияБС", Истина);
		
		Записан = Записать(ПараметрыЗаписи);
		
		Если Записан 
			И ПараметрыЗаписи.Свойство("Закрыть") 
			И ПараметрыЗаписи.Закрыть Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-02 (#4209)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-07 (#4147)
&НаСервере
Процедура ВыполнитьПроверкуБлокировкиКонтрагента()
	
	Результат = Справочники.Контрагенты.ПолучитьДанныеИсторииСтатусаКонтрагента(Объект.Контрагент, Объект.ДатаРасхода);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = Перечисления.бит_СтатусыПоставщиковAX.БлокированыОплаты
		Или Результат.Статус = Перечисления.бит_СтатусыПоставщиковAX.БлокированоВсе Тогда
		
		НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Наименование");
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Контрагент ""%1"" заблокирован к оплате'"), НаименованиеКонтрагента);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Контрагент, , "Объект.Контрагент");
		
		Объект.Контрагент = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуБлокировкиДоговора(ИдентификаторСтроки)
	
	Если ИдентификаторСтроки = -1 Тогда
		Данные = Объект;
	Иначе	
		Данные = Объект.Распределение.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Справочники.ДоговорыКонтрагентов.ПолучитьДанныеИсторииСтатусаДоговора(Данные.ДоговорКонтрагента, Объект.ДатаРасхода);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = Перечисления.бит_ВидыСтадийДоговоров.Замечания
		Или Результат.Статус = Перечисления.бит_ВидыСтадийДоговоров.Закрыт Тогда
		
		НаименованиеДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.ДоговорКонтрагента, "Наименование");
		
		Если МногострочныйДокумент Тогда
			
			ШаблонСообщения = "В строке № %1 Договор %2 заблокирован к оплате";
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(Данные.НомерСтроки, "ЧГ=0"), НаименованиеДоговора);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Данные.ДоговорКонтрагента);
			
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Договор ""%1"" заблокирован к оплате '"), НаименованиеДоговора);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Данные.ДоговорКонтрагента, , "Объект.ДоговорКонтрагента");
			
		КонецЕсли;
		
		Данные.ДоговорКонтрагента = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-07 (#4147)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-07 (#4337)
&НаКлиенте
Процедура ЗаполнитьДокументОснованияИзЗаявкиНаДоговорПриЗакрытии()
	
	СтруктураПараметрыВыбора = Новый Структура;
	СтруктураПараметрыВыбора.Вставить("РежимВыбора",		Истина);
	СтруктураПараметрыВыбора.Вставить("МножественныйВыбор",	Ложь);
	СтруктураПараметрыВыбора.Вставить("ЗакрыватьПриВыборе",	Истина);
	
	СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(Объект.Дата));
	СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(ДобавитьМесяц(Объект.Дата, 1)));
	
	ЗаявкаНаДоговорФормаВыбора = ПолучитьФорму("Документ.рс_ЗаявкаНаДоговор.Форма.ФормаВыбораУправляемая_Дерево", СтруктураПараметрыВыбора, Этаформа);
	ЗаявкаНаДоговорФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьДокументОснованиеИзЗаявкиНаДоговор", ЭтаФорма); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Организация",
		Объект.Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Контрагент",
		Объект.Контрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"ДоговорКонтрагента",
		Объект.ДоговорКонтрагента,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Проведен",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
	
	ЗаявкаНаДоговорФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументОснованиеИзЗаявкиНаДоговор(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли; 

	ВыбраннаяЗаявкаНаДоговор = Неопределено;
	Если ТипЗнч(РезультатЗакрытия) = Тип("КлючСтрокиДинамическогоСписка") Тогда
		
		Для каждого КлючЗначение Из РезультатЗакрытия Цикл
			
			Если КлючЗначение.Ключ = "Ссылка"
				И ТипЗнч(КлючЗначение.Значение) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
			
				ВыбраннаяЗаявкаНаДоговор = КлючЗначение.Значение;
			
			КонецЕсли;
		
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если РезультатЗакрытия.ИмяГруппировки = "Ссылка"
			И ТипЗнч(РезультатЗакрытия.Ключ) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
			ВыбраннаяЗаявкаНаДоговор = РезультатЗакрытия.Ключ;
			
		ИначеЕсли РезультатЗакрытия.РодительскаяГруппировка <> Неопределено Тогда 
			
			ЗаполнитьДокументОснованиеИзЗаявкиНаДоговор(РезультатЗакрытия.РодительскаяГруппировка, ДополнительныеПараметры);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
		ВыбраннаяЗаявкаНаДоговор = РезультатЗакрытия;
		
	КонецЕсли;  
	
	Объект.ДокументОснование = ВыбраннаяЗаявкаНаДоговор;
	
	ПроверитьИмеющиесяЗаявкиПоОснованию();	
	ПриИзмененииДокументаОснования();
	РассчитатьСуммуБезНДС();
	УправлениеЭлементамиФормы();
	ЗаполнитьКонтролируемыеРеквизиты(ЭтотОбъект);
	Объект.ок_СпособСоздания = 4;
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-07 (#4147)

//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Начало 2021-06-03 (#ТП_БП05_ФР07)
&НаКлиенте
Процедура ок_УстановитьВидимостьЭлементов()
	
	Элементы.ОК_НеФормироватьПлатежноеПоручение.Видимость
		= Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику");
	
КонецПроцедуры

&НаСервере
Процедура ок_ЗаполнитьПризнакНеСоздаватьПлатежноеПоручение()
	
	Объект.ОК_НеФормироватьПлатежноеПоручение = Ложь;
	Если Объект.ВидОперации = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПеречислениеДенежныхСредствПодотчетнику  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Объект,
		|	ДополнительныеСведения.Свойство КАК Свойство,
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = &Свойство";
		Запрос.УстановитьПараметр("Объект",		Объект.СБ_БанковскийСчетКонтрагента);
		Запрос.УстановитьПараметр("Свойство",	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ок_ИсключитьФормированиеПП"));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() Тогда
			Выборка.Следующий();
			Объект.ОК_НеФормироватьПлатежноеПоручение = Выборка.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_БанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	ок_ЗаполнитьПризнакНеСоздаватьПлатежноеПоручение();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_БанковскийСчетКонтрагента_МнЗаявкаПриИзменении(Элемент)
	
	ок_ЗаполнитьПризнакНеСоздаватьПлатежноеПоручение();
	
КонецПроцедуры
//ОКЕЙ Завьялова Е.А. (ПервыйБИТ) Конец 2021-06-03 (#ТП_БП05_ФР07)

// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-07 (#4337)

мУжеПоказанВопрос = Ложь;
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3629)

