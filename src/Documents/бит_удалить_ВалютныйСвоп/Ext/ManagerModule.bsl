
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция формирует дерево документов планирования.
//
// Параметры:
//	ВалютныйСвопСсылка - ДокументСсылка
//
// Возвращаемое значение:
//	ДеревоДокументов - дерево значений	
//
Функция ПолучитьДеревоДокументовПланирования(ВалютныйСвопСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка КАК ДокументПланированияСсылка,
	|	ТИПЗНАЧЕНИЯ(бит_ЗаявкаНаРасходованиеСредств.Ссылка) КАК ТипДокумента
	|ИЗ
	|	Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|ГДЕ
	|	бит_ЗаявкаНаРасходованиеСредств.ДокументОснование = &ТекущийДокумент
	|	И бит_ЗаявкаНаРасходованиеСредств.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка,
	|	ТИПЗНАЧЕНИЯ(бит_ЗаявкаНаРасходованиеСредств.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ПланируемоеПоступлениеДенежныхСредств.Ссылка,
	|	ТИПЗНАЧЕНИЯ(бит_ПланируемоеПоступлениеДенежныхСредств.Ссылка)
	|ИЗ
	|	Документ.бит_ПланируемоеПоступлениеДенежныхСредств КАК бит_ПланируемоеПоступлениеДенежныхСредств
	|ГДЕ
	|	бит_ПланируемоеПоступлениеДенежныхСредств.ДокументОснование = &ТекущийДокумент
	|	И бит_ПланируемоеПоступлениеДенежныхСредств.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ПланируемоеПоступлениеДенежныхСредств.Ссылка,
	|	ТИПЗНАЧЕНИЯ(бит_ПланируемоеПоступлениеДенежныхСредств.Ссылка)
	|ИТОГИ ПО
	|	ТипДокумента";
		
	Запрос.УстановитьПараметр("ТекущийДокумент"	  , ВалютныйСвопСсылка);
	
	Результат = Запрос.Выполнить();
	
	ДеревоДокументов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЕстьДокументыПлан = ?(ДеревоДокументов.Строки.Количество()>0, Истина, Ложь);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"));
	МассивТипов.Добавить(Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств"));

	ДеревоДокументов.Колонки.Добавить("Выполнять", Новый ОписаниеТипов("Число"));
	ДеревоДокументов.Колонки.Добавить("ДокументПланирования", Новый ОписаниеТипов(МассивТипов));
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого ТекущийУзел Из ДеревоДокументов.Строки Цикл
		// для ролей ИсполнительКазначейства и ИсполнительПоЗаявкамНаЗатраты 
		// могут отображаться битые ссылки в документах планирования
		ОбъектМета = Метаданные.НайтиПоТипу(ТекущийУзел.ТипДокумента);
		Если НЕ ОбъектМета = Неопределено
			И НЕ ПравоДоступа("Просмотр", ОбъектМета) Тогда
			СтрокиКУдалению.Добавить(ТекущийУзел);
			Продолжить;
		КонецЕсли;
		
		ТекущийУзел.ДокументПланирования = ТекущийУзел.ТипДокумента;
		Для Каждого ТекущаяСтрока Из ТекущийУзел.Строки Цикл
			ТекущаяСтрока.ДокументПланирования = ТекущаяСтрока.ДокументПланированияСсылка;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СтрокиКУдалению Цикл
		ДеревоДокументов.Строки.Удалить(ТекСтрока);
	КонецЦикла;
	
	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("ЕстьДокументыПлан", ЕстьДокументыПлан);
    СтруктураЗначений.Вставить("ДеревоДокументов", ДеревоДокументов);
	
	Возврат СтруктураЗначений;
	
КонецФункции

// Процедура создает документы планирования.
//
// Параметры:
//
Процедура СоздатьДокументыПланирования(ДокументОснование) Экспорт
	
	РеквизитыШапки = ПодготовитьРеквизитыШапки(ДокументОснование);
	
	// Создадим документ "Заявка на расходование ДС".
	СоздатьДокументПланирования("бит_ЗаявкаНаРасходованиеСредств", 1, РеквизитыШапки);
	// Создадим документ "Заявка на расходование ДС".
	СоздатьДокументПланирования("бит_ЗаявкаНаРасходованиеСредств", 2, РеквизитыШапки);
	
    // Создадим документ "Планируемое поступление денежных средств".
	СоздатьДокументПланирования("бит_ПланируемоеПоступлениеДенежныхСредств", 1, РеквизитыШапки);
    // Создадим документ "Планируемое поступление денежных средств".
	СоздатьДокументПланирования("бит_ПланируемоеПоступлениеДенежныхСредств", 2, РеквизитыШапки);
	
КонецПроцедуры // СоздатьДокументПланирования()

// Получим данные реквизитов документа.  
//
Функция ПодготовитьРеквизитыШапки(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокОбъект.Организация,
		|	ДокОбъект.Контрагент,
		|	ДокОбъект.ПерваяВалюта,
		|	ДокОбъект.ВтораяВалюта,
		|	ДокОбъект.Ссылка КАК ДокументОснование,
		|	ДокОбъект.ДатаПервойЧастиСделки,
		|	ДокОбъект.ДатаВторойЧастиСделки,
		|	ДокОбъект.СуммаПервойЧастиСделкиВПервойВалюте,
		|	ДокОбъект.СуммаПервойЧастиСделкиВоВторойВалюте,
		|	ДокОбъект.СуммаВторойЧастиСделкиВПервойВалюте,
		|	ДокОбъект.СуммаВторойЧастиСделкиВоВторойВалюте,
		|	ДокОбъект.Дата
		|ИЗ
		|	Документ.бит_ВалютныйСвоп КАК ДокОбъект
		|ГДЕ
		|	ДокОбъект.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РеквизитыШапки = Запрос.Выполнить().Выгрузить();
	
	Возврат РеквизитыШапки;
	
КонецФункции// ПодготовитьРеквизитыШапки()

// Удаление записей, в регистрах сведений, документов "бит_удалить_ВалютныйСвоп".
//
Процедура ОчиститьСтатусыВизы() Экспорт

	МассивИменРегистров = Новый Массив;
	МассивИменРегистров.Добавить("бит_ИсторияИзмененияВиз");
	МассивИменРегистров.Добавить("бит_УстановленныеВизы");
	МассивИменРегистров.Добавить("бит_ИсторияИзмененияСтатусовОбъектов");
	МассивИменРегистров.Добавить("бит_СтатусыОбъектов");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьВалютныйСвоп.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.бит_удалить_ВалютныйСвоп КАК УдалитьВалютныйСвоп
		|ГДЕ
		|	УдалитьВалютныйСвоп.Проведен";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла; 
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

// Процедура создает документт планирования. 
//
// Параметры:
//  ВидДокумента - Строка.
//  ОчередьДокумента - Число.
//
Процедура СоздатьДокументПланирования(ВидДокумента, ОчередьДокумента, РеквизитыШапки)
	
	Если ВидДокумента = "бит_ЗаявкаНаРасходованиеСредств" Тогда 
		// Создадим документ "Заявка на расходование ДС".
		ДокументПланирования = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
	Иначе
		// Создадим документ "Планируемое поступление денежных средств".
		ДокументПланирования = Документы.бит_ПланируемоеПоступлениеДенежныхСредств.СоздатьДокумент();
	КонецЕсли;
	
	СтруктураЗначений = УпаковатьДанныеВСтруктуру(ВидДокумента, ОчередьДокумента, РеквизитыШапки);
	ДокументПланирования.Заполнить(СтруктураЗначений);
								
	// Запишем созданный документ.
	ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументПланирования, РежимЗаписиДокумента.Запись,, );
	Если НЕ ДокументПланирования.ЭтоНовый() и ВидДокумента = "бит_ЗаявкаНаРасходованиеСредств" Тогда
								
		// Установим статус.
		ДокументПланирования.УстановитьСтатус();
		
	КонецЕсли;
				
КонецПроцедуры // СоздатьДокументПланирования()

// Процедура упаковывает необходимые данные в структуру. 
//
// Параметры:
//  ВидДокумента - Строка.
//  ОчередьДокумента - Число.
//
Функция УпаковатьДанныеВСтруктуру(ВидДокумента, ОчередьДокумента, РеквизитыШапки)
	
	СтрРеквизиты = РеквизитыШапки[0];
	
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ДокументОснование",  СтрРеквизиты.ДокументОснование);
	СтруктураЗначений.Вставить("Дата",               ТекущаяДатаСеанса());
    СтруктураЗначений.Вставить("Организация",        СтрРеквизиты.Организация);
    СтруктураЗначений.Вставить("Контрагент",         СтрРеквизиты.Контрагент);
	СтруктураЗначений.Вставить("СтавкаНДС",          Перечисления.СтавкиНДС.БезНДС);
	
	Если ВидДокумента = "бит_ЗаявкаНаРасходованиеСредств" Тогда
		СтруктураЗначений.Вставить("ВидОперации", Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ПрочиеРасчетыСКонтрагентами);
		Если ОчередьДокумента = 1 Тогда
			СтруктураЗначений.Вставить("Сумма", СтрРеквизиты.СуммаПервойЧастиСделкиВПервойВалюте);
			СтруктураЗначений.Вставить("ДатаРасхода", СтрРеквизиты.ДатаПервойЧастиСделки);
			СтруктураЗначений.Вставить("ВалютаДокумента", СтрРеквизиты.ПерваяВалюта);
		
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(СтрРеквизиты.ПерваяВалюта, СтрРеквизиты.Дата);
			СтруктураЗначений.Вставить("КурсДокумента",   СтрКурса.Курс);
	        СтруктураЗначений.Вставить("КратностьДокумента",   СтрКурса.Кратность);
		Иначе	
			СтруктураЗначений.Вставить("Сумма", СтрРеквизиты.СуммаВторойЧастиСделкиВоВторойВалюте);
			СтруктураЗначений.Вставить("ДатаРасхода", СтрРеквизиты.ДатаВторойЧастиСделки);
			СтруктураЗначений.Вставить("ВалютаДокумента", СтрРеквизиты.ВтораяВалюта);
		
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(СтрРеквизиты.ВтораяВалюта, СтрРеквизиты.Дата);
			СтруктураЗначений.Вставить("КурсДокумента",   СтрКурса.Курс);
	        СтруктураЗначений.Вставить("КратностьДокумента",   СтрКурса.Кратность);
		КонецЕсли;
	Иначе
		Если ОчередьДокумента = 1 Тогда
			СтруктураЗначений.Вставить("Сумма", СтрРеквизиты.СуммаПервойЧастиСделкиВоВторойВалюте);
			СтруктураЗначений.Вставить("ДатаПоступления", СтрРеквизиты.ДатаПервойЧастиСделки);
            СтруктураЗначений.Вставить("ВалютаДокумента", СтрРеквизиты.ВтораяВалюта);
		
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(СтрРеквизиты.ПерваяВалюта, СтрРеквизиты.Дата);
			СтруктураЗначений.Вставить("КурсДокумента",   СтрКурса.Курс);
	        СтруктураЗначений.Вставить("КратностьДокумента",   СтрКурса.Кратность);
		Иначе	
			СтруктураЗначений.Вставить("Сумма", СтрРеквизиты.СуммаВторойЧастиСделкиВПервойВалюте);
			СтруктураЗначений.Вставить("ДатаПоступления", СтрРеквизиты.ДатаВторойЧастиСделки);
			СтруктураЗначений.Вставить("ВалютаДокумента", СтрРеквизиты.ПерваяВалюта);
		
			СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(СтрРеквизиты.ВтораяВалюта, СтрРеквизиты.Дата);
			СтруктураЗначений.Вставить("КурсДокумента",   СтрКурса.Курс);
	        СтруктураЗначений.Вставить("КратностьДокумента",   СтрКурса.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураЗначений;
	
КонецФункции // УпаковатьДанныеВСтруктуру()

#КонецОбласти 

#КонецЕсли
