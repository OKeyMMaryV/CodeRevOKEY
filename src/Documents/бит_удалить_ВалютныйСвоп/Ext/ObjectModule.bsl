#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ЭкспортныеПроцедурыФункции

// Функция реализует алгоритм определения статуса объекта по-умолчанию
//
Функция ОпределитьСтатус(НачальныйСтатус, ВсеВизыПолучены, вхРежимЗаписи, ЕстьОтклонено) Экспорт

    РезСтатус = НачальныйСтатус;
    
    Если вхРежимЗаписи = РежимЗаписиДокумента.Проведение 
        ИЛИ  (ЭтотОбъект.Проведен И НЕ вхРежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
        РезСтатус = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Рабочий;
	Иначе
		РезСтатус = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Черновик;
    КонецЕсли; 
    
    Если РезСтатус = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Рабочий 
        ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Утвержден Тогда
        
        Если ВсеВизыПолучены Тогда
            РезСтатус = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Утвержден;
        Иначе	
            РезСтатус = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Рабочий;
		КонецЕсли; 
				
		Если ЕстьОтклонено Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Отклонен;
		КонецЕсли;
		
    КонецЕсли; 
    
    Возврат РезСтатус;
    
КонецФункции // ОпределитьСтатус()

// Процедура устанавливает статус.
//
// Параметры:
//  вхРежимЗаписи			 - РежимЗаписиДокумента.
//  вхСтруктураОплаты		 - Структура.
//
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено
						  ,вхСтруктураОплаты = Неопределено
						  ,ОбновлятьСтатусыПозиций = Истина) Экспорт
						  
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
						  						  
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли; 
				
		// вычислим переменные, необходимые для установки статуса
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);	
		
		// определим статус заявки
		Статус = ОпределитьСтатус(ДополнительныеСвойства.ТекущийСтатус, ВсеВизыПолучены, вхРежимЗаписи, ЕстьОтклонено);
		
		// если статус изменился - запишем его
		Если ДополнительныеСвойства.ТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,ДополнительныеСвойства.ТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				
				ДополнительныеСвойства.ТекущийСтатус = Статус;
				ДополнительныеСвойства.ДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов				
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
		
КонецПроцедуры //УстановитьСтатус()

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Заполнение шапки
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
	                                               , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												   , Неопределено);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 	
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("Объект", Ссылка);
	НаборВиз = бит_Визирование.ПрочитатьНаборВиз(СтрОтбор);

	// заполним перечень виз
	Если НаборВиз.Количество() = 0 Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СтруктурноеПодразделение", Организация);
		бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);
		
	КонецЕсли; 
	
	УстановитьСтатус(РежимЗаписиДокумента.Проведение, , Ложь);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
				
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
				
		СтатусНач = ДополнительныеСвойства.ТекущийСтатус;
		УстановитьСтатус(ДополнительныеСвойства.РежимЗаписи, , Ложь);
		
		Если ( СтатусНач = Справочники.бит_СтатусыОбъектов.ВалютныйСвоп_Черновик ИЛИ НЕ ЗначениеЗаполнено(СтатусНач) ) Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение", Организация);
			бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);
			
		КонецЕсли; 
		
	ИначеЕсли ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				
		// очистим визы
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СтруктурноеПодразделение", Организация);
		бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);
		УстановитьСтатус(РежимЗаписиДокумента.ОтменаПроведения, , Ложь);			
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата 		  = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область ОператорыОсновнойПрограммы

// Получаем статус и дату изменения статуса для документа
РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
ДатаИзмененияСтатуса = РезСтруктура.Дата;
ТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
ДополнительныеСвойства.Вставить("ТекущийСтатус",ТекущийСтатус);
ДополнительныеСвойства.Вставить("ДатаИзмененияСтатуса",ДатаИзмененияСтатуса);

#КонецОбласти 

#КонецЕсли
