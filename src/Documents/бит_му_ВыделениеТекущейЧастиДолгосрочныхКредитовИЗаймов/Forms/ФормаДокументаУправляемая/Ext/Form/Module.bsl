 
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущие значения реквизитов формы. Клиент.
&НаКлиенте 
Перем мКэшРеквизитовФормы;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет вызов серверной функции по синхронизации значения реквизита РучнаяКорректировка
// при корректировки движений через обработку "Результат проведения".
//
// Параметры:
//  РучнаяКорректировка - Булево.
//
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаКлиенте 
Функция ВыполнитьСинхронизациюРучнойКорректировки(РучнаяКорректировка) Экспорт
	
	ДействиеВыполнено = СинхронизироватьРучнуюКорректировку(РучнаяКорректировка);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	Возврат ДействиеВыполнено;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЭШЕМ РЕКВИЗИТОВ ФОРМЫ

// Процедура заполняет кэш реквизитов формы данными объекта.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает отборы для договора контрагента.
//
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", фСписокВидовДоговоров);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоERP() Тогда
		Если фСписокТиповДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("бит_ТипДоговора", фСписокТиповДоговоров);
		КонецЕсли;
	КонецЕсли;

	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);

	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
//	ВидыОпераций				= фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности;
	ВидыДоговоровКонтрагентов 	= фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;
	
	фСписокВидовДоговоров.Очистить();
	//Начало_бит_Магомедов_31.01.2013 											   
	//Если Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
	//	
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПокупателем);
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
	//
	//	фСписокТиповДоговоров = Неопределено;
	//	
	//ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
	//	
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СПоставщиком);
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомиссионером);
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.СКомитентом);
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
	//	
	//	фСписокТиповДоговоров = Неопределено;
	//	
	//ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		
		фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
		
		фСписокТиповДоговоров.Очистить();
		фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораЗаймыПолученные);
		фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораКредитыПолученные);
		
	//ИначеЕсли Объект.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
	//	
	//	фСписокВидовДоговоров.Добавить(ВидыДоговоровКонтрагентов.Прочее);
	//	
	//	фСписокТиповДоговоров = Новый СписокЗначений;
	//	фСписокТиповДоговоров.Добавить(фКэшЗначений.ТипДоговораЗаймыВыданные);
	//	
	//КонецЕсли;
	//Конец_бит_Магомедов_31.01.2013 
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура обрабатывает изменение валюты документа. Клиент.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ДанныеРеклассификации;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект, ТаблицаОбъекта);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога);					  
				
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли; 
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// бит_AMuntyan Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ – Строка.
//
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ТаблицаОбъекта) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтрокаТаблицы.СуммаПоГрафику = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПоГрафику
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.СуммаПоСчету = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПоСчету
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.СуммаРеклассификации = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаРеклассификации
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		КонецЦикла;
		
	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент()

// бит_MZyubin Процедура обрабатывает изменение контрагента. 
//
&НаСервере
Процедура ИзменениеКонтрагента(ИдСтроки)

	ТекущаяСтрока = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	СтруктураДополнительныхПараметров = Новый Структура;
	
	Если фСписокТиповДоговоров.Количество() > 0 Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", 		ФСписокТиповДоговоров);
		СтруктураОтбора.Вставить("ВидСравненияОтбора",	ВидСравнения.ВСписке);
		
		СтруктураДополнительныхПараметров.Вставить("бит_ТипДоговора", СтруктураОтбора);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(ТекущаяСтрока.ДоговорКонтрагента
														  ,ТекущаяСтрока.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров
														  ,СтруктураДополнительныхПараметров);
														  
	// Могли поменять договор.
	ИзменениеДоговораСервер(ТекущаяСтрока.ДоговорКонтрагента, ТекущаяСтрока.Контрагент);
	
	СписокИдентификаторов = Новый Массив;
	СписокИдентификаторов.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	
	ЗаполнитьДанныеДляРеклассификации(СписокИдентификаторов);
	
	ЗаполнитьКурсВзаиморасчетов(ТекущаяСтрока.ПолучитьИдентификатор());	

КонецПроцедуры // ИзменениеКонтрагента()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
//
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
//
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

// бит_SNovikov Процедура обрабатывает выбор реквизита формы.
//
// Параметры:
//  СтандартнаяОбработка – Булево.
//
&НаКлиенте 
Процедура ОбработатьВыборРеквизитаШапки(СтандартнаяОбработка)

	//Если Объект.ДанныеРеклассификации.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Ответ = Вопрос(НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'")
	//			  ,РежимДиалогаВопрос.ДаНет
	//			  ,30
	//			  ,КодВозвратаДиалога.Нет);
	//				  
	//Если Ответ = КодВозвратаДиалога.Нет Тогда
	//	СтандартнаяОбработка = Ложь;
	//	Возврат;
	//КонецЕсли;
	//
	//Объект.ДанныеРеклассификации.Очистить();
	
КонецПроцедуры // ОбработатьВыборРеквизитаШапки() 

// бит_SNovikov Процедура вычисляет сумму реклассификации.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ВычислитьСуммаРеклассификации()

	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРеклассификации = ТекущиеДанные.СуммаПоГрафику - ТекущиеДанные.СуммаПоСчету;

КонецПроцедуры // ВычислитьСуммаПогашенияОбязательства() 

// бит_SNovikov Процедура вычисляет сумму реклассификации.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ВычислитьСуммаРеклассификацииВзаиморасчеты()

	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРеклассификацииВзаиморасчеты = ТекущиеДанные.СуммаПоГрафикуВзаиморасчеты - ТекущиеДанные.СуммаПоСчетуВзаиморасчеты;

	ДанныеРеклассификацииСуммаРеклассификацииВзаиморасчетыПриИзменении(Элементы.ДанныеРеклассификацииСуммаРеклассификацииВзаиморасчеты);
	
КонецПроцедуры // ВычислитьСуммаПогашенияОбязательства() 

// бит_SNovikov Функция вычисляет сумму в валюте документа.
//
// Параметры:
//  Сумма			- Число.
//  ПоКурсуНач 		– Число.
//  ПоКратностьНач 	– Число.
//  ПоКурсуКон 		– Число.
//  ПоКратностьКон 	– Число.
//
// Возвращаемое значение:
//  Результат 		– Число.
//
&НаКлиенте 
Функция ВычислитьСумму(Сумма, ПоКурсуНач, ПоКратностьНач, ПоКурсуКон, ПоКратностьКон)

	Результат = 0;
	
	Если (ПоКурсуКон = 0) ИЛИ (ПоКратностьНач = 0) Тогда
		ТекстСообщения = "При пересчете суммы обнаружен нулевой курс!";	 
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
	Иначе
		Результат = (Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // ВычислитьСумму()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура УправлениеЭлементамиФормыСервер()
	
	//ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности;
	//
	//Если Объект.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
	//	ЗаголовокКраткосрочныхАктивовОбязательств 	= "Счет краткосрочных активов";
	//	ЗаголовокДолгосрочныхАктивовОбязательств 	= "Счет долгосрочных активов";
	////БИТ Тртилек 03.07.2012
	//ИначеЕсли Объект.ВидОперации = ВидыОпераций.бит_РеклассификацияНаОсновеПервичныхДанных Тогда
	//	ЗаголовокКраткосрочныхАктивовОбязательств 	= "Счет краткосрочной задолженности";
	//	ЗаголовокДолгосрочныхАктивовОбязательств 	= "Счет инвестиционных/долгосрочных активов";
	//	Элементы.ДатаСторно.Видимость = Истина;
	//	Объект.бит_ДатаСторно = НачалоМесяца(Дата(Год(Объект.Дата), Месяц(Объект.Дата)+1, День(Объект.Дата)));	
	//	Элементы.ДанныеРеклассификацииСуммаПоГрафикуВзаиморасчеты.Видимость = ЛОЖЬ;
	//	Элементы.ДанныеРеклассификацииСуммаПоСчетуВзаиморасчеты.Видимость   = ЛОЖЬ;
	//	Элементы.ДанныеРеклассификацииСуммаПоГрафику.Видимость              = ЛОЖЬ;
	//	Элементы.ДанныеРеклассификацииСуммаПоСчету.Видимость                = ЛОЖЬ;
	//	Элементы.КорректироватьКраткосрочнуюЗадолженность.Видимость         = ЛОЖЬ;
	/////БИТ Тртилек
	//Иначе
		ЗаголовокКраткосрочныхАктивовОбязательств 	= "Счет краткосрочных обязательств";
		ЗаголовокДолгосрочныхАктивовОбязательств 	= "Счет долгосрочных обязательств";
	//КонецЕсли;
	
	Элементы.ДанныеРеклассификацииСчетКраткосрочныхОбязательств.Заголовок 	= ЗаголовокКраткосрочныхАктивовОбязательств;
	Элементы.ДанныеРеклассификацииСчетДолгосрочныхОбязательств.Заголовок	= ЗаголовокДолгосрочныхАктивовОбязательств;
	
КонецПроцедуры // УправлениеЭлементамиФормыСервер()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	//Начало_бит_Магомедов_31.01.2013 
	//Если ЭтоНовый И НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
	//	
	//	Объект.ВидОперации = Неопределено;
	//	СформироватьДеревоВидовОпераций();
	//	СтруктураПараметров = бит_РаботаСДиалогамиКлиент.ВыбратьВидОперацииИзДерева(ЭтаФорма
	//																			   ,Объект
	//																			   ,фДеревоВидовОпераций
	//																			   ,Отказ);
	//	Если (ТипЗнч(СтруктураПараметров) = Тип("Структура")) И СтруктураПараметров.Свойство("ВидОперации") Тогда
	//		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																		   
	//	Иначе
	//		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности.КредитыЗаймыПолученные;
	//	КонецЕсли;
	//	
	//	ОбработатьИзменениеВидаОперацииСервер();
	//	
	//КонецЕсли;
	//Конец_бит_Магомедов_31.01.2013 
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	мКэшРеквизитовФормы.Вставить("Дата");

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	//Начало_бит_Магомедов_31.01.2013
	мКэшРеквизитовФормы.Вставить("бит_ДатаСторно");
	УстановитьДатуСторно();
	//Конец_бит_Магомедов_31.01.2013 
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНД ФОРМЫ

// бит_SNovikov Процедура - обработчик события "Нажатие" кнопки "КомандаЗаполнить".
//
&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.ДанныеРеклассификации.Количество() > 0 Тогда
	
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьВопросЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'")
					  ,РежимДиалогаВопрос.ДаНет
					  ,30
					  ,КодВозвратаДиалога.Нет);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьДанныеДляРеклассификации();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Объект.ДанныеРеклассификации.Очистить();
    
    ЗаполнитьДанныеДляРеклассификации();

КонецПроцедуры

// бит_SNovikov Процедура - обработчик события "Нажатие" кнопки "КомандаОбновитьТекущуюСтроку".
//
&НаКлиенте
Процедура КомандаОбновитьТекущуюСтроку(Команда)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокИдентификаторов = Новый Массив;
	СписокИдентификаторов.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	
	ЗаполнитьДанныеДляРеклассификации(СписокИдентификаторов);
	
КонецПроцедуры

// бит_SNovikov Процедура - обработчик события "Нажатие" кнопки "КомандаОбновить".
//
&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	СписокИдентификаторов = Новый Массив;	
	Для каждого ТекСтр Из Объект.ДанныеРеклассификации Цикл
		СписокИдентификаторов.Добавить(ТекСтр.ПолучитьИдентификатор());
	КонецЦикла;
	
	ЗаполнитьДанныеДляРеклассификации(СписокИдентификаторов);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// бит_SNovikov Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, 	"_");
	ИмяПодменю      = Лев(ИмяКнопки, 	Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки, 	Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
																
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();
	
	ОбработатьИзменениеВидаОперацииСервер();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ДанныеРеклассификации.Количество() = 0 Тогда
		//Начало_бит_Магомедов_31.01.2013 
		УстановитьДатуСторно(Истина);
		//Конец_бит_Магомедов_31.01.2013 	
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросДатаПриИзменении", ЭтотОбъект);
	
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

// бит_AMuntyan Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ – Строка.
//
&НаКлиенте
Процедура ВопросДатаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	
	    Объект.ДанныеРеклассификации.Очистить();

		ДобавитьВКэш("Дата");
		
		ИзменениеВалютыКлиент();
		
		//Начало_бит_Магомедов_31.01.2013 
		УстановитьДатуСторно(Истина);
		//Конец_бит_Магомедов_31.01.2013 	
	Иначе
		
		ИзвлечьИзКэша("Дата");
	КонецЕсли;

КонецПроцедуры // ВопросДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	ОрганизацияОбъекта = Объект.Организация;
	ТаблицаОбъекта = Объект.ДанныеРеклассификации;
	
	Если ТаблицаОбъекта.Количество() > 0 Тогда
					  
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ОповешениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении", ЭтотОбъект, ТаблицаОбъекта);
		
		ПоказатьВопрос(ОповешениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	КонецЕсли;

КонецПроцедуры

// бит_AMuntyan Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Отчет – Строка.
//
&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Ответ, ТаблицаОбъекта) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаОбъекта.Очистить();			
	КонецЕсли;

КонецПроцедуры // ВопросОрганизацияПриИзменении()

// бит_SNovikov Процедура - обработчик события "ОбработкаВыбора" поля ввода "Организация".
//
&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если Объект.ДанныеРеклассификации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
				  
	ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияОбработкаВыбора", ЭтотОбъект, ВыбранноеЗначение);
	
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

КонецПроцедуры

// бит_AMuntyan Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Отве – Строка.
//
&НаКлиенте
Процедура ВопросОрганизацияОбработкаВыбора(Ответ, ВыбранноеЗначение) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Организация = ВыбранноеЗначение;
		Объект.ДанныеРеклассификации.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ВопросОрганизацияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ДанныеРеклассификации"

// бит_SNovikov Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента" 
// табличного поля "ДанныеРаспределения".
//
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоВыбораДоговораКлиент(Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент" 
// табличного поля "ДанныеРаспределения".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКонтрагента(ТекущиеДанные.ПолучитьИдентификатор());
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДанныеРеклассификацииДоговорКонтрагента, ТекущиеДанные.Контрагент);
    
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента" 
// табличного поля "ДанныеРаспределения".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
	КомандаОбновитьТекущуюСтроку(Команды.КомандаОбновитьТекущуюСтроку);
	
	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаПоГрафику" 
// табличного поля "ДанныеРеклассификации".
// 
&НаКлиенте
Процедура ДанныеРеклассификацииСуммаПоГрафикуПриИзменении(Элемент)
	
	ВычислитьСуммаРеклассификации();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаПоСчету" 
// табличного поля "ДанныеРеклассификации".
// 
&НаКлиенте
Процедура ДанныеРеклассификацииСуммаПоСчетуПриИзменении(Элемент)
	
	ВычислитьСуммаРеклассификации();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов" 
// табличного поля "ДанныеРеклассификации".
// 
&НаКлиенте
Процедура ДанныеРеклассификацииКурсВзаиморасчетовПриИзменении(Элемент)
	
	ДанныеРеклассификацииСуммаПоГрафикуВзаиморасчетыПриИзменении(Элементы.ДанныеРеклассификацииСуммаПоГрафикуВзаиморасчеты);
	ДанныеРеклассификацииСуммаПоСчетуВзаиморасчетыПриИзменении(Элементы.ДанныеРеклассификацииСуммаПоСчетуВзаиморасчеты);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаПоГрафикуВзаиморасчеты" 
// табличного поля "ДанныеРеклассификации".
// 
&НаКлиенте
Процедура ДанныеРеклассификацииСуммаПоГрафикуВзаиморасчетыПриИзменении(Элемент)
	
	ВычислитьСуммаРеклассификацииВзаиморасчеты();

	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаПоГрафику = ВычислитьСумму(ТекущиеДанные.СуммаПоГрафикуВзаиморасчеты,
												  ТекущиеДанные.КурсВзаиморасчетов, 	 Объект.КурсДокумента,
												  ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаПоСчетуВзаиморасчеты" 
// табличного поля "ДанныеРеклассификации".
// 
&НаКлиенте
Процедура ДанныеРеклассификацииСуммаПоСчетуВзаиморасчетыПриИзменении(Элемент)
	
	ВычислитьСуммаРеклассификацииВзаиморасчеты();

	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаПоСчету = ВычислитьСумму(ТекущиеДанные.СуммаПоСчетуВзаиморасчеты,
												ТекущиеДанные.КурсВзаиморасчетов, 	   Объект.КурсДокумента,
												ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаРеклассификацииВзаиморасчеты" 
// табличного поля "ДанныеРеклассификации".
// 
&НаКлиенте
Процедура ДанныеРеклассификацииСуммаРеклассификацииВзаиморасчетыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРеклассификации = ВычислитьСумму(ТекущиеДанные.СуммаРеклассификацииВзаиморасчеты,
														ТекущиеДанные.КурсВзаиморасчетов, 	   Объект.КурсДокумента,
														ТекущиеДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ НА СЕРВЕРЕ

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	фКоличествоСубконтоМУ = 4;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Вызов механизма защиты.
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма, МетаданныеОбъекта.ПолноеИмя(), Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем виды операций для группы подменю.
	//Начало_бит_Магомедов_31.01.2013 
	//Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
	//	
	//	ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
	//	ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности[ИмяЗначенияПеречисления];
	//	
	//	ИмяКнопки = ИмяЗначенияПеречисления;
	//	
	//	ИмяКоманды = "Команда_" + ИмяКнопки;
	//	
	//	// Добавляем новую команду обработки выбора вида операции.
	//	КомандаУстановитьОперацию = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	//	КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
	//	
	//	КнопкаГруппыПодменю = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюВидаОперации);
	//	КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
	//	КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
	//	КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
	//		
	//КонецЦикла;
	//Конец_бит_Магомедов_31.01.2013 
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	// установка параметров выбора для Договоров
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДанныеРеклассификацииДоговорКонтрагента, "Объект.ДанныеРеклассификации.Контрагент");

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет синхронизацию значения реквизита РучнаяКорректировка
// при корректировки движений через обработку "Результат проведения".
//
// Параметры:
//  РучнаяКорректировка - Булево.
//
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаСервере 
Функция СинхронизироватьРучнуюКорректировку(РучнаяКорректировка)
	
	ДокументОбъект 	  = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДействиеВыполнено = бит_ОбщегоНазначения.ВыполнитьСинхронизациюРучнойКорректировки(ДокументОбъект
																					  ,РучнаяКорректировка);
	
	Если ДействиеВыполнено Тогда
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	Иначе
		ДокументОбъект = Неопределено;
	КонецЕсли;
	
	Возврат ДействиеВыполнено;
	
КонецФункции // СинхронизироватьРучнуюКорректировку()

// бит_SNovikov Процедура обрабатывает изменение вида операции.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()

	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();

КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

// бит_SNovikov Процедура заполняет валюту и курс взаиморасчетов для строки табличной части.
//
// Параметры:
//  Идентификатор  - Число - Индентификатор строки табличной части
//
&НаСервере         
Процедура ЗаполнитьКурсВзаиморасчетов(Идентификатор)

	ТекущиеДанные = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВалютаВзаиморасчетов = ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаВзаиморасчетов, Объект.Дата);
	
	ТекущиеДанные.КурсВзаиморасчетов 		= СтрКурса.Курс;
	ТекущиеДанные.КратностьВзаиморасчетов 	= СтрКурса.Кратность;

КонецПроцедуры // ЗаполнитьКурсВзаиморасчетов()

// бит_SNovikov Формирует список видов операций для выбора вида операции перед созданием документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьДеревоВидовОпераций()

	ЭлементыДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = ЭлементыДерева.Добавить();
	СтрокаНовая.ВидОперации = "Доступные виды операций";
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекСтр.Значение;	
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  КэшированныеЗначения - Структура.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов));
	//Начало_бит_Магомедов_31.01.2013 
	//КэшПеречисления.Вставить("бит_му_ВидыОперацийРеклассификацияЗадолженности", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности));
	//Конец_бит_Магомедов_31.01.2013 	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Типы договоров
	КэшированныеЗначения.Вставить("ТипДоговораЗаймыПолученные", 	Справочники.бит_ТипыДоговоров.ЗаймыПолученные);
	КэшированныеЗначения.Вставить("ТипДоговораКредитыПолученные", 	Справочники.бит_ТипыДоговоров.КредитыПолученные);
	КэшированныеЗначения.Вставить("ТипДоговораЗаймыВыданные", 		Справочники.бит_ТипыДоговоров.ЗаймыВыданные);
	КэшированныеЗначения.Вставить("ТипДоговораЦенныеБумаги", 		Справочники.бит_ТипыДоговоров.ЦенныеБумаги);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура получает и записывает валюту международного учета в кэш значений.
//
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура обрабатывает изменение валюты документа.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
//
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
//
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, ПользователиКлиентСервер.ТекущийПользователь());
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура обрабатывает изменение договора. Сервер.
//
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
//
&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
	КонецЕсли;
	
КонецПроцедуры // ИзменениеДоговораСервер()

// бит_SNovikov Функция возвращает выборку для заполнения табличной части.
//
// Параметры:
//  СписокДоговоров - Массив.
//
// Возвращаемое значение:
//	Выборка - Выборка из результата запроса
//
&НаСервере 
Функция ПолучитьВыборкуДляЗаполненияДокумента(СписокДоговоров = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Валюты.Ссылка КАК Валюта,
	               |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК Курс,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	               |	КОНЕЦ КАК Кратность
	               |ПОМЕСТИТЬ КурсыВалютСрезПоследних
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	               |		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_му_ФинансовыеНачисленияОборотыВесьПериод.Контрагент,
	               |	бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидИсточникаЗадолженности = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыИсточниковЗадолженности.КредиторскаяЗадолженность)
	               |				ТОГДА ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот, 0) - ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0) + ЕСТЬNULL(бит_му_ФинансовыеНачисленияОборотыПредыдущие.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0)
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидИсточникаЗадолженности = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыИсточниковЗадолженности.ДебиторскаяЗадолженность)
	               |				ТОГДА ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот, 0) - ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0) + ЕСТЬNULL(бит_му_ФинансовыеНачисленияОборотыПредыдущие.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0)
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента)
	               |					И бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыКредитовЗаймов.Рыночный)
	               |				ТОГДА ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот, 0) - ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0)
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента)
	               |					И бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыКредитовЗаймов.Нерыночный)
	               |				ТОГДА ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот, 0) - ЕСТЬNULL(бит_му_ФинансовыеНачисленияОбороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0)
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаПоГрафику,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра КАК ВидКредитаЗайма,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних1.ЗначениеПараметра КАК СчетКраткосрочныхОбязательств,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних2.ЗначениеПараметра КАК СчетДолгосрочныхОбязательств
	               |ПОМЕСТИТЬ ФинансовыеНачисления
	               |ИЗ
	               |	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	               |			&Дата,
	               |			,
	               |			,
	               |			Организация = &Организация
	               |				И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности
				   |" + ?(НЕ ЗначениеЗаполнено(СписокДоговоров), "", "
				   |				И ДоговорКонтрагента В (&СписокДоговоров)") + "	
				   |) КАК бит_му_ФинансовыеНачисленияОборотыВесьПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	               |				&ДатаНач,
	               |				,
	               |				,
	               |				Организация = &Организация
	               |					И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности
				   |" + ?(НЕ ЗначениеЗаполнено(СписокДоговоров), "", "
				   |				И ДоговорКонтрагента В (&СписокДоговоров)") + "	
				   |) КАК бит_му_ФинансовыеНачисленияОбороты
	               |		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ФинансовыеНачисленияОбороты.ДоговорКонтрагента
	               |			И бит_му_ФинансовыеНачисленияОборотыВесьПериод.Контрагент = бит_му_ФинансовыеНачисленияОбороты.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	               |				,
	               |				&МоментВремени,
	               |				,
	               |				Организация = &Организация
	               |					И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности
				   |" + ?(НЕ ЗначениеЗаполнено(СписокДоговоров), "", "
				   |				И ДоговорКонтрагента В (&СписокДоговоров)") + "	
				   |) КАК бит_му_ФинансовыеНачисленияОборотыПредыдущие
	               |		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ФинансовыеНачисленияОборотыПредыдущие.ДоговорКонтрагента
	               |			И бит_му_ФинансовыеНачисленияОборотыВесьПериод.Контрагент = бит_му_ФинансовыеНачисленияОборотыПредыдущие.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &ВидКредитаЗайма) КАК бит_му_ПараметрыФинИнструментовСрезПоследних
	               |		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних.ДоговорКонтрагента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &СчетКраткосрочныхОбязательств) КАК бит_му_ПараметрыФинИнструментовСрезПоследних1
	               |		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних1.ДоговорКонтрагента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&Дата, Параметр = &СчетДолгосрочныхОбязательств) КАК бит_му_ПараметрыФинИнструментовСрезПоследних2
	               |		ПО бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента = бит_му_ПараметрыФинИнструментовСрезПоследних2.ДоговорКонтрагента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_ФинансовыеНачисленияОборотыВесьПериод.Контрагент,
	               |	бит_му_ФинансовыеНачисленияОборотыВесьПериод.ДоговорКонтрагента,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних2.ЗначениеПараметра,
	               |	бит_му_ПараметрыФинИнструментовСрезПоследних1.ЗначениеПараметра
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ФинансовыеНачисления.СчетДолгосрочныхОбязательств
	               |ПОМЕСТИТЬ СчетаУчета
	               |ИЗ
	               |	ФинансовыеНачисления КАК ФинансовыеНачисления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФинансовыеНачисления.Контрагент,
	               |	ФинансовыеНачисления.ДоговорКонтрагента,
	               |	ФинансовыеНачисления.ВидКредитаЗайма,
	               |	ФинансовыеНачисления.СчетКраткосрочныхОбязательств,
	               |	ФинансовыеНачисления.СчетДолгосрочныхОбязательств,
	               |	СУММА(ФинансовыеНачисления.СуммаПоГрафику) КАК СуммаПоГрафикуВзаиморасчеты,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_Дополнительный_2Остатки.Счет = ФинансовыеНачисления.СчетДолгосрочныхОбязательств
	               |				ТОГДА ВЫБОР
	               |						КОГДА бит_Дополнительный_2Остатки.Счет.Валютный
	               |							ТОГДА ЕСТЬNULL(ВЫБОР
	               |										КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	               |											ТОГДА бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокДт
	               |										КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	               |											ТОГДА бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокКт
	               |										ИНАЧЕ бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток
	               |									КОНЕЦ, 0)
	               |						ИНАЧЕ ЕСТЬNULL(ВЫБОР
	               |									КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	               |										ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокДт
	               |									КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	               |										ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокКт
	               |									ИНАЧЕ бит_Дополнительный_2Остатки.СуммаРеглОстаток
	               |								КОНЕЦ, 0) / КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаПоСчетуВзаиморасчеты,
	               |	0 КАК СуммаРеклассификацииВзаиморасчеты,
	               |	КурсыВалютСрезПоследних.Валюта КАК ВалютаВзаиморасчетов,
	               |	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
	               |	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
	               |	СУММА(ФинансовыеНачисления.СуммаПоГрафику * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность * &Коэффициент) КАК СуммаПоГрафику,
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_Дополнительный_2Остатки.Счет = ФинансовыеНачисления.СчетДолгосрочныхОбязательств
	               |				ТОГДА ЕСТЬNULL(ВЫБОР
	               |							КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	               |								ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокДт
	               |							КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	               |								ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокКт
	               |							ИНАЧЕ бит_Дополнительный_2Остатки.СуммаРеглОстаток
	               |						КОНЕЦ, 0) * &Коэффициент
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаПоСчету,
	               |	0 КАК СуммаРеклассификации
	               |ПОМЕСТИТЬ ФинансовыеНачисленияОстатки
	               |ИЗ
	               |	ФинансовыеНачисления КАК ФинансовыеНачисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |				&МоментВремени,
	               |				Счет В
	               |					(ВЫБРАТЬ
	               |						СчетаУчета.СчетДолгосрочныхОбязательств
	               |					ИЗ
	               |						СчетаУчета КАК СчетаУчета),
	               |				&МассивСубконто,
	               |				Организация = &Организация) КАК бит_Дополнительный_2Остатки
	               |		ПО ФинансовыеНачисления.Контрагент = бит_Дополнительный_2Остатки.Субконто1
	               |			И ФинансовыеНачисления.ДоговорКонтрагента = бит_Дополнительный_2Остатки.Субконто2
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютСрезПоследних КАК КурсыВалютСрезПоследних
	               |		ПО (ВЫБОР
	               |				КОГДА ФинансовыеНачисления.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
	               |					ТОГДА &ВалютаРеглУчета = КурсыВалютСрезПоследних.Валюта
	               |				ИНАЧЕ ФинансовыеНачисления.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ФинансовыеНачисления.Контрагент,
	               |	ФинансовыеНачисления.ДоговорКонтрагента,
	               |	ФинансовыеНачисления.ВидКредитаЗайма,
	               |	ФинансовыеНачисления.СчетКраткосрочныхОбязательств,
	               |	ФинансовыеНачисления.СчетДолгосрочныхОбязательств,
	               |	КурсыВалютСрезПоследних.Валюта,
	               |	КурсыВалютСрезПоследних.Курс,
	               |	КурсыВалютСрезПоследних.Кратность
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФинансовыеНачисленияОстатки.Контрагент,
	               |	ФинансовыеНачисленияОстатки.ДоговорКонтрагента,
	               |	ФинансовыеНачисленияОстатки.ВидКредитаЗайма,
	               |	ФинансовыеНачисленияОстатки.СчетКраткосрочныхОбязательств,
	               |	ФинансовыеНачисленияОстатки.СчетДолгосрочныхОбязательств,
	               |	ФинансовыеНачисленияОстатки.СуммаПоГрафикуВзаиморасчеты,
	               |	ФинансовыеНачисленияОстатки.СуммаПоСчетуВзаиморасчеты,
	               |	Выразить(ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоСчетуВзаиморасчеты, 0) - ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоГрафикуВзаиморасчеты, 0) КАК Число(15,2)) КАК СуммаРеклассификацииВзаиморасчеты,
	               |	ФинансовыеНачисленияОстатки.ВалютаВзаиморасчетов,
	               |	ФинансовыеНачисленияОстатки.КурсВзаиморасчетов,
	               |	ФинансовыеНачисленияОстатки.КратностьВзаиморасчетов,
	               |	ФинансовыеНачисленияОстатки.СуммаПоГрафикуВзаиморасчеты * &Коэффициент * ФинансовыеНачисленияОстатки.КурсВзаиморасчетов / ФинансовыеНачисленияОстатки.КратностьВзаиморасчетов КАК СуммаПоГрафику,
	               |	ФинансовыеНачисленияОстатки.СуммаПоСчетуВзаиморасчеты * &Коэффициент * ФинансовыеНачисленияОстатки.КурсВзаиморасчетов / ФинансовыеНачисленияОстатки.КратностьВзаиморасчетов КАК СуммаПоСчету,
	               |	Выразить((ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоСчетуВзаиморасчеты, 0) - ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоГрафикуВзаиморасчеты, 0)) КАК Число(15,2)) * &Коэффициент * ФинансовыеНачисленияОстатки.КурсВзаиморасчетов / ФинансовыеНачисленияОстатки.КратностьВзаиморасчетов КАК СуммаРеклассификации,
	               |	ФинансовыеНачисленияОстатки.СуммаПоГрафику КАК СуммаПоГрафикуРегл,
	               |	ФинансовыеНачисленияОстатки.СуммаПоСчету КАК СуммаПоСчетуРегл,
	               |	ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоСчету, 0) - ЕСТЬNULL(ФинансовыеНачисленияОстатки.СуммаПоГрафику, 0) КАК СуммаРеклассификацииРегл
	               |ИЗ
	               |	ФинансовыеНачисленияОстатки КАК ФинансовыеНачисленияОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ СчетаУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ФинансовыеНачисления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ КурсыВалютСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ФинансовыеНачисленияОстатки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ВидыСубконто = ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ВидыСубконто.Контрагенты);
	МассивСубконто.Добавить(ВидыСубконто.ДоговорыКонтрагентов);
	
	СледМесяц = НачалоМесяца(КонецМесяца(Объект.Дата)+1);
	
	Запрос.УстановитьПараметр("ДатаНач", 							ДобавитьМесяц(СледМесяц, 12));
	Запрос.УстановитьПараметр("Дата", 								КонецДня(Объект.Дата));
	ДокументРекласс = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_му_РеклассификацияЗадолженности"));
	Запрос.УстановитьПараметр("МоментВремени",						КонецДня(Объект.Дата));	
	Запрос.УстановитьПараметр("Организация", 						Объект.Организация);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",					Константы.ВалютаРегламентированногоУчета.Получить());
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности;
	ВидыИсточниковЗадолженности = Перечисления.бит_му_ВидыИсточниковЗадолженности;
	ВидыПараметров = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов;
	
	Если Объект.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 		ВидыИсточниковЗадолженности.КредитыЗаймы);
		Запрос.УстановитьПараметр("СчетКраткосрочныхОбязательств", 	ВидыПараметров.СчетКраткосрочныхОбязательств);
		Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", 	ВидыПараметров.СчетДолгосрочныхОбязательств);

	ИначеЕсли Объект.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности",		ВидыИсточниковЗадолженности.ДебиторскаяЗадолженность);
		Запрос.УстановитьПараметр("СчетКраткосрочныхОбязательств", 	ВидыПараметров.СчетКраткосрочныхОбязательств);
		Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", 	ВидыПараметров.СчетДолгосрочныхОбязательств);
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности",		ВидыИсточниковЗадолженности.КредиторскаяЗадолженность);
		Запрос.УстановитьПараметр("СчетКраткосрочныхОбязательств", 	ВидыПараметров.СчетКраткосрочныхОбязательств);
		Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", 	ВидыПараметров.СчетДолгосрочныхОбязательств);
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 		ВидыИсточниковЗадолженности.ЗаймыВыданные);
		Запрос.УстановитьПараметр("СчетКраткосрочныхОбязательств", 	ВидыПараметров.СчетКраткосрочныхАктивов);
		Запрос.УстановитьПараметр("СчетДолгосрочныхОбязательств", 	ВидыПараметров.СчетДолгосрочныхАктивов);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидКредитаЗайма", 					ВидыПараметров.ВидКредитаЗайма);
	Запрос.УстановитьПараметр("Коэффициент",						ПолучитьКоэффициентВалют(Объект));
	Запрос.УстановитьПараметр("СписокДоговоров",					СписокДоговоров);
	Запрос.УстановитьПараметр("МассивСубконто",						МассивСубконто);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;

КонецФункции // ПолучитьВыборкуДляЗаполненияДокумента() 

// бит_SNovikov Процедура заполняет табличную часть "ДанныеРеклассификации".
//
// Параметры:
//  СписокИдентификаторов - Массив.
//
&НаСервере 
Процедура ЗаполнитьДанныеДляРеклассификации(СписокИдентификаторов = Неопределено)
	
	//Начало_бит_Магомедов_18.02.2013
	Отказ = Ложь;
	ТекстСообщения = "";
	ПроверитьНаличиеДокументеВТекущемМесяце(Отказ, ТекстСообщения);
	Если Отказ Тогда			
		Сообщить(ТекстСообщения); 
		Возврат;
	КонецЕсли;
	
	//Начало_бит_Магомедов_05.02.2013  //получаем таблицу счетов
	Отказ = Ложь;
	ТаблицаСчетов = СформироватьТаблицуСчетов(Отказ);
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	//Конец_бит_Магомедов_05.02.2013 
	
	// сформируем список договоров
	СписокДоговоров = Неопределено;
	Если СписокИдентификаторов <> Неопределено Тогда
		
		СписокДоговоров = Новый Массив;
		Для каждого ТекСтр Из СписокИдентификаторов Цикл
			СтрокаТЧ = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(ТекСтр);
			СписокДоговоров.Добавить(СтрокаТЧ.ДоговорКонтрагента);
		КонецЦикла;
		
	КонецЕсли;
	
	// сформируем список колонок для очистки
	ТабЗнач = Объект.ДанныеРеклассификации.Выгрузить();
	Колонки = Новый Массив;
	Для каждого ТекСтр Из ТабЗнач.Колонки Цикл
		Если (ТекСтр.Имя <> "Контрагент") И (ТекСтр.Имя <> "ДоговорКонтрагента") 
			И (ТекСтр.Имя <> "НомерСтроки") И (ТекСтр.Имя <> "ИсходныйНомерСтроки") Тогда
			Колонки.Добавить(ТекСтр.Имя);
		КонецЕсли;
	КонецЦикла;
	
	//Начало_бит_Магомедов_05.02.2013 
	Выборка = бит_ПолучитьВыборкуДляЗаполненияДокумента(СписокДоговоров, ТаблицаСчетов);
	//Выборка = ПолучитьВыборкуДляЗаполненияДокумента(СписокДоговоров);
	//Конец_бит_Магомедов_05.02.2013 
	
	Если СписокИдентификаторов = Неопределено Тогда
		
		// заполним ТЧ
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.ДанныеРеклассификации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.СуммаРеклассификации = Выборка.СуммаПоСчету - Выборка.СуммаПоГрафику;
			НоваяСтрока.СуммаРеклассификацииВзаиморасчеты = Выборка.СуммаПоСчетуВзаиморасчеты - Выборка.СуммаПоГрафикуВзаиморасчеты;
		КонецЦикла;
		
	Иначе
		
		Для каждого ТекСтр Из СписокИдентификаторов Цикл
			СтрокаТЧ = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(ТекСтр);
			
			// очистим данные в строке ТЧ
			Для каждого ТекКолонка Из Колонки Цикл
				СтрокаТЧ[ТекКолонка] = Неопределено;
			КонецЦикла;
			
			// найдем данные в выборке и заполним строку ТЧ
			СтуктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента");
			СтуктураПоиска.Контрагент 			= СтрокаТЧ.Контрагент;
			СтуктураПоиска.ДоговорКонтрагента	= СтрокаТЧ.ДоговорКонтрагента;
			
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(СтуктураПоиска) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
				СтрокаТЧ.СуммаРеклассификации = Выборка.СуммаПоСчету - Выборка.СуммаПоГрафику;
				СтрокаТЧ.СуммаРеклассификацииВзаиморасчеты = Выборка.СуммаПоСчетуВзаиморасчеты - Выборка.СуммаПоГрафикуВзаиморасчеты;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДанныеДляРеклассификации()

// Функция возвращает коэффициент пересчета сумм из валюты регламентированного учета в валюту документа
//
&НаСервере 
Функция ПолучитьКоэффициентВалют(Документ)
	
	ВидыКурсов			= Новый Структура("Упр,Регл,МУ,Документ");
	ДокументОбъект 		= ДанныеФормывЗначение(Документ, Тип("ДокументОбъект.бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов"));
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ДокументОбъект, ДокументОбъект.Дата, ВидыКурсов);
	
	КурсыРегл  	= СтруктураКурсыВалют.Регл;
	КурсыДок 	= СтруктураКурсыВалют.Документ;

	Коэффициент = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(1, КурсыРегл.Валюта, 		КурсыДок.Валюта,
																	 КурсыРегл.Курс, 		КурсыДок.Курс,
																	 КурсыРегл.Кратность, 	КурсыДок.Кратность);
																	 
	Возврат Коэффициент;
	
КонецФункции

// Процедура выполняет заполнение в форме документа валюту МСФО.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()


//Начало_бит_Магомедов_05.02.2013 
&НаСервере 
Функция бит_ПолучитьВыборкуДляЗаполненияДокумента(СписокДоговоров = Неопределено, ТаблицаСчетов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСчетов", ТаблицаСчетов);
	Запрос.Текст = "ВЫБРАТЬ * Поместить ВТ_ТаблицаСчетов Из &ТаблицаСчетов КАК ТаблицаСчетов";
	Запрос.Выполнить();

	Запрос.Текст = "ВЫБРАТЬ
					// +СБ. Кузнецова С. 2014-11-12 
					|	бит_му_Настройки.Значение КАК Значение
					|ПОМЕСТИТЬ ВТ_СтатьяОборотов
					|ИЗ
					|	РегистрСведений.бит_му_Настройки КАК бит_му_Настройки
					|ГДЕ
					|	бит_му_Настройки.Группа = ""Выделение текущей части кредитов и займов (МСФО)""
					|	И бит_му_Настройки.ИмяНастройки = ""Статья оборотов""
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////	
					|ВЫБРАТЬ
					// -СБ. Кузнецова С.
	               |	Валюты.Ссылка КАК Валюта,
				   |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК Курс,
				   |	ВЫБОР
				   |		КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) = 0
				   |			ТОГДА 1
	               |		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	               |	КОНЕЦ КАК Кратность
	               |ПОМЕСТИТЬ КурсыВалютСрезПоследних
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	               |		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ГрафикиДоговоровОбороты.Контрагент,
	               |	бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента,
	               |	бит_ГрафикиДоговоровОбороты.СуммаСценарийОборот,
	               |	бит_ГрафикиДоговоровОбороты.Сценарий,
				   |бит_ГрафикиДоговоровОбороты.СуммаРеглОборот
	               |ПОМЕСТИТЬ ПоГрафику
	               |ИЗ
	               |	РегистрНакопления.бит_ГрафикиДоговоров.Обороты(&ДатаЧерезГод, , Период, 
				   |"+ ?(НЕ ЗначениеЗаполнено(СписокДоговоров),""," ДоговорКонтрагента В (&СписокДоговоров)")+"
				   // +СБ. Кузнецова С. 2014-11-12 
				   |" + ?(НЕ ЗначениеЗаполнено(СписокДоговоров), "", " И ") + "
				   |	СтатьяОборотов В (ВЫБРАТЬ ВТ.Значение ИЗ ВТ_СтатьяОборотов КАК ВТ)	
				   // -СБ. Кузнецова С.
				   |) КАК бит_ГрафикиДоговоровОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_Дополнительный_2Остатки.Счет КАК СчетДолгосрочныхОбязательств,
				   |	ТаблицаСчетов.СчетКраткосрочныхОбязательств КАК СчетКраткосрочныхОбязательств,
	               |	бит_Дополнительный_2Остатки.Субконто1 КАК Контрагент,
	               |	бит_Дополнительный_2Остатки.Субконто2 КАК ДоговорКонтрагента,
				   |	СУММА(ЕстьNULL(ПоГрафику.СуммаСценарийОборот,0)) КАК СуммаПоГрафикуВзаиморасчеты,
				  	|	СУММА(ВЫБОР
				   |			КОГДА бит_Дополнительный_2Остатки.Счет.Валютный
				   |				ТОГДА ЕСТЬNULL(ВЫБОР
				   |							КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
				   |								ТОГДА бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокДт
				   |							КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
				   |								ТОГДА бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокКт
				   |							ИНАЧЕ бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток
				   |						КОНЕЦ, 0)
				   |			ИНАЧЕ ЕСТЬNULL(ВЫБОР
				   |						КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
				   |							ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокДт
				   |						КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
				   |							ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокКт
				   |						ИНАЧЕ бит_Дополнительный_2Остатки.СуммаРеглОстаток
				   |					КОНЕЦ, 0) 
				   |		КОНЕЦ) КАК СуммаПоСчетуВзаиморасчеты,
	               |	СУММА(0) КАК СуммаРеклассификацииВзаиморасчеты,
	               |	КурсыВалютСрезПоследних.Валюта КАК ВалютаВзаиморасчетов,
	               |	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
	               |	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,				   
				   |	СУММА(Выбор
				   |			Когда ПоГрафику.Сценарий Есть NULL
				   |				тогда 0
				   |			иначе
				   |				ВЫБОР
				   |					КОГДА ПоГрафику.Сценарий.Валюта = &ВалютаРеглУчета
				   |					ТОГДА ПоГрафику.СуммаСценарийОборот
				   |				ИНАЧЕ ПоГрафику.СуммаСценарийОборот * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
				   |				КОНЕЦ
				   |		Конец) КАК СуммаПоГрафику,
				   |	СУММА(ВЫБОР
				   |			КОГДА бит_Дополнительный_2Остатки.Счет.Валютный
				   |				ТОГДА ЕСТЬNULL(ВЫБОР
				   |							КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
				   |								ТОГДА бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокДт
				   |							КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
				   |								ТОГДА бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокКт
				   |							ИНАЧЕ бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток
				   |						КОНЕЦ, 0) * КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
				   |			ИНАЧЕ ЕСТЬNULL(ВЫБОР
				   |						КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
				   |							ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокДт
				   |						КОГДА бит_Дополнительный_2Остатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
				   |							ТОГДА бит_Дополнительный_2Остатки.СуммаРеглОстатокКт
				   |						ИНАЧЕ бит_Дополнительный_2Остатки.СуммаРеглОстаток
				   |					КОНЕЦ, 0)
				   |		КОНЕЦ) КАК СуммаПоСчету,

	               |	СУММА(0) КАК СуммаРеклассификации
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |			&МоментВремени,
	               |			Счет В (Выбрать ТаблицаСчетов.СчетДолгосрочныхОбязательств Из ВТ_ТаблицаСчетов КАК ТаблицаСчетов),
	               |			&МассивСубконто,
	               |			Организация = &Организация
	               |			"+?(НЕ ЗначениеЗаполнено(СписокДоговоров),""," И Субконто2 В (&СписокДоговоров)")+"
				   |) КАК бит_Дополнительный_2Остатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютСрезПоследних КАК КурсыВалютСрезПоследних
	               |		ПО (ВЫБОР
	               |				КОГДА бит_Дополнительный_2Остатки.Субконто2.РасчетыВУсловныхЕдиницах
	               |					ТОГДА &ВалютаРеглУчета = КурсыВалютСрезПоследних.Валюта
	               |				ИНАЧЕ бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов = КурсыВалютСрезПоследних.Валюта
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПоГрафику КАК ПоГрафику
	               |		ПО бит_Дополнительный_2Остатки.Субконто1 = ПоГрафику.Контрагент
	               |			И бит_Дополнительный_2Остатки.Субконто2 = ПоГрафику.ДоговорКонтрагента
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСчетов КАК ТаблицаСчетов
				   |		По бит_Дополнительный_2Остатки.Счет = ТаблицаСчетов.СчетДолгосрочныхОбязательств
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_Дополнительный_2Остатки.Счет,
				   |	ТаблицаСчетов.СчетКраткосрочныхОбязательств,
	               |	бит_Дополнительный_2Остатки.Субконто1,
	               |	бит_Дополнительный_2Остатки.Субконто2,
	               |	КурсыВалютСрезПоследних.Валюта,
	               |	КурсыВалютСрезПоследних.Курс,
	               |	КурсыВалютСрезПоследних.Кратность";	

	
	
	ВидыСубконто = ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ВидыСубконто.Контрагенты);
	МассивСубконто.Добавить(ВидыСубконто.ДоговорыКонтрагентов);
	
	СледМесяц = НачалоДня(КонецДня(Объект.Дата)+1);
	
	Запрос.УстановитьПараметр("ДатаЧерезГод", 						ДобавитьМесяц(СледМесяц, 12));
	Запрос.УстановитьПараметр("Дата", 								КонецДня(Объект.Дата));
	
	Граница = Новый Граница(КонецДня(Объект.Дата),ВидГраницы.Включая);
	Запрос.УстановитьПараметр("МоментВремени",						Граница);	
	Запрос.УстановитьПараметр("Организация", 						Объект.Организация);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",					Константы.ВалютаРегламентированногоУчета.Получить());
	
	//Запрос.УстановитьПараметр("Коэффициент",						ПолучитьКоэффициентВалют(Объект));
	Запрос.УстановитьПараметр("СписокДоговоров",					СписокДоговоров);
	Запрос.УстановитьПараметр("МассивСубконто",						МассивСубконто);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;

КонецФункции // ПолучитьВыборкуДляЗаполненияДокумента() 

//Заполнение таблицы счетов из РС "Настройки (МСФО)"
&НаСервере 
Функция СформироватьТаблицуСчетов(Отказ)
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("СчетДолгосрочныхОбязательств", Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	ТаблицаСчетов.Колонки.Добавить("СчетКраткосрочныхОбязательств", Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	
	
	ТекстСообщения = "		Регистр сведений <Настройки МСФО>:";
	
	Группа = "Выделение текущей части полученных кредитов и займов";	 
	
	ИмяНастройки = "Счет учета полученных долгосрочных кредитов и займов";//411 
	// +СБ. Кузнецова С. 2014-11-12 
	//Отбор = Новый Структура("Группа,ИмяНастройки",Группа,ИмяНастройки);
	Отбор = Новый Структура("Группа,ИмяНастройки, СБ_ПорядковыйНомерЗначения",Группа,ИмяНастройки, 0);
	// -СБ. Кузнецова С.
	СтруктураЗначений = РегистрыСведений.бит_му_Настройки.Получить(Отбор);
	Если СтруктураЗначений.Значение = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = ТекстСообщения + Символы.ПС+ "Группа <"+Группа+">; Имя настройки <"+ИмяНастройки+"> - настройка не существует или не задано значение настройки";
	Иначе 
		Счет411 = СтруктураЗначений.Значение; 
	КонецЕсли;
	
	ИмяНастройки = "Счет учета полученных долгосрочных кредитов и займов в валюте";//	412
	// +СБ. Кузнецова С. 2014-11-12 
	//Отбор = Новый Структура("Группа,ИмяНастройки",Группа,ИмяНастройки);
	Отбор = Новый Структура("Группа,ИмяНастройки, СБ_ПорядковыйНомерЗначения",Группа,ИмяНастройки, 0);
	// -СБ. Кузнецова С.
	СтруктураЗначений = РегистрыСведений.бит_му_Настройки.Получить(Отбор);
	Если СтруктураЗначений.Значение = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = ТекстСообщения + Символы.ПС+ "Группа <"+Группа+">; Имя настройки <"+ИмяНастройки+"> - настройка не существует или не задано значение настройки";
	Иначе 
		Счет412 = СтруктураЗначений.Значение;	
	КонецЕсли;
	
	ИмяНастройки = "Счет учета текущей части полученных долгосрочных кредитов и займов";//	515
	// +СБ. Кузнецова С. 2014-11-12 
	//Отбор = Новый Структура("Группа,ИмяНастройки",Группа,ИмяНастройки);
	Отбор = Новый Структура("Группа,ИмяНастройки, СБ_ПорядковыйНомерЗначения",Группа,ИмяНастройки, 0);
	// -СБ. Кузнецова С.
	СтруктураЗначений = РегистрыСведений.бит_му_Настройки.Получить(Отбор);
	Если СтруктураЗначений.Значение = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = ТекстСообщения + Символы.ПС+ "Группа <"+Группа+">; Имя настройки <"+ИмяНастройки+"> - настройка не существует или не задано значение настройки";
	Иначе 
		Счет515 = СтруктураЗначений.Значение;	
	КонецЕсли;
	
	ИмяНастройки = "Счет учета текущей части полученных долгосрочных кредитов и займов в валюте";//	516
	// +СБ. Кузнецова С. 2014-11-12 
	//Отбор = Новый Структура("Группа,ИмяНастройки",Группа,ИмяНастройки);
	Отбор = Новый Структура("Группа,ИмяНастройки, СБ_ПорядковыйНомерЗначения",Группа,ИмяНастройки, 0);
	// -СБ. Кузнецова С.
	СтруктураЗначений = РегистрыСведений.бит_му_Настройки.Получить(Отбор);
	Если СтруктураЗначений.Значение = Неопределено Тогда
		Отказ = Истина;
		ТекстСообщения = ТекстСообщения + Символы.ПС+ "Группа <"+Группа+">; Имя настройки <"+ИмяНастройки+"> - настройка не существует или не задано значение настройки";
	Иначе 
		Счет516 = СтруктураЗначений.Значение;	
	КонецЕсли;
	
	Если Не Отказ Тогда 
		НоваяСтрока = ТаблицаСчетов.Добавить();
		НоваяСтрока.СчетДолгосрочныхОбязательств = Счет411;
		НоваяСтрока.СчетКраткосрочныхОбязательств = Счет515;
		
		НоваяСтрока = ТаблицаСчетов.Добавить();
		НоваяСтрока.СчетДолгосрочныхОбязательств = Счет412;
		НоваяСтрока.СчетКраткосрочныхОбязательств = Счет516;
	Иначе
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	КонецЕсли;
	
	Возврат ТаблицаСчетов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДатуСторно(СтандартнаяОбработка = Истина);
	
	Если СтандартнаяОбработка Тогда
		Объект.бит_ДатаСторно = НачалоМесяца(ДобавитьМесяц(Объект.Дата,1));
		ДобавитьВКэш("бит_ДатаСторно");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеДокументеВТекущемМесяце(Отказ, ТекстСообщения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов.Ссылка
	|ИЗ
	|	Документ.бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов КАК бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов
	|ГДЕ
	|	бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов.Ссылка <> &Ссылка
	|	И НАЧАЛОПЕРИОДА(бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	|	И бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов.ПометкаУдаления = ЛОЖЬ
	|	И бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.УстановитьПараметр("Дата",Объект.Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекстСообщения = "По указанной организации на "+Формат(Объект.Дата,"ДФ='MMMM yyyy'")+" уже существует документ Выделение текущей части долгосрочных кредитов и займов полученных:";
	 
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		ТекстСообщения = ТекстСообщения + Символы.ПС + Выборка.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

//Конец_бит_Магомедов_05.02.2013 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры
