#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит количество субконто международного учета в документа
Перем мКоличествоСубконтоМУ Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обрабатывает изменение валюты документа.
//
// Параметры:
//  Нет.
//
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
//
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
//
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,ПользователиКлиентСервер.ТекущийПользователь()
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
		ВидОперации = Неопределено;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция готовит таблицы документа для проведения.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
//
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ТабЧасть.Контрагент,
	               	|	ТабЧасть.ДоговорКонтрагента,
	               	|	ТабЧасть.СуммаПоГрафику,
	               	|	ТабЧасть.СуммаПоСчету,
	               	|	ТабЧасть.СуммаРеклассификации,
	               	|	ТабЧасть.СчетКраткосрочныхОбязательств,
	               	|	ТабЧасть.СчетДолгосрочныхОбязательств,
	               	|	ТабЧасть.ВалютаВзаиморасчетов,
	               	|	ТабЧасть.СуммаРеклассификацииВзаиморасчеты КАК СуммаВзаиморасчетов
	               	|ИЗ
	               	|	Документ.бит_му_ВыделениеТекущейЧастиДолгосрочныхКредитовИЗаймов.ДанныеРеклассификации КАК ТабЧасть
	               	|ГДЕ
	               	|	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоДанныеРеклассификации = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДанныеРеклассификации", ТаблицаПоДанныеРеклассификации);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура выполняет движения по регистрам.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ)
	
	ТаблицаДанных = СтруктураТаблиц.ДанныеРеклассификации;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Формируем проводку по реклассификации задолженности.
		// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный
		СформироватьЗаписьПоРеклассификацииЗадолженности(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		
		//Начало_бит_Магомедов_05.02.2013 
		СформироватьЗаписьСторноПоРеклассификацииЗадолженности(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		//Конец_бит_Магомедов_05.02.2013 
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение по реклассификации задолженности.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьЗаписьПоРеклассификацииЗадолженности(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)
	
	//ВидыОпераций = Перечисления.бит_му_ВидыОперацийРеклассификацияЗадолженности;
	//
	//Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный
		СчетДт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;
		
	//ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ДебиторскаяЗадолженность Тогда
	//	// Дт Счет обязательства краткосрочный Кт Счет обязательства долгосрочный
	//	СчетДт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;
	//	
	//ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
	//	// Дт Счет актива краткосрочный Кт Счет актива долгосрочный
	//	СчетДт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;
	//	
	//ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредиторскаяЗадолженность Тогда
	//	// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный
	//	СчетДт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;
	//	
	//Иначе
	//	Возврат;		
	//КонецЕсли;
	
	СуммаПроводки = СтрокаТаблицы.СуммаРеклассификации;
	СуммаПроводкиВзаиморасчеты = СтрокаТаблицы.СуммаВзаиморасчетов;
	Если СуммаПроводки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.КорректироватьКраткосрочнуюЗадолженность И (СуммаПроводки < 0) Тогда
		СуммаПроводки = - СуммаПроводки;
		СуммаПроводкиВзаиморасчеты = - СуммаПроводкиВзаиморасчеты;
		Счет = СчетДт;		СчетДт = СчетКт;		СчетКт = Счет;
	КонецЕсли;
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтрокаТаблицы.ВалютаВзаиморасчетов
										 ,СчетДт
										 ,СчетКт
										 ,СуммаПроводкиВзаиморасчеты
										 ,"Выделение текущей части задолженности по кредитам и займам");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	//Начало_бит_Магомедов_05.02.2013 
	//Валюта этого документа всегда рубли
	СтруктураКурсыВалют.Документ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураКурсыВалют.Документ.Кратность = 1;
	СтруктураКурсыВалют.Документ.Курс = 1;
	//Конец_бит_Магомедов_05.02.2013 
	
	// Выполним валютные пересчеты.
	СтруктураПараметров.Вставить("Сумма", СуммаПроводки);
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	// Запишем событие
	НоваяЗапись = Движения.бит_му_СобытияФинИнструментов.Добавить();
	НоваяЗапись.ДоговорКонтрагента 	= СтрокаТаблицы.ДоговорКонтрагента;
	НоваяЗапись.Организация			= СтруктураШапкиДокумента.Организация;
	НоваяЗапись.Период				= СтруктураШапкиДокумента.Дата;
	НоваяЗапись.Событие				= Перечисления.бит_му_СобытияФинИнструментов.РеклассификацияЗадолженности;
	
КонецПроцедуры // СформироватьЗаписьПоРеклассификацииЗадолженности()

//Начало_бит_Магомедов_05.02.2013 
// Процедура формирует движение по реклассификации задолженности.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьЗаписьСторноПоРеклассификацииЗадолженности(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)
	
	// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный
	СчетДт = СтрокаТаблицы.СчетДолгосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;
	
	СуммаПроводки = СтрокаТаблицы.СуммаРеклассификации * -1;
	СуммаПроводкиВзаиморасчеты = СтрокаТаблицы.СуммаВзаиморасчетов * -1;
	Если СуммаПроводки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.КорректироватьКраткосрочнуюЗадолженность И (СуммаПроводки < 0) Тогда
		СуммаПроводки = - СуммаПроводки;
		СуммаПроводкиВзаиморасчеты = - СуммаПроводкиВзаиморасчеты;
		Счет = СчетДт;		СчетДт = СчетКт;		СчетКт = Счет;
	КонецЕсли;
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.бит_ДатаСторно
										 ,СтрокаТаблицы.ВалютаВзаиморасчетов
										 ,СчетДт
										 ,СчетКт
										 ,СуммаПроводкиВзаиморасчеты
										 ,"Выделение текущей части задолженности по кредитам и займам");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	//Начало_бит_Магомедов_05.02.2013 
	//Валюта этого документа всегда рубли
	СтруктураКурсыВалют.Документ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураКурсыВалют.Документ.Кратность = 1;
	СтруктураКурсыВалют.Документ.Курс = 1;
	//Конец_бит_Магомедов_05.02.2013 
	
	// Выполним валютные пересчеты.
	СтруктураПараметров.Вставить("Сумма", СуммаПроводки);
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
		
КонецПроцедуры // СформироватьЗаписьПоРеклассификацииЗадолженности()
//Конец_бит_Магомедов_05.02.2013 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения"
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = ДанныеРеклассификации.Итог("СуммаРеклассификации");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, "", ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	//Начало_бит_Магомедов_10.03.2013 
	ПроверитьЗаполнениеТаблиц(СтруктураТаблиц, Отказ);
	//Конец_бит_Магомедов_10.03.2013 
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения"
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

//Начало_бит_Магомедов_10.03.2013 
Процедура ПроверитьЗаполнениеТаблиц(СтруктураТаблиц, Отказ)
	
	Если СтруктураТаблиц.Свойство("ДанныеРеклассификации") Тогда 
		ТЗДанныеРеклассификации = СтруктураТаблиц.ДанныеРеклассификации;
	иначе 
		Возврат;
	КонецЕсли;
	
	
	//Список договоров по кот. нет графиков
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТЗКонтрагентовДоговоров.Контрагент,
	|	ТЗКонтрагентовДоговоров.ДоговорКонтрагента
	|ПОМЕСТИТЬ ТЗКонтрагентовДоговоров
	|ИЗ
	|	&ТЗКонтрагентовДоговоров КАК ТЗКонтрагентовДоговоров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗКонтрагентовДоговоров.Контрагент,
	|	ТЗКонтрагентовДоговоров.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА бит_ГрафикиДоговоровОбороты.Контрагент ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьГрафик
	|ИЗ
	|	ТЗКонтрагентовДоговоров КАК ТЗКонтрагентовДоговоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ГрафикиДоговоров.Обороты(
	|				&ДатаНач,
	|				,
	|				Период,
	|				Контрагент В
	|						(ВЫБРАТЬ
	|							ТЗКонтрагентовДоговоров.Контрагент
	|						ИЗ
	|							ТЗКонтрагентовДоговоров)
	|					И ДоговорКонтрагента В
	|						(ВЫБРАТЬ
	|							ТЗКонтрагентовДоговоров.ДоговорКонтрагента
	|						ИЗ
	|							ТЗКонтрагентовДоговоров)) КАК бит_ГрафикиДоговоровОбороты
	|		ПО ТЗКонтрагентовДоговоров.Контрагент = бит_ГрафикиДоговоровОбороты.Контрагент
	|			И ТЗКонтрагентовДоговоров.ДоговорКонтрагента = бит_ГрафикиДоговоровОбороты.ДоговорКонтрагента");
    ТЗКонтрагентовДоговоров = ТЗДанныеРеклассификации.Скопировать(,"Контрагент,ДоговорКонтрагента");
	Запрос.УстановитьПараметр("ТЗКонтрагентовДоговоров",ТЗКонтрагентовДоговоров);
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(КонецДня(Дата)+1));
	Выборка = Запрос.Выполнить().Выбрать();
	ТекстСообщения = "";
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьГрафик = Ложь Тогда 
			
			Отказ = Истина;
			ТекстСообщения = ТекстСообщения + "	по контрагенту <"+Выборка.Контрагент+">, договору <"+Выборка.ДоговорКонтрагента+">" + Символы.ПС;
		КонецЕсли;		
	КонецЦикла;
	
	Если Отказ = Истина Тогда
		Сообщить("В регистре <Графики договоров (БИТ)> отсутствуют записи:", СтатусСообщения.Важное);
		Сообщить(ТекстСообщения);
		Сообщить("Необходимо провести документ <Дополнительные условия по договору>", СтатусСообщения.Важное);
	КонецЕсли;

КонецПроцедуры
//Конец_бит_Магомедов_10.03.2013 

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКоличествоСубконтоМУ 			= 4;

#КонецЕсли