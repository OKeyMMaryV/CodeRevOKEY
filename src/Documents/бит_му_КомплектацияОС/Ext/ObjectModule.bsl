
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит валюту международного учета
Перем мВалютаМеждУчета Экспорт;

// Хранит количество субконто международного учета в документа
Перем мКоличествоСубконтоМУ Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	//Если ИмяМакета = "Макет" Тогда
	//	ТабДокумент = ПечатьПФ();
	//	
	//КонецЕсли;
	ТабДокумент = Неопределено;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Ссылка), НепосредственнаяПечать);
	
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	//Возврат Новый Структура("ПФ","Печатная форма");

	Возврат Неопределено;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// бит_DKravchenko Процедура заполняет данные по основным средствам.
//
// Параметры:
//  СписокОС 			   - СправочникСсылка.ОсновныеСредства, массив.
//  СтрокаТабличнойЧастиОС - СтрокаТабличнойЧасти.ОсновныеСредства.
//  НеИзменяемыеПараметры  - Булево.
//
Процедура ЗаполнитьДанныеПоОсновнымСредствам(СписокОС
											,СтрокаТабличнойЧастиОС = Неопределено
											,НеИзменяемыеПараметры) Экспорт
	
	// Сформируем массив параметров ОС для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.КоэффициентУскорения_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ЛиквидационнаяСтоимость_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.МетодНачисленияАмортизации_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПредполагаемыйОбъемПродукции_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СрокПолезногоИспользования_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
	
	// Сформируем структуру параметров для получения таблицы параметров ОС.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     , Организация);
	СтруктураПараметров.Вставить("ОсновноеСредство", СписокОС);
	СтруктураПараметров.Вставить("МоментВремени"   , ?(ЭтоНовый(), КонецДня(Дата), МоментВремени()));
	СтруктураПараметров.Вставить("ПараметрыВНА"	   , ПараметрыВНА);
	
	// Получим таблицу параметров ОС.
	ТаблицаПараметровОС = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	// Получим массив счетов по ОС.
	МассивСчетовАмортизации 	  = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетНачисленияАмортизации_ОС");
	МассивСчетовСниженияСтоимости = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетСниженияСтоимости_ОС");
	МассивСчетовУчета 			  = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетУчета_ОС");
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовАмортизации	  , Истина);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСниженияСтоимости, Истина);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета			  , Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени"				 , МоментВремени());
	Запрос.УстановитьПараметр("МассивСчетовАмортизации"		 , МассивСчетовАмортизации);
	Запрос.УстановитьПараметр("МассивСчетовСниженияСтоимости", МассивСчетовСниженияСтоимости);
	Запрос.УстановитьПараметр("МассивСчетовУчета"			 , МассивСчетовУчета);
	Запрос.УстановитьПараметр("СубконтоОС"					 , ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
	Запрос.УстановитьПараметр("ВидВНА"					 	 , Перечисления.бит_му_ВидыВНА.ОС);
	Запрос.УстановитьПараметр("Организация"					 , Организация);
	Запрос.УстановитьПараметр("СписокОС"					 , СписокОС);
	Запрос.УстановитьПараметр("ВведеноВЭксплуатацию"		 , Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВыработкаОС_МУ.ОбъектВНА КАК ОсновноеСредство,
	|	СУММА(ВыработкаОС_МУ.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ ВыработкаОС_МУ
	|ИЗ
	|	РегистрНакопления.бит_му_ВыработкаВНА.Обороты(
	|			,
	|			&МоментВремени,
	|			,
	|			ВидВНА = &ВидВНА
	|				И Организация = &Организация
	|				И ОбъектВНА В (&СписокОС)) КАК ВыработкаОС_МУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаОС_МУ.ОбъектВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОС_МУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаМУОстатокДт, 0) КАК Стоимость,
	|	ЕСТЬNULL(АмортизацияОС_МУ.СуммаМУОстатокКт, 0) КАК Амортизация,
	|	ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаМУОстатокКт, 0) КАК СуммаФактическогоОбесценения,
	|	СостоянияОС_МУ.ДатаСостояния КАК ДатаВводаВЭксплуатацию,
	|	ЕСТЬNULL(ВыработкаОС_МУ.Количество, 0) КАК Количество
	|ИЗ
	|	РегистрСведений.бит_му_СостоянияОС КАК СостоянияОС_МУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовСниженияСтоимости),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК ФактОбесценениеОС_МУ
	|		ПО (СостоянияОС_МУ.ОсновноеСредство В (&СписокОС))
	|			И (СостоянияОС_МУ.Организация = &Организация)
	|			И (СостоянияОС_МУ.Состояние = &ВведеноВЭксплуатацию)
	|			И СостоянияОС_МУ.ОсновноеСредство = ФактОбесценениеОС_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовУчета),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК СтоимостьОС_МУ
	|		ПО СостоянияОС_МУ.ОсновноеСредство = СтоимостьОС_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовАмортизации),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК АмортизацияОС_МУ
	|		ПО СостоянияОС_МУ.ОсновноеСредство = АмортизацияОС_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОС_МУ КАК ВыработкаОС_МУ
	|		ПО СостоянияОС_МУ.ОсновноеСредство = ВыработкаОС_МУ.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВыработкаОС_МУ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТекущиеПараметрыАмортизации = РезультатЗапроса.Выгрузить();
	
	Если СтрокаТабличнойЧастиОС = Неопределено Тогда
		ТаблицаДляОбхода = ОсновныеСредства;
	Иначе
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтрокаТабличнойЧастиОС);
		
		ТаблицаДляОбхода = МассивСтрок;
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаДляОбхода Цикл

		ТекущиеПараметрыАмортизации = ТаблицаТекущиеПараметрыАмортизации.Найти(ТекСтрока.ОсновноеСредство, "ОсновноеСредство");
        ТекущиеПараметрыОС			= ТаблицаПараметровОС.Найти(ТекСтрока.ОсновноеСредство				 , "ВНА");
		
		Если ТекущиеПараметрыАмортизации = Неопределено Тогда
			
			// Очистим реквизиты строки ОС.
			ОчиститьРеквизитыСтрокиОС(ТекСтрока);
			
			ТекСтрока.СуммаМодернизации = 0;
			
		Иначе

			Если ТекущиеПараметрыОС = Неопределено Тогда
				// Очистим реквизиты строки ОС.
				ОчиститьРеквизитыСтрокиОС(ТекСтрока);
			Иначе
				
				ТекСтрока.СрокПолезногоИспользования_Старый = ТекущиеПараметрыОС.СрокПолезногоИспользования_ОС;
				ТекСтрока.МетодНачисленияАмортизации_Старый = ТекущиеПараметрыОС.МетодНачисленияАмортизации_ОС;
				ТекСтрока.КоэффициентУскорения_Старый 		= ТекущиеПараметрыОС.КоэффициентУскорения_ОС;
				ТекСтрока.ОбъемПродукцииРабот_Старый 		= ТекущиеПараметрыОС.ПредполагаемыйОбъемПродукции_ОС;
				ТекСтрока.ЛиквидационнаяСтоимость_Старый 	= ТекущиеПараметрыОС.ЛиквидационнаяСтоимость_ОС;
				
				// Если это заполнение всех параметров, тогда
				Если Не НеИзменяемыеПараметры Тогда
					
					ТекСтрока.СрокПолезногоИспользования = ТекущиеПараметрыОС.СрокПолезногоИспользования_ОС;
					ТекСтрока.МетодНачисленияАмортизации = ТекущиеПараметрыОС.МетодНачисленияАмортизации_ОС;
					ТекСтрока.КоэффициентУскорения       = ТекущиеПараметрыОС.КоэффициентУскорения_ОС;
					ТекСтрока.ОбъемПродукцииРабот        = ТекущиеПараметрыОС.ПредполагаемыйОбъемПродукции_ОС;
					ТекСтрока.ЛиквидационнаяСтоимость    = ТекущиеПараметрыОС.ЛиквидационнаяСтоимость_ОС;
					
				КонецЕсли;
				
				ДатаВводаВЭксплуатацию = ТекущиеПараметрыАмортизации.ДатаВводаВЭксплуатацию;
				ФактСрокИспользования  = ?(ДатаВводаВЭксплуатацию = NULL
										  ,0
										  ,бит_му_ВНА.ОпределитьФактическийСрокИспользования(ДатаВводаВЭксплуатацию, Дата));
				
				ТекСтрока.ФактСрокИспользования   = ФактСрокИспользования;
				ТекСтрока.ФактОбъемПродукцииРабот = ТекущиеПараметрыАмортизации.Количество;
				
			КонецЕсли;
			
			ТекСтрока.Стоимость          		   = ТекущиеПараметрыАмортизации.Стоимость;
			ТекСтрока.Амортизация        		   = ТекущиеПараметрыАмортизации.Амортизация;
			ТекСтрока.СуммаФактическогоОбесценения = ТекущиеПараметрыАмортизации.СуммаФактическогоОбесценения;
			
			// Очистим параметры ОС недоступные для текущего метода ничасления амортизации.
			ОчиститьНедоступныеПараметрыОС(ТекСтрока);
			
			// Если это заполнение не изменяемых параметров, тогда
			Если НеИзменяемыеПараметры Тогда
				бит_ОбщегоНазначения.бит_Сообщить("Заполнение параметров для основного средства """ 
												  + ТекСтрока.ОсновноеСредство + """ выполнено."
												  ,СтатусСообщения.Информация);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеПоОсновнымСредствам()

// бит_DKravchenko Функция формирует массив недоступных параметров ОС в зависимости от
// от метода начисления амортизации.
//
// Параметры:
//  ТекущаяСтрока 			 - СтрокаТабличнойЧасти.ОсновныеСредства.
//  ЭтоУправлениеДоступность - Булево, по умолчанию Ложь.
//
// Возвращаемое значение:
//  МассивНедоступныхПараметров - Массив;
//
Функция СформироватьМассивНедоступныхПараметров(ТекущаяСтрока, ЭтоУправлениеДоступность = Ложь) Экспорт
	
	МассивНедоступныхПараметров = Новый Массив;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат МассивНедоступныхПараметров;
	КонецЕсли;
	
	МенеджерПеречисления 		     = Перечисления.бит_му_МетодыНачисленияАмортизации;
	МетодНачисленияАмортизации_Новый = ТекущаяСтрока.МетодНачисленияАмортизации;
	
	Если МетодНачисленияАмортизации_Новый = МенеджерПеречисления.Линейный Тогда
		
		МассивНедоступныхПараметров.Добавить("КоэффициентУскорения");
		МассивНедоступныхПараметров.Добавить("ОбъемПродукцииРабот");
		
		Если ЭтоУправлениеДоступность Тогда
			МассивНедоступныхПараметров.Добавить("ФактОбъемПродукцииРабот");
			МассивНедоступныхПараметров.Добавить("ОстОбъемПродукцииРабот");
		КонецЕсли;
		
	ИначеЕсли МетодНачисленияАмортизации_Новый = МенеджерПеречисления.УменьшаемогоОстатка Тогда
		
		МассивНедоступныхПараметров.Добавить("ОбъемПродукцииРабот");
		
		Если ЭтоУправлениеДоступность Тогда
			МассивНедоступныхПараметров.Добавить("ФактОбъемПродукцииРабот");
			МассивНедоступныхПараметров.Добавить("ОстОбъемПродукцииРабот");
		КонецЕсли;
		
	ИначеЕсли МетодНачисленияАмортизации_Новый = МенеджерПеречисления.Производственный Тогда
		МассивНедоступныхПараметров.Добавить("КоэффициентУскорения");
		
	КонецЕсли;
	
	Возврат МассивНедоступныхПараметров;
	
КонецФункции // СформироватьМассивНедоступныхПараметров()

// бит_DKravchenko Процедура очищает недоступные параметры ОС в зависимости от метода начисления амортизации.
//
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОсновныеСредства.
//
Процедура ОчиститьНедоступныеПараметрыОС(ТекущаяСтрока) Экспорт
	
	// Получим массив недоступных параметров.
	МассивНедоступныхПараметров = СформироватьМассивНедоступныхПараметров(ТекущаяСтрока);
	
	Для Каждого ТекИмяПараметра Из МассивНедоступныхПараметров Цикл
		ТекущаяСтрока[ТекИмяПараметра] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьНедоступныеПараметрыОС()


// бит_DKravchenko Процедура синхронизирует реквизиты строки ОС с аналитикой счетов.
//
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОсновныеСредства.
//  ИмяСубконто   - Строка.
//
Процедура СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, ИмяСубконто) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		
		ТипОС = Тип("СправочникСсылка.ОсновныеСредства");
		
		Для Ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОС Тогда
				 ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.ОсновноеСредство;
			 КонецЕсли; 
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиОС()

//БИТ Тртилек 06.07.2012
Функция ПолучитьДвиженияПоХозрасчетномуРегистру(МассивДокументовБУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт3,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт3,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументРСБУ,
	               |	ХозрасчетныйОборотыДтКт.НомерСтроки КАК НомерСтрокиДвижений
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Запись, СчетДт В ИЕРАРХИИ (&Счет0101, &Счет0301), , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_му_КомплектацияОС КАК бит_му_КомплектацияОС
	               |		ПО ХозрасчетныйОборотыДтКт.Регистратор = бит_му_КомплектацияОС.ДокументРСБУ
	               |			И ХозрасчетныйОборотыДтКт.СубконтоДт1 = бит_му_КомплектацияОС.АналитикаРСБУ
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивДокументов)
	               |	И (ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.МодернизацияОС
	               |			ИЛИ ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС)
	               |	И бит_му_КомплектацияОС.Регистратор ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.СчетДт,
	               |	ХозрасчетныйОборотыДтКт.СчетКт,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт3,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт2,
	               |	ХозрасчетныйОборотыДтКт.СубконтоКт3,
	               |	ХозрасчетныйОборотыДтКт.СуммаОборот,
	               |	ХозрасчетныйОборотыДтКт.Регистратор,
	               |	ХозрасчетныйОборотыДтКт.НомерСтроки
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, , Запись, , , , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	               |ГДЕ
	               |	ХозрасчетныйОборотыДтКт.Регистратор В(&МассивДокументов)
	               |	И НЕ(ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.МодернизацияОС
	               |				ИЛИ ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС)
	               |	И (ХозрасчетныйОборотыДтКт.СубконтоДт1 В ИЕРАРХИИ (&ОбъектСтроительства)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоДт2 В ИЕРАРХИИ (&ОбъектСтроительства)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоДт3 В ИЕРАРХИИ (&ОбъектСтроительства)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт1 В ИЕРАРХИИ (&ОбъектСтроительства)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт2 В ИЕРАРХИИ (&ОбъектСтроительства)
	               |			ИЛИ ХозрасчетныйОборотыДтКт.СубконтоКт3 В ИЕРАРХИИ (&ОбъектСтроительства))";
				   
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументовБУ);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет0101", ПланыСчетов.Хозрасчетный.ОСвОрганизации);
	Запрос.УстановитьПараметр("Счет0301", ПланыСчетов.Хозрасчетный.МЦвОрганизации);
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Запрос.УстановитьПараметр("ОбъектСтроительства", ОсновноеСредство.Объект);
	ИначеЕсли ЗначениеЗаполнено(ОсновноеСредствоICLL) Тогда
		Запрос.УстановитьПараметр("ОбъектСтроительства", ОсновноеСредствоICLL.Объект);
	КонецЕсли;
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений;

КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// бит_DKravchenko Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СписокОС = Новый Массив;
	СписокОС.Добавить(ОсновноеСредство);
	
	СтруктураШапкиДокумента.Вставить("СписокОС", СписокОС);
	
КонецПроцедуры

// бит_DKravchenko Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Организация");	

	// Теперь вызовем общую процедуру проверки.
	бит_ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// бит_DKravchenko Процедура проверяет правильность заполнения строк таблиц документа.
//
// Параметры: 
//  СтруктураТаблиц			- Структура, таблицы значений, содержащая данные для проведения и проверки.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ОсновноеСредство");
	СтруктураОбязательныхПолей.Вставить("СуммаМодернизации");
	СтруктураОбязательныхПолей.Вставить("СчетНезавершенногоСтроительства");

	// Теперь вызовем общую процедуру проверки.
	бит_ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект
														  ,"ОсновныеСредства"
														  ,СтруктураОбязательныхПолей
														  ,Отказ
														  ,Заголовок);
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("ОсновноеСредство");
	
	// Проверим наличие дублей в табличной части "ДокументыПланирования".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 ,"ОсновныеСредства"
																	 ,СтруктураНеДублирующихсяПолей
																	 ,Отказ
																	 ,Заголовок);
																	 
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоОС = СтруктураТаблиц.ОС;
	КолонкиОС	= ТаблицаПоОС.Колонки;
	ВидКласса   = СтруктураШапкиДокумента.ВидКласса_ОС;
	
	// Проверим таблицу ОС по строчно.
	Для Каждого ТекСтрока Из ТаблицаПоОС Цикл
		
		ТекущийВидКласса = ТекСтрока.ВидКласса;
			
		Если ВидКласса <> ТекущийВидКласса Тогда
			
			ТекстСообщения = "В строке № "
							 + ТекСтрока.НомерСтроки
							 + " табличной части ""Основные средства"" вид класса """
							 + ТекущийВидКласса
							 + """ основного средства """
							 + ТекСтрока.ОсновноеСредство
							 + """ не соответствует виду операции документа!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);									
			
		Иначе	
			// Проверим заполненность значений строки.
			бит_му_ВНА.ПроверитьСтрокуТаблицыОС(ТекСтрока, КолонкиОС, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицДокумента()

// бит_DKravchenko Функция готовит таблицы документа для проведения
//
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений
//
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"			  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("МоментВремени"		  , МоментВремени());
	Запрос.УстановитьПараметр("Ссылка"				  , СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СписокОС"			  , СтруктураШапкиДокумента.СписокОС);
	Запрос.УстановитьПараметр("СостояниеПринятоКУчету", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета"  , Перечисления.бит_му_СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПараметрСчетУчета"	  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
	Запрос.УстановитьПараметр("ПараметрКласс"	  	  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	Запрос.УстановитьПараметр("ПараметрФинАренда"	  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ФинансоваяАренда_ОС);
	Запрос.УстановитьПараметр("ПустойПараметр"		  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыОС_МУ.ОсновноеСредство,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОС_МУ.Параметр = &ПараметрСчетУчета
	|				ТОГДА ПараметрыОС_МУ.ЗначениеПараметра
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК СчетУчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОС_МУ.Параметр = &ПараметрКласс
	|				ТОГДА ПараметрыОС_МУ.ЗначениеПараметра.ВидКласса
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВидКласса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОС_МУ.Параметр = &ПараметрФинАренда
	|				ТОГДА ПараметрыОС_МУ.ЗначениеПараметра
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОбъектВФинансовойАренде
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)
	|				И (Параметр = &ПараметрСчетУчета
	|					ИЛИ Параметр = &ПараметрКласс
	|					ИЛИ Параметр = &ПараметрФинАренда)) КАК ПараметрыОС_МУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыОС_МУ.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредства.НомерСтроки,
	|	ОсновныеСредства.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.СрокПолезногоИспользования_Старый <> ОсновныеСредства.СрокПолезногоИспользования
	|			ТОГДА ОсновныеСредства.СрокПолезногоИспользования
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК СрокПолезногоИспользования,
	|	ОсновныеСредства.СуммаМодернизации,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.МетодНачисленияАмортизации_Старый <> ОсновныеСредства.МетодНачисленияАмортизации
	|			ТОГДА ОсновныеСредства.МетодНачисленияАмортизации
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК МетодНачисленияАмортизации,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.КоэффициентУскорения_Старый <> ОсновныеСредства.КоэффициентУскорения
	|			ТОГДА ОсновныеСредства.КоэффициентУскорения
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК КоэффициентУскорения,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.ОбъемПродукцииРабот_Старый <> ОсновныеСредства.ОбъемПродукцииРабот
	|			ТОГДА ОсновныеСредства.ОбъемПродукцииРабот
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК ПредполагаемыйОбъемПродукции,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.ЛиквидационнаяСтоимость_Старый <> ОсновныеСредства.ЛиквидационнаяСтоимость
	|			ТОГДА ОсновныеСредства.ЛиквидационнаяСтоимость
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК ЛиквидационнаяСтоимость,
	|	ПринятыеОС_МУ.ДатаСостояния КАК ДатаПринятия,
	|	ВыбывшиеОС_МУ.ДатаСостояния КАК ДатаВыбытия,
	|	ТаблицаПараметров.СчетУчета КАК СчетДт,
	|	ТаблицаПараметров.ОсновноеСредство КАК СубконтоДт1,
	|	АналитикаУчетаОС_МУ.Субконто2 КАК СубконтоДт2,
	|	АналитикаУчетаОС_МУ.Субконто3 КАК СубконтоДт3,
	|	АналитикаУчетаОС_МУ.Субконто4 КАК СубконтоДт4,
	|	ОсновныеСредства.СчетНезавершенногоСтроительства КАК СчетКт,
	|	ОсновныеСредства.Субконто1 КАК СубконтоКт1,
	|	ОсновныеСредства.Субконто2 КАК СубконтоКт2,
	|	ОсновныеСредства.Субконто3 КАК СубконтоКт3,
	|	ОсновныеСредства.Субконто4 КАК СубконтоКт4,
	|	ТаблицаПараметров.ВидКласса,
	|	ТаблицаПараметров.ОбъектВФинансовойАренде
	|ИЗ
	|	Документ.бит_му_МодернизацияОС.ОсновныеСредства КАК ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ПринятыеОС_МУ
	|		ПО ОсновныеСредства.ОсновноеСредство = ПринятыеОС_МУ.ОсновноеСредство
	|			И (ПринятыеОС_МУ.Организация = &Организация)
	|			И (ПринятыеОС_МУ.Состояние = &СостояниеПринятоКУчету)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ВыбывшиеОС_МУ
	|		ПО ОсновныеСредства.ОсновноеСредство = ВыбывшиеОС_МУ.ОсновноеСредство
	|			И (ВыбывшиеОС_МУ.Организация = &Организация)
	|			И (ВыбывшиеОС_МУ.Состояние = &СостояниеСнятоСУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|					&МоментВремени,
	|					Счет В
	|						(ВЫБРАТЬ
	|							ТаблицаПараметров.СчетУчета
	|						ИЗ
	|							ТаблицаПараметров КАК ТаблицаПараметров),
	|					,
	|					Организация = &Организация
	|						И Субконто1 В (&СписокОС)) КАК АналитикаУчетаОС_МУ
	|			ПО ТаблицаПараметров.ОсновноеСредство = АналитикаУчетаОС_МУ.Субконто1
	|				И ТаблицаПараметров.СчетУчета = АналитикаУчетаОС_МУ.Счет
	|		ПО ОсновныеСредства.ОсновноеСредство = ТаблицаПараметров.ОсновноеСредство
	|ГДЕ
	|	ОсновныеСредства.Ссылка = &Ссылка
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров";
	
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ОС", ТаблицаПоОС);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицуБДДС()

// бит_DKravchenko Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ТаблицаДанных  = СтруктураТаблиц.ОС;
	
	// Движения по регистру сведений "бит_му_СобытияОС".
	НаборЗаписей   = Движения.бит_му_СобытияОС;
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Запись = ТаблицаЗаписей.Добавить();
		Запись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
	КонецЦикла;
	
	Событие = Перечисления.бит_му_СобытияОС.Модернизация;
	
	ТаблицаЗаписей.ЗаполнитьЗначения(ДатаДока	   , "Период");
	ТаблицаЗаписей.ЗаполнитьЗначения(Истина		   , "Активность");
	ТаблицаЗаписей.ЗаполнитьЗначения(ТекОрганизация, "Организация");
	ТаблицаЗаписей.ЗаполнитьЗначения(Событие	   , "Событие");
		
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	////БИТ Тртилек 08.08.2012		
	//Если ВидОперации = Перечисления.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС Тогда
	//	
	бит_му_ВыполнитьДвиженияПоРегиструКомплектацияОС(СтруктураШапкиДокумента, ТаблицаДанных, СтруктураКурсыВалют);
	//	 
	//КонецЕсли;
	/////БИТ Тртилек
	
	// Движения по регистру сведений "бит_му_ПараметрыОС".
	НаборЗаписей   = Движения.бит_му_ПараметрыОС;
	
	ВидыПараметров = бит_му_ВНА.ПолучитьВидыПараметров(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОсновныеСредства);
	бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписей, СтруктураШапкиДокумента, ТаблицаДанных, ВидыПараметров, "ОС");
	
	// Движение по регистру бухгалтерии "бит_Дополнительный_2 (Международный)".
	НаборЗаписей = Движения.бит_Дополнительный_2;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийМодернизацияОС.ОсновныеСредства Тогда
		СодержаниеДвижения = "Модернизация ОС";
	//БИТ Тртилек 07.08.2012
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС И ОсновныеСредства.Количество() > 0 Тогда
		Если ТаблицаДанных[0].ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность Тогда
			СодержаниеДвижения = "Модернизация ИС";
		Иначе
			СодержаниеДвижения = "Модернизация ОС";
		КонецЕсли;
	///БИТ Тртилек
	Иначе
		СодержаниеДвижения = "Модернизация ИС";
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// ДТ СчетУчетаОС КТ СчетНезавершенногоСтроительства СуммаМодернизации
		СоздатьЗаписьПоНачислениюМодернизации(СтруктураШапкиДокумента
											 ,НаборЗаписей
											 ,СтрокаТаблицы
											 ,СтруктураКурсыВалют
											 ,СодержаниеДвижения);
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// бит_DKravchenko Функция получает структуру курсов валют.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Отказ					- Булево.
//  Заголовок				- Строка.
//
// Возвращаемое значение:
//  СтруктураКурсыВалют - Структура.
//
Функция ПолучитьСтруктуруКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВидыКурсов = Новый Структура("Упр, Регл, МУ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект
																			  ,СтруктураШапкиДокумента.Дата
																			  ,ВидыКурсов);
	СтруктураКурсыВалют.Вставить("Документ", СтруктураКурсыВалют.МУ);
	
	// Получим валюту международного учета.
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	
	Если Не ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = "Для организации """ + СтруктураШапкиДокумента.Организация + """ не указана валюта международного учета!";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,Заголовок, Отказ);
		
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // ПолучитьСтруктуруКурсовВалют()

// бит_DKravchenko Процедура формирует проводку по модернизации.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СодержаниеДвижения		- Строка.
//
Процедура СоздатьЗаписьПоНачислениюМодернизации(СтруктураШапкиДокумента
											   ,НаборЗаписей
											   ,СтрокаТаблицы
											   ,СтруктураКурсыВалют
											   ,СодержаниеДвижения)
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетДт
										  ,СтрокаТаблицы.СчетКт
										  ,СтрокаТаблицы.СуммаМодернизации
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СубконтоДт","СубконтоКт",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	
КонецПроцедуры // СоздатьЗаписьПоНачислениюМодернизации()

// БИТ Тртилек 06.08.2012
//Аналогичная функция, только для консолидированного 
Функция ПодготовитьТаблицыДокументаКонсолидированный(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"			  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("МоментВремени"		  , МоментВремени());
	Запрос.УстановитьПараметр("Ссылка"				  , СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СписокОС"			  , СтруктураШапкиДокумента.СписокОС);
	Запрос.УстановитьПараметр("СостояниеПринятоКУчету", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета"  , Перечисления.бит_му_СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПараметрСчетУчета"	  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
	Запрос.УстановитьПараметр("ПараметрКласс"	  	  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	Запрос.УстановитьПараметр("ПараметрФинАренда"	  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ФинансоваяАренда_ОС);
	Запрос.УстановитьПараметр("ПустойПараметр"		  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыОС_МУ.ОсновноеСредство,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОС_МУ.Параметр = &ПараметрСчетУчета
	|				ТОГДА ПараметрыОС_МУ.ЗначениеПараметра
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК СчетУчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОС_МУ.Параметр = &ПараметрКласс
	|				ТОГДА ПараметрыОС_МУ.ЗначениеПараметра.ВидКласса
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВидКласса,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОС_МУ.Параметр = &ПараметрФинАренда
	|				ТОГДА ПараметрыОС_МУ.ЗначениеПараметра
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОбъектВФинансовойАренде
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)
	|				И (Параметр = &ПараметрСчетУчета
	|					ИЛИ Параметр = &ПараметрКласс
	|					ИЛИ Параметр = &ПараметрФинАренда)) КАК ПараметрыОС_МУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыОС_МУ.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредства.НомерСтроки,
	|	ОсновныеСредства.ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.Ссылка.бит_СрокПолезногоИспользованияСтар <> ОсновныеСредства.Ссылка.бит_НовыйСрокИспользования
	|			ТОГДА ОсновныеСредства.Ссылка.бит_НовыйСрокИспользования
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК СрокПолезногоИспользования,
	|	ОсновныеСредства.Сумма КАК СуммаМодернизации,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.Ссылка.бит_МетодНачисленияАмортизации <> ОсновныеСредства.Ссылка.бит_НовыйМетодНачисленияАмортизации
	|			ТОГДА ОсновныеСредства.Ссылка.бит_НовыйМетодНачисленияАмортизации
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК МетодНачисленияАмортизации,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.Ссылка.бит_КоэффициентУскорения <> ОсновныеСредства.Ссылка.бит_НовыйКоэффициентУскорения
	|			ТОГДА ОсновныеСредства.Ссылка.бит_НовыйКоэффициентУскорения
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК КоэффициентУскорения,
	|	ВЫБОР
	|		КОГДА ОсновныеСредства.Ссылка.бит_ЛиквидационнаяСтоимость <> ОсновныеСредства.Ссылка.бит_НоваяЛиквидационнаяСтоимость
	|			ТОГДА ОсновныеСредства.Ссылка.бит_НоваяЛиквидационнаяСтоимость
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК ЛиквидационнаяСтоимость,
	|	ПринятыеОС_МУ.ДатаСостояния КАК ДатаПринятия,
	|	ВыбывшиеОС_МУ.ДатаСостояния КАК ДатаВыбытия,
	|	ТаблицаПараметров.СчетУчета КАК СчетДт,
	|	ТаблицаПараметров.ОсновноеСредство КАК СубконтоДт1,
	|	АналитикаУчетаОС_МУ.Субконто2 КАК СубконтоДт2,
	|	АналитикаУчетаОС_МУ.Субконто3 КАК СубконтоДт3,
	|	АналитикаУчетаОС_МУ.Субконто4 КАК СубконтоДт4,
	|	ОсновныеСредства.КорСчетМСФО КАК СчетКт,
	|	ОсновныеСредства.Субконто1 КАК СубконтоКт1,
	|	ОсновныеСредства.Субконто2 КАК СубконтоКт2,
	|	ОсновныеСредства.Субконто3 КАК СубконтоКт3,
	|	ОсновныеСредства.Субконто4 КАК СубконтоКт4,
	|	ТаблицаПараметров.ВидКласса,
	|	ТаблицаПараметров.ОбъектВФинансовойАренде,
	|	ОсновныеСредства.СоставОС,
	|	ОсновныеСредства.СчетУчетаРСБУ,
	|	ОсновныеСредства.ДокументРСБУ
	|ИЗ
	|	Документ.бит_му_МодернизацияОС.ОсновныеСредстваКонсолидированные КАК ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ПринятыеОС_МУ
	|		ПО ОсновныеСредства.ОсновноеСредство = ПринятыеОС_МУ.ОсновноеСредство
	|			И (ПринятыеОС_МУ.Организация = &Организация)
	|			И (ПринятыеОС_МУ.Состояние = &СостояниеПринятоКУчету)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ВыбывшиеОС_МУ
	|		ПО ОсновныеСредства.ОсновноеСредство = ВыбывшиеОС_МУ.ОсновноеСредство
	|			И (ВыбывшиеОС_МУ.Организация = &Организация)
	|			И (ВыбывшиеОС_МУ.Состояние = &СостояниеСнятоСУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|					&МоментВремени,
	|					Счет В
	|						(ВЫБРАТЬ
	|							ТаблицаПараметров.СчетУчета
	|						ИЗ
	|							ТаблицаПараметров КАК ТаблицаПараметров),
	|					,
	|					Организация = &Организация
	|						И Субконто1 В (&СписокОС)) КАК АналитикаУчетаОС_МУ
	|			ПО ТаблицаПараметров.ОсновноеСредство = АналитикаУчетаОС_МУ.Субконто1
	|				И ТаблицаПараметров.СчетУчета = АналитикаУчетаОС_МУ.Счет
	|		ПО ОсновныеСредства.ОсновноеСредство = ТаблицаПараметров.ОсновноеСредство
	|ГДЕ
	|	ОсновныеСредства.Ссылка = &Ссылка
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров";
	
	ТаблицаПоОС = Запрос.Выполнить().Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ОС", ТаблицаПоОС);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицуБДДС()

Процедура ПроверитьПринятиеОСКУчету(Отказ, СтруктураШапкиДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_КомплектацияОС.ОС
	               |ИЗ
	               |	РегистрНакопления.бит_му_КомплектацияОС КАК бит_му_КомплектацияОС
	               |ГДЕ
	               // 1c-izhtc ChuckNorris 15.03.2016 ( 
	               |	(бит_му_КомплектацияОС.Регистратор ССЫЛКА Документ.бит_му_ПринятиеКУчетуОС
                   |			ИЛИ бит_му_КомплектацияОС.Регистратор ССЫЛКА Документ.ОперацияБух)
	               // 1c-izhtc ChuckNorris 15.03.2016 ) 
	               |	И бит_му_КомплектацияОС.Период < &Период
	               |	И бит_му_КомплектацияОС.ОС = &ОсновноеСредство";
				   
	Запрос.УстановитьПараметр("Период", Дата);				   
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		Если Запрос.Выполнить().Пустой() Тогда
			Сообщить("Основное средство не принято к учету. Движения сформированы не будут.");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновноеСредствоICLL) Тогда
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредствоICLL);
		Если Запрос.Выполнить().Пустой() Тогда
			Сообщить("Основное средство ICLL не принято к учету. Движения сформированы не будут.");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// бит_DKravchenko Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	// Подготовим структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	// Проверим правильность заполнения шапки документа.
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьПринятиеОСКУчету(Отказ, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТаблицы(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Движения по регистру накопления "бит_му_КомплектацияОС".
	ТаблицаДвижений = Движения.бит_му_КомплектацияОС.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого ТекСтр Из ОсновныеСредства Цикл
		
		Если ТекСтр.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись                  = ТаблицаДвижений.Добавить();
		НоваяЗапись.Период			 = СтруктураШапкиДокумента.Дата;
		НоваяЗапись.ВидДвижения      = ВидДвиженияНакопления.Приход;
		НоваяЗапись.Организация      = Организация;
		НоваяЗапись.ОС               = ТекСтр.ОсновноеСредство;
		НоваяЗапись.Сумма            = ТекСтр.Сумма;
		НоваяЗапись.СоставОС         = ТекСтр.СоставОСМСФОНовый;
		НоваяЗапись.СчетРСБУ         = ТекСтр.СчетДтРСБУ;
		НоваяЗапись.ДокументРСБУ     = ТекСтр.ДокументРСБУ;
		НоваяЗапись.АналитикаРСБУ    = ТекСтр.СубконтоДт1;
		
		НоваяЗапись                  = ТаблицаДвижений.Добавить();
		НоваяЗапись.Период			 = СтруктураШапкиДокумента.Дата;
		НоваяЗапись.ВидДвижения      = ВидДвиженияНакопления.Расход;
		НоваяЗапись.Организация      = Организация;
		НоваяЗапись.ОС               = ТекСтр.ОсновноеСредство;
		НоваяЗапись.Сумма            = ТекСтр.Сумма;
		НоваяЗапись.СоставОС         = ТекСтр.СоставОСМСФОСтарый;
		НоваяЗапись.СчетРСБУ         = ТекСтр.СчетКтРСБУ;
		НоваяЗапись.АналитикаРСБУ    = ТекСтр.СубконтоКт1;

		
	КонецЦикла;
	
	Движения.бит_му_КомплектацияОС.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_му_КомплектацияОС.ДобавитьДвижение();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения"
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// бит_DKravchenko Процедура - обработчик события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ОбщегоНазначенияБПСобытия.ПередЗаписьюДокументаДляУдаленияДвиженийПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения); //izhtc-Kir 02.09.2015
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// бит_DKravchenko Процедура очищает реквизиты строки табличной части ОС.
//
// Параметры:
//  СтрокаТабличнойЧастиОС - СтрокаТабличнойЧасти.ОсновныеСредства.
//
Процедура ОчиститьРеквизитыСтрокиОС(СтрокаТабличнойЧастиОС)
	
	МассивИмен = Новый Массив; 
	МассивИмен.Добавить("СрокПолезногоИспользования_Старый"); 
	МассивИмен.Добавить("МетодНачисленияАмортизации_Старый");
	МассивИмен.Добавить("КоэффициентУскорения_Старый");
	МассивИмен.Добавить("ОбъемПродукцииРабот_Старый");
	МассивИмен.Добавить("ЛиквидационнаяСтоимость_Старый");
	МассивИмен.Добавить("СрокПолезногоИспользования");
	МассивИмен.Добавить("ФактСрокИспользования");
	МассивИмен.Добавить("Стоимость");
	МассивИмен.Добавить("Амортизация");
	МассивИмен.Добавить("СуммаФактическогоОбесценения");
	МассивИмен.Добавить("МетодНачисленияАмортизации");
	МассивИмен.Добавить("КоэффициентУскорения");
	МассивИмен.Добавить("ОбъемПродукцииРабот");
	МассивИмен.Добавить("ФактОбъемПродукцииРабот");
	МассивИмен.Добавить("ЛиквидационнаяСтоимость");
	
	Для Каждого ТекИмя Из МассивИмен Цикл
		СтрокаТабличнойЧастиОС[ТекИмя] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРеквизитыСтрокиОС()

Процедура бит_му_ВыполнитьДвиженияПоРегиструКомплектацияОС(СтруктураШапкиДокумента, ТаблицаДанных, СтруктураКурсыВалют)
	
	// Движения по регистру накопления "бит_му_КомплектацияОС".
	ТаблицаДвижений = Движения.бит_му_КомплектацияОС.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого ТекСтр Из ТаблицаДанных Цикл
		
		НоваяЗапись = ТаблицаДвижений.Добавить();
		НоваяЗапись.Период			 = СтруктураШапкиДокумента.Дата;
		НоваяЗапись.ВидДвижения      = ВидДвиженияНакопления.Расход;
		НоваяЗапись.ОС               = ТекСтр.ОсновноеСредство;
		НоваяЗапись.Сумма            = ТекСтр.СуммаМодернизации;
		НоваяЗапись.СоставОС         = ТекСтр.СоставОС;
		НоваяЗапись.СчетРСБУ         = ТекСтр.СчетУчетаРСБУ;
		НоваяЗапись.ДокументРСБУ     = ТекСтр.ДокументРСБУ;
		НоваяЗапись.АналитикаРСБУ    = ТекСтр.СубконтоКт1;
		
	КонецЦикла;
	
	Движения.бит_му_КомплектацияОС.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_му_КомплектацияОС.ДобавитьДвижение();
	
КонецПроцедуры

Процедура ПересчитатьОбщуюСуммуМодернизации() Экспорт 
	МассивСумм = ОсновныеСредства.ВыгрузитьКолонку("Сумма");
	бит_СуммаМодернизации = 0;	
	Для Каждого Элемент Из МассивСумм Цикл
		бит_СуммаМодернизации = бит_СуммаМодернизации + Элемент;
	КонецЦикла;
КонецПроцедуры

// бит Тртилек 20.08.2012 Процедура проверяет табличную часть на поля, обязательные для заполнения
Процедура ПроверитьЗаполнениеТаблицы(Отказ)
	
	Для Каждого Строка Из ОсновныеСредства Цикл
		Если НЕ ЗначениеЗаполнено(Строка.СоставОСМСФОНовый) Тогда
			Сообщить("В строке №" + Строка.НомерСтроки + " не заполнен новый состав ОС. Документ проведен не будет");
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.СоставОСМСФОСтарый) Тогда
			Сообщить("В строке №" + Строка.НомерСтроки + " не заполнен старый состав ОС. Документ проведен не будет");
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКоличествоСубконтоМУ = 4;