
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_вго_ПодтверждениеСверкиВГО";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
    
    МетаданныеОбъекта = Метаданные.Документы.бит_вго_ПодтверждениеСверкиВГО;
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверкиДляПорталаВГО(Объект);
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект." + МетаданныеОбъекта.Имя));
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ);  	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	// Открытие нового 
   	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьКэшЗначений();
		
		// Установка периода сверки 
		бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.ДатаНачала, 
															Объект.ДатаОкончания, 
															ПериодичностьСверкиВГО, 
															Объект.ПредставлениеПериодаСверкиВГО);
															
		СтруктураНастройки = РегистрыСведений.бит_вго_НастройкиПроведенияСверкиВГО.ПолучитьПоследнее(Объект.Дата, Новый Структура("Настройка", ПланыВидовХарактеристик.бит_вго_ВидыНастроекСверкиВГО.КонтролироватьДопустимоеРасхождение));
		Объект.КонтролироватьДопустимоеРасхождение    = СтруктураНастройки.Значение;
		СтруктураНастройки = РегистрыСведений.бит_вго_НастройкиПроведенияСверкиВГО.ПолучитьПоследнее(Объект.Дата, Новый Структура("Настройка", ПланыВидовХарактеристик.бит_вго_ВидыНастроекСверкиВГО.КонтролироватьДопустимоеРасхождениеВзаиморасчеты));
		Объект.КонтролироватьДопустимоеРасхождениеВзм = СтруктураНастройки.Значение;
		
		УстановитьНастройкиДоступностиЭлементов();
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПоРасхождению();
	УстановитьВидимостьДоступностьПоРегБух();
	
	// Дата запрета редактирования	
	ЗапрещеноРедактировать = Ложь;
	Если Не Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПараметрыСверки = Новый Структура("Организация1, Организация2", Объект.Организация1, Объект.Организация2);	
		бит_вго_Сервер.ПроверитьВозможностьРедактированияДокументовСверкиВГО(Объект.ДатаНачала, ПараметрыСверки, ЗапрещеноРедактировать);
		
		ЭтаФорма.ТолькоПросмотр = ЗапрещеноРедактировать;
		// Элементы.КомандаНастроитьПериод.Доступность = Не ЗапрещеноРедактировать;
		Элементы.РассчитатьРасхождение.Доступность 	= Не ЗапрещеноРедактировать;
	
	КонецЕсли;
		     	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("РегистрБухгалтерии");
	мКэшРеквизитовФормы.Вставить("Организация1");
	мКэшРеквизитовФормы.Вставить("Контрагент1");
	мКэшРеквизитовФормы.Вставить("Организация2");
	мКэшРеквизитовФормы.Вставить("Контрагент2");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьКэшЗначений();
	УстановитьНастройкиДоступностиЭлементов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РассчитатьРасхождениеСервер(Отказ, Истина);
		
		Если Не Отказ Тогда		
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СуммаАбсолютногоРасхождения"	  , Объект.СуммаАбсолютногоРасхождения);
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СуммаАбсолютногоРасхожденияВзм", Объект.СуммаАбсолютногоРасхожденияВзм);
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ДопустимоеРасхождение"	, Объект.ДопустимоеРасхождение);
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ДопустимоеРасхождениеВзм", Объект.ДопустимоеРасхождениеВзм);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	ПараметрыОповещения = Новый Структура("Организация, Контрагент, Ссылка"
										, Объект.Организация1, Объект.Контрагент2, Объект.Ссылка);
	Оповестить("ИзмененДокументСверкиВГО", ПараметрыОповещения);
		
	Модифицированность = Ложь;
	
КонецПроцедуры // ПослеЗаписи()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "НачалоВыбора" поля ввода "РегистрБухгалтерии".
// 
&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(фКэшЗначений.ВидОбъектаРегистрБухгалтерии);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", фКэшЗначений.СписокДоступныхРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);
	
КонецПроцедуры // РегистрБухгалтерииНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "РегистрБухгалтерии".
// 
&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьПоРегБух();
	
КонецПроцедуры // РегистрБухгалтерииПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация1".
// 
&НаКлиенте
Процедура Организация1ПриИзменении(Элемент)
	                        
	ТекущаяОрганизация = Объект.Организация1;
	
	Если мКэшРеквизитовФормы.Организация1 <> ТекущаяОрганизация Тогда
		
		Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
			
			СобственныеКонтрагенты = бит_ОбщегоНазначения.ПолучитьСписокСобственныхКонтрагентовПоОрганизации(ТекущаяОрганизация);
			Если СобственныеКонтрагенты.Количество() = 1 Тогда
				Объект.Контрагент1 = СобственныеКонтрагенты[0].Значение;			
			Иначе
				Объект.Контрагент1 = фКэшЗначений.ПустойКонтрагент;
			КонецЕсли;

		Иначе
			
			Объект.Контрагент1 = фКэшЗначений.ПустойКонтрагент;
			
		КонецЕсли;
		
		мКэшРеквизитовФормы.Организация1 = ТекущаяОрганизация;
		
	КонецЕсли;
	
КонецПроцедуры // Организация1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация2".
// 
&НаКлиенте
Процедура Организация2ПриИзменении(Элемент)
	
	ТекущаяОрганизация = Объект.Организация2;
	
	Если мКэшРеквизитовФормы.Организация2 <> ТекущаяОрганизация Тогда
		
		Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
			
			СобственныеКонтрагенты = бит_ОбщегоНазначения.ПолучитьСписокСобственныхКонтрагентовПоОрганизации(ТекущаяОрганизация);
			Если СобственныеКонтрагенты.Количество() = 1 Тогда
				Объект.Контрагент2 = СобственныеКонтрагенты[0].Значение;			
			Иначе
				Объект.Контрагент2 = фКэшЗначений.ПустойКонтрагент;
			КонецЕсли;

		Иначе
			
			Объект.Контрагент2 = фКэшЗначений.ПустойКонтрагент;
			
		КонецЕсли;
		
		мКэшРеквизитовФормы.Организация1 = ТекущаяОрганизация;
		
	КонецЕсли;
	
КонецПроцедуры // Организация2ПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Контрагент1".
// 
&НаКлиенте
Процедура Контрагент1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораКонтрагента(Объект.Организация1, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // Контрагент1НачалоВыбора()
              
// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент1".
// 
&НаКлиенте
Процедура Контрагент1ПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Организация1) Тогда
		
		ТекущийКонтрагент = Объект.Контрагент1;
		
		Если мКэшРеквизитовФормы.Контрагент1 <> ТекущийКонтрагент Тогда
			Объект.Организация1 = бит_ОбщегоНазначения.ПолучитьСобственнуюОрганизациюПоКонтрагенту(ТекущийКонтрагент);
			мКэшРеквизитовФормы.Контрагент1 = ТекущийКонтрагент;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Контрагент1ПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Контрагент2".
// 
&НаКлиенте
Процедура Контрагент2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораКонтрагента(Объект.Организация2, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры // Контрагент2НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент2".
// 
&НаКлиенте
Процедура Контрагент2ПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Организация2) Тогда
		
		ТекущийКонтрагент = Объект.Контрагент2;
		
		Если мКэшРеквизитовФормы.Контрагент2 <> ТекущийКонтрагент Тогда
			Объект.Организация2 = бит_ОбщегоНазначения.ПолучитьСобственнуюОрганизациюПоКонтрагенту(ТекущийКонтрагент);
			мКэшРеквизитовФормы.Контрагент2 = ТекущийКонтрагент;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // Контрагент2ПриИзменении()

#Область ПроцедурыИФункцииВыбораИнтервала
              
&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.ДатаНачала, 
														Объект.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Объект.ПредставлениеПериодаСверкиВГО);
	
КонецПроцедуры // ПериодДатаНачалаПриИзменении()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТемпПредставлениеПериода = Объект.ПредставлениеПериодаСверкиВГО;
		
	бит_РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериода(Элемент, 
												ЭтаФорма, 
												СтандартнаяОбработка, 
												Объект.ДатаНачала, 
												ПериодичностьСверкиВГО, 
												Объект.ПредставлениеПериодаСверкиВГО);
	
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.ДатаНачала, 
														Объект.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Объект.ПредставлениеПериодаСверкиВГО);

	Если ТемпПредставлениеПериода <> Объект.ПредставлениеПериодаСверкиВГО Тогда
		Модифицированность = Истина;	
	КонецЕсли;                      	
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГОНачалоВыбора()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГОРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ПредставлениеПериодаСверкиВГО) Тогда
		
		Объект.ДатаНачала = бит_Бюджетирование.ПолучитьПериодПоСдвигу(Объект.ДатаНачала, Направление, ПериодичностьСверкиВГО);
		бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.ДатаНачала, 
															Объект.ДатаОкончания, 
															ПериодичностьСверкиВГО, 
															Объект.ПредставлениеПериодаСверкиВГО);
		
		Модифицированность = Истина;	
				
	КонецЕсли;	
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГОРегулирование()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГООчистка()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура РассчитатьРасхождение(Команда)
	
	РассчитатьРасхождениеСервер();
	
КонецПроцедуры // РассчитатьРасхождение()
       
&НаКлиенте
Процедура ОтчетСтатусСверкиВГО(Команда)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация1"		 , Объект.Организация1);
	ПараметрыФормы.Вставить("Контрагент1" 		 , Объект.Контрагент1);
	ПараметрыФормы.Вставить("Организация2"		 , Объект.Организация2);
	ПараметрыФормы.Вставить("Контрагент2" 		 , Объект.Контрагент2);
	ПараметрыФормы.Вставить("Период"			 , Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания));
	ПараметрыФормы.Вставить("РегистрБухгалтерии" , Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("Сценарий" 			 , Объект.Сценарий);

	ПараметрыФормы.Вставить("СформироватьприОткрытии", Истина);
	ОткрытьФорму("Отчет.бит_вго_СтатусСверкиВГО.Форма.ФормаОтчетаУправляемая", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ОтчетСтатусСверкиВГО()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	МетаданныеОбъекта = Метаданные.Документы.бит_вго_ПодтверждениеСверкиВГО;
	фКэшЗначений.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
	
	фКэшЗначений.Вставить("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	фКэшЗначений.Вставить("ВидОбъектаРегистрБухгалтерии" , Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	фКэшЗначений.Вставить("СписокДоступныхРегистров", бит_вго_Сервер.СформироватьСписокДоступныхРегистровБухгалтерииДляСверкиВГО());
 	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавлиант видимость доступность элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьВидимостьДоступностьПоРасхождению()
	
	// Элементы.ГруппаРасхождениеВзаиморасчеты.Видимость = Объект.КонтролироватьДопустимоеРасхождениеВзм;
	// Элементы.ДопустимоеРасхождение.Видимость 	 	  = Объект.КонтролироватьДопустимоеРасхождение;
                 	
КонецПроцедуры // УстановитьВидимостьДоступностьПоРасхождению()

// Процедура устанавлиант видимость доступность элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьВидимостьДоступностьПоРегБух()
	
	ЭтоРегистрБюдж = Объект.РегистрБухгалтерии.ИмяОбъекта = "бит_Бюджетирование";
	Элементы.Сценарий.Видимость = ЭтоРегистрБюдж;
                 	
КонецПроцедуры // УстановитьВидимостьДоступностьПоРегБух()

// Процедура - обработчик команды "РассчитатьРасхождение".
// 
&НаСервере
Процедура РассчитатьРасхождениеСервер(Отказ = Ложь, ЭтоПроведение = Ложь)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));	
	ДокументОбъект.ПолучитьДанныеДляПроверкиЗавершенияСверки(Отказ, ЭтоПроведение, Ложь, Модифицированность);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	УстановитьВидимостьДоступностьПоРасхождению();
	
КонецПроцедуры // РассчитатьРасхождениеСервер()

&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура выполняет действие, необходимые перед выбором контрагента.
// 
&НаКлиенте
Процедура НачалоВыбораКонтрагента(ТекущаяОрганизация, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		
		СтандартнаяОбработка = Ложь;
		СобственныеКонтрагенты = бит_ОбщегоНазначения.ПолучитьСписокСобственныхКонтрагентовПоОрганизации(ТекущаяОрганизация);
		
		ДанныеВыбора = СобственныеКонтрагенты;
		
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораКонтрагента()

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()


#КонецОбласти

#КонецОбласти

