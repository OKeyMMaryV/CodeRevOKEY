#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	ПараметрыСверки = Новый Структура("Организация1, Контрагент2", Организация1, Контрагент2);
	бит_вго_Сервер.ПроверитьВозможностьРедактированияДокументовСверкиВГО(ДатаНачала, ПараметрыСверки, Отказ);
	
	Если Не Отказ Тогда
		Если ЭтотОбъект.ДополнительныеСвойства.Свойство("СуммаАбсолютногоРасхождения") Тогда
			СуммаАбсолютногоРасхождения 	= ЭтотОбъект.ДополнительныеСвойства.СуммаАбсолютногоРасхождения;
			СуммаАбсолютногоРасхожденияВзм  = ЭтотОбъект.ДополнительныеСвойства.СуммаАбсолютногоРасхожденияВзм;
			ДопустимоеРасхождение 			= ЭтотОбъект.ДополнительныеСвойства.ДопустимоеРасхождение;
			ДопустимоеРасхождениеВзм 		= ЭтотОбъект.ДополнительныеСвойства.ДопустимоеРасхождениеВзм;
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПолучитьДанныеДляПроверкиЗавершенияСверки(Отказ, Истина);	
		КонецЕсли;
	КонецЕсли;
	 	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, Режим)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
	// Проверка данных.
	ПроверкаДанных(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Установка настроек обязательности реквизитов.
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
											
// Процедура получает сумму абсолютного расхождения.
// 
// Параметры:
//  Нет.
// 
Процедура ПолучитьДанныеДляПроверкиЗавершенияСверки(Отказ = Ложь, ЭтоПроведение, ВыводитьСообщениеОбИзмененииСумм = Истина, МодифицированностьФормы = Ложь) Экспорт

	СуммаТемп_АРУ = СуммаАбсолютногоРасхождения;
	СуммаТемп_АРВ = СуммаАбсолютногоРасхожденияВзм;
	СуммаТемп_ДРУ = ДопустимоеРасхождение;
	СуммаТемп_ДРВ = ДопустимоеРасхождениеВзм;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"		 	 , ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания" 		 , ДатаОкончания);
	СтруктураПараметров.Вставить("РегистрБухгалтерии"    , РегистрБухгалтерии);
	СтруктураПараметров.Вставить("Организация1" 		 , Организация1);
	СтруктураПараметров.Вставить("Организация2"		 	 , Организация2);
	СтруктураПараметров.Вставить("Контрагент1"  		 , Контрагент1);
	СтруктураПараметров.Вставить("Контрагент2" 		 	 , Контрагент2);
	СтруктураПараметров.Вставить("Сценарий" 	 		 , Сценарий);
	СтруктураПараметров.Вставить("ИмяРегистраБухгалтерии", РегистрБухгалтерии.ИмяОбъекта);

	ДанныеДляПроверки = Отчеты.бит_вго_СтатусСверкиВГО.ПолучитьДанныеДляПроверкиЗавершенияСверки(СтруктураПараметров);		
	СуммаАбсолютногоРасхождения 	= ДанныеДляПроверки.СуммаАбсолютногоРасхождения;	
	СуммаАбсолютногоРасхожденияВзм  = ДанныеДляПроверки.СуммаАбсолютногоРасхожденияВзм;
	ДопустимоеРасхождение    = ДанныеДляПроверки.ДопустимоеРасхождение;
	ДопустимоеРасхождениеВзм = ДанныеДляПроверки.ДопустимоеРасхождениеВзм;
	КонтролироватьДопустимоеРасхождение    = ДанныеДляПроверки.КонтролироватьДопустимоеРасхождение;
	КонтролироватьДопустимоеРасхождениеВзм = ДанныеДляПроверки.КонтролироватьДопустимоеРасхождениеВзм;

	Если СуммаТемп_АРУ <> СуммаАбсолютногоРасхождения
		ИЛИ СуммаТемп_АРВ <> СуммаАбсолютногоРасхожденияВзм
		ИЛИ СуммаТемп_ДРУ <> ДопустимоеРасхождение
		ИЛИ СуммаТемп_ДРВ <> ДопустимоеРасхождениеВзм Тогда
		МодифицированностьФормы = Истина;	
	КонецЕсли;
	
	Если ВыводитьСообщениеОбИзмененииСумм Тогда 	
		Если СуммаТемп_АРУ <> СуммаАбсолютногоРасхождения Тогда             	
			ТекстСообщения = Нстр("ru = 'Сумма абсолютного расхождения (по управленческому учету) = %1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СуммаАбсолютногоРасхождения);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);  	
		КонецЕсли;
		Если СуммаТемп_АРВ <> СуммаАбсолютногоРасхожденияВзм Тогда             	
			ТекстСообщения = Нстр("ru = 'Сумма абсолютного расхождения (по взаиморасчетам) = %1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СуммаАбсолютногоРасхожденияВзм);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);  	
		КонецЕсли;
	КонецЕсли;
	
	ПревышениеДопустимогоРасхождения = Ложь;
	Если КонтролироватьДопустимоеРасхождение И СуммаАбсолютногоРасхождения > ДопустимоеРасхождение Тогда
		ТекстСообщения = Нстр("ru = 'Сумма абсолютного расхождения по управленческому учету превышает допустимое.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,, ПревышениеДопустимогоРасхождения);
	КонецЕсли;
	Если КонтролироватьДопустимоеРасхождениеВзм И СуммаАбсолютногоРасхожденияВзм > ДопустимоеРасхождениеВзм Тогда
		ТекстСообщения = Нстр("ru = 'Сумма абсолютного расхождения по взаиморасчетам превышает допустимое.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,, ПревышениеДопустимогоРасхождения);
	КонецЕсли;
	
	Если ПревышениеДопустимогоРасхождения Тогда
		Если НеКонтролироватьРасхождение Тогда
			Если ЭтоПроведение Тогда
				ТекстСообщения = Нстр("ru = 'Документ будет проведен без контроля на допустимое расхождение.'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДанныеДляПроверкиЗавершенияСверки()
	
// Процедура проверяет завершение сверки ВГО.
// 
// Параметры:
//  Отказ  - Булево.
// 
Процедура ПроверитьЗавершениеСверкиВГО(Отказ) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"			, ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания"		, ДатаОкончания);
	СтруктураПараметров.Вставить("Организация1"			, Организация1);
	СтруктураПараметров.Вставить("Контрагент1"			, Контрагент1);
	СтруктураПараметров.Вставить("Организация2"			, Организация2);
	СтруктураПараметров.Вставить("Контрагент2"			, Контрагент2);
	СтруктураПараметров.Вставить("РегистрБухгалтерии"	, РегистрБухгалтерии);
	СтруктураПараметров.Вставить("Сценарий"				, Сценарий);
	
	бит_вго_Сервер.ПроверитьЗавершениеСверкиВГО(СтруктураПараметров, Ссылка, Отказ);
	  	
КонецПроцедуры // ПроверитьЗавершениеСверкиВГО()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(Отказ, Заголовок)
	
	// Регистр бит_вго_СтатусыСверкиВГО
	Движения.бит_вго_СтатусыСверкиВГО.Записывать = Истина;
	Движения.бит_вго_СтатусыСверкиВГО.Очистить();
	
	Движение = Движения.бит_вго_СтатусыСверкиВГО.Добавить();
	Движение.РегистрБухгалтерии 			= РегистрБухгалтерии;
	Движение.Сценарий 						= Сценарий;
	Движение.ДатаНачала 					= ДатаНачала;
	Движение.ДатаОкончания 					= ДатаОкончания;
	Движение.Организация1 					= Организация1;
	Движение.Организация2 					= Организация2;
	Движение.Контрагент1 					= Контрагент1;
	Движение.Контрагент2 					= Контрагент2;	
	Движение.СверкаЗавершена 				= Истина;
	 	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц         - Структура.
//  Отказ            		- Булево.
//  Заголовок 				- Строка.
// 
Процедура ПроверкаДанных(Отказ, Заголовок)
	
	// Проверка завершения сверки
	ПроверитьЗавершениеСверкиВГО(Отказ);
		 	    		
КонецПроцедуры // ПроверкаДанных()

#КонецОбласти

#КонецЕсли
