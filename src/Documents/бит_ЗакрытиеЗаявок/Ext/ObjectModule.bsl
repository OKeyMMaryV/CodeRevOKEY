#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мСоответствиеСтатусовОбъектов Экспорт; // Хранит соответствие статусов закрытия для документов планирования.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	Если НЕ ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("ТаблицаДокументаДляСравнения", ТаблицаДокументаДляСравнения());
	КонецЕсли; 
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("Проведен", Проведен);
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
	// Подготовим массив типов для проверки.
	МассивТипов = ПодготовитьМассивТиповДляПроверки();
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицыДляУстановкиСтатуса = ТаблицыДляУстановкиСтатуса();
		ОтменитьИзменениеСтатусов(ТаблицыДляУстановкиСтатуса.УдаленныеИзСписка, 
			ТаблицыДляУстановкиСтатуса.ЗакрытыеДокументы);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3681)
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументыПланирования" , ДокументыПланирования.Выгрузить());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДокументыПланирования.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств) КАК ДокументПланирования
		|ПОМЕСТИТЬ ДокументыПланирования
		|ИЗ
		|	&ДокументыПланирования КАК ДокументыПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
		|	ДокументыПланирования.ДокументПланирования.Номер КАК ДокументПланирования_Номер,
		|	ДокументыПланирования.ДокументПланирования.Дата КАК ДокументПланирования_Дата,
		|	бит_СтатусыОбъектов.Статус КАК Статус
		|ИЗ
		|	ДокументыПланирования КАК ДокументыПланирования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|		ПО (бит_СтатусыОбъектов.Объект = ДокументыПланирования.ДокументПланирования)
		|			И (бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
		|ГДЕ
		|	(бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Закрыта)
		|			ИЛИ бит_СтатусыОбъектов.Статус = ЗНАЧЕНИЕ(Справочник.бит_СтатусыОбъектов.Заявка_Оплачена))";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			СтрокаТаблицы = ДокументыПланирования.Найти(Выборка.ДокументПланирования, "ДокументПланирования");
			Если СтрокаТаблицы <> Неопределено Тогда
			
				Поле = "ДокументыПланирования[%1].ДокументПланирования";
				Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Поле, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ",
									НСтр("ru = 'Документ планирования'"), СтрокаТаблицы.НомерСтроки, 
									НСтр("ru = 'Документы планирования'"), "Заявка на расходование ДС №" + Выборка.ДокументПланирования_Номер + " от " + Формат(Выборка.ДокументПланирования_Дата, "ДФ=dd.MM.yyyy") + " находится в статусе «" + Выборка.Статус + "». Документ не записан");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
			КонецЕсли; 
		
		КонецЦикла;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3681)
	КонецЕсли;
		
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект,Ложь) Тогда
		Возврат                                                                                        
	КонецЕсли;
	
	ОтклонитьАктивныеВизы(Отказ);
	
	ПараметрыПроведения = Документы.бит_ЗакрытиеЗаявок.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Реквизиты 			= ПараметрыПроведения.Реквизиты;
		
	// Подготовим таблицы для возможности проведения.
	СтруктураТаблиц 	= ПодготовитьТаблицыДокумента(ПараметрыПроведения.ДокументыПланирования);
	ТаблицаПоДокументам = СтруктураТаблиц.ТаблицаПоДокументам;
				
	// Движения по документу.
	Если Не Отказ Тогда
		
		бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
		Если ДополнительныеСвойства.Проведен = Проведен Тогда
			ТаблицыДляУстановкиСтатуса = ТаблицыДляУстановкиСтатуса();
			ОтменитьИзменениеСтатусов(ТаблицыДляУстановкиСтатуса.УдаленныеИзСписка, 
				ТаблицыДляУстановкиСтатуса.УдаленныеИзСписка.СкопироватьКолонки());
		КонецЕсли; 
		
		ДвиженияПоРегистрам(ТаблицаПоДокументам, Реквизиты, Отказ);

		УстановитьСтатусДляДокументовПланирования(ТаблицаПоДокументам, СтруктураТаблиц.ПлатежныеПозиции, 
			СтруктураТаблиц.СоотОплатыПоЗаявкам, СтруктураТаблиц.РасходныеПозиции, СтруктураТаблиц.СоотЗатратПоЗаявкам);

	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// Процедура - обработчик события "Обработка заполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		 // Заполнить реквизиты значениями по умолчанию.
		 бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, Пользователи.ТекущийПользователь(), Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дата) Тогда
		Дата = КонецДня(Дата);
	Иначе
		Дата = КонецДня(ТекущаяДата());
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	ИначеЕсли (ДанныеЗаполнения = Неопределено) ИЛИ НЕ Метаданные().ТабличныеЧасти.ДокументыПланирования.Реквизиты.ДокументПланирования.Тип.СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда
		Возврат;
	Иначе	
		
		РеквизитыОснования = ДанныеЗаполнения.Метаданные().Реквизиты;
		
		// Если есть реквизит "Организация", тогда
		Если РеквизитыОснования.Найти("Организация") <> Неопределено Тогда
			Организация = ДанныеЗаполнения.Организация;
		КонецЕсли;
		
		// Если есть реквизит "ЦФО", тогда
		Если РеквизитыОснования.Найти("ЦФО") <> Неопределено Тогда
			ЦФО = ДанныеЗаполнения.ЦФО;
		КонецЕсли;
		
		// Если есть реквизит "СтатьяОборотов", тогда.
		Если РеквизитыОснования.Найти("СтатьяОборотов") <> Неопределено Тогда
			СтатьяОборотов = ДанныеЗаполнения.СтатьяОборотов;
		КонецЕсли;
		
		// Если есть реквизит "Проект", тогда
		Если РеквизитыОснования.Найти("Проект") <> Неопределено Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		// Добавим строку в табличную часть "ДокументыПланирования".
		НовСтрока = ДокументыПланирования.Добавить();
		НовСтрока.ДокументПланирования = ДанныеЗаполнения;
		НовСтрока.ПричинаЗакрытия = Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.Отмена;
		
		// Для заявок на затраты будем дополнительно закрывать подчиненные расходные позиции.
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	бит_РасходнаяПозиция.Ссылка,
			|	бит_СтатусыОбъектов.Статус
			|ИЗ
			|	Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
			|		ПО (бит_СтатусыОбъектов.Объект = бит_РасходнаяПозиция.Ссылка)
			|			И (бит_СтатусыОбъектов.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
			|ГДЕ
			|	бит_РасходнаяПозиция.ДокументОснование = &ДокументОснование
			|	И бит_СтатусыОбъектов.Статус <> Значение(Справочник.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта)";
			
			Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
			
			Результат = Запрос.Выполнить();
			
			ТаблицаДокументов = Результат.Выгрузить();
			
			Для Каждого ТекущаяСтрока Из ТаблицаДокументов Цикл
				НовСтрока = ДокументыПланирования.Добавить();
				НовСтрока.ДокументПланирования = ТекущаяСтрока.Ссылка;
				НовСтрока.ПричинаЗакрытия = Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.Отмена;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-10-17 (#3075)
			МассивЗапрешенныхСтатусов = Новый Массив;
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3681)
			//МассивЗапрешенныхСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Закрыта"));
			//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3681)
			МассивЗапрешенныхСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ЗаявкаОбщая_Закрыта"));
			МассивЗапрешенныхСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ПлатежнаяПозиция_Закрыта"));
			МассивЗапрешенныхСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ЗаявкаНаЗатраты_Закрыта"));
			МассивЗапрешенныхСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.РасходнаяПозиция_Закрыта"));
			
			РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(ДанныеЗаполнения);
			СтатусДокументаПланирования = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ПустаяСсылка"));
			
			Если МассивЗапрешенныхСтатусов.Найти(СтатусДокументаПланирования) <> Неопределено Тогда
				
				ТекстОшибки = НСтр("ru = 'Подобранный документ %1 со статусом: %2, не может использоваться в документе!'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения, СтатусДокументаПланирования);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-10-17 (#3075)
			
			// Для заявок найдем все платежные позиции по которым есть остатки.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаДокумента", Дата);
			Запрос.УстановитьПараметр("Организация"	 , Организация);
			Запрос.УстановитьПараметр("Заявка"		 , ДанныеЗаполнения);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	бит_ПланируемыйРасходДенежныхСредствОстатки.ДокументПланирования,
			|	СУММА(бит_ПланируемыйРасходДенежныхСредствОстатки.СуммаОстаток) КАК СуммаОстаток,
			|	СУММА(бит_ПланируемыйРасходДенежныхСредствОстатки.СуммаРеглОстаток) КАК СуммаРеглОстаток,
			|	СУММА(бит_ПланируемыйРасходДенежныхСредствОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток,
			|	СУММА(бит_ПланируемыйРасходДенежныхСредствОстатки.СуммаВзаиморасчетыОстаток) КАК СуммаВзаиморасчетыОстаток
			|ИЗ
			|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(
			|			&ДатаДокумента,
			|			Организация = &Организация
			|				И ДокументПланирования.ДокументОснование = &Заявка) КАК бит_ПланируемыйРасходДенежныхСредствОстатки
			|
			|СГРУППИРОВАТЬ ПО
			|	бит_ПланируемыйРасходДенежныхСредствОстатки.ДокументПланирования";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НовСтрока = ДокументыПланирования.Добавить();
				НовСтрока.ДокументПланирования = Выборка.ДокументПланирования;
				НовСтрока.ПричинаЗакрытия = Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.Отмена;
				
			КонецЦикла;
			
			// Если заявка создана на основании прогноза, загроем и прогноз.
			ДокументОснование = ДанныеЗаполнения.ДокументОснование;
			
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая")Тогда
					НовСтрока = ДокументыПланирования.Добавить();
					НовСтрока.ДокументПланирования = ДокументОснование;
					НовСтрока.ПричинаЗакрытия = Справочники.бит_ПричиныЗакрытияДокументовПланированияПлатежа.Отмена;
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании" объекта.
// 
Процедура ПриКопировании(ОбъектКопирования)
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
		                                         ,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												 ,Неопределено);
	
	// Очистим табличную часть "ДокументыПланирования".
	ДокументыПланирования.Очистить();
	
КонецПроцедуры // ПриКопировании()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	ПроверитьЗаполнениеДокументыПланирования(Отказ);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает массив типов для проверки.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  МассивТипов - Массив.
// 
Функция ПодготовитьМассивТиповДляПроверки() Экспорт

	// Получим массив основных типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Получим дополнительные типы для проверки.
	ТипыДокументов = Метаданные().ТабличныеЧасти.ДокументыПланирования.Реквизиты.ДокументПланирования.Тип.Типы();
	
	Для Каждого ТекТип Из ТипыДокументов Цикл
		МассивТипов.Добавить(ТекТип);
	КонецЦикла;

	Возврат МассивТипов;
	
КонецФункции // ПодготовитьМассивТиповДляПроверки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Функция готовит таблицы документа для проведения.
// 
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
// 
// Возвращаемое значение:
//   СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СписокДокументов)
	
	ТаблицаПоДокументам = Новый ТаблицаЗначений;
	ПлатежныеПозиции    = Новый Массив;
	СоотОплатыПоЗаявкам = Новый Соответствие;
	РасходныеПозиции    = Новый Массив;
	СоотЗатратПоЗаявкам = Новый Соответствие;

	// Получим структуру данных необходимую для изменения статусов.
	СтруктураДанных = ПолучитьСтруктуруДанныхДляИзмененияСтатусов(СписокДокументов);
		
	ТаблицаПоДокументам = СтруктураДанных.ТаблицаПоДокументам;
	ПлатежныеПозиции    = СтруктураДанных.ПлатежныеПозиции;
	СоотОплатыПоЗаявкам = СтруктураДанных.СоотОплатыПоЗаявкам;
	РасходныеПозиции    = СтруктураДанных.РасходныеПозиции;
	СоотЗатратПоЗаявкам = СтруктураДанных.СоотЗатратПоЗаявкам;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТаблицаПоДокументам", ТаблицаПоДокументам);
	СтруктураТаблиц.Вставить("ПлатежныеПозиции"	  , ПлатежныеПозиции);
	СтруктураТаблиц.Вставить("СоотОплатыПоЗаявкам", СоотОплатыПоЗаявкам);
	СтруктураТаблиц.Вставить("РасходныеПозиции"	  , РасходныеПозиции);
	СтруктураТаблиц.Вставить("СоотЗатратПоЗаявкам", СоотЗатратПоЗаявкам);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

// Функция получает структуру данных необходимую для изменения статусов.
// 
// Параметры: 
//  ТаблицаПоДокументам - таблица значений, содержащая документы для установки статуса.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПолучитьСтруктуруДанныхДляИзмененияСтатусов(ТаблицаПоДокументам)
	
	// Получаем статусы по документам планирования.
	// Из регистра сведений "бит_СтатусыОбъектов".
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументыПланирования", ТаблицаПоДокументам);
	Запрос.УстановитьПараметр("МоментВремени"		 , МоментВремени());
	Запрос.УстановитьПараметр("Организация"		 	 , Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
	|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия
	|ПОМЕСТИТЬ ДокументыПланированияИсходная
	|ИЗ
	|	&ДокументыПланирования КАК ДокументыПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
	|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия,
	|	ВЫБОР
	|		КОГДА ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ПлатежнаяПозиция
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПлатежнаяПозиция,
	|	ВЫБОР
	|		КОГДА ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ПлатежнаяПозиция
	|			ТОГДА ВЫРАЗИТЬ(ДокументыПланирования.ДокументПланирования КАК Документ.бит_ПлатежнаяПозиция).ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.бит_ЗаявкаНаРасходованиеСредств.ПустаяСсылка)
	|	КОНЕЦ КАК ОснованиеПлатежнойПозиции,
	|	ВЫБОР
	|		КОГДА ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_РасходнаяПозиция
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРасходнаяПозиция,
	|	ВЫБОР
	|		КОГДА ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_РасходнаяПозиция
	|			ТОГДА ВЫРАЗИТЬ(ДокументыПланирования.ДокументПланирования КАК Документ.бит_РасходнаяПозиция).ДокументОснование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.бит_ЗаявкаНаЗатраты.ПустаяСсылка)
	|	КОНЕЦ КАК ОснованиеРасходнойПозиции
	|ПОМЕСТИТЬ ДокументыПланирования
	|ИЗ
	|	ДокументыПланированияИсходная КАК ДокументыПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Объект КАК ДокументПланирования,
	|	СтатусыОбъектов.ВидСтатуса КАК ВидСтатуса,
	|	СтатусыОбъектов.Статус КАК Статус,
	|	СтатусыОбъектов.СтатусПредыдущий КАК СтатусПредыдущий
	|ПОМЕСТИТЬ СтатусыОбъектов
	|ИЗ
	|	РегистрСведений.бит_СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				ДокументыПланирования.ДокументПланирования КАК ДокументПланирования
	|			ИЗ
	|				ДокументыПланирования КАК ДокументыПланирования
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				ДокументыПланирования.ОснованиеПлатежнойПозиции
	|			ИЗ
	|				ДокументыПланирования КАК ДокументыПланирования
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				ДокументыПланирования.ОснованиеРасходнойПозиции
	|			ИЗ
	|				ДокументыПланирования КАК ДокументыПланирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
	|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия,
	|	ДокументыПланирования.ЭтоПлатежнаяПозиция КАК ЭтоПлатежнаяПозиция,
	|	ДокументыПланирования.ОснованиеПлатежнойПозиции КАК ОснованиеПлатежнойПозиции,
	|	ДокументыПланирования.ЭтоРасходнаяПозиция КАК ЭтоРасходнаяПозиция,
	|	ДокументыПланирования.ОснованиеРасходнойПозиции КАК ОснованиеРасходнойПозиции,
	|	СтатусыДокументовПланирования.Статус КАК Статус,
	|	СтатусыДокументовПланирования.СтатусПредыдущий КАК СтатусПредыдущий,
	|	СтатусыСостояниеОплаты.Статус КАК ОплатаСтатус,
	|	СтатусыСостояниеОплаты.СтатусПредыдущий КАК ОплатаСтатусПредыдущий,
	|	СтатусыСостояниеЗатрат.Статус КАК ЗатратыСтатус,
	|	СтатусыСостояниеЗатрат.СтатусПредыдущий КАК ЗатратыСтатусПредыдущий,
	|	ЕСТЬNULL(ПланируемыйРасходДенежныхСредствОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(ПланируемыеЗатратыОстатки.СуммаОстаток, 0) КАК СуммаОстатокЗатраты
	|ИЗ
	|	ДокументыПланирования КАК ДокументыПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОбъектов КАК СтатусыДокументовПланирования
	|		ПО ДокументыПланирования.ДокументПланирования = СтатусыДокументовПланирования.ДокументПланирования
	|			И (СтатусыДокументовПланирования.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.Статус))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОбъектов КАК СтатусыСостояниеОплаты
	|		ПО ДокументыПланирования.ОснованиеПлатежнойПозиции = СтатусыСостояниеОплаты.ДокументПланирования
	|			И (СтатусыСостояниеОплаты.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.СостояниеОплаты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОбъектов КАК СтатусыСостояниеЗатрат
	|		ПО ДокументыПланирования.ОснованиеРасходнойПозиции = СтатусыСостояниеЗатрат.ДокументПланирования
	|			И (СтатусыСостояниеЗатрат.ВидСтатуса = ЗНАЧЕНИЕ(Перечисление.бит_ВидыСтатусовОбъектов.СостояниеОплаты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И ДокументПланирования В
	|						(ВЫБРАТЬ
	|							ДокументыПланирования.ДокументПланирования
	|						ИЗ
	|							ДокументыПланирования КАК ДокументыПланирования
	|						ГДЕ
	|							ДокументыПланирования.ЭтоПлатежнаяПозиция)) КАК ПланируемыйРасходДенежныхСредствОстатки
	|		ПО ДокументыПланирования.ДокументПланирования = ПланируемыйРасходДенежныхСредствОстатки.ДокументПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ПланируемыеЗатраты.Остатки(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И ДокументПланирования В
	|						(ВЫБРАТЬ
	|							ДокументыПланирования.ДокументПланирования
	|						ИЗ
	|							ДокументыПланирования КАК ДокументыПланирования
	|						ГДЕ
	|							ДокументыПланирования.ЭтоРасходнаяПозиция)) КАК ПланируемыеЗатратыОстатки
	|		ПО ДокументыПланирования.ДокументПланирования = ПланируемыеЗатратыОстатки.ДокументПланирования";
	
	ТаблицаПоДокументам = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоПлатежнаяПозиция", Истина);
	
	ПлатежныеПозиции = ТаблицаПоДокументам.НайтиСтроки(Отбор);
	
	Если ПлатежныеПозиции.Количество() = 0 Тогда
		СоотОплатыПоЗаявкам = Новый Соответствие;
	Иначе
		
		// Получим список заявок платежных позиций для получения данных по оплате.
		МассивЗаявок = Новый Массив;
		
		Для Каждого ТекСтрока Из ПлатежныеПозиции Цикл
			МассивЗаявок.Добавить(ТекСтрока.ОснованиеПлатежнойПозиции);
		КонецЦикла;
		
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивЗаявок);
		
		// Получим оплаты по заявкам.
		СоотОплатыПоЗаявкам = бит_Казначейство.ПолучитьОплатыПоЗаявке(МассивЗаявок);
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЭтоРасходнаяПозиция", Истина);
	
	РасходныеПозиции = ТаблицаПоДокументам.НайтиСтроки(Отбор);
	
	Если РасходныеПозиции.Количество() = 0 Тогда
		СоотЗатратПоЗаявкам = Новый Соответствие;
	Иначе
		
		// Получим список заявок расходных позиций для получения данных по затратам.
		МассивЗаявок = Новый Массив;
		
		Для Каждого ТекСтрока Из РасходныеПозиции Цикл
			МассивЗаявок.Добавить(ТекСтрока.ОснованиеРасходнойПозиции);
		КонецЦикла;
		
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивЗаявок);
		
		// Получим затраты по заявкам.
		СоотЗатратПоЗаявкам = бит_ДоговораСервер.ПолучитьЗатратыПоЗаявке(МассивЗаявок);
		
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаПоДокументам", ТаблицаПоДокументам);
	СтруктураДанных.Вставить("ПлатежныеПозиции"	  , ПлатежныеПозиции);
	СтруктураДанных.Вставить("СоотОплатыПоЗаявкам", СоотОплатыПоЗаявкам);
	СтруктураДанных.Вставить("РасходныеПозиции"	  , РасходныеПозиции);
	СтруктураДанных.Вставить("СоотЗатратПоЗаявкам", СоотЗатратПоЗаявкам);
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруДанныхДляИзмененияСтатусов()

// Процедура получает остатки по регистру накопления "бит_ПланируемыйРасходДенежныхСредств".
// Для закрытия остатков.
// 
// Параметры: 
//  ТаблицаПоДокументам 	- результат запроса по табличной части "ДокументыПланирования".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
// 
// Возвращаемое значение:
//  Сформированная таблиица значений.
// 
Функция СформироватьПланируемыйРасходДенежныхСредств(ТаблицаПоДокументам, СтруктураШапкиДокумента)

	// Получаем остатки по документам планирования.
	// Регистра накопления "бит_ПланируемыйРасходДенежныхСредств".
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента"		  , МоментВремени());
	Запрос.УстановитьПараметр("Организация"		  	  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДокументыПланирования" , ТаблицаПоДокументам);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументыПланирования.ДокументПланирования,
	               |	ДокументыПланирования.ПричинаЗакрытия
	               |ПОМЕСТИТЬ ДокументыПланирования
	               |ИЗ
	               |	&ДокументыПланирования КАК ДокументыПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПланируемыйРасходДенСредствОстатки.Организация,
	               |	ПланируемыйРасходДенСредствОстатки.ВидДенежныхСредств,
	               |	ПланируемыйРасходДенСредствОстатки.Валюта,
	               |	ПланируемыйРасходДенСредствОстатки.ДокументПланирования,
	               |	ПланируемыйРасходДенСредствОстатки.ЦФО,
	               |	ПланируемыйРасходДенСредствОстатки.СтатьяОборотов,
	               |	ПланируемыйРасходДенСредствОстатки.Проект,
	               |	ПланируемыйРасходДенСредствОстатки.НоменклатурнаяГруппа,
	               |	ПланируемыйРасходДенСредствОстатки.Контрагент,
	               |	ПланируемыйРасходДенСредствОстатки.ДоговорКонтрагента,
	               |	ПланируемыйРасходДенСредствОстатки.БанковскийСчет,
	               |	ПланируемыйРасходДенСредствОстатки.Аналитика_1,
	               |	ПланируемыйРасходДенСредствОстатки.Аналитика_2,
	               |	ПланируемыйРасходДенСредствОстатки.Аналитика_3,
	               |	ПланируемыйРасходДенСредствОстатки.Аналитика_4,
	               |	ПланируемыйРасходДенСредствОстатки.Аналитика_5,
	               |	ПланируемыйРасходДенСредствОстатки.Аналитика_6,
	               |	ПланируемыйРасходДенСредствОстатки.Аналитика_7,
	               |	ПланируемыйРасходДенСредствОстатки.СуммаОстаток КАК Сумма,
	               |	ПланируемыйРасходДенСредствОстатки.СуммаРеглОстаток КАК СуммаРегл,
	               |	ПланируемыйРасходДенСредствОстатки.СуммаУпрОстаток КАК СуммаУпр,
	               |	ПланируемыйРасходДенСредствОстатки.СуммаВзаиморасчетыОстаток КАК СуммаВзаиморасчеты
	               |ИЗ
	               |	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(
	               |			&МоментДокумента,
	               |			Организация = &Организация
	               |				И ДокументПланирования В
	               |					(ВЫБРАТЬ
	               |						ДокументыПланирования.ДокументПланирования
	               |					ИЗ
	               |						ДокументыПланирования КАК ДокументыПланирования)) КАК ПланируемыйРасходДенСредствОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДокументыПланирования";
	
	ТаблицаДвижений_ПланируемыйРасходДенежныхСредств = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений_ПланируемыйРасходДенежныхСредств;

КонецФункции // СформироватьТаблицуДвижений_ПланируемыйРасходДенежныхСредств()

// Процедура получает остатки по регистру накопления "бит_ПланируемыеЗатраты",
// для закрытия остатков.
// 
// Параметры: 
//  ТаблицаПоДокументам 	- результат запроса по табличной части "ДокументыПланирования",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
// 
// Возвращаемое значение:
//  Сформированная таблиица значений.
// 
Функция СформироватьПланируемыеЗатраты(ТаблицаПоДокументам, СтруктураШапкиДокумента)

	// Получаем остатки по документам планирования
	// регистра накопления "бит_ПланируемыеЗатраты".
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента"		  , МоментВремени());
	Запрос.УстановитьПараметр("Организация"		  	  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДокументыПланирования" , ТаблицаПоДокументам);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
	|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия
	|ПОМЕСТИТЬ ДокументыПланирования
	|ИЗ
	|	&ДокументыПланирования КАК ДокументыПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.Организация КАК Организация,
	|	Остатки.Валюта КАК Валюта,
	|	Остатки.ДокументПланирования КАК ДокументПланирования,
	|	Остатки.ЦФО КАК ЦФО,
	|	Остатки.СтатьяОборотов КАК СтатьяОборотов,
	|	Остатки.Проект КАК Проект,
	|	Остатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Остатки.Контрагент КАК Контрагент,
	|	Остатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Остатки.Аналитика_1 КАК Аналитика_1,
	|	Остатки.Аналитика_2 КАК Аналитика_2,
	|	Остатки.Аналитика_3 КАК Аналитика_3,
	|	Остатки.Аналитика_4 КАК Аналитика_4,
	|	Остатки.Аналитика_5 КАК Аналитика_5,
	|	Остатки.Аналитика_6 КАК Аналитика_6,
	|	Остатки.Аналитика_7 КАК Аналитика_7,
	|	Остатки.СуммаОстаток КАК Сумма,
	|	Остатки.СуммаРеглОстаток КАК СуммаРегл,
	|	Остатки.СуммаУпрОстаток КАК СуммаУпр,
	|	Остатки.СуммаВзаиморасчетыОстаток КАК СуммаВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыеЗатраты.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И ДокументПланирования В
	|					(ВЫБРАТЬ
	|						ДокументыПланирования.ДокументПланирования
	|					ИЗ
	|						ДокументыПланирования КАК ДокументыПланирования)) КАК Остатки";
	
	ТаблицаДвижений_ПланируемыеЗатраты = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений_ПланируемыеЗатраты;

КонецФункции

// Процедура получает записи по регистру накопления "бит_КонтрольныеЗначенияБюджетов",
// для закрытия оборотов.
// 
// Параметры: 
//  ТаблицаПоДокументам 	- результат запроса по табличной части "ДокументыПланирования",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
// 
// Возвращаемое значение:
//  Сформированная таблиица значений.
// 
Функция СформироватьКонтрольныеЗначенияБюджетов(СтруктураШапкиДокумента, ТаблицаПоДокументам, 
			ПланируемыйРасходДС, ПланируемыеЗатраты)
	
	Заявки = ТаблицаПоДокументам.СкопироватьКолонки();
	Для каждого СтрокаТаблицы Из ТаблицаПоДокументам Цикл
		Если ТипЗнч(СтрокаТаблицы.ДокументПланирования) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция") Тогда
			НайденныеРасходы = ПланируемыйРасходДС.НайтиСтроки(Новый Структура("ДокументПланирования", СтрокаТаблицы.ДокументПланирования));
			Если НайденныеРасходы.Количество() = 0 Тогда
				Продолжить;			
			КонецЕсли; 
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПланирования) = Тип("ДокументСсылка.бит_РасходнаяПозиция") Тогда  
			НайденныеЗатраты = ПланируемыеЗатраты.НайтиСтроки(Новый Структура("ДокументПланирования", СтрокаТаблицы.ДокументПланирования));
			Если НайденныеЗатраты.Количество() = 0 Тогда
				Продолжить;			
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежнойПозиции) Тогда
			НоваяСтрока = Заявки.Добавить();
			НоваяСтрока.ДокументПланирования = СтрокаТаблицы.ОснованиеПлатежнойПозиции;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеРасходнойПозиции) Тогда	
			НоваяСтрока = Заявки.Добавить();
			НоваяСтрока.ДокументПланирования = СтрокаТаблицы.ОснованиеРасходнойПозиции;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			НоваяСтрока = Заявки.Добавить();
			НоваяСтрока.ДокументПланирования = СтрокаТаблицы.ДокументПланирования;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			НоваяСтрока = Заявки.Добавить();
			НоваяСтрока.ДокументПланирования = СтрокаТаблицы.ДокументПланирования;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Заявки.Свернуть("ДокументПланирования");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МоментДокумента"		  , СтруктураШапкиДокумента.Период);
	Запрос.УстановитьПараметр("ДокументыПланирования" , Заявки);
	Запрос.УстановитьПараметр("ПрошедшиеОплаты", ПолучитьПрошедшиеОплатыПоЗаявкам(СтруктураШапкиДокумента,ТаблицаПоДокументам));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-19 (#3075)
	Запрос.УстановитьПараметр("ОперативныйСценарийПланирования", СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования"));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-19 (#3075)	
	Запрос.УстановитьПараметр("СторноПоПозициям", СторноПозицииДляКонтроляБюджетов(СтруктураШапкиДокумента, ТаблицаПоДокументам));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования
	//|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-02 (#3306)
	//|ПОМЕСТИТЬ ДокументыПланирования
	//Заменено на:
	|ПОМЕСТИТЬ ВТ0_ДокументыПланирования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-02 (#3306)	
	|ИЗ
	|	&ДокументыПланирования КАК ДокументыПланирования
	|;
	|
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-02 (#3306)
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ0_ДокументыПланирования.ДокументПланирования КАК ДокументПланирования
	|ПОМЕСТИТЬ ДокументыПланирования
	|ИЗ
	|	ВТ0_ДокументыПланирования КАК ВТ0_ДокументыПланирования
	|;
	| 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-02 (#3306)	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрольныеЗначенияБюджетов.Сценарий КАК Сценарий,
	|	КонтрольныеЗначенияБюджетов.ЦФО КАК ЦФО,
	|	КонтрольныеЗначенияБюджетов.СтатьяОборотов КАК СтатьяОборотов,
	|	КонтрольныеЗначенияБюджетов.Контрагент КАК Контрагент,
	|	КонтрольныеЗначенияБюджетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КонтрольныеЗначенияБюджетов.Проект КАК Проект,
	|	КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КонтрольныеЗначенияБюджетов.БанковскийСчет КАК БанковскийСчет,
	|	КонтрольныеЗначенияБюджетов.Аналитика_1 КАК Аналитика_1,
	|	КонтрольныеЗначенияБюджетов.Аналитика_2 КАК Аналитика_2,
	|	КонтрольныеЗначенияБюджетов.Аналитика_3 КАК Аналитика_3,
	|	КонтрольныеЗначенияБюджетов.Аналитика_4 КАК Аналитика_4,
	|	КонтрольныеЗначенияБюджетов.Аналитика_5 КАК Аналитика_5,
	|	КонтрольныеЗначенияБюджетов.Аналитика_6 КАК Аналитика_6,
	|	КонтрольныеЗначенияБюджетов.Аналитика_7 КАК Аналитика_7,
	|	СУММА(КонтрольныеЗначенияБюджетов.СуммаСценарийКонтроль * -1) КАК СуммаСценарийКонтроль,
	|	СУММА(КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение * -1) КАК СуммаСценарийИсполнение,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-27 (#3075)
	|	СУММА(КонтрольныеЗначенияБюджетов.СуммаСценарийКонтрольСНДС * -1) КАК СуммаСценарийКонтрольСНДС,
	|	СУММА(КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнениеСНДС * -1) КАК СуммаСценарийИсполнениеСНДС,
	|	МАКСИМУМ(КонтрольныеЗначенияБюджетов.бит_БК_Организация) КАК бит_БК_Организация,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-27 (#3075)	
	|	КонтрольныеЗначенияБюджетов.Регистратор КАК ДокументПланирования,
	|	КонтрольныеЗначенияБюджетов.Период КАК Период,
	|	ЕСТЬNULL(КонтрольныеЗначенияБюджетов.КоличествоСценарийКонтроль, 0) * -1 КАК КоличествоСценарийКонтроль,
	|	ЕСТЬNULL(КонтрольныеЗначенияБюджетов.КоличествоСценарийИсполнение, 0) * -1 КАК КоличествоСценарийИсполнение
	|ПОМЕСТИТЬ КонтрольныеЗначенияБюджетов
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК КонтрольныеЗначенияБюджетов
	|ГДЕ
	|	КонтрольныеЗначенияБюджетов.Период <= &МоментДокумента
	|	И КонтрольныеЗначенияБюджетов.Регистратор В
	|			(ВЫБРАТЬ
	|				ДокументыПланирования.ДокументПланирования
	|			ИЗ
	|				ДокументыПланирования КАК ДокументыПланирования)
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрольныеЗначенияБюджетов.Проект,
	|	КонтрольныеЗначенияБюджетов.Контрагент,
	|	КонтрольныеЗначенияБюджетов.БанковскийСчет,
	|	КонтрольныеЗначенияБюджетов.Аналитика_1,
	|	КонтрольныеЗначенияБюджетов.Аналитика_2,
	|	КонтрольныеЗначенияБюджетов.Аналитика_3,
	|	КонтрольныеЗначенияБюджетов.Аналитика_4,
	|	КонтрольныеЗначенияБюджетов.Аналитика_5,
	|	КонтрольныеЗначенияБюджетов.Аналитика_6,
	|	КонтрольныеЗначенияБюджетов.Аналитика_7,
	|	КонтрольныеЗначенияБюджетов.ДоговорКонтрагента,
	|	КонтрольныеЗначенияБюджетов.СтатьяОборотов,
	|	КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа,
	|	КонтрольныеЗначенияБюджетов.Сценарий,
	|	КонтрольныеЗначенияБюджетов.ЦФО,
	|	КонтрольныеЗначенияБюджетов.Регистратор,
	|	КонтрольныеЗначенияБюджетов.Период,
	|	ЕСТЬNULL(КонтрольныеЗначенияБюджетов.КоличествоСценарийКонтроль, 0) * -1,
	|	ЕСТЬNULL(КонтрольныеЗначенияБюджетов.КоличествоСценарийИсполнение, 0) * -1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрольныеЗначенияБюджетовИсключаемые.ДокументПланирования КАК ДокументПланирования
	|ПОМЕСТИТЬ КонтрольныеЗначенияБюджетовИсключаемые
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК КонтрольныеЗначенияБюджетовИсключаемые
	|ГДЕ
	|	КонтрольныеЗначенияБюджетовИсключаемые.Период <= &МоментДокумента
	|	И КонтрольныеЗначенияБюджетовИсключаемые.ДокументПланирования В
	|			(ВЫБРАТЬ
	|				ДокументыПланирования.ДокументПланирования
	|			ИЗ
	|				ДокументыПланирования КАК ДокументыПланирования)
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрольныеЗначенияБюджетовИсключаемые.ДокументПланирования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-19 (#3075)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПланирования.ДокументПланирования
	|ИЗ
	|	ДокументыПланирования КАК ДокументыПланирования
	|ГДЕ
	|	ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств
	|	И ВЫРАЗИТЬ(ДокументыПланирования.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств).Сценарий <> &ОперативныйСценарийПланирования
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-19 (#3075)	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрошедшиеОплаты.Сценарий КАК Сценарий,
	|	ПрошедшиеОплаты.ЦФО КАК ЦФО,
	|	ПрошедшиеОплаты.СтатьяОборотов КАК СтатьяОборотов,
	|	ПрошедшиеОплаты.Контрагент КАК Контрагент,
	|	ПрошедшиеОплаты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПрошедшиеОплаты.Проект КАК Проект,
	|	ПрошедшиеОплаты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПрошедшиеОплаты.Аналитика_1 КАК Аналитика_1,
	|	ПрошедшиеОплаты.Аналитика_2 КАК Аналитика_2,
	|	ПрошедшиеОплаты.Аналитика_3 КАК Аналитика_3,
	|	ПрошедшиеОплаты.Аналитика_4 КАК Аналитика_4,
	|	ПрошедшиеОплаты.Аналитика_5 КАК Аналитика_5,
	|	ПрошедшиеОплаты.Аналитика_6 КАК Аналитика_6,
	|	ПрошедшиеОплаты.Аналитика_7 КАК Аналитика_7,
	|	ПрошедшиеОплаты.БанковскийСчет КАК БанковскийСчет,
	|	ПрошедшиеОплаты.СуммаСценарийКонтроль КАК СуммаСценарийКонтроль,
	|	ПрошедшиеОплаты.СуммаСценарийИсполнение КАК СуммаСценарийИсполнение,
	|	ПрошедшиеОплаты.ДокументПланирования КАК ДокументПланирования,
	|	ПрошедшиеОплаты.Период КАК Период
	|ПОМЕСТИТЬ ПрошедшиеОплаты
	|ИЗ
	|	&ПрошедшиеОплаты КАК ПрошедшиеОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СторноПоПозициям.Сценарий КАК Сценарий,
	|	СторноПоПозициям.ЦФО КАК ЦФО,
	|	СторноПоПозициям.СтатьяОборотов КАК СтатьяОборотов,
	|	СторноПоПозициям.Контрагент КАК Контрагент,
	|	СторноПоПозициям.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СторноПоПозициям.Проект КАК Проект,
	|	СторноПоПозициям.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СторноПоПозициям.Аналитика_1 КАК Аналитика_1,
	|	СторноПоПозициям.Аналитика_2 КАК Аналитика_2,
	|	СторноПоПозициям.Аналитика_3 КАК Аналитика_3,
	|	СторноПоПозициям.Аналитика_4 КАК Аналитика_4,
	|	СторноПоПозициям.Аналитика_5 КАК Аналитика_5,
	|	СторноПоПозициям.Аналитика_6 КАК Аналитика_6,
	|	СторноПоПозициям.Аналитика_7 КАК Аналитика_7,
	|	СторноПоПозициям.БанковскийСчет КАК БанковскийСчет,
	|	СторноПоПозициям.СуммаСценарийКонтроль КАК СуммаСценарийКонтроль,
	|	-СторноПоПозициям.СуммаСценарийИсполнение КАК СуммаСценарийИсполнение,
	|	СторноПоПозициям.ДокументПланирования КАК ДокументПланирования,
	|	СторноПоПозициям.Период КАК Период
	|ПОМЕСТИТЬ СторноПоПозициям
	|ИЗ
	|	&СторноПоПозициям КАК СторноПоПозициям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрольныеЗначенияБюджетов.Сценарий КАК Сценарий,
	|	КонтрольныеЗначенияБюджетов.ЦФО КАК ЦФО,
	|	КонтрольныеЗначенияБюджетов.СтатьяОборотов КАК СтатьяОборотов,
	|	КонтрольныеЗначенияБюджетов.Контрагент КАК Контрагент,
	|	КонтрольныеЗначенияБюджетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КонтрольныеЗначенияБюджетов.Проект КАК Проект,
	|	КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КонтрольныеЗначенияБюджетов.Аналитика_1 КАК Аналитика_1,
	|	КонтрольныеЗначенияБюджетов.Аналитика_2 КАК Аналитика_2,
	|	КонтрольныеЗначенияБюджетов.Аналитика_3 КАК Аналитика_3,
	|	КонтрольныеЗначенияБюджетов.Аналитика_4 КАК Аналитика_4,
	|	КонтрольныеЗначенияБюджетов.Аналитика_5 КАК Аналитика_5,
	|	КонтрольныеЗначенияБюджетов.Аналитика_6 КАК Аналитика_6,
	|	КонтрольныеЗначенияБюджетов.Аналитика_7 КАК Аналитика_7,
	|	КонтрольныеЗначенияБюджетов.БанковскийСчет КАК БанковскийСчет,
	|	КонтрольныеЗначенияБюджетов.СуммаСценарийКонтроль КАК СуммаСценарийКонтроль,
	|	ВЫБОР
	|		КОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение <= 0
	|			ТОГДА ВЫБОР
	|					КОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение + ЕСТЬNULL(ПрошедшиеОплаты.СуммаСценарийИсполнение, 0) >= 0
	|						ТОГДА 0
	|					ИНАЧЕ КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение + ЕСТЬNULL(ПрошедшиеОплаты.СуммаСценарийИсполнение, 0)
	|				КОНЕЦ
	|		КОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение > 0
	|			ТОГДА ВЫБОР
	|					КОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение - ЕСТЬNULL(ПрошедшиеОплаты.СуммаСценарийИсполнение, 0) > 0
	|						ТОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение - ЕСТЬNULL(ПрошедшиеОплаты.СуммаСценарийИсполнение, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|	КОНЕЦ КАК СуммаСценарийИсполнение,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-27 (#3075)
	|	КонтрольныеЗначенияБюджетов.СуммаСценарийКонтрольСНДС КАК СуммаСценарийКонтрольСНДС,				   
	|	КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнениеСНДС КАК СуммаСценарийИсполнениеСНДС,
	|	КонтрольныеЗначенияБюджетов.бит_БК_Организация КАК бит_БК_Организация,
	|	Значение(Справочник.СценарииПланирования.ПустаяСсылка) КАК СценарийКонтролируемый,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-27 (#3075)	
	|	КонтрольныеЗначенияБюджетов.ДокументПланирования КАК ДокументПланирования,
	|	КонтрольныеЗначенияБюджетов.Период КАК Период,
	|	КонтрольныеЗначенияБюджетов.КоличествоСценарийКонтроль КАК КоличествоСценарийКонтроль,
	|	КонтрольныеЗначенияБюджетов.КоличествоСценарийИсполнение КАК КоличествоСценарийИсполнение
	|ПОМЕСТИТЬ КонтрольняеОстатки
	|ИЗ
	|	КонтрольныеЗначенияБюджетов КАК КонтрольныеЗначенияБюджетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрольныеЗначенияБюджетовИсключаемые КАК КонтрольныеЗначенияБюджетовИсключаемые
	|		ПО КонтрольныеЗначенияБюджетов.ДокументПланирования = КонтрольныеЗначенияБюджетовИсключаемые.ДокументПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрошедшиеОплаты КАК ПрошедшиеОплаты
	|		ПО КонтрольныеЗначенияБюджетов.Сценарий = ПрошедшиеОплаты.Сценарий
	|			И КонтрольныеЗначенияБюджетов.ЦФО = ПрошедшиеОплаты.ЦФО
	|			И КонтрольныеЗначенияБюджетов.СтатьяОборотов = ПрошедшиеОплаты.СтатьяОборотов
	|			И КонтрольныеЗначенияБюджетов.Контрагент = ПрошедшиеОплаты.Контрагент
	|			И КонтрольныеЗначенияБюджетов.ДоговорКонтрагента = ПрошедшиеОплаты.ДоговорКонтрагента
	|			И КонтрольныеЗначенияБюджетов.Проект = ПрошедшиеОплаты.Проект
	|			И КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа = ПрошедшиеОплаты.НоменклатурнаяГруппа
	|			И КонтрольныеЗначенияБюджетов.БанковскийСчет = ПрошедшиеОплаты.БанковскийСчет
	|			И КонтрольныеЗначенияБюджетов.Аналитика_1 = ПрошедшиеОплаты.Аналитика_1
	|			И КонтрольныеЗначенияБюджетов.Аналитика_2 = ПрошедшиеОплаты.Аналитика_2
	|			И КонтрольныеЗначенияБюджетов.Аналитика_3 = ПрошедшиеОплаты.Аналитика_3
	|			И КонтрольныеЗначенияБюджетов.Аналитика_4 = ПрошедшиеОплаты.Аналитика_4
	|			И КонтрольныеЗначенияБюджетов.Аналитика_5 = ПрошедшиеОплаты.Аналитика_5
	|			И КонтрольныеЗначенияБюджетов.Аналитика_6 = ПрошедшиеОплаты.Аналитика_6
	|			И КонтрольныеЗначенияБюджетов.Аналитика_7 = ПрошедшиеОплаты.Аналитика_7
	|			И КонтрольныеЗначенияБюджетов.ДокументПланирования = ПрошедшиеОплаты.ДокументПланирования
	|			И КонтрольныеЗначенияБюджетов.Период = ПрошедшиеОплаты.Период
	|ГДЕ
	|	КонтрольныеЗначенияБюджетовИсключаемые.ДокументПланирования ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение <= 0
	|				ТОГДА ВЫБОР
	|						КОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение + ЕСТЬNULL(ПрошедшиеОплаты.СуммаСценарийИсполнение, 0) >= 0
	|							ТОГДА 0
	|						ИНАЧЕ КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение + ЕСТЬNULL(ПрошедшиеОплаты.СуммаСценарийИсполнение, 0)
	|					КОНЕЦ
	|			КОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение > 0
	|				ТОГДА ВЫБОР
	|						КОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение - ЕСТЬNULL(ПрошедшиеОплаты.СуммаСценарийИсполнение, 0) > 0
	|							ТОГДА КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение - ЕСТЬNULL(ПрошедшиеОплаты.СуммаСценарийИсполнение, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|		КОНЕЦ <> 0
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-19 (#3075)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_КонтрольныеЗначенияБюджетов.Сценарий,
	|	бит_КонтрольныеЗначенияБюджетов.ЦФО,
	|	бит_КонтрольныеЗначенияБюджетов.СтатьяОборотов,
	|	бит_КонтрольныеЗначенияБюджетов.Контрагент,
	|	бит_КонтрольныеЗначенияБюджетов.ДоговорКонтрагента,
	|	бит_КонтрольныеЗначенияБюджетов.Проект,
	|	бит_КонтрольныеЗначенияБюджетов.НоменклатурнаяГруппа,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_1,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_2,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_3,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_4,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_5,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_6,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_7,
	|	бит_КонтрольныеЗначенияБюджетов.БанковскийСчет,
	|	-бит_КонтрольныеЗначенияБюджетов.СуммаСценарийКонтроль,
	|	-бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение,
	|	-бит_КонтрольныеЗначенияБюджетов.СуммаСценарийКонтрольСНДС,
	|	-бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнениеСНДС,
	|	бит_КонтрольныеЗначенияБюджетов.бит_БК_Организация, 				   
	|	бит_КонтрольныеЗначенияБюджетов.СценарийКонтролируемый, 				   
	|	бит_КонтрольныеЗначенияБюджетов.ДокументПланирования,
	|	бит_КонтрольныеЗначенияБюджетов.Период,
	|	-бит_КонтрольныеЗначенияБюджетов.КоличествоСценарийКонтроль,
	|	-бит_КонтрольныеЗначенияБюджетов.КоличествоСценарийИсполнение				   
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК бит_КонтрольныеЗначенияБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПланирования КАК ДокументыПланирования
	|		ПО (бит_КонтрольныеЗначенияБюджетов.Регистратор = (ВЫРАЗИТЬ(ДокументыПланирования.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств)))
	|			И (ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств)
	|			И (ВЫРАЗИТЬ(ДокументыПланирования.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств).Сценарий <> &ОперативныйСценарийПланирования)
	|			И (бит_КонтрольныеЗначенияБюджетов.Активность)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-19 (#3075)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрольняеОстатки.Сценарий КАК Сценарий,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-22 (#3075)
	|	КонтрольняеОстатки.СценарийКонтролируемый КАК СценарийКонтролируемый,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-22 (#3075)	
	|	КонтрольняеОстатки.ЦФО КАК ЦФО,
	|	КонтрольняеОстатки.СтатьяОборотов КАК СтатьяОборотов,
	|	КонтрольняеОстатки.Контрагент КАК Контрагент,
	|	КонтрольняеОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	КонтрольняеОстатки.Проект КАК Проект,
	|	КонтрольняеОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	КонтрольняеОстатки.Аналитика_1 КАК Аналитика_1,
	|	КонтрольняеОстатки.Аналитика_2 КАК Аналитика_2,
	|	КонтрольняеОстатки.Аналитика_3 КАК Аналитика_3,
	|	КонтрольняеОстатки.Аналитика_4 КАК Аналитика_4,
	|	КонтрольняеОстатки.Аналитика_5 КАК Аналитика_5,
	|	КонтрольняеОстатки.Аналитика_6 КАК Аналитика_6,
	|	КонтрольняеОстатки.Аналитика_7 КАК Аналитика_7,
	|	КонтрольняеОстатки.БанковскийСчет КАК БанковскийСчет,
	|	КонтрольняеОстатки.СуммаСценарийКонтроль КАК СуммаСценарийКонтроль,
	|	ВЫБОР
	|		КОГДА - КонтрольняеОстатки.СуммаСценарийИсполнение >= - СторноПоПозициям.СуммаСценарийИсполнение
	|			ТОГДА СторноПоПозициям.СуммаСценарийИсполнение
	|		ИНАЧЕ КонтрольняеОстатки.СуммаСценарийИсполнение
	|	КОНЕЦ КАК СуммаСценарийИсполнение,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-01-23 (#3075)
	|	КонтрольняеОстатки.СуммаСценарийКонтрольСНДС КАК СуммаСценарийКонтрольСНДС,
	|	КонтрольняеОстатки.СуммаСценарийИсполнениеСНДС КАК СуммаСценарийИсполнениеСНДС,
	|	КонтрольняеОстатки.бит_БК_Организация КАК бит_БК_Организация,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-01-23 (#3075)	
	|	КонтрольняеОстатки.ДокументПланирования КАК ДокументПланирования,
	|	КонтрольняеОстатки.Период КАК Период,
	|	КонтрольняеОстатки.КоличествоСценарийКонтроль КАК КоличествоСценарийКонтроль,
	|	КонтрольняеОстатки.КоличествоСценарийИсполнение КАК КоличествоСценарийИсполнение
	|ИЗ
	|	КонтрольняеОстатки КАК КонтрольняеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СторноПоПозициям КАК СторноПоПозициям
	|		ПО КонтрольняеОстатки.Сценарий = СторноПоПозициям.Сценарий
	|			И КонтрольняеОстатки.ЦФО = СторноПоПозициям.ЦФО
	|			И КонтрольняеОстатки.СтатьяОборотов = СторноПоПозициям.СтатьяОборотов
	|			И КонтрольняеОстатки.Контрагент = СторноПоПозициям.Контрагент
	|			И КонтрольняеОстатки.ДоговорКонтрагента = СторноПоПозициям.ДоговорКонтрагента
	|			И КонтрольняеОстатки.Проект = СторноПоПозициям.Проект
	|			И КонтрольняеОстатки.НоменклатурнаяГруппа = СторноПоПозициям.НоменклатурнаяГруппа
	|			И КонтрольняеОстатки.БанковскийСчет = СторноПоПозициям.БанковскийСчет
	|			И КонтрольняеОстатки.Аналитика_1 = СторноПоПозициям.Аналитика_1
	|			И КонтрольняеОстатки.Аналитика_2 = СторноПоПозициям.Аналитика_2
	|			И КонтрольняеОстатки.Аналитика_3 = СторноПоПозициям.Аналитика_3
	|			И КонтрольняеОстатки.Аналитика_4 = СторноПоПозициям.Аналитика_4
	|			И КонтрольняеОстатки.Аналитика_5 = СторноПоПозициям.Аналитика_5
	|			И КонтрольняеОстатки.Аналитика_6 = СторноПоПозициям.Аналитика_6
	|			И КонтрольняеОстатки.Аналитика_7 = СторноПоПозициям.Аналитика_7
	|			И КонтрольняеОстатки.ДокументПланирования = СторноПоПозициям.ДокументПланирования
	|			И КонтрольняеОстатки.Период = СторноПоПозициям.Период";
	
	ТаблицаДвижений_КонтрольныеЗначенияБюджетов = Запрос.Выполнить().Выгрузить();
	ТаблицаДвижений_КонтрольныеЗначенияБюджетов.Колонки.Добавить("Активность");
	
	Возврат ТаблицаДвижений_КонтрольныеЗначенияБюджетов; 
	
КонецФункции // СформироватьТаблицуДвижений_КонтрольныеЗначенияБюджетов()

// Процедура получает остатки по регистру накопления "бит_мто_ПотребностиНоменклатуры",
// для закрытия остатков.
// 
// Параметры: 
//  ТаблицаПоДокументам 	- результат запроса по табличной части "ДокументыПланирования",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
// 
// Возвращаемое значение:
//  Пакет запроса.
// 
// 
Функция СформироватьПотребностьНоменклатуры(ТаблицаПоДокументам, СтруктураШапкиДокумента)

	// Получаем остатки по документам планирования.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента"		  , МоментВремени());
	Запрос.УстановитьПараметр("Организация"		  	  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДокументыПланирования" , ТаблицаПоДокументам);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
	               |	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия
	               |ПОМЕСТИТЬ ДокументыПланирования
	               |ИЗ
	               |	&ДокументыПланирования КАК ДокументыПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_мто_ПотребностиНоменклатурыОстатки.Организация КАК Организация,
	               |	бит_мто_ПотребностиНоменклатурыОстатки.ДокументПланирования КАК ДокументПланирования,
	               |	бит_мто_ПотребностиНоменклатурыОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(бит_мто_ПотребностиНоменклатурыОстатки.КоличествоОстаток) КАК Количество,
	               |	бит_мто_ПотребностиНоменклатурыОстатки.ДокументПланирования КАК Регистратор
	               |ИЗ
	               |	РегистрНакопления.бит_мто_ПотребностиНоменклатуры.Остатки(
	               |			&МоментДокумента,
	               |			Организация = &Организация
	               |				И ДокументПланирования В
	               |					(ВЫБРАТЬ
	               |						ДокументыПланирования.ДокументПланирования
	               |					ИЗ
	               |						ДокументыПланирования КАК ДокументыПланирования)) КАК бит_мто_ПотребностиНоменклатурыОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_мто_ПотребностиНоменклатурыОстатки.Организация,
	               |	бит_мто_ПотребностиНоменклатурыОстатки.ДокументПланирования,
	               |	бит_мто_ПотребностиНоменклатурыОстатки.Номенклатура,
	               |	бит_мто_ПотребностиНоменклатурыОстатки.ДокументПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.Организация КАК Организация,
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.ДокументПланирования КАК ДокументПланирования,
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.Номенклатура КАК Номенклатура,
	               |	СУММА(бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.КоличествоРасход) КАК Количество,
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.Регистратор КАК Регистратор
	               |ИЗ
	               |	ДокументыПланирования КАК ДокументыПланирования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_мто_ПотребностиНоменклатуры.ОстаткиИОбороты(, &МоментДокумента, Регистратор, , Организация = &Организация) КАК бит_мто_ПотребностиНоменклатурыОстаткиИОбороты
	               |		ПО ДокументыПланирования.ДокументПланирования = бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.Регистратор
	               |ГДЕ
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.Регистратор ССЫЛКА Документ.бит_мто_ЗаявкаНаЗакупку
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.Организация,
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.ДокументПланирования,
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.Номенклатура,
	               |	бит_мто_ПотребностиНоменклатурыОстаткиИОбороты.Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДокументыПланирования";
	
	Пакет_ПотребностиНоменклатуры = Запрос.ВыполнитьПакет();
	
	Возврат Пакет_ПотребностиНоменклатуры;

КонецФункции // СформироватьТаблицуДвижений_ПотребностьНоменклатуры()

// Процедура получает остатки по регистру накопления "бит_мто_ПланируемаяЗакупкаНоменклатуры",
// для закрытия остатков.
// 
// Параметры: 
//  ТаблицаПоДокументам 	- результат запроса по табличной части "ДокументыПланирования",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
// 
// Возвращаемое значение:
//  Сформированная таблиица значений.
// 
// 
Функция СформироватьПланируемаяЗакупкаНоменклатуры(ТаблицаПоДокументам, СтруктураШапкиДокумента)

	// Получаем остатки по документам планирования.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментДокумента"		  , МоментВремени());
	Запрос.УстановитьПараметр("Организация"		  	  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДокументыПланирования" , ТаблицаПоДокументам);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументыПланирования.ДокументПланирования,
	               |	ДокументыПланирования.ПричинаЗакрытия
	               |ПОМЕСТИТЬ ДокументыПланирования
	               |ИЗ
	               |	&ДокументыПланирования КАК ДокументыПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки.ДокументПланирования,
	               |	бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки.Номенклатура,
	               |	СУММА(бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки.КоличествоОстаток) КАК Количество,
	               |	бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки.Потребность,
	               |	СУММА(бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки.СуммаОстаток) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.бит_мто_ПланируемаяЗакупкаНоменклатуры.Остатки(
	               |			&МоментДокумента,
	               |			ДокументПланирования В
	               |				(ВЫБРАТЬ
	               |					ДокументыПланирования.ДокументПланирования
	               |				ИЗ
	               |					ДокументыПланирования КАК ДокументыПланирования)) КАК бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки.ДокументПланирования,
	               |	бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки.Номенклатура,
	               |	бит_мто_ПланируемаяЗакупкаНоменклатурыОстатки.Потребность
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ДокументыПланирования";
	
	ТаблицаДвижений_ПланируемаяЗакупка = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДвижений_ПланируемаяЗакупка;

КонецФункции // СформироватьТаблицуДвижений_ПланируемаяЗакупкаНоменклатуры()

// Функция получает таблицу контрольных значений бюджета для оплаченных платежных позиций.
// 
// Параметры:
// 	ТаблицаПоДокументам - ТаблицаЗначений.
// 
// Возвращаемое значение:
// 	ТаблицаДвижений - ТаблицаЗначений.
// 
Функция ПолучитьПрошедшиеОплатыПоЗаявкам(СтруктураШапкиДокумента, ТаблицаПоДокументам)
	
	МассивЗаявок = Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаПоДокументам Цикл
		Если ТипЗнч(ТекСтрока.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств")
			ИЛИ ТипЗнч(ТекСтрока.ДокументПланирования) = Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты") Тогда
			
			МассивЗаявок.Добавить(ТекСтрока.ДокументПланирования);
		КонецЕсли;
	КонецЦикла;
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивЗаявок);
	
	НаборЗаписей = Движения.бит_КонтрольныеЗначенияБюджетов;    
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Если МассивЗаявок.Количество() = 0 Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли;
	
	// Запросом получаем информацию по оплаченным платежным позициям.
	// Оплаченными считаем только те платежные позиции, по которым есть проведенные платежные документы.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ПлатежнаяПозиция.Ссылка
	|ПОМЕСТИТЬ ПлатежныеПозиции
	|ИЗ
	|	Документ.бит_ПлатежнаяПозиция КАК бит_ПлатежнаяПозиция
	|ГДЕ
	|	бит_ПлатежнаяПозиция.ДокументОснование В(&МассивЗаявок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_РасходнаяПозиция.Ссылка
	|ИЗ
	|	Документ.бит_РасходнаяПозиция КАК бит_РасходнаяПозиция
	|ГДЕ
	|	бит_РасходнаяПозиция.ДокументОснование В(&МассивЗаявок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.ДокументПланирования КАК ПлатежнаяПозиция,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.СуммаОстаток КАК СуммаОстаток,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Организация,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.ВидДенежныхСредств,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Валюта,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.ЦФО,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.СтатьяОборотов,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Проект,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.НоменклатурнаяГруппа,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Контрагент,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.ДоговорКонтрагента,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.БанковскийСчет,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_1,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_2,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_3,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_4,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_5,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_6,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_7
	|ПОМЕСТИТЬ ОстаткиПоПозициям
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И ДокументПланирования.ДокументОснование В (&МассивЗаявок)) КАК бит_ПланируемыйРасходДенежныхСредствОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ПланируемыеЗатратыОстатки.ДокументПланирования,
	|	бит_ПланируемыеЗатратыОстатки.СуммаОстаток,
	|	бит_ПланируемыеЗатратыОстатки.Организация,
	|	NULL,
	|	бит_ПланируемыеЗатратыОстатки.Валюта,
	|	бит_ПланируемыеЗатратыОстатки.ЦФО,
	|	бит_ПланируемыеЗатратыОстатки.СтатьяОборотов,
	|	бит_ПланируемыеЗатратыОстатки.Проект,
	|	бит_ПланируемыеЗатратыОстатки.НоменклатурнаяГруппа,
	|	бит_ПланируемыеЗатратыОстатки.Контрагент,
	|	бит_ПланируемыеЗатратыОстатки.ДоговорКонтрагента,
	|	NULL,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_1,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_2,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_3,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_4,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_5,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_6,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_7
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыеЗатраты.Остатки(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И ДокументПланирования.ДокументОснование В (&МассивЗаявок)) КАК бит_ПланируемыеЗатратыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор КАК ПлатежнаяПозиция,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Организация,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.ВидДенежныхСредств,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.ЦФО,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.СтатьяОборотов,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Проект,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.НоменклатурнаяГруппа,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Контрагент,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.ДоговорКонтрагента,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.БанковскийСчет,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_1,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_2,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_3,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_4,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_5,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_6,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_7,
	|	СУММА(бит_ПланируемыйРасходДенежныхСредствОбороты.СуммаПриход) КАК СуммаПриход,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор.ДокументОснование КАК Заявка
	|ПОМЕСТИТЬ ДанныеПлатежныхПозиций
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ДокументПланирования В
	|				(ВЫБРАТЬ
	|					ПлатежныеПозиции.Ссылка
	|				ИЗ
	|					ПлатежныеПозиции КАК ПлатежныеПозиции)) КАК бит_ПланируемыйРасходДенежныхСредствОбороты
	|ГДЕ
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор В
	|			(ВЫБРАТЬ
	|				ПлатежныеПозиции.Ссылка
	|			ИЗ
	|				ПлатежныеПозиции КАК ПлатежныеПозиции)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_3,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_2,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_7,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_6,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_5,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_4,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.БанковскийСчет,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Аналитика_1,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.ДоговорКонтрагента,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.НоменклатурнаяГруппа,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.СтатьяОборотов,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.ВидДенежныхСредств,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.ЦФО,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Организация,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Контрагент,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Проект,
	|	бит_ПланируемыйРасходДенежныхСредствОбороты.Регистратор.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ПланируемыеЗатратыОбороты.Регистратор,
	|	бит_ПланируемыеЗатратыОбороты.Организация,
	|	NULL,
	|	бит_ПланируемыеЗатратыОбороты.ЦФО,
	|	бит_ПланируемыеЗатратыОбороты.СтатьяОборотов,
	|	бит_ПланируемыеЗатратыОбороты.Проект,
	|	бит_ПланируемыеЗатратыОбороты.НоменклатурнаяГруппа,
	|	бит_ПланируемыеЗатратыОбороты.Контрагент,
	|	бит_ПланируемыеЗатратыОбороты.ДоговорКонтрагента,
	|	NULL,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_1,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_2,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_3,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_4,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_5,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_6,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_7,
	|	СУММА(бит_ПланируемыеЗатратыОбороты.СуммаПриход),
	|	бит_ПланируемыеЗатратыОбороты.Регистратор.ДокументОснование
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыеЗатраты.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ДокументПланирования В
	|				(ВЫБРАТЬ
	|					ПлатежныеПозиции.Ссылка
	|				ИЗ
	|					ПлатежныеПозиции КАК ПлатежныеПозиции)) КАК бит_ПланируемыеЗатратыОбороты
	|ГДЕ
	|	бит_ПланируемыеЗатратыОбороты.Регистратор В
	|			(ВЫБРАТЬ
	|				ПлатежныеПозиции.Ссылка
	|			ИЗ
	|				ПлатежныеПозиции КАК ПлатежныеПозиции)
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ПланируемыеЗатратыОбороты.ЦФО,
	|	бит_ПланируемыеЗатратыОбороты.ДоговорКонтрагента,
	|	бит_ПланируемыеЗатратыОбороты.Контрагент,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_3,
	|	бит_ПланируемыеЗатратыОбороты.НоменклатурнаяГруппа,
	|	бит_ПланируемыеЗатратыОбороты.СтатьяОборотов,
	|	бит_ПланируемыеЗатратыОбороты.Регистратор,
	|	бит_ПланируемыеЗатратыОбороты.Организация,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_2,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_1,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_5,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_6,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_4,
	|	бит_ПланируемыеЗатратыОбороты.Аналитика_7,
	|	бит_ПланируемыеЗатратыОбороты.Проект,
	|	бит_ПланируемыеЗатратыОбороты.Регистратор.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПлатежныхПозиций.ПлатежнаяПозиция,
	|	ДанныеПлатежныхПозиций.Организация,
	|	ДанныеПлатежныхПозиций.ВидДенежныхСредств,
	|	ДанныеПлатежныхПозиций.ЦФО,
	|	ДанныеПлатежныхПозиций.СтатьяОборотов,
	|	ДанныеПлатежныхПозиций.Проект,
	|	ДанныеПлатежныхПозиций.НоменклатурнаяГруппа,
	|	ДанныеПлатежныхПозиций.Контрагент,
	|	ДанныеПлатежныхПозиций.ДоговорКонтрагента,
	|	ДанныеПлатежныхПозиций.БанковскийСчет,
	|	ДанныеПлатежныхПозиций.Аналитика_1,
	|	ДанныеПлатежныхПозиций.Аналитика_2,
	|	ДанныеПлатежныхПозиций.Аналитика_3,
	|	ДанныеПлатежныхПозиций.Аналитика_4,
	|	ДанныеПлатежныхПозиций.Аналитика_5,
	|	ДанныеПлатежныхПозиций.Аналитика_6,
	|	ДанныеПлатежныхПозиций.Аналитика_7,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОстаткиПоПозициям.СуммаОстаток, 0) <= 0
	|			ТОГДА ДанныеПлатежныхПозиций.СуммаПриход
	|		ИНАЧЕ ДанныеПлатежныхПозиций.СуммаПриход - ЕСТЬNULL(ОстаткиПоПозициям.СуммаОстаток, 0)
	|	КОНЕЦ КАК Сумма,
	|	ДанныеПлатежныхПозиций.СуммаПриход,
	|	ОстаткиПоПозициям.СуммаОстаток,
	|	ДанныеПлатежныхПозиций.Заявка,
	|	ДанныеПлатежныхПозиций.ПлатежнаяПозиция.ДокументОснование.Сценарий КАК Сценарий
	|ИЗ
	|	ДанныеПлатежныхПозиций КАК ДанныеПлатежныхПозиций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоПозициям КАК ОстаткиПоПозициям
	|		ПО ДанныеПлатежныхПозиций.ПлатежнаяПозиция = ОстаткиПоПозициям.ПлатежнаяПозиция
	|			И ДанныеПлатежныхПозиций.Организация = ОстаткиПоПозициям.Организация
	|			И ДанныеПлатежныхПозиций.ЦФО = ОстаткиПоПозициям.ЦФО
	|			И ДанныеПлатежныхПозиций.СтатьяОборотов = ОстаткиПоПозициям.СтатьяОборотов
	|			И ДанныеПлатежныхПозиций.Контрагент = ОстаткиПоПозициям.Контрагент
	|			И ДанныеПлатежныхПозиций.ДоговорКонтрагента = ОстаткиПоПозициям.ДоговорКонтрагента
	|			И ДанныеПлатежныхПозиций.Проект = ОстаткиПоПозициям.Проект
	|			И ДанныеПлатежныхПозиций.НоменклатурнаяГруппа = ОстаткиПоПозициям.НоменклатурнаяГруппа
	|			И ДанныеПлатежныхПозиций.БанковскийСчет = ОстаткиПоПозициям.БанковскийСчет
	|			И ДанныеПлатежныхПозиций.Аналитика_1 = ОстаткиПоПозициям.Аналитика_1
	|			И ДанныеПлатежныхПозиций.Аналитика_2 = ОстаткиПоПозициям.Аналитика_2
	|			И ДанныеПлатежныхПозиций.Аналитика_3 = ОстаткиПоПозициям.Аналитика_3
	|			И ДанныеПлатежныхПозиций.Аналитика_4 = ОстаткиПоПозициям.Аналитика_4
	|			И ДанныеПлатежныхПозиций.Аналитика_5 = ОстаткиПоПозициям.Аналитика_5
	|			И ДанныеПлатежныхПозиций.Аналитика_6 = ОстаткиПоПозициям.Аналитика_6
	|			И ДанныеПлатежныхПозиций.Аналитика_7 = ОстаткиПоПозициям.Аналитика_7
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ОстаткиПоПозициям.СуммаОстаток, 0) <= 0
	|				ТОГДА ДанныеПлатежныхПозиций.СуммаПриход
	|			ИНАЧЕ ДанныеПлатежныхПозиций.СуммаПриход - ЕСТЬNULL(ОстаткиПоПозициям.СуммаОстаток, 0)
	|		КОНЕЦ <> 0";
	
	Результат = Запрос.Выполнить();
	ДанныеПлатежныхПозиций = Результат.Выгрузить();
	
	ДанныеПлатежныхПозиций.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ДанныеПлатежныхПозиций.ЗаполнитьЗначения(0,"Количество");	
	ДанныеПлатежныхПозиций.Колонки.Добавить("Период",Новый ОписаниеТипов("Дата"));
	
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	// Получаем имя типа Сценарии бюджетирования в зависимости от текущего решения.
	ИмяТипаСценарии = бит_ОбщегоНазначения.ПолучитьИмяТипаСценарииБюджетирования();
	// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();

	// Для каждой заявки получим информацию о том, какую часть бюджета отъели оплаченные платежные позиции,	
	// на основании этой информации принимаем решение сколько возвращать в бюджет при закрытии заявки.
	Для Каждого ТекЗаявка Из МассивЗаявок Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Заявка", ТекЗаявка);
		
		ТаблицаДляКонтроля = ДанныеПлатежныхПозиций.Скопировать(СтруктураОтбора);
		
		Если ТаблицаДляКонтроля.Количество() = 0 Тогда
			// Нет оплаченных платежных позиций
			Продолжить;
		КонецЕсли;
		
		// Далее выполняем стандартную последовательность действий для выполнения контроля по бюджету.
		Периодичность = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(ТекЗаявка.Сценарий);	
		
		ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ТекЗаявка.ДатаРасхода,Периодичность);
		ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ТекЗаявка.ДатаРасхода,Периодичность);

		ТаблицаДляКонтроля.ЗаполнитьЗначения(ДатаНач,"Период");

		Если ТипЗнч(ТекЗаявка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			СтруктураПараметров = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ТекЗаявка);
			
			НастройкаКонтролироватьПоБюджету = ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьЗаявкуПоБюджету;
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Организация",ТекЗаявка.Организация);
			СтруктураПараметров.Вставить("ЦФО"		  ,ТекЗаявка.ЦФО);
			СтруктураПараметров.Вставить("ПроверятьПоБюджету",Истина);
			
			НастройкаКонтролироватьПоБюджету = ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьЗаявкуНаЗатратыПоБюджету;
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.ПроверятьПоБюджету Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ТекЗаявка.Дата,,СтруктураПараметров,"Ошибки");
		
		КонтролироватьБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы,НастройкаКонтролироватьПоБюджету);
				
				
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("Сценарий");
		МассивИсключений.Добавить("СтатьяОборотов");
		МассивИсключений.Добавить("БанковскийСчет");
		
		ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,НастройкиИзмерений);
		
		бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
		
		ВалютаСценария    = ТекЗаявка.Сценарий.Валюта;
		СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария,ТекЗаявка.Дата);		
		
		Для Каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
			
			СтрокаТаблицы.Сумма  = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
										ТекЗаявка.ВалютаДокумента, ВалютаСценария, ТекЗаявка.КурсДокумента, 
										СтруктураСценарий.Курс, ТекЗаявка.КратностьДокумента, СтруктураСценарий.Кратность);
			
		КонецЦикла; 
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
		СтруктураПараметров.Вставить("Сценарий"                     ,ТекЗаявка.Сценарий);
		СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
		СтруктураПараметров.Вставить("РежимКонтроля"                ,"Заявки");
		
		ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
				
		Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
		Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
		Запрос.УстановитьПараметр("Сценарий"      ,ТекЗаявка.Сценарий);
		Запрос.УстановитьПараметр("СценарийКонтролируемый", Справочники[ИмяСправочникаСценарии].ПустаяСсылка());
		Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
		Запрос.УстановитьПараметр("Ссылка"                , ТекЗаявка);
		Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
		
		бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		// Получим таблицу контрольных значений бюджета для платежных позиций.
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДокументПланирования		 = ТекЗаявка;
			НоваяСтрока.СуммаСценарийИсполнение		 = Выборка.Сумма;
			НоваяСтрока.КоличествоСценарийИсполнение = Выборка.Количество;
		
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаДвижений;
	
КонецФункции

// Процедура проверяет на наличие документов планирования в документах "Закрытие заявок".
// 
// Параметры: 
//  ТаблицаПоДокументам     - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеДокументыПланирования(Отказ)
	
	Если ДокументыПланирования.Количество() = 0 Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список" , "Заполнение",,,НСтр("ru = 'Документы планирования'")); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
	Иначе
		
		ПолеСписка = Новый Структура("ДокументПланирования");
		бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект, "ДокументыПланирования", 
				ПолеСписка, Отказ);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент",		Ссылка);
		Запрос.УстановитьПараметр("ДокументыПланирования" , ДокументыПланирования.Выгрузить());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования
		|ПОМЕСТИТЬ ДокументыПланирования
		|ИЗ
		|	&ДокументыПланирования КАК ДокументыПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПланирования.Ссылка КАК Ссылка,
		|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования
		|ИЗ
		|	Документ.бит_ЗакрытиеЗаявок.ДокументыПланирования КАК ДокументыПланирования
		|ГДЕ
		|	ДокументыПланирования.ДокументПланирования В
		|			(ВЫБРАТЬ
		|				ДокументыПланирования.ДокументПланирования
		|			ИЗ
		|				ДокументыПланирования КАК ДокументыПланирования)
		|	И ДокументыПланирования.Ссылка <> &ТекущийДокумент
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-04-14 (#3681)
		|	И НЕ ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-04-14 (#3681)
		|	И ДокументыПланирования.Ссылка.Проведен";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пояснение = Нстр("ru = 'Уже закрыт документом %1.'");
		Для каждого СтрокаТаблицы Из ДокументыПланирования Цикл
		
			Поле = "ДокументыПланирования[%1].ДокументПланирования";
			Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						Поле, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
		
			Если Выборка.НайтиСледующий(Новый Структура("ДокументПланирования", СтрокаТаблицы.ДокументПланирования)) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ",
									НСтр("ru = 'Документ планирования'"), СтрокаТаблицы.НомерСтроки, 
									НСтр("ru = 'Документы планирования'"), СтрШаблон(Пояснение, Выборка.Ссылка));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(ТаблицаПоДокументам, Реквизиты, Отказ)
	
	// Подготовим таблицу товаров для проведения.
	ПланируемыйРасходДенежныхСредств = СформироватьПланируемыйРасходДенежныхСредств(ТаблицаПоДокументам, Реквизиты);
	
	// Движение регистра накопления "бит_ПланируемыйРасходДенежныхСредств" - РАСХОД.
	Движения.бит_ПланируемыйРасходДенежныхСредств.мПериод          = Реквизиты.Период;
	Движения.бит_ПланируемыйРасходДенежныхСредств.мТаблицаДвижений = ПланируемыйРасходДенежныхСредств;
	Движения.бит_ПланируемыйРасходДенежныхСредств.ВыполнитьРасход();
	
	// Подготовим таблицу затрат для проведения.
	ПланируемыеЗатраты = СформироватьПланируемыеЗатраты(ТаблицаПоДокументам, Реквизиты);
	
	// Движение регистра накопления "бит_ПланируемыеЗатраты" - РАСХОД.
	Движения.бит_ПланируемыеЗатраты.мПериод          = Реквизиты.Период;
	Движения.бит_ПланируемыеЗатраты.мТаблицаДвижений = ПланируемыеЗатраты;
	Движения.бит_ПланируемыеЗатраты.ВыполнитьРасход();

	// Сформируем таблицу движений "ТаблицаДвижений_КонтрольныеЗначенияБюджетов".
	КонтрольныеЗначенияБюджетов = СформироватьКонтрольныеЗначенияБюджетов(Реквизиты, 
		ТаблицаПоДокументам, ПланируемыйРасходДенежныхСредств, ПланируемыеЗатраты);
	
	// Движение регистра накопления "бит_КонтрольныеЗначенияБюджетов",
	// сторнируем обороты.
	Движения.бит_КонтрольныеЗначенияБюджетов.мПериод          = Реквизиты.Период;
	Движения.бит_КонтрольныеЗначенияБюджетов.мТаблицаДвижений = КонтрольныеЗначенияБюджетов;
	Движения.бит_КонтрольныеЗначенияБюджетов.ДобавитьДвижение();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-19 (#3075)
	// Движение регистра накопления "бит_ОборотыПоБюджетам",
	// сторнируем обороты по ЗНРДС.
	ТаблицаДвижений_ОборотыПоБюджетам = СформироватьТаблицуДвижений_ОборотыПоБюджетам(Реквизиты, ТаблицаПоДокументам);
	
	Движения.бит_ОборотыПоБюджетам.мПериод          = Реквизиты.Период;
	Движения.бит_ОборотыПоБюджетам.мТаблицаДвижений = ТаблицаДвижений_ОборотыПоБюджетам;
	Движения.бит_ОборотыПоБюджетам.ДобавитьДвижение();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-19 (#3075)	
	
	// Движения рег накоп Потребность Номенклатуры.
	ПакетЗапроса_ПотребностиНоменклатуры = СформироватьПотребностьНоменклатуры(ТаблицаПоДокументам, Реквизиты);
	
	// Движение регистра накопления "бит_мто_ПотребностиНоменклатуры" - РАСХОД.
	Движения.бит_мто_ПотребностиНоменклатуры.мПериод          = Реквизиты.Период;
	Движения.бит_мто_ПотребностиНоменклатуры.мТаблицаДвижений = ПакетЗапроса_ПотребностиНоменклатуры[1].Выгрузить();
	Движения.бит_мто_ПотребностиНоменклатуры.ВыполнитьРасход();
	
	// Движение регистра накопления "бит_мто_ПотребностиНоменклатуры" - ПРИХОД.
	Движения.бит_мто_ПотребностиНоменклатуры.мПериод          = Реквизиты.Период;
	Движения.бит_мто_ПотребностиНоменклатуры.мТаблицаДвижений = ПакетЗапроса_ПотребностиНоменклатуры[2].Выгрузить();
	Движения.бит_мто_ПотребностиНоменклатуры.ВыполнитьПриход();
	
	// Движения рег накоп Планируемая закупка номенклатуры.
	ТаблицаДвижений_ПланируемаяЗакупка = СформироватьПланируемаяЗакупкаНоменклатуры(ТаблицаПоДокументам, Реквизиты);
	
	// Движение регистра накопления "бит_мто_ПотребностиНоменклатуры" - РАСХОД.
	Движения.бит_мто_ПланируемаяЗакупкаНоменклатуры.мПериод          = Реквизиты.Период;
	Движения.бит_мто_ПланируемаяЗакупкаНоменклатуры.мТаблицаДвижений = ТаблицаДвижений_ПланируемаяЗакупка;
	Движения.бит_мто_ПланируемаяЗакупкаНоменклатуры.ВыполнитьРасход();
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Функция формирует соответствие статусов объектов для закрытия.
// 
// Параметры: 
//  Нет.
// 
// Возвращаемое значение:
//  СоответствиеСтатусовОбъектов - соответствие.
// 
Функция СформироватьСоответствиеСтатусовОбъектовДляЗакрытия()
	
	СсылкаСтатусыОбъектов = Справочники.бит_СтатусыОбъектов;
	
	СоответствиеСтатусовОбъектов = Новый Соответствие;
	
	// Соответствие для документа "Заявка на расходование денежных средств".
	СтатусЗаявка_Закрыта = СсылкаСтатусыОбъектов.Заявка_Закрыта;
	
	СоответствиеСтатусовОбъектов.Вставить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств"), СтатусЗаявка_Закрыта);
	
	// Соответствие для документа "Заявка на расходование денежных средств (Общая)".
	СтатусЗаявкаОбщая_Закрыта = СсылкаСтатусыОбъектов.ЗаявкаОбщая_Закрыта;
	
	СоответствиеСтатусовОбъектов.Вставить(Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредствОбщая"), СтатусЗаявкаОбщая_Закрыта);
	
	// Соответствие для документа "Платежная позиция".
	СтатусПлатежнаяПозиция_Закрыта = СсылкаСтатусыОбъектов.ПлатежнаяПозиция_Закрыта;
	
	СоответствиеСтатусовОбъектов.Вставить(Тип("ДокументСсылка.бит_ПлатежнаяПозиция"), СтатусПлатежнаяПозиция_Закрыта);
	
	// Соответствие для документа "Заявка на затраты".
	СтатусЗаявкаНаЗатраты_Закрыта = СсылкаСтатусыОбъектов.ЗаявкаНаЗатраты_Закрыта;
	
	СоответствиеСтатусовОбъектов.Вставить(Тип("ДокументСсылка.бит_ЗаявкаНаЗатраты"), СтатусЗаявкаНаЗатраты_Закрыта);
	
	// Соответствие для документа "Расходная позиция".
	СтатусРасходнаяПозиция_Закрыта = СсылкаСтатусыОбъектов.РасходнаяПозиция_Закрыта;
	
	СоответствиеСтатусовОбъектов.Вставить(Тип("ДокументСсылка.бит_РасходнаяПозиция"), СтатусРасходнаяПозиция_Закрыта);
	
	// Соответствие для документа "Заявка на потребность".
	СтатусЗаявкаНаПотребность_Закрыта = СсылкаСтатусыОбъектов.ЗаявкаНаПотребность_Закрыта;
	
	СоответствиеСтатусовОбъектов.Вставить(Тип("ДокументСсылка.бит_мто_ЗаявкаНаПотребность"), СтатусЗаявкаНаПотребность_Закрыта);
	
	// Соответствие для документа "Заявка на закупку".
	СтатусЗаявкаНаЗакупку_Закрыта = СсылкаСтатусыОбъектов.ЗаявкаНаЗакупку_Закрыта;
	
	СоответствиеСтатусовОбъектов.Вставить(Тип("ДокументСсылка.бит_мто_ЗаявкаНаЗакупку"), СтатусЗаявкаНаЗакупку_Закрыта);
	
	Возврат СоответствиеСтатусовОбъектов;
	
КонецФункции // СформироватьСоответствиеСтатусовОбъектовДляЗакрытия()

Функция СторноПозицииДляКонтроляБюджетов(СтруктураШапкиДокумента, ТаблицаПоДокументам)
	
	Позиции = ТаблицаПоДокументам.СкопироватьКолонки();
	Для каждого СтрокаТаблицы Из ТаблицаПоДокументам Цикл
		Если ТипЗнч(СтрокаТаблицы.ДокументПланирования) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция")
		 ИЛИ ТипЗнч(СтрокаТаблицы.ДокументПланирования) = Тип("ДокументСсылка.бит_РасходнаяПозиция") Тогда
			
			 НоваяСтрока = Позиции.Добавить();
			 ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли; 
	КонецЦикла; 
	
	НаборЗаписей = Движения.бит_КонтрольныеЗначенияБюджетов;    
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();

	Если Позиции.Количество() = 0 Тогда
		Возврат ТаблицаДвижений;
	КонецЕсли; 
	
	// Запросом получаем информацию по оплаченным платежным позициям.
	// Оплаченными считаем только те платежные позиции, по которым есть проведенные платежные документы.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Позиции", Позиции.ВыгрузитьКолонку("ДокументПланирования"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ЗаявкаНаРасходованиеСредств.Ссылка КАК Заявка,
	|	бит_ЗаявкаНаРасходованиеСредств.Сценарий КАК Сценарий,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.ДокументПланирования КАК ПлатежнаяПозиция,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Организация КАК Организация,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.ВидДенежныхСредств КАК ВидДенежныхСредств,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.ЦФО КАК ЦФО,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Проект КАК Проект,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Контрагент КАК Контрагент,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.БанковскийСчет КАК БанковскийСчет,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_1 КАК Аналитика_1,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_2 КАК Аналитика_2,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_3 КАК Аналитика_3,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_4 КАК Аналитика_4,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_5 КАК Аналитика_5,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_6 КАК Аналитика_6,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.Аналитика_7 КАК Аналитика_7,
	|	бит_ПланируемыйРасходДенежныхСредствОстатки.СуммаОстаток КАК Сумма,
	|	0 КАК Количество,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	ВЫБОР
	|		КОГДА бит_ЗаявкаНаРасходованиеСредств.Сценарий.бит_Периодичность = ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.Месяц)
	|		ИНАЧЕ бит_ЗаявкаНаРасходованиеСредств.Сценарий.бит_Периодичность
	|	КОНЕЦ КАК Периодичность,
	|	бит_ЗаявкаНаРасходованиеСредств.ДатаРасхода КАК ДатаРасхода,
	|	бит_ЗаявкаНаРасходованиеСредств.Дата КАК ДатаЗаявки,
	|	бит_ЗаявкаНаРасходованиеСредств.Сценарий.Валюта КАК СценарийВалюта,
	|	бит_ЗаявкаНаРасходованиеСредств.КурсДокумента КАК КурсДокумента,
	|	бит_ЗаявкаНаРасходованиеСредств.КратностьДокумента КАК КратностьДокумента,
	|	бит_ЗаявкаНаРасходованиеСредств.ВалютаДокумента КАК ВалютаДокумента
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств.Остатки(&МоментВремени, ДокументПланирования В (&Позиции)) КАК бит_ПланируемыйРасходДенежныхСредствОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаРасходованиеСредств КАК бит_ЗаявкаНаРасходованиеСредств
	|		ПО бит_ПланируемыйРасходДенежныхСредствОстатки.ДокументПланирования.ДокументОснование = бит_ЗаявкаНаРасходованиеСредств.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_ЗаявкаНаЗатраты.Ссылка,
	|	бит_ЗаявкаНаЗатраты.Сценарий,
	|	бит_ПланируемыеЗатратыОстатки.ДокументПланирования,
	|	бит_ПланируемыеЗатратыОстатки.Организация,
	|	НЕОПРЕДЕЛЕНО,
	|	бит_ПланируемыеЗатратыОстатки.ЦФО,
	|	бит_ПланируемыеЗатратыОстатки.СтатьяОборотов,
	|	бит_ПланируемыеЗатратыОстатки.Проект,
	|	бит_ПланируемыеЗатратыОстатки.НоменклатурнаяГруппа,
	|	бит_ПланируемыеЗатратыОстатки.Контрагент,
	|	бит_ПланируемыеЗатратыОстатки.ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_1,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_2,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_3,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_4,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_5,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_6,
	|	бит_ПланируемыеЗатратыОстатки.Аналитика_7,
	|	бит_ПланируемыеЗатратыОстатки.СуммаОстаток,
	|	0,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВЫБОР
	|		КОГДА бит_ЗаявкаНаЗатраты.Сценарий.бит_Периодичность = ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.Месяц)
	|		ИНАЧЕ бит_ЗаявкаНаЗатраты.Сценарий.бит_Периодичность
	|	КОНЕЦ,
	|	бит_ЗаявкаНаЗатраты.ДатаРасхода,
	|	бит_ЗаявкаНаЗатраты.Дата,
	|	бит_ЗаявкаНаЗатраты.Сценарий.Валюта,
	|	бит_ЗаявкаНаЗатраты.КурсДокумента,
	|	бит_ЗаявкаНаЗатраты.КратностьДокумента,
	|	бит_ЗаявкаНаЗатраты.ВалютаДокумента
	|ИЗ
	|	РегистрНакопления.бит_ПланируемыеЗатраты.Остатки(&МоментВремени, ДокументПланирования В (&Позиции)) КАК бит_ПланируемыеЗатратыОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ЗаявкаНаЗатраты КАК бит_ЗаявкаНаЗатраты
	|		ПО бит_ПланируемыеЗатратыОстатки.ДокументПланирования = бит_ЗаявкаНаЗатраты.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(ЦФО),
	|	МАКСИМУМ(Периодичность),
	|	МАКСИМУМ(ДатаРасхода),
	|	МАКСИМУМ(ДатаЗаявки),
	|	МАКСИМУМ(СценарийВалюта),
	|	МАКСИМУМ(КурсДокумента),
	|	МАКСИМУМ(КратностьДокумента),
	|	МАКСИМУМ(ВалютаДокумента)
	|ПО
	|	Заявка";
	
	Результат = Запрос.Выполнить();
	ВыборкаЗаявка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаДляКонтроля = Новый ТаблицаЗначений(); 
	Для каждого Колонка Из Результат.Колонки Цикл
		ТаблицаДляКонтроля.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла; 
	
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	// Получаем имя типа Сценарии бюджетирования в зависимости от текущего решения.
	ИмяТипаСценарии = бит_ОбщегоНазначения.ПолучитьИмяТипаСценарииБюджетирования();
	// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();

	Пока ВыборкаЗаявка.Следующий() Цикл
		
		ТекЗаявка = ВыборкаЗаявка.Заявка;
		Детали    = ВыборкаЗаявка.Выбрать();
		ТаблицаДляКонтроля.Очистить();
		
		Пока Детали.Следующий() Цикл
			НоваяСтрока = ТаблицаДляКонтроля.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Детали); 
		КонецЦикла; 
				
		// Далее выполняем стандартную последовательность действий для выполнения контроля по бюджету.
		ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ВыборкаЗаявка.ДатаРасхода, ВыборкаЗаявка.Периодичность);
		ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ВыборкаЗаявка.ДатаРасхода, ВыборкаЗаявка.Периодичность);

		ТаблицаДляКонтроля.ЗаполнитьЗначения(ДатаНач, "Период");

		Если ТипЗнч(ТекЗаявка) = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			СтруктураПараметров = бит_Казначейство.ПолучитьПараметрыДляУправленияВидимостью(ТекЗаявка);
			
			НастройкаКонтролироватьПоБюджету = ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьЗаявкуПоБюджету;
		Иначе
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Организация",ВыборкаЗаявка.Организация);
			СтруктураПараметров.Вставить("ЦФО"		  ,ВыборкаЗаявка.ЦФО);
			СтруктураПараметров.Вставить("ПроверятьПоБюджету",Истина);
			
			НастройкаКонтролироватьПоБюджету = ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьЗаявкуНаЗатратыПоБюджету;
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.ПроверятьПоБюджету Тогда
			Продолжить;
		КонецЕсли; 
		
		НастройкиПрограммы   = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ВыборкаЗаявка.ДатаЗаявки,,СтруктураПараметров, "Ошибки");
		КонтролироватьБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы,НастройкаКонтролироватьПоБюджету);
				
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("Сценарий");
		МассивИсключений.Добавить("СтатьяОборотов");
		МассивИсключений.Добавить("БанковскийСчет");
		
		ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,НастройкиИзмерений);
		
		бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля, ВыборкаЗаявка.Периодичность);
		
		ВалютаСценария    = ВыборкаЗаявка.СценарийВалюта;
		СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария,ВыборкаЗаявка.ДатаЗаявки);		
		
		Для Каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
			
			СтрокаТаблицы.Сумма  = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
										СтрокаТаблицы.Сумма, ВыборкаЗаявка.ВалютаДокумента, ВалютаСценария, 
										ВыборкаЗаявка.КурсДокумента, СтруктураСценарий.Курс, ВыборкаЗаявка.КратностьДокумента, 
										СтруктураСценарий.Кратность);
		КонецЦикла; 
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
		СтруктураПараметров.Вставить("Сценарий"                     ,ВыборкаЗаявка.Сценарий);
		СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
		СтруктураПараметров.Вставить("РежимКонтроля"                ,"Заявки");
		
		ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
				
		Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
		Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
		Запрос.УстановитьПараметр("Сценарий"      ,ВыборкаЗаявка.Сценарий);
		Запрос.УстановитьПараметр("СценарийКонтролируемый", Справочники[ИмяСправочникаСценарии].ПустаяСсылка());
		Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
		Запрос.УстановитьПараметр("Ссылка"                , ТекЗаявка);
		Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
		
		бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		// Получим таблицу контрольных значений бюджета для платежных позиций.
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ДокументПланирования		 = ТекЗаявка;
			НоваяСтрока.СуммаСценарийИсполнение		 = Выборка.Сумма;
			НоваяСтрока.КоличествоСценарийИсполнение = Выборка.Количество;
		
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура ОтклонитьАктивныеВизы(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_ЗакрытиеЗаявокДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
	|	бит_ЗакрытиеЗаявокДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия
	|ПОМЕСТИТЬ ЗакрываемыеДокументы
	|ИЗ
	|	Документ.бит_ЗакрытиеЗаявок.ДокументыПланирования КАК бит_ЗакрытиеЗаявокДокументыПланирования
	|ГДЕ
	|	бит_ЗакрытиеЗаявокДокументыПланирования.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗакрываемыеДокументы.ДокументПланирования КАК ДокументПланирования,
	|	ЗакрываемыеДокументы.ПричинаЗакрытия КАК ПричинаЗакрытия
	|ИЗ
	|	ЗакрываемыеДокументы КАК ЗакрываемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|		ПО ЗакрываемыеДокументы.ДокументПланирования = бит_УстановленныеВизы.Объект
	|			И (бит_УстановленныеВизы.АктивнаяВиза)
	|
	|ДЛЯ ИЗМЕНЕНИЯ";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатАктивныеВизы = Запрос.Выполнить();
	Если РезультатАктивныеВизы.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("Решение"      , Справочники.бит_ВидыРешенийСогласования.Отклонено);
	ПараметрыЗакрытия.Вставить("ДатаУстановки", ТекущаяДатаСеанса());
	ПараметрыЗакрытия.Вставить("Пользователь" , бит_ОбщегоНазначенияПовтИсп.ЗначениеПеременной("ТекущийПользователь")); 
	ПараметрыЗакрытия.Вставить("Комментарий"  , НСтр("ru = 'Введено закрытие документов планирования'"));
	
	ВыборкаОбъектовВизирования = РезультатАктивныеВизы.Выбрать();
	Пока ВыборкаОбъектовВизирования.Следующий() Цикл
		
		ОбъектВизирования = ВыборкаОбъектовВизирования.ДокументПланирования;
		
		НаборВизированияОбъекта = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
		НаборВизированияОбъекта.Отбор.Объект.Установить(ОбъектВизирования);
		НаборВизированияОбъекта.Прочитать();
		
		Для каждого ЗаписьНабора Из НаборВизированияОбъекта Цикл
			Если НЕ ЗаписьНабора.АктивнаяВиза Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ПараметрыЗакрытия);
		КонецЦикла;
		
		бит_Визирование.ДовыполнитьАлгоритмВизирования(ОбъектВизирования, НаборВизированияОбъекта, Ложь);
		бит_Визирование.УстановитьКрайниеДатыВизирования(ОбъектВизирования, НаборВизированияОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция ТаблицаДокументаДляСравнения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
	|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия
	|ИЗ
	|	Документ.бит_ЗакрытиеЗаявок.ДокументыПланирования КАК ДокументыПланирования
	|ГДЕ
	|	ДокументыПланирования.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаДокумента;

КонецФункции
 
// Процедура устанавливает статус для документов планирования.
// 
// Параметры: 
//  ТаблицаПоДокументам 		 - таблица значений, содержащая документы для установки статуса.
//  ЗакрытьДокументыПланирования - булево, признак установки закрытия документов планирования,
// 								   по умолчанию Истина.
//  ПлатежныеПозиции             - МассивСтрокТаблицыЗначений. По умолчанию Неопределено.
//  СоотОплатыПоЗаявкам          - Соответствие. По умолчанию Неопределено.
// 
Процедура УстановитьСтатусДляДокументовПланирования(ТаблицаПоДокументам, ПлатежныеПозиции, 
			СоотОплатыПоЗаявкам, РасходныеПозиции, СоотЗатратПоЗаявкам)
	
	Если ТаблицаПоДокументам.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
    ТекПользователь 	 = Пользователи.ТекущийПользователь();
	ДатаИзмененияСтатуса = ТекущаяДата();
	ВидСтатуса 			 = Перечисления.бит_ВидыСтатусовОбъектов.Статус;
	
	Для Каждого ТекСтрока Из ТаблицаПоДокументам Цикл
		// Получаем статус для закрытия из соответствия.
		НовыйСтатус = мСоответствиеСтатусовОбъектов.Получить(ТипЗнч(ТекСтрока.ДокументПланирования));
		Если НовыйСтатус <> ТекСтрока.Статус Тогда
			// Устанавливаем новый статус для документа планирования.
			бит_Визирование.УстановитьСтатусОбъекта(ТекСтрока.ДокументПланирования, ВидСтатуса, 
				НовыйСтатус, ТекСтрока.Статус, ТекПользователь, ДатаИзмененияСтатуса);
		КонецЕсли; 
	КонецЦикла;
	
	Если НЕ ПлатежныеПозиции.Количество() = 0 Тогда
		
		// Получим общую сумму закрытия по платежным позициям для заявок.
		ТаблицаЗаявок = Новый ТаблицаЗначений;
		ТаблицаЗаявок.Колонки.Добавить("Заявка");
		ТаблицаЗаявок.Колонки.Добавить("ОплатаСтатус");
		ТаблицаЗаявок.Колонки.Добавить("СуммаОстаток");
		
		Для Каждого ТекСтрока Из ПлатежныеПозиции Цикл
			НоваяСтрока = ТаблицаЗаявок.Добавить();
			НоваяСтрока.Заявка		 = ТекСтрока.ОснованиеПлатежнойПозиции;
			НоваяСтрока.ОплатаСтатус = ТекСтрока.ОплатаСтатус;
			НоваяСтрока.СуммаОстаток = ТекСтрока.СуммаОстаток;
		КонецЦикла;
		
		ТаблицаЗаявок.Свернуть("Заявка, ОплатаСтатус", "СуммаОстаток");
		
		ДатаИзмененияСтатуса = ТекущаяДата();
		
		Для Каждого ТекСтрока Из ТаблицаЗаявок Цикл
			
			СуммаОстатокЗакрытия = ТекСтрока.СуммаОстаток;
			
			Если СуммаОстатокЗакрытия = 0 Тогда
				// Закрывать нечего.
				Продолжить;
			КонецЕсли;
			
			// Получим структуру оплат для текущей заявки.
			ТекЗаявка 	   = ТекСтрока.Заявка;
			СтруктураОплат = СоотОплатыПоЗаявкам.Получить(ТекЗаявка);
			
			Если Не СтруктураОплат = Неопределено Тогда
				
				Если СтруктураОплат.СуммаОплата = 0
					Или Не СтруктураОплат.Разность > 0 Тогда
					// Если сумма оплаты равна нулю
					// или остаток оплаты (разность) равен нулю, меньше нуля (перелата), тогда пропускаем строку.
					Продолжить;
				КонецЕсли;
				
				// При закрытии изменим данные об оплате с учетом закрываемой суммы.
				СтруктураОплат.СуммаОплата = СтруктураОплат.СуммаОплата + СуммаОстатокЗакрытия + СтруктураОплат.СуммаДокументаЗакрыта;
				СтруктураОплат.Разность    = СтруктураОплат.СуммаПлан 	- СтруктураОплат.СуммаОплата;
				
				СтруктураОплат.СуммаДокументаОплата   = СтруктураОплат.СуммаДокументаОплата + СуммаОстатокЗакрытия + СтруктураОплат.СуммаДокументаЗакрыта;
				СтруктураОплат.СуммаДокументаРазность = СтруктураОплат.СуммаДокументаПлан 	- СтруктураОплат.СуммаДокументаОплата;
				
				// Установим статус заявки с учетом текущей структуры оплаты.
				ОбъектЗаявка = ТекЗаявка.ПолучитьОбъект();
				ОбъектЗаявка.УстановитьСтатус(РежимЗаписиДокумента.Проведение, СтруктураОплат, Ложь);
				
				НовоеСостояниеОплаты = бит_Визирование.ОпределитьСостояниеОплаты(СтруктураОплат);
				
				// Если состояние оплаты изменено, тогда
				Если Не НовоеСостояниеОплаты = ТекСтрока.ОплатаСтатус Тогда
					бит_Визирование.УстановитьСтатусОбъекта(ТекЗаявка, Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты,
						НовоеСостояниеОплаты, ТекСтрока.ОплатаСтатус, ТекПользователь, ДатаИзмененияСтатуса);
				КонецЕсли;
			КонецЕсли; // Если Не СтруктураОплат = Неопределено Тогда.
		КонецЦикла; // Для Каждого ТекСтрока Из ТаблицаЗаявок Цикл.
	КонецЕсли;
	
	Если НЕ РасходныеПозиции.Количество() = 0 Тогда
		
		// Получим общую сумму закрытия по расходным позициям для заявок.
		ТаблицаЗаявок = Новый ТаблицаЗначений;
		ТаблицаЗаявок.Колонки.Добавить("Заявка");
		ТаблицаЗаявок.Колонки.Добавить("ЗатратыСтатус");
		ТаблицаЗаявок.Колонки.Добавить("СуммаОстаток");
		
		Для Каждого ТекСтрока Из РасходныеПозиции Цикл
			
			НоваяСтрока = ТаблицаЗаявок.Добавить();
			НоваяСтрока.Заявка		  = ТекСтрока.ОснованиеРасходнойПозиции;
			НоваяСтрока.ЗатратыСтатус = ТекСтрока.ЗатратыСтатус;
			НоваяСтрока.СуммаОстаток  = ТекСтрока.СуммаОстатокЗатраты;
			
		КонецЦикла;
		
		ТаблицаЗаявок.Свернуть("Заявка, ЗатратыСтатус", "СуммаОстаток");
		
		ТекущийПользователь  = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		ДатаИзмененияСтатуса = ТекущаяДата();
		
		Для Каждого ТекСтрока Из ТаблицаЗаявок Цикл
			
			СуммаОстатокЗакрытия = ТекСтрока.СуммаОстаток;
			
			Если СуммаОстатокЗакрытия = 0 Тогда
				// Закрывать нечего.
				Продолжить;
			КонецЕсли;
			
			// Получим структуру затрат для текущей заявки.
			ТекЗаявка 	    = ТекСтрока.Заявка;
			ЗатратыСтруктура = СоотЗатратПоЗаявкам.Получить(ТекЗаявка);
			
			Если Не ЗатратыСтруктура = Неопределено Тогда
				
				Если ЗатратыСтруктура.СуммаЗатраты = 0
					Или Не ЗатратыСтруктура.Разность > 0 Тогда
					// Если сумма по затратам равна нулю
					// или остаток по затратам (разность) равен нулю, меньше нуля (перелата), тогда пропускаем строку.
					Продолжить;
				КонецЕсли;
				
					
					ЗатратыСтруктура.СуммаЗатраты = ЗатратыСтруктура.СуммаЗатраты + СуммаОстатокЗакрытия;
					ЗатратыСтруктура.Разность    = ЗатратыСтруктура.СуммаПлан - ЗатратыСтруктура.СуммаЗатраты;
					
					ЗатратыСтруктура.СуммаДокументаЗатраты  = ЗатратыСтруктура.СуммаДокументаЗатраты + СуммаОстатокЗакрытия;
					ЗатратыСтруктура.СуммаДокументаРазность = ЗатратыСтруктура.СуммаДокументаПлан - ЗатратыСтруктура.СуммаДокументаЗатраты;
					
				
				// Установим статус заявки с учетом текущей структуры затрат.
				ОбъектЗаявка = ТекЗаявка.ПолучитьОбъект();
				ОбъектЗаявка.УстановитьСтатус(РежимЗаписиДокумента.Проведение, ЗатратыСтруктура, Ложь);
				
				НовоеСостояниеЗатрат = бит_ДоговораСервер.ОпределитьСостояниеЗатрат(ЗатратыСтруктура);
				
				// Если состояние затрат изменено, тогда
				Если Не НовоеСостояниеЗатрат = ТекСтрока.ЗатратыСтатус Тогда
					
					бит_Визирование.УстановитьСтатусОбъекта(ТекЗаявка
															,Перечисления.бит_ВидыСтатусовОбъектов.СостояниеОплаты
															,НовоеСостояниеЗатрат
															,ТекСтрока.ЗатратыСтатус
															,ТекущийПользователь
															,ДатаИзмененияСтатуса);
					
				КонецЕсли;
			КонецЕсли; // Если Не ЗатратыСтруктура = Неопределено Тогда.
		КонецЦикла; // Для Каждого ТекСтрока Из ТаблицаЗаявок Цикл.
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицыДляУстановкиСтатуса()
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		
		ЗакрытыеДокументы = ДокументыПланирования.Выгрузить();
		УдаленныеИзСписка = ЗакрытыеДокументы.СкопироватьКолонки("ДокументПланирования, ПричинаЗакрытия");
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаДокументаДляСравнения", ДополнительныеСвойства.ТаблицаДокументаДляСравнения);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
		|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия
		|ПОМЕСТИТЬ ТаблицаДокументаДляСравнения
		|ИЗ
		|	&ТаблицаДокументаДляСравнения КАК ДокументыПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
		|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия,
		|	ИСТИНА КАК ВСписке,
		|	ВЫБОР
		|		КОГДА ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ПлатежнаяПозиция
		|			ТОГДА ДокументыПланирования.ДокументПланирования.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ОснованиеПлатежнойПозиции,
		|	ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ПлатежнаяПозиция КАК ЭтоПлатежнаяПозиция,
		|	ВЫБОР
		|		КОГДА ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_РасходнаяПозиция
		|			ТОГДА ДокументыПланирования.ДокументПланирования.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ОснованиеРасходнойПозиции,
		|	ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_РасходнаяПозиция КАК ЭтоРасходнаяПозиция
		|ИЗ
		|	Документ.бит_ЗакрытиеЗаявок.ДокументыПланирования КАК ДокументыПланирования
		|ГДЕ
		|	ДокументыПланирования.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументаДляСравнения.ДокументПланирования КАК ДокументПланирования,
		|	ТаблицаДокументаДляСравнения.ПричинаЗакрытия КАК ПричинаЗакрытия,
		|	ЛОЖЬ КАК ВСписке,
		|	ВЫБОР
		|		КОГДА ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ПлатежнаяПозиция
		|			ТОГДА ДокументыПланирования.ДокументПланирования.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ОснованиеПлатежнойПозиции,
		|	ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ПлатежнаяПозиция КАК ЭтоПлатежнаяПозиция,
		|	ВЫБОР
		|		КОГДА ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_РасходнаяПозиция
		|			ТОГДА ДокументыПланирования.ДокументПланирования.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ОснованиеРасходнойПозиции,
		|	ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_РасходнаяПозиция КАК ЭтоРасходнаяПозиция
		|ИЗ
		|	ТаблицаДокументаДляСравнения КАК ТаблицаДокументаДляСравнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ЗакрытиеЗаявок.ДокументыПланирования КАК ДокументыПланирования
		|		ПО ТаблицаДокументаДляСравнения.ДокументПланирования = ДокументыПланирования.ДокументПланирования
		|			И (ДокументыПланирования.Ссылка = &Ссылка)
		|ГДЕ
		|	ДокументыПланирования.ДокументПланирования ЕСТЬ NULL";
		
		Пакет = Запрос.ВыполнитьПакет();
		ЗакрытыеДокументы = Пакет[1].Выгрузить(); 
		УдаленныеИзСписка = Пакет[2].Выгрузить();
	КонецЕсли; 
	
	ТаблицыДляУстановкиСтатуса = Новый Структура;
	ТаблицыДляУстановкиСтатуса.Вставить("ЗакрытыеДокументы", ЗакрытыеДокументы);
	ТаблицыДляУстановкиСтатуса.Вставить("УдаленныеИзСписка", УдаленныеИзСписка);

	Возврат ТаблицыДляУстановкиСтатуса;
	
КонецФункции // ТаблицыДляУстановкиСтатуса()

Процедура ОтменитьИзменениеСтатусов(УдаленныеИзСписка, ЗакрытыеДокументы)

	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ЗакрытыеДокументы, УдаленныеИзСписка);
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	ТекДата			= ТекущаяДата();
	ВидСтатуса 		= Перечисления.бит_ВидыСтатусовОбъектов.Статус;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_СтатусыОбъектов.Объект КАК Объект,
		|	бит_СтатусыОбъектов.ВидСтатуса КАК ВидСтатуса,
		|	бит_СтатусыОбъектов.Статус КАК СтатусПредыдущий,
		|	бит_СтатусыОбъектов.СтатусПредыдущий КАК Статус,
		|	бит_СтатусыОбъектов.Пользователь КАК Пользователь,
		|	бит_СтатусыОбъектов.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса
		|ИЗ
		|	РегистрСведений.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
		|ГДЕ
		|	бит_СтатусыОбъектов.Объект В (&Объект1)";
	
	Запрос.УстановитьПараметр("Объект1", УдаленныеИзСписка.ВыгрузитьКолонку("ДокументПланирования"));
	//Запрос.УстановитьПараметр("Объект2", ЗакрытыеДокументы.ВыгрузитьКолонку("ДокументПланирования"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		бит_Визирование.УстановитьСтатусОбъекта(Выборка.Объект, ВидСтатуса, Выборка.Статус, 
		Выборка.СтатусПредыдущий, ТекПользователь, ТекДата);
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-19 (#3075)
Функция СформироватьТаблицуДвижений_ОборотыПоБюджетам(СтруктураШапкиДокумента, ТаблицаПоДокументам)
	
	// Получаем записи по документам планирования
	// регистра накопления "бит_КонтрольныеЗначенияБюджетов".
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыПланирования" , ТаблицаПоДокументам);
		
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументыПланирования.ДокументПланирования КАК ДокументПланирования,
	|	ДокументыПланирования.ПричинаЗакрытия КАК ПричинаЗакрытия
	|ПОМЕСТИТЬ ДокументыПланирования
	|ИЗ
	|	&ДокументыПланирования КАК ДокументыПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ОборотыПоБюджетам.Период КАК Период,
	|	бит_ОборотыПоБюджетам.Регистратор КАК Регистратор,
	|	бит_ОборотыПоБюджетам.НомерСтроки КАК НомерСтроки,
	|	бит_ОборотыПоБюджетам.Активность КАК Активность,
	|	бит_ОборотыПоБюджетам.Сценарий КАК Сценарий,
	|	бит_ОборотыПоБюджетам.ЦФО КАК ЦФО,
	|	бит_ОборотыПоБюджетам.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ОборотыПоБюджетам.Валюта КАК Валюта,
	|	бит_ОборотыПоБюджетам.Контрагент КАК Контрагент,
	|	бит_ОборотыПоБюджетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_ОборотыПоБюджетам.Проект КАК Проект,
	|	бит_ОборотыПоБюджетам.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_ОборотыПоБюджетам.БанковскийСчет КАК БанковскийСчет,
	|	бит_ОборотыПоБюджетам.Аналитика_1 КАК Аналитика_1,
	|	бит_ОборотыПоБюджетам.Аналитика_2 КАК Аналитика_2,
	|	бит_ОборотыПоБюджетам.Аналитика_3 КАК Аналитика_3,
	|	бит_ОборотыПоБюджетам.Аналитика_4 КАК Аналитика_4,
	|	бит_ОборотыПоБюджетам.Аналитика_5 КАК Аналитика_5,
	|	бит_ОборотыПоБюджетам.Аналитика_6 КАК Аналитика_6,
	|	бит_ОборотыПоБюджетам.Аналитика_7 КАК Аналитика_7,
	|	-бит_ОборотыПоБюджетам.Количество КАК Количество,
	|	-бит_ОборотыПоБюджетам.Сумма КАК Сумма,
	|	-бит_ОборотыПоБюджетам.СуммаРегл КАК СуммаРегл,
	|	-бит_ОборотыПоБюджетам.СуммаУпр КАК СуммаУпр,
	|	-бит_ОборотыПоБюджетам.СуммаСценарий КАК СуммаСценарий,
	|	-бит_ОборотыПоБюджетам.СуммаСНДС КАК СуммаСНДС,
	|	-бит_ОборотыПоБюджетам.СуммаСНДСРегл КАК СуммаСНДСРегл,
	|	-бит_ОборотыПоБюджетам.СуммаСНДСУпр КАК СуммаСНДСУпр,
	|	-бит_ОборотыПоБюджетам.СуммаСНДССценарий КАК СуммаСНДССценарий,
	|	бит_ОборотыПоБюджетам.СтавкаНДС КАК СтавкаНДС,
	|	бит_ОборотыПоБюджетам.Комментарий КАК Комментарий,
	|	бит_ОборотыПоБюджетам.бит_БК_Организация КАК бит_БК_Организация,
	|	бит_ОборотыПоБюджетам.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПланирования КАК ДокументыПланирования
	|		ПО (бит_ОборотыПоБюджетам.Регистратор = (ВЫРАЗИТЬ(ДокументыПланирования.ДокументПланирования КАК Документ.бит_ЗаявкаНаРасходованиеСредств)))
	|			И (ДокументыПланирования.ДокументПланирования ССЫЛКА Документ.бит_ЗаявкаНаРасходованиеСредств)
	|			И (бит_ОборотыПоБюджетам.Активность)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыПланирования";
	
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-19 (#3075)

#Область Инициализация

// Сформируем соответствие статусов объектов для закрытия.
мСоответствиеСтатусовОбъектов = СформироватьСоответствиеСтатусовОбъектовДляЗакрытия();

#КонецОбласти

#КонецЕсли
