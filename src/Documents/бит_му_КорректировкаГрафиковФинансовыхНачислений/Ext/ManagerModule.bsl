#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Справка-расчет в валюте регл. учета.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "СправкаРасчетФинансовыхНачисленийРегл";
	КомандаПечати.Представление				= НСтр("ru = 'Справка-расчет в валюте регл. учета'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидСуммы", "Регл");
	КомандаПечати.Порядок					= 10;	
	
	// Справка-расчет в валюте взаиморасчетов.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "СправкаРасчетФинансовыхНачисленийВзаим";
	КомандаПечати.Представление				= НСтр("ru = 'Справка-расчет в валюте взаиморасчетов'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидСуммы", "Взаиморасчеты");
	КомандаПечати.Порядок					= 20;	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийРегл") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийРегл", НСтр("ru = 'Справка-расчет в валюте регл. учета'"), 
			ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивОбъектов, ПараметрыПечати),,"Отчет.бит_му_СправкаРасчетФинансовыхНачислений.Макет");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийВзаим") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийВзаим", НСтр("ru = 'Справка-расчет в валюте взаиморасчетов'"), 
			ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивОбъектов, ПараметрыПечати),,"Отчет.бит_му_СправкаРасчетФинансовыхНачислений.Макет");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура вычисляет допустимую дату корректировок.
// 
// Параметры:
//  Нет.
// 
Функция ПолучитьДопустимуюДатуКорректировок(СтруктураПараметров) Экспорт

	ДопустимаяДатаКорректировок = Дата('00010101');
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ВидИсточникаЗадолженности) Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		
		ВидыИсточниковЗадолженности = Перечисления.бит_му_ВидыИсточниковЗадолженности;
		
		Если СтруктураПараметров.ВидИсточникаЗадолженности = ВидыИсточниковЗадолженности.ОсновныеСредства Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	бит_му_СобытияОССрезПоследних.Период
			               |ИЗ
			               |	РегистрСведений.бит_му_СобытияОС.СрезПоследних(
			               |			,
			               |			Организация = &Организация
			               |				И ОсновноеСредство = &ОсновноеСредство
			               |				И Событие В (&Событие)) КАК бит_му_СобытияОССрезПоследних";
			
			МассивСобытий = Новый Массив;
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияОС.НачислениеПроцентов);
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияОС.РеклассификацияЗадолженности);
			
			Запрос.УстановитьПараметр("ОсновноеСредство", 	СтруктураПараметров.Объект);
			Запрос.УстановитьПараметр("Событие",			МассивСобытий);
			
			
		ИначеЕсли СтруктураПараметров.ВидИсточникаЗадолженности = ВидыИсточниковЗадолженности.КредитыЗаймы Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	бит_му_СобытияФинИнструментовСрезПоследних.Период
			               |ИЗ
			               |	РегистрСведений.бит_му_СобытияФинИнструментов.СрезПоследних(
			               |			,
			               |			ДоговорКонтрагента = &ДоговорКонтрагента
			               |				И Организация = &Организация
			               |				И Событие В (&Событие)) КАК бит_му_СобытияФинИнструментовСрезПоследних";
						   
			МассивСобытий = Новый Массив;
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.НачислениеПроцентов);
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.РеклассификацияЗадолженности);
			
			Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураПараметров.Объект);
			Запрос.УстановитьПараметр("Событие",			МассивСобытий);
			
		ИначеЕсли СтруктураПараметров.ВидИсточникаЗадолженности = ВидыИсточниковЗадолженности.КредиторскаяЗадолженность Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	бит_му_СобытияФинИнструментовСрезПоследних.Период
			               |ИЗ
			               |	РегистрСведений.бит_му_СобытияФинИнструментов.СрезПоследних(
			               |			,
			               |			ДоговорКонтрагента = &ДоговорКонтрагента
			               |				И Организация = &Организация
			               |				И Событие В (&Событие)) КАК бит_му_СобытияФинИнструментовСрезПоследних";
						   
			МассивСобытий = Новый Массив;
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.НачислениеПроцентов);
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.РеклассификацияЗадолженности);
			
			Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураПараметров.Объект);
			Запрос.УстановитьПараметр("Событие",			МассивСобытий);
			
		ИначеЕсли СтруктураПараметров.ВидИсточникаЗадолженности = ВидыИсточниковЗадолженности.ДебиторскаяЗадолженность Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	бит_му_СобытияФинИнструментовСрезПоследних.Период
			               |ИЗ
			               |	РегистрСведений.бит_му_СобытияФинИнструментов.СрезПоследних(
			               |			,
			               |			ДоговорКонтрагента = &ДоговорКонтрагента
			               |				И Организация = &Организация
			               |				И Событие В (&Событие)) КАК бит_му_СобытияФинИнструментовСрезПоследних";
						   
			МассивСобытий = Новый Массив;
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.НачислениеПроцентов);
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.РеклассификацияЗадолженности);
			
			Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураПараметров.Объект);
			Запрос.УстановитьПараметр("Событие",			МассивСобытий);
			
		Иначе
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	бит_му_СобытияФинИнструментовСрезПоследних.Период
			               |ИЗ
			               |	РегистрСведений.бит_му_СобытияФинИнструментов.СрезПоследних(
			               |			,
			               |			ДоговорКонтрагента = &ДоговорКонтрагента
			               |				И Организация = &Организация
			               |				И Событие В (&Событие)) КАК бит_му_СобытияФинИнструментовСрезПоследних";
						   
			МассивСобытий = Новый Массив;
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.НачислениеПроцентов);
			МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.РеклассификацияЗадолженности);
			
			Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураПараметров.Объект);
			Запрос.УстановитьПараметр("Событие",			МассивСобытий);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДопустимаяДатаКорректировок = КонецМесяца(Выборка.Период);
		КонецЕсли;

	КонецЕсли; 
	
	
	Возврат ДопустимаяДатаКорректировок;
	
КонецФункции // ПолучитьДопустимуюДатуКорректировок() 

// Функция определяет начало корректировок для документа КорректировкаГрафиковФинНачислений.
// 
// Параметры:
//  ДокументСсылка  - ДокументСсылка.бит_му_КорректировкаГрафиковФинансовыхНачислений.
// 
// Возвращаемое значение:
//   ДатаКорректировок   - Дата.
// 
Функция ДатаНачалаКорректировок(ДокументСсылка) Экспорт

	
	Если ЗначениеЗаполнено(ДокументСсылка.ДатаНачалаКорректировок) Тогда
		
		ДатаКорректировок = ДокументСсылка.ДатаНачалаКорректировок;
		
	Иначе	
		
		ДатаКорректировок = ДокументСсылка.Дата;
	
	КонецЕсли; 
	

	Возврат ДатаКорректировок;
	
КонецФункции // ДатаНачалаКорректировок()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает табличный документ печатной формы.
// 
// Параметры:
//  МассивСсылок - Массив. Массив ссылок которые нужно распечатать.
// 	ПараметрыПечати - Структура.
// 
// Возвращаемое значение:
//  Результат - ТабличныйДокумент.
// 
Функция ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивСсылок, ПараметрыПечати)

	Результат = Новый ТабличныйДокумент;
	
	Для каждого Документ Из МассивСсылок Цикл
		
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Организация", 				Документ.Организация);
		СтруктураПараметров.Вставить("Контрагент",					Документ.Контрагент);
		СтруктураПараметров.Вставить("ДоговорКонтрагента",			Документ.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("Объект",						Документ.Объект);
		СтруктураПараметров.Вставить("ЭффективнаяСтавкаПроцента",	Документ.СтавкаЭСП);
		
		Если Документ.ВидИсточникаЗадолженности = Перечисления.бит_му_ВидыИсточниковЗадолженности.КредитыЗаймы Тогда
			СтруктураПараметров.Вставить("НоминальнаяСтавка",		Документ.СтавкаНоминальная);
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("ВидСуммы") Тогда
			СтруктураПараметров.Вставить("ВидСуммы",				ПараметрыПечати.ВидСуммы);
		КонецЕсли;
		
		Результат = Отчеты.бит_му_СправкаРасчетФинансовыхНачислений.СформироватьТабличныйДокумент(СтруктураПараметров, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СформироватьПротоколЗаполненияДокумента()

#КонецОбласти

#КонецЕсли
