
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	ОбновитьДопустимуюДатуКорректировокСервер();
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	СпособРасчетаЭСП = ДокументОбъект.ОпределитьСпособРасчетаЭСП();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДоговорКонтрагента, "Объект.Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();
	// 
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_КорректировкаГрафиковФинансовыхНачислений";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗагрузитьТаблицуРезультатаКлиент" И Источник = УникальныйИдентификатор Тогда
		ЗагрузитьТаблицуРезультатаКлиент(Параметр.ИмяИзменяемойТаблицы, Параметр.ТаблицаРезультата, 
			Параметр.СоотвСтарыеЗначенияСтрок, Параметр.РежимЗагрузки);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ВидИсточникаЗадолженности".
// 
&НаКлиенте
Процедура ВидИсточникаЗадолженностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборРеквизитаШапки(ВыбранноеЗначение, "ВидИсточникаЗадолженности");  
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбработатьВыборРеквизитаШапки(ВыбранноеЗначение, "Организация");
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Контрагент".
// 
&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбработатьВыборРеквизитаШапки(ВыбранноеЗначение, "Контрагент"); 
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Изменение кода. Начало. 19.01.2017{{
    Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
    	Элементы.ДоговорКонтрагента.ВыбиратьТип = Ложь;
    Иначе
    	Элементы.ДоговорКонтрагента.ВыбиратьТип = Истина;
    КонецЕсли;
    // Изменение кода. Конец. 19.01.2017}}
    
	НачалоВыбораДоговораКлиент(Элемент, Объект.ДоговорКонтрагента, Объект.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбработатьВыборРеквизитаШапки(ВыбранноеЗначение, "ДоговорКонтрагента");
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Объект".
// 
&НаКлиенте
Процедура ОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбработатьВыборРеквизитаШапки(ВыбранноеЗначение, "Объект");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НепогашеннаяСтоимостьПоЭффективнойСтавке".
// 
&НаКлиенте
Процедура НепогашеннаяСтоимостьПоЭффективнойСтавкеПриИзменении(Элемент)
	
	ВычислитьПоказателиСервер(Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода "ДатаНачалаКорректировок".
// 
&НаКлиенте
Процедура ДатаНачалаКорректировокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачалаКорректировок = КонецМесяца(ДобавитьМесяц(Объект.ДатаНачалаКорректировок,Направление));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикНачислений

// Процедура - обработчик события "ПередУдалением" табличного поля "ГрафикНачислений".
// 
&НаКлиенте
Процедура ГрафикНачисленийПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ГрафикНачислений.ВыделенныеСтроки;
	
	Для каждого Н Из ВыделенныеСтроки Цикл
		ТекСтр = Объект.ГрафикНачислений.НайтиПоИдентификатору(Н);
		Если НЕ ТекСтр.ДобавленоВручную Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ГрафикНачислений".
// 
&НаКлиенте
Процедура ГрафикНачисленийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.СуммаСтарый 		= 0;
		ТекущиеДанные.ДобавленоВручную 	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "ГрафикНачислений".
// 
&НаКлиенте
Процедура ГрафикНачисленийПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ГрафикНачислений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если (НЕ ТекущиеДанные.ДобавленоВручную) И (Элемент.ТекущийЭлемент.Имя = "ГрафикНачисленийПериод") Тогда
		Отказ = Истина;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если НЕ ПроверитьВозможностьЗаполнения() Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Если Объект.ГрафикНачислений.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru = 'Табличная часть «График начислений» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросКомандаЗаполнить", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ЗаполнитьГрафикНачислений();

	КонецЕсли;
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросКомандаЗаполнить(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ГрафикНачислений.Очистить();

		ЗаполнитьГрафикНачислений();
		
	КонецЕсли;
	
КонецПроцедуры // ВопросКомандаЗаполнить()

&НаКлиенте
Функция ПроверитьВозможностьЗаполнения()

	флЗаполнениеВозможно = Истина;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ВидИсточникаЗадолженности", 	"Вид источника задолженности");	
	СтруктураРеквизитов.Вставить("Организация", 				"Организация");
	СтруктураРеквизитов.Вставить("Контрагент", 					"Контрагент");
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", 			"Договор контрагента");
	Если ВидимостьОбъекта(Объект.ВидИсточникаЗадолженности, фКэшЗначений) Тогда
		
		СтруктураРеквизитов.Вставить("Объект",					"Объект");
		
	КонецЕсли; 
	
	ТекстСообщения = НСтр("ru = 'Заполнение графика невозможно! Не указаны значения реквизитов:'");
	
	Для каждого КиЗ Из СтруктураРеквизитов Цикл
	
		Если НЕ ЗначениеЗаполнено(Объект[КиЗ.Ключ]) Тогда
		
			ТекстСообщения = ТекстСообщения + Символы.ПС + """" + КиЗ.Значение + """";
			флЗаполнениеВозможно = Ложь;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если НЕ флЗаполнениеВозможно Тогда
	
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли; 

	Возврат флЗаполнениеВозможно;
	
КонецФункции // ПроверитьВозможностьЗаполнения()

// Процедура - обработчик события "Нажатие" кнопки "ВычислитьПоказатели".
// 
&НаКлиенте
Процедура КомандаВычислитьПоказатели(Команда)
	
	Если Объект.Проведен Тогда
	
		ТекстСообщения = НСтр("ru = 'Для выполнения расчета необходимо отменить проведение документа!'");
		ПоказатьПредупреждение(,ТекстСообщения,30);
	
	КонецЕсли; 
	
	ВычислитьПоказателиСервер();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ОбновитьДопустимуюДатуКорректировок".
// 
&НаКлиенте
Процедура КомандаОбновитьДопустимуюДатуКорректировок(Команда)
	
	ОбновитьДопустимуюДатуКорректировокСервер();
	
КонецПроцедуры

// Процедура - обработчик команды "КомандаИзменитьГрафикНачислений" формы.
// 
&НаКлиенте 
Процедура КомандаИзменитьГрафикНачислений(Команда)
	
	КолонкиПериод = Новый Структура;
	КолонкиПериод.Вставить("Период", "Период");
	
	КолонкиАналитика = Новый Структура;
	КолонкиАналитика.Вставить("СуммаСтарый", "Сумма без НДС (старый)");
	
	КолонкиСумма = Новый Структура;
	КолонкиСумма.Вставить("Сумма", "Сумма без НДС (новый)");
	
	КолонкиСлужебные = Новый Структура;
	КолонкиСлужебные.Вставить("ДобавленоВручную");
	
	ЗначенияДляНовойСтроки = Новый Структура;
	ЗначенияДляНовойСтроки.Вставить("ДобавленоВручную", Истина);
	
	// Сформируем структуру УсловияДоступности.
	// Необходимо установить условие недоступности строки.
	// Укажем имена колонок, значения и виды сравнения.
	ВидыСравненияПериод = Новый Массив;
	ВидыСравненияПериод.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	ВидыСравненияПериод.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
	
	УсловиеПериод = Новый Структура;
	УсловиеПериод.Вставить("Значение"	  , фДопустимаяДатаКорректировок);
	УсловиеПериод.Вставить("ВидыСравнения", ВидыСравненияПериод);
	
	УсловияНедоступности = Новый Структура;
	УсловияНедоступности.Вставить("Период", УсловиеПериод);
	
	// Сформируем структуру параметров для открытия формы изменения данных.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УсловияНедоступности"	 , УсловияНедоступности);
	СтруктураПараметров.Вставить("ТолькоКорректировка"	 , Истина);
	СтруктураПараметров.Вставить("КолонкиПериод"		 , КолонкиПериод);       
	СтруктураПараметров.Вставить("КолонкиАналитика"		 , КолонкиАналитика);
	СтруктураПараметров.Вставить("КолонкиСумма"			 , КолонкиСумма);
	СтруктураПараметров.Вставить("КолонкиСлужебные"		 , КолонкиСлужебные);
	СтруктураПараметров.Вставить("ИмяОбъекта"  			 , "бит_му_КорректировкаГрафиковФинансовыхНачислений");
	СтруктураПараметров.Вставить("ИмяИзменяемойТаблицы"  , "ГрафикНачислений");
	СтруктураПараметров.Вставить("ТаблицаДляИзменения"	 , Объект.ГрафикНачислений);
	СтруктураПараметров.Вставить("ЗначенияДляНовойСтроки", ЗначенияДляНовойСтроки);
	
	бит_РаботаСДиалогамиКлиент.ОткрытьФормуИзмененияДанныхТаблицы(СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры // КомандаИзменитьГрафикНачислений()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура уставливает доступность элементов формы в зависимости от вида операции.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ОбработатьИзменениеВидаОперацииСервер()

	ВидыИсточников = фКэшЗначений.Перечисления.бит_му_ВидыИсточниковЗадолженности;
	
	// Если (Объект.ВидИсточникаЗадолженности <> ВидыИсточников.ЦенныеБумаги) 
	//   И (Объект.ВидИсточникаЗадолженности <> ВидыИсточников.ОсновныеСредства) Тогда
	Если (Объект.ВидИсточникаЗадолженности <> ВидыИсточников.ОсновныеСредства) Тогда
		Объект.Объект = Объект.ДоговорКонтрагента;
	КонецЕсли;
	
	Если Объект.ВидИсточникаЗадолженности <> ВидыИсточников.ОсновныеСредства Тогда
		Объект.ВариантРасчетаПроцентов = фКэшЗначений.Перечисления.бит_му_ВариантыРасчетаФинансовыхПроцентов.Постоплата;
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер()

// Процедура заполняет табличную часть "График начислений".
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьГрафикНачислений()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_ФинансовыеНачисленияОбороты.Период КАК Период,
	               |	СУММА(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот * &Коэффициент) КАК СуммаСтарый,
	               |	СУММА(бит_му_ФинансовыеНачисленияОбороты.СуммаПлатежаВзаиморасчетыОборот * &Коэффициент) КАК Сумма,
	               |	ЛОЖЬ КАК ДобавленоВручную
	               |ИЗ
	               |	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	               |			,
	               |			,
	               |			Запись,
	               |			Организация = &Организация
	               |				И Объект = &Объект
	               |				И Контрагент = &Контрагент
	               |				И ДоговорКонтрагента = &ДоговорКонтрагента
	               |				И ВидСтавки = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента)
	               |				И РасходДоход = ЗНАЧЕНИЕ(Перечисление.бит_РасходДоход.Расходование)
	               |				И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности) КАК бит_му_ФинансовыеНачисленияОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_ФинансовыеНачисленияОбороты.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",					Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 		Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Объект",		 				Объект.Объект);
	Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 	Объект.ВидИсточникаЗадолженности);
	
	ДокументОбъект = ДанныеФормывЗначение(Объект, Тип("ДокументОбъект.бит_му_КорректировкаГрафиковФинансовыхНачислений"));
	Запрос.УстановитьПараметр("Коэффициент",		ДокументОбъект.ПолучитьКоэффициентВалют());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.ГрафикНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ОбновитьДопустимуюДатуКорректировокСервер();

КонецПроцедуры // ЗаполнитьГрафикНачислений()

// Процедура вычисляет допустимую дату корректировок.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОбновитьДопустимуюДатуКорректировокСервер()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"              ,Объект.Организация);
	СтруктураПараметров.Вставить("ВидИсточникаЗадолженности",Объект.ВидИсточникаЗадолженности);
	СтруктураПараметров.Вставить("Объект"                   ,Объект.Объект);
	
	фДопустимаяДатаКорректировок = Документы.бит_му_КорректировкаГрафиковФинансовыхНачислений.ПолучитьДопустимуюДатуКорректировок(СтруктураПараметров);
	
КонецПроцедуры // ОбновитьДопустимуюДатуКорректировокСервер() 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}
	КэшПеречисления.Вставить("бит_РасходДоход", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	КэшПеречисления.Вставить("бит_му_ВидыСтавокФинансовыхПроцентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов));
	КэшПеречисления.Вставить("бит_му_ВариантыРасчетаФинансовыхПроцентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВариантыРасчетаФинансовыхПроцентов));
	КэшПеречисления.Вставить("бит_му_ВидыИсточниковЗадолженности", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыИсточниковЗадолженности));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);

КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда

		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;

		ИзменениеВалютыСервер();

	КонецЕсли;

	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	

КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура обрабатывает изменение контрагента. 
// 
&НаСервере
Процедура ИзменениеКонтрагента()

	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента
														  ,Объект.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров);
														  
	// Могли поменять договор.
	ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент);
														  
КонецПроцедуры // ИзменениеКонтрагента()

// Процедура обрабатывает изменение договора. Сервер.
// 
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
	КонецЕсли; 
	
	Объект.ВалютаДокумента = бит_КурсыВалют.ПолучитьВалютуДоговораКонтрагента(Объект.ДоговорКонтрагента);
	
	ИзменениеВалютыСервер();							  
	
	// Установим значение реквизита "Объект", если необходимо.
	Если НЕ Элементы.Объект.Видимость Тогда
		Объект.Объект = Договор;
	КонецЕсли;
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_му_КорректировкаГрафиковФинансовыхНачислений"));
	СпособРасчетаЭСП = ДокументОбъект.ОпределитьСпособРасчетаЭСП();

	
КонецПроцедуры // ИзменениеДоговораСервер()

&НаСервере 
Функция ПолучитьНепогашеннуюСтоимость(Дата, ВидСтавки)

	РезСумма = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.РасходДоход = &Поступление
	               |				ТОГДА бит_му_ФинансовыеНачисленияОбороты.СуммаВзаиморасчетыОборот
	               |			КОГДА бит_му_ФинансовыеНачисленияОбороты.РасходДоход = &Расходование
	               |				ТОГДА -бит_му_ФинансовыеНачисленияОбороты.СуммаВзаиморасчетыОборот
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК СуммаВзаиморасчеты
	               |ПОМЕСТИТЬ ТаблицаНепогашенная
	               |ИЗ
	               |	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	               |			,
	               |			&Дата,
	               |			,
	               |			Контрагент = &Контрагент
	               |				И ДоговорКонтрагента = &ДоговорКонтрагента
	               |				И Объект = &Объект
	               |				И Организация = &Организация
	               |				И ВидСтавки = &ВидСтавки
	               |				И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности) КАК бит_му_ФинансовыеНачисленияОбороты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ГрафикПлатежей.СуммаПлатежаВзаиморасчетыОборот) КАК СуммаПлатежаВзаиморасчетыОборот
	               |ПОМЕСТИТЬ ГрафикПлатежей
	               |ИЗ
	               |	РегистрНакопления.бит_му_ФинансовыеГрафики.Обороты(
	               |			&НачалоПериодаПлатежи,
	               |			&КонецПериодаПлатежи,
	               |			Период,
	               |			ДоговорКонтрагента = &ДоговорКонтрагента
	               |				И Контрагент = &Контрагент
	               |				И Организация = &Организация
	               |				И Объект = &Объект) КАК ГрафикПлатежей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ФинНачисления.НачисленнаяСуммаФинансовыхПроцентовРеглОборот - ФинНачисления.ПогашеннаяСуммаФинансовыхПроцентовРеглОборот) КАК ПогашеннаяСуммаФинансовыхПроцентовРеглОборот,
	               |	СУММА(ФинНачисления.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот - ФинНачисления.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот) КАК ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот
	               |ПОМЕСТИТЬ ПогашенныеПроценты
	               |ИЗ
	               |	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	               |			,
	               |			&Дата,
	               |			Период,
	               |			Контрагент = &Контрагент
	               |				И ДоговорКонтрагента = &ДоговорКонтрагента
	               |				И Объект = &Объект
	               |				И Организация = &Организация
	               |				И ВидСтавки = &ВидСтавки
	               |				И ВидИсточникаЗадолженности = &ВидИсточникаЗадолженности) КАК ФинНачисления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ТаблицаНепогашенная.СуммаВзаиморасчеты, 0) КАК НепогашеннаяСуммаВзаиморасчеты,
	               |	ЕСТЬNULL(ГрафикПлатежей.СуммаПлатежаВзаиморасчетыОборот, 0) КАК ГрафикВзаиморасчетыОборот,
	               |	ЕСТЬNULL(ТаблицаНепогашенная.СуммаВзаиморасчеты, 0) - ЕСТЬNULL(ГрафикПлатежей.СуммаПлатежаВзаиморасчетыОборот, 0) КАК СуммаВзаиморасчеты,
	               |	ЕСТЬNULL(ПогашенныеПроценты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот, 0) КАК ПогашеннаяСуммаФинансовыхПроцентов
	               |ИЗ
	               |	ТаблицаНепогашенная КАК ТаблицаНепогашенная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикПлатежей КАК ГрафикПлатежей
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПогашенныеПроценты КАК ПогашенныеПроценты
	               |		ПО (ИСТИНА)";
	
	
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Дата", 						Дата);
	Запрос.УстановитьПараметр("Контрагент", 				Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 		Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Объект",						Объект.Объект);
	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
	Запрос.УстановитьПараметр("Поступление",				фКэшЗначений.Перечисления.бит_РасходДоход.Поступление);
	Запрос.УстановитьПараметр("Расходование", 				фКэшЗначений.Перечисления.бит_РасходДоход.Расходование);
	Запрос.УстановитьПараметр("ВидИсточникаЗадолженности", 	Объект.ВидИсточникаЗадолженности);
	Запрос.УстановитьПараметр("ВидСтавки",					ВидСтавки);

	// Так же нужно получить платежи за текущий период.
	НачалоПериодаПлатежи = НачалоМесяца(ДобавитьМесяц(Дата,1));
	КонецПериодаПлатежи  = КонецМесяца(НачалоПериодаПлатежи);	
	Запрос.УстановитьПараметр("НачалоПериодаПлатежи",       НачалоПериодаПлатежи);
	Запрос.УстановитьПараметр("КонецПериодаПлатежи",        КонецПериодаПлатежи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрОтбор = Новый Структура("Период",КонецПериодаПлатежи);
	
	МассивСтрок = Объект.ГрафикНачислений.НайтиСтроки(СтрОтбор);
	
	ВсегоПлатежНовый = 0;
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
	
		ВсегоПлатежНовый = ВсегоПлатежНовый+СтрокаТаблицы.Сумма;
	
	КонецЦикла;
	
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ,Взаиморасчеты");
	ДокОбъект  = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_му_КорректировкаГрафиковФинансовыхНачислений"));
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ДокОбъект, Объект.Дата, ВидыКурсов);	
	ВсегоПлатежНовый = бит_КурсыВалют.ПересчитатьДокВзаиморасчеты(ВсегоПлатежНовый,СтруктураКурсыВалют);
	
	Если Выборка.Следующий() Тогда
		Если ВсегоПлатежНовый < Выборка.ПогашеннаяСуммаФинансовыхПроцентов Тогда
			
			ОстатокПроцентов = ВсегоПлатежНовый - Выборка.ПогашеннаяСуммаФинансовыхПроцентов;
			
		Иначе	
			
			ОстатокПроцентов = 0;
			
		КонецЕсли; 
		РезСумма = Выборка.СуммаВзаиморасчеты-ОстатокПроцентов;
		РезСумма = Выборка.СуммаВзаиморасчеты;		
	КонецЕсли;

	Возврат РезСумма;
	
КонецФункции // ПолучитьНепогашеннуюСтоимость()

// Процедура вычисляет значения числовых показателей.
// 
// Параметры:
//  РассчитыватьСтоимость - Булево - по умолчанию Истина.
// 
&НаСервере 
Процедура ВычислитьПоказателиСервер(РассчитыватьСтоимость = Истина)
	
	// Получим курсы валют
	ВидыКурсов 			= Новый Структура("Регл,Взаиморасчеты");
	ДокументОбъект 		= ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ДокументОбъект, ДокументОбъект.Дата, ВидыКурсов);
	
	КурсыВз 			= СтруктураКурсыВалют.Взаиморасчеты;
	
	// Период корректировок
	ДатаКорректировок = Документы.бит_му_КорректировкаГрафиковФинансовыхНачислений.ДатаНачалаКорректировок(Объект);
	// Конец периода без изменений
	ДатаОкончанияФикс = КонецМесяца(ДобавитьМесяц(ДатаКорректировок,-1));	
	// Начало периода изменений
	ДатаНачалаИзмен   = НачалоМесяца(ДобавитьМесяц(ДатаКорректировок,1));
	
	// Получим финансовый график и массив платежей.
	ФинансовыйГрафик = ДокументОбъект.ПолучитьФинансовыйГрафик(СтруктураКурсыВалют,ДатаНачалаИзмен);
	
	
	Если ФинансовыйГрафик.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	
    // Вычислим ставку ЭСП
	Если РассчитыватьСтоимость Тогда
																			
		НепогашеннаяСтоимостьПоЭффективнойСтавке = ПолучитьНепогашеннуюСтоимость(ДатаОкончанияФикс, фКэшЗначений.Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента);
		
		Объект.НепогашеннаяСтоимостьПоЭффективнойСтавке = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НепогашеннаяСтоимостьПоЭффективнойСтавке
																					 ,КурсыВз.Валюта
																					 ,Объект.ВалютаДокумента
																					 ,КурсыВз.Курс
																					 ,Объект.КурсДокумента
																					 ,КурсыВз.Кратность
																					 ,Объект.КратностьДокумента);
																					 
	КонецЕсли;

	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		
		// Расчет по дням
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("РежимКорректировки");
		СтруктураПараметров.Вставить("ФинансовыйГрафик", ФинансовыйГрафик);		
		СтруктураПараметров.Вставить("Периодичность", "День");
		ТаблицаПлатежи = бит_му_ОбщегоНазначения.ПолучитьТаблицуПлатежей(Объект.ДоговорКонтрагента
		                                                                   , Объект.Объект
																		   , КонецМесяца(ДатаКорректировок)
																		   , Ложь
																		   , СтруктураПараметров);
																		   
	   СтрПар = Новый Структура;
	   СтрПар.Вставить("СпособРасчета" , СпособРасчетаЭСП);
	   СтрПар.Вставить("ТаблицаПлатежи", ТаблицаПлатежи);
	   СтрПар.Вставить("Стоимость"     , Объект.НепогашеннаяСтоимостьПоЭффективнойСтавке);
	   СтрПар.Вставить("Точность"      , 0.000000000001); 
	   СтрПар.Вставить("ПервыйПериод"  , КонецМесяца(ДатаКорректировок));
	   
	   Объект.СтавкаЭСП = бит_му_ОбщегоНазначения.ВычислитьЭСП(СтрПар);
																		   
																		   
		
	Иначе	
		
		// Расчет по месяцам
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("РежимКорректировки");
		СтруктураПараметров.Вставить("ФинансовыйГрафик", ФинансовыйГрафик);
		СтруктураПараметров.Вставить("Взаиморасчеты");
		
		
		МассивПлатежи = бит_му_ОбщегоНазначения.СформироватьМассивПлатежей(Объект.ДоговорКонтрагента
														  					,Объект.Объект
									   					  					,ДатаКорректировок
									   					  					,Истина
									   					  					,СтруктураПараметров);
		
		
		Объект.СтавкаЭСП = бит_му_ОбщегоНазначения.ВычислитьЭффективнуюСтавку(МассивПлатежи, Объект.НепогашеннаяСтоимостьПоЭффективнойСтавке);
		
		
	КонецЕсли; 
	
	
	// Номинальная ставка	
	Если Объект.ВидИсточникаЗадолженности = фКэшЗначений.Перечисления.бит_му_ВидыИсточниковЗадолженности.КредитыЗаймы Тогда
	
		Если РассчитыватьСтоимость Тогда
			
			// Непогашенная стоимость по номинальной ставке.
			Стоимость = ПолучитьНепогашеннуюСтоимость(ДатаОкончанияФикс, фКэшЗначений.Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента);
			
			Объект.НепогашеннаяСтоимостьПоНоминальнойСтавке = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Стоимость
																						 ,КурсыВз.Валюта
																						 ,Объект.ВалютаДокумента
																						 ,КурсыВз.Курс
																						 ,Объект.КурсДокумента
																						 ,КурсыВз.Кратность
																						 ,Объект.КратностьДокумента);
			
			
		КонецЕсли;
		
		// Нужно также вычислять - иначе не сойдется график.
		Объект.СтавкаНоминальная = бит_му_ОбщегоНазначения.ВычислитьЭффективнуюСтавку(МассивПлатежи, Объект.НепогашеннаяСтоимостьПоНоминальнойСтавке);
	
	КонецЕсли; 
	
КонецПроцедуры // ВычислитьПоказателиСервер() 

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Процедура выполняет загрузку таблицы результата после изменения данных.
// 
// Параметры:
//  ИмяИзменяемойТаблицы 	 - Строка.
//  ТаблицаРезультата    	 - ДанныеФормыКоллекция,ТаблицаЗначений. По структуре копия переданной для изменения таблицы.
//                         	   В режиме "Загрузка", "Добавление" - содержит строки для загрузки.
//                             В режиме "Изменение" 			 - содержит измененные строки.
//  СоотвСтарыеЗначенияСтрок - Соответствие. Необходимо для поиска строки по старым значениям для изменения.
// 							   Ключ     - "Строка_" + НомерСтроки ("Строка_1").
// 							   Значение - Структура: 
// 										  Ключ 	   - ИмяИзменяемойКолонки + "_Старое" ("Период_Старое", "Сумма_Старое").
// 										  Значение - Дата, Число.
//  РежимЗагрузки 		 	 - Строка. / "Загрузка" / "Добавление" / "Изменение" /.
// 
&НаКлиенте 
Процедура ЗагрузитьТаблицуРезультатаКлиент(ИмяИзменяемойТаблицы
										  ,ТаблицаРезультата
										  ,СоотвСтарыеЗначенияСтрок
										  ,РежимЗагрузки)
	
	// Для документа настроен режим "Изменения" для таблицы "ГрафикНачислений".
	// Обрабатываем только изменение.
	Для Каждого СтрокаИсточник Из ТаблицаРезультата Цикл
		
		СтарыеЗначенияСтроки = СоотвСтарыеЗначенияСтрок.Получить("Строка_" + СтрокаИсточник.НомерСтроки);
		
		Если СтарыеЗначенияСтроки = Неопределено Тогда
			// Добавим новую строку.
			СтрокаПриемник = Объект.ГрафикНачислений.Добавить();
		Иначе
			
			Отбор = Новый Структура;
			Отбор.Вставить("Период"		, СтарыеЗначенияСтроки.Период_Старое);
			Отбор.Вставить("СуммаСтарый", СтрокаИсточник.СуммаСтарый);
			
			СтрокиДляИзменения = Объект.ГрафикНачислений.НайтиСтроки(Отбор);
			
			Если Не СтрокиДляИзменения.Количество() = 0 Тогда
				СтрокаПриемник = СтрокиДляИзменения[0];
			Иначе
				// Добавим новую строку.
				СтрокаПриемник = Объект.ГрафикНачислений.Добавить();
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник)
		
	КонецЦикла;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Функция ВидимостьОбъекта(ТекВидИсточникаЗадолженности, КэшЗначений)

	Если ТекВидИсточникаЗадолженности = КэшЗначений.Перечисления.бит_му_ВидыИсточниковЗадолженности.ОсновныеСредства Тогда
		 // ИЛИ ТекВидИсточникаЗадолженности = КэшЗначений.Перечисления.бит_му_ВидыИсточниковЗадолженности.ЦенныеБумаги Тогда.
		
		флВидимостьОбъекта = Истина;
		
	Иначе
		
		флВидимостьОбъекта = Ложь;
		
	КонецЕсли; 

	Возврат флВидимостьОбъекта;
	
КонецФункции // ОпределитьВидимостьОбъекта()

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", фСписокВидовДоговоров);
		КонецЕсли;
	КонецЕсли;

	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);

	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ГрафикНачислений;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество() > 0 Тогда
	
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект, ТаблицаОбъекта);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;		
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ТаблицаОбъекта - ТаблицаЗначений.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ТаблицаОбъекта) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтрокаТаблицы.СуммаСтарый = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСтарый
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		КонецЦикла;
																			 
		Объект.НепогашеннаяСтоимостьПоЭффективнойСтавке = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.НепогашеннаяСтоимостьПоЭффективнойСтавке
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		Объект.НепогашеннаяСтоимостьПоНоминальнойСтавке = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.НепогашеннаяСтоимостьПоНоминальнойСтавке
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
// 
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим отбор для договора контрагента.
		УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
		
	Иначе
		// Обработаем начало выбора договора контрагента в обычном приложении.
		бит_РаботаСДиалогамиКлиент.НачалоВыбораДоговораКонтрагентаОбычноеПриложение(Объект
																				   ,Элемент
																				   ,Контрагент_Владелец
																				   ,Договор
																				   ,фСписокВидовДоговоров
																				   ,СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

// Процедура обрабатывает выбор реквизита формы.
// 
// Параметры:
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура ОбработатьВыборРеквизитаШапки(ВыбраноеЗначение, ИмяРеквизита)

	Если Объект.ГрафикНачислений.Количество() = 0 Тогда
		ОбработатьИзменениеРеквизита(ИмяРеквизита, ВыбраноеЗначение);
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыбраноеЗначение", ВыбраноеЗначение);
	ДопПараметры.Вставить("ИмяРеквизита"    , ИмяРеквизита);
		
	ТекстВопроса = НСтр("ru = 'Табличная часть «График начислений» будет очищена. Продолжить?'");
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОбработатьВыборРеквизитаШапки", ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
КонецПроцедуры // ОбработатьВыборРеквизитаШапки() 

// Процедура обрабаотывает изменения реквизита.
// 
&НаКлиенте
Процедура ОбработатьИзменениеРеквизита(ИмяРеквизита, ВыбраноеЗначение)

	Объект[ИмяРеквизита] = ВыбраноеЗначение;
	
	Если ИмяРеквизита = "ВидИсточникаЗадолженности" Тогда 		
		             
		ОбработатьИзменениеВидаОперацииСервер(); 	
		// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
		УстановитьЗаголовокФормыДокумента(); 
	
	ИначеЕсли ИмяРеквизита = "Организация" Тогда
		
		ВалютаДокументаЗаполнена = ЗначениеЗаполнено(Объект.ВалютаДокумента); 			
		ИзменениеОрганизацииСервер();
		
		Если Не ВалютаДокументаЗаполнена И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда 				
			ДобавитьВКэш("ВалютаДокумента");
			ДобавитьВКэш("КратностьДокумента");
			ДобавитьВКэш("КурсДокумента");    				
		КонецЕсли;
		
		УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);
		          	
	ИначеЕсли ИмяРеквизита = "Контрагент" Тогда
		
		ИзменениеКонтрагента();

		УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);

	ИначеЕсли ИмяРеквизита = "ДоговорКонтрагента" Тогда
		
		ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент);			
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеРеквизита()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросОбработатьВыборРеквизитаШапки(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ГрафикНачислений.Очистить();
		ОбработатьИзменениеРеквизита(ДопПараметры.ИмяРеквизита, ДопПараметры.ВыбраноеЗначение);
				
	КонецЕсли;
    	
КонецПроцедуры // ВопросОбработатьВыборРеквизитаШапки()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидИсточникаЗадолженности));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормыСервер()
		
	ВидыИсточников = фКэшЗначений.Перечисления.бит_му_ВидыИсточниковЗадолженности;
		
	Если Объект.ВидИсточникаЗадолженности = ВидыИсточников.ОсновныеСредства Тогда
		// Адаптация для ERP. Начало. 18.03.2014{{
		ОграничениеТипа = бит_ОбщегоНазначения.ПолучитьИмяТипаОсновныеСредства();
		// Адаптация для ERP. Конец. 18.03.2014}}
	// ИначеЕсли Объект.ВидИсточникаЗадолженности = ВидыИсточников.ЦенныеБумаги Тогда
	// 	ОграничениеТипа = "СправочникСсылка.ЦенныеБумаги";	
	Иначе
		ОграничениеТипа = "СправочникСсылка.ДоговорыКонтрагентов";
	КонецЕсли;
	
	флОбъектВидимость = ВидимостьОбъекта(Объект.ВидИсточникаЗадолженности, фКэшЗначений);
	
	Если Объект.ВидИсточникаЗадолженности = ВидыИсточников.КредитыЗаймы Тогда
		СтавкаНоминальнаяВидимость = Истина;
	Иначе
		СтавкаНоминальнаяВидимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВидИсточникаЗадолженности = ВидыИсточников.ОсновныеСредства Тогда
		ВариантРасчетаВидимость 		= Истина;
	Иначе
		ВариантРасчетаВидимость 		= Ложь;
	КонецЕсли;
	
	Элементы.Объект.Видимость 					= флОбъектВидимость;
	Элементы.Объект.ОграничениеТипа 			= Новый ОписаниеТипов(ОграничениеТипа);
	Элементы.ГруппаСтавкаНоминальная.Видимость 	= СтавкаНоминальнаяВидимость;
	Элементы.ВариантРасчетаПроцентов.Видимость	= ВариантРасчетаВидимость;

КонецПроцедуры // УправлениеЭлементамиФормыСервер()


#КонецОбласти

#КонецОбласти

#Область Инициализация

// Зададим имена реквизитов, подлежащих кешированию.
мКэшРеквизитовФормы = Новый Структура;
мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
мКэшРеквизитовФормы.Вставить("КурсДокумента");
мКэшРеквизитовФормы.Вставить("КратностьДокумента");	 

#КонецОбласти
