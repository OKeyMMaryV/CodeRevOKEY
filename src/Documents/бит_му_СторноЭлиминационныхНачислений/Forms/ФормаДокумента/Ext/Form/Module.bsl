
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполняем кэш значений.	
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	ЗаполнитьСписокОрганизаций();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	УстановитьПараметрыВыбораДляСчетов();

	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Установить заголовок формы.
	УстановитьЗаголовокФормыДокумента();
	
	РегистрБухгалтерииПриИзменении(Элементы.РегистрБухгалтерии);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТекущийОбъект.мРезультатЗапроса = ТекущийОбъект.ПолучитьДанныеДляСторнирования(ТекущийОбъект.ЕстьМеждународныйУчет());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы статус документа.
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_СторноЭлиминационныхНачислений";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
 
&НаКлиенте
Процедура ПериметрКонсолидацииПриИзменении(Элемент)
	
	ЗаполнитьСписокОрганизаций();
	
	Если Элементы.Организация.СписокВыбора.Количество() = 1 Тогда
		Объект.Организация = Элементы.Организация.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет список доступных для выбора организаций.
//
&НаСервере
Процедура ЗаполнитьСписокОрганизаций()

	СоставПериметраКонсолидации = ПолучитьСоставПериметраКонсолидации(Объект.ПериметрКонсолидации, Объект.Дата);
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(СоставПериметраКонсолидации);

КонецПроцедуры // ЗаполнитьСписокОрганизаций()

&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(мКэшЗначений.ВидОбъекта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", мКэшЗначений.ДоступныеОбъектыСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);

КонецПроцедуры

// Процедура обрабатывает изменение реквизита "РегистрБухгалтерии".
// 
&НаКлиенте
Процедура ИзменениеРегистраБухгалтерии()
	
	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		ОписаниеТипов = Новый ОписаниеТипов("ПланСчетовСсылка." + ПолучитьТипСчета(Объект.РегистрБухгалтерии));
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов();
	КонецЕсли;

	Элементы.СчетСторно.ОграничениеТипа 		 = ОписаниеТипов;
	Элементы.СчетаИсключенияСчет.ОграничениеТипа = ОписаниеТипов;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	ИзменениеРегистраБухгалтерии();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрБухгалтерииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) И (Объект.РегистрБухгалтерии <> ВыбранноеЗначение) 
		И ЗначениеЗаполнено(Объект.СчетСторно) И Объект.СчетаИсключения.Количество() > 0 Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ДопПараметры = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		Текст = "ru = 'При изменении регистра бухгалтерии счета учета в документе будут очищены! Продолжить?'";
		Оповещение = Новый ОписаниеОповещения("ВопросОбОчистке1Завершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, НСтр(Текст), РежимДиалогаВопрос.ДаНет, 0);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОбОчистке1Завершение".
//
&НаКлиенте
Процедура ВопросОбОчистке1Завершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РегистрБухгалтерии = ДопПараметры.ВыбранноеЗначение;	
	Объект.СчетСторно = Неопределено;
	Объект.СчетаИсключения.Очистить();
	
	ИзменениеРегистраБухгалтерии();
	
КонецПроцедуры // ВопросОбОчистке1Завершение() 

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)

	КэшированныеЗначения = Новый Структура;
 
	мКэшЗначений.Вставить("Организация"         , Объект.Организация);
	мКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	мКэшЗначений.Вставить("ВидОбъекта",	  		  Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	// Список выбора доступных регистров бухгалтерии.
	ДоступныеОбъектыСистемы = Новый СписокЗначений;
	
	Для каждого ТекРегистр Из Метаданные.Документы.бит_му_СторноЭлиминационныхНачислений.Движения Цикл

		МетаОбъект = ТекРегистр;
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);

		Если ЗначениеЗаполнено(ОбъектСистемы) Тогда				
			ДоступныеОбъектыСистемы.Добавить(ОбъектСистемы);
		КонецЕсли; 
		
	КонецЦикла;
	
	ДоступныеОбъектыСистемы.СортироватьПоЗначению();
	
	КэшированныеЗначения.Вставить("ДоступныеОбъектыСистемы", ДоступныеОбъектыСистемы);	
	
КонецПроцедуры

// Процедура устанавливает видимость элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	ЭтотРегистр_Бюд = ?(ЗначениеЗаполнено(Объект.РегистрБухгалтерии)
						, Объект.РегистрБухгалтерии.ИмяОбъекта = "бит_Бюджетирование"
						, Ложь);	
						
	Элементы.Сценарий.Видимость = ЭтотРегистр_Бюд;						

КонецПроцедуры // УстановитьВидимость()

// Функция получает состав периметра консолидации на указанную дату.
// 
// Параметры:
//  ПериметрКонсолидации - СправочникСсылка.бит_му_ПериметрыКонсолидации.
//  Период - Дата.
// 
// Возвращаемое значение:
//  Результат - Массив.
// 
&НаСервере
Функция ПолучитьСоставПериметраКонсолидации(ПериметрКонсолидации, Период)

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Период, ПериметрКонсолидации = &ПериметрКонсолидации) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |ГДЕ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ТипКонсолидации = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКонсолидации.Консолидирующая)
	               |	И (КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Период
	               |			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = &ПустаяДата)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", 				Период);
	Запрос.УстановитьПараметр("ПустаяДата",				Дата('00010101'));
	Запрос.УстановитьПараметр("ПериметрКонсолидации", 	ПериметрКонсолидации);
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции // ПолучитьСоставПериметраКонсолидации()

// Функция получает имя плана счетов для указанного регистра.
// 
// Параметры:
//  ПериметрКонсолидации - СправочникСсылка.бит_ОбъектыСистемы.
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
&НаСервереБезКонтекста
Функция ПолучитьТипСчета(РегистрБухгалтерииСсылка)

	Возврат Метаданные.РегистрыБухгалтерии[РегистрБухгалтерииСсылка.ИмяОбъекта].ПланСчетов.Имя;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанавливает заголовок формы документа.
// 
&НаКлиенте
Процедура УстановитьЗаголовокФормыДокумента()

 	СтруктураЗаголовка = Новый Структура;
 	СтруктураЗаголовка.Вставить("ЭтоНовый"            , Параметры.Ключ.Пустая());
 	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
 	СтруктураЗаголовка.Вставить("ДокументПроведен"    , Объект.Проведен);
 
 	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетСторно);
	МассивЭлементов.Добавить(Элементы.СчетаИсключенияСчет);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 


#КонецОбласти

#КонецОбласти