#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

Перем мРезультатЗапроса Экспорт; // Хранит результат запроса с данными о сторнировании.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ДвиженияПоРегистрам(Отказ, Заголовок);
               
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если РегистрБухгалтерии.ИмяОбъекта = "бит_Бюджетирование" Тогда
		ПроверяемыеРеквизиты.Добавить("Сценарий");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция выполняет запрос, возвращает остатки для сторнирования.
// 
// Параметры:
//  ЭтотРегистр_Меж - Булево.
//  ЭтотРегистр_Бюд - Булево.
// 
// Возвращаемое значение:
//  РезультатЗапроса.
// 
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Функция ПолучитьДанныеДляСторнирования(ЭтотРегистр_Меж, ЭтотРегистр_Бюд) Экспорт
Функция ПолучитьДанныеДляСторнирования(ЕстьМеждународныйУчет) Экспорт
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	//Запрос = Новый Запрос;
	//
	//СписокСчетов = СчетаИсключения.Выгрузить().ВыгрузитьКолонку("Счет");
	//СписокСчетов.Добавить(СчетСторно);
	//
	//Запрос.УстановитьПараметр("Период"		   , Дата);
	//Запрос.УстановитьПараметр("Организация"	   , Организация);
	//Запрос.УстановитьПараметр("СчетаИсключения", СписокСчетов);
	//
	//Если ЭтотРегистр_Меж Тогда // бит_Дополнительный_2
	//	
	//	ДопСтрокаПолей 	= "
	//	|	РегистрБухгалтерииОстатки.СуммаМУОстатокДт,
	//    |	РегистрБухгалтерииОстатки.СуммаМУОстатокКт,";
	//	
	//	ДопСтрокаУсловие = "Организация = &Организация";
	//	
	//ИначеЕсли ЭтотРегистр_Бюд Тогда // бит_Бюджетирование
	//	
	//	МассивЦФО = Новый Массив;
	//	
	//	ЗапросЦФО = Новый Запрос;
	//	ЗапросЦФО.УстановитьПараметр("Организация", Организация);
	//	Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
	//        
	//        ВидОргЦфо = "Организации_ЦФО";
	//		ЗапросЦФО.УстановитьПараметр("ВидСоответствия", Справочники.бит_ВидыСоответствийАналитик[ВидОргЦфо]); 
	//		ЗапросЦФО.Текст = "ВЫБРАТЬ
	//		                  |	бит_СоответствияАналитик.ПраваяАналитика_1 КАК ЦФО
	//		                  |ИЗ
	//		                  |	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	//		                  |ГДЕ
	//		                  |	бит_СоответствияАналитик.ВидСоответствия = &ВидСоответствия
	//		                  |	И бит_СоответствияАналитик.ЛеваяАналитика_1 = &Организация";
	//		
	//	Иначе	
	//	ЗапросЦФО.Текст = "
	//	|ВЫБРАТЬ
	//	|	бит_ЦФО_Подразделения.ЦФО	
	//	|ИЗ
	//	|	РегистрСведений.бит_ЦФО_Подразделения КАК бит_ЦФО_Подразделения
	//	|ГДЕ
	//	|	бит_ЦФО_Подразделения.Подразделение = &Организация
	//	|";
	//	КонецЕсли; 
	//	РезультатЗапроса = ЗапросЦФО.Выполнить();
	//	Если РезультатЗапроса.Пустой() Тогда
	//		ТекстСообщения = Нстр("ru = 'Не найдено ЦФО по организации %1%'");
	//		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Организация);
	//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	//	КонецЕсли;
	//	ТаблицаЦФО = РезультатЗапроса.Выгрузить();
	//	МассивЦФО = ТаблицаЦФО.ВыгрузитьКолонку("ЦФО");
	//			
	//    ДопСтрокаПолей = "
	//	|	РегистрБухгалтерииОстатки.ЦФО,
	//	|	РегистрБухгалтерииОстатки.СуммаСценарийОстатокДт,
	//    |	РегистрБухгалтерииОстатки.СуммаСценарийОстатокКт,";
	//	
	//	ДопСтрокаУсловие = "Сценарий = &Сценарий И ЦФО В (&МассивЦФО)";
	//	
	//	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	//	Запрос.УстановитьПараметр("МассивЦФО", МассивЦФО);
	//	
	//Иначе
	//	
	//	ДопСтрокаПолей 	 = "";   
	//	
	//	ДопСтрокаУсловие = "Организация = &Организация";		
	//	
	//КонецЕсли;
	//
	//ТекстЗапроса = "
	//|ВЫБРАТЬ
	//|	РегистрБухгалтерииОстатки.Счет,
	//|	РегистрБухгалтерииОстатки.Субконто1,
	//|	РегистрБухгалтерииОстатки.Субконто2,
	//|	РегистрБухгалтерииОстатки.Субконто3,
	//|	РегистрБухгалтерииОстатки.Субконто4,
	//|	РегистрБухгалтерииОстатки.Валюта,
	//|" + ДопСтрокаПолей + "
	//|	РегистрБухгалтерииОстатки.СуммаРеглОстатокДт,
	//|	РегистрБухгалтерииОстатки.СуммаРеглОстатокКт,
	//|	РегистрБухгалтерииОстатки.СуммаУпрОстатокДт,
	//|	РегистрБухгалтерииОстатки.СуммаУпрОстатокКт,
	//|	РегистрБухгалтерииОстатки.ВалютнаяСуммаОстатокДт,
	//|	РегистрБухгалтерииОстатки.ВалютнаяСуммаОстатокКт,
	//|	РегистрБухгалтерииОстатки.КоличествоОстатокДт,
	//|	РегистрБухгалтерииОстатки.КоличествоОстатокКт     
	//|ИЗ
	//|	РегистрБухгалтерии." + РегистрБухгалтерии.ИмяОбъекта + ".Остатки(&Период
	//|										, (НЕ Счет В ИЕРАРХИИ (&СчетаИсключения))
	//|										, 
	//|										, " + ДопСтрокаУсловие + ") КАК РегистрБухгалтерииОстатки
	//|";
	//
	//Запрос.Текст = ТекстЗапроса;
	//РезультатЗапроса = Запрос.Выполнить();

	//Возврат РезультатЗапроса;
	
	//ТекстЗапроса = "ВЫБРАТЬ
	//			   |	РегистрБухгалтерииОстатки.Счет,
	//			   |	РегистрБухгалтерииОстатки.Субконто1,
	//			   |	РегистрБухгалтерииОстатки.Субконто2,
	//			   |	РегистрБухгалтерииОстатки.Субконто3,
	//			   |	РегистрБухгалтерииОстатки.Субконто4,
	//			   |	РегистрБухгалтерииОстатки.Валюта,
	//			   |	РегистрБухгалтерииОстатки.СуммаРеглОстатокДт,
	//			   |	РегистрБухгалтерииОстатки.СуммаРеглОстатокКт,
	//			   |	РегистрБухгалтерииОстатки.СуммаУпрОстатокДт,
	//			   |	РегистрБухгалтерииОстатки.СуммаУпрОстатокКт,
	//			   |	РегистрБухгалтерииОстатки.ВалютнаяСуммаОстатокДт,
	//			   |	РегистрБухгалтерииОстатки.ВалютнаяСуммаОстатокКт,
	//			   |	РегистрБухгалтерииОстатки.КоличествоОстатокДт,
	//			   |	РегистрБухгалтерииОстатки.КоличествоОстатокКт" + ?(НЕ ЕстьМеждународныйУчет, "", ",
	//			   |	РегистрБухгалтерииОстатки.СуммаМУОстатокДт,
	//			   |	РегистрБухгалтерииОстатки.СуммаМУОстатокКт") + "
	//			   |ИЗ
	//			   |	РегистрБухгалтерии." + РегистрБухгалтерии.ИмяОбъекта + ".Остатки(&Период, (НЕ Счет В ИЕРАРХИИ (&СчетаИсключения)), , Организация = &Организация) КАК РегистрБухгалтерииОстатки";
	
	//БИТ Тртилек 19032013
	//ТекстЗапроса ="ВЫБРАТЬ
	//			  |	бит_Дополнительный_2ОборотыДтКт.СчетДт,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СчетКт,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт1,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт2,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт3,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт4,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоКт1,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоКт2,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоКт3,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоКт4,
	//			  |	бит_Дополнительный_2ОборотыДтКт.Организация,
	//			  |	бит_Дополнительный_2ОборотыДтКт.ВалютаДт,
	//			  |	бит_Дополнительный_2ОборотыДтКт.ВалютаКт,
	//			  |	бит_Дополнительный_2ОборотыДтКт.ВидДвиженияМСФО,
	//			  |	СУММА(бит_Дополнительный_2ОборотыДтКт.СуммаРеглОборот) КАК СуммаРегл,
	//			  |	СУММА(бит_Дополнительный_2ОборотыДтКт.СуммаУпрОборот) КАК СуммаУпр," + ?(НЕ ЕстьМеждународныйУчет,"", "СУММА(бит_Дополнительный_2ОборотыДтКт.СуммаМУОборот) КАК СуммаМУ,") + " 
	//			  |	СУММА(бит_Дополнительный_2ОборотыДтКт.ВалютнаяСуммаОборотДт) КАК ВалютнаяСуммаДт,
	//			  |	СУММА(бит_Дополнительный_2ОборотыДтКт.ВалютнаяСуммаОборотКт) КАК ВалютнаяСуммаКт,
	//			  |	СУММА(бит_Дополнительный_2ОборотыДтКт.КоличествоОборотДт) КАК КоличествоДт,
	//			  |	СУММА(бит_Дополнительный_2ОборотыДтКт.КоличествоОборотКт) КАК КоличествоКт
	//			  |ИЗ
	//			  |	РегистрБухгалтерии."+ РегистрБухгалтерии.ИмяОбъекта +".ОборотыДтКт(&ДатаНач, &ДатаКон, Период, НЕ СчетДт В ИЕРАРХИИ (&СчетаИсключения), , НЕ СчетКт В ИЕРАРХИИ (&СчетаИсключения), , Организация = &Организация) КАК бит_Дополнительный_2ОборотыДтКт
	//			  |
	//			  |СГРУППИРОВАТЬ ПО
	//			  |	бит_Дополнительный_2ОборотыДтКт.СчетДт,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СчетКт,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт1,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт2,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт3,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоДт4,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоКт1,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоКт2,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоКт3,
	//			  |	бит_Дополнительный_2ОборотыДтКт.СубконтоКт4,
	//			  |	бит_Дополнительный_2ОборотыДтКт.Организация,
	//			  |	бит_Дополнительный_2ОборотыДтКт.ВалютаДт,
	//			  |	бит_Дополнительный_2ОборотыДтКт.ВалютаКт,
	//			  |	бит_Дополнительный_2ОборотыДтКт.ВидДвиженияМСФО" ;
	
	ТекстЗапроса ="ВЫБРАТЬ
	              |	бит_Дополнительный_2ДвиженияССубконто.Период,
	              |	бит_Дополнительный_2ДвиженияССубконто.Регистратор,
	              |	бит_Дополнительный_2ДвиженияССубконто.НомерСтроки,
	              |	бит_Дополнительный_2ДвиженияССубконто.Активность,
	              |	бит_Дополнительный_2ДвиженияССубконто.СчетДт,
	              |	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт1,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт1,
	              |	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт2,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт2,
	              |	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт3,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт3,
	              |	бит_Дополнительный_2ДвиженияССубконто.СубконтоДт4,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоДт4,
	              |	бит_Дополнительный_2ДвиженияССубконто.СчетКт,
	              |	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт1,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт1,
	              |	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт2,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт2,
	              |	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт3,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт3,
	              |	бит_Дополнительный_2ДвиженияССубконто.СубконтоКт4,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидСубконтоКт4,
	              |	бит_Дополнительный_2ДвиженияССубконто.Организация,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВалютаДт,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВалютаКт," + ?(НЕ ЕстьМеждународныйУчет, "", "бит_Дополнительный_2ДвиженияССубконто.ВидДвиженияМСФО,бит_Дополнительный_2ДвиженияССубконто.СуммаМУ * -1 КАК СуммаМУ,") + "
	              |	бит_Дополнительный_2ДвиженияССубконто.СуммаРегл * -1 КАК СуммаРегл,
	              |	бит_Дополнительный_2ДвиженияССубконто.СуммаУпр * -1 КАК СуммаУпр,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВалютнаяСуммаДт * -1 КАК ВалютнаяСуммаДт,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВалютнаяСуммаКт * -1 КАК ВалютнаяСуммаКт,
	              |	бит_Дополнительный_2ДвиженияССубконто.КоличествоДт,
	              |	бит_Дополнительный_2ДвиженияССубконто.КоличествоКт,
	              |	бит_Дополнительный_2ДвиженияССубконто.Содержание,
	              |	бит_Дополнительный_2ДвиженияССубконто.НомерЖурнала,
	              |	бит_Дополнительный_2ДвиженияССубконто.ВидПроводки,
	              |	бит_Дополнительный_2ДвиженияССубконто.ДатаФормирования
	              |ИЗ
	              |	РегистрБухгалтерии."+РегистрБухгалтерии.ИмяОбъекта+".ДвиженияССубконто(
	              |			&ДатаНач,
				  |			&ДатаКон,
				  |			Организация = &Организация
				  |				И НЕ СчетДт В ИЕРАРХИИ (&СчетаИсключения)
				  |				И НЕ СчетКт В ИЕРАРХИИ (&СчетаИсключения),
				  |			,
				  |			) КАК бит_Дополнительный_2ДвиженияССубконто
				  // ++ БИТ Amerkulov 10022014
				  | ГДЕ бит_Дополнительный_2ДвиженияССубконто.Активность
				  // -- БИТ Amerkulov 10022014
				  | " ;
	///БИТ Тртилек

	Запрос = Новый Запрос(ТекстЗапроса);
	СписокСчетов = СчетаИсключения.Выгрузить().ВыгрузитьКолонку("Счет");
	//БИТ Тртилек 19032013 СписокСчетов.Добавить(СчетСторно);
	
	//Запрос.УстановитьПараметр("Период", 		 Дата);
	Запрос.УстановитьПараметр("ДатаНач", 		 бит_ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 		 КонецДня(бит_ДатаКон));
	Запрос.УстановитьПараметр("Организация",	 Организация);
	Запрос.УстановитьПараметр("СчетаИсключения", СписокСчетов);

	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляСторнирования()

// Функция определяет будут ли движения по международному учету.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьМеждународныйУчет() Экспорт

	Если Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии.ИмяОбъекта].Ресурсы.Найти("СуммаМУ") = Неопределено Тогда
		ЕстьМеждународныйУчет = Ложь;
	Иначе
		ЕстьМеждународныйУчет = Истина;
	КонецЕсли;

	Возврат ЕстьМеждународныйУчет;
	
КонецФункции // ЕстьМеждународныйУчет()	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
												
	Если ПараметрОбъектКопирования = Неопределено Тогда
		РегистрБухгалтерии = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(ПланыВидовХарактеристик.бит_НастройкиПользователей.ОсновнойРегистрБухгалтерииУУ);
	КонецЕсли;												
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(Отказ, Заголовок)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ЭтотРегистр_Бюд = РегистрБухгалтерии.ИмяОбъекта = "бит_Бюджетирование";
	//ЭтотРегистр_Меж = РегистрБухгалтерии.ИмяОбъекта = "бит_Дополнительный_2";
	ЕстьМеждународныйУчет = ЕстьМеждународныйУчет();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	МассивПоказателей = Новый Массив;
	
	МассивПоказателей.Добавить("СуммаРегл");
	МассивПоказателей.Добавить("СуммаУпр");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (	
	//Если ЭтотРегистр_Меж Тогда
	//	МассивПоказателей.Добавить("СуммаМУ");
	//ИначеЕсли ЭтотРегистр_Бюд Тогда
	//	МассивПоказателей.Добавить("СуммаСценарий");
	//КонецЕсли;  
	Если ЕстьМеждународныйУчет Тогда
		МассивПоказателей.Добавить("СуммаМУ");
	КонецЕсли;	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	Если мРезультатЗапроса = Неопределено Тогда	
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//мРезультатЗапроса = ПолучитьДанныеДляСторнирования(ЭтотРегистр_Меж, ЭтотРегистр_Бюд);
		мРезультатЗапроса = ПолучитьДанныеДляСторнирования(ЕстьМеждународныйУчет);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	КонецЕсли;
	
	Выборка = мРезультатЗапроса.Выбрать();
	
	Проводки = Движения[РегистрБухгалтерии.ИмяОбъекта];
	Проводки.Записывать = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Проводки.Добавить();
		НоваяСтрока.Регистратор = Ссылка;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//НоваяСтрока.Активность	= Истина;
		//НоваяСтрока.Период		= Дата;
		//		
		//Для каждого ТекСтр Из МассивПоказателей Цикл
		//	Если Выборка[ТекСтр + "ОстатокДт"] <> 0 Тогда
		//		СчетДляЗакрытия = "Дт";
		//		СчетДляСторно	= "Кт";
		//		Прервать;
		//	Иначе
		//		СчетДляЗакрытия = "Кт";
		//		СчетДляСторно	= "Дт";
		//	КонецЕсли;
		//КонецЦикла;
		//
		//НоваяСтрока["Счет" + СчетДляЗакрытия] 			= Выборка.Счет;
		//НоваяСтрока["Валюта" + СчетДляЗакрытия]		 	= Выборка.Валюта;
		//НоваяСтрока["ВалютнаяСумма" + СчетДляЗакрытия]	= - Выборка["ВалютнаяСуммаОстаток" + СчетДляЗакрытия];
		//НоваяСтрока["Количество" + СчетДляЗакрытия]	 	= Выборка["КоличествоОстаток" + СчетДляЗакрытия];
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Период		= НачалоМесяца(Дата);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		
		Для Н = 1 По мКоличествоСубконтоМУ Цикл
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
			//бит_му_ОбщегоНазначения.УстановитьСубконто(Выборка.Счет, НоваяСтрока["Субконто" + СчетДляЗакрытия], Н, Выборка["Субконто" + Н]);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Выборка.СчетДт, НоваяСтрока.СубконтоДт, Н, Выборка["СубконтоДт" + Н]);
			бит_му_ОбщегоНазначения.УстановитьСубконто(Выборка.СчетКт, НоваяСтрока.СубконтоКт, Н, Выборка["СубконтоКт" + Н]);
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		КонецЦикла;
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//НоваяСтрока["Счет" + СчетДляСторно] 			= СчетСторно;
		//		
		//НоваяСтрока.СуммаРегл = - Выборка["СуммаРеглОстаток" + СчетДляЗакрытия];
		//НоваяСтрока.СуммаУпр  = - Выборка["СуммаУпрОстаток" + СчетДляЗакрытия];		
		//
		//Если ЭтотРегистр_Меж Тогда
		//	НоваяСтрока.Организация = Организация;
		//	НоваяСтрока.СуммаМУ		= - Выборка["СуммаМУОстаток" + СчетДляЗакрытия];			
		//ИначеЕсли ЭтотРегистр_Бюд Тогда  			
		//	НоваяСтрока.Сценарий = Сценарий;
		//	НоваяСтрока.ЦФО 	 = Выборка.ЦФО;
		//	НоваяСтрока.СуммаСценарий = - Выборка["СуммаСценарийОстаток" + СчетДляЗакрытия];
		//Иначе
		//	НоваяСтрока.Организация = Организация;
		//КонецЕсли;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		
		НоваяСтрока.Содержание = Содержание;
		
		///БИТ Тртилек
		//БИТ Тртилек 19082013 заполним вид движения
		НоваяСтрока.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.СторноЭлиминации;
		///БИТ Тртилек
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;
мРезультатЗапроса 	  = Неопределено;

#КонецОбласти

#КонецЕсли
