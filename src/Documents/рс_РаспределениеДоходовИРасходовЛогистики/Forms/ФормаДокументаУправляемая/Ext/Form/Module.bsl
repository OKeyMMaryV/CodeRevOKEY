////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущие значения реквизитов формы. Клиент.
&НаКлиенте 
Перем мКэшРеквизитовФормы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
	,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЭШЕМ РЕКВИЗИТОВ ФОРМЫ

// Процедура заполняет кэш реквизитов формы данными объекта.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	ПриОткрытииНаСервере();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	Если ЭтоНовый Тогда
		Объект.Дата = КонецДня(Объект.Дата);
	КонецЕсли;
	
	// ++ БоровинскаяОА (СофтЛаб) 19.12.18 Начало (#3096)
	//УстановитьВидимость();
	Если ЭтоНовый И НЕ ЗначениеЗаполнено(Объект.СчетУчета) Тогда
		КомандаЗаполнитьПоНастройкамЭкономическогоУчета(Неопределено);
	Иначе
		УстановитьВидимость();
	КонецЕсли;
	// -- БоровинскаяОА (СофтЛаб) 19.12.18 Конец (#3096)
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		// Заполнить реквизиты значениями по умолчанию.
		рс_ОбщийМодуль.ЗаполнитьШапкуДокумента(Объект, Объект.Ссылка.Метаданные(), бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	КонецЕсли;
	
КонецПроцедуры



// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	Модифицированность = Ложь;
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ     


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
		
	// ++ БоровинскаяОА (СофтЛаб) 19.12.18 Начало (#3096)
	//УстановитьВидимость();
	// -- БоровинскаяОА (СофтЛаб) 19.12.18 Начало (#3096)
	
КонецПроцедуры

// ++ БоровинскаяОА (СофтЛаб) 19.12.18 Начало (#3096)
&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ВидОперации <> ВыбранноеЗначение Тогда
		
		Если ЗначениеЗаполнено(Объект.СчетУчета) ИЛИ Объект.База.Количество() > 0 Тогда
			
			ТекстВопроса = "При смене вида операции:";
			Если ЗначениеЗаполнено(Объект.СчетУчета) Тогда
				ТекстВопроса = ТекстВопроса + Символы.ПС + "- будут перезаполнены параметры счета учета";
			КонецЕсли;
			Если Объект.База.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + Символы.ПС + "- будет очищена база расчета";
			КонецЕсли;
			ТекстВопроса = ТекстВопроса + Символы.ПС + "Продолжить?";
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаОперации", ЭтотОбъект, Объект.ВидОперации);
			ПоказатьВопрос(ОбработчикОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ВопросПриИзмененииВидаОперации(КодВозвратаДиалога.Да, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// -- БоровинскаяОА (СофтЛаб) 19.12.18 Конец (#3096)

//СофтЛаб Начало 2018-12-04 3096
&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Субконто4",	"Субконто1", "Субконто2", "Субконто3", "Субконто3");
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчета, Объект, ПоляОбъекта);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоНастройкамЭкономическогоУчета(Команда)

	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.КомпенсацияЛогистическихЗатратЗаСчетВнутреннихДоходов") Тогда
		
		Объект.СчетУчета = рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(ПредопределенноеЗначение("Справочник.рс_ПоказателиНастроекЭУ.СчетВспомогательный"), Объект.Дата);
		Объект.Субконто1 = Неопределено;
		Объект.Субконто2 = Неопределено;
		Объект.Субконто3 = Неопределено;
		Объект.Субконто4 = Неопределено;

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя") Тогда
		
		Объект.СчетУчета = рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(ПредопределенноеЗначение("Справочник.рс_ПоказателиНастроекЭУ.СчетУчетаДоставкаТоваров"), Объект.Дата);
		Объект.Субконто1 = рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(ПредопределенноеЗначение("Справочник.рс_ПоказателиНастроекЭУ.ОбъектДляРаспределенияДоставкаТоваров"), Объект.Дата);;
		Объект.Субконто2 = рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(ПредопределенноеЗначение("Справочник.рс_ПоказателиНастроекЭУ.ФункцияДляРаспределенияДоставкаТоваров"), Объект.Дата);;
		Объект.Субконто3 = Неопределено;
		Объект.Субконто4 = Неопределено;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ОбработкаТоваровВнутренняя") Тогда
		
		Объект.СчетУчета = рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(ПредопределенноеЗначение("Справочник.рс_ПоказателиНастроекЭУ.СчетУчетаОбработкаТоваров"), Объект.Дата);
		Объект.Субконто1 = рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(ПредопределенноеЗначение("Справочник.рс_ПоказателиНастроекЭУ.ОбъектДляРаспределенияОбработкаТоваров"), Объект.Дата);;
		Объект.Субконто2 = рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(ПредопределенноеЗначение("Справочник.рс_ПоказателиНастроекЭУ.ФункцияДляРаспределенияОбработкаТоваров"), Объект.Дата);;
		Объект.Субконто3 = Неопределено;
		Объект.Субконто4 = Неопределено;
		
	Иначе

		Объект.СчетУчета = Неопределено;
		Объект.Субконто1 = Неопределено;
		Объект.Субконто2 = Неопределено;
		Объект.Субконто3 = Неопределено;
		Объект.Субконто4 = Неопределено;
		
	КонецЕсли;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Субконто4",	"Субконто1", "Субконто2", "Субконто3", "Субконто3");
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.СчетУчета, Объект, ПоляОбъекта);
	
	УстановитьВидимость();
	
КонецПроцедуры
//СофтЛаб Конец 2018-12-04 3096

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьКэшЗначений();
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )

	//izhtc Алексей Яковлев 26.08.2015(
	//Стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	//izhtx Алексей Яковлев	26.08.2015)
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Вызов механизма защиты
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма, МетаданныеОбъекта.ПолноеИмя(), Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие нового 
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьКэшЗначений();
		//СтруктураНастройки = РегистрыСведений.бит_вго_НастройкиПроведенияСверкиВГО.ПолучитьПоследнее(Объект.Дата, Новый Структура("Настройка", ПланыВидовХарактеристик.бит_вго_ВидыНастроекСверкиВГО.КонтролироватьДопустимоеРасхождение));
		//Объект.КонтролироватьДопустимоеРасхождение    = СтруктураНастройки.Значение;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не Отказ Тогда		
			//ТекущийОбъект.ДополнительныеСвойства.Вставить("СуммаАбсолютногоРасхождения"	  , Объект.СуммаАбсолютногоРасхождения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	фКэшЗначений.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавлиант видимость доступность элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УстановитьВидимость()
	
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗагрузитьИзExcel.Видимость 
	= (Объект.ВидОперации = Перечисления.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.КомпенсацияЛогистическихЗатратЗаСчетВнутреннихДоходов);

	//СофтЛаб Начало 2018-12-04 3096
	//// BIT AMerkulov 03-08-2015 ++	
	//ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаполнитьПоРегистру.Видимость 
	//	= (Объект.ВидОперации = Перечисления.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ОбработкаТоваровВнутренняя) ИЛИ (Объект.ВидОперации = Перечисления.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя);
	//// BIT AMerkulov 03-08-2015 --	
	Элементы.ФормаЗаполнитьПоРегистру.Видимость 
		= (Объект.ВидОперации = Перечисления.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ОбработкаТоваровВнутренняя) ИЛИ (Объект.ВидОперации = Перечисления.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя);
	//СофтЛаб Конец 2018-12-04 3096
	
	//ОК Ванюков К. +//  убрать мусор из формы документа: под полными правами на форме документа видна лишняя кнопка кнопка "Заполнить по регистру (старый вариант)" // 2013-02-18
	//Попытка
	//	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаполнитьПоРегистру_Old.Видимость 
	//	= (Объект.ВидОперации = Перечисления.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ОбработкаТоваровВнутренняя) И РольДоступна("ПолныеПрава");
	//Исключение
	//КонецПопытки;	
	//ОК Ванюков К. -		
	
	//СофтЛаб Начало 2018-12-04 3096
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.КомпенсацияЛогистическихЗатратЗаСчетВнутреннихДоходов") Тогда

		Элементы.СчетУчета.Заголовок = "Счет учета Кт";
		
		Элементы.Субконто1.Видимость = Ложь;
		Элементы.Субконто2.Видимость = Ложь;
		Элементы.Субконто3.Видимость = Ложь;
		Элементы.Субконто4.Видимость = Ложь;

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя") Тогда

		Элементы.СчетУчета.Заголовок = "Счет учета Дт";
		Элементы.Субконто1.Заголовок = "Субконто Дт 1 (оно же Субконто Кт1)";
		Элементы.Субконто2.Заголовок = "Субконто Дт 2 (оно же Субконто Кт2)";

		Элементы.Субконто1.Видимость = Истина;
		Элементы.Субконто2.Видимость = Истина;
		Элементы.Субконто3.Видимость = Ложь;
		Элементы.Субконто4.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ОбработкаТоваровВнутренняя") Тогда
		
		Элементы.СчетУчета.Заголовок = "Счет учета Дт";
		Элементы.Субконто1.Заголовок = "Субконто Дт 1 (оно же Субконто Кт1)";
		Элементы.Субконто2.Заголовок = "Субконто Дт 2 (оно же Субконто Кт2)";

		Элементы.Субконто1.Видимость = Истина;
		Элементы.Субконто2.Видимость = Истина;
		Элементы.Субконто3.Видимость = Ложь;
		Элементы.Субконто4.Видимость = Ложь;
		
	Иначе

		Элементы.СчетУчета.Заголовок = "Счет учета";
		Элементы.Субконто1.Заголовок = "Субконто 1";
		Элементы.Субконто2.Заголовок = "Субконто 2";
		
		Элементы.Субконто1.Видимость = Ложь;
		Элементы.Субконто2.Видимость = Ложь;
		Элементы.Субконто3.Видимость = Ложь;
		Элементы.Субконто4.Видимость = Ложь;

	КонецЕсли; 
	//СофтЛаб Конец 2018-12-04 3096

КонецПроцедуры // УстановитьВидимостьДоступностьПоРегБух()

// Процедура применяет настройки доступности и видимости для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов() Экспорт
	
	// Получение таблицы настроек доступности элементов управления.
	ТаблицаНастроекДоступности = бит_ОбщегоНазначения.ПолучитьНастройкиДоступностиЭлементовУправления(Объект, Истина);
	
	// Фильтр таблицы настроек по статусу.
	ДокументЗаявка 			  = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ТекущийСтатус			  = Неопределено;
	ТаблицаАктуальныхНастроек = бит_ОбщегоНазначения.ПолучитьАктуальныеНастройки(ТаблицаНастроекДоступности
	,ТекущийСтатус);
	
	// Структура параметров для проверки произвольного условия.
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ТекущийОбъект", Объект);
	//ПараметрыУсловия.Вставить("Статус"		 , ТекущийСтатус);
	
	// Применяем настройки.
	бит_ОбщегоНазначения.УстановитьДоступностьЭлементовУправленияПоНастройкам(ЭтаФорма
	,ТаблицаАктуальныхНастроек
	,ПараметрыУсловия);
КонецПроцедуры // УстановитьНастройкиДоступностиЭлементов()

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	Если Объект.База.Количество() > 0 Тогда
		Ответ = Вопрос("База расчета будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.База.Очистить();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл для загрузки данных";
	Диалог.Фильтр = "Файл Excel (*.xls;*.xlsx)|*.xls;*.xlsx|";
	
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ФайлИсточник = Диалог.ПолноеИмяФайла;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("НачальнаяСтрока", 2);	
	
	ПрочитатьТаблицуИзExcel(ФайлИсточник, СтруктураПараметры); 
		
КонецПроцедуры

&НаСервере
Функция ЗагрузитьИзExcel_НаСервере(ТаблицаДанных, СтруктураСтрока)
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		НомерСтроки = ТаблицаДанных.Индекс(СтрокаДанных) + 1;
		
		//Состояние("Обработка строки " + НомерСтроки);
		
		СтруктураСтрока.Счет = ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду(СтрокаДанных[0]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.Счет) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найден счет по коду <" + СтрокаДанных[0] + ">");
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока.Объект = Справочники.ОбъектыСтроительства.НайтиПоКоду(СтрокаДанных[2]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.Объект) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найден объект по коду <" + СтрокаДанных[2] + ">");
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока.ФункцияЦФО = Справочники.Подразделения.НайтиПоКоду(СтрокаДанных[4]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.ФункцияЦФО) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найдена функция по коду <" + СтрокаДанных[4] + ">");
			Продолжить;
		КонецЕсли;
		
		Попытка 
			СтруктураСтрока.Сумма = Число(СтрЗаменить(СтрокаДанных[5], " ", ""));
		Исключение
			Сообщить("Строка " + НомерСтроки + ": Ошибка в сумме <" + СтрокаДанных[5] + ">");
			Продолжить;
		КонецПопытки;
		
		НоваяСтрока = Объект.База.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтрока);
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ПрочитатьТаблицуИзExcel(ФайлЗагрузки, СтруктураПараметрыПереданные = Неопределено) Экспорт 
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("НомерСтраницы", 1);
	СтруктураПараметры.Вставить("НачальнаяСтрока", 1);
	СтруктураПараметры.Вставить("НачальнаяКолонка", 1);
	СтруктураПараметры.Вставить("КонечнаяСтрока", 0);
	СтруктураПараметры.Вставить("КонечнаяКолонка", 0);
	СтруктураПараметры.Вставить("ОтсекатьНезначащиеСимволы", Истина);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметры, СтруктураПараметрыПереданные);
	
	Если ПустаяСтрока(ФайлЗагрузки) Тогда
		Предупреждение("Не указан файл загрузки!");
		Возврат Неопределено;
	КонецЕсли;
	
	Состояние("Запуск Excel");
	
	Попытка
		ОбъектExcel = Новый COMОбъект("Excel.Application");
	Исключение
		Предупреждение("Невозможно запустить MS Excel!" + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Состояние("Открытие файла");
	
	КнигиExcel = ОбъектExcel.WorkBooks;
	Попытка
		ТекстExcel = КнигиExcel.Open(ФайлЗагрузки);
	Исключение
		Предупреждение("Невозможно открыть файл " + ФайлЗагрузки + "!" + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ЛистExcel = ТекстExcel.Sheets(СтруктураПараметры.НомерСтраницы);
	
	ВсегоСтрок = ЛистExcel.Cells(1,1).SpecialCells(11).Row;
	ВсегоКолонок = ЛистExcel.Cells(1,1).SpecialCells(11).Column;

	СтруктураПараметры.КонечнаяСтрока = Мин(ВсегоСтрок, ?(СтруктураПараметры.КонечнаяСтрока = 0, ВсегоСтрок, СтруктураПараметры.КонечнаяСтрока));
	СтруктураПараметры.КонечнаяКолонка = Мин(ВсегоКолонок, ?(СтруктураПараметры.КонечнаяКолонка = 0, ВсегоКолонок, СтруктураПараметры.КонечнаяКолонка));
	
	МассивСтруктур = Новый Массив;
	
	Для НомСтроки = СтруктураПараметры.НачальнаяСтрока По СтруктураПараметры.КонечнаяСтрока Цикл
		
		Состояние("Загрузка строки №" + НомСтроки);
		
		НоваяСтрока = Новый Структура;

		Для НомКолонки = СтруктураПараметры.НачальнаяКолонка По СтруктураПараметры.КонечнаяКолонка Цикл
			Значение = ЛистExcel.Cells(НомСтроки, НомКолонки).Text;
			Значение = ?(СтруктураПараметры.ОтсекатьНезначащиеСимволы, СокрЛП(Значение), Значение);
			НоваяСтрока.Вставить("Колонка"+НомКолонки, Значение);
		КонецЦикла;
		
		МассивСтруктур.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Состояние("Закрытие Excel");
	
	Если ОбъектExcel <> Неопределено Тогда
		
		ОбъектExcel.displayAlerts = 0;
		ОбъектExcel.Application.Quit();
		КнигиExcel 	= Неопределено;
		ТекстExcel 	= Неопределено;
		ЛистExcel 	= Неопределено;
		ОбъектExcel = Неопределено;
		
	КонецЕсли;
	
	ТаблицаЗагрузкиДобавитьКолонки(СтруктураПараметры.НачальнаяКолонка, СтруктураПараметры.КонечнаяКолонка, МассивСтруктур);
	
КонецФункции

&НаСервере
Функция ТаблицаЗагрузкиДобавитьКолонки(НачальнаяКолонка, КонечнаяКолонка, МассивСтруктур)
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	Для НомКолонки = НачальнаяКолонка По КонечнаяКолонка Цикл	
		ТаблицаРезультат.Колонки.Добавить("Колонка" + НомКолонки);	
	КонецЦикла;
	
	Для Строка=0 По МассивСтруктур.Количество()-1 Цикл
		ТаблицаРезультат.Добавить();
		Счетчик = 0;
		Для Каждого Колонка Из МассивСтруктур[Строка] Цикл
			ТаблицаРезультат[Строка][Счетчик] = Колонка.Значение;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	// Rarus-spb byse 2012.12.28 {
	мСтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаРезультат Цикл
		ЕстьНепустые = ЛОЖЬ;
		Для Каждого Колонка Из ТаблицаРезультат.Колонки Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ[Колонка.Имя]) Тогда
				ЕстьНепустые = Истина;
			КонецЕсли;	
		КонецЦикла;
		Если НЕ ЕстьНепустые Тогда 
			мСтрокиКУдалению.Добавить(СтрокаТЧ);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению из мСтрокиКУдалению Цикл
		ТаблицаРезультат.Удалить(СтрокаКУдалению);
	КонецЦикла;	
	// Rarus-spb byse 2012.12.28 }
	
	//Если ТаблицаДанных = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	СтруктураСтрока = Новый Структура("Счет, Объект, ФункцияЦФО, Сумма");
	
	ЗагрузитьИзExcel_НаСервере(ТаблицаРезультат, СтруктураСтрока);
	
	РассчитатьСуммуДокумента();
		
КонецФункции


&НаСервере
Функция РезультатТаблицаНаСервере(СтруктураПараметры, ФайлЗагрузки)
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоРегистру_Old(Команда)
	
	Если Объект.База.Количество() > 0 Тогда
		Ответ = Вопрос("База расчета будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.База.Очистить();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПоРегистру_Old_НаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРегистру_Old_НаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//СофтЛаб Начало 2018-12-08 3096
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//СофтЛаб Конец 2018-12-08 3096
	|	рс_СоставРасходовРЦСрезПоследних.Период,
	|	рс_СоставРасходовРЦСрезПоследних.Счет КАК Счет,
	|	рс_СоставРасходовРЦСрезПоследних.Объект КАК Объект,
	|	рс_СоставРасходовРЦСрезПоследних.Функция КАК ФункцияЦФО,
	|	рс_СоставРасходовРЦСрезПоследних.Использовать
	|ИЗ
	|	РегистрСведений.рс_СоставРасходовРЦ.СрезПоследних(&Период, ) КАК рс_СоставРасходовРЦСрезПоследних
	|ГДЕ
	|	рс_СоставРасходовРЦСрезПоследних.Использовать = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	ФункцияЦФО,
	|	Объект";
	Запрос.УстановитьПараметр("Период", КонецМесяца(Объект.Дата));
	ТаблицаРасходыРЦ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРасходыРЦ Из ТаблицаРасходыРЦ Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		//СофтЛаб Начало 2018-12-08 3096
		//"ВЫБРАТЬ
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//СофтЛаб Конец 2018-12-08 3096
		|	бит_Дополнительный_2Обороты.Счет КАК Счет,
		|	бит_Дополнительный_2Обороты.Субконто1 КАК Объект,
		|	бит_Дополнительный_2Обороты.Субконто2 КАК ФункцияЦФО,
		|	СУММА(бит_Дополнительный_2Обороты.СуммаРеглОборотДт) КАК ОборотДт,
		|	СУММА(бит_Дополнительный_2Обороты.СуммаРеглОборотКт) КАК ОборотКт
		|ПОМЕСТИТЬ ТаблицаОбороты
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Счет В ИЕРАРХИИ (&Счет),
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &Объект
		|				И Субконто2 = &ФункцияЦФО,
		|			,
		|			) КАК бит_Дополнительный_2Обороты
		|
		|СГРУППИРОВАТЬ ПО
		|	бит_Дополнительный_2Обороты.Субконто1,
		|	бит_Дополнительный_2Обороты.Субконто2,
		|	бит_Дополнительный_2Обороты.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбороты.Счет,
		|	ТаблицаОбороты.Объект,
		|	ТаблицаОбороты.ФункцияЦФО,
		|	ТаблицаОбороты.ОборотКт,
		|	ТаблицаОбороты.ОборотДт,
		|	ТаблицаОбороты.ОборотДт - ТаблицаОбороты.ОборотКт КАК Сумма
		|ИЗ
		|	ТаблицаОбороты КАК ТаблицаОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОбороты.Объект.Наименование";
		Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Объект.Период.Дата));
		Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.Период.Дата));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Счет", СтрокаРасходыРЦ.Счет);
		Запрос.УстановитьПараметр("Объект", СтрокаРасходыРЦ.Объект);
		Запрос.УстановитьПараметр("ФункцияЦФО", СтрокаРасходыРЦ.ФункцияЦФО);
		ТаблицаОбороты = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаОбороты Из ТаблицаОбороты Цикл
			НоваяСтрока = Объект.База.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбороты);
		КонецЦикла;
		
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

// Rarus-spb byse 2012.12.27 {
&НаКлиенте
Процедура ЗаполнитьПоРегистру(Команда)
	
	//СофтЛаб Начало 2018-12-08 3096
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		
		ТекстСообщения = ?(НЕ ЗначениеЗаполнено(Объект.Организация), "Необходимо заполнить организацию.", "")
						+ ?(НЕ ЗначениеЗаполнено(Объект.Организация) И НЕ ЗначениеЗаполнено(Объект.Период), Символы.ПС, "")
						+ ?(НЕ ЗначениеЗаполнено(Объект.Период), "Необходимо заполнить период.", "");
		
		ЗаголовокСообщения = "Заполнение базы распределения.";	
		ПоказатьПредупреждение(,ТекстСообщения,, ЗаголовокСообщения);		
		
		Возврат;
	
	КонецЕсли; 
	//СофтЛаб Конец 2018-12-08 3096
	
	Если Объект.База.Количество() > 0 Тогда
		//СофтЛаб Начало 2018-12-08 3096
		//Ответ = Вопрос("База расчета будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	Объект.База.Очистить();
		//Иначе
		//	Возврат;
		//КонецЕсли;
		ТекстВопроса = "База расчета будет очищена. Продолжить?";
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
	Иначе 
		ВопросПередЗаполнениемТабличнойЧастиЗавершение(КодВозвратаДиалога.Да, Неопределено);
		//СофтЛаб Конец 2018-12-08 3096
	КонецЕсли;
	
	//СофтЛаб Начало 2018-12-08 3096
	//// BIT AMerkulov 03-08-2015 ++
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ОбработкаТоваровВнутренняя") Тогда
	//	ЗаполнитьПоРегиструСервер();
	//КонецЕсли;
	//
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя") Тогда
	//	ЗаполнитьПоРегиструСерверДоставка();
	//КонецЕсли;	
	//// BIT AMerkulov 03-08-2015 --	
	//СофтЛаб Конец 2018-12-08 3096
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРегиструСервер ()
	Запрос                         = Новый Запрос;
	МВТ                            = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Период"     ,КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаНач"    ,НачалоМесяца(Объект.Период.Дата));
	Запрос.УстановитьПараметр("ДатаКон"    ,КонецМесяца(Объект.Период.Дата));
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.Текст =
	//СофтЛаб Начало 2018-12-08 3096
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//СофтЛаб Конец 2018-12-08 3096
	|	рс_СоставРасходовРЦСрезПоследних.Период КАК Период,
	|	рс_СоставРасходовРЦСрезПоследних.Счет КАК Счет,
	|	рс_СоставРасходовРЦСрезПоследних.Объект КАК Объект,
	|	рс_СоставРасходовРЦСрезПоследних.Функция КАК ФункцияЦФО,
	|	рс_СоставРасходовРЦСрезПоследних.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТСоставРасходовРЦ
	|ИЗ
	//СофтЛаб Начало 2018-12-08 3096
	//|	РегистрСведений.рс_СоставРасходовРЦ.СрезПоследних(&Период, ) КАК рс_СоставРасходовРЦСрезПоследних
	|	РегистрСведений.рс_СоставРасходовРЦ.СрезПоследних(&Период, ВидОперации <> ЗНАЧЕНИЕ(Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя)) КАК рс_СоставРасходовРЦСрезПоследних
	//СофтЛаб Конец 2018-12-08 3096
	|ГДЕ
	|	рс_СоставРасходовРЦСрезПоследних.Использовать = ИСТИНА
	//СофтЛаб Начало 2018-12-08 3096
	//// BIT AMerkulov 03-08-2015 ++	
	//| И ВидОперации <> ЗНАЧЕНИЕ(Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя)
	//// BIT AMerkulov 03-08-2015 ++	
	//СофтЛаб Конец 2018-12-08 3096
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Счет,
	|	Период,
	|	ФункцияЦФО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСоставРасходовРЦ.Счет
	|ИЗ
	|	ВТСоставРасходовРЦ КАК ВТСоставРасходовРЦ";
	
	СписокСчетов  = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"); 
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("СчетГлавный"    ,Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	ТаблицаСчетов.Колонки.Добавить("СчетПодчиненный",Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	
	Запрос.Текст = 
	//СофтЛаб Начало 2018-12-08 3096
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//СофтЛаб Конец 2018-12-08 3096
	|	бит_Дополнительный_2.Ссылка
	|ИЗ
	|	ПланСчетов.бит_Дополнительный_2 КАК бит_Дополнительный_2
	|ГДЕ
	|	бит_Дополнительный_2.Ссылка В ИЕРАРХИИ(&Счет)";
	
	Для Каждого мСчет Из СписокСчетов Цикл
		Запрос.УстановитьПараметр("Счет",мСчет);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаСчетов.Добавить();
			НоваяСтрока.СчетГлавный     = мСчет;
			НоваяСтрока.СчетПодчиненный = Выборка.Ссылка;
		КонецЦикла;	
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Таблица",ТаблицаСчетов);
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Функции);
	Запрос.УстановитьПараметр("Субконто",МассивСубконто);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.СчетГлавный КАК СчетГлавный,
	|	ТЧ.СчетПодчиненный КАК СчетПодчиненный
	|ПОМЕСТИТЬ ВТТабСчетов
	|ИЗ
	|	&Таблица КАК ТЧ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетГлавный,
	|	СчетПодчиненный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСоставРасходовРЦ.Период,
	|	ВТСоставРасходовРЦ.Счет,
	|	ВТСоставРасходовРЦ.Объект КАК Объект,
	|	ВТСоставРасходовРЦ.ФункцияЦФО КАК ФункцияЦФО,
	|	ВТСоставРасходовРЦ.Использовать,
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	|	ВЫБОР
	|		КОГДА ВТСоставРасходовРЦ.Объект = ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет,
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|	ВТТабСчетов.СчетПодчиненный КАК СчетПодчиненный
	|ПОМЕСТИТЬ ВТСчетаСИерархией
	|ИЗ
	|	ВТСоставРасходовРЦ КАК ВТСоставРасходовРЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТабСчетов КАК ВТТабСчетов
	|		ПО ВТСоставРасходовРЦ.Счет = ВТТабСчетов.СчетГлавный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетПодчиненный,
	|	ФункцияЦФО,
	|	Объект
	|;
	|
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСчетаСИерархией.Счет КАК Счет,
	|	ВТСчетаСИерархией.ФункцияЦФО КАК ФункцияЦФО,
	|	МИНИМУМ(ВТСчетаСИерархией.Приоритет) КАК Приоритет,
	|	ВТСчетаСИерархией.СчетПодчиненный КАК СчетПодчиненный
	|ПОМЕСТИТЬ ВТСчетаСИерархиейПриоритет
	|ИЗ
	|	ВТСчетаСИерархией КАК ВТСчетаСИерархией
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСчетаСИерархией.Счет,
	|	ВТСчетаСИерархией.ФункцияЦФО,
	|	ВТСчетаСИерархией.СчетПодчиненный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСчетаСИерархией.Период КАК Период,
	|	ВТСчетаСИерархией.Счет КАК Счет,
	|	ВТСчетаСИерархией.Объект КАК Объект,
	|	ВТСчетаСИерархией.ФункцияЦФО КАК ФункцияЦФО,
	|	ВТСчетаСИерархией.Использовать КАК Использовать,
	|	ВТСчетаСИерархией.СчетПодчиненный КАК СчетПодчиненный
	|ПОМЕСТИТЬ ВТСчетаСИерархиейИтого
	|ИЗ
	|	ВТСчетаСИерархией КАК ВТСчетаСИерархией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСчетаСИерархиейПриоритет КАК ВТСчетаСИерархиейПриоритет
	|		ПО ВТСчетаСИерархией.Счет = ВТСчетаСИерархиейПриоритет.Счет
	|			И ВТСчетаСИерархией.СчетПодчиненный = ВТСчетаСИерархиейПриоритет.СчетПодчиненный
	|			И ВТСчетаСИерархией.ФункцияЦФО = ВТСчетаСИерархиейПриоритет.ФункцияЦФО
	|			И ВТСчетаСИерархией.Приоритет = ВТСчетаСИерархиейПриоритет.Приоритет
	|;
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|////////////////////////////////////////////////////////////////////////////////
	//СофтЛаб Начало 2018-12-08 3096
	//|ВЫБРАТЬ
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//СофтЛаб Конец 2018-12-08 3096
	|	ВТСчетаСИерархией.СчетПодчиненный КАК Счет,
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	//|	ВТСчетаСИерархией.Объект КАК Объект,
	|	бит_Дополнительный_2Обороты.Субконто1 КАК Объект,
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|	ВТСчетаСИерархией.ФункцияЦФО КАК ФункцияЦФО,
	|	СУММА(бит_Дополнительный_2Обороты.СуммаРеглОборотДт) КАК ОборотДт,
	|	СУММА(бит_Дополнительный_2Обороты.СуммаРеглОборотКт) КАК ОборотКт,
	|	бит_Дополнительный_2Обороты.СуммаРеглОборотДт - бит_Дополнительный_2Обороты.СуммаРеглОборотКт КАК Сумма
	|ИЗ
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	//|	ВТСчетаСИерархией КАК ВТСчетаСИерархией
	|	ВТСчетаСИерархиейИтого КАК ВТСчетаСИерархией
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТСчетаСИерархией.СчетПодчиненный
	|					ИЗ
	|						ВТСчетаСИерархией КАК ВТСчетаСИерархией),
	|				&Субконто,
	|				Организация = &Организация,
	|				,
	|				) КАК бит_Дополнительный_2Обороты
	|		ПО 
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	//          ВТСчетаСИерархией.Объект = бит_Дополнительный_2Обороты.Субконто1
	|		    (ВЫБОР
	|				КОГДА ВТСчетаСИерархией.Объект = ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТСчетаСИерархией.Объект = бит_Дополнительный_2Обороты.Субконто1
	|			КОНЕЦ)
	|			И 
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|			ВТСчетаСИерархией.ФункцияЦФО = бит_Дополнительный_2Обороты.Субконто2
	|			И ВТСчетаСИерархией.СчетПодчиненный = бит_Дополнительный_2Обороты.Счет
	|ГДЕ
	|	бит_Дополнительный_2Обороты.СуммаРеглОборотДт <> бит_Дополнительный_2Обороты.СуммаРеглОборотКт
	|
	|СГРУППИРОВАТЬ ПО
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	//|	ВТСчетаСИерархией.Объект,
	|	бит_Дополнительный_2Обороты.Субконто1,
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)|	ВТСчетаСИерархией.Объект,
	|	ВТСчетаСИерархией.ФункцияЦФО,
	|	бит_Дополнительный_2Обороты.СуммаРеглОборотДт - бит_Дополнительный_2Обороты.СуммаРеглОборотКт,
	|	ВТСчетаСИерархией.СчетПодчиненный
	|
	|УПОРЯДОЧИТЬ ПО
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	//|	ВТСчетаСИерархией.Объект,
	|	бит_Дополнительный_2Обороты.Субконто1.Наименование,
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|	ВТСчетаСИерархией.СчетПодчиненный,
	|	ВТСчетаСИерархией.ФункцияЦФО";
	
	мОбъект = РеквизитФормыВЗначение("Объект"); 
	мОбъект.База.Загрузить(Запрос.Выполнить().Выгрузить());
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
	РассчитатьСуммуДокумента();
КонецПроцедуры	

&НаКлиенте
Процедура БазаСуммаПриИзменении(Элемент)
	//СофтЛаб Начало 2018-12-08 3096
	//РассчитатьСуммуДокумента();
	пСуммаДокумента = 0;
	Для каждого СтрокаТЧ Из Объект.База Цикл
	
		пСуммаДокумента = пСуммаДокумента + СтрокаТЧ.Сумма;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = пСуммаДокумента;
	//СофтЛаб Конец 2018-12-08 3096
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуДокумента ()
	мОбъект = РеквизитФормыВЗначение("Объект");
	мОбъект.РассчитатьСуммуДокумента();
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецПроцедуры	

// Rarus-spb byse 2012.12.27 }

// BIT AMerkulov 03-08-2015 ++	
&НаСервере
Процедура ЗаполнитьПоРегиструСерверДоставка()
	Запрос                         = Новый Запрос;
	МВТ                            = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Период"     ,КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаНач"    ,НачалоМесяца(Объект.Период.Дата));
	Запрос.УстановитьПараметр("ДатаКон"    ,КонецМесяца(Объект.Период.Дата));
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	Запрос.Текст =
	//СофтЛаб Начало 2018-12-08 3096
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//СофтЛаб Конец 2018-12-08 3096
	|	рс_СоставРасходовРЦСрезПоследних.Период КАК Период,
	|	рс_СоставРасходовРЦСрезПоследних.Счет КАК Счет,
	|	рс_СоставРасходовРЦСрезПоследних.Объект КАК Объект,
	|	рс_СоставРасходовРЦСрезПоследних.Функция КАК ФункцияЦФО,
	|	рс_СоставРасходовРЦСрезПоследних.Использовать КАК Использовать
	|ПОМЕСТИТЬ ВТСоставРасходовРЦ
	|ИЗ
	//СофтЛаб Начало 2018-12-08 3096
	//|	РегистрСведений.рс_СоставРасходовРЦ.СрезПоследних(&Период, ) КАК рс_СоставРасходовРЦСрезПоследних
	// ++ БоровинскаяОА (СофтЛаб) 19.12.18 Начало (#3096)
	// исправлена ошибка - в данной продедуре обрабатываем вид операции ДоставкаТоваровВнутренняя
	//|	РегистрСведений.рс_СоставРасходовРЦ.СрезПоследних(&Период, ВидОперации <> ЗНАЧЕНИЕ(Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя)) КАК рс_СоставРасходовРЦСрезПоследних
	|	РегистрСведений.рс_СоставРасходовРЦ.СрезПоследних(&Период, ВидОперации = ЗНАЧЕНИЕ(Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя)) КАК рс_СоставРасходовРЦСрезПоследних
	// -- БоровинскаяОА (СофтЛаб) 19.12.18 Конец (#3096)
	//СофтЛаб Конец 2018-12-08 3096
	|ГДЕ
	|	рс_СоставРасходовРЦСрезПоследних.Использовать = ИСТИНА
	//СофтЛаб Начало 2018-12-08 3096
	//// BIT AMerkulov 03-08-2015 ++	
	//| И ВидОперации <> ЗНАЧЕНИЕ(Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя)
	//// BIT AMerkulov 03-08-2015 ++	
	//СофтЛаб Конец 2018-12-08 3096
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Счет,
	|	Период,
	|	ФункцияЦФО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСоставРасходовРЦ.Счет
	|ИЗ
	|	ВТСоставРасходовРЦ КАК ВТСоставРасходовРЦ";
	
	СписокСчетов  = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"); 
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("СчетГлавный"    ,Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	ТаблицаСчетов.Колонки.Добавить("СчетПодчиненный",Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	
	Запрос.Текст = 
	//СофтЛаб Начало 2018-12-08 3096
	//"ВЫБРАТЬ
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//СофтЛаб Конец 2018-12-08 3096
	|	бит_Дополнительный_2.Ссылка
	|ИЗ
	|	ПланСчетов.бит_Дополнительный_2 КАК бит_Дополнительный_2
	|ГДЕ
	|	бит_Дополнительный_2.Ссылка В ИЕРАРХИИ(&Счет)";
	
	Для Каждого мСчет Из СписокСчетов Цикл
		Запрос.УстановитьПараметр("Счет",мСчет);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаСчетов.Добавить();
			НоваяСтрока.СчетГлавный     = мСчет;
			НоваяСтрока.СчетПодчиненный = Выборка.Ссылка;
		КонецЦикла;	
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Таблица",ТаблицаСчетов);
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Функции);
	Запрос.УстановитьПараметр("Субконто",МассивСубконто);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.СчетГлавный КАК СчетГлавный,
	|	ТЧ.СчетПодчиненный КАК СчетПодчиненный
	|ПОМЕСТИТЬ ВТТабСчетов
	|ИЗ
	|	&Таблица КАК ТЧ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетГлавный,
	|	СчетПодчиненный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСоставРасходовРЦ.Период,
	|	ВТСоставРасходовРЦ.Счет,
	|	ВТСоставРасходовРЦ.Объект КАК Объект,
	|	ВТСоставРасходовРЦ.ФункцияЦФО КАК ФункцияЦФО,
	|	ВТСоставРасходовРЦ.Использовать,
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	|	ВЫБОР
	|		КОГДА ВТСоставРасходовРЦ.Объект = ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет,
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|	ВТТабСчетов.СчетПодчиненный КАК СчетПодчиненный
	|ПОМЕСТИТЬ ВТСчетаСИерархией
	|ИЗ
	|	ВТСоставРасходовРЦ КАК ВТСоставРасходовРЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТабСчетов КАК ВТТабСчетов
	|		ПО ВТСоставРасходовРЦ.Счет = ВТТабСчетов.СчетГлавный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетПодчиненный,
	|	ФункцияЦФО,
	|	Объект
	|;
	|
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСчетаСИерархией.Счет КАК Счет,
	|	ВТСчетаСИерархией.ФункцияЦФО КАК ФункцияЦФО,
	|	МИНИМУМ(ВТСчетаСИерархией.Приоритет) КАК Приоритет,
	|	ВТСчетаСИерархией.СчетПодчиненный КАК СчетПодчиненный
	|ПОМЕСТИТЬ ВТСчетаСИерархиейПриоритет
	|ИЗ
	|	ВТСчетаСИерархией КАК ВТСчетаСИерархией
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТСчетаСИерархией.Счет,
	|	ВТСчетаСИерархией.ФункцияЦФО,
	|	ВТСчетаСИерархией.СчетПодчиненный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСчетаСИерархией.Период КАК Период,
	|	ВТСчетаСИерархией.Счет КАК Счет,
	|	ВТСчетаСИерархией.Объект КАК Объект,
	|	ВТСчетаСИерархией.ФункцияЦФО КАК ФункцияЦФО,
	|	ВТСчетаСИерархией.Использовать КАК Использовать,
	|	ВТСчетаСИерархией.СчетПодчиненный КАК СчетПодчиненный
	|ПОМЕСТИТЬ ВТСчетаСИерархиейИтого
	|ИЗ
	|	ВТСчетаСИерархией КАК ВТСчетаСИерархией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСчетаСИерархиейПриоритет КАК ВТСчетаСИерархиейПриоритет
	|		ПО ВТСчетаСИерархией.Счет = ВТСчетаСИерархиейПриоритет.Счет
	|			И ВТСчетаСИерархией.СчетПодчиненный = ВТСчетаСИерархиейПриоритет.СчетПодчиненный
	|			И ВТСчетаСИерархией.ФункцияЦФО = ВТСчетаСИерархиейПриоритет.ФункцияЦФО
	|			И ВТСчетаСИерархией.Приоритет = ВТСчетаСИерархиейПриоритет.Приоритет
	|;
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|////////////////////////////////////////////////////////////////////////////////
	//СофтЛаб Начало 2018-12-08 3096
	//|ВЫБРАТЬ
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//СофтЛаб Конец 2018-12-08 3096
	|	ВТСчетаСИерархией.СчетПодчиненный КАК Счет,
	|	бит_Дополнительный_2Обороты.Субконто1 КАК Объект,
	|	ВТСчетаСИерархией.ФункцияЦФО КАК ФункцияЦФО,
	|	СУММА(бит_Дополнительный_2Обороты.СуммаРеглОборотДт) КАК ОборотДт,
	|	СУММА(бит_Дополнительный_2Обороты.СуммаРеглОборотКт) КАК ОборотКт,
	|	бит_Дополнительный_2Обороты.СуммаРеглОборотДт - бит_Дополнительный_2Обороты.СуммаРеглОборотКт КАК Сумма
	|ИЗ
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	//|	ВТСчетаСИерархией КАК ВТСчетаСИерархией
	|	ВТСчетаСИерархиейИтого КАК ВТСчетаСИерархией
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТСчетаСИерархией.СчетПодчиненный
	|					ИЗ
	|						ВТСчетаСИерархией КАК ВТСчетаСИерархией),
	|				&Субконто,
	|				Организация = &Организация,
	|				,
	|				) КАК бит_Дополнительный_2Обороты
	|		ПО 
	// ++ БоровинскаяОА (СофтЛаб) 26.03.19 Начало (#3287)
	////СофтЛаб Начало 2018-12-08 3096
	//| 			ВТСчетаСИерархией.Объект = бит_Дополнительный_2Обороты.Субконто1
	//|			И 
	////СофтЛаб Конец 2018-12-08 3096
	|		    (ВЫБОР
	|				КОГДА ВТСчетаСИерархией.Объект = ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВТСчетаСИерархией.Объект = бит_Дополнительный_2Обороты.Субконто1
	|			КОНЕЦ)
	|			И 
	// -- БоровинскаяОА (СофтЛаб) 26.03.19 Конец (#3287)
	|			ВТСчетаСИерархией.ФункцияЦФО = бит_Дополнительный_2Обороты.Субконто2
	|			И ВТСчетаСИерархией.СчетПодчиненный = бит_Дополнительный_2Обороты.Счет
	|ГДЕ
	|	бит_Дополнительный_2Обороты.СуммаРеглОборотДт <> бит_Дополнительный_2Обороты.СуммаРеглОборотКт
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_Дополнительный_2Обороты.Субконто1,
	|	ВТСчетаСИерархией.ФункцияЦФО,
	|	бит_Дополнительный_2Обороты.СуммаРеглОборотДт - бит_Дополнительный_2Обороты.СуммаРеглОборотКт,
	|	ВТСчетаСИерархией.СчетПодчиненный
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_Дополнительный_2Обороты.Субконто1.Наименование,
//|	ВТСчетаСИерархией.Счет.Код,
	|	ФункцияЦФО
	|";
	
	мОбъект = РеквизитФормыВЗначение("Объект"); 
	мОбъект.База.Загрузить(Запрос.Выполнить().Выгрузить());
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
	РассчитатьСуммуДокумента();
КонецПроцедуры
// BIT AMerkulov 03-08-2015 --

//СофтЛаб Начало 2018-12-08 3096
&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ОбработкаТоваровВнутренняя") Тогда
			
			ЗаполнитьПоРегиструСервер();
			
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рс_ВидыОперацийРаспределениеДоходовИРасходовЛогистики.ДоставкаТоваровВнутренняя") Тогда
			
			ЗаполнитьПоРегиструСерверДоставка();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры
//СофтЛаб Конец 2018-12-08 3096

// ++ БоровинскаяОА (СофтЛаб) 19.12.18 Начало (#3096)
&НаКлиенте
Процедура ВопросПриИзмененииВидаОперации(РезультатВопроса, ВидОперацииДоИзменения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если ЗначениеЗаполнено(Объект.СчетУчета) Тогда
			КомандаЗаполнитьПоНастройкамЭкономическогоУчета(Неопределено);
		КонецЕсли;
		
		Если Объект.База.Количество() > 0 Тогда
			Объект.База.Очистить();
		КонецЕсли;
		
		УстановитьВидимость();
		
	Иначе
		
		Объект.ВидОперации = ВидОперацииДоИзменения;
		
	КонецЕсли;
	
КонецПроцедуры
// -- БоровинскаяОА (СофтЛаб) 19.12.18 Конец (#3096)

//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
//1С-ИжТиСи, Кондратьев, 03.2020, обновление )