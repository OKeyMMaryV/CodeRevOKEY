#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("БылПроведен", Проведен);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	РежимЗаписи = ДополнительныеСвойства.РежимЗаписи;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
	Если НЕ Отказ Тогда
		
		Если НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
			
			УстановитьСтатус(РежимЗаписи);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.бит_СправкаОВалютныхОперациях.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	РеквизитыДокумента = ПараметрыПроведения.Реквизиты[0];
	
	Документы.бит_СправкаОВалютныхОперациях.ПроверитьВозможностьПроведения(РеквизитыДокумента, ЭтотОбъект, Метаданные().Реквизиты, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Документы.бит_СправкаОВалютныхОперациях.ДвиженияПоРегиструДанныеПоПаспортамСделок(ПараметрыПроведения.ВалютныеОперации
																							, РеквизитыДокумента
																							, Движения
																							, Отказ);
	
	Если НЕ Отказ Тогда
		
		// Заполним перечень виз
		РежимОбновленияВиз = Константы.бит_РежимОбновленияПеречняВиз.Получить();
		Если РежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении 
			ИЛИ НЕ ДополнительныеСвойства.БылПроведен Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение", РеквизитыДокумента.Организация);
			бит_Визирование.ОбновитьПереченьВиз(РеквизитыДокумента.Регистратор, РеквизитыДокумента.Дата, СтруктураПараметров);
			
		КонецЕсли; 
		
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Документы.бит_СправкаОВалютныхОперациях.ПроверитьВозможностьУдаленияПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	Если НЕ Отказ Тогда
		
		// Очистим визы
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь");
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_СправкаОВалютныхОперациях") Тогда 
		
		Корректировка = Истина;
		ЗаполнитьДокументПоСправкеОВалютныхОперациях(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Корректировка = Ложь;
	ПорядковыйНомерКорректировки = 0;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Функция определяет текущий статус СВО.
// 
// Параметры:
//  ТекущийОбъект    - ДокументСсылка.бит_ЗаявкаНаЗатраты.
//  НачальныйСтатус  - текущее значение статуса.
//  ВсеВизыПолучены  - Булево.
// 
// Возвращаемое значение:
//   РезСтатус   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСтатус(ТекущийОбъект
						,НачальныйСтатус
						,РежимЗаписи
						,ВсеВизыПолучены) Экспорт

    РезСтатус = НачальныйСтатус;
    
    Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
    	ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
    	РезСтатус = Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Рабочая;
    Иначе
    	РезСтатус = Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Черновик;
    КонецЕсли; 
	
	Если РезСтатус = Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Утверждена Тогда
	
		Если ВсеВизыПолучены Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Утверждена;
		Иначе	
			РезСтатус = Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Рабочая;
		КонецЕсли;	
				
	КонецЕсли; 
	
    Возврат РезСтатус;
  
КонецФункции // ОпределитьСтатус()

// Процедура устанавливает статус.
// 
// Параметры:
//  вхРежимЗаписи			 - РежимЗаписиДокумента.
//  вхСтруктураЗатрат		 - Структура.
//  вхСинхронизироватьЗатраты - Булево. По умолчанию Истина.
//  ПереданныйСтатус - СправочникСсылка.бит_СтатусыОбъектов.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
						  
	СтрАлгоритмы             = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	АлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
						  
	Если НЕ ЗначениеЗаполнено(АлгоритмИзмененияСтатуса) Тогда
		
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли; 
		
		// Вычислим переменные, необходимые для установки статуса.
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		
		// Определим статус заявки
		Статус = ОпределитьСтатус(ЭтотОбъект, ДополнительныеСвойства.ТекущийСтатус, РежимЗаписи, ВсеВизыПолучены);
		
		// Если статус изменился - запишем его
		Если ДополнительныеСвойства.ТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,ДополнительныеСвойства.ТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				
				ДополнительныеСвойства.ТекущийСтатус = Статус;
				ДополнительныеСвойства.ДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе	
		
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
			
	    РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		бит_уп_Сервер.ВыполнитьАлгоритм(АлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСтатус()

Процедура ЗаполнитьДокументПоСправкеОВалютныхОперациях(ДанныеЗаполнения)
 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_СправкаОВалютныхОперациях.Ссылка КАК ДокументОснование,
		|	бит_СправкаОВалютныхОперациях.ПорядковыйНомерКорректировки + 1 КАК ПорядковыйНомерКорректировки,
		|	бит_СправкаОВалютныхОперациях.ДатаЗаполнения КАК ДатаЗаполнения,
		|	бит_СправкаОВалютныхОперациях.Банк КАК Банк,
		|	бит_СправкаОВалютныхОперациях.Организация КАК Организация,
		|	ИСТИНА КАК Корректировка,
		|	бит_СправкаОВалютныхОперациях.ВалютныеОперации.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Документ КАК Документ,
		|		НомерДокумента КАК НомерДокумента,
		|		ДатаДокумента КАК ДатаДокумента,
		|		ДатаОперации КАК ДатаОперации,
		|		ПризнакПлатежа КАК ПризнакПлатежа,
		|		ВидВалютнойОперации КАК ВидВалютнойОперации,
		|		Сумма КАК Сумма,
		|		ВалютаОперации КАК ВалютаОперации,
		|		ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ПаспортСделки КАК ПаспортСделки,
		|		ВалютаДоговора КАК ВалютаДоговора,
		|		СуммаВВалютеДоговора КАК СуммаВВалютеДоговора,
		|		ОжидаемыйСрок КАК ОжидаемыйСрок,
		|		Примечание КАК Примечание,
		|		СрокВозвратаАванса КАК СрокВозвратаАванса
		|	) КАК Таблица,
		|	бит_СправкаОВалютныхОперациях.БанковскийСчет КАК БанковскийСчет,
		|	бит_СправкаОВалютныхОперациях.СтранаБанкаНерезидента КАК СтранаБанкаНерезидента
		|ИЗ
		|	Документ.бит_СправкаОВалютныхОперациях КАК бит_СправкаОВалютныхОперациях
		|ГДЕ
		|	бит_СправкаОВалютныхОперациях.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСсылка = РезультатЗапроса.Выбрать();
	Пока ВыборкаСсылка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаСсылка);
		ВыборкаДетали = ВыборкаСсылка.Таблица.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			НоваяСтрока = ВалютныеОперации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти 

#Область Инициализация

РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
ДополнительныеСвойства.Вставить("ДатаИзмененияСтатуса",РезСтруктура.Дата);
ДополнительныеСвойства.Вставить("ТекущийСтатус",       ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка()));

#КонецОбласти 

#КонецЕсли
