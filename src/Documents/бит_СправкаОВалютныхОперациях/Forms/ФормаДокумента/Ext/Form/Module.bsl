
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    // СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли; 
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормыДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	АктуальнаяСправка = Документы.бит_СправкаОВалютныхОперациях.АктуальнаяСправка(
		Объект.ДатаЗаполнения,
		Объект.Банк,
		Объект.Организация,
		Объект.БанковскийСчет);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_СправкаОВалютныхОперациях";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииПередУдалением(Элемент, Отказ)
	
	Если НЕ ПроверитьВозможностьУдаленияСтроки() Тогда 
		
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ПроверитьВозможностьУдаленияСтроки() Тогда 
		
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВалютныеОперации

&НаКлиенте
Процедура ВалютныеОперацииДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ВалютныеОперации.ТекущиеДанные;
	Если ВыбранноеЗначение<>Неопределено
		И НЕ ТипЗнч(ВыбранноеЗначение)=Тип("Тип") Тогда
		ЗаполнитьЗначенияСвойств(ТекДанные, ДанныеСВО(ВыбранноеЗначение, Объект.ДатаЗаполнения));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииПризнакПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВалютныеОперации.ТекущиеДанные;
	
	ВыборПризнакаПлатежа(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииСуммаПриИзменении(Элемент)
	
	РассчитатьСуммуТабЧасти(Элементы.ВалютныеОперации.ТекущиеДанные, Объект.ДатаЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииВалютаОперацииПриИзменении(Элемент)
	
	РассчитатьСуммуТабЧасти(Элементы.ВалютныеОперации.ТекущиеДанные, Объект.ДатаЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ВалютныеОперации.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ДоговорКонтрагента) Тогда
		ТекДанные.ВалютаДоговора = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДанные.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		РассчитатьСуммуТабЧасти(Элементы.ВалютныеОперации.ТекущиеДанные, Объект.ДатаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютныеОперацииПаспортСделкиПриИзменении(Элемент)
	
	ТекДанные = Элементы.ВалютныеОперации.ТекущиеДанные;
	ТекДанные.ВалютаДоговора = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДанные.ПаспортСделки, "ВалютаДоговора");

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет необходимые параметры для работы формы.
// 
&НаСервере
Процедура ПодготовитьФормуНаСервере()

	АктуальнаяСправка = Документы.бит_СправкаОВалютныхОперациях.АктуальнаяСправка(
		Объект.ДатаЗаполнения,
		Объект.Банк,
		Объект.Организация,
		Объект.БанковскийСчет);
		
КонецПроцедуры // ПодготовитьФормуНаСервере()

// Процедура устнавливает заголовок формы.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", ПолучитьПредставлениеОбъекта());
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Функция получает представление объекта.
//
// Возвращаемое значение:
//  Результат - Строка.
//
&НаСервере
Функция ПолучитьПредставлениеОбъекта()

	Возврат Объект.Ссылка.Метаданные().ПредставлениеОбъекта;
	
КонецФункции // ПолучитьПредставлениеОбъекта()

// Процедура управляем видимостью-доступностью элементов формы. 
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()

	Элементы.ВалютныеОперации.ИзменятьПорядокСтрок = НЕ Объект.Корректировка;
	Элементы.АктуальнаяСправка.Видимость = (НЕ Объект.Ссылка.Пустая()) И (НЕ АктуальнаяСправка.Пустая())
													И (АктуальнаяСправка <> Объект.Ссылка);
													
	Элементы.ПорядковыйНомерКорректировки.Видимость = Объект.Корректировка;											
	
	УстановитьДоступностьЭлементов();
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // УправлениеЭлементамиФормы()

&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

// Процедура устанавливает доступность элементам формы.
// 
// Параметры:
//  Доступность - Булево.
// 
&НаСервере
Процедура УстановитьДоступностьЭлементов()

	ЭлементыТолькоПросмотр = ?( Статус = Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Черновик
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Ложь, Истина);

	Исключения = Новый Массив();
	Исключения.Добавить(ВРег("Корректировка"));
			
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") 
			И Исключения.Найти(ВРег(Элемент.Имя)) = Неопределено Тогда  
			Элемент.ТолькоПросмотр = ЭлементыТолькоПросмотр;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСВО(Документ, ДатаЗаполнения)
	
	СтрРезультат = Новый Структура("НомерДокумента, ДатаДокумента, ДатаОперации, Сумма, ВалютаОперации, ДоговорКонтрагента, ПризнакПлатежа");
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") 
		ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		СтрРеквизитов = бит_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата,НомерВходящегоДокумента,ДатаВходящегоДокумента,ВалютаДокумента,ДоговорКонтрагента,СуммаДокумента");
		
		СтрРезультат.НомерДокумента = СтрРеквизитов.НомерВходящегоДокумента;
		СтрРезультат.ДатаДокумента 	= СтрРеквизитов.ДатаВходящегоДокумента;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		
		СтрРеквизитов = бит_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,"Дата,Номер,ВалютаДокумента,ДоговорКонтрагента,СуммаДокумента");

		СтрРезультат.НомерДокумента = СтрРеквизитов.Номер;
		СтрРезультат.ДатаДокумента 	= СтрРеквизитов.Дата;
		
	КонецЕсли;
	
	СтрРезультат.ДатаОперации 		= СтрРеквизитов.Дата;
	СтрРезультат.Сумма 				= СтрРеквизитов.СуммаДокумента;
	СтрРезультат.ВалютаОперации 	= СтрРеквизитов.ВалютаДокумента;
	СтрРезультат.ДоговорКонтрагента = СтрРеквизитов.ДоговорКонтрагента;
	СтрРезультат.ПризнакПлатежа 	= ?(ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"), "1", "2");
	
	Если ЗначениеЗаполнено(СтрРезультат.ДоговорКонтрагента) Тогда
		
		СтрРезультат.Вставить("ВалютаДоговора",			бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрРеквизитов.ДоговорКонтрагента,"ВалютаВзаиморасчетов"));
		СтрРезультат.Вставить("СуммаВВалютеДоговора",	бит_ОбщегоНазначения.ПересчитатьВВалюту(СтрРезультат.Сумма
																								,СтрРезультат.ВалютаОперации 
																								,СтрРезультат.ВалютаДоговора
																								,ДатаЗаполнения));
		
	КонецЕсли;
	
	Возврат СтрРезультат;
	
КонецФункции

&НаКлиенте
Процедура ВыборПризнакаПлатежа(ИД)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",			"Документ");
	ПараметрыФормы.Вставить("НаименованиеОбъекта",	"бит_СправкаОВалютныхОперациях");
	ПараметрыФормы.Вставить("НаименованиеМакета",	"ПризнакиПлатежа");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИДСтроки", ИД);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПризнакаПлатежаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.бит_СправкаОВалютныхОперациях.Форма.ФормаВыбораИзМакета", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

// Процедура окончание процедуры "ВыборПризнакаПлатежа". 
//
// Параметры:
//  РезультатВыбора - Структура.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте 
Процедура ВыборПризнакаПлатежаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйКод = РезультатЗакрытия;	
	
	Если ВыбранныйКод <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		ТекСтрока = Объект.ВалютныеОперации.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки);	
		ТекСтрока.ПризнакПлатежа = ВыбранныйКод;
		
	КонецЕсли;
	
КонецПроцедуры // ВыборПризнакаПлатежаЗавершение()

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуТабЧасти(ДанныеСтроки, ДатаЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ВалютаДоговора)
		И ЗначениеЗаполнено(ДанныеСтроки.ВалютаОперации)
		И ДанныеСтроки.ВалютаОперации = ДанныеСтроки.ВалютаДоговора Тогда
		
		ДанныеСтроки.СуммаВВалютеДоговора = 0;
	Иначе
		ДанныеСтроки.СуммаВВалютеДоговора = бит_ОбщегоНазначения.ПересчитатьВВалюту(
			ДанныеСтроки.Сумма,
			ДанныеСтроки.ВалютаОперации, 
			ДанныеСтроки.ВалютаДоговора,
			ДатаЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

// Функция возможность редактирования списка номенклатуры.
// 
&НаСервере
Функция ПроверитьВозможностьУдаленияСтроки()

	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.СправкаОВалютныхОперациях_Черновик);
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	Если ТипЗнч(МассивСтатусов.Найти(Статус)) = Тип("Неопределено") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ПроверитьВозможностьРедактированияСпискаНоменклатуры()

#КонецОбласти

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти 
