#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Переменная, хранящее структуру шапки документа.
	Перем СтруктураШапкиДокумента;
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	// Подготовим структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим структуру курсов валют.
	СтруктураКурсыВалют = ПолучитьСтруктуруКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим исторические курсы валют по каждому ОС.
	МассивОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	МассивОС = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивОС);
	ИсторическиеКурсы = ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, СтруктураШапкиДокумента.Дата, СтруктураКурсыВалют);

	// Подготовим таблицы для возможности проведения.
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	// Проверить заполнение таблиц.
	ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Пересчитаем Справедливую стоимость из валюты документа в валюту МСФО.
	ВыполнитьПересчетСправедливойСтоимости(СтруктураТаблиц.ОС);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют,ИсторическиеКурсы, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура выполняет валютные пересчеты из валюты МУ в валюту документа.
// 
// Параметры:
//  ПараметрыОС
// 
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыОС) Экспорт
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ВидыКурсов = Новый Структура("МУ, Документ");
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	
	МассивОС = ПараметрыОС.ВыгрузитьКолонку("ОсновноеСредство"); 
	
	ТаблицаДанных = ПодготовитьТаблицуДатПринятияОС(МассивОС);
	ТаблицаПериодов = ТаблицаДанных.Скопировать(, "Период");
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалют);
	
	СоответствиеКурсовИОС = Новый Соответствие;
	
	Для каждого Строка Из ТаблицаДанных Цикл
		СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	КонецЦикла; 

	Для Каждого Строка Из ПараметрыОС Цикл
		
		КурсыМУ 	  = СоответствиеКурсовИОС[Строка.ОсновноеСредство].МУ;
		КурсыДокумент = СоответствиеКурсовИОС[Строка.ОсновноеСредство].Документ;
		
		Строка.БалансоваяСтоимость = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Строка.БалансоваяСтоимость
																			  ,КурсыМУ.Валюта
																			  ,КурсыДокумент.Валюта
																			  ,КурсыМУ.Курс
																			  ,КурсыДокумент.Курс
																			  ,КурсыМУ.Кратность
																			  ,КурсыДокумент.Кратность);
		
	КонецЦикла;


	
КонецПроцедуры // ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль()

// Процедура получает данные по основным средствам.
// 
// Параметры:
//  СписокОС 			   - СправочникСсылка.ОсновныеСредства, массив.
// 
Функция ПолучитьДанныеПоОсновнымСредствам(СписокОС) Экспорт
	
	// Сформируем массив параметров ОС для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	
	//БИТ Тртилек 01.08.2012
	Параметры = Новый Массив(2);
	Параметры[0] = МоментВремени().Дата;
	Параметры[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),Параметры);
	///БИТ Тртилек
	
	// Сформируем структуру параметров для получения таблицы параметров ОС.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     , Организация);
	СтруктураПараметров.Вставить("ОсновноеСредство", СписокОС);
	//БИТ Тртилек 01.07.2012
	//СтруктураПараметров.Вставить("МоментВремени"   , КонецМесяца(Дата));//?(ЭтоНовый(), КонецДня(Дата), МоментВремени()));
	СтруктураПараметров.Вставить("МоментВремени"   , Граница);
	///БИТ Тртилек	
	СтруктураПараметров.Вставить("ПараметрыВНА"	   , ПараметрыВНА);
	
	// Получим таблицу параметров ОС.
	ТаблицаПараметровОС = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	// Получим массив счетов по ОС.
	МассивСчетовАмортизации 	  = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетНачисленияАмортизации_ОС");
	МассивСчетовСниженияСтоимости = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетСниженияСтоимости_ОС");
	МассивСчетовУчета 			  = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетУчета_ОС");
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовАмортизации	  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСниженияСтоимости, Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета			  , Истина);
	
	ЭтоИСы = (ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаОС.ИнвестиционнаяСобственность);
	
	//БИТ Тртилек 01.07.2012
	//Граница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	///БИТ Тртилек

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров"      		 , ТаблицаПараметровОС);
	// Запрос.УстановитьПараметр("МоментВремени"				 , КонецМесяца(Дата));// МоментВремени());
	Запрос.УстановитьПараметр("МоментВремени"				 , Граница);
	Запрос.УстановитьПараметр("МассивСчетовАмортизации"		 , МассивСчетовАмортизации);
	Запрос.УстановитьПараметр("МассивСчетовСниженияСтоимости", МассивСчетовСниженияСтоимости);
	Запрос.УстановитьПараметр("МассивСчетовУчета"			 , МассивСчетовУчета);
	Запрос.УстановитьПараметр("СубконтоОС"					 , ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
	Запрос.УстановитьПараметр("Организация"					 , Организация);
	Запрос.УстановитьПараметр("СписокОС"					 , СписокОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметров.ВНА КАК ОсновноеСредство,
	|	ТаблицаПараметров.Класс_ОС КАК Класс
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	&ТаблицаПараметров КАК ТаблицаПараметров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПараметров.ОсновноеСредство,
	|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаМУОстатокДт, 0) - " + ?(ЭтоИСы, "", "ЕСТЬNULL(АмортизацияОС_МУ.СуммаМУОстатокКт, 0) -") + "ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаМУОстатокКт, 0) КАК БалансоваяСтоимость,
	|	бит_му_ПараметрыКлассовВНА.СчетДоходовОтОбесценения КАК СчетДоходаОтПереоценки,
	|	бит_му_ПараметрыКлассовВНА.СчетРасходовОтОбесценения КАК СчетРасходаОтПереоценки
	|ИЗ
	|	ТаблицаПараметров КАК ТаблицаПараметров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыКлассовВНА КАК бит_му_ПараметрыКлассовВНА
	|		ПО ТаблицаПараметров.Класс = бит_му_ПараметрыКлассовВНА.Класс
	//БИТ Тртилек 24.07.2012
	|		И бит_му_ПараметрыКлассовВНА.Организация = &Организация
	///БИТ Тртилек	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовСниженияСтоимости),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК ФактОбесценениеОС_МУ
	|		ПО ТаблицаПараметров.ОсновноеСредство = ФактОбесценениеОС_МУ.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовУчета),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК СтоимостьОС_МУ
	|		ПО ТаблицаПараметров.ОсновноеСредство = СтоимостьОС_МУ.Субконто1" + ?(ЭтоИСы, "", "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовАмортизации),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК АмортизацияОС_МУ
	|		ПО ТаблицаПараметров.ОсновноеСредство = АмортизацияОС_МУ.Субконто1") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТекущиеПараметры = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаТекущиеПараметры;
	
КонецФункции // ПолучитьДанныеПоОсновнымСредствам()

// Процедура вызывает процедуру по проверке ОС.
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОсновныеСредства.
//  Отказ	 		 - Булево, по умолчанию Ложь.
// 
Процедура ПроверитьОСПриВыборе(ОсновноеСредство, Отказ) Экспорт
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаОС.ОсновныеСредства Тогда
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	Иначе
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли;
	
	бит_му_ВНА.ПроверитьОСПриВыборе(ЭтотОбъект, ВидКласса, ОсновноеСредство, Отказ);
	
КонецПроцедуры // ПроверитьОСПриВыборе()

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаОС.ОсновныеСредства Тогда
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	Иначе
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("Организация"		  , Организация);                             
	ПараметрыПодбора.Вставить("Режим"			  , Перечисления.бит_му_РежимыПодбораВНА.ПереоценкаОС);
	ПараметрыПодбора.Вставить("ДатаОкончания"	  , КонецМесяца(Дата));
	ПараметрыПодбора.Вставить("МодельУчета"		  , Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости);
	ПараметрыПодбора.Вставить("МОЛ"				  , МОЛ);
	ПараметрыПодбора.Вставить("Местонахождение"	  , Подразделение);
	ПараметрыПодбора.Вставить("ВидКласса"		  , ВидКласса);	

	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

// Процедура синхронизирует реквизиты строки ОС с аналитикой счетов.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции 
//					или ДокументТабличнаяЧастьСтрока.бит_му_ПереоценкаОС.НематериальныеАктивы.
//  ИмяСубконто   - Строка.
// 
Процедура СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, ИмяСубконто) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		
		// Адаптация для ERP. Начало. 18.03.2014{{
		ТипОС = Тип(бит_ОбщегоНазначения.ПолучитьИмяТипаОсновныеСредства());
		// Адаптация для ERP. Конец. 18.03.2014}}
		
		Для Ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОС Тогда
				ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.ОсновноеСредство;
			КонецЕсли; 
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиОС()

// Процедура выполняет действия необходимые при изменении СчетаУчета.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции 
//					или ДокументТабличнаяЧастьСтрока.бит_му_ПереоценкаОС.НематериальныеАктивы.
// 
Процедура ИзменениеСчетаДохода(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетДоходаОтПереоценки, мКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоД");
	
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоД");
	
КонецПроцедуры // ИзменениеСчетаУчетаНМА()

// Процедура выполняет действия необходимые при изменении СчетаУчета.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции 
//					или ДокументТабличнаяЧастьСтрока.бит_му_ПереоценкаОС.НематериальныеАктивы.
// 
Процедура ИзменениеСчетаРасхода(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетРасходаОтПереоценки, мКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоР");
	
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоР");
	
КонецПроцедуры // ИзменениеСчетаУчетаНМА()

// Процедура получает параметры основного средства.
// 
// Параметры:
//  ТекущаяСтрока 	- СтрокаТабличнойЧасти.ОсновныеСредства, массив ОС.
//  Отказ		    - Булево, по умолчанию Ложь.
//  ЭтоДобавлениеОС - Булево, по умолчанию Ложь.
// 
Процедура ПолучитьПараметрыОС(ТекущаяСтрока, Отказ = Ложь, ЭтоДобавлениеОС = Ложь) Экспорт
	
	ЭтоМассив = (ТипЗнч(ТекущаяСтрока) = Тип("Массив"));	
	Если ЭтоМассив Тогда
		МассивОС = ТекущаяСтрока;
	Иначе
		ТекущаяСтрока = ОсновныеСредства[ТекущаяСтрока];
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		МассивОС = ТекущаяСтрока.ОсновноеСредство;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивОС) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭтоДобавлениеОС Тогда
		
		Отказ = Ложь;
		
		// Проверим ОС.
		ПроверитьОСПриВыборе(МассивОС, Отказ);
		
		Если Отказ Тогда			
			Если Не ЭтоМассив Тогда
				// Адаптация для ERP. Начало. 18.03.2014{{
				ТекущаяСтрока.ОсновноеСредство = Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаОсновныеСредства()].ПустаяСсылка();
				// Адаптация для ERP. Конец. 18.03.2014}}
			КонецЕсли; 			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана организация - данные по основному средству не были заполнены.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);  		
		Возврат;
	КонецЕсли;
	
	// Заполним данные по основным средствам.
	ТаблицаТекущиеПараметры = ПолучитьДанныеПоОсновнымСредствам(МассивОС);
	
	// Пересчитаем балансовую стоимость из валюты МСФО в валюту документа.
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ТаблицаТекущиеПараметры); 
									  
	Если ЭтоМассив Тогда
		ТаблицаДляОбхода = ОсновныеСредства;
	Иначе 		
		ТаблицаДляОбхода = Новый Массив;
		ТаблицаДляОбхода.Добавить(ТекущаяСтрока); 		
	КонецЕсли;								  
									  
	Для Каждого ТекСтрока Из ТаблицаДляОбхода Цикл

		ИДТекСтроки = ОсновныеСредства.Индекс(ТекСтрока);//ТекСтрока.ПолучитьИдентификатор();
		
		ТекущиеПараметрыОС = ТаблицаТекущиеПараметры.Найти(ТекСтрока.ОсновноеСредство, "ОсновноеСредство");
		
		Если ТекущиеПараметрыОС = Неопределено Тогда
			
			// Очистим реквизиты строки ОС.
			ОчиститьРеквизитыСтрокиОС(ТекСтрока);
			
			ТекСтрока.СправедливаяСтоимость = 0;
			
		Иначе

			ТекСтрока.БалансоваяСтоимость     = ТекущиеПараметрыОС.БалансоваяСтоимость;
			
			ТекСтрока.СчетДоходаОтПереоценки  = ТекущиеПараметрыОС.СчетДоходаОтПереоценки;
			ТекСтрока.СчетРасходаОтПереоценки = ТекущиеПараметрыОС.СчетРасходаОтПереоценки;
			
			ИзменениеСчетаДохода(ТекСтрока);
			ИзменениеСчетаРасхода(ТекСтрока);
				
			Если Не ЭтоДобавлениеОС Тогда
				ТекстСообщения = НСтр("ru='Заполнение параметров для основного средства ""%1%"" выполнено.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекСтрока.ОсновноеСредство);								  
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
									  
КонецПроцедуры // ПолучитьПараметрыОС()

// Процедура заполняет табличную часть "ОсновныеСредства".
// 
// Параметры:
//  ВыбранноеЗначение - Структура.
// 
Процедура ЗаполнитьТчОсновныеСредстваПоДаннымПодбора(ВыбранноеЗначение) Экспорт
	
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов, ОписаниеТаблицы.ПереченьОбъектов_Колонки);

	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ВНА);
		
		МассивСтрок = ОсновныеСредства.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			Отказ = Ложь;
			
			НоваяСтрока = ОсновныеСредства.Добавить();
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ВНА;
			// Получим параметры по ОС.
			ИдСтроки = ОсновныеСредства.Индекс(НоваяСтрока);
			ПолучитьПараметрыОС(ИдСтроки, Отказ, Истина);

			//БИТ Тртилек 03.07.2012
			Если ЗначениеЗаполнено(НоваяСтрока.ОсновноеСредство) Тогда
				Для Ном = 1 По НоваяСтрока.КоличествоДоступныхСубконтоД Цикл
					Если ТипЗнч(НоваяСтрока["СубконтоД"+ Строка(Ном)]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
						НоваяСтрока["СубконтоД"+ Строка(Ном)] = НоваяСтрока.ОсновноеСредство.Объект;								
					КонецЕсли;
				КонецЦикла;
				Для Ном = 1 По НоваяСтрока.КоличествоДоступныхСубконтоР Цикл
					Если ТипЗнч(НоваяСтрока["СубконтоР"+ Строка(Ном)]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
						НоваяСтрока["СубконтоР"+ Строка(Ном)] = НоваяСтрока.ОсновноеСредство.Объект; 
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			///БИТ Тртилек
			
			Если Отказ Тогда
				ОсновныеСредства.Удалить(НоваяСтрока);
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Основное средство ""%1%"" инв. № %2% уже подобрано в строке №%3%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																				,СтрокаТаблицы.ВНА
																				,СтрокаТаблицы.ИнвентарныйНомер
																				,НайденнаяСтрока.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных

КонецПроцедуры // ЗаполнитьТчОсновныеСредстваПоДаннымПодбора()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация, ВидОперации
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
		
	// Заполняет табличную часть "ОсновныеСредства"
	ВыбранноеЗначение = ВыполнитьПодборОС();
	ЗаполнитьТчОсновныеСредстваПоДаннымПодбора(ВыбранноеЗначение);	

КонецПроцедуры // ЗаполнитьДокумент()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	НовыйВидОперации = ВидОперации;
	
	// Заполним шапку документа значениями по умолчанию.
    бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);

	Если НЕ ЗначениеЗаполнено(НовыйВидОперации) Тогда
		// Если этого не сделать, то при создании нового система не предложит выбрать вид операции.
		ВидОперации = НовыйВидОперации;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

// Функция выполняет подбор ОС через обработку подбора
//
Функция ВыполнитьПодборОС()
	
	ПараметрыПодбора  = ЗаполнитьПараметрыПодбора();
	ОбработкаПодбора  = Обработки.бит_му_ПодборВНА.Создать();
	ВыбранноеЗначение = ОбработкаПодбора.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	
	Возврат ВыбранноеЗначение;
	
КонецФункции // ВыполнитьПодборОС()

// Процедура очищает реквизиты строки табличной части ОС.
// 
// Параметры:
//  СтрокаТабличнойЧастиОС - СтрокаТабличнойЧасти.ОсновныеСредства.
// 
Процедура ОчиститьРеквизитыСтрокиОС(СтрокаТабличнойЧастиОС)
	
	МассивИмен = Новый Массив; 
	МассивИмен.Добавить("БалансоваяСтоимость"); 
	
	Для Каждого ТекИмя Из МассивИмен Цикл
		СтрокаТабличнойЧастиОС[ТекИмя] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРеквизитыСтрокиОС()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

Процедура ВыполнитьПересчетСправедливойСтоимости(ТаблицаДанных);

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ВидыКурсов = Новый Структура("МУ, Документ");
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	
	Для Каждого Строка Из ТаблицаДанных Цикл
		
		КурсыМУ 	  = СтруктураКурсыВалют.МУ;
		КурсыДокумент = СтруктураКурсыВалют.Документ;
		
		Строка.СправедливаяСтоимость = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Строка.СправедливаяСтоимость
																			  ,КурсыДокумент.Валюта
																			  ,КурсыМУ.Валюта
																			  ,КурсыДокумент.Курс
																			  ,КурсыМУ.Курс
																			  ,КурсыДокумент.Кратность
																			  ,КурсыМУ.Кратность);
		
	КонецЦикла;

	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("мВалютаМеждУчета"		, мВалютаМеждУчета);
	СтруктураШапкиДокумента.Вставить("мКоличествоСубконтоМУ", мКоличествоСубконтоМУ);
	
	// Получим список ОС документа.
	СписокОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(СписокОС, Истина);
	
	СтруктураШапкиДокумента.Вставить("СписокОС", СписокОС);
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаОС.ОсновныеСредства Тогда
		
		// Из учетной политики получим "Метод учета амортизации при переоценке".
		МетодУчетаАмортизацииПриПереоценке = Перечисления.бит_му_МетодыУчетаАмортизацииПриПереоценке.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
			
			мУчетнаяПолитика = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(СтруктураШапкиДокумента.Дата
													 						 ,Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
			
			ПВХМетодУчетаАмортизацииПриПереоценке = ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.МетодУчетаАмортизацииПриПереоценке;
			МетодУчетаАмортизацииПриПереоценке 	  = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мУчетнаяПолитика
																								  ,ПВХМетодУчетаАмортизацииПриПереоценке);
			
			Если Не ЗначениеЗаполнено(МетодУчетаАмортизацииПриПереоценке) Тогда
				
				ТекстСообщения = НСтр("ru='Не заполнено значение ""Метод учета амортизации при переоценке"" для организации ""%1%""!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтруктураШапкиДокумента.Организация);				 
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		СтруктураШапкиДокумента.Вставить("МетодУчетаАмортизацииПриПереоценке", МетодУчетаАмортизацииПриПереоценке);
		
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
		
	Иначе
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли;
	
	// Запишем Вид класса ОС документа.
	СтруктураШапкиДокумента.Вставить("ВидКласса_ОС", ВидКласса);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения строк таблиц документа.
// 
// Параметры: 
//  СтруктураТаблиц			- Структура, таблицы значений, содержащая данные для проведения и проверки.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТаблицаПоОС = СтруктураТаблиц.ОС;
	КолонкиОС	= ТаблицаПоОС.Колонки;
	ВидКласса   = СтруктураШапкиДокумента.ВидКласса_ОС;
	ЭтоОС 		= (СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаОС.ОсновныеСредства);
	
	//ОК Калинин М. 290413
	ОК_ОБщегоНазначения.ПроверитьЗаполненостьАналитикСчетаВТабличнойЧастиДокумента(ЭтотОбъект,"ОсновныеСредства","СчетДоходаОтПереоценки","СубконтоД",Отказ,Заголовок);
	ОК_ОБщегоНазначения.ПроверитьЗаполненостьАналитикСчетаВТабличнойЧастиДокумента(ЭтотОбъект,"ОсновныеСредства","СчетРасходаОтПереоценки","СубконтоР",Отказ,Заголовок);
	//ОК Калинин М. 	
	
	// Проверим таблицу ОС по строчно.
	Для Каждого ТекСтрока Из ТаблицаПоОС Цикл
		
		ТекущийВидКласса = ТекСтрока.ВидКласса;
		
		Если ВидКласса <> ТекущийВидКласса Тогда
			
			ТекстСообщения = НСтр("ru='В строке № %1% табличной части ""Основные средства"" вид класса ""%2%"" основного средства ""%3%"
			+ """ не соответствует виду операции документа!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																		,ТекСтрока.НомерСтроки
																		,ТекущийВидКласса
																		,ТекСтрока.ОсновноеСредство);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			
		Иначе	
			
			Если ЭтоОС Тогда
				
				НачалоСообщения = НСтр("ru='В строке № %1% табличной части ""Основные средства""'");
				НачалоСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НачалоСообщения,ТекСтрока.НомерСтроки);
				
				// Проверим Справедливая стоимость должна быть не меньше ликвидационной стоимости.
				Если ТекСтрока.СправедливаяСтоимость < ТекСтрока.ЛиквидационнаяСтоимость Тогда
					
					ТекстСообщения = НСтр("ru=' справедливая стоимость (%1%) основного средства ""%2%"" меньше ликвидационной стоимости (%3%)!'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																		,бит_ОбщегоНазначения.ФорматСумм(ТекСтрока.СправедливаяСтоимость)
																		,ТекСтрока.ОсновноеСредство
																		,бит_ОбщегоНазначения.ФорматСумм(ТекСтрока.ЛиквидационнаяСтоимость));
					ТекстСообщения = НачалоСообщения + ТекстСообщения;
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
					
				КонецЕсли;
				
				Если ТекСтрока.НачислятьАмортизацию Тогда
					
					// Проверки на начисление амортизации в текущем и следующем периодах.
					Если НЕ ТекСтрока.НачисленаТекущий Тогда
						
						ТекстСообщения = НСтр("ru=' указано основное средство ""%1%"", по которому не начислена амортизация в текущем периоде!'");
						ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,ТекСтрока.ОсновноеСредство);
						ТекстСообщения = НачалоСообщения + ТекстСообщения;
						бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
						
					КонецЕсли;  
					
					Если ТекСтрока.НачисленаСледующий Тогда
						
						ТекстСообщения = НСтр("ru=' указано основное средство ""%1%"", по которому начислена амортизация в следующих периодах!'");
						ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,ТекСтрока.ОсновноеСредство);
						ТекстСообщения = НачалоСообщения + ТекстСообщения;
						бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
						
					КонецЕсли; 				
					
				КонецЕсли; // Если ТекСтрока.НачислятьАмортизацию Тогда.
				
			КонецЕсли;
			
			// Проверим заполненность значений строки.
			бит_му_ВНА.ПроверитьСтрокуТаблицыОС(ТекСтрока, КолонкиОС, СтруктураШапкиДокумента, Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицДокумента()

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт
	
	ЭтоОС = (СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаОС.ОсновныеСредства);
	
	// Сформируем массив параметров ОС для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ЛиквидационнаяСтоимость_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ФинансоваяАренда_ОС);
	
	Если ЭтоОС Тогда
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетРезерваПереоценки_ОС);
	КонецЕсли;
		
	// Сформируем структуру параметров для получения таблицы параметров ОС.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     , СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ОсновноеСредство", СтруктураШапкиДокумента.СписокОС);
	СтруктураПараметров.Вставить("МоментВремени"   , ?(ЭтоНовый(), КонецДня(СтруктураШапкиДокумента.Дата), МоментВремени()));
	СтруктураПараметров.Вставить("ПараметрыВНА"	   , ПараметрыВНА);
	
	// Получим таблицу параметров ОС.
	ТаблицаПараметровОС = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	// Получим массив счетов по ОС.
	МассивСчетовСниженияСтоимости = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетСниженияСтоимости_ОС");
	МассивСчетовУчета 			  = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетУчета_ОС");
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСниженияСтоимости, Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета			  , Истина);
	
	Если ЭтоОС Тогда
		
		МассивСчетовАмортизации 	  = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетНачисленияАмортизации_ОС");
		МассивСчетовРезерваПереоценки = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетРезерваПереоценки_ОС");
		
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовАмортизации	  , Истина);
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовРезерваПереоценки, Истина);
		
	КонецЕсли;
	
	//БИТ Тртилек 09.07.2012
	Параметры = Новый Массив(2);
	Параметры[0] = МоментВремени();
	Параметры[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),Параметры);
	///БИТ Тртилек		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров"      		 , ТаблицаПараметровОС);
	// Изменение кода. Начало. 12.05.2014{{
	//БИТ Тртилек 09.07.2012
	//Граница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	///БИТ Тртилек
	// Запрос.УстановитьПараметр("МоментВремени"				 , МоментВремени());
	Запрос.УстановитьПараметр("МоментВремени"				 , Граница);
	// Изменение кода. Конец. 12.05.2014}}
	Запрос.УстановитьПараметр("МассивСчетовСниженияСтоимости", МассивСчетовСниженияСтоимости);
	Запрос.УстановитьПараметр("МассивСчетовУчета"			 , МассивСчетовУчета);
	Запрос.УстановитьПараметр("Организация"					 , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокОС"					 , СтруктураШапкиДокумента.СписокОС);
	Запрос.УстановитьПараметр("СостояниеПринятоКУчету"		 , Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета"  		 , Перечисления.бит_му_СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("Ссылка"						 , СтруктураШапкиДокумента.Ссылка);
	
	Если ЭтоОС Тогда
		
		Запрос.УстановитьПараметр("МассивСчетовАмортизации"		 , МассивСчетовАмортизации);
		Запрос.УстановитьПараметр("МассивСчетовРезерваПереоценки", МассивСчетовРезерваПереоценки);
		Запрос.УстановитьПараметр("СубконтоОС"					 , ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
		Запрос.УстановитьПараметр("НачалоПериода"                , НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонецПериода"                 , КонецМесяца(СтруктураШапкиДокумента.Дата));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПараметров.ВНА КАК ОсновноеСредство,
		|	ТаблицаПараметров.СчетСниженияСтоимости_ОС КАК СчетСниженияСтоимости,
		|	ТаблицаПараметров.НачислятьАмортизацию_ОС КАК НачислятьАмортизацию,
		|	ТаблицаПараметров.СчетНачисленияАмортизации_ОС КАК СчетНачисленияАмортизации,
		|	ТаблицаПараметров.СчетУчета_ОС КАК СчетУчета,
		|	ТаблицаПараметров.СчетРезерваПереоценки_ОС КАК СчетРезерваПереоценки,
		|	ТаблицаПараметров.ЛиквидационнаяСтоимость_ОС КАК ЛиквидационнаяСтоимость,
		|	ТаблицаПараметров.Класс_ОС КАК Класс,
		|	ТаблицаПараметров.ФинансоваяАренда_ОС КАК ОбъектВФинансовойАренде
		|ПОМЕСТИТЬ ТаблицаПараметров
		|ИЗ
		|	&ТаблицаПараметров КАК ТаблицаПараметров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезервОбесценение_МУ.КорСубконто1 КАК ОсновноеСредство,
		|	СУММА(ЕСТЬNULL(РезервОбесценение_МУ.СуммаМУОборотДт, 0)) - СУММА(ЕСТЬNULL(РезервОбесценение_МУ.СуммаМУОборотКт, 0)) КАК СуммаРезерва_Обесценения
		|ПОМЕСТИТЬ РезервОбесценение_МУ
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
		|			,
		|			&МоментВремени,
		|			Регистратор,
		|			,
		|			,
		|			Организация = &Организация
		|				И КорСубконто1 В (&СписокОС),
		|			КорСчет В (&МассивСчетовАмортизации),
		|			&СубконтоОС) КАК РезервОбесценение_МУ
		|ГДЕ
		|	РезервОбесценение_МУ.Регистратор ССЫЛКА Документ.бит_му_ПереоценкаОС
		|
		|СГРУППИРОВАТЬ ПО
		|	РезервОбесценение_МУ.КорСубконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_му_СобытияОС.ОсновноеСредство
		|ПОМЕСТИТЬ НачисленаАмортизацияТекущий
		|ИЗ
		|	РегистрСведений.бит_му_СобытияОС КАК бит_му_СобытияОС
		|ГДЕ
		|	бит_му_СобытияОС.Организация = &Организация
		|	И бит_му_СобытияОС.Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияОс.НачислениеАмортизации)
		|	И бит_му_СобытияОС.ОсновноеСредство В(&СписокОС)
		|	И бит_му_СобытияОС.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_му_СобытияОС.ОсновноеСредство
		|ПОМЕСТИТЬ НачисленаАмортизацияСледующий
		|ИЗ
		|	РегистрСведений.бит_му_СобытияОС КАК бит_му_СобытияОС
		|ГДЕ
		|	бит_му_СобытияОС.Организация = &Организация
		|	И бит_му_СобытияОС.Событие = ЗНАЧЕНИЕ(Перечисление.бит_му_СобытияОс.НачислениеАмортизации)
		|	И бит_му_СобытияОС.ОсновноеСредство В(&СписокОС)
		|	И бит_му_СобытияОС.Период >= ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереоценкаОС_ОС.НомерСтроки,
		|	ПереоценкаОС_ОС.ОсновноеСредство,
		|	ТаблицаПараметров.СчетУчета,
		|	СтоимостьОС_МУ.Субконто1 КАК СУ_Субконто1,
		|	СтоимостьОС_МУ.Субконто2 КАК СУ_Субконто2,
		|	СтоимостьОС_МУ.Субконто3 КАК СУ_Субконто3,
		|	СтоимостьОС_МУ.Субконто4 КАК СУ_Субконто4,
		|	ТаблицаПараметров.СчетНачисленияАмортизации,
		|	АмортизацияОС_МУ.Субконто1 КАК СНА_Субконто1,
		|	АмортизацияОС_МУ.Субконто2 КАК СНА_Субконто2,
		|	АмортизацияОС_МУ.Субконто3 КАК СНА_Субконто3,
		|	АмортизацияОС_МУ.Субконто4 КАК СНА_Субконто4,
		|	ТаблицаПараметров.СчетСниженияСтоимости,
		|	ПереоценкаОС_ОС.ОсновноеСредство КАК ССС_Субконто1,
		|	ФактОбесценениеОС_МУ.Субконто2 КАК ССС_Субконто2,
		|	ФактОбесценениеОС_МУ.Субконто3 КАК ССС_Субконто3,
		|	ФактОбесценениеОС_МУ.Субконто4 КАК ССС_Субконто4,
		|	ТаблицаПараметров.СчетРезерваПереоценки,
		|	ПереоценкаОС_ОС.ОсновноеСредство КАК СРП_Субконто1,
		|	РезПереоценкиОС_МУ.Субконто2 КАК СРП_Субконто2,
		|	РезПереоценкиОС_МУ.Субконто3 КАК СРП_Субконто3,
		|	РезПереоценкиОС_МУ.Субконто4 КАК СРП_Субконто4,
		|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаМУОстатокДт, 0) КАК Стоимость,
		|	ЕСТЬNULL(АмортизацияОС_МУ.СуммаМУОстатокКт, 0) КАК Амортизация,
		|	ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаМУОстатокКт, 0) КАК СуммаОбесценения,
		|	ЕСТЬNULL(РезПереоценкиОС_МУ.СуммаМУОстатокКт, 0) КАК СуммаРезерваПереоценки,
		|	ЕСТЬNULL(ТаблицаПараметров.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
		|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаМУОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_МУ.СуммаМУОстатокКт, 0) - ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаМУОстатокКт, 0) КАК БалансоваяСтоимость,
		|	ПереоценкаОС_ОС.СправедливаяСтоимость,
		|	ПереоценкаОС_ОС.СчетДоходаОтПереоценки,
		|	ПереоценкаОС_ОС.СубконтоД1,
		|	ПереоценкаОС_ОС.СубконтоД2,
		|	ПереоценкаОС_ОС.СубконтоД3,
		|	ПереоценкаОС_ОС.СубконтоД4,
		|	ПереоценкаОС_ОС.СчетРасходаОтПереоценки,
		|	ПереоценкаОС_ОС.СубконтоР1,
		|	ПереоценкаОС_ОС.СубконтоР2,
		|	ПереоценкаОС_ОС.СубконтоР3,
		|	ПереоценкаОС_ОС.СубконтоР4,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РезервОбесценение_МУ.СуммаРезерва_Обесценения, 0) > 0
		|			ТОГДА ЕСТЬNULL(РезервОбесценение_МУ.СуммаРезерва_Обесценения, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКорректировкиРезерва,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РезервОбесценение_МУ.СуммаРезерва_Обесценения, 0) < 0
		|			ТОГДА ЕСТЬNULL(РезервОбесценение_МУ.СуммаРезерва_Обесценения, 0) * -1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаКорректировкиОбесценения,
		|	ПринятыеОС_МУ.ДатаСостояния КАК ДатаПринятия,
		|	ВыбывшиеОС_МУ.ДатаСостояния КАК ДатаВыбытия,
		|	ТаблицаПараметров.Класс.ВидКласса КАК ВидКласса,		
		|	ТаблицаПараметров.ОбъектВФинансовойАренде,
		|	ТаблицаПараметров.НачислятьАмортизацию,
		|	ВЫБОР
		|		КОГДА (НЕ НачисленаАмортизацияТекущий.ОсновноеСредство ЕСТЬ NULL )
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НачисленаТекущий,
		|	ВЫБОР
		|		КОГДА (НЕ НачисленаАмортизацияСледующий.ОсновноеСредство ЕСТЬ NULL )
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НачисленаСледующий
		|ИЗ
		|	Документ.бит_му_ПереоценкаОС.ОсновныеСредства КАК ПереоценкаОС_ОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ПринятыеОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = ПринятыеОС_МУ.ОсновноеСредство
		|			И (ПринятыеОС_МУ.Организация = &Организация)
		|			И (ПринятыеОС_МУ.Состояние = &СостояниеПринятоКУчету)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ВыбывшиеОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = ВыбывшиеОС_МУ.ОсновноеСредство
		|			И (ВыбывшиеОС_МУ.Организация = &Организация)
		|			И (ВыбывшиеОС_МУ.Состояние = &СостояниеСнятоСУчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = ТаблицаПараметров.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|				&МоментВремени,
		|				Счет В (&МассивСчетовСниженияСтоимости),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В (&СписокОС)) КАК ФактОбесценениеОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = ФактОбесценениеОС_МУ.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|				&МоментВремени,
		|				Счет В (&МассивСчетовРезерваПереоценки),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В (&СписокОС)) КАК РезПереоценкиОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = РезПереоценкиОС_МУ.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|				&МоментВремени,
		|				Счет В (&МассивСчетовУчета),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В (&СписокОС)) КАК СтоимостьОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = СтоимостьОС_МУ.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|				&МоментВремени,
		|				Счет В (&МассивСчетовАмортизации),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В (&СписокОС)) КАК АмортизацияОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = АмортизацияОС_МУ.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РезервОбесценение_МУ КАК РезервОбесценение_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = РезервОбесценение_МУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленаАмортизацияСледующий КАК НачисленаАмортизацияСледующий
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = НачисленаАмортизацияСледующий.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленаАмортизацияТекущий КАК НачисленаАмортизацияТекущий
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = НачисленаАмортизацияТекущий.ОсновноеСредство
		|ГДЕ
		|	ПереоценкаОС_ОС.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПараметров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ РезервОбесценение_МУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НачисленаАмортизацияТекущий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НачисленаАмортизацияСледующий";
		
		РезультатЗапроса = Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПараметров.ВНА КАК ОсновноеСредство,
		|	ТаблицаПараметров.СчетСниженияСтоимости_ОС КАК СчетСниженияСтоимости,
		|	ТаблицаПараметров.СчетУчета_ОС КАК СчетУчета,
		|	ТаблицаПараметров.ЛиквидационнаяСтоимость_ОС КАК ЛиквидационнаяСтоимость,
		|	ТаблицаПараметров.Класс_ОС КАК Класс,
		|	ТаблицаПараметров.ФинансоваяАренда_ОС КАК ОбъектВФинансовойАренде
		|ПОМЕСТИТЬ ТаблицаПараметров
		|ИЗ
		|	&ТаблицаПараметров КАК ТаблицаПараметров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Резерв_МУ.Субконто1 КАК ОсновноеСредство,
		|	СУММА(ЕСТЬNULL(Резерв_МУ.СуммаМУОборотДт, 0)) - СУММА(ЕСТЬNULL(Резерв_МУ.СуммаМУОборотКт, 0)) КАК СуммаРезерва
		|ПОМЕСТИТЬ Резерв_МУ
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
		|			,
		|			&МоментВремени,
		|			Регистратор,
		|			Счет В (&МассивСчетовУчета),
		|			,
		|			Организация = &Организация
		|				И Субконто1 В (&СписокОС),
		|			,
		|			) КАК Резерв_МУ
		|ГДЕ
		|	Резерв_МУ.Регистратор ССЫЛКА Документ.бит_му_ПереоценкаОС
		|
		|СГРУППИРОВАТЬ ПО
		|	Резерв_МУ.Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереоценкаОС_ОС.НомерСтроки,
		|	ПереоценкаОС_ОС.ОсновноеСредство,
		|	ТаблицаПараметров.СчетУчета,
		|	СтоимостьОС_МУ.Субконто1 КАК СУ_Субконто1,
		|	СтоимостьОС_МУ.Субконто2 КАК СУ_Субконто2,
		|	СтоимостьОС_МУ.Субконто3 КАК СУ_Субконто3,
		|	СтоимостьОС_МУ.Субконто4 КАК СУ_Субконто4,
		|	ТаблицаПараметров.СчетСниженияСтоимости,
		|	ПереоценкаОС_ОС.ОсновноеСредство КАК ССС_Субконто1,
		|	ФактОбесценениеОС_МУ.Субконто2 КАК ССС_Субконто2,
		|	ФактОбесценениеОС_МУ.Субконто3 КАК ССС_Субконто3,
		|	ФактОбесценениеОС_МУ.Субконто4 КАК ССС_Субконто4,
		|	ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаМУОстатокКт, 0) КАК СуммаОбесценения,
		|	ЕСТЬNULL(ТаблицаПараметров.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
		|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаМУОстатокДт, 0) - ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаМУОстатокКт, 0) КАК БалансоваяСтоимость,
		|	ПереоценкаОС_ОС.СправедливаяСтоимость,
		|	ПереоценкаОС_ОС.СчетДоходаОтПереоценки,
		|	ПереоценкаОС_ОС.СубконтоД1,
		|	ПереоценкаОС_ОС.СубконтоД2,
		|	ПереоценкаОС_ОС.СубконтоД3,
		|	ПереоценкаОС_ОС.СубконтоД4,
		|	ПереоценкаОС_ОС.СчетРасходаОтПереоценки,
		|	ПереоценкаОС_ОС.СубконтоР1,
		|	ПереоценкаОС_ОС.СубконтоР2,
		|	ПереоценкаОС_ОС.СубконтоР3,
		|	ПереоценкаОС_ОС.СубконтоР4,
		|	0 КАК Сумма,
		|	ЕСТЬNULL(Резерв_МУ.СуммаРезерва, 0) КАК СуммаРезерва,
		|	ПринятыеОС_МУ.ДатаСостояния КАК ДатаПринятия,
		|	ВыбывшиеОС_МУ.ДатаСостояния КАК ДатаВыбытия,
		|	ТаблицаПараметров.Класс.ВидКласса КАК ВидКласса,
		|	ТаблицаПараметров.ОбъектВФинансовойАренде
		|ИЗ
		|	Документ.бит_му_ПереоценкаОС.ОсновныеСредства КАК ПереоценкаОС_ОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ПринятыеОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = ПринятыеОС_МУ.ОсновноеСредство
		|			И (ПринятыеОС_МУ.Организация = &Организация)
		|			И (ПринятыеОС_МУ.Состояние = &СостояниеПринятоКУчету)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ВыбывшиеОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = ВыбывшиеОС_МУ.ОсновноеСредство
		|			И (ВыбывшиеОС_МУ.Организация = &Организация)
		|			И (ВыбывшиеОС_МУ.Состояние = &СостояниеСнятоСУчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = ТаблицаПараметров.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|				&МоментВремени,
		|				Счет В (&МассивСчетовСниженияСтоимости),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В (&СписокОС)) КАК ФактОбесценениеОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = ФактОбесценениеОС_МУ.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|				&МоментВремени,
		|				Счет В (&МассивСчетовУчета),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В (&СписокОС)) КАК СтоимостьОС_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = СтоимостьОС_МУ.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ Резерв_МУ КАК Резерв_МУ
		|		ПО ПереоценкаОС_ОС.ОсновноеСредство = Резерв_МУ.ОсновноеСредство
		|ГДЕ
		|	ПереоценкаОС_ОС.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПараметров";
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЕсли;
	
	ТаблицаПоОС = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ОС", ТаблицаПоОС);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют,ИсторическиеКурсы, Отказ, Заголовок)
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ТаблицаДанных  = СтруктураТаблиц.ОС;
	
	НаборЗаписей_МУ 	   = Движения.бит_Дополнительный_2;
	НаборЗаписей_События   = Движения.бит_му_СобытияОС;
	ТаблицаЗаписей_События = НаборЗаписей_События.Выгрузить();
	
	ТаблицаЗаписей_События.Очистить();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийПереоценкаОС.ОсновныеСредства Тогда
		
		// Выполним движения характерные ОС.
		бит_му_ВНА.ВыполнитьДвиженияПоПереоценкиВНА(СтруктураШапкиДокумента
												   ,ТаблицаДанных
												   ,СтруктураКурсыВалют
												   ,НаборЗаписей_МУ
												   ,ТаблицаЗаписей_События
												   ,"ОС"
												   ,ИсторическиеКурсы);
	Иначе
		
		// Выполним движения характерные ИС.
		ВыполнитьДвиженияПоИС(СтруктураШапкиДокумента
							 ,ТаблицаДанных
							 ,СтруктураКурсыВалют
							 ,ИсторическиеКурсы
							 ,НаборЗаписей_МУ
							 ,ТаблицаЗаписей_События);
	КонецЕсли;
	
	// Движения по регистру сведений "бит_му_СобытияОС".
	ТаблицаЗаписей_События.ЗаполнитьЗначения(ДатаДока	   , "Период");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(Истина		   , "Активность");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(ТекОрганизация, "Организация");
	
	НаборЗаписей_События.Загрузить(ТаблицаЗаписей_События);
	
	//БИТ Тртилек 12.07.2012
	Для Каждого Запись_МУ Из НаборЗаписей_МУ Цикл
		Запись_МУ.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	КонецЦикла;;
	///БИТ Тртилек
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура выполняет движения характерные ИС.
// 
// Параметры: 
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаДанных			- ТаблицаЗначений.
//  СтруктураКурсыВалют     - Структура.
//  НаборЗаписей_МУ			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  ТаблицаЗаписей_События  - ТаблицаЗначений.
// 
Процедура ВыполнитьДвиженияПоИС(СтруктураШапкиДокумента
							   ,ТаблицаДанных
							   ,СтруктураКурсыВалют
							   ,ИсторическиеКурсы
							   ,НаборЗаписей_МУ
							   ,ТаблицаЗаписей_События)
							 
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			
		СпрСтоимость = СтрокаТаблицы.СправедливаяСтоимость;
		БалСтоимость = СтрокаТаблицы.БалансоваяСтоимость;
		
		Если СпрСтоимость = БалСтоимость Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим направление переоценки ИС.
		// Справедливая стоимость < Балансовой стоимости = Уценка.
		// Справедливая стоимость > Балансовой стоимости = Дооценка.
		
		Если СпрСтоимость < БалСтоимость Тогда
			// Это "Уценка".
			
			Событие = Перечисления.бит_му_СобытияОС.Уценка;
			
			// Расчитаем значение сумм: 
			// 1) НачислениеОбесценения - сумма начисления обесценения.
			
			//БИТ Тртилек 12.07.2012
			//НачислениеОбесценения = БалСтоимость - СпрСтоимость - СтрокаТаблицы.СуммаРезерва;
			НачислениеОбесценения = ?((БалСтоимость - СпрСтоимость)<СтрокаТаблицы.СуммаРезерва, БалСтоимость - СпрСтоимость,  БалСтоимость - СпрСтоимость - СтрокаТаблицы.СуммаРезерва);
			///БИТ Тртилек
			
			//БИТ Тртилек 12.07.2012
			//СодержаниеПроводки = НСтр("ru='Начисление переоценки ИС'");
			//
			//// ДТ СчетРасходаОтПереоценки КТ СчетУчета СуммаРезерва.
			//СоздатьЗаписьПоСписаниюРезерваИС(СтруктураШапкиДокумента
			//								,НаборЗаписей_МУ
			//								,СтрокаТаблицы
			//								,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//								,СтрокаТаблицы.СуммаРезерва
			//								,СодержаниеПроводки);
			//								
			//СодержаниеПроводки = НСтр("ru='Начисление переоценки ИС'");
			//								
			//// ДТ СчетРасходаОтПереоценки КТ СчетСниженияСтоимости НачислениеОбесценения.
			//СоздатьЗаписьПоУценкиИС(СтруктураШапкиДокумента
			//					   ,НаборЗаписей_МУ
			//					   ,СтрокаТаблицы
			//					   ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//					   ,НачислениеОбесценения
			//					   ,СодержаниеПроводки);			
			Если (БалСтоимость - СпрСтоимость)>=СтрокаТаблицы.СуммаРезерва Тогда
				// ДТ СчетРасходаОтПереоценки КТ СчетУчета СуммаРезерва
				СоздатьЗаписьПоСписаниюРезерваИС(СтруктураШапкиДокумента
												,НаборЗаписей_МУ
												,СтрокаТаблицы
												,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
												,СтрокаТаблицы.СуммаРезерва
												,"Начисление переоценки ИС");
			
				// ДТ СчетРасходаОтПереоценки КТ СчетСниженияСтоимости НачислениеОбесценения
				СоздатьЗаписьПоУценкиИС(СтруктураШапкиДокумента
									   ,НаборЗаписей_МУ
									   ,СтрокаТаблицы
									   ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
									   ,НачислениеОбесценения
									   ,"Начисление переоценки ИС");
			Иначе
				
				// ДТ СчетРасходаОтПереоценки КТ СчетУчета НачислениеОбесценения
				СоздатьЗаписьПоСписаниюРезерваИС(СтруктураШапкиДокумента
												,НаборЗаписей_МУ
												,СтрокаТаблицы
												,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
												,НачислениеОбесценения
												,"Начисление переоценки ИС");
							   
			КонецЕсли;
			///БИТ Тртилек
			
		Иначе
			// Это "Дооценка".
			
			Событие = Перечисления.бит_му_СобытияОС.Дооценка;
			
			// Расчитаем значение сумм: 
			// 1) НачислениеРезерва - сумма начисления резерва.
			
			//БИТ Тртилек 12.07.2012
			//НачислениеРезерва = СпрСтоимость - БалСтоимость - СтрокаТаблицы.СуммаОбесценения;
			НачислениеРезерва = ?((СпрСтоимость - БалСтоимость)<СтрокаТаблицы.СуммаОбесценения, СпрСтоимость - БалСтоимость,  СпрСтоимость - БалСтоимость - СтрокаТаблицы.СуммаОбесценения);
			///БИТ Тртилек
			
			//БИТ Тртилек 12.07.2012
			СодержаниеПроводки = НСтр("ru='Начисление переоценки ИС'");
			
			// ДТ СчетСниженияСтоимости КТ СчетДоходаОтПереоценки СуммаОбесценения.
			//СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
			//								  ,НаборЗаписей_МУ
			//								  ,СтрокаТаблицы
			//								  ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//								  ,СтрокаТаблицы.СуммаОбесценения
			//								  ,СодержаниеПроводки);
			//								  
			//СодержаниеПроводки = НСтр("ru='Начисление переоценки ИС'");
			//
			//// ДТ СчетУчета КТ СчетДоходаОтПереоценки НачислениеРезерва.
			//СоздатьЗаписьПоДооценкиИС(СтруктураШапкиДокумента
			//						 ,НаборЗаписей_МУ
			//						 ,СтрокаТаблицы
			//						 ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//						 ,НачислениеРезерва
			//						 ,СодержаниеПроводки);
			Если (СпрСтоимость - БалСтоимость)>=СтрокаТаблицы.СуммаОбесценения Тогда
			
				// ДТ СчетСниженияСтоимости КТ СчетДоходаОтПереоценки СуммаОбесценения
				СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
												  ,НаборЗаписей_МУ
												  ,СтрокаТаблицы
												  ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
												  ,СтрокаТаблицы.СуммаОбесценения
												  ,СодержаниеПроводки);
												  
				// ДТ СчетУчета КТ СчетДоходаОтПереоценки НачислениеРезерва
				СоздатьЗаписьПоДооценкиИС(СтруктураШапкиДокумента
										 ,НаборЗаписей_МУ
										 ,СтрокаТаблицы
										 ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
										 ,НачислениеРезерва
										 ,СодержаниеПроводки);
			Иначе
			// ДТ СчетСниженияСтоимости КТ СчетДоходаОтПереоценки НачислениеРезерва
			СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
											  ,НаборЗаписей_МУ
											  ,СтрокаТаблицы
											  ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
											  ,НачислениеРезерва
											  ,СодержаниеПроводки);

			КонецЕсли;
			///БИТ Тртилек
			
		КонецЕсли; // Если СпрСтоимость < БалСтоимость Тогда
		
		// Добавим событие по ОС.
		ЗаписьСобытие = ТаблицаЗаписей_События.Добавить();
		ЗаписьСобытие.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		ЗаписьСобытие.Событие		   = Событие;
		
	КонецЦикла; // Обход таблицы ИС.
							 
КонецПроцедуры // ВыполнитьДвиженияПоИС()

// Функция получает структуру курсов валют.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Отказ					- Булево.
//  Заголовок				- Строка.
// 
// Возвращаемое значение:
//  СтруктураКурсыВалют - Структура.
// 
Функция ПолучитьСтруктуруКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВидыКурсов = Новый Структура("Упр, Регл, МУ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект
																			  ,СтруктураШапкиДокумента.Дата
																			  ,ВидыКурсов);
	СтруктураКурсыВалют.Вставить("Документ", СтруктураКурсыВалют.МУ);
	
	// Получим валюту международного учета.
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	
	Если Не ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = НСтр("ru='Для организации ""%1%"" не указана валюта международного учета!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтруктураШапкиДокумента.Организация);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // ПолучитьСтруктуруКурсовВалют()

Функция ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, Период, СтруктураКурсыВалют)
	
	ИсторическиеКурсы = бит_му_ВНА.ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, Период, СтруктураКурсыВалют);	
	
	// // Получим дату принятия к учету для каждого ОС
	// ТаблицаДатПринятияОС = ПодготовитьТаблицуДатПринятияОС(МассивОС);
	// 
	// ТаблицаПериодов = ТаблицаДатПринятияОС.Скопировать();
	// ТаблицаПериодов.Свернуть("Период");
	// СтруктураКурсыВалютДокумент = Новый Структура;
	// СтруктураКурсыВалютДокумент.Вставить("Документ", СтруктураКурсыВалют.Документ); 
	// 
	//// Получим курсы валюты документа для каждого ОС на дату принятия к учету
	// Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалютДокумент);

	// СоответствиеКурсовИОС = Новый Соответствие;
	// 
	// Для каждого Строка Из ТаблицаДатПринятияОС Цикл
	// 	СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	// КонецЦикла; 
	// 
	// Для Каждого ТекОС Из ИсторическиеКурсы Цикл
	// 	Если НЕ СоответствиеКурсовИОС[ТекОС.Ключ] = Неопределено Тогда
	// 		ТекОС.Значение.Документ = СоответствиеКурсовИОС[ТекОС.Ключ].Документ;
	// 	КонецЕсли; 
	// КонецЦикла;

	Для Каждого ТекОС Из ИсторическиеКурсы Цикл
		ТекОС.Значение.Документ = ТекОС.Значение.МУ;
	КонецЦикла;
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

// Функция подготавливает таблицу дат принятия ОС.
// 
// Параметры:
//  МассивОС - Массив
// 
// Возвращаемое значение:
//  ТаблицаЗначения
// 
Функция ПодготовитьТаблицуДатПринятияОС(МассивОС) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СостояниеПринято", Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_му_СостоянияОС.ОсновноеСредство,
	|	бит_му_СостоянияОС.ДатаСостояния КАК Период
	|ИЗ
	|	РегистрСведений.бит_му_СостоянияОС КАК бит_му_СостоянияОС
	|ГДЕ
	|	бит_му_СостоянияОС.ОсновноеСредство В(&МассивОС)
	|	И бит_му_СостоянияОС.Состояние = &СостояниеПринято
	|	И бит_му_СостоянияОС.Организация = &Организация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область ПроцедурыДляДобавленияДвиженийПриПроведенииДокумента

// Процедура формирует проводку по списанию обесценения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаСписания			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
											,НаборЗаписей
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СуммаСписания
											,СодержаниеДвижения)
	Если СуммаСписания = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетСниженияСтоимости
										  ,СтрокаТаблицы.СчетДоходаОтПереоценки
										  ,СуммаСписания
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"ССС_Субконто","СубконтоД",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюОбесценения()

// Процедура формирует проводку по списанию резерва ИС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаРезерва			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюРезерваИС(СтруктураШапкиДокумента
										  ,НаборЗаписей
										  ,СтрокаТаблицы
										  ,СтруктураКурсыВалют
										  ,СуммаРезерва
										  ,СодержаниеДвижения)
	Если СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетРасходаОтПереоценки
										  ,СтрокаТаблицы.СчетУчета
										  ,СуммаРезерва
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СубконтоР","СУ_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюРезерваИС()

// Процедура формирует проводку по дооценки ИС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаОбесценения		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоДооценкиИС(СтруктураШапкиДокумента
								   ,НаборЗаписей
								   ,СтрокаТаблицы
								   ,СтруктураКурсыВалют
								   ,СуммаДооценки
								   ,СодержаниеДвижения)
	Если СуммаДооценки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетУчета
										  ,СтрокаТаблицы.СчетДоходаОтПереоценки
										  ,СуммаДооценки
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СУ_Субконто","СубконтоД",мКоличествоСубконтоМУ);
	
	//БИТ Тртилек 13.01.2012
	Для Ном = 1 По мКоличествоСубконтоМУ Цикл
		Если ТипЗнч(СтрокаТаблицы["СубконтоД" + Ном]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда	
			Если НЕ ЗначениеЗаполнено(Запись.СубконтоДт.Объект) Тогда
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Объект", СтрокаТаблицы["СубконтоД" + Ном]);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Запись.СубконтоКт.Объект) Тогда
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Объект", СтрокаТаблицы["СубконтоД" + Ном]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	///БИТ Тртилек
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоДооценкиИС()

// Процедура формирует проводку по уценки ИС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаОбесценения		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоУценкиИС(СтруктураШапкиДокумента
								 ,НаборЗаписей
								 ,СтрокаТаблицы
								 ,СтруктураКурсыВалют
								 ,СуммаУценки
								 ,СодержаниеДвижения)
	Если СуммаУценки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,мВалютаМеждУчета
										  ,СтрокаТаблицы.СчетРасходаОтПереоценки
										  ,СтрокаТаблицы.СчетСниженияСтоимости
										  ,СуммаУценки
										  ,СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СубконтоР","ССС_Субконто",мКоличествоСубконтоМУ);
	
	//БИТ Тртилек 13.01.2012
	Для Ном = 1 По мКоличествоСубконтоМУ Цикл
		Если ТипЗнч(СтрокаТаблицы["СубконтоР" + Ном]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда	
			Если НЕ ЗначениеЗаполнено(Запись.СубконтоДт.Объект) Тогда
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Объект", СтрокаТаблицы["СубконтоР" + Ном]);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Запись.СубконтоКт.Объект) Тогда
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Объект", СтрокаТаблицы["СубконтоР" + Ном]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	///БИТ Тртилек
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоУценкиИС()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("ОсновноеСредство");
	
	// Проверим наличие дублей в табличной части "ДокументыПланирования".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 ,"ОсновныеСредства"
																	 ,СтруктураНеДублирующихсяПолей
																	 ,Отказ);
																	 
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти     

#КонецЕсли
