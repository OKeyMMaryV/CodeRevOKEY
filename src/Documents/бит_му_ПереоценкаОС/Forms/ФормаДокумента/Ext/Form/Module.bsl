
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	фКоличествоСубконтоМУ = 4;
	
	ЗаполнитьКэшЗначений();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Дата");
	фКэшРеквизитов.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьВалютуМСФО();	
		УстановитьСостояниеДокумента();
	Иначе
		ЗаполнитьВалютуМСФО(Ложь);	
	КонецЕсли;
	
	ЗаполнитьИнвентарныеНомера();
	
	СформироватьДеревоВидовОпераций();
	СформироватьПодменюВидовОпераций();
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетДоходаОтПереоценки"
												   ,"СубконтоД"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетРасходаОтПереоценки"
												   ,"СубконтоР"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");											   
												   
	ВосстановитьКоличествоДоступныхСубконто();
	
	НастроитьОформлениеФормы();
	
	// Изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // Изменение кода. Конец. 03.04.2014}}

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Действие") Тогда
			
			Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
				
				Если Объект.ОсновныеСредства.Количество() > 0 Тогда
					
					Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
					ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					
				Иначе
					
					ОбработатьПодборОС(ВыбранноеЗначение);
					
				КонецЕсли;
				
			Иначе
				
				ОбработатьПодборОС(ВыбранноеЗначение);
				
			КонецЕсли; 
			
		КонецЕсли; // В структуре есть поле действие 
		
	КонецЕсли; // Это структура
	
КонецПроцедуры

// Процедура - завершение выбора ОС 
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьПодборОС(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьКоличествоДоступныхСубконто();
	ЗаполнитьИнвентарныеНомера();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
	КлючеваяОперация = "Проведениебит_му_ПереоценкаОС";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
	фКэшРеквизитов.Дата = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не фКэшРеквизитов.Организация = Объект.Организация
		И Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ПриИзмененииОрганизации();
	
		фКэшРеквизитов.Организация = Объект.Организация;

	КонецЕсли;
		
КонецПроцедуры

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Объект.Организация = фКэшРеквизитов.Организация;
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОрганизации();
	
	фКэшРеквизитов.Организация = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	ИзменениеВалютыКлиент();
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ОсновныеСредства;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);	
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.ОсновныеСредства;
		
		// Получим курсы валют на дату принятия к учету для каждого ОС.
		КурсыСтарые = ПолучитьКурсыВалютПоПериодам(мКэшРеквизитовФормы);
		КурсыНовые = ПолучитьКурсыВалютПоПериодам(,Истина);
		
		МассивСуммДляПересчета = Новый Массив;
		МассивСуммДляПересчета.Добавить("СправедливаяСтоимость");
		МассивСуммДляПересчета.Добавить("БалансоваяСтоимость");
		
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
							
				Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
					
					// Балансовую стоимость пересчитаем на дату принятия к учету.
					Если ИмяСуммы = "БалансоваяСтоимость" Тогда
						
						Если НЕ КурсыСтарые[СтрокаТаблицы.ОсновноеСредство] = Неопределено 
							И НЕ КурсыНовые[СтрокаТаблицы.ОсновноеСредство] = Неопределено Тогда
							
							СтарыеКурсы = КурсыСтарые[СтрокаТаблицы.ОсновноеСредство].СтарыеКурсы;
							НовыеКурсы = КурсыНовые[СтрокаТаблицы.ОсновноеСредство].НовыеКурсы;

						
							СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																									,СтарыеКурсы.Валюта
																									,НовыеКурсы.Валюта
																									,СтарыеКурсы.Курс
																									,НовыеКурсы.Курс
																									,СтарыеКурсы.Кратность
																									,НовыеКурсы.Кратность);
						КонецЕсли;
						
					// Справедливую стоимость пересчитаем на дату документа.
					Иначе
						
						СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																							   ,мКэшРеквизитовФормы.ВалютаДокумента
																							   ,Объект.ВалютаДокумента
																							   ,мКэшРеквизитовФормы.КурсДокумента
																							   ,Объект.КурсДокумента
																							   ,мКэшРеквизитовФормы.КратностьДокумента
																							   ,Объект.КратностьДокумента);
						
					КонецЕсли; 
					
				КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеСредства

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено 
		Или Не ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОС(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСчетДоходаОтПереоценкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаДохода(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоДПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"СубконтоД",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"СубконтоД",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоДАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоД"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваСубконтоДАвтоПодбор()

&НаКлиенте
Процедура ОсновныеСредстваСчетРасходаОтПереоценкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаРасхода(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"СубконтоР",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоРНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"СубконтоР",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоРАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоР"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваСубконтоРАвтоПодбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте 
Процедура КомандаУстановитьОперацию(Команда)

	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
    
    // Запомним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации;
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	ИмяКнопки		= СтрЗаменить(ИмяКнопки, "Кнопка_", "");
	Позиция         = Найти(ИмяКнопки, "_");
	ИмяПодменю      = Лев(ИмяКнопки  , Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки , Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.ВидыОпераций[ИмяВидаОперации];
	
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПредыдущийВидОперации", ПредыдущийВидОперации);
		
		Оповещение = Новый ОписаниеОповещения("КомандаУстановитьОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	Иначе
		
		// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
		УстановитьЗаголовокФормыДокумента();
	
		Модифицированность = Истина;

	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - завершение обработки команды "КомандаУстановитьОперацию".
// 
&НаКлиенте
Процедура КомандаУстановитьОперациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Объект.ВидОперации = ДополнительныеПараметры["ПредыдущийВидОперации"];
		Возврат;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыФормы = ЗаполнитьПараметрыПодбора();
		
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсе(Команда)
	
	Если НЕ Объект.ОсновныеСредства.Количество() = 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьВсеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Параметры в табличной части будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьОС();

	КонецЕсли;
	
		
КонецПроцедуры

// Процедура - завершение обработки команды "ЗаполнитьВсе".
// 
&НаКлиенте
Процедура КомандаЗаполнитьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоТекущейСтроке(Команда)
	
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Для заполнения параметров необходимо выбрать строку с ОС
                       |для которого необходимо заполнить параметры.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
        Возврат;
    КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОС(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	фКэшЗначений.Вставить("ВидыОпераций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийПереоценкаОС));
	
	КэшПеречисления = Новый Структура;	
	КэшПеречисления.Вставить("бит_му_ВидыОперацийПереоценкаОС", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийПереоценкаОС));
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА"		  , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));
	КэшПеречисления.Вставить("бит_му_МоделиУчетаВНА"		  , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МоделиУчетаВНА));
	КэшПеречисления.Вставить("бит_му_ВидыКлассовОС"			  , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыКлассовОС));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетДоходаОтПереоценки);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетРасходаОтПереоценки);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"ОсновныеСредства"
	                                                           ,"СубконтоД"
															   ,"КоличествоДоступныхСубконтоД"
															   ,фКоличествоСубконтоМУ);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"ОсновныеСредства"
	                                                           ,"СубконтоР"
															   ,"КоличествоДоступныхСубконтоР"
															   ,фКоличествоСубконтоМУ);			
															   
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
														   
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоВидовОпераций()

	КореньДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = КореньДерева.Добавить();
	СтрокаНовая.ВидОперации = "Доступные виды операций";
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекЗначение Из Перечисления.бит_му_ВидыОперацийПереоценкаОС Цикл
		
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекЗначение;	
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

&НаСервере
Процедура СформироватьПодменюВидовОпераций()
 
	// Заполняем виды операций для группы подменю.
	Для Каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийПереоценкаОС[ИмяЗначенияПеречисления];
		
		ИмяКнопки = "Кнопка_" + ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "КомандаУстановитьОперацию";
		
		КнопкаГруппыПодменю = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
		
	КонецЦикла; 
	
КонецПроцедуры // СформироватьПодменюВидовОпераций()

&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для Каждого СтрокаТаблицы Из Объект.ОсновныеСредства Цикл
		
		СвСчДх = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходаОтПереоценки);
        СвСчРх = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетРасходаОтПереоценки);
    
		СтрокаТаблицы.КоличествоДоступныхСубконтоД = СвСчДх.КоличествоСубконто;
		СтрокаТаблицы.КоличествоДоступныхСубконтоР = СвСчРх.КоличествоСубконто;
		
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьКоличествоДоступныхСубконто()

&НаСервере
Процедура ЗаполнитьИнвентарныеНомера(ИДСтроки=Неопределено)
	
	СоответствиеОС_ИнвентарныйНомер = Новый Соответствие;
	
	Если ИДСтроки = Неопределено Тогда
		
		бит_му_ВНА.ЗаполнитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
															,Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство")
															,Объект.Организация);
													   
		Для Каждого ТекСтрока Из Объект.ОсновныеСредства Цикл
			ТекСтрока.ИнвентарныйНомер = СоответствиеОС_ИнвентарныйНомер[ТекСтрока.ОсновноеСредство];
		КонецЦикла;
		
	Иначе
		ДанныеСтроки = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
		
		Если НЕ ДанныеСтроки = Неопределено Тогда
			ДанныеСтроки.ИнвентарныйНомер = бит_му_ВНА.ПолучитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
																					,ДанныеСтроки.ОсновноеСредство
																					,Объект.Организация);
		КонецЕсли;
																				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОС(ИДСтроки)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получим параметры по ОС.
	ПолучитьПараметрыОС(ТекущаяСтрока,, Истина);
	
	// Синхронизируем реквизиты строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоД");
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоР");
	
	ЗаполнитьИнвентарныеНомера(ИДСтроки);
	
	//БИТ Тртилек 03.07.2012
	Если ЗначениеЗаполнено(ТекущаяСтрока.СчетДоходаОтПереоценки) Тогда
		Для Ном = 1 По ТекущаяСтрока.КоличествоДоступныхСубконтоД Цикл
			Если ТипЗнч(ТекущаяСтрока["СубконтоД"+ Строка(Ном)]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				 ТекущаяСтрока["СубконтоД"+ Строка(Ном)] = ТекущаяСтрока.ОсновноеСредство.Объект; 
				 Прервать;
			 КонецЕсли;
		 КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.СчетРасходаОтПереоценки) Тогда
		Для Ном = 1 По ТекущаяСтрока.КоличествоДоступныхСубконтоР Цикл
			Если ТипЗнч(ТекущаяСтрока["СубконтоР"+ Строка(Ном)]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				 ТекущаяСтрока["СубконтоР"+ Строка(Ном)] = ТекущаяСтрока.ОсновноеСредство.Объект; 
				 Прервать;
			 КонецЕсли;
		 КонецЦикла;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента=Истина)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(ВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = ВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ИзменениеСчетаДохода(Идентификатор)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(Идентификатор);	
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеСчетаДохода(ТекущаяСтрока);
	
	СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДоходаОтПереоценки);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоД = СвСч.КоличествоСубконто;
	
	//БИТ Тртилек 03.07.2012
	Если ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		Для Ном = 1 По ТекущаяСтрока.КоличествоДоступныхСубконтоД Цикл
			Если ТипЗнч(ТекущаяСтрока["СубконтоД"+ Строка(Ном)]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				 ТекущаяСтрока["СубконтоД"+ Строка(Ном)] = ТекущаяСтрока.ОсновноеСредство.Объект; 
				 Прервать;
			 КонецЕсли;
		 КонецЦикла;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // ИзменениеСчетаДохода()

&НаСервере
Процедура ИзменениеСчетаРасхода(Идентификатор)
		
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(Идентификатор);	

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеСчетаРасхода(ТекущаяСтрока);

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетРасходаОтПереоценки);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоР = СвСч.КоличествоСубконто;
	
	//БИТ Тртилек 03.07.2012
	Если ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		Для Ном = 1 По ТекущаяСтрока.КоличествоДоступныхСубконтоР Цикл
			Если ТипЗнч(ТекущаяСтрока["СубконтоР"+ Строка(Ном)]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				 ТекущаяСтрока["СубконтоР"+ Строка(Ном)] = ТекущаяСтрока.ОсновноеСредство.Объект; 
				 Прервать;
			 КонецЕсли;
		 КонецЦикла;
	КонецЕсли;
	///БИТ Тртилек	
	
КонецПроцедуры // ИзменениеСчетаРасхода()

&НаСервере
Процедура СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, ИмяСубконто)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, ИмяСубконто);
		
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиОС()

&НаСервере
Процедура ПолучитьПараметрыОС(ТекущаяСтрока, Отказ = Ложь, ЭтоДобавлениеОС = Ложь)
	
	ЭтоМассив = (ТипЗнч(ТекущаяСтрока) = Тип("Массив"));
	ТекущаяСтрока = ?(ЭтоМассив, ТекущаяСтрока, Объект.ОсновныеСредства.Индекс(ТекущаяСтрока));	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтоНовыйДокумент = Параметры.Ключ.Пустая();
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ПолучитьПараметрыОС(ТекущаяСтрока, Отказ, ЭтоДобавлениеОС);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ЗаполнитьИнвентарныеНомера();
	ВосстановитьКоличествоДоступныхСубконто();
	 									  
КонецПроцедуры // ПолучитьПараметрыОС()

&НаСервере
Процедура ОбработатьПодборОС(ВыбранноеЗначение)
	
	ЭтоНовыйДокумент = Параметры.Ключ.Пустая();
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ЗаполнитьТчОсновныеСредстваПоДаннымПодбора(ВыбранноеЗначение);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ЗаполнитьИнвентарныеНомера();
	ВосстановитьКоличествоДоступныхСубконто();	
	
КонецПроцедуры // ОбработатьПодборОС()

// Процедура выполняет действия при изменении организации.
// 
&НаСервере
Процедура ПриИзмененииОрганизации()
	
	// Проверим принадлежность подразделения к выбранной организации.
	бит_ОбщегоНазначения.ПроверитьПринадлежностьАналитики(Объект
	                                                      ,
														  ,"Подразделение"
														  ,"Владелец"
														  ,"Организация"
														  ,"СправочникСсылка.ПодразделенияОрганизаций"
														  ,"В документе"
														  ,"Изменение значения реквизита Организация");
														  
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры

// Процедура выполняет заполнение данных по ОС во всех строках таблицы.
// 
&НаСервере
Процедура ЗаполнитьОС()
	
	СписокОС = Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(СписокОС, Истина);
	
	Если СписокОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим параметры по ОС.
	ПолучитьПараметрыОС(СписокОС);
	
КонецПроцедуры // ЗаполнитьОС()

&НаСервере
Функция ПолучитьКурсыВалютПоПериодам(КешСтарыеКурсы = Неопределено, флНовыеКурсы = Ложь)
	
	Если флНовыеКурсы Тогда
		
		НовыеКурсы = Новый Структура;
		НовыеКурсы.Вставить("Валюта", Объект.ВалютаДокумента);
		НовыеКурсы.Вставить("Кратность", Объект.КратностьДокумента);
		НовыеКурсы.Вставить("Курс", Объект.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("НовыеКурсы", НовыеКурсы);
		
	Иначе
		
		СтарыеКурсы = Новый Структура;
		СтарыеКурсы.Вставить("Валюта", КешСтарыеКурсы.ВалютаДокумента); 
		СтарыеКурсы.Вставить("Кратность", КешСтарыеКурсы.КратностьДокумента);
		СтарыеКурсы.Вставить("Курс", КешСтарыеКурсы.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("СтарыеКурсы", СтарыеКурсы);
		
	КонецЕсли; 
	
	МассивОС = Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ТаблицаДанных = ДокументОбъект.ПодготовитьТаблицуДатПринятияОС(МассивОС);
	ТаблицаПериодов = ТаблицаДанных.Скопировать(, "Период");
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсовВалют);
	
	СоответствиеКурсовИОС = Новый Соответствие;
	
	Для каждого Строка Из ТаблицаДанных Цикл
		СоответствиеКурсовИОС.Вставить(Строка.ОсновноеСредство, Курсы[Строка.Период])
	КонецЦикла; 

	Возврат СоответствиеКурсовИОС;
	
КонецФункции

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
&НаСервере
Функция ЗаполнитьПараметрыПодбора()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ПараметрыПодбора = ДокументОбъект.ЗаполнитьПараметрыПодбора();
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,ИмяТабличногоПоля,ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента,ИмяТабличногоПоля,"");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер,ИмяСубконто,ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,ИмяСубконто,фКоличествоСубконтоМУ);
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,ИмяСубконто,ЗначениеСубконто,фКоличествоСубконтоМУ);
      бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,ИмяСубконто,"",фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Контейнер,ИмяСубконто,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") 
		И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																		   
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
		Объект.ВидОперации = фКэшЗначений.ВидыОпераций.ОсновныеСредства;
	КонецЕсли;

КонецПроцедуры // ПриОткрытииПромежуточная()

// Процедура выполняет окончательные операции по открытию формы. 
// 
&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();

	УстановитьЗаголовокФормыДокумента();

КонецПроцедуры // ПриОткрытииОкончание()

#КонецОбласти

#КонецОбласти
