#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры
	
// Функция - инициализирует компоновщик, используемый для фильтрации структуры дерева.
//
// Параметры:
//  вхТекстЗапроса			 - строка - текст запроса.
//  Компоновщик				 - компоновщикСКД - компоновщик.
//  УникальныйИдентификатор	 - УникальныйИдентификатор - гуид.
// 
// Возвращаемое значение:
//  АдресКомпоновки - строка.
//
Функция ИнициализироватьКомпоновщик(вхТекстЗапроса, Компоновщик, УникальныйИдентификатор) Экспорт
	
	АдресКомпоновки = "";
	
	ТекстЗапроса = бит_МеханизмПолученияДанных.АдаптироватьТекстПостроителяДляКомпоновки(вхТекстЗапроса);
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		// Создаем СКД по запросу.
		СКД = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса);
		// Параметр Бюджет не должен быть доступен в настройках СКД.
		Если Найти(ТекстЗапроса, "&Бюджет") > 0 Тогда
			ПараметрСКД = СКД.Параметры.Добавить();
			ПараметрСКД.Имя						= "Бюджет";
			ПараметрСКД.Заголовок				= "Бюджет";
			ПараметрСКД.ТипЗначения				= Новый ОписаниеТипов("СправочникСсылка.бит_Бюджеты");
			ПараметрСКД.ВключатьВДоступныеПоля	= Ложь;
			ПараметрСКД.ОграничениеИспользования= Ложь;
			ПараметрСКД.Значение				= Справочники.бит_Бюджеты.ПустаяСсылка();
		КонецЕсли; 
		
		АдресКомпоновки = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
		
		// Инициализируем компоновщик.
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновки);
		Попытка
			Компоновщик.Инициализировать(ИсточникНастроек);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось инициализировать компоновщик для отбора! Попробуйте обновить текст запроса. Описание ошибки: %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
		бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийНастройкиФормыВвода(СКД 
																						,"НаборДанныхОсновной" 
																						,НастройкиИзмерений);	
		
	КонецЕсли; 
	
	Возврат АдресКомпоновки;
	
КонецФункции

// Процедура - восстанавливает отбор из хранилища значения.
//
// Параметры:
//  СохраненнаяНастройка - Структура - настройка.
//  Компоновщик			 - КомпоновщикСКД - компоновщик.
//  ТекстЗапроса		 - Строка - текст запроса.
//
Процедура ВосстановитьОтбор(СохраненнаяНастройка, Компоновщик, ТекстЗапроса) Экспорт

	Если СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") 
		И ТипЗнч(СохраненнаяНастройка.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных")  Тогда
		
		Если СохраненнаяНастройка.НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0 Тогда
			
			Компоновщик.ЗагрузитьНастройки(СохраненнаяНастройка.НастройкиКомпоновщика);
			
		КонецЕсли;  
		
	Иначе
		
		// Если сохранена еще старая настройка выполним конвертацию отбора построителя в отбор компоновщика.
		бит_МеханизмПолученияДанных.КонвертацияОтборПостроителяОтборКомпоновщика(СохраненнаяНастройка, Компоновщик, ТекстЗапроса);
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция - Конструктор параметра работы с деревом данных формы ввода бюджета.
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//  * ВыводитьСообщения			- Булево - Выводить ли сообщения при обработке дерева.
//  * АдресКомпоновки			- Строка - Адрес временного хранилища компановки данных формы.
//  * НастройкиКомпоновщика		- КомпоновщикНастроекКомпоновкиДанных - Настройки компановки данных формы.
//  * ОбновитьДерево			- Булево - Выполнить ли обновление дерева после восстановления.
//  * УдалитьЛишнее				- Булево - Выполнить поиск и удаление строк, для которых не удалось найти ячейки в дереве.
//  * Периодичность				- ПеречислениеСсылка.бит_ПериодичностьПланирования - Периодичность планирования.
//  * ПродолжительностьИнтервала- Число - Продолжительность интервала планирования (количество периодов планирования).
//  * ДатаНачалаПланирования	- Дата - Начало интервала планирования.
//  * ДатаОкончанияПланирования	- Дата - Дата окончания планирования.
//
Функция НовыеПараметрыДерева() Экспорт
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ВыводитьСообщения",			Ложь);
	ПараметрыПолучения.Вставить("АдресКомпоновки",				"");
	ПараметрыПолучения.Вставить("НастройкиКомпоновщика",		Новый КомпоновщикНастроекКомпоновкиДанных);
	ПараметрыПолучения.Вставить("ОбновитьДерево",				Истина);
	ПараметрыПолучения.Вставить("УдалитьЛишнее",				Ложь);
	ПараметрыПолучения.Вставить("Периодичность",				Перечисления.бит_ПериодичностьПланирования.ПустаяСсылка());
	ПараметрыПолучения.Вставить("ПродолжительностьИнтервала",	0);
	ПараметрыПолучения.Вставить("ДатаНачалаПланирования",		'0001-01-01');
	ПараметрыПолучения.Вставить("ДатаОкончанияПланирования",	'0001-01-01');

	Возврат ПараметрыПолучения;
	
КонецФункции

// Функция подготавливает параметры проведения.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.бит_ФормаВводаБюджета - ссылка на документ.
//  Отказ          - Булево - признак обнаружения ошибки и отказа от дальнейших действий.
//
// Возвращаемое значение:
//  Структура - структура параметров проведения.
//
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	Результат    = Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты = Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ бит_ОбщегоНазначения.ВалютаУпрУчетаУстановлена(Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;

	КоэффициентСуммы = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(Реквизиты.ЕдиницаИзмеренияСумм);
	КурсыВалют 		 = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(Реквизиты.Регистратор, 
											Реквизиты.Период, Новый Структура("Документ, Регл, Упр, Сценарий"));
		
	Реквизиты.Вставить("КоэффициентСуммы", КоэффициентСуммы);
	Реквизиты.Вставить("КурсыВалют",	   КурсыВалют);
	
	Запрос.УстановитьПараметр("КоэффициентСуммы",			Реквизиты.КоэффициентСуммы);
	Запрос.УстановитьПараметр("ФиксированныйМакет",			Реквизиты.ФиксированныйМакет);
	Запрос.УстановитьПараметр("РежимФормированияДвижений",	Реквизиты.РежимФормированияДвижений);
	
	Запрос.УстановитьПараметр("РежимФормированияДвижений",	Реквизиты.РежимФормированияДвижений);
	
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаВременнаяТаблицаДокумента(НомераТаблиц, Реквизиты)
				 + ТекстЗапросаТаблицыВалютногоПерерасчета(НомераТаблиц, Реквизиты)
				 + ТекстЗапросаТаблицаКонтрольныеЗначения(НомераТаблиц, Реквизиты);

	Результат = Запрос.ВыполнитьПакет();
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	ПодготовитьТаблицыДокументаРасчетыВВалюте(ПараметрыПроведения, Реквизиты);	
	
	ТаблицаОборотыПоБюджетам = Новый ТаблицаЗначений();
	ПроводитьПослеУтверждения = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения");
	Если ПроводитьПослеУтверждения И Реквизиты.РежимПринятияКУчету = 1 Тогда
		ПараметрыСтатуса = бит_Визирование.ПолучитьСтатусОбъекта(ДокументСсылка);
		ТекущийСтатус = ПараметрыСтатуса.Статус;
		Если ТекущийСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Утвержден Тогда
			ТаблицаОборотыПоБюджетам = ПараметрыПроведения.ТаблицаКонтрольныеЗначения.Скопировать();
		КонецЕсли;
	Иначе
		ТаблицаОборотыПоБюджетам = ПараметрыПроведения.ТаблицаКонтрольныеЗначения.Скопировать();
	КонецЕсли;
	ПараметрыПроведения.Вставить("ТаблицаОборотыПоБюджетам", ТаблицаОборотыПоБюджетам);

	Возврат ПараметрыПроведения;
	
КонецФункции 
 
// Формирует движения по регистру накопления: Контрольные значения бюджетов (БИТ).
//
// Параметры:
//  ТаблицаКонтрольныеЗначения	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты					 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения					 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ						 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияКонтрольныеЗначенияБюджетов(ТаблицаКонтрольныеЗначения, Реквизиты, Движения, Отказ) Экспорт
	
	КонтрольныеЗначения = Движения.бит_КонтрольныеЗначенияБюджетов;    
	Если ТаблицаКонтрольныеЗначения.Количество() > 0 Тогда
		ИсключаемыеПоля = Новый Массив;
		ИсключаемыеПоля.Добавить("Сценарий");
		ИсключаемыеПоля.Добавить("СтатьяОборотов");
		
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
		ИзмеренияКонтроля  = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(ИсключаемыеПоля,,,НастройкиИзмерений);
		
		// Формирование и контроль новых записей контрольных значений.
		Результат = ПодготовитьТаблицуКонтрольныхЗначений(ТаблицаКонтрольныеЗначения, ИзмеренияКонтроля, Реквизиты);
		
		ПараметрыКонтроля = Новый Структура;
		ПараметрыКонтроля.Вставить("ИзмеренияКонтроля",	  ИзмеренияКонтроля);
		ПараметрыКонтроля.Вставить("Сценарий" ,			  Реквизиты.Сценарий);
		ПараметрыКонтроля.Вставить("СверхБюджета",		  Реквизиты.СверхБюджета);
		ПараметрыКонтроля.Вставить("РежимКонтроля",		  "Бюджет");
		ПараметрыКонтроля.Вставить("Объект",			  Реквизиты.Регистратор);
		ПараметрыКонтроля.Вставить("КонтролироватьБюджет",Истина);
		
		бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат, КонтрольныеЗначения, ПараметрыКонтроля, Отказ, "");
		Для каждого СтрокаТаблицы Из КонтрольныеЗначения Цикл
			СтрокаТаблицы.СценарийКонтролируемый = Реквизиты.Сценарий;
		КонецЦикла; 
	КонецЕсли;
	КонтрольныеЗначения.Записывать = Истина;
	
КонецПроцедуры

// Формирует движения по регистру накопления: Обороты по бюджетам (БИТ).
//
// Параметры:
//  ДанныеБюджета	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияОборотыПоБюджетам(ДанныеБюджета, Реквизиты, Движения, Отказ) Экспорт 
		
	Движения.бит_ОборотыпоБюджетам.Загрузить(ДанныеБюджета);
	Движения.бит_ОборотыПоБюджетам.Записывать = Истина;
	
КонецПроцедуры

// Формирует движения по регистру бухгалтерии: Журнал проводок (бюджетирование).
//
// Параметры:
//  ДанныеБюджета	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		 - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		 - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			 - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияБюджетирование(ДанныеБюджета, Реквизиты, Движения, Отказ) Экспорт 
	
	Если ДанныеБюджета.Количество() > 0 Тогда
		бит_Бюджетирование.СформироватьПроводкиБюджетирования(ДанныеБюджета,
			Движения.бит_Бюджетирование, Ложь);
	КонецЕсли;
	Движения.бит_Бюджетирование.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - Заполнить таблицу данных.
//
// Параметры:
//  ТабличныйДокумент	 - табличный документ.
//  ИдентификаторФормы - уникальный идентификатор.
// 
// Возвращаемое значение:
//  ХранилищеЗначений.
//
Функция ЗаполнитьТаблицуДанных(ТабличныйДокумент, ИдентификаторФормы) Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Расшифровка");
	ТаблицаДанных.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДанных.Колонки.Добавить("ИмяАргумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДанных.Колонки.Добавить("ФормулаВычислена", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ЗначениеВычисленияФормулы", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ЗначимаяОбласть", Новый ОписаниеТипов("Булево"));
	
	Для каждого Обл Из ТабличныйДокумент.Области Цикл
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Обл);
		СтрокаТаблицы.ИмяАргумента = Обл.Имя;
		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) 
			 И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			 И ( Обл.Расшифровка.Вид = "Формула" 
			     ИЛИ Обл.Расшифровка.Вид = "Значение") Тогда
				 
			СтрокаТаблицы.ЗначимаяОбласть = Истина;	
		Иначе	
			СтрокаТаблицы.ЗначимаяОбласть = Ложь;	 
		КонецЕсли;
		
		Для каждого ИмяАргумента Из Обл.Расшифровка.Аргументы Цикл
			
			СтрокаТаблицыАрг = ТаблицаДанных.Добавить();
			СтрокаТаблицыАрг.Имя 				= Обл.Имя;
			СтрокаТаблицыАрг.ИмяАргумента 		= ИмяАргумента;
			СтрокаТаблицыАрг.ЗначимаяОбласть 	= Ложь;	
		КонецЦикла;
	КонецЦикла;
	ТаблицаДанных.Индексы.Добавить("Имя,ИмяАргумента");
	ТаблицаДанных.Индексы.Добавить("ИмяАргумента");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДанных,ИдентификаторФормы);
	
КонецФункции 

// Процедура - Выполнить расчеты по зависимостям.
//
// Параметры:
//  ТабличныйДокумент	 - Табличный документ. 
//  ТаблицаДанных		 - таблица значений.
//
Процедура ВыполнитьРасчетыПоЗависимостям(ТабличныйДокумент,ТаблицаДанных) Экспорт 
	
	// Проверка и добавления второго индекса для старых бюджетов.
	Если ТаблицаДанных.Индексы.Количество() = 1 Тогда
		ТаблицаДанных.Индексы.Добавить("ИмяАргумента");
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.ЗначимаяОбласть Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Расшифровка.Формула) Тогда
				ВычислитьФормулу(СтрокаТаблицы, ТаблицаДанных);
				ВычислитьЗависимыеФормулы(ТаблицаДанных,СтрокаТаблицы.Имя);				 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого Обл Из ТабличныйДокумент.Области Цикл
		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) 
			И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			И ( Обл.Расшифровка.Вид = "Формула" 
			ИЛИ Обл.Расшифровка.Вид = "Значение") Тогда
			
			СтрОтбор = Новый Структура("Имя,ИмяАргумента",Обл.Имя,Обл.Имя);
			МассивСтрок = ТаблицаДанных.НайтиСтроки(СтрОтбор);
			Если МассивСтрок.Количество()>0 Тогда
				СтрокаТаблицы = МассивСтрок[0];
				Обл.Значение = СтрокаТаблицы.Значение;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция - Вычислить зависимые формулы
//
// Параметры:
//  ТаблицаДанных		 - таблица значений.
//  ИмяЯчейки			 - строка.
//  ОбработанныеОбласти	 - области табличного документа.
//  УровеньРекурсии		 - число.
// 
// Возвращаемое значение:
//  Результат - структура.
//
Функция ВычислитьЗависимыеФормулы(ТаблицаДанных, ИмяЯчейки,ОбработанныеОбласти = Неопределено, УровеньРекурсии = 0) Экспорт
	
	// Проверка и добавления второго индекса для старых бюджетов.
	Если ТаблицаДанных.Индексы.Количество() = 1 Тогда
		ТаблицаДанных.Индексы.Добавить("ИмяАргумента");
	КонецЕсли;

	Результат = Новый Структура("Статус, ИзмененныеОбласти, МассивИзменений","ОК", Новый Массив, Новый Массив);		
	Если ОбработанныеОбласти = Неопределено Тогда
		ОбработанныеОбласти = Новый Массив;
	КонецЕсли; 
	ОбработанныеОбласти.Добавить(ИмяЯчейки);
	Если УровеньРекурсии > 1000 Тогда
		ТекстСообщения = НСтр("ru = 'Превышен уровень рекурсии! Возможно наличие перекрестных ссылок в формулах. Проверьте формулы в ячейках: %1.'");
		ОбработанныеОбласти = бит_РаботаСКоллекциямиКлиентСервер.УдалитьПовторяющиесяЭлементыМассива(ОбработанныеОбласти);
		СтрЯчейки = "";
		Для каждого Имя Из ОбработанныеОбласти Цикл
			
			СтрОтбор = Новый Структура("Имя,ИмяАргумента",Имя,ИмяЯчейки);
			МассивСтрок = ТаблицаДанных.НайтиСтроки(СтрОтбор);
			Если МассивСтрок.Количество()>0 Тогда
				СтрокаТаблицыФормула = МассивСтрок[0];
				Если СтрокаТаблицыФормула.ЗначимаяОбласть Тогда
					
					ПредставлениеЯчейки = бит_БюджетированиеКлиентСервер.ПользовательскоеПредставлениеОбласти(СтрокаТаблицыФормула);
					СтрЯчейки = СтрЯчейки +?(ПустаяСтрока(СтрЯчейки),"",Символы.ПС) + ПредставлениеЯчейки;	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла; 
		ТекстСообщения = СтрШаблон(ТекстСообщения, СтрЯчейки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Результат.Статус = "Ошибка";
		Возврат Результат;
	КонецЕсли; 
	УровеньРекурсии = УровеньРекурсии + 1;
	
	СтрОтбор = Новый Структура("ИмяАргумента",ИмяЯчейки);
	МассивАргументов = ТаблицаДанных.НайтиСтроки(СтрОтбор);
	Для каждого СтрокаФормула Из МассивАргументов Цикл
		
		Если СтрокаФормула.Имя = СтрокаФормула.ИмяАргумента Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяЯчейкиФормула = СтрокаФормула.Имя;
		СтрОтбор = Новый Структура("Имя,ИмяАргумента",ИмяЯчейкиФормула,ИмяЯчейкиФормула);
		МассивСтрок = ТаблицаДанных.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество()>0 Тогда
			СтрокаТаблицыФормула = МассивСтрок[0];
			СтрокаТаблицыФормулаР = СтрокаТаблицыФормула.Расшифровка;
			Если СтрокаТаблицыФормулаР.Вид = "Формула" ИЛИ СтрокаТаблицыФормулаР.Вид = "Значение" Тогда
				
				ЗначениеВычисления = ВычислитьФормулу(СтрокаТаблицыФормула,ТаблицаДанных);
				СтруктураПередачи = Новый Структура("Имя,Значение", ИмяЯчейкиФормула, ЗначениеВычисления);
				Результат.МассивИзменений.Добавить(СтруктураПередачи);
				
				Если СтрокаТаблицыФормулаР.Вид = "Значение" Тогда
					Результат.ИзмененныеОбласти.Добавить(СтрокаТаблицыФормула.Имя);
				КонецЕсли; 				
				РезультатВложенный = ВычислитьЗависимыеФормулы(ТаблицаДанных, ИмяЯчейкиФормула, ОбработанныеОбласти, УровеньРекурсии);
				
				Для каждого Вложенный Из РезультатВложенный.МассивИзменений Цикл
					СтруктураПередачи = Новый Структура("Имя,Значение", Вложенный.Имя, Вложенный.Значение);
					Результат.МассивИзменений.Добавить(СтруктураПередачи);
				КонецЦикла; 
				
				Для каждого ТекОбл Из РезультатВложенный.ИзмененныеОбласти Цикл
					Результат.ИзмененныеОбласти.Добавить(ТекОбл);
				КонецЦикла; 
				Если РезультатВложенный.Статус = "Ошибка" Тогда
					Результат.Статус = "Ошибка";
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДерева

// Осуществляет вывод шапки дерева данных. 
// 
// Параметры:
//  ТабДок - ТабличныйДокумент.
//  Области - Структура - Области макета.
//  НастрФормы - Структура - Настройки формы ввода.
// 
Функция ВывестиШапку(ТабДок, Области, НастрФормы, СтрПар)

	ДатаНачалаПланирования    = СтрПар.ДатаНачалаПланирования;
	ДатаОкончанияПланирования = СтрПар.ДатаОкончанияПланирования;
	
	// Изменение кода. Начало. 21.12.2016{{ BF-454
	УчетПоКоличеству = НастрФормы.УчетКоличество;
	УчетПоСумме      = НастрФормы.УчетСумма;
	// Изменение кода. Конец. 21.12.2016}}
	
	// Признак того, что нужно обработать выходные дни.
	флОбработатьВыходные = ?(СтрПар.Периодичность = Перечисления.бит_ПериодичностьПланирования.День 
	                          И НЕ НастрФормы.ОтображениеВыходных = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.Обычный, Истина, Ложь);
	
							  
					  
							  
	// Колонка кодификатор.
	ТабДок.Вывести(Области.Заголовок_Кодификатор);
	
	// Имена измерений.
	Для каждого Имя Из НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать] Цикл
		
		Области.Заголовок_Измерение.Параметры.ИмяИзмерения = НастрФормы.Измерения[Имя].Синоним;
		ТабДок.Присоединить(Области.Заголовок_Измерение);
	
	КонецЦикла; 
	
	// Фиксация области измерений.
	// Изменение кода. Начало. 21.12.2016{{ BF-454.
	ТабДок.ФиксацияСверху = 2;
	// Изменение кода. Конец. 21.12.2016}}
	ТабДок.ФиксацияСлева  = НастрФормы.КоличествоРазворачивать+1;
	
	// Вывод заголовка периодов.
	Периодичность        = СтрПар.Периодичность;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//Если НЕ ЗначениеЗаполнено(ДатаОкончанияПланирования) Тогда
	//	
	//	КоличествоИнтервалов = СтрПар.ПродолжительностьИнтервала;
	//	
	//Иначе
	//	
	//	КоличествоИнтервалов = бит_Бюджетирование.РазностьДат(ДатаНачалаПланирования, ДатаОкончанияПланирования, Периодичность)+1;
	//	
	//КонецЕсли; 
	КоличествоИнтервалов = СтрПар.ПродолжительностьИнтервала;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	ИмяОбластиПериод = ?(УчетПоКоличеству И УчетПоСумме, "Заголовок_ПолеДубль", "Заголовок_Поле");
	
	// Проверим, следует ли создавать дополнительные итоговые колонки.
	ПериодыИтогов = Новый Массив;
	Для каждого СтрНастройки Из НастрФормы.ДополнительныеИтоги Цикл
	
		Если Перечисления.бит_ПериодичностьПланирования.Индекс(СтрНастройки.Периодичность) > Перечисления.бит_ПериодичностьПланирования.Индекс(Периодичность) Тогда
		
			  ПериодыИтогов.Добавить(СтрНастройки);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	ВыходныеДни = Новый Соответствие;
	Если флОбработатьВыходные Тогда
		
		// Получим календарь по которому будем проверять выходные.
		НастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ДатаНачалаПланирования,,Новый Структура,"Ошибки");
		ИмяНастройкиКалендарь	 = ПланыВидовХарактеристик.бит_НастройкиПрограммы.Календарь;
	    Календарь = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ИмяНастройкиКалендарь);
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			
			МассивВидов = Новый Массив;
			МассивВидов.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота);
			МассивВидов.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
			МассивВидов.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
			
			ДатаОкончанияКалендаря = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачалаПланирования,КоличествоИнтервалов,Периодичность);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Календарь);
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаПланирования);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияКалендаря);
			Запрос.УстановитьПараметр("МассивВидов", МассивВидов);
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТабКалендарь.Дата
			               |ИЗ
			               |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ТабКалендарь
			               |ГДЕ
			               |	ТабКалендарь.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
			               |	И ТабКалендарь.ВидДня В(&МассивВидов)
			               |	И ТабКалендарь.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
						   
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				ВыходныеДни.Вставить(Выборка.Дата, Истина);
			
			КонецЦикла; 
			
			
		Иначе	
			
			флОбработатьВыходные = Ложь;
			ТекстСообщения =  НСтр("ru = 'Невозможно определить выходные дни, т.к. не установлен Календарь в настройках программы (БИТ).'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Периоды = Новый Массив;
	НомИт = 1;
	Для й=1 По КоличествоИнтервалов Цикл
	
		ТекущийПериод = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачалаПланирования,й-1,Периодичность);
		
		Синоним = бит_Бюджетирование.СформироватьПредставлениеПериода(ТекущийПериод,Периодичность);		
		ПараметрыОписанияПериода 		 = бит_Бюджетирование.НовыеПараметрыОписаниеПериода();
		ПараметрыОписанияПериода.Период  = ТекущийПериод;
		ПараметрыОписанияПериода.Синоним = Синоним;
		ТекОписаниеПериода = бит_Бюджетирование.ОписаниеПериода(ПараметрыОписанияПериода);
		
		Если флОбработатьВыходные Тогда
		
			Если ВыходныеДни[ТекущийПериод] = Истина Тогда
			
				   Если НастрФормы.ОтображениеВыходных = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.НеОтображать Тогда
				   
				   	    Продолжить;
				   
				   КонецЕсли; 
				   
				   ТекОписаниеПериода.ЭтоВыходной = Истина;
				   
			КонецЕсли; 
		
		КонецЕсли; 
		
		Периоды.Добавить(ТекОписаниеПериода);
		
		// Добавление дополнительных итоговых колонок по периодам.
		КонецТекПериода = бит_Бюджетирование.ПолучитьКонецПериода(ТекущийПериод, Периодичность);		
		Для каждого СтрНастройки Из ПериодыИтогов Цикл
			
			КонецИтПериода = бит_Бюджетирование.ПолучитьКонецПериода(ТекущийПериод, СтрНастройки.Периодичность);
			
			Если КонецТекПериода = КонецИтПериода Тогда
			
				Синоним = бит_Бюджетирование.СформироватьПредставлениеПериода(ТекущийПериод, СтрНастройки.Периодичность);
				НачалоИтПериода = бит_Бюджетирование.ПолучитьНачалоПериода(ТекущийПериод, СтрНастройки.Периодичность);
				
				ПараметрыОписанияПериода = бит_Бюджетирование.НовыеПараметрыОписаниеПериода();
				ПараметрыОписанияПериода.Период  			= НачалоИтПериода;
				ПараметрыОписанияПериода.Синоним 			= Синоним;
				ПараметрыОписанияПериода.Имя 				= "Ит_"+Формат(НомИт,"ЧГ=");
				ПараметрыОписанияПериода.ЭтоИтог 			= Истина;
				ПараметрыОписанияПериода.ЭтоНарастающийИтог = СтрНастройки.НарастающийИтог;
				ПараметрыОписанияПериода.КонецПериода 		= КонецИтПериода;
				ПараметрыОписанияПериода.Периодичность		= СтрНастройки.Периодичность;
				
				ТекОписаниеПериода = бит_Бюджетирование.ОписаниеПериода(ПараметрыОписанияПериода);
		        Периоды.Добавить(ТекОписаниеПериода);				
				
				НомИт = НомИт + 1;
			КонецЕсли; 
		
		КонецЦикла; // ПериодыИтогов.
		
	КонецЦикла; // По интервалам.

	// Колонки итогов.
	Если НастрФормы.ВыводитьОбщиеИтоги Тогда
		ПараметрыОписанияПериода = бит_Бюджетирование.НовыеПараметрыОписаниеПериода();
		ПараметрыОписанияПериода.Период  = Дата('00010101');
		ПараметрыОписанияПериода.Синоним = "Итого";
		ПараметрыОписанияПериода.Имя 	 = "Итог";
		ПараметрыОписанияПериода.ЭтоИтог = Истина;
		ТекОписаниеПериода = бит_Бюджетирование.ОписаниеПериода(ПараметрыОписанияПериода);
		Периоды.Добавить(ТекОписаниеПериода);
	КонецЕсли; 
	
	ОбластьПериод = Области[ИмяОбластиПериод];
	ном = 1;
	Для каждого ТекОписание Из Периоды Цикл
		
		ОбластьПериод.Параметры.ИмяПоля = ТекОписание.Синоним;
		ИмяЯчейки = "Период_"+ном;
		
		расш = бит_Бюджетирование.РасшифровкаЯчейки(ИмяЯчейки, Неопределено, ТекОписание.Период, "Период");
		расш.Периодичность = ТекОписание.Периодичность;
		
		яч = ОбластьПериод.Область(1,1,1,1);
		яч.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		яч.Имя = ИмяЯчейки;
		яч.Расшифровка = расш;
		
		Если ТекОписание.ЭтоВыходной 
			 И НастрФормы.ОтображениеВыходных = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.Выделять Тогда
		
			 яч.ЦветТекста = WebЦвета.Красный;
			 
		Иначе
			 
			 яч.ЦветТекста = WebЦвета.Черный;
			 
		КонецЕсли; 
		
		ТабДок.Присоединить(ОбластьПериод);
		Ном = Ном + 1;
	КонецЦикла; 
	
	Возврат Периоды;
	
КонецФункции

// Выводит групировки в дерево данных. 
// 
// Параметры:
//  СтрокаВерх - СтрокаДереваЗначений.
//  ТабДок - ТабличныйДокумент.
//  Области - Структура.
//  НастрФормы - Структура.
//  Периоды - Массив.
//  Ном - Число.
//  СтрПар - Структура.
// 
Функция ОбойтиДерево(СтрокаВерх, ТабДок, Области, НастрФормы, Периоды, Ном, СтрПар)
	
	ИменаЯчеек = Новый Соответствие;
	ИзмеренияРазворачивать  = НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать];
	КоличествоРазворачивать = НастрФормы.КоличествоРазворачивать;
	ЭтоНастройкаПоБюджету   = ?(ЗначениеЗаполнено(НастрФормы.Бюджет), Истина, Ложь);
	ИспользоватьКоэфициенты = ?(ЭтоНастройкаПоБюджету И НастрФормы.Настройка.ИспользоватьКоэффициентыСтатейБюджета, Истина, Ложь);
	
	// Структура для хранения данных, используемых при анализе необходимости объединения ячеек.
	ДанныеВрем = бит_Бюджетирование.КонструкторСтруктурыПроверкиОбъединения(ИзмеренияРазворачивать);
	
	// Кэш для хранения результатов поиска подчиненных элементов.
	КэшЭтоГруппа = Новый Соответствие;
	
	ИмяПоляКодификатор = "";
	Если ТипЗнч(СтрокаВерх) = Тип("ДеревоЗначений") Тогда
		Колонки = СтрокаВерх.Колонки;
	Иначе	
		Колонки = СтрокаВерх.Владелец().Колонки;
	КонецЕсли; 
	Для Каждого Колонка Из Колонки Цикл
		Если СтрЧислоВхождений(Колонка.Имя, "_Кодификатор") <> 0  Тогда
			ИмяПоляКодификатор = "_Кодификатор";
		ИначеЕсли СтрЧислоВхождений(Колонка.Имя, "Кодификатор") <> 0  Тогда	
			ИмяПоляКодификатор = "Кодификатор";
		КонецЕсли;	
	КонецЦикла; 	
	
	Для каждого СтрокаДерева Из СтрокаВерх.Строки Цикл
		
		Уровень = СтрокаДерева.Уровень();
		флЕстьПодчиненные = ?(СтрокаДерева.Строки.Количество() > 0, Истина, Ложь);
		// Если настройка не по бюджету, коэфициент всегда 1
		// для настройки по бюджету, для групп коэфициент 1, для статей берем указанный в статье.
		Коэф = ?(ИспользоватьКоэфициенты, ?(СтрокаДерева.СтатьяБюджета.ЭтоГруппа, 1, СтрокаДерева.СтатьяБюджета.Коэффициент), 1);
		
		// Если нет подчиненных строк - строку, содержащую группы выводить не нужно.
		флЕстьГруппы = Ложь;
		Для каждого Имя Из ИзмеренияРазворачивать Цикл
			
			Если СтрПар.ЭтоНовыйЗапрос Тогда
				// Новый формат запроса может содержать несколько измерений.
				ТекЗначение = СтрокаДерева[Имя];
				
				Если ЭтоНастройкаПоБюджету 
					И ВРег(Имя) = ВРег("СтатьяОборотов") 
					И НЕ ЗначениеЗаполнено(ТекЗначение) Тогда
					
					Если СтрокаДерева.СтатьяБюджета.ЭтоГруппа Тогда
						ТекЗначение = СтрокаДерева.СтатьяБюджета;
					Иначе	
						ТекЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДерева.СтатьяБюджета, "СтатьяОборотов");
					КонецЕсли; 
				КонецЕсли; 
			Иначе	
				// Формат запроса редакции 2.8 содержал, только одно измерение с именем Ссылка.
				ТекЗначение = СтрокаДерева.Ссылка; 
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ТекЗначение) И ТекЗначение.ЭтоГруппа Тогда
				флЕстьГруппы = Истина;
				Прервать;
			КонецЕсли; 			
		КонецЦикла;  // По именам измерений.	
		
		Если флЕстьГруппы И НЕ флЕстьПодчиненные Тогда
			Продолжить;
		КонецЕсли; 
		
		// Если в подчиненных строках только группы - выводить не нужно.
		флТолькоГруппы = Истина;
		бит_Бюджетирование.ПроверитьНаличиеПодчиненныхЭлементов(СтрокаДерева, ИзмеренияРазворачивать, СтрПар.ЭтоНовыйЗапрос, флТолькоГруппы); 			
        Если флТолькоГруппы Тогда
			Продолжить;
		КонецЕсли; 
		
		// Измерения
		ЗначенияИзмерений = Новый Структура;
		ИдИзмерений = "";
		флЕстьГруппа = Ложь;
		Сч = 1;
		Для каждого Имя Из ИзмеренияРазворачивать Цикл
			
			Если Сч = 1  Тогда
				// Вывод кодификатора для первого измерения.
				Если СтрПар.ЭтоНовыйЗапрос Тогда
					Области.Строка_Кодификатор.Параметры.Кодификатор = СтрокаДерева[Имя + ИмяПоляКодификатор];
				Иначе	
					Области.Строка_Кодификатор.Параметры.Кодификатор = СтрокаДерева.Кодификатор;
				КонецЕсли; 
				Области.Строка_Кодификатор.Параметры.р = Новый Структура("Уровень", Уровень);
				ТабДок.Вывести(Области.Строка_Кодификатор, Уровень);
				
			КонецЕсли; 
			
			Если СтрПар.ЭтоНовыйЗапрос Тогда
				ТекЗначение = СтрокаДерева[Имя];
				Если НЕ ЗначениеЗаполнено(ТекЗначение) И СтрСравнить(Имя, "СтатьяОборотов") = 0 И ЭтоНастройкаПоБюджету  Тогда
					Если СтрокаДерева.СтатьяБюджета.ЭтоГруппа Тогда
						ТекЗначение = СтрокаДерева.СтатьяБюджета;
					КонецЕсли; 
				КонецЕсли; 
			Иначе	
				// Формат запроса редакции 2.8 содержал, только одно измерение с именем Ссылка.
				ТекЗначение = СтрокаДерева.Ссылка; 
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ТекЗначение) И ТекЗначение.ЭтоГруппа Тогда
			
				флЕстьГруппа = Истина;
			
			КонецЕсли; 
			
			Области.Строка_Измерение.Параметры.ЗначениеИзмерения = ТекЗначение;
			Если ЗначениеЗаполнено(ТекЗначение) Тогда
				
			    ЗначенияИзмерений.Вставить(Имя, ТекЗначение);
				ИдИзмерений = ИдИзмерений+?(ПустаяСтрока(ИдИзмерений),"","_")+СтрЗаменить(Строка(ТекЗначение.УникальныйИдентификатор()),"-","");
				
			Иначе	
				
				// Если значение измерения по каким-то причинам не заполнено, 
				// то необходимо сгенерить ИД, чтобы имя ячейки было уникальным.
				НовыйИД = Строка(Новый УникальныйИдентификатор);
				ИдИзмерений = ИдИзмерений+?(ПустаяСтрока(ИдИзмерений),"","_")+СтрЗаменить(НовыйИД,"-","");
				
			КонецЕсли; 
			
			ИмяЯчейки = Имя+"_"+Формат(Ном,"ЧГ=");
			Обл = Области.Строка_Измерение.Область(1,1,1,1);
			Обл.Имя = Имя+"_"+Формат(Ном,"ЧГ=");
			Области.Строка_Измерение.Параметры.р = бит_Бюджетирование.РасшифровкаЯчейки(ИмяЯчейки, Неопределено, Неопределено,
													"Измерение", ,ТекЗначение);
			ТабДок.Присоединить(Области.Строка_Измерение, Уровень);
			
			Если НастрФормы.ОбъединятьЯчейки И Сч < КоличествоРазворачивать Тогда
				
				// Объединяем ячейки с повторяющимися значениями аналитик.
				бит_Бюджетирование.ПроверитьВыполнитьОбъединениеЯчеек(ТабДок, ДанныеВрем, Имя, ТекЗначение, флЕстьПодчиненные);
				
			КонецЕсли; 
			
			Сч = Сч +1;
		КонецЦикла;  // По именам измерений.
		
		// Ячейки данных.
		флДваРесурса = (НастрФормы.УчетСумма И НастрФормы.УчетКоличество);
		ИмяСтроки  = ?(НЕ флЕстьПодчиненные И НЕ флЕстьГруппа , "Строка", "СтрокаРасчетная");
		ИмяКолонки = ?(флДваРесурса, "ПолеДубль", ?(НастрФормы.УчетКоличество,"ПолеКоличество","ПолеСумма"));
		ИмяОбласти = ИмяСтроки+"_"+ИмяКолонки;
		ИмяОбластиИтог = "СтрокаРасчетная_"+ИмяКолонки;
		ВидЯчейки  = ?(НЕ флЕстьПодчиненные И НЕ флЕстьГруппа , "Значение", "Формула");
		
	    Префиксы = Новый Структура("ИмяСумма, ИмяКоличество", "СП","КП");
		
		Арг   = Новый Структура;  // Хранит аргументы для формул.
		Имена = Новый Структура;  // Хранит имена различных типов ячеек.
		Для каждого КиЗ Из Префиксы Цикл
		
			Арг.Вставить(КиЗ.Значение, Новый Массив);
			Имена.Вставить(КиЗ.Значение, "");
		
		КонецЦикла; 
		
		Для каждого ТекОписание Из Периоды Цикл
			
			// Подготовка имен.
			Для каждого КиЗ Из Префиксы Цикл
				
				ТипИмени = КиЗ.Ключ;
				Префикс  = КиЗ.Значение;
				
				ТекИмяБезАналитики = ТекОписание[ТипИмени];
				ТекИмяЯчейки = ТекОписание[ТипИмени]+"_"+ИдИзмерений;
				Имена[Префикс] = ТекИмяЯчейки;
				Если ИменаЯчеек[ТекИмяБезАналитики] = Неопределено Тогда
					
					ИменаЯчеек[ТекИмяБезАналитики] = Новый Массив;
					
				КонецЕсли; 
				
			   ИменаЯчеек[ТекИмяБезАналитики].Добавить(Новый Структура("Имя, Коэф", Имена[Префикс], Коэф));			   
			   Если НЕ ТекОписание.ЭтоИтог Тогда
			   
			   	  Арг[Префикс].Добавить(Имена[Префикс]);
			   
			   КонецЕсли; 
			   
			КонецЦикла; // Префиксы.
			
			Если флДваРесурса Тогда
				
				// Форма с двумя ресурсами.
				
				Если ТекОписание.ЭтоИтог Тогда
					
					// Итоговые колонки.
					Обл = Области[ИмяОбластиИтог];
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = Имена.КП;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Аргументы 	   = Арг.КП;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 2;
					ПараметрыДоработки.Имя 			   = Имена.СП;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Аргументы 	   = Арг.СП;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ТабДок.Присоединить(Обл);					
				Иначе	
					
					// Колонки для ввода данных.
					
					Обл = Области[ИмяОбласти];
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = Имена.КП;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 2;
					ПараметрыДоработки.Имя 			   = Имена.СП;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					
					ТабДок.Присоединить(Обл);
				КонецЕсли; 
			Иначе	
				
				// Форма с одним ресурсом.
				ИмяЯчейки = ?(НастрФормы.УчетКоличество, Имена.КП, Имена.СП);
				Если ТекОписание.ЭтоИтог Тогда
					
					// Итоговая колонка.
					Обл = Области[ИмяОбластиИтог];
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = ИмяЯчейки;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = "Формула";
					ПараметрыДоработки.Аргументы 	   = ?(НастрФормы.УчетКоличество, Арг.КП, Арг.СП);
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					ТабДок.Присоединить(Обл);
				Иначе	
					
					// Колонка для ввода данных.
					Обл = Области[ИмяОбласти];
					ПараметрыДоработки = бит_Бюджетирование.НовыеПараметрыДоработкиЯчейки();
					ПараметрыДоработки.ТД 			   = Обл;
					ПараметрыДоработки.НомСтроки 	   = 1;
					ПараметрыДоработки.НомСтолбца 	   = 1;
					ПараметрыДоработки.Имя 			   = ИмяЯчейки;
					ПараметрыДоработки.Измерения 	   = ЗначенияИзмерений;
					ПараметрыДоработки.ОписаниеПериода = ТекОписание;
					ПараметрыДоработки.Вид 			   = ВидЯчейки;
					бит_Бюджетирование.ДоработатьЯчейку(ПараметрыДоработки);
					ТабДок.Присоединить(Обл);
				КонецЕсли; 
			КонецЕсли;  // ФлДваРесурса.
		КонецЦикла; // Периоды.
		
		ТекНом = Ном; // Фиксируем номер строки до входа в рекурсивный вызов.
		Ном = Ном + 1;	
		
		
		ИменаЯчеекПодч = ОбойтиДерево(СтрокаДерева, ТабДок, Области, НастрФормы, Периоды, Ном, СтрПар);
		
		// Установим формулы для вычисления итогов по группам.
		Если ИменаЯчеекПодч.Количество() > 0 Тогда
			
			// После выхода из подчиненного вызова сбрасываем параметры проверяющие объединение ячеек.
			ДанныеВрем = бит_Бюджетирование.КонструкторСтруктурыПроверкиОбъединения(ИзмеренияРазворачивать);
			
			Для каждого ТекОписание Из Периоды Цикл
				
				Если НастрФормы.УчетКоличество Тогда
				
					 бит_Бюджетирование.УстановитьФормулуИтоговПоГруппе(ТабДок, ИменаЯчеекПодч, ТекОписание.ИмяКоличество, ИдИзмерений);
				
				КонецЕсли; 
				
				Если НастрФормы.УчетСумма Тогда
				
					 бит_Бюджетирование.УстановитьФормулуИтоговПоГруппе(ТабДок, ИменаЯчеекПодч, ТекОписание.ИмяСумма, ИдИзмерений);
				
				КонецЕсли; 
				
			КонецЦикла; // Периоды - установка формул.	
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам дерева данного уровня.
	
	Если НастрФормы.ОбъединятьЯчейки Тогда
		
		// Вызова процедуры объединения для объединения ячеек в случае завершения группировки.
		Сч = 1;
		Для каждого Имя Из ИзмеренияРазворачивать Цикл
			
			Если Сч < КоличествоРазворачивать Тогда
				
				// Объединяем ячейки с повторяющимися значениями аналитик.
				флЕстьПодчиненные = ?(ТипЗнч(СтрокаВерх) = Тип("ДеревоЗначений"), Истина, Ложь);
				бит_Бюджетирование.ПроверитьВыполнитьОбъединениеЯчеек(ТабДок, ДанныеВрем, Имя, "НереальноеЗначение", флЕстьПодчиненные, Истина);
				
			КонецЕсли; 
			
			Сч = Сч +1;
		КонецЦикла;  // По именам измерений.
		
	КонецЕсли; 
	
	Возврат ИменаЯчеек;
	
КонецФункции

// Процедура обновляет дерево данных.
//
// Параметры:
//  ТабДок				 - ТабличныйДокумент - Табличный документ с данными формы.
//  Настройка			 - СправочникСсылка.бит_НастройкиФормВводаБюджета - Настройки форм ввода бюджета.
//  ТекстЗапроса		 - Строка - Текст запроса формы ввода бюджета.
//  ПараметрыОбновления	 - Структура - см. Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева().
//
Процедура ОбновитьДеревоДанных(ТабДок, Настройка, ТекстЗапроса, ПараметрыОбновления) Экспорт

	Если ТипЗнч(Настройка) = Тип("СправочникОбъект.бит_НастройкиФормВводаБюджета") Тогда
		Бюджет = Настройка.Бюджет;
	Иначе	
		Бюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Бюджет");
	КонецЕсли; 
	
	Если Справочники.бит_Бюджеты.БюджетЗапрещенВПланировании(Бюджет) Тогда
		ВызватьИсключение НСтр("ru = 'Выполнение операции остановлено.
									|Бюджет настройки формы ввода не должен содержать дубли статей оборотов.'");
	КонецЕсли;
	
	СтрокаСортировки = "";
	
	ТабДок.Очистить();
	
	НастрФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Настройка);	
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Периодичность              = ПараметрыОбновления.Периодичность;
	ПродолжительностьИнтервала = ПараметрыОбновления.ПродолжительностьИнтервала;
	ДатаНачалаПланирования     = ПараметрыОбновления.ДатаНачалаПланирования;
	ДатаОкончанияПланирования  = ПараметрыОбновления.ДатаОкончанияПланирования;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаПланирования) Тогда
		ДатаНачалаПланирования  = НачалоГода(ТекущаяДата());
	КонецЕсли; 
	
	// Инициализация построителя.
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Бюджет", НастрФормы.Бюджет);
	Попытка
		Запрос.Текст = ТекстЗапроса;
	Исключение
		ТекстСообщения =  НСтр("ru = 'Неверный текст запроса! Описание ошибки: %1.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ОписаниеОшибки()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыОбновления.АдресКомпоновки) Тогда
		
		СКД = ПолучитьИзВременногоХранилища(ПараметрыОбновления.АдресКомпоновки);
		
		КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетСКД = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД, ПараметрыОбновления.НастройкиКомпоновщика);
				
		// Получаем запрос макета компоновки данных.
		Попытка
			Запрос.Текст = МакетСКД.НаборыДанных.НаборДанныхОсновной.Запрос;
		Исключение
			ТекстСообщения =  НСтр("ru = 'Не удалось установить отбор для получения дерева!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецПопытки;
		
		// Устанавливаем параметры запроса.
		ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
		Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
			
			Если НЕ МакетСКД.ЗначенияПараметров.Найти(ОписаниеПараметраЗапроса.Имя) = Неопределено Тогда
				
				Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетСКД.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НастрФормы.Бюджет) Тогда
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
			
			// В новой версии запросов настроек формы ввода 2 оператора для формирования дерева из групп.
			// Старые элементы настроек формы ввода, содержат только 1 оператор в пакете запроса. 
			Если СхемаЗапроса.ПакетЗапросов[0].Операторы.Количество() = 2 Тогда
				ОтборыСКД = СхемаЗапроса.ПакетЗапросов[0].Операторы[1].Отбор;
				ОтборыСКД.Очистить();
				ОтборыСКД.Добавить(Новый ВыражениеСхемыЗапроса("СпрГруппы.ЭтоГруппа"));
				ОтборыСКД.Добавить(Новый ВыражениеСхемыЗапроса("НЕ СпрГруппы.ПометкаУдаления"));
				Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Формируем строку сортировки.
	Если ТипЗнч(Настройка) = Тип("СправочникОбъект.бит_НастройкиФормВводаБюджета") Тогда
		СохраненнаяНастройка = Настройка.ПолучитьНастройкиПостроителя();
	Иначе	
		НастройкаОб = Настройка.ПолучитьОбъект();
		СохраненнаяНастройка = НастройкаОб.ПолучитьНастройкиПостроителя();
	КонецЕсли; 
	
	Если СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") 
		И ТипЗнч(СохраненнаяНастройка.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных")  Тогда
		
		Для каждого ЭлПорядка Из СохраненнаяНастройка.НастройкиКомпоновщика.Порядок.Элементы Цикл
			
			Если ЭлПорядка.Использование = Истина И НЕ Строка(ЭлПорядка.Поле) = "" Тогда
				
				НаправлениеСтр = ?(ЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв, "УБЫВ", "ВОЗР"); 
				СтрокаСортировки = СтрокаСортировки+?(ПустаяСтрока(СтрокаСортировки),"",",")+Строка(ЭлПорядка.Поле)+" "+НаправлениеСтр;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Установка отбора под владельцу дополнительных аналитик при необходимости.
	ИзмеренияРазворачивать = НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать];
	Для каждого Имя Из ИзмеренияРазворачивать Цикл
	
		ТекНастройка = НастройкиИзмерений[Имя];
		
		Если НЕ ТекНастройка = Неопределено 
			 И ТекНастройка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.бит_ДополнительныеЗначенияАналитик")) Тогда
		
			 Запрос.УстановитьПараметр(Имя, ТекНастройка.Аналитика);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Выполнение запроса.
	Попытка
		Результат = Запрос.Выполнить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить дерево данных! Описание ошибки: %1.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Строка(ОписаниеОшибки()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецПопытки;
	
	РезДерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

	флНовыйЗапрос = ?(РезДерево.Колонки.Найти("Ссылка") = Неопределено, Истина, Ложь);
	
	// Получение областей, необходимых для вывода.
	Макет = Документы.бит_ФормаВводаБюджета.ПолучитьМакет("Макет");	
	Области = Новый Структура;
	Области.Вставить("Заголовок_Кодификатор", Макет.ПолучитьОбласть("Заголовок|Кодификатор"));
	Области.Вставить("Заголовок_Измерение"  , Макет.ПолучитьОбласть("Заголовок|Измерение"));
	Области.Вставить("Заголовок_Поле"       , Макет.ПолучитьОбласть("Заголовок|Поле"));
	Области.Вставить("Заголовок_ПолеДубль"  , Макет.ПолучитьОбласть("Заголовок|ПолеДубль"));
	Области.Вставить("Строка_Кодификатор"   		 , Макет.ПолучитьОбласть("Строка|Кодификатор"));
	Области.Вставить("Строка_Измерение"     		 , Макет.ПолучитьОбласть("Строка|Измерение"));
	Области.Вставить("Строка_ПолеКоличество"		 , Макет.ПолучитьОбласть("Строка|ПолеКоличество"));
	Области.Вставить("Строка_ПолеСумма"     		 , Макет.ПолучитьОбласть("Строка|ПолеСумма"));
	Области.Вставить("Строка_ПолеДубль"     		 , Макет.ПолучитьОбласть("Строка|ПолеДубль"));
	Области.Вставить("СтрокаРасчетная_ПолеКоличество", Макет.ПолучитьОбласть("СтрокаРасчетная|ПолеКоличество"));
	Области.Вставить("СтрокаРасчетная_ПолеСумма"     , Макет.ПолучитьОбласть("СтрокаРасчетная|ПолеСумма"));
	Области.Вставить("СтрокаРасчетная_ПолеДубль"	 , Макет.ПолучитьОбласть("СтрокаРасчетная|ПолеДубль"));
	
	// Установка цветов.
	РедактируемыеОбласти = Новый Массив;
	РедактируемыеОбласти.Добавить("Строка_ПолеКоличество");
	РедактируемыеОбласти.Добавить("Строка_ПолеСумма");
	РедактируемыеОбласти.Добавить("Строка_ПолеДубль");
	
	Для каждого КиЗ Из Области Цикл
		
		ИмяОбласти = КиЗ.Ключ;
		Обл = КиЗ.Значение;
		
		ЦветФона = ?(РедактируемыеОбласти.Найти(ИмяОбласти) = Неопределено, НастрФормы.Цвета.Цвет_Группа, НастрФормы.Цвета.Цвет_Ячейка);
		
		яч = Обл.Область(1,1,1,1);
		яч.ЦветФона = ЦветФона;
		
		Если НЕ Найти(ИмяОбласти, "Дубль") = 0 Тогда
			
			яч = Обл.Область(1,2,1,2);
			яч.ЦветФона = ЦветФона;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЭтоНастройкаПоБюджету   = ?(ЗначениеЗаполнено(НастрФормы.Бюджет), Истина, Ложь);
	ИспользоватьКоэфициенты = ?(ЭтоНастройкаПоБюджету И НастрФормы.Настройка.ИспользоватьКоэффициентыСтатейБюджета, Истина, Ложь);
	
	Если ИспользоватьКоэфициенты Тогда
		
		// Если используются коэффициенты статей бюджета необходимо установить специальный формат.
		яч = Области.Строка_ПолеСумма.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.Строка_ПолеКоличество.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.Строка_ПолеДубль.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.Строка_ПолеДубль.Область(1,2,1,2);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		
		яч = Области.СтрокаРасчетная_ПолеСумма.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.СтрокаРасчетная_ПолеКоличество.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.СтрокаРасчетная_ПолеДубль.Область(1,1,1,1);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		яч = Области.СтрокаРасчетная_ПолеДубль.Область(1,2,1,2);
		бит_Бюджетирование.УстановитьФорматОтрицательныхЧисел(яч);
		
	КонецЕсли; 
	
	// Вывод дерева данных.
	СтрПарШапка = Новый Структура("Периодичность, ПродолжительностьИнтервала, ДатаНачалаПланирования, ДатаОкончанияПланирования"
	                               , Периодичность
								   , ПродолжительностьИнтервала
								   , ДатаНачалаПланирования
								   , ДатаОкончанияПланирования);
								   
	Периоды = ВывестиШапку(ТабДок, Области, НастрФормы, СтрПарШапка);
	
	ТабДок.НачатьАвтогруппировкуСтрок();
		
	локСтрПар = Новый Структура;
	локСтрПар.Вставить("ЭтоНовыйЗапрос", флНовыйЗапрос);
	
	Если ПустаяСтрока(СтрокаСортировки) Тогда
		
	    // По умолчанию -сортировка по кодификатору.		
		ИзмеренияРазворачивать  = НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать];
		Если ИзмеренияРазворачивать.Количество() > 1 Тогда
			
			ИмяПервого = ИзмеренияРазворачивать[0];
			ИмяКодификатор = ИмяПервого+"_Кодификатор";
			
			Если НЕ РезДерево.Колонки.Найти(ИмяКодификатор) = Неопределено Тогда
				СтрокаСортировки = ИмяКодификатор+","+ИмяПервого;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаСортировки) Тогда
		Попытка
			РезДерево.Строки.Сортировать(СтрокаСортировки, Истина);
		Исключение
			ТекстСообщения =  НСтр("ru = 'Не удалось выполнить сортировку по настройке: %1. Описание ошибки: %2.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаСортировки, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли; 
	
	ОбойтиДерево(РезДерево, ТабДок, Области, НастрФормы, Периоды, 1, локСтрПар);
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ТабДок.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.БезПерехода;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Сформировать печатные формы объектов.
//
// Параметры:
//  МассивСсылок  	 - Массив. Массив ссылок которые нужно распечатать.
//  ИмяМакета 	     - Строка.
//  ПараметрыПечати  - Структура. Структура дополнительных параметров печати.
//  ПечатныйДокумент - ТабличныйДокумент. Возвращаемый.
// 
Процедура Печать(МассивСсылок, ИмяМакета, ПараметрыПечати, ПечатныйДокумент) Экспорт
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ПечатныйДокумент = СформироватьПечатнуюФорму(ИмяМакета, МассивСсылок);
	Если ИмяМакета = "ПечатьOPEX" Тогда
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-19 (#2873)
		//ПечатныйДокумент = бит_ФормаВводаБюджетаВызовСервера.ПечатьOPEX_ПоулчитьТабличныйДокумент(МассивСсылок[0]);
		//Заменено на:
		ПечатныйДокумент = бит_ФормаВводаБюджетаВызовСервера.ПечатьФВБ_ПолучитьТабличныйДокумент(МассивСсылок[0]);	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-19 (#2873)
	Иначе
		ПечатныйДокумент = СформироватьПечатнуюФорму(ИмяМакета, МассивСсылок);
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

// Осуществляет вывод шапки дерева данных. 
// 
// Параметры:
//  ТабДок - ТабличныйДокумент.
//  Области - Структура - Области макета.
//  НастрФормы - Структура - Настройки формы ввода.
// 
Функция ВывестиШапкуПечатнойФормы(ИмяМакета, ТабДок, Области, НастройкаФормы, СтрПар, ТекДокумент, МассивИзмеренийТаблицы, МассивИзмеренийРазворачивать)

	НастрФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(НастройкаФормы);
	
	ДатаНачалаПланирования    = СтрПар.ДатаНачалаПланирования;
	ДатаОкончанияПланирования = СтрПар.ДатаОкончанияПланирования;	
							  	
	// Имена измерений.
	Для каждого Имя Из НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать] Цикл
		
		Области.Заголовок_Измерение.Параметры.ИмяИзмерения = НастрФормы.Измерения[Имя].Синоним;
		ТабДок.Присоединить(Области.Заголовок_Измерение);
		
		МассивИзмеренийРазворачивать.Добавить(Имя);

	КонецЦикла; 
	
	// Имена измерений.
	ТЗ = ТекДокумент.БДДС.Выгрузить();
	
	Для каждого Имя Из НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.РучнойВвод] Цикл
		
		ВыводитьКолонку = Ложь;
		
		МассивЗначений = ТЗ.ВыгрузитьКолонку(Имя);
		Для Каждого Эл Из МассивЗначений Цикл
			Если ЗначениеЗаполнено(Эл) Тогда
				ВыводитьКолонку = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыводитьКолонку Тогда
			Области.Заголовок_Измерение.Параметры.ИмяИзмерения = НастрФормы.Измерения[Имя].Синоним;
			
			Если Не ТабДок.ПроверитьПрисоединение(Области.Заголовок_Измерение) Тогда
				ТабДок.ВывестиВертикальныйРазделительСтраниц();
			КонецЕсли;
				
			ТабДок.Присоединить(Области.Заголовок_Измерение);
			
			МассивИзмеренийТаблицы.Добавить(Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// комментарий.
	Если ВРег(ИмяМакета) = ВРег("ДанныеБюджета") Тогда
		Области.Заголовок_Измерение.Параметры.ИмяИзмерения = "Комментарий";
		
		Если Не ТабДок.ПроверитьПрисоединение(Области.Заголовок_Измерение) Тогда
			ТабДок.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли;

		ТабДок.Присоединить(Области.Заголовок_Измерение);
	КонецЕсли;
		
	// Вывод заголовка периодов.
	Периодичность        = СтрПар.Периодичность;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончанияПланирования) Тогда
		
		КоличествоИнтервалов = СтрПар.ПродолжительностьИнтервала;
		
	Иначе
		
		КоличествоИнтервалов = бит_Бюджетирование.РазностьДат(ДатаНачалаПланирования, ДатаОкончанияПланирования, Периодичность)+1;
		
	КонецЕсли; 
		
	ИмяОбластиПериод     = "Заголовок_Поле";

	// Проверим, следует ли создавать дополнительные итоговые колонки.
	ПериодыИтогов = Новый Массив;
	Для каждого СтрНастройки Из НастрФормы.ДополнительныеИтоги Цикл
	
		Если Перечисления.бит_ПериодичностьПланирования.Индекс(СтрНастройки.Периодичность) > Перечисления.бит_ПериодичностьПланирования.Индекс(Периодичность) Тогда
		
			  ПериодыИтогов.Добавить(СтрНастройки);
		
		КонецЕсли; 
	
	КонецЦикла; 
		
	Периоды = Новый Массив;
	НомИт = 1;
	Для й=1 По КоличествоИнтервалов Цикл
	
		ТекущийПериод = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачалаПланирования,й-1,Периодичность);
		
		Синоним = бит_Бюджетирование.СформироватьПредставлениеПериода(ТекущийПериод,Периодичность);		
		ПараметрыОписанияПериода = бит_Бюджетирование.НовыеПараметрыОписаниеПериода();
		ПараметрыОписанияПериода.Период  = ТекущийПериод;
		ПараметрыОписанияПериода.Синоним = Синоним;
		ТекОписаниеПериода = бит_Бюджетирование.ОписаниеПериода(ПараметрыОписанияПериода);
		
		Периоды.Добавить(ТекОписаниеПериода);
		
	КонецЦикла; // По интервалам.

	// Колонки итогов.
	Если НастрФормы.ВыводитьОбщиеИтоги Тогда
		ПараметрыОписанияПериода = бит_Бюджетирование.НовыеПараметрыОписаниеПериода();
		ПараметрыОписанияПериода.Период  = Дата('00010101');
		ПараметрыОписанияПериода.Синоним = "Итого";
		ПараметрыОписанияПериода.Имя 	 = "Итог";
		ПараметрыОписанияПериода.ЭтоИтог = Истина;
		ТекОписаниеПериода = бит_Бюджетирование.ОписаниеПериода(ПараметрыОписанияПериода);
		Периоды.Добавить(ТекОписаниеПериода);		
	КонецЕсли; 
	
	ОбластьПериод = Области[ИмяОбластиПериод];
	
	ном = 1;
	СоответствиеПериодаСуммы = Новый ТаблицаЗначений;
	СоответствиеПериодаСуммы.Колонки.Добавить("Период");
	СоответствиеПериодаСуммы.Колонки.Добавить("Сумма");

	Для каждого ТекОписание Из Периоды Цикл
		
		ОбластьПериод.Параметры.ИмяПоля = ТекОписание.Синоним;
		ИмяЯчейки = "Период_"+ном;
		
		расш = бит_Бюджетирование.РасшифровкаЯчейки(ИмяЯчейки, Неопределено, ТекОписание.Период, "Период");
		расш.Периодичность = ТекОписание.Периодичность;
		
		яч = ОбластьПериод.Область(1,1,1,1);
		яч.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.БезОбработки;
		яч.Имя = ИмяЯчейки;
		яч.Расшифровка = расш;
		
		Если ТекОписание.ЭтоВыходной 
			 И НастрФормы.ОтображениеВыходных = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.Выделять Тогда
		
			 яч.ЦветТекста = WebЦвета.Красный;
			 
		Иначе
			 
			 яч.ЦветТекста = WebЦвета.Черный;
			 
		КонецЕсли; 
		
		Если Не ТабДок.ПроверитьПрисоединение(ОбластьПериод) Тогда 
			ТабДок.ВывестиВертикальныйРазделительСтраниц();
		КонецЕсли;
		
		ТабДок.Присоединить(ОбластьПериод);
		
		Ном = Ном + 1;
		
		НоваяСтрокаТЗ = СоответствиеПериодаСуммы.Добавить();
		НоваяСтрокаТЗ.Период = ТекОписание.Период;
		НоваяСтрокаТЗ.Сумма  = 0;

	КонецЦикла; 
	
	Возврат СоответствиеПериодаСуммы;
	
КонецФункции

// Функция формирует печатную форму заявки на оплату.
//
// Параметры:
//  ИмяМакета			   - Строка
//  МассивСсылок  		   - Массив.
//  СчитатьСуммуПоПлатежам - Булево. По умолчанию Ложь.
//
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФорму(ИмяМакета, МассивСсылок)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Формируем запрос по заявкам.
	РезультатЗапроса = ПолучитьРезультатЗапросаПоФормеВвода(МассивСсылок);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		// Получаем макет и области.
		Макет = ПолучитьМакет("МакетПечатнаяФорма");
		// Получаем области.
		Шапка 			 = Макет.ПолучитьОбласть("Шапка");
		Аналитика        = Макет.ПолучитьОбласть("Аналитика");
		ШапкаВиза    	 = Макет.ПолучитьОбласть("ШапкаВиза");
		СтрокаВиза  	 = Макет.ПолучитьОбласть("СтрокаВиза");
		Подвал  		 = Макет.ПолучитьОбласть("Подвал");

		Области = Новый Структура;
		Области.Вставить("ИмяДокумента"         ,Макет.ПолучитьОбласть("ИмяДокумента"));
		Области.Вставить("ЗаголовокТаблицы"     ,Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		Области.Вставить("Заголовок_Измерение"  ,Макет.ПолучитьОбласть("Заголовок|Измерение"));
		Области.Вставить("Заголовок_Поле"       ,Макет.ПолучитьОбласть("Заголовок|Поле"));
		Области.Вставить("Строка_Измерение"     ,Макет.ПолучитьОбласть("Строка|Измерение"));
		Области.Вставить("Строка_ПолеКоличество",Макет.ПолучитьОбласть("Строка|ПолеКоличество"));
		Области.Вставить("Строка_ПолеСумма"     ,Макет.ПолучитьОбласть("Строка|ПолеСумма"));		
		Области.Вставить("Строка_Поле"          ,Макет.ПолучитьОбласть("Строка|Поле"));
		
		// Вывод результатов.
		ПервыйДокумент   = Истина;
		ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИзЗапроса.Следующий() Цикл 
			
			ТекДокумент = ВыборкаИзЗапроса.Ссылка;
			// Отбор для таблиц по текущему документу.
			Отбор = Новый Структура;
			Отбор.Вставить("Ссылка", ТекДокумент); 			
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			Области.ИмяДокумента.Параметры.ДокументаСсылка = ТекДокумент;
			ТабличныйДокумент.Вывести(Области.ИмяДокумента);
			
			ТабличныйДокумент.ВерхнийКолонтитул.Выводить = Истина;
			ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ТекДокумент;
			ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
			
			ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
			ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = "Стр [&НомерСтраницы]/[&СтраницВсего]";
			ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = 1;
			
			// Заполяем параметры областей.
			Шапка.Параметры.Заполнить(ВыборкаИзЗапроса);			   
			
			ТабличныйДокумент.Вывести(Шапка);
						
			ПродолжительностьИнтервала = ТекДокумент.Сценарий.ПродолжительностьИнтервала;
			Периодичность              = ТекДокумент.Сценарий.бит_Периодичность;
			ДатаНачалаПланирования     = ТекДокумент.ДатаНачалаПланирования;
			ДатаОкончанияПланирования  = ТекДокумент.ДатаОкончанияПланирования;

			 // Вывод дерева данных.
			СтрПарШапка = Новый Структура("Периодичность, ПродолжительностьИнтервала, ДатаНачалаПланирования, ДатаОкончанияПланирования"
			                           , Периодичность
									   , ПродолжительностьИнтервала
									   , ДатаНачалаПланирования
									   , ДатаОкончанияПланирования);

			НастройкаФормы = ВыборкаИзЗапроса.НастройкаФормы;
			
			НастрФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(НастройкаФормы);
			
			// Вывод аналитик.
			СтрОтбор = Новый Структура("СпособЗаполнения", Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию);
		    Строки = НастройкаФормы.Измерения.НайтиСтроки(СтрОтбор);

			СтрОтбор = Новый Структура("СпособЗаполнения", Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчаниюРедактирование);
			Для Каждого  Эл Из НастройкаФормы.Измерения.НайтиСтроки(СтрОтбор) Цикл 
				Строки.добавить(Эл);
			КонецЦикла;
			
			Для Каждого Эл Из Строки Цикл
				
				Если ЗначениеЗаполнено(ТекДокумент[Эл.Имя]) И Не ВРег(Эл.Имя) = ВРег("Сценарий") Тогда
					Аналитика.Параметры.АналитикаЗаголовок = НастрФормы.Измерения[Эл.Имя].Синоним;
					Аналитика.Параметры.АналитикаЗначение  = ТекДокумент[Эл.Имя];
					
					ТабличныйДокумент.Вывести(Аналитика);
					
				ИначеЕсли ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) И Не ВРег(Эл.Имя) = ВРег("Сценарий") Тогда
					Аналитика.Параметры.АналитикаЗаголовок = НастрФормы.Измерения[Эл.Имя].Синоним;
					Аналитика.Параметры.АналитикаЗначение  = Эл.ЗначениеПоУмолчанию;
					
					ТабличныйДокумент.Вывести(Аналитика);
				КонецЕсли;
				
			КонецЦикла;
				
			ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
			
			Если ВРег(ИмяМакета) = ВРег("СводнаяТаблица") Тогда
				ВывестиДанныеПечатнойФормы("ДанныеБюджета", ТабличныйДокумент, Области, НастройкаФормы, СтрПарШапка, ТекДокумент);
			    ВывестиДанныеПечатнойФормы("ЗависимыеОбороты", ТабличныйДокумент, Области, НастройкаФормы, СтрПарШапка, ТекДокумент);
			Иначе
				ВывестиДанныеПечатнойФормы(ИмяМакета, ТабличныйДокумент, Области, НастройкаФормы, СтрПарШапка, ТекДокумент);
			КонецЕсли;		

			
			ТабДокПодвал = Новый ТабличныйДокумент;
			
			// Получим таблицу установленных виз.
			ТаблицаПоВизам  = ПолучитьТаблицуПоВизам(МассивСсылок);
				
			ТабДокПодвал.Вывести(ШапкаВиза);
			// Заполняем и выводим в табличный документ строки с визами для текущего документа.
			МассивСтрок = ТаблицаПоВизам.НайтиСтроки(Отбор);
			Для Каждого ТекСтрока Из МассивСтрок Цикл
				СтрокаВиза.Параметры.Заполнить(ТекСтрока);
				ТабДокПодвал.Вывести(СтрокаВиза);
			КонецЦикла;
			
			// Выводим область "ЗаявкаНиз" в табличный документ.
			Подвал.Параметры.Заполнить(ВыборкаИзЗапроса);
			ТабДокПодвал.Вывести(Подвал);
			
			Если Не ТабличныйДокумент.ПроверитьВывод(ТабДокПодвал) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ТабДокПодвал);

		КонецЦикла; // Пока ВыборкаИзЗапроса.Следующий() Цикл.
		
	КонецЕсли; // Если Не РезультатЗапроса.Пустой() Тогда.
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиДанныеПечатнойФормы(ИмяМакета, ТабличныйДокумент, Области, НастройкаФормы, СтрПарШапка, ТекДокумент)

	// выведем заголовок таблицы.
	Области.ЗаголовокТаблицы.Параметры.ЗаголовокТаблицы = ?(ИмяМакета = "ДанныеБюджета", "Данные бюджета", "Зависимые обороты");
	ТабличныйДокумент.Вывести(Области.ЗаголовокТаблицы);
	
	МассивИзмеренийТаблицы = Новый Массив;
	МассивИзмеренийРазворачивать = Новый Массив;

	Периоды = ВывестиШапкуПечатнойФормы(ИмяМакета, ТабличныйДокумент, Области, НастройкаФормы, СтрПарШапка, ТекДокумент, МассивИзмеренийТаблицы, МассивИзмеренийРазворачивать);

	НастрФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(НастройкаФормы);

	СтрОтбор = Новый Структура("СпособЗаполнения", Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать);
	Строки = НастройкаФормы.Измерения.НайтиСтроки(СтрОтбор);
	
	Периодичность = СтрПарШапка.Периодичность;
	
	ИзмереенияИтогов = "";
	
	КоличествоСтрок = Строки.Количество();
	ИндСтроки = 1;
	
	Для каждого Эл из Строки Цикл
		
		СимволОкончания = ?(КоличествоСтрок = ИндСтроки, "", ",");
		ИзмереенияИтогов = ИзмереенияИтогов + Эл.Имя + СимволОкончания;
		ИндСтроки = ИндСтроки +1;
		
	КонецЦикла;

	Запрос = Новый Запрос;

	Если ВРег(ИмяМакета) = ВРег("ДанныеБюджета") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_ФормаВводаБюджетаБДДС.Ссылка,
			|	бит_ФормаВводаБюджетаБДДС.ЦФО КАК ЦФО,
			|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов КАК СтатьяОборотов,
			|	бит_ФормаВводаБюджетаБДДС.Контрагент КАК Контрагент,
			|	бит_ФормаВводаБюджетаБДДС.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	бит_ФормаВводаБюджетаБДДС.Проект КАК Проект,
			|	бит_ФормаВводаБюджетаБДДС.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	бит_ФормаВводаБюджетаБДДС.БанковскийСчет КАК БанковскийСчет,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_1,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_2,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_3,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_4,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_5,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_6,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_7,
			|	СУММА(бит_ФормаВводаБюджетаБДДС.Количество) КАК Количество,
			|	СУММА(бит_ФормаВводаБюджетаБДДС.Сумма) КАК Сумма,
			|	бит_ФормаВводаБюджетаБДДС.Период КАК Период
			|ИЗ
			|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
			|ГДЕ
			|	бит_ФормаВводаБюджетаБДДС.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	бит_ФормаВводаБюджетаБДДС.ЦФО,
			|	бит_ФормаВводаБюджетаБДДС.Ссылка,
			|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов,
			|	бит_ФормаВводаБюджетаБДДС.БанковскийСчет,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_1,
			|	бит_ФормаВводаБюджетаБДДС.Контрагент,
			|	бит_ФормаВводаБюджетаБДДС.ДоговорКонтрагента,
			|	бит_ФормаВводаБюджетаБДДС.Проект,
			|	бит_ФормаВводаБюджетаБДДС.НоменклатурнаяГруппа,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_2,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_3,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_4,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_5,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_6,
			|	бит_ФормаВводаБюджетаБДДС.Аналитика_7,
			|	бит_ФормаВводаБюджетаБДДС.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ
			|	СУММА(Количество),
			|	СУММА(Сумма)
			|ПО	
			|   "+ ИзмереенияИтогов +",
			|	Период ПЕРИОДАМИ("+Периодичность+", &НачалоПериода, &КонецПериода)";

	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.ЦФО КАК ЦФО,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.СтатьяОборотов КАК СтатьяОборотов,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Контрагент КАК Контрагент,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Проект КАК Проект,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.БанковскийСчет КАК БанковскийСчет,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_1,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_2,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_3,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_4,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_5,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_6,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_7,
			|	СУММА(бит_ФормаВводаБюджетаЗависимыеОбороты.Количество) КАК Количество,
			|	СУММА(бит_ФормаВводаБюджетаЗависимыеОбороты.Сумма) КАК Сумма,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Период КАК Период
			|ИЗ
			|	Документ.бит_ФормаВводаБюджета.ЗависимыеОбороты КАК бит_ФормаВводаБюджетаЗависимыеОбороты
			|ГДЕ
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка = &ТекДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.ЦФО,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.СтатьяОборотов,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.БанковскийСчет,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_1,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Контрагент,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.ДоговорКонтрагента,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Проект,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.НоменклатурнаяГруппа,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_2,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_3,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_4,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_5,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_6,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Аналитика_7,
			|	бит_ФормаВводаБюджетаЗависимыеОбороты.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ
			|	СУММА(Количество),
			|	СУММА(Сумма)
			|ПО
			|   "+ ИзмереенияИтогов +",
			|	Период ПЕРИОДАМИ("+Периодичность+", &НачалоПериода, &КонецПериода)";
			
	КонецЕсли;
			
	Запрос.УстановитьПараметр("ТекДокумент",   ТекДокумент);
	Запрос.УстановитьПараметр("НачалоПериода", СтрПарШапка.ДатаНачалаПланирования);
	Запрос.УстановитьПараметр("КонецПериода",  СтрПарШапка.ДатаОкончанияПланирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КоличествоИзмеренийГруппировок = МассивИзмеренийРазворачивать.Количество();
	
	СтрокаИзмерений = "";
	МассивСтрокИзмерений = Новый ТаблицаЗначений;
	
	Для Каждого ИмяИзмерения Из МассивИзмеренийРазворачивать Цикл
		
		СтрокаИзмерений = СтрокаИзмерений + ИмяИзмерения + ",";
		
		МассивСтрокИзмерений.Колонки.Добавить(ИмяИзмерения);

	КонецЦикла;
	
	Для Инд = 0 По МассивИзмеренийТаблицы.Количество() -1 Цикл
		ОкончаниеСтроки = ?(Инд = МассивИзмеренийТаблицы.Количество() -1, "", ",");
		
		СтрокаИзмерений = СтрокаИзмерений + МассивИзмеренийТаблицы[Инд] + ОкончаниеСтроки;
		
		МассивСтрокИзмерений.Колонки.Добавить(МассивИзмеренийТаблицы[Инд]);

	КонецЦикла;
		
	ВыполнитьВыводСтроки(ИмяМакета, ТекДокумент, ТабличныйДокумент, Области, Периоды, НастрФормы, КоличествоИзмеренийГруппировок, РезультатЗапроса, МассивИзмеренийТаблицы, СтрокаИзмерений, МассивСтрокИзмерений);
		

КонецПроцедуры

Процедура ВыполнитьВыводСтроки(ИмяМакета, ТекДокумент, ТабличныйДокумент, Области, Периоды, НастрФормы, КоличествоИзмеренийГруппировок, РезультатЗапроса, МассивИзмеренийТаблицы, СтрокаИзмерений, МассивСтрокИзмерений)
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Если Выборка.Уровень() < КоличествоИзмеренийГруппировок Тогда

		ОбнулитьПериоды(Периоды);
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока Выборка.Следующий() Цикл
			
			ТабДок = Новый ТабличныйДокумент;
			
			// Имена измерений.
			Для Инд = 0 ПО НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать].КОличество()-1 Цикл
								
				Области.Строка_Измерение.Параметры.ЗначениеИзмерения = Выборка[НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать][Инд]];
				
				ТекущаяОбласть = Области.Строка_Измерение.Область();
				ТекущаяОбласть.Отступ = Выборка.Уровень();
				
				ТабДок.Присоединить(Области.Строка_Измерение);
				
			КонецЦикла;
			
			ОбластьТабДок = ТабДок.Область();
			ОбластьТабДок.Шрифт = Новый Шрифт("Arial", 8, 1);

			Для каждого Имя Из МассивИзмеренийТаблицы Цикл
				
				Области.Строка_Измерение.Параметры.ЗначениеИзмерения = Выборка[Имя];
				ТабДок.Присоединить(Области.Строка_Измерение);
						
			КонецЦикла;

			// вывести комментарий.
			Если ВРег(ИмяМакета) = ВРег("ДанныеБюджета") Тогда

				Области.Строка_Измерение.Параметры.ЗначениеИзмерения = "";
				ТабДок.Присоединить(Области.Строка_Измерение);
				
			КонецЕсли;
			
			ВыборкаПериодов = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период", "Все");
															
			Пока ВыборкаПериодов.Следующий() Цикл
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Период", ВыборкаПериодов.Период);
				
				МассивСтрок = Периоды.НайтиСтроки(СтруктураОтбора);
				Для Каждого Строка Из МассивСтрок Цикл
					Строка.Сумма = ?(ЗначениеЗаполнено(ВыборкаПериодов.Сумма),ВыборкаПериодов.Сумма, 0);
				КонецЦикла;
				
			КонецЦикла;				
				
			ОбщаяСумма = 0;
	        
			Для Каждого Период Из Периоды Цикл

				ОбщаяСумма = ОбщаяСумма + Период.Сумма;
				Если Период.Период = Дата('00010101') Тогда 
					Области.Строка_Поле.Параметры.ЗначениеПоля = ОбщаяСумма;
				Иначе
					Области.Строка_Поле.Параметры.ЗначениеПоля = Период.Сумма;
				КонецЕсли;
								
				ТабДок.Присоединить(Области.Строка_Поле);

			КонецЦикла;  
			
			ОбластьТабДок = ТабДок.Область();
			ОбластьТабДок.Шрифт = Новый Шрифт("Arial", 8, 1);

			Если Не ТабличныйДокумент.ПроверитьВывод(Области.Строка_Поле) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ТабДок);
						
			ВыполнитьВыводСтроки(ИмяМакета, ТекДокумент, ТабличныйДокумент, Области, Периоды, НастрФормы, КоличествоИзмеренийГруппировок, Выборка, МассивИзмеренийТаблицы, СтрокаИзмерений, МассивСтрокИзмерений);
			
		КонецЦикла;
		
	Иначе
		
		Пока Выборка.Следующий() Цикл
				
			ВыборкаДетальныеЗаписи = Выборка.Выбрать();
						
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ТабДок = Новый ТабличныйДокумент;
				
				СтруктураИзмерений = Новый Структура(СтрокаИзмерений);
				
				// Имена измерений.
				Для каждого КлючЗначение Из СтруктураИзмерений Цикл
					
					СтруктураИзмерений.Вставить(КлючЗначение.Ключ, ВыборкаДетальныеЗаписи[КлючЗначение.Ключ]);
					
				КонецЦикла; 
					
				СтрокаОтсутствет = Ложь;
				Если МассивСтрокИзмерений.Количество() > 0 Тогда
					
					МассивСтрок = МассивСтрокИзмерений.НайтиСтроки(СтруктураИзмерений);
					Если МассивСтрок.Количество() = 0 Тогда
						СтрокаОтсутствет = Истина;
					КонецЕсли;
					
				Иначе
					
					СтрокаОтсутствет = Истина;
					
				КонецЕсли;
				
				Если СтрокаОтсутствет Тогда

					ТекущаяОбласть = Области.Строка_Измерение.Область();
					ТекущаяОбласть.Шрифт = Новый Шрифт("Arial", 8, 0);
					
					// Имена измерений.
					Для Инд = 0 ПО НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать].КОличество()-1 Цикл
						
						ТекущаяОбласть.Отступ = Выборка.Уровень();

						Области.Строка_Измерение.Параметры.ЗначениеИзмерения = ВыборкаДетальныеЗаписи[НастрФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать][Инд]];
						ТабДок.Присоединить(Области.Строка_Измерение);
					    						
					КонецЦикла;

					ТекущаяОбласть.Отступ = 0;

					Для каждого Имя Из МассивИзмеренийТаблицы Цикл
					
						Области.Строка_Измерение.Параметры.ЗначениеИзмерения = ВыборкаДетальныеЗаписи[Имя];
						ТабДок.Присоединить(Области.Строка_Измерение);

					КонецЦикла;

					// Вывести комментарий.
					Если ВРег(ИмяМакета) = ВРег("ДанныеБюджета") Тогда
						
						СтрокаКомментарий = "";
						МассивСтрокКомментарий = ТекДокумент.Бддс.НайтиСтроки(СтруктураИзмерений);
						Для Каждого Стр Из МассивСтрокКомментарий Цикл
							СтрокаКомментарий = СтрокаКомментарий + Стр.Комментарий+ " ";
						КонецЦикла;
					
						Области.Строка_Измерение.Параметры.ЗначениеИзмерения = СтрокаКомментарий;
						ТабДок.Присоединить(Области.Строка_Измерение);

					КонецЕсли;
					
					ВывестиДанныеПоСтроке(Выборка, СтруктураИзмерений, ТабДок, Периоды, Области);
					
					Выборка.Сбросить();
					
					Если Не ТабличныйДокумент.ПроверитьВывод(Области.Строка_Поле) Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ТабличныйДокумент.Вывести(ТабДок);

					НоваяСтрока = МассивСтрокИзмерений.Добавить();
                    ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураИзмерений);
					
				КонецЕсли;
								
			КонецЦикла;
										
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры 

Процедура ВывестиДанныеПоСтроке(ВыборкаПериодов, СтруктураИзмерений, ТабДок, Периоды, Области)

	ОбнулитьПериоды(Периоды);

	ВыборкаПериодов.Сбросить();
			
	СуммаВЯчейке = 0;

	Пока ВыборкаПериодов.Следующий() Цикл
			
		ВыборкаДетальныеЗаписи = ВыборкаПериодов.Выбрать();
					
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			                                                                                                                              
			ВыводСтроки = Истина;					
			Для Каждого КлючЗначение Из СтруктураИзмерений Цикл
				Если КлючЗначение.Значение <>  ВыборкаДетальныеЗаписи[КлючЗначение.Ключ] Тогда
					ВыводСтроки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если ВыводСтроки ТОгда
			
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Период", ВыборкаПериодов.Период);
				
				МассивСтрок = Периоды.НайтиСтроки(СтруктураОтбора);
				Для Каждого Строка Из МассивСтрок Цикл
					Строка.Сумма = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Сумма),ВыборкаДетальныеЗаписи.Сумма, 0);
				КонецЦикла;
									
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;
	
	ОбщаяСумма = 0;
	
	Для Каждого Период Из Периоды Цикл

		ОбщаяСумма = ОбщаяСумма + Период.Сумма;
		Если Период.Период = Дата('00010101') Тогда 
			Области.Строка_Поле.Параметры.ЗначениеПоля = ОбщаяСумма;
		Иначе
			Области.Строка_Поле.Параметры.ЗначениеПоля = Период.Сумма;
		КонецЕсли;
		
		ТабДок.Присоединить(Области.Строка_Поле);

	КонецЦикла; 
	
КонецПроцедуры 

Процедура ОбнулитьПериоды(ТаблицаПериодов)
	
	Для Каждого Период Из ТаблицаПериодов Цикл
		Период.Сумма = 0;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьРезультатЗапросаПоФормеВвода(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок" , МассивСсылок);
 	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
 	               |	бит_ФормаВводаБюджета.Ссылка,
 	               |	бит_ФормаВводаБюджета.НастройкаФормы,
 	               |	бит_ФормаВводаБюджета.ДатаНачалаПланирования,
 	               |	бит_ФормаВводаБюджета.Сценарий,
 	               |	бит_ФормаВводаБюджета.ВалютаДокумента,
 	               |	бит_ФормаВводаБюджета.КурсДокумента,
 	               |	бит_ФормаВводаБюджета.ЕдиницаИзмеренияСумм,
 	               |	бит_ФормаВводаБюджета.Ответственный,
 	               |	бит_ФормаВводаБюджета.Комментарий
 	               |ИЗ
 	               |	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
 	               |ГДЕ
 	               |	бит_ФормаВводаБюджета.Ссылка В(&МассивСсылок)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция получает таблицу значений по установленным визам.
//
// Параметры:
//  МассивСсылок  - Массив
//  
// Возвращаемое значение:
//   Таблица значений.
//
Функция ПолучитьТаблицуПоВизам(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("РежимПечатиНеВыводить", Перечисления.бит_РежимПечатиВиз.НеВыводить);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегВизы.Объект КАК Ссылка,
	|	РегВизы.Виза,
	|	РегВизы.ФизическоеЛицо КАК ФИО
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК РегВизы
	|ГДЕ
	|	РегВизы.Объект В(&МассивСсылок)
	|	И РегВизы.Виза.РежимПечати <> &РежимПечатиНеВыводить
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегВизы.КодСортировки";
	
	ТаблицаПоВизам = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаПоВизам;
	
КонецФункции

#КонецОбласти

Функция ВычислитьФормулу(СтрокаТаблицы, ТаблицаДанных)
	
	Рез = 0;
	СтрФормула = СтрокаТаблицы.Расшифровка.Формула;
	Если НЕ ПустаяСтрока(СтрФормула) Тогда
		Арг = Новый Структура;
		Для каждого ИмяАрг Из СтрокаТаблицы.Расшифровка.Аргументы Цикл
			СтрОтбор = Новый Структура("Имя,ИмяАргумента",ИмяАрг,ИмяАрг);
			МассивСтрок = ТаблицаДанных.НайтиСтроки(СтрОтбор);
			СтрокаАргумента = МассивСтрок[0];
			Если СтрокаАргумента.Расшифровка.Вид = "Значение"  Тогда
				ЗнАрг = СтрокаАргумента.Значение;
			ИначеЕсли СтрокаАргумента.Расшифровка.Вид = "Формула" Тогда
				Если СтрокаАргумента.ФормулаВычислена Тогда
					СтрокаТаблицы.Значение = СтрокаАргумента.ЗначениеВычисленияФормулы;
					ЗнАрг = СтрокаАргумента.ЗначениеВычисленияФормулы;
				Иначе	
					ЗнАрг = ВычислитьФормулу(СтрокаАргумента,ТаблицаДанных);
					СтрокаАргумента.ЗначениеВычисленияФормулы = ЗнАрг;
					СтрокаАргумента.ФормулаВычислена = Истина;
				КонецЕсли; 
			Иначе
				ЗнАрг = 0;
			КонецЕсли; 
			СтрФормула = СтрЗаменить(СтрФормула, "["+ИмяАрг+"]", Формат(ЗнАрг,"ЧРД=.; ЧН=0; ЧГ="));
		КонецЦикла;
		Попытка
			Рез = Вычислить(СтрФормула);
		Исключение
			Рез = 0;	 
		КонецПопытки;
		СтрокаТаблицы.Значение = Рез;
	КонецЕсли; 
	Возврат Рез;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицасоставДокумента", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьДанныеБюджета) КАК ЕстьДанныеБюджета,
	|	МАКСИМУМ(ВложенныйЗапрос.ЕстьЗависимыеОбороты) КАК ЕстьЗависимыеОбороты
	|ПОМЕСТИТЬ СоставДокумента
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК ЕстьДанныеБюджета,
	|		ЛОЖЬ КАК ЕстьЗависимыеОбороты
	|	ИЗ
	|		Документ.бит_ФормаВводаБюджета.БДДС КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Документ.бит_ФормаВводаБюджета.ЗависимыеОбороты КАК ТаблицыДокумента
	|	ГДЕ
	|		ТаблицыДокумента.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.РучнаяКорректировка КАК РучнаяКорректировка,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	Реквизиты.СверхБюджета КАК СверхБюджета,
	|	Реквизиты.ЕдиницаИзмеренияСумм КАК ЕдиницаИзмеренияСумм,
	|	Реквизиты.Сценарий.ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария,
	|	Реквизиты.РежимФормированияДвижений КАК РежимФормированияДвижений,
	|	ВЫБОР
	|		КОГДА Реквизиты.Сценарий.ПериодичностьКонтроля = ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бит_ПериодичностьПланирования.Месяц)
	|		ИНАЧЕ Реквизиты.Сценарий.ПериодичностьКонтроля
	|	КОНЕЦ КАК ПериодичностьКонтроля,
	|	ВЫБОР
	|		КОГДА Реквизиты.НастройкаФормы.Вид = ЗНАЧЕНИЕ(Перечисление.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Фиксированныймакет,
	|	Реквизиты.РежимПринятияКУчету КАК РежимПринятияКУчету
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КратностьДокумента КАК КратностьДокумента,
	|	Реквизиты.КурсДокумента КАК КурсДокумента,
	|	Реквизиты.РучнаяКорректировка КАК РучнаяКорректировка,
	|	Реквизиты.СверхБюджета КАК СверхБюджета,
	|	Реквизиты.ЕдиницаИзмеренияСумм КАК ЕдиницаИзмеренияСумм,
	|	Реквизиты.ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария,
	|	ЕСТЬNULL(СоставДокумента.ЕстьДанныеБюджета, ЛОЖЬ) КАК ЕстьДанныеБюджета,
	|	ЕСТЬNULL(СоставДокумента.ЕстьЗависимыеОбороты, ЛОЖЬ) КАК ЕстьЗависимыеОбороты,
	|	Реквизиты.РежимФормированияДвижений КАК РежимФормированияДвижений,
	|	Реквизиты.ПериодичностьКонтроля КАК ПериодичностьКонтроля,
	|	Реквизиты.Фиксированныймакет КАК Фиксированныймакет,
	|	Реквизиты.РежимПринятияКУчету КАК РежимПринятияКУчету
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДокумента КАК СоставДокумента
	|		ПО (ИСТИНА)";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции 
 
Функция ТекстЗапросаВременнаяТаблицаДокумента(НомераТаблиц, Реквизиты)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаДокумента", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(""БДДС"" КАК СТРОКА(50)) КАК ИмяСписка,
	|	ВЫРАЗИТЬ(""Данные бюджета"" КАК СТРОКА(50)) КАК ПредставлениеСписка,
	|	ТаблицаДанные.Ссылка КАК Ссылка,
	|	ТаблицаДанные.НомерСтроки КАК НомерСтроки,
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
	//|	Реквизиты.Сценарий КАК Сценарий,
	|	ВЫБОР 
	|		КОГДА ТаблицаДанные.Сценарий = Значение(Справочник.СценарииПланирования.ПустаяСсылка) 
	|			ТОГДА Реквизиты.Сценарий
	|		ИНАЧЕ ТаблицаДанные.Сценарий 
	|	КОНЕЦ КАК Сценарий,
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	ТаблицаДанные.ЦФО КАК ЦФО,
	|	ТаблицаДанные.СтатьяОборотов КАК СтатьяОборотов,
	|	ТаблицаДанные.Количество КАК Количество,
	|	ТаблицаДанные.Норма КАК Норма,
	|	ВЫБОР
	|		КОГДА ТаблицаДанные.СтатьяОборотов.ЭтоКоэффициент
	|			ТОГДА ЕСТЬNULL(ТаблицаДанные.Сумма, 0)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаДанные.Сумма, 0) * &КоэффициентСуммы
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДанные.Период КАК Период,
	|	ТаблицаДанные.Комментарий КАК Комментарий,
	|	ТаблицаДанные.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДанные.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	ТаблицаДанные.Расчетная КАК Расчетная,
	|	ТаблицаДанные.Аналитика_1 КАК Аналитика_1,
	|	ТаблицаДанные.Аналитика_2 КАК Аналитика_2,
	|	ТаблицаДанные.Аналитика_3 КАК Аналитика_3,
	|	ТаблицаДанные.Аналитика_4 КАК Аналитика_4,
	|	ТаблицаДанные.Аналитика_5 КАК Аналитика_5,
	|	ТаблицаДанные.Аналитика_6 КАК Аналитика_6,
	|	ТаблицаДанные.Аналитика_7 КАК Аналитика_7,
	|	ТаблицаДанные.Контрагент КАК Контрагент,
	|	ТаблицаДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДанные.Проект КАК Проект,
	|	ТаблицаДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаДанные.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ВременнаяТаблицаДокумента
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК ТаблицаДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаДанные.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА &Фиксированныймакет
	|				ТОГДА ВЫБОР
	|						КОГДА &РежимФормированияДвижений = ЗНАЧЕНИЕ(Перечисление.бит_РежимыФормированияДвиженийФормыВвода.Расчетные)
	|							ТОГДА ТаблицаДанные.Расчетная
	|						КОГДА &РежимФормированияДвижений = ЗНАЧЕНИЕ(Перечисление.бит_РежимыФормированияДвиженийФормыВвода.ИсключаяРасчетные)
	|							ТОГДА НЕ ТаблицаДанные.Расчетная
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Если Реквизиты.ЕстьЗависимыеОбороты Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(""ЗависимыеОбороты"" КАК СТРОКА(50)) КАК ИмяСписка,
		|	ВЫРАЗИТЬ(""Зависимые обороты"" КАК СТРОКА(50)) КАК ПредставлениеСписка,
		|	ТаблицаЗависимые.Ссылка КАК Ссылка,
		|	ТаблицаЗависимые.НомерСтроки КАК НомерСтроки,
		|	Реквизиты.Сценарий КАК Сценарий,
		|	Реквизиты.ВалютаДокумента КАК Валюта,
		|	ТаблицаЗависимые.ЦФО КАК ЦФО,
		|	ТаблицаЗависимые.СтатьяОборотов КАК СтатьяОборотов,
		|	ТаблицаЗависимые.Количество КАК Количество,
		|	0 КАК Норма,
		|	ТаблицаЗависимые.Сумма КАК Сумма,
		|	ТаблицаЗависимые.Период КАК Период,
		|	ТаблицаЗависимые.Комментарий КАК Комментарий,
		|	ТаблицаЗависимые.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаЗависимые.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,
		|	ТаблицаЗависимые.Расчетная КАК Расчетная,
		|	ТаблицаЗависимые.Аналитика_1 КАК Аналитика_1,
		|	ТаблицаЗависимые.Аналитика_2 КАК Аналитика_2,
		|	ТаблицаЗависимые.Аналитика_3 КАК Аналитика_3,
		|	ТаблицаЗависимые.Аналитика_4 КАК Аналитика_4,
		|	ТаблицаЗависимые.Аналитика_5 КАК Аналитика_5,
		|	ТаблицаЗависимые.Аналитика_6 КАК Аналитика_6,
		|	ТаблицаЗависимые.Аналитика_7 КАК Аналитика_7,
		|	ТаблицаЗависимые.Контрагент КАК Контрагент,
		|	ТаблицаЗависимые.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ТаблицаЗависимые.Проект КАК Проект,
		|	ТаблицаЗависимые.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ТаблицаЗависимые.БанковскийСчет КАК БанковскийСчет
		|ИЗ
		|	Документ.бит_ФормаВводаБюджета.ЗависимыеОбороты КАК ТаблицаЗависимые
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ТаблицаЗависимые.Ссылка = &Ссылка
		|	И ВЫБОР
		|			КОГДА &Фиксированныймакет
		|				ТОГДА ВЫБОР
		|						КОГДА &РежимФормированияДвижений = ЗНАЧЕНИЕ(Перечисление.бит_РежимыФормированияДвиженийФормыВвода.Расчетные)
		|							ТОГДА ТаблицаЗависимые.Расчетная
		|						КОГДА &РежимФормированияДвижений = ЗНАЧЕНИЕ(Перечисление.бит_РежимыФормированияДвиженийФормыВвода.ИсключаяРасчетные)
		|							ТОГДА НЕ ТаблицаЗависимые.Расчетная
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	КонецЕсли; 	
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();;
	
КонецФункции

Функция ТекстЗапросаТаблицыВалютногоПерерасчета(НомераТаблиц, Реквизиты)
	
	НомераТаблиц.Вставить("ВремТаблицаПериодов",НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПериодов",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Сценарии",			НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанныеБюджета.Период КАК Период,
	|	ТаблицаДанныеБюджета.Сценарий КАК Сценарий,
	|	ТаблицаДанныеБюджета.Сценарий.ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария,
	|	ТаблицаДанныеБюджета.Сценарий.Валюта КАК Валюта
	|ПОМЕСТИТЬ ВремТаблицаПериодов
	|ИЗ
	|	ВременнаяТаблицаДокумента КАК ТаблицаДанныеБюджета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблицаПериодов.Период КАК Период,
	|	ВремТаблицаПериодов.Сценарий КАК Сценарий,
	|	ВремТаблицаПериодов.ИспользоватьКурсыСценария КАК ИспользоватьКурсыСценария
	|ИЗ
	|	ВремТаблицаПериодов КАК ВремТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремТаблицаПериодов.Сценарий КАК Сценарий,
	|	ВремТаблицаПериодов.Валюта КАК Валюта
	|ИЗ
	|	ВремТаблицаПериодов КАК ВремТаблицаПериодов";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Функция ТекстЗапросаТаблицаКонтрольныеЗначения(НомераТаблиц, Реквизиты)
	
	НомераТаблиц.Вставить("ТаблицаКонтрольныеЗначения", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанные.ИмяСписка КАК ИмяСписка,
	|	ТаблицаДанные.ПредставлениеСписка КАК ПредставлениеСписка,
	|	ТаблицаДанные.Ссылка КАК Ссылка,
	|	ТаблицаДанные.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанные.Сценарий КАК Сценарий,
	|	ТаблицаДанные.Валюта КАК Валюта,
	|	ТаблицаДанные.ЦФО КАК ЦФО,
	|	ТаблицаДанные.СтатьяОборотов КАК СтатьяОборотов,
	|	ТаблицаДанные.Количество КАК Количество,
	|	ТаблицаДанные.Норма КАК Норма,
	|	ТаблицаДанные.Сумма КАК Сумма,
	|	ТаблицаДанные.Период КАК Период,
	|	ТаблицаДанные.Комментарий КАК Комментарий,
	|	ТаблицаДанные.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДанные.ЭтоКоэффициент КАК ЭтоКоэффициент,
	|	ТаблицаДанные.Расчетная КАК Расчетная,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаСценарий,
	|	ТаблицаДанные.Аналитика_1 КАК Аналитика_1,
	|	ТаблицаДанные.Аналитика_2 КАК Аналитика_2,
	|	ТаблицаДанные.Аналитика_3 КАК Аналитика_3,
	|	ТаблицаДанные.Аналитика_4 КАК Аналитика_4,
	|	ТаблицаДанные.Аналитика_5 КАК Аналитика_5,
	|	ТаблицаДанные.Аналитика_6 КАК Аналитика_6,
	|	ТаблицаДанные.Аналитика_7 КАК Аналитика_7,
	|	ТаблицаДанные.Контрагент КАК Контрагент,
	|	ТаблицаДанные.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаДанные.Проект КАК Проект,
	|	ТаблицаДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ТаблицаДанные.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	ВременнаяТаблицаДокумента КАК ТаблицаДанные";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
КонецФункции

Процедура ПодготовитьТаблицыДокументаРасчетыВВалюте(ПараметрыПроведения, Реквизиты)

	Если ПараметрыПроведения.ТаблицаКонтрольныеЗначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сценарии			= ПараметрыПроведения.Сценарии;
	ТаблицаПериодов		= ПараметрыПроведения.ТаблицаПериодов;
	КонтрольныеЗначения = ПараметрыПроведения.ТаблицаКонтрольныеЗначения;
	КурсыПоПериодам		= Неопределено;
	
	Если ТаблицаПериодов.Количество() >= 1000 Тогда
		ТаблицаПериодов.Индексы.Добавить("Сценарий");
	КонецЕсли; 
	
	Если КонтрольныеЗначения.Количество() >= 1000 Тогда
		КонтрольныеЗначения.Индексы.Добавить("Сценарий");
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
	Если Реквизиты.ИспользоватьКурсыСценария = NULL Тогда
		Реквизиты.ИспользоватьКурсыСценария = Истина;
	КонецЕсли;	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
	
	Если Реквизиты.ИспользоватьКурсыСценария Тогда
		Для каждого СтрокаТаблицы Из Сценарии Цикл
				
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
			Если НЕ СтрокаТаблицы.Сценарий.ИспользоватьКурсыСценария = Истина Тогда
    			Продолжить;
			Иначе
				СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(СтрокаТаблицы.Сценарий, СтрокаТаблицы.Сценарий.Валюта, Реквизиты.Период);
				СтрКурса.Вставить("Валюта", СтрокаТаблицы.Сценарий.Валюта);
				Реквизиты.КурсыВалют.Вставить("Сценарий", СтрКурса);
				
			КонецЕсли;	
			//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
			
			Отбор	= Новый Структура("Сценарий", СтрокаТаблицы.Сценарий);
			Периоды = ТаблицаПериодов.Скопировать(Отбор);
			Валюты  =  бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(СтрокаТаблицы.Сценарий, Реквизиты.ВалютаДокумента);
		
			КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(Периоды, СтрокаТаблицы.Сценарий, Валюты);
			
			НайденныСтроки = КонтрольныеЗначения.НайтиСтроки(Отбор);
			бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(НайденныСтроки, 
								КурсыПоПериодам, Реквизиты.КурсыВалют);

		КонецЦикла; 
	Иначе
		
		бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(КонтрольныеЗначения, 
								Неопределено, Реквизиты.КурсыВалют);
	КонецЕсли;
							
КонецПроцедуры

Функция ПодготовитьТаблицуКонтрольныхЗначений(ТаблицаДляКонтроля, ИзмеренияКонтроля, Реквизиты)
		
	Периодичность = Реквизиты.ПериодичностьКонтроля;	
	бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля, ИзмеренияКонтроля, Периодичность);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля",				ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий",						Реквизиты.Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",	Истина);
	СтруктураПараметров.Вставить("РежимКонтроля",					"Бюджет");
	
	ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;	
	
	ТаблицаДляКонтроля.Сортировать("Период Возр");
	
	Если ТаблицаДляКонтроля.Количество() > 0 Тогда	   
		ДатаНачала    = ТаблицаДляКонтроля[0].Период;
		ДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;	   
	Иначе	   
		ДатаНачала    = Реквизиты.Период;
		ДатаОкончания = Реквизиты.Период;	   
	КонецЕсли; 
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала,Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания,Периодичность);
	
	МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания",			ДатаКон);
	Запрос.УстановитьПараметр("СценарийКонтролируемый",	Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("МассивСтатьяОборотов",	МассивСтатей);
	Запрос.УстановитьПараметр("Ссылка",					Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаДляКонтроля",		ТаблицаДляКонтроля);
	
	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля, ИзмеренияКонтроля, Запрос);
	
	Возврат Запрос.Выполнить();

КонецФункции

#КонецОбласти 

//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
Функция ВвестиНаОснованииТонкийКлиент(Ссылка, ВыборСуммы) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокОснование",Ссылка);
	
	ТЗСтрок = Ссылка.БДДС.Выгрузить();
	Если Ссылка.Сценарий = Справочники.бит_СценарииБюджетирования.Заявка_Инвест ИЛИ Ссылка.Сценарий = Справочники.бит_СценарииБюджетирования.Заявка_У Тогда 
		ТЗСтрок.ЗаполнитьЗначения(Документы.бит_ФормаВводаБюджета.ПустаяСсылка(),"Аналитика_1");
	ИначеЕсли Ссылка.Сценарий = Справочники.бит_СценарииБюджетирования.Контракт_Инвест Тогда  
		ТЗСтрок.ЗаполнитьЗначения(Ссылка.бит_БК_НомерЗаявки,"Аналитика_1");
	КонецЕсли;	
	
	ДанныеЗаполнения.Вставить("МассивСтрокПревышения", ТЗСтрок);
	ДанныеЗаполнения.Вставить("ВыборСуммы", ВыборСуммы);
	#Если Клиент Тогда
		ДанныеЗаполнения.Вставить("Дата", РабочаяДата);
	#Иначе
		ДанныеЗаполнения.Вставить("Дата", ТекущаяДата());
	#КонецЕсли
	
	ДокументКорректировка = Документы.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.СоздатьДокумент();
	ДокументКорректировка.Заполнить(ДанныеЗаполнения);
	
	Для Каждого Стр Из ДокументКорректировка.СуммыКорректировок Цикл
		
		Если Стр.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Приход Тогда
			
			Отбор =  Новый Структура("КонтролируемаяСтатья", Стр.СтатьяОборотов);
			СтруктураЗначений = РегистрыСведений.бит_БК_КонтролирующиеСтатьиОборотов.ПолучитьПоследнее(ТекущаяДата(),Отбор);
			
			Если Не СтруктураЗначений.КонтролирующаяСтатья.Пустая() И СтруктураЗначений.АктивностьСтроки = Истина Тогда			
				Стр.СтатьяОборотов = СтруктураЗначений.КонтролирующаяСтатья; 
			КонецЕсли;			
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	Возврат ДокументКорректировка;
	
КонецФункции
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

//bit_SVKushnirenko 27.12.2016 #2671
// Выполняет вычисление значения ОК_ОЦР вне контекста модуля объекта
//Параметры:
//парЦФО - измерение отбора по регистру ЦФО 
//парСтатьяОборото - измерение отбора по регистру СтатьяОборотов
//парАналитика_2 - измерение отбора по регистру Аналитика_2 (Объект)
Функция ЗаполнитьОЦР(парЦФО, парСтатьяОборотов, парАналитика_2) Экспорт
	
	пТекущийРежимПривилегий = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.ОК_БК_ОтветственныеЗаЦентрРезультата.ПолучитьОЦР(
		Новый Структура("СтатьяОборотов, ОбъектСтроительства, ЦФО",
			парСтатьяОборотов, 
			парАналитика_2, 
			парЦФО)
		);
	
	УстановитьПривилегированныйРежим(пТекущийРежимПривилегий);
КонецФункции // ЗаполнитьОЦР()

//bit_SVKushnirenko 31.01.2017 #2671
//Выполняет прямую запись значения бюджетодержателя в данные регистра бит_УстановленныеВизы
//если записей в регистре нет, изменения не выполняются
// Параметры:
//парОбъектСсылка  - ссылка на документ для которого обновляются данные виз
//парФизЛицо - Физическое лицо, которое следует записать в данные регистра установленых виз
Функция УстановитьЛицоБюджетодержателя(парОбъектСсылка, парФизЛицо) Экспорт
	
	пТекущийРежим = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	пНаборЗаписей = РегистрыСведений.бит_УстановленныеВизы.СоздатьНаборЗаписей();
	пНаборЗаписей.Отбор.Объект.Установить(парОбъектСсылка); 
	пНаборЗаписей.Отбор.Виза.Установить(Справочники.бит_Визы.бит_БК_Бюджетодержатель); 
	пНаборЗаписей.Прочитать();
	
	Если пНаборЗаписей.Количество() <>  0 Тогда
		
		Для каждого пЗапись Из пНаборЗаписей Цикл
			
			пЗапись.ФизическоеЛицо = парФизЛицо;
		КонецЦикла; 
		
		пНаборЗаписей.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(пТекущийРежим);
КонецФункции // УстановитьЛицоБюджетодержателя()

//bit_SVKushnirenko 30.01.2017 #2671
//Возвращает значение бюджетодержателя из данных регистра визирования для документа
// Параметры:
//парСсылка - ссылка на форму ввода бюджета
//парТекущееЗначениеОЦР - текущее значение ОЦР (требуется при еще не сохраненном документе, но во время первых итераций синхронизации)
Функция ПолучитьБюджетодержателяИзДанныхРегистраВиз(парСсылка, парТекущееЗначениеОЦР) Экспорт
	
	Если НЕ ЗначениеЗаполнено(парСсылка) Тогда
		
		Возврат парТекущееЗначениеОЦР;
	КонецЕсли;
	
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = 
	"ВЫБРАТЬ
	|	бит_УстановленныеВизы.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	бит_УстановленныеВизы.Объект = &пзОбъект
	|	И бит_УстановленныеВизы.Виза = ЗНАЧЕНИЕ(Справочник.бит_Визы.бит_БК_Бюджетодержатель)";
	
	пЗапрос.УстановитьПараметр("пзОбъект", парСсылка);
	
	пТЗРез = пЗапрос.Выполнить().Выгрузить();
	Если пТЗРез.Количество() = 0 Тогда
		
		Возврат Справочники.бит_БК_Инициаторы.ПустаяСсылка();
	Иначе
		
		Возврат пТЗРез[0].ФизическоеЛицо;
	КонецЕсли;
КонецФункции // ПолучитьБюджетодержателяИзДанныхРегистраВиз()

//bit_SVKushnirenko 28.12.2016 #2671.1
//Возвращает настройки синхронизации шапки и ТЧ
Функция ПолучитьНастройкиСинхронизации() Экспорт
	
	пМакет = ПолучитьМакет("бит_КартаСинхронизацииБДДСвШапку");
	
	пНастройкиСинхронизации = Новый ТаблицаЗначений;
	пКолонки = пНастройкиСинхронизации.Колонки;
	пКолонки.Добавить("Приемник");
	пКолонки.Добавить("Источник");
	пКолонки.Добавить("ПриемникСиноним");
	пКолонки.Добавить("ИсточникСиноним");
	
	пСтрокаДанных = 2;
	Пока Истина Цикл
		
		пОбластьПриемник = пМакет.Область("R" + Формат(пСтрокаДанных, "ЧГ=0") + "C1");
		пОбластьИсточник = пМакет.Область("R" + Формат(пСтрокаДанных, "ЧГ=0") + "C2");
		пОбластьПриемникСиноним = пМакет.Область("R" + Формат(пСтрокаДанных, "ЧГ=0") + "C3");
		пОбластьИсточникСиноним = пМакет.Область("R" + Формат(пСтрокаДанных, "ЧГ=0") + "C4");
		
		Если СокрЛП(пОбластьПриемник.Текст) = ""  Тогда
			
			Прервать;
		КонецЕсли;
		
		пНоваяНастройка = пНастройкиСинхронизации.Добавить();
		пНоваяНастройка.Приемник = пОбластьПриемник.Текст;
		пНоваяНастройка.Источник = пОбластьИсточник.Текст;
		пНоваяНастройка.ПриемникСиноним = пОбластьПриемникСиноним.Текст;
		пНоваяНастройка.ИсточникСиноним = пОбластьИсточникСиноним.Текст;
		
		пСтрокаДанных = пСтрокаДанных + 1;
	КонецЦикла; 
	
	Возврат пНастройкиСинхронизации;
КонецФункции // ПолучитьНастройкиСинхронизации()

//bit_SVKushnirenko 28.12.2016 #2671.1
//Выполняет проверку необходимости синхронизации
//Возврат:
//Булево: Истина = есть необходимость синхронизации; Ложь = нет необходимости синхронизации
// Параметры:
//парНастройкиСинхронизации - Таблица значений (из ПолучитьНастройкиСинхронизации()) с настройками синхронизации
//парОбъект -  ДокументОбъект.бит_ФормаВводаБюджета в котором совершается операция
//парПредставлениеРазличий - Строка с представлением разлиций в реквизитах, 
//парВыводитьСообщение - Истина = выводить сообщения в окне сообщений, Ложь = не выводить сообщения в окне сообщений
Функция ЕстьНеобходимостьСинхронизации(парНастройкиСинхронизации, парОбъект, парПредставлениеРазличий = "", парВыводитьСообщение = Ложь) Экспорт
	
	пРезультат = Ложь;
	пБДДС = парОбъект.БДДС;
	
	парПредставлениеРазличий = "";
	
	Если пБДДС.Количество() <> 0  Тогда
		
		пПерваяСтрокаБДДС = пБДДС[0];
		
		Для каждого пСтрокаНастройка Из парНастройкиСинхронизации Цикл
			
			пЗначениеШапки = Вычислить(СтрЗаменить(пСтрокаНастройка.Приемник, "%1", "парОбъект"));
			
			пШаблонЗначенияТЧ = СтрЗаменить(пСтрокаНастройка.Источник, "%1", "парОбъект");
			пШаблонЗначенияТЧ = СтрЗаменить(пШаблонЗначенияТЧ, "%2", "пПерваяСтрокаБДДС");
			пЗначениеТЧ = Вычислить(пШаблонЗначенияТЧ);
			
			//Если пЗначениеШапки <>  пЗначениеТЧ и СокрЛП(пЗначениеТЧ) <>  "" И СокрЛП(пЗначениеТЧ) <> "0" Тогда
			Если пЗначениеШапки <>  пЗначениеТЧ Тогда //даже если значение в ТЧ пустое, перезапишем шапку и суррогаты по требованию Бузник отчет об ошибках: 2671_3
				
				пРезультат = Истина;
				
				парПредставлениеРазличий = парПредставлениеРазличий + ?(парПредставлениеРазличий = "", "", Символы.ПС) + """" + пСтрокаНастройка.ПриемникСиноним + """ - отличается от: """ + пСтрокаНастройка.ИсточникСиноним + """";
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	парПредставлениеРазличий = "Обнаружены различия:" + Символы.ПС + парПредставлениеРазличий;
	Если парВыводитьСообщение и парПредставлениеРазличий.Количество() > 0 Тогда
		
		Сообщить(парПредставлениеРазличий);
	КонецЕсли;
	
	Возврат пРезультат;
КонецФункции // ЕстьНеобходимостьСинхронизации()

//bit_SVKushnirenko 28.12.2016 #2671.1
//Выполняет безусловную синхронизацию данных шапки (Приемник) из данных ТЧ (Источник)
// Параметры:
//парНастройкиСинхронизации - Таблица значений (из ПолучитьНастройкиСинхронизации()) с настройками синхронизации
//парОбъект -  ДокументОбъект.бит_ФормаВводаБюджета в котором совершается операция
Процедура  СинхронизацияПриемникИсточник(парНастройкиСинхронизации = Неопределено, парОбъект) Экспорт
	
	Если парНастройкиСинхронизации = Неопределено  Тогда
		
		парНастройкиСинхронизации = ПолучитьНастройкиСинхронизации();
	КонецЕсли;
	
	пРезультат = Ложь;
	пБДДС = парОбъект.БДДС;
	
	Если пБДДС.Количество() <> 0  Тогда
		
		пПерваяСтрокаБДДС = пБДДС[0];
		//пЧислоСтрокБДДСРавно1 = пБДДС.Количество() = 1;
		
		Для каждого пСтрокаНастройка Из парНастройкиСинхронизации Цикл
			
			пЗначениеШапки = СтрЗаменить(пСтрокаНастройка.Приемник, "%1", "парОбъект");
			
			пШаблонЗначенияТЧ = СтрЗаменить(пСтрокаНастройка.Источник, "%1", "парОбъект");
			пШаблонЗначенияТЧ = СтрЗаменить(пШаблонЗначенияТЧ, "%2", "пПерваяСтрокаБДДС");
			пЗначениеТЧ = Вычислить(пШаблонЗначенияТЧ);
			
			//Если пЧислоСтрокБДДСРавно1 ИЛИ (СокрЛП(пЗначениеТЧ) <> "" И СокрЛП(пЗначениеТЧ) <> "0") Тогда //если в ТЧ одна строка, синхронизация делается независимо от заполненности данных
			
			Выполнить(пЗначениеШапки + " = пЗначениеТЧ;"); //безусловная синхронизация реквизита первой строки по требованию Бузник отчет об ошибках: 2671_3
			//КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры // СинхронизацияПриемникИсточник()

//{bit_SVKushnirenko 21.03.2017 #2759
//Возвращает наличие значнеия "Обороудование = Да" в дополнительных сведениях статей оборотов
// Параметры:
//парМассивСтатей - массив статей оборотов табличной части
Функция ЕстьПризнакОборудованиеВСтатьяхОборотов(парМассивСтатей) Экспорт
	
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
	//"ВЫБРАТЬ
	//Заменено на:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатьиОборотов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Статьи
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|ГДЕ
	|	бит_СтатьиОборотов.Ссылка В(&пзМассивСтатейОборотов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
	|	ЕстьNull(МАКСИМУМ(ДополнительныеСведения.Значение), Ложь) КАК ПризнакОборудование
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-29 (#2942)
	|ПОМЕСТИТЬ ВТ_Итог
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-29 (#2942)
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//Заменено на:
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Статьи КАК ВТ_Статьи
	|			ПО ДополнительныеСведения.Объект = ВТ_Статьи.Ссылка
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
	|		ПО (ДополнительныеСведения.Свойство = ДополнительныеРеквизитыИСведения.Ссылка)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
	|			И Выразить(ДополнительныеСведения.Значение КАК БУЛЕВО) = ИСТИНА
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
	|ГДЕ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
	//|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.бит_СтатьиОборотов) В (&пзМассивСтатейОборотов)
	//|	И ДополнительныеРеквизитыИСведения.Заголовок = ""Оборудование""";  	
	//Заменено на:
	|	ДополнительныеРеквизитыИСведения.Заголовок = ""Оборудование""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Итог.ПризнакОборудование
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	|	ВТ_Итог.ПризнакОборудование = ИСТИНА";  	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
	
	пЗапрос.УстановитьПараметр("пзМассивСтатейОборотов", парМассивСтатей);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-28 (#2942)
	//пТЗРез = пЗапрос.Выполнить().Выгрузить();
	
	//Если пТЗРез.Количество() = 0 Тогда  
	//	
	//	Возврат Ложь;
	//Иначе
	//	
	//	Возврат пТЗРез[0].ПризнакОборудование;
	//КонецЕсли;
	Возврат НЕ пЗапрос.Выполнить().Пустой();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-28 (#2942)
КонецФункции // ЕстьПризнакОборудованиеВСтатьяхОборотов() }bit_SVKushnirenko 21.03.2017 #2759 

//{bit_SVKushnirenko 06.06.2017 #2759
//Возвращает признак необходимости цели приобретения оборудования для операции и статей оборотов в документе
// Параметры:
//парДатаДокумента - дата документа ФВБ 
//парОперацияДокумента - операция документа-ФВБ 
//парМассивСтатей - массив статей документа-ФВБ
Функция НеобходимостьЦелиПриобретенияОборудования(парДатаДокумента, парОперацияДокумента, парМассивСтатей) Экспорт
	
	//Проверка признака "Оборудование" в дополнительны свойствах статей оборотов
	Если парДатаДокумента < Дата(2017, 08, 09) или
		парОперацияДокумента = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан или
		парОперацияДокумента = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда  
		
		Возврат Ложь;
	Иначе
		
		Возврат ЕстьПризнакОборудованиеВСтатьяхОборотов(парМассивСтатей);
	КонецЕсли;
КонецФункции // НеобходимостьЦелиПриобретенияОборудования() }bit_SVKushnirenko 06.06.2017 #2759 

//{bit_SVKushnirenko 21.03.2017 #2759
//Возвращает строковый список статей оборотов, для которых имеется значнеия "Обороудование = Да" в дополнительных сведениях статей оборотов
// Параметры:
//парМассивСтатей - массив статей оборотов табличной части
Функция СтрСписокСтатейОборотовСПризнакОборудование(парМассивСтатей) Экспорт
	
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.бит_СтатьиОборотов) КАК СтатьяОборотов
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.Свойство = ДополнительныеРеквизитыИСведения.Ссылка)
	|ГДЕ
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.бит_СтатьиОборотов) В (&пзМассивСтатейОборотов)
	|	И ДополнительныеРеквизитыИСведения.Заголовок = ""Оборудование""
	|	И (ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК БУЛЕВО)) = ИСТИНА";  	
	
	пЗапрос.УстановитьПараметр("пзМассивСтатейОборотов", парМассивСтатей);
	
	пТЗРез = пЗапрос.Выполнить().Выгрузить();
	
	Если пТЗРез.Количество() = 0 Тогда  
		
		Возврат "";
	Иначе
		
		пПредставлениеСпискаСтатей = "";
		Для каждого пСтрока Из пТЗРез Цикл
			
			пПредставлениеСпискаСтатей = пПредставлениеСпискаСтатей + ?(пПредставлениеСпискаСтатей = "", "", Символы.ПС) + "- " + пСтрока.СтатьяОборотов;
		КонецЦикла; 
		Возврат пПредставлениеСпискаСтатей;
	КонецЕсли;
КонецФункции // СтрСписокСтатейОборотовСПризнакОборудование() }bit_SVKushnirenko 21.03.2017 #2759 
#КонецЕсли
