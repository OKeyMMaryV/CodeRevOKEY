#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мИзмеренияВсе Экспорт; // Хранит измерения бюджетирования.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения бюджетирования.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

Перем мПроводитьПослеУтверждения Экспорт; // Хранит признак работы в режиме "ПроводитьДокументыПослеУтверждения".

//Начало_бит_БК_Магомедов_16.12.2011
Перем бит_БК_СтатусВручную Экспорт;
Перем мСтатусУстановленныйВручную Экспорт;
Перем бит_БК_WEBКлиент Экспорт; //Признак того что запись производится из тонкого или web клиента
//Перем РассчитыватьСуммуЗаРамками;
//Конец_бит_БК_Магомедов_16.12.2011

//Калинин М. 070213    для регистрации изменений в регистре история событий
//структура задается перед записью объекта
Перем ПараметрыЗаписи Экспорт;
//Калинин М.

// + БИТ AMerkulov 2015-05-14
Перем мОчищатьНомерПриОткатеТранзакции Экспорт;

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-18 (#2971)
Перем пИнициированныеВизы; //Соответствие Виза-Массив номеров строк с выполненными условиями по маршруту, которые передаются в Запрос источника данных для определения сложных виз
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-18 (#2971)

//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
Перем мРежимЗаписи;
//1С-ИжТиСи, Кондратьев, 03.2020, обновление )

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//{ bit SVKushnirenko Bit 10.02.2017 #2671.(запрет пометки удаления проведенных документов)
	ДополнительныеСвойства.Вставить("ОтменаПроведенияПроведенногоДокумента", РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	//} bit SVKushnirenko Bit 10.02.2017 #2671.(запрет пометки удаления проведенных документов)	
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	мРежимЗаписи = РежимЗаписи;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	//+Сундукова 12.05.16 №2240
	Если ЗначениеЗаполнено(бит_БК_ЦФО) тогда
		цфо = бит_БК_ЦФО;
	КонецЕсли;	
	для каждого ТекСтрока из бддс цикл
		Если не ЗначениеЗаполнено(ТекСтрока.ЦФО) тогда
			текСтрока.ЦФО = ЦФО;
		КонецЕсли;
	КонецЦикла;	
	//-Сундукова 12.05.16 №2240

	Если ОбменДанными.Загрузка Тогда
		Возврат;	
	КонецЕсли; 
	
	//БИТ АКриштопов ++ 27052016 №2482
	КоличествоУ = 0;
	КоличествоИнвест = 0;	
	Для Каждого Строка Из БДДС Цикл
		
		Если Строка.Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда
			КоличествоУ = КоличествоУ + 1;
		ИначеЕсли Строка.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест Тогда
			КоличествоИнвест = КоличествоИнвест + 1;			
		КонецЕсли;
		
	КонецЦикла;
	Если БДДС.Количество() > 0 И КоличествоИнвест = БДДС.Количество() И ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
		Для Каждого СтрокаБДДС из БДДС Цикл
			Если Не ЗначениеЗаполнено(СтрокаБДДС.Проект) Тогда
				// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
				//Сообщение = Новый СообщениеПользователю;
				//Сообщение.Текст = "В строке табличной части " + СтрокаБДДС.НомерСтроки + " не заполнен проект. Документ не будет записан";
				//Сообщение.Сообщить();
				//Отказ = Истина;
				//Возврат;
				ТекстСообщения = "В строке табличной части " + СтрокаБДДС.НомерСтроки + " не заполнен проект. Документ не будет записан";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "БДДС["+Строка(СтрокаБДДС.НомерСтроки-1)+"].Проект", "Объект", Отказ);
				// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный  
		И БДДС.Количество() > 0 И  КоличествоИнвест <> БДДС.Количество() И  КоличествоУ <> БДДС.Количество() Тогда
		Для Каждого СтрокаБДДС из БДДС Цикл
			Если СтрокаБДДС.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест Тогда
				Если Не ЗначениеЗаполнено(СтрокаБДДС.Проект) Тогда
					// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = "В строке табличной части " + СтрокаБДДС.НомерСтроки + " не заполнен проект. Документ не будет записан";
					//Сообщение.Сообщить();
					//Отказ = Истина;
					//Возврат;
					ТекстСообщения = "В строке табличной части " + СтрокаБДДС.НомерСтроки + " не заполнен проект. Документ не будет записан";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "БДДС["+Строка(СтрокаБДДС.НомерСтроки-1)+"].Проект", "Объект", Отказ);
					// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
		Для Каждого СтрокаБДДС из БДДС Цикл
			Если СтрокаБДДС.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест Тогда
				Если Не ЗначениеЗаполнено(СтрокаБДДС.Проект) Тогда
					// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
					//Сообщение = Новый СообщениеПользователю;
					//Сообщение.Текст = "В строке табличной части " + СтрокаБДДС.НомерСтроки + " не заполнен проект. Документ не будет записан";
					//Сообщение.Сообщить();
					//Отказ = Истина;
					//Возврат;
					ТекстСообщения = "В строке табличной части " + СтрокаБДДС.НомерСтроки + " не заполнен проект. Документ не будет записан";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "БДДС["+Строка(СтрокаБДДС.НомерСтроки-1)+"].Проект", "Объект", Отказ);
					// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	//БИТ АКриштопов -- 27052016 №2482
	// + БИТ AMerkulov 2015-05-14
	
	//Если документ сразу проводится, при отмене транзакции надо очистить номер
	
	Если  ЭтоНовый() И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		мОчищатьНомерПриОткатеТранзакции = Истина;
	Иначе
		мОчищатьНомерПриОткатеТранзакции = Ложь;		
	КонецЕсли;
	
	// + БИТ AMerkulov 2015-05-24 	
	
	// + БИТ AMerkulov 2015-03-24
	Если РольДоступна("Guest") И ПометкаУдаления Тогда
		
		Если мТекущийСтатус <> Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик И мТекущийСтатус <> Справочники.бит_СтатусыОбъектов.ФормаВвода_НаРассмотрении Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Запрещена установка пометки на удаление документов со статусами, отличными от ""Черновик"" и ""На рассмотрении""!";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
		
	КонецЕсли;
	// - БИТ AMerkulov 2015-03-24	
	
	// + БИТ AMerkulov 2014-01-31 /  Установка номера
	
	Если бит_ПорядковыйНомерВМесяце = 0 ИЛИ Не ЗначениеЗаполнено(Номер)  Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	МАКСИМУМ(бит_ФормаВводаБюджета.бит_ПорядковыйНомерВМесяце) КАК бит_ПорядковыйНомерВМесяце
		|ИЗ
		|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(бит_ФормаВводаБюджета.Дата, МЕСЯЦ) = &Дата");
		
		Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
		
		ВыборкаНомера = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаНомера.Следующий() Тогда
			Если НЕ ЗначениеЗаполнено(ВыборкаНомера.бит_ПорядковыйНомерВМесяце) Тогда
				бит_ПорядковыйНомерВМесяце = 1;
			Иначе
				бит_ПорядковыйНомерВМесяце = ВыборкаНомера.бит_ПорядковыйНомерВМесяце + 1;
			КонецЕсли;
			
		Иначе
			бит_ПорядковыйНомерВМесяце = 1;
		КонецЕсли;
		
		
	КонецЕсли;
	
	////Начало_бит_БК_Магомедов_12.03.2012
	////если запись происходит не из WEB и установлен номер с префиксом "W", очищаем номер чтобы сработала подписка ПриУстановкеНовогоНомера
	//Если Не бит_БК_WEBКлиент Тогда
	//	Если ЗначениеЗаполнено(Номер) И Сред(Номер,1,1) = "W" Тогда 
	//		
	//		//ОК Калинин М. 260213 Если пометили на удаление, сохраним номер для истории
	//		Если  ПометкаУдаления = Ссылка.ПометкаУдаления Тогда        				
	//			Если  ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный  
	//	Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный  тогда
	//				#Если Клиент Тогда
	//				Предупреждение("Перед записью необходимо присвоить номер. Номер не должен начинаться с <W>!",10);
	//				#КонецЕсли
	//			иначе                   
	//		//ОК Калинин М.	
	//				Номер = "";
	//			КонецЕсли;
	//		КонецЕсли;
	
	//	КонецЕсли;
	//КонецЕсли;
	////Конец_бит_БК_Магомедов_12.03.2012 
	
	// - БИТ AMerkulov
	
	ДополнительныеСвойства.Вставить("Проведен", Проведен);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если РазрешенАвтоматическийВводЗависимыхОборотов() Тогда
			ЗаполнитьЗависимыеОбороты();
		КонецЕсли; 
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	ПередЗаписьюВБП(Отказ, РежимЗаписи, РежимПроведения);
	
	// Заполним аналитику в шапке документа.
	бит_ОбщегоНазначения.ЗаполнитьАналитикуВШапкеДокумента(ЭтотОбъект, БДДС, Отказ);
	
	// Очистка неиспользуемых разрезов бюджетирования по статье оборотов.
	бит_Бюджетирование.ОчиститьНеИспользуемыеАналитикиСтатейОборотов(БДДС);
	бит_Бюджетирование.ОчиститьНеИспользуемыеАналитикиСтатейОборотов(ЗависимыеОбороты);
	
	Если мПроводитьПослеУтверждения Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОтправленНаСогласование = Истина;
		Иначе
			ОтправленНаСогласование = Ложь;
			бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка)
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		Если мПроводитьПослеУтверждения Тогда
			// Если документ был проведен в системе ранее, без отправки на согласование,
			// при повторном проведении его движения стирать нельзя.
			Если НЕ Проведен ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				РежимПринятияКУчету = 1;
			КонецЕсли;
		Иначе
			РежимПринятияКУчету = 0;
		КонецЕсли;
	КонецЕсли;
	
	//Начало_бит_БК_Магомедов_03.11.2011 
	бит_ЗаполнитьЗначенияПоУмолчаниюВСтроках();
	
	//Устанавливает реквизиты документа для отображения в списке
	УстановитьРеквизитыСписка(Отказ);
	
	//Начало_бит_БК_Магомедов_02.12.2011 
	
	
	// BIT AMerkulov 01092014 ++
	
	Для Каждого Строка Из БДДС Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.бит_БК_НаименованиеОборудования) Тогда
			
			Строка.бит_БК_НаименованиеОборудования = Строка.бит_БК_Расход.Наименование + " " + Строка.ОК_НоменклатураПроизв; 
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	// BIT AMerkulov 01092014 --
	
	// BIT AMerkulov 18092014 ++
	Если БДДС.Количество() И ЗначениеЗаполнено(БДДС[0].бит_БК_Организация) Тогда
		бит_БК_Организация = БДДС[0].бит_БК_Организация;	
	КонецЕсли;
	
	Если БДДС.Количество() И НЕ ЗначениеЗаполнено(БДДС[0].бит_БК_Организация) Тогда
		Для Каждого Стр Из БДДС Цикл
			Стр.бит_БК_Организация = бит_БК_Организация;	
		КонецЦикла;
	КонецЕсли;
	// BIT AMerkulov 18092014 --
	
	// BIT AMerkulov 15122014 ++
	Если ЭтоНовый() Тогда
		бит_ДатаСоздания = ТекущаяДата();
	КонецЕсли;	
	// BIT AMerkulov 15122014 --
	
	// BIT AMerkulov 27042015 ++
	Если Дата > '20150427' И ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда
		Для Каждого Стр Из БДДС Цикл
			Стр.Проект = Неопределено;	
		КонецЦикла;
	КонецЕсли;
	// BIT AMerkulov 27042015 --	
	
	// BIT AMerkulov 27042015 ++
	Если Дата > '20150427' И ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда
		Для Каждого Стр Из БДДС Цикл
			Стр.Проект = Неопределено;	
		КонецЦикла;
	КонецЕсли;
	
	//{ bit_SVKushnirenko 20.12.2016 #2669
	//ИсходныйКод{
	//// BIT AMerkulov 27042015 --	
	////+Сундукова 30.03.2016 - пересчет остатка по бюджету перед записью
	//бит_ФормаВводаБюджетаВызовСервера.ОбновитьДанныеПоОстаткуБюджета(ЭтотОбъект);	
	////-Сундукова 30.03.2016
	//}ИсходныйКод
	
	бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(ЭтотОбъект);
	//} bit_SVKushnirenko 20.12.2016 #2669
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-06 (#2986)
	 ДополнительныеСвойства.Вставить("Проведен", Проведен);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-06 (#2986)	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияНачало(ЭтотОбъект, РежимПроведения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//+Сундукова 12.05.2016 №2240
	
	//{ bit_SVKushnirenko 05.06.2017 #2745
	//ИсходныйКод{
	////{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	////ИсходныйКод{
	////ОбработкаПроверкиЗаполнения(отказ,новый массив); //Сенин 2669
	////}ИсходныйКод
	//
	////+Сенин С.В. 25.05.2016 №2669
	//Если Не ЭтотОбъект.ДополнительныеСвойства.Свойство("БИТ_ИнтерактивноеПроведение")
	//	или ЭтотОбъект.ДополнительныеСвойства.Свойство("БИТ_ИнтерактивноеПроведение")
	//	И ЭтотОбъект.ДополнительныеСвойства.БИТ_ИнтерактивноеПроведение = Ложь Тогда
	//	ОбработкаПроверкиЗаполнения(отказ,новый массив);
	//КонецЕсли; 
	////-Сенин С.В. 25.05.2016 №2669
	////} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//}ИсходныйКод
	
	//отмена некорректного вызова метода, проверки заполнения, замена ошибочного вызова на требуемую проверку заполнения
	пДопСвойства = ЭтотОбъект.ДополнительныеСвойства;
	Если пДопСвойства.Свойство("БИТ_ИнтерактивноеПроведение") и пДопСвойства.БИТ_ИнтерактивноеПроведение Тогда  
		
		Отказ = НЕ ПроверитьЗаполнение();
	КонецЕсли;
	//} bit_SVKushnirenko 05.06.2017 #2745
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-17 (#3018)
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-08 (#2931)
	//Если Не ЭтотОбъект.СБ_ЗапускПроцессаСПроверкой Тогда 
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-08 (#2931)
	Если НЕ (пДопСвойства.Свойство("НеПытатьсяЗакрытьЗаявку") И 
			 пДопСвойства.НеПытатьсяЗакрытьЗаявку)
	Тогда //не проведен не считаем
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-17 (#3018)
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	ЭтотОбъект.Движения.бит_КонтрольныеЗначенияБюджетов.ДополнительныеСвойства.Вставить("бит_БК_УстановкаСтатусаПослеПроведения", Истина);
	//} bit SVKushnirenko Bit 27.01.2017 #2657
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-08 (#2931)
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-08 (#2931)
	
	//-СУндукова 12.05.2016 №2240
	
	//ОК Калинин М. 14.09.2012 проверка номера
	Если Не бит_БК_WEBКлиент Тогда
		Если ВРЕГ(Лев(Ссылка.Номер,1)) = "W" Тогда
			Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
			бит_ОбщегоНазначения.СообщитьОбОшибке("Документ с номером, начинающимся с W, не может быть проведен. Измените номер документа.", Отказ, Заголовок);
		конецесли;	
	конецесли;
	//ОК Калинин М.
	                                
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-27 (#3045)
	Если ЗначениеЗаполнено(Ссылка.бит_БК_НомерЗаявки)Тогда 
		 пНайденныйКонтракт = ОК_ОбщегоНазначения.ПроверитьУникальностьФВБПоКонтрактам(Ссылка); 
		 Если ЗначениеЗаполнено(пНайденныйКонтракт) Тогда 
			 
			 пТекстОшибки = НСтр("ru = 'Для договора, указанного в № заявки уже существует заявка контракт %1'"); 
			 пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки,пНайденныйКонтракт);
			 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки,пНайденныйКонтракт,,,Отказ);
			 
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-27 (#3045)
	
	ПараметрыПроведения = Документы.бит_ФормаВводаБюджета.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
			
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//Документы.бит_ФормаВводаБюджета.СформироватьДвиженияКонтрольныеЗначенияБюджетов(
	//	ПараметрыПроведения.ТаблицаКонтрольныеЗначения, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-21 (#3927)
	//ПараметрыПроведения.ТаблицаОборотыПоБюджетам = ПодготовитьТаблицуБДДСПострочно();
	ПараметрыПроведения.Вставить("ТаблицаБДДС", ПодготовитьТаблицуБДДСПострочно());
	ПараметрыПроведения.ТаблицаОборотыПоБюджетам = ПодготовитьТаблицуОборотыПоБюджетам(ПараметрыПроведения.ТаблицаБДДС.Скопировать());
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-21 (#3927)
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// По регистру контрольные значения.
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-21 (#3927)
		//ДвиженияПоРегиструКонтрольныхЗначенийУниверсальнаяЗаявка(СтруктураШапкиДокумента,ПараметрыПроведения.ТаблицаОборотыПоБюджетам,Отказ,Заголовок);
		ДвиженияПоРегиструКонтрольныхЗначенийУниверсальнаяЗаявка(СтруктураШапкиДокумента,ПараметрыПроведения.ТаблицаБДДС,Отказ,Заголовок);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-21 (#3927)
	Иначе
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-21 (#3927)
		//ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ПараметрыПроведения.ТаблицаОборотыПоБюджетам,Отказ,Заголовок);	
		ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ПараметрыПроведения.ТаблицаБДДС,Отказ,Заголовок);	
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-21 (#3927)
	КонецЕсли;
	Движения.бит_КонтрольныеЗначенияБюджетов.Записывать = Истина;
	Движения.бит_СогласованныеЛимитыПоЗаявкам.Записывать = Истина;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
		
	Документы.бит_ФормаВводаБюджета.СформироватьДвиженияОборотыПоБюджетам(ПараметрыПроведения.ТаблицаОборотыПоБюджетам,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// BIT Amerkulov 30102014 ++
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-21 (#3927)
	//СформироватьДвиженияПоЗаявке(ПараметрыПроведения.ТаблицаОборотыПоБюджетам);
	СформироватьДвиженияПоЗаявке(ПараметрыПроведения.ТаблицаБДДС);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-21 (#3927)
	// BIT Amerkulov 30102014 --		
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-21 (#3927)
	//Документы.бит_ФормаВводаБюджета.СформироватьДвиженияБюджетирование(ПараметрыПроведения.ТаблицаОборотыПоБюджетам,
	//	ПараметрыПроведения.Реквизиты, Движения, Отказ);
	Документы.бит_ФормаВводаБюджета.СформироватьДвиженияБюджетирование(ПараметрыПроведения.ТаблицаБДДС,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-21 (#3927)
	
	Если НЕ Отказ Тогда
			
		// + БИТ AMerkulov 2015-05-14
		Если  мОчищатьНомерПриОткатеТранзакции = Истина Тогда
			Номер = Неопределено;
			бит_ПорядковыйНомерВМесяце = 0;
		КонецЕсли;
		// + БИТ AMerkulov 2015-05-24
		
		//Начало_бит_Магомедов_16.07.2012 не обновляем визы
		//Если НЕ мПроводитьПослеУтверждения Тогда
		//	Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении ИЛИ НЕ мБылПроведен Тогда
		//		СтруктураПараметров = Новый Структура;
		//		СтруктураПараметров.Вставить("ЦФО",ЦФО);		
		//		бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
		//	КонецЕсли; 				
		//КонецЕсли; 
		//Конец_бит_Магомедов_16.07.2012	
		// Установим статус.
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-06 (#2986)
		//Статус установится в обработчике бит_БК_Общий.ПопыткаЗакрытияИлиВозвратаСтатусаЗаявокПоДаннымБК
		//УстановитьСтатус(РежимЗаписиДокумента.Проведение);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-06 (#2986)
	КонецЕсли; 
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаПроведенияЗавершение(ЭтотОбъект); 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2021-02-25 (#4053)
	Движения.ок_СводныеДанныеПоБюджету.Записывать = Ложь; //Записывается набором при запуске маршрута
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2021-02-25 (#4053)
   	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-18 (#2873)
	//Перенес ниже
	////+СБ Пискунова #2691 -После отмены проведения очищаем весь процесс
	//УстановитьПривилегированныйРежим(Истина);
	//Если ЭтотОбъект.Ссылка.Проведен и СБ_ПроцессЗапущен Тогда
	//	//Если ЭтотОбъект.Ссылка.Проведен и  Тогда
	//	бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
	//	СБ_ПроцессЗапущен = Ложь;
	//	СБ_ЗапускПроцессаСПроверкой = Ложь;
	//	//Очистим записи регистров для оповещений:
	//	Отбор = Новый Структура;
	//	Отбор.Вставить("Объект",ЭтотОбъект.Ссылка);
	//	
	//	НаборЗаписей = РегистрыСведений.бит_фн_РегистрацияСобытийОповещений.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
	//	НаборЗаписей.Записать(); 			
	//	
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	бит_фн_Оповещения.ИД,
	//	|	бит_фн_Оповещения.Пользователь
	//	|ИЗ
	//	|	РегистрСведений.бит_фн_Оповещения КАК бит_фн_Оповещения
	//	|ГДЕ
	//	|	бит_фн_Оповещения.СБ_ФормаВводаБюджета В(&СБ_ФормаВводаБюджета)";
	//	
	//	Запрос.УстановитьПараметр("СБ_ФормаВводаБюджета", ЭтотОбъект.Ссылка);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	Если не РезультатЗапроса.Пустой() Тогда
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Пока Выборка.Следующий() Цикл 					
	//			НаборЗаписей = РегистрыСведений.бит_фн_Оповещения.СоздатьНаборЗаписей();
	//			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
	//			НаборЗаписей.Отбор.ИД.Установить(Выборка.ИД);
	//			НаборЗаписей.Записать();
	//		КонецЦикла; 				
	//	КонецЕсли; 		
	//	
	//КонецЕсли;
	//УстановитьПривилегированныйРежим(Ложь);
	////-СБ Пискунова #2691 -После отмены проведения очищаем весь процесс
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-18 (#2873)
	
	//Начало_бит_БК_Магомедов_02.02.2012 
	//если статус черновик или на рассмотрении и установлен вручную отказ в проведении
	//Если бит_БК_СтатусВручную И (мСтатусУстановленныйВручную <> Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик И 
	//	мСтатусУстановленныйВручную <> Справочники.бит_СтатусыОбъектов.ФормаВвода_НаРассмотрении) Тогда 
	//	Отказ = Истина;
	//	#Если НаКлиенте Тогда
	//		Предупреждение("Нельзя отменить проведение документа с установленным вручную статусом <"+мСтатусУстановленныйВручную+">",10);
	//	#КонецЕсли
	//КонецЕсли;
	//Конец_бит_БК_Магомедов_02.02.2012
	//БИТ АКриштопов 11042016 ++
	//если статус черновик или на рассмотрении и установлен вручную отказ в проведении
	//БИТ АКриштопов 21.04.2016 ++ 2240
	БИТ_СогласованоОЦР = Ложь;
	//БИТ АКриштопов 21.04.2016 -- 2240
	
	//{ bit_SVKushnirenko 21.03.2017 #2596
	//ИсходныйКод{
	//Если РольДоступна("Guest") Тогда
	//}ИсходныйКод
	Если РольДоступна("Guest") и НЕ ПривилегированныйРежим() Тогда	
		//} bit_SVKushnirenko 21.03.2017 #2596
		Если мТекущийСтатус <> Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик И мТекущийСтатус <> Справочники.бит_СтатусыОбъектов.ФормаВвода_НаРассмотрении Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Инициаторам запрещена отмена проведения документов с статусами, отличными от ""Черновик"" и ""На рассмотрении""!";
			Сообщение.Сообщить();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//БИТ АКриштопов 11042016 --
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-18 (#2873)  Перенос
	//+СБ Пискунова #2691 -После отмены проведения очищаем весь процесс
	УстановитьПривилегированныйРежим(Истина);
	Если ЭтотОбъект.Ссылка.Проведен и СБ_ПроцессЗапущен Тогда
		//Если ЭтотОбъект.Ссылка.Проведен и  Тогда
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
		СБ_ПроцессЗапущен = Ложь;
		СБ_ЗапускПроцессаСПроверкой = Ложь;
		//Очистим записи регистров для оповещений:
		Отбор = Новый Структура;
		Отбор.Вставить("Объект",ЭтотОбъект.Ссылка);
		
		НаборЗаписей = РегистрыСведений.бит_фн_РегистрацияСобытийОповещений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ЭтотОбъект.Ссылка);
		НаборЗаписей.Записать(); 			
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_фн_Оповещения.ИД,
		|	бит_фн_Оповещения.Пользователь
		|ИЗ
		|	РегистрСведений.бит_фн_Оповещения КАК бит_фн_Оповещения
		|ГДЕ
		|	бит_фн_Оповещения.СБ_ФормаВводаБюджета В(&СБ_ФормаВводаБюджета)";
		
		Запрос.УстановитьПараметр("СБ_ФормаВводаБюджета", ЭтотОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл 					
				НаборЗаписей = РегистрыСведений.бит_фн_Оповещения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Отбор.ИД.Установить(Выборка.ИД);
				НаборЗаписей.Записать();
			КонецЦикла; 				
		КонецЕсли; 		
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	//-СБ Пискунова #2691 -После отмены проведения очищаем весь процесс
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-18 (#2873)
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	ЭтотОбъект.Движения.бит_КонтрольныеЗначенияБюджетов.ДополнительныеСвойства.Вставить("бит_БК_УстановкаСтатусаПередУдалением", Истина);
	//} bit SVKushnirenko Bit 27.01.2017 #2657
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураКурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(ЭтотОбъект,Дата, Новый Структура("Документ, Регл, Упр, Сценарий"));
	//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-29 (#2857)
	//ТаблицаБДДС = ПодготовитьТаблицуБДДС(СтруктураКурсыВалют);
	ТаблицаБДДС = ПодготовитьТаблицуБДДСПострочно();
	//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-29 (#2857)
	бит_Бюджетирование.ПроверитьФиксацию(СтруктураШапкиДокумента.Сценарий, ТаблицаБДДС, Отказ, Истина);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	бит_ОбщегоНазначенияПереопределяемый.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
	Если НЕ Отказ Тогда
		// Очистим визы.
		Если НЕ мПроводитьПослеУтверждения Тогда
			//Начало_бит_Магомедов_16.07.2012 не очищать
			//бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
			//Конец_бит_Магомедов_16.07.2012 не очищать
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//{ bit SVKushnirenko Bit 10.02.2017 #2671.(запрет пометки удаления проведенных документов)
	пЗначениеФлага_ОтменаПроведенияПроведенногоДокумента = Ложь;
	Если 
		ЭтотОбъект.ДополнительныеСвойства.Свойство("ОтменаПроведенияПроведенногоДокумента", пЗначениеФлага_ОтменаПроведенияПроведенногоДокумента) и 
		пЗначениеФлага_ОтменаПроведенияПроведенногоДокумента и 
		ЭтотОбъект.ПометкаУдаления Тогда
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Запрещено удалять проведенные документы ""Форма ввода бюджета""!", ЭтотОбъект.Ссылка,, Отказ); //запрет удаления проведенного документа
		Возврат;
	КонецЕсли;
	//} bit SVKushnirenko Bit 10.02.2017 #2671.(запрет пометки удаления проведенных документов)
	
	//{ bit SVKushnirenko Bit 20.06.2017 #2759
	пДопСвойства = ЭтотОбъект.ДополнительныеСвойства;
	Если пДопСвойства.Свойство("ОбменДаннымиВклКлиент") и пДопСвойства.ОбменДаннымиВклКлиент Тогда  
		Возврат; //Отменяем проверки, которые могли быть отменены клиентским параметром (например, при повторной попытке записи после ошибки)
	КонецЕсли;
	//} bit SVKushnirenko Bit 20.06.2017 #2759
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		СтатусНач = мТекущийСтатус;
		УстановитьСтатус(ДополнительныеСвойства.РежимЗаписи);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//	Если мПроводитьПослеУтверждения 
		//		 И ( СтатусНач = Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик ИЛИ НЕ ЗначениеЗаполнено(СтатусНач))
		//		 И ЭтотОбъект.ОтправленНаСогласование Тогда
		//		
		//		СтруктураПараметров = Новый Структура;
		//		СтруктураПараметров.Вставить("ЦФО",ЦФО);		
		//		бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
		//	КонецЕсли; 
		//КонецЕсли; 
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		////БИТ АКриштопов 15042016 После выдачи права инициаторам разрешения на проведение документа
		////не формируется список виз. Изменения. ++
		//СтруктураОтборДок = Новый Структура("Объект",Ссылка);
		//СтруктураОтбор = Новый Структура("ЦФО",ЦФО);
		//НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтборДок);
		//Если НаборЗаписей.Количество() = 0 Тогда 
		//	бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураОтбор);
		//КонецЕсли;
		////БИТ АКриштопов 15042016 -- 
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-17 (#3476)
		Если Проведен
		   И пДопСвойства.Свойство("бит_фн_РежимЗаписи") 
		   И пДопСвойства.бит_фн_РежимЗаписи = РежимЗаписиДокумента.Запись
		Тогда 
		
			пНаборЗаписей = РегистрыНакопления.бит_КонтрольныеЗначенияБюджетов.СоздатьНаборЗаписей();
			пНаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			пНаборЗаписей.Прочитать();
			
			Если пНаборЗаписей.Количество() > 0 Тогда 
				бит_БК_Общий.ПопыткаЗакрытияИлиВозвратаСтатусаЗаявокПоДаннымБК(пНаборЗаписей.Выгрузить(), Ссылка, "ПослеПроведения");				
			КонецЕсли;
			
		КонецЕсли;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-17 (#3476)
		
	КонецЕсли; 
	
	//+Сундукова 18.04.2016 №2395
	ЦФОНеЗаполнено = ложь;
	для каждого ТекСтрока из бддс цикл
		Если не ЗначениеЗаполнено(ТекСтрока.ЦФО) тогда
			ЦФОНеЗаполнено = истина;
		конецЕсли;
	КонецЦикла;
	Если   ЦФОНеЗаполнено тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В табличной части не заполненно ЦФО!!!";
		Сообщение.Сообщить();
	конецЕсли;
	//-Сундукова 18.04.2016 №2395
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-12 (#2873)
	//Обработка ситуации в старых заявках: когда вид операции не изменился, но не соответствует сценарию
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный") И
		 (ЗначениеЗаполнено(Сценарий) ИЛИ
	       	НастройкаФормы <> ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаУниверсальная"))
	Тогда 
		Сценарий = Неопределено;
		НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаУниверсальная");
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный") И
		 (Сценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У") ИЛИ
	        	НастройкаФормы <> ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаОперационная"))
	Тогда
		Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У");
		НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаОперационная");
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный") И
		 (Сценарий <> ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест") ИЛИ
		     	НастройкаФормы <> ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаИнвестиционная"))
	Тогда
		Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест");
		НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаИнвестиционная");
	КонецЕсли;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-12 (#2873)
	
	//{ bit_SVKushnirenko 05.06.2017 #2745
	//ИсходныйКод{
	////{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	////+Сенин С.В. 25.05.2016 №2669
	//Если Не ЭтотОбъект.ДополнительныеСвойства.Свойство("БИТ_ИнтерактивноеПроведение") Тогда
	//	ЭтотОбъект.ДополнительныеСвойства.Вставить("БИТ_ИнтерактивноеПроведение",Истина);
	//КонецЕсли; 
	////-Сенин С.В. 25.05.2016 №2669
	////} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//}ИсходныйКод
	
	//Не имеет смысла в контексте этой задачи (некорректное применение дополнительных свойств)
	//} bit_SVKushnirenko 05.06.2017 #2745
	
	//+Сенин С.В. 22.08.16 №2482
	// Заполним аналитику в шапке документа.
	бит_ОбщегоНазначения.ЗаполнитьАналитикуВШапкеДокумента(ЭтотОбъект, БДДС, Отказ);
	//-Сенин С.В. 22.08.16 №2482
	
	бит_ЗаполнитьЗначенияПоУмолчаниюВСтроках();
	//+Сундукова 16.05.2016  
	Если БДДС.Количество() = 0 тогда	
		ТекстСообщения =  НСтр("ru = 'Табличная часть ""Данные бюджета"" пустая!!! 
		|Необходимо добавить строки для проведения'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина; 		
	КонецЕсли;
	//-Сундукова 16.05.2016 
	//БИТ АКриштопов ++ 2482
	Если ЗначениеЗаполнено(бит_БК_ЦФО) тогда
		цфо = бит_БК_ЦФО;
	КонецЕсли;	
	для каждого ТекСтрока из бддс цикл
		Если не ЗначениеЗаполнено(ТекСтрока.ЦФО) тогда
			текСтрока.ЦФО = ЦФО;
		КонецЕсли;
		//+Сенин С.В. 23.08.16 №2618
		Если ЗначениеЗаполнено(ТекСтрока.ЦФО) и не ЗначениеЗаполнено(ЦФО) Тогда
			ЦФО = текСтрока.ЦФО;
		КонецЕсли; 
		Если ЗначениеЗаполнено(ТекСтрока.ЦФО) и не ЗначениеЗаполнено(бит_БК_ЦФО) Тогда
			бит_БК_ЦФО = текСтрока.ЦФО;
		КонецЕсли; 
		//+Сенин С.В. 23.08.16 №2618
	КонецЦикла;	
	//БИТ АКриштопов -- 2482
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		ПроверяемыеРеквизиты.Добавить("Контрагент");
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
		ПроверяемыеРеквизиты.Добавить("бит_БК_НомерЗаявки");
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-07-26 (#2868)
		//Основные показатели в ТЧ "БДДС"
		//ПроверяемыеРеквизиты.Добавить("бит_БК_КурсДокумента");
		//ПроверяемыеРеквизиты.Добавить("бит_БК_ВалютаДокумента");
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-07-26 (#2868)
	КонецЕсли;
	
	//{ bit SVKushnirenko Bit 21.02.2017 #2657
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт И ЗначениеЗаполнено(бит_БК_НомерЗаявки) Тогда 
	//	ТекСтатус = РегистрыСведений.бит_СтатусыОбъектов.Получить(Новый Структура("Объект, ВидСтатуса",бит_БК_НомерЗаявки, Перечисления.бит_ВидыСтатусовОбъектов.Статус));
	//	Если НЕ ТекСтатус.Статус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована Тогда
	//		Сообщить("Статус документа Заявка не равен <Согласован(а)>"); 
	//	КонецЕсли;
	//КонецЕсли;
	//} bit SVKushnirenko Bit 21.02.2017 #2657
	//Проверка авто-установки статусов, выполняется в глобальном модуле и не требуется здесь
	//проверка статуса Заявки
	
	//{ bit SVKushnirenko Bit 13.03.2017 #2745
	Если ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда  
		
		ПроверяемыеРеквизиты.Добавить("бит_БК_ВалютаДокумента");
		ПроверяемыеРеквизиты.Добавить("БДДС.бит_БК_ВалютаДоговора");
	Иначе
		
		//Для финансового плана отключаем проверку по валюте
		пМассивУдаления = Новый Массив;
		пИсключаемыеРеквизиты = Врег("бит_БК_ВалютаДокумента; БДДС.бит_БК_ВалютаДоговора; бит_БК_КурсДокумента");
		Для каждого пЭлементРеквизит Из ПроверяемыеРеквизиты Цикл
			
			Если Найти(пИсключаемыеРеквизиты, Врег(пЭлементРеквизит)+ ";") <>  0  Тогда  
				
				пМассивУдаления.Добавить(пЭлементРеквизит);
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого пУдаляемый Из пМассивУдаления Цикл
			
			пИндекс = ПроверяемыеРеквизиты.Найти(пУдаляемый);
			ПроверяемыеРеквизиты.Удалить(пИндекс);
		КонецЦикла; 
	КонецЕсли;
	//} bit SVKushnirenko Bit 13.03.2017 #2745
	
	Если НЕ ВычислятьФормулыПриВводе Тогда
		ТекстСообщения = Нстр("ru = 'При проведении ""Вычисление формул при вводе"" должно быть включено.
									|Смотри в форме документа ""Параметры вычислений"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, , ,Отказ);
	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.НастройкаФормы, "Вид") = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет Тогда
		ПроверяемыеРеквизиты.Добавить("РежимФормированияДвижений");
	КонецЕсли;	
	
	// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	// Убираем из проверки реквизиты скрытые на тонкой форме
	////1c-izhtc (
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда 
	//	ПроверяемыеРеквизиты.Добавить("БДДС.Сценарий");
	//КонецЕсли;
	////1c-izhtc )
	
	Если ПроверяемыеРеквизиты.Найти("БДДС.Период") <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БДДС.Период"));
	КонецЕсли;
	// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	
	// Обязательные измерения из разряда дополнительных.
	//Начало_бит_БК_Магомедов_16.12.2011
	//Для каждого КлючИЗначение Из мНастройкиИзмерений Цикл
	//	ИмяИзмерения = КлючИЗначение.Ключ;
	//	Настройка    = КлючИЗначение.Значение;
	//	Если Настройка.Обязательное Тогда
	//		ПроверяемыеРеквизиты.Добавить("БДДС."+ИмяИзмерения);
	//		ПроверяемыеРеквизиты.Добавить("ЗависимыеОбороты."+ИмяИзмерения);
	//	КонецЕсли; 
	//КонецЦикла; 
	бит_СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", Сценарий, Новый СписокЗначений, "СписокЗначений");
	// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	// получение настроек из РС не универсально, т.к. Сценарий может быть = Неопределено
	Если бит_СписокИзмеренийКонтроляБюджета.Количество() = 0 Тогда
		Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			Если СтрНайти(ПроверяемыйРеквизит,"БДДС.")<>0 Тогда
				ИмяИзмеренияБК = СтрЗаменить(ПроверяемыйРеквизит,"БДДС.","");
				Попытка
					бит_СписокИзмеренийКонтроляБюджета.Добавить(Перечисления.бит_БК_ИзмеренияКонтроляБюджета[ИмяИзмеренияБК]);
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	
	Для Каждого ЭлементСписка Из бит_СписокИзмеренийКонтроляБюджета Цикл
		Мета = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления[Перечисления.бит_БК_ИзмеренияКонтроляБюджета.Индекс(ЭлементСписка.Значение)];
		ИмяИзмерения = Мета.Имя;
		Синоним = Мета.Синоним;
		Для каждого СтрокаТаблицы Из БДДС Цикл
			Префикс = "БДДС[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			ИмяСписка = НСтр("ru = 'БДДС'");
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяИзмерения]) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, Синоним,
				//{ bit_SVKushnirenko 06.06.2017 #2811
				//ИсходныйКод{
				//СтрокаТаблицы.НомерСтроки, ИмяСписка);
				//}ИсходныйКод
				
				СтрокаТаблицы.НомерСтроки, "Данные бюджета"); //вывод синонима "тч.БДДС" в сообщении пользователю о незаполненном реквизите
				//} bit_SVKushnirenko 06.06.2017 #2811
				
				Поле = Префикс + ИмяИзмерения;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Если ПроверяемыеРеквизиты.Найти("БДДС."+ИмяИзмерения) <> Неопределено Тогда 
					ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БДДС."+ИмяИзмерения));
				КонецЕсли;
		
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Конец_бит_БК_Магомедов_16.12.2011 
	
	// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	Если ПроверяемыеРеквизиты.Найти("БДДС.ПредставлениеПериода") <> Неопределено Тогда
		Для каждого СтрокаТаблицы Из БДДС Цикл
			Префикс = "БДДС[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы["ПредставлениеПериода"]) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, "Месяц начисления", СтрокаТаблицы.НомерСтроки, "Данные бюджета"); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("БДДС.ПредставлениеПериода"));
	КонецЕсли;
	// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	
	Для Каждого СтрокаТаблицы ИЗ БДДС Цикл
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 Тогда
			ТекстСообщения =  НСтр("ru = 'В строке №%1 табличной части ""Данные бюджета"" не заполнены ни сумма ни количество!'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	бит_Бюджетирование.ПроверитьОбязательныеРазрезыСтатейОборотов(ЭтотОбъект, "БДДС", Отказ);
	бит_Бюджетирование.ПроверитьОбязательныеРазрезыСтатейОборотов(ЭтотОбъект, "ЗависимыеОбороты", Отказ);
	
	// Установка настроек обязательности реквизитов.
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
	//{ bit SVKushnirenko Bit 06.06.2017 #2759
	//Установка обязательности заполнения цели приобретения оборудования, если основания для этого есть в данных статей оборотов
	Если Документы.бит_ФормаВводаБюджета.НеобходимостьЦелиПриобретенияОборудования(Дата, ВидОперации, БДДС.ВыгрузитьКолонку("СтатьяОборотов")) Тогда  
		
		ПроверяемыеРеквизиты.Добавить("бит_БК_ЦельПриобретенияОборудования");
	КонецЕсли;
	//} bit SVKushnirenko Bit 06.06.2017 #2759
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Заполнение нового документа.
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
													,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												    //1c-izhtc spawn 28.08.15 (
												    //,Неопределено);
												    ,Неопределено
												    ,
												    ,Ложь);
												    //1c-izhtc spawn 28.08.15 )
													   
		// Заполнение значений по-умолчанию из настроек формы ввода.
		Если ЗначениеЗаполнено(НастройкаФормы) Тогда
			СтрНастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(НастройкаФормы);
			Для каждого КиЗ Из СтрНастройкиФормы.Измерения Цикл
				ТекОписание = КиЗ.Значение;
				Если НЕ ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать 
					И ЗначениеЗаполнено(ТекОписание.ЗначениеПоУмолчанию) Тогда
					
					ЭтотОбъект[ТекОписание.Имя] = ТекОписание.ЗначениеПоУмолчанию;
				КонецЕсли; 
			КонецЦикла; // СтрНастройкиФормы.
		КонецЕсли; // НастройкаФормы.
		
		Если НастройкаФормы.Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет 
			И ЗначениеЗаполнено(Сценарий) 
			И Сценарий.бит_Периодичность <> НастройкаФормы.ПериодичностьПланирования Тогда
			
			// Сценарий по-умолчанию не подходит, 
			// т.к. не совпадает периодичность сценария и периодичность фиксированного макета.
			Сценарий = Неопределено;
		КонецЕсли; 
		
		//Начало_бит_БК_Магомедов_15.12.2011
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
			ИзменениеВалюты();
		КонецЕсли;
		//Конец_бит_БК_Магомедов_15.12.2011
		
		Если ЗначениеЗаполнено(Сценарий) Тогда
			ИзменениеСценарияОбъект();
		КонецЕсли; 													   
		
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ВалютаДокумента      = мВалютаРегламентированногоУчета;
			КурсДокумента        = 1;
			КратностьДокумента   = 1;			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(РежимЗависимыхОборотов) Тогда
			РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(РежимФормированияДвижений) Тогда
			РежимФормированияДвижений = Перечисления.бит_РежимыФормированияДвиженийФормыВвода.Все;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияСумм) Тогда
			ЕдиницаИзмеренияСумм = Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы;			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДатаНачалаПланирования) Тогда
			ДатаНачалаПланирования = НачалоГода(ТекущаяДатаСеанса());		
		КонецЕсли; 
		
		Если мПроводитьПослеУтверждения Тогда
			РежимПринятияКУчету = 1;	
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры
              
Процедура ПриКопировании(ОбъектКопирования)
	
	//+СБ Пискунова  #2691 Скидываем значение флагов
	СБ_ПроцессЗапущен = Ложь;
	СБ_ЗапускПроцессаСПроверкой = Ложь;
	СБ_НеОтправлятьУведомленияНаПочту = Ложь; 
	//-СБ Пискунова  #2691 Скидываем значение флагов
	
	// Скидываем значение флага "СверхБюджета".
	СверхБюджета = Ложь;
	// И признак начала согласования.
	ОтправленНаСогласование = Ложь;
	Ответственный = Пользователи.ТекущийПользователь();
	АктуализироватьКурсы();
	Если мПроводитьПослеУтверждения Тогда
		РежимПринятияКУчету = 1;
	Иначе
		РежимПринятияКУчету = 0;
	КонецЕсли;

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_БК_СтатусВручную = Ложь;
	бит_БК_ПериодНачало = Дата(01,01,01);
	бит_БК_ПериодКонец = Дата(01,01,01);
	Комментарий = "";
	Для Каждого  ТекСтрока Из БДДС Цикл
		ТекСтрока.бит_БК_АдекватностьЦены = Ложь;
		ТекСтрока.бит_БК_НуженДоговор = Ложь;
		
		// очистим превышение
		ТекСтрока.бит_БК_ПревышениеБюджета = Ложь;
		//ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС = ТекСтрока.бит_БК_СуммаБезНДС;
		//ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС = 0;
		//ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС = ТекСтрока.Сумма;
		//ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаСНДС = 0;
		
		//{ bit SVKushnirenko Bit 02.02.2017 #2671
		ТекСтрока.бит_БК_БлокировкиПолейФинансовогоКонтроллера = ""; //исключение блокировок при копировании документа
		//} bit SVKushnirenko Bit 02.02.2017 #2671
		
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		//установка курса на текущую дату
		ПересчитатьСуммы("ВалютаКурсНаТекущуюДату", ТекСтрока);
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		
		// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
		ТекСтрока.бит_СтавкаНДС = ?(ТекСтрока.бит_СтавкаНДС = Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.ПустаяСсылка(), ТекСтрока.бит_СтавкаНДС);
		// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
		
	КонецЦикла; 
	Ответственный = Справочники.Пользователи.ПустаяСсылка();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )	
	
	// BIT AMerkulov 02122014 ++
	бит_Комментарии.Очистить();
	// BIT AMerkulov 02122014 --
	
	// + БИТ AMerkulov 2015-04-03
	ОК_ОЦР = Неопределено;
	// - БИТ AMerkulov 2015-04-03
	
	//ОК Довбешка Т. (по письму А.Криштопова)
	БИТ_СогласованоОЦР = Ложь;
	//ОК
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-17 (#2935)
	бит_БК_ЦельПриобретенияОборудования = "";
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-17 (#2935)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-25 (#3231)
	ок_СообщениеПользователюПоМаршрутуСогласования = "";
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-25 (#3231)
	
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Начало (#3499)
	ок_СообщениеПользователюПоМаршрутуСогласованияНаАнглийскомЯзыке = "";
	//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Конец (#3499)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Изменение кода. Начало. 09.02.2018{{

Функция ПолучитьХранилищеДанных(ТабличныйДокумент, ИдентификаторФормы) Экспорт
	
	ТаблицаДанных = ХранилищеДанных.Получить();
	Если ТаблицаДанных = Неопределено Тогда
		АдресХранилищаДанных = Документы.бит_ФормаВводаБюджета.ЗаполнитьТаблицуДанных(ТабличныйДокумент,ИдентификаторФормы);
	Иначе
		АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ТаблицаДанных,ИдентификаторФормы);
	КонецЕсли; 
	Возврат АдресХранилищаДанных;
	
КонецФункции

Процедура СохранитьДанныеВХранилище(АдресХранилищаДанных) Экспорт
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилищаДанных);
	ХранилищеДанных = Новый ХранилищеЗначения(ТаблицаДанных);
	
КонецПроцедуры

// Изменение кода. Конец. 09.02.2018}}

// Процедура восстанавливает дерево при работе с объектом. 
// Вызывается при автоматическом выполнении действий из задач. 
//
// Параметры:
//  ВыводитьСообщения - Булево (По умолчанию = Ложь.
//
Процедура ВосстановитьДеревоПоДаннымВнеш(ВыводитьСообщения = Ложь) Экспорт

    // Заполнение пустых ИД.
    ТекИдБДДС = бит_Бюджетирование.ОпределитьТекущийИД(БДДС.Выгрузить(), "ИД");
    Для каждого СтрТч Из БДДС Цикл
        Если СтрТч.ИД = 0 Тогда
            СтрТч.ИД  = ТекИдБДДС;
            ТекИдБДДС = ТекИдБДДС + 1;         
        КонецЕсли;       
    КонецЦикла;   
    
	СтруктураНастроек = ПолучитьНастройкиПостроителя();
	
	ТабДок			= ПолучитьДерево();
	ТекстЗапроса	= НастройкаФормы.ТекстЗапроса;
	Компоновщик		= Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресКомпоновки	= Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(ТекстЗапроса, Компоновщик, Новый УникальныйИдентификатор);	
	Адрес			= ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	ПараметрыВосстановленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыВосстановленияДерева.АдресКомпоновки		= АдресКомпоновки;
	Если СтруктураНастроек.Свойство("НастройкиКомпоновщика") Тогда
		ПараметрыВосстановленияДерева.НастройкиКомпоновщика =  СтруктураНастроек.НастройкиКомпоновщика;
	КонецЕсли;	
	ПараметрыВосстановленияДерева.ВыводитьСообщения = ВыводитьСообщения;
	ПараметрыВосстановленияДерева.УдалитьЛишнее 	= Истина;
	ВосстановитьДеревоПоДанным(Адрес, Новый УникальныйИдентификатор(), ТабДок, ЭтотОбъект.НастройкаФормы, ТекстЗапроса, ПараметрыВосстановленияДерева);
	СохранитьДерево(ТабДок);

КонецПроцедуры

// Процедура обновляет дерево данных.
//
// Параметры:
//  ТабДок				 - ТабличныйДокумент - Табличный документ с данными формы.
//  Настройка			 - СправочникСсылка.бит_НастройкиФормВводаБюджета - Настройки форм ввода бюджета.
//  ТекстЗапроса		 - Строка - Текст запроса формы ввода бюджета.
//  ПараметрыОбновления	 - Структура - см. Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева().
//
Процедура ОбновитьДеревоДанных(ТабДок, Настройка, ТекстЗапроса, ПараметрыОбновления) Экспорт
	
	ТабДок.Очистить();
	
	Если Настройка.Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет Тогда
		
		Бюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Бюджет");
		Если Справочники.бит_Бюджеты.БюджетЗапрещенВПланировании(Бюджет) Тогда
			ВызватьИсключение НСтр("ru = 'Выполнение операции остановлено.
										|Бюджет настройки формы ввода не должен содержать дубли статей оборотов.'");
		КонецЕсли;

		// Восстановление макета, сохраненного в настройке.
		НастройкаОбъект = Настройка.ПолучитьОбъект();
		ТабДок = НастройкаОбъект.ПолучитьДерево();
		
		Периодичность = Настройка.ПериодичностьПланирования;
		Сдвиг = бит_Бюджетирование.РазностьДат(Настройка.ДатаНачалаПланирования, ДатаНачалаПланирования, Периодичность);
		
		// Кэш для периодов.
		Периоды = Новый Соответствие;
		// Кэш для имен ячеек.
		Имена = Новый Соответствие;
		
		МассивОбластей = Новый Массив;
			
		Для Каждого Обл ИЗ ТабДок.Области Цикл
			
			Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка,"РасшифровкаЯчейкиФормыВвода") Тогда
				
				Если Обл.СодержитЗначение Тогда
					Обл.Значение = 0;
				КонецЕсли; 
				
				расш = Обл.Расшифровка;
				Если Сдвиг <> 0 
					 И ( расш.Вид = "Формула" 
					     ИЛИ расш.Вид = "Значение") Тогда
						 
					// Сдвиг периода.	 
					расш.Период = ПреобразоватьПериод(расш.Период, Сдвиг, Периодичность, Периоды);
					
					// Преобразование имени ячейки.
					расш.Имя = ПреобразоватьИмяЯчейки(расш.Имя, Сдвиг, Периодичность, Имена, Периоды);
					
					МассивОбластей.Добавить(Новый Структура("Обл,Имя", Обл, расш.Имя));					
					
					// Преобразование аргументов и формулы.
					Если ТипЗнч(расш.Аргументы) = Тип("Массив") И Не ПустаяСтрока(расш.Формула) Тогда
						
						// Преобразование формулы производится в два этапа, 
						// сначала имена аргументов заменяются на временные, а затем на новые, для которых выполнен сдвиг.
						// Это необходимо, т.к. в случае сдвига внутри периода планирования ( например на месяц внутри года) 
						// имена после сдвига могут совпадать с существующими именами до сдвига.
						
						расш.Аргументы = бит_РаботаСКоллекциямиКлиентСервер.УдалитьПовторяющиесяЭлементыМассива(расш.Аргументы);
						АргСоотв = Новый Соответствие;
						Для й = 0 По расш.Аргументы.ВГраница() Цикл
							АргСтарый = расш.Аргументы[й];
							
							ИмяАрг = "%Арг_"+Формат(й+1, "ЧГ=")+"%";
							расш.Формула = СтрЗаменить(расш.Формула, АргСтарый, ИмяАрг);
							
							расш.Аргументы[й] = ПреобразоватьИмяЯчейки(расш.Аргументы[й], Сдвиг, Периодичность, Имена, Периоды);
							АргСоотв.Вставить(ИмяАрг, расш.Аргументы[й]);
						КонецЦикла;
						
						Для каждого КиЗ Из АргСоотв Цикл
							расш.Формула = СтрЗаменить(расш.Формула, КиЗ.Ключ, КиЗ.Значение);
						КонецЦикла; 
					КонецЕсли;
					
				КонецЕсли; // Необходимо выполнять сдвиг. 
				
				Если Сдвиг <> 0 И расш.Вид = "Период" И ЗначениеЗаполнено(расш.Период) Тогда
					// Сдвиг периода.	 
					расш.Период		= ПреобразоватьПериод(расш.Период, Сдвиг, Периодичность, Периоды);
					ТекПериодичность= ?(ЗначениеЗаполнено(расш.Периодичность), расш.Периодичность, Периодичность);
					Обл.Текст	= бит_Бюджетирование.СформироватьПредставлениеПериода(расш.Период, ТекПериодичность);		
				КонецЕсли;	
			КонецЕсли; 
			
		КонецЦикла; // ТабДок.Области.
		
		// Замена имен областей. Необходимо выполнять отдельно, т.к. при смене имени области меняется 
		// индекс в коллекции и это приводит к странным эффектам, если менять имя областей в том же цикле, 
		// что и все остальные имена.
		
		// Сбрасываем имена областей, чтобы в процессе замены не могло дублей возникнуть
		// в верхнем цикле это делать нельзя, т.к. при смене имени области возможна смена индекса в коллекции.
		Ном = 1;
		Для каждого ПарамОбласти Из МассивОбластей Цикл
			Обл = ПарамОбласти.Обл;
			Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) Тогда
				Обл.Имя = Строка("Area_"+Формат(Ном, "ЧГ="));				
				Ном = Ном+1;
			КонецЕсли;	
		КонецЦикла; 
		
		// Устанавливаем новые имена областей.
		Для каждого ПарамОбласти Из МассивОбластей Цикл
			Обл = ПарамОбласти.Обл;
			Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) Тогда
				Обл.Имя = ПарамОбласти.Имя;
			КонецЕсли;	
		КонецЦикла; 
		
	Иначе	
		
		// Динамическое формирование макета.
		Если НЕ ЗначениеЗаполнено(ПараметрыОбновления.Периодичность) Тогда
			ПараметрыОбновления.Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Сценарий, "бит_Периодичность"); 
		КонецЕсли;
		
		Если ПараметрыОбновления.ПродолжительностьИнтервала = 0 Тогда
			ПараметрыОбновления.ПродолжительностьИнтервала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Сценарий, "ПродолжительностьИнтервала"); 
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ПараметрыОбновления.ДатаНачалаПланирования) Тогда
			ПараметрыОбновления.ДатаНачалаПланирования = ЭтотОбъект.ДатаНачалаПланирования;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыОбновления.ДатаОкончанияПланирования) Тогда
			ПараметрыОбновления.ДатаОкончанияПланирования = ЭтотОбъект.ДатаОкончанияПланирования;	
		КонецЕсли;
		
		Документы.бит_ФормаВводаБюджета.ОбновитьДеревоДанных(ТабДок, Настройка, ТекстЗапроса, ПараметрыОбновления);
		
	КонецЕсли; 
	
КонецПроцедуры

// Сохраняет дерево данных в хранилище значения.
// 
Процедура СохранитьДерево(ТабДок) Экспорт

	ХранилищеДерева = Новый ХранилищеЗначения(ТабДок);

КонецПроцедуры

// Извлекает дерево данных из хранилища.
// 
// Возвращаемое значение:
//  ТабДок - Табличный документ.
// 
Функция ПолучитьДерево() Экспорт
	
	ТабДок = ХранилищеДерева.Получить();
	Если НЕ ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
		ТабДок = Новый ТабличныйДокумент;
	КонецЕсли; 
	Возврат ТабДок;
	
КонецФункции

// Процедура сохраняет настройки построителя.
// 
// Параметры:
//  СтруктураНастроек - Структура.
// 
Процедура СохранитьНастройкиПостроителя(СтруктураНастроек)  Экспорт
	
	НастройкиПостроителя = Новый ХранилищеЗначения(СтруктураНастроек);
	
КонецПроцедуры

// Функция получает настройки построителя.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
// 
Функция ПолучитьНастройкиПостроителя() Экспорт
	
	СтруктураНастроек = НастройкиПостроителя.Получить();
	Если НЕ ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура;
	КонецЕсли; 
	Возврат СтруктураНастроек;
	
КонецФункции

// Функция восстанавливает период по имени колонки.
// 
// Параметры:
//  ИмяКолонки  - Строка.
// 
// Возвращаемое значение:
//   РезПериод   - Дата.
// 
Функция ПолучитьПериодПоИмениКолонки(ИмяКолонки) Экспорт

	РезПериод = Дата('00010101');
	
	НомерПодчеркивания = Найти(ИмяКолонки,"_");
	Если НомерПодчеркивания >0 Тогда
		ПериодСтр = Сред(ИмяКолонки,НомерПодчеркивания+1);
		Попытка
			РезПериод = Дата(ПериодСтр);
		Исключение
		КонецПопытки;
	КонецЕсли; 
	Возврат РезПериод;
	
КонецФункции

// Процедура заполняет реквизиты в строке табличной части по массиву имен.
// 
// Параметры:
//  МассивИмен  - Строка.
//  СтрокаТабЧасти - СтрокаТабличнойЧастиБДДС.
//  ИмяТабЧасти    - Строка.
// 
Процедура ЗаполнитьРеквизитыПоМассивуИмен(МассивИмен,СтрокаТабЧасти,ИмяТабЧасти) Экспорт
	
	Если МассивИмен = Неопределено Тогда
		 Возврат;
	КонецЕсли;	
	
	МетаданныеОбъекта = Метаданные();
	
	Для каждого ИмяРеквизита Из МассивИмен Цикл
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита,МетаданныеОбъекта) 
			И бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(ИмяРеквизита,МетаданныеОбъекта,ИмяТабЧасти) Тогда
			
			СтрокаТабЧасти[ИмяРеквизита] = ЭтотОбъект[ИмяРеквизита];
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Процедура устанавливает статус документа.
// 
// Параметры:
//  РежимЗаписи - РежимЗаписиДокумента.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено) Экспорт
	
	СтрАлгоритмы                    = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса       = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
	
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда		
	
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли;
		 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-18 (#3018)
		Если мТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Закрыта") И
			(РежимЗаписи = РежимЗаписиДокумента.Запись И Проведен ИЛИ
			РежимЗаписи = РежимЗаписиДокумента.Проведение)
			Тогда
			Возврат; //см. бит_БК_Общий.ПопыткаЗакрытияИлиВозвратаСтатусаЗаявокПоДаннымБК
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-18 (#3018)
		
		// Вычислим переменные, необходимые для установки статуса.
	    ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);
		
		// Определим статус.		
		//Начало_бит_БК_Магомедов_22.11.2011 
		//Статус = ОпределитьСтатус(мТекущийСтатус,ВсеВизыПолучены, ЕстьОтклонено,РежимЗаписи);
		//Если НЕ бит_БК_СтатусВручную Тогда 
		//1c-izhtc spawn 28.08.15 (
		бит_БК_СтатусВручную = Ложь;
		Если ДополнительныеСвойства.Свойство("бит_БК_СтатусВручную") Тогда 
			бит_БК_СтатусВручную = ДополнительныеСвойства.бит_БК_СтатусВручную;
		КонецЕсли;
		ДополнительныеСвойства.Свойство("мСтатусУстановленныйВручную", мСтатусУстановленныйВручную);
		//1c-izhtc spawn 28.08.15 )
		
		//{ bit_SVKushnirenko 11.01.2017 #2761
		//ИсходныйКод{
		////БИТ АКриштопов 21.04.2016 ++ 2240
		//Если Не бит_БК_СтатусВручную Тогда
		//	бит_БК_СтатусВручную = БИТ_СогласованоОЦР;
		//КонецЕсли;
		////БИТ АКриштопов 21.04.2016 -- 2240
		//}ИсходныйКод
		//Прежний код ошибочно трактовал визу ОЦР как "ручное" изменение, и безусловно приводил к установке статуса "Согласовано", что противоречит цели задачи
		//} bit_SVKushnirenko 11.01.2017 #2761
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-22 (#2873)
		Если НЕ ВсеВизыПолучены И
			 СБ_ПроцессЗапущен И
			 ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный
			 
		Тогда 			
			ВсеВизыПолучены = ПроверитьСуперВизы();
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-22 (#2873)
		
		Статус = бит_БК_Общий.ОпределитьСтатус(мТекущийСтатус,ВсеВизыПолучены,РежимЗаписи, ЭтотОбъект, мСтатусУстановленныйВручную, бит_БК_СтатусВручную);
		мСтатусУстановленныйВручную = Статус;
		//иначе
		//	Если мСтатусУстановленныйВручную = Неопределено Тогда
		//		#Если Клиент Тогда
		//			Предупреждение("Установите статус или снимите флаг <Вручную>");
		//		#КонецЕсли
		
		//		Возврат;
		//	иначе
		//	Статус = мСтатусУстановленныйВручную;
		//	КонецЕсли;
		//КонецЕсли;
		//Конец_бит_БК_Магомедов_22.11.2011 
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-05 (#2971)
		Если мТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Черновик") И
			 ДополнительныеСвойства.Свойство("ЭтоНовый") И
			 ДополнительныеСвойства.ЭтоНовый
		Тогда
		
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,Неопределено
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			КонецЕсли; 	
		
		КонецЕсли;	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-05 (#2971)
		
		// Если статус изменился - запишем его.
		Если мТекущийСтатус <> Статус Тогда
			ДатаИзмененияСтатуса = ТекущаяДата();
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			Если ДействиеВыполнено Тогда
				мТекущийСтатус 		  = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			КонецЕсли; 	
		КонецЕсли;
		
		//БИТ АКриштопов 18042016 ++ Статус "согласовано" может быть установлено либо вручную, либо если остаток по бюджету не равен 0
		//21.04.2016 дополнения к установке статуса. Задача 2240
		//Согласование других согласователей (всех кроме ОЦР), не зависимо от наличия средств в бюджете, не переводит заявку в статус «Согласовано», 
		//а оставляет в статусе «На согласование». 
		//Если вдруг произошло согласование не проведенной заявки, то заявка проводиться и переходит в статус «На согласование».		
		Попытка
			БюджетМеньшеНуля = БДДС.итог("БИТ_СуммаСверхБюджета")>0;//БИТ АКриштопов ++ 2240 26052016
		исключение
			БюджетМеньшеНуля = Ложь;
		КонецПопытки;
		
		// + БИТ AMerkulov 2015-03-25		
		Если бит_БК_СтатусВручную И мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании и НЕ БюджетМеньшеНуля Тогда
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-19 (#2986)
			//ДатаИзмененияСтатуса = ТекущаяДата();
			//ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
			//,Перечисления.бит_ВидыСтатусовОбъектов.Статус
			//,Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована
			//,мТекущийСтатус		
			//,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
			//,ДатаИзмененияСтатуса);
			//
			//Если ДействиеВыполнено Тогда
			//	мТекущийСтатус 		  = Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована;
			//	мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
			//КонецЕсли; 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-19 (#2986)
			//+Сундукова 20.04.2016
		ИначеЕсли  мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована и бит_БК_СтатусВручную тогда //БИТ АКриштопов 27042016
			//-Сундукова 20.04.2016
			//БИТ АКриштопов 20.04.2016 ++
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение
			и не ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт 
			и не ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан 
			и не бит_БК_СтатусВручную 
			и не мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована
			и не мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Закрыта Тогда
			
			//{ bit SVKushnirenko Bit 10.01.2017 #2761
			пРезструктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
			Если пРезструктура.Статус <>  Справочники.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании Тогда //исключаем повторную установку в текущий статус, если он "На согласовании" (выставляется на форме до проведения)
				//} bit SVKushnirenko Bit 10.01.2017 #2761
				
				ДатаИзмененияСтатуса = ТекущаяДата();
				ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
				,Перечисления.бит_ВидыСтатусовОбъектов.Статус
				,Справочники.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании
				,мТекущийСтатус		
				,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
				,ДатаИзмененияСтатуса);
				
				Если ДействиеВыполнено Тогда
					мТекущийСтатус 		  = Справочники.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании;
					мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				КонецЕсли;
				
				//{ bit SVKushnirenko Bit 10.01.2017 #2761
			КонецЕсли;
			//} bit SVKushnirenko Bit 10.01.2017 #2761
		КонецЕсли;
		//БИТ АКриштопов 20.04.2016 --
		// - БИТ AMerkulov  2015-03-25			
		//БИТ АКриштопов 18042016 --
	
	Иначе	
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
	КонецЕсли; 	
	
КонецПроцедуры

// Функция реализует алгоритм определения статуса объекта по-умолчанию.
// 
// 
Функция ОпределитьСтатус(НачальныйСтатус, ВсеВизыПолучены, ЕстьОтклонено, вхРежимЗаписи) Экспорт
	
	РезСтатус = НачальныйСтатус;
	
	Если мПроводитьПослеУтверждения Тогда
		// Алгоритм изменения статусов для режима "ПроводитьДокументыПослеУтверждения".
		Если ЭтотОбъект.ОтправленНаСогласование Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Рабочая;
		Иначе	
			РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик;
		КонецЕсли; 
	Иначе	
		// Алгоритм изменения статусов для обычного режима.
		Если вхРежимЗаписи = РежимЗаписиДокумента.Проведение 
			ИЛИ (вхРежимЗаписи = РежимЗаписиДокумента.Запись И ЭтотОбъект.Проведен) Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Рабочая;
		Иначе
			РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик;
		КонецЕсли; 
	КонецЕсли; 
	
	// После статуса рабочая алгоритм изменения одинаковый.
	
	Если РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Рабочая 
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Утвержден
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Отклонен Тогда
		
		Если ЕстьОтклонено Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Отклонен;
		Иначе	
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Утвержден;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Рабочая;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
		
	Возврат РезСтатус;
	
КонецФункции

// Процедура очищает табличные части ЗависимыеОбороты и БДДС.
// 
Процедура ОчиститьТаблицы() Экспорт
	
	ОчиститьЗависимыеОбороты();
	БДДС.Очистить();
	
КонецПроцедуры

// Функция определяет разрешен ли ручной ввод зависимых оборотов.
// 
// Возвращаемое значение:
//  ФлРазрешен   - Булево.
// 
Функция РазрешенРучнойВводЗависимыхОборотов() Экспорт
	
	ФлРазрешен = ?(РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Ручной,Истина,Ложь);
	Возврат ФлРазрешен;
	
КонецФункции

// Функция определяет разрешен ли автоматический ввод зависимых оборотов.
// 
// Возвращаемое значение:
//  ФлРазрешен   - Булево.
// 
Функция РазрешенАвтоматическийВводЗависимыхОборотов() Экспорт

	ФлРазрешен = ?(РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический,Истина,Ложь);
	Возврат ФлРазрешен;

КонецФункции

// Функция определяет разрешен ли ввод зависимых оборотов.
// 
// Возвращаемое значение:
//  ФлРазрешен   - Булево.
// 
Функция РазрешенВводЗависимыхОборотов()  Экспорт

	Если РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический 
		ИЛИ РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Ручной  Тогда
	  ФлРазрешен = Истина;
	Иначе	
	  ФлРазрешен = Ложь;
	КонецЕсли;
	Возврат ФлРазрешен;
	
КонецФункции

// Процедура заполняет зависимые обороты по строке данных.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.БДДС.
//  Очищать        - Булево.
// 
Процедура ЗаполнитьЗависимыеОборотыПоСтроке(ТекущаяСтрока,Очищать=Истина) Экспорт

	Если НЕ РазрешенРучнойВводЗависимыхОборотов() Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Если Очищать Тогда
			ОчиститьЗависимыеОборотыПоСтроке(ТекущаяСтрока);
		КонецЕсли; 
		
	    РазмерностьЕдиницы = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);			
		Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя");
		
		// Запомним сумму в единице документа. 
		СуммаВЕдиницеДокумента = ТекущаяСтрока.Сумма;
		
		// Расчитаем сумму в указанных единицах измерения сумм.
		ТекущаяСтрока.Сумма = бит_ОбщегоНазначения.ПересчитатьИзРазмерностиВРазмерность(
			СуммаВЕдиницеДокумента,РазмерностьЕдиницы,1);
			
		УстановитьПривилегированныйРежим(Истина);
		
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= ТекущаяСтрока.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= ТекущаяСтрока;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "БДДС";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
	
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
		
		УстановитьПривилегированныйРежим(Ложь);	
																 
		// После формирования зависимых оборотов по строке
		// необходимо возвратить сумму в единице документа.
		ТекущаяСтрока.Сумма = СуммаВЕдиницеДокумента;
	КонецЕсли; 

КонецПроцедуры

// Процедура удаляет строки зависимых оборотов, соответствующие указанной строке данных.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.БДДС.
// 
Процедура ОчиститьЗависимыеОборотыПоСтроке(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока <> Неопределено Тогда
		 СтруктураОтбор = Новый Структура;
		 СтруктураОтбор.Вставить("ИД_Родитель",ТекущаяСтрока.ИД);
		 МассивСтрок = ЗависимыеОбороты.НайтиСтроки(СтруктураОтбор);
		 Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		 	ЗависимыеОбороты.Удалить(СтрокаТаблицы);
		 КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Процедура очищает табличную часть ЗависимыеОбороты.
// 
Процедура ОчиститьЗависимыеОбороты() Экспорт

	ЗависимыеОбороты.Очистить();

КонецПроцедуры

// Процедура заполняет табличную часть ЗависимыеОбороты.
// 
Процедура ЗаполнитьЗависимыеОбороты() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьЗависимыеОбороты();
	
	РазмерностьЕдиницы = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);	
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя");
	
	МаксПериод = бит_Бюджетирование.ПолучитьМаксПериод(ЭтотОбъект.БДДС);
	НастройкиЗависимыхОборотов = бит_Бюджетирование.ПолучитьНастройкиЗависимыхОборотов(ЭтотОбъект.Сценарий, МаксПериод);
	
	Для каждого СтрокаТаблицы Из БДДС Цикл
		// Запомним сумму в единице документа. 
		СуммаВЕдиницеДокумента = СтрокаТаблицы.Сумма;
		
		// Расчитаем сумму в указанных единицах измерения сумм.
		СтрокаТаблицы.Сумма = бит_ОбщегоНазначения.ПересчитатьИзРазмерностиВРазмерность(
								СуммаВЕдиницеДокумента, РазмерностьЕдиницы, 1);
																					   
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= СтрокаТаблицы.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= СтрокаТаблицы;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "БДДС";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
		ПараметрыФормирования.вхНастройкиЗависимых		= НастройкиЗависимыхОборотов;
																				   
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
		
		// После формирования зависимых оборотов по строке
		// необходимо возвратить сумму в единице документа.
		СтрокаТаблицы.Сумма = СуммаВЕдиницеДокумента;
	КонецЦикла; 

	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалюты() Экспорт
	
	Если ЗначениеЗаполнено(Сценарий) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "ИспользоватьКурсыСценария") Тогда
		ДатаКурса = ДатаНачалаПланирования;
	Иначе
		ДатаКурса = Дата;
	КонецЕсли;
	СтрКурса			= бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДокумента, ДатаКурса);
	КурсДокумента		= СтрКурса.Курс;
	КратностьДокумента	= СтрКурса.Кратность;
	
КонецПроцедуры

// Процедура обрабатывает изменение сценария в шапке документа.
// 
Процедура ИзменениеСценарияОбъект(ОчищатьДанные = Истина)  Экспорт

	Если ЗначениеЗаполнено(Сценарий) Тогда
		Если ОчищатьДанные Тогда
			ОчиститьТаблицы();
		КонецЕсли; 
		ВалютаДокумента = Сценарий.Валюта;
		ИзменениеВалюты();
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет параметры во вновь созданной форме. 
// Используется при программном создании формы ввода во время создания задачи. 
// 
Процедура ПодготовитьНовуюФорму() Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаФормы) Тогда		
		Возврат;		
	КонецЕсли; 
	
	ОчиститьТаблицы();
	
	ТекстЗапроса    = НастройкаФормы.ТекстЗапроса;
	Компоновщик     = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(ТекстЗапроса, Компоновщик, Новый УникальныйИдентификатор);	
	
	ТекНастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(НастройкаФормы);
	
	// Копирование отбора из настройки.
	ОбНастройка   = НастройкаФормы.ПолучитьОбъект();
	СохрНастройка = ОбНастройка.ПолучитьНастройкиПостроителя();
	
	Документы.бит_ФормаВводаБюджета.ВосстановитьОтбор(СохрНастройка, Компоновщик, ТекстЗапроса);
	
	// Копирование значений по-умолчанию из настройки.
	Для каждого КиЗ Из ТекНастройкиФормы.Измерения Цикл
		ТекОписание = КиЗ.Значение;
		Если НЕ ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать 
			И ЗначениеЗаполнено(ТекОписание.ЗначениеПоУмолчанию) Тогда
			
			ЭтотОбъект[ТекОписание.Имя] = ТекОписание.ЗначениеПоУмолчанию;
		КонецЕсли; 
	КонецЦикла; // ФКэшЗначений.НастройкиФормы.Измерения.
	
	Если ЗначениеЗаполнено(НастройкаФормы.ПараметрНорм) Тогда
		ПараметрНорм = НастройкаФормы.ПараметрНорм;
	КонецЕсли; 
	
	// Восстанавливаем дерево по данным.
	ТабДок = Новый ТабличныйДокумент;
	
	ПараметрыОбновленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыОбновленияДерева.АдресКомпоновки		= АдресКомпоновки;
	ПараметрыОбновленияДерева.НастройкиКомпоновщика	= Компоновщик.ПолучитьНастройки();
	
	ОбновитьДеревоДанных(ТабДок, НастройкаФормы, ТекстЗапроса, ПараметрыОбновленияДерева);
	
	// Сохраняем дерево в хранилище.
	СохранитьДерево(ТабДок);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
	
	СохранитьНастройкиПостроителя(СтруктураНастройки);
	
КонецПроцедуры

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

    // Значения из структуры заполнения.
	// Обязательные для заполнения поля: Дата, НастройкаФормы, ЦФО.
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
    
    // Дата документа.
    Дата = ТекущаяДатаСеанса();
    
    // Значения по умолчанию.
    Если ЗначениеЗаполнено(Сценарий) И НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда    
        ВалютаДокумента = Сценарий.Валюта;            
    КонецЕсли;       
    Если ЗначениеЗаполнено(ВалютаДокумента) И НЕ ЗначениеЗаполнено(КурсДокумента) Тогда
        ИзменениеВалюты();
    КонецЕсли;
    Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
        ВалютаДокумента      = мВалютаРегламентированногоУчета;
        КурсДокумента        = 1;
        КратностьДокумента   = 1;			
    КонецЕсли;        
    Если НастройкаФормы.Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет 
         И ЗначениеЗаполнено(Сценарий) 
         И Сценарий.бит_Периодичность <> НастройкаФормы.ПериодичностьПланирования Тогда           
         // Сценарий по-умолчанию не подходит, 
         // т.к. не совпадает периодичность сценария и периодичность фиксированного макета.
         Сценарий = Неопределено;       
    КонецЕсли;         
    Если НЕ ЗначениеЗаполнено(РежимЗависимыхОборотов) Тогда     
        РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;      
    КонецЕсли;       
    Если НЕ ЗначениеЗаполнено(РежимФормированияДвижений) Тогда           
        РежимФормированияДвижений = Перечисления.бит_РежимыФормированияДвиженийФормыВвода.Все;         
    КонецЕсли;	    
    Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияСумм) Тогда       
        ЕдиницаИзмеренияСумм = Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы;    
    КонецЕсли;       
    Если НЕ ЗначениеЗаполнено(ДатаНачалаПланирования) Тогда         
        ДатаНачалаПланирования = НачалоГода(ТекущаяДатаСеанса());	        
    КонецЕсли;
	ВычислятьФормулыПриВводе = Истина;
   
    // Обновление дерева данных.
    
    ТабДок = Новый ТабличныйДокумент;
    
    ТекстЗапроса    = НастройкаФормы.ТекстЗапроса;
    Компоновщик     = Новый КомпоновщикНастроекКомпоновкиДанных;
    АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(ТекстЗапроса, Компоновщик, Новый УникальныйИдентификатор());

    Если ЗначениеЗаполнено(НастройкаФормы) Тогда 
        // Копирование отбора из настройки.
    	ОбНастройка   = НастройкаФормы.ПолучитьОбъект();
    	СохрНастройка = ОбНастройка.ПолучитьНастройкиПостроителя();    	
    	Документы.бит_ФормаВводаБюджета.ВосстановитьОтбор(СохрНастройка, Компоновщик, ТекстЗапроса);
        СтруктураНастройки = Новый Структура("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
	    СохранитьНастройкиПостроителя(СтруктураНастройки);
    КонецЕсли;
    
	ПараметрыОбновленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыОбновленияДерева.АдресКомпоновки		= АдресКомпоновки;
	ПараметрыОбновленияДерева.НастройкиКомпоновщика	= Компоновщик.ПолучитьНастройки();
	
    ОбновитьДеревоДанных(ТабДок, НастройкаФормы, ТекстЗапроса, ПараметрыОбновленияДерева);
    
    СохранитьДерево(ТабДок);
        
КонецПроцедуры

// Устанавливает загруженные из Эксель данные в форму ввода.
// 
&НаСервере
Процедура УстановитьЗагруженныеДанные(ДанныеЭксель, ТабДокДанные, НастройкиФормы, ВыводитьСообщения = Истина) Экспорт

	// Изменение кода. Начало. 28.02.2018{{
	Счетчик = 1;
    Для каждого ЭД Из ДанныеЭксель Цикл
    	
    	Попытка
    		Обл = ТабДокДанные.Область(ЭД.Имя);
    	Исключение
    		Обл = Неопределено;
    		Если ВыводитьСообщения Тогда
    			ТекстСообщения =  НСтр("ru = 'Не удалось найти ячейку по имени %1! Значение %2 не будет загружено.'");
    			ТекстСообщения = СтрШаблон(ТекстСообщения, ЭД.Имя, ЭД.Значение);
    			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
    		КонецЕсли; 
    	КонецПопытки;
    	
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) Тогда
			
			Расш = Обл.Расшифровка;
			Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расш,"РасшифровкаЯчейкиФормыВвода") 
				И Расш.Вид = "Значение" 
				И НЕ ЗначениеЗаполнено(Расш.Формула)  Тогда
				
				Если ЭД.Значение <> 0 Тогда
					СтрОтбор = Новый Структура;
					Для каждого КиЗ Из Расш.Измерения Цикл     				
						СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);    				
					КонецЦикла; 
					СтрОтбор.Вставить("Период", Расш.Период);
					НайденныеСтроки = БДДС.НайтиСтроки(СтрОтбор);    				
					Если НайденныеСтроки.Количество() > 0 Тогда
						ТекСтрока = НайденныеСтроки[0];
						Если Лев(Расш.Имя,1)  = "K"  Тогда
							ТекСтрока.Количество = ЭД.Значение;
						ИначеЕсли Лев(Расш.Имя, 1) = "С" Тогда	
							ТекСтрока.Сумма = ЭД.Значение;
						КонецЕсли; 
					Иначе	
						СоздатьНовуюСтрокуБюджета(Расш, ЭД.Значение, НастройкиФормы,Счетчик);
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
    КонецЦикла; // ДанныеЭксель.
	// Изменение кода. Конец. 28.02.2018}}
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДерева

// Функция сдвигает период или извлекает период из кэша периодов. 
// 
// Параметры:
//  ВхПериод  - Дата.
//  Сдвиг     - Число.
//  Периодичность - ПеречислениеСсылка.бит_Периодичность.
//  КэшПериодов   - Соответствие.
// 
// Возвращаемое значение:
//  ПериодНовый - Дата.
// 
Функция ПреобразоватьПериод(ВхПериод, Сдвиг, Периодичность, КэшПериодов)
	
	ПериодНовый = КэшПериодов[ВхПериод];
	Если ПериодНовый = Неопределено Тогда
		ПериодНовый = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ВхПериод, Сдвиг, Периодичность);
		КэшПериодов.Вставить(ВхПериод, ПериодНовый);
	КонецЕсли;	
	Возврат ПериодНовый;					
	
КонецФункции	

// Функция сдвигает период или извлекает период из кэша периодов. 
// 
// Параметры:
//  ВхИмя     - Дата.
//  Сдвиг     - Число.
//  Периодичность - ПеречислениеСсылка.бит_Периодичность.
//  КэшПериодов   - Соответствие.
// 
// Возвращаемое значение:
//  ИмяНов - Строка.
// 
Функция ПреобразоватьИмяЯчейки(ВхИмя, Сдвиг, Периодичность, КэшИмен, КэшПериодов)
	
	ИмяНов = КэшИмен[ВхИмя];
	
	Если ИмяНов = Неопределено Тогда
		
		РезМассив = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ВхИмя, "_");
		Если РезМассив.Количество() > 2 Тогда
			// Разбираем имя на составные части, сдвигаем период и формируем новое имя.
			Префикс   = РезМассив[0];           
			ПериодСтр = РезМассив[1];
			
			СтрИд = "";
			Для й = 2 По РезМассив.ВГраница() Цикл
				СтрИд = СтрИд+?(ПустаяСтрока(СтрИд),"","_")+РезМассив[й];
			КонецЦикла;	
			
			Если ПериодСтр = "Итог" ИЛИ ПериодСтр = "Ит" Тогда
				ИмяНов = Префикс+"_"+ПериодСтр+"_"+СтрИд;
			Иначе
				Период    = Дата(ПериодСтр);
				ТекПериод = ПреобразоватьПериод(Период, Сдвиг, Периодичность, КэшПериодов);			
				ИмяНов = бит_Бюджетирование.СформироватьИмяКолонкиПериод(Префикс, ТекПериод)+"_"+СтрИд;
			КонецЕсли;	
			КэшИмен.Вставить(ВхИмя, ИмяНов);
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяНов = Неопределено Тогда
		// Преобразовать не удалось, оставим начальное имя.
		ИмяНов = ВхИмя;
	КонецЕсли;	
	
	Возврат ИмяНов;
	
КонецФункции	

// Восстанавливает дерево по табличным частям формы ввода.
//
// Параметры:
//  АдресХранилищаДанных	 - Строка - Адрес временного хранилища для сохранения новой таблицы данных.
//  ИдентификаторФормы		 - УникальныйИдентификатор - Уникальный идентификатор формы документа.
//  ТабДок					 - ТабличныйДокумент - Табличный документ с данными формы.
//  Настройка				 - СправочникСсылка.бит_НастройкиФормВводаБюджета - Настройки форм ввода бюджета.
//  ТекстЗапроса			 - Строка - Текст запроса формы ввода бюджета.
//  ПараметрыВосстановления	 - Структура - см. Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева().
//
Процедура ВосстановитьДеревоПоДанным(АдресХранилищаДанных, ИдентификаторФормы, ТабДок, Настройка, ТекстЗапроса,
	ПараметрыВосстановления) Экспорт
	
	Бюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Бюджет");
	Если Справочники.бит_Бюджеты.БюджетЗапрещенВПланировании(Бюджет) Тогда
		ВызватьИсключение НСтр("ru = 'Выполнение операции остановлено.
									|Бюджет настройки формы ввода не должен содержать дубли статей оборотов.'");
	КонецЕсли;
	
	ВыводитьСообщения	= ПараметрыВосстановления.ВыводитьСообщения;
	УдалитьЛишнее		= ПараметрыВосстановления.УдалитьЛишнее;
	
	Если ПараметрыВосстановления.ОбновитьДерево Тогда
		ОбновитьДеревоДанных(ТабДок, Настройка, ТекстЗапроса, ПараметрыВосстановления);
	КонецЕсли;
	
	// Изменение кода. Начало. 09.02.2018{{
	Если ПараметрыВосстановления.ОбновитьДерево Тогда
		АдресХранилищаДанных = Документы.бит_ФормаВводаБюджета.ЗаполнитьТаблицуДанных(ТабДок, ИдентификаторФормы);
	КонецЕсли; 
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилищаДанных);
	ТаблицаДанных.ЗаполнитьЗначения(0	,"ЗначениеВычисленияФормулы");
	ТаблицаДанных.ЗаполнитьЗначения(Ложь,"ФормулаВычислена");
	// Изменение кода. Конец. 09.02.2018}}
	
	ТабДанные = БДДС.Выгрузить();
    Если ТабДанные.Количество() > 1 Тогда
        // Поиск и удаление строк с пустым ИД. Это лишние строки. BF-1722.
        МассивЛишних = БДДС.НайтиСтроки(Новый Структура("ИД", 0));	
        Для каждого ЛишняяСтрока Из МассивЛишних Цикл
            БДДС.Удалить(ЛишняяСтрока);       
        КонецЦикла;
    КонецЕсли;
            
	ТабДанные.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));

	// Восстанавливаем значения областей по значениям табличной части БДДС.
	Для каждого Обл Из ТабДок.Области Цикл
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка,"РасшифровкаЯчейкиФормыВвода") Тогда
			
			расш = Обл.Расшифровка;
			Если расш.Вид = "Значение" Тогда
				
				СтрОтбор = Новый Структура;
				
				СтрОтбор.Вставить("Период", расш.Период);
				Для каждого КиЗ Из расш.Измерения Цикл
					СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
				КонецЦикла; // Обл.Расшифровка.Измерения.
				
				МассивСтрок = ТабДанные.НайтиСтроки(СтрОтбор);
				ИтСумма      = 0;				 
				ИтКоличество = 0;
				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
					
					СтрокаТаблицы.Обработана = Истина;
					ИтСумма      = ИтСумма + СтрокаТаблицы.Сумма;
					ИтКоличество = ИтКоличество + СтрокаТаблицы.Количество;
					
				КонецЦикла; // МассивСтрок.
				Если Лев(Обл.Имя,1) = "С" Тогда
					Обл.Значение = ИтСумма;
				КонецЕсли; 
				
				Если Лев(Обл.Имя,1) = "К" Тогда
					Обл.Значение = ИтКоличество;
				КонецЕсли;
				
				// Изменение кода. Начало. 09.02.2018{{
				СтрОтбор = Новый Структура("Имя,ИмяАргумента",Обл.Имя,Обл.Имя);
				МассивСтрок = ТаблицаДанных.НайтиСтроки(СтрОтбор);
				Если МассивСтрок.Количество()>0 Тогда
					СтрокаТаблицы = МассивСтрок[0];
					СтрокаТаблицы.Значение = Обл.Значение;
				КонецЕсли; 
				// Изменение кода. Конец. 09.02.2018}}
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; // ТабДок.Области.
	
	// Выполнение расчетов по формулам в табличном документе.
	// Изменение кода. Начало. 09.02.2018{{
	Документы.бит_ФормаВводаБюджета.ВыполнитьРасчетыПоЗависимостям(ТабДок,ТаблицаДанных);
	ПоместитьВоВременноеХранилище(ТаблицаДанных, ИдентификаторФормы);
	// Изменение кода. Конец. 09.02.2018}}
	
	// Актуализация данных, вычисленных по формулам.
	НастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Настройка);
	ТекИдБДДС = бит_Бюджетирование.ОпределитьТекущийИД(ЭтотОбъект.БДДС,"ИД");	 
	Для каждого Обл Из ТабДок.Области Цикл
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка,"РасшифровкаЯчейкиФормыВвода") Тогда
			 расш = Обл.Расшифровка;
			 Если расш.Вид = "Значение" И ЗначениеЗаполнено(расш.Формула) Тогда
				  // Обрабатываем только ячейки, вычисляемые по формулам, связанные с данными.
				  СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(расш);
				  НайденныеСтроки = ЭтотОбъект.БДДС.НайтиСтроки(СтрОтбор);
				  Если НайденныеСтроки.Количество() = 0 Тогда
					  Если ЗначениеЗаполнено(Обл.Значение) Тогда
						  // Было вычислено значение по формуле, нужно создать соответствующую строку в таб. части.
						  НоваяСтрока = ЭтотОбъект.БДДС.Добавить();
						  НоваяСтрока.ИД = ТекИдБДДС;
						  ТекИдБДДС = ТекИдБДДС + 1;
						  
						  бит_БюджетированиеКлиентСервер.ЗаполнитьНовуюСтрокуБюджета(ЭтотОбъект, НоваяСтрока, расш.Период, расш.Измерения, НастройкиФормы.Измерения);
						  НоваяСтрока[расш.ИмяРесурса] = Обл.Значение;
						  НоваяСтрока.Расчетная = Истина;
					  КонецЕсли; 
				  ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					  // Выполним синхронизацию данных между таб. частью и макетов.
					  ПерваяСтрока = НайденныеСтроки[0];
					  Если ЗначениеЗаполнено(Обл.Значение) Тогда
						  ПерваяСтрока[расш.ИмяРесурса] = Обл.Значение;
						  ПерваяСтрока.Расчетная = Истина;
					  Иначе	
						  ЭтотОбъект.БДДС.Удалить(ПерваяСтрока);
					  КонецЕсли; 
				  Иначе
					  // Не выполняем синхронизацию.
				  КонецЕсли; 
			 КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	// Выполним поиск строк, для которых не удалось найти ячейки в дереве.
	Если ВыводитьСообщения ИЛИ УдалитьЛишнее Тогда
	
		 СтрОтбор = Новый Структура;
		 СтрОтбор.Вставить("Обработана", Ложь);
		 
		 МассивСтрок = ТабДанные.НайтиСтроки(СтрОтбор);
		 Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			 
			 Если ВыводитьСообщения Тогда
				 ТекстСообщения =  НСтр("ru = 'Не удалось найти ячейку дерева для строки данных бюджета №%1, Период %2, Статья оборотов ""%3"".'");
				 ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.НомерСтроки, Формат(СтрокаТаблицы.Период,"ДФ=dd.MM.yyyy"), СтрокаТаблицы.СтатьяОборотов);
				 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			 КонецЕсли;  
			 
			 Если УдалитьЛишнее Тогда
				 // Удаляем строки табличной части, для которой не удалось найти ячейку в дереве.
			 	 СтрОтборИД     = Новый Структура("ИД", СтрокаТаблицы.ИД);
				 
				 СтрокиТабЧасти = ЭтотОбъект.БДДС.НайтиСтроки(СтрОтборИД);
				 Для Каждого СтрокаТабЧасти Из СтрокиТабЧасти Цикл
				 	ЭтотОбъект.БДДС.Удалить(СтрокаТабЧасти);
				 КонецЦикла; // СтрокиТабЧасти. 
				 
				 СтрокиТабЧасти = ЭтотОбъект.ЗависимыеОбороты.НайтиСтроки(СтрОтборИД);
				 Для Каждого СтрокаТабЧасти Из СтрокиТабЧасти Цикл
				 	ЭтотОбъект.ЗависимыеОбороты.Удалить(СтрокаТабЧасти);
				 КонецЦикла; 
			 КонецЕсли; 
		 КонецЦикла; // МассивСтрок.
	КонецЕсли; 
	
	//Начало_бит_БК_Магомедов_20.12.2011
	ПересчитатьСуммыБДДС("СуммаСНДС");
	//Конец_бит_БК_Магомедов_20.12.2011 
	
КонецПроцедуры

#КонецОбласти

// Заполняет норму в строке табличной части. 
// 
// Параметры:
//  ТекущиеДанные - СтрокаТабличнойЧасти.
//  ИмяТаблицы - Строка.
//  ИмяПоля - Строка.
// 
Процедура ЗаполнитьНорму(ТекущиеДанные, ИмяПоля) 
    
    ИменаПараметраНорм = ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ПодготовитьСтруктурыСвязи(ПараметрНорм);

    ИспользоватьНормы  = ПолучитьФункциональнуюОпцию("бит_ИспользоватьНормыВБюджетировании");    
    Если НЕ ИспользоватьНормы Тогда
        Возврат;
    КонецЕсли;
    
    Если бит_БюджетированиеКлиентСервер.ВыполнятьЗаполнениеНормы(ПараметрНорм, ИменаПараметраНорм, ИмяПоля, ИспользоватьНормы) Тогда
    	Если Сценарий.ИспользоватьКурсыСценария Тогда
    		СтрКурса    = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДокумента, ТекущиеДанные.Период);
    		СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", ВалютаДокумента, СтрКурса.Курс, СтрКурса.Кратность);
    	Иначе
    		СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", ВалютаДокумента, КурсДокумента, КратностьДокумента);
    	КонецЕсли; 
    	бит_Бюджетирование.ЗаполнитьНормуВСтроке(ТекущиеДанные, ПараметрНорм, Сценарий, СтрКурсаДок, ИменаПараметраНорм, ЕдиницаИзмеренияСумм);
    КонецЕсли; 

КонецПроцедуры

// Создает новую строку табличной части БДДС.
// 
// Параметры:
//  Расшифровка   - Структура.
//  НовоеЗначение - Число.
// 
Процедура СоздатьНовуюСтрокуБюджета(Расшифровка, НовоеЗначение, НастройкиФормы,Счетчик)
	
	НоваяСтрока = БДДС.Добавить();
	// Изменение кода. Начало. 28.02.2018{{
	НоваяСтрока.ИД = Счетчик;
	// Изменение кода. Конец. 28.02.2018}}
	бит_БюджетированиеКлиентСервер.ЗаполнитьНовуюСтрокуБюджета(ЭтотОбъект, НоваяСтрока, Расшифровка.Период, Расшифровка.Измерения, НастройкиФормы.Измерения);
	// Заполнение ресурсов
	НоваяСтрока[Расшифровка.ИмяРесурса] = НовоеЗначение;
	// Период ставим, т.к. он безусловно обрабатывается.
	ЗаполнитьНорму(НоваяСтрока, "Период");  		
	
КонецПроцедуры

// Функция готовит таблицу БДДС для проведения.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуБДДС(СтруктураКурсыВалют)
	
	РазмерностьСумм = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);
	
	ТекстПолей_бит_ФормаВводаБюджетаБДДС  			 = "";
	ТекстПолей_бит_ФормаВводаБюджетаЗависимыеОбороты = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Тогда
			Продолжить;		
		КонецЕсли;
		ТекстПолей_бит_ФормаВводаБюджетаБДДС = ТекстПолей_бит_ФормаВводаБюджетаБДДС + Символы.ПС + "	бит_ФормаВводаБюджетаБДДС." + ИмяИзмерения + ",";
	КонецЦикла;
	ТекстПолей_бит_ФормаВводаБюджетаЗависимыеОбороты = СтрЗаменить(ТекстПолей_бит_ФормаВводаБюджетаБДДС, "бит_ФормаВводаБюджетаБДДС", "бит_ФормаВводаБюджетаЗависимыеОбороты");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_ФормаВводаБюджетаБДДС.Период,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.ВалютаДокумента КАК Валюта,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.Сценарий,
	|   " + ТекстПолей_бит_ФормаВводаБюджетаБДДС + "				   
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-06 (#3045)
	//|	бит_ФормаВводаБюджетаБДДС.Количество,
	//Заменено на:
	|	0 КАК Количество,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-06 (#3045)
	|	ВЫБОР КОГДА бит_ФормаВводаБюджетаБДДС.СтатьяОборотов.ЭтоКоэффициент = ИСТИНА 
	// BIT AMerkulov 13-12-2015 ++
	//|         ТОГДА ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.Сумма, 0) 
	//|         ИНАЧЕ ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.Сумма, 0) * &РазмерностьСумм 
	|         Тогда ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС, 0) 
	|         Иначе ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС, 0) * &РазмерностьСумм 
	// BIT AMerkulov 13-12-2015 --
	|   КОНЕЦ КАК Сумма,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-08 (#3121)
	//|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	//Заменено на:
	|	бит_ФормаВводаБюджетаБДДС.бит_СтавкаНДС КАК СтавкаНДС,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-08 (#3121)
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС, 0) КАК СуммаБезНДС,
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаСценарий,
	//1c-izhtc spawn (
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_Организация КАК бит_БК_Организация,
	//|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВРамкахБюджетаБезНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаВРамкахБюджетаБезНДС,
	//|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаЗаРамкамиБюджетаБезНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаЗаРамкамиБюджетаБезНДС,
	//|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВРамкахБюджетаСНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаВРамкахБюджетаСНДС,
	//|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаЗаРамкамиБюджетаСНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаЗаРамкамиБюджетаСНДС
	|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаБезНДС,
	|	0 * &РазмерностьСумм КАК бит_БК_СуммаСНДС,
	//1c-izhtc spawn )
	|	бит_ФормаВводаБюджетаБДДС.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|   %РежимФормированияДвижений%
	|
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Период,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка.ВалютаДокумента,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка.Сценарий,
	//|   " + ТекстПолей_бит_ФормаВводаБюджетаЗависимыеОбороты + "				   
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Количество,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Сумма,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.СтатьяОборотов.СтавкаНДС,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.СтатьяОборотов.ЭтоКоэффициент,	
	//|	0,
	//|	0,
	//|	0,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Комментарий
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.ЗависимыеОбороты КАК бит_ФормаВводаБюджетаЗависимыеОбороты
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка = &Ссылка
	//|   %РежимФормированияДвиженийЗависимые%
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	|";
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.НастройкаФормы, "Вид") = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет Тогда
		флЭтоФиксированныйМакет = Истина;
	Иначе
		флЭтоФиксированныйМакет = Ложь;
	КонецЕсли;
	
	Если флЭтоФиксированныйМакет Тогда
		Если ЭтотОбъект.РежимФормированияДвижений = Перечисления.бит_РежимыФормированияДвиженийФормыВвода.Расчетные Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвижений%","И бит_ФормаВводаБюджетаБДДС.Расчетная = Истина");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвиженийЗависимые%","И бит_ФормаВводаБюджетаЗависимыеОбороты.Расчетная = Истина");		
		ИначеЕсли ЭтотОбъект.РежимФормированияДвижений = Перечисления.бит_РежимыФормированияДвиженийФормыВвода.ИсключаяРасчетные Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвижений%","И бит_ФормаВводаБюджетаБДДС.Расчетная = Ложь");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвиженийЗависимые%","И бит_ФормаВводаБюджетаЗависимыеОбороты.Расчетная = Ложь");		
		Иначе 			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвижений%","");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвиженийЗависимые%","");		
		КонецЕсли;	
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвижений%","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвиженийЗависимые%","");		
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Ссылка"		   , Ссылка);			   
	Запрос.УстановитьПараметр("РазмерностьСумм", РазмерностьСумм);
	
	Результат = Запрос.Выполнить();
	ТаблицаБДДС = Результат.Выгрузить();
	
	// Получим таблицу периодов.
	КурсыПоПериодам = Неопределено;
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		ТаблицаПериодов = БДДС.Выгрузить();
		ТаблицаПериодов.Свернуть("Период");
		// Установим настройки для получения курсов по периодам.
		СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий,ВалютаДокумента);
		// Получим курсы по периодам.
		КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,Сценарий,СтруктураПараметров);
	КонецЕсли;
	бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаБДДС,КурсыПоПериодам,СтруктураКурсыВалют);
	Возврат ТаблицаБДДС;
	
КонецФункции


Процедура ПередЗаписьюВБП(Отказ, РежимЗаписи, РежимПроведения)

	Если РольДоступна("бит_рлс_ФинансистЦФО") Тогда
		// Проверка на наличие недопустимых ЦФО.
		Заголовок = "Проверка прав доступа:";	
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект,БДДС,"БДДС",Заголовок,Отказ);
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект,ЗависимыеОбороты,"Зависимые обороты",Заголовок,Отказ);
	Иначе
		// Проверка на наличие недопустимых пар ЦФО/СтатьяОборотов.
		Заголовок = "Проверка прав доступа:";	
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,БДДС,"БДДС",Заголовок,Отказ);
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,ЗависимыеОбороты,"Зависимые обороты",Заголовок,Отказ);
	КонецЕсли;

КонецПроцедуры
 
Процедура АктуализироватьКурсы()

	Если ЗначениеЗаполнено(Сценарий) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "ИспользоватьКурсыСценария") Тогда
		ДатаКурса = ДатаНачалаПланирования;
		СтрКурса			= бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДокумента, ДатаКурса);
		КурсДокумента		= СтрКурса.Курс;
		КратностьДокумента	= СтрКурса.Кратность;
	Иначе
		Если ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Возврат;
		КонецЕсли; 
		СтрКурса			= бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		КурсДокумента 		= СтрКурса.Курс;
		КратностьДокумента 	= СтрКурса.Кратность;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-22 (#2873)
Функция ПроверитьСуперВизы()
	
	ВсеВизыПолучены = Ложь;
	
	СписокСуперВиз = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Визирование","Список супервиз",Новый СписокЗначений);
	Если СписокСуперВиз.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект"			,Ссылка);
		Запрос.УстановитьПараметр("СписокСуперВиз"	,СписокСуперВиз);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	бит_УстановленныеВизы.Объект
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|ГДЕ
		|	бит_УстановленныеВизы.Виза В(&СписокСуперВиз)
		|	И бит_УстановленныеВизы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.Согласовано)
		|	И бит_УстановленныеВизы.Объект = &Объект";
		
		Результат = Запрос.Выполнить();
		ВсеВизыПолучены = НЕ Результат.Пустой();				
		
	КонецЕсли;
	
	Возврат ВсеВизыПолучены;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-22 (#2873)

// BIT Amerkulov 30102014 ++	
Процедура СформироватьДвиженияПоЗаявке(ТаблицаБДДС)
	
	ТаблицаДвижений = Движения.бит_СогласованныеЛимитыПоЗаявкам;
	
	Для Каждого Стр Из ТаблицаБДДС Цикл
		
		СтрокаДвижения 					= ТаблицаДвижений.ДобавитьПриход(); 
		СтрокаДвижения.Заявка 			= Ссылка; 
		СтрокаДвижения.Объект 			= Стр.Аналитика_2; 
		СтрокаДвижения.ПериодЗатраты 	= Стр.Период; 
		СтрокаДвижения.Период			= Дата;
		СтрокаДвижения.Сумма			= Стр.Сумма;
		
	КонецЦикла;
	
	
КонецПроцедуры	
// BIT Amerkulov 30102014 --

//Начало_бит_БК_Магомедов_23.11.2011

//Перед записью заполняет значения в ТЧ
Процедура бит_ЗаполнитьЗначенияПоУмолчаниюВСтроках()
	//Начало_бит_БК_Магомедов_02.12.2011
	//Перед записью получим значение ссылки для записи в Аналитика_1
	Если ЭтоНовый() тогда
		СсылкаНового = Документы.бит_ФормаВводаБюджета.ПолучитьСсылку();
		УстановитьСсылкуНового(СсылкаНового);
	Иначе 
		СсылкаНового = Ссылка;
	КонецЕсли;
	
	Для каждого ТекСтрока Из БДДС Цикл
		Если 
			// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
			НЕ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный И 
			// - БИТ AMerkulov 
			НЕ ТекСтрока.Сценарий = Сценарий Тогда 
			ТекСтрока.Сценарий = Сценарий;
		КонецЕсли;
		
		//1c-izhtc spawn (
		//Если НЕ ТекСтрока.Аналитика_3 = Перечисления.бит_БК_ВариантыБюджета.ВРамкахБюджета Тогда 
		//	ТекСтрока.Аналитика_3 = Перечисления.бит_БК_ВариантыБюджета.ВРамкахБюджета;
		//КонецЕсли;
		//1c-izhtc spawn )
		
		Если НЕ ТекСтрока.Контрагент = Контрагент Тогда 
			ТекСтрока.Контрагент = Контрагент;
		КонецЕсли;
		Если НЕ ТекСтрока.ДоговорКонтрагента = ДоговорКонтрагента Тогда 
			ТекСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		КонецЕсли;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-02 (#3045)
		Если ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-02 (#3045)
			Если НЕ ТекСтрока.Аналитика_1 = СсылкаНового Тогда 
				ТекСтрока.Аналитика_1 = СсылкаНового;
			КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-02 (#3045)
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-02 (#3045)			
		
		//Если ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС > 0 Тогда 
		//	ТекСтрока.бит_БК_ПревышениеБюджета = Истина;
		//Иначе 
		//	ТекСтрока.бит_БК_ПревышениеБюджета = Ложь;
		//КонецЕсли;
		
		//+Сенин С.В. 22.08.16 №2482
		Если Не ЗначениеЗаполнено(ТекСтрока.ПредставлениеПериода) Тогда
			
			Периодичность = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);	
			ТекСтрока.ПредставлениеПериода = бит_Бюджетирование.СформироватьПредставлениеПериода(ТекСтрока.Период, Периодичность);		
			
		КонецЕсли; 
		//-Сенин С.В. 22.08.16 №2482
		
	КонецЦикла; 
	
КонецПроцедуры

//Установить валюту в Строках по валюте документа БК
Процедура бит_БК_УстановитьВалютуВСтроках() Экспорт
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		Для Каждого ТекСтрока ИЗ БДДС Цикл
			
			//{ bit_SVKushnirenko 05.06.2017 #2735
			//ИсходныйКод{
			//ТекСтрока.бит_БК_ВалютаДоговора = бит_БК_ВалютаДокумента;
			//}ИсходныйКод
			//Отключаем перезаполнение валюты в строках при изменении валюты в шапке
			//} bit_SVKushnirenko 05.06.2017 #2735
			
			//ТекСтрока.бит_БК_Курс = бит_БК_КурсДокумента;
			//ТекСтрока.бит_БК_Кратность = бит_БК_КратностьДокумента;
			
			//{ bit_SVKushnirenko 02.06.2017 #2735
			//ИсходныйКод{
			//ПересчитатьСуммыПриИзмененииВалюта(ТекСтрока);
			//}ИсходныйКод
			
			ПересчитатьСуммыПриИзмененииВалюта(ТекСтрока, Новый Структура("Валюта, Курс, Кратность", бит_БК_ВалютаДокумента, бит_БК_КурсДокумента, 1)); //точечное распространение влияния на 
			//} bit_SVKushnirenko 02.06.2017 #2735
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//   действия с суммами
Процедура ПересчитатьСуммыБДДС(ТочкаВхода, ТекРассчитыватьСуммуЗаРамками = Истина) Экспорт
	Для Каждого ТекСтрока Из БДДС Цикл
		ПересчитатьСуммы(ТочкаВхода, ТекСтрока, ТекРассчитыватьСуммуЗаРамками)
	КонецЦикла;
КонецПроцедуры

Процедура ПересчитатьСуммы(ТочкаВхода, ТекущаяСтрока, ТекРассчитыватьСуммуЗаРамками = Истина) Экспорт
	//РассчитыватьСуммуЗаРамками = ТекРассчитыватьСуммуЗаРамками;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-04-22 (#2996)
	пСохрСуммаПредоплаты = ТекущаяСтрока.СБ_СуммаПредоплаты;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-04-22 (#2996)
	
	Если ТочкаВхода = "СуммаСНДС" Тогда
		ПересчитатьСуммыПриИзмененииСуммаСНДС(ТекущаяСтрока);
		//ИначеЕсли ТочкаВхода = "СуммаВРамкахБюджетаСНДС" Тогда
		//	ПересчитатьСуммыПриИзменениибит_БК_СуммаВРамкахБюджетаСНДС(ТекущаяСтрока);
	ИначеЕсли ТочкаВхода = "СуммаБезНДС" Тогда
		ПересчитатьСуммыПриИзменениибит_БК_СуммаБезНДС(ТекущаяСтрока);
		//ИначеЕсли ТочкаВхода = "СуммаВРамкахБюджетаБезНДС" Тогда
		//	ПересчитатьСуммыПриИзменениибит_БК_СуммаВРамкахБюджетаБезНДС(ТекущаяСтрока);
	ИначеЕсли ТочкаВхода = "СтавкаНДС" Тогда
		ПересчитатьСуммыПриИзмененииСтавкаНДС(ТекущаяСтрока);
		
		//{ bit_SVKushnirenko 02.06.2017 #2735
		//ИсходныйКод{
		//ИначеЕсли ТочкаВхода = "Валюта" Тогда 
		//}ИсходныйКод
	ИначеЕсли ТочкаВхода = "Валюта" или ТочкаВхода = "Курс" или ТочкаВхода = "Кратность" Тогда //точечно изменяем подход расчета по курсу в строке: курс берем из данных контекста
		//} bit_SVKushnirenko 02.06.2017 #2735
		
		//{ bit_SVKushnirenko 14.06.2017 #2735
		//ИсходныйКод{
		//ПересчитатьСуммыПриИзмененииВалюта(ТекущаяСтрока);
		//}ИсходныйКод
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)
		//ПересчитатьСуммыПриИзмененииВалюта(ТекущаяСтрока, Новый Структура("ТочкаВхода", ТочкаВхода));
		//Заменено на:
		Если ТочкаВхода = "Валюта" И (Найти(ТекущаяСтрока.бит_БК_БлокировкиПолейФинансовогоКонтроллера,"бит_БК_Курс;") <> 0 ИЛИ
			 Найти(ТекущаяСтрока.бит_БК_БлокировкиПолейФинансовогоКонтроллера,"бит_БК_Курс;") <> 0)
		Тогда 
			ПересчитатьСуммыПриИзмененииВалюта(ТекущаяСтрока, Новый Структура("ТочкаВхода", ""));
		Иначе 
			ПересчитатьСуммыПриИзмененииВалюта(ТекущаяСтрока, Новый Структура("ТочкаВхода", ТочкаВхода));
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
		//} bit_SVKushnirenko 14.06.2017 #2735
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	ИначеЕсли ТочкаВхода = "ВалютаКурсНаТекущуюДату" Тогда
		ПересчитатьСуммыПриИзмененииВалюта(ТекущаяСтрока, Новый Структура("ТочкаВхода", ТочкаВхода));
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	ИначеЕсли ТочкаВхода = "СуммаВВалютеБезНДС" Тогда
		ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекущаяСтрока);
	ИначеЕсли ТочкаВхода = "СуммаВВалютеСНДС" Тогда
		ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеСНДС(ТекущаяСтрока);
	ИначеЕсли ТочкаВхода = "Количество" Тогда
		ПересчитатьСуммыПриИзмененииКоличество(ТекущаяСтрока);
	ИначеЕсли ТочкаВхода = "ЦенаБезНДС" Тогда
		ПересчитатьСуммыПриИзменениибит_БК_ЦенаБезНДС(ТекущаяСтрока);
	ИначеЕсли ТочкаВхода = "ЦенаСНДС" Тогда
		ПересчитатьСуммыПриИзменениибит_БК_ЦенаСНДС(ТекущаяСтрока);
	ИначеЕсли ТочкаВхода = "ЦенаВВалютеБезНДС" Тогда
		ПересчитатьСуммыПриИзменениибит_БК_ЦенаВВалютеБезНДС(ТекущаяСтрока);
	ИначеЕсли ТочкаВхода = "ЦенаВВалютеСНДС" Тогда
		ПересчитатьСуммыПриИзменениибит_БК_ЦенаВВалютеСНДС(ТекущаяСтрока);
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-04-22 (#2996) 	
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-18 (#2873)
	//ИтогоПредоплаты = 0;
	//Для Каждого ТекСтрока ИЗ БДДС Цикл 
	//	ТекСтрока.СБ_СуммаПредоплаты = ТекСтрока.бит_БК_СуммаБезНДС * ТекСтрока.бит_БК_СуммаПредоплаты/100;
	//	ИтогоПредоплаты = ИтогоПредоплаты + ТекСтрока.СБ_СуммаПредоплаты;
	//КонецЦикла;
	//СБ_СуммаПредоплатыИтого  = ИтогоПредоплаты; 
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-18 (#2873)
	//Заменено на:
	ТекущаяСтрока.СБ_СуммаПредоплаты = ТекущаяСтрока.бит_БК_СуммаБезНДС * ТекущаяСтрока.бит_БК_СуммаПредоплаты/100;
	СБ_СуммаПредоплатыИтого  = СБ_СуммаПредоплатыИтого - пСохрСуммаПредоплаты + ТекущаяСтрока.СБ_СуммаПредоплаты;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-04-22 (#2996)
	
КонецПроцедуры

//        ставка НДС
Процедура ПересчитатьСуммыПриИзмененииСтавкаНДС(ТекСтрока)	
	Если ЗначениеЗаполнено(ТекСтрока.бит_БК_СуммаБезНДС) Тогда
		ПересчитатьСуммыПриИзменениибит_БК_СуммаБезНДС(ТекСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Сумма) Тогда  
		ПересчитатьСуммыПриИзмененииСуммаСНДС(ТекСтрока);
	КонецЕсли; 		
КонецПроцедуры
Функция РассчитатьНДС(Сумма, СуммаВключаетНДС, ТекСтрока)
	//БИТ Соломина 20160128 ( /ставку ндс берем из тч, а не из статьи оборотов
	Если СуммаВключаетНДС Тогда 
		НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.бит_СтавкаНДС));
	Иначе
		НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.бит_СтавкаНДС));
	КонецЕсли;
	Возврат НДС;
	//БИТ )
КонецФункции

//Валюта

//{bit_SVKushnirenko 14.06.2017 #2735
//Получает курс системы для строки, для случая изменения валюты в строке
// Параметры:
//парТекущаяСтрока - текущая строка БДДС
//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
//расширение функционала процедуры
//Функция ПолучитьКурсСистемы(парТекущаяСтрока)
//
//	пСтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(парТекущаяСтрока.бит_БК_ВалютаДоговора,Дата);
Функция ПолучитьКурсСистемы(парТекущаяСтрока, НаДату = Неопределено)
	пСтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(парТекущаяСтрока.бит_БК_ВалютаДоговора, ?(НаДату = Неопределено, Дата, НаДату));
//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)

	
	пСтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(парТекущаяСтрока.бит_БК_ВалютаДоговора,Дата);
	парТекущаяСтрока.бит_БК_Курс = пСтруктураКурса.Курс;
	парТекущаяСтрока.бит_БК_Кратность = пСтруктураКурса.Кратность;
	
	Если парТекущаяСтрока.бит_БК_Курс = 0 Тогда  
		
		парТекущаяСтрока.бит_БК_Курс = 1; //значение по умолчанию
	КонецЕсли;
	
	Если парТекущаяСтрока.бит_БК_Кратность = 0 Тогда  
		
		парТекущаяСтрока.бит_БК_Кратность = 1; //значение по умолчанию
	КонецЕсли;
КонецФункции // ПолучитьКурсСистемы() }bit_SVKushnirenko 14.06.2017 #2735


//{ bit_SVKushnirenko 02.06.2017 #2735
//ИсходныйКод{
//Процедура ПересчитатьСуммыПриИзмененииВалюта(ТекСтрока)
//}ИсходныйКод

Процедура ПересчитатьСуммыПриИзмененииВалюта(ТекСтрока, парПараметрКурсаКонтекста = Неопределено)
	//} bit_SVKushnirenko 02.06.2017 #2735
	
	//{ bit_SVKushnirenko 02.06.2017 #2735
	//ИсходныйКод{
	//СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий,ТекСтрока.бит_БК_ВалютаДоговора,Дата);
	//ТекСтрока.бит_БК_Курс      = СтрКурса.Курс;
	//ТекСтрока.бит_БК_Кратность = СтрКурса.Кратность;
	//}ИсходныйКод
	
	//отключаем зависимость от курса сценария, расчет делается по стандартному курсу валют или по курсу в строке
	Если парПараметрКурсаКонтекста = Неопределено Тогда  //выбираем курс валюты в строке из курсов валют и считаем по старой методе, но курс берем уже из курсов валют, а не сценария
		
		ПолучитьКурсСистемы(ТекСтрока);
	Иначе //известна точка входа (можно принять решение: менять или не менять курсы в строке)
		
		Если парПараметрКурсаКонтекста.ТочкаВхода = "Валюта" Тогда  //изменилась валюта = изменяем курсы пересчета
			
			ПолучитьКурсСистемы(ТекСтрока);
			
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		ИначеЕсли парПараметрКурсаКонтекста.ТочкаВхода = "ВалютаКурсНаТекущуюДату" Тогда
			ПолучитьКурсСистемы(ТекСтрока, ТекущаяДатаСеанса());
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		
		Иначе //изменился курс или кратность = курсы не берем (иначе их невозможно будет изменить интерактивно)
			
			Если ТекСтрока.бит_БК_Курс = 0 Тогда  
				
				ТекСтрока.бит_БК_Курс = 1; //значение по умолчанию
			КонецЕсли;
			
			Если ТекСтрока.бит_БК_Кратность = 0 Тогда  
				
				ТекСтрока.бит_БК_Кратность = 1; //значение по умолчанию
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//} bit_SVKushnirenko 02.06.2017 #2735
	
	Если ЗначениеЗаполнено(ТекСтрока.бит_БК_СуммаВВалютеБезНДС) Тогда
		ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.бит_БК_СуммаБезНДС) Тогда 
		ПересчитатьСуммыПриИзменениибит_БК_СуммаБезНДС(ТекСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Сумма) Тогда
		ПересчитатьСуммыПриИзмененииСуммаСНДС(ТекСтрока); 
	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.бит_БК_СуммаВВалютеСНДС) Тогда  
		ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеСНДС(ТекСтрока);
	КонецЕсли;
КонецПроцедуры

//Количество
Процедура ПересчитатьСуммыПриИзмененииКоличество(ТекСтрока)
	Если ЗначениеЗаполнено(ТекСтрока.бит_БК_ЦенаБезНДС) Тогда 
		ПересчитатьСуммыПриИзменениибит_БК_ЦенаБезНДС(ТекСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.бит_БК_ЦенаСНДС) Тогда
		ПересчитатьСуммыПриИзменениибит_БК_ЦенаСНДС(ТекСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.бит_БК_ЦенаВВалютеБезНДС) Тогда
		ПересчитатьСуммыПриИзменениибит_БК_ЦенаВВалютеБезНДС(ТекСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекСтрока.бит_БК_ЦенаВВалютеСНДС) Тогда  
		ПересчитатьСуммыПриИзменениибит_БК_ЦенаВВалютеСНДС(ТекСтрока);
	КонецЕсли;	
КонецПроцедуры

//			С НДС
Процедура РассчитатьСуммыСНДС(ТекСтрока)
	НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаБезНДС, Ложь, ТекСтрока);
	//1c-izhtc spawn (
	// НДС больше не используется в ТЧ БДДС
	//ТекСтрока.НДС = НДС;
	//1c-izhtc spawn )
	ТекСтрока.Сумма = ТекСтрока.бит_БК_СуммаБезНДС + НДС;
	
	//НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС, Ложь, ТекСтрока);
	//ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС = ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС + НДС;
	
	//НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС, Ложь, ТекСтрока);
	//ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаСНДС = ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС + НДС;
	
	НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаВВалютеБезНДС, Ложь, ТекСтрока);
	ТекСтрока.бит_БК_СуммаВВалютеСНДС = ТекСтрока.бит_БК_СуммаВВалютеБезНДС + НДС;
	
	ТекСтрока.бит_БК_ЦенаСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.Сумма/ТекСтрока.Количество);
	ТекСтрока.бит_БК_ЦенаВВалютеСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеСНДС/ТекСтрока.Количество);
КонецПроцедуры

Процедура ПересчитатьСуммыПриИзмененииСуммаСНДС(ТекСтрока)	
	ДействияПриИзмененииСуммаСНДС(ТекСтрока);
	РассчитатьСуммыБезНДС(ТекСтрока); 	
КонецПроцедуры
Процедура ДействияПриИзмененииСуммаСНДС(ТекСтрока)
	
	ТекСтрока.бит_БК_СуммаВВалютеСНДС = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,																	  
	ВалютаДокумента,
	ТекСтрока.бит_БК_ВалютаДоговора,
	КурсДокумента,
	ТекСтрока.бит_БК_Курс,
	КратностьДокумента,
	ТекСтрока.бит_БК_Кратность);
	
	//Если ТекСтрока.Сумма < ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС ИЛИ 
	//     ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС = 0 ИЛИ
	//     ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан ИЛИ
	//     Не РассчитыватьСуммуЗаРамками Тогда
	//     ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС = ТекСтрока.Сумма;
	//КонецЕсли;
	
	//РассчитатьСуммуЗаРамкамиСНДС(ТекСтрока);
	
	Текстрока.бит_БК_ЦенаСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.Сумма/ТекСтрока.Количество);
	Текстрока.бит_БК_ЦенаВВалютеСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеСНДС/ТекСтрока.Количество);	 
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	Если БДДС.Количество() >0 Тогда
	ТекСтрока.СБ_СуммаПредоплаты = ТекСтрока.бит_БК_СуммаБезНДС * ТекСтрока.бит_БК_СуммаПредоплаты/100;
	КонецЕсли;
	СБ_СуммаПредоплатыИтого  = БДДС.Итог("СБ_СуммаПредоплаты");  
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	
КонецПроцедуры  
Процедура ПересчитатьСуммыПриИзменениибит_БК_СуммаВРамкахБюджетаСНДС(ТекСтрока)		
	//ДействияПриИзменениибит_БК_СуммаВРамкахБюджетаСНДС(ТекСтрока);
	//РассчитатьСуммыБезНДС(ТекСтрока);
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_СуммаВРамкахБюджетаСНДС(ТекСтрока)
	//Если ТекСтрока.Сумма < ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС  ИЛИ
	//	  Не РассчитыватьСуммуЗаРамками Тогда
	//	ТекСтрока.Сумма = ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС;
	//КонецЕсли;
	//
	//ТекСтрока.бит_БК_СуммаВВалютеСНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,																	  
	//																				ВалютаДокумента,
	//																				ТекСтрока.бит_БК_ВалютаДоговора,
	//																				КурсДокумента,
	//																				ТекСтрока.бит_БК_Курс,
	//																				КратностьДокумента,
	//																				ТекСтрока.бит_БК_Кратность);
	//РассчитатьСуммуЗаРамкамиСНДС(ТекСтрока);
	//
	//Текстрока.бит_БК_ЦенаСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.Сумма/ТекСтрока.Количество);
	//Текстрока.бит_БК_ЦенаВВалютеСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеСНДС/ТекСтрока.Количество);
КонецПроцедуры
Процедура РассчитатьСуммуЗаРамкамиСНДС(ТекСтрока)
	//ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаСНДС = ТекСтрока.Сумма - ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС;
КонецПроцедуры
Процедура ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеСНДС(ТекСтрока)
	ДействияПриИзменениибит_БК_СуммаВВалютеСНДС(ТекСтрока);
	РассчитатьСуммыБезНДС(ТекСтрока);
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_СуммаВВалютеСНДС(ТекСтрока)
	ТекСтрока.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСтрока.бит_БК_СуммаВВалютеСНДС,
	ТекСтрока.бит_БК_ВалютаДоговора,
	ВалютаДокумента,
	ТекСтрока.бит_БК_Курс,
	КурсДокумента,
	ТекСтрока.бит_БК_Кратность,
	КратностьДокумента);
	
	//Если ТекСтрока.Сумма < ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС ИЛИ ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС = 0 ИЛИ
	//	 ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан  ИЛИ
	//	  Не РассчитыватьСуммуЗаРамками Тогда
	//	 ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС = ТекСтрока.Сумма;
	//КонецЕсли;
	
	//РассчитатьСуммуЗаРамкамиСНДС(ТекСтрока);
	
	Текстрока.бит_БК_ЦенаСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.Сумма/ТекСтрока.Количество);
	Текстрока.бит_БК_ЦенаВВалютеСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеСНДС/ТекСтрока.Количество);
КонецПроцедуры

Процедура ПересчитатьСуммыПриИзменениибит_БК_ЦенаСНДС(ТекСтрока)
	ДействияПриИзменениибит_БК_ЦенаСНДС(ТекСтрока);
	РассчитатьСуммыБезНДС(ТекСтрока);
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_ЦенаСНДС(ТекСтрока)
	ТекСтрока.Сумма = ТекСтрока.бит_БК_ЦенаСНДС * ТекСтрока.Количество;
	
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	ТекСтрока.СБ_СуммаПредоплаты = ТекСтрока.бит_БК_СуммаБезНДС * ТекСтрока.бит_БК_СуммаПредоплаты/100;
	СБ_СуммаПредоплатыИтого  = БДДС.Итог("СБ_СуммаПредоплаты");  
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	
	ДействияПриИзмененииСуммаСНДС(ТекСтрока);
КонецПроцедуры

Процедура ПересчитатьСуммыПриИзменениибит_БК_ЦенаВВалютеСНДС(ТекСтрока)
	ДействияПриИзменениибит_БК_ЦенаВВалютеСНДС(ТекСтрока);
	РассчитатьСуммыБезНДС(ТекСтрока);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-27 (#2873)
	ПересчитатьСуммы("СуммаБезНДС", ТекСтрока);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-27 (#2873)
	
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_ЦенаВВалютеСНДС(ТекСтрока)
	ТекСтрока.бит_БК_СуммаВВалютеСНДС = ТекСтрока.бит_БК_ЦенаВВалютеСНДС * ТекСтрока.Количество;
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	ТекСтрока.СБ_СуммаПредоплаты = ТекСтрока.бит_БК_СуммаБезНДС * ТекСтрока.бит_БК_СуммаПредоплаты/100;
	СБ_СуммаПредоплатыИтого  = БДДС.Итог("СБ_СуммаПредоплаты");
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	
	ДействияПриИзменениибит_БК_СуммаВВалютеСНДС(ТекСтрока);
КонецПроцедуры

//			БЕЗ НДС
Процедура РассчитатьСуммыБезНДС(ТекСтрока)
	НДС = РассчитатьНДС(ТекСтрока.Сумма, Истина, ТекСтрока);
	//1c-izhtc spawn (
	// НДС больше не используется в ТЧ БДДС
	//ТекСтрока.НДС = НДС;
	//1c-izhtc spawn )
	ТекСтрока.бит_БК_СуммаБезНДС = ТекСтрока.Сумма - НДС;
	
	//НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС, Истина, ТекСтрока);
	//ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС = ТекСтрока.бит_БК_СуммаВРамкахБюджетаСНДС - НДС;
	//
	//НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаСНДС, Истина, ТекСтрока);
	//ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС = ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаСНДС - НДС;
	
	НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаВВалютеСНДС, Истина, ТекСтрока);
	ТекСтрока.бит_БК_СуммаВВалютеБезНДС = ТекСтрока.бит_БК_СуммаВВалютеСНДС - НДС;
	
	ТекСтрока.бит_БК_ЦенаБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаБезНДС/ТекСтрока.Количество);
	ТекСтрока.бит_БК_ЦенаВВалютеБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеБезНДС/ТекСтрока.Количество);
КонецПроцедуры

Процедура ПересчитатьСуммыПриИзменениибит_БК_СуммаБезНДС(ТекСтрока)
	ДействияПриИзменениибит_БК_СуммаБезНДС(ТекСтрока);
	РассчитатьСуммыСНДС(ТекСтрока);
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_СуммаБезНДС(ТекСтрока)
	
	ТекСтрока.бит_БК_СуммаВВалютеБезНДС = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСтрока.бит_БК_СуммаБезНДС,																	  
	ВалютаДокумента,
	ТекСтрока.бит_БК_ВалютаДоговора,
	КурсДокумента,
	ТекСтрока.бит_БК_Курс,
	КратностьДокумента,
	ТекСтрока.бит_БК_Кратность);
	
	//Если ТекСтрока.бит_БК_СуммаБезНДС < ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС ИЛИ
	//	ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС = 0 ИЛИ
	//	ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан ИЛИ
	//	  Не РассчитыватьСуммуЗаРамками Тогда
	//	ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС = ТекСтрока.бит_БК_СуммаБезНДС;
	//КонецЕсли;
	
	//РассчитатьСуммуЗаРамкамиБезНДС(ТекСтрока);
	
	ТекСтрока.бит_БК_ЦенаБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаБезНДС/ТекСтрока.Количество);
	ТекСтрока.бит_БК_ЦенаВВалютеБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеБезНДС/ТекСтрока.Количество);
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	ТекСтрока.СБ_СуммаПредоплаты = ТекСтрока.бит_БК_СуммаБезНДС *  ТекСтрока.бит_БК_СуммаПредоплаты/100;
	СБ_СуммаПредоплатыИтого  = БДДС.Итог("СБ_СуммаПредоплаты");
	//+СБ Пискунова 13.01.2017 ТЗ #2691

КонецПроцедуры 
Процедура ПересчитатьСуммыПриИзменениибит_БК_СуммаВРамкахБюджетаБезНДС(ТекСтрока)
	//ДействияПриИзменениибит_БК_СуммаВРамкахБюджетаБезНДС(ТекСтрока);
	//РассчитатьСуммыСНДС(ТекСтрока);
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_СуммаВРамкахБюджетаБезНДС(ТекСтрока)
	//Если ТекСтрока.бит_БК_СуммаБезНДС < ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС ИЛИ
	//	  Не РассчитыватьСуммуЗаРамками Тогда
	//	ТекСтрока.бит_БК_СуммаБезНДС = ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС;
	//КонецЕсли;
	//
	//ТекСтрока.бит_БК_СуммаВВалютеБезНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСтрока.бит_БК_СуммаБезНДС,																	  
	//																					ВалютаДокумента,
	//																					ТекСтрока.бит_БК_ВалютаДоговора,
	//																					КурсДокумента,
	//																					ТекСтрока.бит_БК_Курс,
	//																					КратностьДокумента,
	//																					ТекСтрока.бит_БК_Кратность);
	//
	//РассчитатьСуммуЗаРамкамиБезНДС(ТекСтрока);
	//
	//ТекСтрока.бит_БК_ЦенаБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаБезНДС/ТекСтрока.Количество);
	//ТекСтрока.бит_БК_ЦенаВВалютеБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеБезНДС/ТекСтрока.Количество);
КонецПроцедуры
Процедура РассчитатьСуммуЗаРамкамиБезНДС(ТекСтрока)
	////ОК Калинин М. 10122012 Руденко М.
	////ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС = ТекСтрока.бит_БК_СуммаБезНДС - ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС;
	//Установитьбит_БК_СуммаЗаРамкамиБюджетаБезНДС(ТекСтрока,ТекСтрока.бит_БК_СуммаБезНДС - ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС);
	////ОК Калинин М.
КонецПроцедуры

Процедура Установитьбит_БК_СуммаЗаРамкамиБюджетаБезНДС(ТекСтрока,сумма) 
	//ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС=сумма;
	//
	//Если ТекСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС > 0 Тогда 
	//	ТекСтрока.бит_БК_ПревышениеБюджета = Истина;
	//Иначе 
	//	ТекСтрока.бит_БК_ПревышениеБюджета = Ложь;
	//КонецЕсли;
КонецПроцедуры

Процедура ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекСтрока)
	ДействияПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекСтрока);
	РассчитатьСуммыСНДС(ТекСтрока);
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекСтрока)
	ТекСтрока.бит_БК_СуммаБезНДС = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСтрока.бит_БК_СуммаВВалютеБезНДС,
	ТекСтрока.бит_БК_ВалютаДоговора,
	ВалютаДокумента,
	ТекСтрока.бит_БК_Курс,
	КурсДокумента,
	ТекСтрока.бит_БК_Кратность,
	КратностьДокумента);
	
	//Если ТекСтрока.бит_БК_СуммаБезНДС < ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС ИЛИ
	//	ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС = 0 ИЛИ
	//	ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан ИЛИ
	//	  Не РассчитыватьСуммуЗаРамками Тогда
	//	ТекСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС = ТекСтрока.бит_БК_СуммаБезНДС;
	//КонецЕсли;
	
	//РассчитатьСуммуЗаРамкамиБезНДС(ТекСтрока);
	
	ТекСтрока.бит_БК_ЦенаБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаБезНДС/ТекСтрока.Количество);
	ТекСтрока.бит_БК_ЦенаВВалютеБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеБезНДС/ТекСтрока.Количество);
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	ТекСтрока.СБ_СуммаПредоплаты = ТекСтрока.бит_БК_СуммаБезНДС * ТекСтрока.бит_БК_СуммаПредоплаты/100;
	СБ_СуммаПредоплатыИтого  = БДДС.Итог("СБ_СуммаПредоплаты");  
	//+СБ Пискунова 13.01.2017 ТЗ #2691

КонецПроцедуры

Процедура ПересчитатьСуммыПриИзменениибит_БК_ЦенаБезНДС(ТекСтрока)
	ДействияПриИзменениибит_БК_ЦенаБезСНДС(ТекСтрока);
	РассчитатьСуммыСНДС(ТекСтрока);
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_ЦенаБезСНДС(ТекСтрока)
	ТекСтрока.бит_БК_СуммаБезНДС = ТекСтрока.бит_БК_ЦенаБезНДС * ТекСтрока.Количество;
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	ТекСтрока.СБ_СуммаПредоплаты = ТекСтрока.бит_БК_СуммаБезНДС * ТекСтрока.бит_БК_СуммаПредоплаты/100;
	СБ_СуммаПредоплатыИтого  = БДДС.Итог("СБ_СуммаПредоплаты");  
	//+СБ Пискунова 13.01.2017 ТЗ #2691
	
	ДействияПриИзменениибит_БК_СуммаБезНДС(ТекСтрока);
КонецПроцедуры

Процедура ПересчитатьСуммыПриИзменениибит_БК_ЦенаВВалютеБезНДС(ТекСтрока)
	ДействияПриИзменениибит_БК_ЦенаВВалютеБезНДС(ТекСтрока);
	РассчитатьСуммыСНДС(ТекСтрока);
КонецПроцедуры
Процедура ДействияПриИзменениибит_БК_ЦенаВВалютеБезНДС(ТекСтрока)
	ТекСтрока.бит_БК_СуммаВВалютеБезНДС = ТекСтрока.бит_БК_ЦенаВВалютеБезНДС * ТекСтрока.Количество;
	
	ДействияПриИзменениибит_БК_СуммаВВалютеБезНДС(ТекСтрока);
КонецПроцедуры


//Проверка по бюджету строк ТЧ и перераспредеелние сумм
Процедура бит_ПроверитьПоБюджету() Экспорт
	
	//// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда
	//	бит_ПроверитьПоБюджетуУниверсальная();
	//	Возврат;
	//КонецЕсли;
	//// - БИТ AMerkulov 
	
	
	//// Заголовок для сообщений об ошибках проведения.
	//Отказ = Ложь;
	//Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	//Отказ = НЕ ПроверитьЗаполнение();
	//
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	//СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	//
	//СтруктураКурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(ЭтотОбъект,Дата, Новый Структура("Документ, Регл, Упр, Сценарий"));
	//
	//	
	//ТаблицаБДДС = ПодготовитьТаблицуБДДС(СтруктураКурсыВалют);
	//
	////Начало_бит_Магомедов_29.01.2013 
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный  
	//	Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	//	ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
	//	СоответствиеСтатей = Неопределено;
	//КонецЕсли;
	////Конец_бит_Магомедов_29.01.2013 
	//
	//// по регистру контрольные значения
	//Результат = ВыполнитьЗапросКонтрольОстатков(СтруктураШапкиДокумента,ТаблицаБДДС,Отказ,Заголовок, СоответствиеСтатей);
	//Если Результат = Ложь Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//	
	//Выборка = Результат.Выбрать();
	//Пока Выборка.Следующий() Цикл //цикл по остаткам
	//	//Если разность > 0 тогда пропускаем строку
	//	//1c-izhtc spawn (
	//	//Если Выборка.РазностьВРамкахБюджетаБезНДС >= 0 Тогда 
	//	Если Выборка.РазностьБезНДС >= 0 Тогда 
	//	//1c-izhtc spawn )
	//		Продолжить;
	//	КонецЕсли;
	//	//Получаем остаток к распределению сверх бюджета, делаем положительным
	//	//1c-izhtc spawn (
	//	//Остаток = Выборка.РазностьВРамкахБюджетаБезНДС * -1;
	//	Остаток = Выборка.РазностьБезНДС * -1;
	//	//1c-izhtc spawn )
	//	
	//	
	//
	//	//Заполняем Отбор для строк ТЧ
	//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
	//		//для инвеста - без периода
	//		Отбор = Новый Структура("ЦФО, Аналитика_2",Выборка.ЦФО, Выборка.Аналитика_2);
	//	иначе
	//		Отбор = Новый Структура("Период, ЦФО, Аналитика_2", Выборка.Период, Выборка.ЦФО, Выборка.Аналитика_2);
	//	КонецЕсли;
	//	
	//	//получаем массив строк ТЧ с аналитикой остатка, если это опер или инвест заявка, то ищем по соответствию статей
	//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 			 
	//	Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	//		ИЛИ  ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
	//		МассивСтрокСоответствияСтатей = СоответствиеСтатей.НайтиСтроки(Новый Структура("Период, КонтролирующаяСтатья",Выборка.Период,Выборка.СтатьяОборотов));			
	//		МассивСтрок = Новый Массив;
	//		Для Каждого СтрокаСоответствия Из МассивСтрокСоответствияСтатей Цикл
	//			Если СтрокаСоответствия.КонтрольПоСтатье = Истина Тогда 
	//				Отбор.Вставить("СтатьяОборотов", СтрокаСоответствия.СтатьяОборотов);
	//				мМассивСтрок = БДДС.НайтиСтроки(Отбор);
	//				Для Каждого ТекЭлемент Из мМассивСтрок Цикл
	//					МассивСтрок.Добавить(ТекЭлемент);
	//				КонецЦикла;
	//			КонецЕсли;
	//		КонецЦикла;
	//		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтрок);
	//    //ОК Довбешка Т. 23.07.2014	
	//    ИначеЕсли ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
	//		Отбор.Вставить("Проект", Выборка.Проект);
	//		Отбор.Вставить("СтатьяОборотов", Выборка.СтатьяОборотов);
	//		МассивСтрок = БДДС.НайтиСтроки(Отбор);
	//	//ОК Довбешка Т.		
	//	Иначе
	//		Отбор.Вставить("СтатьяОборотов", Выборка.СтатьяОборотов);
	//		МассивСтрок = БДДС.НайтиСтроки(Отбор);
	//		
	//	КонецЕсли;
	//	
	//	КоличествоСтрок = МассивСтрок.Количество();
	//	Если  КоличествоСтрок = 0 Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	//распределяем остаток начиная с последней строки
	//	Для сч = 1 по КоличествоСтрок Цикл //цикл по выбранным строкам ТЧ
	//		Если Остаток = 0 тогда
	//			Прервать;
	//		КонецЕсли;
	//		
	//		ИндексМассива = КоличествоСтрок - сч;
	//		ТекСтрокаМассива = МассивСтрок.Получить(ИндексМассива);
	//		
	//		СуммаКПереносу = Мин(ТекСтрокаМассива.бит_БК_СуммаВРамкахБюджетаБезНДС, Остаток);
	//		Остаток = Остаток - СуммаКПереносу;
	//		СуммаСверхБюджета = ТекСтрокаМассива.бит_БК_СуммаЗаРамкамиБюджетаБезНДС + СуммаКПереносу;
	//		СуммаВРамкахБюджета = ТекСтрокаМассива.бит_БК_СуммаБезНДС - СуммаСверхБюджета; 
	//		//Если ТекСтрокаМассива.бит_БК_СуммаВРамкахБюджетаБезНДС <= Остаток Тогда 
	//		//	СуммаСверхБюджета = ТекСтрокаМассива.бит_БК_СуммаВРамкахБюджетаБезНДС;
	//		//	СуммаВРамкахБюджета = 0;
	//		//	Остаток = Остаток - СуммаСверхБюджета;
	//		//иначе
	//		//	СуммаСверхБюджета = Остаток;
	//		//	СуммаВРамкахБюджета = ТекСтрокаМассива.бит_БК_СуммаВРамкахБюджетаБезНДС - Остаток;
	//		//	Остаток = 0;
	//		//КонецЕсли;
	//		ТекСтрокаТЧ = БДДС.Получить(ТекСтрокаМассива.НомерСтроки - 1);
	//		ТекСтрокаТЧ.бит_БК_СуммаВРамкахБюджетаБезНДС = СуммаВРамкахБюджета;
	//		ПересчитатьСуммы("СуммаВРамкахБюджетаБезНДС",ТекСтрокаТЧ);
	//	КонецЦикла;//цикл по выбранным строкам ТЧ		
	//КонецЦикла;//цикл по остаткам
	//
	////очищаем в рамках бюджета для неконтролируемых статей
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
	//	  
	//	Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	//	ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
	//	
	//	Для Каждого СтрокаСоответствия Из СоответствиеСтатей Цикл
	//		Если СтрокаСоответствия.КонтрольПоСтатье = Ложь Тогда 
	//			Отбор = Новый Структура("Период,СтатьяОборотов", СтрокаСоответствия.Период, СтрокаСоответствия.СтатьяОборотов);
	//			МассивСтрок = БДДС.НайтиСтроки(Отбор);
	//			Для Каждого ТекСтрокаТЧ Из МассивСтрок Цикл
	//				ТекСтрокаТЧ.бит_БК_СуммаВРамкахБюджетаБезНДС = 0;
	//				ПересчитатьСуммы("СуммаВРамкахБюджетаБезНДС",ТекСтрокаТЧ);
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры
// - БИТ AMerkulov 


Функция ВыполнитьЗапросКонтрольОстатков(СтруктураШапкиДокумента,ТаблицаБДДС,Отказ,Заголовок, СоответствиеСтатей)
	//Начало_бит_БК_Магомедов_16.11.2011
	//получаем необходимые Настройки
	СценарийКонтролируемый = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий", Сценарий);
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда 
		СценарийКонтролирующий = Сценарий;
	Иначе 
		СценарийКонтролирующий = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролирующий сценарий", Сценарий);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СценарийКонтролируемый) Тогда 
		Сообщить("Не удалось определить Контролируемый сценарий для сценария <"+Сценарий+">",СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СценарийКонтролирующий) Тогда 
		Сообщить("Не удалось определить Контролирующий сценарий для сценария <"+Сценарий+">",СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеПревышения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Допустимый % превышения", Сценарий, 0);
	
	ТаблицаДляКонтроля = ТаблицаБДДС.Скопировать();
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	
	//Начало_бит_БК_Магомедов_16.11.2011 
	//Добавим в массив исключений не входящие в настройку измерения если такая настройка есть
	бит_СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", СценарийКонтролирующий, Новый СписокЗначений, "СписокЗначений"); 
	Для Каждого ЗначениеПеречисления Из Перечисления.бит_БК_ИзмеренияКонтроляБюджета Цикл
		Если бит_СписокИзмеренийКонтроляБюджета.НайтиПоЗначению(ЗначениеПеречисления) = Неопределено Тогда
			Мета = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления[Перечисления.бит_БК_ИзмеренияКонтроляБюджета.Индекс(ЗначениеПеречисления)];
			МассивИсключений.Добавить(Мета.Имя);
		КонецЕсли;
	КонецЦикла;	
	//Конец_бит_БК_Магомедов_17.11.2011 
	
	ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,мНастройкиИзмерений);
	
	Периодичность = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);	
	бит_БК_Общий.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"                     ,Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
	СтруктураПараметров.Вставить("РежимКонтроля"                ,"Бюджет");
	//Начало_бит_БК_Магомедов_30.11.2011 
	СтруктураПараметров.Вставить("ВидОперации"                ,ВидОперации);
	//Конец_бит_БК_Магомедов_30.11.2011 
	
	ТекстЗапросаДляКонтроля = бит_БК_Общий.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляКонтроля;
	
	
	ТаблицаДляКонтроля.Сортировать("Период Возр");
	
	Если ТаблицаДляКонтроля.Количество()>0 Тогда
		
		ДатаНачала    = ТаблицаДляКонтроля[0].Период;
		ДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;
		
	Иначе
		
		ДатаНачала    = Дата;
		ДатаОкончания = Дата;
		
	КонецЕсли; 
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала,Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания,Периодичность);
	
	МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	
	//Начало_бит_Магомедов_15.01.2013
	//Заполняем соответствие статей и проверяем наличие неконтролируемых статей
	СоответствиеСтатей = бит_БК_Общий.ПолучитьТаблицуСоответствиеСтатей(ТаблицаДляКонтроля);
	ТекстСообщения = "";
	бит_БК_Общий.УстановитьСооветствиеСтатейОборотов(СоответствиеСтатей, Отказ, ТекстСообщения);
	Если Отказ Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		// Возврат;
	КонецЕсли;
	
	//Только для Опер и Инвест заявки  
	//Заменяем статьи оборотов на Контролирующие  в ТаблицаДляКонтроля.
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный  
		Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
		Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
		Для Каждого СтрокаСоответствия Из СоответствиеСтатей Цикл
			Если СтрокаСоответствия.КонтрольПоСтатье = Истина Тогда 
				МассивСтрок = ТаблицаДляКонтроля.НайтиСтроки(Новый Структура("Период,СтатьяОборотов",СтрокаСоответствия.Период, СтрокаСоответствия.СтатьяОборотов));
				Для Каждого ТекСтрока Из МассивСтрок Цикл
					ТекСтрока.СтатьяОборотов = СтрокаСоответствия.КонтролирующаяСтатья;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		//Формируем параметр для запроса
		МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
		//по этому результату будет осуществлятся контроль
		//  РезультатДляКонтроля = Запрос.Выполнить();
		
	КонецЕсли;
	//Конец_бит_Магомедов_15.01.2013 
	
	//Для Контракта Аналитика_1 = НомерЗаявки
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		ТаблицаДляКонтроля.ЗаполнитьЗначения(бит_БК_НомерЗаявки,"Аналитика_1");
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
	Запрос.УстановитьПараметр("СценарийКонтролируемый", Сценарий);
	Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
	Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
	Запрос.УстановитьПараметр("ЗначениеПревышения",ЗначениеПревышения);
	//Начало_бит_БК_Магомедов_28.11.2011 
	Запрос.УстановитьПараметр("ЭтоФинПлан",?(ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан,Истина,Ложь));
	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
	
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
КонецФункции

//1c-izhtc spawn (
// Отклонено
//Распределение по варианту распределения
//Процедура бит_ВариантыРаспределения(ТекСтрока, ВариантРаспределения) Экспорт
//	
//	Индекс = БДДС.Индекс(ТекСтрока);
//	
//	Обработка = Обработки.бит_БК_ВариантыРаспределения.Создать();
//	Обработка.Объект = ЭтотОбъект;
//	Обработка.Индекс = Индекс;	
//	Обработка.ИмяТЧ = "БДДС";
//	Обработка.СуммаКРаспределению = ТекСтрока.бит_БК_СуммаБезНДС;
//	Обработка.ВариантРаспределения = ВариантРаспределения;
//	Обработка.Распределить();
//
//КонецПроцедуры
//1c-izhtc spawn )

Процедура бит_БК_ЗагрузитьРезультатыВариантыРаспределения(Таблица, ИмяТЧ = Неопределено) Экспорт
	
	Если Таблица.Количество() = 0 тогда
		Возврат;
	КонецЕсли;	
	БДДС.Очистить();
	Для Каждого ТекСтрока Из Таблица Цикл
		НовСтрока = БДДС.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрока);
		НовСтрока.бит_БК_СуммаБезНДС = ТекСтрока.РаспределеннаяСумма;
	КонецЦикла;
	
	ПересчитатьСуммыБДДС("СуммаБезНДС");
	
КонецПроцедуры

//Устанавливает реквизиты документа для отображения в списке
Процедура УстановитьРеквизитыСписка(Отказ)
	
	//БИТ АКриштопов 08042016 ++
	//Заполнение вида операции в случае, если документ проводится не интерактивно.
	КоличествоУ = 0;
	КоличествоИнвест = 0;
	//+Сундукова 12.04.2016
	КоличествоБюджетУ = 0;
	КоличествоБюджетИ = 0;
	КоличествоБюджетА = 0;
	КоличествоКонтракт = 0;
	//-Сундукова 12.04.2016
	Для Каждого Строка Из БДДС Цикл
		
		Если Строка.Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда
			КоличествоУ = КоличествоУ + 1;
			//+Сундукова 12.04.2016
		ИначеЕсли Строка.Сценарий = Справочники.СценарииПланирования.Контракт_Инвест Тогда
			КоличествоКонтракт = КоличествоКонтракт + 1;
		ИначеЕсли Строка.Сценарий = Справочники.СценарииПланирования.Бюджет_А Тогда
			КоличествоБюджетА = КоличествоБюджетА + 1;
		ИначеЕсли Строка.Сценарий = Справочники.СценарииПланирования.Бюджет_Инвест Тогда
			КоличествоБюджетИ = КоличествоБюджетИ + 1;
		ИначеЕсли Строка.Сценарий = Справочники.СценарииПланирования.Бюджет_У Тогда
			КоличествоБюджетУ = КоличествоБюджетУ + 1;
			//-Сундукова 12.04.2016
		ИначеЕсли Строка.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест Тогда
			КоличествоИнвест = КоличествоИнвест + 1;			
		КонецЕсли;
		//+Сундукова 18.04.2016 №2395
		Если не ЗначениеЗаполнено(Строка.ЦФО) тогда
			Если ЗначениеЗаполнено(бит_БК_ЦФО) тогда
				Строка.ЦФО = бит_БК_ЦФО;
			иначе
				строка.ЦФО = ЦФО;
			КонецЕсли;
		КонецЕсли;
		//-Сундукова 18.04.2016 №2395
	КонецЦикла;
	Если БДДС.Количество() > 0 И КоличествоИнвест = БДДС.Количество() И ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
		ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный;
		бит_ИзмененВидОперации = Истина;
		
		Сценарий = Справочники.СценарииПланирования.Заявка_Инвест;
		НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ЗаявкаИнвестиционная;		
	КонецЕсли;
	//+Сундукова 12.04.2016
	Если БДДС.Количество() > 0 И КоличествоКонтракт = БДДС.Количество() И ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
		ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт;
		бит_ИзмененВидОперации = Истина;
		
		Сценарий = Справочники.СценарииПланирования.Контракт_Инвест;
		НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.Контракт;		
	КонецЕсли;
	
	Если БДДС.Количество() > 0 И КоличествоБюджетА = БДДС.Количество() И ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан;
		бит_ИзмененВидОперации = Истина;
		
		Сценарий = Справочники.СценарииПланирования.Бюджет_А;
		НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.БюджетА;		
	КонецЕсли;
	
	Если БДДС.Количество() > 0 И КоличествоБюджетИ = БДДС.Количество() И ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан;
		бит_ИзмененВидОперации = Истина;
		
		Сценарий = Справочники.СценарииПланирования.Бюджет_Инвест;
		НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.БюджетИнвест;		
	КонецЕсли;
	
	Если БДДС.Количество() > 0 И КоличествоБюджетУ = БДДС.Количество() И ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан;
		бит_ИзмененВидОперации = Истина;
		
		Сценарий = Справочники.СценарииПланирования.Бюджет_У;
		НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.БюджетУ;		
	КонецЕсли;
	//-Сундукова 12.04.2016
	
	Если БДДС.Количество() > 0 И КоличествоУ = БДДС.Количество() И ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда
		ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный;
		бит_ИзмененВидОперации = Истина;
		
		Сценарий = Справочники.СценарииПланирования.Заявка_У;
		НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ЗаявкаОперационная;		
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный  
		//+Сундукова 12.04.2016
		И  КоличествоКонтракт <> БДДС.Количество()
		И  КоличествоБюджетА <> БДДС.Количество()
		И  КоличествоБюджетИ <> БДДС.Количество()
		И  КоличествоБюджетУ <> БДДС.Количество()
		//-Сундукова 12.04.2016
		И БДДС.Количество() > 0 И  КоличествоИнвест <> БДДС.Количество() И  КоличествоУ <> БДДС.Количество() Тогда
		ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный;
		бит_ИзмененВидОперации = Истина;
		Сценарий = Неопределено;
		НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ЗаявкаУниверсальная;	
	КонецЕсли;
	//БИТ АКриштопов 08042016 --
	//Установка реквизитов по первой строке ТЧ БДДС
	Если БДДС.Количество() > 0 Тогда
		ТекСтрока = БДДС[0];
		бит_БК_Статья = ТекСтрока.СтатьяОборотов;
		
		// BIT AMerkulov 12082014 ++
		//Если НЕ ЗначениеЗаполнено(бит_БК_ЦФО) Тогда 		
		//	бит_БК_ЦФО = ТекСтрока.ЦФО;
		//КонецЕсли;
		//бит_БК_ЦФО = ТекСтрока.ЦФО;
		// BIT AMerkulov 12082014 --
		
		бит_БК_Проект = ТекСтрока.Проект;
		
		Если НЕ ЗначениеЗаполнено(бит_БК_Организация) Тогда 				
			бит_БК_Организация = ТекСтрока.бит_БК_Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(бит_БК_ПредпологаемыйКонтрагент) Тогда 
			бит_БК_ПредпологаемыйКонтрагент = ТекСтрока.бит_БК_ПредпологаемыйКонтрагент;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(бит_БК_ВалютаДокумента) Тогда 				
			//ОК Калинин М. 130813
			бит_БК_ВалютаДокумента = ТекСтрока.бит_БК_ВалютаДоговора;
			//ОК Калинин М. 
		КонецЕсли;
	Иначе 
		бит_БК_Статья = Справочники.бит_СтатьиОборотов.ПустаяСсылка();
		//+Сундукова 16.05.2016 №2462 
		//бит_БК_ЦФО = Справочники.Подразделения.ПустаяСсылка();
		//-Сундукова 16.05.2016 №2462 
		бит_БК_Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры
//Конец_бит_БК_Магомедов_23.11.2011 

//Начало_бит_БК_Магомедов_14.03.2012

//ОК Калинин М. 140912  

//ОК Калинин М.	

//ОК Калинин М. 261112  
Процедура ОК_ОчиститьСверхБюджет()  Экспорт
	//Для Каждого СтрокаТЧ из БДДС Цикл 
	//	//ОК Калинин М. 270812
	//	СтрокаТЧ.бит_БК_СуммаВРамкахБюджетаСНДС=СтрокаТЧ.бит_БК_СуммаВРамкахБюджетаСНДС+СтрокаТЧ.бит_БК_СуммаЗаРамкамиБюджетаСНДС;
	//	//ОК Калинин М. 270812
	//	
	//	//ОК Калинин М. 101212 при установке отразить признак "превышение бюджета"
	//	//СтрокаТЧ.бит_БК_СуммаЗаРамкамиБюджетаБезНДС = 0;
	//	Установитьбит_БК_СуммаЗаРамкамиБюджетаБезНДС(СтрокаТЧ,0);
	//	//ОК Калинин М. 101212
	//	
	//	СтрокаТЧ.бит_БК_СуммаЗаРамкамиБюджетаСНДС=0;
	//	СтрокаТЧ.бит_БК_СуммаВРамкахБюджетаБезНДС = СтрокаТЧ.бит_БК_СуммаБезНДС;                                                 			
	//КонецЦикла;	
КонецПроцедуры	
//ОК Калинин М.
//ОК Калинин М. 150313
//ОК Калинин М.

//Конец_бит_БК_Магомедов_14.03.2012 

//{ bit_SVKushnirenko 27.12.2016 #2671.1
//ИсходныйКод{
//ОК Калинин М. 240713 Заполняет ОЦР соответсвнно матрице доступа
//Процедура ЗаполнитьОЦР() Экспорт
//	Если БДДС.Количество()>0 тогда
//		// ++ БИТ AMerkulov 21022014
//		УстановитьПривилегированныйРежим(Истина);
//		этотобъект.ОК_ОЦР=РегистрыСведений.ОК_БК_ОтветственныеЗаЦентрРезультата.ПолучитьОЦР(Новый Структура("СтатьяОборотов,ОбъектСтроительства,ЦФО",БДДС[0].СтатьяОборотов,БДДС[0].Аналитика_2,бит_БК_ЦФО));
//		УстановитьПривилегированныйРежим(Ложь);
//		// -- БИТ Amerkulov	
//	КонецЕсли;
//КонецПроцедуры
//}ИсходныйКод
//Неактуальная процедура
//} bit_SVKushnirenko 27.12.2016 #2671.1
//+СБ ПИскунова #2691
Процедура ЗапуститьПроцесс() Экспорт
//		ЭтотОбъект.бит_БК_WEBКлиент = Истина;               	
////Обновляем перечень виз в регистре если их нет
//СтруктураОтбор = Новый Структура("Объект",ЭтотОбъект.Ссылка);
//НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
//Если НаборЗаписей.Количество() = 0 Тогда 
//	бит_Визирование.ОбновитьПереченьВиз(ЭтотОбъект.Ссылка,ЭтотОбъект.Дата,СтруктураОтбор);
//КонецЕсли;
	
УстановитьПривилегированныйРежим(Истина);
//ПроверитьУдалитьУстановленныеВручнуюВизы();
//бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
//	Отбор = Новый Структура;
//Отбор.Вставить("Объект",ЭтотОбъект.Ссылка);
//
//НаборВизы = бит_Визирование.ПрочитатьНаборВиз(Отбор);
//НаборВизы.Очистить();
//НаборВизы.записать(); 	

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-17 (#3018)
ЭтотОбъект.ДополнительныеСвойства.Вставить("НеПытатьсяЗакрытьЗаявку", Истина);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-17 (#3018)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-12-05 (#3567)
////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-19 (#3393)
//бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(ЭтотОбъект, Истина);
////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-19 (#3393)
//Заменено на:
ПерезаполнитьОстаткиБюджета = бит_ФормаВводаБюджетаВызовСервера.ОпределитьПризнакПерезаполненияОстатков(Ссылка);
Если ПерезаполнитьОстаткиБюджета Тогда 
	бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(ЭтотОбъект, Истина);
КонецЕсли;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-12-05 (#3567)

СБ_ЗапускПроцессаСПроверкой = Истина; 	
ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-02 (#2986)
//Если НЕ мРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-02 (#2986)

	
	СтатусНач = мТекущийСтатус;
	УстановитьСтатус(мРежимЗаписи);
	
	Если мПроводитьПослеУтверждения 
		И ( СтатусНач = Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик ИЛИ НЕ ЗначениеЗаполнено(СтатусНач))
		И ЭтотОбъект.ОтправленНаСогласование Тогда
		//+СБ Пискунова #2691 30.03.2017
		//Нет необходимости
		//СтруктураПараметров = Новый Структура;
		//СтруктураПараметров.Вставить("ЦФО",ЦФО);		
		//бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураПараметров);
		//-СБ Пискунова #2691 30.03.2017
	КонецЕсли; 
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-02 (#2986)	
//КонецЕсли; 
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-02 (#2986)
//+СБ. Пискунова #2691 30.03.2017
//Нет необходимости	

////БИТ АКриштопов 15042016 После выдачи права инициаторам разрешения на проведение документа
////не формируется список виз. Изменения. ++
СтруктураОтборДок = Новый Структура("Объект",Ссылка);
//СтруктураОтбор = Новый Структура("ЦФО",ЦФО);
НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтборДок);
Если НаборЗаписей.Количество() = 0 Тогда 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)
	СтруктураОтборДок.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
	бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураОтборДок);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-18 (#3393)
	//Прервем выполнение
	Если СтруктураОтборДок.Свойство("ЗакрытьЗаявку")
		И СтруктураОтборДок.ЗакрытьЗаявку = Истина
	Тогда	
	
	    пСсылкаНаДокЗакрытия = Неопределено;
		Если Не ОК_ОбщегоНазначения.ЕстьДвиженияПоФВБПоИсполнениюПлана(Ссылка) Тогда 
			ОК_ОбщегоНазначения.НеобходимостьИЗакрытиеОстаткаСервер(Ссылка, пСсылкаНаДокЗакрытия);
		КонецЕсли;
		
		СБ_ПроцессЗапущен = Ложь;
		ДополнительныеСвойства.Вставить("ЗакрытьЗаявку", Истина);	    
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-18 (#3393)
	
КонецЕсли;

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-18 (#2971)
СтруктураОтборДок.Свойство("ИнициированныеВизы", пИнициированныеВизы); 
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-18 (#2971)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-23 (#3231)
СтруктураОтборДок.Свойство("СообщениеПользователюПоМаршрутуСогласования", ок_СообщениеПользователюПоМаршрутуСогласования);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-23 (#3231)

//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Начало (#3499)
СтруктураОтборДок.Свойство("СообщениеПользователюПоМаршрутуСогласованияНаАнглийскомЯзыке", ок_СообщениеПользователюПоМаршрутуСогласованияНаАнглийскомЯзыке);
//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Конец (#3499

//БИТ АКриштопов 15042016 -- 
//Если БДДС.Количество()>0 тогда
//	// ++ БИТ AMerkulov 21022014
//	УстановитьПривилегированныйРежим(Истина);
//	этотобъект.ОК_ОЦР=РегистрыСведений.ОК_БК_ОтветственныеЗаЦентрРезультата.ПолучитьОЦР(Новый Структура("СтатьяОборотов,ОбъектСтроительства,ЦФО",БДДС[0].СтатьяОборотов,БДДС[0].Аналитика_2,бит_БК_ЦФО));
//	УстановитьПривилегированныйРежим(Ложь);
//	// -- БИТ Amerkulov	
//КонецЕсли; 	

//-СБ. Пискунова #2691 30.03.2017

АлгоритмАктуальный = бит_уп_Сервер.ПолучитьАлгоритмВизирования(ЭтотОбъект);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-09 (#2879)
#Область НазначениеВиз
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-26 (#2873)
//ФинансовыйКонтролерНаСлучайБолееДвухОбъектов = Справочники.бит_БК_Инициаторы.НайтиПоКоду("000000958");	
//Заменено на:
ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Бюджетные контролеры","ФК для инвестиционного алгоритма, если в заявке более одного объекта",ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка"));
ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Универ = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Бюджетные контролеры","ФК для универсального алгоритма",ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка"));
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-26 (#2873)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-10-19 (#2921)
ВДокументеБольшеОдногоЦФО = бит_БК_Общий.ВДокументеБольшеОдногоЦФО(Ссылка);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-10-19 (#2921)

Если АлгоритмАктуальный = Справочники.бит_уп_Алгоритмы.НайтиПоКоду("00-000030") Тогда 
	//#Область ЗаявкаОперационной
	//+СБ  Пискунова 09.12.2016 #2691	
	//1. Устанавливаем визу ОЦР:
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ОК_БК_ОтветственныеЗаЦентрРезультата.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОК_БК_ОтветственныеЗаЦентрРезультата КАК ОК_БК_ОтветственныеЗаЦентрРезультата
	|		ПО бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = ОК_БК_ОтветственныеЗаЦентрРезультата.СтатьяОборотов
	|			И бит_ФормаВводаБюджетаБДДС.ЦФО = ОК_БК_ОтветственныеЗаЦентрРезультата.ЦФО
	|			И бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ОК_БК_ОтветственныеЗаЦентрРезультата.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ОЦР;  //Виза ОЦР
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				//НаборЗаписей[0].ВремяНаУстановку = Виза.ВремяНаУстановку;
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000125"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//2. Устанавливаем визу Операционный директор:   6_9
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеОДИОбъектСтроительства.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеОДИОбъектСтроительства КАК СБ_СоответствиеОДИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеОДИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ОперационныйДиректор; //Виза ОД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000169"));  //Операционный директор (прицепляем к точке условия)
	            бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;    		
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//2.1. Устанавливаем визу Операционный директор:    6_27
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеОДИОбъектСтроительства.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеОДИОбъектСтроительства КАК СБ_СоответствиеОДИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеОДИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ОперационныйДиректор_6_27; //Виза ОД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000246"));  //Операционный директор 6.27  (прицепляем к точке условия)
				//245
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//3. Устанавливаем визу Региональный директор -1:  Региональный директор (5.8)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-11 (#2873)
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Регион КАК Регион
	//|ПОМЕСТИТЬ ВТ_Регионы
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту КАК УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту
	//|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Владелец
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	//|;
	//Заменено на:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоРегион
	|ПОМЕСТИТЬ ВТ_СвойстваОбъектовУправления
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ОбъектыСтроительства)
	|	И ДополнительныеРеквизитыИСведения.Заголовок = ""Регион""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Значение КАК Регион
	|ПОМЕСТИТЬ ВТ_Регионы
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваОбъектовУправления.СвойствоРегион
	|				ИЗ
	|					ВТ_СвойстваОбъектовУправления КАК ВТ_СвойстваОбъектовУправления))
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-11 (#2873)
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеРДРегион.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	ВТ_Регионы КАК ВТ_Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеРДРегион КАК СБ_СоответствиеРДРегион
	|		ПО ВТ_Регионы.Регион = СБ_СоответствиеРДРегион.Регион";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_РегиональныйДиректор; //Виза РД  Региональный директор (5.8)
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000167")); // 1 регион.директор  (5.8)  			
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//3. Устанавливаем визу Региональный директор -1:  Региональный директор (5.8)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-11 (#2873)
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Регион КАК Регион
	//|ПОМЕСТИТЬ ВТ_Регионы
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту КАК УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту
	//|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Владелец
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	//|;
	//Заменено на:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоРегион
	|ПОМЕСТИТЬ ВТ_СвойстваОбъектовУправления
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ОбъектыСтроительства)
	|	И ДополнительныеРеквизитыИСведения.Заголовок = ""Регион""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Значение КАК Регион
	|ПОМЕСТИТЬ ВТ_Регионы
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваОбъектовУправления.СвойствоРегион
	|				ИЗ
	|					ВТ_СвойстваОбъектовУправления КАК ВТ_СвойстваОбъектовУправления))
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-11 (#2873)
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеРДРегион.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	ВТ_Регионы КАК ВТ_Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеРДРегион КАК СБ_СоответствиеРДРегион
	|		ПО ВТ_Регионы.Регион = СБ_СоответствиеРДРегион.Регион";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_РегиональныйДиректор_6_29; //Виза РД  Региональный директор (5.8)
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000248")); // 1 регион.директор  (6_29)  			
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;

	//3.1 Устанавливаем визу Региональный директор-2 к условию 5.9):
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-11 (#2873)
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Регион КАК Регион
	//|ПОМЕСТИТЬ ВТ_Регионы
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту КАК УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту
	//|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Владелец
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	//|;
	//Заменено на:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоРегион
	|ПОМЕСТИТЬ ВТ_СвойстваОбъектовУправления
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ОбъектыСтроительства)
	|	И ДополнительныеРеквизитыИСведения.Заголовок = ""Регион""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Значение КАК Регион
	|ПОМЕСТИТЬ ВТ_Регионы
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваОбъектовУправления.СвойствоРегион
	|				ИЗ
	|					ВТ_СвойстваОбъектовУправления КАК ВТ_СвойстваОбъектовУправления))
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-11 (#2873)
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеРДРегион.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	ВТ_Регионы КАК ВТ_Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеРДРегион КАК СБ_СоответствиеРДРегион
	|		ПО ВТ_Регионы.Регион = СБ_СоответствиеРДРегион.Регион";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_РегиональныйДиректор_5_9; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000170")); // 2 регион.директор 5.9 (к точке разделения привяжем)			
				//198
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//3.2 Устанавливаем визу Региональный директор-2 к условию 6.33):
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-11 (#2873)
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Регион КАК Регион
	//|ПОМЕСТИТЬ ВТ_Регионы
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту КАК УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту
	//|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Владелец
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	//|;
	//Заменено на:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоРегион
	|ПОМЕСТИТЬ ВТ_СвойстваОбъектовУправления
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ОбъектыСтроительства)
	|	И ДополнительныеРеквизитыИСведения.Заголовок = ""Регион""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Значение КАК Регион
	|ПОМЕСТИТЬ ВТ_Регионы
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваОбъектовУправления.СвойствоРегион
	|				ИЗ
	|					ВТ_СвойстваОбъектовУправления КАК ВТ_СвойстваОбъектовУправления))
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-11 (#2873)
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеРДРегион.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	ВТ_Регионы КАК ВТ_Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеРДРегион КАК СБ_СоответствиеРДРегион
	|		ПО ВТ_Регионы.Регион = СБ_СоответствиеРДРегион.Регион";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_РегиональныйДиректор_6_33; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000252")); // функцион.директор 6.33 (к точке разделения привяжем)			
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//4. Устанавливаем визу Функциональный директор: 4.1
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_4_1; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 4.1 (к точке разделения привяжем)			
				//144
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//4-1. Устанавливаем визу Функциональный директор: 5.3
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_5_3; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 5.3 (к точке разделения привяжем)			
				//185
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  		
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//4-2. Устанавливаем визу Функциональный директор: 5.4
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_5_4; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 5.4 (к точке разделения привяжем)			
				//179
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//4-3. Устанавливаем визу Функциональный директор: 6.2
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_2; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.2 (к точке разделения привяжем)			
				//204
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//4-3. Устанавливаем визу Функциональный директор: 6_9
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_9; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.9 (к точке разделения привяжем)			
				//218
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6_10
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_10; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.10 (к точке разделения привяжем)			
				//220
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6_13
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_13; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.13 (к точке разделения привяжем)			
				//227
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6_16
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_16; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				  СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.16 (к точке разделения привяжем)			
				//230
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6.25
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_25; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.25 (к точке разделения привяжем)			
				//243
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6.32
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_32; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.32 (к точке разделения привяжем)			
				//249
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6.35
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_35; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.35 (к точке разделения привяжем)			
				//253
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6.37
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_37; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.37 (к точке разделения привяжем)			
				//258
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6_40
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_40; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.40 (к точке разделения привяжем)			
				//262
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 		
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6_22
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_22; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000251")); // функцион.директор 6.22 (к точке разделения привяжем)			
				//239
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//#КонецОбласти ЗаявкаОперационной
	//КонецЕсли;
	
	//Алгоритм для Инвестиционной заявки:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
ИначеЕсли АлгоритмАктуальный = Справочники.бит_уп_Алгоритмы.НайтиПоКоду("00-000032") Тогда 
	//+СБ  Пискунова 09.12.2016 #2691 Добавляем программно визы	
	//1. Устанавливаем визу ОЦР:
	//#Область ЗаявкиИнвестистиционной 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ОК_БК_ОтветственныеЗаЦентрРезультата.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОК_БК_ОтветственныеЗаЦентрРезультата КАК ОК_БК_ОтветственныеЗаЦентрРезультата
	|		ПО бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = ОК_БК_ОтветственныеЗаЦентрРезультата.СтатьяОборотов
	|			И бит_ФормаВводаБюджетаБДДС.ЦФО = ОК_БК_ОтветственныеЗаЦентрРезультата.ЦФО
	|			И бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ОК_БК_ОтветственныеЗаЦентрРезультата.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ОЦР;  //Виза ОЦР
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000267"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//1. Устанавливаем визу Процектный менеджер:
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеПМ_Проект.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеПМ_Проект КАК СБ_СоответствиеПМ_Проект
	|		ПО бит_ФормаВводаБюджетаБДДС.Проект = СБ_СоответствиеПМ_Проект.Проект
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ПроектныйМенеджер;  //Виза СБ_ПроектныйМенеджер
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Инициатор) Тогда
				Инициатор	= Справочники.бит_БК_Инициаторы.СБ_НеЗадан;
			Иначе      					
				Инициатор	= ВыборкаДетальныеЗаписи.Инициатор; 
			КонецЕсли;
			
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= Инициатор; 
				//НаборЗаписей[0].Решение	= Справочники.бит_ВидыРешенийСогласования.Согласовано; 
				//НаборЗаписей[0].Пользователь	= Справочники.Пользователи.СБ_НеЗадан; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				
				СтруктураПараметров.Вставить("ОбъектСвязи", Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				//СтруктураПараметров.Вставить("Решение",Справочники.бит_ВидыРешенийСогласования.Согласовано);
				//СтруктураПараметров.Вставить("Пользователь",Справочники.Пользователи.СБ_НеЗадан);  
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000270"));  //Точка алгоритма ОЦР
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	
	////1. Устанавливаем визу Финансовый контролер:
	//
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	//|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_3_1_инвест;  //Виза СБ_ФинансовыйКонтролер_3_1_инвест
	//СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	//НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	//Если НаборЗаписей.Количество() >0 Тогда
	//	ДобавитьВПервыйЗапись = Ложь;	
	//	
	//	Если  НаборЗаписей.Количество() = 1 Тогда
	//		ДобавитьВПервыйЗапись = Истина;
	//	ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
	//		ДобавитьВПервыйЗапись = Истина;
	//	КонецЕсли;
	//	
	//	сч = 0;
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
	//		Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
	//			НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
	//			сч =  сч+1;
	//		Иначе 
	//			СтруктураПараметров = Новый Структура;
	//			СтруктураПараметров.Вставить("Виза",Виза);
	//			СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
	//			СтруктураПараметров.Вставить("ВремяНаУстановку",Виза.ВремяНаУстановку);
	//			СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
	//			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
	//			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
	//			СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
	//			СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000274"));  //Точка алгоритма ОЦР
	//			
	//			//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
	//			
	//			бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	Если НаборЗаписей.Модифицированность() Тогда 
	//		НаборЗаписей.Записать();
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//Устанавливаем визу Финансовый контролер:
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_4_10_инвест;  //Виза СБ_ФинансовыйКонтролер_3_1_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000295"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	 //Устанавливаем визу Финансовый контролер 6.10:		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_10_1_инвест;  //Виза СБ_ФинансовыйКонтролер_10_1_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000370"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;

	
	////1. Устанавливаем визу Финансовый контролер:
	//
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	//|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_3_5_инвест;  //Виза СБ_ФинансовыйКонтролер_3_5_инвест
	//СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	//НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	//Если НаборЗаписей.Количество() >0 Тогда
	//	ДобавитьВПервыйЗапись = Ложь;	
	//	
	//	Если  НаборЗаписей.Количество() = 1 Тогда
	//		ДобавитьВПервыйЗапись = Истина;
	//	ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
	//		ДобавитьВПервыйЗапись = Истина;
	//	КонецЕсли;
	//	
	//	сч = 0;
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
	//		Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
	//			НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
	//			сч =  сч+1;
	//		Иначе 
	//			СтруктураПараметров = Новый Структура;
	//			СтруктураПараметров.Вставить("Виза",Виза);
	//			СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
	//			СтруктураПараметров.Вставить("ВремяНаУстановку",Виза.ВремяНаУстановку);
	//			СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
	//			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
	//			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
	//			СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
	//			СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000282"));  //Точка алгоритма ОЦР
	//			
	//			//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
	//			
	//			бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	Если НаборЗаписей.Модифицированность() Тогда 
	//		НаборЗаписей.Записать();
	//	КонецЕсли;
	//КонецЕсли;
	
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_4_5_инвест;  //Виза СБ_ФинансовыйКонтролер_4_5_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
			
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000287"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_5_0_инвест;  //Виза СБ_ФинансовыйКонтролер_4_7_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000291"));  //Точка алгоритма ОЦР
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_5_2_инвест;  //Виза СБ_ФинансовыйКонтролер_5_2_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000301"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_5_4_инвест;  //Виза СБ_ФинансовыйКонтролер_5_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000305"));  //Точка алгоритма ОЦР
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_5_7_инвест;  //Виза СБ_ФинансовыйКонтролер_5_7_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
			
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000309"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_6_2_инвест;  //Виза СБ_ФинансовыйКонтролер_6_2_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000313"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_6_4_инвест;  //Виза СБ_ФинансовыйКонтролер_6_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000317"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_6_7_инвест;  //Виза СБ_ФинансовыйКонтролер_6_7_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000320"));  //Точка алгоритма ОЦР
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_7_2_инвест;  //Виза СБ_ФинансовыйКонтролер_6_7_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000324"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_7_4_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000328"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_7_7_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000331"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_8_1_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000334"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_8_3_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000338"));  //Точка алгоритма ОЦР
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_8_3_1_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000340"));  //Точка алгоритма ОЦР
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_8_6_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000343"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_8_6_1_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000346"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_9_2_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000350"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_9_4_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000354"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_9_7_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000357"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_9_2_1_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000361"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_9_4_1_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000365"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Финансовый контролер: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_9_14_инвест;  //Виза СБ_ФинансовыйКонтролер_7_4_инвест
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000368"));  //Точка алгоритма ОЦР
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//1. Устанавливаем визу Эксперт: 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеЭксперт_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеЭксперт_ЦФО КАК СБ_СоответствиеЭксперт_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеЭксперт_ЦФО.ЦФО
	|			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = СБ_СоответствиеЭксперт_ЦФО.СтатьяОборотов
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_Эксперт_4_1;  //Виза СБ_Эксперт_4_1
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	

		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Инициатор) Тогда
				Инициатор	= Справочники.бит_БК_Инициаторы.СБ_НеЗадан;
			Иначе      					
				Инициатор	= ВыборкаДетальныеЗаписи.Инициатор; 
			КонецЕсли;

			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000284"));  //Точка алгоритма ОЦР
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1. Устанавливаем визу Эксперт:
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеЭксперт_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеЭксперт_ЦФО КАК СБ_СоответствиеЭксперт_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеЭксперт_ЦФО.ЦФО
	|			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = СБ_СоответствиеЭксперт_ЦФО.СтатьяОборотов
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_Эксперт_6_1;  //Виза СБ_Эксперт_6_1
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
												Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Инициатор) Тогда
				Инициатор	= Справочники.бит_БК_Инициаторы.СБ_НеЗадан;
			Иначе      					
				Инициатор	= ВыборкаДетальныеЗаписи.Инициатор; 
			КонецЕсли;
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000311"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1. Устанавливаем визу Эксперт:
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеЭксперт_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеЭксперт_ЦФО КАК СБ_СоответствиеЭксперт_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеЭксперт_ЦФО.ЦФО
	|			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = СБ_СоответствиеЭксперт_ЦФО.СтатьяОборотов
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_Эксперт_9_1;  //Виза СБ_Эксперт_9_1
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
														Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Инициатор) Тогда
				Инициатор	= Справочники.бит_БК_Инициаторы.СБ_НеЗадан;
			Иначе      					
				Инициатор	= ВыборкаДетальныеЗаписи.Инициатор; 
			КонецЕсли;
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000348"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	//1. Устанавливаем визу Эксперт:
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеЭксперт_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеЭксперт_ЦФО КАК СБ_СоответствиеЭксперт_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеЭксперт_ЦФО.ЦФО
	|			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = СБ_СоответствиеЭксперт_ЦФО.СтатьяОборотов
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_Эксперт_9_1_1;  //Виза СБ_Эксперт_9_1
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
																	Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Инициатор) Тогда
				Инициатор	= Справочники.бит_БК_Инициаторы.СБ_НеЗадан;
			Иначе      					
				Инициатор	= ВыборкаДетальныеЗаписи.Инициатор; 
			КонецЕсли;

			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000359"));  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
			
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6_22
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_4_6_инвест; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000289")); // функцион.директор 6.22 (к точке разделения привяжем)			
				//239
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 		
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//4-2. Устанавливаем визу Функциональный директор: 6_22
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_5_3_инвест; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000303")); // функцион.директор 6.22 (к точке разделения привяжем)			
				//239
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 		
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//4-2. Устанавливаем визу Функциональный директор: 6_22
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_6_3_инвест; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000314")); // функцион.директор 6.22 (к точке разделения привяжем)			
				//239
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6_22
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_7_3_инвест; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000325")); // функцион.директор 6.22 (к точке разделения привяжем)			
				//239
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//4-2. Устанавливаем визу Функциональный директор: 6_22
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_8_2_инвест; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				 СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000335")); // функцион.директор 6.22 (к точке разделения привяжем)			
				//239
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//4-2. Устанавливаем визу Функциональный директор: 6_22
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_9_3_инвест; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000351")); // функцион.директор 6.22 (к точке разделения привяжем)			
				//239
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
  		
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	//4-2. Устанавливаем визу Функциональный директор: 6_22
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";

	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ФункциональныйДиректор_9_3_1_инвест; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);				
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено); 					
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000362")); // функцион.директор 6.22 (к точке разделения привяжем)			
				//239
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 		
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	//2.1. Устанавливаем визу Операционный директор:    6_27
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеОДИОбъектСтроительства.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеОДИОбъектСтроительства КАК СБ_СоответствиеОДИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеОДИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_ОперационныйДиректор_4_3_инвест;
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000285"));  //Операционный директор 6.27  (прицепляем к точке условия)
				//245
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	
	//3.2 Устанавливаем визу Региональный директор-2 к условию 6.33):
	Запрос = Новый Запрос;
	Запрос.Текст = 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-11 (#2873)
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Регион КАК Регион
	//|ПОМЕСТИТЬ ВТ_Регионы
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту КАК УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту
	//|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = УдалитьИжтиси_бит_БК_ДополнительныеСведенияПоОбъекту.Владелец
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	//|;
	//Заменено на:
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоРегион
	|ПОМЕСТИТЬ ВТ_СвойстваОбъектовУправления
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ОбъектыСтроительства)
	|	И ДополнительныеРеквизитыИСведения.Заголовок = ""Регион""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Значение КАК Регион
	|ПОМЕСТИТЬ ВТ_Регионы
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваОбъектовУправления.СвойствоРегион
	|				ИЗ
	|					ВТ_СвойстваОбъектовУправления КАК ВТ_СвойстваОбъектовУправления))
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-11 (#2873)
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеРДРегион.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	|ИЗ
	|	ВТ_Регионы КАК ВТ_Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеРДРегион КАК СБ_СоответствиеРДРегион
	|		ПО ВТ_Регионы.Регион = СБ_СоответствиеРДРегион.Регион";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Виза = Справочники.бит_Визы.СБ_РегиональныйДиректор_4_4_инвест; //Виза РД
	СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если НаборЗаписей.Количество() >0 Тогда
		ДобавитьВПервыйЗапись = Ложь;	
		
		Если  НаборЗаписей.Количество() = 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
			ДобавитьВПервыйЗапись = Истина;
		КонецЕсли;
		
		сч = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
				НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
				сч =  сч+1;
			Иначе 
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Виза",Виза);
				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
				СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
				СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
				СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
				СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000288")); // функцион.директор 6.33 (к точке разделения привяжем)			
				
				бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
			КонецЕсли;
 	
		КонецЦикла;
		Если НаборЗаписей.Модифицированность() Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;			
	
	//КонецЕсли;	
	//#КонецОбласти ЗаявкиИнвестистиционной 		
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-18 (#2971)
////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-10-19 (#2921)	
////ИначеЕсли АлгоритмАктуальный = Справочники.бит_уп_Алгоритмы.НайтиПоКоду("00-000033") Тогда 
////Заменено на:
//ИначеЕсли АлгоритмАктуальный.ок_НоваяСхема И
//		  //ВДокументеБольшеОдногоЦФО
////ОКЕЙ СофтЛаб Начало 2017-10-19 (#2921)	
//		 (ВДокументеБольшеОдногоЦФО ИЛИ бит_БК_Общий.ПолучитьВидОперацииДляСтартаАлгоритмаУниверсальнойЗаявки(Ссылка)) 
////ОКЕЙ СофтЛаб Конец 2017-10-19 (#2921)
//Тогда
////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-10-19 (#2921)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-18 (#2971)
	//+СБ  Пискунова 09.12.2016 #2691 Добавляем программно визы	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-27 (#2873)
	////1. Устанавливаем визу Финансовый контролер:
	////#Область ЗаявкиИнвестистиционной 	
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	//|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	ЕСТЬNULL(ВЫБОР
	//|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	//|				ТОГДА &ФинКонтролер
	//|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	//|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	//|		ПО (ИСТИНА)
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	//|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	//Запрос.УстановитьПараметр("ФинКонтролер", ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Универ);
	//
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_универс;  //Виза ОЦР
	//СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	//НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	//Если НаборЗаписей.Количество() >0 Тогда
	//	ДобавитьВПервыйЗапись = Ложь;	
	//	
	//	Если  НаборЗаписей.Количество() = 1 Тогда
	//		ДобавитьВПервыйЗапись = Истина;
	//	ИначеЕсли  НаборЗаписей.Количество() > 1 Тогда
	//		ДобавитьВПервыйЗапись = Истина;
	//	КонецЕсли;
	//	
	//	сч = 0;
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
	//		Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
	//			НаборЗаписей[0].ФизическоеЛицо	= ВыборкаДетальныеЗаписи.Инициатор; 
	//			сч =  сч+1;
	//		Иначе 
	//			СтруктураПараметров = Новый Структура;
	//			СтруктураПараметров.Вставить("Виза",Виза);
	//			СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
	//			СтруктураПараметров.Вставить("ВремяНаУстановку",0);
	//			СтруктураПараметров.Вставить("ОбъектСвязи", ВыборкаДетальныеЗаписи.Инициатор);
	//			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
	//			СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
	//			СтруктураПараметров.Вставить("Алгоритм",АлгоритмАктуальный);
	//			СтруктураПараметров.Вставить("ТочкаАлгоритма",Справочники.бит_уп_ТочкиАлгоритмов.НайтиПоКоду("00-000296"));  //Точка алгоритма ОЦР
	//			СтруктураПараметров.Вставить("КодСортировки",НаборЗаписей[0].КодСортировки);
	//			//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
	//			
	//			бит_Визирование.ДобавитьВизу(НаборЗаписей,ЭтотОбъект.Ссылка,СтруктураПараметров);
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//Заменено на:
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-18 (#2971)
	//Виза = Справочники.бит_Визы.СБ_ФинансовыйКонтролер_универс;  //Виза ОЦР
	//СтруктураОтбор = Новый Структура("Объект,Виза",ЭтотОбъект.Ссылка,Виза);
	//НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	//Если НаборЗаписей.Количество() >0 Тогда   
	//	НаборЗаписей[0].ФизическоеЛицо	= ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Универ; 
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-27 (#2873)
	//	Если НаборЗаписей.Модифицированность() Тогда 
	//		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)			
	//		НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
	//		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)
	//		НаборЗаписей.Записать();
	//	КонецЕсли;
	//КонецЕсли;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-18 (#2971)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-10-19 (#2921)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-18 (#2971)
//ИначеЕсли АлгоритмАктуальный.ок_НоваяСхема И 
	//НЕ ВДокументеБольшеОдногоЦФО 
	//И
	//бит_БК_Общий.ПолучитьВидОперацииДляСтартаАлгоритмаОперационнойЗаявки(Ссылка) Тогда
		
	////Операционный маршрут 	 
	//СоотвествиеВиз = Новый Соответствие;
	//ПолучитьВизыОперационногоДиректора(СоотвествиеВиз);
	//ПолучитьВизыФункциональногоДиректора(СоотвествиеВиз);
	//ПолучитьВизыРегиональногоДиректора(СоотвествиеВиз);
	//ПолучитьВизыОЦР(СоотвествиеВиз);
	//ПолучитьВизыПроектногоМенеджера(СоотвествиеВиз);
	//ПолучитьВизыЭксперт(СоотвествиеВиз);
	//ПолучитьВизыФинансовыйКонтролер(СоотвествиеВиз);
	//
	//СтруктураМассивовИнициаторов = ПолучитьСтруктуруМассивовИнициаторов(Ссылка,ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
	//Заменено на:
ИначеЕсли АлгоритмАктуальный.ок_НоваяСхема Тогда 
	пСтандартныйПериод = Новый СтандартныйПериод;
	пСтандартныйПериод.ДатаНачала	 = Ссылка.Дата;
	пСтандартныйПериод.ДатаОкончания = пСтандартныйПериод.ДатаНачала;
	
	пТаблицаПараметры = Новый ТаблицаЗначений;
	пТаблицаПараметры.Колонки.Добавить("ИмяПараметра");
	пТаблицаПараметры.Колонки.Добавить("ЗначениеПараметра");
	
	пСтрокаПараметры = пТаблицаПараметры.Добавить();
	пСтрокаПараметры.ИмяПараметра	   = "ФинКонтролер";
	пСтрокаПараметры.ЗначениеПараметра = ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-06 (#2971)
	
	СтруктураОтбор = Новый Структура("Объект",Ссылка);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	ТаблицаРС = НаборЗаписей.Выгрузить();
	
	ТаблицаВиз = ТаблицаРС.Скопировать(,"Виза");
	ТаблицаВиз.Свернуть("Виза");
	Для Каждого СтрокаВизы Из ТаблицаВиз Цикл 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-06 (#2971)
		ИсточникСложнойВизы = СтрокаВизы.Виза.ОК_ИсточникСложнойВизы;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-06 (#2971)
		Если НЕ ЗначениеЗаполнено(СтрокаВизы.Виза) 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-06 (#2971)
			ИЛИ НЕ ЗначениеЗаполнено(ИсточникСложнойВизы)
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-06 (#2971)
		Тогда 
			Продолжить;
		КонецЕсли;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-06 (#2971)		
		//СоответствиеИмя = СоотвествиеВиз.Получить(СтрокаВизы.Виза);
		//Если СоответствиеИмя = Неопределено Тогда 
		//	Продолжить;
		//КонецЕсли;		
		//ИнициироватьВизуМаршрута(СтруктураМассивовИнициаторов[СоответствиеИмя], Ссылка, СтрокаВизы.Виза, АлгоритмАктуальный, ТаблицаРС);	
		//Заменено на:
		
		бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(ИсточникСложнойВизы, пТаблицаПараметры, Ложь);
		
		СтрокиПараметров = пТаблицаПараметры.НайтиСтроки(Новый Структура("ИмяПараметра","Регистратор"));
		Если СтрокиПараметров.Количество()>0 Тогда 
			СтрокиПараметров[0].ЗначениеПараметра = Ссылка;
		КонецЕсли;
		
		СтрокиПараметров = пТаблицаПараметры.НайтиСтроки(Новый Структура("ИмяПараметра"	,	"ФинКонтролер"));
		Если СтрокиПараметров.Количество()>0 Тогда 
			СтрокиПараметров[0].ЗначениеПараметра = ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест;
		КонецЕсли;	
		
		мНомераСтрокДляОтбора = Неопределено;
		
		парИспользованиеОтбораПоСтрокам = пТаблицаПараметры.НайтиСтроки(Новый Структура("ИмяПараметра"	,	"НеОтбиратьПоСтрокам"));
		Если парИспользованиеОтбораПоСтрокам.Количество()>0 Тогда 
			парИспользованиеОтбораПоСтрокам[0].ЗначениеПараметра = Истина;
		КонецЕсли;	
		
		СтрокиПараметров = пТаблицаПараметры.НайтиСтроки(Новый Структура("ИмяПараметра"	,	"СтрокиДляОтбора"));
		
		Если ТипЗнч(пИнициированныеВизы) = Тип("Соответствие") Тогда 
			мНомераСтрокДляОтбора = пИнициированныеВизы.Получить(СтрокаВизы.Виза);
			Если мНомераСтрокДляОтбора <> Неопределено Тогда 
				
				Если мНомераСтрокДляОтбора.Количество()=0 Тогда 
				    мНомераСтрокДляОтбора = Неопределено;
				Иначе
					Если парИспользованиеОтбораПоСтрокам.Количество()>0 Тогда 
						парИспользованиеОтбораПоСтрокам[0].ЗначениеПараметра = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокиПараметров.Количество()>0 Тогда 
			СтрокиПараметров[0].ЗначениеПараметра = мНомераСтрокДляОтбора;
		КонецЕсли;
				
		пТабИнициаторы = Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.ПолучитьДанные(ИсточникСложнойВизы
																						, пСтандартныйПериод
																						, Новый ТаблицаЗначений
																						, пТаблицаПараметры
																						, ПредопределенноеЗначение("Справочник.бит_мпд_НастройкиПуловПодключений.ПустаяСсылка")); 
																						
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-07 (#3393)
		СоотИнициаторВидРасхода = Новый Соответствие;	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-07 (#3393)																				
																						
		ИнициаторПоУмолчанию = СтрокаВизы.Виза.ОК_ИнициаторПоУмолчанию;
		
		пМассивИнициаторов = Новый Массив;
		Для Каждого пСтрокаТабИнициаторы ИЗ пТабИнициаторы Цикл 
			
			Если Не ЗначениеЗаполнено(пСтрокаТабИнициаторы.Инициатор) И
				 ЗначениеЗаполнено(ИнициаторПоУмолчанию)
			Тогда 
			
				пМассивИнициаторов.Добавить(ИнициаторПоУмолчанию);
			
			Иначе
				
				пМассивИнициаторов.Добавить(пСтрокаТабИнициаторы.Инициатор);				
				
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-07 (#3393)
				Если пТабИнициаторы.Колонки.Найти("ОК_ВидРасхода")<>Неопределено Тогда 
					СоотИнициаторВидРасхода.Вставить(пСтрокаТабИнициаторы.Инициатор, пСтрокаТабИнициаторы.ОК_ВидРасхода);
				КонецЕсли;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-07 (#3393)
				
			КонецЕсли;
			
		КонецЦикла;
						
		Если пМассивИнициаторов.Количество() <> 0 Тогда 
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-07 (#3393)
			//ИнициироватьВизуМаршрута(пМассивИнициаторов, Ссылка, СтрокаВизы.Виза, АлгоритмАктуальный, ТаблицаРС);	
			//Заменено на:
			бит_Визирование.ИнициироватьВизуМаршрута(пМассивИнициаторов, Ссылка, СтрокаВизы.Виза, АлгоритмАктуальный, ТаблицаРС, СоотИнициаторВидРасхода);	
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-07 (#3393)
		КонецЕсли;
			
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-06 (#2971)
		
	КонецЦикла;	 		     
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-07 (#2971)
	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(АлгоритмАктуальный);	
	ТаблицаРС.Колонки.Добавить("Реквизит4",Новый ОписаниеТипов("Строка"));
	ТаблицаРС.ЗаполнитьЗначения("ИСТИНА","Реквизит4");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	ТаблицаРС.Колонки.Добавить("ДоступностьВизы", Новый ОписаниеТипов("Булево"));
	ТаблицаРС.ЗаполнитьЗначения("ИСТИНА"  , "ДоступностьВизы");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	ТаблицаРС = РегистрыСведений.бит_УстановленныеВизы.ДополнитьТаблицуЗаписей(ТаблицаРС, АлгоритмАктуальный, ТекущаяДата(), Ссылка, Новый ТаблицаЗначений, флВыполнятьПоэтапно,Неопределено);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-07 (#2971)
	
	НаборЗаписей.Загрузить(ТаблицаРС);
	Если ТаблицаРС.Найти(ПредопределенноеЗначение("Справочник.бит_Визы.ПустаяСсылка"))<>Неопределено 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-14 (#2948)		
		ИЛИ ТаблицаРС.Найти(ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка"))<>Неопределено
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-14 (#2948)
		Тогда 
		НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
	КонецЕсли;
	НаборЗаписей.Записать();	 
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-06 (#2971)
//ИначеЕсли АлгоритмАктуальный.ок_НоваяСхема И 
//	НЕ ВДокументеБольшеОдногоЦФО И
//	бит_БК_Общий.ПолучитьВидОперацииДляСтартаАлгоритмаИнвестиционнойЗаявки(Ссылка)
//	Тогда
//	//Инвестиционный маршрут	
//	СоотвествиеВиз = Новый Соответствие;
//	
//	ПолучитьВизыПроектногоМенеджера(СоотвествиеВиз);
//	ПолучитьВизыЭксперт(СоотвествиеВиз);
//	ПолучитьВизыОперационногоДиректора(СоотвествиеВиз);
//	ПолучитьВизыФункциональногоДиректора(СоотвествиеВиз);
//	ПолучитьВизыРегиональногоДиректора(СоотвествиеВиз);
//	ПолучитьВизыОЦР(СоотвествиеВиз);
//	ПолучитьВизыФинансовыйКонтролер(СоотвествиеВиз);
//	
//	СтруктураМассивовИнициаторов = ПолучитьСтруктуруМассивовИнициаторов(Ссылка,ФинансовыйКонтролерНаСлучайБолееДвухОбъектов_Инвест);
//	
//	СтруктураОтбор = Новый Структура("Объект",Ссылка);
//	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
//	ТаблицаРС = НаборЗаписей.Выгрузить();
//	
//	ТаблицаВиз = ТаблицаРС.Скопировать(,"Виза");
//	ТаблицаВиз.Свернуть("Виза");
//	Для Каждого СтрокаВизы Из ТаблицаВиз Цикл 
//		Если НЕ ЗначениеЗаполнено(СтрокаВизы.Виза) Тогда 
//			Продолжить;
//		КонецЕсли;
//		СоответствиеИмя = СоотвествиеВиз.Получить(СтрокаВизы.Виза);
//		Если СоответствиеИмя = Неопределено Тогда 
//			Продолжить;
//		КонецЕсли;
//		ИнициироватьВизуМаршрута(СтруктураМассивовИнициаторов[СоответствиеИмя], Ссылка, СтрокаВизы.Виза, АлгоритмАктуальный, ТаблицаРС);	
//	КонецЦикла;	 
//	
//	СписокВизСПустыми = ТаблицаРС.НайтиСтроки(Новый Структура("ФизическоеЛицо",ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.ПустаяСсылка")));
//	
//	СоответствиеДляПроверки = Новый Соответствие;
//	ПолучитьВизыПроектногоМенеджера(СоответствиеДляПроверки);
//	ПолучитьВизыЭксперт(СоответствиеДляПроверки);            
//	
//	Для Каждого СтрокаТаблицыРС ИЗ СписокВизСПустыми Цикл 
//		Если СоответствиеДляПроверки.Получить(СтрокаТаблицыРС.Виза)=Неопределено Тогда 
//			НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
//			Прервать;
//		Иначе 
//			СтрокаТаблицыРС.ФизическоеЛицо = ПредопределенноеЗначение("Справочник.бит_БК_Инициаторы.СБ_НеЗадан");//Если эксперт или проектный
//		КонецЕсли;
//	КонецЦикла;
//	
//	флВыполнятьПоэтапно = бит_уп_Сервер.ВыполнятьАлгоритмПоэтапно(АлгоритмАктуальный);	
//	ТаблицаРС.Колонки.Добавить("Реквизит4",Новый ОписаниеТипов("Строка"));
//	ТаблицаРС.ЗаполнитьЗначения("ИСТИНА","Реквизит4");
//	ТаблицаРС = РегистрыСведений.бит_УстановленныеВизы.ДополнитьТаблицуЗаписей(ТаблицаРС, АлгоритмАктуальный, ТекущаяДата(), Ссылка, Новый ТаблицаЗначений, флВыполнятьПоэтапно,Неопределено);
//	
//	
//	НаборЗаписей.Загрузить(ТаблицаРС);		
//	НаборЗаписей.Записать();
//	
//	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-10-19 (#2921)
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-06 (#2971)

КонецЕсли;
#КонецОбласти
//-СБ  Пискунова 09.12.2016 #2691
//Заменено на:
СтруктураОтборДок = Новый Структура("Объект",Ссылка);
НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтборДок);
ЗаполнитьСложныеВизыПоАлгоритму(АлгоритмАктуальный, НаборЗаписей);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-09 (#2873)

СБ_ПроцессЗапущенВИтоге = Истина;	
СтруктураОтборДок = Новый Структура("Объект",Ссылка);
//СтруктураОтбор = Новый Структура("ЦФО",ЦФО);
НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтборДок);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-25 (#2880)
ТаблицаЗаписей = НаборЗаписей.Выгрузить();
ДоступныеТочкиАлгоритма = бит_Визирование.ПолучитьДоступныеТочкиАлгоритма(ТаблицаЗаписей);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-25 (#2880)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-14 (#2873)
//По коду выше требуется оптимизация. 
//Делать необходимо в комплексе. 
//Код ниже сделан, чтобы работало (далее такая же проверка на заполненность в тонкой и толстой формах), сделал здесь для того, 
//чтобы добавлять или не добавлять записи в РС "Регистрация событий для оповещений", 
//в формах оставил аналогичную проверку для сообщений

Если СБ_ЗапускПроцессаСПроверкой И
	 НЕ СБ_ПроцессЗапущен 
Тогда
	Если НаборЗаписей.Количество() > 0 Тогда 
		Для каждого лЗапись из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(лЗапись.ФизическоеЛицо) Тогда
				//Не отправляем
				НаборЗаписей.ДополнительныеСвойства.Вставить("бит_ОтключитьРегистрациюОповещений", Истина);
				Прервать;
			КонецЕсли;
		КонецЦикла; 			
	КонецЕсли;   
КонецЕсли;

//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-14 (#2873)

Если НаборЗаписей.Количество() = 0 Тогда 
	бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,СтруктураОтборДок);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-18 (#3393)
	//Прервем выполнение
	Если СтруктураОтборДок.Свойство("ЗакрытьЗаявку")
		И СтруктураОтборДок.ЗакрытьЗаявку = Истина
	Тогда		
		СБ_ПроцессЗапущен = Ложь;
	   	ДополнительныеСвойства.Вставить("ЗакрытьЗаявку", Истина);
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-18 (#3393)
Иначе
	Для Каждого лЗапись из НаборЗаписей Цикл 
		Если НЕ ЗначениеЗаполнено(лЗапись.ФизическоеЛицо) Тогда 						
			СБ_ПроцессЗапущенВИтоге = Ложь; 				
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-25 (#2880)
		Если ДоступныеТочкиАлгоритма.Найти(лЗапись.ТочкаАлгоритма) <> Неопределено Тогда 
			Если ЗначениеЗаполнено(лЗапись.Виза.ВремяНаУстановку) Тогда
				Если Не ЗначениеЗаполнено(лЗапись.ВремяНаУстановку) Тогда 
					лЗапись.ВремяНаУстановку = лЗапись.Виза.ВремяНаУстановку*60;
				КонецЕсли;
				Если лЗапись.ДатаКрайняя = Дата('00010101') Тогда 
					ДатаКрайняя = ТекущаяДата() + лЗапись.Виза.ВремяНаУстановку*60; 
					лЗапись.ДатаКрайняя = бит_Визирование.ПолучитьКрайнююДату(Ссылка, ТекущаяДата(), ДатаКрайняя);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-25 (#2880)
	
		//Если ЗначениеЗаполнено(лЗапись.Виза.ВремяНаУстановку) Тогда
		//	ДатаКрайняя = ТекущаяДата() + лЗапись.Виза.ВремяНаУстановку*60; 
		//	лЗапись.ДатаКрайняя = бит_Визирование.ПолучитьКрайнююДату(Ссылка, ТекущаяДата(), ДатаКрайняя);
		//КонецЕсли;
	КонецЦикла;
КонецЕсли;

НаборЗаписей.записать();  	
СБ_ПроцессЗапущен = СБ_ПроцессЗапущенВИтоге;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-29 (#2942)
//ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);
//бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Ложь, ЭтотОбъект.ДополнительныеСвойства);

//бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Ложь, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-29 (#2942)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-15 (#3808)
Если НаборЗаписей.Количество()>0 И
	 (НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("бит_ОтключитьРегистрациюОповещений") ИЛИ
	     НаборЗаписей.ДополнительныеСвойства.бит_ОтключитьРегистрациюОповещений <> Истина) И
	 ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный") Тогда
	СформироватьДвиженияСводнымОстаткамПоБюджету();
КонецЕсли;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-15 (#3808)

УстановитьПривилегированныйРежим(Ложь); 

КонецПроцедуры  //Запустить процесс

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-10-19 (#2921)

Процедура ПолучитьВизыОперационногоДиректора(Соответствие)
	
	ИмяМассиваВиз = "ОперационныйДиректор";
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ОперационныйДиректор"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ОперационныйДиректор_4_3_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ОперационныйДиректор_6_27"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ОперационныйДиректор_6_28"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ОперационныйДиректор_6_30"),ИмяМассиваВиз);
	
КонецПроцедуры

Процедура  ПолучитьВизыФункциональногоДиректора(Соответствие)
	
	ИмяМассиваВиз = "ФункциональныйДиректор";
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_4_1"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_4_6_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_5_3"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_5_3_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_5_4"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_10"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_13"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_16"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_2"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_22"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_25"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_32"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_35"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_37"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_3_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_40"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_6_9"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_7_3_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_8_2_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_9_3_1_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_9_3_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФункциональныйДиректор_11_1"),ИмяМассиваВиз);
	
КонецПроцедуры

Процедура ПолучитьВизыРегиональногоДиректора(Соответствие)
	
	ИмяМассиваВиз = "РегиональныйДиректор";
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_РегиональныйДиректор"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_РегиональныйДиректор_4_4_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_РегиональныйДиректор_5_9"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_РегиональныйДиректор_6_29"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_РегиональныйДиректор_6_31"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_РегиональныйДиректор_6_33"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_РегиональныйДиректор_6_34"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.ОК_РегиональныйДиректор_1_1"),ИмяМассиваВиз);
		
КонецПроцедуры

Процедура ПолучитьВизыОЦР(Соответствие)
	
	ИмяМассиваВиз = "ОЦР";	
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ОЦР"),ИмяМассиваВиз);
	
КонецПроцедуры

Процедура ПолучитьВизыПроектногоМенеджера(Соответствие)
	
	ИмяМассиваВиз = "ПроектныйМенеджер";
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ПроектныйМенеджер"),ИмяМассиваВиз);
	
КонецПроцедуры

Процедура ПолучитьВизыЭксперт(Соответствие)
	
	ИмяМассиваВиз = "Эксперт";
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_Эксперт_4_1"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_Эксперт_6_1"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_Эксперт_9_1"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_Эксперт_9_1_1"),ИмяМассиваВиз);
	
КонецПроцедуры

Процедура ПолучитьВизыФинансовыйКонтролер(Соответствие)
	
	ИмяМассиваВиз = "ФинансовыйКонтролер";
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.бит_БК_ФинКонтролер"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_10_1_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_3_1_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_3_5_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_4_10_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_4_13_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_4_5_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_5_0_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_5_10_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_5_2_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_5_4_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_5_7_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_6_10_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_6_2_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_6_4_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_6_7_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_7_10_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_7_2_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_7_4_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_7_7_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_8_1_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_8_3_1_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_8_3_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_8_6_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_8_6_1_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_8_8_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_9_11_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_9_14_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_9_2_1_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_9_2_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_9_4_1_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_9_4_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_9_7_инвест"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.СБ_ФинансовыйКонтролер_универс"),ИмяМассиваВиз);
	Соответствие.Вставить(ПредопределенноеЗначение("Справочник.бит_Визы.ОК_ФинансовыйКонтролер_9_3_инвест"),ИмяМассиваВиз);
	
КонецПроцедуры

Функция ПолучитьСтруктуруМассивовИнициаторов(Документ,ФК)
	
	Структура = Новый Структура;
	Структура.Вставить("РегиональныйДиректор"	,	Новый Массив);
	Структура.Вставить("ФункциональныйДиректор" , 	Новый Массив);
	Структура.Вставить("ОЦР" 					, 	Новый Массив);
	Структура.Вставить("ОперационныйДиректор"	, 	Новый Массив);
	Структура.Вставить("ПроектныйМенеджер"		, 	Новый Массив);
	Структура.Вставить("ФинансовыйКонтролер"	, 	Новый Массив);
	Структура.Вставить("Эксперт"				, 	Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоРегион
	|ПОМЕСТИТЬ ВТ_СвойстваОбъектовУправления
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ОбъектыСтроительства)
	|	И ДополнительныеРеквизитыИСведения.Заголовок = ""Регион""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Значение КАК Регион
	|ПОМЕСТИТЬ ВТ_Регионы
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваОбъектовУправления.СвойствоРегион
	|				ИЗ
	|					ВТ_СвойстваОбъектовУправления КАК ВТ_СвойстваОбъектовУправления))
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.Аналитика_2) КАК Аналитика_2
	|ПОМЕСТИТЬ ВТ_КоличествоРазличныхОбъектов
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеРДРегион.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор,
	|	""РегиональныйДиректор"" КАК Виза
	|ИЗ
	|	ВТ_Регионы КАК ВТ_Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеРДРегион КАК СБ_СоответствиеРДРегион
	|		ПО ВТ_Регионы.Регион = СБ_СоответствиеРДРегион.Регион
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ОК_БК_ОтветственныеЗаЦентрРезультата.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)),
	|	""ОЦР""
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОК_БК_ОтветственныеЗаЦентрРезультата КАК ОК_БК_ОтветственныеЗаЦентрРезультата
	|		ПО бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = ОК_БК_ОтветственныеЗаЦентрРезультата.СтатьяОборотов
	|			И бит_ФормаВводаБюджетаБДДС.ЦФО = ОК_БК_ОтветственныеЗаЦентрРезультата.ЦФО
	|			И бит_ФормаВводаБюджетаБДДС.Аналитика_2 = ОК_БК_ОтветственныеЗаЦентрРезультата.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеПМ_Проект.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)),
	|	""ПроектныйМенеджер""
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеПМ_Проект КАК СБ_СоответствиеПМ_Проект
	|		ПО бит_ФормаВводаБюджетаБДДС.Проект = СБ_СоответствиеПМ_Проект.Проект
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеОДИОбъектСтроительства.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)),
	|	""ОперационныйДиректор""
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеОДИОбъектСтроительства КАК СБ_СоответствиеОДИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеОДИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеФД_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)),
	|	""ФункциональныйДиректор""
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФД_ЦФО КАК СБ_СоответствиеФД_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеФД_ЦФО.ЦФО
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СБ_СоответствиеЭксперт_ЦФО.Инициатор, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)) КАК Инициатор,
	|	""Эксперт""
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеЭксперт_ЦФО КАК СБ_СоответствиеЭксперт_ЦФО
	|		ПО бит_ФормаВводаБюджетаБДДС.ЦФО = СБ_СоответствиеЭксперт_ЦФО.ЦФО
	|			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = СБ_СоответствиеЭксперт_ЦФО.СтатьяОборотов
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТ_КоличествоРазличныхОбъектов.Аналитика_2 > 1
	|				ТОГДА &ФинКонтролер
	|			ИНАЧЕ СБ_СоответствиеФКИОбъектСтроительства.Инициатор
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.бит_БК_Инициаторы.ПустаяСсылка)),
	|	""ФинансовыйКонтролер""
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоРазличныхОбъектов КАК ВТ_КоличествоРазличныхОбъектов
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_СоответствиеФКИОбъектСтроительства КАК СБ_СоответствиеФКИОбъектСтроительства
	|		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = СБ_СоответствиеФКИОбъектСтроительства.ОбъектСтроительства
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Виза";
		
	Запрос.УстановитьПараметр("Ссылка"		, Документ);
	Запрос.УстановитьПараметр("ФинКонтролер", ФК);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВизы  = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВизы.Следующий() Цикл 
		ВыборкаДетали = ВыборкаВизы.Выбрать();
		Массив = Новый Массив;
		Пока ВыборкаДетали.Следующий() Цикл 
			Массив.Добавить(ВыборкаДетали.Инициатор);
		КонецЦикла;
		Структура.Вставить(ВыборкаВизы.Виза,Массив);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-10-19 (#2921)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-09 (#2873)
Функция ЗаполнитьСложныеВизыПоАлгоритму(Алгоритм, НаборЗаписей)
	
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_УстановленныеВизы.Объект,
	|	бит_УстановленныеВизы.Виза,
	|	бит_УстановленныеВизы.КодСортировки,
	|	бит_УстановленныеВизы.Алгоритм
	|ПОМЕСТИТЬ ВТ_Набор
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Набор.Объект КАК Объект,
	|	ВТ_Набор.Виза КАК Виза,
	|	МАКСИМУМ(ВТ_Набор.КодСортировки) КАК КодСортировки,
	|	ВТ_Набор.Алгоритм
	|ПОМЕСТИТЬ ВТ_УстановленныеВизы
	|ИЗ
	|	ВТ_Набор КАК ВТ_Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Набор.Объект,
	|	ВТ_Набор.Виза,
	|	ВТ_Набор.Алгоритм
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Виза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_УстановленныеВизы.Объект,
	|	ВТ_УстановленныеВизы.Виза,
	|	ВТ_УстановленныеВизы.КодСортировки,
	|	ВТ_УстановленныеВизы.Алгоритм
	|ИЗ
	|	ВТ_УстановленныеВизы КАК ВТ_УстановленныеВизы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОК_СложныеВизы КАК ОК_СложныеВизы
	|		ПО ВТ_УстановленныеВизы.Алгоритм = ОК_СложныеВизы.Алгоритм
	|			И ВТ_УстановленныеВизы.Виза = ОК_СложныеВизы.Виза");
	
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-09 (#2873)

Процедура ОпределитьНеобходимостьДоговора() Экспорт
	// БИТ БИТ AMerkulov 2014-06-24 
	//ЭтотОбъект.ОК_НеобходимостьДоговора=БДДС.Итог("бит_БК_СуммаВВалютеБезНДС")>100000;
	ЭтотОбъект.ОК_НеобходимостьДоговора=БДДС.Итог("бит_БК_СуммаБезНДС")>100000;
	// - БИТ AMerkulov  
КонецПроцедуры	

Процедура СинхронизироватьТабЧастьСШапкой(СоответствиеРеквизитов)  Экспорт
	БДДСврем=БДДС.Выгрузить();                                        	
	Для каждого стр из СоответствиеРеквизитов
		Цикл
		БДДСврем.ЗаполнитьЗначения(ЭтотОбъект[Стр.Ключ],стр.Значение);	
	КонецЦикла;
	БДДС.Загрузить(БДДСврем);
КонецПроцедуры	

// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
Процедура ДвиженияПоРегиструКонтрольныхЗначенийУниверсальнаяЗаявка(СтруктураШапкиДокумента,ТаблицаБДДС,Отказ,Заголовок)
	
	НомерСтроки = 0;
	
	Для Каждого Строка Из ТаблицаБДДС Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		
		Если ТаблицаБДДС[НомерСтроки-1].Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда
			СценарийКонтролируемый = Справочники.СценарииПланирования.Факт_У;
			СценарийКонтролирующий = Справочники.СценарииПланирования.Бюджет_У;
			СценарийСтрока = Справочники.СценарииПланирования.Заявка_У;
		КонецЕсли;
		
		Если ТаблицаБДДС[НомерСтроки-1].Сценарий = Справочники.СценарииПланирования.Заявка_Инвест Тогда
			СценарийКонтролируемый = Справочники.СценарииПланирования.Контракт_Инвест;//БИТ АКриштопов 12042016
			СценарийКонтролирующий = Справочники.СценарииПланирования.Бюджет_Инвест;
			СценарийСтрока = Справочники.СценарииПланирования.Заявка_Инвест;			
		КонецЕсли;
		
		//БИТ АКриштопов 12042016 ++
		Если ТаблицаБДДС[НомерСтроки-1].Сценарий = Справочники.СценарииПланирования.Контракт_Инвест Тогда
			СценарийКонтролируемый = Справочники.СценарииПланирования.Факт_Инвест;
			СценарийКонтролирующий = Справочники.СценарииПланирования.Заявка_Инвест;
			СценарийСтрока = Справочники.СценарииПланирования.Контракт_Инвест;			
		КонецЕсли;
		//БИТ АКриштопов 12042016 --
		
		
		ЗначениеПревышения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Допустимый % превышения", ТаблицаБДДС[НомерСтроки-1].Сценарий, 0);
		
		ТаблицаДляКонтроля = ТаблицаБДДС.Скопировать();
		ТаблицаДляКонтроля.Очистить();
		
		Стр = ТаблицаДляКонтроля.Добавить();
		
		Для Каждого Колонка Из ТаблицаДляКонтроля.Колонки Цикл
			
			Стр[Колонка.Имя] = ТаблицаБДДС[НомерСтроки-1][Колонка.Имя];
			
		КонецЦикла;
		
		
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("Сценарий");
		МассивИсключений.Добавить("СтатьяОборотов");
		
		//Начало_бит_БК_Магомедов_16.11.2011 
		//Добавим в массив исключений не входящие в настройку измерения если такая настройка есть
		бит_СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", СценарийКонтролирующий, Новый СписокЗначений, "СписокЗначений"); 
		Для Каждого ЗначениеПеречисления Из Перечисления.бит_БК_ИзмеренияКонтроляБюджета Цикл
			Если бит_СписокИзмеренийКонтроляБюджета.НайтиПоЗначению(ЗначениеПеречисления) = Неопределено Тогда
				Мета = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления[Перечисления.бит_БК_ИзмеренияКонтроляБюджета.Индекс(ЗначениеПеречисления)];
				МассивИсключений.Добавить(Мета.Имя);
			КонецЕсли;
		КонецЦикла;	
		//Конец_бит_БК_Магомедов_17.11.2011 
		
		ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,мНастройкиИзмерений);
		
		Периодичность = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(СценарийСтрока);	
		бит_БК_Общий.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
		
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
		СтруктураПараметров.Вставить("Сценарий"                     ,СценарийСтрока);
		СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
		СтруктураПараметров.Вставить("РежимКонтроля"                ,"Бюджет");
		//Начало_бит_БК_Магомедов_30.11.2011 
		СтруктураПараметров.Вставить("ВидОперации"                ,ВидОперации);
		//Конец_бит_БК_Магомедов_30.11.2011 
		
		ТекстЗапросаДляКонтроля = бит_БК_Общий.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляКонтроля;
		
		
		ТаблицаДляКонтроля.Сортировать("Период Возр");
		
		Если ТаблицаДляКонтроля.Количество()>0 Тогда
			
			ДатаНачала    = ТаблицаДляКонтроля[0].Период;
			ДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;
			
		Иначе
			
			ДатаНачала    = Дата;
			ДатаОкончания = Дата;
			
		КонецЕсли; 
		
		ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала,Периодичность);
		ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания,Периодичность);
		
		
		МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		//Начало_бит_Магомедов_16.01.2013 
		//Для ФинПлана - Если статья НЕ Контролирующая, исключаем ее из проводок и формируем Сообщение;
		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
			ТаблицаСтатей_Периодов = ТаблицаДляКонтроля.Скопировать(,"Период,СтатьяОборотов");	   
			ТаблицаСтатей_Периодов.Свернуть("Период,СтатьяОборотов");
			ЗапросПоКонтролирующимСтатьям = Новый Запрос("ВЫБРАТЬ
			|	бит_СтатьиОборотов.Ссылка,
			|	КонтролирующиеСтатьиСрезПоследних.КонтролирующаяСтатья
			|ИЗ
			|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			бит_БК_КонтролирующиеСтатьиОборотов.КонтролирующаяСтатья КАК КонтролирующаяСтатья
			|		ИЗ
			|			РегистрСведений.бит_БК_КонтролирующиеСтатьиОборотов.СрезПоследних(&Период, ) КАК бит_БК_КонтролирующиеСтатьиОборотов
			|		ГДЕ
			|			бит_БК_КонтролирующиеСтатьиОборотов.КонтролирующаяСтатья = &Статья
			|			И бит_БК_КонтролирующиеСтатьиОборотов.АктивностьСтроки = ИСТИНА
			|		
			|		СГРУППИРОВАТЬ ПО
			|			бит_БК_КонтролирующиеСтатьиОборотов.КонтролирующаяСтатья) КАК КонтролирующиеСтатьиСрезПоследних
			|		ПО (КонтролирующиеСтатьиСрезПоследних.КонтролирующаяСтатья = бит_СтатьиОборотов.Ссылка)
			|ГДЕ
			|	бит_СтатьиОборотов.Ссылка = &Статья
			|	И КонтролирующиеСтатьиСрезПоследних.КонтролирующаяСтатья ЕСТЬ NULL 
			|
			|СГРУППИРОВАТЬ ПО
			|	бит_СтатьиОборотов.Ссылка,
			|	КонтролирующиеСтатьиСрезПоследних.КонтролирующаяСтатья");
			
			Для Каждого ТекСтрока Из ТаблицаСтатей_Периодов Цикл
				ЗапросПоКонтролирующимСтатьям.УстановитьПараметр("Период", ТекСтрока.Период);
				ЗапросПоКонтролирующимСтатьям.УстановитьПараметр("Статья",ТекСтрока.СтатьяОборотов);
				Выборка = ЗапросПоКонтролирующимСтатьям.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Отбор = Новый Структура("Период,СтатьяОборотов",ТекСтрока.Период,ТекСтрока.СтатьяОборотов);
					МассивСтрок = ТаблицаДляКонтроля.НайтиСтроки(Отбор);
					Для Каждого ТекСтрока Из МассивСтрок Цикл
						ТаблицаДляКонтроля.Удалить(ТекСтрока);
					КонецЦикла;
					Сообщить("Статья <"+Выборка.Ссылка+"> не является контролирующей. Контроль по этой статье не производится, данные в регистр «Контрольные значения бюджетов» не записаны.",СтатусСообщения.Информация);
					Отказ = Истина;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		//Конец_бит_Магомедов_16.01.2013 
		
		//Для Контракта Аналитика_1 = НомерЗаявки  для запроса по остаткам
		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
			ТаблицаДляКонтроля.ЗаполнитьЗначения(бит_БК_НомерЗаявки,"Аналитика_1");
			////{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
			////+Сенин С.В. 25.05.2016 №2669
			//ДатаНач = Дата(1,1,1,0,0,0);
			//ДатаКон = Дата(1,1,1,0,0,0);
			////-Сенин С.В. 25.05.2016 №2669
			////} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
		Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
		Запрос.УстановитьПараметр("СценарийКонтролируемый", СценарийСтрока);
		Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
		Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
		Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
		Запрос.УстановитьПараметр("ЗначениеПревышения",ЗначениеПревышения);
		//Начало_бит_БК_Магомедов_28.11.2011 
		Запрос.УстановитьПараметр("ЭтоФинПлан",?(ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан,Истина,Ложь));
		бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
		
		Результат = Запрос.Выполнить();
		
		//Начало_бит_Магомедов_15.01.2013
		Если Не ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда 
			СоответствиеСтатей = бит_БК_Общий.ПолучитьТаблицуСоответствиеСтатей(ТаблицаДляКонтроля);
			ТекстСообщения = "";
			бит_БК_Общий.УстановитьСооветствиеСтатейОборотов(СоответствиеСтатей, Отказ, ТекстСообщения);
			Если Отказ Тогда
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		//Только для Опер и Инвест заявки  
		//Заменяем статьи оборотов на Контролирующие  в ТаблицаДляКонтроля.
		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный  
			Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный  Тогда 
			Для Каждого СтрокаСоответствия Из СоответствиеСтатей Цикл
				Если СтрокаСоответствия.КонтрольПоСтатье = Истина Тогда 
					МассивСтрок = ТаблицаДляКонтроля.НайтиСтроки(Новый Структура("Период,СтатьяОборотов",СтрокаСоответствия.Период, СтрокаСоответствия.СтатьяОборотов));
					Для Каждого ТекСтрока Из МассивСтрок Цикл
						ТекСтрока.СтатьяОборотов = СтрокаСоответствия.КонтролирующаяСтатья;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			//Формируем параметр для запроса
			МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
			ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
			Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
			//по этому результату будет осуществлятся контроль
			РезультатДляКонтроля = Запрос.Выполнить();
			
		КонецЕсли;
		//Конец_бит_Магомедов_15.01.2013 
		
		// сформируем запрос для контроля инвест заявки без учета статей. Только для сообщения об ошибке без Отказа при превышении
		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
			ТекстЗапросаДляКонтроляИнвест = бит_БК_Общий.СформироватьТекстЗапросаДляКонтроляИнвест(СтруктураПараметров);
			
			ЗапросДляКонтроляИнвест = Новый Запрос;
			ЗапросДляКонтроляИнвест.Текст = ТекстЗапросаДляКонтроляИнвест;
			
			ЗапросДляКонтроляИнвест.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
			ЗапросДляКонтроляИнвест.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
			ЗапросДляКонтроляИнвест.УстановитьПараметр("СценарийКонтролируемый", СценарийСтрока);
			ЗапросДляКонтроляИнвест.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
			ЗапросДляКонтроляИнвест.УстановитьПараметр("Ссылка"                , Ссылка);
			ЗапросДляКонтроляИнвест.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
			ЗапросДляКонтроляИнвест.УстановитьПараметр("ЗначениеПревышения",ЗначениеПревышения);
			
			ЗапросДляКонтроляИнвест.УстановитьПараметр("ЭтоФинПлан",?(ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан,Истина,Ложь));
			бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,ЗапросДляКонтроляИнвест);
			
			РезультатДляКонтроляИнвест = ЗапросДляКонтроляИнвест.Выполнить();
		Иначе 
			РезультатДляКонтроляИнвест = Неопределено;
		КонецЕсли;
		//Конец - сформируем запрос для контроля инвест заявки без учета статей
		
		НаборЗаписей = Движения.бит_КонтрольныеЗначенияБюджетов;    
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИзмеренияКонтроля"   ,ИзмеренияКонтроля);
		СтруктураПараметров.Вставить("Сценарий"            ,СценарийСтрока);
		//Начало_бит_БК_Магомедов_16.11.2011   
		
		//{ bit_SVKushnirenko 11.01.2017 #2669.4
		//ИсходныйКод{
		//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан тогда
		//	СтруктураПараметров.Вставить("КонтролироватьБюджет",Ложь);
		//иначе
		//	СтруктураПараметров.Вставить("КонтролироватьБюджет",Истина);
		//КонецЕсли;
		//}ИсходныйКод
		СтруктураПараметров.Вставить("КонтролироватьБюджет", Ложь); //отключаем запутаный бюджетный контроль, заменен на вызов бит_БК_Общий.БюджетныйКонтрольНеОперативный()
		//} bit_SVKushnirenko 11.01.2017 #2669.4
		
		СтруктураПараметров.Вставить("СверхБюджета"        ,СверхБюджета);
		
		СтруктураПараметров.Вставить("СценарийКонтролируемый", СценарийКонтролируемый);
		СтруктураПараметров.Вставить("СценарийКонтролирующий", СценарийКонтролирующий);
		СтруктураПараметров.Вставить("ВидОперации", ВидОперации);
		СтруктураПараметров.Вставить("ДокументСсылка",Ссылка);
		//Начало_бит_Магомедов_15.01.2013 
		//Для Опер и Инвест заявки передаем в параметр соответствие статей для движений
		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный  
			Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
			Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
			СтруктураПараметров.Вставить("СоответствиеСтатей",СоответствиеСтатей);
		КонецЕсли;
		//Конец_бит_Магомедов_15.01.2013 
		
		//Начало_бит_Магомедов_16.01.2013 
		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
			Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
			Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
			бит_БК_Общий.ОбработатьРезультатКонтроля(РезультатДляКонтроля,Неопределено,СтруктураПараметров,Отказ,Заголовок, РезультатДляКонтроляИнвест  , ,Ссылка);
			Если Не Отказ Тогда 
				бит_БК_Общий.ВыполнитьДвиженияРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок, РезультатДляКонтроляИнвест, ,Ссылка);
			КонецЕсли;
		Иначе 
			бит_БК_Общий.ОбработатьРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок, РезультатДляКонтроляИнвест);
		КонецЕсли;
		
		//Начало_бит_БК_Магомедов_17.11.2011 
		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан тогда
			//ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.бит_БК_ВариантыБюджета.ВРамкахБюджета,"Аналитика_3"); //1c-izhtc spawn
		КонецЕсли;
		
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписей.ДобавитьДвижение();   

	КонецЦикла;
КонецПроцедуры //ДвиженияПоРегиструКонтрольныхЗначений()

Процедура ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаБДДС,Отказ,Заголовок)

	//Начало_бит_БК_Магомедов_16.11.2011
	//получаем необходимые Настройки
	СценарийКонтролируемый = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий", Сценарий);
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда 
		СценарийКонтролирующий = Сценарий;
	Иначе 
		СценарийКонтролирующий = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролирующий сценарий", Сценарий);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СценарийКонтролируемый) Тогда 
		Сообщить("Не удалось определить Контролируемый сценарий для сценария <"+Сценарий+">",СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СценарийКонтролирующий) Тогда 
		Сообщить("Не удалось определить Контролирующий сценарий для сценария <"+Сценарий+">",СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗначениеПревышения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Допустимый % превышения", Сценарий, 0);
		
	ТаблицаДляКонтроля = ТаблицаБДДС.Скопировать();
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	
	//Начало_бит_БК_Магомедов_16.11.2011 
	//Добавим в массив исключений не входящие в настройку измерения если такая настройка есть
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-02 (#3045)
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		бит_СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", Сценарий, Новый СписокЗначений, "СписокЗначений"); 
	Иначе
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-02 (#3045)
		бит_СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", СценарийКонтролирующий, Новый СписокЗначений, "СписокЗначений"); 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-02 (#3045)	
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-02 (#3045)
	Для Каждого ЗначениеПеречисления Из Перечисления.бит_БК_ИзмеренияКонтроляБюджета Цикл
		Если бит_СписокИзмеренийКонтроляБюджета.НайтиПоЗначению(ЗначениеПеречисления) = Неопределено Тогда
			Мета = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления[Перечисления.бит_БК_ИзмеренияКонтроляБюджета.Индекс(ЗначениеПеречисления)];
			МассивИсключений.Добавить(Мета.Имя);
		КонецЕсли;
	КонецЦикла;	
	//Конец_бит_БК_Магомедов_17.11.2011 
	
	//{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//+Сенин С.В. 06.10.16 №2669
	//Объект + Проект + Функция + Статья оборотов + Период (Календарный год).
	Если ВидОперации = Справочники.СценарииПланирования.Заявка_Инвест Тогда
		МассивИсключений.Удалить("СтатьяОборотов");
	КонецЕсли; 
	//-Сенин С.В. 06.10.16 №2669
	//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	
	ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,мНастройкиИзмерений);
	
	Периодичность = бит_БК_Общий.ПолучитьПериодичностьКонтроляСценария(Сценарий);	
	//бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
	бит_БК_Общий.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"                     ,Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
	СтруктураПараметров.Вставить("РежимКонтроля"                ,"Бюджет");
	//Начало_бит_БК_Магомедов_30.11.2011 
	СтруктураПараметров.Вставить("ВидОперации"                ,ВидОперации);
	//Конец_бит_БК_Магомедов_30.11.2011 
	
	//ТекстЗапросаДляКонтроля = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	ТекстЗапросаДляКонтроля = бит_БК_Общий.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляКонтроля;
	
   
   ТаблицаДляКонтроля.Сортировать("Период Возр");
   
   Если ТаблицаДляКонтроля.Количество()>0 Тогда
	   ДатаНачала    = ТаблицаДляКонтроля[0].Период;
	   ДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;
   Иначе
	   ДатаНачала    = Дата;
	   ДатаОкончания = Дата;
   КонецЕсли; 
   
   ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала,Периодичность);
   ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания,Периодичность);
   
   МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
   бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
   
   //Начало_бит_Магомедов_16.01.2013 
   //Для ФинПлана - Если статья НЕ Контролирующая, исключаем ее из проводок и формируем Сообщение;
   Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
	   ТаблицаСтатей_Периодов = ТаблицаДляКонтроля.Скопировать(,"Период,СтатьяОборотов");	   
	   ТаблицаСтатей_Периодов.Свернуть("Период,СтатьяОборотов");
	   ЗапросПоКонтролирующимСтатьям = Новый Запрос("ВЫБРАТЬ
	   |	бит_СтатьиОборотов.Ссылка,
	   |	КонтролирующиеСтатьиСрезПоследних.КонтролирующаяСтатья
	   |ИЗ
	   |	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	   |			бит_БК_КонтролирующиеСтатьиОборотов.КонтролирующаяСтатья КАК КонтролирующаяСтатья
	   |		ИЗ
	   |			РегистрСведений.бит_БК_КонтролирующиеСтатьиОборотов.СрезПоследних(&Период, ) КАК бит_БК_КонтролирующиеСтатьиОборотов
	   |		ГДЕ
	   |			бит_БК_КонтролирующиеСтатьиОборотов.КонтролирующаяСтатья = &Статья
	   |			И бит_БК_КонтролирующиеСтатьиОборотов.АктивностьСтроки = ИСТИНА
	   |		
	   |		СГРУППИРОВАТЬ ПО
	   |			бит_БК_КонтролирующиеСтатьиОборотов.КонтролирующаяСтатья) КАК КонтролирующиеСтатьиСрезПоследних
	   |		ПО (КонтролирующиеСтатьиСрезПоследних.КонтролирующаяСтатья = бит_СтатьиОборотов.Ссылка)
	   |ГДЕ
	   |	бит_СтатьиОборотов.Ссылка = &Статья
	   |	И КонтролирующиеСтатьиСрезПоследних.КонтролирующаяСтатья ЕСТЬ NULL 
	   |
	   |СГРУППИРОВАТЬ ПО
	   |	бит_СтатьиОборотов.Ссылка,
	   |	КонтролирующиеСтатьиСрезПоследних.КонтролирующаяСтатья");
	   
	   Для Каждого ТекСтрока Из ТаблицаСтатей_Периодов Цикл
		   ЗапросПоКонтролирующимСтатьям.УстановитьПараметр("Период", ТекСтрока.Период);
		   ЗапросПоКонтролирующимСтатьям.УстановитьПараметр("Статья",ТекСтрока.СтатьяОборотов);
		   Выборка = ЗапросПоКонтролирующимСтатьям.Выполнить().Выбрать();
		   Пока Выборка.Следующий() Цикл
			   Отбор = Новый Структура("Период,СтатьяОборотов",ТекСтрока.Период,ТекСтрока.СтатьяОборотов);
			   МассивСтрок = ТаблицаДляКонтроля.НайтиСтроки(Отбор);
			   Для Каждого ТекСтрока Из МассивСтрок Цикл
				   ТаблицаДляКонтроля.Удалить(ТекСтрока);
			   КонецЦикла;
			   Сообщить("Статья <"+Выборка.Ссылка+"> не является контролирующей. Контроль по этой статье не производится, данные в регистр «Контрольные значения бюджетов» не записаны.",СтатусСообщения.Информация);
			   Отказ = Истина;
		   КонецЦикла;
	   КонецЦикла;
	   
   КонецЕсли;
   Если Отказ Тогда
	   Возврат;
   КонецЕсли;
   //Конец_бит_Магомедов_16.01.2013 
   
   
   //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-02 (#3045)
   ////Для Контракта Аналитика_1 = НомерЗаявки  для запроса по остаткам
   //Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
   //	ТаблицаДляКонтроля.ЗаполнитьЗначения(бит_БК_НомерЗаявки,"Аналитика_1");
   //КонецЕсли;
   //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-02 (#3045)
   
   Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
   Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
   Запрос.УстановитьПараметр("СценарийКонтролируемый", Сценарий);
   Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
   Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
   Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
   Запрос.УстановитьПараметр("ЗначениеПревышения",ЗначениеПревышения);
   Запрос.УстановитьПараметр("ЭтоФинПлан",?(ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан,Истина,Ложь));
   
   бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
   
   
   Результат = Запрос.Выполнить();
   
   //Начало_бит_Магомедов_15.01.2013
   Если Не ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда 
	   СоответствиеСтатей = бит_БК_Общий.ПолучитьТаблицуСоответствиеСтатей(ТаблицаДляКонтроля);
	   ТекстСообщения = "";
	   бит_БК_Общий.УстановитьСооветствиеСтатейОборотов(СоответствиеСтатей, Отказ, ТекстСообщения);
	   Если Отказ Тогда
		   Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		   Возврат;
	   КонецЕсли;
   КонецЕсли;
   //Только для Опер и Инвест заявки  
   //Заменяем статьи оборотов на Контролирующие  в ТаблицаДляКонтроля.
   Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный  
	   Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный  Тогда 
	   Для Каждого СтрокаСоответствия Из СоответствиеСтатей Цикл
		   Если СтрокаСоответствия.КонтрольПоСтатье = Истина Тогда 
			   МассивСтрок = ТаблицаДляКонтроля.НайтиСтроки(Новый Структура("Период,СтатьяОборотов",СтрокаСоответствия.Период, СтрокаСоответствия.СтатьяОборотов));
			   Для Каждого ТекСтрока Из МассивСтрок Цикл
				   ТекСтрока.СтатьяОборотов = СтрокаСоответствия.КонтролирующаяСтатья;
			   КонецЦикла;
		   КонецЕсли;
	   КонецЦикла;
	   
	   //Формируем параметр для запроса
	   МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
	   ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	   Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
	   //по этому результату будет осуществлятся контроль
	   РезультатДляКонтроля = Запрос.Выполнить();
	   
   КонецЕсли;
   //Конец_бит_Магомедов_15.01.2013 
   
   // сформируем запрос для контроля инвест заявки без учета статей. Только для сообщения об ошибке без Отказа при превышении
   Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
	   ТекстЗапросаДляКонтроляИнвест = бит_БК_Общий.СформироватьТекстЗапросаДляКонтроляИнвест(СтруктураПараметров);
	   
	   ЗапросДляКонтроляИнвест = Новый Запрос;
	   ЗапросДляКонтроляИнвест.Текст = ТекстЗапросаДляКонтроляИнвест;
	   
	   ЗапросДляКонтроляИнвест.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
	   ЗапросДляКонтроляИнвест.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
	   ЗапросДляКонтроляИнвест.УстановитьПараметр("СценарийКонтролируемый", Сценарий);
	   ЗапросДляКонтроляИнвест.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
	   ЗапросДляКонтроляИнвест.УстановитьПараметр("Ссылка"                , Ссылка);
	   ЗапросДляКонтроляИнвест.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
	   ЗапросДляКонтроляИнвест.УстановитьПараметр("ЗначениеПревышения",ЗначениеПревышения);
	   
	   ЗапросДляКонтроляИнвест.УстановитьПараметр("ЭтоФинПлан",?(ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан,Истина,Ложь));
	   бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,ЗапросДляКонтроляИнвест);
	   
	   РезультатДляКонтроляИнвест = ЗапросДляКонтроляИнвест.Выполнить();
   Иначе 
	   РезультатДляКонтроляИнвест = Неопределено;
   КонецЕсли;
   //Конец - сформируем запрос для контроля инвест заявки без учета статей
   
   НаборЗаписей = Движения.бит_КонтрольныеЗначенияБюджетов;    
   ТаблицаДвижений = НаборЗаписей.Выгрузить();
   ТаблицаДвижений.Очистить();
   
   
   СтруктураПараметров = Новый Структура;
   СтруктураПараметров.Вставить("ИзмеренияКонтроля"   ,ИзмеренияКонтроля);
   СтруктураПараметров.Вставить("Сценарий"            ,Сценарий);
   //Начало_бит_БК_Магомедов_16.11.2011
   //СтруктураПараметров.Вставить("КонтролироватьБюджет",Истина);
   //{ bit_SVKushnirenko 11.01.2017 #2669.4
   //ИсходныйКод{
   //Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан тогда
   //    СтруктураПараметров.Вставить("КонтролироватьБюджет",Ложь);
   //иначе
   //    СтруктураПараметров.Вставить("КонтролироватьБюджет",Истина);
   //КонецЕсли;
   //}ИсходныйКод
   СтруктураПараметров.Вставить("КонтролироватьБюджет", Ложь); //отключаем запутаный бюджетный контроль, заменен на вызов бит_БК_Общий.БюджетныйКонтрольНеОперативный()
   //} bit_SVKushnirenko 11.01.2017 #2669.4
   СтруктураПараметров.Вставить("СверхБюджета"        ,СверхБюджета);
   //СтруктураПараметров.Вставить("РежимКонтроля"       ,"Бюджет");
   СтруктураПараметров.Вставить("СценарийКонтролируемый", СценарийКонтролируемый);
   СтруктураПараметров.Вставить("СценарийКонтролирующий", СценарийКонтролирующий);
   СтруктураПараметров.Вставить("ВидОперации", ВидОперации);
   СтруктураПараметров.Вставить("ДокументСсылка",Ссылка);
   
   //бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок);
   //
   //ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сценарий,"СценарийКонтролируемый");
   //Начало_бит_Магомедов_15.01.2013 
   //Для Опер и Инвест заявки передаем в параметр соответствие статей для движений
   Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный  
	   Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	   Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
	   СтруктураПараметров.Вставить("СоответствиеСтатей",СоответствиеСтатей);
   КонецЕсли;
   //Конец_бит_Магомедов_15.01.2013 
   
   //Начало_бит_Магомедов_16.01.2013 
   Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
	   Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	   Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
	   бит_БК_Общий.ОбработатьРезультатКонтроля(РезультатДляКонтроля,Неопределено,СтруктураПараметров,Отказ,Заголовок, РезультатДляКонтроляИнвест  , ,Ссылка);
	   Если Не Отказ Тогда 
		   бит_БК_Общий.ВыполнитьДвиженияРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок, РезультатДляКонтроляИнвест, ,Ссылка);
	   КонецЕсли;
   Иначе 
	   бит_БК_Общий.ОбработатьРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок, РезультатДляКонтроляИнвест);
   КонецЕсли;
   
   СтруктураПараметров.Вставить("Объект",			   Ссылка);
   
   //Начало_бит_БК_Магомедов_17.11.2011 
   Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан тогда
	   //ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.бит_БК_ВариантыБюджета.ВРамкахБюджета,"Аналитика_3"); //1c-izhtc spawn
   КонецЕсли;
   
   // ++ БИТ AMerkulov 2014-10-07 /  
   Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный
	   ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный
	   ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный		
	   ИЛИ (ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан  И Сценарий <> Справочники.СценарииПланирования.Бюджет_А)
	   Тогда
	   ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
   КонецЕсли;
   // -- БИТ AMerkulov 2014-10-07 /
   
   НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
   НаборЗаписей.ДобавитьДвижение();
   

КонецПроцедуры

// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
Функция ПолучитьСтруктуруКурсовВалютСценария(ДокументОбъект,ДатаКурсов,ВидыКурсов=Неопределено, СценарийСтр) Экспорт
	
	СтруктураКурсыВалют = Новый Структура;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	
	// Курс документа
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Документ") Тогда
		
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента",МетаданныеДокумента) 
			И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсДокумента",МетаданныеДокумента)
			И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьДокумента",МетаданныеДокумента) Тогда
			
			СтрКурса = Новый Структура;
			СтрКурса.Вставить("Курс"     ,ДокументОбъект.КурсДокумента);
			СтрКурса.Вставить("Кратность",ДокументОбъект.КратностьДокумента);
			СтрКурса.Вставить("Валюта"   ,ДокументОбъект.ВалютаДокумента);
			СтруктураКурсыВалют.Вставить("Документ",СтрКурса);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Курс упр. учета
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Упр") Тогда	
		
		Валюта = Константы.бит_ВалютаУправленческогоУчета.Получить();
		СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(СценарийСтр,Валюта,ДатаКурсов);
		СтрКурса.Вставить("Валюта",Валюта);
		СтруктураКурсыВалют.Вставить("Упр",СтрКурса);
		
	КонецЕсли;
	
	// Курс сценария
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Сценарий") Тогда
		
		
		Валюта = СценарийСтр.Валюта;
		СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(СценарийСтр,Валюта,ДатаКурсов);
		СтрКурса.Вставить("Валюта",Валюта);
		СтруктураКурсыВалют.Вставить("Сценарий",СтрКурса);
		
		
	КонецЕсли;
	
	// Валюта регламентированного учета
	Если ВидыКурсов = Неопределено ИЛИ ВидыКурсов.Свойство("Регл") Тогда
		
		СтрКурса = Новый Структура;
		СтрКурса.Вставить("Курс",1);
		СтрКурса.Вставить("Кратность",1);
		СтрКурса.Вставить("Валюта",Константы.ВалютаРегламентированногоУчета.Получить());
		СтруктураКурсыВалют.Вставить("Регл",СтрКурса);
		
	КонецЕсли;
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // ПолучитьСтруктуруКурсовВалютСценария()

Процедура бит_ПроверитьПоБюджетуУниверсальная() Экспорт
	
	//// Заголовок для сообщений об ошибках проведения.
	//Отказ = Ложь;
	//Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	//Отказ = НЕ ПроверитьЗаполнение();
	//
	//Если Отказ Тогда           
	//	Возврат;
	//КонецЕсли;
	//СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	//	                                                
	//ТаблицаБДДС = ПодготовитьТаблицуБДДСПострочно();
	//
	////Начало_бит_Магомедов_29.01.2013 
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный  
	//	Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	//	ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
	//	СоответствиеСтатей = Неопределено;
	//КонецЕсли;
	////Конец_бит_Магомедов_29.01.2013 
	//
	//// по регистру контрольные значения
	//Для Каждого Строка Из БДДС Цикл
	//	Результат = ВыполнитьЗапросКонтрольОстатковПострочно(СтруктураШапкиДокумента,ТаблицаБДДС,Отказ,Заголовок, СоответствиеСтатей, Строка.НомерСтроки);
	//	Если Результат = Ложь Тогда 
	//		Возврат;
	//	КонецЕсли;
	//	
	//	
	//	Выборка = Результат.Выбрать();
	//	Пока Выборка.Следующий() Цикл //цикл по остаткам
	//		//Если разность > 0 тогда пропускаем строку
	//		//1c-izhtc spawn (
	//		//Если Выборка.РазностьВРамкахБюджетаБезНДС >= 0 Тогда 
	//		Если Выборка.РазностьБезНДС >= 0 Тогда 
	//		//1c-izhtc spawn )
	//			Продолжить;
	//		КонецЕсли;
	//		//Получаем остаток к распределению сверх бюджета, делаем положительным
	//		//1c-izhtc spawn (
	//		//Остаток = Выборка.РазностьВРамкахБюджетаБезНДС * -1;
	//		Остаток = Выборка.РазностьБезНДС * -1;
	//		//1c-izhtc spawn )
	//		
	//		
	//		
	//		//Заполняем Отбор для строк ТЧ
	//		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
	//			//для инвеста - без периода
	//			Отбор = Новый Структура("ЦФО, Аналитика_2",Выборка.ЦФО, Выборка.Аналитика_2);
	//		иначе
	//			Отбор = Новый Структура("Период, ЦФО, Аналитика_2", Выборка.Период, Выборка.ЦФО, Выборка.Аналитика_2);
	//		КонецЕсли;
	//		
	//		//получаем массив строк ТЧ с аналитикой остатка, если это опер или инвест заявка, то ищем по соответствию статей
	//		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 			 
	//			Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	//			ИЛИ  ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
	//			МассивСтрокСоответствияСтатей = СоответствиеСтатей.НайтиСтроки(Новый Структура("Период, КонтролирующаяСтатья",Выборка.Период,Выборка.СтатьяОборотов));			
	//			МассивСтрок = Новый Массив;
	//			Для Каждого СтрокаСоответствия Из МассивСтрокСоответствияСтатей Цикл
	//				Если СтрокаСоответствия.КонтрольПоСтатье = Истина Тогда 
	//					Отбор.Вставить("СтатьяОборотов", СтрокаСоответствия.СтатьяОборотов);
	//					мМассивСтрок = БДДС.НайтиСтроки(Отбор);
	//					Для Каждого ТекЭлемент Из мМассивСтрок Цикл
	//						МассивСтрок.Добавить(ТекЭлемент);
	//					КонецЦикла;
	//				КонецЕсли;
	//			КонецЦикла;
	//			ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтрок);
	//			
	//		Иначе
	//			Отбор.Вставить("СтатьяОборотов", Выборка.СтатьяОборотов);
	//			МассивСтрок = БДДС.НайтиСтроки(Отбор);
	//			
	//		КонецЕсли;
	//		
	//		КоличествоСтрок = МассивСтрок.Количество();
	//		Если  КоличествоСтрок = 0 Тогда 
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		//распределяем остаток начиная с последней строки
	//		Для сч = 1 по КоличествоСтрок Цикл //цикл по выбранным строкам ТЧ
	//			Если Остаток = 0 тогда
	//				Прервать;
	//			КонецЕсли;
	//			
	//			ИндексМассива = КоличествоСтрок - сч;
	//			ТекСтрокаМассива = МассивСтрок.Получить(ИндексМассива);
	//			
	//			СуммаКПереносу = Мин(ТекСтрокаМассива.бит_БК_СуммаВРамкахБюджетаБезНДС, Остаток);
	//			Остаток = Остаток - СуммаКПереносу;
	//			СуммаСверхБюджета = ТекСтрокаМассива.бит_БК_СуммаЗаРамкамиБюджетаБезНДС + СуммаКПереносу;
	//			СуммаВРамкахБюджета = ТекСтрокаМассива.бит_БК_СуммаБезНДС - СуммаСверхБюджета; 
	//			//Если ТекСтрокаМассива.бит_БК_СуммаВРамкахБюджетаБезНДС <= Остаток Тогда 
	//			//	СуммаСверхБюджета = ТекСтрокаМассива.бит_БК_СуммаВРамкахБюджетаБезНДС;
	//			//	СуммаВРамкахБюджета = 0;
	//			//	Остаток = Остаток - СуммаСверхБюджета;
	//			//иначе
	//			//	СуммаСверхБюджета = Остаток;
	//			//	СуммаВРамкахБюджета = ТекСтрокаМассива.бит_БК_СуммаВРамкахБюджетаБезНДС - Остаток;
	//			//	Остаток = 0;
	//			//КонецЕсли;
	//			ТекСтрокаТЧ = БДДС.Получить(ТекСтрокаМассива.НомерСтроки - 1);
	//			ТекСтрокаТЧ.бит_БК_СуммаВРамкахБюджетаБезНДС = СуммаВРамкахБюджета;
	//			ПересчитатьСуммы("СуммаВРамкахБюджетаБезНДС",ТекСтрокаТЧ);
	//		КонецЦикла;//цикл по выбранным строкам ТЧ		
	//	КонецЦикла;//цикл по остаткам
	//	
	//	//очищаем в рамках бюджета для неконтролируемых статей
	//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
	//		
	//		Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	//		ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
	//		
	//		Для Каждого СтрокаСоответствия Из СоответствиеСтатей Цикл
	//			Если СтрокаСоответствия.КонтрольПоСтатье = Ложь Тогда 
	//				Отбор = Новый Структура("Период,СтатьяОборотов", СтрокаСоответствия.Период, СтрокаСоответствия.СтатьяОборотов);
	//				МассивСтрок = БДДС.НайтиСтроки(Отбор);
	//				Для Каждого ТекСтрокаТЧ Из МассивСтрок Цикл
	//					ТекСтрокаТЧ.бит_БК_СуммаВРамкахБюджетаБезНДС = 0;
	//					ПересчитатьСуммы("СуммаВРамкахБюджетаБезНДС",ТекСтрокаТЧ);
	//				КонецЦикла;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьЗапросКонтрольОстатковПострочно(СтруктураШапкиДокумента,ТаблицаБДДС,Отказ,Заголовок, СоответствиеСтатей,НомерСтроки)
	//Начало_бит_БК_Магомедов_16.11.2011
	//получаем необходимые Настройки
	//СценарийКонтролируемый = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролируемый сценарий", Сценарий);
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда 
	//	СценарийКонтролирующий = Сценарий;
	//Иначе 
	//	СценарийКонтролирующий = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Контролирующий сценарий", Сценарий);
	//КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(СценарийКонтролируемый) Тогда 
	//	Сообщить("Не удалось определить Контролируемый сценарий для сценария <"+Сценарий+">",СтатусСообщения.Важное);
	//	Отказ = Истина;
	//	Возврат Ложь;
	//КонецЕсли;
	//Если НЕ ЗначениеЗаполнено(СценарийКонтролирующий) Тогда 
	//	Сообщить("Не удалось определить Контролирующий сценарий для сценария <"+Сценарий+">",СтатусСообщения.Важное);
	//	Отказ = Истина;
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если ТаблицаБДДС[НомерСтроки-1].Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда
		СценарийКонтролируемый = Справочники.СценарииПланирования.Факт_У;
		СценарийКонтролирующий = Справочники.СценарииПланирования.Бюджет_У;
	КонецЕсли;
	
	Если ТаблицаБДДС[НомерСтроки-1].Сценарий = Справочники.СценарииПланирования.Заявка_Инвест Тогда
		СценарийКонтролируемый = Справочники.СценарииПланирования.Факт_Инвест;
		СценарийКонтролирующий = Справочники.СценарииПланирования.Бюджет_Инвест;
	КонецЕсли;
	
	
	ЗначениеПревышения = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Допустимый % превышения", ТаблицаБДДС[НомерСтроки-1].Сценарий, 0);
	
	ТаблицаДляКонтроля = ТаблицаБДДС.Скопировать();
	ТаблицаДляКонтроля.Очистить();
	
	Стр = ТаблицаДляКонтроля.Добавить();
	
	Для Каждого Колонка Из ТаблицаДляКонтроля.Колонки Цикл
		
		Стр[Колонка.Имя] = ТаблицаБДДС[НомерСтроки-1][Колонка.Имя];
		
	КонецЦикла;
	
	
	
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	
	//Начало_бит_БК_Магомедов_16.11.2011 
	//Добавим в массив исключений не входящие в настройку измерения если такая настройка есть
	бит_СписокИзмеренийКонтроляБюджета = бит_БК_Общий.ПолучитьЗначениеНастройкиБК("Измерения контроля бюджета", СценарийКонтролирующий, Новый СписокЗначений, "СписокЗначений"); 
	Для Каждого ЗначениеПеречисления Из Перечисления.бит_БК_ИзмеренияКонтроляБюджета Цикл
		Если бит_СписокИзмеренийКонтроляБюджета.НайтиПоЗначению(ЗначениеПеречисления) = Неопределено Тогда
			Мета = Метаданные.Перечисления.бит_БК_ИзмеренияКонтроляБюджета.ЗначенияПеречисления[Перечисления.бит_БК_ИзмеренияКонтроляБюджета.Индекс(ЗначениеПеречисления)];
			МассивИсключений.Добавить(Мета.Имя);
		КонецЕсли;
	КонецЦикла;	
	//Конец_бит_БК_Магомедов_17.11.2011 
	
	ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,мНастройкиИзмерений);
	
	Периодичность = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(ТаблицаБДДС[НомерСтроки-1].Сценарий);	
	бит_БК_Общий.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"                     ,ТаблицаБДДС[НомерСтроки-1].Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
	СтруктураПараметров.Вставить("РежимКонтроля"                ,"Бюджет");
	//Начало_бит_БК_Магомедов_30.11.2011 
	СтруктураПараметров.Вставить("ВидОперации"                ,ВидОперации);
	//Конец_бит_БК_Магомедов_30.11.2011 
	
	ТекстЗапросаДляКонтроля = бит_БК_Общий.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляКонтроля;
	
	
	ТаблицаДляКонтроля.Сортировать("Период Возр");
	
	Если ТаблицаДляКонтроля.Количество()>0 Тогда
		
		ДатаНачала    = ТаблицаДляКонтроля[0].Период;
		ДатаОкончания = ТаблицаДляКонтроля[ТаблицаДляКонтроля.Количество()-1].Период;
		
	Иначе
		
		ДатаНачала    = Дата;
		ДатаОкончания = Дата;
		
	КонецЕсли; 
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаНачала,Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаОкончания,Периодичность);
	
	МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	
	//Начало_бит_Магомедов_15.01.2013
	//Заполняем соответствие статей и проверяем наличие неконтролируемых статей
	СоответствиеСтатей = бит_БК_Общий.ПолучитьТаблицуСоответствиеСтатей(ТаблицаДляКонтроля);
	ТекстСообщения = "";
	бит_БК_Общий.УстановитьСооветствиеСтатейОборотов(СоответствиеСтатей, Отказ, ТекстСообщения);
	Если Отказ Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		// Возврат;
	КонецЕсли;
	
	//Только для Опер и Инвест заявки  
	//Заменяем статьи оборотов на Контролирующие  в ТаблицаДляКонтроля.
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный  
		Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
		Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
		Для Каждого СтрокаСоответствия Из СоответствиеСтатей Цикл
			Если СтрокаСоответствия.КонтрольПоСтатье = Истина Тогда 
				МассивСтрок = ТаблицаДляКонтроля.НайтиСтроки(Новый Структура("Период,СтатьяОборотов",СтрокаСоответствия.Период, СтрокаСоответствия.СтатьяОборотов));
				Для Каждого ТекСтрока Из МассивСтрок Цикл
					ТекСтрока.СтатьяОборотов = СтрокаСоответствия.КонтролирующаяСтатья;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		//Формируем параметр для запроса
		МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
		//по этому результату будет осуществлятся контроль
		//  РезультатДляКонтроля = Запрос.Выполнить();
		
	КонецЕсли;
	//Конец_бит_Магомедов_15.01.2013 
	
	//Для Контракта Аналитика_1 = НомерЗаявки
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		ТаблицаДляКонтроля.ЗаполнитьЗначения(бит_БК_НомерЗаявки,"Аналитика_1");
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
	Запрос.УстановитьПараметр("СценарийКонтролируемый", ТаблицаБДДС[НомерСтроки-1].Сценарий);
	Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
	Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);
	Запрос.УстановитьПараметр("ЗначениеПревышения",ЗначениеПревышения);
	//Начало_бит_БК_Магомедов_28.11.2011 
	Запрос.УстановитьПараметр("ЭтоФинПлан",?(ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан,Истина,Ложь));
	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);
	
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
КонецФункции

Функция ПодготовитьТаблицуБДДСПострочно()
	
	РазмерностьСумм = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм);
	
	ТекстПолей_бит_ФормаВводаБюджетаБДДС  			 = "";
	ТекстПолей_бит_ФормаВводаБюджетаЗависимыеОбороты = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
		
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Тогда
			Продолжить;		
		КонецЕсли;
		
		ТекстПолей_бит_ФормаВводаБюджетаБДДС = ТекстПолей_бит_ФормаВводаБюджетаБДДС + Символы.ПС + "	бит_ФормаВводаБюджетаБДДС." + ИмяИзмерения + ",";
		
	КонецЦикла;
	ТекстПолей_бит_ФормаВводаБюджетаЗависимыеОбороты = СтрЗаменить(ТекстПолей_бит_ФормаВводаБюджетаБДДС, "бит_ФормаВводаБюджетаБДДС", "бит_ФормаВводаБюджетаЗависимыеОбороты");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_ФормаВводаБюджетаБДДС.Период,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка.ВалютаДокумента КАК Валюта,
	// БИТ_YK_н Доработка #2240 03/16
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка.Сценарий,
	|	бит_ФормаВводаБюджетаБДДС.Сценарий,
	// БИТ_YK_к
	|   " + ТекстПолей_бит_ФормаВводаБюджетаБДДС + "				   
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-06 (#3045)
	//|	бит_ФормаВводаБюджетаБДДС.Количество,
	//Заменено на:
	|	0 КАК Количество,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-06 (#3045)
	|	Выбор Когда бит_ФормаВводаБюджетаБДДС.СтатьяОборотов.ЭтоКоэффициент = Истина 
	|         Тогда ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.Сумма, 0) 
	|         Иначе ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.Сумма, 0) * &РазмерностьСумм 
	|   Конец КАК Сумма,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-08 (#3121)
	//|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	//Заменено на:
	|	бит_ФормаВводаБюджетаБДДС.бит_СтавкаНДС КАК СтавкаНДС,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-08 (#3121)
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,	
	|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС, 0) КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаСценарий,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_Организация КАК бит_БК_Организация,
	//1c-izhtc spawn (
	//|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВРамкахБюджетаБезНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаВРамкахБюджетаБезНДС,
	//|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаЗаРамкамиБюджетаБезНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаЗаРамкамиБюджетаБезНДС,
	//|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВРамкахБюджетаСНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаВРамкахБюджетаСНДС,
	//|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаЗаРамкамиБюджетаСНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаЗаРамкамиБюджетаСНДС
	|	ЕСТЬNULL(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС, 0) * &РазмерностьСумм КАК бит_БК_СуммаБезНДС,
	|	0 * &РазмерностьСумм КАК бит_БК_СуммаСНДС
	//1c-izhtc spawn )
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|   %РежимФормированияДвижений%";
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Период,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка.ВалютаДокумента,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка.Сценарий,
	//|   " + ТекстПолей_бит_ФормаВводаБюджетаЗависимыеОбороты + "				   
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Количество,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Сумма,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.СтатьяОборотов.СтавкаНДС,
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.СтатьяОборотов.ЭтоКоэффициент,	
	//|	0,
	//|	0,
	//|	0
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.ЗависимыеОбороты КАК бит_ФормаВводаБюджетаЗависимыеОбороты
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаЗависимыеОбороты.Ссылка = &Ссылка
	//|   %РежимФормированияДвиженийЗависимые%
	//|";
	
	
	флЭтоФиксированныйМакет = ? (ЭтотОбъект.НастройкаФормы.Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет, Истина, Ложь);	
	
	Если флЭтоФиксированныйМакет Тогда
		
		Если ЭтотОбъект.РежимФормированияДвижений = Перечисления.бит_РежимыФормированияДвиженийФормыВвода.Расчетные Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвижений%","И бит_ФормаВводаБюджетаБДДС.Расчетная = Истина");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвиженийЗависимые%","И бит_ФормаВводаБюджетаЗависимыеОбороты.Расчетная = Истина");		
			
		ИначеЕсли ЭтотОбъект.РежимФормированияДвижений = Перечисления.бит_РежимыФормированияДвиженийФормыВвода.ИсключаяРасчетные Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвижений%","И бит_ФормаВводаБюджетаБДДС.Расчетная = Ложь");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвиженийЗависимые%","И бит_ФормаВводаБюджетаЗависимыеОбороты.Расчетная = Ложь");		
			
		Иначе 			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвижений%","");
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвиженийЗависимые%","");		
			
		КонецЕсли;	
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвижений%","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%РежимФормированияДвиженийЗависимые%","");		
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Ссылка"		   , Ссылка);			   
	Запрос.УстановитьПараметр("РазмерностьСумм", РазмерностьСумм);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаБДДС = Результат.Выгрузить();
	
	// получим таблицу периодов
	КурсыПоПериодам = Неопределено;
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		
		ТаблицаПериодов = БДДС.Выгрузить();
		ТаблицаПериодов.Свернуть("Период");
		
		// установим настройки для получения курсов по периодам
		СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий,ВалютаДокумента);
		
		// получим курсы по периодам
		КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,Сценарий,СтруктураПараметров);
		
	КонецЕсли;
	
	// + БИТ AMerkulov 2014-07-24 /  Заполнение ресурсов оборотов для фин. плана	
	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		СтруктураКурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(ЭтотОбъект,Дата, Новый Структура("Документ, Регл, Упр, Сценарий"));		
		бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаБДДС,КурсыПоПериодам,СтруктураКурсыВалют);
	КонецЕсли;
	// + БИТ AMerkulov 2014-07-24 /  Заполнение ресурсов оборотов для фин. плана
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-21 (#3927)
	////1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
	//Для каждого СтрокаТаблицы Из ТаблицаБДДС Цикл
	//	Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
	//		СтрокаТаблицы.Аналитика_1 = Документы.бит_ФормаВводаБюджета.ПустаяСсылка();
	//		СтрокаТаблицы.Сумма         = СтрокаТаблицы.бит_БК_СуммаБезНДС;
	//		СтрокаТаблицы.СуммаРегл     = СтрокаТаблицы.бит_БК_СуммаБезНДС;
	//		СтрокаТаблицы.СуммаУпр      = СтрокаТаблицы.бит_БК_СуммаБезНДС;
	//		СтрокаТаблицы.СуммаСценарий = СтрокаТаблицы.бит_БК_СуммаБезНДС;	
	//	Иначе
	//		СтрокаТаблицы.СтавкаНДС		   = Неопределено;			
	//		СтрокаТаблицы.бит_БК_Организация = Неопределено;
	//		СтрокаТаблицы.Сумма 		= СтрокаТаблицы.бит_БК_СуммаБезНДС;
	//		СтрокаТаблицы.СуммаРегл 	= СтрокаТаблицы.бит_БК_СуммаБезНДС;
	//		СтрокаТаблицы.СуммаУпр		= СтрокаТаблицы.бит_БК_СуммаБезНДС;
	//		СтрокаТаблицы.СуммаСценарий = СтрокаТаблицы.бит_БК_СуммаБезНДС;			
	//	КонецЕсли;
	//КонецЦикла; 
	////1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-21 (#3927)
	
	Возврат ТаблицаБДДС;
	
КонецФункции // ПодготовитьТаблицуБДДС()

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-21 (#3927)
Функция ПодготовитьТаблицуОборотыПоБюджетам(ТаблицаБДДС)
	
	Для каждого СтрокаТаблицы Из ТаблицаБДДС Цикл
		Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
			СтрокаТаблицы.Аналитика_1 = Документы.бит_ФормаВводаБюджета.ПустаяСсылка();
			СтрокаТаблицы.Сумма         = СтрокаТаблицы.бит_БК_СуммаБезНДС;
			СтрокаТаблицы.СуммаРегл     = СтрокаТаблицы.бит_БК_СуммаБезНДС;
			СтрокаТаблицы.СуммаУпр      = СтрокаТаблицы.бит_БК_СуммаБезНДС;
			СтрокаТаблицы.СуммаСценарий = СтрокаТаблицы.бит_БК_СуммаБезНДС;	
		Иначе
			СтрокаТаблицы.СтавкаНДС		   = Неопределено;			
			СтрокаТаблицы.бит_БК_Организация = Неопределено;
			СтрокаТаблицы.Сумма 		= СтрокаТаблицы.бит_БК_СуммаБезНДС;
			СтрокаТаблицы.СуммаРегл 	= СтрокаТаблицы.бит_БК_СуммаБезНДС;
			СтрокаТаблицы.СуммаУпр		= СтрокаТаблицы.бит_БК_СуммаБезНДС;
			СтрокаТаблицы.СуммаСценарий = СтрокаТаблицы.бит_БК_СуммаБезНДС;			
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаБДДС;
	
КонецФункции // ПодготовитьТаблицуБДДС()
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-21 (#3927)

// + БИТ AMerkulov 2014-09-10 
Процедура Согласовать()Экспорт
	
	//ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения); //БИТ НАГолубева 03.03.2016
	
	// + БИТ AMerkulov 2014-11-12	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-10 (#2873)
	//Для поддержки старого алгоритма
	Если НЕ бит_БК_Общий.РеквизитыДляМуршрутовВидимы(Ссылка) Тогда 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	бит_УстановленныеВизы.Объект,
		|	бит_УстановленныеВизы.Виза,
		|	бит_УстановленныеВизы.ИД,
		|	бит_УстановленныеВизы.Пользователь,
		|	бит_УстановленныеВизы.ФизическоеЛицо,
		|	бит_УстановленныеВизы.ДобавленаВручную,
		|	бит_УстановленныеВизы.ДатаУстановки,
		|	бит_УстановленныеВизы.КодСортировки,
		|	бит_УстановленныеВизы.Должность,
		|	бит_УстановленныеВизы.Комментарий,
		|	бит_УстановленныеВизы.Статус,
		|	бит_УстановленныеВизы.Решение,
		|	бит_УстановленныеВизы.Маршрут,
		|	бит_УстановленныеВизы.Алгоритм,
		|	бит_УстановленныеВизы.ТочкаАлгоритма,
		|	бит_УстановленныеВизы.ДатаКрайняя,
		|	бит_УстановленныеВизы.ВремяНаУстановку
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|ГДЕ
		|	(бит_УстановленныеВизы.ФизическоеЛицо = &ФизическоеЛицо
		//	                      |			ИЛИ бит_УстановленныеВизы.Виза = ЗНАЧЕНИЕ(Справочник.бит_Визы.бит_БК_Бюджетодержатель))
		|			ИЛИ бит_УстановленныеВизы.Пользователь = &ФизическоеЛицо)
		|	И бит_УстановленныеВизы.Объект = &Объект");
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыСеанса.бит_БК_ТекущийИнициатор);
		
		Запрос.УстановитьПараметр("Объект", Ссылка);
		Результат = Запрос.Выполнить();
		
		Выборка =  Результат.Выбрать();
		
		Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();	
		
		Если Результат.Пустой() Тогда
			
			Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();					
			Запись.ДобавленаВручную = Истина;
			Запись.Виза = Справочники.бит_Визы.бит_БК_Бюджетодержатель;
			Запись.ИД               = Строка(Новый УникальныйИдентификатор);
			Запись.КодСортировки 	= -1;
			Запись.ДатаУстановки = ТекущаяДатаСеанса();
			Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано;
			Запись.Пользователь = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
			Запись.Объект = Ссылка;
			Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
			Запись.Записать();
			
		КонецЕсли;	
		
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();			
			ЗаполнитьЗначенияСвойств(Запись,Выборка);
			Запись.ДатаУстановки = ТекущаяДатаСеанса();
			Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано;
			Запись.Пользователь = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
			Запись.Объект = Ссылка;
			Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
			Запись.Записать();
			
		КонецЦикла;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
		Возврат;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)
	КонецЕсли;  
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-10 (#2873)
	//+СБ ПИскунова #2691
	Запрос = Новый Запрос();
	Запрос.Текст = 
	    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	бит_НазначенныеЗаместители.Состояние КАК Состояние,
	    |	ВЫБОР
	    |		КОГДА бит_НазначенныеЗаместители.Виза ССЫЛКА Справочник.бит_Визы
	    |			ТОГДА бит_НазначенныеЗаместители.Виза
	    |		ИНАЧЕ бит_ГруппыВизВизыГруппы.Виза
	    |	КОНЕЦ КАК Виза,
	    |	бит_НазначенныеЗаместители.Заместитель КАК Заместитель,
	    |	бит_НазначенныеЗаместители.ДатаНачала КАК ДатаНачала,
	    |	бит_НазначенныеЗаместители.ДатаОкончания КАК ДатаОкончания,
	    |	бит_НазначенныеЗаместители.Пользователь КАК Пользователь,
	    |	бит_БК_Инициаторы.Ссылка КАК Инициатор
	    |ПОМЕСТИТЬ ВТ_ЗаместителиИВизы
	    |ИЗ
	    |	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
	    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	    |		ПО бит_НазначенныеЗаместители.Виза = бит_ГруппыВизВизыГруппы.Ссылка
	    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	    |		ПО бит_НазначенныеЗаместители.Заместитель = бит_БК_Инициаторы.Пользователь
	    |ГДЕ
	    |	бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен)
	    |	И бит_НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	    |	И бит_НазначенныеЗаместители.ДатаНачала <= &ДатаДок
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	бит_УстановленныеВизы.Виза,
	    |	бит_УстановленныеВизы.ФизическоеЛицо,
	    |	бит_УстановленныеВизы.Объект,
	    |	бит_УстановленныеВизы.Решение,
	    |	бит_УстановленныеВизы.КодСортировки
	    |ПОМЕСТИТЬ ВТ_Визы
	    |ИЗ
	    |	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	    |ГДЕ
	    |	(бит_УстановленныеВизы.ФизическоеЛицо = &ФизическоеЛицо
	    |			ИЛИ бит_УстановленныеВизы.Пользователь = &ФизическоеЛицо)
	    |	И бит_УстановленныеВизы.Объект = &Объект
	    |
	    |ОБЪЕДИНИТЬ ВСЕ
	    |
	    |ВЫБРАТЬ
	    |	ВТ_ЗаместителиИВизы.Виза,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
		//Т.к. далее анализируются записи с отбором по визе и исходному инициатору по построенному маршруту
		//|	ВТ_ЗаместителиИВизы.Инициатор,
		//Заменено на:
		|	бит_УстановленныеВизы.ФизическоеЛицо,
		|	бит_УстановленныеВизы.Объект,
	    |	бит_УстановленныеВизы.Решение,
	    |	бит_УстановленныеВизы.КодСортировки
	    |ИЗ
	    |	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
	    |		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-13 (#2998)
		|		И (ВЫРАЗИТЬ(бит_УстановленныеВизы.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь = ВТ_ЗаместителиИВизы.Пользователь)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-13 (#2998)
	    |ГДЕ
	    |	(ВТ_ЗаместителиИВизы.Инициатор = &ФизическоеЛицо
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-04 (#2971)
		|			ИЛИ ВТ_ЗаместителиИВизы.Заместитель = &Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-04 (#2971)
	    |			ИЛИ ВТ_ЗаместителиИВизы.Заместитель = &ФизическоеЛицо)
	    |	И бит_УстановленныеВизы.Объект = &Объект
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-14 (#2980)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ЗаместителиИВизы.Виза,	
		|	бит_УстановленныеВизы.ФизическоеЛицо,		
		|	бит_УстановленныеВизы.Объект,
		|	бит_УстановленныеВизы.Решение,
		|	бит_УстановленныеВизы.КодСортировки
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиЗаместителей
		|			ПО ВТ_ЗаместителиИВизы.Заместитель = ВТ_ЗаместителиЗаместителей.Пользователь
		|				И ВТ_ЗаместителиИВизы.Виза = ВТ_ЗаместителиЗаместителей.Виза
		|		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-13 (#2998)
		//|			И бит_УстановленныеВизы.ФизическоеЛицо.Пользователь = ВТ_ЗаместителиИВизы.Пользователь
		//Заменено на:
		|			И ВЫРАЗИТЬ(бит_УстановленныеВизы.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь = ВТ_ЗаместителиИВизы.Пользователь		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-13 (#2998)
		|			И (бит_УстановленныеВизы.Объект = &Объект)
		|			И (бит_УстановленныеВизы.Пользователь = ВТ_ЗаместителиИВизы.Инициатор.Пользователь
		|				ИЛИ бит_УстановленныеВизы.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|ГДЕ
		|	(ВТ_ЗаместителиЗаместителей.Инициатор = &ФизическоеЛицо
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-04 (#2971)
		|			ИЛИ ВТ_ЗаместителиЗаместителей.Заместитель = &Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-04 (#2971)
		|			ИЛИ ВТ_ЗаместителиЗаместителей.Заместитель = &ФизическоеЛицо)
		|	И бит_УстановленныеВизы.Объект = &Объект                     
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-14 (#2980)
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	    |	ВТ_Визы.Виза,
	    |	ВТ_Визы.ФизическоеЛицо,
	    |	ВТ_Визы.Объект,
	    |	ВТ_Визы.Решение,
	    |	ВТ_Визы.КодСортировки,
	    |	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.ВидСобытия,
	    |	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Пользователь
	    |ИЗ
	    |	ВТ_Визы КАК ВТ_Визы
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений.СрезПоследних(, Объект = &Объект) КАК бит_фн_РегистрацияСобытийОповещенийСрезПоследних
	    |		ПО ВТ_Визы.Виза = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Виза
	    |			И ВТ_Визы.ФизическоеЛицо.Пользователь = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Пользователь
	    |ГДЕ
	    |	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза)
	    |	И ВТ_Визы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
		|ИТОГИ ПО
		|	ФизическоеЛицо";
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)
		
	Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-13 (#2873)
	//Запрос.УстановитьПараметр("ДатаДок", Ссылка.Дата);
	 //Заменено на:
	Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-13 (#2873)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-04 (#2971)
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-04 (#2971)
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Результат = Запрос.Выполнить();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
	//Выборка =  Результат.Выбрать();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)
	
	//Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();	
	
	//Если Результат.Пустой() Тогда
	//	
	//	Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();					
	//	Запись.ДобавленаВручную = Истина;
	//	Запись.Виза = Справочники.бит_Визы.бит_БК_Бюджетодержатель;
	//	Запись.ИД               = Строка(Новый УникальныйИдентификатор);
	//	Запись.КодСортировки 	= -1;
	//	Запись.ДатаУстановки = ТекущаяДатаСеанса();
	//	Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано;
	//	//+СБ Пискунова 20.02.2017 #2691
	//	//Запись.Пользователь = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
	//	Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//	//-СБ Пискунова 20.02.2017 #2691
	//	Запись.Объект = Ссылка;
	//	Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
	//	Запись.Записать();
	//	
	//КонецЕсли;	
	
	//+СБ Пискунова 20.02.2017 #2691 (Изменен механизм установки виз для кнопки "Согласовать")
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Объект",Ссылка);
	//СтруктураОтбор.Вставить("Инициатор",ПараметрыСеанса.бит_БК_ТекущийИнициатор);

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыборкаИнициаторы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИнициаторы.Следующий() Цикл 
		//СтруктураОтбор.Вставить("Инициатор", ВыборкаИнициаторы.ФизическоеЛицо);
		Выборка = ВыборкаИнициаторы.Выбрать();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)
	
	СписокВизПользователя = Новый  СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокВизПользователя.Добавить(Выборка.Виза);	
		
		//УстановитьВизы(СтруктураОтбор
		//              ,ТекущийПользователь
		//			  ,ДатаУстановки
		//			  ,СписокВизПользователя
		//			  ,Безусловно = Ложь
		//			  ,Решение    = Неопределено)
		
		//Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();			
		//ЗаполнитьЗначенияСвойств(Запись,Выборка);
		//Запись.ДатаУстановки = ТекущаяДатаСеанса();
		//Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано; 			
		////Запись.Пользователь = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
		//Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		////-СБ Пискунова 20.02.2017 #2691
		
		//Запись.Объект = Ссылка;
		//Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
		//Запись.Записать();
		
	КонецЦикла;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
	//бит_Визирование.СБ_УстановитьВизы(СтруктураОтбор,ПараметрыСеанса.ТекущийПользователь, ТекущаяДатаСеанса(),СписокВизПользователя,Ложь,Справочники.бит_ВидыРешенийСогласования.Согласовано,ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	//Заменено на:
	бит_Визирование.СБ_УстановитьВизы(СтруктураОтбор, ПараметрыСеанса.ТекущийПользователь, ТекущаяДатаСеанса(), СписокВизПользователя, Ложь, ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Согласовано"),ВыборкаИнициаторы.ФизическоеЛицо);
	КонецЦикла;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)
	//-СБ Пискунова 20.02.2017 #2691

	// - БИТ AMerkulov 2014-11-12	
	
	// + БИТ AMerkulov 2015-05-25 
	//Если Запись.Виза <> Справочники.бит_Визы.бит_БК_Эксперт Тогда
	//	бит_ПроверитьПоБюджету();	
	//КонецЕсли;
	// - БИТ AMerkulov 2015-05-25  	
	
	
КонецПроцедуры	

Процедура ПровестиНаСервере() Экспорт
	
	ДатаИзмененияСтатуса = ТекущаяДата();
	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);	
	
	//// + БИТ AMerkulov 2015-01-12		
	//Если БДДС.Итог("бит_БК_СуммаЗаРамкамиБюджетаСНДС") = 0 И ОК_ОЦР = ПараметрыСеанса.бит_БК_ТекущийИнициатор Тогда
	//// - БИТ AMerkulov 2015-01-12			
	//	ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
	//	,Перечисления.бит_ВидыСтатусовОбъектов.Статус
	//	,Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована
	//	,мТекущийСтатус		
	//	,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
	//	,ДатаИзмененияСтатуса);
	//	
	//	Если ДействиеВыполнено Тогда
	//		мТекущийСтатус 		  = Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована;
	//		мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
	//	КонецЕсли; 	
	//КонецЕсли;
	
	
	
КонецПроцедуры

// - БИТ AMerkulov 2014-09-10 

// + БИТ AMerkulov 2015-04-16 
Процедура Отклонить()Экспорт
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-11 (#2873)
	//Для поддержки старого алгоритма
	Если НЕ бит_БК_Общий.РеквизитыДляМуршрутовВидимы(Ссылка) Тогда 
		//Раскомментировал
		//ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
		ЭтотОбъект.БИТ_СогласованоОЦР = Ложь; //БИТ АКриштопов 25.04.2016 ++ 2240
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	бит_УстановленныеВизы.Объект,
		|	бит_УстановленныеВизы.Виза,
		|	бит_УстановленныеВизы.ИД,
		|	бит_УстановленныеВизы.Пользователь,
		|	бит_УстановленныеВизы.ФизическоеЛицо,
		|	бит_УстановленныеВизы.ДобавленаВручную,
		|	бит_УстановленныеВизы.ДатаУстановки,
		|	бит_УстановленныеВизы.КодСортировки,
		|	бит_УстановленныеВизы.Должность,
		|	бит_УстановленныеВизы.Комментарий,
		|	бит_УстановленныеВизы.Статус,
		|	бит_УстановленныеВизы.Решение,
		|	бит_УстановленныеВизы.Маршрут,
		|	бит_УстановленныеВизы.Алгоритм,
		|	бит_УстановленныеВизы.ТочкаАлгоритма,
		|	бит_УстановленныеВизы.ДатаКрайняя,
		|	бит_УстановленныеВизы.ВремяНаУстановку
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|ГДЕ
		|	(бит_УстановленныеВизы.ФизическоеЛицо = &ФизическоеЛицо
		|			ИЛИ бит_УстановленныеВизы.Пользователь = &ФизическоеЛицо)
		|	И бит_УстановленныеВизы.Объект = &Объект");
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыСеанса.бит_БК_ТекущийИнициатор);
		
		Запрос.УстановитьПараметр("Объект", Ссылка);
		Результат = Запрос.Выполнить();
		
		Выборка =  Результат.Выбрать();
		
		Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();	
		
		Если Результат.Пустой() Тогда
			
			Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();					
			Запись.ДобавленаВручную = Истина;
			Запись.Виза = Справочники.бит_Визы.бит_БК_Бюджетодержатель;
			Запись.ИД               = Строка(Новый УникальныйИдентификатор);
			Запись.КодСортировки 	= -1;
			Запись.ДатаУстановки = ТекущаяДатаСеанса();
			Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Отклонено;
			Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Запись.Объект = Ссылка;
			Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
			Запись.Записать();
			
		КонецЕсли;	
		
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();			
			ЗаполнитьЗначенияСвойств(Запись,Выборка);
			Запись.ДатаУстановки = ТекущаяДатаСеанса();
			Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Отклонено;
			Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Запись.Объект = Ссылка;
			Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
			Запись.Записать();
			
		КонецЦикла;
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-11 (#2873)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	бит_НазначенныеЗаместители.Состояние КАК Состояние,
	    |	ВЫБОР
	    |		КОГДА бит_НазначенныеЗаместители.Виза ССЫЛКА Справочник.бит_Визы
	    |			ТОГДА бит_НазначенныеЗаместители.Виза
	    |		ИНАЧЕ бит_ГруппыВизВизыГруппы.Виза
	    |	КОНЕЦ КАК Виза,
	    |	бит_НазначенныеЗаместители.Заместитель КАК Заместитель,
	    |	бит_НазначенныеЗаместители.ДатаНачала КАК ДатаНачала,
	    |	бит_НазначенныеЗаместители.ДатаОкончания КАК ДатаОкончания,
	    |	бит_НазначенныеЗаместители.Пользователь КАК Пользователь,
	    |	бит_БК_Инициаторы.Ссылка КАК Инициатор
	    |ПОМЕСТИТЬ ВТ_ЗаместителиИВизы
	    |ИЗ
	    |	РегистрСведений.бит_НазначенныеЗаместители КАК бит_НазначенныеЗаместители
	    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ГруппыВиз.ВизыГруппы КАК бит_ГруппыВизВизыГруппы
	    |		ПО бит_НазначенныеЗаместители.Виза = бит_ГруппыВизВизыГруппы.Ссылка
	    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	    |		ПО бит_НазначенныеЗаместители.Заместитель = бит_БК_Инициаторы.Пользователь
	    |ГДЕ
	    |	бит_НазначенныеЗаместители.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_СостоянияЗаместителей.Назначен)
	    |	И бит_НазначенныеЗаместители.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	    |	И бит_НазначенныеЗаместители.ДатаНачала <= &ДатаДок
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	бит_УстановленныеВизы.Виза,
	    |	бит_УстановленныеВизы.ФизическоеЛицо,
	    |	бит_УстановленныеВизы.Объект,
	    |	бит_УстановленныеВизы.Решение,
	    |	бит_УстановленныеВизы.КодСортировки
	    |ПОМЕСТИТЬ ВТ_Визы
	    |ИЗ
	    |	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	    |ГДЕ
	    |	(бит_УстановленныеВизы.ФизическоеЛицо = &ФизическоеЛицо
	    |			ИЛИ бит_УстановленныеВизы.Пользователь = &ФизическоеЛицо)
	    |	И бит_УстановленныеВизы.Объект = &Объект
	    |
	    |ОБЪЕДИНИТЬ ВСЕ
	    |
	    |ВЫБРАТЬ
	    |	ВТ_ЗаместителиИВизы.Виза,
	    //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
		//|	ВТ_ЗаместителиИВизы.Инициатор,
		//Заменено на:
		|	бит_УстановленныеВизы.ФизическоеЛицо,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)		
	    |	бит_УстановленныеВизы.Объект,
	    |	бит_УстановленныеВизы.Решение,
	    |	бит_УстановленныеВизы.КодСортировки
	    |ИЗ
	    |	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
	    |		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-13 (#2998)
		|		И (ВЫРАЗИТЬ(бит_УстановленныеВизы.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь = ВТ_ЗаместителиИВизы.Пользователь)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-13 (#2998)
	    |ГДЕ
	    |	(ВТ_ЗаместителиИВизы.Инициатор = &ФизическоеЛицо
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-04 (#2971)
		|			ИЛИ ВТ_ЗаместителиИВизы.Заместитель = &Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-04 (#2971)
	    |			ИЛИ ВТ_ЗаместителиИВизы.Заместитель = &ФизическоеЛицо)
	    |	И бит_УстановленныеВизы.Объект = &Объект
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-14 (#2980)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ЗаместителиИВизы.Виза,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
		//Т.к. далее анализируются записи с отбором по визе и исходному инициатору по построенному маршруту
		//|	ВТ_ЗаместителиИВизы.Инициатор,
		//Заменено на:
		|	бит_УстановленныеВизы.ФизическоеЛицо,
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)		
		|	бит_УстановленныеВизы.Объект,
		|	бит_УстановленныеВизы.Решение,
		|	бит_УстановленныеВизы.КодСортировки
		|ИЗ
		|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиИВизы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаместителиИВизы КАК ВТ_ЗаместителиЗаместителей
		|			ПО ВТ_ЗаместителиИВизы.Заместитель = ВТ_ЗаместителиЗаместителей.Пользователь
		|				И ВТ_ЗаместителиИВизы.Виза = ВТ_ЗаместителиЗаместителей.Виза
		|		ПО бит_УстановленныеВизы.Виза = ВТ_ЗаместителиИВизы.Виза
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-13 (#2998)
		//|			И бит_УстановленныеВизы.ФизическоеЛицо.Пользователь = ВТ_ЗаместителиИВизы.Пользователь
		//Заменено на:
		|			И ВЫРАЗИТЬ(бит_УстановленныеВизы.ФизическоеЛицо КАК Справочник.бит_БК_Инициаторы).Пользователь = ВТ_ЗаместителиИВизы.Пользователь		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-13 (#2998)
		|			И (бит_УстановленныеВизы.Объект = &Объект)
		|			И (бит_УстановленныеВизы.Пользователь = ВТ_ЗаместителиИВизы.Инициатор.Пользователь
		|				ИЛИ бит_УстановленныеВизы.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|ГДЕ
		|	(ВТ_ЗаместителиЗаместителей.Инициатор = &ФизическоеЛицо
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-04 (#2971)
		|			ИЛИ ВТ_ЗаместителиЗаместителей.Заместитель = &Пользователь
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-04 (#2971)
		|			ИЛИ ВТ_ЗаместителиЗаместителей.Заместитель = &ФизическоеЛицо)
		|	И бит_УстановленныеВизы.Объект = &Объект  
		 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-14 (#2980)
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	    |	ВТ_Визы.Виза,
	    |	ВТ_Визы.ФизическоеЛицо,
	    |	ВТ_Визы.Объект,
	    |	ВТ_Визы.Решение,
	    |	ВТ_Визы.КодСортировки,
	    |	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.ВидСобытия,
	    |	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Пользователь
	    |ИЗ
	    |	ВТ_Визы КАК ВТ_Визы
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_фн_РегистрацияСобытийОповещений.СрезПоследних(, Объект = &Объект) КАК бит_фн_РегистрацияСобытийОповещенийСрезПоследних
	    |		ПО ВТ_Визы.Виза = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Виза
	    |			И ВТ_Визы.ФизическоеЛицо.Пользователь = бит_фн_РегистрацияСобытийОповещенийСрезПоследних.Пользователь
	    |ГДЕ
	    |	бит_фн_РегистрацияСобытийОповещенийСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.бит_фн_ВидыСобытийОповещений.ДоступнаВиза)
	    |	И ВТ_Визы.Решение = ЗНАЧЕНИЕ(Справочник.бит_ВидыРешенийСогласования.)
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
		|ИТОГИ ПО
		|	ФизическоеЛицо";
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)
	Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-04 (#2971)
	//Запрос.УстановитьПараметр("ДатаДок", Ссылка.Дата);
	//Заменено на:
	Запрос.УстановитьПараметр("ДатаДок"		, ТекущаяДата());
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-04 (#2971)
	
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Результат = Запрос.Выполнить();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
	//Выборка =  Результат.Выбрать();
	
	//Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)

	
	//Если Результат.Пустой() Тогда
	//	
	//	Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();					
	//	Запись.ДобавленаВручную = Истина;
	//	Запись.Виза = Справочники.бит_Визы.бит_БК_Бюджетодержатель;
	//	Запись.ИД               = Строка(Новый УникальныйИдентификатор);
	//	Запись.КодСортировки 	= -1;
	//	Запись.ДатаУстановки = ТекущаяДатаСеанса();
	//	Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано;
	//	//+СБ Пискунова 20.02.2017 #2691
	//	//Запись.Пользователь = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
	//	Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	//	//-СБ Пискунова 20.02.2017 #2691
	//	Запись.Объект = Ссылка;
	//	Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
	//	Запись.Записать();
	//	
	//КонецЕсли;	
	
	//+СБ Пискунова 20.02.2017 #2691 (Изменен механизм установки виз для кнопки "Согласовать")
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Объект",Ссылка);
	//СтруктураОтбор.Вставить("Инициатор",ПараметрыСеанса.бит_БК_ТекущийИнициатор);

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ВыборкаИнициаторы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИнициаторы.Следующий() Цикл 
		//СтруктураОтбор.Вставить("Инициатор", ВыборкаИнициаторы.ФизическоеЛицо);
		Выборка = ВыборкаИнициаторы.Выбрать();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)

	СписокВизПользователя = Новый  СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокВизПользователя.Добавить(Выборка.Виза);	
		
		//УстановитьВизы(СтруктураОтбор
		//              ,ТекущийПользователь
		//			  ,ДатаУстановки
		//			  ,СписокВизПользователя
		//			  ,Безусловно = Ложь
		//			  ,Решение    = Неопределено)
		
		//Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();			
		//ЗаполнитьЗначенияСвойств(Запись,Выборка);
		//Запись.ДатаУстановки = ТекущаяДатаСеанса();
		//Запись.Решение = Справочники.бит_ВидыРешенийСогласования.Согласовано; 			
		////Запись.Пользователь = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
		//Запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		////-СБ Пискунова 20.02.2017 #2691
		
		//Запись.Объект = Ссылка;
		//Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
		//Запись.Записать();
		
	КонецЦикла;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-15 (#2980)
	//бит_Визирование.СБ_УстановитьВизы(СтруктураОтбор,ПараметрыСеанса.ТекущийПользователь, ТекущаяДатаСеанса(),СписокВизПользователя,Ложь,Справочники.бит_ВидыРешенийСогласования.Отклонено, ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	//Заменено на:
	бит_Визирование.СБ_УстановитьВизы(СтруктураОтбор, ПараметрыСеанса.ТекущийПользователь, ТекущаяДатаСеанса(), СписокВизПользователя, Ложь, ПредопределенноеЗначение("Справочник.бит_ВидыРешенийСогласования.Отклонено"),ВыборкаИнициаторы.ФизическоеЛицо);
	КонецЦикла;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-15 (#2980)
	//-СБ Пискунова 20.02.2017 #2691
	    	
КонецПроцедуры	

Процедура ОтменитьПроведениеНаСервере() Экспорт
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
КонецПроцедуры

// - БИТ AMerkulov 2015-04-16 

Процедура ЗаполнитьДанныеБюджета(СтрокиДляЗаполнения, ИмяКоманды) Экспорт 
	// Получим данные из документа.
	//СпособИзмерение	 	 = мОбъектДляЗаполнения.мСпособИзмерение;
	
	//МенеджерПеречисления = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода;
	
	//МассивИмен_ПоУмолчанию 				= СпособИзмерение[МенеджерПеречисления.ПоУмолчанию];
	//МассивИмен_ПоУмолчаниюРедактировать = СпособИзмерение[МенеджерПеречисления.ПоУмолчаниюРедактирование];
	
	НастройкаФормыВводаБюджета = НастройкаФормы;
	Учет_Сумма                 = НастройкаФормыВводаБюджета.Учет_Сумма;
	Учет_Количество            = НастройкаФормыВводаБюджета.Учет_Количество;
	
	// Получим имя измерения по которому осуществляется разворот.
	Если ИмяКоманды = "бит_ЗагрузитьОперационныйБюджет" ИЛИ ИмяКоманды = "бит_ЗагрузитьИнвестиционныйБюджет" Тогда 
		СпособРазворачивать		  = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать;
	Иначе 
		//СпособРазворачивать		  = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать;
	КонецЕсли;
	//ИмяИзмеренияРазворачивать = СпособИзмерение[СпособРазворачивать][0];
	
	ТекИдБДДС = бит_Бюджетирование.ОпределитьТекущийИД(ЭтотОбъект.БДДС,"ИД");
	Для Каждого ТекСтрока Из СтрокиДляЗаполнения Цикл
		
		НоваяСтрока = БДДС.Добавить();
		
		// Заполним значения новой строки данными оборотов по бюджету.
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		//БИТ АКриштопов 29042016 ++ Не во всех данных заполнения есть ставка НДС
		Попытка
			НоваяСтрока.бит_СтавкаНДС = ТекСтрока.СтавкаНДС;
		Исключение
			//+Сенин С.В. 23.08.16 №2618
			НоваяСтрока.бит_СтавкаНДС = НоваяСтрока.СтатьяОборотов.СтавкаНДС;
			//+Сенин С.В. 23.08.16 №2618
		КонецПопытки;
		//БИТ АКриштопов 29042016 --
		// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
		НоваяСтрока.бит_СтавкаНДС = ?(НоваяСтрока.бит_СтавкаНДС = Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.ПустаяСсылка(), НоваяСтрока.бит_СтавкаНДС);
		// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
				
		НоваяСтрока.Период = ТекСтрока.Период;
				
		//ОК+ Аверьянова 28.11.17 #AT-1614049 - исправление ошибки заполнения периода при загрузки опер.заявки из Эксель
		НоваяСтрока.ПредставлениеПериода =бит_Бюджетирование.СформироватьПредставлениеПериода(ТекСтрока.Период, Перечисления.бит_ПериодичностьПланирования.Месяц);
		//ОК-
		// Установим ИД для новой строки.
		НоваяСтрока.ИД = ТекИдБДДС;
		ТекИдБДДС = ТекИдБДДС + 1;
		
		// Установим типы значений доп. измерений.
		бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(НоваяСтрока, мИзмеренияДоп, мНастройкиИзмерений);
		
		//// Заполним реквизиты по умолчанию.
		//ЗаполнитьРеквизитыПоМассивуИмен(МассивИмен_ПоУмолчанию, НоваяСтрока, "БДДС");
		//ЗаполнитьРеквизитыПоМассивуИмен(МассивИмен_ПоУмолчаниюРедактировать, НоваяСтрока, "БДДС");
		
		//НоваяСтрока.Количество = ТекСтрока.КоличествоДляЗаполнения;
		Если ИмяКоманды = "бит_ЗагрузитьЗаявку_операционный" Тогда 
			НоваяСтрока.бит_БК_СуммаВВалютеБезНДС	   = ТекСтрока.СуммаЗаполнения;
		ИначеЕсли ИмяКоманды = "бит_ЗагрузитьЗаявку_Инвестиционный" Тогда 
			//НоваяСтрока.бит_БК_СуммаВВалютеСНДС	   = ТекСтрока.СуммаЗаполнения;
			НоваяСтрока.Сумма	   = ТекСтрока.СуммаЗаполнения;
			//ОК Калинин М. 221012 возьмем курс из файла, иначе "окончательно теряем первоначальную сумму в валюте, а это важно инициатору."
			Если ТекСтрока.Колонка10<>0 тогда					
				НоваяСтрока.бит_БК_Курс =ТекСтрока.Колонка8  /ТекСтрока.Колонка10;
				НоваяСтрока.бит_БК_Кратность =1;
			иначе	
				СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий,ТекСтрока.бит_БК_ВалютаДоговора,Дата);			
				НоваяСтрока.бит_БК_Курс      = СтрКурса.Курс;
				НоваяСтрока.бит_БК_Кратность = СтрКурса.Кратность;
			конецесли;	
			//ОК Калинин М. 221012
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-09 (#2879)
			НоваяСтрока.СБ_СуммаПредоплаты = (НоваяСтрока.бит_БК_СуммаБезНДС*НоваяСтрока.бит_БК_СуммаПредоплаты)/100;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-09 (#2879)
		ИначеЕсли ИмяКоманды = "бит_ЗагрузитьЗаявку_Строительство" Тогда 
			//1c-izhtc А.В. Пушин (В случае если Валюта пустая ссылка - заменим на руб
			Если НоваяСтрока.бит_БК_ВалютаДоговора = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
				НоваяСтрока.бит_БК_ВалютаДоговора = Константы.ВалютаРегламентированногоУчета.Получить(); 
				НоваяСтрока.бит_БК_Курс      = 1;
				НоваяСтрока.бит_БК_Кратность = 1;
			КонецЕсли; 
			//1c-izhtc А.В. Пушин )
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-09 (#2879)
			НоваяСтрока.СБ_СуммаПредоплаты = (НоваяСтрока.бит_БК_СуммаБезНДС*НоваяСтрока.бит_БК_СуммаПредоплаты)/100;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-09 (#2879)
		ИначеЕсли ИмяКоманды = "бит_ЗагрузитьОперационныйБюджет" ИЛИ ИмяКоманды = "бит_ЗагрузитьИнвестиционныйБюджет" Тогда 
			НоваяСтрока.бит_БК_СуммаБезНДС = ТекСтрока.Сумма;
			//1c-izhtc spawn (
			// Ставка НДС больше не используется в ТЧ БДДС
			//НоваяСтрока.СтавкаНДС  = НоваяСтрока.СтатьяОборотов.СтавкаНДС;
			//1c-izhtc spawn )
			//+Сенин С.В. 23.08.16 №2618
			Если НоваяСтрока.бит_БК_ВалютаДоговора = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
				НоваяСтрока.бит_БК_ВалютаДоговора = Константы.ВалютаРегламентированногоУчета.Получить(); 
				НоваяСтрока.бит_БК_Курс      = 1;
				НоваяСтрока.бит_БК_Кратность = 1;
			КонецЕсли; 
			//-Сенин С.В. 23.08.16 №2618
		КонецЕсли;
		
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) тогда
		//	НоваяСтрока.СтавкаНДС  = НоваяСтрока.СтатьяОборотов.СтавкаНДС;
		//КонецЕсли;
		//1c-izhtc spawn )
		
		//Начало_бит_БК_Магомедов_23.11.2011 
		// Рассчитаем сумму НДС в строке.
		//бит_ОбщегоНазначения.РассчитатьСуммуНДСВСтрокеСУказаниемЕдиницыИзмерения(НоваяСтрока, ЕдиницаИзмеренияСумм);
		Если ИмяКоманды = "бит_ЗагрузитьОперационныйБюджет" ИЛИ ИмяКоманды = "бит_ЗагрузитьИнвестиционныйБюджет" Тогда 
			//НоваяСтрока.НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.Сумма, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			//НоваяСтрока.Сумма = НоваяСтрока.бит_БК_СуммаБезНДС + НоваяСтрока.НДС;
		КонецЕсли;
		// Рассчитаем Суммы в строке
		Если ИмяКоманды = "бит_ЗагрузитьЗаявку_операционный" Тогда 
			ПересчитатьСуммы("Валюта", НоваяСтрока);
		ИначеЕсли ИмяКоманды = "бит_ЗагрузитьЗаявку_Инвестиционный" Тогда 
			//ПересчитатьСуммы("Валюта", НоваяСтрока);
			ПересчитатьСуммы("СуммаСНДС", НоваяСтрока);
		ИначеЕсли ИмяКоманды = "бит_ЗагрузитьЗаявку_Строительство" Тогда 
			Если ЗначениеЗаполнено(ТекСтрока.СуммаЗаполненияВВалюте) Тогда 
				НоваяСтрока.бит_БК_СуммаВВалютеСНДС	   = ТекСтрока.СуммаЗаполненияВВалюте;
				ПересчитатьСуммы("Валюта", НоваяСтрока);
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.СуммаЗаполнения) Тогда
				НоваяСтрока.Сумма	   = ТекСтрока.СуммаЗаполнения;
				ПересчитатьСуммы("СуммаСНДС", НоваяСтрока);
			КонецЕсли;
		ИначеЕсли ИмяКоманды = "бит_ЗагрузитьОперационныйБюджет" ИЛИ ИмяКоманды = "бит_ЗагрузитьИнвестиционныйБюджет" Тогда 
			ПересчитатьСуммы("СуммаБезНДС", НоваяСтрока);
		КонецЕсли;
		//Конец_бит_БК_Магомедов_23.11.2011 
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-04-22 (#2996)
		Если ИмяКоманды = "бит_ЗагрузитьЗаявку_ПоШаблонуExcel" Тогда 
			
			//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
			//
			//НоваяСтрока.бит_БК_ВалютаДоговора	 = бит_БК_ВалютаДокумента;
			//НоваяСтрока.бит_БК_Курс   			 = бит_БК_КурсДокумента;
			//НоваяСтрока.бит_БК_Кратность		 = бит_БК_КратностьДокумента;	
			//
			//Если НоваяСтрока.бит_БК_ЦенаВВалютеБезНДС <> 0 Тогда 
			//	ПересчитатьСуммы("ЦенаВВалютеБезНДС", НоваяСтрока);
			//ИначеЕсли НоваяСтрока.бит_БК_ЦенаВВалютеСНДС <> 0 Тогда 
			//	ПересчитатьСуммы("ЦенаВВалютеСНДС", НоваяСтрока);
			//ИначеЕсли НоваяСтрока.Количество <> 0 И НоваяСтрока.бит_БК_СуммаВВалютеБезНДС <> 0 Тогда 
			//	ПересчитатьСуммы("Количество", НоваяСтрока);
			//КонецЕсли;
			//
			ПересчитатьСуммыПриИзменениибит_БК_СуммаВВалютеБезНДС(НоваяСтрока);
			//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
			
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-04-22 (#2996)
		
		// Выполним проверку возможности добавления данных в документ.
		ОтказИзмерение  = Ложь;
		ОтказСумма 		= Ложь;
		ОтказКоличество = Ложь;
		
		// Выполним проверку значения измерения.
		//мФормаОбъекта.ПолучитьТекущуюСтрокуДереваСПроверкойИзмерения(НоваяСтрока
		//															 ,ИмяИзмеренияРазворачивать
		//															 ,ОтказИзмерение
		//															 ,Ложь
		//															 ,Ложь);
		
		// Если строка дерева данных с текущим значением измерения найдена, тогда
		//////Если НЕ мФормаОбъекта = Неопределено Тогда 
		//////	Если Не ОтказИзмерение Тогда
		//////		
		//////		Если Учет_Сумма Тогда
		//////			мФормаОбъекта.ВосстановитьЗначениеВКолонке(, НоваяСтрока, "С", НоваяСтрока.Сумма, ОтказСумма, Ложь);
		//////		КонецЕсли; 
		//////		
		//////		Если Учет_Количество Тогда
		//////			мФормаОбъекта.ВосстановитьЗначениеВКолонке(, НоваяСтрока, "К", НоваяСтрока.Количество, ОтказКоличество, Ложь);
		//////		КонецЕсли;
		//////		
		//////	КонецЕсли;
		//////КонецЕсли;	
		// Если отказ, тогда
		//Если ОтказИзмерение Или ОтказСумма Или ОтказКоличество Тогда
		//	
		//	// Удалим строку.
		//	ТЧ_БДДС.Удалить(НоваяСтрока);
		//	
		//	Если ОтказИзмерение Тогда
		//		
		//		ТекстСообщения = "В строке данных №" + ТекСтрока.НомерСтроки
		//						 + " значение измерения " + ИмяИзмеренияРазворачивать
		//						 + " не соответствует настройкам, данные не добавлены в документ!";
		//						 
		//	Иначе
		//		ТекстСообщения = "В строке данных №" + ТекСтрока.НомерСтроки
		//						 + " период " + Формат(ТекСтрока.ПериодДляЗаполнения, "ДФ=dd.MM.yyyy")
		//						 + " не входит в интервал планирования, данные не добавлены в документ!";
		//	КонецЕсли;
		//	
		//	// Сообщим пользователю.
		//	бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		//	
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// BIT AMerkulov 14-05-2015 ++
Процедура ОчиститьНомер()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_ФормаВводаБюджета.Ссылка
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|ГДЕ
	|	бит_ФормаВводаБюджета.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Результат = Запрос.Выполнить();
	
	
КонецПроцедуры


Процедура УдалитьВизу() Экспорт
	
	ЭтотОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_УстановленныеВизы.Объект,
	|	бит_УстановленныеВизы.Виза,
	|	бит_УстановленныеВизы.ИД,
	|	бит_УстановленныеВизы.Пользователь,
	|	бит_УстановленныеВизы.ФизическоеЛицо,
	|	бит_УстановленныеВизы.ДобавленаВручную,
	|	бит_УстановленныеВизы.ДатаУстановки,
	|	бит_УстановленныеВизы.КодСортировки,
	|	бит_УстановленныеВизы.Должность,
	|	бит_УстановленныеВизы.Комментарий,
	|	бит_УстановленныеВизы.Статус,
	|	бит_УстановленныеВизы.Решение,
	|	бит_УстановленныеВизы.Маршрут,
	|	бит_УстановленныеВизы.Алгоритм,
	|	бит_УстановленныеВизы.ТочкаАлгоритма,
	|	бит_УстановленныеВизы.ДатаКрайняя,
	|	бит_УстановленныеВизы.ВремяНаУстановку
	|ИЗ
	|	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|ГДЕ
	|	(бит_УстановленныеВизы.ФизическоеЛицо = &ФизическоеЛицо
	|			ИЛИ бит_УстановленныеВизы.Пользователь = &ФизическоеЛицо)
	|	И бит_УстановленныеВизы.Объект = &Объект");
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Результат = Запрос.Выполнить();
	
	Выборка =  Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.бит_УстановленныеВизы.СоздатьМенеджерЗаписи();			
		ЗаполнитьЗначенияСвойств(Запись,Выборка);
		Запись.ДатаУстановки = Неопределено;
		Запись.Решение = Неопределено;
		Запись.Пользователь = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
		Запись.Объект = Ссылка;
		Запись.ФизическоеЛицо = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
		Запись.Записать();	
	КонецЦикла;
	
	
КонецПроцедуры

//{ bit SVKushnirenko Bit 10.02.2017 #2671.дпн
Процедура ПередУдалением(Отказ)
	
	Если ЭтотОбъект.Проведен Тогда
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Запрещено удалять проведенные документы ""Форма ввода бюджета""!", ЭтотОбъект.Ссылка,, Отказ); //запрет удаления проведенного документа
	КонецЕсли;
КонецПроцедуры
//Конец_бит_БК_Магомедов_14.03.2012 
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-07 (#3393)
//Процедура ИнициироватьВизуМаршрута(МассивИнициаторов, Документ, Виза, Алгоритм, ТаблицаНабора)
//Заменено на:
//Процедура ИнициироватьВизуМаршрута(МассивИнициаторов, Документ, Виза, Алгоритм, ТаблицаНабора, СоотИнициаторВидРасхода = Неопределено)
//	
//	Если СоотИнициаторВидРасхода = Неопределено Тогда 
//		
//		СоотИнициаторВидРасхода = Новый Соответствие;
//		
//	КонецЕсли;
//	
//	МассивСтрокНабора = ТаблицаНабора.НайтиСтроки(Новый Структура("Виза",Виза));
//	
//	Если МассивСтрокНабора.Количество() >0 Тогда
//	
//		ДобавитьВПервыйЗапись = МассивСтрокНабора.Количество() >= 1;
//			
//		сч = 0;
//		Для Каждого Инициатор Из МассивИнициаторов Цикл 
//			Если ДобавитьВПервыйЗапись и сч = 0 Тогда 
//				МассивСтрокНабора[0].ФизическоеЛицо	= Инициатор; 
//				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-07 (#3393)
//				МассивСтрокНабора[0].ОК_ВидРасхода = СоотИнициаторВидРасхода.Получить(Инициатор);
//				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-07 (#3393)
//				сч =  сч+1;
//			Иначе 
//				СтруктураПараметров = Новый Структура;
//				СтруктураПараметров.Вставить("Виза",Виза);
//				СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
//				СтруктураПараметров.Вставить("ВремяНаУстановку",0);
//				СтруктураПараметров.Вставить("ОбъектСвязи", Инициатор);
//				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
//				СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
//				//СтруктураПараметров.Вставить("ДобавленаВручную",Истина);  //Точка алгоритма ОЦР
//				СтруктураПараметров.Вставить("Алгоритм",Алгоритм);
//				СтруктураПараметров.Вставить("КодСортировки",МассивСтрокНабора[0].КодСортировки);
//				СтруктураПараметров.Вставить("ТочкаАлгоритма",МассивСтрокНабора[0].ТочкаАлгоритма); 
//				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-23 (#3231)
//				СтруктураПараметров.Вставить("РасшифровкаУсловияОпределенияВизы",МассивСтрокНабора[0].ок_РасшифровкаУсловияОпределенияВизы); 
//				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-23 (#3231)
//				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-04 (#3393)
//				СтруктураПараметров.Вставить("ОК_ВидРасхода", СоотИнициаторВидРасхода.Получить(Инициатор)); 
//				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-04 (#3393)
//				
//				бит_Визирование.ДобавитьВизу(ТаблицаНабора,Документ,СтруктураПараметров);
//			КонецЕсли;
//  	
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-12 (#3393)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-15 (#3808)
Процедура СформироватьДвиженияСводнымОстаткамПоБюджету()
	
	Если БДДС.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	//Реализовал логику формирования таблицы периодов не в запросе, т.к. проще дальше поддерживать
	ТЗ_Периоды = Новый ТаблицаЗначений;
	ТЗ_Периоды.Колонки.Добавить("НачалоПериода"	, Новый ОписаниеТипов("Дата"));
	ТЗ_Периоды.Колонки.Добавить("КонецПериода"	, Новый ОписаниеТипов("Дата"));
	ТЗ_Периоды.Колонки.Добавить("Дата"			, Новый ОписаниеТипов("Дата"));
	ТЗ_Периоды.Колонки.Добавить("ВидДаты"		, Новый ОписаниеТипов("ПеречислениеСсылка.ДоступныеПериодыОтчета"));
		
	ПериодыВДокументе = БДДС.Выгрузить(,"Период");
	ПериодыВДокументе.Свернуть("Период");
	ПериодыВДокументе.Сортировать("Период ВОЗР");
	
	минПериод  = ПериодыВДокументе[0].Период;	
	максПериод = ПериодыВДокументе[ПериодыВДокументе.Количество()-1].Период;
	
	//Период полугодие минимального
	ПолугодиеМинПериода = ДобавитьМесяц(НачалоГода(минПериод), ?(Месяц(минПериод)>6, 6, 0)); 
	
	СтрокаПериоды = ТЗ_Периоды.Добавить();
	СтрокаПериоды.НачалоПериода = ПолугодиеМинПериода;
	СтрокаПериоды.КонецПериода  = КонецМесяца(ДобавитьМесяц(ПолугодиеМинПериода,5));
	СтрокаПериоды.Дата			= ПолугодиеМинПериода;
	СтрокаПериоды.ВидДаты		= ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
		
	//Период год минимального
	СтрокаПериоды = ТЗ_Периоды.Добавить();
	СтрокаПериоды.НачалоПериода = НачалоГода(ПолугодиеМинПериода);
	СтрокаПериоды.КонецПериода  = КонецГода(ПолугодиеМинПериода);
	СтрокаПериоды.Дата			= СтрокаПериоды.НачалоПериода;
	СтрокаПериоды.ВидДаты		= ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");	
	
	//Дальше по годам
	Если НачалоГода(максПериод) <> НачалоГода(минПериод) Тогда 
		ПериодДобавления = КонецГода(ПолугодиеМинПериода)+1;//Начало следующего года
		Пока ПериодДобавления<=НачалоГода(максПериод) Цикл 
			СтрокаПериоды = ТЗ_Периоды.Добавить();
			СтрокаПериоды.НачалоПериода = НачалоГода(ПериодДобавления);
			СтрокаПериоды.КонецПериода  = КонецГода(ПериодДобавления);
			СтрокаПериоды.Дата			= СтрокаПериоды.НачалоПериода;
			СтрокаПериоды.ВидДаты		= ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
			
			ПериодДобавления = ДобавитьМесяц(ПериодДобавления, 12);
			
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ_Периоды.НачалоПериода КАК НачалоПериода,
	|	ТЗ_Периоды.КонецПериода КАК КонецПериода,
	|	ТЗ_Периоды.Дата КАК Дата,
	|	ТЗ_Периоды.ВидДаты КАК ВидДаты
	|ПОМЕСТИТЬ ВТ_ПериодыДляОтбора
	|ИЗ
	|	&ТЗ_Периоды КАК ТЗ_Периоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(КонтрольБюджета_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования) КАК Сценарий,
	|	МАКСИМУМ(ВЫРАЗИТЬ(КонтролирующийСценарий_НастройкиБК.ЗначениеСсылка КАК Справочник.СценарииПланирования)) КАК СценарийКонтролирующий
	|ПОМЕСТИТЬ СценарииБКОК
	|ИЗ
	|	РегистрСведений.бит_БК_НастройкиБК КАК КонтрольБюджета_НастройкиБК
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_НастройкиБК КАК КонтролирующийСценарий_НастройкиБК
	|		ПО ((ВЫРАЗИТЬ(КонтрольБюджета_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)) = (ВЫРАЗИТЬ(КонтролирующийСценарий_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)))
	|ГДЕ
	|	КонтрольБюджета_НастройкиБК.Группа = ""Контроль бюджета""
	|	И КонтролирующийСценарий_НастройкиБК.Группа = ""Контролирующий сценарий""
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(КонтрольБюджета_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сценарий,
	|	СценарийКонтролирующий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ФормаВводаБюджетаБДДС.ЦФО КАК ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка КАК Аналитика_1,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2 КАК Аналитика_2,
	|	бит_ФормаВводаБюджетаБДДС.Период КАК Период,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС КАК СуммаИсполнение,
	|	0 КАК СуммаКонтроль,
	|	бит_ФормаВводаБюджетаБДДС.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ ТабЧасть
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ФормаВводаБюджетаБДДС.Период,
	|	бит_ФормаВводаБюджетаБДДС.СтатьяОборотов,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2,
	|	бит_ФормаВводаБюджетаБДДС.ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.Ссылка,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС,
	|	бит_ФормаВводаБюджетаБДДС.Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабЧасть.СтатьяОборотов КАК СтатьяОборотов,
	|	МАКСИМУМ(бит_БК_КонтролирующиеСтатьиОборотов.Период) КАК ПериодКС,
	|	ТабЧасть.Период КАК ИсхПериод
	|ПОМЕСТИТЬ Тч_Контр_Периоды
	|ИЗ
	|	ТабЧасть КАК ТабЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_КонтролирующиеСтатьиОборотов КАК бит_БК_КонтролирующиеСтатьиОборотов
	|		ПО ТабЧасть.СтатьяОборотов = бит_БК_КонтролирующиеСтатьиОборотов.КонтролируемаяСтатья
	|			И ТабЧасть.Период >= бит_БК_КонтролирующиеСтатьиОборотов.Период
	|ГДЕ
	|	бит_БК_КонтролирующиеСтатьиОборотов.АктивностьСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабЧасть.СтатьяОборотов,
	|	ТабЧасть.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Тч_Контр_Периоды.СтатьяОборотов КАК СтатьяОборотов,
	|	бит_БК_КонтролирующиеСтатьиОборотов.КонтролирующаяСтатья КАК КонтролирующаяСтатья,
	|	Тч_Контр_Периоды.ИсхПериод КАК ИсхПериод
	|ПОМЕСТИТЬ Тч_Контр_КС
	|ИЗ
	|	Тч_Контр_Периоды КАК Тч_Контр_Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_КонтролирующиеСтатьиОборотов КАК бит_БК_КонтролирующиеСтатьиОборотов
	|		ПО Тч_Контр_Периоды.СтатьяОборотов = бит_БК_КонтролирующиеСтатьиОборотов.КонтролируемаяСтатья
	|			И Тч_Контр_Периоды.ПериодКС = бит_БК_КонтролирующиеСтатьиОборотов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Сценарий.бит_БК_ИспользоватьКонтроллирующиеСтатьи
	|			ТОГДА ЕСТЬNULL(Тч_Контр_КС.КонтролирующаяСтатья, ТабличнаяЧасть.СтатьяОборотов)
	|		ИНАЧЕ ТабличнаяЧасть.СтатьяОборотов
	|	КОНЕЦ КАК СтатьяОборотов,
	|	ТабличнаяЧасть.Период КАК Период,
	|	ТабличнаяЧасть.ЦФО КАК ЦФО,
	|	ТабличнаяЧасть.Аналитика_2 КАК Аналитика_2,
	|	ТабличнаяЧасть.Сценарий КАК Сценарий,
	|	ТабличнаяЧасть.Аналитика_1 КАК Аналитика_1,
	|	ТабличнаяЧасть.СуммаКонтроль КАК СуммаКонтроль,
	|	ТабличнаяЧасть.СуммаИсполнение КАК СуммаИсполнение,
	|	СценарииБКОК.СценарийКонтролирующий КАК СценарийКонтролирующий
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	ТабЧасть КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Тч_Контр_КС КАК Тч_Контр_КС
	|		ПО ТабличнаяЧасть.СтатьяОборотов = Тч_Контр_КС.СтатьяОборотов
	|			И ТабличнаяЧасть.Период = Тч_Контр_КС.ИсхПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СценарииБКОК КАК СценарииБКОК
	|		ПО ТабличнаяЧасть.Сценарий = СценарииБКОК.Сценарий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.Период КАК Период,
	|	ТабличнаяЧасть.СценарийКонтролирующий КАК СценарийКонтролирующий,
	|	ТабличнаяЧасть.Сценарий КАК Сценарий,
	|	ТабличнаяЧасть.ЦФО КАК ЦФО,
	|	ТабличнаяЧасть.СтатьяОборотов КАК СтатьяОборотов,
	|	ТабличнаяЧасть.Аналитика_1 КАК Аналитика_1,
	|	ТабличнаяЧасть.Аналитика_2 КАК Аналитика_2,
	|	ТабличнаяЧасть.СуммаКонтроль КАК СуммаКонтроль,
	|	ТабличнаяЧасть.СуммаИсполнение КАК СуммаИсполнение
	|ПОМЕСТИТЬ ВТ_ДанныеКЗБ
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_КонтрольныеЗначенияБюджетов.Период,
	|	бит_КонтрольныеЗначенияБюджетов.Сценарий,
	|	бит_КонтрольныеЗначенияБюджетов.СценарийКонтролируемый,
	|	бит_КонтрольныеЗначенияБюджетов.ЦФО,
	|	бит_КонтрольныеЗначенияБюджетов.СтатьяОборотов,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_1,
	|	бит_КонтрольныеЗначенияБюджетов.Аналитика_2,
	|	бит_КонтрольныеЗначенияБюджетов.СуммаСценарийКонтроль,
	|	бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов КАК бит_КонтрольныеЗначенияБюджетов
	|ГДЕ
	|	бит_КонтрольныеЗначенияБюджетов.Регистратор <> &Ссылка
	|	И бит_КонтрольныеЗначенияБюджетов.Период >= &минПериод
	|	И бит_КонтрольныеЗначенияБюджетов.Период <= &максПериод
	|	И бит_КонтрольныеЗначенияБюджетов.Активность
	|	И бит_КонтрольныеЗначенияБюджетов.Сценарий В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТабличнаяЧасть.СценарийКонтролирующий КАК Сценарий
	|			ИЗ
	|				ТабличнаяЧасть КАК ТабличнаяЧасть)
	|	И (бит_КонтрольныеЗначенияБюджетов.СуммаСценарийКонтроль <> 0
	|			ИЛИ бит_КонтрольныеЗначенияБюджетов.СуммаСценарийИсполнение <> 0)
	|	И бит_КонтрольныеЗначенияБюджетов.ЦФО В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТабличнаяЧасть.ЦФО КАК ЦФО
	|			ИЗ
	|				ТабличнаяЧасть КАК ТабличнаяЧасть)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДляОтбора.Дата КАК Дата,
	|	ВТ_ПериодыДляОтбора.ВидДаты КАК ВидДаты,
	|	ВТ_ДанныеКЗБ.ЦФО КАК ЦФО,
	|	ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка) КАК СтатьяОборотов,
	|	ЗНАЧЕНИЕ(Документ.бит_ФормаВводаБюджета.ПустаяСсылка) КАК НомерЗаявки,
	|	СУММА(ВТ_ДанныеКЗБ.СуммаКонтроль) КАК СуммаКонтроль,
	|	СУММА(ВТ_ДанныеКЗБ.СуммаИсполнение) КАК СуммаИсполнение,
	|	&Ссылка КАК Регистратор
	|ИЗ
	|	ВТ_ПериодыДляОтбора КАК ВТ_ПериодыДляОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКЗБ КАК ВТ_ДанныеКЗБ
	|		ПО ВТ_ПериодыДляОтбора.НачалоПериода <= ВТ_ДанныеКЗБ.Период
	|			И ВТ_ПериодыДляОтбора.КонецПериода >= ВТ_ДанныеКЗБ.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеКЗБ.ЦФО,
	|	ВТ_ПериодыДляОтбора.ВидДаты,
	|	ВТ_ПериодыДляОтбора.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПериодыДляОтбора.Дата,
	|	ВТ_ПериодыДляОтбора.ВидДаты,
	|	ВТ_ДанныеКЗБ.ЦФО,
	|	ВТ_ДанныеКЗБ.СтатьяОборотов,
	|	&Ссылка,
	|	СУММА(ВТ_ДанныеКЗБ.СуммаКонтроль),
	|	СУММА(ВТ_ДанныеКЗБ.СуммаИсполнение),
	|	&Ссылка
	|ИЗ
	|	ВТ_ДанныеКЗБ КАК ВТ_ДанныеКЗБ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДляОтбора КАК ВТ_ПериодыДляОтбора
	|		ПО ВТ_ДанныеКЗБ.Период >= ВТ_ПериодыДляОтбора.НачалоПериода
	|			И ВТ_ДанныеКЗБ.Период <= ВТ_ПериодыДляОтбора.КонецПериода
	|ГДЕ
	|	(ВТ_ДанныеКЗБ.ЦФО, ВТ_ДанныеКЗБ.СтатьяОборотов, ВТ_ДанныеКЗБ.Аналитика_2) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТабличнаяЧасть.ЦФО КАК ЦФО,
	|				ТабличнаяЧасть.СтатьяОборотов КАК СтатьяОборотов,
	|				ТабличнаяЧасть.Аналитика_2 КАК Аналитика_2
	|			ИЗ
	|				ТабличнаяЧасть КАК ТабличнаяЧасть)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеКЗБ.ЦФО,
	|	ВТ_ПериодыДляОтбора.ВидДаты,
	|	ВТ_ПериодыДляОтбора.Дата,
	|	ВТ_ДанныеКЗБ.СтатьяОборотов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПериодыДляОтбора.Дата,
	|	ВТ_ПериодыДляОтбора.ВидДаты,
	|	ВТ_ДанныеКЗБ.ЦФО,
	|	ВТ_ДанныеКЗБ.СтатьяОборотов,
	|	ЗНАЧЕНИЕ(Документ.бит_ФормаВводаБюджета.ПустаяСсылка),
	|	СУММА(ВТ_ДанныеКЗБ.СуммаКонтроль),
	|	СУММА(ВТ_ДанныеКЗБ.СуммаИсполнение),
	|	&Ссылка
	|ИЗ
	|	ВТ_ПериодыДляОтбора КАК ВТ_ПериодыДляОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеКЗБ КАК ВТ_ДанныеКЗБ
	|		ПО ВТ_ПериодыДляОтбора.НачалоПериода <= ВТ_ДанныеКЗБ.Период
	|			И ВТ_ПериодыДляОтбора.КонецПериода >= ВТ_ДанныеКЗБ.Период
	|ГДЕ
	|	(ВТ_ДанныеКЗБ.ЦФО, ВТ_ДанныеКЗБ.СтатьяОборотов) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТабличнаяЧасть.ЦФО КАК ЦФО,
	|				ТабличнаяЧасть.СтатьяОборотов КАК СтатьяОборотов
	|			ИЗ
	|				ТабличнаяЧасть КАК ТабличнаяЧасть)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеКЗБ.ЦФО,
	|	ВТ_ПериодыДляОтбора.ВидДаты,
	|	ВТ_ПериодыДляОтбора.Дата,
	|	ВТ_ДанныеКЗБ.СтатьяОборотов";
	
	Запрос.УстановитьПараметр("ТЗ_Периоды"	, ТЗ_Периоды);
	Запрос.УстановитьПараметр("минПериод" 	, НачалоГода(минПериод));
	Запрос.УстановитьПараметр("максПериод"  , КонецГода(максПериод));
	Запрос.УстановитьПараметр("Ссылка"	  	, Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ок_СводныеДанныеПоБюджету.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ВыборкаДетальныеЗаписи);
		ЗаписьНабора.Период = Дата;
	КонецЦикла;
	
	Если НаборЗаписей.Количество()>0 Тогда 
		Попытка
			НаборЗаписей.Записать();
		Исключение
			пТекстОшибки = НСтр("ru = 'Не удалось заполнить движения документа по РС ""Сводные остатки по бюджету"" по причине
                                 |%2'");
			пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки);
			ЗаписьЖурналаРегистрации("ЗаписьСводныхОстатковПоБюджету", УровеньЖурналаРегистрации.Ошибка, НаборЗаписей.Метаданные(), Ссылка, пТекстОшибки);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-15 (#3808)

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мРежимОбновленияВиз             = Константы.бит_РежимОбновленияПеречняВиз.Получить();

// Получаем статус и дату изменения статуса для документа.
// 1c-izhtc ChuckNorris 17.03.2016 (
//РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка, Перечисления.бит_ВидыСтатусовОбъектов.Статус);
// 1c-izhtc ChuckNorris 17.03.2016 )

//мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик);
//Начало_бит_БК_Магомедов_16.12.2011 
//бит_БК_СтатусВручную = Ложь; // 1c-izhtc spawn
//мСтатусУстановленныйВручную = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик);
//РассчитыватьСуммуЗаРамками = Истина;
//Конец_бит_БК_Магомедов_16.12.2011 
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мПроводитьПослеУтверждения = ?(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения") = Истина, Истина, Ложь);

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мИзмеренияВсе       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

//Начало_бит_БК_Магомедов_12.03.2012
бит_БК_WEBКлиент = Ложь;
//Конец_бит_БК_Магомедов_12.03.2012

//ОК Калинин М 070213
//здесь задаем структуру для чтения в процедуре записи истории по объекту в общем модуле
ПараметрыЗаписи = Новый Структура("СобытиеПередЗаписью", Перечисления.бит_БК_СобытияОбъекта.ПустаяСсылка());
//ОК Калинин М

#КонецОбласти


#КонецЕсли
