&НаКлиенте
Процедура рекСценарииКопированияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура рекДанныеДляКопированияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура рекДанныеДляКопированияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура рекСценарииКопированияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура кмдПометитьДляКопирования(Команда)
	
	Для каждого пСтрока Из рекДанныеДляКопирования Цикл
		
		пСтрока.Пометка = Истина;
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте
Процедура кмдСнятьПометкуДляКопирования(Команда)
	
	Для каждого пСтрока Из рекДанныеДляКопирования Цикл
		
		пСтрока.Пометка = Ложь;
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте
Процедура кмдИнвертироватьПометкуДляКОпирования(Команда)
	
	Для каждого пСтрока Из рекДанныеДляКопирования Цикл
		
		пСтрока.Пометка = НЕ пСтрока.Пометка;
	КонецЦикла; 	
КонецПроцедуры

//{bit_SVKushnirenko 23.03.2017 #2735
//Возвращает список сценариев для заполнения на форме подбора строк
// Параметры:
//парСписокЗаявок - список значений "Заявки"
&НаСервереБезКонтекста
Функция ПолучитьСписокСценариевЗаявок(парСписокЗаявок)
	
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_ФормаВводаБюджетаБДДС.Сценарий КАК Сценарий
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка В(&пзМассивЗаявок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сценарий";
	
	пЗапрос.УстановитьПараметр("пзМассивЗаявок", парСписокЗаявок);
	
	пТЗРез = пЗапрос.Выполнить().Выгрузить();
	
	Если пТЗРез.Количество() <>  0 Тогда  
		
		Возврат пТЗРез.ВыгрузитьКолонку("Сценарий");
	Иначе
		
		Возврат Новый Массив;
	КонецЕсли;
КонецФункции // ПолучитьСписокСценариевЗаявок() }bit_SVKushnirenko 23.03.2017 #2735 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда  
		
		пНомерЗаявкиШапка = Неопределено;
		Если Параметры.Свойство("НомерЗаявкиШапка", пНомерЗаявкиШапка) и ЗначениеЗаполнено(пНомерЗаявкиШапка) Тогда  
			
			рекЗаявки.Добавить(пНомерЗаявкиШапка);
		КонецЕсли;
		
		рекВидОперацииПолучатель = Параметры.ВидОперации;
	КонецЕсли;
КонецПроцедуры

//{bit_SVKushnirenko 23.03.2017 #2735
//Актуализирует список сценариев на форме 
Функция АктуализироватьСписокСценариевНаФорме()
	
	пМассивСценариев = ПолучитьСписокСценариевЗаявок(рекЗаявки.ВыгрузитьЗначения());
	Для каждого пЭлемент Из пМассивСценариев Цикл
		
		Если рекСценарииКопирования.НайтиПоЗначению(пЭлемент) = Неопределено Тогда  
			
			рекСценарииКопирования.Добавить(пЭлемент,, Истина);
		КонецЕсли;
	КонецЦикла; 
	
	пМассивУдаляемых = Новый Массив;
	Для каждого пЭлемент Из рекСценарииКопирования Цикл //поиск сценариев, которых нет в заявках
		
		Если пМассивСценариев.Найти(пЭлемент.Значение) = Неопределено Тогда 
			
			пМассивУдаляемых.Добавить(пЭлемент.Значение);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого пЭлемент Из пМассивУдаляемых  Цикл //очистка сценариев, которых нет в заявках
		
		рекСценарииКопирования.Удалить(рекСценарииКопирования.Индекс(рекСценарииКопирования.НайтиПоЗначению(пЭлемент)));
	КонецЦикла; 
КонецФункции // АктуализироватьСписокСценариевНаФорме() }bit_SVKushnirenko 23.03.2017 #2735

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	АктуализироватьСписокСценариевНаФорме();
КонецПроцедуры

//{bit_SVKushnirenko 23.03.2017 #2735
//Добавляет строку правила в матрицу (сокращение объема кода и упрощение проверки)
&НаСервереБезКонтекста
Функция ДобавитьСтрокуПравила(парТЧМатрицы, парОперацияИсточник, парСценарийИсточник, парОперацияПолучатель, парСценарийПолучатель, парГрузитьСтроки, парОчищатьСтатью = Ложь)
	
	пСтрока = парТЧМатрицы.Добавить();
	пСтрока.ВидОперацииИсточник = парОперацияИсточник;
	пСтрока.СценарийИсточник = парСценарийИсточник;
	пСтрока.ВидОперацииПолучатель = парОперацияПолучатель;
	пСтрока.СценарийПолучатель = парСценарийПолучатель;
	пСтрока.ГрузитьСтроки = парГрузитьСтроки;
	пСтрока.ОчищатьСтатью = парОчищатьСтатью;
КонецФункции // ДобавитьСтрокуПравила() }bit_SVKushnirenko 23.03.2017 #2735

//{bit_SVKushnirenko 23.03.2017 #2735
//Возвращает матрицу правил загрузки строк
&НаСервереБезКонтекста
Функция ПолучитьТЧМатрицыЗагрузкиСтрок()
	
	пТЧМатрицы = Новый ТаблицаЗначений;
	пКолонки = пТЧМатрицы.Колонки;
	пКолонки.Добавить("ВидОперацииИсточник", Новый ОписаниеТипов("ПеречислениеСсылка.бит_БК_ВидыОперацийФормаВводаБюджета"));
	пКолонки.Добавить("СценарийИсточник", Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"));
	пКолонки.Добавить("ВидОперацииПолучатель", Новый ОписаниеТипов("ПеречислениеСсылка.бит_БК_ВидыОперацийФормаВводаБюджета"));
	пКолонки.Добавить("СценарийПолучатель", Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"));
	пКолонки.Добавить("ГрузитьСтроки", Новый ОписаниеТипов("Булево"));
	пКолонки.Добавить("ОчищатьСтатью", Новый ОписаниеТипов("Булево"));
	
	//1 строка матрицы
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, Ложь);
	
	//2 строка матрицы
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, Истина);
	
	//3 строка матрицы
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Истина, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, Ложь);
	
	//4 строка матрицы
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Истина);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, Истина);
	
	//5 строка матрицы
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный, 
	Справочники.СценарииПланирования.Заявка_У, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_У, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный, 
	Справочники.СценарииПланирования.Заявка_Инвест, Ложь);
	
	ДобавитьСтрокуПравила(пТЧМатрицы, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, 
	Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт, 
	Справочники.СценарииПланирования.Контракт_Инвест, Истина);
	
	Возврат пТЧМатрицы;
КонецФункции // ПолучитьТЧМатрицыЗагрузкиСтрок() }bit_SVKushnirenko 23.03.2017 #2735 

//&НаСервереБезКонтекста
//Функция ПроверитьВремТаб(МенеджерВремТаб,ИмяВремтаб ="",Порядок = "")
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	| *
//	|ИЗ
//	| ВремТаб КАК ВремТаб
//	|
//	|УПОРЯДОЧИТЬ ПО Порядок";
//	
//	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВремТаб",ИмяВремтаб); 
//	Если Порядок = "" тогда 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст,"УПОРЯДОЧИТЬ ПО Порядок","");
//	Иначе 
//		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Порядок",Порядок);
//	КонецЕсли; 
//	
//	ТЗ = Запрос.Выполнить().Выгрузить(); 
//	
//	Возврат ТЗ; 
//КонецФункции

//{bit_SVKushnirenko 23.03.2017 #2735
//Возвращает таблицу данных строк выбранных заявок по данным матрицы ограничений
// Параметры:
//парМассивЗаявок - массив заявок, для которых следует получить строки
//парМассивСценариев - массив сценариев, для которых требуется получать строки
//парВидОперацииПолучатель - данные входящей ФВБ
&НаСервереБезКонтекста
Функция ПолучениеДанныхСтрок(парМассивЗаявок, парМассивСценариев, парВидОперацииПолучатель)
	
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = 
	"ВЫБРАТЬ
	|	тчМатрица.ВидОперацииИсточник,
	|	тчМатрица.СценарийИсточник,
	|	тчМатрица.ВидОперацииПолучатель,
	|	тчМатрица.СценарийПолучатель,
	|	тчМатрица.ГрузитьСтроки,
	|	тчМатрица.ОчищатьСтатью
	|ПОМЕСТИТЬ втМатрица
	|ИЗ
	|	&пзМатрицаКопирования КАК тчМатрица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка,
	|	бит_ФормаВводаБюджетаБДДС.НомерСтроки,
	|	бит_ФормаВводаБюджетаБДДС.ИД,
	|	бит_ФормаВводаБюджетаБДДС.ЦФО,
	|	ВЫБОР
	|		КОГДА втМатрица.ОчищатьСтатью
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	|		ИНАЧЕ бит_ФормаВводаБюджетаБДДС.СтатьяОборотов
	|	КОНЕЦ КАК СтатьяОборотов,
	|	бит_ФормаВводаБюджетаБДДС.Контрагент,
	|	бит_ФормаВводаБюджетаБДДС.ДоговорКонтрагента,
	|	бит_ФормаВводаБюджетаБДДС.Проект,
	|	бит_ФормаВводаБюджетаБДДС.НоменклатурнаяГруппа,
	|	бит_ФормаВводаБюджетаБДДС.БанковскийСчет,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_1,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_3,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_4,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_5,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_6,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_7,
	|	бит_ФормаВводаБюджетаБДДС.Количество,
	|	бит_ФормаВводаБюджетаБДДС.Норма,
	|	бит_ФормаВводаБюджетаБДДС.Сумма,
	|	бит_ФормаВводаБюджетаБДДС.Измерение,
	|	бит_ФормаВводаБюджетаБДДС.Период,
	|	бит_ФормаВводаБюджетаБДДС.Расчетная,
	|	бит_ФормаВводаБюджетаБДДС.Комментарий,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_Организация,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_НаименованиеОборудования,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ПредпологаемыйКонтрагент,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЕдиницаИзмерения,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаПредоплаты,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_НуженДоговор,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_УсловияОплаты,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ФормаОплаты,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_АдекватностьЦены,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВВалютеБезНДС,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЦенаБезНДС,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВВалютеСНДС,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЦенаСНДС,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ВалютаДоговора,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_Курс,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_Кратность,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЦенаВВалютеБезНДС,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ПревышениеБюджета,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЦенаВВалютеСНДС,
	|	бит_ФормаВводаБюджетаБДДС.ПредставлениеПериода,
	|	бит_ФормаВводаБюджетаБДДС.бит_БК_Расход,
	|	бит_ФормаВводаБюджетаБДДС.ОК_НоменклатураПроизв,
	|	бит_ФормаВводаБюджетаБДДС.бит_СтавкаНДС,
	|	ВЫБОР
	|		КОГДА втМатрица.ВидОперацииИсточник <> втМатрица.ВидОперацииПолучатель
	|			ТОГДА втМатрица.СценарийПолучатель
	|		ИНАЧЕ бит_ФормаВводаБюджетаБДДС.Сценарий
	|	КОНЕЦ КАК Сценарий,
	|	""бит_БК_ВалютаДоговора; бит_БК_Организация; бит_БК_ФормаОплаты; бит_БК_СуммаПредоплаты; ЦФО"" КАК бит_БК_БлокировкиПолейФинансовогоКонтроллера
	|ИЗ
	|	втМатрица КАК втМатрица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ПО втМатрица.ВидОперацииИсточник = бит_ФормаВводаБюджетаБДДС.Ссылка.ВидОперации
	|			И втМатрица.СценарийИсточник = бит_ФормаВводаБюджетаБДДС.Сценарий
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка В(&пзМассивЗаявок)
	|	И втМатрица.ГрузитьСтроки
	|	И втМатрица.ВидОперацииПолучатель = &пзВидОперацииПолучатель
	|	И втМатрица.СценарийИсточник В(&пзСценарииИсточники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втМатрица";

	//"ВЫБРАТЬ
	//|	тчМатрица.ВидОперацииИсточник,
	//|	тчМатрица.СценарийИсточник,
	//|	тчМатрица.ВидОперацииПолучатель,
	//|	тчМатрица.СценарийПолучатель,
	//|	тчМатрица.ГрузитьСтроки,
	//|	тчМатрица.ОчищатьСтатью
	//|ПОМЕСТИТЬ втМатрица
	//|ИЗ
	//|	&пзМатрицаКопирования КАК тчМатрица
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	втМатрица.ВидОперацииИсточник,
	//|	втМатрица.СценарийИсточник,
	//|	втМатрица.ВидОперацииПолучатель,
	//|	втМатрица.СценарийПолучатель,
	//|	втМатрица.ГрузитьСтроки,
	//|	втМатрица.ОчищатьСтатью
	//|ПОМЕСТИТЬ втМатрица1
	//|ИЗ
	//|	втМатрица КАК втМатрица
	//|ГДЕ
	//|	втМатрица.ГрузитьСтроки
	//|	И втМатрица.ВидОперацииПолучатель = &пзВидОперацииПолучатель
	//|	И втМатрица.СценарийИсточник В (&пзСценарииПолучатели)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка,
	//|	бит_ФормаВводаБюджетаБДДС.НомерСтроки,
	//|	бит_ФормаВводаБюджетаБДДС.ИД,
	//|	бит_ФормаВводаБюджетаБДДС.ЦФО,
	//|	бит_ФормаВводаБюджетаБДДС.Контрагент,
	//|	бит_ФормаВводаБюджетаБДДС.ДоговорКонтрагента,
	//|	бит_ФормаВводаБюджетаБДДС.Проект,
	//|	бит_ФормаВводаБюджетаБДДС.НоменклатурнаяГруппа,
	//|	бит_ФормаВводаБюджетаБДДС.БанковскийСчет,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_1,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_2,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_3,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_4,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_5,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_6,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_7,
	//|	бит_ФормаВводаБюджетаБДДС.Количество,
	//|	бит_ФормаВводаБюджетаБДДС.Норма,
	//|	бит_ФормаВводаБюджетаБДДС.Сумма,
	//|	бит_ФормаВводаБюджетаБДДС.Измерение,
	//|	бит_ФормаВводаБюджетаБДДС.Период,
	//|	бит_ФормаВводаБюджетаБДДС.Расчетная,
	//|	бит_ФормаВводаБюджетаБДДС.Комментарий,
	//|	бит_ФормаВводаБюджетаБДДС.Удалить_Сценарий,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_Организация,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_НаименованиеОборудования,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ПредпологаемыйКонтрагент,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЕдиницаИзмерения,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаПредоплаты,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_НуженДоговор,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_УсловияОплаты,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ФормаОплаты,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_АдекватностьЦены,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВВалютеБезНДС,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЦенаБезНДС,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаВВалютеСНДС,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЦенаСНДС,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ВалютаДоговора,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_Курс,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_Кратность,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЦенаВВалютеБезНДС,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ПревышениеБюджета,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_ЦенаВВалютеСНДС,
	//|	бит_ФормаВводаБюджетаБДДС.ПредставлениеПериода,
	//|	бит_ФормаВводаБюджетаБДДС.бит_БК_Расход,
	//|	бит_ФормаВводаБюджетаБДДС.ОК_НоменклатураПроизв,
	//|	бит_ФормаВводаБюджетаБДДС.бит_СтавкаНДС,
	//|	бит_ФормаВводаБюджетаБДДС.Сценарий,
	//|	""бит_БК_ВалютаДоговора; бит_БК_Организация; бит_БК_ФормаОплаты; бит_БК_СуммаПредоплаты; ЦФО"" КАК бит_БК_БлокировкиПолейФинансовогоКонтроллера
	//|ПОМЕСТИТЬ втМатрица2
	//|ИЗ
	//|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	//|ГДЕ
	//|	бит_ФормаВводаБюджетаБДДС.Ссылка В(&пзМассивЗаявок)";	
	
	пЗапрос.УстановитьПараметр("пзМатрицаКопирования", ПолучитьТЧМатрицыЗагрузкиСтрок());
	пЗапрос.УстановитьПараметр("пзМассивЗаявок", парМассивЗаявок);
	пЗапрос.УстановитьПараметр("пзСценарииИсточники", парМассивСценариев);
	пЗапрос.УстановитьПараметр("пзВидОперацииПолучатель", парВидОперацииПолучатель);
	
	//пЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//а = пЗапрос.Выполнить();
	
	Возврат пЗапрос.Выполнить().Выгрузить();
КонецФункции // ПолучениеДанныхСтрок() }bit_SVKushnirenko 23.03.2017 #2735 

&НаСервере
Процедура ОбновитьСписокСтрокПоДаннымЗаявокиСценариев()
	
	//Получить массив заявок и сценариев для запроса
	пМассивЗаявок = Новый Массив;
	Для каждого пЭлемент Из рекЗаявки Цикл
		
		пМассивЗаявок.Добавить(пЭлемент.Значение);
	КонецЦикла; 
	
	пМассивСценариев = Новый Массив;
	Для каждого пЭлемент Из рекСценарииКопирования Цикл
		
		Если пЭлемент.Пометка Тогда  
			
			пМассивСценариев.Добавить(пЭлемент.Значение);
		КонецЕсли;
	КонецЦикла; 
	
	рекДанныеДляКопирования.Загрузить(ПолучениеДанныхСтрок(пМассивЗаявок, пМассивСценариев, рекВидОперацииПолучатель));
КонецПроцедуры

&НаКлиенте
Процедура кмдОбновить(Команда)
	
	ОбновитьСписокСтрокПоДаннымЗаявокиСценариев();
КонецПроцедуры

&НаКлиенте
Процедура кмдДобавитьСтроки(Команда)
	
	Если рекДанныеДляКопирования.Количество() <>  0 Тогда  
		
		пОповещение = Новый ОписаниеОповещения("ОбработчикДобавленияСтрок", ЭтотОбъект, Новый Структура("ВидОперации", "Добавлять"));
		ПоказатьВопрос(пОповещение, "Выполнить дополнение табличной части, данными выбранных строк?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "Внимание!", КодВозвратаДиалога.Нет);
	Иначе
		
		пОповещение = Новый ОписаниеОповещения("ОбработчикДобавленияСтрок", ЭтотОбъект, Новый Структура("ВидОперации", "НетСтрок"));
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-29 (#2854)
		//ПоказатьВопрос(пОповещение, "Нет строк для добавления!", РежимДиалогаВопрос.ОК, 30, КодВозвратаДиалога.Нет, "Внимание!", КодВозвратаДиалога.ОК);
		ПоказатьВопрос(пОповещение, "Нет строк для добавления!", РежимДиалогаВопрос.ОК, 30, КодВозвратаДиалога.ОК, "Внимание!", КодВозвратаДиалога.ОК);
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-29 (#2854)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кмдЗагрузитьСтроки(Команда)

	Если рекДанныеДляКопирования.Количество() <>  0 Тогда  
		
		пОповещение = Новый ОписаниеОповещения("ОбработчикДобавленияСтрок", ЭтотОбъект, Новый Структура("ВидОперации", "ОчищатьДобавлять"));
		ПоказатьВопрос(пОповещение, "Выполнить загрузку строк с ЗАМЕЩЕНИЕМ табличной части, данными выбранных строк?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "Внимание!", КодВозвратаДиалога.Нет);
	Иначе
		
		пОповещение = Новый ОписаниеОповещения("ОбработчикДобавленияСтрок", ЭтотОбъект, Новый Структура("ВидОперации", "НетСтрок"));
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-29 (#2854)
		//ПоказатьВопрос(пОповещение, "Нет строк для добавления!", РежимДиалогаВопрос.ОК, 30, КодВозвратаДиалога.Нет, "Внимание!", КодВозвратаДиалога.ОК);
		ПоказатьВопрос(пОповещение, "Нет строк для добавления!", РежимДиалогаВопрос.ОК, 30, КодВозвратаДиалога.ОК, "Внимание!", КодВозвратаДиалога.ОК);
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-29 (#2854)
	КонецЕсли;
КонецПроцедуры

//{bit_SVKushnirenko 23.03.2017 #2735
//Возвращает помеченые пользователем строки в виде таблицы значений
// Параметры:
//парТаблицаФормыСтрок - таблица формы с помечеными пользователем строками
&НаСервереБезКонтекста 
Функция ПолучитьАктуальныеСтрокиКопирования(знач парТаблицаФормыСтрок)
	
	пТЧХранения = парТаблицаФормыСтрок.Выгрузить().Скопировать(Новый Структура("Пометка", Истина));
	Возврат ПоместитьВоВременноеХранилище(пТЧХранения);
КонецФункции // ПолучитьАктуальныеСтрокиКопирования() }bit_SVKushnirenko 23.03.2017 #2735 

//{bit_SVKushnirenko 23.03.2017 #2735
//Обработчик исполнения команды дополнения строк
&НаКлиенте
Функция ОбработчикДобавленияСтрок(парРезультат, парПараметры) Экспорт
	
	Если парРезультат = КодВозвратаДиалога.Да и парПараметры.ВидОперации <> "НетСтрок" Тогда  //Выполнение
		
		//{ bit_SVKushnirenko 14.06.2017 #2735
		//ИсходныйКод{
		//Закрыть(Новый Структура("ВидОперации, АдресТаблицыСтрок", парПараметры.ВидОперации, ПолучитьАктуальныеСтрокиКопирования(рекДанныеДляКопирования)));
		//}ИсходныйКод
		
		//Включаем номер заявки в массив передачи в форму
		Закрыть(Новый Структура("ВидОперации, АдресТаблицыСтрок, НомерЗаявки", 
		парПараметры.ВидОперации, ПолучитьАктуальныеСтрокиКопирования(рекДанныеДляКопирования), рекЗаявки[0].Значение));
		//} bit_SVKushnirenko 14.06.2017 #2735
	КонецЕсли;
КонецФункции // ОбработчикЗаполненияТЧ() }bit_SVKushnirenko 23.03.2017 #2735

&НаКлиенте
Процедура рекЗаявкиПослеУдаления(Элемент)

	АктуализироватьСписокСценариевНаФорме();	
КонецПроцедуры

&НаКлиенте
Процедура рекЗаявкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	АктуализироватьСписокСценариевНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура рекДанныеДляКопированияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элемент.ТекущийЭлемент.Имя = "рекДанныеДляКопированияПометка" Тогда  
		
		пДанныеКопирования = Элементы.рекДанныеДляКопирования.ТекущиеДанные;
		пДанныеКопирования.Пометка = НЕ пДанныеКопирования.Пометка;
	КонецЕсли;
КонецПроцедуры
