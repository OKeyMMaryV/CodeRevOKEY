//{bit_SVKushnirenko 20.03.2017 #2596
&НаСервере
Функция ОбновитьИтогиТЧЗапросов()
	
	рекИтогКорректировка = рекЗапросКорректировки.Итог("СуммаКорректировки");
	рекИтогПревышение = рекЗапросКорректировки.Итог("СуммаПревышения");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-18 (#2867)
	Элементы.фкмдСоздатьКорректировку.Доступность = рекИтогКорректировка <> 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-18 (#2867)
	
КонецФункции // ОбновитьИтогиТЧЗапросов() }bit_SVKushnirenko 20.03.2017 #2596

&НаСервере
Процедура кмдОбновитьИсточникиНаСервере()
	
	//{ bit SVKushnirenko Bit 14.06.2017 #2596
	//Формируем пустую таблицу запроса корректировки для очистки, в случае, когда в ТЧ есть данные и происходит повторный вызов, где БК может быть уже пустым
	рекЗапросКорректировки.Очистить();
	ПоместитьВоВременноеХранилище(рекЗапросКорректировки.Выгрузить(), рекАдресЗапросаКорректировки);
	//} bit SVKushnirenko Bit 14.06.2017 #2596
	
	ПостроитьДанныеЗапросаКорректировки(рекФВБХранБДДС, рекФВБНомерЗаявкиСсылка, рекФВБСсылка, рекАдресЗапросаКорректировки);
	
	//{ bit SVKushnirenko Bit 14.06.2017 #2596
	//Обрабатываем пустой массив данных запроса корректировки, когда подготовительные процессы выдадут ошибки, явно ищбыточные в этом случае
	пТЧЗапроса = ПолучитьИзВременногоХранилища(рекАдресЗапросаКорректировки); //оптимизация быстродействия больших списков
	Если ТипЗнч(пТЧЗапроса) =  Тип("ТаблицаЗначений") и 
		пТЧЗапроса.Количество() = 0 Тогда  
		
		ОбновитьИтогиТЧЗапросов(); //обнвляем суммовые данные на форме
		Возврат; //нет необходимости обновлять сведения об источниках, т.к. запрос пуст
	КонецЕсли;
	//} bit SVKushnirenko Bit 14.06.2017 #2596
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-02 (#2867)
	Если пТЧЗапроса.Колонки.Найти("СписокПравилПодбора") = Неопределено Тогда 
		пТЧЗапроса.Колонки.Добавить("СписокПравилПодбора",Новый ОписаниеТипов("СписокЗначений"));
	КонецЕсли;
	
	Если пТЧЗапроса.Колонки.Найти("СписокИДИсточников") = Неопределено Тогда 
		пТЧЗапроса.Колонки.Добавить("СписокИДИсточников",Новый ОписаниеТипов("СписокЗначений"));
	КонецЕсли;
	
	Если пТЧЗапроса.Колонки.Найти("ИДСтроки") = Неопределено Тогда 
		пТЧЗапроса.Колонки.Добавить("ИДСтроки",Новый ОписаниеТипов("Число"));
	КонецЕсли;

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-02 (#2867)
	
	Справочники.бит_БК_ПравилаПодбКорректировокИнициаторами.ПолучитьТаблицуИсточниковДляКорректировки(
	рекАдресЗапросаКорректировки, 
	рекИсточникКорректировки, 
	рекФВБНомерЗаявкиСсылка, 
	рекАдресМассиваАктуальныхПравил);
	
	пТЧЗапроса = ПолучитьИзВременногоХранилища(рекАдресЗапросаКорректировки); //оптимизация быстродействия больших списков
	Если ТипЗнч(пТЧЗапроса) = Тип("ТаблицаЗначений") Тогда  
		рекЗапросКорректировки.Загрузить(пТЧЗапроса);
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-02 (#2867)
	////Обновить ИД строк в таблицах
	//пСчетчик = 0;
	//Для каждого пСтрока Из рекИсточникКорректировки Цикл
	//	
	//	пСтрока.ИДСтроки = пСчетчик;
	//	
	//	пСчетчик = пСчетчик + 1;
	//КонецЦикла; 
	//	
	//пСчетчик = 0;
	//Для каждого пСтрока Из рекЗапросКорректировки Цикл
	//	
	//	пСтрока.ИДСтроки = пСчетчик;
	//	
	//	пСчетчик = пСчетчик + 1;
	//КонецЦикла; 
	//Заменено на:
	//Инициируем ТЗ для хранения сумм распределения
	ИнициироватьТЗСуммРаспределения();	
	ТаблицаРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
		
	ОбновитьСуммыРаспределенияИсточники();	
	
	СтруктраОтбора = Новый Структура("Отображать",Истина);
		
	ФСтруктура = Новый ФиксированнаяСтруктура(СтруктраОтбора);
	
	Элементы.рекИсточникКорректировки.ОтборСтрок = ФСтруктура;	
	
	Если рекИсточникКорректировки.Количество() = 0 Тогда 
		Элементы.рекЗапросКорректировкиРаспределить.Доступность 	= Ложь;
		Элементы.рекЗапросКорректировкиПересчитатьВсе.Доступность 	= Ложь;
	Иначе 
		Если рекЗапросКорректировки.Количество()<>0 Тогда 
			Элементы.рекЗапросКорректировкиРаспределить.Доступность 	= Истина;
			Элементы.рекЗапросКорректировкиПересчитатьВсе.Доступность 	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-02 (#2867)
	
	ОбновитьИтогиТЧЗапросов();
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-02 (#2867)
Процедура ИнициироватьТЗСуммРаспределения()
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	Для Каждого СтрокаТЧ Из рекИсточникКорректировки Цикл 
		ТаблицаРаспределения.Колонки.Добавить("ИД"+СтрокаТЧ.ИДСтроки,Новый ОписаниеТипов("Число"));
	КонецЦикла;
	
	Для Каждого СтрокаЗапрос Из рекЗапросКорректировки Цикл
		СтрокаТаблицыРаспределения = ТаблицаРаспределения.Добавить();		
		
		СтрокаЗапрос.МаксимальнаяСуммаПревышения = СтрокаЗапрос.СуммаПревышения;
		СтрокаЗапрос.Выбран = Ложь;				
	КонецЦикла;
			
	ПоместитьВоВременноеХранилище(ТаблицаРаспределения,рекАдресХранилищаТЗСуммРаспределения);
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-02 (#2867)

&НаКлиенте
Процедура кмдОбновитьИсточники(Команда = Неопределено)
	
	рекЗапросКорректировки.Очистить();
	рекИсточникКорректировки.Очистить();
	кмдОбновитьИсточникиНаСервере();
		
КонецПроцедуры

&НаСервере
Функция кмдСоздатьКорректировкуНаСервере()
	
	пУспешноСозданаКорректировка = Ложь;
	пТекущийРежимПривилегий = ПривилегированныйРежим();
	УстановитьПривилегированныйРежим(Истина);
	
	пИзмеренияДоп  = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	пНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-09 (#2867)
	//пОтборИсточниковКорректировок = Новый Структура("Выбран, Сценарий, СценарийКонтролируемый, КоррПериод", Истина); 
	//Заменено на:
	пОтборИсточниковКорректировок = Новый Структура("ИДСтроки"); 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-09 (#2867)
	пОтборСетиЗаполнения = Новый Структура("ИДСтрокиИсточника", 0); 
	
	//Выбрать все уникальные данные источников, по которым будут проходить корректировки
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-09 (#2867)
	//пТЧИсточников = рекИсточникКорректировки.Выгрузить().Скопировать(Новый Структура("Выбран", Истина)); //полная ТЧ источников корректировки
	//пТЧСетиЗаполнения = рекСетьЗаполнения.Выгрузить().Скопировать();//полная сеть заполнения
	//пТЧЗапросаКорректировки = рекЗапросКорректировки.Выгрузить().Скопировать();//полная таблица запроса корректировки
	//Заменено на:
	пТЧЗапросаКорректировки = рекЗапросКорректировки.Выгрузить().Скопировать(Новый Структура("Выбран", Истина));//только выбранные строки таблицы запроса корректировки
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
	пОтборЗапросаКорректировок = Новый Структура("Сценарий, СценарийКонтролируемый, КоррПериод"); 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-09 (#2867)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-09 (#2867)
	//пТЧЭкземпляровКорректировки = пТЧИсточников.Скопировать();
	//Заменено на:
	пТЧЭкземпляровКорректировки = пТЧЗапросаКорректировки.Скопировать();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-09 (#2867)
	пТЧЭкземпляровКорректировки.Свернуть("Сценарий, СценарийКонтролируемый, КоррПериод");
	
	Для каждого пОтдельнаяКорректировка Из пТЧЭкземпляровКорректировки Цикл
		
		пДокКорректировка = Документы.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.СоздатьДокумент();
		пДокКорректировка.Дата = ТекущаяДата();
		пДокКорректировка.ДокументОснование = рекФВБСсылка;
		пДокКорректировка.Сценарий = пОтдельнаяКорректировка.Сценарий;
		пДокКорректировка.СценарийКонтролируемый = пОтдельнаяКорректировка.СценарийКонтролируемый;
		пДокКорректировка.ВидОперации = Перечисления.бит_ВидыОперацийКорректировкаКонтрольныхЗначений.КонтрольБюджета;
		пДокКорректировка.ВидКорректировки = Перечисления.бит_ВидыКорректировокКонтрольныхЗначений.ЗаСчет;
		
		пТЧКорректировокВДокументе = пДокКорректировка.СуммыКорректировок;
		
		// Заполнить реквизиты значениями по умолчанию (взято из модуля документа)
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(пДокКорректировка,
		ПользователиКлиентСервер.ТекущийПользователь());
		//Заполнить реквизиты значениями по умолчанию (взято из модуля документа)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-09 (#2867)
		////Выбрать строки источников корректировок
		//ЗаполнитьЗначенияСвойств(пОтборИсточниковКорректировок, пОтдельнаяКорректировка);
		//
		//пМассивИсточниковЭкземпляраКорректировки = пТЧИсточников.НайтиСтроки(пОтборИсточниковКорректировок);
		//Для каждого пСтрокаИсточника Из пМассивИсточниковЭкземпляраКорректировки Цикл
		
		//Если пСтрокаИсточника.СуммаРаспределено = 0 Тогда
		//	
		//	Продолжить;
		//КонецЕсли;
		////Заполнение строк корректировки данными источника
		//пСтрокаКорректировки = пТЧКорректировокВДокументе.Добавить();
		//
		//ЗаполнитьЗначенияСвойств(пСтрокаКорректировки, пСтрокаИсточника);
		//
		////Правка несовпадающих колонок источника
		//пСтрокаКорректировки.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Расход;
		//пСтрокаКорректировки.Период = пСтрокаИсточника.ПериодПлана;
		//
		//пСтрокаКорректировки.Сумма = пСтрокаИсточника.СуммаРаспределено; //полная сумма источника на все зависимые строки запроса			
		//
		//бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(пСтрокаКорректировки, пИзмеренияДоп, пНастройкиИзмерений);
		////Найти связанные строки заявки на корректировку
		//пОтборСетиЗаполнения.ИДСтрокиИсточника = пСтрокаИсточника.ИДСтроки;
		//пМассивИДСтрокЗаполнения = пТЧСетиЗаполнения.НайтиСтроки(пОтборСетиЗаполнения);
		//
		////Заполнение строк корректировки данными строк получателя
		//Для каждого пЭлементИДМассиваСтрокЗапроса Из пМассивИДСтрокЗаполнения Цикл
		//	
		//	пСтрокаЗапросаКорректировки = пТЧЗапросаКорректировки.Найти(пЭлементИДМассиваСтрокЗапроса.ИДСтрокиЗапроса, "ИДСтроки");
		//	пСтрокаКорректировки = пТЧКорректировокВДокументе.Добавить();
		//	ЗаполнитьЗначенияСвойств(пСтрокаКорректировки, пСтрокаЗапросаКорректировки);
		//	
		//	//Правка несовпадающих колонок источника
		//	пСтрокаКорректировки.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Приход;
		//	пСтрокаКорректировки.Период = пСтрокаЗапросаКорректировки.ИсхПериод;
		//	пСтрокаКорректировки.Сумма = пЭлементИДМассиваСтрокЗапроса.СуммаРаспределено;
		//	пСтрокаКорректировки.ИД = Строка(Новый УникальныйИдентификатор()); //взато из типового кода на момент задачи
		//	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(пСтрокаКорректировки, пИзмеренияДоп, пНастройкиИзмерений);
		//КонецЦикла; 
		
		//Заменено на:	
		СоответствиеСтрокИсточниковИТЧ = Новый Соответствие;
		ЗаполнитьЗначенияСвойств(пОтборЗапросаКорректировок, пОтдельнаяКорректировка);
		пМассивЗапросовЭкземпляраКорректировки = пТЧЗапросаКорректировки.НайтиСтроки(пОтборЗапросаКорректировок);
		Для Каждого пСтрокаЗапроса Из пМассивЗапросовЭкземпляраКорректировки Цикл 
			Если пСтрокаЗапроса.СуммаКорректировки = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			пСтрокаСуммРаспределения = ТЗСуммРаспределения[пСтрокаЗапроса.ИДСтроки];
			
			Для Каждого ЭлементСпискаИД Из пСтрокаЗапроса.СписокИДИсточников Цикл 
				
				СуммаРаспределеноПоСтрокеЗапроса = пСтрокаСуммРаспределения[ЭлементСпискаИД.Значение];
				Если СуммаРаспределеноПоСтрокеЗапроса = 0 Тогда 
					Продолжить;
				КонецЕсли;
						
				пОтборИсточниковКорректировок.Вставить("ИДСтроки",ЭлементСпискаИД.Значение);
				СтрокиИсточника = рекИсточникКорректировки.НайтиСтроки(пОтборИсточниковКорректировок);
				Если СтрокиИсточника.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;		
				
				пСтрокаИсточника = СтрокиИсточника[0];
				
				пСтрокаКорректировки = СоответствиеСтрокИсточниковИТЧ.Получить(ЭлементСпискаИД.Значение);
				Если пСтрокаКорректировки = Неопределено Тогда 
					//Заполнение строк корректировки данными источника
					пСтрокаКорректировки = пТЧКорректировокВДокументе.Добавить();
					
					ЗаполнитьЗначенияСвойств(пСтрокаКорректировки, пСтрокаИсточника);
					
					//Правка несовпадающих колонок источника
					пСтрокаКорректировки.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Расход;
					пСтрокаКорректировки.Период = пСтрокаИсточника.ПериодПлана;
					
					пСтрокаКорректировки.Сумма = ТЗСуммРаспределения.Итог("ИД"+ЭлементСпискаИД.Значение); //полная сумма источника на все зависимые строки запроса			
					
					бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(пСтрокаКорректировки, пИзмеренияДоп, пНастройкиИзмерений);
					СоответствиеСтрокИсточниковИТЧ.Вставить(ЭлементСпискаИД.Значение,пСтрокаКорректировки);
				КонецЕсли;
				
				//Заполнение строк корректировки данными строк получателя
				пСтрокаКорректировки = пТЧКорректировокВДокументе.Добавить();
				ЗаполнитьЗначенияСвойств(пСтрокаКорректировки, пСтрокаЗапроса);
				
				//Правка несовпадающих колонок источника
				пСтрокаКорректировки.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Приход;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-17 (#2867)				
				//пСтрокаКорректировки.Период		 = пСтрокаЗапроса.ИсхПериод;
				//Заменено на:
				Если пСтрокаЗапроса.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест") ИЛИ
					 пСтрокаЗапроса.СценарийКонтролируемый = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест")
				Тогда 
					пСтрокаКорректировки.Период		 = пСтрокаИсточника.ПериодПлана;
				Иначе 
					пСтрокаКорректировки.Период		 = пСтрокаЗапроса.ИсхПериод;
				КонецЕсли;
				//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-17 (#2867)
				пСтрокаКорректировки.Сумма 		 = СуммаРаспределеноПоСтрокеЗапроса;
				пСтрокаКорректировки.ИД 		 = Строка(Новый УникальныйИдентификатор()); //взато из типового кода на момент задачи
				бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(пСтрокаКорректировки, пИзмеренияДоп, пНастройкиИзмерений);
				
			КонецЦикла;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-09 (#2867)
		КонецЦикла; 
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-24 (#2867)
		Если пТЧКорректировокВДокументе.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-24 (#2867)		
		
		//Попытка записи
		Попытка
			
			пДокКорректировка.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			
			пСообщение = Новый СообщениеПользователю;
			пСообщение.Текст = "Ошибка при попытке записи документа: " + пДокКорректировка.Ссылка + " - " + ОписаниеОшибки();
			пСообщение.Сообщить();		
			Продолжить;
		КонецПопытки;
		
		//Попытка проведения
		Попытка
			
			пДокКорректировка.Записать(РежимЗаписиДокумента.Проведение); 
			пУспешноСозданаКорректировка = Истина;
		Исключение
			
			пСообщение = Новый СообщениеПользователю;
			пСообщение.Текст = "Ошибка при попытке проведения документа: " + пДокКорректировка.Ссылка + " - " + ОписаниеОшибки();
			пСообщение.Сообщить();		
			Продолжить;
		КонецПопытки;
		
		пСообщение = Новый СообщениеПользователю;
		пСообщение.Текст = "Проведен документ: " + пДокКорректировка.Ссылка;
		пСообщение.Сообщить();		
	КонецЦикла; 
	
	//Восстановление привилегированного режима
	УстановитьПривилегированныйРежим(пТекущийРежимПривилегий);
	
	//пересчитываем данные запроса корректировки и остатков источников
	рекЗапросКорректировки.Очистить();
	рекИсточникКорректировки.Очистить();
	
	Возврат пУспешноСозданаКорректировка;
КонецФункции

&НаКлиенте
Процедура кмдСоздатьКорректировку(Команда)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-07-17 (#2865)
	Если рекИсточникКорректировки.Количество() = 0 И
		 рекЗапросКорректировки.Количество() <> 0
	Тогда 
		ПоказатьПредупреждение( , НСтр("ru = 'Корректировка бюджета не может быть выполнена из-за отсутствия денежных средств в бюджете.'"), 20);		
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-07-17 (#2865)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-18 (#2867)	
	Если НЕ ЕстьДанныеДляСозданияКорректировки() Тогда 
		ПоказатьПредупреждение( , НСтр("ru = 'Перед созданием корректировки бюджета, необходимо выполнить распределение денежных средств'"), 20);		
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-18 (#2867)
	
	Если кмдСоздатьКорректировкуНаСервере() Тогда  
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-25 (#2867)
		Если рекИсточникКорректировки.Количество() = 0 Тогда 
			Элементы.рекЗапросКорректировкиРаспределить.Доступность 	= Ложь;
			Элементы.рекЗапросКорректировкиПересчитатьВсе.Доступность 	= Ложь;
		Иначе 
			Если рекЗапросКорректировки.Количество()<>0 Тогда 
				Элементы.рекЗапросКорректировкиРаспределить.Доступность 	= Истина;
				Элементы.рекЗапросКорректировкиПересчитатьВсе.Доступность 	= Истина;
			КонецЕсли;
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-25 (#2867)
		
		Оповестить("бит_БК_УспешноЗавершеноСозданиеПроведениеКорректировки", Новый Структура("ФВБСсылка", рекФВБСсылка));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
КонецПроцедуры

//{bit_SVKushnirenko 10.03.2017 #2596
//Строит таблицу запроса корректировки по данным отрицательных остатков БК вызывающего документа
// Параметры:
//парАдресБДДСЗаявки - Адрес во временном хранилище ТЧ "БДДС" ФВБ, ее актуальная редакция для расчета вычетов из данных БК
//парНомерЗаявкиШапка - "Номер заявки" котоый возможен в ФВБ тип "Контракт"
//парСсылка - ссылка на документ ФВБ, для исключения влияния движений документа на результат расчета
//парАдресВремХрТЧЗапросаКорректировки - адрес во временном хранилище, ТЧ запроса корректировки (оптимизация клиент-сервер)
&НаСервереБезКонтекста
Процедура ПостроитьДанныеЗапросаКорректировки(парАдресБДДСЗаявки, парНомерЗаявкиШапка,  парСсылка, парАдресВремХрТЧЗапросаКорректировки)
	
	//Формирование таблицы КЛАн
	пТЧБДДС = ПолучитьИзВременногоХранилища(парАдресБДДСЗаявки); 
	Если ТипЗнч(пТЧБДДС) <> Тип("ТаблицаЗначений") Тогда  
		
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-18 (#2867)
	пНастройкиВыбораКЗБПоСценариям = бит_БК_Общий.СценариПланированияНастройкиВыбораСумм();
	
	пТекстЗапроса = "ВЫБРАТЬ
	|	ТЧ.Аналитика_1,
	|	ТЧ.Аналитика_2,
	|	ТЧ.Период,
	|	ТЧ.Проект,
	|	ТЧ.СтатьяОборотов,
	|	ТЧ.Сумма,
	|	ТЧ.Сценарий,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-18 (#3078)
	|	ТЧ.Контрагент,
	|	ТЧ.ДоговорКонтрагента,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-18 (#3078)
	|	ТЧ.ЦФО
	|ПОМЕСТИТЬ ТЧФВБ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧасть.Аналитика_1,
	|	ТабЧасть.Аналитика_2,
	|	""ТЧ_Период"" КАК Период,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-15 (#3232)
	|	""ТЧ_Год_Период"" КАК ПериодГод,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-15 (#3232)
	|	ТабЧасть.Проект,
	|	ТабЧасть.СтатьяОборотов,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-09-18 (#3078)
	|	ТабЧасть.Контрагент,
	|	ТабЧасть.ДоговорКонтрагента,
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-09-18 (#3078)
	|	ТабЧасть.Сумма,
	|	ТабЧасть.Сценарий,
	|	ТабЧасть.ЦФО
	|ИЗ
	|	ТЧФВБ КАК ТабЧасть";
	
	//Определение настроек выборки по ключевым аналитикам
	//ПЕРИОД.ТЧ
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-15 (#3232)
	пТекст_ТЧ_ПериодГод = "";
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-15 (#3232)
	пВыражение = бит_БК_Общий.ПолучитьВыражениеДляПериодов(пНастройкиВыбораКЗБПоСценариям, 
	"ТабЧасть.Сценарий", 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-04-15 (#3232)
	//"ТабЧасть.Период");
	//Заменено на:
	"ТабЧасть.Период",
	пТекст_ТЧ_ПериодГод);
	
	пТекстЗапроса = СтрЗаменить(пТекстЗапроса, """ТЧ_Год_Период""", пТекст_ТЧ_ПериодГод);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-04-15 (#3232)
	пТекстЗапроса = СтрЗаменить(пТекстЗапроса, """ТЧ_Период""", пВыражение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = пТекстЗапроса;
	Запрос.УстановитьПараметр("ТЧ",	пТЧБДДС);	
	пТЧБДДС = Запрос.Выполнить().Выгрузить();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-18 (#2867)	
	
	пТЧБК = бит_БК_общий.БКПоДаннымБДДС(пТЧБДДС, парНомерЗаявкиШапка,  парСсылка);
	
	Если пТЧБК.Количество() = 0 Тогда
		
		Возврат; //запрос БК не вернул данных, значит нет предмета для контироля
	КонецЕсли;
	
	Если пТЧБК.Итог("СверхБюджетаПризнак") = 0 Тогда //БК выполнен, но ни одна строка не превысила бюджет
		
		Возврат;	
	КонецЕсли;
	
	//Сворачиваем данные по ключевым аналитикам для вывода пользователю
	пТЧБК.Свернуть("Сценарий, ИсхПериод, Период, ЦФО, СтатьяОборотов, Проект, Аналитика_1, Аналитика_2, ЕстьОстатокБюджетаПослеОперацииБольшеНуля, СверхБюджетаПризнак, ПолнаяСуммаОстаткаСвободныхСредствПоВсемСтрокам, ПолнаяСуммаСверхБюджетаПоВсемСтрокам, ОстатокДоОперации, ОстатокПослеОперации, СверхБюджетаПоКлючевым, СуммаКонтроль, СуммаОперации", "");
	
	пЗапрос = Новый Запрос;
	пЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ТабЧасть.СверхБюджетаПризнак КАК СверхБюджетаПризнак,
	|	ТабЧасть.СтатьяОборотов КАК СтатьяОборотов,
	|	ТабЧасть.Период КАК Период,
	|	ТабЧасть.ЦФО КАК ЦФО,
	|	ВЫРАЗИТЬ(ТабЧасть.Аналитика_2 КАК Справочник.ОбъектыСтроительства) КАК Аналитика_2,
	|	ВЫРАЗИТЬ(ТабЧасть.Сценарий КАК Справочник.СценарииПланирования) КАК СценарийКонтролируемый,
	|	ТабЧасть.Проект КАК Проект,
	|	ВЫРАЗИТЬ(&пзНомерЗаявкиШапка КАК Документ.бит_ФормаВводаБюджета) КАК Аналитика_1,
	|	ТабЧасть.СуммаОперации КАК СуммаОперации,
	|	ТабЧасть.ОстатокПослеОперации КАК СуммаПревышения,
	|	0 КАК СуммаКорректировки,
	|	ТабЧасть.ИсхПериод
	|ПОМЕСТИТЬ втТабЧасть
	|ИЗ
	|	&пзТабЧасть КАК ТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК Справочник.бит_БК_Регион) КАК Регион,
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Объект КАК Справочник.ОбъектыСтроительства) КАК Объект
	|ПОМЕСТИТЬ втРегионы
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = ""Регион""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.СценарииПланирования) КАК СценарийУправляющий,
	|	ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.СценарииПланирования) КАК СценарийПодчиненный
	|ПОМЕСТИТЬ втПарыСцКонтроля
	|ИЗ
	|	РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|ГДЕ
	|	бит_СоответствияАналитик.ВидСоответствия.Код = ""бит_БК_СценарийВСценарийКонтролируемый""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТабЧасть.СтатьяОборотов,
	|	втТабЧасть.Период,
	|	втТабЧасть.ИсхПериод,
	|	втТабЧасть.СценарийКонтролируемый,
	|	втТабЧасть.ЦФО,
	|	втТабЧасть.Аналитика_2,
	|	ЕСТЬNULL(втРегионы.Регион, ЗНАЧЕНИЕ(Справочник.бит_БК_Регион.ПустаяСсылка)) КАК Регион,
	|	втТабЧасть.Проект,
	|	втТабЧасть.Аналитика_1,
	|	втТабЧасть.СуммаОперации,
	|	втТабЧасть.СуммаПревышения,
	|	втТабЧасть.СуммаКорректировки,
	|	ВЫБОР
	|		КОГДА бит_БК_КоррОграниченияПериода.ДоступныйПериод = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Год)
	|			ТОГДА НАЧАЛОПЕРИОДА(втТабЧасть.ИсхПериод, ГОД)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-20 (#3314)
	|		КОГДА бит_БК_КоррОграниченияПериода.ДоступныйПериод = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Полугодие)
	|			ТОГДА НАЧАЛОПЕРИОДА(втТабЧасть.ИсхПериод, ПОЛУГОДИЕ)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-20 (#3314)
	|		КОГДА бит_БК_КоррОграниченияПериода.ДоступныйПериод = ЗНАЧЕНИЕ(Перечисление.ДоступныеПериодыОтчета.Квартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(втТабЧасть.ИсхПериод, КВАРТАЛ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(втТабЧасть.ИсхПериод, МЕСЯЦ)
	|	КОНЕЦ КАК КоррПериод,
	|	втПарыСцКонтроля.СценарийУправляющий КАК Сценарий,
	|	втТабЧасть.СуммаПревышения КАК СуммаРасхождения
	|ИЗ
	|	втТабЧасть КАК втТабЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРегионы КАК втРегионы
	|		ПО втТабЧасть.Аналитика_2 = втРегионы.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПарыСцКонтроля КАК втПарыСцКонтроля
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БК_КоррОграниченияПериода КАК бит_БК_КоррОграниченияПериода
	|			ПО втПарыСцКонтроля.СценарийУправляющий = бит_БК_КоррОграниченияПериода.Сценарий
	|				И втПарыСцКонтроля.СценарийПодчиненный = бит_БК_КоррОграниченияПериода.СценарийКонтролируемый
	|		ПО втТабЧасть.СценарийКонтролируемый = втПарыСцКонтроля.СценарийПодчиненный
	|ГДЕ
	|	втТабЧасть.СверхБюджетаПризнак = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТабЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРегионы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПарыСцКонтроля";
	
	пЗапрос.УстановитьПараметр("пзТабЧасть", пТЧБК);
	пЗапрос.УстановитьПараметр("пзНомерЗаявкиШапка", парНомерЗаявкиШапка);
	
	пТЧЗапроса = пЗапрос.Выполнить().Выгрузить();
	ПоместитьВоВременноеХранилище(пТЧЗапроса, парАдресВремХрТЧЗапросаКорректировки);
КонецПроцедуры // ПостроитьДанныеЗапросаКорректировки() }bit_SVKushnirenko 10.03.2017 #2596

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	рекАдресМассиваАктуальныхПравил = ПоместитьВоВременноеХранилище(0, Новый УникальныйИдентификатор); //инициализация адреса временного хранилища для массив
	рекАдресЗапросаКорректировки = ПоместитьВоВременноеХранилище(0, Новый УникальныйИдентификатор); //инициализация адреса данных запроса корректировки
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-02 (#2867)
	рекАдресХранилищаТЗСуммРаспределения = ПоместитьВоВременноеХранилище(0, Новый УникальныйИдентификатор); //инициализация адреса таблицы сопоставления верхней и нижней ТЧ по правилам	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-02 (#2867)
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") Тогда  
		
		Если НЕ Параметры.Свойство("ФВБСсылка", рекФВБСсылка) или 
			НЕ Параметры.Свойство("ХранТЧБДДС", рекФВБХранБДДС) или
			НЕ Параметры.Свойство("ФВБНомерЗаявкиШапка", рекФВБНомерЗаявкиСсылка) Тогда  //не передана ссылка на заявку
			
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		рекЗапросКорректировки.Очистить();
		рекИсточникКорректировки.Очистить();
		кмдОбновитьИсточникиНаСервере();
	КонецЕсли;
КонецПроцедуры

//{bit_SVKushnirenko 17.03.2017 #2596
//Выполняет заполнение данных по состоявшемуся выбору пользователя в таблице ииточников
&НаСервере
Процедура ПерезаполнитьСуммыПоВыборуПользователя(парИДИсточника)
		
	рекСетьЗаполнения.Очистить(); //обнуляем сеть заполнения
	
	пТЧЗапроса = рекЗапросКорректировки.Выгрузить().Скопировать();
	пТЧИсточников = рекИсточникКорректировки.Выгрузить().Скопировать();
	//Очистить колонку заполнения ТЧ запроса
	пТЧЗапроса.ЗаполнитьЗначения(0, "СуммаКорректировки");
	пТЧЗапроса.ЗагрузитьКолонку(пТЧЗапроса.ВыгрузитьКолонку("СуммаПревышения"), "СуммаРасхождения");
	//Очистить колонку включения в распределение, ТЧ источника
	пТЧИсточников.ЗаполнитьЗначения(0, "СуммаРаспределено");
	
	//Выбрать комбинации допустимых сценариев запроса и периодов слияния
	пТЧКомбинацийСценариев = пТЧЗапроса.Скопировать();
	пТЧКомбинацийСценариев.Свернуть("Сценарий, СценарийКонтролируемый, КоррПериод");
	
	//Отбо данных помеченых источников по паре сценария запроса корректировки который еще не покрыт данными источника
	пТЧПомеченныхИсточников = пТЧИсточников.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	пИДКурсораЗапроса = 0;
	
	//Поиск строк запроса которые необходимо-возможно заполнить по данным строки-источника
	пСтруктураПоискаЗапросСтрок = Новый Структура("Сценарий, СценарийКонтролируемый, КоррПериод");
	Для каждого пСтрокаИсточник Из пТЧПомеченныхИсточников Цикл
		
		Если пТЧЗапроса.Итог("СуммаРасхождения") = 0 Тогда 
			
			Прервать; //Подбор завершен
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(пСтруктураПоискаЗапросСтрок, пСтрокаИсточник);
		пМассивСтрокЗапроса = пТЧЗапроса.НайтиСтроки(пСтруктураПоискаЗапросСтрок);
		
		пСуммаОстаткаИсточника = пСтрокаИсточник.СуммаОстатка - пСтрокаИсточник.СуммаРаспределено; //Источник может отдать только столько, сколько не распределено прошлыми итерациями
		Если пСуммаОстаткаИсточника = 0 Тогда  
			
			Прервать; //строка источника, больше никого не может наполнять
		КонецЕсли;
		
		Для каждого пСтрокаЗапроса Из пМассивСтрокЗапроса Цикл
			
			пСуммаОстаткаИсточника = пСтрокаИсточник.СуммаОстатка - пСтрокаИсточник.СуммаРаспределено; //Источник может отдать только столько, сколько не распределено прошлыми итерациями
			Если пСуммаОстаткаИсточника = 0 Тогда  
				
				Прервать; //строка источника, больше никого не может наполнять
			КонецЕсли;
			
			пСуммаРасхождения = пСтрокаЗапроса.СуммаРасхождения;
			Если пСуммаРасхождения >= 0 Тогда
				
				Продолжить;
			КонецЕсли;
			
			пСуммаРасхождения = Макс(пСуммаРасхождения, - пСуммаРасхождения); //модуль суммы
			Если пСуммаРасхождения < пСуммаОстаткаИсточника Тогда  
				
				пСуммаКорректировки = Мин(пСуммаРасхождения, пСуммаОстаткаИсточника);
			Иначе
				
				пСуммаКорректировки = пСуммаОстаткаИсточника;
			КонецЕсли;
			
			пСтрокаЗапроса.СуммаРасхождения = пСтрокаЗапроса.СуммаРасхождения + пСуммаКорректировки; //уменьшается отрицательное число
			пСтрокаЗапроса.СуммаКорректировки = пСтрокаЗапроса.СуммаКорректировки + пСуммаКорректировки; //увеличивается положительная сумма корректировки
			пСтрокаИсточник.СуммаРаспределено = пСтрокаИсточник.СуммаРаспределено + пСуммаКорректировки;
			
			пСтрокаСети = рекСетьЗаполнения.Добавить();
			пСтрокаСети.ИДСтрокиЗапроса = пСтрокаЗапроса.ИДСтроки;
			пСтрокаСети.ИДСтрокиИсточника = пСтрокаИсточник.ИДСтроки;
			пСтрокаСети.СуммаРаспределено = пСуммаКорректировки;
			
			Если пИДКурсораЗапроса = 0 Тогда  //запоминаем курсор на первой строке, измененной в цикле
				
				пИДКурсораЗапроса = пСтрокаЗапроса.ИДСтроки;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	рекЗапросКорректировки.Загрузить(пТЧЗапроса);
	рекИсточникКорректировки.Загрузить(пТЧИсточников);
	
	ОбновитьИтогиТЧЗапросов();
	
	//Установить курсоры таблиц источника и приемника 
	Элементы.рекЗапросКорректировки.ТекущаяСтрока = рекЗапросКорректировки.НайтиСтроки(Новый Структура("ИДСтроки", пИДКурсораЗапроса))[0].ПолучитьИдентификатор();
	Элементы.рекИсточникКорректировки.ТекущаяСтрока = рекИсточникКорректировки.НайтиСтроки(Новый Структура("ИДСтроки", парИДИсточника))[0].ПолучитьИдентификатор();
КонецПроцедуры // ПерезаполнитьСуммыПоВыборуПользователя() }bit_SVKushnirenko 17.03.2017 #2596

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-07-12 (#2853)
&НаКлиенте
Функция ВыбранаСтрокаВышеПоFIFO(ТекущиеДанные)
	
	СтруктураПоиска = Новый Структура("Выбран,Сценарий,СценарийКонтролируемый,КоррПериод");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущиеДанные);
	
	МассивНайденныхСтрок = рекИсточникКорректировки.НайтиСтроки(СтруктураПоиска);
	
	Возврат НЕ МассивНайденныхСтрок[МассивНайденныхСтрок.ВГраница()] = ТекущиеДанные;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-07-12 (#2853)

//{bit_SVKushnirenko 17.03.2017 #2596
//Прокладка для вызова
// Параметры:
//парСтрокаИсточник - строка-источник с данными аналитик строки источника
//парМассивАктуальныхПравил - правила, актуальные для текущей итерации запрос-источник
&НаСервереБезКонтекста
Функция ПолучитьМассивПравилПоСтроке(парСтрокаСтрокиИсточниа, парАдресМассиваАктуальныхПравил)
	
	Возврат Справочники.бит_БК_ПравилаПодбКорректировокИнициаторами.ПолучитьМассивПравилПоДаннымСтрокиИсточника(парСтрокаСтрокиИсточниа, парАдресМассиваАктуальныхПравил);
КонецФункции // ПолучитьМассивПравилПоСтроке() }bit_SVKushnirenko 17.03.2017 #2596 

//{bit_SVKushnirenko 06.03.2017 #2596
&НаКлиенте
Функция СписокАтрибутовДляУправленияИсточникамиКорректировки()
	
	Возврат  Новый Структура("ЦФО, СтатьяОборотов, Аналитика_2, Регион, Проект", 
	"ЦФО",
	"Статья оборотов", 
	"Объект", 
	"Регион", 
	"Проект"); 
КонецФункции // СписокАтрибутовДляУправленияИсточникамиКорректировки() }bit_SVKushnirenko 06.03.2017 #2596 

&НаКлиенте
Процедура рекИсточникКорректировкиВыбранПриИзменении(Элемент)
	
	//Проверка-получение массива правил, которые относятся к этой строке (отложено из-за высокой трудоемкости и допущений заказчика)
	//пТекущиеДанные =  Элементы.рекИсточникКорректировки.ТекущиеДанные;
	//пМассивПравилСтроки = пТекущиеДанные.МассивПравил.ВыгрузитьЗначения();
	//
	//Если пМассивПравилСтроки.Количество() = 0 Тогда  //нет соответствия правил строке, стром
	
	//	пСтруктураСтрокиИсточника = СписокАтрибутовДляУправленияИсточникамиКорректировки();
	//	ЗаполнитьЗначенияСвойств(пСтруктураСтрокиИсточника, пТекущиеДанные);
	
	//	пМассивПравилОтносимыхНастройкамиКСтроке = ПолучитьМассивПравилПоСтроке(пСтруктураСтрокиИсточника, рекАдресМассиваАктуальныхПравил);
	//	Если пМассивПравилОтносимыхНастройкамиКСтроке <>  Неопределено и пМассивПравилОтносимыхНастройкамиКСтроке.Количество() <>  0  Тогда  
	//		
	//		пТекущиеДанные.МассивПравил.ЗагрузитьЗначения(пМассивПравилОтносимыхНастройкамиКСтроке);
	//	КонецЕсли;
	//КонецЕсли;
	
	//Сохранение данных курсора таблиц
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-04 (#2867)
	//пИсточникТекущиеДанные = Элементы.рекИсточникКорректировки.ТекущиеДанные;
	//Если (рекЗапросКорректировки.Итог("СуммаРасхождения") < 0) ИЛИ
	//	(рекЗапросКорректировки.Итог("СуммаРасхождения") >= 0 И НЕ пИсточникТекущиеДанные.Выбран)
	//	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-07-12 (#2853)
	//	ИЛИ ВыбранаСтрокаВышеПоFIFO(пИсточникТекущиеДанные)		
	//	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-07-12 (#2853)
	//	Тогда  //изменяем баланс подбора
	//	
	//	ПерезаполнитьСуммыПоВыборуПользователя(пИсточникТекущиеДанные.ИДСтроки);
	//ИначеЕсли пИсточникТекущиеДанные.Выбран Тогда //нельзя выбирать, если уже завершен подбор
	//	
	//	Сообщить("Дальнейший подбор не требуется - задача решена!", СтатусСообщения.Важное);
	//	пИсточникТекущиеДанные.Выбран = Ложь;
	//КонецЕсли;
	//Заменено на:	
	рекИсточникКорректировкиВыбранприИзмененииСервер();		
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-04 (#2867)
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-15 (#2867)
Процедура рекИсточникКорректировкиВыбранприИзмененииСервер()
		
	ИДТекущейСтроки = Элементы.рекИсточникКорректировки.ТекущаяСтрока;
	Если ИДТекущейСтроки = Неопределено Тогда 
		Возврат
	КонецЕсли;
	ТекущаяСтрока = рекИсточникКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Или ТекущаяСтрока.Выбран Тогда 
		Возврат;
	КонецЕсли;		
	
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);	

	Если Не Элементы.РежимРаботы.Пометка Тогда 	
		
		ИндексСтрокиЗапроса = ТЗСуммРаспределения.Количество()-1;
		Пока ИндексСтрокиЗапроса>=0 Цикл 
			
			Если ТЗСуммРаспределения[ИндексСтрокиЗапроса]["ИД"+ТекущаяСтрока.ИДСтроки] = 0 Тогда 
				ИндексСтрокиЗапроса = ИндексСтрокиЗапроса - 1;
				Продолжить;
			КонецЕсли;
			
			рекЗапросКорректировки[ИндексСтрокиЗапроса].СуммаКорректировки = рекЗапросКорректировки[ИндексСтрокиЗапроса].СуммаКорректировки - ТЗСуммРаспределения[ИндексСтрокиЗапроса]["ИД"+ТекущаяСтрока.ИДСтроки];
			
			ТЗСуммРаспределения[ИндексСтрокиЗапроса]["ИД"+ТекущаяСтрока.ИДСтроки] = 0;
					
			ИндексСтрокиЗапроса = ИндексСтрокиЗапроса - 1;
			
		КонецЦикла;                    
		
		ТекущаяСтрока.СуммаРаспределено = 0;
		
	Иначе 
		
		ИДТекущейСтрокиЗапрос = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
		Если ИДТекущейСтрокиЗапрос = Неопределено Тогда 
			Возврат
		КонецЕсли;
		ТекущаяСтрокаЗапрос = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтрокиЗапрос);
		Если ТекущаяСтрокаЗапрос = Неопределено Тогда 
			Возврат;
		КонецЕсли;		
		
		ТекущаяСтрокаЗапрос.СуммаКорректировки = ТекущаяСтрокаЗапрос.СуммаКорректировки - ТЗСуммРаспределения[рекЗапросКорректировки.Индекс(ТекущаяСтрокаЗапрос)]["ИД"+ТекущаяСтрока.ИДСтроки];
		
		ТЗСуммРаспределения[рекЗапросКорректировки.Индекс(ТекущаяСтрокаЗапрос)]["ИД"+ТекущаяСтрока.ИДСтроки] = 0;
		ТекущаяСтрока.СуммаРаспределено = 0;
		
		МассивНайденных = рекВспомогательнаяПодробно.НайтиСтроки(Новый Структура("ИдСтрокиЗапрос,ИдСтрокиИсточник",ТекущаяСтрокаЗапрос.ИДСтроки,ТекущаяСтрока.ИДСтроки));
		Если МассивНайденных.Количество()>0 Тогда 
			МассивНайденных[0].Сумма = 0;
		КонецЕсли;
		
	КонецЕсли;
	 
	 ОбновитьИтогиТЧЗапросов();
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-15 (#2867)

&НаКлиенте
Процедура ОбработкаОповещения(парИмяСобытия, парПараметр, парИсточник)
	
	//{ bit SVKushnirenko Bit 28.05.2017 #2596
	Если парИмяСобытия = "бит_БК_ПерепроведенЗависимыйДокумент"  Тогда  
		
		Если парПараметр.Свойство("ФВБСсылка", рекФВБСсылка) или 
			парПараметр.Свойство("ХранТЧБДДС", рекФВБХранБДДС) или
			парПараметр.Свойство("ФВБНомерЗаявкиШапка", рекФВБНомерЗаявкиСсылка) Тогда  //не передана ссылка на заявку
			
			кмдОбновитьИсточникиНаСервере(); //если инициирующая форма подготовила все данные, то бновляем запрос к данным и источники 
		КонецЕсли;
	КонецЕсли;
	//} bit SVKushnirenko Bit 28.05.2017 #2596
КонецПроцедуры

//{ bit SVKushnirenko Bit 13.06.2017 #2596
&НаКлиенте
Процедура рекЗапросКорректировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина
КонецПроцедуры //} bit SVKushnirenko Bit 13.06.2017 #2596

//{ bit SVKushnirenko Bit 13.06.2017 #2596
&НаКлиенте
Процедура рекЗапросКорректировкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
КонецПроцедуры //} bit SVKushnirenko Bit 13.06.2017 #2596

//{ bit SVKushnirenko Bit 13.06.2017 #2596
&НаКлиенте
Процедура рекИсточникКорректировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
КонецПроцедуры //} bit SVKushnirenko Bit 13.06.2017 #2596

//{ bit SVKushnirenko Bit 13.06.2017 #2596
&НаКлиенте
Процедура рекИсточникКорректировкиПередУдалением(Элемент, Отказ)

	Отказ = Истина;
КонецПроцедуры //} bit SVKushnirenko Bit 13.06.2017 #2596
//{ bit SVKushnirenko Bit 20.03.2017 #2596
//рекСетьЗаполнения - необходим для полноценного связывания данных при проведении документа. Кодирование заполнения корректировки показало, что этот механизм заложен архитектурой, но по факту НЕ РАБОТАЕТ! 
//удалять алгоритмы накопления сети заполнения не стоит, т.к. необходимо привести в порядок документ корректировки и заставить его корректно проводить зависимые записи заполнения, т.к. сейчас он умеет связать только пары
//в пределах одной разрешающей пары сценариев и ограничений периода корректировки финконтроля - это явная ошибка и потребность ввести несколько документов вместо одного!
//} bit SVKushnirenko Bit 20.03.2017 #2596

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-08-03 (#2867)
&НаКлиенте
Процедура УстановитьФлажкиТЧЗапрос(Команда)
	
	УстановитьСнятьФлажки(Истина, "рекЗапросКорректировки");
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиТЧЗапрос(Команда)
	
	УстановитьСнятьФлажки(Ложь, "рекЗапросКорректировки");
			
	ОчиститьВсеПоТЧЗапросСервер();	
	
	ОбновитьИтогиТЧЗапросов();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВсеПоТЧЗапросСервер()
	
	ТЗрекИсточникКорректировки = РеквизитФормыВЗначение("рекИсточникКорректировки");
	ТЗрекИсточникКорректировки.ЗаполнитьЗначения(0	 ,"СуммаРаспределено");	
	ЗначениеВРеквизитФормы(ТЗрекИсточникКорректировки,"рекИсточникКорректировки");
	
	ТЗрекЗапросКорректировки = РеквизитФормыВЗначение("рекЗапросКорректировки");
	ТЗрекЗапросКорректировки.ЗаполнитьЗначения(0,"СуммаКорректировки");
	ЗначениеВРеквизитФормы(ТЗрекЗапросКорректировки,"рекЗапросКорректировки");
	
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);		
	ТЗСуммРаспределения.ЗаполнитьЗначения(0);               		
	ПоместитьВоВременноеХранилище(ТЗСуммРаспределения,рекАдресХранилищаТЗСуммРаспределения);	
	
	ТЗВспомогательная = РеквизитФормыВЗначение("рекВспомогательнаяПодробно");
	ТЗВспомогательная.ЗаполнитьЗначения(0,"Сумма");
	ЗначениеВРеквизитФормы(ТЗВспомогательная,"рекВспомогательнаяПодробно");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиТЧИсточники(Команда)
	
	УстановитьСнятьФлажки(Истина, "рекИсточникКорректировки");
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиТЧИсточники(Команда)
	
	УстановитьСнятьФлажки(Ложь, "рекИсточникКорректировки");
	
	Если Не Элементы.РежимРаботы.Пометка Тогда 
		ОчиститьВсеПоТЧЗапросСервер();
		ОбновитьСуммыРаспределенияИсточники();
	Иначе
		ПересчитатьСтрокуНаСервере();
	КонецЕсли;
	
	ОбновитьИтогиТЧЗапросов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажки(Выбран, ИмяТЧ)
	
	Для Каждого Строка Из ЭтаФорма[ИмяТЧ] Цикл 
		Строка.Выбран = Выбран;
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПриИзмененииСуммыПревышения(РезультатВопроса,ПараметрыОповещения) Экспорт
	
	ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
	
	Если ИДТекущейСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;		
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока.СуммаКорректировки = 0;
		ОчиститьПоСтрокеЗапросаСервер();
		ОбновитьСуммыРаспределенияИсточники(Истина);				
		ОбновитьИтогиТЧЗапросов();
	Иначе
		ТекущаяСтрока.СуммаПревышения = ПараметрыОповещения.УстанавливаемоеЗначение;
	КонецЕсли;        	
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоСтрокеЗапросаСервер()
	
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);	
	
	ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
	Если ИДТекущейСтроки = Неопределено Тогда 
		Возврат
	КонецЕсли;
	ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеТЗРаспределенияПоСтрокеЗапроса(ТекущаяСтрока,ТЗСуммРаспределения,Истина);
		
КонецПроцедуры

&НаСервере
Процедура РаспределитьНаСервере()
	
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
	//Обнулим суммы распределения
	ТЗСуммРаспределения.ЗаполнитьЗначения(0);
		
	СтруктураПоиска = Новый Структура;	
	
	Для Каждого СтрокаЗапрос Из рекЗапросКорректировки Цикл 
		
		Если НЕ СтрокаЗапрос.Выбран Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаЗапрос.СуммаКорректировки = 0;
		
		РаспределитьСтроку(СтрокаЗапрос, ТЗСуммРаспределения);	
		
	КонецЦикла;
	
	Если НЕ Элементы.РежимРаботы.Пометка Тогда 
		ОбновитьСуммыРаспределенияИсточники();
	КонецЕсли;
	
	ОбновитьИтогиТЧЗапросов();
	
КонецПроцедуры

&НаКлиенте
Процедура Распределить(Команда)
	
	ПередВыполнениемКомандыРаспределитьПересчитатьВсе(Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура РежимРаботыНаСервере()
			
	ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
	Если ИДТекущейСтроки = Неопределено Тогда 
		Возврат
	КонецЕсли;
	ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.РежимРаботы.Пометка   = Не Элементы.РежимРаботы.Пометка;
	Элементы.РежимРаботы.Заголовок = ?(НЕ Элементы.РежимРаботы.Пометка, "Источники для выбранной строки", "Источники для всех строк");	
	
	ТаблицаИсточники = РеквизитФормыВЗначение("рекИсточникКорректировки");
	
	Если Элементы.РежимРаботы.Пометка Тогда                   		
				
		ТаблицаИсточники.ЗаполнитьЗначения(Ложь,"Отображать");
		ЗначениеВРеквизитФормы(ТаблицаИсточники,"рекИсточникКорректировки");
	
		ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
		
		ОбновитьСуммыРаспределенияИсточникиПоСтрокеЗапроса(ТекущаяСтрока,ТЗСуммРаспределения);
		
		рекВспомогательнаяПодробно.Очистить();
		Индекс = 0;
		Для Каждого СтрокаТЗ Из ТЗСуммРаспределения Цикл 
			Для Каждого Колонка Из ТЗСуммРаспределения.Колонки Цикл 
				
				СтрокаВспомогательнойТЗ = рекВспомогательнаяПодробно.Добавить();
				СтрокаВспомогательнойТЗ.ИдСтрокиЗапрос = Индекс;

				СтрокаВспомогательнойТЗ.ИдСтрокиИсточник = Число(СтрЗаменить(Колонка.Имя,"ИД",""));
				СтрокаВспомогательнойТЗ.Сумма = СтрокаТЗ[Колонка.Имя];
			КонецЦикла;	
			Индекс = Индекс + 1;
		КонецЦикла;
								
	Иначе 
		
		рекВспомогательнаяПодробно.Очистить();
		
		ТаблицаИсточники.ЗаполнитьЗначения(Истина,"Отображать");
		ЗначениеВРеквизитФормы(ТаблицаИсточники,"рекИсточникКорректировки");
		ОбновитьСуммыРаспределенияИсточники();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыРаспределенияИсточники(ТолькоДляТекущейСтрокиЗапроса = Ложь)
	
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
	
	Если Элементы.РежимРаботы.Пометка Тогда 
		
		Если ТолькоДляТекущейСтрокиЗапроса Тогда 
			ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
			Если ИДТекущейСтроки = Неопределено Тогда 
				Возврат
			КонецЕсли;
			ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
			Если ТекущаяСтрока = Неопределено Тогда 
				Возврат;
			КонецЕсли;

			ОбновитьСуммыРаспределенияИсточникиПоСтрокеЗапроса(ТекущаяСтрока,ТЗСуммРаспределения);		
		Иначе
				
			Для Каждого СтрокаЗапроса Из рекЗапросКорректировки Цикл 
			
				ОбновитьСуммыРаспределенияИсточникиПоСтрокеЗапроса(СтрокаЗапроса,ТЗСуммРаспределения);		
		
			КонецЦикла;
		КонецЕсли;
	Иначе 
		
		Если ТолькоДляТекущейСтрокиЗапроса Тогда 
			
			ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
			Если ИДТекущейСтроки = Неопределено Тогда 
				Возврат
			КонецЕсли;
			ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
			Если ТекущаяСтрока = Неопределено Тогда 
				Возврат;
			КонецЕсли;

			Для Каждого ЭлементСпискаИД Из ТекущаяСтрока.СписокИДИсточников Цикл 
				
				МассивНайденных = рекИсточникКорректировки.НайтиСтроки(Новый Структура("ИДСтроки",ЭлементСпискаИД.Значение));
				
				Если МассивНайденных.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				МассивНайденных[0].СуммаРаспределено = ТЗСуммРаспределения.Итог("ИД" + ЭлементСпискаИД.Значение);				
				МассивНайденных[0].Отображать = Истина;
				МассивНайденных[0].Выбран = НЕ МассивНайденных[0].СуммаРаспределено = 0;
			КонецЦикла;
		Иначе	
			Для Каждого СтрокаИсточник Из рекИсточникКорректировки Цикл 
				СтрокаИсточник.СуммаРаспределено = ТЗСуммРаспределения.Итог("ИД" + СтрокаИсточник.ИДСтроки);
				СтрокаИсточник.Отображать = Истина;
				СтрокаИсточник.Выбран = НЕ СтрокаИсточник.СуммаРаспределено = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСуммыРаспределенияИсточникиПоСтрокеЗапроса(ТекущаяСтрока,ТЗСуммРаспределения)
	
	СтрокаРаспределения = ТЗСуммРаспределения[ТекущаяСтрока.ИДСтроки];
		
	СтруктураПоиска = Новый Структура("ИДСтроки");
	
	Для Каждого ЭлементСписка Из ТекущаяСтрока.СписокИДИсточников Цикл 
		СтруктураПоиска.Вставить("ИДСтроки",ЭлементСписка.Значение);
		МассивНайденных = рекИсточникКорректировки.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденных.Количество()>0 Тогда 
			МассивНайденных[0].СуммаРаспределено = СтрокаРаспределения["ИД" + МассивНайденных[0].ИДСтроки];
			МассивНайденных[0].Отображать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботы(Команда)
	РежимРаботыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеТЗРаспределенияПоСтрокеЗапроса(СтрокаЗапрос,ТЗСуммРаспределения,СнятьВыбран = Ложь)
			
	СтрокаСуммРаспределения = ТЗСуммРаспределения[СтрокаЗапрос.ИДСтроки];
	СтруктураПоиска = Новый Структура("ИДСтроки");
	
	Для Каждого Колонка ИЗ ТЗСуммРаспределения.Колонки Цикл 
		СтрокаСуммРаспределения[Колонка.Имя] = 0;
		Если СнятьВыбран И
			 ТЗСуммРаспределения.Итог(Колонка.Имя) = 0
		Тогда
			СтруктураПоиска.Вставить("ИДСтроки",СтрЗаменить(Колонка.Имя,"ИД",""));
		   	МассивНайденных = рекИсточникКорректировки.НайтиСтроки(СтруктураПоиска);			
			Если МассивНайденных.Количество()>0 Тогда 
				МассивНайденных[0].Выбран = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоискаВспомогательной = Новый Структура;
	СтруктураПоискаВспомогательной.Вставить("ИдСтрокиЗапрос"	, СтрокаЗапрос.ИдСтроки);
	МассивСтрокаВспомогательной = рекВспомогательнаяПодробно.НайтиСтроки(СтруктураПоискаВспомогательной);
	Для Каждого СтрокаВспомогательной Из МассивСтрокаВспомогательной Цикл 
		СтрокаВспомогательной.Сумма = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСтроку(СтрокаЗапрос, ТЗСуммРаспределения, Пересчет = Ложь)
			
	СтруктураПоиска = Новый Структура("ИДСтроки");
	СтруктураПоискаВспомогательной = Новый Структура("ИдСтрокиЗапрос,ИдСтрокиИсточник");
	
	СуммаЗапросаДляРаспределения = СтрокаЗапрос.СуммаПревышения + СтрокаЗапрос.СуммаКорректировки;
	
	Если СуммаЗапросаДляРаспределения>=0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьДанныеТЗРаспределенияПоСтрокеЗапроса(СтрокаЗапрос,ТЗСуммРаспределения);
	
	СтрокаСуммРаспределения = ТЗСуммРаспределения[СтрокаЗапрос.ИДСтроки];
	
	Для Каждого ЭлементСписка Из СтрокаЗапрос.СписокИДИсточников Цикл 
		
		Если СуммаЗапросаДляРаспределения>=0 Тогда
			Прервать;
		КонецЕсли;  
				 
		СтруктураПоиска.Вставить("ИДСтроки",ЭлементСписка.Значение);
		МассивНайденныхСтрокИсточник = рекИсточникКорректировки.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНайденныхСтрокИсточник.Количество()=0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СтруктураПоискаВспомогательной.Вставить("ИдСтрокиЗапрос"	, СтрокаЗапрос.ИдСтроки);
		СтруктураПоискаВспомогательной.Вставить("ИдСтрокиИсточник"	, МассивНайденныхСтрокИсточник[0].ИДСтроки);
		МассивСтрокаВспомогательной = рекВспомогательнаяПодробно.НайтиСтроки(СтруктураПоискаВспомогательной);
		
		Если (Пересчет И НЕ МассивНайденныхСтрокИсточник[0].Выбран) Тогда 			//Обнулим
			СтрокаСуммРаспределения["ИД"+МассивНайденныхСтрокИсточник[0].ИДСтроки] = 0;									
			МассивНайденныхСтрокИсточник[0].СуммаРаспределено = 0;
			Если МассивСтрокаВспомогательной.Количество()>0 Тогда
				МассивСтрокаВспомогательной[0].Сумма = 0;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СуммаРаспределенияИсточник = МассивНайденныхСтрокИсточник[0].СуммаОстатка-ТЗСуммРаспределения.Итог("ИД"+ЭлементСписка.Значение);
		
		Если СуммаРаспределенияИсточник = 0 Тогда //Все распределено
			Продолжить;
		КонецЕсли;
		
		СтрокаСуммРаспределения["ИД"+ЭлементСписка.Значение] = Мин(СуммаРаспределенияИсточник,-СуммаЗапросаДляРаспределения);
		
		СуммаЗапросаДляРаспределения = СуммаЗапросаДляРаспределения + СтрокаСуммРаспределения["ИД"+ЭлементСписка.Значение];
		
		СтрокаЗапрос.СуммаКорректировки = СтрокаЗапрос.СуммаКорректировки + СтрокаСуммРаспределения["ИД"+ЭлементСписка.Значение];
		
		Если Пересчет И Элементы.РежимРаботы.Пометка Тогда 
			МассивНайденныхСтрокИсточник[0].Выбран = Истина;
		КонецЕсли;
		
		Если Элементы.РежимРаботы.Пометка Тогда 
			
			Если МассивСтрокаВспомогательной.Количество()>0 Тогда
				МассивСтрокаВспомогательной[0].Сумма = СтрокаСуммРаспределения["ИД"+ЭлементСписка.Значение];
			КонецЕсли;
			МассивНайденныхСтрокИсточник[0].СуммаРаспределено = СтрокаСуммРаспределения["ИД"+ЭлементСписка.Значение];
		КонецЕсли;
		
	КонецЦикла;
	
	Если Пересчет И
		 СтрокаЗапрос.СписокИДИсточников.Количество()>0 И
		 ЭлементСписка <> СтрокаЗапрос.СписокИДИсточников.Получить(СтрокаЗапрос.СписокИДИсточников.Количество()-1)
	Тогда
	
	    //Обнуляем суммы оставшихся по строке запроса
	 	ТекущийИндекс = СтрокаЗапрос.СписокИДИсточников.Индекс(ЭлементСписка) + 1;
		
		Для ТекущийИндекс = ТекущийИндекс По СтрокаЗапрос.СписокИДИсточников.Количество()-1 Цикл 
			
			ЭлементСписка = СтрокаЗапрос.СписокИДИсточников.Получить(ТекущийИндекс);
			
			СтруктураПоиска.Вставить("ИДСтроки",ЭлементСписка.Значение);
			МассивНайденныхСтрокИсточник = рекИсточникКорректировки.НайтиСтроки(СтруктураПоиска);
		
			Если МассивНайденныхСтрокИсточник.Количество()=0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СтруктураПоискаВспомогательной.Вставить("ИдСтрокиЗапрос"	, СтрокаЗапрос.ИдСтроки);
			СтруктураПоискаВспомогательной.Вставить("ИдСтрокиИсточник"	, МассивНайденныхСтрокИсточник[0].ИДСтроки);
			МассивСтрокаВспомогательной = рекВспомогательнаяПодробно.НайтиСтроки(СтруктураПоискаВспомогательной);
			
			СтрокаСуммРаспределения["ИД"+ЭлементСписка.Значение] = 0;
			
			Если МассивСтрокаВспомогательной.Количество()>0 Тогда
				МассивСтрокаВспомогательной[0].Сумма = 0;
			КонецЕсли;
			
			Если Элементы.РежимРаботы.Пометка Тогда 
				МассивНайденныхСтрокИсточник[0].СуммаРаспределено = 0;
			КонецЕсли;
			
			//Если ТЗСуммРаспределения.Итог("ИД"+ЭлементСписка.Значение) = 0 Тогда 
			//	МассивНайденныхСтрокИсточник[0].Выбран = Ложь;
			//КонецЕсли;
						
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСтрокуНаСервере(ИДТекущейСтроки = Неопределено)
	
	Если ИДТекущейСтроки = Неопределено Тогда 
		ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
		Если ИДТекущейСтроки = Неопределено Тогда 
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаКорректировки = 0;
	
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
	
	РаспределитьСтроку(ТекущаяСтрока, ТЗСуммРаспределения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтроку(Команда)
	ПересчитатьСтрокуНаСервере();
	ОбновитьИтогиТЧЗапросов();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВсеНаСервере()
		
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
			
	СтруктураПоиска = Новый Структура;	
	
	Если НЕ Элементы.РежимРаботы.Пометка Тогда 
		
		//Обнулим суммы распределения
		ТЗСуммРаспределения.ЗаполнитьЗначения(0);
	
		Для Каждого СтрокаЗапрос Из рекЗапросКорректировки Цикл 
			
			Если Не СтрокаЗапрос.Выбран Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаЗапрос.СуммаКорректировки = 0;
			
			РаспределитьСтроку(СтрокаЗапрос, ТЗСуммРаспределения, Истина);	
			
		КонецЦикла;
		
	Иначе 

	    ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
		Если ИДТекущейСтроки = Неопределено Тогда 
			Возврат
		КонецЕсли;
		ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
		Если ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если НЕ ТекущаяСтрока.Выбран Тогда 
			ТекущаяСтрока.Выбран = Истина;
		КонецЕсли;
		
		ТекущаяСтрока.СуммаКорректировки = 0;
			
		РаспределитьСтроку(ТекущаяСтрока, ТЗСуммРаспределения, Истина);	

	КонецЕсли;
	
	Если НЕ Элементы.РежимРаботы.Пометка Тогда 
		ОбновитьСуммыРаспределенияИсточники();
	КонецЕсли;
	
	ОбновитьИтогиТЧЗапросов();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоСтрокеТЗСуммРаспределения(ТекущаяСтрока,ТЗСуммРаспределения)	
	
	СтрокаТЗ = ТЗСуммРаспределения[ТекущаяСтрока.ИДСтроки];
	Если СтрокаТЗ <> Неопределено Тогда 
		Для Каждого ЭлементСписка Из СтрокаТЗ.СписокИДИсточников Цикл 
			СтрокаТЗ["ИД" + ЭлементСписка.Значение] = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьВыбранныеИсточникиДляПересчета()
		
	СтруктураПоиска = Новый Структура("ИДСтроки");
	
	Если Не Элементы.РежимРаботы.Пометка Тогда 
		Для Каждого СтрокаЗапрос Из рекЗапросКорректировки Цикл 
			Если Не СтрокаЗапрос.Выбран Тогда 
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЭлементСписка Из СтрокаЗапрос.СписокИДИсточников Цикл 
				СтруктураПоиска.Вставить("ИДСтроки",ЭлементСписка.Значение);
				МассивНайденных = рекИсточникКорректировки.НайтиСтроки(СтруктураПоиска);
				Если МассивНайденных.Количество()>0 Тогда 
					Если МассивНайденных[0].Выбран Тогда 
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;	
				
	КонецЕсли;
	
	Если рекИсточникКорректировки.НайтиСтроки(Новый Структура("Выбран",Истина)).Количество() <> 0 Тогда 
		Возврат Истина;
	КонецЕсли;     
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьВсе(Команда)
	
	ПередВыполнениемКомандыРаспределитьПересчитатьВсе(Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередВыполнениемКомандыРаспределитьПересчитатьВсе(ИмяКоманды)
	
	Если рекЗапросКорректировки.НайтиСтроки(Новый Структура("Выбран",Истина)).Количество() = 0 Тогда 
		ПоказатьПредупреждение(,"В верхней табличной части «Запрос на корректировку» не выбраны строки для корректировки бюджета");
		Возврат;
	ИначеЕсли НЕ ЕстьВыбранныеИсточникиДляПересчета() И
			  ИмяКоманды = "ПересчитатьВсе"
	Тогда 
		ПоказатьПредупреждение(,"Пересчет сумм не может быть выполнен, необходимо выбрать источники корректировки.");
		Возврат;
	ИначеЕсли НЕ Элементы.РежимРаботы.Пометка И
		      НЕ ВыбранныеИсточникиСоответствуютЗапросу() И
			  ИмяКоманды = "ПересчитатьВсе"
	Тогда 
		ПоказатьПредупреждение(,"Вы не можете переносить бюджетные средства между выбранными строками. Выберите строки с подходящими аналитиками или воспользуйтесь кнопкой «Распределить автоматически»");
		ОчиститьВсеПоТЧЗапросСервер();
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяКоманды",ИмяКоманды);
	Оповещение = Новый ОписаниеОповещения("ОповещениеПриПересчетеРаспределении",ЭтаФорма,ПараметрыОповещения);
	ПоказатьВопрос(Оповещение, "Будет выполнено автоматическое распределение сумм бюджетных средств с учетом выбранных строк. Продолжить?",РежимДиалогаВопрос.ДаНет,30);
	
КонецПроцедуры	

&НаСервере
Функция ВыбранныеИсточникиСоответствуютЗапросу()
	
	МассивВыбранныхИсточников = рекИсточникКорректировки.Выгрузить(Новый Структура("Выбран",Истина)).ВыгрузитьКолонку("ИДСтроки");
	Для Каждого СтрокаЗапрос Из рекЗапросКорректировки Цикл 
		Если НЕ СтрокаЗапрос.Выбран Тогда 
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаИД Из СтрокаЗапрос.СписокИДИсточников Цикл 
			Если МассивВыбранныхИсточников.Найти(СтрокаИД.Значение)<>Неопределено Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;	
	
КонецФункции

&НаКлиенте
Процедура ОповещениеПриПересчетеРаспределении(РезультатВопроса,ПараметрыОповещения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ПараметрыОповещения.ИмяКоманды = "Распределить" Тогда 
			РаспределитьНаСервере();
		ИначеЕсли ПараметрыОповещения.ИмяКоманды = "ПересчитатьВсе" Тогда 
			ПересчитатьВсеНаСервере(); 
		КонецЕсли;
	КонецЕсли;        
	
КонецПроцедуры

&НаКлиенте
Процедура рекЗапросКорректировкиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.РежимРаботы.Пометка Тогда 
	
		ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
		Если ИДТекущейСтроки = Неопределено Тогда 
			Возврат
		КонецЕсли;
		ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
		Если ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ИдСтрокиЗапрос,ИдСтрокиИсточник",ТекущаяСтрока.ИДСтроки,Неопределено);
		
		Для Каждого СтрокаИсточник Из рекИсточникКорректировки Цикл 
			СтруктураПоиска.Вставить("ИдСтрокиИсточник",СтрокаИсточник.ИДСтроки);
			МассивНайденных = рекВспомогательнаяПодробно.НайтиСтроки(СтруктураПоиска);
			Если МассивНайденных.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			СтрокаИсточник.СуммаРаспределено = МассивНайденных[0].Сумма;
			СтрокаИсточник.Выбран = МассивНайденных[0].Сумма<>0;			
			СтрокаИсточник.Отображать = ТекущаяСтрока.СписокИДИсточников.НайтиПоЗначению(СтрокаИсточник.ИДСтроки) <> Неопределено;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура рекЗапросКорректировкиВыбранПриИзмененииНаСервере()
		
	ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
	
	Если ИДТекущейСтроки = Неопределено Тогда 
		Возврат
	КонецЕсли;
		
	ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.Выбран Тогда 
		ТекущаяСтрока.СуммаКорректировки = 0;		
		ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
		ОчиститьДанныеТЗРаспределенияПоСтрокеЗапроса(ТекущаяСтрока,ТЗСуммРаспределения);
		
		Если НЕ Элементы.РежимРаботы.Пометка Тогда 
			
			Для Каждого ЭлементСписка Из ТекущаяСтрока.СписокИДИсточников Цикл 
				МассивНайденных = рекИсточникКорректировки.НайтиСтроки(Новый Структура("ИДСтроки", ЭлементСписка.Значение));				
				Если МассивНайденных.Количество()=0 Тогда 
					Продолжить;
				КонецЕсли;
				МассивНайденных[0].СуммаРаспределено = ТЗСуммРаспределения.Итог("ИД" + ЭлементСписка.Значение);				
			КонецЦикла;

		Иначе 
			ОбновитьСуммыРаспределенияИсточникиПоСтрокеЗапроса(ТекущаяСтрока,ТЗСуммРаспределения);
		КонецЕсли;
	
		ОбновитьИтогиТЧЗапросов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура рекЗапросКорректировкиВыбранПриИзменении(Элемент)
	рекЗапросКорректировкиВыбранПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура рекЗапросКорректировкиСуммаПревышенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПроверитьВводимоеЗначениеСуммыПревышения(Текст,СтандартнаяОбработка,ДанныеВыбора);
	
КонецПроцедуры

&НаСервере
Функция ЕстьДанныеДляСозданияКорректировки()
			
	ТЗСуммРаспределения = ПолучитьИзВременногоХранилища(рекАдресХранилищаТЗСуммРаспределения);
	
	Для Каждого Колонка ИЗ ТЗСуммРаспределения.Колонки Цикл 
		Если ТЗСуммРаспределения.Итог(Колонка.Имя) <> 0 Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура рекЗапросКорректировкиСуммаПревышенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьВводимоеЗначениеСуммыПревышения(ВыбранноеЗначение,СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВводимоеЗначениеСуммыПревышения(ВыбранноеЗначение,СтандартнаяОбработка,ДанныеВыбора = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Возврат;
	КонецЕсли;
		
	Попытка 
		УстанавливаемоеЗначение = Число(ВыбранноеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	
	ИДТекущейСтроки = Элементы.рекЗапросКорректировки.ТекущаяСтрока;
	
	Если ИДТекущейСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = рекЗапросКорректировки.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.МаксимальнаяСуммаПревышения > УстанавливаемоеЗначение ИЛИ 
		 УстанавливаемоеЗначение>0
	Тогда 
		
		СтандартнаяОбработка = Ложь;
		СписокЗначенийВыбора = Новый СписокЗначений;		
		СписокЗначенийВыбора.Добавить(ТекущаяСтрока.СуммаПревышения);		
		ДанныеВыбора = СписокЗначенийВыбора;		
				
		Сообщить = Новый СообщениеПользователю;
        Сообщить.Текст = "Значение должно быть меньше нуля и не должно быть меньше "+ТекущаяСтрока.МаксимальнаяСуммаПревышения;
        Сообщить.Поле = "рекЗапросКорректировки["+ИДТекущейСтроки+"].СуммаПревышения";
        Сообщить.Сообщить();
		
		Возврат;
	КонецЕсли;  	
	
	Если ТекущаяСтрока.СуммаКорректировки > 0 Тогда 
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("УстанавливаемоеЗначение",ТекущаяСтрока.СуммаПревышения);
		
	   	Оповещение = Новый ОписаниеОповещения("ОповещениеПриИзмененииСуммыПревышения",ЭтаФорма,ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, "В нижней табличной части «Источники корректировки» будут очищены раннее распределенные суммы бюджетных средств. Продолжить?",РежимДиалогаВопрос.ДаНет,30);	
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-08-03 (#2867)