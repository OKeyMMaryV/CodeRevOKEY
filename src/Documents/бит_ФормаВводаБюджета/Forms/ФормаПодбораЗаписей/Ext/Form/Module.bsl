
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	СписокСценарии = Новый СписокЗначений;
	СписокСценарии.Добавить(Справочники.СценарииПланирования.Бюджет_А);
	СписокСценарии.Добавить(Справочники.СценарииПланирования.Бюджет_У);
	СписокСценарии.Добавить(Справочники.СценарииПланирования.Бюджет_Инвест);
	
	Сценарий 				= СписокСценарии;
	Направление 			= "Расход";
	ЭтоКонтрольБюджета		= Истина;
	ФормаВвода				= Параметры.ФормаВвода;
	ВыборСуммы				= Параметры.РезультатОтвета;

	
	ИнициализироватьКомпоновщик(КомпоновщикНастроек);
	
	ОтборЦФО 			= КомпоновщикНастроек.Настройки.Отбор.Элементы[1];
	ОтборСтатья		 	= КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	ОтборОбъекта		= КомпоновщикНастроек.Настройки.Отбор.Элементы[3];
	
	ОтборЦФО.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЦФО.ПравоеЗначение	= Параметры.СписокЦФО;
	ОтборЦФО.Использование = Истина;
	
	СписокОбъектов = Параметры.СписокОбъектов;
	СписокОбъектов.Добавить(Справочники.ОбъектыСтроительства.НайтиПоКоду("000000427"));
	
	СписокСтатей = Параметры.СписокСтатей;
	СписокСтатейКонтролирующих = Новый СписокЗначений;
	Для Каждого ТекСтатья Из СписокСтатей Цикл
		КонтролируемаяСтатья = ТекСтатья.Значение;
		Отбор =  Новый Структура("КонтролируемаяСтатья",КонтролируемаяСтатья);
		СтруктураЗначений = РегистрыСведений.бит_БК_КонтролирующиеСтатьиОборотов.ПолучитьПоследнее(ТекущаяДата(),Отбор);
		Если Не СтруктураЗначений.КонтролирующаяСтатья.Пустая() И СтруктураЗначений.АктивностьСтроки = Истина Тогда
			КонтролирующаяСтатья = СтруктураЗначений.КонтролирующаяСтатья; 
			СписокСтатейКонтролирующих.Добавить(КонтролирующаяСтатья);
		КонецЕсли;		
	КонецЦикла;
	

	ОтборСтатья.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборСтатья.ПравоеЗначение	= СписокСтатейКонтролирующих;
	ОтборСтатья.Использование	= Истина;		
	
	ОтборОбъекта.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборОбъекта.ПравоеЗначение	= Параметры.СписокОбъектов;
	ОтборОбъекта.Использование	= Истина;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьКомпоновщик(пКомпоновщик) Экспорт
	
	СхемаКомпоновкиДанных = Документы.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.ПолучитьМакет("СКДПодборЗаписей");
	
	мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СхемаКомпоновкиДанных, 
					"НаборДанных1", 
					мНастройкиИзмерений);
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	пКомпоновщик.Инициализировать(ИсточникНастроек);
	пКомпоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	Возврат АдресСхемыКомпоновкиДанных;
	
КонецФункции

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьНаборКонтрольныхЗначений();
	
	Если КонтрольныеЗначенияБюджетов.Количество() = 0 Тогда 
		ПоказатьПредупреждение(Неопределено, "Нет данных");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкаПериода(Команда)
	
	бит_РаботаСДиалогамиКлиент.НастроитьПериод(Период, НастройкаПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	СоздатьКорректировку();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировку()
	
	ДокументОбъект 		= ВвестиНаОснованииТонкийКлиент(ФормаВвода,ВыборСуммы );
	ТаблицаДокумента 	= ФормаВвода.БДДС.Выгрузить();
	ТаблицаДокумента.Свернуть("Аналитика_2,ЦФО,СтатьяОборотов,Период");
	
	СуммаОстатка = ДокументОбъект.СуммыКорректировок.Итог("Сумма");
	
	//БИТ АКриштопов 15.03.2016 ++
	Если СуммаОстатка = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдена сумма для корректировки бюджета, функция создания документа недоступна.";
		Сообщение.Сообщить();
		Элементы.КонтрольныеЗначенияБюджетовКомандаПеренести.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ДокументОбъект.СуммыКорректировок Цикл
		Если НачалоКвартала(Стр.Период) <> НачалоКвартала(ТекущаяДата()) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Перенос средств между кварталами запрещен, функция создания документа недоступна.";
			Сообщение.Сообщить();
			Элементы.КонтрольныеЗначенияБюджетовКомандаПеренести.Доступность = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	//БИТ АКриштопов 15.03.2016 --
	
	Для Каждого Стр Из КонтрольныеЗначенияБюджетов Цикл
		
		Если Стр.Переносить Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Аналитика_2",Стр.Аналитика_2);
			СтруктураОтбора.Вставить("ЦФО",Стр.ЦФО);
			СтруктураОтбора.Вставить("СтатьяОборотов",Стр.СтатьяОборотов);
			СтруктураОтбора.Вставить("Период",Стр.Период);
			
			СтрокиИсходногоДокумента = ТаблицаДокумента.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиИсходногоДокумента.Количество() Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Совпалают аналитики в исходном докумете и в текущей форме. Корректировка по равным аналитикам не приведет к корректировке бюджета.";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
			
						
			СуммаКПереносу = Мин(СуммаОстатка,Стр.СуммаРазность);
			
			Если СуммаКПереносу > 0 Тогда
				
				НоваяСтрока = ДокументОбъект.СуммыКорректировок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				НоваяСтрока.Сумма = СуммаКПереносу;
				НоваяСтрока.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Расход;
								
			КонецЕсли;
			
			СуммаОстатка = СуммаОстатка - СуммаКПереносу; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	//БИТ АКриштопов 15.03.2016 ++
	// приход
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидДвижения", Перечисления.бит_ВидДвиженияНакопления.Приход);	
	СтрокиПриход = ДокументОбъект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	пСумма 		= 0;
	пКоличество = 0;
	Для Каждого СтрокаПриход Из СтрокиПриход Цикл
		пСумма 		= пСумма + СтрокаПриход.Сумма;
	КонецЦикла;
	мСуммаПриход 	 	 = пСумма;
	СуммаДокументаПриход = мСуммаПриход;
	
	// расход
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидДвижения", Перечисления.бит_ВидДвиженияНакопления.Расход);
	СтрокиРасход = ДокументОбъект.СуммыКорректировок.НайтиСтроки(СтруктураОтбора);
	пСумма 		= 0;
	Для Каждого СтрокаРасход Из СтрокиРасход Цикл
		пСумма 		= пСумма + СтрокаРасход.Сумма;
	КонецЦикла;
	СуммаДокументаРасход = пСумма;
	
	Если СуммаДокументаПриход <> СуммаДокументаРасход Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не совпадают суммы ""Увеличение"" и ""За счет"". Документ не записан!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	//БИТ АКриштопов 15.03.2016 --
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Проведен документ: " + ДокументОбъект;
		Сообщение.Сообщить();
	Исключение		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Записан документ: " + ДокументОбъект;
		Сообщение.Сообщить();		
	КонецПопытки;
	
	
	
	
КонецПроцедуры

// BIT AMerkulov 24-04-2015 ++
&НаСервере
Функция ВвестиНаОснованииТонкийКлиент(Ссылка, ВыборСуммы) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокОснование",Ссылка);
	
	ТЗСтрок = Ссылка.БДДС.Выгрузить();
	Если Ссылка.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест ИЛИ Ссылка.Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда 
		ТЗСтрок.ЗаполнитьЗначения(Документы.бит_ФормаВводаБюджета.ПустаяСсылка(),"Аналитика_1");
	ИначеЕсли Ссылка.Сценарий = Справочники.СценарииПланирования.Контракт_Инвест Тогда  
		ТЗСтрок.ЗаполнитьЗначения(Ссылка.бит_БК_НомерЗаявки,"Аналитика_1");
	КонецЕсли;	
	
	ДанныеЗаполнения.Вставить("МассивСтрокПревышения", ТЗСтрок);
	ДанныеЗаполнения.Вставить("ВыборСуммы", ВыборСуммы);
	#Если Клиент Тогда
		ДанныеЗаполнения.Вставить("Дата", РабочаяДата);
	#Иначе
		ДанныеЗаполнения.Вставить("Дата", ТекущаяДата());
	#КонецЕсли
	
	ДокументКорректировка = Документы.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.СоздатьДокумент();
	ДокументКорректировка.Заполнить(ДанныеЗаполнения);
	
	//БИТ АКриштопов 15.03.2016 ++
	Для Каждого Стр Из ДокументКорректировка.СуммыКорректировок Цикл
		
		Если Стр.ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Приход Тогда
			
			Отбор =  Новый Структура("КонтролируемаяСтатья", Стр.СтатьяОборотов);
			СтруктураЗначений = РегистрыСведений.бит_БК_КонтролирующиеСтатьиОборотов.ПолучитьПоследнее(ТекущаяДата(),Отбор);
			
			Если Не СтруктураЗначений.КонтролирующаяСтатья.Пустая() И СтруктураЗначений.АктивностьСтроки = Истина Тогда			
				Стр.СтатьяОборотов = СтруктураЗначений.КонтролирующаяСтатья; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	//БИТ АКриштопов 15.03.2016	-
	
	Возврат ДокументКорректировка;

КонецФункции
// BIT AMerkulov 24-04-2015 --

&НаКлиенте
Процедура ПодсчитатьИтогВыделенных()
	Итог=0;
	для каждого стр из  КонтрольныеЗначенияБюджетов
		цикл		
		Если стр.Переносить тогда
			Итог=Итог+стр.СуммаРазность;
		конецесли;	
	конеццикла;  
КонецПроцедуры
	
Процедура УстановитьПометки(значение)	
	для каждого стр из  КонтрольныеЗначенияБюджетов
		цикл
		стр.Переносить=значение;	
	конеццикла;  	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеЗначенияБюджетовСнятьПометки(Команда)
	УстановитьПометки(ложь);
	ПодсчитатьИтогВыделенных();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеЗначенияБюджетовУстановитьПометки(Команда)
	УстановитьПометки(истина);
	ПодсчитатьИтогВыделенных();
КонецПроцедуры

&НаКлиенте
Процедура КонтрольныеЗначенияБюджетовПереноситьПриИзменении(Элемент)
	ПодсчитатьИтогВыделенных();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаборКонтрольныхЗначений()
		
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСценарий = Справочники[ИмяСправочникаСценарии].ПустаяСсылка();
	
	Если ТипЗнч(Сценарий) = Тип("СправочникСсылка.СценарииПланирования") тогда
		Периодичность = бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);
	иначе
		Периодичность = Перечисления.бит_ПериодичностьПланирования.Месяц;
	КонецЕсли;

	СтрПериодичность = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования,Периодичность);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ПараметрыСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("Период", Период);
	ПараметрыСКД.УстановитьЗначениеПараметра("Сценарий", Сценарий);
	ПараметрыСКД.УстановитьЗначениеПараметра("Периодичность", ПолучитьЗначениеПериодичности(СтрПериодичность));
	ПараметрыСКД.УстановитьЗначениеПараметра("Направление", Направление);

	//КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиСКД = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
												НастройкиСКД,
												,
												,
												Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаНаборКонтрольныхЗначений = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаНаборКонтрольныхЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	КонтрольныеЗначенияБюджетов.Очистить();
	для каждого стр из ТаблицаНаборКонтрольныхЗначений
	цикл	
		если стр.СуммаСценарийИсполнение>=0 тогда 
			нов=КонтрольныеЗначенияБюджетов.Добавить();
			ЗаполнитьЗначенияСвойств(нов,стр);	
		иначе	
	//		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Строка с отрицательной суммой "+строка(стр.СуммаСценарийИсполнение)+" пропущена");
		конецесли;
	конеццикла;
	
	// скроем колонки в которых нет значений
	НастроитьВидимостьКолонок(ТаблицаНаборКонтрольныхЗначений);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКолонок(ТаблицаИспользованияКолонок)
	
	Если ТаблицаИспользованияКолонок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСкрываемыхКолонок = Новый Массив;
	
	Для Каждого ТекущаяКолонка Из ТаблицаИспользованияКолонок.Колонки Цикл
		Если Найти(ТекущаяКолонка.Имя, "Показывать_") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСкрываемыхКолонок.Добавить(ТекущаяКолонка.Имя);
	КонецЦикла;
	
	Если НЕ МассивСкрываемыхКолонок.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		
		ТекстПолей 			= "";
		ТекстПолейМаксимум 	= "";
		ТекстПолейЕстьNULL 	= "";
		
		Для Каждого ТекущаяКолонка Из МассивСкрываемыхКолонок Цикл
			ТекстПолей = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
						|	ТаблицаКолонок." + ТекущаяКолонка;
						
			ТекстПолейМаксимум = ТекстПолейМаксимум + ?(ПустаяСтрока(ТекстПолейМаксимум), "", ",") + "
						|	МАКСИМУМ(ТаблицаКолонок." + ТекущаяКолонка + ") КАК " + ТекущаяКолонка;
						
			ТекстПолейЕстьNULL = ТекстПолейЕстьNULL + ?(ПустаяСтрока(ТекстПолейЕстьNULL), "", ",") + "
						|	ЕстьNULL(ТаблицаКолонок." + ТекущаяКолонка + ", ИСТИНА) КАК " + ТекущаяКолонка;			
		КонецЦикла; 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	"+ТекстПолей+"
		|ПОМЕСТИТЬ ТаблицаКолонок
		|ИЗ
		|	&ТаблицаКолонок КАК ТаблицаКолонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	"+ТекстПолейЕстьNULL+"
		|ИЗ
		|	(ВЫБРАТЬ
		|		"+ТекстПолейМаксимум+"
		|	ИЗ
		|		ТаблицаКолонок КАК ТаблицаКолонок) КАК ТаблицаКолонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаКолонок";
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("ТаблицаКолонок", ТаблицаИспользованияКолонок);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Для Каждого ТекущаяКолонка Из МассивСкрываемыхКолонок Цикл
				ИмяКолонкиТаблицы = СтрЗаменить(ТекущаяКолонка, "Показывать_", "");
				
				НайденнаяКолонкаТаблицы = Элементы.Найти("КонтрольныеЗначенияБюджетов"+ИмяКолонкиТаблицы);
				
				Если НайденнаяКолонкаТаблицы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НайденнаяКолонкаТаблицы.Видимость = Выборка[ТекущаяКолонка];
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеПериодичности(СтрПериодичность)
	
	ЗначениеПериодичности = 9;
	
	Если СтрПериодичность = "День" Тогда
		ЗначениеПериодичности = 6;
	ИначеЕсли СтрПериодичность = "Неделя" Тогда
		ЗначениеПериодичности = 7;
	ИначеЕсли СтрПериодичность = "Декада" Тогда
		ЗначениеПериодичности = 8;
	ИначеЕсли СтрПериодичность = "Месяц" Тогда
		ЗначениеПериодичности = 9;	
	ИначеЕсли СтрПериодичность = "Квартал" Тогда
		ЗначениеПериодичности = 10;
	ИначеЕсли СтрПериодичность = "Полугодие" Тогда
		ЗначениеПериодичности = 11;
	ИначеЕсли СтрПериодичность = "Год" Тогда
		ЗначениеПериодичности = 12;	
	КонецЕсли;
	
	Возврат ЗначениеПериодичности;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	бит_РаботаСДиалогамиКлиент.ИнициализироватьНастройкуПериода(НастройкаПериода, Период);
	
	Период.Вариант = ВариантСтандартногоПериода.ЭтотКвартал;
	
	ОбновитьНаборКонтрольныхЗначений();
	
	Если КонтрольныеЗначенияБюджетов.Количество() = 0 Тогда 
		ПоказатьПредупреждение(Неопределено, "Нет данных");
	КонецЕсли;

КонецПроцедуры
