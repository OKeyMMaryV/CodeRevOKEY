
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущаяДатаНачалаПланирования; // Хранит текущую дату начала планирования.

&НаКлиенте
Перем мТекущаяДатаОкончанияПланирования; // Хранит текущую дату окончания планирования.

&НаКлиенте
Перем мТекущийРежимЗависимыхОборотов; // Хранит текущий режим зависимых оборотов.

&НаКлиенте
Перем мТекущаяНастройкаФормы; // Хранит текущую настройку формы.

&НаКлиенте
Перем мТекущаяЕдиницаИзмеренияСумм; // Хранит текущую единицу измерения сумм.

&НаКлиенте
Перем мБуфер; // Служит для передачи данных копирования.

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

//+СБ Пискунова 10.03.2017 #2691
Перем лСБ_РеквизитыВидны;
//-CБ Пискунова 10.03.2017 №2691

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//{ bit_SVKushnirenko 28.12.2016 #2671.1
	рекСинхронизацияРеквизитовПроверкаПройдена = Ложь;
	//} bit_SVKushnirenko 28.12.2016 #2671.1
	
	//ОК Ванюков К. +//  // 2012-03-29
	ОК_ДополнитьДействияФормы();
	//ОК Ванюков К. -
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	флПрофДоступен =  бит_ЛицензированиеБФCервер.СборкаДоступна("ПРОФ");
	Элементы.КомандаПолучениеДанныхБюджета.Видимость = флПрофДоступен;
	Элементы.КомандаКопированиеДанныхГрафиковДоговоров.Видимость = флПрофДоступен И Метаданные.РегистрыНакопления.Найти("бит_ГрафикиДоговоров") <> Неопределено;
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ДокументОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
		//{ bit_SVKushnirenko 13.01.2017 #2671
		//При копировании очищаем табличную часть (замечание 2766)
		Объект.БДДС.Очистить();
		Объект.БДДС.Добавить(); //Создаем "чистую" строку
		Документы.бит_ФормаВводаБюджета.СинхронизацияПриемникИсточник(, Объект); //синхронизируем "чистые значения" с реквизитами-суррогатами тонкой формы
		Объект.БДДС.Очистить(); //окончательно очищаем данные ТЧ
		//} bit_SVKushnirenko 13.01.2017 #2671
	Иначе	
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ЭтоУХ = бит_ЛицензированиеБФCервер.СборкаДоступна("УХ");
	Элементы.КомандаЗагрузитьИзПроформы.Видимость = ЭтоУХ;
	Элементы.КомандаДобавитьИзПроформы.Видимость = ЭтоУХ;		
	
	ПериодПланирования.ДатаНачала = Объект.ДатаНачалаПланирования;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ПериодПланирования.ДатаОкончания = Объект.ДатаОкончанияПланирования;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// Определим ид БДДС для установки в новой строке.
	ТабБДДС   = Объект.БДДС.Выгрузить();
	ТекИдБДДС = бит_Бюджетирование.ОпределитьТекущийИД(ТабБДДС,"ИД");
	
	ТекстЗапроса = Объект.НастройкаФормы.ТекстЗапроса;
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();	
	КонецЕсли; 
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
		
		КнопкаГруппыПодменю = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
		
	КонецЦикла;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	ЗаполнитьКэшЗначений();
	
	фИспользоватьНормы  = ПолучитьФункциональнуюОпцию("бит_ИспользоватьНормыВБюджетировании");
	фИменаПараметраНорм = ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ПодготовитьСтруктурыСвязи(Объект.ПараметрНорм);	
	
	//Начало_бит_БК_Магомедов_15.05.2012
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда 
		Объект.Ответственный = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнойОтветственный");
	КонецЕсли;
	//Конец_бит_БК_Магомедов_15.05.2012
	
	// Восстановление дерева из хранилища.
	ТабДокДанные = ДокументОбъект.ПолучитьДерево();
	
	МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);
	фКэшЗначений.НастройкиСтатей = Новый Соответствие;
    бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(МассивСтатей, фКэшЗначений.НастройкиСтатей);
	
	// Инициализация компоновщика, используемого для настройки отборов.
	АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(ТекстЗапроса, Компоновщик, УникальныйИдентификатор);
	
	// Восстановление настроек построителя.
	Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		И Объект.Ссылка.Пустая()
		И ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		Объект.ПараметрНорм = Объект.НастройкаФормы.ПараметрНорм;
		фИменаПараметраНорм = ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ПодготовитьСтруктурыСвязи(Объект.ПараметрНорм);		
		
		НастройкаОб = Объект.НастройкаФормы.ПолучитьОбъект();
		СохраненнаяНастройка = НастройкаОб.ПолучитьНастройкиПостроителя();
	Иначе	
		СохраненнаяНастройка = ДокументОбъект.ПолучитьНастройкиПостроителя();
	КонецЕсли; 
	
	ВосстановитьОтбор(СохраненнаяНастройка);
	
	
    УстановитьПараметрыВыбораСтатей();	
	
	// Элементы управления для измерений несуществующих в смежном решении	
	// создаются программно для унификации кода.
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
	//бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияВкладкиОсновные(Элементы, Элементы.ГруппаДопАналитики);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияВкладкиОсновные(Элементы, Элементы.ГруппаОсновныеПраво);
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
	                                                              
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, 
		"БДДС_Редактирование", "БДДС", Элементы.БДДС_РедактированиеКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, 
		"БДДС", "БДДС", Элементы.БДДСКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, 
		"ЗависимыеОбороты_Редактирование", "ЗависимыеОбороты", Элементы.ЗависимыеОбороты_РедактированиеКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, 
		"ЗависимыеОбороты", "ЗависимыеОбороты", Элементы.ЗависимыеОборотыКоличество);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
	Элементы["БДДС_РедактированиеНоменклатурнаяГруппа"].Видимость = Ложь;
	Элементы["БДДС_РедактированиеБанковскийСчет"].Видимость = Ложь;
	Элементы["БДДСНоменклатурнаяГруппа"].Видимость = Ложь;
	Элементы["БДДСБанковскийСчет"].Видимость = Ложь;
	Элементы["ЗависимыеОбороты_РедактированиеНоменклатурнаяГруппа"].Видимость = Ложь;
	Элементы["ЗависимыеОбороты_РедактированиеБанковскийСчет"].Видимость = Ложь;
	Элементы["ЗависимыеОборотыНоменклатурнаяГруппа"].Видимость = Ложь;
	Элементы["ЗависимыеОборотыБанковскийСчет"].Видимость = Ложь;	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
	
	//1c-izhtc spawn 28.08.15 (	
	//// Настроим отображение полей доп. аналитик в форме.
	//бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтотОбъект,
	//	фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	//																			 
	//// Отображение дополнительных измерений в табличных полях.
	//бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
	//	"БДДС_Редактирование", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	//бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
	//	"БДДС", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	//бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
	//	"ЗависимыеОбороты_Редактирование", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	//бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
	//	"ЗависимыеОбороты", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	КолонкиТабПоля = Элементы.БДДС.ПодчиненныеЭлементы;
	
	СоответствиеИмен = Новый Соответствие;
	
	Для каждого КлючИЗначение Из фКэшЗначений.ИзмеренияДоп Цикл
		
		ИмяИзмерения = КлючИЗначение.Ключ;
		
		Если НЕ СоответствиеИмен[ИмяИзмерения] = Неопределено Тогда
			СтруктураДанных = СоответствиеИмен[ИмяИзмерения];
			
			ИмяКолонки 	= СтруктураДанных.ИмяПоля;
			Префикс 	= СтруктураДанных.Префикс;
			Постфикс 	= СтруктураДанных.Постфикс;
		Иначе
			ИмяКолонки 	= "БДДС" + ИмяИзмерения;
			Префикс		= "";
			Постфикс	= "";
		КонецЕсли;
		
		ТекущаяКолонка = КолонкиТабПоля.Найти(ИмяКолонки);
		
		Если ТекущаяКолонка <> Неопределено Тогда
			
			ТекущаяНастройка = фКэшЗначений.НастройкиИзмерений[ИмяИзмерения];
			
			Если ТекущаяНастройка <> Неопределено Тогда
				
				ТекущаяКолонка.Заголовок = Префикс + ТекущаяНастройка.Синоним + Постфикс;
				
				Если ТекущаяКолонка.Вид = ВидПоляФормы.ПолеВвода Тогда					
					ТекущаяКолонка.АвтоОтметкаНезаполненного = ТекущаяНастройка.Обязательное;
					ТекущаяКолонка.ОграничениеТипа 			 = ТекущаяНастройка.Аналитика.ТипЗначения; 				 
				КонецЕсли; 
				
			КонецЕсли;  
			
		КонецЕсли; // есть колонка с заданным именем
		
	КонецЦикла; // по именам дополнительных измерений
	//1c-izhtc spawn 28.08.15 )	
	
	// Установка оформления таблиц БДДС и ЗависимыеОбороты.
	ИменаТаблиц = Новый Массив;  
	Если НЕ фСкрытьСтрокиБюджета Тогда 		
		ИменаТаблиц.Добавить("БДДС");		
	КонецЕсли; 
	ИменаТаблиц.Добавить("БДДС_Редактирование");
	ОФормитьТаблицу("БДДС", ИменаТаблиц, МассивСтатей);
	
	ИменаТаблиц = Новый Массив; 
	Если НЕ фСкрытьСтрокиБюджета Тогда 		
		ИменаТаблиц.Добавить("ЗависимыеОбороты"); 		
	КонецЕсли; 
	ИменаТаблиц.Добавить("ЗависимыеОбороты_Редактирование");
	ОФормитьТаблицу("ЗависимыеОбороты", ИменаТаблиц, МассивСтатей);																	
	
	//{ bit SVKushnirenko Bit 25.04.2017 #2811
	//Включение обработчиков программно созданного реквизита "Проект"
	Элементы.Проект.УстановитьДействие("НачалоВыбора", "БДДСПроектНачалоВыбора");
	Элементы.Проект.УстановитьДействие("НачалоВыбораИзСписка", "БДДСПроектНачалоВыбораИзСписка");
	Элементы.Проект.УстановитьДействие("ОбработкаВыбора", "БДДСПроектОбработкаВыбора");
	//} bit SVKushnirenko Bit 25.04.2017 #2811
	
	//{ bit SVKushnirenko Bit 05.06.2017 #2735
	//ликвидация бага, который отменял обработчик "ПриИзменении" для этих атрибутов
	Элементы.БДДСбит_БК_Курс.УстановитьДействие("ПриИзменении", "БДДСбит_БК_КурсПриИзменении");
	Элементы.БДДСбит_БК_Кратность.УстановитьДействие("ПриИзменении", "БДДСбит_БК_КратностьПриИзменении");
	//} bit SVKushnirenko Bit 05.06.2017 #2735
	
	// Установка оформления таблицы отбор
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
    //бит_МеханизмПолученияДанных.УстановитьОформлениеТаблицыОтбор(УсловноеОформление);		
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		
	УстановитьФорматЧисел();	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-14 (#3808)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПрочитатьРССводныеОстатки();
	КонецЕсли;	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-14 (#3808)
	
	// Установка видимости/доступности элементов управления.
	УстановитьВидимость();

	// Установка видимости колонок табличных полей БДДС_Редактирование И ЗависимыеОбороты_Редактирование.
	УправлениеВидимостьюКолонокТаблиц();
	
	// Установка текущей страницы
	//1c-izhtc spawn 28.08.15 (
	//Если ТабДокДанные.Области.Количество() > 0 Тогда	
	//	 Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаДанныеБюджета;	
	//КонецЕсли; 
	//1c-izhtc spawn 28.08.15 )
	
	// Проверка наличия зафиксированных бюджетных данных.
	Если Объект.Проведен Тогда
		бит_Бюджетирование.ПроверитьФиксациюВФорме(ЭтотОбъект, Объект.Ссылка, Истина);
	КонецЕсли;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	АдресХранилищаДанных = ТекОбъект.ПолучитьХранилищеДанных(ТабДокДанные, ЭтотОбъект.УникальныйИдентификатор);
	
	УправлениеМенюПараметрыВычислений(ЭтотОбъект);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-05 (#2986)
	Статус = ДокументОбъект.мТекущийСтатус;
	мТекущийСтатус = Статус;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-05 (#2986)
	
	//1c-izhtc spawn (
	бит_ОпределитьРольПользователя();
	Если Параметры.Ключ.Пустая() тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) И Параметры.Свойство("СтруктураПараметров") Тогда 
			Параметры.СтруктураПараметров.Свойство("ВидОперации", Объект.ВидОперации);
		КонецЕсли;
		
		//{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
		//+Сенин С.В. 03.11.16 №2671
		//ИсходныйКод{
		//бит_УстановитьПредопределеннуюНастройкуФормы();
		//}ИсходныйКод
		бит_УстановитьПредопределеннуюНастройкуФормы(Ложь);
		//-Сенин С.В. 03.11.16 №2671
		//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	КонецЕсли;
	бит_НастроитьЭлементыФормы();
	бит_ЗаполнитьСписокСтатусов();
	//1c-izhtc spawn )
	
	//{ bit_SVKushnirenko 20.12.2016 #2669
	//ИсходныйКод{
	//// BIT AMErkulov 29-12-2015 ++
	////+Сундукова 28.03.2016
	//бит_ФормаВводаБюджетаВызовСервера.ОбновитьДанныеПоОстаткуБюджета(объект);
	////-Сундукова 28.03.2016
	//// BIT AMErkulov 29-12-2015 --
	//}ИсходныйКод
	
	бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(Объект);
	//} bit_SVKushnirenko 20.12.2016 #2669
	
	//БИТ АКриштопов 03032016 -->>
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-23 (#3065)
	//Если Объект.БДДС.Количество() > 1 Тогда
	//	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Истина;
	//Иначе
	//	Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Ложь;	
	//КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-23 (#3065)
	//БИТ АКриштопов 03032016 <<--
	
	//+СБ Пискунова 22.12.2016 #2691 
	//Добавим реквизиты на формы
	СБ_РаботаСФормамиОбъекты.бит_ФормаВводаБюджетаФормаДокументаУправляемаяПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);	
	ОпределитьДоступностьКнопокМаршрутаСогласования(); 
	//-СБ Пискунова 22.12.2016 #2691
	
	// ++ БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	бит_БК_Общий.ЗаполнитьСписокСтавокНДСДляДокументовБК(Элементы.БДДСбит_СтавкаНДС);	
	// -- БоровинскаяОА (СофтЛаб) 06.02.19 (#3131)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
	Попытка
		ЭтотОбъект.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		Сообщить("Документ редактируется другим пользователем. Все внесенные изменения не будут сохранены");
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецПопытки;
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-07-31 (#2874)
	//Определение формы инициатора
	мКэшЗначений = Новый Структура;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
	//DomainName = ПолучитьДоменноеИмяПользователя();
	//ЗаполнитьКэшЗначенийДляИдентификацииФормы(мКэшЗначений, DomainName);
	ЗаполнитьКэшЗначенийДляИдентификацииФормы(мКэшЗначений);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.Ссылка);	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-22 (#3511)
	ПараметрыФормы.Вставить("СтруктураПараметров", Новый Структура);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-22 (#3511)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-23 (#3928)
	//Если (НЕ мКэшЗначений.ЭтоПолноправныйПользователь) И
	//	(мКэшЗначений.ДоступнаРольGuest ИЛИ мКэшЗначений.ДоступнаРольОЦР) Тогда
	ок_ВидОткрываемойФормыИзФормыСпискаФВБ = бит_УправлениеПользователямиСервер.ПолучитьНастройкуПользователя(
															ПредопределенноеЗначение("ПланВидовХарактеристик.бит_НастройкиПользователей.ок_ВидОткрываемойФормыИзФормыСпискаФВБ"),
															бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	
	Если ЗначениеЗаполнено(ок_ВидОткрываемойФормыИзФормыСпискаФВБ) 
		И ВРег(ок_ВидОткрываемойФормыИзФормыСпискаФВБ) = ВРег("Тонкая")
		ИЛИ НЕ ЗначениеЗаполнено(ок_ВидОткрываемойФормыИзФормыСпискаФВБ)
			И (НЕ мКэшЗначений.ЭтоПолноправныйПользователь)
			И (мКэшЗначений.ДоступнаРольGuest ИЛИ мКэшЗначений.ДоступнаРольОЦР) Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-23 (#3926)	
	
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
		//ФормаИнициатора = ФормаИнициатора(мКэшЗначений.Инициатор.ИспользуемаяФорма);
		//
		//Если Объект.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
		//	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаКонтрактУправляемая", ПараметрыФормы);
		//	Отказ = Истина;
		//Иначе				
		//	Если ФормаИнициатора = "ФормаЗаявкаНаОперационныеРасходы" Тогда
		//		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
		//		Отказ = Истина;
		//	Иначе		
		//		Если Объект.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
		//			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаДокументаУправляемаяИнвест", ПараметрыФормы);
		//			Отказ = Истина;
		//		ИначеЕсли Объект.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
		//			ИЛИ  Объект.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный	Тогда
		//			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаДокументаУправляемаяGuest", ПараметрыФормы);
		//			Отказ = Истина;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если Объект.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаКонтрактУправляемая", ПараметрыФормы);
			Отказ = Истина;
		Иначе				
			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
			Отказ = Истина;
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-07-31 (#2874)
	
	мТекущаяДатаНачалаПланирования    = Объект.ДатаНачалаПланирования;
	мТекущаяДатаОкончанияПланирования = Объект.ДатаОкончанияПланирования;
	мТекущийРежимЗависимыхОборотов    = Объект.РежимЗависимыхОборотов;
	мТекущаяНастройкаФормы            = Объект.НастройкаФормы;
	мТекущаяЕдиницаИзмеренияСумм      = Объект.ЕдиницаИзмеренияСумм;
	
	мКэшРеквизитовФормы = Новый Соответствие;
	Для Каждого КиЗ Из фКэшЗначений.НастройкиИзмерений Цикл
		мКэшРеквизитовФормы.Вставить(КиЗ.Ключ);
	КонецЦикла; 
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("Сценарий");		
	мКэшРеквизитовФормы.Вставить("ПараметрНорм");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Изменение кода. Начало. 09.02.2018{{
	Оптимизация();
	// Изменение кода. Конец. 09.02.2018}}
	
	//Начало_БИТ_Магомедов.А.А_18.10.2011 
	бит_УстановитьРеквизитыИнициатора();
	Если Параметры.Ключ.Пустая() тогда
		мТекущаяНастройкаФормы = Объект.НастройкаФормы;
	КонецЕсли;
	//Конец_БИТ_Магомедов.А.А_18.10.2011 
		
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление (
	////БИТ АКриштопов ++ №2482
	//Попытка
	//	ЭтотОбъект.ЗаблокироватьДанныеФормыДляРедактирования();
	//Исключение
	//	Сообщить("Документ редактируется другим пользователем. Все внесенные изменения не будут сохранены");
	//	ЭтаФорма.ТолькоПросмотр = Истина;
	//КонецПопытки;
	////БИТ АКриштопов -- №2482
	//1С-ИжТиСи, Кондратьев, 03.2020, Обновление )
	
	//{ bit SVKushnirenko Bit 16.01.2017 #2671.дпн
	УстановитьДоступностьНеобходимостиДоговора();
	//} bit SVKushnirenko Bit 16.01.2017 #2671.дпн
	
	//{ bit SVKushnirenko Bit 21.03.2017 #2759
	ДоступностьЦелиПриобретенияОборудования();
	//} bit SVKushnirenko Bit 21.03.2017 #2759
	
	//{ bit SVKushnirenko Bit 25.04.2017 #2811
	УправлениеПолемПроектНаФорме();
	//} bit SVKushnirenko Bit 25.04.2017 #2811
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-04-06 (#2986)
	ТекущийЭлемент = Элементы.БДДС;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-04-06 (#2986)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-08 (#2979)
	ПодключитьОбработчикОжидания("ОбновитьПеременныйИтога",1,Ложь);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-08 (#2979)
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 25.01.2020 (#3591) 
	ОбновитьЭлементыРасшифровкиЗатратОС();
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 25.01.2020 (#3591)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальныйИдентификатор Тогда
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-24 (#3877)
		Если ИмяСобытия = "ВыбратьПериодЗавершение" Тогда		        
	        РедактированиеПериодаЗавершение(Параметр.Результат, Неопределено);	        
	    ИначеЕсли ИмяСобытия = "ВосстановитьЗагруженныеИзExcelДанные" Тогда	        
	        ВосстановитьЗагруженныеИзExcelДанные(Параметр.ИмяТабЧасти, Параметр.Ссылка);			
		ИначеЕсли ИмяСобытия = "ИзменениеТабличнойЧасти" Тогда			
			ПерезаполнитьТабличнуюЧасть(Параметр);			
		ИначеЕсли ИмяСобытия = "ПолучениеДанныхБюджета" Тогда			
			ОбработкаПодбораБюджета(Параметр);			
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-24 (#3877)
		
		Если ИмяСобытия = "ИзмененСтатус" Тогда	      
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-06-01 (#3021)
			Если Параметр.Свойство("Ссылка") И 
				Параметр.Ссылка <> Объект.Ссылка
				Тогда
				//Не наша форма
				Возврат;
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-06-01 (#3021)
	        ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
			СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
			УстановитьВидимость();	        
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-24 (#3877)	
		//ИначеЕсли ИмяСобытия = "ВыбратьПериодЗавершение" Тогда		        
		//    РедактированиеПериодаЗавершение(Параметр.Результат, Неопределено);	        
		//ИначеЕсли ИмяСобытия = "ВосстановитьЗагруженныеИзExcelДанные" Тогда	        
		//    ВосстановитьЗагруженныеИзExcelДанные(Параметр.ИмяТабЧасти, Параметр.Ссылка);			
		//ИначеЕсли ИмяСобытия = "ИзменениеТабличнойЧасти" Тогда			
		//	ПерезаполнитьТабличнуюЧасть(Параметр);			
		//ИначеЕсли ИмяСобытия = "ПолучениеДанныхБюджета" Тогда			
		//	ОбработкаПодбораБюджета(Параметр);			
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-24 (#3877)
		//{ bit SVKushnirenko Bit 27.01.2017 #2657
		ИначеЕсли ИмяСобытия = "бит_БК_ИзмСтатусаПослеИзмБалансаЗаявок" Тогда 
			
			пОбъектСсылка = Объект.Ссылка;
			Если Параметр.Ссылки.Найти(пОбъектСсылка) <>  Неопределено Тогда //в параметре массив измененных заявок
				
				пТекущийСтатусСтруктура = бит_БК_ПолучитьТекущийСтатусЗаявки(пОбъектСсылка);
				
				Если пТекущийСтатусСтруктура.Статус <>  Статус Тогда 
					
					//Обновляю то что нашел в коде для этого случая - жудкий бардак.. (((
					мТекущийСтатус = пТекущийСтатусСтруктура.Статус; //не очень понятная  логика, но теоретически это нужно сделать при обновлении статуса
					Статус = пТекущийСтатусСтруктура.Статус;
					ДатаИзмененияСтатуса = пТекущийСтатусСтруктура.ДатаИзмененияСтатуса;	
					
					СформироватьИнформациюСтатус(пТекущийСтатусСтруктура.Статус, пТекущийСтатусСтруктура.ДатаИзмененияСтатуса, ИнформацияСтатус);
					
					//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-31 (#2941)
					ОпределитьДоступностьКнопокМаршрутаСогласования();
					//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-31 (#2941)
					
				КонецЕсли;
			КонецЕсли;
		//} bit SVKushnirenko Bit 27.01.2017 #2657
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-24 (#2969)
		ИначеЕсли ИмяСобытия = "СБ_УстановленыРешения" Тогда 
			Прочитать();
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-24 (#2969)
		
		// ОКЕЙ Гиль А.В.(Софтлаб) Начало 28.01.2020 (#3591) 
		ИначеЕсли ИмяСобытия = "ЗаписьДетализацииЗатратОС" Тогда	
			
			Если Параметр.Свойство("ДокументРасшифровки") Тогда
				ДокументРасшифровкиЗатратНаОС = Параметр.ДокументРасшифровки;	
			КонецЕсли;
			
			ОбновитьЭлементыРасшифровкиЗатратОС();
			
		// ОКЕЙ Гиль А.В.(Софтлаб) Конец 28.01.2020 (#3591)
		КонецЕсли;
		
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-24 (#3877)
	//КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-24 (#3877)
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//{ bit_SVKushnirenko 31.05.2017 #2811
	//ИсходныйКод{
	//ИзмененоНаОпер 		= Ложь;
	//ИзмененоНаИнвест 	= Ложь;
	//ИзмененоНаУниверс 	= Ложь;
	//
	//// + БИТ AMerkulov 2014-01-24 /  Универсальная заявка
	//Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	//	ИЛИ Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
	//	ИЛИ  Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
	//	
	//	КоличествоУ = 0;
	//	КоличествоИнвест = 0;
	//	Для Каждого Строка Из Объект.БДДС Цикл
	//		
	//		Если Строка.Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда
	//			КоличествоУ = КоличествоУ + 1;                                                      
	//		ИначеЕсли Строка.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест Тогда
	//			КоличествоИнвест = КоличествоИнвест + 1;			
	//		КонецЕсли;
	//		
	//		
	//	КонецЦикла;
	//	
	//	Если Объект.БДДС.Количество() > 0 И КоличествоИнвест = Объект.БДДС.Количество() И Объект.ВидОперации <> фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
	//		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный;
	//		ИзмененоНаИнвест = Истина;			
	//		Сообщить("Вид операции изменен на ""Заявка(инвестиционный)""");
	//	КонецЕсли;
	//	
	//	Если Объект.БДДС.Количество() > 0 И КоличествоУ = Объект.БДДС.Количество() И Объект.ВидОперации <> фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда
	//		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный;
	//		ИзмененоНаОпер = Истина;
	//		Сообщить("Вид операции изменен на ""Заявка(операционный)""");
	//	КонецЕсли;		
	//	
	//	
	//	Если Объект.ВидОперации <> фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
	//		И Объект.БДДС.Количество() > 0 И  КоличествоИнвест <> Объект.БДДС.Количество() И  КоличествоУ <> Объект.БДДС.Количество() Тогда
	//		
	//		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный;		
	//		ИзмененоНаУниверс = Истина;
	//		Сообщить("Вид операции изменен на ""Заявка(универсальный)""");
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//// - БИТ AMerkulov  /  Универсальная заявка
	//
	//// + БИТ AMerkulov 2014-01-24 /  Универсальная заявка
	//Если ИзмененоНаИнвест Или ИзмененоНаОпер Или ИзмененоНаУниверс Тогда
	//	УстановитьВидимостьРеквизитов();
	//	
	//	// Отобразить в заголовке формы вид операции.
	//	УстановитьЗаголовокФормыДокумента(ЭтаФорма, фКэшЗначений.ПредставлениеОбъекта, Параметры.Ключ.Пустая(), Объект.Проведен);
	//	
	//	//сбросим Настройку и сценарий
	//	ТекущийОбъект.Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();
	//	ТекущийОбъект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ПустаяСсылка();
	//	ТекущийОбъект.мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка();
	//	Статус = ТекущийОбъект.мТекущийСтатус;
	//	
	//	бит_УстановитьПредопределеннуюНастройкуФормы(Ложь);
	//	
	//	ТекущийОбъект.ВидОперации = Объект.ВидОперации;
	//	ТекущийОбъект.Сценарий = Объект.Сценарий;
	//	ТекущийОбъект.НастройкаФормы = Объект.НастройкаФормы;
	//	
	//	бит_НастроитьЭлементыФормы();
	//	бит_ЗаполнитьСписокСтатусов();
	//КонецЕсли;
	//// - БИТ AMerkulov  /  Универсальная заявка
	//Для Каждого Строка Из ТекущийОбъект.БДДС Цикл				
	//	Строка.ОК_НоменклатураПроизв = Строка.бит_БК_НаименованиеОборудования;//Строка.бит_БК_Расход.Наименование + " " + //БИТ АКриштопов 04072016 ++ №2482 				
	//КонецЦикла;	                          
	//}ИсходныйКод
	
	//помечен на удаление код, активно изменяющий данные, которые в случае отказа, не отражаются на форме
	//его исполнение перенесено на клиентский метод ПередЗаписью
	//} bit_SVKushnirenko 31.05.2017 #2811

	//1c-izhtc spawn 28.08.15 (
	ТекущийОбъект.ДополнительныеСвойства.Вставить("бит_БК_СтатусВручную", бит_БК_СтатусВручную);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("мСтатусУстановленныйВручную", мСтатусУстановленныйВручную);
	бит_БК_СтатусВручную = Ложь;
	//1c-izhtc spawn 28.08.15 )
	
	// Сохранение дерева данных.
	бит_БюджетированиеКлиентСервер.ОчиститьВыделениеАргументов(ТабДокДанные, фВыделенныеОбласти);
	ТекущийОбъект.СохранитьДерево(ТабДокДанные);
	
	// Сохранение отбора построителя.
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
	ТекущийОбъект.СохранитьНастройкиПостроителя(СтруктураНастройки);
	
	// Изменение кода. Начало. 09.02.2018{{
	ТекущийОбъект.СохранитьДанныеВХранилище(АдресХранилищаДанных);
	// Изменение кода. Конец. 09.02.2018}}
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	УстановитьСостояниеДокумента();	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-14 (#3808)	
	ПрочитатьРССводныеОстатки();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-14 (#3808)
	
	УстановитьВидимость();	
	
	// BIT AMErkulov 29-12-2015 ++
	//+Сундукова 28.03.2016
	//Сундукова 30.03.16 - убираю, т.к. после записи уже ничего не изменяется.
	//	бит_ФормаВводаБюджетаВызовСервера.ОбновитьДанныеПоОстаткуБюджета(объект);
	//-Сундукова 28.03.2016
	// BIT AMErkulov 29-12-2015 --
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	#Если НЕ ВебКлиент Тогда
		Элементы.ТабДокДанные.ТекущаяОбласть = Неопределено;
	#КонецЕсли
	
	//+СБ Пискунова #2691
	мТекущаяНастройкаФормы = Объект.НастройкаФормы;
	//ОбновитьОЦР();
	//-СБ Пискунова #2691
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-19 (#2986)
	Если мТекущийСтатус <> Статус Тогда 
		мТекущийСтатус = Статус;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-19 (#2986)
	
	//+ СБ Пискунова #2691 03.02.2017 Установим доступность кнопок: 	
	ОпределитьДоступностьКнопокМаршрутаСогласования(); 
	//- СБ Пискунова #2691 03.02.2017 Установим доступность кнопок
	
	//{ bit SVKushnirenko Bit 27.01.2017 #2657
	пМассивОбновления = ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(Объект.Ссылка);
	Если пМассивОбновления.Количество()  >  0 Тогда
		
		Оповестить("бит_БК_ИзмСтатусаПослеИзмБалансаЗаявок", Новый Структура("Ссылки", пМассивОбновления));
	КонецЕсли;
	//} bit SVKushnirenko Bit 27.01.2017 #2657

	//{ bit SVKushnirenko Bit 23.03.2017 #2735
	Элементы.фБДДСбит_КопированиеТЧ_ФВБ.Доступность = НЕ Объект.Проведен;
	//} bit SVKushnirenko Bit 23.03.2017 #2735
	
	//{ bit SVKushnirenko Bit 13.06.2017 #2759
	Если рекПроверкаЗаполнения_бит_БК_ЦельПриобретенияОборудования И 
		ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") И
		СокрЛП(Объект.бит_БК_ЦельПриобретенияОборудования) = "Взамен" Тогда //Вывод предупреждения
		
		рекТекстСообщенияПоОборудованию = 
		"Внимание! Старое оборудование, которое планируется заменить на новое,
		|должно быть списано с учета. Оформите акты списания оборудования!";
		
		ПодключитьОбработчикОжидания("ОбработчикВыводаСообщенияПоОборудованию", 1.5, Истина);
	КонецЕсли;
	//При обновлении в предрабе, проверить редакцию изменения ПриЗаписи() - она изменилась!
	//} bit SVKushnirenko Bit 13.06.2017 #2759
	
	// ОКЕЙ Гиль А.В.(Софтлаб) Начало 25.01.2020 (#3591) 
	ОбновитьЭлементыРасшифровкиЗатратОС();	
	// ОКЕЙ Гиль А.В.(Софтлаб) Конец 25.01.2020 (#3591)
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Состояние кнопки Отбор.
	Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Пометка = фУстанавливатьОтборЗависимых;
	УстановитьКартинкуКнопкиОтбор();	
	
	ВидимостьСтрокБюджета();
	ПереключитьПолноэкранныйРежим();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ФормаВводаБюджета";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	//+CБ Пискунова 01.03.2017 #2691
	Если 	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения и Объект.СБ_ПроцессЗапущен Тогда
		Результат = Вопрос("После отмены проведения будет очищен алгоритм. Продолжить?",РежимДиалогаВопрос.ДаНет);
		Если  Результат = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения  Тогда 
		Элементы.СБ_ЗапускПроцесса.Доступность = Ложь;
		Элементы.СБ_НеОтправлятьУведомленияНаПочту.Доступность = Ложь;
		Элементы.СБ_СуммаПредоплатыИтого.Доступность = Ложь;
		Элементы.СБ_СуммаПредоплаты.Доступность = Ложь; 
	КонецЕсли;
	//-CБ Пискунова 01.03.2017 #2691	

	//{ bit SVKushnirenko Bit 13.06.2017 #2811
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда  
		
		Для каждого пСтрока Из Объект.БДДС Цикл
			
			Если НЕ ЗначениеДоступностиПроект(Объект.ВидОперации, пСтрока.СтатьяОборотов) Тогда  
				
				пСтрока.Проект = Неопределено;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	//} bit SVKushnirenko Bit 13.06.2017 #2811
		
	// + БИТ AMerkulov 2014-01-31 /  Установка номера
	
	//Начало_бит_БК_Магомедов_12.03.2012
	//Для вида операции заявка_операционный номер должен быть задан до записи и не должен начинаться с W(признак документа созданного в WEB)
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
	//	Или ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда 
	//	Если НЕ ЗначениеЗаполнено(Номер) ИЛИ Сред(Номер,1,1) = "W" Тогда 
	//		Предупреждение("Перед записью необходимо присвоить номер. Номер не должен начинаться с <W>!",10);                  
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//Конец_бит_БК_Магомедов_12.03.2012 
	
	// - БИТ AMerkulov 2014-01-31 /  Установка номера
	
	//{ bit_SVKushnirenko 28.12.2016 #2671.1
	пПредставлениеНесоответствий = "";
	Если ЕстьНеобходимостьСинхронизации(пПредставлениеНесоответствий) Тогда
		
		Если Объект.ВидОперации <>  ПолучитьПеречислениеКонтракт() И Объект.Дата < Дата("20170101000000") Тогда //проверка синхронизации данных документа
			
			Если ЗначениеЗаполнено(Объект.Ссылка) И
				НЕ рекСинхронизацияРеквизитовПроверкаПройдена Тогда //документ сохранен и не пройдена необходимая синхронизация
				
				пОповещение = Новый ОписаниеОповещения("ПодтверждениеСинхронизации", ЭтотОбъект);
				
				ПоказатьВопрос(пОповещение,
				пПредставлениеНесоответствий + Символы.ПС + "Выполнить синхронизацию данных?",
				РежимДиалогаВопрос.ДаНет,
				40, // таймаут в секундах
				КодВозвратаДиалога.Нет, //кнопка по умолчанию
				"Внимание!");
				
				Отказ = Истина;
			Иначе//безусловная синхронизация
				
				СинхронизироватьРеквизиты();
			КонецЕсли;
		Иначе//безусловная синхронизация
			
			СинхронизироватьРеквизиты();
		КонецЕсли;
	КонецЕсли;
	
	рекСинхронизацияРеквизитовПроверкаПройдена = Ложь;
	//} bit_SVKushnirenko 28.12.2016 #2671.1
	
	//{ bit SVKushnirenko Bit 13.06.2017 #2759
	Если рекПроверкаЗаполнения_бит_БК_ЦельПриобретенияОборудования И 
		ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") И
		СокрЛП(Объект.бит_БК_ЦельПриобретенияОборудования) = "" Тогда  //Вывод предупреждения
		
		пСписокСтатей = СписокСтатейОборотовСОборудованиеДа(Объект.БДДС);
		
		рекТекстСообщенияПоОборудованию = 
		"Не заполнен реквизит “Цель приобретения оборудования”. 
		|Если хотя бы одна единица из оборудования по Статьям: " + Символы.ПС + 
		пСписокСтатей + Символы.ПС +
		"приобретается взамен старого оборудования, то следует выбрать значение ""Взамен старого""";
		
		ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Запись"); //Принудительно выставляем запись, даже если было проведение
		ПодключитьОбработчикОжидания("ОбработчикВыводаСообщенияПоОборудованию", 1.5, Истина);
		
		Отказ = Истина;
	КонецЕсли;
	//Изменено после переноса в Предраб!
	//} bit SVKushnirenko Bit 13.06.2017 #2759
	
	//{ bit SVKushnirenko Bit 25.04.2017 #2811
	ПостроениеВидаОперацииНаОснованииДанныхСтатейТчБДДС();
	УстановитьПредставлениеПериода();
	//} bit SVKushnirenko Bit 25.04.2017 #2811

КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормыПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("НастройкаФормыПриИзмененииЗавершение", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(Оповещение);
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура НастройкаФормыПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		флМожноИзменять = ИзменениеНастройкиФормы();	
		Если не флМожноИзменять Тогда
			Объект.НастройкаФормы = мТекущаяНастройкаФормы;
		Иначе
			мТекущаяНастройкаФормы = Объект.НастройкаФормы;	
		КонецЕсли; 
	Иначе	
		Объект.НастройкаФормы = мТекущаяНастройкаФормы;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	ПереключательСценарийПриИзменении(Элемент);
	Возврат;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	флПересчитатьСуммы   = Ложь;
	флПерезаполнитьНормы = Ложь;
	
	РезАнализ = АнализИзмененийСценария(мКэшРеквизитовФормы["Сценарий"]);
	
	Если РезАнализ.МожноИзменятьСценарий Тогда
		
		// Сценарий можно изменить без очистки данных.
		флИзменитсяВалюта = РезАнализ.ИзменитсяВалюта;
		флСпроситьОНормах = ?(фИспользоватьНормы И Объект.БДДС.Количество() > 0 И ЗначениеЗаполнено(Объект.ПараметрНорм), Истина, Ложь);
		
		Если флИзменитсяВалюта ИЛИ флСпроситьОНормах Тогда
			Оповещение = Новый ОписаниеОповещения("СценарийВопросЗавершение", ЭтотОбъект);
			РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ПараметрыФормы = Новый Структура("ИзменитсяВалюта, СпроситьОНормах", флИзменитсяВалюта, флСпроситьОНормах);
			ОткрытьФорму("ОбщаяФорма.бит_ВопросПриИзмененииСценарияУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОкна);
		Иначе
			Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
				ИзменениеСценария(флПересчитатьСуммы, флПерезаполнитьНормы);
				ДобавитьВКэш("Сценарий");
				ДобавитьВКэш("ВалютаДокумента");				
			КонецЕсли;
		КонецЕсли; 
	Иначе	
		
		Если фКэшЗначений.НастройкиФормы.ФиксированныйМакет Тогда
			ВывестиСообщениеНесовпадениеПериодичности();
			ИзвлечьИзКэша("Сценарий");
			Возврат;
		Иначе	
			Если Объект.БДДС.Количество() > 0 Тогда
				// Необходимо очистить данные, т.к. не совпадают периодичности.
				Оповещение = Новый ОписаниеОповещения("СценарийОчисткаВопросЗавершение", ЭтотОбъект);
				ТекстСообщения =  НСтр("ru = 'Данные будут очищены. Продолжить?'");
				ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
			Иначе	
		        ИзменениеСценарияОчисткаДанных();	
				ДобавитьВКэш("Сценарий");				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "СценарийВопросЗавершение".
// 
// Параметры:
// РезСтруктура - Структура
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура СценарийВопросЗавершение(РезСтруктура, ДополнительныеПараметры) Экспорт
	
	флПересчитатьСуммы   = Ложь;
	флПерезаполнитьНормы = Ложь;
	
	Если ТипЗнч(РезСтруктура) = Тип("Структура") Тогда
		флПересчитатьСуммы   = РезСтруктура.ПересчитатьСуммы;
		флПерезаполнитьНормы = РезСтруктура.ПерезаполнитьНормы;
	Иначе	
		ИзвлечьИзКэша("Сценарий");
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ИзменениеСценария(флПересчитатьСуммы, флПерезаполнитьНормы);
	КонецЕсли;	
	ДобавитьВКэш("Сценарий");
	
КонецПроцедуры	

// Процедура обработчик оповещения "СценарийОчисткаВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура СценарийОчисткаВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменениеСценарияОчисткаДанных();
		ДобавитьВКэш("Сценарий");
		ДобавитьВКэш("ВалютаДокумента");
	Иначе	
		ИзвлечьИзКэша("Сценарий");
	КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Процедура ПараметрНормНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоВалюты", Истина);
	
	ОткрытьФорму("ПланВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВопросЗаменаЗначенияПоУмолчаниюЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ВопросЗаменаЗначенияПоУмолчаниюЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РезДействие = "Замена";
	Иначе
		РезДействие = "Отмена";
	КонецЕсли; 
	
	ИмяЭлемента = ДополнительныеДанные.Имя;
	Если РезДействие = "Отмена" Тогда
		Объект[ИмяЭлемента] = мКэшРеквизитовФормы[ИмяЭлемента];
		Возврат;
	КонецЕсли; 
	
	флВыполнитьЗамену = ?(РезДействие = "Замена", Истина, Ложь);
	Если флВыполнитьЗамену Тогда
		ВыполнитьЗаменуАналитикиПоУмолчанию(ИмяЭлемента, Объект[ИмяЭлемента]);
	КонецЕсли;
	
	мКэшРеквизитовФормы[ИмяЭлемента] = Объект[ИмяЭлемента];
	
КонецПроцедуры	

&НаКлиенте
Процедура СтатьяОборотовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяОборотов) Тогда
		ИзменениеСтатьиШапка();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	флПерезаполнить = Ложь;
	Если ( Объект.БДДС.Количество() > 0 ИЛИ Объект.ЗависимыеОбороты.Количество() > 0 ) 
		   И Объект.ВалютаДокумента <> мКэшРеквизитовФормы["ВалютаДокумента"] Тогда
		   
		Оповещение = Новый ОписаниеОповещения("ВалютаДокументаВопросЗавершение", ЭтотОбъект);   
		ТекстВопроса =  НСтр("ru = 'Изменена валюта документа. Пересчитать суммы в документе?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 15, КодВозвратаДиалога.Отмена);
	Иначе	
		ИзменениеВалюты(Ложь, мКэшРеквизитовФормы["ВалютаДокумента"]);
		ДобавитьВКэш("ВалютаДокумента");	
	КонецЕсли; 
		
КонецПроцедуры

// Процедура обработчик оповещения "ВалютаДокументаВопросЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ВалютаДокументаВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменениеВалюты(Истина, мКэшРеквизитовФормы["ВалютаДокумента"]);
		ДобавитьВКэш("ВалютаДокумента");	
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ИзменениеВалюты(Ложь, мКэшРеквизитовФормы["ВалютаДокумента"]);
		ДобавитьВКэш("ВалютаДокумента");	
	Иначе	 
		ИзвлечьИзКэша("ВалютаДокумента");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияДатаНачалаПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ПериодПланированияДатаНачалаПриИзмененииЗавершение", ЭтотОбъект); 
	Объект.ДатаНачалаПланирования = ПериодПланирования.ДатаНачала;
	ЗадатьВопросОбОчисткеДанных(Оповещение); 
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ПериодПланированияДатаНачалаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Выполнение по согласию пользователя.
		Если Объект.БДДС.Количество() > 0 Тогда
			ОчиститьВсе();
		КонецЕсли; 
		мТекущаяДатаНачалаПланирования = Объект.ДатаНачалаПланирования;
		ОбновитьКурсСервер();
	Иначе	
		// Отказ от выполнения.
		Объект.ДатаНачалаПланирования = мТекущаяДатаНачалаПланирования;
	КонецЕсли; 
	ПериодПланирования.ДатаНачала = Объект.ДатаНачалаПланирования;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияДатаОкончанияПриИзменении(Элемент)
	
	Объект.ДатаОкончанияПланирования = ПериодПланирования.ДатаОкончания;
	Оповещение = Новый ОписаниеОповещения("ПериодПланированияДатаОкончанияПриИзмененииЗавершение", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(Оповещение);
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ПериодПланированияДатаОкончанияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Выполнение с согласия пользователя.
		Если Объект.БДДС.Количество() > 0 Тогда
			ОчиститьВсе();
		КонецЕсли; 
		мТекущаяДатаОкончанияПланирования = Объект.ДатаОкончанияПланирования;
		ПериодПланирования.ДатаОкончания  = Объект.ДатаОкончанияПланирования;	
	Иначе	
		// Отказ от выполнения.
		Объект.ДатаОкончанияПланирования = мТекущаяДатаОкончанияПланирования;
		ПериодПланирования.ДатаОкончания = Объект.ДатаОкончанияПланирования;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовПриИзменении(Элемент)
	
	флОчищать = Истина;
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
		Если Объект.РежимЗависимыхОборотов = ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.НеФормировать") Тогда
            РежимДиалога     = РежимДиалогаВопрос.ОКОтмена;
			ОтветПоУмолчанию = КодВозвратаДиалога.ОК;
		Иначе	
            РежимДиалога     = РежимДиалогаВопрос.ДаНетОтмена;	
			ОтветПоУмолчанию = КодВозвратаДиалога.Да;
		КонецЕсли; 
		Оповещение = Новый ОписаниеОповещения("РежимЗависимыхОборотовВопросЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Изменен режим зависимых оборотов. Очистить сформированные зависимые обороты?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалога, 15, ОтветПоУмолчанию); 
	Иначе	
		РежемЗависимыхОборотовИзменение(флОчищать);
		мТекущийРежимЗависимыхОборотов = Объект.РежимЗависимыхОборотов;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "РежимЗависимыхОборотовВопросЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура РежимЗависимыхОборотовВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	флОчищать = Истина;
	Если Результат = КодВозвратаДиалога.Да ИЛИ Результат = КодВозвратаДиалога.ОК Тогда
		РежемЗависимыхОборотовИзменение(флОчищать);
		мТекущийРежимЗависимыхОборотов = Объект.РежимЗависимыхОборотов;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		флОчищать = Ложь;
		Если Объект.РежимЗависимыхОборотов = ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.НеФормировать") Тогда
			флОчищать = Истина;	
		КонецЕсли; 
		РежемЗависимыхОборотовИзменение(флОчищать);
		мТекущийРежимЗависимыхОборотов = Объект.РежимЗависимыхОборотов;
	Иначе	
		Объект.РежимЗависимыхОборотов = мТекущийРежимЗависимыхОборотов;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияСуммПриИзменении(Элемент)
	
	Если Не мТекущаяЕдиницаИзмеренияСумм = Объект.ЕдиницаИзмеренияСумм
		 И Объект.БДДС.Количество() > 0 Тогда
		
		ТекстСообщения =  НСтр("ru = 'Изменилась единица измерения сумм. Пересчитать суммы в документе?'");
		ТекстЗаголовка =  НСтр("ru = 'Изменение единицы измерения сумм'");
		
		Оповещение = Новый ОписаниеОповещения("ЕдиницаИзмеренияВопросЗавершение",ЭтотОбъект);
		ПоказатьВопрос(Оповещение
		               ,ТекстСообщения
					   ,РежимДиалогаВопрос.ДаНет
					   ,30
					   ,КодВозвратаДиалога.Нет
					   ,ТекстЗаголовка); 
		
	КонецЕсли;
	УстановитьФорматЧиселКлиент();
	
КонецПроцедуры

// Процедура обработчик оповещения "ЕдиницаИзмеренияВопросЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ЕдиницаИзмеренияВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьПересчетРазмерностиСумм(мТекущаяЕдиницаИзмеренияСумм);
		мТекущаяЕдиницаИзмеренияСумм = Объект.ЕдиницаИзмеренияСумм;
	Иначе
		Объект.ЕдиницаИзмеренияСумм = мТекущаяЕдиницаИзмеренияСумм;
	КонецЕсли; 
	УстановитьФорматЧисел();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабДокДанные

&НаКлиенте
Процедура ТабДокДанныеПриАктивизацииОбласти(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикТабДокДанныеПриАктивизацииОбласти", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикТабДокДанныеПриАктивизацииОбласти()
	
	Если ТабДокДанные.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	ЗащищеннаяОбласть = ЭтоЗащищеннаяОбласть(ОблМакета);
	ИменаВыделенныхОбластей = ПолучитьИменаВыделенныхОбластей();
	Если ИменаВыделенныхОбластей.Количество() > 1 Тогда
		ВыделеноНесколькоЯчеек	= Истина;
	Иначе
		ВыделеноНесколькоЯчеек = Ложь;
	КонецЕсли;
	
	// Очищаем выделенные области табличного документа.
	бит_БюджетированиеКлиентСервер.ОчиститьВыделениеАргументов(ТабДокДанные, фВыделенныеОбласти);	
	
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			ОбластьР = ОблМакета.Расшифровка;
			Если ОбластьР.Вид = "Значение" Тогда
				// Устанавливаем отбор по периоду и комбинации измерений.
				СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(ОбластьР);
				Элементы.БДДС_Редактирование.ОтборСтрок = Новый ФиксированнаяСтруктура(СтрОтбор);
				УправлениеСтраницейОжиданияБДДС(Ложь);
				Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
					НайденныеСтроки = Объект.БДДС.НайтиСтроки(СтрОтбор);
					ТекущаяСтрока = ?(НайденныеСтроки.Количество() > 0, НайденныеСтроки[0], Неопределено);
					Если НЕ ТекущаяСтрока = Неопределено Тогда
						Элементы.ЗависимыеОбороты_Редактирование.ОтборСтрок = Новый ФиксированнаяСтруктура("Ид_Родитель", ТекущаяСтрока.Ид);
						УправлениеСтраницейОжиданияЗависимыеОбороты(Ложь);
					Иначе
						УправлениеСтраницейОжиданияЗависимыеОбороты(Истина);
					КонецЕсли; 
				КонецЕсли; 
				фВыделенныеОбласти.Добавить(ОбластьР.Имя);
				бит_БюджетированиеКлиент.ВеделитьОбласть(ТабДокДанные, фВыделенныеОбласти);
			Иначе	
				УправлениеСтраницейОжиданияБДДС(Истина);
				УправлениеСтраницейОжиданияЗависимыеОбороты(Истина);
			КонецЕсли; 
			
			// Формирование представления формулы.
			Если ПустаяСтрока(ОбластьР.Формула) Тогда
				ФормулаПредставление = "";
			Иначе	
				ФормулаПредставление = бит_БюджетированиеКлиент.ПользовательскоеПредставлениеФормулы(ТабДокДанные, ОбластьР.Формула);
				Если фКэшЗначений.ВыделятьАргументы Тогда
					бит_БюджетированиеКлиент.ВыделитьАргументыФормулы(ТабДокДанные, ОбластьР.Формула, фВыделенныеОбласти, фКэшЗначений.НастройкиФормы.Цвета.Цвет_Аргумент);					  
				КонецЕсли; 
			КонецЕсли; 
		Иначе	  
			УправлениеСтраницейОжиданияБДДС(Истина);
			УправлениеСтраницейОжиданияЗависимыеОбороты(Истина);			  
		КонецЕсли;	// ИмяКласса подходит.
		
	КонецЕсли; // ОблМакета подходит.
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			ИзменениеСодержимогоОбласти(ОблМакета);
			// Изменение кода. Начало. 26.01.2018{{
			ОбновитьПарнуюЯчейки(ОблМакета);		
			// Изменение кода. Конец. 26.01.2018}}
		КонецЕсли;	// ИмяКласса подходит.
	КонецЕсли; // ОблМакета подходит.
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
		Если Расшифровка.Вид = "Измерение" И ЗначениеЗаполнено(Расшифровка.Значение) Тогда
			ПоказатьЗначение(,Расшифровка.Значение);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// BF-385 Добавлен реквизит формы "флЭлементыФормыДоступны".   
// 
&НаКлиенте
Процедура ТабДокДанныеВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Верх <> Область.Низ
		ИЛИ Область.Лево <> Область.Право 
		ИЛИ ТабДокДанные.ВыделенныеОбласти.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ флЭлементыФормыДоступны Тогда
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Область.Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
			Если Область.Расшифровка.Вид = "Значение" Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБДДС_Редактирование

&НаКлиенте
Процедура БДДС_РедактированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// BF-1721.
	Если НЕ флЭлементыФормыДоступны ИЛИ ЗащищеннаяОбласть ИЛИ ВыделеноНесколькоЯчеек Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// BF-1721.
	
	Если НЕ АктивнаРедактируемаяЯчейка() Тогда
		ТекстСообщения =  НСтр("ru = 'Для добавления данных необходимо установить курсор в редактируемую ячейку!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;	
	
	Если НоваяСтрока Тогда
		УстановитьИД_БДДС_Клиент(ТекущаяСтрока);		
		Если НЕ Копирование И АктивнаРедактируемаяЯчейка() Тогда
			 ЭлР = Элементы.ТабДокДанные.ТекущаяОбласть.Расшифровка;
			 бит_БюджетированиеКлиентСервер.ЗаполнитьНовуюСтрокуБюджета(Объект, ТекущаяСтрока ,ЭлР.Период, ЭлР.Измерения, фКэшЗначений.НастройкиФормы.Измерения);
		КонецЕсли; 
		
		Если фИспользоватьНормы Тогда
			// Период ставим, т.к. он безусловно обрабатывается.
			ЗаполнитьНормуКлиент(ТекущаяСтрока.ПолучитьИдентификатор(), "БДДС", "Период");		
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования И АктивнаРедактируемаяЯчейка() Тогда
		Обл = Элементы.ТабДокДанные.ТекущаяОбласть;
		ОбластьР = Обл.Расшифровка;

		ОбновитьЗначениеЯчейкиДерева(Обл, ОбластьР);
		ОбновитьПарнуюЯчейки(Обл);		
	КонецЕсли; 
	
	Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
		 ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;	     
		 Если ТекущаяСтрока <> Неопределено Тогда
			 ОкончаниеРедактированияБДДС(ТекущаяСтрока.ПолучитьИдентификатор());
			 Элементы.ЗависимыеОбороты_Редактирование.ОтборСтрок = Новый ФиксированнаяСтруктура("Ид_Родитель", ТекущаяСтрока.Ид);
			 УправлениеСтраницейОжиданияЗависимыеОбороты(Ложь);
		 КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПередУдалением(Элемент, Отказ)
	
	// BF-1721.
	Если НЕ флЭлементыФормыДоступны ИЛИ ЗащищеннаяОбласть ИЛИ ВыделеноНесколькоЯчеек Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// BF-1721.
	
	Если НЕ АктивнаРедактируемаяЯчейка() Тогда
		ТекстСообщения =  НСтр("ru = 'Для добавления данных необходимо установить курсор в редактируемую ячейку!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
	Иначе	
		// Изменение кода. Начало. 20.04.2017{{
		Отказ = НЕ флЭлементыФормыДоступны;
		// Изменение кода. Конец. 20.04.2017}}
	КонецЕсли; 
	
	// В ручном режиме удаляем зависимые обороты.
	Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
		 ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
		 СтрОтбор = Новый Структура;
		 СтрОтбор.Вставить("ИД_Родитель", ТекущаяСтрока.ИД);
		 НайденныеСтроки = Объект.ЗависимыеОбороты.НайтиСтроки(СтрОтбор);
		 Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		 	Объект.ЗависимыеОбороты.Удалить(НайденнаяСтрока);
		 КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПослеУдаления(Элемент)
	
	Если АктивнаРедактируемаяЯчейка() Тогда
		Обл = Элементы.ТабДокДанные.ТекущаяОбласть;
		ОбластьР = Обл.Расшифровка;
		
		ОбновитьЗначениеЯчейкиДерева(Обл, ОбластьР);
		ОбновитьПарнуюЯчейки(Обл);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПриАктивизацииСтроки(Элемент)
	
	Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
		ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			Элементы.ЗависимыеОбороты_Редактирование.ОтборСтрок = Новый ФиксированнаяСтруктура("Ид_Родитель", ТекущаяСтрока.Ид);
			УправлениеСтраницейОжиданияЗависимыеОбороты(Ложь);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеСтатьяОборотовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущаяСтрока, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	ИзменениеСтатьиОборотовВТабличнойЧасти(ТекущаяСтрока.ПолучитьИдентификатор(),"БДДС", "БДДС_Редактирование");
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
	бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(ТекущаяСтрока, фИспользоватьНормы);
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеНормаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
	бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(ТекущаяСтрока, фИспользоватьНормы);
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЗащищеннаяОбласть ИЛИ ВыделеноНесколькоЯчеек Тогда
		ПоказатьЗначениеТЧ(Элемент, Поле);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БДДС_РедактированиеПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗащищеннаяОбласть ИЛИ ВыделеноНесколькоЯчеек Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗависимыеОбороты_Редактирование

&НаКлиенте
Процедура ЗависимыеОбороты_РедактированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// BF-1721.
	Если НЕ флЭлементыФормыДоступны ИЛИ ЗащищеннаяОбласть ИЛИ ВыделеноНесколькоЯчеек Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// BF-1721.
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОбороты_РедактированиеПередУдалением(Элемент, Отказ)
	
	// BF-1721.
	Если НЕ флЭлементыФормыДоступны ИЛИ ЗащищеннаяОбласть ИЛИ ВыделеноНесколькоЯчеек Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// BF-1721.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОбороты_РедактированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЗащищеннаяОбласть ИЛИ ВыделеноНесколькоЯчеек Тогда
		ПоказатьЗначениеТЧ(Элемент, Поле);
		Возврат;
	КонецЕсли;
	
	ВыбСтрока = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ЗависимыеОбороты_РедактированиеКомментарийРасчета" 
		И НЕ ВыбСтрока = Неопределено 
		И НЕ ПустаяСтрока(ВыбСтрока.КомментарийРасчета) Тогда
		
		СтандартнаяОбработка = Ложь;		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КомментарийРасчета", ВыбСтрока.КомментарийРасчета);
		
		ФормаКомментария = ПолучитьФорму("ОбщаяФорма.бит_ФормаКомментарияРасчетаЗависимыхОборотовУправляемая", ПараметрыФормы, ЭтотОбъект);
		ФормаКомментария.КомментарийРасчета = ВыбСтрока.КомментарийРасчета;
		ФормаКомментария.Открыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОбороты_РедактированиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Фиксируем, если имело место ручное редактирование.
	ТекущаяСтрока = Элементы.ЗависимыеОбороты_Редактирование.ТекущиеДанные;
	СтрВрем = НСтр("ru = 'Выполнено ручное редактирование. Пользователь ""%1"", время ""%2""'");
	СтрВрем = СтрШаблон(СтрВрем,Строка(фКэшЗначений.ТекущийПользователь),Строка(ТекущаяДата()));
	ТекущаяСтрока.КомментарийРасчета = ТекущаяСтрока.КомментарийРасчета+"<p>"+СтрВрем+"</p>";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОбороты_РедактированиеСтатьяОборотовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗависимыеОбороты_Редактирование.ТекущиеДанные;
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущаяСтрока, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	ИзменениеСтатьиОборотовВТабличнойЧасти(ТекущаяСтрока.ПолучитьИдентификатор(),"ЗависимыеОбороты", "ЗависимыеОбороты_Редактирование");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОбороты_РедактированиеКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗависимыеОбороты_Редактирование.ТекущиеДанные;
	бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(ТекущаяСтрока, фИспользоватьНормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОбороты_РедактированиеНормаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗависимыеОбороты_Редактирование.ТекущиеДанные;
	бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(ТекущаяСтрока, фИспользоватьНормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОбороты_РедактированиеПередНачаломИзменения(Элемент, Отказ)
		
	Если ЗащищеннаяОбласть ИЛИ ВыделеноНесколькоЯчеек Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБДДС

&НаКлиенте
Процедура БДДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ТекущаяСтрока = Объект.БДДС.НайтиПоИдентификатору(ВыбраннаяСтрока);
	//
	//Если НЕ ТекущаяСтрока = Неопределено Тогда
	//	ИмяРеквизита = СтрЗаменить(Поле.Имя, "БДДС", "");
	//	ТекЗнч = ТекущаяСтрока[ИмяРеквизита];
	//	Если ЗначениеЗаполнено(ТекЗнч) Тогда
	//		ПоказатьЗначение(,ТекЗнч);
	//	КонецЕсли; 
	//КонецЕсли; 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

&НаКлиенте
Процедура БДДСПриАктивизацииСтроки(Элемент)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ТекущаяСтрока = Элементы.БДДС.ТекущиеДанные;
	//Если НЕ ТекущаяСтрока = Неопределено Тогда
	//	УстановитьОтборЗависимые(ТекущаяСтрока.ПолучитьИдентификатор());
	//КонецЕсли; 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗависимыеОбороты

&НаКлиенте
Процедура ЗависимыеОборотыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбСтрока = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ЗависимыеОборотыКомментарийРасчета" 
		  И НЕ ВыбСтрока = Неопределено 
		  И НЕ ПустаяСтрока(ВыбСтрока.КомментарийРасчета) Тогда
		
		СтандартнаяОбработка = Ложь;		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КомментарийРасчета", ВыбСтрока.КомментарийРасчета);
		
		ФормаКомментария = ПолучитьФорму("ОбщаяФорма.бит_ФормаКомментарияРасчетаЗависимыхОборотовУправляемая", ПараметрыФормы, ЭтотОбъект);
		ФормаКомментария.КомментарийРасчета = ВыбСтрока.КомментарийРасчета;
		ФормаКомментария.Открыть();
		
	Иначе
		
		Если НЕ ВыбСтрока = Неопределено Тогда
			
			ИмяРеквизита = СтрЗаменить(Поле.Имя, "ЗависимыеОбороты", "");
			ТекЗнч = ВыбСтрока[ИмяРеквизита];
			Если ЗначениеЗаполнено(ТекЗнч) Тогда
				ПоказатьЗначение(,ТекЗнч);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандРедактированияПериода

&НаКлиенте
Процедура КомандаРедактироватьПериод(Команда)
	
	ПараметрыПередачи = Новый Структура(); 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.ДатаНачалаПланирования);
	//ПараметрыПередачи.Вставить("ДатаОкончания", Объект.ДатаОкончанияПланирования);
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.бит_БК_ПериодНачало);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.бит_БК_ПериодКонец);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПериодаЗавершение(Период, ДополнительныеДанные)

	Если НЕ Период = Неопределено Тогда
		// Установим даты из диалога редактирования, если пользователь не согласится - вернем обратно.
		ПериодПланирования = Период;		
		Объект.ДатаНачалаПланирования    = ПериодПланирования.ДатаНачала;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//Объект.ДатаОкончанияПланирования = ПериодПланирования.ДатаОкончания;
		//
		//Если фКэшЗначений.НастройкиФормы.ФиксированныйМакет Тогда
		//	Объект.ДатаОкончанияПланирования = Неопределено;
		//	ПериодПланирования.ДатаОкончания = Дата('00010101');
		//КонецЕсли;
		Объект.бит_БК_ПериодНачало		 = ПериодПланирования.ДатаНачала;
		Объект.бит_БК_ПериодКонец		 = ПериодПланирования.ДатаОкончания;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		
		ОбновитьКурсСервер();	
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		Оповещение = Новый ОписаниеОповещения("РедактироватьПериодЗавершение", ЭтотОбъект); 
		ЗадатьВопросОбОчисткеДанных(Оповещение);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериодДействияЗавершение()
	
	Если Объект.БДДС.Количество() > 0 Тогда
		ОчиститьВсе();
	КонецЕсли; 
	
	Модифицированность = Истина;			
	
	мТекущаяДатаНачалаПланирования    = Объект.ДатаНачалаПланирования;
	мТекущаяДатаОкончанияПланирования = Объект.ДатаОкончанияПланирования;	
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура РедактироватьПериодЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Действия после согласия пользователя.
		РедактироватьПериодДействияЗавершение();
	Иначе
		// Возврат к предыдущим значениям.
		Объект.ДатаНачалаПланирования    = мТекущаяДатаНачалаПланирования;
		Объект.ДатаОкончанияПланирования = мТекущаяДатаОкончанияПланирования;
		ПериодПланирования.ДатаНачала    = Объект.ДатаНачалаПланирования;
		ПериодПланирования.ДатаОкончания = Объект.ДатаОкончанияПланирования;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКомандыЭлементовФормы

&НаКлиенте
Процедура Подключаемый_АналитикаПриИзменении(Элемент)
	
	ЗадатьВопросОЗаменеЗначенияПоУмолчанию(Элемент.Имя, Элемент.Имя);	

КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_АналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяПоля  = Элемент.Имя;
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(Элемент.Имя, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(Объект, СтандартнаяОбработка, Элемент.Имя);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, Объект, Элемент.Имя,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	//Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(Элемент.Имя, фКэшЗначений.НастройкиИзмерений) Тогда
	//  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(Объект, СтандартнаяОбработка, Элемент.Имя);	
	//Иначе
	//	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтаФорма, Элемент, Объект, Элемент.Имя,
	//		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаОчистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, Объект, Элемент.Имя,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);

КонецПроцедуры

#КонецОбласти 

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_БюджетированиеКлиентСервер.ВыполнятьЗаполнениеНормы(Объект.ПараметрНорм, фИменаПараметраНорм, ИмяПоля, фИспользоватьНормы) Тогда
		Если СтрЧислоВхождений(Элемент.Родитель.Имя,"БДДС") <> 0 Тогда
			ТаблицаОбъекта = "БДДС";
		Иначе
			ТаблицаОбъекта = "ЗависимыеОбороты";
		КонецЕсли; 
		ЗаполнитьНормуКлиент(ТекущиеДанные.ПолучитьИдентификатор(), ТаблицаОбъекта, ИмяПоля);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандРаботыСExcel

#Область ВыгрузкаЗагрузкаНапрямуюИзФормы

&НаКлиенте
Процедура КомандаВыгрузитьШаблонExcel(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	
	Если Модифицированность Тогда
		// Запрашиваем подтверждение у пользователя.
		Оповещение = Новый ОписаниеОповещения("ВыгрузитьШаблонExcelВопросЗавершение", ЭтотОбъект);
		ТекстСообщения =  НСтр("ru = 'Для выполнение действия необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	Иначе	
		// Безусловно выгружаем.
		ВыгрузитьШаблонЭксель();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыгрузитьШаблонЭксельВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВыгрузитьШаблонExcelВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		флВыгружать = Записать();
		Если флВыгружать Тогда
			ВыгрузитьШаблонЭксель();
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьПоШаблонуExcel(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьПоШаблонуЗавершение", ЭтотОбъект); 
	ЗадатьВопросОбОчисткеДанных(Оповещение);
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ЗагрузитьПоШаблонуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		// Выполняем, при согласии пользователя.
		ЗагрузитьДанныеПоШаблону();
		//{ bit_SVKushnirenko 25.04.2017 #2811
		ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС();
		//} bit SVKushnirenko Bit 25.04.2017 #2811
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзТабличногоДокумента

&НаКлиенте
Процедура ЗагрузитьЧерезТабДокДанныеБюджета(Команда)
    
    ОткрытьФормуЗагрузкиДанныхЧерезТабДок("БДДС");
	
КонецПроцедуры // ЗагрузитьЧерезТабДокДанныеБюджета()

#КонецОбласти

#Область РаботаСExcelЧерезПроформы

&НаКлиенте
Процедура КомандаЗагрузитьИзПроформы(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	
	Если Объект.БДДС.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзПроформыВопросЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе	
		ЗагрузитьДанныеПроформы("Загрузить");
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗагрузитьИзПроформыВопросЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ЗагрузитьИзПроформыВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьДанныеПроформы("Загрузить");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьИзПроформы(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	
	ЗагрузитьДанныеПроформы("Добавить");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	Если ЗаполнениеДереваВозможно(Истина) Тогда
		Оповещение = Новый ОписаниеОповещения("ОбновитьЗавершение", ЭтотОбъект);
		ЗадатьВопросОбОчисткеДанных(Оповещение);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ОбновитьЗавершение(Результат, ДополнительныеПараметры)  Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Состояние( НСтр("ru = 'Выполняется построение дерева...'"));
		ОбновитьДерево(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВосстановить(Команда)
	
	Если ЗаполнениеДереваВозможно(Истина) Тогда
		Состояние( НСтр("ru = 'Выполняется обновление дерева...'"));		
		ОчиститьСообщения();
		ВосстановитьДерево(Истина,Истина,Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьСтрокуВЗависимые(Команда)
	
	Если ЗащищеннаяОбласть Тогда
		ВызватьИсключение НСтр("ru = 'Выбранная область данных бюджета содержит защищенные ячейки.
			|Команда недоступна.'");
	ИначеЕсли ВыделеноНесколькоЯчеек Тогда	
		ВызватьИсключение НСтр("ru = 'Выбрано несколько ячеек данных бюджета.
			|Команда недоступна.'");
	КонецЕсли;
	
	Если НЕ РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
		ТекстСообщения =  НСтр("ru = 'Функция копирования доступна при ручном вводе зависимых оборотов.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.БДДС_Редактирование.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		СкоприроватьСтрокуВЗависимые(ТекущаяСтрока.ПолучитьИдентификатор());
	Иначе
		ТекстСообщения =  НСтр("ru = 'Не выбрана текущая строка данных для копирования.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗависимыеОбороты(Команда)
	
	Если Объект.ЗависимыеОбороты.Количество()>0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗависимыеОборотыВопросЗавершение", ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'Зависимые обороты будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
	Иначе
		ЗаполнитьЗависимыеОбороты();	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗаполнитьЗависимыеОборотыВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ЗаполнитьЗависимыеОборотыВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьЗависимыеОбороты();
		ЗаполнитьЗависимыеОбороты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереключитьОтбор(Команда)
	
	Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Пометка = НЕ Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Пометка;	
	фУстанавливатьОтборЗависимых = Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Пометка;
	
	Если фУстанавливатьОтборЗависимых Тогда
		ТекущаяСтрока = Элементы.БДДС.ТекущиеДанные;
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			УстановитьОтборЗависимые(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли; 
	Иначе	
		ОтключитьОтборЗависимые();
	КонецЕсли; 
	
	УстановитьКартинкуКнопкиОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗависимыеПоСтроке(Команда)
	
	Если ЗащищеннаяОбласть Тогда
		ВызватьИсключение НСтр("ru = 'Выбранная область данных бюджета содержит защищенные ячейки.
			|Команда недоступна.'");
	ИначеЕсли ВыделеноНесколькоЯчеек Тогда	
		ВызватьИсключение НСтр("ru = 'Выбрано несколько ячеек данных бюджета.
			|Команда недоступна.'");
	КонецЕсли;
	
	ТекущаяСтрокаДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
	Если ТекущаяСтрокаДанные<>Неопределено Тогда
		ЗаполнитьЗависимыеОборотыПоСтроке(ТекущаяСтрокаДанные.ПолучитьИдентификатор());
	Иначе
		ТекстСообщения =  НСтр("ru = 'Не выбрана текущая строка данных для заполнения зависимых оборотов.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьЗависимыеПоСтроке(Команда)
	
	Если ЗащищеннаяОбласть Тогда
		ВызватьИсключение НСтр("ru = 'Выбранная область данных бюджета содержит защищенные ячейки.
			|Команда недоступна.'");
	ИначеЕсли ВыделеноНесколькоЯчеек Тогда	
		ВызватьИсключение НСтр("ru = 'Выбрано несколько ячеек данных бюджета.
			|Команда недоступна.'");
	КонецЕсли;
	
	ТекущаяСтрокаДанных = Элементы.БДДС_Редактирование.ТекущиеДанные;
	
	Если ТекущаяСтрокаДанных <> Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ОчиститьЗависимыеПоСтрокеВопросЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Будут очищены зависимые обороты для текущей строки данных. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ОчиститьЗависимыеПоСтрокеВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ОчиститьЗависимыеПоСтрокеВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрокаДанных = Элементы.БДДС_Редактирование.ТекущиеДанные;
		Если ТекущаяСтрокаДанных <> Неопределено Тогда
			ОчиститьЗависимыеОборотыПоСтроке(ТекущаяСтрокаДанных.ПолучитьИдентификатор());	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределить(Команда)
	
	Если ЗащищеннаяОбласть Тогда
		ВызватьИсключение НСтр("ru = 'Выбранная область данных бюджета содержит защищенные ячейки.
			|Команда недоступна.'");
	ИначеЕсли ВыделеноНесколькоЯчеек Тогда	
		ВызватьИсключение НСтр("ru = 'Выбрано несколько ячеек данных бюджета.
			|Команда недоступна.'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПрофильРаспределения) Тогда
		ТекстСообщения =  НСтр("ru = 'Не указан профиль распределения. Распределение невозможно.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.ЗависимыеОбороты_Редактирование.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ВыполнитьРаспределениеЗависимых(ТекущаяСтрока.ПолучитьИдентификатор());
	Иначе	
		ТекстСообщения =  НСтр("ru = 'Не выбрана строка зависимых оборотов для распределения.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьДанные(Команда)
	
	флОтказ = Истина;
	мБуфер = Неопределено;
	ОблВыделенная = ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблВыделенная) Тогда
		
		мБуфер = Новый Массив;		
		
		// Необходимо определить координаты всех ячеек выделенной области
		// и обойти по отдельности эти ячейки.		
		ДельтаГ = ОблВыделенная.Право - ОблВыделенная.Лево + 1;
		ДельтаВ = ОблВыделенная.Низ   - ОблВыделенная.Верх + 1;
		
		ЛевоНач = ОблВыделенная.Лево;
		ВерхНач = ОблВыделенная.Верх;
		Для нг = 1 По ДельтаГ Цикл
			
			Лево   = ЛевоНач + нг-1;			
			Для нв = 1 По ДельтаВ Цикл
				
				Верх = ВерхНач + нв-1;
				Обл  = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
				// Если выделенная ячейка является ячейкой вида Значение - сохраним параметры, необходимые для копирования в буфер.
				ОбластьР = Обл.Расшифровка;
				Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР, "РасшифровкаЯчейкиФормыВвода") 
					 И ОбластьР.Вид = "Значение" Тогда
					 
					флОтказ = Ложь;
					
					ПарамКопирования = Новый Структура;
					ПарамКопирования.Вставить("ИмяКласса", "БуферКопированияФормыВвода");
					ПарамКопирования.Вставить("Период"   , ОбластьР.Период);
					ПарамКопирования.Вставить("Измерения", ОбластьР.Измерения);
					ПарамКопирования.Вставить("СдвигГор" , нг-1);
					ПарамКопирования.Вставить("СдвигВерт", нв-1);
					
					мБуфер.Добавить(ПарамКопирования);
					
				КонецЕсли;	// ИмяКласса подходит.
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; // ОблМакета подходит.
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьДанные(Команда)
	
	Если ТипЗнч(мБуфер) = Тип("Массив") Тогда
		
		Обл = ТабДокДанные.ТекущаяОбласть;		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) Тогда
			ПараметрыВставки = Новый Структура("ИмяОбласти, Верх, Лево, Низ, Право", 
			                                      Обл.Имя, 
												  Обл.Верх, 
												  Обл.Лево, 
												  Обл.Низ, 
												  Обл.Право);
												  
			ВыполнитьКопированиеДанных(мБуфер, ПараметрыВставки);			
		КонецЕсли; // ОблМакета подходит.
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьДанные(Команда)
	
	Если АктивнаРедактируемаяЯчейка() Тогда
		ИменаВыделенныхОбластей = ПолучитьИменаВыделенныхОбластей();
		ОбластиТД = ТабДокДанные.Области;	
		Для Каждого ИмяОбласти Из ИменаВыделенныхОбластей Цикл
			ОблМакета = ОбластиТД.Найти(ИмяОбласти);
			ОбластьР = ОблМакета.Расшифровка;
			Если ОбластьР = Неопределено ИЛИ ЭтоЗащищеннаяОбласть(ОблМакета) Тогда
			 	Продолжить;	
			КонецЕсли;
			Если ОбластьР.Вид = "Значение" Тогда
				// Поиск строк БДДС.
				СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(ОбластьР);
				НайденныеСтроки = Объект.БДДС.НайтиСтроки(СтрОтбор);
				Если НайденныеСтроки <> Неопределено Тогда
					ОблМакета.Значение = 0;  				
				КонецЕсли;
			КонецЕсли;
			ИзменениеСодержимогоОбласти(ОблМакета);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСтроку(Команда)
	
	Если ТипЗнч(мБуфер) = Тип("Массив") Тогда
		
		Обл = ТабДокДанные.ТекущаяОбласть;		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) Тогда
			
			Если Обл.Лево = Обл.Право И НЕ Обл.Низ = Обл.Верх Тогда
				
				// Выделена колонка.
				
				КолСтрок = Обл.Низ - Обл.Верх + 1;
				ИндексБуфера = 0;

				Для Н = 1 По КолСтрок Цикл
					
					ТекНомерСтроки = Обл.Верх + Н-1;
					ОблТек = ТабДокДанные.Область(ТекНомерСтроки, Обл.Лево, ТекНомерСтроки, Обл.Лево);
					
					Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблТек) И НЕ ОблТек.Расшифровка.Вид = "Формула" Тогда
					
						ПараметрыВставки = Новый Структура("ИмяОбласти, Верх, Лево, Низ, Право", 
				                                      ОблТек.Имя, 
													  ОблТек.Верх, 
													  ОблТек.Лево, 
													  ОблТек.Низ, 
													  ТабДокДанные.ШиринаТаблицы);
													  
						ТекБуфер = Новый Массив;
						ТекДанныеКопирования = мБуфер[ИндексБуфера];
						ТекДанныеКопирования.СдвигВерт = 0;
						ТекДанныеКопирования.СдвигГор = 0;
						ТекБуфер.Добавить(мБуфер[ИндексБуфера]);
													  
				        ВыполнитьКопированиеДанных(ТекБуфер, ПараметрыВставки);	
						
						ИндексБуфера = ИндексБуфера + 1;
					
					КонецЕсли; 
				КонецЦикла; 
			Иначе	
				 ПараметрыВставки = Новый Структура("ИмяОбласти, Верх, Лево, Низ, Право", 
			                                      Обл.Имя, 
												  Обл.Верх, 
												  Обл.Лево, 
												  Обл.Низ, 
												  ТабДокДанные.ШиринаТаблицы);
												  
			     ВыполнитьКопированиеДанных(мБуфер, ПараметрыВставки);			
			КонецЕсли; 
			Модифицированность = Истина;
		КонецЕсли; // ОблМакета подходит.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьБуфер(Команда)
	
	мБуфер = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопированиеДанныхБюджета(Команда)
	
	ОткрытьОбработкуПолучения("КопированиеБюджета");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучениеДанныхБюджета(Команда)
	
	ОткрытьОбработкуПолучения("ПолучениеБюджета");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопированиеДанныхГрафиковДоговоров(Команда)
	
	ОткрытьОбработкуПолучения("ГрафикДоговоров");
	                            
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтрокиБюджетаВидимость(Команда)
	
	КомандаСтрокиБюджетаВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолныйЭкран(Команда)
	
	фПолныйЭкран = НЕ фПолныйЭкран;
	ПереключитьПолноэкранныйРежим();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределитьПоАналитике(Команда)
	
	Если ЗащищеннаяОбласть Тогда
		ВызватьИсключение НСтр("ru = 'Выбранная область данных бюджета содержит защищенные ячейки.
			|Команда недоступна.'");
	ИначеЕсли ВыделеноНесколькоЯчеек Тогда	
		ВызватьИсключение НСтр("ru = 'Выбрано несколько ячеек данных бюджета.
			|Команда недоступна.'");
	КонецЕсли;
	
	ТекЭлемент = Элементы.БДДС_Редактирование.ТекущийЭлемент;
	ТекущиеДанные = Элементы.БДДС_Редактирование.ТекущиеДанные;
	
	Если НЕ ТекЭлемент = Неопределено Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не выбрана аналитика для распределения.'");
			ПоказатьПредупреждение(,ТекстСообщения,,Нстр("ru = 'Распределить по аналитике'"));
			Возврат;
		КонецЕсли;
		
		Исключения = Новый Структура;
		Исключения.Вставить("Сумма",			"Сумма");
		Исключения.Вставить("Количество",		"Количество");
		Исключения.Вставить("Норма",			"Норма");
		Исключения.Вставить("Комментарий",		"Комментарий");
		Исключения.Вставить("НомерСтроки",		"Номер строки");
		Исключения.Вставить("СтатьяОборотов",	"Статья оборотов");
		
		ИмяКолонки = СтрЗаменить(ТекЭлемент.Имя, "БДДС_Редактирование","");
		
		Если Исключения.Свойство(ИмяКолонки) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По колонке ""%1"" распределение не предусмотрено.'"), Исключения[ИмяКолонки]);
			ПоказатьПредупреждение(,ТекстСообщения,,Нстр("ru = 'Распределить по аналитике'"));
			Возврат;
		КонецЕсли; 
		
		ТекущееЗначение = ТекущиеДанные[ИмяКолонки];
		
		// Если по статье не ведется учет по данной аналитике - распределение невозможно.
		ТекНастройкиСтатьи = фКэшЗначений.НастройкиСтатей[ТекущиеДанные.СтатьяОборотов];
		Если НЕ ТекНастройкиСтатьи = Неопределено Тогда
			 флУчет = Ложь;
			 ТекНастройкиСтатьи.Свойство("Учет_"+ИмяКолонки, флУчет);
			 Если НЕ флУчет = Истина Тогда
				 ТекстСообщения =  НСтр("ru = 'Для статьи %1 учет по аналитике %2 не ведется. Распределение невозможно.'");
				 ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущиеДанные.СтатьяОборотов, ИмяКолонки);
				 ПоказатьПредупреждение(,ТекстСообщения,,Нстр("ru = 'Распределить по аналитике'"));
			 	 Возврат;
			 КонецЕсли; 
		КонецЕсли; 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоАналитике"));
		ПараметрыФормы.Вставить("ИмяКолонки", ИмяКолонки);
		ПараметрыФормы.Вставить("ТекущееЗначение", ТекущееЗначение);

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекущаяСтрока", Элементы.БДДС_Редактирование.ТекущаяСтрока);
		Оповещение = Новый ОписаниеОповещения("РаспределитьПоАналитикеЗавершение", ЭтотОбъект, ДопПараметры);
	    РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОкна);
	КонецЕсли; 	
	
КонецПроцедуры

// Процедура обработчик оповещения "РаспределитьПоАналитикеЗавершение".
//
// Параметры:
// РезДанные - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура РаспределитьПоАналитикеЗавершение(РезДанные, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезДанные) = Тип("Структура") Тогда
		МассивСтрок = Элементы.БДДС_Редактирование.ВыделенныеСтроки;
		ВыполнитьРаспределение(МассивСтрок, РезДанные);
		Обл = Элементы.ТабДокДанные.ТекущаяОбласть;
		ОбластьР = Обл.Расшифровка;
		ОбновитьЗначениеЯчейкиДерева(Обл, ОбластьР);
		ОбновитьПарнуюЯчейки(Обл);		
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределитьПоПериодамДерево(Команда)
	
	Если АктивнаРедактируемаяЯчейка() Тогда
		ОблМакета = ТабДокДанные.ТекущаяОбласть;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоПериодам"));
		ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Расшифровка", ОблМакета.Расшифровка);
		
		Оповещение = Новый ОписаниеОповещения("РаспределитьПоПериодамДеревоЗавершение", ЭтотОбъект, ДопПараметры);
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма.Форма",ПараметрыФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);
		Модифицированность = Истина;		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "РаспределитьПоПериодамДеревоЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура РаспределитьПоПериодамДеревоЗавершение(РезДанные, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезДанные) = Тип("Структура") Тогда
		ИзмененныеПериоды = ВыполнитьРаспределениеПоПериодам(ДополнительныеДанные.Расшифровка, РезДанные);
		ШаблонИмени = Лев(ДополнительныеДанные.Расшифровка.Имя,3)+"%Период%"+Сред(ДополнительныеДанные.Расшифровка.Имя,12);
		Для Каждого ТекПериод Из ИзмененныеПериоды Цикл
			ТекИмя = СтрЗаменить(ШаблонИмени, "%Период%", Формат(ТекПериод,"ДФ=yyyyMMdd"));
			ТекОбл = ТабДокДанные.Области.Найти(ТекИмя);
			Если ЭтоЗащищеннаяОбласть(ТекОбл) Тогда
				Продолжить;
			КонецЕсли;
			Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ТекОбл) Тогда
				ОбновитьЗначениеЯчейкиДерева(ТекОбл, ТекОбл.Расшифровка);
				ОбновитьПарнуюЯчейки(ТекОбл);		
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИменаВыделенныхОбластей()

	ИменаВыделенныхОбластей = Новый Массив;
	ВыделенныеОбласти = ТабДокДанные.ВыделенныеОбласти;
	
	Если ВыделенныеОбласти.Количество() = 1 Тогда
		ОблВыделения = ТабДокДанные.ТекущаяОбласть;
	   	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблВыделения) Тогда
			// Необходимо определить координаты всех ячеек выделенной области
			// и обойти по отдельности эти ячейки.
			ДельтаГ = ОблВыделения.Право - ОблВыделения.Лево + 1;
			ДельтаВ = ОблВыделения.Низ   - ОблВыделения.Верх + 1;				
			ЛевоНач = ОблВыделения.Лево;
			ВерхНач = ОблВыделения.Верх;
			Для нг = 1 По ДельтаГ Цикл
				Лево = ЛевоНач + нг-1;
				Для нв = 1 По ДельтаВ Цикл
					Верх = ВерхНач + нв-1;
					ОблМакета = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
					// Если выделенная ячейка является ячейкой вида Значение - сохраним имя.
					ОбластьР = ОблМакета.Расшифровка;
					Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР, "РасшифровкаЯчейкиФормыВвода") И ОбластьР.Вид = "Значение" Тогда
						ИменаВыделенныхОбластей.Добавить(ОблМакета.Имя);
					КонецЕсли;	// ИмяКласса подходит.
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли; // ОблМакета подходит.
	Иначе	
		Для Каждого ОблМакета Из ВыделенныеОбласти Цикл
			ОбластьР = ОблМакета.Расшифровка;
			Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР, "РасшифровкаЯчейкиФормыВвода") И ОбластьР.Вид = "Значение" Тогда
				ИменаВыделенныхОбластей.Добавить(ОблМакета.Имя);
			КонецЕсли;	// ИмяКласса подходит.
		КонецЦикла;
	КонецЕсли;	

	Возврат ИменаВыделенныхОбластей;
	
КонецФункции

&НаКлиенте
Процедура КомандаИзменить(Команда)
	
	Если АктивнаРедактируемаяЯчейка() Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СуммаПример", ТабДокДанные.ВыделенныеОбласти[0].Значение);
		
		ИменаВыделенныхОбластей = ПолучитьИменаВыделенныхОбластей();
		
		ДопПараметры = Новый Структура("ИменаВыделенныхОбластей", ИменаВыделенныхОбластей);
		Оповещение = Новый ОписаниеОповещения("ИзменитьЗавершение", ЭтотОбъект, ДопПараметры);
		
		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаПараметровИзменения", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат <> КодВозвратаДиалога.Отмена Тогда
			
	    Модифицированность = Истина;
		
		ЭтоПроцент  = Результат.ЭтоПроцент;
		ЗначениеИзм = Результат.Значение;
		
		ИменаВыделенныхОбластей = ДопПараметры.ИменаВыделенныхОбластей;
		ОбластиТД = ТабДокДанные.Области;
		
		Для Каждого ИмяОбласти Из ИменаВыделенныхОбластей Цикл
			ОблМакета = ОбластиТД.Найти(ИмяОбласти);
			ОбластьР = ОблМакета.Расшифровка;
			Если ОбластьР = Неопределено ИЛИ ЭтоЗащищеннаяОбласть(ОблМакета) Тогда
			 	Продолжить;	
			КонецЕсли;
			Если ОбластьР.Вид = "Значение" Тогда
				// Поиск строк БДДС.
				СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(ОбластьР);
				НайденныеСтроки = Объект.БДДС.НайтиСтроки(СтрОтбор);
				Если НайденныеСтроки <> Неопределено Тогда
					// Исходная сумма в ячейке.
					ИсхСуммаЯч = ОблМакета.Значение;
					// Расчит суммы, которую нужно получить в ячейке.
					Если ЭтоПроцент Тогда
						ПроцентЧисло = ИсхСуммаЯч * ЗначениеИзм / 100;
						РезСуммаЯч = ИсхСуммаЯч + ПроцентЧисло;
					Иначе	
						РезСуммаЯч = ИсхСуммаЯч + ЗначениеИзм;
					КонецЕсли;
					ОблМакета.Значение = РезСуммаЯч;  				
				КонецЕсли;
			КонецЕсли;
			ИзменениеСодержимогоОбласти(ОблМакета);
			// Изменение кода. Начало. 14.02.2018{{
			ОбновитьПарнуюЯчейки(ОблМакета);		
			// Изменение кода. Конец. 14.02.2018}}
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислятьФормулыПриВводеДа(Команда)
	
	Объект.ВычислятьФормулыПриВводе = Истина;
	УправлениеМенюПараметрыВычислений(ЭтотОбъект);
	ВосстановитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислятьФормулыПриВводеНет(Команда)
	
	Объект.ВычислятьФормулыПриВводе = Ложь;
	УправлениеМенюПараметрыВычислений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
	
	ПараметрыФормы = ПараметрыИзмененияТаблицыДокумента();
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДанныеБюджета.Форма", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет значения, необходимые на клинте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь");	
	
	фКэшЗначений = Новый Структура;
	фКэшЗначений.Вставить("ИзмеренияДоп", бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним"));
	фКэшЗначений.Вставить("ИзмеренияВсе", бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","синоним"));
	фКэшЗначений.Вставить("НастройкиИзмерений" , бит_Бюджетирование.НастройкиИзмеренийБюджетирования()); 
	фКэшЗначений.Вставить("НастройкиФормы"     , Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Объект.НастройкаФормы));
	фКэшЗначений.Вставить("ТекущийПользователь", ТекПользователь);	
	фКэшЗначений.Вставить("ВидСравненияРавно"  , ВидСравнения.Равно);
	фКэшЗначений.Вставить("ПроводитьПослеУтверждения", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_ПроводитьДокументыПослеУтверждения"));
	фКэшЗначений.Вставить("ВыделятьАргументы", бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ВыделятьАргументыФормулФормыВвода", ТекПользователь));
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-05 (#2986)
	////1c-izhtc spawn 28.08.15
	//ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ФормаВводаБюджета"));
	//мТекущийСтатус = ДокОбъект.мТекущийСтатус;
	//1c-izhtc spawn 28.08.15
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-05 (#2986)
	
	// Параметры, используемые для управления автовидимостью колонок.
	фКэшЗначений.Вставить("НастройкаВидимостиКолонок"	 , Новый Структура);
	фКэшЗначений.Вставить("МассивСтатей_БДДС"			 , Новый Массив);
	фКэшЗначений.Вставить("МассивСтатей_ЗависимыеОбороты", Новый Массив);
	
	фКэшЗначений.Вставить("СтруктураДопПолей", Новый Структура("Учет_Сумма, Учет_Количество", "Норма","Норма"));
	
	фКэшЗначений.Вставить("НастройкиСтатей", Новый Соответствие);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);	
	
	// Заполним массив полей таб. поля БДДС_Редактирование.
	ИменаПолей = Новый Массив;
	Исключения = Новый Массив;
	Исключения.Добавить("НомерСтроки");
	Исключения.Добавить("ИД");
	Исключения.Добавить("Измерение");
	Исключения.Добавить("Период");
	Исключения.Добавить("Норма");
	Исключения.Добавить("Комментарий");
	Исключения.Добавить("СтатьяОборотов");
	
	Для Каждого Эл Из Элементы.БДДС_Редактирование.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Эл) = Тип("ПолеФормы") Тогда
			ИмяРеквизита = СтрЗаменить(Эл.Имя, "БДДС_Редактирование", "");
			Если Исключения.Найти(ИмяРеквизита) = Неопределено Тогда
				ИменаПолей.Добавить(ИмяРеквизита);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	фКэшЗначений.Вставить("ПоляАналитикРедактирование", ИменаПолей);
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_БК_ВидыОперацийФормаВводаБюджета", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

// Процедура восстанавливает отбор из хранилища значения.
// 
// Параметры:
//  СохраненнаяНастройка - Структура.
// 
&НаСервере
Процедура ВосстановитьОтбор(СохраненнаяНастройка)

	Если СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") 
		И ТипЗнч(СохраненнаяНастройка.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных")  Тогда
		Если СохраненнаяНастройка.НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0 Тогда
			Компоновщик.ЗагрузитьНастройки(СохраненнаяНастройка.НастройкиКомпоновщика);
		КонецЕсли;  
	Иначе
		// Если сохранена еще старая настройка выполним конвертацию отбора построителя в отбор компоновщика.
		бит_МеханизмПолученияДанных.КонвертацияОтборПостроителяОтборКомпоновщика(СохраненнаяНастройка, Компоновщик, ТекстЗапроса);
	КонецЕсли; 
	
КонецПроцедуры

// Выполняет замену аналитики по-умолчанию. 
// 
// Параметры:
//  Имя - Строка.
//  Значение - Произвольный.
// 
&НаСервере
Процедура ВыполнитьЗаменуАналитикиПоУмолчанию(Имя, Значение)

   Для Каждого СтрокаТаблицы Из Объект.БДДС Цикл
   	  СтрокаТаблицы[Имя] = Значение;
   КонецЦикла; 	
  
   Для Каждого СтрокаТаблицы Из Объект.БДДС Цикл
   	 СтрокаТаблицы[Имя] = Значение;
   КонецЦикла; 

КонецПроцедуры

// Процедура обрабатывает изменение сценария в случае, когда необходимо очищать данные. 
// 
&НаСервере
Процедура ИзменениеСценарияОчисткаДанных()
	
	ОчиститьВсе();
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеСценарияОбъект(Истина);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

// Функция определяет, что произойдет в результате изменения сценария.
// 
// Параметры:
//  ПредСценарий - СправочникСсылка.СценарииПланирования.
// 
// Возвращаемое значение:
//  РезСтр - Строка.
// 
&НаСервере
Функция АнализИзмененийСценария(ПредСценарий)

	РезСтр = Новый Структура;
	флИзменитсяВалюта = ИзменитсяВалюта();
	РезСтр.Вставить("ИзменитсяВалюта", флИзменитсяВалюта);
	флМожноИзменятьСценарий = Истина;
	Если Объект.НастройкаФормы.Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет Тогда 
		Если ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
			Если Объект.Сценарий.бит_Периодичность <> Объект.НастройкаФормы.ПериодичностьПланирования Тогда
				// В случае фиксированного макета переодичность сценария должна совпадать с периодичностью макета.
				флМожноИзменятьСценарий = Ложь;
			КонецЕсли;
		КонецЕсли; 	
	Иначе	
		Если ЗначениеЗаполнено(Объект.Сценарий) И ЗначениеЗаполнено(ПредСценарий) Тогда
			флМожноИзменятьСценарий = ?(Объект.Сценарий.бит_Периодичность = ПредСценарий.бит_Периодичность, Истина, Ложь);
		КонецЕсли; 
	КонецЕсли; 
	РезСтр.Вставить("МожноИзменятьСценарий", флМожноИзменятьСценарий);
	Возврат РезСтр;
	
КонецФункции

// Процедура обрабатывает изменение сценария. 
// 
&НаСервере
Процедура ИзменениеСценария(ПересчитатьСуммы, ПерезаполнитьНормы)
	
	ВалютаНач = Объект.ВалютаДокумента;
	СтрНач = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.КурсДокумента, Объект.КратностьДокумента);		
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеСценарияОбъект(Ложь);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
	КонецЕсли; // Пересчитать.
	
	Если ПерезаполнитьНормы Тогда
		бит_Бюджетирование.ПерезаполнитьНормыТабЧасти(Объект.ПараметрНорм, Объект.Сценарий, Объект.БДДС, СтрКон, фИменаПараметраНорм, Объект.ЕдиницаИзмеренияСумм);
	КонецЕсли; 		
	
	Если ПересчитатьСуммы ИЛИ ПерезаполнитьНормы Тогда
		ВосстановитьДерево();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты.
// 
&НаСервере
Процедура ИзменениеВалюты(ПересчитатьСуммы, ВалютаНач = Неопределено)
	
	СтрНач = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.КурсДокумента, Объект.КратностьДокумента);	
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалюты();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
		ВосстановитьДерево();
	КонецЕсли; // Пересчитать.	
	
КонецПроцедуры

// Обрабатывает изменение контрагента. 
// 
&НаСервере
Процедура ИзменениеКонтрагента()
	
	бит_РаботаСДиалогамиСервер.ПроверитьВладельцаДоговораКонтрагентаВСтроке(Объект.Контрагент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

// Обрабатывает изменение договора контрагента. 
// 
&НаСервере
Процедура ИзменениеДоговораКонтрагента()

  бит_РаботаСДиалогамиСервер.ИзменениеДоговораКонтрагента(Объект.ДоговорКонтрагента, Объект.Контрагент);	

КонецПроцедуры

// Процедура обрабатывает изменение настройки формы ввода.
// 
&НаСервере
//1c-izhtc spawn (
//Функция ИзменениеНастройкиФормы()
Функция ИзменениеНастройкиФормы(ОчищатьДанные = Истина)
//1c-izhtc spawn )

	// Проверка на возможность изменения настройки формы.
	Если ЗначениеЗаполнено(Объект.НастройкаФормы) И ЗначениеЗаполнено(Объект.Сценарий) Тогда
		Если Объект.НастройкаФормы.Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет 
			И Объект.Сценарий.бит_Периодичность <> Объект.НастройкаФормы.ПериодичностьПланирования Тогда
			
			// В случае фиксированного макета переодичность сценария должна совпадать с периодичностью макета.
			ВывестиСообщениеНесовпадениеПериодичности();
			флМожноИзменять = Ложь;
			Возврат флМожноИзменять;
		КонецЕсли; 
	КонецЕсли; 
	
	//1c-izhtc spawn (
	Если ОчищатьДанные Тогда 
		ОчиститьВсе();
	КонецЕсли;
	//1c-izhtc spawn )
	
	// Изменение кода. Начало. 09.02.2018{{
	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилищаДанных);
	ТаблицаДанных.Очистить();
	ПоместитьВоВременноеХранилище(ТаблицаДанных, АдресХранилищаДанных);
	// Изменение кода. Конец. 09.02.2018}}
	
	Объект.ПараметрНорм = Объект.НастройкаФормы.ПараметрНорм;
	фИменаПараметраНорм = ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ПодготовитьСтруктурыСвязи(Объект.ПараметрНорм);		
	
	ТекстЗапроса = Объект.НастройкаФормы.ТекстЗапроса;
	АдресКомпоновки = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(ТекстЗапроса, Компоновщик, УникальныйИдентификатор);	
	
    фКэшЗначений.НастройкиФормы = Справочники.бит_НастройкиФормВводаБюджета.ПодготовитьНастройки(Объект.НастройкаФормы);
	
	Если ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		Если фКэшЗначений.НастройкиФормы.ФиксированныйМакет Тогда
			// Для настройки с фиксированным макетом отбор задается в настройке формы ввода.
			Компоновщик.Настройки.Отбор.Элементы.Очистить();
			Объект.ДатаОкончанияПланирования = Неопределено;
		Иначе	
			// Копирование отбора из настройки.
			ОбНастройка   = Объект.НастройкаФормы.ПолучитьОбъект();
			СохрНастройка = ОбНастройка.ПолучитьНастройкиПостроителя();
			ВосстановитьОтбор(СохрНастройка);
		КонецЕсли; 
		
		// Копирование значений по-умолчанию из настройки.
		Для Каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
			ТекОписание = КиЗ.Значение;
			Если НЕ ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать 
				И ЗначениеЗаполнено(ТекОписание.ЗначениеПоУмолчанию) Тогда
				
				флЕстьРазличия = ?(Объект[ТекОписание.Имя] <> ТекОписание.ЗначениеПоУмолчанию, Истина, Ложь);
				Объект[ТекОписание.Имя] = ТекОписание.ЗначениеПоУмолчанию;
				Если флЕстьРазличия Тогда
					// Вызов обработчиков.
					Если ТекОписание.Имя = "Сценарий" Тогда
						ИзменениеСценария(Ложь,Ложь);
					ИначеЕсли ТекОписание.Имя = "Контрагент" Тогда
						ИзменениеКонтрагента();
					ИначеЕсли ТекОписание.Имя = "ДоговорКонтрагента" Тогда	
						ИзменениеДоговораКонтрагента();
					КонецЕсли; 
				КонецЕсли; // ФлЕстьРазличия.
			КонецЕсли; 
		КонецЦикла; // ФКэшЗначений.НастройкиФормы.Измерения.
        УстановитьПараметрыВыбораСтатей();
	КонецЕсли; // ЗначениеЗаполнено(Объект.НастройкаФормы).
	УстановитьВидимость();
	Возврат Истина;
	
КонецФункции

// Процедура устанавливает параметры выбора статей оборотов, в зависимости от настройки формы ввода бюджета.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораСтатей()
	
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];
	Если ИзмеренияРазворачивать.Найти("СтатьяОборотов") = Неопределено Тогда
		// Если разворот не по статьям, выбирать можно только те статьи, 
		// в которых ведется учет как минимум разворачиваемых аналитик.
		СтрОтбор = Новый Структура;
		Для Каждого Имя Из ИзмеренияРазворачивать Цикл
			СтрОтбор.Вставить("Учет_"+Имя, Истина);
		КонецЦикла; 
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.БДДС_РедактированиеСтатьяОборотов, СтрОтбор);
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.СтатьяОборотов, СтрОтбор);
	КонецЕсли; 
	
КонецПроцедуры

// Выполняет обновление дерева данных. 
// 
&НаСервере
Процедура ОбновитьДерево(ОчищатьТаблицы)
	
	// Очистим таблицу с данными.
	Если ОчищатьТаблицы Тогда
		ОчиститьТаблицы();
	КонецЕсли; 
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыОбновленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыОбновленияДерева.АдресКомпоновки		= АдресКомпоновки;
	ПараметрыОбновленияДерева.НастройкиКомпоновщика	= Компоновщик.ПолучитьНастройки();
	
	ДокументОбъект.ОбновитьДеревоДанных(ТабДокДанные, Объект.НастройкаФормы, ТекстЗапроса, ПараметрыОбновленияДерева);
	
	// Изменение кода. Начало. 09.02.2018{{
	Документы.бит_ФормаВводаБюджета.ЗаполнитьТаблицуДанных(ТабДокДанные, АдресХранилищаДанных);
	// Изменение кода. Конец. 09.02.2018}}
	
	МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);
	фКэшЗначений.НастройкиСтатей = Новый Соответствие;	
    бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(МассивСтатей, фКэшЗначений.НастройкиСтатей);
	
	ИменаТаблиц = Новый Массив;  
	ИменаТаблиц.Добавить("БДДС");
	ИменаТаблиц.Добавить("БДДС_Редактирование");
	ОФормитьТаблицу("БДДС", ИменаТаблиц, МассивСтатей);
	
	ИменаТаблиц = Новый Массив;  
	ИменаТаблиц.Добавить("ЗависимыеОбороты");
	ИменаТаблиц.Добавить("ЗависимыеОбороты_Редактирование");
	ОФормитьТаблицу("ЗависимыеОбороты", ИменаТаблиц, МассивСтатей);																		
	
	УправлениеВидимостьюКолонокТаблиц();
	
КонецПроцедуры

// Восстанавливает дерево данных по табличным частям. 
// 
&НаСервере
Процедура ВосстановитьДерево(ВыводитьСообщения = Ложь, УдалятьЛишниеСтроки = Ложь, ОбновитьДерево = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыВосстановленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыВосстановленияДерева.ВыводитьСообщения		= ВыводитьСообщения;
	ПараметрыВосстановленияДерева.АдресКомпоновки		= АдресКомпоновки;
	ПараметрыВосстановленияДерева.НастройкиКомпоновщика	= Компоновщик.ПолучитьНастройки();
	ПараметрыВосстановленияДерева.УдалитьЛишнее			= УдалятьЛишниеСтроки;
	ПараметрыВосстановленияДерева.ОбновитьДерево		= ОбновитьДерево;

	ДокументОбъект.ВосстановитьДеревоПоДанным(
		АдресХранилищаДанных,
		ЭтотОбъект.УникальныйИдентификатор,
		ТабДокДанные,
		Объект.НастройкаФормы,
		ТекстЗапроса,
		ПараметрыВосстановленияДерева);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);	
	фКэшЗначений.НастройкиСтатей = Новый Соответствие;
    бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(МассивСтатей, фКэшЗначений.НастройкиСтатей);
	
	ИменаТаблиц = Новый Массив;  
	ИменаТаблиц.Добавить("БДДС");
	ИменаТаблиц.Добавить("БДДС_Редактирование");
	ОФормитьТаблицу("БДДС", ИменаТаблиц, МассивСтатей);
	
	ИменаТаблиц = Новый Массив;  
	ИменаТаблиц.Добавить("ЗависимыеОбороты");
	ИменаТаблиц.Добавить("ЗависимыеОбороты_Редактирование");
	ОФормитьТаблицу("ЗависимыеОбороты", ИменаТаблиц, МассивСтатей);																		
	
	УправлениеВидимостьюКолонокТаблиц();
	
КонецПроцедуры

// Процедура очищает табличные части ЗависимыеОбороты и БДДС.
// 
&НаСервере
Процедура ОчиститьТаблицы()

	Объект.БДДС.Очистить();
	Объект.ЗависимыеОбороты.Очистить();

КонецПроцедуры

// Очищает таблицы данных и дерево данных. 
// 
&НаСервере
Процедура ОчиститьВсе()

	ТабДокДанные.Очистить();
	
	ОчиститьТаблицы();

КонецПроцедуры

// Процедура устанавливает ид строки на клиенте. 
// 
// Параметры:
//  ТекущаяСтрока - Строка.
// 
&НаКлиенте
Процедура УстановитьИД_БДДС_Клиент(ТекущаяСтрока)

	ТекущаяСтрока.ИД = ТекИдБДДС;
	ТекИдБДДС = ТекИдБДДС + 1;

КонецПроцедуры

// Процедура устанавливает ид строки на сервере. 
// 
// Параметры:
//  ТекущаяСтрока - Строка.
// 
&НаСервере
Процедура УстановитьИД_БДДС_Сервер(ТекущаяСтрока)

	ТекущаяСтрока.ИД = ТекИдБДДС;
	ТекИдБДДС = ТекИдБДДС + 1;

КонецПроцедуры

// Создает новую строку табличной части БДДС.
// 
// Параметры:
//  Расшифровка   - Структура.
//  НовоеЗначение - Число.
// 
&НаСервере
Процедура СоздатьНовуюСтрокуБюджета(Расшифровка, НовоеЗначение)
	
	НоваяСтрока = Объект.БДДС.Добавить();
	
	бит_БюджетированиеКлиентСервер.ЗаполнитьНовуюСтрокуБюджета(Объект, НоваяСтрока, Расшифровка.Период, Расшифровка.Измерения, фКэшЗначений.НастройкиФормы.Измерения);
	УстановитьИД_БДДС_Сервер(НоваяСтрока);
	
	// Заполнение ресурсов.
	НоваяСтрока[Расшифровка.ИмяРесурса] = НовоеЗначение;
	
	Если ЗначениеЗаполнено(НоваяСтрока.СтатьяОборотов) Тогда
		ИзменениеСтатьиОборотовВТабличнойЧасти(НоваяСтрока,"БДДС", "БДДС_Редактирование", Ложь);
	КонецЕсли; 
	
	// Период ставим, т.к. он безусловно обрабатывается.
	ЗаполнитьНорму(НоваяСтрока, "БДДС", "Период");		
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюСтрокуБюджета_Клиент(Расшифровка, НовоеЗначение, ЭтоРасчетная = Ложь)

	НоваяСтрока = Объект.БДДС.Добавить();
	
	// Установка ИД строки.
	УстановитьИД_БДДС_Клиент(НоваяСтрока);	
	
	// Заполнение аналитики.
	бит_БюджетированиеКлиентСервер.ЗаполнитьНовуюСтрокуБюджета(Объект, НоваяСтрока, Расшифровка.Период, Расшифровка.Измерения, фКэшЗначений.НастройкиФормы.Измерения);
	
	// Заполнение ресурсов
	НоваяСтрока[Расшифровка.ИмяРесурса] = НовоеЗначение;
	
	// Признак того, что значение было рассчитано по формуле.
	НоваяСтрока.Расчетная = ЭтоРасчетная;
	
	// Вызов механизма заполнения норм.	
	Если бит_БюджетированиеКлиентСервер.ВыполнятьЗаполнениеНормы(Объект.ПараметрНорм, фИменаПараметраНорм, "Период", фИспользоватьНормы) Тогда
		НастройкаСтатьи = фКэшЗначений.НастройкиСтатей[НоваяСтрока.СтатьяОборотов];
		Если НастройкаСтатьи = Неопределено ИЛИ (НастройкаСтатьи.Учет_Сумма И НастройкаСтатьи.Учет_Количество) Тогда
			ЗаполнитьНормуКлиент(НоваяСтрока.ПолучитьИдентификатор(), "БДДС", "Период");
		КонецЕсли; 
	КонецЕсли;	
	
	// При вводе даных в макет (ячейка "Сумма"): если строк БДДС нет, создается новая строка.
	// Количество в этой строке, естественно, не устаналивается, поэтому рассчет "Сумма = Цена * Количество" в нормировании,
	// обнуляет то, что было получено в "НоваяСтрока[Расшифровка.ИмяРесурса] = НовоеЗначение;".
	// Приведем к исходному.
	Если Расшифровка.ИмяРесурса = "Сумма" И НоваяСтрока.Количество = 0 Тогда
		НоваяСтрока.Сумма = НовоеЗначение;
	КонецЕсли;	
	
	// Проверка возможности заполнения полей в строке в зависимости от статьи оборотов.
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];
	флУдаленоКлючевоеПоле  = бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(НоваяСтрока,фКэшЗначений.НастройкиСтатей, фКэшЗначений.ИзмеренияВсе, ИзмеренияРазворачивать); 	
	
	Если флУдаленоКлючевоеПоле Тогда
        бит_БюджетированиеКлиентСервер.ВывестиСообщениеОНесоответствииСтатьи(НоваяСтрока.СтатьяОборотов);		
		// Необходимо удалить строку, потому что к ней не будет доступа, т.к. отбор в табличном поле 
		// редактирования осуществляется по измерениям со способом заполнения Разворачивать.
		Объект.БДДС.Удалить(НоваяСтрока);
	Иначе	
		Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
		    ЗаполнитьЗависимыеОборотыПоСтроке(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСтатьиШапка()
	
	Если фКэшЗначений.НастройкиСтатей[Объект.СтатьяОборотов] = Неопределено Тогда
		бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(Объект.СтатьяОборотов, фКэшЗначений.НастройкиСтатей);
	КонецЕсли; 
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(Объект.СтатьяОборотов);
	
	ИменаТаблиц = Новый Массив;  
	ИменаТаблиц.Добавить("БДДС");
	ИменаТаблиц.Добавить("БДДС_Редактирование");
	ОФормитьТаблицу("БДДС", ИменаТаблиц, МассивСтатей);
	
	ИменаТаблиц = Новый Массив;  
	ИменаТаблиц.Добавить("ЗависимыеОбороты");
	ИменаТаблиц.Добавить("ЗависимыеОбороты_Редактирование");
	ОФормитьТаблицу("ЗависимыеОбороты", ИменаТаблиц, МассивСтатей);																	
	
	УправлениеВидимостьюКолонокТаблиц();	
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСтатьиОборотовВТабличнойЧасти(Идентификатор, ИмяТабЧасти, ИмяПоля, ЗаполнятьНорму = Истина)
	
	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		ТекущиеДанные = Объект[ИмяТабЧасти].НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекущиеДанные = Идентификатор;
	КонецЕсли; 

	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;		
	КонецЕсли;
	
	Если фКэшЗначений.НастройкиСтатей[ТекущиеДанные.СтатьяОборотов] = Неопределено Тогда	
		бит_Бюджетирование.ПолучитьНастройкиСтатейОборотов(ТекущиеДанные.СтатьяОборотов, фКэшЗначений.НастройкиСтатей); 	
	КонецЕсли; 
	
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные,фКэшЗначений.ИзмеренияДоп,фКэшЗначений.НастройкиИзмерений);	
	
	Если ЗаполнятьНорму Тогда  		
		ЗаполнитьНорму(ТекущиеДанные, ИмяТабЧасти, "СтатьяОборотов");  		
	КонецЕсли; 
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить(ИмяПоля);
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(ТекущиеДанные.СтатьяОборотов);
	
	ОФормитьТаблицу(ИмяТабЧасти, ИменаПолей, МассивСтатей);			
	
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];	
	флУдаленоКлючевоеПоле = бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(ТекущиеДанные, фКэшЗначений.НастройкиСтатей, фКэшЗначений.ИзмеренияВсе, ИзмеренияРазворачивать);
	
	Если флУдаленоКлючевоеПоле Тогда  	
        бит_БюджетированиеКлиентСервер.ВывестиСообщениеОНесоответствииСтатьи(ТекущиеДанные.СтатьяОборотов);		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура РежемЗависимыхОборотовИзменение(Очистить)

	Если Очистить Тогда
		ОчиститьЗависимыеОбороты();
	КонецЕсли; 
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	флФиксированныйМакет                                 = фКэшЗначений.НастройкиФормы.ФиксированныйМакет;
	Элементы.ФормулаПредставление.Видимость              = флФиксированныйМакет;
	Элементы.РежимФормированияДвижений.Видимость         = флФиксированныйМакет;
	Элементы.ПериодПланированияДатаОкончания.Доступность = НЕ флФиксированныйМакет;
	Элементы.ГруппаТаблицаОтбор.Доступность              = НЕ флФиксированныйМакет;
	
	флРучнойВводЗависимых = РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов);	
	Элементы.ГруппаРедактированиеЗависимые.Видимость = флРучнойВводЗависимых;
	Элементы.БДДС_РедактированиеКомандаСкопироватьСтрокуВЗависимые.Видимость = флРучнойВводЗависимых;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//// Видимость элементов шапки.
	//Для Каждого КиЗ Из фКэшЗначений.НастройкиИзмерений Цикл
	//	Имя       = КиЗ.Ключ;
	//	Настройка = КиЗ.Значение;
	//	Если Имя = "Сценарий" Тогда
	//		Продолжить;
	//	КонецЕсли; 		
	//	Если Найти(Имя,"Аналитика_")>0 Тогда
	//		Если Настройка = Неопределено Тогда
	//			Элементы[Имя].Видимость = Ложь;
	//		Иначе
	//			Элементы[Имя].Заголовок = Настройка.Синоним;
	//		КонецЕсли; 
	//	КонецЕсли; 
	//	Элементы[Имя].АвтоОтметкаНезаполненного = Ложь;
	//	Элементы[Имя].ОтметкаНезаполненного = Ложь;		
	//КонецЦикла; 
	//
	//// Автоотметка значений по умолчанию, обязательных к заполнению.
	//ИзмеренияОбязательные = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию];
	//
	//Для Каждого Имя Из ИзмеренияОбязательные Цикл
	//    Элементы[Имя].АвтоОтметкаНезаполненного = Истина;
	//	Если НЕ ЗначениеЗаполнено(Объект[Имя]) Тогда
	//		Элементы[Имя].ОтметкаНезаполненного = Истина;
	//	КонецЕсли; 
	//КонецЦикла; 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// Видимость нормы.
	// флЕстьКоличествоСумма = Объект.НастройкаФормы.Учет_Количество И Объект.НастройкаФормы.Учет_Сумма;
	флЕстьКоличествоСумма = Истина;
	Элементы.БДДС_РедактированиеНорма.Видимость = флЕстьКоличествоСумма;
	Элементы.БДДСНорма.Видимость = флЕстьКоличествоСумма;
	Элементы.ЗависимыеОбороты_РедактированиеНорма.Видимость = флЕстьКоличествоСумма;
	Элементы.ЗависимыеОборотыНорма.Видимость = флЕстьКоличествоСумма;
	
	// Блокировка элементов управления в зависимости от статуса.
	ЗаблокироватьЭлементыФормы();
	
	// Вызов механизма доступности элементов управления.
	УстановитьНастройкиДоступностиЭлементов();	
	
	Если фКэшЗначений.ПроводитьПослеУтверждения 
		И Объект.Проведен И Объект.ОтправленНаСогласование
		И Объект.РежимПринятияКУчету = 1
		И Статус <> Справочники.бит_СтатусыОбъектов.ФормаВвода_Утвержден Тогда
		Элементы.ПредупреждениеОПринятиеКУчетуПослеУтверждения.Видимость = Истина;
	Иначе
		Элементы.ПредупреждениеОПринятиеКУчетуПослеУтверждения.Видимость = Ложь;
	КонецЕсли;
	
	//+СБ Пискунова 03.02.2017 #2691
	Попытка
		ОпределитьДоступностьКнопокМаршрутаСогласования();
	Исключение
	КонецПопытки;
	//-СБ Пискунова 03.02.2017 #2691
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-14 (#3808)
	Элементы.ГруппаСтраницаСводныеДанныеПоБюджету.Видимость = ок_СводныеДанныеПоБюджету.Количество()>0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-14 (#3808)
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеМенюПараметрыВычислений(Форма)

	Элементы = Форма.Элементы;
	Объект 	 = Форма.Объект;

	Элементы.ВычислятьФормулыПриВводеДа.Пометка  = Объект.ВычислятьФормулыПриВводе;
	Элементы.ВычислятьФормулыПриВводеНет.Пометка = НЕ Объект.ВычислятьФормулыПриВводе;
	Если Объект.ВычислятьФормулыПриВводе Тогда
		Элементы.ПараметрыВычислений.Отображение = ОтображениеКнопки.Текст;
	Иначе
		Элементы.ПараметрыВычислений.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьЭлементыФормы()

	//Начало_бит_БК_Магомедов_30.11.2011
	//флЭлементыФормыДоступны = ?( Статус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик
	//						      ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Истина, Ложь);
	Статус_НаРассмотрении = Справочники.бит_СтатусыОбъектов.ФормаВвода_НаРассмотрении;
	флЭлементыФормыДоступны = ?( Статус = Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик ИЛИ Статус = Статус_НаРассмотрении
								ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка() ИЛИ Не Объект.Проведен, Истина, Ложь);
	//Конец_бит_БК_Магомедов_30.11.2011
	
	МассивНедоступныхЭлементов = Новый Массив;
	ЗаблокироватьЭлементыГруппы("ГруппаСтраницаОсновные", МассивНедоступныхЭлементов);
	ЗаблокироватьЭлементыГруппы("ГруппаСтраницаПрочее", МассивНедоступныхЭлементов);
	
	//ГруппаСтраницаДанныеБюджета.
	ЗаблокироватьЭлементыГруппы("ГруппаДанныеВерх", МассивНедоступныхЭлементов);
	ЗаблокироватьЭлементыГруппы("ГруппаДанныеНиз", МассивНедоступныхЭлементов);
	ЗаблокироватьЭлементыГруппы("ГруппаКомПанельДерево", МассивНедоступныхЭлементов);
	
	// Необходимо обеспечитьв выгрузку шаблона во всех статусах.
    ИндВыгрузитьШаблон = МассивНедоступныхЭлементов.Найти("КомандаВыгрузитьШаблонЭксель");
	Если НЕ ИндВыгрузитьШаблон = Неопределено Тогда
		МассивНедоступныхЭлементов.Удалить(ИндВыгрузитьШаблон);
	КонецЕсли; 
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ЗаблокироватьЭлементыГруппы("ГруппаСтраницаСтрокиБюджета", МассивНедоступныхЭлементов);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	МассивНедоступныхЭлементов.Добавить("ЗависимыеОборотыКомандаЗаполнитьЗависимыеОбороты");	
	МассивНедоступныхЭлементов.Добавить("ПрофильРаспределения");
	МассивНедоступныхЭлементов.Добавить("Дата");	
	МассивНедоступныхЭлементов.Добавить("ЕдиницаИзмеренияСумм");
	МассивНедоступныхЭлементов.Добавить("Ответственный");
	
	//Начало_бит_БК_Магомедов_15.11.2011 
	МассивНедоступныхЭлементов.Добавить("Контрагент");
	МассивНедоступныхЭлементов.Добавить("ДоговорКонтрагента");
	//Конец_бит_БК_Магомедов_15.11.2011 
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("бит_ПериодНачало"));
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("бит_ПериодКонец"));
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("КомандаРедактироватьПериод"));
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("бит_Инициатор"));
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("бит_БК_Цель"));
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("бит_БК_ОбъединяющаяЗаявка"));
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("бит_БК_ТехническаяЗаявка"));
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("бит_БК_УсловиеПредоплаты"));
	МассивНедоступныхЭлементов.Удалить(МассивНедоступныхЭлементов.Найти("бит_БК_НомерЗаявки"));
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	Для Каждого ИмяЭлемента Из МассивНедоступныхЭлементов Цикл
		ТекЭлемент = Элементы[ИмяЭлемента];
		// Изменение кода. Начало. 19.05.2014{{
		Если (ТипЗнч(ТекЭлемент) = Тип("ПолеФормы") И НЕ ТекЭлемент.Вид = ВидПоляФормы.ПолеФлажка)
			ИЛИ ТипЗнч(ТекЭлемент) = Тип("ТаблицаФормы") Тогда
		// Изменение кода. Конец. 19.05.2014}}	
			ТекЭлемент.ТолькоПросмотр = НЕ флЭлементыФормыДоступны;
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("ГруппаФормы") Тогда	
			Если ТекЭлемент.Вид = ВидГруппыФормы.КоманднаяПанель
				ИЛИ ТекЭлемент.Вид = ВидГруппыФормы.КонтекстноеМеню Тогда
				ТекЭлемент.Доступность = флЭлементыФормыДоступны;
			Иначе	
				ТекЭлемент.ТолькоПросмотр = НЕ флЭлементыФормыДоступны;
			КонецЕсли;
		Иначе	
			ТекЭлемент.Доступность = флЭлементыФормыДоступны;
		КонецЕсли; 
	КонецЦикла; 

	Элементы.ТабДокДанные.ТолькоПросмотр = Ложь;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Элементы.БК_КоманднаяПанель.Доступность = флЭлементыФормыДоступны;
	Элементы.БДДС.ИзменятьСоставСтрок = флЭлементыФормыДоступны;
	Элементы.БДДС.ИзменятьПорядокСтрок = флЭлементыФормыДоступны;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	//Начало_бит_БК_Магомедов_15.11.2011 
	//управление доступностью выюора вида операции
	Для каждого Кнопка Из Элементы.ПодменюВидаОперации.ПодчиненныеЭлементы Цикл
		Кнопка.Доступность = флЭлементыФормыДоступны;
	КонецЦикла;
	
	//Кнопка копирования в колонке
	Элементы.БДДСКонтекстноеМенюЗаполнитьКолонку.Доступность = флЭлементыФормыДоступны;
	//Конец_бит_БК_Магомедов_15.11.2011 
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьЭлементыГруппы(ИмяГруппы, МассивНедоступныхЭлементов)

	Для Каждого ЭлГр Из Элементы[ИмяГруппы].ПодчиненныеЭлементы Цикл
		Если (ТипЗнч(ЭлГр) = Тип("ГруппаФормы") И НЕ ЭлГр.Вид = ВидГруппыФормы.КоманднаяПанель) Тогда  
			ЗаблокироватьЭлементыГруппы(ЭлГр.Имя, МассивНедоступныхЭлементов);
		ИначеЕсли (ТипЗнч(ЭлГр) = Тип("ГруппаФормы") И ЭлГр.Вид = ВидГруппыФормы.КоманднаяПанель) Тогда 	
			МассивНедоступныхЭлементов.Добавить(ЭлГр.Имя);
		ИначеЕсли ТипЗнч(ЭлГр) = Тип("ТаблицаФормы") Тогда
			// Для этих таблиц оставляем открытыми команды и контекстное меню.
			Если НЕ ЭлГр.Имя = "БДДС" И НЕ ЭлГр.Имя = "ЗависимыеОбороты" Тогда
				МассивНедоступныхЭлементов.Добавить(ЭлГр.КоманднаяПанель.Имя);
				МассивНедоступныхЭлементов.Добавить(ЭлГр.КонтекстноеМеню.Имя);
			КонецЕсли; 
			ЗаблокироватьЭлементыГруппы(ЭлГр.Имя, МассивНедоступныхЭлементов);
		Иначе
			Если ТипЗнч(ЭлГр) = Тип("ПолеФормы") Тогда
				МассивНедоступныхЭлементов.Добавить(ЭлГр.Имя);
				Если ЗначениеЗаполнено(ЭлГр.КонтекстноеМеню.ПодчиненныеЭлементы) Тогда
					Для Каждого ЭлКонМеню Из ЭлГр.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
						МассивНедоступныхЭлементов.Добавить(ЭлКонМеню.Имя);
					КонецЦикла; 
				КонецЕсли; 
			ИначеЕсли ТипЗнч(ЭлГр) = Тип("КнопкаФормы") Тогда	
				МассивНедоступныхЭлементов.Добавить(ЭлГр.Имя);
			КонецЕсли;	
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуКнопкиОтбор()

	Если фУстанавливатьОтборЗависимых Тогда
		Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Картинка  = БиблиотекаКартинок.ОтключитьОтбор;
		Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Заголовок = НСтр("ru = 'Отключить отбор'");
	Иначе	
		Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Картинка  = БиблиотекаКартинок.ОтборКомпоновкиДанных;
		Элементы.ЗависимыеОборотыКомандаПереключитьОтбор.Заголовок = НСтр("ru = 'Установить отбор'");
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ОкончаниеРедактированияБДДС(ИдСтроки)
	
	ТекущаяСтрока = Объект.БДДС.НайтиПоИдентификатору(ИдСтроки);
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ЗаполнитьЗависимыеОборотыПоСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеЗависимых(ИдСтроки)
	
	ТекущаяСтрока = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ИдСтроки);
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		бит_Бюджетирование.РаспределитьПоПрофилю(ПрофильРаспределения,Объект.ЗависимыеОбороты,ТекущаяСтрока,Объект.Сценарий.бит_Периодичность);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СкоприроватьСтрокуВЗависимые(ИдСтроки)

	ТекущаяСтрока = Объект.БДДС.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		СтрокаЗависимые = Объект.ЗависимыеОбороты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗависимые,ТекущаяСтрока);
		
		// Расчитаем сумму в указанных единицах измерения сумм.
	    РазмерностьЕдиницы = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(Объект.ЕдиницаИзмеренияСумм);			
		СтрокаЗависимые.Сумма = бит_ОбщегоНазначения.ПересчитатьИзРазмерностиВРазмерность(СтрокаЗависимые.Сумма
																					   ,РазмерностьЕдиницы
																					   ,1);
		СтрокаЗависимые.ИД_Родитель = ТекущаяСтрока.ИД;
		СтрокаЗависимые.Комментарий = "";
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4242)
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтотОбъект, Объект, Статус);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтотОбъект, Объект, Статус);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4242)
	
КонецПроцедуры 

&НаСервере
Процедура ОФормитьТаблицу(ПрефиксТаблицы, МассивОформляемыхТаблиц = Неопределено, вхМассивСтатей = Неопределено) 
	
	Возврат; //1c-izhtc spawn
	
	// ----------------------------------------------------------------------
	// Оформление реквизитов строк по статьям оборотов.
	УдалитьСтароеОформление = Ложь;
	ПрефиксКонтейнера = "Объект.";
	
	Если вхМассивСтатей = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаПоиска = Объект[ПрефиксТаблицы].Выгрузить();
		МассивСтатей = ТаблицаПоиска.ВыгрузитьКолонку("СтатьяОборотов");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].ЗагрузитьЗначения(МассивСтатей);
		
	Иначе // Работаем только с массивом статей оборотов.
		МассивСтатей = Новый Массив; 		
		Для Каждого ТекСтатья Из вхМассивСтатей Цикл
			НайденноеЗначение = ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].НайтиПоЗначению(ТекСтатья);
			Если НайденноеЗначение = Неопределено Тогда	
				МассивСтатей.Добавить(ТекСтатья);
				ЭтотОбъект["фСписокСтатей" + ПрефиксТаблицы].Добавить(ТекСтатья);		
			КонецЕсли;  		
		КонецЦикла; 
	КонецЕсли;	
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОтметитьОбязательныеРазрезыСтатей", Истина);
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление
	                                                             , МассивСтатей
																 , УдалитьСтароеОформление
																 , ПрефиксКонтейнера
																 , ПрефиксТаблицы
																 , ""
																 , фКэшЗначений.СтруктураДопПолей
																 , МассивОформляемыхТаблиц
																 , ДопПараметры);
	
КонецПроцедуры
															 
// Формирует массив статей, которые присутствуют в дереве.
// 
// Параметры:
//  ТабДок - ТабличныйДокумент
// 
// Возвращаемое значение:
//  МассивСтатей - Массив.
// 
&НаСервере
Функция ИзвлечьСтатьиИзДерева(ТабДок)
	
	МассивСтатей = Новый Массив;
	ГруппыСтатейОборотов = ГруппыСтатейОборотов(); 
	
	Для Каждого Обл Из ТабДок.Области Цикл
		
		Если Найти(Обл.Имя, "СтатьяОборотов_") > 0 Тогда
			// Изменение кода. Начало. 28.02.2018{{
			Если Обл.Расшифровка <> Неопределено 
				И ТипЗнч(Обл.Расшифровка.Значение) = Тип("СправочникСсылка.бит_СтатьиОборотов") Тогда 

				ЭтоГруппа = ГруппыСтатейОборотов.Найти(Обл.Расшифровка.Значение, "Ссылка");
				Если ЭтоГруппа = Неопределено Тогда
					МассивСтатей.Добавить(Обл.Расшифровка.Значение);
				КонецЕсли; 
			КонецЕсли; 
			// Изменение кода. Конец. 28.02.2018}}
		КонецЕсли; 
	КонецЦикла; 
	
	ТабВрем = Объект.БДДС.Выгрузить();
	ТабВрем.Свернуть("СтатьяОборотов");
	
	Для Каждого СтрокаТаблицы Из ТабВрем Цикл
		МассивСтатей.Добавить(СтрокаТаблицы.СтатьяОборотов);
	КонецЦикла; 
	
	ТабВрем = Объект.ЗависимыеОбороты.Выгрузить();
	ТабВрем.Свернуть("СтатьяОборотов");
	
	Для Каждого СтрокаТаблицы Из ТабВрем Цикл
		МассивСтатей.Добавить(СтрокаТаблицы.СтатьяОборотов);
	КонецЦикла; 
	
	МассивСтатей.Добавить(Объект.СтатьяОборотов);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
	
	Возврат МассивСтатей;
	
КонецФункции

// Управляет видимостью колонок табличных полей БДДС_Редактирование и ЗависимыеОбороты_Редактирование.
// 
&НаСервере
Процедура УправлениеВидимостьюКолонокТаблиц()

	Для Каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
		Если КиЗ.Ключ = "Сценарий" Тогда
			Продолжить;
		КонецЕсли; 		
		ТекОписание = КиЗ.Значение;
		ИмяКолонки = "БДДС_Редактирование"+ТекОписание.Имя;
		Элементы[ИмяКолонки].Видимость = Истина;
	КонецЦикла; 
	
	// Скроем аналитики, которые заведомо не используются ни в одной статье в рамках формы ввода.
	локМассивСтатей = Новый Массив;
	Для Каждого КиЗ Из фКэшЗначений.НастройкиСтатей Цикл
		локМассивСтатей.Добавить(КиЗ.Ключ);
	КонецЦикла; 
	локНастройкаВидимостиКолонок = Новый Структура;
	
	НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(локМассивСтатей
																		, Новый Массив
																		, локНастройкаВидимостиКолонок);
	
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				, локНастройкаВидимостиКолонок
											 				, "БДДС_Редактирование");
															
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				, локНастройкаВидимостиКолонок
											 				, "ЗависимыеОбороты_Редактирование");
															
	// Скрываем в поле редактирования колонки, для которых установлен режим "Разворачивать" или "ПоУмолчанию".
	ВидимостьАналитик = ВидимостьАналитикПоНастройкеДокумента();
	
	Для каждого КлючЗначение Из ВидимостьАналитик Цикл
		Элементы[КлючЗначение.Ключ].Видимость = КлючЗначение.Значение;
	КонецЦикла;
	
	// Видимость нормы
	// флЕстьКоличествоСумма = Объект.НастройкаФормы.Учет_Количество И Объект.НастройкаФормы.Учет_Сумма;
	флЕстьКоличествоСумма = Истина;
	Элементы.БДДС_РедактированиеНорма.Видимость = флЕстьКоличествоСумма;
	Элементы.БДДСНорма.Видимость = флЕстьКоличествоСумма;
	Элементы.ЗависимыеОбороты_РедактированиеНорма.Видимость = флЕстьКоличествоСумма;
	Элементы.ЗависимыеОборотыНорма.Видимость = флЕстьКоличествоСумма;	
	
КонецПроцедуры

// Процедура выполняет пересчет размерности сумм в документе.
// 
// Параметры:
//  НачЕдиницаИзмеренияСумм - ПеречислениеСсылка.бит_ЕдиницыИзмеренияСумм.
// 
&НаСервере
Процедура ВыполнитьПересчетРазмерностиСумм(НачЕдиницаИзмеренияСумм)
	
	РазмерностьНач = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(НачЕдиницаИзмеренияСумм);
	РазмерностьКон = бит_ОбщегоНазначения.ПолучитьРазмерностьЕдиницыИзмеренияСумм(Объект.ЕдиницаИзмеренияСумм);
	
	Для Каждого ТекСтрока Из Объект.БДДС Цикл
		Если ТекСтрока.СтатьяОборотов.ЭтоКоэффициент Тогда
			// Безразмерные величины не пересчитываем.
			Продолжить;
		КонецЕсли; 		
		
		// Расчитаем сумму в указанных единицах измерения сумм.
		ТекСтрока.Сумма = бит_ОбщегоНазначения.ПересчитатьИзРазмерностиВРазмерность(ТекСтрока.Сумма
																				   ,РазмерностьНач
																				   ,РазмерностьКон);
																				   
		ТекСтрока.Норма = бит_ОбщегоНазначения.ПересчитатьИзРазмерностиВРазмерность(ТекСтрока.Норма
																				   ,РазмерностьНач
																				   ,РазмерностьКон);
	КонецЦикла;
	
	ВосстановитьДерево();
	
КонецПроцедуры

// Устанавливает загруженные из Эксель данные в форму ввода.
// 
&НаСервере
Процедура УстановитьЗагруженныеДанные(ДанныеЭксель, ВыводитьСообщения = Истина)

    Для Каждого ЭД Из ДанныеЭксель Цикл
    	
    	Попытка
    		Обл = ТабДокДанные.Область(ЭД.Имя);
    	Исключение
    		Обл = Неопределено;
    		Если ВыводитьСообщения Тогда
    			ТекстСообщения =  НСтр("ru = 'Не удалось найти ячейку по имени %1! Значение %2 не будет загружено.'");
    			ТекстСообщения = СтрШаблон(ТекстСообщения, ЭД.Имя, ЭД.Значение);
    			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
    		КонецЕсли; 
    	КонецПопытки;
    	
    	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) Тогда
    		
    		ОбластьР = Обл.Расшифровка;
    		
    		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР,"РасшифровкаЯчейкиФормыВвода") 
    			 И ОбластьР.Вид = "Значение" 
    			 И НЕ ЗначениеЗаполнено(ОбластьР.Формула)  Тогда
    							
    			Если ЭД.Значение <> 0 Тогда
    				СтрОтбор = Новый Структура;
    				Для Каждого КиЗ Из ОбластьР.Измерения Цикл
    					СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
    				КонецЦикла; 
    				СтрОтбор.Вставить("Период", ОбластьР.Период);
    				НайденныеСтроки = Объект.БДДС.НайтиСтроки(СтрОтбор);
    				Если НайденныеСтроки.Количество() > 0 Тогда
    					ТекСтрока = НайденныеСтроки[0];
    					Если Лев(ОбластьР.Имя,1)  = "K"  Тогда
    					   ТекСтрока.Количество = ЭД.Значение;
    					ИначеЕсли Лев(ОбластьР.Имя, 1) = "С" Тогда	
    					   ТекСтрока.Сумма = ЭД.Значение;
    					КонецЕсли; 
    				Иначе	
    					СоздатьНовуюСтрокуБюджета(ОбластьР, ЭД.Значение);
    				КонецЕсли;
    			КонецЕсли; 
    		КонецЕсли; 
    	КонецЕсли; 
    КонецЦикла; // ДанныеЭксель.

	ВосстановитьДерево();
    
    // Заполнение зависимых оборотов.
    ЗаполнитьЗависимыеОбороты(Ложь);
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрНормПриИзменении(Элемент)
	
	флПерезаполнить = Ложь;
	Если ЗначениеЗаполнено(Объект.ПараметрНорм) 
		И ( Объект.БДДС.Количество() > 0 ИЛИ Объект.ЗависимыеОбороты.Количество() > 0 ) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПараметрНормВопросЗавершение", ЭтотОбъект); 
		ТекстВопроса =  НСтр("ru = 'Перезаполнить нормы согласно выбранного параметра?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 15, КодВозвратаДиалога.Отмена);
	Иначе
		флИзменениеРазрешено = ИзменениеПараметраНормСерверБезКонтекста(Объект.ПараметрНорм);
		ИзменениеПараметраНорм();
		Если НЕ флИзменениеРазрешено Тогда
			ИзвлечьИзКэша("ПараметрНорм");
			Возврат;
		КонецЕсли;	
		ДобавитьВКэш("ПараметрНорм");			
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ПараметрНормВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ПараметрНормВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	флПерезаполнить = Ложь;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		флПерезаполнить = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		флПерезаполнить = Ложь;			 
	Иначе	 
		ИзвлечьИзКэша("ПараметрНорм");
		Возврат;
	КонецЕсли; 	
	
	флИзменениеРазрешено = ИзменениеПараметраНормСерверБезКонтекста(Объект.ПараметрНорм);
	Если флПерезаполнить Тогда
		ИзменениеПараметраНорм();
	КонецЕсли; 
	Если НЕ флИзменениеРазрешено Тогда
		ИзвлечьИзКэша("ПараметрНорм");
		Возврат;
	КонецЕсли;	
	
	ДобавитьВКэш("ПараметрНорм");	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеПараметраНормСерверБезКонтекста(ПараметрНорм)

	// Проверка правильности выбора параметра норм.
	Если ЗначениеЗаполнено(ПараметрНорм) Тогда
		Если НЕ ТипЗнч(ПараметрНорм.ЕдиницаИзмерения) = Тип("СправочникСсылка.Валюты") Тогда
			ТекстСообщения = НСтр("ru = 'Допустим выбор параметров только с единицей измерения типа Валюта!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ИзменениеПараметраНорм()

	фИменаПараметраНорм = ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ПодготовитьСтруктурыСвязи(Объект.ПараметрНорм);
	
	СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);		
	бит_Бюджетирование.ПерезаполнитьНормыТабЧасти(Объект.ПараметрНорм, Объект.Сценарий, Объект.БДДС, СтрКурсаДок, фИменаПараметраНорм, Объект.ЕдиницаИзмеренияСумм);
	
	Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
		бит_Бюджетирование.ПерезаполнитьНормыТабЧасти(Объект.ПараметрНорм, Объект.Сценарий, Объект.ЗависимыеОбороты, СтрКурсаДок, фИменаПараметраНорм, Объект.ЕдиницаИзмеренияСумм);		
	КонецЕсли; 
	ВосстановитьДерево();
	
КонецПроцедуры

// Изменение кода. Начало. 14.02.2018{{
&НаКлиенте
Процедура ЗаполнитьНормуКлиент(ВхДанные, ИмяТабЧасти, ИмяПоля) 

	Если НЕ фИспользоватьНормы Тогда 	
		Возврат;  	
	КонецЕсли; 
	
	Если ТипЗнч(ВхДанные) = Тип("Число") Тогда 		
		ТекущиеДанные = Объект[ИмяТабЧасти].НайтиПоИдентификатору(ВхДанные); 		
	Иначе			
		ТекущиеДанные = ВхДанные; 		
	КонецЕсли; 
	
	Если ТекущиеДанные = Неопределено Тогда 	
		Возврат;   	
	КонецЕсли; 
	
	Если бит_БюджетированиеКлиентСервер.ВыполнятьЗаполнениеНормы(Объект.ПараметрНорм, фИменаПараметраНорм, ИмяПоля, фИспользоватьНормы) Тогда
		СтрКурсаДок = Новый Структура;
		ПроверитьИспользованиеКурсаСценария(Объект.Сценарий, СтрКурсаДок, Объект.ВалютаДокумента, ТекущиеДанные.Период);
		Если НЕ ЗначениеЗаполнено(СтрКурсаДок) Тогда
			СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		КонецЕсли; 
		ЗаполнитьНормуВСтроке(ТекущиеДанные,СтрКурсаДок);
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьИспользованиеКурсаСценария(Сценарий, СтрКурсаДок, ВалютаДокумента, Период)

	Если ЗначениеЗаполнено(Сценарий)
		И бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "ИспользоватьКурсыСценария") Тогда
		СтрКурса    = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДокумента, Период);
		СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", ВалютаДокумента, СтрКурса.Курс, СтрКурса.Кратность);
		ИспользоватьКурсыСценария = Истина;
	КонецЕсли; 

КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьНормуВСтроке(ТекущиеДанные,СтрКурсаДок)

	// На клиент перенести.
	//Если ТекущиеДанные.СтатьяОборотов.Учет_Количество И ТекущиеДанные.СтатьяОборотов.Учет_Сумма Тогда
	Если КоличествоСуммаВстатье(ТекущиеДанные.СтатьяОборотов) Тогда
	
	   МассивОтбор = Новый Массив;
	   Для Каждого КиЗ Из фИменаПараметраНорм.БП Цикл
	   	   эо = Новый Структура;
		   эо.Вставить("Имя"     ,КиЗ.Значение);
		   эо.Вставить("Значение", ТекущиеДанные[КиЗ.Ключ]);
		   МассивОтбор.Добавить(эо);
	   КонецЦикла; 
	   
	   Если МассивОтбор.Количество() = 0 Тогда
		 // Если нет отбора, нет смысла получать норму.
	   	 Возврат;
	   КонецЕсли; 	   
	   
	   ТекущиеДанные.Норма = ПолучитьЗначениеНормы(Объект.ПараметрНорм
												   , ТекущиеДанные.Период
												   , Объект.Сценарий
												   , МассивОтбор
												   , СтрКурсаДок);	
	   РазмерностьНач      = 1;
	   РазмерностьКон      = ПолучитьРазмерностьЕдиницыИзмеренияСумм(Объект.ЕдиницаИзмеренияСумм);
	   ТекущиеДанные.Норма = бит_ОбщегоНазначенияКлиентСервер.ПересчитатьИзРазмерностиВРазмерность(ТекущиеДанные.Норма
																				                    ,РазмерностьНач
																				                    ,РазмерностьКон);																				   
	   бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(ТекущиеДанные, Истина);
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоСуммаВстатье(СтатьяОборотов)

	КоличествоСумма = Ложь;
	СтруктураУчета = бит_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатьяОборотов, "Учет_Количество, Учет_Сумма");
	
	Если СтруктураУчета.Учет_Количество И СтруктураУчета.Учет_Сумма Тогда
		КоличествоСумма = Истина;
	КонецЕсли; 

	Возврат КоличествоСумма;
	
КонецФункции
 
&НаСервереБезКонтекста
Функция ПолучитьЗначениеНормы(ВидПараметра, Период, Сценарий, Отбор, СтрКурсаДок)

	ЗначениеНормы = 0;
	
	ИмяСпрСц = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	ПустойСц = Справочники[ИмяСпрСц].ПустаяСсылка();
	
	СписокСценариев = Новый СписокЗначений;
	СписокСценариев.Добавить(Сценарий);
	СписокСценариев.Добавить(ПустойСц);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВидПараметра", ВидПараметра);
	Запрос.УстановитьПараметр("СписокСценариев", СписокСценариев);
	Запрос.УстановитьПараметр("ПустойСценарий", ПустойСц);
	Для Каждого эо Из Отбор Цикл
		// Установка параметров для отбора.
		Запрос.УстановитьПараметр("Зн_"+эо.Имя,эо.Значение);
		ПустоеЗначение = Неопределено;
		Если ЗначениеЗаполнено(эо.Значение) Тогда
			 ТекТип = ТипЗнч(Эо.Значение);
			 ТекМассив = Новый Массив;
			 ТекМассив.Добавить(ТекТип);
			 ТекОписание = Новый ОписаниеТипов(ТекМассив);
			 ПустоеЗначение = ТекОписание.ПривестиЗначение();
		КонецЕсли; 
		Запрос.УстановитьПараметр("Пустое_"+эо.Имя, ПустоеЗначение);
	КонецЦикла; 
		
	// Извлекаем значение параметра
	// заполненный сценарий имеет больший приоритет перед пустым
	// заполненная аналитика имеет больший приоритет перед пустой.
	Шаблон = "ВЫБРАТЬ
	         |	ЗнчПараметров.Параметр,
	         |	ЗнчПараметров.ЕдиницаИзмерения,
	         |	ЗнчПараметров.Аналитика_1 КАК Аналитика_1,
	         |	ЗнчПараметров.Аналитика_2 КАК Аналитика_2,
	         |	ЗнчПараметров.Аналитика_3 КАК Аналитика_3,
	         |	ЗнчПараметров.Аналитика_4 КАК Аналитика_4,
	         |	ЗнчПараметров.ЗначениеПараметра КАК ЗначениеПараметра,
	         |	ВЫБОР
	         |		КОГДА ЗнчПараметров.Сценарий = &ПустойСценарий
	         |			ТОГДА 2
	         |		ИНАЧЕ 1
	         |	КОНЕЦ КАК Приоритет
	         |ИЗ
	         |	РегистрСведений.бит_ЗначенияПроизвольныхПараметровРегистратор.СрезПоследних(&Период, Сценарий В (&СписокСценариев)) КАК ЗнчПараметров
	         |ГДЕ
	         |	ЗнчПараметров.Параметр = &ВидПараметра
			 |{%Для Каждого ЭлементОтбора ИЗ Отбор ЦИКЛ%}
	         | И (ЗнчПараметров.{%ЭлементОтбора.Имя%} = &Зн_{%ЭлементОтбора.Имя%} 
			 |     ИЛИ ЗнчПараметров.{%ЭлементОтбора.Имя%} = &Пустое_{%ЭлементОтбора.Имя%}
			 |     ИЛИ ЗнчПараметров.{%ЭлементОтбора.Имя%}.Ссылка ЕСТЬ NULL)
	         |{%КонецЦикла%}			 			 
	         |
	         |УПОРЯДОЧИТЬ ПО
	         |	Приоритет,
	         |	Аналитика_1 УБЫВ,
	         |	Аналитика_2 УБЫВ,
	         |	Аналитика_3 УБЫВ,
	         |	Аналитика_4 УБЫВ
	         |АВТОУПОРЯДОЧИВАНИЕ";
	
   СтрКонтекст = Новый Структура("Отбор", Отбор);
   Запрос.Текст = бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(Шаблон,СтрКонтекст);
   
   Результат = Запрос.Выполнить();
   Выборка = Результат.Выбрать();
   Если Выборка.Следующий() Тогда
	   СтрКурсаПарам = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, Выборка.ЕдиницаИзмерения, Период);
	   ЗначениеНормы = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.ЗначениеПараметра
																			   , Выборка.ЕдиницаИзмерения
	                                                                           , СтрКурсаДок.Валюта	
																			   , СтрКурсаПарам.Курс																			   
																			   , СтрКурсаДок.Курс
																			   , СтрКурсаПарам.Кратность																			   
																			   , СтрКурсаДок.Кратность);
   КонецЕсли; 
   
   Если НЕ ТипЗнч(ЗначениеНормы) = Тип("Число") Тогда
	   ЗначениеНормы = 0;
   КонецЕсли; 
   Возврат ЗначениеНормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРазмерностьЕдиницыИзмеренияСумм(ЕдиницаИзмеренияСумм)

	СоответствиеКоэффициентов = Новый Соответствие;
	СоответствиеКоэффициентов.Вставить(ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Единицы") , 1);
	СоответствиеКоэффициентов.Вставить(ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Тысячи")  , 1000);
	СоответствиеКоэффициентов.Вставить(ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Миллионы"), 1000000);
	
	Коэффициент = СоответствиеКоэффициентов.Получить(ЕдиницаИзмеренияСумм);
    Коэффициент = ?(Коэффициент = Неопределено, 1, Коэффициент);
	
	Возврат Коэффициент;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНорму(ВхДанные, ИмяТабЧасти, ИмяПоля) 

	Если НЕ фИспользоватьНормы Тогда 	
		Возврат;  	
	КонецЕсли; 
	
	Если ТипЗнч(ВхДанные) = Тип("Число") Тогда 		
		ТекущиеДанные = Объект[ИмяТабЧасти].НайтиПоИдентификатору(ВхДанные); 		
	Иначе			
		ТекущиеДанные = ВхДанные; 		
	КонецЕсли; 
	
	Если ТекущиеДанные = Неопределено Тогда 	
		Возврат;   	
	КонецЕсли; 
	
	Если бит_БюджетированиеКлиентСервер.ВыполнятьЗаполнениеНормы(Объект.ПараметрНорм, фИменаПараметраНорм, ИмяПоля, фИспользоватьНормы) Тогда
		Если Объект.Сценарий.ИспользоватьКурсыСценария Тогда
			СтрКурса    = бит_Бюджетирование.ПолучитьКурсПоСценарию(Объект.Сценарий, Объект.ВалютаДокумента, ТекущиеДанные.Период);
			СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, СтрКурса.Курс, СтрКурса.Кратность);
		Иначе
			СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		КонецЕсли; 
		бит_Бюджетирование.ЗаполнитьНормуВСтроке(ТекущиеДанные, Объект.ПараметрНорм, Объект.Сценарий, СтрКурсаДок, фИменаПараметраНорм, Объект.ЕдиницаИзмеренияСумм);
	КонецЕсли; 

КонецПроцедуры
// Изменение кода. Конец. 14.02.2018}}

// Функция определяет изменится ли валюта при изменении сценария.
// 
// Возвращаемое значение:
//  флИзменится - Булево.
// 
&НаСервере
Функция ИзменитсяВалюта()

	флИзменится = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Сценарий)
		 И Объект.Сценарий.Валюта <> Объект.ВалютаДокумента
		 И Объект.БДДС.Количество() > 0 Тогда
	
		флИзменится = Истина;
	КонецЕсли; 
	Возврат флИзменится;
	
КонецФункции

// Выполняет пересчеты табличных частей при изменении валюты. 
// 
// Параметры:
//  КурсыДок - Структура
// 
&НаСервере
Процедура ПересчитатьТабличныеЧастиПоВалюте(КурсыДок)
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	ПоляПересчета.Добавить("Норма");		
	
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.БДДС, Объект.Сценарий, КурсыДок, ПоляПересчета);
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	ПоляПересчета.Добавить("Норма");			
	
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.ЗависимыеОбороты, Объект.Сценарий, КурсыДок, ПоляПересчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабЧасть(ВыбранноеЗначение, ОчищатьДанные)
	
	Модифицированность = Истина;
	
	Если ОчищатьДанные Тогда
		Объект.БДДС.Очистить();
		Объект.ЗависимыеОбороты.Очистить();
	КонецЕсли; 
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОборотовПоБюджетам);
	флИспользоватьЗначенияПоУмолчанию = ВыбранноеЗначение.ИспользоватьЗначенияПоУмолчанию;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ТаблицаЗначений") Тогда
		
		флЕстьНорма = ?(ЗначениеЗаполнено(Объект.ПараметрНорм), Истина, Ложь);
		Если флЕстьНорма Тогда
			ИменаПараметраНорм = ПланыВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ПодготовитьСтруктурыСвязи(Объект.ПараметрНорм);
			СтрКурсаДок = Новый Структура("Валюта, Курс, Кратность", Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);		
		КонецЕсли; 
		
		ТаблицаДокумента = Объект.БДДС.Выгрузить();
		ОчищатьЗависимые = РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов);
		Если СтрСравнить(ВыбранноеЗначение.Режим, "Заменить") = 0 Тогда
								
			Шаблон = "Период, СтатьяОборотов";
			Отбор  = Новый Структура(Шаблон); 
			ТаблицаДокумента.Индексы.Добавить(Шаблон);
			
			Группировки = ДанныеЗаполнения.Скопировать(Новый Структура("Выполнять", Истина), "ПериодДляЗаполнения, СтатьяОборотов");
			Группировки.Колонки.ПериодДляЗаполнения.Имя = "Период";
			Группировки.Индексы.Добавить(Шаблон);
			Группировки.Свернуть(Шаблон);
			
			Для каждого СтрокаТаблицы Из Группировки Цикл
				
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
				НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если ОчищатьЗависимые Тогда
						ПодчиненныеСтроки = Объект.ЗависимыеОбороты.НайтиСтроки(Новый Структура("Ид_Родитель", НайденнаяСтрока.Ид));
						Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
							Объект.ЗависимыеОбороты.Удалить(Объект.ЗависимыеОбороты.Индекс(ПодчиненнаяСтрока));
						КонецЦикла; 
					КонецЕсли;
					ТаблицаДокумента.Удалить(НайденнаяСтрока);
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли; 
		
		Для Каждого СтрокаТаблицы Из ДанныеЗаполнения Цикл
			
			НоваяСтрока = ТаблицаДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			УстановитьИД_БДДС_Сервер(НоваяСтрока); 
			НоваяСтрока.Период     = СтрокаТаблицы.ПериодДляЗаполнения;
			НоваяСтрока.Количество = СтрокаТаблицы.КоличествоДляЗаполнения;
			НоваяСтрока.Сумма      = СтрокаТаблицы.СуммаСценарийВВалютеДокумента;
			
			Если флИспользоватьЗначенияПоУмолчанию Тогда
				
				// Заполнение измерений по-умолчанию.
				Для Каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
					Если КиЗ.Ключ = "Сценарий" Тогда
						Продолжить;
					КонецЕсли; 
					ТекОписание = КиЗ.Значение;
					Если НЕ ТекОписание.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать") 
						И ЗначениеЗаполнено(Объект[ТекОписание.Имя]) Тогда
						
						НоваяСтрока[ТекОписание.Имя] = Объект[ТекОписание.Имя];
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			
			Если флЕстьНорма 
				И НоваяСтрока.СтатьяОборотов.Учет_Сумма 
				И НоваяСтрока.СтатьяОборотов.Учет_Количество 
				И Не ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
				
				// По норме вычисляем только если не заполнена сумма, т.к. в противном случае можно скопированную сумму изменить.
				бит_Бюджетирование.ЗаполнитьНормуВСтроке(НоваяСтрока, Объект.ПараметрНорм, Объект.Сценарий, СтрКурсаДок, ИменаПараметраНорм, Объект.ЕдиницаИзмеренияСумм);
			КонецЕсли; 
		КонецЦикла;
		
		Объект.БДДС.Загрузить(ТаблицаДокумента);
	КонецЕсли; 
	
	ВосстановитьДерево(Истина, Истина);
	
	ТекстСообщения =  НСтр("ru = 'Заполнение завершено.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры

//  Процедура перезаполняет табличную часть "БДДС" после групповой замены аналитик.
// 
&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	Если НЕ ЭтоАдресВременногоХранилища(ХранилищеДанные) Тогда
		Возврат;
	КонецЕсли; 
	
	Модифицированность = Истина;
	ДанныеЗаполнения   = ПолучитьИзВременногоХранилища(ХранилищеДанные);
	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		ТекущиеДанные = Объект.БДДС[Строка.ИД];
		ТекущиеДанные[Строка.Реквизит] = Строка.Значение;
		Если Строка.Реквизит = "СтатьяОборотов" Тогда
			ИзменениеСтатьиОборотовВТабличнойЧасти(ТекущиеДанные,"БДДС", "БДДС_Редактирование");
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораБюджета(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.Режим = "Заполнить" 
		И Объект.БДДС.Количество() > 0 Тогда 
		
		// В режиме заполнения существующие данные следует очистить.
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		бит_РаботаСДиалогамиКлиент.ЗапросПодтвержденияОчисткиДанных(ЭтотОбъект, ДопПараметры);
	Иначе
		ЗаполнитьТабЧасть(ВыбранноеЗначение, Ложь);
	КонецЕсли; // Режим заполнения.
	
КонецПроцедуры

// Устанавливает значение в ячейке дерева. 
// 
// Параметры:
//  Обл - ОбластьЯчеекТабличногоДокумента.
//  ЗнКоличество - Число
//  ЗнСумма - Число;
// 
&НаКлиенте
Процедура УстановитьЗначениеЯчейки(Обл, ЗнКоличество, ЗнСумма)

	Если Лев(Обл.Имя,1) = "С" Тогда
	
		Обл.Значение = ЗнСумма;
		
		// Изменение кода. Начало. 13.02.2018{{
		МассивЯчеек = Неопределено;
		Результат = ВычислитьЗависимыеФормулы(АдресХранилищаДанных,Обл.Имя,Обл.Значение,МассивЯчеек);
		
		Для Каждого СтруктураИзменений Из Результат.МассивИзменений Цикл
			ТабДокДанные.Области[СтруктураИзменений.Имя].Значение = СтруктураИзменений.Значение;
		КонецЦикла;
		Для Каждого ОблИзмененная  Из Результат.ИзмененныеОбласти Цикл
			ИзменениеСодержимогоОбласти(ТабДокДанные.Области[ОблИзмененная]);
		КонецЦикла; 
		// Изменение кода. Конец. 13.02.2018}}
		
		Если фКэшЗначений.НастройкиФормы.УчетКоличество Тогда
			Имя = СтрЗаменить(Обл.Имя,"С","К");
			ОблСвяз = ТабДокДанные.Область(Имя);
			Если ОблСвяз <> Неопределено Тогда
				ОблСвяз.Значение = ЗнКоличество;
				// Изменение кода. Начало. 13.02.2018{{
				МассивЯчеек = Неопределено;
				Результат = ВычислитьЗависимыеФормулы(АдресХранилищаДанных,ОблСвяз.Имя,ОблСвяз.Значение,МассивЯчеек);
				Для Каждого СтруктураИзменений Из Результат.МассивИзменений Цикл
					ТабДокДанные.Области[СтруктураИзменений.Имя].Значение = СтруктураИзменений.Значение;
				КонецЦикла;
				Для Каждого ОблИзмененная  Из Результат.ИзмененныеОбласти Цикл
					ИзменениеСодержимогоОбласти(ТабДокДанные.Области[ОблИзмененная]);
				КонецЦикла; 
				// Изменение кода. Конец. 13.02.2018}}
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Лев(Обл.Имя,1) = "К" Тогда
		
		Обл.Значение = ЗнКоличество;
		
		// Изменение кода. Начало. 13.02.2018{{
		МассивЯчеек = Неопределено;
		Результат = ВычислитьЗависимыеФормулы(АдресХранилищаДанных,Обл.Имя,Обл.Значение,МассивЯчеек);
		
		Для Каждого СтруктураИзменений Из Результат.МассивИзменений Цикл
			ТабДокДанные.Области[СтруктураИзменений.Имя].Значение = СтруктураИзменений.Значение;
		КонецЦикла;
		Для Каждого ОблИзмененная  Из Результат.ИзмененныеОбласти Цикл
			ИзменениеСодержимогоОбласти(ТабДокДанные.Области[ОблИзмененная]);
		КонецЦикла; 
		// Изменение кода. Конец. 13.02.2018}}
		
		Если фКэшЗначений.НастройкиФормы.УчетСумма Тогда
			Имя = СтрЗаменить(Обл.Имя,"К","С");
			ОблСвяз = ТабДокДанные.Область(Имя);
			Если ОблСвяз <> Неопределено Тогда
				ОблСвяз.Значение = ЗнСумма;
				// Изменение кода. Начало. 13.02.2018{{
				МассивЯчеек = Неопределено;
				Результат = ВычислитьЗависимыеФормулы(АдресХранилищаДанных,ОблСвяз.Имя,ОблСвяз.Значение,МассивЯчеек);
				Для Каждого СтруктураИзменений Из Результат.МассивИзменений Цикл
					ТабДокДанные.Области[СтруктураИзменений.Имя].Значение = СтруктураИзменений.Значение;
				КонецЦикла;
				Для Каждого ОблИзмененная  Из Результат.ИзмененныеОбласти Цикл
					ИзменениеСодержимогоОбласти(ТабДокДанные.Области[ОблИзмененная]);
				КонецЦикла; 
				// Изменение кода. Конец. 13.02.2018}}
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет копирование данных из буфера. 
// 
// Параметры:
//  Буфер      - Массив.
//  ПараметрыВставки - Структура
// 
&НаКлиенте
Процедура ВыполнитьКопированиеДанных(Буфер, ПараметрыВставки)
	
	КоличествоСкопированных = Буфер.Количество();
	Приемники = Новый Массив;
	
	// Определение ячеек приемников.
	Если КоличествоСкопированных = 0 Тогда
		// Ничего делать не нужно
	ИначеЕсли КоличествоСкопированных = 1 Тогда
		// Если скопирована одна ячейка, то в случае выделения области ее нужно вставить во вся ячейки области.
		
		ДельтаГ = ПараметрыВставки.Право - ПараметрыВставки.Лево + 1;
		ДельтаВ = ПараметрыВставки.Низ   - ПараметрыВставки.Верх + 1;
		
		ЛевоНач = ПараметрыВставки.Лево;
		ВерхНач = ПараметрыВставки.Верх;
		Для нг = 1 По ДельтаГ Цикл
			Лево   = ЛевоНач + нг-1;
			Для нв = 1 По ДельтаВ Цикл
				Верх = ВерхНач + нв-1;
				Обл  = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
				// Если выделенная ячейка является ячейкой вида Значение - запомним координаты.
				ОбластьР = Обл.Расшифровка;
				Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР, "РасшифровкаЯчейкиФормыВвода") 
					И ОбластьР.Вид = "Значение" Тогда
					
					Приемники.Добавить(Обл);
				КонецЕсли;	// ИмяКласса подходит.
			КонецЦикла; 
		КонецЦикла; 
		
	Иначе	
		// Если копируется более одной ячейки - 
		// выполняем копирование области начиная с левого верхнего угла выделенной области.
		Обл = ТабДокДанные.Область(ПараметрыВставки.Верх, ПараметрыВставки.Лево, ПараметрыВставки.Верх, ПараметрыВставки.Лево);
		ОбластьР = Обл.Расшифровка;
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьР, "РасшифровкаЯчейкиФормыВвода") 
			И ОбластьР.Вид = "Значение" Тогда
			
			Приемники.Добавить(Обл);
		КонецЕсли;	// ИмяКласса подходит.
	КонецЕсли; 
	
	// Подготовка данных для копирования.
	ДанныеКопирования = Новый Массив;
	
	Для Каждого ПараметрыКопирования Из Буфер Цикл
		
		// Выполним копирование данных.
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Период", ПараметрыКопирования.Период);
		Для Каждого КиЗ Из ПараметрыКопирования.Измерения Цикл
			СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
		КонецЦикла; // МПараметрыПеретаскивания.Измерения.
		
		// Источник копирования.
		МассивИсточник = Объект.БДДС.НайтиСтроки(СтрОтбор);
		ДанныеКопирования.Добавить(Новый Структура("СдвигГор, СдвигВерт, МассивДанных"
								, ПараметрыКопирования.СдвигГор
								, ПараметрыКопирования.СдвигВерт
								, МассивИсточник));
	КонецЦикла;  // По параметрам копирования.
	
	// Выполнение копирования.
	Для Каждого ОбластьПриемник Из Приемники  Цикл
		
		Если ЭтоЗащищеннаяОбласть(ОбластьПриемник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОбластьПриемник) Тогда
			
			ЛевоНач = ОбластьПриемник.Лево;
			ВерхНач = ОбластьПриемник.Верх;
			
			Для Каждого ПараметрыКопирования Из ДанныеКопирования Цикл
				
				Лево = ЛевоНач+ПараметрыКопирования.СдвигГор;
				Верх = ВерхНач+ПараметрыКопирования.СдвигВерт;
				
				Обл = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
				Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) 
					И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
					И Обл.Расшифровка.Вид = "Значение" 
					И НЕ ЗначениеЗаполнено(Обл.Значение) Тогда
					
					ОбластьР = Обл.Расшифровка;
					
					// Источник копирования.
					МассивИсточник = ПараметрыКопирования.МассивДанных;
					
					ИтСумма = 0;
					ИтКоличество = 0;
					Для Каждого СтрокаИсточник Из МассивИсточник Цикл
						
						НоваяСтрока = Объект.БДДС.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
						НоваяСтрока.ИД = ТекИдБДДС;
						ТекИдБДДС = ТекИдБДДС+1;
						НоваяСтрока.Период = ОбластьР.Период;
						Для Каждого КиЗ Из ОбластьР.Измерения Цикл
							НоваяСтрока[КиЗ.Ключ] = КиЗ.Значение;
						КонецЦикла; 
						
						ИтСумма = ИтСумма+НоваяСтрока.Сумма;
						ИтКоличество = ИтКоличество+НоваяСтрока.Количество;
						
						Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
							ЗаполнитьЗависимыеОборотыПоСтроке(НоваяСтрока.ПолучитьИдентификатор());
						КонецЕсли; 
						
						УстановитьЗначениеЯчейки(Обл, ИтКоличество, ИтСумма);
					КонецЦикла; // МассивИсточник. 
				КонецЕсли; 
			КонецЦикла; // По данным копирования.
		КонецЕсли;  // Область приемник подходит.
	КонецЦикла; // Приемники.
	
КонецПроцедуры

// Процедура получает вид проформы и эмулирует метаданные проформы. 
//
// Параметры:
//  ИмяПроформы - Строка.
//
&НаСервереБезКонтекста
Функция ДанныеВидаПроформы(ИмяПроформы)

	РезСтр = Документы.бит_Проформы.ДанныеВидаПроформы(ИмяПроформы);
	
	Возврат РезСтр;

КонецФункции

// Процедура распознает данные, загруженные из Эксель и записывает в текущий документ.
// 
// Параметры:
//  КомплектДанных - Структура.
// 
&НаСервере
Процедура ОбработатьЗагруженныеДанные(Знач КомплектДанных, Режим)
	
	СпискиИсточники  = КомплектДанных.СпискиИсточники;
	ПсевдоМетаданные = КомплектДанных.ПсевдоМетаданные;
	МодельДокумента  = КомплектДанных.МодельДокумента;
	Отказ 			 = Ложь;
	
	Если МодельДокумента.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для загрузки. Возможно выбран файл, не соответсвующий данному виду формы.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , ,Отказ); 
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Документы.бит_Проформы.РаспознатьДанные(МодельДокумента, ПсевдоМетаданные, СпискиИсточники);
	
	ИмяТаблицыДанных = Документы.бит_Проформы.ИмяТаблицыДляЗагрузкиДанныхБюджета(ПсевдоМетаданные);
	
	// Проверка состава обязательных колонок таблицы.	
	МетаТаб = КомплектДанных.ПсевдоМетаданные.ТабличныеЧасти[ИмяТаблицыДанных];
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("Период");
	ОбязательныеПоля.Добавить("СтатьяОборотов");
	ОбязательныеПоля.Добавить("ЦФО");
	ОбязательныеПоля.Добавить("Сумма");
	
	ИменаРеквизитовТЧ = Новый Массив;
	Для каждого ОписаниеРеквизита Из МетаТаб.Реквизиты Цикл
		Если ТипЗнч(ОписаниеРеквизита) = Тип("Структура") И ОписаниеРеквизита.Свойство("Имя") Тогда
			ИменаРеквизитовТЧ.Добавить(ОписаниеРеквизита.Имя);
		Иначе
			ИменаРеквизитовТЧ.Добавить(ОписаниеРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	ОшибкиВПоляхФайла = Новый Массив(); 
	Для Каждого ИмяПоля Из ОбязательныеПоля Цикл
		Если ИменаРеквизитовТЧ.Найти(ИмяПоля) = Неопределено Тогда
			ОшибкиВПоляхФайла.Добавить(ИмяПоля);
		КонецЕсли; 
	КонецЦикла; 

	Если ОшибкиВПоляхФайла.Количество() <> 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В шаблоне проформы отсутствуют обязательные поля: %1'"),
			СтрСоединить(ОшибкиВПоляхФайла, ", "));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , ,Отказ); 
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	Если Режим = "Загрузить" Тогда
		Объект.БДДС.Очистить();
		Объект.ЗависимыеОбороты.Очистить();
	КонецЕсли; 
	
	ТаблицаДанныхБюджета = МодельДокумента[ИмяТаблицыДанных].ТаблицаДанных;
	
	// проверим существование колонок.
	КолонкиПроверены = Новый Структура;
	
	МетаДок = Объект.Ссылка.Метаданные();
	Для Каждого Колонка Из ТаблицаДанныхБюджета.Колонки Цикл
		Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(Колонка.Имя, МетаДок, "БДДС") Тогда
			 КолонкиПроверены.Вставить(Колонка.Имя, Истина);
		КонецЕсли; 
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхБюджета  Цикл
		
		НоваяСтрока = Объект.БДДС.Добавить();
		УстановитьИД_БДДС_Сервер(НоваяСтрока);
		Для Каждого КиЗ Из КолонкиПроверены Цикл
			ИмяКолонки = КиЗ.Ключ;
			НоваяСтрока[ИмяКолонки] = СтрокаТаблицы[ИмяКолонки];
		КонецЦикла; 
		
		// Заполнение измерений по-умолчанию.
		Для Каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
			Если КиЗ.Ключ = "Сценарий" Тогда
				Продолжить;
			КонецЕсли; 
			
			ТекОписание = КиЗ.Значение;
			Если НЕ ТекОписание.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать") 
				И ЗначениеЗаполнено(Объект[ТекОписание.Имя]) 
				И НЕ ЗначениеЗаполнено(НоваяСтрока[ТекОписание.Имя]) Тогда
				
				НоваяСтрока[ТекОписание.Имя] = Объект[ТекОписание.Имя];
			КонецЕсли; 
		КонецЦикла; // НастройкиЗаполненияИзмерений.
	    ИзменениеСтатьиОборотовВТабличнойЧасти(НоваяСтрока,"БДДС", "БДДС_Редактирование");
	КонецЦикла; 
	
	ВосстановитьДерево(Истина, Истина);
		
КонецПроцедуры

&НаСервере
Процедура ВидимостьСтрокБюджета()
	
	Элементы.ФормаКомандаСтрокиБюджетаВидимость.Пометка = НЕ фСкрытьСтрокиБюджета;
	Элементы.ГруппаСтраницаСтрокиБюджета.Видимость = НЕ фСкрытьСтрокиБюджета;
	
КонецПроцедуры

&НаСервере
Процедура КомандаСтрокиБюджетаВидимостьНаСервере()
	
	фСкрытьСтрокиБюджета = НЕ фСкрытьСтрокиБюджета;
	
	Если НЕ фСкрытьСтрокиБюджета Тогда
		МассивСтатей = ИзвлечьСтатьиИзДерева(ТабДокДанные);
		
		ИменаТаблиц = Новый Массив;  
		ИменаТаблиц.Добавить("БДДС");
		ОФормитьТаблицу("БДДС", ИменаТаблиц, МассивСтатей);
		
		ИменаТаблиц = Новый Массив;  
		ИменаТаблиц.Добавить("ЗависимыеОбороты");
		ОФормитьТаблицу("ЗависимыеОбороты", ИменаТаблиц, МассивСтатей);																		
	КонецЕсли; 
	ВидимостьСтрокБюджета();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьПолноэкранныйРежим()
	
	Элементы.ФормаКомандаПолныйЭкран.Пометка = фПолныйЭкран;	
	
	Элементы.ГруппаВерх.Видимость = НЕ фПолныйЭкран;
	Элементы.Ответственный.Видимость = НЕ фПолныйЭкран;
	
	КомандаПолныйЭкран =  ЭтотОбъект.Команды.Найти("КомандаПолныйЭкран");
	
	Если фПолныйЭкран Тогда
		// 1c-izhtc ChuckNorris 19.03.2016 (
		//Элементы.ФормаКомандаПолныйЭкран.Картинка = БиблиотекаКартинок.бит_ПолныйЭкранСвернуть;
		// 1c-izhtc ChuckNorris 19.03.2016 )
		Если НЕ КомандаПолныйЭкран = Неопределено Тогда
			 КомандаПолныйЭкран.Подсказка =  НСтр("ru = 'Обычный режим'");
			 КомандаПолныйЭкран.Заголовок =  НСтр("ru = 'Свернуть'");
		КонецЕсли; 
	Иначе
		// 1c-izhtc ChuckNorris 19.03.2016 (
		//Элементы.ФормаКомандаПолныйЭкран.Картинка = БиблиотекаКартинок.бит_ПолныйЭкран;
		// 1c-izhtc ChuckNorris 19.03.2016 )
		Если НЕ КомандаПолныйЭкран = Неопределено Тогда
			 КомандаПолныйЭкран.Подсказка =  НСтр("ru = 'Развернуть рабочую область'");
			 КомандаПолныйЭкран.Заголовок =  НСтр("ru = 'Развернуть'");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределение(МассивИдСтрок, НастройкиРаспределения)
	
	Для Каждого ИдСтроки Из МассивИдСтрок Цикл
		
		СтрокаИсточник = Объект.БДДС.НайтиПоИдентификатору(ИдСтроки);	
		Если СтрокаИсточник <> Неопределено Тогда
			// Распределение по профилю.
			МассивСтрок = бит_Бюджетирование.РаспределитьПоПрофилюАналитики(НастройкиРаспределения, Объект.БДДС, СтрокаИсточник);
			Для Каждого НоваяСтрока Из МассивСтрок Цикл
				УстановитьИД_БДДС_Сервер(НоваяСтрока);
				Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
					ОкончаниеРедактированияБДДС(НоваяСтрока.ПолучитьИдентификатор());
				КонецЕсли; 
			КонецЦикла; // по массиву строк.
			
			Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
				// Удаление зависимых оборотов, связанных со СтрокойИсточник.
				СтрОтбор = Новый Структура;
				СтрОтбор.Вставить("ИД_Родитель", СтрокаИсточник.ИД);
				НайденныеСтроки = Объект.ЗависимыеОбороты.НайтиСтроки(СтрОтбор);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Объект.ЗависимыеОбороты.Удалить(НайденнаяСтрока);
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; // по ИД строк.
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРаспределениеПоПериодам(Расшифровка, НастройкиРаспределения)
	
	// Строки-Источники удалим, когда проверим диапазон дат новых данных.
	НастройкиРаспределения.УдалятьИсходныеДанные = Ложь;
	
	ИзмененныеПериоды = Новый Массив;
	ЗапрещенныеПериоды = Новый Массив;
	
	ДатаОкончания = Объект.ДатаОкончанияПланирования;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияПланирования) Тогда
		 ДатаОкончания = бит_Бюджетирование.ПолучитьПериодПоСдвигу(Объект.ДатаНачалаПланирования, Объект.Сценарий.ПродолжительностьИнтервала, Объект.Сценарий.бит_Периодичность);
	КонецЕсли; 
	
	СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(Расшифровка);
	ИсходныеСтроки = Объект.БДДС.НайтиСтроки(СтрОтбор);
	
	Для Каждого СтрокаИсточник Из ИсходныеСтроки Цикл
		
		ИзмененныеПериоды.Добавить(СтрокаИсточник.Период);
		
		// Распределение по профилю.
		МассивСтрок = бит_Бюджетирование.РаспределитьПоПрофилюАналитики(НастройкиРаспределения, Объект.БДДС, СтрокаИсточник);
		
		РеквизитыНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НастройкаФормы, "РежимОтображенияВыходныхДней");
		// ++ Изменение периодов с учетом выходных.
		Если РеквизитыНастройки = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.НеОтображать Тогда

			Область = Элементы.ТабДокДанные.ТекущаяОбласть;
			Периоды = Новый Массив();
			Периоды.Добавить(Расшифровка.Период);
			
			ВГраница = НастройкиРаспределения.БазаРаспределения.Количество() - 1;
			Индекс = 1;
			Пока Индекс <= ВГраница Цикл
				Если Область.Лево + Индекс <= ТабДокДанные.ШиринаТаблицы Тогда
					НоваяОбласть = ТабДокДанные.Область(Область.Верх, Область.Лево + Индекс, Область.Верх, Область.Лево + Индекс);
					Если ТипЗнч(НоваяОбласть.Расшифровка) = Тип("Структура") Тогда 
						Если НоваяОбласть.Расшифровка.Свойство("Вид") И НоваяОбласть.Расшифровка.Вид = "Значение" Тогда
							Периоды.Добавить(НоваяОбласть.Расшифровка.Период);
						Иначе
							// Передвинем правую границу области периодов.
							ВГраница = ВГраница + 1;
						КонецЕсли; 
					Иначе
						// Передвинем правую границу области периодов.
						ВГраница = ВГраница + 1;
					КонецЕсли; 
				Иначе	
					// Достигли правой границы документа.
					Периоды.Добавить('2036-12-31');
				КонецЕсли; 
				Индекс = Индекс + 1; 
			КонецЦикла; 
			
			Индекс = 0;
			Для каждого Элемент Из МассивСтрок Цикл
				Элемент.Период = Периоды[Индекс];		
				Индекс = Индекс + 1;
			КонецЦикла; 
		КонецЕсли; 
		// -- Изменение периодов с учетом выходных. 
		
		КолСтрок = МассивСтрок.Количество();
		Для Сч = 1 По КолСтрок Цикл
			ЭлЙ = КолСтрок-Сч;
			ТекСтрока = МассивСтрок[ЭлЙ];
			Если НЕ ( ТекСтрока.Период >= Объект.ДатаНачалаПланирования 
				       И ТекСтрока.Период < ДатаОкончания ) Тогда
			
				ЗапрещенныеПериоды.Добавить(ТекСтрока.Период);
			Иначе
			    УстановитьИД_БДДС_Сервер(ТекСтрока);
				ИзмененныеПериоды.Добавить(ТекСтрока.Период);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;  // по массиву строк-источников.
	
	ИзмененныеПериоды = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(ИзмененныеПериоды);
	
	ЗапрещенныеПериоды = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(ЗапрещенныеПериоды);
	Если ЗапрещенныеПериоды.Количество() > 0 Тогда
		
		 // Распределение не может быть выполнено, т.к. данные "вылетели" за границы периода планирования.
		 
		 // Выводим сообщение.
		 СтрПериоды = "";
		 Для Каждого ТекПериод Из ЗапрещенныеПериоды Цикл
		 	СтрПериоды = СтрПериоды+?(ПустаяСтрока(СтрПериоды),"",",")+Формат(ТекПериод,"ДФ=dd.MM.yyyy");
		 КонецЦикла; 
		
		 ТекстСообщения = НСтр("ru = 'Периоды планирования %1 за рамками данной формы. Распределение не выполнено!'");
		 ТекстСообщения = СтрШаблон(ТекстСообщения, СтрПериоды);
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		 
		 // Обновлять в дереве ничего не нужно. 
		 ИзмененныеПериоды = Новый Массив;
		 
		 // Удаляем строки, получившиеся в результате распределения.
		 Для Каждого СтрокаРезультат Из МассивСтрок Цикл
			 Объект.БДДС.Удалить(СтрокаРезультат);
		 КонецЦикла; 
		 
	Иначе	 
		
		// Распределение выполнено.
		флРучнойВводЗависимых = РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов);
		
		// Удаляем исходные данные.
		Для Каждого СтрокаИсточник Из ИсходныеСтроки Цикл
			Объект.БДДС.Удалить(СтрокаИсточник);
			Если флРучнойВводЗависимых Тогда
				// Удаление зависимых оборотов, связанных со СтрокойИсточник.
				СтрОтбор = Новый Структура;
				СтрОтбор.Вставить("ИД_Родитель", СтрокаИсточник.ИД);
				НайденныеСтроки = Объект.ЗависимыеОбороты.НайтиСтроки(СтрОтбор);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Объект.ЗависимыеОбороты.Удалить(НайденнаяСтрока);
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла; // Исходные строки.
		
		// Формируем зависимые обороты при необходимости.
		Если флРучнойВводЗависимых Тогда
			Для Каждого СтрокаРезультат Из МассивСтрок Цикл
				ОкончаниеРедактированияБДДС(СтрокаРезультат.ПолучитьИдентификатор());
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ИзмененныеПериоды;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьФорматЧисел(ЕдиницаИзмеренияСумм)

	Если ЕдиницаИзмеренияСумм = ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Тысячи") Тогда
		ТекФормат = "ЧДЦ=2; ЧС=3"; 
	ИначеЕсли ЕдиницаИзмеренияСумм = ПредопределенноеЗначение("Перечисление.бит_ЕдиницыИзмеренияСумм.Миллионы") Тогда	
		ТекФормат = "ЧДЦ=2; ЧС=6";
	Иначе	
		ТекФормат = "";
	КонецЕсли; 

	Возврат ТекФормат;
	
КонецФункции

// Процедура устанавливает формат в зависимости от единицы измерения. 
//
&НаКлиенте
Процедура УстановитьФорматЧиселКлиент()
	
	ТекФормат = ОпределитьФорматЧисел(Объект.ЕдиницаИзмеренияСумм);
	
	Элементы.ЗависимыеОборотыСумма.Формат = ТекФормат;
	Элементы.ЗависимыеОборотыНорма.Формат = ТекФормат;
	Элементы.ЗависимыеОбороты_РедактированиеСумма.Формат = ТекФормат;
	Элементы.ЗависимыеОбороты_РедактированиеНорма.Формат = ТекФормат;

КонецПроцедуры	


// Процедура устанавливает формат в зависимости от единицы измерения. 
//
&НаСервере
Процедура УстановитьФорматЧисел()
	
	ТекФормат = ОпределитьФорматЧисел(Объект.ЕдиницаИзмеренияСумм);
	
	Элементы.ЗависимыеОборотыСумма.Формат = ТекФормат;
	Элементы.ЗависимыеОборотыНорма.Формат = ТекФормат;
	Элементы.ЗависимыеОбороты_РедактированиеСумма.Формат = ТекФормат;
	Элементы.ЗависимыеОбороты_РедактированиеНорма.Формат = ТекФормат;

КонецПроцедуры	

// Оповещение на вопрос о подтверждение очистки.
//
// Параметры:
//  Результат    - КодВозвратаДиалога.
//  ДопПараметры - Структура.
//
&НаКлиенте
Процедура ОтветНаПотверждениеОчистки(РезультатОтвет, ДопПараметры) Экспорт
	
	ОчищатьДанные = РезультатОтвет = КодВозвратаДиалога.Да;
    
    Если ОчищатьДанные Тогда
        ЗаполнитьТабЧасть(ДопПараметры.ВыбранноеЗначение, ОчищатьДанные);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначениеТЧ(Таблица, Поле)
	
	ТекущаяСтрока = Таблица.ТекущиеДанные;
	ВыбранноеЗначение = ТекущаяСтрока[СтрЗаменить(Поле.Имя,Таблица.Имя,"")];	
	ПоказатьЗначение(,ВыбранноеЗначение);	
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЗащищеннаяОбласть(ОбластьМакета)
	
	Если ОбластьМакета.Защита = Ложь Тогда
		ОбластьЗащищена = Ложь;
	Иначе
		ОбластьЗащищена = Истина;
	КонецЕсли;
	
	Возврат ОбластьЗащищена;
	
КонецФункции

#КонецОбласти  

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры

&НаСервере 
Функция ГруппыСтатейОборотов()
	
	ГруппыСтатейОборотов = Новый ТаблицаЗначений();	
	ГруппыСтатейОборотов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов"));
	
	Если ТабДокДанные.ВысотаТаблицы <> 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиОборотов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.бит_СтатьиОборотов КАК СтатьиОборотов
		|ГДЕ
		|	СтатьиОборотов.ЭтоГруппа";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ГруппыСтатейОборотов.Добавить(), Выборка);
		КонецЦикла; 
		
		Если ГруппыСтатейОборотов.Количество() > 1000 Тогда
			ГруппыСтатейОборотов.Индексы.Добавить("Ссылка");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ГруппыСтатейОборотов;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция определяет, используются ли обе ячейки в табличном документе.
// 
// Возвращаемое значение:
//  флИспользуются - Булево.
// 
&НаКлиенте
Функция ИспользуютсяДвеЯчейки()
	
	флИспользуются = фКэшЗначений.НастройкиФормы.УчетСумма И фКэшЗначений.НастройкиФормы.УчетКоличество;	
	Возврат флИспользуются;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросОбОчисткеДанных(Оповещение) 
	
	Если Объект.БДДС.Количество() > 0 Тогда
		ТекстВопроса =  НСтр("ru = 'Данные будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выводит сообщение о несовпадении периодичности сценария и фиксированного макета.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеНесовпадениеПериодичности()
	
	ТекстСообщения =  НСтр("ru = 'Периодичность сценария должна совпадать с периодичностью фиксированного макета!'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры

// Определяет, что активна ячейка для ввода значения.
// 
// Возвращаемое значение:
//  флЭтоРедактируемаяЯчейка - Булево.
// 
&НаКлиенте
Функция АктивнаРедактируемаяЯчейка()
	
	флЭтоРедактируемаяЯчейка = Ложь;
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			  И ОблМакета.Расшифровка.Вид = "Значение" Тогда
			
			флЭтоРедактируемаяЯчейка = Истина;
		КонецЕсли;	// ИмяКласса подходит.
	КонецЕсли; // ОблМакета подходит.
	Возврат флЭтоРедактируемаяЯчейка;
	
КонецФункции

// Обновляет значение в ячейке дерева данных по данным, установленным в табличной части. 
// 
// Параметры:
//  Обл - ТабличныйДокумент
//  Расшифровка - Структура
// 
&НаКлиенте
Процедура ОбновитьЗначениеЯчейкиДерева(Обл, Расшифровка)
	
	// Копируем отбор из отбора строк.
	СтрОтбор = Новый Структура;
	
	Для Каждого КиЗ Из Расшифровка.Измерения Цикл
		СтрОтбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
	КонецЦикла; 
	СтрОтбор.Вставить("Период", Расшифровка.Период);
	
	// Вычисляем итог для данного отбора.
	МассивСтрок = Объект.БДДС.НайтиСтроки(СтрОтбор);
	
	Ит = 0;
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Ит = Ит+СтрокаТаблицы[Расшифровка.ИмяРесурса];
	КонецЦикла; 
	
	// Устанавливаем в дерево.
	Обл.Значение = Ит;
	
	// Изменение кода. Начало. 09.02.2018{{
	УстановитьЗначениеТаблицеДанных(АдресХранилищаДанных,Обл.Имя,Обл.Значение);
	// Изменение кода. Конец. 09.02.2018}}
	
	// Изменение кода. Начало. 13.02.2018{{
	Если Объект.ВычислятьФормулыПриВводе Тогда
		МассивЯчеек = Неопределено;
		Результат = ВычислитьЗависимыеФормулы(АдресХранилищаДанных,Обл.Имя,Обл.Значение,МассивЯчеек);
		
		Для Каждого СтруктураИзменений Из Результат.МассивИзменений Цикл
			ТабДокДанные.Области[СтруктураИзменений.Имя].Значение = СтруктураИзменений.Значение;
		КонецЦикла;
		Для Каждого ОблИзмененная  Из Результат.ИзмененныеОбласти Цикл
			ИзменениеСодержимогоОбласти(ТабДокДанные.Области[ОблИзмененная]);
		КонецЦикла; 
	КонецЕсли; 
	// Изменение кода. Конец. 13.02.2018}}
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСтраницейОжиданияБДДС(ПоказатьДекорацию)
	
	Если ПоказатьДекорацию Тогда
		Элементы.СтраницыРедактированияДанных.ТекущаяСтраница = Элементы.СтраницаОжиданияДанных;
	Иначе
		Элементы.СтраницыРедактированияДанных.ТекущаяСтраница = Элементы.СтраницаРедактированияДанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСтраницейОжиданияЗависимыеОбороты(ПоказатьДекорацию)
	
	Если ПоказатьДекорацию Тогда
		Элементы.СтраницыРедактированияЗависимые.ТекущаяСтраница = Элементы.СтраницаОжиданияЗависимые;
	Иначе	
		Элементы.СтраницыРедактированияЗависимые.ТекущаяСтраница = Элементы.СтраницаРедактированияЗависимые;
	КонецЕсли; 
	
КонецПроцедуры

// Функция проверяет возможность заполнения дерева данные. 
// Заполнение возможно, если заполнены НастройкаФормы и все измерения, обязательные к заполнению.
// 
// Параметры:
//  ВыводитьСообщения  - Булево.
// 
// Возвращаемое значение:
//   ЗаполнениеВозможно   - Булево.
// 
&НаКлиенте
Функция ЗаполнениеДереваВозможно(ВыводитьСообщения=Ложь)

	ЗаполнениеВозможно = Истина;
	
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		ТекстСообщения =  НСтр("ru = 'Не заполнена настройка формы ввода.'");	
		ЗаполнениеВозможно = Ложь;	
	КонецЕсли; 
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаПланирования) Тогда
	//	ТекстСообщения = ТекстСообщения+?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+ НСтр("ru = 'Не указано ""Начало планирования"".'");	
	//	ЗаполнениеВозможно = Ложь;	
	//КонецЕсли; 
	//
	//Если ЗначениеЗаполнено(Объект.ДатаОкончанияПланирования) И Объект.ДатаОкончанияПланирования < Объект.ДатаНачалаПланирования Тогда
	//	ТекстСообщения = ТекстСообщения+?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+ НСтр("ru = 'Неверно указан интервал планирования. Дата окончания предшествует дате начала!'");	
	//	ЗаполнениеВозможно = Ложь;	
	//КонецЕсли; 
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	ОбязательныеИзмерения = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию")];
	
	Если ОбязательныеИзмерения <> Неопределено Тогда
		Для Каждого Измерение Из ОбязательныеИзмерения Цикл
			// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
			//Если НЕ ЗначениеЗаполнено(Объект[Измерение]) Тогда
			Если НЕ ЗначениеЗаполнено(Объект[Измерение])
				И НЕ ( (Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный ИЛИ Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный ИЛИ Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный ) И Измерение = "Сценарий"  )
				Тогда
			// - БИТ AMerkulov 2013-12-10
				ТекстДоб =  НСтр("ru = 'Не заполнено значение по умолчанию ""%1""!'");
				ТекстДоб = СтрШаблон(ТекстДоб, Измерение);
				ТекстСообщения = ТекстСообщения+?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+ТекстДоб;	
				ЗаполнениеВозможно = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ИзмеренияРазворачивать = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать")];
	Если ИзмеренияРазворачивать.Найти("СтатьяОборотов") = Неопределено 
		 И ЗначениеЗаполнено(Объект.СтатьяОборотов) Тогда
	
		 // Настройки статьи должны соответствовать настройкам разворотов.
		 НастройкаСтатьи = фКэшЗначений.НастройкиСтатей[Объект.СтатьяОборотов];
		 Если НЕ НастройкаСтатьи = Неопределено Тогда
		 	  Для Каждого Имя Из ИзмеренияРазворачивать Цикл
			  	  Если НЕ НастройкаСтатьи["Учет_"+Имя] Тогда
					  ТекстДоб =  НСтр("ru = 'Настройка аналитик статьи оборотов по умолчанию ""%1"" не соответствует настройкам разворачиваемым измерениям!'");
					  ТекстДоб = СтрШаблон(ТекстДоб, Объект.СтатьяОборотов);
					  ТекстСообщения = ТекстСообщения+?(ПустаяСтрока(ТекстСообщения),"",Символы.ПС)+ТекстДоб;	
					  ЗаполнениеВозможно = Ложь; 
					  Прервать;
				  КонецЕсли; 					  				  
			  КонецЦикла; // ИзмеренияРазворачивать.
		 КонецЕсли; 
	КонецЕсли; 
	
	Если НЕ ЗаполнениеВозможно Тогда
		ТекстСообщения = ТекстСообщения+Символы.ПС+ НСтр("ru = 'Заполнение невозможно!'");
		Если ВыводитьСообщения Тогда
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ЗаполнениеВозможно;
	
КонецФункции

// Определяет, является ли данная аналитика обязательной.
// 
// Параметры:
//  Имя - Строка
// 
// Возвращаемое значение:
//  флОбязательная - Булево.
// 
&НаКлиенте
Функция ЭтоОбязательнаяАналитика(Имя)
	
	ИзмеренияОбязательные = фКэшЗначений.НастройкиФормы.СпособыЗаполнения[ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию")];
	флОбязательная = ?(ИзмеренияОбязательные.Найти(Имя) = Неопределено, Ложь, Истина);
	Возврат флОбязательная;
	
КонецФункции

// Выводит вопрос о необходимости проведения замены аналитик по-умолчанию.
// 
// Параметры:
//  Имя - Строка
//  Синоним - Строка
// 
// Возвращаемое значение:
//  РезДействие - Строка.
// 
&НаКлиенте
Функция ЗадатьВопросОЗаменеЗначенияПоУмолчанию(Имя, Синоним)

	РезДействие = "";
	
	Если Объект.БДДС.Количество() > 0 Тогда
		Если ЭтоОбязательнаяАналитика(Имя) Тогда
			ДополнительныеДанные = Новый Структура("Имя", Имя);
			Оповещение = Новый ОписаниеОповещения("ВопросЗаменаЗначенияПоУмолчаниюЗавершение", ЭтотОбъект, ДополнительныеДанные);
			ТекстВопроса =  НСтр("ru = 'Изменено значение аналитики по-умолчанию ""%1"". Произвести замену в пределах документа?'");
			ТекстВопроса = СтрШаблон(ТекстВопроса, Синоним);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		КонецЕсли; 
	КонецЕсли; 
	Возврат РезДействие;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеСодержимогоОбласти(Обл, ВычислятьФормулы = Истина)
	
	ОбластьР = Обл.Расшифровка;
	Если ОбластьР.Вид = "Значение" Тогда
		// Изменение кода. Начало. 31.10.2017{{ BF-1537
		Если Обл.Значение = 0 Тогда
			
			УдалятьСтроки = Истина;
			Если ИспользуютсяДвеЯчейки() Тогда
				
				ИмяПарн = бит_БюджетированиеКлиент.ИмяВторойЯчейки(Обл.Имя);
				ОблПарн = ТабДокДанные.Области.Найти(ИмяПарн);
				Если НЕ ОблПарн.Значение = 0
					ИЛИ НЕ Обл.Значение = 0 Тогда
					УдалятьСтроки = Ложь;
				КонецЕсли; 
			Иначе
				Если НЕ Обл.Значение = 0 Тогда
					УдалятьСтроки = Ложь;
				КонецЕсли;	
			КонецЕсли;	
			
			Если УдалятьСтроки Тогда
				СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(ОбластьР);
				МассивСтрок = Объект.БДДС.НайтиСтроки(СтрОтбор);
				// Удаляем строки по данной комбинации измерений.
				Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
					Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
						СтрОтборЗав = Новый Структура;
						СтрОтборЗав.Вставить("ИД_Родитель", СтрокаТаблицы.ИД);
						МассивЗависимые = Объект.ЗависимыеОбороты.НайтиСтроки(СтрОтборЗав);
						Для Каждого СтрокаЗависимые Из МассивЗависимые Цикл
							Объект.ЗависимыеОбороты.Удалить(СтрокаЗависимые);
						КонецЦикла; // МассивСтрокЗависимые.
					КонецЕсли; 
					Объект.БДДС.Удалить(СтрокаТаблицы);
				КонецЦикла; // МассивСтрок. 
			КонецЕсли;
		// Изменение кода. Конец. 31.10.2017}}
		Иначе	
			СтрОтбор = бит_БюджетированиеКлиентСервер.СформироватьОтборСтрок(ОбластьР);
			МассивСтрок = Объект.БДДС.НайтиСтроки(СтрОтбор);
			ЭтоРасчетная = ?(ОбластьР.Вид = "Значение" и ЗначениеЗаполнено(ОбластьР.Формула), Истина, Ложь);			
			
			Если МассивСтрок.Количество() = 0 Тогда
				// Создаем новую строку.
				СоздатьНовуюСтрокуБюджета_Клиент(ОбластьР, Обл.Значение, ЭтоРасчетная);
			ИначеЕсли МассивСтрок.Количество() = 1 Тогда	
				// Изменяем значение строки.
				ТекСтрока = МассивСтрок[0];
				ТекСтрока[ОбластьР.ИмяРесурса] = Обл.Значение;
				Если ЭтоРасчетная И НЕ ТекСтрока.Расчетная Тогда
					ТекСтрока.Расчетная = Истина;
				КонецЕсли;	
				Если ОбластьР.ИмяРесурса = "Количество" Тогда
					бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(ТекСтрока, фИспользоватьНормы);
				КонецЕсли; 
				бит_БюджетированиеКлиентСервер.ПроверитьПоляВСтроке(ТекСтрока, фКэшЗначений.НастройкиСтатей);
				Если РазрешенРучнойВводЗависимыхОборотов(Объект.РежимЗависимыхОборотов) Тогда
					ЗаполнитьЗависимыеОборотыПоСтроке(ТекСтрока.ПолучитьИдентификатор());
				КонецЕсли; 
				
			Иначе
				// Выполняем распределение согласно текущим весам.
				ИтПред = 0;
				Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
					ИтПред = ИтПред + бит_ОбщегоНазначенияКлиентСервер.МодульЧисла(СтрокаТаблицы[ОбластьР.ИмяРесурса]);
				КонецЦикла; 
				ЗначениеРаспределения = Обл.Значение;
				Ит = 0;
				Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
					СтрокаТаблицы[ОбластьР.ИмяРесурса] = ЗначениеРаспределения*?(ИтПред <>0, СтрокаТаблицы[ОбластьР.ИмяРесурса]/ИтПред, 0);
					Ит = Ит + СтрокаТаблицы[ОбластьР.ИмяРесурса];
					// Изменение кода. Начало. 14.02.2018{{
					Если ОбластьР.ИмяРесурса = "Количество" Тогда
						бит_БюджетированиеКлиентСервер.РассчитатьПоНорме(СтрокаТаблицы, фИспользоватьНормы);
					КонецЕсли; 
					// Изменение кода. Конец. 14.02.2018}}
				КонецЦикла; 
				Обл.Значение = Ит;
			КонецЕсли; 
		КонецЕсли;
		
		Модифицированность = Истина;
		
		// Изменение кода. Начало. 09.02.2018{{
		Если ВычислятьФормулы Тогда
			Если Объект.ВычислятьФормулыПриВводе Тогда
				МассивЯчеек = Неопределено;
				Результат 	= ВычислитьЗависимыеФормулы(АдресХранилищаДанных,Обл.Имя,Обл.Значение,МассивЯчеек);				
				Для Каждого СтруктураИзменений Из Результат.МассивИзменений Цикл
					ТабДокДанные.Области[СтруктураИзменений.Имя].Значение = СтруктураИзменений.Значение;
				КонецЦикла; 
				
				Для Каждого ОблИзмененная  Из Результат.ИзмененныеОбласти Цикл
					ИзменениеСодержимогоОбласти(ТабДокДанные.Области[ОблИзмененная], Ложь);
				КонецЦикла;
			КонецЕсли; 
		Иначе
			УстановитьЗначениеТаблицеДанных(АдресХранилищаДанных,Обл.Имя,Обл.Значение);
		КонецЕсли; 
		// Изменение кода. Конец. 09.02.2018}}
	КонецЕсли; 
		
КонецПроцедуры

// Изменение кода. Начало. 09.02.2018{{
&НаСервереБезКонтекста
Процедура УстановитьЗначениеТаблицеДанных(АдресХранилищаДанных,ИмяОбласти,Значение)

	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилищаДанных);
	//СтрокаТаблицы = ТаблицаДанных.Найти(ИмяОбласти,"Имя,ИмяАргумента");
	//Если СтрокаТаблицы<>Неопределено Тогда
	СтрОтбор = Новый Структура("Имя,ИмяАргумента",ИмяОбласти,ИмяОбласти);
	МассивСтрок = ТаблицаДанных.НайтиСтроки(СтрОтбор);
	Если МассивСтрок.Количество()>0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
		СтрокаТаблицы.Значение = Значение;
		ПоместитьВоВременноеХранилище(ТаблицаДанных,АдресХранилищаДанных);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьЗависимыеФормулы(АдресХранилищаДанных,ИмяОбласти,Значение,МассивЯчеек)

	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилищаДанных);
	
	СтрОтбор = Новый Структура("Имя,ИмяАргумента",ИмяОбласти,ИмяОбласти);
	МассивСтрок = ТаблицаДанных.НайтиСтроки(СтрОтбор);
	Если МассивСтрок.Количество()>0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
		СтрокаТаблицы.Значение = Значение;
	КонецЕсли; 
	ТаблицаДанных.ЗаполнитьЗначения(0	,"ЗначениеВычисленияФормулы");
	ТаблицаДанных.ЗаполнитьЗначения(Ложь,"ФормулаВычислена");
	Результат = Документы.бит_ФормаВводаБюджета.ВычислитьЗависимыеФормулы(ТаблицаДанных, ИмяОбласти,МассивЯчеек);
	ПоместитьВоВременноеХранилище(ТаблицаДанных,АдресХранилищаДанных);
	Возврат Результат;
	
КонецФункции
// Изменение кода. Конец. 09.02.2018}}

// Процедура обновляет парную ячейку (Количество для Сумма, Сумму для Количества) в дереве.
// 
&НаКлиенте
Процедура ОбновитьПарнуюЯчейки(Обл)
	
	// Возможно следует обновить значение парной ячейки.
	Если ИспользуютсяДвеЯчейки() Тогда
		
		ИмяПарн = бит_БюджетированиеКлиент.ИмяВторойЯчейки(Обл.Имя);
		ОблПарн = ТабДокДанные.Области.Найти(ИмяПарн);
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблПарн) 
			И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблПарн.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
			
			ОбновитьЗначениеЯчейкиДерева(ОблПарн, ОблПарн.Расшифровка);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура открывает отбработку получения данных в различных режимах заполнения. 
// 
&НаКлиенте
Процедура ОткрытиеОбработкиПолучения(ДополнительныеПараметры)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаДок", Объект.Дата);
	ПараметрыФормы.Вставить("ДокументЗаполнения", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимЗаполнения", ДополнительныеПараметры.РежимЗаполнения);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ПараметрыЗаполнения.Вставить("КурсДокумента", Объект.КурсДокумента);
	ПараметрыЗаполнения.Вставить("КратностьДокумента", Объект.КратностьДокумента);
	ПараметрыЗаполнения.Вставить("Сценарий", Объект.Сценарий);
	ПараметрыЗаполнения.Вставить("ЕдиницаИзмеренияСумм", Объект.ЕдиницаИзмеренияСумм);
	
	ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОткрытьФорму("Обработка.бит_ПолучениеДанныхБюджета.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры	

// Процедура открывает отбработку получения данных в различных режимах заполнения. 
// 
&НаКлиенте
Процедура ОткрытьОбработкуПолучения(РежимЗаполнения)
	
	ДополнительныеПараметры = Новый Структура("РежимЗаполнения", РежимЗаполнения);	
	
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОткрытьОбработкуПолученияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Выполнить запись?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе	
		// Безусловное открытие обработки.
		ОткрытиеОбработкиПолучения(ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура обработчик оповещения вопроса о необходимости записи документа 
// при открытии обработки заполнения. 
// 
&НаКлиенте
Процедура ВопросОткрытьОбработкуПолученияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		флОК = Записать();
		Если флОК Тогда
			ОткрытиеОбработкиПолучения(ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура отключает отбор в табличном поле ЗависимыеОбороты.
// 
&НаКлиенте
Процедура ОтключитьОтборЗависимые()

	Элементы.ЗависимыеОбороты.ОтборСтрок = Неопределено;

КонецПроцедуры

// Процедура устанавливает отбор в табличном поле ЗависимыеОбороты.
// 
&НаКлиенте
Процедура УстановитьОтборЗависимые(ИдСтроки)
	
	Если фУстанавливатьОтборЗависимых Тогда
		СтрокаРодитель = Объект.БДДС.НайтиПоИдентификатору(ИдСтроки);
		Если НЕ СтрокаРодитель = Неопределено  Тогда
			Элементы.ЗависимыеОбороты.ОтборСтрок = Новый ФиксированнаяСтруктура("ИД_Родитель",СтрокаРодитель.ИД);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ЗависимыеОбороты

// Функция определяет разрешен ли ручной ввод зависимых оборотов.
// 
// Возвращаемое значение:
//  ФлРазрешен   - Булево.
// 
&НаКлиентеНаСервереБезКонтекста
Функция РазрешенРучнойВводЗависимыхОборотов(Режим)
	
	ФлРазрешен = ?(Режим = ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.Ручной"),Истина,Ложь);
	Возврат ФлРазрешен;
	
КонецФункции

&НаСервере
Функция РазрешенВводЗависимыхОборотов(ЗаполнятьПриАвтоматическом = Истина)

	ФлРазрешен = (ЗаполнятьПриАвтоматическом 
                    И Объект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический) 
		         ИЛИ Объект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Ручной;
	
	Возврат ФлРазрешен;
	
КонецФункции

// Выполняет очистку зависимых оборотов. 
// 
&НаСервере
Процедура ОчиститьЗависимыеОбороты()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОчиститьЗависимыеОбороты();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

// Процедура удаляет строки зависимых оборотов, соответствующие указанной строке данных.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧастиБДДС.
// 
&НаСервере
Процедура ОчиститьЗависимыеОборотыПоСтроке(ИдСтроки)
	
    ТекущаяСтрока = Объект.БДДС.НайтиПоИдентификатору(ИдСтроки);	
	
	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ИД_Родитель",ТекущаяСтрока.ИД);
		МассивСтрок = Объект.ЗависимыеОбороты.НайтиСтроки(СтруктураОтбор);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			Объект.ЗависимыеОбороты.Удалить(СтрокаТаблицы);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

// Выполняет заполнение зависимых оборотов. 
// 
// Параметры:
//  ЗаполнятьПриАвтоматическом - Булево. (По умолчанию = Истина).
//
&НаСервере
Процедура ЗаполнитьЗависимыеОбороты(ЗаполнятьПриАвтоматическом = Истина)
	
	Если РазрешенВводЗависимыхОборотов(ЗаполнятьПриАвтоматическом) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьЗависимыеОбороты();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли; 
	
КонецПроцедуры

// Процедура заполняет зависимые обороты по строке данных.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.БДДС
//  Очищать        - Булево.
// 
&НаСервере
Процедура ЗаполнитьЗависимыеОборотыПоСтроке(ИдСтроки,Очищать=Истина)
	
	ТекущаяСтрока = Объект.БДДС.НайтиПоИдентификатору(ИдСтроки);
	Если ТекущаяСтрока <> Неопределено Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.ЗаполнитьЗависимыеОборотыПоСтроке(ТекущаяСтрока, Очищать);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура Оптимизация()
	Для Каждого стр Из Объект.БДДС Цикл
		стр.Служебный = стр.СтатьяОборотов.УникальныйИдентификатор();
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти

#Область РаботаСExcel

#Область ВыгрузкаЗагрузкаНапрямуюИзФормы

// Осуществляет выгрузку шаблона формы ввода в Excel. 
// 
&НаКлиенте
Процедура ВыгрузитьШаблонЭксель()
    
    бит_ОбменДаннымиЭксельКлиент.ФВБ_ВыгрузитьШаблонЭксель(ТабДокДанные
                                            , Объект.Ссылка
                                            , фДеревоВрем
                                            , фКэшЗначений.НастройкиФормы.КоличествоРазворачивать);
	
КонецПроцедуры

// Выполняет загрузку данных по шаблону Excel.
// 
&НаКлиенте
Процедура ЗагрузитьДанныеПоШаблону()

    ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    ДиалогВыбора.МножественныйВыбор = Ложь;
    ДиалогВыбора.Фильтр = "Все файлы Excel (*.xls, *.xlsx)|*.xls; *.xlsx";         
    
    ОпОповещения = Новый ОписаниеОповещения("ВыбратьФайлЗагрузкиЗавершение", ЭтотОбъект);
    ДиалогВыбора.Показать(ОпОповещения);
    
КонецПроцедуры

// Завершение немодального выбора пути к файлу для загрузки из Excel.
//
&НаКлиенте
Процедура ВыбратьФайлЗагрузкиЗавершение(МассивПутейКФайлу, ДополнительныеПараметры) Экспорт
	
	Если МассивПутейКФайлу <> Неопределено Тогда
        ПутьКФайлу = МассивПутейКФайлу[0];
		ДанныеЭксель = бит_ОбменДаннымиЭксельКлиент.ФВБ_ЗагрузитьДанныеПоШаблону(ПутьКФайлу);
        Если ДанныеЭксель <> Неопределено Тогда
            ОчиститьТаблицы();
    		// Преобразование данных. 		
    		УстановитьЗагруженныеДанные(ДанныеЭксель);
    		Модифицированность = Истина;
    	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСExcelЧерезПроформы

// Процедура загружает данные из проформы. 
//
&НаКлиенте
Процедура ЗагрузитьДанныеПроформы(Режим)

	ДополнительныеДанные = Новый Структура("Режим", Режим);
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеПроформыВыборФайлаЗавершение", ЭтотОбъект, ДополнительныеДанные);
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Фильтр = "Все файлы Excel (*.xls, *.xlsx)|*.xls; *.xlsx";
	
	ДиалогВыбора.Показать(Оповещение);


КонецПроцедуры

// Процедура обработчик оповещения "ЗагрузитьДанныеПроформыВыборФайлаЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ЗагрузитьДанныеПроформыВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеДанные) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда

		ПолноеИмя = ВыбранныеФайлы[0];
		
		ТекстСостояние = НСтр("ru = 'Загрузка данных...'");
		Состояние(ТекстСостояние);
		
		// Открытие эксель.
		Отказ = Ложь;		
		Эксель = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		
		ЭксельКнига = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Эксель, ПолноеИмя, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПроформы = "";
		// Чтение данных шапки.
		ЛистШапка = Неопределено;
		Для Каждого Лист Из ЭксельКнига.Sheets Цикл
			// Найдем лист с данными шапки требуемой проформы.
			ПараметрыЛиста = бит_ПроформыКлиентСервер.GetHiddenParams(Лист);
			
			Если ПараметрыЛиста.ВидЛиста = "Шапка"  Тогда
				ИмяПроформы = ПараметрыЛиста.ИмяПроформы;
				ЛистШапка = Лист;
			КонецЕсли; 
		КонецЦикла; 

		Если НЕ ЗначениеЗаполнено(ИмяПроформы) Тогда
			  Отказ = Истина;
			  ТекстСообщения =  НСтр("ru = 'Не удалось определить имя проформы. Возможно данный файл не является шаблоном проформы.'");
			  бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			  Возврат;
		КонецЕсли; 
		
		РезДанныеВидаПроформы = ДанныеВидаПроформы(ИмяПроформы);
		
		КомплектДанных = Новый Структура;
		КомплектДанных.Вставить("ИмяПроформы",		ИмяПроформы);
		КомплектДанных.Вставить("ПсевдоМетаданные",	РезДанныеВидаПроформы.ПсевдоМетаданные);
		КомплектДанных.Вставить("ВидПроформы",		РезДанныеВидаПроформы.ВидПроформы);
		КомплектДанных.Вставить("ИмяТаблицыДанных",	РезДанныеВидаПроформы.ИмяТаблицыДанных);
		
		// Чтение источников выпадающих списков.
		СпискиИсточники     = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ЭксельКнига);
		КомплектДанных.Вставить("СпискиИсточники", СпискиИсточники);
		
		МодельДокумента = Новый Структура;
		
		// Чтение данных шапки.
		ЛистШапка = Неопределено;
		Для Каждого Лист Из ЭксельКнига.Sheets Цикл
			// Найдем лист с данными шапки требуемой проформы.
			ПараметрыЛиста = бит_ПроформыКлиентСервер.GetHiddenParams(Лист);
			Если ПараметрыЛиста.ВидЛиста = "Шапка" И ПараметрыЛиста.ИмяПроформы = ИмяПроформы Тогда
				ЛистШапка = Лист;
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ЛистШапка = Неопределено Тогда
			бит_ПроформыКлиентСервер.ПрочитатьДанныеШапки(ЭксельКнига, ЛистШапка, КомплектДанных.ПсевдоМетаданные, ИмяПроформы, МодельДокумента);
		КонецЕсли; 
		
		// Чтение данных табличных частей.
		бит_ПроформыКлиентСервер.ПрочитатьДанныеТабЧастей(ЭксельКнига, КомплектДанных.ПсевдоМетаданные, МодельДокумента, ИмяПроформы);
		
		КомплектДанных.Вставить("МодельДокумента", МодельДокумента);
		
		бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ЭксельКнига, Ложь);
        бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Эксель);		
		
		ТекстСостояние = НСтр("ru = 'Преобразование данных...'");
		Состояние(ТекстСостояние);

		ОбработатьЗагруженныеДанные(КомплектДанных, ДополнительныеДанные.Режим);
		//{ bit_SVKushnirenko 25.04.2017 #2811
		ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС();
		//} bit SVKushnirenko Bit 25.04.2017 #2811
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзТабличногоДокумента

// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента проверяя записан ли документ. 
//
// Параметры:
//  ИмяТаблицы - Строка.
//
&НаКлиенте
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДок(ИмяТаблицы)
    
    ДопПараметры = Новый Структура("ИмяТаблицы", ИмяТаблицы);
       
    Если Параметры.Ключ.Пустая() Тогда  
        
        ТекстВопроса = НСтр("ru='Данные еще не записаны. 
		|Выполнение действия ""Загрузить через табличный документ"" возможно только после записи данных.
		|Записать?'");				
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗаписатьДокументДляЗагрузкиЧерезТД", ЭтотОбъект, ДопПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
    Иначе
        
        ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДопПараметры);
        
    КонецЕсли;	
		
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДок()

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Результат               - Строка.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте
Процедура ВопросЗаписатьДокументДляЗагрузкиЧерезТД(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
   	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
        
        ЗаписьВыполнена = Записать();        
        Если ЗаписьВыполнена Тогда
            
            // Флаг модифицированности автоматически не снимается.
            ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДополнительныеПараметры);
            
        КонецЕсли;
    
	КонецЕсли;

КонецПроцедуры 

// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента. 
//
// Параметры:
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание(ДополнительныеПараметры)

    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимЗагрузки"		 , "ТабличнаяЧасть");
    ПараметрыФормы.Вставить("ОбъектМетаданных"   , "Документ.бит_ФормаВводаБюджета");
    ПараметрыФормы.Вставить("ОбъектДляЗаполнения", Объект.Ссылка);
    ПараметрыФормы.Вставить("ИмяТабЧасти"        , ДополнительныеПараметры.ИмяТаблицы);
    
    ОткрытьФорму("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента.Форма"
                    , ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  	                   
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание() 

// Процедура восстанавливает загруженные из Excel данные.
//
// Параметры:
//  ОбъектДляЗаполнения - ДанныеФормыСтруктура.
//  ИмяТабЧасти         - Строка.
//  
&НаСервере
Процедура ВосстановитьЗагруженныеИзExcelДанные(ИмяТабЧасти, Знач ОбъектДляЗаполнения = Неопределено)
    
    Если ТипЗнч(ОбъектДляЗаполнения) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
        ОбъектДляЗаполнения_Объект = ОбъектДляЗаполнения.ПолучитьОбъект();
    КонецЕсли;
	ЗначениеВДанныеФормы(ОбъектДляЗаполнения_Объект, Объект);
    
    Если ИмяТабЧасти = "БДДС" Тогда
        Для каждого СтрТч Из Объект.БДДС Цикл
            Если СтрТч.ИД = 0 Тогда
                СтрТч.ИД  = ТекИдБДДС;
	            ТекИдБДДС = ТекИдБДДС + 1;         
            КонецЕсли;       
        КонецЦикла;
		ВосстановитьДерево(Истина, Истина, Истина);
	КонецЕсли;
	Модифицированность = Истина;
	 
КонецПроцедуры // ВосстановитьЗагруженныеИзExcelДанные()

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ОбновитьКурсСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалюты();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-24 (#3018)
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-17 (#3476)
	//Алгоритм ниже перенесен в обработчик ПриЗаписи ФВБ
	//Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") И
	//	 ТекущийОбъект.Проведен	
	//Тогда 
	//	пНаборЗаписей = РегистрыНакопления.бит_КонтрольныеЗначенияБюджетов.СоздатьНаборЗаписей();
	//	пНаборЗаписей.Отбор.Регистратор.Установить(ТекущийОбъект.Ссылка);
	//	пНаборЗаписей.Прочитать();
	//	
	//	Если пНаборЗаписей.Количество() > 0 И
	//		 ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись
	//	Тогда 
	//		бит_БК_Общий.ПопыткаЗакрытияИлиВозвратаСтатусаЗаявокПоДаннымБК(пНаборЗаписей.Выгрузить(),ТекущийОбъект.Ссылка,"ПослеПроведения");				
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-17 (#3476)
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка, Перечисления.бит_ВидыСтатусовОбъектов.Статус);
	Результат.Статус 		  = ?(ЗначениеЗаполнено(Результат.Статус), Результат.Статус, Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-24 (#3018)

	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	//1c-izhtc spawn 28.08.15 (
	//СтруктураПараметров           = Новый Структура("Статус,ДатаИзмененияСтатуса",Статус,ДатаИзмененияСтатуса);
	СтруктураПараметров           = Новый Структура("Статус,ДатаИзмененияСтатуса","",ДатаИзмененияСтатуса);
	//1c-izhtc spawn 28.08.15 )
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыИзмененияТаблицыДокумента()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда",			"бит_ФормаВводаБюджета");
	ПараметрыФормы.Вставить("Объект",			Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти","БДДС");
	ПараметрыФормы.Вставить("ВидимостьАналитик",ВидимостьАналитикБДДСРедактирование());
	ПараметрыФормы.Вставить("ТабличнаяЧасть",	 
		ПоместитьВоВременноеХранилище(Объект.БДДС.Выгрузить(), УникальныйИдентификатор));
		
	Возврат ПараметрыФормы;	
	
КонецФункции

&НаСервере
Функция ВидимостьАналитикПоНастройкеДокумента()
	
	ВидимостьАналитик = Новый Структура; 
	
	Для Каждого КиЗ Из фКэшЗначений.НастройкиФормы.Измерения Цикл
		Если КиЗ.Ключ = "Сценарий" Тогда
			Продолжить;
		КонецЕсли; 		
		
		ТекОписание = КиЗ.Значение;
		Показать = ?(ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию 
		ИЛИ ТекОписание.СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать, Ложь, Истина);
		
		Если Найти(ТекОписание.Имя,"Аналитика_")>0 Тогда
			Если фКэшЗначений.НастройкиИзмерений[ТекОписание.Имя] = Неопределено Тогда
				Показать = Ложь;
			КонецЕсли;	
		КонецЕсли; 				 
		ВидимостьАналитик.Вставить("БДДС_Редактирование" + ТекОписание.Имя, Показать);
	КонецЦикла;

	Возврат ВидимостьАналитик;
	
КонецФункции

&НаСервере
Функция ВидимостьАналитикБДДСРедактирование()

	ВидимостьАналитик = Новый Структура;
	РеквизитыТаблицы = Метаданные.Документы.бит_ФормаВводаБюджета.ТабличныеЧасти.БДДС.Реквизиты;
	Для каждого Реквизит Из РеквизитыТаблицы Цикл
		ИмяЭлемента = "БДДС_Редактирование" + Реквизит.Имя;
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
			ВидимостьАналитик.Вставить(Реквизит.Имя, Элементы[ИмяЭлемента].Видимость);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ВидимостьАналитик;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры
 
#КонецОбласти

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2916)
&НаКлиенте
Процедура ПрикрепленныеФайлы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ТекстВопроса = НСтр("ru='Документ не записан. Записать?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументИОткрытьФормуПрикрепленныхФайловПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		Возврат;
	КонецЕсли;
	
	ОткрытьФормуУправленияПрикрепленнымиФайлами();	

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументИОткрытьФормуПрикрепленныхФайловПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	Если Не Записать(ПараметрыЗаписи) Тогда 
		Возврат;
	КонецЕсли;
	
	
	ОткрытьФормуУправленияПрикрепленнымиФайлами();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУправленияПрикрепленнымиФайлами()
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПоказыватьОбъект", Ложь);
	
	Форма = ПолучитьФорму("Обработка.бит_ПрикреплениеФайлов.Форма.ФормаУправляемая", ПараметрыОткрытия, ЭтаФорма, Объект.Ссылка);
	Форма.Объект.Объект = Объект.Ссылка;
	Форма.Открыть();
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2916)

//bit_SVKushnirenko 16.01.2017 #2671.дпн
// Устанавливает доступность реквизита "Необходимость договора" и по данным итога по ТЧ
&НаКлиенте
Функция УстановитьДоступностьНеобходимостиДоговора()
	
	Если Элементы.БДДСбит_БК_НуженДоговор.Видимость Тогда
		
		Если Объект.БДДС.Итог("бит_БК_СуммаБезНДС") > 100000 И 
			Элементы.БДДСбит_БК_НуженДоговор.Доступность Тогда 
			
			Элементы.БДДСбит_БК_НуженДоговор.Доступность = Ложь;
		Иначе
			
			Элементы.БДДСбит_БК_НуженДоговор.Доступность = Истина; //она должна как-то включаться, но если существуют дополнительные условия доступности этого реквизита, нужно текущее условие корректировать
		КонецЕсли;
	КонецЕсли;
КонецФункции // УстановитьДоступностьНеобходимостиДоговора()

//bit_SVKushnirenko 27.01.2017 #2657
//Прокладка для вызова серверного метода из клиента на форме
// Параметры:
//парСсылка - ссылка на текущий документ
&НаСервереБезКонтекста
Функция ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(парСсылка)
	
	Возврат бит_БК_Общий.ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях(парСсылка);
КонецФункции // ПолучитьМассивЗаявокКоторыеМогутИзменитьСтатусПриДвижениях()

//bit_SVKushnirenko 27.01.2017 #2657
// Возвращает текущее состояние статусов документа по ссылке
// Параметры:
//парСсылка  - ссылка на документ
&НаСервереБезКонтекста
Функция бит_БК_ПолучитьТекущийСтатусЗаявки(парСсылка)
	
	Возврат бит_БК_общий.ПолучитьТекущийСтатусФВБ(парСсылка);
КонецФункции // бит_БК_ПолучитьТекущийСтатусЗаявки()

//{ bit SVKushnirenko Bit 22.03.2017 #2735
&НаКлиенте
Процедура бит_КопированиеТЧ_Фвб(Команда)

	пОповещение = Новый ОписаниеОповещения("ОбработчикЗаполненияТЧ", ЭтотОбъект);

	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.фрмКопированеТабличныхЧастейДокументов", 
	Новый Структура("НомерЗаявкиШапка, ВидОперации", Объект.бит_БК_НомерЗаявки, Объект.ВидОперации),, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно,, пОповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры //} bit SVKushnirenko Bit 22.03.2017 #2735

//{bit_SVKushnirenko 23.03.2017 #2735
//Загружает (добавляет) таблицу БДДС из данных параметра (ТЧ)
// Параметры:
//парСтруктураОтветаОбработкиЗаполнения
&НаСервере
Функция ЗагрузитьТаблицуВДанныеБДДС(парСтруктураОтветаОбработкиЗаполнения)

	пАдресТаблицыСтрок = "";
	Если парСтруктураОтветаОбработкиЗаполнения.Свойство("АдресТаблицыСтрок", пАдресТаблицыСтрок) Тогда  
		
		пТаблицаСтрок = ПолучитьИзВременногоХранилища(пАдресТаблицыСтрок);
		пТЧБДДС = Объект.БДДС;
		
		пТаблицаСтрок.ЗаполнитьЗначения(Неопределено, "Аналитика_1"); //очищаем номера заявок в документе из входящих данных
		Для каждого пСтрокаПодбора Из пТаблицаСтрок Цикл
		
			пСтрокаБДДС = пТЧБДДС.Добавить();
			ЗаполнитьЗначенияСвойств(пСтрокаБДДС, пСтрокаПодбора);
			
			//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-29 (#2854)
			Если НЕ ЗначениеЗаполнено(пСтрокаБДДС.бит_БК_ВалютаДоговора) Тогда
				пСтрокаБДДС.бит_БК_ВалютаДоговора = Объект.бит_БК_ВалютаДокумента;		
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(пСтрокаБДДС.бит_БК_Курс) Тогда
				пСтрокаБДДС.бит_БК_Курс = 1;		
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(пСтрокаБДДС.бит_БК_Кратность) Тогда
				пСтрокаБДДС.бит_БК_Кратность = 1;		
			КонецЕсли;
			//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-29 (#2854)
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-04 (#2873)
			пСтрокаБДДС.СБ_СуммаПредоплаты = (пСтрокаБДДС.бит_БК_СуммаБезНДС*пСтрокаБДДС.бит_БК_СуммаПредоплаты)/100;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-04 (#2873)
			
			пСтрокаБДДС.бит_БК_БлокировкиПолейФинансовогоКонтроллера = 
			//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
			//ПодстрокаЗапретаИзмененияИнициатором(пСтрокаБДДС, "бит_БК_ВалютаДоговора") + 
			////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)
			//ПодстрокаЗапретаИзмененияИнициатором(пСтрокаБДДС, "бит_БК_Курс")		   + 
			//ПодстрокаЗапретаИзмененияИнициатором(пСтрокаБДДС, "бит_БК_Кратность") 	   + 
			////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
			//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
			ПодстрокаЗапретаИзмененияИнициатором(пСтрокаБДДС, "бит_БК_Организация") + 
			ПодстрокаЗапретаИзмененияИнициатором(пСтрокаБДДС, "бит_БК_ФормаОплаты") + 
			ПодстрокаЗапретаИзмененияИнициатором(пСтрокаБДДС, "бит_БК_СуммаПредоплаты") + 
			//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
			//ПодстрокаЗапретаИзмененияИнициатором(пСтрокаБДДС, "ЦФО"); //перезаписываем все ограничения
			"";
			//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		КонецЦикла; 
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-04 (#2873)
		Объект.СБ_СуммаПредоплатыИтого = Объект.БДДС.Итог("СБ_СуммаПредоплаты");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-04 (#2873)
		
	КонецЕсли;
КонецФункции // ЗагрузитьТаблицуВДанныеБДДС() }bit_SVKushnirenko 23.03.2017 #2735

//{bit_SVKushnirenko 05.06.2017 #2735
//Производит обновление данных БК, но позволяет вызвать его из контекста клиента (в остальных случаях, этот процесс всегда использовался в контексте сервера)
&НаСервере
Функция ЗаплонениеОстатковБКВызовИзКлиента()
	
	бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(Объект); //заполняем данные БК после добавления строк
КонецФункции // ЗаплонениеОстатковБКВызовИзКлиента() }bit_SVKushnirenko 05.06.2017 #2735

//{bit_SVKushnirenko 22.03.2017 #2735
//Обраотчик оповещения копирования табличнх частей документа
&НаКлиенте
Функция ОбработчикЗаполненияТЧ(парРезультат, парПараметры) Экспорт

	Если ТипЗнч(парРезультат) = Тип("Структура") Тогда  
		
		Если парРезультат.Свойство("ВидОперации") и парРезультат.ВидОперации = "ОчищатьДобавлять" Тогда  
			
			Объект.БДДС.Очистить();
		КонецЕсли;
		
		ЗагрузитьТаблицуВДанныеБДДС(парРезультат);
		
		//{ bit SVKushnirenko Bit 25.04.2017 #2811
		ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС();
		//} bit SVKushnirenko Bit 25.04.2017 #2811
		
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-29 (#2854)
		Объект.бит_БК_НомерЗаявки = Неопределено;
		//{ bit SVKushnirenko Bit 14.06.2017 #2735
		//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт") Тогда  //заполняем номер заявки в шапке
		//	
		//	Объект.бит_БК_НомерЗаявки = парРезультат.НомерЗаявки;
		//КонецЕсли;
		//} bit SVKushnirenko Bit 14.06.2017 #2735
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-29 (#2854)
		
		СинхронизироватьРеквизиты(); //синхронизируем с реквизитами тонкой формы (в т.ч. "Валюта, Курс")
		
		Если Объект.БДДС.Количество() <>  0 Тогда  //установка текущего курса первой строки
			
			Объект.бит_БК_КурсДокумента = Объект.БДДС[0].бит_БК_Курс;
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-29 (#2854)
		    Объект.бит_БК_КратностьДокумента = Объект.БДДС[0].бит_БК_Кратность;
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-29 (#2854) 			
		КонецЕсли;
		
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-29 (#2854)
		Если Объект.бит_БК_КурсДокумента = 0 Тогда
			Объект.бит_БК_КурсДокумента = 1;	
		КонецЕсли;
		Если Объект.бит_БК_КратностьДокумента = 0 Тогда
			Объект.бит_БК_КратностьДокумента = 1;	
		КонецЕсли;
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-29 (#2854)		
		
		//{ bit SVKushnirenko Bit 05.06.2017 #2735
		ЗаплонениеОстатковБКВызовИзКлиента();
		//} bit SVKushnirenko Bit 05.06.2017 #2735
	КонецЕсли;
КонецФункции // ОбработчикЗаполненияТЧ() }bit_SVKushnirenko 22.03.2017 #2735

&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)
	
	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	//1c-izhtc spawn 28.08.15 (
	//Позиция         = Найти(ИмяКнопки, 	"_");
	//ИмяПодменю      = Лев(ИмяКнопки, 	Позиция - 1);
	//ИмяВидаОперации = Сред(ИмяКнопки, 	Позиция + 1);
	ИмяВидаОперации = ИмяКнопки;
	//1c-izhtc spawn 28.08.15 )
	
	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.БДДС.Количество()>0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДействияФормыДействиеУстановитьОперациюВопросЗавершение", ЭтотОбъект), "Данные будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет);
		Возврат;			
	КонецЕсли;
	//Начало_бит_БК_Магомедов_26.03.2012
	//перед сменом вида операции сохраняем настройки колонок - Видимость
	//СохранитьНастройкиТЧ(); //1c-izhtc spawn
	//Конец_бит_БК_Магомедов_26.03.2012 
	
	ДействияФормыДействиеУстановитьОперациюЗавершение();
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыДействиеУстановитьОперациюВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса; 
	Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	иначе
		ОчиститьТаблицы();
	КонецЕсли;			
	
	ДействияФормыДействиеУстановитьОперациюЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыДействиеУстановитьОперациюЗавершение()
	
	УстановитьЗаголовокФормыДокумента(ЭтаФорма, фКэшЗначений.ПредставлениеОбъекта, Параметры.Ключ.Пустая(), Объект.Проведен);
	
	ОбработатьИзменениеВидаОперацииСервер();
	мТекущаяНастройкаФормы = Объект.НастройкаФормы;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

//+СБ Пискунова 14.03.2017 #2691
&НаСервере
Процедура ОпределитьДоступностьКнопокМаршрутаСогласования()
	ВидОперацииПодходит = ?(Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный или  Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный или  Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный, Истина, ложь);
	КнокаЗапускаПроцессаПоДатеПодходит = бит_БК_Общий.РеквизитыДляМуршрутовВидимы(Объект.Ссылка); 
	Если не Объект.СБ_ПроцессЗапущен и  объект.проведен и  КнокаЗапускаПроцессаПоДатеПодходит и ВидОперацииПодходит Тогда
		Элементы.СБ_ЗапускПроцесса.Видимость = Истина;
		Элементы.СБ_НеОтправлятьУведомленияНаПочту.Видимость = Истина;
		Элементы.СБ_СуммаПредоплатыИтого.Видимость = Истина;
		Элементы.СБ_СуммаПредоплаты.Видимость = Истина;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-31 (#2941)   
		//Элементы.СБ_ЗапускПроцесса.Доступность = Истина;
		//Заменено на:
		Элементы.СБ_ЗапускПроцесса.Доступность = Статус = Справочники.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-31 (#2941)
		Элементы.СБ_НеОтправлятьУведомленияНаПочту.Доступность = Истина;
		Элементы.СБ_СуммаПредоплатыИтого.Доступность = Истина;
		Элементы.СБ_СуммаПредоплаты.Доступность = Истина;  
	КонецЕсли;
	
	Если Не КнокаЗапускаПроцессаПоДатеПодходит  и ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.СБ_ЗапускПроцесса.Видимость = Ложь;
		Элементы.СБ_НеОтправлятьУведомленияНаПочту.Видимость = Ложь;
		Элементы.СБ_СуммаПредоплатыИтого.Видимость = Ложь;
		Элементы.СБ_СуммаПредоплаты.Видимость = Ложь;

		
		Элементы.СБ_ЗапускПроцесса.Доступность = Ложь;
		Элементы.СБ_НеОтправлятьУведомленияНаПочту.Доступность = Ложь;
		Элементы.СБ_СуммаПредоплатыИтого.Доступность = Ложь;
		Элементы.СБ_СуммаПредоплаты.Доступность = Ложь; 
	КонецЕсли; 
	
	Если Не ВидОперацииПодходит Тогда
		Элементы.СБ_ЗапускПроцесса.Видимость = Ложь;
		Элементы.СБ_НеОтправлятьУведомленияНаПочту.Видимость = Ложь;
		Элементы.СБ_СуммаПредоплатыИтого.Видимость = Ложь;
		Элементы.СБ_СуммаПредоплаты.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры
//-СБ Пискунова 14.03.2017 #2691

&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()
	
	//сбросим Настройку и сценарий
	Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();
	НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ПустаяСсылка();
	мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка();
	Статус = мТекущийСтатус;
	
	бит_УстановитьПредопределеннуюНастройкуФормы();
	
	бит_НастроитьЭлементыФормы();
	бит_ЗаполнитьСписокСтатусов();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

//bit_SVKushnirenko 28.12.2016 #2671.1
//Выявляет необходимость синхронизации данных в документе
//Возврат:
//Булево: Истина = нужна синхронизация; Ложь = синхронизация не нужна
// Параметры:
//парПредставлениеНесоответствий - СписокЗначений в котором возвращается описание несоответствий требуемой синхронизации
&НаСервере
Функция ЕстьНеобходимостьСинхронизации(парПредставлениеНесоответствий = Неопределено)
	
	Возврат Документы.бит_ФормаВводаБюджета.ЕстьНеобходимостьСинхронизации(
	Документы.бит_ФормаВводаБюджета.ПолучитьНастройкиСинхронизации(), 
	Объект, 
	парПредставлениеНесоответствий, 
	Ложь);
КонецФункции // ЕстьНеобходимостьСинхронизации()

//bit_SVKushnirenko 28.12.2016 #2671.1
//Выполняет синхронизацию реквизитов документа по настройке в макете "бит_КартаСинхронизацииБДДСвШапку"
Функция СинхронизироватьРеквизиты()
	
	Документы.бит_ФормаВводаБюджета.СинхронизацияПриемникИсточник(, Объект);
КонецФункции // СинхронизироватьРеквизиты()

//bit_SVKushnirenko 28.12.2016 #2671.1
//Обработчик оповещения немодального диалога подтверждения синхронизации
// Параметры:
//парРезультат - результат нажатия кнопки в далоге
//парПараметры - структура параметра оповещения
&НаКлиенте
Функция ПодтверждениеСинхронизации(парРезультат, парПараметры) Экспорт
	
	Если парРезультат = КодВозвратаДиалога.Да Тогда
		
		СинхронизироватьРеквизиты();
		рекСинхронизацияРеквизитовПроверкаПройдена = Истина;
		Записать(); //Инициируем повторную запись
	КонецЕсли;	
КонецФункции // ПодтверждениеСинхронизации()

//bit_SVKushnirenko 23.01.2017 #2671.дпн
// Возвращает значение вид операции = "Контракт" для клиента
&НаСервереБезКонтекста
Функция ПолучитьПеречислениеКонтракт()
	
	Возврат Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт;
КонецФункции // ПолучитьПеречислениеКонтракт()

//{bit_SVKushnirenko 25.04.2017 #2759
//Обработчик вывода сообщения, которое может долго не визуализироваться на форме из-за транзакции записи/проведения
&НаКлиенте
Функция ОбработчикВыводаСообщенияПоОборудованию() Экспорт

	пОповещение = Новый ОписаниеОповещения("ОбработчикПредупреждения", ЭтотОбъект);
	
	ПоказатьВопрос(пОповещение,
	СокрЛП(рекТекстСообщенияПоОборудованию),
	РежимДиалогаВопрос.ОК,
	40, // таймаут в секундах
	КодВозвратаДиалога.ОК, //кнопка по умолчанию
	"Внимание!");
КонецФункции // ОбработчикВыводаСообщенияПоОборудованию() }bit_SVKushnirenko 25.04.2017 #2759

//{bit_SVKushnirenko 21.03.2017 #2759
//Возвращает представление списка статей оборотов у которых в дополнительных свойствах "Обороудование = Да"
// Параметры:
//парТаблицаБДДС - таблица с колонкой "СтатьяОборотов" из данных БДДС документа
&НаСервереБезКонтекста
Функция СписокСтатейОборотовСОборудованиеДа(знач парТаблицаБДДС)

	Возврат Документы.бит_ФормаВводаБюджета.СтрСписокСтатейОборотовСПризнакОборудование(парТаблицаБДДС.Выгрузить().ВыгрузитьКОлонку("СтатьяОборотов"));
КонецФункции // СписокСтатейОборотовСОборудованиеДа() }bit_SVKushnirenko 21.03.2017 #2759 

//{bit_SVKushnirenko 21.03.2017 #2759
&НаКлиенте
Функция ОбработчикПредупреждения(парРезультат, парПараметры) Экспорт
	
КонецФункции // ОбработчикПредупреждения() }bit_SVKushnirenko 21.03.2017 #2759 

&НаСервере
Процедура ОбновитьДанныеПоОстаткуБюджета()
	
	//{ bit_SVKushnirenko 20.12.2016 #2669
	//ИсходныйКод{
	//бит_ФормаВводаБюджетаВызовСервера.ОбновитьДанныеПоОстаткуБюджета(объект);
	//}ИсходныйКод
	
	бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(Объект);
	//} bit_SVKushnirenko 20.12.2016 #2669
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Начало_бит_БК_Магомедов_26.03.2012 
	//сохраняем настройки пользователя - Видимость
	//СохранитьНастройкиТЧ(); //1c-izhtc spawn
	//Конец_бит_БК_Магомедов_26.03.2012 
КонецПроцедуры

//Начало_БИТ_Магомедов.А.А_20.10.2011

//устанавливает предопределенные настройки формы и сценария при открытии, при смене видаоперации или сценария
&НаСервере
Процедура бит_УстановитьПредопределеннуюНастройкуФормы(ОчищатьДанные = Истина)
	
	//{ bit SVKushnirenko Bit 18.01.2017 #2657
	пВидимостьКомандыЗакрытьОстатки = Истина; //по умолчению - видима
	//} bit SVKushnirenko Bit 18.01.2017 #2657
	
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан тогда
		
		//{ bit SVKushnirenko Bit 18.01.2017 #2657
		пВидимостьКомандыЗакрытьОстатки = Ложь; //по финпланирование не требует этой команды
		//} bit SVKushnirenko Bit 18.01.2017 #2657
		
		Если Объект.Сценарий =  Справочники.СценарииПланирования.Бюджет_А тогда
			Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.БюджетА;
		ИначеЕсли  Объект.Сценарий =  Справочники.СценарииПланирования.Бюджет_У тогда
			Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.БюджетУ;
		ИначеЕсли  Объект.Сценарий =  Справочники.СценарииПланирования.Бюджет_Инвест тогда
			Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.БюджетИнвест;
		Иначе 
			Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.БюджетА;
			Объект.Сценарий = Справочники.СценарииПланирования.Бюджет_А
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный тогда
		Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ЗаявкаОперационная;
		Объект.Сценарий = Справочники.СценарииПланирования.Заявка_У;
		// + БИТ AMerkulov 2014-01-24 /  Универсальная заявка
		Объект.Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();	
		// - БИТ AMerkulov  		
		
		
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный тогда
		Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ЗаявкаИнвестиционная;
		Объект.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест;
		// + БИТ AMerkulov 2014-01-24 /  Универсальная заявка
		Объект.Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();	
		// - БИТ AMerkulov  	
		
		
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт тогда
		Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.Контракт;
		Объект.Сценарий = Справочники.СценарииПланирования.Контракт_Инвест;
		//ОК Ванюков К. +// заполнить валюту из настроек пользователя // 2012-03-29
		Объект.бит_БК_ВалютаДокумента = бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнаяВалютаВзаиморасчетов");
		бит_БК_ВалютаДокументаПриИзмененииНаСервере();
		
		//ОК Ванюков К. -
		
		// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный тогда
		Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.ЗаявкаУниверсальная;
		Объект.Сценарий = Справочники.СценарииПланирования.ПустаяСсылка();
		
		// - БИТ AMerkulov 2013-12-10 
		
	Иначе
		Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан;
		Объект.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.БюджетА;
		Объект.Сценарий = Справочники.СценарииПланирования.Бюджет_А;		
	КонецЕсли;
	
	ИзменениеНастройкиФормы(ОчищатьДанные);
	Если ОчищатьДанные Тогда 
		ИзменениеСценарияОчисткаДанных();
	КонецЕсли;
	//Начало_бит_БК_Магомедов_21.02.2012 
	//ВосстановитьДерево();
	//
	Если Объект.Сценарий = Справочники.СценарииПланирования.Бюджет_Инвест Тогда
		Элементы.БДДСПроект.Видимость = Истина;
	Иначе
		Элементы.БДДСПроект.Видимость = Ложь;
	КонецЕсли;
	
	//{ bit SVKushnirenko Bit 18.01.2017 #2657
	Элементы.ФормаЗакрытиеОстатка.Видимость = пВидимостьКомандыЗакрытьОстатки; 
	//} bit SVKushnirenko Bit 18.01.2017 #2657
КонецПроцедуры

//утанавливает видимость доступность и заголовки элементов формы при изменении объекта
&НаСервере
Процедура бит_НастроитьЭлементыФормы()
	УстановитьВидимостьРеквизитов();
	УстановитьДоступностьРеквизитов();
	
	УстановитьВидимостьКолонокТЧ();
	УстановитьЗаголовкиКолонокТЧ();
	//Начало_бит_БК_Магомедов_26.03.2012 
	//восстановить настройки пользователя - Видимость
	//ВосстановитьНастройкиТЧ(); //1c-izhtc spawn
	//Конец_бит_БК_Магомедов_26.03.2012 
	
	//ОК Калинин М.П. 210812 по Заявки Якимовой Л. открыть скрытое поле «Наименование оборудования/логистика» 
	//ТЗ п.5.3.2.3 
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
		//BIT AMerkulov 23102014 ++		
		//Элементы.БДДСбит_БК_НаименованиеОборудования.Видимость = Истина;	
		Элементы.БДДСбит_БК_НаименованиеОборудования.Заголовок = "Наименование оборудования";
	Иначе
		//Элементы.БДДСбит_БК_НаименованиеОборудования.Видимость = Истина;	
		Элементы.БДДСбит_БК_НаименованиеОборудования.Заголовок = "Наименование";		
		//BIT AMerkulov 23102014 --		
	конецесли;
	//ОК Калинин М.П. 210812 
	
	бит_УстановитьДопКнопкиОбработкиТЧ();
	бит_УстановитьКнопкиВводаНаОсновании();
	
	// + БИТ AMerkulov 2014-01-24 /  Универсальная заявка
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
		ИЛИ Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный
		ИЛИ Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный 
		Тогда
		Элементы.БДДССценарий.Видимость = Истина;
	КонецЕсли;
	// - БИТ AMerkulov  
	
	// BIT AMerkulov 23102014 ++
	//Элементы.БДДСКоличество.Видимость =  Истина;
	// BIT AMerkulov 23102014 --
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитов()
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2917)
	Элементы.бит_СуммаПревышающаяБюджет.Видимость = Истина;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2917)
	
	// + БИТ AMerkulov 2013-12-10 /  Универсальная заявка
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда
		Элементы.БДДССценарий.Видимость = Истина;
		Элементы.ПериодПланированияДатаНачала.Видимость = Ложь;
		Элементы.бит_Инициатор.Видимость = Истина;
		Элементы.Надпись_ИнициаторEMail.Видимость = Истина;
		Элементы.Надпись_ИнициаторТелефон.Видимость = Истина;
		Элементы.бит_ПериодНачало.Видимость = Истина;
		Элементы.бит_ПериодКонец.Видимость = Истина;
		Элементы.КомандаРедактироватьПериод.Видимость = Истина;
		Элементы.бит_БК_УсловиеПредоплаты.Видимость = Ложь;
		Элементы.бит_БК_Цель.Видимость = Истина;
		Элементы.бит_БК_ВалютаДокумента.Видимость = Ложь;
		Элементы.бит_БК_КурсДокумента.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.бит_БК_НомерЗаявки.Видимость = Ложь;
		
		Элементы.НадписьСценарий.Видимость = Ложь;
		Элементы.Сценарий.Видимость = Ложь;	
		Элементы.бит_БК_ТехническаяЗаявка.Видимость = Истина;
		Элементы.бит_БК_ОбъединяющаяЗаявка.Видимость = Истина;
		Элементы.ОтправитьИнициатору.Видимость = Истина;
	Иначе
		Элементы.БДДССценарий.Видимость = Ложь;
	КонецЕсли;	
	// - БИТ AMerkulov 
	
	//Видимость реквизитов
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		Элементы.ПериодПланированияДатаНачала.Видимость = Истина;
		Элементы.бит_Инициатор.Видимость = Ложь;
		Элементы.Надпись_ИнициаторEMail.Видимость = Ложь;
		Элементы.Надпись_ИнициаторТелефон.Видимость = Ложь;
		Элементы.бит_ПериодНачало.Видимость = Ложь;
		Элементы.бит_ПериодКонец.Видимость = Ложь;
		Элементы.КомандаРедактироватьПериод.Видимость = Ложь;
		Элементы.бит_БК_УсловиеПредоплаты.Видимость = Ложь;
		Элементы.бит_БК_Цель.Видимость = Ложь;
		Элементы.бит_БК_ВалютаДокумента.Видимость = Ложь;
		Элементы.бит_БК_КурсДокумента.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.бит_БК_НомерЗаявки.Видимость = Ложь;
		Элементы.НадписьСценарий.Видимость = Ложь;
		Элементы.Сценарий.Видимость = Истина;	
		Элементы.бит_БК_ТехническаяЗаявка.Видимость = Ложь;
		Элементы.бит_БК_ОбъединяющаяЗаявка.Видимость = Ложь;
		//	Элементы.бит_БК_СтатусВручную.Видимость = Ложь;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2917)
		Элементы.бит_СуммаПревышающаяБюджет.Видимость = Ложь;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2917)
		
		Элементы.ОтправитьИнициатору.Видимость = Ложь;
	ИначеЕсли  Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда
		Элементы.ПериодПланированияДатаНачала.Видимость = Ложь;
		Элементы.бит_Инициатор.Видимость = Истина;
		Элементы.Надпись_ИнициаторEMail.Видимость = Истина;
		Элементы.Надпись_ИнициаторТелефон.Видимость = Истина;
		Элементы.бит_ПериодНачало.Видимость = Истина;
		Элементы.бит_ПериодКонец.Видимость = Истина;
		Элементы.КомандаРедактироватьПериод.Видимость = Истина;
		Элементы.бит_БК_УсловиеПредоплаты.Видимость = Ложь;
		Элементы.бит_БК_Цель.Видимость = Истина;
		Элементы.бит_БК_ВалютаДокумента.Видимость = Ложь;
		Элементы.бит_БК_КурсДокумента.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.бит_БК_НомерЗаявки.Видимость = Ложь;
		
		Элементы.НадписьСценарий.Видимость = Истина;
		Элементы.Сценарий.Видимость = Ложь;	
		Элементы.бит_БК_ТехническаяЗаявка.Видимость = Истина;
		Элементы.бит_БК_ОбъединяющаяЗаявка.Видимость = Истина;
		//		Элементы.бит_БК_СтатусВручную.Видимость = Истина;
		Элементы.ОтправитьИнициатору.Видимость = Истина;
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
		Элементы.ПериодПланированияДатаНачала.Видимость = Ложь;
		Элементы.бит_Инициатор.Видимость = Истина;
		Элементы.Надпись_ИнициаторEMail.Видимость = Истина;
		Элементы.Надпись_ИнициаторТелефон.Видимость = Истина;
		Элементы.бит_ПериодНачало.Видимость = Истина;
		Элементы.бит_ПериодКонец.Видимость = Истина;
		Элементы.КомандаРедактироватьПериод.Видимость = Истина;
		Элементы.бит_БК_УсловиеПредоплаты.Видимость = Ложь;
		Элементы.бит_БК_Цель.Видимость = Истина;
		Элементы.бит_БК_ВалютаДокумента.Видимость = Ложь;
		Элементы.бит_БК_КурсДокумента.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.бит_БК_НомерЗаявки.Видимость = Ложь;
		
		Элементы.НадписьСценарий.Видимость = Истина;
		Элементы.Сценарий.Видимость = Ложь;	
		Элементы.бит_БК_ТехническаяЗаявка.Видимость = Истина;
		Элементы.бит_БК_ОбъединяющаяЗаявка.Видимость = Истина;
		
		//	Элементы.бит_БК_СтатусВручную.Видимость = Истина;
		Элементы.ОтправитьИнициатору.Видимость = Истина;
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		Элементы.ПериодПланированияДатаНачала.Видимость = Ложь;
		Элементы.бит_Инициатор.Видимость = Истина;
		Элементы.Надпись_ИнициаторEMail.Видимость = Истина;
		Элементы.Надпись_ИнициаторТелефон.Видимость = Истина;
		Элементы.бит_ПериодНачало.Видимость = Истина;
		Элементы.бит_ПериодКонец.Видимость = Истина;
		Элементы.КомандаРедактироватьПериод.Видимость = Истина;
		Элементы.бит_БК_УсловиеПредоплаты.Видимость = Истина;
		Элементы.бит_БК_Цель.Видимость = Истина;
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-07-26 (#2868)
		//Элементы.бит_БК_ВалютаДокумента.Видимость = Истина;
		//Элементы.бит_БК_КурсДокумента.Видимость = Истина;
		Элементы.бит_БК_ВалютаДокумента.Видимость 	= Ложь;
		Элементы.бит_БК_КурсДокумента.Видимость 	= Ложь;
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-07-26 (#2868)
		Элементы.Контрагент.Видимость = Истина;
		Элементы.ДоговорКонтрагента.Видимость = Истина;
		Элементы.бит_БК_НомерЗаявки.Видимость = Истина;
		
		Элементы.НадписьСценарий.Видимость = Истина;
		Элементы.Сценарий.Видимость = Ложь;	
		Элементы.бит_БК_ТехническаяЗаявка.Видимость = Ложь;
		Элементы.бит_БК_ОбъединяющаяЗаявка.Видимость = Ложь;		
		//	Элементы.бит_БК_СтатусВручную.Видимость = Истина;
		Элементы.ОтправитьИнициатору.Видимость = Ложь;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-11-16 (#2917)
		Элементы.бит_СуммаПревышающаяБюджет.Видимость = Ложь;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-11-16 (#2917)
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-27 (#3045)
		Элементы.БДДСАналитика_1.Видимость = Ложь;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-27 (#3045)
		
	КонецЕсли;
	
	// ++ БИТ AMerkulov 2014-10-07 /  
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный
	//	ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный
	//	ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный
	//	ИЛИ (ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан  И Сценарий <> Справочники.СценарииПланирования.Бюджет_А)
	//	
	//	Тогда
	//	Элементы.НадписьКонтрагентбит.Видимость = Истина;
	//	Элементы.битКонтрагент.Видимость = Истина;
	//	
	//Иначе
	//	
	//	Элементы.НадписьКонтрагентбит.Видимость = Ложь;
	//	Элементы.битКонтрагент.Видимость = Ложь;		
	//КонецЕсли;
	// -- БИТ AMerkulov 2014-10-07 /  
	
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитов()
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		Элементы.Статус.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный
		Или Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
		Тогда 
		Элементы.Статус.ТолькоПросмотр = Ложь;
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда
		Элементы.Статус.ТолькоПросмотр = Ложь;
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда
		Элементы.Статус.ТолькоПросмотр = Ложь;
	КонецЕсли;		
	
	//{ bit SVKushnirenko Bit 23.03.2017 #2735
	Элементы.фБДДСбит_КопированиеТЧ_ФВБ.Доступность = НЕ Объект.Проведен; 
	//} bit SVKushnirenko Bit 23.03.2017 #2735
КонецПроцедуры

//работа с колонками ТЧ
&НаСервере
Процедура УстановитьВидимостьКолонокТЧ()
	//Видимость колонок ТЧ
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//Элементы.БДДССтавкаНДС.Видимость = Истина;
		//1c-izhtc spawn )
		Элементы.БДДСбит_БК_Организация.Видимость =  Ложь;
		//Элементы.БДДСКонтрагент.Видимость = Ложь;
		//Элементы.БДДСДоговорКонтрагента.Видимость = Ложь;
		Если Объект.Сценарий = Справочники.СценарииПланирования.Бюджет_Инвест Тогда
			Элементы.БДДСПроект.Видимость = Истина;
		Иначе
			Элементы.БДДСПроект.Видимость = Ложь;
		КонецЕсли;
		//Элементы.БДДСАналитика_1.Видимость = Ложь;
		// BIT AMerkulov 23102014 ++	
		//Элементы.БДДСКоличество.Видимость = Ложь;
		// BIT AMerkulov 23102014 ++
		
		//Элементы.БДДССумма.Видимость = Истина;
		//1c-izhtc spawn (
		// НДС больше не используется в ТЧ БДДС
		//Элементы.БДДСНДС.Видимость = Истина;
		//1c-izhtc spawn )
		//Элементы.БДДСбит_БК_СуммаВРамкахБюджетаБезНДС.Видимость = Ложь;
		//Элементы.БДДСбит_БК_СуммаЗаРамкамиБюджетаБезНДС.Видимость = Ложь;
		//BIT AMerkulov 23102014 ++		
		//Элементы.БДДСбит_БК_НаименованиеОборудования.Видимость = Ложь;
		//BIT AMerkulov 23102014 --		
		
		Элементы.БДДСбит_БК_ПредпологаемыйКонтрагент.Видимость = Ложь;
		Элементы.БДДСбит_БК_ЕдиницаИзмерения.Видимость = Истина;
		Элементы.БДДСбит_БК_ЦенаБезНДС.Видимость = Истина;
		Элементы.БДДСбит_БК_СуммаВВалютеБезНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_ВалютаДоговора.Видимость = Ложь;
		Элементы.БДДСбит_БК_Курс.Видимость = Ложь;
		Элементы.БДДСбит_БК_Кратность.Видимость = Ложь;
		Элементы.БДДСбит_БК_СуммаПредоплаты.Видимость = Ложь;
		Элементы.БДДСбит_БК_НуженДоговор.Видимость = Ложь;
		Элементы.БДДСбит_БК_УсловияОплаты.Видимость = Ложь;
		Элементы.БДДСбит_БК_ФормаОплаты.Видимость = Ложь;
		Элементы.БДДСбит_БК_АдекватностьЦены.Видимость = Ложь;
		Элементы.БДДСбит_БК_ЦенаСНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_СуммаВВалютеСНДС.Видимость = Ложь;
		//Элементы.БДДСбит_БК_СуммаЗаРамкамиБюджетаСНДС.Видимость = Ложь;
		//Элементы.БДДСбит_БК_СуммаВРамкахБюджетаСНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_ОстатокПоБюджету.Видимость = Ложь;
		Элементы.БДДСАналитика_3.Видимость = Ложь;
		Элементы.БДДСАналитика_4.Видимость = Ложь;
		//+Сундукова 31.05.16 №2492
		Элементы.БДДСКомандаОтчетПоОплате.Видимость = ложь;
		//+Сундукова 31.05.16 №2492
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		Элементы.БДДСГруппаОтчеты.Видимость = Ложь;
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		
	ИначеЕсли  Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный ИЛИ	Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда 
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//Элементы.БДДССтавкаНДС.Видимость = Ложь;
		//1c-izhtc spawn )
		Элементы.БДДСбит_БК_Организация.Видимость = Истина; 
		//Элементы.БДДСКонтрагент.Видимость = Ложь;
		//Элементы.БДДСДоговорКонтрагента.Видимость = Ложь;
		Элементы.БДДСПроект.Видимость = Ложь;
		//Элементы.БДДСАналитика_1.Видимость = Ложь;
		// BIT AMerkulov 30072014 ++
		//Элементы.БДДСКоличество.Видимость = Ложь;
		//Элементы.БДДСКоличество.Видимость =  Истина;
		// BIT AMerkulov 30072014 --
		
		//Элементы.БДДССумма.Видимость = Ложь;
		//1c-izhtc spawn (
		// НДС больше не используется в ТЧ БДДС
		//Элементы.БДДСНДС.Видимость = Ложь;
		//1c-izhtc spawn )
		//Элементы.БДДСбит_БК_СуммаВРамкахБюджетаБезНДС.Видимость = Истина;
		//Элементы.БДДСбит_БК_СуммаЗаРамкамиБюджетаБезНДС.Видимость = Истина;
		//BIT AMerkulov 23102014 ++		
		//Элементы.БДДСбит_БК_НаименованиеОборудования.Видимость = Ложь;
		//BIT AMerkulov 23102014 ++		
		
		Элементы.БДДСбит_БК_ПредпологаемыйКонтрагент.Видимость = Истина;
		Элементы.БДДСбит_БК_ЕдиницаИзмерения.Видимость = Ложь;
		Элементы.БДДСбит_БК_ЦенаБезНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_СуммаВВалютеБезНДС.Видимость = Истина;
		Элементы.БДДСбит_БК_ВалютаДоговора.Видимость = Истина;
		Элементы.БДДСбит_БК_Курс.Видимость = Истина;
		Элементы.БДДСбит_БК_Кратность.Видимость = Истина;
		Элементы.БДДСбит_БК_СуммаПредоплаты.Видимость = Истина;
		Элементы.БДДСбит_БК_НуженДоговор.Видимость = Истина;
		Элементы.БДДСбит_БК_УсловияОплаты.Видимость = Ложь;
		Элементы.БДДСбит_БК_ФормаОплаты.Видимость = Истина;
		Элементы.БДДСбит_БК_АдекватностьЦены.Видимость = Истина;
		Элементы.БДДСбит_БК_ЦенаСНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_СуммаВВалютеСНДС.Видимость = Ложь;
		//Элементы.БДДСбит_БК_СуммаЗаРамкамиБюджетаСНДС.Видимость = Ложь;
		//Элементы.БДДСбит_БК_СуммаВРамкахБюджетаСНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_ОстатокПоБюджету.Видимость = Ложь;
		Элементы.БДДСАналитика_3.Видимость = Ложь;
		Элементы.БДДСАналитика_4.Видимость = Ложь;
		//+Сундукова 31.05.16 №2492
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//Элементы.БДДСКомандаОтчетПоОплате.Видимость = Истина;
		Элементы.БДДСГруппаОтчеты.Видимость = Истина;
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//+Сундукова 31.05.16 №2492
		
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//Элементы.БДДССтавкаНДС.Видимость = Ложь; 
		//1c-izhtc spawn )
		Элементы.БДДСбит_БК_Организация.Видимость = Истина; 
		//Элементы.БДДСКонтрагент.Видимость = Ложь;
		//Элементы.БДДСДоговорКонтрагента.Видимость = Ложь;
		Элементы.БДДСПроект.Видимость = Истина;
		//Элементы.БДДСАналитика_1.Видимость = Ложь;
		// BIT AMerkulov 23102014 ++		
		//Элементы.БДДСКоличество.Видимость = Ложь;
		// BIT AMerkulov 23102014 --
		
		//Элементы.БДДССумма.Видимость = Ложь;
		//1c-izhtc spawn (
		// НДС больше не используется в ТЧ БДДС
		//Элементы.БДДСНДС.Видимость = Ложь;
		//1c-izhtc spawn )
		//Элементы.БДДСбит_БК_СуммаВРамкахБюджетаБезНДС.Видимость = Истина;
		//Элементы.БДДСбит_БК_СуммаЗаРамкамиБюджетаБезНДС.Видимость = Истина;
		
		//BIT AMerkulov 23102014 ++				
		//Элементы.БДДСбит_БК_НаименованиеОборудования.Видимость = Ложь;
		//BIT AMerkulov 23102014 --		
		
		Элементы.БДДСбит_БК_ПредпологаемыйКонтрагент.Видимость = Истина;
		Элементы.БДДСбит_БК_ЕдиницаИзмерения.Видимость = Ложь;
		Элементы.БДДСбит_БК_ЦенаБезНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_СуммаВВалютеБезНДС.Видимость = Истина;
		Элементы.БДДСбит_БК_ВалютаДоговора.Видимость = Истина;
		Элементы.БДДСбит_БК_Курс.Видимость = Истина;
		Элементы.БДДСбит_БК_Кратность.Видимость = Истина;
		
		Элементы.БДДСбит_БК_СуммаПредоплаты.Видимость = Истина;
		Элементы.БДДСбит_БК_НуженДоговор.Видимость = Истина;
		Элементы.БДДСбит_БК_УсловияОплаты.Видимость = Ложь;
		Элементы.БДДСбит_БК_ФормаОплаты.Видимость = Истина;
		Элементы.БДДСбит_БК_АдекватностьЦены.Видимость = Истина;
		Элементы.БДДСбит_БК_ЦенаСНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_СуммаВВалютеСНДС.Видимость = Истина;
		//Элементы.БДДСбит_БК_СуммаЗаРамкамиБюджетаСНДС.Видимость = Ложь;
		//Элементы.БДДСбит_БК_СуммаВРамкахБюджетаСНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_ОстатокПоБюджету.Видимость = Ложь;
		Элементы.БДДСАналитика_3.Видимость = Ложь;
		Элементы.БДДСАналитика_4.Видимость = Ложь;
		//+Сундукова 31.05.16 №2492
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//Элементы.БДДСКомандаОтчетПоОплате.Видимость = Истина;
		Элементы.БДДСГруппаОтчеты.Видимость = Истина;
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//+Сундукова 31.05.16 №2492
		
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//Элементы.БДДССтавкаНДС.Видимость = Истина; 
		//1c-izhtc spawn )
		Элементы.БДДСбит_БК_Организация.Видимость = Ложь; 
		//Элементы.БДДСКонтрагент.Видимость = Ложь;
		//Элементы.БДДСДоговорКонтрагента.Видимость = Ложь; 
		Элементы.БДДСПроект.Видимость = Истина;
		//Элементы.БДДСАналитика_1.Видимость = Ложь;
		// BIT AMerkulov 23102014 ++		
		//Элементы.БДДСКоличество.Видимость = Истина;
		// BIT AMerkulov 23102014 ++
		
		//Элементы.БДДССумма.Видимость = Ложь;
		//1c-izhtc spawn (
		// НДС больше не используется в ТЧ БДДС
		//Элементы.БДДСНДС.Видимость = Ложь;
		//1c-izhtc spawn )
		//Элементы.БДДСбит_БК_СуммаВРамкахБюджетаБезНДС.Видимость = Истина;
		//Элементы.БДДСбит_БК_СуммаЗаРамкамиБюджетаБезНДС.Видимость = Истина;
		//BIT AMerkulov 23102014 ++		
		//Элементы.БДДСбит_БК_НаименованиеОборудования.Видимость = Истина;
		//BIT AMerkulov 23102014 --	
		
		Элементы.БДДСбит_БК_ПредпологаемыйКонтрагент.Видимость = Ложь;
		Элементы.БДДСбит_БК_ЕдиницаИзмерения.Видимость = Истина;
		Элементы.БДДСбит_БК_ЦенаБезНДС.Видимость = Истина;
		Элементы.БДДСбит_БК_СуммаВВалютеБезНДС.Видимость = Истина;

		//{ bit_SVKushnirenko 02.06.2017 #2735
		//ИсходныйКод{
		//Элементы.БДДСбит_БК_ВалютаДоговора.Видимость = Ложь;
		//Элементы.БДДСбит_БК_Курс.Видимость = Ложь;
		//Элементы.БДДСбит_БК_Кратность.Видимость = Ложь;
		//}ИсходныйКод
		
		//включаем видимость курсов, т.к. возможно копирование строк с разными курсами и нужна преемственность по отношению к типовому поведению расчета сумм по курсам строки
		Элементы.БДДСбит_БК_ВалютаДоговора.Видимость = Истина;
		Элементы.БДДСбит_БК_Курс.Видимость = Истина;
		Элементы.БДДСбит_БК_Кратность.Видимость = Истина;
		//} bit_SVKushnirenko 02.06.2017 #2735
		
		Элементы.БДДСбит_БК_СуммаПредоплаты.Видимость = Истина;
		Элементы.БДДСбит_БК_НуженДоговор.Видимость = Ложь;
		Элементы.БДДСбит_БК_УсловияОплаты.Видимость = Ложь;
		Элементы.БДДСбит_БК_ФормаОплаты.Видимость = Ложь;
		Элементы.БДДСбит_БК_АдекватностьЦены.Видимость = Ложь;
		Элементы.БДДСбит_БК_ЦенаСНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_СуммаВВалютеСНДС.Видимость = Истина;
		//Элементы.БДДСбит_БК_СуммаЗаРамкамиБюджетаСНДС.Видимость = Ложь;
		//Элементы.БДДСбит_БК_СуммаВРамкахБюджетаСНДС.Видимость = Ложь;
		Элементы.БДДСбит_БК_ОстатокПоБюджету.Видимость = Ложь;
		Элементы.БДДСАналитика_3.Видимость = Ложь;
		Элементы.БДДСАналитика_4.Видимость = Ложь;
		//+Сундукова 31.05.16 №2492
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//Элементы.БДДСКомандаОтчетПоОплате.Видимость = Истина;
		Элементы.БДДСГруппаОтчеты.Видимость = Ложь;
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//+Сундукова 31.05.16 №2492
	КонецЕсли;
	
	//BIT AMerkulov 12092014 ++
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда 
		Элементы.БДДСПроект.Видимость = Истина;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-22 (#2972)
		Элементы.БДДСбит_БК_СуммаВВалютеСНДС.Видимость   = Истина;
		Элементы.БДДСбит_БК_СуммаВВалютеСНДС.Доступность = Истина;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-22 (#2972)
		
	КонецЕсли;
	//BIT AMerkulov 12092014 --	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокТЧ()
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		Элементы.БДДСЦФО.Заголовок = "Функция";
		Элементы.БДДСбит_БК_СуммаБезНДС.Заголовок = "Сумма без НДС";
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный
		ИЛИ Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда 
		Элементы.БДДСЦФО.Заголовок = "Функция";
		Элементы.БДДСбит_БК_СуммаБезНДС.Заголовок = "Сумма";
		Элементы.БДДСбит_БК_СуммаПредоплаты.Заголовок = "% предоплат";
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда 
		Элементы.БДДСЦФО.Заголовок = "ЦФО";
		Элементы.БДДСбит_БК_СуммаПредоплаты.Заголовок = "Сумма предоплат в %";
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		Элементы.БДДСЦФО.Заголовок = "ЦФО";
		Элементы.БДДСбит_БК_СуммаПредоплаты.Заголовок = "Сумма предоплат в %";
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиТЧ()
	КлючНастроек = Объект.Ссылка.Метаданные().ПолноеИмя()+".БДДС_ВСЕ"+"\"+Объект.ВидОперации+"\ВидимостьКолонок";
	НастройкиВидимости = Новый Структура;
	Для Каждого ТекКолонка Из Элементы.БДДС.ПодчиненныеЭлементы Цикл
		НастройкиВидимости.Вставить(ТекКолонка.Имя, ТекКолонка.Видимость);
	КонецЦикла;
	ХранилищеОбщихНастроек.Сохранить(КлючНастроек, , НастройкиВидимости);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиТЧ()
	КлючНастроек = Объект.Ссылка.Метаданные().ПолноеИмя()+".БДДС_ВСЕ"+"\"+Объект.ВидОперации+"\ВидимостьКолонок";	
	НастройкиВидимости = ХранилищеОбщихНастроек.Загрузить(КлючНастроек);
	Если НЕ НастройкиВидимости = Неопределено Тогда 
		Для Каждого ТекСтрока Из НастройкиВидимости Цикл
			Попытка
				Элементы[ТекСтрока.Ключ].Видимость = ТекСтрока.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура бит_УстановитьДопКнопкиОбработкиТЧ()
	
	Действие = "бит_ДействияФормыНажатиеНаДопКнопку";
	ДействиеОтправитьПочту = "ОтправитьСообщение";
	// + БИТ AMerkulov 2014-06-24 /  Отправка формы OPEX	
	ДействиеОтправитьПочтуOPEX = "ОтправитьСообщение";
	// - БИТ AMerkulov 2014-06-24 /  Отправка формы OPEX		
	
	
	Коллекция = Элементы.БК_КоманднаяПанель;
	КоллекцияОтчетов =  Элементы.БК_КоманднаяПанельОтчетов;
	КоллекцияОтправкаПочты = Элементы.ОтправитьИнициатору;
	//удаляем добавленные кнопки
	УдалитьКнопкуИзКоллекции("бит_ЗагрузитьОперационныйБюджет", Коллекция);
	УдалитьКнопкуИзКоллекции("бит_ЗагрузитьИнвестиционныйБюджет", Коллекция);
	УдалитьКнопкуИзКоллекции("бит_ЗагрузитьЗаявку_операционный", Коллекция);
	УдалитьКнопкуИзКоллекции("бит_ЗагрузитьИзExcel", Коллекция);
	УдалитьКнопкуИзКоллекции("бит_ПроверитьПоБюджету", Коллекция);
	УдалитьКнопкуИзКоллекции("бит_ПоискПоБюджету", Коллекция);
	//УдалитьКнопкуИзКоллекции("бит_Отчет_По_Выбранной_Заявке", Коллекция);
	//УдалитьКнопкуИзКоллекции("бит_ВариантыРаспределения", Коллекция); // 1c-izhtc spawn
	УдалитьКнопкуИзКоллекции("бит_Распределить", Коллекция);
	//ОК Ванюков К. +// В Заявке должна быть возможность возвращать суммы в столбец "Сумма (в рамках бюджета)" для повторной проверки по бюджету // 2012-02-22
	УдалитьКнопкуИзКоллекции("ОК_ОчиститьСверхБюджет", Коллекция);
	//ОК Ванюков К. -	
	//отчеты
	УдалитьКнопкуИзКоллекции("бит_Выполнение_Плана", КоллекцияОтчетов);
	
	УдалитьКнопкуИзКоллекции("бит_ПоискОстаткаПоБюджету", КоллекцияОтчетов);
	
	//Добавляем необходимые кнопки по виду операции
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда
		Если бит_мРольПользователя = "Инвестиционный бюджетный контролер" ИЛИ бит_мРольПользователя ="Все" Тогда 
			ДобавитьКнопкуВКоллекцию("бит_ЗагрузитьИнвестиционныйБюджет", "Загрузить инвестиционный бюджет", Действие, Неопределено, Коллекция);
		КонецЕсли;
		Если бит_мРольПользователя = "Операционный бюджетный контролер" ИЛИ бит_мРольПользователя ="Все" Тогда 
			ДобавитьКнопкуВКоллекцию("бит_ЗагрузитьОперационныйБюджет", "Загрузить операционный бюджет", Действие, Неопределено, Коллекция);
		КонецЕсли;
		Если бит_мРольПользователя = "" Тогда 
			Сообщить("Не определены права текущего пользователя. Функции загрузки бюджета будут не доступны",СтатусСообщения.Внимание);
		КонецЕсли;
		
	ИначеЕсли  Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный
		ИЛИ	Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный Тогда 
		//BIT_Belinskiy 20141128 {{
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ПроверитьПоБюджету_Новый", "Проверить по бюджету (Год)", Действие, Неопределено, КоллекцияОтчетов);	
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//BIT_Belinskiy 20141128 }}
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ЗагрузитьЗаявку_операционный", "Загрузить заявку(операционный)", Действие, Неопределено, Коллекция);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		ДобавитьКнопкуВКоллекцию("бит_ПроверитьПоБюджету", "Проверить по бюджету", Действие, Неопределено, Коллекция);		
		//ОК Ванюков К. +// В Заявке должна быть возможность возвращать суммы в столбец "Сумма (в рамках бюджета)" для повторной проверки по бюджету // 2012-02-22
		//ДобавитьКнопкуВКоллекцию("ОК_ОчиститьСверхБюджет", "Очистить СверхБюджет", Действие, Неопределено, Коллекция);  // БИТ НАГолубева 04.03.2016 Сверхбюджет больше не используется.
		//ОК Ванюков К. -		
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ПоискПоБюджету","Поиск по бюджету", Действие, Неопределено, Коллекция);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ВариантыРаспределения", "Варианты распределения", Действие, Неопределено, Коллекция); // 1c-izhtc spawn
		ДобавитьКнопкуВКоллекцию("бит_Распределить", "Распределить", Действие, Неопределено, Коллекция);
		//отчеты		
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ПоискОстаткаПоБюджету", "Поиск остатка по бюджету", Действие, Неопределено, КоллекцияОтчетов);
		
		//ДобавитьКнопкуВКоллекцию("бит_Выполнение_Плана", "Выполнение плана", Действие, Неопределено, КоллекцияОтчетов);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//Начало_бит_БК_Магомедов_15.03.2012 
		//Отправка почты
		ДобавитьКнопкуВКоллекцию("Отправить", "Отправить", ДействиеОтправитьПочту, Неопределено, КоллекцияОтправкаПочты);
		//+Сенин С.В. 11.08.16 №2560
		//ДобавитьКнопкуВКоллекцию("Отправить_заявка_операционный_Вложение", "Отправить ПФ(операционный)", ДействиеОтправитьПочтуOPEX, Неопределено, КоллекцияОтправкаПочты);
		ДобавитьКнопкуВКоллекцию("Отправить_заявка_строительство_Вложение", "Отправить ПФ(строительство)", ДействиеОтправитьПочту, Неопределено, КоллекцияОтправкаПочты);
		//-Сенин С.В. 11.08.16 №2560
		
		//Конец_бит_БК_Магомедов_15.03.2012 		
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-14 (#3808)
		//// + БИТ AMerkulov 2014-06-24 /  Отправка формы OPEX		
		//ДобавитьКнопкуВКоллекцию("Отправить_заявка_операционный_ВложениеOPEX", "Отправить ПФ(OPEX)", ДействиеОтправитьПочтуOPEX, Неопределено, КоллекцияОтправкаПочты);	
		//// + БИТ AMerkulov 2014-06-24 /
		//
		////ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Начало (#3499)		
		//ДобавитьКнопкуВКоллекцию("Отправить_заявка_операционный_ВложениеOPEX_АнглийскаяВерсия", "Отправить ПФ(OPEX eng)", ДействиеОтправитьПочтуOPEX, Неопределено, КоллекцияОтправкаПочты);	
		////ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Конец (#3499)
		
		//Заменено на:
		ДобавитьКнопкуВКоллекцию("Отправить_заявка_операционный_ВложениеOPEX", "Отправить ПФ", ДействиеОтправитьПочтуOPEX, Неопределено, КоллекцияОтправкаПочты);	
		ДобавитьКнопкуВКоллекцию("Отправить_заявка_операционный_ВложениеOPEX_АнглийскаяВерсия", "Отправить ПФ(eng)", ДействиеОтправитьПочтуOPEX, Неопределено, КоллекцияОтправкаПочты);	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-14 (#3808)
		
		//BIT_Amosov 20140922 {{
		//ДобавитьКнопкуВКоллекцию("бит_ПроверитьПоБюджету_Новый", "Проверить по бюджету (Новый)", Действие, Неопределено, Коллекция);	
		//BIT_Amosov 20140922 }}
		
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
		
		//+Сенин С.В. 27.09.16 №2665
		//Подменю = ДобавитьКнопкуВКоллекцию("бит_ЗагрузитьИзExcel", "Загрузить из Excel", Действие, "", Коллекция);
		//ДобавитьКнопкуВКоллекцию("бит_ЗагрузитьЗаявку_Инвестиционный", "Загрузить заявку(инвестиционный)", Действие, Неопределено, Подменю);
		//ДобавитьКнопкуВКоллекцию("бит_ЗагрузитьЗаявку_Строительство", "Загрузить заявку(строительство)", Действие, Неопределено, Подменю);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ЗагрузитьЗаявку_Инвестиционный", "Загрузить заявку(инвестиционный)", Действие, Неопределено, Коллекция);
		//ДобавитьКнопкуВКоллекцию("бит_ЗагрузитьЗаявку_Строительство", "Загрузить заявку(строительство)", Действие, Неопределено, Коллекция);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//-Сенин С.В. 27.09.16 №2665
		
		//BIT_Belinskiy 20141128 {{
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ПроверитьПоБюджету_Новый", "Проверить по бюджету (Год)", Действие, Неопределено, КоллекцияОтчетов);	
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//BIT_Belinskiy 20141128 }}
		
		ДобавитьКнопкуВКоллекцию("бит_ПроверитьПоБюджету", "Проверить по бюджету", Действие, Неопределено, Коллекция);
		//отчеты
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_Выполнение_Плана", "Выполнение плана", Действие, Неопределено, КоллекцияОтчетов);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//Начало_бит_БК_Магомедов_15.03.2012 
		//Отправка почты
		ДобавитьКнопкуВКоллекцию("Отправить", "Отправить", ДействиеОтправитьПочту, Неопределено, КоллекцияОтправкаПочты);
		//+Сенин С.В. 11.08.16 №2560
		//ДобавитьКнопкуВКоллекцию("Отправить_заявка_инвестиционный_Вложение", "Отправить ПФ(инвестиционный)", ДействиеОтправитьПочту, Неопределено, КоллекцияОтправкаПочты);
		//-Сенин С.В. 11.08.16 №2560
		ДобавитьКнопкуВКоллекцию("Отправить_заявка_строительство_Вложение", "Отправить ПФ(строительство)", ДействиеОтправитьПочту, Неопределено, КоллекцияОтправкаПочты);
		//Конец_бит_БК_Магомедов_15.03.2012 
		
		// + БИТ AMerkulov 2014-06-24 /  Отправка формы OPEX		
		ДобавитьКнопкуВКоллекцию("Отправить_заявка_операционный_ВложениеOPEX", "Отправить ПФ(OPEX)", ДействиеОтправитьПочтуOPEX, Неопределено, КоллекцияОтправкаПочты);	
		// + БИТ AMerkulov 2014-06-24 / 
		
		//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Начало (#3499)		
		ДобавитьКнопкуВКоллекцию("Отправить_заявка_операционный_ВложениеOPEX_АнглийскаяВерсия", "Отправить ПФ(OPEX eng)", ДействиеОтправитьПочтуOPEX, Неопределено, КоллекцияОтправкаПочты);	
		//ОКЕЙ Рычаков А.С.(СофтЛаб)2019-10-07 Конец (#3499)
		
		//BIT_Amosov 20140922 {{
		//ДобавитьКнопкуВКоллекцию("бит_ПроверитьПоБюджету_Новый", "Проверить по бюджету (Новый)", Действие, Неопределено, Коллекция);	
		//BIT_Amosov 20140922 }}
		//БИТ АКриштопов 20042016 ++
		//отчеты		
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ПоискОстаткаПоБюджету", "Поиск остатка по бюджету", Действие, Неопределено, КоллекцияОтчетов);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//БИТ АКриштопов 20042016 --
		//ОК Калинин М. +// В Заявке должна быть возможность возвращать суммы в столбец "Сумма (в рамках бюджета)" для повторной проверки по бюджету // 2012-08-07
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("ОК_ОчиститьСверхБюджет", "Очистить СверхБюджет", Действие, Неопределено, Коллекция);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//ОК Калинин М. -	
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		ДобавитьКнопкуВКоллекцию("бит_ПроверитьПоБюджету", "Проверить по бюджету", Действие, Неопределено, Коллекция);
		//отчеты
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_Выполнение_Плана", "Выполнение плана", Действие, Неопределено, КоллекцияОтчетов);
		////ОК Калинин М. +// В Заявке должна быть возможность возвращать суммы в столбец "Сумма (в рамках бюджета)" для повторной проверки по бюджету // 2012-08-07
		//ДобавитьКнопкуВКоллекцию("ОК_ОчиститьСверхБюджет", "Очистить СверхБюджет", Действие, Неопределено, Коллекция);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//ОК Калинин М. -
		//БИТ АКриштопов 21042016 ++
		//отчеты		
		//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
		//ДобавитьКнопкуВКоллекцию("бит_ПоискОстаткаПоБюджету", "Поиск остатка по бюджету", Действие, Неопределено, КоллекцияОтчетов);
		//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
		//БИТ АКриштопов 21042016 --
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьКнопкуВКоллекцию(Имя, Текст = "", Действие = Неопределено, ТипКнопки = неопределено, Коллекция)
	
	Команда = Команды.Найти(Имя);
	Если Команда = Неопределено Тогда
		Команда = Команды.Добавить(Имя);
		Команда.Действие = Действие;
	КонецЕсли;
	
	Кнопка = Элементы.Найти(Имя);
	
	Если Кнопка = Неопределено Тогда
		
		Если ТипКнопки = Неопределено Тогда 
			Кнопка = Элементы.Добавить(Имя, Тип("КнопкаФормы"), Коллекция);
			Кнопка.ИмяКоманды  = Имя;
		иначе
			Кнопка = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Коллекция);
			Кнопка.Вид = ВидГруппыФормы.Подменю;
		КонецЕсли;
		Кнопка.Заголовок   = Текст;
		//Кнопка.Картинка    = Картинка;
		//Кнопка.Подсказка   = Подсказка;
		//Кнопка.Пометка     = Пометка;	
		//Кнопка.ИзменяетДанные   = ИзменяетДанные;	
		//Кнопка.Расшифровка = Расшифровка;
	КонецЕсли;
	
	Возврат Кнопка;
КонецФункции

&НаСервере
Процедура УдалитьКнопкуИзКоллекции(Имя,Коллекция)
	Кнопка = Элементы.Найти(Имя);
	Если НЕ Кнопка = Неопределено Тогда 
		Элементы.Удалить(Кнопка);
	КонецЕсли;
	
	Команда = Команды.Найти(Имя);
	Если НЕ Команда = Неопределено Тогда 
		Команды.Удалить(Команда);
	КонецЕсли;
КонецПроцедуры    

&НаСервере
Процедура бит_УстановитьКнопкиВводаНаОсновании()
	Действие = "бит_ДействияФормыВвестиНаОсновании";
	Коллекция = Элементы.ФормаКоманднаяПанель;
	
	//удаляем добавленные кнопки
	УдалитьКнопкуИзКоллекции("бит_ВвестиНаОснованииКорректировкаКонтроляИБюджета", Коллекция);
	ДобавитьКнопкуВКоллекцию("бит_ВвестиНаОснованииКорректировкаКонтроляИБюджета", "Корректировка контрольных значений и бюджета", Действие, Неопределено, Коллекция);
КонецПроцедуры

&НаКлиенте
Процедура бит_ДействияФормыВвестиНаОсновании()
	//Задаем вопрос - какую сумму переносить?
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Сверхбюджета", "Только сверхбюджета");
	СписокВыбора.Добавить("Полностью", "Полностью");
	
	СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("бит_ДействияФормыВвестиНаОснованииЗавершение", ЭтотОбъект), "Какую сумму вы хотите перенести в заявку?");
КонецПроцедуры

&НаКлиенте
Процедура бит_ДействияФормыВвестиНаОснованииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВвестиНаОсновании(ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНаОсновании(ВыборСуммы) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокОснование", Объект.Ссылка);
	
	ТЗСтрок = ВвестиНаОснованииНаСервере();
	
	ДанныеЗаполнения.Вставить("МассивСтрокПревышения", ТЗСтрок);
	ДанныеЗаполнения.Вставить("ВыборСуммы", ВыборСуммы);
	ДанныеЗаполнения.Вставить("Дата", РабочаяДата());
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения);
	ОткрытьФорму("Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ВвестиНаОснованииНаСервере()
	//Начало_бит_Магомедов_09.08.2012 
	//Заполняем аналитику НомерЗаявки в соотв. со сценарием
	ТЗСтрок = Объект.БДДС.Выгрузить();
	Если Объект.Сценарий = Справочники.СценарииПланирования.Заявка_Инвест ИЛИ Объект.Сценарий = Справочники.СценарииПланирования.Заявка_У Тогда 
		ТЗСтрок.ЗаполнитьЗначения(Документы.бит_ФормаВводаБюджета.ПустаяСсылка(),"Аналитика_1");
	ИначеЕсли Объект.Сценарий = Справочники.СценарииПланирования.Контракт_Инвест Тогда  
		ТЗСтрок.ЗаполнитьЗначения(Объект.бит_БК_НомерЗаявки,"Аналитика_1");
	КонецЕсли;	
	//Конец_бит_Магомедов_09.08.2012 
	
	Возврат ПоместитьВоВременноеХранилище(ТЗСтрок, УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция РабочаяДата()
	Возврат ОбщегоНазначения.ТекущаяДатаПользователя();
КонецФункции

// действие при нажатии на кнопки размещенные программно
&НаКлиенте
Процедура бит_ДействияФормыНажатиеНаДопКнопку(Команда)
	Если Команда.Имя = "бит_ЗагрузитьОперационныйБюджет" тогда 
		//1c-izhtc spawn (
		//ИмяТЧ = "БДДС";
		//ТабПоле = Элементы.БДДС;
		//Обработка = Обработки.бит_БК_ЗагрузкаИзExcelФинПлан.Создать();
		//Обработка.Инициализировать(ЭтотОбъект,ИмяТЧ , ТабПоле);
		ЗагрузкаИзExcel(Команда.Имя);
		//1c-izhtc spawn )
	ИначеЕсли  Команда.Имя = "бит_ЗагрузитьИнвестиционныйБюджет" Тогда 
		//1c-izhtc spawn (
		//ИмяТЧ = "БДДС";
		//ТабПоле = Элементы.БДДС;
		//Обработка = Обработки.бит_БК_ЗагрузкаИзExcelФинПлан.Создать();
		//Обработка.Инициализировать(ЭтотОбъект,ИмяТЧ , ТабПоле);		
		ЗагрузкаИзExcel(Команда.Имя);
		//1c-izhtc spawn )
	иначеесли Команда.Имя = "бит_ЗагрузитьЗаявку_операционный" тогда
		//1c-izhtc spawn (
		//ИмяТЧ = "БДДС";
		//ТабПоле = Элементы.БДДС;
		//Обработка = Обработки.бит_БК_ЗагрузкаИзExcelЗаявкаОперационный.Создать();
		//Обработка.Инициализировать(ЭтотОбъект,ИмяТЧ , ТабПоле);
		ЗагрузкаИзExcel(Команда.Имя);
		//1c-izhtc spawn )
	иначеесли Команда.Имя = "бит_ЗагрузитьЗаявку_Инвестиционный" тогда
		//1c-izhtc spawn (
		//ИмяТЧ = "БДДС";
		//ТабПоле = Элементы.БДДС;
		//Обработка = Обработки.бит_БК_ЗагрузкаИзExcelЗаявкаИнвестиционный.Создать();
		//Обработка.Инициализировать(ЭтотОбъект,ИмяТЧ , ТабПоле);
		ЗагрузкаИзExcel(Команда.Имя);
		//1c-izhtc spawn )
	иначеесли Команда.Имя = "бит_ЗагрузитьЗаявку_Строительство" тогда
		//1c-izhtc spawn (
		//ИмяТЧ = "БДДС";
		//ТабПоле = Элементы.БДДС;
		//Обработка = Обработки.бит_БК_ЗагрузкаИзExcelЗаявкаНаСтроительство.Создать();
		//Обработка.Инициализировать(ЭтотОбъект,ИмяТЧ , ТабПоле);
		ЗагрузкаИзExcel(Команда.Имя);
		//1c-izhtc spawn )
	ИначеЕсли Команда.Имя = "бит_ПроверитьПоБюджету" Тогда 
		бит_ПроверитьПоБюджету();
	ИначеЕсли Команда.Имя = "бит_ПоискПоБюджету" Тогда 
		бит_ПоискПоБюджету();
	ИначеЕсли Команда.Имя = "бит_ПоискОстаткаПоБюджету" Тогда
		// БИТ_YK_н 01/16
		//+Сундукова 160316
		//ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
		//бит_ФормаВводаБюджетаКлиент.бит_ПоискОстаткаПоБюджету(Объект, ТекущиеДанные.Период, Объект.Сценарий, ТекущиеДанные.ЦФО, ТекущиеДанные.СтатьяОборотов, ТекущиеДанные.Аналитика_2);
		МассивЦФО = новый массив;
		МассивСтатьяОборотов = новый массив;
		МассивАналитика_2 = новый массив;
		//+Сундукова 13.04.16
		Если объект.БДДС.Количество() тогда  
			ДатаНачала = объект.бддс[0].период;
			ДатаОкончания  = ДатаНачала;			
		Иначе
			//-Сундукова 13.04.16
			ДатаНачала = объект.Дата;
			ДатаОкончания  = объект.Дата;
		КонецЕсли;
		Для каждого ТекСтрока из объект.БДДС цикл
			Если текСтрока.период < ДатаНачала тогда
				ДатаНачала = текСтрока.период;
			конецЕсли;
			Если текСтрока.период > ДатаОкончания тогда
				ДатаОкончания = текСтрока.период;
			конецЕсли;
			
			МассивЦФО.Добавить(ТекСтрока.ЦФО);
			МассивСтатьяОборотов.Добавить(ТекСтрока.СтатьяОборотов);
			МассивАналитика_2.Добавить(ТекСтрока.Аналитика_2);
		КонецЦикла;
		бит_ФормаВводаБюджетаКлиент.бит_ПоискОстаткаПоБюджету(Объект, ДатаНачала, Объект.Сценарий, МассивЦФО, МассивСтатьяОборотов, МассивАналитика_2,ДатаОкончания);
		//-Сундукова 160316
		// БИТ_YK_к
	ИначеЕсли Команда.Имя = "бит_Распределить" Тогда
		ТекСтрока = ТекущаяСтрока();
		Если ТекСтрока = Неопределено Тогда 
			ПоказатьПредупреждение(Неопределено, "Выберите строку для распределения", 5);
			Возврат;
		КонецЕсли;
		бит_Распределить(ТекСтрока);
		//ИначеЕсли Команда.Имя = "бит_ВариантыРаспределения" Тогда
		//	//Распределяем по первой строке
		//	Если Объект.БДДС.Количество() = 0 Тогда 
		//		Возврат;
		//	КонецЕсли;		
		//	ТекСтрока = Объект.БДДС[0];
		//	Форма = Справочники.бит_БК_ВариантыРаспределения.ПолучитьФормуВыбора();
		//	ВариантРаспределения = Форма.ОткрытьМодально();
		//	Если НЕ ВариантРаспределения = Неопределено Тогда 
		//		бит_ВариантыРаспределения(ТекСтрока, ВариантРаспределения);
		//	КонецЕсли;
	ИначеЕсли Команда.Имя = "бит_Выполнение_Плана" Тогда
		бит_Выполнение_Плана();
		//ОК Ванюков К. +// В Заявке должна быть возможность возвращать суммы в столбец "Сумма (в рамках бюджета)" для повторной проверки по бюджету // 2012-02-22
	ИначеЕсли Команда.Имя = "ОК_ОчиститьСверхБюджет" Тогда
		ОК_ОчиститьСверхБюджет();
		//ОК Ванюков К. -
		
		//BIT_Amosov 20140922 {{
	ИначеЕсли Команда.Имя =	"бит_ПроверитьПоБюджету_Новый" Тогда
		бит_ФормаВводаБюджетаКлиент.бит_ПроверитьПоБюджету_Новый(Объект.Ссылка);	
		//BIT_Amosov 20140922 }}
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзExcel(ИмяКоманды)
	Если Не Объект.БДДС.Количество() = 0 Тогда
		ТекстВопроса = "ru = 'Данные будут перезаполнены. Продолжить?'";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗагрузкаИзExcelЗавершение", ЭтотОбъект, Новый Структура("ИмяКоманды", ИмяКоманды)), НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ЗагрузкаИзExcelФрагмент(ИмяКоманды);
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузкаИзExcelЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	Ответ = РезультатВопроса;
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.БДДС.Очистить();
	Объект.ЗависимыеОбороты.Очистить();
	Модифицированность = Истина;
	
	ЗагрузкаИзExcelФрагмент(ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИзExcelФрагмент(ИмяКоманды)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеИзExcelЗавершение", ЭтотОбъект, ИмяКоманды);
	ПараметрыФормы = Новый Структура("Сценарий, Дата", Объект.Сценарий, Объект.Дата);
	Если ИмяКоманды = "бит_ЗагрузитьЗаявку_операционный" Тогда 
		ОткрытьФорму("Обработка.бит_БК_ЗагрузкаИзExcelЗаявкаОперационный.Форма", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ИмяКоманды = "бит_ЗагрузитьЗаявку_Инвестиционный" Тогда 
		ОткрытьФорму("Обработка.бит_БК_ЗагрузкаИзExcelЗаявкаИнвестиционный.Форма", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ИмяКоманды = "бит_ЗагрузитьЗаявку_Строительство" Тогда 
		ОткрытьФорму("Обработка.бит_БК_ЗагрузкаИзExcelЗаявкаНаСтроительство.Форма", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ИмяКоманды = "бит_ЗагрузитьОперационныйБюджет" ИЛИ ИмяКоманды = "бит_ЗагрузитьИнвестиционныйБюджет" Тогда 
		ПараметрыФормы.Вставить("АдресКопия_ТЧ_БДДС", ПоместитьБДДСВоВременноеХранилище());
		ОткрытьФорму("Обработка.бит_БК_ЗагрузкаИзExcelФинПлан.Форма", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзExcelЗавершение(Результат, ИмяКоманды) Экспорт 
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	//БИТ АКриштопов 28042016 ++
	Результат.ПараметрыШапки.Удалить("Номер");
	//БИТ АКриштопов 28042016 --
	ЗаполнитьЗначенияСвойств(Объект, Результат.ПараметрыШапки);
	ЗаполнитьДанныеБюджета(Результат.АдресТаблицаДанных, ИмяКоманды);
	
	//{ bit_SVKushnirenko 28.12.2016 #2671.2
	Для каждого пТекДанные Из Объект.БДДС Цикл
		
		пТекДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера = 
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		//ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_ВалютаДоговора") +
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)
		//ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_Курс")		   + 
		//ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_Кратность") 	   + 
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086) 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
		ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_Организация") + 
		ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_ФормаОплаты") + 
		ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_СуммаПредоплаты") + 
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		//ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "ЦФО"); //перезаписываем все ограничения
		"";
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	КонецЦикла; 
	СинхронизироватьРеквизиты();	 //лучше это сделать, т.к. таблица изменяется целиком
	//} bit_SVKushnirenko 28.12.2016 #2671.2
	
	Модифицированность=Истина;
	
	//{ bit_SVKushnirenko 25.04.2017 #2811
	ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС();
	//} bit SVKushnirenko Bit 25.04.2017 #2811
	
	//{ bit SVKushnirenko Bit 25.04.2017 #2759
	ДоступностьЦелиПриобретенияОборудования();
	//} bit SVKushnirenko Bit 25.04.2017 #2759
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-09 (#2879)
	Объект.СБ_СуммаПредоплатыИтого = Объект.БДДС.Итог("СБ_СуммаПредоплаты"); 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-09 (#2879)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБюджета(АдресСтрокиДляЗаполнения, ИмяКоманды)
	СтрокиДляЗаполнения = ПолучитьИзВременногоХранилища(АдресСтрокиДляЗаполнения);
	ДокументОбъект = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_ФормаВводаБюджета"));	
	ДокументОбъект.ЗаполнитьДанныеБюджета(СтрокиДляЗаполнения, ИмяКоманды);
	ЗначениеВДанныеФормы(ДокументОбъект,Объект); 
КонецПроцедуры

&НаКлиенте
Процедура бит_ПроверитьПоБюджету()
	
	//Если не записан надо записать
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("бит_ПроверитьПоБюджетуВопросЗавершение", ЭтотОбъект), "Перед проверкой необходимо записать документ. Продолжить?", РежимДиалогаВопрос.ДаНет, 10,,,КодВозвратаДиалога.Нет);
		Возврат;			
	КонецЕсли;
	
	бит_ПроверитьПоБюджетуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура бит_ПроверитьПоБюджетуВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодВозврата = РезультатВопроса;
	Если КодВозврата = КодВозвратаДиалога.Нет ИЛИ КодВозврата = КодВозвратаДиалога.Таймаут Тогда 
		Возврат;
	КонецЕсли;
	Записать();			
	
	бит_ПроверитьПоБюджетуНаСервере();
	
КонецПроцедуры

&НаСервере
Функция бит_ПроверитьПоБюджетуНаСервере()
	
	//{ bit_SVKushnirenko 20.12.2016 #2669
	//ИсходныйКод{
	//// БИТ НАГолубева 04.03.2016 ++
	////По кнопке проверить по бюджету обновляется колонка Остаток по бюджету
	////ДокументОбъект = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_ФормаВводаБюджета"));	
	////ДокументОбъект.бит_ПроверитьПоБюджету();
	////ЗначениеВДанныеФормы(ДокументОбъект,Объект);     	
	////+Сундукова 28.03.2016
	//бит_ФормаВводаБюджетаВызовСервера.ОбновитьДанныеПоОстаткуБюджета(объект);
	////-Сундукова 28.03.2016
	//}ИсходныйКод
	
	бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(Объект);
	//} bit_SVKushnirenko 20.12.2016 #2669
	
	Модифицированность=истина;
КонецФункции

&НаКлиенте
Процедура бит_ПоискПоБюджету() Экспорт
	СуммаКРаспределению = Объект.БДДС.Итог("бит_БК_СуммаБезНДС");
	ПараметрыФормы = Новый Структура("Объект, СуммаКРаспределению, ВидОперации", Объект.Ссылка, СуммаКРаспределению, Объект.ВидОперации);
	ОткрытьФорму("Обработка.бит_БК_ПоискПоБюджету.Форма", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

//Поиск по бюджету и распределение сумм
&НаСервере
Процедура бит_БК_ЗагрузитьРезультатыПоискПоБюджету(АдресТаблица) Экспорт
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблица);
	
	Если Таблица.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	//запоминаем значения из первой строки
	ПерваяСтрока = Новый Структура;
	Если НЕ Объект.БДДС.Количество() = 0 Тогда 
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//ПерваяСтрока.Вставить("СтавкаНДС", БДДС[0].СтавкаНДС);
		//1c-izhtc spawn )
		ПерваяСтрока.Вставить("бит_БК_Организация", Объект.БДДС[0].бит_БК_Организация);
		ПерваяСтрока.Вставить("бит_БК_СуммаПредоплаты", Объект.БДДС[0].бит_БК_СуммаПредоплаты);
	иначе
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//ПерваяСтрока.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
		//1c-izhtc spawn )
		ПерваяСтрока.Вставить("бит_БК_Организация", Справочники.Организации.ПустаяСсылка());
		ПерваяСтрока.Вставить("бит_БК_СуммаПредоплаты", 0);
	КонецЕсли;
	Объект.БДДС.Очистить();
	Для Каждого ТекСтрока Из Таблица Цикл
		НовСтрока = Объект.БДДС.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.бит_БК_СуммаБезНДС = ТекСтрока.СуммаБезНДС;
		Для Каждого ЭлементПервойСтроки ИЗ ПерваяСтрока Цикл
			НовСтрока[ЭлементПервойСтроки.Ключ] = ПерваяСтрока[ЭлементПервойСтроки.Ключ];
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьСуммыБДДС("СуммаБезНДС");
	
КонецПроцедуры

//Распределение текущей строки по периодам
&НаКлиенте
Процедура бит_Распределить(ТекущаяСтрока) Экспорт
	
	//Индекс = Объект.БДДС.Индекс(ТекущаяСтрока);
	
	ЗначенияЗаполнения = Новый Структура("ИмяКолонкиСуммы");
	
	ИмяТЧ = "БДДС";
	ЗначенияЗаполнения.ИмяКолонкиСуммы = "бит_БК_СуммаБезНДС";
	
	АдресТЗ = ПоместитьБДДСВоВременноеХранилище();
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, АдресТЗ", ЗначенияЗаполнения, АдресТЗ);
	
	Оповещение = Новый ОписаниеОповещения("бит_РаспределитьЗавершение", ЭтотОбъект, ИмяТЧ);
	ОткрытьФорму("Обработка.бит_БК_Распределить.Форма", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_РаспределитьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда 
		Возврат;
	КонецЕсли;
	
	бит_БК_ЗагрузитьРезультатыРаспределить(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура бит_БК_ЗагрузитьРезультатыРаспределить(АдресТаблица, ИмяТЧ) Экспорт
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблица);
	
	ТЧ = Объект[ИмяТЧ];
	Если Таблица.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ТЧ.Очистить();
	Для Каждого ТекСтрока Из Таблица Цикл
		НовСтрока = ТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ТекСтрока);
		НовСтрока.бит_БК_СуммаБезНДС = ТекСтрока.РаспределеннаяСумма;
	КонецЦикла;
	ПересчитатьСуммыБДДС("СуммаБезНДС");	
	
	//+Сенин С.В. 19.08.16 №2591
	//сохраним расчет без ндс
	ВТ_ТЧ = ТЧ.Выгрузить();
	
	номерСтроки=0;
	//добавим расчет с ндс
	Для Каждого ТекСтрока Из Таблица Цикл
		НовСтрока = ТЧ[номерСтроки];
		НовСтрока.Сумма 			 		= ТекСтрока.РаспределеннаяСуммаСНДС;
		номерСтроки = номерСтроки+1;
	КонецЦикла;
	ПересчитатьСуммыБДДС("СуммаСНДС");	
	
	//вернем суммы без ндс
	Для Каждого ТекСтрока Из ВТ_ТЧ Цикл
		НовСтрока = ТЧ[ТекСтрока.НомерСтроки-1];
		НовСтрока.бит_БК_СуммаБезНДС 		= ТекСтрока.бит_БК_СуммаБезНДС;
		НовСтрока.бит_БК_СуммаВВалютеБезНДС = ТекСтрока.бит_БК_СуммаВВалютеБезНДС;
		НовСтрока.бит_БК_ЦенаБезНДС         = ТекСтрока.бит_БК_ЦенаБезНДС;
		НовСтрока.бит_БК_ЦенаВВалютеБезНДС  = ТекСтрока.бит_БК_ЦенаВВалютеБезНДС;
	КонецЦикла;
	//-Сенин С.В. 19.08.16 №2591
	
КонецПроцедуры

&НаСервере
Функция ПоместитьБДДСВоВременноеХранилище()
	Возврат ПоместитьВоВременноеХранилище(Объект.БДДС.Выгрузить(), УникальныйИдентификатор);
КонецФункции


//{bit_SVKushnirenko 04.04.2017 #2816
// Возвращает массив уникальных контролируемых сценариев для текущей формы ввода
// Параметры:
//парТЧБДДС - табличная часть документа (ДанныеФормыКоллекция)
&НаСервереБезКонтекста
Функция ПолучитьМассивУникальныхКонтролируемыхСценариев(знач парТЧБДДС)

	пМассивСценариев = парТЧБДДС.Выгрузить(, "Сценарий");
	Если пМассивСценариев.Количество() = 0 Тогда  
		
		Возврат Неопределено;
	Иначе
		
		пЗапрос = Новый Запрос;
		пЗапрос.Текст = 
		" ВЫБРАТЬ
		|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования) КАК СценарийКонтролируемый,
		|	МАКСИМУМ(ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.СценарииПланирования)) КАК СценарийКонтролирующий
		|ИЗ
		|	РегистрСведений.бит_БК_НастройкиБК КАК бит_БК_НастройкиБК
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
		|		ПО ((ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)) = (ВЫРАЗИТЬ(бит_СоответствияАналитик.ПраваяАналитика_1 КАК Справочник.СценарииПланирования)))
		|ГДЕ
		|	бит_БК_НастройкиБК.Группа = ""Контроль бюджета""
		|	И бит_СоответствияАналитик.ВидСоответствия.Код = ""бит_БК_СценарийВСценарийКонтролируемый""
		|	И ВЫРАЗИТЬ(бит_СоответствияАналитик.ЛеваяАналитика_1 КАК Справочник.СценарииПланирования) В (&пзКонтролирующиеСценарии)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(бит_БК_НастройкиБК.ИмяНастройки КАК Справочник.СценарииПланирования)";
		
		пЗапрос.УстановитьПараметр("пзКонтролирующиеСценарии", пМассивСценариев);
		
		пТЗРез = пЗапрос.Выполнить().Выгрузить();
		
		Если пТЗРез.Количество() = 0 Тогда  
			
			Возврат Неопределено;
		КонецЕсли;
		
		пСписокЗначений = Новый СписокЗначений;
		пСписокЗначений.ЗагрузитьЗначения(пТЗРез.ВыгрузитьКолонку("СценарийКонтролируемый"));
		Возврат пСписокЗначений;
	КонецЕсли;
КонецФункции // ПолучитьМассивУникальныхКонтролируемыхСценариев() }bit_SVKushnirenko 04.04.2017 #2816 

//Обработка ЗакрытиеОстатков
&НаКлиенте
Процедура ЗакрытиеОстатка() Экспорт 
	//{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//ИсходныйКод{
	//П = Новый Структура;
	//П.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	//П.Вставить("Использование", Истина);
	//П.Вставить("ПравоеЗначение", Объект.Ссылка);
	//СтруктураОтбора = Новый Структура("Аналитика_1",П);
	//
	//ПараметрыФормы = Новый Структура("СтруктураОтбора", СтруктураОтбора);
	//
	//ФормаОбработки = ОткрытьФорму("Обработка.бит_БК_ЗакрытиеОстатков.Форма", ПараметрыФормы);
	//}ИсходныйКод
	
	////+Сундукова 27.04.16
	//Остаток = бит_БК_Общий.ПолучитьОстатокПоДокументу(Объект.Ссылка);
	//Если Остаток <= 0 тогда
	//	Ответ = Вопрос("Остаток по заявке ="+Строка(остаток)+" Установить статус 'Закрыта'?", РежимДиалогаВопрос.ДаНет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		бит_БК_Общий.УстановитьСтатусЗаявкиЗакрытаПоОстатку(Остаток, Объект.Ссылка, Неопределено); 
	//	КонецЕсли;
	//иначе
	//	П = Новый Структура;
	//	П.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	//	П.Вставить("Использование", Истина);
	//	П.Вставить("ПравоеЗначение", Объект.Ссылка);
	//	СтруктураОтбора = Новый Структура("Аналитика_1",П);
	//	
	//	ПараметрыФормы = Новый Структура("СтруктураОтбора", СтруктураОтбора);
	//	
	//	ФормаОбработки = ОткрытьФорму("Обработка.бит_БК_ЗакрытиеОстатков.Форма", ПараметрыФормы);
	//	
	//КонецЕсли;
	//-СУндукова 27.04.16
	//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	
	//{ bit SVKushnirenko Bit 18.01.2017 #2657
	пПараметрПоиска = Новый Структура;
	пПараметрПоиска.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	пПараметрПоиска.Вставить("Использование", Истина);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-06 (#3045)
	//пПараметрПоиска.Вставить("ПравоеЗначение", Объект.Ссылка);	
	//Заменено на:
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт") Тогда 
		
		пПараметрПоиска.Вставить("ПравоеЗначение", Объект.бит_БК_НомерЗаявки);	
		
	Иначе 
		
		пПараметрПоиска.Вставить("ПравоеЗначение", Объект.Ссылка);	
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-06 (#3045)
	пСтруктураОтбора = Новый Структура("Аналитика_1", пПараметрПоиска);
	
	//{ bit SVKushnirenko Bit 04.04.2017 #2816
	//Дополнительно включаем отборы по "управляемым" сценариям документа, 
	//что бы исключить возможный вывод в подбор пары с "управляющими" сценариями
	пМассивКонтролируемыхСценариев = ПолучитьМассивУникальныхКонтролируемыхСценариев(Объект.БДДС);
	Если пМассивКонтролируемыхСценариев <>  Неопределено Тогда  

		пПараметрПоиска = Новый Структура;
		пПараметрПоиска.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.ВСписке);
		пПараметрПоиска.Вставить("Использование", Истина);
		пПараметрПоиска.Вставить("ПравоеЗначение", пМассивКонтролируемыхСценариев);
		пСтруктураОтбора.Вставить("СценарийКонтролируемый", пПараметрПоиска);
	КонецЕсли;
	//} bit SVKushnirenko Bit 04.04.2017 #2816
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-08 (#3073)
	пПараметрПоиска = Новый Структура;
	пПараметрПоиска.Вставить("ВидСравнения"				, ВидСравненияКомпоновкиДанных.Больше);
	пПараметрПоиска.Вставить("Использование"			, Ложь);
	пПараметрПоиска.Вставить("ПравоеЗначение"			, 0);
	
	пСтруктураОтбора.Вставить("СуммаОстаток"	, пПараметрПоиска);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-08 (#3073)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-03-11 (#3263)
	Если Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Контракт_Инвест") Тогда 
		
		пПараметрПоиска = Новый Структура;
		пПараметрПоиска.Вставить("ВидСравнения"				, ВидСравненияКомпоновкиДанных.Равно);
		пПараметрПоиска.Вставить("Использование"			, Истина);
		пПараметрПоиска.Вставить("ПравоеЗначение"			, Объект.ДоговорКонтрагента);
	
		пСтруктураОтбора.Вставить("ДоговорКонтрагента"		, пПараметрПоиска);
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-03-11 (#3263)
	
	ОткрытьФорму("Обработка.бит_БК_ЗакрытиеОстатков.Форма", Новый Структура("СтруктураОтбора", пСтруктураОтбора));
	//} bit SVKushnirenko Bit 18.01.2017 #2657
КонецПроцедуры

//Отчет бит_Выполнение_Плана
&НаКлиенте
Процедура бит_Выполнение_Плана() Экспорт
	Форма = ОткрытьФорму("Отчет.бит_БК_ВыполнениеПлана.Форма");
	
	КоллекцияПользовательскихНастроек = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	Для каждого ЭлементПН Из КоллекцияПользовательскихНастроек Цикл
		
		Если ТипЗнч(ЭлементПН) = Тип("ОтборКомпоновкиДанных") Тогда
			
			ЭлементыОтбора = ЭлементПН.Элементы;
			ЭлементыОтбора.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	//установка отбора
	Если НЕ Объект.БДДС.Количество() = 0 Тогда 
		
		//статья
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяОборотов");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		Список = бит_Выполнение_Плана_ПолучитьСтатьиОборотов();
		ЭлементОтбора.ПравоеЗначение = Список;
		//ЦФО
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦФО");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		Список = бит_Выполнение_Плана_ПолучитьЦФО();
		ЭлементОтбора.ПравоеЗначение = Список;
		//Объект
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналитика_2");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		Список = бит_Выполнение_Плана_ПолучитьАналитика_2();
		ЭлементОтбора.ПравоеЗначение = Список;
		
		//Параметры
		НачалоПериода = "";
		КонецПериода = "";
		бит_Выполнение_Плана_ЗаполнитьПериоды(НачалоПериода, КонецПериода);
		
		Форма.Отчет.Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Форма.Отчет.Период.ДатаНачала = НачалоПериода;
		Форма.Отчет.Период.ДатаОкончания = КонецПериода;
	КонецЕсли;
	
	//параметры сценариев
	ЗначениеПараметра = Новый СписокЗначений;
	ИмяПараметра = "Сценарий";
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный") Тогда 
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_У"));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный") Тогда 
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест"));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт") Тогда 
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Факт_Инвест"));
	КонецЕсли;
	
	Форма.Отчет[ИмяПараметра] = ЗначениеПараметра;
	
	ЗначениеПараметра = Новый СписокЗначений;
	ИмяПараметра = "СценарийЭталон";
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный") Тогда 
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_У"));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный") Тогда 
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест"));
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт") Тогда 
		ЗначениеПараметра.Добавить(ПредопределенноеЗначение("Справочник.СценарииПланирования.Бюджет_Инвест"));
	КонецЕсли;	
	
	Форма.Отчет[ИмяПараметра] = ЗначениеПараметра;
	
	//периодичность = 9, т.е. месяц
	ИмяПараметра = "Периодичность";
	Форма.Отчет[ИмяПараметра] = 9;
	
	бит_ОтчетыКлиент.СформироватьОтчет(Форма, Форма.Элементы.ГруппаКоманднаяПанельОтчетаЛевая, "Авто");
	
КонецПроцедуры

&НаСервере  
Функция бит_Выполнение_Плана_ПолучитьСтатьиОборотов()
	Таблица = Объект.БДДС.Выгрузить(,"СтатьяОборотов");
	Таблица.Свернуть("СтатьяОборотов");
	Список = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Таблица Цикл
		Список.Добавить(ТекСтрока.СтатьяОборотов);
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаСервере  
Функция бит_Выполнение_Плана_ПолучитьЦФО()
	Таблица = Объект.БДДС.Выгрузить(,"ЦФО");
	Таблица.Свернуть("ЦФО");
	Список = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Таблица Цикл
		Список.Добавить(ТекСтрока.ЦФО);
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаСервере  
Функция бит_Выполнение_Плана_ПолучитьАналитика_2()
	Таблица = Объект.БДДС.Выгрузить(,"Аналитика_2");
	Таблица.Свернуть("Аналитика_2");
	Список = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Таблица Цикл
		Список.Добавить(ТекСтрока.Аналитика_2);
	КонецЦикла;
	Возврат Список;
КонецФункции

&НаСервере  
Процедура бит_Выполнение_Плана_ЗаполнитьПериоды(НачалоПериода, КонецПериода)
	Таблица = Объект.БДДС.Выгрузить(,"Период");
	Таблица.Свернуть("Период");
	Таблица.Сортировать("Период Возр");
	НачалоПериода = Таблица[0].Период;
	КонецПериода = Таблица[Таблица.Количество() - 1].Период;
	//Если НачалоПериода = КонецПериода тогда
	КонецПериода = КонецМесяца(КонецПериода);
	//КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОК_ОчиститьСверхБюджет()
	ОК_ОчиститьСверхБюджетНаСервере();
КонецПроцедуры

&НаСервере  
Процедура ОК_ОчиститьСверхБюджетНаСервере()
	ДокументОбъект = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_ФормаВводаБюджета"));	
	ДокументОбъект.ОК_ОчиститьСверхБюджет();
	ЗначениеВДанныеФормы(ДокументОбъект,Объект); 
	Модифицированность=истина;
КонецПроцедуры	

//Определяет доступные роли текущего пользователя как "Инвестиционный бюджетный контролер" И/ИЛИ "Операционный бюджетный контролер"
&НаСервере
Процедура бит_ОпределитьРольПользователя()
	
	//ТекущийИнициатор = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	СтруктураРолей = бит_БК_Общий.ОпределитьРольПользователяБюджетногоКонтролера(ТекущийПользователь);
	
	Если НЕ СтруктураРолей.Инвестиционный И НЕ СтруктураРолей.Операционный Тогда 
		бит_мРольПользователя = "";
	ИначеЕсли СтруктураРолей.Инвестиционный И СтруктураРолей.Операционный Тогда
		бит_мРольПользователя = "Все";
	ИначеЕсли СтруктураРолей.Инвестиционный Тогда 
		бит_мРольПользователя = "Инвестиционный бюджетный контролер"
	ИначеЕсли СтруктураРолей.Операционный Тогда 
		бит_мРольПользователя = "Операционный бюджетный контролер"
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бит_УстановитьРеквизитыИнициатора()
	Объект_бит_БК_Инициатор = бит_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.бит_БК_Инициатор, "Email, Телефон");
	Надпись_ИнициаторEMail = "Email: "+ Объект_бит_БК_Инициатор.Email;
	Надпись_ИнициаторТелефон = "тел.: "+ Объект_бит_БК_Инициатор.Телефон;
КонецПроцедуры

&НаКлиенте
Процедура бит_ИнициаторПриИзменении(Элемент)
	//бит_ОпределитьРольПользователя();
	бит_УстановитьРеквизитыИнициатора();
КонецПроцедуры


//при переключении сценария в Фин. плане
&НаКлиенте
Процедура ПереключательСценарийПриИзменении(Элемент)
	бит_УстановитьПредопределеннуюНастройкуФормы();
	мТекущаяНастройкаФормы = Объект.НастройкаФормы;
	
	
	// ++ БИТ AMerkulov 2014-10-07 /  
	//Если ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный
	//	ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный
	//	ИЛИ ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный		
	//	ИЛИ (ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан  И Сценарий <> Справочники.СценарииПланирования.Бюджет_А)
	//	
	//	Тогда
	//	ЭлементыФормы.НадписьКонтрагентбит.Видимость = Истина;
	//	ЭлементыФормы.битКонтрагент.Видимость = Истина;
	//	
	//Иначе
	//	
	//	ЭлементыФормы.НадписьКонтрагентбит.Видимость = Ложь;
	//	ЭлементыФормы.битКонтрагент.Видимость = Ложь;		
	//КонецЕсли;
	// -- БИТ AMerkulov 2014-10-07 /  
	
	
	
КонецПроцедуры
//}bit_SVKushnirenko 09.02.2017 #2671

//при начале редактирования строки установка значений по умолчанию 
&НаКлиенте
Процедура БДДС_ВСЕПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//Элементы.БДДС.ТекущиеДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//1c-izhtc spawn )
		Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
			Элементы.БДДС.ТекущиеДанные.бит_БК_ВалютаДоговора = Объект.бит_БК_ВалютаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	//{ bit SVKushnirenko Bit 16.01.2017 #2671.дпн
	Если Копирование или НоваяСтрока Тогда
		
		пТекДанные = Элемент.ТекущиеДанные;
		
		пТекДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера = 
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		//ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_ВалютаДоговора") + 
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
		ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_Организация") + 
		ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_ФормаОплаты") + 
		ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_СуммаПредоплаты") +
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-26 (#2957)
		//ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_Курс")		   + 
		//ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "бит_БК_Кратность") 	   + 
		////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-26 (#2957)
		//ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, "ЦФО"); //перезаписываем все ограничения
		"";
		//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	КонецЕсли;
	//} bit SVKushnirenko Bit 16.01.2017 #2671.дпн
	
	//+Сенин С.В. 27.10.16 №2618
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-07-28 (#2868)
	//Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт и не ТекущиеДанные.бит_БК_ВалютаДоговора = Объект.бит_БК_ВалютаДокумента Тогда 
	Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт и не ТекущиеДанные.бит_БК_ВалютаДоговора = Объект.бит_БК_ВалютаДокумента 
			И (НоваяСтрока ИЛИ Копирование) Тогда
	//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-07-28 (#2868)
		
		ТекущиеДанные.бит_БК_ВалютаДоговора = Объект.бит_БК_ВалютаДокумента;
		ТекущиеДанные.бит_БК_Кратность 		= Объект.бит_БК_КратностьДокумента;
		ТекущиеДанные.бит_БК_Курс 			= Объект.бит_БК_КурсДокумента;
	КонецЕсли;
	//-Сенин С.В. 27.10.16 №2618
	
	//+СБ Пискунова 16.03.2017 #2691
	ИзменитьСБ_СуммуПредоплаты();
	//-СБ Пискунова 16.03.2017 #2691
	
КонецПроцедуры

// устанавливает зависимость флагов Техническая-Операционная
&НаКлиенте
Процедура бит_БК_ТехническаяЗаявкаПриИзменении(Элемент)
	Если Объект.бит_БК_ЗаявкаТехническая Тогда 
		Объект.бит_БК_ЗаявкаОбъединяющая = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура бит_БК_ОбъединяющаяЗаявкаПриИзменении(Элемент)
	Если Объект.бит_БК_ЗаявкаОбъединяющая Тогда 
		Объект.бит_БК_ЗаявкаТехническая = Ложь;
	КонецЕсли; 
КонецПроцедуры

//при установке статуса вручную
&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-06 (#2986)
	Если мТекущийСтатус = Статус Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-06 (#2986)
	
	Если (Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный ИЛИ
		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный  
		ИЛИ	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный) И
		НЕ (Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании") ИЛИ 
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-06 (#2986)
		//Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована"))	Тогда 
		//ПоказатьПредупреждение(Новый ОписаниеОповещения("СтатусПриИзмененииЗавершение", ЭтотОбъект), "Вручную можно установить статус <на согласовании> или <согласована>", 5);
	//ИначеЕсли Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт И
	//	НЕ (Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаВизировании") ИЛИ 
	//	Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Заключен"))	Тогда 
	//	ПоказатьПредупреждение(Новый ОписаниеОповещения("СтатусПриИзмененииЗавершение", ЭтотОбъект), "Вручную можно установить статус <на визировании> или <заключен>", 5);
		//Заменено на:
		Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована"))	
		ИЛИ
		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт И
		НЕ (Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаВизировании") ИЛИ 
		Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Заключен"))
		ИЛИ
		мТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Закрыта") 
		
	Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("СтатусПриИзмененииЗавершение", ЭтотОбъект), "Данное изменение статуса не разрешено", 5);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-06 (#2986)
	Иначе 
		мСтатусУстановленныйВручную = Статус;
		бит_БК_СтатусВручную = Истина;
	КонецЕсли;
	
	// 1c-izhtc spawn (
	////BIT Amerkulov 16-04-2015 ++
	//Если мТекущийСтатус <> ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована") И Статус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована") Тогда
	//	СообщитьОНаличииРазнесенияОборотов();	
	//КонецЕсли;
	////BIT Amerkulov 16-04-2015 ++
	// 1c-izhtc spawn )
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	бит_БК_СтатусВручную = Ложь;
	Статус = мТекущийСтатус;		
	
КонецПроцедуры

// 1c-izhtc spawn (

////BIT Amerkulov 16-04-2015 ++
//&НаСервере
//Процедура СообщитьОНаличииРазнесенияОборотов()
//	
//	Запрос = Новый Запрос("ВЫБРАТЬ
//	                      |	ПРЕДСТАВЛЕНИЕ(бит_БК_РазнесениеОборотов.Ссылка)
//	                      |ИЗ
//	                      |	Документ.бит_БК_РазнесениеОборотов КАК бит_БК_РазнесениеОборотов
//	                      |ГДЕ
//	                      |	бит_БК_РазнесениеОборотов.НомерЗаявки = &Ссылка");
//						  
//	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		Сообщить("К данной заявке введен документ: " + Выборка.СсылкаПредставление);	
//	КонецЦикла;
//	
//	
//КонецПроцедуры
////BIT Amerkulov 16-04-2015 ++

// 1c-izhtc spawn )

//заполнение списка доступных статусов при открытии и переключении ВидаОперации
&НаСервере
Процедура бит_ЗаполнитьСписокСтатусов()
	//Начало_бит_БК_Магомедов_28.11.2011 определяем список статусов
	СписокСтатусов = Новый Массив;
	Если Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан Тогда 
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Рабочая);
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный ИЛИ
		Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный ИЛИ
		Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный Тогда 
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_НаРассмотрении);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Согласована);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Закрыта);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_НачисленАккруал);
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда 
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Черновик);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_НаВизировании);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Заключен);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_Закрыта);
		СписокСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ФормаВвода_НачисленАккруал);
	КонецЕсли;
	Элементы.Статус.СписокВыбора.ЗагрузитьЗначения(СписокСтатусов);
КонецПроцедуры

//получает текущую строку ТЧ
&НаКлиенте
Функция ТекущаяСтрока()
	Возврат Элементы.БДДС.ТекущиеДанные;
КонецФункции

//			Действия с суммами
&НаКлиенте
Процедура БДДС_ВСЕСтавкаНДСПриИзменении(Элемент)
	//1c-izhtc spawn (
	// Ставка НДС больше не используется в ТЧ БДДС
	//ПересчитатьСуммы("СтавкаНДС", ТекущаяСтрока().ПолучитьИдентификатор());
	//1c-izhtc spawn )
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕСуммаПриИзменении(Элемент)
	ПересчитатьСуммы("СуммаСНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_СуммаВРамкахБюджетаСНДСПриИзменении(Элемент)
	//ПересчитатьСуммы("СуммаВРамкахБюджетаСНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_СуммаБезНДСПриИзменении(Элемент)
	ПересчитатьСуммы("СуммаБезНДС", ТекущаяСтрока().ПолучитьИдентификатор());
	
	//+СБ Пискунова 22.12.2016 #2691
	ИзменитьСБ_СуммуПредоплаты();
	//-СБ Пискунова 22.12.2016 #2691

КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_СуммаВРамкахБюджетаБезНДСПриИзменении(Элемент)
	//ПересчитатьСуммы("СуммаВРамкахБюджетаБезНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры

//{bit_SVKushnirenko 13.06.2017 #2735
//Возвразщает курсы из глобального модуля
//Параметры:
//парВалюта - ссылка на валюту, для которой запрашивается курс 
//парПериод - период, на который запрашивается курс
&НаСервереБезКонтекста
Функция ПолучитьКурсы(знач парВалюта, знач парПериод)

	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(парВалюта, парПериод);
КонецФункции // ПолучитьКурсы() }bit_SVKushnirenko 13.06.2017 #2735 

&НаКлиенте
Процедура БДДС_ВСЕбит_БК_ВалютаДоговораПриИзменении(Элемент)
	//{ bit_SVKushnirenko 13.01.2017 #2763
	//ИсходныйКод{
	//ПересчитатьСуммы("Валюта", ТекущаяСтрока().ПолучитьИдентификатор());
	//БИТ АКриштопов ++ 2482
	//ТекДанные = Элементы.БДДС.ТекущиеДанные.бит_БК_ВалютаДоговора;
	//Если Объект.бит_БК_ВалютаДокумента <> ТекДанные Тогда
	//	Объект.бит_БК_ВалютаДокумента = ТекДанные;
	//КонецЕсли;
	////БИТ АКриштопов --
	//}ИсходныйКод
	
	пТекСтрока = ТекущаяСтрока();
	Если пТекСтрока = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	пТекущаяВалюта = пТекСтрока.бит_БК_ВалютаДоговора;
	
	//{ bit SVKushnirenko Bit 13.06.2017 #2735
	пСтруктураКурса = ПолучитьКурсы(пТекущаяВалюта, ТекущаяДата()); //получать на текущую дату - требование М.Бузник
	
	пТекСтрока.бит_БК_Курс = пСтруктураКурса.Курс;
	пТекСтрока.бит_БК_Кратность = пСтруктураКурса.Кратность;
	
	Если Объект.бит_БК_ВалютаДокумента <> пТекущаяВалюта И пТекСтрока.НомерСтроки = 1 Тогда
		
		Объект.бит_БК_ВалютаДокумента = пТекущаяВалюта;
		Объект.бит_БК_КурсДокумента =  пСтруктураКурса.Курс; //устанавливаем значение курса в шапке, в противном случае, обновление валюты старого кода работае с ошибкой
		Объект.бит_БК_КратностьДокумента = пСтруктураКурса.Кратность;
	КонецЕсли;
	//} bit SVKushnirenko Bit 13.06.2017 #2735
	
	Если Объект.бит_БК_ВалютаДокумента <> пТекущаяВалюта Тогда
		
		Объект.бит_БК_ВалютаДокумента = пТекущаяВалюта;
	КонецЕсли;
	
	ПересчитатьСуммы("Валюта", пТекСтрока.ПолучитьИдентификатор());
	//} bit_SVKushnirenko 13.01.2017 #2763
	
	//{ bit SVKushnirenko Bit 13.01.2017 #2671.дпн
	СверкаИзмененийРеквизитовСтроки(Элементы.БДДС.ТекущиеДанные);
	//} bit SVKushnirenko Bit 13.01.2017 #2671.дпн
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_СуммаВВалютеБезНДСПриИзменении(Элемент)
	ПересчитатьСуммы("СуммаВВалютеБезНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_СуммаВВалютеСНДСПриИзменении(Элемент)
	ПересчитатьСуммы("СуммаВВалютеСНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_ЦенаБезНДСПриИзменении(Элемент)
	ПересчитатьСуммы("ЦенаБезНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_ЦенаСНДСПриИзменении(Элемент)
	ПересчитатьСуммы("ЦенаСНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_ЦенаВВалютеБезНДСПриИзменении(Элемент)
	ПересчитатьСуммы("ЦенаВВалютеБезНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕбит_БК_ЦенаВВалютеСНДСПриИзменении(Элемент)
	ПересчитатьСуммы("ЦенаВВалютеСНДС", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры
&НаКлиенте
Процедура БДДС_ВСЕКоличествоПриИзменении(Элемент)
	ПересчитатьСуммы("Количество", ТекущаяСтрока().ПолучитьИдентификатор());
КонецПроцедуры

&НаСервере
Функция ПересчитатьСуммы(ТочкаВхода, ИдентификаторСтроки, ТекРассчитыватьСуммуЗаРамками = Истина)
	ТекущаяСтрока = Объект.БДДС.НайтиПоИдентификатору(ИдентификаторСтроки);
	//БИТ АКриштопов 2482 ++
	Если ТекущаяСтрока.бит_БК_Кратность = 0 Тогда
		ТекущаяСтрока.бит_БК_Кратность = 1;
	КонецЕсли;
	Если ТекущаяСтрока.бит_БК_Курс = 0 Тогда
		ТекущаяСтрока.бит_БК_Курс = 1;
	КонецЕсли;	
	//БИТ АКриштопов 2482 --
	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ФормаВводаБюджета"));	
	ДокОбъект.ПересчитатьСуммы(ТочкаВхода, ТекущаяСтрока, ТекРассчитыватьСуммуЗаРамками);
	
	//{ bit_SVKushnirenko 20.12.2016 #2669
	//ИсходныйКод{
	//// BIT AMErkulov 29-12-2015 ++	
	////+Сундукова 28.03.2016
	//бит_ФормаВводаБюджетаВызовСервера.ОбновитьДанныеПоОстаткуБюджета(объект);
	////-Сундукова 28.03.2016
	//// BIT AMErkulov 29-12-2015 --
	//}ИсходныйКод
	
	бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(Объект);
	//} bit_SVKushnirenko 20.12.2016 #2669
КонецФункции

//Выбор заявки - отбор
&НаКлиенте
Процедура бит_БК_НомерЗаявкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("ВидОперации", фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный);
	ПараметрыФормы = Новый Структура("ТекущаяСтрока, Отбор", Объект.бит_БК_НомерЗаявки, Отбор);
	
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.ФормаВыбора", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//Валюта
&НаСервере
Процедура бит_БК_ИзменениеВалюты()
	
	//{ bit_SVKushnirenko 05.06.2017 #2735
	//ИсходныйКод{
	//СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Объект.Сценарий,Объект.бит_БК_ВалютаДокумента,Объект.Дата);
	//Объект.бит_БК_КурсДокумента      = СтрКурса.Курс;
	//Объект.бит_БК_КратностьДокумента = СтрКурса.Кратность;
	//}ИсходныйКод
	
	//Удаляем зависимость расчета курса от значений в курсах сценария по требованию Бузник и вводим зависимость от текущих курсов валют
	пСтруктураКурса = ПолучитьКурсы(Объект.бит_БК_ВалютаДокумента, Объект.Дата);
	Объект.бит_БК_КурсДокумента = пСтруктураКурса.Курс;
	Объект.бит_БК_КратностьДокумента = пСтруктураКурса.Кратность;
	//} bit_SVKushnirenko 05.06.2017 #2735
КонецПроцедуры

&НаКлиенте
Процедура бит_БК_ВалютаДокументаПриИзменении(Элемент)
	бит_БК_ВалютаДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура бит_БК_ВалютаДокументаПриИзмененииНаСервере()
	бит_БК_ИзменениеВалюты();
	
	//{ bit_SVKushnirenko 05.06.2017 #2735
	//ИсходныйКод{
	//бит_БК_УстановитьВалютуВСтроках();
	//}ИсходныйКод
	//убираем авто-изменение валюты в строках, т.к. это делается путем "копирования" значения, а валюта в шапке - это только шаблон заполнения новых строк
	//} bit_SVKushnirenko 05.06.2017 #2735
КонецПроцедуры

//{ bit_SVKushnirenko 05.06.2017 #2735
//ИсходныйКод{
//&НаСервере
//Функция бит_БК_УстановитьВалютуВСтроках()
//	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ФормаВводаБюджета"));	
//	ДокОбъект.бит_БК_УстановитьВалютуВСтроках();
//	ЗначениеВДанныеФормы(ДокОбъект, Объект);
//КонецФункции
//}ИсходныйКод
//Удалена неиспользуемая процедура
//} bit_SVKushnirenko 05.06.2017 #2735

&НаКлиенте
Процедура бит_ПериодНачалоПриИзменении(Элемент)
	Объект.ДатаНачалаПланирования  = Объект.бит_БК_ПериодНачало;
	ПериодПланирования.ДатаНачала  = Объект.бит_БК_ПериодНачало;
	мТекущаяДатаНачалаПланирования = Объект.бит_БК_ПериодНачало;
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюБДДСЗаполнитьКолонку(Команда)
	КолонкаИмя = Элементы.БДДС.ТекущийЭлемент.Имя;
	ПутьКДанным = СтрЗаменить(КолонкаИмя, "БДДС", "");
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-04 (#2873)
	СуммаПредоплатыИТОГО = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-04 (#2873)
	
	//{ bit_SVKushnirenko 02.06.2017 #2735
	//ИсходныйКод{
	//ТекущееЗначение = Элементы.БДДС.ТекущиеДанные[ПутьКДанным];
	//}ИсходныйКод
	
	пСтруктураЗаполнения = Новый Структура(ПутьКДанным);

	//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-07-28 (#2870)
	//Если ПутьКДанным = "бит_БК_ВалютаДоговора" или ПутьКДанным = "бит_БК_Курс" или ПутьКДанным = "бит_БК_Кратность"  Тогда  
	Если ПутьКДанным = "бит_БК_ВалютаДоговора" Тогда	
		пСтруктураЗаполнения = Новый Структура("бит_БК_ВалютаДоговора, бит_БК_Курс, бит_БК_Кратность"); 
	КонецЕсли;
	//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-07-28 (#2870)

	ЗаполнитьЗначенияСвойств(пСтруктураЗаполнения, Элементы.БДДС.ТекущиеДанные); 
	//} bit SVKushnirenko Bit 02.06.2017 #2735
	
	Для Каждого ТекСтрока Из Объект.БДДС Цикл
		
		//{ bit_SVKushnirenko 02.06.2017 #2735
		//ИсходныйКод{
		//ТекСтрока[ПутьКДанным] = ТекущееЗначение;
		//}ИсходныйКод
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, пСтруктураЗаполнения);
		//} bit_SVKushnirenko 02.06.2017 #2735
		
		// БИТ НАГолубева 29.03.2016 ++
		Если ПутьКДанным = "бит_СтавкаНДС" Тогда
			ПересчитатьСуммы("СтавкаНДС", ТекСтрока.ПолучитьИдентификатор());
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-27 (#2873)
	ИначеЕсли ПутьКДанным = "Количество" Тогда 
		ПересчитатьСуммы("Количество", ТекСтрока.ПолучитьИдентификатор())
	ИначеЕсли ПутьКДанным = "бит_БК_ЦенаВВалютеСНДС" Тогда 		
		ПересчитатьСуммы("ЦенаВВалютеСНДС", ТекСтрока.ПолучитьИдентификатор())
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-27 (#2873)	
			//{ bit SVKushnirenko Bit 25.04.2017 #2811
		ИначеЕсли ПутьКДанным = "СтатьяОборотов" Тогда 
			
			ОпределитьСценарийПоСтатьеОборотов(ТекСтрока, Объект.ВидОперации, фКэшЗначений);
			//} bit SVKushnirenko Bit 25.04.2017 #2811
			
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-04 (#2873)
		ИначеЕсли ПутьКДанным = "бит_БК_СуммаПредоплаты" Тогда 
			
			ТекСтрока.СБ_СуммаПредоплаты = (ТекСтрока.бит_БК_СуммаБезНДС*ТекСтрока.бит_БК_СуммаПредоплаты)/100;
			СуммаПредоплатыИТОГО = СуммаПредоплатыИТОГО + ТекСтрока.СБ_СуммаПредоплаты;
			
		ИначеЕсли ПутьКДанным = "бит_БК_ЦенаВВалютеБезНДС" Тогда 
			
			 ПересчитатьСуммы("ЦенаВВалютеБезНДС", ТекСтрока.ПолучитьИдентификатор());
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-04 (#2873)
		
		КонецЕсли;
		// БИТ НАГолубева 29.03.2016 --
	КонецЦикла;
	
	Если ПутьКДанным = "Сумма" Тогда
		ПересчитатьСуммыБДДС("СуммаСНДС");
		//ИначеЕсли ПутьКДанным = "бит_БК_СуммаВРамкахБюджетаСНДС" Тогда
		//	ПересчитатьСуммыБДДС("СуммаВРамкахБюджетаСНДС");
		//+Сундукова 29.03.2016 Заявка из реестра БК №110
	ИначеЕсли ПутьКДанным = "бит_БК_СуммаБезНДС" Тогда
		ПересчитатьСуммыБДДС("СуммаБезНДС");
		//-Сундукова 29.03.2016 Заявка из реестра БК №110
		//ИначеЕсли ПутьКДанным = "бит_БК_СуммаВРамкахБюджетаБезНДС" Тогда
		//	ПересчитатьСуммыБДДС("СуммаВРамкахБюджетаБезНДС");
		
		// БИТ НАГолубева 29.03.2016 ++
		//Эта процедура не пересчитывает сумму без НДС, заменено на код в цикле
		////1c-izhtc spawn (
		//ИначеЕсли ПутьКДанным =	"бит_СтавкаНДС"	 Тогда
		//	ПересчитатьСуммыБДДС("СтавкаНДС");
		// БИТ НАГолубева 29.03.2016 --
		
	ИначеЕсли ПутьКДанным = "СтатьяОборотов" Тогда
		//1c-izhtc spawn )
		ПересчитатьСуммыБДДС("СтавкаНДС");
	ИначеЕсли ПутьКДанным = "бит_БК_ВалютаДоговора" Тогда 
		ПересчитатьСуммыБДДС("Валюта");
	ИначеЕсли ПутьКДанным = "бит_БК_СуммаВВалютеБезНДС" Тогда
		ПересчитатьСуммыБДДС("СуммаВВалютеБезНДС");
	ИначеЕсли ПутьКДанным = "бит_БК_СуммаВВалютеСНДС" Тогда
		ПересчитатьСуммыБДДС("СуммаВВалютеСНДС");
	//{ bit SVKushnirenko Bit 14.06.2017 #2735
	ИначеЕсли ПутьКДанным = "бит_БК_Курс" Тогда
		
		//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-07-28 (#2870)
		//ПересчитатьСуммыБДДС("Курс");
		ПересчитатьСуммыБДДСБезСменыВалюты();
		//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-07-28 (#2870)
	
	ИначеЕсли ПутьКДанным = "бит_БК_Кратность" Тогда
		
		ПересчитатьСуммыБДДС("Кратность");
	//} bit SVKushnirenko Bit 14.06.2017 #2735
	КонецЕсли;
	
	//{ bit_SVKushnirenko 28.12.2016 #2671.2
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)	
	//Если Найти(Врег("бит_БК_ВалютаДоговора; бит_БК_Организация; бит_БК_ФормаОплаты; бит_БК_СуммаПредоплаты; ЦФО;"), Врег(ПутьКДанным)) <>  0  Тогда
	//Заменено на:
	Если Найти(Врег("бит_БК_ВалютаДоговора; бит_БК_Организация; бит_БК_ФормаОплаты; бит_БК_СуммаПредоплаты; ЦФО; бит_БК_Курс; бит_БК_Кратность"), Врег(ПутьКДанным)) <>  0  Тогда
		МассивСвязанныхПолеВалюты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("бит_БК_ВалютаДоговора;бит_БК_Курс;бит_БК_Кратность",";");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)		
		
		Для каждого пТекДанные Из Объект.БДДС Цикл  //запрет изменения измененных строк инициатором
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-26 (#2957)
			Если Найти(Врег("бит_БК_ВалютаДоговора; бит_БК_Курс; бит_БК_Кратность"), Врег(ПутьКДанным)) <>  0 Тогда 
				Для Каждого СвязанноеПоле Из МассивСвязанныхПолеВалюты Цикл 
					пТекДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера = СтрЗаменить(пТекДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера, СвязанноеПоле+";", "") + 
					ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, СвязанноеПоле);		
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-26 (#2957)
			
			пТекДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера = СтрЗаменить(пТекДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера, ПутьКДанным+";", "") + 
			ПодстрокаЗапретаИзмененияИнициатором(пТекДанные, ПутьКДанным); 
		КонецЦикла; 
		
		СинхронизироватьРеквизиты();	//на всякий случай, если изменился хоть один атрибут первой строки
	КонецЕсли;
	//} bit_SVKushnirenko 28.12.2016 #2671.2
	
	//{ bit_SVKushnirenko 25.04.2017 #2811
	ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС();
	//} bit SVKushnirenko Bit 25.04.2017 #2811
	
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-27 (#2873)
	Если ПутьКДанным = "бит_БК_СуммаПредоплаты" Тогда 
		Объект.СБ_СуммаПредоплатыИтого = СуммаПредоплатыИТОГО;	
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-27 (#2873)

КонецПроцедуры

&НаСервере
Функция ПересчитатьСуммыБДДС(ТочкаВхода, ТекРассчитыватьСуммуЗаРамками = Истина)
	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ФормаВводаБюджета"));	
	ДокОбъект.ПересчитатьСуммыБДДС(ТочкаВхода, ТекРассчитыватьСуммуЗаРамками);
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
КонецФункции

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(Неопределено, "Перед отправкой документ необходимо записать",5);
		Возврат;
	КонецЕсли;
	
	//ОК Калинин М. 140912 осуществлять проверку на то, сохранена ли заявка
	//Если не записан надо записать
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьСообщениеВопросЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда)), "Чтобы отправить письмо, сохраните заявку. Хотите сохранить сейчас?", РежимДиалогаВопрос.ДаНет, 10,,,КодВозвратаДиалога.Нет);
		Возврат;			
	КонецЕсли;
	//ОК Калинин М.
	
	ОтправитьСообщениеЗавершение(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Команда = ДополнительныеПараметры.Команда;
	
	КодВозврата = РезультатВопроса;
	Если КодВозврата = КодВозвратаДиалога.Нет ИЛИ КодВозврата = КодВозвратаДиалога.Таймаут Тогда 
		Возврат;
	КонецЕсли;
	Записать();			
	
	ОтправитьСообщениеЗавершение(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеЗавершение(Знач Команда)
	
	бит_ФормаВводаБюджетаКлиент.ОтправитьСообщениеOutlook(Объект.Ссылка, Команда.Имя);
	
КонецПроцедуры

// + БИТ AMerkulov 2014-06-24 /  Отправка формы OPEX		
&НаКлиенте
Процедура ОтправитьСообщениеOPEX(Команда)
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(Неопределено, "Перед отправкой документ необходимо записать",5);
		Возврат;
	КонецЕсли;
	
	//ОК Калинин М. 140912 осуществлять проверку на то, сохранена ли заявка
	//Если не записан надо записать
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьСообщениеOPEXВопросЗавершение", ЭтотОбъект), "Чтобы отправить письмо, сохраните заявку. Хотите сохранить сейчас?", РежимДиалогаВопрос.ДаНет, 10,,,КодВозвратаДиалога.Нет);
		Возврат;			
	КонецЕсли;
	//ОК Калинин М.
	
	ОтправитьСообщениеOPEXЗавершение();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеOPEXВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодВозврата = РезультатВопроса;
	Если КодВозврата = КодВозвратаДиалога.Нет ИЛИ КодВозврата = КодВозвратаДиалога.Таймаут Тогда 
		Возврат;
	КонецЕсли;
	Записать();			
	
	ОтправитьСообщениеOPEXЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеOPEXЗавершение()
	
	НастройкиДоставки = Новый Структура;
	бит_БК_Общий.ЗаполнитьНастройкиДоставки(НастройкиДоставки);
	
	Если НЕ бит_БК_Общий.ПодключениеКСерверуSMTP(НастройкиДоставки) Тогда 
		ПараметрыАутентификацииПользователя = бит_БК_ОбщийКлиент.ПолучитьПараметрыАутентификацииПользователя();
		Если ПараметрыАутентификацииПользователя = неопределено Тогда 
			Возврат;
		КонецЕсли;
		НастройкиДоставки.ПользовательSMTP = ПараметрыАутентификацииПользователя.ПользовательSMTP;
		НастройкиДоставки.ПарольSMTP = ПараметрыАутентификацииПользователя.ПарольSMTP;
	КонецЕсли;	
	
	Объект.ОК_ДатаПодачиНаСогласование = ТекущаяДата();
	бит_ФормаВводаБюджетаВызовСервера.ОтправитьСообщениеКлиент(Объект.Ссылка, НастройкиДоставки, Объект.бит_БК_Инициатор);
	
КонецПроцедуры
// + БИТ AMerkulov 2014-06-24 /   	

&НаКлиенте
Процедура ДействияФормыЗакрытиеОстатка(Команда)
	ЗакрытиеОстатка();
КонецПроцедуры

//Конец_БИТ_Магомедов.А.А_18.10.2011 

//ОК Ванюков К. +// // 2012-03-29
&НаСервере
Процедура ОК_ДополнитьДействияФормы()
	Элементы.БДДС.УстановитьДействие("ПередНачаломДобавления", "ОК_БДДС_ПередНачаломДобавления");
	//ОК Калинин М.П. 140812
	Элементы.БДДСбит_БК_Курс.УстановитьДействие("ПриИзменении", "БДДС_ВСЕбит_БК_КурсПриИзменении");
	//ОК Калинин М.П. 140812	
КонецПроцедуры

&НаКлиенте
Процедура ОК_БДДС_ПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	// Определение типа в колонке Объект
	
	Если не Копирование Тогда 
		
		Отказ 				= Истина;
		НовСтр				= Объект.БДДС.Добавить();
		//Если Элементы.БДДСАналитика_2.Заголовок = "Объект" Тогда 
		НовСтр.Аналитика_2	= ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка");
		//КонецЕсли;
		// заполнить валюту из настроек пользователя // 2012-03-29
		//1c-izhtc spawn (
		// Ставка НДС больше не используется в ТЧ БДДС
		//Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт 
		//	или Объект.ВидОперации	= фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный
		//	Тогда 
		//	НовСтр.СтавкаНДС= бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ОсновнаяСтавкаНДС");
		//КонецЕсли;
		//1c-izhtc spawn )
		
		//{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
		//+Сенин С.В. 21.10.16 №2671
		ТекущиеДанные = НовСтр;
		
		//Если ЗначениеЗаполнено(Объект.бит_БК_ПредпологаемыйКонтрагент) Тогда
		//	ТекущиеДанные.бит_БК_ПредпологаемыйКонтрагент = Объект.бит_БК_ПредпологаемыйКонтрагент;
		//КонецЕсли; 
		//Если ЗначениеЗаполнено(Объект.ОК_БК_ФормаОплаты) Тогда
		//	ТекущиеДанные.бит_БК_ФормаОплаты = Объект.ОК_БК_ФормаОплаты;
		//КонецЕсли; 
		//Если ЗначениеЗаполнено(Объект.ОК_РазмерПредоплаты) Тогда
		//	ТекущиеДанные.бит_БК_СуммаПредоплаты = Объект.ОК_РазмерПредоплаты;
		//КонецЕсли; 
		//
		//ТекущиеДанные.бит_БК_НуженДоговор = Объект.ОК_НеобходимостьДоговора;
		//ТекущиеДанные.бит_БК_Организация  = Объект.бит_БК_Организация;
		
		Если (ТекущиеДанные.бит_БК_Кратность = 0 или ТекущиеДанные.бит_БК_Курс = 0) Тогда
			ТекущиеДанные.бит_БК_Кратность	= 1;
			ТекущиеДанные.бит_БК_Курс		= 1;
		конецЕсли;
		
		Если (Объект.бит_БК_КратностьДокумента = 0 или Объект.бит_БК_КурсДокумента = 0) Тогда
			Объект.бит_БК_КратностьДокумента = 1;
			Объект.бит_БК_КурсДокумента		 = 1;
		конецЕсли;
		//-Сенин С.В. 21.10.16 №2671
		
		//- временно закоментирован, т.к. необходимость этого кода неизвестна (выясняется Бузник с 07.02.17 12:53)
		////+Сенин С.В. 27.10.16 №2618
		//Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт и не ТекущиеДанные.бит_БК_ВалютаДоговора = Объект.бит_БК_ВалютаДокумента Тогда 
		//	ТекущиеДанные.бит_БК_ВалютаДоговора = Объект.бит_БК_ВалютаДокумента;
		//	ТекущиеДанные.бит_БК_Кратность 		= Объект.бит_БК_КратностьДокумента;
		//	ТекущиеДанные.бит_БК_Курс 			= Объект.бит_БК_КурсДокумента;
		//КонецЕсли;
		////-Сенин С.В. 27.10.16 №2618
		//- временно закоментирован, т.к. необходимость этого кода неизвестна (выясняется Бузник с 07.02.17 12:53)
		//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	КонецЕсли;		
КонецПроцедуры

//ОК Ванюков К. -

//ОК Калинин М.П. 140812   //Пересчет бит_БК_СуммаБезНДС при изменении Курса 
&НаКлиенте
Функция РассчитатьНДС_(Сумма, СуммаВключаетНДС, ТекСтрока)
	//БИТ Соломина 20160128 ( /беру ставку НДС из тч, а не из статьи оборотов
	//СтавкаНДС = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ТекСтрока.СтатьяОборотов, "СтавкаНДС");
	СтавкаНДС = ТекСтрока.бит_СтавкаНДС;
	// )
	Если СуммаВключаетНДС Тогда 
		НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
	Иначе
		НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
	КонецЕсли;
	Возврат НДС;
КонецФункции

&НаКлиенте
Процедура БДДС_ВСЕбит_БК_КурсПриИзменении(Элемент)
	текущаяСтрока=ТекущаяСтрока();
	
	//исходный курс:
	_курс=текущаяСтрока.бит_БК_СуммаБезНДС/текущаяСтрока.бит_БК_СуммаВВалютеБезНДС;	
	текущаяСтрока.бит_БК_СуммаБезНДС=текущаяСтрока.бит_БК_СуммаВВалютеБезНДС*текущаяСтрока.бит_БК_Курс*текущаяСтрока.бит_БК_Кратность;
	//пропорционально:
	//текущаяСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС=текущаяСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС*текущаяСтрока.бит_БК_Курс*текущаяСтрока.бит_БК_Кратность/_курс;
	//текущаяСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС=текущаяСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС*текущаяСтрока.бит_БК_Курс*текущаяСтрока.бит_БК_Кратность/_курс;
	
	НДС = РассчитатьНДС_(текущаяСтрока.бит_БК_СуммаБезНДС, Ложь, текущаяСтрока);
	//1c-izhtc spawn (
	// НДС больше не используется в ТЧ БДДС
	//текущаяСтрока.НДС = НДС;
	//1c-izhtc spawn )
	текущаяСтрока.Сумма = текущаяСтрока.бит_БК_СуммаБезНДС + НДС;
	
	//НДС = РассчитатьНДС_(текущаяСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС, Ложь, текущаяСтрока);
	//текущаяСтрока.бит_БК_СуммаВРамкахБюджетаСНДС = текущаяСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС + НДС;
	//
	//НДС = РассчитатьНДС_(текущаяСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС, Ложь, текущаяСтрока);
	//текущаяСтрока.бит_БК_СуммаЗаРамкамиБюджетаСНДС = текущаяСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС + НДС;
	
	//{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//+Сенин С.В. 10.11.16 №2671 закомментировал, т.к. не все показатели пересчитываются
	//пересчеты "ПересчитатьСуммы("СуммаВВалютеБезНДС"" отрабатывают не верно, т.к. оставляют за константу рублевую сумму
	
	//{ bit_SVKushnirenko 05.06.2017 #2735
	//ИсходныйКод{
	//текущаяСтрока.бит_БК_ЦенаСНДС	   = текущаяСтрока.Сумма/текущаяСтрока.Количество;
	//текущаяСтрока.бит_БК_ЦенаБезНДС  = текущаяСтрока.бит_БК_СуммаБезНДС /текущаяСтрока.Количество;
	//}ИсходныйКод
	
	//Обрабатываем случай, когда количество еще не введено, но необходимо корректно заполнить и сумму и цену, которая в основных алгоритмах обнуляет цену (выполняется по аналогии)
	Если ТекущаяСтрока.Количество = 0 Тогда  
		
		ТекущаяСтрока.бит_БК_ЦенаСНДС = 0;
		ТекущаяСтрока.бит_БК_ЦенаБезНДС = 0;
	Иначе
		
		ТекущаяСтрока.бит_БК_ЦенаСНДС = ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество;
		ТекущаяСтрока.бит_БК_ЦенаБезНДС = ТекущаяСтрока.бит_БК_СуммаБезНДС / ТекущаяСтрока.Количество;
	КонецЕсли;
	//} bit_SVKushnirenko 05.06.2017 #2735
	
	//-Сенин С.В. 10.11.16 №2671
	//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
КонецПроцедуры  //БДДС_ВСЕбит_БК_КурсПриИзменении()

//ОК Калинин М.П. 140812

// + БИТ AMerkulov 2014-01-25 /  Универсальная заявка
&НаКлиенте
Процедура БДДС_ВСЕСтатьяОборотовПриИзменении(Элемент)
	
	ОпределитьСценарийПоСтатьеОборотов(Элементы.БДДС.ТекущиеДанные, Объект.ВидОперации, фКэшЗначений);
	//БИТ Соломина 20160128 ( /заполнять поле СтавкаНДС
	текущаяСтрока=ТекущаяСтрока();
	текущаяСтрока.бит_СтавкаНДС = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(текущаяСтрока.СтатьяОборотов, "СтавкаНДС");
	//БИТ Соломина )
	ПересчитатьСуммы("СтавкаНДС", ТекущаяСтрока().ПолучитьИдентификатор());
	//ОК Довбешка Т. 16.02.2017
	Если текущаяСтрока.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест") Тогда
		Элементы.БДДС.ПодчиненныеЭлементы.БДДСПроект.Видимость = Истина;
	КонецЕсли;
	//ОК

	//{ bit SVKushnirenko Bit 21.03.2017 #2759
	ДоступностьЦелиПриобретенияОборудования();
	//} bit SVKushnirenko Bit 21.03.2017 #2759

	//{ bit_SVKushnirenko 25.04.2017 #2811
	ПостроениеВидаОперацииНаОснованииДанныхСтатейТчБДДС();
	УправлениеПолемПроектНаФорме(ТекущаяСтрока.СтатьяОборотов);
	//} bit SVKushnirenko Bit 25.04.2017 #2811
КонецПроцедуры


//ОК+ Аверьянова 18.07.17 #AT-1555950#
//&НаКлиенте
//Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//	ПараметрыФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("ОК_КонтрагентБК",Истина));		
//	ОткрытьФорму("Справочник.Контрагенты.Форма.битФормаВыбораУправляемая", ПараметрыФормы, Элемент); 
//	
//КонецПроцедуры
//ОК-

&НаКлиенте
Процедура бит_БК_НомерЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ВыбранноеЗначение = Неопределено Тогда 
		Объект.бит_БК_НомерЗаявки = ВыбранноеЗначение;	
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-27 (#3045)
	УстановитьЗначениеАналитики1НаСервере(ВыбранноеЗначение);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-27 (#3045)
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-27 (#3045)
&НаСервере
Процедура УстановитьЗначениеАналитики1НаСервере(ВыбранноеЗначение)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого пСтрокаБДДС Из ДокументОбъект.БДДС Цикл 
		пСтрокаБДДС.Аналитика_1 = ВыбранноеЗначение;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-27 (#3045)

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьСценарийПоСтатьеОборотов(ТекущиеДанные, ВидОперации, фКэшЗначений)
	Если ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный 
		ИЛИ ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный
		ИЛИ ВидОперации = фКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
		// + БИТ AMerkulov 2014-08-13  
		ВидСтатьи = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СтатьяОборотов, "ВидСтатьи");
		Если ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность") Тогда
			ТекущиеДанные.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест");
		ИначеЕсли ВидСтатьи = ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка") Тогда
			ТекущиеДанные.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У");
		КонецЕсли;
		// - БИТ AMerkulov 2014-08-13  
		
	КонецЕсли;
КонецФункции



&НаКлиенте
Процедура БДДСбит_СтавкаНДСПриИзменении(Элемент)
	//БИТ Соломина (
	текущаяСтрока=ТекущаяСтрока();
	СтавкаНДС = текущаяСтрока.бит_СтавкаНДС;
	ПересчитатьСуммы("СтавкаНДС", ТекущаяСтрока().ПолучитьИдентификатор());
	//БИТ Соломина )
КонецПроцедуры

// BIT AMErkulov 29-12-2015 --


// BIT AMerkulov 18-02-2016 ++

&НаКлиенте
Процедура бит_КопированиеДанныхБюджета(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Необходимо записать документ.");	
		Возврат;
	КонецЕсли;
	
	
	ПараметрыФормы = Новый Структура("ФормаВвода", Объект.Ссылка);
	ОткрытьФорму("Обработка.бит_КопированиеДанныхБюджета.Форма.ФормаУправляемая", ПараметрыФормы,,,,, Новый ОписаниеОповещения("бит_КопированиеДанныхБюджетаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
	
	
КонецПроцедуры

&НаКлиенте
Процедура бит_КопированиеДанныхБюджетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		бит_КопированиеДанныхБюджетаЗавершениеНаСервере(Результат);
		
		//{ bit SVKushnirenko Bit 25.04.2017 #2811
		ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС();
		//} bit SVKushnirenko Bit 25.04.2017 #2811
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция бит_КопированиеДанныхБюджетаЗавершениеНаСервере(Результат)
	
	Если Результат.РежимЗагрузки = "Загрузка" Тогда
		Объект.БДДС.Очистить();
		Объект.ЗависимыеОбороты.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.СтрокиДляЗаполнения) Тогда
		СтрокиДляЗаполнения = ПолучитьИзВременногоХранилища(Результат.СтрокиДляЗаполнения);	
		
		Если ТипЗнч(СтрокиДляЗаполнения) = Тип("Массив") Тогда
			Для Каждого ТекСтрока Из СтрокиДляЗаполнения Цикл
				
				НоваяСтрока = Объект.БДДС.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.Период = ТекСтрока.ПериодДляЗаполнения;
				
				НоваяСтрока.Количество 				= ТекСтрока.КоличествоДляЗаполнения;
				НоваяСтрока.бит_БК_СуммаБезНДС	   	= ТекСтрока.СуммаСценарийВВалютеДокумента;
				НоваяСтрока.бит_СтавкаНДС  			= НоваяСтрока.СтатьяОборотов.СтавкаНДС;
				
				//+Сенин С.В. 30.08.16 №2618
				НоваяСтрока.бит_БК_ВалютаДоговора = Объект.бит_БК_ВалютаДокумента;
				НоваяСтрока.бит_БК_Кратность = ?(ЗначениеЗаполнено(Объект.бит_БК_КратностьДокумента),Объект.бит_БК_КратностьДокумента,1);
				ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_ФормаВводаБюджета"));
				ДокОбъект.ПересчитатьСуммы("СуммаБезНДС", НоваяСтрока, Истина);
				//+Сенин С.В. 30.08.16 №2618
				
				НоваяСтрока.бит_БК_ЦенаБезНДС = ?(НоваяСтрока.Количество = 0,0,НоваяСтрока.бит_БК_СуммаБезНДС/НоваяСтрока.Количество);
				НоваяСтрока.бит_БК_ЦенаВВалютеБезНДС = ?(НоваяСтрока.Количество = 0,0,НоваяСтрока.бит_БК_СуммаВВалютеБезНДС/НоваяСтрока.Количество);
				
				НДС = РассчитатьНДС(НоваяСтрока.бит_БК_СуммаБезНДС, Ложь, НоваяСтрока);
				//1c-izhtc spawn (
				// НДС больше не используется в ТЧ БДДС
				//НоваяСтрока.НДС = НДС;
				//1c-izhtc spawn )
				НоваяСтрока.Сумма = НоваяСтрока.бит_БК_СуммаБезНДС + НДС;
				
				//НДС = РассчитатьНДС(НоваяСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС, Ложь, НоваяСтрока);
				//НоваяСтрока.бит_БК_СуммаВРамкахБюджетаСНДС = НоваяСтрока.бит_БК_СуммаВРамкахБюджетаБезНДС + НДС;
				
				//НДС = РассчитатьНДС(НоваяСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС, Ложь, НоваяСтрока);
				//НоваяСтрока.бит_БК_СуммаЗаРамкамиБюджетаСНДС = НоваяСтрока.бит_БК_СуммаЗаРамкамиБюджетаБезНДС + НДС;
				
				НДС = РассчитатьНДС(НоваяСтрока.бит_БК_СуммаВВалютеБезНДС, Ложь, НоваяСтрока);
				НоваяСтрока.бит_БК_СуммаВВалютеСНДС = НоваяСтрока.бит_БК_СуммаВВалютеБезНДС + НДС;
				
				НоваяСтрока.бит_БК_ЦенаСНДС = ?(НоваяСтрока.Количество = 0,0,НоваяСтрока.Сумма/НоваяСтрока.Количество);
				НоваяСтрока.бит_БК_ЦенаВВалютеСНДС = ?(НоваяСтрока.Количество = 0,0,НоваяСтрока.бит_БК_СуммаВВалютеСНДС/НоваяСтрока.Количество);
				
			КонецЦикла;
			
			//{ bit_SVKushnirenko 20.12.2016 #2669
			//ИсходныйКод{
			////{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
			////+Сундукова 28.03.2016
			//бит_ФормаВводаБюджетаВызовСервера.ОбновитьДанныеПоОстаткуБюджета(объект);
			////-Сундукова 28.03.2016
			////} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
			//}ИсходныйКод
			
			бит_БК_Общий.ЗаполнитьОстаткиБюджетаИПризнакиБюджетногоКонтроля(Объект);
			//} bit_SVKushnirenko 20.12.2016 #2669
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция РассчитатьНДС(Сумма, СуммаВключаетНДС, ТекСтрока)
	//БИТ Соломина 20160128 ( /ставку ндс берем из тч, а не из статьи оборотов
	Если СуммаВключаетНДС Тогда 
		НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.бит_СтавкаНДС));
	Иначе
		НДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Сумма, Истина, Ложь, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтрока.бит_СтавкаНДС));
	КонецЕсли;
	Возврат НДС;
	//БИТ )
КонецФункции

// BIT AMerkulov 18-02-2016 --



//БИТ Соломина (
&НаКлиенте
Процедура КомандаОтчетПоОплате(Команда)
	
	УсловияОтбора  = Новый Структура("ТекДок", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", УсловияОтбора, Истина);
	ОткрытьФорму("Отчет.бит_ОтчетПоОплате.Форма.ФормаОтчета", ПараметрыФормы); 
	
КонецПроцедуры

//БИТ АКриштопов 03032016 -->>
&НаСервере
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3065)
//Процедура БИТ_СоздатьЗаявкиРасходованияДСНаСервере()
//Заменено на:	
Функция БИТ_СоздатьЗаявкиРасходованияДСНаСервере()
	
	Возврат ОК_ОбщегоНазначения.СоздатьЗаявкиРасходованияДСНаСервере(Объект.Ссылка);
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3065)
	// 1c-izhtc ChuckNorris 19.03.2016 (
	ДокЗаявка = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
	бит_КазначействоКлиентСервер.ПроверитьИмеющиесяЗаявкиПоОснованию(Объект.Ссылка,ДокЗаявка.Метаданные().Имя,ДокЗаявка,объект);
	// 1c-izhtc ChuckNorris 19.03.2016 )
	
	ЗапросТЧ = Новый Запрос;
	ЗапросТЧ.Текст = 
	"ВЫБРАТЬ
	|	бит_СоответствияАналитик.ПраваяАналитика_1 КАК СтатьяОборотов,
	|	бит_ФормаВводаБюджетаБДДС.ЦФО КАК ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.Контрагент КАК Контрагент,
	|	бит_ФормаВводаБюджетаБДДС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	бит_ФормаВводаБюджетаБДДС.Проект КАК Проект,
	|	бит_ФормаВводаБюджетаБДДС.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	бит_ФормаВводаБюджетаБДДС.БанковскийСчет КАК БанковскийСчет,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_1 КАК Аналитика_1,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2 КАК Аналитика_2,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_3 КАК Аналитика_3,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_4 КАК Аналитика_4,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_5 КАК Аналитика_5,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_6 КАК Аналитика_6,
	//|	бит_ФормаВводаБюджетаБДДС.Аналитика_7 КАК Аналитика_7,
	|	СУММА(бит_ФормаВводаБюджетаБДДС.Количество) КАК Количество,
	|	СУММА(бит_ФормаВводаБюджетаБДДС.Норма) КАК Норма,
	|	СУММА(бит_ФормаВводаБюджетаБДДС.Сумма) КАК Сумма,
	|   СУММА(Естьnull(бит_ФормаВводаБюджетаБДДС.бит_БК_СуммаБезНДС,0)) как бит_БК_СуммаБезНДС,
	|	бит_ФормаВводаБюджетаБДДС.бит_СтавкаНДС,
	|	СУММА(бит_ФормаВводаБюджетаБДДС.БИТ_СуммаСверхБюджета) КАК СуммаСверхБюджета
	|ИЗ
	|	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствияАналитик КАК бит_СоответствияАналитик
	|		ПО бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = бит_СоответствияАналитик.ЛеваяАналитика_1
	|ГДЕ
	|	бит_ФормаВводаБюджетаБДДС.Ссылка = &Ссылка
	|	И бит_СоответствияАналитик.ВидСоответствия = &ВидСоответствия
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ФормаВводаБюджетаБДДС.ЦФО,
	|	бит_ФормаВводаБюджетаБДДС.Контрагент,
	|	бит_ФормаВводаБюджетаБДДС.ДоговорКонтрагента,
	|	бит_ФормаВводаБюджетаБДДС.Проект,
	|	бит_ФормаВводаБюджетаБДДС.НоменклатурнаяГруппа,
	|	бит_ФормаВводаБюджетаБДДС.БанковскийСчет,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_1,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_2,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_3,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_4,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_5,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_6,
	|	бит_ФормаВводаБюджетаБДДС.Аналитика_7,
	|	бит_ФормаВводаБюджетаБДДС.Количество,
	|	бит_ФормаВводаБюджетаБДДС.Норма,
	|	бит_СоответствияАналитик.ПраваяАналитика_1,
	|	бит_ФормаВводаБюджетаБДДС.бит_СтавкаНДС";
	
	ЗапросТЧ.УстановитьПараметр("ВидСоответствия", Справочники.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС);
	ЗапросТЧ.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапросаТЧ = ЗапросТЧ.Выполнить().Выгрузить();
	РезультатЗапросаБезОбъектов = РезультатЗапросаТЧ.скопировать();
	РезультатЗапросаБезОбъектов.Свернуть("СтатьяОборотов,ЦФО,Проект,НоменклатурнаяГруппа,БанковскийСчет,Аналитика_1"
	,"Количество,Норма,Сумма,бит_БК_СуммаБезНДС,СуммаСверхБюджета"); 
	Для Каждого Стр Из РезультатЗапросаБезОбъектов Цикл
		ДокЗаявка = Документы.бит_ЗаявкаНаРасходованиеСредств.СоздатьДокумент();
		
		ДокЗаявка.ДокументОснование = Объект.Ссылка;
		Контракт = Объект.Ссылка.НастройкаФормы = Справочники.бит_НастройкиФормВводаБюджета.Контракт;
		
		ДокЗаявка.Дата 					= ТекущаяДата();
		ДокЗаявка.Сценарий 				= Справочники.СценарииПланирования.НайтиПоКоду("ЭУ0000002");
		ДокЗаявка.ДатаРасхода 			= бит_Общий.СледующаяРабочаяДата(ДокЗаявка.дата);			
		ДокЗаявка.СверхБюджета			= ?(стр.СуммаСверхБюджета>0,истина,ложь);		
		ДокЗаявка.Контрагент 			= ?(Контракт,Объект.контрагент,Неопределено);
		ДокЗаявка.ДоговорКонтрагента 	= ?(Контракт,Объект.ДоговорКонтрагента,Неопределено);
		ДокЗаявка.СБ_ПрофильРазноски 	= ?(Контракт,Объект.ДоговорКонтрагента.СБ_ПрофильРазноски,Неопределено);			
		ДокЗаявка.Организация 			= ?(Контракт,Объект.ДоговорКонтрагента.Организация,Объект.бит_БК_Организация);			
		ДокЗаявка.СБ_Инициатор 			= Объект.бит_БК_Инициатор;				
		ДокЗаявка.ВидОперации 			= Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ОплатаПоставщику;
		ДокЗаявка.ФормаОплаты 			= Перечисления.бит_ВидыДенежныхСредств.Безналичные;
		ДокЗаявка.ТипЗаявки 			= Перечисления.бит_ТипыЗаявокНаРасходованиеСредств.Плановая;
		ДокЗаявка.Важность 				= Перечисления.бит_Важность.Средняя; 
		ДокЗаявка.СуммаВключаетНДС 		= Истина;
		ДокЗаявка.ВалютаДокумента		= справочники.Валюты.НайтиПоКоду("643");
		ДокЗаявка.КурсДокумента 		= 1;
		ДокЗаявка.КратностьДокумента 	= 1;
		ДокЗаявка.Исполнитель 			= бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		ДокЗаявка.Ответственный 		= ДокЗаявка.Исполнитель;
		ДокЗаявка.Аналитика_1 			= Стр.Аналитика_1; // № Заявки, ссылка на Форму ввода бюджета
		ДокЗаявка.ЦФО 					= Стр.ЦФО;				
		ДокЗаявка.СтатьяОборотов 		= Стр.СтатьяОборотов;
		ДокЗаявка.Проект 				= стр.Проект;
		
		
		ОтборСтрок = новый Структура;
		ОтборСтрок.Вставить("СтатьяОборотов",стр.СтатьяОборотов);
		ОтборСтрок.Вставить("Аналитика_1",стр.Аналитика_1);
		ОтборСтрок.Вставить("ЦФО",стр.ЦФО);
		Если Контракт тогда
			ОтборСтрок.Вставить("Проект",стр.Проект);
		КонецЕсли;
		ТЗДляТЧ = РезультатЗапросаТЧ.скопировать(ОтборСтрок);
		Для каждого СтрДляТЧ из ТЗДляТЧ цикл 
			НоваяСтр 					= ДокЗаявка.Распределение.Добавить();
			НоваяСтр.ЦФО 				= СтрДляТЧ.ЦФО;				
			НоваяСтр.Проект 			= ?(Контракт,СтрДляТЧ.Проект,Неопределено);
			НоваяСтр.СтатьяОборотов 	= СтрДляТЧ.СтатьяОборотов;		
			НоваяСтр.ДоговорКонтрагента = СтрДляТЧ.ДоговорКонтрагента;
			НоваяСтр.Аналитика_1 		= Объект.Ссылка; // № Заявки, ссылка на Форму ввода бюджета
			НоваяСтр.Аналитика_2 		= СтрДляТЧ.Аналитика_2; // Объект строительства
			НоваяСтр.СтавкаНДС 			= ?(ЗначениеЗаполнено(СтрДляТЧ.бит_СтавкаНДС),СтрДляТЧ.бит_СтавкаНДС,Перечисления.СтавкиНДС.НДС18);
			СтавкаНДСЧисло 				= бит_БухгалтерияСервер.ПолучитьСтавкуНДС(НоваяСтр.СтавкаНДС);				
			НоваяСтр.СуммаБезНДС        = СтрДляТЧ.бит_БК_СуммаБезНДС;
			НоваяСтр.Сумма 				= НоваяСтр.СуммаБезНДС/100*(100 + СтавкаНДСЧисло);
			НоваяСтр.НДС  				= бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(НоваяСтр.Сумма,Истина,Истина,СтавкаНДСЧисло);
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-11-08 (#3121)
			Если ДокЗаявка.Дата >= Дата('20190101') Тогда 
				Если НоваяСтр.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18") Тогда 
					НоваяСтр.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
				ИначеЕсли НоваяСтр.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
					НоваяСтр.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120");
				КонецЕсли;
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-11-08 (#3121)
			
		КонецЦикла;
		
		ДокЗаявка.Сумма 					= ДокЗаявка.Распределение.итог("Сумма");
		ДокЗаявка.СуммаВзаиморасчеты 		= ДокЗаявка.Сумма;
		ДокЗаявка.СуммаРегл 				= ДокЗаявка.Сумма; 
		ДокЗаявка.СуммаУпр 					= ДокЗаявка.Сумма; 
		ДокЗаявка.СуммаДокумента 			= ДокЗаявка.Сумма; 
		ДокЗаявка.НДС 						= ДокЗаявка.Распределение.итог("НДС");
		ДокЗаявка.НДСВзаиморасчеты 			= ДокЗаявка.НДС;
		ДокЗаявка.НДСУпр 					= ДокЗаявка.НДС;
		ДокЗаявка.НДСРегл 					= ДокЗаявка.НДС;
		ДокЗаявка.НазначениеПлатежа 		= "Оплата по договору №"+ДокЗаявка.ДоговорКонтрагента.Номер +" по счет № , в т.ч. НДС " + ДокЗаявка.НДС;
		ДокЗаявка.НазначениеПлатежаУпр		= ДокЗаявка.НазначениеПлатежа;
		
		ДокЗаявка.Аналитика_2 			= ДокЗаявка.Распределение.получить(0).Аналитика_2; // Объект строительства		
		ДокЗаявка.СтавкаНДС 			= ДокЗаявка.Распределение.получить(0).СтавкаНДС; 
		
		ДокЗаявка.Записать();
		ДокЗаявка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "На основании создан документ " + ДокЗаявка;
		Сообщение.Сообщить();
	КонецЦикла;
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3065)
//КонецПроцедуры
//Заменено на:
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3065)

&НаСервере
Процедура СформироватьНазначениеПлатежа(ДанныеШапки, ДокОб)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Предмет", 		ПредметОплаты(ДанныеШапки.СтатьяОборотов, ДанныеШапки.СтатьяОборотов.ВидСтатьи));
	СтруктураПараметров.Вставить("ВидДокумента", 	"Акт");//ВыборкаДокументРазнесения.НазначениеПлатежаВидДокумента);
	СтруктураПараметров.Вставить("НомерДокумента",	ДанныеШапки.Номер);
	СтруктураПараметров.Вставить("ДатаДокумента",	ДанныеШапки.Дата);
	
	СтруктураПараметров.Вставить("СтавкаНДС",		Перечисления.СтавкиНДС.НДС18);
	СтруктураПараметров.Вставить("СуммаНДС",		Формат(ДокОб.Распределение.Итог("НДС"),"ЧДЦ=2"));
	
	ДокОб.НазначениеПлатежа=ТекстНазначенияПлатежа(СтруктураПараметров); 
	ДокОб.НазначениеПлатежаУпр=ТекстНазначенияПлатежа(СтруктураПараметров);	
	
	
КонецПроцедуры

&НаСервере
Функция ПредметОплаты(СтатьяОборотов, ВидСтатьи)
	
	ЗначениеПоУмолчанию = "";
	
	Если Не ЗначениеЗаполнено(СтатьяОборотов) Тогда
		Возврат ЗначениеПоУмолчанию;	
	КонецЕсли; 
	
	ОперативнаяДеятельность 	= ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.Выручка");
	ИнвестиционнаяДеятельность 	= ПредопределенноеЗначение("Справочник.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность");
	
	Если ВидСтатьи = ОперативнаяДеятельность Тогда
		Возврат "услуги";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗданий") Тогда	
		Возврат "здания";
	ИначеЕсли СтатьяОборотов = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СтатьяОборотов_ПриобретениеЗемли") Тогда	
		Возврат "землю";
	ИначеЕсли СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокСтатейОборотов_ПриобритениеОборудования").НайтиПоЗначению(СтатьяОборотов) <> Неопределено Тогда	
		Возврат "оборудование";
	ИначеЕсли ВидСтатьи = ИнвестиционнаяДеятельность Тогда
		Возврат "услуги";
	Иначе 
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли; 
	
КонецФункции // ()

&НаСервере
Функция ТекстНазначенияПлатежа(Параметры)
	
	Шаблон = "Оплата за %1 по %2 № %3 от %4, в т.ч. НДС %5.";
	
	Результат = СтрЗаменить(Шаблон, 	"%1", Параметры.Предмет);
	Результат = СтрЗаменить(Результат, 	"%2", Параметры.ВидДокумента);
	Результат = СтрЗаменить(Результат, 	"%3", Параметры.НомерДокумента);
	Результат = СтрЗаменить(Результат, 	"%4", Формат(Параметры.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	//10.12.14
	Если Параметры.СтавкаНДС=ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") тогда
		Результат = СтрЗаменить(Результат, 	", в т.ч. НДС %5.", " без НДС");
	Иначе
		Результат = СтрЗаменить(Результат, 	"%5", Параметры.СуммаНДС);
	КонецЕсли;
	Возврат Результат;	
	
КонецФункции // ()

&НаКлиенте
Процедура БИТ_СоздатьЗаявкиРасходованияДС(Команда)
	//{ bit_SVKushnirenko 28.12.2016 #2671.1
	СинхронизироватьРеквизиты(); //безусловная синхронизация реквизитов из ТЧ	
	//} bit_SVKushnirenko 28.12.2016 #2671.1
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3065)
	//БИТ_СоздатьЗаявкиРасходованияДСНаСервере();	
	//Заменено на:
	стрРезультат = БИТ_СоздатьЗаявкиРасходованияДСНаСервере();
	Для Каждого пСозданныйДокумент ИЗ стрРезультат.СозданныеДокументы Цикл 
		пТекст = НСтр("ru = 'На основании создан документ %1'");
		пТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекст,пСозданныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекст,пСозданныйДокумент);
	КонецЦикла;
	
	Если Не ПустаяСтрока(стрРезультат.Ошибки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(стрРезультат.Ошибки);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3065)
КонецПроцедуры

&НаКлиенте
Процедура БДДСПриИзменении(Элемент)
	
	//{ bit SVKushnirenko Bit 16.01.2017 #2671.дпн
	пРешениеОНеобходимостиДоговора = Объект.БДДС.Итог("бит_БК_СуммаБезНДС") > 100000;
	Если пРешениеОНеобходимостиДоговора Тогда
		
		Объект.ОК_НеобходимостьДоговора = пРешениеОНеобходимостиДоговора; //безусловная необходимость договора
		Для каждого пСтрокаДокумента Из Объект.БДДС Цикл
			
			пСтрокаДокумента.бит_БК_НуженДоговор = пРешениеОНеобходимостиДоговора; //Всегда Истина, но уже так для праведности
		КонецЦикла; 
		УстановитьДоступностьНеобходимостиДоговора()
	КонецЕсли;
	//} bit SVKushnirenko Bit 16.01.2017 #2671.дпн
	
	
	//{ bit_SVKushnirenko 09.02.2017 #2671
	//ИсходныйКод{
	//БДДСПриИзмененииНаСервере();
	//}ИсходныйКод
	//Удален неоптимальный вызов, заменен на адекватный без вызова сервера
	
	//+СБ Пискунова 16.03.2017 #2691
	ИзменитьСБ_СуммуПредоплаты();
	//-СБ Пискунова 16.03.2017 #2691
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-23 (#3065)
	//Если Объект.БДДС.Количество() > 1 Тогда		
	//	
	//	Элементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Истина;
	//Иначе
	//	
	//	Элементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Ложь;
	//КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-23 (#3065)
	//} bit_SVKushnirenko 09.02.2017 #2671
КонецПроцедуры

//{ bit_SVKushnirenko 09.02.2017 #2671
//ИсходныйКод{
//&НаСервере
//Процедура БДДСПриИзмененииНаСервере()
//	Если Объект.БДДС.Количество() > 1 Тогда		
//		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Истина;
//	Иначе
//		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.БИТ_СоздатьЗаявкиРасходованияДС.Доступность = Ложь;
//	КонецЕсли;
//КонецПроцедуры
//}ИсходныйКод
//Удалена затратная бессмысленная процедура сервера, вызываемая из клиента
//} bit_SVKushnirenko 09.02.2017 #2671

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-28 (#2873)
	Если Не ЗначениеЗаполнено(бит_уп_Сервер.ПолучитьАлгоритмВизирования(Объект.Ссылка)) ИЛИ 
		 бит_БК_Общий.РеквизитыДляМуршрутовВидимы(Объект.Ссылка) 
	Тогда 
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-28 (#2873)
	
	Структура = бит_БК_Общий.ПолучитьСпискиБюджетныхКонтролеров();
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	ИнициаторПользователя = Справочники.бит_БК_Инициаторы.НайтиПоРеквизиту("Пользователь",ТекПользователь);
	ФинансовыйКонтролер = Структура.Универсальный.найтиПоЗначению(ИнициаторПользователя);
	
	//Признак того что запись производится из тонкого или web клиента
	ТекущийОбъект.бит_БК_WEBКлиент = Истина;               	
	//Обновляем перечень виз в регистре если их нет
	//БИТ АКриштопов 13042016 ++ Передавались некорректные данные для отбора алгоритмов визирования
	СтруктураОтборДок = Новый Структура("Объект",ТекущийОбъект.Ссылка);
	СтруктураОтбор = Новый Структура("ЦФО",ТекущийОбъект.ЦФО);
	//БИТ АКриштопов 13042016 --
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтборДок);
	Если НаборЗаписей.Количество() = 0 Тогда 
		бит_Визирование.ОбновитьПереченьВиз(ТекущийОбъект.Ссылка,ТекущийОбъект.Дата,СтруктураОтбор);
	КонецЕсли;
	
	//устанавливаем визу фин контролера
	Виза = Справочники.бит_Визы.бит_БК_ФинКонтролер;
	СтруктураОтбор = Новый Структура("Объект,Виза",ТекущийОбъект.Ссылка,Виза);
	НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	Если Не НаборЗаписей.Количество() = 0 Тогда
		Если НЕ ЗначениеЗаполнено(НаборЗаписей[0].ФизическоеЛицо) Тогда 
			НаборЗаписей[0].ФизическоеЛицо = ФинансовыйКонтролер;
		КонецЕсли;
	Иначе
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Виза",Виза);
		СтруктураПараметров.Вставить("ДатаЗаполнения", ТекущаяДата());
		СтруктураПараметров.Вставить("ВремяНаУстановку",Виза.ВремяНаУстановку);
		СтруктураПараметров.Вставить("ОбъектСвязи", ФинансовыйКонтролер);
		СтруктураПараметров.Вставить("СтруктурноеПодразделение",Неопределено);
		
		бит_Визирование.ДобавитьВизу(НаборЗаписей,ТекущийОбъект.Ссылка,СтруктураПараметров)
	КонецЕсли;
	Если НаборЗаписей.Модифицированность() Тогда 
		НаборЗаписей.Записать();
	КонецЕсли;
	
	//Убираем руководителя, если он не заполнен. //БИТ АКриштопов 2482
	//Виза = Справочники.бит_Визы.бит_БК_РуководительИнициатора;
	//СтруктураОтбор = Новый Структура("Объект,Виза",ТекущийОбъект.Ссылка,Виза);
	//НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
	//Если Не НаборЗаписей.Количество() = 0 Тогда
	//	Если НЕ ЗначениеЗаполнено(НаборЗаписей[0].ФизическоеЛицо) Тогда 
	//		НаборЗаписей.очистить();
	//	КонецЕсли;		
	//КонецЕсли;	
	//
	//Если НаборЗаписей.Модифицированность() Тогда 
	//	НаборЗаписей.Записать();
	//КонецЕсли;
	
	
КонецПроцедуры

//bit_SVKushnirenko 27.12.2016 #2671.1
// Выполняет получение значения ОК_ОЦР без преобразования контекста в объект
&НаСервереБезКонтекста
Функция ЗаполнитьОЦР(парЦФО, парСтатьяОборотов, парАналитика_2)
	
	Возврат Документы.бит_ФормаВводаБюджета.ЗаполнитьОЦР(парЦФО, парСтатьяОборотов, парАналитика_2);
КонецФункции // ЗаполнитьОЦР()

&НаКлиенте
Процедура БДДСЦФОПриИзменении(Элемент)
	//{ bit_SVKushnirenko 28.12.2016 #2671.1
	//ИсходныйКод{
	//ТекДанные = Элементы.БДДС.ТекущиеДанные.ЦФО;
	//Объект.бит_БК_ЦФО = ТекДанные;
	//}ИсходныйКод
	//дублирование синхронизации - удалено
	//} bit_SVKushnirenko 28.12.2016 #2671.1
	
	
	//{ bit_SVKushnirenko 27.12.2016 #2671.1
	//ИсходныйКод{
	//ВыполнитьПроцедуруМодуля("ЗаполнитьОЦР()");
	//}ИсходныйКод
	
	пБДДС = Объект.БДДС;
	Если пБДДС.Количество() <>  0 Тогда
		
		Объект.ОК_ОЦР = ЗаполнитьОЦР(Объект.бит_БК_ЦФО, пБДДС[0].СтатьяОборотов, пБДДС[0].Аналитика_2);
	КонецЕсли;
	
	СверкаИзмененийРеквизитовСтроки(Элементы.БДДС.ТекущиеДанные);
	//} bit_SVKushnirenko 27.12.2016 #2671.1
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	//БИТ АКриштопов ++ №2482
	Попытка
		ЭтотОбъект.РазблокироватьДанныеФормыДляРедактирования();
	Исключение
		
	КонецПопытки;
	//БИТ АКриштопов -- №2482
КонецПроцедуры

&НаСервере 
Процедура ВыполнитьПроцедуруМодуля(имяПроцедуры,параметры=неопределено)	
	ДокументОбъект = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект."+строка(объект.Ссылка.Метаданные().Имя)));
	выполнить("ДокументОбъект."+имяПроцедуры);
	ЗначениеВДанныеФормы(ДокументОбъект,Объект);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-03 (#3393)
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ЗакрытьЗаявку")
	   И ДокументОбъект.ДополнительныеСвойства.ЗакрытьЗаявку
	Тогда 
		фКэшЗначений.Вставить("ЗакрытьЗаявку", Истина);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-03 (#3393)
	//Модифицированность=истина;  
	
	//БИТ НАГолубева 25.02.2016 ++
	//В проведенном документе остатки по бюджету не пересчитываем.
	//Если НЕ Объект.Проведен Тогда
	// BIT AMErkulov 29-12-2015 ++
	//+Сундукова 28.03.2016
	//бит_ФормаВводаБюджетаВызовСервера.ОбновитьДанныеПоОстаткуБюджета(объект);
	//-Сундукова 28.03.2016
	
	// BIT AMErkulov 29-12-2015 --
	//КонецЕсли;
	//БИТ НАГолубева 25.02.2016 ++
	
КонецПроцедуры

&НаКлиенте
Процедура БДДСбит_БК_СуммаПредоплатыПриИзменении(Элемент)
	//{ bit_SVKushnirenko 28.12.2016 #2671.1
	//ИсходныйКод{
	//ТекДанные = Элементы.БДДС.ТекущиеДанные.бит_БК_СуммаПредоплаты;
	//Если Не ТекДанные = Объект.ОК_РазмерПредоплаты Тогда //БИТ АКриштопов ++2482
	//	Объект.ОК_РазмерПредоплаты = ТекДанные;
	//КонецЕсли;
	//}ИсходныйКод
	//дублирует код синхронизации при записи
	//} bit_SVKushnirenko 28.12.2016 #2671.1
	
	//{ bit SVKushnirenko Bit 13.01.2017 #2671.дпн
	СверкаИзмененийРеквизитовСтроки(Элементы.БДДС.ТекущиеДанные);
	//} bit SVKushnirenko Bit 13.01.2017 #2671.дпн
	
	//+СБ Пискунова 22.12.2016 #2691
	ИзменитьСБ_СуммуПредоплаты();
	//-СБ Пискунова 22.12.2016 #2691

КонецПроцедуры

//+СБ Пискунова 22.12.2016 #2691
&НаКлиенте
Процедура  ИзменитьСБ_СуммуПредоплаты()
			
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-12 (#2873)
	//
	//Заменено на:
	Если Объект.БДДС.Количество() > 0 И
		 Элементы.БДДС.ТекущиеДанные <> Неопределено 
	Тогда 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-12 (#2873)
	
	Элементы.БДДС.ТекущиеДанные.СБ_СуммаПредоплаты = (Элементы.БДДС.ТекущиеДанные.бит_БК_СуммаБезНДС*Элементы.БДДС.ТекущиеДанные.бит_БК_СуммаПредоплаты)/100;
	КонецЕсли;
	Объект.СБ_СуммаПредоплатыИтого = Объект.БДДС.Итог("СБ_СуммаПредоплаты"); 
КонецПроцедуры
//-СБ Пискунова 22.12.2016 #2691

&НаКлиенте
Процедура БДДСбит_БК_ФормаОплатыПриИзменении(Элемент)
	//{ bit_SVKushnirenko 28.12.2016 #2671.1
	//ИсходныйКод{
	//ТекДанные = Элементы.БДДС.ТекущиеДанные.бит_БК_ФормаОплаты;
	//Если Объект.ОК_БК_ФормаОплаты <> ТекДанные Тогда //БИТ АКриштопов ++2482
	//	Объект.ОК_БК_ФормаОплаты = ТекДанные;
	//КонецЕсли;
	//}ИсходныйКод
	//дублирующий код синхронизации, который выполняется при записи
	//} bit_SVKushnirenko 28.12.2016 #2671.1
	
	//{ bit SVKushnirenko Bit 13.01.2017 #2671.дпн
	СверкаИзмененийРеквизитовСтроки(Элементы.БДДС.ТекущиеДанные);
	//} bit SVKushnirenko Bit 13.01.2017 #2671.дпн
КонецПроцедуры

&НаКлиенте
Процедура БДДСбит_БК_ПредпологаемыйКонтрагентПриИзменении(Элемент)
	ТекДанные = Элементы.БДДС.ТекущиеДанные.бит_БК_ПредпологаемыйКонтрагент;
	Если Объект.бит_БК_ПредпологаемыйКонтрагент <> ТекДанные Тогда //БИТ АКриштопов ++2482
		Объект.бит_БК_ПредпологаемыйКонтрагент = ТекДанные;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БДДСбит_БК_НуженДоговорПриИзменении(Элемент)
	//{ bit_SVKushnirenko 28.12.2016 #2671.1
	//ИсходныйКод{
	//БИТ АКриштопов ++ 2482
	//ТекДанные = Элементы.БДДС.ТекущиеДанные.бит_БК_НуженДоговор;
	//Если Объект.ОК_НеобходимостьДоговора <> ТекДанные Тогда 
	//	Объект.ОК_НеобходимостьДоговора = ТекДанные;
	//КонецЕсли;
	//БИТ АКриштопов --
	//}ИсходныйКод
	//дублирующий код синхронизации, который выполняется при записи
	//} bit_SVKushnirenko 28.12.2016 #2671.1
КонецПроцедуры

&НаКлиенте
Процедура БДДСПериодПриИзменении(Элемент)
	ТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда 
		ТекущиеДанные.Период = НачалоМесяца(ТекущаяДата());
		ТекущиеДанные.ПредставлениеПериода = ПолучитьПредставлениеПериодаРегистрации(ТекущиеДанные.Период);
	КонецЕсли;
	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ТекущиеДанные.Период);
	ТекущиеДанные.ПредставлениеПериода = ПредставлениеПериодаРегистрации;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации) Экспорт
	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");
КонецФункции

//bit_SVKushnirenko 13.01.2017 #2671.дпн
// <Описание>
// Параметры:
//<Параметр1>  = <Тип.Вид> - <описание параметра>
&НаКлиенте
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)
//Функция ДобавитьОсобоеЗначение(парИмяАтрибута, парТекущаяСтрока, парСписокКоллекция)
//Заменено на:
Функция ДобавитьОсобоеЗначение(парИмяАтрибута, парТекущаяСтрока, парСписокКоллекция,СвязанныеПоля = "")
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
	
	пЭлемент = парСписокКоллекция.Добавить();
	пЭлемент.Значение = парТекущаяСтрока[парИмяАтрибута];
	пЭлемент.Представление = парИмяАтрибута;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)
	Если Не ПустаяСтрока(СвязанныеПоля) Тогда 
		пЭлемент.ПредставлениеСвязанныхПолей = СвязанныеПоля;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
	
КонецФункции // ДобавитьОсобоеЗначение()

//bit_SVKushnirenko 13.01.2017 #2671.дпн
// Выполняет сохранение текущих значений "особых" реквизитов, для проверки их измеения после завершения транзакции изменения строки
&НаКлиенте
Функция СохранитьТекущееЗначениеОсобыхРеквизитов(парТекущиеДанные)
	
	рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки.Очистить();
	
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	//начинает указываться в табличной части
	//ДобавитьОсобоеЗначение("бит_БК_ВалютаДоговора", парТекущиеДанные, рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки);
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	ДобавитьОсобоеЗначение("бит_БК_Организация", парТекущиеДанные, рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки);
	ДобавитьОсобоеЗначение("бит_БК_ФормаОплаты", парТекущиеДанные, рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки);
	ДобавитьОсобоеЗначение("бит_БК_СуммаПредоплаты", парТекущиеДанные, рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки);
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Начало 20181106 (#3086)
	//начинает указываться в табличной части
	//ДобавитьОсобоеЗначение("ЦФО", парТекущиеДанные, рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки);
	//
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)
	//ДобавитьОсобоеЗначение("бит_БК_Курс"		, парТекущиеДанные, рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки, "бит_БК_ВалютаДоговора;бит_БК_Кратность");
	//ДобавитьОсобоеЗначение("бит_БК_Кратность"	, парТекущиеДанные, рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки, "бит_БК_ВалютаДоговора;бит_БК_Курс");
	////ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
	//ОКЕЙ Вдовиченко Г.В. (СофтЛаб) Конец 20181106 (#3086)
	
КонецФункции // СохранитьТекущееЗначениеОсобыхРеквизитов()

&НаКлиенте
Процедура БДДСПередНачаломИзменения(Элемент, Отказ)
	//{ bit SVKushnirenko Bit 13.01.2017 #2671.дпн
	СохранитьТекущееЗначениеОсобыхРеквизитов(Элемент.ТекущиеДанные);
	//} bit SVKushnirenko Bit 13.01.2017 #2671.дпн
КонецПроцедуры

//bit_SVKushnirenko 13.01.2017 #2671.дпн
//Выполняет сверку измененных реквизитов, для случая изменений, заполняет реквизит бит_БК_БлокировкиПолейФинансовогоКонтроллера именами измененных реквизитов
&НаКлиенте
Функция СверкаИзмененийРеквизитовСтроки(парТекущиеДанные)
	
	Для каждого пЭлементКоллекции Из рекЗначенияОсобыхРеквизитовДоНачалаИзмененияСтроки Цикл
		
		пТекущееЗначение = парТекущиеДанные[пЭлементКоллекции.Представление];
		
		Если пЭлементКоллекции.Значение <> пТекущееЗначение Тогда //изменение строки ограничений
			
			пЗаписьОграниченияДляВариантаДанных = ПодстрокаЗапретаИзмененияИнициатором(парТекущиеДанные, пЭлементКоллекции.Представление); //возможно "" если значение пустое
			парТекущиеДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера = СтрЗаменить(парТекущиеДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера, пЭлементКоллекции.Представление + ";", "") + 
			пЗаписьОграниченияДляВариантаДанных;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)
			Если Не ПустаяСтрока(пЭлементКоллекции.ПредставлениеСвязанныхПолей) Тогда 
				пМассивПредставленийСвязанныхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(пЭлементКоллекции.ПредставлениеСвязанныхПолей,";");
				Для Каждого пПредставлениеСвязанногоПоля Из пМассивПредставленийСвязанныхПолей Цикл 
					пПредставлениеСвязанногоПоля = пПредставлениеСвязанногоПоля + ";";
					Если Найти(парТекущиеДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера, пПредставлениеСвязанногоПоля) = 0 Тогда 
						парТекущиеДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера = парТекущиеДанные.бит_БК_БлокировкиПолейФинансовогоКонтроллера + пПредставлениеСвязанногоПоля;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
			
		КонецЕсли;
	КонецЦикла; 
КонецФункции // СверкаИзмененийРеквизитовСтроки()

&НаКлиенте
Процедура БДДСПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура БДДСбит_БК_ОрганизацияПриИзменении(Элемент)
	//{ bit SVKushnirenko Bit 13.01.2017 #2671.дпн
	СверкаИзмененийРеквизитовСтроки(Элементы.БДДС.ТекущиеДанные);
	//} bit SVKushnirenko Bit 13.01.2017 #2671.дпн
КонецПроцедуры

//{bit_SVKushnirenko 09.02.2017 #2671
//Возвращает подсроку запрета данных инициатором в зависимости от значения в текущей строке

//{ bit_SVKushnirenko 13.06.2017 #2735
//ИсходныйКод{
//&Наклиенте
//}ИсходныйКод

&НаклиентеНаСервереБезКонтекста
//} bit_SVKushnirenko 13.06.2017 #2735
Функция ПодстрокаЗапретаИзмененияИнициатором(парТекСтрока, парИмяРеквизита)
	
	Если ЗначениеЗаполнено(парТекСтрока[парИмяРеквизита]) Тогда
		
		Возврат парИмяРеквизита + ";";
	Иначе
		
		Возврат "";
	КонецЕсли;
КонецФункции // ПодстрокаЗапретаИзмененияИнициатором()

//{bit_SVKushnirenko 21.03.2017 #2759
//Прокладка для реализации в менеджере
// Параметры:
//парТЧБДДС - таблица значений с колонкой "СтатьяОборотов" из БДДС
&НаСервереБезКонтекста
Функция ПолучитьПризнакОборудованиеВСтатьяхОборотов(знач парТЧБДДС)

	Возврат Документы.бит_ФормаВводаБюджета.ЕстьПризнакОборудованиеВСтатьяхОборотов(парТЧБДДС.Выгрузить().ВыгрузитьКолонку("СтатьяОборотов"))
КонецФункции // ПолучитьПризнакОборудованиеВСтатьяхОборотов() }bit_SVKushnirenko 21.03.2017 #2759 

//{bit_SVKushnirenko 21.03.2017 #2759
//Выполняет проверку и регулирует доступность поля фбит_БК_ЦельПриобретенияОборудования
&НаКлиенте
Функция ДоступностьЦелиПриобретенияОборудования()

	//Проверка признака "Оборудование" в дополнительны свойствах статей оборотов
	Если Объект.Дата < Дата(2017, 08, 09) или
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан") или
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт") Тогда  
		
		пПризнакОборудование = Ложь;
	Иначе
		
		пПризнакОборудование = ПолучитьПризнакОборудованиеВСтатьяхОборотов(Объект.БДДС);
	КонецЕсли;
	 
	Элементы.фбит_БК_ЦельПриобретенияОборудования.Видимость = пПризнакОборудование;
	рекПроверкаЗаполнения_бит_БК_ЦельПриобретенияОборудования = пПризнакОборудование;
КонецФункции // ДоступностьЦелиПриобретенияОборудования() }bit_SVKushnirenko 21.03.2017 #2759

////БИТ АКриштопов 05042016
//&НаКлиенте
//Процедура СтатусНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
//	РольФинКонтроллера = ПолучитьДоступностьРолиФинК();	
//	Если РольФинКонтроллера и бит_БК_СтатусВручную Тогда
//		СтандартнаяОбработка = Ложь;
//		
//		Список = Новый СписокЗначений;
//		Список.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании")); 
//		Список.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована"));		
//		Если Список.Количество() > 0 Тогда
//			
//			ОписаниеОповещения = Новый ОписаниеОповещения("СтатусНачалоВыбораИзСпискаЗавершение", ЭтотОбъект, Элемент);
//			
//			ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
//			
//		КонецЕсли; 
//	КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//Процедура СтатусНачалоВыбораИзСпискаЗавершение(РезультатВыбора, Элемент) Экспорт
//	
//	Если РезультатВыбора <> Неопределено Тогда  		
//		Объект.Статус = РезультатВыбора; 		
//	КонецЕсли; 
//	
//КонецПроцедуры


//Функция ПолучитьДоступностьРолиФинК() Экспорт
//	Возврат РольДоступна("бит_БК_ГлавныйБК");
//КонецФункции

//&НаКлиенте
//Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	РольФинКонтроллера = ПолучитьДоступностьРолиФинК();	
//	Если РольФинКонтроллера и бит_БК_СтатусВручную Тогда
//		СтандартнаяОбработка = Ложь;
//		
//		Список = Новый СписокЗначений;
//		Список.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании")); 
//		Список.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_Согласована"));		
//		Если Список.Количество() > 0 Тогда
//			
//			ОписаниеОповещения = Новый ОписаниеОповещения("СтатусНачалоВыбораИзСпискаЗавершение", ЭтотОбъект, Элемент);
//			
//			ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
//			
//		КонецЕсли; 
//	КонецЕсли;
//КонецПроцедуры

//БИТ АКриштопов 03032016 <<--

//БИТ Соломина )

//{ bit SVKushnirenko Bit 25.04.2017 #2811
&НаКлиенте
Процедура БДДСПриАктивизацииЯчейки(Элемент)
	
	пТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	Если пТекущиеДанные <>  Неопределено Тогда  
		
		УправлениеПолемПроектНаФорме(пТекущиеДанные.СтатьяОборотов);
	КонецЕсли;
КонецПроцедуры //} bit SVKushnirenko Bit 25.04.2017 #2811

//{bit_SVKushnirenko 25.04.2017 #2811
&НаКлиенте
Процедура БДДСПроектНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ОбработкаВозможногоЗапретаЗаполненияПроекта(СтандартнаяОбработка);
КонецПроцедуры // БДДСПроектНачалоВыбораИзСписка() }bit_SVKushnirenko 25.04.2017 #2811

//{ bit SVKushnirenko Bit 25.04.2017 #2811
&НаКлиенте
Процедура БДДСПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбработкаВозможногоЗапретаЗаполненияПроекта(СтандартнаяОбработка);
КонецПроцедуры //} БДДСПроектОбработкаВыбора() bit SVKushnirenko Bit 25.04.2017 #2811

//{bit_SVKushnirenko 25.04.2017 #2811
&НаКлиенте
Процедура БДДСПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаВозможногоЗапретаЗаполненияПроекта(СтандартнаяОбработка);
КонецПроцедуры // БДДСПроектНачалоВыбора() }bit_SVKushnirenko 25.04.2017 #2811

//{bit_SVKushnirenko 25.04.2017 #2811
// Заглушка немодального предупреждения
Функция ПослеЗакрытияПредупреждения(парПараметры) Экспорт
КонецФункции // ПослеЗакрытияПредупреждения() }bit_SVKushnirenko 25.04.2017 #2811

//{bit_SVKushnirenko 25.04.2017 #2811
// Выполняет интерактивные процедуры запрета изменения проекта
//Параметры
//парСтандартнаяОбработка - Стандартная обработка в обработчике
&НаКлиенте
Функция ОбработкаВозможногоЗапретаЗаполненияПроекта(парСтандартнаяОбработка)

	пТекущиеДанные = Элементы.БДДС.ТекущиеДанные;
	Если рекПроектЗапретЗаполнения Тогда  
		
		парСтандартнаяОбработка = Ложь;
		пОповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждения", ЭтотОбъект);	
		
		ПоказатьПредупреждение(пОповещение,
		"Проект заполняется в инвестиционных и универсальных заявках только для инвестиционных расходов!", // предупреждение
		//"Поле ""Проект"" заполненяется только для статьи оборотов вида ""Инвестиционная деятельность""!"
		0, // (необ.) таймаут в секундах
		"Предупреждение!" // (необ.) заголовок
		);	
		пТекущиеДанные.Проект = Неопределено;
	КонецЕсли;
КонецФункции // ОбработкаВозможногоЗапретаЗаполненияПроекта() }bit_SVKushnirenko 25.04.2017 #2811

//{bit_SVKushnirenko 25.04.2017 #2811
//Возвращает Истина, если вид статьи = инвестиционная
// Параметры:
//парСтатьяОборотов - ссылка на справочник "Статьи оборотов"
&НаСервереБезКонтекста
Функция ВидСтатьиИнвестиционная(знач парСтатьяОборотов)

	Если ЗначениеЗаполнено(парСтатьяОборотов) и 
		парСтатьяОборотов.ВидСтатьи = Справочники.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность Тогда  
		
		Возврат Истина;
	Иначе
		
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ВидСтатьи() }bit_SVKushnirenko 25.04.2017 #2811 

//{bit_SVKushnirenko 25.04.2017 #2811
//Возвращает значение статуса для доступности поля "Проект" в ТЧ БДДС
// Параметры:
//парВидОперации - вид операции документа
//парСтатьяОборотов - значение статьи оборотов для определения доступности в конкретной строке
&НаСервереБезКонтекста
Функция ЗначениеДоступностиПроект(знач парВидОперации, знач парСтатьяОборотов = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(парСтатьяОборотов) Тогда  
		
		//{ bit_SVKushnirenko 14.06.2017 #2811, 2735
		//ИсходныйКод{
		//Возврат парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный ИЛИ
		//парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный;
		//}ИсходныйКод
		
		Возврат парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный ИЛИ
		парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный ИЛИ
		парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан ИЛИ
		парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт	;
		//} bit_SVKushnirenko 14.06.2017 #2811, 2735
	Иначе
		
		//{ bit_SVKushnirenko 14.06.2017 #2811, 2735
		//ИсходныйКод{
		//Возврат (парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный ИЛИ
		//парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный) И 
		//парСтатьяОборотов.ВидСтатьи = Справочники.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность;
		//}ИсходныйКод
		
		//Расширение состава операций доступности проекта статьи оборотов
		Возврат ((парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный ИЛИ
		парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный) И 
		парСтатьяОборотов.ВидСтатьи = Справочники.бит_ВидыСтатейОборотов.ИнвестиционнаяДеятельность) ИЛИ
		парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан ИЛИ
		парВидОперации = Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт	;
		//} bit_SVKushnirenko 14.06.2017 #2811, 2735
	КонецЕсли;
КонецФункции // ЗначениеДоступностиПроект() }bit_SVKushnirenko 25.04.2017 #2811 

//{bit_SVKushnirenko 25.04.2017 #2811
&НаКлиенте
Функция ПостроениеВидаОперацииНаОснованииДанныхСтатейТчБДДС()
	//Исправление ошибок  прошлых лет (даты и авторы сохранены внутри этого блока для сведения, логика переработана для контекста клиента и исключены повторы вызова методов "через точку", для оптимизации)
	пКоличествоСтрокБДДС = Объект.БДДС.Количество();
	
	// + БИТ AMerkulov 2014-01-24 /  Универсальная заявка
	бит_ИзмененВидОперации = Ложь;
	//+Сундукова 18.04.2016 №2395
	Если не ЗначениеЗаполнено(Объект.бит_БК_ЦФО) и ЗначениеЗаполнено(Объект.ЦФО) Тогда 
																				 	
		Объект.бит_БК_ЦФО = Объект.цфо;
	КонецЕсли;
	//-Сундукова 18.04.2016 №2395
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный") ИЛИ
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный") ИЛИ
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный") Тогда
		
		КоличествоУ = 0;
		КоличествоИнвест = 0;
		
		Для Каждого Строка Из Объект.БДДС Цикл
			
			Если Строка.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У") Тогда 
																			 	
				КоличествоУ = КоличествоУ + 1;
			ИначеЕсли Строка.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест") Тогда 
																					   	
				КоличествоИнвест = КоличествоИнвест + 1;			
			КонецЕсли;
		КонецЦикла;
		
		Если пКоличествоСтрокБДДС > 0 И КоличествоИнвест = пКоличествоСтрокБДДС И 
			Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный") Тогда
			
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный");
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Вид операции изменен на ""Заявка(инвестиционный)""";
			Сообщение.Сообщить();
			бит_ИзмененВидОперации = Истина;
			
			Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_Инвест");
			Объект.НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаИнвестиционная");
		КонецЕсли;
		
		Если пКоличествоСтрокБДДС > 0 И КоличествоУ = пКоличествоСтрокБДДС И 
			Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный") Тогда
			
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный");
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Вид операции изменен на ""Заявка(операционный)""";
			Сообщение.Сообщить();
			бит_ИзмененВидОперации = Истина;
			
			Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.Заявка_У");
			Объект.НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаОперационная");
		КонецЕсли;	
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный")  
			И пКоличествоСтрокБДДС > 0 И  КоличествоИнвест <> пКоличествоСтрокБДДС И  
			КоличествоУ <> Объект.БДДС.Количество() Тогда
			
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный");
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Вид операции изменен на ""Заявка(универсальный)""";
			Сообщение.Сообщить();
			бит_ИзмененВидОперации = Истина;
			
			Объект.Сценарий = Неопределено;
			Объект.НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаУниверсальная");
		КонецЕсли;
			
	КонецЕсли;
	// - БИТ AMerkulov 	

	//{ bit_SVKushnirenko 05.06.2017 #2735
	//ИсходныйКод{
	//// BIT AMerkulov 01092014 ++
	//Для Каждого Строка Из Объект.БДДС Цикл
	//	
	//	Строка.бит_БК_НаименованиеОборудования = Строка.ОК_НоменклатураПроизв;//Строка.бит_БК_Расход.Наименование + " " + //БИТ АКриштопов 04072016 ++ №2482 				
	//КонецЦикла;
	//// BIT AMerkulov 01092014 --
	//}ИсходныйКод
	
	//Удален код, который ведет к очисте наименования оборудования (назначение неизвестно, источник данных - тоже). Требование М.Бузник
	//} bit_SVKushnirenko 05.06.2017 #2735
		
	// BIT AMerkulov 10092015 ++
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаФормы) Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный") Тогда 
			
			Объект.Сценарий = Неопределено;
			Объект.НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаУниверсальная");
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный") Тогда 
																														
			Объект.Сценарий = ПредопределенноеЗначение("Справочник.бит_СценарииБюджетирования.Заявка_У");
			Объект.НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаОперационная");
		ИначеЕсли Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный")  Тогда 
																															
			Объект.Сценарий = ПредопределенноеЗначение("Справочник.бит_СценарииБюджетирования.Заявка_Инвест");
			Объект.НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ЗаявкаИнвестиционная");
		КонецЕсли;		
	КонецЕсли;
	// BIT AMerkulov 10092015 --	
	
	//{ bit SVKushnirenko Bit 25.04.2017 #2811
	//перенос старого кода из серверного вызова, характерного для этой формы
	Если бит_ИзмененВидОперации Тогда
		УстановитьВидимостьРеквизитов();
		
		//сбросим Настройку и сценарий
		Объект.Сценарий = ПредопределенноеЗначение("Справочник.СценарииПланирования.ПустаяСсылка");
		Объект.НастройкаФормы = ПредопределенноеЗначение("Справочник.бит_НастройкиФормВводаБюджета.ПустаяСсылка");
		мТекущийСтатус = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ПустаяСсылка");
		Статус = мТекущийСтатус;
		
		бит_УстановитьПредопределеннуюНастройкуФормы(Ложь);
		
		бит_НастроитьЭлементыФормы();
		бит_ЗаполнитьСписокСтатусов();
	КонецЕсли;
	
	// - БИТ AMerkulov  /  Универсальная заявка
	Для Каждого Строка Из Объект.БДДС Цикл				
		Строка.ОК_НоменклатураПроизв = Строка.бит_БК_НаименованиеОборудования;//Строка.бит_БК_Расход.Наименование + " " + //БИТ АКриштопов 04072016 ++ №2482 				
	КонецЦикла;	                          
	//} bit SVKushnirenko Bit 25.04.2017 #2811
		
	УстановитьЗаголовокФормыДокумента(ЭтаФорма, фКэшЗначений.ПредставлениеОбъекта, Параметры.Ключ.Пустая(), Объект.Проведен);
	
	//{ bit SVKushnirenko Bit 01.06.2017 #2759
	ДоступностьЦелиПриобретенияОборудования();
	//} bit SVKushnirenko Bit 01.06.2017 #2759
КонецФункции // ПостроениеВидаОперацииНаОснованииДанныхСтатейТчБДДС() }bit_SVKushnirenko 25.04.2017 #2811

//{bit_SVKushnirenko 25.04.2017 #2811
// Выполняет изменение поведения поля "Проект" на форме в зависимости от требований к заполнению
&НаКлиенте
Функция УправлениеПолемПроектНаФорме(парСтатьяОборотов = Неопределено)

	рекПроектЗапретЗаполнения = НЕ ЗначениеДоступностиПроект(Объект.ВидОперации, парСтатьяОборотов);
КонецФункции // УправлениеПолемПроектНаФорме() }bit_SVKushnirenko 25.04.2017 #2811

//{bit_SVKushnirenko 25.04.2017 #2811
// Скопировано из аналогичного метода заявки на расход по принципу единообразния изменения данных 
//(возможно этот реквизит устарел и не используется, но времени на реинжиниринг нет)
&НаКлиенте
Процедура УстановитьПредставлениеПериода()
	Для Каждого ТекСтрока Из Объект.БДДС Цикл
		ТекСтрока.ПредставлениеПериода = ПолучитьПредставлениеПериодаРегистрации(ТекСтрока.Период);
	КонецЦикла;	
КонецПроцедуры // УстановитьПредставлениеПериода() }bit_SVKushnirenko 25.04.2017 #2811

&НаКлиенте
Процедура БДДСПослеУдаления(Элемент)
	
	//{ bit_SVKushnirenko 25.04.2017 #2811
	ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС();
	//} bit SVKushnirenko Bit 25.04.2017 #2811
	
	//+СБ Пискунова 16.03.2017 #2691
	ИзменитьСБ_СуммуПредоплаты();
	//-СБ Пискунова 16.03.2017 #2691
	
КонецПроцедуры

//{bit_SVKushnirenko 25.04.2017 #2811
&НаКлиенте
Функция ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС()

	ПостроениеВидаОперацииНаОснованииДанныхСтатейТчБДДС();
	УправлениеПолемПроектНаФорме();
КонецФункции // ИзменениеОперацииДокументаПоИзменениюДанныхТЧБДДС() }bit_SVKushnirenko 25.04.2017 #2811

//+СБ Пискунова 22.12.2016 #2691
&НаКлиенте
Процедура БДДССБ_СуммаПредоплатыПриИзменении(Элемент)
	
	Объект.СБ_СуммаПредоплатыИтого = Объект.БДДС.Итог("СБ_СуммаПредоплаты");
	
КонецПроцедуры

&НаКлиенте
Процедура СБ_ЗапускПроцесса(Команда)
	//+СБ. Пискунова #2691
	//ОбновитьОЦР();    
	ВыполнитьПроцедуруМодуля("ЗапуститьПроцесс()"); 	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-10 (#2942)	
	//ЭтотОбъект.Записать();
	//Заменено на:
	Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-10 (#2942)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-03 (#3393)
	Если фКэшЗначений.Свойство("ЗакрытьЗаявку")
	   И фКэшЗначений.ЗакрытьЗаявку
	Тогда 
	
		ПоказатьПредупреждение(,НСтр("ru = 'Превышение по функциям директора N-1 > 5%, согласование невозможно, требуется корректировка бюджета'"));		
		Прочитать();
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-03 (#3393)
	
	Отказать = ПроверитьЗаполненностьВиз();	
	Если ЗначениеЗаполнено(ЭтаФорма.СБ_ТекстСообщения)  Тогда
		Предупреждение(ЭтаФорма.СБ_ТекстСообщения); 		
	КонецЕсли;  	
	ОпределитьДоступностьКнопокМаршрутаСогласования();
	ОбновитьОтображениеДанных();
	Элементы.СБ_ЗапускПроцесса.Доступность =  Отказать;
	Элементы.СБ_НеОтправлятьУведомленияНаПочту.Доступность =  Отказать;
	//-СБ. Пискунова #2691
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-01-10 (#2942)
	Если Объект.СБ_ПроцессЗапущен Тогда 
		Сообщить("Запущен процесс согласования заявки на расходы по маршруту");
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-01-10 (#2942)
	
КонецПроцедуры

//+СБ Пискунова #2691 12.03.2017
&НаСервере
Функция ПроверитьЗаполненностьВиз()
	Отказать = Ложь;
	ТекстСообщения = "";
	ЭтаФорма.СБ_ТекстСообщения = "";
	Если Объект.СБ_ЗапускПроцессаСПроверкой и НЕ Объект.СБ_ПроцессЗапущен Тогда
		СтруктураОтбор = Новый Структура("Объект",Объект.Ссылка);
		НаборЗаписей = бит_Визирование.ПрочитатьНаборВиз(СтруктураОтбор);
		Если НаборЗаписей.Количество() > 0 Тогда 
			Для каждого лЗапись из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(лЗапись.ФизическоеЛицо) Тогда
					ТекстСообщения =  ТекстСообщения + "Визе: " + лЗапись.Виза +Символы.ПС;  						
					Отказать = Истина;        					
				КонецЕсли;
			КонецЦикла; 			
		КонецЕсли;   
		Если Отказать = Истина Тогда
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-01 (#2978)
			ТекстСообщения = ТекстСообщения + "
											  //|Обратитесь к финансовому контролёру.";
											  |Обратитесь к менеджеру по контроллингу.";  //ОКЕЙ Довбешка Т. 12.04.2021    AT-2083818
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-01 (#2978)
			//Сообщить("Маршрут не может быть запущен, т.к. не определено ФИО по: " + Символы.ПС + ТекстСообщения);  
			ЭтаФорма.СБ_ТекстСообщения = "Маршрут не может быть запущен, т.к. не определено ФИО по: " + Символы.ПС + ТекстСообщения;
			бит_Визирование.ОчиститьВсеВизыБезусловно(Объект.Ссылка);
		Иначе
			Объект.СБ_ПроцессЗапущен = Истина;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-03-19 (#2986)
			ЭтотОбъект.СБ_ПроцессЗапущен = Истина;
			Если ЭтотОбъект.СБ_ЗапускПроцессаСПроверкой Тогда 
				ЭтотОбъект.СБ_ЗапускПроцессаСПроверкой = Ложь;		
			КонецЕсли;
			
			//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-03-19 (#2986)
			
			ЭтотОбъект.Записать();
		КонецЕсли;
		Модифицированность = Ложь;
	КонецЕсли;
	
	Возврат Отказать;	
	
КонецФункции

//{ bit SVKushnirenko Bit 25.04.2017 #2759
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОпределитьДоступностьКнопокМаршрутаСогласования();
	
	//{ bit SVKushnirenko Bit 25.04.2017 #2759
	ДоступностьЦелиПриобретенияОборудования();
	//} bit SVKushnirenko Bit 25.04.2017 #2759
КонецПроцедуры //} bit SVKushnirenko Bit 25.04.2017 #2759

&НаКлиенте
Процедура БДДСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//+СБ Пискунова 16.03.2017 #2691
	ИзменитьСБ_СуммуПредоплаты();
	//-СБ Пискунова 16.03.2017 #2691
КонецПроцедуры

//{ bit SVKushnirenko Bit 02.06.2017 #2735
&НаКлиенте
Процедура бит_БК_КурсДокументаПриИзменении(Элемент)

	бит_БК_ВалютаДокументаПриИзмененииНаСервере(); //вызов един, для курса и валюты
КонецПроцедуры // бит_БК_КурсДокументаПриИзменении() } bit SVKushnirenko Bit 02.06.2017 #2735

//{ bit SVKushnirenko Bit 05.06.2017 #2735
&НаКлиенте
Процедура БДДСбит_БК_КурсПриИзменении(Элемент)

	пТекСтрока = ТекущаяСтрока();
	Если пТекСтрока = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммы("Курс", пТекСтрока.ПолучитьИдентификатор());
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)	
	СверкаИзмененийРеквизитовСтроки(Элементы.БДДС.ТекущиеДанные);	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
	
КонецПроцедуры //БДДСбит_БК_КурсПриИзменении() } bit SVKushnirenko Bit 05.06.2017 #2735

//{ bit SVKushnirenko Bit 05.06.2017 #2735
&НаКлиенте
Процедура БДДСбит_БК_КратностьПриИзменении(Элемент)

	пТекСтрока = ТекущаяСтрока();
	Если пТекСтрока = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммы("Кратность", пТекСтрока.ПолучитьИдентификатор());
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-12-21 (#2957)
	СверкаИзмененийРеквизитовСтроки(Элементы.БДДС.ТекущиеДанные);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-12-21 (#2957)
	
КонецПроцедуры //БДДСбит_БК_КратностьПриИзменении() } bit SVKushnirenko Bit 05.06.2017 #2735

//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-06-29 (#2870)
//Процедура используется для пересчета сумм при смене курса.
&НаСервере
Процедура ПересчитатьСуммыБДДСБезСменыВалюты()

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-27 (#2873)	
	ИтогоПредоплаты = 0;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-27 (#2873)
	
	Для Каждого ТекСтрока Из Объект.БДДС Цикл
		
		ТекСтрока.бит_БК_СуммаБезНДС = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекСтрока.бит_БК_СуммаВВалютеБезНДС,
		ТекСтрока.бит_БК_ВалютаДоговора,
		Справочники.Валюты.ПустаяСсылка(),
		ТекСтрока.бит_БК_Курс,
		Объект.КурсДокумента,
		ТекСтрока.бит_БК_Кратность,
		Объект.КратностьДокумента);
		
		ТекСтрока.бит_БК_ЦенаБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаБезНДС/ТекСтрока.Количество);
		ТекСтрока.бит_БК_ЦенаВВалютеБезНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеБезНДС/ТекСтрока.Количество);
		
		НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаБезНДС, Ложь, ТекСтрока);
		ТекСтрока.Сумма = ТекСтрока.бит_БК_СуммаБезНДС + НДС;
		
		НДС = РассчитатьНДС(ТекСтрока.бит_БК_СуммаВВалютеБезНДС, Ложь, ТекСтрока);
		ТекСтрока.бит_БК_СуммаВВалютеСНДС = ТекСтрока.бит_БК_СуммаВВалютеБезНДС + НДС;
		
		ТекСтрока.бит_БК_ЦенаСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.Сумма/ТекСтрока.Количество);
		ТекСтрока.бит_БК_ЦенаВВалютеСНДС = ?(ТекСтрока.Количество = 0,0,ТекСтрока.бит_БК_СуммаВВалютеСНДС/ТекСтрока.Количество);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-27 (#2873)
	    ТекСтрока.СБ_СуммаПредоплаты = ТекСтрока.бит_БК_СуммаБезНДС * ТекСтрока.бит_БК_СуммаПредоплаты/100;
		ИтогоПредоплаты = ИтогоПредоплаты + ТекСтрока.СБ_СуммаПредоплаты;		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-27 (#2873)
		
	КонецЦикла;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-27 (#2873)
	Объект.СБ_СуммаПредоплатыИтого  = ИтогоПредоплаты; 
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-27 (#2873)
	
КонецПроцедуры 
//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-06-29 (#2870)

//ОКЕЙ Землянников К.А.(СофтЛаб) Начало 2017-07-31 (#2874)
&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
//Процедура ЗаполнитьКэшЗначенийДляИдентификацииФормы(КэшированныеЗначения, DomainName)
Процедура ЗаполнитьКэшЗначенийДляИдентификацииФормы(КэшированныеЗначения)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
			
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_БК_ВидыОперацийФормаВводаБюджета", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	Пользователь = Пользователи.ТекущийПользователь();
	КэшированныеЗначения.Вставить("ДоступнаРольGuest", УправлениеДоступом.ЕстьРоль("Guest",,Пользователь));
	КэшированныеЗначения.Вставить("ДоступнаРольОЦР", УправлениеДоступом.ЕстьРоль("ОК_ОЦР",,Пользователь));
	КэшированныеЗначения.Вставить("ЭтоПолноправныйПользователь", Пользователи.ЭтоПолноправныйПользователь(Пользователь));
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
	//УстановитьПараметрСеансаТекущийИнициатор(DomainName, КэшированныеЗначения);
	УстановитьПараметрСеансаТекущийИнициатор(КэшированныеЗначения);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьДоменноеИмяПользователя()
	oNet = Новый COMОбъект("WScript.Network");
	DomainName = СокрЛП(""+oNet.UserDomain+"\"+oNet.UserName);
    Возврат DomainName;
КонецФункции

&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
//Процедура УстановитьПараметрСеансаТекущийИнициатор(DomainName,КэшированныеЗначения)
Процедура УстановитьПараметрСеансаТекущийИнициатор(КэшированныеЗначения)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	
	КэшИнициатора = Новый Структура;

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
	//ПараметрыСеанса.бит_БК_ТекущийИнициатор = Справочники.бит_БК_Инициаторы.НайтиПоРеквизиту("DomainName",DomainName);
	СтандартныеПодсистемыВызовСервера.УстановитьПараметрСеансаТекущийИнициатор();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	
	КэшИнициатора.Вставить("ПустойИнициатор", Справочники.бит_БК_Инициаторы.ПустаяСсылка());
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
	//КэшИнициатора.Вставить("DomainName",DomainName);
	КэшИнициатора.Вставить("DomainName", ПараметрыСеанса.бит_БК_ТекущийИнициатор.DomainName);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	КэшИнициатора.Вставить("ТекущийИнициатор", ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
	//КэшИнициатора.Вставить("ИспользуемаяФорма", ПараметрыСеанса.бит_БК_ТекущийИнициатор.ИспользуемаяФорма);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)
	КэшированныеЗначения.Вставить("Инициатор",КэшИнициатора);	
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
//&НаКлиенте
//Функция ФормаИнициатора(ИспользуемаяФорма)
//	возврат  ?(ИспользуемаяФорма=0,"ФормаДокументаУправляемаяGuest","ФормаЗаявкаНаОперационныеРасходы");
//КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)

//ОКЕЙ Землянников К.А.(СофтЛаб) Конец 2017-07-31 (#2874)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-07(#2979)
&НаКлиенте
Процедура ОбновитьПеременныйИтога() Экспорт
	
	Если ТекущийЭлемент <> Элементы.БДДС	Тогда 
		Возврат;
	КонецЕсли;
	
	пИменаИтоговыхРеквизитов = "ок_Итог_бит_БК_СуммаБезНДС,
							   //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-23 (#3393)
							   |ок_Итог_ОстатокПоБюджету,
							   //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-23 (#3393)
							   |ок_Итог_бит_БК_СуммаВВалютеБезНДС,
							   |ок_Итог_бит_БК_СуммаВВалютеСНДС,
							   |ок_Итог_Количество,
							   |ок_Итог_Сумма";
	пМассивОбрабатываемыхРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(пИменаИтоговыхРеквизитов,Символы.ПС,""),",",Истина);
	
	//Обнуляем итоговые реквизиты
	Для каждого пСтрокаМассиваОбрРек Из пМассивОбрабатываемыхРеквизитов Цикл
		
		Выполнить(пСтрокаМассиваОбрРек + "=0");
		
	КонецЦикла; 
	
	Для Каждого пСтрБДДС ИЗ Объект.БДДС Цикл 
		Если Элементы.БДДС.ПроверитьСтроку(пСтрБДДС.ПолучитьИдентификатор()) Тогда 
			//Заполняем итоговые реквизиты
			Для каждого пСтрокаМассиваОбрРек Из пМассивОбрабатываемыхРеквизитов Цикл
				
				Выполнить(пСтрокаМассиваОбрРек + "= "+пСтрокаМассиваОбрРек+" + пСтрБДДС." + СтрЗаменить(пСтрокаМассиваОбрРек,"ок_Итог_",""));
				
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-07(#2979)

// ОКЕЙ Гиль А.В.(Софтлаб) Начало 25.01.2020 (#3591) 
&НаКлиенте
Процедура РасшифровкаЗатратНаРемонтОСНажатие(Элемент)
	
	ИспользоватьУчетЗатратНаРемонтОС = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Детализация затрат на ремонт ОС", "Использовать учет затрат на ремонт ОС");
	
	Если ИспользоватьУчетЗатратНаРемонтОС = Истина И Объект.Ссылка.Пустая() Или Модифицированность Тогда
		
		ТекстВопроса = "Данные еще не записаны.
		               |Выполнение действия ""Ввести детализацию затрат на ремонт ОС"" возможно только после записи данных.
		               |Данные будут записаны."; 
		ПоказатьВопрос(Новый ОписаниеОповещения("ВвестиРасшифровкуЗатратНаРемонтОСЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 10,,,КодВозвратаДиалога.Отмена);
		
		Возврат;
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ДокументРасшифровкиЗатратНаОС) Тогда
		
		ОткрытьЗначение(ДокументРасшифровкиЗатратНаОС);	
		
	Иначе
		
		Если ИспользоватьУчетЗатратНаРемонтОС <> Истина Тогда 
			Сообщить("Учет затрат на ОС отключен в системе, Детализацию затрат ввести невозможно");
			Возврат;
		КонецЕсли;
	
		ФормаРасшифровки = ПолучитьФорму("Документ.ок_ДетализацияЗатратНаРемонтОС.ФормаОбъекта");
		ДанныеФормы = ФормаРасшифровки.Объект;
		ДокументСформирован = Ложь;
		ок_ДетализацияЗатратНаРемонтОС.СформироватьНаОснованииЗаявкиРасшифровкуЗатратНаРемонтОС(Объект.Ссылка, ДанныеФормы, ДокументСформирован);
		
		Если ДокументСформирован Тогда
			КопироватьДанныеФормы(ДанныеФормы, ФормаРасшифровки.Объект);
			ФормаРасшифровки.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиРасшифровкуЗатратНаРемонтОСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда   
		Записать();
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыРасшифровкиЗатратОС()
	
	Элементы.НадписьРасшифровкаЗатратНаРемонтОС.Видимость = ок_ДетализацияЗатратНаРемонтОС.ВидимостьГиперСсылкиНаДокументДетализацииОС(Объект.ВидОперации);
	
	Если Элементы.НадписьРасшифровкаЗатратНаРемонтОС.Видимость Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда 
		
			ДокументРасшифровкиЗатратНаОС = ок_ДетализацияЗатратНаРемонтОС.ПолучитьДокументДетализацииЗатратНаРемонтОС(Объект.Ссылка);
			
			Если ЗначениеЗаполнено(ДокументРасшифровкиЗатратНаОС) Тогда
				Элементы.НадписьРасшифровкаЗатратНаРемонтОС.Заголовок = Строка(ДокументРасшифровкиЗатратНаОС);			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьЗаголовокФормыДокумента(ТекущаяФорма, ПредставлениеОбъекта, ЭтоНовый, Проведен)
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", ПредставлениеОбъекта);
	//СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(ТекущаяФорма.Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , ЭтоНовый);
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Проведен);
	
	бит_РаботаСДиалогамиКлиентСервер.УстановитьЗаголовокФормыДокумента(ТекущаяФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры
// ОКЕЙ Гиль А.В.(Софтлаб) Конец 25.01.2020 (#3591)

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-07-14 (#3808)
&НаСервере
Процедура ПрочитатьРССводныеОстатки()
	
	мОпераций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный"));
		
	Если мОпераций.Найти(Объект.ВидОперации) = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НаборОбъект = РеквизитФормыВЗначение("ок_СводныеДанныеПоБюджету", Тип("РегистрСведенийНаборЗаписей.ок_СводныеДанныеПоБюджету"));	
	НаборОбъект.Отбор.Регистратор.Установить(Объект.Ссылка);
	НаборОбъект.Прочитать();
	ЗначениеВРеквизитФормы(НаборОбъект, "ок_СводныеДанныеПоБюджету");	
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-07-14 (#3808)

//ОКЕЙ Морозов А.В. (СофтЛаб) Начало 2020-09-02 (#3775)
&НаКлиенте
Процедура ОтчетПоБюджету(Команда)
	
	Если Не Объект.Проведен Тогда 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяПроцедуры", "ВывестиОтчетПоБюджету();");
		ОписаниеОповещениеОПроведении = Новый ОписаниеОповещения("ОтветНаВопросПровестиДокумент", ЭтотОбъект, ДопПараметры);                             		
		ПоказатьВопрос(ОписаниеОповещениеОПроведении, НСтр("ru = 'Для выполнения команды документ должен быть проведен. Провести?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;
	
	ВывестиОтчетПоБюджету();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтчетПоБюджету()
	
	ПараметрыОткрытия = Новый Структура("ФВБ", Объект.Ссылка);
	ОткрытьФорму("Отчет.ок_ОтчетПоБюджетуДляИнициатора.Форма.ФормаОтчета", ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОтчетПоЗаявкеИОплате(Команда)
	
	Если Не Объект.Проведен Тогда 
		
		ДопПараметры = Новый Структура;  
		ДопПараметры.Вставить("ИмяПроцедуры", "ВывестиОтчетПоЗаявкеИОплате()");
		ОписаниеОповещениеОПроведении = Новый ОписаниеОповещения("ОтветНаВопросПровестиДокумент", ЭтотОбъект, ДопПараметры);                             		
		ПоказатьВопрос(ОписаниеОповещениеОПроведении, НСтр("ru = 'Для выполнения команды документ должен быть проведен. Провести?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;
	
	ВывестиОтчетПоЗаявкеИОплате();

КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтчетПоЗаявкеИОплате()
	
	Предупреждение(НСтр("ru = 'Оплаты до 01.03.2019 г. в отчете не отображаются'"));
	
	ПараметрыОткрытия = Новый Структура("ФВБ", Объект.Ссылка);
	ОткрытьФорму("Отчет.ок_ОтчетПоЗаявкеИОплате.Форма.ФормаОтчета", ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ОтчетПоЗапланированнымПлатежам(Команда)
	
	Если Не Объект.Проведен Тогда 
		
		ДопПараметры = Новый Структура;  
		ДопПараметры.Вставить("ИмяПроцедуры", "ВывестиОтчетПоЗапланированнымПлатежам()");
		ОписаниеОповещениеОПроведении = Новый ОписаниеОповещения("ОтветНаВопросПровестиДокумент", ЭтотОбъект, ДопПараметры);                             		
		ПоказатьВопрос(ОписаниеОповещениеОПроведении, НСтр("ru = 'Для выполнения команды документ должен быть проведен. Провести?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;
	
	ВывестиОтчетПоЗапланированнымПлатежам();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтчетПоЗапланированнымПлатежам()
	
	Предупреждение(НСтр("ru = 'Оплаты до 01.03.2019 г. в отчете не отображаются'"));
	
	ПараметрыОткрытия = Новый Структура("ФВБ", Объект.Ссылка);
	ОткрытьФорму("Отчет.ок_ОтчетПоЗапланированнымПлатежам.Форма.ФормаОтчета", ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_СредстваДляКорректировкиБюджета(Команда)
	
	Если Не Объект.Проведен Тогда 
		
		ДопПараметры = Новый Структура;  
		ДопПараметры.Вставить("ИмяПроцедуры", "ВывестиОтчетСредстваДляКорректировкиБюджета()");
		ОписаниеОповещениеОПроведении = Новый ОписаниеОповещения("ОтветНаВопросПровестиДокумент", ЭтотОбъект, ДопПараметры);                             		
		ПоказатьВопрос(ОписаниеОповещениеОПроведении, НСтр("ru = 'Для выполнения команды документ должен быть проведен. Провести?'"), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Возврат;
		
	КонецЕсли;
	
	ВывестиОтчетСредстваДляКорректировкиБюджета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОтчетСредстваДляКорректировкиБюджета()
	
	пЕстьОстатокМеньшеНуля = Ложь;
	Для каждого пСтрокаБДДС Из Объект.БДДС  Цикл
	
		Если пСтрокаБДДС.ОстатокПоБюджету < 0 Тогда  
			
			пЕстьОстатокМеньшеНуля = Истина; 
			Прервать;
		КонецЕсли;
	КонецЦикла; 

	Если Не пЕстьОстатокМеньшеНуля Тогда
	
		Предупреждение(НСтр("ru = 'По заявке отсутствуют суммы сверх бюджета!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ФВБ", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("рекФВБХранБДДС", ВыгрузитьБДДС(Объект.БДДС));
	ОткрытьФорму("Отчет.ок_СредстваДляКорректировкиБюджета.Форма.ФормаОтчета", ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьБДДС(Знач парТЧБДДС, парУИДТЧ = Неопределено)

	пТЧБДДС = парТЧБДДС.Выгрузить(, "Сценарий, Период, ЦФО, СтатьяОборотов, Проект, Аналитика_1, Аналитика_2, Контрагент, ДоговорКонтрагента, бит_БК_СуммаБезНДС");
	пТЧБДДС.Колонки.бит_БК_СуммаБезНДС.Имя = "Сумма";
	Возврат ПоместитьВоВременноеХранилище(пТЧБДДС, ?(парУИДТЧ = Неопределено, Новый УникальныйИдентификатор(), парУИДТЧ));
	
КонецФункции 

//ОКЕЙ Морозов А.В. (СофтЛаб) Конец 2020-09-02 (#3775)
