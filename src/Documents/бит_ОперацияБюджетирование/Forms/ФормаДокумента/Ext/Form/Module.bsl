
#Область ОписаниеПеременных

&НаКлиенте 
Перем мСценарий; // Хранит текущее значение сценария. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
		 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	
	фКоличествоСубконтоБУ = 4;
	 		
	УстановитьВидимостьДоступность();

	// Установим валюту сценария.
	УстановитьВалютуСценария();
    
    фДатаСторно = Объект.ДатаСторно;
    
	// Установка текущей строки движения.	
	бит_БухгалтерскиеОтчетыСервер.УстановитьТекущуюСтрокуТаблицыДвиженийДокумента(Элементы, Параметры);
	
	УстановитьПараметрыВыбораДляСчетов();
    
	// Проверка фиксации.
	ТабДвижений = Объект.Движения.бит_Бюджетирование.Выгрузить(,"Период, Сценарий, ЦФО");
	ОтказФисация = Ложь;
	Если ТабДвижений.Количество() > 0 И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПерваяСтрока = ТабДвижений[0];
		
		бит_Бюджетирование.ПроверитьФиксацию(ПерваяСтрока.Сценарий, ТабДвижений, ОтказФисация, Ложь);
		
	КонецЕсли;
	
	Если ОтказФисация Тогда
		
		ЭтотОбъект.ТолькоПросмотр = Истина;
		
		ТекстСообщения = НСтр("ru = 'Документ содержит зафиксированные данных бюджета! Форма заблокирована.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;	
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мСценарий = Объект.Сценарий;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ВыбранноеЗначение, "РезультатПолученияДанных") Тогда
		
		Если ВыбранноеЗначение.Режим = "Заполнить" 
			И Объект.Движения.бит_Бюджетирование.Количество() > 0 Тогда 
			
			// В режиме заполнения существующие данные следует очистить.
            
            ДопПараметры = Новый Структура;
            ДопПараметры.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
			бит_РаботаСДиалогамиКлиент.ЗапросПодтвержденияОчисткиДанных(ЭтаФорма, ДопПараметры);
			
		Иначе
            
            ЗаполнитьДвиженияПоВыбраннымДанным(ВыбранноеЗначение, Ложь);
            
        КонецЕсли; // Режим заполнения.
						
	КонецЕсли; 
	       	
КонецПроцедуры // ОбработкаВыбора()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "бит_ПереносОстатков" И Источник = ЭтаФорма Тогда
		
		ОбработкаПереносОстатков(Параметр);	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ОперацияБюджетирование";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	ПроверитьПроводкиПередЗаписью(Отказ);
   											
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    
    фДатаСторно = Объект.ДатаСторно;
    
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
                      	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий) ИЛИ фВалютаСценария = ПолучитьВалютуСценария(Объект.Сценарий) Тогда
		УстановитьВидимостьДоступность();
		Возврат;
	КонецЕсли;
	
	// Если есть движения.
	Если Объект.Движения.бит_Бюджетирование.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Изменилась валюта сценария. Суммы сценария в движениях будут пересчитаны. Продолжить?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСценарийПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ИзменениеСценарияСервер(мСценарий);
		мСценарий = Объект.Сценарий;

	КонецЕсли;	
		
КонецПроцедуры // СценарийПриИзменении()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросСценарийПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Объект.Сценарий = мСценарий;
	Иначе
		ИзменениеСценарияСервер(мСценарий);
		мСценарий = Объект.Сценарий;
	КонецЕсли;
	
КонецПроцедуры // ВопросСценарийПриИзменении()
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДвиженияБитБюджетирование

&НаКлиенте
Процедура ДвиженияБитБюджетированиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;
	
	ТекущиеДанные.Период   = Объект.Дата;
	ТекущиеДанные.Сценарий = Объект.Сценарий;

КонецПроцедуры // ДвиженияБитБюджетированиеПриНачалеРедактирования()

&НаКлиенте
Процедура ДвиженияБитБюджетированиеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПроводкуНаСторно(ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБитБюджетированиеСубконтоБУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;
	
	ИмяСубконто       = Прав(Элемент.Имя, 11);	
	ЗначениеСубконто  = ТекущиеДанные[ИмяСубконто];	
	
	НачалоВыбораСубконтоБУ(Элемент, СтандартнаяОбработка, ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // ДвиженияБитБюджетированиеСубконтоДтНачалоВыбора()

&НаКлиенте
Процедура ДвиженияБитБюджетированиеСубконтоБУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;
	
	ИмяСубконто = Прав(Элемент.Имя, 11);
	ЗначениеСубконто  = ТекущиеДанные[ИмяСубконто];
	
	ИзменениеСубконтоБУ(ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // ДвиженияБитБюджетированиеСубконтоДтПриИзменении()

&НаКлиенте
Процедура ДвиженияБитБюджетированиеСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	БюджетированиеСубконтоБУАвтоПодбор(Элемент, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияБитБюджетированиеВалютаДтПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;	
		
	ИзменениеВалютыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "Дт");
		
КонецПроцедуры // ДвиженияБитБюджетированиеВалютаДтПриИзменении()

&НаКлиенте
Процедура ДвиженияБитБюджетированиеВалютаКтПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;	
		
	ИзменениеВалютыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "Кт");

КонецПроцедуры // ДвиженияБитБюджетированиеВалютаКтПриИзменении()

&НаКлиенте
Процедура ДвиженияБитБюджетированиеСуммаСценарийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;	
		
	ИзменениеСуммыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ДвиженияБитБюджетированиеСуммаСценарийПриИзменении()

&НаКлиенте
Процедура ДвиженияБитБюджетированиеСуммаРеглПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;	
		
	ИзменениеСуммыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "ИзменениеРеглСуммы");
	
КонецПроцедуры // ДвиженияБитБюджетированиеСуммаРеглПриИзменении()

&НаКлиенте
Процедура ДвиженияБитБюджетированиеСуммаУпрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;	
		
	ИзменениеСуммыТекущейЗаписи(ТекущиеДанные.ПолучитьИдентификатор(), "ИзменениеУпрСуммы");
	
КонецПроцедуры // ДвиженияБитБюджетированиеСуммаУпрПриИзменении()
            
#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаПереключитьАктивность(Команда)
	
	ПереключитьАктивностьПроводок();
	
	Модифицированность = Истина;
	
КонецПроцедуры // КомандаПереключитьАктивность()

&НаКлиенте
Процедура КомандаЗаполнить(Кнопка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭтоЗаполнениеИзДокументаОперации", Истина);
	ПараметрыФормы.Вставить("ОбъектСистемы"				      , фКэшЗначений.ОбъектСистемы);
	ПараметрыФормы.Вставить("Сценарий"     			     	  , Объект.Сценарий);
	ПараметрыФормы.Вставить("ДатаДок"      				 	  , Объект.Дата);
	ПараметрыФормы.Вставить("Режим"        				 	  , "Одиночный");
	
	ОткрытьФорму("Обработка.бит_ПолучениеДанныхРегистровБухгалтерии.Форма.ФормаУправляемая", ПараметрыФормы, ЭтаФорма);
	
	Модифицированность = Истина;
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
Процедура КомандаЗаполнитьОстатки(Команда)
	
	Если ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
	
		РегистрБюджетирования = НайтиРегистрБюджетирования();
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("РегистрПриемник"		, РегистрБюджетирования);
		СтруктураПараметров.Вставить("Организация"			, Объект.Организация);
		СтруктураПараметров.Вставить("Дата"					, Объект.Дата);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураПараметров",	СтруктураПараметров);
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		
		ОткрытьФорму("Обработка.бит_ПолучениеОстатковРегистровБухгалтерии.Форма.Форма", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		ТекстСообщения = Нстр("ru = 'Для заполнения остатков выберете Организацию!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			 
		
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаСохранитьШаблон(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоЗаполнениеИзДокументаОперации", Истина);
	//СтруктураПараметров.Вставить("РегистрБухгалтерии"			   , Объект.РегистрБухгалтерии);
	СтруктураПараметров.Вставить("ИмяРегистра"			           , "бит_Бюджетирование");
	СтруктураПараметров.Вставить("Организация"    				   , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДок"      			       , Объект.Дата);
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Записать?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("СохранитьШаблонПродолжение", ЭтотОбъект, СтруктураПараметров);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
		
	Иначе
		
		СоздатьШаблонПроводокКлиент(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьШаблонНовый(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЭтоЗаполнениеИзДокументаОперации", Истина);
	//СтруктураПараметров.Вставить("РегистрБухгалтерии"			   , Объект.РегистрБухгалтерии);
	СтруктураПараметров.Вставить("ВидДокумента"                    , ОпределитьРегистрБухгалтерииВидДокумента("ВидДокумента"));
	СтруктураПараметров.Вставить("ИмяРегистра"			           , "бит_Бюджетирование");
	СтруктураПараметров.Вставить("Организация"    				   , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДок"      			       , Объект.Дата);
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Записать?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("СохранитьШаблонНовыйПродолжение", ЭтотОбъект, СтруктураПараметров);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);
		
	Иначе
		
		СоздатьШаблонПроводокНовыйКлиент(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуДобавить(Команда)
	
	КомандаЗаполнитьПоШаблонуКлиент("Добавить");
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуЗагрузить(Команда)
	
	КомандаЗаполнитьПоШаблонуКлиент("Загрузить");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура устанвливает параметры выбора для элементов формы. 
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ДвиженияБитБюджетированиеСчетДт);
	МассивЭлементов.Добавить(Элементы.ДвиженияБитБюджетированиеСчетКт);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
	
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	фКэшЗначений.Вставить("ВалютаУпрУчета" , Константы.бит_ВалютаУправленческогоУчета.Получить());
	
	фКэшЗначений.Вставить("ОбъектСистемы"	  , бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.бит_Бюджетирование));
	фКэшЗначений.Вставить("КоличествоСубконто", Метаданные.РегистрыБухгалтерии.бит_Бюджетирование.ПланСчетов.МаксКоличествоСубконто);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает видимость, доступность элементам формы.
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()

	СценарийЗаполнен = ЗначениеЗаполнено(Объект.Сценарий);
	
	Элементы.ДвиженияБитБюджетирование.Доступность = СценарийЗаполнен;
	
	ЕстьИзмерениеОрг = бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();
	Элементы.Организация.Видимость = ЕстьИзмерениеОрг;

КонецПроцедуры // УстановитьВидимостьДоступность()

// Процедура устанавливает валюту сценария в шапке документа.
// 
&НаСервере
Процедура УстановитьВалютуСценария()
	
	фВалютаСценария = Объект.Сценарий.Валюта;
		
КонецПроцедуры // УстановитьВалютуСценария()

// Процедура устанавливает валюту сценария в шапке документа.
// 
// Параметры:
//  Сценарий - СправочникСсылка.СценарииПланирования.
// 
// Возвращаемое значение:
//  СправочникСсылка.Валюты.
// 
&НаСервере
Функция ПолучитьВалютуСценария(Сценарий)
	
	Возврат Сценарий.Валюта;
		
КонецФункции // ПолучитьВалютуСценария()


// Процедура выполняет пересчет сумм в текущей строке.
// 
// Параметры:
//  ТекущиеДанные      - ДанныеФормыЭлементКоллекции.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
//  Действие 		   - Строка.
// 
&НаСервере
Процедура ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ВалютаДляПересчета, СуммаДляПересчета, Действие = "")

	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ДокументОбъект.ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ВалютаДляПересчета, СуммаДляПересчета, Действие);
		
КонецПроцедуры // ВыполнитьРасчетСуммВТекущейСтроке()

// Процедура выполняет пересчет валютных сумм в текущей строке.
// 
// Параметры:
//  ТекущиеДанные      - ДанныеФормыЭлементКоллекции.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
// 
&НаСервере
Процедура ВыполнитьРасчетВалютныхСуммВТекущейСтроке(ТекущиеДанные, ВалютаДляПересчета, СуммаДляПересчета)

	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ДокументОбъект.ВыполнитьРасчетВалютныхСуммВТекущейСтроке(ТекущиеДанные, ВалютаДляПересчета, СуммаДляПересчета);
	
КонецПроцедуры // ВыполнитьРасчетВалютныхСуммВТекущейСтроке()

// Процедура обрабатывает изменение сценария.
// 
// Параметры:
//  СтарыйСценарий - СправочникСсылка.СценарииПланирования.
// 
&НаСервере
Процедура ИзменениеСценарияСервер(СтарыйСценарий)

	// Получим курс и кратность валюты сценария.
	ЗаписьРегистра  = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.Сценарий.Валюта));
	КурсВалюты      = ЗаписьРегистра.Курс;
	КрантостьВалюты = ЗаписьРегистра.Кратность;
	
	// Выполним пересчет регл. суммы в валюту сценария.
	Для каждого Проводка Из Объект.Движения.бит_Бюджетирование Цикл
		
		КурсКратностьСтарогоСценария = бит_Бюджетирование.ПолучитьКурсПоСценарию(СтарыйСценарий	, СтарыйСценарий.Валюта	, Объект.Дата);
		КурсКратностьНовогоСценария  = бит_Бюджетирование.ПолучитьКурсПоСценарию(Объект.Сценарий, Объект.Сценарий.Валюта, Объект.Дата);
		
		Проводка.СуммаСценарий = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Проводка.СуммаСценарий, 
																				 СтарыйСценарий.Валюта					   , Объект.Сценарий.Валюта,
																				 КурсКратностьСтарогоСценария.Курс	   , КурсКратностьНовогоСценария.Курс,
																				 КурсКратностьСтарогоСценария.Кратность, КурсКратностьНовогоСценария.Кратность);
		
		// Выполним расчет сумм в текущей строке.
		ВыполнитьРасчетСуммВТекущейСтроке(Проводка, Объект.Сценарий.Валюта, Проводка.СуммаСценарий);
		
	КонецЦикла;

	УстановитьВалютуСценария();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ИзменениеСценарияСервер()

// Процедура обрабатывает изменение валюты в строке.
// 
// Параметры:
//  ТекИд - Число.
//  ДтКт  - Строка.
// 
&НаСервере
Процедура ИзменениеВалютыТекущейЗаписи(ТекИд, ДтКт)

	ТекущиеДанные = Объект.Движения.бит_Бюджетирование.НайтиПоИдентификатору(ТекИд);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.СчетДт);
	Если ДтКт = "Дт" ИЛИ Не СвСч.Валютный Тогда
		// Выполним расчет сумм в текущей строке.
		ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ТекущиеДанные["Валюта" + ДтКт], ТекущиеДанные["ВалютнаяСумма" + ДтКт]);
	КонецЕсли;	

КонецПроцедуры // ИзменениеВалютыТекущейЗаписи()

// Процедура обрабатывает изменение суммы текущей записи.
// 
// Параметры:
//  ТекИд    - Число.
//  Действие - Строка.
// 
&НаСервере
Процедура ИзменениеСуммыТекущейЗаписи(ТекИд, Действие = "")

	ТекущиеДанные = Объект.Движения.бит_Бюджетирование.НайтиПоИдентификатору(ТекИд);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	
	Если Действие = "" Тогда
		ВалютаПересчета = Объект.Сценарий.Валюта;
		СуммаПересчета  = ТекущиеДанные.СуммаСценарий;
	ИначеЕсли Действие = "ИзменениеРеглСуммы" Тогда
	    ВалютаПересчета = фКэшЗначений.ВалютаРеглУчета;
		СуммаПересчета  = ТекущиеДанные.СуммаРегл;
	ИначеЕсли Действие = "ИзменениеУпрСуммы" Тогда	
		ВалютаПересчета = фКэшЗначений.ВалютаУпрУчета;
		СуммаПересчета  = ТекущиеДанные.СуммаУпр;
	Иначе
		Возврат;
	КонецЕсли;
	
	
	// Выполним расчет сумм в текущей строке.
	ВыполнитьРасчетСуммВТекущейСтроке(ТекущиеДанные, ВалютаПересчета, СуммаПересчета, Действие);
	
	// Выполним расчет валютных сумм в текущей строке.
	ВыполнитьРасчетВалютныхСуммВТекущейСтроке(ТекущиеДанные, ВалютаПересчета, СуммаПересчета);

КонецПроцедуры // ИзменениеСуммыТекущейЗаписи()


// Процедура заполняет движения.
// 
// Параметры:
//  ВыбранноеЗначение - Структура.
//  ОчищатьДанные     - Булево.
// 
&НаСервере
Процедура ЗаполнитьДвиженияПоВыбраннымДанным(ВыбранноеЗначение, ОчищатьДанные)

	Если ОчищатьДанные Тогда					
		Объект.Движения.бит_Бюджетирование.Очистить();					
	КонецЕсли;
	
	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	
	Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.ЗаполнитьДвижения(ВыбранноеЗначение.ХранилищеДанные
																		, ДокОбъект.Движения.бит_Бюджетирование
																		, фКэшЗначений.КоличествоСубконто
																		, "бит_Бюджетирование");
																		
	ЗначениеВДанныеФормы(ДокОбъект, Объект);																		
                         
КонецПроцедуры // ЗаполнитьДвиженияПоВыбраннымДанным()

// Процедура переключает активность проводок.
// 
&НаСервере
Процедура ПереключитьАктивностьПроводок()

	Для каждого СтрокаЗапись Из Объект.Движения.бит_Бюджетирование Цикл
		СтрокаЗапись.Активность = Не СтрокаЗапись.Активность;	
	КонецЦикла;

КонецПроцедуры // ПереключитьАктивностьПроводок()

// Функция проверяет проводки перед записью.
//  
// Возвращаемое значение:
//  Строка - текст сообщения с ошибками.
// 
&НаСервере
Процедура ПроверитьПроводкиПередЗаписью(Отказ)

	ТекстСообщения = "";
	
	Дата 	 = Объект.Дата;
	Сценарий = Объект.Сценарий;
	ЕстьИзмерениеОрг = бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();
	
	// Запись документа без проводок.
	//Если Объект.Движения.бит_Бюджетирование.Количество() = 0 Тогда
	//	ТекстСообщения = Нстр("ru = 'Невозможно записать документ. Необходимо внести данные на закладке ""Проводки (бюджетирование).""'");
	//КонецЕсли;
	
	ТаблицаДоступаЦФО = ПолучитьТаблицуДоступаЦФО();
    ЭтоНовыйДок = Параметры.Ключ.Пустая();
	
	Для Каждого Проводка Из Объект.Движения.бит_Бюджетирование Цикл
        
        Если ЭтоНовыйДок Тогда
            Проводка.Период = Дата;
        Иначе	
            Проводка.Период = ?(Проводка.Период = фДатаСторно, Объект.ДатаСторно, Дата);
        КонецЕсли;
		
		Проводка.Сценарий = Сценарий;
		Проводка.Организация = ?(ЕстьИзмерениеОрг, Объект.Организация, Справочники.Организации.ПустаяСсылка());
		
		Если РольДоступна("ПолныеПрава") ИЛИ  РольДоступна("бит_ФинансистПолныеПрава") Тогда
			Продолжить;
		Иначе
			
			Если ТаблицаДоступаЦФО.Найти(Проводка.ЦФО, "ЦФО") = Неопределено 
				И ТаблицаДоступаЦФО.Найти(Перечисления.бит_рлс_Все.Все, "ЦФО") = Неопределено Тогда
				
				ТекстСообщения = ?(ПустаяСтрока(ТекстСообщения), "", ТекстСообщения + Символы.ПС)  
						+ Нстр("ru = 'В строке номер %1% таблицы ""Проводки (бюджетирование)"": Недоступное для записи значение реквизита ""ЦФО""!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СокрЛП(Проводка.НомерСтроки));
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
                
			КонецЕсли;
			
		КонецЕсли;
		
    КонецЦикла;
    
    Если Отказ Тогда
        Возврат;
    КонецЕсли;
    
    ДвиженияБюдж = Объект.Движения.бит_Бюджетирование;
    
    //----------------------------------------------------------------------
    // Удаление сущствующих записей сторно.
	Если Объект.Ссылка.ДатаСторно > Объект.Ссылка.Дата Тогда		
        // Поиск
        ЗаписиКУдалению = Новый Массив;		
		Для Каждого Проводка Из ДвиженияБюдж Цикл
			Если Проводка.Период = Объект.ДатаСторно Тогда
				ЗаписиКУдалению.Добавить(Проводка);
			КонецЕсли;
        КонецЦикла;	
        // Удаление
		Для Каждого ТекЗапись Из ЗаписиКУдалению Цикл
			Объект.Движения.бит_Бюджетирование.Удалить(ТекЗапись);
		КонецЦикла;		
	КонецЕсли;
    
    //----------------------------------------------------------------------
    // Поиск записей для добавления записей сторно.
	ЗаписиКДобавлению = Новый Массив;	
	Для Каждого Проводка Из ДвиженияБюдж Цикл	 	
        Если Объект.ДатаСторно > Проводка.Период Тогда
			ЗаписиКДобавлению.Добавить(Проводка);
		КонецЕсли;		
	КонецЦикла;

	//----------------------------------------------------------------------
    // Добавление сторно-записей.
	МетаНабор = Метаданные.РегистрыБухгалтерии.бит_Бюджетирование;	
	Для Каждого ТекЗапись Из ЗаписиКДобавлению Цикл
		
		НоваяЗапись = ДвиженияБюдж.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекЗапись);		
		НоваяЗапись.Период = Объект.ДатаСторно;
		
		Для Каждого ТекущийРесурс Из МетаНабор.Ресурсы Цикл
			СтороныПроводок = Новый Массив;			
			Если ТекущийРесурс.Балансовый Тогда
				СтороныПроводок.Добавить("");
			Иначе
				СтороныПроводок.Добавить("Дт");
				СтороныПроводок.Добавить("Кт");
			КонецЕсли;			
			Для Каждого ДтКт Из СтороныПроводок Цикл
				Если ТипЗнч(НоваяЗапись[ТекущийРесурс.Имя + ДтКт]) = Тип("Число") Тогда
					НоваяЗапись[ТекущийРесурс.Имя + ДтКт] = -НоваяЗапись[ТекущийРесурс.Имя + ДтКт];
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;
		
    КонецЦикла;
    	
КонецПроцедуры // ПроверитьПроводкиПередЗаписью()

// Функция определяет доступные ЦФО для записи.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуДоступаЦФО()

	Результат = Неопределено;
	
	ТекущийПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА бит_рлс_ПраваДоступа.Разделитель_1 ССЫЛКА Справочник.Подразделения
		|				ИЛИ бит_рлс_ПраваДоступа.Разделитель_1 = ЗНАЧЕНИЕ(Перечисление.бит_рлс_все.Все)
		|			ТОГДА бит_рлс_ПраваДоступа.Разделитель_1
		|	КОНЕЦ КАК ЦФО
		|ИЗ
		|	РегистрСведений.бит_рлс_ПраваДоступа КАК бит_рлс_ПраваДоступа
		|ГДЕ
		|	бит_рлс_ПраваДоступа.Пользователь = &ТекущийПользователь
		|	И бит_рлс_ПраваДоступа.Запись = ИСТИНА";

	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуДоступаЦФО()

// Функция получает объект системы Регистр бухгалтерии бит_бюджетирование.
//
&НаСервере
Функция НайтиРегистрБюджетирования()

	ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.бит_Бюджетирование);

	Возврат ОбъектСистемы;
	
КонецФункции // НайтиРегистрБюджетирования()

// Процедура обрабатывает перенос остатков
//  из обработки бит_ПолучениеОстатковРегистровБухгалтерии. 
//
&НаСервере
Процедура ОбработкаПереносОстатков(СтрЗаполнения)

	ТабличнаяЧасть = Объект.Движения.бит_Бюджетирование;
	
	Если СтрЗаполнения.ОчищатьТабЧасть Тогда
	
		ТабличнаяЧасть.Очистить();
	
	КонецЕсли; 
	
	ТаблицаОстатки = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтрЗаполнения.Хранилище);
	
	Для каждого Строка Из ТаблицаОстатки Цикл
		
		Если ЗначениеЗаполнено(Строка.СчетПриемника) Тогда
			
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			
			НоваяСтрока.Активность = Истина;
			
			НоваяСтрока.Период = СтрЗаполнения.ДатаТрансляции;
			
			Если Строка.СуммаРеглКт = 0 Тогда
				
				НаправлениеСчета = "Дт";
				НаправлениеДопСчета = "Кт";
				
			Иначе	
				
				НаправлениеСчета = "Кт";
				НаправлениеДопСчета = "Дт";
				
			КонецЕсли; 		
			
			НоваяСтрока["Счет"+НаправлениеСчета] = Строка.СчетПриемника;
			НоваяСтрока["Субконто"+НаправлениеСчета+"1"] = Строка.СубконтоПриемника1;
			НоваяСтрока["Субконто"+НаправлениеСчета+"2"] = Строка.СубконтоПриемника2;
			НоваяСтрока["Субконто"+НаправлениеСчета+"3"] = Строка.СубконтоПриемника3;
			НоваяСтрока["Субконто"+НаправлениеСчета+"4"] = Строка.СубконтоПриемника4;
			
			НоваяСтрока.СуммаРегл = Строка["СуммаРегл"+НаправлениеСчета];
			
			ИзменениеСуммыТекущейЗаписи(НоваяСтрока.ПолучитьИдентификатор(), "ИзменениеРеглСуммы");
			
			Если ЗначениеЗаполнено(Строка["СуммаУпр"+НаправлениеСчета]) Тогда
			
				НоваяСтрока.СуммаУпр = Строка["СуммаУпр"+НаправлениеСчета];
				
			КонецЕсли; 
			
			НоваяСтрока["Счет"+НаправлениеДопСчета] = СтрЗаполнения.ДополнительныйСчет;
			
			НоваяСтрока.ЦФО = Строка.ЦФО;
			
			//ИзменениеСчетаТекущейЗаписи(НоваяСтрока.ПолучитьИдентификатор(), НаправлениеСчета);
			//ИзменениеСчетаТекущейЗаписи(НоваяСтрока.ПолучитьИдентификатор(), НаправлениеДопСчета);
			
			// Добавление кода. Начало. 25.11.2016{{
			НоваяСтрока["Валюта" + НаправлениеСчета] = Строка.Валюта;
			Если ТаблицаОстатки.Колонки.Найти("Количество") <> Неопределено Тогда
				НоваяСтрока["Количество" + НаправлениеСчета]    = Строка.Количество;
				НоваяСтрока["ВалютнаяСумма" + НаправлениеСчета] = Строка.ВалютнаяСумма;
			ИначеЕсли ТаблицаОстатки.Колонки.Найти("КоличествоДт") <> Неопределено Тогда	
			 	НоваяСтрока["Количество" + НаправлениеСчета]    = Строка["Количество" + НаправлениеСчета];
				НоваяСтрока["ВалютнаяСумма" + НаправлениеСчета] = Строка["ВалютнаяСумма" + НаправлениеСчета];
			КонецЕсли;
			// Добавление кода. Конец. 25.11.2016}}
			
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры // ОбработкаПереносОстатков()

#КонецОбласти

#Область РазделРаботыСШаблонами

// Обработка оповещения. 
//
// Параметры:
//  Ответ               - КодВозвратаДиалога.
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура СохранитьШаблонНовыйПродолжение(Ответ, СтруктураПараметров) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда			
			СоздатьШаблонПроводокНовыйКлиент(СтруктураПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьШаблонПродолжение() 

// Процедура создает шаблон проводок. 
//
// Параметры:
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура СоздатьШаблонПроводокНовыйКлиент(СтруктураПараметров)

	СоздатьШаблонПроводокНовыйСервер(СтруктураПараметров);
	
	Если СтруктураПараметров.Свойство("ШаблонСсылка") И ТипЗнч(СтруктураПараметров.ШаблонСсылка) = Тип("СправочникСсылка.бит_ШаблоныДвижений") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СтруктураПараметров.ШаблонСсылка);
		Форма = ПолучитьФорму("Справочник.бит_ШаблоныДвижений.ФормаОбъекта", ПараметрыФормы);
		Форма.Записать();
		Форма.Открыть();
		
	КонецЕсли;

КонецПроцедуры // СоздатьШаблонПроводокНовыйКлиент()

// Процедура создает шаблон проводок на сервере. 
//
// Параметры:
//  СтруктураПараметров - Структура.
//
&НаСервере
Процедура СоздатьШаблонПроводокНовыйСервер(СтруктураПараметров)
		
	СтруктураПараметров.Вставить("ТаблицаПроводок", Объект.Движения.бит_Бюджетирование.Выгрузить());
	
	ШаблонСсылка = Неопределено;
	
	бит_МеханизмХозяйственныхОперацийСервер.СоздатьОбновитьШаблонПроводокОперация(СтруктураПараметров, ШаблонСсылка, Истина);	
	
	СтруктураПараметров.Очистить();

	СтруктураПараметров.Вставить("ШаблонСсылка", ШаблонСсылка);
	
КонецПроцедуры // СоздатьШаблонПроводок()

// Процедура выполнения команды ЗаполнитьПоШаблону
//
// Параметры:
//  ДобавитьЗагрузить - Строка.
//
&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуКлиент(ДобавитьЗагрузить)

	ТекстВопроса = НСтр("ru = 'Для продолжения необходимо записать документ. Записать?'");
	ОповещениеВопрос = Новый ОписаниеОповещения("КомандаЗаполнитьПоШаблонуПродолжение", ЭтотОбъект, ДобавитьЗагрузить);

	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);	
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Текущие движения будут очищены, продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("КомандаЗаполнитьПоШаблонуЗавершение", ЭтотОбъект, ДобавитьЗагрузить);
		
		Если ДобавитьЗагрузить = "Загрузить" И Объект.Движения.бит_Бюджетирование.Количество() > 0 Тогда
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);	
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОповещениеВопрос, КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьПоШаблону()

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ             - КодВозвратаДиалога.
//  ДобавитьЗагрузить - Строка.
//
&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуПродолжение(Ответ, ДобавитьЗагрузить) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда			
			
			ТекстВопроса = НСтр("ru = 'Текущие движения будут очищены, продолжить?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("КомандаЗаполнитьПоШаблонуЗавершение", ЭтотОбъект, ДобавитьЗагрузить);
			
			Если ДобавитьЗагрузить = "Загрузить" И Объект.Движения.бит_Бюджетирование.Количество() > 0 Тогда
				
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30);	
				
			Иначе
				
				ВыполнитьОбработкуОповещения(ОповещениеВопрос, КодВозвратаДиалога.Да);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // КомандаЗаполнитьПоШаблонуПродолжение()

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ             - КодВозвратаДиалога.
//  ДобавитьЗагрузить - Строка.
//
&НаКлиенте
Процедура КомандаЗаполнитьПоШаблонуЗавершение(Ответ, ДобавитьЗагрузить) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		РегистрБухгалтерии = ОпределитьРегистрБухгалтерииВидДокумента("РегистрБухгалтерии");
		ВидДокумента       = ОпределитьРегистрБухгалтерииВидДокумента("ВидДокумента");

		ПараметрыФормы = Новый Структура;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Регистр", РегистрБухгалтерии);
	    Отбор.Вставить("ВидДокумента", ВидДокумента);
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораШаблона", ЭтотОбъект, ДобавитьЗагрузить);
		
		ОткрытьФорму("Справочник.бит_ШаблоныДвижений.ФормаВыбора", ПараметрыФормы,,,,, ОповещениеОЗакрытии);

	КонецЕсли;

КонецПроцедуры // КомандаЗаполнитьПоШаблонуПродолжение()

// Обработка оповещения закрытия формы выбора шаблона. 
//
// Параметры:
//  Результат.
//  ДобавитьЗагрузить - Строка.
//
&НаКлиенте
Процедура ЗакрытиеФормыВыбораШаблона(Результат, ДобавитьЗагрузить) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		
		ЗаполнитьТаблицуДвиженийНаСервере(Результат, ДобавитьЗагрузить);
		
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеФормыВыбораШаблона()

// Процедура заполянет проводки по выбранному щаблону. 
//
// Параметры:
//  ШаблонСсылка     - СправочникСсылка.
//  ДобавитьЗагрузить - Строка.
//
&НаСервере
Процедура ЗаполнитьТаблицуДвиженийНаСервере(ШаблонСсылка, ДобавитьЗагрузить)

	бит_МеханизмХозяйственныхОперацийСервер.ЗаписатьДвиженияОперацияУпр(Объект.Ссылка, ШаблонСсылка, "бит_Бюджетирование", ДобавитьЗагрузить);
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры // ЗаполнитьТаблицуДвиженийНаСервере()

// Функция возвращает ссылку на объект.
//
// Параметры:
//  ИскомыйОбъект.
//
// Возвращаемое значение:
//  Строка.
//
&НаСервере
Функция ОпределитьРегистрБухгалтерииВидДокумента(ИскомыйОбъект)

	Результат = Неопределено;
	
	Если ИскомыйОбъект = "РегистрБухгалтерии" Тогда

		Результат = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоРеквизиту("ИмяРегистра", "бит_Бюджетирование", Справочники.бит_ВидыРеквизитовДвижений.ПустаяСсылка());
		
	ИначеЕсли  ИскомыйОбъект = "ВидДокумента" Тогда
	
	    Результат = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъекта", "бит_ОперацияБюджетирование");

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОпределитьРегистрБухгалтерииВидДокумента()

// Обработка оповещения. 
//
// Параметры:
//  Ответ               - КодВозвратаДиалога.
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура СохранитьШаблонПродолжение(Ответ, СтруктураПараметров) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если Записать() Тогда			
			СоздатьШаблонПроводокКлиент(СтруктураПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьШаблонПродолжение() 

// Процедура создает шаблон проводок. 
//
// Параметры:
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура СоздатьШаблонПроводокКлиент(СтруктураПараметров)

	РегистрБухгалтерии = ОпределитьРегистрБухгалтерииВидДокумента("РегистрБухгалтерии");
	ВидДокумента       = ОпределитьРегистрБухгалтерииВидДокумента("ВидДокумента");

	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Регистр", РегистрБухгалтерии);
    Отбор.Вставить("ВидДокумента", ВидДокумента);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораШаблонаСохранение", ЭтотОбъект, СтруктураПараметров);
	
	ОткрытьФорму("Справочник.бит_ШаблоныДвижений.ФормаВыбора", ПараметрыФормы,,,,, ОповещениеОЗакрытии);

КонецПроцедуры // СоздатьШаблонПроводокКлиент()

// Обработка оповещения закрыти формы выбора шаблона. 
//
// Параметры:
//  ШаблонСсылка        - СправочникСсылка.
//  СтруктураПараметров - Структура.
//
&НаКлиенте
Процедура ЗакрытиеФормыВыбораШаблонаСохранение(ШаблонСсылка, СтруктураПараметров) Экспорт

	СоздатьШаблонПроводокСервер(ШаблонСсылка, СтруктураПараметров);
	
	Если ЗначениеЗаполнено(ШаблонСсылка) И ТипЗнч(ШаблонСсылка) = Тип("СправочникСсылка.бит_ШаблоныДвижений") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ШаблонСсылка);
		Форма = ПолучитьФорму("Справочник.бит_ШаблоныДвижений.ФормаОбъекта", ПараметрыФормы);
		Форма.Записать();
		Форма.Открыть();
		
	КонецЕсли;

КонецПроцедуры // ЗакрытиеФормыВыбораШаблонаСохранение()

// Процедура создает шаблон проводок на сервере. 
//
// Параметры:
//  ШаблонСсылка.
//  СтруктураПараметров - Структура.
//
&НаСервере
Процедура СоздатьШаблонПроводокСервер(ШаблонСсылка, СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ШаблонСсылка) Тогда
		
		СтруктураПараметров.Вставить("ТаблицаПроводок", Объект.Движения.бит_Бюджетирование.Выгрузить());
		//
		//РегистрБухгалтерии = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоРеквизиту("ИмяРегистра", СтруктураПараметров.ИмяРегистра);
		
		//бит_МеханизмХозяйственныхОперацийСервер.ЗаписатьЗначенияРеквизитовДвиженийШаблонаУпр(ШаблонСсылка, РегистрБухгалтерии, ТаблицаПроводок);	
		
		бит_МеханизмХозяйственныхОперацийСервер.СоздатьОбновитьШаблонПроводокОперация(СтруктураПараметров, ШаблонСсылка);	
		
		СтруктураПараметров.ТаблицаПроводок = "";
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьШаблонПроводокСервер()

// Оповещение на вопрос о подтверждение очистки.
//
// Параметры:
//  Результат    - КодВозвратаДиалога.
//  ДопПараметры - Структура.
//
&НаКлиенте
Процедура ОтветНаПотверждениеОчистки(РезультатОтвет, ДопПараметры) Экспорт
	
	ОчищатьДанные = РезультатОтвет = КодВозвратаДиалога.Да;
    
    Если ОчищатьДанные Тогда
        ЗаполнитьДвиженияПоВыбраннымДанным(ДопПараметры.ВыбранноеЗначение, ОчищатьДанные);
    КонецЕсли;       
    
КонецПроцедуры // ОтветНаПотверждениеОчистки()

#КонецОбласти 

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	СтруктураЗаголовка.Вставить("ПроведениеРазрешено" , Ложь);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура обрабатывает начало выбора субконто.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
//  ЗначениеСубконто     - Произвольный.
//  ИмяСубконто  		 - Строка.
// 
&НаКлиенте
Процедура НачалоВыбораСубконтоБУ(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто, ИмяСубконто)
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП()
		И ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(Контейнер, СтандартнаяОбработка, ИмяСубконто);
	
	//// Изменение кода. Начало. 23.03.2015{{	
	//ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоБП()
	//	И ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
	//	
	//	// Если справочник физические лица, тогда не ставим отбор по организации,
	//	// потому что открывается форма сотрудников.
	//	
	//// Изменение кода. Конец. 23.03.2015}}	
	Иначе
		
		НачалоИмениСубконто = Лев(ИмяСубконто, 10);
		
		СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      , Объект
	                                                                                      , НачалоИмениСубконто
																						  , ЗначениеСубконто
																						  , фКоличествоСубконтоБУ);	
																						  
		// Изменение кода. Начало. 17.02.2015{{
		// Если не назначена организация, тогда и отборы по ней не делаем.
		ЕстьИзмерениеОрг = бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();
		Если НЕ ЕстьИзмерениеОрг Тогда
		
			СтруктураПараметров.Удалить("Организация");
		
		КонецЕсли; 
		// Изменение кода. Конец. 17.02.2015}}
																						  
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
	
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораСубконто()

// Процедура обрабатывает изменение субконто.
// 
// Параметры:
//  Контейнер         - Произвольный.
//  ЗначениеСубконто  - Произвольный - Текущее значение субконто.
//  ИмяСубконто  	  - Строка.
// 
&НаКлиенте
Процедура ИзменениеСубконтоБУ(Контейнер, ЗначениеСубконто, ИмяСубконто)

	НачалоИмениСубконто = Лев(ИмяСубконто, 10);
	
	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, НачалоИмениСубконто, фКоличествоСубконтоБУ);
	  
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, НачалоИмениСубконто, ЗначениеСубконто, фКоличествоСубконтоБУ);
	  
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, НачалоИмениСубконто, "", фКоличествоСубконтоБУ);																   

КонецПроцедуры // ИзменениеСубконтоБУ()

&НаКлиенте
Процедура ПроверитьПроводкуНаСторно(ТекущиеДанные, Отказ)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Период) И ЗначениеЗаполнено(фДатаСторно) Тогда
		Если ТекущиеДанные.Период = фДатаСторно Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПроводкуНаСторно()

// Процедура обрабатывает авто-подбор субконто. Устанавливаются фильтры при авто-подборе.
// 
// Параметры:
//  Элемент   - ПолеФормы.
//  Параметры - Структура
// 
&НаКлиенте
Процедура БюджетированиеСубконтоБУАвтоПодбор(Элемент, Параметры)

	ТекущиеДанные = Элементы.ДвиженияБитБюджетирование.ТекущиеДанные;
	
	ИмяСубконто       = Прав(Элемент.Имя, 11);	
	ЗначениеСубконто  = ТекущиеДанные[ИмяСубконто];	
	
	НачалоИмениСубконто = Лев(ИмяСубконто, 10);
	
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(ТекущиеДанные
                                                                                      , Объект
                                                                                      , НачалоИмениСубконто
																					  , ЗначениеСубконто
																					  , фКоличествоСубконтоБУ);	
	
	// Установим параметры выбора субконто.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
		
	Для каждого КиЗ Из СтруктураПараметров Цикл
	
		Параметры.Отбор.Вставить(КиЗ.Ключ, КиЗ.Значение);
	
	КонецЦикла; 

КонецПроцедуры // БюджетированиеСубконтоБУАвтоПодбор()

#КонецОбласти

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
