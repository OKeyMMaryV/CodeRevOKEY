#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
	// Операция (бюджетная).
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор	= "БюджетнаяОперация";
	КомандаПечати.Представление	= НСтр("ru = 'Операция (бюджетная)'");
	Если НЕ бит_ОбщегоНазначения.ЭтоУТ() Тогда
		КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КонецЕсли;
	КомандаПечати.Порядок		= 10;	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БюджетнаяОперация") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "БюджетнаяОперация",
			НСтр("ru = 'Операция (бюджетная)'"), 
			СформироватьПечатнуюФормуБюджетнаяОперация(МассивОбъектов),,
			"Документ.бит_ОперацияБюджетирование.БюджетнаяОперация");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает результат основного запроса по бюджетной операции.
// 
// Параметры:
//  МассивСсылок - Массив.
//  
// Возвращаемое значение:
//   Результат запроса.
// 
Функция ПолучитьРезультатЗапросаПоБюджетнойОперации(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок"		  , МассивСсылок);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БюджетированиеДвиженияССубконто.Регистратор КАК Ссылка,
	|	БюджетированиеДвиженияССубконто.Сценарий 	КАК Сценарий,
	|	БюджетированиеДвиженияССубконто.Содержание 	КАК Содержание,
	|	БюджетированиеДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	БюджетированиеДвиженияССубконто.ЦФО,
	|	БюджетированиеДвиженияССубконто.СчетДт,
	|	БюджетированиеДвиженияССубконто.СубконтоДт1,
	|	БюджетированиеДвиженияССубконто.СубконтоДт2,
	|	БюджетированиеДвиженияССубконто.СубконтоДт3,
	|	БюджетированиеДвиженияССубконто.СубконтоДт4,
	|	БюджетированиеДвиженияССубконто.СчетКт,
	|	БюджетированиеДвиженияССубконто.СубконтоКт1,
	|	БюджетированиеДвиженияССубконто.СубконтоКт2,
	|	БюджетированиеДвиженияССубконто.СубконтоКт3,
	|	БюджетированиеДвиженияССубконто.СубконтоКт4,
	|	БюджетированиеДвиженияССубконто.ВалютаДт,
	|	БюджетированиеДвиженияССубконто.ВалютаКт,
	|	БюджетированиеДвиженияССубконто.СуммаРегл,
	|	БюджетированиеДвиженияССубконто.СуммаУпр,
	|	БюджетированиеДвиженияССубконто.СуммаСценарий,
	|	БюджетированиеДвиженияССубконто.ВалютнаяСуммаДт,
	|	БюджетированиеДвиженияССубконто.ВалютнаяСуммаКт,
	|	БюджетированиеДвиженияССубконто.КоличествоДт,
	|	БюджетированиеДвиженияССубконто.КоличествоКт
	|	
	|ИЗ
	|	РегистрБухгалтерии.бит_Бюджетирование.ДвиженияССубконто(, , Регистратор В (&МассивСсылок), , ) КАК БюджетированиеДвиженияССубконто
    |
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(Сценарий),
	|	МАКСИМУМ(Содержание)
	|ПО
	|	Ссылка
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция формирует печатную форму бюджетной операции.
// 
// Параметры:
//  МассивСсылок - Массив.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуБюджетнаяОперация(МассивСсылок)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_ОперацияБюджетирование_БюджетнаяОперация";
			
	// Формируем запрос по документам.
	РезультатЗапроса = ПолучитьРезультатЗапросаПоБюджетнойОперации(МассивСсылок);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		// Получаем макет и области.
		Макет = ПолучитьМакет("БюджетнаяОперация");
		// Получаем области.
		ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьСтрокаТаблицы  	= Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьПодвалТаблицы    = Макет.ПолучитьОбласть("ПодвалТаблицы");
		ОбластьПодвал  	 	 	= Макет.ПолучитьОбласть("Подвал");
		
		
		// Вывод результатов.
		ПервыйДокумент   = Истина;
		ВыборкаИзЗапросаВерх = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		Пока ВыборкаИзЗапросаВерх.Следующий() Цикл
					
			// Разделитель страниц.
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;

			// Текущий документ.
			ТекДокумент = ВыборкаИзЗапросаВерх.Ссылка;
			
			// Вывод шапки документа.
			ОбластьШапка.Параметры.Сценарий       = ТекДокумент.Сценарий;
			ОбластьШапка.Параметры.НомерДокумента = бит_ОбщегоНазначенияКлиентСервер.ПолучитьНомерНаПечать(ТекДокумент);
			ОбластьШапка.Параметры.ДатаДокумента  = Формат(ТекДокумент.Дата, "ДЛФ=D");
			ОбластьШапка.Параметры.Содержание     = ТекДокумент.Содержание; 			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			// Вывод заголовка таблицы.
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);

			
			// Вывод таблицы движений.
			ВыборкаИзЗапросаДвижения = ВыборкаИзЗапросаВерх.Выбрать();		
			Пока ВыборкаИзЗапросаДвижения.Следующий() Цикл
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаИзЗапросаДвижения);
		
				АналитикаДт = Строка(ВыборкаИзЗапросаДвижения.СубконтоДт1) + Символы.ПС
							+ Строка(ВыборкаИзЗапросаДвижения.СубконтоДт2) + Символы.ПС
							+ Строка(ВыборкаИзЗапросаДвижения.СубконтоДт3) + Символы.ПС
							+ Строка(ВыборкаИзЗапросаДвижения.СубконтоДт4);
							
				АналитикаКт = Строка(ВыборкаИзЗапросаДвижения.СубконтоКт1) + Символы.ПС
							+ Строка(ВыборкаИзЗапросаДвижения.СубконтоКт2) + Символы.ПС
							+ Строка(ВыборкаИзЗапросаДвижения.СубконтоКт3) + Символы.ПС
							+ Строка(ВыборкаИзЗапросаДвижения.СубконтоКт4);
							
				ОбластьСтрокаТаблицы.Параметры.АналитикаДт = АналитикаДт;
				ОбластьСтрокаТаблицы.Параметры.АналитикаКт = АналитикаКт;
											 
				// Проверим, помещается ли строка с подвалом.
				СтрокаСПодвалом = Новый Массив;
				СтрокаСПодвалом.Добавить(ОбластьСтрокаТаблицы);
				СтрокаСПодвалом.Добавить(ОбластьПодвалТаблицы);
				СтрокаСПодвалом.Добавить(ОбластьПодвал);
				
				Если НЕ бит_ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
					
					// Выведем подвал таблицы.
					ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
						
					// Выведем разрыв страницы.
					Если Не ПервыйДокумент Тогда
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					ПервыйДокумент = Ложь;


					// Выведем заголовок таблицы.
					ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
					
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);			
				
			КонецЦикла;
	
		    // Вывод подвала таблицы движений.
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
			
			// Вывод подвала документа
			// !!!БИТ.СДЕЛАТЬ - вывод исполнителя по физ. лицу?
			// Ответственный = ТекДокумент.Ответственный;
			// ОбластьПодвал.Параметры.РасшифровкаПодписиИсполнителя = 
			// 		?(НЕ ЗначениеЗаполнено(Ответственный)
			// 			, ""
			// 			, ОбщегоНазначения.ФамилияИнициалыФизЛица(Ответственный.ФизЛицо));
			ОбластьПодвал.Параметры.РасшифровкаПодписиИсполнителя = ТекДокумент.Ответственный;
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		КонецЦикла;
		
	КонецЕсли;

	// Параметры макета по умолчанию.
	// ТабличныйДокумент.ПолеСверху              = 10;
	// ТабличныйДокумент.ПолеСлева               = 0;
	// ТабличныйДокумент.ПолеСнизу               = 0;
	// ТабличныйДокумент.ПолеСправа              = 0;
	// ТабличныйДокумент.РазмерКолонтитулаСверху = 10;
	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб 			  = Истина;
	
	Возврат ТабличныйДокумент;
		
КонецФункции

#КонецОбласти

#КонецЕсли
