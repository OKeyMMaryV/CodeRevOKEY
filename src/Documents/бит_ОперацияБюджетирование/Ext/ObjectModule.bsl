#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мВалютаУправленческогоУчета Экспорт; // Хранит валюту управленческого учета.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Заполнение нового документа.
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		// Заполнение шапки.
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
		                                               , бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
													   , Неопределено);
				
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
	ЭтоНовыйДокумент = Ссылка.Пустая();

	Если ЭтоНовыйДокумент Тогда
		
		РанееУстановленнаяПометкаУдаления = Ложь;
		
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СсылкаНаОперацию", Ссылка); 
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК Поле1
		|ИЗ
		|	Документ.бит_ОперацияБюджетирование КАК Операция
		|ГДЕ
		|	Операция.Ссылка = &СсылкаНаОперацию
		|	И Операция.ПометкаУдаления = ЛОЖЬ";
		Результат = Запрос.Выполнить();
		
		РанееУстановленнаяПометкаУдаления = Результат.Пустой();
		
	КонецЕсли;

	Если ПометкаУдаления <> РанееУстановленнаяПометкаУдаления Тогда

		Для каждого ПроводкиДокумента из Движения Цикл

			Если (НЕ ПроводкиДокумента.Модифицированность()) И (НЕ ПроводкиДокумента.Выбран()) И
			     (НЕ ЭтоНовыйДокумент) Тогда

				ПроводкиДокумента.Прочитать();

			КонецЕсли;

			КоличествоПроводок = ПроводкиДокумента.Количество();

			Если КоличествоПроводок > 0 Тогда

				// Определяем текущую активность проводок по первой проводке.
				ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;
				НужнаяАктивностьПроводок  = НЕ ПометкаУдаления;

				Если ТекущаяАктивностьПроводок <> НужнаяАктивностьПроводок Тогда
					ПроводкиДокумента.УстановитьАктивность(НужнаяАктивностьПроводок);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;
    
	КонецЕсли;

	ПересчитатьСуммуОперации();
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)

	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.бит_ОперацияБюджетирование") Тогда
		Возврат;
	КонецЕсли;

	Сценарий      = ОбъектКопирования.Сценарий;
	Комментарий   = ОбъектКопирования.Комментарий;
	Содержание    = ОбъектКопирования.Содержание;
	Ответственный = Пользователи.ТекущийПользователь();

	ДвиженияБюджетирования = РегистрыБухгалтерии.бит_Бюджетирование.ВыбратьПоРегистратору(ОбъектКопирования.Ссылка);

	Пока ДвиженияБюджетирования.Следующий() Цикл

        Если ДвиженияБюджетирования.Период = ОбъектКопирования.ДатаСторно Тогда
            Продолжить;       
        КонецЕсли;
        
		Проводка = Движения.бит_Бюджетирование.Добавить();

		Проводка.СчетДт          = ДвиженияБюджетирования.СчетДт;
		Проводка.СчетКт          = ДвиженияБюджетирования.СчетКт;

		Для каждого Субконто Из ДвиженияБюджетирования.СубконтоДт Цикл
			Проводка.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из ДвиженияБюджетирования.СубконтоКт Цикл
			Проводка.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Проводка.ВалютаДт        = ДвиженияБюджетирования.ВалютаДт;
		Проводка.ВалютаКт        = ДвиженияБюджетирования.ВалютаКт;
		Проводка.ВалютнаяСуммаДт = ДвиженияБюджетирования.ВалютнаяСуммаДт;
		Проводка.ВалютнаяСуммаКт = ДвиженияБюджетирования.ВалютнаяСуммаКт;
		Проводка.КоличествоДт    = ДвиженияБюджетирования.КоличествоДт;
		Проводка.КоличествоКт    = ДвиженияБюджетирования.КоличествоКт;
		Проводка.НомерЖурнала    = ДвиженияБюджетирования.НомерЖурнала;
		Проводка.Сценарий        = ДвиженияБюджетирования.Сценарий;
        Проводка.ЦФО             = ДвиженияБюджетирования.ЦФО;
		Проводка.Содержание      = ДвиженияБюджетирования.Содержание;
		Проводка.СуммаРегл       = ДвиженияБюджетирования.СуммаРегл;
        Проводка.СуммаУпр        = ДвиженияБюджетирования.СуммаУпр;
        Проводка.СуммаСценарий   = ДвиженияБюджетирования.СуммаСценарий;
        
	КонецЦикла;
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Пересчет валютной суммы в основную по курсу на указанную дату.
// 
// Параметры:
//  ВалютнаяСумма - Число.
//  Валюта        - СправочникСсылка.Валюты.
//  Дата          - Дата.
// 
// Возвращаемое значение:
//  Число.
// 
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Если ВалютнаяСумма = Null Тогда
		ВалютнаяСумма = 0;	
	КонецЕсли;
	
	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

// Процедура выполняет расчет сумм в текущей строке.
// 
// Параметры:
//  ТекущаяСтрока      - СтрокаТабличногоПоля.ДвиженияБитБюджетирование.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
//  Действие		   - Строка (По умолчанию = "").
// 
Процедура ВыполнитьРасчетСуммВТекущейСтроке(ТекущаяСтрока, ВалютаДляПересчета, СуммаДляПересчета, Действие = "") Экспорт
    
    ЭтоИзменениеОснСуммы = Действие = "ИзменениеРеглСуммы"
                           Или Действие = "ИзменениеУпрСуммы";
						   
	КурсКратностьВалютыСтроки   = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий,ВалютаДляПересчета,Дата);
	КурсКратностьВалютыСценария = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий,Сценарий.Валюта,Дата);
	КурсКратностьВалютыУпрУчета = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий,мВалютаУправленческогоУчета,Дата);
    
    Если Не ЭтоИзменениеОснСуммы
        Или (ЭтоИзменениеОснСуммы И ТекущаяСтрока.СуммаСценарий = 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
		
	        ТекущаяСтрока.СуммаСценарий = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
	                                                                                      ВалютаДляПересчета, Сценарий.Валюта,
	                                                                                      КурсКратностьВалютыСтроки.Курс, КурсКратностьВалютыСценария.Курс,
	                                                                                      КурсКратностьВалютыСтроки.Кратность, КурсКратностьВалютыСценария.Кратность);
																					  
		Иначе
			ТекущаяСтрока.СуммаСценарий = 0;
		КонецЕсли;	
		
	КонецЕсли;
    
    Если Не Действие = "ИзменениеРеглСуммы"
        И Не (Действие = "ИзменениеУпрСуммы" И ТекущаяСтрока.СуммаРегл <> 0) Тогда
        
        ТекущаяСтрока.СуммаРегл = ПересчетСуммыПоКурсу(СуммаДляПересчета, ВалютаДляПересчета, Дата);
        
    КонецЕсли;
    
    Если Не Действие = "ИзменениеУпрСуммы"
        И Не (Действие = "ИзменениеРеглСуммы" И ТекущаяСтрока.СуммаУпр <> 0) Тогда
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
	        ТекущаяСтрока.СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
	                                                                                 ВалютаДляПересчета, мВалютаУправленческогоУчета,
	                                                                                 КурсКратностьВалютыСтроки.Курс, КурсКратностьВалютыУпрУчета.Курс,
	                                                                                 КурсКратностьВалютыСтроки.Кратность, КурсКратностьВалютыУпрУчета.Кратность);
																					 
		Иначе
			ТекущаяСтрока.СуммаУпр = 0;
		КонецЕсли;	
		
	КонецЕсли;
    
КонецПроцедуры // ВыполнитьРасчетСуммВТекущейСтроке()

// Процедура выполняет расчет валютных сумм в текущей строке.
// 
// Параметры:
//  ТекущаяСтрока      - СтрокаТабличногоПоля.ДвиженияБитБюджетирование.
//  ВалютаДляПересчета - СправочникСсылка.Валюты.
//  СуммаДляПересчета  - Число.
// 
Процедура ВыполнитьРасчетВалютныхСуммВТекущейСтроке(ТекущаяСтрока, ВалютаДляПересчета, СуммаДляПересчета) Экспорт
    
    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДт);
    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетКт);
    
    Если СвСчДт.Валютный 
        И ТекущаяСтрока.ВалютнаяСуммаДт = 0 Тогда

		КурсКратностьВалютыСтроки    = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ТекущаяСтрока.ВалютаДт, Дата);
		КурсКратностьВалютыПересчета = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДляПересчета    , Дата);
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
	        ТекущаяСтрока.ВалютнаяСуммаДт = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
	                                                                                        ВалютаДляПересчета, ТекущаяСтрока.ВалютаДт,
	                                                                                        КурсКратностьВалютыПересчета.Курс, КурсКратностьВалютыСтроки.Курс,
	                                                                                        КурсКратностьВалютыПересчета.Кратность, КурсКратностьВалютыСтроки.Кратность);
																							
		Иначе
			ТекущаяСтрока.ВалютнаяСуммаДт = 0;
		КонецЕсли;	
		
	ИначеЕсли Не СвСчДт.Валютный
        И СвСчКт.Валютный
        И ТекущаяСтрока.ВалютнаяСуммаКт = 0 Тогда

		КурсКратностьВалютыСтроки    = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ТекущаяСтрока.ВалютаКт, Дата);
		КурсКратностьВалютыПересчета = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДляПересчета    , Дата);
		
		Если Не КурсКратностьВалютыСтроки.Курс = 0 Тогда
			
			ТекущаяСтрока.ВалютнаяСуммаКт = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
	                                                                                        ВалютаДляПересчета, ТекущаяСтрока.ВалютаКт,
	                                                                                        КурсКратностьВалютыПересчета.Курс, КурсКратностьВалютыСтроки.Курс,
	                                                                                        КурсКратностьВалютыПересчета.Кратность, КурсКратностьВалютыСтроки.Кратность);
																							
		Иначе
			ТекущаяСтрока.ВалютнаяСуммаКт = 0;
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры // ВыполнитьРасчетВалютныхСуммВТекущейСтроке()

// Пересчитывает сумму операции при изменении сумм в проводках.
// 
Процедура ПересчитатьСуммуОперации() Экспорт

    СуммаОперацииСценарий = 0;
    СуммаОперацииРегл     = 0;
	СуммаОперацииУпр      = 0;
	
    Для каждого Проводка Из Движения.бит_Бюджетирование Цикл
        
        // Сторно не будем учитывать в суммах документа.
		Если Проводка.Период = ДатаСторно Тогда
			Продолжить;
        КонецЕсли;
        
        СуммаОперацииСценарий = СуммаОперацииСценарий + Проводка.СуммаСценарий;
        СуммаОперацииРегл     = СуммаОперацииРегл + Проводка.СуммаРегл;
		СуммаОперацииУпр      = СуммаОперацииУпр  + Проводка.СуммаУпр;
        
    КонецЦикла;
	
КонецПроцедуры // ПересчитатьСуммуОперации()
                   
// Возвращает доступные варианты печати документа.
// 
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("БюджетнаяОперация", "Операция (бюджетная)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУправленческогоУчета     = Константы.бит_ВалютаУправленческогоУчета.Получить();

#КонецОбласти

#КонецЕсли
