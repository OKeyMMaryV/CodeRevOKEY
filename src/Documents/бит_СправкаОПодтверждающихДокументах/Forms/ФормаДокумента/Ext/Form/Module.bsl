
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    // СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли; 
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовокФормыДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	ДействующаяСправка = Документы.бит_СправкаОПодтверждающихДокументах.ДействующаяСправка(Объект.ПаспортСделки, Объект.ДатаЗаполнения, Объект.Ссылка);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_СправкаОПодтверждающихДокументах";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УправлениеЭлементамиФормы();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПодтверждающийДокументПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПодтверждающиеДокументы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ПодтверждающийДокумент) Тогда
		
		СтрокаРеквизитов =  "Номер,Дата,ВалютаДокумента";
		Если ТипЗнч(ТекДанные.ПодтверждающийДокумент) <> Тип("ДокументСсылка.ГТДИмпорт")
			И ТипЗнч(ТекДанные.ПодтверждающийДокумент) <> Тип("ДокументСсылка.КорректировкаДолга") Тогда
			
			СтрокаРеквизитов = СтрокаРеквизитов + ",СуммаДокумента";
			
		КонецЕсли;
		
		СтруктураРеквизитов = бит_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекДанные.ПодтверждающийДокумент, СтрокаРеквизитов);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураРеквизитов);
		ПересчитатьСуммы(ТекДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПередУдалением(Элемент, Отказ)
	
	Если НЕ ПроверитьВозможностьУдаленияСтроки() Тогда 
		
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ПроверитьВозможностьУдаленияСтроки() Тогда 
		
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПаспортСделкиПриИзменении(Элемент)
	
	СформироватьНадписьПараметрыПаспортаСделки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыВалютаДокументаПриИзменении(Элемент)
	
	ПересчитатьСуммы(Элементы.ПодтверждающиеДокументы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыСуммаДокументаПриИзменении(Элемент)
	
	ПересчитатьСуммы(Элементы.ПодтверждающиеДокументы.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодтверждающиеДокументы

&НаКлиенте
Процедура ПодтверждающиеДокументыКодВидаПодтверждающегоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПодтверждающиеДокументы.ТекущиеДанные;
	
	ВыборКодаИзМакета(ТекущиеДанные.ПолучитьИдентификатор(), "КодВидаПодтверждающегоДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПризнакПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПодтверждающиеДокументы.ТекущиеДанные;
	
	ВыборКодаИзМакета(ТекущиеДанные.ПолучитьИдентификатор(), "ПризнакПоставки");
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет необходимые параметры для работы формы.
// 
&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ДействующаяСправка   = Документы.бит_СправкаОПодтверждающихДокументах.ДействующаяСправка(Объект.ПаспортСделки, Объект.ДатаЗаполнения, Объект.Ссылка);
	ПредставлениеОбъекта = Объект.Ссылка.Метаданные().ПредставлениеОбъекта;
	ВалютаРеглУчета      = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СформироватьНадписьПараметрыПаспортаСделки();
	
КонецПроцедуры // ПодготовитьФормуНаСервере()

// Процедура устнавливает заголовок формы.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура управляем видимостью-доступностью элементов формы. 
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()

	Элементы.ПодтверждающиеДокументы.ИзменятьПорядокСтрок = НЕ Объект.Корректировка;
	Элементы.ДействующаяСправка.Видимость                 = (НЕ ДействующаяСправка.Пустая());
	
	Элементы.ПодтверждающиеДокументыПризнакКорректировки.Доступность = Объект.Корректировка;
	
	Элементы.ПорядковыйНомерКорректировки.Видимость = Объект.Корректировка;											
													
	УстановитьДоступностьЭлементов();
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // УправлениеЭлементамиФормы()

&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтаФорма, Объект, Статус);
	
КонецПроцедуры

// Процедура устанавливает доступность элементам формы.
// 
// Параметры:
//  Доступность - Булево.
// 
&НаСервере
Процедура УстановитьДоступностьЭлементов()

	ЭлементыТолькоПросмотр = ?( Статус = Справочники.бит_СтатусыОбъектов.СправкаОПодтверждающихДокументах_Черновик
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Ложь, Истина);

	Исключения = Новый Массив();
	Исключения.Добавить(ВРег("Корректировка"));
			
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") 
			И Исключения.Найти(ВРег(Элемент.Имя)) = Неопределено Тогда  
			Элемент.ТолькоПросмотр = ЭлементыТолькоПросмотр;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыборКодаИзМакета(ИД, НаименованиеЭлемента)
	
	Если НаименованиеЭлемента = "ПризнакПоставки" Тогда
	
		НаименованиеОбласти = "КодыПризнаковПоставок";
		
	Иначе	
		НаименованиеОбласти = "КодыВидовПодтверждающихДокументов";	
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",			"Документ");
	ПараметрыФормы.Вставить("НаименованиеОбъекта",	"бит_СправкаОПодтверждающихДокументах");
	ПараметрыФормы.Вставить("НаименованиеМакета",	"КодыДляПодтверждающихДокументов");
	ПараметрыФормы.Вставить("НаименованиеОбласти",	НаименованиеОбласти);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИДСтроки", ИД);
	ДополнительныеПараметры.Вставить("НаименованиеЭлемента", НаименованиеЭлемента);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПризнакаПлатежаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.бит_СправкаОПодтверждающихДокументах.Форма.ФормаВыбораИзМакета", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

// Процедура окончание процедуры "ВыборПризнакаПлатежа". 
//
// Параметры:
//  РезультатВыбора - Структура.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте 
Процедура ВыборПризнакаПлатежаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйКод = РезультатЗакрытия;	
	
	Если ВыбранныйКод <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		ТекСтрока = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки);	
		ТекСтрока[ДополнительныеПараметры.НаименованиеЭлемента] = ВыбранныйКод;
		
	КонецЕсли;
	
КонецПроцедуры // ВыборПризнакаПлатежаЗавершение()

// Функция возможность редактирования списка номенклатуры.
// 
&НаСервере
Функция ПроверитьВозможностьУдаленияСтроки()

	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.СправкаОПодтверждающихДокументах_Черновик);
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	Если ТипЗнч(МассивСтатусов.Найти(Статус)) = Тип("Неопределено") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ПроверитьВозможностьРедактированияСпискаНоменклатуры()

&НаСервере
Процедура СформироватьНадписьПараметрыПаспортаСделки()
	
	СтрПараметровПС = бит_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ПаспортСделки, "ДоговорКонтрагента, ВалютаДоговора");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрПараметровПС);
	
	ДоговорВалюта = "%1; %2";
	ДоговорВалюта = СтрШаблон(ДоговорВалюта,
								?(ЗначениеЗаполнено(ДоговорКонтрагента),ДоговорКонтрагента,"<без договора>"),
								?(ЗначениеЗаполнено(ВалютаДоговора),ВалютаДоговора, ВалютаРеглУчета));
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммы(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ВалютаДокумента = ВалютаДоговора Тогда
		ТекущаяСтрока.СуммаВВалютеДоговора = 0;
	Иначе
		ТекущаяСтрока.СуммаВВалютеДоговора = бит_ОбщегоНазначения.ПересчитатьВВалюту(
			ТекущаяСтрока.СуммаДокумента,
			ТекущаяСтрока.ВалютаДокумента, 
			ВалютаДоговора,
			Объект.ДатаЗаполнения);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти 
