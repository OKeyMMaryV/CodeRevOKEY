
#Область ОписаниеПеременных

&НаКлиенте
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы.

&НаКлиенте
Перем мНастройкиСубконтоСчетовМУ; // Хранит настройки видимости полей субконто.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	ЗаполнитьКэшЗначений();
					
	// Максимальное количество субконто на счете по МУ.
	фКоличествоСубконтоМУ = 4;
	
	// Средний курс аванса
	фСреднийКурсАванса = 1;    	
	
	// Значения по умолчанию для сохраняемых реквизитов формы.
	фОтображатьПанельДанныхСтроки = Ложь;
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	УстановитьПодменюВыбораВидаОперации();	
                        
	Если Параметры.Ключ.Пустая() Тогда  		
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)); 
		УстановитьСостояниеДокумента();
	Иначе 		
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(Ложь); 		
	КонецЕсли;

	// Параметры учетной политики
	фПараметрыУчетнойПолитики = Документы.бит_му_ПринятиеКУчетуОС.ПолучитьПараметрыУчетнойПолититки(Объект.Организация, Объект.Дата);
	
	СпособРасчетаЭСП = бит_му_ОбщегоНазначения.ПолучитьСпособРасчетаЭСП(Объект.Организация);
	
	СтруктураПараметров = Документы.бит_му_ПринятиеКУчетуОС.ПолучитьСреднийКурсАвансаИВалютуДоговора(Объект.Организация,
	                                                                                                 Объект.Контрагент,
																									 Объект.ДоговорКонтрагента,
	                                                                                                 Объект.ВалютаДокумента, 
																									 Объект.Дата,
	                                                                                                 Объект.СчетУчетаАванса);
																									 
    фВалютаДоговора    = СтруктураПараметров.ВалютаДоговора;
	фСреднийКурсАванса = СтруктураПараметров.СреднийКурсАвансаМУ;
	
	// Установка связей параметров выбора и связей по типу субконто.
	УстановитьСвязиСубконто("СчетУчета", "Субконто"   , "ОсновныеСредства");
	УстановитьСвязиСубконто("КорСчет"  , "КорСубконто", "ОсновныеСредства");
	УстановитьСвязиСубконто("СчетУчета", "Субконто"   , "ДанныеСтроки");
	УстановитьСвязиСубконто("КорСчет"  , "КорСубконто", "ДанныеСтроки");											   
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	УстановитьСвязиСубконто("СчетДт", "СубконтоДт", "бит_окей_СоставОсновныхСредств", "Элементы.бит_окей_СоставОсновныхСредств.ТекущиеДанные");
	УстановитьСвязиСубконто("СчетКт", "СубконтоКт", "бит_окей_СоставОсновныхСредств", "Элементы.бит_окей_СоставОсновныхСредств.ТекущиеДанные");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// Восстановление отображения субконто по количеству доступных.
	ВосстановитьКоличествоДоступныхСубконто();
	
	// Заполнить соответствие объектов ОС и их инвентарных номеров.
	СоответствиеОС_ИнвентарныйНомер = Новый Соответствие;
	бит_му_ВНА.ЗаполнитьИнвентарныеНомераТаблицыОС(Объект.ОсновныеСредства, Объект.Организация, СоответствиеОС_ИнвентарныйНомер);	
	фКэшЗначений.Вставить("СоответствиеОС_ИнвентарныйНомер", СоответствиеОС_ИнвентарныйНомер);
	    	
	НастроитьОформлениеФормы();
	
	УстановитьПараметрыВыбораДляСчетов();
		
	ВалютаДокумента    = Объект.ВалютаДокумента;
	КурсДокумента  	   = Объект.КурсДокумента;
	КратностьДокумента = Объект.КратностьДокумента;
	
	//БИТ Изюмов А.В. 02.08.12
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.бит_окей_ДатаПринятияКУчету = ТекущаяДата();
	КонецЕсли;
	//БИТ Изюмов А.В. 02.08.12
	
	// +СБ. Пискунова Виктория. 2016-11-25. #2372
	СБ_РаботаСФормамиОбъекты.бит_му_ПринятиеКУчетуОСФормаДокументаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -СБ. Пискунова Виктория. 2016-11-25. #2372
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )	

			// Вид операции
			СформироватьДеревоВидовОпераций();
			
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
			//Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
			//	
			//	ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
			//	
			//Иначе 
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (		
		//	КонецЕсли;	
		//		
		//Иначе
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )	
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание(Отказ);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (	
		//КонецЕсли;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )				
		
		//БИТ Изюмов А.В. 02.08.12 для типового ввода начальных остатков назначим счет нераспределенной прибыли как "служебный"
		ЗаполнитьСчетНРП()
		//БИТ Изюмов А.В. 02.08.12
		
	Иначе
		
		ПриОткрытииОкончание(Отказ);
		
	КонецЕсли;
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//Изюмов А.В. 02.08.12 <--- оставим типовую обработку для не консолидированных документов
	//Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ВыбранноеЗначение, "РезультатИзменения") Тогда
	//	
	//	ПерезаполнитьТабличнуюЧасть(ВыбранноеЗначение.ХранилищеДанные);
	//	
	//	Модифицированность = Истина;
	//	
	//ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	//	
	//	Если ВыбранноеЗначение.Свойство("Действие") Тогда
	//		
	//		Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
	//			
	//			Если Объект.ОсновныеСредства.Количество() > 0 Тогда
	//				
	//				Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
	//				ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
	//				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	//				
	//			Иначе
	//				
	//				ДобавитьЗагрузитьОС(ВыбранноеЗначение);		  
	//				
	//			КонецЕсли;
	//			
	//		Иначе
	//			
	//			ДобавитьЗагрузитьОС(ВыбранноеЗначение);		  
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли; // В структуре есть поле действие 
	//КонецЕсли; // Это структура	
	ПереченьВидовОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС;
	Если НЕ Объект.ВидОперации = ПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС И НЕ Объект.ВидОперации = ПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС Тогда 

		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ВыбранноеЗначение, "РезультатИзменения") Тогда
			
			ПерезаполнитьТабличнуюЧасть(ВыбранноеЗначение.ХранилищеДанные);
			
			Модифицированность = Истина;
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			Если ВыбранноеЗначение.Свойство("Действие") Тогда
				
				Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
					
					Если Объект.ОсновныеСредства.Количество() > 0 Тогда
						
						Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
						ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
						ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
						
					Иначе
						
						//ДобавитьЗагрузитьОС(ВыбранноеЗначение);		  
						ДобавитьЗагрузитьОС(ВыбранноеЗначение, мНастройкиСубконтоСчетовМУ);
						
					КонецЕсли;
					
				Иначе
					
					//ДобавитьЗагрузитьОС(ВыбранноеЗначение);		  
					ДобавитьЗагрузитьОС(ВыбранноеЗначение, мНастройкиСубконтоСчетовМУ);
					
				КонецЕсли;
				
			КонецЕсли; // В структуре есть поле действие 
		КонецЕсли; // Это структура
	
	Иначе   //БИТ Изюмов А.В. 02.08.12 добавим свою обработку выбора для консолидированных документов
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			Если ВыбранноеЗначение.Свойство("Действие") Тогда
				
				ТаблицаДанных = ВыбранноеЗначение.Данные;
				
				Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
					
					Если Объект.бит_окей_СоставОсновныхСредств.Количество()>0 Тогда
						Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
						Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
							Возврат;
						КонецЕсли;
						Объект.бит_окей_СоставОсновныхСредств.Очистить();
					КонецЕсли; 
					
				КонецЕсли; 
				
				ОбработкаВыбора_НаСервере(ВыбранноеЗначение);
			КонецЕсли; // в структуре есть поле действие 
			
		КонецЕсли; // это структура
		Объект.бит_окей_ПервоначальнаяСтоимость = Объект.бит_окей_СоставОсновныхСредств.Итог("Сумма");
	КонецЕсли;	 //БИТ Изюмов А.В. 02.08.12
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - завершение выбора ОС. 
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ДобавитьЗагрузитьОС(ДополнительныеПараметры);
	ДобавитьЗагрузитьОС(ДополнительныеПараметры, мНастройкиСубконтоСчетовМУ);	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = УникальныйИдентификатор Тогда
		
		Если ИмяСобытия = "ВосстановитьЗагруженныеИзExcelДанные" Тогда	        
	        ВосстановитьЗагруженныеИзExcelДанные(Параметр.ИмяТабЧасти, Параметр.Ссылка);			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	ВосстановитьОтображениеДанныхФормы();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ИзменитьОтображениеДанныхСтрокиСервер();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ПринятиеКУчетуОС";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеДатыСервер();
	ДобавитьВКэш(Элемент.Имя);
	
	ИзменениеВалютыКлиент();
	
	Если Объект.СпособПолученияСтавки = ПредопределенноеЗначение("Перечисление.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ")
		И Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		ТекстВопрса = НСтр("ru = 'Дата документа изменена, пересчитать документ?'");
		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияДатаПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопрса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещенияДатаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		РассчитатьВсеСервер();
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если мКэшРеквизитовФормы.Организация <> Объект.Организация Тогда
	
		Если Объект.ОсновныеСредства.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект, Элемент);
			ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
		Иначе
			
			ТекстСообщения = "";
			ИзменениеОрганизацииСервер(ТекстСообщения);
			ВывестиТекстСообщенийПользователю(ТекстСообщения);
			
			ДобавитьВКэш(Элемент.Имя);
	
			УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);
			
		КонецЕсли;
		
	Иначе
		
		ДобавитьВКэш(Элемент.Имя);
	
		УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);
	
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик оповещения "ОбработатьИзменениеОрганизации".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ИзвлечьИзКэша(ДополнительныеПараметры.Имя);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	ИзменениеОрганизацииСервер(ТекстСообщения);
	ВывестиТекстСообщенийПользователю(ТекстСообщения);
	
	ДобавитьВКэш(ДополнительныеПараметры.Имя);
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверитьВыбранноеПодразделение(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // ПодразделениеОбработкаВыбора()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отбор таблицы "Основные средства"

&НаКлиенте
Процедура фОтборОС_ВсеПриИзменении(Элемент)
	
	Если фОтборОС_Все Тогда
		фОтборОС_ОС 	   = Ложь;
		фОтборОС_КСписанию = Ложь;
	КонецЕсли;
	
	Элементы.ОсновныеСредства.ОтборСтрок = Новый ФиксированнаяСтруктура();
	
КонецПроцедуры // ФОтборОС_ВсеПриИзменении()

&НаКлиенте
Процедура фОтборОС_ОСПриИзменении(Элемент)
	
	Если фОтборОС_ОС Тогда
		фОтборОС_Все 	   = Ложь;
		фОтборОС_КСписанию = Ложь;
	КонецЕсли;
	
	Элементы.ОсновныеСредства.ОтборСтрок = Новый ФиксированнаяСтруктура("УчитыватьКакОС", Истина);
	
КонецПроцедуры // ФОтборОС_ОСПриИзменении()

&НаКлиенте
Процедура фОтборОС_КСписаниюПриИзменении(Элемент)
	
	Если фОтборОС_КСписанию Тогда
		фОтборОС_Все = Ложь;
		фОтборОС_ОС  = Ложь;
	КонецЕсли;
	
	Элементы.ОсновныеСредства.ОтборСтрок = Новый ФиксированнаяСтруктура("УчитыватьКакОС", Ложь);
	
КонецПроцедуры // ФОтборОС_КСписаниюПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// Аренда

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзмененДоговор = Ложь;
	ИзменениеКонтрагентаСервер(ИзмененДоговор);
	Если ИзмененДоговор Тогда
	 	ИзменениеДоговораКонтрагента();
	КонецЕсли;
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);

		
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Изменение кода. Начало. 19.01.2017{{
    Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
    	Элементы.ДоговорКонтрагента.ВыбиратьТип = Ложь;
    Иначе
    	Элементы.ДоговорКонтрагента.ВыбиратьТип = Истина;
    КонецЕсли;
    // Изменение кода. Конец. 19.01.2017}}
    
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент);
											
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ИзменениеДоговораКонтрагента();
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

&НаКлиенте
Процедура СпособПолученияСтавкиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьПоНоминальнойСтавке();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаАвансаПриИзменении(Элемент)
	
	РассчитатьОбщуюСуммуАвансаСервер();
	
	ПроверитьПризнакВалютныйУСчета("СчетУчетаАванса");
	
КонецПроцедуры // СчетУчетаАвансаПриИзменении()

&НаКлиенте
Процедура СчетУчетаДолгосрочныйПриИзменении(Элемент)
	
	ПроверитьПризнакВалютныйУСчета("СчетУчетаДолгосрочный");
	
КонецПроцедуры // СчетУчетаДолгосрочныйПриИзменении()

&НаКлиенте
Процедура СчетУчетаКраткосрочныйПриИзменении(Элемент)
	
	ПроверитьПризнакВалютныйУСчета("СчетУчетаКраткосрочный");
	
КонецПроцедуры // СчетУчетаКраткосрочныйПриИзменении()

&НаКлиенте
Процедура ВспомогательныйСчетПриИзменении(Элемент)
	
	ПроверитьПризнакВалютныйУСчета("ВспомогательныйСчет");
	
КонецПроцедуры // ВспомогательныйСчетПриИзменении()

&НаКлиенте
Процедура СуммаАвансаВВалютеПриИзменении(Элемент)
	
	ИзменениеСуммаАвансаВВалюте(Объект.СуммаАванса, Объект.СуммаАвансаВВалюте, фСреднийКурсАванса);
		
КонецПроцедуры // СуммаАвансаВВалютеПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеСредства

&НаКлиенте
Процедура ОсновныеСредстваПриАктивизацииСтроки(Элемент)
	
	УстановитьОтображениеДанныхСтроки();
	
КонецПроцедуры // ОсновныеСредстваПриАктивизацииСтроки()

&НаКлиенте
Процедура ОсновныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		НачалоРедактированияСтрокиОС(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры // ОсновныеСредстваПриНачалеРедактирования()

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеОсновногоСредстваСервер(ТекущиеДанные.ПолучитьИдентификатор());
			
КонецПроцедуры // ОсновныеСредстваОсновноеСредствоПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваКлассПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные; 	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКлассаСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОсновныеСредстваКлассПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваУчитыватьКакОСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные; 	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеПризнакаУчитыватьКакОССервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОсновныеСредстваУчитыватьКакОСПриИзменении()
 
&НаКлиенте
Процедура ОсновныеСредстваНачислятьАмортизациюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные; 	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.НачислятьАмортизацию Тогда
		ТекущиеДанные.НачислятьАмортизациюСТекущегоПериода = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеСредстваНачислятьАмортизациюПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваНачислятьАмортизациюСТекущегоПериодаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.НачислятьАмортизациюСТекущегоПериода Тогда
		ТекущиеДанные.НачислятьАмортизацию = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеСредстваНачислятьАмортизациюСТекущегоПериодаПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеПервоначальнойСтоимостиСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОсновныеСредстваПервоначальнаяСтоимостьПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеСуммыСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОсновныеСредстваСуммаПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваМетодНачисленияАмортизацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеМетодаНачисленияАмортизацииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
	УстановитьОтображениеДанныхСтроки();
	
КонецПроцедуры // ОсновныеСредстваМетодНачисленияАмортизацииПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСчетУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеСчетаУчетаСервер(ТекущиеДанные.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
			
КонецПроцедуры // ОсновныеСредстваСчетУчетаПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, Элемент.Имя);		
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущиеДанные, "Субконто", ЗначениеСубконто);
	
КонецПроцедуры // ОсновныеСредстваСубконтоНачалоВыбора()

&НаКлиенте
Процедура ОсновныеСредстваСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные, "Субконто", ЗначениеСубконто);
	
КонецПроцедуры // ОсновныеСредстваСубконтоПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ИмяСубконто      = СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "");
	ИмяСубконто      = СтрЗаменить(ИмяСубконто, "ДанныеСтроки"	  , "");
	
	ЗначениеСубконто = ТекущиеДанные[ИмяСубконто];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваСубконтоАвтоПодбор()

&НаКлиенте
Процедура ОсновныеСредстваКорСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКорСчетаСервер(ТекущиеДанные.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
		
КонецПроцедуры // ОсновныеСредстваКорСчетПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваКорСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;  	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка, ТекущиеДанные, "КорСубконто", ЗначениеСубконто);
	
КонецПроцедуры // ОсновныеСредстваКорСубконтоНачалоВыбора()

&НаКлиенте
Процедура ОсновныеСредстваКорСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;  	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные, "КорСубконто", ЗначениеСубконто);
	
КонецПроцедуры // ОсновныеСредстваКорСубконтоПриИзменении()

&НаКлиенте
Процедура ОсновныеСредстваКорСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ИмяСубконто      = СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "");
	ИмяСубконто      = СтрЗаменить(ИмяСубконто, "ДанныеСтроки"	  , "");
	
	ЗначениеСубконто = ТекущиеДанные[ИмяСубконто];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "КорСубконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваКорСубконтоАвтоПодбор()
												 
&НаКлиенте
Процедура ОсновныеСредстваСпособОтраженияРасходовПоАмортизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("Справочник.бит_му_СпособыОтраженияРасходовПоАмортизации.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры // ОсновныеСредстваСпособОтраженияРасходовПоАмортизацииНачалоВыбора()

&НаКлиенте
Процедура ОсновныеСредстваАрендаЭСППриИзменении(Элемент)
	
	Если Объект.СпособПолученияСтавки = ПредопределенноеЗначение("Перечисление.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ") Тогда
		
		ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;	
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОсновныеСредстваАрендаСтавкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандФормыАренда

&НаКлиенте
Процедура АрендаОсРассчитатьВсе(Кнопка)
	
	Если Не ПроверитьВозможностьРасчетовВДокументе() Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстСообщения = "";
	РассчитатьВсеСервер(ТекстСообщения);
	ВывестиТекстСообщенийПользователю(ТекстСообщения);
	
	Модифицированность = Истина;
	
КонецПроцедуры // АрендаОсРассчитатьВсе()

&НаКлиенте
Процедура АрендаОСРассчитатьОбщуюСуммуАванса(Кнопка)
	
	РассчитатьОбщуюСуммуАвансаСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры // АрендаОСРассчитатьОбщуюСуммуАванса()

&НаКлиенте
Процедура АрендаОСРаспределитьОбщуюСуммуЗадолженности(Кнопка)
	
	Если Не ПроверитьВозможностьРасчетовВДокументе() Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстСообщения = "";
	РаспределитьОбщуюСуммуЗадолженностиСервер(ТекстСообщения);
	ВывестиТекстСообщенийПользователю(ТекстСообщения);	
	
	Модифицированность = Истина;
	
КонецПроцедуры // АрендаОСРаспределитьОбщуюСуммуЗадолженности()

&НаКлиенте
Процедура АрендаОСРаспределитьСуммуАванса(Кнопка)
	
	Если Не ПроверитьВозможностьРасчетовВДокументе() Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстСообщения = "";
	РаспределитьСуммуАвансаСервер(ТекстСообщения);
	ВывестиТекстСообщенийПользователю(ТекстСообщения);
	
	Модифицированность = Истина;
	
КонецПроцедуры // АрендаОСРаспределитьСуммуАванса()

&НаКлиенте
Процедура АрендаОСРассчитатьЭСП(Кнопка)
	
	Если Не ПроверитьВозможностьРасчетовВДокументе() Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекстСообщения = "";
	РассчитатьЭСПСервер(ТекстСообщения);                                                         	
	ВывестиТекстСообщенийПользователю(ТекстСообщения);
	
	Модифицированность = Истина;
	
КонецПроцедуры // АрендаОСРассчитатьЭСП()

&НаКлиенте
Процедура АрендаОСРассчитатьТекущееЭСП(Кнопка)
	
	ТекущиеДанные = Элементы.ОсновныеСредстваАренда.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	РассчитатьТекущееЭСП(ТекстСообщения, ТекущиеДанные.ПолучитьИдентификатор());	
	ВывестиТекстСообщенийПользователю(ТекстСообщения);
	
	Модифицированность = Истина;
	
КонецПроцедуры // АрендаОСРассчитатьТекущееЭСП()

&НаКлиенте
Процедура АрендаОСЗаполнитьПровести(Кнопка)
	
	Если Не ПроверитьВозможностьРасчетовВДокументе() Тогда
		Возврат;	
	КонецЕсли;
	
	// Заголовок "Выполнение расчетов для документа ...".
	ТекстСообщения = Нстр("ru = 'Выполнение расчетов для документа %1%'");
	ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Объект.Ссылка);
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	// Расчеты и проведение
	ТекстСообщения = "";
	РассчитатьВсеСервер(ТекстСообщения);
	ВывестиТекстСообщенийПользователю(ТекстСообщения);
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // АрендаОСЗаполнитьПровести()

&НаКлиенте
Процедура АрендаОСРассчитатьСумму(Кнопка)
	РассчитатьСуммуСервер();
КонецПроцедуры // АрендаОСРассчитатьСумму ()

&НаКлиенте
Процедура АрендаОСРассчитатьСтоимостьОС(Команда)
	РассчитатьСтоимостьОС();
КонецПроцедуры

&НаКлиенте
Процедура АрендаОСЗаполнитьКорСчета(Кнопка)
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаДолгосрочный) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнен ""Счет учета долгосрочный"". Действие отменено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	
	КонецЕсли;
	
	ЗаполнитьКорСчетаСервер();
	
	Модифицированность = Истина;
		
КонецПроцедуры // АрендаОСЗаполнитьКорСчета()

#КонецОбласти

#Область ОбработчикиКомандРаботыСExcel

#Область ЗагрузкаДанныхИзТабличногоДокумента

&НаКлиенте
Процедура ЗагрузитьЧерезТабДок(Команда)
    
    ОткрытьФормуЗагрузкиДанныхЧерезТабДок();	
    
КонецПроцедуры // ЗагрузитьЧерезТабДок()

#КонецОбласти

#КонецОбласти

&НаКлиенте 
Процедура Подключаемый_ДействияФормыДействиеУстановитьОперацию(Команда)

	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяНовогоВидаОперации = СтрЗаменить(Команда.Имя, "КомандаПодменюВидаОперации_", "");
	
	Если Лев(ИмяНовогоВидаОперации, 4) <> Лев(Строка(Объект.ВидОперации), 4) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ДействияФормыДействиеУстановитьОперациюЗавершение", ЭтотОбъект, ИмяНовогоВидаОперации);
		ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС[ИмяНовогоВидаОперации];
		
		УстановитьЗаголовокФормыДокумента();
		УстановитьВидимостьДоступность();
	
		Модифицированность = Истина;
		
	КонецЕсли;
		
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - завершение действия "УстановитьОперацию".
// 
&НаКлиенте
Процедура ДействияФормыДействиеУстановитьОперациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС[ДополнительныеПараметры];
		
	УстановитьЗаголовокФормыДокумента();
	УстановитьВидимостьДоступность();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображениеПанелиДанныхСтроки(Команда)
	
	фОтображатьПанельДанныхСтроки = НЕ фОтображатьПанельДанныхСтроки;	
	ИзменитьОтображениеДанныхСтрокиСервер();
	
	Если фОтображатьПанельДанныхСтроки Тогда
		УстановитьОтображениеДанныхСтроки();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьОтображениеПанелиДанныхСтроки()

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыФормы = ЗаполнитьПараметрыПодбора(); 	
	//БИТ Тртилек 27.09.2012 устанавливаются значения параметров при открытии формы подбора
	//ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы, ЭтотОбъект);
	ФормаПодбора = ПолучитьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы, ЭтотОбъект);
	ФормаПодбора.Элементы.ДатаНачала.Доступность = Ложь;
	ФормаПодбора.Открыть();
	///БИТ Тртилек
	
КонецПроцедуры // ПодборОС()

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	РежимПодбора = фКэшЗначений.Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуОСПоОстаткам;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Режим"			    , РежимПодбора);
	ПараметрыФормы.Вставить("ДатаНачала"		, НачалоМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("ДатаОкончания"		, КонецМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("Организация"		, Объект.Организация);
	ПараметрыФормы.Вставить("МОЛ"				, Объект.МОЛ);
	ПараметрыФормы.Вставить("Местонахождение"	, Объект.Подразделение);
	ПараметрыФормы.Вставить("ВалютаДокумента"	, Объект.ВалютаДокумента);	
	
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры // ПодборПоОстаткам()

&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда"	 		, "бит_му_ПринятиеКУчетуОС");
	ПараметрыФормы.Вставить("Объект"	 		, Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти"	, "ОсновныеСредства");
	ПараметрыФормы.Вставить("ТабличнаяЧасть"	, Объект.ОсновныеСредства);
		
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДокумента.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура устанвливает параметры выбора для элементов формы.
//
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетНачисленияАмортизации);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетРезерваПереоценки);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетСниженияСтоимости);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетУчета);
    МассивЭлементов.Добавить(Элементы.ОсновныеСредстваКорСчет);
	МассивЭлементов.Добавить(Элементы.СчетУчетаДолгосрочный);
    МассивЭлементов.Добавить(Элементы.СчетУчетаКраткосрочный);
    МассивЭлементов.Добавить(Элементы.СчетУчетаАванса);
	МассивЭлементов.Добавить(Элементы.ВспомогательныйСчет);
    МассивЭлементов.Добавить(Элементы.СчетНРП);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
	
	МассивВидовДоговоров = Новый Массив;
	// Адаптация для ERP. Начало. 18.03.2014{{
	мПеречисления = Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()];
	МассивВидовДоговоров.Добавить(мПеречисления.СПоставщиком);
	МассивВидовДоговоров.Добавить(мПеречисления.СКомитентом);
	МассивВидовДоговоров.Добавить(мПеречисления.СКомиссионером);	
	Если НЕ бит_ОбщегоНазначения.ЭтоERP() И НЕ бит_ОбщегоНазначения.ЭтоКомплекснаяАвтоматизация() Тогда	
		бит_ДоговораСервер.ДобавитьВидыДоговоровНаЗакупку(МассивВидовДоговоров);		
		МассивВидовДоговоров.Добавить(мПеречисления.Прочее);	
	КонецЕсли;
	// Адаптация для ERP. Конец. 18.03.2014}}
	фКэшЗначений.Вставить("МассивВидовДоговоров", МассивВидовДоговоров);
		
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_му_ВидыОперацийПринятиеКУчетуОС"
							, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС));
	КэшПеречисления.Вставить("бит_му_МетодыНачисленияАмортизации"
							, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МетодыНачисленияАмортизации));		
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА"		     
							, бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));

	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
		
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура заполняет настройки видимости субконто счетов МУ.
// 
// Параметры:
// 	КэшНастроек - произвольный - приводится к соответствию.
// 
&НаСервере
Процедура ЗаполнитьКэшНастроекСубконто(КэшНастроек)
	
	КэшНастроек = Новый Соответствие;
	
	Для Каждого ТекСтрока Из Объект.ОсновныеСредства Цикл
		
		Если КэшНастроек[ТекСтрока.СчетУчета] = Неопределено Тогда
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекСтрока.СчетУчета, фКоличествоСубконтоМУ);
			КэшНастроек.Вставить(ТекСтрока.СчетУчета, НастройкиСубконто);
		КонецЕсли;
		
		Если КэшНастроек[ТекСтрока.КорСчет] = Неопределено Тогда
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекСтрока.КорСчет, фКоличествоСубконтоМУ);
			КэшНастроек.Вставить(ТекСтрока.КорСчет, НастройкиСубконто);
		КонецЕсли;
		
	КонецЦикла;

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Для Каждого ТекСтрока Из Объект.бит_окей_СоставОсновныхСредств Цикл
		
		Если КэшНастроек[ТекСтрока.СчетКт] = Неопределено Тогда
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекСтрока.СчетКт, фКоличествоСубконтоМУ);
			КэшНастроек.Вставить(ТекСтрока.СчетКт, НастройкиСубконто);
		КонецЕсли;
		
		Если КэшНастроек[ТекСтрока.СчетДт] = Неопределено Тогда
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекСтрока.СчетДт, фКоличествоСубконтоМУ);
			КэшНастроек.Вставить(ТекСтрока.СчетДт, НастройкиСубконто);
		КонецЕсли;
		
	КонецЦикла;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры // ЗаполнитьКэшНастроекСубконто()

// Процедура устанавливает подменю выбора операции.
// 
&НаСервере
Процедура УстановитьПодменюВыбораВидаОперации()

	ИмяПодменю 	   = "ПодменюВидаОперации";
	ГруппаПодменю  = Элементы.ПодменюВидаОперации;
	ИмяДействия    = "ДействияФормыДействиеУстановитьОперацию";
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС[ИмяЗначенияПеречисления];
		
		ИмяКнопки  = ИмяПодменю + "_" + ИмяЗначенияПеречисления;
		
		бит_РаботаСДиалогамиСервер.ДобавитьКнопкуНаФорму(Элементы
												, Команды
												, ИмяКнопки
												, ЭлементЗаполнения.Синоним
												, ИмяДействия
												, ГруппаПодменю);
		            		
	КонецЦикла;																				   

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

// Процедура устанавливает видимость элементов формы.
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()

	УстановитьВидимостьДоступностьПоВидуОперации();
	УстановитьВидимостьДоступностьПоДоговору();

КонецПроцедуры // УстановитьВидимостьДоступность()

// Процедура устанавливает видимость элементов формы.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьПоВидуОперации()

	ПереченьВидовОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС;
	
	ЭтоПринятиеКУчету  			 = Объект.ВидОперации = ПереченьВидовОпераций.ПринятиеКУчетуОС;
	ЭтоПринятиеКУчетуПоФинАренде = Объект.ВидОперации = ПереченьВидовОпераций.ПринятиеКУчетуОСВФинансовойАренде;
	ЭтоВводНачОстатков 			 = Объект.ВидОперации = ПереченьВидовОпераций.ВводНачальныхОстатковОС;
	ЭтоВводОстатковПоФинАренде 	 = Объект.ВидОперации = ПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	// Видимость страницы "Аренда"
	Элементы.СтраницаАренда.Видимость = ЭтоПринятиеКУчетуПоФинАренде Или ЭтоВводОстатковПоФинАренде;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	//БИТ Изюмов А.В. 30.07.12 <--- новые переменные, сигнализирующие о консолидированном виде операции
	ЭтоПринятиеКУчетуКонсолидированногоОС = Объект.ВидОперации = ПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС;  
	ЭтоВводВачальныхОстатковКонсолидированногоОС = Объект.ВидОперации = ПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС;
	//БИТ Изюмов А.В. 30.07.12 <---
	
	//БИТ Изюмов А.В. 30.07.12 <---
	// Видимость страницы "Консолидированного ОС"
	Если  ЭтоПринятиеКУчетуКонсолидированногоОС  ИЛИ  ЭтоВводВачальныхОстатковКонсолидированногоОС Тогда
		Элементы.СтраницаПараметрыУчета.Видимость = Истина;
		Элементы.СтраницаПринятиеКУчетуКонсолидированногоОС.Видимость = Истина;
		Элементы.СтраницаАренда.Видимость = Ложь;
		Элементы.СтраницаОсновныеСредства.Видимость = Ложь;
		
		// Установка текущей страницы
		Элементы.ГруппаПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПринятиеКУчетуКонсолидированногоОС;
		Если ЭтоВводВачальныхОстатковКонсолидированногоОС Тогда 
			Элементы.бит_окей_СоставОсновныхСредствПодборКонсолидированного_07_0804.Доступность= Ложь
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницаПараметрыУчета.Видимость = Ложь;	
		Элементы.СтраницаПринятиеКУчетуКонсолидированногоОС.Видимость = Ложь;	
		Элементы.СтраницаАренда.Видимость = Истина;
		Элементы.СтраницаОсновныеСредства.Видимость = Истина;
		
		// Установка текущей страницы
		Элементы.ГруппаПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОсновныеСредства;
		
	КонецЕсли;
	
	Элементы.бит_окей_Местонахождение.Видимость  = ЭтоПринятиеКУчетуКонсолидированногоОС ИЛИ ЭтоВводВачальныхОстатковКонсолидированногоОС;
	//БИТ Изюмов А.В. 30.07.12 <---
	
	// Это ввод начальных остатков ОС.
	Элементы.ОсновныеСредстваОстатокРезерваПереоценки.Видимость = ЭтоВводНачОстатков Или ЭтоВводОстатковПоФинАренде;
	Элементы.ДанныеСтрокиОстатокРезерваПереоценки.Видимость     = ЭтоВводНачОстатков Или ЭтоВводОстатковПоФинАренде;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//// Видимость страницы "Аренда".
	//Элементы.СтраницаАренда.Видимость = ЭтоПринятиеКУчетуПоФинАренде Или ЭтоВводОстатковПоФинАренде;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	Элементы.ОсновныеСредстваКорСчет.Видимость = ЭтоВводНачОстатков ИЛИ ЭтоПринятиеКУчету;
	
	// Элементы страницы "Аренда".
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//Если ЭтоПринятиеКУчетуПоФинАренде Или ЭтоВводОстатковПоФинАренде Тогда      	   
	Если Элементы.СтраницаАренда.Видимость Тогда
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		
		ЭтоВалютныйДоговор  = фВалютаДоговора <> фВалютаМСФО;
		фДокументВВалюте    = ЭтоВалютныйДоговор И (ЭтоПринятиеКУчетуПоФинАренде Или ЭтоВводОстатковПоФинАренде);
		
		// Принятие к учету по финанасовой аренде.
		Элементы.ГруппаАрендаШапкаПринятиеКУчетуОС.Видимость 	    = ЭтоПринятиеКУчетуПоФинАренде;
		Элементы.ОсновныеСредстваАрендаСуммаАванса.Видимость        = ЭтоПринятиеКУчетуПоФинАренде;
		Элементы.ОсновныеСредстваАрендаСуммаАвансаВВалюте.Видимость = ЭтоПринятиеКУчетуПоФинАренде;
		
		Элементы.ОсновныеСредстваАрендаГруппаЗаполнитьСуммуАванса.Доступность = ЭтоПринятиеКУчетуПоФинАренде;
			
		// Ввод остатков по финанасовой аренде.
		Элементы.ГруппаАрендаШапкаВводОстатковОСЛево.Видимость   		   = ЭтоВводОстатковПоФинАренде;
		Элементы.ГруппаАрендаШапкаВводОстатковОСПраво.Видимость   		   = ЭтоВводОстатковПоФинАренде;
		Элементы.ОсновныеСредстваАрендаСуммаЗадолженности.Видимость        = ЭтоВводОстатковПоФинАренде;
		Элементы.ОсновныеСредстваАрендаСуммаЗадолженностиВВалюте.Видимость = ЭтоВводОстатковПоФинАренде;
		                                                                          	
		Элементы.ОсновныеСредстваАрендаГруппаЗаполнитьСуммуЗадолженности.Доступность = ЭтоВводОстатковПоФинАренде;
		
		УстановитьВидимостьДоступностьПоНоминальнойСтавке();
		
	КонецЕсли;
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьСтраницыДокументовПоступлений();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры // УстановитьВидимостьДоступностьПоВидуОперации()

// Процедура устанавливает видимость элементов формы.
//
&НаСервере
Процедура УстановитьВидимостьДоступностьПоНоминальнойСтавке()
	
	НоминальнаяСтавкаРасчет = Объект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.Расчет;
	Элементы.ОсновныеСредстваАрендаГруппаЗаполнитьЭСП.Видимость            = НоминальнаяСтавкаРасчет;
	Элементы.ОсновныеСредстваАрендаАрендаОСРассчитатьСтоимостьОС.Видимость = Не НоминальнаяСтавкаРасчет;
	Элементы.ОсновныеСредстваАрендаАрендаОСРасчитатьСумму.Видимость        = НоминальнаяСтавкаРасчет;
	Если НоминальнаяСтавкаРасчет Тогда
		Элементы.ОсновныеСредстваАрендаЭСП.Заголовок = НСтр("ru = 'ЭСП'");
	Иначе 			
		Элементы.ОсновныеСредстваАрендаЭСП.Заголовок = НСтр("ru = 'Ставка по договору'");
	КонецЕсли; 
		
КонецПроцедуры 

// Процедура устанавливает видимость элементов формы.
// 
&НаСервере
Процедура УстановитьВидимостьДоступностьПоДоговору()

	ПереченьВидовОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС;
	
	ЭтоВалютныйДоговор  = фВалютаДоговора <> Объект.ВалютаДокумента;
	фДокументВВалюте    = ЭтоВалютныйДоговор 
							И (Объект.ВидОперации = ПереченьВидовОпераций.ПринятиеКУчетуОСВФинансовойАренде 
								Или Объект.ВидОперации = ПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде);
		
	Если ЭтоВалютныйДоговор Тогда
		НадписьВалютаДокумента = " (" + Объект.ВалютаДокумента + ")";
		НадписьВалютаДоговора  = " (" + фВалютаДоговора + ")";
	Иначе	
		НадписьВалютаДокумента = "";
		НадписьВалютаДоговора  = "";
	КонецЕсли;
	
	// Шапка.
	Элементы.ВалютаСуммыАвансаВВалюте.Видимость 	   = ЭтоВалютныйДоговор;
	Элементы.ВалютаСуммыАванса.Видимость 			   = ЭтоВалютныйДоговор;
	Элементы.ВалютаСуммыЗадолженностиВВалюте.Видимость = ЭтоВалютныйДоговор;
	Элементы.ВалютаСуммыЗадолженности.Видимость 	   = ЭтоВалютныйДоговор;
	
	// Таблица ОС.
	Элементы.ОсновныеСредстваАрендаСуммаВВалюте.Заголовок 			   = Нстр("ru = 'Стоимость ОС в валюте'") + НадписьВалютаДоговора;
	Элементы.ОсновныеСредстваАрендаСуммаЗадолженностиВВалюте.Заголовок = Нстр("ru = 'Сумма задолженности в валюте'") + НадписьВалютаДоговора;
	Элементы.ОсновныеСредстваАрендаСуммаАвансаВВалюте.Заголовок 	   = Нстр("ru = 'Сумма аванса в валюте'") + НадписьВалютаДоговора;
	
	Элементы.ОсновныеСредстваАрендаСумма.Заголовок 				= Нстр("ru = 'Стоимость ОС'") + НадписьВалютаДокумента;
	Элементы.ОсновныеСредстваАрендаСуммаЗадолженности.Заголовок = Нстр("ru = 'Сумма задолженности'") + НадписьВалютаДокумента;
	Элементы.ОсновныеСредстваАрендаСуммаАванса.Заголовок 		= Нстр("ru = 'Сумма аванса'") + НадписьВалютаДокумента;
	
	Элементы.ОсновныеСредстваАрендаГруппаЗаполнитьСумму.Доступность = фДокументВВалюте;

КонецПроцедуры // УстановитьВидимостьДоступностьПоДоговору()

// Устанавливает видимость полей субконто на форме.
// 
// Параметры:
// 	СчетМУ 					   - ПланСчетовСсылка.бит_Дополнительный_2.
// 	ИмяЭлемента 			   - Строка.
//  мНастройкиСубконтоСчетовМУ - Соответствие.
// 
&НаСервере
Процедура УстановитьВидимостьСубконто(СчетМУ, ИмяЭлемента, мНастройкиСубконтоСчетовМУ)
	
	НастройкиСубконто = мНастройкиСубконтоСчетовМУ[СчетМУ];
	
	Если НастройкиСубконто = Неопределено Тогда
		НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(СчетМУ, фКоличествоСубконтоМУ);
		мНастройкиСубконтоСчетовМУ.Вставить(СчетМУ, НастройкиСубконто);
	КонецЕсли;
	
	Ном = 1;
	Для каждого ЭлементНастроек Из НастройкиСубконто Цикл
		
		ТекИмяЭлемента = ?(ЭлементНастроек.Пометка, "", "Пустое") + ИмяЭлемента + Ном;
		Элементы["ПанельДанныеСтроки" + ИмяЭлемента + Ном].ТекущаяСтраница 
														= Элементы["СтраницаДанныеСтроки" + ТекИмяЭлемента];
		
		Ном = Ном + 1;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСубконто()

// Управляет видимостью/доступностью элементов формы.
// 
// Параметры:
// 	Ид 						   - Число.
//  мНастройкиСубконтоСчетовМУ - Соответствие.
// 
&НаСервере
Процедура УстановитьОтображениеДанныхСтрокиСервер(Ид, мНастройкиСубконтоСчетовМУ)
	
	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(Ид);
	Если ТекущиеДанные <> Неопределено Тогда
		
		УстановитьВидимостьСубконто(ТекущиеДанные.СчетУчета, "Субконто"   , мНастройкиСубконтоСчетовМУ);		
		УстановитьВидимостьСубконто(ТекущиеДанные.КорСчет  , "КорСубконто", мНастройкиСубконтоСчетовМУ);
		
		// Установка видимости элементов формы зависимых от метода начисления амортизации.
		ИмяСтраницы = "Пустой";                       		
		Для Каждого КлючЗначение Из фКэшЗначений.Перечисления.бит_му_МетодыНачисленияАмортизации Цикл
			Если КлючЗначение.Значение = ТекущиеДанные.МетодНачисленияАмортизации Тогда
				ИмяСтраницы = КлючЗначение.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла; 		
		Элементы.ПанельПараметрыАмортизации.ТекущаяСтраница = Элементы["ПараметрыАмортизацииСтраница" + ИмяСтраницы];
		
	КонецЕсли;
		
КонецПроцедуры // УстановитьОтображениеДанныхСтрокиСервер()

// Процедура выполняет действия на сервере, необходимые при открытии формы.
// 
// Параметры:
//  НастройкиСубконтоСчетовМУ - Соответствие Или Неопределено.
// 	Отказ 					  - Булево.
// 
&НаСервере
Процедура ОткрытиеФормыСервер(НастройкиСубконтоСчетовМУ, Отказ)
	
	ЗаполнитьКэшНастроекСубконто(НастройкиСубконтоСчетовМУ);
	
	УстановитьВидимостьДоступность();
		
КонецПроцедуры // ОткрытиеФормыСервер()

// Процедура изменяет отображение панели данных строки.
// 
&НаСервере
Процедура ИзменитьОтображениеДанныхСтрокиСервер()

	Элементы.ОсновныеСредстваИзменитьОтображениеПанелиДанныхСтроки.Пометка = фОтображатьПанельДанныхСтроки;
	Элементы.ГруппаДанныеСтроки.Видимость 				   				   = фОтображатьПанельДанныхСтроки;

КонецПроцедуры // ИзменитьОтображениеДанныхСтрокиСервер()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ОсновныеСредства;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда
	
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
	
	КонецЕсли;
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.ОсновныеСредства;
		ЭтоОстаткиФинАренда = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС") 
						  ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводОстатковОСВФинансовойАренде");
						  
		// Получим курсы валют на дату принятия к учету для каждого ОС.
		КурсыСтарые = ПолучитьКурсыВалютПоПериодам(мКэшРеквизитовФормы);
		КурсыНовые  = ПолучитьКурсыВалютПоПериодам(,Истина);
		
		РеквизитыСтроки = Новый Массив;
		РеквизитыСтроки.Добавить("ПервоначальнаяСтоимость");
		РеквизитыСтроки.Добавить("ЛиквидационнаяСтоимость");
		РеквизитыСтроки.Добавить("СуммаНачисленнойАмортизации");
		РеквизитыСтроки.Добавить("Сумма");
		
		Если ЭтоОстаткиФинАренда Тогда
			РеквизитыСтроки.Добавить("ОстатокРезерваПереоценки");
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтарыеКурсы = КурсыСтарые[СтрокаТаблицы.ДатаПринятияКУчету].СтарыеКурсы;
			НовыеКурсы = КурсыНовые[СтрокаТаблицы.ДатаПринятияКУчету].НовыеКурсы;
			
			Для каждого ИмяСуммы Из РеквизитыСтроки Цикл
				
				СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																								,СтарыеКурсы.Валюта
																								,НовыеКурсы.Валюта
																								,СтарыеКурсы.Курс
																								,НовыеКурсы.Курс
																								,СтарыеКурсы.Кратность
																								,НовыеКурсы.Кратность);
				
			КонецЦикла; 
			
		КонецЦикла;
	КонецЕсли; 
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()

&НаСервере
Функция ПолучитьКурсыВалютПоПериодам(КешСтарыеКурсы = Неопределено, флНовыеКурсы=Ложь)
	
	Если флНовыеКурсы Тогда
		
		НовыеКурсы = Новый Структура;
		НовыеКурсы.Вставить("Валюта", Объект.ВалютаДокумента);
		НовыеКурсы.Вставить("Кратность", Объект.КратностьДокумента);
		НовыеКурсы.Вставить("Курс", Объект.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("НовыеКурсы", НовыеКурсы);
		
	Иначе
		
		СтарыеКурсы = Новый Структура;
		СтарыеКурсы.Вставить("Валюта", КешСтарыеКурсы.ВалютаДокумента); 
		СтарыеКурсы.Вставить("Кратность", КешСтарыеКурсы.КратностьДокумента);
		СтарыеКурсы.Вставить("Курс", КешСтарыеКурсы.КурсДокумента);
		
		СтруктураКурсовВалют = Новый Структура;
		СтруктураКурсовВалют.Вставить("СтарыеКурсы", СтарыеКурсы);
		
	КонецЕсли; 
	
	ТаблицаДанных = Объект.ОсновныеСредства.Выгрузить(); 
	ТаблицаПериодов = ТаблицаДанных.Скопировать( , "ДатаПринятияКУчету");
	ТаблицаПериодов.Колонки.ДатаПринятияКУчету.Имя = "Период";
	ТаблицаПериодов.Свернуть("Период");
	
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсовВалют);
	
	Возврат Курсы;
	
КонецФункции

// Процедура обрабатывает изменение валюты документа.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалютыМодуль();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
	РеквизитыСтроки = Новый Массив(); 
	РеквизитыСтроки.Добавить("СуммаЗадолженности");
	РеквизитыСтроки.Добавить("СуммаАванса");
	
	Для каждого ТекущиеДанные Из Объект.ОсновныеСредства Цикл
		Для каждого ИмяРеквизиты Из РеквизитыСтроки Цикл
			Если фВалютаДоговора = Объект.ВалютаДокумента Тогда
				ТекущиеДанные[ИмяРеквизиты] = ТекущиеДанные[ИмяРеквизиты + "ВВалюте"];
			Иначе	
				ТекущиеДанные[ИмяРеквизиты] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				ТекущиеДанные[ИмяРеквизиты], ВалютаДокумента, Объект.ВалютаДокумента, 
				КурсДокумента, Объект.КурсДокумента, КратностьДокумента, Объект.КратностьДокумента);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	Объект.СуммаАванса 		  = Объект.ОсновныеСредства.Итог("СуммаАванса");
	Объект.СуммаЗадолженности = Объект.ОсновныеСредства.Итог("СуммаЗадолженности");
	
	ВалютаДокумента    = Объект.ВалютаДокумента;
	КурсДокумента  	   = Объект.КурсДокумента;
	КратностьДокумента = Объект.КратностьДокумента;
	
	СтруктураПараметров = Документы.бит_му_ПринятиеКУчетуОС.ПолучитьСреднийКурсАвансаИВалютуДоговора(Объект.Организация,
	                                                                                                 Объект.Контрагент,
																									 Объект.ДоговорКонтрагента,
	                                                                                                 Объект.ВалютаДокумента, 
																									 Объект.Дата,
																									 Объект.СчетУчетаАванса);
																									 
    фВалютаДоговора    = СтруктураПараметров.ВалютаДоговора;
	фСреднийКурсАванса = СтруктураПараметров.СреднийКурсАвансаМУ;
	
	УстановитьВидимостьДоступностьПоДоговору();	
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	ВосстановитьОтображениеДанныхФормы();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
&НаСервере
Функция ЗаполнитьПараметрыПодбора()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыПодбора = ДокументОбъект.ЗаполнитьПараметрыПодбора();
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

////////////////////////////////////////////////////////////////////////////////
// Валюта МСФО

// Процедура выполняет заполнение валюты МСФО.
// 
// Параметры:
//  ЗаполнитьВалютуДокумента - Булево (По умолчанию = Истина).
// 
&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента = Истина)
	
	// Получим валюту международного учета.
	фВалютаМСФО 	     = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(фВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), Нстр("ru = 'НЕ УСТАНОВЛЕНА'"), СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = фВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьВалютуМСФО()

// Процедура заполняет курс и кратность документа.
// 
// Параметры:
//  Валюта.
// 	Дата.
// 	Курс.
// 	Кратность.
// 
&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

////////////////////////////////////////////////////////////////////////////////
// Изменения реквизитов

// Процедура выполняет действия, необходимые при изменении даты.
// 
&НаСервере
Процедура ИзменениеДатыСервер()

	Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	ПересчитатьСтоимостьОСВВалюте();
	
КонецПроцедуры // ИзменениеДатыСервер()

// Процедура выполняет действия, необходимые при изменении организации.
// 
// Параметры:
//  ТекстСообщения - Строка.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер(ТекстСообщения)

	Объект.ОсновныеСредства.Очистить();	
	//БИТ Изюмов А.В. 02.08.12 дополнительно очищем ТЧ консолидированного вида операции
	Объект.бит_окей_СоставОсновныхСредств.Очистить();
	//БИТ Изюмов А.В. 02.08.12
				
	// Проверка подразделения.
	бит_ОбщегоНазначения.ПроверитьПринадлежностьАналитики(Объект
														  ,
														  , "Подразделение"
														  , "Владелец"
														  , "Организация"
														  , "СправочникСсылка.ПодразделенияОрганизаций"
														  , Нстр("ru = 'В документе'")
														  , Нстр("ru = 'Изменение значения реквизита Организация'")
														  , ТекстСообщения);
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	// Параметры учетной политики.
	фПараметрыУчетнойПолитики = Документы.бит_му_ПринятиеКУчетуОС.ПолучитьПараметрыУчетнойПолититки(Объект.Организация, Объект.Дата);
	
	СпособРасчетаЭСП = бит_му_ОбщегоНазначения.ПолучитьСпособРасчетаЭСП(Объект.Организация);
	
	//БИТ Изюмов А.В. 02.08.12 для типового ввода начальных остатков назначим счет нераспределенной прибыли как "служебный"
	//Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС Тогда
		Объект.СчетНРП = ПланыСчетов.бит_Дополнительный_2.Служебный;
	Иначе
		// Заполним счет нераспределенной прибыли из учетной политики.
		Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	КонецЕсли;
	//БИТ Изюмов А.В. 02.08.12
	
	Если Объект.ДоговорКонтрагента.Организация <> Объект.Организация Тогда
		Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		фВалютаДоговора 		  = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПоДоговору();

КонецПроцедуры // ИзменениеОрганизацииСервер()                 

// Процедура проверяет выбранное подразделение на соответствие организации.
// 
// Параметры:
//  ВыбранноеЗначение    - СправочникСсылка.Подразделения.
//  СтандартнаяОбработка - Булево.
// 
&НаСервере
Процедура ПроверитьВыбранноеПодразделение(ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение.Владелец <> Объект.Организация Тогда
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;

КонецПроцедуры // ПроверитьВыбранноеПодразделение()

////////////////////////////////////////////////////////////////////////////////
// Изменения данных таблицы "Основные средства".

// Процедура восстанавливает отображение данных формы.
// 
&НаСервере
Процедура ВосстановитьОтображениеДанныхФормы()

	ВосстановитьКоличествоДоступныхСубконто();
	бит_му_ВНА.ВосстановитьИнвентарныеНомераТаблицыОС(Объект.ОсновныеСредства, фКэшЗначений.СоответствиеОС_ИнвентарныйНомер);	

КонецПроцедуры // ВосстановитьОтображениеДанныхФормы()

// Процедура выполняет действия при начале редактирования строки 
// табличного поля "Основные средства".
// 
// Параметры:
//  ИДСтроки - Число.
// 
&НаСервере  
Процедура НачалоРедактированияСтрокиОС(ИДСтроки)
	
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
			 			, Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки)
						, ИДСтроки); 						
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ТекущиеДанные.УчитыватьКакОС             = Истина;
	ТекущиеДанные.НачислятьАмортизацию       = Истина;
	ТекущиеДанные.МетодНачисленияАмортизации = фКэшЗначений.Перечисления.бит_му_МетодыНачисленияАмортизации.Линейный;
	
	// Параметр "НачислятьАмортизациюСТекущегоПериода" извлекается из учетной политики.
    ДанныеУчетнойПолитики = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(Объект.Дата, Новый Структура("Организация", Объект.Организация));
	
	ТекущиеДанные.НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ДанныеУчетнойПолитики
												, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериода);
												
	//БИТ Изюмов А.В. 30.07.12 <--- для типового ввода начальных остатков установим КорСчет как служебный
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС Тогда
		ТекущиеДанные.КорСчет = ПланыСчетов.бит_Дополнительный_2.Служебный;
	КонецЕсли;
	//БИТ Изюмов А.В. 30.07.12 <---
	
КонецПроцедуры // НачалоРедактированияСтрокиОС()
    
// Процедура обрабатывает изменение нематериального актива в строке таб.части.
// 
// Параметры:
// 	ИДСтроки - Число.
// 
&НаСервере
Процедура ИзменениеОсновногоСредстваСервер(ИДСтроки)
	
	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	// Заполнить инвентарный номер ОС.
	СоответствиеОС_ИнвентарныйНомер = фКэшЗначений.СоответствиеОС_ИнвентарныйНомер;
	бит_му_ВНА.ЗаполнитьИнвентарныйНомерТекущегоОС(ТекущиеДанные, Объект.Организация, СоответствиеОС_ИнвентарныйНомер);	
	фКэшЗначений.Вставить("СоответствиеОС_ИнвентарныйНомер", СоответствиеОС_ИнвентарныйНомер);
	
	//БИТ Изюмов А.В. 06.08.12 <--- присвоим класс ОС
	ТекущиеДанные.Класс = ТекущиеДанные.ОсновноеСредство.БИТ_ГруппаОСУУ;
	//БИТ Изюмов А.В. 06.08.12 <---
	
	ДокументОб = РеквизитФормыВЗначение("Объект");
	ДокументОб.ЗаполнитьКлассПоУмолчаниюМодуль(ТекущиеДанные);
		             	
	//БИТ Изюмов А.В. 06.08.12 <--- обработаем изменение класса ОС
	ЗначениеВДанныеФормы(ДокументОб, Объект);
	ИзменениеКлассаСервер(ИДСтроки);
	//БИТ Изюмов А.В. 06.08.12 <---
	
	// Преобразовать типы субконто по счетам .
	ВыборСчетаВТабличномПоле(ТекущиеДанные, "СчетУчета", "Субконто");
	ВыборСчетаВТабличномПоле(ТекущиеДанные, "КорСчет"  , "КорСубконто");
	// Синхронизация реквизитов строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "Субконто");	
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "КорСубконто");
	
	// Восстановить данные таблицы.
	ВосстановитьОтображениеДанныхФормы();
	
КонецПроцедуры // ИзменениеОсновногоСредстваСервер()

// Процедура обрабатывает изменение класса в строке табличной части.
// 
// Параметры:
//  ИДСтроки - Число.
// 
&НаСервере
Процедура ИзменениеКлассаСервер(ИДСтроки = Неопределено)
 
	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);	
	Если ТекущиеДанные = Неопределено Тогда 	
		Возврат;	
	КонецЕсли; 
	
	ДокументОб  = РеквизитФормыВЗначение("Объект");
	ИзмененСчет = Ложь;
	ДокументОб.ИзменениеКлассаМодуль(ТекущиеДанные, ИзмененСчет);
		
	Если ИзмененСчет Тогда
		ИзменениеСчетаУчетаСервер(ТекущиеДанные);													 
		// Синхронизируем реквизиты строки ОС.
		СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "Субконто");
	КонецЕсли;
	
	// Восстановить данные таблицы.
	ВосстановитьОтображениеДанныхФормы();
	
КонецПроцедуры // ИзменениеКлассаСервер()

// Процедура обрабатывает изменение флага УчитыватьКакОС.
// 
// Параметры:
//  ИДСтроки - Число.
// 
&НаСервере
Процедура ИзменениеПризнакаУчитыватьКакОССервер(ИДСтроки)

    ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки); 
    
    Если Не ТекущиеДанные.УчитыватьКакОС Тогда
   		   	
    	ТекущиеДанные.Класс = Справочники.бит_му_КлассыОсновныхСредств.ПустаяСсылка();
    	
    	ТекущиеДанные.СчетУчета = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
		
		ВыборСчетаВТабличномПоле(ТекущиеДанные, "СчетУчета", "Субконто");
		    													
   КонецЕсли;
   
КонецПроцедуры // ИзменениеПризнакаУчитыватьКакОССервер()
                  
// Процедура обрабатывает изменение первоначальной стоимости в строке таб.части.
// 
// Параметры:
// 	ИДСтроки - Число.
// 
&НаСервере
Процедура ИзменениеПервоначальнойСтоимостиСервер(ИДСтроки)
	
	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	бит_ОбщегоНазначения.СинхронизироватьСвойстваКонтейнера(ТекущиеДанные, Неопределено,
		Новый Структура("ПервоначальнаяСтоимость", "Сумма"));
	
КонецПроцедуры // ИзменениеПервоначальнойСтоимостиСервер

// Процедура пересчитывает сумму в ваюте ОС для строки.
// 
// Параметры:
// 	ТекущиеДанные.
//  СтрМсфо       - Структура.
//  СтрДоговор    - Структура.
// 
&НаСервере
Процедура ПересчитатьСтоимостьОСВВалютеДляТекущейСтроки(ТекущиеДанные, СтрМсфо, СтрДоговор)
														
	Если Объект.ВалютаДокумента = фВалютаДоговора Тогда
		ТекущиеДанные.СуммаВВалюте = ТекущиеДанные.Сумма;
	Иначе	
		ТекущиеДанные.СуммаВВалюте = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ТекущиеДанные.Сумма
	                                          , Объект.ВалютаДокумента
											  , фВалютаДоговора
											  , Объект.КурсДокумента
											  , СтрДоговор.Курс
											  , Объект.КратностьДокумента
											  , СтрДоговор.Кратность);
	КонецЕсли;												
 
КонецПроцедуры // ПересчитатьСтоимостьОСВВалютеДляТекущейСтроки()

// Процедура пересчитывает сумму в ваюте ОС.
// 
// Параметры:
// 	ТекущиеДанные.
// 
&НаСервере
Процедура ПересчитатьСтоимостьОСВВалюте(ТекущиеДанные = Неопределено)
	
	ПереченьВидовОпераций = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС;
	Если (Объект.ВидОперации <> ПереченьВидовОпераций.ПринятиеКУчетуОСВФинансовойАренде
		   И Объект.ВидОперации <> ПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде)
		 Или Не ЗначениеЗаполнено(фВалютаДоговора) Тогда
		Возврат;
	КонецЕсли;   
	
	КурсВалютыДокумента = Новый Структура("Курс, Кратность", Объект.КурсДокумента, Объект.КратностьДокумента); 
	КурсВалютыДоговора  = бит_КурсыВалют.ПолучитьКурсВалюты(фВалютаДоговора, Объект.Дата);
		  
	Если ТекущиеДанные = Неопределено Тогда
		Для каждого ТекущиеДанные  Из Объект.ОсновныеСредства Цикл
			ПересчитатьСтоимостьОСВВалютеДляТекущейСтроки(ТекущиеДанные, КурсВалютыДокумента, КурсВалютыДоговора);		
		КонецЦикла;
	Иначе
		ПересчитатьСтоимостьОСВВалютеДляТекущейСтроки(ТекущиеДанные, КурсВалютыДокумента, КурсВалютыДоговора);	
	КонецЕсли;
 
КонецПроцедуры // ПересчитатьСтоимостьОСВВалюте()

// Процедура обрабатывает изменение суммы в строке таб.части.
// 
// Параметры:
// 	ИДСтроки - Число.
// 
&НаСервере
Процедура ИзменениеСуммыСервер(ИДСтроки)
	
	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	бит_ОбщегоНазначения.СинхронизироватьСвойстваКонтейнера(ТекущиеДанные, Неопределено,
		Новый Структура("Сумма", "ПервоначальнаяСтоимость"));
													
	ПересчитатьСтоимостьОСВВалюте(ТекущиеДанные);

	Если ЭтоОС(ТекущиеДанные) Тогда 		
		ТекущиеДанные.УчитыватьКакОС = Истина;  		
	Иначе
		ТекущиеДанные.УчитыватьКакОС = Ложь;
		ИзменениеПризнакаУчитыватьКакОССервер(ТекущиеДанные.ПолучитьИдентификатор());		 
	КонецЕсли;

КонецПроцедуры // ИзменениеСуммыСервер()

// Процедура обрабатывает изменение метода начисления амортизации в строке таб.части.
// 
// Параметры:
// 	ИДСтроки - Число.
// 
&НаСервере
Процедура ИзменениеМетодаНачисленияАмортизацииСервер(ИДСтроки)
	
	ТекущиеДанные = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	// Очистим параметры ОС недоступные для выбранного метода ничасления амортизации.
	бит_му_ВНА.ОчиститьНедоступныеПараметрыАмортизации(ТекущиеДанные);
	
КонецПроцедуры // ИзменениеМетодаНачисленияАмортизацииСервер()

// Процедура обрабатывает выбор счета в таблице.
// 
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции.
//  ИмяСчета      - Строка.
//  ИмяСубконто   - Строка.
// 
&НаСервере
Процедура ВыборСчетаВТабличномПоле(ТекущиеДанные, ИмяСчета, ИмяСубконто)

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные[ИмяСчета], фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, ИмяСубконто);

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные[ИмяСчета]);
	ТекущиеДанные["КоличествоДоступных" + ИмяСубконто] = СвСч.КоличествоСубконто;

КонецПроцедуры // ВыборСчетаВТабличномПоле()

// Процедура выполняет действия необходимые при изменении СчетаУчета.
// 
// Параметры:
// 	ИДСтроки      			   - Число.
//  мНастройкиСубконтоСчетовМУ - Соответствие (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ИзменениеСчетаУчетаСервер(ИДСтроки = Неопределено, мНастройкиСубконтоСчетовМУ = Неопределено)
	
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
			 			, Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки)
						, ИДСтроки);	
						
	ВыборСчетаВТабличномПоле(ТекущиеДанные, "СчетУчета", "Субконто");
		
	// Синхронизируем реквизиты строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "Субконто");
	
	Если мНастройкиСубконтоСчетовМУ <> Неопределено Тогда
		УстановитьВидимостьСубконто(ТекущиеДанные.СчетУчета, "Субконто", мНастройкиСубконтоСчетовМУ);
	КонецЕсли;                                                                                       	
	
КонецПроцедуры // ИзменениеСчетаУчетаСервер()

// Процедура выполняет действия необходимые при изменении КорСчета.
// 
// Параметры:
// 	ИДСтроки 				   - Число.
//  мНастройкиСубконтоСчетовМУ - Соответствие (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ИзменениеКорСчетаСервер(ИДСтроки, мНастройкиСубконтоСчетовМУ = Неопределено)
	
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
			 			, Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки)
						, ИДСтроки);
						
	ВыборСчетаВТабличномПоле(ТекущиеДанные, "КорСчет", "КорСубконто");
	
	// Синхронизируем реквизиты строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "КорСубконто");
	
	// Заполнение аналитики кор счета, если необходимо.
	ВидыСубконто = ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущиеДанные.КорСчет);
	Для i = 1 По СвСч.КоличествоСубконто Цикл
		
		КорСубконто = ТекущиеДанные["КорСубконто" + i];
		Если ЗначениеЗаполнено(КорСубконто) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидСубконто = СвСч["ВидСубконто" + i];
		
		Если ВидСубконто = ВидыСубконто.Контрагенты Тогда
			ТекущиеДанные["КорСубконто" + i] = Объект.Контрагент;
		КонецЕсли;
		
		Если ВидСубконто = ВидыСубконто.ДоговорыКонтрагентов Тогда
			ТекущиеДанные["КорСубконто" + i] = Объект.ДоговорКонтрагента;
		КонецЕсли;
		
	КонецЦикла;
	
	Если мНастройкиСубконтоСчетовМУ <> Неопределено Тогда
		УстановитьВидимостьСубконто(ТекущиеДанные.КорСчет, "КорСубконто", мНастройкиСубконтоСчетовМУ);
	КонецЕсли;

КонецПроцедуры // ИзменениеКорСчетаСервер()

// Процедура синхронизирует реквизиты строки НМА с аналитикой счетов.
// 
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции.
//  ИмяСубконто   - Строка.
// 
&НаСервере
Процедура СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, ИмяСубконто)
    
    ДокументОб = РеквизитФормыВЗначение("Объект");
    ДокументОб.СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, ИмяСубконто);
    	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиОС()
       
////////////////////////////////////////////////////////////////////////////////
// Аренда

// Процедура проверяет правильно ли выбран счет в зависимости от признака валютного учета.
// 
// Параметры:
//  ИмяРеквизита - Строка.
// 
&НаСервере
Функция ЭтотСчетВалютныйСервер(ИмяРеквизита)
	
	Счет = Объект[ИмяРеквизита];
		
	ИмяРеквизита = Объект.Ссылка.Метаданные().Реквизиты[ИмяРеквизита].Синоним;
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Возврат СвСч.Валютный;
	
КонецФункции // ЭтотСчетВалютныйСервер()

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
// 
// Параметры:
//  ИзмененДоговор - Булево.
// 
&НаСервере
Процедура ИзменениеКонтрагентаСервер(ИзмененДоговор)
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если Объект.ДоговорКонтрагента.Владелец <> Объект.Контрагент Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ИзмененДоговор = Истина;
		КонецЕсли;
    Иначе
        //1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//ИмяКонтрагент = "Контрагент";
		ИмяКонтрагент = "Владелец";
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
        Если Объект.ДоговорКонтрагента <> Неопределено И Объект.ДоговорКонтрагента[ИмяКонтрагент] <> Объект.Контрагент Тогда             
			Объект.ДоговорКонтрагента = Неопределено;
            ИзмененДоговор = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИзменениеКонтрагентаСервер()

// Процедура обрабатывает изменение договора.
// 
// Параметры:
//  ПерезаполнятьСчетаУчета - Булево.
// 
&НаСервере
Процедура ИзменениеДоговораСервер(ПерезаполнятьСчетаУчета)

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//ИмяКонтрагент      = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		ИмяКонтрагент = "Владелец";
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		КонтрагентДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, ИмяКонтрагент);		 
	Иначе
		КонтрагентДоговора = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если КонтрагентДоговора <> Объект.Контрагент Тогда
		Объект.Контрагент = КонтрагентДоговора;
	КонецЕсли;
	
	Если ПерезаполнятьСчетаУчета Тогда
		ТекущийСчет = Объект.СчетУчетаДолгосрочный;
		УстановитьСчетаРасчетов();
		
		Если Объект.СчетУчетаДолгосрочный <> ТекущийСчет Тогда
			ИзменениеСчетаУчетаДолгосрочногоСервер();
		КонецЕсли; 
	КонецЕсли; // Перезаполнение счетов учета.
	
	Если Объект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		РассчитатьНоминальнуюСтавкуСервер();
	КонецЕсли; 
	
	СтруктураПараметров = Документы.бит_му_ПринятиеКУчетуОС.ПолучитьСреднийКурсАвансаИВалютуДоговора(Объект.Организация,
	                                                                                                 Объект.Контрагент,
																									 Объект.ДоговорКонтрагента,
	                                                                                                 Объект.ВалютаДокумента, 
																									 Объект.Дата,
																									 Объект.СчетУчетаАванса);
																									 
    фВалютаДоговора    = СтруктураПараметров.ВалютаДоговора;
	фСреднийКурсАванса = СтруктураПараметров.СреднийКурсАвансаМУ;
	
	ПересчитатьСтоимостьОСВВалюте();
	
	УстановитьВидимостьДоступностьПоДоговору();	

КонецПроцедуры // ИзменениеДоговораСервер()

// Процедура устанавливает счета расчетов значениями из регистра.
// 
&НаСервере
Процедура УстановитьСчетаРасчетов()
	
	СтруктураСчетов = бит_му_ОбщегоНазначения.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаДолгосрочный           = СтруктураСчетов.СчетКредиторскойЗадолженностиДолгосрочной;
	Объект.СчетУчетаКраткосрочный          = СтруктураСчетов.СчетКредиторскойЗадолженностиКраткосрочной;
	Объект.СчетУчетаПроцентовДолгосрочный  = СтруктураСчетов.СчетДолгосрочныхПроцентов;
	Объект.СчетУчетаПроцентовКраткосрочный = СтруктураСчетов.СчетКраткосрочныхПроцентов;
	Объект.СчетУчетаАванса                 = СтруктураСчетов.СчетКраткосрочныхОбязательств;
	
КонецПроцедуры

// Процедура выполняет действия необходимые при изменении долгосрочного счета учета.
// 
&НаСервере
Процедура ИзменениеСчетаУчетаДолгосрочногоСервер()

	Для каждого СтрокаОС Из Объект.ОсновныеСредства Цикл
		СтрокаОС.КорСчет = Объект.СчетУчетаДолгосрочный;		
		ИзменениеКорСчетаСервер(СтрокаОС);
	КонецЦикла; 	

КонецПроцедуры // ИзменениеСчетаУчетаДолгосрочного()

// Процедура выполняет действия необходимые при изменении суммы аванса в валюте.
// 
// Параметры:
//  СуммаАванса  	   - Число.
//  СуммаАвансаВВалюте - Число.
//  СреднийКурсАванса  - Число.
// 
&НаКлиентеНаСервереБезКонтекста 
Процедура ИзменениеСуммаАвансаВВалюте(СуммаАванса, СуммаАвансаВВалюте, СреднийКурсАванса)
	
	СуммаАванса = СуммаАвансаВВалюте * СреднийКурсАванса;

КонецПроцедуры // ИзменениеСуммаАвансаВВалюте()

// Процедура рассчитывает общую сумму аванса по остаткам на счете аванса.
// 
&НаСервере
Процедура РассчитатьОбщуюСуммуАвансаСервер()

	// Расчет суммы аванса делаем по финансовым графикам.
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		КонецПериода = Новый Граница(Объект.Дата);
	Иначе
		КонецПериода = Новый Граница(КонецМесяца(Объект.Дата));
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"       , Объект.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Объекты"			  , Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("КонецПериода"	  , КонецПериода);

 	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЕСТЬNULL(Обороты.СуммаПлатежаРеглОборот, 0))		 	КАК СуммаПлатежаРегл,
	|	СУММА(ЕСТЬNULL(Обороты.СуммаПлатежаВзаиморасчетыОборот, 0)) КАК СуммаПлатежаВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.бит_му_ФинансовыеГрафики.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация И Объект В (&Объекты)
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК Обороты
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Объект.СуммаАвансаВВалюте = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Объект.СуммаАвансаВВалюте = Выборка.СуммаПлатежаВзаиморасчеты;
	КонецЕсли;
	
	ИзменениеСуммаАвансаВВалюте(Объект.СуммаАванса, Объект.СуммаАвансаВВалюте, фСреднийКурсАванса);
	
КонецПроцедуры // РассчитатьОбщуюСуммуАвансаСервер()

// Процедура распределяет общую сумму аванса по строкам табличной части
// пропорционально суммам.
// 
// Параметры:
//  ТекстСообщения - Строка.
// 
&НаСервере
Процедура РаспределитьСуммуАвансаСервер(ТекстСообщения = "")
	
	Если Объект.СпособПолученияСтавки =  Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ
		И Объект.СуммаАвансаВВалюте = 0 Тогда
		
		ОсновныеСредства = Объект.ОсновныеСредства.Выгрузить();
		ОсновныеСредства.ЗаполнитьЗначения(0,"СуммаАвансаВВалюте");
		ОсновныеСредства.ЗаполнитьЗначения(0,"СуммаАванса");
		Объект.ОсновныеСредства.Загрузить(ОсновныеСредства);
		
	Иначе
		
		Если Объект.СуммаАвансаВВалюте = 0 ИЛИ Объект.ОсновныеСредства.Итог("СуммаВВалюте") = 0 Тогда
			ТекстСообщения = ТекстСообщения + Нстр("ru = 'Не удалось распределить сумму аванса в валюте, так как она пуста.'");
			Возврат;
		КонецЕсли;
		
		ОсновныеСредства = Объект.ОсновныеСредства.Выгрузить();
		// Распределение "СуммаВВалюте".
		Коэффициенты 	 = ОсновныеСредства.ВыгрузитьКолонку("СуммаВВалюте");
		Результат 	 	 = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
									Объект.СуммаАвансаВВалюте, Коэффициенты, 2);
							
		ОсновныеСредства.ЗагрузитьКолонку(Результат,"СуммаАвансаВВалюте");
		
		// Распределение "СуммаАванса".
		Результат 	 	 = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
									Объект.СуммаАванса, Коэффициенты, 2);
									
		ОсновныеСредства.ЗагрузитьКолонку(Результат,"СуммаАванса");
		
		Объект.ОсновныеСредства.Загрузить(ОсновныеСредства);

	КонецЕсли; 
	
КонецПроцедуры // РаспределитьСуммуАвансаСервер()

// Процедура распределяет общую сумму задолженности по строкам табличной части
// пропорционально суммам.
// 
// Параметры:
//  ТекстСообщения - Строка.
// 
&НаСервере
Процедура РаспределитьОбщуюСуммуЗадолженностиСервер(ТекстСообщения)

	Если Объект.СуммаЗадолженности = 0 Тогда
		ТекстСообщения = ТекстСообщения + Нстр("ru = 'Не удалось распределить сумму задолженности, так как она пуста.'");
	КонецЕсли;
	
	// Распределение суммы задолженности.
	Распределение = бит_ОбщегоНазначения.РаспределитьПропорционально(Объект.СуммаЗадолженности, Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("Сумма"));	
	Сч = 0;
	Для каждого СтрокаОС Из Объект.ОсновныеСредства Цикл
		СтрокаОС.СуммаЗадолженности = Распределение[Сч];
		Сч = Сч + 1;
	КонецЦикла;
	
	Если Объект.СуммаЗадолженностиВВалюте = 0 Тогда
		ТекстСообщения = ТекстСообщения + Нстр("ru = 'Не удалось распределить сумму задолженности в валюте, так как она пуста.'");
	КонецЕсли;
	
	// Распределение суммы задолженности в валюте.
	Распределение = бит_ОбщегоНазначения.РаспределитьПропорционально(Объект.СуммаЗадолженностиВВалюте, Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("СуммаВВалюте"));	
	Сч = 0;
	Для каждого СтрокаОС Из Объект.ОсновныеСредства Цикл
		СтрокаОС.СуммаЗадолженностиВВалюте = Распределение[Сч];
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры // РаспределитьОбщуюСуммуЗадолженностиСервер()

// Процедура выполняет расчет реквизита Сумма в табличной части АрендаОС.
// 
&НаСервере
Процедура РассчитатьСуммуСервер()
  
	СтруктураКурсаДог  = бит_КурсыВалют.ПолучитьКурсВалюты(фВалютаДоговора, Объект.Дата);
	
	Для каждого СтрокаОС Из Объект.ОсновныеСредства Цикл
		СуммаДолга = СтрокаОС.СуммаВВалюте - СтрокаОС.СуммаАвансаВВалюте;		
		Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
								СуммаДолга, фВалютаДоговора, Объект.ВалютаДокумента, 
								СтруктураКурсаДог.Курс, Объект.КурсДокумента, 
								СтруктураКурсаДог.Кратность, Объект.КратностьДокумента);
												  
		СтрокаОС.Сумма = Сумма + СтрокаОС.СуммаАванса;
	КонецЦикла;
	         
КонецПроцедуры // РассчитатьСуммуСервер()

// Процедура выполняет расчет реквизита Сумма в табличной части АрендаОС.
// 
&НаСервере
Процедура РассчитатьСтоимостьОС()
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимКорректировки");	
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		СтруктураПараметров.Вставить("Периодичность", "День");
	Иначе
		СтруктураПараметров.Вставить("Взаиморасчеты");
	КонецЕсли; 

	СтруктураКурсаДог = бит_КурсыВалют.ПолучитьКурсВалюты(фВалютаДоговора, Объект.Дата);
	
	Для каждого СтрокаОС Из Объект.ОсновныеСредства Цикл
		
		Если ОтсутствуетФинансовыйГрафик(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, СтрокаОС.ОсновноеСредство) Тогда
		    ТекстСообщения = НСтр("ru = 'По договору не найден график платежей для основного средства ""%1"". Проверьте заполнение документа «Дополнительные условия по договору».'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаОС.ОсновноеСредство);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли; 
		
		Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
							
			ТаблицаПлатежи = бит_му_ОбщегоНазначения.ПолучитьТаблицуПлатежей(Объект.ДоговорКонтрагента, СтрокаОС.ОсновноеСредство,Объект.Дата, Ложь, СтруктураПараметров);

			ПараметрыФункции = Новый Массив;
			Для Каждого СтрокаТаблицы Из ТаблицаПлатежи Цикл
				
				Коэф    = СтрокаТаблицы.СуммаПлатежаВзаиморасчеты;
				Если НачалоДня(СтрокаТаблицы.ДатаПлатежа) <= НачалоДня(Объект.Дата) Тогда
					Степень = 0;
				Иначе
					Степень = (НачалоДня(СтрокаТаблицы.ДатаПлатежа)-НачалоДня(Объект.Дата))/(86400*365);
				КонецЕсли; 
				
				ПарамСлагаемого = бит_му_ОбщегоНазначения.ПараметрыСтепеннойФункции(Коэф, Степень);
				ПараметрыФункции.Добавить(ПарамСлагаемого);
				
			КонецЦикла; 
			
			Аргумент = (1/(1 + СтрокаОС.ЭСП/100));
			СправедливаяСтоимость = бит_му_ОбщегоНазначения.СтепеннаяФункция(ПараметрыФункции, Аргумент);
			
		Иначе
			
			МассивПлатежей = бит_му_ОбщегоНазначения.СформироватьМассивПлатежей(Объект.ДоговорКонтрагента
			                                                                     ,СтрокаОС.ОсновноеСредство
																				 ,Объект.Дата
																				 ,
																				 ,СтруктураПараметров);
																				 
				
			Аргумент = (1/(1 + СтрокаОС.ЭСП/(100*12)));
			Дельта = МассивПлатежей[0];
			СправедливаяСтоимость = бит_му_ОбщегоНазначения.АлгебраическаяФункция(МассивПлатежей, Аргумент);
		    СправедливаяСтоимость = СправедливаяСтоимость - Дельта;
			
		КонецЕсли; 
		
		СтрокаОС.СуммаВВалюте = СправедливаяСтоимость + СтрокаОС.СуммаАвансаВВалюте;
		
		Если СтрокаОС.СуммаВВалюте = 0 Тогда
			СтрокаОС.Сумма = 0;
		Иначе
			СуммаДолга = СтрокаОС.СуммаВВалюте - СтрокаОС.СуммаАвансаВВалюте;		
			Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
									СуммаДолга, фВалютаДоговора, Объект.ВалютаДокумента, 
									СтруктураКурсаДог.Курс, Объект.КурсДокумента, 
									СтруктураКурсаДог.Кратность, Объект.КратностьДокумента);
													  
			СтрокаОС.Сумма = Сумма + СтрокаОС.СуммаАванса;
			СтрокаОС.ПервоначальнаяСтоимость = СтрокаОС.Сумма;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ОтсутствуетФинансовыйГрафик(Организация, Контрагент, ДоговорКонтрагента, ОсновноеСредство)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ОсновноеСредство",   ОсновноеСредство);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ФинансовыеГрафики.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ФинансовыеГрафики.Объект КАК ОсновноеСредство
		|ИЗ
		|	РегистрНакопления.бит_му_ФинансовыеГрафики.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И Объект = &ОсновноеСредство
		|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ФинансовыеГрафики";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда		
		Результат = Истина;
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

// Процедура рассчитывает эффективную ставку процента для указанной строки.
// 
// Параметры:
//  ТекстСообщения - Строка.
//  ИДСтроки 	   - Число.
// 
&НаСервере
Процедура РассчитатьТекущееЭСП(ТекстСообщения, ИДСтроки)

	Отказ = Ложь;
	
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
			 			, Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки)
						, ИДСтроки);
							
	ОС = ТекущиеДанные.ОсновноеСредство;
	
	МассивПлатежей = Новый Массив;
	ТаблицаПлатежи = Новый ТаблицаЗначений;
	
	СуммаУменьшения = 0;	
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		
		// По дням.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Периодичность", "День");
		ТаблицаПлатежи = бит_му_ОбщегоНазначения.ПолучитьТаблицуПлатежей(Объект.ДоговорКонтрагента, ОС, Объект.Дата, Ложь, СтруктураПараметров);
		
	Иначе	
		
		// По месяцам.		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Взаиморасчеты");
		МассивПлатежей = бит_му_ОбщегоНазначения.СформироватьМассивПлатежей(Объект.ДоговорКонтрагента, ОС, Объект.Дата, Истина, СтруктураПараметров);
		
		Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводОстатковОСВФинансовойАренде Тогда
			
			// В случае ввода остатков в первом периоде проценты не начисляются
			// поэтому для вычисления эффективной ставки нужно подать на вход другие значения.
			Если МассивПлатежей.Количество() > 0 Тогда
				
				СуммаУменьшения = МассивПлатежей[0];
				МассивПлатежей.Удалить(0);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
		
	Если МассивПлатежей.Количество() > 0 ИЛИ ТаблицаПлатежи.Количество() > 0 Тогда
		
		Отказ = Ложь;
		
		Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводОстатковОСВФинансовойАренде Тогда
			Стоимость = ТекущиеДанные.СуммаЗадолженностиВВалюте;
			Стоимость = Стоимость - СуммаУменьшения;			
		Иначе
			Стоимость = ТекущиеДанные.СуммаВВалюте - ТекущиеДанные.СуммаАвансаВВалюте;
		КонецЕсли;
		
		Если Стоимость < 0 Тогда
			НовоеСообщение = Нстр("ru = 'В строке №%1% стоимость равна нулю.'");
			НовоеСообщение = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НовоеСообщение, ТекущиеДанные.НомерСтроки);
			ТекстСообщения = ТекстСообщения + НовоеСообщение;				 
			Отказ = Истина;	
		КонецЕсли; 
						 
		Если Не Отказ Тогда
			
			// Изменение кода. Начало. 02.05.2012{{
			СтрПар = Новый Структура;
			СтрПар.Вставить("СпособРасчета" , СпособРасчетаЭСП);
			СтрПар.Вставить("ТаблицаПлатежи", ТаблицаПлатежи);
			СтрПар.Вставить("МассивПлатежи" , МассивПлатежей);
			СтрПар.Вставить("Стоимость"     , Стоимость);
			СтрПар.Вставить("Точность"      , 0.000000000001); 
			СтрПар.Вставить("ПервыйПериод"  , Объект.Дата);
			
			// ЭСП = бит_му_ОбщегоНазначения.ВычислитьЭффективнуюСтавку(МассивПлатежей, Стоимость, , , 0.000000000001);
			ЭСП = бит_му_ОбщегоНазначения.ВычислитьЭСП(СтрПар);
			// Изменение кода. Конец. 02.05.2012}}
			
			Если ЭСП < 0 Тогда
				НовоеСообщение = Нстр("ru = 'В строке № %1% указано основное средство ""%2%"" для которого ЭСП отрицательна.'")
								+ Символы.ПС + Нстр("ru = 'Проверьте дату документа и даты платежей документе ""Дополнительные условия по договору"", а также стоимости платежей.'");
				НовоеСообщение = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НовоеСообщение, ТекущиеДанные.НомерСтроки, ТекущиеДанные.ОсновноеСредство);
				ТекстСообщения = ТекстСообщения + НовоеСообщение;							   
			КонецЕсли;
			
			ТекущиеДанные.ЭСП = ЭСП;
			
		КонецЕсли;
		
	Иначе
		
		НовоеСообщение = Нстр("ru = 'В строке № %1% указано основное средство ""%2%"" для которого не сформирован график платежей.'")
								+ Символы.ПС + Нстр("ru = 'График можно заполнить в документе ""Дополнительные условия по договору"".'");
		НовоеСообщение = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НовоеСообщение, ТекущиеДанные.НомерСтроки, ТекущиеДанные.ОсновноеСредство);
		ТекстСообщения = ТекстСообщения + НовоеСообщение;						   
		
		ТекущиеДанные.ЭСП = 0;
		
	КонецЕсли;

КонецПроцедуры // РассчитатьТекущееЭСП()

// Процедура рассчитывает эффективную ставку процента для всех строк.
// 
// Параметры:
//  ТекстСообщения - Строка.
//   
&НаСервере
Процедура РассчитатьЭСПСервер(ТекстСообщения)
	
	Для каждого ТекущиеДанные Из Объект.ОсновныеСредства Цикл
		РассчитатьТекущееЭСП(ТекстСообщения, ТекущиеДанные);               
	КонецЦикла; 
	
КонецПроцедуры // РассчитатьЭСПСервер()

// Процедура рассчитывает номинальную ставку процента для всех строк.
// 
// Параметры:
//  ТекстСообщения - Строка.
//   
&НаСервере
Процедура РассчитатьНоминальнуюСтавкуСервер()
	
	ДанныеПоНоминальнойСтавке = бит_му_ФинИнструменты.ПолучитьДанныеПоНоминальнойСтавке(Объект.Дата, Объект.ДоговорКонтрагента);	
	СтавкаНоминальная = ДанныеПоНоминальнойСтавке.Ставка;
	
	Для каждого ТекущиеДанные Из Объект.ОсновныеСредства Цикл
		ТекущиеДанные.ЭСП = СтавкаНоминальная;               
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет все расчеты.
// 
// Параметры:
//  ТекстСообщения - Строка.
//  ЭтоПроведение  - Булево.
// 
&НаСервере
Процедура РассчитатьВсеСервер(ТекстСообщения = "", ЭтоПроведение = Ложь)
	
	ЭтоРасчет = Объект.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.Расчет;
	Если Не ЭтоРасчет Тогда
		РассчитатьНоминальнуюСтавкуСервер();
	КонецЕсли;
	
	Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ПринятиеКУчетуОСВФинансовойАренде Тогда		  		
		
		РассчитатьОбщуюСуммуАвансаСервер(); 		
		РаспределитьСуммуАвансаСервер(ТекстСообщения); 
		Если ЭтоРасчет Тогда
			РассчитатьСуммуСервер();
		Иначе
			РассчитатьСтоимостьОС();
		КонецЕсли; 
		
	ИначеЕсли Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводОстатковОСВФинансовойАренде 
		И Не ЭтоПроведение Тогда
		
		РаспределитьОбщуюСуммуЗадолженностиСервер(ТекстСообщения);
		
	КонецЕсли;
	
	Если ЭтоРасчет Тогда
		РассчитатьЭСПСервер(ТекстСообщения);
	КонецЕсли;
	
	Если ЭтоПроведение Тогда
		
		ЗаголовокСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Нстр("ru = 'Проведение документа %1%'")
																						, Объект.Ссылка);
																						
		ДокументОб = РеквизитФормыВЗначение("Объект");
																										
		// Если бит_ОбщегоНазначения.ЗаблокироватьОбъект(ДокументОб, ЗаголовокСообщения) Тогда.
		   	бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокументОб, РежимЗаписиДокумента.Проведение, ЗаголовокСообщения);
		// КонецЕсли;	
	
		ЗначениеВРеквизитФормы(ДокументОб, "Объект");

	
	КонецЕсли;
	
КонецПроцедуры // РассчитатьВсеСервер()

// Процедура заполняет кор счета втабличнойчасти "Основные средства".
// 
&НаСервере
Процедура ЗаполнитьКорСчетаСервер()

	Для каждого СтрокаОС Из Объект.ОсновныеСредства Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОС.КорСчет) Тогда
			
			СтрокаОС.КорСчет = Объект.СчетУчетаДолгосрочный;
			ИзменениеКорСчетаСервер(СтрокаОС);
						
		КонецЕсли; // Если кор счет пуст.
		
		Для i = 1 По фКоличествоСубконтоМУ Цикл
			
			ИмяСубконто = "КорСубконто" + i;
			
			Если ТипЗнч(СтрокаОС[ИмяСубконто]) = Тип("СправочникСсылка.Контрагенты") Тогда
				
				СтрокаОС[ИмяСубконто] = Объект.Контрагент;
				
			ИначеЕсли ТипЗнч(СтрокаОС[ИмяСубконто]) = Тип("СправочникСсылка.ДоговорыКонтрагентов")	Тогда
				
				СтрокаОС[ИмяСубконто] = Объект.ДоговорКонтрагента;
				
			КонецЕсли; 
			
		КонецЦикла; // ФКоличествоСубконтоМУ.
		
	КонецЦикла; // Цикл по табличной части ОС.

КонецПроцедуры // ЗаполнитьКорСчетаСервер()

////////////////////////////////////////////////////////////////////////////////
// Субконто

// Процедура устанавливает связи субконто.
// 
// Параметры:
//  ИмяСчета    - Строка.
//  ИмяСубконто - Строка.
//  ИмяТаблицы  - Строка.
// 
&НаСервере
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура УстановитьСвязиСубконто(ИмяСчета, ИмяСубконто, ИмяТаблицы)
Процедура УстановитьСвязиСубконто(ИмяСчета, ИмяСубконто, ИмяТаблицы, ПутьТекущиеДанные = "Элементы.ОсновныеСредства.ТекущиеДанные")
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
												   , ИмяСчета
												   , ИмяСубконто
												   , фКоличествоСубконтоМУ
												   , ИмяТаблицы
												   //1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
												   //, "Элементы.ОсновныеСредства.ТекущиеДанные");	
												   , ПутьТекущиеДанные);
												   //1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
												   
КонецПроцедуры // УстановитьСвязиСубконто()

// Процедура восстанавливает количество доступных субконто.
// 
&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для каждого СтрокаТаблицы Из Объект.ОсновныеСредства Цикл
        
        СвСчУч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетУчета);
        СвСчКр = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.КорСчет);
        
		СтрокаТаблицы.КоличествоДоступныхСубконто    = СвСчУч.КоличествоСубконто;
		СтрокаТаблицы.КоличествоДоступныхКорСубконто = СвСчКр.КоличествоСубконто;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из Объект.бит_окей_СоставОсновныхСредств Цикл
		
		СтрокаТаблицы.КоличествоДоступныхСубконтоДт    = СтрокаТаблицы.СчетДт.ВидыСубконто.Количество();
		СтрокаТаблицы.КоличествоДоступныхСубконтоКт = СтрокаТаблицы.СчетКт.ВидыСубконто.Количество();
		
	КонецЦикла;	
	
КонецПроцедуры // ВосстановитьКоличествоДоступныхСубконто()

////////////////////////////////////////////////////////////////////////////////
// Оформление

// Устанавливает доступность параметров ОС зависимых от метода ничасления амортизации.
// 
&НаСервере
Процедура УстановитьОформлениеПараметровАмортизации()
	
	Для Каждого ТекущийМетод Из Перечисления.бит_му_МетодыНачисленияАмортизации Цикл
						
		СтруктураОформления = Новый Структура("ТолькоПросмотр, ЦветФона", Истина, Новый Цвет(225,225,225));
		СтруктураУсловия 	= Новый Структура("УсловиеЛевое, УсловиеПравое"
													, "Объект.ОсновныеСредства.МетодНачисленияАмортизации"
													, ТекущийМетод);
		ИмитацияСтроки 		   = Новый Структура("МетодНачисленияАмортизации", ТекущийМетод);
		МассивОформляемыхПолей = бит_му_ВНА.СформироватьМассивНедоступныхПараметровАмортизации(ИмитацияСтроки, "ОсновныеСредства");													
													
		СтруктураУО = Новый Структура;
		СтруктураУО.Вставить("СтруктураОформления"   , СтруктураОформления);
		СтруктураУО.Вставить("СтруктураУсловия"      , СтруктураУсловия);
		СтруктураУО.Вставить("МассивОформляемыхПолей", МассивОформляемыхПолей);
		
		бит_РаботаСДиалогамиСервер.ДобавитьЭлементУсловногоОформления(УсловноеОформление
													, "Оформление по методу начисления амортизации"
													, СтруктураУО);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьОформлениеПараметровАмортизации()

// Процедура дополняет условное оформление формы.
// 
&НаСервере
Процедура НастроитьОформлениеФормы()
	
	// Оформление.
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   , "ОсновныеСредства"
															   , "Субконто"
															   , "КоличествоДоступныхСубконто"
															   , фКоличествоСубконтоМУ
                                                               ,,,,,, Истина);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   , "ОсновныеСредства"
															   , "КорСубконто"
															   , "КоличествоДоступныхКорСубконто"
															   , фКоличествоСубконтоМУ
                                                               ,,,,,, Истина);
															   
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   , "бит_окей_СоставОсновныхСредств"
															   , "СубконтоДт"
															   , "КоличествоДоступныхСубконтоДт"
															   , фКоличествоСубконтоМУ);
	
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   , "бит_окей_СоставОсновныхСредств"
															   , "СубконтоКт"
															   , "КоличествоДоступныхСубконтоКт"
															   , фКоличествоСубконтоМУ);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	УстановитьОформлениеПараметровАмортизации();
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
												   
	
						
КонецПроцедуры // НастроитьОформлениеФормы()

////////////////////////////////////////////////////////////////////////////////
// Подбор ОС

// Функция определяет превышает ли сумма ОС порог признания ОС.
// 
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции.
// 
// Возвращаемое значение:
//  Булево.
// 
&НаСервере
Функция ЭтоОС(ТекущиеДанные)

	// Изменение кода. Начало. 19.12.2016{{
	ДокументОб = РеквизитФормыВЗначение("Объект");
	флЭтоОС = ДокументОб.ЭтоОС(ТекущиеДанные, фПараметрыУчетнойПолитики);	
	// Изменение кода. Конец. 19.12.2016}}

	Возврат флЭтоОС;
	
КонецФункции // ЭтоОС()

// Процедура добавляет/загружает подобранные основные средства.
// 
// Параметры:
//  ВыбранноеЗначение.
// 
&НаСервере
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ДобавитьЗагрузитьОС(ВыбранноеЗначение)
Процедура ДобавитьЗагрузитьОС(ВыбранноеЗначение, мНастройкиСубконтоСчетовМУ)
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	// *Обновление*, Братухин М.В., 2017.04.03 (
	//ДокОбъект.ЗаполнитьОсновныеСредства(ВыбранноеЗначение);
	//ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ЭтоПринятиеКУчетуОСПоОстаткам = ВыбранноеЗначение.Режим = Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуОСПоОстаткам;
	// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-10-22 (#4297) 
	ЭтоПринятиеКУчетуОборудования = ВыбранноеЗначение.Режим = Перечисления.бит_му_РежимыПодбораВНА.ок_ПринятиеКУчетуОборудования;
	// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-10-22 (#4297) 

	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных   = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов, ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	Документы.бит_му_ПринятиеКУчетуОС.ПреобразоватьТаблицуУчитываяРаспределениеНДС(ТаблицаДанных); 
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ВНА);
		
		МассивСтрок = Объект.ОсновныеСредства.НайтиСтроки(СтруктураОтбора);
		
		НайденнаяСтрока = ?(МассивСтрок.Количество() = 0, Неопределено, МассивСтрок[0]); 		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = Объект.ОсновныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ВНА;
			НоваяСтрока.Класс = НоваяСтрока.ОсновноеСредство.БИТ_ГруппаОСУУ;
			НоваяСтрока.УчитыватьКакОС             = Истина;
			НоваяСтрока.НачислятьАмортизацию       = Истина;
			НоваяСтрока.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизации.Линейный;
			
			// Параметр "НачислятьАмортизациюСТекущегоПериода" извлекается из учетной политики.
			ДанныеУчетнойПолитики = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(Объект.Дата, Новый Структура("Организация", Объект.Организация));
			
			НоваяСтрока.НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ДанныеУчетнойПолитики,
									ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериода);
			
			
			ДокОбъект.ЗаполнитьКлассПоУмолчаниюМодуль(НоваяСтрока, Истина);

			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-10-22 (#4297) 
			//ДокОбъект.ИзменениеКлассаМодуль(НоваяСтрока);
			ДокОбъект.ИзменениеКлассаМодуль(НоваяСтрока, , ЭтоПринятиеКУчетуОборудования);
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-10-22 (#4297) 

			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(НоваяСтрока.СчетУчета, 4);									  
			бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(НоваяСтрока, НастройкиСубконто, "Субконто");

			//БИТ Изюмов А.В. 02.08.12
			Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС Тогда
				НоваяСтрока.КорСчет = ПланыСчетов.бит_Дополнительный_2.Служебный;
			КонецЕсли;
			//БИТ Изюмов А.В. 02.08.12
			
			ИзменениеКорСчетаСервер(НоваяСтрока.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
			ИзменениеСчетаУчетаСервер(НоваяСтрока.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
			
			// Срок полезного использования из регистра "Параметры амортизации ОС (бухгалтерский учет)" 
			// МИНУС количество месяцев между датой вводна начальных остатков и датой принятия к учету
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-10-22 (#4297) 
			//Если ЭтоПринятиеКУчетуОСПоОстаткам И ТаблицаДанных.Колонки.Найти("СрокПолезногоИспользования") <> Неопределено Тогда
			Если (ЭтоПринятиеКУчетуОСПоОстаткам 
				Или ЭтоПринятиеКУчетуОборудования)
				И ТаблицаДанных.Колонки.Найти("СрокПолезногоИспользования") <> Неопределено Тогда
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-10-22 (#4297) 
				КоличествоМесяцевОтПринятияБУ = МЕСЯЦ(Объект.Дата) - МЕСЯЦ(СтрокаТаблицы.ДатаПринятияКУчету);
				НоваяСтрока.СрокПолезногоИспользования = НоваяСтрока.СрокПолезногоИспользования - КоличествоМесяцевОтПринятияБУ;
			КонецЕсли;
		
			// Выполним подбор счетов.
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-10-22 (#4297) 
			//Документы.бит_му_ПринятиеКУчетуОС.ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы, ЭтотОбъект); 
			Документы.бит_му_ПринятиеКУчетуОС.ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы, РеквизитФормыВЗначение("Объект"));
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-10-22 (#4297) 
			
			Если Не ЭтоОС(НоваяСтрока) Тогда
		   
				НоваяСтрока.УчитыватьКакОС = Ложь;
				
				НоваяСтрока.Класс     = Справочники.бит_му_КлассыОсновныхСредств.ПустаяСсылка();
				НоваяСтрока.СчетУчета = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				
				НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(НоваяСтрока.СчетУчета, 4);									  
				бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(НоваяСтрока, НастройкиСубконто, "Субконто");
					
			КонецЕсли;
			
			// бит_ASubbotina добавление кода. Начало. 01.02.2016{{
			НоваяСтрока.УвеличениеСтоимостиОС = СтрокаТаблицы.ЭтоРаспределениеНДС;
			// бит_ASubbotina добавление кода. Конец. 01.02.2016}}
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Основное средство ""%1%"" уже подобрано в строке №%2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ВНА, НайденнаяСтрока.НомерСтроки);				 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных
	// *Обновление*, Братухин М.В., 2017.04.03 )
	
	ВосстановитьОтображениеДанныхФормы();
	
КонецПроцедуры // ДобавитьЗагрузитьОС()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект, СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()
																			   
// Управляет видимостью/доступностью элементов формы.
// 
&НаКлиенте
Процедура УстановитьОтображениеДанныхСтроки()
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		УстановитьОтображениеДанныхСтрокиСервер(ТекущиеДанные.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
				
	КонецЕсли;
		
КонецПроцедуры // УстановитьОтображениеДанныхСтроки()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура формирует дерево видов операций для выбора вида операции.
// 
// Возвращаемое значение:
//  ДеревоЗначений.
// 
&НаКлиенте
Функция СформироватьДеревоВидовОпераций()

	КореньДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
		
	Для каждого КлЗнч Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС Цикл
		
		НовСтрока = КореньДерева.Добавить();		
		НовСтрока.ВидОперации = КлЗнч.Значение;
	
	КонецЦикла;

КонецФункции // СформироватьДеревоВидовОпераций()

// Процедура устанавливает параметры выбора договора контрагента.
// 
// Параметры:
//  Элемент - ПолеФормы.
// 
&НаКлиенте 
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент)
	
	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
 		СтруктураОтбора.Вставить("Организация", Объект.Организация);
 	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если ЗначениеЗаполнено(фКэшЗначений.МассивВидовДоговоров) Тогда
			СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(фКэшЗначений.МассивВидовДоговоров));
		КонецЕсли;           
	КонецЕсли;

    // Установим параметры выбора.
    бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);                   

КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура выводит текст свообщений пользователю.
// 
// Параметры:
//  ТекстСообщения - Строка.
// 
&НаКлиенте
Процедура ВывестиТекстСообщенийПользователю(ТекстСообщения)

	Если ТекстСообщения <> "" Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли;	

КонецПроцедуры // ВывестиТекстСообщенийПользователю()

////////////////////////////////////////////////////////////////////////////////
// Субконто

// Функция получает значение субконто в табличном поле исходя из имени элемента и имени табличного поля.
// Значение получается исходя из предположения что ИмяЭлементаУправления = ИмяТабличногоПоля+ИмяРеквизита.
// 
// Параметры:
//  ТекущаяСтрока      - ДанныеФормыКоллекция.
//  ИмяТабличногоПоля  - Строка.
//  ИмяЭлемента        - Строка.
// 
// Возвращаемое значение:
//  Произвольный.
// 
&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента , "ОсновныеСредства", "");
		ИмяРеквизита      = СтрЗаменить(ИмяРеквизита, "ДанныеСтроки"    , "");
		ЗначениеСубконто  = ТекущиеДанные[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

// Процедура обрабатывает изменение субконто МУ.
// 
// Параметры:
//  Контейнер         - Произвольный.
// 	ИмяСубконто		  - Строка - имя субконто без порядкового номера.
//  ЗначениеСубконто  - Произвольный - Текущее значение субконто.
// 
&НаКлиенте
Процедура ИзменениеСубконто(Контейнер, ИмяСубконто, ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер
	  																				, ИмяСубконто
																					, фКоличествоСубконтоМУ);
	  
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто
	  													, ИмяСубконто
														, ЗначениеСубконто
														, фКоличествоСубконтоМУ);
														
	  бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто
	  															, Контейнер
																, ИмяСубконто
																, ""
																, фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконто()

// Процедура обрабатывает начало выбора субконто МУ.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
// 	ИмяСубконто		  	 - Строка - имя субконто без порядкового номера.
//  ЗначениеСубконто     - Произвольный.
// 
&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Контейнер, ИмяСубконто, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
																						  , Объект
																						  , ИмяСубконто
																						  , ЗначениеСубконто
																						  , фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
																		  , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

////////////////////////////////////////////////////////////////////////////////
// Аренда

// Процедура проверяет заполненность сумм табличного поля "ОсновныеСредства".
// 
&НаКлиенте
Функция ПроверитьВозможностьРасчетовВДокументе()

	Отказ = Ложь;
	
	ИтогСумма 		 = Объект.ОсновныеСредства.Итог("Сумма");
	ИтогСуммаВВалюте = Объект.ОсновныеСредства.Итог("СуммаВВалюте");
	
	// Распределять авансы или считать ЭСП при незаполненных суммах бессмысленно.
	Если ((ИтогСумма = 0 ИЛИ ИтогСуммаВВалюте = 0) 
		И Объект.СпособПолученияСтавки = ПредопределенноеЗначение("Перечисление.бит_му_СпособыПолученияНоминальнойСтавки.Расчет")) Тогда
		ТекстСообщения = НСтр("ru = 'Не введены суммы стоимости ОС, распределение авансов и иные расчеты невозможны!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
	КонецЕсли; 
	
	Возврат Не Отказ;
	
КонецФункции // ПроверитьВозможностьРасчетовВДокументе()

// Процедура проверяет правильно ли выбран счет в зависимости от признака валютного учета.
// 
// Параметры:
//  ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ПроверитьПризнакВалютныйУСчета(ИмяРеквизита)
	
	Если Не фДокументВВалюте Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтотСчетВалютныйСервер(ИмяРеквизита) Тогда
		
		ТекстСообщения = Нстр("ru = 'На счете ""%1%"" отсутствует признак валютного учета. Операция по валютному договору может быть отражена некорректно.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяРеквизита);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли;

КонецПроцедуры // ПроверитьПризнакВалютныйУСчета()

// Процедура выполняет действия необходимые при изменении договора контрагента.
// 
&НаКлиенте
Процедура ИзменениеДоговораКонтрагента()

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеДоговораКонтрагентаЗавершение", ЭтотОбъект);

		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаДолгосрочный) 
		   И НЕ ЗначениеЗаполнено(Объект.СчетУчетаКраткосрочный) 
		   И НЕ ЗначениеЗаполнено(Объект.СчетУчетаАванса) Тогда
		   
			ВыполнитьОбработкуОповещения(Оповещение,КодВозвратаДиалога.Да);
		Иначе
			ТекстВопроса = НСтр("ru = 'Перезаполнить счета учета (долгосрочный, краткосрочный и аванса)?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, Нстр("ru = 'Принятие к учету ОС (МСФО)'"));
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ИзменениеДоговораКонтрагента()

// Процедура - завершение изменения реквизита "ИзменениеДоговораКонтрагента".
// 
&НаКлиенте
Процедура ИзменениеДоговораКонтрагентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПерезаполнятьСчетаУчета = (Результат = КодВозвратаДиалога.Да);
	ИзменениеДоговораСервер(ПерезаполнятьСчетаУчета);	
	
КонецПроцедуры

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если СтруктураПараметров <> Неопределено Тогда
	
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																					   
	
	КонецЕсли; 
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание(Отказ);

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытииПромежуточная()

// Процедура выполняет окончательные операции по открытию формы. 
// 
&НаКлиенте
Процедура ПриОткрытииОкончание(Отказ)

	// Имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("Организация");
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	//БИТ Изюмов А.В. 30.07.12 <--- дополним структуру кэша реквизитов формы для дальнейшей проверки на обязательность заполнения
	мКэшРеквизитовФормы.Вставить("бит_окей_ОсновноеСредство");
	//БИТ Изюмов А.В. 30.07.12 <---
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	        	
	// Отбор по умолчанию для таблицы "Основные средства".
	фОтборОС_Все 						 = Истина;
	Элементы.ОсновныеСредства.ОтборСтрок = Новый ФиксированнаяСтруктура();
	
	// Заполнение кэша субконто и установка видимости, доступности.
	ОткрытиеФормыСервер(мНастройкиСубконтоСчетовМУ, Отказ);
	
	// Вывод в заголовке формы вида операции и статуса документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
		
	УстановитьОтображениеДанныхСтроки();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента);

КонецПроцедуры // ПриОткрытииОкончание()

#КонецОбласти

#Область РаботаСExcel

#Область ЗагрузкаДанныхИзТабличногоДокумента

// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента проверяя записан ли документ. 
//
&НаКлиенте
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДок()
       
    Если Параметры.Ключ.Пустая() Тогда  
        
        ТекстВопроса = НСтр("ru='Данные еще не записаны. 
		|Выполнение действия ""Загрузить через табличный документ"" возможно только после записи данных.
		|Записать?'");				
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросЗаписатьДокументДляЗагрузкиЧерезТД", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        
    Иначе
        
        ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание();
        
    КонецЕсли;	
		
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДок()

// Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Результат               - Строка.
//  ДополнительныеПараметры - Структура.
//
&НаКлиенте
Процедура ВопросЗаписатьДокументДляЗагрузкиЧерезТД(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
   	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
        
        ЗаписьВыполнена = Записать();        
        Если ЗаписьВыполнена Тогда
            
            // Флаг модифицированности автоматически не снимается.
            ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание();
            
        КонецЕсли;
    
	КонецЕсли;

КонецПроцедуры // ВопросЗаписатьДокументДляЗагрузкиЧерезТД()

// Процедура открывает форму обработки бит_ЗагрузкаДанныхИзТабличногоДокумента. 
//
&НаКлиенте
Процедура ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание()

    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимЗагрузки"		 , "ТабличнаяЧасть");
    ПараметрыФормы.Вставить("ОбъектМетаданных"   , "Документ.бит_му_ПринятиеКУчетуОС");
    ПараметрыФормы.Вставить("ОбъектДляЗаполнения", Объект.Ссылка);
    ПараметрыФормы.Вставить("ИмяТабЧасти"        , "ОсновныеСредства");
    
    ОткрытьФорму("Обработка.бит_ЗагрузкаДанныхИзТабличногоДокумента.Форма"
                    , ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
  	                   
КонецПроцедуры // ОткрытьФормуЗагрузкиДанныхЧерезТабДокОкончание() 

// Процедура восстанавливает загруженные из Excel данные.
//
// Параметры:
//  ОбъектДляЗаполнения - ДанныеФормыСтруктура.
//  ИмяТабЧасти         - Строка.
//  
&НаСервере
Процедура ВосстановитьЗагруженныеИзExcelДанные(ИмяТабЧасти, Знач ОбъектДляЗаполнения = Неопределено)
    
    Если ТипЗнч(ОбъектДляЗаполнения) = Тип("ДокументСсылка.бит_му_ПринятиеКУчетуОС") Тогда
        ОбъектДляЗаполнения_Объект = ОбъектДляЗаполнения.ПолучитьОбъект();
    КонецЕсли;
	ЗначениеВДанныеФормы(ОбъектДляЗаполнения_Объект, Объект);
	//УстановитьВидимостьДоступность();
	
	Модифицированность = Истина;	
	 
КонецПроцедуры // ВосстановитьЗагруженныеИзExcelДанные()

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	ДанныеЗаполнения = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеДанные);
	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		
		Объект.ОсновныеСредства[Строка.ИД][Строка.Реквизит] = Строка.Значение;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ОсновныеСредстваАрендаСтавкаПриИзмененииНаСервере(ИДСтроки)
	
	СтрокаТаблицыОС = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);

	Если ОтсутствуетФинансовыйГрафик(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, СтрокаТаблицыОС.ОсновноеСредство) Тогда
	    ТекстСообщения = НСтр("ru = 'По договору не найден график платежей для основного средства ""%1"". Проверьте заполнение документа «Дополнительные условия по договору».'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицыОС.ОсновноеСредство);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		РасчетОСВыполнен = Ложь;
		Возврат;
	КонецЕсли; 
	
	СтруктураКурсаДог = бит_КурсыВалют.ПолучитьКурсВалюты(фВалютаДоговора, Объект.Дата);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РежимКорректировки");
	Если СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		
		СтруктураПараметров.Вставить("Периодичность", "День");
		
		ТаблицаПлатежи = бит_му_ОбщегоНазначения.ПолучитьТаблицуПлатежей(Объект.ДоговорКонтрагента, СтрокаТаблицыОС.ОсновноеСредство,, Ложь, СтруктураПараметров);

		ПараметрыФункции = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаПлатежи Цикл
			
			Коэф    = СтрокаТаблицы.СуммаПлатежаВзаиморасчеты;
			Если НачалоДня(СтрокаТаблицы.ДатаПлатежа) <= НачалоДня(Объект.Дата) Тогда
				Степень = 0;
			Иначе
				Степень = (НачалоДня(СтрокаТаблицы.ДатаПлатежа)-НачалоДня(Объект.Дата))/(86400*365);
			КонецЕсли;
			
			ПарамСлагаемого = бит_му_ОбщегоНазначения.ПараметрыСтепеннойФункции(Коэф, Степень);
			ПараметрыФункции.Добавить(ПарамСлагаемого);
			
		КонецЦикла; 
		
		Аргумент = (1/(1 + СтрокаТаблицыОС.ЭСП/100));
		СправедливаяСтоимость = бит_му_ОбщегоНазначения.СтепеннаяФункция(ПараметрыФункции, Аргумент);
				
	Иначе
		
		СтруктураПараметров.Вставить("Взаиморасчеты");
		
		МассивПлатежей = бит_му_ОбщегоНазначения.СформироватьМассивПлатежей(Объект.ДоговорКонтрагента
		                                                                     ,СтрокаТаблицыОС.ОсновноеСредство
																			 ,Объект.Дата
																			 ,Истина
																			 ,СтруктураПараметров);
																			 
			
		Аргумент = (1/(1 + СтрокаТаблицыОС.ЭСП/(100*12)));
		Дельта = МассивПлатежей[0];
		СправедливаяСтоимость = бит_му_ОбщегоНазначения.АлгебраическаяФункция(МассивПлатежей, Аргумент);
	    СправедливаяСтоимость = СправедливаяСтоимость - Дельта;
	
	КонецЕсли; 
	
	СтрокаТаблицыОС.СуммаВВалюте = СправедливаяСтоимость;
	
	Если СтрокаТаблицыОС.СуммаВВалюте = 0 Тогда
		СтрокаТаблицыОС.Сумма = 0;
	Иначе
		СуммаДолга = СтрокаТаблицыОС.СуммаВВалюте - СтрокаТаблицыОС.СуммаАвансаВВалюте;		
		Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
								СуммаДолга, фВалютаДоговора, Объект.ВалютаДокумента, 
								СтруктураКурсаДог.Курс,      Объект.КурсДокумента, 
								СтруктураКурсаДог.Кратность, Объект.КратностьДокумента);
												  
		СтрокаТаблицыОС.Сумма = Сумма + СтрокаТаблицыОС.СуммаАванса;
		СтрокаТаблицыОС.ПервоначальнаяСтоимость = СтрокаТаблицыОС.Сумма;
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСчетНРП()
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС") Тогда
		Объект.СчетНРП = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.Служебный");
	Иначе	
		// Заполним счет нераспределенной прибыли из учетной политики.
		Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработкаВыбора_НаСервере(ВыбранноеЗначение)
	ПереченьВидовОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС;
	ТаблицаДанных = ВыбранноеЗначение.Данные;
	СтруктураПараметров = бит_му_ОбщегоНазначения.ПодготовитьСтруктуруПараметровДляПодбораСчетовМУ(Объект.Организация, Объект.Дата);
	//МассивДокументовБУ = ТаблицаДанных.ВыгрузитьКолонку("ДокументБУ");           
	//БИТ Тртилек 14.09.2012 получим таблицу Документ-Основное средство из выбранных данных
	//ДокументОСИзПодбора                = бит_му_Общий.бит_му_ПолучитьСоотношениеДокументОсновноеСредство(ТаблицаДанных);
	МассивДокументовБУ = Новый Массив;
	ДокументОСИзПодбора = Новый ТаблицаЗначений;
	ДокументОСИзПодбора.Колонки.Добавить("ДокументБУ", Документы.ТипВсеСсылки());
	ДокументОСИзПодбора.Колонки.Добавить("ВНА", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Для Каждого текЭлемент Из ТаблицаДанных.ПереченьОбъектов Цикл
		МассивДокументовБУ.Добавить(текЭлемент.ДокументБУ);
		НовСтрока = ДокументОСИзПодбора.Добавить();
		//НовСтрока.ДокументБУ = текЭлемент.ДокументБУ;
		//НовСтрока.ВНА = ?(ЗначениеЗаполнено(текЭлемент.ВНА), текЭлемент.ВНА, Справочники.ОсновныеСредства.ПустаяСсылка());
		ЗаполнитьЗначенияСвойств(НовСтрока, текЭлемент);
	КонецЦикла;
	ДокументОСИзПодбора.Свернуть("ДокументБУ,ВНА", "");
	
	
	///БИТ Тртилек 
	// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
	Если ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
		Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
			ТаблицаДвиженийДокументовРСБУ      = бит_му_Общий.бит_му_ПолучитьДвиженияПоХозрасчетномуРегистру07_0804(МассивДокументовБУ);				
		Иначе 
			ТаблицаДвиженийДокументовРСБУ      = бит_му_Общий.бит_му_ПолучитьДвиженияПоХозрасчетномуРегистру(Объект.бит_окей_Объект,МассивДокументовБУ, ДокументОСИзПодбора);
		КонецЕсли;
	КонецЕсли;
	//}
	КопияТаблицаДвиженийДокументовРСБУ = ТаблицаДвиженийДокументовРСБУ.Скопировать();
	// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
	Если  ВыбранноеЗначение.Свойство("Подбор07_0804") тогда
		Если ВыбранноеЗначение.Подбор07_0804 = Истина Тогда
			КопияТаблицаДвиженийДокументовРСБУ.свернуть("ДокументРСБУ,ОбъектСтроительства");
			//}
		ИначеЕсли Объект.ВидОперации = ПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС Тогда
			КопияТаблицаДвиженийДокументовРСБУ.свернуть("ДокументРСБУ,СтатьяЗатрат,ОсновноеСредство");
		Иначе
			ТаблицаДвиженийДокументовРСБУ.Свернуть("СчетДт,СубконтоДт1,СчетКт,ДокументРСБУ,ОбъектСтроительства,ОсновноеСредство, Подразделение","Сумма");
			КопияТаблицаДвиженийДокументовРСБУ.свернуть("ДокументРСБУ,ОбъектСтроительства, ОсновноеСредство");
		КонецЕСли;
	КонецЕсли;				
	МассивДокументовБУ.Очистить();
	
	Для каждого СтрокаТаблицы Из КопияТаблицаДвиженийДокументовРСБУ Цикл
		
		ПараметрыОтбора = Новый Структура;
		// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
		Если  ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда 
			Если ВыбранноеЗначение.Подбор07_0804 = Ложь Тогда
				//}	
				Если Объект.ВидОперации = ПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС Тогда
					ПараметрыОтбора.Вставить("ДокументРСБУ", СтрокаТаблицы.ДокументРСБУ);
					ПараметрыОтбора.Вставить("СтатьяЗатрат", СтрокаТаблицы.СтатьяЗатрат);
					ПараметрыОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
				Иначе
					ПараметрыОтбора.Вставить("ДокументРСБУ", СтрокаТаблицы.ДокументРСБУ);
					ПараметрыОтбора.Вставить("Объект", СтрокаТаблицы.ОбъектСтроительства);
					ПараметрыОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ОсновноеСредство);
				КонецЕСли;
			Иначе
				// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
				ПараметрыОтбора.Вставить("ДокументРСБУ", СтрокаТаблицы.ДокументРСБУ);
			КонецЕсли;
		КонецЕсли;
		
		//}
		
		НайденныеСтроки = Объект.бит_окей_СоставОсновныхСредств.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Отбор = Новый Структура();
			Если Объект.ВидОперации = ПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС
				// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
				и  ВыбранноеЗначение.Свойство("Подбор07_0804") Тогда
				Если ВыбранноеЗначение.Подбор07_0804 = Ложь Тогда
					//}
					Отбор.Вставить("ДокументРСБУ",СтрокаТаблицы.ДокументРСБУ);
					Отбор.Вставить("СтатьяЗатрат", СтрокаТаблицы.СтатьяЗатрат);
				Иначе
					Отбор.Вставить("ДокументРСБУ",СтрокаТаблицы.ДокументРСБУ);
					Отбор.Вставить("ОбъектСтроительства", СтрокаТаблицы.ОбъектСтроительства);
				КонецЕСли;
			КонецЕсли;
			
			Строки = ТаблицаДвиженийДокументовРСБУ.НайтиСтроки(Отбор);
			/////
			Для каждого СтрокаМассиваСтрок Из Строки Цикл
				
				Если Объект.ВидОперации = ПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС И СтрокаМассиваСтрок.СчетКт <> ПланыСчетов.бит_Дополнительный_2.Служебный Тогда
					// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
					Если ВыбранноеЗначение.Свойство("Подбор07_0804")Тогда
						Если ВыбранноеЗначение.Подбор07_0804 = Ложь Тогда
							//}	
							СчетРСБУ = ?(СтрокаМассиваСтрок.СчетДт=ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования ИЛИ СтрокаМассиваСтрок.СчетДт=ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств, СтрокаМассиваСтрок.СчетДт, СтрокаМассиваСтрок.СчетКт);
						Иначе 
							СчетРСБУ = СтрокаМассиваСтрок.СчетРСБУ;
						КонецЕсли;
					КонецЕсли;
					
					КорСчетРСБУ = ?(НЕ СтрокаМассиваСтрок.СчетДт=ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования И НЕ СтрокаМассиваСтрок.СчетДт=ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств, СтрокаМассиваСтрок.СчетДт, СтрокаМассиваСтрок.СчетКт);
					//БИТ Тртилек 15.08.2012
					//Тртилек внедрим механизм трансляции
					ДокументСсылка = Объект.Ссылка;
					ИмяИсточника = "Хозрасчетный";
					ИмяПриемника = "бит_Дополнительный_2";
					КодПравилТрансляции = бит_МеханизмТрансляции.ПолучитьПравилаИКэш(Объект.Организация
					,ИмяИсточника
					,ИмяПриемника
					,ДокументСсылка);
					стПараметры = Новый Структура;
					стПараметры.Вставить("СчетДт"		      , СчетРСБУ);
					стПараметры.Вставить("СчетКт"		      , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
					стПараметры.Вставить("СубконтоДт1"      , СтрокаМассиваСтрок.СубконтоДт1);
					стПараметры.Вставить("СубконтоДт2"      , СтрокаМассиваСтрок.СубконтоДт2);
					стПараметры.Вставить("ПодразделениеДт"  , Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
					стПараметры.Вставить("ПодразделениеКт"  , Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
					стПараметры.Вставить("Сумма"            , СтрокаМассиваСтрок.Сумма);
					
					Отказ = Ложь;
					
					ЗаписьПриемникСтруктура = бит_МеханизмТрансляции.ВыполнитьПодборСчетаПоПравилам(стПараметры
					,Объект.Организация
					,ИмяИсточника
					,ИмяПриемника
					,ДокументСсылка
					,КодПравилТрансляции
					,Отказ);								
					///БИТ Тртилек
					
					Если ЗаписьПриемникСтруктура.ЗаписьПриемник.СчетДт = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка() Тогда
						
						Сообщить("Не найдено соответствие счета РСБУ - счета МСФО", СтатусСообщения.Внимание);
						Сообщить("1." + " Счет РСБУ " + СчетРСБУ + " Счет МСФО " + " СтатьяЗатрат " + СтрокаМассиваСтрок.СтатьяЗатрат + "!", СтатусСообщения.Внимание);	
						Сообщить("Документ " + СтрокаМассиваСтрок.ДокументРСБУ+ ". Не будет перенесен в таличную часть документа!", СтатусСообщения.Внимание);
						Продолжить;
						
					КонецЕсли;
					
					НоваяСтрока = Объект.бит_окей_СоставОсновныхСредств.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассиваСтрок);
					НоваяСтрока.СоставОС = справочники.бит_му_СоставОС.ВНА_РСБУ;
					НоваяСтрока.СчетКт   = ЗаписьПриемникСтруктура.ЗаписьПриемник.СчетДт;
					НоваяСтрока.Объект   = СтрокаМассиваСтрок.ОбъектСтроительства;
					
					бит_окей_СоставОсновныхСредствИзменениеСчета(НоваяСтрока.ПолучитьИдентификатор(), "Кт");
				Иначе
					НоваяСтрока = Объект.бит_окей_СоставОсновныхСредств.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМассиваСтрок);
					НоваяСтрока.СоставОС = справочники.бит_му_СоставОС.ВНА_РСБУ;
					НоваяСтрока.СчетКт   = ПланыСчетов.бит_Дополнительный_2.Служебный;
					НоваяСтрока.Объект   = СтрокаМассиваСтрок.ОбъектСтроительства;
					
					бит_окей_СоставОсновныхСредствИзменениеСчета(НоваяСтрока.ПолучитьИдентификатор(), "Кт");
					
				КонецЕсли;
				
			КонецЦикла; 
			
		Иначе
			
			Для каждого СтрокаНайденныеСтроки Из НайденныеСтроки Цикл
				
				ТекстСообщения = "Документ """
				+СтрокаТаблицы.ДокументРСБУ						
				+"  уже подобран в строке № "
				+СтрокаНайденныеСтроки.НомерСтроки
				+"!";
				
				Сообщить(ТекстСообщения,СтатусСообщения.Информация);										 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЦикла; 
КонецФункции	

//БИТ Тртилек 21032013 Процедура устанавливает видимость дополнительной страницы Документов поступления
&НаСервере
Процедура бит_УстановитьВидимостьСтраницыДокументовПоступлений()
	
	Видимость = ЛОЖЬ;
	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС Тогда
		Для Каждого Строка ИЗ Объект.бит_окей_СоставОсновныхСредств Цикл
			Если Строка.СоставОС.УслугиОтСоственногоЮЛ Тогда
				Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//очистим НРП ВНА в случае смены видимости с Истины на Ложь
	Если Элементы.бит_СтраницаДокументыПоступления.Видимость = Истина И Видимость = Ложь Тогда
		НаборЗаписейНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьНаборЗаписей();
		НаборЗаписейНРПВНА.Отбор.мРегистратор.Установить(Объект.Ссылка);
		НаборЗаписейНРПВНА.Записать();
	КонецЕсли;
	
	
	Элементы.бит_СтраницаДокументыПоступления.Видимость = Видимость;
	
КонецПроцедуры

//БИТ Тртилек 21032013 Процедура вызывает форму подбора документов
&НаКлиенте
Процедура ПодборДокументовНажатие(Команда)
	
	СформироватьЗапросДляДокументовПоступления();
	Парарара = ОткрытьФормуМодально("ОбщаяФорма.бит_ФормаПодбораСобственныхКонтрагентов",,ЭтаФорма);
	
КонецПроцедуры

//БИТ Тртилек 22032013 Процедура очищает табличную часть
&НаКлиенте
Процедура ОчисткаДокументовНажатие(Команда)
	
	Ответ = Вопрос("Будет очищена табличная часть. Выполнить очистку?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.бит_ДокументыПоступления.Очистить();
	КонецЕсли;
	
КонецПроцедуры

//БИТ Тртилек 21032013 Функция возвращает запрос документов поступления
&НаСервере
Функция СформироватьЗапросДляДокументовПоступления()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	бит_му_НРП_ВНА.ДокументПоступления КАК Документ,
	|	СУММА(ВЫБОР
	|			КОГДА бит_му_НРП_ВНА.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.бит_ВидДвиженияНакопления.Приход)
	|				ТОГДА бит_му_НРП_ВНА.СуммаБезНДС
	|			ИНАЧЕ бит_му_НРП_ВНА.СуммаБезНДС * -1
	|		КОНЕЦ) КАК Сумма,
	|	бит_му_НРП_ВНА.ДокументПоступления.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТДокументыССуммами
	|ИЗ
	|	РегистрСведений.бит_му_НРП_ВНА КАК бит_му_НРП_ВНА
	|ГДЕ
	|	бит_му_НРП_ВНА.ДокументПоступления.Организация = &Организация
	|	И бит_му_НРП_ВНА.ДокументПоступления ССЫЛКА Документ.бит_му_ПоступлениеТоваровУслугПоКЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_му_НРП_ВНА.ДокументПоступления,
	|	бит_му_НРП_ВНА.ДокументПоступления.СуммаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыССуммами.Документ,
	|	0 КАК СуммаБезНДС,
	|	ЛОЖЬ КАК Выбрать,
	|	ВТДокументыССуммами.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	ВТДокументыССуммами КАК ВТДокументыССуммами
	|ГДЕ
	|	ВТДокументыССуммами.Документ.Проведен = ИСТИНА
	|	И ВТДокументыССуммами.Сумма <> 0";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	ТЗТаблицаДокументов.Загрузить(Запрос.Выполнить().Выгрузить());  
КонецФункции

//БИТ Изюмов А.В. 30.07.12 <---
&НаКлиенте
Процедура бит_окей_ОсновноеСредствоПриИзменении(Элемент)
	
	Если Объект.бит_окей_ОсновноеСредство <> мКэшРеквизитовФормы.бит_окей_ОсновноеСредство И Объект.бит_окей_СоставОсновныхСредств.Количество()>0 Тогда
		Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
		Если Ответ = КодВозвратаДиалога.Нет ИЛИ Ответ = КодВозвратаДиалога.Таймаут Тогда
			ИзвлечьИзКэша("бит_окей_ОсновноеСредство");
			Возврат;
		КонецЕсли;
		Объект.ОсновныеСредства.Очистить();
		Объект.бит_окей_СоставОсновныхСредств.Очистить();
	КонецЕсли; 
	
	бит_окей_ОсновноеСредствоПриИзменении_НаСервере();
КонецПроцедуры

&НаСервере
Процедура бит_окей_ОсновноеСредствоПриИзменении_НаСервере()
	_объект = РеквизитФормыВЗначение("Объект");
	_объект.бит_окей_ЗаполнитьКлассПоУмолчанию(ЭтаФорма);
	
	_объект.бит_окей_УчитыватьКакОС   = Истина; //бит_окей_КлассОС.ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	_объект.бит_окей_ИнвентарныйНомер = Объект.бит_окей_ОсновноеСредство.Код;
	_объект.бит_окей_Объект           = Объект.бит_окей_ОсновноеСредство.Объект;
	
	_объект.СинхронизироватьРеквизитыОСВШапке();
	ЗначениеВРеквизитФормы(_объект, "Объект");
	// параметр "НачислятьАмортизациюСТекущегоПериода" возьмем из учетной политики
	лУчетнаяПолитика = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(Объект.Дата, Новый Структура("Организация", Объект.Организация));
	
	бит_окей_НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(лУчетнаяПолитика, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_окей_СчетУчетаПриИзменении(Элемент)
	УстановитьЗаголовкиИДоступностьСубконто(ЭтаФорма, Объект.бит_окей_СчетУчета, "бит_окей_СчетУчета");
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3, Субконто4",
	"бит_окей_Субконто1", "бит_окей_Субконто2", "бит_окей_Субконто3", "бит_окей_Субконто3");
	
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(Объект.бит_окей_СчетУчета, Объект, ПоляОбъекта);
	
КонецПроцедуры

// Управление субконто счетов
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиИДоступностьСубконто(Форма, Счет, Суффикс = "")
	
	ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3, Субконто4",
	"бит_окей_Субконто1", "бит_окей_Субконто2", "бит_окей_Субконто3", "бит_окей_Субконто4");
	
	ЗаголовкиПолей = Новый Структура("Субконто1, Субконто2, Субконто3, Субконто4",
	"ЗаголовокСубконто"+Суффикс+"1", "ЗаголовокСубконто"+Суффикс+"2",
	"ЗаголовокСубконто"+Суффикс+"3", "ЗаголовокСубконто"+Суффикс+"4");
	
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_окей_СоставОсновныхСредствПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.бит_окей_СоставОсновныхСредств.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		ТекущиеДанные.Объект = ?(ТипЗнч(ТекущиеДанные.СубконтоДт1) = Тип("СправочникСсылка.ОбъектыСтроительства"), ТекущиеДанные.СубконтоДт1, ТекущиеДанные.СубконтоКт1);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.СтатьяЗатрат) Тогда
		ТекущиеДанные.СтатьяЗатрат   = ТекущиеДанные.СубконтоДт2;
	КонецЕсли;
	
	Объект.бит_окей_ПервоначальнаяСтоимость = Объект.бит_окей_СоставОсновныхСредств.Итог("Сумма");
	
	//БИТ Тртилек 27082013
	бит_УстановитьВидимостьСтраницыДокументовПоступлений();
	///БИТ Тртилек
	
КонецПроцедуры

&НаКлиенте
Процедура бит_окей_СоставОсновныхСредствСчетКтПриИзменении(Элемент)
	бит_окей_СоставОсновныхСредствИзменениеСчета(Элементы.бит_окей_СоставОсновныхСредств.ТекущиеДанные.ПолучитьИдентификатор(), "Кт");
КонецПроцедуры

&НаКлиенте
Процедура бит_окей_СоставОсновныхСредствСчетДтПриИзменении(Элемент)
	бит_окей_СоставОсновныхСредствИзменениеСчета(Элементы.бит_окей_СоставОсновныхСредств.ТекущиеДанные.ПолучитьИдентификатор(), "Дт");
КонецПроцедуры

&НаСервере
Процедура бит_окей_СоставОсновныхСредствИзменениеСчета(ИДСтроки = Неопределено, ДтКт = "Дт")
	ТекущиеДанные = ?(ТипЗнч(ИДСтроки) = Тип("Число")
	, Объект.бит_окей_СоставОсновныхСредств.НайтиПоИдентификатору(ИДСтроки)
	, ИДСтроки);	
	
	ВыборСчетаВТабличномПоле(ТекущиеДанные, "Счет" + ДтКт, "Субконто" + ДтКт);
	
	// Синхронизируем реквизиты строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, "Субконто" + ДтКт);
	
КонецПроцедуры

&НаКлиенте
Процедура бит_окей_СоставОсновныхСредствПослеУдаления(Элемент)
	
	Объект.бит_окей_ПервоначальнаяСтоимость = Объект.бит_окей_СоставОсновныхСредств.Итог("Сумма");
	
КонецПроцедуры

//БИТ Тртилек 22082013 обработчик события ПриИзменении поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ДокументыПоступленияДокументПоступленияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.бит_ДокументыПоступления.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПоступления) Тогда
		
		ДокументСсылка = ТекущиеДанные.ДокументПоступления;
		ТипДокумента = ТипЗнч(ДокументСсылка);
		ТекущиеДанные.бит_Сумма = ДокументСсылка.СуммаДокумента;		
		ТекущиеДанные.ДатаДокументаПоступления = ДокументСсылка.Дата;
		
	Иначе
		
		ТекущиеДанные.бит_Сумма = 0;
		ТекущиеДанные.ДатаДокументаПоступления = '00010101';
		
	КонецЕсли;
	
КонецПроцедуры

//БИТ Тртилек 22082013 обработчик события НачалоВыбора поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ДокументыПоступленияДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛОЖЬ;
	
	ФормаВыбора = ПолучитьФорму("Документ.бит_му_ПоступлениеТоваровУслугПоКЗ.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Организация", Объект.Организация)), ЭтаФорма);
	ВыбранныйДокумент = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.бит_ТабличноеПолеДокументыПоступления.ТекущиеДанные;
	ДанныеСтроки.ДокументПоступления = ВыбранныйДокумент;
	ДанныеСтроки.ДатаДокументаПоступления = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "Дата");
	ДанныеСтроки.бит_Сумма = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранныйДокумент, "СуммаДокумента");
	
КонецПроцедуры

//bit avseeenkov 15.05.2014 Доработка по ОС
&НаСервере
Функция ПолучитьСкладПоОбъекту()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.бит_окей_ОсновноеСредство.Объект);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат ?(Результат.Количество() = 0, Справочники.Склады.ПустаяСсылка(), Результат[0].Ссылка);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИОткрытьФорму(Счет07_0804 = Ложь)
	стПараметры = Новый Структура;
	стПараметры.Вставить("ДатаНачала"		, '19800101');
	стПараметры.Вставить("ДатаОкончания"	, КонецМесяца(Объект.Дата));
	стПараметры.Вставить("Режим"			, ПредопределенноеЗначение("Перечисление.бит_му_РежимыПодбораВНА.ПринятиеКУчетуОС"));
	стПараметры.Вставить("Организация"		, Объект.Организация);
	стПараметры.Вставить("МОЛ"		, Объект.МОЛ);
	стПараметры.Вставить("Местонахождение"		, Объект.Подразделение);
	стПараметры.Вставить("ВалютаДокумента"		, Объект.ВалютаДокумента);
	Если Счет07_0804 Тогда 
		стПараметры.Вставить("Склад"		, ПолучитьСкладПоОбъекту());
		стПараметры.Вставить("Подбор07_0804"		, Истина);
	Иначе 
		стПараметры.Вставить("ОбъектСтроительства"		, Объект.бит_окей_Объект);
	КонецЕсли;

	
	
	//БИТ Тртилек 02.07.2012 в зависимости от вида операции получаем соответствующую форму выбора
	ФормаПодбора = ПолучитьФорму("Обработка.бит_му_ПодборВНАПринятиеМодернизация.Форма.Форма", стПараметры, ЭтаФорма);
	///БИТ Тртилек
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	//БИТ Тртилек 02.07.2012 устанавливаем значения реквизитов
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.бит_му_ВидыОперацийМодернизацияОС.МодернизацияКонсолидированногоОС") Тогда
	ФормаПодбора.Объект.ДатаНачала      = '19800101';
	ФормаПодбора.Элементы.ДатаНачала.Доступность = ЛОЖЬ;
	// BIT Avseenkov 15052014 /Доработка функцонала по уастку основных средств {
	
	//ФормаПодбора.Объект.Режим           = ПредопределенноеЗначение("Перечисление.бит_му_РежимыПодбораВНА.ПринятиеКУчетуОС");
	////ФормаПодбора.Объект.ДатаНачала      = НачалоМесяца(Объект.Дата);
	//ФормаПодбора.Объект.ДатаОкончания   = КонецМесяца(Объект.Дата);
	//ФормаПодбора.Объект.Организация     = Объект.Организация;
	//ФормаПодбора.Объект.МОЛ             = Объект.МОЛ;
	//ФормаПодбора.Объект.Местонахождение = Объект.Подразделение;
	//ФормаПодбора.Объект.ВалютаДокумента = Объект.ВалютаДокумента;
	//Если Счет07_0804 Тогда 
	//	ФормаПодбора.Объект.Склад = ПолучитьСкладПоОбъекту();
	//	ФормаПодбора.Подбор07_0804 = Истина;
	//Иначе 
	//	ФормаПодбора.Объект.ОбъектСтроительства = Объект.бит_окей_Объект;
	//КонецЕсли;
	
	
	
	//}
	
	///БИТ Тртилек
	
	//КонецЕсли;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

//}

&НаКлиенте
Процедура ПодборКонсолидированного(Команда)
	ЗаполнитьИОткрытьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонсолидированного_07_0804(Команда)
	ЗаполнитьИОткрытьФорму(Истина);
КонецПроцедуры

//БИТ Тртилек 06092013 процедура показывает "движения" по НРП ВНА
&НаКлиенте
Процедура ПоказатьНРПВНА(Команда)
	ФормаСпискаНРПВНА = ПолучитьФорму("РегистрСведений.бит_му_НРП_ВНА.ФормаСписка", Новый Структура("Отбор", Новый Структура("мРегистратор", Объект.Ссылка)), ЭтаФорма);
	ФормаСпискаНРПВНА.Открыть();
КонецПроцедуры

// + СБ ПискуноваВ 29.29.2016 #2372
&НаКлиенте
Процедура СБ_ЗаполнитьПоКарточкеСчетаОС(Команда)
	
	ПараметрыПодбора  =  Новый Структура;
	ПараметрыПодбора.Вставить("ОбъектСтроительства",  Объект.бит_окей_Объект);
	ПараметрыПодбора.Вставить("ДатаДок",Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",Объект.Организация);
	ПараметрыПодбора.Вставить("Док",Объект.Ссылка);
    ПараметрыПодбора.Вставить("ТипДокумента",Строка(ТипЗнч(Объект.Ссылка)));
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина); 
	
	ОткрытьФорму("ОбщаяФорма.СБ_ФормаПодбораДокументовДляОС",ПараметрыПодбора,Элементы.бит_окей_СоставОсновныхСредств);
	
КонецПроцедуры

&НаСервере
Процедура СБ_ЗаполнитьПоКарточкеСчетаНаСервере(СписокДокументов)
	
   ДанныеРСБУ = ПолучитьДанныеРСБУ(СписокДокументов);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_Дополнительный_2Обороты.Регистратор КАК ДокументРСБУ,
		|	бит_Дополнительный_2Обороты.Счет КАК СчетКт,
		|	бит_Дополнительный_2Обороты.ВидДвиженияМСФО КАК ВидДвиженияМСФО,
		|	ЕСТЬNULL(бит_Дополнительный_2Обороты.СуммаРеглОборот, 0) КАК Сумма,
		|	бит_Дополнительный_2Обороты.Субконто1 КАК СубконтоКт1,
		|	бит_Дополнительный_2Обороты.Субконто2 КАК СубконтоКт2,
		|	бит_Дополнительный_2Обороты.Субконто3 КАК СубконтоКт3,
		|	бит_Дополнительный_2Обороты.Субконто4 КАК СубконтоКт4,
		|	бит_Дополнительный_2Обороты.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Счет В ИЕРАРХИИ (&Счет122),
		|			,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|			,
		|			) КАК бит_Дополнительный_2Обороты
		|ГДЕ
		|	бит_Дополнительный_2Обороты.Регистратор В(&СписокДокументов)
		|	И бит_Дополнительный_2Обороты.Регистратор <> &ТекущийОбъект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_Дополнительный_2Обороты.Регистратор,
		|	бит_Дополнительный_2Обороты.Счет,
		|	бит_Дополнительный_2Обороты.ВидДвиженияМСФО,
		|	ЕСТЬNULL(бит_Дополнительный_2Обороты.СуммаРеглОборот, 0),
		|	ВЫБОР
		|		КОГДА бит_Дополнительный_2Обороты.Субконто1 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА бит_Дополнительный_2Обороты.Субконто1
		|		ИНАЧЕ бит_Дополнительный_2Обороты.КорСубконто1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА бит_Дополнительный_2Обороты.Субконто2 ССЫЛКА Справочник.ОбъектыСтроительства
		|			ТОГДА бит_Дополнительный_2Обороты.Субконто2
		|		ИНАЧЕ бит_Дополнительный_2Обороты.КорСубконто2
		|	КОНЕЦ,
		|	бит_Дополнительный_2Обороты.Субконто3,
		|	бит_Дополнительный_2Обороты.Субконто4,
		|	бит_Дополнительный_2Обороты.НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Счет В ИЕРАРХИИ (&Счет123),
		|			,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|			,
		|			) КАК бит_Дополнительный_2Обороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				Запись,
		|				Счет В ИЕРАРХИИ (&СчетаБУ),
		|				,
		|				ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|				,
		|				) КАК ХозрасчетныйОбороты
		|		ПО бит_Дополнительный_2Обороты.Регистратор = ХозрасчетныйОбороты.Регистратор
		|			И бит_Дополнительный_2Обороты.СуммаРеглОборотДт = ХозрасчетныйОбороты.СуммаОборотДт
		|ГДЕ
		|	бит_Дополнительный_2Обороты.Регистратор В(&СписокДокументов)
		|	И бит_Дополнительный_2Обороты.Регистратор <> &ТекущийОбъект";
		
		СчетаБУ = Новый Массив;
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства); // счет01
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ); // счет03
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств); // счет08.03
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков); // счет08.01
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования); // счет08.02
		//СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств); // счет08.04
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // счет08.04.01        //ОК Довбешка Т. 17.04.2017 исправление ошибки после обновления релиза
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке); // счет07

		
		МассивСчетов122И123  = Новый Массив;
		МассивСчетов122И123.Добавить(ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоЗдания); //122
		МассивСчетов122И123.Добавить(ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоОборудование); //123
		
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("КорСчет", ПланыСчетов.бит_Дополнительный_2.Служебный); //служебный
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата('20140101'))); //по заявке 1 января 2014
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Субконто1", Объект.бит_окей_Объект);//объект строительства
		Запрос.УстановитьПараметр("Счет122", ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоЗдания);
		Запрос.УстановитьПараметр("Счет123", ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоОборудование); 
		Запрос.УстановитьПараметр("Счет1", ПланыСчетов.бит_Дополнительный_2.ВнеоборотныеАктивы);
		Запрос.УстановитьПараметр("Счет122И123", МассивСчетов122И123);
		Запрос.УстановитьПараметр("СчетаБУ", СчетаБУ);
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		Запрос.УстановитьПараметр("ТекущийОбъект", Объект.Ссылка);

		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Сумма <> 0 и ВыборкаДетальныеЗаписи.Сумма <> Неопределено Тогда
				НовСтрока = Объект.бит_окей_СоставОсновныхСредств.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока,ВыборкаДетальныеЗаписи ); 	
				//НовСтрока.ОбъектМСФО = СтрокаТаблицы.ОбъектМСФО;   		
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ДокументРСБУ",ВыборкаДетальныеЗаписи.ДокументРСБУ);
				//ПараметрыОтбора.Вставить("Сумма",ВыборкаДетальныеЗаписи.Сумма);
				ПараметрыОтбора.Вставить("НомерСтроки",ВыборкаДетальныеЗаписи.НомерСтроки);
				
				МассивНайденныхСтрок = ДанныеРСБУ.найтистроки(ПараметрыОтбора);
				Если МассивНайденныхСтрок.Количество() > 0  Тогда
					//ЗаполнитьЗначенияСвойств(МассивНайденныхСтрок[0],НовСтрока );
					НовСтрока.СчетДт = МассивНайденныхСтрок[0].СчетДт;
					НовСтрока.СубконтоДт1 = МассивНайденныхСтрок[0].СубконтоДт1;
					НовСтрока.СубконтоДт2 = МассивНайденныхСтрок[0].СубконтоДт2;					
					НовСтрока.СубконтоДт3 = МассивНайденныхСтрок[0].СубконтоДт3;
				КонецЕсли;
				НовСтрока.СоставОС = Справочники.бит_му_СоставОС.ВНА_РСБУ;
				// Ок Видяйкин В. 20170420 +
				// нижеследующий код перенесен ниже, под условие
				//Если Не ЗначениеЗаполнено(НовСтрока.СчетДт) Тогда
				//	НовСтрока.СчетДт = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
				//КонецЕсли;
				// Ок Видяйкин В. 20170420 -
				
				НовСтрока.ОсновноеСредство = Объект.бит_окей_ОсновноеСредство;
				НовСтрока.Объект =Объект.бит_окей_Объект;
				
				Если ВыборкаДетальныеЗаписи.СчетКт = ПланыСчетов.бит_Дополнительный_2.КредитноеОбеспечение   Тогда   //Если счет 12202, то счет РСБУ не заполняем и состав ОС другой
					НовСтрока.СоставОС = Справочники.бит_му_СоставОС.НайтиПоНаименованию("Капитализированные %%");
					НовСтрока.СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка(); 
				Иначе			
					НовСтрока.СоставОС = Справочники.бит_му_СоставОС.ВНА_РСБУ;
					// Ок Видяйкин В. 20170420 + Перенесено  
					Если Не ЗначениеЗаполнено(НовСтрока.СчетДт) Тогда
						НовСтрока.СчетДт = ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств;
						// Ок Видяйкин В. 20170420 +
						НовСтрока.СубконтоДт1 = Объект.бит_окей_Объект;
						// Ок Видяйкин В. 20170420 -					
					КонецЕсли;
					// Ок Видяйкин В. 20170420 -
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;

КонецПроцедуры

&НаСервере
Функция  ПолучитьДанныеРСБУ(СписокДокументов)
	
   //ДанныеРСБУ = ПолучитьДанныеРСБУ();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	бит_Дополнительный_2Обороты.Регистратор КАК ДокументРСБУ,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, СБ_КорректировкаРСБУОбороты.Субконто1) КАК СубконтоДт1,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2, СБ_КорректировкаРСБУОбороты.Субконто2) КАК СубконтоДт2,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Счет, СБ_КорректировкаРСБУОбороты.Счет) КАК СчетДт,
		|	бит_Дополнительный_2Обороты.НомерСтроки,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто3, СБ_КорректировкаРСБУОбороты.Субконто3) КАК СубконтоДт3
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Счет В ИЕРАРХИИ (&Счет122),
		|			,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|			,
		|			) КАК бит_Дополнительный_2Обороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				Запись,
		|				Счет В ИЕРАРХИИ (&СчетаБУ),
		|				,
		|				ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|				,
		|				) КАК ХозрасчетныйОбороты
		|		ПО бит_Дополнительный_2Обороты.Регистратор = ХозрасчетныйОбороты.Регистратор
		|			И бит_Дополнительный_2Обороты.СуммаРеглОборот = ХозрасчетныйОбороты.СуммаОборот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.СБ_КорректировкаРСБУ.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				Запись,
		|				Счет В ИЕРАРХИИ (&СчетаБУ),
		|				,
		|				ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|				,
		|				) КАК СБ_КорректировкаРСБУОбороты
		|		ПО бит_Дополнительный_2Обороты.Регистратор = СБ_КорректировкаРСБУОбороты.Регистратор
		|			И бит_Дополнительный_2Обороты.СуммаРеглОборот = СБ_КорректировкаРСБУОбороты.СуммаОборот
		|ГДЕ
		|	бит_Дополнительный_2Обороты.Регистратор В(&СписокДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	бит_Дополнительный_2Обороты.Регистратор,
		|	бит_Дополнительный_2Обороты.КорСубконто1,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто2, СБ_КорректировкаРСБУОбороты.Субконто2),
		|	ХозрасчетныйОбороты.Счет,
		|	бит_Дополнительный_2Обороты.НомерСтроки,
		|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто3, СБ_КорректировкаРСБУОбороты.Субконто3)
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Счет В ИЕРАРХИИ (&Счет123),
		|			,
		|			Организация = &Организация
		|				И ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|			,
		|			) КАК бит_Дополнительный_2Обороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				Запись,
		|				Счет В ИЕРАРХИИ (&СчетаБУ),
		|				,
		|				ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|				,
		|				) КАК ХозрасчетныйОбороты
		|		ПО бит_Дополнительный_2Обороты.Регистратор = ХозрасчетныйОбороты.Регистратор
		|			И бит_Дополнительный_2Обороты.СуммаРеглОборот = ХозрасчетныйОбороты.СуммаОборот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.СБ_КорректировкаРСБУ.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				Запись,
		|				Счет В ИЕРАРХИИ (&СчетаБУ),
		|				,
		|				ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Субконто1 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто1 В ИЕРАРХИИ (&Субконто1)
		|					КОГДА ВЫРАЗИТЬ(Субконто2 КАК Справочник.ОбъектыСтроительства) ССЫЛКА Справочник.ОбъектыСтроительства
		|						ТОГДА Субконто2 В ИЕРАРХИИ (&Субконто1)
		|				КОНЕЦ,
		|				,
		|				) КАК СБ_КорректировкаРСБУОбороты
		|		ПО бит_Дополнительный_2Обороты.Регистратор = СБ_КорректировкаРСБУОбороты.Регистратор
		|			И бит_Дополнительный_2Обороты.СуммаРеглОборот = СБ_КорректировкаРСБУОбороты.СуммаОборот
		|ГДЕ
		|	бит_Дополнительный_2Обороты.Регистратор В(&СписокДокументов)";
		
		СчетаБУ = Новый Массив;
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства); // счет01
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ); // счет03
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств); // счет08.03
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков); // счет08.01
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования); // счет08.02
		//СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств); // счет08.04
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // счет08.04.01    //ОК Довбешка Т. 17.04.2017 исправление ошибки после обновления релиза
		СчетаБУ.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке); // счет07

		
		МассивСчетов122И123  = Новый Массив;
		МассивСчетов122И123.Добавить(ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоЗдания); //122
		МассивСчетов122И123.Добавить(ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоОборудование); //123
		
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("КорСчет", ПланыСчетов.бит_Дополнительный_2.Служебный); //служебный
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата('20140101'))); //по заявке 1 января 2014
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Субконто1", Объект.бит_окей_Объект);//объект строительства
		Запрос.УстановитьПараметр("Счет122", ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоЗдания);
		Запрос.УстановитьПараметр("Счет123", ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительствоОборудование); 
		Запрос.УстановитьПараметр("Счет1", ПланыСчетов.бит_Дополнительный_2.ВнеоборотныеАктивы);
		Запрос.УстановитьПараметр("Счет122И123", МассивСчетов122И123);
		Запрос.УстановитьПараметр("СчетаБУ", СчетаБУ);	
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);	
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Возврат РезультатЗапроса;
КонецФункции

&НаКлиенте
Процедура бит_окей_СоставОсновныхСредствОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	СписокДокументов = ВыбранноеЗначение;
	Если  Объект.бит_окей_СоставОсновныхСредств.Количество()>0 Тогда
		Ответ = Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.бит_окей_СоставОсновныхСредств.Очистить();
			СБ_ЗаполнитьПоКарточкеСчетаНаСервере(СписокДокументов);  
		КонецЕсли;
	Иначе
		СБ_ЗаполнитьПоКарточкеСчетаНаСервере(СписокДокументов); 
	КонецЕсли;
	Объект.бит_окей_ПервоначальнаяСтоимость = Объект.бит_окей_СоставОсновныхСредств.Итог("Сумма");

КонецПроцедуры

// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-03-02 (#2955)

&НаСервере
Процедура ОбработатьПодбор40Тысяч(ПараметрыФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(ПараметрыФормы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОС = ПараметрыФормы.ТаблицаОСХранилище.Получить();
	
	Если ПараметрыФормы.Очищать Тогда
		Объект.ОсновныеСредства.Очистить();
	КонецЕсли;
	
	Для Каждого Строка ИЗ ТаблицаОС Цикл
		
		Если НЕ Строка.Пометка ИЛИ НЕ ЗначениеЗаполнено(Строка.ОС) Тогда
			Продолжить;
		КонецЕсли;
		
		НайкиПоОС = Объект.ОсновныеСредства.НайтиСтроки(Новый Структура("ОсновноеСредство", Строка.ОС));
		
		Если НайкиПоОС.Количество() Тогда
			НоваяСтрока = НайкиПоОС[0];
		Иначе
			НоваяСтрока = Объект.ОсновныеСредства.Добавить();
			НоваяСтрока.ОсновноеСредство = Строка.ОС;
		КонецЕсли;
		
		ИзменениеОсновногоСредстваСервер(НоваяСтрока.ПолучитьИдентификатор());		  
		
		НоваяСтрока.Сумма = Строка.Сумма;
		НоваяСтрока.ПервоначальнаяСтоимость = Строка.Сумма;
		
		НоваяСтрока.СчетУчета = ПараметрыФормы.СчетУчета;
		НоваяСтрока.СчетСниженияСтоимости = ПараметрыФормы.СчетУчета;  
		НоваяСтрока.КорСчет = ПараметрыФормы.КорСчет;
		
		НоваяСтрока.ДатаПринятияКУчету = Объект.Дата;
		НоваяСтрока.УчитыватьКакОС = Истина;
		
		НоваяСтрока.Субконто1 = Строка.ОС;
		НоваяСтрока.Субконто2 = Строка.Объект;
		НоваяСтрока.КорСубконто1 = Строка.ОС;
		НоваяСтрока.КорСубконто2 = Строка.Объект;		  		  		  	  
	КонецЦикла;
	//Обновление последней строки
	НоваяСтрока = Объект.ОсновныеСредства.Добавить();
	ИзменениеОсновногоСредстваСервер(НоваяСтрока.ПолучитьИдентификатор());
	Объект.ОсновныеСредства.Удалить(НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПодборОСДо40ТысячЗаполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо указать организацию");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.Организация");
		Возврат;
	КонецЕсли;
		
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОчиститьОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Таблица будет очищена перед переносом строк, продолжить?", РежимДиалогаВопрос.ДаНет, 0,, "Предупреждение");
	Иначе
		// открываем форму подбора ОС
		ОткрытьФормуПодбора(Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОСДо40ТысячДобавить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо указать организацию");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПодбора(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтвет(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФормуПодбора(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора(Режим)
	
	// открываем форму подбора ОС (обработка)
	стПараметры = Новый Структура;
	стПараметры.Вставить("Организация", Объект.Организация);
	стПараметры.Вставить("Очищать", Режим);
	стПараметры.Вставить("Дата", Объект.Дата);
	
	Оповещение = Новый ОписаниеОповещения( "ОбработатьПодбор40Тысяч", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОК_ПодборОСДо40Тыс.Форма.Форма", стПараметры
	,,,,, Оповещение, РежимОткрытияОкнаФормы.Независимый);
	
	
КонецПроцедуры
// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-03-02 (#2955)

// - СБ ПискуноваВ 29.29.2016 #2372

// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-10-20 (#4297) 
&НаКлиенте
Процедура ок_ПодборОборудования(Команда)
	
	СтруктураПараметровОбработки = Новый Структура;
	
	СтруктураПараметровОбработки.Вставить("ЗакрыватьПриВыборе", Ложь);
	СтруктураПараметровОбработки.Вставить("Режим",				ПредопределенноеЗначение("Перечисление.бит_му_РежимыПодбораВНА.ок_ПринятиеКУчетуОборудования"));
	СтруктураПараметровОбработки.Вставить("ДатаНачала",			НачалоМесяца(Объект.Дата));
	СтруктураПараметровОбработки.Вставить("ДатаОкончания",		КонецМесяца(Объект.Дата));
	СтруктураПараметровОбработки.Вставить("Организация",		Объект.Организация);
	СтруктураПараметровОбработки.Вставить("МОЛ",				Объект.МОЛ);
	СтруктураПараметровОбработки.Вставить("Местонахождение",	Объект.Подразделение);
	СтруктураПараметровОбработки.Вставить("ВалютаДокумента",	Объект.ВалютаДокумента);

	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма.ФормаПодборВНАУправляемая", СтруктураПараметровОбработки, ЭтотОбъект,
					, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры
// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-10-20 (#4297)