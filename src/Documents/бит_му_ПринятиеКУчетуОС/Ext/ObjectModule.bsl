#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета.

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

Перем мПереченьВидовОпераций Экспорт; // Хранит перечень видов операций документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Заполнение нового документа.
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
				ИзменениеВалютыМодуль();			
			КонецЕсли;                  			
						
			Если ДанныеЗаполнения.Свойство("ТаблицаВНА") Тогда
				
				//ОсновныеСредства.Загрузить(ДанныеЗаполнения.ТаблицаВНА);
				
				// Тип ОС
				ТипОС = Тип(бит_ОбщегоНазначения.ПолучитьИмяТипаОсновныеСредства());
				
				// Метод начисления амортизации по умолчанию.
				ЛинейныйМетодНачисления = Перечисления.бит_му_МетодыНачисленияАмортизации.Линейный;
				
				// Параметр "НачислятьАмортизациюСТекущегоПериодаНМА" извлекается из учетной политики.
				ПараметрыУчетнойПолитики = Документы.бит_му_ПринятиеКУчетуОС.ПолучитьПараметрыУчетнойПолититки(Организация, Дата);
				НачислятьАмортизациюСТекущегоПериода = ПараметрыУчетнойПолитики.НачислятьАмортизациюСТекущегоПериода;
												
			Для каждого СтрокаТаблицы Из ДанныеЗаполнения.ТаблицаВНА Цикл
					
					СтрТч = ОсновныеСредства.Добавить();
					ЗаполнитьЗначенияСвойств(СтрТч, СтрокаТаблицы);
					
					СтрТч.ОсновноеСредство = СтрокаТаблицы.ВНА;
					
					СтрТч.УчитыватьКакОС             = Истина;
					СтрТч.НачислятьАмортизацию       = Истина;
					СтрТч.МетодНачисленияАмортизации = ЛинейныйМетодНачисления;
					            					
					СтрТч.НачислятьАмортизациюСТекущегоПериода = НачислятьАмортизациюСТекущегоПериода;
					
					ЗаполнитьКлассПоУмолчаниюМодуль(СтрТч, Истина);							
					
					// Срок полезного использования из регистра "Параметры амортизации ОС (бухгалтерский учет)" 
					// МИНУС количество месяцев между датой вводна начальных остатков и датой принятия к учету.
					КоличествоМесяцевОтПринятияБУ = МЕСЯЦ(Дата) - МЕСЯЦ(СтрТч.ДатаПринятияКУчету);
					СтрТч.СрокПолезногоИспользования = СтрТч.СрокПолезногоИспользования - КоличествоМесяцевОтПринятияБУ;
									   
					Если ЭтоОС(СтрТч, ПараметрыУчетнойПолитики) Тогда
						
						// Тип субконто.
						НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(СтрТч.СчетУчета, мКоличествоСубконтоМУ);									  
						бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(СтрТч, НастройкиСубконто, "Субконто");
						
						// Значения субконто ОС.
						Если ЗначениеЗаполнено(СтрТч.ОсновноеСредство) Тогда 																
							Для Ном = 1 По мКоличествоСубконтоМУ Цикл 								
								ТекИмяСубконто = "Субконто" + Ном;  								
								Если ТипЗнч(СтрТч[ТекИмяСубконто]) = ТипОС Тогда
									СтрТч[ТекИмяСубконто] = СтрТч.ОсновноеСредство;
								КонецЕсли;          							
							КонецЦикла;  						
						КонецЕсли;   						
						
					Иначе 
						
				   		СтрТч.УчитыватьКакОС = Ложь;
						СтрТч.Класс = Справочники.бит_му_КлассыОсновныхСредств.ПустаяСсылка();
    	               	СтрТч.СчетУчета = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();  				
						
					КонецЕсли;
					
					СтрТч.КорСчет = ДанныеЗаполнения.КорСчет;
										
				КонецЦикла;
				
			КонецЕсли;  	
			
		КонецЕсли;
						
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору") Тогда
		
		Если ДанныеЗаполнения.ДоговорКонтрагента.бит_ТипДоговора = Справочники.бит_ТипыДоговоров.АрендаОС Тогда
			
			// Заполнение шапки.
			ДокументОснование   = ДанныеЗаполнения;
			ВидОперации			= Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ПринятиеКУчетуОСВФинансовойАренде;
			Организация 		= ДанныеЗаполнения.Организация;
			Контрагент 			= ДанныеЗаполнения.Контрагент;
			ДоговорКонтрагента 	= ДанныеЗаполнения.ДоговорКонтрагента;
			
			// Тип ОС
			// Адаптация для ERP. Начало. 18.03.2014{{.
			ТипОС = Тип(бит_ОбщегоНазначения.ПолучитьИмяТипаОсновныеСредства());
			// Адаптация для ERP. Конец. 18.03.2014}}.
			ИмяСубконто    = "Субконто";
			ИмяКорСубконто = "КорСубконто";
			
			// Параметр "НачислятьАмортизациюСТекущегоПериода" извлекается из учетной политики.
    		ДанныеУчетнойПолитики = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(ТекущаяДата(), Новый Структура("Организация", Организация));
			НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ДанныеУчетнойПолитики
												, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериода);
												
			// Счета учета из параметров финансовых инструментов.
			бит_му_ФинИнструменты.ПолучитьСчетаУчетаПоДоговору(ЭтотОбъект);
			Если ЗначениеЗаполнено(СчетУчетаДолгосрочный) Тогда
				НастройкиКорСубконто  = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(СчетУчетаДолгосрочный, мКоличествоСубконтоМУ);
				СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчетаДолгосрочный);
                КоличествоКорСубконто = СвСч.КоличествоСубконто;
			КонецЕсли;
			
			СписокОбъектов 		= ДанныеЗаполнения.ПообъектныйГрафикПлатежей.Выгрузить();
			СписокОбъектов.Свернуть("Объект");
						
			// Заполнение табличной части.
			Для Каждого ТекСтрока Из СписокОбъектов Цикл
				
				НоваяСтрока = ОсновныеСредства.Добавить();
				НоваяСтрока.ОсновноеСредство     				 = ТекСтрока.Объект;				
				НоваяСтрока.ДатаПринятияКУчету   				 = ДанныеЗаполнения.Дата;
				НоваяСтрока.УчитыватьКакОС       				 = Истина;
				НоваяСтрока.НачислятьАмортизацию 				 = Истина;
				НоваяСтрока.НачислятьАмортизациюСТекущегоПериода = НачислятьАмортизациюСТекущегоПериода;
				НоваяСтрока.МетодНачисленияАмортизации 			 = Перечисления.бит_му_МетодыНачисленияАмортизации.Линейный;
				ЗаполнитьКлассПоУмолчаниюМодуль(НоваяСтрока);				
				
				// Субконто счета учета.
				Если ЗначениеЗаполнено(НоваяСтрока.СчетУчета) Тогда				
					НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(НоваяСтрока.СчетУчета, мКоличествоСубконтоМУ);									  
					бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(НоваяСтрока, НастройкиСубконто, ИмяСубконто);
					Для i = 1 По мКоличествоСубконтоМУ Цикл 			
						ТекИмяСубконто = ИмяСубконто + i;   			
						Если ТипЗнч(НоваяСтрока[ТекИмяСубконто]) = ТипОС Тогда
							НоваяСтрока[ТекИмяСубконто] = НоваяСтрока.ОсновноеСредство;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СчетУчетаДолгосрочный) Тогда
					НоваяСтрока.КорСчет = СчетУчетаДолгосрочный;
					бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(НоваяСтрока, НастройкиКорСубконто, ИмяКорСубконто);
					Для i = 1 По КоличествоКорСубконто Цикл
						ТекИмяСубконто = ИмяКорСубконто + i;
						Если ТипЗнч(НоваяСтрока[ТекИмяСубконто]) = ТипОС Тогда
							НоваяСтрока[ТекИмяСубконто] = НоваяСтрока.ОсновноеСредство;
						КонецЕсли;
						Если ТипЗнч(НоваяСтрока[ТекИмяСубконто]) = Тип("СправочникСсылка.Контрагенты") Тогда
							НоваяСтрока[ТекИмяСубконто] = Контрагент;
						КонецЕсли;
						Если ТипЗнч(НоваяСтрока[ТекИмяСубконто]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
							НоваяСтрока[ТекИмяСубконто] = ДоговорКонтрагента;
						КонецЕсли;  						
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Документ ""Принятие к учету ОС"" может быть введен только на основании 
			                       |документа ""Дополнительные условия по договору"" с договором типа ""Аренда ОС""!'");
			
			// ++ NB "Стандарты" требуют вызвать исключение.
			ВызватьИсключение ТекстСообщения;	
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);		
			ДополнительныеСвойства.Вставить("ОтказОтВвода", Истина);
		КонецЕсли;
	КонецЕсли;
	      												   
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//СпособРасчетаЭСП 	    = бит_му_ОбщегоНазначения.ПолучитьСпособРасчетаЭСП(Организация);
	//СтруктураШапкиДокумента.Вставить("СпособРасчетаЭСП", СпособРасчетаЭСП);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	Если СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		ДанныеПоНоминальнойСтавке = бит_му_ФинИнструменты.ПолучитьДанныеПоНоминальнойСтавке(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.ДоговорКонтрагента);	
		СтруктураШапкиДокумента.Вставить("НоминальнаяСтавка", ДанныеПоНоминальнойСтавке.Ставка);
	Иначе
		ЭффективнаяСтавка = Документы.бит_му_ПринятиеКУчетуОС.ЭффективнаяСтавкаПринятиеКУчету(Ссылка);
		СтруктураШапкиДокумента.Вставить("ЭффективнаяСтавка", ЭффективнаяСтавка);
	КонецЕсли;
		
	//БИТ Изюмов А.В. 30.07.12 <--- разграничим по видам операций
	//СтруктураТаблиц 	= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);		
	//СтруктураКурсыВалют = СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ);	
	//
	//ПроверкаТаблицыОС(СтруктураТаблиц.ОС, Отказ);
	Если НЕ ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС И НЕ ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС тогда  
		СтруктураТаблиц 	    = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);		
		СтруктураКурсыВалют     = СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ);	
		
		ПроверкаТаблицыОС(СтруктураТаблиц.ОС, Отказ);
	Иначе     
		
		// Проверим правильность заполнения шапки документа
		ПроверитьЗаполнениеШапки(Отказ, Заголовок);
		
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура();
		СтруктураОбязательныхПолей.Вставить("Сумма");
		СтруктураОбязательныхПолей.Вставить("СчетКт");
		СтруктураОбязательныхПолей.Вставить("СубконтоКт1");
		СтруктураОбязательныхПолей.Вставить("СубконтоКт2");
		СтруктураОбязательныхПолей.Вставить("СоставОС");
		
		// Теперь вызовем общую процедуру проверки.
		ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект
		,"бит_окей_СоставОсновныхСредств"
		,СтруктураОбязательныхПолей
		,Отказ
		,Заголовок);
		
		СтруктураКурсыВалют  = СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента,Отказ);	
		
		СтруктураТаблиц      = ПодготовитьТаблицыДокументаПоШапкеДокумента(СтруктураШапкиДокумента); 
		
		ПроверкаТаблицыКонсолидированногоОС(СтруктураТаблиц.ОС,Отказ,Заголовок);
		
	КонецЕсли; 
	//БИТ Изюмов А.В. 30.07.12 <---
	
	// Получим структуру курсов на даты принятия к учету.
	ИсторическиеКурсы = ПолучитьСтруктуруИсторическихКурсов(СтруктураТаблиц.ОС, СтруктураКурсыВалют);
	
	//БИТ Тртилек 06092013 проверить суммы
	Проверять = ЛОЖЬ;
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС Тогда
		Для Каждого Строка ИЗ бит_окей_СоставОсновныхСредств Цикл
			Если Строка.СоставОС.УслугиОтСоственногоЮЛ Тогда
				Проверять = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Проверять Тогда
		ПроверитьСоответствиеСумм(Отказ);
	КонецЕсли;
	///БИТ Тртилек
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураКурсыВалют, ИсторическиеКурсы, СтруктураТаблиц, Отказ);
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
	// Это не финансовая аренда.
	Если ВидОперации = мПереченьВидовОпераций.ПринятиеКУчетуОС
		// Окей Видяйкин В. 03.09.2019 (AT-1874695 Ошибка при проведении документа) +
		Или ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС
		Или ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС
		// Окей Видяйкин В. 03.09.2019 (AT-1874695 Ошибка при проведении документа) -		
		Или ВидОперации = мПереченьВидовОпераций.ВводНачальныхОстатковОС Тогда
		
		// Реквизиты шапки.
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Контрагент"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДоговорКонтрагента"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВариантРасчетаФинансовыхПроцентов"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетУчетаДолгосрочный"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетУчетаКраткосрочный"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетУчетаПроцентовДолгосрочный"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетУчетаПроцентовКраткосрочный"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетУчетаАванса"));
		
		// Реквизиты табличной части "Основные средства".
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ОсновныеСредства.ЭСП"));
		
	Иначе
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ОсновныеСредства.КорСчет"));
	КонецЕсли;
	
	// Если это не ввод остатков по финансовой аренде.
	Если ВидОперации <> мПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде Тогда
		
		// Реквизиты шапки.
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВспомогательныйСчет"));
		
		// Реквизиты табличной части "Основные средства".
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ОсновныеСредства.СуммаЗадолженности"));
		
	КонецЕсли;
	
	// Счет НРП проверяется если сумма начисления амортизации не пустая.
	Если ОсновныеСредства.Итог("СуммаНачисленнойАмортизации") = 0 Тогда
		
		// Реквизиты шапки.
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СчетНРП"));
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// Таблица "Основные средства".
	
	ТекстКритерий1 = "СтрокаТаблицы.УчитыватьКакОС";
	ТекстКритерий2 = "СтрокаТаблицы.НачислятьАмортизацию И СтрокаТаблицы.УчитыватьКакОС";
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Класс"                     		, ТекстКритерий1);
	СтруктураОбязательныхПолей.Вставить("ДатаПринятияКУчету"        		, ТекстКритерий1);
	СтруктураОбязательныхПолей.Вставить("СрокПолезногоИспользования"		  , ТекстКритерий2);
	СтруктураОбязательныхПолей.Вставить("МетодНачисленияАмортизации"		  , ТекстКритерий2);
	СтруктураОбязательныхПолей.Вставить("СпособОтраженияРасходовПоАмортизации", ТекстКритерий2);
	СтруктураОбязательныхПолей.Вставить("СчетНачисленияАмортизации"           , ТекстКритерий2);
 	//БИТ Изюмов А.В. 30.07.12 <--- добавим обязательные поля
	СтруктураОбязательныхПолей.Вставить("ПервоначальнаяСтоимость");	
	СтруктураОбязательныхПолей.Вставить("СчетСниженияСтоимости");
	//БИТ Изюмов А.В. 30.07.12 <---
	
	бит_ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект
															, "ОсновныеСредства"
															, СтруктураОбязательныхПолей
															, Отказ
															, Заголовок);
															
	//БИТ Изюмов А.В. 30.07.12 <--- добавим обязательные поля для проверки и проверим заполение субконто														
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("Субконто1");
	СтруктураОбязательныхПолей.Вставить("Субконто2");	
	СтруктураОбязательныхПолей.Вставить("КорСубконто1");		
	СтруктураОбязательныхПолей.Вставить("КорСубконто2");
	
	// Теперь вызовем процедуру проверки субконта
	ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект
	,"ОсновныеСредства"
	,СтруктураОбязательныхПолей
	,Отказ
	,Заголовок);
    //БИТ Изюмов А.В. 30.07.12 <---
	
	// Проверим наличие дублей в табличной части "Основные средства".	
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	  , "ОсновныеСредства"
																	  , Новый Структура("ОсновноеСредство")
																	  , Отказ
																	  , Заголовок);
																	  
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//очистим имеющиеся записи
	НаборЗаписейНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьНаборЗаписей();
	НаборЗаписейНРПВНА.Отбор.мРегистратор.Установить(Ссылка);
	НаборЗаписейНРПВНА.Записать();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
	//БИТ Изюмов А.В. Очиска реквизитов по видам операций. <---
	ОчищаемРеквизитыПоВидамОпераций();
	//БИТ Изюмов А.В. Очиска реквизитов по видам операций. <---
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение класса ОС в строке табличной части.
// 
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.ОсновныеСредства.
//  ИзмененСчет    - Булево.
//  ЭтоПодбор      - Булево.
// 
Процедура ИзменениеКлассаМодуль(ТекущаяСтрока, ИзмененСчет = Ложь, ЭтоПодбор = Ложь) Экспорт

   Если ТекущаяСтрока = Неопределено Тогда   
	  Возврат;     
   КонецЕсли; 

   Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Класс) Тогда     
   	  Возврат;     
   КонецЕсли; 
   
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Класс"      , ТекущаяСтрока.Класс);
	ПараметрыКласса = бит_му_ВНА.ПолучитьПараметрыКлассаВНА(СтруктураПараметров);
	
	МетаданныеОбъекта = Метаданные();
	
	Для каждого КиЗ Из ПараметрыКласса Цикл
		
		ИмяКолонки = КиЗ.Ключ;
		
		Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(ИмяКолонки, МетаданныеОбъекта, "ОсновныеСредства") Тогда
			
			// Добавление кода. Начало. 12.12.2016{{ BF-399
			Если ЭтоПодбор И ИмяКолонки = "СрокПолезногоИспользования" И НЕ ЗначениеЗаполнено(КиЗ.Значение) Тогда
				// Не заполняем срок полезного использования из параметров классов ВНА, если в параметрах он не заполнен.
				Продолжить;   			
			КонецЕсли;
			// Добавление кода. Конец. 12.12.2016}}
			
			ТекущаяСтрока[ИмяКолонки] = КиЗ.Значение;
			
			Если ИмяКолонки = "СчетУчета" Тогда 				
				ИзмененСчет = Истина;    				
			КонецЕсли; 
			
		КонецЕсли;  // Есть реквизит ТЧ.
		
	КонецЦикла; // По параметрам класса.  	

КонецПроцедуры // ИзменениеКлассаМодуль()

// Процедура заполняет класс по умолчанию.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОсновныеСредства.
//  ЭтоПодбор     - Булево.
// 
Процедура ЗаполнитьКлассПоУмолчаниюМодуль(ТекущаяСтрока, ЭтоПодбор = Ложь) Экспорт

	Если ТекущаяСтрока = Неопределено Тогда		
		Возврат;		
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Класс) Тогда
		
		 // Определяем класс по группе ОС и организации.
	     КлассПоУмолчанию = бит_му_ВНА.ПолучитьКлассВНА(ТекущаяСтрока.ОсновноеСредство.ГруппаОС, Организация);
		 
		 Если ЗначениеЗаполнено(КлассПоУмолчанию) Тогда
		 
		 	ТекущаяСтрока.Класс = КлассПоУмолчанию;
			ИзменениеКлассаМодуль(ТекущаяСтрока, , ЭтоПодбор);
		 
		 КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьКлассПоУмолчаниюМодуль()

// Функция получает курсы валют, необходимые для выполнения валютных пересчетов.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  Отказ                    - Булево.
//  Заголовок                - Строка.
// 
Функция СформироватьСтруктуруКурсовВалют(СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Получим курсы валют, неоходимые для выполнения пересчетов
	// ВидыКурсов = Новый Структура("Упр, Регл, МУ, Взаиморасчеты");
	ВидыКурсов = Новый Структура("Упр, Регл, МУ, Взаиморасчеты, Документ");
	
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	ВзаиморасчетыКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
	                                                           СтруктураШапкиДокумента.Дата);
	СтруктураКурсыВалют.Взаиморасчеты = ВзаиморасчетыКурс;
		
	СтрКурсов 		 = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	
	Если Не ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = Нстр("ru = 'Для организации %1%' не указана валюта международного учета!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтруктураШапкиДокумента.Организация);			 
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , ,Отказ);
		
	КонецЕсли; 
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // СформироватьСтруктуруКурсовВалют()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Функция определяет превышает ли сумма ОС порог признания ОС.
// 
// Параметры:
//  ТекущиеДанные 			 - ДанныеФормыЭлементКоллекции, СтрокаТабличнойЧасти.ОсновныеСредства.
//  ПараметрыУчетнойПолитики - Структура (По усолчанию - Неопределено).
// 
// Возвращаемое значение:
//   Булево.
// 
Функция ЭтоОС(ТекущиеДанные, ПараметрыУчетнойПолитики = Неопределено) Экспорт

	флЭтоОС = Истина;
	
	Если ПараметрыУчетнойПолитики = Неопределено Тогда 	
		ПараметрыУчетнойПолитики = Документы.бит_му_ПринятиеКУчетуОС.ПолучитьПараметрыУчетнойПолититки(Организация, Дата);	
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики.ПорогПризнанияОС) 
			И ТекущиеДанные.Сумма <= ПараметрыУчетнойПолитики.ПорогПризнанияОС Тогда
			 
			флЭтоОС = Ложь;
			
		КонецЕсли; 
		
	КонецЕсли;

	Возврат флЭтоОС;
	
КонецФункции // ЭтоОС()

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт
	
	РежимПодбора = ?(ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ПринятиеКУчетуОС 
					ИЛИ ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ПринятиеКУчетуОСВФинансовойАренде
					, Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуОС
					, Перечисления.бит_му_РежимыПодбораВНА.ВводНачальныхОстатковОС);
		
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("Режим"			    , РежимПодбора);
	//БИТ Тртилек 27.09.2012 устанавливаются значения параметров при открытии формы подбора
	//ПараметрыПодбора.Вставить("ДатаНачала"		, НачалоМесяца(Дата));
	ПараметрыПодбора.Вставить("ДатаНачала"		, '19800101');
	///БИТ Тртилек	
	ПараметрыПодбора.Вставить("ДатаОкончания"		, КонецМесяца(Дата));
	ПараметрыПодбора.Вставить("Организация"		, Организация);
	ПараметрыПодбора.Вставить("МОЛ"				, МОЛ);
	ПараметрыПодбора.Вставить("Местонахождение"	, Подразделение);
	ПараметрыПодбора.Вставить("ВалютаДокумента"	, ВалютаДокумента);	

	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

Процедура СинхронизироватьРеквизитыСтрокиОС(ТекущиеДанные, ИмяСубконто) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущиеДанные.ОсновноеСредство) Тогда
		
		ТипОС = Тип(бит_ОбщегоНазначения.ПолучитьИмяТипаОсновныеСредства());
				
		Для Ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущиеДанные[ТекИмяСубконто]) = ТипОС Тогда
				ТекущиеДанные[ТекИмяСубконто] = ТекущиеДанные.ОсновноеСредство;
			КонецЕсли; 
			
			//БИТ Изюмов А.В. 30.07.12 <--- назначим объект
			Если ТипЗнч(ТекущиеДанные[ТекИмяСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				ТекущиеДанные[ТекИмяСубконто] = ТекущиеДанные.ОсновноеСредство.Объект;
			КонецЕсли;
			//БИТ Изюмов А.В. 30.07.12 <---
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиОС()

//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ЗаполнитьОсновныеСредства(ВыбранноеЗначение) Экспорт 
Процедура ЗаполнитьОсновныеСредства(ВыбранноеЗначение, Форма, мНастройкиСубконтоСчетовМУ) Экспорт 
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )	
	
	ЭтоПринятиеКУчетуОСПоОстаткам = ВыбранноеЗначение.Режим = Перечисления.бит_му_РежимыПодбораВНА.ПринятиеКУчетуОСПоОстаткам;

	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных   = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов, ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	Документы.бит_му_ПринятиеКУчетуОС.ПреобразоватьТаблицуУчитываяРаспределениеНДС(ТаблицаДанных); 
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ВНА);
		
		МассивСтрок = ОсновныеСредства.НайтиСтроки(СтруктураОтбора);
		
		НайденнаяСтрока = ?(МассивСтрок.Количество() = 0, Неопределено, МассивСтрок[0]); 		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = ОсновныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ВНА;
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
			НоваяСтрока.Класс = НоваяСтрока.ОсновноеСредство.БИТ_ГруппаОСУУ;
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
			НоваяСтрока.УчитыватьКакОС             = Истина;
			НоваяСтрока.НачислятьАмортизацию       = Истина;
			НоваяСтрока.МетодНачисленияАмортизации = Перечисления.бит_му_МетодыНачисленияАмортизации.Линейный;
			
			// Параметр "НачислятьАмортизациюСТекущегоПериода" извлекается из учетной политики.
			ДанныеУчетнойПолитики = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(Дата, Новый Структура("Организация", Организация));
			
			НоваяСтрока.НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(ДанныеУчетнойПолитики,
									ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериода);
			
			
			ЗаполнитьКлассПоУмолчаниюМодуль(НоваяСтрока, Истина);
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
			ИзменениеКлассаМодуль(НоваяСтрока);
			//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
			
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(НоваяСтрока.СчетУчета, 4);									  
			бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(НоваяСтрока, НастройкиСубконто, "Субконто");

			//БИТ Изюмов А.В. 02.08.12
			Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводНачальныхОстатковОС Тогда
				НоваяСтрока.КорСчет = ПланыСчетов.бит_Дополнительный_2.Служебный;
			КонецЕсли;
			
			Форма.ИзменениеКорСчетаСервер(НоваяСтрока.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
			Форма.ИзменениеСчетаУчетаСервер(НоваяСтрока.ПолучитьИдентификатор(), мНастройкиСубконтоСчетовМУ);
			//БИТ Изюмов А.В. 02.08.12
			
			// Срок полезного использования из регистра "Параметры амортизации ОС (бухгалтерский учет)" 
			// МИНУС количество месяцев между датой вводна начальных остатков и датой принятия к учету. 
			Если ЭтоПринятиеКУчетуОСПоОстаткам И ТаблицаДанных.Колонки.Найти("СрокПолезногоИспользования") <> Неопределено Тогда
				КоличествоМесяцевОтПринятияБУ = МЕСЯЦ(Дата) - МЕСЯЦ(СтрокаТаблицы.ДатаПринятияКУчету);
				НоваяСтрока.СрокПолезногоИспользования = НоваяСтрока.СрокПолезногоИспользования - КоличествоМесяцевОтПринятияБУ;
			КонецЕсли;
		
			// Выполним подбор счетов.
			Документы.бит_му_ПринятиеКУчетуОС.ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы, ЭтотОбъект);
            
            // Синхронизация реквизитов строки.
        	СинхронизироватьРеквизитыСтрокиОС(НоваяСтрока, "Субконто");	
        	СинхронизироватьРеквизитыСтрокиОС(НоваяСтрока, "КорСубконто");
					   
			Если Не ЭтоОС(НоваяСтрока) Тогда
		   
				НоваяСтрока.УчитыватьКакОС = Ложь;
				
				НоваяСтрока.Класс     = Справочники.бит_му_КлассыОсновныхСредств.ПустаяСсылка();
				НоваяСтрока.СчетУчета = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				
				НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(НоваяСтрока.СчетУчета, 4);									  
				бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(НоваяСтрока, НастройкиСубконто, "Субконто");
					
			КонецЕсли;
			
			// Добавление кода. Начало. 01.02.2016{{
			НоваяСтрока.УвеличениеСтоимостиОС = СтрокаТаблицы.ЭтоРаспределениеНДС;
			// Добавление кода. Конец. 01.02.2016}}
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Основное средство ""%1%"" уже подобрано в строке №%2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ВНА, НайденнаяСтрока.НомерСтроки);				 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных.
	
КонецПроцедуры 

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//   СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//   Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	СтруктураТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СостояниеПринято",Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЧасть.НомерСтроки КАК НомерСтроки,
	               |	ТабЧасть.ОсновноеСредство КАК ОсновноеСредство,
	               |	ТабЧасть.УчитыватьКакОС КАК УчитыватьКакОС,
	               |	ТабЧасть.УвеличениеСтоимостиОС КАК УвеличениеСтоимостиОС,
	               |	ТабЧасть.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	               |	ТабЧасть.Местонахождение КАК Местонахождение,
	               |	ТабЧасть.МОЛ КАК МОЛ,
	               |	ТабЧасть.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	               |	ТабЧасть.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	               |	ТабЧасть.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	               |	ТабЧасть.НачислятьАмортизацию КАК НачислятьАмортизацию,
	               |	ТабЧасть.НачислятьАмортизациюСТекущегоПериода КАК НачислятьАмортизациюСТекущегоПериода,
	               |	ТабЧасть.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	               |	ТабЧасть.СуммаНачисленнойАмортизации КАК СуммаНачисленнойАмортизации,
	               |	ТабЧасть.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	               |	ТабЧасть.КоэффициентУскорения КАК КоэффициентУскорения,
	               |	ТабЧасть.ПредполагаемыйОбъемПродукции КАК ПредполагаемыйОбъемПродукции,
	               |	ТабЧасть.ЕдиницаИзмеренияОбъемаПродукции КАК ЕдиницаИзмеренияОбъемаПродукции,
	               |	ТабЧасть.Сумма КАК Сумма,
	               |	ТабЧасть.СуммаВВалюте КАК СуммаВВалюте,
	               |	ТабЧасть.ОстатокРезерваПереоценки КАК ОстатокРезерваПереоценки,
	               |	ТабЧасть.СчетРезерваПереоценки КАК СчетРезерваПереоценки,
	               |	ТабЧасть.СчетСниженияСтоимости КАК СчетСниженияСтоимости,
	               |	ТабЧасть.СчетУчета КАК СчетУчета,
	               |	ТабЧасть.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	               |	ТабЧасть.Субконто1 КАК Субконто1,
	               |	ТабЧасть.Субконто2 КАК Субконто2,
	               |	ТабЧасть.Субконто3 КАК Субконто3,
	               |	ТабЧасть.Субконто4 КАК Субконто4,
	               |	ТабЧасть.КорСчет КАК КорСчет,
	               |	ТабЧасть.КорСубконто1 КАК КорСубконто1,
	               |	ТабЧасть.КорСубконто2 КАК КорСубконто2,
	               |	ТабЧасть.КорСубконто3 КАК КорСубконто3,
	               |	ТабЧасть.КорСубконто4 КАК КорСубконто4,
	               |	ТабЧасть.Класс КАК Класс,
	               |	СостоянияОС.Состояние КАК Состояние,
	               |	СостоянияОС.ДатаСостояния КАК ДатаСостояния,
	               |	ТабЧасть.СуммаАванса КАК СуммаАванса,
	               |	ТабЧасть.СуммаАвансаВВалюте КАК СуммаАвансаВВалюте,
	               |	ТабЧасть.СуммаЗадолженности КАК СуммаЗадолженности,
	               |	ТабЧасть.СуммаЗадолженностиВВалюте КАК СуммаЗадолженностиВВалюте,
	               |	ТабЧасть.ЭСП КАК ЭСП,
	               |	ТабЧасть.ЭСП КАК СтавкаПроцента
				   //Изюмов А.В. 02.08.12 <--- дополнительно получим в запросе поле Организация
				   |	,ТабЧасть.Ссылка.Организация 
				   //Изюмов А.В. 02.08.12 <---
	               |ИЗ
	               |	Документ.бит_му_ПринятиеКУчетуОС.ОсновныеСредства КАК ТабЧасть
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК СостоянияОС
	               |		ПО (СостоянияОС.Регистратор <> &Ссылка)
	               |			И ТабЧасть.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	               |			И (СостоянияОС.Организация = &Организация)
	               |			И (СостоянияОС.Состояние = &СостояниеПринято)
	               |ГДЕ
	               |	ТабЧасть.Ссылка = &Ссылка";
				   
    Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	СтруктураТаблиц.Вставить("ОС", Результат.Выгрузить());
	
	//БИТ Тртилек 23.08.2013 
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС Тогда		
		
		Запрос = Новый Запрос;
		
		//izhtc-Kir 26.08.2015 в запросе есть ошибка, но она была и в рабочей БП 2.0, видимо этот функционал не используется
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.ДокументПоступления,
		               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.ДатаДокументаПоступления,
		               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.бит_Сумма,
		               |	бит_му_НРП_ВНАСрезПоследних.Период КАК рПериод,
		               |	бит_му_НРП_ВНАСрезПоследних.ИсточникЗаписи КАК рИсточникЗаписи,
		               |	бит_му_НРП_ВНАСрезПоследних.ПриходРасход КАК рПриходРасход,
		               |	бит_му_НРП_ВНАСрезПоследних.ДокументРеализации КАК рДокументРеализации,
		               |	бит_му_НРП_ВНАСрезПоследних.ДокументПоступления КАК рДокументПоступления,
		               |	бит_му_НРП_ВНАСрезПоследних.ОрганизацияПодрядчик КАК рОрганизацияПодрядчик,
		               |	бит_му_НРП_ВНАСрезПоследних.ОрганизацияЗаказчик КАК рОрганизацияЗаказчик,
		               |	бит_му_НРП_ВНАСрезПоследних.СуммаБезНДС КАК рСуммаБезНДС,
		               |	бит_му_НРП_ВНАСрезПоследних.СуммаАмортизации КАК рСуммаАмортизации,
		               |	бит_му_НРП_ВНАСрезПоследних.СчетВыручки КАК рСчетВыручки,
		               |	бит_му_НРП_ВНАСрезПоследних.СубконтоСчетаВыручки КАК рСубконтоСчетаВыручки,
		               |	бит_му_НРП_ВНАСрезПоследних.СчетУчетаАктива КАК рСчетУчетаАктива,
		               |	бит_му_НРП_ВНАСрезПоследних.СубконтоСчетаУчетаАктива КАК рСубконтоСчетаУчетаАктива,
		               |	бит_му_НРП_ВНАСрезПоследних.ДатаВвода КАК рДатаВвода,
		               |	бит_му_НРП_ВНАСрезПоследних.ОставшийсяСПИ КАК рОставшийсяСПИ,
		               |	бит_му_НРП_ВНАСрезПоследних.СчетРасходаПоАмортизации КАК рСчетРасходаПоАмортизации,
		               |	бит_му_НРП_ВНАСрезПоследних.СубконтоСчетаРасходаПоАмортизации КАК рСубконтоСчетаРасходаПоАмортизации,
		               |	бит_му_НРП_ВНАСрезПоследних.СчетНакопленнойАмортизации КАК рСчетНакопленнойАмортизации,
		               |	бит_му_НРП_ВНАСрезПоследних.СубконтоСчетаНакопленнойАмортизации КАК рСубконтоСчетаНакопленнойАмортизации,
		               |	бит_му_НРП_ВНАСрезПоследних.ЭлиминирующиеПроводки КАК рЭлиминирующиеПроводки,
		               |	бит_му_НРП_ВНАСрезПоследних.НомерЗаписи КАК рНомерЗаписи,
		               |	бит_му_НРП_ВНАСрезПоследних.Ответственный КАК рОтветственный,
		               |	бит_му_ПараметрыОССрезПоследних.ЗначениеПараметра КАК СчетУчета
		               |ИЗ
		               |	Документ.бит_му_ПринятиеКУчетуОС.бит_ДокументыПоступления КАК бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА.СрезПоследних КАК бит_му_НРП_ВНАСрезПоследних
		               |		ПО бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.ДокументПоступления = бит_му_НРП_ВНАСрезПоследних.ДокументПоступления
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
		               |				&ДатаСрезаПараметров,
		               |				Организация = &Организация
		               |					И Параметр = &Параметр) КАК бит_му_ПараметрыОССрезПоследних
		               |		ПО бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.Ссылка.бит_окей_ОсновноеСредство = бит_му_ПараметрыОССрезПоследних.ОсновноеСредство
		               |ГДЕ
		               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка"                ,Ссылка);
		Запрос.УстановитьПараметр("ПараметрСчетУчета"	  , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
		Запрос.УстановитьПараметр("Организация"           ,Организация);
		
		Результат = Запрос.Выполнить();
		
		СтруктураТаблиц.Вставить("ДокументыПоступления",Результат.Выгрузить());
	КонецЕсли;
	///БИТ Тртилек
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет шапку документа по умолчанию.
// 
// Параметры:
//  ОбъектКопирования.
// 
Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);
	
	// Заполним счет нераспределенной прибыли из учетной политики.
	Если ОбъектКопирования = Неопределено И НЕ ЗначениеЗаполнено(СчетНРП) Тогда
		СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Организация, Дата);
	КонецЕсли;
	
	// Изменения кода. Начало: 26.01.2017  {{ 
	Если ОбъектКопирования = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
			СтрКурса        = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ?(Дата = '0001-01-01', ТекущаяДатаСеанса(), Дата));
			Курс            = СтрКурса.Курс;
			Кратность       = СтрКурса.Кратность;
		КонецЕсли; 
		
	КонецЕсли;  
	// Изменения кода. Конец 26.01.2017  }} 
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Функция получает курсы валют на даты принятия к учету ОС.
// 
// Параметры:
// 	ТаблицаДанных       - ТаблицаЗначений - таблица данных по ОС.
// 	СтруктураКурсыВалют - Структура - курсы валют на дату документа.
// 
// Возвращаемое значение:
// 	Курсы - Соответствие - значения курсов на дату принятия к учету будут 
// 						   иметь аналогичную структуру как и СтруктураКурсыВалют.
// 
Функция ПолучитьСтруктуруИсторическихКурсов(ТаблицаДанных, СтруктураКурсыВалют)
	
	ТаблицаПериодов = ТаблицаДанных.Скопировать( , "ДатаПринятияКУчету");
	ТаблицаПериодов.Колонки.ДатаПринятияКУчету.Имя = "Период";
	ТаблицаПериодов.Свернуть("Период");
	
	Курсы = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, , СтруктураКурсыВалют);
	
	Возврат Курсы;
	
КонецФункции // ПолучитьСтруктуруИсторическихКурсов()

// Процедура проверят таблицу ОС на наличие уже принятых к учету ОС.
// 
// Параметры:
//  ТаблицаОС  - ТаблицаЗначений.
//  Отказ      - Булево.
//  Заголовок  - Строка.
// 
Процедура ПроверкаТаблицыОС(ТаблицаОС, Отказ)

	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл
		
		// Проверка на повторное принятие к учету.
		Если ЗначениеЗаполнено(СтрокаТаблицы.Состояние) И НЕ СтрокаТаблицы.УвеличениеСтоимостиОС Тогда
			
			ТекстСообщения = Нстр("ru = 'В строке № %1% табличной части ""Основные средства"" указано основное средство ""%2%"", принятое к учету %3%.'")
								+ Символы.ПС
								+ Нстр("ru = 'Повторное принятие к учету невозможно!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
													, СтрокаТаблицы.НомерСтроки
													, СтрокаТаблицы.ОсновноеСредство
													, Формат(СтрокаТаблицы.ДатаСостояния, "ДФ=dd.MM.yyyy"));			 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , ,Отказ);
			
		КонецЕсли;
		
		// Аренда.
		Если ВидОперации = мПереченьВидовОпераций.ПринятиеКУчетуОСВФинансовойАренде
			Или ВидОперации = мПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде Тогда
			
			// Таблица платежей по графику.
			ОшибкаГрафика = Ложь;
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДоговорКонтрагента"  , ДоговорКонтрагента);
			Запрос.УстановитьПараметр("Объект" 			    , СтрокаТаблицы.ОсновноеСредство);
			Запрос.УстановитьПараметр("ДатаНач"  			, НачалоДня(Дата));
	     	Запрос.Текст = "
			|ВЫБРАТЬ
			|	Обороты.Объект КАК Объект,
			|	СУММА(Обороты.СуммаПлатежаРеглОборот) КАК СуммаПлатежаРегл,
			|	СУММА(Обороты.СуммаПлатежаВзаиморасчетыОборот) КАК СуммаПлатежаВзаиморасчеты,
			|	Обороты.Период КАК Период
			|ИЗ
			|	РегистрНакопления.бит_му_ФинансовыеГрафики.Обороты(
			|			&ДатаНач,
			|			,
			|			Месяц,
			|			Объект = &Объект
			|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК Обороты
			|ГДЕ
			|	Обороты.Объект = &Объект
			|	И Обороты.ДоговорКонтрагента = &ДоговорКонтрагента
            |
			|СГРУППИРОВАТЬ ПО
			|	Обороты.Объект,
			|	Обороты.Период
            |
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ
			|	СУММА(СуммаПлатежаРегл),
			|	СУММА(СуммаПлатежаВзаиморасчеты)
			|ПО
			|	Объект
			|";
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				// Изменение кода. Начало. 28.02.2012{{
				
				// Проверка отключена согласно замечания №  893 от И. Берко.
				
				// ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				// ВыборкаИтоги.Следующий();
				// Если ВыборкаИтоги.СуммаПлатежаРегл <> 0 ИЛИ ВыборкаИтоги.СуммаПлатежаВзаиморасчеты <> 0 Тогда
				// 	Выборка = ВыборкаИтоги.Выбрать();
				// 	Выборка.Следующий(); 
				// 	Если (Выборка.СуммаПлатежаРегл <> 0 ИЛИ Выборка.СуммаПлатежаВзаиморасчеты <> 0)
				// 		И КонецМесяца(Выборка.Период) = КонецМесяца(Дата) Тогда
				// 		ТекстСообщения = "В строке № "
				// 						  + СтрокаТаблицы.НомерСтроки
				// 					   + " табличной части ""Основные средства"" указано основное средство """
				// 					   + СтрокаТаблицы.ОсновноеСредство
				// 					   + """ для которого месяц первого платежа совпадает с месяцем принятия к учету."
				// 					   + Символы.ПС
				// 					   + "График можно изменить в документе ""Дополнительные условия по договору"".";
				// 		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, СтатусСообщения.Важное);
				// 	КонецЕсли;			
				// КонецЕсли; 	
				
				// Изменение кода. Конец. 28.02.2012}}
			Иначе
				
				ТекстСообщения = Нстр("ru = 'В строке № %1% табличной части ""Основные средства"" указано основное средство ""%2%"", для которого не сформирован график платежей.'")
								+ Символы.ПС
								+ Нстр("ru = 'График можно заполнить в документе ""Дополнительные условия по договору"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
													, СтрокаТаблицы.НомерСтроки
													, СтрокаТаблицы.ОсновноеСредство);			 
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , ,Отказ);
			
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла; 
	
	// Проверка заполнения счетов резерва переоценки для вида операций "Ввод начальных остатков по ОС".
	Если ВидОперации = мПереченьВидовОпераций.ВводНачальныхОстатковОС Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВводОстатков.НомерСтроки,
		|	ВводОстатков.СчетРезерваПереоценки,
		|	ВводОстатков.ОстатокРезерваПереоценки
		|ИЗ
		|	Документ.бит_му_ПринятиеКУчетуОС.ОсновныеСредства КАК ВводОстатков
		|ГДЕ
		|	ВводОстатков.Ссылка = &Ссылка
		|	И ВводОстатков.ОстатокРезерваПереоценки <> 0
		|	И ВводОстатков.СчетРезерваПереоценки = ЗНАЧЕНИЕ(ПланСчетов.бит_Дополнительный_2.ПустаяСсылка)
		|";
		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = Нстр("ru = 'В строке № %1% табличной части ""Основные средства""  не заполнен счет резерва переоценки.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.НомерСтроки);			 
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , ,Отказ);
									
		КонецЦикла; 			
	
	КонецЕсли;

КонецПроцедуры // ПроверкаТаблицыОС()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют     - Структура.
//  ИсторическиеКурсы	    - Структура.
//  СтруктураТаблиц         - Структура.
//  Отказ                   - Булево.
//  Заголовок               - Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураКурсыВалют, ИсторическиеКурсы, СтруктураТаблиц, Отказ)
	
	Если Не ВидОперации = мПереченьВидовОпераций.ПринятиеКУчетуОС
		//Изюмов А.В. 02.08.12 <--- добавим исключения по созданным видам операций
		И НЕ ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС 
		И НЕ ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС
		//Изюмов А.В. 02.08.12 <---		
		И Не ВидОперации = мПереченьВидовОпераций.ВводНачальныхОстатковОС Тогда
		// Регистр сведений бит_му_ПараметрыФинИнструментов.
    	СформироватьЗаписьПоПараметрамКредитовЗаймов(СтруктураШапкиДокумента);
	КонецЕсли;
	
	// Регистр сведений бит_му_ПараметрыОС.
	КолонкиТаблицы 			= СтруктураТаблиц.ОС.Колонки;
	ТаблицаДанных  			= СтруктураТаблиц.ОС;
	
	// При формировании параметров ОС пересчитаем суммы в валюту МСФО.
	ТаблицаДанныхПересчет = ТаблицаДанных.Скопировать();
	ВыполнитьВалютныеПересчетыПараметрыОС(ТаблицаДанныхПересчет, ИсторическиеКурсы);	
	            		
	НаборЗаписейПараметры   = Движения.бит_му_ПараметрыОС;
	ВидыПараметров 			= бит_му_ВНА.ПолучитьВидыПараметров(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОсновныеСредства);
	//// Изменение кода. Начало. 14.09.2016{{
	//Если ВидОперации = мПереченьВидовОпераций.ВводНачальныхОстатковОС
	//	ИЛИ ВидОперации = мПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде Тогда
	//	Если СрокПолезногоИспользования = Перечисления.бит_му_ВидыСроковПолезногоИспользования.Первоначальный 
	//		И ВидыПараметров.Получить("СуммаНачисленнойАмортизации_ОС") <> Неопределено Тогда
	//		// Если выбран вид срока полезного использования "Первоначальный срок полезного использования"
	//		// , то при проведение документа НЕ записываем в регистр сведений "Параметры ОС (МСФО)" 
	//		// параметр "Сумма начисленной амортизации". 
	//		ВидыПараметров.Удалить("СуммаНачисленнойАмортизации_ОС");
	//    КонецЕсли;
	//КонецЕсли;
	//// Изменение кода. Конец. 14.09.2016}}
	// бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписейПараметры, СтруктураШапкиДокумента, ТаблицаДанных, ВидыПараметров, "ОС");
	бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписейПараметры, СтруктураШапкиДокумента, ТаблицаДанныхПересчет, ВидыПараметров, "ОС");
	
	//izhtc-Kir 27.10.2015 (
	МассивОбработанныхДатПринятияКУчету = Новый Массив;
	//izhtc-Kir 27.10.2015 )
	
	// Добавим параметры по историческим курсам.
	Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
		
		//izhtc-Kir 27.10.2015 (
		Если МассивОбработанныхДатПринятияКУчету.Найти(ТекущаяСтрока.ДатаПринятияКУчету) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивОбработанныхДатПринятияКУчету.Добавить(ТекущаяСтрока.ДатаПринятияКУчету);
		//izhtc-Kir 27.10.2015 )
		
		// Изменение кода. Начало. 01.02.2016{{
		Если ТекущаяСтрока.УвеличениеСтоимостиОС Тогда
			Продолжить;
		КонецЕсли;
		// Изменение кода. Конец. 01.02.2016}}
		
		КурсыНаПериод = ИсторическиеКурсы[ТекущаяСтрока.ДатаПринятияКУчету];
				
		Если КурсыНаПериод = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяВалюта Из КурсыНаПериод Цикл
			ПараметрыВалюты = ТекущаяВалюта.Значение;
			
			Для Каждого ПараметрВалюты Из ПараметрыВалюты Цикл
				Параметр = ВидыПараметров[ПараметрВалюты.Ключ+ТекущаяВалюта.Ключ+"_ОС"];
				
				Если НЕ ЗначениеЗаполнено(Параметр) Тогда
					Продолжить;
				КонецЕсли;
				
				Запись = НаборЗаписейПараметры.Добавить();
				Запись.Регистратор      = СтруктураШапкиДокумента.Ссылка;
				Запись.Период           = СтруктураШапкиДокумента.Дата;
				Запись.Организация		= СтруктураШапкиДокумента.Организация;
				Запись.ОсновноеСредство = ТекущаяСтрока.ОсновноеСредство;
				
				Запись.Параметр         = Параметр;
				Запись.ЗначениеПараметра= ПараметрВалюты.Значение;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Регистр сведений бит_му_СостоянияОС.
	НаборЗаписейСостояний   = Движения.бит_му_СостоянияОС; 
	ТаблицаЗаписейСостояний = НаборЗаписейСостояний.Выгрузить();
	ТаблицаЗаписейСостояний.Очистить();
	
	// Регистр сведений бит_му_СобытияОС.
	НаборЗаписейСобытий   = Движения.бит_му_СобытияОС; 
	ТаблицаЗаписейСобытий = НаборЗаписейСобытий.Выгрузить();
	ТаблицаЗаписейСобытий.Очистить();
	
	//Изюмов А.В. 02.08.12 <--- создаем записи в регистрах состоянияОС и событийОС
	Если  (ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС ) И ТаблицаДанных.Количество()>0 Тогда  
		
		Если ТаблицаДанных[0].УчитыватьКакОС Тогда
		// записываем состояние ПринятоКУчету
		СтрокаЗапись = ТаблицаЗаписейСостояний.Добавить();
		СтрокаЗапись.ОсновноеСредство = ТаблицаДанных[0].ОсновноеСредство;
		СтрокаЗапись.ДатаСостояния    = ТаблицаДанных[0].ДатаПринятияКУчету;
		
		// записываем событие ПринятоКУчету
		СтрокаЗапись = ТаблицаЗаписейСобытий.Добавить();
		СтрокаЗапись.ОсновноеСредство = ТаблицаДанных[0].ОсновноеСредство;
		СтрокаЗапись.Период    		  = ТаблицаДанных[0].ДатаПринятияКУчету;
		КонецЕсли;
		
	КонецЕсли;
	//Изюмов А.В. 02.08.12 <---	
	
	// Зачет аванса.
	СформироватьЗаписьЗачетАванса(СтруктураШапкиДокумента, СтруктураКурсыВалют);	
  	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Изменение кода. Начало. 01.02.2016{{
		Если СтрокаТаблицы.УвеличениеСтоимостиОС Тогда
			
			// Регистр бухгалтерии бит_му_Дополнительный_2.
			Если ВидОперации = мПереченьВидовОпераций.ПринятиеКУчетуОС Тогда
			
				// Формируем проводку по принятию к учету ОС.
				// ДТ СчетУчетаОС - КТ КорСчет  (Сумма).
				СформироватьЗаписьПоПринятиюКУчету(СтруктураШапкиДокумента, СтрокаТаблицы, ИсторическиеКурсы[СтрокаТаблицы.ДатаПринятияКУчету]);	
			
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		// Изменение кода. Конец. 01.02.2016}}
		
		Если СтрокаТаблицы.УчитыватьКакОС Тогда
						
			//Изюмов А.В. 02.08.12 <--- создаем записи в регистрах состоянияОС и событийОС
			//// Записываем состояние ПринятоКУчету.
			//СтрокаЗапись = ТаблицаЗаписейСостояний.Добавить();
			//СтрокаЗапись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			//СтрокаЗапись.ДатаСостояния    = СтрокаТаблицы.ДатаПринятияКУчету;
			//
			//// Записываем событие ПринятоКУчету.
			//СтрокаЗапись = ТаблицаЗаписейСобытий.Добавить();
			//СтрокаЗапись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			//СтрокаЗапись.Период    		  = СтрокаТаблицы.ДатаПринятияКУчету;
			Если НЕ ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС И НЕ ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС	Тогда  
				// Записываем состояние ПринятоКУчету.
				СтрокаЗапись = ТаблицаЗаписейСостояний.Добавить();
				СтрокаЗапись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
				СтрокаЗапись.ДатаСостояния    = СтрокаТаблицы.ДатаПринятияКУчету;
				
				// Записываем событие ПринятоКУчету.
				СтрокаЗапись = ТаблицаЗаписейСобытий.Добавить();
				СтрокаЗапись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
				СтрокаЗапись.Период    		  = СтрокаТаблицы.ДатаПринятияКУчету;
			КонецЕсли;
			//Изюмов А.В. 02.08.12 <---
			
			// Регистр сведений бит_му_ПараметрыОС ФинансоваяАренда_ОС = Истина.
			Если ВидОперации = мПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде
				ИЛИ ВидОперации = мПереченьВидовОпераций.ПринятиеКУчетуОСВФинансовойАренде Тогда
				Запись = НаборЗаписейПараметры.Добавить();
				Запись.Организация       = СтруктураШапкиДокумента.Организация;
				Запись.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
				Запись.Параметр          = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ФинансоваяАренда_ОС;
				Запись.ЗначениеПараметра = Истина;
				Запись.Регистратор       = СтруктураШапкиДокумента.Ссылка;
				Запись.Период            = СтруктураШапкиДокумента.Дата;
			КонецЕсли;

		КонецЕсли; 
		
	    // Регистр бухгалтерии бит_му_Дополнительный_2.
		Если ВидОперации = мПереченьВидовОпераций.ПринятиеКУчетуОС Тогда
			
			// Формируем проводку по принятию к учету ОС.
			// ДТ СчетУчетаОС - КТ КорСчет  (Сумма).
			СформироватьЗаписьПоПринятиюКУчету(СтруктураШапкиДокумента, СтрокаТаблицы, ИсторическиеКурсы[СтрокаТаблицы.ДатаПринятияКУчету]);	
			
		ИначеЕсли ВидОперации = мПереченьВидовОпераций.ВводНачальныхОстатковОС Тогда
			
			// Формируем проводку по принятию к учету ОС.
			// ДТ СчетУчетаОС - КТ КорСчет  (Сумма).
			// Изменение кода. Начало. 06.02.2014{{
			// СформироватьЗаписьПоПринятиюКУчету(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
			  СформироватьЗаписьПоПринятиюКУчету(СтруктураШапкиДокумента, СтрокаТаблицы, ИсторическиеКурсы[СтрокаТаблицы.ДатаПринятияКУчету]);
			// Изменение кода. Конец. 06.02.2014}}
			
			// Формируем проводку по остатку резерва переоценки. 
			// Дт Счет нераспределенной прибыли - Кт Счет резерва переоценки (ОстатокРезерваПереоценки).
			СформироватьЗаписьПоОстаткуРезерваПереоценки(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
			
		//Изюмов А.В. 02.08.12 <--- создадим запись на РБ Дополнительный_2 для консолидированного вида операции
		ИначеЕсли ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС	Тогда  
			
			// //Изюмов А.В. 02.08.12 <--- Регистр бухгалтерии бит_му_Дополнительный_2		
			СформироватьЗаписьПоПринятиюКУчетуКонсолидированногоОС(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют); 
			
		Иначе
			
			// Регистр бит_му_ФинансовыеНачисления.
			СформироватьНаборЗаписейПоФинансовымНачислениям(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
			СформироватьЗаписиПоФинНачислениямДляРегистраБухгалтерииМУ(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);	
			
		КонецЕсли;
		
		//Изюмов А.В. 02.08.12 <--- запись по аммортизации не создаем для консолидированных видов операций
		//// Формируем проводку по начисленной амортизации ОС.
		//// ДТ СчетНРП - КТ СчетНачисленияАмортизации СуммаНачисленнойАмортизации.
		//СформироватьЗаписьПоНачисленнойАмортизации(СтруктураШапкиДокумента, СтрокаТаблицы, ИсторическиеКурсы[СтрокаТаблицы.ДатаПринятияКУчету]);		
		Если НЕ ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС И НЕ ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС	Тогда  
			// Формируем проводку по начисленной амортизации ОС.
			// ДТ СчетНРП - КТ СчетНачисленияАмортизации СуммаНачисленнойАмортизации.
			СформироватьЗаписьПоНачисленнойАмортизации(СтруктураШапкиДокумента, СтрокаТаблицы, ИсторическиеКурсы[СтрокаТаблицы.ДатаПринятияКУчету]);
		КонецЕсли;
		//Изюмов А.В. 02.08.12 <---		
		       			
	КонецЦикла; // По строкам табличной части.
	
	//Изюмов А.В. 02.08.12 <--- создадим записи по начислению аммортизации для консолидированных видов операций
	Если (ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС ) И ТаблицаДанных.Количество()>0 Тогда  
		СтрокаТаблицы = ТаблицаДанных[0];
		СформироватьЗаписьПоНачисленнойАмортизации(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
	КонецЕсли;
	//Изюмов А.В. 02.08.12 <---
	
	// Дозаполним реквизиты таблицы записей регистра Состояний.
	ТаблицаЗаписейСостояний.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация		   , "Организация");
	ТаблицаЗаписейСостояний.ЗаполнитьЗначения(Перечисления.бит_му_СостоянияОС.ПринятоКУчету, "Состояние");
	ТаблицаЗаписейСостояний.ЗаполнитьЗначения(Истина                        			   , "Активность");	
	НаборЗаписейСостояний.Загрузить(ТаблицаЗаписейСостояний); 
	
	// Дозаполним реквизиты таблицы записей регистра Событий.
	ТаблицаЗаписейСобытий.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация		     , "Организация");
	ТаблицаЗаписейСобытий.ЗаполнитьЗначения(Перечисления.бит_му_СобытияОС.ПринятиеКУчету , "Событие");
	ТаблицаЗаписейСобытий.ЗаполнитьЗначения(Истина                        			     , "Активность");	
	НаборЗаписейСобытий.Загрузить(ТаблицаЗаписейСобытий); 
	
	// Регистр накопления бит_му_КомплектацияОС  //Изюмов А.В. 02.08.12 <--- в случае консолидированного вида операции создадим движения по регистру комплектации
	Если ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС Тогда 
		
		ТаблицаДанныхбит_му_КомплектацияОС = ТаблицаДанных.Скопировать(,"ОС,СоставОС,СчетРСБУ,АналитикаРСБУ,Сумма,ДокументРСБУ,Организация");
		ТаблицаДанныхбит_му_КомплектацияОС.Колонки.Добавить("Активность");
		
		Если ТаблицаДанныхбит_му_КомплектацияОС.Количество() > 0 Тогда
			Движения.бит_му_КомплектацияОС.мПериод          = СтруктураШапкиДокумента.Дата;
			Движения.бит_му_КомплектацияОС.мТаблицаДвижений = ТаблицаДанныхбит_му_КомплектацияОС;
			Движения.бит_му_КомплектацияОС.ДобавитьДвижение();
		КонецЕсли; 
		
	КонецЕсли; // Регистр накопления бит_му_КомплектацияОС  //Изюмов А.В. 02.08.12 <---    
	
	// БИТ Тртилек 23082013 заполним РС НРП ВНА
	
	//очистим имеющиеся записи
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС Тогда
		НаборЗаписейНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьНаборЗаписей();
		НаборЗаписейНРПВНА.Отбор.мРегистратор.Установить(СтруктураШапкиДокумента.Ссылка);
		НаборЗаписейНРПВНА.Записать();
		
		Для Каждого СтрокаТаблицы ИЗ СтруктураТаблиц.ДокументыПоступления Цикл
			
			СформироватьЗаписьНРПВНА(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Перечисления.бит_ВидДвиженияНакопления.Приход, СтруктураТаблиц.ОС[0]);	
			СформироватьЗаписьНРПВНА(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Перечисления.бит_ВидДвиженияНакопления.Расход, СтруктураТаблиц.ОС[0]);	
			
		КонецЦикла;
	КонецЕсли;
	///БИТ Тртилек
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ВыполнитьВалютныеПересчетыПараметрыОС(ТаблицаДанных, ИсторическиеКурсы) 
	
	МассивИменДляПересчета = Новый Массив;
	МассивИменДляПересчета.Добавить("ЛиквидационнаяСтоимость");
	МассивИменДляПересчета.Добавить("ПервоначальнаяСтоимость");
	МассивИменДляПересчета.Добавить("СуммаНачисленнойАмортизации");
	
	ЭтоПринятиеКУчетуОС = Истина;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		КурсыНаПериод = ИсторическиеКурсы[СтрокаТаблицы.ДатаПринятияКУчету];
		
		КурсыНаПериодДокумент = КурсыНаПериод["Документ"];
		КурсыНаПериодМУ = КурсыНаПериод["МУ"];

		
		Для каждого Имя Из МассивИменДляПересчета Цикл
			
				СтрокаТаблицы[Имя] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[Имя]
																			,КурсыНаПериодДокумент.Валюта
																			,КурсыНаПериодМУ.Валюта
																			,КурсыНаПериодДокумент.Курс
																			,КурсыНаПериодМУ.Курс
																			,КурсыНаПериодДокумент.Кратность
																			,КурсыНаПериодМУ.Кратность);
			
		КонецЦикла; 


		// бит_КурсыВалют.ВыполнитьВалютныеПересчетыВНА(МассивИменДляПересчета, СтрокаТаблицы
		// , КурсыНаПериод, ЭтоПринятиеКУчетуОС);
		
	КонецЦикла; 
		
КонецПроцедуры

// Процедура формирует проводку по принятию к учету ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СформироватьЗаписьПоПринятиюКУчету(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)

		Запись = Движения.бит_Дополнительный_2.Добавить();

		СтруктураПараметров = Новый Структура("Организация, Период, Валюта, СчетДт, СчетКт, Сумма, Количество, Содержание"
											   , СтруктураШапкиДокумента.Организация
											   , СтруктураШапкиДокумента.Дата
											   // , мВалютаМеждУчета
											   , СтруктураКурсыВалют.Документ.Валюта
											   , СтрокаТаблицы.СчетУчета
											   , СтрокаТаблицы.КорСчет
											   , СтрокаТаблицы.Сумма
											   , 1
											   , "Принятие к учету ОС");
											   
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			
		// Заполнение аналитик.	
		бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись, СтрокаТаблицы, "Субконто", "КорСубконто", мКоличествоСубконтоМУ);
		
		// Валютные пересчеты.
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Сумма");
		
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("СуммаВзаиморасчеты");
		
		бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтрокаТаблицы
														, Запись
														, МассивИмен
														, СтруктураКурсыВалют
														, СтруктураКурсыВалют.Документ
														, МассивИсключений);


КонецПроцедуры // СформироватьЗаписьПоПринятиюКУчету()

// Процедура формирует проводку по остатку резерва переоценки.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СформироватьЗаписьПоОстаткуРезерваПереоценки(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)

	Если СтрокаТаблицы.ОстатокРезерваПереоценки = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	// Дт Счет нераспределенной прибыли - Кт Счет резерва переоценки (ОстатокРезерваПереоценки).
	
	Запись = Движения.бит_Дополнительный_2.Добавить();

	СтруктураПараметров = Новый Структура("Организация, Период, Валюта, СчетДт, СчетКт, Сумма, Содержание"
										   , СтруктураШапкиДокумента.Организация
										   , СтруктураШапкиДокумента.Дата
										   // , мВалютаМеждУчета
										   , СтруктураКурсыВалют.Документ.Валюта
										   , СтруктураШапкиДокумента.СчетНРП
										   , СтрокаТаблицы.СчетРезерваПереоценки
										   , СтрокаТаблицы.ОстатокРезерваПереоценки
										   , "Резерв переоценки");
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
		
	// Заполнение аналитик.	
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись, СтрокаТаблицы, "Субконто", "Субконто", мКоличествоСубконтоМУ);
	
	// Валютные пересчеты.
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаВзаиморасчеты");
	
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													, Запись
													, МассивИмен
													, СтруктураКурсыВалют
													, СтруктураКурсыВалют.Документ
													, МассивИсключений);	

КонецПроцедуры // СформироватьЗаписьПоОстаткуРезерваПереоценки()

// Процедура формирует проводку по начисленной амортизации.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СформироватьЗаписьПоНачисленнойАмортизации(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)

	    Если СтрокаТаблицы.СуммаНачисленнойАмортизации = 0 Тогда
		
			Возврат;
		
		КонецЕсли; 
	
		Запись = Движения.бит_Дополнительный_2.Добавить();

		СтруктураПараметров = Новый Структура("Организация, Период, Валюта, СчетДт, СчетКт, Сумма, Содержание"
											   , СтруктураШапкиДокумента.Организация
											   , СтруктураШапкиДокумента.Дата
											   // , мВалютаМеждУчета
											   , СтруктураКурсыВалют.Документ.Валюта
											   , СтруктураШапкиДокумента.СчетНРП
											   , СтрокаТаблицы.СчетНачисленияАмортизации
											   , СтрокаТаблицы.СуммаНачисленнойАмортизации
											   , "Начисленная амортизация");
											   
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			
		//Изюмов А.В. 02.08.12 <--- в случае консолидированного вида операции установим в записи значение объекта и основного средства
		//// Заполнение аналитик.	
		//бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);				
		Если СтруктураШапкиДокумента.ВидОперации = мПереченьВидовОпераций.бит_окей_ПринятиеКУчетуКонсолидированногоОС 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = мПереченьВидовОпераций.бит_окей_ВводВачальныхОстатковКонсолидированногоОС  Тогда
			// Заполнение аналитик.
		    бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);		
			// Заполнение аналитик.
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"Объект",СтрокаТаблицы.Объект);		
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = мПереченьВидовОпераций.ВводНачальныхОстатковОС  Тогда 
			// Заполнение аналитик.	
		    бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);		
			// Заполнение аналитик.
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"Объект",СтрокаТаблицы.Субконто2);		
		Иначе	
			// Заполнение аналитик.
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"ОсновныеСредства",СтрокаТаблицы.ОсновноеСредство);		
		КонецЕсли;
		//Изюмов А.В. 02.08.12 <---
		
		// Валютные пересчеты.
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Сумма");
		
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("СуммаВзаиморасчеты");
		
		бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
														, Запись
														, МассивИмен
														, СтруктураКурсыВалют
														, СтруктураКурсыВалют.Документ
														, МассивИсключений);


КонецПроцедуры // СформироватьЗаписьПоНачисленнойАмортизации()

// Процедура формирует проводки по регистру сведений бит_му_ПараметрыФинИнструментов.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
Процедура СформироватьЗаписьПоПараметрамКредитовЗаймов(СтруктураШапкиДокумента)
	
	НаборПараметровКЗ = Движения.бит_му_ПараметрыФинИнструментов;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СчетДолгосрочныхОбязательств",  СчетУчетаДолгосрочный);
	СтруктураПараметров.Вставить("СчетКраткосрочныхОбязательств", СчетУчетаКраткосрочный);
	СтруктураПараметров.Вставить("СчетДолгосрочныхПроцентов",     СчетУчетаПроцентовДолгосрочный);
	СтруктураПараметров.Вставить("СчетКраткосрочныхПроцентов",    СчетУчетаПроцентовКраткосрочный);
	СтруктураПараметров.Вставить("СчетУчетаАванса",               СчетУчетаАванса);
	СтруктураПараметров.Вставить("СпособРасчетаЭСП",              СтруктураШапкиДокумента.СпособРасчетаЭСП);
	СтруктураПараметров.Вставить("ВариантРасчетаПроцентов",       ВариантРасчетаФинансовыхПроцентов);
	СтруктураПараметров.Вставить("СпособПолученияСтавки",         СпособПолученияСтавки);
	
	Если СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		СтруктураПараметров.Вставить("НоминальнаяСтавка", СтруктураШапкиДокумента.НоминальнаяСтавка); 
	Иначе
		СтруктураПараметров.Вставить("ЭффективнаяСтавка", СтруктураШапкиДокумента.ЭффективнаяСтавка); 
	КонецЕсли; 									
										
	бит_му_ФинИнструменты.ЗаписатьПараметры(НаборПараметровКЗ, СтруктураШапкиДокумента, СтруктураПараметров);
	
КонецПроцедуры // СформироватьЗаписьПоПараметрамКредитовЗаймов()

// Процедура формирует проводки по финансовым начислениям.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СформироватьНаборЗаписейПоФинансовымНачислениям(СтруктураШапкиДокумента, СтрокаТабЧасти, СтруктураКурсыВалют)
	
	// Первоначальная стоимость.
	Если ВидОперации = мПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде Тогда
		Стоимость              = СтрокаТабЧасти.СуммаЗадолженности;
		СтоимостьВзаиморасчеты = бит_КурсыВалют.ПересчитатьДокВзаиморасчеты(Стоимость,СтруктураКурсыВалют);
	Иначе
		Стоимость              = СтрокаТабЧасти.Сумма - СтрокаТабЧасти.СуммаАванса;
		СтоимостьВзаиморасчеты = СтрокаТабЧасти.СуммаВВалюте - СтрокаТабЧасти.СуммаАвансаВВалюте;
	КонецЕсли;
  
	// Набор записей регистра бит_му_ФинансовыеНачисления.
	НаборЗаписей = Движения.бит_му_ФинансовыеНачисления;
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	
	Если СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		ВидСтавки = Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.НоминальнаяСтавкаПроцента;
	Иначе
		ВидСтавки = Перечисления.бит_му_ВидыСтавокФинансовыхПроцентов.ЭффективнаяСтавкаПроцента;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата"                     , СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Организация"              , СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Контрагент"               , СтруктураШапкиДокумента.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"       , СтруктураШапкиДокумента.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Объект"                   , СтрокаТабЧасти.ОсновноеСредство);
	СтруктураПараметров.Вставить("ВариантРасчетаПроцентов"  , ВариантРасчетаФинансовыхПроцентов);
	СтруктураПараметров.Вставить("ВидСтавки"                , ВидСтавки);
	СтруктураПараметров.Вставить("ВидИсточникаЗадолженности", Перечисления.бит_му_ВидыИсточниковЗадолженности.ОсновныеСредства);	
	СтруктураПараметров.Вставить("Стоимость"                , Стоимость);
	СтруктураПараметров.Вставить("СтоимостьВзаиморасчеты"   , СтоимостьВзаиморасчеты);
	СтруктураПараметров.Вставить("СпособРасчетаЭСП"         , СтруктураШапкиДокумента.СпособРасчетаЭСП);
	
	Если СтруктураШапкиДокумента.СпособРасчетаЭСП = Перечисления.бит_му_СпособыРасчетаЭСП.ПоДням Тогда
		СтруктураПараметров.Вставить("Периодичность", "День");	
		СтруктураПараметров.Вставить("Ставка", СтрокаТабЧасти.ЭСП);
	ИначеЕсли СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		СтруктураПараметров.Вставить("Ставка", СтрокаТабЧасти.ЭСП/12);
	Иначе
		СтруктураПараметров.Вставить("Ставка", СтрокаТабЧасти.ЭСП);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводОстатковОСВФинансовойАренде Тогда	
		СтруктураПараметров.Вставить("ЭтоВводОстатоковАрендаОС", Истина);	
	КонецЕсли; 
	
	бит_му_ОбщегоНазначения.СформироватьТаблицуФинансовыхНачислений(ТаблицаДвижений
																	 , СтруктураПараметров
																	 , СтруктураКурсыВалют);
																		
	// Запись проводок в регистр.
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;														
	НаборЗаписей.ДобавитьДвижение();

	ТаблицаДвижений.Очистить();
	
КонецПроцедуры // СформироватьНаборЗаписейПоФинансовымНачислениям()

// Функция расчитывает сумму аванса для целей бухгалтерских проводок по зачету аванса.
// 
// Возвращаемое значение:
//   Число.
// 
Функция ПолучитьСуммуАванасаДляЦелейБухгалтерскихПроводок()
	
	Результат = 0;
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);
    
    СвСчАванса = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчетаАванса);
          
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет"	   		  , СчетУчетаАванса);
	Запрос.УстановитьПараметр("Дата"	   		  , КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация"		  , Организация);
	Запрос.УстановитьПараметр("Контрагент"		  , Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("МассивСубконто"	  , МассивСубконто);
	Запрос.УстановитьПараметр("ПараметрСтавка"    , ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СтавкаНДСПоДоговору);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОстаткиМУ.Субконто1 КАК Контрагент,
	|	ОстаткиМУ.Субконто2 КАК ДоговорКонтрагента,
	|	ОстаткиМУ.ВалютнаяСуммаОстаток,
	|	ОстаткиМУ.СуммаМУОстаток,
	|	ПараметрСтавка.ЗначениеПараметра КАК СтавкаНДС
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|			&Дата,
	|			Счет = &Счет,
	|			&МассивСубконто,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &ДоговорКонтрагента) КАК ОстаткиМУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(
	|				,
	|				ДоговорКонтрагента = &ДоговорКонтрагента
	|					И Параметр = &ПараметрСтавка) КАК ПараметрСтавка
	|		ПО ОстаткиМУ.Субконто2 = ПараметрСтавка.ДоговорКонтрагента
	|";

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если СвСчАванса.Валютный Тогда
				Результат = Выборка.ВалютнаяСуммаОстаток;
			Иначе
				Результат = Выборка.СуммаМУОстаток;
			КонецЕсли;
			
			// Необходимо исключить НДС из аванса.
			// Ставка НДС по договору предполагается всегда единой, НДС в сумме.
			СтавкаНДС = ?(ЗначениеЗаполнено(Выборка.СтавкаНДС), Выборка.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
			
			СуммаНДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(Результат
			        								   , Истина
			        								   , Истина
			        								   , бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтавкаНДС));
													   
			Результат = Результат - СуммаНДС;										   
			
		КонецЦикла;
		
	КонецЕсли;  
	
	Возврат Результат;

КонецФункции // ПолучитьСуммуАванасаДляЦелейБухгалтерскихПроводок()

// Функция расчитывает сумму погашения за год.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтруктураКурсыВалют		 - Структура.
//  СтрокаТаблицы  			 - СтрокаТабличнойЧасти.
//  
// Возвращаемое значение:
//   Число.
// 
Функция ПолучитьСуммуПогашения(СтруктураШапкиДокумента, СтруктураКурсыВалют, СтрокаТаблицы)
	
	ДвиженияФинНач = Движения.бит_му_ФинансовыеНачисления;

	// Возвращаем сумму в валюте взаиморасчетов.
	// ТаблицаДвиженийФинНач = ДвиженияФинНач.Выгрузить(, "РасходДоход, Период, СуммаВзаиморасчеты, Объект");
	ТаблицаДвиженийФинНач = ДвиженияФинНач.Выгрузить(, "РасходДоход, Период, Объект, СуммаПлатежаВзаиморасчеты, ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчеты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расход"			  , Перечисления.бит_РасходДоход.Расходование);
	Запрос.УстановитьПараметр("ДвиженияФинНач"	  , ТаблицаДвиженийФинНач);
	Запрос.УстановитьПараметр("ДатаЧерезГод"	  , КонецМесяца(ДобавитьМесяц(СтруктураШапкиДокумента.Дата, 11)));
	Запрос.УстановитьПараметр("КонецМесяца"       , КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация"		  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Объект"			  , СтрокаТаблицы.ОсновноеСредство);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Обороты.Период КАК Период,
	|	ЕСТЬNULL(Обороты.СуммаПлатежаВзаиморасчеты, 0) - ЕСТЬNULL(Обороты.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчеты, 0) КАК СуммаВзаиморасчеты
	|ПОМЕСТИТЬ ТаблицаФинНач
	|ИЗ
	|	&ДвиженияФинНач КАК Обороты
	|ГДЕ
	|	Обороты.Период <= &ДатаЧерезГод
	|	И Обороты.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФинНач.СуммаВзаиморасчеты КАК СуммаВзаиморасчеты
	|ИЗ
	|	ТаблицаФинНач КАК ТаблицаФинНач
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчеты)
	|ПО
	|	ОБЩИЕ
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда	
		СуммаПогашения = Выборка.СуммаВзаиморасчеты;   	
	Иначе	    	
		СуммаПогашения = 0;     	
	КонецЕсли;
	
	Возврат СуммаПогашения;
	
КонецФункции // ПолучитьСуммуПогашения()

// Процедура формирует движение по регистру бухгалтерии МУ.
// 
// Параметры:
//  СтруктураПараметров		 - Структура.
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура ДвижениеПоРегиструМУ(СтруктураПараметров, СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, СтруктураВалютыБаза)
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);
	
	// Заполним аналитику счета Дт и Кт.
	УстановитьСубконто("Дт", Запись, СтрокаТаблицы, СтруктураШапкиДокумента);
	УстановитьСубконто("Кт", Запись, СтрокаТаблицы, СтруктураШапкиДокумента);												   
	
	// Выполним валютные пересчеты.
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("СуммаВзаиморасчеты");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
												   , Запись
												   , МассивИмен
												   , СтруктураКурсыВалют
												   , СтруктураВалютыБаза
												   , МассивИсключений);
		
КонецПроцедуры

// Процедура устанавливает субконто Дт для счета.
// 
// Параметры:
//  ДтКт  	  				- Строка.
//  Запись    				- Запись регистра бухгалтерии.
//  ТекСтрока 				- СтрокаТаблицыЗначений.
//  СтруктураШапкиДокумента - Структура.
// 
Процедура УстановитьСубконто(ДтКт, Запись, ТекСтрока, СтруктураШапкиДокумента)

	Счет 	 = Запись["Счет" 	 + ДтКт];
	Субконто = Запись["Субконто" + ДтКт];
		
	бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто , "Контрагенты" ,          СтруктураШапкиДокумента.Контрагент);	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто , "ДоговорыКонтрагентов" , СтруктураШапкиДокумента.ДоговорКонтрагента);		
    бит_му_ОбщегоНазначения.УстановитьСубконто(Счет, Субконто , "ОсновныеСредства" ,     ТекСтрока.ОсновноеСредство);
	
КонецПроцедуры // УстановитьСубконто()
 
// Процедура формирует проводки по финансовым начислениям для регистров бухгалтерии.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТабличнойЧасти.
//  СтруктураКурсыВалют      - Структура.
// 
Процедура СформироватьЗаписиПоФинНачислениямДляРегистраБухгалтерииМУ(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)

	СтруктураПараметров = Документы.бит_му_ПринятиеКУчетуОС.ПодготовитьСтруктуруПараметровМСФО();
	
	СтруктураПараметров.Организация = СтруктураШапкиДокумента.Организация;
	СтруктураПараметров.Период      = СтруктураШапкиДокумента.Дата;
	СтруктураПараметров.Валюта      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	// 1. Признано ОС (и обязательство по аренде для принятия к учету).
	// Принятие к учету: Дт Счет учета ОС Кт Счет обязательства долгосрочный (Сумма по ОС из табличной части). 
	// ВоодОстатков:	 Дт Счет учета ОС Кт Вспомогательный счет 			(Сумма по ОС из табличной части).
	СтруктураПараметров.СчетДт  = СтрокаТаблицы.СчетУчета;
	СтруктураПараметров.Сумма   = СтрокаТаблицы.СуммаВВалюте;
										 
	Если ВидОперации = мПереченьВидовОпераций.ПринятиеКУчетуОСВФинансовойАренде Тогда
		СтруктураПараметров.СчетКт	   = СчетУчетаДолгосрочный;
		СтруктураПараметров.Содержание = НСтр("ru = 'Признано ОС и обязательство по аренде'");
	Иначе
		СтруктураПараметров.СчетКт     = ВспомогательныйСчет;
		СтруктураПараметров.Содержание = НСтр("ru = 'Признано ОС'");
	КонецЕсли;
	
	ДвижениеПоРегиструМУ(СтруктураПараметров, СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, СтруктураКурсыВалют.Взаиморасчеты);
	
	// 2. Признано обязательство по аренде для ввода остатков.
	// Дт Вспомогательный счет Кт Счет обязательства долгосрочный (Сумма обязательства по ОС).
	Если ВидОперации = мПереченьВидовОпераций.ВводОстатковОСВФинансовойАренде Тогда
		СтруктураПараметров.СчетДт     = ВспомогательныйСчет;
		СтруктураПараметров.СчетКт     = СчетУчетаДолгосрочный;
		СтруктураПараметров.Сумма      = СтрокаТаблицы.СуммаЗадолженностиВВалюте; 
		СтруктураПараметров.Содержание = НСтр("ru = 'Признано обязательство по аренде'");
		ДвижениеПоРегиструМУ(СтруктураПараметров, СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, СтруктураКурсыВалют.Взаиморасчеты);
    КонецЕсли;
	
	// 3. Реклассификация задолженности.
	// Дт Счет обязательства долгосрочный Кт Счет обязательства краткосрочный. 
	// (Сумма рекласса по графику = Сумма долгосрочной задолженности по счету - 
	// - Сумма погашения основного долга по графику до конца графика после 12 месяцев ).
	СуммаПогашения = ПолучитьСуммуПогашения(СтруктураШапкиДокумента, СтруктураКурсыВалют, СтрокаТаблицы);
	Если СуммаПогашения > 0 Тогда
		СтруктураПараметров.СчетДт  = СчетУчетаДолгосрочный;
		СтруктураПараметров.СчетКт  = СчетУчетаКраткосрочный;
		СтруктураПараметров.Сумма   = СуммаПогашения;
		СтруктураПараметров.Содержание = НСтр("ru = 'Реклассификация задолженности'");
		ДвижениеПоРегиструМУ(СтруктураПараметров, СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, СтруктураКурсыВалют.Взаиморасчеты);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура формирует запись по зачету аванса.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют     - Структура.
// 
Процедура СформироватьЗаписьЗачетАванса(СтруктураШапкиДокумента, СтруктураКурсыВалют)
	
	// 4. Зачет аванса для принятия к учету. 
	// Дт Счет обязательства краткосрочный  Кт Счет аванса (Сумма аванса по ОС из табличной части). 
	СуммаАвансаДляЦелейБухгалтерскихПроводок = ПолучитьСуммуАванасаДляЦелейБухгалтерскихПроводок();
	Если ВидОперации = мПереченьВидовОпераций.ПринятиеКУчетуОСВФинансовойАренде
		И СуммаАвансаДляЦелейБухгалтерскихПроводок <> 0 Тогда
		
		СтруктураЗначений = Документы.бит_му_ПринятиеКУчетуОС.ПолучитьСреднийКурсАвансаИВалютуДоговора(Организация,
	                                                                                                     Контрагент,
																										 ДоговорКонтрагента,
																										 ВалютаДокумента, 
																										 Дата,
																										 СчетУчетаАванса);
																									 
		СреднийКурсАвансаМУ   = СтруктураЗначений.СреднийКурсАвансаМУ;	
		СреднийКурсАвансаРегл = СтруктураЗначений.СреднийКурсАвансаРегл;	
		СреднийКурсАвансаУпр  = СтруктураЗначений.СреднийКурсАвансаУпр;	
		
		Запись = Движения.бит_Дополнительный_2.Добавить();		
		
	    СтруктураПараметров = Новый Структура("Организация, Период, Валюта"
										 , СтруктураШапкиДокумента.Организация
										 , СтруктураШапкиДокумента.Дата
										 , СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов);
		
		
		СтруктураПараметров.Вставить("СчетДт", СтруктураШапкиДокумента.СчетУчетаДолгосрочный);
		СтруктураПараметров.Вставить("СчетКт", СтруктураШапкиДокумента.СчетУчетаАванса);
		СтруктураПараметров.Вставить("Сумма" , СуммаАвансаДляЦелейБухгалтерскихПроводок);
		
		СтруктураПараметров.Вставить("Содержание", "Зачет аванса");
		
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			
		// Заполнение аналитик.	
	    бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт, "Контрагенты"		  , СтруктураШапкиДокумента.Контрагент);		
	    бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);	
	    бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт, "Контрагенты"		  , СтруктураШапкиДокумента.Контрагент);		
	    бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);		
		
		Запись.СуммаМу   = СтруктураПараметров.Сумма * СреднийКурсАвансаМУ;		
		Запись.СуммаРегл = СтруктураПараметров.Сумма * СреднийКурсАвансаРегл;
		Запись.СуммаУпр  = СтруктураПараметров.Сумма * СреднийКурсАвансаУпр;
		 
	КонецЕсли;

КонецПроцедуры // СформироватьЗаписьЗачетАванса()

#КонецОбласти

// БИТ Тртилек 23082013 Процедура формирует проводку по НРП ВНА
//
// Параметры:
//  СтруктураШапкиДокумента  – Структура
//  СтрокаТаблицы            - СтрокаТабличнойЧасти
//  СтруктураКурсыВалют      - Структура
//
Процедура СформироватьЗаписьНРПВНА(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, ВидДвижения, СтрокаОС)

	Приход = ВидДвижения = Перечисления.бит_ВидДвиженияНакопления.Приход;
	
	СтруктураПараметров = Новый Структура("ИсточникЗаписи,ПриходРасход, Период, ОрганизацияЗаказчик,ОрганизацияПодрядчик,ДокументРеализации, ДокументПоступления, СуммаБезНДС, СчетВыручки, СчетУчетаАктива, Ответственный, ЭлиминирующиеПроводки"
											,Перечисления.бит_му_ИсточникЗаписи_НРП_ВНА.ПроведениеДокументаПоУчетуОСМСФО    						//источник записи
											,ВидДвижения                                                                   							//приход/расход
											,СтруктураШапкиДокумента.Дата 												    						//период
											,?(Приход, СтрокаТаблицы.рОрганизацияЗаказчик ,СтруктураШапкиДокумента.Организация)                     //организация заказчик
											,СтрокаТаблицы.рОрганизацияПодрядчик     																//организация подрядчик
											,СтрокаТаблицы.рДокументРеализации  					                        						//документ реализации 
											,?(Приход, СтруктураШапкиДокумента.Ссылка ,СтрокаТаблицы.рДокументПоступления)							//документ поступления
											,СтрокаТаблицы.рСуммаБезНДС                                                     						//сумма без НДС
											,СтрокаТаблицы.рСчетВыручки                                                     						//счет выручки
											,?(Приход, СтрокаОС.СчетУчета, СтрокаТаблицы.рСчетУчетаАктива)             								//счет учета актива
											,ПараметрыСеанса.ТекущийПользователь                                            						//ответственный
											,СтрокаТаблицы.рЭлиминирующиеПроводки);													 				    						//элиминирующиепроводки								
	
	НоваяЗаписьНРПВНА = РегистрыСведений.бит_му_НРП_ВНА.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(НоваяЗаписьНРПВНА, СтруктураПараметров);
	
	НоваяЗаписьНРПВНА.мРегистратор = СтруктураШапкиДокумента.Ссылка;
	
	Если Приход Тогда
		//срок полезного использования
		НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаОС.СрокПолезногоИспользования;
		
		//дата ввода в экслуатацию
		НоваяЗаписьНРПВНА.ДатаВвода = СтрокаОС.ДатаПринятияКУчету;
		
		//счет учета амортизации
		НоваяЗаписьНРПВНА.СчетНакопленнойАмортизации = СтрокаОС.СчетНачисленияАмортизации;
		
		//счет расхода по амортизации
		НоваяЗаписьНРПВНА.СчетРасходаПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизации.ОсновнойСчетЗатрат;
	КонецЕсли;
	
	//заполним субконто
	Для Ном = 1 По 4 Цикл
		//субконто счета выручки
		Если ЗначениеЗаполнено(СтрокаТаблицы["рСубконто" + Ном + "СчетаВыручки"]) Тогда
			НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаВыручки"] = СтрокаТаблицы["рСубконто" + Ном + "СчетаВыручки"];
		КонецЕсли;
		
		//субконто счета учета актива
		Если Приход Тогда
			Если ЗначениеЗаполнено(СтрокаОС["Субконто" + Ном]) Тогда
				НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = СтрокаОС["Субконто" + Ном];
			КонецЕсли;
			//Если ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизации["ОсновнойСубконто" + Ном]) Тогда
			//	НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаРасходаПоАмортизации"] = СтрокаОС.СпособОтраженияРасходовПоАмортизации["ОсновнойСубконто" + Ном];
			//КонецЕсли;
		Иначе
			НоваяЗаписьНРПВНА["Субконто" + Ном + "СчетаУчетаАктива"] = СтрокаТаблицы["рСубконто" + Ном + "СчетаУчетаАктива"];
		КонецЕсли;	 
		
	КонецЦикла;
	
	Если Приход Тогда
		НоваяЗаписьНРПВНА.Субконто1СчетаНакопленнойАмортизации = СтрокаОС.ОС;
		НоваяЗаписьНРПВНА.Субконто2СчетаНакопленнойАмортизации = СтрокаОС.Объект;
		НоваяЗаписьНРПВНА.ОставшийсяСПИ = СтрокаОС.СрокПолезногоИспользования;
	КонецЕсли;
	
		
	НоваяЗаписьНРПВНА.Записать();

КонецПроцедуры //СформироватьЗаписьПоПринятиюКУчету()

// Процедура заполняет класс по умолчанию.
//
// Параметры:
//  ТекущаяСтрока  - СтрокаТабличнойЧасти.ОсновныеСредства
//
Процедура бит_окей_ЗаполнитьКлассПоУмолчанию(ФормаДок) Экспорт

	
	Если ЗначениеЗаполнено(бит_окей_ОсновноеСредство) Тогда//И НЕ ЗначениеЗаполнено(бит_окей_КлассОС) Тогда
		
		 // определяем класс по группе ОС и организации
	     бит_окей_КлассОС = бит_окей_ОсновноеСредство.БИТ_ГруппаОСУУ;
		 Если ЗначениеЗаполнено(бит_окей_КлассОС) Тогда
		    бит_окей_ИзменениеКлассаМодуль(ФормаДок);
		 КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьКлассПоУмолчанию()

Процедура бит_окей_ИзменениеКлассаМодуль(ФормаДок,ИзмененСчет = Ложь) Экспорт


   Если НЕ ЗначениеЗаполнено(бит_окей_КлассОС) Тогда
   
   	  Возврат;
   
   КонецЕсли; 
   
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("Класс"      ,бит_окей_КлассОС);
	ПараметрыКласса = ПолучитьПараметрыКлассаВНА(СтруктураПараметров);
	
	МетаданныеОбъекта = Метаданные();
	
	Для каждого КиЗ Из ПараметрыКласса Цикл
		
		ИмяЭлемента = КиЗ.Ключ;
		
		Если ОбщегоНазначенияБПВызовСервера.ЕстьРеквизитДокумента(ИмяЭлемента,МетаданныеОбъекта) Тогда
			
			ЭтотОбъект[ИмяЭлемента] = КиЗ.Значение;
			
			Если ИмяЭлемента = "бит_окей_СчетУчета" Тогда
				
				ИзмененСчет = Истина;
				
				//УстановкаСубконто(КиЗ.Значение,бит_окей_Субконто1,бит_окей_Субконто2,бит_окей_Субконто3);
                УстановкаСубконто(КиЗ.Значение,
				бит_окей_Субконто1, ФормаДок.Элементы.бит_окей_Субконто1,
				бит_окей_Субконто2, ФормаДок.Элементы.бит_окей_Субконто2,
				бит_окей_Субконто3, ФормаДок.Элементы.бит_окей_Субконто3);

				
			КонецЕсли; 
			
		КонецЕсли;  // есть реквизит ТЧ
		
	КонецЦикла; // по параметрам класса
	

КонецПроцедуры // ИзменениеКласса()

//Функция получает параметры класса основных средств и нематериальных активов
//
// Параметры:
//  СтруктураПараметров - Структура - Ключи: "Организация","Класс"
//
// Возвращаемое значение:
//  РезСтруктура   – Структура
//
Функция ПолучитьПараметрыКлассаВНА(СтруктураПараметров) Экспорт

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("бит_окей_СчетУчета"                 ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("бит_окей_СчетНачисленнойАмортизации",ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("бит_окей_СрокПолезногоИспользования",0);
	РезСтруктура.Вставить("бит_окей_СчетРезерваПереоценки"     ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("бит_окей_СчетСниженияСтоимости"     ,ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	РезСтруктура.Вставить("бит_окей_СпособОтраженияРасходовПоАмортизации"     ,Справочники.бит_му_СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка());
	РезСтруктура.Вставить("бит_окей_МетодНачисленияАмортизации"     ,Перечисления.бит_му_МетодыНачисленияАмортизации.ПустаяСсылка());
	РезСтруктура.Вставить("бит_окей_НачислятьАмортизацию"     ,Ложь);

	Запрос = Новый Запрос;
	
	Организация  = бит_ОбщегоНазначения.ПолучитьЗначениеИзСтруктуры(СтруктураПараметров,"Организация");
	Класс        = бит_ОбщегоНазначения.ПолучитьЗначениеИзСтруктуры(СтруктураПараметров,"Класс");
	
	Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКласс"      ,Справочники.бит_му_КлассыОсновныхСредств.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация"      ,Организация);
	Запрос.УстановитьПараметр("Класс"            ,Класс);
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыКлассовВНА.МодельУчета,
	               |	ПараметрыКлассовВНА.СчетУчета КАК бит_окей_СчетУчета,
	               |	ПараметрыКлассовВНА.СчетНачисленияАмортизации КАК бит_окей_СчетНачисленнойАмортизации,
	               |	ПараметрыКлассовВНА.СчетРезерваПереоценки КАК бит_окей_СчетРезерваПереоценки,
	               |	ПараметрыКлассовВНА.СчетСниженияСтоимости КАК бит_окей_СчетСниженияСтоимости,
	               |	ПараметрыКлассовВНА.СчетРасходовОтОбесценения,
	               |	ПараметрыКлассовВНА.СчетДоходовОтОбесценения,
	               |	ПараметрыКлассовВНА.СрокПолезногоИспользования КАК бит_окей_СрокПолезногоИспользования,
	               |	ПараметрыКлассовВНА.СрокПолезногоИспользованияМаксимальный,
	               |	ВЫБОР
	               |		КОГДА ПараметрыКлассовВНА.Организация = &ПустаяОрганизация
	               |				И ПараметрыКлассовВНА.Класс = &ПустойКласс
	               |			ТОГДА 3
	               |		КОГДА ПараметрыКлассовВНА.Организация = &Организация
	               |				И ПараметрыКлассовВНА.Класс = &ПустойКласс
	               |			ТОГДА 2
	               |		КОГДА ПараметрыКлассовВНА.Организация = &ПустаяОрганизация
	               |				И ПараметрыКлассовВНА.Класс = &Класс
	               |			ТОГДА 1
	               |		КОГДА ПараметрыКлассовВНА.Организация = &Организация
	               |				И ПараметрыКлассовВНА.Класс = &Класс
	               |			ТОГДА 0
	               |	КОНЕЦ КАК Приоритет,
	               |	ПараметрыКлассовВНА.СпособОтраженияРасходовПоАмортизации КАК бит_окей_СпособОтраженияРасходовПоАмортизации,
	               |	ПараметрыКлассовВНА.МетодНачисленияАмортизации КАК бит_окей_МетодНачисленияАмортизации,
	               |	ПараметрыКлассовВНА.НачислятьАмортизацию КАК бит_окей_НачислятьАмортизацию,
	               |	ПараметрыКлассовВНА.СчетНачисленияАмортизации КАК бит_окей_СчетНачисленияАмортизации
	               |ИЗ
	               |	РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА
	               |ГДЕ
	               |	(ПараметрыКлассовВНА.Организация = &Организация
	               |				И ПараметрыКлассовВНА.Класс = &Класс
	               |			ИЛИ ПараметрыКлассовВНА.Организация = &ПустаяОрганизация
	               |				И ПараметрыКлассовВНА.Класс = &ПустойКласс
	               |			ИЛИ ПараметрыКлассовВНА.Организация = &Организация
	               |				И ПараметрыКлассовВНА.Класс = &ПустойКласс
	               |			ИЛИ ПараметрыКлассовВНА.Организация = &ПустаяОрганизация
	               |				И ПараметрыКлассовВНА.Класс = &Класс)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
				   
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Для каждого КлючИЗначение Из РезСтруктура Цикл
		
			ИмяСвойства = КлючИЗначение.Ключ;
			
			РезСтруктура[ИмяСвойства] = Выборка[ИмяСвойства];
		
		КонецЦикла;  // по ключам структуры
	
	КонецЕсли; // по выборке

	Возврат РезСтруктура;
	
КонецФункции // ПолучитьПараметрыКлассаВНА()

 // Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
Процедура УстановкаСубконто(Счет, Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, 
	Субконто3, ЭлементДиалогаСубконто3,ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура(
		"Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3", 
		Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеФормы") Тогда
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		Иначе
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		КонецЕсли; 
			
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	Если ЭлементДиалогаСчет <> Неопределено Тогда
		ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

//Процедура синхронизирует значения реквизитов типа "СправочникСсылка.ОсновныеСредства"
//строки табличной части ОсновныеСредства 
//
// Параметры:
//  ТекущаяСтрока  – СтрокаТабличнойЧасти.ОсновныеСредства
//
Процедура СинхронизироватьРеквизитыОСВШапке() Экспорт 

	Если ЗначениеЗаполнено(бит_окей_ОсновноеСредство) Тогда
	
		Для ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ИмяСубконто = "бит_окей_Субконто"+ном;
			
			Если ТипЗнч(ЭтотОбъект[ИмяСубконто]) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			
				 ЭтотОбъект[ИмяСубконто] = бит_окей_ОсновноеСредство;
			
			 КонецЕсли; 
		
		КонецЦикла; // по субконто
	
	КонецЕсли; 
	
   Если ЗначениеЗаполнено(бит_окей_КлассОС) Тогда
	
		Для ном = 1 По мКоличествоСубконтоМУ Цикл
			
			ИмяСубконто = "бит_окей_Субконто"+ном;
			
			Если ТипЗнч(ЭтотОбъект[ИмяСубконто]) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			
				 ЭтотОбъект[ИмяСубконто] = бит_окей_Объект;
			
			 КонецЕсли; 
		
		КонецЦикла; // по субконто
	
	КонецЕсли; 
	
КонецПроцедуры //СинхронизироватьРеквизитыОС()

 // Функция готовит таблицы документа для проведения
//
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений
//
Функция ПодготовитьТаблицыДокументаПоШапкеДокумента(СтруктураШапкиДокумента)  Экспорт
	
	СтруктураТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СостояниеПринято",Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.НомерСтроки КАК НомерСтроки,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Сумма КАК Сумма,
	               |	0 КАК СуммаВВалюте,
	               |	0 КАК ОстатокРезерваПереоценки,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СчетКт КАК КорСчет,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоКт1 КАК КорСубконто1,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоКт2 КАК КорСубконто2,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоКт3 КАК КорСубконто3,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоКт4 КАК КорСубконто4,
	               |	СостоянияОС.Состояние,
	               |	СостоянияОС.ДатаСостояния,
	               |	0 КАК СуммаАванса,
	               |	0 КАК СуммаАвансаВВалюте,
	               |	0 КАК СуммаЗадолженности,
	               |	0 КАК СуммаЗадолженностиВВалюте,
	               |	0 КАК ЭСП,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ИнвентарныйНомер,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_КлассОС КАК Класс,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Объект КАК Объект,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ОсновноеСредство КАК ОсновноеСредство,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_УчитыватьКакОС КАК УчитыватьКакОС,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_НачислятьАмортизацию КАК НачислятьАмортизацию,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СуммаНачисленнойАмортизации КАК СуммаНачисленнойАмортизации,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СчетНачисленнойАмортизации КАК СчетНачисленияАмортизации,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_КоэффициентУскорения КАК КоэффициентУскорения,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СчетРезерваПереоценки КАК СчетРезерваПереоценки,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СчетСниженияСтоимости КАК СчетСниженияСтоимости,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СчетУчета КАК СчетУчета,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Субконто1 КАК Субконто1,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Субконто2 КАК Субконто2,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Субконто3 КАК Субконто3,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Субконто4 КАК Субконто4,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Местонахождение КАК Местонахождение,
	               |	бит_му_ПринятиеКУчетуОС.МОЛ КАК МОЛ,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_НачислятьАмортизациюСТекущегоПериода КАК НачислятьАмортизациюСТекущегоПериода,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СоставОС,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СчетДт КАК СчетРСБУ,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоДт1 КАК АналитикаРСБУ,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.ДокументРСБУ,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ОсновноеСредство КАК ОС,
	               |	бит_му_ПринятиеКУчетуОС.Организация КАК Организация1,
	               |	ИСТИНА КАК Активность,
	               |	бит_му_ПринятиеКУчетуОС.Дата КАК Период,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка.Организация КАК Организация,
	               |	ЛОЖЬ КАК ВнутригрупповыеЗатраты,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_УвеличениеСтоимостиОС КАК УвеличениеСтоимостиОС
	               |ИЗ
	               |	Документ.бит_му_ПринятиеКУчетуОС.бит_окей_СоставОсновныхСредств КАК бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_му_ПринятиеКУчетуОС КАК бит_му_ПринятиеКУчетуОС
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК СостоянияОС
	               |			ПО бит_му_ПринятиеКУчетуОС.бит_окей_ОсновноеСредство = СостоянияОС.ОсновноеСредство
	               |				И (СостоянияОС.Организация = &Организация)
	               |				И (СостоянияОС.Состояние = &СостояниеПринято)
	               |		ПО бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка = бит_му_ПринятиеКУчетуОС.Ссылка
	               |ГДЕ
	               |	бит_му_ПринятиеКУчетуОС.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СчетКт,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоКт1,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоКт2,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоКт3,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоКт4,
	               |	СостоянияОС.Состояние,
	               |	СостоянияОС.ДатаСостояния,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ДатаПринятияКУчету,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ИнвентарныйНомер,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_КлассОС,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Объект,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_УчитыватьКакОС,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_НачислятьАмортизацию,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_МетодНачисленияАмортизации,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СчетНачисленнойАмортизации,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СпособОтраженияРасходовПоАмортизации,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СчетРезерваПереоценки,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СчетСниженияСтоимости,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СчетУчета,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Субконто1,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Субконто2,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Субконто3,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Субконто4,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_Местонахождение,
	               |	бит_му_ПринятиеКУчетуОС.МОЛ,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_НачислятьАмортизациюСТекущегоПериода,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СоставОС,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СчетДт,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СубконтоДт1,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.ДокументРСБУ,
	               |	бит_му_ПринятиеКУчетуОС.Организация,
	               |	бит_му_ПринятиеКУчетуОС.Дата,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка.Организация,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.НомерСтроки,
	               |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Сумма,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ОсновноеСредство,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СрокПолезногоИспользования,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ЛиквидационнаяСтоимость,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_СуммаНачисленнойАмортизации,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_КоэффициентУскорения,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ПервоначальнаяСтоимость,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_ОсновноеСредство,
	               |	бит_му_ПринятиеКУчетуОС.бит_окей_УвеличениеСтоимостиОС";
				   
    Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	
	ТаблицаОС = Результат.Выгрузить();
	
	ТаблицаОС = ПараметрВнутригрупповыеЗатраты(ТаблицаОС);
	
	СтруктураТаблиц.Вставить("ОС",ТаблицаОС);
	
	//БИТ Тртилек 23.08.2013 
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.ДокументПоступления,
	               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.ДатаДокументаПоступления,
	               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.бит_Сумма,
	               |	бит_му_НРП_ВНАСрезПоследних.Период КАК рПериод,
	               |	бит_му_НРП_ВНАСрезПоследних.ИсточникЗаписи КАК рИсточникЗаписи,
	               |	бит_му_НРП_ВНАСрезПоследних.ПриходРасход КАК рПриходРасход,
	               |	бит_му_НРП_ВНАСрезПоследних.ДокументРеализации КАК рДокументРеализации,
	               |	бит_му_НРП_ВНАСрезПоследних.ДокументПоступления КАК рДокументПоступления,
	               |	бит_му_НРП_ВНАСрезПоследних.ОрганизацияПодрядчик КАК рОрганизацияПодрядчик,
	               |	бит_му_НРП_ВНАСрезПоследних.ОрганизацияЗаказчик КАК рОрганизацияЗаказчик,
	               |	бит_му_НРП_ВНАСрезПоследних.СуммаБезНДС КАК рСуммаБезНДС,
	               |	бит_му_НРП_ВНАСрезПоследних.СуммаАмортизации КАК рСуммаАмортизации,
	               |	бит_му_НРП_ВНАСрезПоследних.СчетВыручки КАК рСчетВыручки,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто1СчетаВыручки КАК рСубконто1СчетаВыручки,
	               |	бит_му_НРП_ВНАСрезПоследних.СчетУчетаАктива КАК рСчетУчетаАктива,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто1СчетаУчетаАктива КАК рСубконто1СчетаУчетаАктива,
	               |	бит_му_НРП_ВНАСрезПоследних.ДатаВвода КАК рДатаВвода,
	               |	бит_му_НРП_ВНАСрезПоследних.ОставшийсяСПИ КАК рОставшийсяСПИ,
	               |	бит_му_НРП_ВНАСрезПоследних.СчетРасходаПоАмортизации КАК рСчетРасходаПоАмортизации,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто1СчетаРасходаПоАмортизации КАК рСубконто1СчетаРасходаПоАмортизации,
	               |	бит_му_НРП_ВНАСрезПоследних.СчетНакопленнойАмортизации КАК рСчетНакопленнойАмортизации,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто1СчетаНакопленнойАмортизации КАК рСубконто1СчетаНакопленнойАмортизации,
	               |	бит_му_НРП_ВНАСрезПоследних.ЭлиминирующиеПроводки КАК рЭлиминирующиеПроводки,
	               |	бит_му_НРП_ВНАСрезПоследних.НомерЗаписи КАК рНомерЗаписи,
	               |	бит_му_НРП_ВНАСрезПоследних.Ответственный КАК рОтветственный,
	               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.Ссылка.бит_окей_ОсновноеСредство,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто2СчетаВыручки КАК рСубконто2СчетаВыручки,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто3СчетаВыручки КАК рСубконто3СчетаВыручки,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто4СчетаВыручки КАК рСубконто4СчетаВыручки,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто2СчетаУчетаАктива КАК рСубконто2СчетаУчетаАктива,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто3СчетаУчетаАктива КАК рСубконто3СчетаУчетаАктива,
	               |	бит_му_НРП_ВНАСрезПоследних.Субконто4СчетаУчетаАктива КАК рСубконто4СчетаУчетаАктива
	               |ИЗ
	               |	Документ.бит_му_ПринятиеКУчетуОС.бит_ДокументыПоступления КАК бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_НРП_ВНА.СрезПоследних КАК бит_му_НРП_ВНАСрезПоследних
	               |		ПО бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.ДокументПоступления = бит_му_НРП_ВНАСрезПоследних.ДокументПоступления
	               |ГДЕ
	               |	бит_му_ПринятиеКУчетуОСбит_ДокументыПоступления.Ссылка = &Ссылка
	               |	И бит_му_НРП_ВНАСрезПоследних.мРегистратор ССЫЛКА Документ.бит_му_ПоступлениеТоваровУслугПоКЗ";
				   
    Запрос.УстановитьПараметр("Ссылка"                ,Ссылка);
	
	Результат = Запрос.Выполнить();
		
	СтруктураТаблиц.Вставить("ДокументыПоступления",Результат.Выгрузить());
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицуБДДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

//Процедура проверят таблицу ОС на наличие уже принятых к учету ОС
//
// Параметры:
//  ТаблицаОС  – ТаблицаЗначений
//  Отказ      - Булево
//  Заголовок  - Строка
//
  Процедура ПроверкаТаблицыКонсолидированногоОС(ТаблицаОС ,Отказ, Заголовок)

	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл
	
		Если ЗначениеЗаполнено(СтрокаТаблицы.Состояние) Тогда
		
		     ТекстСообщения = "В строке № "
			                   +СтрокаТаблицы.НомерСтроки
							   +" табличной части ""Основные средства"" указано основное средство """
							   +СтрокаТаблицы.ОсновноеСредство
							   +""" принятое к учету "
							   +Формат(СтрокаТаблицы.ДатаСостояния,"ДФ=dd.MM.yyyy")
							   +"."
							   +Символы.ПС
							   +"Повторное принятие к учету невозможно!";
							   
		     ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		КонецЕсли;
        Прервать;
	КонецЦикла; 
	

КонецПроцедуры //ПроверкаТаблицыОС()

// Процедура формирует проводку по принятию к учету ОС
//
// Параметры:
//  СтруктураШапкиДокумента  – Структура
//  СтрокаТаблицы            - СтрокаТабличнойЧасти
//  СтруктураКурсыВалют      - Структура
//
Процедура СформироватьЗаписьПоПринятиюКУчетуКонсолидированногоОС(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)

		Запись = Движения.бит_Дополнительный_2.Добавить();

		СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"   
											   ,СтруктураШапкиДокумента.Организация
											   ,СтруктураШапкиДокумента.Дата
											   ,мВалютаМеждУчета
											   ,СтрокаТаблицы.СчетУчета
											   ,СтрокаТаблицы.КорСчет
											   ,СтрокаТаблицы.Сумма
											   ,"Принятие к учету ОС");	
											   
		бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
			
		// заполнение аналитик	
		бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"Субконто","КорСубконто",мКоличествоСубконтоМУ);
		
		// валютные пересчеты
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("Сумма");
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("СуммаВзаиморасчеты");
		бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтрокаТаблицы
														,Запись
														,МассивИмен
														,СтруктураКурсыВалют
														,СтруктураКурсыВалют.Документ
														,МассивИсключений);
														
		Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;														


КонецПроцедуры //СформироватьЗаписьПоПринятиюКУчету()

//Изюмов А.В. 02.08.12 в процедуре очищаются реквизиты при смене операции
Процедура ОчищаемРеквизитыПоВидамОпераций();
    
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ВводВачальныхОстатковКонсолидированногоОС Тогда
		
		ОсновныеСредства.Очистить();

		Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
			Если Реквизит.Имя = "МОЛ"
				//izhtc-Kir 26.10.2015 (
				ИЛИ Реквизит.Имя = "ВалютаДокумента" 
				ИЛИ Реквизит.Имя = "КурсДокумента" 
				ИЛИ Реквизит.Имя = "КратностьДокумента" 
				//izhtc-Kir 26.10.2015 )
				ИЛИ Реквизит.Имя = "Подразделение" 
				ИЛИ Реквизит.Имя = "СчетНРП"
				ИЛИ Реквизит.Имя = "Организация" 
				ИЛИ Реквизит.Имя = "Ответственный" 
				ИЛИ Реквизит.Имя = "Комментарий" 
				ИЛИ Реквизит.Имя = "ВидОперации" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Реквизит.Имя,"бит_окей_") = 0 Тогда
				ЭтотОбъект[Реквизит.Имя]= Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
			Если Реквизит.Имя = "МОЛ" 
				//izhtc-Kir 26.10.2015 (
				ИЛИ Реквизит.Имя = "ВалютаДокумента" 
				ИЛИ Реквизит.Имя = "КурсДокумента" 
				ИЛИ Реквизит.Имя = "КратностьДокумента" 
				//izhtc-Kir 26.10.2015 )
				ИЛИ Реквизит.Имя = "Подразделение" 
				ИЛИ Реквизит.Имя = "СчетНРП"
				ИЛИ Реквизит.Имя = "Организация" 
				ИЛИ Реквизит.Имя = "Ответственный" 
				ИЛИ Реквизит.Имя = "Комментарий" 
				ИЛИ Реквизит.Имя = "ВидОперации" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(Реквизит.Имя,"бит_окей_") > 0 Тогда
				ЭтотОбъект[Реквизит.Имя]= Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		бит_окей_СоставОсновныхСредств.Очистить();
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура("ВидОперации,Организация");
	
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	
	Для каждого Реквизит из МетаданныеДокумента.Реквизиты Цикл
		Если Реквизит.Имя = "МОЛ" 
			ИЛИ Реквизит.Имя = "Подразделение" 
			ИЛИ Реквизит.Имя = "СчетНРП"
			ИЛИ Реквизит.Имя = "Организация" 
			ИЛИ Реквизит.Имя = "Ответственный" 
			ИЛИ Реквизит.Имя = "Комментарий" 
			ИЛИ Реквизит.Имя = "бит_окей_Местонахождение"
			ИЛИ Реквизит.Имя = "бит_окей_СуммаНачисленнойАмортизации"
			ИЛИ Реквизит.Имя = "бит_окей_КоэффициентУскорения"
			ИЛИ Реквизит.Имя = "бит_окей_СчетРезерваПереоценки"
			ИЛИ Реквизит.Имя = "бит_окей_Субконто3"
			ИЛИ Реквизит.Имя = "бит_окей_ЛиквидационнаяСтоимость"
			ИЛИ Реквизит.Имя = "бит_окей_Субконто4" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(Реквизит.Имя,"бит_окей_") > 0 Тогда
				СтруктураОбязательныхПолей.Вставить(Реквизит.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	
	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	// проверка заполнения счета НРП
	Если ОсновныеСредства.Итог("СуммаНачисленнойАмортизации") <> 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(СчетНРП) Тогда
			ТекстСообщения = "Не заполнено значение реквизита ""Счет нераспределенной прибыли""!";
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок)
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт

	ТипыПланыСчетов     = ПланыСчетов.ТипВсеСсылки();
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	
	//БИТ Тртилек 31.08.2012 Получим параметры класса ОС
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ВводВачальныхОстатковКонсолидированногоОС Тогда
		
		ЗапросПараметров = Новый Запрос;
		ЗапросПараметров.Текст = "ВЫБРАТЬ
		                         |	бит_му_ПараметрыКлассовВНА.СчетНачисленияАмортизации КАК бит_окей_СчетНачисленнойАмортизации,
		                         |	бит_му_ПараметрыКлассовВНА.СчетСниженияСтоимости КАК бит_окей_СчетСниженияСтоимости,
		                         |	бит_му_ПараметрыКлассовВНА.СрокПолезногоИспользования КАК бит_окей_СрокПолезногоИспользования,
		                         |	бит_му_ПараметрыКлассовВНА.НачислятьАмортизацию КАК бит_окей_НачислятьАмортизацию,
		                         |	бит_му_ПараметрыКлассовВНА.СпособОтраженияРасходовПоАмортизации КАК бит_окей_СпособОтраженияРасходовПоАмортизации,
		                         |	бит_му_ПараметрыКлассовВНА.МетодНачисленияАмортизации КАК бит_окей_МетодНачисленияАмортизации
		                         |ИЗ
		                         |	РегистрСведений.бит_му_ПараметрыКлассовВНА КАК бит_му_ПараметрыКлассовВНА
		                         |ГДЕ
		                         |	бит_му_ПараметрыКлассовВНА.Организация = &Организация
		                         |	И бит_му_ПараметрыКлассовВНА.Класс = &Класс";
	ЗапросПараметров.УстановитьПараметр("Организация", Организация);
	ЗапросПараметров.УстановитьПараметр("Класс", бит_окей_КлассОС);
	ТаблицаПараметров = ЗапросПараметров.Выполнить().Выгрузить();
	КолонкиТаблицыПараметров = ТаблицаПараметров.Колонки;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		СтрокаПараметров = ТаблицаПараметров[0];
	Иначе
		СтрокаПараметров = Неопределено;
		Сообщить("Параметры для данного класса и организации не найдены");
	КонецЕсли;
	КонецЕсли;
	///БИТ Тртилек

	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Значение = ДокументОбъект[КлючЗначение.Ключ];
		ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();

		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			
			//БИТ Тртилек 31.08.2012
			Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ВводВачальныхОстатковКонсолидированногоОС Тогда
				Если НЕ СтрокаПараметров = Неопределено Тогда
					Если НЕ КолонкиТаблицыПараметров.Найти(КлючЗначение.Ключ) = Неопределено Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаПараметров[КлючЗначение.Ключ]) Тогда
							Продолжить;
						Иначе
							Сообщить("В параметрах класса данный параметр заполнен");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			///БИТ Тртилек

			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
		ИначеЕсли КлючЗначение.Ключ = "бит_окей_ПервоначальнаяСтоимость" Тогда
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда //
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
			ИначеЕсли  бит_окей_СоставОсновныхСредств.Итог("Сумма") <> Значение Тогда
				СтрокаСообщения = "Итог по табличной части документа не равен  """ + СокрЛП("Первоначальнаой стоимости на закладке ""Параметры учета""") + """!";
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
			КонецЕсли;
			
		ИначеЕсли КлючЗначение.Ключ = "бит_окей_НачислятьАмортизацию" Тогда
			//БИТ Тртилек 31.08.2012
			Если ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС Тогда
				Если НЕ СтрокаПараметров = Неопределено Тогда					
					Если Значение <> СтрокаПараметров["бит_окей_НачислятьАмортизацию"] Тогда
						СтрокаСообщения = "Параметр Начислять Амортизацию не равен значению параметра классов";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;


КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                            Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	
	Если  ДокументОбъект.ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС ИЛИ  ДокументОбъект.ВидОперации = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ВводВачальныхОстатковКонсолидированногоОС Тогда
		
		// Цикл по строкам табличной части.
		Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "Строка номер "+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			
			// Цикл по проверяемым полям
			Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				
				Значение = СтрокаТаблицы[КлючЗначение.Ключ];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда 
					
					Если Найти(КлючЗначение.Ключ,"СубконтоДт2") > 0 И
						СтрокаТаблицы.СчетДт.ВидыСубконто.Количество() = 1 тогда
						Продолжить;
					КонецЕСли;
					
					Если Найти(КлючЗначение.Ключ,"СубконтоДт2") > 0 И
						СтрокаТаблицы.СчетДт.ВидыСубконто.Количество() > 1 И СтрокаТаблицы.СчетКт = ПланыСчетов.бит_Дополнительный_2.Служебный тогда
						Продолжить;
					КонецЕСли;
					
					Если Найти(КлючЗначение.Ключ,"СубконтоКт2") > 0 
						И СтрокаТаблицы.СчетКт.ВидыСубконто.Количество() = 1 тогда
						Продолжить;
					ИначеЕсли СтрокаТаблицы.СчетКт.ВидыСубконто.Количество() = 0 и (Найти(КлючЗначение.Ключ,"СубконтоКт1") > 0 ИЛИ Найти(КлючЗначение.Ключ,"СубконтоКт2")) Тогда
						Продолжить;
					КонецЕСли;
					
					
					Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
						ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
						СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """.";
						
					Иначе
						СтрокаСообщения = КлючЗначение.Значение;
						
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		  		// Цикл по строкам табличной части.
		Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "Строка номер "+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
			
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-10-22 (#4297) 
			МассивКорСубконтоНоменклатура = Новый Массив;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КорСчет) Тогда 
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("ВидСубконто", ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Номенклатура);
				
				СтрокиСубконтоНоменклатура = СтрокаТаблицы.КорСчет.ВидыСубконто.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого СтрокаСубконто Из СтрокиСубконтоНоменклатура Цикл  
					
					МассивКорСубконтоНоменклатура.Добавить(СтрокаСубконто.НомерСтроки);
					
				КонецЦикла;
				
			КонецЕсли;
			// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-10-22 (#4297) 
			// Цикл по проверяемым полям
			Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				
				Значение = СтрокаТаблицы[КлючЗначение.Ключ];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда 
					
					Если Найти(КлючЗначение.Ключ,"Субконто2") > 0 И
						СтрокаТаблицы.СчетУчета.ВидыСубконто.Количество() = 1 тогда
						Продолжить;
					КонецЕСли;
					
					Если Найти(КлючЗначение.Ключ,"Субконто2") > 0 И
						СтрокаТаблицы.СчетУчета.ВидыСубконто.Количество() > 1 И СтрокаТаблицы.КорСчет = ПланыСчетов.бит_Дополнительный_2.Служебный тогда
						Продолжить;
					КонецЕСли;
					
					Если Найти(КлючЗначение.Ключ,"КорСубконто2") > 0 
						И СтрокаТаблицы.КорСчет.ВидыСубконто.Количество() = 1 тогда
						Продолжить;
					ИначеЕсли СтрокаТаблицы.КорСчет.ВидыСубконто.Количество() = 0 и (Найти(КлючЗначение.Ключ,"КорСубконто1") > 0 ИЛИ Найти(КлючЗначение.Ключ,"КорСубконто2")) Тогда
						Продолжить;
					КонецЕСли;
					
					// ОКЕЙ Конаков Ю.М. (СофтЛаб) Начало 2021-10-22 (#4297) 
					Если (Найти(КлючЗначение.Ключ,"КорСубконто1") > 0 
							И Не МассивКорСубконтоНоменклатура.Найти(1) = Неопределено)
						Или (Найти(КлючЗначение.Ключ,"КорСубконто2") > 0 
							И Не МассивКорСубконтоНоменклатура.Найти(2) = Неопределено)
						Или (Найти(КлючЗначение.Ключ,"КорСубконто3") > 0 
							И Не МассивКорСубконтоНоменклатура.Найти(3) = Неопределено)
						Или (Найти(КлючЗначение.Ключ,"КорСубконто4") > 0 
							И Не МассивКорСубконтоНоменклатура.Найти(4) = Неопределено) Тогда 
						
						Продолжить;
						
					КонецЕсли;
					// ОКЕЙ Конаков Ю.М. (СофтЛаб) Конец 2021-10-22 (#4297) 
					
					Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
						ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
						СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """.";
						
					Иначе
						СтрокаСообщения = КлючЗначение.Значение;
						
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, ЭтотОбъект,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;	
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧасти()

//БИТ Тртилек 06092013 процедура проверяет равенство сумм в двух табличных частях
Процедура ПроверитьСоответствиеСумм(Отказ)
	
	ЗапросСуммыОС = Новый Запрос;
	ЗапросСуммыОС.Текст = "ВЫБРАТЬ
	                      |	СУММА(бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Сумма) КАК Сумма
	                      |ИЗ
	                      |	Документ.бит_му_ПринятиеКУчетуОС.бит_окей_СоставОсновныхСредств КАК бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств
	                      |ГДЕ
	                      |	бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.СоставОС.УслугиОтСоственногоЮЛ = ИСТИНА
	                      |	И бит_му_ПринятиеКУчетуОСбит_окей_СоставОсновныхСредств.Ссылка = &Ссылка";
						  
	ЗапросСуммыОС.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаСуммыОС = ЗапросСуммыОС.Выполнить().Выбрать();
	Если ВыборкаСуммыОС.Следующий() Тогда
		СуммаОС = ВыборкаСуммыОС.Сумма;
	Иначе
		СуммаОС = 0;
	КонецЕсли;
	
	СуммаПоступлений = бит_ДокументыПоступления.Итог("бит_Сумма");
	
	Если НЕ СуммаОС = СуммаПоступлений Тогда
		Отказ = Истина;
		Сообщить("Документ проведен не будет, т.к. сумма по документам поступления: " + СуммаПоступлений + " не равна сумме принятия с признаком ""Услуги от собственного ЮЛ"": " + СуммаОС);
	КонецЕсли;
	
КонецПроцедуры

//БИТ Тртилек 25112013 функция ищет значение параметра Внутригрупповые затраты и подставляет в ТаблицуОС
Функция ПараметрВнутригрупповыеЗатраты(ТаблицаОС)
	
	ПараметрВнутригрупповыеЗатраты = ЛОЖЬ;
	
	Если ЭтотОбъект.бит_ДокументыПоступления.Количество() > 0 Тогда
		ПараметрВнутригрупповыеЗатраты = Истина;
	Иначе
		Для Каждого СтрокаТаблицы Из ТаблицаОС Цикл
			Если ТипЗнч(СтрокаТаблицы.ДокументРСБУ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
				ИЛИ ТипЗнч(СтрокаТаблицы.ДокументРСБУ) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
				Если СтрокаТаблицы.ДокументРСБУ.бит_ДокументыСобственныхКонтрагентов.Количество() > 0 Тогда
					ПараметрВнутригрупповыеЗатраты = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрВнутригрупповыеЗатраты Тогда
		Для Каждого СтрокаДляЗаписи ИЗ ТаблицаОС Цикл
			СтрокаДляЗаписи.ВнутригрупповыеЗатраты = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаОС;
	
КонецФункции

#Область Инициализация

мКоличествоСубконтоМУ  = 4;
мПереченьВидовОпераций = Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС;

#КонецОбласти

#КонецЕсли
