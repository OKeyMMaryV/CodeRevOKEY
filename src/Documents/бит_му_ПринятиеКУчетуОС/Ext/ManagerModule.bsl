#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Справка-расчет в валюте регл. учета.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "СправкаРасчетФинансовыхНачисленийРегл";
	КомандаПечати.Представление				= НСтр("ru = 'Справка-расчет в валюте регл. учета'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидСуммы", "Регл");
	КомандаПечати.Порядок					= 10;	
	
	// Справка-расчет в валюте взаиморасчетов.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "СправкаРасчетФинансовыхНачисленийВзаим";
	КомандаПечати.Представление				= НСтр("ru = 'Справка-расчет в валюте взаиморасчетов'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидСуммы", "Взаиморасчеты");
	КомандаПечати.Порядок					= 20;	
	
	// Справка-расчет в валюте регл. учета по договору в целом.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "СправкаРасчетФинансовыхНачисленийРеглПоДоговору";
	КомандаПечати.Представление				= НСтр("ru = 'Справка-расчет в валюте регл. учета по договору в целом'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидСуммы", "Регл");
	КомандаПечати.Порядок					= 30;	
	
	// Справка-расчет в валюте взаиморасчетов по договору в целом.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор				= "СправкаРасчетФинансовыхНачисленийВзаимПоДоговору";
	КомандаПечати.Представление				= НСтр("ru = 'Справка-расчет в валюте взаиморасчетов по договору в целом'");
	КомандаПечати.Обработчик				= "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ДополнительныеПараметры   = Новый Структура("ВидСуммы", "ВзаиморасчетыПоДоговору");
	КомандаПечати.Порядок					= 40;	
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийРегл") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийРегл",
			НСтр("ru = 'Справка-расчет в валюте регл. учета'"), 
			ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивОбъектов, ПараметрыПечати),,
			"Отчет.бит_му_СправкаРасчетФинансовыхНачислений.Макет");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийВзаим") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийВзаим",
			НСтр("ru = 'Справка-расчет в валюте взаиморасчетов'"), 
			ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивОбъектов, ПараметрыПечати),,
			"Отчет.бит_му_СправкаРасчетФинансовыхНачислений.Макет");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийРеглПоДоговору") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийРеглПоДоговору",
			НСтр("ru = 'Справка-расчет в валюте регл. учета по договору в целом'"), 
			ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачисленийПоДоговору(МассивОбъектов, ПараметрыПечати),,
			"Отчет.бит_му_СправкаРасчетФинансовыхНачислений.Макет");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийВзаимПоДоговору") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СправкаРасчетФинансовыхНачисленийВзаимПоДоговору",
			НСтр("ru = 'Справка-расчет в валюте взаиморасчетов по договору в целом'"), 
			ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачисленийПоДоговору(МассивОбъектов, ПараметрыПечати),,
			"Отчет.бит_му_СправкаРасчетФинансовыхНачислений.Макет");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);		
         
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы, Объект)  Экспорт 
	
	// Переменная, хранящее значение количество субконто БУ.
	Перем КоличествоСубконтоБУ;
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСубконтоБУ = 3;
	СтруктураПараметров  = бит_му_ОбщегоНазначения.ПодготовитьСтруктуруПараметровДляПодбораСчетовМУ(Объект.Организация, Объект.Дата);
                   
	НаборИсточник = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	                		
	// Заполнение набора записей источник по строке таблицы значений.
	ЗаписьИсточник = НаборИсточник.Добавить();
	ЗаписьИсточник.СчетДт = СтрокаТаблицы.СчетДт;
	ЗаписьИсточник.СчетКт = СтрокаТаблицы.СчетКт;
	
	Для i = 1 По 3 Цикл
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетДт, ЗаписьИсточник.СубконтоДт, i, СтрокаТаблицы["СубконтоДт" + i]);
		бит_му_ОбщегоНазначения.УстановитьСубконто(ЗаписьИсточник.СчетКт, ЗаписьИсточник.СубконтоКт, i, СтрокаТаблицы["СубконтоКт" + i]);
		
	КонецЦикла; 
	
	НаборПриемник = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
	
	Протокол = "";
	
	// Выполнение подбора счетов по правилам трансляции.
	бит_МеханизмТрансляции.ВыполнитьТрансляциюДвижений(Объект
													, НаборИсточник
													, НаборПриемник
													, СтруктураПараметров
													, Протокол);
	
	Если НаборПриемник.Количество() > 0 Тогда
		
		// Запись результата подбора счетов в строку табличной части.
		ЗаписьПриемник = НаборПриемник[0];
		
		Если ЗначениеЗаполнено(ЗаписьПриемник.СчетДт) Тогда
			
			НоваяСтрока.СчетУчета = ЗаписьПриемник.СчетДт;
			Для i = 1 По 4 Цикл				
				НоваяСтрока["Субконто" + i] = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьПриемник, "Дт", i);				
			КонецЦикла; 
			
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(НоваяСтрока.СчетУчета, 4);									  
			бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(НоваяСтрока, НастройкиСубконто, "Субконто");
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ЗаписьПриемник.СчетКт) Тогда
			
			НоваяСтрока.КорСчет = ЗаписьПриемник.СчетКт;
			Для i = 1 По 4 Цикл				
				НоваяСтрока["КорСубконто" + i] = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьПриемник, "Кт", i);				
			КонецЦикла; 
			
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(НоваяСтрока.КорСчет, 4);									  
			бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(НоваяСтрока, НастройкиСубконто, "КорСубконто");
			
		КонецЕсли; 
		
	КонецЕсли; // Трансляция выполнена.

КонецПроцедуры

Процедура ПреобразоватьТаблицуУчитываяРаспределениеНДС(ТаблицаДанных) Экспорт 

	Если Не бит_РаботаСМетаданными.ЕстьДокумент("РаспределениеНДС") Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаДанных.Колонки.Добавить("УдалитьСтроку", Новый ОписаниеТипов("Булево"));
		
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл

		Если СтрокаТаблицы.УдалитьСтроку ИЛИ СтрокаТаблицы.ЭтоРаспределениеНДС Тогда
			//ИЛИ ТипЗнч(СтрокаТаблицы.ДокументБУ) = Тип("ДокументСсылка.РаспределениеНДС") Тогда
		 	Продолжить;		
		КонецЕсли;
				
		СтруктураОтбора = Новый Структура("ВНА", СтрокаТаблицы.ВНА);
		МассивСтрок = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 1 Тогда
			
			Для каждого СтрокаВНА Из МассивСтрок Цикл
				Если ТипЗнч(СтрокаВНА.ДокументБУ) = Тип("ДокументСсылка.РаспределениеНДС") Тогда
			 		СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + СтрокаВНА.Сумма;
					СтрокаВНА.УдалитьСтроку = Истина;				
				КонецЕсли;
			КонецЦикла;                           			
		
		КонецЕсли;		

	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("УдалитьСтроку", Истина);
	МассивУдаляемых = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаУдл Из МассивУдаляемых Цикл
	  	ТаблицаДанных.Удалить(СтрокаУдл); 	
	КонецЦикла;
	
	//ТаблицаДанных.Колонки.Удалить("Пропускать");

КонецПроцедуры

// Создает структуру параметров по умолчанию для формирования движений по регистру МСФО.
//
Функция ПодготовитьСтруктуруПараметровМСФО() Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураПараметров.Вставить("Период",      Дата(1,1,1));
	СтруктураПараметров.Вставить("Валюта",      Справочники.Валюты.ПустаяСсылка());
	СтруктураПараметров.Вставить("СчетДт",      ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	СтруктураПараметров.Вставить("СчетКт",      ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сумма",       0);
	СтруктураПараметров.Вставить("Количество",  1);
	СтруктураПараметров.Вставить("Содержание",  "");
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ЗаполнитьСчетаУчетаПроцентов() Экспорт

	НачатьТранзакцию();
	
	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ВводОстатковОСВФинансовойАренде);
	ВидыОпераций.Добавить(Перечисления.бит_му_ВидыОперацийПринятиеКУчетуОС.ПринятиеКУчетуОСВФинансовойАренде);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыОпераций", ВидыОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Ссылка КАК Ссылка,
	|	ПринятиеКУчетуОС.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	ПринятиеКУчетуОС.СчетУчетаКраткосрочный КАК СчетУчетаКраткосрочный,
	|	ПринятиеКУчетуОС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПринятиеКУчетуОС.Проведен КАК Проведен,
	|	ПринятиеКУчетуОС.Дата КАК Дата
	|ИЗ
	|	Документ.бит_му_ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|ГДЕ
	|	ПринятиеКУчетуОС.ВидОперации В(&ВидыОпераций)
	|	И ПринятиеКУчетуОС.СчетУчетаПроцентовДолгосрочный = ЗНАЧЕНИЕ(ПланСчетов.бит_Дополнительный_2.ПустаяСсылка)
	|	И ПринятиеКУчетуОС.СчетУчетаПроцентовКраткосрочный = ЗНАЧЕНИЕ(ПланСчетов.бит_Дополнительный_2.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		ТекущийОбъект.СчетУчетаПроцентовДолгосрочный =  Выборка.СчетУчетаДолгосрочный;
		ТекущийОбъект.СчетУчетаПроцентовКраткосрочный = Выборка.СчетУчетаКраткосрочный;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект); 
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать документ
	                               |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.бит_му_ПринятиеКУчетуОС,
				Выборка.Ссылка,
				ТекстСообщения);
		КонецПопытки;

		Если Выборка.Проведен Тогда
			НаборЗаписей = РегистрыСведений.бит_му_ПараметрыФинИнструментов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			
			СтрокаЗаписи = НаборЗаписей.Добавить();
			СтрокаЗаписи.Период             = Выборка.Дата;
			СтрокаЗаписи.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			СтрокаЗаписи.Параметр           = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетДолгосрочныхПроцентов;
			СтрокаЗаписи.ЗначениеПараметра  = Выборка.СчетУчетаДолгосрочный;
			
			СтрокаЗаписи = НаборЗаписей.Добавить();
			СтрокаЗаписи.Период             = Выборка.Дата;
			СтрокаЗаписи.ДоговорКонтрагента = Выборка.ДоговорКонтрагента;
			СтрокаЗаписи.Параметр           = ПланыВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетКраткосрочныхПроцентов;
			СтрокаЗаписи.ЗначениеПараметра  = Выборка.СчетУчетаКраткосрочный;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей); 
		КонецЕсли;
		
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Функция получает параметры учетной политики.
// 
// Возвращаемое значение:
//   РезСтруктура - Структура.
// 
Функция ПолучитьПараметрыУчетнойПолититки(Организация, Дата) Экспорт

	УчетнаяПолитикаМСФО = бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(КонецДня(Дата)
										, Новый Структура("Организация", Организация));	
	
	ПорогПризнанияОС = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(УчетнаяПолитикаМСФО
										, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.ПорогДляПризнанияОС);
										
	НачислятьАмортизациюСТекущегоПериода = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(УчетнаяПолитикаМСФО
										, ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.НачислятьАмортизациюСТекущегоПериода);
				

	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("ПорогПризнанияОС"					, ПорогПризнанияОС);
	РезСтруктура.Вставить("НачислятьАмортизациюСТекущегоПериода", НачислятьАмортизациюСТекущегоПериода);
	
	Возврат РезСтруктура;
	
КонецФункции

// Процедура получает средний курс аванса и валюту договора.
// 
// Параметры:
// 	ВалютаДоговора    - СправочникСсылка.Валюты.
//  ВалютаМеждУчета   - СправочникСсылка.Валюты.
//  СреднийКурсАванса - Число.
// 
Функция ПолучитьСреднийКурсАвансаИВалютуДоговора(Организация, 
	                                               Контрагент,
												   ДоговорКонтрагента,
												   ВалютаПересчета,
												   Дата,
												   СчетУчетаАванса) Экспорт
												   
    СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ВалютаДоговора",        Справочники.Валюты.ПустаяСсылка());
	СтруктураРезультат.Вставить("СреднийКурсАвансаМУ",   1);
	СтруктураРезультат.Вставить("СреднийКурсАвансаРегл", 1);
	СтруктураРезультат.Вставить("СреднийКурсАвансаУпр",  1);
	
	// Валюта договора.
	ВалютаДоговора = ?(ЗначениеЗаполнено(ДоговорКонтрагента), 
	                                      ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента,"ВалютаВзаиморасчетов"), 
										  ВалютаПересчета);
						
	// Средний курс аванса.
	ВидыСубконто = ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ВидыСубконто.Контрагенты);
	МассивСубконто.Добавить(ВидыСубконто.ДоговорыКонтрагентов);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_Дополнительный_2Остатки.СуммаМУОстатокДт КАК СуммаМУ,
	               |	бит_Дополнительный_2Остатки.ВалютнаяСуммаОстатокДт КАК СуммаВал,
	               |	бит_Дополнительный_2Остатки.СуммаРеглОстатокДт КАК СуммаРегл,
	               |	бит_Дополнительный_2Остатки.СуммаУпрОстатокДт КАК СуммаУпр
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |			&Дата,
	               |			Счет В ИЕРАРХИИ (&Счет),
	               |			&МассивСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 = &Контрагент
	               |				И Субконто2 = &ДоговорКонтрагента) КАК бит_Дополнительный_2Остатки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Дата"			  , КонецДня(Дата));
	Запрос.УстановитьПараметр("Счет"			  ,	СчетУчетаАванса);
	Запрос.УстановитьПараметр("МассивСубконто"	  ,	МассивСубконто);
	Запрос.УстановитьПараметр("Организация"		  , Организация);
	Запрос.УстановитьПараметр("Контрагент"		  ,	Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И (Выборка.СуммаВал <> 0) Тогда
		СреднийКурсАвансаМУ    = Выборка.СуммаМУ / Выборка.СуммаВал;
		СреднийКурсАвансаРегл  = Выборка.СуммаРегл / Выборка.СуммаВал;
		СреднийКурсАвансаУпр   = Выборка.СуммаУпр / Выборка.СуммаВал;
	Иначе
		
		ВалютаУпр  = Константы.бит_ВалютаУправленческогоУчета.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		
		СтруктураКурса 	   = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДоговора , Дата);
		СтруктураКурсаМУ   = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
		СтруктураКурсаРегл = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаРегл, Дата);
		СтруктураКурсаУпр  = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаУпр, Дата);
		
		КоэффВз   = ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Курс/СтруктураКурса.Кратность);
		КоэффМу   = ?(СтруктураКурсаМУ.Курс = 0	, 1, СтруктураКурсаМУ.Кратность/СтруктураКурсаМУ.Курс);
		КоэффРегл = ?(СтруктураКурсаМУ.Курс = 0	, 1, СтруктураКурсаРегл.Кратность/СтруктураКурсаРегл.Курс);
		КоэффУпр  = ?(СтруктураКурсаМУ.Курс = 0	, 1, СтруктураКурсаУпр.Кратность/СтруктураКурсаУпр.Курс);
		
		СреднийКурсАвансаМУ   = 1 * КоэффВз * КоэффМу;
		СреднийКурсАвансаРегл = 1 * КоэффВз * КоэффРегл;
		СреднийКурсАвансаУпр  = 1 * КоэффВз * КоэффУпр;
		
	КонецЕсли; 
	
	СтруктураРезультат.ВалютаДоговора        = ВалютаДоговора;
	СтруктураРезультат.СреднийКурсАвансаМУ   = СреднийКурсАвансаМУ;
	СтруктураРезультат.СреднийКурсАвансаРегл = СреднийКурсАвансаРегл;
	СтруктураРезультат.СреднийКурсАвансаУпр  = СреднийКурсАвансаУпр;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Происходит расчет эффективной ставки для записи в регистрв сведений "Параметры фин. инструментов".
//
// Параметры:
//  ДокументыСсылка	 - Ссылка	 - ссылка на документ принятие к учету ОС.
// 
// Возвращаемое значение:
//  Результат - Число   - эффективная ставка по договору.
//
Функция ЭффективнаяСтавкаПринятиеКУчету(ДокументСсылка) Экспорт

	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПринятиеКУчетуОСОсновныеСредства.Сумма КАК Сумма,
		|	ПринятиеКУчетуОСОсновныеСредства.ЭСП КАК ЭСП
		|ИЗ
		|	Документ.бит_му_ПринятиеКУчетуОС.ОсновныеСредства КАК ПринятиеКУчетуОСОсновныеСредства
		|ГДЕ
		|	ПринятиеКУчетуОСОсновныеСредства.Ссылка = &ДокументСсылка
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбщие = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбщие.Следующий() Цикл
		СуммаПоВсемОС          = ВыборкаОбщие.Сумма;
		РасчетнаяСуммаПоВсемОС = 0;
		
		Выборка = ВыборкаОбщие.Выбрать();
		Пока Выборка.Следующий() Цикл
			РасчетнаяСуммаПоВсемОС = РасчетнаяСуммаПоВсемОС + Выборка.Сумма*Выборка.ЭСП;
		КонецЦикла; 
		
		Результат = РасчетнаяСуммаПоВсемОС/СуммаПоВсемОС;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает табличный документ печатной формы.
// 
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать.
// 	ПараметрыПечати - Структура.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Функция ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачислений(МассивОбъектов, ПараметрыПечати)

	Результат = Новый ТабличныйДокумент;
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ТекущийДокумент = МассивОбъектов[0];
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокумент
	                                                         ,"Организация, Контрагент, ДоговорКонтрагента, СпособПолученияСтавки");
															 
	Для каждого СтрокаОС Из ТекущийДокумент.ОсновныеСредства Цикл
		
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Организация"				, СтруктураРеквизитов.Организация);
		СтруктураПараметров.Вставить("Контрагент"				, СтруктураРеквизитов.Контрагент);
		СтруктураПараметров.Вставить("ДоговорКонтрагента"		, СтруктураРеквизитов.ДоговорКонтрагента);
		СтруктураПараметров.Вставить("Объект"					, СтрокаОС.ОсновноеСредство);
		СтруктураПараметров.Вставить("ТипДокумента"             , ТипЗнч(ТекущийДокумент));		
		СтруктураПараметров.Вставить("Регистратор"              , ТекущийДокумент);	
		
		Если СтруктураРеквизитов.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
			ВидСтавки = "НоминальнаяСтавка";
		Иначе
			ВидСтавки = "ЭффективнаяСтавкаПроцента";
		КонецЕсли; 
		СтруктураПараметров.Вставить(ВидСтавки, СтрокаОС.ЭСП);
		
		Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("ВидСуммы") Тогда
			СтруктураПараметров.Вставить("ВидСуммы", ПараметрыПечати.ВидСуммы);
		КонецЕсли;
		
		Результат = Отчеты.бит_му_СправкаРасчетФинансовыхНачислений.СформироватьТабличныйДокумент(СтруктураПараметров, Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает табличный документ печатной формы.
// 
// Параметры:
//  ТекущийДокумент - ДокументСсылка.бит_му_ПринятиеКУчетуОС.
// 	ПараметрыПечати - Структура.
// 
// Возвращаемое значение:
//  ТабличныйДокумент.
// 
Функция ПолучитьПечатныйДокументСправкаРасчетФинансовыхНачисленийПоДоговору(МассивОбъектов, ПараметрыПечати)

	Результат = Новый ТабличныйДокумент;
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Результат;	
	КонецЕсли;
	
	ТекущийДокумент = МассивОбъектов[0];
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийДокумент
	                                                         ,"Организация, Контрагент, ДоговорКонтрагента, СпособПолученияСтавки");
															 
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"		 , СтруктураРеквизитов.Организация);
	СтруктураПараметров.Вставить("Контрагент"		 , СтруктураРеквизитов.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", СтруктураРеквизитов.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ТипДокумента"      , ТипЗнч(ТекущийДокумент));	
	СтруктураПараметров.Вставить("Регистратор"       , ТекущийДокумент);	
	// Определим, нужно ли выводить ЭСП.
	ТаблицаЭСП = ТекущийДокумент.ОсновныеСредства.Выгрузить(, "ЭСП");
	ТаблицаЭСП.Свернуть("ЭСП");
	
	Если СтруктураРеквизитов.СпособПолученияСтавки = Перечисления.бит_му_СпособыПолученияНоминальнойСтавки.ИзвлечениеИзНСИ Тогда
		ВидСтавки = "НоминальнаяСтавка";
	Иначе
		ВидСтавки = "ЭффективнаяСтавкаПроцента";
	КонецЕсли; 
		
	// Если все ставки одинаковые, тогда выводим.
	Если ТаблицаЭСП.Количество() = 1 Тогда
		СтруктураПараметров.Вставить(ВидСтавки, ТаблицаЭСП[0].ЭСП);
	КонецЕсли;
			
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("ВидСуммы") Тогда
		СтруктураПараметров.Вставить("ВидСуммы", ПараметрыПечати.ВидСуммы);
	КонецЕсли;
	
	Результат = Отчеты.бит_му_СправкаРасчетФинансовыхНачислений.СформироватьТабличныйДокумент(СтруктураПараметров, Результат);
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#КонецЕсли
