 
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущие значения реквизитов формы. Клиент.
&НаКлиенте 
Перем мКэшРеквизитовФормы;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет вызов серверной функции по синхронизации значения реквизита РучнаяКорректировка
// при корректировки движений через обработку "Результат проведения".
//
// Параметры:
//  РучнаяКорректировка - Булево.
//
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаКлиенте 
Функция ВыполнитьСинхронизациюРучнойКорректировки(РучнаяКорректировка) Экспорт
	
	ДействиеВыполнено = СинхронизироватьРучнуюКорректировку(РучнаяКорректировка);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	Возврат ДействиеВыполнено;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЭШЕМ РЕКВИЗИТОВ ФОРМЫ

// Процедура заполняет кэш реквизитов формы данными объекта.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает отборы для договора контрагента.
//
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
//
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(фСписокВидовДоговоров.ВыгрузитьЗначения()));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоERP() Тогда
		Если фСписокТиповДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("бит_ТипДоговора", фСписокТиповДоговоров);
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	ВидыОпераций				= фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных;
	ВидыДоговоровКонтрагентов 	= фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов;
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
//
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
//
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим отбор для договора контрагента.
		УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
		
	Иначе
		
		СтруктураДополнительныхПараметров = Новый Структура;
		
		Если ЗначениеЗаполнено(фСписокТиповДоговоров) Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЗначениеОтбора", 		фСписокТиповДоговоров);
			СтруктураОтбора.Вставить("ВидСравненияОтбора",	ВидСравнения.ВСписке);
			СтруктураОтбора.Вставить("ДоступностьОтбора",	Ложь);
			
			СтруктураДополнительныхПараметров.Вставить("бит_ТипДоговора", СтруктураОтбора);
		КонецЕсли;
		
		// Обработаем начало выбора договора контрагента в обычном приложении.
		бит_РаботаСДиалогамиКлиент.НачалоВыбораДоговораКонтрагентаОбычноеПриложение(Объект
																				   ,Элемент
																				   ,Контрагент_Владелец
																				   ,Договор
																				   ,фСписокВидовДоговоров
																				   ,СтандартнаяОбработка
																				   ,СтруктураДополнительныхПараметров);
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

// бит_SNovikov Процедура обрабатывает выбор реквизита формы.
//
// Параметры:
//  СтандартнаяОбработка – Булево.
//
&НаКлиенте 
Процедура ОбработатьВыборРеквизитаШапки(СтандартнаяОбработка)

	Если Объект.ДанныеРеклассификации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос(НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'")
				  ,РежимДиалогаВопрос.ДаНет
				  ,30
				  ,КодВозвратаДиалога.Нет);
					  
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
    Объект.ДанныеРеклассификации.Очистить();
	
КонецПроцедуры // ОбработатьВыборРеквизитаШапки() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура УправлениеЭлементамиФормыСервер()
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных;
	
	//сбросим заголовки шапки таблицы формы
	СброситьЗаголовкиПолейФормы(Элементы.ДанныеРеклассификации);
	
	Если Объект.ВидОперации = ВидыОпераций.РеклассификацияАвансовПоИнвестиционнымДоговорам Тогда
		Элементы.ДанныеРеклассификацииСчетАвансовПоРСБУ.Видимость = ЛОЖЬ;
		Элементы.СальдоПоРСБУ.Видимость = ЛОЖЬ;
		Элементы.СальдоПоРСБУВВалютеВзаиморасчетов.Видимость = ЛОЖЬ;
		Элементы.СальдоПоМСФО.Видимость = ЛОЖЬ;
		Элементы.СальдоПоМСФОВВалютеВзаиморасчетов.Видимость = ЛОЖЬ;
		Элементы.Контроль.Видимость = ЛОЖЬ;
		Элементы.ИспользоватьСуммуРСБУ.Видимость = ЛОЖЬ;
		
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.РеклассификацияПрочихДолгосрочныхАвансов Тогда
		
		//Начало_бит_Магомедов_21.12.2012 	
	ИначеЕсли Объект.ВидОперации = ВидыОпераций.РеклассификацияНаОснованииЗагруженныхДанных Тогда 
		Элементы.ДанныеРеклассификацииСчетАвансовПоРСБУ.Видимость = ЛОЖЬ;
		Элементы.СальдоПоРСБУ.Видимость = ЛОЖЬ;
		Элементы.СальдоПоРСБУВВалютеВзаиморасчетов.Видимость = ЛОЖЬ;
		Элементы.СальдоПоМСФО.Видимость = Истина;
		Элементы.СальдоПоМСФОВВалютеВзаиморасчетов.Видимость = Истина;
		Элементы.Контроль.Видимость = ЛОЖЬ;
		Элементы.ИспользоватьСуммуРСБУ.Видимость = ЛОЖЬ;
		
		
		//Установим заголовки для вида операции 
		Элементы.СчетИнвестиционныхДолгосрочныхАвансов.Заголовок = "Счет долгосрочных авансов";
		Элементы.СальдоПоМСФОВВалютеВзаиморасчетов.Заголовок = "Сальдо по договору (в валюте взаиморасчетов)";
		Элементы.СальдоПоМСФО.Заголовок = "Сальдо по договору";
		Элементы.СуммаРеклассификацииВВалютеВзаиморасчетов.Заголовок = "Сумма реклассификации (в валюте взаиморасчетов)";
		
		//Конец_бит_Магомедов_21.12.2012 
		
	КонецЕсли;
	
	//ОК Калинин М. 140513		
	Элементы.ДанныеРеклассификации.КоманднаяПанель.ПодчиненныеЭлементы.ДанныеРеклассификацииДобавить2.Доступность=Ложь;
	Элементы.ДанныеРеклассификации.КоманднаяПанель.ПодчиненныеЭлементы.ДанныеРеклассификацииСкопировать2.Доступность=Ложь;
	//ОК Калинин М. 	
	
	
КонецПроцедуры // УправлениеЭлементамиФормыСервер()

&НаСервере
Процедура СброситьЗаголовкиПолейФормы(Родитель)
	
	Для Каждого ТекЭлемент Из Родитель.ПодчиненныеЭлементы Цикл
		Если Не ТипЗнч(ТекЭлемент) = Тип("ПолеФормы") Тогда 
			 СброситьЗаголовкиПолейФормы(ТекЭлемент);
		 иначе
			 ТекЭлемент.Заголовок = "";
		 КонецЕсли;
		 
	КонецЦикла;

КонецПроцедуры

// бит_IDotsenko Процедура окончание выбора вида операции.
//
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если (ТипЗнч(СтруктураПараметров) = Тип("Структура")) И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;
	Иначе
		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных.РеклассификацияАвансовПоИнвестиционнымДоговорам;
	КонецЕсли;
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

	ОбработатьИзменениеВидаОперацииСервер();
	
КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		Модифицированность = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры // ПриОткрытииПромежуточная()

// бит_IDotsenko Процедура выполняет окончательные операции по открытию формы. 
//
&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("Дата");

	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();

	Если Параметры.Ключ.Пустая() Тогда
		Объект.Дата = КонецДня(Объект.Дата);
		//Начало_бит_Магомедов_25.12.2012 
		Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных.РеклассификацияНаОснованииЗагруженныхДанных Тогда 
			Объект.Дата = КонецМесяца(Объект.Дата);
		КонецЕсли;
		//Конец_бит_Магомедов_25.12.2012 
	КонецЕсли;
	Объект.бит_ДатаСторно = НачалоМесяца(Дата(Год(ДобавитьМесяц(Объект.Дата,1)), Месяц(ДобавитьМесяц(Объект.Дата,1)), 1));
	
КонецПроцедуры // ПриОткрытииОкончание()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// бит_IDotsenko изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Объект.ВидОперации = Неопределено;
			СформироватьДеревоВидовОпераций();
			
			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	// бит_IDotsenko изменение кода. Конец. 11.03.2015}}
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНД ФОРМЫ

// бит_SNovikov Процедура - обработчик события "Нажатие" кнопки "КомандаЗаполнить".
//
&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.Проведен Тогда
	
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект), НСтр("ru = 'Перед заполнением следует отменить проведение документа. Выполнить отмену проведения?'")
					  ,РежимДиалогаВопрос.ДаНет
					  ,30
					  ,КодВозвратаДиалога.Нет);
        Возврат;
		
	КонецЕсли;
	
	КомандаЗаполнитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        КомандаЗаполнитьНаСервере();
    КонецЕсли;
    
    КомандаЗаполнитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьФрагмент()
    
    Если Объект.ДанныеРеклассификации.Количество() > 0 Тогда
        
        ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьФрагментЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'")
        ,РежимДиалогаВопрос.ДаНет
        ,30
        ,КодВозвратаДиалога.Нет);
        Возврат;
        
    КонецЕсли;
    
    ЗаполнитьДанныеДляРеклассификации();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Объект.ДанныеРеклассификации.Очистить();
    
    ЗаполнитьДанныеДляРеклассификации();

КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьНаСервере()
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.бит_му_РеклассификацияАвансовВыданных")),,);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// бит_SNovikov Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, 	"_");
	ИмяПодменю      = Лев(ИмяКнопки, 	Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки, 	Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		
		// Установить видимость реквизитов и заголовков колонок.	
		УправлениеЭлементамиФормыСервер();
			
		Возврат;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	ОбработатьИзменениеВидаОперацииСервер();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ДанныеРеклассификации.Количество() = 0 Тогда
		
		ДобавитьВКэш("Дата");
		Объект.Дата = КонецДня(Объект.Дата);
		Объект.бит_ДатаСторно = НачалоМесяца(Дата(Год(ДобавитьМесяц(Объект.Дата,1)), Месяц(ДобавитьМесяц(Объект.Дата,1)), 1));

	Иначе
		
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросДатаПриИзменении", ЭтотОбъект);
	
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	КонецЕсли;
		
КонецПроцедуры

// бит_AMuntyan Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ – Строка.
//
&НаКлиенте
Процедура ВопросДатаПриИзменении(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДобавитьВКэш("Дата");
		Объект.ДанныеРеклассификации.Очистить();

	Иначе
		
		ИзвлечьИзКэша("Дата");

	КонецЕсли;	
	
	Объект.Дата = КонецДня(Объект.Дата);
	Объект.бит_ДатаСторно = НачалоМесяца(Дата(Год(ДобавитьМесяц(Объект.Дата,1)), Месяц(ДобавитьМесяц(Объект.Дата,1)), 1));
	
КонецПроцедуры // ВопросДатаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ДанныеРеклассификации.Количество() <> 0 Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВыборРеквизитаШапки", ЭтотОбъект, ВыбранноеЗначение);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		
	КонецЕсли;
	
	ОрганизацияОбъекта = Объект.Организация;
	ТаблицаОбъекта = Объект.ДанныеРеклассификации;
	
	Если ТаблицаОбъекта.Количество() > 0 Тогда
						  
		ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");			  
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении", ЭтотОбъект, ТаблицаОбъекта);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

// бит_AMuntyan Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ – Строка.
//  ТаблицаОбъекта - ДанныеФормыКоллекция
//
&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Ответ, ТаблицаОбъекта)

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаОбъекта.Очистить();			
	КонецЕсли;
	
КонецПроцедуры // ВопросОрганизацияПриИзменении()

// бит_SNovikov Процедура - обработчик события "ОбработкаВыбора" поля ввода "Организация".
//
&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если Объект.ДанныеРеклассификации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
	ОповещениеВопрос = Новый ОписаниеОповещения("ВыборРеквизитаШапки", ЭтотОбъект, ВыбранноеЗначение);
	
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

// бит_AMuntyan Обработка оповещения вопроса пользователю. 
//
// Параметры:
//  Ответ – Строка.
//  ВыбранноеЗначение - СправочникСсылка, Дата.
//
&НаКлиенте
Процедура ВыборРеквизитаШапки(Ответ, ВыбранноеЗначение) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ДанныеРеклассификации.Очистить();

		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
			
			Объект.Организация = ВыбранноеЗначение;
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Дата") Тогда
			
			Объект.Дата = ВыбранноеЗначение;
			Объект.Дата = КонецДня(Объект.Дата);
			Объект.бит_ДатаСторно = НачалоМесяца(Дата(Год(ДобавитьМесяц(Объект.Дата,1)), Месяц(ДобавитьМесяц(Объект.Дата,1)), 1));
	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыборРеквизитаШапки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ДанныеРеклассификации"

// бит_SNovikov Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента" 
// табличного поля "ДанныеРеклассификации".
//
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоВыбораДоговораКлиент(Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент" 
// табличного поля "ДанныеРеклассификации".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКонтрагента(ТекущиеДанные.ПолучитьИдентификатор());
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДанныеРеклассификацииДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента" 
// табличного поля "ДанныеРеклассификации".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеРеклассификации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
	ЗаполнитьКурсВзаиморасчетов(ТекущиеДанные.ПолучитьИдентификатор());	
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ НА СЕРВЕРЕ

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	фКоличествоСубконтоМУ = 4;
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Вызов механизма защиты.
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма, МетаданныеОбъекта.ПолноеИмя(), Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
		
		КнопкаГруппыПодменю = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
			
	КонецЦикла;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	// установка параметров выбора для Договоров
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДанныеРеклассификацииДоговорКонтрагента, "Объект.ДанныеРеклассификации.Контрагент");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет синхронизацию значения реквизита РучнаяКорректировка
// при корректировки движений через обработку "Результат проведения".
//
// Параметры:
//  РучнаяКорректировка - Булево.
//
// Возвращаемое значение:
//  ДействиеВыполнено - Булево.
// 
&НаСервере 
Функция СинхронизироватьРучнуюКорректировку(РучнаяКорректировка)
	
	ДокументОбъект 	  = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДействиеВыполнено = бит_ОбщегоНазначения.ВыполнитьСинхронизациюРучнойКорректировки(ДокументОбъект
																					  ,РучнаяКорректировка);
	
	Если ДействиеВыполнено Тогда
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	Иначе
		ДокументОбъект = Неопределено;
	КонецЕсли;
	
	Возврат ДействиеВыполнено;
	
КонецФункции // СинхронизироватьРучнуюКорректировку()

// бит_SNovikov Процедура обрабатывает изменение вида операции.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()

	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();

КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

// бит_SNovikov Процедура заполняет валюту и курс взаиморасчетов для строки табличной части.
//
// Параметры:
//  Идентификатор  - Число - Индентификатор строки табличной части
//
&НаСервере         
Процедура ЗаполнитьКурсВзаиморасчетов(Идентификатор)

	ТекущиеДанные = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВалютаВзаиморасчетов = ТекущиеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	СтрКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ТекущиеДанные.ВалютаВзаиморасчетов, Объект.Дата);
	
	ТекущиеДанные.КурсВзаиморасчетов 		= СтрКурса.Курс;
	//ТекущиеДанные.КратностьВзаиморасчетов 	= СтрКурса.Кратность;

КонецПроцедуры // ЗаполнитьКурсВзаиморасчетов()

// бит_SNovikov Формирует список видов операций для выбора вида операции перед созданием документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьДеревоВидовОпераций()

	ЭлементыДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = ЭлементыДерева.Добавить();
	СтрокаНовая.ВидОперации = "Доступные виды операций";
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекСтр.Значение;	
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  КэшированныеЗначения - Структура.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.ВидыДоговоровКонтрагентов));
	КэшПеречисления.Вставить("бит_му_ВидыОперацийРеклассификацияАвансовВыданных", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Типы договоров
	КэшированныеЗначения.Вставить("ТипДоговораЗаймыПолученные", 	Справочники.бит_ТипыДоговоров.ЗаймыПолученные);
	КэшированныеЗначения.Вставить("ТипДоговораКредитыПолученные", 	Справочники.бит_ТипыДоговоров.КредитыПолученные);
	КэшированныеЗначения.Вставить("ТипДоговораЗаймыВыданные", 		Справочники.бит_ТипыДоговоров.ЗаймыВыданные);
	КэшированныеЗначения.Вставить("ТипДоговораЦенныеБумаги", 		Справочники.бит_ТипыДоговоров.ЦенныеБумаги);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура получает и записывает валюту международного учета в кэш значений.
//
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Функция получает тип объекта.
//
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
//
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, ПользователиКлиентСервер.ТекущийПользователь());
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// бит_MZyubin Процедура обрабатывает изменение контрагента.
//
// Параметры:
//  ИдСтроки – Число.
//
&НаСервере
Процедура ИзменениеКонтрагента(ИдСтроки)

	ТекущаяСтрока = Объект.ДанныеРеклассификации.НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	СтруктураДополнительныхПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(фСписокТиповДоговоров) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", 		фСписокТиповДоговоров);
		СтруктураОтбора.Вставить("ВидСравненияОтбора",	ВидСравнения.ВСписке);
		
		СтруктураДополнительныхПараметров.Вставить("бит_ТипДоговора", СтруктураОтбора);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(ТекущаяСтрока.ДоговорКонтрагента
														  ,ТекущаяСтрока.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров
														  ,СтруктураДополнительныхПараметров);
														  
	// Мог измениться договор.
	ИзменениеДоговораСервер(ТекущаяСтрока.ДоговорКонтрагента, ТекущаяСтрока.Контрагент);
		
	ЗаполнитьКурсВзаиморасчетов(ТекущаяСтрока.ПолучитьИдентификатор());			
	
КонецПроцедуры // ИзменениеКонтрагента()

// Процедура обрабатывает изменение договора. Сервер.
//
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
//
&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = Договор.Владелец;
	КонецЕсли;
	
КонецПроцедуры // ИзменениеДоговораСервер() 

// бит_SNovikov Процедура заполняет табличную часть "ДанныеРеклассификации".
//
// Параметры:
//  СписокИдентификаторов - Массив.
//
&НаСервере 
Процедура ЗаполнитьДанныеДляРеклассификации()
	
	Если ПроверитьЗаполнениеНастроек() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных.РеклассификацияАвансовПоИнвестиционнымДоговорам Тогда
		Выборка = ПолучитьВыборкуИнвестиционныеДоговора();
	//Начало_бит_Магомедов_20.12.2012 
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных.РеклассификацияПрочихДолгосрочныхАвансов Тогда
		Выборка = ПолучитьВыборкуПрочиеДолгосрочныеАвансы();
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийРеклассификацияАвансовВыданных.РеклассификацияНаОснованииЗагруженныхДанных Тогда
		Выборка = ПолучитьВыборкуПоЗагруженнымДанным();
	КонецЕсли;
	//Конец_бит_Магомедов_20.12.2012 
	
	ЗапросКурсовВалют = Новый Запрос;
	ЗапросКурсовВалют.Текст = "ВЫБРАТЬ
	                          |	Валюты.Ссылка КАК Валюта,
	                          |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) КАК Курс
	                          |ИЗ
	                          |	Справочник.Валюты КАК Валюты
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	                          |		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	                          |ГДЕ
	                          |	Валюты.Ссылка <> &ВалютаМСФО";
	ЗапросКурсовВалют.УстановитьПараметр("Дата", Объект.Дата);							  
	ЗапросКурсовВалют.УстановитьПараметр("ВалютаМСФО", фКэшЗначений.ВалютаМСФО);
	ТаблицаВалют = ЗапросКурсовВалют.Выполнить().Выгрузить();
	КурсМСФО = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", фКэшЗначений.ВалютаМСФО)).Курс;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ДанныеРеклассификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НоваяСтрока.ВалютаВзаиморасчетов <> фКэшЗначений.ВалютаМСФО Тогда
			ПересчитатьВВалютуДокумента(НоваяСтрока, ТаблицаВалют, КурсМСФО);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДанныеДляРеклассификации()

&НаСервере
Процедура ПересчитатьВВалютуДокумента(НоваяСтрока, ТаблицаВалют, КурсМСФО)
	
	ВалютаСтроки = НоваяСтрока.ВалютаВзаиморасчетов;
	Если НЕ ВалютаСтроки = Справочники.Валюты.ПустаяСсылка() Тогда
		СтрокаВалюты = ТаблицаВалют.Найти(ВалютаСтроки, "Валюта");
		Если НЕ СтрокаВалюты = Неопределено Тогда
			КурсВалюты = СтрокаВалюты.Курс;
			НоваяСтрока.СуммаРеклассификации = НоваяСтрока.СуммаРеклассификацииВВалютеВзаиморасчетов*(КурсВалюты/КурсМСФО);
			НоваяСтрока.СальдоПоРСБУ = НоваяСтрока.СальдоПоРСБУВВалютеВзаиморасчетов*(КурсВалюты/КурсМСФО);
			НоваяСтрока.СальдоПоМСФО = НоваяСтрока.СальдоПоМСФОВВалютеВзаиморасчетов*(КурсВалюты/КурсМСФО);
			НоваяСтрока.КурсВзаиморасчетов = (КурсВалюты/КурсМСФО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Функция делает выборку для инвестиционных договоров
&НаСервере
Функция ПолучитьВыборкуИнвестиционныеДоговора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_Дополнительный_2Остатки.Счет КАК СчетКраткосрочнойЗадолженности,
	               |	бит_Дополнительный_2Остатки.Организация,
	               |	бит_Дополнительный_2Остатки.Субконто1 КАК Контрагент,
	               |	бит_Дополнительный_2Остатки.Субконто2 КАК ДоговорКонтрагента,
	               |	бит_Дополнительный_2Остатки.СуммаМУОстаток КАК СуммаРеклассификации,
	               |	ВЫБОР
	               |		КОГДА бит_Дополнительный_2Остатки.Счет = &Счет225
	               |			ТОГДА &Счет174
	               |		КОГДА бит_Дополнительный_2Остатки.Счет = &Счет226
	               |			ТОГДА &Счет175
	               |	КОНЕЦ КАК СчетИнвестиционныхДолгосрочныхАвансов,
	               |	бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток КАК СуммаРеклассификацииВВалютеВзаиморасчетов,
	               |	ЛОЖЬ КАК Модифицированность
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |			&ДатаОстатков,
	               |			Счет В ИЕРАРХИИ (&Счет225, &Счет226),
	               |			,
	               |			Организация = &Организация
	               |				И Субконто2 В
	               |					(ВЫБРАТЬ
	               |						УстановкаВидовРасчетовПоДоговорамСрезПоследних.ДоговорКонтрагента
	               |					ИЗ
	               |						РегистрСведений.УстановкаВидовРасчетовПоДоговорам.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК УстановкаВидовРасчетовПоДоговорамСрезПоследних
	               |					ГДЕ
	               |						УстановкаВидовРасчетовПоДоговорамСрезПоследних.ВидРасчета = &ВидРасчетаИнвест)) КАК бит_Дополнительный_2Остатки
	               |ГДЕ
	               |	(НЕ(бит_Дополнительный_2Остатки.Счет.Валютный = ИСТИНА
	               |				И ЕСТЬNULL(бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток, 0) = 0))";
	
	
	ПараметрыГраницы = Новый Массив(2);
	ПараметрыГраницы[0] = КонецДня(Объект.Дата);
	ПараметрыГраницы[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),ПараметрыГраницы);
	
	Запрос.УстановитьПараметр("ДатаОстатков", Граница);				   
	Запрос.УстановитьПараметр("Счет225", Счет225);
	Запрос.УстановитьПараметр("Счет226", Счет226);
	Запрос.УстановитьПараметр("Счет174", Счет174);
	Запрос.УстановитьПараметр("Счет175", Счет175);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВидРасчетаИнвест", Перечисления.ПринадлежностиРасчетовПоДоговорам.Инвестиционные);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

//Функция делает выборку для инвестиционных договоров
&НаСервере
Функция ПолучитьВыборкуПрочиеДолгосрочныеАвансы()
	
	ИмяПланаСчетовИсточникПолное ="РегистрБухгалтерии.Хозрасчетный";
	
	ИмяПланаСчетовПриемникПолное ="РегистрБухгалтерии.бит_Дополнительный_2";
							   
	МассивИсточник = Новый Массив;
	МассивИсточник.Добавить(Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ИмяПланаСчетовИсточникПолное));
	
	МассивПриемник = Новый Массив;
	МассивПриемник.Добавить(Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ИмяПланаСчетовПриемникПолное));
	
	РезультатПравила = бит_МеханизмТрансляции.ПолучитьДоступныеПравилаТрансляции(Объект.Организация,ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_му_РеклассификацияАвансовВыданных")),Объект.Дата,МассивИсточник,МассивПриемник, );
	ВыборкаПравил = РезультатПравила.Выбрать();
	
	СписокПравил = Новый СписокЗначений;
	
	Если НЕ РезультатПравила.Пустой() Тогда
		Пока ВыборкаПравил.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПравил.ПравилаТрансляции) Тогда
			 СписокПравил.Добавить(ВыборкаПравил.ПравилаТрансляции);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Сообщить("Ни одно правило трансляции отобрано не было. Проверьте назначение правил.");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИД,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Значение
	               |ПОМЕСТИТЬ ВТДебетКредит
	               |ИЗ
	               |	Справочник.бит_ПравилаТрансляции.ЗначенияРеквизитов КАК бит_ПравилаТрансляцииЗначенияРеквизитов
	               |ГДЕ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""ДтКт""
	               |	И бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка В ИЕРАРХИИ(&Правила)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИД,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Значение
	               |ПОМЕСТИТЬ ВТСчетРСБУ
	               |ИЗ
	               |	Справочник.бит_ПравилаТрансляции.ЗначенияРеквизитов КАК бит_ПравилаТрансляцииЗначенияРеквизитов
	               |ГДЕ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка В ИЕРАРХИИ(&Правила)
	               |	И бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""Хозрасчетный_Счет""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.ИД,
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Значение
	               |ПОМЕСТИТЬ ВТСчетМСФО
	               |ИЗ
	               |	Справочник.бит_ПравилаТрансляции.ЗначенияРеквизитов КАК бит_ПравилаТрансляцииЗначенияРеквизитов
	               |ГДЕ
	               |	бит_ПравилаТрансляцииЗначенияРеквизитов.Ссылка В ИЕРАРХИИ(&Правила)
	               |	И бит_ПравилаТрансляцииЗначенияРеквизитов.ИмяКолонки = ""бит_Дополнительный_2_Счет""
	               |	И бит_ПравилаТрансляцииЗначенияРеквизитов.Значение В ИЕРАРХИИ (&Счет225, &Счет226)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТСчетМСФО.Значение КАК СчетМСФО,
	               |	ВТСчетРСБУ.Значение КАК СчетРСБУ
	               |ПОМЕСТИТЬ ВТСоответствиеСчетов
	               |ИЗ
	               |	ВТСчетМСФО КАК ВТСчетМСФО
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДебетКредит КАК ВТДебетКредит
	               |		ПО ВТСчетМСФО.ИД = ВТДебетКредит.ИД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСчетРСБУ КАК ВТСчетРСБУ
	               |		ПО ВТСчетМСФО.ИД = ВТСчетРСБУ.ИД
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТСчетМСФО.Значение,
	               |	ВТСчетРСБУ.Значение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДополнительныеСведения.Объект,
	               |	ДополнительныеСведения.Значение
	               |ПОМЕСТИТЬ ВТСрокИсполнения
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &СвойствоСрокИсполнения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Счет,
	               |	ХозрасчетныйОстатки.Субконто1,
	               |	ХозрасчетныйОстатки.Субконто2,
	               |	ХозрасчетныйОстатки.Субконто3,
	               |	ХозрасчетныйОстатки.СуммаОстаток,
	               |	ХозрасчетныйОстатки.Субконто3.ДокументОснование,
	               |	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	               |ПОМЕСТИТЬ ВТХозрасчетныйОстатки
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&ДатаОстатков,
	               |			СЧЕТ В
	               |				(ВЫБРАТЬ
	               |					ВТСоответствиеСчетов.СчетРСБУ
	               |				ИЗ
	               |					ВТСоответствиеСчетов КАК ВТСоответствиеСчетов),
	               |			,
	               |			Организация = &Организация) КАК ХозрасчетныйОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	           	   |ВЫБРАТЬ
	               |	ВТСоответствиеСчетов.СчетМСФО,
	               |	ВТСоответствиеСчетов.СчетРСБУ,
	               |	ВТХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	               |	ВТХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	               |	СУММА(ВТХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
	               |	ВТХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	               |ПОМЕСТИТЬ ВТХозрасчетныйОстаткиВДате
	               |ИЗ
	               |	ВТСоответствиеСчетов КАК ВТСоответствиеСчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТХозрасчетныйОстатки КАК ВТХозрасчетныйОстатки
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрокИсполнения КАК ВТСрокИсполнения
	               |			ПО (ВЫБОР
	               |					КОГДА (НЕ ВТХозрасчетныйОстатки.Субконто3 ССЫЛКА Документ.СписаниеСРасчетногоСчета)
	               |						ТОГДА ВТХозрасчетныйОстатки.Субконто3 = ВТСрокИсполнения.Объект
	               |					ИНАЧЕ ВТХозрасчетныйОстатки.Субконто3.ДокументОснование = ВТСрокИсполнения.Объект
	               |				КОНЕЦ)
	               |		ПО ВТСоответствиеСчетов.СчетРСБУ = ВТХозрасчетныйОстатки.Счет
	               |ГДЕ
	               |	(НЕ ВТСрокИсполнения.Значение ЕСТЬ NULL )
	               |	И ВТСрокИсполнения.Значение > &ДатаЧерезГод
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТСоответствиеСчетов.СчетМСФО,
	               |	ВТСоответствиеСчетов.СчетРСБУ,
	               |	ВТХозрасчетныйОстатки.Субконто1,
	               |	ВТХозрасчетныйОстатки.Субконто2,
	               |	ВТХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТХозрасчетныйОстаткиВДате.СчетМСФО,
	               |	ВТХозрасчетныйОстаткиВДате.СчетРСБУ,
	               |	ВТХозрасчетныйОстаткиВДате.Субконто1,
	               |	ВТХозрасчетныйОстаткиВДате.Субконто2,
	               |	ВТХозрасчетныйОстаткиВДате.СуммаОстаток,
	               |	СУММА(ВТХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстатокПолный,
	               |	ВТХозрасчетныйОстаткиВДате.ВалютнаяСуммаОстаток,
	               |	ВТХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСуммаОстатокПолный
	               |ПОМЕСТИТЬ ВТВесьХозрасчетный
	               |ИЗ
	               |	ВТХозрасчетныйОстаткиВДате КАК ВТХозрасчетныйОстаткиВДате
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТХозрасчетныйОстатки КАК ВТХозрасчетныйОстатки
	               |		ПО ВТХозрасчетныйОстаткиВДате.СчетРСБУ = ВТХозрасчетныйОстатки.Счет
	               |			И ВТХозрасчетныйОстаткиВДате.Субконто1 = ВТХозрасчетныйОстатки.Субконто1
	               |			И ВТХозрасчетныйОстаткиВДате.Субконто2 = ВТХозрасчетныйОстатки.Субконто2
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТХозрасчетныйОстаткиВДате.СчетМСФО,
	               |	ВТХозрасчетныйОстаткиВДате.СчетРСБУ,
	               |	ВТХозрасчетныйОстаткиВДате.Субконто1,
	               |	ВТХозрасчетныйОстаткиВДате.Субконто2,
	               |	ВТХозрасчетныйОстаткиВДате.СуммаОстаток,
	               |	ВТХозрасчетныйОстаткиВДате.ВалютнаяСуммаОстаток,
	               |	ВТХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_Дополнительный_2Остатки.Счет,
	               |	бит_Дополнительный_2Остатки.Субконто1,
	               |	бит_Дополнительный_2Остатки.Субконто2,
	               |	СУММА(ЕСТЬNULL(бит_Дополнительный_2Остатки.СуммаМУОстаток, 0)) КАК СуммаМУОстаток,
	               |	бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток КАК ВалютнаяСуммаМУОстаток
	               |ПОМЕСТИТЬ ВТМеждународныйОстатки
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&ДатаОстатков, Счет В (&Счет225, &Счет226), , Организация = &Организация) КАК бит_Дополнительный_2Остатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_Дополнительный_2Остатки.Счет,
	               |	бит_Дополнительный_2Остатки.Субконто1,
	               |	бит_Дополнительный_2Остатки.Субконто2,
	               |	бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТВесьХозрасчетный.СчетМСФО КАК СчетКраткосрочнойЗадолженности,
	               |	ВТВесьХозрасчетный.СчетРСБУ КАК СчетАвансовПоРСБУ,
	               |	ВТВесьХозрасчетный.Субконто1 КАК Контрагент,
	               |	ВТВесьХозрасчетный.Субконто2 КАК ДоговорКонтрагента,
	               |	ВТВесьХозрасчетный.СуммаОстаток КАК СуммаРеклассификации,
	               |	ВТВесьХозрасчетный.СуммаОстатокПолный КАК СальдоПоРСБУ,
	               |	ВТВесьХозрасчетный.СуммаОстатокПолный - ЕСТЬNULL(ВТМеждународныйОстатки.СуммаМУОстаток, 0) КАК Контроль,
	               |	ВТМеждународныйОстатки.СуммаМУОстаток КАК СальдоПоМСФО,
	               |	ИСТИНА КАК ИспользоватьСуммуРСБУ,
	               |	ВЫБОР
	               |		КОГДА ВТВесьХозрасчетный.СчетМСФО = &Счет225
	               |			ТОГДА &Счет172
	               |		КОГДА ВТВесьХозрасчетный.СчетМСФО = &Счет226
	               |			ТОГДА &Счет178
	               |	КОНЕЦ КАК СчетИнвестиционныхДолгосрочныхАвансов,
	               |	ВТВесьХозрасчетный.Субконто2.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	               |	ВТМеждународныйОстатки.ВалютнаяСуммаМУОстаток КАК СальдоПоРСБУВВалютеВзаиморасчетов,
	               |	ВТВесьХозрасчетный.ВалютнаяСуммаОстаток КАК СуммаРеклассификацииВВалютеВзаиморасчетов,
	               |	ВТВесьХозрасчетный.ВалютнаяСуммаОстатокПолный КАК СальдоПоМСФОВВалютеВзаиморасчетов,
	               |	ЛОЖЬ КАК Модифицированность
	               |ИЗ
	               |	ВТВесьХозрасчетный КАК ВТВесьХозрасчетный
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТМеждународныйОстатки КАК ВТМеждународныйОстатки
	               |		ПО ВТВесьХозрасчетный.Субконто1 = ВТМеждународныйОстатки.Субконто1
	               |			И ВТВесьХозрасчетный.Субконто2 = ВТМеждународныйОстатки.Субконто2
	               |			И ВТВесьХозрасчетный.СчетМСФО = ВТМеждународныйОстатки.Счет
	               |ГДЕ
	               |	(НЕ ВТВесьХозрасчетный.Субконто2 В
	               |				(ВЫБРАТЬ
	               |					УстановкаВидовРасчетовПоДоговорамСрезПоследних.ДоговорКонтрагента
	               |				ИЗ
	               |					РегистрСведений.УстановкаВидовРасчетовПоДоговорам.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК УстановкаВидовРасчетовПоДоговорамСрезПоследних
	               |				ГДЕ
	               |					УстановкаВидовРасчетовПоДоговорамСрезПоследних.ВидРасчета = &ВидРасчетаИнвест))
	               |	И (НЕ(ВТВесьХозрасчетный.СчетМСФО.Валютный = ИСТИНА
	               |				И ЕСТЬNULL(ВТМеждународныйОстатки.ВалютнаяСуммаМУОстаток, 0) = 0))
	               |	И (НЕ(ВТВесьХозрасчетный.СчетМСФО.Валютный = ЛОЖЬ
	               |				И ЕСТЬNULL(ВТМеждународныйОстатки.СуммаМУОстаток, 0) = 0))";
				   
	Запрос.УстановитьПараметр("Счет225", Счет225);				   
	Запрос.УстановитьПараметр("Счет226", Счет226);
	Запрос.УстановитьПараметр("Счет172", Счет172);
	Запрос.УстановитьПараметр("Счет178", Счет178);
	Запрос.УстановитьПараметр("Правила", СписокПравил);
	Попытка
	Запрос.УстановитьПараметр("СвойствоСрокИсполнения", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Срок исполнения"));
	Исключение
	Сообщить("Дополнительное свойство объектов с кодом ""007"" (Срок исполнения) не найдено")
	КонецПопытки;

	ПараметрыГраницы = Новый Массив(2);
	ПараметрыГраницы[0] = КонецДня(Объект.Дата);
	ПараметрыГраницы[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),ПараметрыГраницы);
	
	Запрос.УстановитьПараметр("ДатаОстатков", Граница);
	ВисокосныйГод = ?(ДеньГода(КонецГода(Дата(Год(Объект.Дата),1,1)))=366, Истина, Ложь);
	ФевральВисокосного = ?(ВисокосныйГод И Месяц(Объект.Дата)=2, Истина, Ложь);
	Запрос.УстановитьПараметр("ДатаЧерезГод", Дата(Год(Объект.Дата)+1, Месяц(Объект.Дата), ?(ФевральВисокосного, День(Объект.Дата)-1,День(Объект.Дата)) , Час(Объект.Дата), Минута(Объект.Дата),Секунда(Объект.Дата)));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВидРасчетаИнвест", Перечисления.ПринадлежностиРасчетовПоДоговорам.Инвестиционные);
	
	Возврат Запрос.Выполнить().Выбрать();
	
	
КонецФункции

//Начало_бит_Магомедов_20.12.2012 
Функция ПолучитьВыборкуПоЗагруженнымДанным()
	
	//Задаем таблицу соответствияСчетов
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ШаблонСчетаАксапта", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10)));
	ТаблицаСоответствия.Колонки.Добавить("СчетКраткосрочнойЗадолженности",Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	ТаблицаСоответствия.Колонки.Добавить("СчетИнвестиционныхДолгосрочныхАвансов",Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	//Для руб. счета 225 по группе счетов аксапта 60.02.х
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ШаблонСчетаАксапта = "60.02%";
	НоваяСтрока.СчетКраткосрочнойЗадолженности = Счет225;
	НоваяСтрока.СчетИнвестиционныхДолгосрочныхАвансов = Счет172;
	//Для вал. счета 226 по счету аксапта 60.22
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ШаблонСчетаАксапта = "60.22";
	НоваяСтрока.СчетКраткосрочнойЗадолженности = Счет226;
	НоваяСтрока.СчетИнвестиционныхДолгосрочныхАвансов = Счет178;
		
	
	Текст = "ВЫБРАТЬ
	|	ТаблицаСчетов.ШаблонСчетаАксапта,
	|	ТаблицаСчетов.СчетКраткосрочнойЗадолженности,
	|	ТаблицаСчетов.СчетИнвестиционныхДолгосрочныхАвансов
	|ПОМЕСТИТЬ ТаблицаСчетов
	|ИЗ
	|	&ТаблицаСоответствия КАК ТаблицаСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УстановкаВидовРасчетовПоДоговорамСрезПоследних.ДоговорКонтрагента
	|ПОМЕСТИТЬ ДоговораИнвест
	|ИЗ
	|	РегистрСведений.УстановкаВидовРасчетовПоДоговорам.СрезПоследних(&Граница, ) КАК УстановкаВидовРасчетовПоДоговорамСрезПоследних
	|ГДЕ
	|	УстановкаВидовРасчетовПоДоговорамСрезПоследних.ВидРасчета = &ВидРасчетаИнвест
	|
	|СГРУППИРОВАТЬ ПО
	|	УстановкаВидовРасчетовПоДоговорамСрезПоследних.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетов.СчетКраткосрочнойЗадолженности,
	|	ТаблицаСчетов.СчетИнвестиционныхДолгосрочныхАвансов,
	|	СБ_ДебиторскаяЗадолженностьAxapta.Контрагент,
	|	СБ_ДебиторскаяЗадолженностьAxapta.Договор,
	|	СБ_ДебиторскаяЗадолженностьAxapta.Валюта,
	|	СУММА(СБ_ДебиторскаяЗадолженностьAxapta.Сумма) КАК Сумма,
	|	СУММА(СБ_ДебиторскаяЗадолженностьAxapta.ВалютнаяСумма) КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ДанныеАксапта
	|ИЗ
	|	ТаблицаСчетов КАК ТаблицаСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СБ_ДебиторскаяЗадолженностьAxapta КАК СБ_ДебиторскаяЗадолженностьAxapta
	|		ПО (СБ_ДебиторскаяЗадолженностьAxapta.СчетAxapta ПОДОБНО ТаблицаСчетов.ШаблонСчетаАксапта)
	|ГДЕ
	|	НЕ СБ_ДебиторскаяЗадолженностьAxapta.СчетAxapta = НЕОПРЕДЕЛЕНО
	|	И НЕ СБ_ДебиторскаяЗадолженностьAxapta.Договор В
	|				(ВЫБРАТЬ
	|					ДоговораИнвест.ДоговорКонтрагента
	|				ИЗ
	|					ДоговораИнвест)
	|	И НАЧАЛОПЕРИОДА(СБ_ДебиторскаяЗадолженностьAxapta.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|	И СБ_ДебиторскаяЗадолженностьAxapta.СрокИсполнения > &ДатаЧерезГод
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСчетов.СчетКраткосрочнойЗадолженности,
	|	ТаблицаСчетов.СчетИнвестиционныхДолгосрочныхАвансов,
	|	СБ_ДебиторскаяЗадолженностьAxapta.Контрагент,
	|	СБ_ДебиторскаяЗадолженностьAxapta.Договор,
	|	СБ_ДебиторскаяЗадолженностьAxapta.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_Дополнительный_2Остатки.Счет КАК СчетКраткосрочнойЗадолженности,
	|	бит_Дополнительный_2Остатки.Субконто1,
	|	бит_Дополнительный_2Остатки.Субконто2,
	|	ЕСТЬNULL(бит_Дополнительный_2Остатки.Валюта, &Валюта_МСФО) КАК Валюта,
	|	СУММА(бит_Дополнительный_2Остатки.СуммаМУОстаток) КАК СуммаМУОстаток,
	|	СУММА(бит_Дополнительный_2Остатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток
	|ПОМЕСТИТЬ ОстаткиМСФО
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|			&Граница,
	|			Счет В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					ТаблицаСчетов.СчетКраткосрочнойЗадолженности
	|				ИЗ
	|					ТаблицаСчетов),
	|			&МассивВидовСубконто,
	|			Организация = &Организация
	|				И НЕ Субконто2 В
	|						(ВЫБРАТЬ
	|							ДоговораИнвест.ДоговорКонтрагента
	|						ИЗ
	|							ДоговораИнвест)) КАК бит_Дополнительный_2Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_Дополнительный_2Остатки.Счет,
	|	бит_Дополнительный_2Остатки.Субконто1,
	|	бит_Дополнительный_2Остатки.Субконто2,
	|	ЕСТЬNULL(бит_Дополнительный_2Остатки.Валюта, &Валюта_МСФО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиМСФО.СчетКраткосрочнойЗадолженности,
	|	ДанныеАксапта.СчетИнвестиционныхДолгосрочныхАвансов,
	|	ОстаткиМСФО.Субконто1 КАК Контрагент,
	|	ОстаткиМСФО.Субконто2 КАК ДоговорКонтрагента,
	|	ОстаткиМСФО.Валюта КАК ВалютаВзаиморасчетов,
	|	ОстаткиМСФО.СуммаМУОстаток КАК СальдоПоМСФО,
	|	ОстаткиМСФО.ВалютнаяСуммаОстаток КАК СальдоПоМСФОВВалютеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеАксапта.Сумма <= ОстаткиМСФО.СуммаМУОстаток
	|			ТОГДА ДанныеАксапта.Сумма
	|		ИНАЧЕ ОстаткиМСФО.СуммаМУОстаток
	|	КОНЕЦ КАК СуммаРеклассификации,
	|	ВЫБОР
	|		КОГДА ДанныеАксапта.ВалютнаяСумма <= ОстаткиМСФО.ВалютнаяСуммаОстаток
	|			ТОГДА ДанныеАксапта.ВалютнаяСумма
	|		ИНАЧЕ ОстаткиМСФО.ВалютнаяСуммаОстаток
	|	КОНЕЦ КАК СуммаРеклассификацииВВалютеВзаиморасчетов,
	|	0 КАК СальдоПоРСБУ,
	|	0 КАК СальдоПоРСБУВВалютеВзаиморасчетов
	|ИЗ
	|	ОстаткиМСФО КАК ОстаткиМСФО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеАксапта КАК ДанныеАксапта
	|		ПО ОстаткиМСФО.СчетКраткосрочнойЗадолженности = ДанныеАксапта.СчетКраткосрочнойЗадолженности
	|			И ОстаткиМСФО.Субконто1 = ДанныеАксапта.Контрагент
	|			И ОстаткиМСФО.Субконто2 = ДанныеАксапта.Договор
	|			И ОстаткиМСФО.Валюта = ДанныеАксапта.Валюта";
			
				   
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	
	ПараметрыГраницы = Новый Массив(2);
	ПараметрыГраницы[0] = КонецДня(Объект.Дата);
	ПараметрыГраницы[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),ПараметрыГраницы);	
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Объект.Дата));
	ВисокосныйГод = ?(ДеньГода(КонецГода(Дата(Год(Объект.Дата),1,1)))=366, Истина, Ложь);
	ФевральВисокосного = ?(ВисокосныйГод И Месяц(Объект.Дата)=2, Истина, Ложь);
	Запрос.УстановитьПараметр("ДатаЧерезГод", Дата(Год(Объект.Дата)+1, Месяц(Объект.Дата), ?(ФевральВисокосного, День(Объект.Дата)-1,День(Объект.Дата)) , Час(Объект.Дата), Минута(Объект.Дата),Секунда(Объект.Дата)));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВидРасчетаИнвест", Перечисления.ПринадлежностиРасчетовПоДоговорам.Инвестиционные);
	Запрос.УстановитьПараметр("ТаблицаСоответствия", ТаблицаСоответствия);
	Запрос.УстановитьПараметр("Валюта_МСФО",фКэшЗначений.ВалютаМСФО);
	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);
	Запрос.УстановитьПараметр("МассивВидовСубконто",МассивВидовСубконто);
	Возврат Запрос.Выполнить().Выбрать();
	
	
КонецФункции

//Конец_бит_Магомедов_20.12.2012 

// Процедура выполняет заполнение в форме документа валюту МСФО.
//
// Параметры:
//  Нет.
//
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

// БИТ Тртилек 03.07.2012 Функция выполняет проверку заполненности всех настроек в РС "Настройки (МСФО)"
&НаСервере 
Функция ПроверитьЗаполнениеНастроек()
		
	ПрерватьВыполнение = ЛОЖЬ;	
	
	НаборЗаписейНастройки = РегистрыСведений.бит_му_Настройки.СоздатьНаборЗаписей();
	НаборЗаписейНастройки.Отбор.Группа.Установить("Реклассификация на основе первичных данных");
	НаборЗаписейНастройки.Прочитать();
	
	Если НаборЗаписейНастройки.Количество() > 0 Тогда
		
		 ТаблицаНастроек = НаборЗаписейНастройки.Выгрузить();
		 
		 Строки225 = ТаблицаНастроек.Найти("Предоплаты выданные", "ИмяНастройки");
		 Если Строки225 = Неопределено Тогда
			 Сообщить("Создайте настройку МСФО - ""Предоплаты выданные"""); //225
			 ПрерватьВыполнение = Истина;
		 Иначе
			 Счет225 = Строки225.Значение;
		 КонецЕсли;
		 
		 Строки226 = ТаблицаНастроек.Найти("Предоплаты выданные в валюте", "ИмяНастройки");
		 Если Строки226 = Неопределено Тогда
			 Сообщить("Создайте настройку МСФО - ""Предоплаты выданные в валюте"""); //226
			 ПрерватьВыполнение = Истина;
		 Иначе
			 Счет226 = Строки226.Значение;
		 КонецЕсли;
		 
		 Строки174 = ТаблицаНастроек.Найти("Предоплаты под ОС и НМА", "ИмяНастройки");
		 Если Строки174= Неопределено Тогда
			 Сообщить("Создайте настройку МСФО - ""Предоплаты под ОС и НМА"""); //174
			 ПрерватьВыполнение = Истина;
		 Иначе
			 Счет174 = Строки174.Значение;
		 КонецЕсли;
		 
		 Строки175 = ТаблицаНастроек.Найти("Предоплаты под ОС и НМА в валюте", "ИмяНастройки");
		 Если Строки175= Неопределено Тогда
			 Сообщить("Создайте настройку МСФО - ""Предоплаты под ОС и НМА в валюте""");//175
			 ПрерватьВыполнение = Истина;
		 Иначе
			 Счет175 = Строки175.Значение;
		 КонецЕсли;
		 
		 Строки172 = ТаблицаНастроек.Найти("Прочие долгосрочные авансы выданные", "ИмяНастройки");
		 Если Строки172= Неопределено Тогда
			 Сообщить("Создайте настройку МСФО - ""Прочие долгосрочные авансы выданные"""); //172
			 ПрерватьВыполнение = Истина;
		 Иначе
			 Счет172 = Строки172.Значение;
		 КонецЕсли;
		 
		  Строки178 = ТаблицаНастроек.Найти("Прочие долгосрочные авансы в валюте", "ИмяНастройки");
		 Если Строки178= Неопределено Тогда
			 Сообщить("Создайте настройку МСФО - ""Прочие долгосрочные авансы в валюте"""); //178
			 ПрерватьВыполнение = Истина;
		 Иначе
			 Счет178 = Строки178.Значение;
		 КонецЕсли;


	Иначе
		Сообщить("Создайте группу настроек МСФО - ""Реклассификация на основе первичных данных""");
		ПрерватьВыполнение = Истина;
	КонецЕсли;
	
	Возврат ПрерватьВыполнение;
	
КонецФункции


&НаКлиенте
Процедура УстановитьВсеКоманда(Команда)
	Для Каждого Строка Из Объект.ДанныеРеклассификации Цикл
		Строка.ИспользоватьСуммуРСБУ = Истина;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СнятьВсеКоманда(Команда)
	Для Каждого Строка Из Объект.ДанныеРеклассификации Цикл
		Строка.ИспользоватьСуммуРСБУ = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРеклассификацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанСумма = ТекущийЭлемент.ТекущиеДанные.СуммаРеклассификации;
	ТекДанСуммаВал = ТекущийЭлемент.ТекущиеДанные.СуммаРеклассификацииВВалютеВзаиморасчетов;
КонецПроцедуры


&НаКлиенте
Процедура ДанныеРеклассификацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ТекущийЭлемент.ТекущиеДанные.СуммаРеклассификации <> ТекДанСумма ИЛИ ТекущийЭлемент.ТекущиеДанные.СуммаРеклассификацииВВалютеВзаиморасчетов <> ТекДанСуммаВал Тогда
		ТекущийЭлемент.ТекущиеДанные.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

