#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция выполняет поиск проформы указанного вида по номеру.
// 
// Параметры:
//  ВидПроформы - СправочникСсылка.бит_ВидыПроформ.
//  Номер - Строка.
//  Дата  - Дата.
//  Назначение - ПеречислениеСсылка.бит_НазначенияПроформ.
//  ВидНомера - Строка.
// 
// Возвращаемое значение:
//  РезДок - ДокументСсылка.бит_Проформы.
// 
Функция НайтиПроформуПоНомеру(ВидПроформы, Номер, Дата, Назначение, ВидНомера = "Номер") Экспорт

	РезДок = Документы.бит_Проформы.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПроформы"  , ВидПроформы);
	Запрос.УстановитьПараметр("Номер"        , Номер);
	Запрос.УстановитьПараметр("Назначение"   , Назначение);
	Запрос.УстановитьПараметр("ДатаНачала"   , НачалоГода(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецГода(Дата));
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_Проформы.Ссылка
	               |ИЗ
	               |	Документ.бит_Проформы КАК бит_Проформы
	               |ГДЕ
	               |	бит_Проформы.%ВидНомера% = &Номер
	               |	И бит_Проформы.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
				   |    И бит_Проформы.Назначение = &Назначение
	               |	И бит_Проформы.ВидПроформы = &ВидПроформы";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВидНомера%", ВидНомера);			   
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РезДок = Выборка.Ссылка;
	
	КонецЕсли; 

	Возврат РезДок;
	
КонецФункции // НайтиПроформуПоНомеру()

// Функция готовит данные для выгрузки проформ в Excel.
// 
// Параметры:
//  вхПроформы - Массив
// 
// Возвращаемое значение:
//  ДанныеДляВыгрузки - Массив.
// 
Функция ПодготовитьДанныеДляВыгрузки(вхПроформы)  Экспорт
	
	ДанныеДляВыгрузки = Новый Массив;
	СисИнфо = бит_ОбщегоНазначения.ПолучитьСведенияОПрограмме();
	
	Для каждого ТекПроформа Из вхПроформы Цикл
		
		ДанныеДокумента = ПодготовитьДанныеДокумента(ТекПроформа);		
		
		СтрНабор = Новый Структура;
		СтрНабор.Вставить("ПсевдоМетаданные", Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(ТекПроформа.ВидПроформы)); 
		СтрНабор.Вставить("Данные"          , ДанныеДокумента);
		СтрНабор.Вставить("НомерРелизаБИТ"  , СисИнфо.НомерРелиза_1С);
		
		НаименованиеПроформы = НСтр("ru = '%1% №%2% от %3%'");
	    НомерДляВывода = ?(ЗначениеЗаполнено(ДанныеДокумента.НомерПроформы), ДанныеДокумента.НомерПроформы, ДанныеДокумента.Номер);
		НаименованиеПроформы = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НаименованиеПроформы
		                                                                                   , ТекПроформа.ВидПроформы
																						   , НомерДляВывода
																						   , ДанныеДокумента.Дата); 
		СтрНабор.Вставить("Наименование", НаименованиеПроформы);
		ДанныеДляВыгрузки.Добавить(СтрНабор);
		
	КонецЦикла; 
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции // ПодготовитьДанныеДляВыгрузки()

// Функция возвращает структуру данных документа.
// 
// Параметры:
//  Проформа - ДокументСсылка.бит_Проформы.
// 
// Возвращаемое значение:
//  ДанныеДокумента - Структура.
// 
Функция ПодготовитьДанныеДокумента(Проформа) Экспорт

	ПсевдоМета = Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(Проформа.ВидПроформы);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Проформа);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_Проформы.Ссылка,
	               |	бит_Проформы.ПометкаУдаления,
	               |	бит_Проформы.Номер,
	               |	бит_Проформы.НомерПроформы,
	               |	бит_Проформы.Дата,
	               |	бит_Проформы.Проведен,
	               |	бит_Проформы.ВидПроформы,
	               |	бит_Проформы.ВалютаДокумента,
	               |	бит_Проформы.КурсДокумента,
	               |	бит_Проформы.КратностьДокумента,
	               |	бит_Проформы.Ответственный,
	               |	бит_Проформы.СуммаДокумента,
	               |	бит_Проформы.Сценарий,
	               |	бит_Проформы.Организация,
	               |	бит_Проформы.ЦФО,
	               |	бит_Проформы.Проект
	               |ИЗ
	               |	Документ.бит_Проформы КАК бит_Проформы
	               |ГДЕ
	               |	бит_Проформы.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ПроформыДанныеШапки.Ссылка,
	               |	бит_ПроформыДанныеШапки.НомерСтроки,
	               |	бит_ПроформыДанныеШапки.ИмяРеквизита,
	               |	бит_ПроформыДанныеШапки.ЗначениеРеквизита
	               |ИЗ
	               |	Документ.бит_Проформы.ДанныеШапки КАК бит_ПроформыДанныеШапки
	               |ГДЕ
	               |	бит_ПроформыДанныеШапки.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_ПроформыДанныеТабличныхЧастей.Ссылка,
	               |	бит_ПроформыДанныеТабличныхЧастей.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	               |	бит_ПроформыДанныеТабличныхЧастей.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
	               |	бит_ПроформыДанныеТабличныхЧастей.ИмяРеквизита,
	               |	бит_ПроформыДанныеТабличныхЧастей.ЗначениеРеквизита
	               |ИЗ
	               |	Документ.бит_Проформы.ДанныеТабличныхЧастей КАК бит_ПроформыДанныеТабличныхЧастей
	               |ГДЕ
	               |	бит_ПроформыДанныеТабличныхЧастей.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_ДанныеТабличныхЧастейПроформ.Проформа,
	               |	бит_ДанныеТабличныхЧастейПроформ.ИмяТабличнойЧасти,
	               |	бит_ДанныеТабличныхЧастейПроформ.НомерСтрокиТаблицы,
	               |	бит_ДанныеТабличныхЧастейПроформ.ИмяРеквизита,
	               |	бит_ДанныеТабличныхЧастейПроформ.ЗначениеРеквизита
	               |ИЗ
	               |	РегистрСведений.бит_ДанныеТабличныхЧастейПроформ КАК бит_ДанныеТабличныхЧастейПроформ
	               |ГДЕ
	               |	бит_ДанныеТабличныхЧастейПроформ.Проформа = &Ссылка
	               |ИТОГИ ПО
	               |	ИмяТабличнойЧасти,
	               |	НомерСтрокиТаблицы";
				   
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеДокумента = Новый Структура;
	
	// Формирование данных шапки
	ВыборкаРеквизиты = МассивРезультатов[0].Выбрать();
	ВыборкаРеквизиты.Следующий();
	
	ДанныеДокумента.Вставить("Номер"             , ВыборкаРеквизиты.Номер);
	ДанныеДокумента.Вставить("НомерПроформы"     , ВыборкаРеквизиты.НомерПроформы);	
	ДанныеДокумента.Вставить("Дата"              , ВыборкаРеквизиты.Дата);
	ДанныеДокумента.Вставить("Ссылка"            , ВыборкаРеквизиты.Ссылка);
	ДанныеДокумента.Вставить("ПометкаУдаления"   , ВыборкаРеквизиты.ПометкаУдаления);
	ДанныеДокумента.Вставить("Проведен"          , ВыборкаРеквизиты.Проведен);
	ДанныеДокумента.Вставить("ВидПроформы"       , ВыборкаРеквизиты.ВидПроформы);
	ДанныеДокумента.Вставить("ВалютаДокумента"   , ВыборкаРеквизиты.ВалютаДокумента);
	ДанныеДокумента.Вставить("КурсДокумента"     , ВыборкаРеквизиты.КурсДокумента);
	ДанныеДокумента.Вставить("КратностьДокумента", ВыборкаРеквизиты.КратностьДокумента);
	ДанныеДокумента.Вставить("СуммаДокумента"    , ВыборкаРеквизиты.СуммаДокумента);
	ДанныеДокумента.Вставить("Ответственный"     , ВыборкаРеквизиты.Ответственный);
	ДанныеДокумента.Вставить("Организация"       , ВыборкаРеквизиты.Организация);
	ДанныеДокумента.Вставить("ЦФО"               , ВыборкаРеквизиты.ЦФО);
	ДанныеДокумента.Вставить("Проект"            , ВыборкаРеквизиты.Проект);
	ДанныеДокумента.Вставить("Сценарий"          , ВыборкаРеквизиты.Сценарий);
	
	
	ТаблицаДанныеШапки = МассивРезультатов[1].Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныеШапки Цикл
		
		ИмяРеквизита = СтрЗаменить(СтрокаТаблицы.ИмяРеквизита,"Шапка_","");
		ДанныеДокумента.Вставить(ИмяРеквизита, СтрокаТаблицы.ЗначениеРеквизита);
	
	КонецЦикла; 
	
	Для каждого МетаРеквизит Из ПсевдоМета.Реквизиты Цикл
		
		Если ДанныеДокумента.Свойство(МетаРеквизит.Имя) = Ложь Тогда
		
			ДанныеДокумента.Вставить(МетаРеквизит.Имя, МетаРеквизит.Тип.ПривестиЗначение());
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Формирование данных табличных частей
	ВыборкаТабЧасть = МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТабЧасть.Следующий() Цикл
		
		МодельТаблицы = Новый Массив;
		
		ВыборкаСтрока = ВыборкаТабЧасть.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрока.Следующий() Цикл
			
			МодельСтроки = ИнициализироватьМодельСтроки(ПсевдоМета, ВыборкаТабЧасть.ИмяТабличнойЧасти);
			
			ВыборкаДетали = ВыборкаСтрока.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетали.Следующий() Цикл
				
				Если МодельСтроки.Свойство(ВыборкаДетали.ИмяРеквизита) Тогда
					
					МодельСтроки[ВыборкаДетали.ИмяРеквизита] = ВыборкаДетали.ЗначениеРеквизита;
					
				Иначе
					
					МодельСтроки.Вставить(ВыборкаДетали.ИмяРеквизита, ВыборкаДетали.ЗначениеРеквизита);
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			МодельТаблицы.Добавить(МодельСтроки);
			
		КонецЦикла; // ВыборкаСтрока
		
		ДанныеДокумента.Вставить(ВыборкаТабЧасть.ИмяТабличнойЧасти, МодельТаблицы);
		
	КонецЦикла; // ВыборкаТабЧасть
	
	// Проверим наличие ключей соответствующих табличным частям.
	Для каждого КиЗ Из ПсевдоМета.ТабличныеЧасти Цикл
	
		ИмяТабЧасти = КиЗ.Ключ;
		
		Если НЕ ДанныеДокумента.Свойство(ИмяТабЧасти) Тогда
		
			ДанныеДокумента.Вставить(ИмяТабЧасти, Новый Массив);
		
		КонецЕсли; 
	
	КонецЦикла; // ПсевдоМета.ТабличныеЧасти
	
	Возврат ДанныеДокумента;
	
КонецФункции // ПодготовитьДанныеДокумента()

// Функция формирует объект по структуре данных.
// 
// Параметры:
//  ДанныеДокумента  - Структура
//  
// Возвращаемое значение:
//   ДокументОбъект.бит_Проформы
// 
Функция ПолучитьОбъектПоСтруктуреДанных(ДанныеДокумента) Экспорт

	СсылкаНаДокумент = ДанныеДокумента.Ссылка;
	ПроформаОбъект = СсылкаНаДокумент.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ПроформаОбъект, ДанныеДокумента);
	
    ВидПроформы = СсылкаНаДокумент.ВидПроформы;
	
	ПсевдоМета    = Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(ВидПроформы);
	ФиксРеквизиты = Новый СписокЗначений;
    СписокФиксированныеРеквизиты(ФиксРеквизиты);
	
	// Восстанавливаем реквизиты шапки
	ПроформаОбъект.ДанныеШапки.Очистить();
	
	Для каждого МетаРеквизит Из ПсевдоМета.Реквизиты Цикл
		
		Если бит_ПроформыКлиентСервер.ЭтоФиксированныйРеквизит(МетаРеквизит.Имя, ФиксРеквизиты) Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекЗнч = Неопределено;
		ДанныеДокумента.Свойство(МетаРеквизит.Имя, ТекЗнч);
		
		Если ЗначениеЗаполнено(ТекЗнч) Тогда
			
			НоваяСтрока = ПроформаОбъект.ДанныеШапки.Добавить();
			НоваяСтрока.ИмяРеквизита      = МетаРеквизит.Имя;
			НоваяСтрока.ЗначениеРеквизита = ТекЗнч;
			
		КонецЕсли; 
		
	КонецЦикла; // По реквизитам
	
	// Восстанавливаем данные табличных частей
	ТабДанныеТабличныхЧастей = КонструкторТаблицыХраненияТабЧасти();
	
	Для каждого КиЗ Из ПсевдоМета.ТабличныеЧасти Цикл
		
		МетаТабЧасть = КиЗ.Значение;
		
		МодельТабЧасти = Неопределено;
		Если ДанныеДокумента.Свойство(МетаТабЧасть.Имя, МодельТабЧасти) Тогда
			
			Сч = 1;
			Для каждого МодельСтроки Из МодельТабЧасти Цикл
				
				Для каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
					
					ТекЗнч = Неопределено;
					МодельСтроки.Свойство(МетаРеквизит.Имя, ТекЗнч);
					
					Если ЗначениеЗаполнено(ТекЗнч) Тогда
					
						НоваяСтрока = ТабДанныеТабличныхЧастей.Добавить();
						НоваяСтрока.ИмяТабличнойЧасти = МетаТабЧасть.Имя;
						НоваяСтрока.НомерСтрокиТаблицы= Сч;
						НоваяСтрока.ИмяРеквизита      = МетаРеквизит.Имя;
						НоваяСтрока.ЗначениеРеквизита = ТекЗнч;
					
					КонецЕсли; 
					
				КонецЦикла; // По реквизитам
				
			Сч = Сч+1;	
			КонецЦикла; // По строкам
			
		КонецЕсли; 
		
	КонецЦикла; // По табличным частям
	
	ПроформаОбъект.СохранитьДанныеТабЧастей(ТабДанныеТабличныхЧастей);
	
	Возврат ПроформаОбъект;
	
КонецФункции // ПолучитьОбъектПоСтруктуреДанных()

// Процедура определяет имена регистров - приемников МХО 
// и помещает полученный массив в дополнительные свойства объекта. Данный массив будет 
// использоваться для проверки необходимости выполнения трансляции.
// 
// Параметры:
//  ПроформаОбъект - ДокументОбъект.бит_Проформа.
// 
Процедура ЗаполнитьПриемникиПроформы(ПроформаОбъект) Экспорт

   ПриемникиМХО = Новый Массив;	
	
   Для каждого СтрокаТаблицы Из ПроформаОбъект.ВидПроформы.НастройкиДвижений Цикл
	   
	   Если НЕ СтрокаТаблицы.Активность Тогда
	   
	   	    Продолжить;
	   
	   КонецЕсли; 
	   
	   ИмяРегистра = СтрокаТаблицы.ШаблонДвижений.Регистр.ИмяРегистра;
	   Если ПриемникиМХО.Найти(ИмяРегистра) = Неопределено Тогда
		   
		   ПриемникиМХО.Добавить(ИмяРегистра);
		   
	   КонецЕсли; 
   
   КонецЦикла; 	

   ПроформаОбъект.ДополнительныеСвойства.Вставить("бит_ПриемникиМХО", ПриемникиМХО);
   
КонецПроцедуры // ЗаполнитьПриемникиПроформы() 

// Процедура инициализирует колонки таблицы значений, моделирующую табличную часть.
// 
// Параметры:
//  ТабДанные - ТаблицаЗначений.
//  ИмяТабЧасти - Строка
//  ПсевдоМета  - Структура
// 
Процедура ИнициализироватьКолонкиТабличнойЧасти(ТабДанные, ИмяТабЧасти, ПсевдоМета) Экспорт
	
	Если ПсевдоМета.ТабличныеЧасти.Свойство(ИмяТабЧасти) Тогда
		
		МетаТабЧасть = ПсевдоМета.ТабличныеЧасти[ИмяТабЧасти];
		
		Для каждого КиЗ Из МетаТабЧасть.Реквизиты Цикл
			
			МетаРеквизит = КиЗ.Значение;
			
			ТабДанные.Колонки.Добавить(МетаРеквизит.Имя, МетаРеквизит.Тип, МетаРеквизит.Синоним);
			
		КонецЦикла; // МетаТабЧасть.Реквизиты
		
	КонецЕсли; 
	
КонецПроцедуры // ИнициализироватьКолонкиТабличнойЧасти() 

// Функция инициализирует структуру, моделирующую строку табличной части.
// 
// Параметры:
//  ПсевдоМета - Структура
//  ИмяТабЧасти - Строка
// 
// Возвращаемое значение:
//  МодельСтроки - Структура.
// 
Функция ИнициализироватьМодельСтроки(ПсевдоМета, ИмяТабЧасти)  Экспорт
	
	МодельСтроки = Новый Структура;
	
	Если ПсевдоМета.ТабличныеЧасти.Свойство(ИмяТабЧасти) Тогда
	
		МетаТабЧасть = ПсевдоМета.ТабличныеЧасти[ИмяТабЧасти];
		
		Для каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
		
			МодельСтроки.Вставить(МетаРеквизит.Имя, МетаРеквизит.Тип.ПривестиЗначение());
		
		КонецЦикла; // МетаТабЧасть.Реквизиты
	
	КонецЕсли; 
	
	Возврат МодельСтроки;
	
КонецФункции // ИнициализироватьМодельСтроки()

// Процедура возвращает список имен реквизитов, которые присутствуют в проформе 
// как обычные реквизиты документа.
// 
// Параметры:
//  СписокФиксРекв - СписокЗначений.
// 
Процедура СписокФиксированныеРеквизиты(СписокФиксРекв) Экспорт

	СписокФиксРекв.Очистить();
	СписокФиксРекв.Добавить(ВРег("Сценарий"));
	СписокФиксРекв.Добавить(ВРег("Организация"));
	СписокФиксРекв.Добавить(ВРег("ЦФО"));
	СписокФиксРекв.Добавить(ВРег("Проект"));
	
КонецПроцедуры // СписокФиксированныеРеквизиты()

// Процедура преобразует данные модели проформы, загруженной из Эксель в данные ИБ.
// 
// Параметры:
//  МодельДокумента - Структура.
//  ПсевдоМетаданные - Структура.
//  СпискиИсточники - Соответствие.
// 
Процедура РаспознатьДанные(МодельДокумента, ПсевдоМетаданные, СпискиИсточники) Экспорт
	
	// Преобразование стандартных реквизитов
	Для каждого МетаРеквизит Из ПсевдоМетаданные.СтандартныеРеквизиты Цикл
		
		ИмяРеквизита = МетаРеквизит.Имя;
		ЗагруженныйЭлемент = Неопределено;
		Если МодельДокумента.Свойство(ИмяРеквизита, ЗагруженныйЭлемент) Тогда 
			
			ТекТип = ЗагруженныйЭлемент.Мета.Тип;
			
			ЗагруженныйЭлемент.Значение = бит_ОбменДаннымиЭксельСервер.ПреобразоватьЗагруженноеЗначение(ЗагруженныйЭлемент.ЗначениеСтр, ТекТип, ЗагруженныйЭлемент.ИмяСписка, СпискиИсточники);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	// Преобразование данных шапки
	Для каждого МетаРеквизит Из ПсевдоМетаданные.Реквизиты Цикл
		
		ИмяРеквизита = МетаРеквизит.Имя;
		ЗагруженныйЭлемент = Неопределено;
		Если МодельДокумента.Свойство(ИмяРеквизита, ЗагруженныйЭлемент) Тогда 
			
			ТекТип = ЗагруженныйЭлемент.Мета.Тип;
			
			ЗагруженныйЭлемент.Значение = бит_ОбменДаннымиЭксельСервер.ПреобразоватьЗагруженноеЗначение(ЗагруженныйЭлемент.ЗначениеСтр, ТекТип, ЗагруженныйЭлемент.ИмяСписка, СпискиИсточники);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	// Преобразование данных табличных частей
	Для каждого КиЗ Из ПсевдоМетаданные.ТабличныеЧасти Цикл
		
		МетаТабЧасть = КиЗ.Значение;
		
		Если МодельДокумента.Свойство(МетаТабЧасть.Имя) Тогда
			
			МассивДанных = МодельДокумента[МетаТабЧасть.Имя].МассивДанных;
			Колонки      = МодельДокумента[МетаТабЧасть.Имя].Колонки;
			
			ТабВрем = Новый ТаблицаЗначений;
			
			Для каждого КиЗ_Колонки Из Колонки Цикл
				
				НастройкаКолонки = КиЗ_Колонки.Значение; 
				
				ТабВрем.Колонки.Добавить(НастройкаКолонки.Имя);
				
			КонецЦикла; 
			
			Если МассивДанных.Количество() > 0 Тогда
				
				КоличествоСтрок = МассивДанных[0].Количество();
				
			Иначе
				
				КоличествоСтрок = 0;
				
			КонецЕсли; 
			
			Для н = 1 По КоличествоСтрок Цикл
				
				ТабВрем.Добавить();
				
			КонецЦикла; 
			
			Для каждого КиЗ_Колонки Из Колонки Цикл
				
				НастройкаКолонки = КиЗ_Колонки.Значение; 
				
				ТекМассив = МассивДанных[НастройкаКолонки.Номер];
				МассивПреобр = Новый Массив;
				
				Для каждого ВхЗнч Из ТекМассив Цикл
					
					ПреобрЗнч = бит_ОбменДаннымиЭксельСервер.ПреобразоватьЗагруженноеЗначение(ВхЗнч, НастройкаКолонки.Мета.Тип, НастройкаКолонки.ИмяСписка, СпискиИсточники);
					МассивПреобр.Добавить(ПреобрЗнч);
					
				КонецЦикла; 
				
				ТабВрем.ЗагрузитьКолонку(МассивПреобр, НастройкаКолонки.Имя);
				
			КонецЦикла; 
			
			МодельДокумента[МетаТабЧасть.Имя].ТаблицаДанных = ТабВрем;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // РаспознатьДанные() 

// Функция возвращает максимальное количество строк в табличной части после которого 
// сохранение данных будет производиться в РегистреСведений.бит_ДанныеТабличныхЧастейПроформ.
// 
// Возвращаемое значение:
//  КолСтрок - Число.
// 
Функция ПредельныйРазмерТабЧасти() Экспорт

	КолСтрок = 99999;

	Возврат КолСтрок;
	
КонецФункции // ПредельныйРазмерТабЧасти()

// Функция инициализирует таблицу значений, 
// соответствующую структуре хранения данных табличных частей проформ.
// 
// Возвращаемое значение:
//  Таб - ТаблицаЗначений.
// 
Функция КонструкторТаблицыХраненияТабЧасти() Экспорт
	
	Таб = Новый ТаблицаЗначений;;
	
	Таб.Колонки.Добавить("Проформа"          ,Новый ОписаниеТипов("ДокументСсылка.бит_Проформы"));
	Таб.Колонки.Добавить("ИмяТабличнойЧасти" , Новый ОписаниеТипов("Строка"));
	Таб.Колонки.Добавить("НомерСтрокиТаблицы", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("ИмяРеквизита"      , Новый ОписаниеТипов("Строка"));
	Таб.Колонки.Добавить("ЗначениеРеквизита");
	
	Возврат Таб;
	
КонецФункции // КонструкторТаблицыХраненияТабЧасти()

// Функция возвращает результат запроса с данными табличных частей проформы.
// 
// Параметры:
//  Проформа
// 
// Возвращаемое значение:
//  ТабДанные - РезультатЗапроса.
// 
Функция ПолучитьДанныеТабличныхЧастей(Проформа) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проформа", Проформа);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеТабличныхЧастей.Ссылка КАК Проформа,
	|	ДанныеТабличныхЧастей.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	ДанныеТабличныхЧастей.НомерСтрокиТаблицы КАК НомерСтрокиТаблицы,
	|	ДанныеТабличныхЧастей.ИмяРеквизита,
	|	ДанныеТабличныхЧастей.ЗначениеРеквизита
	|ИЗ
	|	Документ.бит_Проформы.ДанныеТабличныхЧастей КАК ДанныеТабличныхЧастей
	|ГДЕ
	|	ДанныеТабличныхЧастей.Ссылка = &Проформа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеТабличныхЧастей.Проформа,
	|	ДанныеТабличныхЧастей.ИмяТабличнойЧасти,
	|	ДанныеТабличныхЧастей.НомерСтрокиТаблицы,
	|	ДанныеТабличныхЧастей.ИмяРеквизита,
	|	ДанныеТабличныхЧастей.ЗначениеРеквизита
	|ИЗ
	|	РегистрСведений.бит_ДанныеТабличныхЧастейПроформ КАК ДанныеТабличныхЧастей
	|ГДЕ
	|	ДанныеТабличныхЧастей.Проформа = &Проформа
	|ИТОГИ ПО
	|	ИмяТабличнойЧасти,
	|	НомерСтрокиТаблицы";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеТабличныхЧастей()

// Функция определяет имя таблицы проформы из которой будет выполнена загрузка 
// данных в БюджетнуюОперацию/ФормуВвода.
//
// Параметры:
//   ПсевдоМетаданные - Структура.
//
// Возвращаемое значение:
//  ИмяТаблицы - Строка.
//
Функция ИмяТаблицыДляЗагрузкиДанныхБюджета(ПсевдоМетаданные)  Экспорт

	ИмяТаблицы = "";
	
	Если ПсевдоМетаданные.ТабличныеЧасти.Свойство("БДДС") Тогда
	
		ИмяТаблицы = "БДДС";
		
    ИначеЕсли ПсевдоМетаданные.ТабличныеЧасти.Свойство("ФактическиеДанные")	Тогда
		
		ИмяТаблицы = "ФактическиеДанные";
		
	ИначеЕсли ПсевдоМетаданные.ТабличныеЧасти.Свойство("ДанныеБюджета")	 Тогда
		
		ИмяТаблицы = "ДанныеБюджета";
		
	ИначеЕсли ПсевдоМетаданные.ТабличныеЧасти.Количество() > 0 Тогда	
		
		Для каждого КиЗ Из ПсевдоМетаданные.ТабличныеЧасти Цикл
		
			ИмяТаблицы = КиЗ.Ключ;
			Прервать;
		
		КонецЦикла; 
		
	КонецЕсли; 

	Возврат ИмяТаблицы;
	
КонецФункции // ИмяТаблицыДляЗагрузкиДанныхБюджета()

// Функция получает видо проформы и эмулирует метаданные проформы.
//
// Параметры:
//   ИмяПроформы - Строка
//
// Возвращаемое значение:
//  РезСтр - Структура.
//
Функция ДанныеВидаПроформы(ИмяПроформы) Экспорт

	РезСтр = Новый Структура("ВидПроформы, ПсевдоМетаданные, ИмяТаблицыДанных");
	
	РезСтр.ВидПроформы = Справочники.бит_ВидыПроформ.НайтиПоРеквизиту("Имя",ИмяПроформы);
	
	Если ЗначениеЗаполнено(РезСтр.ВидПроформы) Тогда
		
		РезСтр.ПсевдоМетаданные = Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(РезСтр.ВидПроформы);
		РезСтр.ИмяТаблицыДанных = Документы.бит_Проформы.ИмяТаблицыДляЗагрузкиДанныхБюджета(РезСтр.ПсевдоМетаданные);
		
	КонецЕсли; 

	Возврат РезСтр;
	
КонецФункции // ДанныеВидаПроформы()

#КонецОбласти

#КонецЕсли
