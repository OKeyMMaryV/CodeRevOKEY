#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриЗаписи".
// 
Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
	
	НаборДанные = РегистрыСведений.бит_ДанныеТабличныхЧастейПроформ.СоздатьНаборЗаписей();
	НаборДанные.Отбор.Проформа.Использование = Истина;
	НаборДанные.Отбор.Проформа.ВидСравнения  = ВидСравнения.Равно;
	НаборДанные.Отбор.Проформа.Значение      = Ссылка;
	
	Если ДополнительныеСвойства.Свойство("ДанныеТабличныхЧастей") 
		И ТипЗнч(ДополнительныеСвойства.ДанныеТабличныхЧастей) = Тип("ТаблицаЗначений") Тогда
		
		// Запись данных табличных частей в регистр сведений.
        ДополнительныеСвойства.ДанныеТабличныхЧастей.ЗаполнитьЗначения(Ссылка, "Проформа");		
		НаборДанные.Загрузить(ДополнительныеСвойства.ДанныеТабличныхЧастей);
		бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборДанные,"Ошибки");		
		
	Иначе	
		
		// Очистка регистра с данными табличных частей, т.к. для данной проформы данные храняться непосредственно в документе.
		НаборДанные.Прочитать();
		
		Если НаборДанные.Количество() > 0 Тогда
			
			НаборДанные.Очистить();
			бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборДанные,"Ошибки");
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;	
	
	ПсевдоМета      = Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(ВидПроформы);
	ДанныеДокумента = Документы.бит_Проформы.ПодготовитьДанныеДокумента(Ссылка);
	
	ДополнительныеСвойства.Вставить("бит_ДанныеДокумента", ДанныеДокумента);
	
	ПроверкаЗаполненияПроформы(ПсевдоМета, ДанныеДокумента, Отказ);
	
	Документы.бит_Проформы.ЗаполнитьПриемникиПроформы(ЭтотОбъект);
    
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсДокумента      = 1;
	КратностьДокумента = 1;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
	
		 ДанныеЗаполнения.Свойство("Назначение", Назначение);
	
	КонецЕсли; 
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ПриУстановкеНовогоНомера".
// 
Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = СформироватьПрефикс();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция формирует префикс документа.
// 
// Возвращаемое значение:
//  Строка - префикс.
// 
Функция СформироватьПрефикс() Экспорт
	
	Если Назначение = Перечисления.бит_НазначенияПроформ.ПроизвольнаяФорма Тогда		
		Префикс =  НСтр("ru = 'ПФ-'");		
	Иначе		
		Префикс = "";		
	КонецЕсли; 
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() ИЛИ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда			
		ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(ЭтотОбъект, Истина, Префикс);		
	КонецЕсли; 	
	
	Возврат Префикс;
	
КонецФункции // СформироватьПрефикс()

// Процедура сохраняет данные табличных частей проформы в табличную часть ДанныеТабличныхЧастей 
// или заполняет соответсвующий ключ структуры ДополнительныеСвойства для последующего сохранения данных в регистр. 
// 
// Параметры:
//  ТабДанные - ТаблицаЗначений.
// 
Процедура СохранитьДанныеТабЧастей(ТабДанные) Экспорт

	ДанныеТабличныхЧастей.Очистить();
	
	Предел = Документы.бит_Проформы.ПредельныйРазмерТабЧасти();
	
	Если ТабДанные.Количество() > Предел Тогда
		
		// Данные необходимо хранить в регистре сведений, т.к. превышен предельный размер табличной части.
		ДополнительныеСвойства.Вставить("ДанныеТабличныхЧастей", ТабДанные);
		
	Иначе	
		
		// Заполнение табличной части
		ДанныеТабличныхЧастей.Загрузить(ТабДанные);
		
	КонецЕсли; 

КонецПроцедуры // СохранитьДанныеТабЧастей() 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет проверку реквизитов проформы. 
// 
// Параметры:
//  ПсевдоМета - Структура
//  ДанныеДокумента - Структура
//  Отказ - Булево
// 
Процедура ПроверкаЗаполненияПроформы(ПсевдоМета, ДанныеДокумента, Отказ)

	// Проверка заполнения реквизитов шапки
	Для каждого МетаРеквизит Из ПсевдоМета.Реквизиты Цикл
		
		Если МетаРеквизит.ПроверкаЗаполнения И НЕ ЗначениеЗаполнено(ДанныеДокумента[МетаРеквизит.Имя]) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнено значение реквизита ""%1%""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, МетаРеквизит.Синоним);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,"Шапка_"+МетаРеквизит.Имя);
			Отказ = Истина;
			
		КонецЕсли; 
		
	КонецЦикла; // ПсевдоМета.Реквизиты
	
	// Проверка заполнения реквизитов табличных частей.
	Для каждого КиЗ Из ПсевдоМета.ТабличныеЧасти Цикл
		
		МетаТабЧасть = КиЗ.Значение;
		
		Если НЕ ДанныеДокумента.Свойство(МетаТабЧасть.Имя) Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ТабЧасть = ДанныеДокумента[МетаТабЧасть.Имя];
		
		Сч = 1;
		Для каждого СтрокаТаблицы Из ТабЧасть Цикл
			
			Для каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
				
				ЗначениеДляПроверки = СтрокаТаблицы[МетаРеквизит.Имя];
				
				Если МетаРеквизит.ПроверкаЗаполнения И НЕ ЗначениеЗаполнено(ЗначениеДляПроверки) Тогда
					
					ТекстСообщения = НСтр("ru = 'Не заполнено значение реквизита ""%1%"" в строке ""%2%"" табличной части ""%3%""!'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																								, МетаРеквизит.Синоним
																								, Строка(Сч)
																								, МетаТабЧасть.Синоним);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					Отказ = Истина;
					
				КонецЕсли; 
				
			КонецЦикла;  // МетаТабЧасть.Реквизиты
			
			Сч = Сч+1;
		КонецЦикла; 
		
	КонецЦикла; // ПсевдоМета.ТабличныеЧасти

КонецПроцедуры // ПроверкаЗаполненияПроформы()

#КонецОбласти

#КонецЕсли
