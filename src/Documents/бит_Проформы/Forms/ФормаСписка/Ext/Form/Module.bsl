
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
 	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.СписокПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);
	
	// Определение назначения проформы
	Если Параметры.Свойство("Назначение") Тогда
	
		Назначение = Перечисления.бит_НазначенияПроформ[Параметры.Назначение];
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Назначение) Тогда
	
		Назначение = Перечисления.бит_НазначенияПроформ.ФормаСбораДанных;
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Назначение) Тогда
		
		// Установка отбора списка по назначению
		ЭлОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Назначение");
		ЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлОтбора.ПравоеЗначение = Назначение;
		ЭлОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	Иначе	
		
		ТекстСообщения =  НСтр("ru = 'Данная форма не предназначена для непосредственного использования.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли; 
	
	// Проверка лицензии
	бит_ОбщегоНазначения.ПроверитьДоступностьПроформ(Назначение, Отказ);
	
	// Настройка формы в зависимости от назначения.
	ЭтоФСД = ?(Назначение = Перечисления.бит_НазначенияПроформ.ПроизвольнаяФорма, Ложь, Истина);
	
	Если ЭтоФСД Тогда
		
		Заголовок =  НСтр("ru = 'Формы сбора данных'");
		
		// Изменение кода. Начало. 28.02.2018{{
		Если НЕ ПолучитьФункциональнуюОпцию("бит_УХ") Тогда
			ВызватьИсключение НСтр("ru = 'Функционал доступен только в версии БИТ.ФИНАНС:Холдинг.'");
		КонецЕсли;	
		// Изменение кода. Конец. 28.02.2018}}
	Иначе	
		Заголовок =  НСтр("ru = 'Произвольные формы'");
	КонецЕсли; 
	
	Элементы.ФормаКомандаЗагрузить.Видимость = ЭтоФСД;
		
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ОткрытьФорму("Обработка.бит_ЗагрузкаПроформ.Форма",ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	МассивСтрок =  Элементы.Список.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбраны проформы для выгрузки!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	Иначе	
		
		Состояние( НСтр("ru = 'Выгрузка в Excel'")+"...");
		
		ДанныеДляВыгрузки = ПодготовитьДанныеДляВыгрузки(МассивСтрок);
		
		Если ДанныеДляВыгрузки.Количество() > 0 Тогда
			
			бит_ПроформыКлиентСервер.ВыгрузитьПроформы(ДанныеДляВыгрузки);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Нет данных для выгрузки!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует структуру данных, необходимых для выгрузки  проформ.
// 
// Параметры:
//  МассивСтрок - Массив
// 
// Возвращаемое значение:
//  ДанныеДляВыгрузки - Структура.
// 
&НаСервере
Функция ПодготовитьДанныеДляВыгрузки(МассивПроформ)
	
	ДанныеДляВыгрузки = Документы.бит_Проформы.ПодготовитьДанныеДляВыгрузки(МассивПроформ);
	
	Возврат ДанныеДляВыгрузки;
	
КонецФункции // ПодготовитьДанныеДляВыгрузки()

#КонецОбласти
