#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Переменная, хранящее значение структуры шапки документа.
	Перем СтруктураШапкиДокумента;
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов
	ВидыКурсов = Новый Структура("Упр,Регл,МУ, Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата,ВидыКурсов);
	
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	Если НЕ ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = НСтр("ru='Для организации ""%1%"" не указана валюта международного учета!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтруктураШапкиДокумента.Организация);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
	
	КонецЕсли; 
	
	// Получим исторические(на дату принятия к учету) курсы валют по каждому НМА.
	МассивНМА = НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив");
	МассивНМА = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНМА);
	ИсторическиеКурсы = ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, КонецМесяца(СтруктураШапкиДокумента.Дата), СтруктураКурсыВалют);

	// Поиск уже выполненных начислений амортизации.
	НайтиЗадвоенныеНачисления(Отказ,Заголовок);
	
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц,СтруктураШапкиДокумента,Отказ,Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц, СтруктураКурсыВалют, ИсторическиеКурсы, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("НематериальныйАктив");
	
	// Проверим наличие дублей в табличной части "НематериальныеАктивы".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 ,"НематериальныеАктивы"
																	 ,СтруктураНеДублирующихсяПолей
																	 ,Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента) Экспорт
	
	// Сформируем структуру параметров для получения таблицы параметров.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_НМА);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_НМА);
	
	МассивВНА = НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив");
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.НематериальныеАктивы);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("НематериальныйАктив", МассивВНА);
	СтруктураПараметров.Вставить("МоментВремени"   , КонецМесяца(СтруктураШапкиДокумента.Дата));
	СтруктураПараметров.Вставить("ПараметрыВНА"	   , ПараметрыВНА);
	
	// Получим таблицу параметров
	ТаблицаПараметров = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");

	МассивСчетовУчета = ТаблицаПараметров.ВыгрузитьКолонку("СчетУчета_НМА");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета);
	
	МассивСчетовСнижения = ТаблицаПараметров.ВыгрузитьКолонку("СчетСниженияСтоимости_НМА");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСнижения);
	
	// Получим таблицу данных
	Запрос = Новый Запрос;
	
    Запрос.УстановитьПараметр("Ссылка"				, Ссылка);
	Запрос.УстановитьПараметр("МоментВремени"   	, КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация"     	, Организация);
	Запрос.УстановитьПараметр("МассивСчетовУчета"	, МассивСчетовУчета);
	Запрос.УстановитьПараметр("МассивСчетовСнижения", МассивСчетовСнижения);
	Запрос.УстановитьПараметр("МассивНМА"			, МассивВНА);
	Запрос.УстановитьПараметр("МассивСубконто"		, МассивСубконто);
	Запрос.УстановитьПараметр("СостояниеПринято"							, Перечисления.бит_му_СостоянияНМА.ПринятоКУчету);	
	Запрос.УстановитьПараметр("ПараметрНачислятьАмортизацию"				, ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_НМА);
	Запрос.УстановитьПараметр("ПараметрНачислятьАмортизациюСТекущегоПериода", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизациюСТекущегоПериода_НМА);
	//++СисИнфо //установка параметра объекта строительства //2012-07-23
	Запрос.УстановитьПараметр("ПараметрОбъектСтроительства", ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ОбъектСтроительства);
	//--СисИнфо
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Параметры.НематериальныйАктив,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Параметры.Параметр = &ПараметрНачислятьАмортизацию
	|				ТОГДА Параметры.ЗначениеПараметра
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК НачислятьАмортизацию,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Параметры.Параметр = &ПараметрНачислятьАмортизациюСТекущегоПериода
	|				ТОГДА Параметры.ЗначениеПараметра
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК НачислятьАмортизациюСТекущегоПериода
	//++СисИнфо //получение параметра объекта строительства //2012-07-23
	|	,МАКСИМУМ(ВЫБОР
	|			КОГДА Параметры.Параметр = &ПараметрОбъектСтроительства
	|				ТОГДА Параметры.ЗначениеПараметра
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ОбъектСтроительства
	//--СисИнфо		
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыНМА.СрезПоследних(
	|			&МоментВремени,
	|			НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						бит_му_НачислениеАмортизацииОСОсновныеСредства.НематериальныйАктив
	|					ИЗ
	|						Документ.бит_му_НачислениеАмортизацииНМА.НематериальныеАктивы КАК бит_му_НачислениеАмортизацииОСОсновныеСредства
	|					ГДЕ
	|						бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка = &Ссылка)
	|				И Организация = &Организация
	|				И (Параметр = &ПараметрНачислятьАмортизацию
	// 1c-izhtc, ChuckNorris, 14.08.2015 ( 
	//|					ИЛИ Параметр = &ПараметрНачислятьАмортизациюСТекущегоПериода)) КАК Параметры
	|					ИЛИ Параметр = &ПараметрНачислятьАмортизациюСТекущегоПериода ИЛИ Параметр = &ПараметрОбъектСтроительства)) КАК Параметры
	// 1c-izhtc, ChuckNorris, 14.08.2015 ) 	
	|
	|СГРУППИРОВАТЬ ПО
	|	Параметры.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧасть.НомерСтроки,
	|	ТабЧасть.НематериальныйАктив КАК НематериальныйАктив,
	|	ТабЧасть.СуммаАмортизации КАК СуммаАмортизации,
	|	ТабЧасть.ПервоначальнаяСтоимость - ТабЧасть.НачисленнаяАмортизация - ТабЧасть.СуммаОбесценения - ТабЧасть.ЛиквидационнаяСтоимость - ТабЧасть.СуммаАмортизации КАК БалансоваяСтоимостьПосле,
	|	ТабЧасть.СпособОтраженияРасходовПоАмортизации,
	|	СпособыОтражения.СчетЗатрат,
	|	СпособыОтражения.Субконто1,
	|	СпособыОтражения.Субконто2,
	|	СпособыОтражения.Субконто3,
	|	СпособыОтражения.Субконто4,
	|	ЕСТЬNULL(СпособыОтражения.Коэффициент, 0) КАК Коэффициент,
	|	ТабЧасть.СчетНачисленияАмортизации,
	|	ЕСТЬNULL(ТаблицаПараметров.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизацию,
	|	ЕСТЬNULL(ТаблицаПараметров.НачислятьАмортизациюСТекущегоПериода, ЛОЖЬ) КАК НачислятьАмортизациюСТекущегоПериода,
	//++СисИнфо //получаем параметр объект строительства //2012-07-23
	|	ЕСТЬNULL(ТаблицаПараметров.ОбъектСтроительства, ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)) КАК ОбъектСтроительства,
	//--СисИнфо	
	|	ЕСТЬNULL(СостоянияНМА.ДатаСостояния, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчету,
	|	ЕстьNULL(бит_Дополнительный_2ПервоначальнаяСтоимость.СуммаРеглОстатокДт, 0) - ЕстьNULL(бит_Дополнительный_2Амортизация.СуммаРеглОстатокКт, 0) - ЕстьNULL(бит_Дополнительный_2Обесценение.СуммаРеглОстатокКт, 0) КАК ОстатокАмортизацииРегл,
	|	ЕстьNULL(бит_Дополнительный_2ПервоначальнаяСтоимость.СуммаУпрОстатокДт, 0) - ЕстьNULL(бит_Дополнительный_2Амортизация.СуммаУпрОстатокКт, 0) - ЕстьNULL(бит_Дополнительный_2Обесценение.СуммаУпрОстатокКт, 0) КАК ОстатокАмортизацииУпр,
	|	ЕстьNULL(бит_Дополнительный_2ПервоначальнаяСтоимость.СуммаМУОстатокДт, 0) - ЕстьNULL(бит_Дополнительный_2Амортизация.СуммаМУОстатокКт, 0) - ЕстьNULL(бит_Дополнительный_2Обесценение.СуммаМУОстатокКт, 0) КАК ОстатокАмортизацииМУ
	|ИЗ
	|	Документ.бит_му_НачислениеАмортизацииНМА.НематериальныеАктивы КАК ТабЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_му_СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтражения
	|		ПО ТабЧасть.СпособОтраженияРасходовПоАмортизации = СпособыОтражения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров
	|		ПО ТабЧасть.НематериальныйАктив = ТаблицаПараметров.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияНМА КАК СостоянияНМА
	|		ПО ТабЧасть.НематериальныйАктив = СостоянияНМА.НематериальныйАктив
	|			И (СостоянияНМА.Организация = &Организация)
	|			И (СостоянияНМА.Состояние = &СостояниеПринято)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&МоментВремени, , &МассивСубконто, Организация = &Организация И Субконто1 В (&МассивНМА)) КАК бит_Дополнительный_2Амортизация
	|		ПО ТабЧасть.НематериальныйАктив = бит_Дополнительный_2Амортизация.Субконто1
	|			И ТабЧасть.СчетНачисленияАмортизации = бит_Дополнительный_2Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&МоментВремени, Счет В (&МассивСчетовУчета),  &МассивСубконто, Организация = &Организация И Субконто1 В (&МассивНМА)) КАК бит_Дополнительный_2ПервоначальнаяСтоимость
	|		ПО ТабЧасть.НематериальныйАктив = бит_Дополнительный_2ПервоначальнаяСтоимость.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&МоментВремени, Счет В (&МассивСчетовСнижения),  &МассивСубконто, Организация = &Организация И Субконто1 В (&МассивНМА)) КАК бит_Дополнительный_2Обесценение
	|		ПО ТабЧасть.НематериальныйАктив = бит_Дополнительный_2Обесценение.Субконто1
	|ГДЕ
	|	ТабЧасть.Ссылка = &Ссылка
	|ИТОГИ
	|	МАКСИМУМ(СуммаАмортизации),
	|	МАКСИМУМ(БалансоваяСтоимостьПосле),
	|	МАКСИМУМ(ОстатокАмортизацииРегл),
	|	МАКСИМУМ(ОстатокАмортизацииУпр),
	|	МАКСИМУМ(ОстатокАмортизацииМУ)
	|ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров";
				   
	
	Результат = Запрос.Выполнить();
	
	
	СтруктураТаблиц = Новый Структура;

	СтруктураТаблиц.Вставить("НМА", Результат);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицуБДДС()

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Получим список ОС документа.
	СписокВНА = НематериальныеАктивы.ВыгрузитьКолонку("НематериальныйАктив");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(СписокВНА, Истина);
	
	СтруктураШапкиДокумента.Вставить("СписокВНА", СписокВНА);
		
	
КонецПроцедуры

// Функция формирует массив недоступных параметров ОС в зависимости от
// от метода начисления амортизации.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.ОсновныеСредства.
// 
// Возвращаемое значение:
//  МассивНедоступныхПараметров - Массив;
// 
Функция СформироватьМассивНедоступныхПараметров(ТекущаяСтрока) Экспорт
	
	МассивНедоступныхПараметров = Новый Массив;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат МассивНедоступныхПараметров;
	КонецЕсли;
	
	МенеджерПеречисления	   = Перечисления.бит_му_МетодыНачисленияАмортизации;
	МетодНачисленияАмортизации = ТекущаяСтрока.МетодНачисленияАмортизации;
	
	Если МетодНачисленияАмортизации = МенеджерПеречисления.Линейный
		Или МетодНачисленияАмортизации = МенеджерПеречисления.УменьшаемогоОстатка Тогда
		
		МассивНедоступныхПараметров.Добавить("ПредполагаемыйОбъемПродукции");
		
	КонецЕсли;
	
	Возврат МассивНедоступныхПараметров;
	
КонецФункции // СформироватьМассивНедоступныхПараметров()

// Процедура очищает недоступные параметры НМА в зависимости от метода начисления амортизации.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.НМА.
// 
Процедура ОчиститьНедоступныеПараметрыНМА(ТекущаяСтрока) Экспорт
	
	// Получим массив недоступных параметров.
	МассивНедоступныхПараметров = СформироватьМассивНедоступныхПараметров(ТекущаяСтрока);
	
	Для Каждого ТекИмяПараметра Из МассивНедоступныхПараметров Цикл
		ТекущаяСтрока[ТекИмяПараметра] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьНедоступныеПараметрыОС()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Процедура выполняет валютные пересчеты из валюты МУ в валюту документа.
// 
// Параметры:
//  ПараметрыНМА
// 
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыНМА) Экспорт
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ВидыКурсов = Новый Структура("МУ, Документ");
	
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	МассивСуммДляПересчета = Новый Массив;
	МассивСуммДляПересчета.Добавить("СуммаАмортизации");
	МассивСуммДляПересчета.Добавить("ПервоначальнаяСтоимость");
	МассивСуммДляПересчета.Добавить("НачисленнаяАмортизация");
	МассивСуммДляПересчета.Добавить("СуммаОбесценения");
	МассивСуммДляПересчета.Добавить("ЛиквидационнаяСтоимость");
	
	МассивНМА = Новый Массив; 
	Для каждого КлючИЗначение Из ПараметрыНМА Цикл
		МассивНМА.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	СоответствиеНМАиКурсовДокумента = бит_му_ВНА.ПолучитьСоответствиеНМАиКурсовНаДатуПринятия(МассивНМА, СтруктураКурсыВалют, Организация);
	
	Для Каждого КлючИЗначение Из ПараметрыНМА Цикл
		
		КурсыМУ 	  = СоответствиеНМАиКурсовДокумента[КлючИЗначение.Ключ].МУ;
		КурсыДокумент = СоответствиеНМАиКурсовДокумента[КлючИЗначение.Ключ].Документ;
		
		НМА = КлючИЗначение.Значение;
		
		Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
			
			
			НМА[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(НМА[ИмяСуммы]
							,КурсыМУ.Валюта
							,КурсыДокумент.Валюта
							,КурсыМУ.Курс
							,КурсыДокумент.Курс
							,КурсыМУ.Кратность
							,КурсыДокумент.Кратность);
		КонецЦикла; 
		
	КонецЦикла;

	
КонецПроцедуры // ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль()

// Функция получает параметры, передаваемые в обработку подбора НМА.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("Организация"		  , Организация);                             
	ПараметрыПодбора.Вставить("Режим"			  , Перечисления.бит_му_РежимыПодбораВНА.НачислениеАмортизацииНМА);
	//++СисИнфо //передаем конец дня, а не конец месяца //2012-08-02
	//ПараметрыПодбора.Вставить("ДатаОкончания"	  , КонецМесяца(Дата));
	ПараметрыПодбора.Вставить("ДатаОкончания", КонецДня(Дата));
	//--СисИнфо
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

// Процедура заполняет табличную часть "НематериальныеАктивы".
// 
// Параметры:
//  ВыбранноеЗначение - Структура.
//  ЭтоНовыйДокумент  - Булево.
// 
Процедура ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(ВыбранноеЗначение, ЭтоНовыйДокумент = Истина) Экспорт
	
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов, ОписаниеТаблицы.ПереченьОбъектов_Колонки);

	// Получаем параметры и рассчитываем амортизацию.
	МассивНМА = ТаблицаДанных.ВыгрузитьКолонку("ВНА");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНМА);
	
	//++СисИнфо //Передаем в функцию расчета параметр граница, вместо момента времени, для корректного расчета //2012-08-02
	//МоментВремени = ?(ЭтоНовыйДокумент, КонецДня(Дата), Ссылка.МоментВремени());
	//ПараметрыНМА = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивНМА, Организация,МоментВремени,Истина);	
	Массив = Новый Массив(2);
	Массив[0] = КонецДня(Дата);
	Массив[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),Массив);
	ПараметрыНМА = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивНМА, Организация,Граница,Истина);	
	//--СисИнфо
	
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыНМА); 
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("НематериальныйАктив", СтрокаТаблицы.ВНА);
		
		МассивСтрок = НематериальныеАктивы.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = НематериальныеАктивы.Добавить();
			НоваяСтрока.НематериальныйАктив = СтрокаТаблицы.ВНА;
			
			// Находим результат расчета амортизации и заполняем табличную часть.
			СтрокаПараметров = ПараметрыНМА[СтрокаТаблицы.ВНА];
			Если СтрокаПараметров <> Неопределено Тогда				
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПараметров);		
				//++СисИнфо //заполнение реквизита Объект строительства //2012-07-23
				НоваяСтрока.сис_ОбъектСтроительства = СтрокаПараметров["ОбъектСтроительства"];
				//--СисИнфо
			КонецЕсли; 
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Нематериальный актив ""%1%"" уже подобран в строке №%2%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ВНА, НайденнаяСтрока.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных			

КонецПроцедуры // ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, Организация, ВидОперации
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ ЭтотОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	// Получим валюту международного учета.
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	ИзменениеВалютыМодуль();
	
	// Заполняет табличную часть "НематериальныеАктивы"
	ВыбранноеЗначение = ВыполнитьПодборНМА();
	ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(ВыбранноеЗначение);	

КонецПроцедуры // ЗаполнитьДокумент()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		
		Дата = КонецМесяца(ТекущаяДатаСеанса());
		
	Иначе
		
		Дата = КонецМесяца(Дата);
		
	КонецЕсли; 
	
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Функция выполняет подбор ОС через обработку подбора
//
Функция ВыполнитьПодборНМА()
	
	ПараметрыПодбора  = ЗаполнитьПараметрыПодбора();
	ОбработкаПодбора  = Обработки.бит_му_ПодборВНА.Создать();
	ВыбранноеЗначение = ОбработкаПодбора.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	
	Возврат ВыбранноеЗначение;
	
КонецФункции // ВыполнитьПодборНМА()

//  Осуществляет поиск задвоенных начислений амортизации НМА в текущем периоде.
// 
Процедура НайтиЗадвоенныеНачисления(Отказ,Заголовок)
	
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("ДатаНачала"   ,НачалоМесяца(Дата));
	запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(Дата));
	запрос.УстановитьПараметр("Ссылка"       ,Ссылка);
	
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ТекДокумент.НематериальныйАктив,
	             |	ТекДокумент.Ссылка
	             |ИЗ
	             |	Документ.бит_му_НачислениеАмортизацииНМА.НематериальныеАктивы КАК ТекДокумент
	             |ГДЕ
	             |	ТекДокумент.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	             |	И ТекДокумент.Ссылка.Проведен
	             |	И ТекДокумент.Ссылка.Ссылка <> &Ссылка
	             |	И ТекДокумент.НематериальныйАктив В
	             |			(ВЫБРАТЬ
	             |				ТекДокумент.НематериальныйАктив
	             |			ИЗ
	             |				Документ.бит_му_НачислениеАмортизацииНМА.НематериальныеАктивы КАК ТекДокумент
	             |			ГДЕ
	             |				ТекДокумент.Ссылка = &Ссылка)";
				 
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.НематериальныйАктив) Тогда
			ТекстСообщения = НСтр("ru='По нематериальному активу № ""%1%"" было проведено начисление амортизации за период: %2%. Повторное начисление амортизации невозможно!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																				, Выборка.НематериальныйАктив
																				, Формат(Дата,"ДФ=MMMM-YYYY"));
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // бит_НайтиЗадвоенныеНачисления()

// Процедура проверяет правильность заполнения строк таблиц документа.
// 
// Параметры: 
//  СтруктураТаблиц			- Структура, таблицы значений, содержащая данные для проведения и проверки.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВыборкаОС = СтруктураТаблиц.НМА.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОС.Следующий() Цикл
	
		ВыборкаДетали = ВыборкаОС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДетали.Следующий() Цикл
			  
			  
			  Если НЕ ВыборкаДетали.НачислятьАмортизацию Тогда
				  
				  ТекстСообщения = НСтр("ru='По нематериальному активу ""%1%"" амортизация не начисляется!'");
				  ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ВыборкаДетали.НематериальныйАктив);				  
				  бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
				  
			  КонецЕсли; 
			  
			  
			  Если ВыборкаДетали.НачислятьАмортизацию 
				  И НЕ ВыборкаДетали.НачислятьАмортизациюСТекущегоПериода
				  И КонецМесяца(ВыборкаДетали.ДатаПринятияКУчету) = КонецМесяца(СтруктураШапкиДокумента.Дата)  Тогда
				  
				  ТекстСообщения = НСтр("ru='По нематериальному активу ""%1%"" за период %2% амортизация не начисляется!'");
				  ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
				  																	, ВыборкаДетали.НематериальныйАктив
																					, Формат(СтруктураШапкиДокумента.Дата,"ДФ=MMMM-YYYY"));			  
				  бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
				  
			  КонецЕсли; 
			  
			  
			  // В остальных записях группировки НМА тот же - достаточно проверить первую запись группировки.
			  Прервать;
			  
		КонецЦикла; // По детальным записям
	
	КонецЦикла; // По НМА

	
КонецПроцедуры // ПроверитьЗаполнениеТаблицДокумента()

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,СтруктураТаблиц, СтруктураКурсыВалют, ИсторическиеКурсы, Отказ, Заголовок)
	
	
	// Движения по регистру бухгалтерии бит_Дополнительный_2.
	
	ВыборкаНМА = СтруктураТаблиц.НМА.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНМА.Следующий() Цикл
		
		ВыборкаДетали = ВыборкаНМА.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Последний месяц начисления амортизации по НМА.
		Если ВыборкаНМА.БалансоваяСтоимостьПосле <= 0 Тогда
			СуммаАмортизацииОбщая = ВыборкаНМА.ОстатокАмортизацииМУ;
			
			СуммаАмортизацииОбщаяРегл = ВыборкаНМА.ОстатокАмортизацииРегл;
			СуммаАмортизацииОбщаяУпр = ВыборкаНМА.ОстатокАмортизацииУпр;
			
			СуммаАмортизацииУпрНачисленная = 0;
			СуммаАмортизацииРеглНачисленная = 0;
		Иначе
			СуммаАмортизацииОбщая = ВыборкаНМА.СуммаАмортизации;
		КонецЕсли;
		СуммаАмортизацииНачисленная = 0;
		
		нд = 1;
		ФлагСброшен = Ложь;
		КоличествоДетали = ВыборкаДетали.Количество();
		Пока ВыборкаДетали.Следующий() Цикл
			
			// Распределяем согласно коэффициентам способа отражения расходов.
			СуммаАмортизации = Окр(СуммаАмортизацииОбщая*ВыборкаДетали.Коэффициент,2);
			СуммаАмортизацииНачисленная = СуммаАмортизацииНачисленная+СуммаАмортизации;
			
			// Убираем ошибки округления
			Если нд = КоличествоДетали Тогда
				
				СуммаАмортизации = СуммаАмортизации+СуммаАмортизацииОбщая-СуммаАмортизацииНачисленная;
				
			КонецЕсли; 
			
			// Формируем движение по начислению амортизации
			// ДТ СчетЗатрат КТ СчетНачисленияАмортизации СуммаАмортизации.
			Проводка = СоздатьЗаписьПоНачислениюАмортизации(СтруктураШапкиДокумента,ВыборкаДетали,СуммаАмортизации,ИсторическиеКурсы[ВыборкаДетали.НематериальныйАктив]);
			
			// Если полностью самортизировали НМА - будем использовать не расчетные суммы, а остатки по регистру.
			Если ВыборкаДетали.БалансоваяСтоимостьПосле <= 0
				И НЕ Проводка = Неопределено Тогда
				СуммаАмортизацииУпр = Окр(СуммаАмортизацииОбщаяУпр*ВыборкаДетали.Коэффициент,2);
				СуммаАмортизацииУпрНачисленная = СуммаАмортизацииУпрНачисленная+СуммаАмортизацииУпр;
				СуммаАмортизацииРегл = Окр(СуммаАмортизацииОбщаяРегл*ВыборкаДетали.Коэффициент,2);
				СуммаАмортизацииРеглНачисленная = СуммаАмортизацииРеглНачисленная+СуммаАмортизацииРегл;
				
				// Убираем ошибки округления
				Если нд = КоличествоДетали Тогда
					СуммаАмортизацииУпр = СуммаАмортизацииУпр+СуммаАмортизацииОбщаяУпр-СуммаАмортизацииУпрНачисленная;
					СуммаАмортизацииРегл = СуммаАмортизацииРегл+СуммаАмортизацииОбщаяРегл-СуммаАмортизацииРеглНачисленная;
				КонецЕсли;
				
				Проводка.СуммаУпр  = СуммаАмортизацииУпр;
				Проводка.СуммаРегл = СуммаАмортизацииРегл;
				
			КонецЕсли;
			
			// Если полностью самортизировали НМА - сбрасываем флаг НачислятьАмортизацию.
			Если НЕ ФлагСброшен 
				И ВыборкаДетали.БалансоваяСтоимостьПосле <=0 Тогда
				
				Запись = Движения.бит_му_ПараметрыНМА.Добавить();
				Запись.Период      = СтруктураШапкиДокумента.Дата;
				Запись.Организация = СтруктураШапкиДокумента.Организация;
				Запись.НематериальныйАктив = ВыборкаДетали.НематериальныйАктив;
				Запись.Параметр            = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_НМА;
				Запись.ЗначениеПараметра   = Ложь;
				ФлагСброшен                = Истина;
				
			КонецЕсли; 
			
			нд = нд+1;
			
			КонецЦикла; // По детальным записям
			
			// По регистру события НМА
			Запись = Движения.бит_му_СобытияНМА.Добавить();
			Запись.Период              = СтруктураШапкиДокумента.Дата;
			Запись.Организация         = СтруктураШапкиДокумента.Организация;
			Запись.НематериальныйАктив = ВыборкаНМА.НематериальныйАктив;
			Запись.Событие             = Перечисления.бит_му_СобытияНМА.НачислениеАмортизации;
			
		КонецЦикла; // По ОС
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует проводку по списанию амортизации НМА.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  СтрокаТаблицы            - СтрокаТаблицыЗначений.
//  ВалютаМУ                 - СправочникСсылка.Валюты.
//  СтруктураКурсыВалют      - Структура.
//                
Функция СоздатьЗаписьПоНачислениюАмортизации(СтруктураШапкиДокумента,СтрокаТаблицы,Сумма,СтруктураКурсыВалют)

	Если Сумма = 0 Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	//++СисИнфо //заполнение доп.аналитики по регистру //2012-07-23
	Запись.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
	//--СисИнфо
	
	// Заполнение атрибутов записи	
	СодержаниеПроводки = НСтр("ru='начислена амортизация'");
						 
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										   ,СтруктураШапкиДокумента.Организация
										   //++СисИнфо //формируем движение на конец дня документа, а не на конец месяца //2012-07-30
										   //,КонецМесяца(СтруктураШапкиДокумента.Дата) 
										   ,КонецДня(СтруктураШапкиДокумента.Дата)
										   //--СисИнфо	
										   // ,мВалютаМеждУчета
										   ,СтруктураКурсыВалют.Документ.Валюта
										   ,СтрокаТаблицы.СчетЗатрат
										   ,СтрокаТаблицы.СчетНачисленияАмортизации
										   ,Сумма
										   ,СодержаниеПроводки);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись,СтруктураПараметров);											   
	
	// Заполнение аналитики	
	
	Для ном = 1 по мКоличествоСубконтоМУ Цикл
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,ном,СтрокаТаблицы["Субконто"+ном]);			
		
	КонецЦикла; 
	
	//++СисИнфо //заполнение аналитики по объекту строительства //2012-07-23
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,"Объект",СтрокаТаблицы.ОбъектСтроительства);
	//--СисИнфо	
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт
	                                            ,Запись.СубконтоКт
												,"НематериальныеАктивы"
												,СтрокаТаблицы.НематериальныйАктив);		
	
												
	//++СисИнфо	//заполнение аналитики по объекту строительства //2012-07-23
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт
	                                            ,Запись.СубконтоКт
												,"Объект"
												,СтрокаТаблицы.ОбъектСтроительства);
	//--СисИнфо
	
	// Выполнение валютных пересчетов	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Сумма");
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтруктураПараметров
													,Запись
													,МассивИмен
													,СтруктураКурсыВалют
													,СтруктураКурсыВалют.Документ);

	//ОК Калинин 170513
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт,Запись.СубконтоКт,"Периоды",Период);		
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт,Запись.СубконтоДт,"Периоды",Период);		
	//ОК Калинин
	
	Возврат Запись;
	
КонецФункции // СоздатьЗаписьПоСписаниюАмортизации()

Функция ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, Период, СтруктураКурсыВалют)
	
	ИсторическиеКурсы = бит_му_ВНА.ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивНМА, Период, СтруктураКурсыВалют);	
	
	// Изменение кода. Начало. 18.04.2014{{
	// получим соответствие НМА и курсов валюты документа на дату принятия соответствующего НМА.
	СоответствиеНМАиКурсовДокумента = бит_му_ВНА.ПолучитьСоответствиеНМАиКурсовНаДатуПринятия(МассивНМА, СтруктураКурсыВалют.Документ, Организация);
	
	// Для Каждого ТекНМА Из ИсторическиеКурсы Цикл
	// 	ТекНМА.Значение.Документ = ТекНМА.Значение.МУ;
	// КонецЦикла;
	
	Для Каждого ТекНМА Из ИсторическиеКурсы Цикл
		ТекНМА.Значение.Документ = СоответствиеНМАиКурсовДокумента[ТекНМА.Ключ].Документ;
	КонецЦикла;
	// Изменение кода. Конец. 18.04.2014}}
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
