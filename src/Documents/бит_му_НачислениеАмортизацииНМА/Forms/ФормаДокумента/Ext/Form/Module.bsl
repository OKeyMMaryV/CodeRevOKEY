
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			Объект.Дата = КонецМесяца(ТекущаяДата());
			
			// Очистим параметры в табличной части
			КолонкиНМА = Объект.НематериальныеАктивы.Выгрузить().Колонки;
			
			Для Каждого СтрокаТаблицы Из Объект.НематериальныеАктивы Цикл
				
				ОчиститьСтрокуТабЧасти(СтрокаТаблицы,КолонкиНМА);
				
			КонецЦикла; // По строкам табличной части 
			
		КонецЕсли; // Объект скопирован
		
		// Установим валюту межд. учета
		ЗаполнитьВалютуМСФО();
		УстановитьСостояниеДокумента();
		
		//ОК Довбешка Т. 01.07.2013
		ОбновитьПериод();
		//ОК Довбешка Т.
		
	Иначе
		
		ЗаполнитьВалютуМСФО(Ложь);
		
	КонецЕсли;
	
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Дата");
	фКэшРеквизитов.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();
	
	УстановитьПараметрыВыбораДляСчетов();
	
	УправлениеЭлементамиФормы();
	
	//ОК Калинин 170513
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.бит_му_НачислениеАмортизацииНМА.ФормаДокументаУправляемая");
	//ОК Калинин
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Действие") Тогда
			
			Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
				
				Если Объект.НематериальныеАктивы.Количество() > 0 Тогда
					
					Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
					ТекстВопроса = НСтр("ru='Табличная часть ""Нематериальные активы"" будет очищена. Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					
				Иначе
					
					ОбработатьПодборНМА(ВыбранноеЗначение);
					
				КонецЕсли;
				
			Иначе
				
				ОбработатьПодборНМА(ВыбранноеЗначение);
				
			КонецЕсли; 
			
			
			
		КонецЕсли; // В структуре есть поле действие 
		
	КонецЕсли; // Это структура
	
КонецПроцедуры

// Процедура - завершение выбора НМА 
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НематериальныеАктивы.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьПодборНМА(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_НачислениеАмортизацииНМА";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата <> фКэшРеквизитов.Дата 
		И Объект.НематериальныеАктивы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеДаты", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Результат расчета амортизации будет очищен. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДатаПриИзмененииСервер();
		
		фКэшРеквизитов.Дата = Объект.Дата;
		
	КонецЕсли;
	
	//ОК Калинин М. 290413
	ОбновитьПериод();
	//ОК Калинин М.
	
КонецПроцедуры

// Процедура - завершение изменения реквизита "Дата".
// 
&НаКлиенте
Процедура ОбработатьИзменениеДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Объект.Дата = фКэшРеквизитов.Дата;
		Возврат;
	КонецЕсли;
	
	ДатаПриИзмененииСервер();
	
	фКэшРеквизитов.Дата = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация <> фКэшРеквизитов.Организация 
		И Объект.НематериальныеАктивы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть ""Нематериальные активы"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		фКэшРеквизитов.Организация = Объект.Организация;
		
		// Установим валюту межд. учета
		ЗаполнитьВалютуМСФО();
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НематериальныеАктивы.Очистить();
	Иначе
		Объект.Организация = фКэшРеквизитов.Организация;
		Возврат;
	КонецЕсли;
	
	фКэшРеквизитов.Организация = Объект.Организация;
		
	// Установим валюту межд. учета
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.НематериальныеАктивы;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.НематериальныеАктивы;
		
		// Получим курсы валют на дату принятия к учету для каждого ОС.
		КурсыСтарые = ПолучитьКурсыВалютПоПериодам(мКэшРеквизитовФормы);
		КурсыНовые = ПолучитьКурсыВалютПоПериодам(,Истина);
		
		МассивСуммДляПересчета = Новый Массив;
		МассивСуммДляПересчета.Добавить("СуммаАмортизации");
		МассивСуммДляПересчета.Добавить("ПервоначальнаяСтоимость");
		МассивСуммДляПересчета.Добавить("НачисленнаяАмортизация");
		МассивСуммДляПересчета.Добавить("СуммаОбесценения");
		// МассивСуммДляПересчета.Добавить("ЛиквидационнаяСтоимость");
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			Если НЕ КурсыСтарые[СтрокаТаблицы.НематериальныйАктив] = Неопределено 
				И НЕ КурсыНовые[СтрокаТаблицы.НематериальныйАктив] = Неопределено Тогда
				СтарыеКурсы = КурсыСтарые[СтрокаТаблицы.НематериальныйАктив].Документ;
				НовыеКурсы = КурсыНовые[СтрокаТаблицы.НематериальныйАктив].Документ;
				
				
				Для каждого ИмяСуммы Из МассивСуммДляПересчета Цикл
					
					
					СтрокаТаблицы[ИмяСуммы] = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы[ИмяСуммы]
																									,СтарыеКурсы.Валюта
																									,НовыеКурсы.Валюта
																									,СтарыеКурсы.Курс
																									,НовыеКурсы.Курс
																									,СтарыеКурсы.Кратность
																									,НовыеКурсы.Кратность);
				КонецЦикла; 
			КонецЕсли; 																 
		КонецЦикла;
	КонецЕсли; 
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНематериальныеактивы

&НаКлиенте
Процедура НематериальныеАктивыНематериальныйАктивПриИзменении(Элемент)
	
	//+СисИнфо // снимаем проведение перед расчетом //2012-08-02
	//ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	//
	//Если ТекущиеДанные = Неопределено 
	//	Или Не ЗначениеЗаполнено(ТекущиеДанные.НематериальныйАктив) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ПриИзмененииНМА(ТекущиеДанные.ПолучитьИдентификатор());
	Если Объект.Проведен Тогда
		Оповещение = Новый ОписаниеОповещения("НеобходимоПроведениеыНематериальныйАктивПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Для расчета необходимо отменить проведение. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да);
	Иначе
	// 1c-izhtc, ChuckNorris, 18.08.2015 ( 
		НематериальныеАктивыНематериальныйАктивПриИзмененииТиповойКод();
	КонецЕсли;	
	// 1c-izhtc, ChuckNorris, 18.08.2015 ) 
	//--СисИнфо
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ПодборНМА(Команда)
	
	//+СисИнфо // снимаем проведение перед расчетом //2012-08-02
	//ПараметрыФормы = ЗаполнитьПараметрыПодбора();
	//
	//ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма",ПараметрыФормы,ЭтаФорма);
	Если Объект.Проведен Тогда
		Оповещение = Новый ОписаниеОповещения("НеобходимоПроведениеПодборНМАавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Для расчета необходимо отменить проведение. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да);
	// 1c-izhtc, ChuckNorris, 19.08.2015 ( 
	Иначе
		ПодборНМАТиповойКод();
	КонецЕсли;
	// 1c-izhtc, ChuckNorris, 19.08.2015 ) 
	//--СисИнфо
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсе(Команда)
	
	//+СисИнфо // снимаем проведение перед расчетом //2012-08-02
	//Если Объект.НематериальныеАктивы.Итог("СуммаАмортизации") <> 0 Тогда
	//	
	//	Оповещение = Новый ОписаниеОповещения("КомандаРассчитатьВсеЗавершение", ЭтотОбъект);
	//	ТекстВопроса = НСтр("ru='Параметры в табличной части будут перезаполнены. Продолжить?'");
	//	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да);
	//	
	//Иначе
	//	
	//	ВыполнитьРасчетАмортизации();
	//	
	//КонецЕсли; 
	Если Объект.Проведен Тогда
		Оповещение = Новый ОписаниеОповещения("НеобходимоПроведениеРассчитатьВсеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Для расчета необходимо отменить проведение. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да);
	// 1c-izhtc, ChuckNorris, 18.08.2015 ( 	
	Иначе
		РассчитатьВсеТиповойКод();
	КонецЕсли;
	// 1c-izhtc, ChuckNorris, 18.08.2015 ) 
	//--СисИнфо	
	
КонецПроцедуры

// Процедура - завершение обработки команды "РассчитатьВсе".
// 
&НаКлиенте
Процедура КомандаРассчитатьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРасчетАмортизации();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТекущейСтроке(Команда)
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Для заполнения параметров необходимо выбрать строку с НМА
                       |для которого необходимо заполнить параметры.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
        Возврат;
    КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.НематериальныйАктив) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииНМА(ТекущиеДанные.ПолучитьИдентификатор());
	
	//+СисИнфо // снимаем проведение перед расчетом //2012-08-02
	//ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	//
	//Если ТекущиеДанные = Неопределено Тогда
	//	ТекстСообщения = НСтр("ru='Для заполнения параметров необходимо выбрать строку с НМА
	//                   |для которого необходимо заполнить параметры.'");
	//	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	//	
	//    Возврат;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(ТекущиеДанные.НематериальныйАктив) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ПриИзмененииНМА(ТекущиеДанные.ПолучитьИдентификатор());
	Если Объект.Проведен Тогда
		Оповещение = Новый ОписаниеОповещения("НеобходимоПроведениеРассчитатьПоТекущейСтрокеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Для расчета необходимо отменить проведение. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да);
	Иначе
	// 1c-izhtc, ChuckNorris, 18.08.2015 ( 	
		РассчитатьПоТекущейСтрокеТиповойКод();
	КонецЕсли;	
	// 1c-izhtc, ChuckNorris, 18.08.2015 ) 	
	//--СисИнфо
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);

КонецПроцедуры
											   
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	КэшПеречисления = Новый Структура;
	
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

&НаСервере
Функция ЗаполнитьПараметрыПодбора()

	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ПараметрыПодбора = ДокументОбъект.ЗаполнитьПараметрыПодбора();
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.НематериальныеАктивыСчетНачисленияАмортизации);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаСервере
Процедура ОчиститьСтрокуТабЧасти(ТекущаяСтрока,Колонки=Неопределено)
	
	Если Колонки = Неопределено Тогда
		Колонки = Объект.НематериальныеАктивы.Выгрузить().Колонки;
	КонецЕсли;

	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("НематериальныйАктив");
	МассивИсключений.Добавить("НомерСтроки");
	МассивИсключений.Добавить("ИсходныйНомерСтроки");
	
	Для каждого Колонка Из Колонки Цикл
		
		Если НЕ МассивИсключений.Найти(Колонка.Имя) = НЕОПРЕДЕЛЕНО Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ТекущаяСтрока[Колонка.Имя] = Неопределено;
		
	КонецЦикла; // По колонкам


КонецПроцедуры // ОчиститьСтрокуТабЧасти()

&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента=Истина)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(ВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = ВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	Для Каждого СтрокаТаблицы Из Объект.НематериальныеАктивы Цикл
		СтрокаТаблицы.СуммаАмортизации = 0;
	КонецЦикла;
	
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНМА(ИДСтроки)
	
	ТекущаяСтрока = Объект.НематериальныеАктивы.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивВНА = Новый Массив;
	МассивВНА.Добавить(ТекущаяСтрока.НематериальныйАктив);
	
	//++СисИнфо //Передаем в функцию расчета параметр граница, вместо момента времени, для корректного расчета //2012-08-02
	//МоментВремени = ?(Параметры.Ключ.Пустая(), ТекущаяДатаСеанса(), Объект.Ссылка.МоментВремени());
	//ПараметрыВНА = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивВНА,Объект.Организация,МоментВремени,Истина);
	Массив = Новый Массив(2);
	Массив[0] = КонецДня(Объект.Дата);
	Массив[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),Массив);
	ПараметрыВНА = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивВНА, Объект.Организация,Граница,Истина);	
	//--СисИнфо	
	
	// Изменение кода. Начало. 18.04.2014{{
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыВНА); 
	// Изменение кода. Конец. 18.04.2014}}
	
	СтрокаДанных = ПараметрыВНА[ТекущаяСтрока.НематериальныйАктив];
	Если СтрокаДанных <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СтрокаДанных);
		//++СисИнфо //заполнение реквизита Объект строительства //2012-07-23 
		ТекущаяСтрока.сис_ОбъектСтроительства = СтрокаДанных["ОбъектСтроительства"];
		//--СисИнфо
		
	Иначе
		
		ОчиститьСтрокуТабЧасти(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборНМА(ВыбранноеЗначение)
	
	ЭтоНовыйДокумент = Параметры.Ключ.Пустая();
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(ВыбранноеЗначение, ЭтоНовыйДокумент);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
		
КонецПроцедуры

// Выполняет расчет амортизации во всех строках таб.части.
// 
&НаСервере
Процедура ВыполнитьРасчетАмортизации()
	
	МассивНМА = Объект.НематериальныеАктивы.Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивНМА, Истина);
	
	//++СисИнфо //Передаем в функцию расчета параметр граница, вместо момента времени, для корректного расчета //2012-07-30
	//МоментВремени = ?(Параметры.Ключ.Пустая(),КонецДня(Объект.Дата),Объект.Ссылка.МоментВремени());
	//ПараметрыНМА = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивНМА,Объект.Организация,МоментВремени,Истина);
	Массив = Новый Массив(2);
	Массив[0] = КонецДня(Объект.Дата);
	Массив[1] = ВидГраницы.Включая;
	Граница = Новый(Тип("Граница"),Массив);
	ПараметрыНМА = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивНМА,Объект.Организация,Граница,Истина);
	//--СисИнфо
	
	// Изменение кода. Начало. 18.04.2014{{
	ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыНМА); 
	// Изменение кода. Конец. 18.04.2014}}
	
	Для Каждого ТекущаяСтрока Из Объект.НематериальныеАктивы Цикл
		
		СтрокаДанных = ПараметрыНМА[ТекущаяСтрока.НематериальныйАктив];
		Если СтрокаДанных <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока,СтрокаДанных);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокумента(ПараметрыНМА)
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ВыполнитьВалютныеПересчетыИзВалютыМУВВалютуДокументаМодуль(ПараметрыНМА);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
		
КонецПроцедуры

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

&НаСервере
Функция ПолучитьКурсыВалютПоПериодам(КешСтарыеКурсы = Неопределено, флНовыеКурсы = Ложь)
	
	Если флНовыеКурсы Тогда
		СтруктураКурсыВалют = Новый Структура;
		СтруктураКурсыВалют.Вставить("Валюта", Объект.ВалютаДокумента);
		СтруктураКурсыВалют.Вставить("Кратность", Объект.КратностьДокумента);
		СтруктураКурсыВалют.Вставить("Курс", Объект.КурсДокумента);
	Иначе
		СтруктураКурсыВалют = Новый Структура;
		СтруктураКурсыВалют.Вставить("Валюта", КешСтарыеКурсы.ВалютаДокумента); 
		СтруктураКурсыВалют.Вставить("Кратность", КешСтарыеКурсы.КратностьДокумента);
		СтруктураКурсыВалют.Вставить("Курс", КешСтарыеКурсы.КурсДокумента);
	КонецЕсли; 
	
	МассивНМА = Объект.НематериальныеАктивы.Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");
	
	СоответствиеНМАиКурсовДокумента = бит_му_ВНА.ПолучитьСоответствиеНМАиКурсовНаДатуПринятия(МассивНМА, СтруктураКурсыВалют, Объект.Организация);

	Возврат СоответствиеНМАиКурсовДокумента;
	
КонецФункции

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()


#КонецОбласти

#КонецОбласти

//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
&НаКлиенте
Процедура ПодборНМАТиповойКод()
	
	ПараметрыФормы = ЗаполнитьПараметрыПодбора();
	
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма",ПараметрыФормы,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьВсеТиповойКод()
	
	Если Объект.НематериальныеАктивы.Итог("СуммаАмортизации") <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаРассчитатьВсеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Параметры в табличной части будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Да);
		
	Иначе
		
		ВыполнитьРасчетАмортизации();
		
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура РассчитатьПоТекущейСтрокеТиповойКод()
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Для заполнения параметров необходимо выбрать строку с НМА
                       |для которого необходимо заполнить параметры.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
        Возврат;
    КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.НематериальныйАктив) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииНМА(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныеАктивыНематериальныйАктивПриИзмененииТиповойКод()
	
	ТекущиеДанные = Элементы.НематериальныеАктивы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		Или Не ЗначениеЗаполнено(ТекущиеДанные.НематериальныйАктив) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииНМА(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

//ОК Калинин М. 290413
&НаСервере
Процедура ОбновитьПериод()
	
	Объект.Период=рс_ОбщийМодуль.ПолучитьМесяцНачисленияПоДате(Объект.Дата);
	
КонецПроцедуры
//ОК Калинин М.

// 1c-izhtc, ChuckNorris, 18.08.2015 ( 
&НаКлиенте
Процедура НеобходимоПроведениеРассчитатьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Таймаут Тогда Модифицированность = Ложь; Возврат; КонецЕсли;

	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	УстановитьЗаголовокФормыДокумента();
	РассчитатьВсеТиповойКод();
	
КонецПроцедуры

&НаКлиенте
Процедура НеобходимоПроведениеРассчитатьПоТекущейСтрокеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Таймаут Тогда Модифицированность = Ложь; Возврат; КонецЕсли;

	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	УстановитьЗаголовокФормыДокумента();
	РассчитатьПоТекущейСтрокеТиповойКод();
	
КонецПроцедуры

&НаКлиенте
Процедура НеобходимоПроведениеПодборНМАавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Таймаут Тогда Модифицированность = Ложь; Возврат; КонецЕсли;

	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	УстановитьЗаголовокФормыДокумента();
	ПодборНМАТиповойКод();
	
КонецПроцедуры

&НаКлиенте
Процедура НеобходимоПроведениеыНематериальныйАктивПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Таймаут Тогда Модифицированность = Ложь; Возврат; КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	УстановитьЗаголовокФормыДокумента();
	НематериальныеАктивыНематериальныйАктивПриИзмененииТиповойКод();
	
КонецПроцедуры
// 1c-izhtc, ChuckNorris, 18.08.2015 )
