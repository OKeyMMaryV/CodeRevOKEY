// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьСчетовУчета();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-17 (#3049)
	ЗаполнитьКэшЗначений();
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтаФорма
		, "Товары"
		, фКэшЗначений.ИзмеренияДоп
		, фКэшЗначений.НастройкиИзмерений);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ок_ФВБ = бит_МеханизмДопИзмерений.ПолучитьЗначениеДопАналитики(Объект.Ссылка,
			ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗАЯВКИ"), ПредопределенноеЗначение("Документ.бит_ФормаВводаБюджета.ПустаяСсылка"));
		Элементы.ок_ФВБ.СписокВыбора.Добавить(ок_ФВБ);
		
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-17 (#3049)	
	
	УстановитьУсловноеОформление();
	
	УчетНДС.ПрименитьПраваДоступаСчетаФактуры(
		СчетФактура,
		Элементы.СчетФактураПросмотр,
		Элементы.СчетФактураРедактирование);
		
	//izhtc alena 24.08.2015(
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Документ.ПоступлениеДопРасходов.ФормаДокумента");
	//izhtc alena 24.08.2015)		
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ИнтеграцияС1СДокументооборотом
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтеграцияС1СДокументооборотом") Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	// бит_Финанс изменения кода. Начало.
	бит_ПриСозданииНаСервереЗавершение();
	// бит_Финанс добавление кода. Конец. 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-12 (#3067)
	Элементы.ок_ФВБ.СписокВыбора.Очистить();
	СписокВыбора = ПолучитьСписокВыбораНомераЗаявкиНаСервере();
	Для Каждого пЭлСписка Из СписокВыбора Цикл
		Элементы.ок_ФВБ.СписокВыбора.Добавить(пЭлСписка.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И
		СписокВыбора.Количество() = 1
		Тогда
		ок_ФВБ = СписокВыбора[0].Значение;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-12 (#3067)
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-17 (#3758)
	ОбновитьДоступностьID_Разноска();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-17 (#3758)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПорядкаУчетаРасчетов" Тогда
		ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_СчетФактураПолученный"
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ДокументыОснования") И Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Параметр.РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ИзмененСтатусДокументов" Тогда
		// Статус документа изменен в форме списка.
		Если Не Объект.Ссылка.Пустая() И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			ОригиналПолучен = ЕстьОригиналДокумента(Объект.Организация, Объект.Ссылка);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.ДоговорКонтрагента = Источник Тогда
		
		ТребуетсяПерерасчитатьСрокОплаты =
			ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты;
			
		Если ТребуетсяПерерасчитатьСрокОплаты Тогда
			ОбновитьСрокОплатыНаСервере();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);

	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Начало_бит_Магомедов_01.08.2013
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//Конец_бит_Магомедов_01.08.2013
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//ОКЕЙ Наумов А.Н. (СофтЛаб) Начало 2019-09-20 (#3493)
	ок_УправлениеФормами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	//ОКЕЙ Наумов А.Н. (СофтЛаб) Начало 2019-09-20 (#3493)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПоступлениеДопРасходов";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерСчетаФактурыПолученного) И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Номер счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НомерСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) И ЗначениеЗаполнено(НомерСчетаФактурыПолученного)  Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Дата счета-фактуры'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДатаСчетаФактурыПолученного",, Отказ);
	КонецЕсли;
	
	Если ЭтоКомиссияНаЗакупку И НЕ ЗначениеЗаполнено(Продавец) 
		И (ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) ИЛИ ЗначениеЗаполнено(НомерСчетаФактурыПолученного)) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Составлен от имени'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Продавец",, Отказ);
	КонецЕсли;
	
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-08-05 (#3364)
	ок_УправлениеФормамиКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-08-05 (#3364)
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Если ЗначениеЗаполнено(НомерСчетаФактурыПолученного)
		И ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		
		Если ЭтоКомиссияНаЗакупку И НЕ ЗначениеЗаполнено(Продавец) Тогда
			Возврат;
		КонецЕсли;
		
		Результат = УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(
			ТекущийОбъект.Ссылка,
			НомерСчетаФактурыПолученного,
			ДатаСчетаФактурыПолученного,
			?(ЭтоКомиссияНаЗакупку, Продавец, Неопределено),
			,
			Ложь);
		
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, Результат);
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьСостояниеДокумента();
	
	ПараметрыЗаписи.Вставить("СрокОплаты", СрокОплаты);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	РаботаСДоговорамиКонтрагентовБП.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(
		ТекущийОбъект.ДоговорКонтрагента, ТекущийОбъект.Ссылка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПоступлениеДопРасходов", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИспользуетсяПланированиеПлатежей Тогда
		СрокиОплатыДокументов.ОбновитьСрокОплаты(Объект.Ссылка, СрокОплаты, АвторасчетСрокаОплаты);
		ПараметрыЗаписи.Вставить("СрокОплаты", СрокОплаты);
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	СтатусыДокументов.ПоступленияПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-23 (#3049)
	Если фКэшЗначений.Свойство("АналитикаНомерЗаявки")	Тогда 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ок_ФВБ"	 , ок_ФВБ);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Аналитика", фКэшЗначений.АналитикаНомерЗаявки);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-23 (#3049)
	
	//СофтЛаб Начало 2018-10-09 3092
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ок_ФВБ") Тогда 
		Если НЕ ТекущийОбъект.ДополнительныеСвойства.Свойство("ДополнительныеАналитики") Тогда 
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ДополнительныеАналитики", Новый Соответствие);
		КонецЕсли;
		
		ТекущийОбъект.ДополнительныеСвойства.ДополнительныеАналитики.Вставить("NЗАЯВКИ", ТекущийОбъект.ДополнительныеСвойства.ок_ФВБ);
		
	КонецЕсли;
	//СофтЛаб Конец 2018-10-09 3092
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзменении(Элемент);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-16 (#3049)
	Если Объект.Товары.Количество()>0 Тогда 
		пОповещениеОтветПоЗаполнениюПериодаВТЧ = Новый ОписаниеОповещения("ОтветПоЗаполнениюПериодаВТЧ",ЭтотОбъект);
		ПоказатьВопрос(пОповещениеОтветПоЗаполнениюПериодаВТЧ, НСтр("ru = 'Дата вх. документа будет установлена в поле ""Период"" табличных частей документа. Продолжить?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-16 (#3049)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);
		
	ТребуетсяПерерасчитатьСрокОплаты = 
		ИспользуетсяПланированиеПлатежей И АвторасчетСрокаОплаты И (НачалоДня(Объект.Дата) <> НачалоДня(ТекущаяДатаДокумента));
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера ИЛИ ТребуетсяПерерасчитатьСрокОплаты Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)

	Объект.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Объект.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС, ПрименяютсяСтавки4и2));
		
	ОбновитьИтоги(ЭтаФорма);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (	

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)

	СтавкаНДСПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	//Начало_бит_Магомедов_01.08.2013
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//Конец_бит_Магомедов_01.08.2013
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПриИзмененииНаСервере();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКонтрагентамиБПКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ДоговорКонтрагентаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ОбщегоНазначенияБПКлиент.ОткрытьДоговорКонтрагента(ЭтотОбъект, Элемент, Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУчетаРасчетовНажатие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	АдресХранилищаЗачетАвансов = ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере();
	ТипыДокументов = "Метаданные.Документы.ПоступлениеДопРасходов.ТабличныеЧасти.ЗачетАвансов.Реквизиты.ДокументАванса.Тип";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 ТолькоПросмотр);
	ПараметрыФормы.Вставить("Дата",                           Объект.Дата);
	ПараметрыФормы.Вставить("ДоговорКонтрагента",             Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент",                     Объект.Контрагент);
	ПараметрыФормы.Вставить("Организация",                    Объект.Организация);
	ПараметрыФормы.Вставить("ОстаткиОбороты",                 "Дт");
	ПараметрыФормы.Вставить("ТипыДокументов",                 ТипыДокументов);
	ПараметрыФормы.Вставить("РежимОтбораДокументов",          ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	ПараметрыФормы.Вставить("АдресХранилищаЗачетАвансов",     АдресХранилищаЗачетАвансов);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов",            Объект.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовСКонтрагентом", Объект.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыФормы.Вставить("СчетУчетаРасчетовПоАвансам",     Объект.СчетУчетаРасчетовПоАвансам);
	ПараметрыФормы.Вставить("СрокОплаты",                     СрокОплаты);
	ПараметрыФормы.Вставить("ИспользуетсяСрокОплаты",         Истина);

	ОткрытьФорму("ОбщаяФорма.ВыборПорядкаУчетаРасчетов", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка	= Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюты();			

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОбновитьУсловноеОформление(ЭтотОбъект);	

КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаФактурыПолученногоПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДатаСчетаФактурыПолученного) Тогда
		ДатаСчетаФактурыПолученного = Объект.ДатаВходящегоДокумента;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <Товары>

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ЕстьДопРасходыВТаблице = Объект.Товары.Итог("Сумма") <> 0;
	
	ОбновитьИтоги(ЭтаФорма);

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-12 (#3067)
	СписокВыбора = ПолучитьСписокВыбораНомераЗаявкиНаСервере();
	Если СписокВыбора.НайтиПоЗначению(ок_ФВБ) = Неопределено Тогда
		ок_ФВБ = Неопределено;
	КонецЕсли;
	
	Элементы.ок_ФВБ.СписокВыбора.Очистить();
	Для Каждого пЭлСписка Из СписокВыбора Цикл
		Элементы.ок_ФВБ.СписокВыбора.Добавить(пЭлСписка.Значение);
	КонецЦикла;
	
	Если СписокВыбора.Количество()>1 Тогда
		ок_ФВБ = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документу соответствуют несколько заявок!'"));
	ИначеЕсли СписокВыбора.Количество() = 1 И
		Не ЗначениеЗаполнено(ок_ФВБ)
		Тогда
		ок_ФВБ = СписокВыбора[0].Значение;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-12 (#3067)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриНачалеРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ПрименяетсяУСН Тогда
		ТекущиеДанные	= Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.ОтражениеВУСН	= ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОкончанииРедактированияТабличнойЧасти(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	// Подготовим данные для передачи на сервер
	КонтейнерОбъект = Новый Структура("Организация, Дата, СуммаВключаетНДС, СтавкаНДС");
	ЗаполнитьЗначенияСвойств(КонтейнерОбъект, Объект);

	КонтейнерСтрока = Новый Структура("Номенклатура, Количество, Сумма, СтавкаНДС, СуммаНДС");
	ЗаполнитьЗначенияСвойств(КонтейнерСтрока, ТекущиеДанные);
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(
		"Товары.Номенклатура",
		Объект,
		ТекущиеДанные,
		КонтейнерОбъект,
		КонтейнерСтрока);
		
	// Заполним
	ТоварыНоменклатураПриИзмененииНаСервере(КонтейнерСтрока, КонтейнерОбъект, ПараметрыЗаполненияСчетовУчета.КЗаполнению);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, КонтейнерСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТаблицы.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));

	ОбновитьИтоги(ЭтаФорма);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПартииПриИзменении(Элемент)

	ЗаполнитьСчетаТекущейСтрокиТовары("Товары.ДокументПартии");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонецПериода"                , ?(ЗначениеЗаполнено(Параметры.Ключ), Объект.Дата, КонецДня(ТекущаяДата())));
	ПараметрыФормы.Вставить("Организация"                 , Объект.Организация);
	ПараметрыФормы.Вставить("Номенклатура"                , СтрокаТаблицы.Номенклатура);
	ПараметрыФормы.Вставить("Склад"                       , Неопределено);
	ПараметрыФормы.Вставить("СчетУчета"                   , СтрокаТаблицы.СчетУчета);
	ПараметрыФормы.Вставить("ТипыДокументов"              , "Новый ОписаниеТипов(Метаданные.Документы.ПоступлениеДопРасходов.ТабличныеЧасти.Товары.Реквизиты.ДокументПартии.Тип,,""ДокументСсылка.ПеремещениеТоваров"")");
	ПараметрыФормы.Вставить("ФормироватьСписокПриОткрытии", Ложь);

	ОткрытьФорму("Документ.Партия.ФормаВыбора", Новый Структура("ПараметрыОбъекта", ПараметрыФормы), Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаПриИзменении(Элемент)

	ЗаполнитьСчетаТекущейСтрокиТовары("Товары.СчетУчета");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)

	ЗаполнитьСчетаТекущейСтрокиТовары("Товары.СчетУчетаНУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьИзПоступления(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлению(Команда)

	ЗаполнитьТабличнуюЧастьПоПоступлению("Заполнить");

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовары(Команда)

	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма",
		ПолучитьПараметрыПодбора("Товары"),
		ЭтаФорма,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураПолученный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-14 (#3758)
&НаКлиенте
Процедура ЗаполнитьIDИзЗаявкиНаДоговор(Команда)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-03 (#4046)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Укажите договор контрагента"); 
		Возврат;
		
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-03 (#4046)
	
	СтруктураПараметрыВыбора = Новый Структура;
	СтруктураПараметрыВыбора.Вставить("РежимВыбора",		Истина);
	СтруктураПараметрыВыбора.Вставить("МножественныйВыбор",	Ложь);
	СтруктураПараметрыВыбора.Вставить("ЗакрыватьПриВыборе",	Истина);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-02 (#4046)
	//СтруктураОтбора = Новый Структура();
	//СтруктураОтбора.Вставить("Контрагент",			Объект.Контрагент);
	//СтруктураОтбора.Вставить("ДоговорКонтрагента",	Объект.ДоговорКонтрагента);
	//
	//СтруктураПараметрыВыбора.Вставить("Отбор",	СтруктураОтбора);
	//
	//ЗаявкаНаДоговорФормаВыбора = ПолучитьФорму("Документ.рс_ЗаявкаНаДоговор.Форма.ФормаВыбораУправляемая", СтруктураПараметрыВыбора, Этаформа);
	//ЗаявкаНаДоговорФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии", ЭтаФорма);
	//
	//МассивДоступныхПолей = Новый Массив;
	//МассивДоступныхПолей.Добавить("дата");
	//МассивДоступныхПолей.Добавить("номер");
	//МассивДоступныхПолей.Добавить("организация");
	//МассивДоступныхПолей.Добавить("контрагент");
	//МассивДоступныхПолей.Добавить("договорконтрагента");
	//МассивДоступныхПолей.Добавить("сумма");
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-22 (#4017)
	//МассивДоступныхПолей.Добавить(НРег("ЦФО"));
	//МассивДоступныхПолей.Добавить(НРег("СтатьяОборотов"));
	//МассивДоступныхПолей.Добавить(НРег("ID"));
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-22 (#4017)
	//
	//Для каждого Список_ТекущийЭлемент Из ЗаявкаНаДоговорФормаВыбора.Элементы.Список.ПодчиненныеЭлементы Цикл
	//	
	//	Если МассивДоступныхПолей.Найти(НРег(Список_ТекущийЭлемент.Имя)) = Неопределено Тогда
	//		Список_ТекущийЭлемент.Видимость = Ложь;
	//	КонецЕсли; 
	//
	//КонецЦикла; 
	//
	//ЗаявкаНаДоговорФормаВыбора.Открыть();
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(Объект.ДатаВходящегоДокумента));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(Объект.ДатаВходящегоДокумента));
	ИначеЕсли ЗначениеЗаполнено(Объект.Дата) Тогда
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(Объект.Дата));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(Объект.Дата));
	Иначе
		СтруктураПараметрыВыбора.Вставить("ДатаНачала",		НачалоМесяца(ТекущаяДата()));
		СтруктураПараметрыВыбора.Вставить("ДатаОкончания",	КонецМесяца(ТекущаяДата()));
	КонецЕсли; 
	
	ЗаявкаНаДоговорФормаВыбора = ПолучитьФорму("Документ.рс_ЗаявкаНаДоговор.Форма.ФормаВыбораУправляемая_Дерево", СтруктураПараметрыВыбора, Этаформа);
	ЗаявкаНаДоговорФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии", ЭтаФорма); 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Организация",
		Объект.Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Контрагент",
		Объект.Контрагент,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"ДоговорКонтрагента",
		Объект.ДоговорКонтрагента,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-04-05 (#4111)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ЗаявкаНаДоговорФормаВыбора.Список,
		"Проведен",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-04-05 (#4111) 	
		
	ЗаявкаНаДоговорФормаВыбора.Открыть();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-02 (#4046)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-02 (#4046)
	//СтруктураЗначенийРеквизитов = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РезультатЗакрытия, "ID");
	//Объект.ОК_ID_Разноска = СтруктураЗначенийРеквизитов.ID;
	
	ВыбраннаяЗаявкаНаДоговор = Неопределено;
	Если ТипЗнч(РезультатЗакрытия) = Тип("КлючСтрокиДинамическогоСписка") Тогда
		
		Для каждого КлючЗначение Из РезультатЗакрытия Цикл
			
			Если КлючЗначение.Ключ = "Ссылка"
				И ТипЗнч(КлючЗначение.Значение) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
			
				ВыбраннаяЗаявкаНаДоговор = КлючЗначение.Значение;
			
			КонецЕсли;
		
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если РезультатЗакрытия.ИмяГруппировки = "Ссылка"
			И ТипЗнч(РезультатЗакрытия.Ключ) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
			ВыбраннаяЗаявкаНаДоговор = РезультатЗакрытия.Ключ;
			
		ИначеЕсли РезультатЗакрытия.РодительскаяГруппировка <> Неопределено Тогда 
			
			ЗаполнитьIDИзЗаявкиНаДоговорПриЗакрытии(РезультатЗакрытия.РодительскаяГруппировка, ДополнительныеПараметры);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(РезультатЗакрытия) = Тип("ДокументСсылка.рс_ЗаявкаНаДоговор") Тогда
		
		ВыбраннаяЗаявкаНаДоговор = РезультатЗакрытия;
		
	КонецЕсли;  
	
	Если ВыбраннаяЗаявкаНаДоговор <> Неопределено Тогда
	
		СтруктураЗначенийРеквизитов = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВыбраннаяЗаявкаНаДоговор, "ID");
		Объект.ОК_ID_Разноска = СтруктураЗначенийРеквизитов.ID;
	
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-02 (#4046)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьID_Разноска() Экспорт
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Элементы.Найти("ОК_ID_Разноска") = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-06 (#4145)
	Элементы.ОК_ID_Разноска.ТолькоПросмотр = Истина;
	Возврат;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-06 (#4145)
	
	МассивДокументовРасчета = Новый Массив();
	МассивДокументовРасчета.Добавить(Объект.Ссылка);
	
	СтатусыЗаявокДляИсключений = Новый Массив();
	СтатусыЗаявокДляИсключений.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.Заявка_Оплачена"));
	
	Элементы.ОК_ID_Разноска.ТолькоПросмотр = РегистрыБухгалтерии.Хозрасчетный.ПроверитьНаличиеСозданногоДокументаЗнРДСВСтатусе(МассивДокументовРасчета,,СтатусыЗаявокДляИсключений);	
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-14 (#3758)

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ОригиналПолучен = ЕстьОригиналДокумента(Объект.Организация, Объект.Ссылка);
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	Если ДоговорУказан Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента, "ВидДоговора,УчетАгентскогоНДС,РасчетыВУсловныхЕдиницах,НДСПоСтавкам4и2");

		ЭтоКомиссияНаЗакупку = РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
		УчетАгентскогоНДС    = РеквизитыДоговора.УчетАгентскогоНДС;
		РасчетыВУЕ           = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
		ПрименяютсяСтавки4и2 = РеквизитыДоговора.НДСПоСтавкам4и2;
		ТребуетсяСчетФактура = НЕ УчетАгентскогоНДС И НЕ Объект.НДСНеВыделять;

	Иначе

		ЭтоКомиссияНаЗакупку = Ложь;
		УчетАгентскогоНДС    = Ложь;
		РасчетыВУЕ           = Ложь;
		ПрименяютсяСтавки4и2 = Ложь;
		ТребуетсяСчетФактура = НЕ ВестиУчетПоДоговорам И НЕ Объект.НДСНеВыделять;
	
		Если ЗначениеЗаполнено(Объект.Контрагент)
			и НЕ ЗначениеЗаполнено(Объект.Ссылка) 
			и НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ЕстьДопРасходыВТаблице = Объект.Товары.Итог("Сумма") <> 0;

	УстановитьВидимость();
	
	УправлениеФормой(ЭтаФорма);

	УстановитьПорядокУчетаРасчетов();
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	ОбновитьИтоги(ЭтаФорма);
	
	// Проверка буфера обмена на наличие скопированных строк
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ПлательщикНДС				 = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	УпрощенныйУчетНДС			 = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДС			 = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, Объект.Дата);
	ПрименяетсяУСН				 = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	ПлательщикНДФЛ				 = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Объект.Дата);
	РаздельныйУчетНДСНаСчете19	 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ЕстьВалютныйУчет 			 = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
	ИспользуетсяПланированиеПлатежей = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПлатежейПоставщикам");
	ВестиУчетПоДоговорам         = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	СформироватьНадписьЦеныИВалюта(Форма);
	
	// Шапка
	Элементы.ДоговорКонтрагента.Доступность  = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	
	// Главное
	Элементы.СуммаНДС.Доступность = НЕ Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
		И НЕ Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");

	// Расчеты
	ДоступностьПорядокУчетаРасчетов = (НЕ Форма.ВестиУчетПоДоговорам И ЗначениеЗаполнено(Объект.Контрагент)) ИЛИ ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Элементы.ПорядокУчетаРасчетов.Доступность = ДоступностьПорядокУчетаРасчетов;
	Элементы.ПорядокУчетаРасчетов.Гиперссылка = ДоступностьПорядокУчетаРасчетов;
	
	// Счет-фактура
	УчетНДСКлиентСервер.НастроитьПоляСчетаФактуры(
		Элементы.СчетФактураКнопка,
		Элементы.СчетФактураСсылка,
		Элементы.НадписьСчетФактура,
		Объект.НДСНеВыделять,
		Форма.ТребуетсяСчетФактура,
		Форма.СчетФактура);
	
	УчетНДСКлиентСервер.НастроитьПолеПродавецПоСчетуФактуре(
		Элементы.Продавец,
		Форма.ЭтоКомиссияНаЗакупку);
	
	Элементы.ИтогиВсегоНДС.Видимость 		= Не Объект.НДСНеВыделять;
	Элементы.СтавкаНДС.Видимость			= Не Объект.НДСНеВыделять;
	Элементы.СуммаНДС.Видимость 			= Не Объект.НДСНеВыделять;
	
	ЗаполнитьСписокВыбораСтавокНДС(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавокНДС(Форма)

	Элементы = Форма.Элементы;
	
	СписокВыбораСтавок = Элементы.СтавкаНДС.СписокВыбора;
	СписокВыбораСтавок.Очистить();
	
	Если Форма.ПрименяютсяСтавки4и2 Тогда
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"), "4%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"), "2%");
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		
	Иначе
		
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
		СписокВыбораСтавок.Добавить(ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"));
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	ПродавецВидимость = ТребуетсяСчетФактура И НЕ ЗначениеЗаполнено(СчетФактура) И ЭтоКомиссияНаЗакупку;
		
	Если Элементы.Продавец.Видимость <> ПродавецВидимость Тогда
		Элементы.Продавец.Видимость = ПродавецВидимость;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты()

	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"         , Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс"                , Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность"           , Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент"          , Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор"             , Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	СтруктураПараметров.Вставить("ТолькоПросмотр"      , ТолькоПросмотр);
		
	Если Не ПлательщикНДС Тогда
		СтруктураПараметров.Вставить("НДСНеВыделять"	   , Объект.НДСНеВыделять);
	КонецЕсли;
	
	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура;
	
	Если (НЕ РаздельныйУчетНДСНаСчете19 И НЕ Объект.НДСНеВыделять)
		ИЛИ (ЕстьВалютныйУчет И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета)
		ИЛИ РасчетыВУЕ Тогда 
		
		ОткрыватьИзМеню = Ложь;
		
	Иначе
		ОткрыватьИзМеню = Истина;
		Если ПлательщикНДС Тогда
			СтруктураПараметров.Вставить("НДСНеВыделять", Ложь);
		КонецЕсли;
		ДополнительныеПараметры.Вставить("СтруктураПараметровКоманды", СтруктураПараметров);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОткрыватьИзМеню Тогда
		
		СписокКоманд = Новый СписокЗначений;
		Если Не ПлательщикНДС Тогда
			СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСНеВыделять"));
		КонецЕсли;
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
		Если НЕ ТолькоПросмотр Тогда
			ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.ЦеныИВалюта);
		КонецЕсли;
	Иначе
		ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("СтруктураПараметровКоманды") Тогда
		
		СтруктураЦеныИВалюта = ДополнительныеПараметры.СтруктураПараметровКоманды;
		
		СуммаВключаетНДСДоИзменения = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Если РезультатЗакрытия = Неопределено Тогда
			Возврат;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСНеВыделять") Тогда
			СтруктураЦеныИВалюта.НДСНеВыделять 	= Истина;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
			СтруктураЦеныИВалюта.НДСНеВыделять 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Истина;
		Иначе
			СтруктураЦеныИВалюта.НДСНеВыделять 	= Ложь;
			СтруктураЦеныИВалюта.СуммаВключаетНДС 	= Ложь;
		КонецЕсли;
		
		СтруктураЦеныИВалюта.Вставить("ПерезаполнитьЦены",    Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьЦены",      Ложь);
		СтруктураЦеныИВалюта.Вставить("ПересчитатьНДС",       СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.НДСНеВыделять <> СтруктураЦеныИВалюта.НДСНеВыделять);
		СтруктураЦеныИВалюта.Вставить("БылиВнесеныИзменения", СуммаВключаетНДСДоИзменения <> СтруктураЦеныИВалюта.СуммаВключаетНДС
			ИЛИ Объект.НДСНеВыделять <> СтруктураЦеныИВалюта.НДСНеВыделять);
		
	Иначе
		СтруктураЦеныИВалюта = РезультатЗакрытия;
	КонецЕсли;
	
	// Перезаполняем табличную часть если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		ВалютаДоИзменения			= Объект.ВалютаДокумента;
		КурсДоИзменения				= Объект.КурсВзаиморасчетов;
		КратностьДоИзменения		= Объект.КратностьВзаиморасчетов;
		СуммаВключаетНДСДоИзменения	= Объект.СуммаВключаетНДС;

		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.НДСНеВыделять 		   = СтруктураЦеныИВалюта.НДСНеВыделять;
		Объект.НДСВключенВСтоимость    = СтруктураЦеныИВалюта.НДСВключенВСтоимость;
		
		Модифицированность = Истина;
		
		Если СтруктураЦеныИВалюта.ПересчитатьЦены ИЛИ СтруктураЦеныИВалюта.ПересчитатьНДС Тогда	
			ПересчетСуммДокумента(
				ВалютаДоИзменения, 
				КурсДоИзменения, 
				КратностьДоИзменения, 
				СтруктураЦеныИВалюта.ПересчитатьЦены,
				СтруктураЦеныИВалюта.ПересчитатьНДС);
		КонецЕсли;
		
		ОбновитьИтоги(ЭтаФорма);
		
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		бит_УстановитьВидимостьРеализацияУСобственногоЮЛ();
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
		 	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокОплатыНаСервере()
	
	УстановитьПорядокУчетаРасчетов();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыПроСчетФактуру(Форма, РеквизитыСФ = Неопределено)

	УчетНДСКлиентСервер.ЗаполнитьРеквизитыФормыПроСчетФактуруПолученный(
		Форма, 
		РеквизитыСФ, 
		Форма.ТребуетсяСчетФактура);
	
КонецПроцедуры

// Облуживание типа цен - валюты - НДС:

&НаСервере
Процедура ПересчетСуммДокумента(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьСуммы, ПересчитатьНДС)

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если ПересчитатьСуммы Тогда
			
			СтрокаТаблицы.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Сумма,
				ВалютаДоИзменения, Объект.ВалютаДокумента,
				КурсДоИзменения, Объект.КурсВзаиморасчетов,
				КратностьДоИзменения, Объект.КратностьВзаиморасчетов);
			
			СтрокаТаблицы.СуммаТовара = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.СуммаТовара,
				ВалютаДоИзменения, Объект.ВалютаДокумента,
				КурсДоИзменения, Объект.КурсВзаиморасчетов,
				КратностьДоИзменения, Объект.КратностьВзаиморасчетов);
			
		КонецЕсли;

		СтрокаТаблицы.СуммаНДС = ?(Объект.НДСНеВыделять, 0, УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС, ПрименяютсяСтавки4и2)));
		
	КонецЦикла;
	
	Если ПересчитатьСуммы Тогда
		Объект.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.Сумма,
			ВалютаДоИзменения, Объект.ВалютаДокумента,
			КурсДоИзменения, Объект.КурсВзаиморасчетов,
			КратностьДоИзменения, Объект.КратностьВзаиморасчетов);
	КонецЕсли;
	
	Если Объект.НДСНеВыделять Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Объект.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Объект.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС, ПрименяютсяСтавки4и2));

КонецПроцедуры

// Серверная обработка изменения реквизитов:

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ДатаОбработатьИзменение();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ДатаОбработатьИзменение()

	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	Если Объект.НДСНеВыделять <> НДСНеВыделять Тогда
		Объект.НДСНеВыделять = НДСНеВыделять;
		Объект.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, Не НДСНеВыделять);
		СтавкаНДСПриИзмененииНаСервере();
	КонецЕсли;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Дата");
	ПричиныИзменения.Добавить("НДСВключенВСтоимость");
	
	ЗаполнитьСчетаУчета("Дата", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	УстановитьФункциональныеОпцииФормы();
	
	Объект.НДСВключенВСтоимость = НЕ ПлательщикНДС;
	
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.Дата);
	Если Объект.НДСНеВыделять <> НДСНеВыделять Тогда
		Объект.НДСНеВыделять = НДСНеВыделять;
		Объект.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата, Не НДСНеВыделять);
		СтавкаНДСПриИзмененииНаСервере();
	КонецЕсли;
	
	ПричиныИзменения = Новый Массив;
	ПричиныИзменения.Добавить("Организация");
	ПричиныИзменения.Добавить("НДСВключенВСтоимость");
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Организация", ПричиныИзменения);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	КонтрагентОбработатьИзменениеНаСервере(Новый Массив);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентОбработатьИзменениеНаСервере(ПричиныИзменения)

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-15 (#3758)
	ОчиститьIDРазноски(ПричиныИзменения);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-15 (#3758)
	
	ПричиныИзменения.Добавить("Контрагент");
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		Объект.ДоговорКонтрагента, Объект.Контрагент, Объект.Организация, 
		ПолучитьМассивВидовДоговоров());

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения);
	КонецЕсли;
	
	ЗаполнитьСчетаУчета("Контрагент", ПричиныИзменения);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	ДоговорКонтрагентаОбработатьИзменение(Новый Массив);
	ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(ПричиныИзменения)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-15 (#3758)
	ОчиститьIDРазноски(ПричиныИзменения);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-15 (#3758)
	
	ПричиныИзменения.Добавить("ДоговорКонтрагента");
	
	АвторасчетСрокаОплаты = Истина;
	ОбновитьСрокОплатыНаСервере();
	
	ВалютаДоИзменения = Объект.ВалютаДокумента;
	КурсДоИзменения   = Объект.КурсВзаиморасчетов;
	КратностьДоИзменения        = Объект.КратностьВзаиморасчетов;
	СуммаВключаетНДСДоИзменения = Объект.СуммаВключаетНДС;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов,ВидДоговора,УчетАгентскогоНДС,РасчетыВУсловныхЕдиницах,НДСПоСтавкам4и2");
		
	ДоговорУказан = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	
	ЭтоКомиссияНаЗакупку    = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;
	УчетАгентскогоНДС		= ДоговорУказан И РеквизитыДоговора.УчетАгентскогоНДС;
	ТребуетсяСчетФактура	= НЕ УчетАгентскогоНДС И ДоговорУказан И НЕ Объект.НДСНеВыделять;
	РасчетыВУЕ              = ДоговорУказан И РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	ПрименяютсяСтавки4и2 	= ДоговорУказан И РеквизитыДоговора.НДСПоСтавкам4и2;
	
	СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры;
	Если ДоговорУказан Тогда 
		Если Объект.НДСНеВыделять Тогда
			СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС;
		Иначе
			СпособЗаполненияСтавкиНДС = РаботаСДоговорамиКонтрагентовБП.СпособЗаполненияСтавкиНДСПоДоговору(Объект.ДоговорКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	Объект.ВалютаДокумента         = РеквизитыДоговора.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	ПересчитатьСуммы	= Объект.ВалютаДокумента <> ВалютаДоИзменения ИЛИ Объект.КурсВзаиморасчетов <> КурсДоИзменения;
	ПересчитатьНДС		= Объект.СуммаВключаетНДС <> СуммаВключаетНДСДоИзменения;
	Если ПересчитатьСуммы ИЛИ ПересчитатьНДС Тогда
		ПересчетСуммДокумента(ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПересчитатьСуммы, ПересчитатьНДС);
	КонецЕсли;
	
	СтавкаНДСИзменилась = Ложь;
	Если СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС
		И Не УчетАгентскогоНДС
		И Объект.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
		Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		СтавкаНДСИзменилась = Истина;
	ИначеЕсли СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры
		И Не УчетАгентскогоНДС
		И Объект.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Объект.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Объект.Дата);
		СтавкаНДСИзменилась = Истина;
	КонецЕсли;

	Если СтавкаНДСИзменилась Тогда 
		СтавкаНДСПриИзмененииНаСервере();
	КонецЕсли;
	
	Объект.ЗачетАвансов.Очистить();
	
	ЗаполнитьСчетаУчета("ДоговорКонтрагента", ПричиныИзменения);
	
	//Ванюков К. + // для пользователей ОКЕЯ реквизит «Зачет авансов» автоматически принимет значение «Не зачитывать» // 2012-03-26
	ОК_ОбщегоНазначения.УстановитьСпособЗачетаАвансов(Объект.СпособЗачетаАвансов);
	//Ванюков К. -
	
	УстановитьВидимость();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтроки, Знач ДанныеОбъекта, Знач СчетаУчетаКЗаполнению)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(ДанныеСтроки.Номенклатура, ДанныеОбъекта, Ложь, Ложь);
	Если СведенияОНоменклатуре <> Неопределено Тогда
		ДанныеСтроки.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтроки, ДанныеОбъекта.СуммаВключаетНДС);
	КонецЕсли;
	
	ЗаполненныеСчета = СчетаУчетаВДокументах.ЗаполнитьРеквизитыПриИзменении(
		Документы.ПоступлениеДопРасходов,
		СчетаУчетаКЗаполнению,
		ДанныеОбъекта,
		"Товары",
		ДанныеСтроки);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЗаполненныеСчета);
	
	Если ЗаполненныеСчета.Свойство("СчетУчетаНУ") Тогда
		СвойстваСчетаНУ = СвойстваСчетаНУ(ЗаполненныеСчета.СчетУчетаНУ);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеСтроки, СвойстваСчетаНУ, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере()

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС, ПрименяютсяСтавки4и2));
	КонецЦикла;

	Объект.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		Объект.Сумма,
		Объект.СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС, ПрименяютсяСтавки4и2));
	
	ОбновитьИтоги(ЭтаФорма);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

// Внешний вид, содержание надписей и т.п.

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеШапкаИВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-10 (#3067)
	ОК_ОбщегоНазначения.УстановитьУсловноеОформлениеДопАналитик(ЭтотОбъект,"Товары");
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-10 (#3067)	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ГлавноеПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаГлавное Тогда

		Форма.УстановитьУсловноеОформлениеГлавное();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("ТоварыПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТовары Тогда

		Форма.УстановитьУсловноеОформлениеТовары();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеШапкаИВидимость()

	// ТоварыСуммаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// Скрыть НДС при применении УСН доходы

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// ПорядокУчетаРасчетов

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПорядокУчетаРасчетов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СчетаРасчетовЗаполнены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеГлавное() Экспорт

	НастройкиУсловногоОформления.Вставить("ГлавноеПроинициализировано", Истина);


	// Сумма

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Сумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьДопРасходыВТаблице", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТовары() Экспорт

	НастройкиУсловногоОформления.Вставить("ТоварыПроинициализировано", Истина);


	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"УчетАгентскогоНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыСчетУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСчетУчетаНДС");
	
	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.НДСВключенВСтоимость", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);

		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ТоварыСтатьяЗатратНУ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтатьяЗатратНУ");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.СтатьяЗатратНУДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветРамки);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

	// ТоварыСтатьяЗатратНУ

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтатьяЗатратНУ");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтатьяЗатратНУДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"ПлательщикНДФЛ", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// ТоварыСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
		ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СчетУчетаЗабалансовый", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.Заполнено);
		
		ГруппаОтбора2 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
			ГруппаОтбора1.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора2,
				"Объект.Товары.СуммаНДС", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.СуммаНДС;

	Форма.ИтогиВсего = Объект.Товары.Итог("Сумма") + Объект.Сумма
		+ ?(Объект.СуммаВключаетНДС, 0, Форма.ИтогиВсегоНДС);

	//БИТ Тртилек 30082013 обновим суммы для связанных документов
	Форма.бит_ИтоговаяСумма = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Объект.бит_ДокументыСобственныхКонтрагентов.Итог("бит_Сумма"));
	Форма.бит_ИтоговаяСуммаБезНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Объект.бит_ДокументыСобственныхКонтрагентов.Итог("бит_СуммаБезНДС"));
	///БИТ Тртилек
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	Объект = Форма.Объект;
	СтруктураНадписи = Новый Структура("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	
	Если (Форма.ЕстьВалютныйУчет И Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета)
		ИЛИ Форма.РасчетыВУЕ Тогда
		СтруктураНадписи.Вставить("ВалютаДокумента",  Объект.ВалютаДокумента);
		СтруктураНадписи.Вставить("Курс",             Объект.КурсВзаиморасчетов);
		СтруктураНадписи.Вставить("Кратность",        Объект.КратностьВзаиморасчетов);
	КонецЕсли;
	
	Если (Не Форма.ПлательщикНДС) ИЛИ (Объект.НДСНеВыделять) Тогда
		СтруктураНадписи.Вставить("НДСНеВыделять"	   , Объект.НДСНеВыделять);
	КонецЕсли;	
	
	Если НЕ Объект.НДСНеВыделять Тогда
		СтруктураНадписи.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		СтруктураНадписи.Вставить("НДСВключенВСтоимость", Объект.НДСВключенВСтоимость);
	КонецЕсли;
	
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры 

// Заполнение документа по документам - основаниям

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(СпособЗаполнения)

	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-19 (#3049)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СпособЗаполнения"	  , СпособЗаполнения);
		
		пОповещениеОЗаписи = Новый ОписаниеОповещения("ПослеЗаписиДокументаПриЗаполненииПоПоступлению",ЭтотОбъект,ДопПараметры);
		
		ПоказатьВопрос(пОповещениеОЗаписи, НСтр("ru = 'Для продолжения необходимо записать документ. Записать?'"),РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет,,КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-19 (#3049)
	
	ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
	ПараметрыФормы  = Новый Структура("Отбор", ПараметрыОтбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СпособЗаполнения", СпособЗаполнения);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗаполнениемТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3067)
		//ЗаполнитьТоварыПоПоступлениюТоваров(ДополнительныеПараметры.РезультатВыбора);
		//Заменено на:
		пОшибки = ЗаполнитьТоварыПоПоступлениюТоваров(ДополнительныеПараметры.РезультатВыбора);
		Если Не ПустаяСтрока(пОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пОшибки);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3067)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора = РезультатЗакрытия;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпособЗаполнения = ДополнительныеПараметры.СпособЗаполнения;
	
	Если Объект.Товары.Количество() > 0 И СпособЗаполнения = "Заполнить" Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ДополнительныеПараметры = Новый Структура("РезультатВыбора", РезультатВыбора);
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗаполнениемТабличнойЧастиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да,
			НСтр("ru = 'Поступление доп. расходов'"));
	Иначе
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3067)
		//ЗаполнитьТоварыПоПоступлениюТоваров(РезультатВыбора);
		//Заменено на:
		пОшибки = ЗаполнитьТоварыПоПоступлениюТоваров(РезультатВыбора);
		Если Не ПустаяСтрока(пОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пОшибки);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3067)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-12 (#3067)
//Процедура ЗаполнитьТоварыПоПоступлениюТоваров(Поступление)
//Заменено на:
Функция ЗаполнитьТоварыПоПоступлениюТоваров(Поступление)
	пОшибки = "";
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-12 (#3067)

	ДокументОбъект	= РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПоступлению(Поступление);
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьДобавленныеКолонкиТаблиц();

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-12 (#3067)
//КонецПроцедуры
//Заменено на:
	СписокВыбора = ПолучитьСписокВыбораНомераЗаявкиНаСервере();
	Если СписокВыбора.НайтиПоЗначению(ок_ФВБ) = Неопределено Тогда
		ок_ФВБ = Неопределено;
	КонецЕсли;
	
	Элементы.ок_ФВБ.СписокВыбора.Очистить();
	Для Каждого пЭлСписка Из СписокВыбора Цикл 
		Элементы.ок_ФВБ.СписокВыбора.Добавить(пЭлСписка.Значение);
	КонецЦикла;
	
	Если СписокВыбора.Количество()>1 Тогда 
		
		ок_ФВБ = Неопределено;
		пОшибки = НСтр("ru = 'Документу соответствуют несколько заявок!'");
	ИначеЕсли СписокВыбора.Количество() = 1 И 
			  Не ЗначениеЗаполнено(ок_ФВБ)
	Тогда 
		ок_ФВБ = СписокВыбора[0].Значение;
	КонецЕсли;	
	
	Возврат пОшибки;
	
КонецФункции
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3067)

// Прочий функционал

&НаСервереБезКонтекста
Функция ПолучитьМассивВидовДоговоров()

	СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));

	Возврат СписокВидовДоговоров;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);

	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в документ %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = 'Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора,
		Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент"        , Объект.Контрагент);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Валюта"            , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ЕстьЦена"          , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("СписокПодборов"    , ПолучитьСписокПодборов(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , Ложь);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьСписокПодборов(ИмяТаблицы)

	СписокПодборов = Новый СписокЗначений();
	СписокПодборов.Добавить("", НСтр("ru = 'По справочнику'"));

	Возврат СписокПодборов;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПорядокУчетаРасчетовНаСервере(ВыбранноеЗначение)

	УчетВзаиморасчетовФормы.ОбработкаВыбораПорядокУчетаРасчетов(ЭтаФорма, ВыбранноеЗначение);
	
	УстановитьПорядокУчетаРасчетов();

КонецПроцедуры

&НаСервере
Функция ПоместитьЗачетАвансовВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.ЗачетАвансов.Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьДобавленныеКолонкиТаблицДляСтроки(СтрокаТаблицы);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблицДляСтроки(СтрокаТаблицы)

	Если СтрокаТаблицы.Свойство("СчетУчетаНУ") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СвойстваСчетаНУ(СтрокаТаблицы.СчетУчетаНУ));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	РеквизитыСФ = УчетНДСКлиент.СоздатьСчетФактуруПолученный(ЭтаФорма, ЭтоКомиссияНаЗакупку);
	Если РеквизитыСФ <> Неопределено Тогда
		ЗаполнитьРеквизитыПроСчетФактуру(ЭтаФорма, РеквизитыСФ);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.НадписьСчетФактура);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ПроверкаКонтрагентов

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область СчетаУчета

&НаСервере
Процедура УстановитьВидимостьСчетовУчета()
	
	ЭлементыСчетов = Новый Массив(); 
	ЭлементыСчетов.Добавить("ТоварыСчетУчета");
	ЭлементыСчетов.Добавить("ТоварыСпособУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНДС");
	ЭлементыСчетов.Добавить("ТоварыСчетУчетаНУ");
	ЭлементыСчетов.Добавить("ТоварыСтатьяЗатратНУ");
	
	// Поле формы ПорядокУчетаРасчетов содержит счета и другие реквизиты.
	// Поэтому видимостью этого поля управляем в УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов()
	
	СчетаУчетаВДокументах.УстановитьВидимостьСчетовУчета(Элементы, ЭлементыСчетов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено)

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"ПоступлениеДопРасходов",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СтатьяЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// СпособЗачетаАвансов
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СпособЗачетаАвансов") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Товары.Номенклатура
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СтатьяЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// Товары.ДокументПартии
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДокументПартии") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СтатьяЗатратНУ");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчета");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СтатьяЗатратНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНДС");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СпособУчетаНДС");
	КонецЕсли;

	// Товары.СчетУчета
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчета") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СчетУчетаНУ");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СтатьяЗатратНУ");
	КонецЕсли;

	// Товары.СчетУчетаНУ
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчетаНУ") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "Товары.СтатьяЗатратНУ");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДокументПартии");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
		КонецЕсли;

		// ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// СпособЗачетаАвансов
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СпособЗачетаАвансов") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СпособЗачетаАвансов");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ДоговорКонтрагента");
		КонецЕсли;

		// Товары.Номенклатура
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.Номенклатура") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДокументПартии");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// Товары.ДокументПартии
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.ДокументПартии") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДокументПартии");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатратНУ");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДокументПартии");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНДС");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособУчетаНДС");
		КонецЕсли;

		// Товары.СчетУчета
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчета") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДокументПартии");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатратНУ");
		КонецЕсли;

		// Товары.СчетУчетаНУ
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Товары.СчетУчетаНУ") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СтатьяЗатратНУ");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчета");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "Номенклатура");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДокументПартии");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

&НаСервере
Процедура ЗаполнитьСчетаУчета(ПричинаИзменения, ПричиныИзменения)
	
	Если Не СчетаУчетаВДокументахКлиентСервер.МожноНачатьЗаполнениеСчетовУчета(ПричинаИзменения, ПричиныИзменения) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗаполнения = НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект);
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.КЗаполнению.Количество() > 0 Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
		УстановитьПорядокУчетаРасчетов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетаТекущейСтрокиТовары(ПричинаИзменения)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполненияСчетовУчета = НачатьЗаполнениеСчетовУчета(ПричинаИзменения, Объект, ТекущиеДанные);
	Изменения = СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	Если ПричинаИзменения = "Товары.СчетУчетаНУ" Или Изменения.Свойство("СчетУчетаНУ") Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваСчетаНУ(ТекущиеДанные.СчетУчетаНУ));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваСчетаНУ(СчетУчетаНУ)

	Возврат Документы.ПоступлениеДопРасходов.СвойстваСчетаНУ(СчетУчетаНУ);
	
КонецФункции

#КонецОбласти

// Прочий функционал

&НаСервере
Процедура УстановитьПорядокУчетаРасчетов()

	ОсобенностиДокумента = Документы.ПоступлениеДопРасходов.ОсобенностиУчетаРасчетов();
	
	УчетВзаиморасчетовФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма, ОсобенностиДокумента);

КонецПроцедуры


&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь, Ложь);
		
	СтрокиДляЗаполненияСчетовУчета = Новый Массив;
		
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
		Если ЭтоВставкаИзБуфера
			И СведенияОНоменклатуре <> Неопределено
			И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга)
			И СведенияОНоменклатуре.Услуга Тогда
			
			Продолжить;
			
		КонецЕсли;
		СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
		СтрокиДляЗаполненияСчетовУчета.Добавить(СтрокаТабличнойЧасти);
		
		Если СведенияОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОНоменклатуре.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.Сумма,
				Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчетаВДокументах.ЗаполнитьСтроки(СтрокиДляЗаполненияСчетовУчета, "Товары", Объект, Документы.ПоступлениеДопРасходов);
	Для Каждого СтрокаТабличнойЧасти Из СтрокиДляЗаполненияСчетовУчета Цикл
		ЗаполнитьДобавленныеКолонкиТаблицДляСтроки(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетовУчета.Количество();
		
	КонецЕсли;

КонецПроцедуры

#Область СтатусыДокументов

&НаСервереБезКонтекста
Функция ЕстьОригиналДокумента(Знач Организация, Знач Ссылка)
	
	Возврат (РегистрыСведений.СтатусыДокументов.ПолучитьСтатусыДокумента(Ссылка, Организация).Статус =
		Перечисления.СтатусыДокументовПоступления.ОригиналПолучен);
	
КонецФункции

#КонецОбласти

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда
		
		ИмяТаблицы = "Товары";
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("Количество");
	Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
		
		СписокСвойств.Добавить("СчетУчета");
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДС");
			СписокСвойств.Добавить("СчетУчетаНУ");
			СписокСвойств.Добавить("СтатьяЗатратНУ");
			
		КонецЕсли;
		
	КонецЕсли;
	Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
		
		СписокСвойств.Добавить("ДокументПартии");
		СписокСвойств.Добавить("СуммаТовара");
		СписокСвойств.Добавить("СуммаНДС");
		СписокСвойств.Добавить("Сумма");
		
	КонецЕсли;
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
		ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность						 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность		 = Доступность;
	
КонецПроцедуры

#КонецОбласти

#Область бит_МодификацияФормы

// бит_Финанс изменения кода. Начало:
// Расширение функционала обраотчика "ПриСозданииНаСервере".
//
&НаСервере
Процедура бит_ПриСозданииНаСервереЗавершение()

	Если НЕ ПравоДоступа("Просмотр", Метаданные.Документы.бит_РасходнаяПозиция) Тогда
		Возврат;	
	КонецЕсли; 
	
	ПолеРасходнаяПозиция			= Элементы.Вставить("бит_РасходнаяПозиция", Тип("ПолеФормы"),,Элементы.ГруппаКомментарийОтветственный); 
	//ПолеРасходнаяПозиция			= Элементы.Добавить("бит_РасходнаяПозиция", Тип("ПолеФормы")); 
	ПолеРасходнаяПозиция.Вид		= ВидПоляФормы.ПолеВвода;
	ПолеРасходнаяПозиция.ПутьКДанным= "Объект.бит_РасходнаяПозиция";
	ПолеРасходнаяПозиция.Подсказка	= НСтр("ru = 'Ссылка на связанный документ ""Расходная позиция"", для формирования структуры подчиненности.'");

КонецПроцедуры // бит_Финанс изменения кода. Конец.

#КонецОбласти

//БИТ Тртилек 22082013 обработчик события НачалоВыбора поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовДокументРеализацииПередачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РеализацияТоваровУслуг", "Реализация товаров и услуг");
	СписокТипов.Добавить("ОперацияБух", "Операция (бухгалтерский и налоговый учет)");	
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма);
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выберите вид документа"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбранныйЭлемент, СписокПараметров) Экспорт
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
    Иначе
        ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ВыбранныйДокумент = Неопределено;
	
	ФормаВыбора = Получитьформу("Документ."+ВыбранноеЗначение+".ФормаВыбора");
	
	
	//Найдем встречную организацию
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Объект.Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = ПредопределенноеЗначение("Перечисление.бит_ВидыСобственныхКонтрагентов.Организация");
	
	СтруктураНабораЗаписейВстречныхОрганизаций = ПолучитьСтруктуруНабораЗаписейВстречныхОрганизаций(ОтборПоКонтрагенту);
	
	Если СтруктураНабораЗаписейВстречныхОрганизаций.Количество = 0 ИЛИ НЕ ЗначениеЗаполнено(СтруктураНабораЗаписейВстречныхОрганизаций.Объект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для контрагента: " + Объект.Контрагент + " не указана организация в регистре ""Собственные контрагенты"". В форме выбора отбор установлен не будет");
	Иначе
		ВстречнаяОрганизация = СтруктураНабораЗаписейВстречныхОрганизаций.Объект;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ФормаВыбора.Список, "Организация", ВстречнаяОрганизация, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	КонецЕсли;	
	
	ВыбранныйДокумент = ОткрытьФормуМодально(ФормаВыбора);
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДокументРеализацииПередачи = ВыбранныйДокумент;
	РеквизитыДокумента = ПолучитьРеквизитыДокумента(ВыбранныйДокумент);
	Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = РеквизитыДокумента.Дата;
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = РеквизитыДокумента.СуммаДокумента;
		СуммаНДС =  РеквизитыДокумента.ТоварыСуммаНДС + РеквизитыДокумента.УслугиСуммаНДС;
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = РеквизитыДокумента.СуммаДокумента - СуммаНДС;
	ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = РеквизитыДокумента.СуммаОперации;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНабораЗаписейВстречныхОрганизаций(ОтборПоКонтрагенту)
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	КоличествоЗаписей = НаборЗаписейВстречныхОрганизаций.Количество();
	Возврат Новый Структура("Количество, Объект", КоличествоЗаписей, ?(КоличествоЗаписей = 0, Неопределено, НаборЗаписейВстречныхОрганизаций[0].Объект));
КонецФункции


&НаСервере
Функция ПолучитьРеквизитыДокумента(ВыбранныйДокумент)
	РеквизитыДокумента = Новый Структура;
	РеквизитыДокумента.Вставить("Дата", ВыбранныйДокумент.Дата);
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
		РеквизитыДокумента.Вставить("СуммаДокумента", ВыбранныйДокумент.СуммаДокумента);
		РеквизитыДокумента.Вставить("УслугиСуммаНДС", ВыбранныйДокумент.Услуги.Итог("СуммаНДС"));
		РеквизитыДокумента.Вставить("ТоварыСуммаНДС", ВыбранныйДокумент.Товары.Итог("СуммаНДС"));
	КонецЕсли;
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.ОперацияБух") Тогда 
		РеквизитыДокумента.Вставить("СуммаОперации", ВыбранныйДокумент.СуммаОперации);
	КонецЕсли;
	Возврат РеквизитыДокумента;
КонецФункции

//БИТ Тртилек 22082013 обработчик события ПриИзменении поля ввода Документ реализации поступления
&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовДокументРеализацииПередачиПриИзменении(Элемент)
	ДокументРеализацииПередачи = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДокументРеализацииПередачи;
	Если ЗначениеЗаполнено(ДокументРеализацииПередачи) Тогда
		
		ДокументСсылка = ДокументРеализацииПередачи;
		ТипДокумента = ТипЗнч(ДокументСсылка);
		РеквизитыДокумента = ПолучитьРеквизитыДокумента(ДокументСсылка);
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = ?(ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг"), РеквизитыДокумента.СуммаДокумента, РеквизитыДокумента.СуммаОперации);		
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = РеквизитыДокумента.Дата;
		Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			СуммаНДС =  РеквизитыДокумента.ТоварыСуммаНДС + РеквизитыДокумента.УслугиСуммаНДС;
			Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_СуммаБезНДС = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма - СуммаНДС;
		КонецЕсли;
		
	Иначе
		
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.бит_Сумма = 0;
		Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные.ДатаДокументаРеализацииПередачи = '00010101';
		
	КонецЕсли;
	ОбновитьИтоги(ЭтаФорма);
КонецПроцедуры

//Начало_бит_Магомедов_01.08.2013
&НаКлиенте
Процедура бит_УстановитьВидимостьРеализацияУСобственногоЮЛ()
	бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер();
КонецПроцедуры

&НаСервере
Процедура бит_УстановитьВидимостьРеализацияУСобственногоЮЛСервер()
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-25 (#3878)
	Если Элементы.Найти("бит_РеализацияУСобственногоЮЛ") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-25 (#3878)
	//БИТ Тртилек 11072013 установим видимость страницы Релаизация у собств ЮЛ
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Элементы.бит_РеализацияУСобственногоЮЛ.Видимость = ДокументОбъект.УстановитьВидимостьРеализацияУСобственногоЮЛ();
	///БИТ Тртилек
КонецПроцедуры

//БИТ Тртилек
&НаСервере
Функция  СформироватьЗапросДляСобственныхКонтрагентов(ТипДокумента)
	
	Запрос = Новый Запрос;
	Если ТипДокумента = "РеализацияТоваровУслуг" Тогда 
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Организация = &Организация
		|	И РеализацияТоваровУслуг.Контрагент В ИЕРАРХИИ(&Контрагент)
		|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
		|	И РеализацияТоваровУслуг.Склад В(&Склад)
		|	И НЕ РеализацияТоваровУслуг.Ссылка В
		|				(ВЫБРАТЬ
		|					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		|				ИЗ
		|					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		|				ГДЕ
		|					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		|				ИЗ
		|					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		|				ГДЕ
		|					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		|	И НЕ РеализацияТоваровУслуг.Ссылка В (&МассивТекДокументовПередачи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Ссылка,
		|	СУММА(Данные.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ВТ_СуммаНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Документы.Ссылка КАК Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугТовары.СуммаНДС, 0) КАК СуммаНДС
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугТовары.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Документы.Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугУслуги.СуммаНДС, 0)
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугУслуги.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_Документы.Ссылка,
		|		ЕСТЬNULL(РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС, 0)
		|	ИЗ
		|		ВТ_Документы КАК ВТ_Документы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
		|			ПО ВТ_Документы.Ссылка = РеализацияТоваровУслугАгентскиеУслуги.Ссылка) КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Документы.Ссылка КАК Документ,
		|	ВТ_Документы.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ВТ_Документы.Ссылка.СуммаДокумента - ВТ_СуммаНДС.СуммаНДС КАК СуммаБезНДС,
		|	ЛОЖЬ КАК Выбрать
		|ИЗ
		|	ВТ_Документы КАК ВТ_Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммаНДС КАК ВТ_СуммаНДС
		|		ПО ВТ_Документы.Ссылка = ВТ_СуммаНДС.Ссылка";

					   		
	ИначеЕсли ТипДокумента = "ОперацияБух" Тогда 
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
		               |	0 КАК СуммаБезНДС,
		               |	ЛОЖЬ КАК Выбрать,
		               |	ХозрасчетныйДвиженияССубконто.Регистратор.СуммаОперации КАК СуммаДокумента
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		               |			&ДатаНач,
		               |			&ДатаКон,
		               |			Регистратор ССЫЛКА Документ.ОперацияБух
		               |				И Организация = &Организация
		               |				И Регистратор.ПометкаУдаления = ЛОЖЬ
		               |				И ВЫБОР
		               |					КОГДА ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
		               |						ТОГДА Субконто1 В (&Контрагент)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ
		               |				И ВЫБОР
		               |					КОГДА ВидКорСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства)
		               |						ТОГДА КорСубконто1 В ИЕРАРХИИ (&Объект)
		               |					ИНАЧЕ ЛОЖЬ
		               |				КОНЕЦ,
		               |			,
		               |			) КАК ХозрасчетныйДвиженияССубконто
		               |ГДЕ
		               |	НЕ ХозрасчетныйДвиженияССубконто.Регистратор В
		               |				(ВЫБРАТЬ
		               |					ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи КАК ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеТоваровУслуг.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеТоваровУслугбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка
		               |		
		               |				ОБЪЕДИНИТЬ ВСЕ
		               |		
		               |				ВЫБРАТЬ
		               |					ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.ДокументРеализацииПередачи
		               |				ИЗ
		               |					Документ.ПоступлениеДопРасходов.бит_ДокументыСобственныхКонтрагентов КАК ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов
		               |				ГДЕ
		               |					НЕ ПоступлениеДопРасходовбит_ДокументыСобственныхКонтрагентов.Ссылка = &Ссылка)
		               |	И НЕ ХозрасчетныйДвиженияССубконто.Регистратор В (&МассивТекДокументовПередачи)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ХозрасчетныйДвиженияССубконто.Регистратор,
		               |	ХозрасчетныйДвиженияССубконто.Регистратор.СуммаОперации";
	КонецЕсли;	
				   
	//Найдем встречную организацию
	ОтборПоКонтрагенту = Новый Структура("Контрагент, ВидСвязи");
	ОтборПоКонтрагенту.Контрагент = Объект.Контрагент;
	ОтборПоКонтрагенту.ВидСвязи = Перечисления.бит_ВидыСобственныхКонтрагентов.Организация;
	
	НаборЗаписейВстречныхОрганизаций = бит_ОбщегоНазначения.ПрочитатьНаборЗаписейРегистраСведений(ОтборПоКонтрагенту, "бит_СобственныеКонтрагенты");
	
	Если НаборЗаписейВстречныхОрганизаций.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(НаборЗаписейВстречныхОрганизаций[0].Объект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для контрагента: " + Объект.Контрагент.Наименование + " не указана организация в регистре ""Собственные контрагенты"". Подбор не возможен");
		Возврат ЛОЖЬ;
	Иначе
		ВстречнаяОрганизация = НаборЗаписейВстречныхОрганизаций[0].Объект;
	КонецЕсли;
	
	//Найдем встречные контрагенты
	ЗапросВстречныхКонтрагентов = Новый Запрос;
	ЗапросВстречныхКонтрагентов.Текст = "ВЫБРАТЬ
	                                    |	бит_СобственныеКонтрагенты.Контрагент
	                                    |ИЗ
	                                    |	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
	                                    |ГДЕ
	                                    |	бит_СобственныеКонтрагенты.Объект = &Организация
	                                    |	И бит_СобственныеКонтрагенты.ВидСвязи = &ВидСвязи";
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("ВидСвязи", Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
	
	РезультатЗапросаВстерчныхКонтрагентов = ЗапросВстречныхКонтрагентов.Выполнить();
	
	Если Не РезультатЗапросаВстерчныхКонтрагентов.Пустой() Тогда
		МассивВстречныхКонтрагентов = РезультатЗапросаВстерчныхКонтрагентов.Выгрузить().ВыгрузитьКолонку("Контрагент");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для организации: " + Объект.Организация.Наименование + " не найдены контрагенты в регистре ""Собственные контрагенты"". Подбор не возможен");
		Возврат ЛОЖЬ;
	КонецЕсли;
				   
	Запрос.УстановитьПараметр("Контрагент"   , МассивВстречныхКонтрагентов);				   
	Запрос.УстановитьПараметр("Организация"  , ВстречнаяОрганизация);

	Запрос.УстановитьПараметр("Объект"       , Объект.ДоговорКонтрагента.Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента.Объект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У договора контрагента не заполнено значение Объект. Подбор не возможен");
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	//запрос складов
	Если ТипДокумента = "РеализацияТоваровУслуг" Тогда
		ЗапросСкладов = Новый Запрос;
		ЗапросСкладов.Текст = "ВЫБРАТЬ
								|	Склады.Ссылка КАК Склад
								|ИЗ
								|	Справочник.Склады КАК Склады
								|ГДЕ
								|	Склады.Объект = &Объект";
		ЗапросСкладов.УстановитьПараметр("Объект", Объект.ДоговорКонтрагента.Объект); 						  
		РезультатЗапросаСкладов = ЗапросСкладов.Выполнить();	
		Если Не РезультатЗапросаСкладов.Пустой() Тогда
			МассивСкладов = РезультатЗапросаСкладов.Выгрузить().ВыгрузитьКолонку("Склад");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для объекта из договора контрагента: " + Объект.ДоговорКонтрагента.Объект.Наименование + " не найдено ни одного склада. Подбор не возможен");
			Возврат ЛОЖЬ;
		КонецЕсли;
		Запрос.УстановитьПараметр("Склад", МассивСкладов);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач"      , НачалоДня(ДобавитьМесяц(Объект.Дата, -12)));
	Запрос.УстановитьПараметр("ДатаКон"      , КонецДня(Объект.Дата));

	МассивТекДокументовПередачи = Объект.бит_ДокументыСобственныхКонтрагентов.Выгрузить().ВыгрузитьКолонку("ДокументРеализацииПередачи");
	Запрос.УстановитьПараметр("МассивТекДокументовПередачи",МассивТекДокументовПередачи);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	Возврат Запрос;
	
КонецФункции

//БИТ Тртилек
&НаКлиенте
Процедура ПодборДокументовНажатие(Команда)
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РеализацияТоваровУслуг", "Реализация товаров и услуг");
	СписокТипов.Добавить("ОперацияБух", "Операция (бухгалтерский и налоговый учет)");	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлементаПодборДокументов", ЭтаФорма);
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выберите вид документа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлементаПодборДокументов(ВыбранныйЭлемент, СписокПараметров) Экспорт
    Если ВыбранныйЭлемент = Неопределено Тогда
        Возврат;
	КонецЕсли;
	АдресТаблицы = ПослеВыбораЭлементаПодборДокументовСервер(ВыбранныйЭлемент.Значение)	;
	Если АдресТаблицы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ФормаДокументов = ПолучитьФорму("ОбщаяФорма.бит_ФормаПодбораСобственныхКонтрагентов", Новый Структура("АдресТЗТаблицаДокументов", АдресТаблицы), ЭтаФорма);
	Парарара = ОткрытьФорму("ОбщаяФорма.бит_ФормаПодбораСобственныхКонтрагентов",,ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПослеВыбораЭлементаПодборДокументовСервер(ВыбранноеЗначение)
	НашЗапрос = СформироватьЗапросДляСобственныхКонтрагентов(ВыбранноеЗначение);
	
	Если НашЗапрос =ЛОЖЬ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документы сформированы не будут");
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗТаблицаДокументов = НашЗапрос.Выполнить().Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(ТЗТаблицаДокументов);
КонецФункции

&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = Элементы.бит_ТабличноеПолеДокументыСобственныхКонтрагентов.ТекущиеДанные;
	
	Если ТекущиеДанные<>Неопределено Тогда 
		Если ТипЗнч(ТекущиеДанные.ДокументРеализацииПередачи) = Тип("ДокументСсылка.ОперацияБух") Тогда 
			Элементы.бит_Сумма.ТолькоПросмотр = Истина;
			Элементы.бит_Сумма.Доступность = Ложь;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Истина;
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРеализацииПередачи) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
			Элементы.бит_Сумма.ТолькоПросмотр = Истина;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Истина;
			Элементы.бит_Сумма.Доступность = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Ложь;
		Иначе
			Элементы.бит_Сумма.ТолькоПросмотр = Ложь;
			Элементы.бит_Сумма.Доступность = Истина;
			Элементы.бит_СуммаБезНДС.ТолькоПросмотр = Ложь;
			Элементы.бит_СуммаБезНДС.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура бит_ТабличноеПолеДокументыСобственныхКонтрагентовПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры
//ОК Ванюков К. +// Вывод добавленных реквизитов // 2013-02-01

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-07-18 (#3049)
&НаКлиенте
Процедура ОтветПоЗаполнениюПериодаВТЧ(Результат, ДопПараметры) Экспорт

	Если Результат<>КодВозвратаДиалога.Да Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого стрТЧ Из Объект["Товары"] Цикл 
		стрТЧ.ок_Период = Объект.ДатаВходящегоДокумента;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	МетаданныеОбъекта = Метаданные.Документы.ПоступлениеТоваровУслуг;
	фКэшЗначений = Новый Структура;
			
	// Данные по дополнительным аналитикам
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	
	// Произвольные измерения
	фКэшЗначений.Вставить("Измерения"         , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_НазначениеДополнительныхИзмерений.Аналитика КАК Аналитика
	|ИЗ
	|	РегистрСведений.бит_НазначениеДополнительныхИзмерений КАК бит_НазначениеДополнительныхИзмерений
	|ГДЕ
	|	бит_НазначениеДополнительныхИзмерений.ИмяИзмерения = &ИмяИзмерения";
	
	Запрос.УстановитьПараметр("ИмяИзмерения", "Аналитика_1");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		фКэшЗначений.Вставить("АналитикаНомерЗаявки"	,	ВыборкаДетальныеЗаписи.Аналитика);
	КонецЕсли;  
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаКлиенте
Процедура ПослеЗаписиДокументаПриЗаполненииПоПоступлению(Результат, ДопПараметры) Экспорт
	
	Если Результат<>КодВозвратаДиалога.Да Тогда 
		
		Возврат;
		
	КонецЕсли;	
	
	Попытка
	
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	Исключение
		
		пТекстОшибки = НСтр("ru = 'Не удалось записать документ по причине:%1'");
		пТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(пТекстОшибки, ОписаниеОшибки());
					   
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(пТекстОшибки);
		Возврат;
		
	КонецПопытки;
	
	ЗаполнитьТабличнуюЧастьПоПоступлению(ДопПараметры.СпособЗаполнения)
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораНомераЗаявкиНаСервере()
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Очистить();
	
	Если НЕ фКэшЗначений.Свойство("АналитикаНомерЗаявки") Тогда 
		Возврат СписокВыбора;
	КонецЕсли;
	
	пЗапрос = Новый Запрос;
	пЗапрос.УстановитьПараметр("СписокПТУ"	,	Объект.Товары.Выгрузить(,"ДокументПартии").ВыгрузитьКолонку("ДокументПартии"));
	пЗапрос.УстановитьПараметр("Аналитика"	,	фКэшЗначений.АналитикаНомерЗаявки);
	
	пТекст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ФормаВводаБюджета.Ссылка КАК ФВБ
	|ИЗ
	|	РегистрСведений.бит_ДополнительныеАналитики КАК бит_ДополнительныеАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	|		ПО ((ВЫРАЗИТЬ(бит_ДополнительныеАналитики.ЗначениеАналитики КАК Документ.бит_ФормаВводаБюджета)) = бит_ФормаВводаБюджета.Ссылка)
	|			И (бит_ДополнительныеАналитики.Объект В(&СписокПТУ))
	|			И (бит_ДополнительныеАналитики.Аналитика = &Аналитика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_ФормаВводаБюджета.Номер,
	|	бит_ФормаВводаБюджета.Дата";
	пЗапрос.Текст = пТекст;
	
	пРезультат = пЗапрос.Выполнить();
	
	Если пРезультат.Пустой() Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Выборка = пРезультат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		СписокВыбора.Добавить(Выборка.ФВБ);
	КонецЦикла;     
	
	Возврат СписокВыбора;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ок_ФВБ) Тогда 
		
		ПроверяемыеРеквизиты.Очистить();
		
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ок_ФВБ"	 , ок_ФВБ);		
		
		Отказ = НЕ ТекущийОбъект.ПроверитьЗаполнение();	  
		
	КонецЕсли;

КонецПроцедуры
//&НаКлиенте
//Процедура ок_ФВБПриИзменении(Элемент)
//	
//	пОтметкаНезаполненного = ЗначениеЗаполнено(ок_ФВБ);
//	
//	Элементы.Товарыок_Период.ОтметкаНезаполненного		   = пОтметкаНезаполненного;
//	Элементы.Товарыок_ЦФО.ОтметкаНезаполненного	  		   = пОтметкаНезаполненного;
//	Элементы.Товарыок_СтатьяОборотов.ОтметкаНезаполненного = пОтметкаНезаполненного;
//	Элементы.Товарыок_Проект.ОтметкаНезаполненного		   = пОтметкаНезаполненного;
//	Элементы.ТоварыАналитика_2.ОтметкаНезаполненного 	   = пОтметкаНезаполненного;	
//	
//КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-18 (#3049)

#Область _3414
//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Начало 2019-09-20 (#3414)

&НаКлиенте
Процедура ок_ТекстБумажныйДокументНажатие(Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.ок_БумажныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ЭтотОбъект.ок_БумажныйДокумент);
	
КонецПроцедуры

//ОКЕЙ Вдовиченко Г.В(СофтЛаб) Конец 2019-09-20 (#3414)
#КонецОбласти
//&НаКлиенте
//Процедура ок_ФВБПриИзменении(Элемент)
//	
//	пОтметкаНезаполненного = ЗначениеЗаполнено(ок_ФВБ);
//	
//	Элементы.Товарыок_Период.ОтметкаНезаполненного		   = пОтметкаНезаполненного;
//	Элементы.Товарыок_ЦФО.ОтметкаНезаполненного	  		   = пОтметкаНезаполненного;
//	Элементы.Товарыок_СтатьяОборотов.ОтметкаНезаполненного = пОтметкаНезаполненного;
//	Элементы.Товарыок_Проект.ОтметкаНезаполненного		   = пОтметкаНезаполненного;
//	Элементы.ТоварыАналитика_2.ОтметкаНезаполненного 	   = пОтметкаНезаполненного;	
//	
//КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-07-18 (#3049)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-15 (#3758)
&НаСервере
Процедура ОчиститьIDРазноски(ПричиныИзменения = Неопределено)
	
	Если ТипЗнч(ПричиныИзменения) = Тип("Массив")
		И ПричиныИзменения.Найти("ДоговорКонтрагента") = Неопределено
		И ПричиныИзменения.Найти("Контрагент") = Неопределено
		И Объект.ОК_ID_Разноска <> "" Тогда
	
		мНомерЗаявки = бит_ОбщегоНазначения.ПолучитьЗначениеАналитики(Объект.Ссылка, ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки"));
		Если НЕ ЗначениеЗаполнено(мНомерЗаявки) Тогда
			Объект.ОК_ID_Разноска = "";
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-15 (#3758)