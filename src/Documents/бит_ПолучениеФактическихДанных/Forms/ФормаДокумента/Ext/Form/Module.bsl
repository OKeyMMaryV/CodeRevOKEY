
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();	
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(Объект);
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоУХ = бит_ЛицензированиеБФCервер.СборкаДоступна("УХ");
	Элементы.ФактическиеДанныеКомандаЗагрузитьИзПроформы.Видимость = ЭтоУХ;
	Элементы.ФактическиеДанныеКомандаДобавитьИзПроформы.Видимость = ЭтоУХ;	
	
	// Обновление переченя доступных источников данных.
	ОбновитьИсточникиДанныхСервер();
	
	// Элементы управления для измерений несуществующих в смежном решении	
	// создаются программно для унификации кода.
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "ФактическиеДанные", "ФактическиеДанные", 
		Элементы.ФактическиеДанныеКоличество);
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, "ЗависимыеОбороты", "ЗависимыеОбороты", 
		Элементы.ЗависимыеОборотыКоличество);
	
	// Отображение дополнительных измерений в табличных полях.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
		"ФактическиеДанные", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
		"ЗависимыеОбороты", фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
		  	
	// Оформление таблиц.
	ОФормитьТаблицу("ФактическиеДанные");
	ОФормитьТаблицу("ЗависимыеОбороты");
	
	// Проверка наличия зафиксированных бюджетных данных.
	Если Объект.Проведен Тогда
		бит_Бюджетирование.ПроверитьФиксациюВФорме(ЭтотОбъект, Объект.Ссылка, Истина);
	КонецЕсли;

	// Видимость элементов управления по-умолчанию.
	Элементы.ЗависимыеОборотыИтогСумма.Видимость      = Ложь;
	Элементы.ЗависимыеОборотыИтогКоличество.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("Сценарий");
	мКэшРеквизитовФормы.Вставить("РежимЗависимыхОборотов");
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
				
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Автовидимость колонок.
	Элементы.ФормаАвтовидимостьКолонок.Пометка = фАвтовидимостьКолонок;	
	УстановитьАвтовидимостьКолонок(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбратьПериодЗавершение" И Источник = УникальныйИдентификатор Тогда	
		
		РедактированиеПериодаЗавершение(Параметр.Результат, Неопределено);
		
	ИначеЕсли ИмяСобытия = "ИзменениеТабличнойЧасти" И Источник = УникальныйИдентификатор Тогда
		
		ПерезаполнитьТабличнуюЧасть(Параметр);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ПолучениеФактическихДанных";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьСостояниеДокумента();	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
		
	ИзменениеВалютыСервер(Ложь);
	
	ДобавитьВКэш("Дата");
		
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	флПересчитатьСуммы     = Ложь;
	флПерезаполнитьНормы   = Ложь;
	флПерезаполнитьПериоды = Ложь;

	СтруктураИзменений = ПроанализироватьИзменениеСценария(мКэшРеквизитовФормы.Сценарий, Объект.Сценарий);
	флСпроситьОНормах        = СтруктураИзменений.СпроситьОНормах;
	флИзменитсяПериодичность = СтруктураИзменений.ИзменитсяПериодичность;
	флИзменитсяВалюта        = СтруктураИзменений.ИзменитсяВалюта;
	
	Если флИзменитсяВалюта Или флИзменитсяПериодичность Или флСпроситьОНормах Тогда
	
		ПараметрыФормы = Новый Структура("ИзменитсяВалюта, ИзменитсяПериодичность, СпроситьОНормах"
										, флИзменитсяВалюта, флИзменитсяПериодичность, флСпроситьОНормах);
										
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("флСпроситьОНормах", флСпроситьОНормах);
		ДопПараметры.Вставить("флИзменитсяПериодичность", флИзменитсяПериодичность);
        ДопПараметры.Вставить("флИзменитсяВалюта", флИзменитсяВалюта);

		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаВопросСценарийПриИзменении", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("ОбщаяФорма.бит_ВопросПриИзмененииСценарияУправляемая", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии);
				
	Иначе
		
		// Если изменилась периодичность, а периоды пересчитывать не хотят, то вернуть значение сценария.
		Если флИзменитсяПериодичность И Не флПерезаполнитьПериоды Тогда
			
		 	ИзвлечьИзКэша("Сценарий"); 
		
		Иначе
			
			// Изменяем валюту документа на валюту из сценария.
			Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
				ИзменениеСценарияСервер(флПересчитатьСуммы, флПерезаполнитьПериоды);
			КонецЕсли;   
			
			ДобавитьВКэш("Сценарий");
			ДобавитьВКэш("ВалютаДокумента");

		КонецЕсли;
		
	КонецЕсли; 
			
КонецПроцедуры

// Обработка оповещения закрытия формы. 
// 
// Параметры:
//  РезСтруктура - Структура.
//  ДопПараметры - Структура.
// 
&НаКлиенте
Процедура ФормаВопросСценарийПриИзменении(РезСтруктура, ДопПараметры) Экспорт

	флПересчитатьСуммы     = Ложь;
	флПерезаполнитьНормы   = Ложь;
	флПерезаполнитьПериоды = Ложь;

	флСпроситьОНормах        = ДопПараметры.флСпроситьОНормах;
	флИзменитсяПериодичность = ДопПараметры.флИзменитсяПериодичность;
    флИзменитсяВалюта        = ДопПараметры.флИзменитсяВалюта;
		
	Если ТипЗнч(РезСтруктура) = Тип("Структура") Тогда 
		
		флПерезаполнитьНормы   = РезСтруктура.ПерезаполнитьНормы;
		флПерезаполнитьПериоды = РезСтруктура.ПерезаполнитьПериоды;
		флПересчитатьСуммы     = РезСтруктура.ПересчитатьСуммы;	
		
		// Если изменилась периодичность, а периоды пересчитывать не хотят, то вернуть значение сценария.
		Если флИзменитсяПериодичность И Не флПерезаполнитьПериоды Тогда
			
		 	ИзвлечьИзКэша("Сценарий"); 
		
		Иначе
			
			// Изменяем валюту документа на валюту из сценария.
			Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
				ИзменениеСценарияСервер(флПересчитатьСуммы, флПерезаполнитьПериоды);
			КонецЕсли;   
			
			ДобавитьВКэш("Сценарий");
			ДобавитьВКэш("ВалютаДокумента");

		КонецЕсли;
		
	Иначе	
		
		ИзвлечьИзКэша("Сценарий"); 
		
	КонецЕсли; 
    
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если Объект.ФактическиеДанные.Количество() > 0 И Объект.ВалютаДокумента <> мКэшРеквизитовФормы.ВалютаДокумента Тогда
		
		ТекстВопроса =  НСтр("ru = 'Изменена валюта документа. Пересчитать суммы в документе?'");		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросВалютаДокументаПриИзменении", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 15, КодВозвратаДиалога.Отмена);		 
		
	Иначе
		
		ИзменениеВалютыСервер(Ложь, мКэшРеквизитовФормы.ВалютаДокумента);
		ДобавитьВКэш("ВалютаДокумента");

	КонецЕсли; 
		
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросВалютаДокументаПриИзменении(Ответ, ДопПараметры) Экспорт
	
	флПерезаполнить = Ложь;

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		флПерезаполнить = Истина;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		флПерезаполнить = Ложь;			 
		
	Иначе	 
		
		ИзвлечьИзКэша("ВалютаДокумента");
		Возврат;
		
	КонецЕсли;

	ИзменениеВалютыСервер(флПерезаполнить, мКэшРеквизитовФормы.ВалютаДокумента);
	ДобавитьВКэш("ВалютаДокумента");

КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовПриИзменении(Элемент)
	
	ТекущийРежимЗависимыхОборотов = мКэшРеквизитовФормы.РежимЗависимыхОборотов;
	Если ТекущийРежимЗависимыхОборотов = Объект.РежимЗависимыхОборотов Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
					  
		ТекстВопроса = НСтр( "ru = 'Зависимые обороты будут очищены. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросРежимЗависимыхОборотовПриИзменении", ЭтотОбъект, ТекущийРежимЗависимыхОборотов);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ДобавитьВКэш("РежимЗависимыхОборотов");

	КонецЕсли; 
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросРежимЗависимыхОборотовПриИзменении(Ответ, ТекущийРежимЗависимыхОборотов) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда			
		Объект.ЗависимыеОбороты.Очистить();
	Иначе
		РежимЗависимыхОборотов = ТекущийРежимЗависимыхОборотов;
	КонецЕсли;	

	ДобавитьВКэш("РежимЗависимыхОборотов");

КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.Автоматический"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.НеФормировать"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФактическиеДанные

&НаКлиенте
Процедура ФактическиеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ФактическиеДанные.ТекущиеДанные;	
	Если НоваяСтрока И НЕ Копирование Тогда
		бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, 
			фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
		ТекущиеДанные.Период = НачалоТекущегоПериода();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеПослеУдаления(Элемент)
	
	УстановитьАвтовидимостьКолонок();

КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ФактическиеДанные.ТекущиеДанные;
		
	бит_МеханизмДопИзмеренийКлиент.ИнициализироватьЗначенияДопИзмерений(ТекущиеДанные, фКэшЗначений.ИзмеренияДоп, фКэшЗначений.НастройкиИзмерений);
	
	ИзменениеСтатьиОборотовТабличнойЧасти(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеРегистраторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеРегистраторОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ФактическиеДанные.ТекущиеДанные;
	


	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		Если ТипЗнч(ТекущиеДанные.Регистратор) = Тип("Строка") 
			И ЗначениеЗаполнено(ТекущиеДанные.НастройкаПодключения) 
			И НЕ ПустаяСтрока(ТекущиеДанные.НавигационнаяСсылка) Тогда
			
			// Регистратор нужно открывать из внешней базы.
			
			// Разбор навигационной ссылки
			Позиция   = Найти(ТекущиеДанные.НавигационнаяСсылка, "?ref");
			ПолноеИмя = Лев(ТекущиеДанные.НавигационнаяСсылка  , Позиция - 1);
			ИД        = Сред(ТекущиеДанные.НавигационнаяСсылка , Позиция + 4);
			ИД        = СтрЗаменить(ИД, """", "");
			
			// Подготовка структуры для открытия расшифровки из внешней базы.
			СтрПар = Новый Структура;
			СтрПар.Вставить("НастройкаПодключения", ТекущиеДанные.НастройкаПодключения);                  
			СтрПар.Вставить("ПолноеИмя"           , ПолноеИмя);
			СтрПар.Вставить("ИД"                  , ИД);
			СтрПар.Вставить("ИмяКласса"           , "ЗначениеВнешнейБазы");
			СтрПар.Вставить("Представление"       , ТекущиеДанные.Регистратор);
			СтрПар.Вставить("Значение");
			
			бит_мпд_Клиент.РасшифроватьИзВнешнейБазы(СтрПар, СтандартнаяОбработка);
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
     
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗависимыеОбороты

&НаКлиенте
Процедура ЗависимыеОборотыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ЗависимыеОборотыКомментарийРасчета" И НЕ ПустаяСтрока(ТекущиеДанные.КомментарийРасчета) Тогда
		
		СтандартнаяОбработка = Ложь;		
		
		ПараметрыФормы = Новый Структура("КомментарийРасчета", ТекущиеДанные.КомментарийРасчета);
		ОткрытьФорму("ОбщаяФорма.бит_ФормаКомментарияРасчетаЗависимыхОборотовУправляемая", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			ИмяРеквизита = СтрЗаменить(Поле.Имя, "ЗависимыеОбороты", "");
			ТекЗнч = ТекущиеДанные[ИмяРеквизита];
			
			Если ЗначениеЗаполнено(ТекЗнч) Тогда
				
				ПоказатьЗначение(,ТекЗнч);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступныеИсточники

&НаКлиенте
Процедура ДоступныеИсточникиИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;	
	
	ОбработатьИзменениеФлажкаСервер(ТекущиеДанные.ПолучитьИдентификатор(), Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеИсточникиИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсточникиДанных

&НаКлиенте
Процедура ИсточникиДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИсточникиДанныхСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДанныхПослеУдаления(Элемент)
	
	ОбновитьИсточникиДанныхСервер();

КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДанныхПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ПроверитьДублированиеЗначенийВТабличнойЧасти("ИсточникиДанных", "ИсточникДанных", Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПодключаемыеКомандыЭлементовТаблицФормы

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиПриИзменении(Элемент)
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе	
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	Если бит_МеханизмДопИзмерений.ЭтоАналитикаБанковскийСчет(ИмяПоля, фКэшЗначений.НастройкиИзмерений) Тогда
	  	бит_РаботаСДиалогамиКлиент.ВыбратьБанковскийСчетБезВладельца(ТекущиеДанные, СтандартнаяОбработка, ИмяПоля);	
	Иначе
		бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяПоля,
			СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АналитикаСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	ИмяПоля  = СтрЗаменить(Элемент.Имя, Элемент.Родитель.Имя, "");
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, ИмяПоля,
		СтандартнаяОбработка, фКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
	
#КонецОбласти 
&НаКлиенте
Процедура КомандаНастройкиПериода(Команда)
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ДатаНачала", 	Объект.ДатаНачала);
	ПараметрыПередачи.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ПараметрыПередачи.Вставить("Контекст", 		УникальныйИдентификатор);
	
	бит_ОбщегоНазначенияКлиент.ВыбратьПериод(ПараметрыПередачи);

КонецПроцедуры

&НаКлиенте
Процедура АвтовидимостьКолонок(Команда)
	
	фАвтовидимостьКолонок = Не фАвтовидимостьКолонок;	
	Элементы.ФормаАвтовидимостьКолонок.Пометка = фАвтовидимостьКолонок;
	
	УстановитьАвтовидимостьКолонок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеЗаполнитьПоИсточникам(Команда)
	
	Если Не ЗаполнениеФактическихДанныхВозможно()  Тогда	
		Возврат; 	
	КонецЕсли; 
	
	Если Объект.ФактическиеДанные.Количество() > 0 Тогда
				
		ТекстВопроса = Нстр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросФактическиеДанныеЗаполнитьПоИсточникам", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьФактическиеДанныеСервер();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросФактическиеДанныеЗаполнитьПоИсточникам(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьФактическиеДанныеСервер();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФактическиеДанныеПроверить(Команда)
	
	ТекущиеДанные = Элементы.ФактическиеДанные.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;    	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИсточникДанных) Тогда
		 
		ПараметрыФормы = Новый Структура("СпособКомпоновки, Период", ТекущиеДанные.ИсточникДанных, Новый СтандартныйПериод(Объект.ДатаНачала, Объект.ДатаОкончания));
		ОткрытьФорму("Отчет.бит_ПроверкаСпособаКомпоновкиИсточников.Форма.ФормаОтчетаУправляемая", ПараметрыФормы, ЭтаФорма);
	       	 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОборотыЗаполнить(Команда)
	
	Если Объект.ЗависимыеОбороты.Количество() > 0 Тогда
		
		ТекстВопроса = Нстр("ru = 'Зависимые обороты будут очищены. Продолжить?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросЗависимыеОборотыЗаполнить", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ЗаполнитьЗависимыеОборотыСервер();

	КонецЕсли; 
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросЗависимыеОборотыЗаполнить(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьЗависимыеОборотыСервер();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоступныеИсточникиОбновить(Команда)
	
	ОбновитьИсточникиДанныхСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеИсточникиСнятьФлажки(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(ДоступныеИсточники, "Использование", 0);
	 
	ОбработатьВыборИсточниковДанныхСервер();	 
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеИсточникиУстановитьФлажки(Команда)
	
	 бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(ДоступныеИсточники, "Использование", 1);
	 
	 ОбработатьВыборИсточниковДанныхСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеИсточникиИнвертироватьФлажки(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОбработатьФлагиТаблицы(ДоступныеИсточники, "Использование", 2);	 
	
	ОбработатьВыборИсточниковДанныхСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
	
	ПараметрыФормы = ПараметрыИзмененияТаблицыДокумента();
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДанныеБюджета.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьИзПроформы(Команда)
	
	ЗагрузитьДанныеПроформы("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзПроформы(Команда)
	
	Если Объект.ФактическиеДанные.Количество() > 0 Тогда
	
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзПроформыВопросЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе	
		
		ЗагрузитьДанныеПроформы("Загрузить");
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗагрузитьИзПроформыВопросЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ЗагрузитьИзПроформыВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	
		ЗагрузитьДанныеПроформы("Загрузить");
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура загружает данные из проформы. 
//
&НаКлиенте
Процедура ЗагрузитьДанныеПроформы(Режим)

	ДополнительныеДанные = Новый Структура("Режим", Режим);
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьДанныеПроформыВыборФайлаЗавершение", ЭтотОбъект, ДополнительныеДанные);
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Фильтр = "Все файлы Excel (*.xls, *.xlsx)|*.xls; *.xlsx";
	
	ДиалогВыбора.Показать(Оповещение);


КонецПроцедуры

// Процедура обработчик оповещения "ЗагрузитьДанныеПроформыВыборФайлаЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ЗагрузитьДанныеПроформыВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеДанные) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда
	
		   ПолноеИмя = ВыбранныеФайлы[0];
		   
		   ТекстСостояние = НСтр("ru = 'Загрузка данных...'");
		Состояние(ТекстСостояние);
		
		// Открытие эксель.
		Отказ = Ложь;		
		
		Эксель = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);
		
		Если Отказ Тогда
		
			Возврат;
		
		КонецЕсли; 
		
		ЭксельКнига = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Эксель, ПолноеИмя, Отказ);
		
		Если Отказ Тогда
		
			Возврат;
		
		КонецЕсли;
		
		
		ИмяПроформы = "";
		// Чтение данных шапки.
		ЛистШапка = Неопределено;
		Для каждого Лист Из ЭксельКнига.Sheets Цикл
			
			// Найдем лист с данными шапки требуемой проформы.
			ПараметрыЛиста = бит_ПроформыКлиентСервер.GetHiddenParams(Лист);
			
			Если ПараметрыЛиста.ВидЛиста = "Шапка"  Тогда
				
				ИмяПроформы = ПараметрыЛиста.ИмяПроформы;
				ЛистШапка = Лист;
			
			КонецЕсли; 
		
		КонецЦикла; 

		Если НЕ ЗначениеЗаполнено(ИмяПроформы) Тогда
		
			  Отказ = Истина;
			  ТекстСообщения =  НСтр("ru = 'Не удалось определить имя проформы. Возможно данный файл не является шаблоном проформы.'");
			  бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			  Возврат;
		
		КонецЕсли; 
		
		РезДанныеВидаПроформы = ДанныеВидаПроформы(ИмяПроформы);
		
		
		КомплектДанных = Новый Структура;
		КомплектДанных.Вставить("ИмяПроформы", ИмяПроформы);
		КомплектДанных.Вставить("ПсевдоМетаданные", РезДанныеВидаПроформы.ПсевдоМетаданные);
		КомплектДанных.Вставить("ВидПроформы", РезДанныеВидаПроформы.ВидПроформы);
		КомплектДанных.Вставить("ИмяТаблицыДанных", РезДанныеВидаПроформы.ИмяТаблицыДанных);
		
		// Чтение источников выпадающих списков.
		СпискиИсточники     = бит_ПроформыКлиентСервер.ПрочитатьСпискиИсточники(ЭксельКнига);
		КомплектДанных.Вставить("СпискиИсточники", СпискиИсточники);
		
		МодельДокумента = Новый Структура;
		
		// Чтение данных шапки.
		ЛистШапка = Неопределено;
		Для каждого Лист Из ЭксельКнига.Sheets Цикл
			
			// Найдем лист с данными шапки требуемой проформы.
			ПараметрыЛиста = бит_ПроформыКлиентСервер.GetHiddenParams(Лист);
			
			Если ПараметрыЛиста.ВидЛиста = "Шапка" И ПараметрыЛиста.ИмяПроформы = ИмяПроформы Тогда
			
				ЛистШапка = Лист;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		Если НЕ ЛистШапка = Неопределено Тогда
			
			бит_ПроформыКлиентСервер.ПрочитатьДанныеШапки(ЭксельКнига, ЛистШапка, КомплектДанных.ПсевдоМетаданные, ИмяПроформы, МодельДокумента);
			
		КонецЕсли; 
		
		// Чтение данных табличных частей.
		бит_ПроформыКлиентСервер.ПрочитатьДанныеТабЧастей(ЭксельКнига, КомплектДанных.ПсевдоМетаданные, МодельДокумента, ИмяПроформы);
		
		КомплектДанных.Вставить("МодельДокумента", МодельДокумента);
		
		бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ЭксельКнига, Ложь);
        бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Эксель);		
		
		ТекстСостояние = НСтр("ru = 'Преобразование данных...'");
		Состояние(ТекстСостояние);

		ОбработатьЗагруженныеДанные(КомплектДанных, ДополнительныеДанные.Режим);
		   
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаспределить(Команда)
	
	ИмяТаблицы = "ФактическиеДанные";
	
    ТекЭлемент = Элементы[ИмяТаблицы].ТекущийЭлемент;
	
	Если НЕ ТекЭлемент = Неопределено Тогда
		
		Исключения = Новый Структура;
		Исключения.Вставить("Сумма");
		Исключения.Вставить("Количество");
		Исключения.Вставить("Норма");
		Исключения.Вставить("Комментарий");
		Исключения.Вставить("НомерСтроки");
		
		ИмяКолонки = СтрЗаменить(ТекЭлемент.Имя, ИмяТаблицы,"");
		
		Если Исключения.Свойство(ИмяКолонки) Тогда
			
			ТекстСообщения =  НСтр("ru = 'По колонке %1% распределение не предусмотрено.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИмяКолонки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			Возврат;
		
		КонецЕсли; 
		
		ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
		ТекущееЗначение = ТекущиеДанные[ИмяКолонки];
		
		ДопПараметры = Новый Структура;		
		Если ИмяКолонки = "Период" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоПериодам"));
			ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
			
			Оповещение = Новый ОписаниеОповещения("РаспределитьПоАналитикеЗавершение", ЭтотОбъект, ДопПараметры);
			РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			
		Иначе	
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоАналитике"));
			ПараметрыФормы.Вставить("ИмяКолонки", ИмяКолонки);
			ПараметрыФормы.Вставить("ТекущееЗначение", ТекущееЗначение);
			
			Оповещение = Новый ОписаниеОповещения("РаспределитьПоАналитикеЗавершение", ЭтотОбъект, ДопПараметры);
			РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			
		КонецЕсли; 
		
		ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма.Форма",ПараметрыФормы,ЭтаФорма,,,,Оповещение,РежимОкна);
		
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура обработчик оповещения "РаспределитьПоАналитикеЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура РаспределитьПоАналитикеЗавершение(РезДанные, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезДанные) = Тип("Структура") Тогда
	
		МассивСтрок = Элементы.ФактическиеДанные.ВыделенныеСтроки;
		ВыполнитьРаспределение(МассивСтрок, РезДанные);
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
	
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Данные по дополнительным аналитикам.
	фКэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	фКэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	
	// Произвольные измерения.
	фКэшЗначений.Вставить("Измерения"         , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные", "Синоним"));
	
	// Параметры, используемые для управления автовидимостью колонок.
	фКэшЗначений.Вставить("НастройкаВидимостиКолонок"	  , Новый Структура);
	фКэшЗначений.Вставить("МассивСтатей_ФактическиеДанные", Новый Массив);	
		
	фКэшЗначений.Вставить("СтруктураДопПолей", Новый Структура);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПериодичность()

	ТекПериодичность = Объект.Сценарий.бит_Периодичность;
	
	Если Не ЗначениеЗаполнено(ТекПериодичность) Тогда
		ТекПериодичность = Перечисления.бит_ПериодичностьПланирования.Месяц;
	КонецЕсли; 	

	Возврат ТекПериодичность;
	
КонецФункции

&НаСервере
Процедура ОФормитьТаблицу(ПрефиксТаблицы, СтатьяОборотов = Неопределено) 
	
	// ----------------------------------------------------------------------
	// Оформление реквизитов строк по статьям оборотов.
	УдалитьСтароеОформление = Ложь;
	ПрефиксКонтейнера = "Объект.";
	
	Если СтатьяОборотов = Неопределено Тогда
	
		УдалитьСтароеОформление = Истина;
	
		// Формирование массива статей, по которым нужно добавить элементы УО.
		ТаблицаПоиска = Объект[ПрефиксТаблицы].Выгрузить();
		МассивСтатей = ТаблицаПоиска.ВыгрузитьКолонку("СтатьяОборотов");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);
		
		ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].ЗагрузитьЗначения(МассивСтатей);
		
	Иначе // Работаем только с одной статьей оборотов.		
		
		МассивСтатей = Новый Массив; 		
		
		НайденноеЗначение = ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].НайтиПоЗначению(СтатьяОборотов);
		Если НайденноеЗначение = Неопределено Тогда	
			
			МассивСтатей.Добавить(СтатьяОборотов);
			ЭтаФорма["фСписокСтатей" + ПрефиксТаблицы].Добавить(СтатьяОборотов);		
			
		КонецЕсли;  		
		
	КонецЕсли;	
	
	бит_РаботаСДиалогамиСервер.ОФормитьТаблицуПоСтатьямОборотов(УсловноеОформление, МассивСтатей, УдалитьСтароеОформление, ПрефиксКонтейнера, ПрефиксТаблицы, "", фКэшЗначений.СтруктураДопПолей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтовидимостьКолонок(ОбновлятьБезусловно = Ложь)
	
	ИмяТабличнойЧасти = "ФактическиеДанные";
	ИмяМассива = "МассивСтатей_" + ИмяТабличнойЧасти;
	
	МассивСтатей = Новый Массив;
	
	Если фАвтовидимостьКолонок Тогда
		
		ТаблРез = Объект[ИмяТабличнойЧасти].Выгрузить();
		МассивСтатей = ТаблРез.ВыгрузитьКолонку("СтатьяОборотов");
		НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(МассивСтатей
																		, фКэшЗначений[ИмяМассива]
																		, фКэшЗначений.НастройкаВидимостиКолонок
																		, фКэшЗначений.НастройкиИзмерений);
		
		Если НеобходимоИзменение Тогда
			
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				, фКэшЗначений.НастройкаВидимостиКолонок
											 				, ИмяТабличнойЧасти);
						
		КонецЕсли; 
		
	Иначе
		
		Если ОбновлятьБезусловно Тогда
			
			НеобходимоИзменение = бит_РаботаСДиалогамиСервер.НужноИзменитьВидимостьКолонокБюджета(Новый Массив
																		, фКэшЗначений[ИмяМассива]
																		, фКэшЗначений.НастройкаВидимостиКолонок
																		, фКэшЗначений.НастройкиИзмерений);
																		
			бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы
											 				, фКэшЗначений.НастройкаВидимостиКолонок
											 				, ИмяТабличнойЧасти);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДублированиеЗначенийВТабличнойЧасти(ИмяТч, ИмяРеквизита, Отказ)
	
	ДокОбъект      = РеквизитФормыВЗначение("Объект");
	СтруктураПолей = Новый Структура(ИмяРеквизита);
	
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ДокОбъект, ИмяТч, СтруктураПолей, Отказ);

КонецПроцедуры

&НаСервере
Процедура ИзменениеВалютыСервер(ПересчитатьСуммы, ВалютаНач = Неопределено)
	
	СтрНач = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.КурсДокумента, Объект.КратностьДокумента);	
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалютыОбъект();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		
		СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
		
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);
		
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
		
	КонецЕсли; // Пересчитать.
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТабличныеЧастиПоВалюте(КурсыДок)
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.ФактическиеДанные, Объект.Сценарий, КурсыДок, ПоляПересчета);
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить("Сумма");
	
	бит_Бюджетирование.ПересчитатьТабЧастьПоВалюте(Объект.ЗависимыеОбороты, Объект.Сценарий, КурсыДок, ПоляПересчета);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСценарияСервер(ПересчитатьСуммы, ПерезаполнитьПериоды)
	
	// ----------------------------------------------------------------------
	// Перезаполнение сумм.
	
	ВалютаНач = Объект.ВалютаДокумента;
	СтрНач    = бит_КурсыВалютКлиентСервер.СтруктураКурса(ВалютаНач, Объект.КурсДокумента, Объект.КратностьДокумента);		
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеСценарияОбъект();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	СтрКон = бит_КурсыВалютКлиентСервер.СтруктураКурса(Объект.ВалютаДокумента, Объект.КурсДокумента, Объект.КратностьДокумента);
	
	Если ПересчитатьСуммы И ЗначениеЗаполнено(ВалютаНач) Тогда
		
		КурсыДок = Новый Структура("Нач, Кон", СтрНач, СтрКон);		
		ПересчитатьТабличныеЧастиПоВалюте(КурсыДок);
		
	КонецЕсли; // Пересчитать.
	
	// ----------------------------------------------------------------------
	// Перезаполнение периодов
	
	Если ПерезаполнитьПериоды Тогда
		
		ТекПериодичность = ПолучитьПериодичность(); 	
		Для каждого СтрокаТч Из Объект.ФактическиеДанные Цикл
			СтрокаТч.Период = бит_Бюджетирование.ПолучитьНачалоПериода(СтрокаТч.Период, ТекПериодичность);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСтатьиОборотовТабличнойЧасти(Идентификатор)
	
	Если ТипЗнч(Идентификатор) = Тип("Число") Тогда
		ТекущиеДанные = Объект.ФактическиеДанные.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекущиеДанные = Идентификатор;
	КонецЕсли; 
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(ТекущиеДанные.СтатьяОборотов);
	
	бит_Бюджетирование.УстановитьИспользованиеРесурсов(ТекущиеДанные, НастройкиСтатьи);
	
	бит_Бюджетирование.УстановитьИспользованиеАналитики(ТекущиеДанные, НастройкиСтатьи, фКэшЗначений.Измерения);
		
	ОФормитьТаблицу("ФактическиеДанные", ТекущиеДанные.СтатьяОборотов);		
	УстановитьАвтовидимостьКолонок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактическиеДанныеСервер()

	Объект.ФактическиеДанные.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьФактическиеДанные();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ОФормитьТаблицу("ФактическиеДанные"); 	
	УстановитьАвтовидимостьКолонок();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеОборотыСервер()

	Объект.ЗависимыеОбороты.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьЗависимыеОбороты();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ОФормитьТаблицу("ЗависимыеОбороты");
	
	Модифицированность = Истина;
	
КонецПроцедуры

 &НаСервере
Процедура ОбработатьИзменениеФлажкаСервер(ТекИд, Обновлять = Ложь)
	
	ТекущиеДанныеДи = ДоступныеИсточники.НайтиПоИдентификатору(ТекИд);
	Если ТекущиеДанныеДи = Неопределено Тогда 	 
		Возврат;     	 
	КонецЕсли; 
	
	НайденныеСтроки = Объект.ИсточникиДанных.НайтиСтроки(Новый Структура("ИсточникДанных", ТекущиеДанныеДи.ИсточникДанных));
	
	Если ТекущиеДанныеДи.Использование Тогда
		
		// Добавление источника в табличную часть.   	  
	  	Если НайденныеСтроки.Количество() = 0 Тогда  			
			НоваяСтрока = Объект.ИсточникиДанных.Добавить();
	    	НоваяСтрока.ИсточникДанных = ТекущиеДанныеДи.ИсточникДанных;
	  	КонецЕсли;

	Иначе

		// Удаление источников из табличной части.    		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл			
			ИндексУдаляемой = Объект.ИсточникиДанных.Индекс(СтрокаТаблицы);
			Объект.ИсточникиДанных.Удалить(ИндексУдаляемой);			
		КонецЦикла; 
		
		Если Обновлять Тогда
			ОбновитьИсточникиДанныхСервер();
		КонецЕсли; 

	КонецЕсли;
	
	Модифицированность = Истина;
 
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсточникиДанныхСервер()
 
	ДоступныеИсточники.Очистить();
	
	ТаблицаИсточники = Объект.ИсточникиДанных.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"			, Объект.Ссылка);
	Запрос.УстановитьПараметр("ТаблицаИсточники", ТаблицаИсточники);
	Запрос.Текст = "
	|	ВЫБРАТЬ
	|	бит_ИсточникиДанных.Ссылка КАК ИсточникДанных
	|ПОМЕСТИТЬ ДоступныеИсточники
	|ИЗ
	|	Справочник.бит_ИсточникиДанных КАК бит_ИсточникиДанных
	|ГДЕ
	|	(НЕ бит_ИсточникиДанных.ПометкаУдаления)
	|	И (НЕ бит_ИсточникиДанных.Отключено)
	|	И бит_ИсточникиДанных.ТипИсточника = ЗНАЧЕНИЕ(Перечисление.бит_ТипыИсточниковДанных.ПолучениеФакта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИсточники.ИсточникДанных
	|ПОМЕСТИТЬ ТаблицаИсточники
	|ИЗ
	|	&ТаблицаИсточники КАК ТаблицаИсточники
	|ГДЕ
	|	ТаблицаИсточники.ИсточникДанных <> ЗНАЧЕНИЕ(Справочник.бит_ИсточникиДанных.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА (НЕ ТаблицаИсточники.ИсточникДанных ЕСТЬ NULL )
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Использование,
	|	ВЫБОР
	|		КОГДА (НЕ ДоступныеИсточники.ИсточникДанных ЕСТЬ NULL )
	|			ТОГДА ДоступныеИсточники.ИсточникДанных
	|		ИНАЧЕ ТаблицаИсточники.ИсточникДанных
	|	КОНЕЦ КАК ИсточникДанных
	|ИЗ
	|	ДоступныеИсточники КАК ДоступныеИсточники
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаИсточники КАК ТаблицаИсточники
	|		ПО ДоступныеИсточники.ИсточникДанных = ТаблицаИсточники.ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДоступныеИсточники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаИсточники
	|";
				 	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДоступныеИсточники.Загрузить(РезультатЗапроса.Выгрузить());
	 	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборИсточниковДанныхСервер()

	Для каждого СтрокаТаблицы Из ДоступныеИсточники Цикл
		ОбработатьИзменениеФлажкаСервер(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла; 
	
	ОбновитьИсточникиДанныхСервер();	

КонецПроцедуры

&НаСервере
Функция ИзменитсяВалюта()

	флИзменится = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Сценарий)
		 И Объект.Сценарий.Валюта <> Объект.ВалютаДокумента
		 И Объект.ФактическиеДанные.Количество() > 0 Тогда
	
		флИзменится = Истина;
	
	КонецЕсли; 

	Возврат флИзменится;
	
КонецФункции

&НаСервере
Функция ПроанализироватьИзменениеСценария(СтарыйСценарий, НовыйСценарий)

	СтруктураИзменений = Новый Структура("СпроситьОНормах, ИзменитсяПериодичность, ИзменитсяВалюта");
	
	СтруктураИзменений.СпроситьОНормах        = Ложь;
	СтруктураИзменений.ИзменитсяПериодичность = СтарыйСценарий.бит_Периодичность <> НовыйСценарий.бит_Периодичность;
	СтруктураИзменений.ИзменитсяВалюта        = ИзменитсяВалюта();
	
	Возврат СтруктураИзменений;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	Если НЕ ЭтоАдресВременногоХранилища(ХранилищеДанные) Тогда
		Возврат;
	КонецЕсли; 
	
	Модифицированность = Истина;
	ДанныеЗаполнения   = ПолучитьИзВременногоХранилища(ХранилищеДанные);
	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		ТекущиеДанные = Объект.ФактическиеДанные[Строка.ИД];
		ТекущиеДанные[Строка.Реквизит] = Строка.Значение;		
		Если Строка.Реквизит = "СтатьяОборотов" Тогда
			ИзменениеСтатьиОборотовТабличнойЧасти(ТекущиеДанные);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоСтатье(ТекущиеДанные)

	НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(ТекущиеДанные.СтатьяОборотов);
	
	Если Не НастройкиСтатьи.Учет_Количество Тогда
		ТекущиеДанные.Количество = 0;
	КонецЕсли;
	
	Если Не НастройкиСтатьи.Учет_Сумма Тогда
		ТекущиеДанные.Сумма = 0;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из фКэшЗначений.Измерения Цикл
		
		ИмяИзмерения     = КлючИЗначение.Ключ;
		СтрНастр         = Неопределено;
		
		НастройкиСтатьи.Измерения.Свойство(ИмяИзмерения, СтрНастр);
		Если ТипЗнч(СтрНастр) = Тип("Структура") Тогда
			
			 Если ТипЗнч(СтрНастр.ТипПоУмолчанию) = Тип("ОписаниеТипов") Тогда
			 
			 	 ТекущиеДанные[ИмяИзмерения] = СтрНастр.ТипПоУмолчанию.ПривестиЗначение(ТекущиеДанные[ИмяИзмерения]);
			 
			 КонецЕсли; 
			
			 Если НЕ СтрНастр.Учет Тогда
			 
			 	  ТекущиеДанные[ИмяИзмерения] = Неопределено;
			 
			 КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВидаПроформы(ИмяПроформы)

	РезСтр = Документы.бит_Проформы.ДанныеВидаПроформы(ИмяПроформы);
	
	Возврат РезСтр;

КонецФункции

&НаСервере
Процедура ОбработатьЗагруженныеДанные(Знач КомплектДанных, Режим)
	
	СпискиИсточники  = КомплектДанных.СпискиИсточники;
	ПсевдоМетаданные = КомплектДанных.ПсевдоМетаданные;
	МодельДокумента  = КомплектДанных.МодельДокумента;
	
	Если МодельДокумента.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для загрузки. Возможно, выбран файл, не соответсвующий данному виду проформы.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
	
	КонецЕсли; 
	
	Документы.бит_Проформы.РаспознатьДанные(МодельДокумента, ПсевдоМетаданные, СпискиИсточники);
	
	ИмяТаблицыДанных = Документы.бит_Проформы.ИмяТаблицыДляЗагрузкиДанныхБюджета(ПсевдоМетаданные);
	
	// Проверка состава обязательных колонок таблицы.	
	МетаТаб = КомплектДанных.ПсевдоМетаданные.ТабличныеЧасти[ИмяТаблицыДанных];
	ИменаОбязательных = Новый Массив;
	ИменаОбязательных.Добавить("Период");
	ИменаОбязательных.Добавить("СтатьяОборотов");
	ИменаОбязательных.Добавить("ЦФО");
	ИменаОбязательных.Добавить("Сумма");
	
	ТекстСообщенияНетПолей =  "";
	Для каждого ТекИмя Из ИменаОбязательных Цикл
		
		Если МетаТаб.Реквизиты.Найти(ТекИмя) = Неопределено Тогда
			
			 ТекстСообщенияНетПолей = ТекстСообщенияНетПолей 
			                         + ?(ПустаяСтрока(ТекстСообщенияНетПолей)
									     , НСтр("ru = 'В шаблоне проформы отсутствуют обязательные поля: '"),",") 
									 + ТекИмя; 
			 Отказ = Ложь;
			
		КонецЕсли; 
		
	КонецЦикла; 

	Если Отказ Тогда
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщенияНетПолей);
		Возврат;
	
	КонецЕсли; 
	
	Если Режим = "Загрузить" Тогда
	
		Объект.ФактическиеДанные.Очистить();
		Объект.ЗависимыеОбороты.Очистить();
	
	КонецЕсли; 
	
	ТаблицаДанныхБюджета = МодельДокумента[ИмяТаблицыДанных].ТаблицаДанных;
	
	// проверим существование колонок
	КолонкиПроверены = Новый Структура;
	
	МетаДок = Объект.Ссылка.Метаданные();
	Для каждого Колонка Из ТаблицаДанныхБюджета.Колонки Цикл
	
		Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(Колонка.Имя, МетаДок, "ФактическиеДанные") Тогда
		
			 КолонкиПроверены.Вставить(Колонка.Имя, Истина);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныхБюджета  Цикл
		
		НоваяСтрока = Объект.ФактическиеДанные.Добавить();
		Для каждого КиЗ Из КолонкиПроверены Цикл
		
			ИмяКолонки = КиЗ.Ключ;
			
			НоваяСтрока[ИмяКолонки] = СтрокаТаблицы[ИмяКолонки];
			
		КонецЦикла; 
		
		УстановитьДанныеПоСтатье(НоваяСтрока);
		
	КонецЦикла; 
	
	ОФормитьТаблицу("ФактическиеДанные");	
	УстановитьАвтовидимостьКолонок();
	
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределение(МассивИдСтрок, НастройкиРаспределения)
	
	Для каждого ИдСтроки Из МассивИдСтрок Цикл
		
		СтрокаИсточник = Объект.ФактическиеДанные.НайтиПоИдентификатору(ИдСтроки);	
		
		Если СтрокаИсточник <> Неопределено Тогда
			
			// Распределение по профилю.
			МассивСтрок = бит_Бюджетирование.РаспределитьПоПрофилюАналитики(НастройкиРаспределения, Объект.ФактическиеДанные, СтрокаИсточник);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла; // по ИД строк.
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	флТекущаяСтраницаЗависимые = ?(ТекущаяСтраница.Имя = "СтраницаЗависимыеОбороты", Истина, Ложь);
	
	Элементы.ЗависимыеОборотыИтогСумма.Видимость      = флТекущаяСтраницаЗависимые;
	Элементы.ЗависимыеОборотыИтогКоличество.Видимость = флТекущаяСтраницаЗависимые;
	
	Элементы.ФактическиеДанныеИтогКоличество.Видимость = НЕ флТекущаяСтраницаЗависимые;
	Элементы.ФактическиеДанныеИтогСумма.Видимость      = НЕ флТекущаяСтраницаЗависимые;

КонецПроцедуры

&НаКлиенте 
Процедура РедактированиеПериодаЗавершение(ПериодРезультат, ДополнительныеДанные)

	Если ПериодРезультат <> Неопределено Тогда
	
		Объект.ДатаНачала    = ПериодРезультат.ДатаНачала;
		Объект.ДатаОкончания = ПериодРезультат.ДатаОкончания;
		
		ЭтотОбъект.Модифицированность = Истина; 		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция НачалоТекущегоПериода()
	
	ДатаОтсчета           = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	НачалоТекущегоПериода = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаОтсчета, Объект.Сценарий.бит_Периодичность);
	
	Возврат НачалоТекущегоПериода;
	
КонецФункции

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗаполнениеФактическихДанныхВозможно()

	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнена дата начала периода получения фактических данных.'");
	    бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнена дата окончания периода получения фактических данных.'");
	    бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнен сценарий.'");
	    бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
	КонецЕсли;
	
	Если Объект.ИсточникиДанных.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Не указаны источники данных для получения факта.'");
	    бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;

КонецФункции

&НаСервере
Функция ПараметрыИзмененияТаблицыДокумента()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда",			"бит_ПолучениеФактическихДанных");
	ПараметрыФормы.Вставить("Объект",			Объект.Ссылка);
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти","ФактическиеДанные");
	ПараметрыФормы.Вставить("ТабличнаяЧасть",	 
		ПоместитьВоВременноеХранилище(Объект.ФактическиеДанные.Выгрузить(), УникальныйИдентификатор));
		
	Возврат ПараметрыФормы;	
	
КонецФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
