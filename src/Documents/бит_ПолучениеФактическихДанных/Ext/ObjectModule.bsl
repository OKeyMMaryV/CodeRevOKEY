#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРеглУчета Экспорт; // Хранит валюту регламентированного учета.
Перем мИзмерения Экспорт; // Хранит измерения бюджетирования.
Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения бюджетирования.
Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Заполнение шапки
		бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
													, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
													, Неопределено);
		
	   // Получим ссылку на предопределенный элемент "ФАКТ" справочника Сценарии бюджетирования.
	   СценарийФАКТ    = Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования()].ФАКТ;
	   
	   Сценарий        = СценарийФАКТ;
	   ВалютаДокумента = СценарийФАКТ.Валюта;
	   
	   Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		   ВалютаДокумента = мВалютаРеглУчета;
	   КонецЕсли; 
	   ИзменениеВалютыОбъект();	
	   
	   РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;
	   
   КонецЕсли;
   
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СвойстваСтатей  = СвойстваСтатей(ФактическиеДанные.ВыгрузитьКолонку("СтатьяОборотов"));
	
	Для каждого СтрокаТаблицы Из ФактическиеДанные Цикл
		
		Префикс = "ФактическиеДанные[%1].";
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
					
		ТекущиеСвойства = СвойстваСтатей.Получить(СтрокаТаблицы.СтатьяОборотов);
		Если ТекущиеСвойства.ЭтоГруппа Тогда
			// При загрузке из источников ошибочно принимаются группы.
			Поле = Префикс + "СтатьяОборотов";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ", 
								Нстр("ru = 'Статья оборотов'"), СтрокаТаблицы.НомерСтроки, Нстр("ru = 'Фактические данные'"), 
								НСтр("ru = 'Использование иерархических групп для целей учета не поддерживается.'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
		ИначеЕсли ТекущиеСвойства.КоличественныйУчет И ТекущиеСвойства.СуммовойУчет Тогда
			Если СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.Количество = 0	Тогда
				ТекстСообщения = СтрШаблон(НСтр("en = 'В строке №%1 табличной части ""%2"" не заполнены ни сумма ни количество.';
												|ru = 'В строке №%1 табличной части ""%2"" не заполнены ни сумма ни количество.'"),
											СтрокаТаблицы.НомерСтроки, НСтр("en = 'Фактические данные';
																			|ru = 'Фактические данные'"));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
		ИначеЕсли ТекущиеСвойства.КоличественныйУчет И СтрокаТаблицы.Количество = 0 Тогда
			СообщитьОНулевомКоличестве(СтрокаТаблицы, Префикс, Отказ);
		ИначеЕсли ТекущиеСвойства.СуммовойУчет И СтрокаТаблицы.Сумма = 0 Тогда
			СообщитьОНулевойСумме(СтрокаТаблицы, Префикс, Отказ);
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьЗависимыеОбороты();
	КонецЕсли; 	
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
	Если НЕ Отказ Тогда
	
		Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
			Сценарий = Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования()].ФАКТ;
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Подготовим массив типов для проверки.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверки(ЭтотОбъект);
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ЭтотОбъект, МассивТипов, Отказ);
	
	ПередЗаписьюВБП(Отказ, РежимЗаписи, РежимПроведения);
	
	// Заполним аналитику в шапке документа.
	бит_ОбщегоНазначения.ЗаполнитьАналитикуВШапкеДокумента(ЭтотОбъект, ФактическиеДанные, Отказ);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	СтруктураКурсыВалют = бит_Бюджетирование.ПолучитьСтруктуруКурсовВалютСценария(ЭтотОбъект, Дата, Новый Структура("Документ, Регл, Упр, Сценарий"));
	
	ТаблицаФактическиеДанные = ПодготовитьТаблицуФактическиеДанные(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаФактическиеДанные, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПередЗаписьюВБП(Отказ, РежимЗаписи, РежимПроведения)
	
	Заголовок = Нстр("ru = 'Проверка прав доступа:'"); 
	Если РольДоступна("бит_рлс_ФинансистЦФО") Тогда
		// Проверка на наличие недопустимых ЦФО
		бит_рлс_Основной.ПроверитьДопустимыеЦФО(ЭтотОбъект,ФактическиеДанные,
			Нстр("ru = 'Фактические данные'"),Заголовок,Отказ);
	Иначе
		// Проверка на наличие недопустимых пар ЦФО/СтатьяОборотов.
		бит_рлс_Основной.ПроверитьДопустимыеПарыЦФОСтатьяОборотов(ЭтотОбъект,ФактическиеДанные,
			Нстр("ru = 'Фактические данные'"),Заголовок,Отказ);
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на экран или принтер, 
// а также распечатать необходмое количество копий.
// Название макета печати передается в качестве параметра, по переданному названию находим имя макета в соответствии.
// 
// Параметры:
//  ИмяМакета 			   - Строка, название макета.
//  КоличествоЭкземпляров  - Число (По умолчанию = 1).
//  НаПринтер			   - Булево (По умолчанию = Ложь).
//  НепосредственнаяПечать - Булево (По умолчанию = Ложь).
// 
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
		
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа.
// 
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	// Возврат Новый Структура("ПФ","Печатная форма");

	Возврат Неопределено;
	
КонецФункции

// Процедура очищает табличную часть ЗависимыеОбороты.
// 
// Параметры:
//  Нет
// 
Процедура ОчиститьЗависимыеОбороты() Экспорт

	ЗависимыеОбороты.Очистить();

КонецПроцедуры // ОчиститьЗависимыеОбороты()

// Процедура заполняет табличную часть ЗависимыеОбороты.
// 
// Параметры:
//  Нет
// 
Процедура ЗаполнитьЗависимыеОбороты() Экспорт

	УстановитьПривилегированныйРежим(Истина);	
	
	ОчиститьЗависимыеОбороты();
	
	Если РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать Тогда
		// Не формируем зависимые обороты.
		Возврат;
	КонецЕсли;
	
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все", "имя");
	
	МаксПериод = бит_Бюджетирование.ПолучитьМаксПериод(ФактическиеДанные);
	НастройкиЗависимыхОборотов = бит_Бюджетирование.ПолучитьНастройкиЗависимыхОборотов(Сценарий, МаксПериод);		
	
	Для каждого СтрокаТаблицы Из ФактическиеДанные Цикл
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= СтрокаТаблицы.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= СтрокаТаблицы;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "ФактическиеДанные";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
		ПараметрыФормирования.вхНастройкиЗависимых		= НастройкиЗависимыхОборотов;
		
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры // ЗаполнитьЗависимыеОбороты()
   
// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет
// 
Процедура ИзменениеВалютыОбъект() Экспорт
	
	СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(Сценарий, ВалютаДокумента, Дата);
	КурсДокумента      = СтрКурса.Курс;
	КратностьДокумента = СтрКурса.Кратность;
	
КонецПроцедуры // ИзменениеВалютыОбъект()

// Процедура обрабатывает изменение сценария.
// 
// Параметры:
//  Нет
// 
Процедура ИзменениеСценарияОбъект() Экспорт
	
	// Изменяем валюту документа на валюту из сценария.
	ВалютаДокумента = Сценарий.Валюта;
	
	ИзменениеВалютыОбъект();
	
КонецПроцедуры // ИзменениеСценарияОбъект()
           
// Процедура выполняет заполнение фактических данных по источникам.
// 
// Параметры:
//  Нет
// 
Процедура ЗаполнитьФактическиеДанные() Экспорт
	
	ФактическиеДанные.Очистить();

	ГраницаНач = ДатаНачала;
	ГраницаКон = Новый Граница(КонецДня(ДатаОкончания), ВидГраницы.Включая);

	Для каждого СтрокаТаблицы Из ИсточникиДанных Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИсточникДанных) Тогда			
			Продолжить;			
		КонецЕсли; 
		
		СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
		СтрПар.НастройкаПулаПодключений = НастройкаПулаПодключений;
		
		ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(СтрокаТаблицы.ИсточникДанных
																				, ГраницаНач
																				, ГраницаКон
																				, СтрПар);
																				
		флЕстьРегистратор = ?(ТаблицаРезультат.Колонки.Найти("Регистратор") = Неопределено, Ложь, Истина);
		
		Периодичность = ?(ЗначениеЗаполнено(Сценарий.бит_Периодичность)
								, Сценарий.бит_Периодичность
								, Перечисления.бит_ПериодичностьПланирования.Месяц);
		 			
		Для каждого СтрокаРезультат Из ТаблицаРезультат Цикл
			
			НоваяСтрока = ФактическиеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультат);
			НоваяСтрока.ИсточникДанных = СтрокаТаблицы.ИсточникДанных;
			
			НоваяСтрока.Период = бит_Бюджетирование.ПолучитьНачалоПериода(НоваяСтрока.Период, Периодичность);
                        			
			Если флЕстьРегистратор И ТипЗнч(СтрокаРезультат.Регистратор) = Тип("Структура") Тогда
				
				ЗначВнешнее                      = СтрокаРезультат.Регистратор;
				НоваяСтрока.НастройкаПодключения = ЗначВнешнее.НастройкаПодключения;
				НоваяСтрока.НавигационнаяСсылка  = ЗначВнешнее.ПолноеИмя + "?ref""" + ЗначВнешнее.ИД + """";
				НоваяСтрока.Регистратор = ЗначВнешнее.Представление;
				
			КонецЕсли;       
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Заполнение завершено.'"), ЭтотОбъект); 
	
КонецПроцедуры // ЗаполнитьФактическиеДанные()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция готовит таблицу БДДС для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют     - Структура.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицуФактическиеДанные(СтруктураШапкиДокумента, СтруктураКурсыВалют)
	
	ТекстПолей_ФактическиеДанные = "";
	ТекстПолей_ЗависимыеОбороты  = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл		
		
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Валюта" Или ИмяИзмерения = "Сценарий" Тогда
			Продолжить;		
		КонецЕсли;
		
		ТекстПолей_ФактическиеДанные = ТекстПолей_ФактическиеДанные + Символы.ПС + "	ФактическиеДанные." + ИмяИзмерения + ",";
				
	КонецЦикла;
	ТекстПолей_ЗависимыеОбороты = СтрЗаменить(ТекстПолей_ФактическиеДанные, "ФактическиеДанные", "ЗависимыеОбороты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФормироватьДвиженияПоФактическимДанным", НЕ СтруктураШапкиДокумента.НеФормироватьДвиженияПоФактическимДанным);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ФактическиеДанные.Период,
	|	ФактическиеДанные.Ссылка.ВалютаДокумента КАК Валюта,
	|	ФактическиеДанные.Ссылка.Сценарий КАК Сценарий,
	|   " + ТекстПолей_ФактическиеДанные + "
	|	ФактическиеДанные.СтатьяОборотов.СтавкаНДС КАК СтавкаНДС,
	|	ФактическиеДанные.СтатьяОборотов.ЭтоКоэффициент КАК ЭтоКоэффициент,	
	|	ФактическиеДанные.Количество,
	|	ФактическиеДанные.Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаСценарий,
	|	ФактическиеДанные.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.бит_ПолучениеФактическихДанных.ФактическиеДанные КАК ФактическиеДанные
	|ГДЕ
	|	ФактическиеДанные.Ссылка = &Ссылка
	|	И &ФормироватьДвиженияПоФактическимДанным
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗависимыеОбороты.Период,
	|	ЗависимыеОбороты.Ссылка.ВалютаДокумента,
	|	ЗависимыеОбороты.Ссылка.Сценарий,
	|   " + ТекстПолей_ЗависимыеОбороты + "
	|	ЗависимыеОбороты.СтатьяОборотов.СтавкаНДС,
	|	ЗависимыеОбороты.СтатьяОборотов.ЭтоКоэффициент,	
	|	ЗависимыеОбороты.Количество,
	|	ЗависимыеОбороты.Сумма,
	|	0,
	|	0,
	|	0,
	|	""""
	|ИЗ
	|	Документ.бит_ПолучениеФактическихДанных.ЗависимыеОбороты КАК ЗависимыеОбороты
	|ГДЕ
	|	ЗависимыеОбороты.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);			   
	Результат = Запрос.Выполнить();
	
	ТаблицаФактическиеДанные = Результат.Выгрузить();
	
	КурсыПоПериодам = Неопределено;
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		
		// Получим таблицу периодов
		ТаблицаПериодов = ФактическиеДанные.Выгрузить();
		ТаблицаПериодов.Свернуть("Период");
		
		// Установим настройки для получения курсов по периодам.
		СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий, ВалютаДокумента);
		
		// Получим курсы по периодам
		КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, Сценарий, СтруктураПараметров);
		
	КонецЕсли;
	
	бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаФактическиеДанные, КурсыПоПериодам, СтруктураКурсыВалют);
	
	Возврат ТаблицаФактическиеДанные;
	
КонецФункции // ПодготовитьТаблицуФактическиеДанные()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаБДДС     		- ТаблицаЗначений.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаБДДС, Отказ, Заголовок)
	
	// Движения по регистру обороты по бюджетам
	ТаблицаДвижений = Движения.бит_ОборотыПоБюджетам.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаБДДС Цикл
	
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла; 
	
	Движения.бит_ОборотыПоБюджетам.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ОборотыПоБюджетам.ДобавитьДвижение();
	
	Если НЕ СтруктураШапкиДокумента.НеФормироватьПроводкиБюджетирования Тогда
		
		// Регистр бухгалтерии бюджетирование
		бит_Бюджетирование.СформироватьПроводкиБюджетирования(ТаблицаБДДС, Движения.бит_Бюджетирование);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрам()

Функция СвойстваСтатей(Статьи)
	
	СвойстваСтатей = Новый Соответствие(); 
	
	ТекущиеСвойства = Новый Структура;
	ТекущиеСвойства.Вставить("ЭтоГруппа", Ложь);
	ТекущиеСвойства.Вставить("КоличественныйУчет", Ложь);
	ТекущиеСвойства.Вставить("СуммовойУчет", Ложь);
	СвойстваСтатей.Вставить(Справочники.бит_СтатьиОборотов.ПустаяСсылка(), ТекущиеСвойства);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статьи", Статьи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиОборотов.Ссылка КАК Ссылка,
	|	СтатьиОборотов.ЭтоГруппа КАК ЭтоГруппа,
	|	ЕСТЬNULL(СтатьиОборотов.Учет_Количество, ЛОЖЬ) КАК КоличественныйУчет,
	|	ЕСТЬNULL(СтатьиОборотов.Учет_Сумма, ЛОЖЬ) КАК СуммовойУчет
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК СтатьиОборотов
	|ГДЕ
	|	СтатьиОборотов.Ссылка В(&Статьи)";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущиеСвойства = Новый Структура("ЭтоГруппа, КоличественныйУчет, СуммовойУчет"); 
		ЗаполнитьЗначенияСвойств(ТекущиеСвойства, Выборка);
		СвойстваСтатей.Вставить(Выборка.Ссылка, ТекущиеСвойства);
	КонецЦикла;
	
	Возврат СвойстваСтатей;
	
КонецФункции

Процедура СообщитьОНулевомКоличестве(СтрокаТаблицы, Префикс, Отказ)
	
	Поле = Префикс + "Количество";
	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,Нстр("ru = 'Количество'"), 
						СтрокаТаблицы.НомерСтроки, Нстр("ru = 'Фактические данные'"));
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

КонецПроцедуры

Процедура СообщитьОНулевойСумме(СтрокаТаблицы, Префикс, Отказ)
	
	Поле = Префикс + "Сумма";
	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,Нстр("ru = 'Сумма'"), 
						СтрокаТаблицы.НомерСтроки, Нстр("ru = 'Фактические данные'"));
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);

КонецПроцедуры

#КонецОбласти

#Область Инициализация

мВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мИзмерения          = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Произвольные"  , "Синоним");
мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

#КонецОбласти

#КонецЕсли
