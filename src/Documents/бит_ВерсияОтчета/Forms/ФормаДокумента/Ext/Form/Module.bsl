
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Восстановим стандартный период по строке
	Попытка
		СтандартныйПериод.Вариант = ВариантСтандартногоПериода[Объект.СтандартныйПериод];
	Исключение
		СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	КонецПопытки;
	
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправления(Элементы, 
		"ЗависимыеОбороты", "ЗависимыеОбороты", Элементы.ЗависимыеОборотыКоличество);
	
	бит_РаботаСДиалогамиПереопределяемый.СоздатьЭлементыУправленияВерсияОтчета(Элементы, ЭтотОбъект);

	ИзмеренияДоп 	   = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
	НастройкиИзмерений = бит_Бюджетирование.НастройкиИзмеренийБюджетирования();
	
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
		"ЗависимыеОбороты", ИзмеренияДоп, НастройкиИзмерений);																				 

	НастроитьТаблицуДанных();
	
	фКэшЗначений = Новый Структура;
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);

	Документы.бит_ВерсияОтчета.ВосстановитьТаблицуВерсии(Объект.Ссылка,ТаблицаДанныеОтчета);
	
	// Восстановим табличный документ
	ДокОбъект  = РеквизитФормыВЗначение("Объект");
	СохрТабДок = ДокОбъект.ПолучитьТабДокРезультат();
	
	ТабДокРезультат.Очистить();
	
	ТабДокРезультат.ФиксацияСверху = СохрТабДок.ФиксацияСверху;
	ТабДокРезультат.ФиксацияСлева  = СохрТабДок.ФиксацияСлева;
	ТабДокРезультат.Вывести(СохрТабДок);	
	
	// Восстановим таблицу ОтборВОтчете
	Документы.бит_ВерсияОтчета.ВосстановитьТаблицуОтборов(Объект, ОтборВОтчете);
	// Восстановим таблицу ТаблицаПараметры
	Документы.бит_ВерсияОтчета.ВосстановитьТаблицуПараметров(Объект, ТаблицаПараметры);
	
	// В начала устанавливаем отбор в результате которого будет чистое поле.
	СтрОтбор = Новый ФиксированнаяСтруктура("ИмяОбласти","#UnrealCellName#");
	Элементы.ТаблицаДанныеОтчета.ОтборСтрок  = СтрОтбор;
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователя", 
		Объект.Ссылка.Метаданные().ПолноеИмя(), НовыеНастройкиФормы());
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиФормы);
	
	Элементы.ФормаКомандаВидимостьДетали.Пометка    = ПанельДеталиВидимость;
	Элементы.ФормаКомандаЗависимыеОбороты.Пометка   = ПанельЗависимыеОборотыВидимость;
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ПанельНастройкиСкрыта;
	
	УстановитьВидимостьПанелей();
	УстановитьВидимость();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Вставить содержимое обработчика.
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		 Если ВыбранноеЗначение.Свойство("Статус") Тогда
		 
			 Статус               = ВыбранноеЗначение.Статус;
			 ДатаИзмененияСтатуса = ВыбранноеЗначение.ДатаИзмененияСтатуса;
			 СтруктураПараметров  = Новый Структура("Статус,ДатаИзмененияСтатуса"
			                                        ,ВыбранноеЗначение.Статус
													,ВыбранноеЗначение.ДатаИзмененияСтатуса);
			 ИнформацияСтатус     = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
		 
		 КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект",Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров);
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	                                    	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ВерсияОтчета";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	ИначеЕсли ИмяСобытия = "АктивизироватьОбласть" И Источник = УникальныйИдентификатор Тогда
		АктивизироватьОбласть(Параметр);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли; 
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриАктивизацииОбласти" 
// поля табличного документа "ТабДокРезультат".
// 
&НаКлиенте
Процедура ТабДокРезультатПриАктивизацииОбласти(Элемент)
	
	Если ПанельДеталиВидимость Тогда
		
		ОблМакета = Элементы.ТабДокРезультат.ТекущаяОбласть;
		Если ОблМакета <> Неопределено И ТипЗнч(ОблМакета) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			ИмяОбласти   = ОблМакета.Имя;
			СтрОтбор = Новый Структура("ИмяОбласти",ИмяОбласти); 
			
			// Установим формат
			МассивСтрок = ТаблицаДанныеОтчета.НайтиСтроки(СтрОтбор);
			Если МассивСтрок.Количество()>0 Тогда
				
				    ВремОбФормат = Новый Структура("ФорматЧисел",МассивСтрок[0].ФорматЧисел);
				 
				    СтрФормат = бит_МеханизмПолученияДанных.ОпределитьФорматПоСтрокеПравил(ВремОбФормат
					                                                                          ,Объект.ФорматЧисел
																							  ,Объект.Язык);
					Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.Формат = СтрФормат;
				 
			 Иначе
				 
				 Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.Формат = Объект.ФорматЧисел;
				 
			КонецЕсли; // Нашли строки с данныхм показателем
			
			// Установим отбор в поле Детали			
            СтрОтборФикс = Новый ФиксированнаяСтруктура(СтрОтбор);
			Элементы.ТаблицаДанныеОтчета.ОтборСтрок  = СтрОтборФикс;			
			
		КонецЕсли; // ОблМакета подходит
		
	КонецЕсли; // ПанельНастройкиСкрыта
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" переключателя "ФормироватьДвиженияПоБюджету".
// 
&НаКлиенте
Процедура ФормироватьДвиженияПоБюджетуПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗависимыеОборотыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ВыбСтрока = Объект.ЗависимыеОбороты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ВыбСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Если Поле = Элементы.ЗависимыеОборотыКомментарийРасчета И НЕ ПустаяСтрока(ВыбСтрока.КомментарийРасчета) Тогда
		СтандартнаяОбработка = Ложь;		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КомментарийРасчета", ВыбСтрока.КомментарийРасчета);
		ОткрытьФорму("ОбщаяФорма.бит_ФормаКомментарияРасчетаЗависимыхОборотовУправляемая", ПараметрыФормы, ЭтотОбъект); 
	Иначе
		ИмяРеквизита = СтрЗаменить(Поле.Имя, "ЗависимыеОбороты", "");
		Если ЗначениеЗаполнено(ВыбСтрока[ИмяРеквизита]) Тогда
			ПоказатьЗначение(,ВыбСтрока[ИмяРеквизита]);
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДанныеОтчета

&НаКлиенте
Процедура ТаблицаДанныеОтчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоля       = СтрЗаменить(Поле.Имя,"ТаблицаДанныеОтчета","");
	
	Если Найти(ИмяПоля,"Аналитика_")>0 Тогда
		
		ТекущаяСтрока = Элементы.ТаблицаДанныеОтчета.ТекущиеДанные;
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ТекЗначение   = ТекущаяСтрока[ИмяПоля];
			ПоказатьЗначение(,ТекЗначение);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаВидимостьНастройки(Команда)
	
	ПанельНастройкиСкрыта = НЕ ПанельНастройкиСкрыта;
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ПанельНастройкиСкрыта;
	
	УстановитьВидимостьПанелей();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВидимостьДетали(Команда)
	
	ПанельДеталиВидимость = НЕ ПанельДеталиВидимость;
	Элементы.ФормаКомандаВидимостьДетали.Пометка = ПанельДеталиВидимость;
	
	УстановитьВидимостьПанелей();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьЯчейку(Команда)
	
	ОткрытьФормуРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьВсе(Команда)
	
	ОткрытьФормуРасшифровки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьОтчетом(Команда)
	
	РасшифроватьОтчетом();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьРасшифровки(Команда)
	
	бит_мпд_Клиент.ЗакрытьРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗависимыеОбороты(Команда)
	
	ПанельЗависимыеОборотыВидимость = НЕ ПанельЗависимыеОборотыВидимость;
	Элементы.ФормаКомандаЗависимыеОбороты.Пометка = ПанельЗависимыеОборотыВидимость;
	
	УстановитьВидимостьПанелей();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗависимыеОбороты(Команда)
	
	Если Объект.ЗависимыеОбороты.Количество()>0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗависимыеОборотыВопросЗавершение", ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'Зависимые обороты будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
		
	Иначе
		
		ЗаполнитьЗависимыеОбороты();	
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗаполнитьЗависимыеОборотыВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ЗаполнитьЗависимыеОборотыВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьЗависимыеОбороты();
		ЗаполнитьЗависимыеОбороты();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗависимыеОборотыВопросЗавершение()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗависимыеОборотыКомментарийРасчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КурсДокумента", ВидСравненияКомпоновкиДанных.Больше, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Комментарий расчета'"));
	
КонецПроцедуры
 
&НаСервере
Процедура НастроитьТаблицуДанных()

	НастройкиАналитик = Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьНастройкуАналитик(Объект.НастройкаОтчета);
	
	Для каждого Колонка Из Элементы.ТаблицаДанныеОтчета.ПодчиненныеЭлементы Цикл
		
		ИмяКолонки = СтрЗаменить(Колонка.Имя,"ТаблицаДанныеОтчета","");
		Если Найти(ИмяКолонки,"Аналитика_")>0 Тогда
		
			СтрНастройка = НастройкиАналитик[ИмяКолонки];
			Если СтрНастройка = Неопределено Тогда
				Колонка.Видимость = Ложь;
			Иначе	
				Колонка.Видимость = Истина;
				Колонка.Заголовок = СтрНастройка.Синоним;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;  
	
	ВыводитьПериод = Ложь;
	Для каждого СтрокаТаблицы Из ТаблицаДанныеОтчета Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПериодДанных) Тогда
			 ВыводитьПериод = Истина;
			 Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Элементы.ТаблицаДанныеОтчетаПериод.Видимость 		  = ВыводитьПериод;
	Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.Формат = Объект.ФорматЧисел;

КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	ЭтоОтчетМСФО = ?(Объект.НастройкаОтчета.ТипОтчета = Перечисления.бит_ТипыПроизвольныхОтчетов.ОтчетностьМСФО,Истина,Ложь);
	
	Элементы.ГруппаОрганизацияПериметр.Видимость = ЭтоОтчетМСФО;
	Элементы.ГруппаПериодНаДату.Видимость = ЭтоОтчетМСФО;
	Элементы.ГруппаПериод.Видимость = НЕ ЭтоОтчетМСФО;
	
	Элементы.Сценарий.Видимость = Объект.ФормироватьДвиженияПоБюджету;
	Элементы.ТаблицаДанныеОтчетаФормироватьДвиженияПоБюджету.Видимость = Объект.ФормироватьДвиженияПоБюджету;
	
	УстановитьЗаголовокОрганизации();

КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура УстановитьВидимостьПанелей()

	Элементы.ГруппаДетали.Видимость  			= ПанельДеталиВидимость;
	Элементы.ГруппаЗависимыеОбороты.Видимость  	= ПанельЗависимыеОборотыВидимость;
	Элементы.ГруппаПраво.Видимость   			= НЕ ПанельНастройкиСкрыта;

КонецПроцедуры // УстановитьВидимостьПанелей()

// Процедура устанавливает заголовок надписи организация в зависимости от того, 
// какое значение выбрано.
// 
&НаСервере
Процедура УстановитьЗаголовокОрганизации()

	Элементы.Организация.Заголовок = ?(Объект.Организация = Неопределено Или ТипЗнч(Объект.Организация) = Тип("СправочникСсылка.Организации")
										, "Организация"
										, "Периметр"); 

КонецПроцедуры // УстановитьЗаголовокОрганизации()

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение",Объект.Организация);
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка,Объект.Дата,СтруктураПараметров);
	
КонецПроцедуры

// Процедура открывает отчет-расшифровку.
// 
&НаКлиенте
Процедура РасшифроватьОтчетом()
	
	ТекОбл = Элементы.ТабДокРезультат.ТекущаяОбласть;
	флЕстьРасшифровка = Ложь;
	
	Если ТекОбл <> Неопределено И ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяОбласти"     ,ТекОбл.Имя);
		СтруктураПараметров.Вставить("НастройкаОтчета",Объект.НастройкаОтчета);
		СтруктураПараметров.Вставить("ДатаНачала"     ,Объект.ДатаНачала);
		СтруктураПараметров.Вставить("ДатаОкончания"  ,Объект.ДатаОкончания);
		СтруктураПараметров.Вставить("ФорматЧисел"    ,Объект.ФорматЧисел);
		СтруктураПараметров.Вставить("ВалютаДокумента",Объект.ВалютаДокумента);
		СтруктураПараметров.Вставить("КурсДокумента"  ,Объект.КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента",Объект.КратностьДокумента);
		СтруктураПараметров.Вставить("Организация"       ,Объект.Организация);
		СтруктураПараметров.Вставить("Язык"              ,Объект.Язык);
		СтруктураПараметров.Вставить("РежимРасшифровки"  ,Истина);
		
		УпаковатьТаблицы(СтруктураПараметров);		
		
		ОткрытьФорму("Отчет.бит_ПроизвольныйОтчет.Форма.ФормаОтчетаУправляемая", СтруктураПараметров, ЭтотОбъект, Строка(ТекОбл.Имя));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не выбрана ячейка для которой следует вывести расшифровку.'");		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; // Область
	
КонецПроцедуры // РасшифроватьОтчетом()

// Процедура открывает форму расшифровки.
// 
// Параметры:
//  ОткрытьВсе - Булево
// 
&НаКлиенте
Процедура ОткрытьФормуРасшифровки(ОткрытьВсе = Ложь)
	
	ТекОбл = Элементы.ТабДокРезультат.ТекущаяОбласть;
	Если ТекОбл <> Неопределено И ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		СтрПар = Новый Структура;
		СтрПар.Вставить("ИмяОбласти"        , ТекОбл.Имя);
		СтрПар.Вставить("НастройкаОтчета"   , Объект.НастройкаОтчета);
		СтрПар.Вставить("ДатаНачала"        , Объект.ДатаНачала);
		СтрПар.Вставить("ДатаОкончания"     , Объект.ДатаОкончания);
		СтрПар.Вставить("ФорматЧисел"       , Объект.ФорматЧисел);
		СтрПар.Вставить("ОткрытьВсе"        , ОткрытьВсе);
		СтрПар.Вставить("ВалютаДокумента"   , Объект.ВалютаДокумента);
		СтрПар.Вставить("КурсДокумента"     , Объект.КурсДокумента);
		СтрПар.Вставить("КратностьДокумента", Объект.КратностьДокумента);
		СтрПар.Вставить("Организация"       , Объект.Организация);
		СтрПар.Вставить("ИмяФормыВладельца" , ИмяФормы);
		СтрПар.Вставить("НастройкаПулаПодключений", Объект.НастройкаПулаПодключений);		
		
		УпаковатьТаблицы(СтрПар);
		
		СтрКлюч = ?(ОткрытьВсе, Строка(Объект.НастройкаОтчета), ТекОбл.Имя);
		ОткрытьФорму("Обработка.бит_РасшифровкаПроизвольногоОтчета.Форма.ФормаУправляемая", СтрПар, ЭтотОбъект, СтрКлюч);
		
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуРасшифровки()

// Процедура упаковывает таблицы формы.
// 
// Возвращаемое значение:
//  СтрТаблиц - Структура
// 
&НаСервере
Процедура УпаковатьТаблицы(СтрПар)
	
	ТабВрем = РеквизитФормыВЗначение("ТаблицаДанныеОтчета");
	СтрПар.Вставить("ТаблицаДанныеОтчета", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
	ТабВрем = РеквизитФормыВЗначение("ОтборВОтчете");
	СтрПар.Вставить("ОтборВОтчете", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
	ТабВрем = РеквизитФормыВЗначение("ТаблицаПараметры");
	СтрПар.Вставить("ТаблицаПараметры", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
КонецПроцедуры	

#Область ЗависимыеОбороты

&НаСервере
Функция РазрешенВводЗависимыхОборотов()

	Если Объект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический Тогда
	  ФлРазрешен = Истина;
	Иначе	
	  ФлРазрешен = Ложь;
	КонецЕсли;

	Возврат ФлРазрешен;
	
КонецФункции

// Выполняет очистку зависимых оборотов. 
// 
&НаСервере
Процедура ОчиститьЗависимыеОбороты()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ОчиститьЗависимыеОбороты();
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
КонецПроцедуры // ОчиститьЗависимыеОбороты()

// Выполняет заполнение зависимых оборотов. 
// 
&НаСервере
Процедура ЗаполнитьЗависимыеОбороты()
	
	Если РазрешенВводЗависимыхОборотов() Тогда
		
		ДокОбъект = РеквизитФормыВЗначение("Объект");	
		ДокОбъект.ЗаполнитьЗависимыеОбороты();
		ЗначениеВДанныеФормы(ДокОбъект, Объект);
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьЗависимыеОбороты()

#КонецОбласти

// Процедура выполняет активизацию области табличного документа.
// 
// Параметры:
//  ИмяОбласти - Строка.
// 
&НаКлиенте
Процедура АктивизироватьОбласть(ИмяОбласти)

	Обл = ТабДокРезультат.Области.Найти(ИмяОбласти);
	
	Если НЕ Обл = Неопределено Тогда
		
		Элементы.ТабДокРезультат.ТекущаяОбласть = Обл;
			
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Функция НовыеНастройкиФормы()

	Настройки = Новый Структура; 
	Настройки.Вставить("ПанельДеталиВидимость", Ложь);
	Настройки.Вставить("ПанельЗависимыеОборотыВидимость", Ложь);
	Настройки.Вставить("ПанельНастройкиСкрыта", Ложь);
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	НастройкиФормы = НовыеНастройкиФормы();
	ЗаполнитьЗначенияСвойств(НастройкиФормы, ЭтотОбъект);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", Объект.Ссылка.Метаданные().ПолноеИмя(), 
		НастройкиФормы);

КонецПроцедуры
 
#КонецОбласти
