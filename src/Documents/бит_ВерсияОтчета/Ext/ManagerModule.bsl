#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура восстанавливает таблицу данных версии отчета.
// 
// Параметры:
//  ВерсияОтчета  - ДокументСсылка.бит_ВерсияОтчета.
//  ТаблицаДанныеОтчета  - ТаблицаЗначений.
// 
Процедура ВосстановитьТаблицуВерсии(ВерсияОтчета,ТаблицаДанныеОтчета) Экспорт

	ТаблицаДанныеОтчета.Очистить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеОтчетов.ВерсияОтчета КАК ВерсияОтчета,
	|	ДанныеОтчетов.ПоказательОтчета КАК ПоказательОтчета,
	|	ДанныеОтчетов.ИД КАК ИД,
	|	ДанныеОтчетов.ИмяОбласти КАК ИмяОбласти,
	|	ДанныеОтчетов.ВидЯчейки КАК ВидЯчейки,
	|	ДанныеОтчетов.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ДанныеОтчетов.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ДанныеОтчетов.Валюта КАК Валюта,
	|	ДанныеОтчетов.ПериодДанных КАК ПериодДанных,
	|	ПоказателиПроизвольныхОтчетов.КоличественныйУчет КАК КоличественныйУчет,
	|	ДанныеОтчетов.ФорматЧисел КАК ФорматЧисел,
	|	ДанныеОтчетов.ФормироватьДвиженияПоБюджету КАК ФормироватьДвиженияПоБюджету,
	|	&ДополнительныеАналитики КАК ДополнительныеАналитики,
	|	ДанныеОтчетов.Аналитика_1 КАК Аналитика_1,
	|	ДанныеОтчетов.Аналитика_2 КАК Аналитика_2,
	|	ДанныеОтчетов.Аналитика_3 КАК Аналитика_3,
	|	ДанныеОтчетов.Аналитика_4 КАК Аналитика_4,
	|	ДанныеОтчетов.Аналитика_5 КАК Аналитика_5,
	|	ДанныеОтчетов.Аналитика_6 КАК Аналитика_6,
	|	ДанныеОтчетов.Аналитика_7 КАК Аналитика_7
	|ИЗ
	|	РегистрСведений.бит_ДанныеПроизвольныхОтчетов КАК ДанныеОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ПоказателиПроизвольныхОтчетов КАК ПоказателиПроизвольныхОтчетов
	|		ПО ДанныеОтчетов.ПоказательОтчета = ПоказателиПроизвольныхОтчетов.Ссылка
	|ГДЕ
	|	ДанныеОтчетов.ВерсияОтчета = &ВерсияОтчета";
	
	ЧтоЗаменить   = "&ДополнительныеАналитики КАК ДополнительныеАналитики,";
	НаЧтоЗаменить = "";
	Шаблон        = "ДанныеОтчетов.Аналитика_%1 КАК Аналитика_%1,";
	
	Вграница = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для Индекс = 8 По Вграница Цикл
		Разделитель   = ?(ПустаяСтрока(НаЧтоЗаменить),"",Символы.ПС);
		НаЧтоЗаменить = НаЧтоЗаменить + Разделитель + СтрШаблон(Шаблон, Индекс);
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВерсияОтчета",ВерсияОтчета);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ТаблицаДанныеОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	
	КонецЦикла; 

КонецПроцедуры // ВосстановитьТаблицуВерсии()

// Процедура восстанавливает таблицу ОтборВОтчете из табличной чатси ОтборХранение.
// 
Процедура ВосстановитьТаблицуОтборов(Объект,ОтборВОтчете)  Экспорт

	 ОтборВОтчете.Очистить();
	 
	 // Получим массив имен параметров.
	 ТабКопия = Объект.ОтборХранение.Выгрузить(,"Имя");
	 ТабКопия.Свернуть("Имя");
	 
	 МассивИмен = ТабКопия.ВыгрузитьКолонку("Имя");
	 
	 // Восстановим таблицу ОтборВОтчете.
	 Для каждого ЭлементИмя Из МассивИмен Цикл
		 
		// Найдем строки с текущем именем
	 	СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Имя",ЭлементИмя);
		
		МассивСтрок = Объект.ОтборХранение.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.Количество() > 0  Тогда
		
			Первая = МассивСтрок[0];
			
			// Восстановим вид сравнения.
			Попытка
				
				ТекВидСравнения = ВидСравнения[Первая.ВидСравнения];
				
			Исключение
				
				ТекВидСравнения = ВидСравнения.Равно;
				
			КонецПопытки;
			
			НоваяСтрока = ОтборВОтчете.Добавить();
			НоваяСтрока.Использование= Первая.Использование;		
			НоваяСтрока.Имя          = Первая.Имя;			
			НоваяСтрока.ВидСравнения = ТекВидСравнения;
			
			// Восстановим значение.
			Если МассивСтрок.Количество()=1 Тогда
				
				ТекЗначение = Первая.Значение;	
				
			Иначе	
				
				ТекЗначение = Новый СписокЗначений;
				Для каждого Элемент Из МассивСтрок Цикл
				
					ТекЗначение.Добавить(Элемент.Значение);
				
				КонецЦикла; 
				
			КонецЕсли; 
			НоваяСтрока.Значение = ТекЗначение;
			
		КонецЕсли;  // Нашли строки с именем.
	 
	 КонецЦикла; // По МассивуИмен.

КонецПроцедуры // ВосстановитьТаблицуОтборов()

// Процедура восстанавливает таблицу ТаблицаПараметры из табличной части ПараметрыХранение.
// 
Процедура ВосстановитьТаблицуПараметров(Объект, ТаблицаПараметры) Экспорт

	 ТаблицаПараметры.Очистить();
	 
	 // Получим массив имен параметров.
	 ТабКопия = Объект.ПараметрыХранение.Выгрузить(,"ИмяПараметра");
	 ТабКопия.Свернуть("ИмяПараметра");
	 
	 МассивИмен = ТабКопия.ВыгрузитьКолонку("ИмяПараметра");
	 
	 // Восстановим таблицу ОтборВОтчете.
	 Для каждого ЭлементИмя Из МассивИмен Цикл
		 
		// Найдем строки с текущем именем.
	 	СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИмяПараметра",ЭлементИмя);
		
		МассивСтрок = Объект.ПараметрыХранение.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.Количество() > 0  Тогда
		
			Первая = МассивСтрок[0];
			
			НоваяСтрока = ТаблицаПараметры.Добавить();
			НоваяСтрока.ИмяПараметра      = Первая.ИмяПараметра;	
			НоваяСтрока.ВидПараметра      = Первая.ВидПараметра;
			НоваяСтрока.ЗначениеПараметра = Первая.ЗначениеПараметра;
			
			// Восстановим значение.
			Если МассивСтрок.Количество()=1 Тогда
				
				ТекЗначение = Первая.ЗначениеПараметра;	
				
			Иначе	
				
				ТекЗначение = Новый СписокЗначений;
				Для каждого Элемент Из МассивСтрок Цикл
				
					ТекЗначение.Добавить(Элемент.ЗначениеПараметра);
				
				КонецЦикла; 
				
			КонецЕсли; 
			НоваяСтрока.ЗначениеПараметра = ТекЗначение;
			
		КонецЕсли;  // Нашли строки с именем.
	 
	 КонецЦикла; // По МассивуИмен.

 КонецПроцедуры // ВосстановитьТаблицуПараметров()
 
#КонецОбласти
 
#КонецЕсли
