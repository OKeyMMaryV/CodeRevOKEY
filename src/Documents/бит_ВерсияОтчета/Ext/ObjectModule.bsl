#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ФормироватьДвиженияПоБюджету Тогда
		
		ПроверяемыеРеквизиты.Добавить("Сценарий");
		
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли; 
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(РежимЗависимыхОборотов) Тогда
		РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	ДополнительныеСвойства.Вставить("Проведен",    Проведен);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьЗависимыеОбороты();
	КонецЕсли; 
	
	Если Организация = Неопределено Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли; 
	
	// Запишем автора и последнего изменившего.
	Если НЕ ЗначениеЗаполнено(Автор) Тогда
		Автор         = Пользователи.ТекущийПользователь();
		ДатаСоздания  = ТекущаяДата();
	КонецЕсли; 
	
	Ответственный = Пользователи.ТекущийПользователь();
	ДатаИзменения = ТекущаяДата();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
		
		НаборДанные = РегистрыСведений.бит_ДанныеПроизвольныхОтчетов.СоздатьНаборЗаписей();
		НаборДанные.Отбор.ВерсияОтчета.Установить(Ссылка, Истина);
		
		Для каждого СтрокаТаблицы Из ДополнительныеСвойства.ДанныеОтчета Цикл
			Запись = НаборДанные.Добавить();
			ЗаполнитьЗначенияСвойств(Запись,СтрокаТаблицы);
			Запись.Валюта       = ВалютаДокумента;
			Запись.ВерсияОтчета = Ссылка;
		КонецЦикла; 
		НаборДанные.Записать();
		ДополнительныеСвойства.Удалить("ДополнительныеСвойства");
	КонецЕсли; 
	
	Если НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УстановитьСтатус(ДополнительныеСвойства.РежимЗаписи);
	КонецЕсли;  		
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Реквизиты = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Получим курсы валют, необходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Документ, Регл, Упр, Сценарий");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Реквизиты.Дата, ВидыКурсов);
	
	Если ДополнительныеСвойства.Свойство("СтруктураТаблиц") Тогда
		ТаблицыДокумента = ДополнительныеСвойства.СтруктураТаблиц;	
	Иначе	
		ТаблицыДокумента = ПодготовитьТаблицыДокумента(Реквизиты,СтруктураКурсыВалют);	
	КонецЕсли; 
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Реквизиты, ТаблицыДокумента, Отказ, Заголовок);
		
		// Заполним перечень виз.
		Если Константы.бит_РежимОбновленияПеречняВиз.Получить() = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении 
				ИЛИ НЕ ДополнительныеСвойства.Проведен Тогда
			ПараметрыОбновления = Новый Структура;
			ПараметрыОбновления.Вставить("СтруктурноеПодразделение",Организация);
			бит_Визирование.ОбновитьПереченьВиз(Ссылка,Дата,ПараметрыОбновления);
		КонецЕсли; 
		
        // Установим статус документа.
        УстановитьСтатус(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Реквизиты = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если Реквизиты.ФормироватьДвиженияПоБюджету Тогда
	
		// Получим курсы валют, необходимые для выполнения пересчетов.
		ВидыКурсов = Новый Структура("Документ, Регл, Упр, Сценарий");
		СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, Реквизиты.Дата, ВидыКурсов);
		
		ТаблицыДокумента = ПодготовитьТаблицыДокумента(Реквизиты,СтруктураКурсыВалют);	

		бит_Бюджетирование.ПроверитьФиксацию(Реквизиты.Сценарий, ТаблицыДокумента.ТаблицаБюджета, Отказ);

		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
    Если НЕ Отказ Тогда
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура устанавливает статус документа.
// 
// Параметры:
// 	Нет.
// 
Процедура УстановитьСтатус(ВхРежимЗаписи = Неопределено) Экспорт
	
	АлгоритмыОбъекта         = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,
								Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	АлгоритмИзмененияСтатуса = АлгоритмыОбъекта.ИзменениеСтатусовОбъектов;
	
	Если НЕ ЗначениеЗаполнено(АлгоритмИзмененияСтатуса) Тогда
		
		Если вхРежимЗаписи = Неопределено Тогда
		     РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
		     РежимЗаписи = вхРежимЗаписи;
		 КонецЕсли; 
		 
		ТекущийСтатус = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка).Статус;
		
		// Вычислим переменные, необходимые для установки статуса.
	    ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);				
	    НовыйСтатус 	= ОпределитьСтатус(ЭтотОбъект, ТекущийСтатус, ВсеВизыПолучены, ЕстьОтклонено, РежимЗаписи);
		
		// Если статус изменился - запишем его.
		Если ТекущийСтатус <> НовыйСтатус Тогда
			ДатаИзмененияСтатуса = ТекущаяДата();
			ДействиеВыполнено 	 = бит_Визирование.УстановитьСтатусОбъекта(Ссылка, 
										Перечисления.бит_ВидыСтатусовОбъектов.Статус, НовыйСтатус, ТекущийСтатус, 
										Пользователи.ТекущийПользователь(), ДатаИзмененияСтатуса);
		КонецЕсли;
	
	Иначе	
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию(
									"КомментироватьХодВыполненияАлгоритмовПроцессов",
									Пользователи.ТекущийПользователь());
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		Контекст = Новый Структура;
		Контекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		бит_уп_Сервер.ВыполнитьАлгоритм(АлгоритмИзмененияСтатуса,Контекст,РежимСообщений);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет сохранение табличного документа с результатами отчета в хранилище.
// 
// Параметры:
//  ТабДок  - ТабличныйДокумент.
// 
Процедура СохранитьТабДокРезультат(ТабДок)  Экспорт
	
	ТД = Новый ТабличныйДокумент;
	
	ТД.ФиксацияСверху = ТабДок.ФиксацияСверху;
	ТД.ФиксацияСлева  = ТабДок.ФиксацияСлева;
	ТД.Вывести(ТабДок);
	
	ХранилищеТабДокумент = Новый ХранилищеЗначения(ТД, Новый СжатиеДанных(9));
	
КонецПроцедуры // СохранитьТабДокРезультат()

// Функция выполняет получение табличного документа с результатами отчета из хранилища.
// 
// Возвращаемое значение:
//   СохраненныйТабДокумент   - ТабличныйДокумент.
// 
Функция ПолучитьТабДокРезультат() Экспорт

	СохраненныйТабДокумент = ХранилищеТабДокумент.Получить();
	
	Если Не ТипЗнч(СохраненныйТабДокумент) = Тип("ТабличныйДокумент") Тогда
	
		СохраненныйТабДокумент = Новый ТабличныйДокумент;
				
	КонецЕсли;	

	Возврат СохраненныйТабДокумент;
	
КонецФункции // ПолучитьТабДокРезультат()

// Процедура устанавливает номер версии отчета.
// 
Процедура УстановитьНомерВерсии() Экспорт

	КоличествоСохраненных = 0;
	
	// Определим количество сохраненных версий отчета.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ЭкземплярОтчета",ЭкземплярОтчета);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СУММА(1) КАК КоличествоСохраненных
	                |ИЗ
	                |	Документ.бит_ВерсияОтчета КАК бит_ВерсияОтчета
	                |ГДЕ
	                |	бит_ВерсияОтчета.ЭкземплярОтчета = &ЭкземплярОтчета
	                |	И бит_ВерсияОтчета.Ссылка <> &Ссылка";
					
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.КоличествоСохраненных) Тогда
			
			КоличествоСохраненных = Выборка.КоличествоСохраненных;
			
		КонецЕсли; 
	
	КонецЕсли; 

	НомерВерсии = КоличествоСохраненных+1;
	
	// Дополним номер нулями слева
	СтрФормат   = "ЧЦ="+Метаданные().ДлинаНомера+"; ЧВН=; ЧГ=0";
	СтрНомер    = Формат(НомерВерсии,СтрФормат);
	
	Номер = СтрНомер;
	
КонецПроцедуры // УстановитьНомерВерсии()

// Процедура очищает табличную часть ЗависимыеОбороты.
// 
// Параметры:
//  Нет.
// 
Процедура ОчиститьЗависимыеОбороты() Экспорт

	ЗависимыеОбороты.Очистить();

КонецПроцедуры // ОчиститьЗависимыеОбороты()

// Процедура заполняет табличную часть ЗависимыеОбороты.
// 
// Параметры:
//  Нет.
// 
Процедура ЗаполнитьЗависимыеОбороты() Экспорт

	УстановитьПривилегированныйРежим(Истина);	
	
	ОчиститьЗависимыеОбороты();
	
	Если НЕ ЗначениеЗаполнено(РежимЗависимыхОборотов)
		ИЛИ РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать Тогда
		// Не формируем зависимые обороты.
		Возврат;
	КонецЕсли;
	
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя");
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Получим курсы валют, необходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Документ, Регл, Упр, Сценарий");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента,СтруктураКурсыВалют);	
	
	БДДС = СтруктураТаблиц.ТаблицаБюджета.Скопировать();
	
	БДДС.Колонки.Добавить("ИД");
	
	МаксПериод = бит_Бюджетирование.ПолучитьМаксПериод(БДДС);		
	НастройкиЗависимыхОборотов = бит_Бюджетирование.ПолучитьНастройкиЗависимыхОборотов(Сценарий, МаксПериод);		
	
	Для каждого СтрокаТаблицы Из БДДС Цикл
		ПараметрыФормирования = бит_Бюджетирование.НовыеПараметрыФормированияЗависмыхОборотовПоСтроке();
		ПараметрыФормирования.ДатаЗаполнения 			= СтрокаТаблицы.Период;
		ПараметрыФормирования.ТекущийОбъект 			= ЭтотОбъект;
		ПараметрыФормирования.СтрокаТабличнойЧасти		= СтрокаТаблицы;
		ПараметрыФормирования.ИмяТабличнойЧастиИсточник = "ПараметрыХранение";
		ПараметрыФормирования.ИмяТабличнойЧастиПриемник = "ЗависимыеОбороты";
		ПараметрыФормирования.ИзмеренияБюджетирования	= Измерения;
		ПараметрыФормирования.вхНастройкиЗависимых		= НастройкиЗависимыхОборотов;
		бит_Бюджетирование.СформироватьЗависимыеОборотыПоСтроке(ПараметрыФормирования);
	КонецЦикла; 
	
	ТаблицаБюджета = СтруктураТаблиц.ТаблицаБюджета;
	Для каждого Стр Из ЗависимыеОбороты Цикл
	
		НоваяСтрока = ТаблицаБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		
		НоваяСтрока.Сценарий 		= Сценарий;
		НоваяСтрока.Валюта 			= ВалютаДокумента;
		НоваяСтрока.СтавкаНДС 		= Стр.СтатьяОборотов.СтавкаНДС;
		НоваяСтрока.ЭтоКоэффициент 	= Стр.СтатьяОборотов.ЭтоКоэффициент;
		
	КонецЦикла; 
	
	КурсыПоПериодам = Неопределено;
	
	Если Сценарий.ИспользоватьКурсыСценария Тогда
		
		ТаблицаПериодов = ТаблицаБюджета.Скопировать();
		ТаблицаПериодов.Свернуть("Период");
		
		// Установим настройки для получения курсов по периодам.
		СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(Сценарий, ВалютаДокумента);
		
		// Получим курсы по периодам.
		КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов, Сценарий, СтруктураПараметров);
		
	КонецЕсли;
	
	бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаБюджета, КурсыПоПериодам, СтруктураКурсыВалют);
	
	ДополнительныеСвойства.Вставить("СтруктураТаблиц", СтруктураТаблиц);
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры // ЗаполнитьЗависимыеОбороты()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьСтатус(ТекущийОбъект, НачальныйСтатус, ВсеВизыПолучены, ЕстьОтклонено, вхРежимЗаписи)

    РезСтатус = НачальныйСтатус;
    
    Если вхРежимЗаписи = РежимЗаписиДокумента.Проведение 
        ИЛИ (вхРежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
        РезСтатус = Справочники.бит_СтатусыОбъектов.ВерсияОтчета_Рабочая;
    Иначе
        РезСтатус = Справочники.бит_СтатусыОбъектов.ВерсияОтчета_Черновик;
    КонецЕсли; 
    
    Если РезСтатус = Справочники.бит_СтатусыОбъектов.ВерсияОтчета_Рабочая 
        ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ВерсияОтчета_Утверждена 
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ВерсияОтчета_Отклонен Тогда
		
		Если ЕстьОтклонено Тогда
			РезСтатус = Справочники.бит_СтатусыОбъектов.ВерсияОтчета_Отклонен;			
		Иначе	
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.ВерсияОтчета_Утверждена;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.ВерсияОтчета_Рабочая;
			КонецЕсли; 
		КонецЕсли;
    КонецЕсли; 
    
    Возврат РезСтатус;
    
КонецФункции

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента,СтруктураКурсыВалют)  Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеОтчетов.ВерсияОтчета КАК ВерсияОтчета,
	|	ДанныеОтчетов.ПоказательОтчета КАК ПоказательОтчета,
	|	ДанныеОтчетов.ИД КАК ИД,
	|	ДанныеОтчетов.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ДанныеОтчетов.Валюта КАК Валюта,
	|	ДанныеОтчетов.ПериодДанных КАК ПериодДанных,
	|	ДанныеОтчетов.Аналитика_1 КАК Аналитика_1,
	|	ДанныеОтчетов.Аналитика_2 КАК Аналитика_2,
	|	ДанныеОтчетов.Аналитика_3 КАК Аналитика_3,
	|	ДанныеОтчетов.Аналитика_4 КАК Аналитика_4,
	|	ДанныеОтчетов.Аналитика_5 КАК Аналитика_5,
	|	ДанныеОтчетов.Аналитика_6 КАК Аналитика_6,
	|	ДанныеОтчетов.Аналитика_7 КАК Аналитика_7,
	|	&ДополнительныеАналитики КАК ДополнительныеАналитики,
	|	ПоказателиПроизвольныхОтчетов.КоличественныйУчет КАК ИндексРесурса,
	|	ДанныеОтчетов.ФормироватьДвиженияПоБюджету КАК ФормироватьДвиженияПоБюджету
	|ПОМЕСТИТЬ ДанныеОтчетов
	|ИЗ
	|	РегистрСведений.бит_ДанныеПроизвольныхОтчетов КАК ДанныеОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ПоказателиПроизвольныхОтчетов КАК ПоказателиПроизвольныхОтчетов
	|		ПО ДанныеОтчетов.ПоказательОтчета = ПоказателиПроизвольныхОтчетов.Ссылка
	|ГДЕ
	|	ДанныеОтчетов.ВерсияОтчета = &ВерсияОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчетов.ВерсияОтчета КАК ВерсияОтчета,
	|	ДанныеОтчетов.ПоказательОтчета КАК ПоказательОтчета,
	|	ДанныеОтчетов.ПериодДанных КАК ПериодДанных,
	|	СУММА(ДанныеОтчетов.ЗначениеПоказателя) КАК ЗначениеПоказателя
	|ИЗ
	|	ДанныеОтчетов КАК ДанныеОтчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОтчетов.ПоказательОтчета,
	|	ДанныеОтчетов.ПериодДанных,
	|	ДанныеОтчетов.ВерсияОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчетов.ВерсияОтчета КАК ВерсияОтчета,
	|	ДанныеОтчетов.ПоказательОтчета КАК ПоказательОтчета,
	|	ДанныеОтчетов.ИД КАК ИД,
	|	ДанныеОтчетов.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ДанныеОтчетов.Валюта КАК Валюта,
	|	ДанныеОтчетов.ПериодДанных КАК ПериодДанных,
	|	ДанныеОтчетов.Аналитика_1 КАК Аналитика_1,
	|	ДанныеОтчетов.Аналитика_2 КАК Аналитика_2,
	|	ДанныеОтчетов.Аналитика_3 КАК Аналитика_3,
	|	ДанныеОтчетов.Аналитика_4 КАК Аналитика_4,
	|	ДанныеОтчетов.Аналитика_5 КАК Аналитика_5,
	|	ДанныеОтчетов.Аналитика_6 КАК Аналитика_6,
	|	ДанныеОтчетов.Аналитика_7 КАК Аналитика_7,
	|	&ДополнительныеАналитики КАК ДополнительныеАналитики,
	|	ДанныеОтчетов.ИндексРесурса КАК ИндексРесурса
	|ИЗ
	|	ДанныеОтчетов КАК ДанныеОтчетов
	|ГДЕ
	|	ДанныеОтчетов.ФормироватьДвиженияПоБюджету";
	
	ЧтоЗаменить   = "&ДополнительныеАналитики КАК ДополнительныеАналитики,";
	НаЧтоЗаменить = "";
	Шаблон        = "ДанныеОтчетов.Аналитика_%1 КАК Аналитика_%1,";
	
	Вграница = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
	Для Индекс = 8 По Вграница Цикл
		Разделитель   = ?(ПустаяСтрока(НаЧтоЗаменить),"",Символы.ПС);
		НаЧтоЗаменить = НаЧтоЗаменить + Разделитель + СтрШаблон(Шаблон, Индекс);
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВерсияОтчета",Ссылка);

	Пакет = Запрос.ВыполнитьПакет();
	ПараметрыПроведения = Новый Структура; 
 	ПараметрыПроведения.Вставить("ТабДанные", 	   Пакет[1].Выгрузить());
	ПараметрыПроведения.Вставить("ТаблицаБюджета", Пакет[2].Выбрать());
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТабДанные", ПараметрыПроведения.ТабДанные);
	
	РеквизитыСтатей = Новый Соответствие(); // Кэширование реквизитов статей для лвижений.
	
	Если СтруктураШапкиДокумента.ФормироватьДвиженияПоБюджету Тогда
		
		ТаблицаБюджета    = КонструкторТаблицаБюджета();
		ПравилаЗаполнения = ПравилаЗаполненияБюджета();
		
		Исключения = Новый Массив;
		Исключения.Добавить("Сценарий");
		Исключения.Добавить("ЦФО");	
		Исключения.Добавить("СтатьяОборотов");				
		
		ИзмеренияБюджета = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Все", "Имя", "Структура", Исключения);
		Выборка   		 = ПараметрыПроведения.ТаблицаБюджета;
		
		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаДвижений) Тогда
			ДатаДвижений =	СтруктураШапкиДокумента.ДатаДвижений;
		Иначе
			ДатаДвижений = СтруктураШапкиДокумента.Дата;
		КонецЕсли; 
	  
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПериодДанных) Тогда
				Период = Выборка.ПериодДанных; 
			Иначе	
				Период = ДатаДвижений;
			КонецЕсли; 
			
			НоваяСтрока = ТаблицаБюджета.Добавить();
			НоваяСтрока.Сценарий     = СтруктураШапкиДокумента.Сценарий;
			НоваяСтрока.Период       = Период;
			НоваяСтрока.Валюта       = Выборка.Валюта;
			НоваяСтрока.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;

			Для каждого КиЗ Из ПравилаЗаполнения Цикл
				НоваяСтрока[КиЗ.Значение] = Выборка[КиЗ.Ключ];
			КонецЦикла; 
			
			Если ЗначениеЗаполнено(НоваяСтрока.СтатьяОборотов) Тогда
				// Статья оборотов уже должна быть заполнена.
				РеквизитыСтатьи = РеквизитыСтатьи(НоваяСтрока.СтатьяОборотов, РеквизитыСтатей);
				Для каждого КлючИЗначение Из ИзмеренияБюджета Цикл
					
					Измерение     	   = КлючИЗначение.Ключ;
					НастройкиАналитики = РеквизитыСтатьи.Измерения[Измерение];
					
					Если НЕ НастройкиАналитики.Учет Тогда
						НоваяСтрока[Измерение] = Неопределено;
					КонецЕсли; 
				КонецЦикла;		
				
				УстановитьРесурсыПроводки(РеквизитыСтатьи, Выборка, НоваяСтрока);
				НоваяСтрока.ЭтоКоэффициент = РеквизитыСтатьи.ЭтоКоэффициент;
			КонецЕсли; 
		КонецЦикла;  // По таблице показателей.
	  
		КурсыПоПериодам = Неопределено;
		Если Сценарий.ИспользоватьКурсыСценария Тогда
		  
			// Получим таблицу периодов.
			ТаблицаПериодов = ТаблицаБюджета.Скопировать();
			ТаблицаПериодов.Свернуть("Период");

			// Установим настройки для получения курсов по периодам.
			СтруктураПараметров = бит_Бюджетирование.ЗаполнитьСтруктуруПараметровПолученияКурсовПоПериодам(СтруктураШапкиДокумента.Сценарий,
										СтруктураШапкиДокумента.ВалютаДокумента);

			// Получим курсы по периодам.
			КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТаблицаПериодов,
									СтруктураШапкиДокумента.Сценарий, СтруктураПараметров);
		КонецЕсли; 

		бит_Бюджетирование.ВыполнитьПересчетыВТаблицеОборотов(ТаблицаБюджета, КурсыПоПериодам, СтруктураКурсыВалют);

		СтруктураТаблиц.Вставить("ТаблицаБюджета",ТаблицаБюджета);

	КонецЕсли; 
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

Функция РеквизитыСтатьи(СтатьяОборотов, РеквизитыСтатей)

	РеквизитыСтатьи = РеквизитыСтатей.Получить(СтатьяОборотов);
	Если РеквизитыСтатьи = Неопределено Тогда
		РеквизитыСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(СтатьяОборотов);
		РеквизитыСтатей.Вставить(СтатьяОборотов, РеквизитыСтатьи);
	КонецЕсли; 
	
	Возврат РеквизитыСтатьи;

КонецФункции
 
Процедура УстановитьРесурсыПроводки(РеквизитыСтатьи, ДанныеУчета, Проводка)
	
	Если РеквизитыСтатьи.Учет_Количество И ДанныеУчета.ИндексРесурса = 1 Тогда
		Проводка.Количество = ДанныеУчета.ЗначениеПоказателя;
	ИначеЕсли РеквизитыСтатьи.Учет_Сумма И ДанныеУчета.ИндексРесурса = 0 Тогда	
		Проводка.Сумма = ДанныеУчета.ЗначениеПоказателя;
	КонецЕсли;	
	
КонецПроцедуры

// Функция инициализирует таблицу бюджета.
// 
// Возвращаемое значение:
//   ТаблицаБюджета   - ТаблицаЗначений.
// 
Функция КонструкторТаблицаБюджета()
				   
	ИмяТипаСценарий = бит_ОбщегоНазначения.ПолучитьИмяТипаСценарииБюджетирования();
	ИмяТипаПроект   = бит_ОбщегоНазначения.ПолучитьИмяТипаПроекты();
	ИмяТипаЦФО      = бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО();
	
	ОписаниеЧисло = Новый ОписаниеТипов("Число");
	
	ТаблицаБюджета = Новый ТаблицаЗначений;
	
	ТаблицаБюджета.Колонки.Добавить("Период"              ,Новый ОписаниеТипов("Дата"));
	ТаблицаБюджета.Колонки.Добавить("Сценарий"            ,Новый ОписаниеТипов(ИмяТипаСценарий));
	ТаблицаБюджета.Колонки.Добавить("ЦФО"                 ,Новый ОписаниеТипов(ИмяТипаЦФО));
	ТаблицаБюджета.Колонки.Добавить("СтатьяОборотов"      ,Новый ОписаниеТипов("СправочникСсылка.бит_СтатьиОборотов"));
	ТаблицаБюджета.Колонки.Добавить("ЭтоКоэффициент"      ,Новый ОписаниеТипов("Булево"));	
	ТаблицаБюджета.Колонки.Добавить("Аналитика_1");
	ТаблицаБюджета.Колонки.Добавить("Аналитика_2");
	ТаблицаБюджета.Колонки.Добавить("Аналитика_3");
	ТаблицаБюджета.Колонки.Добавить("Аналитика_4");
	ТаблицаБюджета.Колонки.Добавить("Аналитика_5");
	ТаблицаБюджета.Колонки.Добавить("Аналитика_6");
	ТаблицаБюджета.Колонки.Добавить("Аналитика_7");	
	ТаблицаБюджета.Колонки.Добавить("Количество"         ,ОписаниеЧисло);
	ТаблицаБюджета.Колонки.Добавить("Валюта"             ,Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаБюджета.Колонки.Добавить("Сумма"              ,ОписаниеЧисло);
	ТаблицаБюджета.Колонки.Добавить("СтавкаНДС"          ,Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаБюджета.Колонки.Добавить("НДС"                ,ОписаниеЧисло);
	ТаблицаБюджета.Колонки.Добавить("СуммаРегл"          ,ОписаниеЧисло);
	ТаблицаБюджета.Колонки.Добавить("СуммаУпр"           ,ОписаниеЧисло);
	ТаблицаБюджета.Колонки.Добавить("СуммаСценарий"      ,ОписаниеЧисло);
	// ++ БП 
	ТаблицаБюджета.Колонки.Добавить("Контрагент"          ,Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаБюджета.Колонки.Добавить("ДоговорКонтрагента"  ,Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаБюджета.Колонки.Добавить("Проект"              ,Новый ОписаниеТипов(ИмяТипаПроект));
	ТаблицаБюджета.Колонки.Добавить("НоменклатурнаяГруппа",Новый ОписаниеТипов(бит_ОбщегоНазначения.ПолучитьИмяТипаНоменклатурныеГруппы()));
	ТаблицаБюджета.Колонки.Добавить("БанковскийСчет"      ,Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	// -- БП 
	
	Возврат ТаблицаБюджета;
	
КонецФункции // КонструкторТаблицаБюджета()

// Функция определяет правила заполнения измерений регистра бит_ОборотыПоБюджету.
// Аналитикой ПроизвольногоОтчета.
// 
// 
// Возвращаемое значение:
//   ПравилаЗаполнения   - Структура.
// 
Функция ПравилаЗаполненияБюджета()

	ПравилаЗаполнения = Новый Структура;
	
	НастройкиАналитик     = Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьНастройкуАналитик(НастройкаОтчета);
	НастройкиДопИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Исключения = Новый Массив;
	Исключения.Добавить("Сценарий");
	Для й = 1 По 7 Цикл // 4-?
		Исключения.Добавить("Аналитика_"+й);
	КонецЦикла; 
	
	ИзмеренияБюджета = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Все","Тип","Структура",Исключения);
	
	Для каждого КиЗ Из НастройкиАналитик Цикл
	
		Настройка = КиЗ.Значение;
		
		// Обычные измерения.		
		Для каждого КиЗ_Измерения Из ИзмеренияБюджета Цикл
			
			ИмяАналитики = СокрЛП(Настройка.Аналитика.Код);
			Если ИмяАналитики = КиЗ_Измерения.Ключ Тогда
				 // Подбираем по имени.
			     ПравилаЗаполнения.Вставить(КиЗ.Ключ,КиЗ_Измерения.Ключ);
				 Продолжить;
			Иначе
				
				// Подбираем по типу.
				Сравнение = Новый СравнениеЗначений;
				РезСравнения = Сравнение.Сравнить(Настройка.ТипЗначения,КиЗ_Измерения.Значение);
				Если РезСравнения = 0 Тогда
					ПравилаЗаполнения.Вставить(КиЗ.Ключ,КиЗ_Измерения.Ключ);
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; // Обычные измерения.
		
		// Произвольные измерения
		Для каждого КиЗ_Измерения Из НастройкиДопИзмерений Цикл
			
			 НастройкаИзмерения= КиЗ_Измерения.Значение;
			 Если Настройка.Аналитика = НастройкаИзмерения.Аналитика Тогда
					ПравилаЗаполнения.Вставить(КиЗ.Ключ,КиЗ_Измерения.Ключ);
					Продолжить;
			 КонецЕсли; 
		КонецЦикла; // Произвольные измерения.
	КонецЦикла; // По настройкам аналитик.

	Возврат ПравилаЗаполнения;
	
КонецФункции // ПравилаЗаполненияБюджета()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)
	
	// По регистру бит_ПоказателиПроизвольныхОтчетов.
	ТаблицаДвижений = Движения.бит_ПоказателиПроизвольныхОтчетов.Выгрузить();
	
	ДатаДвижений = ?(ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаДвижений),СтруктураШапкиДокумента.ДатаДвижений,СтруктураШапкиДокумента.Дата);
	
	Для каждого СтрокаТаблицы Из СтруктураТаблиц.ТабДанные Цикл
		
		Запись = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,СтрокаТаблицы);
		Запись.Валюта = СтруктураШапкиДокумента.ВалютаДокумента;
		
		ТекПериод = ?(ЗначениеЗаполнено(СтрокаТаблицы.ПериодДанных),СтрокаТаблицы.ПериодДанных,ДатаДвижений);
		Запись.Период = ТекПериод;
		
	КонецЦикла; 
	
	Движения.бит_ПоказателиПроизвольныхОтчетов.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_ПоказателиПроизвольныхОтчетов.ДобавитьДвижение();
	
	Если СтруктураШапкиДокумента.ФормироватьДвиженияПоБюджету Тогда
		
		// Движения по регистру обороты по бюджетам.
		ТаблицаДвижений = Движения.бит_ОборотыПоБюджетам.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		Для Каждого СтрокаТаблицы Из СтруктураТаблиц.ТаблицаБюджета Цикл
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			
		КонецЦикла; 
		
		Движения.бит_ОборотыПоБюджетам.мТаблицаДвижений = ТаблицаДвижений;
		Движения.бит_ОборотыПоБюджетам.ДобавитьДвижение();
		
		// Регистру бухгалтерии бюджетирование.
		бит_Бюджетирование.СформироватьПроводкиБюджетирования(СтруктураТаблиц.ТаблицаБюджета,Движения.бит_Бюджетирование);
		
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти
#КонецЕсли
