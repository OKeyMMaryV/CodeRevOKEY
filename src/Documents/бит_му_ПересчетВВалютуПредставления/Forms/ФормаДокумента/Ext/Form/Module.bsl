
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	// Кешируем количество субконто
	фКоличествоСубконтоМУ = 4;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"Счет"
												   ,"Субконто"
												   ,фКоличествоСубконтоМУ
												   ,"ТрансляционныеРазницы"
												   ,"Элементы.ТрансляционныеРазницы.ТекущиеДанные");	 
												   
	ВосстановитьКоличествоДоступныхСубконто();											   
												   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"ТрансляционныеРазницы"
															   ,"Субконто"
															   ,"КоличествоДоступныхСубконто"
															   ,фКоличествоСубконтоМУ);

	// Устанавливаем связи параметров выбора и связи по типу субконто для Счета доходов.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетДоходов", "СубконтоДоходов", фКоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходов");
	
	// Устанавливаем связи параметров выбора и связи по типу субконто для Счета расходов.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетРасходов", "СубконтоРасходов", фКоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Организация");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если мКэшЗначений.СтрКурсаМСФО.Валюта = мКэшЗначений.СтрКурсаУпр.Валюта Тогда
	
		Отказ = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Валюта МСФО равна валюте управленческого учета, 
											|трансляционные разницы не сформируются!'"));
	
	КонецЕсли; 
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ПересчетВВалютуПредставления";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	УстановитьЗаголовокФормыДокумента();
	
	ВосстановитьКоличествоДоступныхСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
    Если мКэшРеквизитовФормы.Организация <> Объект.Организация Тогда
      	
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО();
        ДобавитьВКэш("Организация");
		
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	
	ИзменениеСчетДоходовРасходов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовПриИзменении(Элемент)
	
	ИзменениеСчетДоходовРасходов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто, "Доходов");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)

	ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
													 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоДоходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто, "Расходов");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)

	ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
													 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоРасходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект, ЗначениеСубконто, "Доходов");
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект, ЗначениеСубконто, "Расходов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрансляционныеРазницы

&НаКлиенте
Процедура ТрансляционныеРазницыСчетПриИзменении(Элемент)
	
	Идентификатор     = Элементы.ТрансляционныеРазницы.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаТрансляционныеРазницы(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрансляционныеРазницыСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущаяСтрока     = Элементы.ТрансляционныеРазницы.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ТрансляционныеРазницы", Элемент.Имя);		
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрансляционныеРазницыСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТрансляционныеРазницы.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ТрансляционныеРазницы", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрансляционныеРазницыСубконтоПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.ТрансляционныеРазницы.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ТрансляционныеРазницы", Элемент.Имя);		
	ИзменениеСубконто(ТекущаяСтрока, ЗначениеСубконто, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрансляционныеРазницыСуммаМСФОПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТрансляционныеРазницы.ТекущиеДанные;
	ВычислитьРазницуСумм(ТекущаяСтрока, мКэшЗначений);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрансляционныеРазницыСуммаУпрПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТрансляционныеРазницы.ТекущиеДанные;
	ВычислитьРазницуСумм(ТекущаяСтрока, мКэшЗначений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	ОповещениеКомандаЗаполнитьЗвершение = Новый ОписаниеОповещения("КомандаЗаполнитьЗвершение", ЭтотОбъект);
	ОповещениеОчисткаТЧ					= Новый ОписаниеОповещения("ВопросОчисткиТрансляционныеРазницыЗавершение", 
												ЭтотОбъект, 
												Новый Структура("ОповещениеКомандаЗаполнитьЗвершение", ОповещениеКомандаЗаполнитьЗвершение));
												
	ТекстВопросаОчисткаТЧ = НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'");
	
	Если Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		ДополнительныеДанные = Новый Структура;
		ДополнительныеДанные.Вставить("ОповещениеКомандаЗаполнитьЗвершение",ОповещениеКомандаЗаполнитьЗвершение);
		ДополнительныеДанные.Вставить("ОповещениеОчисткаТЧ",ОповещениеОчисткаТЧ);
		ДополнительныеДанные.Вставить("ТекстВопросаОчисткаТЧ",ТекстВопросаОчисткаТЧ);
		
		ОповещениеОтменаПроведения = Новый ОписаниеОповещения("ВопросОбОтменеПроведенияЗавершение", ЭтотОбъект, ДополнительныеДанные);
		ПоказатьВопрос(ОповещениеОтменаПроведения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Если Объект.ТрансляционныеРазницы.Количество() = 0 Тогда
			ВыполнитьОбработкуОповещения(ОповещениеКомандаЗаполнитьЗвершение, КодВозвратаДиалога.Да);
		Иначе				
			ПоказатьВопрос(ОповещениеОчисткаТЧ, ТекстВопросаОчисткаТЧ, РежимДиалогаВопрос.ДаНет);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура окончание вопроса об отмене проведения.
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте
Процедура ВопросОбОтменеПроведенияЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		Записать(ПараметрыЗаписи);
		Если Объект.ТрансляционныеРазницы.Количество() = 0 Тогда
		   	ВыполнитьОбработкуОповещения(ДополнительныеДанные.ОповещениеКомандаЗаполнитьЗвершение, КодВозвратаДиалога.Да);
		Иначе	
			ПоказатьВопрос(ДополнительныеДанные.ОповещениеОчисткаТЧ, ДополнительныеДанные.ТекстВопросаОчисткаТЧ,РежимДиалогаВопрос.ДаНет);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ВопросОбОтменеПроведенияЗавершение()
 
// Процедура окончание вопроса очистки табличной части. 
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВопросОчисткиТрансляционныеРазницыЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеДанные.ОповещениеКомандаЗаполнитьЗвершение, КодВозвратаДиалога.Да);
	КонецЕсли; 
                
КонецПроцедуры // ВопросОчищенияТабЧасти()

// Процедура окончание коамнды "КомандаЗаполнить".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте
Процедура КомандаЗаполнитьЗвершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТрансляционныеРазницы();
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры // КомандаЗаполнитьЗвершение()
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуМСФО()

    // Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	СтрКурсаМСФО = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаМСФО,Объект.Дата);
	
	мКэшЗначений.Вставить("СтрКурсаМСФО", СтрКурсаМСФО);	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	мКэшЗначений = Новый Структура;
	
	мКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	ЗаполнитьВалютуМСФО();
	
	// Получим валюту управленческого учета.
	ВалютаУпр = Константы.бит_ВалютаУправленческогоУчета.Получить();
	
	СтрКурсаУпр = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаУпр,Объект.Дата);
	
	мКэшЗначений.Вставить("СтрКурсаУпр", СтрКурсаУпр);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ИзменениеСчетДоходовРасходов(ЭтоДоход)

	Счет = ?(ЭтоДоход, Объект.СчетДоходов, Объект.СчетРасходов);
	Строка = ?(ЭтоДоход,"Доходов", "Расходов");
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Счет, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "Субконто"+Строка);
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "Субконто"+Строка);

КонецПроцедуры // СчетДоходовРаходов()

&НаСервере         
Процедура ИзменениеСчетаТрансляционныеРазницы(Идентификатор)
	                       
	ТекущаяСтрока = Объект.ТрансляционныеРазницы.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.Счет, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "Субконто");
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.Счет);

	ТекущаяСтрока.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;
	
КонецПроцедуры // ИзменениеСчетаТрансляционныеРазницы()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто, Суффикс)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"Субконто"+Суффикс
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	// Установим параметры выбора субконто.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
	
КонецПроцедуры // НачалоВыбораСубконто()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер, ЗначениеСубконто, Суффикс)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "Субконто"+Суффикс, фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "Субконто"+Суффикс, ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "Субконто"+Суффикс, "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконто()

// Процедура заполняет табличную часть трансляционные разницы остатками 
// по счетам плана счетов МСФО. 
//
&НаСервере
Процедура ЗаполнитьТрансляционныеРазницы()

	Объект.ТрансляционныеРазницы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаИсключения.Счет КАК Счет,
	|	СчетаИсключения.Организация КАК Организация
	|ПОМЕСТИТЬ СчетаИсключения
	|ИЗ
	|	РегистрСведений.бит_му_СчетаИсключенияПересчетаВВалютуПредставления КАК СчетаИсключения
	|ГДЕ
	|	(СчетаИсключения.Организация = &Организация
	|			ИЛИ СчетаИсключения.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_Дополнительный_2.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ АктивныеСчета
	|ИЗ
	|	ПланСчетов.бит_Дополнительный_2 КАК бит_Дополнительный_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаИсключения КАК СчетаИсключения
	|		ПО (СчетаИсключения.Счет = бит_Дополнительный_2.Ссылка)
	|ГДЕ
	|	(бит_Дополнительный_2.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ИЛИ бит_Дополнительный_2.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный))
	|	И СчетаИсключения.Счет ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_Дополнительный_2.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПассивныеСчета
	|ИЗ
	|	ПланСчетов.бит_Дополнительный_2 КАК бит_Дополнительный_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаИсключения КАК СчетаИсключения
	|		ПО (СчетаИсключения.Счет = бит_Дополнительный_2.Ссылка)
	|ГДЕ
	|	(бит_Дополнительный_2.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ИЛИ бит_Дополнительный_2.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный))
	|	И СчетаИсключения.Счет ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РБМеждународный.Счет КАК Счет,
	|	РБМеждународный.Субконто1 КАК Субконто1,
	|	РБМеждународный.Субконто2 КАК Субконто2,
	|	РБМеждународный.Субконто3 КАК Субконто3,
	|	РБМеждународный.Субконто4 КАК Субконто4,
	|	ЕСТЬNULL(РБМеждународный.СуммаУпрОстатокДт, 0) КАК СуммаУпр,
	|	ЕСТЬNULL(РБМеждународный.СуммаМУОстатокДт, 0) КАК СуммаМСФО,
	|	РБМеждународный.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ДтКт.Дт) КАК ВидОстатка
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|			&МоментВремени,
	|			Счет В
	|				(ВЫБРАТЬ
	|					АктивныеСчета.Ссылка КАК Ссылка
	|				ИЗ
	|					АктивныеСчета КАК АктивныеСчета),
	|			,
	|			Организация = &Организация) КАК РБМеждународный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РБМеждународный.Счет,
	|	РБМеждународный.Субконто1,
	|	РБМеждународный.Субконто2,
	|	РБМеждународный.Субконто3,
	|	РБМеждународный.Субконто4,
	|	ЕСТЬNULL(РБМеждународный.СуммаУпрОстатокКт, 0),
	|	ЕСТЬNULL(РБМеждународный.СуммаМУОстатокКт, 0),
	|	РБМеждународный.Организация,
	|	ЗНАЧЕНИЕ(Перечисление.бит_ДтКт.Кт)
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|			&МоментВремени,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ПассивныеСчета.Ссылка КАК Ссылка
	|				ИЗ
	|					ПассивныеСчета КАК ПассивныеСчета),
	|			,
	|			Организация = &Организация) КАК РБМеждународный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет";

	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		Если (Выборка.СуммаУпр <> 0
			ИЛИ Выборка.СуммаМСФО <> 0) Тогда

			НоваяСтрока = Объект.ТрансляционныеРазницы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ИзменениеСчетаТрансляционныеРазницы(НоваяСтрока.ПолучитьИдентификатор());
			ВычислитьРазницуСумм(НоваяСтрока, мКэшЗначений);
			
		КонецЕсли; 
	КонецЦикла;
	 
КонецПроцедуры // ЗаполнитьТрансляционныеРазницы()

// Процедура пересчитывает разницу в строке ТЧ "ТрансляционныеРазницы". 
//
// Параметры:
//  Строка - Структура
//  КэшЗначений - Структура.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВычислитьРазницуСумм(Строка, КэшЗначений)

	Строка.СуммаУпрРасчет = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
							Строка.СуммаМСФО,
							КэшЗначений.СтрКурсаМСФО.Валюта		, КэшЗначений.СтрКурсаУпр.Валюта,
							КэшЗначений.СтрКурсаМСФО.Курс		, КэшЗначений.СтрКурсаУпр.Курс,
							КэшЗначений.СтрКурсаМСФО.Кратность	, КэшЗначений.СтрКурсаУпр.Кратность);
	
	Строка.Разница = Строка.СуммаУпрРасчет - Строка.СуммаУпр;	

КонецПроцедуры // ВычислитьРазницуСумм()

// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Восстанавливает количество доступных субконто для счета в строках ТЧ.
// 
&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для каждого СтрокаТаблицы Из Объект.ТрансляционныеРазницы Цикл
		СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
		СтрокаТаблицы.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#КонецОбласти
