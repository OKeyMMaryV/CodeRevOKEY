
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте 
Перем мВыбранныйСчет; // Хранит выбранный счет. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_вго_АктСверкиВГО";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация,,Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Проверка на наличие "битых" ссылок в следствие работы RLS.
	МассивТипов = бит_рлс_Основной.ПодготовитьМассивТиповДляПроверкиДляПорталаВГО(Объект);
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	бит_рлс_Основной.ПроверитьБитыеСсылкиВОбъекте(ДокументОбъект, МассивТипов, Отказ);  	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие нового 
   	Если Параметры.Ключ.Пустая() Тогда
		
		УстановитьСостояниеДокумента();
		ЗаполнитьКэшЗначений(); 
		
		// Установка периода сверки 
		бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.ДатаНачала, 
															Объект.ДатаОкончания, 
															ПериодичностьСверкиВГО, 
															Объект.ПредставлениеПериодаСверкиВГО);
	
		
		// При копировании
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) 
			ИЛИ ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда  		
			ОбновитьФормуПоДаннымОбъекта();
			ЗаполнитьДеревоСверкиВГО(Параметры.ЗначениеКопирования);
			фКопирование = Истина;                                              		
		КонецЕсли;
	КонецЕсли;
	
	// Порядок раздела "конечное сальдо"
	фПорядокКонечногоСальдо = 3; 
					   	
	// Установить видимость реквизитов и заголовков колонок.	
	УстановитьВидимостьДоступность();
	// Дата запрета редактирования	
	ЗапрещеноРедактировать = Ложь;
	Если Не Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПараметрыСверки = Новый Структура("Организация1, Контрагент2", Объект.Организация, Объект.Контрагент);	
		бит_вго_Сервер.ПроверитьВозможностьРедактированияДокументовСверкиВГО(Объект.ДатаНачала, ПараметрыСверки, ЗапрещеноРедактировать);
		
		Если Объект.Проведен Тогда
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ДокументОбъект.ПроверитьЗавершениеСверкиВГО(ЗапрещеноРедактировать);		
		КонецЕсли;
		
		ТолькоПросмотр          												= ЗапрещеноРедактировать;
		Элементы.ГруппаКнопокРегулируемойДоступности.Доступность                = Не ЗапрещеноРедактировать;
		Элементы.КомандаОбновитьДанныеПоНастройкамАктовСверкиВГО.Доступность 	= Не ЗапрещеноРедактировать;
	
	КонецЕсли;
	
	// Управление отображением счетов и субконто.
	фКоличествоСубконто = 4;
	ОформитьСчета();
	ОформитьРеквизиты();
			
	// Создадим подменю для управления уровнями дерева.
	фУровеньПросмотраДерева = 3;
	СоздатьДействияУровней();
	
	// Изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // Изменение кода. Конец. 03.04.2014}}

КонецПроцедуры
   
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	Если фКопирование Тогда	
		Модифицированность = Истина;	
	КонецЕсли;                               		
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Дата");
	мКэшРеквизитовФормы.Вставить("НастройкаАктаСверки");
	мКэшРеквизитовФормы.Вставить("РегистрБухгалтерии");
	мКэшРеквизитовФормы.Вставить("Организация");
	мКэшРеквизитовФормы.Вставить("Контрагент");
	мКэшРеквизитовФормы.Вставить("Сценарий");
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокументаНаНачало");
	мКэшРеквизитовФормы.Вставить("КратностьДокументаНаНачало");
	мКэшРеквизитовФормы.Вставить("КурсДокументаНаКонец");
	мКэшРеквизитовФормы.Вставить("КратностьДокументаНаКонец");
	мКэшРеквизитовФормы.Вставить("КурсДокументаСредний");
	мКэшРеквизитовФормы.Вставить("КратностьДокументаСредняя");
												  		
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	                
	Элементы["ДеревоСверкиВГОУровень_" + фУровеньПросмотраДерева].Пометка = Истина;
	Элементы.ФормаСкрытьПоказатьТаблоОстатков.Пометка = Не фСкрыватьТаблоОстатков;
	бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСверкиВГО, ДеревоСверкиВГО, фУровеньПросмотраДерева);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриОткрытии()
 
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьСостояниеДокумента();
	ЗаполнитьКэшЗначений();
	
	ОбновитьФормуПоДаннымОбъекта();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	ПараметрыОповещения = Новый Структура("Организация, Контрагент, Ссылка"
										, Объект.Организация, Объект.Контрагент, Объект.Ссылка);
	Оповестить("ИзмененДокументСверкиВГО", ПараметрыОповещения);
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ПослеЗаписи()
             
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если фУровеньПросмотраДерева = 0 Тогда
		фУровеньПросмотраДерева = 3;	
	КонецЕсли;		
		
	ИзменитьОтображениеГруппировкиСубконто();
	
	Элементы.ГруппаТаблицаОстатков.Видимость = Не фСкрыватьТаблоОстатков;
		
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "НастройкаАктаСверки".
// 
&НаКлиенте
Процедура НастройкаАктаСверкиПриИзменении(Элемент)
	
	Если Объект.НастройкаАктаСверки <> мКэшРеквизитовФормы.НастройкаАктаСверки Тогда
		
		Если Объект.Проводки.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("НастройкаАктаСверкиПриИзмененииЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Дерево сверки ВГО будет очищено. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		Иначе
			
			ИзменениеНастройкиСервер();
			ДобавитьВКэш("НастройкаАктаСверки");
			ДобавитьВКэш("РегистрБухгалтерии");
			
			ЗаполнитьВалютуДокумента();
			
		КонецЕсли;     		
				  
	Иначе
		
		 ЗаполнитьВалютуДокумента();
		
	КонецЕсли;
	
КонецПроцедуры // НастройкаАктаСверкиПриИзменении()

&НаКлиенте
// Процедура выполняет действия при завершении изменения реквизита НастройкаАктаСверки.
// 
Процедура НастройкаАктаСверкиПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	НужноОчистить = Ответ = КодВозвратаДиалога.Да;
	
	Если НужноОчистить Тогда
		ИзменениеНастройкиСервер();
		ДобавитьВКэш("НастройкаАктаСверки");
		ДобавитьВКэш("РегистрБухгалтерии");
	Иначе
		ИзвлечьИзКэша("НастройкаАктаСверки");	
	КонецЕсли;

	ЗаполнитьВалютуДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СтараяДата = мКэшРеквизитовФормы.Дата;
		
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаНачала".
// 
&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ИзменениеДатыНачалаСервер();
	
КонецПроцедуры // ДатаНачалаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаОкончания".
// 
&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьДляДереваСверки();
	
КонецПроцедуры // ДатаОкончанияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтараяОрганизация = мКэшРеквизитовФормы.Организация;
	ТекОрганизация    = Объект.Организация;
	СтараяВалютаМСФО  = фКэшЗначений.ВалютаМСФО;
	ТекВалютаМСФО     = ПолучитьВалютуМСФО();
	
	ПересчитыватьСуммыМСФО 	= Ложь;
	
	Если ЗначениеЗаполнено(ТекОрганизация) И ТекОрганизация <> СтараяОрганизация Тогда
		
		Если Объект.Проводки.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Изменилась организация'");
			 			
			Если ИмяРегистраБухгалтерии = "бит_Дополнительный_2" 
				И ТекВалютаМСФО <> СтараяВалютаМСФО Тогда
			
				ТекстВопроса = ТекстВопроса + " " + НСтр("ru = 'и валюта МСФО'");
				ПересчитыватьСуммыМСФО = Истина;
				
			КонецЕсли;
			
			// Структура дополнительных параметров для обработки оповещения.
			СтруктураДопПараметров = Новый Структура;
			СтруктураДопПараметров.Вставить("ПересчитыватьСуммыМСФО", ПересчитыватьСуммыМСФО);
			СтруктураДопПараметров.Вставить("СтараяВалютаМСФО", СтараяВалютаМСФО);
			СтруктураДопПараметров.Вставить("ТекВалютаМСФО", ТекВалютаМСФО);
			
			Оповещение = Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект, СтруктураДопПараметров);
			ТекстВопроса = ТекстВопроса + НСтр("ru = '. Будут изменены данные табличной части. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		 			
		Иначе
			
			ИзменениеОрганизацииСервер(ПересчитыватьСуммыМСФО, СтараяВалютаМСФО, ТекВалютаМСФО);
			ДобавитьВКэш("Организация");
			
			ЗаполнитьВалютуДокумента();
			
		КонецЕсли;
					  
	Иначе
		
		ЗаполнитьВалютуДокумента();
		
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура выполняет действия при завершении изменения организации.
// 
Процедура ОрганизацияПриИзмененииЗавершение(Ответ, СтруктураДопПараметров) Экспорт
	
	ИзменитьОрганизацию = Истина;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ИзменитьОрганизацию = Ложь;			  
	КонецЕсли;
	
	Если ИзменитьОрганизацию Тогда
		ИзменениеОрганизацииСервер(СтруктураДопПараметров.ПересчитыватьСуммыМСФО, СтруктураДопПараметров.СтараяВалютаМСФО, СтруктураДопПараметров.ТекВалютаМСФО);
		ДобавитьВКэш("Организация");
	Иначе	
		ИзвлечьИзКэша("Организация");
	КонецЕсли;
	
	ЗаполнитьВалютуДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры // ВалютаДокументаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтарыйКонтрагент  = мКэшРеквизитовФормы.Контрагент;
	ТекКонтрагент     = Объект.Контрагент;
		
	Если ЗначениеЗаполнено(ТекКонтрагент) И ТекКонтрагент <> СтарыйКонтрагент Тогда
		
		Если Объект.Проводки.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Изменен контрагент. Будут изменены данные табличной части. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			 			
		Иначе
			
			ИзменениеКонтрагентаСервер();
			ДобавитьВКэш("Контрагент");

		КонецЕсли;
					  
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
// Процедура выполняет действия при завершении изменения контрагента.
// 
Процедура КонтрагентПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИзменитьКонтрагента = Истина;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ИзменитьКонтрагента = Ложь;			  
	КонецЕсли;
	
	Если ИзменитьКонтрагента Тогда
		ИзменениеКонтрагентаСервер();
		ДобавитьВКэш("Контрагент");
	Иначе	
		ИзвлечьИзКэша("Контрагент");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сценарий".
// 
&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	СценарийЗаполнен = ЗначениеЗаполнено(Объект.Сценарий);
	Элементы.ГруппаДеревоСверкиВГО.ТолькоПросмотр = Не СценарийЗаполнен;
	
	Если СценарийЗаполнен Тогда
		
		фКэшЗначений.Вставить("ВалютаСценария", ПолучитьВалютуСценария());
		
	КонецЕсли;
		
	ДобавитьВКэш("Сценарий");
	
	ЗаполнитьВалютуДокумента();
	 	
КонецПроцедуры // СценарийПриИзменении() 

#Область ПроцедурыИФункцииВыбораИнтервала
               
&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТемпПредставлениеПериода = Объект.ПредставлениеПериодаСверкиВГО;
		
	бит_РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериода(Элемент, 
												ЭтотОбъект, 
												СтандартнаяОбработка, 
												Объект.ДатаНачала, 
												ПериодичностьСверкиВГО, 
												Объект.ПредставлениеПериодаСверкиВГО);
	
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.ДатаНачала, 
														Объект.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Объект.ПредставлениеПериодаСверкиВГО);

	Если ТемпПредставлениеПериода <> Объект.ПредставлениеПериодаСверкиВГО Тогда
		Модифицированность = Истина;	
	КонецЕсли;                      	
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГОНачалоВыбора()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГОРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ПредставлениеПериодаСверкиВГО) Тогда
		
		Объект.ДатаНачала = бит_Бюджетирование.ПолучитьПериодПоСдвигу(Объект.ДатаНачала, Направление, ПериодичностьСверкиВГО);
		бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.ДатаНачала, 
															Объект.ДатаОкончания, 
															ПериодичностьСверкиВГО, 
															Объект.ПредставлениеПериодаСверкиВГО);
		
		Модифицированность = Истина;	
				
	КонецЕсли;	
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГОРегулирование()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГООчистка()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСверкиВГО
               
&НаКлиенте
Процедура ДеревоСверкиВГОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	        	
	Отказ = Истина;
	ИдНовой = Неопределено;
	
	Если Не Копирование И ТекущиеДанные.ЭтоГруппа 
		И ТекущиеДанные.Раздел <> фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов Тогда
		
		Если ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ВходящееСальдо 
			ИЛИ ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо Тогда
		 	ТекВыбранныйСчет = Неопределено;
			
			// Строка раздела
			// Добавление строки кор. счета
			Если ПроверитьВозможностьДобавления(ТекущиеДанные.СчетРасчетов, ТекущиеДанные.Раздел) Тогда
				ИдНовой = ДобавитьСтрокуКорСчета(Копирование, ТекущиеДанные.ПолучитьИдентификатор(), ТекВыбранныйСчет);
			КонецЕсли;
			
			Если ИдНовой <> Неопределено Тогда
				
				Элементы.ДеревоСверкиВГО.ТекущаяСтрока = ИдНовой;
				Модифицированность = Истина;	
				
			КонецЕсли;

		Иначе
			// Выбор счета
			МассивДоступныхСчетов = ?(ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов
									, фКэшЗначений.МассивСчетовОборотов
									, фКэшЗначений.МассивСчетовОплаты);
									
			СтруктураДопПараметров = Новый Структура;
			СтруктураДопПараметров.Вставить("ТекущиеДанные", ТекущиеДанные);
			СтруктураДопПараметров.Вставить("Копирование", Копирование);
									
			ВыбратьСчетНемодально(Новый ОписаниеОповещения("ДеревоСверкиВГОПередНачаломДобавленияЗавершение", ЭтотОбъект, СтруктураДопПараметров), МассивДоступныхСчетов);						
	
		КонецЕсли;
		

	ИначеЕсли Копирование И Не ТекущиеДанные.ЭтоГруппа Тогда 
		
		// Строка кор. счета
		// Копирование строки кор. счета
		Если ПроверитьВозможностьДобавления(ТекущиеДанные.СчетРасчетов, ТекущиеДанные.Раздел) Тогда
			ИдНовой = ДобавитьСтрокуКорСчета(Копирование, ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если ИдНовой <> Неопределено Тогда
			
			Элементы.ДеревоСверкиВГО.ТекущаяСтрока = ИдНовой;
			Модифицированность = Истина;	
			
		КонецЕсли;

	Иначе
		
		Если ИдНовой <> Неопределено Тогда
			
			Элементы.ДеревоСверкиВГО.ТекущаяСтрока = ИдНовой;
			Модифицированность = Истина;	
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоСверкиВГОПередНачаломДобавления()

&НаКлиенте
Процедура ДеревоСверкиВГОПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьЗначенияСвойств(фКэшЗначений.КэшРеквизитовСтроки, Элемент.ТекущиеДанные); 	
	
КонецПроцедуры // ДеревоСверкиВГОПриНачалеРедактирования()

&НаКлиенте
Процедура ДеревоСверкиВГОПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка, есть ли изменения
	ЕстьИзменения = Ложь;
	КэшРеквизитовСтроки = фКэшЗначений.КэшРеквизитовСтроки;
	Для каждого КлЗнч Из КэшРеквизитовСтроки Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ТекущиеДанные[ИмяРеквизита] <> КэшРеквизитовСтроки[ИмяРеквизита] Тогда
			ЕстьИзменения = Истина;
			Прервать;		
		КонецЕсли;	
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		
		ТекстСообщения = "";
		
		ТекИдентификатор 	 = ТекущиеДанные.ПолучитьИдентификатор();
		ИдГруппыСчетРасчетов = ?(ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов
								, ТекИдентификатор
								, ТекущиеДанные.ИдГруппыСчетРасчетов);
		ОкончаниеРедактированияСтрокиДереваСервер(ТекИдентификатор, ИдГруппыСчетРасчетов, ТекстСообщения);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		 	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ДеревоСверкиВГОПриОкончанииРедактирования()

&НаКлиенте
Процедура ДеревоСверкиВГОПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов Тогда
		
		// Строка счета расчетов
		УдалитьСтрокиТабличнойЧастиПоСчетуРасчетов(ТекущиеДанные.ПолучитьИдентификатор());
				
	ИначеЕсли ТекущиеДанные.ЭтоГруппа Тогда
		
		// Строка раздела
		Отказ = Истина;
		
	Иначе
		
		// Строка кор. счета
		Если ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо Тогда
			Отказ = Истина;
		Иначе
			УдалитьСтрокуТабличнойЧасти(ТекущиеДанные.УникальныйИдСтрокиТч, ТекущиеДанные.ИдГруппыСчетРасчетов, ТекущиеДанные.ИдГруппыРаздела);
		КонецЕсли;		
				
	КонецЕсли;
	
	Если Не Отказ Тогда	
		Модифицированность = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ДеревоСверкиВГОПередУдалением()

&НаКлиенте
Процедура ДеревоСверкиВГОСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = ПолучитьИмяРеквизита(Элемент.Имя);
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	Если ТекущиеДанные[ИмяРеквизита] = Неопределено Тогда
		ТекущиеДанные[ИмяРеквизита] = Элемент.ДоступныеТипы.ПривестиЗначение(ТекущиеДанные[ИмяРеквизита]);
	КонецЕсли;
	
	Если ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов Тогда
		МассивДоступныхСчетов = фКэшЗначений.МассивСчетовРасчетов;
	ИначеЕсли ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов Тогда
		МассивДоступныхСчетов = фКэшЗначений.МассивСчетовОборотов;
	Иначе	
	    МассивДоступныхСчетов = фКэшЗначений.МассивСчетовОплаты;
	КонецЕсли;
	
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("ТекущиеДанные", ТекущиеДанные);
	СтруктураДопПараметров.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	ВыбратьСчетНемодально(Новый ОписаниеОповещения("ДеревоСверкиВГОСчетНачалоВыбораЗавершение", ЭтотОбъект, СтруктураДопПараметров), МассивДоступныхСчетов);
	
КонецПроцедуры // ДеревоСверкиВГОСчетНачалоВыбора()

&НаКлиенте
Процедура ДеревоСверкиВГОСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
		
	// Проверка кор. счета
	Если  ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов
		ИЛИ ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ДанныеОбОплате Тогда 		
		
		ВыбранныйКорСчет = ТекущиеДанные.Группа;
		
		Если ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов Тогда
			МассивДоступныхСчетов = фКэшЗначений.МассивСчетовОборотов;
			ТекстПоСчету = НСтр("ru = 'счет оборотов.'");
		Иначе	
		    МассивДоступныхСчетов = фКэшЗначений.МассивСчетовОплаты;
			ТекстПоСчету = НСтр("ru = 'счет оплаты.'");
		КонецЕсли;
		Если МассивДоступныхСчетов.Найти(ВыбранныйКорСчет) = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не записан кор счет. Выбранное значение %1 не указано в настройке как'") + " " + ТекстПоСчету;
			ТекстСообщения = СтрШаблон(ТекстСообщения, ВыбранныйКорСчет);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.Группа = Элемент.ДоступныеТипы.ПривестиЗначение(Неопределено); 
		Иначе
			ИзменениеСчетаСервер(ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
		
	Иначе
		
		ИзменениеСчетаСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
 				
КонецПроцедуры // ДеревоСверкиВГОСчетПриИзменении()

&НаКлиенте
Процедура ДеревоСверкиВГОСчетОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДеревоСверкиВГОСчетОчистка()

&НаКлиенте
Процедура ДеревоСверкиВГООперацияВГОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	ИсключаемыйТипОперации = ?(ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов
							, фКэшЗначений.Перечисления.бит_вго_ТипыОперацийВГО.ПогашениеЗадолженности
							, фКэшЗначений.Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности);
	
							
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ОперацияВГО);	
	ПараметрыФормы.Вставить("ИсключаемыйТипОперации", ИсключаемыйТипОперации);
	ОткрытьФорму("Справочник.бит_вго_ОперацииВГО.ФормаВыбора", ПараметрыФормы, Элемент);	
		
КонецПроцедуры // ДеревоСверкиВГООперацияВГОНачалоВыбора()

&НаКлиенте
Процедура ДеревоСверкиВГООперацияВГОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;	
	ТекущиеДанные.РучноеИзменениеОперацииВГО = ЗначениеЗаполнено(ТекущиеДанные.ОперацияВГО);
		
КонецПроцедуры // ДеревоСверкиВГООперацияВГОПриИзменении()

&НаКлиенте
Процедура ДеревоСверкиВГОВалютаВзаиморасчетыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	
	// Выполним расчет сумм в текущей строке
	ИмяРесурса = ?(ТекущиеДанные.СуммаКт > 0, "СуммаКт", "СуммаДт");
	ВыполнитьРасчетСуммВзаиморасчетовТекущейСтрокиСервер(ТекущиеДанные.ПолучитьИдентификатор(), ИмяРесурса, Истина);
	
КонецПроцедуры // ДеревоСверкиВГОВалютаВзаиморасчетыПриИзменении()
               
&НаКлиенте
Процедура ДеревоСверкиВГОСуммаПриИзменении(Элемент)
	
	ОтключитьОбработчикОжидания("ИзменениеСуммыКлиент");
	ПодключитьОбработчикОжидания("ИзменениеСуммыКлиент", 0.1, Истина);
			
КонецПроцедуры // ДеревоСверкиВГОСуммаПриИзменении()

&НаКлиенте
Процедура ДеревоСверкиВГОСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	
	ОбщееИмяСубконто = ?(Найти(Элемент.Имя, "Расчетов"), "СубконтоРасчетов_", "СубконтоКор_");	
		
	ЗначениеСубконто  = ТекущиеДанные[ПолучитьИмяРеквизита(Элемент.Имя)];	
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущиеДанные, ЗначениеСубконто, ОбщееИмяСубконто);
	
КонецПроцедуры // ДеревоСверкиВГОСубконтоНачалоВыбора()

&НаКлиенте
Процедура ДеревоСверкиВГОСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	
	ОбщееИмяСубконто = ?(Найти(Элемент.Имя, "Расчетов"), "СубконтоРасчетов_", "СубконтоКор_");
		
	ЗначениеСубконто  = ТекущиеДанные[ПолучитьИмяРеквизита(Элемент.Имя)];
	ИзменениеСубконто(ТекущиеДанные.ПолучитьИдентификатор(), ЗначениеСубконто, ОбщееИмяСубконто);
	
КонецПроцедуры // ДеревоСверкиВГОСубконтоПриИзменении()

&НаКлиенте
Процедура ДеревоСверкиВГОПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	ИмяРеквизита  = ПолучитьИмяРеквизита(Элемент.Имя);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Владелец", Объект.Организация);
	
	НачалоВыбораРеквизитаЗаписи(Элемент, СтандартнаяОбработка, СтруктураПараметров, ТекущиеДанные[ИмяРеквизита]);
		
КонецПроцедуры // ДеревоСверкиВГОПодразделениеНачалоВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ДеревоДобавитьГруппуПоСчетуРасчетов(Команда)
	
	// Выбор счета
	ВыбратьСчетНемодально(Новый ОписаниеОповещения("ДеревоДобавитьГруппуПоСчетуРасчетовЗавершение", ЭтотОбъект), фКэшЗначений.МассивСчетовРасчетов);
	
КонецПроцедуры // ДеревоДобавитьГруппуПоСчетуРасчетов()

&НаКлиенте
Процедура ВыбратьСчетНемодально(Знач Оповещение, МассивСчетов)
	
	мВыбранныйСчет = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", МассивСчетов));
	
	Обработчик = Новый ОписаниеОповещения("ВыбратьСчетЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ПланСчетов." + ИмяПланаСчетов + ".ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Обработчик, Режим);   	
	
КонецПроцедуры // ВыбратьСчет()

// Процедура - Выбрать счет завершение.
//
// Параметры:
//  ВыбранныйСчет	 - счет	 - счет.
//  Параметры		 - структура - параметры.
//
&НаКлиенте
Процедура ВыбратьСчетЗавершение(ВыбранныйСчет, Параметры) Экспорт
	
	мВыбранныйСчет = ВыбранныйСчет;	
	
	ВыполнитьОбработкуОповещения(Параметры.Оповещение);
	
КонецПроцедуры

// Процедура - Дерево добавить группу по счету расчетов завершение.
//
// Параметры:
//  Результат				 - Результат - Результат выбора.
//  ДополнительныеПараметры	 - Структура - доп. параметры.
//
&НаКлиенте
Процедура ДеревоДобавитьГруппуПоСчетуРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(мВыбранныйСчет) Тогда
		Возврат;
	КонецЕсли;
	
	ТекВыбранныйСчет = мВыбранныйСчет;
	
	Для каждого СтрокаДереваБлок Из ДеревоСверкиВГО.ПолучитьЭлементы() Цикл
		Если ТекВыбранныйСчет = СтрокаДереваБлок.СчетРасчетов Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно добавить группу по счету расчетов %1. Такая группа уже существует.'"),
										ТекВыбранныйСчет);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	ИдГруппыСчетРасчетов = ДеревоДобавитьГруппуПоСчетуРасчетовСервер(ТекВыбранныйСчет);
		
	// Установка текущей строки                             	
	Элементы.ДеревоСверкиВГО.ТекущаяСтрока = ИдГруппыСчетРасчетов;
	Элементы.ДеревоСверкиВГО.Развернуть(ИдГруппыСчетРасчетов);
	
КонецПроцедуры

// Процедура - Дерево сверки ВГОСчет начало выбора завершение.
//
// Параметры:
//  Результат				 - Результат - Результат выбора.
//  ДополнительныеПараметры	 - Структура - доп. параметры.
//
&НаКлиенте
Процедура ДеревоСверкиВГОСчетНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбранныйСчет = мВыбранныйСчет;
	
	Если ЗначениеЗаполнено(ВыбранныйСчет) Тогда
		ДополнительныеПараметры.ТекущиеДанные[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныйСчет;	 
	КонецЕсли;                                     	 
	
	ИзменениеСчетаСервер(ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор());

	
КонецПроцедуры

// Процедура - Дерево сверки ВГОПеред началом добавления завершение.
//
// Параметры:
//  Результат				 - Результат - Результат выбора.
//  ДополнительныеПараметры	 - Структура - доп. параметры.
//
&НаКлиенте
Процедура ДеревоСверкиВГОПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекВыбранныйСчет = мВыбранныйСчет;
	
	Если Не ЗначениеЗаполнено(ТекВыбранныйСчет) Тогда
		Возврат;
	КонецЕсли;
	
	// Строка раздела
	// Добавление строки кор. счета
	Если ПроверитьВозможностьДобавления(ДополнительныеПараметры.ТекущиеДанные.СчетРасчетов, ДополнительныеПараметры.ТекущиеДанные.Раздел) Тогда
		ИдНовой = ДобавитьСтрокуКорСчета(ДополнительныеПараметры.Копирование, ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор(), ТекВыбранныйСчет);
	КонецЕсли;
	
	Если ИдНовой <> Неопределено Тогда
		
		Элементы.ДеревоСверкиВГО.ТекущаяСтрока = ИдНовой;
		Модифицированность = Истина;	
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗаполнитьВсе(Команда)

	ЗаполнитьДеревоПоНастройкеКлиент("Все");
		
КонецПроцедуры // ДеревоЗаполнитьВсе()

&НаКлиенте
Процедура ДеревоЗаполнитьШаблонСчетов(Команда)
	
	ЗаполнитьДеревоПоНастройкеКлиент("ШаблонГрупп");
		
КонецПроцедуры // ДеревоЗаполнитьШаблонСчетов()

&НаКлиенте
Процедура ДеревоЗаполнитьОстатки(Команда)
	
	ЗаполнитьДеревоПоНастройкеКлиент("Остатки");
		
КонецПроцедуры // ДеревоЗаполнитьОстатки()

&НаКлиенте
Процедура ДеревоЗаполнитьОбороты(Команда)
	
	ЗаполнитьДеревоПоНастройкеКлиент("Обороты");
		
КонецПроцедуры // ДеревоЗаполнитьОбороты()

&НаКлиенте
Процедура ДеревоЗаполнитьВсеПоСчету(Команда)
	
	ЗаполнитьДеревоПоНастройкеКлиент("Все", Истина);
			
КонецПроцедуры // ДеревоЗаполнитьВсеПоСчету()

&НаКлиенте
Процедура ДеревоЗаполнитьОстаткиПоСчету(Команда)
	
	ЗаполнитьДеревоПоНастройкеКлиент("Остатки", Истина);
		
КонецПроцедуры // ДеревоЗаполнитьОстаткиПоСчету()
                    
&НаКлиенте
Процедура ДеревоЗаполнитьОборотыПоСчету(Команда)
	
	ЗаполнитьДеревоПоНастройкеКлиент("Обороты", Истина);
		
КонецПроцедуры // ДеревоЗаполнитьОборотыПоСчету()
             
&НаКлиенте
Процедура ДеревоОчиститьВсе(Команда)
	
	ОчиститьДеревоИТабличнуюЧасть();
	
КонецПроцедуры // ДеревоОчиститьВсе()

&НаКлиенте
Процедура ДеревоПереключитьГруппировкуСубконто(Команда)
	
	фГруппироватьСубконтоВертикально = Не фГруппироватьСубконтоВертикально;
	ИзменитьОтображениеГруппировкиСубконто();
	
	ВосстановитьНастройкиОформленияПоСчету();
	
КонецПроцедуры // ДеревоПереключитьГруппировкуСубконто()

&НаКлиенте
Процедура КомандаОбновитьДанныеПоНастройкамАктовСверкиВГО(Команда)
	
	НужноОчистить = Истина;
	
	Если Объект.Проводки.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьДанныеПоНастройкамАктовСверкиВГОЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Дерево сверки ВГО будет очищено. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	Иначе
		
		ИзменениеНастройкиСервер();
		ДобавитьВКэш("НастройкаАктаСверки");
		ДобавитьВКэш("РегистрБухгалтерии");
		
	КонецЕсли;     		
		
КонецПроцедуры // КомандаОбновитьДанныеПоНастройкамАктовСверкиВГО()

&НаКлиенте
// Процедура выполняет действия при завершении команды ОбновитьДанныеПоНастройкамАктовСверкиВГО.
// 
Процедура КомандаОбновитьДанныеПоНастройкамАктовСверкиВГОЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	НужноОчистить = Ответ = КодВозвратаДиалога.Да;
	
	Если НужноОчистить Тогда
		ИзменениеНастройкиСервер();
		ДобавитьВКэш("НастройкаАктаСверки");
		ДобавитьВКэш("РегистрБухгалтерии");
	Иначе
		ИзвлечьИзКэша("НастройкаАктаСверки");	
	КонецЕсли;

	
КонецПроцедуры

// Процедура - обработчик команды "СкрытьПоказатьТаблоОстатков".
// 
&НаКлиенте
Процедура СкрытьПоказатьТаблоОстатков(Команда)
	                                    	
	фСкрыватьТаблоОстатков = Не фСкрыватьТаблоОстатков;
	
	Элементы.ГруппаТаблицаОстатков.Видимость 		  = Не фСкрыватьТаблоОстатков;
	Элементы.ФормаСкрытьПоказатьТаблоОстатков.Пометка = Не фСкрыватьТаблоОстатков;	
	
КонецПроцедуры // СкрытьПоказатьТаблоОстатков()

// Процедура - действие динамически создаваемых команд "ДеревоСверкиВГОУровень_<й>". 
// Выполняется свертка/разворачивание дерева счетов. 
// 
&НаКлиенте
Процедура ДействиеДеревоСверкиВГОУровень(Команда)
	
	КнопкиУровней = Элементы.ДеревоСверкиВГОГруппаУровни.ПодчиненныеЭлементы;
	
	НомПодчерк = Найти(Команда.Имя, "_");
	Если НомПодчерк > 0 Тогда
	
		 НомУровняСтр = Сред(Команда.Имя, НомПодчерк + 1);
		 Попытка 			 
			 НомУровня = Число(НомУровняСтр);  		 
		 Исключение  			 
			 НомУровня = -1;    			 
		 КонецПопытки; 
		 
		 Если НомУровня > 0 Тогда
		 
		   бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСверкиВГО, ДеревоСверкиВГО, НомУровня);
		   
		   Сч = 1;
		   Для каждого Кнопка Из КнопкиУровней Цикл 		   
		   	   Кнопка.Пометка = Ложь;     			   
			   Если Сч = НомУровня Тогда   			   
			   	  Кнопка.Пометка = Истина;  			   
			   КонецЕсли;    			   
			   Сч = Сч + 1;
		   КонецЦикла; 
		   
		 КонецЕсли; 
		 
		 фУровеньПросмотраДерева = НомУровня;
		 
	 КонецЕсли;
	
КонецПроцедуры // ДействиеДеревоСверкиВГОУровень()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
 
#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура обновляет форму по данным объекта на сервере.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОбновитьФормуПоДаннымОбъекта()

	// Настройка
	фРазрешеноВыбиратьОперациюВГО = Объект.НастройкаАктаСверки.РазрешеноВыбиратьОперациюВГО;
	ПолучитьСчетаДляФильтров();
		
	// Заполним валюту МСФО.
	ЗаполнитьДекорациюВалютыМСФО();
	
	// Имя регистра бухгалтерии
	УстановитьИмяРегистраБухгалтерии();
	
	// Заполнение дерева сверки ВГО по данным табличной части.
	ЗаполнитьДеревоСверкиВГО(Объект.Ссылка);
		
	// Период сверки ВГО
	Период.ДатаНачала 	 = Объект.ДатаНачала;
	Период.ДатаОкончания = Объект.ДатаОкончания;	

КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_вго_РазделыСверкиВГО", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_вго_РазделыСверкиВГО));
	КэшПеречисления.Вставить("бит_вго_ТипыОперацийВГО" , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_вго_ТипыОперацийВГО));
		
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	МетаданныеОбъекта = Метаданные.Документы.бит_вго_АктСверкиВГО;
	фКэшЗначений.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
		
	// Валюты регламентированного и управленческого учетов, МСВО и сценария.
	фКэшЗначений.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	фКэшЗначений.Вставить("ВалютаУпрлУчета", Константы.бит_ВалютаУправленческогоУчета.Получить());
	фКэшЗначений.Вставить("ВалютаМСФО"	   , ПолучитьВалютуМСФО());
	фКэшЗначений.Вставить("ВалютаСценария" , ПолучитьВалютуСценария());
	
	МассивРазделовДляТч = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РазделыСверкиВГО.Ссылка
	|ИЗ
	|	Перечисление.бит_вго_РазделыСверкиВГО КАК РазделыСверкиВГО
	|ГДЕ
	|	РазделыСверкиВГО.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделыСверкиВГО.Порядок
	|";
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивРазделовДляТч.Добавить(Выборка.Ссылка);	
	КонецЦикла;
	фКэшЗначений.Вставить("МассивРазделовДляТч", МассивРазделовДляТч);
	
	
	// Инициализация структуры кэша реквизитов строки тч.
	КэшРеквизитовСтроки = Новый Структура;
	Для каждого РеквизитТч Из Метаданные.Документы.бит_вго_АктСверкиВГО.ТабличныеЧасти.Проводки.Реквизиты Цикл
		КэшРеквизитовСтроки.Вставить(РеквизитТч.Имя);
	КонецЦикла;
	фКэшЗначений.Вставить("КэшРеквизитовСтроки", КэшРеквизитовСтроки);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура меняет отображение группировки суюконто.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИзменитьОтображениеГруппировкиСубконто()
	
	ТипГруппировки = ?(фГруппироватьСубконтоВертикально, ГруппировкаКолонок.Вертикальная, ГруппировкаКолонок.Горизонтальная);
	
	Элементы.ДеревоСверкиВГОДеревоГруппироватьСубконтоВертикально.Заголовок = ?(фГруппироватьСубконтоВертикально
													, НСтр("ru = 'Субконто горизонтально'")
													, НСтр("ru = 'Субконто вертикально'"));
	
	Элементы.ДеревоСверкиВГОГруппаСубконтоРасчетов.ОтображатьВШапке = Не фГруппироватьСубконтоВертикально;
	Элементы.ДеревоСверкиВГОГруппаСубконтоРасчетов.Группировка 		= ТипГруппировки;
	
	Элементы.ДеревоСверкиВГОГруппаСубконтоКор.ОтображатьВШапке 	= Не фГруппироватьСубконтоВертикально;
	Элементы.ДеревоСверкиВГОГруппаСубконтоКор.Группировка 		= ТипГруппировки;

КонецПроцедуры

// Функция получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//   СправочникСсылка.Валюты
// 
&НаСервере 
Функция ПолучитьВалютуМСФО()
	
	// Получим валюту международного учета.
	ВыводитьОшибки = ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация, ,ВыводитьОшибки);
	
	Возврат ВалютаМСФО;
	
КонецФункции // ПолучитьВалютуМСФО()

// Функция получает и записывает валюту сценария в кэш значений.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//   СправочникСсылка.Валюты
// 
&НаСервере 
Функция ПолучитьВалютуСценария()
	
	// Получим валюту сценария.
	ВалютаСценария = ?(ЗначениеЗаполнено(Объект.Сценарий), Объект.Сценарий.Валюта, Справочники.Валюты.ПустаяСсылка());
		
	Возврат ВалютаСценария;
	
КонецФункции // ПолучитьВалютуСценария()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьДекорациюВалютыМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьДекорациюВалютыМСФО()

// Процедура осуществляет управление доступностью/видимостью дерева сверки ВГО.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УстановитьВидимостьДоступностьДляДереваСверки()
		
	ДеревоДоступно =  ЗначениеЗаполнено(Объект.НастройкаАктаСверки)
					И ЗначениеЗаполнено(Объект.ДатаНачала)
					И ЗначениеЗаполнено(Объект.ДатаОкончания)
					И ЗначениеЗаполнено(Объект.РегистрБухгалтерии) 
					И ЗначениеЗаполнено(Объект.Организация)
					И ЗначениеЗаполнено(Объект.Контрагент)
					И ЗначениеЗаполнено(Объект.ВалютаДокумента);
					
	Элементы.ДеревоСверкиВГО.ТолькоПросмотр 					   = Не ДеревоДоступно;
	Элементы.ДеревоСверкиВГОДеревоДобавитьСчетРасчетов.Доступность = ДеревоДоступно;
	Элементы.ДеревоСверкиВГОГруппаЗаполнить.Доступность 		   = ДеревоДоступно;
		
КонецПроцедуры // УстановитьВидимостьДоступностьДляДереваСверки()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УстановитьВидимостьДоступность()
	
	ЭтотРегистр_Бюд = Ложь;
	
	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		
		// Настройки видимости
		ЭтотРегистр_Хоз = ИмяРегистраБухгалтерии = "Хозрасчетный";
		ЭтотРегистр_Бюд = ИмяРегистраБухгалтерии = "бит_Бюджетирование";
		ЭтотРегистр_Упр = ИмяРегистраБухгалтерии = "бит_Дополнительный_1";
		ЭтотРегистр_Меж = ИмяРегистраБухгалтерии = "бит_Дополнительный_2"; 		
		
		// Видимость элементов формы
		// Общие группы
		Элементы.ГруппаСценарий.Видимость 					= ЭтотРегистр_Бюд;
		Элементы.ГруппаВалютаМСФО.Видимость					= ЭтотРегистр_Меж;
		Элементы.ГруппаДеревоСверкиВГО.ТолькоПросмотр 		= ЭтотРегистр_Бюд И Не ЗначениеЗаполнено(Объект.Сценарий);
		// Измерения в табличной части  		
		Элементы.ДеревоСверкиВГОЦФО.Видимость 					= ЭтотРегистр_Бюд;		
		Элементы.ДеревоСверкиВГОПодразделениеРасчетов.Видимость = ЭтотРегистр_Хоз;
		Элементы.ДеревоСверкиВГОПодразделениеКор.Видимость 		= ЭтотРегистр_Хоз;
		
		// Авто отметки незаполненных
		Элементы.Сценарий.АвтоОтметкаНезаполненного 	= ЭтотРегистр_Бюд;
			
	Иначе
		
		// Видимость элементов формы
		Элементы.ГруппаСценарий.Видимость 				= Ложь;
		Элементы.ГруппаВалютаМСФО.Видимость				= Ложь;
		Элементы.ГруппаДеревоСверкиВГО.ТолькоПросмотр 	= Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Сценарий) И Не ЭтотРегистр_Бюд Тогда
		ИмяСправочникаСценарий = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
		Объект.Сценарий = Справочники[ИмяСправочникаСценарий].ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимостьДоступностьДляДереваСверки();	
	
КонецПроцедуры
  
// Процедура устанавливает имя регистра бухгалтерии.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьИмяРегистраБухгалтерии()

	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		
		ИмяРегистраБухгалтерии = Объект.РегистрБухгалтерии.ИмяОбъекта;
		ИмяПланаСчетов 		   = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
		МетаданныеПланаСчетов  = Метаданные.ПланыСчетов[ИмяПланаСчетов];
		
		фМаксКоличествоСубконто = МетаданныеПланаСчетов.МаксКоличествоСубконто;		
		
	Иначе
		
		ИмяРегистраБухгалтерии  = "";
		ИмяПланаСчетов 			= "";
		фМаксКоличествоСубконто = 0;
			
	КонецЕсли;
		
КонецПроцедуры // УстановитьИмяРегистраБухгалтерии()

// Процедура создает кноки раскрытия/свертки уровней дерева счетов.
// 
&НаСервере
Процедура СоздатьДействияУровней()

	// Очищаем существующие кнопки подменю
	КоличествоЭлементов = Элементы.ДеревоСверкиВГОГруппаУровни.ПодчиненныеЭлементы.Количество();
	Для Сч = 1 По КоличествоЭлементов Цикл
	
		НовыйСч = КоличествоЭлементов - Сч;
		Кнопка = Элементы.ДеревоСверкиВГОГруппаУровни.ПодчиненныеЭлементы[НовыйСч];
		Элементы.Удалить(Кнопка);
	
	КонецЦикла; 
	
	// Создадим команды и кнопки в подменю
	Для НовыйСч = 1 По фУровеньПросмотраДерева Цикл
		
		ИмяКоманды = "ДеревоСверкиВГОУровень_"+НовыйСч;
		
		КомандаУровня = Команды.Найти(ИмяКоманды);
		
		Если КомандаУровня = Неопределено Тогда
			
			КомандаУровня = Команды.Добавить(ИмяКоманды);
			КомандаУровня.Действие = "ДействиеДеревоСверкиВГОУровень";
			
		КонецЕсли; 
		
		НоваяКнопка = Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"),Элементы.ДеревоСверкиВГОГруппаУровни);
		
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок = "Уровень "+НовыйСч;
			
	КонецЦикла;

КонецПроцедуры // СоздатьДействияУровней()


// Процедура заполняет регистр бухгалтерии по настройке.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИзменениеНастройкиСервер()

	Настройка = Объект.НастройкаАктаСверки;
	
	ДеревоСверкиВГО.ПолучитьЭлементы().Очистить();
	Объект.Проводки.Очистить();
	
	Если Объект.РегистрБухгалтерии <> Настройка.РегистрБухгалтерии Тогда
		Объект.РегистрБухгалтерии 	  = Настройка.РегистрБухгалтерии;
		ИзменениеРегистраБухгалтерииСервер();	
	КонецЕсли;	
	
	фРазрешеноВыбиратьОперациюВГО = Настройка.РазрешеноВыбиратьОперациюВГО;
	
	ПолучитьСчетаДляФильтров();
	
	ПересчитатьОбщиеОстаткиСервер();
	
КонецПроцедуры

// Процедура выполняет действия необходимые при изменении регистра бухгалтерии.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеРегистраБухгалтерииСервер()

	// Очистка табличной части
	ДеревоСверкиВГО.ПолучитьЭлементы().Очистить();
	Объект.Проводки.Очистить();
	
	УстановитьИмяРегистраБухгалтерии();
	
	УстановитьВидимостьДоступность();
	ОформитьСчета();
		
КонецПроцедуры // ИзменениеРегистраБухгалтерииСервер()

// Процедура выполняет действия необходимые при изменении организации.
// 
// Параметры:
//  ПересчитыватьСуммыМСФО - Булево
//  СтараяВалютаМСФО 	   - СправочникСсылка.Валюты
//  ТекВалютаМСФО 	   	   - СправочникСсылка.Валюты.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер(ПересчитыватьСуммыМСФО, СтараяВалютаМСФО, ТекВалютаМСФО)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ВыполнитьДействияПриИзмененииОрганизации();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Перезапись в дереве
	СторкаСписокСвойств = "ПодразделениеРасчетов, ПодразделениеКор, 
						|СубконтоРасчетов_1, СубконтоРасчетов_2, СубконтоРасчетов_3, СубконтоРасчетов_4,
						|СубконтоКор_1, СубконтоКор_2, СубконтоКор_3, СубконтоКор_4";
	СинхронизироватьДанныеТабличнойЧастиИДерева(СторкаСписокСвойств);
	
	// Заполним декорацию валюты МСФО
	фКэшЗначений.Вставить("ВалютаМСФО", ТекВалютаМСФО);
	ЗаполнитьДекорациюВалютыМСФО();
	
	ВосстановитьНастройкиОформленияПоСчету();	 	
	
	УстановитьВидимостьДоступностьДляДереваСверки();
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура обрабатывает изменение контрагента документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеКонтрагентаСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ВыполнитьДействияПриИзмененииКонтрагента();
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Перезапись в дереве
	СторкаСписокСвойств = "СубконтоРасчетов_1, СубконтоРасчетов_2, СубконтоРасчетов_3, СубконтоРасчетов_4,
						|СубконтоКор_1, СубконтоКор_2, СубконтоКор_3, СубконтоКор_4";
	СинхронизироватьДанныеТабличнойЧастиИДерева(СторкаСписокСвойств);
		
	УстановитьВидимостьДоступностьДляДереваСверки();
	
КонецПроцедуры // ИзменениеКонтрагентаСервер()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыДокументаСервер()
	                 
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ПересчитатьКурсыДокумента();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	УстановитьВидимостьДоступностьДляДереваСверки();
	
КонецПроцедуры // ИзменениеВалютыДокументаСервер()
  
// Процедура обрабатывает изменение даты начала.
// 
// Параметры:
// 
&НаСервере
Процедура ИзменениеДатыНачалаСервер()
	
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Объект.ДатаНачала, 
														Объект.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Объект.ПредставлениеПериодаСверкиВГО);
														
	УстановитьВидимостьДоступностьДляДереваСверки();
	
КонецПроцедуры // ИзменениеДатыНачалаСервер()

// Процедура обрабатывает изменение счета в табличном поле.
// 
// Параметры:
//  Идентификатор  - Число - Индентификатор строки табличной части.
// 
&НаСервере
Процедура ИзменениеСчетаСервер(Идентификатор)

	ТекущиеДанные = ДеревоСверкиВГО.НайтиПоИдентификатору(Идентификатор);	
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		ТекСчетРасчетов = ТекущиеДанные.Группа;
		ТекущиеДанные.СчетРасчетов = ТекСчетРасчетов;
	
		Для каждого СтрокаРаздел Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			
			СтрокаРаздел.СчетРасчетов = ТекСчетРасчетов;
			
			Для каждого СтрокаДерева Из СтрокаРаздел.ПолучитьЭлементы() Цикл				
				
				Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
				
				СтрокаДерева.СчетРасчетов = ТекСчетРасчетов;
				ЗаполнитьНастройкиАналитикСтроки(Идентификатор);
				ОбработатьСубконтоПоСчету(Идентификатор, "СубконтоРасчетов_", "СчетРасчетов"); 				
				
			КонецЦикла;
			
		КонецЦикла;
				
	Иначе
		
		Идентификатор = ТекущиеДанные.ПолучитьИдентификатор(); 
		
		ТекущиеДанные.КорСчет = ТекущиеДанные.Группа;
		ЗаполнитьНастройкиАналитикСтроки(Идентификатор);
		ОбработатьСубконтоПоСчету(Идентификатор, "СубконтоКор_", "КорСчет");		
		
	КонецЕсли;
	
	Модифицированность = Истина;
			
КонецПроцедуры // ИзменениеСчетаСервер()

// Процедура обрабатывает изменение реквизита.
// 
// Параметры:
//  Идентификатор  - Число
// 
&НаСервере
Процедура ИзменениеРеквизитаСервер(Идентификатор)

	ТекущиеДанные = ДеревоСверкиВГО.НайтиПоИдентификатору(Идентификатор);
	
	СинхронизироватьДанныеДереваИТабличнойЧастиДляСтроки(Идентификатор);
	
	Модифицированность = Истина;
		
КонецПроцедуры // ИзменениеРеквизитаСервер()

// Процедура обрабатывает изменение суммы Дт или Кт.
// 
// Параметры:
//  Идентификатор  	     - Число
//  ИдГруппыСчетРасчетов - Число
//  ИмяРесурса     	     - Строка.
// 
&НаСервере
Процедура ИзменениеСуммыСервер(Идентификатор, ИдГруппыСчетРасчетов, ИмяРесурса)

	// Выполним расчет сумм в текущей строке
	ВыполнитьРасчетСуммВзаиморасчетовТекущейСтрокиСервер(Идентификатор, ИмяРесурса);
	СинхронизироватьДанныеДереваИТабличнойЧастиДляСтроки(Идентификатор);
	
	ПересчитатьКонечноеСальдоПоСчетуРасчетов(ИдГруппыСчетРасчетов);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ИзменениеСуммыСервер()

// Процедура обрабатывает изменение субконто.
// 
// Параметры:
//  Контейнер         - Произвольный
//  ЗначениеСубконто  - Произвольный - Текущее значение субконто
//  ИмяСубконто		  - Строка.
// 
&НаСервере
Процедура ИзменениеСубконто(Идентификатор, ЗначениеСубконто, ИмяСубконто)

	ТекущиеДанные = ДеревоСверкиВГО.НайтиПоИдентификатору(Идентификатор);
	
	Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		И ЗначениеЗаполнено(ЗначениеСубконто) Тогда
		
		ТекущиеДанные.ВалютаВзаиморасчеты = бит_КурсыВалют.ПолучитьВалютуДоговораКонтрагента(ЗначениеСубконто);
		
	КонецЕсли;
	
	ИзменениеРеквизитаСервер(Идентификатор);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Функция обрабатывает изменения данных строки при окончании редактирования.
// 
// Параметры:
//  Идентификатор  		   - Число
//  ИдГруппыСчетРасчетов   - Число
//  ТексСообщенияОбОшибках - Строка.
// 
&НаСервере
Процедура ОкончаниеРедактированияСтрокиДереваСервер(Идентификатор, ИдГруппыСчетРасчетов, ТексСообщенияОбОшибках)
	
	УстановитьДанныеПоПравиламТрансляции(Идентификатор, ТексСообщенияОбОшибках);	
	
	СинхронизироватьДанныеДереваИТабличнойЧастиДляСтроки(Идентификатор);
	
	ПересчитатьКонечноеСальдоПоСчетуРасчетов(ИдГруппыСчетРасчетов);
	ПересчитатьИтоги();
	ПересчитатьОбщиеОстаткиСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОкончаниеРедактированияСтрокиДереваСервер()


// Процедура получает массивы доступных счетов для установки отборов.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   Массив
// 
&НаСервере
Процедура ПолучитьСчетаДляФильтров()
	
	СтруктураСчетов = бит_вго_Сервер.СчетаФильтрации(Объект.НастройкаАктаСверки);
		   	
	фКэшЗначений.Вставить("МассивСчетовРасчетов", СтруктураСчетов.МассивСчетовРасчетов);
	фКэшЗначений.Вставить("МассивСчетовОборотов", СтруктураСчетов.МассивСчетовОборотов);
	фКэшЗначений.Вставить("МассивСчетовОплаты"  , СтруктураСчетов.МассивСчетовОплаты);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеСчетовИСубконто

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Для НомСубконто = 1 По 4 Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГОСубконтоРасчетов_" + НомСубконто);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.РазрешеноВыбиратьСубконтоРасчетов_" + НомСубконто);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		УстановитьОформлениеНедоступногоЭлемента(Элемент);
	КонецЦикла;
	
	Для НомСубконто = 1 По 4 Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГОСубконтоКор_" + НомСубконто);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.РазрешеноВыбиратьСубконтоКор_" + НомСубконто);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		УстановитьОформлениеНедоступногоЭлемента(Элемент);
	КонецЦикла;
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаДт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ОтборЭлемента = ОтборГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.СуммаКт");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборГруппаЭлементов_Ур2 = ОтборГруппаЭлементов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ОтборГруппаЭлементов_Ур2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ОтборЭлемента = ОтборГруппаЭлементов_Ур2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.бит_вго_РазделыСверкиВГО.ВходящееСальдо");
		ОтборЭлемента = ОтборГруппаЭлементов_Ур2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ВидСчетаРасчетов");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("ВидСчета.Пассивный");
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ОтборЭлемента = ОтборГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.СуммаДт");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборГруппаЭлементов_Ур2 = ОтборГруппаЭлементов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ОтборГруппаЭлементов_Ур2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ОтборЭлемента = ОтборГруппаЭлементов_Ур2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.бит_вго_РазделыСверкиВГО.ВходящееСальдо");
		ОтборЭлемента = ОтборГруппаЭлементов_Ур2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ВидСчетаРасчетов");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("ВидСчета.Активный");
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОГруппа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаДт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",       Новый Цвет(204, 192, 133)); // ЦветаСтиля.ЛинияОтчета);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",          ШрифтыСтиля.бит_ОсновнойЭлементСписка);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГООперацияВГО.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОВалютаВзаиморасчеты.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_4.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_4.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОЦФО.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОПодразделениеРасчетов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОПодразделениеКор.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаВзаиморасчеты.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаДт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаКт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОКурсВзаиморасчетов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОКратностьВзаиморасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",       Новый Цвет(204, 192, 133)); // ЦветаСтиля.ЛинияОтчета);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          "");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_4.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_4.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОЦФО.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОПодразделениеРасчетов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОПодразделениеКор.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОГруппа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГООперацияВГО.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОВалютаВзаиморасчеты.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_4.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_4.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОЦФО.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОПодразделениеРасчетов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОПодразделениеКор.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаВзаиморасчеты.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаДт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаКт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОКурсВзаиморасчетов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОКратностьВзаиморасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",       ЦветаСтиля.ФонПомеченнойКнопкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	ОтборРазделыВГООформления = Новый СписокЗначений;
	ОтборРазделыВГООформления.Добавить(Перечисления.бит_вго_РазделыСверкиВГО.ВходящееСальдо);
	ОтборРазделыВГООформления.Добавить(Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОГруппа.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ОтборРазделыВГООформления;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НадписьПоясняющаяГиперссылку);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.СчетРасчетов"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГООперацияВГО.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.бит_вго_РазделыСверкиВГО.ВходящееСальдо;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГООперацияВГО.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОВалютаВзаиморасчеты.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоРасчетов_4.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСубконтоКор_4.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОЦФО.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОПодразделениеРасчетов.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОПодразделениеКор.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаВзаиморасчеты.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаДт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОСуммаКт.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГООперацияВГО.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("фРазрешеноВыбиратьОперациюВГО");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГООперацияВГО.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.НекорректнаяОперация");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветШрифтаОшибки);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГООперацияВГО.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.РучноеИзменениеОперацииВГО");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветТочекАлгоритма);
	
	
	Для Сч = 1 По 10 Цикл
		ИмяОформляемогоЭлемента = "";
		Если Сч = 1 Тогда
			ИмяОформляемогоЭлемента = "СубконтоРасчетов_1";
		ИначеЕсли Сч = 2 Тогда
			ИмяОформляемогоЭлемента = "СубконтоРасчетов_2";
		ИначеЕсли Сч = 3 Тогда
			ИмяОформляемогоЭлемента = "СубконтоРасчетов_3";
		ИначеЕсли Сч = 4 Тогда
			ИмяОформляемогоЭлемента = "СубконтоРасчетов_4";
		ИначеЕсли Сч = 5 Тогда
			ИмяОформляемогоЭлемента = "СубконтоКор_1";
		ИначеЕсли Сч = 6 Тогда
			ИмяОформляемогоЭлемента = "СубконтоКор_2";
		ИначеЕсли Сч = 7 Тогда
			ИмяОформляемогоЭлемента = "СубконтоКор_3";
		ИначеЕсли Сч = 8 Тогда
			ИмяОформляемогоЭлемента = "СубконтоКор_4";
		ИначеЕсли Сч = 9 Тогда
			ИмяОформляемогоЭлемента = "ОперацияВГО";
		ИначеЕсли Сч = 10 Тогда
			ИмяОформляемогоЭлемента = "ВалютаВзаиморасчеты";
		Иначе
			Прервать;
		КонецЕсли;
			
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО" + ИмяОформляемогоЭлемента);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО." + ИмяОформляемогоЭлемента);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Если ИмяОформляемогоЭлемента <> "ОперацияВГО"
			И ИмяОформляемогоЭлемента <> "ОперацияВГО" Тогда
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ПроверкаЗаполнения" + ИмяОформляемогоЭлемента);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
		КонецЕсли;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	КонецЦикла;
	
	
	ОтборРазделыВГООформления = Новый СписокЗначений;
	ОтборРазделыВГООформления.Добавить(Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов);
	ОтборРазделыВГООформления.Добавить(Перечисления.бит_вго_РазделыСверкиВГО.ДанныеОбОплате);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСверкиВГОГруппа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.КорСчет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоСверкиВГО.Раздел");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ОтборРазделыВГООформления;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеНедоступногоЭлемента(Элемент)
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона",       ЦветаСтиля.ЦветТекстаНевыбраннойКартинки);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",     ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          "недоступно");
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Функция получает строку аналитик, которые нужно выбирать.
// 
// Параметры:
//  Идентификатор - Число
//  
// Возвращаемое значение:
//   Строка
// 
&НаСервере
Процедура ЗаполнитьНастройкиАналитикСтроки(Идентификатор)

	РазделыСверкиВГО = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО;
	                                                                
	ТекущиеДанные = ДеревоСверкиВГО.НайтиПоИдентификатору(Идентификатор);
	ТипКорСчета = ?(ТекущиеДанные.Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов
					, "ЭтоСчетОборотов"
					, "ЭтоСчетОплаты");
					
	НастройкиСчетов = Объект.НастройкаАктаСверки.Счета;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетРасчетов) Тогда
		НастройкиСчета = НастройкиСчетов.НайтиСтроки(Новый Структура("Счет, ЭтоСчетРасчетов", ТекущиеДанные.СчетРасчетов, Истина));
		Если НастройкиСчета.Количество() > 0 Тогда 		
			НастройкаСчета = НастройкиСчета[0];
			Для i = 1 По фКоличествоСубконто Цикл
				ТекущиеДанные["РазрешеноВыбиратьСубконтоРасчетов_" + i]  = НастройкаСчета["РазрешеноВыбиратьСубконто_" + i];				
				ТекущиеДанные["ПроверкаЗаполненияСубконтоРасчетов_" + i] = НастройкаСчета["ПроверкаЗаполненияСубконто_" + i];				
			КонецЦикла;   		
		КонецЕсли;
	Иначе
		Для i = 1 По фКоличествоСубконто Цикл
			ТекущиеДанные["РазрешеноВыбиратьСубконтоРасчетов_" + i]  = Ложь;
			ТекущиеДанные["ПроверкаЗаполненияСубконтоРасчетов_" + i] = Ложь;				
		КонецЦикла;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.КорСчет) Тогда
		НастройкиСчета = НастройкиСчетов.НайтиСтроки(Новый Структура("Счет, " + ТипКорСчета, ТекущиеДанные.КорСчет, Истина));
		Если НастройкиСчета.Количество() > 0 Тогда 		
			НастройкаСчета = НастройкиСчета[0];  		
			Для i = 1 По фКоличествоСубконто Цикл
				ТекущиеДанные["РазрешеноВыбиратьСубконтоКор_" + i]  = НастройкаСчета["РазрешеноВыбиратьСубконто_" + i];
				ТекущиеДанные["ПроверкаЗаполненияСубконтоКор_" + i] = НастройкаСчета["ПроверкаЗаполненияСубконто_" + i];				
			КонецЦикла;   		
		КонецЕсли;
	Иначе
		Для i = 1 По фКоличествоСубконто Цикл
			ТекущиеДанные["РазрешеноВыбиратьСубконтоКор_" + i]  = Ложь;
			ТекущиеДанные["ПроверкаЗаполненияСубконтоКор_" + i] = Ложь;
		КонецЦикла;
	КонецЕсли;
 	
КонецПроцедуры // ЗаполнитьНастройкиАналитикСтроки()

// Процедура подсчитывает количество доступных субконто в строке тч.
// 
// Параметры:
//  Идентификатор  		   - Число
//  ИмяСчета  			   - Строка
//  
&НаСервере
Процедура УстановитьПараметрыОформленияПоСчету(Идентификатор, ИмяСчета)

	ТекущиеДанные = ДеревоСверкиВГО.НайтиПоИдентификатору(Идентификатор);
	
	Постфикс = СтрЗаменить(ИмяСчета, "Счет", "");
	
	ТекущийСчет = ТекущиеДанные[ИмяСчета];
	Если ТекущийСчет <> Неопределено Тогда
	
		Если ИмяРегистраБухгалтерии = "Хозрасчетный" Тогда
			// Счет использует учет по подразделениям
            СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущийСчет);
			ТекущиеДанные[ИмяСчета + "УчетПоПодразделениям"] = СвСч.УчетПоПодразделениям;
			Если Не СвСч.УчетПоПодразделениям Тогда
            	ТекущиеДанные["Подразделение" + Постфикс] = Неопределено;
   	    	КонецЕсли; 
				
		КонецЕсли;
			
	КонецЕсли;
	 	
КонецПроцедуры // УстановитьПараметрыОформленияПоСчету()

// Процедура восстанавливает настройки субконто в зависимости от счетов учета.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ВосстановитьНастройкиОформленияПоСчету()

	Для каждого СтрокаСчет Из ДеревоСверкиВГО.ПолучитьЭлементы() Цикл
		Для каждого СтрокаРаздел Из СтрокаСчет.ПолучитьЭлементы() Цикл
			Для каждого СтрокаДерева Из СтрокаРаздел.ПолучитьЭлементы() Цикл
				
				Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
				ЗаполнитьНастройкиАналитикСтроки(Идентификатор);
				УстановитьПараметрыОформленияПоСчету(Идентификатор, "СчетРасчетов");
				УстановитьПараметрыОформленияПоСчету(Идентификатор, "КорСчет");
				
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВосстановитьНастройкиОформленияПоСчету()

// Процедура осуществляет устанавливает связи параметров выбора и связи по типу субконто,
// восстанавливает настройки субконто и полей по счету, задает настройки оформления для полей.
// 
// Параметры:
//  ИмяСчета - Строка
// 
&НаСервере 
Процедура ОформитьРеквизитыПоСчету(ИмяСчета)
	 	
	Постфикс 			   = СтрЗаменить(ИмяСчета, "Счет", "");
	ИмяСубконто			   = "Субконто" + Постфикс + "_";
	
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	 											  ,ИмяСчета
												  ,ИмяСубконто
												  ,фКоличествоСубконто
												  ,"ДеревоСверкиВГО"
												  ,"Элементы.ДеревоСверкиВГО.ТекущиеДанные");
												  
	// Восстанавливаем настройки субконто, валюты, валютной суммы в зависимости от счета учета.
	Для каждого СтрокаСчет Из ДеревоСверкиВГО.ПолучитьЭлементы() Цикл
		Для каждого СтрокаРаздел Из СтрокаСчет.ПолучитьЭлементы() Цикл
			Для каждого СтрокаДерева Из СтрокаРаздел.ПолучитьЭлементы() Цикл 
				Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
				ЗаполнитьНастройкиАналитикСтроки(Идентификатор);
	        	УстановитьПараметрыОформленияПоСчету(Идентификатор, ИмяСчета);
		 	КонецЦикла; 
		КонецЦикла;
	КонецЦикла;
																   
	// Настройки оформления для остальных полей по счету.
	СтруктураПризнаков = Новый Структура;
	// По признаку учета по подразделениям   			
	МассивОформляемыхПолей = Новый Массив;
	МассивОформляемыхПолей.Добавить("ДеревоСверкиВГО" + "Подразделение" + Постфикс);
	СтруктураПризнаков.Вставить(ИмяСчета + "УчетПоПодразделениям", МассивОформляемыхПолей);

	бит_БухгалтерияСервер.УстановитьОформлениеПолейПоСчету(УсловноеОформление
														,"ДеревоСверкиВГО"
														,Постфикс
														, 
														,СтруктураПризнаков
														,Ложь);										
																	
КонецПроцедуры // ОформитьРеквизитыПоСчету()

// Процедура осуществляет устанавливает связи параметров выбора и связи по типу субконто,
// восстанавливает настройки субконто, задает настройки оформления для полей субконто.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ОформитьРеквизиты()
	
	// Удалить старое оформление таблицы
	бит_РаботаСДиалогамиСервер.УдалитьЭлементыОформленияПоПредставлению(НСтр("ru = 'Оформление субконто таблицы'"), УсловноеОформление);
	бит_РаботаСДиалогамиСервер.УдалитьЭлементыОформленияПоПредставлению(НСтр("ru = 'Оформление полей по счету'")  , УсловноеОформление);
	
	// Установить оформление и связи
	ОформитьРеквизитыПоСчету("СчетРасчетов");
	ОформитьРеквизитыПоСчету("КорСчет");
	
КонецПроцедуры // ОформитьСубконто()

// Процедура оформляет счета в табличной части по регистру бухгалтерии.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОформитьСчета()
	
	Если Не ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипаДляСчетов = "ПланСчетовСсылка." + ИмяПланаСчетов;
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип(ИмяТипаДляСчетов));
	ОписаниеТиповСчета = Новый ОписаниеТипов(МассивТипов);
	
	Элементы.ДеревоСверкиВГОГруппа.ВыбиратьТип   = Ложь;
	Элементы.ДеревоСверкиВГОГруппа.ДоступныеТипы = ОписаниеТиповСчета;
	
КонецПроцедуры // ОформитьСчета()

// Процедура изменение настроек субконто по счету для строки.
// 
// Параметры:
//  Идентификатор  - Число - Индентификатор строки табличной части
//  ИмяСубконто	   - Строка
//  ИмяСчета	   - Строка.
// 
&НаСервере
Процедура ОбработатьСубконтоПоСчету(Идентификатор, ИмяСубконто, ИмяСчета)

	ТекущиеДанные = ДеревоСверкиВГО.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные[ИмяСчета], фКоличествоСубконто);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, ИмяСубконто);

	УстановитьПараметрыОформленияПоСчету(Идентификатор, ИмяСчета);	

	СинхронизироватьДанныеДереваИТабличнойЧастиДляСтроки(Идентификатор);
	
КонецПроцедуры // ОбработатьСубконтоПоСчету()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииПересчетаСуммТабличнойЧасти

// Процедура расчитывает суммы в текущей строке.
// 
// Параметры:
//  ИндексСтроки   	   	   - Число
//  ИмяРесурса 		  	   - Строка
//  ПолучитьСтруктуруКурса - Булево.
// 
&НаСервере
Процедура ВыполнитьРасчетСуммВзаиморасчетовТекущейСтрокиСервер(ИдСтроки, ИмяРесурса, ПолучитьСтруктуруКурса = Ложь)
	
	ТекущиеДанные = ДеревоСверкиВГО.НайтиПоИдентификатору(ИдСтроки);
		
	Если Объект.ВалютаДокумента = ТекущиеДанные.ВалютаВзаиморасчеты Тогда
		ТекущиеДанные.СуммаВзаиморасчеты = ТекущиеДанные[ИмяРесурса];	
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьРасчетСуммВзаиморасчетовТекущейСтрокиСервер()

// Процедура обрабатывает изменение валюты в строке табличой части.
// 
// Параметры:
//  СтруктураВалютыДокумента 	- Структура
//  ТолькоВзаиморасчеты 		- Булево (По умолчанию = Ложь)
//  ПересчитыватьКурсВСтроке    - Булево (По умолчанию = Ложь).
// 
&НаСервере
Процедура ВыполнитьРасчетСуммДереваСервер(СтруктураВалютыДокумента, ТолькоВзаиморасчеты = Ложь, ПересчитыватьКурсВСтроке = Ложь)

	КореньДерева = ДеревоСверкиВГО.ПолучитьЭлементы();
	
	// Пересчет в табличной части
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ВыполнитьПерерасчетСуммТабличнойЧасти(СтруктураВалютыДокумента, ТолькоВзаиморасчеты);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Перезапись в дереве
	Для каждого СтрокаСчет Из КореньДерева Цикл
		Для каждого СтрокаРаздел Из СтрокаСчет.ПолучитьЭлементы() Цикл
			Для каждого СтрокаДерева Из СтрокаРаздел.ПолучитьЭлементы() Цикл
			
				СтрокиТаблЧасти = Объект.Проводки.НайтиСтроки(Новый Структура("УникальныйИдСтрокиТч", СтрокаДерева.УникальныйИдСтрокиТч));
				Если СтрокиТаблЧасти.Количество() > 0 Тогда
			
					СтрокаТаблЧасти = СтрокиТаблЧасти[0];
					СтрокаДерева.СуммаДт 			= СтрокаТаблЧасти.СуммаДт;
					СтрокаДерева.СуммаКт 			= СтрокаТаблЧасти.СуммаКт;
					СтрокаДерева.СуммаВзаиморасчеты = СтрокаТаблЧасти.СуммаВзаиморасчеты;
					
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
		ПересчитатьКонечноеСальдоПоСчетуРасчетов(СтрокаСчет.ПолучитьИдентификатор());
	КонецЦикла;

	ПересчитатьИтоги();
	ПересчитатьОбщиеОстаткиСервер();
	ВосстановитьНастройкиОформленияПоСчету();

КонецПроцедуры // ВыполнитьРасчетСуммДереваСервер()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииЗаполненияДереваСверкиВго

// Процедура заполняет дерево сверки ВГО по табличной части.
// 
// Параметры:
// 	СсылкаЗаполнения - ДокументСсылка.бит_вго_АктСверкиВГО.
// 
&НаСервере
Процедура ЗаполнитьДеревоСверкиВГО(СсылкаЗаполнения)
	
	РазделыСверкиВГО = Перечисления.бит_вго_РазделыСверкиВГО;
	КореньДерева = ДеревоСверкиВГО.ПолучитьЭлементы();
	
	// Очистка дерева
	КореньДерева.Очистить();
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаЗаполнения);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РазделыСверкиВГО.Ссылка,
	|	РазделыСверкиВГО.Порядок
	|ПОМЕСТИТЬ РазделыВГО
	|ИЗ
	|	Перечисление.бит_вго_РазделыСверкиВГО КАК РазделыСверкиВГО
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазделыВГО.Ссылка 						 КАК Раздел,
	|	РазделыВГО.Порядок 						 КАК Порядок,
	|	ПроводкиАктаСверки.НомерСтроки,
	|	ПроводкиАктаСверки.ОперацияВГО,
	|	ПроводкиАктаСверки.СчетРасчетов,
	|	ПроводкиАктаСверки.КорСчет,
	|	ПроводкиАктаСверки.ВалютаВзаиморасчеты,
	|	ПроводкиАктаСверки.ЦФО,
	|	ПроводкиАктаСверки.ПодразделениеРасчетов,
	|	ПроводкиАктаСверки.ПодразделениеКор,
	|	ПроводкиАктаСверки.СубконтоРасчетов_1,
	|	ПроводкиАктаСверки.СубконтоРасчетов_2,
	|	ПроводкиАктаСверки.СубконтоРасчетов_3,
	|	ПроводкиАктаСверки.СубконтоРасчетов_4,
	|	ПроводкиАктаСверки.СубконтоКор_1,
	|	ПроводкиАктаСверки.СубконтоКор_2,
	|	ПроводкиАктаСверки.СубконтоКор_3,
	|	ПроводкиАктаСверки.СубконтоКор_4,
	|	ПроводкиАктаСверки.СуммаДт,
	|	ПроводкиАктаСверки.СуммаКт,
	|	ПроводкиАктаСверки.СуммаВзаиморасчеты,
	|	ПроводкиАктаСверки.УникальныйИдСтрокиТч,
	|	ПроводкиАктаСверки.РучноеИзменениеОперацииВГО,
	|	ПроводкиАктаСверки.КурсВзаиморасчетов,
	|	ПроводкиАктаСверки.КратностьВзаиморасчетов
	|ИЗ
	|	РазделыВГО КАК РазделыВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_вго_АктСверкиВГО.Проводки КАК ПроводкиАктаСверки
	|		ПО РазделыВГО.Ссылка = ПроводкиАктаСверки.Раздел
	|ГДЕ
	|	ПроводкиАктаСверки.Ссылка = &Ссылка
    |
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ
	|	СУММА(СуммаДт),
	|	СУММА(СуммаКт)
	|ПО
	|	СчетРасчетов,
	|	Раздел
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РазделыВГО
	|
	|";
	Результат = Запрос.Выполнить();

	ВыборкаСчетРасчета = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаСчетРасчета.Следующий() Цикл
		
		ТекСчетРасчетов = ВыборкаСчетРасчета.СчетРасчетов;
		ВидСчетаРасчетов = ТекСчетРасчетов.Вид;
		
		// Вывод строки счета расчетов
		СтрокаСчет = КореньДерева.Добавить();
		СтрокаСчет.Раздел  	 		= РазделыСверкиВГО.СчетРасчетов;
		СтрокаСчет.СчетРасчетов 	= ТекСчетРасчетов;
		СтрокаСчет.ЭтоГруппа 	    = Истина;
		СтрокаСчет.Группа 	 	    = ТекСчетРасчетов;	
		СтрокаСчет.ВидСчетаРасчетов = ВидСчетаРасчетов;
		
		ИдГруппыСчетРасчетов = СтрокаСчет.ПолучитьИдентификатор();
		ВеткаСчет = СтрокаСчет.ПолучитьЭлементы();
				
		ВыборкаРаздел = ВыборкаСчетРасчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ВыборкаРаздел.Следующий();
		
		Для каждого ТекущийРаздел Из фКэшЗначений.МассивРазделовДляТч Цикл
			
			// Вывод разделов
			СтрокаРаздел = ВеткаСчет.Добавить();
			СтрокаРаздел.Раздел  	  		  = ТекущийРаздел;
			СтрокаРаздел.СчетРасчетов 		  = ТекСчетРасчетов;
			СтрокаРаздел.ЭтоГруппа    		  = Истина;
			СтрокаРаздел.Группа		  		  = ТекущийРаздел;
			СтрокаРаздел.ИдГруппыСчетРасчетов = ИдГруппыСчетРасчетов;
			СтрокаРаздел.ВидСчетаРасчетов 	  = ВидСчетаРасчетов;
									
			// Если раздел не пустой
			Если ТекущийРаздел = ВыборкаРаздел.Раздел Тогда
				
				// Итоги
				Если ТекущийРаздел = Перечисления.бит_вго_РазделыСверкиВГО.ВходящееСальдо
					ИЛИ ТекущийРаздел = Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо Тогда        					
					РазницаДтКт = ВыборкаРаздел.СуммаДт - ВыборкаРаздел.СуммаКт; 
					Если (ВидСчетаРасчетов = ВидСчета.АктивноПассивный И РазницаДтКт > 0) 
						ИЛИ ВидСчетаРасчетов = ВидСчета.Активный Тогда
						СтрокаРаздел.СуммаДт = РазницаДтКт;
						СтрокаРаздел.СуммаКт = 0;
					Иначе
						СтрокаРаздел.СуммаДт = 0;
						СтрокаРаздел.СуммаКт = - РазницаДтКт;						
					КонецЕсли;
				Иначе
					СтрокаРаздел.СуммаДт = ВыборкаРаздел.СуммаДт;
					СтрокаРаздел.СуммаКт = ВыборкаРаздел.СуммаКт;
				КонецЕсли;
								
				ИдГруппыРаздела = СтрокаРаздел.ПолучитьИдентификатор();
				ВеткаРаздел = СтрокаРаздел.ПолучитьЭлементы();		
				
				Выборка = ВыборкаРаздел.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					// Вывод строк с кор. счетами и остальными данными.
					СтрокаОперация = ВеткаРаздел.Добавить();
					СтрокаОперация.Группа = Выборка.КорСчет;
					ЗаполнитьЗначенияСвойств(СтрокаОперация, Выборка);
					СтрокаОперация.ИдГруппыСчетРасчетов = ИдГруппыСчетРасчетов;
					СтрокаОперация.ИдГруппыРаздела      = ИдГруппыРаздела;
					СтрокаОперация.УникальныйИдСтрокиТч = Выборка.УникальныйИдСтрокиТч;
					СтрокаОперация.ВидСчетаРасчетов 	= ВидСчетаРасчетов;
					
					Идентификатор = СтрокаОперация.ПолучитьИдентификатор();
					// УстановитьДанныеПоПравиламТрансляции(Идентификатор);
					ЗаполнитьНастройкиАналитикСтроки(Идентификатор);
					
				КонецЦикла;
				
				ВыборкаРаздел.Следующий();
				
			КонецЕсли; // Если раздел не пустой
			
		КонецЦикла;
		
	КонецЦикла;	

	ПересчитатьОбщиеОстаткиСервер();
	
КонецПроцедуры // ЗаполнитьДеревоСверкиВГО()

// Процедура очищает все данные дерева и табличной части.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ОчиститьДеревоИТабличнуюЧасть()
	
	ДеревоСверкиВГО.ПолучитьЭлементы().Очистить();
	Объект.Проводки.Очистить();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОчиститьДеревоИТабличнуюЧасть()


// Функция формирует результат запроса по остаткам.
// 
// Параметры:
//  ЗаполняемыйСчетРасчетов - ПланСчетовСсылка.
//  
// Возвращаемое значение:
//   Результат выполнения запроса.
// 
&НаСервере
Функция ПолучитьРезультатЗапросаОстатки(ЗаполняемыйСчетРасчетов)
	
	ЭтотРегистр_Хоз = ИмяРегистраБухгалтерии = "Хозрасчетный";
	ЭтотРегистр_Бюд = ИмяРегистраБухгалтерии = "бит_Бюджетирование";
	ЭтотРегистр_МУ  = ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
	
	СтрокаСубконто4    	= ?(фМаксКоличествоСубконто = 4, "РегистрБухОстатки.Субконто4", "NULL");
	СтрокаДопУсловия 	= ?(ЭтотРегистр_Бюд, "Организация = &Организация И Сценарий = &Сценарий", "Организация = &Организация");
	СтрокаПодразделение = ?(ЭтотРегистр_Хоз, "ЕСТЬNULL(РегистрБухОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))", "NULL");
	СтрокаЦФО  			= ?(ЭтотРегистр_Бюд, "РегистрБухОстатки.ЦФО", "NULL");
	СтрокаСуммаРегл 	= ?(ЭтотРегистр_Хоз, "СуммаОстаток", "СуммаРеглОстаток");
	
	// Основная сумма по регистру бухгалтерии
	Если ЭтотРегистр_Хоз Тогда
		СтрокаСуммаОсн = "СуммаОстаток"; // Хозрасчетный - валюта регламенированного учета.
		ОсновнаяВалютаРегБух = фКэшЗначений.ВалютаРеглУчета;
	ИначеЕсли ЭтотРегистр_МУ Тогда	
	    СтрокаСуммаОсн = "СуммаМУОстаток"; // МСФО - валюта МСФО по организации
		ОсновнаяВалютаРегБух = фКэшЗначений.ВалютаМСФО;
	ИначеЕсли ЭтотРегистр_Бюд Тогда	
	    СтрокаСуммаОсн = "СуммаСценарийОстаток"; // Бюджетирование - валюта по сценарию
		ОсновнаяВалютаРегБух = фКэшЗначений.ВалютаСценария;
	Иначе
		СтрокаСуммаОсн = "СуммаУпрОстаток"; // Остальные регистры - упр.
		ОсновнаяВалютаРегБух = фКэшЗначений.ВалютаУпрлУчета;
	КонецЕсли; 
	
	// Курс/Кратность на дату начала
	МножительВалютный = Объект.КурсДокументаНаНачало / Объект.КратностьДокументаНаНачало; 
	
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("РасчетыВУсловныхЕдиницах") <> Неопределено Тогда
		мРасчетыВУсловныхЕдиницах = "РасчетыВУсловныхЕдиницах";
	Иначе
		мРасчетыВУсловныхЕдиницах = "ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте)";
	КонецЕсли; 

	// ----------------------------------------------------------------------
	// Запрос
	Запрос = Новый Запрос;
	
	// Параметры запроса
	МассивСчетовРасчетов = ?(ЗаполняемыйСчетРасчетов = Неопределено, фКэшЗначений.МассивСчетовРасчетов, ЗаполняемыйСчетРасчетов);
	Запрос.УстановитьПараметр("МассивСчетовРасчетов"	, МассивСчетовРасчетов);
	Запрос.УстановитьПараметр("НачалоПериода"			, НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаДокумента"  			, Объект.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента"			, Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("Организация"  			, Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент"   			, Объект.Контрагент);
	Запрос.УстановитьПараметр("ОсновнаяВалютаРегБух"   	, ОсновнаяВалютаРегБух);
	Запрос.УстановитьПараметр("МножительВалютный"   	, МножительВалютный);	
	Если ЭтотРегистр_Бюд Тогда
		Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты"  , ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрБухОстатки.Счет 										КАК СчетРасчетов,
	|	" + СтрокаЦФО + "											КАК ЦФО,
	|	" + СтрокаПодразделение + "									КАК Подразделение,
	|	РегистрБухОстатки.Субконто1,
	|	РегистрБухОстатки.Субконто2,
	|	РегистрБухОстатки.Субконто3,
	|	" + СтрокаСубконто4 + "										КАК Субконто4,
	|	ЕСТЬNULL(РегистрБухОстатки." + СтрокаСуммаРегл + "Дт, 0) 	КАК СуммаРеглОстатокДт,
	|	ЕСТЬNULL(РегистрБухОстатки." + СтрокаСуммаРегл + "Кт, 0) 	КАК СуммаРеглОстатокКт,
	|	ЕСТЬNULL(РегистрБухОстатки." + СтрокаСуммаОсн + "Дт, 0) 	КАК СуммаОснОстатокДт,
	|	ЕСТЬNULL(РегистрБухОстатки." + СтрокаСуммаОсн + "Кт, 0) 	КАК СуммаОснОстатокКт,
	|	РегистрБухОстатки.Валюта,
	|	ЕСТЬNULL(РегистрБухОстатки.ВалютнаяСуммаОстатокДт, 0) КАК ВалютнаяСуммаОстатокДт,
	|	ЕСТЬNULL(РегистрБухОстатки.ВалютнаяСуммаОстатокКт, 0) КАК ВалютнаяСуммаОстатокКт,
	|	ВЫБОР
	|		КОГДА РегистрБухОстатки.Субконто1 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОстатки.Субконто1
	|		КОГДА РегистрБухОстатки.Субконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОстатки.Субконто2
	|		КОГДА РегистрБухОстатки.Субконто3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОстатки.Субконто3
	|		КОГДА " + СтрокаСубконто4 + " ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА " + СтрокаСубконто4 + "
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СубконтоДоговор,
	|	ВЫБОР
	|		КОГДА РегистрБухОстатки.Субконто1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОстатки.Субконто1
	|		КОГДА РегистрБухОстатки.Субконто2 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОстатки.Субконто2
	|		КОГДА РегистрБухОстатки.Субконто3 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОстатки.Субконто3
	|		КОГДА " + СтрокаСубконто4 + " ССЫЛКА Справочник.Контрагенты
	|			ТОГДА " + СтрокаСубконто4 + "
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СубконтоКонтрагент
	|ПОМЕСТИТЬ ТаблицаОстатки1
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".Остатки(&НачалоПериода, Счет В (&МассивСчетовРасчетов), , " + СтрокаДопУсловия + ") КАК РегистрБухОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблРегистрБухОстатки.СчетРасчетов,
	|	ТаблРегистрБухОстатки.ЦФО,
	|	ТаблРегистрБухОстатки.Подразделение 	КАК ПодразделениеРасчетов,
	|	ТаблРегистрБухОстатки.Субконто1 		КАК СубконтоРасчетов_1,
	|	ТаблРегистрБухОстатки.Субконто2 		КАК СубконтоРасчетов_2,
	|	ТаблРегистрБухОстатки.Субконто3 		КАК СубконтоРасчетов_3,
	|	ТаблРегистрБухОстатки.Субконто4 		КАК СубконтоРасчетов_4,
	|	ТаблРегистрБухОстатки.СуммаРеглОстатокДт,
	|	ТаблРегистрБухОстатки.СуммаРеглОстатокКт,
	|	ТаблРегистрБухОстатки.СуммаОснОстатокДт,
	|	ТаблРегистрБухОстатки.СуммаОснОстатокКт,
	|	(ТаблРегистрБухОстатки.СуммаРеглОстатокДт / &МножительВалютный) КАК СуммаДт,
	|	(ТаблРегистрБухОстатки.СуммаРеглОстатокКт / &МножительВалютный) КАК СуммаКт,
	|	ТаблРегистрБухОстатки.Валюта,
	|	ТаблРегистрБухОстатки.ВалютнаяСуммаОстатокДт,
	|	ТаблРегистрБухОстатки.ВалютнаяСуммаОстатокКт,
	|	ВЫБОР
	|		КОГДА ТаблРегистрБухОстатки.СубконтоДоговор ЕСТЬ NULL 
	|				ИЛИ ТаблРегистрБухОстатки.СубконтоДоговор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|				ИЛИ ТаблРегистрБухОстатки.СубконтоДоговор."+мРасчетыВУсловныхЕдиницах+"
	|			ТОГДА Константы.ВалютаРегламентированногоУчета
	|		ИНАЧЕ ТаблРегистрБухОстатки.СубконтоДоговор.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК ВалютаВзаиморасчеты
	|ПОМЕСТИТЬ ТаблицаОстатки2
	|ИЗ
	|	Константы КАК Константы,
	|	ТаблицаОстатки1 КАК ТаблРегистрБухОстатки
	|ГДЕ
	|	ТаблРегистрБухОстатки.СубконтоКонтрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.СчетРасчетов,
	|	ТаблицаОстатки.СчетРасчетов.Вид КАК ВидСчетаРасчетов,
	|	ТаблицаОстатки.ЦФО,
	|	ТаблицаОстатки.ПодразделениеРасчетов,
	|	ТаблицаОстатки.СубконтоРасчетов_1,
	|	ТаблицаОстатки.СубконтоРасчетов_2,
	|	ТаблицаОстатки.СубконтоРасчетов_3,
	|	ТаблицаОстатки.СубконтоРасчетов_4,
	|	СУММА(ТаблицаОстатки.СуммаДт) 				КАК СуммаДт,
	|	СУММА(ТаблицаОстатки.СуммаКт) 				КАК СуммаКт,
	|	СУММА(ТаблицаОстатки.СуммаРеглОстатокДт) 	КАК СуммаРеглДт,
	|	СУММА(ТаблицаОстатки.СуммаРеглОстатокКт) 	КАК СуммаРеглКт,
	|   МАКСИМУМ(&ОсновнаяВалютаРегБух)				КАК ОсновнаяВалютаРегБух,
	|	СУММА(ТаблицаОстатки.СуммаОснОстатокДт) 	КАК СуммаОснДт,
	|	СУММА(ТаблицаОстатки.СуммаОснОстатокКт) 	КАК СуммаОснКт,
	|	ТаблицаОстатки.ВалютаВзаиморасчеты,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОстатки.ВалютнаяСуммаОстатокДт <> 0
	|				ТОГДА ТаблицаОстатки.ВалютнаяСуммаОстатокДт
	|			КОГДА ТаблицаОстатки.ВалютнаяСуммаОстатокКт <> 0
	|				ТОГДА ТаблицаОстатки.ВалютнаяСуммаОстатокКт			
	|			КОГДА ТаблицаОстатки.СуммаКт = 0
	|				ТОГДА ТаблицаОстатки.СуммаРеглОстатокДт
	|           ИНАЧЕ ТаблицаОстатки.СуммаРеглОстатокКт
	|		КОНЕЦ) КАК СуммаВзаиморасчеты
	|ИЗ
	|	ТаблицаОстатки2 КАК ТаблицаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатки.СчетРасчетов,
	|	ТаблицаОстатки.СчетРасчетов.Вид,
	|	ТаблицаОстатки.ЦФО,
	|	ТаблицаОстатки.СубконтоРасчетов_1,
	|	ТаблицаОстатки.СубконтоРасчетов_2,
	|	ТаблицаОстатки.СубконтоРасчетов_3,
	|	ТаблицаОстатки.СубконтоРасчетов_4,
	|	ТаблицаОстатки.ВалютаВзаиморасчеты,
	|	ТаблицаОстатки.ПодразделениеРасчетов
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОстатки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОстатки2
	|";
	
	Запрос.Текст = ТекстЗапроса;

	Результат = Запрос.Выполнить();

	Возврат Результат;

КонецФункции

// Функция формирует результат запроса по оборотам.
// 
// Параметры:
//  ЗаполняемыйСчетРасчетов - ПланСчетовСсылка.
//  
// Возвращаемое значение:
//   Результат выполнения запроса.
// 
&НаСервере
Функция ПолучитьРезультатЗапросаОбороты(ЗаполняемыйСчетРасчетов)

	ЭтотРегистр_Хоз = ИмяРегистраБухгалтерии = "Хозрасчетный";
	ЭтотРегистр_Бюд = ИмяРегистраБухгалтерии = "бит_Бюджетирование";
	ЭтотРегистр_МУ  = ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
	
	СтрокаСубконто4    	   = ?(фМаксКоличествоСубконто = 4, "РегистрБухОбороты.Субконто4", "NULL");
	СтрокаКорСубконто4     = ?(фМаксКоличествоСубконто = 4, "РегистрБухОбороты.КорСубконто4", "NULL");
	СтрокаДопУсловия 	   = ?(ЭтотРегистр_Бюд, "Организация = &Организация И Сценарий = &Сценарий", "Организация = &Организация");
	СтрокаПодразделение    = ?(ЭтотРегистр_Хоз, "ЕСТЬNULL(РегистрБухОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))", "NULL");
	СтрокаЦФО  			   = ?(ЭтотРегистр_Бюд, "РегистрБухОбороты.ЦФО", "NULL");
	СтрокаСуммаРегл 	   = ?(ЭтотРегистр_Хоз, "СуммаОборот", "СуммаРеглОборот");
	
	// Основная сумма по регистру бухгалтерии
	Если ЭтотРегистр_Хоз Тогда
		СтрокаСуммаОсн = "СуммаОборот"; // Хозрасчетный - валюта регламенированного учета.
		ОсновнаяВалютаРегБух = фКэшЗначений.ВалютаРеглУчета;
	ИначеЕсли ЭтотРегистр_МУ Тогда	
	    СтрокаСуммаОсн = "СуммаМУОборот"; // МСФО - валюта МСФО по организации
		ОсновнаяВалютаРегБух = фКэшЗначений.ВалютаМСФО;
	ИначеЕсли ЭтотРегистр_Бюд Тогда	
	    СтрокаСуммаОсн = "СуммаСценарийОборот"; // Бюджетирование - валюта по сценарию
		ОсновнаяВалютаРегБух = фКэшЗначений.ВалютаСценария;
	Иначе
		СтрокаСуммаОсн = "СуммаУпрОборот"; // Остальные регистры - упр.
		ОсновнаяВалютаРегБух = фКэшЗначений.ВалютаУпрлУчета;
	КонецЕсли;
	
	// Курс/Кратность на дату начала
	МножительВалютный = Объект.КурсДокументаСредний / Объект.КратностьДокументаСредняя; 
	
	Если Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты.Найти("РасчетыВУсловныхЕдиницах") <> Неопределено Тогда
		мРасчетыВУсловныхЕдиницах = "РасчетыВУсловныхЕдиницах";
	Иначе
		мРасчетыВУсловныхЕдиницах = "ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте)";
	КонецЕсли; 

	// ----------------------------------------------------------------------
	// Запрос
	Запрос = Новый Запрос;
	
	// Параметры запроса
	МассивСчетовРасчетов = ?(ЗаполняемыйСчетРасчетов = Неопределено, фКэшЗначений.МассивСчетовРасчетов, ЗаполняемыйСчетРасчетов);
	Запрос.УстановитьПараметр("МассивСчетовРасчетов"	, МассивСчетовРасчетов);
	Запрос.УстановитьПараметр("МассивСчетовОборотов"	, фКэшЗначений.МассивСчетовОборотов);
	Запрос.УстановитьПараметр("МассивСчетовОплаты"		, фКэшЗначений.МассивСчетовОплаты);
	Запрос.УстановитьПараметр("НачалоПериода"			, НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода"			, КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаДокумента"  			, Объект.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента"			, Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("Организация"  			, Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент"   			, Объект.Контрагент);
	Запрос.УстановитьПараметр("ОсновнаяВалютаРегБух"   	, ОсновнаяВалютаРегБух);
	Запрос.УстановитьПараметр("МножительВалютный"   	, МножительВалютный);
	Если ЭтотРегистр_Бюд Тогда
		Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	КонецЕсли;	
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты"  , ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрБухОбороты.Счет 										КАК СчетРасчетов,
	|	" + СтрокаЦФО + "											КАК ЦФО,
	|	" + СтрокаПодразделение + "									КАК Подразделение,
	|	РегистрБухОбороты.КорСчет,
	|	ЕСТЬNULL(РегистрБухОбороты." + СтрокаСуммаРегл + "Дт, 0) 	КАК СуммаРеглОборотДт,
	|	ЕСТЬNULL(РегистрБухОбороты." + СтрокаСуммаРегл + "Кт, 0) 	КАК СуммаРеглОборотКт,
	|	ЕСТЬNULL(РегистрБухОбороты." + СтрокаСуммаОсн + "Дт, 0) 	КАК СуммаОснОборотДт,
	|	ЕСТЬNULL(РегистрБухОбороты." + СтрокаСуммаОсн + "Кт, 0) 	КАК СуммаОснОборотКт,
	|	РегистрБухОбороты.Валюта,
	|	ЕСТЬNULL(РегистрБухОбороты.ВалютнаяСуммаОборотДт, 0) КАК ВалютнаяСуммаОборотДт,
	|	ЕСТЬNULL(РегистрБухОбороты.ВалютнаяСуммаОборотКт, 0) КАК ВалютнаяСуммаОборотКт,
	|	РегистрБухОбороты.Субконто1,
	|	РегистрБухОбороты.Субконто2,
	|	РегистрБухОбороты.Субконто3,
	|	" + СтрокаСубконто4 + "										КАК Субконто4,	
	|	РегистрБухОбороты.КорСубконто1,
	|	РегистрБухОбороты.КорСубконто2,
	|	РегистрБухОбороты.КорСубконто3,
	|	" + СтрокаКорСубконто4 + " 									КАК КорСубконто4,
	|	ВЫБОР
	|		КОГДА РегистрБухОбороты.Субконто1 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОбороты.Субконто1
	|		КОГДА РегистрБухОбороты.Субконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОбороты.Субконто2
	|		КОГДА РегистрБухОбороты.Субконто3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОбороты.Субконто3
	|		КОГДА " + СтрокаСубконто4 + " ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА " + СтрокаСубконто4 + "
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СубконтоРасчетовДоговор,
	|	ВЫБОР
	|		КОГДА РегистрБухОбороты.Субконто1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОбороты.Субконто1
	|		КОГДА РегистрБухОбороты.Субконто2 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОбороты.Субконто2
	|		КОГДА РегистрБухОбороты.Субконто3 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОбороты.Субконто3
	|		КОГДА " + СтрокаСубконто4 + " ССЫЛКА Справочник.Контрагенты
	|			ТОГДА " + СтрокаСубконто4 + "
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СубконтоРасчетовКонтрагент,	
	|	ВЫБОР
	|		КОГДА РегистрБухОбороты.КорСубконто1 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОбороты.КорСубконто1
	|		КОГДА РегистрБухОбороты.КорСубконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОбороты.КорСубконто2
	|		КОГДА РегистрБухОбороты.КорСубконто3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РегистрБухОбороты.КорСубконто3
	|		КОГДА " + СтрокаКорСубконто4 + " ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА " + СтрокаКорСубконто4 + "
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК СубконтоКорДоговор,
	|	ВЫБОР
	|		КОГДА РегистрБухОбороты.КорСубконто1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОбороты.КорСубконто1
	|		КОГДА РегистрБухОбороты.КорСубконто2 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОбороты.КорСубконто2
	|		КОГДА РегистрБухОбороты.КорСубконто3 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА РегистрБухОбороты.КорСубконто3
	|		КОГДА " + СтрокаКорСубконто4 + " ССЫЛКА Справочник.Контрагенты
	|			ТОГДА " + СтрокаКорСубконто4 + "
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ КАК СубконтоКорКонтрагент
	|ПОМЕСТИТЬ ТаблицаОбороты1
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".Обороты(&НачалоПериода, &КонецПериода, , Счет В (&МассивСчетовРасчетов), , " + СтрокаДопУсловия + ", КорСчет В (&МассивСчетовОборотов) ИЛИ КорСчет В (&МассивСчетовОплаты), ) КАК РегистрБухОбороты
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблРегистрБухОбороты.СчетРасчетов,
	|	ТаблРегистрБухОбороты.КорСчет,
	|	ТаблРегистрБухОбороты.ЦФО,
	|	ТаблРегистрБухОбороты.Подразделение КАК ПодразделениеРасчетов,
	|	ТаблРегистрБухОбороты.Субконто1		 	КАК СубконтоРасчетов_1,
	|	ТаблРегистрБухОбороты.Субконто2 		КАК СубконтоРасчетов_2,
	|	ТаблРегистрБухОбороты.Субконто3 		КАК СубконтоРасчетов_3,
	|	ТаблРегистрБухОбороты.Субконто4 		КАК СубконтоРасчетов_4,
	|	ТаблРегистрБухОбороты.КорСубконто1 		КАК СубконтоКор_1,
	|	ТаблРегистрБухОбороты.КорСубконто2 		КАК СубконтоКор_2,
	|	ТаблРегистрБухОбороты.КорСубконто3 		КАК СубконтоКор_3,
	|	ТаблРегистрБухОбороты.КорСубконто4 		КАК СубконтоКор_4,
	|	ТаблРегистрБухОбороты.СуммаРеглОборотДт,
	|	ТаблРегистрБухОбороты.СуммаРеглОборотКт,
	|	ТаблРегистрБухОбороты.СуммаОснОборотДт,
	|	ТаблРегистрБухОбороты.СуммаОснОборотКт,
	|	(ТаблРегистрБухОбороты.СуммаРеглОборотДт / &МножительВалютный) КАК СуммаДт,
	|	(ТаблРегистрБухОбороты.СуммаРеглОборотКт / &МножительВалютный) КАК СуммаКт,
	|	ТаблРегистрБухОбороты.ВалютнаяСуммаОборотДт,
	|	ТаблРегистрБухОбороты.ВалютнаяСуммаОборотКт,
	|	ВЫБОР
	|		КОГДА ТаблРегистрБухОбороты.СубконтоРасчетовДоговор ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблРегистрБухОбороты.СубконтоКорДоговор ЕСТЬ NULL 
	|							ИЛИ ТаблРегистрБухОбороты.СубконтоКорДоговор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|							ИЛИ ТаблРегистрБухОбороты.СубконтоКорДоговор." + мРасчетыВУсловныхЕдиницах + "
	|						ТОГДА Константы.ВалютаРегламентированногоУчета
	|					ИНАЧЕ ТаблРегистрБухОбороты.СубконтоКорДоговор.ВалютаВзаиморасчетов
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблРегистрБухОбороты.СубконтоРасчетовДоговор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|							ИЛИ ТаблРегистрБухОбороты.СубконтоКорДоговор." + мРасчетыВУсловныхЕдиницах + "
	|					ТОГДА Константы.ВалютаРегламентированногоУчета
	|				ИНАЧЕ ТаблРегистрБухОбороты.СубконтоРасчетовДоговор.ВалютаВзаиморасчетов
	|			КОНЕЦ
	|	КОНЕЦ КАК ВалютаВзаиморасчеты
	|ПОМЕСТИТЬ ТаблицаОбороты2
	|ИЗ
	|	Константы КАК Константы,
	|	ТаблицаОбороты1 КАК ТаблРегистрБухОбороты
	|ГДЕ
	|	ТаблРегистрБухОбороты.СубконтоРасчетовКонтрагент = &Контрагент
	|	И ТаблРегистрБухОбороты.СубконтоКорКонтрагент = &Контрагент
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбороты.СчетРасчетов,
	|	ТаблицаОбороты.СчетРасчетов.Вид КАК ВидСчетаРасчетов,
	|	ТаблицаОбороты.КорСчет,
	|	ТаблицаОбороты.ЦФО,
	|	ТаблицаОбороты.ПодразделениеРасчетов,
	|	ТаблицаОбороты.СубконтоРасчетов_1,
	|	ТаблицаОбороты.СубконтоРасчетов_2,
	|	ТаблицаОбороты.СубконтоРасчетов_3,
	|	ТаблицаОбороты.СубконтоРасчетов_4,
	|	ТаблицаОбороты.СубконтоКор_1,
	|	ТаблицаОбороты.СубконтоКор_2,
	|	ТаблицаОбороты.СубконтоКор_3,
	|	ТаблицаОбороты.СубконтоКор_4,
	|	СУММА(ТаблицаОбороты.СуммаРеглОборотДт) КАК СуммаРеглДт,
	|	СУММА(ТаблицаОбороты.СуммаРеглОборотКт) КАК СуммаРеглКт,
	|   МАКСИМУМ(&ОсновнаяВалютаРегБух)			КАК ОсновнаяВалютаРегБух,
	|	СУММА(ТаблицаОбороты.СуммаОснОборотДт)	КАК СуммаОснДт,
	|	СУММА(ТаблицаОбороты.СуммаОснОборотКт) 	КАК СуммаОснКт,
	|	СУММА(ТаблицаОбороты.СуммаДт) 			КАК СуммаДт,
	|	СУММА(ТаблицаОбороты.СуммаКт) 			КАК СуммаКт,
	|	ТаблицаОбороты.ВалютаВзаиморасчеты,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаОбороты.ВалютнаяСуммаОборотДт = 0
	|				ТОГДА ТаблицаОбороты.СуммаРеглОборотДт 
	|			ИНАЧЕ ТаблицаОбороты.ВалютнаяСуммаОборотДт
	|		КОНЕЦ) КАК СуммаВзаиморасчетыДт,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаОбороты.ВалютнаяСуммаОборотКт = 0
	|				ТОГДА ТаблицаОбороты.СуммаРеглОборотКт 
	|			ИНАЧЕ ТаблицаОбороты.ВалютнаяСуммаОборотКт
	|		КОНЕЦ) КАК СуммаВзаиморасчетыКт,
	| 	0 КАК СуммаВзаиморасчеты
	|ИЗ
	|	ТаблицаОбороты2 КАК ТаблицаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбороты.СчетРасчетов,
	|	ТаблицаОбороты.СчетРасчетов.Вид,
	|	ТаблицаОбороты.КорСчет,
	|	ТаблицаОбороты.ЦФО,
	|	ТаблицаОбороты.ПодразделениеРасчетов,
	|	ТаблицаОбороты.СубконтоРасчетов_1,
	|	ТаблицаОбороты.СубконтоРасчетов_2,
	|	ТаблицаОбороты.СубконтоРасчетов_3,
	|	ТаблицаОбороты.СубконтоРасчетов_4,	
	|	ТаблицаОбороты.СубконтоКор_1,
	|	ТаблицаОбороты.СубконтоКор_2,
	|	ТаблицаОбороты.СубконтоКор_3,
	|	ТаблицаОбороты.СубконтоКор_4,
	|	ТаблицаОбороты.ВалютаВзаиморасчеты
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОбороты1
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОбороты2
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции // ПолучитьРезультатЗапросаОбороты()

// Функция получает строку аналитик, которые нужно выбирать.
// 
// Параметры:
//  ТекСчет   - ПланСчетовСсылка
//  ТипаСчета - Строка.
//  
// Возвращаемое значение:
//   Строка.
// 
&НаСервере
Функция ПолучитьСтрокуДоступныхАналитик(ТекСчет, ТипаСчета)

	СтрокаАналитик = Неопределено;
	ИмяСубконто = ?(ТипаСчета = "ЭтоСчетРасчетов", "СубконтоРасчетов_", "СубконтоКор_");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаАктаСверки", Объект.НастройкаАктаСверки);
	Запрос.УстановитьПараметр("Счет"			   , ТекСчет);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаПоНастройке.Счет,
	|	МАКСИМУМ(СчетаПоНастройке.ЭтоСчетРасчетов) КАК ЭтоСчетРасчетов,
	|	МАКСИМУМ(СчетаПоНастройке.ЭтоСчетОборотов) КАК ЭтоСчетОборотов,
	|	МАКСИМУМ(СчетаПоНастройке.ЭтоСчетОплаты)   КАК ЭтоСчетОплаты,
	|	МАКСИМУМ(СчетаПоНастройке.РазрешеноВыбиратьСубконто_1) КАК РазрешеноВыбиратьСубконто_1,
	|	МАКСИМУМ(СчетаПоНастройке.РазрешеноВыбиратьСубконто_2) КАК РазрешеноВыбиратьСубконто_2,
	|	МАКСИМУМ(СчетаПоНастройке.РазрешеноВыбиратьСубконто_3) КАК РазрешеноВыбиратьСубконто_3,
	|	МАКСИМУМ(СчетаПоНастройке.РазрешеноВыбиратьСубконто_4) КАК РазрешеноВыбиратьСубконто_4,
	|	МАКСИМУМ(СчетаПоНастройке.ПроверкаЗаполненияСубконто_1) КАК ПроверкаЗаполненияСубконто_1,
	|	МАКСИМУМ(СчетаПоНастройке.ПроверкаЗаполненияСубконто_2) КАК ПроверкаЗаполненияСубконто_2,
	|	МАКСИМУМ(СчетаПоНастройке.ПроверкаЗаполненияСубконто_3) КАК ПроверкаЗаполненияСубконто_3,
	|	МАКСИМУМ(СчетаПоНастройке.ПроверкаЗаполненияСубконто_4) КАК ПроверкаЗаполненияСубконто_4
	|ИЗ
	|	Справочник.бит_вго_НастройкиАктовСверкиВГО.Счета КАК СчетаПоНастройке
	|ГДЕ
	|	СчетаПоНастройке.Ссылка = &НастройкаАктаСверки 
	|	И СчетаПоНастройке.Счет = &Счет
	|	И СчетаПоНастройке." + ТипаСчета + " = Истина
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаПоНастройке.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаПоНастройке.Счет
	|";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		СтрокаАналитик = "";
		
	    Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Для i = 1 По фКоличествоСубконто Цикл
			
			НомерСтрокой = Строка(i);
			Если Выборка["РазрешеноВыбиратьСубконто_" + НомерСтрокой] Тогда
				СтрокаАналитик = СтрокаАналитик + "," + ИмяСубконто + НомерСтрокой;		
			КонецЕсли;                                                 			
		
		КонецЦикла;
	
	КонецЕсли;

	Возврат СтрокаАналитик;
	
КонецФункции


// Процедура очистки раздела в дереве.
// 
// Параметры:
//  СтрокаРаздел  - ДанныеФормыЭлементаДерева.
// 
&НаСервере
Процедура ОчиститьРаздел(СтрокаРаздел)

	СтрокаРаздел.ПолучитьЭлементы().Очистить();
	
	НайденныеСтроки = Объект.Проводки.НайтиСтроки(Новый Структура("СчетРасчетов, Раздел", СтрокаРаздел.СчетРасчетов, СтрокаРаздел.Раздел));
	Для каждого СтрокаДляУдаления Из НайденныеСтроки Цикл
		Объект.Проводки.Удалить(СтрокаДляУдаления);				
	КонецЦикла;	

КонецПроцедуры // ОчиститьРаздел()

// Процедура заполняет табличную часть и дерево по настройке.
// 
// Параметры:
//  ТипЗаполнения  				- Строка
//  ЗаполняемыйСчетРасчетов 	- ПланСчетовСсылка.*** (По умолчанию = Неопределено)
//  ПересчитыватьИтоги 			- Булево (По умолчанию = Истина)
//  МассивИдГруппСчетовРасчетов - Массив (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ЗаполнитьДеревоПоНастройкеСервер(ТипЗаполнения, ЗаполняемыйСчетРасчетов = Неопределено, ПересчитыватьИтоги = Истина, МассивИдГруппСчетовРасчетов = Неопределено)

	Если Не ЗначениеЗаполнено(Объект.НастройкаАктаСверки) Тогда
		Возврат;	
	КонецЕсли;
	Если фКэшЗначений.МассивСчетовРасчетов.Количество() = 0 Тогда
	 	Возврат;
	КонецЕсли;
		
	
	// ----------------------------------------------------------------------
	// Выбор операции
	
	Если ТипЗаполнения = "ШаблонГрупп" Тогда	
		
		// Очистка дерева
		ОчиститьДеревоИТабличнуюЧасть();
				
		// Заполнение шаблона
		Для каждого ЭлементСчет Из фКэшЗначений.МассивСчетовРасчетов Цикл
			ИдГруппыСчетРасчетов = ДеревоДобавитьГруппуПоСчетуРасчетовСервер(ЭлементСчет);
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли ТипЗаполнения = "Остатки" ИЛИ ТипЗаполнения = "Обороты" Тогда
		
		// Массив ИД блоков 
		Если МассивИдГруппСчетовРасчетов = Неопределено Тогда
			МассивИдГруппСчетовРасчетов = Новый Массив;
		КонецЕсли;
	
		// Соответствие ИД счетов расчетов
		СоответствиеИдСчетовРасчетов = Новый Соответствие;
		Для каждого СтрокаБлока Из ДеревоСверкиВГО.ПолучитьЭлементы() Цикл
			СоответствиеИдСчетовРасчетов.Вставить(СтрокаБлока.СчетРасчетов, СтрокаБлока.ПолучитьИдентификатор());	
		КонецЦикла;
		
		// Вспомогательные строки для поиска данных
		СтрокаРесурсов 		  = "СуммаДт, СуммаКт, СуммаРеглДт, СуммаРеглКт, СуммаОснДт, СуммаОснКт, СуммаВзаиморасчеты";
		СтрокаОбщихРеквизитов = "СчетРасчетов, ВидСчетаРасчетов, ЦФО, ПодразделениеРасчетов, ВалютаВзаиморасчеты, ОсновнаяВалютаРегБух";
					
	ИначеЕсли ТипЗаполнения = "Все" Тогда
		
		Если ЗаполняемыйСчетРасчетов = Неопределено Тогда
        	ЗаполнитьДеревоПоНастройкеСервер("ШаблонГрупп", , Ложь  , МассивИдГруппСчетовРасчетов);
  	 	КонецЕсли;			
			
		ЗаполнитьДеревоПоНастройкеСервер("Остатки", ЗаполняемыйСчетРасчетов, Ложь  , МассивИдГруппСчетовРасчетов);
		ЗаполнитьДеревоПоНастройкеСервер("Обороты", ЗаполняемыйСчетРасчетов, Истина, МассивИдГруппСчетовРасчетов);
		
		Возврат;
		
	Иначе
		
		Возврат;
	
	КонецЕсли;
	
	
	// ----------------------------------------------------------------------
	// Остатки
		
	Если ТипЗаполнения = "Остатки" Тогда
		
		Результат = ПолучитьРезультатЗапросаОстатки(ЗаполняемыйСчетРасчетов);
		
		ТаблицаДанных = Результат.Выгрузить();
		ТаблицаСчетов = ТаблицаДанных.Скопировать(, "СчетРасчетов");
		ТаблицаСчетов.Свернуть("СчетРасчетов");
		ТаблицаСчетов.Сортировать("СчетРасчетов");
		Если ТаблицаСчетов.Количество() Тогда		
			Модифицированность = Истина;		
		КонецЕсли;
		
		Для каждого СтрокаСчетРасчетов Из ТаблицаСчетов Цикл
					
			ИдГруппыСчетРасчетов = Неопределено;
			ТекСчетРасчетов  = СтрокаСчетРасчетов.СчетРасчетов;
			ВидСчетаРасчетов = ТекСчетРасчетов.Вид; 
			
			СтрокаДоступныхАналитик = ПолучитьСтрокуДоступныхАналитик(ТекСчетРасчетов, "ЭтоСчетРасчетов");
			Если СтрокаДоступныхАналитик = Неопределено Тогда
				Продолжить;			
			КонецЕсли;
			СтрокаСвернутьПо = СтрокаОбщихРеквизитов + СтрокаДоступныхАналитик;
							
			ИдГруппыСчетРасчетов = СоответствиеИдСчетовРасчетов.Получить(ТекСчетРасчетов);
			Если ИдГруппыСчетРасчетов = Неопределено Тогда
				ИдГруппыСчетРасчетов = ДеревоДобавитьГруппуПоСчетуРасчетовСервер(ТекСчетРасчетов);
			КонецЕсли;		
			
			СтрокаДереваСчетаРасчета = ДеревоСверкиВГО.НайтиПоИдентификатору(ИдГруппыСчетРасчетов);
			Для каждого СтрокаРаздел Из СтрокаДереваСчетаРасчета.ПолучитьЭлементы() Цикл
				
				// Очистка старых начальных остатков
				ОчиститьРаздел(СтрокаРаздел);
				
				// Заполнение начальных остатков
				НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("СчетРасчетов", ТекСчетРасчетов));
				ТаблицаПоВыборке = ТаблицаДанных.Скопировать(НайденныеСтроки);
				ТаблицаПоВыборке.Свернуть(СтрокаСвернутьПо, СтрокаРесурсов);
				
				Для каждого СтрокаТаблицы Из ТаблицаПоВыборке Цикл
					ИдНовойСтроки = ДобавитьСтрокуКорСчета(Ложь, СтрокаРаздел.ПолучитьИдентификатор(), , СтрокаТаблицы);				
				КонецЦикла;										
										
				Прервать; // Только входящее сальдо
			КонецЦикла;
			
			Если МассивИдГруппСчетовРасчетов.Найти(ИдГруппыСчетРасчетов) = Неопределено Тогда
				МассивИдГруппСчетовРасчетов.Добавить(ИдГруппыСчетРасчетов);
			КонецЕсли;			
					
		КонецЦикла;		
		
	КонецЕсли;
	
	
	// ----------------------------------------------------------------------
	// Обороты
	
	Если ТипЗаполнения = "Обороты" Тогда
		
		Результат = ПолучитьРезультатЗапросаОбороты(ЗаполняемыйСчетРасчетов);
		
		СтрокаРесурсов = СтрокаРесурсов + ", СуммаВзаиморасчетыДт, СуммаВзаиморасчетыКт";
				
		ТаблицаДанных = Результат.Выгрузить();
		ТаблицаСчетов = ТаблицаДанных.Скопировать(, "СчетРасчетов");
		ТаблицаСчетов.Свернуть("СчетРасчетов");
		ТаблицаСчетов.Сортировать("СчетРасчетов");
		Если ТаблицаСчетов.Количество() Тогда		
			Модифицированность = Истина;		
		КонецЕсли;
				
		Для каждого СтрокаСчетРасчетов Из ТаблицаСчетов Цикл
					
			ИдГруппыСчетРасчетов = Неопределено;
			ТекСчетРасчетов = СтрокаСчетРасчетов.СчетРасчетов;
			
			СтрокаДоступныхАналитик = ПолучитьСтрокуДоступныхАналитик(ТекСчетРасчетов, "ЭтоСчетРасчетов");
			Если СтрокаДоступныхАналитик = Неопределено Тогда
				Продолжить;			
			КонецЕсли;
			СтрокаСвернутьПо = СтрокаОбщихРеквизитов + ", КорСчет, ОперацияВГО" + СтрокаДоступныхАналитик;
			
			ИдГруппыСчетРасчетов = СоответствиеИдСчетовРасчетов.Получить(ТекСчетРасчетов);
			Если ИдГруппыСчетРасчетов = Неопределено Тогда
				ИдГруппыСчетРасчетов = ДеревоДобавитьГруппуПоСчетуРасчетовСервер(ТекСчетРасчетов);
			КонецЕсли;
						
			СтрокаДереваСчетаРасчета = ДеревоСверкиВГО.НайтиПоИдентификатору(ИдГруппыСчетРасчетов);
			Для каждого СтрокаРаздел Из СтрокаДереваСчетаРасчета.ПолучитьЭлементы() Цикл
				
				Если СтрокаРаздел.Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов Тогда
					ИдГруппыСтрокиОбороты = СтрокаРаздел.ПолучитьИдентификатор();
				ИначеЕсли СтрокаРаздел.Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ДанныеОбОплате Тогда
					ИдГруппыСтрокиОплаты  = СтрокаРаздел.ПолучитьИдентификатор();
				Иначе
					Продолжить;				
				КонецЕсли;
				
				// Очистка старых оборотов
				ОчиститьРаздел(СтрокаРаздел);
				
			КонецЦикла;	
			
			// Поиск строк по счету, кор счету расчетов и аналитикам счета расчетов.
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("СчетРасчетов", ТекСчетРасчетов));
			ТаблицаПоСчетуРасчетов = ТаблицаДанных.Скопировать(НайденныеСтроки);
			ТаблицаПоСчетуРасчетов.Колонки.Добавить("ОперацияВГО");
			ТаблицаСчетовКор = ТаблицаПоСчетуРасчетов.Скопировать(, "КорСчет");
			ТаблицаСчетовКор.Свернуть("КорСчет");
			ТаблицаСчетовКор.Сортировать("КорСчет");
						
			Для каждого СтрокаСчетКор Из ТаблицаСчетовКор Цикл
				
				ТекСчетКор = СтрокаСчетКор.КорСчет;
				ЭтоСчетОборотов = фКэшЗначений.МассивСчетовОборотов.Найти(ТекСчетКор) <> Неопределено;
				ЭтоСчетОплаты   = фКэшЗначений.МассивСчетовОплаты.Найти(ТекСчетКор) <> Неопределено;
				
				ТипСчета = ?(ЭтоСчетОборотов, "ЭтоСчетОборотов", "ЭтоСчетОплаты");
				СтрокаДоступныхАналитик = ПолучитьСтрокуДоступныхАналитик(ТекСчетКор, ТипСчета);
				Если СтрокаДоступныхАналитик = Неопределено Тогда
					Продолжить;			
				КонецЕсли;
									
				НайденныеСтроки = ТаблицаПоСчетуРасчетов.НайтиСтроки(Новый Структура("КорСчет", ТекСчетКор));
				ТаблицаПоВыборке = ТаблицаПоСчетуРасчетов.Скопировать(НайденныеСтроки);
				ТаблицаПоВыборке.Свернуть(СтрокаСвернутьПо + СтрокаДоступныхАналитик, СтрокаРесурсов);
				
				Для каждого СтрокаТаблицы Из ТаблицаПоВыборке Цикл
					// УстановитьДанныеПоПравиламТрансляции(СтрокаТаблицы);
					ДобавитьСтрокиКорСчетаПоОборотам(СтрокаТаблицы, Ложь, ?(ЭтоСчетОборотов, ИдГруппыСтрокиОбороты, ИдГруппыСтрокиОплаты), , СтрокаТаблицы);
				КонецЦикла; 					
		
			КонецЦикла;
							
			Если МассивИдГруппСчетовРасчетов.Найти(ИдГруппыСчетРасчетов) = Неопределено Тогда
				МассивИдГруппСчетовРасчетов.Добавить(ИдГруппыСчетРасчетов);
			КонецЕсли;	
			
		КонецЦикла;		
		
	КонецЕсли;
	
	
	// ----------------------------------------------------------------------
	// Пересчет конечного сальдо
	
	Если ПересчитыватьИтоги Тогда
		ПересчитатьИтоги();
		Для каждого ИдГруппыСчетРасчетов Из МассивИдГруппСчетовРасчетов Цикл
			ПересчитатьКонечноеСальдоПоСчетуРасчетов(ИдГруппыСчетРасчетов);	
		КонецЦикла;
		ПересчитатьОбщиеОстаткиСервер();
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьДеревоПоНастройкеСервер()
  
#КонецОбласти

#Область СерверныеПроцедурыИФункцииСинхронизацииДанныхДереваИТабличнойЧасти

// Процедура синхронизирует данные дерева на форме и табличной части.
// 
// Параметры:
//  Идентификатор  - Число
// 
&НаСервере
Процедура СинхронизироватьДанныеДереваИТабличнойЧастиДляСтроки(Идентификатор)

	ТекДанныеДерева = ДеревоСверкиВГО.НайтиПоИдентификатору(Идентификатор);
	
	СтрокиТаблЧасти = Объект.Проводки.НайтиСтроки(Новый Структура("УникальныйИдСтрокиТч", ТекДанныеДерева.УникальныйИдСтрокиТч));
	Если СтрокиТаблЧасти.Количество() > 0 Тогда
		СтрокаТаблЧасти = СтрокиТаблЧасти[0];
		ЗаполнитьЗначенияСвойств(СтрокаТаблЧасти, ТекДанныеДерева);	
	КонецЕсли;	
	
КонецПроцедуры // СинхронизироватьДанныеДереваИТабличнойЧастиДляСтроки()

// Процедура синхронизирует данные табличной части и дерева на форме.
// 
// Параметры:
//  СписокРеквизитов - Строка (По умолчанию = Неопределено).
// 
&НаСервере
Процедура СинхронизироватьДанныеТабличнойЧастиИДерева(СписокРеквизитов = Неопределено)

	Для каждого СтрокаСчет Из ДеревоСверкиВГО.ПолучитьЭлементы() Цикл
		Для каждого СтрокаРаздел Из СтрокаСчет.ПолучитьЭлементы() Цикл
			Для каждого СтрокаДерева Из СтрокаРаздел.ПолучитьЭлементы() Цикл
			
				СтрокиТаблЧасти = Объект.Проводки.НайтиСтроки(Новый Структура("УникальныйИдСтрокиТч", СтрокаДерева.УникальныйИдСтрокиТч));
				Если СтрокиТаблЧасти.Количество() > 0 Тогда
			
					СтрокаТаблЧасти = СтрокиТаблЧасти[0];
					Если СписокРеквизитов = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблЧасти);
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблЧасти, СписокРеквизитов);					
					КонецЕсли;
															
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;			
	КонецЦикла;	
	
КонецПроцедуры // СинхронизироватьДанныеТабличнойЧастиИДерева()

// Функция добавляет группу по счету расчетов.
// 
// Параметры:
//  ТекВыбранныйСчет - ПланСчетовСсылка.
// 
// Возвращаемое значение: 
//  Число.
// 
&НаСервере
Функция ДеревоДобавитьГруппуПоСчетуРасчетовСервер(ТекВыбранныйСчет)
	
	КореньДерева = ДеревоСверкиВГО.ПолучитьЭлементы();
	
	РазделСчетРасчетов = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.СчетРасчетов;
	ВидСчетаРасчетов   = ТекВыбранныйСчет.Вид;
	
	СтрокаСчет = КореньДерева.Добавить();
	СтрокаСчет.Раздел 	    	= РазделСчетРасчетов;
	СтрокаСчет.ЭтоГруппа 		= Истина;
	СтрокаСчет.СчетРасчетов 	= ТекВыбранныйСчет;
	СтрокаСчет.Группа       	= ТекВыбранныйСчет;
	СтрокаСчет.ВидСчетаРасчетов = ВидСчетаРасчетов;
	
	
	ИдГруппыСчетРасчетов = СтрокаСчет.ПолучитьИдентификатор();
	ВеткаСчетРасчетов 	 = СтрокаСчет.ПолучитьЭлементы();
	
	Для каждого ТекущийРаздел Из фКэшЗначений.МассивРазделовДляТч Цикл
			
		// Вывод разделов
		СтрокаРаздел = ВеткаСчетРасчетов.Добавить();
		СтрокаРаздел.Раздел    			  = ТекущийРаздел;
		СтрокаРаздел.ЭтоГруппа 			  = Истина;
		СтрокаРаздел.Группа	   			  = ТекущийРаздел;
		СтрокаРаздел.ИдГруппыСчетРасчетов = ИдГруппыСчетРасчетов;
		СтрокаРаздел.СчетРасчетов		  = ТекВыбранныйСчет;
		СтрокаРаздел.ВидСчетаРасчетов 	  = ВидСчетаРасчетов;

	КонецЦикла;			
	
	УстановитьПараметрыОформленияПоСчету(СтрокаСчет.ПолучитьИдентификатор(), "СчетРасчетов");
	
	Возврат ИдГруппыСчетРасчетов;
	 	
КонецФункции // ДеревоДобавитьГруппуПоСчетуРасчетовСервер()

// Процедура добавляет строку кор. счета.
// 
// Параметры:
//  СтрокаТаблицы	  - ДанныеФормыЭлементКоллекции
//  ЭтоКопирование    - Булево
//  ТекИдентификатор  - Число
//  ТекВыбранныйСчет  - ПланСчетовСсылка.*** (По умолчанию = Неопределено)
//  ДопДанные		  - Строка таблицы значений (По умолчанию = Неопределено).
// 
// Возвращаемое значение:
//   Число - идентификатор новой строки.
// 
&НаСервере
Процедура ДобавитьСтрокиКорСчетаПоОборотам(СтрокаТаблицы, ЭтоКопирование, ТекИдентификатор, ТекВыбранныйСчет = Неопределено, ДопДанные = Неопределено)

	СуммаКтТемп 	= СтрокаТаблицы.СуммаКт;
	СуммаРеглКтТемп = СтрокаТаблицы.СуммаРеглКт;
	СуммаОснКтТемп  = СтрокаТаблицы.СуммаОснКт;
	                                  		
	Если СтрокаТаблицы.СуммаДт <> 0 Тогда
		
		СтрокаТаблицы.СуммаКт 			 = 0;
		СтрокаТаблицы.СуммаРеглКт 		 = 0;
		СтрокаТаблицы.СуммаОснКт         = 0;
		СтрокаТаблицы.СуммаВзаиморасчеты = СтрокаТаблицы.СуммаВзаиморасчетыДт;
		
		УстановитьДанныеПоПравиламТрансляции(СтрокаТаблицы);
		ИдНовойСтроки = ДобавитьСтрокуКорСчета(Ложь, ТекИдентификатор, , СтрокаТаблицы);
		       	
	КонецЕсли;
	
	Если СуммаКтТемп <> 0 Тогда
	
		СтрокаТаблицы.СуммаКт 			 = СуммаКтТемп;
		СтрокаТаблицы.СуммаРеглКт 		 = СуммаРеглКтТемп;
		СтрокаТаблицы.СуммаОснКт         = СуммаОснКтТемп;
		СтрокаТаблицы.СуммаДт 			 = 0;
		СтрокаТаблицы.СуммаРеглДт 		 = 0;
		СтрокаТаблицы.СуммаОснДт         = 0;
		СтрокаТаблицы.СуммаВзаиморасчеты = СтрокаТаблицы.СуммаВзаиморасчетыКт;
		
		УстановитьДанныеПоПравиламТрансляции(СтрокаТаблицы);
		ИдНовойСтроки = ДобавитьСтрокуКорСчета(Ложь, ТекИдентификатор, , СтрокаТаблицы);
	
	КонецЕсли;
 							
КонецПроцедуры // ДобавитьСтрокиКорСчетаПоОборотам()
	
// Процедура добавляет строку кор. счета.
// 
// Параметры:
//  ЭтоКопирование    - Булево
//  ТекИдентификатор  - Число
//  ТекВыбранныйСчет  - ПланСчетовСсылка.*** (По умолчанию = Неопределено)
//  ДопДанные		  - Строка таблицы значений (По умолчанию = Неопределено).
// 
// Возвращаемое значение:
//   Число - идентификатор новой строки.
// 
&НаСервере
Функция ДобавитьСтрокуКорСчета(ЭтоКопирование, ТекИдентификатор, ТекВыбранныйСчет = Неопределено, ДопДанные = Неопределено)

	ТекДанныеДерева = ДеревоСверкиВГО.НайтиПоИдентификатору(ТекИдентификатор);
   	
	Если ЭтоКопирование Тогда // Копирование
		
		// Добавление новой строки в группу = группа текущей строки.
		СтрокаГруппаДерева = ДеревоСверкиВГО.НайтиПоИдентификатору(ТекДанныеДерева.ИдГруппыРаздела);
		ВеткаДерева = СтрокаГруппаДерева.ПолучитьЭлементы();
		НоваяСтрока = ВеткаДерева.Добавить();
		
		// Синхронизация с табличной частью		
		СтрокаТаблЧасти = Объект.Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблЧасти, ТекДанныеДерева);
						
		// Заполнение данными
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанныеДерева);
					
	Иначе // Добавление
		
		// Добавление новой строки в группу = текущая строка.
		ВеткаДерева = ТекДанныеДерева.ПолучитьЭлементы();
		НоваяСтрока = ВеткаДерева.Добавить();
		
		
		// Синхронизация с табличной частью		
		СтрокаТаблЧасти = Объект.Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблЧасти, ТекДанныеДерева, "Раздел, СчетРасчетов");
		
		СтрокаТаблЧасти.ВалютаВзаиморасчеты = Объект.ВалютаДокумента;
				
		Если ТекВыбранныйСчет <> Неопределено Тогда
			СтрокаТаблЧасти.КорСчет = ТекВыбранныйСчет;
		КонецЕсли;
		Если ДопДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблЧасти, ДопДанные);
			Если Объект.ВалютаДокумента = ДопДанные.ОсновнаяВалютаРегБух Тогда
				СтрокаТаблЧасти.СуммаДт = ДопДанные.СуммаОснДт;
				СтрокаТаблЧасти.СуммаКт = ДопДанные.СуммаОснКт;
			ИначеЕсли Объект.ВалютаДокумента = ДопДанные.ВалютаВзаиморасчеты Тогда
				СтрокаТаблЧасти.СуммаДт = ?(СтрокаТаблЧасти.СуммаДт = 0, 0, ДопДанные.СуммаВзаиморасчеты);
				СтрокаТаблЧасти.СуммаКт = ?(СтрокаТаблЧасти.СуммаКт = 0, 0, ДопДанные.СуммаВзаиморасчеты);
			ИначеЕсли Объект.ВалютаДокумента = фКэшЗначений.ВалютаРеглУчета Тогда
				СтрокаТаблЧасти.СуммаДт = ДопДанные.СуммаРеглДт;
				СтрокаТаблЧасти.СуммаКт = ДопДанные.СуммаРеглКт;					
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение данными
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблЧасти);
		НоваяСтрока.ИдГруппыСчетРасчетов = ТекДанныеДерева.ИдГруппыСчетРасчетов;
		НоваяСтрока.ИдГруппыРаздела 	 = ТекДанныеДерева.ПолучитьИдентификатор();		
		НоваяСтрока.Группа 				 = НоваяСтрока.КорСчет;
		НоваяСтрока.ВидСчетаРасчетов 	 = ТекДанныеДерева.ВидСчетаРасчетов;
		          	
	КонецЕсли;
	
	СтрокаТаблЧасти.УникальныйИдСтрокиТч = Строка(Новый УникальныйИдентификатор);
	НоваяСтрока.УникальныйИдСтрокиТч 	 = СтрокаТаблЧасти.УникальныйИдСтрокиТч;
	
	// Операция ВГО
	Если НоваяСтрока.Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ВходящееСальдо Тогда
		НоваяСтрока.ОперацияВГО = Справочники.бит_вго_ОперацииВГО.НачальноеСальдо;
	КонецЕсли;
	
	// Ид новой строки
	ИдентификаторНовойСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	// Оформление
	ОбработатьСубконтоПоСчету(ИдентификаторНовойСтроки, "СубконтоРасчетов_", "СчетРасчетов");
		
	Если ДопДанные = Неопределено Тогда
		ПересчитатьИтоги(НоваяСтрока.ИдГруппыРаздела);
		ПересчитатьКонечноеСальдоПоСчетуРасчетов(НоваяСтрока.ИдГруппыСчетРасчетов);
		ПересчитатьОбщиеОстаткиСервер();
		Если ТекВыбранныйСчет <> Неопределено Тогда
			ОбработатьСубконтоПоСчету(ИдентификаторНовойСтроки, "СубконтоКор_", "КорСчет");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ОперацияВГО) Тогда
		Если (НоваяСтрока.Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов
			И НоваяСтрока.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.ПогашениеЗадолженности) 
			ИЛИ (НоваяСтрока.Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ДанныеОбОплате
				И (НоваяСтрока.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности
					ИЛИ НоваяСтрока.ОперацияВГО.ВидОперации = Перечисления.бит_вго_ВидыОперацийВГО.Техническая)) Тогда
			НоваяСтрока.ОперацияВГО = Неопределено;						
		КонецЕсли;					
	КонецЕсли;

	Возврат ИдентификаторНовойСтроки;
	
КонецФункции // ДобавитьСтрокуКорСчета()

// Процедура удаляет строку из табличной части.
// 
// Параметры:
//  УникальныйИдСтрокиТч - Строка
//  ИдДерСчРасч 		 - Число (По умолчанию = Неопределено)
//  ИдСтрРаздела 		 - Число (По умолчанию = Неопределено).
// 
&НаСервере
Процедура УдалитьСтрокуТабличнойЧасти(УникальныйИдСтрокиТч, ИдДерСчРасч = Неопределено, ИдСтрРаздела = Неопределено)

	СтрокиТаблЧасти = Объект.Проводки.НайтиСтроки(Новый Структура("УникальныйИдСтрокиТч", УникальныйИдСтрокиТч));
	Если СтрокиТаблЧасти.Количество() > 0 Тогда
		
		СтрокаТаблЧасти = СтрокиТаблЧасти[0];
		
		Если ИдСтрРаздела <> Неопределено Тогда
			ПересчитатьИтоги(ИдСтрРаздела, СтрокаТаблЧасти.СуммаДт, СтрокаТаблЧасти.СуммаКт);
		КонецЕсли;

		Объект.Проводки.Удалить(СтрокаТаблЧасти);
		
		Если ИдДерСчРасч <> Неопределено Тогда
			ПересчитатьКонечноеСальдоПоСчетуРасчетов(ИдДерСчРасч);			
		КонецЕсли;		
					
	КонецЕсли;
	
	ПересчитатьОбщиеОстаткиСервер();

КонецПроцедуры // УдалитьСтрокуТабличнойЧасти()
                           
// Процедура удаляет строки из табличной части по счету расчетов.
// 
// Параметры:
//  Идентификатор  - Число
// 
&НаСервере
Процедура УдалитьСтрокиТабличнойЧастиПоСчетуРасчетов(Идентификатор)

	ТекДанныеДерева = ДеревоСверкиВГО.НайтиПоИдентификатору(Идентификатор);
	
	Для каждого СтрокаРаздел Из ТекДанныеДерева.ПолучитьЭлементы() Цикл
		Для каждого СтрокаДерева Из СтрокаРаздел.ПолучитьЭлементы() Цикл 			
			УдалитьСтрокуТабличнойЧасти(СтрокаДерева.УникальныйИдСтрокиТч); 			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиТабличнойЧастиПоСчетуРасчетов()

// Процедура пересчитывает конечное сальдо по счету расчетов.
// 
// Параметры:
//  ИдГруппыСчетРасчетов - Чичло
// 
&НаСервере
Процедура ПересчитатьКонечноеСальдоПоСчетуРасчетов(ИдГруппыСчетРасчетов)
	
	СтрокаГруппаДерева_СчетРасчетов = ДеревоСверкиВГО.НайтиПоИдентификатору(ИдГруппыСчетРасчетов);
	СчетРасчетов = СтрокаГруппаДерева_СчетРасчетов.СчетРасчетов;
	Если Не ЗначениеЗаполнено(СтрокаГруппаДерева_СчетРасчетов.СчетРасчетов) Тогда
		Возврат;	
	КонецЕсли;
	
	// Обращение к модулю объекта
	// Пересчет конечного сальдо в табличной части.
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	МассивУникальныхИдСтрок = ДокументОбъект.ПересчитатьКонечноеСальдоПоСчетуРасчетовДляТч(СчетРасчетов);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	ВеткаДерева = СтрокаГруппаДерева_СчетРасчетов.ПолучитьЭлементы();
	
	СтрокаКонечноеСальдо = ВеткаДерева.Получить(фПорядокКонечногоСальдо);
	ИдГруппыКонечноеСальдо = СтрокаКонечноеСальдо.ПолучитьИдентификатор();
	ВеткаКонечноеСальдо = СтрокаКонечноеСальдо.ПолучитьЭлементы();
	ВеткаКонечноеСальдо.Очистить();
	
	СуммаДтИтог = 0;
	СуммаКтИтог = 0;
		
	Для каждого УникальныйИдСтрокиТч Из МассивУникальныхИдСтрок Цикл
		
		СтрокиТаблЧасти = Объект.Проводки.НайтиСтроки(Новый Структура("УникальныйИдСтрокиТч", УникальныйИдСтрокиТч));
		Если СтрокиТаблЧасти.Количество() > 0 Тогда
			
			СтрокаТч = СтрокиТаблЧасти[0];		
					
			НоваяСтрокаДерева = ВеткаКонечноеСальдо.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаТч);
			НоваяСтрокаДерева.ИдГруппыСчетРасчетов  = СтрокаКонечноеСальдо.ИдГруппыСчетРасчетов;
			НоваяСтрокаДерева.ИдГруппыРаздела       = ИдГруппыКонечноеСальдо;
			НоваяСтрокаДерева.УникальныйИдСтрокиТч  = СтрокаТч.УникальныйИдСтрокиТч;
			НоваяСтрокаДерева.Группа 	 		    = СтрокаТч.КорСчет;
			НоваяСтрокаДерева.ВидСчетаРасчетов      = СтрокаТч.СчетРасчетов.Вид;
			
			СуммаДтИтог = СуммаДтИтог + НоваяСтрокаДерева.СуммаДт;
			СуммаКтИтог = СуммаКтИтог + НоваяСтрокаДерева.СуммаКт;
			
		КонецЕсли;
	
	КонецЦикла;	
	
	СтрокаКонечноеСальдо.СуммаДт = СуммаДтИтог;
	СтрокаКонечноеСальдо.СуммаКт = СуммаКтИтог;
		
	ВосстановитьНастройкиОформленияПоСчету();

КонецПроцедуры // ПересчитатьКонечноеСальдоПоСчетуРасчетов()

// Процедура пересчитывает итоги.
// 
// Параметры:
//  ИдСтрокиРаздела - Число (По умолчанию = Неопределено)
//  УдалСуммаДт     - Число (По умолчанию = 0)
//  УдалСуммаКт     - Число (По умолчанию = 0).
// 
&НаСервере
Процедура ПересчитатьИтоги(ИдСтрокиРаздела = Неопределено, УдалСуммаДт = 0, УдалСуммаКт = 0)

	Если ИдСтрокиРаздела = Неопределено Тогда
		Для каждого СтрокаБлока Из ДеревоСверкиВГО.ПолучитьЭлементы() Цикл
			Для каждого СтрокаРаздела Из СтрокаБлока.ПолучитьЭлементы() Цикл
				Если СтрокаРаздела.Раздел <> Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо Тогда
				 	ПересчитатьИтоги(СтрокаРаздела.ПолучитьИдентификатор());
				КонецЕсли;			
			КонецЦикла;		
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	// Пересчет итогов
	
	СуммаДтИтог = 0;
	СуммаКтИтог = 0;
	
	СтрокаРаздела    = ДеревоСверкиВГО.НайтиПоИдентификатору(ИдСтрокиРаздела);
	СчетРасчетов     = СтрокаРаздела.СчетРасчетов;
	ВидСчетаРасчетов = СтрокаРаздела.ВидСчетаРасчетов;
		
	Для каждого СтрокаДерева Из СтрокаРаздела.ПолучитьЭлементы() Цикл
		СуммаДтИтог = СуммаДтИтог + СтрокаДерева.СуммаДт;
		СуммаКтИтог = СуммаКтИтог + СтрокаДерева.СуммаКт;	
	КонецЦикла;
	СуммаДтИтог = СуммаДтИтог - УдалСуммаДт;
	СуммаКтИтог = СуммаКтИтог - УдалСуммаКт;
		
	Если СтрокаРаздела.Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ВходящееСальдо Тогда        					
		
		РазницаДтКт = СуммаДтИтог - СуммаКтИтог; 
		Если (ВидСчетаРасчетов = ВидСчета.АктивноПассивный И РазницаДтКт > 0) 
			ИЛИ ВидСчетаРасчетов = ВидСчета.Активный Тогда
			СтрокаРаздела.СуммаДт = РазницаДтКт;
			СтрокаРаздела.СуммаКт = 0; 			
		Иначе
			СтрокаРаздела.СуммаКт = - РазницаДтКт;
			СтрокаРаздела.СуммаДт = 0;
		КонецЕсли;
		
	Иначе
		
		СтрокаРаздела.СуммаДт = СуммаДтИтог;
		СтрокаРаздела.СуммаКт = СуммаКтИтог;
		
	КонецЕсли;

КонецПроцедуры // ПересчитатьИтоги()

// Процедура пересчитывает общие остатки.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ПересчитатьОбщиеОстаткиСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	СтруктураОбщихОстатков = ДокументОбъект.ПересчитатьОбщиеОстатки();
	
	ТаблицаОстатков.Очистить();
	
	// Начальные остатки
	НоваяСтрокаОст = ТаблицаОстатков.Добавить();	
	НоваяСтрокаОст.Раздел  = Перечисления.бит_вго_РазделыСверкиВГО.ВходящееСальдо;
	НоваяСтрокаОст.Представление = НСтр("ru = 'Итоги по входящему сальдо'");
	НоваяСтрокаОст.СуммаДт = СтруктураОбщихОстатков.ВходящееСальдо_СуммаДт; 
	НоваяСтрокаОст.СуммаКт = СтруктураОбщихОстатков.ВходящееСальдо_СуммаКт;
	
	// Конечные остатки
	НоваяСтрокаОст = ТаблицаОстатков.Добавить();	
	НоваяСтрокаОст.Раздел  = Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо;
	НоваяСтрокаОст.Представление = НСтр("ru = 'Итоги по исходящему сальдо'");
	НоваяСтрокаОст.СуммаДт = СтруктураОбщихОстатков.ИсходящееСальдо_СуммаДт; 
	НоваяСтрокаОст.СуммаКт = СтруктураОбщихОстатков.ИсходящееСальдо_СуммаКт;
		
КонецПроцедуры // ПересчитатьОбщиеОстаткиСервер()

// Процедура устанавливает данные по правилам трансляции.
// 
// Параметры:
//  ДанныеСтроки   - Число ИЛИ Строка таблицы значений
//  ТекстСообщения - Строка.
// 
&НаСервере
Процедура УстановитьДанныеПоПравиламТрансляции(ДанныеСтроки, ТекстСообщения = Неопределено)
	
	ЭтоИдентификатор = ТипЗнч(ДанныеСтроки) = Тип("Число");
	РазделыСверкиВГО = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО;
	ТекущиеДанные = ?(ЭтоИдентификатор, ДеревоСверкиВГО.НайтиПоИдентификатору(ДанныеСтроки), ДанныеСтроки);
	             	
	Если ЭтоИдентификатор 
		И (ТекущиеДанные.РучноеИзменениеОперацииВГО
			ИЛИ ТекущиеДанные.Раздел = РазделыСверкиВГО.ВходящееСальдо
			ИЛИ ТекущиеДанные.Раздел = РазделыСверкиВГО.ИсходящееСальдо) Тогда
	    Возврат;
	КонецЕсли;
	
	Если (Не ЭтоИдентификатор ИЛИ Не ТекущиеДанные.РучноеИзменениеОперацииВГО)
		И ТекущиеДанные.СуммаДт = 0 И ТекущиеДанные.СуммаКт = 0 Тогда
		ТекущиеДанные.ОперацияВГО = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Определяем максимальное количество субконто источника и приемника.
	ИмяПланаСчетовИсточник     = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
	КоличествоСубконтоИсточник = Метаданные.ПланыСчетов[ИмяПланаСчетов].МаксКоличествоСубконто;
	КоличествоСубконтоПриемник = 4;
	
	СтруктураПараметров = Новый Структура;
	Если ТекущиеДанные.СуммаКт = 0 Тогда 		
		СтруктураПараметров.Вставить("СчетДт", ТекущиеДанные.СчетРасчетов);
		СтруктураПараметров.Вставить("СчетКт", ТекущиеДанные.КорСчет);
		Для i = 1 По КоличествоСубконтоИсточник Цикл
			Попытка
				СтруктураПараметров.Вставить("СубконтоДт" + i , ТекущиеДанные["СубконтоРасчетов_" + i]);
			Исключение
			   	СтруктураПараметров.Вставить("СубконтоДт" + i , Неопределено);
			КонецПопытки;
			Попытка
				СтруктураПараметров.Вставить("СубконтоКт" + i , ТекущиеДанные["СубконтоКор_" + i]);
			Исключение
			   	СтруктураПараметров.Вставить("СубконтоКт" + i , Неопределено);
			КонецПопытки;
		КонецЦикла;
	Иначе
		СтруктураПараметров.Вставить("СчетДт", ТекущиеДанные.КорСчет);
		СтруктураПараметров.Вставить("СчетКт", ТекущиеДанные.СчетРасчетов);
		Для i = 1 По КоличествоСубконтоИсточник Цикл
			Попытка
				СтруктураПараметров.Вставить("СубконтоДт" + i , ТекущиеДанные["СубконтоКор_" + i]);
			Исключение
			   	СтруктураПараметров.Вставить("СубконтоДт" + i , Неопределено);
			КонецПопытки;
			Попытка
				СтруктураПараметров.Вставить("СубконтоКт" + i , ТекущиеДанные["СубконтоРасчетов_" + i]);
			Исключение
			   	СтруктураПараметров.Вставить("СубконтоКт" + i , Неопределено);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИмяРегистраБухгалтерии", ИмяРегистраБухгалтерии);
	СтруктураПараметров.Вставить("ИмяПланаСчетовИсточник", ИмяПланаСчетовИсточник);
	СтруктураПараметров.Вставить("КоличествоСубконтоИсточник", КоличествоСубконтоИсточник);
	СтруктураПараметров.Вставить("КоличествоСубконтоПриемник", КоличествоСубконтоПриемник);
	// ----------------------------------------------------------------------
	РезСтруктура = бит_вго_Сервер.ВыполнитьПодборСчетов(СтруктураПараметров
														, Объект.Ссылка
													   	, Объект.Организация
													   	, Объект.Дата);
						   
	// Заполнение по настройке							   
	Если Не ЭтоИдентификатор Тогда
		ТекущиеДанные.ОперацияВГО = РезСтруктура.ОперацияВГО;	
	   	Возврат;
	КонецЕсли;
	
	// Заполнение данных по найденным правилам трансляции.
	ЗаполнятьОперацию = Истина;
	// Если Не ТекущиеДанные.РучноеИзменениеОперацииВГО Тогда.
		
	Если ЗначениеЗаполнено(РезСтруктура.ОперацияВГО) Тогда
	
		// Обороты должны соответствовоать начислению задолженности, а данные оплаты - погашению.
		ЭтоОбороты 	  = ТекущиеДанные.Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов;
		ТекущиеДанные.НекорректнаяОперация   = Ложь;
		Если ЭтоОбороты Тогда		
			Если ТекущиеДанные.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.ПогашениеЗадолженности Тогда
				Если ТекстСообщения <> Неопределено Тогда
					ТекстСообщения = ?(ТекстСообщения = "", ТекстСообщения, ТекстСообщения + Символы.ПС);
					ТекстСообщения = ТекстСообщения + Нстр("ru = 'В правилах трансляции установлена некорректная операция ВГО. Для оборотов на счете расчетов не может быть выбрана операция начисления задолженности.'");
				КонецЕсли;
				ЗаполнятьОперацию = Ложь;
			КонецЕсли; 		
		Иначе
			Если ТекущиеДанные.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности Тогда
				Если ТекстСообщения <> Неопределено Тогда
					ТекстСообщения = ?(ТекстСообщения = "", ТекстСообщения, ТекстСообщения + Символы.ПС);
					ТекстСообщения = ТекстСообщения + Нстр("ru = 'В правилах трансляции установлена некорректная операция ВГО. Для данных об оплате не может быть выбрана операция погашения задолженности.'");
				КонецЕсли;
				ТекущиеДанные.НекорректнаяОперация = Истина;
			ИначеЕсли ТекущиеДанные.ОперацияВГО.ВидОперации = Перечисления.бит_вго_ВидыОперацийВГО.Техническая Тогда
				Если ТекстСообщения <> Неопределено Тогда
					ТекстСообщения = ?(ТекстСообщения = "", ТекстСообщения, ТекстСообщения + Символы.ПС);
				КонецЕсли;
				ЗаполнятьОперацию = Ложь;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнятьОперацию Тогда
	 	ТекущиеДанные.ОперацияВГО = РезСтруктура.ОперацияВГО;
	КонецЕсли;
	Если ТекстСообщения <> Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.ОперацияВГО) Тогда
		ТекстСообщения = ТекстСообщения + Нстр("ru = 'Операция ВГО не установлена.'");	
	КонецЕсли;

	СинхронизироватьДанныеДереваИТабличнойЧастиДляСтроки(ДанныеСтроки);
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ПроводкиСчетРасчетов);
	МассивЭлементов.Добавить(Элементы.ПроводкиКорСчет);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаКлиенте
Функция ПолучитьИмяРеквизита(ИмяЭлемента)

	ИмяРеквизита  = СтрЗаменить(ИмяЭлемента, "ДеревоСверкиВГО", "");

	Возврат ИмяРеквизита;
	
КонецФункции // ПолучитьИмяРеквизита()

&НаКлиенте
Функция ПроверитьВозможностьДобавления(СчетРасчетов, Раздел)

	МожноДобавлять = Истина;
	
	Если Не ЗначениеЗаполнено(СчетРасчетов) Тогда
		
		ТекстСообщения = Нстр("ru = 'Заполните счет расчетов.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		МожноДобавлять = Ложь;
		
	КонецЕсли;
	                                                      
	Если Раздел = фКэшЗначений.Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо Тогда
		
		ТекстСообщения = Нстр("ru = 'Запрещено корректировать исходящее сальдо.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		МожноДобавлять = Ложь;
			
	КонецЕсли;
	

	Возврат МожноДобавлять;
	
КонецФункции // ПроверитьВозможностьДобавления()

&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда 
		
		ИзменениеВалютыДокументаСервер();
		
		Если мКэшРеквизитовФормы.ВалютаДокумента <> Объект.ВалютаДокумента Тогда
	
			ТаблицаОбъекта = Объект.Проводки;
		
			// Спросим, а не пересчитать ли суммы.
			Если Не ТаблицаОбъекта.Итог("СуммаДт") = 0
				ИЛИ Не ТаблицаОбъекта.Итог("СуммаКт") = 0 Тогда
				
				СтруктураВалютыДокументаСтарая = Новый Структура;
				СтруктураВалютыДокументаСтарая.Вставить("ВалютаДокумента",            мКэшРеквизитовФормы.ВалютаДокумента); 
				СтруктураВалютыДокументаСтарая.Вставить("КурсДокументаНаНачало",      мКэшРеквизитовФормы.КурсДокументаНаНачало);
				СтруктураВалютыДокументаСтарая.Вставить("КратностьДокументаНаНачало", мКэшРеквизитовФормы.КратностьДокументаНаНачало);
				СтруктураВалютыДокументаСтарая.Вставить("КурсДокументаСредний",       мКэшРеквизитовФормы.КурсДокументаСредний);
				СтруктураВалютыДокументаСтарая.Вставить("ВалютаДокумента",            мКэшРеквизитовФормы.ВалютаДокумента);
				СтруктураВалютыДокументаСтарая.Вставить("КратностьДокументаСредняя",  мКэшРеквизитовФормы.КратностьДокументаСредняя);
																			
				Если ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента) Тогда
											
					Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыКлиентЗавершение", ЭтотОбъект, СтруктураВалютыДокументаСтарая);
					ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать основные суммы в табличной части?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);						
					
				Иначе
					
					ДобавитьВКэш("ВалютаДокумента");
					ДобавитьВКэш("КурсДокументаНаНачало");
					ДобавитьВКэш("КратностьДокументаНаНачало");
					ДобавитьВКэш("КурсДокументаНаКонец");
					ДобавитьВКэш("КратностьДокументаНаКонец");
					ДобавитьВКэш("КурсДокументаСредний");
					ДобавитьВКэш("КратностьДокументаСредняя");
								
				КонецЕсли;
				
			Иначе
				
				ДобавитьВКэш("ВалютаДокумента");
				ДобавитьВКэш("КурсДокументаНаНачало");
				ДобавитьВКэш("КратностьДокументаНаНачало");
				ДобавитьВКэш("КурсДокументаНаКонец");
				ДобавитьВКэш("КратностьДокументаНаКонец");
				ДобавитьВКэш("КурсДокументаСредний");
				ДобавитьВКэш("КратностьДокументаСредняя");
				
			КонецЕсли;
			
		Иначе
			
			ИзменениеКурсаКлиент();	
			
			ДобавитьВКэш("ВалютаДокумента");
			ДобавитьВКэш("КурсДокументаНаНачало");
			ДобавитьВКэш("КратностьДокументаНаНачало");
			ДобавитьВКэш("КурсДокументаНаКонец");
			ДобавитьВКэш("КратностьДокументаНаКонец");
			ДобавитьВКэш("КурсДокументаСредний");
			ДобавитьВКэш("КратностьДокументаСредняя");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВалютыКлиентЗавершение(Ответ, СтруктураВалютыДокументаСтарая) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда 					
		ВыполнитьРасчетСуммДереваСервер(СтруктураВалютыДокументаСтарая); 								
	КонецЕсли;
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КурсДокументаНаНачало");
	ДобавитьВКэш("КратностьДокументаНаНачало");
	ДобавитьВКэш("КурсДокументаНаКонец");
	ДобавитьВКэш("КратностьДокументаНаКонец");
	ДобавитьВКэш("КурсДокументаСредний");
	ДобавитьВКэш("КратностьДокументаСредняя");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКурсаКлиент() 
	
	// Если ЗначениеЗаполнено(Объект.КурсДокумента) И мКэшРеквизитовФормы.КурсДокумента <> Объект.КурсДокумента Тогда.
	// 	
	// 	ТаблицаОбъекта = Объект.Проводки;
	// 
	// 	//  Спросим, а не пересчитать ли суммы.
	// 	Если Не ТаблицаОбъекта.Итог("СуммаДт") = 0
	// 		ИЛИ Не ТаблицаОбъекта.Итог("СуммаКт") = 0 Тогда
	// 		
	// 		СтруктураВалютыДокументаСтарая = Новый Структура("Валюта, Курс, Кратность"
	// 								, мКэшРеквизитовФормы.ВалютаДокумента
	// 								, мКэшРеквизитовФормы.КурсДокумента
	// 								, мКэшРеквизитовФормы.КратностьДокумента);
	// 															
	// 		Если ЗначениеЗаполнено(мКэшРеквизитовФормы.КурсДокумента) Тогда
	// 			
	// 			Ответ = Вопрос(НСтр("ru = 'Изменился курс валюты документа. Пересчитать основные суммы в табличной части?'")
	// 						  ,РежимДиалогаВопрос.ДаНет
	// 						  ,30
	// 						  ,КодВозвратаДиалога.Нет);
	// 						  
	// 			Если Ответ = КодВозвратаДиалога.Да Тогда					
	// 				ВыполнитьРасчетСуммДереваСервер(СтруктураВалютыДокументаСтарая); 								
	// 			Иначе                                                                					
	// 				ВыполнитьРасчетСуммДереваСервер(СтруктураВалютыДокументаСтарая, Истина);  					
	// 			КонецЕсли;
	// 			
	// 		Иначе
	// 			
	// 			ВыполнитьРасчетСуммДереваСервер(СтруктураВалютыДокументаСтарая, Истина);
	// 						
	// 		КонецЕсли;
	// 		
	// 	КонецЕсли;
	// 	
	// 	ДобавитьВКэш("ВалютаДокумента");
	// 	// ДобавитьВКэш("КурсДокумента");
	// 	// ДобавитьВКэш("КратностьДокумента");
	// 	ДобавитьВКэш("КурсДокументаНаНачало");
	// 	ДобавитьВКэш("КратностьДокументаНаНачало");
	// 	ДобавитьВКэш("КурсДокументаНаКонец");
	// 	ДобавитьВКэш("КратностьДокументаНаКонец");
	// 	ДобавитьВКэш("КурсДокументаСредний");
	// 	ДобавитьВКэш("КратностьДокументаСредняя");
	// 
	// КонецЕсли;
	
КонецПроцедуры // ИзменениеКурсаКлиент()

&НаКлиенте
Процедура НачалоВыбораРеквизитаЗаписи(Элемент, СтандартнаяОбработка, СтруктураПараметров, ЗначениеРеквизита)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеРеквизита
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораРеквизитаЗаписи()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто, ИмяСубконто)
	
	ТипЭлемента = ТипЗнч(ЗначениеСубконто);																					  
	Если ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
		ТекущиеДанные[ПолучитьИмяРеквизита(Элемент.Имя)] = Объект.Контрагент;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконто);	
	
																						  
	Если ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 	 	
		СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПараметров.Вставить("Владелец"  , Объект.Контрагент);
	КонецЕсли;
	
	НачалоВыбораРеквизитаЗаписи(Элемент, СтандартнаяОбработка, СтруктураПараметров, ЗначениеСубконто); 
	
КонецПроцедуры // НачалоВыбораСубконто()

&НаКлиенте
Процедура ЗаполнитьВалютуДокумента()

	Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Возврат;	
	КонецЕсли;	
	
	// Настройки видимости
	ЭтотРегистр_Хоз = ИмяРегистраБухгалтерии = "Хозрасчетный";
	ЭтотРегистр_Бюд = ИмяРегистраБухгалтерии = "бит_Бюджетирование";
	ЭтотРегистр_Меж = ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
		
	Если ЭтотРегистр_Меж Тогда
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
	ИначеЕсли ЭтотРегистр_Бюд Тогда
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаСценария;
	ИначеЕсли ЭтотРегистр_Хоз Тогда
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаРеглУчета;
	Иначе
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаУпрлУчета;
	КонецЕсли;
	
	ИзменениеВалютыКлиент();	
	
КонецПроцедуры // ЗаполнитьВалютуДокумента()

&НаКлиенте
Процедура ИзменениеСуммыКлиент()
	
	ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРесурса    = ?(ТекущиеДанные.СуммаКт = 0, "СуммаДт", "СуммаКт");    	
	
	ИзменениеСуммыСервер(ТекущиеДанные.ПолучитьИдентификатор(), ТекущиеДанные.ИдГруппыСчетРасчетов ,ИмяРесурса);
	
	фКэшЗначений.КэшРеквизитовСтроки[ИмяРесурса] = ТекущиеДанные[ИмяРесурса];
	
	ОтключитьОбработчикОжидания("ИзменениеСуммыКлиент");
			
КонецПроцедуры // ИзменениеСуммыКлиент()

&НаКлиенте
Процедура ЗаполнитьДеревоПоНастройкеКлиент(ТипЗаполнения, ЗаполнятьПоСчетуРасчетов = Ложь)

	ЗаполняемыйСчетРасчетов = Неопределено;
	
	Если ЗаполнятьПоСчетуРасчетов Тогда
		
		ТекущиеДанные = Элементы.ДеревоСверкиВГО.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗаполняемыйСчетРасчетов = ТекущиеДанные.СчетРасчетов;
		
		Состояние(НСтр("ru = 'Пожалуйста, подождите. Выполняется заполнение данных сверки ВГО.'"));
		
		ЗаполнитьДеревоПоНастройкеСервер(ТипЗаполнения, ЗаполняемыйСчетРасчетов);
		бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСверкиВГО, ДеревоСверкиВГО, фУровеньПросмотраДерева);
		
	Иначе
		
		Если ТипЗаполнения = "Все" ИЛИ ТипЗаполнения = "ШаблонГрупп" Тогда
			
			Если ДеревоСверкиВГО.ПолучитьЭлементы().Количество() > 0 Тогда
				
				// Структура дополнительных параметров для обработчика оповещения.
				СтруктураДопПараметров = Новый Структура;
				СтруктураДопПараметров.Вставить("ТипЗаполнения", ТипЗаполнения);
				СтруктураДопПараметров.Вставить("ЗаполняемыйСчетРасчетов", ЗаполняемыйСчетРасчетов);
				
				Оповещение = Новый ОписаниеОповещения("ЗаполнитьДеревоПоНастройкеКлиентЗавершение", ЭтотОбъект, СтруктураДопПараметров);
				ТекстВопроса = НСтр("ru = 'Дерево сверки ВГО будет очищено. Продолжить?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

			Иначе
				
				Состояние(НСтр("ru = 'Пожалуйста, подождите. Выполняется заполнение данных сверки ВГО.'"));
				
				ЗаполнитьДеревоПоНастройкеСервер(ТипЗаполнения, ЗаполняемыйСчетРасчетов);
				бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСверкиВГО, ДеревоСверкиВГО, фУровеньПросмотраДерева);

			КонецЕсли; 			
			
		Иначе
			
			Состояние(НСтр("ru = 'Пожалуйста, подождите. Выполняется заполнение данных сверки ВГО.'"));
			
			ЗаполнитьДеревоПоНастройкеСервер(ТипЗаполнения, ЗаполняемыйСчетРасчетов);
			бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСверкиВГО, ДеревоСверкиВГО, фУровеньПросмотраДерева);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Заполнить дерево по настройке клиент завершение.
//
// Параметры:
//  Ответ					 - КодВозвратаДиалога - ответ.
//  СтруктураДопПараметров	 - Структура - параметры.
//
&НаКлиенте
Процедура ЗаполнитьДеревоПоНастройкеКлиентЗавершение(Ответ, СтруктураДопПараметров) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Пожалуйста, подождите. Выполняется заполнение данных сверки ВГО.'"));
	
	ЗаполнитьДеревоПоНастройкеСервер(СтруктураДопПараметров.ТипЗаполнения, СтруктураДопПараметров.ЗаполняемыйСчетРасчетов);
	бит_РаботаСДиалогамиКлиент.РазвернутьДоУровня(Элементы.ДеревоСверкиВГО, ДеревоСверкиВГО, фУровеньПросмотраДерева);
				
КонецПроцедуры
                   
#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

#КонецОбласти

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
