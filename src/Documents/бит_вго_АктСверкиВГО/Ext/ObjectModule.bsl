#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконто; // Максимальное количество субконто.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
				
	// Проверка даты запрета редактирования.
	ПараметрыСверки = Новый Структура("Организация1, Контрагент2", Организация, Контрагент);
	бит_вго_Сервер.ПроверитьВозможностьРедактированияДокументовСверкиВГО(ДатаНачала, ПараметрыСверки, Отказ);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		// Проверка завершения сверки.
		ПроверитьЗавершениеСверкиВГО(Отказ);	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// Проверка данных
	ПроверкаДанных(Отказ, Заголовок);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	СтруктураКурсыВалют = КолебанияКурсаВалюты(); 	
		
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
// 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
	Если ЗначениеЗаполнено(РегистрБухгалтерии) Тогда
		
		// Имя регистра бухгалтерии.
		ИмяРегистра 		= РегистрБухгалтерии.ИмяОбъекта;
		ЭтотРегистр_Хоз 	= ИмяРегистра = "Хозрасчетный";
		ЭтотРегистр_Бюд 	= ИмяРегистра = "бит_Бюджетирование";
		ЭтотРегистр_Меж 	= ИмяРегистра = "бит_Дополнительный_2";
		
		Если ЭтотРегистр_Бюд Тогда
			ПроверяемыеРеквизиты.Добавить("Сценарий");
		Иначе
	    	ПроверяемыеРеквизиты.Добавить("Организация");
		КонецЕсли;  		
	
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа или периода.
// 
// Параметры:
//  Нет.
// 
Процедура ПересчитатьКурсыДокумента() Экспорт

	СтруктураКурсыВалют = КолебанияКурсаВалюты();
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНачала);
	КурсДокументаНаНачало 	   = СтруктураКурса.Курс;
	КратностьДокументаНаНачало = ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);	
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаОкончания);
	КурсДокументаНаКонец 	   = СтруктураКурса.Курс;
	КратностьДокументаНаКонец  = ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьСреднийКурсВалюты(ВалютаДокумента, ДатаНачала, ДатаОкончания);
	КурсДокументаСредний 	   = СтруктураКурса.Курс;
	КратностьДокументаСредняя  = ?(СтруктураКурса.Кратность = 0, 1, СтруктураКурса.Кратность);

КонецПроцедуры

// Функция получает струтуру курсов валют.
// 
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//   Структура.
// 
Функция КолебанияКурсаВалюты()

	СтруктураКурсыВалют = Новый Структура;
	
	ВидыКурсов 	   = Новый Структура("Упр, Регл, МУ, Сценарий");
	СтруктураВалют = бит_КурсыВалют.ПолучитьСтруктуруВалют(ЭтотОбъект, ВидыКурсов);
		
	// На дату начала.
	СтруткураКурсовТемп = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, ДатаНачала, ВидыКурсов);
	СтруткураКурсовТемп.Вставить("Документ", Новый Структура("Валюта, Курс, Кратность", ВалютаДокумента, КурсДокументаНаНачало, КратностьДокументаНаНачало));
	СтруктураКурсыВалют.Вставить("НаДатуНачала", СтруткураКурсовТемп);
	
	// На дату окончания.
	СтруткураКурсовТемп = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, ДатаОкончания, ВидыКурсов);
	СтруткураКурсовТемп.Вставить("Документ", Новый Структура("Валюта, Курс, Кратность", ВалютаДокумента, КурсДокументаНаКонец, КратностьДокументаНаКонец));
	СтруктураКурсыВалют.Вставить("НаДатуОкончания", СтруткураКурсовТемп);
	
	// Средние курсы.
	СтруткураКурсовТемп = Новый Структура;	
	Для каждого КлЗнч Из СтруктураВалют Цикл
		СтруктураКурса = бит_КурсыВалют.ПолучитьСреднийКурсВалюты(КлЗнч.Значение, ДатаНачала, ДатаОкончания);
		СтруткураКурсовТемп.Вставить(КлЗнч.Ключ, СтруктураКурса);																		
	КонецЦикла;
	СтруткураКурсовТемп.Вставить("Документ", Новый Структура("Валюта, Курс, Кратность", ВалютаДокумента, КурсДокументаСредний, КратностьДокументаСредняя));
	СтруктураКурсыВалют.Вставить("СреднийКурс", СтруткураКурсовТемп);
	   
                                    
	Возврат СтруктураКурсыВалют;
	
КонецФункции

// Эта функция пересчитывает сумму из валюты ВалютаНач по курсу ПоКурсуНач.
// В валюту ВалютаКон по курсу ПоКурсуКон.
// 
// Параметры:      
// 	Сумма          - сумма, которую следует пересчитать.
// 	ВалютаНач      - ссылка на элемент справочника Валют.
//                   определяет валюты из которой надо пересчитывать.
// 	ВалютаКон      - ссылка на элемент справочника Валют.
//                   определяет валюты в которую надо пересчитвать.
// 	ПоКурсуНач     - курс из которого надо пересчитать.
// 	ПоКурсуКон     - курс в который надо пересчитать.
// 	ПоКратностьНач - кратность из которого надо пересчитать (по умолчанию = 1).
// 	ПоКратностьКон - кратность в который надо пересчитать  (по умолчанию = 1).
// 
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту.
// 
Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач, ПоКурсуКон, 
	                               ПоКратностьНач = 1, ПоКратностьКон = 1 ) Экспорт

	Если (ПоКурсуНач     = ПоКурсуКон) 
	   И (ПоКратностьНач = ПоКратностьКон) Тогда

		// Ну, тут и считать нечего...
		Возврат Сумма;

	КонецЕсли;

	Если ПоКурсуНач     = 0 
	 ИЛИ ПоКурсуКон     = 0 
	 ИЛИ ПоКратностьНач = 0 
	 ИЛИ ПоКратностьКон = 0 Тогда
	 
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Процедура ""ПересчитатьИзВалютыВВалюту()"": при пересчете обнаружен нулевой курс.
	 					|Валюта начальная ""%1"", валюта конечная ""%2"".'"),
	 							ВалютаНач, ВалютаКон);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат 0;

	КонецЕсли;

	СуммаРез = (Сумма * ПоКурсуНач * ПоКратностьКон) / (ПоКурсуКон * ПоКратностьНач);
	
	Возврат СуммаРез;

КонецФункции // ПересчитатьИзВалютыВВалюту()

// Функция пересчитывает сумму из валюты в валюту.
// 
// Параметры:
//  СуммаДляПересчета  	- Число.
//  ВалютаНач  			- СправочникСсылка.Валюты.
//  ВалютаКон  			- СправочникСсылка.Валюты.
//  СтруктураВалютыНач 	- Структура (По умолчанию = Неопределено).
//  СтруктураВалютыКон 	- Структура (По умолчанию = Неопределено).
// 
// Возвращаемое значение:
//  Число.
// 
Функция ПересчитатьСуммуПоНовойВалюте(СуммаДляПересчета, ВалютаНач, ВалютаКон, 
										СтруктураВалютыНач = Неопределено, СтруктураВалютыКон = Неопределено) Экспорт

	Если СтруктураВалютыНач = Неопределено Тогда
		СтруктураВалютыНач = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаНач, Дата);
	КонецЕсли;
	Если СтруктураВалютыКон = Неопределено Тогда
		СтруктураВалютыКон = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаКон, Дата);
	ИначеЕсли СтруктураВалютыКон.Курс = 0 Тогда
		СтруктураВалютыКон = ?(СтруктураВалютыНач.Валюта = СтруктураВалютыКон.Валюта, СтруктураВалютыНач, бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаКон, Дата));
	КонецЕсли;
	
	НоваяСумма = ПересчитатьИзВалютыВВалюту(СуммаДляПересчета, 
												ВалютаНач					, ВалютаКон,
												СтруктураВалютыНач.Курс		, СтруктураВалютыКон.Курс,
												СтруктураВалютыНач.Кратность, СтруктураВалютыКон.Кратность);
											
	Возврат НоваяСумма;
	
КонецФункции // ПересчитатьСуммуПоНовойВалюте()

// Функция пересчитывает общие остатки.
// 
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//   Структура.
// 
Функция ПересчитатьОбщиеОстатки() Экспорт

	СтруктураОстатков = Новый Структура;
	СтруктураОстатков.Вставить("ВходящееСальдо_СуммаДт", 0);
	СтруктураОстатков.Вставить("ВходящееСальдо_СуммаКт", 0);
	СтруктураОстатков.Вставить("ИсходящееСальдо_СуммаДт", 0);
	СтруктураОстатков.Вставить("ИсходящееСальдо_СуммаКт", 0);
	
	ПересчитатьОбщиеОстаткиПоТипу(СтруктураОстатков, "ВходящееСальдо");
	ПересчитатьОбщиеОстаткиПоТипу(СтруктураОстатков, "ИсходящееСальдо");
		
	Возврат СтруктураОстатков;
	
КонецФункции

// Функция пересчитывает в табличной части "Проводки" конечное сальдо по счету расчетов.
// 
// Параметры:
//  СчетРасчетов  - ПланСчетовСсылка.
//  
// Возвращаемое значение:
//   Массив.
// 
Функция ПересчитатьКонечноеСальдоПоСчетуРасчетовДляТч(СчетРасчетов) Экспорт

	МассивУникальныхИдСтрок = Новый Массив;
	
	РазделКонСальдо  = Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо;
	ОперацияВГОКонец = Справочники.бит_вго_ОперацииВГО.КонечноеСальдо;
	
	// Удаление старых строк.
	ОтборДляУдаления = Новый Структура("СчетРасчетов, Раздел", СчетРасчетов, РазделКонСальдо);
	СтрокиДляУдаления = Проводки.НайтиСтроки(ОтборДляУдаления);
	Для каждого УдаляемаяСтрока Из СтрокиДляУдаления Цикл
		Проводки.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	СписокКолонок = "НомерСтроки, Раздел, СчетРасчетов, ВалютаВзаиморасчеты, 
					|ЦФО, ПодразделениеРасчетов, ПодразделениеКор,
					|СубконтоРасчетов_1, СубконтоРасчетов_2, СубконтоРасчетов_3, СубконтоРасчетов_4,
					|СуммаДт, СуммаКт, СуммаВзаиморасчеты";
	ОтборПоСчету = Новый Структура("СчетРасчетов", СчетРасчетов);					
	ТаблицаПоСчетуРасчетов = Проводки.Выгрузить(ОтборПоСчету, СписокКолонок);
	   		
	
	// Преобразуем таблицу.
	ТаблицаПоСчетуРасчетов.Колонки.Добавить("Сумма");
	Для каждого СтрТабл Из ТаблицаПоСчетуРасчетов Цикл
		Для i = 1 По мКоличествоСубконто Цикл
			ИмяСубконтоРсч = "СубконтоРасчетов_" + Строка(i);
			Если Не ЗначениеЗаполнено(СтрТабл[ИмяСубконтоРсч]) Тогда
				СтрТабл[ИмяСубконтоРсч] = Неопределено;		
			КонецЕсли;
		КонецЦикла;
		
		РазницаДтКт   = СтрТабл.СуммаДт - СтрТабл.СуммаКт;
		СтрТабл.Сумма = РазницаДтКт;
		Если (РазницаДтКт < 0 И СтрТабл.СуммаВзаиморасчеты > 0)
			ИЛИ (РазницаДтКт > 0 И СтрТабл.СуммаВзаиморасчеты < 0)Тогда
			СтрТабл.СуммаВзаиморасчеты = - СтрТабл.СуммаВзаиморасчеты;
		КонецЕсли;
				
	КонецЦикла; 

	СтрокиДляУдаления = ТаблицаПоСчетуРасчетов.НайтиСтроки(ОтборДляУдаления);
	Для каждого УдаляемаяСтрока Из СтрокиДляУдаления Цикл
		ТаблицаПоСчетуРасчетов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	ТаблицаПоСчетуРасчетов.Свернуть("СчетРасчетов, ВалютаВзаиморасчеты,
					|ЦФО, ПодразделениеРасчетов, ПодразделениеКор,
					|СубконтоРасчетов_1, СубконтоРасчетов_2, СубконтоРасчетов_3, СубконтоРасчетов_4"
					, "Сумма, СуммаВзаиморасчеты");
					
	// Заполнение строк конечного сальдо.
	Для каждого СтрТабл Из ТаблицаПоСчетуРасчетов Цикл
		
		СуммаРезультат = СтрТабл.Сумма;
		Если СуммаРезультат = 0 Тогда
			Продолжить;
		КонецЕсли;
		СуммаВзаиморасчеты = СтрТабл.СуммаВзаиморасчеты;
		СуммаВзаиморасчеты = ?( (СуммаРезультат > 0 И СуммаВзаиморасчеты > 0) ИЛИ (СуммаРезультат < 0 И СуммаВзаиморасчеты < 0)
						, СуммаВзаиморасчеты
						, - СуммаВзаиморасчеты);
		
		НоваяСтрока = Проводки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТабл);
		НоваяСтрока.Раздел 				 = РазделКонСальдо;
		НоваяСтрока.ОперацияВГО 		 = ОперацияВГОКонец;
		НоваяСтрока.УникальныйИдСтрокиТч = Строка(Новый УникальныйИдентификатор);
		
		Если (СчетРасчетов.Вид = ВидСчета.АктивноПассивный И СуммаРезультат > 0) 
			ИЛИ СчетРасчетов.Вид = ВидСчета.Активный Тогда			
			НоваяСтрока.СуммаДт			   = СуммаРезультат;
			НоваяСтрока.СуммаВзаиморасчеты = СуммаВзаиморасчеты; 			
		Иначе
			НоваяСтрока.СуммаКт 		   = - СуммаРезультат;
			НоваяСтрока.СуммаВзаиморасчеты = - СуммаВзаиморасчеты;
		КонецЕсли;
			
		МассивУникальныхИдСтрок.Добавить(НоваяСтрока.УникальныйИдСтрокиТч);
	
	КонецЦикла; 	
	
	Возврат МассивУникальныхИдСтрок;
	
КонецФункции // ПересчитатьКонечноеСальдоПоСчетуРасчетовДляТч()

// Процедура пересчитывает валютные суммы в табличной части по валютам.
// 
// Параметры:
//  СтруктураВалютыНач  - Структура.
//  ТолькоВзаиморасчеты - Булево.
// 
Процедура ВыполнитьПерерасчетСуммТабличнойЧасти(СтруктураВалютыНачВх, ТолькоВзаиморасчеты) Экспорт

	СтруктураВалютыНач_НаНачало =  Новый Структура("Валюта, Курс, Кратность"
								, СтруктураВалютыНачВх.ВалютаДокумента, СтруктураВалютыНачВх.КурсДокументаНаНачало, СтруктураВалютыНачВх.КратностьДокументаНаНачало);
	СтруктураВалютыНач_Средний  = Новый Структура("Валюта, Курс, Кратность"
								, СтруктураВалютыНачВх.ВалютаДокумента, СтруктураВалютыНачВх.КурсДокументаСредний, СтруктураВалютыНачВх.КратностьДокументаСредняя);
								
	СтруктураВалютыКон_НаНачало = Новый Структура("Валюта, Курс, Кратность"
								, ВалютаДокумента, КурсДокументаНаНачало, КратностьДокументаНаНачало);
	СтруктураВалютыКон_Средний  = Новый Структура("Валюта, Курс, Кратность"
								, ВалютаДокумента, КурсДокументаСредний, КратностьДокументаСредняя);
														
		
	Для каждого СтрокаТч Из Проводки Цикл
		
							
		Если СтрокаТч.Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ВходящееСальдо Тогда
			СтрокаТч.СуммаДт = ПересчитатьСуммуПоНовойВалюте(СтрокаТч.СуммаДт, СтруктураВалютыНач_НаНачало.Валюта, ВалютаДокумента, 
														СтруктураВалютыНач_НаНачало, СтруктураВалютыКон_НаНачало);
			СтрокаТч.СуммаКт = ПересчитатьСуммуПоНовойВалюте(СтрокаТч.СуммаКт, СтруктураВалютыНач_НаНачало.Валюта, ВалютаДокумента, 
														СтруктураВалютыНач_НаНачало, СтруктураВалютыКон_НаНачало);
		Иначе
			СтрокаТч.СуммаДт = ПересчитатьСуммуПоНовойВалюте(СтрокаТч.СуммаДт, СтруктураВалютыНач_Средний.Валюта, ВалютаДокумента, 
														СтруктураВалютыНач_Средний, СтруктураВалютыКон_Средний);
			СтрокаТч.СуммаКт = ПересчитатьСуммуПоНовойВалюте(СтрокаТч.СуммаКт, СтруктураВалютыНач_Средний.Валюта, ВалютаДокумента, 
														СтруктураВалютыНач_Средний, СтруктураВалютыКон_Средний);												
		КонецЕсли;							
															
		
	КонецЦикла;
	             
КонецПроцедуры // ВыполнитьПерерасчетСуммТабличнойЧасти()

// Процедура зачищает некорректные значения в табличной части при изменении организации.
// 
// Параметры:
//  Нет.
// 
Процедура ВыполнитьДействияПриИзмененииОрганизации() Экспорт
	
	Для каждого СтрокаТч Из Проводки Цикл
		
		НомСтроки = СтрокаТч.НомерСтроки;
		
		Если ЗначениеЗаполнено(СтрокаТч.ПодразделениеРасчетов) Тогда
			СтрокаТч.ПодразделениеРасчетов = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ТекстСообщения = Нстр("ru = 'Очищено подразделение счета расчетов'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТч.ПодразделениеКор) Тогда
			СтрокаТч.ПодразделениеКор = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			ТекстСообщения = Нстр("ru = 'Очищено подразделение кор. счета'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
				
		Для i = 1 По мКоличествоСубконто Цикл
		
			ИмяРеквизита = "СубконтоРасчетов_" + Строка(i);
			ЗачиститьСубконто(НомСтроки, ИмяРеквизита, СтрокаТч[ИмяРеквизита]);
			
			ИмяРеквизита = "СубконтоКор_" + Строка(i);
			ЗачиститьСубконто(НомСтроки, ИмяРеквизита, СтрокаТч[ИмяРеквизита]);
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры // ВыполнитьДействияПриИзмененииОрганизации()

// Процедура зачищает некорректные значения в табличной части при изменении контрагента.
// 
// Параметры:
//  Нет.
// 
Процедура ВыполнитьДействияПриИзмененииКонтрагента() Экспорт
	
	Для каждого СтрокаТч Из Проводки Цикл
		
		НомСтроки = СтрокаТч.НомерСтроки;
		
		Для i = 1 По мКоличествоСубконто Цикл
		
			ИмяРеквизита = "СубконтоРасчетов_" + Строка(i);
			ЗачиститьСубконто(НомСтроки, ИмяРеквизита, СтрокаТч[ИмяРеквизита], Истина);
			
			ИмяРеквизита = "СубконтоКор_" + Строка(i);
			ЗачиститьСубконто(НомСтроки, ИмяРеквизита, СтрокаТч[ИмяРеквизита], Истина);
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры // ВыполнитьДействияПриИзмененииКонтрагента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииОбщегоНазначения

// Функция пересчитывает общие остатки.
// 
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//   Структура.
// 
Процедура ПересчитатьОбщиеОстаткиПоТипу(СтруктураОстатков, ТипОстатков)

	СписокКолонок = "Раздел, СуммаДт, СуммаКт";
	
	ОтборПоТипуОстатков = Новый Структура("Раздел", Перечисления.бит_вго_РазделыСверкиВГО[ТипОстатков]);					
	
	ТаблицаОстатков = Проводки.Выгрузить(ОтборПоТипуОстатков, СписокКолонок);	
	
	Если ТаблицаОстатков.Количество() > 0 Тогда
		
		ТаблицаОстатков.Свернуть("Раздел", "СуммаДт, СуммаКт");
		СтрокаТч = ТаблицаОстатков[0];
		РазницаДтКт = СтрокаТч.СуммаДт - СтрокаТч.СуммаКт;
		Если РазницаДтКт > 0 Тогда
        	СтруктураОстатков.Вставить(ТипОстатков + "_СуммаДт", РазницаДтКт);
  	    Иначе
        	СтруктураОстатков.Вставить(ТипОстатков + "_СуммаКт", - РазницаДтКт);
 		КонецЕсли; 		
		
	КонецЕсли;
		
КонецПроцедуры // ПересчитатьОбщиеОстаткиПоТипу()

// Процедура зачищает значения субконто.
// 
// Параметры:
//  НомСтроки		  - Число.
//  ИмяРеквизита	  - Строка.
//  РеквизитСубконто  - ЛюбаяСсылка.
//  ПоКонтрагенту     - Булево.
// 
Процедура ЗачиститьСубконто(НомСтроки, ИмяРеквизита, РеквизитСубконто, ПоКонтрагенту = Ложь)

	Если Не ЗначениеЗаполнено(РеквизитСубконто) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(РеквизитСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		РеквизитСубконто = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ТекстСообщения = Нстр("ru = 'Очищен договор контрагента (" + ИмяРеквизита + ").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	ИначеЕсли Не ПоКонтрагенту И ТипЗнч(РеквизитСубконто) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		РеквизитСубконто = Справочники.БанковскиеСчета.ПустаяСсылка();
		ТекстСообщения = Нстр("ru = 'Очищен банковский счет (" + ИмяРеквизита + ").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	ИначеЕсли Не ПоКонтрагенту И ТипЗнч(РеквизитСубконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		РеквизитСубконто = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		ТекстСообщения = Нстр("ru = 'Очищено подразделение организации (" + ИмяРеквизита + ").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	ИначеЕсли ПоКонтрагенту И ТипЗнч(РеквизитСубконто) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		РеквизитСубконто = Контрагент;
		ТекстСообщения = Нстр("ru = 'Изменен контрагент (" + ИмяРеквизита + ").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;	

КонецПроцедуры // ЗачиститьСубконто()

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Процедура добавляет строку в таблицу ошибок.
// 
// Параметры:
//  ТаблицаОшибок  	- ТаблицаЗначений.
//  Номер  			- Число.
//  СчетРасчетов 	- ПланСчетовСсылка.
//  ТекстСообщения 	- Текст.
// 
Процедура ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, Номер, СчетРасчетов, ТекстСообщения)

	НоваяСтрока = ТаблицаОшибок.Добавить();
	НоваяСтрока.Номер 		 = Номер;
	НоваяСтрока.СчетРасчетов = СчетРасчетов;
	НоваяСтрока.Текст 		 = ТекстСообщения;
	НоваяСтрока.Количество   = 1;	

КонецПроцедуры // ДобавитьСтрокуТаблОшибок()

// Процедура проверяет завершение сверки ВГО.
// 
// Параметры:
//  Отказ  - Булево.
// 
Процедура ПроверитьЗавершениеСверкиВГО(Отказ) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"			, ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания"		, ДатаОкончания);
	СтруктураПараметров.Вставить("Организация1"			, Организация);
	СтруктураПараметров.Вставить("Контрагент2"			, Контрагент);
	СтруктураПараметров.Вставить("РегистрБухгалтерии"	, РегистрБухгалтерии);
	СтруктураПараметров.Вставить("Сценарий"				, Сценарий);
	
	бит_вго_Сервер.ПроверитьЗавершениеСверкиВГО(СтруктураПараметров, Ссылка, Отказ);
	 	
КонецПроцедуры // ПроверитьЗавершениеСверкиВГО()

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц         - Структура.
//  Отказ            		- Булево.
//  Заголовок 				- Строка.
// 
Процедура ПроверкаДанных(Отказ, Заголовок)
	
	// Проверка заполненности и корректности реквизитов.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"		  	   , Ссылка);
	Запрос.УстановитьПараметр("ДанныеОбОплате"	   , Перечисления.бит_вго_РазделыСверкиВГО.ДанныеОбОплате);
	Запрос.УстановитьПараметр("НастройкаАктаСверки", НастройкаАктаСверки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиАктовСверкиВГОСчета.Счет КАК Счет,
	               |	НастройкиАктовСверкиВГОСчета.ЭтоСчетРасчетов КАК ЭтоСчетРасчетов,
	               |	НастройкиАктовСверкиВГОСчета.ЭтоСчетОборотов КАК ЭтоСчетОборотов,
	               |	НастройкиАктовСверкиВГОСчета.ЭтоСчетОплаты КАК ЭтоСчетОплаты,
	               |	НастройкиАктовСверкиВГОСчета.РазрешеноВыбиратьСубконто_1 КАК РазрешеноВыбиратьСубконто_1,
	               |	НастройкиАктовСверкиВГОСчета.РазрешеноВыбиратьСубконто_2 КАК РазрешеноВыбиратьСубконто_2,
	               |	НастройкиАктовСверкиВГОСчета.РазрешеноВыбиратьСубконто_3 КАК РазрешеноВыбиратьСубконто_3,
	               |	НастройкиАктовСверкиВГОСчета.РазрешеноВыбиратьСубконто_4 КАК РазрешеноВыбиратьСубконто_4,
	               |	НастройкиАктовСверкиВГОСчета.ПроверкаЗаполненияСубконто_1 КАК ПроверкаЗаполненияСубконто_1,
	               |	НастройкиАктовСверкиВГОСчета.ПроверкаЗаполненияСубконто_2 КАК ПроверкаЗаполненияСубконто_2,
	               |	НастройкиАктовСверкиВГОСчета.ПроверкаЗаполненияСубконто_3 КАК ПроверкаЗаполненияСубконто_3,
	               |	НастройкиАктовСверкиВГОСчета.ПроверкаЗаполненияСубконто_4 КАК ПроверкаЗаполненияСубконто_4
	               |ПОМЕСТИТЬ ТаблНастройкиСчетов
	               |ИЗ
	               |	Справочник.бит_вго_НастройкиАктовСверкиВГО.Счета КАК НастройкиАктовСверкиВГОСчета
	               |ГДЕ
	               |	НастройкиАктовСверкиВГОСчета.Ссылка = &НастройкаАктаСверки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабЧастьПроводки.НомерСтроки КАК НомерСтроки,
	               |	ТабЧастьПроводки.Раздел КАК Раздел,
	               |	ТабЧастьПроводки.ОперацияВГО КАК ОперацияВГО,
	               |	ТабЧастьПроводки.СчетРасчетов КАК СчетРасчетов,
	               |	ТабЧастьПроводки.КорСчет КАК КорСчет,
	               |	ТабЧастьПроводки.ВалютаВзаиморасчеты КАК ВалютаВзаиморасчеты,
	               |	ТабЧастьПроводки.ЦФО КАК ЦФО,
	               |	ТабЧастьПроводки.ПодразделениеРасчетов КАК ПодразделениеРасчетов,
	               |	ТабЧастьПроводки.ПодразделениеКор КАК ПодразделениеКор,
	               |	ТабЧастьПроводки.СубконтоРасчетов_1 КАК СубконтоРасчетов_1,
	               |	ТабЧастьПроводки.СубконтоРасчетов_2 КАК СубконтоРасчетов_2,
	               |	ТабЧастьПроводки.СубконтоРасчетов_3 КАК СубконтоРасчетов_3,
	               |	ТабЧастьПроводки.СубконтоРасчетов_4 КАК СубконтоРасчетов_4,
	               |	ТабЧастьПроводки.СубконтоКор_1 КАК СубконтоКор_1,
	               |	ТабЧастьПроводки.СубконтоКор_2 КАК СубконтоКор_2,
	               |	ТабЧастьПроводки.СубконтоКор_3 КАК СубконтоКор_3,
	               |	ТабЧастьПроводки.СубконтоКор_4 КАК СубконтоКор_4,
	               |	ЕСТЬNULL(ТабЧастьПроводки.СуммаДт, 0) КАК СуммаДт,
	               |	ЕСТЬNULL(ТабЧастьПроводки.СуммаКт, 0) КАК СуммаКт,
	               |	ЕСТЬNULL(ТабЧастьПроводки.СуммаВзаиморасчеты, 0) КАК СуммаВзаиморасчеты,
	               |	МАКСИМУМ(ЕСТЬNULL(НастройкиСчетаРасчетов.ПроверкаЗаполненияСубконто_1, ЛОЖЬ)) КАК ПроверкаСубконтоРасчетов_1,
	               |	МАКСИМУМ(ЕСТЬNULL(НастройкиСчетаРасчетов.ПроверкаЗаполненияСубконто_2, ЛОЖЬ)) КАК ПроверкаСубконтоРасчетов_2,
	               |	МАКСИМУМ(ЕСТЬNULL(НастройкиСчетаРасчетов.ПроверкаЗаполненияСубконто_3, ЛОЖЬ)) КАК ПроверкаСубконтоРасчетов_3,
	               |	МАКСИМУМ(ЕСТЬNULL(НастройкиСчетаРасчетов.ПроверкаЗаполненияСубконто_4, ЛОЖЬ)) КАК ПроверкаСубконтоРасчетов_4,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ТабЧастьПроводки.Раздел = &ДанныеОбОплате
	               |				ТОГДА ЕСТЬNULL(НастройкиСчетаОплаты.ПроверкаЗаполненияСубконто_1, ЛОЖЬ)
	               |			ИНАЧЕ ЕСТЬNULL(НастройкиСчетаОборотов.ПроверкаЗаполненияСубконто_1, ЛОЖЬ)
	               |		КОНЕЦ) КАК ПроверкаСубконтоКор_1,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ТабЧастьПроводки.Раздел = &ДанныеОбОплате
	               |				ТОГДА ЕСТЬNULL(НастройкиСчетаОплаты.ПроверкаЗаполненияСубконто_2, ЛОЖЬ)
	               |			ИНАЧЕ ЕСТЬNULL(НастройкиСчетаОборотов.ПроверкаЗаполненияСубконто_2, ЛОЖЬ)
	               |		КОНЕЦ) КАК ПроверкаСубконтоКор_2,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ТабЧастьПроводки.Раздел = &ДанныеОбОплате
	               |				ТОГДА ЕСТЬNULL(НастройкиСчетаОплаты.ПроверкаЗаполненияСубконто_3, ЛОЖЬ)
	               |			ИНАЧЕ ЕСТЬNULL(НастройкиСчетаОборотов.ПроверкаЗаполненияСубконто_3, ЛОЖЬ)
	               |		КОНЕЦ) КАК ПроверкаСубконтоКор_3,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ТабЧастьПроводки.Раздел = &ДанныеОбОплате
	               |				ТОГДА ЕСТЬNULL(НастройкиСчетаОплаты.ПроверкаЗаполненияСубконто_4, ЛОЖЬ)
	               |			ИНАЧЕ ЕСТЬNULL(НастройкиСчетаОборотов.ПроверкаЗаполненияСубконто_4, ЛОЖЬ)
	               |		КОНЕЦ) КАК ПроверкаСубконтоКор_4
	               |ИЗ
	               |	Документ.бит_вго_АктСверкиВГО.Проводки КАК ТабЧастьПроводки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблНастройкиСчетов КАК НастройкиСчетаРасчетов
	               |		ПО ТабЧастьПроводки.СчетРасчетов = НастройкиСчетаРасчетов.Счет
	               |			И (НастройкиСчетаРасчетов.ЭтоСчетРасчетов = ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблНастройкиСчетов КАК НастройкиСчетаОборотов
	               |		ПО ТабЧастьПроводки.КорСчет = НастройкиСчетаОборотов.Счет
	               |			И (НастройкиСчетаОборотов.ЭтоСчетОборотов = ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблНастройкиСчетов КАК НастройкиСчетаОплаты
	               |		ПО ТабЧастьПроводки.КорСчет = НастройкиСчетаОплаты.Счет
	               |			И (НастройкиСчетаОплаты.ЭтоСчетОплаты = ИСТИНА)
	               |ГДЕ
	               |	ТабЧастьПроводки.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабЧастьПроводки.НомерСтроки,
	               |	ТабЧастьПроводки.Раздел,
	               |	ТабЧастьПроводки.ОперацияВГО,
	               |	ТабЧастьПроводки.СчетРасчетов,
	               |	ТабЧастьПроводки.КорСчет,
	               |	ТабЧастьПроводки.ВалютаВзаиморасчеты,
	               |	ТабЧастьПроводки.ЦФО,
	               |	ТабЧастьПроводки.ПодразделениеРасчетов,
	               |	ТабЧастьПроводки.ПодразделениеКор,
	               |	ТабЧастьПроводки.СубконтоРасчетов_1,
	               |	ТабЧастьПроводки.СубконтоРасчетов_2,
	               |	ТабЧастьПроводки.СубконтоРасчетов_3,
	               |	ТабЧастьПроводки.СубконтоРасчетов_4,
	               |	ТабЧастьПроводки.СубконтоКор_1,
	               |	ТабЧастьПроводки.СубконтоКор_2,
	               |	ТабЧастьПроводки.СубконтоКор_3,
	               |	ТабЧастьПроводки.СубконтоКор_4,
	               |	ЕСТЬNULL(ТабЧастьПроводки.СуммаВзаиморасчеты, 0),
	               |	ЕСТЬNULL(ТабЧастьПроводки.СуммаДт, 0),
	               |	ЕСТЬNULL(ТабЧастьПроводки.СуммаКт, 0)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТабЧастьПроводки.НомерСтроки,
	               |	ТабЧастьПроводки.Раздел
	               |ИТОГИ
	               |	СУММА(СуммаДт),
	               |	СУММА(СуммаКт)
	               |ПО
	               |	СчетРасчетов,
	               |	Раздел
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблНастройкиСчетов";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаБлоки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Номер");
	ТаблицаОшибок.Колонки.Добавить("СчетРасчетов");
	ТаблицаОшибок.Колонки.Добавить("Текст");
	ТаблицаОшибок.Колонки.Добавить("Количество");
	
	Пока ВыборкаБлоки.Следующий() Цикл
		
		СчетРасчетов = ВыборкаБлоки.СчетРасчетов;
		
		ВыборкаРаздел = ВыборкаБлоки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаРаздел.Следующий() Цикл
			
			Раздел = ВыборкаРаздел.Раздел;
			ЭтоОбороты 		  = Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ОборотыНаСчетеРасчетов;
			ЭтоОплата  		  = Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ДанныеОбОплате;
			
			Выборка = ВыборкаРаздел.Выбрать();
			Пока Выборка.Следующий() Цикл
					
				// Операция ВГО
				Если Не ЗначениеЗаполнено(Выборка.ОперацияВГО)Тогда		
					ТекстСообщения = Нстр("ru = '- Не заполнено поле ""Операция ВГО"". (%КоличествоОшибок%)'");
					ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 1, СчетРасчетов, ТекстСообщения);
				КонецЕсли;
				
				// Валюта взаиморасчетов
				Если Не ЗначениеЗаполнено(Выборка.ВалютаВзаиморасчеты) Тогда
			    	ТекстСообщения = Нстр("ru = '- Не заполнено поле ""Валюта взаиморасчетов"". (%КоличествоОшибок%)'");
					ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 2, СчетРасчетов, ТекстСообщения);
				КонецЕсли;
				
				// Сумма взаиморасчетов
				Если (Выборка.СуммаДт <> 0 ИЛИ Выборка.СуммаКт <> 0) И Выборка.СуммаВзаиморасчеты = 0 Тогда
			    	ТекстСообщения = Нстр("ru = '- Обнаружена нулевая сумма взаиморасчетов. (%КоличествоОшибок%)'");
					ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 3, СчетРасчетов, ТекстСообщения);
				КонецЕсли;
				
				// Сумма Дт Кт
				Если (Выборка.СуммаДт = 0 И Выборка.СуммаКт = 0) И Выборка.СуммаВзаиморасчеты <> 0 Тогда
			    	ТекстСообщения = Нстр("ru = '- Обнаружена нулевая сумма. (%КоличествоОшибок%)'");
					ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 4, СчетРасчетов, ТекстСообщения);
				КонецЕсли;
								
				Если ЭтоОбороты ИЛИ ЭтоОплата Тогда
					
					// Кор счет
					Если Не ЗначениеЗаполнено(Выборка.КорСчет) Тогда
				    	ТекстСообщения = Нстр("ru = '- Не заполнено поле ""Кор. счет"". (%КоличествоОшибок%)'");
						ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 5, СчетРасчетов, ТекстСообщения);
					КонецЕсли;    				
					
					// Тип операции ВГО
					Если ЭтоОбороты Тогда		
						Если Выборка.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.ПогашениеЗадолженности Тогда
							ТекстСообщения = Нстр("ru = '- Неверный тип операции ВГО. Для оборотов на счете расчетов не может быть выбрана операция погашения задолженности. (%КоличествоОшибок%)'");
							ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 6, СчетРасчетов, ТекстСообщения);
						КонецЕсли; 		
					Иначе
						Если Выборка.ОперацияВГО.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности Тогда
							ТекстСообщения = Нстр("ru = '- Неверный тип операции ВГО. Для данных об оплате не может быть выбрана операция начисления задолженности. (%КоличествоОшибок%)'");
							ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 7, СчетРасчетов, ТекстСообщения);
						ИначеЕсли Выборка.ОперацияВГО.ВидОперации = Перечисления.бит_вго_ВидыОперацийВГО.Техническая Тогда
							ТекстСообщения = Нстр("ru = '- Неверный вид операции ВГО. Для данных об оплате не может быть выбрана техническая операция. (%КоличествоОшибок%)'");
							ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 8, СчетРасчетов, ТекстСообщения);
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;
				
				
				// Проверка заполненности субконто.
				Для  i = 1 По мКоличествоСубконто Цикл
					
					Если Выборка["ПроверкаСубконтоРасчетов_" + i] 
						И Не ЗначениеЗаполнено(Выборка["СубконтоРасчетов_" + i]) Тогда  				
						ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПараметрыСтроки(
									Нстр("ru = '- Не заполнено субконто %НомерСубконто% для счета расчетов %СчетРасчетов%. (%КоличествоОшибок%)'")
									, Новый Структура("НомерСубконто, СчетРасчетов", i, СчетРасчетов));
						ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 9, СчетРасчетов, ТекстСообщения);
					КонецЕсли;
					
					Если Выборка["ПроверкаСубконтоКор_" + i]
						И Не ЗначениеЗаполнено(Выборка["СубконтоКор_" + i]) Тогда
						ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПараметрыСтроки(
									Нстр("ru = '- Не заполнено субконто %НомерСубконто% для кор. счета %СчетРасчетов%. (%КоличествоОшибок%)'")
									, Новый Структура("НомерСубконто, СчетРасчетов", i, СчетРасчетов));
						ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 10, СчетРасчетов, ТекстСообщения);
					КонецЕсли; 			
				
				КонецЦикла;	
				 			
			КонецЦикла;
			
			Если Раздел = Перечисления.бит_вго_РазделыСверкиВГО.ИсходящееСальдо Тогда
				Если ВыборкаРаздел.СуммаДт < 0 ИЛИ ВыборкаРаздел.СуммаКт < 0 Тогда
					ТекстСообщения = Нстр("ru = '- Обнаружено отрицательное конечное сальдо.'");
					ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 11, СчетРасчетов, ТекстСообщения);				
				КонецЕсли; 				                                                     			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	 	    	
	// Проверка технических операций.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка"	   , Ссылка);
	Запрос.УстановитьПараметр("ВидОперации", Перечисления.бит_вго_ВидыОперацийВГО.Техническая);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТабЧастьПроводки.ОперацияВГО,
	|	ТабЧастьПроводки.СчетРасчетов,
	|	ТабЧастьПроводки.КорСчет,
	|	СУММА(ЕСТЬNULL(ТабЧастьПроводки.СуммаКт, 0)) КАК СуммаДт,
	|	СУММА(ЕСТЬNULL(ТабЧастьПроводки.СуммаДт, 0)) КАК СуммаКт,
	|	ОперацииВГО.ВидОперации
	|ПОМЕСТИТЬ ТаблДок
	|ИЗ
	|	Документ.бит_вго_АктСверкиВГО.Проводки КАК ТабЧастьПроводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_вго_ОперацииВГО КАК ОперацииВГО
	|		ПО ТабЧастьПроводки.ОперацияВГО = ОперацииВГО.Ссылка
	|ГДЕ
	|	ТабЧастьПроводки.Ссылка   = &Ссылка
	|	И ОперацииВГО.ВидОперации = &ВидОперации
    |
	|СГРУППИРОВАТЬ ПО
	|	ТабЧастьПроводки.СчетРасчетов,
	|	ТабЧастьПроводки.КорСчет,
	|	ТабЧастьПроводки.ОперацияВГО,
	|	ОперацииВГО.ВидОперации
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТехническиеОперации.ОперацияВГО,
	|	ТехническиеОперации.СчетРасчетов,
	|	ТехническиеОперации.КорСчет,
	|	СУММА(ТехническиеОперации.СуммаДт - ТехническиеОперации.СуммаКт) КАК Разница
	|ПОМЕСТИТЬ ТаблицаРазниц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблДок.ОперацияВГО КАК ОперацияВГО,
	|		ТаблДок.СчетРасчетов КАК СчетРасчетов,
	|		ТаблДок.КорСчет КАК КорСчет,
	|		ТаблДок.СуммаДт КАК СуммаДт,
	|		ТаблДок.СуммаКт КАК СуммаКт
	|	ИЗ
	|		ТаблДок КАК ТаблДок
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблДок.ОперацияВГО,
	|		ТаблДок.КорСчет,
	|		ТаблДок.СчетРасчетов,
	|		ТаблДок.СуммаДт,
	|		ТаблДок.СуммаКт
	|	ИЗ
	|		ТаблДок КАК ТаблДок) КАК ТехническиеОперации
    |
	|СГРУППИРОВАТЬ ПО
	|	ТехническиеОперации.КорСчет,
	|	ТехническиеОперации.СчетРасчетов,
	|	ТехническиеОперации.ОперацияВГО
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРазниц.ОперацияВГО,
	|	ТаблицаРазниц.СчетРасчетов,
	|	ТаблицаРазниц.КорСчет,
	|	ТаблицаРазниц.Разница
	|ИЗ
	|	ТаблицаРазниц КАК ТаблицаРазниц
	|ГДЕ
	|	ТаблицаРазниц.Разница <> 0
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблДок
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРазниц
	|
	|";
	Результат = Запрос.Выполнить();	
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		       		
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(
					Нстр("ru = '- Разница сумм Дт и Кт по техническим операциям не равна нулю. (Кор.счет: %1%, операция ВГО: %2%)'")
					, Выборка.КорСчет
					, Выборка.ОперацияВГО);
		ДобавитьСтрокуТаблОшибок(ТаблицаОшибок, 12, Выборка.СчетРасчетов, ТекстСообщения);
				
	КонецЦикла; 
	
	
	// Вывод ошибок.
	ТемпСчетРасчетов = Неопределено;
	ТаблицаОшибок.Свернуть("Номер, СчетРасчетов, Текст", "Количество");
	ТаблицаОшибок.Сортировать("СчетРасчетов, Номер");
	Если ТаблицаОшибок.Количество() > 0 Тогда 		
		
		Отказ = Истина;
		
		Для каждого СтрокаОшибки Из ТаблицаОшибок Цикл
			
			Если ТемпСчетРасчетов <> СтрокаОшибки.СчетРасчетов Тогда
				ТемпСчетРасчетов = СтрокаОшибки.СчетРасчетов;
			    ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Нстр("ru = 'Ошибки блока счета расчетов %1%:'"), ТемпСчетРасчетов);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			
			КонецЕсли;
		 		
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПараметрыСтроки(СтрокаОшибки.Текст, Новый Структура("КоличествоОшибок", СтрокаОшибки.Количество));
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЦикла;	
	
	КонецЕсли;
		
КонецПроцедуры // ПроверкаДанных()

#КонецОбласти

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РазделыСверкиВГО.Ссылка,
	|	РазделыСверкиВГО.Порядок
	|ПОМЕСТИТЬ РазделыВГО
	|ИЗ
	|	Перечисление.бит_вго_РазделыСверкиВГО КАК РазделыСверкиВГО
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РазделыВГО.Ссылка 					КАК Раздел,
	|	РазделыВГО.Порядок 					КАК Порядок,
	|	ТабЧастьПроводки.НомерСтроки,
	|	ТабЧастьПроводки.ОперацияВГО,
	|	ТабЧастьПроводки.СчетРасчетов,
	|	ТабЧастьПроводки.КорСчет,
	|	ТабЧастьПроводки.ВалютаВзаиморасчеты,
	|	ТабЧастьПроводки.ЦФО,
	|	ТабЧастьПроводки.ПодразделениеРасчетов,
	|	ТабЧастьПроводки.ПодразделениеКор,
	|	ТабЧастьПроводки.СубконтоРасчетов_1,
	|	ТабЧастьПроводки.СубконтоРасчетов_2,
	|	ТабЧастьПроводки.СубконтоРасчетов_3,
	|	ТабЧастьПроводки.СубконтоРасчетов_4,
	|	ТабЧастьПроводки.СубконтоКор_1,
	|	ТабЧастьПроводки.СубконтоКор_2,
	|	ТабЧастьПроводки.СубконтоКор_3,
	|	ТабЧастьПроводки.СубконтоКор_4,
	|	ЕСТЬNULL(ТабЧастьПроводки.СуммаДт, 0) КАК СуммаДт,
	|	ЕСТЬNULL(ТабЧастьПроводки.СуммаКт, 0) КАК СуммаКт,
	|	ЕСТЬNULL(ТабЧастьПроводки.СуммаВзаиморасчеты, 0) КАК СуммаВзаиморасчеты
	|ИЗ
	|	РазделыВГО КАК РазделыВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_вго_АктСверкиВГО.Проводки КАК ТабЧастьПроводки
	|		ПО РазделыВГО.Ссылка = ТабЧастьПроводки.Раздел
	|ГДЕ
	|	ТабЧастьПроводки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|
	|";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоПроводкам = РезультатЗапроса.Выгрузить();
		
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Проводки", ТаблицаПоПроводкам);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура записывает дополнительные ресурсы в запись.
// 
// Параметры:
//  Движение            - Запись регистра.
//  СтруктураКурсыВалют - Струткруа.
//  ТипВалюты			- Строка.
// 
Процедура УстановитьРесурсДвижения(Движение, СтруктураКурсыВалют, ТипВалюты, ДтКт)
	
	Если Движение.ОперацияВГО = Справочники.бит_вго_ОперацииВГО.НачальноеСальдо Тогда		
		СтруткураКурсаПериод = СтруктураКурсыВалют.НаДатуНачала;       		
	ИначеЕсли Движение.ОперацияВГО = Справочники.бит_вго_ОперацииВГО.КонечноеСальдо Тогда 			
		СтруткураКурсаПериод = СтруктураКурсыВалют.НаДатуОкончания; 
	Иначе	
		СтруткураКурсаПериод = СтруктураКурсыВалют.СреднийКурс;				
	КонецЕсли;
														
	ВалютаДляПересчета = СтруткураКурсаПериод[ТипВалюты].Валюта;
	Если ВалютаДляПересчета = ВалютаДокумента Тогда
		СуммаРезультат = Движение.Сумма;		
	Иначе	
		СуммаРезультат = ПересчитатьСуммуПоНовойВалюте(Движение.Сумма, ВалютаДокумента, ВалютаДляПересчета
														, СтруткураКурсаПериод.Документ
														, СтруткураКурсаПериод[ТипВалюты]);													
	КонецЕсли;
													
	Движение["Сумма" + ТипВалюты] = СуммаРезультат;
	
	Если ДтКт = "Дт" Тогда
		Движение["Сумма" + ТипВалюты + "Дт"] = СуммаРезультат;
	Иначе
		Движение["Сумма" + ТипВалюты + "Кт"] = СуммаРезультат;
	КонецЕсли;
	
КонецПроцедуры // УстановитьРесурсДвижения()

// Процедура записывает движения по регистру накопления бит_вго_ДанныеКорректировок.
// 
// Параметры:
//  ТаблицаДвижений			- ТаблицаЗначений.
//  СтруктураШапкиДокумента - Структура.
//  СтруктураКурсыВалют 	- Структура.
//  ТекСтрокаПроводки  		- Строка таблицы значений.
// 
Процедура ДобавитьДвижениеПоРегистру_бит_вго_ДанныеКорректировок(ТаблицаДвижений, СтруктураШапкиДокумента, СтруктураКурсыВалют, ТекСтрокаПроводки)

	Движение = ТаблицаДвижений.Добавить();
	
	Движение.ТипДанныхКорректировок = Перечисления.бит_вго_ТипыДанныхКорректировок.СверкаВГО;
	
	ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
	Движение.Период 	= КонецДня(СтруктураШапкиДокумента.ДатаОкончания);
	Движение.Активность	= Истина;
	
	Движение.ОперацияВГО = ТекСтрокаПроводки.ОперацияВГО;
	Движение.ЦФО	 	 = ТекСтрокаПроводки.ЦФО;
	Движение.Валюта 	 = СтруктураШапкиДокумента.ВалютаДокумента;
	
	Если ТекСтрокаПроводки.СуммаКт = 0 Тогда
		
		ДтКт = "Дт";
		Движение.СчетДт 		 = ТекСтрокаПроводки.СчетРасчетов;
		Движение.СчетКт 		 = ТекСтрокаПроводки.КорСчет;
		Движение.ПодразделениеДт = ТекСтрокаПроводки.ПодразделениеРасчетов;
		Движение.ПодразделениеКт = ТекСтрокаПроводки.ПодразделениеКор;
		Движение.СубконтоДт_1    = ТекСтрокаПроводки.СубконтоРасчетов_1;
		Движение.СубконтоДт_2    = ТекСтрокаПроводки.СубконтоРасчетов_2;
		Движение.СубконтоДт_3    = ТекСтрокаПроводки.СубконтоРасчетов_3;
		Движение.СубконтоДт_4    = ТекСтрокаПроводки.СубконтоРасчетов_4;
		Движение.СубконтоКт_1    = ТекСтрокаПроводки.СубконтоКор_1;
		Движение.СубконтоКт_2    = ТекСтрокаПроводки.СубконтоКор_2;
		Движение.СубконтоКт_3    = ТекСтрокаПроводки.СубконтоКор_3;
		Движение.СубконтоКт_4    = ТекСтрокаПроводки.СубконтоКор_4;
		     		
	Иначе	
		
		ДтКт = "Кт";
		Движение.СчетДт 		 = ТекСтрокаПроводки.КорСчет;
		Движение.СчетКт 		 = ТекСтрокаПроводки.СчетРасчетов;
		Движение.ПодразделениеДт = ТекСтрокаПроводки.ПодразделениеКор;
		Движение.ПодразделениеКт = ТекСтрокаПроводки.ПодразделениеРасчетов;
		Движение.СубконтоДт_1    = ТекСтрокаПроводки.СубконтоКор_1;
		Движение.СубконтоДт_2    = ТекСтрокаПроводки.СубконтоКор_2;
		Движение.СубконтоДт_3    = ТекСтрокаПроводки.СубконтоКор_3;
		Движение.СубконтоДт_4    = ТекСтрокаПроводки.СубконтоКор_4;
		Движение.СубконтоКт_1    = ТекСтрокаПроводки.СубконтоРасчетов_1;
		Движение.СубконтоКт_2    = ТекСтрокаПроводки.СубконтоРасчетов_2;
		Движение.СубконтоКт_3    = ТекСтрокаПроводки.СубконтоРасчетов_3;
		Движение.СубконтоКт_4    = ТекСтрокаПроводки.СубконтоРасчетов_4;
		
	КонецЕсли;
	
	Движение.Сумма 			 		 = ТекСтрокаПроводки["Сумма" + ДтКт];
	Движение["Валюта" + ДтКт]        = ТекСтрокаПроводки.ВалютаВзаиморасчеты;
	Движение["ВалютнаяСумма" + ДтКт] = ТекСтрокаПроводки.СуммаВзаиморасчеты;
	
	// Сумма регл.
	УстановитьРесурсДвижения(Движение, СтруктураКурсыВалют, "Регл", ДтКт);
	// Сумма упр.
	УстановитьРесурсДвижения(Движение, СтруктураКурсыВалют, "Упр", ДтКт);
	// Сумма МСФО или сценария.
    Если РегистрБухгалтерии.ИмяОбъекта = "бит_Бюджетирование" Тогда
    	УстановитьРесурсДвижения(Движение, СтруктураКурсыВалют, "Сценарий", ДтКт);	
 	ИначеЕсли РегистрБухгалтерии.ИмяОбъекта = "бит_Дополнительный_2" Тогда
    	УстановитьРесурсДвижения(Движение, СтруктураКурсыВалют, "МУ", ДтКт);
	КонецЕсли;
		
КонецПроцедуры // ДобавитьДвижениеПоРегистру_бит_вго_ДанныеКорректировок()

// Процедура добавляет в таблицу движений строки по эффекту пересчета.
// 
// Параметры:
//  Параметр1  - Тип_описание.
//  Параметр2  - Тип_описание.
// 
Процедура ДобавитьДвиженияЭффектОтПересчета(ТаблицаДвижений, СтруктураШапкиДокумента)

	ТекОперацияВГО    = Справочники.бит_вго_ОперацииВГО.ЭффектОтПересчета;
	ТаблицаДвиженийРн = ТаблицаДвижений.Скопировать(,"ОперацияВГО, СчетДт, СчетКт, СуммаУпр, СуммаУпрДт, СуммаУпрКт");
	     	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АктивноПассивный" , ВидСчета.АктивноПассивный);
	Запрос.УстановитьПараметр("Пассивный"		 , ВидСчета.Пассивный);
	Запрос.УстановитьПараметр("КонечноеСальдо"   , Справочники.бит_вго_ОперацииВГО.КонечноеСальдо);
	Запрос.УстановитьПараметр("Ссылка"  		 , Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДвиженийРн", ТаблицаДвиженийРн);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Документ.СчетРасчетов КАК СчетРасчетов
	|ПОМЕСТИТЬ СчетаРасчетов
	|ИЗ
	|	Документ.бит_вго_АктСверкиВГО.Проводки КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
    |
	|СГРУППИРОВАТЬ ПО
	|	Документ.СчетРасчетов
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДвижений.ОперацияВГО,
	|	ВЫБОР
	|		КОГДА ТаблицаДвижений.ОперацияВГО = &КонечноеСальдо
	|			ТОГДА ТаблицаДвижений.ОперацияВГО
	|		ИНАЧЕ ""Обороты""
	|	КОНЕЦ КАК ГруппаОперацийВГО,
	|	ТаблицаДвижений.СчетДт,
	|	ТаблицаДвижений.СчетКт,
	|	ЕСТЬNULL(ТаблицаДвижений.СуммаУпр, 0) 	КАК СуммаУпр,
	|	ЕСТЬNULL(ТаблицаДвижений.СуммаУпрДт, 0) КАК СуммаУпрДт,
	|	ЕСТЬNULL(ТаблицаДвижений.СуммаУпрКт, 0) КАК СуммаУпрКт
	|ПОМЕСТИТЬ ТаблицаДвиженийДокумента
	|ИЗ
	|	&ТаблицаДвиженийРн КАК ТаблицаДвижений
    |
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКорректировок.ГруппаОперацийВГО,
	|	ВЫБОР
	|		КОГДА ДанныеКорректировок.СуммаУпрКт = 0
	|			ТОГДА ДанныеКорректировок.СчетДт
	|		ИНАЧЕ ДанныеКорректировок.СчетКт
	|	КОНЕЦ КАК СчетРасчетов,
	|	СУММА(ДанныеКорректировок.СуммаУпр)   КАК СуммаУпр,
	|	СУММА(ДанныеКорректировок.СуммаУпрДт) КАК СуммаУпрДт,
	|	СУММА(ДанныеКорректировок.СуммаУпрКт) КАК СуммаУпрКт
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	ТаблицаДвиженийДокумента КАК ДанныеКорректировок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКорректировок.ГруппаОперацийВГО,
	|	ВЫБОР
	|		КОГДА ДанныеКорректировок.СуммаУпрКт = 0
	|			ТОГДА ДанныеКорректировок.СчетДт
	|		ИНАЧЕ ДанныеКорректировок.СчетКт
	|	КОНЕЦ
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаРасчетов.СчетРасчетов,
	|	ВремТабл.СчетРасчетов.Вид КАК Вид,
	|	ЕСТЬNULL(ВремТаблКонечное.СуммаУпр, 0) КАК КонечноеСальдо,
	|	ВЫБОР
	|		КОГДА ВремТабл.СчетРасчетов.Вид = &Пассивный ИЛИ
	|				(ВремТабл.СчетРасчетов.Вид = &АктивноПассивный И ВремТабл.СуммаУпрДт < ВремТабл.СуммаУпрКт)
	|			ТОГДА ЕСТЬNULL(ВремТаблКонечное.СуммаУпр, 0) - (ВремТабл.СуммаУпрКт - ВремТабл.СуммаУпрДт)
	|		ИНАЧЕ ЕСТЬNULL(ВремТаблКонечное.СуммаУпр, 0) - (ВремТабл.СуммаУпрДт - ВремТабл.СуммаУпрКт)
	|	КОНЕЦ КАК ЭффектОтПересчета
	|ИЗ
	|	СчетаРасчетов КАК СчетаРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТабл КАК ВремТаблКонечное
	|		ПО СчетаРасчетов.СчетРасчетов = ВремТаблКонечное.СчетРасчетов
	|			И (ВремТаблКонечное.ГруппаОперацийВГО = &КонечноеСальдо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТабл КАК ВремТабл
	|		ПО СчетаРасчетов.СчетРасчетов = ВремТабл.СчетРасчетов
	|			И (ВремТабл.ГруппаОперацийВГО <> &КонечноеСальдо)
    |
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СчетаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДвиженийДокумента
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТабл
    |
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	 		
		Результат_Сумма  = Выборка.ЭффектОтПересчета;
		
		Если Результат_Сумма <> 0 Тогда
			
			Движение = ТаблицаДвижений.Добавить();
		
			Движение.ТипДанныхКорректировок = Перечисления.бит_вго_ТипыДанныхКорректировок.СверкаВГО;
			
			ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
			Движение.Период 	= КонецДня(СтруктураШапкиДокумента.ДатаОкончания);
			Движение.Активность	= Истина;
			
			Движение.ОперацияВГО = ТекОперацияВГО;
					
			Если Результат_Сумма < 0 Тогда 
				// Кт
				Движение.СчетКт 	= Выборка.СчетРасчетов;
				Движение.СуммаУпр   = -Результат_Сумма;
				Движение.СуммаУпрКт = -Результат_Сумма;
			Иначе
				// Дт
				Движение.СчетДт 	= Выборка.СчетРасчетов;
				Движение.СуммаУпр   = Результат_Сумма;
				Движение.СуммаУпрДт = Результат_Сумма;
			КонецЕсли;
		
		КонецЕсли;
				
	КонецЦикла; 	

КонецПроцедуры // ДобавитьДвиженияЭффектОтПересчета()
	
// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаПроводки =  СтруктураТаблиц.Проводки;
		
	// Регистр накопления бит_вго_ДанныеКорректировок.
	Движения.бит_вго_ДанныеКорректировок.Записывать = Истина;
	Движения.бит_вго_ДанныеКорректировок.Очистить();
	
		
	// Регистр накопления бит_вго_ДанныеКорректировок.
	ТаблицаДвижений = Движения.бит_вго_ДанныеКорректировок.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для Каждого ТекСтрокаПроводки Из ТаблицаПроводки Цикл
		
		// Регистр накопления бит_вго_ДанныеКорректировок.
		ДобавитьДвижениеПоРегистру_бит_вго_ДанныеКорректировок(ТаблицаДвижений, СтруктураШапкиДокумента, СтруктураКурсыВалют, ТекСтрокаПроводки);
			
	КонецЦикла;
	
	// Регистр накопления бит_вго_ДанныеКорректировок.
	ДобавитьДвиженияЭффектОтПересчета(ТаблицаДвижений, СтруктураШапкиДокумента);
	
	Движения.бит_вго_ДанныеКорректировок.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_вго_ДанныеКорректировок.ДобавитьДвижение();
		
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконто = 4;

#КонецОбласти

#КонецЕсли