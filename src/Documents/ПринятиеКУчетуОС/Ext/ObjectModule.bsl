#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	Иначе
		НачислятьАмортизациюБУ = Истина;
		НачислятьАмортизациюНУ = Истина;
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Специфические для конкретного документа действия
	Если Не ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетУчетаВнеоборотногоАктива) Тогда
		СчетУчетаВнеоборотногоАктива = Документы.ПринятиеКУчетуОС.СчетУчетаВнеоборотногоАктива(ВидОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПроведения = Документы.ПринятиеКУчетуОС.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	
	//ОК Калинин М. 130313	
	// ОКЕЙ Цветков А.(СофтЛаб) Начало 2018-06-06 (#3014)
	////ОК Калинин М. 130313	
	//Если ПодразделениеОрганизации.ОК_КонтрольОбъекта тогда
	//	СтруктураПолей_ = Новый Структура;
	//	СтруктураПолей_.Вставить("НомерСтроки",      "НомерСтроки");
	//	СтруктураПолей_.Вставить("Объект", "Объект");
	//
	//	ОК_ОбщегоНазначения.ПроверкаУказанныхОбъектовСтроительстваВДокументе(Новый Структура("Подразделение,СпособОтраженияРасходов,ТаблицаОС",
	//																	ПодразделениеОрганизации,СпособыОтраженияРасходовПоАмортизации,
	//																	УчетОС.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС",СтруктураПолей_).Выгрузить())
	//																	, Отказ, СокрЛП(ЭтотОбъект));
	//конецесли;																	
	////ОК Калинин М. 
	// ОКЕЙ Цветков А.(СофтЛаб) Конец 2018-06-06 (#3014)
																
	//ОК Калинин М. 
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

	УчетОС.ПроверитьВозможностьИзмененияСостоянияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.СостоянияОС,
		Отказ);

	УчетОС.ПроверитьВозможностьПримененияСпособаНачисленияАмортизацииБУ(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.НачислениеАмортизацииПриПринятииКУчету,
		Отказ);

	// Таблица списанных товаров
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(
		ПараметрыПроведения.СписаниеТоваровТаблица,
		ПараметрыПроведения.СписаниеТоваров,
		Отказ);
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-02 (#4041)
	ПроверкаНастроекНачисленияАммортизации(ТаблицаСписанныеТовары,Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-02 (#4041) 
	
	// Таблица оборудование
	ТаблицаОборудование = УчетОС.ПодготовитьТаблицуОборудование(
		ТаблицаСписанныеТовары,
		ПараметрыПроведения.СписаниеТоваров,
		Отказ);
		
	ТаблицаПредметыАренды = Документы.ПринятиеКУчетуОС.ПодготовитьТаблицуПредметыАренды(
		ПараметрыПроведения.ПредметыАрендыТаблица, ПараметрыПроведения.ПредметыАренды, Отказ);

	// Таблица первоначальных сведений ОС
	ТаблицаПервоначальныеСведенияОС = УчетОС.ПодготовитьТаблицуПервоначальныеСведенияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ТаблицаСписанныеТовары,
		ТаблицаПредметыАренды,
		ПараметрыПроведения.ПервоначальныеСведенияОСБУ,
		Отказ);

	// Таблица первоначальных сведений ОС (НУ)
	ТаблицаПервоначальныеСведенияОСНУ = УчетОС.ПодготовитьТаблицуПервоначальныеСведенияОСНУ(
		ТаблицаПервоначальныеСведенияОС,
		ПараметрыПроведения.ПервоначальныеСведенияОСНУ,
		Отказ);

	// Таблица первоначальных сведений ОС (УСН)
	ТаблицаПервоначальныеСведенияОСУСН = УчетОС.ПодготовитьТаблицуПервоначальныеСведенияОСУСН(
		ТаблицаПервоначальныеСведенияОС,
		ПараметрыПроведения.ПервоначальныеСведенияОСУСН,
		Отказ);
		
	// Таблица параметров амортизации (БУ)
	ТаблицаПараметровАмортизацииБУ = УчетОС.ПодготовитьТаблицуПараметрыАмортизацииОСБУ(
		ТаблицаПервоначальныеСведенияОС,
		ПараметрыПроведения.ПараметрыАмортизацииОСБУ,
		Отказ);

	// Таблица начисления амортизации при принятии к учету
	ТаблицаНачислениеАмортизацииПриПринятииКУчету = УчетОС.ПодготовитьТаблицуНачислениеАмортизацииПриПринятииКУчету(
		ТаблицаПервоначальныеСведенияОС,
		ПараметрыПроведения.НачислениеАмортизацииПриПринятииКУчету,
		Отказ);
		
	// Таблица амортизационной премии
	ТаблицаАмортизационнойПремии = УчетОС.ПодготовитьТаблицуАмортизационнаяПремия(
		ТаблицаПервоначальныеСведенияОСНУ,
		ПараметрыПроведения.АмортизационнаяПремия,
		Отказ);

	// Таблица включения в расходы при принятии к учету (НУ)
	ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ = УчетОС.ПодготовитьТаблицуСписаниеНаРасходыНУ(
		ТаблицаПервоначальныеСведенияОС,
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ,
		Отказ);

	// Таблица параметров амортизации (НУ)
	ТаблицаПараметровАмортизацииНУ = УчетОС.ПодготовитьТаблицуПараметрыАмортизацииОСНУ(
		ТаблицаПервоначальныеСведенияОСНУ,
		ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ,
		ПараметрыПроведения.ПараметрыАмортизацииОСНУ,
		Отказ);
		
	// Учет доходов и расходов ИП
	ТаблицыМатериаловПродукцииИП = Документы.ПринятиеКУчетуОС.ПодготовитьТаблицыМатериаловПродукцииИП(
		ТаблицаСписанныеТовары, ПараметрыПроведения.ПервоначальныеСведенияОСИП);
	
	ТаблицыСписанияТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыСписанияМПЗ(
		ТаблицыМатериаловПродукцииИП.ТаблицаМатериалов, ПараметрыПроведения.СписаниеТоваров, Отказ);
	
	ТаблицаПоступлениеПродукцииТоваровИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступлениеПродукции(
		ТаблицыМатериаловПродукцииИП.ПолученоПродукции, ПараметрыПроведения.СписаниеТоваров);
	
	ТаблицаПринятияКУчетуОСИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПринятияКУчетуОС(
		ПараметрыПроведения.ОсновныеСредства, ТаблицыСписанияТоваровИП.СтоимостьПродукции, ПараметрыПроведения.ПервоначальныеСведенияОСИП);
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	УчетОС.СформироватьДвиженияИзменениеСостоянияОС(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.СостоянияОС,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияРегистрацияСобытияОС(
		ПараметрыПроведения.СобытияОСТаблица,
		ПараметрыПроведения.СобытияОС,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияРегистрацияПервоначальныхСведенийОСБУ(
		ТаблицаПервоначальныеСведенияОС,
		ПараметрыПроведения.ПервоначальныеСведенияОСБУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеМестонахожденияОСБУ(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.МестонахождениеОСБУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияРегистрацияСчетовБухгалтерскогоУчетаОС(
		ПараметрыПроведения.СчетаБухгалтерскогоУчетаОСТаблица,
		ПараметрыПроведения.СчетаБухгалтерскогоУчетаОС,
		Движения, Отказ);

	УчетТоваров.СформироватьДвиженияСписаниеТоваров(
		ТаблицаОборудование,
		ПараметрыПроведения.СписаниеТоваров,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияПринятиеКУчетуОСОбъектыСтроительства(
		ПараметрыПроведения.ПринятиеКУчетуОбъектыСтроительстваТаблица,
		ПараметрыПроведения.ПринятиеКУчетуОбъектыСтроительства,
		Движения, Отказ);
		
	УчетОС.СформироватьДвиженияПринятиеКУчетуОСПредметыАренды(
		ТаблицаПредметыАренды, 
		ПараметрыПроведения.ПредметыАренды, 
		Движения, Отказ);

	УчетОС.СформироватьДвиженияПринятиеКУчетуОСПоРезультатамИнвентаризации(
		ПараметрыПроведения.ПринятиеКУчетуПоРезультатамИнвентаризацииТаблица,
		ПараметрыПроведения.ПринятиеКУчетуПоРезультатамИнвентаризации,
		Движения, Отказ);

	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ТаблицаНачислениеАмортизацииПриПринятииКУчету,
		ПараметрыПроведения.НачислениеАмортизацииПриПринятииКУчету,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСБУ(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.НачислениеАмортизацииОСБУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеГрафиковДляАмортизацииОСБУ(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.ГрафикиАмортизацииОСБУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.СпособыОтраженияРасходовПоАмортизацииОСБУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзмененияПараметровАмортизацииОСБУ(
		ТаблицаПараметровАмортизацииБУ,
		ПараметрыПроведения.ПараметрыАмортизацииОСБУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАренднымПлатежамОСНУ(
		ПараметрыПроведения.ОсновныеСредства,
		ПараметрыПроведения.СпособыОтраженияРасходовПоАренднымПлатежамОСНУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеПараметровАмортизацииОСНУ(
		ТаблицаПараметровАмортизацииНУ,
		ПараметрыПроведения.ПараметрыАмортизацииОСНУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияОтражениеАмортизационнойПремии(
		ТаблицаАмортизационнойПремии,
		ПараметрыПроведения.АмортизационнаяПремия,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ(
		ПараметрыПроведения.НачислениеАмортизацииОССпециальныйКоэффициентНУТаблица,
		ПараметрыПроведения.НачислениеАмортизацииОСНУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияНачислениеАмортизацииОССпециальныйКоэффициентНУ(
		ПараметрыПроведения.НачислениеАмортизацииОССпециальныйКоэффициентНУТаблица,
		ПараметрыПроведения.НачислениеАмортизацииОССпециальныйКоэффициентНУ,
		Движения, Отказ);

	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ,
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ,
		Движения, Отказ);

	УчетОС.СформироватьДвиженияРегистрацияПервоначальныхСведенийОСНУ(
		ТаблицаПервоначальныеСведенияОСНУ,
		ПараметрыПроведения.ПервоначальныеСведенияОСНУ,
		Движения, Отказ);
		
	УчетОС.СформироватьДвиженияРегистрацияПервоначальныхСведенийОСУСН(
		ТаблицаПервоначальныеСведенияОСУСН,
		ПараметрыПроведения.ПервоначальныеСведенияОСУСН,
		Движения, Отказ);
		
	УчетОС.СформироватьДвиженияРегистрацияОплатОсновныхСредствДляУСН(
		ПараметрыПроведения.ОплатаОсновныхСредствДляУСН,
		ПараметрыПроведения.ПервоначальныеСведенияОСУСН,
		Движения, Отказ);
		
	// Учет НДС
	УчетНДС.СформироватьДвиженияПринятиеНаУчетОС(
		ПараметрыПроведения.ТоварыНДС,
		ТаблицаСписанныеТовары,
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-25 (#4405)
		ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ,
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-25 (#4405)
		ПараметрыПроведения.РеквизитыНДС,
		Движения, Отказ);
		
	УчетНДСРаздельный.СформироватьДвиженияПринятиеНаУчетОС(
		ПараметрыПроведения.ОбъектыСтроительстваНДС,
		ПараметрыПроведения.ТаблицаСписанныеОбъектыСтроительстваНДС,
		ПараметрыПроведения.РеквизитыНДС,
		Движения, Отказ);
		
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияСписаниеМПЗ(
		ТаблицыСписанияТоваровИП,
		ПараметрыПроведения.СписаниеТоваров, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеПродукции(
		ТаблицаПоступлениеПродукцииТоваровИП,
		ТаблицыСписанияТоваровИП.СтоимостьПродукции,
		ПараметрыПроведения.СписаниеТоваров, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПринятиеКУчетуОС(
		ТаблицаПринятияКУчетуОСИП,
		ПараметрыПроведения.ПервоначальныеСведенияОСИП, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.РегистрацияСведенийОбОплатеОСиНМА(
		ТаблицаПринятияКУчетуОСИП,
		ПараметрыПроведения.ПервоначальныеСведенияОСИП, Движения, Отказ);
		
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
	ТаблицыДляОтраженияВПрослеживаемости = ПодготовитьТаблицыДляОтраженияВПрослеживаемости(
		ПараметрыПроведения.ПрослеживаемыеТовары,
		ПараметрыПроведения.ПрослеживаемыеОС,
		ПараметрыПроведения.РеквизитыНДС);
		
	ПрослеживаемостьБП.СформироватьДвиженияРеализацияТоваров(
		ТаблицыДляОтраженияВПрослеживаемости.ПрослеживаемыеТоварыДляСписания,
		Неопределено,
		ПараметрыПроведения.РеквизитыНДС,
		Движения);
	
	ПрослеживаемостьБП.СформироватьДвиженияСписанияОС(
		ТаблицыДляОтраженияВПрослеживаемости.ПрослеживаемыеОСДляРасхода,
		Неопределено,
		ПараметрыПроведения.РеквизитыНДС,
		Движения);
	
	ПрослеживаемостьБП.СформироватьДвиженияПоступлениеОС(
		ТаблицыДляОтраженияВПрослеживаемости.ПрослеживаемыеОСДляПрихода,
		ПараметрыПроведения.ПрослеживаемыеОперации,
		Неопределено,
		ПараметрыПроведения.РеквизитыНДС,
		Движения);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;
	
	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС",
		Новый Структура("ОсновноеСредство"), Отказ);
		
	ПлательщикНалогаНаПрибыль	= УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПлательщикНДФЛ				= УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	РаздельныйУчетНДСНаСчете19	= УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	
	Если ПлательщикНалогаНаПрибыль Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииНУ");
	КонецЕсли;
	
	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОС.СпособУчетаНДС");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаВнеоборотногоАктива");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходов");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьБУ");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПредметыАренды Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУ");
		Если СпособПоступления <> Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга
			Или Не НалоговыйУчетИмуществаВедетЛизингополучатель Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		
		ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Дата);
		
		Если ПоддержкаПБУ18 И (СтоимостьНУ + СтоимостьПР + СтоимостьВР = 0) Тогда
			ТекстСообщения = НСтр("ru = 'Поля ""Стоимость (НУ)"", ""Стоимость (ПР)"", ""Стоимость (ВР)"" не заполнены.
				|Хотя бы одно из этих полей должно быть заполнено.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СтоимостьНУ");
		КонецЕсли;
		
		Если ПоддержкаПБУ18
			Или УчетнаяПолитика.ПрименяетсяУСН(Организация, Дата)
			Или УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Дата)
			Или УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Организация, Дата) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУ");
		КонецЕсли;
		
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ОбъектСтроительства");
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУ");
	КонецЕсли;

	Если ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетНачисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособыОтраженияРасходовПоАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчета");
	КонецЕсли;

	Если ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			ИЛИ СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскоренияБУ");
	КонецЕсли;

	Если ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			ИЛИ (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			И СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
			И СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
	КонецЕсли;

	Если ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
	ИЛИ (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
		И СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ГодоваяНормаАмортизацииБУ");
	КонецЕсли;

	Если ПорядокПогашенияСтоимостиБУ <> Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			ИЛИ (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега
			И СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПредполагаемыйОбъемПродукцииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработкиБУ");
	КонецЕсли;

	Если ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособыОтраженияРасходовПоАмортизации");
	КонецЕсли;
	
	Если НЕ ПлательщикНалогаНаПрибыль И НЕ ПлательщикНДФЛ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
	КонецЕсли;
	
	Если НЕ ПлательщикНалогаНаПрибыль Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаЗатратПоАмортизационнойПремии");
	КонецЕсли;
	
	Если НЕ ПлательщикНДФЛ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяПрочихРасходов");
	КонецЕсли;
	
	Если НЕ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
	КонецЕсли;
	
	Если НЕ НачислятьАмортизациюНУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
	КонецЕсли;
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
			ИЛИ ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаЗатратПоАмортизационнойПремии");
	КонецЕсли;

	Если ПорядокВключенияСтоимостиВСоставРасходовНУ <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяПрочихРасходов");
	КонецЕсли;

	Если НЕ УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата) 
		Или ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПредметыАренды Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьУСН");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПриобретения");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияУСН");
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовУСН");
		МассивНепроверяемыхРеквизитов.Добавить("Оплата.ОсновноеСредство");
		МассивНепроверяемыхРеквизитов.Добавить("Оплата.ДатаОплаты");
		МассивНепроверяемыхРеквизитов.Добавить("Оплата.СуммаОплаты");
	Иначе
		Если Дата >= Дата("20060101") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовУСН");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации
		ИЛИ Не ПлательщикНалогаНаПрибыль
		Или ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПредметыАренды 
		И СпособПоступления <> Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПоАренднымПлатежам");
		МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
	ИначеЕсли НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПредметыАренды Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПредметАренды");
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);
		
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации
		И ОтражатьВПрослеживаемости Тогда
		Для Каждого СтрокаТаблицы Из ОС Цикл
			Префикс = "ОС[%1].";
			Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			
			ИмяСписка = НСтр("ru = 'Основные средства'");
			
			// Проверка заполнения таблицы СведенияПрослеживаемости
			Если СтрокаТаблицы.ПрослеживаемыйТовар Тогда
				
				Отбор = Новый Структура("ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторСтроки);
				МассивСтрокСведенияПрослеживаемости = СведенияПрослеживаемости.Выгрузить(Отбор);
				КоличествоРНПТ = МассивСтрокСведенияПрослеживаемости.Количество();
				Если КоличествоРНПТ = 0 Тогда
					ТекстСообщенияРасшифрвка = НСтр("ru = 'Для прослеживаемого объекта ОС необходимо указать номер РНПТ.'");
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность", НСтр("ru = 'РНПТ'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщенияРасшифрвка);
					Поле = Префикс + "РНПТ";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				ИначеЕсли КоличествоРНПТ > 1 Или Не ЗначениеЗаполнено(МассивСтрокСведенияПрослеживаемости[0].Номенклатура) Тогда
					Если СтоимостьБУ < МассивСтрокСведенияПрослеживаемости.Итог("Сумма") Тогда
						ТекстСообщенияРасшифрвка = НСтр("ru = 'Итоговая сумма по таблице с данными РНПТ превышает стоимость основного средства.'");
						ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список","Корректность", НСтр("ru = 'РНПТ'"),
						СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщенияРасшифрвка);
						Поле = Префикс + "РНПТ";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		// У ОС должен быть признак, прослеживаемый товар 
		ПрослеживаемаяНоменклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ПрослеживаемыйТовар");
		Если ПрослеживаемаяНоменклатура Тогда
			
			Для Каждого СтрокаТаблицы Из ОС Цикл
				Префикс = "ОС[%1].";
				Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Префикс, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
				
				ИмяСписка = НСтр("ru = 'Основные средства'");
				
				Если Не СтрокаТаблицы.ПрослеживаемыйТовар Тогда
					ТекстСообщенияРасшифровка = НСтр("ru = 'Принятие к учету осуществляется с оборудования с РНПТ. Установите для основного средства признак прослеживаемости.'");
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность", НСтр("ru = 'Основное средство'"),
					СтрокаТаблицы.НомерСтроки, ИмяСписка, ТекстСообщенияРасшифровка);
					Поле = Префикс + "ОсновноеСредство";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства И ВедетсяУчетПрослеживаемыхТоваров Тогда
		ПрослеживаемостьБП.ПроверитьНеобходимостьВводаПрослеживаемыхОС(ЭтотОбъект, Отказ);
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
		РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорПередЗаписью(ЭтотОбъект);
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата) Тогда
		Если Оплата.Количество() > 0 Тогда
			КоличествоСтрок = Оплата.Количество();
			Для Счетчик = 1 По (КоличествоСтрок) Цикл
				Строка = Оплата[КоличествоСтрок - Счетчик];
				Если ОС.Найти(Строка.ОсновноеСредство, "ОсновноеСредство") = Неопределено Тогда
					Оплата.Удалить(КоличествоСтрок - Счетчик);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Оплата.Очистить();
	КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
	Для Каждого Строка Из ОС Цикл
		Если Не ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
			Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
	КонецЦикла;
		
	ПрослеживаемыеОС = ОС.НайтиСтроки(Новый Структура("ПрослеживаемыйТовар", Истина));
	ЕстьПрослеживаемыеОС = ПрослеживаемыеОС.Количество() <> 0;
	
	Если ЕстьПрослеживаемыеОС И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
			ПрослеживаемостьБП.ПодобратьРНПТ(ЭтотОбъект, Отказ, "ОС");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
			ПрослеживаемостьБП.ПодобратьРНПТОССоставное(ЭтотОбъект, Отказ);
		ИначеЕсли НЕ (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации 
			И ОтражатьВПрослеживаемости) Тогда
			СведенияПрослеживаемости.Очистить();
		КонецЕсли;
	ИначеЕсли Не ЕстьПрослеживаемыеОС Тогда
		СведенияПрослеживаемости.Очистить();
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(Дата);
		
	Если ОС.Количество() > 0 Тогда
		МассивОС = Новый Массив(ОС.Количество());
		ОС.ЗагрузитьКолонку(МассивОС, "ИдентификаторСтроки");
	КонецЕсли;
	
	СведенияПрослеживаемости.Очистить();
	РаботаСНоменклатурой.ОбновитьПризнакПрослеживаемости(ОС, ВедетсяУчетПрослеживаемыхТоваров, Истина);
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
	ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
			И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя()));
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

		Если Основание.ЭтоГруппа Тогда
			ТекстСообщения = НСтр("ru = 'Ввод принятия к учету ОС на основании группы ОС невозможен!
				|Выберите ОС. Для раскрытия группы используйте клавиши Ctrl и стрелку вниз'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;

		СтрокаТабличнойЧасти = ОС.Добавить();

		СтрокаТабличнойЧасти.ОсновноеСредство = Основание;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
		//СтрокаТабличнойЧасти.ИнвентарныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Код");
		ДанныеПоОС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Код, ПрослеживаемыйТовар");
		СтрокаТабличнойЧасти.ИнвентарныйНомер = ДанныеПоОС.Код;
		Если ВедетсяУчетПрослеживаемыхТоваров Тогда
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = ДанныеПоОС.ПрослеживаемыйТовар;
		Иначе
			СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
		КонецЕсли;
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияОС") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

		ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации;
		СтоимостьБУ = 0;
		
		СтруктураОтбора = Новый Структура("НаличиеПоДаннымУчета, НаличиеФактическое", Ложь, Истина);
		МассивОсновныхСредств = Основание.ОС.Выгрузить(СтруктураОтбора, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство");
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
		//ОсновныеСредстваКоды = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОсновныхСредств, "Код");
		ОсновныеСредстваКоды = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОсновныхСредств, "Код, ПрослеживаемыйТовар");
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)
		
		Для каждого ТекСтрокаОС Из Основание.ОС Цикл
			Если НЕ ТекСтрокаОС.НаличиеПоДаннымУчета И ТекСтрокаОС.НаличиеФактическое Тогда
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ТекСтрокаОС.ОсновноеСредство;
				СтруктураКоды = ОсновныеСредстваКоды.Получить(ТекСтрокаОС.ОсновноеСредство);
				Если СтруктураКоды <> Неопределено Тогда 
					НоваяСтрока.ИнвентарныйНомер = СтруктураКоды.Код;
				КонецЕсли;
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
				Если ВедетсяУчетПрослеживаемыхТоваров и СтруктураКоды <> Неопределено Тогда
					НоваяСтрока.ПрослеживаемыйТовар = СтруктураКоды.ПрослеживаемыйТовар;
				Иначе
					НоваяСтрока.ПрослеживаемыйТовар = Ложь;
				КонецЕсли;
				//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)
				СтоимостьБУ = СтоимостьБУ + ТекСтрокаОС.СтоимостьФактическая;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	НачислятьАмортизациюБУ = Истина;
	НачислятьАмортизациюНУ = Истина;
	
КонецПроцедуры

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-03-01 (#4041)
Процедура ПроверкаНастроекНачисленияАммортизации(ТаблицаСписанныеТовары, Отказ)
	
	ГраницаСтоимостиОС = ок_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Основные средства", "Стоимость ОС",0);
	
	Если ГраницаСтоимостиОС = 0 Тогда //Выключена проверка 
		Возврат;
	КонецЕсли;
			
	Для Каждого СписанныйТовар ИЗ ТаблицаСписанныеТовары Цикл	
		
		Если СписанныйТовар.СуммаСписания <= 0 Тогда                                                                
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отмена проведения! Суммовой остаток принимаемого к учету оборудования на " + СписанныйТовар.СчетУчета + " счете равен нулю",,,,Отказ);
			Прервать;
		КонецЕсли;
				                                                      	
		Если СписанныйТовар.СуммаСписания >= ГраницаСтоимостиОС Тогда
			
			Если НЕ ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации") Тогда					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОС №" + СписанныйТовар.НомерСтроки + ". " + СписанныйТовар.КорСубконто1 + ": Реквизит «Порядок включения стоимости в состав расходов» заполнен некорректно. Должно быть указано значение «Начисление амортизации», т.к. стоимость ОС >= " + ГраницаСтоимостиОС,,"Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ",,Отказ);					
			КонецЕсли;
			
			Если НЕ НачислятьАмортизациюНУ Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОС №" + СписанныйТовар.НомерСтроки + ". " + СписанныйТовар.КорСубконто1 + ": Реквизит «Начислять амортизацию (НУ)» заполнен некорректно. Должен быть установлен флаг, т.к. стоимость ОС >= " + ГраницаСтоимостиОС,,"Объект.НачислятьАмортизациюНУ",,Отказ);
			КонецЕсли;
			
		Иначе
			
			Если НЕ ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОС №" + СписанныйТовар.НомерСтроки + ". " + СписанныйТовар.КорСубконто1 + ": Реквизит «Порядок включения стоимости в состав расходов» заполнен некорректно. Должно быть указано значение «Включение в расходы при принятии к учету», т.к. стоимость ОС  < " + ГраницаСтоимостиОС,,"Объект.ПорядокВключенияСтоимостиВСоставРасходовНУ",,Отказ);											
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СпособОтраженияРасходовПриВключенииВСтоимость) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОС №" + СписанныйТовар.НомерСтроки + ". " + СписанныйТовар.КорСубконто1 + ": Реквизит «СпособОтраженияРасходовПриВключенииВСтоимость» должен быть заполнен, т.к. стоимость ОС  < " + ГраницаСтоимостиОС,,"Объект.СпособОтраженияРасходовПриВключенииВСтоимость",,Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-03-01 (#4041) 

//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-10-22 (#4405)
Функция ПодготовитьТаблицыДляОтраженияВПрослеживаемости(ПрослеживаемыеТовары, ПрослеживаемыеОС, Реквизиты)

	
	ПрослеживаемыеТоварыДляСписания = Неопределено;
	ПрослеживаемыеОСДляПрихода      = Неопределено;
	ПрослеживаемыеОСДляРасхода      = Неопределено;
	
	ВидОперации = Реквизиты[0].ВидОперации;
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ПрослеживаемыеТоварыДляСписания = ПрослеживаемыеТовары;
		ПрослеживаемыеОСДляПрихода = ПрослеживаемыеОС;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ПрослеживаемыеОСДляПрихода = ПрослеживаемыеОС;
		ПрослеживаемыеОСДляРасхода = ПрослеживаемыеТовары;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ПоРезультатамИнвентаризации Тогда
		ПрослеживаемыеОСДляПрихода = ПрослеживаемыеОС;
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура();
	СтруктураТаблиц.Вставить("ПрослеживаемыеТоварыДляСписания", ПрослеживаемыеТоварыДляСписания);
	СтруктураТаблиц.Вставить("ПрослеживаемыеОСДляПрихода",      ПрослеживаемыеОСДляПрихода);
	СтруктураТаблиц.Вставить("ПрослеживаемыеОСДляРасхода",      ПрослеживаемыеОСДляРасхода);
	
	Возврат СтруктураТаблиц;
	
КонецФункции
//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-10-22 (#4405)
#КонецОбласти

#КонецЕсли