
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	УстановитьОтображениеРегистров(Объект.Ссылка);
	СоздатьЭлементыФормы();
	ПрочитатьДвиженияДокумента(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	СоздатьРеквизитыФормы();
	УстановитьОтображениеРегистров(Объект.Ссылка);
	СоздатьЭлементыФормы();
	ПрочитатьДвиженияДокумента(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//МетаданныеДокумента = Объект.Ссылка.Метаданные();
	//ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	//СоздатьРеквизитыФормы();
	//УстановитьОтображениеРегистров(Объект.Ссылка);
	//СоздатьЭлементыФормы();
	//ПрочитатьДвиженияДокумента(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МСФОПриИзменении(Элемент)
	
	Если Объект.МСФО Тогда
		Объект.ДатаСторноМСФО = НачалоДня(Объект.Дата + 60*60*24);
	Иначе
		Объект.ДатаСторноМСФО = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ОборотыБОССПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	//Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОборотыБОССПередУдалением(Элемент, Отказ)
	//Отказ = Истина;
КонецПроцедуры

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода.ТолькоПросмотр = Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ок_ВидыОперацийБОСС.РезервыОтпусков");
	Если Элементы.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода.ТолькоПросмотр 
		И Объект.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода Тогда
		Объект.ОбрабатыватьДанныеПоРезервамПредыдущегоПериода = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)

	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра = ТипРегистра;
		СтрокаРегистра.Синоним     = МетаданныеРегистра.Синоним;
		СтрокаРегистра.Отображение = Истина;
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	АктивностьДвижений = Объект.Проведен;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			Элементы.ГруппаХозрасчетный.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			Элементы.ГруппаХозрасчетный.Видимость = СтрокаРегистра.Отображение;
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ТекТаблица.ТолькоПросмотр = Истина;
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;

			РеквизитыНабораЗаписей = ЭтотОбъект[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено И
				 СтрокаРегистра.Имя <> "бит_ОборотыПоБюджетам"
			Тогда		
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
				
				Если СтрокаРегистра.Имя = "НДСРаздельныйУчет"
					И КолонкаРеквизита.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС") Тогда
					
					НовыйПараметр = Новый ПараметрВыбора("ОграничениеСпискаВыбора", "НеОграничивать");
					НовыйМассив = Новый Массив();
					НовыйМассив.Добавить(НовыйПараметр);
					НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив); 
					ТекКолонка.ПараметрыВыбора = НовыеПараметры;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
				
				ХозрасчетныйГруппаДебет = Элементы.Вставить("ХозрасчетныйГруппаДебет", Тип("ГруппаФормы"), ТекТаблица, Элементы.ХозрасчетныйНомерСтроки);
					ХозрасчетныйГруппаСчетКоличествоВалютаДт = Элементы.Вставить("ХозрасчетныйГруппаСчетКоличествоВалютаДт", Тип("ГруппаФормы"), ХозрасчетныйГруппаДебет);
						Элементы.Переместить(Элементы.ХозрасчетныйСчетДт, ХозрасчетныйГруппаСчетКоличествоВалютаДт);
						ХозрасчетныйГруппаКоличествоВалютаДт = Элементы.Вставить("ХозрасчетныйГруппаКоличествоВалютаДт", Тип("ГруппаФормы"), ХозрасчетныйГруппаСчетКоличествоВалютаДт);
							ХозрасчетныйГруппаКоличествоДт = Элементы.Вставить("ХозрасчетныйГруппаКоличествоДт", Тип("ГруппаФормы"), ХозрасчетныйГруппаКоличествоВалютаДт);
							    //Элементы.Переместить(Элементы.ХозрасчетныйНадписьКоличествоДт, ХозрасчетныйГруппаКоличествоДт);
								Элементы.Переместить(Элементы.ХозрасчетныйКоличествоДт, ХозрасчетныйГруппаКоличествоДт);
							ХозрасчетныйГруппаВалютаДт = Элементы.Вставить("ХозрасчетныйГруппаВалютаДт", Тип("ГруппаФормы"), ХозрасчетныйГруппаКоличествоВалютаДт, ХозрасчетныйГруппаКоличествоДт);
							    Элементы.Переместить(Элементы.ХозрасчетныйВалютаДт, ХозрасчетныйГруппаВалютаДт);
								Элементы.Переместить(Элементы.ХозрасчетныйВалютнаяСуммаДт, ХозрасчетныйГруппаВалютаДт);
					Элементы.Переместить(Элементы.ХозрасчетныйПодразделениеДт, ХозрасчетныйГруппаДебет);
					Элементы.Переместить(Элементы.ХозрасчетныйСубконтоДт1, ХозрасчетныйГруппаДебет);
					Элементы.Переместить(Элементы.ХозрасчетныйСубконтоДт2, ХозрасчетныйГруппаДебет);
					Элементы.Переместить(Элементы.ХозрасчетныйСубконтоДт3, ХозрасчетныйГруппаДебет);
				ХозрасчетныйГруппаКредит = Элементы.Вставить("ХозрасчетныйГруппаКредит", Тип("ГруппаФормы"), ТекТаблица, ХозрасчетныйГруппаДебет);
					ХозрасчетныйГруппаСчетКоличествоВалютаКт = Элементы.Вставить("ХозрасчетныйГруппаСчетКоличествоВалютаКт", Тип("ГруппаФормы"), ХозрасчетныйГруппаДебет);
						Элементы.Переместить(Элементы.ХозрасчетныйСчетКт, ХозрасчетныйГруппаСчетКоличествоВалютаКт);
						ХозрасчетныйГруппаКоличествоВалютаКт = Элементы.Вставить("ХозрасчетныйГруппаКоличествоВалютаКт", Тип("ГруппаФормы"), ХозрасчетныйГруппаСчетКоличествоВалютаКт);
							ХозрасчетныйГруппаКоличествоКт = Элементы.Вставить("ХозрасчетныйГруппаКоличествоКт", Тип("ГруппаФормы"), ХозрасчетныйГруппаКоличествоВалютаКт);
							    //Элементы.Переместить(Элементы.ХозрасчетныйНадписьКоличествоКт, ХозрасчетныйГруппаКоличествоКт);
								Элементы.Переместить(Элементы.ХозрасчетныйКоличествоКт, ХозрасчетныйГруппаКоличествоКт);
							ХозрасчетныйГруппаВалютаКт = Элементы.Вставить("ХозрасчетныйГруппаВалютаКт", Тип("ГруппаФормы"), ХозрасчетныйГруппаКоличествоВалютаКт, ХозрасчетныйГруппаКоличествоКт);
							    Элементы.Переместить(Элементы.ХозрасчетныйВалютаКт, ХозрасчетныйГруппаВалютаКт);
								Элементы.Переместить(Элементы.ХозрасчетныйВалютнаяСуммаКт, ХозрасчетныйГруппаВалютаКт);
					Элементы.Переместить(Элементы.ХозрасчетныйПодразделениеКт, ХозрасчетныйГруппаДебет);
					Элементы.Переместить(Элементы.ХозрасчетныйСубконтоКт1, ХозрасчетныйГруппаДебет);
					Элементы.Переместить(Элементы.ХозрасчетныйСубконтоКт2, ХозрасчетныйГруппаДебет);
					Элементы.Переместить(Элементы.ХозрасчетныйСубконтоКт3, ХозрасчетныйГруппаДебет);
				ХозрасчетныйГруппаСуммаСодержание = Элементы.Вставить("ХозрасчетныйГруппаСуммаСодержание", Тип("ГруппаФормы"), ТекТаблица);
					Элементы.Переместить(Элементы.ХозрасчетныйСумма, ХозрасчетныйГруппаСуммаСодержание);
					Элементы.Переместить(Элементы.ХозрасчетныйСодержание, ХозрасчетныйГруппаСуммаСодержание);
				ХозрасчетныйГруппаНалоговыйУчет = Элементы.Вставить("ХозрасчетныйГруппаНалоговыйУчет", Тип("ГруппаФормы"), ТекТаблица);
					ХозрасчетныйГруппаНалоговыйУчетДт = Элементы.Вставить("ХозрасчетныйГруппаНалоговыйУчетДт", Тип("ГруппаФормы"), ХозрасчетныйГруппаНалоговыйУчет);
						Элементы.Переместить(Элементы.ХозрасчетныйСуммаНУДт, ХозрасчетныйГруппаНалоговыйУчетДт);
						Элементы.Переместить(Элементы.ХозрасчетныйСуммаПРДт, ХозрасчетныйГруппаНалоговыйУчетДт);
						Элементы.Переместить(Элементы.ХозрасчетныйСуммаВРДт, ХозрасчетныйГруппаНалоговыйУчетДт);
					ХозрасчетныйГруппаНалоговыйУчетКт = Элементы.Вставить("ХозрасчетныйГруппаНалоговыйУчетКт", Тип("ГруппаФормы"), ХозрасчетныйГруппаНалоговыйУчет);
						Элементы.Переместить(Элементы.ХозрасчетныйСуммаНУКт, ХозрасчетныйГруппаНалоговыйУчетКт);
						Элементы.Переместить(Элементы.ХозрасчетныйСуммаПРКт, ХозрасчетныйГруппаНалоговыйУчетКт);
						Элементы.Переместить(Элементы.ХозрасчетныйСуммаВРКт, ХозрасчетныйГруппаНалоговыйУчетКт);
					
				Элементы.ХозрасчетныйСодержание.Ширина 		 = 2;
				Элементы.ХозрасчетныйНомерСтроки.Ширина 	 = 2;
				
			ИначеЕсли СтрокаРегистра.Имя = "бит_Дополнительный_2" Тогда
				
				ГруппаСубконтоДт = Элементы.Вставить("ГруппаСубконтоДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2СчетКт);
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоДт1, ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоДт2, ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоДт3, ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоДт4, ГруппаСубконтоДт);
				
				ГруппаКоличествоВалютаДт = Элементы.Вставить("ГруппаКоличествоВалютаДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2СчетКт);
			
				Элементы.Переместить(Элементы.бит_Дополнительный_2КоличествоДт, ГруппаКоличествоВалютаДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВалютаДт, ГруппаКоличествоВалютаДт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВалютнаяСуммаДт, ГруппаКоличествоВалютаДт);
				
				ГруппаСубконтоКт = Элементы.Вставить("ГруппаСубконтоКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2СуммаМУ);
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоКт1, ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоКт2, ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоКт3, ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СубконтоКт4, ГруппаСубконтоКт);
				
				ГруппаКоличествоВалютаКт = Элементы.Вставить("ГруппаКоличествоВалютаКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2СуммаМУ);
			
				Элементы.Переместить(Элементы.бит_Дополнительный_2КоличествоКт, ГруппаКоличествоВалютаКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВалютаКт, ГруппаКоличествоВалютаКт);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВалютнаяСуммаКт, ГруппаКоличествоВалютаКт);
				
				ГруппаСуммы = Элементы.Вставить("ГруппаСуммы", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2Содержание);
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2СуммаМУ, ГруппаСуммы);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СуммаУпр, ГруппаСуммы);
				Элементы.Переместить(Элементы.бит_Дополнительный_2СуммаРегл, ГруппаСуммы);
				
				ГруппаСодержание = Элементы.Вставить("ГруппаСодержание", Тип("ГруппаФормы"), ТекТаблица, Элементы.бит_Дополнительный_2ВидПроводки);
				ГруппаСодержание.Видимость = Ложь;
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2Содержание, ГруппаСодержание);
				Элементы.Переместить(Элементы.бит_Дополнительный_2НомерЖурнала, ГруппаСодержание);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВидПроводки, ГруппаСодержание);
				Элементы.Переместить(Элементы.бит_Дополнительный_2ДатаФормирования, ГруппаСодержание);
				
				Элементы.бит_Дополнительный_2Содержание.Ширина = 2;
				Элементы.бит_Дополнительный_2НомерЖурнала.Ширина = 2;
				Элементы.бит_Дополнительный_2ВидПроводки.Ширина = 2;
				Элементы.бит_Дополнительный_2ДатаФормирования.Ширина = 2;
				
				Элементы.Переместить(Элементы.бит_Дополнительный_2ВидДвиженияМСФО, ТекТаблица);
				Элементы.бит_Дополнительный_2ВидДвиженияМСФО.Ширина = 2;
				
			ИначеЕсли СтрокаРегистра.Имя = "СБ_КорректировкаРСБУ" Тогда
				
				СБ_ГруппаСчетДт = Элементы.Вставить("СБ_ГруппаСчетДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСубконтоДт1);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСчетДт, СБ_ГруппаСчетДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУПодразделениеДт, СБ_ГруппаСчетДт);
				
				СБ_ГруппаСубконтоДт = Элементы.Вставить("СБ_ГруппаСубконтоДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСчетКт);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоДт1, СБ_ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоДт2, СБ_ГруппаСубконтоДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоДт3, СБ_ГруппаСубконтоДт);
				
				СБ_ГруппаКоличествоВалютаДт = Элементы.Вставить("СБ_ГруппаКоличествоВалютаДт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСчетКт);
			
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУКоличествоДт, СБ_ГруппаКоличествоВалютаДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУВалютаДт, СБ_ГруппаКоличествоВалютаДт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУВалютнаяСуммаДт, СБ_ГруппаКоличествоВалютаДт);
				
				СБ_ГруппаСчетКт = Элементы.Вставить("СБ_ГруппаСчетКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСубконтоКт1);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСчетКт, СБ_ГруппаСчетКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУПодразделениеКт, СБ_ГруппаСчетКт);
				
				СБ_ГруппаСубконтоКт = Элементы.Вставить("СБ_ГруппаСубконтоКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСумма);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоКт1, СБ_ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоКт2, СБ_ГруппаСубконтоКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСубконтоКт3, СБ_ГруппаСубконтоКт);
				
				СБ_ГруппаКоличествоВалютаКт = Элементы.Вставить("СБ_ГруппаКоличествоВалютаКт", Тип("ГруппаФормы"), ТекТаблица, Элементы.СБ_КорректировкаРСБУСумма);
			
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУКоличествоКт, СБ_ГруппаКоличествоВалютаКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУВалютаКт, СБ_ГруппаКоличествоВалютаКт);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУВалютнаяСуммаКт, СБ_ГруппаКоличествоВалютаКт);
				
				СБ_ГруппаСуммаСодержание = Элементы.Добавить("СБ_ГруппаСуммаСодержание", Тип("ГруппаФормы"), ТекТаблица);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСумма, СБ_ГруппаСуммаСодержание);
				
				СБ_ГруппаДанныеКорректировки = Элементы.Добавить("СБ_ГруппаДанныеКорректировки", Тип("ГруппаФормы"), ТекТаблица);
				
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУСодержание, СБ_ГруппаДанныеКорректировки);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУНеКорректироватьСтоимостьАвтоматически, СБ_ГруппаДанныеКорректировки);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУФиксировать, СБ_ГруппаДанныеКорректировки);
				Элементы.Переместить(Элементы.СБ_КорректировкаРСБУПериодКорректировки, СБ_ГруппаДанныеКорректировки);
				
			КонецЕсли;

		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		ИначеЕсли ТекГруппа <> Неопределено И СтрокаРегистра.Отображение Тогда
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Элементы.ПанельРегистров.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	АктивностьДвижений = Истина;
	
	фЭтоКопирование = Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования); //1c-izhtc spawn 18.08.15
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если фЭтоКопирование Тогда 
			Если СтрокаРегистра.Имя = "бит_Бюджетирование" 
				или СтрокаРегистра.Имя = "бит_Дополнительный_1"
				или СтрокаРегистра.Имя = "бит_Дополнительный_2"
				или СтрокаРегистра.Имя = "бит_Дополнительный_3"
				или СтрокаРегистра.Имя = "бит_Дополнительный_4"
				или СтрокаРегистра.Имя = "бит_Дополнительный_5"
				или СтрокаРегистра.Имя = "бит_СоответствиеЗаписейТрансляции"
				или СтрокаРегистра.Имя = "СБ_КорректировкаРСБУ"
				Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаРегистра.Отображение Тогда
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			Попытка
				НаборЗаписей.Прочитать();
			Исключение
				СтрокаРегистра.Отображение = Ложь;
				Продолжить;
			КонецПопытки;
			
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если ДокументДвижений = Объект.Ссылка Тогда
				СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
				Если СтрокаРегистра.Записывать Тогда
					АктивностьДвижений = АктивностьДвижений И ЭтотОбъект[ИмяРеквизита][0].Активность;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		//БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт, Ложь);
		//БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт, Ложь);
		ЗаполнитьНадписиВПроводке(Проводка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеРегистров(ДокументДвижений)
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументДвижений) Тогда
			СтрокаРегистра.Отображение = Ложь;
			Продолжить;
		КонецЕсли;
	
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
		Попытка
			НаборЗаписей.Прочитать();
		Исключение
			СтрокаРегистра.Отображение = Ложь;
			Продолжить;
		КонецПопытки;
		
		СтрокаРегистра.Отображение = НаборЗаписей.Количество() > 0;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьНУ = НСтр("ru = 'НУ:'");
	Проводка.НадписьПР = НСтр("ru = 'ПР:'");
	Проводка.НадписьВР = НСтр("ru = 'ВР:'");
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

#КонецОбласти
