
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
    // Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем виды операций для группы подменю.
	Для каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "ДействияФормыДействиеУстановитьОперацию";
		
		КнопкаГруппыПодменю = ЭтотОбъект.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ЭтотОбъект.Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
			
	КонецЦикла;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Кешируем количество субконто
	фКоличествоСубконтоМУ = 4;
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетДоходовРасходов"
												   ,"СубконтоДоходовРасходов"
												   ,фКоличествоСубконтоМУ
												   ,"ДанныеОбесценения"
												   ,"Элементы.ДанныеОбесценения.ТекущиеДанные");	 
												   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"ДанныеОбесценения"
															   ,"СубконтоДоходовРасходов"
															   ,"КоличествоДоступныхСубконтоДоходовРасходов"
															   ,фКоличествоСубконтоМУ);

	ВосстановитьКоличествоДоступныхСубконто();
															   
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетДоходовРасходов", "СубконтоДоходовРасходов", фКоличествоСубконтоМУ);
	 
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходовРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходовРасходов");

	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли; 
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	
	УстановитьПараметрыВыбораДляСчетов();

	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДанныеОбесцененияДоговорКонтрагента, "Объект.ДанныеОбесценения.Контрагент");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Объект.ВидОперации = Неопределено;
			СформироватьДеревоВидовОпераций();
			
			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;	
				
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("ОчищатьТабличнуюЧасть") Тогда
			Если ВыбранноеЗначение.ОчищатьТабличнуюЧасть И (Объект.ДанныеОбесценения.Количество() > 0) Тогда
				
							  
				ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
				ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОбработкаВыбора", ЭтотОбъект, ВыбранноеЗначение);
				
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
			Иначе
				
				Если ВыбранноеЗначение.Свойство("МассивСтрок") Тогда
					ОбработкаВыбораНаСервере(ВыбранноеЗначение.МассивСтрок);
				КонецЕсли;
				
				Модифицированность = Истина;
				
			КонецЕсли;
		Иначе
			
			Если ВыбранноеЗначение.Свойство("МассивСтрок") Тогда
				ОбработкаВыбораНаСервере(ВыбранноеЗначение.МассивСтрок);
			КонецЕсли;
			
			Модифицированность = Истина;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьКоличествоДоступныхСубконто();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ОбесценениеДебиторскойЗадолженности";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыборРеквизитаШапки(СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
// 
&НаКлиенте 
Процедура ДействияФормыДействиеУстановитьОперацию(Команда)

	// Сохраним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации; 
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, 	"_");
	ИмяПодменю      = Лев(ИмяКнопки, 	Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки, 	Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности[ИмяВидаОперации];
	
	// Если операция не поменялась, то выходим.
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
																
	ОбработатьИзменениеВидаОперацииСервер();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	                         
	ТекущиеДанные = Элементы.ДанныеОбесценения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеКонтрагента(ТекущиеДанные.ПолучитьИдентификатор());
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДанныеОбесцененияДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеОбесценения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
	ТекущиеДанные.СчетУчета 	= Неопределено;
	ДанныеОбесцененияСчетУчетаПриИзменении(Элементы.ДанныеОбесцененияСчетУчета);
	
	ТекущиеДанные.СчетРезерва 	= Неопределено;
	ДанныеОбесцененияСчетРезерваПриИзменении(Элементы.ДанныеОбесцененияСчетРезерва);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеОбесценения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоВыбораДоговораКлиент(Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетДоходовРасходов".
// 
&НаКлиенте
Процедура СчетДоходовРасходовПриИзменении(Элемент)
	
	ИзменениеСчетДоходовРасходов();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоДоходовРасходов_<i>".
// 
&НаКлиенте
Процедура СубконтоДоходовРасходовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоДоходовРасходов(Объект, ЗначениеСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоДоходовРасходов_<i>".
// 
&НаКлиенте
Процедура СубконтоДоходовРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

   ЗначениеСубконто = Объект[Элемент.Имя];	
   НачалоВыбораСубконтоДоходовРасходов(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто);
   
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДоходовРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
													 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоДоходовРасходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);

КонецПроцедуры // СубконтоДоходовРасходовАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетРезерва".
// 
&НаКлиенте
Процедура СчетРезерваПриИзменении(Элемент)
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности;
	
	Если Объект.ВидОперации = ВидыОпераций.ФормированиеРезерва Тогда
	
		СписокИдентификаторов = Новый Массив;
		Для каждого ТекСтр Из Объект.ДанныеОбесценения Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекСтр.СчетРезерва) Тогда
				СписокИдентификаторов.Добавить(ТекСтр.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСуммуОстаткаРезерва(СписокИдентификаторов, Объект.СчетРезерва);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеОбесценения

&НаКлиенте
Процедура ДанныеОбесцененияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДанныеОбесценения.ТекущиеДанные;
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДанныеОбесцененияДоговорКонтрагента, ТекущиеДанные.Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Процент" 
// табличного поля "ДанныеОбесценения".
// 
&НаКлиенте
Процедура ДанныеОбесцененияПроцентПриИзменении(Элемент)
	
	ВычислитьСуммуРезерва();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаОбязательства" 
// табличного поля "ДанныеОбесценения".
// 
&НаКлиенте
Процедура ДанныеОбесцененияСуммаОбязательстваПриИзменении(Элемент)
	
	ВычислитьСуммуРезерва();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаРезерва" 
// табличного поля "ДанныеОбесценения".
// 
&НаКлиенте
Процедура ДанныеОбесцененияСуммаРезерваПриИзменении(Элемент)
	
	ВычислитьПроцент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетДоходовРасходов" 
// табличного поля "ДанныеОбесценения".
// 
&НаКлиенте
Процедура ДанныеОбесценения_СчетДоходовРасходовПриИзменении(Элемент)
	
	Идентификатор     = Элементы.ДанныеОбесценения.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаСчетДоходовРасходовТабличноеПолеДанныеОбесценения(Идентификатор);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоДоходовРасходов" 
// табличного поля "ДанныеОбесценения".
// 
&НаКлиенте
Процедура ДанныеОбесценения_СубконтоДоходовРасходовПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.ДанныеОбесценения.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ДанныеОбесценения", Элемент.Имя);		
	ИзменениеСубконтоДоходовРасходов(Элементы.ДанныеОбесценения.ТекущиеДанные, ЗначениеСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоДоходовРасходов" 
// табличного поля "ДанныеОбесценения".
// 
&НаКлиенте
Процедура ДанныеОбесценения_СубконтоДоходовРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.ДанныеОбесценения.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ДанныеОбесценения", Элемент.Имя);		
	НачалоВыбораСубконтоДоходовРасходов(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОбесценения_СубконтоДоходовРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеОбесценения.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ДанныеОбесценения", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоДоходовРасходов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ДанныеОбесценения_СубконтоДоходовРасходовАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетУчета" 
// табличного поля "ДанныеОбесценения".
// 
&НаКлиенте
Процедура ДанныеОбесцененияСчетУчетаПриИзменении(Элемент)
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности;
	
	Если Объект.ВидОперации = ВидыОпераций.ВозвратРезерва Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Элементы.ДанныеОбесценения.ТекущиеДанные.ПолучитьИдентификатор();	
	ПолучитьСуммуОбязательства(Идентификатор);
	ВычислитьСуммуРезерва();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетРезерва" 
// табличного поля "ДанныеОбесценения".
// 
&НаКлиенте
Процедура ДанныеОбесцененияСчетРезерваПриИзменении(Элемент)
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности;
	
	ТекущиеДанные = Элементы.ДанныеОбесценения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();	
	
	Если Объект.ВидОперации = ВидыОпераций.ФормированиеРезерва Тогда
		СписокИдентификаторов = Новый Массив;
		СписокИдентификаторов.Добавить(Идентификатор);
		
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетРезерва) Тогда
			СчетРезерва = ТекущиеДанные.СчетРезерва;
		Иначе
			СчетРезерва = Объект.СчетРезерва;
		КонецЕсли;
		
		ЗаполнитьСуммуОстаткаРезерва(СписокИдентификаторов, СчетРезерва);
		Возврат;
	КонецЕсли;
	
	ПолучитьСуммуРезерва(Идентификатор);
	ВычислитьСуммуРезерва();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаПодбор(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Документ",		Объект);
	СтруктураПараметров.Вставить("Организация", 	Объект.Организация);
	СтруктураПараметров.Вставить("НачалоПериода", 	КонецДня(Объект.Дата));
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности;
	
	// МассивСобытий = Новый Массив;
	// МассивСобытий.Добавить(Перечисления.бит_му_СобытияФинИнструментов.Признание);
	// СтруктураПараметров.Вставить("МассивСобытий",	МассивСобытий);
		
	Для каждого ТекСтр Из ВидыОпераций Цикл
		Если ТекСтр.Значение = Объект.ВидОперации Тогда
			СтруктураПараметров.Вставить("ИмяМакета", ТекСтр.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПараметров",	СтруктураПараметров);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", 	Ложь);
	
	ОткрытьФорму("Обработка.бит_ПодборДоговоровКонтрагентов.Форма.ФормаУправляемая", ПараметрыФормы, ЭтотОбъект);
	 
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	Для каждого ТекСтр Из Объект.ДанныеОбесценения Цикл
		ТекСтр.Возвратность = НЕ ТекСтр.Возвратность;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	Для каждого ТекСтр Из Объект.ДанныеОбесценения Цикл
		ТекСтр.Возвратность = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	
	Для каждого ТекСтр Из Объект.ДанныеОбесценения Цикл
		ТекСтр.Возвратность = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()

	// Восстанавливаем настройки субконто в зависимости от счетов учета.
    Для каждого СтрокаТаблицы Из Объект.ДанныеОбесценения Цикл	
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДоходовРасходов);
		СтрокаТаблицы.КоличествоДоступныхСубконтоДоходовРасходов = СвСч.КоличествоСубконто;
	КонецЦикла; 											   

КонецПроцедуры // ВосстановитьКоличествоДоступныхСубконто()

&НаСервере
Процедура ОбработатьИзменениеВидаОперацииСервер()

	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормыСервер();
	
	Модифицированность = Истина;

КонецПроцедуры // ОбработатьИзменениеВидаОперацииСервер() 

&НаСервере 
Функция ПолучитьКоэффициентВалют(Документ)
	
	ВидыКурсов			= Новый Структура("Упр,Регл,МУ,Документ");
	ДокументОбъект 		= ДанныеФормывЗначение(Документ, Тип("ДокументОбъект.бит_му_ОбесценениеДебиторскойЗадолженности"));
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ДокументОбъект, ДокументОбъект.Дата, ВидыКурсов);
	
	КурсыРегл  	= СтруктураКурсыВалют.Регл;
	КурсыДок 	= СтруктураКурсыВалют.Документ;

	Коэффициент = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(1, КурсыРегл.Валюта, 		КурсыДок.Валюта,
																	 КурсыРегл.Курс, 		КурсыДок.Курс,
																	 КурсыРегл.Кратность, 	КурсыДок.Кратность);
																	 
	Возврат Коэффициент;
	
КонецФункции

&НаСервере 
Процедура ПолучитьСуммуОбязательства(Идентификатор)

	ТекущиеДанные = Объект.ДанныеОбесценения.НайтиПоИдентификатору(Идентификатор);

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_Дополнительный_2Остатки.СуммаМУОстаток * &Коэффициент КАК СуммаОбязательства
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |			&НачалоПериода,
	               |			Счет = &Счет,
	               |			&МассивСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 = &Контрагент
	               |				И Субконто2 = &ДоговорКонтрагента) КАК бит_Дополнительный_2Остатки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МассивСубконто 	= Новый Массив;
	ВидыСубконто 	= ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	МассивСубконто.Добавить(ВидыСубконто.Контрагенты);
	МассивСубконто.Добавить(ВидыСубконто.ДоговорыКонтрагентов);
	
	Запрос.УстановитьПараметр("НачалоПериода",		КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Коэффициент",		ПолучитьКоэффициентВалют(Объект));
	Запрос.УстановитьПараметр("Счет",				ТекущиеДанные.СчетУчета);
	Запрос.УстановитьПараметр("МассивСубконто",		МассивСубконто);
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",			ТекущиеДанные.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекущиеДанные.СуммаОбязательства = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекущиеДанные.СуммаОбязательства = Выборка.СуммаОбязательства;
	КонецЕсли;

КонецПроцедуры // ПолучитьСуммуОбязательства()

&НаСервере 
Процедура ПолучитьСуммуРезерва(Идентификатор)

	ТекущиеДанные = Объект.ДанныеОбесценения.НайтиПоИдентификатору(Идентификатор);

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_Дополнительный_2Остатки.СуммаМУОстаток * &Коэффициент КАК СуммаОбязательства
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |			&НачалоПериода,
	               |			Счет = &Счет,
	               |			&МассивСубконто,
	               |			Организация = &Организация
	               |				И Субконто1 = &Контрагент
	               |				И Субконто2 = &ДоговорКонтрагента) КАК бит_Дополнительный_2Остатки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	МассивСубконто 	= Новый Массив;
	ВидыСубконто 	= ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	МассивСубконто.Добавить(ВидыСубконто.Контрагенты);
	МассивСубконто.Добавить(ВидыСубконто.ДоговорыКонтрагентов);
	
	Запрос.УстановитьПараметр("НачалоПериода",		КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Коэффициент",		ПолучитьКоэффициентВалют(Объект));
	Запрос.УстановитьПараметр("Счет",				ТекущиеДанные.СчетРезерва);
	Запрос.УстановитьПараметр("МассивСубконто",		МассивСубконто);
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",			ТекущиеДанные.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекущиеДанные.СуммаОбязательства = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекущиеДанные.СуммаОбязательства = Выборка.СуммаОбязательства;
	КонецЕсли;

КонецПроцедуры // ПолучитьСуммуРезерва()

&НаСервере 
Процедура ЗаполнитьСуммуОстаткаРезерва(СписокИдентификаторов, СчетРезерва)

	// Сформируем список договоров
	СписокДоговоров = Неопределено;
	Если СписокИдентификаторов <> Неопределено Тогда
		
		СписокДоговоров = Новый Массив;
		Для каждого ТекСтр Из СписокИдентификаторов Цикл
			СтрокаТЧ = Объект.ДанныеОбесценения.НайтиПоИдентификатору(ТекСтр);
			СписокДоговоров.Добавить(СтрокаТЧ.ДоговорКонтрагента);
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_Дополнительный_2Остатки.Счет,
	               |	бит_Дополнительный_2Остатки.Субконто1 КАК Контрагент,
	               |	бит_Дополнительный_2Остатки.Субконто2 КАК ДоговорКонтрагента,
	               |	бит_Дополнительный_2Остатки.СуммаРеглОстаток * &Коэффициент КАК СуммаОстаток
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	               |			&Дата,
	               |			Счет = &СчетРезерва,
	               |			&МассивСубконто,
	               |			Субконто2 В (&СписокДоговоров)
	               |				И Организация = &Организация) КАК бит_Дополнительный_2Остатки";
				   
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Дата", 				Объект.Дата);	
	Запрос.УстановитьПараметр("Организация",		Объект.Организация);
	
	МассивСубконто 	= Новый Массив;
	ВидыСубконто 	= ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2;
	МассивСубконто.Добавить(ВидыСубконто.Контрагенты);
	МассивСубконто.Добавить(ВидыСубконто.ДоговорыКонтрагентов);
	
	Запрос.УстановитьПараметр("МассивСубконто",		МассивСубконто);
	Запрос.УстановитьПараметр("СчетРезерва",		СчетРезерва);
	Запрос.УстановитьПараметр("СписокДоговоров", 	СписокДоговоров);
	Запрос.УстановитьПараметр("Коэффициент",		ПолучитьКоэффициентВалют(Объект));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для каждого ТекСтр Из СписокИдентификаторов Цикл
		СтрокаТЧ = Объект.ДанныеОбесценения.НайтиПоИдентификатору(ТекСтр);
		
		// Найдем данные в выборке и заполним сумму остатка резерва.
		СтуктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента");
		СтуктураПоиска.Контрагент 			= СтрокаТЧ.Контрагент;
		СтуктураПоиска.ДоговорКонтрагента	= СтрокаТЧ.ДоговорКонтрагента;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтуктураПоиска) Тогда
			СтрокаТЧ.ОстатокРезерва = Выборка.СуммаОстаток;
		Иначе
			СтрокаТЧ.ОстатокРезерва = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСуммуОстаткаРезерва()

&НаСервере
Процедура ОбработкаВыбораНаСервере(МассивПодбора)
	
	Для каждого ТекСтр Из МассивПодбора Цикл
	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент",			ТекСтр.Контрагент);
		ПараметрыОтбора.Вставить("ДоговорКонтрагента", 	ТекСтр.ДоговорКонтрагента);
		ПараметрыОтбора.Вставить("СчетУчета", 			ТекСтр.СчетУчета);
		ПараметрыОтбора.Вставить("СчетРезерва", 		ТекСтр.СчетРезерва);
		НайденныеСтроки = Объект.ДанныеОбесценения.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ДанныеОбесценения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
		
	КонецЦикла;	
	
КонецПроцедуры // ОбработкаВыбораНаСервере()

&НаСервере         
Процедура ИзменениеСчетаСчетДоходовРасходовТабличноеПолеДанныеОбесценения(Идентификатор)
	                       
	ТекущаяСтрока = Объект.ДанныеОбесценения.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетДоходовРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоДоходовРасходов");
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДоходовРасходов);

	ТекущаяСтрока.КоличествоДоступныхСубконтоДоходовРасходов = СвСч.КоличествоСубконто;
	
КонецПроцедуры // ИзменениеСчетаСчетДоходовРасходовТабличноеПолеДанныеОбесценения()

// Формирует список видов операций для выбора вида операции перед созданием документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура СформироватьДеревоВидовОпераций()

	ЭлементыДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = ЭлементыДерева.Добавить();
	СтрокаНовая.ВидОперации = "Доступные виды операций";
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекСтр Из фКэшЗначений.Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности Цикл
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекСтр.Значение;	
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", 								бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}
	КэшПеречисления.Вставить("бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности", 	бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура обрабатывает изменение контрагента. 
// 
// Параметры:
//  ИдСтроки - Число.
// 
&НаСервере
Процедура ИзменениеКонтрагента(ИдСтроки)

	ТекущиеДанные = Объект.ДанныеОбесценения.НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 

	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(ТекущиеДанные.ДоговорКонтрагента
														  ,ТекущиеДанные.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров);
	
	
	// Могли поменять договор.
	ИзменениеДоговораСервер(ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Контрагент);	
	
КонецПроцедуры // ИзменениеКонтрагента()

// Процедура обрабатывает изменение договора. Сервер.
// 
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеДоговораСервер()

// Процедура обрабатывает изменение счета "СчетДоходовРаходов".
// 
&НаСервере
Процедура ИзменениеСчетДоходовРасходов()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетДоходовРасходов, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоДоходовРасходов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоДоходовРасходов");

КонецПроцедуры // СчетДоходовРаходов()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ДанныеОбесцененияСчетУчета);
	МассивЭлементов.Добавить(Элементы.ДанныеОбесцененияСчетРезерва);
	МассивЭлементов.Добавить(Элементы.ДанныеОбесцененияСчетДоходовРасходов);
	МассивЭлементов.Добавить(Элементы.СчетРезерва);
    МассивЭлементов.Добавить(Элементы.СчетДоходовРасходов);

	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура обрабатывает выбор реквизита формы.
// 
// Параметры:
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура ОбработатьВыборРеквизитаШапки(СтандартнаяОбработка)

	Если Объект.ДанныеОбесценения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Табличная часть «Договоры» будет очищена. Продолжить?'");
	
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОбработатьВыборРеквизитаШапки", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
КонецПроцедуры // ОбработатьВыборРеквизитаШапки() 

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросОбработатьВыборРеквизитаШапки(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДанныеОбесценения.Очистить();
	КонецЕсли;	

КонецПроцедуры // ВопросОбработатьВыборРеквизитаШапки()

&НаКлиенте
Процедура ВычислитьСуммуРезерва()

	ТекущиеДанные = Элементы.ДанныеОбесценения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРезерва = ТекущиеДанные.СуммаОбязательства * ТекущиеДанные.Процент / 100;

КонецПроцедуры // ВычислитьСуммуРезерва() 

&НаКлиенте
Процедура ВычислитьПроцент()

	ТекущиеДанные = Элементы.ДанныеОбесценения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СуммаОбязательства <> 0 Тогда
		ТекущиеДанные.Процент = ТекущиеДанные.СуммаРезерва / ТекущиеДанные.СуммаОбязательства * 100;
	Иначе
		ТекущиеДанные.Процент = 0;
	КонецЕсли;

КонецПроцедуры // ВычислитьПроцент() 

&НаКлиенте
Процедура ИзменениеСубконтоДоходовРасходов(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоДоходовРасходов", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоДоходовРасходов", ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "СубконтоДоходовРасходов", "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоДоходовРасходов()

&НаКлиенте
Процедура НачалоВыбораСубконтоДоходовРасходов(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоДоходовРасходов"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконтоДоходовРасходов()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", Новый ФиксированныйМассив(фСписокВидовДоговоров.ВыгрузитьЗначения()));
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	фСписокВидовДоговоров = Новый СписокЗначений;
	фСписокВидовДоговоров.Добавить(фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	фСписокВидовДоговоров.Добавить(фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	бит_ДоговораКлиентСервер.ДобавитьВидДоговора(фСписокВидовДоговоров, фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов, "СКомитентомНаЗакупку");			
	
    Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		фСписокВидовДоговоров.Добавить(фКэшЗначений.Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ДанныеОбесценения;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект, ТаблицаОбъекта);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
					  
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ТаблицаОбъекта - ТаблицаЗначений.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ТаблицаОбъекта) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтрокаТаблицы.СуммаРезерва = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаРезерва
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.СуммаОбязательства = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаОбязательства
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.ОстатокРезерва = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ОстатокРезерва
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		КонецЦикла;
		
	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент() 

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
// 
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
		
КонецПроцедуры // НачалоВыбораДоговораКлиент()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ВыбранноеЗначение - 
&НаКлиенте
Процедура ВопросОбработкаВыбора(Ответ, ВыбранноеЗначение) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДанныеОбесценения.Очистить();

		Если ВыбранноеЗначение.Свойство("МассивСтрок") Тогда
			ОбработкаВыбораНаСервере(ВыбранноеЗначение.МассивСтрок);
		КонецЕсли;
		
		Модифицированность = Истина;

	КонецЕсли;
	
КонецПроцедуры // ВопросОбработкаВыбора()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормыСервер()
	
	ВидыОпераций = фКэшЗначений.Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности;
	
	Если Объект.ВидОперации = ВидыОпераций.ФормированиеРезерва Тогда
		ДоходыРасходы 			= "расходов";
		СчетУчетаВидимость 		= Истина;
		ВозвратностьВидимость 	= Истина;
		
		Элементы.ДанныеОбесцененияСуммаОбязательства.Заголовок 	= "Сумма обязательства";
		Элементы.ДанныеОбесцененияСуммаРезерва.Заголовок 		= "Сумма резерва";
	Иначе
		ДоходыРасходы 			= "доходов";
		СчетУчетаВидимость 		= Ложь;
		ВозвратностьВидимость 	= Ложь;
		
		// Очистим реквизит "Возвратность"
		Для каждого ТекСтр из Объект.ДанныеОбесценения Цикл
			ТекСтр.Возвратность = Ложь;
		КонецЦикла;
		
		Элементы.ДанныеОбесцененияСуммаОбязательства.Заголовок 	= "Сумма резерва";
		Элементы.ДанныеОбесцененияСуммаРезерва.Заголовок 		= "Сумма возврата резерва";
	КонецЕсли;
	
	Элементы.СчетДоходовРасходов.Заголовок = "Счет " + ДоходыРасходы;
	
	Для Н = 1 По фКоличествоСубконтоМУ Цикл
		Элементы["СубконтоДоходовРасходов" + Н].Заголовок = "Субконто " + ДоходыРасходы + " " + Строка(Н);
	КонецЦикла;
	
	Элементы.ДанныеОбесцененияСчетДоходовРасходов.Заголовок = "Счет " + ДоходыРасходы;
	
	Для Н = 1 По фКоличествоСубконтоМУ Цикл
		Элементы["ДанныеОбесцененияСубконтоДоходовРасходов" + Н].Заголовок = "Субконто " + ДоходыРасходы + " " + Строка(Н);
	КонецЦикла;
	
	Элементы.ДанныеОбесцененияСчетУчета.Видимость				= СчетУчетаВидимость;
	
	Элементы.ДанныеОбесцененияВозвратность.Видимость			= ВозвратностьВидимость;
	Элементы.ДанныеОбесцененияКомандаУстановитьВсе.Видимость	= ВозвратностьВидимость;
	Элементы.ДанныеОбесцененияКомандаСнятьВсе.Видимость			= ВозвратностьВидимость;
	Элементы.ДанныеОбесцененияКомандаИнвертировать.Видимость	= ВозвратностьВидимость;
	
	Элементы.ДанныеОбесцененияОстатокРезерва.Видимость			= ВозвратностьВидимость;

	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);

КонецПроцедуры // УправлениеЭлементамиФормыСервер()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если (ТипЗнч(СтруктураПараметров) = Тип("Структура")) И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																		   
	Иначе
		Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности.ФормированиеРезерва;
	КонецЕсли;																			   
	
	ОбработатьИзменениеВидаОперацииСервер();
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;

КонецПроцедуры // ПриОткрытииПромежуточная()

// Процедура выполняет окончательные операции по открытию формы. 
// 
&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();

КонецПроцедуры // ПриОткрытииОкончание()

#КонецОбласти

#КонецОбласти

#Область Инициализация

// Зададим имена реквизитов, подлежащих кешированию.
мКэшРеквизитовФормы = Новый Структура;
мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
мКэшРеквизитовФормы.Вставить("КурсДокумента");
мКэшРеквизитовФормы.Вставить("КратностьДокумента");

#КонецОбласти
