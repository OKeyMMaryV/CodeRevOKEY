#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
// 
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = ДанныеОбесценения.Итог("СуммаРезерва");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабЧасть.НомерСтроки,
	               |	ТабЧасть.Контрагент,
	               |	ТабЧасть.ДоговорКонтрагента,
	               |	ТабЧасть.СуммаОбязательства,
	               |	ТабЧасть.Процент,
	               |	ТабЧасть.СуммаРезерва,
	               |	ТабЧасть.СчетРезерва,
	               |	ТабЧасть.СчетУчета,
	               |	ТабЧасть.СчетДоходовРасходов,
	               |	ТабЧасть.СубконтоДоходовРасходов1,
	               |	ТабЧасть.СубконтоДоходовРасходов2,
	               |	ТабЧасть.СубконтоДоходовРасходов3,
	               |	ТабЧасть.СубконтоДоходовРасходов4,
	               |	ТабЧасть.Возвратность,
	               |	ТабЧасть.ОстатокРезерва
	               |ИЗ
	               |	Документ.бит_му_ОбесценениеДебиторскойЗадолженности.ДанныеОбесценения КАК ТабЧасть
	               |ГДЕ
	               |	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоДанныеОбесценения = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДанныеОбесценения", ТаблицаПоДанныеОбесценения);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
		ВидОперации = Неопределено;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Функция проверяет заполнение реквизита в табличной части.
// 
// Параметры:
//  ЗначениеРеквизита 		- Любой тип.
//  ПредставлениеРеквизита 	- Строка.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  Отказ 					- Булево.
// 
// Возвращаемое значение:
// 	Результат 				- Булево
// 
Функция ПроверитьЗаполнениеРеквизита(ЗначениеРеквизита, ПредставлениеРеквизита, СтрокаТаблицы, Отказ)

	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		МетаданныеРеквизиты 	= Метаданные().ТабличныеЧасти.ДанныеОбесценения.Реквизиты;
		ПредставлениеРеквизита 	= МетаданныеРеквизиты[ПредставлениеРеквизита].Представление();

		СтрокаСообщения = НСтр("ru = 'Строка номер %1%: Не заполнено значение реквизита ""%2%"".'");
		СтрокаСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрокаСообщения, СокрЛП(СтрокаТаблицы.НомерСтроки), ПредставлениеРеквизита);
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(СтрокаСообщения, ЭтотОбъект, , Отказ);
		
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПроверитьЗаполнениеРеквизита() 

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных 	= СтруктураТаблиц.ДанныеОбесценения;
	ВидыОпераций	= Перечисления.бит_му_ВидыОперацийОбесценениеДебиторскойЗадолженности;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ФормированиеРезерва Тогда
			
			// Формируем проводку по формированию резерва по деб. задолженности.
			СформироватьЗаписьПоФормированиюРезерва(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Отказ);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ВозвратРезерва Тогда
			
			// Формируем проводку по формированию возврата резерва по деб. задолженности
			// Дт Счет резерва Кт Счет доходов, СуммаРезерва.
			СформироватьЗаписьПоФормированиюВозвратаРезерва(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение по формированию резерва по деб. задолженности
// Дт Счет расходов Кт Счет резерва, СуммаРезерва.
// или
// //Дт СчетРезерва Кт СчетРасходов, (ОстатокРезерва - СуммаРезерва).
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы			- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
// 
Процедура СформироватьЗаписьПоФормированиюРезерва(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Отказ)
	
	Если СтрокаТаблицы.СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если счет расходов в табличной части не указан, то в проводках используется счет расходов из шапки документа.
	СтруктураСчетаРасходов = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходовРасходов), СтрокаТаблицы, СтруктураШапкиДокумента);
	
	// Проверим заполнение счетов
	Если НЕ ПроверитьЗаполнениеРеквизита(СтруктураСчетаРасходов.СчетДоходовРасходов, "СчетДоходовРасходов", СтрокаТаблицы, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Если счет резерва в табличной части не указан, то в проводках используется счет резерва из шапки документа.
	СчетРезерва = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетРезерва), СтрокаТаблицы.СчетРезерва, СтруктураШапкиДокумента.СчетРезерва);
	
	// Если счет резерва не заполнен, то в проводках используется счет учета из строки таблицы.
	СчетРезерва = ?(ЗначениеЗаполнено(СчетРезерва), СчетРезерва, СтрокаТаблицы.СчетУчета);
	
	Если НЕ ПроверитьЗаполнениеРеквизита(СчетРезерва, "СчетРезерва", СтрокаТаблицы, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим вид и сумму проводки
	Если СтрокаТаблицы.Возвратность Тогда
		
		// Дт СчетРезерва Кт СчетРасходов, ОстатокРезерва.
		СчетДт = СчетРезерва; СчетКт = СтруктураСчетаРасходов.СчетДоходовРасходов;
		СуммаПроводки = СтрокаТаблицы.ОстатокРезерва;
		
	ИначеЕсли СтрокаТаблицы.ОстатокРезерва > СтрокаТаблицы.СуммаРезерва Тогда
		
		// Дт СчетРезерва Кт СчетРасходов, ОстатокРезерва - СуммаРезерва.
		СчетДт = СчетРезерва; СчетКт = СтруктураСчетаРасходов.СчетДоходовРасходов;
		СуммаПроводки = СтрокаТаблицы.ОстатокРезерва - СтрокаТаблицы.СуммаРезерва;
		
	Иначе
		
		// Дт Счет расходов Кт Счет резерва, СуммаРезерва.
		СчетДт = СтруктураСчетаРасходов.СчетДоходовРасходов; СчетКт = СчетРезерва;
		СуммаПроводки = СтрокаТаблицы.СуммаРезерва;
		
	КонецЕсли;
	
	Если СуммаПроводки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтруктураШапкиДокумента.ВалютаДокумента
										 ,СчетДт
										 ,СчетКт
										 ,СуммаПроводки
										 ,"Резерв по дебиторской задолженности");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	Если СчетДт = СтруктураСчетаРасходов.СчетДоходовРасходов Тогда
		Для Н = 1 По мКоличествоСубконтоМУ Цикл
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Н, СтруктураСчетаРасходов["СубконтоДоходовРасходов" + Н]);
		КонецЦикла;
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	Иначе
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
		
		Для Н = 1 По мКоличествоСубконтоМУ Цикл
			бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Н, СтруктураСчетаРасходов["СубконтоДоходовРасходов" + Н]);
		КонецЦикла;
	КонецЕсли;
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьЗаписьПоФормированиюРезерва()

// Процедура формирует движение по формированию возврата резерва по деб. задолженности
// Дт Счет резерва Кт Счет доходов, СуммаРезерва.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы			- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
// 
Процедура СформироватьЗаписьПоФормированиюВозвратаРезерва(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют, Отказ)
	
	Если СтрокаТаблицы.СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если счет доходов в табличной части не указан, то в проводках используется счет доходов из шапки документа.
	СтруктураСчетаДоходов = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходовРасходов), СтрокаТаблицы, СтруктураШапкиДокумента);
	
	// Проверим заполнение счетов
	Если НЕ ПроверитьЗаполнениеРеквизита(СтруктураСчетаДоходов.СчетДоходовРасходов, "СчетДоходовРасходов", СтрокаТаблицы, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Если счет резерва в табличной части не указан, то в проводках используется счет резерва из шапки документа.
	СчетРезерва = ?(ЗначениеЗаполнено(СтрокаТаблицы.СчетРезерва), СтрокаТаблицы.СчетРезерва, СтруктураШапкиДокумента.СчетРезерва);
	
	Если НЕ ПроверитьЗаполнениеРеквизита(СчетРезерва, "СчетРезерва", СтрокаТаблицы, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтруктураШапкиДокумента.ВалютаДокумента
										 ,СчетРезерва
										 ,СтруктураСчетаДоходов.СчетДоходовРасходов
										 ,СтрокаТаблицы.СуммаРезерва
										 ,"Возврат резерва по дебиторской задолженности");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	Для Н = 1 По мКоличествоСубконтоМУ Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Н, СтруктураСчетаДоходов["СубконтоДоходовРасходов" + Н]);
	КонецЦикла;
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьЗаписьПоФормированиюВозвратаРезерва()

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
