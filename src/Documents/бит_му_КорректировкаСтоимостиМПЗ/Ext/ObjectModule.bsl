#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
// 
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка установки признаков корректировки.
	Если НЕ КорректировкаСуммаМУ И НЕ КорректировкаСуммаУпр Тогда
	
		 Отказ = Истина;
		 ТекстСообщения =  НСтр("ru = 'Не указаны ресурсы для корректировки!'");
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		 Возврат;
	
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);	
	СтруктураШапкиДокумента.Вставить("МаксКолСубконто", Метаданные.ПланыСчетов.бит_Дополнительный_2.МаксКоличествоСубконто);	
	
	ПроверитьДублиДокументов(СтруктураШапкиДокумента, Отказ);
	
	Если Не Отказ Тогда
		
		СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);			
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	МаксКолСубконто = Метаданные.ПланыСчетов.бит_Дополнительный_2.МаксКоличествоСубконто;
	
	// Инициализация таблицы корректировок
	ТабКор = КонструкторТаблицыКорректировок(СтруктураШапкиДокумента);
		
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийКорректировкиСтоимостиМПЗ.КорректировкаСтоимостиСписания Тогда
					
		// Списание по средней - для БП только по средней.
		СписокСчетов = ПолучитьСписокСчетовДляИсторическихКурсов();
		ПолучитьТаблицуКорректировокМетодомПоСредней(СтруктураШапкиДокумента, ТабКор, СписокСчетов);
				
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийКорректировкиСтоимостиМПЗ.СпецодеждаСпецоснастка Тогда	
		
		СписокСчетов = Новый СписокЗначений;
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
		
		ПолучитьТаблицуКорректировокСпецодеждыБП(СтруктураШапкиДокумента, ТабКор, СписокСчетов);	
				
	КонецЕсли; 
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ТабКор", ТабКор);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
		КорректировкаСуммаМУ  = Истина;
		КорректировкаСуммаУпр = Истина;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Функция получает список счетов учета номенклатуры, 
// для которых необходимо вести учет по историческим курсам.
// 
// Возвращаемое значение:
//  СписокСчетов - СписокЗначений.
// 
Функция ПолучитьСписокСчетовДляИсторическихКурсов()

	СписокСчетов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Номенклатура);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	МУ_ВидыСубконто.Ссылка
	               |ИЗ
	               |	ПланСчетов.бит_Дополнительный_2.ВидыСубконто КАК МУ_ВидыСубконто
	               |ГДЕ
	               |	МУ_ВидыСубконто.ВидСубконто = &ВидСубконто
	               |	И МУ_ВидыСубконто.Ссылка.ИспользоватьИсторическиеКурсы";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокСчетов.Добавить(Выборка.Ссылка);
	
	КонецЦикла; 

	Если СписокСчетов.Количество() = 0 Тогда
	
		ТекстСообщения =  НСтр("ru = 'Нет счетов, использующих исторические курсы!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли;
	
	Возврат СписокСчетов;
	
КонецФункции // ПолучитьСписокСчетовДляИсторическихКурсов()

// Функция получает список счетов для поиска партий поступления.
// 
// Возвращаемое значение:
//  СписокСчетов - СписокЗначений.
// 
Функция ПолучитьСписокСчетовПоискаПартий()
	
	СписокСчетов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Материалы", ПланыСчетов.Хозрасчетный.Материалы);
	Запрос.УстановитьПараметр("СпецоснасткаИСпецодеждаВЭксплуатации", ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	Запрос.УстановитьПараметр("МатериалыПереданныеВПереработку", ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	(Хозрасчетный.Ссылка В ИЕРАРХИИ (&Материалы)
	               |			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СпецоснасткаИСпецодеждаВЭксплуатации))
	               |	И Хозрасчетный.Ссылка <> &МатериалыПереданныеВПереработку";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокСчетов.Добавить(Выборка.Ссылка);
	
	КонецЦикла; 
				   
	Возврат СписокСчетов;
	
КонецФункции // ПолучитьСписокСчетовПоискаПартий()

// Функция инициализирует таблицу корректировок.
// 
// Возвращаемое значение:
//  ТабКор - ТаблицаЗначений.
// 
Функция КонструкторТаблицыКорректировок(СтруктураШапкиДокумента)
	
	ТабКор = Новый ТаблицаЗначений;
	ТабКор.Колонки.Добавить("Период"     , Новый ОписаниеТипов("Дата"));
	ТабКор.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));	
	ТабКор.Колонки.Добавить("СчетДт"     , Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	ТабКор.Колонки.Добавить("СчетКт"     , Новый ОписаниеТипов("ПланСчетовСсылка.бит_Дополнительный_2"));
	
	Для н = 1 По СтруктураШапкиДокумента.МаксКолСубконто Цикл
		
		ТабКор.Колонки.Добавить("СубконтоДт"+н);
		ТабКор.Колонки.Добавить("СубконтоКт"+н);
		
	КонецЦикла; 
	
	ТабКор.Колонки.Добавить("СуммаМУ"   , Новый ОписаниеТипов("Число"));
	ТабКор.Колонки.Добавить("СуммаУпр"  , Новый ОписаниеТипов("Число"));
	ТабКор.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	
	Возврат ТабКор;
	
КонецФункции // КонструкторТаблицыКорректировок()

// ----------------------------------------------------------------------
// БП

// Функция вычисляет сумму корректировок по спецодежде.
// 
// Параметры:
//  Сумма - Число
//  КурсНач - Структура
//  КурсКон - Структура
// 
// Возвращаемое значение:
//  СуммаКор - Число.
// 
Функция СуммаКорректировкиСпецодежды(Сумма, КурсНач, КурсКон)

	СуммаКор = 0;
	
	Если КурсНач.Курс > 0 И КурсКон.Курс > 0 Тогда
		
		СуммаКор = Сумма*( (КурсНач.Кратность/КурсНач.Курс) - (КурсКон.Кратность/КурсКон.Курс) );
		
	КонецЕсли; 

	Возврат СуммаКор;
	
КонецФункции // СуммаКорректировкиСпецодежды()

// Процедура заполняет таблицу корректировок для метода учета МПЗ по-средней.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  ТабКор                  - ТаблицаЗначений.
//  СписокСчетов            - СписокЗначений.
// 
Процедура ПолучитьТаблицуКорректировокМетодомПоСредней(СтруктураШапкиДокумента, ТабКор, СписокСчетов)
	
	// Тест оборотов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("КонецПериода" , КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация"  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокСчетов" , СписокСчетов);
	
	// Извлекаем остатки на начало, и интересующие нас операции.
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&НачалоПериода 		 КАК Период,
	|	МУ_Остатки.Счет 	 КАК Счет,
	|	МУ_Остатки.Субконто1 КАК Субконто1,
	|	МУ_Остатки.Субконто2 КАК Субконто2,
	|	МУ_Остатки.Субконто3 КАК Субконто3,
	|	МУ_Остатки.Субконто4 КАК Субконто4,
	|	0 КАК СуммаУпрОборотДт,
	|	0 КАК СуммаУпрОборотКт,
	|	0 КАК СуммаМУОборотДт,
	|	0 КАК СуммаМУОборотКт,
	|	0 КАК КоличествоОборотДт,
	|	0 КАК КоличествоОборотКт,
	|	ЕСТЬNULL(МУ_Остатки.СуммаУпрОстатокДт, 0) 	КАК СуммаУпрОстатокДт,
	|	ЕСТЬNULL(МУ_Остатки.СуммаМУОстатокДт, 0) 	КАК СуммаМУОстатокДт,
	|	ЕСТЬNULL(МУ_Остатки.КоличествоОстатокДт, 0) КАК КоличествоОстатокДт,
	|	""Остаток"" КАК ВидСтроки,
	|	0 КАК Приоритет,
	|	NULL КАК КорСчет,
	|	NULL КАК КорСубконто1,
	|	NULL КАК КорСубконто2,
	|	NULL КАК КорСубконто3,
	|	NULL КАК КорСубконто4,
	|	МУ_Остатки.Организация
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(&НачалоПериода, Счет В (&СписокСчетов), , Организация = &Организация) КАК МУ_Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МУ_Обороты.Период,
	|	МУ_Обороты.Счет,
	|	МУ_Обороты.Субконто1,
	|	МУ_Обороты.Субконто2,
	|	МУ_Обороты.Субконто3,
	|	МУ_Обороты.Субконто4,
	|	СУММА(ЕСТЬNULL(МУ_Обороты.СуммаУпрОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(МУ_Обороты.СуммаУпрОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(МУ_Обороты.СуммаМУОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(МУ_Обороты.СуммаМУОборотКт, 0)),
	|	СУММА(ЕСТЬNULL(МУ_Обороты.КоличествоОборотДт, 0)),
	|	СУММА(ЕСТЬNULL(МУ_Обороты.КоличествоОборотКт, 0)),
	|	СУММА(0),
	|	СУММА(0),
	|	СУММА(0),
	|	""Оборот"",
	|	СУММА(1),
	|	МУ_Обороты.КорСчет,
	|	МУ_Обороты.КорСубконто1,
	|	МУ_Обороты.КорСубконто2,
	|	МУ_Обороты.КорСубконто3,
	|	МУ_Обороты.КорСубконто4,
	|	МУ_Обороты.Организация
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(&НачалоПериода, &КонецПериода, Запись, Счет В (&СписокСчетов), , Организация = &Организация, , ) КАК МУ_Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	МУ_Обороты.Период,
	|	МУ_Обороты.Счет,
	|	МУ_Обороты.Субконто1,
	|	МУ_Обороты.Субконто2,
	|	МУ_Обороты.Субконто3,
	|	МУ_Обороты.Субконто4,
	|	МУ_Обороты.КорСчет,
	|	МУ_Обороты.КорСубконто1,
	|	МУ_Обороты.КорСубконто2,
	|	МУ_Обороты.КорСубконто3,
	|	МУ_Обороты.КорСубконто4,
	|	МУ_Обороты.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Приоритет
	|";
				   
				   
    Результат = Запрос.Выполнить();
	ТабВрем = Результат.Выгрузить();
	ТабВрем.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	ТабВрем.Индексы.Добавить("Счет, Субконто1, Субконто2, Субконто3, Субконто4");
	
	// Инициализация дерева данных
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДеревоДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДеревоДанных.Колонки.Добавить("Счет");
	ДеревоДанных.Колонки.Добавить("КорСчет");	
	ДеревоДанных.Колонки.Добавить("ВидСтроки", Новый ОписаниеТипов("Строка"));
	Для н = 1 По СтруктураШапкиДокумента.МаксКолСубконто Цикл		
		ДеревоДанных.Колонки.Добавить("Субконто"   + н);
		ДеревоДанных.Колонки.Добавить("КорСубконто"+ н);		
	КонецЦикла;	
	ОписаниеЧисло = Новый ОписаниеТипов("Число");
	
	ДеревоДанных.Колонки.Добавить("СуммаУпрОстатокДт"  , ОписаниеЧисло);
	ДеревоДанных.Колонки.Добавить("СуммаМУОстатокДт"   , ОписаниеЧисло);
	ДеревоДанных.Колонки.Добавить("КоличествоОстатокДт", ОписаниеЧисло);	
	ДеревоДанных.Колонки.Добавить("СуммаУпрОборотДт", ОписаниеЧисло);
	ДеревоДанных.Колонки.Добавить("СуммаУпрОборотКт", ОписаниеЧисло);
	ДеревоДанных.Колонки.Добавить("СуммаМУОборотДт", ОписаниеЧисло);
	ДеревоДанных.Колонки.Добавить("СуммаМУОборотКт", ОписаниеЧисло);
	ДеревоДанных.Колонки.Добавить("КоличествоОборотДт", ОписаниеЧисло);
	ДеревоДанных.Колонки.Добавить("КоличествоОборотКт", ОписаниеЧисло);
	
	// Группируем данные в удобном для расчетов виде.
	Для каждого СтрокаТаблицы Из ТабВрем Цикл
	
		Если СтрокаТаблицы.ВидСтроки = "Остаток" ИЛИ (СтрокаТаблицы.ВидСтроки = "Оборот" И НЕ СтрокаТаблицы.Обработана) Тогда
		
			 СтрокаВерх = ДеревоДанных.Строки.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаВерх, СтрокаТаблицы);
			 
			 СтрокаДетали = СтрокаВерх.Строки.Добавить();
			 ЗаполнитьЗначенияСвойств(СтрокаДетали, СтрокаТаблицы);
			 СтрокаТаблицы.Обработана = Истина;
			 
			 СтрОтбор = Новый Структура;
			 СтрОтбор.Вставить("Счет", СтрокаТаблицы.Счет);
			 
			 Для н = 1 По СтруктураШапкиДокумента.МаксКолСубконто Цикл			 
			 	 СтрОтбор.Вставить("Субконто" + н, СтрокаТаблицы["Субконто" + н]);			 
			 КонецЦикла; 
			 СтрОтбор.Вставить("ВидСтроки", "Оборот");
			 СтрОтбор.Вставить("Обработана", Ложь);
			 
			 НайденныеСтроки = ТабВрем.НайтиСтроки(СтрОтбор);
			 
			 Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			 
			 	СтрокаДетали = СтрокаВерх.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДетали, НайденнаяСтрока);
				НайденнаяСтрока.Обработана = Истина;
			 
			 КонецЦикла; 
			 
		КонецЕсли; 
	
	КонецЦикла; 
	
	// Вычисление корректировок
	Для каждого СтрокаВерх Из ДеревоДанных.Строки Цикл
		
		ТекДанные = Новый Структура("Кол,СуммаУпр,СуммаМУ", 0, 0, 0);			
		
		Для каждого СтрокаДетали Из СтрокаВерх.Строки Цикл
			
			Если СтрокаДетали.ВидСтроки = "Остаток" Тогда
				
				ТекДанные.Кол      = СтрокаДетали.КоличествоОстатокДт;
				ТекДанные.СуммаУпр = СтрокаДетали.СуммаУпрОстатокДт;
				ТекДанные.СуммаМУ  = СтрокаДетали.СуммаМУОстатокДт;
				
			Иначе	
				
				СуммаКорУпр = 0;
				СуммаКорМУ  = 0;
				
				Если ТекДанные.СуммаУпр > 0 И СтрокаДетали.КоличествоОборотКт > 0 И ТекДанные.Кол > 0 Тогда
					
					СуммаКорУпр = (ТекДанные.СуммаУпр/ТекДанные.Кол)*СтрокаДетали.КоличествоОборотКт - СтрокаДетали.СуммаУпрОборотКт;
					
				КонецЕсли; 
				
				Если ТекДанные.СуммаМУ > 0 И СтрокаДетали.КоличествоОборотКт > 0 И ТекДанные.Кол > 0 Тогда
					
					СуммаКорМУ =  (ТекДанные.СуммаМУ/ТекДанные.Кол)*СтрокаДетали.КоличествоОборотКт - СтрокаДетали.СуммаМУОборотКт;
					
				КонецЕсли; 
				
				ТекДанные.СуммаУпр = ТекДанные.СуммаУпр - СтрокаДетали.СуммаУпрОборотКт + СтрокаДетали.СуммаУпрОборотДт;					
				ТекДанные.СуммаМУ  = ТекДанные.СуммаМУ - СтрокаДетали.СуммаМУОборотКт + СтрокаДетали.СуммаМУОборотДт;
				ТекДанные.Кол      = ТекДанные.Кол - СтрокаДетали.КоличествоОборотКт + СтрокаДетали.КоличествоОборотДт;
				
				// Корректировки должна влиять на остаток
				ТекДанные.СуммаУпр = ТекДанные.СуммаУпр + СуммаКорУпр;
				ТекДанные.СуммаМУ  = ТекДанные.СуммаМУ  + СуммаКорМУ;
				
				Если СуммаКорУпр <> 0 ИЛИ СуммаКорМУ <> 0 Тогда
					
					// Необходимо создать корректировочную проводку.
					НоваяСтрока = ТабКор.Добавить();
					НоваяСтрока.Период      = СтрокаДетали.Период;
					НоваяСтрока.Организация = СтрокаДетали.Организация;
					НоваяСтрока.СчетДт = СтрокаДетали.КорСчет;
					НоваяСтрока.СчетКт = СтрокаДетали.Счет;
					
					Для н = 1 По СтруктураШапкиДокумента.МаксКолСубконто Цикл
						
						НоваяСтрока["СубконтоДт" + н] = СтрокаДетали["КорСубконто" + н];
						НоваяСтрока["СубконтоКт" + н] = СтрокаДетали["Субконто" + н];
						
					КонецЦикла; 
					
					НоваяСтрока.СуммаУпр = ?(СтруктураШапкиДокумента.КорректировкаСуммаУпр, СуммаКорУпр, 0);
					НоваяСтрока.СуммаМУ  = ?(СтруктураШапкиДокумента.КорректировкаСуммаМУ , СуммаКорМУ , 0);
					
					
					Если СтрокаДетали.Субконто1 = СтрокаДетали.КорСубконто1 
						 И ТипЗнч(СтрокаДетали.Субконто1) = Тип("СправочникСсылка.Номенклатура") 
						 И ЗначениеЗаполнено(СтрокаДетали.Субконто1) Тогда
					
						 // Это перемещение - корректировку нужно добавить к соответствующей строке.
						 
						 СтрОтбор = Новый Структура;
						 СтрОтбор.Вставить("Счет", СтрокаДетали.КорСчет);
						 
						 Для н = 1 По СтруктураШапкиДокумента.МаксКолСубконто Цикл
							 
							 СтрОтбор.Вставить("Субконто"+н, СтрокаДетали["КорСубконто" + н]);
							 
						 КонецЦикла; 
						 Найденные = ДеревоДанных.Строки.НайтиСтроки(СтрОтбор, Истина);
						 Для каждого СтрНайденная Из Найденные Цикл
						 
							СтрНайденная.СуммаМУОборотДт = СтрНайденная.СуммаМУОборотДт + СуммаКорМУ;
							СтрНайденная.СуммаУпрОборотДт = СтрНайденная.СуммаУпрОборотДт + СуммаКорУпр;
						 
						 КонецЦикла; 
						 
						 
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли;  // По виду строки
			
		КонецЦикла;   // ДетальныеЗаписи
		
	КонецЦикла; // ДеревоДанных 
	
КонецПроцедуры // ПолучитьТаблицуКорректировокМетодомПоСредней()

// Функция выполняет поиск партии, которая стоит в начале цепочки передач. 
// Т.е. партии по которой производилось списание.
// 
// Параметры:
//  СвязиПартий   - Соответствие.
//  ТекущаяПартия - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТекПартия - ДокументСсылка.
// 
Функция НайтиНачальнуюПартию(СвязиПартий, ТекущаяПартия)

	инд = 1;
	вхПартия    = ТекущаяПартия;
	флВыполнять = Истина;
	Пока флВыполнять Цикл
		
		// "раскручиваем" в обратном порядке цепочку партий.
		ТекПартия = СвязиПартий[вхПартия];
		
		Если ТекПартия = вхПартия ИЛИ ТекПартия = Неопределено ИЛИ инд > 10 Тогда
		
			флВыполнять = Ложь;
			
		Иначе
			
			вхПартия = ТекПартия;
		
		КонецЕсли; 
		
		инд = инд +1;
		
	КонецЦикла;

	Возврат ТекПартия;
	
КонецФункции // НайтиНачальнуюПартию()

// Процедура выполняет поиск партий поступления. 
// 
// Параметры:
//  ПартииПоиска - Массив - партии, для которых необходимо найти партии поступления.
//  ПервыеПартии - Соответствие - ключ: партия списания, значение: партия поступления.
//  СвязиПартий  - Соответствие.
//  ОписаниеКонтроль - ОписаниеТипов.
//  НомерИтерации - Число.
// 
Функция ВыполнитьИтерациюПоискаПартий(ПартииПоиска, ПервыеПартии, СвязиПартий, ОписаниеКонтроль, НомерИтерации)
	
	ПартииПоискаНов = Новый Массив;	
	
	// Поиск партий поступления
	Если ПартииПоиска.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КонецПериода" , Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация"  , Организация);
		Запрос.УстановитьПараметр("ПартииПоиска" , ПартииПоиска);
		
		СписокСчетовПоиска = ПолучитьСписокСчетовПоискаПартий();
		Запрос.УстановитьПараметр("СписокСчетовПоиска", СписокСчетовПоиска);
				
		// Запрос выполняет поиск корреспондирующих партий для текущих партий поиска
		// поиск выполняется по 10-ым счетам.
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	БУОбДтКт.СчетДт,
		               |	БУОбДтКт.СчетКт,
		               |	БУОбДтКт.СубконтоДт2 КАК ПартияДт,
		               |	БУОбДтКт.СубконтоКт2 КАК ПартияКт,
		               |	БУОбДтКт.СуммаОборот,
		               |	БУОбДтКт.СуммаНУОборотДт,
		               |	БУОбДтКт.СуммаНУОборотКт,
		               |	БУОбДтКт.СуммаПРОборотДт,
		               |	БУОбДтКт.СуммаПРОборотКт,
		               |	БУОбДтКт.СуммаВРОборотДт,
		               |	БУОбДтКт.СуммаВРОборотКт,
		               |	БУОбДтКт.КоличествоОборотДт,
		               |	БУОбДтКт.КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		               |			,
		               |			&КонецПериода,
		               |			Запись,
		               |			СчетДт В (&СписокСчетовПоиска),
		               |			,
		               |			СчетКт В (&СписокСчетовПоиска),
		               |			,
		               |			Организация = &Организация
		               |				И СубконтоДт2 В (&ПартииПоиска)) КАК БУОбДтКт
		               |ГДЕ
		               |	НЕ БУОбДтКт.СубконтоКт2 ЕСТЬ NULL ";
		
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПартияКт) Тогда
				
				Если ОписаниеКонтроль.СодержитТип(ТипЗнч(Выборка.ПартияКт)) Тогда
					
					// Найдена корреспонтирующая партия, и она подходящего типа
					// необходимо найти партию списания, и для нее заполнить партию поступления.
					ТекПартия = НайтиНачальнуюПартию(СвязиПартий, Выборка.ПартияДт);
					Если НЕ ТекПартия = Неопределено Тогда
						
						ПервыеПартии.Вставить(ТекПартия, Выборка.ПартияКт);
						
					КонецЕсли; 
					
				Иначе	
					
					// Корреспондирующая партия найдена, но она не походящего типа.
					ПерваяПартия = ПервыеПартии[Выборка.ПартияКт];
					Если ЗначениеЗаполнено(ПерваяПартия) Тогда
						
						// Для корреспондирующей партии уже найдена партия поступления.
						ТекПартия = НайтиНачальнуюПартию(СвязиПартий, Выборка.ПартияДт);
						Если НЕ ТекПартия = Неопределено Тогда
							
							ПервыеПартии.Вставить(ТекПартия, ПерваяПартия);
							
						КонецЕсли; 
						
					Иначе	
						
						// Необходимо "раскручивать" цепочку партий дальше.
						ПартииПоискаНов.Добавить(Выборка.ПартияКт);
						СвязиПартий.Вставить(Выборка.ПартияКт, Выборка.ПартияДт);
						
					КонецЕсли; 
						
				КонецЕсли; 
				
			Иначе	
				
				// Корреспондирующая партия не найдена - повторим поиск в следующей итерации.
				ПартииПоискаНов.Добавить(Выборка.ПартияДт);
				
			КонецЕсли; 
			
		КонецЦикла;  // По выборке
		
	КонецЕсли; 
	
	НомерИтерации = НомерИтерации + 1;
	
	Возврат ПартииПоискаНов;
	
КонецФункции // ВыполнитьИтерациюПоискаПартий()

// Процедура заполняет таблицу корректировок для спецодежды и спецоснастки (БП).
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  ТабКор                  - ТаблицаЗначений.
//  СписокСчетов            - СписокЗначений.
// 
Процедура ПолучитьТаблицуКорректировокСпецодеждыБП(СтруктураШапкиДокумента, ТабКор, СписокСчетов)
	
	МаксКолСубконтоБУ = Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;
	
	ПервыеПартии = Новый Соответствие; // Соответствие партий списания и партий поступления
	СвязиПартий  = Новый Соответствие; // хранит цепочки партий
	ПартииПоиска = Новый Массив;       // массив партий, для которых необходимо выполнить поиск партий поступления
	
	// Типы документов, которые являются партиями поступления.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
	
		МассивТипов.Добавить(Тип("ДокументСсылка.ОприходованиеТоваров"));
	
	КонецЕсли; 
	ОписаниеКонтроль = Новый ОписаниеТипов(МассивТипов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода" , Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация"  , Организация);
	Запрос.УстановитьПараметр("СписокСчетов" , СписокСчетов);
	
	// Ограничения по субконто, т.к. ищем только списание партий материалов из эксплуатации.
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	
	ОбъектХозрасчетный = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	ОбъектРегистрМУ    = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.бит_Дополнительный_2);
	
	Запрос.УстановитьПараметр("Источник", ОбъектХозрасчетный);
	Запрос.УстановитьПараметр("Приемник", ОбъектРегистрМУ);
	
	// Выбираем движения по списанию материалов и соответствующие им движения по МУ.
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БУОбДтКт.Период,
	               |	БУОбДтКт.НомерСтроки,
	               |	БУОбДтКт.Регистратор,
	               |	БУОбДтКт.СчетДт,
	               |	БУОбДтКт.СубконтоДт1,
	               |	БУОбДтКт.СубконтоДт2,
	               |	БУОбДтКт.СубконтоДт3,
	               |	БУОбДтКт.СчетКт,
	               |	БУОбДтКт.СубконтоКт1 КАК ПартияМатериалов,
	               |	БУОбДтКт.Организация,
	               |	БУОбДтКт.СуммаОборот,
	               |	МУ_ОборотыДтКт.СчетДт КАК МУ_СчетДт,
	               |	МУ_ОборотыДтКт.СчетКт КАК МУ_СчетКт,
	               |	МУ_ОборотыДтКт.СубконтоДт1 КАК МУ_СубконтоДт1,
	               |	МУ_ОборотыДтКт.СубконтоДт2 КАК МУ_СубконтоДт2,
	               |	МУ_ОборотыДтКт.СубконтоДт3 КАК МУ_СубконтоДт3,
	               |	МУ_ОборотыДтКт.СубконтоДт4 КАК МУ_СубконтоДт4,
	               |	МУ_ОборотыДтКт.СубконтоКт1 КАК МУ_СубконтоКт1,
	               |	МУ_ОборотыДтКт.СубконтоКт2 КАК МУ_СубконтоКт2,
	               |	МУ_ОборотыДтКт.СубконтоКт3 КАК МУ_СубконтоКт3,
	               |	МУ_ОборотыДтКт.СубконтоКт4 КАК МУ_СубконтоКт4,
	               |	МУ_ОборотыДтКт.СуммаУпрОборот КАК МУ_СуммаУпрОборот,
	               |	МУ_ОборотыДтКт.СуммаМУОборот КАК МУ_СуммаМУОборот
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, Запись, , , СчетКт В (&СписокСчетов), &МассивСубконто, Организация = &Организация) КАК БУОбДтКт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеЗаписейТрансляции КАК бит_СоответствиеЗаписейТрансляции
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.ОборотыДтКт(&НачалоПериода, &КонецПериода, Запись, , , , , Организация = &Организация) КАК МУ_ОборотыДтКт
	               |			ПО бит_СоответствиеЗаписейТрансляции.НомерСтрокиПриемника = МУ_ОборотыДтКт.НомерСтроки
	               |				И бит_СоответствиеЗаписейТрансляции.Регистратор = МУ_ОборотыДтКт.Регистратор
	               |		ПО БУОбДтКт.Регистратор = бит_СоответствиеЗаписейТрансляции.Регистратор
	               |			И БУОбДтКт.НомерСтроки = бит_СоответствиеЗаписейТрансляции.НомерСтрокиИсточника
	               |			И (бит_СоответствиеЗаписейТрансляции.Источник = &Источник)
	               |			И (бит_СоответствиеЗаписейТрансляции.Приемник = &Приемник)";
	
	
	Результат = Запрос.Выполнить();
	
	ТабПроводки = Результат.Выгрузить();
	Для каждого СтрокаТаблицы Из ТабПроводки Цикл
		
		ТекПартияПоступления = Неопределено;
		Для н = 1 По МаксКолСубконтоБУ Цикл
			
			ИмяСубконто = "СубконтоДт"+н;
			Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяСубконто]) И ОписаниеКонтроль.СодержитТип(ТипЗнч(СтрокаТаблицы[ИмяСубконто])) Тогда
				
				ТекПартияПоступления = СтрокаТаблицы[ИмяСубконто];
				Продолжить;
				
			КонецЕсли; 
			
		КонецЦикла; // По субконто 
		
		ПервыеПартии.Вставить(СтрокаТаблицы.ПартияМатериалов, ТекПартияПоступления);
		СвязиПартий.Вставить(СтрокаТаблицы.ПартияМатериалов, СтрокаТаблицы.ПартияМатериалов);
		Если НЕ ЗначениеЗаполнено(ТекПартияПоступления) Тогда
			
			ПартииПоиска.Добавить(СтрокаТаблицы.ПартияМатериалов);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Поиск партий поступления
	НомерИтерации = 1;
	флВыполнять = Истина;
	Пока флВыполнять Цикл
	
		ПартииПоиска = ВыполнитьИтерациюПоискаПартий(ПартииПоиска, ПервыеПартии, СвязиПартий, ОписаниеКонтроль, НомерИтерации);
		
		Если ПартииПоиска.Количество() = 0 ИЛИ НомерИтерации > 10 Тогда
		
			флВыполнять = Ложь;
		
		КонецЕсли; 
	
	КонецЦикла;
	
	ВалютаУпр = Константы.бит_ВалютаУправленческогоУчета.Получить();
	ВалютаМУ  = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(СтруктураШапкиДокумента.Организация);
	
	// Формирование таблицы корректировок
	ТабПроводки.Колонки.Добавить("ПартияПоступления");
	ТабПроводки.Колонки.Добавить("ПартияПоступленияДата");
	ТабПроводки.Колонки.Добавить("ПартияМатериаловДата");
	
	ТабПериодыВрем = Новый ТаблицаЗначений;
	ТабПериодыВрем.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	// Заполнение дополнительных данных
	Для каждого СтрокаТаблицы Из ТабПроводки Цикл
		
		ПартияПоступления = ПервыеПартии[СтрокаТаблицы.ПартияМатериалов];
		Если ЗначениеЗаполнено(ПартияПоступления) Тогда
			
			 СтрокаТаблицы.ПартияПоступления = ПартияПоступления;
			 СтрокаТаблицы.ПартияПоступленияДата = ПартияПоступления.Дата;
			 
			 СтрокаПериоды = ТабПериодыВрем.Добавить();
			 СтрокаПериоды.Период = НачалоДня(СтрокаТаблицы.ПартияПоступленияДата);
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПартияМатериалов) Тогда
		
			 СтрокаТаблицы.ПартияМатериаловДата = СтрокаТаблицы.ПартияМатериалов.Дата;
			 
			 СтрокаПериоды = ТабПериодыВрем.Добавить();
			 СтрокаПериоды.Период = НачалоДня(СтрокаТаблицы.ПартияМатериаловДата);
		
		КонецЕсли; 
		
	КонецЦикла; // ТабПроводки
	
	// Получим курсы необходимых валют сразу на все периоды.
	ТабПериодыВрем.Сортировать("Период");
	ТабПериодыВрем.Свернуть("Период");
	
	СтруктураПараметров = Новый Структура;
	Параметры = Новый Структура;
	Параметры.Вставить("Валюта",ВалютаУпр);
	СтруктураПараметров.Вставить("Упр",Параметры);
	Параметры = Новый Структура;
	Параметры.Вставить("Валюта",ВалютаМУ);
	СтруктураПараметров.Вставить("МУ",Параметры);

	КурсыПоПериодам = бит_КурсыВалют.ПолучитьКурсыВалютПоПериодам(ТабПериодыВрем, Неопределено, СтруктураПараметров);
	
	// Вычисление корректировок и заполнение таблицы корректировок.
	Для каждого СтрокаТаблицы Из ТабПроводки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПартияПоступления) Тогда
			
			// Получаем курсы валют
			КурсУпрНач = Неопределено;
			КурсУпрКон = Неопределено;
			КурсМУНач  = Неопределено;
			КурсМУКон  = Неопределено;
			
			КурсыНач = КурсыПоПериодам[СтрокаТаблицы.ПартияПоступленияДата];
			Если ТипЗнч(КурсыНач) = Тип("Структура") Тогда
				
				КурсУпрНач = КурсыНач.Упр;
				КурсМУНач  = КурсыНач.МУ;
				
			КонецЕсли; 
			
			КурсыКон = КурсыПоПериодам[СтрокаТаблицы.ПартияМатериаловДата];
			Если ТипЗнч(КурсыКон) = Тип("Структура") Тогда
				
				КурсУпрКон = КурсыКон.Упр;
				КурсМУКон  = КурсыКон.МУ;
				
			КонецЕсли; 
			
			Если КурсУпрНач = Неопределено Тогда
				
				КурсУпрНач = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаУпр, СтрокаТаблицы.ПартияПоступленияДата);
				
			КонецЕсли; 
			Если КурсУпрКон = Неопределено Тогда
				
				КурсУпрКон = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаУпр, СтрокаТаблицы.ПартияМатериаловДата);
				
			КонецЕсли; 
			Если КурсМУНач = Неопределено Тогда
				
				КурсМУНач  = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаМУ, СтрокаТаблицы.ПартияПоступленияДата);
				
			КонецЕсли; 
			Если КурсМУКон = Неопределено Тогда
				
				КурсМУКон  = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаМУ, СтрокаТаблицы.ПартияМатериаловДата);
				
			КонецЕсли; 
			
			// Расчет сумм корректировок
			 СуммаКорУпр = СуммаКорректировкиСпецодежды(СтрокаТаблицы.СуммаОборот, КурсУпрНач, КурсУпрКон);
			 СуммаКорМУ  = СуммаКорректировкиСпецодежды(СтрокаТаблицы.СуммаОборот, КурсМУНач, КурсМУКон);
			 
			 Если СуммаКорУпр <> 0 ИЛИ СуммаКорМУ <> 0 Тогда
				 
				 Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.МУ_СчетДт) 
					  ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.МУ_СчетКт) Тогда
					  
					ТекстСообщения =  НСтр("ru = 'Не удалось найти МУ проводки документа ""%1%"". Возможно не записываются соответствия номеров движений при трансляции.'"); 
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.Регистратор);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				 	Продолжить;
				 
				 КонецЕсли; 
				 
				 НоваяСтрока = ТабКор.Добавить();
				 НоваяСтрока.Период      = СтрокаТаблицы.Период;
				 НоваяСтрока.Организация = СтрокаТаблицы.Организация;
				 НоваяСтрока.СчетДт      = СтрокаТаблицы.МУ_СчетДт;
				 НоваяСтрока.СчетКт      = СтрокаТаблицы.МУ_СчетКт;
				 
				 Для н = 1 По СтруктураШапкиДокумента.МаксКолСубконто Цикл
				 
				 	 НоваяСтрока["СубконтоДт"+н] = СтрокаТаблицы["МУ_СубконтоДт"+н];
					 НоваяСтрока["СубконтоКт"+н] = СтрокаТаблицы["МУ_СубконтоКт"+н];
				 
				 КонецЦикла; // По субконто
				 
				 НоваяСтрока.СуммаУпр = ?(СтруктураШапкиДокумента.КорректировкаСуммаУпр, СуммаКорУпр, 0);
				 НоваяСтрока.СуммаМУ  = ?(СтруктураШапкиДокумента.КорректировкаСуммаМУ , СуммаКорМУ , 0);
				 НоваяСтрока.Содержание =  НСтр("ru = 'Корректировка спецодежды/спецоснастки'");
				 
			 КонецЕсли; 
			 
		КонецЕсли; 
		
	КонецЦикла; // ТабПроводки
	
КонецПроцедуры // ПолучитьТаблицуКорректировокСпецодеждыБП()

// ----------------------------------------------------------------------
// Основные процедуры проведения                                

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок)
	
	МаксКолСубконто = Метаданные.ПланыСчетов.бит_Дополнительный_2.МаксКоличествоСубконто;	
	
	Движения.бит_Дополнительный_2.Записывать = Истина;
	ТабКор = СтруктураТаблиц.ТабКор;
	
	Для Каждого СтрокаТаблицы Из ТабКор Цикл
		
		Если СтруктураШапкиДокумента.КорректировкаСуммаМУ И Окр(СтрокаТаблицы.СуммаМУ, 2) <> 0 Тогда
			
			
			Запись = Движения.бит_Дополнительный_2.Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура("Организация,Период,СчетДт,СчетКт,Содержание"
													, СтруктураШапкиДокумента.Организация
													, СтрокаТаблицы.Период
													, СтрокаТаблицы.СчетДт
													, СтрокаТаблицы.СчетКт
													, "Корректировка стоимости МПЗ");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			
			Для н = 1 По МаксКолСубконто Цикл
				
				// Заполним аналитику счета Дт и Кт.
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, н, СтрокаТаблицы["СубконтоДт" + н]);
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, н, СтрокаТаблицы["СубконтоКт" + н]);
				
            КонецЦикла; 
            
            // BF-1719 ДокументыРасчетовСКонтрагентами
            бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Ссылка);
        	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Ссылка);
			
			Запись.СуммаМУ  = СтрокаТаблицы.СуммаМУ;
			Запись.СуммаУпр = 0;
			
			
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.КорректировкаСуммаУпр И Окр(СтрокаТаблицы.СуммаУпр, 2) <> 0 Тогда		
			
			Запись = Движения.бит_Дополнительный_2.Добавить();
			
			// Заполнение атрибутов записи.
			СтруктураПараметров = Новый Структура("Организация,Период,СчетДт,СчетКт,Содержание"
													, СтруктураШапкиДокумента.Организация
													, СтрокаТаблицы.Период
													, СтрокаТаблицы.СчетДт
													, СтрокаТаблицы.СчетКт
													, "Корректировка стоимости МПЗ");
			
			бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
			
			Для н = 1 По МаксКолСубконто Цикл
				
				// Заполним аналитику счета Дт и Кт.
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, н, СтрокаТаблицы["СубконтоДт" + н]);
				бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, н, СтрокаТаблицы["СубконтоКт" + н]);
				
			КонецЦикла; 
            
            // BF-1719 ДокументыРасчетовСКонтрагентами
            бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Ссылка);
        	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Ссылка);
            
			Запись.СуммаМУ  = 0;
			Запись.СуммаУпр = СтрокаТаблицы.СуммаУпр;
		
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура выполняет проверку на уже введенные корректировки. 
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Отказ - Булево.
// 
Процедура ПроверитьДублиДокументов(СтруктураШапкиДокумента, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала"   , НачалоМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация"  , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидОперации"  , СтруктураШапкиДокумента.ВидОперации);
	Запрос.УстановитьПараметр("Ссылка"       , СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПроверятьМУ"  , СтруктураШапкиДокумента.КорректировкаСуммаМУ);
	Запрос.УстановитьПараметр("ПроверятьУпр" , СтруктураШапкиДокумента.КорректировкаСуммаУпр);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаМУ.Ссылка,
	|	""МУ"" КАК ВидКорректировки
	|ИЗ
	|	Документ.бит_му_КорректировкаСтоимостиМПЗ КАК КорректировкаМУ
	|ГДЕ
	|	КорректировкаМУ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КорректировкаМУ.Проведен
	|	И КорректировкаМУ.Организация = &Организация
	|	И КорректировкаМУ.ВидОперации = &ВидОперации
	|	И КорректировкаМУ.КорректировкаСуммаМУ
	|	И &ПроверятьМУ
	|	И КорректировкаМУ.Ссылка <> &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаУпр.Ссылка,
	|	""Упр""
	|ИЗ
	|	Документ.бит_му_КорректировкаСтоимостиМПЗ КАК КорректировкаУпр
	|ГДЕ
	|	КорректировкаУпр.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КорректировкаУпр.Проведен
	|	И КорректировкаУпр.ВидОперации = &ВидОперации
	|	И КорректировкаУпр.Организация = &Организация
	|	И КорректировкаУпр.КорректировкаСуммаУпр
	|	И &ПроверятьУпр
	|	И КорректировкаУпр.Ссылка <> &Ссылка
	|";
				   
	Результат = Запрос.Выполнить(); 
	
	Выборка = Результат.Выбрать();	
	Если Выборка.Следующий() Тогда	
		Отказ = Истина; 	
	КонецЕсли; 

	Если Отказ Тогда	
		ТекстСообщения =  НСтр("ru = 'Корректировка стоимости ПМЗ (МСФО) уже была создана в данном месяце. Рекомендуется воспользоваться существующим документом.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);   	
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьДублиДокументов()

#КонецОбласти

#КонецЕсли
