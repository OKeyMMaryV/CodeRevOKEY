
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	
	УстановитьПараметрыВыбораДляСчетов();
	
	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДоговорКонтрагента, "Объект.Контрагент");
																			

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	мКэшРеквизитовФормы.Вставить("Склад");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Определим список доступных видов договоров.
	ОпределитьСписокДоступныхВидовДоговоров();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ПоступлениеМПЗ";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
// 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменениеКонтрагента();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент);
	
	ИзменениеВалютыКлиент();	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораДоговораКлиент(Элемент, Объект.ДоговорКонтрагента, Объект.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	СформироватьСписокДоступныхВалют();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		
		СтрокиТчПустойСклад = Объект.Товары.НайтиСтроки(Новый Структура("Склад", фКэшЗначений.ПустойСклад));
		 		
		Если СтрокиТчПустойСклад.Количество() > 0 Тогда
			
			Вариант = 1;
			
			ТекстВопроса =  НСтр("ru = 'Заполнить пустые значения склада в табличных частях?'");
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСкладПриИзменении", ЭтотОбъект, Вариант);
			
			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);		
			
		Иначе

			Если ЗначениеЗаполнено(мКэшРеквизитовФормы.Склад) И Объект.Товары.НайтиСтроки(Новый Структура("Склад", мКэшРеквизитовФормы.Склад)).Количество() > 0 Тогда
				ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Нстр("ru = 'Заполнить в табличных частях значение склада ""%1%"" на ""%2%""?'")
							, мКэшРеквизитовФормы.Склад, Объект.Склад);
				Вариант = 2;
				ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСкладПриИзменении", ЭтотОбъект, Вариант);
			
			    ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);

			Иначе
				
				ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Нстр("ru = 'Заменить в табличных частях все значения склада на ""%1%""?'")
							, Объект.Склад);
				Вариант = 3;
				ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСкладПриИзменении", ЭтотОбъект, Вариант);
			
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);

			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		 ДобавитьВКэш("Склад");
	КонецЕсли;
	
КонецПроцедуры // СкладПриИзменении()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  Вариант - Число.
// 
&НаКлиенте
Процедура ВопросСкладПриИзменении(Ответ, Вариант) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Вариант = 1 Тогда
			ИзменениеСкладаШапкиСервер();
			
		ИначеЕсли Вариант = 2 Тогда
			ИзменениеСкладаШапкиСервер(, , мКэшРеквизитовФормы.Склад);
			
		ИначеЕсли Вариант = 3 Тогда
			ИзменениеСкладаШапкиСервер(, Истина);
			
		КонецЕсли;
	КонецЕсли;	
	
	ДобавитьВКэш("Склад");
	
КонецПроцедуры // ВопросСкладПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
	 	Отказ = Истина;
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Склад = Объект.Склад;
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура" 
// табличного поля "Товары".
// 
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор(), Истина);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Количество" 
// табличного поля "Товары".
// 
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Цена" 
// табличного поля "Товары".
// 
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма" 
// табличного поля "Товары".
// 
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьЦенуВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Склад" 
// табличного поля "Товары".
// 
&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ХарактеристикаНоменклатуры" 
// табличного поля "Товары".
// 
&НаКлиенте
Процедура ТоварыХарактеристикаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;	
	НачалоВыбораСерияХарактеристикаНоменклатурыКлиент(Элемент, ТекДанные.ХарактеристикаНоменклатуры, ТекДанные.Номенклатура, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СерияНоменклатуры" 
// табличного поля "Товары".
// 
&НаКлиенте
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;	
	НачалоВыбораСерияХарактеристикаНоменклатурыКлиент(Элемент, ТекДанные.СерияНоменклатуры, ТекДанные.Номенклатура, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПустыеЗначенияПоОсновномуСкладу(Команда)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ИзменениеСкладаШапкиСервер(Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПустыеЗначенияПоОсновномуСкладу()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	// Сформируем список доступных валют.
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
	фКэшЗначений.Вставить("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
	
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТаблицы.ПолучитьИдентификатор());
	
	КонецЦикла; 
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

&НаСервере
Процедура ИзменениеКонтрагента()

	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента
														  ,Объект.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров);
	
	
	// Могли поменять договор.
	ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент);

КонецПроцедуры // ИзменениеКонтрагента()

&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли; 
	
	Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);

	СписокВалют = Новый СписокЗначений;
	
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);	
	
	Объект.ВалютаДокумента = бит_КурсыВалют.ПолучитьВалютуДоговораКонтрагента(Объект.ДоговорКонтрагента);
	
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
	УстановитьСчетаРасчетов();

	
КонецПроцедуры // ИзменениеДоговораСервер()

&НаСервере
Процедура УстановитьСчетаРасчетов()
	
	СтруктураСчетов = бит_му_ОбщегоНазначения.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	// Изменение кода. Начало. 05.02.2014{{
	// Объект.СчетВзаиморасчетов = СтруктураСчетов.СчетКраткосрочныхОбязательств;
	Объект.СчетВзаиморасчетов = СтруктураСчетов.СчетКредиторскойЗадолженностиКраткосрочной;
	// Изменение кода. Начало. 05.02.2014{{
		
КонецПроцедуры

&НаСервере
Процедура ИзменениеСкладаШапкиСервер(ЗаполнятьПустыеСчетаУчета = Ложь, ЗаменятьВсе = Ложь, ЗаменяемыйСклад = Неопределено)
	
	Для каждого СтрТч Из Объект.Товары Цикл
		
		Если ЗаменятьВсе Или (ЗаменяемыйСклад <> Неопределено И СтрТч.Склад = ЗаменяемыйСклад) Тогда
			СтрТч.Склад 	= Объект.Склад;		
		ИначеЕсли Не ЗначениеЗаполнено(СтрТч.Склад) Тогда
			СтрТч.Склад 	= Объект.Склад;		
		КонецЕсли;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрТч.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры // ИзменениеСкладаШапкиСервер()

&НаСервере
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Ид, ЗаполнятьЕдиницуИзмерения = Ложь)

	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(Ид);
	СтруктураПараметров = Новый Структура("Организация, Номенклатура, Склад",
										  Объект.Организация,
										  СтрокаТабличнойЧасти.Номенклатура,
										  ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад), СтрокаТабличнойЧасти.Склад, Объект.Склад));
										  
	СчетаУчета     					= бит_му_МПЗ.ПолучитьСчетаУчетаНоменклатуры(СтруктураПараметров);	
    СтрокаТабличнойЧасти.СчетУчета 	= СчетаУчета.СчетУчета;
	
	Если ЗаполнятьЕдиницуИзмерения Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СчетаУчета.БазоваяЕдиницаИзмерения;
	КонецЕсли;		
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

&НаСервере
Процедура СформироватьСписокДоступныхВалют()
	
	СписокВалют = Новый СписокЗначений;
	
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
		
КонецПроцедуры
              
#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ТоварыСчетУчета);
	МассивЭлементов.Добавить(Элементы.СчетВзаиморасчетов);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", фСписокВидовДоговоров);
		КонецЕсли;
	КонецЕсли;

	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура формирует список доступных видов договоров.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОпределитьСписокДоступныхВидовДоговоров()
	
	
КонецПроцедуры // ОпределитьСписокДоступныхВидовДоговоровПоОперации()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И Не Объект.СуммаДокумента = 0 Тогда
	
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
		
КонецПроцедуры // ИзменениеВалютыКлиент()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		ТабличнаяЧасть = Объект.Товары;
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			СтрокаТаблицы.Цена = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
			
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			
		КонецЦикла;
		
		// Подсчитаем и запишем сумму документа.
		СуммаДокумента = Объект.Товары.Итог("Сумма");

	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
// 
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

// Процедура выполняет действия необходимые при начале выбора Характеристики номенклатуры. Клиент.
// 
&НаКлиенте 
Процедура НачалоВыбораСерияХарактеристикаНоменклатурыКлиент(Элемент, Характеристика, Номенклатура_Владелец, СтандартнаяОбработка)
	
	// Установим отбор для характеристики номенклатуры.
	УстановитьПараметрыВыбораСерииХарактеристикиНоменклатуры(Элемент, Номенклатура_Владелец);
		
КонецПроцедуры // НачалоВыбораДоговораКлиент()

// Процедура устанавливает отборы для характеристики номенклатуры.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораСерииХарактеристикиНоменклатуры(Элемент, Номенклатура_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Номенклатура_Владелец) Тогда
		СтруктураОтбора.Вставить("Владелец", Номенклатура_Владелец);
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
	
КонецПроцедуры // УправлениеЭлементамиФормы()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

#КонецОбласти

#КонецОбласти
