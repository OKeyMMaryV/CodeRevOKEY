#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мУдалятьГраницу;

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
    
	// ++БП
	ТипПТУ = Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
    // --БП
	
	Если ТипЗнч(ДанныеЗаполнения) = ТипПТУ Тогда
		
		ЗаполнитьНаОснованииПоступленияТоваровУслуг(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
// 
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = Товары.Итог("Сумма");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
	мУдалятьГраницу = не ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если мУдалятьГраницу Тогда
		бит_му_МПЗ.УдалитьРегистрациюДокументаВПоследовательностях(ЭтотОбъект, Истина);
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	// бит_VAlekseev добавление кода. Начало: 24.09.2010.
	бит_му_МПЗ.УдалитьРегистрациюДокументаВПоследовательностях(ЭтотОбъект, Истина);
	// бит_VAlekseev добавление кода Конец
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
// 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ФормироватьПроводки Тогда
		
		ПроверяемыеРеквизиты.Добавить("СчетВзаиморасчетов");
		ПроверяемыеРеквизиты.Добавить("Товары.СчетУчета");		
	
	КонецЕсли; 
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  СтруктураТаблиц - Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабЧасть.Номенклатура,
	|	ТабЧасть.ЕдиницаИзмерения,
	|	ТабЧасть.Количество,
	|	ТабЧасть.Цена,
	|	ТабЧасть.Сумма,
	|	ТабЧасть.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТабЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА ТабЧасть.Ссылка.Склад
	|		ИНАЧЕ ТабЧасть.Склад
	|	КОНЕЦ КАК Склад,
	|	ТабЧасть.ХарактеристикаНоменклатуры,
	|	ТабЧасть.СерияНоменклатуры
	|ИЗ
	|	Документ.бит_му_ПоступлениеМПЗ.Товары КАК ТабЧасть
	|ГДЕ
	|	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоТовары = РезультатЗапроса.Выгрузить();
	
	ТаблицаПоТовары.Колонки.Добавить("Качество", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Товары", ТаблицаПоТовары);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Процедура заполняет новый документ.
// 
// Параметры:
//  Основание - ДокументСсылка.ПоступлениеТоваровУслуг.
// 
Процедура ЗаполнитьНаОснованииПоступленияТоваровУслуг(Основание)

	ДокументОснование = Основание;	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	СкопироватьТовары(Основание);
	
КонецПроцедуры // ЗаполнитьНаОснованииПоступленияТоваровУслуг()

// Процедура выполняет копирование табличной части "Товары" из документа основания.
// 
Процедура СкопироватьТовары(ДокументОснование)
    
    Если Метаданные.Документы.Найти("ПоступлениеТоваровУслуг") = Неопределено Тогда
        Возврат;
    КонецЕсли;
    	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаДокументОснование", ДокументОснование);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокументОснование.Ссылка.ВалютаДокумента = ДокументОснование.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ДокументОснование.Ссылка.КурсВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДокументОснование.Ссылка.ВалютаДокумента = ДокументОснование.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ДокументОснование.Ссылка.КратностьВзаиморасчетов
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КратностьДокумента,
	|	ДокументОснование.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ДокументОснование.ЕдиницаИзмерения,
	|	ДокументОснование.Количество,
	|	ДокументОснование.Номенклатура,
	|	ДокументОснование.Сумма, 
	|	ДокументОснование.СчетУчета 
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокументОснование
	|ГДЕ
	|	ДокументОснование.Ссылка = &СсылкаДокументОснование
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
 	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		СтрокаТабличнойЧасти.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
																	  Выборка.ВалютаДокумента, ВалютаДокумента,
																	  Выборка.КурсДокумента, КурсДокумента,
																	  Выборка.КратностьДокумента, КратностьДокумента);
		
		бит_ОбщегоНазначенияКлиентСервер.РассчитатьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);

		СтруктураПараметров = Новый Структура("Организация, Номенклатура, Склад",
											  Организация,
											  СтрокаТабличнойЧасти.Номенклатура,
											  ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад), СтрокаТабличнойЧасти.Склад, Склад));
											  
		СтруктураСчетов	= бит_МеханизмТрансляции.КонструкторПараметровПодбораСчетов();
		
		СтруктураСчетов.Счет          = Выборка.СчетУчета;
		СтруктураСчетов.Субконто1     = Выборка.Номенклатура;
		СтруктураСчетов.ТекущийОбъект = Ссылка;
		СтруктураСчетовМСФО = бит_МеханизмТрансляции.ВыполнитьПодборСчетов(СтруктураСчетов ,Организация, ДокументОснование.Дата);									  
		СтрокаТабличнойЧасти.СчетУчета = СтруктураСчетовМСФО.Счет;
		
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.Товары;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Формируем проводку по поступлению товаров, если необходимо
		// ДТ СчетУчета КТ СчетВзаиморасчетов Сумма.
		Если СтруктураШапкиДокумента.ФормироватьПроводки Тогда
			СформироватьЗаписьПоПоступлениюТоваров(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьДвиженияПоПартиям(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение ДТ СчетУчета КТ СчетВзаиморасчетов Сумма.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьЗаписьПоПоступлениюТоваров(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтруктураШапкиДокумента.ВалютаДокумента
										 ,СтрокаТаблицы.СчетУчета
										 ,СтруктураШапкиДокумента.СчетВзаиморасчетов
										 ,СтрокаТаблицы.Сумма
										 ,"Оприходованы МПЗ");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.СчетДт);
    
	Если СвСч.Количественный Тогда
		Запись.КоличествоДт = СтрокаТаблицы.Количество;
	КонецЕсли;
	
	// Заполним аналитику счета Дт и Кт.
	АналитикаСклад = ?(ЗначениеЗаполнено(СтрокаТаблицы.Склад), СтрокаТаблицы.Склад, СтруктураШапкиДокумента.Склад);
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Склады"			              , АналитикаСклад);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Номенклатура"		              , СтрокаТаблицы.Номенклатура);
    бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДокументыРасчетовСКонтрагентами", Ссылка);
	// Адаптация для ERP. Начало. 18.03.2014{{
	Если бит_РаботаСМетаданными.ЕстьСправочник("НоменклатурныеГруппы") Тогда
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.Номенклатура.НоменклатурнаяГруппа);
	Иначе
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.Номенклатура.ГруппаФинансовогоУчета);
	КонецЕсли; 
	// Адаптация для ERP. Конец. 18.03.2014}}
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтруктураШапкиДокумента.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтруктураШапкиДокумента.ДоговорКонтрагента);
    	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);

	
КонецПроцедуры // СформироватьЗаписьПоПоступлениюТоваров()

// Процедура формирует движения по регистру "бит_му_ПартииМПЗ".
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьДвиженияПоПартиям(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ = Ложь)
	
	ТаблицаДанных = СтруктураТаблиц.Товары;
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		бит_му_МПЗ.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация);
	КонецЕсли;
	
	// бит_VAlekseev добавление кода. Начало: 06.09.2010.
	бит_му_МПЗ.ВыполнитьПриходПоРегистрамПартий(СтруктураШапкиДокумента, Отказ, ТаблицаДанных, СтруктураКурсыВалют);
	// бит_VAlekseev добавление кода Конец
	
КонецПроцедуры // СформироватьДвиженияПоПартиям()

#КонецОбласти

#КонецЕсли
