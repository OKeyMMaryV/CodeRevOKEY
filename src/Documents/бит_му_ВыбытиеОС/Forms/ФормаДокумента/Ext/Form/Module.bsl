
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Начало_бит_Магомедов_27.07.2012 
	// +СБ. Кузнецова С. 2014-11-12 
	//Отбор = Новый Структура("Группа, ИмяНастройки","Счет выбытия ОС МСФО", "Счет выбытия ОС МСФО");
	Отбор = Новый Структура("Группа, ИмяНастройки, СБ_ПорядковыйНомерЗначения","Счет выбытия ОС МСФО", "Счет выбытия ОС МСФО", 0);
	// -СБ. Кузнецова С.
	СтруктураРесурсов = РегистрыСведений.бит_му_Настройки.Получить(Отбор);
	Если СтруктураРесурсов.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтруктураРесурсов.Значение) Тогда 
		ВызватьИсключение "Не установлено значение настройки <Счет выбытия ОС МСФО> в регистре <Настройки МСФО>";
	КонецЕсли;
	бит_му_СчетВыбытия = СтруктураРесурсов.Значение;
	//Конец_бит_Магомедов_27.07.2012
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Максимальное количество субконто на счете по МУ.
	фКоличествоСубконтоМУ = Метаданные.ПланыСчетов.бит_Дополнительный_2.МаксКоличествоСубконто;
	
	ЗаполнитьКэшЗначений();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Дата");
	фКэшРеквизитов.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();

	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"СчетВзаиморасчетов","СубконтоВзаиморасчетов",фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы,"СчетНДС","СубконтоНДС",фКоличествоСубконтоМУ);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетВзаиморасчетов,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоВзаиморасчетов");
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетНДС,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоНДС");
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетДт"
												   ,"СубконтоДт"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетКт"
												   ,"СубконтоКт"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетНДС"
												   ,"СубконтоНДС"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");											   
												   
	ВосстановитьКоличествоДоступныхСубконто();
	
	НастроитьОформлениеФормы();
	
	СформироватьДеревоВидовОпераций();
	СформироватьПодменюВидовОпераций();
	
	Если Параметры.Ключ.Пустая() Тогда
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО();
		УстановитьСостояниеДокумента();
	Иначе
		// Заполним валюту МСФО.
		ЗаполнитьВалютуМСФО(Ложь);
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	ЗаполнитьИнвентарныеНомера();
	
	УстановитьПараметрыВыбораДляСчетов();
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	Для Каждого текСтрока Из Объект.ОсновныеСредства Цикл
		Если НЕ ЗначениеЗаполнено(текСтрока.бит_му_СчетВыбытия) Тогда 
			текСтрока.бит_му_СчетВыбытия = бит_му_СчетВыбытия;
		КонецЕсли;
		Если Объект.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи и НЕ ЗначениеЗаполнено(текСтрока.СчетДт) Тогда 
			текСтрока.СчетДт = бит_му_СчетВыбытия;
			ИзменениеСчетаДт(текСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	// ++ Боровинская (СофтЛаб) 15.05.19 (#3128)
	ок_Функция = Элементы.Вставить("ок_Функция", Тип("ПолеФормы"), Элементы.ГруппаШапкаПраво,Элементы.ГруппаВалютаМСФО);
  	ок_Функция.ПутьКДанным = "Объект.ок_Функция";
  	ок_Функция.Вид         = ВидПоляФормы.ПолеВвода;
  	ок_Функция.Заголовок   =  НСтр("ru = 'Функция'");
	// -- Боровинская (СофтЛаб) 15.05.19 (#3128)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Действие") Тогда
			
			Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
				
				Если Объект.ОсновныеСредства.Количество() > 0 Тогда
					
					Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
					ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					
				Иначе
					
					 ОбработатьПодборНМА(ВыбранноеЗначение);
					
				КонецЕсли;
				
			Иначе
				
				ОбработатьПодборНМА(ВыбранноеЗначение);
				
			КонецЕсли; 
			
		КонецЕсли; // В структуре есть поле действие
		
	КонецЕсли; // Это структура
	
КонецПроцедуры

// Процедура - завершение выбора ОС 
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбработатьПодборНМА(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьКоличествоДоступныхСубконто();
	
	ЗаполнитьИнвентарныеНомера();
	
	ЗаполнитьМоделиУчетаОС();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ВыбытиеОС";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация, ,Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	фКэшРеквизитов.Дата = Объект.Дата;
	
	ДатаПриИзмененииСервер();
	
	//ОК Калинин М. 290413
	ОбновитьДаты();
	//ОК Калинин М.	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не фКэшРеквизитов.Организация = Объект.Организация
		И Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ОрганизацияПриИзмененииСервер();
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Объект.Организация = фКэшРеквизитов.Организация;
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетВзаиморасчетовПриИзменении(Элемент)
	
	ПриИзмененииСчетаВзаиморасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоВзаиморасчетовПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект,"СубконтоВзаиморасчетов",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Объект,"СубконтоВзаиморасчетов",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоВзаиморасчетовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоВзаиморасчетов"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры // СубконтоВзаиморасчетовАвтоПодбор()
												 
&НаКлиенте
Процедура СчетНДСПриИзменении(Элемент)
	
	ПриИзмененииСчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДСПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконто(Объект,"СубконтоНДС",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Объект,"СубконтоНДС",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоНДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
    ЗначениеСубконто = Объект[Элемент.Имя];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоНДС"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры // СубконтоНДСАвтоПодбор()

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеСредства

&НаКлиенте
Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено 
		Или Не ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОС(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСчетДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаДт(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"СубконтоДт",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"СубконтоДт",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоДтАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоДт"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваСубконтоДтАвтоПодбор()

&НаКлиенте
Процедура ОсновныеСредстваСчетКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаКт(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"СубконтоКт",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"СубконтоКт",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоКтАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоКт"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваСубконтоКтАвтоПодбор()
												 
&НаКлиенте
Процедура ОсновныеСредстваСчетНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаНДСВТабЧасти(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущиеДанные,"СубконтоНДС",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеСубконто = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные,"ОсновныеСредства",Элемент.Имя);		
	ИзменениеСубконто(ТекущиеДанные,"СубконтоНДС",ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСубконтоНДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ОсновныеСредства", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоНДС"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
													 
КонецПроцедуры // ОсновныеСредстваСубконтоНДСАвтоПодбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте 
Процедура КомандаУстановитьОперацию(Команда)

	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
    
    // Запомним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации;
	ПредыдущийВидДвижения = Объект.ВидДвижения;
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, "_");
	ИмяПодменю      = Лев(ИмяКнопки  , Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки , Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.ВидыОпераций[ИмяВидаОперации];
	Объект.ВидДвижения = фКэшЗначений.Перечисления.бит_му_ВидыДвиженияВыбытия[ИмяПодменю];
	
	Если ПредыдущийВидОперации = Объект.ВидОперации
		И ПредыдущийВидДвижения = Объект.ВидДвижения Тогда
		Возврат;
	КонецЕсли;
		
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПредыдущийВидОперации", ПредыдущийВидОперации);
		ДополнительныеПараметры.Вставить("ПредыдущийВидДвижения", ПредыдущийВидДвижения);
		
		Оповещение = Новый ОписаниеОповещения("КомандаУстановитьОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Табличная часть ""Основные средства"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	Иначе
		
		ЭтоНеПеревод = (Не Объект.ВидДвижения = фКэшЗначений.Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи);
		
		Если ЭтоНеПеревод Тогда
			// Заполним счет нераспределенной прибыли из учетной политики.
			Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
		КонецЕсли;
				
		УправлениеЭлементамиФормы();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - завершение обработки команды "УстановитьОперацию".
// 
&НаКлиенте
Процедура КомандаУстановитьОперациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОсновныеСредства.Очистить();
	Иначе
		Объект.ВидОперации = ДополнительныеПараметры["ПредыдущийВидОперации"];
		Объект.ВидДвижения = ДополнительныеПараметры["ПредыдущийВидДвижения"];
		Возврат;
	КонецЕсли;
	
	ЭтоНеПеревод = (Не Объект.ВидДвижения = фКэшЗначений.Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи);
	
	Если ЭтоНеПеревод Тогда
		// Заполним счет нераспределенной прибыли из учетной политики.
		Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	ПараметрыФормы = ЗаполнитьПараметрыПодбора();
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетДт);
	МассивЭлементов.Добавить(Элементы.ОсновныеСредстваСчетКт);
	МассивЭлементов.Добавить(Элементы.СчетНРП);
	МассивЭлементов.Добавить(Элементы.СчетВзаиморасчетов);
	МассивЭлементов.Добавить(Элементы.СчетНДС);
	МассивЭлементов.Добавить(Элементы.СчетВзаиморасчетов);

	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	фКэшЗначений.Вставить("ВидыОпераций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийВыбытиеОС));
	                                               
	КэшПеречисления = Новый Структура;	
	КэшПеречисления.Вставить("бит_му_ВидыОперацийВыбытиеОС", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийВыбытиеОС));
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА"	   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));
	КэшПеречисления.Вставить("бит_му_МоделиУчетаВНА"	   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МоделиУчетаВНА));
	КэшПеречисления.Вставить("бит_му_ВидыДвиженияВыбытия"  , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыДвиженияВыбытия));
	КэшПеречисления.Вставить("бит_му_ВидыКлассовОС"		   , бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыКлассовОС));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	фКэшЗначений.Вставить("ПустойСчет", ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	      	
КонецПроцедуры // ЗаполнитьКэшЗначений

&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()

	ВидыДвижений = Перечисления.бит_му_ВидыДвиженияВыбытия;
	
	ЭтоПеревод = (Объект.ВидДвижения = ВидыДвижений.ПереводВПредназначенныеДляПродажи);
	ЭтоПродажа = (Объект.ВидДвижения = ВидыДвижений.Продажа);
	ЭтоВыбытие = (Объект.ВидДвижения = ВидыДвижений.Выбытие);
								  								   
	Элементы.ОсновныеСредстваСуммаПродажи.Видимость = ЭтоПродажа;							   
	Элементы.ОсновныеСредстваСуммаНДС.Видимость 	= ЭтоПродажа;
	
	ОтобразитьСчетДт = Не ЭтоВыбытие;
		
	Элементы.ОсновныеСредстваГруппаДт.Заголовок = ?(ЭтоПеревод
								   ,НСтр("ru='Счет учета ВНА, предназначенных для продажи'")
								   ,НСтр("ru='Счет прочих доходов'"));
								   
	Элементы.ОсновныеСредстваГруппаКт.Заголовок = ?(ЭтоПеревод
								   ,НСтр("ru='Счет резерва переоценки ВНА для продажи'")
								   ,НСтр("ru='Счет прочих расходов'"));

	Элементы.ОсновныеСредстваГруппаДт.Видимость  = ОтобразитьСчетДт;
	Элементы.ОсновныеСредстваГруппаНДС.Видимость = ЭтоПродажа;
	
	// Управление заголовками и видимостью элементов форм.
	Элементы.ГруппаСчетНераспределеннойПрибыли.Видимость = НЕ ЭтоПеревод;
	Элементы.ГруппаСчета.Видимость = ЭтоПродажа;
	
	Элементы.ВалютаДокумента.Видимость = ЭтоПродажа;
	Элементы.КурсДокумента.Видимость = ЭтоПродажа;
	
	//Начало_бит_Магомедов_31.07.2012 
	Элементы.ОсновныеСредствабит_му_СчетВыбытия.Видимость = ЭтоВыбытие;
	
	ОтобразитьСчетКт = НЕ ЭтоПеревод;
	
	Элементы.ОсновныеСредстваСчетКт.Видимость 		= ОтобразитьСчетКт;
	Элементы.ОсновныеСредстваСубконтоКт1.Видимость = ОтобразитьСчетКт;
	Элементы.ОсновныеСредстваСубконтоКт2.Видимость = ОтобразитьСчетКт;
	Элементы.ОсновныеСредстваСубконтоКт3.Видимость = ОтобразитьСчетКт;
	Элементы.ОсновныеСредстваСубконтоКт4.Видимость = ОтобразитьСчетКт;
	//Конец_бит_Магомедов_31.07.2012 
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура СформироватьДеревоВидовОпераций()

	ЭлементыДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	Для каждого ВидДвиженияВыбытия Из Перечисления.бит_му_ВидыДвиженияВыбытия Цикл
		
		//Начало_бит_Магомедов_31.07.2012 
		Если ВидДвиженияВыбытия = Перечисления.бит_му_ВидыДвиженияВыбытия.Продажа Тогда 
			Продолжить;
		КонецЕсли;
		//Конец_бит_Магомедов_31.07.2012 
		
		СтрокаДерева = ЭлементыДерева.Добавить();
		СтрокаДерева.ВидОперации = ВидДвиженияВыбытия;	
		
		СтрокаПодч = СтрокаДерева.ПолучитьЭлементы();
		
		Для каждого ТекЗначение Из Перечисления.бит_му_ВидыОперацийВыбытиеОС Цикл
			
			//Начало_бит_Магомедов_31.07.2012 
			Если ТекЗначение = Перечисления.бит_му_ВидыОперацийВыбытиеОС.бит_му_АктивыПредназначенныеДляПродажи Тогда 
				Продолжить;
			КонецЕсли;
			//Конец_бит_Магомедов_31.07.2012 
			
			СтрокаНовая = СтрокаПодч.Добавить();
			СтрокаНовая.ВидОперации = ТекЗначение;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

&НаСервере
Процедура СформироватьПодменюВидовОпераций()
	
	Для Каждого ВидДвиженияВыбытия Из Перечисления.бит_му_ВидыДвиженияВыбытия Цикл
		
		//Начало_бит_Магомедов_31.07.2012 
		Если ВидДвиженияВыбытия = Перечисления.бит_му_ВидыДвиженияВыбытия.Продажа Тогда 
			Продолжить;
		КонецЕсли;
		//Конец_бит_Магомедов_31.07.2012 		
		
		ИмяПодменю = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_му_ВидыДвиженияВыбытия,ВидДвиженияВыбытия);
		ГруппаПодменю = Элементы.Добавить(ИмяПодменю, Тип("ГруппаФормы"), Элементы.ПодменюВидаОперации);
		ГруппаПодменю.Вид = ВидГруппыФормы.Подменю;
		ГруппаПодменю.Заголовок = Строка(ВидДвиженияВыбытия);
		
		// Заполняем виды операций для группы подменю.
		Для Каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
			
			ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
			ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийВыбытиеОС[ИмяЗначенияПеречисления];
			
			//Начало_бит_Магомедов_31.07.2012 
			Если ЗначениеПеречисления = Перечисления.бит_му_ВидыОперацийВыбытиеОС.бит_му_АктивыПредназначенныеДляПродажи Тогда 
				Продолжить;
			КонецЕсли;
			//Конец_бит_Магомедов_31.07.2012 
			
			ИмяКнопки = ИмяПодменю + "_" + ИмяЗначенияПеречисления;
			
			ИмяКоманды = "Команда_" + ИмяКнопки;
			
			// Добавляем новую команду обработки выбора вида операции.
			КомандаУстановитьОперацию = Команды.Добавить(ИмяКоманды);
			КомандаУстановитьОперацию.Действие = "КомандаУстановитьОперацию";
			
			КнопкаГруппыПодменю = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаПодменю);
			КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
			КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
			КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
			
		КонецЦикла; 
		
	КонецЦикла;

КонецПроцедуры // СформироватьПодменюВидовОпераций()

&НаСервере
Процедура НастроитьОформлениеФормы()
	
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"ОсновныеСредства"
	                                                           ,"СубконтоДт"
															   ,"КоличествоДоступныхСубконтоДт"
															   ,фКоличествоСубконтоМУ);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"ОсновныеСредства"
	                                                           ,"СубконтоКт"
															   ,"КоличествоДоступныхСубконтоКт"
															   ,фКоличествоСубконтоМУ);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"ОсновныеСредства"
	                                                           ,"СубконтоНДС"
															   ,"КоличествоДоступныхСубконтоНДС"
															   ,фКоличествоСубконтоМУ);		
															   
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
														   
КонецПроцедуры

&НаСервере
Функция ПолучитьМодельУчетаОС(ОС)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	СоответствиеОС_МодельУчета = Новый Соответствие;
	
	МодельУчета = ДокОбъект.СоответствиеОСПоМоделиУчета(СоответствиеОС_МодельУчета, ОС);
	
	Возврат МодельУчета;
	
КонецФункции

&НаСервере
Процедура ПроверитьОСПриВыборе(ОсновноеСредство, Отказ)
	
	Документы.бит_му_ВыбытиеОС.ПроверитьОСПриВыборе(ОсновноеСредство, РеквизитФормыВЗначение("Объект"), Отказ);
	
КонецПроцедуры // ПроверитьОСПриВыборе()

&НаСервере
Процедура СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, ИмяСубконто)
	
	Если ТекущаяСтрока = Неопределено Тогда
		 Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ТекущаяСтрока.ОсновноеСредство) Тогда
		
		// Адаптация для ERP. Начало. 18.03.2014{{
		ТипОС = Тип(бит_ОбщегоНазначения.ПолучитьИмяТипаОсновныеСредства());
		// Адаптация для ERP. Конец. 18.03.2014}}
		
		//Начало_бит_Магомедов_31.07.2012 
		ТипОбъект = Тип("СправочникСсылка.ОбъектыСтроительства");
		//Конец_бит_Магомедов_31.07.2012
		
		// ++ Боровинская (СофтЛаб) 15.05.19 (#3128)
		ЗаполнятьФунцию = ЗначениеЗаполнено(Объект.ок_Функция);
		ТипФункция = ТипЗнч(Объект.ок_Функция);
		// -- Боровинская (СофтЛаб) 15.05.19 (#3128)

		Для Ном = 1 По фКоличествоСубконтоМУ Цикл
			
			ТекИмяСубконто = ИмяСубконто + Ном;
			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОС Тогда
				ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.ОсновноеСредство;
			КонецЕсли; 
			
			//Начало_бит_Магомедов_31.07.2012 
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипОбъект Тогда
				ТекущаяСтрока[ТекИмяСубконто] = ТекущаяСтрока.ОсновноеСредство.Объект;
			КонецЕсли; 
			//Конец_бит_Магомедов_31.07.2012
			
			// ++ Боровинская (СофтЛаб) 15.05.19 (#3128)
			Если ЗаполнятьФунцию И ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипФункция Тогда
				ТекущаяСтрока[ТекИмяСубконто] = Объект.ок_Функция;
			КонецЕсли;
			// -- Боровинская (СофтЛаб) 15.05.19 (#3128)
		
		КонецЦикла;
	
	КонецЕсли;
	
	//ОК Калинин М. 290413
	мКоличествоСубконтоМУ = 4;
	Если ЗначениеЗаполнено(Объект.Период) Тогда         				
		ТипИсточника = Тип("СправочникСсылка.рс_МесяцыНачисления");
		Для Ном = 1 По мКоличествоСубконтоМУ Цикл			
			ТекИмяСубконто = ИмяСубконто + Ном;			
			Если ТипЗнч(ТекущаяСтрока[ТекИмяСубконто]) = ТипИсточника Тогда
				ТекущаяСтрока[ТекИмяСубконто] = Объект.Период;
			КонецЕсли;					
		КонецЦикла;   	
	КонецЕсли;
	//ОК Калинин М.	
	
КонецПроцедуры // СинхронизироватьРеквизитыСтрокиОС()

&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()
	
	// Восстанавливаем настройки субконто в зависимости от счетов учета.
	Для Каждого СтрокаТаблицы Из Объект.ОсновныеСредства Цикл
        
        СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетДт);
        СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетКт);
        СвСчНДС = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетНДС);
        
		СтрокаТаблицы.КоличествоДоступныхСубконтоДт  = СвСчДт.КоличествоСубконто;
		СтрокаТаблицы.КоличествоДоступныхСубконтоКт  = СвСчКт.КоличествоСубконто;
        СтрокаТаблицы.КоличествоДоступныхСубконтоНДС = СвСчНДС.КоличествоСубконто;;
		
	КонецЦикла;											   
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютуМСФО(ЗаполнитьВалютуДокумента=Истина)
	
	// Получим валюту международного учета.
	ВалютаМСФО 	 = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	СтрокаВалютаМежУчета = Строка(ВалютаМСФО);
	
	Элементы.ДекорацияВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМежУчета), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМежУчета);
	
	Если ЗаполнитьВалютуДокумента Тогда
		Объект.ВалютаДокумента = ВалютаМСФО;
		УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

&НаСервереБезКонтекста
Процедура УстановитьКурсКратностьДокумента(Валюта, Дата, Курс, Кратность)
    
    СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Валюта, Дата);
    
    Курс      = СтрКурса.Курс;
    Кратность = СтрКурса.Кратность;
    
КонецПроцедуры // ИзменениеВалюты()

&НаСервере
Процедура ЗаполнитьИнвентарныеНомера(ИДСтроки=Неопределено)
	
	СоответствиеОС_ИнвентарныйНомер = Новый Соответствие;
	
	Если ИДСтроки = Неопределено Тогда
		
		бит_му_ВНА.ЗаполнитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
															,Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство")
															,Объект.Организация);
													   
		Для Каждого ТекСтрока Из Объект.ОсновныеСредства Цикл
			ТекСтрока.ИнвентарныйНомер = СоответствиеОС_ИнвентарныйНомер[ТекСтрока.ОсновноеСредство];
		КонецЦикла;
		
	Иначе
		ДанныеСтроки = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
		
		Если НЕ ДанныеСтроки = Неопределено Тогда
			ДанныеСтроки.ИнвентарныйНомер = бит_му_ВНА.ПолучитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
																					,ДанныеСтроки.ОсновноеСредство
																					,Объект.Организация);
		КонецЕсли;
																				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМоделиУчетаОС()
	
	МассивОС = Объект.ОсновныеСредства.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	СоответствиеОС_МодельУчета = Новый Соответствие;
	
	// Заполнить соответствие объектов ОС и их моделей учета.
	ДокОбъект.ЗаполнитьСоответствиеОС_МодельУчета(СоответствиеОС_МодельУчета,МассивОС);
	
	Для Каждого ТекСтрока Из Объект.ОсновныеСредства Цикл
		
		ТекСтрока.МодельУчета = СоответствиеОС_МодельУчета[ТекСтрока.ОсновноеСредство];
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборНМА(ВыбранноеЗначение)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	// *Обновление*, Братухин М.В., 2017.04.03 (
	// Возвращение к логике работы предыдущих релизов (заполнение выполняется в форме)
	//ДокументОбъект.ОбработатьПодборНМА(ВыбранноеЗначение);
	//ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	// Дальнейший код взят из процедуры "ОбработатьПодборНМА" модуля объекта (внесены минимальные изменения для совместимости с работой из формы)
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов,ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ВНА);
		
		МассивСтрок = Объект.ОсновныеСредства.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			Отказ = Ложь;
			
			// Проверим ОС.
			Документы.бит_му_ВыбытиеОС.ПроверитьОСПриВыборе(СтрокаТаблицы.ВНА, ДокументОбъект, Отказ);
			
			Если Не Отказ Тогда
				
				НоваяСтрока = Объект.ОсновныеСредства.Добавить();
				НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ВНА;
				НоваяСтрока.СуммаПродажи 	 = СтрокаТаблицы.Сумма;
				НоваяСтрока.СуммаНДС 		 = СтрокаТаблицы.СуммаНДС;
				
				// Выполним подбор счетов.
				Документы.бит_му_ВыбытиеОС.ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы, ДокументОбъект);
				
				//Начало_бит_Магомедов_27.07.2012 
				//заполним счета расходов и выбытия
				бит_му_ЗаполнитьСчетРасходов(СтрокаТаблицы, НоваяСтрока);
				НоваяСтрока.бит_му_СчетВыбытия = бит_му_СчетВыбытия;
				//Конец_бит_Магомедов_27.07.2012

			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Основное средство ""%1%"" инв. № %2% уже подобрано в строке №%3%!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																				,СтрокаТаблицы.ВНА
																				,СтрокаТаблицы.ИнвентарныйНомер
																				,НайденнаяСтрока.НомерСтроки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных
	// *Обновление*, Братухин М.В., 2017.04.03 )	
	
	// Заполним добавленные колонки таблиц
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетВзаиморасчетов,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоВзаиморасчетов");
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетНДС,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоНДС");
	
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетДт"
												   ,"СубконтоДт"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетКт"
												   ,"СубконтоКт"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");
												   
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетНДС"
												   ,"СубконтоНДС"
												   ,фКоличествоСубконтоМУ
												   ,"ОсновныеСредства"
												   ,"Элементы.ОсновныеСредства.ТекущиеДанные");											   
												   
	ВосстановитьКоличествоДоступныхСубконто();
 	//
	ЗаполнитьИнвентарныеНомера();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	// Заполним счет нераспределенной прибыли из учетной политики.
	Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	
	УстановитьКурсКратностьДокумента(Объект.ВалютаДокумента, Объект.Дата, Объект.КурсДокумента, Объект.КратностьДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	МассивПодразделений = Новый Массив;
	МассивПодразделений.Добавить("Подразделение");
	
	Для Ном = 1 По фКоличествоСубконтоМУ Цикл
		МассивПодразделений.Добавить("СубконтоВзаиморасчетов" + Ном);
		МассивПодразделений.Добавить("СубконтоНДС" 			  + Ном);
	КонецЦикла;
	
	Для Каждого ТекИмяРеквизита Из МассивПодразделений Цикл
		
		// Проверим принадлежность подразделения к выбранной организации.
		бит_ОбщегоНазначения.ПроверитьПринадлежностьАналитики(Объект
		                                                     ,
															 ,ТекИмяРеквизита
															 ,"Владелец"
															 ,"Организация"
															 ,"СправочникСсылка.ПодразделенияОрганизаций"
															 ,НСтр("ru = 'В документе'")
															 ,НСтр("ru = 'Изменение значения реквизита Организация'"));
	КонецЦикла;
	
	фКэшРеквизитов.Организация = Объект.Организация;
	
	ЭтоНеПеревод = (Не Объект.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи);
	
	Если ЭтоНеПеревод Тогда
		// Заполним счет нераспределенной прибыли из учетной политики.
		Объект.СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Объект.Организация, Объект.Дата);
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаВзаиморасчетов()
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетВзаиморасчетов,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект,НастройкиСубконто,"СубконтоВзаиморасчетов");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоВзаиморасчетов");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСчетаНДС()
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетНДС,фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект,НастройкиСубконто,"СубконтоНДС");
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы,НастройкиСубконто,"СубконтоНДС");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОС(ИДСтроки)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Проверим ОС.
	ПроверитьОСПриВыборе(ТекущаяСтрока.ОсновноеСредство, Отказ);
	
	Если Отказ Тогда
		// Адаптация для ERP. Начало. 18.03.2014{{
		ТекущаяСтрока.ОсновноеСредство = Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаОсновныеСредства()].ПустаяСсылка();
		// Адаптация для ERP. Конец. 18.03.2014}}
	КонецЕсли;
	
	//Начало_бит_Магомедов_03.08.2012
	Если Не Отказ Тогда
		ДокументСписанияБУ = бит_му_ПолучитьДокументСписанияБУПоДаннымПодбора(ТекущаяСтрока.ОсновноеСредство);
		СтрокаИсточник = Новый Структура("ДокументБУ", ДокументСписанияБУ);
		// ++ БоровинскаяОА (СофтЛаб) 15.12.18 Начало (#3128)
		СтрокаИсточник.Вставить("ВНА",ТекущаяСтрока.ОсновноеСредство);
		// -- БоровинскаяОА (СофтЛаб) 15.12.18 Конец (#3128)
		бит_му_ЗаполнитьСчетРасходов(СтрокаИсточник, ТекущаяСтрока);
	КонецЕсли;
	//Конец_бит_Магомедов_03.08.2012	
	
	// Синхронизируем реквизиты строки ОС.
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоДт");
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоКт");
	
	ТекущаяСтрока.МодельУчета = ПолучитьМодельУчетаОС(ТекущаяСтрока.ОсновноеСредство);
	
	Если Объект.ВидДвижения = фКэшЗначений.Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи
		И НЕ ТекущаяСтрока.МодельУчета = фКэшЗначений.Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости Тогда
		
		ТекущаяСтрока.СчетКт = Неопределено;
		
		Для Ном = 1 По фКоличествоСубконтоМУ Цикл
			ТекущаяСтрока["СубконтоКт"+Ном] = Неопределено;
		КонецЦикла;
		
		ИзменениеСчетаКт(ИДСтроки);
		
	КонецЕсли;
	
	ЗаполнитьИнвентарныеНомера(ИДСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСчетаДт(Идентификатор)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетДт,фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока,НастройкиСубконто,"СубконтоДт");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетДт);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоДт = СвСч.КоличествоСубконто;
	
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоДт");
	
КонецПроцедуры // ИзменениеСчетаУчетаНМА()

&НаСервере
Процедура ИзменениеСчетаКт(Идентификатор)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетКт,фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока,НастройкиСубконто,"СубконтоКт");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетКт);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоКт = СвСч.КоличествоСубконто;
	
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоКт");
	
КонецПроцедуры // ИзменениеСчетаКт()

&НаСервере
Процедура ИзменениеСчетаНДСВТабЧасти(Идентификатор)
	
	ТекущаяСтрока = Объект.ОсновныеСредства.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетНДС,фКоличествоСубконтоМУ);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока,НастройкиСубконто,"СубконтоНДС");

    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетНДС);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоНДС = СвСч.КоличествоСубконто;
	
	// Синхронизируем реквизиты строки НМА.
	СинхронизироватьРеквизитыСтрокиОС(ТекущаяСтрока, "СубконтоНДС");
	
КонецПроцедуры // ИзменениеСчетаНДСВТабЧасти()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ОсновныеСредства;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ТаблицаОбъекта.Количество()>0 
		И ЗначениеЗаполнено(мКэшРеквизитовФормы.ВалютаДокумента)
		И ЗначениеЗаполнено(Объект.ВалютаДокумента)Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменениеВалютыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;	
	
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// Процедура-обработчик оповещения вопроса из процедуры ИзменениеВалютыКлиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаОбъекта = Объект.ОсновныеСредства;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтрокаТаблицы.СуммаПродажи = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаПродажи
																							   ,мКэшРеквизитовФормы.ВалютаДокумента
																							   ,Объект.ВалютаДокумента
																							   ,мКэшРеквизитовФормы.КурсДокумента
																							   ,Объект.КурсДокумента
																							   ,мКэшРеквизитовФормы.КратностьДокумента
																							   ,Объект.КратностьДокумента);
			
			СтрокаТаблицы.СуммаНДС 	   = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДС
																							   ,мКэшРеквизитовФормы.ВалютаДокумента
																							   ,Объект.ВалютаДокумента
																							   ,мКэшРеквизитовФормы.КурсДокумента
																							   ,Объект.КурсДокумента
																							   ,мКэшРеквизитовФормы.КратностьДокумента
																							   ,Объект.КратностьДокумента);
			
		КонецЦикла;
		
		
	КонецЕсли; 
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ИзменениеВалютыЗавершение()


// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
&НаСервере
Функция ЗаполнитьПараметрыПодбора()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ПараметрыПодбора = ДокументОбъект.ЗаполнитьПараметрыПодбора();
	
	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер,ИмяСубконто,ЗначениеСубконто)

	  СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,ИмяСубконто,фКоличествоСубконтоМУ);
	  бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,ИмяСубконто,ЗначениеСубконто,фКоличествоСубконтоМУ);
      бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,ИмяСубконто,"",фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Контейнер,ИмяСубконто,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,ИмяТабличногоПоля,ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента,ИмяТабличногоПоля,"");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда 
		Если СтруктураПараметров.Свойство("ВидОперации") Тогда
			Объект.ВидОперации = СтруктураПараметров.ВидОперации;																		   
		КонецЕсли;
		Если СтруктураПараметров.Свойство("ВидДвижения") Тогда
			Объект.ВидДвижения = СтруктураПараметров.ВидДвижения;																		   
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		Закрыть();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
		Объект.ВидОперации = фКэшЗначений.ВидыОпераций.ОсновныеСредства;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВидДвижения) Тогда 
		Объект.ВидДвижения = фКэшЗначений.Перечисления.бит_му_ВидыДвиженияВыбытия.Выбытие;
	КонецЕсли;
	
	//ЭтоПеревод = Объект.ВидДвижения = фКэшЗначений.Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи;
	//Если ЭтоПеревод Тогда
	//	// Очистим счет нераспределенной прибыли.
	//	Объект.СчетНРП = фКэшЗначений.ПустойСчет;
	//КонецЕсли;

	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ПриОткрытииПромежуточная()

&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
		
	ЗаполнитьМоделиУчетаОС();

КонецПроцедуры // ПриОткрытииОкончание()

#КонецОбласти

#КонецОбласти

//Начало_бит_Магомедов_27.07.2012 

&НаСервере
Процедура бит_му_ЗаполнитьСчетРасходов(СтрокаИсточник, ТекущаяСтрока)
	
	// ++ БоровинскаяОА (СофтЛаб) 15.12.18 Начало (#3128)
	Отбор = Новый Структура("Группа, ИмяНастройки, СБ_ПорядковыйНомерЗначения", "Счет расходов ОС МСФО", "Класс ОС", 0);
	
	СтруктураРесурсов = РегистрыСведений.бит_му_Настройки.Получить(Отбор);
	Если СтруктураРесурсов.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтруктураРесурсов.Значение) Тогда 
		ВызватьИсключение "Не установлено значение настройки  <Класс ОС> в группе <Счет расходов ОС МСФО> в регистре <Настройки МСФО>";
	КонецЕсли;
	КлассОСдо40тыс = СтруктураРесурсов.Значение;
	
	Если СтрокаИсточник.ВНА.БИТ_ГруппаОСУУ = КлассОСдо40тыс Тогда
		ИмяНастройки = "ОС до 40 000";
	// -- БоровинскаяОА (СофтЛаб) 15.12.18 Конец (#3128)
	ИначеЕсли ТипЗнч(СтрокаИсточник.ДокументБУ) = Тип("ДокументСсылка.СписаниеОС") И СтрокаИсточник.ДокументБУ.Проведен Тогда 
		ИмяНастройки = "СписаниеОС";	
	ИначеЕсли ТипЗнч(СтрокаИсточник.ДокументБУ) = Тип("ДокументСсылка.ПередачаОС")  И СтрокаИсточник.ДокументБУ.Проведен Тогда
		ИмяНастройки = "ПередачаОС";
	иначе
		ИмяНастройки = Неопределено;
	КонецЕсли; 
	
	Если ИмяНастройки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	
	// +СБ. Кузнецова С. 2014-11-12 
	//Отбор = Новый Структура("Группа, ИмяНастройки","Счет расходов ОС МСФО", ИмяНастройки);
	Отбор = Новый Структура("Группа, ИмяНастройки, СБ_ПорядковыйНомерЗначения","Счет расходов ОС МСФО", ИмяНастройки, 0);
	// -СБ. Кузнецова С.
	СтруктураРесурсов = РегистрыСведений.бит_му_Настройки.Получить(Отбор);
	Если СтруктураРесурсов.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(СтруктураРесурсов.Значение) Тогда 
		ВызватьИсключение "Не установлено значение настройки <"+ИмяНастройки+"> в группе <Счет расходов ОС МСФО> в регистре <Настройки МСФО>";
	КонецЕсли;
	Если Объект.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.Выбытие Тогда 
		ТекущаяСтрока.СчетКт = СтруктураРесурсов.Значение;
		ИзменениеСчетаКт(ТекущаяСтрока.ПолучитьИдентификатор());
	ИначеЕсли Объект.ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи Тогда 
		ТекущаяСтрока.СчетДт = бит_му_СчетВыбытия;
		ИзменениеСчетаДт(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция бит_му_ПолучитьДокументСписанияБУПоДаннымПодбора(ОС)
	ОбработкаПодбора = Обработки.бит_му_ПодборВНА.Создать();
	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеОС.ОсновныеСредства Тогда
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	Иначе
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Режим", Перечисления.бит_му_РежимыПодбораВНА.ВыбытиеОС);
	СтруктураПараметров.Вставить("ДатаНачала", НачалоМесяца(Объект.Дата));
	СтруктураПараметров.Вставить("ДатаОкончания", КонецМесяца(Объект.Дата));
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("МОЛ", Объект.МОЛ);
	СтруктураПараметров.Вставить("Местонахождение", Объект.Подразделение);
	СтруктураПараметров.Вставить("ВидКласса", ВидКласса);
	СтруктураПараметров.Вставить("ВидДвижения", Объект.ВидДвижения);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	
	ОбработкаПодбора.Режим           = Перечисления.бит_му_РежимыПодбораВНА.ВыбытиеОС;
	ОбработкаПодбора.ДатаОкончания   = КонецМесяца(Объект.Дата);
	ОбработкаПодбора.Организация     = Объект.Организация;
	ОбработкаПодбора.МОЛ             = Объект.МОЛ;
	ОбработкаПодбора.Местонахождение = Объект.Подразделение;
	ОбработкаПодбора.ВидКласса 		 = ВидКласса;
	ОбработкаПодбора.ВидДвижения     = Объект.ВидДвижения;
    //ОбработкаПодбора.ИнициализацияТекстаЗапроса();
	АдресСКД = Обработки.бит_му_ПодборВНА.ИнициализироватьСКД(Обработки.бит_му_ПодборВНА.ПолучитьТекстЗапроса(Перечисления.бит_му_РежимыПодбораВНА.ВыбытиеОС, СтруктураПараметров), Новый УникальныйИдентификатор);
	
	
	ПостроительОтчета = ОбработкаПодбора.ПостроительОтчета;
	
	ДобавитьЭлементОтбораПостроителя(ПостроительОтчета, "ОсновноеСредство");	
	ЭлементОтбора = ПостроительОтчета.Отбор.Найти("ОсновноеСредство");
	Если ЭлементОтбора <> Неопределено Тогда
		ЭлементОтбора.Значение      = ОС;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли; 
	
	ДобавитьЭлементОтбораПостроителя(ПостроительОтчета, "Проведен");	
	ЭлементОтбора = ПостроительОтчета.Отбор.Найти("Проведен");
	Если ЭлементОтбора <> Неопределено Тогда
		ЭлементОтбора.Значение      = Истина;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ИмяОтбора = "Организация";
	ДобавитьЭлементОтбораПостроителя(ПостроительОтчета, "Организация");	
	ЭлементОтбора = ПостроительОтчета.Отбор.Найти("Организация");
	Если ЭлементОтбора <> Неопределено Тогда
		ЭлементОтбора.Значение      = Объект.Организация;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли; 

	//ОбработкаПодбора.ОбновитьПереченьОбъектов();
	тзРезультат = Обработки.бит_му_ПодборВНА.ПолучитьПереченьОбъектов(АдресСКД, ОбработкаПодбора.Компоновщик, СтруктураПараметров);
	
	//СтрокаТЧ = ОбработкаПодбора.ПереченьОбъектов.Найти(ОС, "ВНА");
	Если тзРезультат.Колонки.Найти("ВНА") <> Неопределено Тогда
		СтрокаТЧ = тзРезультат.Найти(ОС, "ВНА");
		Если Не СтрокаТЧ = Неопределено Тогда 
			Возврат СтрокаТЧ.ДокументБУ;
		иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ДобавитьЭлементОтбораПостроителя(ПостроительОтчета,ИмяЭлементаОтбора)  Экспорт

	ПолеНастройки = ПостроительОтчета.ДоступныеПоля.Найти(ИмяЭлементаОтбора);
	Если ПолеНастройки <> Неопределено И ПолеНастройки.Отбор Тогда
		ЭлементОтбора = ПостроительОтчета.Отбор.Найти(ИмяЭлементаОтбора);
		Если ЭлементОтбора = Неопределено Тогда
			ПостроительОтчета.Отбор.Добавить(ИмяЭлементаОтбора);
		КонецЕсли;
	КонецЕсли; 


КонецПроцедуры //ДобавитьЭлементОтбораИнформация()

//Конец_бит_Магомедов_27.07.2012 

//ОК Калинин М. 170513
&НаКлиенте
Процедура ОбновитьДаты()	
    Объект.Период=рс_ОбщийМодуль.ПолучитьМесяцНачисленияПоДате(Объект.Дата);
КонецПроцедуры
//ОК Калинин М. 170513
