#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаМеждУчета Экспорт; // Хранит валюту международного учета.

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

//Начало_бит_Магомедов_27.07.2012 

Перем бит_му_СчетВыбытия Экспорт;

//Конец_бит_Магомедов_27.07.2012 

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроведения".
// 
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Переменная, хранящее значение структуры шапки документа.
	Перем СтруктураШапкиДокумента;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка); //izhtc-Kir 22.10.2015	
	
	// Подготовим структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Получим структуру курсов валют.
	СтруктураКурсыВалют = СтруктураКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Подготовим таблицы для возможности проведения.
	СтруктураТаблиц = ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют);
	
	// Проверить заполнение таблиц.
	ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим исторические курсы валют по каждому НМА.
	МассивОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	МассивОС = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивОС);
	ИсторическиеКурсы = СтруктураИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, СтруктураШапкиДокумента.Дата, СтруктураКурсыВалют);

	//Начало_бит_Магомедов_08.08.2012 
	бит_му_ПроверитьДублиСубконто(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок);
	//Конец_бит_Магомедов_08.08.2012 
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют,ИсторическиеКурсы, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаУдаленияПроведения".
// 
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	 
	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьШапкуДокумента();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьШапкуДокумента(ОбъектКопирования);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоПеревод = (ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи);
	ЭтоПродажа = (ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.Продажа);
	
	//Начало_бит_Магомедов_07.08.2012 
	//Если ЭтоПеревод Тогда	
	//Конец_бит_Магомедов_07.08.2012
		РеквизитСчетНРП = ПроверяемыеРеквизиты.Найти("СчетНРП");
		Если НЕ РеквизитСчетНРП = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитСчетНРП);
		КонецЕсли;
	//Начало_бит_Магомедов_07.08.2012 
	//КонецЕсли;
	//Конец_бит_Магомедов_07.08.2012
	
	Если НЕ ЭтоПродажа Тогда
		
		РеквизитСчетВзаиморасчетов = ПроверяемыеРеквизиты.Найти("СчетВзаиморасчетов");
		Если НЕ РеквизитСчетВзаиморасчетов = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитСчетВзаиморасчетов);
		КонецЕсли;
		
		РеквизитСчетНДС = ПроверяемыеРеквизиты.Найти("СчетНДС");
		Если НЕ РеквизитСчетНДС = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитСчетНДС);
		КонецЕсли;
		
		РеквизитСчетНДС = ПроверяемыеРеквизиты.Найти("ОсновныеСредства.СчетНДС");
		Если НЕ РеквизитСчетНДС = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитСчетНДС);
		КонецЕсли;
		
		РеквизитСуммаПродажи = ПроверяемыеРеквизиты.Найти("ОсновныеСредства.СуммаПродажи");
		Если НЕ РеквизитСуммаПродажи = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(РеквизитСуммаПродажи);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНеДублирующихсяПолей = Новый Структура;
	СтруктураНеДублирующихсяПолей.Вставить("ОсновноеСредство");
	
	// Проверим наличие дублей в табличной части "ДокументыПланирования".
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(ЭтотОбъект
																	 ,"ОсновныеСредства"
																	 ,СтруктураНеДублирующихсяПолей
																	 ,Отказ);
																	 
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет соответствие "Основное средство - модель учета".
// 
// Параметры:
//  СоответствиеОС_МодельУчета - Соответствие.
//  ОсновноеСредство		   - СправочникСсылка.ОсновныеСредства, массив.
// 
Процедура ЗаполнитьСоответствиеОС_МодельУчета(СоответствиеОС_МодельУчета
											 ,ОсновноеСредство) Экспорт
											 
	ЭтоПеревод = (ВидДвижения = Перечисления.бит_му_ВидыДвиженияВыбытия.ПереводВПредназначенныеДляПродажи);
											 
	Если Не ЭтоПеревод 
		Или Не ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МоментВремени"	 , КонецДня(Дата));
	Запрос.УстановитьПараметр("Организация"		 , Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство" , ОсновноеСредство);
	Запрос.УстановитьПараметр("ПараметрКласс"	 , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассыОС_МУ.ОсновноеСредство,
	|	КлассыОС_МУ.ЗначениеПараметра КАК Класс
	|ПОМЕСТИТЬ КлассыОС_МУ
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
	|			&МоментВремени,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&ОсновноеСредство)
	|				И Параметр = &ПараметрКласс) КАК КлассыОС_МУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассыОС_МУ.ОсновноеСредство,
	|	ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета
	|ПОМЕСТИТЬ ПараметрыКлассовВНА_ПустаяОрганизация
	|ИЗ
	|	КлассыОС_МУ КАК КлассыОС_МУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА_ПустаяОрганизация
	|		ПО КлассыОС_МУ.Класс = ПараметрыКлассовВНА_ПустаяОрганизация.Класс
	|			И (ПараметрыКлассовВНА_ПустаяОрганизация.Организация = &ПустаяОрганизация)
	|ГДЕ
	|	(НЕ ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассыОС_МУ.ОсновноеСредство,
	|	ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета
	|ПОМЕСТИТЬ ПараметрыКлассовВНА_НеПустаяОрганизация
	|ИЗ
	|	КлассыОС_МУ КАК КлассыОС_МУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА_НеПустаяОрганизация
	|		ПО КлассыОС_МУ.Класс = ПараметрыКлассовВНА_НеПустаяОрганизация.Класс
	|			И (НЕ ПараметрыКлассовВНА_НеПустаяОрганизация.Организация = &ПустаяОрганизация)
	|ГДЕ
	|	(НЕ ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПараметрыКлассовВНА_НеПустаяОрганизация.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ПараметрыКлассовВНА_ПустаяОрганизация.ОсновноеСредство
	|		ИНАЧЕ ПараметрыКлассовВНА_НеПустаяОрганизация.ОсновноеСредство
	|	КОНЕЦ КАК ОсновноеСредство,
	|	ВЫБОР
	|		КОГДА ПараметрыКлассовВНА_НеПустаяОрганизация.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета
	|		ИНАЧЕ ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета
	|	КОНЕЦ КАК МодельУчета
	|ИЗ
	|	ПараметрыКлассовВНА_НеПустаяОрганизация КАК ПараметрыКлассовВНА_НеПустаяОрганизация
	|		ПОЛНОЕ СОЕДИНЕНИЕ ПараметрыКлассовВНА_ПустаяОрганизация КАК ПараметрыКлассовВНА_ПустаяОрганизация
	|		ПО ПараметрыКлассовВНА_НеПустаяОрганизация.ОсновноеСредство = ПараметрыКлассовВНА_ПустаяОрганизация.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КлассыОС_МУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКлассовВНА_ПустаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКлассовВНА_НеПустаяОрганизация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИзЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаИзЗапроса.Следующий() Цикл
		СоответствиеОС_МодельУчета.Вставить(ВыборкаИзЗапроса.ОсновноеСредство, ВыборкаИзЗапроса.МодельУчета);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСоответствиеОС_МодельУчета()

// Функция определяет модель учета ОС по соответствию СоответствиеОС_МодельУчета.
// 
// Параметры:
//  СоответствиеОС_МодельУчета - Соответствие.
//  ОсновноеСредство		   - СправочникСсылка.ОсновныеСредства.
//                     
// Возвращаемое значение:
//  МодельУчета - ПеречислениеСсылка.бит_му_МоделиУчетаВНА.
// 
Функция СоответствиеОСПоМоделиУчета(СоответствиеОС_МодельУчета, ОсновноеСредство) Экспорт
	
	МодельУчета = Перечисления.бит_му_МоделиУчетаВНА.ПустаяСсылка();
	
	Если СоответствиеОС_МодельУчета[ОсновноеСредство] = Неопределено Тогда
		
		// Добавим в соответствие ОС его модель учета.
		ЗаполнитьСоответствиеОС_МодельУчета(СоответствиеОС_МодельУчета
										   ,ОсновноеСредство);
												  
	КонецЕсли;
	
	Если Не СоответствиеОС_МодельУчета[ОсновноеСредство] = Неопределено Тогда
		МодельУчета = СоответствиеОС_МодельУчета[ОсновноеСредство];
	КонецЕсли;
	
	Возврат МодельУчета;
	
КонецФункции // ПолучитьСоответствиеОС_МодельУчета()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

// Функция получает параметры, передаваемые в обработку подбора ОС.
//
Функция ЗаполнитьПараметрыПодбора() Экспорт
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеОС.ОсновныеСредства Тогда
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	Иначе
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("Организация"		, Организация);                             
	ПараметрыПодбора.Вставить("ВидДвижения"		, ВидДвижения);
	ПараметрыПодбора.Вставить("Режим"			, Перечисления.бит_му_РежимыПодбораВНА.ВыбытиеОС);
	ПараметрыПодбора.Вставить("ДатаНачала"		, НачалоМесяца(Дата));
	ПараметрыПодбора.Вставить("ДатаОкончания"	, КонецМесяца(Дата));
	ПараметрыПодбора.Вставить("МОЛ"				, МОЛ);
	ПараметрыПодбора.Вставить("Местонахождение"	, Подразделение);
	ПараметрыПодбора.Вставить("ВидКласса"		, ВидКласса);

	Возврат ПараметрыПодбора;
	
КонецФункции // ЗаполнитьПараметрыПодбора()

// Процедура - Обработать подбор НМА.
//
// Параметры:
//  ВыбранноеЗначение - Организация.
//
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ОбработатьПодборНМА(ВыбранноеЗначение) Экспорт
Процедура ОбработатьПодборНМА(ВыбранноеЗначение, Форма) Экспорт
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов,ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОсновноеСредство", СтрокаТаблицы.ВНА);
		
		МассивСтрок = ОсновныеСредства.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			Отказ = Ложь;
			
			// Проверим ОС.
			Документы.бит_му_ВыбытиеОС.ПроверитьОСПриВыборе(СтрокаТаблицы.ВНА, ЭтотОбъект, Отказ);
			
			Если Не Отказ Тогда
				
				НоваяСтрока = ОсновныеСредства.Добавить();
				НоваяСтрока.ОсновноеСредство = СтрокаТаблицы.ВНА;
				НоваяСтрока.СуммаПродажи 	 = СтрокаТаблицы.Сумма;
				НоваяСтрока.СуммаНДС 		 = СтрокаТаблицы.СуммаНДС;
				
				// Выполним подбор счетов.
				Документы.бит_му_ВыбытиеОС.ВыполнитьПодборСчетов(НоваяСтрока, СтрокаТаблицы, ЭтотОбъект);
				
				//Начало_бит_Магомедов_27.07.2012 
				//заполним счета расходов и выбытия
				Форма.бит_му_ЗаполнитьСчетРасходов(СтрокаТаблицы, НоваяСтрока);
				НоваяСтрока.бит_му_СчетВыбытия = бит_му_СчетВыбытия;
				//Конец_бит_Магомедов_27.07.2012
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Основное средство ""%1"" инв. № %2 уже подобрано в строке №%3'");
			ТекстСообщения = СтрШаблон(ТекстСообщения ,СтрокаТаблицы.ВНА,СтрокаТаблицы.ИнвентарныйНомер,НайденнаяСтрока.НомерСтроки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ОбъектКопирования = Неопределено)
	
	НовыйВидОперации = ВидОперации;
	
	// Заполним шапку документа значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"), ОбъектКопирования);

	Если НЕ ЗначениеЗаполнено(НовыйВидОперации) Тогда
		// Если этого не сделать, то при создании нового система не предложит выбрать вид операции.
		ВидОперации = НовыйВидОперации;
	КонецЕсли;
	
	Если ОбъектКопирования = Неопределено И НЕ ЗначениеЗаполнено(СчетНРП) Тогда
		СчетНРП = бит_му_ОбщегоНазначения.ПолучитьСчетНРП(Организация, ТекущаяДатаСеанса());
	КонецЕсли;
	
	ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДатаСеанса());
	
	КурсДокумента = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;
	
КонецПроцедуры

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура вызывает процедуру по валютным пересчетам и записывает СуммуМУ.
// 
// Параметры:
//  СтрокаТаблицы       - СтрокаТаблицыЗначений.
//  Запись				- РегистрБухгалтерииЗапись.бит_Дополнительный_2.
//  СтруктураКурсыВалют - Структура.
// 
Процедура ВыполнитьВалютныеПересчетыЗаписи(СтруктураШапкиДокумента, Запись, СтруктураКурсыВалют)
	
	// Заполнение атрибутов записи.
	СтрокаТаблицы = Новый Структура;
	СтрокаТаблицы.Вставить("Организация",   СтруктураШапкиДокумента.Организация);
	СтрокаТаблицы.Вставить("Период",        СтруктураШапкиДокумента.Дата);
	СтрокаТаблицы.Вставить("Валюта",        мВалютаМеждУчета);
	СтрокаТаблицы.Вставить("Стоимость",     Запись.СтоимостьМУ);
	СтрокаТаблицы.Вставить("Себестоимость", Запись.СебестоимостьМУ);
	
	// Сформируем массив имен источника.
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Стоимость");
	МассивИмен.Добавить("Себестоимость");
	
	// Выполним расчет сумм "Регламентного и управленческого учета".
	бит_КурсыВалют.ВыполнитьВалютныеПересчеты(СтрокаТаблицы,
	                                          Запись,
											  МассивИмен,
											  СтруктураКурсыВалют,
											  СтруктураКурсыВалют.Документ);
	
КонецПроцедуры // ВыполнитьВалютныеПересчетыЗаписи()

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ)

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Получим список ОС документа.
	СписокОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(СписокОС, Истина);
	
	СтруктураШапкиДокумента.Вставить("СписокОС", СписокОС);
	
	Если ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеОС.ОсновныеСредства Тогда
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ОсновныеСредства;
	Иначе
		ВидКласса = Перечисления.бит_му_ВидыКлассовОС.ИнвестиционнаяСобственность;
	КонецЕсли;
	
	// Запишем Вид класса ОС документа.
	СтруктураШапкиДокумента.Вставить("ВидКласса_ОС", ВидКласса);
	
КонецПроцедуры

// Процедура проверяет правильность заполнения строк таблиц документа.
// 
// Параметры: 
//  СтруктураТаблиц			- Структура, таблицы значений, содержащая данные для проведения и проверки.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТаблицДокумента(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок)

	МенеджерПеречисления = Перечисления.бит_му_ВидыДвиженияВыбытия;
	ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
	ЭтоПродажа			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.Продажа);
	ЭтоВыбытие			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.Выбытие);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачТекст = НСтр("ru='Не заполнено значение реквизита %1'");
	
	Если ЭтоПеревод Тогда 
		ТекстСообщенияСчетДт = НСтр("ru='""Счет учета ВНА, предназначенных для продажи""'");
		ТекстСообщенияСчетКт = НСтр("ru='""Счет резерва переоценки ВНА для продажи""'");
		
		ТекстОтсутствияСчетаДт = СтрШаблон(НачТекст, ТекстСообщенияСчетДт);
		ТекстОтсутствияСчетаКт = СтрШаблон(НачТекст, ТекстСообщенияСчетКт);
	Иначе
		Если Не ЭтоВыбытие Тогда
			ТекстСообщенияСчетДт = НСтр("ru='""Счет прочих доходов""'");
			
			ТекстОтсутствияСчетаДт = СтрШаблон(НачТекст, ТекстСообщенияСчетДт);
		КонецЕсли;
		ТекстСообщенияСчетКт = НСтр("ru='""Счет прочих расходов""'");
		
		ТекстОтсутствияСчетаКт = СтрШаблон(НачТекст, ТекстСообщенияСчетКт);
	КонецЕсли;
	
	ИмяКолонкиСчетДт = ?(ЭтоПеревод, "СчетУчетаДляПродажи"			  , "СчетПрочихДоходов");
	ИмяКолонкиСчетКт = ?(ЭтоПеревод, "СчетРезерваПереоценкиДляПродажи", "СчетПрочихРасходов");
	
	ТаблицаПоОС = СтруктураТаблиц.ОС;
	КолонкиОС	= ТаблицаПоОС.Колонки;
	ВидКласса   = СтруктураШапкиДокумента.ВидКласса_ОС;
	
	//ОК Калинин М. 290413  
	Если ВидОперации=Перечисления.бит_му_ВидыОперацийВыбытиеОС.ОсновныеСредства или 
		ВидОперации=Перечисления.бит_му_ВидыОперацийВыбытиеОС.ИнвестиционнаяСобственность
	тогда	
		ОК_ОбщегоНазначения.ПроверитьЗаполненостьАналитикСчетаВТабличнойЧастиДокумента(ЭтотОбъект,"ОсновныеСредства","СчетДт","СубконтоДт",Отказ,Заголовок);
		ОК_ОбщегоНазначения.ПроверитьЗаполненостьАналитикСчетаВТабличнойЧастиДокумента(ЭтотОбъект,"ОсновныеСредства","СчетКт","СубконтоКт",Отказ,Заголовок);
	КонецЕсли;
	//ОК Калинин М.	
	
	// Проверим таблицу ОС по строчно.
	Для Каждого ТекСтрока Из ТаблицаПоОС Цикл
		
		НачалоСообщения = НСтр("ru='В строке № %1 табличной части ""Основные средства"": %2'");
		НачалоСообщения = СтрШаблон(НачалоСообщения,ТекСтрока.НомерСтроки);				 
						 
		ТекущийВидКласса = ТекСтрока.ВидКласса;
		
		// Проверим заполненность значений строки.
		бит_му_ВНА.ПроверитьСтрокуТаблицыОС(ТекСтрока, КолонкиОС, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		//Начало_бит_Магомедов_03.09.2012 
		//Если ВидКласса <> ТекущийВидКласса Тогда
		//Считаем, что, если ТекущийВидКласса = NULL, то ОС не принято к учету, и отправляемся в "иначе" для отработки проверки на "принятость к учету".
		Если ВидКласса <> ТекущийВидКласса И НЕ ТекущийВидКласса = NULL Тогда
		//Конец_бит_Магомедов_03.09.2012 
		
			ТекстСообщения = НСтр("ru='вид класса ""%1"" основного средства ""%2"" не соответствует виду операции документа'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущийВидКласса, ТекСтрока.ОсновноеСредство);	
																	
			ТекстСообщения = СтрШаблон(НачалоСообщения, ТекСтрока.НомерСтроки, ТекстСообщения);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,Отказ);
			
		Иначе
			
			Если ЭтоПеревод И ТекСтрока.Переведено Тогда
				
				ТекстСообщения = НСтр("ru='указано ранее переведенное основное средство ""%1"", дата перевода: %2'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТекСтрока.ОсновноеСредство, Формат(ТекСтрока.ДатаПеревода, НСтр("ru = 'ДФ=dd.MM.yyyy'")));				 
				
				ТекстСообщения = СтрШаблон(НачалоСообщения, ТекСтрока.НомерСтроки, ТекстСообщения);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,Отказ);				 
				
			Иначе
				
				//Начало_бит_Магомедов_29.08.2012
				//Если (ЭтоПеревод Или (Не ЭтоПеревод И Не ЭтоВыбытие))
				//	И Не ЗначениеЗаполнено(ТекСтрока[ИмяКолонкиСчетДт]) Тогда
				//	
				//	ТекстСообщения = СтрШаблон(НачалоСообщения, ТекСтрока.НомерСтроки, ТекстОтсутствияСчетаДт);
				//	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,Отказ);
				//	
				//КонецЕсли;
				//
				//Если ТекСтрока.СчетКтОбязателен 
				//	И Не ЗначениеЗаполнено(ТекСтрока[ИмяКолонкиСчетКт]) Тогда
				//	
				//	ТекстСообщения = СтрШаблон(НачалоСообщения, ТекСтрока.НомерСтроки, ТекстОтсутствияСчетаКт);
				//	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,Отказ);
				//	
				//КонецЕсли;
				//Конец_бит_Магомедов_29.08.2012
				
			КонецЕсли; // Если ЭтоПеревод И ТекСтрока.Переведено Тогда.
			
		КонецЕсли; // Если ВидКласса <> ТекущийВидКласса Тогда
		
	КонецЦикла; // Обход таблицы ОС
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицДокумента()

// Функция готовит таблицы документа для проведения.
// 
// Возвращаемое значение:
//   ТаблицаБДДС   - ТаблицаЗначений.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураКурсыВалют)  Экспорт
	
	МенеджерПеречисления = Перечисления.бит_му_ВидыДвиженияВыбытия;
	ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
	// Адаптация для ERP. Начало. 18.03.2014{{
	ИмяСправочникаОсновныеСредства = бит_ОбщегоНазначения.ПолучитьИмяСправочникаОсновныеСредства();
	// Адаптация для ERP. Конец. 18.03.2014}}
	
	// Сформируем массив параметров ОС для получения.
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетРезерваПереоценки_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.Класс_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ФинансоваяАренда_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизациюСТекущегоПериода_ОС);
	ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.СпособОтраженияРасходовПоАмортизации_ОС);
	
	Если ЭтоПеревод Тогда
		ПараметрыВНА.Добавить(ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.МетодНачисленияАмортизации_ОС);
	КонецЕсли;
	
	// Сформируем структуру параметров для получения таблицы параметров ОС.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"     , СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("ОсновноеСредство", СтруктураШапкиДокумента.СписокОС);
	СтруктураПараметров.Вставить("МоментВремени"   , Новый Граница(Дата, ВидГраницы.Включая)); //Начало_бит_Магомедов_03.08.2012 ?(ЭтоНовый(), КонецДня(СтруктураШапкиДокумента.Дата), МоментВремени()));	
	СтруктураПараметров.Вставить("ПараметрыВНА"	   , ПараметрыВНА);
	
	// Получим таблицу параметров ОС.
	ТаблицаПараметровОС = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров, "ТаблицаЗначений");
	
	// Получим массив счетов по ОС.
	МассивСчетовАмортизации 	  = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетНачисленияАмортизации_ОС");
	МассивСчетовСниженияСтоимости = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетСниженияСтоимости_ОС");
	МассивСчетовУчета 			  = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетУчета_ОС");
	МассивСчетовРезерваПереоценки = ТаблицаПараметровОС.ВыгрузитьКолонку("СчетРезерваПереоценки_ОС");
	
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовАмортизации	  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовСниженияСтоимости, Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчета			  , Истина);
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовРезерваПереоценки, Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПараметров"      		 , ТаблицаПараметровОС);
	Запрос.УстановитьПараметр("МоментВремени"				 , Новый Граница(МоментВремени().Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивСчетовАмортизации"		 , МассивСчетовАмортизации);
	Запрос.УстановитьПараметр("МассивСчетовСниженияСтоимости", МассивСчетовСниженияСтоимости);
	Запрос.УстановитьПараметр("МассивСчетовУчета"			 , МассивСчетовУчета);
	Запрос.УстановитьПараметр("МассивСчетовРезерваПереоценки", МассивСчетовРезерваПереоценки);
	Запрос.УстановитьПараметр("Организация"					 , СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("СписокОС"					 , СтруктураШапкиДокумента.СписокОС);
	Запрос.УстановитьПараметр("СостояниеПринятоКУчету"		 , Перечисления.бит_му_СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("СостояниеСнятоСУчета"  		 , Перечисления.бит_му_СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("СобытиеПеревод"  		 	 , Перечисления.бит_му_СобытияОС.Перевод);
	Запрос.УстановитьПараметр("СобытиеВыбытие"  		 	 , Перечисления.бит_му_СобытияОС.Выбытие);
	Запрос.УстановитьПараметр("СобытиеПродажа"  		 	 , Перечисления.бит_му_СобытияОС.Продажа);
	Запрос.УстановитьПараметр("Ссылка"						 , СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("ПустойПараметр"		  		 , ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ПустаяСсылка());
		
	Если ЭтоПеревод Тогда
		
		// Получим массив классов.
		МассивКлассов = ТаблицаПараметровОС.ВыгрузитьКолонку("Класс_ОС");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивКлассов, Истина);
		
		СписаниеПоСправедливойСтоимости = Перечисления.бит_му_МоделиУчетаВНА.ПоПереоцененнойСтоимости;
		
		Запрос.УстановитьПараметр("СписаниеПоСправедливойСтоимости", СписаниеПоСправедливойСтоимости);
		Запрос.УстановитьПараметр("МассивКлассов"				   , МассивКлассов);
		Запрос.УстановитьПараметр("ПустаяОрганизация"			   , Справочники.Организации.ПустаяСсылка());
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПараметров.ВНА КАК ОсновноеСредство,
	|	ТаблицаПараметров.СчетСниженияСтоимости_ОС КАК СчетСниженияСтоимости,
	|	ТаблицаПараметров.СчетНачисленияАмортизации_ОС КАК СчетНачисленияАмортизации,
	|	ТаблицаПараметров.СчетУчета_ОС КАК ОсновнойСчетУчета,
	|	ТаблицаПараметров.СчетРезерваПереоценки_ОС КАК ОсновнойСчетРезерваПереоценки,
	|	ТаблицаПараметров.Класс_ОС КАК Класс,
	|	ТаблицаПараметров.ФинансоваяАренда_ОС КАК ОбъектВФинансовойАренде,
	|	ТаблицаПараметров.НачислятьАмортизациюСТекущегоПериода_ОС КАК НачислятьАмортизациюСТекущегоПериода,
	|	ТаблицаПараметров.СпособОтраженияРасходовПоАмортизации_ОС КАК СпособОтраженияРасходовПоАмортизации,
	|	ТаблицаПараметров.НачислятьАмортизацию_ОС КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ТаблицаПараметров
	|ИЗ
	|	&ТаблицаПараметров КАК ТаблицаПараметров
	|;
	|" + ?(ЭтоПеревод, "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКлассовВНА_ПустаяОрганизация.Класс,
	|	ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета
	|ПОМЕСТИТЬ ПараметрыКлассовВНА_ПустаяОрганизация
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА_ПустаяОрганизация
	|ГДЕ
	|	ПараметрыКлассовВНА_ПустаяОрганизация.Организация = &ПустаяОрганизация
	|	И ПараметрыКлассовВНА_ПустаяОрганизация.Класс В (&МассивКлассов)
	|	И (НЕ ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКлассовВНА_НеПустаяОрганизация.Класс,
	|	ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета
	|ПОМЕСТИТЬ ПараметрыКлассовВНА_НеПустаяОрганизация
	|ИЗ
	|	РегистрСведений.бит_му_ПараметрыКлассовВНА КАК ПараметрыКлассовВНА_НеПустаяОрганизация
	|ГДЕ
	//Начало_бит_Магомедов_31.07.2012 
	//|	(НЕ ПараметрыКлассовВНА_НеПустаяОрганизация.Организация = &ПустаяОрганизация)
	|	(ПараметрыКлассовВНА_НеПустаяОрганизация.Организация = &Организация)
	//Конец_бит_Магомедов_31.07.2012 	
	|	И ПараметрыКлассовВНА_НеПустаяОрганизация.Класс В (&МассивКлассов)
	|	И (НЕ ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПараметрыКлассовВНА_НеПустаяОрганизация.Класс ЕСТЬ NULL 
	|			ТОГДА ПараметрыКлассовВНА_ПустаяОрганизация.Класс
	|		ИНАЧЕ ПараметрыКлассовВНА_НеПустаяОрганизация.Класс
	|	КОНЕЦ КАК Класс,
	|	ВЫБОР
	|		КОГДА ПараметрыКлассовВНА_НеПустаяОрганизация.Класс ЕСТЬ NULL 
	|			ТОГДА ПараметрыКлассовВНА_ПустаяОрганизация.МодельУчета
	|		ИНАЧЕ ПараметрыКлассовВНА_НеПустаяОрганизация.МодельУчета
	|	КОНЕЦ КАК МодельУчета
	|ПОМЕСТИТЬ МоделиУчетаКлассов
	|ИЗ
	|	ПараметрыКлассовВНА_НеПустаяОрганизация КАК ПараметрыКлассовВНА_НеПустаяОрганизация
	|		ПОЛНОЕ СОЕДИНЕНИЕ ПараметрыКлассовВНА_ПустаяОрганизация КАК ПараметрыКлассовВНА_ПустаяОрганизация
	|		ПО ПараметрыКлассовВНА_НеПустаяОрганизация.Класс = ПараметрыКлассовВНА_ПустаяОрганизация.Класс
	|;
	|", "") + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыбытиеОС_ОС.НомерСтроки,
	|	ВыбытиеОС_ОС.ОсновноеСредство,
	|	ТаблицаПараметров.ОсновнойСчетУчета,
	|	СтоимостьОС_МУ.Субконто1 КАК СУ_Субконто1,
	|	СтоимостьОС_МУ.Субконто2 КАК СУ_Субконто2,
	|	СтоимостьОС_МУ.Субконто3 КАК СУ_Субконто3,
	|	СтоимостьОС_МУ.Субконто4 КАК СУ_Субконто4,
	|	ТаблицаПараметров.СчетНачисленияАмортизации,
	|	АмортизацияОС_МУ.Субконто1 КАК СНА_Субконто1,
	|	АмортизацияОС_МУ.Субконто2 КАК СНА_Субконто2,
	|	АмортизацияОС_МУ.Субконто3 КАК СНА_Субконто3,
	|	АмортизацияОС_МУ.Субконто4 КАК СНА_Субконто4,
	|	ТаблицаПараметров.СчетСниженияСтоимости,
	|	ВыбытиеОС_ОС.ОсновноеСредство КАК ССС_Субконто1,
	|	ФактОбесценениеОС_МУ.Субконто2 КАК ССС_Субконто2,
	|	ФактОбесценениеОС_МУ.Субконто3 КАК ССС_Субконто3,
	|	ФактОбесценениеОС_МУ.Субконто4 КАК ССС_Субконто4,
	|	ТаблицаПараметров.ОсновнойСчетРезерваПереоценки,
	|	ВыбытиеОС_ОС.ОсновноеСредство КАК СРП_Субконто1,
	|	РезПереоценкиОС_МУ.Субконто2 КАК СРП_Субконто2,
	|	РезПереоценкиОС_МУ.Субконто3 КАК СРП_Субконто3,
	|	РезПереоценкиОС_МУ.Субконто4 КАК СРП_Субконто4,
	|	ВыбытиеОС_ОС.СчетДт КАК " 	   + ?(ЭтоПеревод, "СчетУчетаДляПродажи", "СчетПрочихДоходов") + ",
	|	ВыбытиеОС_ОС.СубконтоДт1 КАК " + ?(ЭтоПеревод, "СУП_Субконто1" , "СПД_Субконто1") + ",
	|	ВыбытиеОС_ОС.СубконтоДт2 КАК " + ?(ЭтоПеревод, "СУП_Субконто2" , "СПД_Субконто2") + ",
	|	ВыбытиеОС_ОС.СубконтоДт3 КАК " + ?(ЭтоПеревод, "СУП_Субконто3" , "СПД_Субконто3") + ",
	|	ВыбытиеОС_ОС.СубконтоДт4 КАК " + ?(ЭтоПеревод, "СУП_Субконто4" , "СПД_Субконто4") + ",
	|	ВыбытиеОС_ОС.СчетКт КАК " 	   + ?(ЭтоПеревод, "СчетРезерваПереоценкиДляПродажи", "СчетПрочихРасходов") + ",
	|	ВыбытиеОС_ОС.СубконтоКт1 КАК " + ?(ЭтоПеревод, "СРПП_Субконто1", "СПР_Субконто1") + ",
	|	ВыбытиеОС_ОС.СубконтоКт2 КАК " + ?(ЭтоПеревод, "СРПП_Субконто2", "СПР_Субконто2") + ",
	|	ВыбытиеОС_ОС.СубконтоКт3 КАК " + ?(ЭтоПеревод, "СРПП_Субконто3", "СПР_Субконто3") + ",
	|	ВыбытиеОС_ОС.СубконтоКт4 КАК " + ?(ЭтоПеревод, "СРПП_Субконто4", "СПР_Субконто4") + ",
	|	ВыбытиеОС_ОС.СчетНДС,
	|	ВыбытиеОС_ОС.СубконтоНДС1,
	|	ВыбытиеОС_ОС.СубконтоНДС2,
	|	ВыбытиеОС_ОС.СубконтоНДС3,
	|	ВыбытиеОС_ОС.СубконтоНДС4,
	|	ВыбытиеОС_ОС.СуммаПродажи,
	|	ВыбытиеОС_ОС.СуммаНДС,
	|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаМУОстатокДт, 0)   - ЕСТЬNULL(АмортизацияОС_МУ.СуммаМУОстатокКт, 0)   - ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаМУОстатокКт, 0)   КАК ОстСтоимость,
	|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаРеглОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС_МУ.СуммаРеглОстатокКт, 0) - ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаРеглОстатокКт, 0) КАК ОстСтоимостьРегл,
	|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаУпрОстатокДт, 0)  - ЕСТЬNULL(АмортизацияОС_МУ.СуммаУпрОстатокКт, 0)  - ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаУпрОстатокКт, 0)  КАК ОстСтоимостьУпр,
	|	ЕСТЬNULL(СтоимостьОС_МУ.СуммаМУОстатокДт, 0)	КАК СтоимостьОС_СуммаМУОстатокДт,
	|   ЕСТЬNULL(СтоимостьОС_МУ.СуммаРеглОстатокДт, 0)	КАК СтоимостьОС_СуммаРеглОстатокДт,
	|   ЕСТЬNULL(СтоимостьОС_МУ.СуммаУпрОстатокДт, 0)	КАК СтоимостьОС_СуммаУпрОстатокДт,
	|	ЕСТЬNULL(АмортизацияОС_МУ.СуммаМУОстатокКт, 0)   КАК Амортизация,
	|	ЕСТЬNULL(АмортизацияОС_МУ.СуммаРеглОстатокКт, 0) КАК АмортизацияРегл,
	|	ЕСТЬNULL(АмортизацияОС_МУ.СуммаУпрОстатокКт, 0)  КАК АмортизацияУпр,
	|	ЕСТЬNULL(ФактОбесценениеОС_МУ.СуммаМУОстатокКт, 0) КАК СуммаОбесценения, " + ?(ЭтоПеревод, "
	|	ВЫБОР
	|		КОГДА МоделиУчетаКлассов.МодельУчета = &СписаниеПоСправедливойСтоимости
	|			ТОГДА ЕСТЬNULL(РезПереоценкиОС_МУ.СуммаМУОстатокКт, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРезерваПереоценки,
	|	ВЫБОР
	|		КОГДА МоделиУчетаКлассов.МодельУчета = &СписаниеПоСправедливойСтоимости
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СчетКтОбязателен,", "
	|	ЕСТЬNULL(РезПереоценкиОС_МУ.СуммаМУОстатокКт, 0) КАК СуммаРезерваПереоценки,
	|	ИСТИНА КАК СчетКтОбязателен,") + "
	|	ПринятыеОС_МУ.ДатаСостояния КАК ДатаПринятия,
	|	ВЫБОР
	|		КОГДА ПереведенныеОС_МУ.Период ЕСТЬ NULL 
	|			ТОГДА ВыбывшиеОС_МУ.ДатаСостояния
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВыбытиеПродажаОС_МУ.Период ЕСТЬ NULL
	|					ТОГДА ВыбывшиеОС_МУ.ДатаСостояния
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|	КОНЕЦ КАК ДатаВыбытия,
	|	ВЫБОР
	|		КОГДА ПереведенныеОС_МУ.Период ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Переведено,
	|	ПереведенныеОС_МУ.Период КАК ДатаПеревода,
	|	ТаблицаПараметров.Класс.ВидКласса КАК ВидКласса,
	|	ЕстьNULL(ТаблицаПараметров.ОбъектВФинансовойАренде, Ложь) КАК ОбъектВФинансовойАренде,
	|	ВЫБОР
	|		КОГДА ТаблицаПараметров.НачислятьАмортизациюСТекущегоПериода
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НачислятьАмортизациюЗаМесяцВыбытия,
	|	ТаблицаПараметров.СпособОтраженияРасходовПоАмортизации,
	|	ВЫБОР
	|		КОГДА ТаблицаПараметров.НачислятьАмортизацию
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ &ПустойПараметр
	|	КОНЕЦ КАК НачислятьАмортизацию" + ?(ЭтоПеревод, ",
	|	ВыбытиеОС_ОС.СчетДт КАК СчетУчета,
	|	ВыбытиеОС_ОС.СчетКт КАК СчетРезерваПереоценки", "") + "
	//Начало_бит_Магомедов_31.07.2012 
	|	,ВыбытиеОС_ОС.бит_му_СчетВыбытия КАК СчетВыбытия
	//Конец_бит_Магомедов_31.07.2012 	
	|ИЗ
	|	Документ.бит_му_ВыбытиеОС.ОсновныеСредства КАК ВыбытиеОС_ОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ПринятыеОС_МУ
	|		ПО ВыбытиеОС_ОС.ОсновноеСредство = ПринятыеОС_МУ.ОсновноеСредство
	|			И (ПринятыеОС_МУ.Организация = &Организация)
	|			И (ПринятыеОС_МУ.Состояние = &СостояниеПринятоКУчету)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК ВыбывшиеОС_МУ
	|		ПО ВыбытиеОС_ОС.ОсновноеСредство = ВыбывшиеОС_МУ.ОсновноеСредство
	|			И (ВыбывшиеОС_МУ.Организация = &Организация)
	|			И (ВыбывшиеОС_МУ.Состояние = &СостояниеСнятоСУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СобытияОС.СрезПоследних(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)
	|					И Событие = &СобытиеПеревод) КАК ПереведенныеОС_МУ
	|		ПО ВыбытиеОС_ОС.ОсновноеСредство = ПереведенныеОС_МУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СобытияОС.СрезПоследних(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)
	|					И (Событие = &СобытиеВыбытие
	|					   ИЛИ Событие = &СобытиеПродажа)) КАК ВыбытиеПродажаОС_МУ
	|		ПО ВыбытиеОС_ОС.ОсновноеСредство = ВыбытиеПродажаОС_МУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПараметров КАК ТаблицаПараметров " + ?(ЭтоПеревод, "
	|			ЛЕВОЕ СОЕДИНЕНИЕ МоделиУчетаКлассов КАК МоделиУчетаКлассов
	|			ПО ТаблицаПараметров.Класс = МоделиУчетаКлассов.Класс", "") + "
	|		ПО ВыбытиеОС_ОС.ОсновноеСредство = ТаблицаПараметров.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовСниженияСтоимости),
	|				,
	|				Организация = &Организация
	|                   И ВЫБОР КОГДА Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто1 В (&СписокОС)
	|                           КОГДА Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто2 В (&СписокОС)
	|                           КОГДА Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто3 В (&СписокОС)
	|                           КОГДА Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто4 В (&СписокОС)
	|                     ИНАЧЕ ЛОЖЬ
	|                     КОНЕЦ
	|) КАК ФактОбесценениеОС_МУ
	|		ПО (ВЫБОР 
	|				КОГДА ФактОбесценениеОС_МУ.Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                     ВыбытиеОС_ОС.ОсновноеСредство = ФактОбесценениеОС_МУ.Субконто1
	|               КОГДА ФактОбесценениеОС_МУ.Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                     ВыбытиеОС_ОС.ОсновноеСредство = ФактОбесценениеОС_МУ.Субконто2
	|               КОГДА ФактОбесценениеОС_МУ.Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                     ВыбытиеОС_ОС.ОсновноеСредство = ФактОбесценениеОС_МУ.Субконто3
	|               КОГДА ФактОбесценениеОС_МУ.Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                     ВыбытиеОС_ОС.ОсновноеСредство = ФактОбесценениеОС_МУ.Субконто4
	|               ИНАЧЕ ЛОЖЬ
	|           КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовРезерваПереоценки),
	|				,
	|				Организация = &Организация
	// Адаптация для ERP. Начало. 18.03.2014{{
	|                   И ВЫБОР КОГДА Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто1 В (&СписокОС)
	|                           КОГДА Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто2 В (&СписокОС)
	|                           КОГДА Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто3 В (&СписокОС)
	|                           КОГДА Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто4 В (&СписокОС)
	|                     ИНАЧЕ ЛОЖЬ
	|                     КОНЕЦ
	|) КАК РезПереоценкиОС_МУ
	|		ПО (ВЫБОР КОГДА РезПереоценкиОС_МУ.Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА 
    |				  		ВыбытиеОС_ОС.ОсновноеСредство = РезПереоценкиОС_МУ.Субконто1
	|                 КОГДА РезПереоценкиОС_МУ.Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА 
	|                       ВыбытиеОС_ОС.ОсновноеСредство = РезПереоценкиОС_МУ.Субконто2
	|                 КОГДА РезПереоценкиОС_МУ.Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА 
	|                       ВыбытиеОС_ОС.ОсновноеСредство = РезПереоценкиОС_МУ.Субконто3
	|                 КОГДА РезПереоценкиОС_МУ.Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА 
	|                       ВыбытиеОС_ОС.ОсновноеСредство = РезПереоценкиОС_МУ.Субконто4
	|                 ИНАЧЕ ЛОЖЬ
	|          КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовУчета),
	|				,
	|				Организация = &Организация
	|                   И ВЫБОР КОГДА Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто1 В (&СписокОС)
	|                           КОГДА Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто2 В (&СписокОС)
	|                           КОГДА Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто3 В (&СписокОС)
	|                           КОГДА Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто4 В (&СписокОС)
	|                     ИНАЧЕ ЛОЖЬ
	|                     КОНЕЦ
	|					) КАК СтоимостьОС_МУ
	|		ПО (ВЫБОР КОГДА СтоимостьОС_МУ.Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|						ВыбытиеОС_ОС.ОсновноеСредство = СтоимостьОС_МУ.Субконто1
	|                 КОГДА СтоимостьОС_МУ.Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                       ВыбытиеОС_ОС.ОсновноеСредство = СтоимостьОС_МУ.Субконто2
	|                 КОГДА СтоимостьОС_МУ.Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                       ВыбытиеОС_ОС.ОсновноеСредство = СтоимостьОС_МУ.Субконто3
	|                 КОГДА СтоимостьОС_МУ.Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                       ВыбытиеОС_ОС.ОсновноеСредство = СтоимостьОС_МУ.Субконто4
	|                 ИНАЧЕ ЛОЖЬ
	|           КОНЕЦ)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В (&МассивСчетовАмортизации),
	|				,
	|				Организация = &Организация
	|                   И ВЫБОР КОГДА Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто1 В (&СписокОС)
	|                           КОГДА Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто2 В (&СписокОС)
	|                           КОГДА Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто3 В (&СписокОС)
	|                           КОГДА Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                                 Субконто4 В (&СписокОС)
	|                     ИНАЧЕ ЛОЖЬ
	|                     КОНЕЦ
	|) КАК АмортизацияОС_МУ
	|		ПО (ВЫБОР КОГДА АмортизацияОС_МУ.Субконто1 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|						ВыбытиеОС_ОС.ОсновноеСредство = АмортизацияОС_МУ.Субконто1
	|                 КОГДА АмортизацияОС_МУ.Субконто2 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                       ВыбытиеОС_ОС.ОсновноеСредство = АмортизацияОС_МУ.Субконто2
	|                 КОГДА АмортизацияОС_МУ.Субконто3 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                       ВыбытиеОС_ОС.ОсновноеСредство = АмортизацияОС_МУ.Субконто3
	|                 КОГДА АмортизацияОС_МУ.Субконто4 ССЫЛКА Справочник."+ИмяСправочникаОсновныеСредства+" ТОГДА
	|                       ВыбытиеОС_ОС.ОсновноеСредство = АмортизацияОС_МУ.Субконто4
	|                 ИНАЧЕ ЛОЖЬ
	|           КОНЕЦ)
	// Адаптация для ERP. Конец. 18.03.2014}}
	|ГДЕ
	|	ВыбытиеОС_ОС.Ссылка = &Ссылка 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПараметров
	|" + ?(ЭтоПеревод, ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКлассовВНА_ПустаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКлассовВНА_НеПустаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МоделиУчетаКлассов", "");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоОС = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ОС", ТаблицаПоОС);
	
	Возврат СтруктураТаблиц;

	
КонецФункции // ПодготовитьТаблицуБДДС()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют,ИсторическиеКурсы, Отказ, Заголовок)
	
	ДатаДока       = СтруктураШапкиДокумента.Дата;
	ТекОрганизация = СтруктураШапкиДокумента.Организация;
	ТаблицаДанных  = СтруктураТаблиц.ОС;
	
	НаборЗаписей_МУ 	   = Движения.бит_Дополнительный_2;
	НаборЗаписей_События   = Движения.бит_му_СобытияОС;
	ТаблицаЗаписей_События = НаборЗаписей_События.Выгрузить();
	ТаблицаЗаписей_События.Очистить();
	
	НаборЗаписей_Состояние   = Движения.бит_му_СостоянияОС; 
	ТаблицаЗаписей_Состояние = НаборЗаписей_Состояние.Выгрузить();
	ТаблицаЗаписей_Состояние.Очистить();
	
	// Выполним движения.
	ВыполнитьДвижения(СтруктураШапкиДокумента
					 ,ТаблицаДанных
					 ,СтруктураКурсыВалют
					 ,ИсторическиеКурсы
					 ,НаборЗаписей_МУ
					 ,ТаблицаЗаписей_События
					 ,ТаблицаЗаписей_Состояние);
					 
	//Начало_бит_Магомедов_31.07.2012 
	//Удаляем строки с уже переведенными ОС
	МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("Переведено",Истина));
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		ТаблицаДанных.Удалить(ТекСтрока);
	КонецЦикла;
	//Конец_бит_Магомедов_31.07.2012	 
					 
	// Выполним движения по регистру параметров ОС.
	ВыполнитьДвиженияПоРегиструПараметровОС(СтруктураШапкиДокумента, ТаблицаДанных);
	
	// Определим событие ОС.
	Событие = ПолучитьСобытиеОС(СтруктураШапкиДокумента.ВидДвижения);
	
	// Движения по регистру сведений "бит_му_СобытияОС".
	ТаблицаЗаписей_События.ЗаполнитьЗначения(ДатаДока	   , "Период");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(Истина		   , "Активность");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(ТекОрганизация, "Организация");
	ТаблицаЗаписей_События.ЗаполнитьЗначения(Событие	   , "Событие");
	
	НаборЗаписей_События.Загрузить(ТаблицаЗаписей_События);
	
	// Движения по регистру сведений "бит_му_СостоянияОС".
	Состояние = Перечисления.бит_му_СостоянияОС.СнятоСУчета;
	
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(Истина		 , "Активность");
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(ТекОрганизация, "Организация");
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(Состояние	 , "Состояние");
	ТаблицаЗаписей_Состояние.ЗаполнитьЗначения(ДатаДока		 , "ДатаСостояния");
	
	НаборЗаписей_Состояние.Загрузить(ТаблицаЗаписей_Состояние);
	
	// Движения по регистру накопления "бит_му_ВыбытиеОС".
	ВыполнитьДвиженияПоРегиструВыбытиеОС(СтруктураШапкиДокумента, ТаблицаДанных, СтруктураКурсыВалют);
	
	//Начало_бит_Магомедов_02.08.2012 	
	бит_му_ВыполнитьДвиженияПоРегиструКомплектацияОС(СтруктураШапкиДокумента, ТаблицаДанных, СтруктураКурсыВалют);	
	//Конец_бит_Магомедов_02.08.2012 
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура выполняет движения.
// 
// Параметры: 
//  СтруктураШапкиДокумента  - Структура.
//  ТаблицаДанных			 - ТаблицаЗначений.
//  СтруктураКурсыВалют      - Структура.
//  НаборЗаписей_МУ			 - РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  ТаблицаЗаписей_События   - ТаблицаЗначений.
//  ТаблицаЗаписей_Состояние - ТаблицаЗначений.
// 
Процедура ВыполнитьДвижения(СтруктураШапкиДокумента
						   ,ТаблицаДанных
						   ,СтруктураКурсыВалют
						   ,ИсторическиеКурсы
						   ,НаборЗаписей_МУ
						   ,ТаблицаЗаписей_События
						   ,ТаблицаЗаписей_Состояние)

	МенеджерПеречисления = Перечисления.бит_му_ВидыДвиженияВыбытия;
	ЭтоВыбытие 			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.Выбытие);
	ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
	ЭтоПродажа			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.Продажа);

	ЭтоОС   = (СтруктураШапкиДокумента.ВидОперации = Перечисления.бит_му_ВидыОперацийВыбытиеОС.ОсновныеСредства);
	ТекстОС = ?(ЭтоОС, "ОС", "ИС");

	МассивВНА = Новый Массив;

	Если ЭтоОС Тогда
		
		// Получим массив ОС по которым необходимо начислить амортизацию за месяц выбытия.
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			
			// Начисление амортизации за месяц выбытия.
			Если СтрокаТаблицы.НачислятьАмортизациюЗаМесяцВыбытия Тогда
				
				Если Не (СтрокаТаблицы.Переведено 
					И (ЭтоВыбытие Или ЭтоПродажа)) Тогда
					
					МассивВНА.Добавить(СтрокаТаблицы.ОсновноеСредство);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Начало_бит_Магомедов_03.08.2012 
	//проверим наличие начисленной амортизации за месяц выбытия
	бит_му_НайтиЗадвоенныеНачисления(МассивВНА);
	//Конец_бит_Магомедов_03.08.2012 	

	ВыполнитьРасчетАмортизации = ?(МассивВНА.Количество() = 0, Ложь, Истина);

	Если ВыполнитьРасчетАмортизации Тогда
		
		// Выполним расчет амортизации.
		ПараметрыОС = бит_му_ВНА.ВыполнитьРасчетАмортизации(МассивВНА
														,СтруктураШапкиДокумента.Организация
														//Начало_бит_Магомедов_02.08.2012
														//,МоментВремени()
														//,Истина);
													    ,Новый Граница(Дата,ВидГраницы.Включая) 
													    ,ЛОЖЬ);//НЕ выводим сообщения 
														//Конец_бит_Магомедов_30.08.2012 
														
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Начисление амортизации за месяц выбытия.
		Если ЭтоОС И ВыполнитьРасчетАмортизации Тогда
			
			// Получим результат расчета амортизации.
			СтрокаПараметров = ПараметрыОС[СтрокаТаблицы.ОсновноеСредство];
			
			Если Не СтрокаПараметров = Неопределено Тогда
				
				СуммаАмортизацииОбщая       = СтрокаПараметров.СуммаАмортизации;
				СуммаАмортизацииНачисленная = 0;
				
				СтруктураАмортизации = Новый Структура("СуммаРегл, СуммаУпр", 0, 0);
				
				ТаблицаСпособов = СтрокаТаблицы.СпособОтраженияРасходовПоАмортизации.Способы;
				
				Ном = 1;
				КоличествоСпособов = ТаблицаСпособов.Количество();
				
				Для Каждого СтрокаТаблицыСпособов Из ТаблицаСпособов Цикл
					
					// Распределяем согласно коэффициентам способа отражения расходов.
					СуммаАмортизации 			= Окр(СуммаАмортизацииОбщая * СтрокаТаблицыСпособов.Коэффициент, 2);
					СуммаАмортизацииНачисленная = СуммаАмортизацииНачисленная + СуммаАмортизации;
					
					// Убираем ошибки округления.
					Если Ном = КоличествоСпособов Тогда
						СуммаАмортизации = СуммаАмортизации + СуммаАмортизацииОбщая - СуммаАмортизацииНачисленная;
					КонецЕсли;
					
					// ДТ СчетЗатрат КТ СчетНачисленияАмортизации СуммаАмортизации.
					СоздатьЗаписьПоНачисленнойАмортизации(СтруктураШапкиДокумента
														, НаборЗаписей_МУ
														, СтрокаТаблицыСпособов
														, СтрокаТаблицы
														, ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
														, СуммаАмортизации
														, СтруктураАмортизации);
					Ном = Ном + 1;
					
				КонецЦикла;
				
				// Изменим суммовые показатели ОС.
				СтрокаТаблицы.ОстСтоимость     = СтрокаТаблицы.ОстСтоимость - Окр(СуммаАмортизацииОбщая, 2);
				СтрокаТаблицы.ОстСтоимостьРегл = СтрокаТаблицы.ОстСтоимостьРегл - СтруктураАмортизации.СуммаРегл;
				СтрокаТаблицы.ОстСтоимостьУпр  = СтрокаТаблицы.ОстСтоимостьУпр - СтруктураАмортизации.СуммаУпр;
				// Амортизация
				СтрокаТаблицы.Амортизация     = СтрокаТаблицы.Амортизация  + СуммаАмортизацииОбщая;
				СтрокаТаблицы.АмортизацияРегл = СтрокаТаблицы.АмортизацияРегл  + СтруктураАмортизации.СуммаРегл;
				СтрокаТаблицы.АмортизацияУпр  = СтрокаТаблицы.АмортизацияУпр  + СтруктураАмортизации.СуммаУпр;
				
			КонецЕсли; // Если Не СтрокаПараметров = Неопределено Тогда.
			
		КонецЕсли; // Если ЭтоОС И ВыполнитьРасчетАмортизации Тогда.
		
		Если Не СтрокаТаблицы.Переведено Тогда
			
			СодержаниеПроводки = НСтр("ru='Списание обесценения %1'");
			СодержаниеПроводки = СтрШаблон(СодержаниеПроводки, ТекстОС);
			
			// ДТ СчетСниженияСтоимости КТ ОсновнойСчетУчета СуммаОбесценения.
			//Начало_бит_Магомедов_31.07.2012 
			//СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
			//								,НаборЗаписей_МУ
			//								,СтрокаТаблицы
			//								,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//								,СтрокаТаблицы.СуммаОбесценения
			//								,СодержаниеПроводки);
			СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
											,НаборЗаписей_МУ
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СтрокаТаблицы.СуммаОбесценения
											,"Списание накопленного убытка"
											,СтрокаТаблицы.СчетСниженияСтоимости
											,СтрокаТаблицы.СчетВыбытия);
			//Конец_бит_Магомедов_31.07.2012 			
			
			СодержаниеПроводки = НСтр("ru='Списание амортизации %1'");	
			СодержаниеПроводки = СтрШаблон(СодержаниеПроводки, ТекстОС);
			
			// ДТ СчетНачисленияАмортизации КТ ОсновнойСчетУчета Амортизация.
			//Начало_бит_Магомедов_31.07.2012 
			//СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
			//								,НаборЗаписей_МУ
			//								,СтрокаТаблицы
			//								,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//								,СтрокаТаблицы.Амортизация
			//								,СодержаниеПроводки + ТекстОС);
			СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
											,НаборЗаписей_МУ
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СтрокаТаблицы.Амортизация
											,"Списание накопленной амортизации"
											,СтрокаТаблицы.СчетНачисленияАмортизации
										  	,СтрокаТаблицы.СчетВыбытия);
			//Конец_бит_Магомедов_31.07.2012 
			
		КонецЕсли;
		
		Если ЭтоПеревод Тогда
			
			СодержаниеПроводки = НСтр("ru='Перевод %1 в предназначенные для продажи'");
			СодержаниеПроводки = СтрШаблон(СодержаниеПроводки,ТекстОС);
			// ДТ СчетУчетаДляПродажи КТ ОсновнойСчетУчета ОстСтоимость.
			//Начало_бит_Магомедов_31.07.2012 
			//СоздатьЗаписьПоПереводуОСВПредназначенныеДляПродажи(СтруктураШапкиДокумента
			//												,НаборЗаписей_МУ
			//												,СтрокаТаблицы
			//												,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//												,СтрокаТаблицы.ОстСтоимость
			//												,СодержаниеПроводки);
															   
			СуммаПервоначальнойСтоимости = СтрокаТаблицы.Амортизация + СтрокаТаблицы.ОстСтоимость + СтрокаТаблицы.СуммаОбесценения;
			СоздатьЗаписьПоПереводуОСВПредназначенныеДляПродажи(СтруктураШапкиДокумента
															   ,НаборЗаписей_МУ
															   ,СтрокаТаблицы
															   ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
															   ,СуммаПервоначальнойСтоимости
															   ,"Списание первоначальной стоимости ОС"
															   ,СтрокаТаблицы.СчетВыбытия
										  					   ,СтрокаТаблицы.ОсновнойСчетУчета);
			
			// ++ БоровинскаяОА (СофтЛаб) 24.07.19 (#3407)
			// закомментировала двойное создание проводки Списания первоначальной стоимости
			//СоздатьЗаписьПоПереводуОСВПредназначенныеДляПродажи(СтруктураШапкиДокумента
			//												,НаборЗаписей_МУ
			//												,СтрокаТаблицы
			//												,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//											   ,СуммаПервоначальнойСтоимости
			//											   ,"Списание первоначальной стоимости ОС"
			//											   ,СтрокаТаблицы.СчетВыбытия
			//						  					   ,СтрокаТаблицы.ОсновнойСчетУчета);
			// -- БоровинскаяОА (СофтЛаб) 24.07.19 (#3407)
			//Конец_бит_Магомедов_31.07.2012 
			
			СодержаниеПроводки = НСтр("ru='Перевод резерва %1'");
			СодержаниеПроводки = СтрШаблон(СодержаниеПроводки,ТекстОС);												   
			// ДТ ОсновнойСчетРезерваПереоценки КТ СчетРезерваПереоценкиДляПродажи СуммаРезерваПереоценки.
			СоздатьЗаписьПоПереводуРезерваОС(СтруктураШапкиДокумента
											,НаборЗаписей_МУ
											,СтрокаТаблицы
											,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
											,СтрокаТаблицы.СуммаРезерваПереоценки
											,СодержаниеПроводки);
			
		Иначе
			
			ТекстПродажа = НСтр("ru='Продажа '");
			ТекстВыбытие = НСтр("ru='Выбытие '");
			ТекстДляПродажи = НСтр("ru=' предназначенных для продажи'");
			
			ТекстВыбытие = ?(ЭтоПродажа, ТекстПродажа, ТекстВыбытие) + ТекстОС + ?(СтрокаТаблицы.Переведено,ТекстДляПродажи,"");
			
			// ДТ СчетПрочихРасходов КТ ОсновнойСчетУчета ОстСтоимость.
			// ДТ СчетПрочихРасходов КТ ОсновнойСчетУчета ОстСтоимость
			//Начало_бит_Магомедов_31.07.2012 				   
			//СоздатьЗаписьПоВыбытиюОСПредназначенныхДляПродажи(СтруктураШапкиДокумента
			//												,НаборЗаписей_МУ
			//												,СтрокаТаблицы
			//												,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
			//												,СтрокаТаблицы.ОстСтоимость
			//												,ТекстВыбытие);
			
			Если НЕ СтрокаТаблицы.Переведено Тогда 
				// ДТ СчетВыбытия КТ ОсновнойСчетУчета Первоначальная стоимость
				СуммаПервоначальнойСтоимости = СтрокаТаблицы.Амортизация + СтрокаТаблицы.ОстСтоимость + СтрокаТаблицы.СуммаОбесценения;
				СоздатьЗаписьПоВыбытиюОСПредназначенныхДляПродажи(СтруктураШапкиДокумента
																 ,НаборЗаписей_МУ
																 ,СтрокаТаблицы
																 ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
																 ,СуммаПервоначальнойСтоимости
																 ,"Списание первоначальной стоимости ОС"
																 ,СтрокаТаблицы.СчетВыбытия
											  					 ,СтрокаТаблицы.ОсновнойСчетУчета);
			КонецЕсли; //конец если не активы для продажи
			// ДТ СчетРасходов КТ СчетВыбытия Остаточная стоимость
			бит_му_СоздатьЗаписьПоВыбытиюОСПредназначенныхДляПродажиОстСтоимость(СтруктураШапкиДокумента
															 ,НаборЗаписей_МУ
															 ,СтрокаТаблицы
															 ,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
															 ,СтрокаТаблицы.ОстСтоимость
															 ,"Списание остаточной стоимости ОС"
															 ,СтрокаТаблицы.СчетПрочихРасходов
										                     ,СтрокаТаблицы.СчетВыбытия);												 
			//Конец_бит_Магомедов_31.07.2012	
															
			СодержаниеПроводки = НСтр("ru='Списание резерва %1'");
			СодержаниеПроводки = СтрШаблон(СодержаниеПроводки,ТекстОС);												 
			// ДТ ОсновнойСчетРезерваПереоценки КТ СчетНРП СуммаРезерваПереоценки.
			СоздатьЗаписьПоСписаниюРезерва(СтруктураШапкиДокумента
										,НаборЗаписей_МУ
										,СтрокаТаблицы
										,ИсторическиеКурсы[СтрокаТаблицы.ОсновноеСредство]
										,СтрокаТаблицы.СуммаРезерваПереоценки
										,СодержаниеПроводки);
			
			Если ЭтоПродажа Тогда
				
				СодержаниеПроводки = НСтр("ru='Отражение дохода от продажи %1'");
				СодержаниеПроводки = СтрШаблон(СодержаниеПроводки,ТекстОС);
				// ДТ СчетВзаиморасчетов КТ СчетПрочихДоходов СуммаПродажи.
				СоздатьЗаписьПоОтражениюДоходаОтПродажи(СтруктураШапкиДокумента
													,НаборЗаписей_МУ
													,СтрокаТаблицы
													,СтруктураКурсыВалют
													,СтрокаТаблицы.СуммаПродажи
													,СодержаниеПроводки);
													
				СодержаниеПроводки = НСтр("ru='Отражение налога от продажи %1'");
				СодержаниеПроводки = СтрШаблон(СодержаниеПроводки,ТекстОС);									
				// ДТ СчетПрочихРасходов КТ СчетНДС СуммаНДС.
				СоздатьЗаписьПоОтражениюНалогаОтПродажи(СтруктураШапкиДокумента
													,НаборЗаписей_МУ
													,СтрокаТаблицы
													,СтруктураКурсыВалют
													,СтрокаТаблицы.СуммаНДС
													,СодержаниеПроводки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Начало_бит_Магомедов_31.07.2012 
		//зполняем вид движения - Корректировка МСФО
		Для Каждого ТекСтрока Из НаборЗаписей_МУ Цикл
			ТекСтрока.ВидДвиженияМСФО = Перечисления.БИТ_ВидыДвиженияМСФО.КорректировкаМСФО;
		КонецЦикла;		
		//Конец_бит_Магомедов_31.07.2012 
		
		// Добавим событие по ОС.
		ЗаписьСобытие = ТаблицаЗаписей_События.Добавить();
		ЗаписьСобытие.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		
		// Если ранне не было переведено, тогда
		Если Не СтрокаТаблицы.Переведено Тогда
			
			// Добавим состояние по ОС.
			ЗаписьСостояние = ТаблицаЗаписей_Состояние.Добавить();
			ЗаписьСостояние.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
			
		КонецЕсли;
		
	КонецЦикла; // Обход таблицы ОС.
				   
КонецПроцедуры // ВыполнитьДвижения()

// Функция получает структуру курсов валют.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  Отказ					- Булево.
//  Заголовок				- Строка.
// 
// Возвращаемое значение:
//  СтруктураКурсыВалют - Структура.
// 
Функция СтруктураКурсовВалют(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ВидыКурсов = Новый Структура("Упр, Регл, МУ, Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект
																			  ,СтруктураШапкиДокумента.Дата
																			  ,ВидыКурсов);
	
	// Получим валюту международного учета.
	СтрКурсов = СтруктураКурсыВалют.МУ;
	мВалютаМеждУчета = СтрКурсов.Валюта;
	
	Если Не ЗначениеЗаполнено(мВалютаМеждУчета) Тогда
		
		ТекстСообщения = НСтр("ru='Для организации ""%1"" не указана валюта международного учета'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,СтруктураШапкиДокумента.Организация);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,Отказ);
		
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураКурсыВалют;
	
КонецФункции // СтруктураКурсовВалют()

Функция СтруктураИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, Период, СтруктураКурсыВалют)
	
	ИсторическиеКурсы = бит_му_ВНА.ПолучитьСтруктуруИсторическихКурсов(СтруктураШапкиДокумента, МассивОС, Период, СтруктураКурсыВалют);	
	
	Для Каждого ТекОС Из ИсторическиеКурсы Цикл
		ТекОС.Значение.Документ = ТекОС.Значение.МУ;
	КонецЦикла;
	
	Возврат ИсторическиеКурсы;
	
КонецФункции

// Функция получает событие ОС.
// 
// Параметры:
//  ТекВидДвижения - ПеречислениеСсылка.бит_му_ВидыДвиженияВыбытия.
// 
// Возвращаемое значение:
//  Событие - ПеречислениеСсылка.бит_му_СобытияОС.
// 
Функция ПолучитьСобытиеОС(ТекВидДвижения)
	
	ВидыДвижений = Перечисления.бит_му_ВидыДвиженияВыбытия;
	
	Если ТекВидДвижения = ВидыДвижений.ПереводВПредназначенныеДляПродажи Тогда
		Событие = Перечисления.бит_му_СобытияОС.Перевод;
		
	ИначеЕсли ТекВидДвижения = ВидыДвижений.Выбытие Тогда
		Событие = Перечисления.бит_му_СобытияОС.Выбытие;
	Иначе
		Событие = Перечисления.бит_му_СобытияОС.Продажа;
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции // ПолучитьСобытиеОС()

#КонецОбласти

#Область ПроцедурыДляДобавленияДвиженийПриПроведенииДокумента

// Процедура формирует движения по параметрам ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаДанных			- ТаблицаЗначений.
// 
Процедура ВыполнитьДвиженияПоРегиструПараметровОС(СтруктураШапкиДокумента, ТаблицаДанных)
	
	МенеджерПеречисления = Перечисления.бит_му_ВидыДвиженияВыбытия;
	ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
	МенеджерПВХ 		 = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА;
	
	// Движения по регистру сведений "бит_му_ПараметрыОС".
	НаборЗаписей_Параметры = Движения.бит_му_ПараметрыОС;
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить("НачислятьАмортизацию_ОС", МенеджерПВХ.НачислятьАмортизацию_ОС);
	
	Если ЭтоПеревод Тогда
		ВидыПараметров.Вставить("СчетУчета_ОС"			  , МенеджерПВХ.СчетУчета_ОС);
		ВидыПараметров.Вставить("СчетРезерваПереоценки_ОС", МенеджерПВХ.СчетРезерваПереоценки_ОС);
	КонецЕсли;
	
	// Выполним запись параметров ОС.
	бит_му_ВНА.ЗаписатьПараметрыВНА(НаборЗаписей_Параметры, СтруктураШапкиДокумента, ТаблицаДанных, ВидыПараметров, "ОС");
	
КонецПроцедуры // ВыполнитьДвиженияПоРегиструПараметровОС()

// Процедура формирует проводку по начисленной амортизации ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицыСпособов	- СтрокаТаблицыЗначений.
//  СтрокаТаблицыДанных		- СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаАмортизации		- Число.
// 
Процедура СоздатьЗаписьПоНачисленнойАмортизации(СтруктураШапкиДокумента
											   ,НаборЗаписей
											   ,СтрокаТаблицыСпособов
											   ,СтрокаТаблицыДанных
											   ,СтруктураКурсыВалют
											   ,СуммаАмортизации
											   ,СтруктураАмортизации)
	
	Если СуммаАмортизации = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запись = НаборЗаписей.Добавить();
	
	СодержаниеПроводки = НСтр("ru='Начисление амортизации ОС'");
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      мВалютаМеждУчета);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицыСпособов.СчетЗатрат);
	СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицыДанных.СчетНачисленияАмортизации);
	СтруктураПараметров.Вставить("Сумма",       СуммаАмортизации);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеПроводки);
											   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицыСпособов,"Субконто",,мКоличествоСубконтоМУ);
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицыДанных,,"СНА_Субконто",мКоличествоСубконтоМУ);
	
	//Начало_бит_Магомедов_31.07.2012 
	Если ТипЗнч(СтрокаТаблицыСпособов.Субконто1) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда 
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 1, СтрокаТаблицыДанных.ОсновноеСредство.Объект);
	КонецЕсли;
	//Конец_бит_Магомедов_31.07.2012 
	
	//ОК Калинин М. 290413	
		МенеджерПеречисления = Перечисления.бит_му_ВидыДвиженияВыбытия;
		ЭтоПеревод 			 = (СтруктураШапкиДокумента.ВидДвижения = МенеджерПеречисления.ПереводВПредназначенныеДляПродажи);
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Функции", СтрокаТаблицыДанных[?(ЭтоПеревод, "СРПП_Субконто2", "СПР_Субконто2")]);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Периоды", СтрокаТаблицыДанных[?(ЭтоПеревод, "СРПП_Субконто3", "СПР_Субконто3")]);
	//ОК Калинин М.
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
	СтруктураАмортизации.Вставить("СуммаРегл", СтруктураАмортизации.СуммаРегл + Запись.СуммаРегл);
	СтруктураАмортизации.Вставить("СуммаУпр" , СтруктураАмортизации.СуммаУпр + Запись.СуммаУпр);
	
КонецПроцедуры // СоздатьЗаписьПоНачисленнойАмортизации()

// Процедура формирует проводку по списанию обесценения по ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаОбесценения		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюОбесценения(СтруктураШапкиДокумента
											,НаборЗаписей
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СуммаОбесценения
											//Начало_бит_Магомедов_31.07.2012 
											//,СодержаниеДвижения)
											,СодержаниеДвижения
											,СчетДт
											,СчетКт)
											//Начало_бит_Магомедов_31.07.2012 
	Если СуммаОбесценения = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      мВалютаМеждУчета);
	//Начало_бит_Магомедов_31.07.2012
	//СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетСниженияСтоимости);
	//СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.ОсновнойСчетУчета);
    СтруктураПараметров.Вставить("СчетДт",      СчетДт);
	СтруктураПараметров.Вставить("СчетКт",      СчетКт);
	//Конец_бит_Магомедов_31.07.2012
	СтруктураПараметров.Вставить("Сумма",       СуммаОбесценения);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										                       										  
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"ССС_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюОбесценения()

// Процедура формирует проводку по списанию амортизации по ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаАмортизации		- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюАмортизации(СтруктураШапкиДокумента
											,НаборЗаписей
											,СтрокаТаблицы
											,СтруктураКурсыВалют
											,СуммаАмортизации
											//Начало_бит_Магомедов_31.07.2012 
											//,СодержаниеДвижения)
											,СодержаниеДвижения
											,СчетДт
											,СчетКт)
											//Конец_бит_Магомедов_31.07.2012 											
	Если СуммаАмортизации = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаАмортизации = Формат(СуммаАмортизации, "ЧЦ=15; ЧДЦ=2");
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      мВалютаМеждУчета);
	//Начало_бит_Магомедов_31.07.2012 
	//СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетНачисленияАмортизации);
	//СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.ОсновнойСчетУчета);
    СтруктураПараметров.Вставить("СчетДт",      СчетДт);
	СтруктураПараметров.Вставить("СчетКт",      СчетКт);
	//Конец_бит_Магомедов_31.07.2012
	СтруктураПараметров.Вставить("Сумма",       СуммаАмортизации);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
							  										  
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СНА_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	// бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	Запись.СуммаМУ   = СтрокаТаблицы.Амортизация;
	Запись.СуммаРегл = СтрокаТаблицы.АмортизацияРегл;
	Запись.СуммаУпр  = СтрокаТаблицы.АмортизацияУпр;
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюАмортизации()

// Процедура формирует проводку по переводу ос в предназначенные для продажи.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  Стоимость				- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоПереводуОСВПредназначенныеДляПродажи(СтруктураШапкиДокумента
														     ,НаборЗаписей
														     ,СтрокаТаблицы
														     ,СтруктураКурсыВалют
														     ,Стоимость
															 //Начало_бит_Магомедов_31.07.2012 
														     //,СодержаниеДвижения)
														     ,СодержаниеДвижения
															 ,СчетДт
															 ,СчетКт)
															 //Конец_бит_Магомедов_31.07.2012 
	Если Стоимость = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      мВалютаМеждУчета);
	//Начало_бит_Магомедов_31.07.2012 
	//СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетУчетаДляПродажи);
	//СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.ОсновнойСчетУчета);
    СтруктураПараметров.Вставить("СчетДт",      СчетДт);
	СтруктураПараметров.Вставить("СчетКт",      СчетКт);	
	//Конец_бит_Магомедов_31.07.2012 
	СтруктураПараметров.Вставить("Сумма",       Стоимость);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										                              										  										  
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СУП_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоПереводуОСВПредназначенныеДляПродажи()
 
// Процедура формирует проводку по переводу резерва ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаРезерва			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоПереводуРезерваОС(СтруктураШапкиДокумента
										  ,НаборЗаписей
										  ,СтрокаТаблицы
										  ,СтруктураКурсыВалют
										  ,СуммаРезерва
										  ,СодержаниеДвижения)
	Если СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      мВалютаМеждУчета);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.ОсновнойСчетРезерваПереоценки);
	СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.СчетРезерваПереоценкиДляПродажи);
	СтруктураПараметров.Вставить("Сумма",       СуммаРезерва);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СРП_Субконто","СРПП_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоПереводуРезерваОС()

// Процедура формирует проводку по выбытию ос предназначенных для продажи.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаВыбытия			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоВыбытиюОСПредназначенныхДляПродажи(СтруктураШапкиДокумента
														   ,НаборЗаписей
														   ,СтрокаТаблицы
														   ,СтруктураКурсыВалют
														   ,СуммаВыбытия
														   //Начало_бит_Магомедов_31.07.2012 
														   //,СодержаниеДвижения)
														   ,СодержаниеДвижения
														   ,СчетДт
														   ,СчетКт)
														   //Конец_бит_Магомедов_31.07.2012 
	Если СуммаВыбытия = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      мВалютаМеждУчета);
	//Начало_бит_Магомедов_31.07.2012 
	//СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетПрочихРасходов);
	//СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.ОсновнойСчетУчета);
    СтруктураПараметров.Вставить("СчетДт",      СчетДт);
	СтруктураПараметров.Вставить("СчетКт",      СчетКт);
	//Конец_бит_Магомедов_31.07.2012
	СтруктураПараметров.Вставить("Сумма",       СуммаВыбытия);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
	
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СПР_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СУ_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

	// Выполним валютные пересчеты.
	// бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	//izhtc-Kir 19.11.2015 убрал это по просьбе клиента в КМ 1159250 (
	//Запись.СуммаМУ   = СуммаВыбытия;
	//Запись.СуммаРегл = СтрокаТаблицы.ОстСтоимостьРегл;
	//Запись.СуммаУпр  = СтрокаТаблицы.ОстСтоимостьУпр;
	//izhtc-Kir 19.11.2015 убрал это по просьбе клиента в КМ 1159250 )
	
КонецПроцедуры // СоздатьЗаписьПоВыбытиюОСПредназначенныхДляПродажи()

// Процедура формирует проводку по отражению дохода от продажи ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаПродажи			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоОтражениюДоходаОтПродажи(СтруктураШапкиДокумента
												 ,НаборЗаписей
												 ,СтрокаТаблицы
												 ,СтруктураКурсыВалют
												 ,СуммаПродажи
												 ,СодержаниеДвижения)
	Если СуммаПродажи = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      СтруктураКурсыВалют.Документ.Валюта);
    СтруктураПараметров.Вставить("СчетДт",      СтруктураШапкиДокумента.СчетВзаиморасчетов);
	СтруктураПараметров.Вставить("СчетКт",      СтрокаТаблицы.СчетПрочихДоходов);
	СтруктураПараметров.Вставить("Сумма",       СуммаПродажи);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	Для Ном = 1 По мКоличествоСубконтоМУ Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Ном, СтруктураШапкиДокумента["СубконтоВзаиморасчетов" + Ном]);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Ном, СтрокаТаблицы["СПД_Субконто" + Ном]);
	КонецЦикла;
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоОтражениюДоходаОтПродажи()

// Процедура формирует проводку по отражению налога от продажи ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаНалога				- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоОтражениюНалогаОтПродажи(СтруктураШапкиДокумента
												 ,НаборЗаписей
												 ,СтрокаТаблицы
												 ,СтруктураКурсыВалют
												 ,СуммаНалога
												 ,СодержаниеДвижения)
	Если СуммаНалога = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      СтруктураКурсыВалют.Документ.Валюта);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.СчетНДС);
	СтруктураПараметров.Вставить("СчетКт",      СтруктураШапкиДокумента.СчетНДС);
	СтруктураПараметров.Вставить("Сумма",       СуммаНалога);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	Для Ном = 1 По мКоличествоСубконтоМУ Цикл
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, Ном, СтрокаТаблицы["СубконтоНДС" + Ном]);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, Ном, СтруктураШапкиДокумента["СубконтоНДС" + Ном]);
	КонецЦикла;
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоОтражениюНалогаОтПродажи()

// Процедура формирует проводку по списанию резерва по ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаРезерва			- Число.
//  СодержаниеДвижения		- Строка.
// 
Процедура СоздатьЗаписьПоСписаниюРезерва(СтруктураШапкиДокумента
										,НаборЗаписей
										,СтрокаТаблицы
										,СтруктураКурсыВалют
										,СуммаРезерва
										,СодержаниеДвижения)
	Если СуммаРезерва = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", СтруктураШапкиДокумента.Организация);
	СтруктураПараметров.Вставить("Период",      СтруктураШапкиДокумента.Дата);
	СтруктураПараметров.Вставить("Валюта",      мВалютаМеждУчета);
    СтруктураПараметров.Вставить("СчетДт",      СтрокаТаблицы.ОсновнойСчетРезерваПереоценки);
	СтруктураПараметров.Вставить("СчетКт",      СтруктураШапкиДокумента.СчетНРП);
	СтруктураПараметров.Вставить("Сумма",       СуммаРезерва);
	СтруктураПараметров.Вставить("Содержание",  СодержаниеДвижения);
										   
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт.
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись, СтрокаТаблицы, "СРП_Субконто",, мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СоздатьЗаписьПоСписаниюРезерва()

// Процедура формирует движения по параметрам ОС.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  ТаблицаДанных			- ТаблицаЗначений.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура ВыполнитьДвиженияПоРегиструВыбытиеОС(СтруктураШапкиДокумента, ТаблицаДанных, СтруктураКурсыВалют)
	
	// Проверим, указан ли в документе контрагент.
	Контрагент = Неопределено;
	Для Н = 1 По мКоличествоСубконтоМУ Цикл
		Если ТипЗнч(СтруктураШапкиДокумента["СубконтоВзаиморасчетов" + Н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			Контрагент = СтруктураШапкиДокумента["СубконтоВзаиморасчетов" + Н];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по регистру накопления "бит_му_ВыбытиеОС".
	ТаблицаДвижений = Движения.бит_му_ВыбытиеОС.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого ТекСтр Из ТаблицаДанных Цикл
		
		НоваяЗапись = ТаблицаДвижений.Добавить();
		НоваяЗапись.Период			 = СтруктураШапкиДокумента.Дата;
		НоваяЗапись.Организация 	 = СтруктураШапкиДокумента.Организация;		
		НоваяЗапись.Контрагент 	 	 = Контрагент;		
		НоваяЗапись.ОсновноеСредство = ТекСтр.ОсновноеСредство;
		НоваяЗапись.СебестоимостьМУ  = ТекСтр.ОстСтоимость;
		НоваяЗапись.СтоимостьМУ		 = ТекСтр.СуммаПродажи - ТекСтр.СуммаНДС;
		
		ВыполнитьВалютныеПересчетыЗаписи(СтруктураШапкиДокумента, НоваяЗапись, СтруктураКурсыВалют);
		
	КонецЦикла;
	
	Движения.бит_му_ВыбытиеОС.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_му_ВыбытиеОС.ДобавитьДвижение();
	
КонецПроцедуры // ВыполнитьДвиженияПоРегиструПараметровОС()

#КонецОбласти

#КонецОбласти

//Начало_бит_Магомедов_31.07.2012 
// бит_DKravchenko Процедура формирует проводку по выбытию ос предназначенных для продажи.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура.
//  НаборЗаписей			- РегистрБухгалтерииНаборЗаписей.бит_Дополнительный_2.
//  СтрокаТаблицы           - СтрокаТаблицыЗначений.
//  СтруктураКурсыВалют     - Структура.
//  СуммаВыбытия			- Число.
//  СодержаниеДвижения		- Строка.
//
Процедура бит_му_СоздатьЗаписьПоВыбытиюОСПредназначенныхДляПродажиОстСтоимость(СтруктураШапкиДокумента
														   ,НаборЗаписей
														   ,СтрокаТаблицы
														   ,СтруктураКурсыВалют
														   ,СуммаВыбытия
														   ,СодержаниеДвижения
														   //Начало_бит_Магомедов_31.07.2012 
														   ,СчетДт
														   ,СчетКт)
														   //Конец_бит_Магомедов_31.07.2012 
	Если СуммаВыбытия = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запись = НаборЗаписей.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										  ,СтруктураШапкиДокумента.Организация
										  ,СтруктураШапкиДокумента.Дата
										  ,мВалютаМеждУчета
										  //Начало_бит_Магомедов_31.07.2012 
										  //,СтрокаТаблицы.СчетПрочихРасходов
										  //,СтрокаТаблицы.ОсновнойСчетУчета
                                          ,СчетДт
										  ,СчетКт
										  //Конец_бит_Магомедов_31.07.2012 
										  ,СуммаВыбытия
										  ,СодержаниеДвижения);

	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	//бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СПР_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	бит_му_ОбщегоНазначения.ЗаполнитьАналитикуДт_Кт(Запись,СтрокаТаблицы,"СПР_Субконто","СУ_Субконто",мКоличествоСубконтоМУ);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
		
КонецПроцедуры // СоздатьЗаписьПоВыбытиюОСПредназначенныхДляПродажи()

Процедура бит_му_ВыполнитьДвиженияПоРегиструКомплектацияОС(СтруктураШапкиДокумента, ТаблицаДанных, СтруктураКурсыВалют)
	
	// Движения по регистру накопления "бит_му_КомплектацияОС".
	ТаблицаДвижений = Движения.бит_му_КомплектацияОС.Выгрузить();
	ТаблицаДвижений.Очистить();
	//БИТ Тртилек 14.08.2012 выполним проверку на принятие ОС к учету с Консолидированным видом операции
	МассивОС = ТаблицаДанных.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_му_КомплектацияОС.ОС,
	               |	бит_му_КомплектацияОС.Регистратор
	               |ПОМЕСТИТЬ ВТОСДокументы
	               |ИЗ
	               |	РегистрНакопления.бит_му_КомплектацияОС КАК бит_му_КомплектацияОС
	               |ГДЕ
	               |	бит_му_КомплектацияОС.ОС В(&МассивОС)
	               |	И бит_му_КомплектацияОС.Регистратор ССЫЛКА Документ.бит_му_ПринятиеКУчетуОС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТОСДокументы.ОС,
	               |	ВТОСДокументы.Регистратор
	               |ИЗ
	               |	ВТОСДокументы КАК ВТОСДокументы
	               |ГДЕ
	               |	(ВТОСДокументы.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ПринятиеКУчетуКонсолидированногоОС)
	               |			ИЛИ ВТОСДокументы.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бит_му_ВидыОперацийПринятиеКУчетуОС.бит_окей_ВводВачальныхОстатковКонсолидированногоОС))";
	Запрос.УстановитьПараметр("МассивОС", МассивОС);
	ТаблицаКомплектации = Запрос.Выполнить().Выгрузить();
	///БИТ Тртилек
	
	Для каждого ТекСтр Из ТаблицаДанных Цикл
		
		//БИТ Тртилек 14.08.2012 если ОС не принято, тогда не заполняем
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ОС", ТекСтр.ОсновноеСредство);
		НайденныеСтроки = ТаблицаКомплектации.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки = Неопределено Тогда
			Продолжить;
		Иначе
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;				
			КонецЕсли;
		КонецЕсли;
		///БИТ Тртилек
		
		СуммаПервоначальнойСтоимости = ТекСтр.Амортизация + ТекСтр.ОстСтоимость + ТекСтр.СуммаОбесценения;
		
		НоваяЗапись = ТаблицаДвижений.Добавить();
		НоваяЗапись.Период			 = СтруктураШапкиДокумента.Дата;
		НоваяЗапись.ВидДвижения      = ВидДвиженияНакопления.Расход;
		НоваяЗапись.ОС               = ТекСтр.ОсновноеСредство;
		//НоваяЗапись.СоставОС         
		//НоваяЗапись.СчетРСБУ
		//НоваяЗапись.АналитикаРСБУ
		НоваяЗапись.Сумма            = СуммаПервоначальнойСтоимости;
		//НоваяЗапись.ДокументРСБУ
		НоваяЗапись.Организация = Организация;		
		//ВыполнитьВалютныеПересчетыЗаписи(СтруктураШапкиДокумента, НоваяЗапись, СтруктураКурсыВалют);
		
	КонецЦикла;
	
	Движения.бит_му_КомплектацияОС.мТаблицаДвижений = ТаблицаДвижений;
	Движения.бит_му_КомплектацияОС.ДобавитьДвижение();
	
КонецПроцедуры

// бит_MZyubin  Осуществляет поиск задвоенных начислений амортизации ОС в текущем периоде
//
Процедура бит_му_НайтиЗадвоенныеНачисления(МассивВНА)
	
	Запрос=новый Запрос;
	запрос.УстановитьПараметр("ДатаНачала"   ,НачалоМесяца(Дата));
	запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(Дата));
	запрос.УстановитьПараметр("МассивВНА"       ,МассивВНА);
	
	
	Запрос.Текст="ВЫБРАТЬ
	             |	ТекДокумент.ОсновноеСредство,
	             |	ТекДокумент.Ссылка
				 //,
				 //|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер, """") КАК ИнвентарныйНомер
	             |ИЗ
	             |	Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК ТекДокумент
				 //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
				 //|				&ДатаОкончания,
				 //|				ОсновноеСредство В
				 //|					(ВЫБРАТЬ
				 //|						бит_му_НачислениеАмортизацииОСОсновныеСредства.ОсновноеСредство
				 //|					ИЗ
				 //|						Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК бит_му_НачислениеАмортизацииОСОсновныеСредства
				 //|					ГДЕ
				 //|						бит_му_НачислениеАмортизацииОСОсновныеСредства.Ссылка = &Ссылка)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
				 //|		ПО ТекДокумент.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	             |ГДЕ
	             |	ТекДокумент.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	             |	И ТекДокумент.Ссылка.Проведен
	           //  |	И ТекДокумент.Ссылка.Ссылка <> &Ссылка
	             |	И ТекДокумент.ОсновноеСредство В
				 |(&МассивВНА)";
				 //|			(ВЫБРАТЬ
				 //|				ТекДокумент.ОсновноеСредство
				 //|			ИЗ
				 //|				Документ.бит_му_НачислениеАмортизацииОС.ОсновныеСредства КАК ТекДокумент
				 //|			ГДЕ
				 //|				ТекДокумент.Ссылка = &Ссылка)";
				 
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//Если ЗначениеЗаполнено(Выборка.ОсновноеСредство) Тогда
		//	ТекстСообщения = "По основному средству инв. № "
		//	+Выборка.ИнвентарныйНомер
		//	+" """
		//	+Выборка.ОсновноеСредство
		//	+""" было проведено начисление амортизации за период: "
		//	+Формат(Дата,"ДФ=MMMM-YYYY")
		//	+". Повторное начисление амортизации невозможно!";
		//	ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
		//КонецЕсли;
		Индекс = МассивВНА.Найти(Выборка.ОсновноеСредство);
		Если Не Индекс = Неопределено Тогда 
			МассивВНА.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // бит_НайтиЗадвоенныеНачисления()

Процедура бит_му_ПроверитьДублиСубконто(СтруктураТаблиц, СтруктураШапкиДокумента, Отказ, Заголовок = "") Экспорт

	ТаблицаОС = СтруктураТаблиц.ОС;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.ОсновнойСчетУчета,
	|	ТаблицаОС.СУ_Субконто1 КАК СУ_Субконто1,
	|	ТаблицаОС.СУ_Субконто2 КАК СУ_Субконто2,
	|	ТаблицаОС.СУ_Субконто3 КАК СУ_Субконто3,
	|	ТаблицаОС.СУ_Субконто4 КАК СУ_Субконто4,
	|	ТаблицаОС.СчетНачисленияАмортизации,
	|	ТаблицаОС.СНА_Субконто1 КАК СНА_Субконто1,
	|	ТаблицаОС.СНА_Субконто2 КАК СНА_Субконто2,
	|	ТаблицаОС.СНА_Субконто3 КАК СНА_Субконто3,
	|	ТаблицаОС.СНА_Субконто4 КАК СНА_Субконто4,
	|	ТаблицаОС.СчетСниженияСтоимости,
	|	ТаблицаОС.ССС_Субконто1 КАК ССС_Субконто1,
	|	ТаблицаОС.ССС_Субконто2 КАК ССС_Субконто2,
	|	ТаблицаОС.ССС_Субконто3 КАК ССС_Субконто3,
	|	ТаблицаОС.ССС_Субконто4 КАК ССС_Субконто4,
	|	ТаблицаОС.ОсновнойСчетРезерваПереоценки,
	|	ТаблицаОС.СРП_Субконто1 КАК СРП_Субконто1,
	|	ТаблицаОС.СРП_Субконто2 КАК СРП_Субконто2,
	|	ТаблицаОС.СРП_Субконто3 КАК СРП_Субконто3,
	|	ТаблицаОС.СРП_Субконто4 КАК СРП_Субконто4
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.НомерСтроки,
	|	Данные.ОсновноеСредство,
	|	Данные.ОсновнойСчетУчета,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СУ_Субконто1) КАК СУ_Субконто1,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СУ_Субконто2) КАК СУ_Субконто2,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СУ_Субконто3) КАК СУ_Субконто3,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СУ_Субконто4) КАК СУ_Субконто4,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СУ_Субконто1) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СУ_Субконто1
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СУ_Субконто2) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СУ_Субконто2
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СУ_Субконто3) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СУ_Субконто3
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СУ_Субконто4) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СУ_Субконто4
	|		КОНЕЦ) КАК СУ_ОбъектОС,
	|	Данные.СчетНачисленияАмортизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СНА_Субконто1) КАК СНА_Субконто1,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СНА_Субконто2) КАК СНА_Субконто2,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СНА_Субконто3) КАК СНА_Субконто3,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СНА_Субконто4) КАК СНА_Субконто4,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СНА_Субконто1) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СНА_Субконто1
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СНА_Субконто2) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СНА_Субконто2
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СНА_Субконто3) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СНА_Субконто3
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СНА_Субконто4) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СНА_Субконто4
	|		КОНЕЦ) КАК СНА_ОбъектОС,
	|	Данные.СчетСниженияСтоимости,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.ССС_Субконто1) КАК ССС_Субконто1,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.ССС_Субконто2) КАК ССС_Субконто2,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.ССС_Субконто3) КАК ССС_Субконто3,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.ССС_Субконто4) КАК ССС_Субконто4,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.ССС_Субконто1) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.ССС_Субконто1
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.ССС_Субконто2) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.ССС_Субконто2
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.ССС_Субконто3) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.ССС_Субконто3
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.ССС_Субконто4) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.ССС_Субконто4
	|		КОНЕЦ) КАК ССС_ОбъектОС,
	|	Данные.ОсновнойСчетРезерваПереоценки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СРП_Субконто1) КАК СРП_Субконто1,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СРП_Субконто2) КАК СРП_Субконто2,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СРП_Субконто3) КАК СРП_Субконто3,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Данные.СРП_Субконто4) КАК СРП_Субконто4,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СРП_Субконто1) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СРП_Субконто1
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СРП_Субконто2) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СРП_Субконто2
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СРП_Субконто3) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СРП_Субконто3
	|			КОГДА ТИПЗНАЧЕНИЯ(Данные.СРП_Субконто4) = ТИП(Справочник.ОбъектыСтроительства)
	|				ТОГДА Данные.СРП_Субконто4
	|		КОНЕЦ) КАК СРП_ОбъектОС
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.НомерСтроки,
	|	Данные.ОсновноеСредство,
	|	Данные.ОсновнойСчетУчета,
	|	Данные.СчетНачисленияАмортизации,
	|	Данные.СчетСниженияСтоимости,
	|	Данные.ОсновнойСчетРезерваПереоценки";
	Запрос.УстановитьПараметр("ТаблицаОС",ТаблицаОС);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		СтрокаТаблицы = Выборка;
		НачалоСообщения = "В строке № "
						+СтрокаТаблицы.НомерСтроки
						+" по основному средству """
						+СтрокаТаблицы.ОсновноеСредство
						+"""";
		
		//счет учета
		Если СтрокаТаблицы.СУ_Субконто1 > 1 ИЛИ СтрокаТаблицы.СУ_Субконто2 > 1 ИЛИ СтрокаТаблицы.СУ_Субконто3 > 1 ИЛИ СтрокаТаблицы.СУ_Субконто4 > 1 Тогда
			
			ТекстСообщения =  НачалоСообщения
							+" обнаружены остатки по нескольким аналитикам на счете """
							+СтрокаТаблицы.ОсновнойСчетУчета
							+"""(счет учета)!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);							   
		ИначеЕсли  ЗначениеЗаполнено(СтрокаТаблицы.СУ_ОбъектОС) И СтрокаТаблицы.СУ_ОбъектОС <> СтрокаТаблицы.ОсновноеСредство.Объект Тогда
					
			ТекстСообщения =  НачалоСообщения
							+" на счете """
							+СтрокаТаблицы.ОсновнойСчетУчета
							+"""(счет учета) обнаружены остатки по объекту """
							+СтрокаТаблицы.СУ_ОбъектОС
							+" не совпадающему с объектом ОС """
							+СтрокаТаблицы.ОсновноеСредство.Объект
							+"""!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
		КонецЕсли; 
		//счет начисления амортизации
		Если СтрокаТаблицы.СНА_Субконто1 > 1 ИЛИ СтрокаТаблицы.СНА_Субконто2 > 1 ИЛИ СтрокаТаблицы.СНА_Субконто3 > 1 ИЛИ СтрокаТаблицы.СНА_Субконто4 > 1 Тогда
			
			ТекстСообщения =  НачалоСообщения
							+" обнаружены остатки по нескольким аналитикам на счете """
							+СтрокаТаблицы.СчетНачисленияАмортизации
							+"""(счет начисления амортизации)!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);							   
			
		ИначеЕсли  ЗначениеЗаполнено(СтрокаТаблицы.СНА_ОбъектОС) И СтрокаТаблицы.СНА_ОбъектОС <> СтрокаТаблицы.ОсновноеСредство.Объект Тогда
					
			ТекстСообщения =  НачалоСообщения
							+" на счете """
							+СтрокаТаблицы.СчетНачисленияАмортизации
							+"""(счет начисления амортизации) обнаружены остатки по объекту """
							+СтрокаТаблицы.СНА_ОбъектОС
							+" не совпадающему с объектом ОС """
							+СтрокаТаблицы.ОсновноеСредство.Объект
							+"""!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
		КонецЕсли;
		//счет СчетСниженияСтоимости
        Если СтрокаТаблицы.ССС_Субконто1 > 1 ИЛИ СтрокаТаблицы.ССС_Субконто2 > 1 ИЛИ СтрокаТаблицы.ССС_Субконто3 > 1 ИЛИ СтрокаТаблицы.ССС_Субконто4 > 1 Тогда
			
			ТекстСообщения =  НачалоСообщения
			+" обнаружены остатки по нескольким аналитикам на счете """
			+СтрокаТаблицы.СчетСниженияСтоимости
			+"""(счет снижения стоимости)!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);							   
			
		ИначеЕсли  ЗначениеЗаполнено(СтрокаТаблицы.ССС_ОбъектОС) И СтрокаТаблицы.ССС_ОбъектОС <> СтрокаТаблицы.ОсновноеСредство.Объект Тогда
					
			ТекстСообщения =  НачалоСообщения
							+" на счете """
							+СтрокаТаблицы.СчетСниженияСтоимости
							+"""(счет снижения стоимости) обнаружены остатки по объекту """
							+СтрокаТаблицы.ССС_ОбъектОС
							+" не совпадающему с объектом ОС """
							+СтрокаТаблицы.ОсновноеСредство.Объект
							+"""!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
		КонецЕсли;
		//счет резерва
		Если СтрокаТаблицы.СРП_Субконто1 > 1 ИЛИ СтрокаТаблицы.СРП_Субконто2 > 1 ИЛИ СтрокаТаблицы.СРП_Субконто3 > 1 ИЛИ СтрокаТаблицы.СРП_Субконто4 > 1 Тогда
			
			ТекстСообщения =  НачалоСообщения
			+" обнаружены остатки по нескольким аналитикам на счете """
			+СтрокаТаблицы.ОсновнойСчетРезерваПереоценки
			+"""(счет резерва переоценки)!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
			
		ИначеЕсли  ЗначениеЗаполнено(СтрокаТаблицы.СРП_ОбъектОС) И СтрокаТаблицы.СРП_ОбъектОС <> СтрокаТаблицы.ОсновноеСредство.Объект Тогда
					
			ТекстСообщения =  НачалоСообщения
							+" на счете """
							+СтрокаТаблицы.ОсновнойСчетРезерваПереоценки
							+"""(счет резерва переоценки) обнаружены остатки по объекту """
							+СтрокаТаблицы.СРП_ОбъектОС
							+" не совпадающему с объектом ОС """
							+СтрокаТаблицы.ОсновноеСредство.Объект
							+"""!";
			
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок,СтатусСообщения.Важное);
			
		КонецЕсли; 
	КонецЦикла;; 


КонецПроцедуры //ПроверитьСтрокуКолонкиОС()

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
