
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокСвойств = Новый Массив;
	СписокСвойств.Добавить("ТолькоПросмотр");
	СписокСвойств.Добавить("СчетЗатрат");
	СписокСвойств.Добавить("СтатьяЗатрат");
	СписокСвойств.Добавить("СпособУчетаНДС");
	СписокСвойств.Добавить("ПодразделениеЗатрат");
	СписокСвойств.Добавить("Организация");
	СписокСвойств.Добавить("НоменклатурнаяГруппа");
	СписокСвойств.Добавить("Номенклатура");
	СписокСвойств.Добавить("ДатаДокумента");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, СтрСоединить(СписокСвойств, ","));
	
	Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		НаименованиеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Наименование");
		ШаблонЗаголовка = НСтр("ru = 'Счета затрат:  %1'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, НаименованиеОбъекта);
	Иначе
		Заголовок = НСтр("ru = 'Счета затрат'");
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	СчетЗатратОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли Модифицированность И НЕ ПеренестиВДокумент Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
	Если ПеренестиВДокумент И НЕ Отказ Тогда
		Отказ = НЕ ПроверитьЗаполнениеНаКлиенте();
	КонецЕсли;
	
	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ПеренестиВДокумент Тогда
		СписокСвойств = Новый Массив;
		СписокСвойств.Добавить("СчетЗатрат");
		СписокСвойств.Добавить("НоменклатурнаяГруппа");
		СписокСвойств.Добавить("СтатьяЗатрат");
		СписокСвойств.Добавить("ПодразделениеЗатрат");
		СписокСвойств.Добавить("СпособУчетаНДС");
		
		Результат = Новый Структура(СтрСоединить(СписокСвойств, ","));
		Для Каждого ИмяРеквизита Из СписокСвойств Цикл
			Результат[ИмяРеквизита] = ?(Элементы[ИмяРеквизита].Видимость, ЭтотОбъект[ИмяРеквизита], Неопределено);
		КонецЦикла;
		ОповеститьОВыборе(Результат);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	СчетЗатратОбработатьИзменение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма, Организация, ДатаДокумента);
		
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, ДатаДокумента);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СчетЗатрат) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Счет затрат'"));
		Поле = "СчетЗатрат";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;
	
	Если РаздельныйУчетНДСНаСчете19 И Элементы.СпособУчетаНДС.Видимость
			И НЕ ЗначениеЗаполнено(СпособУчетаНДС) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Способ учета НДС'"));
		Поле = "СпособУчетаНДС";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура СчетЗатратОбработатьИзменение()
	
	Если Не ЗначениеЗаполнено(СчетЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетЗатрат);
	
	Элементы.НоменклатурнаяГруппа.Видимость = Ложь;
	Элементы.СтатьяЗатрат.Видимость         = Ложь;
	Элементы.ПодразделениеЗатрат.Видимость  = СвойстваСчета.УчетПоПодразделениям;
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
			Элементы.НоменклатурнаяГруппа.Видимость = Не БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
		ИначеЕсли СвойстваСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
			Элементы.СтатьяЗатрат.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
