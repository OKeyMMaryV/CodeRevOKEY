

Перем ТаблицаДвиженийМСФО;  // Хранит движения, которые необходимо оставлять при снятии пометки удаления
Перем ТребуетсяПерезапись Экспорт;  
Перем глРежимЗаписи Экспорт;

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Перем бтСсылкаНаДокументОперация;
	
	Если НЕ ЗначениеЗаполнено(КоличествоСубконтоАксапта) Тогда
		КоличествоСубконтоАксапта = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аксапта 12", "Количество субконто Аксапта", 6);
	КонецЕсли; 
	
	Если Не ДополнительныеСвойства.Свойство("ок_ОперацияБух",	бтСсылкаНаДокументОперация) Тогда 
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			ДополнительныеСвойства.Вставить("ок_ОперацияБух",	Документы.бит_ок_ОперацияАксапты12.ПолучитьСвязаннуюОперациюБУХ(Ссылка));
			бтСсылкаНаДокументОперация = ДополнительныеСвойства.ок_ОперацияБух;
		Иначе
			ДополнительныеСвойства.Вставить("ок_ОперацияБух");
		КонецЕсли;		
	КонецЕсли;	 
	
	СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ОборотыАксапты");
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	ВыполинитьПоискФВБ();
	ВыполинитьПоискИсходногоДокумента();
	ВыполинитьПоискДокументаИсточника();
	
	Если Не ЭтоНовый() Тогда
		Запрос = Новый Запрос("Выбрать Док.ПометкаУдаления, Док.Проведен Из Документ.бит_ок_ОперацияАксапты12 КАК Док Где Док.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий()  Тогда	
			Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда			
				
				Движения.бит_Дополнительный_2.Прочитать();
				ТаблицаДвиженийМСФО = Движения.бит_Дополнительный_2.Выгрузить();
				
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;
	
	глРежимЗаписи = РежимЗаписи;
	
	Если ПометкаУдаления = Истина И ЗначениеЗаполнено(бтСсылкаНаДокументОперация) Тогда
		
		Документ = бтСсылкаНаДокументОперация.ПолучитьОбъект();
		Документ.ПометкаУдаления = Истина;
		ДвиженияОперация = Документ.Движения.Хозрасчетный;
		ДвиженияОперация.Записывать = Истина;
		ДвиженияОперация.Очистить();
		ДвиженияОперация.Записать();
		
		Документ.Записать(РежимЗаписиДокумента.Запись);
		
		бтИсправление = Ложь;
		
	КонецЕсли;	
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		бтИсправление = Ложь;
	КонецЕсли;		
	
	Попытка
		Движения.бит_ОборотыПоБюджетам.ОбменДанными.Загрузка = Истина;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ) 
	
	бтСсылкаНаДокументОперация = ДополнительныеСвойства.ок_ОперацияБух;
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(бтСсылкаНаДокументОперация) И ЭтотОбъект.Проведен Тогда
		
		Документ = бтСсылкаНаДокументОперация.ПолучитьОбъект();
		Документ.ПометкаУдаления = НЕ бтИсправление;
		Если НЕ бтИсправление Тогда
			ДвиженияОперация = Документ.Движения.Хозрасчетный;
			ДвиженияОперация.Записывать = Истина;
			ДвиженияОперация.Очистить();
			ДвиженияОперация.Записать();
		КонецЕсли;
		
		Документ.Записать(РежимЗаписиДокумента.Запись);
		
	ИначеЕсли ЗначениеЗаполнено(бтСсылкаНаДокументОперация) И НЕ ЭтотОбъект.Проведен Тогда
		
		Документ = бтСсылкаНаДокументОперация.ПолучитьОбъект();
		Документ.ПометкаУдаления = НЕ Ссылка.Проведен;
		ДвиженияОперация = Документ.Движения.Хозрасчетный;
		ДвиженияОперация.Записывать = Истина;
		ДвиженияОперация.Очистить();
		ДвиженияОперация.Записать();
		Документ.Записать(РежимЗаписиДокумента.Запись);
		Если ЭтотОбъект.ПометкаУдаления и бтИсправление Тогда
			бтИсправление = Ложь;
			ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаДвиженийМСФО.Количество() Тогда
		
		Движения.бит_Дополнительный_2.Загрузить(ТаблицаДвиженийМСФО);
		Движения.бит_Дополнительный_2.Записывать = Истина;
		Движения.бит_Дополнительный_2.Записать();
		
		ТаблицаДвиженийМСФО.Очистить();
		
	КонецЕсли;              
	
	//бит_ДополнительныеДанныеПоОперациямАксапты
	ВыполнитьДвижениеПоРС_ДополнительныеДанныеПоОперациямАксапты();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ЭтотОбъект.Движения.бит_КонтрольныеЗначенияБюджетов.ДополнительныеСвойства.Вставить("бит_БК_УстановкаСтатусаПередУдалением", Истина);
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	ЭтотОбъект.Движения.бит_КонтрольныеЗначенияБюджетов.ДополнительныеСвойства.Вставить("бит_БК_УстановкаСтатусаПослеПроведения", Истина);
	Движения.бит_Дополнительный_2.Записывать = Истина;
	
	//бит_ок_ОборотыАксапты12
	ВыполнитьДвижениеПоРС_ОборотыАксапты12();
		
КонецПроцедуры

Процедура ВыполнитьДвижениеПоРС_ОборотыАксапты12()
	
	Движения.бит_ок_ОборотыАксапты12.Записывать = Истина;
	Движения.бит_ок_ОборотыАксапты12.Очистить();
	Для Каждого ТекСтрокаОборотыАксапты Из ОборотыАксапты Цикл
		Движение = Движения.бит_ок_ОборотыАксапты12.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаОборотыАксапты);
		
		Движение.Период = Дата;
		Движение.Организация 	= Организация;
		Движение.ТипДокумента 	= ТипДокумента;
		Движение.Ваучер 		= Ваучер;
		Движение.DocumentNum 	= DocumentNum;
		Движение.DocumentDate 	= DocumentDate;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьДвижениеПоРС_ДополнительныеДанныеПоОперациямАксапты()
	
	НаборЗаписей = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	
	НаборЗаписей.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(НомерЗаявки) Тогда
		
		Если НаборЗаписей.Количество() > 0 Тогда
		    НаборЗаписей.Очистить();
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ТекущаяЗапись = НаборЗаписей[0];
		Если ЗначениеЗаполнено(НомерЗаявки)
			И ТекущаяЗапись.НомерЗаявки = НомерЗаявки Тогда
			
			Возврат;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	НаборЗаписей.Очистить();
	Если НЕ Ссылка.ПометкаУдаления 
		И ЗначениеЗаполнено(НомерЗаявки) Тогда
	
		ТекущаяЗапись = НаборЗаписей.Добавить();
	
		ТекущаяЗапись.Документ		= Ссылка;
		ТекущаяЗапись.НомерЗаявки 	= НомерЗаявки;
		//ТекущаяЗапись.Месяц		= НачалоМесяца(DocumentDate);
	
	КонецЕсли; 
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ВыполинитьПоискФВБ()
	
	Если НЕ ЗначениеЗаполнено(E1COrderId)
		И ЗначениеЗаполнено(НомерЗаявки) Тогда
	
		НомерЗаявки = Неопределено;
		
		Если НЕ Ссылка.Пустая() Тогда
		
			НаборЗаписей = РегистрыСведений.бит_ДополнительныеДанныеПоОперациямАксапты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Ссылка);
			
			НаборЗаписей.Прочитать();
			
			Если НЕ ЗначениеЗаполнено(НомерЗаявки) Тогда
				
				Если НаборЗаписей.Количество() > 0 Тогда
				    НаборЗаписей.Очистить();
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(E1COrderId) Тогда
	
		Возврат;
		
	ИначеЕсли E1COrderId = Ссылка.E1COrderId
		И ЗначениеЗаполнено(НомерЗаявки) Тогда
	
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(бит_ФормаВводаБюджета.Ссылка) КАК НомерЗаявки
		|ИЗ
		|	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
		|ГДЕ
		|	бит_ФормаВводаБюджета.Номер = &E1COrderId
		|	И НЕ бит_ФормаВводаБюджета.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("E1COrderId", E1COrderId);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		НомерЗаявки = ВыборкаДетальныеЗаписи.НомерЗаявки;
	Иначе
		НомерЗаявки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполинитьПоискИсходногоДокумента()
	
	Если НЕ ЗначениеЗаполнено(ВаучерИсходногоДокумента)
		И ЗначениеЗаполнено(ВаучерИсходногоДокументаСсылка) Тогда
	
		ВаучерИсходногоДокументаСсылка = Неопределено;
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВаучерИсходногоДокумента) Тогда
	
		Возврат;
		
	ИначеЕсли ВаучерИсходногоДокумента = Ссылка.ВаучерИсходногоДокумента
		И ЗначениеЗаполнено(ВаучерИсходногоДокументаСсылка) Тогда
	
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОперацияАксапты12.Ссылка) КАК ВаучерИсходногоДокументаСсылка
		|ИЗ
		|	Документ.бит_ок_ОперацияАксапты12 КАК ОперацияАксапты12
		|ГДЕ
		|	ОперацияАксапты12.Ваучер = &ВаучерИсходногоДокумента
		|	И НЕ ОперацияАксапты12.ПометкаУдаления
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ОперацияАксапты12.Ссылка) ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ОперацияАксапты.Ссылка)
		|ИЗ
		|	Документ.бит_ок_ОперацияАксапты КАК ОперацияАксапты
		|ГДЕ
		|	ОперацияАксапты.Ваучер = &ВаучерИсходногоДокумента
		|	И НЕ ОперацияАксапты.ПометкаУдаления
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ОперацияАксапты.Ссылка) ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВаучерИсходногоДокумента", ВаучерИсходногоДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ВаучерИсходногоДокументаСсылка = ВыборкаДетальныеЗаписи.ВаучерИсходногоДокументаСсылка;
	Иначе
		ВаучерИсходногоДокументаСсылка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполинитьПоискДокументаИсточника()
	
	Если НЕ ЗначениеЗаполнено(ВаучерДокументаЗакупки)
		И ЗначениеЗаполнено(ВаучерДокументаЗакупкиСсылка) Тогда
	
		ВаучерДокументаЗакупкиСсылка = Неопределено;
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВаучерДокументаЗакупки) Тогда
	
		Возврат;
		
	ИначеЕсли ВаучерДокументаЗакупки = Ссылка.ВаучерДокументаЗакупки
		И ЗначениеЗаполнено(ВаучерДокументаЗакупкиСсылка) Тогда
	
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОперацияАксапты12.Ссылка) КАК ВаучерДокументаЗакупкиСсылка
		|ИЗ
		|	Документ.бит_ок_ОперацияАксапты12 КАК ОперацияАксапты12
		|ГДЕ
		|	ОперацияАксапты12.Ваучер = &ВаучерДокументаЗакупки
		|	И НЕ ОперацияАксапты12.ПометкаУдаления
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ОперацияАксапты12.Ссылка) ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ОперацияАксапты.Ссылка)
		|ИЗ
		|	Документ.бит_ок_ОперацияАксапты КАК ОперацияАксапты
		|ГДЕ
		|	ОперацияАксапты.Ваучер = &ВаучерДокументаЗакупки
		|	И НЕ ОперацияАксапты.ПометкаУдаления
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ОперацияАксапты.Ссылка) ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВаучерДокументаЗакупки", ВаучерДокументаЗакупки);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ВаучерДокументаЗакупкиСсылка = ВыборкаДетальныеЗаписи.ВаучерДокументаЗакупкиСсылка;
	Иначе
		ВаучерДокументаЗакупкиСсылка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

ТаблицаДвиженийМСФО = Новый ТаблицаЗначений;
