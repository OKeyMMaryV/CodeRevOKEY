#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеМаркировкаТоваровИСМП.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДоступныеВидыПродукцииИС = Новый Массив;
	ДоступныеВидыПродукцииИС.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
	ДоступныеВидыПродукцииИС.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВидимостьПодключаемыхКоманд") Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан() Или РедактированиеФормыНедоступно Или НЕ ПравоИзменения
		Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
		ЭтотОбъект, Источник, Событие, Данные);
		
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ЗаполнитьПредставлениеСертификации();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);

	РазблокироватьДанныеФормыДляРедактирования();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	СобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеСертификации(Отказ);
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		И СтрДлина(Объект.КодТаможенногоОргана) <> 8 Тогда
		ТекстСообщения = Нстр("ru = 'Код таможенного органа должен состоять из 8 цифр'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.КодТаможенногоОргана", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСМПКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	ЗадатьВопросОчисткиШтрихкодыУпаковок = Ложь;
	ПроизводствоВнеЕАЭС = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС");
	МаркировкаОстатков = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков");
	
	ЭтоСменаПроизводствоВнеЕАЭС = ПредыдущаяОперация <> ПроизводствоВнеЕАЭС И Объект.Операция = ПроизводствоВнеЕАЭС
		Или ПредыдущаяОперация = ПроизводствоВнеЕАЭС И Объект.Операция <> ПроизводствоВнеЕАЭС;
	ЭтоСменаМаркировкиОстатков = ПредыдущаяОперация <> МаркировкаОстатков И Объект.Операция = МаркировкаОстатков
		Или ПредыдущаяОперация = МаркировкаОстатков И Объект.Операция <> МаркировкаОстатков;
	Если Объект.ШтрихкодыУпаковок.Количество() И (ЭтоСменаПроизводствоВнеЕАЭС Или ЭтоСменаМаркировкиОстатков)Тогда
		ЗадатьВопросОчисткиШтрихкодыУпаковок = Истина;
	КонецЕсли;
	
	ОчиститьТНВЭД = Ложь;
	Если Объект.Операция = ПроизводствоВнеЕАЭС Или Объект.Операция = МаркировкаОстатков Тогда
		ОчиститьТНВЭД = Истина;
	КонецЕсли;
	
	Если ЗадатьВопросОчисткиШтрихкодыУпаковок Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ОчиститьТНВЭД", ОчиститьТНВЭД);
		
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииОперацииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр(
			"ru = 'При изменении вида операции табличная часть Штрихкоды упаковок будут очищены. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	Если ОчиститьТНВЭД Тогда
		ОчиститьТНВЭДТовары();
	КонецЕсли;
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтсканироватьПроверитьМаркируемуюПродукциюОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозобновитьПодборМаркируемойПродукции(Команда)
	
	ПроверкаИПодборПродукцииИСМПКлиент.ВозобновитьПроверку(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущаяОперация = Объект.Операция;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ПриИзмененииВидПродукцииНаСервере();
	
	СобытияФормИСМПКлиент.ВидПродукцииПриИзменении(ЭтотОбъект, Элемент);
	СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары
		                        |и связанные с ней штрихкоды упаковок будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении организации отсканированные коды маркировки будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацияПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ВидыПродукции = Новый Массив;
	ВидыПродукции.Добавить(Объект.ВидПродукции);
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент, ТекущиеДанные, СтандартнаяОбработка, ВидыПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект, Объект.Товары, ТекущиеДанные, ДанныеКешаСтроки, Истина);
	
	Если ТребуетсяОбновитьКэшУпаковок Тогда
		ПрименитьКешШтрихкодовУпаковок();
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(ТекущиеДанные.Номенклатура);
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
	ЗаполнитьСертификациюНоменклатурыПоСтроке(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ИнициализироватьКэшСтроки();
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДанныеКешаСтроки.Номенклатура   = ТекущиеДанные.Номенклатура;
	ДанныеКешаСтроки.Характеристика = ТекущиеДанные.Характеристика;
	ДанныеКешаСтроки.Серия          = ТекущиеДанные.Серия;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект, Объект.Товары, ТекущиеДанные, ДанныеКешаСтроки, Истина);
	
	Если ТребуетсяОбновитьКэшУпаковок Тогда
		ПрименитьКешШтрихкодовУпаковок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяДекларацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияТаможеннойДекларации(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.Сертификация) Тогда
	
		ТекущиеДанные.ВидДокументаСертификации   = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИСМП.ПустаяСсылка");
		ТекущиеДанные.НомерДокументаСертификации = "";
		ТекущиеДанные.ДатаДокументаСертификации  = '00010101';

		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.Сертификация);
	НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.ВидДокументаСертификации   = НайденныеСтроки[0].ВидСертификации;
		ТекущиеДанные.НомерДокументаСертификации = НайденныеСтроки[0].НомерСертификации;
		ТекущиеДанные.ДатаДокументаСертификации  = НайденныеСтроки[0].ДатаСертификации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяДекларацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ТаможеннаяДекларация) Тогда
	
		ТекущиеДанные.РегистрационныйНомерДекларации = "";
		ТекущиеДанные.ДатаДекларации  = '00010101';

		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.ТаможеннаяДекларация);
	НайденныеСтроки = КешТаможеннойДекларации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.РегистрационныйНомерДекларации = НайденныеСтроки[0].РегистрационныйНомерДекларации;
		ТекущиеДанные.ДатаДекларации  = НайденныеСтроки[0].ДатаДекларации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(ЭтотОбъект, Объект.Товары, ТекущиеДанные, ДанныеКешаСтроки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИнициализироватьКэшСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтаФорма,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, Элементы.Товары.ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораКодТНВЭД(Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСертификация И Не Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ОбновитьСписокВыбораСертификации(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		Ложь,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыСертификации(Команда)
	
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	СобытияФормИСМПКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТНВЭДТовары()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.КодТНВЭД = "";
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, ПараметрыЗаполнения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусИСМП = МенеджерОбъекта.СтатусПоУмолчанию();
	
	СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИСМП.СтатусПроверкиИПодбораДокумента(
		Объект.Ссылка, Объект.ВидПродукции);
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		ДальнейшееДействие = Новый Массив;
	Иначе
		ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	КонецЕсли;
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		ДальнейшееДействие = Новый Массив;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
			
			Если СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
				
				ДальнейшееДействие = Новый Массив;
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
	
	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(СтатусИСМП, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
		
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Маркировка товаров ИС МП"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Маркировка товаров ИС МП"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьАгрегацию" Тогда
	
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, ПараметрыЗаполнения)
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	ЗаполнитьСертификациюНоменклатурыПоСтроке(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	//ШтрихкодированиеИС
	ШтрихкодированиеИС.ВосстановитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.МаркировкаТоваровИСМП);
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.МаркировкаТоваровИСМП);
	
	ОбновитьПредставленияНаФорме();
	
	СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	ЗаполнитьДоступныеОперации();
	ЗаполнитьПредставлениеСертификации();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	НастроитьЭлементыФормы(ЭтотОбъект);
	СоздатьКэшСертификацииСервер();
	СоздатьКэшТаможеннойДекларации();
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		СобытияФормИСМП.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект);
		ПодключенаОбработкаКодовМаркировки = Истина;
	Иначе
		ПерезаполнитьДанныеФормы();
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, "Объект");
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	ЭтоОбувнаяПродукция  = (Форма.Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная"));
	ЭтоТабачнаяПродукция = (Форма.Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная"));
	
	ЭтоПроизводствоРФ                           = Ложь;
	ЭтоПроизводствоВнеЕАЭС                      = Ложь;
	ЭтоПроизводствоПоДоговору                   = Ложь;
	ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика = Ложь;
	ЭтоПолучениеПродукцииОтФизическихЛиц        = Ложь;
	ЭтоМаркировкаОстатков                       = Ложь;
	ЭтоТрансграничнаяТорговля                   = Ложь;
	
	Если Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ") Тогда
		ЭтоПроизводствоРФ = Истина;
	ИначеЕсли Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору") Тогда
		ЭтоПроизводствоПоДоговору = Истина;
	ИначеЕсли Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
		ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика = Истина;
	ИначеЕсли Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС") Тогда
		ЭтоПроизводствоВнеЕАЭС = Истина;
	ИначеЕсли Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц") Тогда
		ЭтоПолучениеПродукцииОтФизическихЛиц = Истина;
	ИначеЕсли Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
		ЭтоМаркировкаОстатков = Истина;
	ИначеЕсли Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		ЭтоТрансграничнаяТорговля = Истина;
	КонецЕсли;
	
	ЭтоПроизводствоПоДоговору = ЭтоПроизводствоПоДоговору Или ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика;
	
	Форма.Элементы.ДатаДекларации.Видимость                 = ЭтоПроизводствоВнеЕАЭС;
	Форма.Элементы.РегистрационныйНомерДекларации.Видимость = ЭтоПроизводствоВнеЕАЭС;
	Форма.Элементы.КодТаможенногоОргана.Видимость           = ЭтоПроизводствоВнеЕАЭС;
	Форма.Элементы.ПринятоеРешение.Видимость                = ЭтоПроизводствоВнеЕАЭС;
	Форма.Элементы.СтранаПроисхождения.Видимость            = ЭтоПроизводствоВнеЕАЭС Или ЭтоТрансграничнаяТорговля;
	Форма.Элементы.ТоварыСтранаПроизводства.Видимость       = ЭтоМаркировкаОстатков;
	Форма.Элементы.ТоварыТаможеннаяДекларация.Видимость     = ЭтоМаркировкаОстатков;
	Форма.Элементы.ДатаИмпорта.Видимость                    = ЭтоТрансграничнаяТорговля;
	Форма.Элементы.ТоварыЦена.Видимость                     = ЭтоТрансграничнаяТорговля;
	Форма.Элементы.ТоварыСуммаНДС.Видимость                 = ЭтоТрансграничнаяТорговля;
	Форма.Элементы.ГруппаПервичныйДокумент.Видимость        = ЭтоТрансграничнаяТорговля;
	
	Если ЭтоМаркировкаОстатков Тогда
		Форма.Элементы.ТоварыКодТНВЭД.Видимость = Ложь;
	Иначе
		Форма.Элементы.ТоварыКодТНВЭД.Видимость = Истина;
	КонецЕсли;
	
	Форма.Элементы.Контрагент.Видимость         = ЭтоПроизводствоПоДоговору Или ЭтоТрансграничнаяТорговля;
	Форма.Элементы.ТоварыСертификация.Видимость = Не ЭтоПолучениеПродукцииОтФизическихЛиц;
	Форма.Элементы.ДатаПроизводства.Видимость   = ЭтоПроизводствоПоДоговору
		Или ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика Или ЭтоПроизводствоРФ;
	
	Если ЭтоПроизводствоПоДоговору Тогда
		Форма.Элементы.Контрагент.Заголовок = НСтр("ru = 'Владелец'");
	ИначеЕсли ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика Тогда
		Форма.Элементы.Контрагент.Заголовок = НСтр("ru = 'Производитель'");
	ИначеЕсли ЭтоТрансграничнаяТорговля Тогда
		Форма.Элементы.Контрагент.Заголовок = НСтр("ru = 'Экспортер'");
	КонецЕсли;
	
	Форма.Элементы.ТоварыСертификация.Видимость                   = ЭтоОбувнаяПродукция;
	Форма.Элементы.ИдентификаторПроизводственногоЗаказа.Видимость = ЭтоТабачнаяПродукция;
	Форма.Элементы.ИдентификаторПроизводственнойЛинии.Видимость   = ЭтоТабачнаяПродукция;
	
	ЗависимыеОтСтатусаИСМП = Новый Массив;
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыТовары");
	ЗависимыеОтСтатусаИСМП.Добавить("СтраницаТовары");
	
	ИнтеграцияИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма,
		ЗависимыеОтСтатусаИСМП, Не Форма.РедактированиеФормыНеДоступно);
	
	ЗависимыеОтСтатусаПроверкиИПодбора = Новый Массив;
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ОткрытьПодборПодменю");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыЗагрузитьИзВнешнегоФайла");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыГруппаПерезаполнитьПоОснованию");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыНоменклатура");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыХарактеристика");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСерия");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКоличествоУпаковок");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУпаковкаЕдиницаИзмерения");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУдалить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюУдалить");

	ИнтеграцияИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма,
		ЗависимыеОтСтатусаПроверкиИПодбора,
		Не (Форма.РедактированиеФормыНеДоступно Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)));
	
	Если Форма.РедактированиеФормыНеДоступно
	 Или НЕ Форма.ПравоИзменения Тогда
		Форма.Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	ИначеЕсли Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		Форма.Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Истина;
	Иначе
		Форма.Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидимостьПодключаемыхКоманд") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
		Форма.Элементы.ТоварыСертификация.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		Форма.Элементы.ТоварыСертификация.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)
	
	Если Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ПрименитьКешШтрихкодовУпаковок();
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификация

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСертификациюНоменклатурыПоСтроке(Форма, ДанныеДляЗаполнения)
	
	Если ТипЗнч(ДанныеДляЗаполнения) = Тип("Массив") Тогда
		МассивДанныхЗаполнения = ДанныеДляЗаполнения;
	Иначе
		МассивДанныхЗаполнения = Новый Массив();
		МассивДанныхЗаполнения.Добавить(ДанныеДляЗаполнения);
	КонецЕсли;
	
	Для Каждого СтрокаДанныхЗаполнения Из МассивДанныхЗаполнения Цикл
	
		ПараметрыПоиска = Новый Структура();
		
		Если ТипЗнч(СтрокаДанныхЗаполнения) = Тип("Число") Тогда
			ДанныеСтроки = Форма.Объект.Товары.НайтиПоИдентификатору(СтрокаДанныхЗаполнения);
		Иначе
			ДанныеСтроки = СтрокаДанныхЗаполнения;
		КонецЕсли;
		
		ПараметрыПоиска.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
		
		НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаСертифкации = НайденныеСтроки.Получить(0);
			
			ДанныеСтроки.ВидДокументаСертификации   = СтрокаСертифкации.ВидСертификации;
			ДанныеСтроки.НомерДокументаСертификации = СтрокаСертифкации.НомерСертификации;
			ДанныеСтроки.ДатаДокументаСертификации  = СтрокаСертифкации.ДатаСертификации;
			
			ДанныеСтроки.Сертификация = ПредставлениеСертификации(
				ДанныеСтроки.ВидДокументаСертификации,
				ДанныеСтроки.НомерДокументаСертификации,
				ДанныеСтроки.ДатаДокументаСертификации);
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок)
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидСертификации",   ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИСМП.ДекларацияСоответствия"));
	ПараметрыОткрытия.Вставить("ДатаСертификации",  Дата('00010101'));
	ПараметрыОткрытия.Вставить("НомерСертификации", "");
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВидСертификации",   ВыбраннаяСтрока.ВидДокументаСертификации);
		ПараметрыОткрытия.Вставить("ДатаСертификации",  ВыбраннаяСтрока.ДатаДокументаСертификации);
		ПараметрыОткрытия.Вставить("НомерСертификации", ВыбраннаяСтрока.НомерДокументаСертификации);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", ИдентификаторыСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияТаможеннойДекларации(ИдентификаторыСтрок)
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДатаДекларации",  Дата('00010101'));
	ПараметрыОткрытия.Вставить("РегистрационныйНомерДекларации", "");
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаДекларации",  ВыбраннаяСтрока.ДатаДекларации);
		ПараметрыОткрытия.Вставить("РегистрационныйНомерДекларации", ВыбраннаяСтрока.РегистрационныйНомерДекларации);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", ИдентификаторыСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеТаможеннойДекларацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Документ.МаркировкаТоваровИСМП.Форма.УточнениеТаможеннойДекларации",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации)
	
	ШаблонПредставлениеСертификата = "%1 №%2 от %3";
	
	Если ЗначениеЗаполнено(ВидСертификации)
		И ЗначениеЗаполнено(НомерСертификации)
		И ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		ПредставлениеСертификата = СтрШаблон(ШаблонПредставлениеСертификата,
			ВидСертификации, НомерСертификации, Формат(ДатаСертификации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСертификата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТаможеннойДекларации(РегистрационныйНомерДекларации, ДатаДекларации)
	
	ШаблонПредставление = "№%1 от %2";
	
	Если ЗначениеЗаполнено(РегистрационныйНомерДекларации)
		И ЗначениеЗаполнено(ДатаДекларации) Тогда
		
		ПредставлениеРегистрации = СтрШаблон(
			ШаблонПредставление,
			РегистрационныйНомерДекларации,
			Формат(ДатаДекларации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеРегистрации;
	
КонецФункции

&НаСервере
Процедура СоздатьКэшСертификацииСервер()
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СтрокаТовары.Сертификация = ПредставлениеСертификации(СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКэшТаможеннойДекларации()
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ОбновитьКэшТаможеннойДекларацииКлиентСервер(
			ЭтотОбъект, СтрокаТовары.РегистрационныйНомерДекларации,
			СтрокаТовары.ДатаДекларации);
		
		СтрокаТовары.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
			СтрокаТовары.РегистрационныйНомерДекларации,
			СтрокаТовары.ДатаДекларации);
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьРегистрациюДТВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораСертификации(Номенклатура)
	
	Элементы.ТоварыСертификация.СписокВыбора.Очистить();
	Для Каждого СтрокаКэша Из КэшСертификации Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКэша.Номенклатура)
			Или Номенклатура = СтрокаКэша.Номенклатура Тогда
			Элементы.ТоварыСертификация.СписокВыбора.Добавить(СтрокаКэша.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораТаможеннойДекларации(Номенклатура)
	
	Элементы.ТоварыСертификация.СписокВыбора.Очистить();
	Для Каждого СтрокаКэша Из КешТаможеннойДекларации Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКэша.Номенклатура)
			Или Номенклатура = СтрокаКэша.Номенклатура Тогда
			Элементы.ТоварыТаможеннаяДекларация.СписокВыбора.Добавить(СтрокаКэша.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшСертификацииКлиентСервер(Форма, ВидСертификации, НомерСертификации, ДатаСертификации, Номенклатура = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВидСертификации)
		И Не ЗначениеЗаполнено(НомерСертификации)
		И Не ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ВидСертификации, НомерСертификации, ДатаСертификации",
		ВидСертификации, НомерСертификации, ДатаСертификации);
	
	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КэшСертификации.Добавить();
		НоваяСтрока.ВидСертификации   = ВидСертификации;
		НоваяСтрока.НомерСертификации = НомерСертификации;
		НоваяСтрока.ДатаСертификации  = ДатаСертификации;
		НоваяСтрока.Номенклатура      = Номенклатура;
		НоваяСтрока.Представление     = ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшТаможеннойДекларацииКлиентСервер(Форма, РегистрационныйНомерДекларации, ДатаДекларации, Номенклатура = Неопределено)
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерДекларации)
		И Не ЗначениеЗаполнено(ДатаДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("РегистрационныйНомерДекларации, ДатаДекларации",
		РегистрационныйНомерДекларации, ДатаДекларации);
	
	НайденныеСтроки = Форма.КешТаможеннойДекларации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КешТаможеннойДекларации.Добавить();
		НоваяСтрока.РегистрационныйНомерДекларации = РегистрационныйНомерДекларации;
		НоваяСтрока.ДатаДекларации  = ДатаДекларации;
		НоваяСтрока.Номенклатура       = Номенклатура;
		НоваяСтрока.Представление      = ПредставлениеТаможеннойДекларации(РегистрационныйНомерДекларации, ДатаДекларации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСертификации()
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ВидДокументаСертификации) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Сертификация = ПредставлениеСертификации(
			Строка.ВидДокументаСертификации, Строка.НомерДокументаСертификации, Строка.ДатаДокументаСертификации);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеТаможеннойДекларации()
	 
	Если Не Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.РегистрационныйНомерДекларации) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
			Строка.РегистрационныйНомерДекларации, Строка.ДатаДекларации);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСертификацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.ВидДокументаСертификации   = РезультатВыбора.ВидСертификации;
		ДанныеСтроки.НомерДокументаСертификации = РезультатВыбора.НомерСертификации;
		ДанныеСтроки.ДатаДокументаСертификации  = РезультатВыбора.ДатаСертификации;
		ДанныеСтроки.Сертификация = ПредставлениеСертификации(РезультатВыбора.ВидСертификации,
			РезультатВыбора.НомерСертификации, РезультатВыбора.ДатаСертификации);
	КонецЦикла;
	
	ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, ДанныеСтроки.ВидДокументаСертификации,
		ДанныеСтроки.НомерДокументаСертификации, ДанныеСтроки.ДатаДокументаСертификации);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбновитьСписокВыбораСертификации(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеТаможеннойДекларацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.РегистрационныйНомерДекларации = РезультатВыбора.РегистрационныйНомерДекларации;
		ДанныеСтроки.ДатаДекларации  = РезультатВыбора.ДатаДекларации;
		ДанныеСтроки.ТаможеннаяДекларация      = ПредставлениеТаможеннойДекларации(РезультатВыбора.РегистрационныйНомерДекларации,
			РезультатВыбора.ДатаДекларации);
	КонецЦикла;
	
	ОбновитьКэшТаможеннойДекларацииКлиентСервер(
		ЭтотОбъект, ДанныеСтроки.РегистрационныйНомерДекларации, ДанныеСтроки.ДатаДекларации);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбновитьСписокВыбораТаможеннойДекларации(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ОтключитьКонтрольСтатусовВПроцессеПечатиКодов(ПараметрыСканирования, ИсходныеДанные);
	
	ШтрихкодКоличество = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	Если Не ШтрихкодКоличество.Свойство("ШтрихкодыПреобразованы") Тогда
		ШтрихкодКоличество.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ИсходныеДанные.Штрихкод);
	КонецЕсли;
	
	РезультатОбработки = ОбработатьКодМаркировкиСервер(ШтрихкодКоличество, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтключитьКонтрольСтатусовВПроцессеПечатиКодов(ПараметрыСканирования, ИсходныеДанные = Неопределено)
	
	ОтключитьЗапросСтатусов = Ложь;
	Если ИсходныеДанные = Неопределено Тогда
		
		ОтключитьЗапросСтатусов = Истина;
		
	ИначеЕсли ИсходныеДанные.Свойство("ШтрихкодУпаковки")
		И ЗначениеЗаполнено(ИсходныеДанные.ШтрихкодУпаковки) Тогда
		
		ОтключитьЗапросСтатусов = Истина;
		
	КонецЕсли;
	
	Если Не ОтключитьЗапросСтатусов Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЗапрашиватьСтатусыМОТП") Тогда
		ПараметрыСканирования.ЗапрашиватьСтатусыМОТП                   = Ложь;
		ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП = Ложь;
	КонецЕсли;
	
	Если ПараметрыСканирования.Свойство("ЗапрашиватьСтатусыИСМП") Тогда
		ПараметрыСканирования.ЗапрашиватьСтатусыИСМП                   = Ложь;
		ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьКодМаркировкиСервер(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
		
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода   = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                         = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода               = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеОбработкиШтрихкода  = ОписаниеОповещенияОбработкиКодаМаркировки();
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеВыполнитьДействие   = Новый ОписаниеОповещения("ОбработкаКодаМаркировкиВыполнитьДействие", ЭтотОбъект);
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеЗавершениеОбработки = НовоеОписаниеОповещенияЗавершениеОбработки();
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецФункции

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкодов

&НаКлиенте
Функция НовоеОписаниеОповещенияЗавершениеОбработки()
	
	ДополнительныеПараметрыУспешногоСканирования = Новый Структура();
	ДополнительныеПараметрыУспешногоСканирования.Вставить(
		"СохраненВыборПоМаркируемойПродукции", СохраненВыборПоМаркируемойПродукции);
	ОписаниеОповещенияЗавершениеОбработки = Новый ОписаниеОповещения(
		"ПослеОбработкиШтрихкодов", ЭтотОбъект, ДополнительныеПараметрыУспешногоСканирования);
	Возврат ОписаниеОповещенияЗавершениеОбработки;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура ПослеОбработкиШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Не Результат.Свойство("АдресДанныхОбработкиНаКлиенте") Тогда
		ОбработатьОчереднойШтрихкод();
		Возврат;
	КонецЕсли;
	
	АдресДанныхОбработкиНаКлиенте = Результат.АдресДанныхОбработкиНаКлиенте;
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхОбработкиНаКлиенте) Тогда
		ДанныеПечати = ПолучитьИзВременногоХранилища(АдресДанныхОбработкиНаКлиенте);
		ПечатьЭтикетокИСМПКлиент.ВывестиНаПечатьТаблиныйДокументПоАдресу(
			ДанныеПечати.АдресТабличногоДокумента, ЭтотОбъект, ДанныеПечати.СразуНаПринтер);
		Если Не ДанныеПечати.СразуНаПринтер Тогда
			Активизировать();
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьОчереднойШтрихкод();
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	ЭтоШтрихкодНоменклатуры = Ложь;
	Если ЭтоАдресВременногоХранилища(РезультатОбработкиШтрихкода.АдресДанныхШтрихкода) Тогда
		ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработкиШтрихкода.АдресДанныхШтрихкода);
		ЭтоШтрихкодНоменклатуры = ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры;
	КонецЕсли;
	
	ЭтоПотоковаяПечать = ЭтоШтрихкодНоменклатуры
		И СохраненВыборПоМаркируемойПродукции
		И ЭтоАдресВременногоХранилища(РезультатОбработкиШтрихкода.АдресДанныхШтрихкода)
		И ЗначениеЗаполнено(ДанныеВыбораПоМаркируемойПродукции.ШаблонЭтикетки);
	
	Если ЭтоПотоковаяПечать Тогда
		
		РаспечататьНовыйКодМаркировки(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
		
	Иначе
		
		ОбработатьДобавленныеИзмененныеСтроки(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки, РезультатОбработкиШтрихкода.ИзмененныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавленныеИзмененныеСтроки(ДобавленныеСтроки, ИзмененныеСтроки)
	
	Если ДобавленныеСтроки.Количество() = 0 И ИзмененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ДобавленнаяСтрока, Неопределено, ПараметрыУказанияСерий);
		
		СписокНоменклатуры.Добавить(ДобавленнаяСтрока.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
	ЗаполнитьСертификациюНоменклатурыПоСтроке(ЭтотОбъект, ДобавленныеСтроки);
	
	Для Каждого ИзмененнаяСтрока Из ИзмененныеСтроки Цикл
		
		СобытияФормИСМППереопределяемый.ПриИзмененииКоличества(
			ЭтотОбъект, ИзмененнаяСтрока, Неопределено, ПараметрыУказанияСерий);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, "Объект");
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ЭтотОбъект);
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Неопределено;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Неопределено;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодов()
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиШтрихкодов(
		ЭтотОбъект, ДанныеДляОбработки, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область КэшСтроки
&НаСервере
Процедура ПрименитьКешШтрихкодовУпаковок()
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКэшСтроки()

	ДанныеКешаСтроки = Новый Структура;
	ДанныеКешаСтроки.Вставить("Номенклатура");
	ДанныеКешаСтроки.Вставить("Характеристика");
	ДанныеКешаСтроки.Вставить("Серия");

КонецПроцедуры

#КонецОбласти

#Область ФормаПроверкиИПодбораОбуви

&НаСервере
Процедура ОбновитьИнформациюОткрытияФормыПроверкиПодбора()
	
	Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Истина;
	ТекстНадписи = "";
	
	СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИСМП.СтатусПроверкиИПодбораДокумента(
		Объект.Ссылка, Объект.ВидПродукции);
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Продолжить подбор и проверку маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
			
		Иначе
			
			ТекстНадписи = НСтр("ru = 'Промежуточные результаты подбора маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик
		Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи Тогда
			
		Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
			
			ТекстНадписи = НСтр("ru = 'Результаты подбора маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
		ИначеЕсли ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Подобрать и проверить маркированную продукцию'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.ПустаяСсылка() Тогда
		
		Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
		
	Иначе
		
		ТекстНадписи = НСтр("ru = 'Результаты подбора маркированной продукции'");
		Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
	КонецЕсли;
	
	ТекстГиперссылки = ПроверкаИПодборПродукцииИСМПКлиентСервер.НавигационнаяСсылкаОткрытьФормуПроверкиОбувнойПродукции();
	
	СтрокаОткрытиеФормыСканирования = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,, ТекстГиперссылки);
	
	Элементы.ДекорацияОтсканироватьПроверитьМаркируемуюПродукцию.Заголовок = СтрокаОткрытиеФормыСканирования;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаСервере
Процедура РаспечататьНовыйКодМаркировки(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	РезультатОбработкиШтрихкода.ИспользоватьОбработкуНаКлиенте = Истина;
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМП", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияМОТП", Ложь);
	
	ДанныеВыбора = ДанныеВыбораПоМаркируемойПродукции;
	ДанныеШтрихкодаНоменклатура = ПолучитьИзВременногоХранилища(РезультатОбработкиШтрихкода.АдресДанныхШтрихкода);
	
	Если ДанныеВыбора.Номенклатура = ДанныеШтрихкодаНоменклатура.Номенклатура
		И ДанныеВыбора.Характеристика = ДанныеШтрихкодаНоменклатура.Характеристика Тогда
		
		РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки = Ложь;
		
		СтруктураПечатиЭтикетки = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
		СтруктураПечатиЭтикетки.Организация        = Объект.Организация;
		СтруктураПечатиЭтикетки.ВидПродукции       = Объект.ВидПродукции;
		СтруктураПечатиЭтикетки.Номенклатура       = ДанныеВыбора.Номенклатура;
		СтруктураПечатиЭтикетки.Характеристика     = ДанныеВыбора.Характеристика;
		СтруктураПечатиЭтикетки.Серия              = ДанныеВыбора.Серия;
		СтруктураПечатиЭтикетки.ШаблонЭтикетки     = ДанныеВыбора.ШаблонЭтикетки;
		СтруктураПечатиЭтикетки.Шаблон             = ДанныеВыбора.ШаблонМаркировки;
		СтруктураПечатиЭтикетки.СпособВводаВОборот =
			ШтрихкодированиеИСМПКлиентСервер.СпособВводаВОборотСУЗПоВидуОперации(Объект.Операция);
		
		Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			СтруктураПечатиЭтикетки.МаркировкаОстатков = Истина;
		Иначе
			СтруктураПечатиЭтикетки.МаркировкаОстатков = Ложь;
			СтруктураПечатиЭтикетки.СпособВводаВОборот =
				ШтрихкодированиеИСМПКлиентСервер.СпособВводаВОборотСУЗПоВидуОперации(Объект.Операция);
		КонецЕсли;
		
		ДанныеДляПечати = ПечатьЭтикетокИСМПКлиентСервер.ДанныеДляПечатиЭтикеток(
			СтруктураПечатиЭтикетки,
			ЭтотОбъект,
			Объект.Ссылка);
		
		СтруктураРезультата = ПечатьЭтикетокИСМПВызовСервера.ПечатьЭтикетокСРезервированиемПоДокументу(
			ДанныеДляПечати);
		
		Если СтруктураРезультата <> Неопределено Тогда
		
			Если СтруктураРезультата.РезультатРезервирования.Количество() Тогда
				СтрокаРезультат = СтруктураРезультата.РезультатРезервирования.Получить(0);
				
				СтруктураДанныхШтрихкода = Новый Структура();
				СтруктураДанныхШтрихкода.Вставить("Штрихкод", ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(СтрокаРезультат.ПолныйКодМаркировки));
				
				СтруктураДанныхШтрихкода.Вставить("Количество", 1);
				
				ПараметрыСканирования.ДопустимыйСпособВводаВОборот = Неопределено;
				ОтключитьКонтрольСтатусовВПроцессеПечатиКодов(ПараметрыСканирования);
				
				РезультатОбработки = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
					ЭтотОбъект, СтруктураДанныхШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
				ОбработатьДобавленныеИзмененныеСтроки(РезультатОбработки.ДобавленныеСтроки, РезультатОбработки.ИзмененныеСтроки);
				
				ДанныеДляОбработкиНаКлиенте = Новый Структура();
				ДанныеДляОбработкиНаКлиенте.Вставить("АдресТабличногоДокумента",
					ПоместитьВоВременноеХранилище(СтруктураРезультата.ТабличныйДокумент, УникальныйИдентификатор));
				ДанныеДляОбработкиНаКлиенте.Вставить("СразуНаПринтер", ДанныеВыбора.СразуНаПринтер);
				АдресДанныхОбработкиНаКлиенте = ПоместитьВоВременноеХранилище(
					ДанныеДляОбработкиНаКлиенте, УникальныйИдентификатор);
					
				РезультатОбработкиШтрихкода.Вставить("АдресДанныхОбработкиНаКлиенте", АдресДанныхОбработкиНаКлиенте);
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Ошибка потоковой печати этикеток'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП();
	КонецЕсли;

	ОбновитьИнформациюОткрытияФормыПроверкиПодбора();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		СобытияФормИСМПКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма);
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСертификации(Отказ)
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = Нстр("ru = 'Поле ""%1"" не заполнено'");
	ШаблонПутьКПолю = "Объект.Товары[%1].Сертификация";
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если ПустаяСтрока(СтрокаТовары.Сертификация) Тогда
			ПутьКПолю = СтрШаблон(ШаблонПутьКПолю, Объект.Товары.Индекс(СтрокаТовары));
			ТекстСообщения = СтрШаблон(ШаблонСообщения, "Сертификация");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,ПутьКПолю,,Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОперации()
	
	ЭтоОбувнаяПродукция  = (Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная);
	ЭтоТабачнаяПродукция = (Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная);
	
	Элементы.Операция.СписокВыбора.Очистить();
	Если ЭтоОбувнаяПродукция Тогда
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС, НСтр("ru = 'Импорт'"));
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ, НСтр("ru = 'Производство'"));
		
		ИспользуетсяПереработкаНаСтороне = Истина;
		ИнтеграцияИСМППереопределяемый.ИспользуетсяПереработкаНаСтороне(ИспользуетсяПереработкаНаСтороне);
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору,
			НСтр("ru = 'Контрактное производство (от лица исполнителя)'"));
		
		Если ИспользуетсяПереработкаНаСтороне Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика,
				НСтр("ru = 'Контрактное производство (от лица заказчика)'"));
		КонецЕсли;
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц,
			НСтр("ru = 'Получение продукции от физических лиц'"));
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля,
			НСтр("ru = 'Ввоз из ЕАЭС'"));
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков,
			НСтр("ru = 'Маркировка остатков'"));
		
	ИначеЕсли ЭтоТабачнаяПродукция Тогда
		
		Элементы.Операция.СписокВыбора.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию);
		Элементы.Операция.СписокВыбора.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер);
		Элементы.Операция.СписокВыбора.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ);
		Элементы.Операция.СписокВыбора.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ);
		Элементы.Операция.СписокВыбора.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") 
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеФормы()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, СтрокаТовары, Неопределено, ПараметрыУказанияСерий);
	КонецЦикла;
	
	ЗаполнитьПредставлениеСертификации();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидПродукцииНаСервере()
	
	ЗаполнитьДоступныеОперации();
	Если Элементы.Операция.СписокВыбора.НайтиПоЗначению(Объект.Операция) = Неопределено Тогда
		Объект.Операция = Элементы.Операция.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОбновитьИнформациюОткрытияФормыПроверкиПодбора();
	ОбновлениеКешей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОперацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Операция = ПредыдущаяОперация;
		Возврат;
	КонецЕсли;
	
	Объект.ШтрихкодыУпаковок.Очистить();
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ОчиститьТНВЭД") Тогда
		ОчиститьТНВЭДТовары();
	КонецЕсли;
		
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОбновлениеКешей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, НовыйВидПродукции) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.ВидПродукции = НовыйВидПродукции;
		Объект.Товары.Очистить();
		Объект.ШтрихкодыУпаковок.Очистить();
		ВидПродукцииПриИзменении(Элементы.ВидПродукции);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацияПриЗавершении(РезультатВопроса, НоваяОрганизация) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Организация = НоваяОрганизация;
		Объект.ШтрихкодыУпаковок.Очистить();
		ОбновлениеКешей();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеКешей()
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, "Объект");
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияТаможеннойДекларацииНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

#Область РаботаСТСД

#Область Загрузка

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования);
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если АвторизацияЗапрашивалась = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			ЗагрузкаДанныхТСД = Неопределено;
			Возврат;
		КонецЕсли;
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(Объект.Организация, Объект.ВидПродукции),
			Новый ОписаниеОповещения("ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, Штрихкоды));
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			ЗагрузкаДанныхТСД.ШтрихкодыТСД, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, Неопределено, ОписаниеОповещения);
			
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		
		Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		Иначе
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(Объект.ВидПродукции);
		КонецЕсли;
		
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок; 
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		ЗагрузкаДанныхТСД = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, Неопределено, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования)
	
	Результат = ГрупповаяОбработкаШтрихкодовИС.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Если Результат.ДобавленныеСтроки.Количество() + Результат.ИзмененныеСтроки.Количество() Тогда
		Модифицированность = Истина;
		ОбработатьДобавленныеИзмененныеСтроки(Результат.ДобавленныеСтроки, Результат.ИзмененныеСтроки);
		ОбновлениеКешей();
		Результат.Удалить("ДобавленныеСтроки");
		Результат.Удалить("ИзмененныеСтроки");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Всего Тогда
		ШтрихкодированиеИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		ЗагрузкаДанныхТСД = Неопределено;
	Иначе
		Штрихкод = ЗагрузкаДанныхТСД.ШтрихкодыТСД[ЗагрузкаДанныхТСД.Обработано];
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
		
		Если ЗначениеЗаполнено(Штрихкод.Штрихкод) Тогда
			
			ОбработатьКодМаркировки(ПолучитьИзВременногоХранилища(Штрихкод.РезультатОбработки.АдресДанныхШтрихкода));
			
		Иначе
			
			ОбработатьОчереднойШтрихкод();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчереднойШтрихкод()
	ПодключитьОбработчикОжидания("ОбработатьПолученныеДанныеТСД", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры)
	
	СертификатыНоменклатуры = ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры);
	
	Для Каждого КлючЗначение Из СертификатыНоменклатуры Цикл
		
		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Сертификат Из КлючЗначение.Значение Цикл
			
			ОбновитьКэшСертификацииКлиентСервер(
				Форма, Сертификат.ВидСертификации, Сертификат.НомерСертификации, Сертификат.ДатаСертификации, Номенклатура);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьРегистрациюДТВКэш(Форма, СписокНоменклатуры)
	
	ТаможеннаяДекларация = ИнформацияТаможеннойДекларацииНоменклатурыСервер(СписокНоменклатуры);
	
	Для Каждого КлючЗначение Из ТаможеннаяДекларация Цикл
		
		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Регистрация Из КлючЗначение.Значение Цикл
			
			ОбновитьКэшТаможеннойДекларацииКлиентСервер(
				Форма, Регистрация.РегистрационныйНомерДекларации, Регистрация.ДатаДекларации, Номенклатура);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметры выбора страны мира.
//
//Параметры:
//   Форма                     - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора.
//   ТолькоСтраныУчастникиЕАЭС - Неопределено, Булево - Признак страны-участника ЕАЭС.
//   ИмяПоляВвода              - Строка - имя поля ввода номенклатуры.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСтраныМира(Форма, ТолькоСтраныУчастникиЕАЭС = Неопределено, ИмяПоляВвода = "Страна") Экспорт
	
	ПараметрыВыбора = Новый Массив;
	
	Если ТолькоСтраныУчастникиЕАЭС <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.УчастникЕАЭС", ТолькоСтраныУчастникиЕАЭС));
	КонецЕсли;
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

#КонецОбласти