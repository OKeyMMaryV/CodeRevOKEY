#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров=Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ 
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КПередаче);
	
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ 
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовИСМП - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОперацииВводаВОборот = Новый Массив;
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
	
	ОперацииАгрегации = Новый Массив;
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
	
	ОперацииНанесенияКМ = Новый Массив;
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса);
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииВводаВОборот.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяАгрегация", Ложь) Тогда
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииНанесенияКМ.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
			Статусы.Принят = ДополнительныеПараметры.Статус;
		Иначе
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяАгрегация", Ложь) Тогда
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииАгрегации.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		ВидПродукцииИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции");
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табачная Тогда
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы;
		ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувная Тогда
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  Документ - ДокументСсылка - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияИСМП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий = Перечисления.ТипыЗапросовИС.Входящий;
	
	ВидПродукцииИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции");
	
	Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувная Тогда
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 16,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 17,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 101,
			Входящий,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
		
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табачная Тогда
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 23,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 24,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 25,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 201,
			Входящий,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
		
	КонецЕсли;
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 4,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.Агрегация);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 41,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 42,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 43,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 401,
		Входящий,
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	
	Возврат Таблица;
	
КонецФункции

// Перерасчитать статус оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//
Процедура РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт

	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусОформления(ДокументСсылка);
	КонецЕсли;

КонецПроцедуры

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт

	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);

	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);

КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//
// Возвращаемое значение:
//  Структура - Данные JSON сообщения.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию Тогда
		
		Возврат АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Описание
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
// Возвращаемое значение:
//  Массив - Описание
Функция ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|		И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		И Шапка.Ссылка = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Номер                          КАК Номер,
	|	Шапка.Дата                           КАК Дата,
	|	Шапка.ДокументОснование              КАК ДокументОснование,
	|	
	|	Шапка.Организация                    КАК Организация,
	|	Представление(Шапка.Организация)     КАК ОрганизацияПредставление,
	|
	|	Шапка.Контрагент                     КАК Контрагент,
	|	Представление(Шапка.Контрагент)      КАК КонтрагентПредставление,
	|
	|	Шапка.Ответственный                  КАК Ответственный,
	|	Представление(Шапка.Ответственный)   КАК ОтветственныйПредставление,
	|	
	|	Шапка.ВидПродукции                   КАК ВидПродукции,
	|	Шапка.Операция                       КАК Операция,
	|	// Для обуви и одежды
	|	Шапка.ДатаПроизводства               КАК ДатаПроизводства,
	|	Шапка.ДатаДекларации                 КАК ДатаДекларации,
	|	Шапка.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	Шапка.КодТаможенногоОргана           КАК КодТаможенногоОргана,
	|	Шапка.ПринятоеРешение                КАК ПринятоеРешение,
	|	Шапка.СтранаПроисхождения            КАК СтранаПроисхождения,
	|	Шапка.СтранаПроисхождения.Код        КАК СтранаЭкспортерКод,
	|	Шапка.ДатаИмпорта                    КАК ДатаИмпорта,
	|	Шапка.ДатаПервичногоДокумента        КАК ДатаПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента       КАК НомерПервичногоДокумента,
	|	// Для табачной продукции
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии   КАК ИдентификаторПроизводственнойЛинии
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.КодТНВЭД                               КАК КодТНВЭД,
	|	Товары.ДатаПроизводства                       КАК ДатаПроизводства,
	|	Товары.ВидДокументаСертификации               КАК ВидДокументаСертификации,
	|	Товары.НомерДокументаСертификации             КАК НомерДокументаСертификации,
	|	Товары.ДатаДокументаСертификации              КАК ДатаДокументаСертификации,
	|	ЕСТЬNULL(Товары.СтранаПроизводства.Код, """") КАК СтранаПроизводстваКод,
	|	Товары.ДатаДекларации                         КАК ДатаДекларации,
	|	Товары.РегистрационныйНомерДекларации         КАК РегистрационныйНомерДекларации,
	|	Товары.Цена                                   КАК Цена,
	|	Товары.СуммаНДС                               КАК СуммаНДС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии      = Шапка.ПоследнийНомерВерсии + 1;
	ДатаПроизводства = ИнтеграцияИС.ДатаUTC(Шапка.ДатаПроизводства);
	ДатаДокумента    = ИнтеграцияИС.ДатаUTC(Шапка.Дата);
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
		
		// Заполнение данных по маркируемым товарам
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДокументСсылка, Неопределено, Шапка.ВидПродукции);
		Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
			ПараметрыСканирования.ЗапрашиватьСтатусыИСМП        = Ложь;
			ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот = Ложь;
		ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
			ПараметрыСканирования.ЗапрашиватьСтатусыМОТП = Ложь;
		КонецЕсли;
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования);
		
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ Тогда
			
			Если Не ЗначениеЗаполнено(ДатаПроизводства) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					НСтр("ru = 'Не заполнено поле ""Дата производства""'"));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
			КонецЕсли;
			
			document_description = Новый Структура;
			document_description.Вставить("production_type", "OWN_PRODUCTION");
			document_description.Вставить("production_date", ДатаПроизводства);
			
			document_description.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
			document_description.Вставить("producer_inn",    РеквизитыОрганизации.ИНН);
			document_description.Вставить("owner_inn",       РеквизитыОрганизации.ИНН);
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("doc_type",             "Promotion_Inform_Selfmade");
			ТелоЗапроса.Вставить("document_description", document_description);
			ТелоЗапроса.Вставить("products",             Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					СтрокаТЧ.Вставить("uit_code", ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(СтрокаТЧМаркированныеТовары.Штрихкод));
					
					Если Не ЗначениеЗаполнено(СтрокаТЧТовары.КодТНВЭД) Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"), ПараметрыОтбора.Номенклатура));
					КонецЕсли;
					СтрокаТЧ.Вставить("tnved_code", СтрокаТЧТовары.КодТНВЭД);
					
					// Сертификация
					СтрокаТЧ.Вставить("certificate_document",        ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
					СтрокаТЧ.Вставить("certificate_document_number", СтрокаТЧТовары.НомерДокументаСертификации);
					СтрокаТЧ.Вставить("certificate_document_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					
					ТелоЗапроса.products.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"), ПараметрыОтбора.Номенклатура));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"), ПараметрыОтбора.Номенклатура));
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда
			
			Если Не ЗначениеЗаполнено(Шапка.ДатаДекларации) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					НСтр("ru = 'Не заполнено поле ""Дата декларации""'"));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации'"), Шапка.Организация));
			КонецЕсли;
			
			document_description = Новый Структура;
			document_description.Вставить("participant_inn",    РеквизитыОрганизации.ИНН);
			document_description.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаДекларации));
			document_description.Вставить("declaration_number", Шапка.РегистрационныйНомерДекларации);
			document_description.Вставить("customs_code",       Шапка.КодТаможенногоОргана);
			document_description.Вставить("decision_code",      ИнтерфейсИСМПСлужебный.ПринятоеРешение(Шапка.ПринятоеРешение));
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("doc_type",             "GOODSIMPORT");
			ТелоЗапроса.Вставить("document_description", document_description);
			ТелоЗапроса.Вставить("products",             Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					СтрокаТЧ.Вставить("uit_code", ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(СтрокаТЧМаркированныеТовары.Штрихкод));
					
					Если Не ЗначениеЗаполнено(СтрокаТЧТовары.КодТНВЭД) Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"),
									ПараметрыОтбора.Номенклатура));
					КонецЕсли;
					СтрокаТЧ.Вставить("tnved_code", СтрокаТЧТовары.КодТНВЭД);
					
					// Сертификация
					СтрокаТЧ.Вставить("certificate_document",        ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
					СтрокаТЧ.Вставить("certificate_document_number", СтрокаТЧТовары.НомерДокументаСертификации);
					СтрокаТЧ.Вставить("certificate_document_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					
					ТелоЗапроса.products.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
			Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
			
			РеквизитыКонтрагента = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Контрагент);
			
			document_description = Новый Структура;
			
			Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору Тогда
				document_description.Вставить("producer_inn", РеквизитыОрганизации.ИНН);
				document_description.Вставить("owner_inn",    РеквизитыКонтрагента.ИНН);
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
				document_description.Вставить("owner_inn",    РеквизитыОрганизации.ИНН);
				document_description.Вставить("producer_inn", РеквизитыКонтрагента.ИНН);
			КонецЕсли;
			
			document_description.Вставить("production_date",  ДатаПроизводства);
			document_description.Вставить("production_order", "CONTRACT_PRODUCTION");
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("doc_type",             "Promotion_Inform_Selfmade");
			ТелоЗапроса.Вставить("document_description", document_description);
			ТелоЗапроса.Вставить("products",             Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					СтрокаТЧ.Вставить("uit_code", ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(СтрокаТЧМаркированныеТовары.Штрихкод));
					
					Если Не ЗначениеЗаполнено(СтрокаТЧТовары.КодТНВЭД) Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"),
									ПараметрыОтбора.Номенклатура));
					КонецЕсли;
					СтрокаТЧ.Вставить("tnved_code", СтрокаТЧТовары.КодТНВЭД);
					
					// Сертификация
					СтрокаТЧ.Вставить("certificate_document",        ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(Шапка.ВидДокументаСертификации));
					СтрокаТЧ.Вставить("certificate_document_number", СтрокаТЧТовары.НомерДокументаСертификации);
					СтрокаТЧ.Вставить("certificate_document_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					
					ТелоЗапроса.products.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
								ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц Тогда
			
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
			КонецЕсли;
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("products_list",   Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				СтрокаТЧ = Новый Структура;
				СтрокаТЧ.Вставить("uit",                    ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(СтрокаТЧМаркированныеТовары.Штрихкод));
				СтрокаТЧ.Вставить("product_receiving_date", ДатаДокумента);
			
				ТелоЗапроса.products_list.Добавить(СтрокаТЧ);
				
			КонецЦикла;
		
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
			КонецЕсли;
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("products_list",   Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					СтрокаТЧ.Вставить("ki", ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(
						СтрокаТЧМаркированныеТовары.Штрихкод));
					СтрокаТЧ.Вставить("kitu", "");
					
					// Таможенная декларация (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.РегистрационныйНомерДекларации) Тогда
						СтрокаТЧ.Вставить("declaration_number", СтрокаТЧТовары.РегистрационныйНомерДекларации);
						СтрокаТЧ.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДекларации));
					КонецЕсли;
					
					// Страна (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.СтранаПроизводстваКод) Тогда
						СтрокаТЧ.Вставить("country", СтрокаТЧТовары.СтранаПроизводстваКод);
					КонецЕсли;
					
					// Сертификация (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
						СтрокаТЧ.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
						СтрокаТЧ.Вставить("certificate_number", СтрокаТЧТовары.НомерДокументаСертификации);
						СтрокаТЧ.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					КонецЕсли;
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				КонецЕсли;
				
				ТелоЗапроса.products_list.Добавить(СтрокаТЧ);
				
			КонецЦикла;
		
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
			
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации'"), Шапка.Организация));
			КонецЕсли;
			
			СведенияОКонтрагенте = Новый Структура();
			СведенияОКонтрагенте.Вставить("НалоговыйНомерВСтранеРегистрации", "");
			СведенияОКонтрагенте.Вставить("Наименование",                     "");
			
			ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(
				Шапка.Контрагент,
				СведенияОКонтрагенте);
				
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("trade_participant_inn",   РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("import_date",             ИнтеграцияИС.ДатаUTC(Шапка.ДатаИмпорта));
			ТелоЗапроса.Вставить("exporter_name",           СведенияОКонтрагенте.Наименование);
			ТелоЗапроса.Вставить("primary_document_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
			ТелоЗапроса.Вставить("primary_document_number", Шапка.НомерПервичногоДокумента);
			ТелоЗапроса.Вставить("country_oksm",            Шапка.СтранаЭкспортерКод);
			ТелоЗапроса.Вставить("sender_tax_number",       СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации);
			ТелоЗапроса.Вставить("products_list",           Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					СтрокаТЧ.Вставить("ki",        ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(
						СтрокаТЧМаркированныеТовары.Штрихкод));
					СтрокаТЧ.Вставить("cost",      Формат(СтрокаТЧТовары.Цена,     "ЧДЦ=2; ЧРД=.;"));
					СтрокаТЧ.Вставить("vat_value", Формат(СтрокаТЧТовары.СуммаНДС, "ЧДЦ=2; ЧРД=.;"));
					
					Если Не ЗначениеЗаполнено(СтрокаТЧТовары.КодТНВЭД) Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"),
									ПараметрыОтбора.Номенклатура));
					КонецЕсли;
					СтрокаТЧ.Вставить("tnved_code", СтрокаТЧТовары.КодТНВЭД);
					
					// Сертификация
					СтрокаТЧ.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
					СтрокаТЧ.Вставить("certificate_number", СтрокаТЧТовары.НомерДокументаСертификации);
					СтрокаТЧ.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					
					ТелоЗапроса.products_list.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Неизвестная операция ввода в оборот: ""%1"".'"), Шапка.Операция));
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация", Ложь);
		Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ПараметрыЗапроса.ТребуетсяАгрегация = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Шапка.Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		
		СтанцияУправленияЗаказами = Неопределено;
		ФорматОбмена              = Неопределено;
		НастройкиОбменаСУЗ = ДополнительныеПараметры.ПараметрыОбмена.НастройкиОбменаСУЗ;
		Для Каждого КлючИЗначение Из НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			
			Организация     = КлючИЗначение.Ключ;
			НастройкаОбмена = КлючИЗначение.Значение;
			
			Если Организация <> Шапка.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Если НастройкаОбмена.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
				РезультатПроверки = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбмена);
				Если РезультатПроверки.Доступен = Истина Тогда
					СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
					ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
				КонецЕсли;
			Иначе
				СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
				ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтанцияУправленияЗаказами = Неопределено Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.'"),
					Шапка.Организация));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Если ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				НСтр("ru = 'Формат обмена с СУЗ версии v1 не поддерживается для табачной продукции'"));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДокументСсылка, Неопределено, Шапка.ВидПродукции);
		Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
			ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Ложь;
		ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
			ПараметрыСканирования.ЗапрашиватьСтатусыМОТП = Ложь;
		КонецЕсли;
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования);
		
		СоответствиеБлоков = Новый Соответствие;
		
		ОписаниеТипаСтрока200 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная));
		ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50,  ДопустимаяДлина.Переменная));
		
		КодыМаркировки = Новый ТаблицаЗначений;
		КодыМаркировки.Колонки.Добавить("КодМаркировки",          ОписаниеТипаСтрока200);
		КодыМаркировки.Колонки.Добавить("ХешСуммаКодаМаркировки", ОписаниеТипаСтрока50);
		
		Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
			Если ШтрихкодированиеМОТП.ЭтоКодМаркировкиТабачнойПачки(СтрокаТЧМаркированныеТовары.Штрихкод) Тогда
				СтрокаТЧ = КодыМаркировки.Добавить();
				СтрокаТЧ.КодМаркировки          = ШтрихкодированиеМОТПКлиентСервер.НормализоватьКодМаркировки(СтрокаТЧМаркированныеТовары.Штрихкод);
				СтрокаТЧ.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаТЧ.КодМаркировки);
			КонецЕсли;
			Если СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель <> Неопределено Тогда
				КодУпаковки = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель.Штрихкод;
				Если СоответствиеБлоков[КодУпаковки] = Неопределено Тогда
					СоответствиеБлоков.Вставить(КодУпаковки, Истина);
					Если ШтрихкодированиеМОТП.ЭтоКодМаркировкиБлока(КодУпаковки) Тогда
						СтрокаТЧ = КодыМаркировки.Добавить();
						СтрокаТЧ.КодМаркировки          = ШтрихкодированиеМОТПКлиентСервер.НормализоватьКодМаркировки(КодУпаковки);
						СтрокаТЧ.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаТЧ.КодМаркировки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.КодМаркировки          КАК КодМаркировки,
		|	Т.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
		|ПОМЕСТИТЬ КодыМаркировки
		|ИЗ
		|	&КодыМаркировки КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	КодМаркировки
		|;
		|
		|///////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.КодМаркировки                                                   КАК КодМаркировки,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки, НЕОПРЕДЕЛЕНО) КАК ПолныйКодМаркировки
		|ИЗ
		|	КодыМаркировки КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки = Т.КодМаркировки
		|		И ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки = Т.ХешСуммаКодаМаркировки
		|");
		Запрос.Параметры.Вставить("КодыМаркировки", КодыМаркировки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		КоличествоКодовВДокументе = 30000;
		
		ГруппыКодов   = Новый Массив();
		ТекущаяГруппа = Новый Массив();
		ГруппыКодов.Добавить(ТекущаяГруппа);
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПолныйКодМаркировки = Неопределено Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не найден полный код маркировки для кода %1.'"), Выборка.КодМаркировки));
			Иначе
				Если ТекущаяГруппа.Количество() >= КоличествоКодовВДокументе Тогда
					ТекущаяГруппа = Новый Массив();
					ГруппыКодов.Добавить(ТекущаяГруппа);
				КонецЕсли;
				ТекущаяГруппа.Добавить(ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(Выборка.ПолныйКодМаркировки));
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация", Ложь);
		ПараметрыЗапроса.Вставить("ОперацияДокумента",     Шапка.Операция);
		Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ПараметрыЗапроса.ТребуетсяАгрегация = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = "00000000-0000-0000-0000-000000000000";
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Для Каждого ТекущаяГруппаКодов Из ГруппыКодов Цикл
			
			ТелоЗапроса = Новый Структура;
		
			// Обязательные реквизиты
			ТелоЗапроса.Вставить("usageType", ИнтерфейсСУЗСлужебный.ВидОтчетаОбИспользованииКодовМаркировки(Шапка.Операция));
			ТелоЗапроса.Вставить("sntins",    ТекущаяГруппаКодов);
			
			// Необязательные реквизиты
			ТелоЗапроса.Вставить("productionLineId",  Шапка.ИдентификаторПроизводственнойЛинии);
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Шапка.Операция, ДокументСсылка, НомерВерсии);
			
			ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = НомерВерсии;
			СообщениеJSON.ТребуетсяПодписание = Ложь;
			СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;
			СообщениеJSON.ПараметрыЗапроса    = Новый Структура();
			 
			СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
			СообщениеJSON.Операция                  = Шапка.Операция;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	Иначе
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Неизвестный вид продукции для маркировки товаров: ""%1"".'"), Шапка.ВидПродукции));
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Агрегация)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|	// Табачная продукция
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии   КАК ИдентификаторПроизводственнойЛинии,
	|	
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		КонецЕсли;
		
		СообщениеJSON.ТекстСообщенияJSON  = Неопределено;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура("ОрганизацияИНН", РеквизитыОрганизации.ИНН);
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		СтанцияУправленияЗаказами = Неопределено;
		ФорматОбмена              = Неопределено;
		НастройкиОбменаСУЗ = ДополнительныеПараметры.ПараметрыОбмена.НастройкиОбменаСУЗ;
		Для Каждого КлючИЗначение Из НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			
			Организация     = КлючИЗначение.Ключ;
			НастройкаОбмена = КлючИЗначение.Значение;
			
			Если Организация <> Шапка.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Если НастройкаОбмена.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
				РезультатПроверки = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбмена);
				Если РезультатПроверки.Доступен = Истина Тогда
					СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
					ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
				КонецЕсли;
			Иначе
				СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
				ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтанцияУправленияЗаказами = Неопределено Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.'"),
					Шапка.Организация));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Если ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				НСтр("ru = 'Формат обмена с СУЗ версии v1 не поддерживается для табачной продукции'"));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДокументСсылка, Неопределено, Шапка.ВидПродукции);
		Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
			ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Ложь;
		ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
			ПараметрыСканирования.ЗапрашиватьСтатусыМОТП = Ложь;
		КонецЕсли;
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования);
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		КонецЕсли;
		
		ТелоЗапроса = Новый Структура;
		
		// Обязательные реквизиты
		ТелоЗапроса.Вставить("participantId",    РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("aggregationUnits", Новый Массив);
		
		// Необязательные реквизиты
		ТелоЗапроса.Вставить("productionLineId",  Шапка.ИдентификаторПроизводственнойЛинии);
		Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
			ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
		КонецЕсли;
		
		ЗаполнитьОтчетОбИспользованииРекурсивноМОТП(
			РезультатПоиска.ДеревоУпаковок,
			ТелоЗапроса);
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
		СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура ЗаполнитьОтчетОбИспользованииРекурсивноМОТП(СтрокаДерева, ТелоЗапроса)
	
	Если ТипЗнч(СтрокаДерева) <> Тип("ДеревоЗначений") Тогда
		КодМаркировкиУпаковки = ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(
			ШтрихкодированиеМОТПКлиентСервер.КодМаркировкиДляПередачиМОТП(СтрокаДерева.Штрихкод));
	Иначе
		КодМаркировкиУпаковки = Неопределено;
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Если КодМаркировкиУпаковки <> Неопределено Тогда
			ВложенныеКоды = Новый Массив;
		КонецЕсли;
		
		Для Каждого СтрокаДереваВложенная Из СтрокаДерева.Строки Цикл
			
			Если КодМаркировкиУпаковки <> Неопределено Тогда
				КодМаркировки = ШтрихкодированиеМОТПКлиентСервер.КодМаркировкиДляПередачиМОТП(СтрокаДереваВложенная.Штрихкод);
				ВложенныеКоды.Добавить(ШтрихкодированиеИСМПКлиентСервер.КодМаркировкиБезСкобок(КодМаркировки));
			КонецЕсли;
			
			ЗаполнитьОтчетОбИспользованииРекурсивноМОТП(СтрокаДереваВложенная, ТелоЗапроса);
			
		КонецЦикла;
		
		Если КодМаркировкиУпаковки <> Неопределено
			И ВложенныеКоды.Количество() > 0 Тогда
			
			ДанныеОбАгрегации = Новый Структура;
			ДанныеОбАгрегации.Вставить("aggregatedItemsCount",    ВложенныеКоды.Количество());
			ДанныеОбАгрегации.Вставить("aggregationType",         "AGGREGATION");
			ДанныеОбАгрегации.Вставить("aggregationUnitCapacity", ВложенныеКоды.Количество());
			ДанныеОбАгрегации.Вставить("sntins",                  ВложенныеКоды);
			ДанныеОбАгрегации.Вставить("unitSerialNumber",        КодМаркировкиУпаковки);
			
			ТелоЗапроса["aggregationUnits"].Добавить(ДанныеОбАгрегации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - параметры указания серий См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - Структура - параметры указания серий
//    См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	Иначе
		Результат = ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды) Экспорт
	
	РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПараметрыЗаполнения()
	
	Возврат Новый Структура("ИзмененныеСтроки, ДобавленныеСтроки, РодительскийШтрихкод", Новый Массив, Новый Массив);
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ВидПродукции <> Неопределено
			И СтрокаДерева.Номенклатура <> Неопределено
			И СтрокаДерева.Характеристика <> Неопределено
			И СтрокаДерева.Серия <> Неопределено
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если ШтрихкодированиеИС.ПрисутствуетОбувнаяПродукция(ДанныеШтрихкода.ВидыПродукции)
		Или ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ДанныеШтрихкода.ВидыПродукции) Тогда
		
		Возврат ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ТипЗнч(ДанныеШтрихкода) = Тип("СтрокаДереваЗначений") Тогда
		
		Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
			КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
		ИначеЕсли ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда 
			КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоПачек;
		КонецЕсли;
		
	Иначе
		
		Если ШтрихкодированиеИС.ПрисутствуетОбувнаяПродукция(ДанныеШтрихкода.ВидыПродукции) Тогда
			КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
		ИначеЕсли ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ДанныеШтрихкода.ВидыПродукции) Тогда 
			КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоПачек;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляДляПоискаМаркируемойПродукции();
	ИсключаемыеПоля = ?(ЗначениеЗаполнено(ДанныеШтрихкода.Серия), "", "Серия");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода,, ИсключаемыеПоля);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		ОбработатьНайденныеСтрокиВТаблицеТовары(Форма, НайденныеСтрокиТовары, ДанныеШтрихкода, РезультатОбработки);
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		СтрокаТовары.Номенклатура       = ДанныеШтрихкода.Номенклатура;
		СтрокаТовары.Характеристика     = ДанныеШтрихкода.Характеристика;
		СтрокаТовары.Серия              = ДанныеШтрихкода.Серия;
		СтрокаТовары.КоличествоУпаковок = КоличествоМаркируемыхЕдиниц;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
		
	Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки Тогда
		
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		
		Отбор = Новый Структура("ШтрихкодУпаковки", РодительскийШтрихкод);
		РодительУказан = ИсточникДанных.ШтрихкодыУпаковок.НайтиСтроки(Отбор).Количество();
		
		Если Не РодительУказан Тогда
			НоваяСтрокаУпаковки = ИсточникДанных.ШтрихкодыУпаковок.Добавить();
			НоваяСтрокаУпаковки.ШтрихкодУпаковки = РодительскийШтрихкод;
		КонецЕсли;
		
	Иначе
		НоваяСтрокаУпаковки = ИсточникДанных.ШтрихкодыУпаковок.Добавить();
		НоваяСтрокаУпаковки.ШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, "Объект");
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ОбработатьНайденныеСтрокиВТаблицеТовары(Форма, НайденныеСтрокиТоваров, ДанныеШтрихкода, РезультатОбработки)
	
	КоличествоМаркируемойПродукции = КоличествоМаркируемойПродукцииПоДаннымШтрихкода(ДанныеШтрихкода);
	
	ОбработатьБезМаркировки = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ОбработатьБезМаркировки") Тогда
		ОбработатьБезМаркировки = ДанныеШтрихкода.ОбработатьБезМаркировки;
	КонецЕсли;
	
	ТаблицаШтрихкодовУпаковок = Форма.ДанныеШтрихкодовУпаковокГосИС.Выгрузить();
	ПараметрыПоискаТаблицыШтрихкодов = Новый Структура("Номенклатура, Характеристика, Серия");
	ЗаполнитьЗначенияСвойств(ПараметрыПоискаТаблицыШтрихкодов, ДанныеШтрихкода);
	НайденныеСтрокиТаблицыШтрихкодов = ТаблицаШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоискаТаблицыШтрихкодов);
	КоличествоСоответствующихМарок = 0;
	Если НайденныеСтрокиТаблицыШтрихкодов.Количество() > 0 Тогда
		КоличествоСоответствующихМарок = НайденныеСтрокиТаблицыШтрихкодов[0].Количество;
	КонецЕсли;
	
	ТоварыСоответствуютМаркам          = Истина;
	СтрокаТоварыДляИзмененияКоличества = НайденныеСтрокиТоваров[0];
	КоличествоТоваров = 0;
	Для Каждого СтрокаТовары Из НайденныеСтрокиТоваров Цикл
		КоличествоТоваров = КоличествоТоваров + СтрокаТовары.КоличествоУпаковок;
		Если КоличествоТоваров > КоличествоСоответствующихМарок Тогда
			ТоварыСоответствуютМаркам = Ложь;
			СтрокаТоварыДляИзмененияКоличества = СтрокаТовары;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТоварыСоответствуютМаркам Тогда
		
		СтрокаТоварыДляИзмененияКоличества.КоличествоУпаковок =
			СтрокаТоварыДляИзмененияКоличества.КоличествоУпаковок + КоличествоМаркируемойПродукции;
		
		Если ОбработатьБезМаркировки Тогда
			СтрокаТоварыДляИзмененияКоличества.МаркируемаяПродукция = Ложь;
		КонецЕсли;
		РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТоварыДляИзмененияКоличества);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КоличествоМаркируемойПродукцииПоДаннымШтрихкода(ДанныеШтрихкода)
	
	КоличествоМаркируемойПродукции = 1;
	
	Если ТипЗнч(ДанныеШтрихкода) = Тип("Структура") Тогда
		Если ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ДанныеШтрихкода.ВидыПродукции) Тогда
			КоличествоМаркируемойПродукции = ДанныеШтрихкода.КоличествоПачек;
		ИначеЕсли ШтрихкодированиеИС.ПрисутствуетОбувнаяПродукция(ДанныеШтрихкода.ВидыПродукции) Тогда
			КоличествоМаркируемойПродукции = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
		КонецЕсли;
	Иначе
		
		Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
			КоличествоМаркируемойПродукции = ДанныеШтрихкода.КоличествоПачек;
		ИначеЕсли ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
			КоличествоМаркируемойПродукции = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоличествоМаркируемойПродукции;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанелиОбменаИСМПОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовИСМП.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК ДокументИСМП
	|		ПО СтатусыДокументовЕГАИС.Документ = ДокументИСМП.Ссылка
	|ГДЕ
	|	ДокументИСМП.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ДокументИСМП.ПометкаУдаления
	|	И СтатусыДокументовИСМП.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (ДокументИСМП.Организация В(&Организации)
	|		ИЛИ &БезОтбораПоОрганизации)
	|	И (ДокументИСМП.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанелиОбменаИСМПОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовИСМП.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК ДокументИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ДокументИСМП.Ссылка
	|ГДЕ
	|	ДокументИСМП.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ДокументИСМП.ПометкаУдаления
	|	И СтатусыДокументовИСМП.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ДокументИСМП.ОрганизацияЕГАИС В(&Организации)
	|		ИЛИ &БезОтбораПоОрганизации)
	|	И (ДокументИСМП.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	МассивОбработанныхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Серия) Тогда
			ПараметрыОтбора.Вставить("Серия", СтрокаТаблицы.Серия);
		КонецЕсли;
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(СтрокаТовары, ДокументОбъект);
		
	КонецЦикла;
	
	//Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
		 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркировкаТоваровИСМПТовары.Номенклатура,
	|	МаркировкаТоваровИСМПТовары.Характеристика,
	|	МаркировкаТоваровИСМПТовары.Серия,
	|	МаркировкаТоваровИСМПТовары.Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК МаркировкаТоваровИСМПТовары
	|ГДЕ
	|	МаркировкаТоваровИСМПТовары.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции"),
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт



КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт



КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт



КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.МаркировкаТоваровИСМП, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли