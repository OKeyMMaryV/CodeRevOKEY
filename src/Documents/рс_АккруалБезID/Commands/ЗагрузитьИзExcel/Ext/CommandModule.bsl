
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	Если Объект_База_Количество(ПараметрКоманды) > 0 Тогда
		Ответ = Вопрос("База расчета будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл для загрузки данных";
	Диалог.Фильтр = "Файл Excel (*.xls;*.xlsx)|*.xls;*.xlsx|";
	
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ФайлИсточник = Диалог.ПолноеИмяФайла;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("НачальнаяСтрока", 2);
	
	СтруктураРезультат = ПрочитатьТаблицуИзExcel(ФайлИсточник, СтруктураПараметры); 
	
	Если СтруктураРезультат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Обработка строк"); //1c-izhtc spawn 07.08.15
	
	ОбработкаКомандыНаСервере(ПараметрКоманды, СтруктураРезультат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыНаСервере(ПараметрКоманды, СтруктураРезультат)
	
	Объект = ПараметрКоманды.ПолучитьОбъект();
	Если Объект.База.Количество() > 0 Тогда
		Объект.База.Очистить();
	КонецЕсли;
	
	СтруктураСтрока = Новый Структура("Организация, Счет, СчетНаименование, Объект, ФункцияЦФО, Период, СтатьяОборотов, НомерЗаявки, Инициатор, ПредполагаемыйКонтрагент, ЦельРасходов, Сумма");
	
	//1c-izhtc spawn 07.08.15 (
	НомерСтроки = 0; 
	ТаблицаДанных = СтруктураРезультат.ТаблицаРезультат;
	СоответствиеКолонок = СтруктураРезультат.СоответствиеКолонок;
	//1c-izhtc spawn 07.08.15 )
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		//1c-izhtc spawn 07.08.15 (
		//НомерСтроки = ТаблицаДанных.Индекс(СтрокаДанных) + 1;
		НомерСтроки = НомерСтроки + 1;
		//1c-izhtc spawn 07.08.15 )
		
		СтруктураСтрока.Организация = Справочники.Организации.НайтиПоКоду(СтрокаДанных[СоответствиеКолонок[0]]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.Организация) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найдена организация по коду <" + СтрокаДанных[СоответствиеКолонок[0]] + ">");
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока.Счет = ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду(СтрокаДанных[СоответствиеКолонок[1]]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.Счет) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найден счет по коду <" + СтрокаДанных[СоответствиеКолонок[1]] + ">");
			Продолжить;
		КонецЕсли;
		СтруктураСтрока.СчетНаименование = СтруктураСтрока.Счет.Наименование;
		
		СтруктураСтрока.Объект = Справочники.ОбъектыСтроительства.НайтиПоКоду(СтрокаДанных[СоответствиеКолонок[2]]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.Объект) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найден объект по коду <" + СтрокаДанных[СоответствиеКолонок[2]] + ">");
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока.ФункцияЦФО = Справочники.Подразделения.НайтиПоКоду(СтрокаДанных[СоответствиеКолонок[3]]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.ФункцияЦФО) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найдена функция по коду <" + СтрокаДанных[СоответствиеКолонок[3]] + ">");
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока.Период = Справочники.рс_МесяцыНачисления.НайтиПоКоду(СтрокаДанных[СоответствиеКолонок[4]]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.Период) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найден период по коду <" + СтрокаДанных[СоответствиеКолонок[4]] + ">");
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока.СтатьяОборотов = Справочники.бит_СтатьиОборотов.НайтиПоКоду(СтрокаДанных[СоответствиеКолонок[5]]);
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.СтатьяОборотов) Тогда
			Сообщить("Строка " + НомерСтроки + ": Не найдена статья оборотов по коду <" + СтрокаДанных[СоответствиеКолонок[5]] + ">");
			Продолжить;
		КонецЕсли;
		
		СтруктураСтрока.НомерЗаявки = Документы.бит_ФормаВводаБюджета.НайтиПоНомеру(СтрокаДанных[СоответствиеКолонок[6]], ТекущаяДата());
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.НомерЗаявки) Тогда
			СтруктураСтрока.НомерЗаявки = Документы.бит_ФормаВводаБюджета.НайтиПоНомеру(СтрокаДанных[СоответствиеКолонок[6]], ДобавитьМесяц(ТекущаяДата(), -12));
		КонецЕсли;
		//ОК Довбешка Т. 09.02.2017
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.НомерЗаявки) Тогда
			СтруктураСтрока.НомерЗаявки = Документы.бит_ФормаВводаБюджета.НайтиПоНомеру(СтрокаДанных[СоответствиеКолонок[6]], ДобавитьМесяц(ТекущаяДата(), -24));
		КонецЕсли;
		//ОК Довбешка Т. 28.01.2021
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.НомерЗаявки) Тогда
			СтруктураСтрока.НомерЗаявки = Документы.бит_ФормаВводаБюджета.НайтиПоНомеру(СтрокаДанных[СоответствиеКолонок[6]], ДобавитьМесяц(ТекущаяДата(), -36));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.НомерЗаявки) Тогда
			СтруктураСтрока.НомерЗаявки = Документы.бит_ФормаВводаБюджета.НайтиПоНомеру(СтрокаДанных[СоответствиеКолонок[6]], ДобавитьМесяц(ТекущаяДата(), -48));
		КонецЕсли;
		//ОК
		Если НЕ ЗначениеЗаполнено(СтруктураСтрока.НомерЗаявки) Тогда
			//БИТ Тртилек 29102013 в случае мастер-файла заносим текстовое значение заявки
			Если Объект.ВидОперации = Перечисления.рс_ВидыОперацийАккруалБезID.ПоМастерФайлу Тогда
				СтруктураСтрока.НомерЗаявки = СтрокаДанных[СоответствиеКолонок[6]];
			Иначе
			///БИТ Тртилек
				///БИТ Тртилек
				Сообщить("Строка " + НомерСтроки + ": Не найден номер заявки по коду <" + СтрокаДанных[СоответствиеКолонок[6]] + ">");
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//СтруктураСтрока.Инициатор = Справочники.бит_БК_Инициаторы.НайтиПоНаименованию(СтрокаДанных[7]);
		//Если НЕ ЗначениеЗаполнено(СтруктураСтрока.Инициатор) Тогда
		//	Сообщить("Строка " + НомерСтроки + ": Не найден инициатор по наименованию <" + СтрокаДанных[7] + ">");
		//	Продолжить;
		//КонецЕсли;
		СтруктураСтрока.Инициатор = СтрокаДанных[СоответствиеКолонок[7]];
		
		СтруктураСтрока.ПредполагаемыйКонтрагент = СокрЛП((СтрокаДанных[СоответствиеКолонок[8]]));
		
		СтруктураСтрока.ЦельРасходов = СокрЛП((СтрокаДанных[СоответствиеКолонок[9]]));
		
		Попытка 
			СтруктураСтрока.Сумма = Число(СтрЗаменить(СтрокаДанных[СоответствиеКолонок[10]], " ", ""));
		Исключение
			Сообщить("Строка " + НомерСтроки + ": Ошибка в сумме <" + СтрокаДанных[СоответствиеКолонок[10]] + ">");
			Продолжить;
		КонецПопытки;
		
		НоваяСтрока = Объект.База.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтрока);
		
	КонецЦикла;
	
	Объект.Записать();
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьТаблицуИзExcel(ФайлЗагрузки, СтруктураПараметрыПереданные = Неопределено) Экспорт 
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("НомерСтраницы", 1);
	СтруктураПараметры.Вставить("НачальнаяСтрока", 1);
	СтруктураПараметры.Вставить("НачальнаяКолонка", 1);
	СтруктураПараметры.Вставить("КонечнаяСтрока", 0);
	СтруктураПараметры.Вставить("КонечнаяКолонка", 0);
	СтруктураПараметры.Вставить("ОтсекатьНезначащиеСимволы", Истина);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметры, СтруктураПараметрыПереданные);
	
	Если ПустаяСтрока(ФайлЗагрузки) Тогда
		Предупреждение("Не указан файл загрузки!");
		Возврат Неопределено;
	КонецЕсли;
	
	Состояние("Запуск Excel");
	
	Попытка
		ОбъектExcel = Новый COMОбъект("Excel.Application");
	Исключение
		Предупреждение("Невозможно запустить MS Excel!" + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Состояние("Открытие файла");
	
	КнигиExcel = ОбъектExcel.WorkBooks;
	Попытка
		ТекстExcel = КнигиExcel.Open(ФайлЗагрузки);
	Исключение
		Предупреждение("Невозможно открыть файл " + ФайлЗагрузки + "!" + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ЛистExcel = ТекстExcel.Sheets(СтруктураПараметры.НомерСтраницы);
	
	ВсегоСтрок = ЛистExcel.Cells(1,1).SpecialCells(11).Row;
	ВсегоКолонок = ЛистExcel.Cells(1,1).SpecialCells(11).Column;

	СтруктураПараметры.КонечнаяСтрока = Мин(ВсегоСтрок, ?(СтруктураПараметры.КонечнаяСтрока = 0, ВсегоСтрок, СтруктураПараметры.КонечнаяСтрока));
	СтруктураПараметры.КонечнаяКолонка = Мин(ВсегоКолонок, ?(СтруктураПараметры.КонечнаяКолонка = 0, ВсегоКолонок, СтруктураПараметры.КонечнаяКолонка));
	
	//1c-izhtc spawn 07.08.15 (
	//ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат = Новый Массив;
	СтруктураКолонок = Новый Структура;
	СоответствиеКолонок = Новый Соответствие;
	//1c-izhtc spawn 07.08.15 )
	
	НомерКолонки = 0;
	Для НомКолонки = СтруктураПараметры.НачальнаяКолонка По СтруктураПараметры.КонечнаяКолонка Цикл
		//1c-izhtc spawn 07.08.15 (
		//ТаблицаРезультат.Колонки.Добавить("Колонка" + НомКолонки);
		СтруктураКолонок.Вставить("Колонка" + НомКолонки);
		СоответствиеКолонок.Вставить(НомерКолонки, "Колонка" + НомКолонки);
		НомерКолонки = НомерКолонки + 1;
		//1c-izhtc spawn 07.08.15 )
	КонецЦикла;
	
	ФиксированнаяСтруктураКолонок = Новый ФиксированнаяСтруктура(СтруктураКолонок);
	
	Для НомСтроки = СтруктураПараметры.НачальнаяСтрока По СтруктураПараметры.КонечнаяСтрока Цикл
		
		Состояние("Загрузка строки №" + НомСтроки);
		
		//1c-izhtc spawn 07.08.15 (
		//НоваяСтрока = ТаблицаРезультат.Добавить();
		НоваяСтрока = Новый Структура(ФиксированнаяСтруктураКолонок);
		//1c-izhtc spawn 07.08.15 )
		
		Для НомКолонки = СтруктураПараметры.НачальнаяКолонка По СтруктураПараметры.КонечнаяКолонка Цикл
			Значение = ЛистExcel.Cells(НомСтроки, НомКолонки).Text;
			Значение = ?(СтруктураПараметры.ОтсекатьНезначащиеСимволы, СокрЛП(Значение), Значение);
			//1c-izhtc spawn 07.08.15 (
			//НоваяСтрока[НомКолонки - 1] = Значение;
			НоваяСтрока["Колонка" + НомКолонки] = Значение;
			//1c-izhtc spawn 07.08.15 )
		КонецЦикла;
		
		ТаблицаРезультат.Добавить(НоваяСтрока); //1c-izhtc spawn 07.08.15
		
	КонецЦикла;
	
	Состояние("Закрытие Excel");
	
	Если ОбъектExcel <> Неопределено Тогда
		
		ОбъектExcel.displayAlerts = 0;
		ОбъектExcel.Application.Quit();
		КнигиExcel 	= Неопределено;
		ТекстExcel 	= Неопределено;
		ЛистExcel 	= Неопределено;
		ОбъектExcel = Неопределено;
		
	КонецЕсли;
	
	//1c-izhtc spawn 07.08.15 (
	//Возврат ТаблицаРезультат;
	СтруктураРезультат = Новый  Структура("СоответствиеКолонок, ТаблицаРезультат", СоответствиеКолонок, ТаблицаРезультат);
	Возврат СтруктураРезультат;
	//1c-izhtc spawn 07.08.15 )
	
КонецФункции

&НаСервере
Функция Объект_База_Количество(Объект)
	Возврат Объект.База.Количество();
КонецФункции
