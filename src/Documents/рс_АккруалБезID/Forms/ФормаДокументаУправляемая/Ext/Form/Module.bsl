////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущие значения реквизитов формы. Клиент.
&НаКлиенте 
Перем мКэшРеквизитовФормы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЭШЕМ РЕКВИЗИТОВ ФОРМЫ

// Процедура заполняет кэш реквизитов формы данными объекта.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	//мКэшРеквизитовФормы.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Дата = КонецДня(Объект.Дата);
		УстановитьДатуСторно();
	КонецЕсли;
	
	РассчитатьИтоги();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	Модифицированность = Ложь;
	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ     


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-30 (#3788)
&НаКлиенте
Процедура БазаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Объект.ок_СозданОбработкой Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В документах созданных обработкой запрещено добавление новых строк.");
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БазаПередУдалением(Элемент, Отказ)
	
	Если НЕ Объект.ок_СозданОбработкой Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.База.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийДокументПоСтроке = ПолучитьПоследнийДокументПоСтрокеНаСервере(ТекущиеДанные.ИДСтроки, Объект.ок_Кампания);
	Если ЗначениеЗаполнено(ПоследнийДокументПоСтроке)
		И ПоследнийДокументПоСтроке <> Объект.Ссылка Тогда
		
		ПоследнийДокументПоСтроке_Реквизиты = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПоследнийДокументПоСтроке, "Номер,Дата");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка используется в документе «Аккруал без ID» №" + ПоследнийДокументПоСтроке_Реквизиты.Номер 
															+ " от " + Формат(ПоследнийДокументПоСтроке_Реквизиты.Дата, "ДФ=dd.MM.yyyy") + ". Удаление невозможно", ПоследнийДокументПоСтроке); 
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-30 (#3788)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-09-10 (#3822)
&НаКлиенте
Процедура БазаПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Объект.ок_СозданОбработкой Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.База.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийДокументПоСтроке = ПолучитьПоследнийДокументПоСтрокеНаСервере(ТекущиеДанные.ИДСтроки, Объект.ок_Кампания);
	Если ЗначениеЗаполнено(ПоследнийДокументПоСтроке)
		И ПоследнийДокументПоСтроке <> Объект.Ссылка Тогда
		
		ПоследнийДокументПоСтроке_Реквизиты = ОК_ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПоследнийДокументПоСтроке, "Номер,Дата");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка используется в документе «Аккруал без ID» №" + ПоследнийДокументПоСтроке_Реквизиты.Номер 
															+ " от " + Формат(ПоследнийДокументПоСтроке_Реквизиты.Дата, "ДФ=dd.MM.yyyy") + ". Изменение невозможно", ПоследнийДокументПоСтроке); 
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-09-10 (#3822)

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьКэшЗначений();
	УстановитьНастройкиДоступностиЭлементов();
			
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие нового 
   	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьКэшЗначений();
		
	КонецЕсли;

	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		// Заполнить реквизиты значениями по умолчанию.
		рс_ОбщийМодуль.ЗаполнитьШапкуДокумента(Объект, Объект.Ссылка.Метаданные(), ПользователиКлиентСервер.ТекущийПользователь());
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не Отказ Тогда		
			//ТекущийОбъект.ДополнительныеСвойства.Вставить("СуммаАбсолютногоРасхождения"	  , Объект.СуммаАбсолютногоРасхождения);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();

	фКэшЗначений.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
 	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавлиант видимость доступность элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УстановитьВидимость()
	
	//ЭтоРегистрБюдж = Объект.РегистрБухгалтерии.ИмяОбъекта = "бит_Бюджетирование";
	//Элементы.Сценарий.Видимость = ЭтоРегистрБюдж;
	
	//БИТ Тртилек 24102013 назначим тип номеру заявки в зависимости от операции
	Если Объект.ВидОперации = Перечисления.рс_ВидыОперацийАккруалБезID.ПоМастерФайлу Тогда
		МассивСтрока = Новый Массив;
		МассивСтрока.Добавить(Тип("Строка"));
		Элементы.БазаНомерЗаявки.ОграничениеТипа = Новый ОписаниеТипов(МассивСтрока);
	Иначе
		МассивФормаВвода = Новый Массив;
		МассивФормаВвода.Добавить(Тип("ДокументСсылка.бит_ФормаВводаБюджета"));
		Элементы.БазаНомерЗаявки.ОграничениеТипа = Новый ОписаниеТипов(МассивФормаВвода);
	КонецЕсли;
	///БИТ Тртилек
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-20 (#3822)
	Элементы.Базаок_КомандаОткрытьИсториюИзмененийПоСтроке.Видимость = ЗначениеЗаполнено(Объект.ок_Кампания);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-20 (#3822)
	
КонецПроцедуры // УстановитьВидимостьДоступностьПоРегБух()

// Процедура применяет настройки доступности и видимости для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов() Экспорт
	
	// Получение таблицы настроек доступности элементов управления.
	ТаблицаНастроекДоступности = бит_ОбщегоНазначения.ПолучитьНастройкиДоступностиЭлементовУправления(Объект, Истина);
	
	// Фильтр таблицы настроек по статусу.
	ДокументЗаявка 			  = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ТекущийСтатус			  = Неопределено;
	ТаблицаАктуальныхНастроек = бит_ОбщегоНазначения.ПолучитьАктуальныеНастройки(ТаблицаНастроекДоступности
																				,ТекущийСтатус);
	
	// Структура параметров для проверки произвольного условия.
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ТекущийОбъект", Объект);
	//ПараметрыУсловия.Вставить("Статус"		 , ТекущийСтатус);
	
	// Применяем настройки.
	бит_ОбщегоНазначения.УстановитьДоступностьЭлементовУправленияПоНастройкам(ЭтаФорма
																			 ,ТаблицаАктуальныхНастроек
																			 ,ПараметрыУсловия);
КонецПроцедуры // УстановитьНастройкиДоступностиЭлементов()

&НаКлиенте
Процедура ПротоколРасчета(Команда)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура БазаСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ТекущиеДанные.СтатьяОборотов = рс_ОбщийМодуль.ПолучитьСтатьюОборотовПоСчетуМСФО(ТекущиеДанные.Счет);
	ТекущиеДанные.СчетНаименование = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Счет, "Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура БазаСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ТекущиеДанные.Счет = рс_ОбщийМодуль.ПолучитьСчетМСФОПоСтатьеОборотов(ТекущиеДанные.СтатьяОборотов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Объект.Дата = КонецДня(Объект.Дата);
	УстановитьДатуСторно();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуСторно()
	
	Объект.ДатаСторно = НачалоМесяца(ДобавитьМесяц(Объект.Дата, 1));
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтоги()
	
	СуммаИтог = Объект.База.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура БазаПриИзменении(Элемент)
	
	РассчитатьИтоги();

КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-30 (#3788)
&НаСервереБезКонтекста
Функция ПолучитьПоследнийДокументПоСтрокеНаСервере(ИДСтроки, Кампания, Дата = Неопределено)
	
	ПоследнийДокументПоСтроке = РегистрыСведений.ок_НачислениеАккруаловСоответствиеИДСтрокДокументу.ПолучитьПоследнийДокументПоСтроке(ИДСтроки, Кампания, Дата);
	Возврат ПоследнийДокументПоСтроке;
	
КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-30 (#3788)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-20 (#3822)
&НаКлиенте
Процедура ок_КомандаОткрытьИсториюИзмененийПоСтроке(Команда)
	
	БазаТекущиеДанные = Элементы.База.ТекущиеДанные;
	Если БазаТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(БазаТекущиеДанные.ИДСтроки) Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Кампания", Объект.ок_Кампания);
	СтруктураПараметров.Вставить("ИДСтроки", БазаТекущиеДанные.ИДСтроки);
	
	ОткрытьФорму("РегистрСведений.ок_НачислениеАккруаловСоответствиеИДСтрокДокументу.Форма.ФормаПросмотраИсторииПоСтроке", СтруктураПараметров,,БазаТекущиеДанные.ИДСтроки);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-20 (#3822)
