////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущие значения реквизитов формы. Клиент.
&НаКлиенте 
Перем мКэшРеквизитовФормы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устнавливает заголовок формы документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтаФорма
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С КЭШЕМ РЕКВИЗИТОВ ФОРМЫ

// Процедура заполняет кэш реквизитов формы данными объекта.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	Модифицированность = Ложь;
	
	//ОповеститьОЗаписиНового(ЭтаФорма.Объект);
	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ     


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-15 (#НТП_БП03_ФР04)

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ок_ДатаПриИзмененииНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ок_ДоговорКонтрагентаПриИзмененииНаКлиенте();
	
КонецПроцедуры

//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-15 (#НТП_БП03_ФР04)

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриЧтенииНаСервере" формы.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьКэшЗначений();
	УстановитьНастройкиДоступностиЭлементов();
			
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// стандартные действия при создании на сервере
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие нового 
   	Если Параметры.Ключ.Пустая() Тогда
		
		ЗаполнитьКэшЗначений();
		
	КонецЕсли;

	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) И НЕ Объект.ДокументОснование.Проведен Тогда
			Сообщить("Ввод на основании возможен только для проведенного документа!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		// Заполнить реквизиты значениями по умолчанию.
		рс_ОбщийМодуль.ЗаполнитьШапкуДокумента(Объект, Объект.Ссылка.Метаданные(), ПользователиКлиентСервер.ТекущийПользователь());
		
	КонецЕсли;
	
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-15 (#НТП_БП03_ФР04)
	ок_ВалютаРегламентированногоУчета	=	Константы.ВалютаРегламентированногоУчета.Получить();
	ок_КэшДаты							=	Объект.Дата;
	ок_УстановитьВидимостьСуммыРегл();
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-15 (#НТП_БП03_ФР04)

КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не Отказ Тогда		
			//ТекущийОбъект.ДополнительныеСвойства.Вставить("СуммаАбсолютногоРасхождения"	  , Объект.СуммаАбсолютногоРасхождения);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьНастройкиДоступностиЭлементов();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();

	фКэшЗначений.Вставить("ПредставлениеОбъекта", МетаданныеОбъекта.ПредставлениеОбъекта);
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ДокументОбъект." + МетаданныеОбъекта.Имя);
 	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавлиант видимость доступность элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УстановитьВидимость()
	
	//ЭтоРегистрБюдж = Объект.РегистрБухгалтерии.ИмяОбъекта = "бит_Бюджетирование";
	//Элементы.Сценарий.Видимость = ЭтоРегистрБюдж;
	
	СтруктураРеквизитыОснование = Новый Структура("бит_Дата, бит_Номер, ВидДокумента, Инициатор, НомерЗаявки");
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитыОснование, Объект.ДокументОснование);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураРеквизитыОснование);
	
КонецПроцедуры // УстановитьВидимостьДоступностьПоРегБух()

// Процедура применяет настройки доступности и видимости для элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов() Экспорт
	
	// Получение таблицы настроек доступности элементов управления.
	ТаблицаНастроекДоступности = бит_ОбщегоНазначения.ПолучитьНастройкиДоступностиЭлементовУправления(Объект, Истина);
	
	// Фильтр таблицы настроек по статусу.
	ДокументЗаявка 			  = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	ТекущийСтатус			  = Неопределено;
	ТаблицаАктуальныхНастроек = бит_ОбщегоНазначения.ПолучитьАктуальныеНастройки(ТаблицаНастроекДоступности
																				,ТекущийСтатус);
	
	// Структура параметров для проверки произвольного условия.
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ТекущийОбъект", Объект);
	//ПараметрыУсловия.Вставить("Статус"		 , ТекущийСтатус);
	
	// Применяем настройки.
	бит_ОбщегоНазначения.УстановитьДоступностьЭлементовУправленияПоНастройкам(ЭтаФорма
																			 ,ТаблицаАктуальныхНастроек
																			 ,ПараметрыУсловия);
КонецПроцедуры // УстановитьНастройкиДоступностиЭлементов()

&НаКлиенте
Процедура ПротоколРасчета(Команда)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-18 (#НТП_БП03_ФР04)
	//УстановитьВидимость();
	ок_ДокументОснованиеПриИзмененииНаСервере();
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-18 (#НТП_БП03_ФР04)
	
КонецПроцедуры

&НаКлиенте
Процедура БазаСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	//ТекущиеДанные.СтатьяОборотов = рс_ОбщийМодуль.ПолучитьСтатьюОборотовПоСчетуМСФО(ТекущиеДанные.Счет);
	ТекущиеДанные.СчетНаименование = ИнтеграцияС1СДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Счет, "Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура БазаСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	ТекущиеДанные.Счет = рс_ОбщийМодуль.ПолучитьСчетМСФОПоСтатьеОборотов(ТекущиеДанные.СтатьяОборотов);
	
КонецПроцедуры

// Rarus-spb byse 2012.12.27 {

&НаКлиенте
Процедура БазаСуммаПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-15 (#НТП_БП03_ФР04)
	// Пока так.
	ок_БазаСуммаПриИзмененииНаКлиенте();
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-15 (#НТП_БП03_ФР04)
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуДокумента ()
	мОбъект = РеквизитФормыВЗначение("Объект");
	мОбъект.РассчитатьСуммуДокумента();
	ЗначениеВРеквизитФормы(мОбъект,"Объект");
КонецПроцедуры	

//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-15 (#НТП_БП03_ФР04)

&НаСервере
Процедура ок_ДокументОснованиеПриИзмененииНаСервере()
	
	УстановитьВидимость();
	 
	Если Не Объект.ок_ВалютаДокумента = Объект.ДокументОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		
		Объект.ДоговорКонтрагента	=	Объект.ДокументОснование.ДоговорКонтрагента;
		Объект.ок_ВалютаДокумента	=	Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		Документы.рс_АккруалПоID.ок_УстановитьКурсВзаиморасчетов(Объект);
		
		ок_РассчитатьСуммуРеглТабличнойЧасти();
		ок_УстановитьВидимостьСуммыРегл();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ДатаПриИзмененииНаКлиенте()
	
	Если Объект.Дата = ок_КэшДаты Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКурса	=	ок_ПолучитьКурсВалюты(Объект.ок_ВалютаДокумента, Объект.Дата);
	Если Не СтруктураКурса.Курс = Объект.ок_КурсВзаиморасчетов 
		Или Не СтруктураКурса.Кратность = Объект.ок_КратностьВзаиморасчетов Тогда
		
		ТекстВопроса	=	"Актуальный курс валюты отличается от исходного. Будет пересчитана рублевая сумма в табличной части документа. Актуализировать курс в документе?";
		
		ДополнительныеПараметры	=	Новый Структура("Курс, Кратность");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СтруктураКурса);
		ДополнительныеПараметры.Вставить("Дата", ок_КэшДаты);
		
		ОписаниеОповещения	=	Новый ОписаниеОповещения("ок_ВопросРазличиеКурсовПриИзмененииДатыЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Различаются курсы", КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ВопросРазличиеКурсовПриИзмененииДатыЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос	=	КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Свойство("Курс",		Объект.ок_КурсВзаиморасчетов);
		ДополнительныеПараметры.Свойство("Кратность",	Объект.ок_КратностьВзаиморасчетов);
		ок_РассчитатьСуммуРеглТабличнойЧасти();	
	Иначе
		ДополнительныеПараметры.Свойство("Дата",		Объект.Дата);	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ок_ДатаПриИзмененииНаСервере()
	
	Документы.рс_АккруалПоID.ок_УстановитьКурсВзаиморасчетов(Объект);
	
	ок_РассчитатьСуммуРеглТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ДоговорКонтрагентаПриИзмененииНаКлиенте()
	
	СтруктураКурса	=	ок_ПолучитьКурсВалюты(Объект.ок_ВалютаДокумента, Объект.Дата);
	Если Не СтруктураКурса.Курс = Объект.ок_КурсВзаиморасчетов 
		Или Не СтруктураКурса.Кратность = Объект.ок_КратностьВзаиморасчетов Тогда
		
		ТекстВопроса	=	"Актуальный курс валюты отличается от исходного. Будет пересчитана рублевая сумма в табличной части документа. Актуализировать курс в документе?";
		
		ДополнительныеПараметры	=	Новый Структура("Курс, Кратность");
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СтруктураКурса);
		
		ОписаниеОповещения	=	Новый ОписаниеОповещения("ок_ВопросРазличиеКурсовПриИзмененииДоговораЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Различаются курсы", КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ок_БазаСуммаПриИзмененииНаКлиенте()
	
	ТекущиеДанные	=	Элементы.База.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	СтруктураСтроки	=	Новый Структура("Сумма, ок_СуммаРегл");
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущиеДанные);
	ок_БазаСуммаПриИзмененииНаСервере(СтруктураСтроки);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ок_БазаСуммаПриИзмененииНаСервере(СтруктураСтроки)
	
	СтруктураКурса	=	ок_ПолучитьКурсВалюты(ок_ВалютаРегламентированногоУчета, Объект.Дата);
	
	ок_РассчитатьСуммуРеглСтрокиТабличнойЧасти(СтруктураСтроки, 
			ок_ВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность);
	
КонецПроцедуры

&НаКлиенте
Процедура ок_ВопросРазличиеКурсовПриИзмененииДоговораЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос	=	КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Свойство("Курс",		Объект.ок_КурсВзаиморасчетов);
		ДополнительныеПараметры.Свойство("Кратность",	Объект.ок_КратностьВзаиморасчетов);
		ок_РассчитатьСуммуРеглТабличнойЧасти();	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ок_РассчитатьСуммуРеглТабличнойЧасти()
	
	СтруктураКурса	=	ок_ПолучитьКурсВалюты(ок_ВалютаРегламентированногоУчета, Объект.Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.База Цикл
		ок_РассчитатьСуммуРеглСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, 
			ок_ВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность);
	КонецЦикла;
							
КонецПроцедуры	

&НаСервере
Процедура ок_РассчитатьСуммуРеглСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Валюта, Курс, Кратность)
	
	Документы.рс_АккруалПоID.ок_РассчитатьСуммуРеглСтрокиТабличнойЧасти(Объект, СтрокаТабличнойЧасти, Валюта, Курс, Кратность);
							
КонецПроцедуры

&НаСервереБезКонтекста
Функция ок_ПолучитьКурсВалюты(Валюта, Дата)
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
	
КонецФункции

&НаСервере
Процедура ок_УстановитьВидимостьСуммыРегл()
	
	Видимость = ЗначениеЗаполнено(Объект.ок_ВалютаДокумента) 
					И Не Объект.ок_ВалютаДокумента = ок_ВалютаРегламентированногоУчета;
	
	Элементы.ок_ГруппаСуммаДокументаРегл.Видимость	=	Видимость;
	Элементы.ок_КурсВзаиморасчетов.Видимость		=	Видимость;
	Элементы.ок_ВалютаДокумента.Видимость			=	Видимость;
	Элементы.Базаок_СуммаРегл.Видимость				=	Видимость;
	
КонецПроцедуры

//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-15 (#НТП_БП03_ФР04)
