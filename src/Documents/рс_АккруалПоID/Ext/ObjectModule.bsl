#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
//
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
//
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,ПользователиКлиентСервер.ТекущийПользователь()
												,ПараметрОбъектКопирования);
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-15 (#НТП_БП03_ФР04)											
	ВалютаРегламентированногоУчета	=	Константы.ВалютаРегламентированногоУчета.Получить();
	Если ЗначениеЗаполнено(ок_ВалютаДокумента) И Не ок_ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Документы.рс_АккруалПоID.ок_УстановитьКурсВзаиморасчетов(ЭтотОбъект);
	КонецЕсли;
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-15 (#НТП_БП03_ФР04)
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()
											
// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
//
// Параметры:
//  СтруктураШапкиДокумента - Структура
//  СтруктураТаблиц         - Структура
//  Отказ            		- Булево
//  Заголовок 				- Строка
//
Процедура ПроверкаДанных(Отказ)
	
КонецПроцедуры // ПроверкаДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура выполняет движения по регистрам.
//
Процедура ДвиженияПоРегистрам(Отказ)
	
	ДвиженияМСФО	= Движения.бит_Дополнительный_2;
	
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-18 (#НТП_БП03_ФР04)
	ВалютаРегламентированногоУчета	=	Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ЗначениеЗаполнено(ок_ВалютаДокумента) И Не ок_ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		
		ВалютаУправленческогоУчета		=	Константы.бит_ВалютаУправленческогоУчета.Получить();
		
		УчетнаяПолитикаНаДатуДокумента 	=	бит_му_ОбщегоНазначения.ПолучитьУчетнуюПолитику(Дата, Новый Структура("Организация", Организация));
		ВалютаМеждународногоУчета		=	бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(УчетнаяПолитикаНаДатуДокумента, 
												ПланыВидовХарактеристик.бит_му_ВидыПараметровУчетнойПолитики.ВалютаМеждународногоУчета);
		
		СтруктураКурсаМУ	=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаМеждународногоУчета, 		Дата);
		СтруктураКурсаУпр	=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, 		Дата);
		СтруктураКурсаРегл	=	РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, 	Дата);
		
		Для Каждого СтрокаТабличнойЧасти Из База Цикл
			
			Движение 					=	ДвиженияМСФО.Добавить();
			
			Движение.Период 	 		=	Дата;
			Движение.Организация 		=	Организация;
			
			Движение.СчетДт 			=	СтрокаТабличнойЧасти.Счет;
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Объект",  СтрокаТабличнойЧасти.Объект);
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Функции",  СтрокаТабличнойЧасти.ФункцияЦФО);
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Периоды",  рс_ОбщийМодуль.ПолучитьМесяцНачисленияПоДате(СтрокаТабличнойЧасти.Период));
			
			Движение.СчетКт 			=	рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(Справочники.рс_ПоказателиНастроекЭУ.ок_СчетУчетаЗадолженностиПоАккруаламВал, Дата);
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Контрагент);
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДоговорыКонтрагентов",  ДоговорКонтрагента);
			
			Движение.ВалютаКт			=	ок_ВалютаДокумента;
			Движение.ВалютнаяСуммаКт	=	СтрокаТабличнойЧасти.Сумма;
			
			Движение.СуммаМУ			=	РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
												СтрокаТабличнойЧасти.ок_СуммаРегл, ВалютаРегламентированногоУчета, ВалютаМеждународногоУчета, СтруктураКурсаРегл.Курс,
												СтруктураКурсаМУ.Курс, СтруктураКурсаРегл.Кратность, СтруктураКурсаМУ.Кратность);
			
			Движение.СуммаРегл			=	СтрокаТабличнойЧасти.ок_СуммаРегл;
			
			Движение.СуммаУпр			=	РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
												СтрокаТабличнойЧасти.ок_СуммаРегл, ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета, СтруктураКурсаРегл.Курс,
												СтруктураКурсаУпр.Курс, СтруктураКурсаРегл.Кратность, СтруктураКурсаУпр.Кратность);
											
			Движение.ВидДвиженияМСФО	=	Перечисления.БИТ_ВидыДвиженияМСФО.Аккруал;
			Движение.Содержание 		=	СокрЛП(Комментарий) + "; ID: " + СокрЛП(ID);
			
		КонецЦикла;	
	Иначе
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-18 (#НТП_БП03_ФР04)
	
		Для Каждого СтрокаБаза Из База Цикл
			
			Движение = ДвиженияМСФО.Добавить();
			Движение.Период 	 		= Дата;
			Движение.Организация 		= Организация;
			
			Движение.СчетДт 			= СтрокаБаза.Счет;
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Объект",  СтрокаБаза.Объект);
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Функции",  СтрокаБаза.ФункцияЦФО);
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, "Периоды",  рс_ОбщийМодуль.ПолучитьМесяцНачисленияПоДате(СтрокаБаза.Период));
			
			Движение.СчетКт 			= рс_ОбщийМодуль.ПолучитьНастройкуЭкономическогоУчета(Справочники.рс_ПоказателиНастроекЭУ.СчетУчетаЗадолженностиПоАккруалам, Дата);
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "Контрагенты", Контрагент);
			рс_ОбщийМодуль.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, "ДоговорыКонтрагентов",  ДоговорКонтрагента);
			
			Движение.СуммаМУ			= СтрокаБаза.Сумма;
			Движение.СуммаРегл			= СтрокаБаза.Сумма;
			Движение.СуммаУпр			= СтрокаБаза.Сумма;
			Движение.ВидДвиженияМСФО	= Перечисления.БИТ_ВидыДвиженияМСФО.Аккруал;
			Движение.Содержание 		= СокрЛП(Комментарий) + "; ID: " + СокрЛП(ID);
			
		КонецЦикла;
	
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-18 (#НТП_БП03_ФР04)
	КонецЕсли;
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-18 (#НТП_БП03_ФР04)
	
КонецПроцедуры // ДвиженияПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПриКопировании"
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры // ПриКопировании()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
	КонецЕсли;
	
	ТаблицаБаза = База.Выгрузить();
	ТаблицаБаза.Свернуть("Счет");
	
	Если ТаблицаБаза.Количество() = 1 Тогда
		Счет = ТаблицаБаза[0].Счет;
	Иначе
		Счет = Неопределено;
	КонецЕсли;
	
	IDБезЧерточки = СокрЛП(СтрЗаменить(ID, "-", ""));
	
	РассчитатьСуммуДокумента();
	
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Начало 2020-01-15 (#НТП_БП03_ФР04) 
	ок_СуммаДокументаРегл = База.Итог("ок_СуммаРегл");
	Если Не ЗначениеЗаполнено(ок_ВалютаДокумента) Тогда
		ок_ВалютаДокумента	=	Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	//ОКЕЙ Первухин В.С. (ПервыйБИТ) Конец 2020-01-15 (#НТП_БП03_ФР04)
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Проверка данных
	ПроверкаДанных(Отказ);
	
	// Проведение
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Отказ);
	КонецЕсли; 

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип ("Структура") Тогда
		Документы.рс_АккруалПоID.ЗаполнениеПоОснованию(ЭтотОбъект, ДанныеЗаполнения.Основание,,,ДанныеЗаполнения.ОтборПоПериоду);
	Иначе	
		Документы.рс_АккруалПоID.ЗаполнениеПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Rarus-spb byse 2012.12.27 {
Процедура РассчитатьСуммуДокумента () Экспорт
	СуммаДокумента = База.Итог("Сумма");
КонецПроцедуры	                        
// Rarus-spb byse 2012.12.27 {

#КонецЕсли