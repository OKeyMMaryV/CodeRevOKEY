
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Дата");
	фКэшРеквизитов.Вставить("Организация");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();
	
	СформироватьДеревоВидовОпераций();
	СформироватьПодменюВидовОпераций();
	
	// Заполнить соответствие объектов ОС и их инвентарных номеров.
	ЗаполнитьИнвентарныеНомера();
	ЗаполнитьЕдиницыИзмерения();

	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	Иначе
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Изменение кода. Начало. 11.03.2015{{
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда

			Если Не бит_УправлениеПользователямиСервер.ЗначениеПоУмолчаниюТиповой("ЗапрашиватьВидОперацииПриВводеНового") Тогда
				
				ПриОткрытииЭтоНовыйОкончание(Неопределено, Отказ);
				
			Иначе 
			
				Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииОкончание", ЭтотОбъект); 
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СсылкаДокумента"    , Объект.Ссылка);
				ПараметрыФормы.Вставить("ДеревоВидовОпераций", фДеревоВидовОпераций);
				ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;	
				
		Иначе
			
			ПриОткрытииПромежуточная(Отказ);
			ПриОткрытииОкончание();
			
		КонецЕсли;
						
	Иначе
		
		ПриОткрытииОкончание();
		
	КонецЕсли;
	// Изменение кода. Конец. 11.03.2015}}
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Имена = СформироватьИменаПоВидуОперации(Объект.ВидОперации);
		
		Если ВыбранноеЗначение.Свойство("Действие") Тогда
			
			Если ВРег(ВыбранноеЗначение.Действие) = ВРег("Загрузить") Тогда
				
				Если Объект.ВНА.Количество() > 0 Тогда
					
					Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
					ТекстВопроса = НСтр("ru='Табличная часть ""ВНА"" будет очищена. Продолжить?'");
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
					
				Иначе
					
					ДобавитьЗагрузитьВНА(ВыбранноеЗначение);
					
				КонецЕсли;
				
			Иначе
				
				 ДобавитьЗагрузитьВНА(ВыбранноеЗначение);
				
			КонецЕсли; 
			
		КонецЕсли; // В структуре есть поле действие 
		
	КонецЕсли; // Это структура
	
КонецПроцедуры

// Процедура - завершение выбора ОС 
// 
&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВНА.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьЗагрузитьВНА(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заполнить соответствие объектов ОС и их инвентарных номеров.
	ЗаполнитьИнвентарныеНомера();
	ЗаполнитьЕдиницыИзмерения();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_ВыработкаВНА";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация, , Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	фКэшРеквизитов.Дата = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация <> фКэшРеквизитов.Организация 
		И Объект.ВНА.Количество() > 0 Тогда
		
		Имена = СформироватьИменаПоВидуОперации(Объект.ВидОперации);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьИзменениеОрганизации", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть ""ВНА"" будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ПриИзмененииОрганизации();
														  
		фКэшРеквизитов.Организация = Объект.Организация;

	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - завершение изменения реквизита "Организация".
// 
&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВНА.Очистить();
	Иначе
		Объект.Организация = фКэшРеквизитов.Организация;
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОрганизации();
														  
	фКэшРеквизитов.Организация = Объект.Организация;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВНА

&НаКлиенте
Процедура ВНАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные = Элементы.ВНА.ТекущиеДанные;
		ТекущиеДанные.ОбъектВНА = ПолучитьПустоеЗначениеВНА();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАОбъектВНАПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВНА.ТекущиеДанные;
	
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ЗаполнитьИнвентарныеНомера(ИДСтроки);
	ЗаполнитьЕдиницыИзмерения(ИДСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВНАОбъектВНАОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВНА.ТекущиеДанные;
	ТекущиеДанные.ОбъектВНА = ПолучитьПустоеЗначениеВНА();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте 
Процедура КомандаУстановитьОперацию(Команда)

	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли; 
    
    // Запомним предыдущие реквизиты для сравнения с новыми значениями.
	ПредыдущийВидОперации = Объект.ВидОперации;
	
	ИмяКоманды		= Команда.Имя;
	ИмяКнопки       = СтрЗаменить(ИмяКоманды, "Команда_", "");
	Позиция         = Найти(ИмяКнопки, "_");
	ИмяПодменю      = Лев(ИмяКнопки  , Позиция - 1);
	ИмяВидаОперации = Сред(ИмяКнопки , Позиция + 1);
	
	Объект.ВидОперации = фКэшЗначений.ВидыОпераций[ИмяВидаОперации];
	
	Если ПредыдущийВидОперации = Объект.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВНА.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПредыдущийВидОперации", ПредыдущийВидОперации);
		
		Оповещение = Новый ОписаниеОповещения("КомандаУстановитьОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

	Иначе
		
		// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
		УстановитьЗаголовокФормыДокумента();
		
		УправлениеЭлементамиФормы();
		
		Модифицированность = Истина;

		
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура - завершение обработки команды "УстановитьОперацию".
// 
&НаКлиенте
Процедура КомандаУстановитьОперациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ВНА.Очистить();
	Иначе
		Объект.ВидОперации = ДополнительныеПараметры["ПредыдущийВидОперации"];
		Возврат;
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();

	УправлениеЭлементамиФормы();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ДатаОкончания", КонецМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийВыработкаВНА.ОсновныеСредства Тогда
		
		ПараметрыФормы.Вставить("Режим", фКэшЗначений.Перечисления.бит_му_РежимыПодбораВНА.ВыработкаОС);
		ПараметрыФормы.Вставить("МОЛ", Объект.МОЛ);
		ПараметрыФормы.Вставить("Местонахождение", Объект.Подразделение);
		ПараметрыФормы.Вставить("МетодНачисленияАмортизации", фКэшЗначений.Перечисления.бит_му_МетодыНачисленияАмортизации.Производственный);
		
	ИначеЕсли Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийВыработкаВНА.НематериальныеАктивы Тогда
		
		ПараметрыФормы.Вставить("Режим", фКэшЗначений.Перечисления.бит_му_РежимыПодбораВНА.ВыработкаНМА);
		ПараметрыФормы.Вставить("МетодНачисленияАмортизации", фКэшЗначений.Перечисления.бит_му_МетодыНачисленияАмортизацииНМА.Производственный);
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КомандаПодборЗавершение", ЭтотОбъект);
	РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Обработка.бит_му_ПодборВНА.Форма", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОкна);
	
КонецПроцедуры

// Процедура - завершение обработки команды "Подбор".
// 
&НаКлиенте
Процедура КомандаПодборЗавершение(РезСтруктура, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьИнвентарныеНомера();
	ЗаполнитьЕдиницыИзмерения();
	
КонецПроцедуры // СценарийВопросЗавершение	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	КэшированныеЗначения.Вставить("ВидыОпераций", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийВыработкаВНА));
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшированныеЗначения.Вставить("ОСПустаяСсылка", Справочники[бит_ОбщегоНазначения.ПолучитьИмяСправочникаОсновныеСредства()].ПустаяСсылка());
	// Адаптация для ERP. Конец. 18.03.2014}}
	КэшированныеЗначения.Вставить("НМАПустаяСсылка", Справочники.НематериальныеАктивы.ПустаяСсылка());
	
	КэшПеречисления = Новый Структура;
	
	КэшПеречисления.Вставить("бит_му_ВидыОперацийВыработкаВНА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_ВидыОперацийВыработкаВНА));
	КэшПеречисления.Вставить("бит_му_РежимыПодбораВНА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_РежимыПодбораВНА));
	КэшПеречисления.Вставить("бит_му_МетодыНачисленияАмортизацииНМА", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МетодыНачисленияАмортизацииНМА));
	КэшПеречисления.Вставить("бит_му_МетодыНачисленияАмортизации", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_му_МетодыНачисленияАмортизации));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ЭтоОС = ?(Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийВыработкаВНА.ОсновныеСредства,Истина,Ложь);
	Имена = СформироватьИменаПоВидуОперации(Объект.ВидОперации);
	
	Элементы.ВНАОбъектВНА.Заголовок = Имена.НаименованиеКолонки;
	Элементы.ВНАИнвентарныйНомер.Видимость = ЭтоОС;
	
КонецПроцедуры

// Формирует кэш значений реквизитов формы.
// 
&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует список видов операций для выбора вида операции при создании документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура СформироватьДеревоВидовОпераций()

	КореньДерева = фДеревоВидовОпераций.ПолучитьЭлементы();
	
	СтрокаНовая = КореньДерева.Добавить();
	СтрокаНовая.ВидОперации = НСтр("ru = 'Доступные виды операций'");
	
	ЭлементыДерева = СтрокаНовая.ПолучитьЭлементы();
	
	Для каждого ТекЗначение Из Перечисления.бит_му_ВидыОперацийВыработкаВНА Цикл
		
		СтрокаНовая = ЭлементыДерева.Добавить();
		СтрокаНовая.ВидОперации = ТекЗначение;	
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоВидовОпераций()

// Формирует список видов операций для выбора вида операции при создании документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура СформироватьПодменюВидовОпераций()
 
	// Заполняем виды операций для группы подменю.
	Для Каждого ЭлементЗаполнения Из Объект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		
		ИмяЗначенияПеречисления = ЭлементЗаполнения.Имя;
		ЗначениеПеречисления 	= Перечисления.бит_му_ВидыОперацийВыработкаВНА[ИмяЗначенияПеречисления];
		
		ИмяКнопки = ИмяЗначенияПеречисления;
		
		ИмяКоманды = "Команда_" + ИмяКнопки;
		
		// Добавляем новую команду обработки выбора вида операции.
		КомандаУстановитьОперацию = Команды.Добавить(ИмяКоманды);
		КомандаУстановитьОперацию.Действие = "КомандаУстановитьОперацию";
		
		КнопкаГруппыПодменю = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ПодменюВидаОперации);
		КнопкаГруппыПодменю.Вид		   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаГруппыПодменю.ИмяКоманды = ИмяКоманды;
		КнопкаГруппыПодменю.Заголовок  = ЭлементЗаполнения.Синоним;
		
	КонецЦикла; 
	
КонецПроцедуры // СформироватьПодменюВидовОпераций()

// Процедура заполняет инвентарные номера ОС в строках таб.части.
// 
// Параметры:
// 	ИДСтроки - произвольный - идентификатор текущей строки, указывается
// 							  , если необходимо заполнить инв.номер в конкретной строке.
// 
&НаСервере
Процедура ЗаполнитьИнвентарныеНомера(ИДСтроки=Неопределено)
	
	Если НЕ Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийВыработкаВНА.ОсновныеСредства Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеОС_ИнвентарныйНомер = Новый Соответствие;
	
	Если ИДСтроки = Неопределено Тогда
		
		бит_му_ВНА.ЗаполнитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
															,Объект.ВНА.Выгрузить().ВыгрузитьКолонку("ОбъектВНА")
															,Объект.Организация);
													   
		Для Каждого ТекСтрока Из Объект.ВНА Цикл
			ТекСтрока.ИнвентарныйНомер = СоответствиеОС_ИнвентарныйНомер[ТекСтрока.ОбъектВНА];
		КонецЦикла;
		
	Иначе
		ДанныеСтроки = Объект.ВНА.НайтиПоИдентификатору(ИДСтроки);
		
		Если НЕ ДанныеСтроки = Неопределено Тогда
			ДанныеСтроки.ИнвентарныйНомер = бит_му_ВНА.ПолучитьСоответствиеОС_ИнвентарныйНомер(СоответствиеОС_ИнвентарныйНомер
																					,ДанныеСтроки.ОбъектВНА
																					,Объект.Организация);
		КонецЕсли;
																				
	КонецЕсли;
	
КонецПроцедуры

// Заполняет единицы измерения в строках таб.части.
// 
// Параметры:
// 	ИДСтроки - произвольный - идентификатор текущей строки, указывается
// 							, если необходимо заполнить инв.номер в конкретной строке.
// 
&НаСервере
Процедура ЗаполнитьЕдиницыИзмерения(ИДСтроки=Неопределено)
	
	Если ИДСтроки = Неопределено Тогда
		МассивВНА = Объект.ВНА.Выгрузить().ВыгрузитьКолонку("ОбъектВНА");
		бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивВНА);
	Иначе
		ДанныеСтроки = Объект.ВНА.НайтиПоИдентификатору(ИДСтроки);
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		МассивВНА = Новый Массив;
		МассивВНА.Добавить(ДанныеСтроки.ОбъектВНА);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация"  , Объект.Организация);
	СтруктураПараметров.Вставить("МоментВремени", ?(Параметры.Ключ.Пустая(),КонецДня(Объект.Дата),Объект.Ссылка.МоментВремени()));
	
	Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийВыработкаВНА.ОсновныеСредства Тогда
		ПараметрЕдиницаИзмерения = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ЕдиницаИзмеренияОбъемаПродукции_ОС;
	    СтруктураПараметров.Вставить("ОсновноеСредство",МассивВНА);		
	ИначеЕсли Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийВыработкаВНА.НематериальныеАктивы Тогда	
		ПараметрЕдиницаИзмерения = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ЕдиницаИзмеренияОбъемаПродукции_НМА;
	    СтруктураПараметров.Вставить("НематериальныйАктив",МассивВНА);		
	КонецЕсли;
	
	ПараметрыВНА = Новый Массив;
	ПараметрыВНА.Добавить(ПараметрЕдиницаИзмерения);
	
	СтруктураПараметров.Вставить("ПараметрыВНА", ПараметрыВНА);
	
	СоответствиеОС_Единиц = бит_му_ВНА.ПолучитьТаблицуПараметровВНА(СтруктураПараметров,"Соответствие");
	
	Если ИДСтроки = Неопределено Тогда
		
		Для Каждого ТекСтрока Из Объект.ВНА Цикл
			
			ЗначенияПараметров = СоответствиеОС_Единиц[ТекСтрока.ОбъектВНА];
			
			Если ЗначенияПараметров = Неопределено Тогда
				ТекСтрока.ЕдиницаИзмерения = "";
			Иначе
				ТекСтрока.ЕдиницаИзмерения = ЗначенияПараметров[ПараметрЕдиницаИзмерения];
			КонецЕсли;	
			
		КонецЦикла;
		
	Иначе
		ЗначенияПараметров = СоответствиеОС_Единиц[ДанныеСтроки.ОбъектВНА];
		
		Если ЗначенияПараметров = Неопределено Тогда
			ДанныеСтроки.ЕдиницаИзмерения = "";
		Иначе	
			ДанныеСтроки.ЕдиницаИзмерения = ЗначенияПараметров[ПараметрЕдиницаИзмерения];
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует имена/представления элементов формы в зависимости от вида операции.
// 
// Возвращаемое значение:
//   РезСтруктура   - Структура
// 
&НаСервере
Функция СформироватьИменаПоВидуОперации(ТекущийВидОперации)

	РезСтруктура = Новый Структура("НаименованиеТабЧасти,НаименованиеКолонки","","");
	
	НаименованиеТабЧасти = "";
	Если ТекущийВидОперации = Перечисления.бит_му_ВидыОперацийВыработкаВНА.ОсновныеСредства Тогда
	     РезСтруктура.НаименованиеТабЧасти = НСтр("ru = 'Основные средства'");
		 РезСтруктура.НаименованиеКолонки  = НСтр("ru = 'Основное средство'");
	ИначеЕсли ТекущийВидОперации = Перечисления.бит_му_ВидыОперацийВыработкаВНА.НематериальныеАктивы Тогда	
	     РезСтруктура.НаименованиеТабЧасти = НСтр("ru = 'Нематериальные активы'");
		 РезСтруктура.НаименованиеКолонки  = НСтр("ru = 'Нематериальный актив'");
	КонецЕсли; 
	
	Возврат РезСтруктура;

КонецФункции // СформироватьИменаПоВидуОперации()

// Выполняет действия необходимые при изменении Организации.
// 
&НаСервере
Процедура ПриИзмененииОрганизации()
	
	// Проверим принадлежность подразделения к выбранной организации.
	бит_ОбщегоНазначения.ПроверитьПринадлежностьАналитики(Объект
	                                                      ,
														  ,"Подразделение"
														  ,"Владелец"
														  ,"Организация"
														  ,"СправочникСсылка.ПодразделенияОрганизаций"
														  ,НСтр("ru = 'В документе'")
														  ,НСтр("ru = 'Изменение значения реквизита Организация'"));
	
КонецПроцедуры

// Выполняет добавление объектов ВНА полученных из обработки подбора.
// 
&НаСервере
Процедура ДобавитьЗагрузитьВНА(ВыбранноеЗначение)
	
	ОписаниеТаблицы = ВыбранноеЗначение.Данные;
	ТаблицаДанных = бит_ОбщегоНазначения.РаспаковатьТаблицуИзМассива(ОписаниеТаблицы.ПереченьОбъектов,ОписаниеТаблицы.ПереченьОбъектов_Колонки);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ОбъектВНА", СтрокаТаблицы.ВНА);
		
		МассивСтрок = Объект.ВНА.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество() = 0 Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = МассивСтрок[0];
		КонецЕсли;
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НоваяСтрока = Объект.ВНА.Добавить();
			НоваяСтрока.ОбъектВНА = СтрокаТаблицы.ВНА;
			
		Иначе
			
			Если Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийВыработкаВНА.ОсновныеСредства Тогда
				
				ТекстСообщения = НСтр("ru='Основное средство ""%1%"" инв. № %2% уже подобрано в строке №%3%!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						, СтрокаТаблицы.ВНА
																						, СтрокаТаблицы.ИнвентарныйНомер
																						, НайденнаяСтрока.НомерСтроки);
				 
			ИначеЕсли Объект.ВидОперации = Перечисления.бит_му_ВидыОперацийВыработкаВНА.НематериальныеАктивы Тогда	
				
				ТекстСообщения = НСтр("ru='Нематериальный актив ""%1%"" уже подобран в строке №%2%!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																						, СтрокаТаблицы.ВНА
																						, НайденнаяСтрока.НомерСтроки);
				
			КонецЕсли; 
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);										 
			
		КонецЕсли; 
		
	КонецЦикла; // По строкам таблицы данных
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(Объект.ВидОперации));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

&НаКлиенте
Функция ПолучитьПустоеЗначениеВНА()

	РезЗначение = фКэшЗначений.ОСПустаяСсылка;
	
	Если Объект.ВидОперации = фКэшЗначений.Перечисления.бит_му_ВидыОперацийВыработкаВНА.НематериальныеАктивы Тогда
	
		РезЗначение = фКэшЗначений.НМАПустаяСсылка;
	
	КонецЕсли; 
	
	Возврат РезЗначение;

КонецФункции // ПолучитьПустоеЗначениеВНА()

// Процедура окончание выбора вида операции.
// 
&НаКлиенте 
Процедура ВыборВидаОперацииОкончание(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;	
	Если СтруктураПараметров = Неопределено Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ);
		
КонецПроцедуры // ВыборВидаОперацииОкончание()

&НаКлиенте
Процедура ПриОткрытииЭтоНовыйОкончание(СтруктураПараметров, Отказ)

	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") 
		И СтруктураПараметров.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = СтруктураПараметров.ВидОперации;																		   
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ПриОткрытииПромежуточная(Отказ);
	ПриОткрытииОкончание();

КонецПроцедуры // ПриОткрытииЭтоНовыйОкончание()

&НаКлиенте
Процедура ПриОткрытииПромежуточная(Отказ)

	Если Отказ Тогда
		Закрыть();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда 
		Объект.ВидОперации = фКэшЗначений.ВидыОпераций.ОсновныеСредства;
	КонецЕсли;

	УправлениеЭлементамиФормы();
	
КонецПроцедуры // ПриОткрытииПромежуточная()

&НаКлиенте
Процедура ПриОткрытииОкончание()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();

КонецПроцедуры // ПриОткрытииОкончание()

#КонецОбласти
