
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
    // Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	
	
	// Вызов механизма защиты
	 	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Состояние = Перечисления.бит_СостоянияВыполненияСобытия.НеВыполнено;
		Объект.ПорядокВыполнения = ОпределитьПорядок();
		
	ИначеЕсли Параметры.Свойство("Договор") Тогда	
		
		Объект.Договор     = Параметры.Договор;
		Объект.Контрагент  = Параметры.Контрагент;
		Объект.Организация = Параметры.Организация;
		Объект.ПорядокВыполнения = ОпределитьПорядок();
		
	КонецЕсли;
	
	Если Параметры.Свойство("СуммаДоговора") Тогда
		СуммаДоговораРеквизит = Параметры.СуммаДоговора;
	КонецЕсли;
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_СобытиеДоговора";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ПроверитьСуммуДоговора() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаименование

&НаКлиенте
Процедура ВидСуммыПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью();
		
КонецПроцедуры

&НаКлиенте
Процедура ВидСобытияПриИзменении(Элемент)
	
	ЗаполнитьДанныеПоВИдуСобытия();
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура СобытиеКонтрольНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
    ПараметрыФормы.Вставить("Организация", Объект.Организация);

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы.Вставить("СобытиеИсходное", Объект.Ссылка);
	КонецЕсли;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеФормыВыбораСобытия", ЭтотОбъект);
	
	ОткрытьФорму("Документ.бит_СобытиеДоговора.ФормаВыбора", ПараметрыФормы,,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СобытиеКонтрольНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.СобытиеКонтроль) Тогда
		ПоказатьЗначение(,Объект.СобытиеКонтроль);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура управляет видимостью/доступностью элементами формы.
// 
// Параметры:
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью()

	// Вставить содержимое обработчика.
	Если Объект.ВидСуммы = Перечисления.бит_ВидыСуммСобытийДоговоров.Процент Тогда
		Элементы.Сумма.ТолькоПросмотр = Истина;
		Элементы.Процент.ТолькоПросмотр = Ложь;
		Объект.Сумма = 0;
		
	ИначеЕсли Объект.ВидСуммы = Перечисления.бит_ВидыСуммСобытийДоговоров.Сумма Тогда
		Элементы.Сумма.ТолькоПросмотр = Ложь;
		Элементы.Процент.ТолькоПросмотр = Истина;
		Объект.Процент = 0;
	КонецЕсли;

КонецПроцедуры // УправлениеВидимостьюДоступностью()

// Определяет порядок выполнения события. 
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаСервере
Функция ОпределитьПорядок()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_СобытиеДоговора.Ссылка) КАК КолвоДокументов
		|ИЗ
		|	Документ.бит_СобытиеДоговора КАК бит_СобытиеДоговора
		|ГДЕ
		|	бит_СобытиеДоговора.Организация = &Организация
		|	И бит_СобытиеДоговора.Контрагент = &Контрагент
		|	И бит_СобытиеДоговора.Договор = &Договор";

	Если ТипЗнч(Объект.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ТекстУсловия = "(бит_СобытиеДоговора.Договор = &Договор ИЛИ бит_СобытиеДоговора.Договор = &ПроектДоговора)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "бит_СобытиеДоговора.Договор = &Договор", ТекстУсловия); 
		Запрос.УстановитьПараметр("ПроектДоговора", Объект.Договор.бит_ПроектДоговора); 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		КолвоСобытий = Выборка.КолвоДокументов + 1;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КолвоСобытий;

КонецФункции // ОпределитьПорядок()

// Процедура заполянет данные по виду события. 
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаСервере
Процедура ЗаполнитьДанныеПоВидуСобытия()

	Если ЗначениеЗаполнено(Объект.ВидСобытия) Тогда
		ВидСобытия = Объект.ВидСобытия;
		
		Объект.Продолжительнось = ВидСобытия.Продолжительность;
		Объект.Сумма            = ВидСобытия.Сумма;
		Объект.Процент          = ВидСобытия.Процент;
		Объект.ТипДней          = ВидСобытия.ТипДней;
		Объект.ВидСуммы         = ВидСобытия.ВидСуммы;
		
		Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда 
			Объект.Наименование = ВидСобытия.Наименование;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДанныеПоВИдуСобытия()

// Процедура устанавливает значения для полей "СобытиеКонтроль" и "СобытиеКонтрольНаименование".  
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаСервере
Процедура УстановитьЗначенияСобытияКонтрольСервер(Событие)

	Объект.СобытиеКонтроль = Событие;
	Объект.СобытиеКонтрольНаименование = Событие.Наименование;

КонецПроцедуры // УстановитьЗначенияСобытияКонтрольСервер()

// Функция выполняет проверку по сумме договора.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
&НаСервере
Функция ПроверитьСуммуДоговора()

	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	
	Если СуммаДоговораРеквизит > 0 Тогда
		
		СуммаДоговора = СуммаДоговораРеквизит;
		
	Иначе
		
		Если ТипЗнч(Объект.Договор) = Тип("ДокументСсылка.бит_ПроектДоговора") Тогда
			СуммаДоговора = Объект.Договор.СуммаВзаиморасчеты;
		Иначе
			СуммаДоговора = Объект.Договор.бит_СуммаДоговора;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	бит_СобытиеДоговора.ВидСуммы,
			|	бит_СобытиеДоговора.Сумма,
			|	бит_СобытиеДоговора.Процент,
			|	бит_СобытиеДоговора.ПорядокВыполнения,
			|	бит_СобытиеДоговора.Наименование,
			|	бит_СобытиеДоговора.Состояние
			|ИЗ
			|	Документ.бит_СобытиеДоговора КАК бит_СобытиеДоговора
			|ГДЕ
			|	бит_СобытиеДоговора.Организация = &Организация
			|	И бит_СобытиеДоговора.Контрагент = &Контрагент
			|	И бит_СобытиеДоговора.Договор = &Договор
			|	И бит_СобытиеДоговора.Проведен = ИСТИНА
			|	И бит_СобытиеДоговора.Ссылка <> &Ссылка";

	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
    Запрос.УстановитьПараметр("Договор", Объект.Договор);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	СуммаПоСобытиям = 0;
	
	Пока Выборка.Следующий() Цикл
				
		Если Выборка.ВидСуммы = Перечисления.бит_ВидыСуммСобытийДоговоров.Процент Тогда
			СуммаПоСобытиям = СуммаПоСобытиям + СуммаДоговора / 100 * Выборка.Процент;
		Иначе
			СуммаПоСобытиям = СуммаПоСобытиям + Выборка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ВидСуммы = Перечисления.бит_ВидыСуммСобытийДоговоров.Процент Тогда
		СуммаСобытия = СуммаДоговора / 100 * Объект.Процент;
	Иначе
		СуммаСобытия = Объект.Сумма;
	КонецЕсли;

	СуммаОстаток = СуммаДоговора - СуммаПоСобытиям;
	
	Если СуммаОстаток < СуммаСобытия Тогда
		ТекстСообщения = НСтр("ru = 'Сумма события превышает сумму остатка по договору на "+ (СуммаСобытия - СуммаОстаток) +".'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Результат = Истина;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // ПроверитьСуммуДоговора()

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Обработка оповещения закрытия формы выбора события. 
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаКлиенте
Процедура ЗакрытиеФормыВыбораСобытия(Результат, ДопПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		УстановитьЗначенияСобытияКонтрольСервер(Результат);
	КонецЕсли;
		
КонецПроцедуры // ОповещениеОЗакрытии()

#КонецОбласти

#КонецОбласти
