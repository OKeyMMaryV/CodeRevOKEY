#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мКоличествоСубконтоМУ Экспорт; // Хранит количество субконто международного учета в документа.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
               
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = ДанныеРаспределения.Итог("СуммаПогашенияОбязательства");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	ТабЧасть.Контрагент,
	               	|	ТабЧасть.ДоговорКонтрагента,
	               	|	ТабЧасть.СуммаКРаспределению,
	               	|	ТабЧасть.СуммаПроцентовПогашенных,
	               	|	ТабЧасть.СуммаПогашенияОбязательства,
	               	|	ТабЧасть.СчетКраткосрочныхПроцентов,
	               	|	ТабЧасть.СчетКраткосрочныхОбязательств,
	               	|	ТабЧасть.СчетРаспределяемыхПлатежей
	               	|ИЗ
	               	|	Документ.бит_му_РаспределениеПлатежейПоКредитамЗаймам.ДанныеРаспределения КАК ТабЧасть
	               	|ГДЕ
	               	|	ТабЧасть.Ссылка = &Ссылка";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоДанныеРаспределения = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДанныеРаспределения", ТаблицаПоДанныеРаспределения);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.ДанныеРаспределения;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Формируем проводку по погашению процентов.
		СформироватьЗаписьПоПогашениюПроцентов(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		
		// Формируем проводку по погашению обязательства.
		СформироватьЗаписьПоПогашениюОбязательства(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют);
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение по погашению процентов.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьЗаписьПоПогашениюПроцентов(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)
	
	// Сумма погашенных процентов из графика за текущий месяц, но не больше суммы аванса.
	Сумма = Мин(СтрокаТаблицы.СуммаКРаспределению, СтрокаТаблицы.СуммаПроцентовПогашенных);
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийбитРаспределениеПлатежейПоКредитамЗаймам;
	
	Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		// Дт Счет процентов краткосрочный Кт Счет распределяемых платежей.
		СчетДт = СтрокаТаблицы.СчетКраткосрочныхПроцентов;	СчетКт = СтрокаТаблицы.СчетРаспределяемыхПлатежей;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		// Дт Счет распределяемых платежей Кт Счет процентов краткосрочный.
		СчетДт = СтрокаТаблицы.СчетРаспределяемыхПлатежей;	СчетКт = СтрокаТаблицы.СчетКраткосрочныхПроцентов;
	КонецЕсли;
	
	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтруктураШапкиДокумента.ВалютаДокумента
										 ,СчетДт
										 ,СчетКт
										 ,Сумма
										 ,"Погашение процентов");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьЗаписьПоПогашениюПроцентов()

// Процедура формирует движение по погашению обязательства.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 	СтрокаТаблицы 			- Строка таблицы значений.
//  СтруктураКурсыВалют 	- Структура.
// 
Процедура СформироватьЗаписьПоПогашениюОбязательства(СтруктураШапкиДокумента, СтрокаТаблицы, СтруктураКурсыВалют)

	// Сумма разницы Аванса и процентов погашенных, но не больше суммы обязательства погашенного из графика.
	Сумма = Мин(СтрокаТаблицы.СуммаПогашенияОбязательства, СтрокаТаблицы.СуммаКРаспределению - СтрокаТаблицы.СуммаПроцентовПогашенных);
	
	ВидыОпераций = Перечисления.бит_му_ВидыОперацийбитРаспределениеПлатежейПоКредитамЗаймам;
	
	Если СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.КредитыЗаймыПолученные Тогда
		// Дт Счет обязательств краткосрочный Кт Счет распределяемых платежей.
		СчетДт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;	СчетКт = СтрокаТаблицы.СчетРаспределяемыхПлатежей;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = ВидыОпераций.ЗаймыВыданные Тогда
		// Дт Счет распределяемых платежей Кт Счет обязательств краткосрочный.
		СчетДт = СтрокаТаблицы.СчетРаспределяемыхПлатежей;		СчетКт = СтрокаТаблицы.СчетКраткосрочныхОбязательств;
	КонецЕсли;

	Запись = Движения.бит_Дополнительный_2.Добавить();
	
	// Заполнение атрибутов записи.
	СтруктураПараметров = Новый Структура("Организация,Период,Валюта,СчетДт,СчетКт,Сумма,Содержание"
										 ,СтруктураШапкиДокумента.Организация
										 ,СтруктураШапкиДокумента.Дата
										 ,СтруктураШапкиДокумента.ВалютаДокумента
										 ,СчетДт
										 ,СчетКт
										 ,Сумма
										 ,"Погашение обязательства");
										 
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);											   
	
	// Заполним аналитику счета Дт и Кт.
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "Контрагенты"		   , СтрокаТаблицы.Контрагент);
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ДоговорыКонтрагентов", СтрокаТаблицы.ДоговорКонтрагента);
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // СформироватьЗаписьПоПогашениюОбязательства()

#КонецОбласти

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли; 
		
		ВидОперации = Неопределено;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
