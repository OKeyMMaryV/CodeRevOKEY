#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 6, 0);
	
КонецФункции

Функция СчетаУчетаПредметаАренды(ДанныеОбъекта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.АрендованноеИмущество);
	Результат.Вставить("СчетУчетаНДС", ?(ДанныеОбъекта.РасчетыВУЕ, 
		ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ,
		ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам));
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Справка-расчет "Начисление процентных расходов"
	УчетПроцентовПоОбязательствам.ДобавитьКомандуПечатиНачислениеПроцентныхРасходов(КомандыПечати);
	
	// Справка-расчет "Рублевые суммы документа в валюте"
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьРублевыхСуммДокументовВВалюте";
	КомандаПечати.Идентификатор = "РублевыеСуммыДокументаВВалюте";
	КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Рублевые суммы документа в валюте""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ФункциональныеОпции = "ИспользоватьВалютныйУчет";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Изменение условий аренды (лизинга)""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Функция ПодготовитьТекстЗапросаДляПечатиСправкиРасчетаРублевыеСуммыДокументовВВалюте(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("ВТ_Реквизиты",                   НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаРеквизитов",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_РублевыеСуммые",              НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ЗачтенныеАвансы",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаПредоплат",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_ЗачтенныеАвансы", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_ВТ_Реквизиты",       НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаСумм",                    НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение_РублевыеСуммы",      НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Проведен КАК Проведен,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.УчетАгентскогоНДС, ЛОЖЬ) КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭлектронныеУслуги,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ИзменениеУсловийАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Проведен КАК Проведен,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Реквизиты.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	Реквизиты.ЭлектронныеУслуги КАК ЭлектронныеУслуги,
	|	Реквизиты.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	0 КАК ВсегоВал,
	|	0 КАК НДСВал
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РублевыеСуммы.Регистратор КАК Регистратор,
	|	РублевыеСуммы.ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента,
	|	РублевыеСуммы.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РублевыеСуммы.Всего КАК Всего,
	|	РублевыеСуммы.НДС КАК НДС,
	|	РублевыеСуммы.НалоговаяБазаНДС КАК НалоговаяБазаНДС
	|ПОМЕСТИТЬ РублевыеСуммы
	|ИЗ
	|	РегистрСведений.РублевыеСуммыДокументовВВалюте КАК РублевыеСуммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО РублевыеСуммы.Регистратор = Реквизиты.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ТабличнаяЧастьДокумента,
	|	НомерСтрокиДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Ссылка,
	|	Хозрасчетный.Сумма КАК СуммаПредоплатыРуб,
	|	Хозрасчетный.ВалютнаяСуммаДт КАК СуммаПредоплатыВал,
	|	ХозрасчетныйСубконто.Значение КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйСубконто.Значение) КАК ДокументПредоплатыПредставление,
	|	Реквизиты.Организация КАК Организация
	|ПОМЕСТИТЬ ЗачтенныеАвансы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО Хозрасчетный.Регистратор = Реквизиты.Ссылка
	|			И Хозрасчетный.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом
	|			И (Реквизиты.ВалютаДокумента <> &ВалютаРегламентированногоУчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗачтенныеАвансы.Ссылка КАК Ссылка,
	|	ЗачтенныеАвансы.СуммаПредоплатыРуб КАК СуммаПредоплатыРуб,
	|	ЗачтенныеАвансы.СуммаПредоплатыВал КАК СуммаПредоплатыВал,
	|	ЗачтенныеАвансы.Документ КАК Документ,
	|	ЗачтенныеАвансы.ДокументПредоплатыПредставление КАК ДокументПредоплатыПредставление,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента
	|ИЗ
	|	ЗачтенныеАвансы КАК ЗачтенныеАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ЗачтенныеАвансы.Организация = ДанныеПервичныхДокументов.Организация
	|			И ЗачтенныеАвансы.Документ = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗачтенныеАвансы.Ссылка
	|ИТОГИ
	|	СУММА(СуммаПредоплатыРуб),
	|	СУММА(СуммаПредоплатыВал)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗачтенныеАвансы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредметыАренды.Ссылка КАК Ссылка,
	|	ПредметыАренды.НомерСтроки КАК НомерСтроки,
	|	ПредметыАренды.ПредметАренды КАК Товар,
	|	ПредметыАренды.ПредметАренды.Наименование КАК ТоварНаименование,
	|	ПредметыАренды.Сумма КАК ВсегоВал,
	|	ПредметыАренды.СуммаНДС КАК НДСВал,
	|	ПредметыАренды.СтавкаНДС КАК СтавкаНДС,
	|	РублевыеСуммы.Всего КАК ВсегоРуб,
	|	РублевыеСуммы.НДС КАК НДСРуб,
	|	РублевыеСуммы.НалоговаяБазаНДС КАК НалоговаяБазаНДСРуб
	|ИЗ
	|	Документ.ИзменениеУсловийАренды.ПредметыАренды КАК ПредметыАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РублевыеСуммы КАК РублевыеСуммы
	|		ПО ПредметыАренды.Ссылка = РублевыеСуммы.Регистратор
	|			И (РублевыеСуммы.ТабличнаяЧастьДокумента = ЗНАЧЕНИЕ(Перечисление.ТабличныеЧастиДокументов.ПредметыАренды))
	|			И ПредметыАренды.НомерСтроки = РублевыеСуммы.НомерСтрокиДокумента
	|ГДЕ
	|	ПредметыАренды.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(ВсегоВал),
	|	СУММА(НДСВал),
	|	СУММА(ВсегоРуб),
	|	СУММА(НДСРуб),
	|	СУММА(НалоговаяБазаНДСРуб)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РублевыеСуммы";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ИзменениеУсловийАренды";
	Набор.ЭтоГруппа = Истина;
	Набор.Идентификатор = Новый УникальныйИдентификатор("8fe011e7-350c-48ae-be80-b753328de39c");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("ВедетсяУчетПредметовАренды")
		Или ПолучитьФункциональнуюОпцию("ВедетсяУчетЛизинговогоИмущества");
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ)
		Или Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		Или Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		Возврат;
	КонецЕсли;
		
	Если Не Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Параметры.Вставить("ЗначенияЗаполнения", Новый Структура);
	КонецЕсли;
	
	ЕстьСвойствоВидОперации = Параметры.ЗначенияЗаполнения.Свойство("ВидОперации");
	Если ЕстьСвойствоВидОперации Тогда
		Возврат;
	КонецЕсли;

	ЕстьЛизинг = ПолучитьФункциональнуюОпцию("ВедетсяУчетЛизинговогоИмущества");
	ЕстьАренда = ПолучитьФункциональнуюОпцию("ВедетсяУчетПредметовАренды");
	Если ЕстьЛизинг И ЕстьАренда Тогда // Просим пользователя выбрать вид операции
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ВыборОперации";
	Иначе
		ВидОперации = ?(ЕстьЛизинг, 
			Перечисления.ВидыОперацийИзменениеУсловийАренды.ИзменениеУсловийЛизинга,
			Перечисления.ВидыОперацийИзменениеУсловийАренды.ИзменениеУсловийАренды);
		Параметры.ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеПоступления(ДокументПоступления, Знач ДатаСведений = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПоступлениеВАренду.Организация КАК Организация,
		|	ПоступлениеВАренду.Контрагент КАК Контрагент,
		|	ПоступлениеВАренду.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПоступлениеВАренду.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		|	ПоступлениеВАренду.ВалютаДокумента КАК ВалютаДокумента,
		|	ПоступлениеВАренду.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ПоступлениеВАренду.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
		|	ВЫБОР
		|		КОГДА ПоступлениеВАренду.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВАренду.ПоступлениеВЛизинг)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИзменениеУсловийАренды.ИзменениеУсловийЛизинга)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИзменениеУсловийАренды.ИзменениеУсловийАренды)
		|	КОНЕЦ КАК ВидОперации,
		|	ПоступлениеВАренду.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
		|	ПоступлениеВАренду.СпособОценкиАрендыБУ КАК СпособОценкиАрендыБУ,
		|	ПоступлениеВАренду.СтавкаДисконтирования КАК СтавкаДисконтирования
		|ИЗ
		|	Документ.ПоступлениеВАренду КАК ПоступлениеВАренду
		|ГДЕ
		|	ПоступлениеВАренду.Ссылка = &ДокументПоступления
		|	И НЕ ПоступлениеВАренду.ЛизингДоФСБУ25
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредметыАренды.НомерСтроки КАК НомерСтроки,
		|	ПредметыАренды.ПредметАренды КАК ПредметАренды,
		|	ПредметыАренды.Сумма КАК Сумма,
		|	ПредметыАренды.СтавкаНДС КАК СтавкаНДС,
		|	ПредметыАренды.СуммаНДС КАК СуммаНДС,
		|	ПредметыАренды.ОценкаБУ КАК ОценкаБУ,
		|	ПредметыАренды.СчетУчета КАК СчетУчета,
		|	ПредметыАренды.СчетУчетаНДС КАК СчетУчетаНДС
		|ИЗ
		|	Документ.ПоступлениеВАренду.ПредметыАренды КАК ПредметыАренды
		|ГДЕ
		|	ПредметыАренды.Ссылка = &ДокументПоступления
		|	И НЕ ПредметыАренды.Ссылка.ЛизингДоФСБУ25
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикПлатежей.НомерСтроки КАК НомерСтроки,
		|	ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
		|	ГрафикПлатежей.СуммаПлатежа КАК СуммаПлатежа,
		|	ГрафикПлатежей.СуммаНДСПлатежа КАК СуммаНДСПлатежа
		|ИЗ
		|	Документ.ПоступлениеВАренду.ГрафикПлатежей КАК ГрафикПлатежей
		|ГДЕ
		|	ГрафикПлатежей.Ссылка = &ДокументПоступления
		|	И НЕ ГрафикПлатежей.Ссылка.ЛизингДоФСБУ25
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРеквизиты = Результат[0].Выгрузить();
	Данные = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	Если Данные.СпособОценкиАрендыБУ = Перечисления.СпособыОценкиБУ.РавнаРасходамЛизингодателя 
		Или Данные.СпособОценкиАрендыБУ = Перечисления.СпособыОценкиБУ.УказываетсяВручную Тогда
		Данные.СпособОценкиАрендыБУ = Перечисления.СпособыОценкиБУ.РассчитываетсяПоСтавке;
	КонецЕсли;
	
	ТаблицаПредметыАренды = Результат[1].Выгрузить();
	ОсновныеСредства = ТаблицаПредметыАренды.ВыгрузитьКолонку("ПредметАренды");
	
	ТаблицаГрафикПлатежей = Результат[2].Выгрузить();
	
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета
		|ИЗ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|			&ПериодСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство В (&ОсновныеСредства)) КАК СчетаБухгалтерскогоУчетаОС");
	Запрос.УстановитьПараметр("Организация", Данные.Организация);
	Запрос.УстановитьПараметр("ПериодСведений", ДатаСведений);
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для каждого СтрокаТаблицы Из ТаблицаПредметыАренды Цикл
		Отбор = Новый Структура("ОсновноеСредство", СтрокаТаблицы.ПредметАренды);
		Если Выборка.НайтиСледующий(Отбор) Тогда
			СтрокаТаблицы.СчетУчета = Выборка.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	
	Данные.Вставить("ПредметыАренды", ТаблицаПредметыАренды);
	Данные.Вставить("ГрафикПлатежей", ТаблицаГрафикПлатежей);
	
	Возврат Данные;
	
КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Реквизиты.Ссылка,
	|	Реквизиты.СуммаВключаетНДС,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.КурсВзаиморасчетов,
	|	Реквизиты.КратностьВзаиморасчетов,
	|	Реквизиты.НДСВключенВСтоимость,
	|	Реквизиты.СпособОценкиАрендыБУ,
	|	Реквизиты.СтоимостьОбязательства,
	|	Реквизиты.АвансовыеПлатежи
	|ИЗ
	|	Документ.ИзменениеУсловийАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Реквизиты.Вставить("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если Реквизиты.ВалютаВзаиморасчетов = Реквизиты.ВалютаРеглУчета Тогда
		Реквизиты.Вставить("КурсДокумента", 1);
		Реквизиты.Вставить("КратностьДокумента", 1);
		КоэффициентРуб = 1;
	Иначе
		Реквизиты.Вставить("КурсДокумента", Реквизиты.КурсВзаиморасчетов);
		Реквизиты.Вставить("КратностьДокумента", Реквизиты.КратностьВзаиморасчетов);
		КоэффициентРуб = Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Если Реквизиты.ВалютаВзаиморасчетов = Реквизиты.ВалютаДокумента Тогда
		Реквизиты.Вставить("КурсВзаиморасчетов", 1);
		Реквизиты.Вставить("КратностьВзаиморасчетов", 1);
		КоэффициентВзаиморасчетов = 1;
	Иначе
		Реквизиты.Вставить("КурсВзаиморасчетов", Реквизиты.КурсВзаиморасчетов); 
		Реквизиты.Вставить("КратностьВзаиморасчетов", Реквизиты.КратностьВзаиморасчетов);
		КоэффициентВзаиморасчетов = (Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов) / КоэффициентРуб;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КоэффициентВзаиморасчетов", КоэффициентВзаиморасчетов);
	Запрос.УстановитьПараметр("КоэффициентРуб",            КоэффициентРуб);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",           Реквизиты.ВалютаРеглУчета);
	Запрос.УстановитьПараметр("СуммаВключаетНДС",          Реквизиты.СуммаВключаетНДС);
	
	ПодготовитьТаблицыДокументаДляЦелейПриобретенияРеализации(Запрос, Реквизиты);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаЗачетАвансов(ПараметрыПроведения, НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаРеквизиты(НомераТаблиц)
		+ ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц)
		;
		
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	СтруктураТаблицДокумента = Новый Структура;
	СтруктураТаблицДокумента.Вставить("ТаблицаПредметыАренды", ПараметрыПроведения.ТаблицаПредметыАренды);
	ПараметрыПроведения.Вставить("СтруктураТаблицДокумента", СтруктураТаблицДокумента);
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

Функция НовыйГрафикПроцентовПоАренде(ТаблицаГрафикПлатежей, ТаблицаПредметыАренды, ТаблицаРеквизиты) Экспорт
	
	Результат = Новый Структура;
	УчетПроцентовПоОбязательствам.ЗаполнитьГрафикПроцентов(
		Результат, ТаблицаГрафикПлатежей, ТаблицаПредметыАренды, ТаблицаРеквизиты, "ОсновноеСредство");
	График = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "График");
	
	Возврат График;
	
КонецФункции

Функция ОстаткиРасчетов(ТаблицаПредметыАренды, ТаблицаРеквизиты)
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОстаткиБУ.Счет КАК Счет,
		|	ВЫБОР
		|		КОГДА ОстаткиБУ.Счет.Валютный
		|			ТОГДА ОстаткиБУ.ВалютнаяСуммаОстаток
		|		ИНАЧЕ ОстаткиБУ.СуммаОстаток
		|	КОНЕЦ КАК ОстатокВал
		|ПОМЕСТИТЬ ОстаткиБУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет В (&СчетаРасчетовПоАренде),
		|			&КонтрагентыДоговоры,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &ДоговорКонтрагента) КАК ОстаткиБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиБУ.Счет = &СчетРасчетов
		|				ТОГДА -ОстаткиБУ.ОстатокВал
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ВзаиморасчетыВал,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиБУ.Счет = &СчетПроцентов
		|				ТОГДА ОстаткиБУ.ОстатокВал
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПроцентыВал,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиБУ.Счет = &СчетНДС
		|				ТОГДА ОстаткиБУ.ОстатокВал
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСВал
		|ИЗ
		|	ОстаткиБУ КАК ОстаткиБУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПредметовАренды.ПредметАренды КАК ОсновноеСредство,
		|	ДанныеПредметовАренды.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрСведений.ДанныеПредметовАренды.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ДанныеПредметовАренды");
	
	Запрос.УстановитьПараметр("Период",
		Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	
	ОсновныеСредства = ТаблицаПредметыАренды.ВыгрузитьКолонку("ОсновноеСредство");
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	
	СчетаРасчетовПоАренде = Новый Массив;
	Запрос.УстановитьПараметр("СчетРасчетов", Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	СчетаРасчетовПоАренде.Добавить(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	Если Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		СчетПроцентов = ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеУЕ;
		СчетНДС = ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствамУЕ;
	ИначеЕсли Реквизиты.РасчетыВВалюте Тогда
		СчетПроцентов = ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеВал;
		СчетНДС = Неопределено;
	Иначе
		СчетПроцентов = ПланыСчетов.Хозрасчетный.ПроцентыПоАренде;
		СчетНДС = ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам;
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетПроцентов", СчетПроцентов);
	СчетаРасчетовПоАренде.Добавить(СчетПроцентов);
	Запрос.УстановитьПараметр("СчетНДС", СчетНДС);
	Если ЗначениеЗаполнено(СчетНДС) Тогда
		СчетаРасчетовПоАренде.Добавить(СчетНДС);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаРасчетовПоАренде", СчетаРасчетовПоАренде);
	
	КонтрагентыДоговоры = Новый Массив;
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("КонтрагентыДоговоры", КонтрагентыДоговоры);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ОстаткиРасчетов = Результаты[1].Выгрузить();
	ОстатокВзаиморасчетов = ОстаткиРасчетов.Итог("ВзаиморасчетыВал");
	ОстатокПроцентов = ОстаткиРасчетов.Итог("ПроцентыВал");
	ОстатокНДС = ОстаткиРасчетов.Итог("НДСВал");
	
	ДанныеРасчетов = Результаты[2].Выгрузить();
	Если ДанныеРасчетов.Количество() = 0 Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Контрагент: ""%1"", договор: ""%2"":
			|нет данных о поступлении предметов аренды.'"),
			Реквизиты.Контрагент,
			Реквизиты.ДоговорКонтрагента);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ДанныеРасчетов.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеРасчетов.Колонки.Добавить("ОстатокПроцентов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ДанныеРасчетов.Колонки.Добавить("ОстатокНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СуммыВзаиморасчетов = ДанныеРасчетов.ВыгрузитьКолонку("СуммаВзаиморасчетов");
	
	Если ОстатокВзаиморасчетов > 0 Тогда
		СуммыВзаиморасчетовБУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			ОстатокВзаиморасчетов, СуммыВзаиморасчетов);
		ДанныеРасчетов.ЗагрузитьКолонку(СуммыВзаиморасчетовБУ, "ОстатокВзаиморасчетов");
	КонецЕсли;
	Если ОстатокПроцентов > 0 Тогда
		СуммыПроцентов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			ОстатокПроцентов, СуммыВзаиморасчетов);
		ДанныеРасчетов.ЗагрузитьКолонку(СуммыПроцентов, "ОстатокПроцентов");
	КонецЕсли;
	Если ОстатокНДС > 0 Тогда
		СуммыНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			ОстатокНДС, СуммыВзаиморасчетов);
		ДанныеРасчетов.ЗагрузитьКолонку(СуммыНДС, "ОстатокНДС");
	КонецЕсли;
	
	УдаляемыеСтроки = Новый Массив;
	Для каждого СтрокаТаблицы Из ДанныеРасчетов Цикл
		Если ОсновныеСредства.Найти(СтрокаТаблицы.ОсновноеСредство) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ДанныеРасчетов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат ДанныеРасчетов;
	
КонецФункции

Функция ТаблицыДанныеДвижений(ТаблицаПредметыАренды, ПараметрыНачисленияАмортизации, ТаблицаРеквизиты) Экспорт
	
	// По этой таблице будут формироваться проводки
	ТаблицаДанныеПроводок = НовыйТаблицаДанныеПроводок();
	// По этой таблице будут формироваться движения регистра ПараметрыАмортизацииОСБухгалтерскийУчет 
	ТаблицаПараметрыАмортизации = НовыйТаблицаПараметрыАмортизации();
	
	ТаблицаВзаиморасчеты = ОстаткиРасчетов(ТаблицаПредметыАренды, ТаблицаРеквизиты);
	ТаблицаВзаиморасчеты.Индексы.Добавить("ОсновноеСредство");
	
	ТаблицаРасчетАмортизации = ПараметрыНачисленияАмортизации.Амортизация.СправкаРасчет;
	ТаблицаРасчетАмортизации.Индексы.Добавить("Объект");
	
	ТаблицаАмортизации = ПараметрыНачисленияАмортизации.Амортизация.ТаблицаАмортизации;
	ТаблицаАмортизации.Индексы.Добавить("ОбъектУчета");
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для каждого СтрокаОС Из ТаблицаПредметыАренды Цикл
		
		// Заполнение новой строки ТаблицаИзменения
		
		СтрокаИзменения = ТаблицаДанныеПроводок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИзменения, СтрокаОС);
		
		СтрокаВзаиморасчеты = ТаблицаВзаиморасчеты.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		СтрокаРасчетАмортизации = ТаблицаРасчетАмортизации.Найти(СтрокаОС.ОсновноеСредство, "Объект");
		СтрокаАмортизации = ТаблицаАмортизации.Найти(СтрокаОС.ОсновноеСредство, "ОбъектУчета");
		
		ОстаточнаяСтоимостьОС = ?(СтрокаРасчетАмортизации = Неопределено, 0,
			СтрокаРасчетАмортизации.ОстаточнаяСтоимостьБУ - СтрокаРасчетАмортизации.СуммаАмортизацииБУ);
		
		ОбязательствоВал = ?(СтрокаВзаиморасчеты = Неопределено, 0,
			СтрокаВзаиморасчеты.ОстатокВзаиморасчетов - СтрокаВзаиморасчеты.ОстатокПроцентов - СтрокаВзаиморасчеты.ОстатокНДС);
		
		ИзменениеОбязательстваВал = СтрокаОС.СуммаВалБУ - ОбязательствоВал;
		Если Не Реквизиты.РасчетыВВалюте Тогда
			ИзменениеОбязательстваРуб = ИзменениеОбязательстваВал;
		Иначе
			ИзменениеОбязательстваРуб = ?(СтрокаОС.СуммаВалБУ = 0, 0,
				Окр(ИзменениеОбязательстваВал / СтрокаОС.СуммаВалБУ * СтрокаОС.СуммаБУ, 2));
		КонецЕсли;
		
		Если ОстаточнаяСтоимостьОС + ИзменениеОбязательстваРуб >= 0 Тогда
			СтрокаИзменения.ИзменениеСтоимостиОСРуб = ИзменениеОбязательстваРуб;
			СтрокаИзменения.ИзменениеСтоимостиОСВал = ИзменениеОбязательстваВал;
		Иначе
			СтрокаИзменения.ИзменениеСтоимостиОСРуб = -ОстаточнаяСтоимостьОС;
			СтрокаИзменения.ИзменениеСтоимостиОСВал = Окр(-ОстаточнаяСтоимостьОС / ИзменениеОбязательстваРуб * ИзменениеОбязательстваВал, 2);
			СтрокаИзменения.ИзменениеДоходыРуб = СтрокаИзменения.ИзменениеСтоимостиОСРуб - ИзменениеОбязательстваРуб;
			СтрокаИзменения.ИзменениеДоходыВал = СтрокаИзменения.ИзменениеСтоимостиОСВал - ИзменениеОбязательстваВал;
		КонецЕсли;
	
		ОстатокПроцентовВал = ?(СтрокаВзаиморасчеты = Неопределено, 0, СтрокаВзаиморасчеты.ОстатокПроцентов);
		СуммаПроцентовВал = СтрокаОС.СуммаВзаиморасчетов - СтрокаОС.СуммаВалБУ;
		СтрокаИзменения.ИзменениеПроцентыВал = СуммаПроцентовВал - ОстатокПроцентовВал;
		
		Если Не Реквизиты.РасчетыВВалюте Тогда
			СтрокаИзменения.ИзменениеПроцентыРуб = СтрокаИзменения.ИзменениеПроцентыВал;
		Иначе
			СтрокаИзменения.ИзменениеПроцентыРуб = ?(СтрокаОС.СуммаВалБУ = 0, 0,
				Окр(СтрокаИзменения.ИзменениеПроцентыВал / СтрокаОС.СуммаВалБУ * СтрокаОС.СуммаБУ, 2));
		КонецЕсли;
		
		ОстатокНДСВал = ?(СтрокаВзаиморасчеты = Неопределено, 0, СтрокаВзаиморасчеты.ОстатокНДС);
		СтрокаИзменения.ИзменениеНДСВал = СтрокаОС.СуммаНДСВзаиморасчетов - ОстатокНДСВал;
		
		Если Не Реквизиты.РасчетыВВалюте Тогда
			СтрокаИзменения.ИзменениеНДСРуб = СтрокаИзменения.ИзменениеНДСВал;
		Иначе
			СтрокаИзменения.ИзменениеНДСРуб = ?(СтрокаОС.СуммаВалБУ = 0, 0,
				Окр(СтрокаИзменения.ИзменениеНДСВал / СтрокаОС.СуммаВалБУ * СтрокаОС.СуммаБУ, 2));
		КонецЕсли;
		
		СтрокаИзменения.Местонахождение = ?(СтрокаАмортизации = Неопределено, Неопределено, СтрокаАмортизации.Подразделение);
		
		// Заполнение новой строки ТаблицаПараметрыАмортизации
		
		СтрокаПараметры = ТаблицаПараметрыАмортизации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметры, СтрокаОС);
		
		СтрокаПараметры.СтоимостьДляВычисленияАмортизации = ОстаточнаяСтоимостьОС + СтрокаИзменения.ИзменениеСтоимостиОСРуб;
		
		ДатаИзменения = Реквизиты.Период;
		НачалоАренды = ?(СтрокаРасчетАмортизации <> Неопределено,
			СтрокаРасчетАмортизации.ДатаВводаВЭксплуатацию, ДатаИзменения);
		
		Если Реквизиты.Лизинг Тогда
			СрокПолезногоИспользованияБУ = ?(СтрокаРасчетАмортизации <> Неопределено,
				СтрокаРасчетАмортизации.СрокПолезногоИспользованияБУ, 0);
			ОкончаниеАренды = ДобавитьМесяц(НачалоАренды, СрокПолезногоИспользованияБУ);
			СтрокаПараметры.СрокПолезногоИспользования = СрокПолезногоИспользованияБУ;
		Иначе
			ОкончаниеАренды = Реквизиты.ДатаОкончанияАренды;
			СтрокаПараметры.СрокПолезногоИспользования = (Год(ОкончаниеАренды) - Год(НачалоАренды)) * 12 
				+ Месяц(ОкончаниеАренды) - Месяц(НачалоАренды);
		КонецЕсли;
		СтрокаПараметры.СрокИспользованияДляВычисленияАмортизации = (Год(ОкончаниеАренды) - Год(ДатаИзменения)) * 12 
			+ Месяц(ОкончаниеАренды) - Месяц(ДатаИзменения);
			
		Если СтрокаРасчетАмортизации <> Неопределено Тогда
			СтрокаПараметры.КоэффициентАмортизации = СтрокаРасчетАмортизации.КоэффициентАмортизации;
			СтрокаПараметры.КоэффициентУскорения = СтрокаРасчетАмортизации.КоэффициентУскорения;
			СтрокаПараметры.ОбъемПродукцииРабот = СтрокаРасчетАмортизации.ОбъемПродукцииРабот;
			СтрокаПараметры.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаРасчетАмортизации.ОбъемПродукцииРаботДляАмортизации;
			СтрокаПараметры.ЛиквидационнаяСтоимость = СтрокаРасчетАмортизации.ЛиквидационнаяСтоимость;
			СтрокаПараметры.СпособНачисленияАмортизации = СтрокаРасчетАмортизации.СпособНачисленияАмортизацииБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДанныеПроводок", ТаблицаДанныеПроводок);
	СтруктураТаблиц.Вставить("ПараметрыАмортизации", ТаблицаПараметрыАмортизации);
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Функция НовыйТаблицаДанныеПроводок()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаРезультат.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаРезультат.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаРезультат.Колонки.Добавить("СчетУчетаНДС", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаРезультат.Колонки.Добавить("Местонахождение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ТаблицаРезультат.Колонки.Добавить("ИзменениеСтоимостиОСРуб", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("ИзменениеСтоимостиОСВал", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("ИзменениеДоходыРуб", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("ИзменениеДоходыВал", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("ИзменениеПроцентыРуб", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("ИзменениеПроцентыВал", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("ИзменениеНДСРуб", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("ИзменениеНДСВал", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция НовыйТаблицаПараметрыАмортизации()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаРезультат.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаРезультат.Колонки.Добавить("СрокИспользованияДляВычисленияАмортизации", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
	ТаблицаРезультат.Колонки.Добавить("СрокПолезногоИспользования", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
	ТаблицаРезультат.Колонки.Добавить("СтоимостьДляВычисленияАмортизации", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("КоэффициентАмортизации", ОбщегоНазначения.ОписаниеТипаЧисло(4, 2));
	ТаблицаРезультат.Колонки.Добавить("КоэффициентУскорения", ОбщегоНазначения.ОписаниеТипаЧисло(5, 2));
	ТаблицаРезультат.Колонки.Добавить("ОбъемПродукцииРабот", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаРезультат.Колонки.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ТаблицаРезультат.Колонки.Добавить("ЛиквидационнаяСтоимость", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРезультат.Колонки.Добавить("СпособНачисленияАмортизации", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ДобавитьКолонкуСодержание(ТаблицаЗначений, ТаблицаРеквизиты) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Если ЗначениеЗаполнено(Реквизиты.НомерВходящегоДокумента)
		И ЗначениеЗаполнено(Реквизиты.ДатаВходящегоДокумента) Тогда
		ШаблонСодержания = НСтр("ru='Изменение условий аренды по вх.д. %1 от %2'", КодЯзыка);
		Содержание = СтрШаблон(ШаблонСодержания, 
			Реквизиты.НомерВходящегоДокумента, 
			Формат(Реквизиты.ДатаВходящегоДокумента, НСтр("ru='ДФ=dd.MM.yyyy'", КодЯзыка)));
	Иначе
		Содержание = НСтр("ru='Изменение условий аренды'", КодЯзыка);
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("Содержание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаЗначений.ЗаполнитьЗначения(Содержание, "Содержание");
	
КонецПроцедуры

Процедура ПодготовитьТаблицыДокументаДляЦелейПриобретенияРеализации(Запрос, Реквизиты)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПредметыАренды.Ссылка КАК Ссылка,
	|	ТаблицаПредметыАренды.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПредметыАренды.ПредметАренды КАК ПредметАренды,
	|	ТаблицаПредметыАренды.Сумма КАК Сумма,
	|	ТаблицаПредметыАренды.ОценкаБУ КАК ОценкаБУ,
	|	ТаблицаПредметыАренды.СчетУчета КАК СчетУчета,
	|	ТаблицаПредметыАренды.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПредметыАренды.СуммаНДС КАК НДС,
	|	ТаблицаПредметыАренды.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.Распределен) КАК СпособУчетаНДС
	|ИЗ
	|	Документ.ИзменениеУсловийАренды.ПредметыАренды КАК ТаблицаПредметыАренды
	|ГДЕ
	|	ТаблицаПредметыАренды.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПредметыАренды.НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПредметыАренды = РезультатЗапроса.Выгрузить();
	УчетВзаиморасчетов.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПредметыАренды, Реквизиты);
	
	ТаблицаПредметыАренды.ЗаполнитьЗначения(0, "СуммаНУ");
	
	Если Не Реквизиты.НДСВключенВСтоимость Тогда
		Для каждого СтрокаТаблицы Из ТаблицаПредметыАренды Цикл
			СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезНДС;
			СтрокаТаблицы.СуммаВал = СтрокаТаблицы.СуммаБезНДСВал;
			СтрокаТаблицы.СуммаБУ = СтрокаТаблицы.СуммаБУБезНДС;
		КонецЦикла;
	КонецЕсли;
	
	// Обрабатываем колонки дополнительных сумм
	
	ТаблицаПредметыАренды.Колонки.Добавить("СуммаВалБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	МассивСуммаВал = ?(Реквизиты.НДСВключенВСтоимость, 
		ТаблицаПредметыАренды.ВыгрузитьКолонку("СуммаВал"),
		ТаблицаПредметыАренды.ВыгрузитьКолонку("СуммаБезНДСВал"));
	ТаблицаПредметыАренды.ЗагрузитьКолонку(МассивСуммаВал, "СуммаВалБУ");
	
	УчетПроцентовПоОбязательствам.ПодготовитьТаблицуДокументаДляЦелейПриобретенияРеализации(
		ТаблицаПредметыАренды, Реквизиты);
	
	Запрос.УстановитьПараметр("ТаблицаПредметыАренды", ТаблицаПредметыАренды);
	
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаПредметыАренды", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПредметыАренды.Ссылка КАК Ссылка,
	|	ТаблицаПредметыАренды.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПредметыАренды.ПредметАренды КАК ПредметАренды,
	|	ТаблицаПредметыАренды.Сумма КАК СуммаРуб,
	|	ТаблицаПредметыАренды.СуммаБезНДС КАК СуммаБезНДСРуб,
	|	ТаблицаПредметыАренды.НДСВал КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаПредметыАренды.НДС КАК СуммаНДСРуб,
	|	ТаблицаПредметыАренды.СуммаВал КАК СуммаВзаиморасчетов,
	|	ТаблицаПредметыАренды.СуммаВалБУ КАК СуммаВалБУ,
	|	ТаблицаПредметыАренды.СуммаБУ КАК СуммаБУ,
	|	ТаблицаПредметыАренды.СуммаНУ КАК СуммаНУ,
	|	ТаблицаПредметыАренды.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПредметыАренды.СчетУчета КАК СчетУчета,
	|	ТаблицаПредметыАренды.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаПредметыАренды.СпособУчетаНДС КАК СпособУчетаНДС
	|ПОМЕСТИТЬ ТаблицаПредметыАренды
	|ИЗ
	|	&ТаблицаПредметыАренды КАК ТаблицаПредметыАренды";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаЗачетАвансов(ПараметрыПроведения, НомераТаблиц)
	
	НомераТаблиц.Вставить("ЗачетАвансовРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.НеЗачитывать) КАК СпособЗачетаАвансов,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСН,
	|	ЛОЖЬ КАК УчитыватьЗадолженностьУСНПатент,
	|	""Поступление"" КАК НаправлениеДвижения,
	|	ЛОЖЬ КАК ЭтоВозврат,
	|	ЛОЖЬ КАК НДСВключенВСтоимость
	|ИЗ
	|	Документ.ИзменениеУсловийАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаДокумента", Неопределено);
	ПараметрыПроведения.Вставить("ЗачетАвансовТаблицаАвансов",   Неопределено);
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПредметыАренды", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаГрафикПлатежей", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПредметыАренды.Ссылка КАК Ссылка,
	|	""ПредметыАренды"" КАК ИмяСписка,
	|	ПредметыАренды.НомерСтроки КАК НомерСтроки,
	|	ПредметыАренды.ПредметАренды КАК ОсновноеСредство,
	|	ПредметыАренды.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ПредметыАренды.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ПредметыАренды.СуммаРуб КАК СуммаРуб,
	|	ПредметыАренды.СуммаБУ КАК СуммаБУ,
	|	ПредметыАренды.СуммаВалБУ КАК СуммаВалБУ,
	|	ПредметыАренды.СуммаНУ КАК СуммаНУ,
	|	ПредметыАренды.СуммаБезНДСРуб КАК СуммаБезНДСРуб,
	|	ПредметыАренды.СуммаНДСРуб КАК СуммаНДСРуб,
	|	ПредметыАренды.СчетУчета КАК СчетУчета,
	|	ПредметыАренды.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ПредметыАренды.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ПредметыАренды.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	ТаблицаПредметыАренды КАК ПредметыАренды
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикПлатежей.НомерСтроки КАК НомерСтроки,
	|	ГрафикПлатежей.ДатаПлатежа КАК ДатаПлатежа,
	|	ГрафикПлатежей.СуммаПлатежа КАК СуммаПлатежа,
	|	ГрафикПлатежей.СуммаНДСПлатежа КАК СуммаНДСПлатежа,
	|	ВЫБОР
	|		КОГДА ГрафикПлатежей.Ссылка.НДСВключенВСтоимость
	|			ТОГДА ГрафикПлатежей.СуммаПлатежа
	|		ИНАЧЕ ГрафикПлатежей.СуммаПлатежа - ГрафикПлатежей.СуммаНДСПлатежа
	|	КОНЕЦ КАК СуммаБезНДСПлатежа
	|ИЗ
	|	Документ.ИзменениеУсловийАренды.ГрафикПлатежей КАК ГрафикПлатежей
	|ГДЕ
	|	ГрафикПлатежей.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРеквизиты(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	Реквизиты.КурсВзаиморасчетов КАК Курс,
	|	Реквизиты.КратностьВзаиморасчетов КАК Кратность,
	|	Реквизиты.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеДт,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеКт,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЛОЖЬ КАК УчетАгентскогоНДС,
	|	ЛОЖЬ КАК ЭлектронныеУслуги,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.ПустаяСсылка) КАК ВидАгентскогоДоговора,
	|	Реквизиты.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.Валютный, ЛОЖЬ) КАК РасчетыВВалюте,
	|	ЕСТЬNULL(Реквизиты.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
	|	Реквизиты.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Реквизиты.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	Реквизиты.ВидОперации КАК ВидОперации,
	|	Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИзменениеУсловийАренды.ИзменениеУсловийЛизинга) КАК Лизинг,
	|	Реквизиты.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
	|	Реквизиты.СпособОценкиАрендыБУ КАК СпособОценкиАрендыБУ,
	|	Реквизиты.СтавкаДисконтирования КАК СтавкаДисконтирования,
	|	Реквизиты.СтоимостьОбязательства КАК СтоимостьОбязательства,
	|	Реквизиты.АвансовыеПлатежи КАК АвансовыеПлатежи,
	|	ЛОЖЬ КАК НалоговыйУчетИмуществаВедетЛизингополучатель,
	|	ЛОЖЬ КАК ПереходНаФСБУ25,
	|	""ПредметыАренды"" КАК ИмяСписка
	|ИЗ
	|	Документ.ИзменениеУсловийАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц)

	НомераТаблиц.Вставить("ПереоценкаВалютныхОстатковРеквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента
	|ИЗ
	|	Документ.ИзменениеУсловийАренды КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецОбласти

#КонецЕсли