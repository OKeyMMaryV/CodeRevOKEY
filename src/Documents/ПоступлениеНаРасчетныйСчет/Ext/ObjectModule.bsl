#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата              = ОбщегоНазначения.ТекущаяДатаПользователя();
	Ответственный     = Пользователи.ТекущийПользователь();
	ДокументОснование = Неопределено;
	
	НомерЧекаККМ      = 0;
	
	НомерВходящегоДокумента = "";
	ДатаВходящегоДокумента  = '00010101';
	
	НалоговыйУчетУСН.ПриКопированииДокумента(ЭтотОбъект, ОбъектКопирования);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		И ОтражатьРазницуВКурсеВСоставеОперационныхРасходов Тогда
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурса.Курс;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		КурсыВалют = Новый Соответствие;
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			Если Не ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
				Продолжить;
			КонецЕсли;
			
			Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровки.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			Если КурсыВалют[Валюта] = Неопределено Тогда
				КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Дата);
				КурсыВалют.Вставить(Валюта, КурсВалюты.Курс);
			КонецЕсли;
			
			СтрокаРасшифровки.КурсНаДатуПриобретенияРеализацииВалюты = КурсыВалют[Валюта];
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектКопирования.БезЗакрывающихДокументов Тогда
		БезЗакрывающихДокументов = УчетКассовымМетодом.БезЗакрывающихДокументов(Организация, Дата, ВидОперации);
	КонецЕсли;
	
	// Все документы по счетам интеграции загружаются из банка.
	// Вручную можно создавать документы только по счетам, для которых не включена интеграция.
	// Поэтому счет интеграции очистим, а интерактивно в документе можно выбрать только счет без интеграции.
	Если ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(СчетОрганизации) Тогда
		// Если у организации несколько счетов, то поле выбора банка доступно
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	// БИТ_YK_н 02/16
	СБ_ВыгруженВAXAPTA            = Ложь;
	СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
	// БИТ_YK_к	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
			И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	ИначеЕсли ЗагрузкаВыпискиПоБанковскомуСчету.ЭтоДанныеБанка(ДанныеЗаполнения) Тогда
		ЗаполнитьДаннымиБанка(ДанныеЗаполнения);
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения, Истина);
	
	БезЗакрывающихДокументов = УчетКассовымМетодом.БезЗакрывающихДокументов(Организация, Дата, ВидОперации);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		БезЗакрывающихДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "БезЗакрывающихДокументов");
	КонецЕсли;
	
	//определяем счет банка по валюте
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ОплатаВВалюте = ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
	Если ОплатаВВалюте И НЕ ЗначениеЗаполнено(СчетОрганизации)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Нельзя выполнить оплату в валюте %1, т.к. у организации %2 не задан банковский счет в указанной валюте.'"),
			ВалютаДокумента,
			Организация);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	РасшифровкаПлатежаСумма = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Если РасшифровкаПлатежаСумма <> 0 Тогда
		СуммаДокумента = РасшифровкаПлатежаСумма;
	Иначе
		Если РасшифровкаПлатежа.Количество() = 1 Тогда
			РасшифровкаПлатежа[0].СуммаПлатежа = СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьРасшифровкаПлатежа = Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации);
	Если ЕстьРасшифровкаПлатежа Тогда
		Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			Если СтрокаПлатеж.СпособПогашенияЗадолженности.Пустая() Тогда
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			КонецЕсли;
		КонецЦикла;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			ОтражатьРазницуВКурсеВСоставеОперационныхРасходов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если УчетДенежныхСредствБП.ЗаполнитьДоговорКонтрагента(ЭтотОбъект, ДанныеЗаполнения, ОплатаВВалюте) Тогда
		
		СчетаУчетаВДокументах.ЗаполнитьСтроки(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РасшифровкаПлатежа[0]),
			"РасшифровкаПлатежа",
			ЭтотОбъект,
			Документы.ПоступлениеНаРасчетныйСчет);
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		Если НЕ ЗначениеЗаполнено(ПодразделениеКт) Тогда
			ПодразделениеКт = ПодразделениеОрганизации;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Если НЕ ЗначениеЗаполнено(ПодразделениеКт) Тогда
			ПодразделениеКт = ПодразделениеОрганизации;
		КонецЕсли;
		
		// Если сумма услуг банка не заполнена, рассчитаем её по данным вида оплаты,
		// который указан для данного договора с банком.
		// Сделаем это только в случае, если это не ввод на основании Оплаты платежной картой - там свой механизм заполнения.
		Если СуммаУслуг = 0 И РасшифровкаПлатежа.Количество() = 1
			И ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
			РасшифровкаПлатежа[0].СуммаУслуг = Документы.ПоступлениеНаРасчетныйСчет.ЭквайрингСуммаУслугБанкаПоДоговору(
				Организация, РасшифровкаПлатежа[0].ДоговорКонтрагента, РасшифровкаПлатежа[0].СуммаПлатежа);
			СуммаУслуг = РасшифровкаПлатежа[0].СуммаУслуг;
		КонецЕсли;
	Иначе
		ПодразделениеКт = Неопределено;
	КонецЕсли;
	
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ЭтотОбъект, ПараметрыУСН);
	
	// ++ 1c-izhtc Клинцов 2016.03.17 (
	// +СБ. Широков Николай. 2014-12-02. ТЗ "Казначейство" 2.2.10.1 
	СчетУчетаРасчетовСКонтрагентом  = СБ_КазначействоСервер.СчетРСБУПоПрофилюРазноски(СБ_ПрофильРазноски);
	
	Способ_НеПогашать 				= ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
	
	СписокОрганизаций_НеПогашатьЗадолженность = Неопределено;
	
	
	//Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	//	ИЛИ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика) Тогда
		
		СписокОрганизаций_НеПогашатьЗадолженность = СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("СписокОрганизаций_НеПогашатьЗадолженность");
		
	//КонецЕсли;
	ОрганизацияВСпискеНеПогашать = СписокОрганизаций_НеПогашатьЗадолженность <> Неопределено 
	И СписокОрганизаций_НеПогашатьЗадолженность.НайтиПоЗначению(Организация) <> Неопределено;
	
	Счет_5701 = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	Счет_5721 = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
	
	Если СчетУчетаРасчетовСКонтрагентом = Счет_5701 
		ИЛИ СчетУчетаРасчетовСКонтрагентом = Счет_5721
		Тогда
		
		Если СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			Если РасшифровкаПлатежа.Количество() > 0 Тогда 
				СубконтоКт1 = СБ_КазначействоСервер.ВидПереводовПоСтатьеДДС(РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
		Иначе			
			СубконтоКт1 = СБ_КазначействоСервер.ВидПереводовПоСтатьеДДС(СтатьяДвиженияДенежныхСредств);
		КонецЕсли; 
		
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-26 (#4099)
	////ОКЕЙ Михайлова М.В.(ПервыйБИТ) Начало 2021-06-18 (#НТП_МП_02)
	//#Область СтарыйКод
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-04 (#3704)
	////Организация_ОКЕЙ 		= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация ОКЕЙ");
	////Организация_Лоджистикс 	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс");
	////ЭтоОрганизацияОКЕЙ 		= Организация = Организация_ОКЕЙ ИЛИ Организация = Организация_Лоджистикс;
	////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-04 (#3704)
	//#КонецОбласти
	//#Область НовыйКод
	//Организация_Лоджистикс 	= бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", "Организация Лоджистикс");
	//ЭтоОрганизацияОКЕЙ 		= Организация = Организация_Лоджистикс;
	//#КонецОбласти
	////ОКЕЙ Михайлова М.В.(ПервыйБИТ) Конец  2021-06-18 (#НТП_МП_02)
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-26 (#4099)
	
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-26 (#4099)
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-04 (#3704)
		//Если НЕ ЭтоОрганизацияОКЕЙ Тогда
		//	СпособПогашенияЗадолженностиПоДоговору = Справочники.ДоговорыКонтрагентов.ОпределитьСпособПогашенияЗадолженностиПоДоговору(СтрокаПлатеж.ДоговорКонтрагента);
		//	Если СпособПогашенияЗадолженностиПоДоговору <> Неопределено
		//		И СтрокаПлатеж.СпособПогашенияЗадолженности <> СпособПогашенияЗадолженностиПоДоговору Тогда
		//		СтрокаПлатеж.СпособПогашенияЗадолженности = СпособПогашенияЗадолженностиПоДоговору;
		//	КонецЕсли; 
		//КонецЕсли; 
		////ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-04 (#3704)
		//
		//Если ОрганизацияВСпискеНеПогашать Тогда
		//	
		//	СтрокаПлатеж.СпособПогашенияЗадолженности = Способ_НеПогашать;
		//	
		//КонецЕсли; 
		
		Если ОрганизацияВСпискеНеПогашать Тогда
			пСпособПогашенияЗадолженности = Способ_НеПогашать;
		Иначе
			пСпособПогашенияЗадолженности = Справочники.ДоговорыКонтрагентов.ОпределитьСпособПогашенияЗадолженностиПоДоговору(СтрокаПлатеж.ДоговорКонтрагента);
		КонецЕсли;
		
		Если пСпособПогашенияЗадолженности <> Неопределено
			И СтрокаПлатеж.СпособПогашенияЗадолженности <> пСпособПогашенияЗадолженности Тогда
			СтрокаПлатеж.СпособПогашенияЗадолженности = пСпособПогашенияЗадолженности;
		КонецЕсли;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-26 (#4099)
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;	
		
		Если СтрокаПлатеж.СпособПогашенияЗадолженности = Способ_НеПогашать Тогда
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
		
	КонецЦикла; 
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-06-04 (#НТП_МП_ФР07)
	#Область СтарыйКод	
	// +СБ. Широков Николай. 2015-05-26. Доработка #1577
	//Если ОрганизацияВСпискеНеПогашать Тогда
	//	ПодразделениеОрганизации = СБ_КазначействоПовтИсп.ПодразделениеПоПрофилюРазноски(Организация, СБ_ПрофильРазноски);
	//КонецЕсли; 
	// -СБ. Широков Николай
	#КонецОбласти
	ПодразделениеОрганизации = СБ_КазначействоПовтИсп.ПодразделениеПоПрофилюРазноски(Организация, СБ_ПрофильРазноски);
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-06-04 (#НТП_МП_ФР07)
	// -- 1c-izhtc Клинцов 2016.03.17 )
	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-09-22 (#ТП_БП11_ФР17)	
	Если СБ_ПрофильРазноски = "57.01" 
		И ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		СчетУчетаРасчетовСКонтрагентом = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами");
		Документы.ПоступлениеНаРасчетныйСчет.ок_ПрофильРазноскиОбработатьИзменение(ЭтотОбъект);	
	КонецЕсли;	
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-09-22 (#ТП_БП11_ФР17)
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Все документы по счетам интеграции загружаются из банка.
	// Удалять интерактивно такие документы запещено.
	Если ПометкаУдаления
		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВключена(СчетОрганизации) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		РаботаСДоговорамиКонтрагентовБП.ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(РасшифровкаПлатежа, ЭтотОбъект);
	КонецЕсли;
	
	// Обновление реквизитов УСН выполняем всегда для учета возможных изменений в учетной политике.
	
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ЭтотОбъект);
	Если НЕ УчетУСН.СодержаниеУСНРедактируетсяПользователем(ЭтотОбъект) Тогда
		Содержание_УСН = НалоговыйУчетУСН.СодержаниеОперацииДляКУДиР(ПараметрыУСН);
	КонецЕсли;
	НалоговыйУчетУСН.ЗаполнитьДоходыРасходыВсего(ЭтотОбъект, ПараметрыУСН);
	
	// Обновление счета для вида операции ВзносНаличными выполняем всегда для учета
	// возможных изменений в учетной политике
	УстановитьСчетПриВзносеНаличными();
	
	// Обновление счета для вида операции ПереводСДругогоСчета выполняем всегда для учета
	// возможных изменений в учетной политике
	УстановитьСчетПриПереводеСДругогоСчета();
	
	// При групповом перепроведении реквизиты документов не меняются,
	// поэтому обновление связанных данных выполнять не требуется.
	Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Документы.ПоступлениеНаРасчетныйСчет.ПараметрыОбъектаДляЗаполненияПатента(ЭтотОбъект);
	Патент = УчетПСН.ПатентВходящегоПлатежа(ПараметрыОбъекта);
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДоговорКонтрагента;
		НоваяСтрока.СуммаПлатежа       = СуммаДокумента;
		НоваяСтрока.СуммаУслуг         = СуммаУслуг;
	КонецЕсли;
	
	ДоговорКонтрагента = РасшифровкаПлатежа[0].ДоговорКонтрагента;
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Начало 2021-04-29 (#ТП_БП11_ФР17)
	//Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
	// Заменено на:
	Если Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации)
		И НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам 
				И СБ_ПрофильРазноски = "57.01") Тогда
	//ОКЕЙ Балыков А.Г.(ПервыйБИТ) Конец 2021-04-29 (#ТП_БП11_ФР17)
		СтатьяДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) И Не ЗначениеЗаполнено(СчетОрганизации)
		И Не Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация)
		И Не ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПлатежноеТребование") Тогда
		
		ВыпискаПроведена = РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Если ВыпискаПроведена Тогда
			
			РегистрыСведений.СостоянияБанковскихДокументов.УстановитьСостояниеДокумента(
				ДокументОснование, Перечисления.СостоянияБанковскихДокументов.Оплачено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьПередЗаписью(ЭтотОбъект, РежимЗаписи);
	
	ЗагрузкаВыпискиПоБанковскомуСчету.ПроверитьИзменениеДанныхАвтозаполненияПоступление(ЭтотОбъект);
	
	// +СБ. Широков Николай. 2014-12-22. ТЗ "Казначейство" 2.2.11.5
	Если СБ_ВыгруженВAXAPTA_Актуальный 
		И НЕ ДополнительныеСвойства.Свойство("НеСбрасыватьПризнакВыгрузки") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокШапка.Номер,
		|	ДокШапка.Дата,
		|	ДокШапка.Контрагент,
		|	ДокШапка.СуммаДокумента,
		|	ДокШапка.ВалютаДокумента,
		|	ДокШапка.СчетОрганизации,
		|	ДокШапка.СБ_ПрофильРазноски,
		|	ДокТЧ.ДоговорКонтрагента,
		|	ДокТЧ.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДокТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет КАК ДокШапка
		|		ПО ДокТЧ.Ссылка = ДокШапка.Ссылка
		|ГДЕ
		|	ДокШапка.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ПроверяемыеРеквизитыШапка = Новый Массив;
		ПроверяемыеРеквизитыШапка.Добавить("Номер");
		ПроверяемыеРеквизитыШапка.Добавить("Дата");
		ПроверяемыеРеквизитыШапка.Добавить("Контрагент");
		ПроверяемыеРеквизитыШапка.Добавить("СуммаДокумента");
		ПроверяемыеРеквизитыШапка.Добавить("ВалютаДокумента");
		ПроверяемыеРеквизитыШапка.Добавить("СчетОрганизации");
		ПроверяемыеРеквизитыШапка.Добавить("СБ_ПрофильРазноски");
		
		ПроверяемыеРеквизитыРасшифровка = Новый Массив;
		ПроверяемыеРеквизитыРасшифровка.Добавить("ДоговорКонтрагента");
		ПроверяемыеРеквизитыРасшифровка.Добавить("СтатьяДвиженияДенежныхСредств");
		
		Для каждого ИмяРеквизита Из ПроверяемыеРеквизитыШапка Цикл
			
			Если ЭтотОбъект[ИмяРеквизита] <> Выборка[ИмяРеквизита] Тогда
				СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
				Прервать;
			КонецЕсли; 	
			
		КонецЦикла; 
		
		СтрокаПлатежа = РасшифровкаПлатежа[0];
		
		Для каждого ИмяРеквизита Из ПроверяемыеРеквизитыРасшифровка Цикл
			
			Если СтрокаПлатежа[ИмяРеквизита] <> Выборка[ИмяРеквизита] Тогда
				СБ_ВыгруженВAXAPTA_Актуальный = Ложь;
				Прервать;
			КонецЕсли; 	
			
		КонецЦикла; 
		
		Если Не СБ_ВыгруженВAXAPTA_Актуальный Тогда
			Сообщить("У документа " + СокрЛП(Ссылка) + " сброшен признак выгрузки в AXAPTA. Требуется перевыгрузить документ.");		
		КонецЕсли; 
		
	КонецЕсли; 
	// -СБ. Широков Николай
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = Документы.ПоступлениеНаРасчетныйСчет.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ПараметрыПроведения.РасшифровкаПлатежа, ПараметрыПроведения.Реквизиты, Отказ);
	
	ТаблицаПрочихРасчетов = УчетВзаиморасчетов.ПодготовитьТаблицуПрочихРасчетовОплатаПокупателя(
		ТаблицаВзаиморасчетов, ПараметрыПроведения.Реквизиты);
	
	ТаблицыРасчетовДляУСН = Документы.ПоступлениеНаРасчетныйСчет.ПодготовитьТаблицыРасчетовДляУСН(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчетов, Отказ);
	
	ТаблицаВзаиморасчетыУСН            = ТаблицыРасчетовДляУСН.ТаблицаВзаиморасчетыУСН;
	ТаблицаПрочихРасчетовУСН           = ТаблицыРасчетовДляУСН.ТаблицаПрочихРасчетовУСН;
	ТаблицаВозвратыПоВзаиморасчетамУСН = ТаблицыРасчетовДляУСН.ТаблицаВозвратыПоВзаиморасчетамУСН;
	КУДиРПереквалификация              = ТаблицыРасчетовДляУСН.КУДиРПереквалификация;
	КУДиРПатент                        = ТаблицыРасчетовДляУСН.КУДиРПатент;
	
	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ОчиститьСуммыСпециальныхРежимовПогашениеЗадолженности(
		ПараметрыПроведения.Реквизиты, ТаблицаВзаиморасчетов, Отказ);
	
	ТаблицаСуммовыхРазниц = УчетНДС.ПодготовитьТаблицуСуммовыхРазниц(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты, Отказ);
	
	ТаблицаНДСПоРеализациямНеплательщика = УчетУСН.ПодготовитьТаблицуНДСПоРеализацииНеплательщиком(ТаблицаВзаиморасчетыУСН,
		ПараметрыПроведения.Реквизиты);
		
	// Структура таблиц для отражения в налоговом учете УСН
	СтруктураТаблицУСН = Новый Структура("ТаблицаРасчетов, ТаблицаНДСПродажи, ПокупкаПродажаВалюты, КУДиРПереквалификация, КУДиРПатент",
		ТаблицаВзаиморасчетыУСН, ТаблицаНДСПоРеализациямНеплательщика, ПараметрыПроведения.ПокупкаПродажаВалюты, КУДиРПереквалификация, КУДиРПатент);
	
	// Учет доходов и расходов ИП
	ТаблицаОплатПокупателяИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуОплатыПокупателя(
		ТаблицаВзаиморасчетов, ПараметрыПроведения.Реквизиты);
	
	ТаблицыПоступленияОтПродажПоПлатежнымКартамИП =
		УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыПоступленияОтПродажПоПлатежнымКартам(
			ПараметрыПроведения.РасшифровкаПлатежа,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	ТаблицыПоступленияОтФакторинговойКомпанииИП =
		УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицыПоступленияОтФакторинговойКомпании(
			ПараметрыПроведения.РасшифровкаПлатежа,
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	ТаблицаУслугИП = УчетДоходовИРасходовПредпринимателя.ПодготовитьТаблицуПоступленияМПЗ(
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаУслуг,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты);
	
	СтруктураТаблицМПЗ = Новый Структура("ТаблицаУслуг", ТаблицаУслугИП);
	
	// соберем таблицу прочих расчетов
	Если ЗначениеЗаполнено(ТаблицаПрочихРасчетовУСН) Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПрочихРасчетовУСН, ТаблицаПрочихРасчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТаблицыПоступленияОтПродажПоПлатежнымКартамИП.ТаблицаПрочиеРасчеты) Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
			ТаблицыПоступленияОтПродажПоПлатежнымКартамИП.ТаблицаПрочиеРасчеты, ТаблицаПрочихРасчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТаблицыПоступленияОтФакторинговойКомпанииИП.ТаблицаПрочиеРасчеты) Тогда
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(
			ТаблицыПоступленияОтФакторинговойКомпанииИП.ТаблицаПрочиеРасчеты, ТаблицаПрочихРасчетов);
	КонецЕсли;
	
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		ТаблицаСтатусовСчетов = СтатусыДокументов.ПодготовитьТаблицуСтатусовОплатыСчетов(
			ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
	
	УчетВзаиморасчетов.СформироватьДвиженияПоПрочимРасчетам(ТаблицаПрочихРасчетов, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчетов,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьТолькоДвиженияПоСчетамУСНЗачетВозврата(ТаблицаВозвратыПоВзаиморасчетамУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетВзаиморасчетов.СформироватьТолькоДвиженияПоСчетамУСНПогашениеЗадолженности(ТаблицаВзаиморасчетыУСН,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовРасходов.СформироватьДвиженияСуммовыеРазницыРасчетыВУЕ(ТаблицаСуммовыхРазниц,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияКурсовыеРазницы(ПараметрыПроведения.Реквизиты,
		ТаблицаВзаиморасчетов, Движения, Отказ);
	
	УчетНДС.СформироватьДвиженияСуммовыеРазницы(ТаблицаСуммовыхРазниц, ПараметрыПроведения.Реквизиты, 
		Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПродажаВалюты(ПараметрыПроведения.ПродажаВалюты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПриобретениеВалюты(ПараметрыПроведения.ПриобретениеВалюты,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДенежныхСредств.СформироватьДвиженияПрочееПоступление(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетЗарплаты.СформироватьДвиженияПоВозвратамНалоговИВзносовСФОТ(ПараметрыПроведения.РасшифровкаПлатежаПрочее,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	НалоговыйУчетУСН.СформироватьДвиженияУСН(ЭтотОбъект, СтруктураТаблицУСН);
	
	// Учет доходов и расходов ИП
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияОплатаПокупателя(
		ТаблицаОплатПокупателяИП,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицыПоступленияОтПродажПоПлатежнымКартамИП.ТаблицаИПМПЗОтгруженные,
		ТаблицыПоступленияОтПродажПоПлатежнымКартамИП.ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияЗачетОплатыПокупателя(
		ТаблицыПоступленияОтФакторинговойКомпанииИП.ТаблицаИПМПЗОтгруженные,
		ТаблицыПоступленияОтФакторинговойКомпанииИП.ТаблицаВзаиморасчеты, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	УчетДоходовИРасходовПредпринимателя.СформироватьДвиженияПоступлениеМПЗ(
		СтруктураТаблицМПЗ,
		ПараметрыПроведения.ПоступлениеМПЗИПТаблицаВзаиморасчетов,,
		ПараметрыПроведения.ПоступлениеМПЗИПРеквизиты, Движения, Отказ);
	
	// Переоценка валютных остатков - после формирования проводок всеми другими механизмами
	ТаблицаПереоценка = УчетДоходовРасходов.ПодготовитьТаблицуПереоценкиДвиженийДокумента(
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 07.08.2015 10:03:46
	ТаблицаПереоценка.Очистить();
	//-- СВВ}Сапожников Вадим 07.08.2015 10:03:46
	
	УчетДоходовРасходов.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	УчетУСН.СформироватьДвиженияПереоценкаВалютныхОстатков(ТаблицаПереоценка,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	СтатусыДокументов.СформироватьДвиженияОплатаСчетов(
		ПараметрыПроведения.ОплатаСчетов, ПараметрыПроведения.Реквизиты, Движения, Отказ);
	
	Если Не ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		СтатусыДокументов.СформироватьДвиженияСтатусовДокументов(
			ТаблицаСтатусовСчетов, ПараметрыПроведения.Реквизиты);
	КонецЕсли;
	
	// Отложенные расчеты с контрагентами.
	УчетВзаиморасчетовОтложенноеПроведение.ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
	
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, ПараметрыПроведения.РасчетыСКонтрагентамиОтложенноеПроведение);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Отключаем проверку реквизитов шапки
	
	Если Не Документы.ПоступлениеНаРасчетныйСчет.КонтрагентДолженБытьЗаполнен(ВидОперации) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	КонецЕсли;
	
	Если НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетОрганизации");
		ПроверкаРеквизитовОрганизации.ОбработкаПроверкиЗаполнения(Организация, СчетОрганизации, Ложь, Отказ);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление 
		И НЕ ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Если СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Счет кредита");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"СчетУчетаРасчетовСКонтрагентом",
				"Объект",
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("КурсНаДатуПриобретенияРеализацииВалюты");
		
	КонецЕсли;
	
	// Отключаем проверку реквизитов ТЧ РасшифровкаПлатежа
	
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсНаДатуПриобретенияРеализацииВалюты");
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Сделка"); // Проверяем построчно
	
	Если Не Документы.ПоступлениеНаРасчетныйСчет.ЕстьРасшифровкаПлатежа(ВидОперации, Ложь) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СпособПогашенияЗадолженности");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КурсВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.КратностьВзаиморасчетов");
	КонецЕсли;
	
	// Проверка соответствия суммы документа расшифровке платежа
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ТекстСообщения = НСтр("ru = 'Не совпадают сумма документа и ее расшифровка'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
				НСтр("ru = 'Сумма'"),,, ТекстСообщения);
			Если РасшифровкаПлатежа.Количество() > 1 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "НадписьСуммаДокумента",, Отказ);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "СуммаДокумента", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Если СуммаДокумента = 0 Тогда
			Если СуммаУслуг <> 0 Тогда
				МассивНепроверяемыхРеквизитов.Добавить("СуммаДокумента");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Соберем все сообщения об ошибках заполнения и выведем их с учетом используемой формы документа.
	СообщенияПроверки = Документы.ПоступлениеНаРасчетныйСчет.ПодготовитьСообщенияПроверкиЗаполненияРасшифровкаПлатежа(
		ЭтотОбъект,
		,
		Отказ,
		ПроверяемыеРеквизиты,
		Ложь);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	СчетаУчетаВДокументах.ПроверитьЗаполнение(
		ЭтотОбъект,
		Отказ,
		ПроверяемыеРеквизиты,
		,
		СообщенияПроверки,
		Ложь);
	
	Документы.ПоступлениеНаРасчетныйСчет.СообщитьРезультатПроверки(
		ЭтотОбъект,
		Отказ,
		СообщенияПроверки,
		Метаданные.Документы.ПоступлениеНаРасчетныйСчет.ТабличныеЧасти.РасшифровкаПлатежа);
	
	// Для отдельных видов операций некоторые счета проверяются вне зависимости от настроек пользователя,
	// кроме режима Интеграции с банком
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление
		И Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПроверяемыеРеквизиты.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	//++ СВВ {[+](фрагмент добавлен), Сапожников Вадим 07.08.2015 9:18:37
	Профиль = ПроверяемыеРеквизиты.Найти("СБ_ПрофильРазноски");
	Если Не ЗначениеЗаполнено(Профиль) Тогда
		// +СБ. Широков Николай. 2014-12-02. 
		ПроверяемыеРеквизиты.Добавить("СБ_ПрофильРазноски");
		// -СБ. Широков Николай 
	КонецЕсли;
	
	// БИТ_YK_н Ошибка (функц.) #2236 02/16
	// Проверка реквизита нужна даже если табличная часть скрыта, т.к. данный реквизит используется для выгрузки в Аксапту.
	
	// Нужно попытаться заполнить реквизит СтатьяДвиженияДенежныхСредств ТЧ Расшифровка платежа для случаев,
	// когда ТЧ скрыта.
	Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление или 
		ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда 
		Для каждого Стр из РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств) Тогда
				Стр.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтатьяДДС = ПроверяемыеРеквизиты.Найти("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	//Если Не ЗначениеЗаполнено(СтатьяДДС) И ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
	Если Не ЗначениеЗаполнено(СтатьяДДС) Тогда
	// БИТ_YK_к
		// +СБ. Широков Николай. 2014-11-25. ТЗ "Казначейство" 2.2.10.2
		ПроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		// -СБ. Широков Николай
	КонецЕсли;
	//-- СВВ}Сапожников Вадим 07.08.2015 9:18:37
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкаКурсовВалют(СтрокаПлатеж, КурсДокумента, КратностьДокумента)
	
	КурсДокумента      = ?(КурсДокумента      = 0, 1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента = 0, 1, КратностьДокумента);
	
	Если Не СтрокаПлатеж = Неопределено Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов);
			СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		Иначе
			СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
			СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	// Заполнение реквизитов из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ВалютаДокумента    = ВалютаРегламентированногоУчета;
	КурсДокумента      = 1;
	КратностьДокумента = 1;
	
	ДокументОснование = Основание;
	
	ТипДокументаОснования = ТипЗнч(Основание);
	
	ТипДокументаРеализацияТоваровУслуг             = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ТипДокументаВозвратТоваровПоставщику           = Тип("ДокументСсылка.ВозвратТоваровПоставщику");
	ТипДокументаОтчетКомиссионераОПродажах         = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
	ТипДокументаОтчетКомитентуОПродажах            = Тип("ДокументСсылка.ОтчетКомитентуОПродажах");
	ТипДокументаСчетНаОплатуПокупателю             = Тип("ДокументСсылка.СчетНаОплатуПокупателю");
	ТипДокументаРасходныйКассовыйОрдер             = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	ТипДокументаПлатежноеТребование                = Тип("ДокументСсылка.ПлатежноеТребование");
	ТипДокументаАктОбОказанииПроизводственныхУслуг = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг");
	ТипПередачаОС                                  = Тип("ДокументСсылка.ПередачаОС");
	ТипПередачаНМА                                 = Тип("ДокументСсылка.ПередачаНМА");
	ТипОплатаПлатежнойКартой                       = Тип("ДокументСсылка.ОплатаПлатежнойКартой");
	ТипДокументаНачислениеПеней                    = Тип("ДокументСсылка.НачислениеПеней");
	
	Если ТипДокументаОснования = ТипДокументаРеализацияТоваровУслуг
		ИЛИ ТипДокументаОснования = ТипДокументаВозвратТоваровПоставщику
		ИЛИ ТипДокументаОснования = ТипДокументаАктОбОказанииПроизводственныхУслуг
		ИЛИ ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах
		ИЛИ ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах
		ИЛИ ТипДокументаОснования = ТипПередачаОС
		ИЛИ ТипДокументаОснования = ТипПередачаНМА
		ИЛИ ТипДокументаОснования = ТипДокументаНачислениеПеней
		ИЛИ ТипДокументаОснования = ТипДокументаСчетНаОплатуПокупателю Тогда
		
		ДанныеОснования       = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Организация, ВалютаДокумента,
			|КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаДокумента");
		
		ВидОперации           = ?(ТипДокументаОснования = ТипДокументаВозвратТоваровПоставщику,
			Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика,
			Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
		ВидРасчетовПоДоговору = БухгалтерскийУчетПереопределяемый.ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента);
		ВалютаВзаиморасчетов  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте Тогда
			ВалютаДокумента   = ВалютаВзаиморасчетов;
		Иначе
			ВалютаДокумента   = ВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
		Если НЕ ЗначениеЗаполнено(КурсДокумента) Тогда
			КурсДокумента       = 1;
			КратностьДокумента  = 1;
		КонецЕсли;
		
		ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Дата);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		Если ТипДокументаОснования = ТипДокументаСчетНаОплатуПокупателю Тогда
			
			ТаблицаСуммДокументаОснования = СтатусыДокументов.ТаблицаСуммКОплатеВРазрезеСтавокНДС(
				Новый Структура("Основание, ДатаОснования, Организация", Основание, Основание.Дата, Основание.Организация),
					УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание));
			ТаблицаСуммДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
		ИначеЕсли ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах Тогда
			
			ТаблицаСуммДокументаОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
			МассивОснование = Новый Массив;
			МассивОснование.Добавить(Основание);
			СоотвествиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				МассивОснование, "УдержатьВознаграждение, СуммаВознаграждения, СтавкаНДСВознаграждения");
			ПараметрыОснования = СоотвествиеРеквизитов[Основание];
			Если ПараметрыОснования <> Неопределено
					И ПараметрыОснования.УдержатьВознаграждение И ПараметрыОснования.СуммаВознаграждения > 0 Тогда
				ЕстьТакаяСтавка =
					ТаблицаСуммДокументаОснования.Найти(ПараметрыОснования.СтавкаНДСВознаграждения, "СтавкаНДС") <> Неопределено;
				НоваяСтрока     = ТаблицаСуммДокументаОснования.Добавить();
				НоваяСтрока.СуммаПлатежа = - ПараметрыОснования.СуммаВознаграждения;
				НоваяСтрока.СтавкаНДС    =   ПараметрыОснования.СтавкаНДСВознаграждения;
				НоваяСтрока.СуммаНДС     = - (Основание.Товары.Итог("СуммаНДСВознаграждения")
					+ Основание.Услуги.Итог("СуммаНДСВознаграждения"));
				
				Если ЕстьТакаяСтавка Тогда
					ТаблицаСуммДокументаОснования.Свернуть("СтавкаНДС", "СуммаПлатежа, СуммаНДС");
				Иначе
					ТаблицаСуммДокументаОснования.Свернуть("", "СуммаПлатежа, СуммаНДС");
					ТаблицаСуммДокументаОснования.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах ИЛИ ТипДокументаОснования = ТипПередачаНМА Тогда
			
			ТаблицаСуммДокументаОснования = Новый ТаблицаЗначений();
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СуммаПлатежа", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СтавкаНДС",    Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
			ТаблицаСуммДокументаОснования.Колонки.Добавить("СуммаНДС",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
			СтрокаТаблицыСумм = ТаблицаСуммДокументаОснования.Добавить();
			Если ТипДокументаОснования = ТипДокументаОтчетКомитентуОПродажах Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаВознаграждения");
				СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДСВознаграждения");
				СтрокаТаблицыСумм.СуммаНДС     = Основание.Товары.Итог("СуммаНДСВознаграждения");
			ИначеЕсли ТипДокументаОснования = ТипПередачаНМА Тогда
				СтрокаТаблицыСумм.СуммаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаДокумента");
				СтрокаТаблицыСумм.СтавкаНДС    = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СтавкаНДС");
				СтрокаТаблицыСумм.СуммаНДС     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СуммаНДС");
			КонецЕсли;
			
		Иначе
			
			ТаблицаСуммДокументаОснования = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(Основание);
			ТаблицаСуммДокументаОснования.Колонки.Сумма.Имя = "СуммаПлатежа";
			
		КонецЕсли;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаСуммДокументаОснования, ТаблицаПлатежей);
		Если ТаблицаПлатежей.Количество() = 0 Тогда
			ТаблицаПлатежей.Добавить();
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(ДоговорКонтрагента,                     "ДоговорКонтрагента");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Курс,      "КурсВзаиморасчетов");
		ТаблицаПлатежей.ЗаполнитьЗначения(СтруктураКурсаВзаиморасчетов.Кратность, "КратностьВзаиморасчетов");
		Если ТипДокументаОснования <> ТипДокументаСчетНаОплатуПокупателю
			И ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.ПоДокументу,   "СпособПогашенияЗадолженности");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СпособыПогашенияЗадолженности.Автоматически, "СпособПогашенияЗадолженности");
		КонецЕсли;
		ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "Сделка");
		
		Если ТипДокументаОснования = ТипДокументаРеализацияТоваровУслуг Тогда
			
			СчетНаОплатуПокупателю = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетНаОплатуПокупателю");
			ТаблицаПлатежей.ЗаполнитьЗначения(СчетНаОплатуПокупателю, "СчетНаОплату");
			
		КонецЕсли;
		
		ТаблицаПлатежей.ЗагрузитьКолонку(ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа"), "СуммаВзаиморасчетов");
		
		Для каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
			ПроверкаКурсовВалют(СтрокаПлатеж, КурсДокумента, КратностьДокумента);
			Если ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
				Если ДанныеОснования.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаПлатежа,
						ВалютаРегламентированногоУчета, ВалютаВзаиморасчетов,
						1, ДанныеОснования.КурсВзаиморасчетов,
						1, ДанныеОснования.КратностьВзаиморасчетов);
					СтрокаПлатеж.СуммаНДС            = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаПлатеж.СуммаНДС,
						ВалютаРегламентированногоУчета, ВалютаВзаиморасчетов,
						1, ДанныеОснования.КурсВзаиморасчетов,
						1, ДанныеОснования.КратностьВзаиморасчетов);
				КонецЕсли;
				
				СтрокаПлатеж.СуммаПлатежа = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1,
					СтрокаПлатеж.КратностьВзаиморасчетов, 1);
				СтрокаПлатеж.СуммаНДС = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаПлатеж.СуммаНДС,
					ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
					СтрокаПлатеж.КурсВзаиморасчетов, 1,
					СтрокаПлатеж.КратностьВзаиморасчетов, 1);
			КонецЕсли;
		КонецЦикла;
		
		Если ТипДокументаОснования = ТипДокументаОтчетКомиссионераОПродажах Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансамПолученным"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипДокументаОснования = ТипДокументаСчетНаОплатуПокупателю Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Основание, "СчетНаОплату");
		ИначеЕсли ТипДокументаОснования = ТипДокументаВозвратТоваровПоставщику Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоПретензиям"), "СчетУчетаРасчетовПоАвансам");
		ИначеЕсли ТипДокументаОснования = ТипДокументаНачислениеПеней Тогда
			ТаблицаПлатежей.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом");
		Иначе
			ТаблицаПлатежей.ЗаполнитьЗначения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовСКонтрагентом"), "СчетУчетаРасчетовСКонтрагентом");
			Если ТипДокументаОснования <> ТипДокументаОтчетКомитентуОПродажах
				ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "УдержатьВознаграждение") Тогда
				ТаблицаПлатежей.ЗаполнитьЗначения(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СчетУчетаРасчетовПоАвансам"), "СчетУчетаРасчетовПоАвансам");
			КонецЕсли;
		КонецЕсли;
		
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		СтрокаПлатеж   = РасшифровкаПлатежа[0];
		
	ИначеЕсли ТипДокументаОснования = ТипОплатаПлатежнойКартой Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "СуммаДокумента, Эквайер, ДоговорЭквайринга,
			|СчетКасса, ВидОплаты");
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
		Контрагент  = ДанныеОснования.Эквайер;
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорКонтрагента             = ДанныеОснования.ДоговорЭквайринга;
		НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = ДанныеОснования.СчетКасса;
		
		Если ЗначениеЗаполнено(ДанныеОснования.ВидОплаты) Тогда
			
			ПроцентБанка = Документы.ПоступлениеНаРасчетныйСчет.ЭквайрингПроцентУслугБанкаПоВидуОплаты(
				ДанныеОснования.ВидОплаты, ДанныеОснования.СуммаДокумента);
			НоваяСтрока.СуммаУслуг = ДанныеОснования.СуммаДокумента * ПроцентБанка / 100;
			
		КонецЕсли;
		
		НоваяСтрока.СуммаПлатежа                   = ДанныеОснования.СуммаДокумента - НоваяСтрока.СуммаУслуг;
		НоваяСтрока.СуммаВзаиморасчетов            = ДанныеОснования.СуммаДокумента - НоваяСтрока.СуммаУслуг;
		
		СуммаДокумента = ДанныеОснования.СуммаДокумента - НоваяСтрока.СуммаУслуг;
		СуммаУслуг     = НоваяСтрока.СуммаУслуг;
		
	ИначеЕсли ТипДокументаОснования = ТипДокументаРасходныйКассовыйОрдер Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ВидОперации, ВалютаДокумента,
			|СуммаДокумента, СтатьяДвиженияДенежныхСредств, СубконтоДт1, СубконтоДт2, СубконтоДт3,
			|СчетУчетаРасчетовСКонтрагентом, СчетКасса");
		
		Если ДанныеОснования.ВидОперации <> Перечисления.ВидыОперацийРКО.Инкассация Тогда
			ОписаниеИсключения = НСтр("ru = 'Документ ""Поступление на расчетный счет""
				|вводится только на основании документа ""Выдача наличных""
				|с видом операции ""%1"".'");
			ОписаниеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеИсключения, Перечисления.ВидыОперацийРКО.Инкассация);
			
			ВызватьИсключение ОписаниеИсключения;
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация;
		
		СчетУчетаРасчетовСКонтрагентом = ДанныеОснования.СчетУчетаРасчетовСКонтрагентом;
		СубконтоКт1 = ДанныеОснования.СубконтоДт1;
		СубконтоКт2 = ДанныеОснования.СубконтоДт2;
		СубконтоКт3 = ДанныеОснования.СубконтоДт3;
		
		СтатьяДвиженияДенежныхСредств = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		
		СуммаДокумента = ДанныеОснования.СуммаДокумента;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.СчетКасса, "Валютный") Тогда
			СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
			ВалютаДокумента = ДанныеОснования.ВалютаДокумента;
		Иначе
			СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			ВалютаДокумента = ДанныеОснования.ВалютаДокумента;
		КонецЕсли;
		
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация, ВалютаДокумента, Истина);
		
		ТаблицаПлатежей = РасшифровкаПлатежа.Выгрузить();
		
		СуммаДокументаОснования = Новый ТаблицаЗначений();
		СуммаДокументаОснования.Колонки.Добавить("СуммаПлатежа",
			ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		СуммаДокументаОснования.Колонки.Добавить("СтатьяДвиженияДенежныхСредств",
			Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
		СуммаДокументаОснования.Колонки.Добавить("СчетУчетаРасчетовСКонтрагентом",
			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		СуммаДокументаОснования.Колонки.Добавить("СубконтоКт1",
			Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
		
		СтрокаТаблицыСумм = СуммаДокументаОснования.Добавить();
		СтрокаТаблицыСумм.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
		СтрокаТаблицыСумм.СтатьяДвиженияДенежныхСредств  = ДанныеОснования.СтатьяДвиженияДенежныхСредств;
		СтрокаТаблицыСумм.СчетУчетаРасчетовСКонтрагентом = ДанныеОснования.СчетУчетаРасчетовСКонтрагентом;
		СтрокаТаблицыСумм.СубконтоКт1                    = СубконтоКт1;
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(СуммаДокументаОснования, ТаблицаПлатежей);
		РасшифровкаПлатежа.Загрузить(ТаблицаПлатежей);
		
	ИначеЕсли ТипДокументаОснования = ТипДокументаПлатежноеТребование Тогда
		
		ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Номер, СчетКонтрагента, НазначениеПлатежа,
			|СуммаДокумента, СтавкаНДС, СуммаНДС");
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		
		ДатаВходящегоДокумента  = ДанныеОснования.Дата;
		НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОснования.Номер, Истина, Истина);
		СчетКонтрагента   = ДанныеОснования.СчетКонтрагента;
		
		НазначениеПлатежа = СтрЗаменить(ДанныеОснования.НазначениеПлатежа, Символы.ПС, " ");
		
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = ДанныеОснования.СуммаДокумента;
		СтрокаПлатеж.СтавкаНДС    = ДанныеОснования.СтавкаНДС;
		СтрокаПлатеж.СуммаНДС     = ДанныеОснования.СуммаНДС;
		
		СписокВидовДоговора = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговора);
		
		СтрокаПлатеж.ДоговорКонтрагента           = ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов              = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаПлатежа,
			ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
			КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетПриВзносеНаличными()
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными Тогда
		ИспользоватьПереводыВПути = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Организация, Дата);
		ТребуетсяЗаполнение = Ложь;
		Для Каждого Расшифровка Из РасшифровкаПлатежа Цикл
			Если ИспользоватьПереводыВПути Тогда
				Если Расшифровка.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПути
					И Расшифровка.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПутиВал Тогда
					ТребуетсяЗаполнение = Истина;
				КонецЕсли;
			Иначе
				Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Расшифровка.СчетУчетаРасчетовСКонтрагентом, ПланыСчетов.Хозрасчетный.Касса) Тогда
					ТребуетсяЗаполнение = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ТребуетсяЗаполнение Тогда
			Отбор = Новый Структура("РеквизитыПолноеИмя", Новый Соответствие);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.СубконтоКт1", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.СубконтоКт2", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.СубконтоКт3", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.ПодразделениеКт", Истина);
			СчетаУчетаВДокументах.Заполнить(ЭтотОбъект, Отбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСчетПриПереводеСДругогоСчета()
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		ИспользоватьПереводыВПути = УчетнаяПолитика.ИспользоватьПереводыВПутиПриПеремещенияДенежныхСредств(Организация, Дата);
		ТребуетсяЗаполнение = Ложь;
		Для Каждого Расшифровка Из РасшифровкаПлатежа Цикл
			Если ИспользоватьПереводыВПути Тогда
				Если Расшифровка.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПути
					И Расшифровка.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПереводыВПутиВал Тогда
					ТребуетсяЗаполнение = Истина;
				КонецЕсли;
			Иначе
				Если Расшифровка.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.РасчетныеСчета
					И Расшифровка.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ВалютныеСчета Тогда
					ТребуетсяЗаполнение = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ТребуетсяЗаполнение Тогда
			Отбор = Новый Структура("РеквизитыПолноеИмя", Новый Соответствие);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.СубконтоКт1", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.СубконтоКт2", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.СубконтоКт3", Истина);
			Отбор.РеквизитыПолноеИмя.Вставить("РасшифровкаПлатежа.ПодразделениеКт", Истина);
			СчетаУчетаВДокументах.Заполнить(ЭтотОбъект, Отбор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиБанка(ДанныеЗаполнения)
	
	ЗагрузкаВыпискиПоБанковскомуСчету.НачатьЗаполнениеДаннымиБанка(ЭтотОбъект, ДанныеЗаполнения);
	
	ЗагрузкаВыпискиПоБанковскомуСчету.ЗавершитьЗаполнениеДаннымиБанка(ЭтотОбъект, ДанныеЗаполнения);
	
	УчетУСН.ЗаполнитьПоступлениеНаРасчетныйСчет(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли