
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Основание) И Не ЗначениеЗаполнено(Объект.ВидЗакрытия) Тогда
		НаОснованииНеЗаполнен = Истина;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();	
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	
	// Связи субконто
	 бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"Счет"
												   ,"Субконто"
												   ,фКоличествоСубконто
												   ,"Закрытие"
												   ,"Элементы.Закрытие.ТекущиеДанные");	 
												   
	 бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы
	                                               ,"СчетЗакрытия"
												   ,"СубконтоЗакрытия"
												   ,фКоличествоСубконто
												   ,"Закрытие"
												   ,"Элементы.Закрытие.ТекущиеДанные");	 
												   
	// Восстанавливаем настройки субконто и признаки учета в зависимости от счетов учета.
	ДоработатьТаблицуЗакрытие();
	
	// Условное оформление субконто
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"Закрытие"
	                                                           ,"Субконто"
															   ,"КоличествоДоступныхСубконто"
															   ,фКоличествоСубконто);
															   
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
	                                                           ,"Закрытие"
	                                                           ,"СубконтоЗакрытия"
															   ,"КоличествоДоступныхСубконтоЗакрытия"
															   ,фКоличествоСубконто);
															   															   
	УстановитьУсловноеОформление();
	
	УстановитьПараметрыВыбораДляСчетов();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НаОснованииНеЗаполнен Тогда
		ТекстСообщения = НСтр("ru = 'Для данной настройки не назначен вид закрытия в регистре ""Назначение алгоритмов закрытия"". Настройка не будет заполнена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
		
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура("Дата
	                                       |, Организация
										   |, Сценарий
										   |, ВидЗакрытия
										   |, НастройкаЗакрытия
										   |, РегистрБухгалтерии");
	
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДоработатьТаблицуЗакрытие();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_ЗакрытиеСчетов";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЗакрытияПриИзменении(Элемент)
	
	Если (Не Объект.ВидЗакрытия = мКэшРеквизитовФормы.ВидЗакрытия  И Объект.Закрытие.Количество() > 0) Тогда
		
		ТекстВопроса =  НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросВидЗакрытияПриИзменении",ЭтотОбъект, Параметры),ТекстВопроса,РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
		
	Иначе
		
		ИзменениеВидаЗакрытия();
	    ДобавитьВКэш("ВидЗакрытия");
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗакрытияПриИзменении(Элемент)
	
	Если (Не Объект.НастройкаЗакрытия = мКэшРеквизитовФормы.НастройкаЗакрытия  И Объект.Закрытие.Количество() > 0) Тогда
		
		ТекстВопроса =  НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросНастройкаЗакрытияПриИзменении",ЭтотОбъект, Параметры),ТекстВопроса,РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
				
	Иначе
		
		ДобавитьВКэш("НастройкаЗакрытия");
		УстановитьВидимость();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если (Объект.Закрытие.Количество() > 0) Тогда
		
		ТекстВопроса =  НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОрганизацияПриИзменении",ЭтотОбъект, Параметры),ТекстВопроса,РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
		
	Иначе
		
		ОрганизацияИзменение();
        ДобавитьВКэш("Организация");
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	Если (Объект.Закрытие.Количество() > 0) Тогда
		
		ТекстВопроса =  НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросСценарийПриИзменении",ЭтотОбъект, Параметры),ТекстВопроса,РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
		
	Иначе
		
		СценарийИзменение();
	    ДобавитьВКэш("Сценарий");
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрытие

&НаКлиенте
Процедура ЗакрытиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущаяСтрока              = Элементы.Закрытие.ТекущиеДанные;
		ТекущаяСтрока.Счет         = фКэшЗначений.ПараметрыРБ.ПустойСчет;  
		ТекущаяСтрока.СчетЗакрытия = фКэшЗначений.ПараметрыРБ.ПустойСчет;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Закрытие.ТекущиеДанные;
	ИзменениеСчета(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСчетОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока              = Элементы.Закрытие.ТекущиеДанные;
	ТекущаяСтрока.Счет         = фКэшЗначений.ПараметрыРБ.ПустойСчет;  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСубконтоПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.Закрытие.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,"Закрытие",Элемент.Имя);		
	ИзменениеСубконто(Элементы.Закрытие.ТекущиеДанные,ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.Закрытие.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,"Закрытие",Элемент.Имя);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеСубконто) Тогда
	   Элемент.ВыбиратьТип = Истина;
	Иначе	
	   Элемент.ВыбиратьТип = Ложь;
	КонецЕсли; 
	
	НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,ТекущаяСтрока,ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСубконтоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Закрытие.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "Закрытие", "")];	
	
	ИсключитьОрганизацию = Объект.РегистрБухгалтерии = фКэшЗначений.РегБухБюджетирование;
	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "Субконто"
													 , ЗначениеСубконто
													 , фКоличествоСубконто
													 , ИсключитьОрганизацию);
													 
КонецПроцедуры // ЗакрытиеСубконтоАвтоПодбор()
												 
&НаКлиенте
Процедура ЗакрытиеСчетЗакрытияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Закрытие.ТекущиеДанные;
	ИзменениеСчетаЗакрытия(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСчетЗакрытияОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока              = Элементы.Закрытие.ТекущиеДанные;
	ТекущаяСтрока.СчетЗакрытия = фКэшЗначений.ПараметрыРБ.ПустойСчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСубконтоЗакрытияПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.Закрытие.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,"Закрытие",Элемент.Имя);		
	ИзменениеСубконтоЗакрытия(Элементы.Закрытие.ТекущиеДанные,ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСубконтоЗакрытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.Закрытие.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,"Закрытие",Элемент.Имя);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеСубконто) Тогда
	   Элемент.ВыбиратьТип = Истина;
	Иначе	
	   Элемент.ВыбиратьТип = Ложь;
	КонецЕсли; 
	
	НачалоВыбораСубконтоЗакрытия(Элемент,СтандартнаяОбработка,ТекущаяСтрока,ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСубконтоЗакрытияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Закрытие.ТекущиеДанные; 	
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "Закрытие", "")];
	
	ИсключитьОрганизацию = Объект.РегистрБухгалтерии = фКэшЗначений.РегБухБюджетирование;
	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , Параметры
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоЗакрытия"
													 , ЗначениеСубконто
													 , фКоличествоСубконто
													 , ИсключитьОрганизацию);
													 
КонецПроцедуры // ЗакрытиеСубконтоЗакрытияАвтоПодбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.Закрытие.Количество() > 0 Тогда
		
		Если Объект.Проведен Тогда
			ТекстВопроса =  НСтр("ru = 'Проведение документа будет отменено. Табличная часть будет перезаполнена. Продолжить?'");
		Иначе	
			ТекстВопроса =  НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'");
		КонецЕсли; 
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПоЗаполнению",ЭтотОбъект, Параметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет,15,КодВозвратаДиалога.Нет);
		
	Иначе
		Состояние( НСтр("ru = 'Выполняется заполнение...'"));			
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
		//ЗаполнитьДанныеЗакрытия();
	    ПротоколРаботы = ЗаполнитьДанныеЗакрытия();
		Если ПротоколРаботы.ЕстьОшибки Тогда
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ПротоколРаботы.ТекстОшибки);
		КонецЕсли;
		//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-05 (#3772)
		ДопустимоеКоличествоСтрокТЧ = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЗакрытиеСчетов", "ДопустимоеКоличествоСтрокТЧ", Неопределено);
		Если ДопустимоеКоличествоСтрокТЧ = Неопределено Тогда
			ДопустимоеКоличествоСтрокТЧ = 99999;
		КонецЕсли; 
		КоличествоСтрокТЧ = Объект.Закрытие.Количество();
		Если КоличествоСтрокТЧ > ДопустимоеКоличествоСтрокТЧ Тогда
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("ДопустимоеКоличествоСтрокТЧ", ДопустимоеКоличествоСтрокТЧ);
			
			ТекстВопроса =  НСтр("ru = 'Количество строк в табличной части составляет (" + КоличествоСтрокТЧ + "), превышает максимально допустимое количество.
										|Табличная часть будет разпределена на несколько документов по (" + ДопустимоеКоличествоСтрокТЧ + ") строк. Продолжить?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПоРаспределениюДокументаНаНесколько",ЭтотОбъект, СтруктураПараметров), ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
		
		КонецЕсли; 
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-05 (#3772)
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчистить(Команда)
	
	Если Объект.Закрытие.Количество() > 0 Тогда
		
		ТекстВопроса =  НСтр("ru = 'Записи закрытия будут очищены. Продолжить?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОчистить", ЭтотОбъект, Параметры),ТекстВопроса,РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ЗакрытиеСчет);
	МассивЭлементов.Добавить(Элементы.ЗакрытиеСчетЗакрытия);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКоличествоСубконто = Документы.бит_ЗакрытиеСчетов.ПолучитьКоличествоСубконтоДокумента();
	       	
	фКэшЗначений.Вставить("ПараметрыРБ", Документы.бит_ЗакрытиеСчетов.ПолучитьПараметрыРегистраБухгалтерии(Объект.РегистрБухгалтерии));
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	фКэшЗначений.Вставить("РегБухБюджетирование", бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии.бит_Бюджетирование));
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ДоработатьТаблицуЗакрытие()
	
	Для каждого СтрокаТаблицы Из Объект.Закрытие Цикл
        
        СвСч         = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
        СвСчЗакрытия = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗакрытия);
        
		СтрокаТаблицы.КоличествоДоступныхСубконто         = СвСч.КоличествоСубконто;
		СтрокаТаблицы.КоличествоДоступныхСубконтоЗакрытия = СвСчЗакрытия.КоличествоСубконто;
        
        Если фКэшЗначений.ПараметрыРБ.ЕстьКоличественныйУчет Тогда			
			СтрокаТаблицы.КоличественныйУчет = СвСч.Количественный ИЛИ СвСчЗакрытия.Количественный;
		КонецЕсли; 
        
        Если фКэшЗначений.ПараметрыРБ.ЕстьВалютныйУчет Тогда			
			СтрокаТаблицы.ВалютныйУчет = СвСч.Валютный ИЛИ СвСчЗакрытия.Валютный;
		КонецЕсли;
		
		Если фКэшЗначений.ПараметрыРБ.ЕстьПодразделение Тогда			
			СтрокаТаблицы.ПодразделениеДоступно         = СвСч.УчетПоПодразделениям;
			СтрокаТаблицы.ПодразделениеЗакрытияДоступно = СвСчЗакрытия.УчетПоПодразделениям;				
		КонецЕсли; 
		
	КонецЦикла; 											   
	
КонецПроцедуры // ДоработатьТаблицуЗакрытие()

&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-05 (#3772)
//Процедура УстановитьУсловноеОформление()
Процедура УстановитьУсловноеОформление() Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-05 (#3772)
		
	// Количество
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеКоличество");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Закрытие.КоличественныйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
			
	// Валюта, ВалютнаяСумма.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеВалюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеВалютнаяСумма");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Закрытие.ВалютныйУчет", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);

	Если фКэшЗначений.ПараметрыРБ.ЕстьПодразделение Тогда
		// Подразделение
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеПодразделение");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Закрытие.ПодразделениеДоступно", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
		
		
		// Подразделение закрытия.
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеПодразделениеЗакрытия");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Закрытие.ПодразделениеЗакрытияДоступно", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",Истина);
	КонецЕсли; 														   
	
КонецПроцедуры

&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-05 (#3772)
//Процедура УстановитьВидимость()
Процедура УстановитьВидимость() Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-05 (#3772)

	флНастройкаУказана = ЗначениеЗаполнено(Объект.ВидЗакрытия);
	Элементы.Закрытие.Доступность 				  = флНастройкаУказана;
	Элементы.НастройкаЗакрытия.Доступность		  = флНастройкаУказана;
	
	// Проверим это регистр бюджетирования.
	ЭтоБюджетирование = бит_РегламентныеЗакрытия.ЭтоРегистрБюджетирования(фКэшЗначений.ПараметрыРБ.ИмяРегистра);
	ЕстьДопИзмерениеОрганизация = бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация();	
	
	Элементы.Организация.Видимость 	= Не ЭтоБюджетирование ИЛИ ЕстьДопИзмерениеОрганизация;
	Элементы.Организация.АвтоОтметкаНезаполненного = Не ЭтоБюджетирование;
	Элементы.Организация.ОтметкаНезаполненного = НЕ ЭтоБюджетирование И НЕ ЗначениеЗаполнено(Объект.Организация);
	Элементы.Сценарий.Видимость     = ЭтоБюджетирование;
	
	// Управление видимостью колонок табличного поля "Закрытие".
	
	Элементы.ЗакрытиеЦФО.Видимость = ЭтоБюджетирование;
	
	Если ЗначениеЗаполнено(фКэшЗначений.ПараметрыРБ.ИмяРегистра) Тогда
		
		Для Ном = 1 По фКэшЗначений.ПараметрыРБ.КоличествоСубконтоДокумента Цикл
			
			флОтобразитьКолонку = ?(Ном <= фКэшЗначений.ПараметрыРБ.МаксКоличествоСубконто, Истина, Ложь);
			
			Элементы["ЗакрытиеСубконто" 		+ Ном].Видимость = флОтобразитьКолонку;
			Элементы["ЗакрытиеСубконтоЗакрытия" + Ном].Видимость = флОтобразитьКолонку;
			
		КонецЦикла;
		
		Элементы.ЗакрытиеКоличество.Видимость 	= фКэшЗначений.ПараметрыРБ.ЕстьКоличественныйУчет;
		Элементы.ЗакрытиеВидУчета.Видимость     = фКэшЗначений.ПараметрыРБ.ЭтоРегистрНУ;
		Элементы.ЗакрытиеВалюта.Видимость 	 	= фКэшЗначений.ПараметрыРБ.ЕстьВалютныйУчет;
		Элементы.ЗакрытиеВалютнаяСумма.Видимость= фКэшЗначений.ПараметрыРБ.ЕстьВалютныйУчет;
		
	КонецЕсли;
	
	Элементы.ЗакрытиеПодразделение.Видимость = фКэшЗначений.ПараметрыРБ.ЕстьПодразделение;
	Элементы.ЗакрытиеПодразделениеЗакрытия.Видимость = фКэшЗначений.ПараметрыРБ.ЕстьПодразделение;
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);

	УстановитьЗаголовкиКолонокЗакрытия();
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура УстановитьЗаголовкиКолонокЗакрытия()
	
	ИменаРесурсовНастройки = Объект.НастройкаЗакрытия.ИменаРесурсов;
	
	СписокИмен = Документы.бит_ЗакрытиеСчетов.ИменаРесурсов();
	
	Для Каждого эл Из СписокИмен Цикл
		
		ИмяРеквизита = эл.Значение;
		
		НайденнаяСтрока   = ИменаРесурсовНастройки.Найти(ИмяРеквизита, "ИмяРеквизита");
		флОтобразитьКолонку = ?(Не НайденнаяСтрока = Неопределено, Истина, Ложь);
			
		Элементы["Закрытие"+ИмяРеквизита].Видимость  = флОтобразитьКолонку;
		Элементы["Закрытие"+ИмяРеквизита].Заголовок  = ?(флОтобразитьКолонку,НайденнаяСтрока.ИмяРесурса,ИмяРеквизита);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗаголовкиКолонокЗакрытия()

&НаСервере
Процедура ИзменениеВидаЗакрытия()
	
	Если ЗначениеЗаполнено(Объект.ВидЗакрытия) Тогда
		
		Если Объект.Закрытие.Количество() > 0 Тогда
			
			Объект.Закрытие.Очистить();
			
		КонецЕсли; 
		
		Объект.РегистрБухгалтерии = Объект.ВидЗакрытия.РегистрБухгалтерии;
		фКэшЗначений.ПараметрыРБ = Документы.бит_ЗакрытиеСчетов.ПолучитьПараметрыРегистраБухгалтерии(Объект.РегистрБухгалтерии);
		
		// Обработаем изменение регистра бухгалтерии.
		Если фКэшЗначений.ПараметрыРБ.ЭтоРегистрБюдж Тогда
			
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				
				Объект.Организация = Неопределено;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
				Объект.Сценарий = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойСценарий",
				                                                бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
			КонецЕсли;
			
		Иначе	
			
			Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
				
				Объект.Сценарий = Неопределено;
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
				Объект.Организация = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ОсновнаяОрганизация");
			КонецЕсли;
			
		КонецЕсли; 
		
		// Получим настройку закрытия для нового вида закрытия.		
		Если фКэшЗначений.ПараметрыРБ.ЭтоРегистрБюдж Тогда
			СтруктурноеПодразделение = Справочники.Организации.ПустаяСсылка();
		Иначе
			СтруктурноеПодразделение = Объект.Организация;
		КонецЕсли;
		
		Объект.НастройкаЗакрытия = бит_РегламентныеЗакрытия.ПолучитьАлгоритмЗакрытия(СтруктурноеПодразделение, Объект.ВидЗакрытия, Объект.Дата);		
		
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // ИзменениеВидаЗакрытия()

&НаСервере
Процедура ОрганизацияИзменение()
	
	Если Объект.Закрытие.Количество() > 0 Тогда
		
		Объект.Закрытие.Очистить();
		
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		// Получим настройку закрытия для новой организации.
		Объект.НастройкаЗакрытия = бит_РегламентныеЗакрытия.ПолучитьАлгоритмЗакрытия(Объект.Организация, Объект.ВидЗакрытия, Объект.Дата);		
		
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияИзменение()

&НаСервере
Процедура СценарийИзменение()

	Если ЗначениеЗаполнено(Объект.Сценарий) Тогда
		
		Если Объект.Закрытие.Количество() > 0 Тогда
			
			Объект.Закрытие.Очистить();
			
		КонецЕсли; 
		
		// Получим настройку закрытия.
		Объект.НастройкаЗакрытия = бит_РегламентныеЗакрытия.ПолучитьАлгоритмЗакрытия(Справочники.Организации.ПустаяСсылка(), Объект.ВидЗакрытия, Объект.Дата);				
		
	КонецЕсли; 

	УстановитьВидимость();	
	
КонецПроцедуры // СценарийИзменение()

&НаСервере
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
//Процедура ЗаполнитьДанныеЗакрытия()
Функция ЗаполнитьДанныеЗакрытия()
	
	ПротоколРаботы =  Новый Структура("ЕстьОшибки, ТекстОшибки",Ложь, ""); 
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код ()

	Если Объект.Закрытие.Количество() > 0 И Объект.Проведен Тогда
	
		Если Объект.Проведен Тогда
	        ДокОб = РеквизитФормыВЗначение("Объект");
			Попытка
				ДокОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось отменить проведение документа. По причине: %1." + " "
								+ "Для перезаполнения табличной части отмените проведение документа.'"), 
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
				//ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект");
				//Возврат;
				ПротоколРаботы.ЕстьОшибки = Истина;
				ПротоколРаботы.ТекстОшибки = ТекстСообщения;
				Возврат ПротоколРаботы;				
				//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
			КонецПопытки;
	       ЗначениеВДанныеФормы(ДокОб, Объект);			
		КонецЕсли; 
	КонецЕсли; 
	
	// Заполнение табличной части
	ДокОб = РеквизитФормыВЗначение("Объект");
	ДокОб.ЗаполнитьТчЗакрытие(фКэшЗначений.ПараметрыРБ);
	ЗначениеВДанныеФормы(ДокОб, Объект);
	
	// Восстанавливаем настройки субконто и признаки учета в зависимости от счетов учета.
	ДоработатьТаблицуЗакрытие();	
	
	Модифицированность = Истина;
	
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (	
//КонецПроцедуры // ЗаполнитьДанныеЗакрытия()
	Возврат ПротоколРаботы;
	
КонецФункции // ЗаполнитьДанныеЗакрытия()
//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-05 (#3772)
&НаКлиенте
Процедура РаспределитьДанныеЗакрытияПоНесколькимДокументам(ДопустимоеКоличествоСтрокТЧ)
	
	Если ДопустимоеКоличествоСтрокТЧ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерДокумента = 0;
	ФормаНовогоДокумента = Неопределено;
	ФормаДублирующегоДокумента = ПолучитьФорму("Документ.бит_ЗакрытиеСчетов.Форма.ФормаДокумента",,,Строка(Новый УникальныйИдентификатор));
	
	Объект.Комментарий = ?(ЗначениеЗаполнено(Объект.Комментарий), Объект.Комментарий + Символы.ПС, "") + "Часть ";
	Для каждого СтрокаТЧ Из Объект.Закрытие Цикл
		
		НовыйНомерДокумента = Цел((СтрокаТЧ.НомерСтроки - 1) / ДопустимоеКоличествоСтрокТЧ);
		
		Если НомерДокумента <> НовыйНомерДокумента Тогда
			
			НомерДокумента = НовыйНомерДокумента;
			ФормаНовогоДокумента = ОткрытьФорму("Документ.бит_ЗакрытиеСчетов.Форма.ФормаДокумента",,,Строка(Новый УникальныйИдентификатор));
			СкопироватьФорму(ФормаНовогоДокумента);
			
			ФормаНовогоДокумента.Объект.Комментарий = Объект.Комментарий + (НовыйНомерДокумента + 1);
			
		КонецЕсли;
		
		Если ФормаНовогоДокумента = Неопределено Тогда
			НоваяСтрока = ФормаДублирующегоДокумента.Объект.Закрытие.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ФормаНовогоДокумента.Объект.Закрытие.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
	КонецЦикла; 
	
	Объект.Комментарий = Объект.Комментарий + "1";
	
	Объект.Закрытие.Очистить();
	Для Каждого СтрокаТЧ Из ФормаДублирующегоДокумента.Объект.Закрытие Цикл 
		
		НоваяСтрока = Объект.Закрытие.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьФорму(ФормаНовогоДокумента)
	
	ЗаполнитьЗначенияСвойств(ФормаНовогоДокумента.Объект, Объект, "Дата,  
																	|РучнаяКорректировка,  
																	|Организация,  
																	|Сценарий,  
																	|ВидЗакрытия,  
																	|НастройкаЗакрытия,  
																	|РегистрБухгалтерии,  
																	|Ответственный,  
																	|Комментарий,  
																	|ОтразитьВЗакрытомПериоде");
	
	ФормаНовогоДокумента.фКэшЗначений 					= фКэшЗначений;
	ФормаНовогоДокумента.фКоличествоСубконто 			= фКоличествоСубконто;
	ФормаНовогоДокумента.ПараметрыПодключаемыхКоманд 	= ПараметрыПодключаемыхКоманд;
	ФормаНовогоДокумента.НаОснованииНеЗаполнен 			= НаОснованииНеЗаполнен;
	ФормаНовогоДокумента.СостояниеДокумента 			= СостояниеДокумента;
	
	ФормаНовогоДокумента.УстановитьВидимость();
	ФормаНовогоДокумента.УстановитьУсловноеОформление();
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-05 (#3772)

&НаСервере
Процедура ИзменениеСчета(Идентификатор)
	
	ТекущаяСтрока = Объект.Закрытие.НайтиПоИдентификатору(Идентификатор);	
	Если ТекущаяСтрока = Неопределено Тогда		
		Возврат;		
	КонецЕсли; 
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.Счет,фКоличествоСубконто);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока,НастройкиСубконто,"Субконто");
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.Счет);
    
	ТекущаяСтрока.КоличествоДоступныхСубконто = СвСч.КоличествоСубконто;
	
	Если фКэшЗначений.ПараметрыРБ.ЕстьПодразделение Тогда
	
		 ТекущаяСтрока.ПодразделениеДоступно = СвСч.УчетПоПодразделениям;
		 
		 Если НЕ ТекущаяСтрока.ПодразделениеДоступно Тогда		 
		 	ТекущаяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();		 
		 КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеСчета()

&НаСервере
Процедура ИзменениеСчетаЗакрытия(Идентификатор)
	
	ТекущаяСтрока = Объект.Закрытие.НайтиПоИдентификатору(Идентификатор);	
	Если ТекущаяСтрока = Неопределено Тогда		
		Возврат;		
	КонецЕсли; 
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетЗакрытия, фКоличествоСубконто);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоЗакрытия");
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетЗакрытия);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоЗакрытия = СвСч.КоличествоСубконто;
	
	Если фКэшЗначений.ПараметрыРБ.ЕстьПодразделение Тогда
	
		 ТекущаяСтрока.ПодразделениеЗакрытияДоступно = СвСч.УчетПоПодразделениям;
		 
		 Если НЕ ТекущаяСтрока.ПодразделениеЗакрытияДоступно Тогда		 
		 	ТекущаяСтрока.ПодразделениеЗакрытия = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();		 
		 КонецЕсли; 
		 
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеСчетаЗакрытия()

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,ИмяТабличногоПоля,ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента,ИмяТабличногоПоля,"");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконто(Контейнер,ЗначениеСубконто)
	
	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,"Субконто",фКоличествоСубконто);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,"Субконто",ЗначениеСубконто,фКоличествоСубконто);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,"Субконто","",фКоличествоСубконто);																   
	
КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент,СтандартнаяОбработка,Контейнер,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"Субконто"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконто);	
	
		
  // Установим параметры выбора субконто.
  бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
  
		
КонецПроцедуры // НачалоВыбораСубконто()

&НаКлиенте
Процедура ИзменениеСубконтоЗакрытия(Контейнер,ЗначениеСубконто)
	
	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,"СубконтоЗакрытия",фКоличествоСубконто);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,"СубконтоЗакрытия",ЗначениеСубконто,фКоличествоСубконто);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,"СубконтоЗакрытия","",фКоличествоСубконто);																   
	
КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконтоЗакрытия(Элемент,СтандартнаяОбработка,Контейнер,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоЗакрытия"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконто);	
	
		
  // Установим параметры выбора субконто.
  бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
  
		
КонецПроцедуры // НачалоВыбораСубконто()

// Обработка оповещения при вопросе пользователю.
// 
&НаКлиенте
Процедура ВопросПоЗаполнению(Результат, Параметры) Экспорт
	
	Ответ = Результат; 
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Состояние( НСтр("ru = 'Выполняется заполнение...'"));			
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//ЗаполнитьДанныеЗакрытия();
	ПротоколРаботы = ЗаполнитьДанныеЗакрытия();
	Если ПротоколРаботы.ЕстьОшибки Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ПротоколРаботы.ТекстОшибки);
	КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-05 (#3772)
	ДопустимоеКоличествоСтрокТЧ = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("ЗакрытиеСчетов", "ДопустимоеКоличествоСтрокТЧ", Неопределено);
	Если ДопустимоеКоличествоСтрокТЧ = Неопределено Тогда
		ДопустимоеКоличествоСтрокТЧ = 99999;
	КонецЕсли;
	КоличествоСтрокТЧ = Объект.Закрытие.Количество();
	Если КоличествоСтрокТЧ > ДопустимоеКоличествоСтрокТЧ Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ДопустимоеКоличествоСтрокТЧ", ДопустимоеКоличествоСтрокТЧ);
		
		ТекстВопроса =  НСтр("ru = 'Количество строк в табличной части составляет (" + КоличествоСтрокТЧ + "), превышает максимально допустимое количество.
									|Табличная часть будет разпределена на несколько документов по (" + ДопустимоеКоличествоСтрокТЧ + ") строк. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПоРаспределениюДокументаНаНесколько",ЭтотОбъект, СтруктураПараметров), ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-05 (#3772)
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-05 (#3772)
&НаКлиенте
Процедура ВопросПоРаспределениюДокументаНаНесколько(Результат, СтруктураПараметров) Экспорт
	
	Ответ = Результат; 
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется распределение...'"));			
	РаспределитьДанныеЗакрытияПоНесколькимДокументам(СтруктураПараметров.ДопустимоеКоличествоСтрокТЧ);

КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-05 (#3772)

// Обработчик оповещения при вопросе пользователю. 
// 
// Параметры:
//  Результат - Строка.
// 
&НаКлиенте
Процедура ВопросОчистить(Результат, Параметры) Экспорт

	Ответ = Результат;
		
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Закрытие.Очистить();
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры // ВопросОчистить(Результат, Параметры) 

// Обработчик оповещения при вопросе пользователю. 
// 
// Параметры:
//  Результат - Строка.
// 
&НаКлиенте
Процедура ВопросВидЗакрытияПриИзменении(Результат, Параметры) Экспорт
	
	Ответ = Результат;
		
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		
		ИзвлечьИзКэша("ВидЗакрытия");
		Возврат;
		
	КонецЕсли;
	
	ИзменениеВидаЗакрытия();
	ДобавитьВКэш("ВидЗакрытия");

КонецПроцедуры // ВопросВидЗакрытияПриИзменении() 

// Обработчик оповещения при вопросе пользователю. 
// 
// Параметры:
//  Результат - Строка.
// 
&НаКлиенте
Процедура ВопросНастройкаЗакрытияПриИзменении(Результат, Параметры) Экспорт
	
	Ответ = Результат;
		
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			
		ИзвлечьИзКэша("НастройкаЗакрытия");
		Возврат;
		
	КонецЕсли;
	
	Объект.Закрытие.Очистить();
	
	ДобавитьВКэш("НастройкаЗакрытия");
	УстановитьВидимость();

КонецПроцедуры // ВопросНастройкаЗакрытияПриИзменении() 

// Обработчик оповещения при вопросе пользователю. 
// 
// Параметры:
//  Результат - Строка.
// 
&НаКлиенте
Процедура ВопросОрганизацияПриИзменении(Результат, Параметры) Экспорт
	
	Ответ = Результат;
		
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			
		ИзвлечьИзКэша("Организация");
		Возврат;
		
	КонецЕсли;

	ОрганизацияИзменение();
	ДобавитьВКэш("Организация");	

КонецПроцедуры // ВопросОрганизацияПриИзменении() 

// Обработчик оповещения при вопросе пользователю. 
// 
// Параметры:
//  Результат - Строка.
// 
&НаКлиенте
Процедура ВопросСценарийПриИзменении(Результат, Параметры) Экспорт
	
	Ответ = Результат;
		
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			
		ИзвлечьИзКэша("Сценарий");
		Возврат;
		
	КонецЕсли;

	СценарийИзменение();
	ДобавитьВКэш("Сценарий");	

КонецПроцедуры // ВопросСценарийПриИзменении() 

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

#КонецОбласти
