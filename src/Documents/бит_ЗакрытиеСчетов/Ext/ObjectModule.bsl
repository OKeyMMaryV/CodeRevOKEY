#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
	
	// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
	бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// СтруктураШапкиДокумента - Выборка из результата запроса по шапке документа.
	// ТаблицаПоЗакрытию	   - Таблица значений, содержащая данные для проведения и проверки ТЧ Закрытие.
	Перем СтруктураШапкиДокумента, ТаблицаПоЗакрытию;


		
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект,Ложь) Тогда
		Возврат                                                                                        
	КонецЕсли;
	
	// Заполним значения которые зависят от выбранного регистра бухгалтерии.
	ПарамРБ  = Документы.бит_ЗакрытиеСчетов.ПолучитьПараметрыРегистраБухгалтерии(РегистрБухгалтерии);
	
	// Подготовим структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, ПарамРБ, Отказ);
	
	// Подготовим таблицы для возможности проведения.
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоЗакрытию);
	
	// Проверить заполнение ТЧ.
	ПроверитьЗаполнениеТабличнойЧастиЗакрытие(ТаблицаПоЗакрытию, СтруктураШапкиДокумента, ПарамРБ, Отказ, Заголовок);
	
	ПроверитьОтключениеТрансляции();
	
	// Движения по документу.
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							Отказ, Заголовок, ТаблицаПоЗакрытию);

	КонецЕсли; 
						
	//BIT_Amosov 2014/05/27 {{
	//Задача № 640 "Реформация баланса"
	Движения.бит_Дополнительный_2.Записать(Истина);
	//BIT_Amosov 2014/05/27 }}						
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПарамРБ  = Документы.бит_ЗакрытиеСчетов.ПолучитьПараметрыРегистраБухгалтерии(РегистрБухгалтерии);
	
	// Проверка шапки
	Если ПарамРБ.ЭтоРегистрБюдж Тогда
		
		ПроверяемыеРеквизиты.Добавить("Сценарий");
		
	Иначе	
		
		ПроверяемыеРеквизиты.Добавить("Организация");
		
	КонецЕсли; 
	
	// Проверка табличной части
	Если ПарамРБ.ЭтоРегистрБюдж Тогда
		ПроверяемыеРеквизиты.Добавить("Закрытие.ЦФО");
	КонецЕсли;
	
	ИменаРесурсов = НастройкаЗакрытия.ИменаРесурсов.Выгрузить();
	
	СписокИменСуммРеквизитов = Документы.бит_ЗакрытиеСчетов.ИменаРесурсов();
	Для Каждого ТекИмя Из ИменаРесурсов Цикл
		
		НайденныйЭлемент = СписокИменСуммРеквизитов.НайтиПоЗначению(ТекИмя.ИмяРеквизита);
		
		Если Не НайденныйЭлемент = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("Закрытие."+ТекИмя.ИмяРесурса);
		КонецЕсли;
		
	КонецЦикла; // ИменаРесурсов 
	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.бит_НастройкиЗакрытия") Тогда
		ЗаполнитьПоНастройкеЗакрытия(ДанныеЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	//ижтиси, шадрин, 24.12.2015(добавлена по просьбе клиента
	Если ЭтоНовый() Тогда
		Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет табличную часть "Закрытие".
// 
Процедура ЗаполнитьТчЗакрытие(ПараметрыРБ) Экспорт
	
	НайденоПолеСумма = Истина;
	Для каждого Строка Из НастройкаЗакрытия.Закрытие Цикл
		
		Если Строка.ВидЗакрытия = Перечисления.бит_ВидыЗакрытия.Простое Тогда
			Продолжить;
		КонецЕсли; 
		
		ТаблицаБаза   = Строка.База.Поля;
		ТаблицаДанные = Строка.Данные.Поля;
		ЕстьБаза 	  = Ложь;
		Для каждого ЭлБаза Из ТаблицаБаза Цикл 		
			Если ВРег(ЭлБаза.Синоним) = ВРег("Сумма") Тогда 				
				ЕстьБаза = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		ЕстьДанные = Ложь;
		Для каждого ЭлДанные Из ТаблицаДанные Цикл 		
			Если ВРег(ЭлДанные.Синоним) = ВРег("Сумма") Тогда				
				ЕстьДанные = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ЕстьБаза ИЛИ НЕ ЕстьДанные Тогда
		
			НайденоПолеСумма = Ложь;
			Настройка = ?(НЕ ЕстьБаза, "База", "Данные");
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Список ""%1"" не содержит колонку ""Сумма"". "
						   + "Заполнение не возможно. Проверьте настройку ""%2"" строка № %3.'"), 
						   		Настройка, НастройкаЗакрытия, Формат(Строка.НомерСтроки, "Л=ru_RU; ЧГ="));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, НастройкаЗакрытия, "Объект"); 
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ НайденоПолеСумма Тогда 	
		Возврат;		
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	Если ПараметрыРБ.ЭтоРегистрБюдж Тогда		
		СтруктураПараметров.Вставить("Сценарий", Сценарий);		
	КонецЕсли; 
	СтруктураПараметров.Вставить("Дата"              , Дата);
	СтруктураПараметров.Вставить("НастройкаЗакрытия" , НастройкаЗакрытия);
	СтруктураПараметров.Вставить("КоличествоСубконто", ПараметрыРБ.МинКоличествоСубконто);
	СтруктураПараметров.Вставить("ЕстьПодразделение" , ПараметрыРБ.ЕстьПодразделение);
	
	// Заполним закрытие по настройке закрытия.
	бит_РегламентныеЗакрытия.ЗаполнитьДанныеЗакрытия(Закрытие, СтруктураПараметров);	 		

КонецПроцедуры // ЗаполнитьТчЗакрытие()

// Процедура заполняет документ.
// 
// Параметры:
//  СтруктураЗаполнения - Структура.
//
Процедура ЗаполнитьДокумент(СтруктураЗаполнения) Экспорт

	// Обязательные для заполнения поля: Дата, ВидЗакрытия, НастройкаЗакрытия, Сценарий (бюджетирование).
	Для каждого КлЗнч Из СтруктураЗаполнения Цикл
		ИмяРеквизита = КлЗнч.Ключ;
		Если ИмяРеквизита = "Дата" ИЛИ Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЭтотОбъект[ИмяРеквизита] = КлЗнч.Значение;
		КонецЕсли; 	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВидЗакрытия) И Не ЗначениеЗаполнено(РегистрБухгалтерии) Тогда
		РегистрБухгалтерии = ВидЗакрытия.РегистрБухгалтерии;
	КонецЕсли;
	
	// Заполняет табличную часть "Закрытие"
	Если ЗначениеЗаполнено(РегистрБухгалтерии) Тогда
		ПараметрыРБ = Документы.бит_ЗакрытиеСчетов.ПолучитьПараметрыРегистраБухгалтерии(РегистрБухгалтерии);
		ЗаполнитьТчЗакрытие(ПараметрыРБ);	
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДокумент()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирует структуру шапки документа и дополнительных полей.
// 
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, ПарамРБ, Отказ)

	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ИменаРесурсов", СтруктураШапкиДокумента.НастройкаЗакрытия.ИменаРесурсов.Выгрузить());
	
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ПарамРБ.ИмяРегистра];
	флЕстьНомерЖурнала = ?(МетаданныеРегистра.Реквизиты.Найти("НомерЖурнала")=Неопределено,Ложь,Истина);
	
	СтруктураШапкиДокумента.Вставить("ЕстьНомерЖурнала",флЕстьНомерЖурнала);
	
КонецПроцедуры

// Подготовим таблицы документа для возможности проведения докумена.
// 
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
// 
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоЗакрытию) Экспорт
	
	ТаблицаПоЗакрытию = Закрытие.Выгрузить();
	
КонецПроцедуры

// Процедура проверяет правильность заполнения строк табличной части "Закрытие".
// 
// Параметры: 
//  ТаблицаПоЗакрытию	    - таблица значений, содержащая данные для проведения и проверки ТЧ Закрытие.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
// 
Процедура ПроверитьЗаполнениеТабличнойЧастиЗакрытие(ТаблицаПоЗакрытию, СтруктураШапкиДокумента, ПарамРБ, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура;
	
	// Если это регистр бюджетирования, тогда
	Если бит_РегламентныеЗакрытия.ЭтоРегистрБюджетирования(ПарамРБ.ИмяРегистра) Тогда
		СтруктураОбязательныхПолей.Вставить("ЦФО");
	КонецЕсли;
	
	СтруктураОбязательныхПолей.Вставить("Счет");
	СтруктураОбязательныхПолей.Вставить("СчетЗакрытия");
	
	// Теперь вызовем общую процедуру проверки.
	бит_РаботаСМетаданными.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Закрытие", 
		СтруктураОбязательныхПолей, Отказ, Заголовок);

	ИменаРесурсов = СтруктураШапкиДокумента.ИменаРесурсов;
	СписокИменСуммРеквизитов = Документы.бит_ЗакрытиеСчетов.ИменаРесурсов();
	
	Для каждого Строка Из Закрытие Цикл
		
		КоличествоНулевых=0;
		Для Каждого ТекИмя Из ИменаРесурсов Цикл
			НайденныйЭлемент = СписокИменСуммРеквизитов.НайтиПоЗначению(ТекИмя.ИмяРеквизита);
			Если Не НайденныйЭлемент = Неопределено
				И Строка[НайденныйЭлемент.Значение] = 0 Тогда
				КоличествоНулевых=КоличествоНулевых+1;
			КонецЕсли;
		КонецЦикла;
		
		Если ИменаРесурсов.Количество() = КоличествоНулевых Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Необходимо заполнить сумму в строке %1.'"), 
				Формат(Строка.НомерСтроки, "Л=ru_RU; ЧГ="));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , ,Отказ); 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Процедура выполняет движения по регистрам.
//                
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаПоЗакрытию)
	
	ИменаРесурсов = СтруктураШапкиДокумента.ИменаРесурсов;
	СторонаДт 	  = Перечисления.бит_ДтКт.Дт;
	ПарамРБ       = Документы.бит_ЗакрытиеСчетов.ПолучитьПараметрыРегистраБухгалтерии(РегистрБухгалтерии);
	
	// Выполняем перебор таблицы значений "ТаблицаПоЗакрытию".
	// Выболнять перебор запроса по таблице не рекомендуется
	// так как реквизиты "субконто" - имеют тип "ЛюбаяСсылка".
	
	Для каждого СтрокаТаблицы Из ТаблицаПоЗакрытию Цикл
		
		ТекСторонаПроводки = СтрокаТаблицы.ДтКт;
		
		Если ЗначениеЗаполнено(ТекСторонаПроводки) Тогда
			СторонаПроводки = ?(ТекСторонаПроводки = СторонаДт, "Кт", "Дт");
		Иначе	
			
			ТекВидСчета = СтрокаТаблицы.Счет.Вид;
			
			СторонаПроводки = ?(ТекВидСчета = ВидСчета.Активный 
								Или ТекВидСчета = ВидСчета.АктивноПассивный, "Кт", "Дт");
			
		КонецЕсли; 
		
		ДобавитьПроводку(СтруктураШапкиДокумента, Движения[ПарамРБ.ИмяРегистра], СтрокаТаблицы, СторонаПроводки, ИменаРесурсов, ПарамРБ);
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура добавляет запись в набор записей регистра бухгалтерии.
// 
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  НаборЗаписей    		- РегистрБухгалтерии.НаборЗаписей.
//  Данные          		- СтрокаТабличнойЧасти.
//  СторонаПроводки 		- Строка, "Дт, Кт".
// 
Процедура ДобавитьПроводку(СтруктураШапкиДокумента, НаборЗаписей, Данные, СторонаПроводки, ИменаРесурсов, ПарамРБ)
	
	Проводка = НаборЗаписей.Добавить();
	
	Проводка.Период = СтруктураШапкиДокумента.Дата;
	
	// Если это регистр бюджетирования, тогда
	Если ПарамРБ.ЭтоРегистрБюдж Тогда
		
		Проводка.Сценарий = СтруктураШапкиДокумента.Сценарий;
		Проводка.ЦФО	  = Данные.ЦФО;
		
		Если ПарамРБ.ЕстьДопИзмерениеОрганизация Тогда		
			Проводка.Организация = СтруктураШапкиДокумента.Организация;		
		КонецЕсли; 
		
	Иначе
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
	КонецЕсли;
	
	Проводка.Активность   = Истина;
	
	Если ПустаяСтрока(Данные.Содержание) Тогда
		Проводка.Содержание = СтрШаблон(НСтр("ru = 'Закрытие счета %1'"), Данные.Счет);
	Иначе	
		Проводка.Содержание = Данные.Содержание;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ЕстьНомерЖурнала Тогда		
		Проводка.НомерЖурнала = Данные.НомерЖурнала;		
	КонецЕсли; 
	
	// Заполним сторону проводки для счета.
	ЗаполнитьСторонуПроводкиДляСчета("Счет", Проводка, Данные, СторонаПроводки, ПарамРБ);
	
	СторонаПроводки = ?(СторонаПроводки = "Дт", "Кт", "Дт");
	
	// Заполним сторону проводки для счета закрытия.
	ЗаполнитьСторонуПроводкиДляСчета("СчетЗакрытия", Проводка, Данные, СторонаПроводки, ПарамРБ);
	
	// Заполним суммы.
    МетаРегРесурсы = Метаданные.РегистрыБухгалтерии[ПарамРБ.ИмяРегистра].Ресурсы;
    Для Каждого ТекИмя Из ИменаРесурсов Цикл
        
        ТекИмяРесурса = ТекИмя.ИмяРесурса;
        МетаРесурса   = МетаРегРесурсы.Найти(ТекИмяРесурса);
        
        Если МетаРесурса <> Неопределено Тогда
            
            Если МетаРесурса.Балансовый Тогда
                Проводка[ТекИмяРесурса] = Данные[ТекИмя.ИмяРеквизита];
            Иначе
                Если ПарамРБ.ИмяРегистра = "Хозрасчетный" 
                    И (ТекИмяРесурса = "СуммаНУ" ИЛИ ТекИмяРесурса = "СуммаПР" ИЛИ ТекИмяРесурса = "СуммаВР") Тогда
                    СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
                    СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
                    Если СвСчДт.НалоговыйУчет Тогда
                        Проводка[ТекИмяРесурса + "Дт"] = Данные[ТекИмя.ИмяРеквизита];
                    КонецЕсли;
                    Если СвСчКт.НалоговыйУчет Тогда
                        Проводка[ТекИмяРесурса + "Кт"] = Данные[ТекИмя.ИмяРеквизита];
                    КонецЕсли;
                Иначе	
                    Проводка[ТекИмяРесурса + "Дт"] = Данные[ТекИмя.ИмяРеквизита];
                    Проводка[ТекИмяРесурса + "Кт"] = Данные[ТекИмя.ИмяРеквизита];
                КонецЕсли;                
            КонецЕсли;
            
        Иначе
            
            Проводка[ТекИмяРесурса] = Данные[ТекИмя.ИмяРеквизита];
            
        КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПроводку()

// Процедура заполняет сторону проводки для счета.
// 
// Параметры:
//  ИмяРеквизитаСчет - Строка.
//  Проводка 		 - РегистрБухгалтерииЗапись.
//  Данные	 		 - СтрокаТабличнойЧасти.
//  СторонаПроводки  - Строка, "Дт, Кт".
// 
Процедура ЗаполнитьСторонуПроводкиДляСчета(ИмяРеквизитаСчет, Проводка, Данные, СторонаПроводки, ПарамРБ)
	
	ИмяСчета = "Счет" + СторонаПроводки;
    Проводка[ИмяСчета] = Данные[ИмяРеквизитаСчет];
    
    ТекСчет = Проводка[ИмяСчета];
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСчет);
		
	КолСубконто    = СвСч.КоличествоСубконто;
	НачИмяСубконто = ?(ИмяРеквизитаСчет = "Счет", "Субконто", "СубконтоЗакрытия");
	
	Для Ном = 1 По ПарамРБ.МаксКоличествоСубконто Цикл
		
		Если Ном <= КолСубконто Тогда
			бит_БухгалтерияСервер.УстановитьСубконто(ТекСчет, Проводка["Субконто" + СторонаПроводки], Ном, Данные[НачИмяСубконто + Ном]);
		КонецЕсли	
		
	КонецЦикла;	
	
	Если ПарамРБ.ЕстьПодразделение 
		 И СвСч.УчетПоПодразделениям Тогда
		 
		ИмяПодразделения = ?(ИмяРеквизитаСчет = "Счет", "Подразделение", "ПодразделениеЗакрытия"); 
		Проводка["Подразделение" + СторонаПроводки] = Данные[ИмяПодразделения];
	
	КонецЕсли; 
	
	Если ПарамРБ.ЕстьКоличественныйУчет
		И СвСч.Количественный Тогда
		
		Проводка["Количество" + СторонаПроводки] = Данные.Количество;
		
	КонецЕсли;
	
	// Если это регистр налогового учета, тогда
	Если ПарамРБ.ЭтоРегистрНУ Тогда
		Проводка["ВидУчета" + СторонаПроводки] = Данные.ВидУчета;
	КонецЕсли;
            
	Если ПарамРБ.ЕстьВалютныйУчет 
		И СвСч.Валютный Тогда
		
		Проводка["Валюта"		 + СторонаПроводки] = Данные.Валюта;
		Проводка["ВалютнаяСумма" + СторонаПроводки] = Данные.ВалютнаяСумма;
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСторонуПроводкиДляСчета()

// Процедура проверяет отключение трансляции для документа и выдает сообщение.
// 
Процедура ПроверитьОтключениеТрансляции()

	Запрос = Новый Запрос;

	ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", "Документ.бит_ЗакрытиеСчетов");
	Запрос.УстановитьПараметр("ОбъектСистемы", ОбъектСистемы);
	Запрос.УстановитьПараметр("Период", 	   Дата);
	Запрос.УстановитьПараметр("Приемник", 	   РегистрБухгалтерии);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_НастройкиРежимовТрансляцииСрезПоследних.Режим
	|ИЗ
	|	РегистрСведений.бит_НастройкиРежимовТрансляции.СрезПоследних(&Период, ) КАК бит_НастройкиРежимовТрансляцииСрезПоследних
	|ГДЕ
	|	бит_НастройкиРежимовТрансляцииСрезПоследних.ОбъектСистемы = &ОбъектСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_НазначениеПравилЗаполненияПриТрансляции.УсловиеВхождения
	|ИЗ
	|	РегистрСведений.бит_НазначениеПравилЗаполненияПриТрансляции КАК бит_НазначениеПравилЗаполненияПриТрансляции
	|ГДЕ
	|	бит_НазначениеПравилЗаполненияПриТрансляции.ОбъектСистемы = &ОбъектСистемы
	|	И бит_НазначениеПравилЗаполненияПриТрансляции.Приемник = &Приемник";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// В настройке режимов трансляции
	ВыборкаНастройка = МассивРезультатов[0].Выбрать();
	
	Пока ВыборкаНастройка.Следующий() Цикл
		Если ВыборкаНастройка.Режим = Перечисления.бит_РежимыТрансляции.НеВыполнять Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	// В назначении правил заполнения
	Выборка = МассивРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.УсловиеВхождения = Перечисления.бит_Кроме.Кроме Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	ТекстСообщения =  НСтр("ru = 'Не отключена трансляция по документу. Проводки могут быть не сформированы.'");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьПоНастройкеЗакрытия(НастройкаЗакрытияОснование, СтандартнаяОбработка)
	
	ОсновнаяОрганизация = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ОсновнаяОрганизация");
	ВидЗакрытияОснование= бит_РегламентныеЗакрытия.ПолучитьВидЗакрытия(ОсновнаяОрганизация, НастройкаЗакрытияОснование, ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ВидЗакрытияОснование) Тогда
		ВидЗакрытия        = ВидЗакрытияОснование;
		РегистрБухгалтерии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЗакрытияОснование, "РегистрБухгалтерии");
		НастройкаЗакрытия  = НастройкаЗакрытияОснование;	
		Организация        = ОсновнаяОрганизация;
						
		Если бит_РегламентныеЗакрытия.ЭтоРегистрБюджетирования(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрБухгалтерии, "ИмяОбъекта")) Тогда
			Сценарий = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ОсновнойСценарий",
			                                                бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли
