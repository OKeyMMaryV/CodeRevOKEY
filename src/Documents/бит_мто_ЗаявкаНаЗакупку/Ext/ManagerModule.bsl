#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
    // Заявка на закупку.
    КомандаПечати = КомандыПечати.Добавить();
    КомандаПечати.Идентификатор = "ЗаявкаНаЗакупку";
    КомандаПечати.Представление = НСтр("ru = 'Заявка на закупку'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 10;
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаЗакупку") Тогда					
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаявкаНаЗакупку", НСтр("ru = 'Заявка на закупку'"), 
			СформироватьПечатнуюФормуЗаявкаНаЗакупку(МассивОбъектов),,"Документ.бит_мто_ЗаявкаНаЗакупку.ЗаявкаНаЗакупку");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает результат запроса по массиву документов.
// 
// Параметры:
//  МассивСсылок - Массив.
// 
// Возвращаемое значение:
//  Результат - ТаблицаЗначений.
// 
Функция ПолучитьРезультатЗапросаПоЗаявке(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_мто_ЗаявкаНаЗакупку.Ссылка КАК ЗаявкаНаЗакупку,
	               |	бит_мто_ЗаявкаНаЗакупку.Номер,
	               |	бит_мто_ЗаявкаНаЗакупку.Дата,
	               |	бит_мто_ЗаявкаНаЗакупку.Организация,
	               |	бит_мто_ЗаявкаНаЗакупку.ВидОперации,
	               |	бит_мто_ЗаявкаНаЗакупку.ДатаЗакупкиПлан,
	               |	бит_мто_ЗаявкаНаЗакупку.ДатаЗакупкиНеПозднее,
	               |	бит_мто_ЗаявкаНаЗакупку.СтатьяОборотов,
	               |	бит_мто_ЗаявкаНаЗакупку.ЦФО,
	               |	бит_мто_ЗаявкаНаЗакупку.Контрагент,
	               |	бит_мто_ЗаявкаНаЗакупку.ДоговорКонтрагента,
	               |	бит_мто_ЗаявкаНаЗакупку.Проект,
	               |	бит_мто_ЗаявкаНаЗакупку.НоменклатурнаяГруппа,
	               |	бит_мто_ЗаявкаНаЗакупку.БанковскийСчет,
	               |	бит_мто_ЗаявкаНаЗакупку.Аналитика_1,
	               |	бит_мто_ЗаявкаНаЗакупку.Аналитика_2,
	               |	бит_мто_ЗаявкаНаЗакупку.Аналитика_3,
	               |	бит_мто_ЗаявкаНаЗакупку.Аналитика_4,
	               |	бит_мто_ЗаявкаНаЗакупку.Аналитика_5,
	               |	бит_мто_ЗаявкаНаЗакупку.Аналитика_6,
	               |	бит_мто_ЗаявкаНаЗакупку.Аналитика_7,
	               |	бит_мто_ЗаявкаНаЗакупку.Важность,
	               |	бит_мто_ЗаявкаНаЗакупку.Исполнитель,
	               |	бит_мто_ЗаявкаНаЗакупку.Ответственный,
	               |	бит_мто_ЗаявкаНаЗакупку.Комментарий,
	               |	бит_мто_ЗаявкаНаЗакупку.ТипЦен,
	               |	бит_мто_ЗаявкаНаЗакупку.ВалютаДокумента,
	               |	бит_мто_ЗаявкаНаЗакупку.СверхБюджета,
	               |	бит_мто_ЗаявкаНаЗакупку.Сценарий,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.Номенклатура,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.Потребность,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.ЕдиницаИзмерения,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.Количество,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.Цена,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.Сумма,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.СтавкаНДС,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.СуммаНДС,
	               |	бит_мто_ЗаявкаНаЗакупкуТовары.Всего,
	               |	бит_мто_ЗаявкаНаЗакупку.СтатьяОборотов.Кодификатор КАК КодСтатьи
	               |ИЗ
	               |	Документ.бит_мто_ЗаявкаНаЗакупку КАК бит_мто_ЗаявкаНаЗакупку
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_мто_ЗаявкаНаЗакупку.Товары КАК бит_мто_ЗаявкаНаЗакупкуТовары
	               |		ПО бит_мто_ЗаявкаНаЗакупку.Ссылка = бит_мто_ЗаявкаНаЗакупкуТовары.Ссылка
	               |ГДЕ
	               |	бит_мто_ЗаявкаНаЗакупку.Ссылка В(&МассивСсылок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	бит_УстановленныеВизы.Виза,
	               |	бит_УстановленныеВизы.ФизическоеЛицо КАК ФИО,
	               |	бит_УстановленныеВизы.ДатаУстановки,
	               |	бит_УстановленныеВизы.Объект КАК ЗаявкаНаЗакупку
	               |ИЗ
	               |	РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	               |ГДЕ
	               |	бит_УстановленныеВизы.Объект В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультатЗапросаПоЗаявке()

// Функция формирует печатную форму заявки на закупку.
// 
// Параметры:
//  МассивСсылок 		   	  - Массив.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент.
// 
Функция СформироватьПечатнуюФормуЗаявкаНаЗакупку(МассивСсылок)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_бит_мто_ЗаявкаНаЗакупку_ЗаявкаНаЗакупку";
	
	// Формируем запрос по заявкам.
	Результат 			= ПолучитьРезультатЗапросаПоЗаявке(МассивСсылок);
	РезультатЗапроса 	= Результат[0].Выгрузить();
	РезультатЗапросаВизы = Результат[1].Выгрузить();
	
	Если РезультатЗапроса.Количество()>0 Тогда
		
		// Получаем макет и области.
		Макет = ПолучитьМакет("ЗаявкаНаЗакупку");
		
		// Получаем области
		ОбластьЗаявкаШапка 	= Макет.ПолучитьОбласть("ЗаявкаШапка");
		ОбластьТоварыШапка 	= Макет.ПолучитьОбласть("ТоварыШапка");
		ОбластьТовары 		= Макет.ПолучитьОбласть("Товары");
		ОбластьШапкаВиза 	= Макет.ПолучитьОбласть("ШапкаВиза");
		ОбластьСтрокаВиза 	= Макет.ПолучитьОбласть("СтрокаВиза");
		ОбластьПодвал 		= Макет.ПолучитьОбласть("Подвал");
		
		ТаблицаДокументы = РезультатЗапроса.Скопировать();
		ТаблицаДокументы.Свернуть("ЗаявкаНаЗакупку");
		
		Для каждого Документ Из ТаблицаДокументы Цикл
		
			ЗаявкаНаЗакупку = Документ.ЗаявкаНаЗакупку;
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ЗаявкаНаЗакупку", ЗаявкаНаЗакупку);
			
			МассивСтрок = РезультатЗапроса.НайтиСтроки(СтрОтбор);
			
			ОбластьЗаявкаШапка.Параметры.Заполнить(МассивСтрок[0]);
			
			НомерДок = бит_ОбщегоНазначенияКлиентСервер.ПолучитьНомерНаПечать(МассивСтрок[0].ЗаявкаНаЗакупку);
			
			ОбластьЗаявкаШапка.Параметры.Заголовок = НСтр("ru = 'ЗАЯВКА НА ЗАКУПКУ № '") + НомерДок
														+ НСтр("ru = ' от '") + Формат(МассивСтрок[0].Дата, "ДФ = дд.ММ.гггг");
			
			СуммаДокумента = 0;
			СуммаНДСДокумента = 0;
			
			Для каждого Строка Из МассивСтрок Цикл
			
				СуммаДокумента = СуммаДокумента + Строка.Всего;
				СуммаНДСДокумента = СуммаНДСДокумента + Строка.СуммаНДС;
				
			КонецЦикла; 											
			
			ОбластьЗаявкаШапка.Параметры.СуммаДокумента = СуммаДокумента;
			ОбластьЗаявкаШапка.Параметры.СуммаНДСДокумента = СуммаНДСДокумента;
			
			ОбластьЗаявкаШапка.Параметры.СуммаПрописью = бит_ФормированиеПечатныхФорм.СформироватьСуммуПрописью(СуммаДокумента
																									, ОбластьЗаявкаШапка.Параметры.ВалютаДокумента);
			
			ТабличныйДокумент.Вывести(ОбластьЗаявкаШапка);
			ТабличныйДокумент.Вывести(ОбластьТоварыШапка);
			
			Для каждого Строка Из МассивСтрок Цикл
			
				ОбластьТовары.Параметры.Заполнить(Строка);
				ТабличныйДокумент.Вывести(ОбластьТовары);
			
			КонецЦикла; 
			
			ТабличныйДокумент.Вывести(ОбластьШапкаВиза);
			
			// Заполняем визы
			МассивВиз = РезультатЗапросаВизы.НайтиСтроки(СтрОтбор);
			Для Каждого вСтрока Из МассивВиз Цикл
				ОбластьСтрокаВиза.Параметры.Заполнить(вСтрока);
				ТабличныйДокумент.Вывести(ОбластьСтрокаВиза);
			КонецЦикла;
			
			ОбластьПодвал.Параметры.Заполнить(МассивСтрок[0]);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			
		КонецЦикла; 
		
	КонецЕсли;
		
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
			
КонецФункции // СформироватьПечатнуюФормуЗаявкаНаЗакупку()

// Функция находит аналитики тип которых совпадает с типом реквизитов Заявки на закупку.
// 
// Параметры: МетаОбъект - ОбъектМетаданных.
// 
// 
// Возвращаемое значение:
//  СовпадающиеАналитики - Соответствие.
// 
Функция НайтиАналитикиСовпадающиеСРеквизитами(МетаОбъект) Экспорт 

	СовпадающиеАналитики = Новый Соответствие;
	
	МассивТипов = Новый Массив;
	
	Для каждого Реквизит Из МетаОбъект.Реквизиты Цикл
	
		Если Найти(Реквизит.Имя, "Аналитика")=0 Тогда
		
			Для каждого ТипРек Из Реквизит.Тип.Типы() Цикл
			
				Если НЕ ТипРек = Тип("Булево")
					И НЕ ТипРек = Тип("Дата")
					И НЕ ТипРек = Тип("Строка")
					И НЕ ТипРек = Тип("Число") Тогда
					
					СтрРекв = Новый Структура("Имя, Тип", Реквизит.Имя, ТипРек);
					МассивТипов.Добавить(СтрРекв);
				
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Настр = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Для каждого Аналит Из Настр Цикл
		
		Если НЕ Аналит.Значение.ЭтоСоставнойТип Тогда 
		
			Для каждого СтрРекв Из МассивТипов Цикл
				
				ТипРек = СтрРекв.Тип;
				Если Аналит.Значение.ТипЗначения.СодержитТип(ТипРек) Тогда 
					СовпадающиеАналитики.Вставить(Аналит.Ключ, СтрРекв.Имя);
					Прервать;
				КонецЕсли;
			
			КонецЦикла; 
			
		КонецЕсли;	
			
	КонецЦикла; 
	
	Возврат СовпадающиеАналитики;
	
КонецФункции // НайтиАналитикиСовпадающиеСРеквизитами()

// Функция создает документ поступление товаров и документ бит_мто_ОтражениеФактаЗакупки. 
// 
// Параметры:
// 	ЗаявкаНаЗакупку - ДокументСсылка.бит_мто_ЗаявкаНаЗакупку.
//  ТабличнаяЧастьЗаявки - ТаблицаЗначений.
// 
// Возвращаемое значение:
//   СтрукВоз - Структура.
// 
Функция СоздатьДокументПоступлениеТоваров(ЗаявкаНаЗакупку, ТабличнаяЧастьЗаявки) Экспорт 

	ДокОб = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	ДокОб.Дата = ТекущаяДата();
	ДокОб.Организация 			= ЗаявкаНаЗакупку.Организация;
	ДокОб.Контрагент			= ЗаявкаНаЗакупку.Контрагент;
	ДокОб.ДоговорКонтрагента 	= ЗаявкаНаЗакупку.ДоговорКонтрагента;
	ДокОб.ВалютаДокумента		= ЗаявкаНаЗакупку.ВалютаДокумента;
	ДокОб.КурсВзаиморасчетов	= ЗаявкаНаЗакупку.КурсДокумента;
	ДокОб.СуммаВключаетНДС		= ЗаявкаНаЗакупку.СуммаВключаетНДС;
	ДокОб.ТипЦен				= ЗаявкаНаЗакупку.ТипЦен;
	ДокОб.НДСВключенВСтоимость	= ЗаявкаНаЗакупку.НДСВключенВСтоимость;
	ДокОб.КратностьВзаиморасчетов = ЗаявкаНаЗакупку.КратностьДокумента;
	ДокОб.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ДокОб.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	
	ТабДок = ТабличнаяЧастьЗаявки.Скопировать();
	ТабДок.Свернуть("Номенклатура, СтавкаНДС, Коэффициент, ЕдиницаИзмерения, Цена", "Количество, Сумма, СуммаНДС");
	
	Если ЗаявкаНаЗакупку.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Товары Тогда
	
		ДокОб.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ДокОб.Товары.Загрузить(ТабДок);
		
		ФормаОткрытия = "ФормаДокументаТовары";
		ИмяТабличнойЧасти = "Товары";
		
	ИначеЕсли ЗаявкаНаЗакупку.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги Тогда
	
		ДокОб.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		ДокОб.Услуги.Загрузить(ТабДок);
		
		ФормаОткрытия = "ФормаДокументаУслуги";
		ИмяТабличнойЧасти = "Услуги";
		
	ИначеЕсли ЗаявкаНаЗакупку.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Оборудование Тогда
	
		ДокОб.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		ДокОб.Оборудование.Загрузить(ТабДок);
		
		ФормаОткрытия = "ФормаДокументаОбщая";
		ИмяТабличнойЧасти = "Оборудование";
		
	КонецЕсли; 
	
	ЗаполнитьСчетаУчетаРасчетов(ДокОб);
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти(ДокОб, ИмяТабличнойЧасти);
	
	Успешно = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОб, РежимЗаписиДокумента.Запись);
	
	Если Успешно Тогда
		
		// Заполним дополнительные аналитики документа, для тех, кто факт по Бюджету закупок будет собирать трансляцией.
		НаборЗаписей = РегистрыСведений.бит_ДополнительныеАналитики.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ДокОб.Ссылка);
		ЗаполнитьДополнительныеАналитики(ДокОб, НаборЗаписей, ЗаявкаНаЗакупку);																			
																				
		Если Не бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборЗаписей) Тогда
			Отказ = Истина;
		КонецЕсли; 																			
		
		// Создаем документ отражения факта закупки
		ДокОтражениеФакта = Документы.бит_мто_ОтражениеФактаЗакупки.СоздатьДокумент();
		ДокОтражениеФакта.Дата = ТекущаяДата();
		ДокОтражениеФакта.УстановитьНовыйНомер();
		ДокОтражениеФакта.ДокументОснование = ДокОб.Ссылка;
		ДокОтражениеФакта.НеСинхронизировать = Истина;
		ОбработатьТабличнуюЧастьОтражениеФакта(ЗаявкаНаЗакупку, ДокОтражениеФакта, ТабличнаяЧастьЗаявки, ДокОб.Ссылка);
		Документы.бит_мто_ОтражениеФактаЗакупки.ВидимостьНазначенныхАналитик(ДокОтражениеФакта.ФактическиеДанные);
		
		бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокОтражениеФакта, РежимЗаписиДокумента.Запись,,"Ошибки");
		
	КонецЕсли; 
	
	СтрукВоз = Новый Структура("Ссылка, ФормаОткрытия", ДокОб.Ссылка, ФормаОткрытия);
	
	Возврат СтрукВоз;
	
КонецФункции // СоздатьДокументПоступлениеТоваров()

// Процедура обрабатывает табличную часть документа Отражение факта закупки.
// 
// Параметры:
//  Заявка - ДокументСсылка.бит_мто_ЗаявкаНаЗакупку.
//  Док - ДокументСсылка.бит_мто_ОтражениеФактаЗакупки.
//  ТабличнаяЧастьЗаявки - ТаблицаЗначений.
//  ДокПоступление - ДокументСсылка.ПоступлениеТоваровУслуг.
// 
Процедура ОбработатьТабличнуюЧастьОтражениеФакта(Заявка, Док, ТабличнаяЧастьЗаявки, ДокПоступление)

	Док.ФактическиеДанные.Загрузить(ТабличнаяЧастьЗаявки);
	
	Для каждого Строка Из Док.ФактическиеДанные Цикл
		
		Если Заявка.СуммаВключаетНДС Тогда
		
			Строка.Сумма = Строка.Сумма - Строка.СуммаНДС;
			
			Если (Строка.Количество = 0) Тогда
				Строка.Цена = 0;
			Иначе
				Строка.Цена = Строка.Сумма / Строка.Количество;
			КонецЕсли;
			
			Строка.Всего = Строка.Сумма + Строка.СуммаНДС;
			
		КонецЕсли; 
			
		Строка.Период = ДокПоступление.Дата;
		Строка.ЗаявкаНаЗакупку = Заявка.Ссылка;
		ЗаполнитьЗначенияСвойств(Строка, Заявка);
	
	КонецЦикла; 
		
КонецПроцедуры // ОбработатьТабличнуюЧастьОтражениеФакта()

// Процедура заполняет счета учета расчетов в документе Поступление товаров и услуг.
// 
// Параметры:
//  Объект - ДокументОбъект.ПоступлениеТоваровУслуг.
// 
Процедура ЗаполнитьСчетаУчетаРасчетов(Объект)
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация,  Объект.Контрагент, Объект.ДоговорКонтрагента);
		
	ВидДоговораКонтрагента = Объект.ДоговорКонтрагента.ВидДоговора;
	
	Если ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		ИЛИ ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Объект.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	
	Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТары;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетов()

// Заполняет счета учета номенклатуры в табличной части документа. 
// 
// Параметры:
//  Объект - ДокументОбъект.ПоступлениеТоваровУслуг.
//  ИмяТабличнойЧасти - Строка.
// 
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт 
	
	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта  = Новый Структура("Дата, ВидОперации, Организация, ПодразделениеОрганизации, ЭтоКомиссия, Ссылка");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Вставить("Склад", Объект.Склад);
	ДанныеОбъекта.Вставить("ЭтоКомиссия", (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
		И (Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;
	
КонецПроцедуры

// Функция получает остатки номенклатуры по закупке из регистра бит_мто_ПланируемаяЗакупкаНоменклатуры.
// 
// Параметры:
//   Документ - ДокументСсылка.бит_мто_ЗаявкаНаЗакупку.
// 
// Возвращаемое значение:
//  ТаблицаОстатков - Таблица значений.
// 
Функция ПолучитьОстаткиНоменклатурыПоЗакупке(ЗаявкаНаЗакупку) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПланирования", ЗаявкаНаЗакупку);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗаявкаНаЗакупку.Содержание,
	               |	ЗаявкаНаЗакупку.Номенклатура,
	               |	ЗаявкаНаЗакупку.Потребность,
	               |	ЗаявкаНаЗакупку.ЕдиницаИзмерения,
	               |	ЗаявкаНаЗакупку.Коэффициент,
	               |	ЗаявкаНаЗакупку.Цена,
	               |	ЗаявкаНаЗакупку.Сумма,
	               |	ЗаявкаНаЗакупку.СтавкаНДС,
	               |	ЗаявкаНаЗакупку.СуммаНДС,
	               |	ЗаявкаНаЗакупку.Всего,
	               |	ЗаявкаНаЗакупку.ЗаявкаНаПотребность,
	               |	ЕСТЬNULL(ЗакупкаНоменклатурыОстатки.КоличествоОстаток, 0) КАК Количество
	               |ИЗ
	               |	Документ.бит_мто_ЗаявкаНаЗакупку.Товары КАК ЗаявкаНаЗакупку
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_мто_ПланируемаяЗакупкаНоменклатуры.Остатки(, ) КАК ЗакупкаНоменклатурыОстатки
	               |		ПО ЗаявкаНаЗакупку.Номенклатура = ЗакупкаНоменклатурыОстатки.Номенклатура
	               |			И ЗаявкаНаЗакупку.Ссылка = ЗакупкаНоменклатурыОстатки.ДокументПланирования
	               |ГДЕ
	               |	ЗакупкаНоменклатурыОстатки.ДокументПланирования = &ДокументПланирования";
	
				   
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции // ПолучитьОстаткиНоменклатурыПоЗакупке()

// Функция получает остатки номенклатуры в табличной части Товары по регистру Планируемая закупка.
// 
// Параметры:
//   Документ - ДокументСсылка.бит_мто_ЗаявкаНаЗакупку.
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
Функция ПолучитьОстаткиНоменклатурыТабЧастиТовары(Документ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТабДок.Номенклатура,
	               |	ЕСТЬNULL(ПланируемаяЗакупкаНоменклатуры.КоличествоПриход, 0) КАК СуммаПлан,
	               |	ЕСТЬNULL(ПланируемаяЗакупкаНоменклатуры.КоличествоРасход, 0) КАК СуммаФакт,
	               |	ЕСТЬNULL(ПланируемаяЗакупкаНоменклатуры.КоличествоКонечныйОстаток, 0) КАК СуммаОстаток,
	               |	ТабДок.Ссылка
	               |ИЗ
	               |	Документ.бит_мто_ЗаявкаНаЗакупку.Товары КАК ТабДок
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_мто_ПланируемаяЗакупкаНоменклатуры.ОстаткиИОбороты(, , , , ) КАК ПланируемаяЗакупкаНоменклатуры
	               |		ПО ТабДок.Ссылка = ПланируемаяЗакупкаНоменклатуры.ДокументПланирования
	               |			И ТабДок.Номенклатура = ПланируемаяЗакупкаНоменклатуры.Номенклатура
	               |ГДЕ
	               |	ТабДок.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
		
	Результат = Запрос.Выполнить();
	ТаблицаОстатков = Результат.Выгрузить();
	
	Возврат ТаблицаОстатков;
	
КонецФункции // ПолучитьОстаткиНоменклатурыТабЧастиТовары()

// Процедура заполняет перечень дополнительных аналитик.
// 
// Параметры:
//  ТекущийОбъект  			- ДокументОбъект.
//  НаборЗаписей   		   	- РегистрСведенийНаборЗаписей.бит_ДополнительныеАналитики.
// 
Процедура ЗаполнитьДополнительныеАналитики(ТекущийОбъект, НаборЗаписей, ЗаявкаНаЗакупку)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_НазначениеДополнительныхАналитик.Аналитика
	|ИЗ
	|	РегистрСведений.бит_НазначениеДополнительныхАналитик КАК бит_НазначениеДополнительныхАналитик
	|ГДЕ
	|	(бит_НазначениеДополнительныхАналитик.Объект = &Объект
	|			ИЛИ бит_НазначениеДополнительныхАналитик.Объект = ЗНАЧЕНИЕ(Справочник.бит_ОбъектыСистемы.ПустаяСсылка))
	|";
	
	Запрос.УстановитьПараметр("Объект", бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(ТекущийОбъект.Метаданные()));		
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать(); 		
	
	Пока Выборка.Следующий() Цикл 			
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Объект    = ТекущийОбъект.Ссылка;	
		НоваяЗапись.Аналитика = Выборка.Аналитика;
		
		Попытка
		
			ЗначениеАналитики = ЗаявкаНаЗакупку[СокрЛП(Выборка.Аналитика.Код)];
			НоваяЗапись.ЗначениеАналитики = ЗначениеАналитики;
			
		Исключение
			
			Сч=0;
			Для Сч=Сч+1 По 7 Цикл
				
				Аналитика = ЗаявкаНаЗакупку["Аналитика_"+Сч];
				Если ТипЗнч(Аналитика) = Выборка.Аналитика.ТипЗначения.Типы()[0] Тогда
				
					НоваяЗапись.ЗначениеАналитики = Аналитика;
					Прервать;
				
				КонецЕсли; 
			
			КонецЦикла; 
			
		КонецПопытки; 
		
	КонецЦикла;

КонецПроцедуры	// ЗаполнитьДополнительныеАналитики()

#КонецОбласти

#КонецЕсли
