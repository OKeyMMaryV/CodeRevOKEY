#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Хранит валюту регламентированного учета.

Перем мРежимОбновленияВиз Экспорт; // Хранит режим обновления перечня виз.

Перем мНастройкиПрограммы Экспорт; // Хранит настройки БИТ.

Перем мТекущийСтатус Экспорт; // Хранит текущий статус.

Перем мДатаИзмененияСтатуса Экспорт; // Хранит дату изменения статуса.

Перем мАлгоритмИзмененияСтатуса Экспорт; // Хранит текущий алгоритм изменения статуса.

Перем мИзмеренияДоп Экспорт; // Хранит дополнительные измерения.

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

Перем мАдресХранилищаСтрокПревышения Экспорт; // Адрес хранилища, где хранится массив строк превышающих лимиты.

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("Проведен", Проведен);
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	
	Сумма = Товары.Итог("Всего");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("ЦФО",ЦФО);

	мНастройкиПрограммы = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(Дата,,СтруктураПараметров,"Ошибки");	
	
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
	
	
	Если НЕ Отказ Тогда
		Если НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение  Тогда
			УстановитьСтатус(ДополнительныеСвойства.РежимЗаписи);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	 // Проверка ручной корректировки
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка,Отказ,Заголовок,ЭтотОбъект,Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ТаблицаТовары = ПодготовитьТаблицуЗакупок();
	
	// Выполним движения
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаТовары, Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// Установка статусов заявкам на потребность.
		ТаблицаЗаявок = Товары.Выгрузить();
		ТаблицаЗаявок.Свернуть("ЗаявкаНаПотребность");
		Для каждого СтрокаТаблицы Из ТаблицаЗаявок Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаявкаНаПотребность) Тогда
				ЗаявкаОб = СтрокаТаблицы.ЗаявкаНаПотребность.ПолучитьОбъект();
				ЗаявкаОб.УстановитьСтатус();
			КонецЕсли; 
		КонецЦикла; 
		
		// Заполним перечень виз
		Если мРежимОбновленияВиз = Перечисления.бит_РежимыОбновленияПеречняВиз.ОбновлятьПриПерепроведении 
			ИЛИ НЕ ДополнительныеСвойства.Проведен Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтруктурноеПодразделение", Организация);
			СтруктураПараметров.Вставить("ЦФО"					   , ЦФО);		
			бит_Визирование.ОбновитьПереченьВиз(Ссылка, Дата, СтруктураПараметров);
			
		КонецЕсли; 
		
		УстановитьСтатус(РежимЗаписиДокумента.Проведение);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	// Проверим допустимость отмены проведения 
	РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус), РезСтруктура.Статус, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	мДатаИзмененияСтатуса = РезСтруктура.Дата;
	
	Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Закрыта
		ИЛИ мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Исполнена
		ИЛИ мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_ЧастичноИсполнена Тогда
		
		ТекстСообщения = "Документ в статусе """ + СокрЛП(мТекущийСтатус) + """. Отмена проведения невозможна!";
		Заголовок      = "Отмена проведения документа: " + СокрЛП(Ссылка);
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, СтатусСообщения.Важное);
		                          		
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		
		// Установка статусов заявкам на потребность.
		ТаблицаЗаявок = Товары.Выгрузить();
		ТаблицаЗаявок.Свернуть("ЗаявкаНаПотребность");
		Для каждого СтрокаТаблицы Из ТаблицаЗаявок Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаявкаНаПотребность) Тогда
				ЗаявкаОб = СтрокаТаблицы.ЗаявкаНаПотребность.ПолучитьОбъект();
				ЗаявкаОб.УстановитьСтатус();
			КонецЕсли; 
		КонецЦикла; 
		
		// Очистим визы
		бит_Визирование.ОчиститьВсеВизыБезусловно(ЭтотОбъект.Ссылка);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_мто_ЗаявкаНаПотребность") Тогда
		ЗаполнитьПоОснованию(ДанныеЗаполнения);
	Иначе 
		ЗаполнитьШапкуДокумента();
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.СверхБюджета = Ложь;
	
	ДатаЗакупкиПлан = ТекущаяДата();
	
	Для каждого Строка Из ЭтотОбъект.Товары Цикл
		Строка.Потребность = Справочники.бит_мто_Потребности.ПустаяСсылка();
		Строка.ЗаявкаНаПотребность = Документы.бит_мто_ЗаявкаНаПотребность.ПустаяСсылка();
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура получает статус объекта.
// 
Процедура ПолучитьСтатусМодуль()

	// Получаем статус и дату изменения статуса для документа.
	РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
	
	мТекущийСтатус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус)
					  		 ,РезСтруктура.Статус
					  		 ,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
							  
	мДатаИзмененияСтатуса = РезСтруктура.Дата;

КонецПроцедуры // ПолучитьСтатусМодуль()
	
// Функция определяет текущий статус заявки на закупку.
// 
// Параметры:
//  ТекущийОбъект    - ДокументСсылка.бит_ЗаявкаНаЗатраты.
//  НачальныйСтатус  - текущее значение статуса.
//  ВсеВизыПолучены  - Булево.
//  СтрОплаты - структура.
// 
// Возвращаемое значение:
//   РезСтатус   - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция ОпределитьСтатусЗаявкиНаЗакупку(ТекущийОбъект, НачальныйСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено, СтрОплаты) Экспорт

	РезСтатус = НачальныйСтатус;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ (РежимЗаписи = РежимЗаписиДокумента.Запись И ТекущийОбъект.Проведен) Тогда
		РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Рабочая;
	Иначе
		РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Черновик;
	КонецЕсли; 
	
	Если РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Рабочая 
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Утверждена 
		ИЛИ РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Отклонена Тогда
		
		Если ЕстьОтклонено Тогда
			
			РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Отклонена;
			
		Иначе	
			
			Если ВсеВизыПолучены Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Утверждена;
			Иначе	
				РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Рабочая;
			КонецЕсли; 
			
			Если СтрОплаты.Итог("СуммаОстаток") <=0.01 И СтрОплаты.Итог("СуммаФакт") > 0  Тогда
				РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Исполнена;
			Иначе	
				
				Если СтрОплаты.Итог("СуммаФакт") > 0 Тогда
					
					РезСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_ЧастичноИсполнена;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
  Возврат РезСтатус;
  
КонецФункции // ОпределитьСтатусЗаявкиНаЗакупку()

// Процедура устанавливает статус.
// 
// Параметры:
//  вхРежимЗаписи			 - РежимЗаписиДокумента.
//  вхЗатратыСтруктура		 - Структура.
//  вхСинхронизироватьЗатраты - Булево. По умолчанию Истина.
// 
Процедура УстановитьСтатус(вхРежимЗаписи = Неопределено
						  ,вхЗатратыСтруктура = Неопределено
						  ,вхСинхронизироватьЗатраты = Истина) Экспорт
						  
	СтрАлгоритмы              = бит_уп_Сервер.ПолучитьАлгоритмыОбъектаСистемы(ЭтотОбъект,Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов);
	мАлгоритмИзмененияСтатуса = СтрАлгоритмы.ИзменениеСтатусовОбъектов;
						  
	Если НЕ ЗначениеЗаполнено(мАлгоритмИзмененияСтатуса) Тогда
		
		Если вхРежимЗаписи = Неопределено Тогда
			 РежимЗаписи = РежимЗаписиДокумента.Запись;
		Иначе	
			 РежимЗаписи = вхРежимЗаписи;
		КонецЕсли; 
		
		Если мТекущийСтатус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Закрыта Тогда
			Возврат;
		КонецЕсли; 
		
		// Вычислим переменные, необходимые для установки статуса.
		ВсеВизыПолучены = бит_Визирование.ВизыПолучены(Ссылка);
		ЕстьОтклонено   = бит_Визирование.ПринятоРешение(Ссылка, , Справочники.бит_ВидыРешенийСогласования.Отклонено);						
		
		// Получим остаток по регистру Планируемая закупка номенклатуры.
		СтрОплаты = Документы.бит_мто_ЗаявкаНаЗакупку.ПолучитьОстаткиНоменклатурыТабЧастиТовары(Ссылка);
		
		// Определим статус заявки
		Статус = ОпределитьСтатусЗаявкиНаЗакупку(ЭтотОбъект, мТекущийСтатус, РежимЗаписи, ВсеВизыПолучены, ЕстьОтклонено, СтрОплаты);
		
		// Если статус изменился - запишем его
		Если мТекущийСтатус <> Статус Тогда
			
			ДатаИзмененияСтатуса = ТекущаяДата();
			
			ДействиеВыполнено = бит_Визирование.УстановитьСтатусОбъекта(Ссылка
																		,Перечисления.бит_ВидыСтатусовОбъектов.Статус
																		,Статус
																		,мТекущийСтатус
																		,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
																		,ДатаИзмененияСтатуса);
			
			Если ДействиеВыполнено Тогда
				
				мТекущийСтатус = Статус;
				мДатаИзмененияСтатуса = ДатаИзмененияСтатуса;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	Иначе	
		
		СтруктураКонтекст = Новый Структура;
		СтруктураКонтекст.Вставить("ТекущийОбъект",ЭтотОбъект);
		
		// Выполнение установки статуса согласно алгоритма изменения статусов.
		КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));	
			
        РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
			
		бит_уп_Сервер.ВыполнитьАлгоритм(мАлгоритмИзмененияСтатуса,СтруктураКонтекст,РежимСообщений);
		
	КонецЕсли; 
	
	
КонецПроцедуры // УстановитьСтатус()

// Процедура выполняет движения по регистрам.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,ТаблицаТовары,Отказ,Заголовок)
	
	// Контроль остатков номенклатуры
	КонтрольОстатковНоменклатуры(Отказ);
	
	// Движение по регистру бит_мто_ПотребностьНоменклатуры.
	ДвиженияПоРегиструПотребностьНоменклатуры(СтруктураШапкиДокумента);
	
	// Движение по регистру Планируемая закупка номенклатуры.
	ДвиженияПоРегиструПланируемаяЗакупкаНоменклатуры(ТаблицаТовары,Отказ);
	
	// Движение по регистру Планируемая закупка номенклатуры (с разворотом по аналитике).
	ДвиженияПоРегиструПланируемаяЗакупкаНоменклатурыАналитика(СтруктураШапкиДокумента,ТаблицаТовары,Отказ);
	
	Если НЕ Отказ Тогда
		
		// Движение по регистру контрольных значений.
		ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаТовары,Отказ,Заголовок);
	
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура заполняет шапку документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.бит_мто_ЗаявкаНаЗакупку.
// 
Процедура ЗаполнитьШапкуДокумента(ПараметрОбъектКопирования = Неопределено)
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;			
			
		КонецЕсли; 
		
		Важность = Перечисления.бит_Важность.Средняя;
		ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Товары;
		
	Иначе // Документ скопирован.
		
		
	КонецЕсли;
	
	// Заполнить реквизиты значениями по умолчанию.
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
												
	// Инициализируем значения доп. измерений.
	бит_МеханизмДопИзмерений.ИнициализироватьЗначенияДопИзмерений(ЭтотОбъект, мИзмеренияДоп, мНастройкиИзмерений);
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

// Процедура заполняет документ по документу основанию.
// 
Процедура ЗаполнитьПоОснованию(Основание)

	МетаОснование = Основание.Метаданные();
	
	Если МетаОснование.Имя = "бит_мто_ЗаявкаНаПотребность" Тогда
		
		Исключения = "Дата,Номер,Проведен,ПометкаУдаления";
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,,Исключения);
		 
		ТаблицаОстатков = Документы.бит_мто_ЗаявкаНаПотребность.ПолучитьОстаткиНоменклатурыТабЧастиТовары(Основание);	 
		
		Для каждого Строка Из Основание.Товары Цикл
		
			СтрОтбора = Новый Структура("Номенклатура", Строка.Номенклатура);
			СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтрОтбора);
			
			Если СтрокиОстатков.Количество()>0 
				И СтрокиОстатков[0].СуммаОстаток > 0 Тогда
			
				НоваяСтрока = ЭтотОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				Если Строка.Количество < СтрокиОстатков[0].СуммаОстаток Тогда
				
					НоваяСтрока.Количество = Строка.Количество;
					
				Иначе	
					НоваяСтрока.Количество = СтрокиОстатков[0].СуммаОстаток;
				КонецЕсли; 
				НоваяСтрока.Потребность = Строка.Номенклатура;
				НоваяСтрока.ЗаявкаНаПотребность = Основание;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьПоОснованию()

// Функция готовит таблицу по закупкам для проведения.
// 
Функция ПодготовитьТаблицуЗакупок()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СтатьяОборотов КАК СтатьяОборотов,
	|	Реквизиты.ЦФО КАК ЦФО,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.Проект КАК Проект,
	|	Реквизиты.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Реквизиты.БанковскийСчет КАК БанковскийСчет,
	|	Реквизиты.Аналитика_1 КАК Аналитика_1,
	|	Реквизиты.Аналитика_2 КАК Аналитика_2,
	|	Реквизиты.Аналитика_3 КАК Аналитика_3,
	|	Реквизиты.Аналитика_4 КАК Аналитика_4,
	|	Реквизиты.Аналитика_5 КАК Аналитика_5,
	|	Реквизиты.Аналитика_6 КАК Аналитика_6,
	|	Реквизиты.Аналитика_7 КАК Аналитика_7,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТовары.Количество КАК Количество,
	|	Реквизиты.ДатаЗакупкиПлан КАК Период,
	|	Реквизиты.Сценарий КАК Сценарий,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.Всего КАК Всего,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ЗаявкаНаПотребность КАК ЗаявкаНаПотребность,
	|	ТаблицаТовары.Потребность КАК Потребность,
	|	ТаблицаТовары.Сумма КАК Сумма
	|ИЗ
	|	Документ.бит_мто_ЗаявкаНаЗакупку КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_мто_ЗаявкаНаЗакупку.Товары КАК ТаблицаТовары
	|		ПО Реквизиты.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	РезТаблица = Результат.Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции // ПодготовитьТаблицуЗакупок()

// Процедура выполняет движения по регистру бит_мто_ПотребностьНоменклатуры.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
Процедура ДвиженияПоРегиструПотребностьНоменклатуры(СтруктураШапкиДокумента)

	Для каждого НаборЗаписей Из Движения Цикл
	
		НаборЗаписей.Записывать = Истина;
	
	КонецЦикла; 

	НаборЗаписей = Движения.бит_мто_ПотребностиНоменклатуры; 
	 
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Строка Из Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Потребность)
			ИЛИ НЕ ЗначениеЗаполнено(Строка.ЗаявкаНаПотребность) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация 			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.ДокументПланирования = Строка.ЗаявкаНаПотребность;
		СтрокаДвижений.Номенклатура			= Строка.Потребность;
		
		// Изменение кода. Начало. 04.10.2016{{
		Если ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги
			И Строка.Количество = 0 Тогда
		
			СтрокаДвижений.Количество = 1;
			
		Иначе	
			СтрокаДвижений.Количество = Строка.Количество;
		КонецЕсли; 
		// Изменение кода. Конец. 04.10.2016}}
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
	
		НаборЗаписей.мПериод          = СтруктураШапкиДокумента.ДатаЗакупкиПлан;
		НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
		НаборЗаписей.ВыполнитьРасход();
		НаборЗаписей.Записать();
		
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегиструПотребностьНоменклатуры()

// Процедура осуществляет контроль количества номенклатуры по регистру бит_мто_ПотребностьНоменклатуры.
// 
// Параметры:
//  ТаблицаТовары            - ТаблицаЗначений.
//  Отказ                    - Булево.
// 
Процедура КонтрольОстатковНоменклатуры(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаНаЗакупку.Потребность КАК Номенклатура,
	               |	СУММА(ЗаявкаНаЗакупку.Количество) КАК Количество,
	               |	ЗаявкаНаЗакупку.ЗаявкаНаПотребность,
	               |	ЗаявкаНаЗакупку.ЕдиницаИзмерения
	               |ПОМЕСТИТЬ Закупка
	               |ИЗ
	               |	Документ.бит_мто_ЗаявкаНаЗакупку.Товары КАК ЗаявкаНаЗакупку
	               |ГДЕ
	               |	ЗаявкаНаЗакупку.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаявкаНаЗакупку.Потребность,
	               |	ЗаявкаНаЗакупку.ЗаявкаНаПотребность,
	               |	ЗаявкаНаЗакупку.ЕдиницаИзмерения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Закупка.Номенклатура,
	               |	СУММА(ЕСТЬNULL(Закупка.Количество - ПотребностиНоменклатурыОстатки.КоличествоОстаток, 0)) КАК Превышение,
	               |	Закупка.ЗаявкаНаПотребность,
	               |	СУММА(ЕСТЬNULL(ПотребностиНоменклатурыОстатки.КоличествоОстаток, 0)) КАК Остаток,
	               |	Закупка.ЕдиницаИзмерения
	               |ИЗ
	               |	Закупка КАК Закупка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_мто_ПотребностиНоменклатуры.Остатки КАК ПотребностиНоменклатурыОстатки
	               |		ПО Закупка.ЗаявкаНаПотребность = ПотребностиНоменклатурыОстатки.ДокументПланирования
	               |			И Закупка.Номенклатура = ПотребностиНоменклатурыОстатки.Номенклатура
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Закупка.Номенклатура,
	               |	Закупка.ЗаявкаНаПотребность,
	               |	Закупка.ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЗаявкаНаПотребность = Документы.бит_мто_ЗаявкаНаПотребность.ПустаяСсылка() Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если Выборка.Превышение > 0 ИЛИ Выборка.Остаток = 0 Тогда
			
			ТекстСообщения = Нстр("ru = 'Превышен остаток по потребности: %1%! Всего доступно %2% %3%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.Номенклатура, Выборка.Остаток, Выборка.ЕдиницаИзмерения);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
			
			Отказ = Истина;
			
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры // КонтрольОстатковНоменклатуры()

// Процедура выполняет движения по регистру бит_мто_ПланируемаяЗакупкаНоменклатуры.
// 
// Параметры:
//  ТаблицаТовары            - ТаблицаЗначений.
//  Отказ                    - Булево.
// 
Процедура ДвиженияПоРегиструПланируемаяЗакупкаНоменклатуры(ТаблицаТовары,Отказ)

	// Выполнение движений
	ТаблицаДвижений = Движения.бит_мто_ПланируемаяЗакупкаНоменклатуры.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Стр Из ТаблицаТовары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяСтрока.ДокументПланирования = ЭтотОбъект.Ссылка;
		
		// Изменение кода. Начало. 04.10.2016{{
		Если ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги
			И НоваяСтрока.Количество = 0 Тогда
		
			НоваяСтрока.Количество = 1;
			
		Иначе	
			НоваяСтрока.Количество = Стр.Количество;
		КонецЕсли; 
		// Изменение кода. Конец. 04.10.2016}}
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
	
		Движения.бит_мто_ПланируемаяЗакупкаНоменклатуры.Записывать = Истина;
		Движения.бит_мто_ПланируемаяЗакупкаНоменклатуры.мТаблицаДвижений = ТаблицаДвижений;
		Движения.бит_мто_ПланируемаяЗакупкаНоменклатуры.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегиструПланируемаяЗакупкаНоменклатуры()

// Процедура выполняет движения по регистру бит_мто_ПланируемаяЗакупкаНоменклатуры.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  ТаблицаТовары            - ТаблицаЗначений.
//  Отказ                    - Булево.
// 
Процедура ДвиженияПоРегиструПланируемаяЗакупкаНоменклатурыАналитика(СтруктураШапкиДокумента,ТаблицаТовары,Отказ)

	СтруктураКурсыВалют = бит_КурсыВалют.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект,Дата,Новый Структура("Документ,Упр,Регл"));
	
	// Выполнение движений
	ТаблицаДвижений = Движения.бит_мто_ПланируемаяЗакупкаНоменклатурыАналитика.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	Для каждого Стр Из ТаблицаТовары Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.ДокументПланирования = ЭтотОбъект.Ссылка;
		
		НоваяСтрока.СтатьяОборотов = СтруктураШапкиДокумента.СтатьяОборотов;
		НоваяСтрока.ЦФО = СтруктураШапкиДокумента.ЦФО;
		НоваяСтрока.Проект = СтруктураШапкиДокумента.Проект;
		НоваяСтрока.НоменклатурнаяГруппа = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		
		МаксКолвоДопАналитик = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоДополнительныхИзмерений();
		
		Для н = 1 По МаксКолвоДопАналитик Цикл
			НоваяСтрока["Аналитика_"+н]  = СтруктураШапкиДокумента["Аналитика_"+н];
		КонецЦикла;	
	   
		ИменаРеквизитов = Новый Массив;
		ИменаРеквизитов.Добавить("Сумма");
		
		бит_КурсыВалют.ВыполнитьПересчетыДляОбъекта(НоваяСтрока,ИменаРеквизитов,СтруктураКурсыВалют,СтруктураКурсыВалют.Документ);
		
	КонецЦикла; 
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
	
		Движения.бит_мто_ПланируемаяЗакупкаНоменклатурыАналитика.Записывать = Истина;
		Движения.бит_мто_ПланируемаяЗакупкаНоменклатурыАналитика.мТаблицаДвижений = ТаблицаДвижений;
		Движения.бит_мто_ПланируемаяЗакупкаНоменклатурыАналитика.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегиструПланируемаяЗакупкаНоменклатурыАналитика()

// Процедура выполняет движения по регистру бит_КонтрольныеЗначенияБюджетов
// и осуществляет контроль по бюджету.
// 
// Параметры:
//  СтруктураШапкиДокумента  - Структура.
//  ТаблицаРасход            - ТаблицаЗначений.
//  Отказ                    - Булево.
//  Заголовок                - Строка.
// 
Процедура ДвиженияПоРегиструКонтрольныхЗначений(СтруктураШапкиДокумента,ТаблицаТовары,Отказ,Заголовок)
	
	НеУчитыватьСверхБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,
		ПланыВидовХарактеристик.бит_НастройкиПрограммы.НеУчитыватьСверхБюджетныеЗаявкиНаЗакупкуПриКонтролеПоБюджету);
	
	Если НеУчитыватьСверхБюджет И СверхБюджета Тогда
		Возврат;
	КонецЕсли;
	
	КонтролироватьБюджет = бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(мНастройкиПрограммы,
							ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьЗаявкуНаЗакупкуПоБюджету);
	Периодичность= бит_КонтрольПоБюджету.ПериодичностьКонтроляСценария(Сценарий);	
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДатаЗакупкиПлан,Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДатаЗакупкиПлан,Периодичность);
	
	// Получаем имя типа Сценарии бюджетирования в зависимости от текущего решения.
	ИмяТипаСценарии = бит_ОбщегоНазначения.ПолучитьИмяТипаСценарииБюджетирования();
	
	ТаблицаДляКонтроля = ТаблицаТовары.Скопировать();
	
	// Заполнить дополнительные измрения в таблице.
	ВсяНоменклатура = ТаблицаДляКонтроля.ВыгрузитьКолонку("Номенклатура");
	Для каждого КлючЗначение Из мНастройкиИзмерений Цикл
		Настйрока = КлючЗначение.Значение;
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") 
		   И КлючЗначение.Значение.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
			ТаблицаДляКонтроля.ЗагрузитьКолонку(ВсяНоменклатура, КлючЗначение.Ключ);
		КонецЕсли; 
	КонецЦикла; 
	
	РеквизитыСтатьи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураШапкиДокумента.СтатьяОборотов,
						"Учет_Количество, Учет_Сумма");
	Если НЕ РеквизитыСтатьи.Учет_Количество Тогда
		Для каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
			СтрокаТаблицы.Количество = 0;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ РеквизитыСтатьи.Учет_Сумма Тогда
		Для каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
			СтрокаТаблицы.Сумма = 0;
		КонецЦикла; 
	КонецЕсли; 
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("Сценарий");
	МассивИсключений.Добавить("СтатьяОборотов");
	МассивИсключений.Добавить("БанковскийСчет");
	
	ИзмеренияКонтроля = бит_КонтрольПоБюджету.КонструкторСтруктурыИзмеренияКонтроля(МассивИсключений,,,мНастройкиИзмерений);
	
	бит_КонтрольПоБюджету.СвернутьТаблицуКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Периодичность);
	
	ВалютаСценария    = Сценарий.Валюта;
	СтруктураСценарий = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаСценария,Дата);		
	
	Для каждого СтрокаТаблицы Из ТаблицаДляКонтроля Цикл
	
		СтрокаТаблицы.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, 
								ВалютаДокумента, ВалютаСценария, КурсДокумента, СтруктураСценарий.Курс,
								КратностьДокумента, СтруктураСценарий.Кратность);
	
	КонецЦикла; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"            ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"                     ,Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьНеУстановленные",Истина);
	СтруктураПараметров.Вставить("РежимКонтроля"                ,"Заявки");
	
	ТекстЗапроса = бит_КонтрольПоБюджету.СформироватьТекстЗапросаДляКонтроля(СтруктураПараметров);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
				   
	МассивСтатей = ТаблицаДляКонтроля.ВыгрузитьКолонку("СтатьяОборотов");
	бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивСтатей);

	// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();

	Запрос.УстановитьПараметр("ДатаНачала"    ,ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания" ,ДатаКон);
	Запрос.УстановитьПараметр("Сценарий"      ,Сценарий);
	Запрос.УстановитьПараметр("СценарийКонтролируемый", Справочники[ИмяСправочникаСценарии].ПустаяСсылка());
	Запрос.УстановитьПараметр("МассивСтатьяОборотов"  , МассивСтатей);
	Запрос.УстановитьПараметр("Ссылка"                , Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДляКонтроля"    , ТаблицаДляКонтроля);

	бит_КонтрольПоБюджету.ЗаполнитьПараметрыПоИзмерениямКонтроля(ТаблицаДляКонтроля,ИзмеренияКонтроля,Запрос);

	Результат = Запрос.Выполнить();

	НаборЗаписей = Движения.бит_КонтрольныеЗначенияБюджетов;    
	ТаблицаДвижений = НаборЗаписей.Выгрузить();
	ТаблицаДвижений.Очистить();

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИзмеренияКонтроля"   ,ИзмеренияКонтроля);
	СтруктураПараметров.Вставить("Сценарий"            ,Сценарий);
	СтруктураПараметров.Вставить("КонтролироватьБюджет",КонтролироватьБюджет);
	СтруктураПараметров.Вставить("СверхБюджета"        ,СверхБюджета);
	СтруктураПараметров.Вставить("РежимКонтроля"       ,"Заявки");
	СтруктураПараметров.Вставить("Объект"       , Ссылка);
	
	МассивСтрокПревышения = бит_КонтрольПоБюджету.ОбработатьРезультатКонтроля(Результат,ТаблицаДвижений,СтруктураПараметров,Отказ,Заголовок);

	ПоместитьВоВременноеХранилище(МассивСтрокПревышения, мАдресХранилищаСтрокПревышения);
	
	флОтказДоПроверки = Отказ;

	Если флОтказДоПроверки Тогда

		Отказ = Истина;

	КонецЕсли; 

	НаборЗаписей.мПериод          = СтруктураШапкиДокумента.ДатаЗакупкиПлан;
	НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;
	НаборЗаписей.ДобавитьДвижение();
   
КонецПроцедуры // ДвиженияПоРегиструКонтрольныхЗначений()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги Тогда
	
		ПроверяемыеРеквизиты.Добавить("Товары.Количество");
	
	КонецЕсли; 
	
	// Установка настроек обязательности реквизитов
	СтатусДляПоискаНастроек = ?(ЗначениеЗаполнено(мТекущийСтатус), мТекущийСтатус, Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Черновик);
	бит_ОбщегоНазначения.УстановитьНастройкиОбязательностиРеквизитов(ЭтотОбъект, ПроверяемыеРеквизиты, СтатусДляПоискаНастроек);
	
КонецПроцедуры

#КонецОбласти 

#Область Инициализация

ПолучитьСтатусМодуль();

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

РезСтруктура   = бит_Визирование.ПолучитьСтатусОбъекта(Ссылка);
мТекущийСтатус = ?(ЗначениеЗаполнено(РезСтруктура.Статус),РезСтруктура.Статус,Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
мДатаИзмененияСтатуса = РезСтруктура.Дата;

мНастройкиПрограммы = Новый Соответствие;

мИзмеренияДоп       = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные","Синоним");
мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

мРежимОбновленияВиз = Константы.бит_РежимОбновленияПеречняВиз.Получить();

// Хранилище должно быть доступно и в объекте и в форме, поэтому определим его сразу.
мАдресХранилищаСтрокПревышения = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);

#КонецОбласти 

#КонецЕсли
