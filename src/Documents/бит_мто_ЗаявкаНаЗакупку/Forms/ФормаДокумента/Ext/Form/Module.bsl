
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы.

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если Параметры.Свойство("ДокументОснование") Тогда
	
		Если ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
			ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мто_ЗаявкаНаЗакупку"));
			ДокОбъект.Заполнить(Параметры.ДокументОснование);
			ЗначениеВДанныеФормы(ДокОбъект, Объект);
		КонецЕсли; 
				
	КонецЕсли; 
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	// Настроим отображение полей доп. аналитик в форме.
	бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияНаФорме_Управляемая(ЭтотОбъект, 
		мКэшЗначений.ИзмеренияДоп, мКэшЗначений.НастройкиИзмерений);
																				 
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьНачальныеСвойстваАналитикШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));																			 
																				 
	// Сформируем гиперссылку Цены и валюта.																			 
	СформироватьНадписьЦеныИВалюта();
	
	// Перенести куда-нибудь.
	ИспользоватьТипыЦенНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	
	// Сформировать список выбора номенклатуры
	фСписокТиповНоменклатура = Новый СписокЗначений;
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Тип("СправочникСсылка.бит_мто_Потребности"));
	МассивЗначений.Добавить(Тип("СправочникСсылка.Номенклатура"));
	фСписокТиповНоменклатура.ЗагрузитьЗначения(МассивЗначений);
	
	// В зависимости от СтатьиОборотов
	НастроитьВидимостьАналитикБюджетирования();
	
	// Обновляем группу итоги
	ОбновитьИтоги(ЭтотОбъект);
	
	УправлениеЭлементамиФормы();
	
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	мКэшРеквизитовФормы.Вставить("СуммаВключаетНДС");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	ЭтоНовый = ?(Параметры.Ключ.Пустая(), Истина, Ложь);
	
	Если ЭтоНовый Тогда
		
		ИзменениеСтатьиОборотов(Объект);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ПодборЗаявокНаПотребность" И Источник = ЭтотОбъект Тогда
		
		ОбработкаЗаполненияИзПодбора(Параметр);	
		
		УправлениеЭлементамиФормы();
		
		// Обновляем группу итоги
		ОбновитьИтоги(ЭтотОбъект);
			
	ИначеЕсли ИмяСобытия = "ИзмененСтатус" И Источник = УникальныйИдентификатор Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметр);
		СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
		УправлениеЭлементамиФормы();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_мто_ЗаявкаНаЗакупку";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
		
		// Надо отследить момент окончания проведения или отказа от него
		// в веб-клиенте функциональность отключена, т.к. приводит к возникновению исключения.
		ПодключитьОбработчикОжидания("ОжиданиеПроведенияДокумента", 0.1, Истина);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Объект", Объект.Ссылка);
		КоличествоВиз = бит_Визирование.ОпределитьКоличествоВиз(СтруктураПараметров);
		
		Если КоличествоВиз = 0 Тогда
			ЗаполнитьВизы();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьПараметрыСтатуса();
	СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус);
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыСтатуса();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСтатусНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Фильтр 		   = Новый Структура("Объект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Фильтр);
	Открытьформу("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.ФормаСписка", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	УстановитьДоговорКонтрагентаСервер();
	
КонецПроцедуры

// Процедура - обработчик нажатия гиперссылки "ЦеныИВалюта".
// 
&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьИзмененияПоКнопкеЦеныИВалюта();
	
КонецПроцедуры

// Процедура - обработчик при окончании редактирования "Товары".
// 
&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "СтатьяОборотов".
// 
&НаКлиенте
Процедура СтатьяОборотовПриИзменении(Элемент)
	
	ИзменениеСтатьиОборотов(Объект);
	НастроитьВидимостьАналитикБюджетирования();
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "ДоговорКонтрагента".
// 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорКонтрагентаПриИзмененииСервер();
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыСервер();
	
	ИзменениеТабличнойЧастиТоварыСервер(мКэшРеквизитовФормы.ВалютаДокумента
										, мКэшРеквизитовФормы.КурсДокумента
										, мКэшРеквизитовФормы.КратностьДокумента
										, мКэшРеквизитовФормы.СуммаВключаетНДС);
	
	ОбновитьИтоги(ЭтотОбъект);
	СформироватьНадписьЦеныИВалюта();
	
	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "ТипЦен".
// 
&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)

	ТипЦенПриИзмененииСервер();
	
	ИзменениеТабличнойЧастиТоварыСервер(мКэшРеквизитовФормы.ВалютаДокумента
										, мКэшРеквизитовФормы.КурсДокумента
										, мКэшРеквизитовФормы.КратностьДокумента
										, мКэшРеквизитовФормы.СуммаВключаетНДС);
	
	ОбновитьИтоги(ЭтотОбъект);
	СформироватьНадписьЦеныИВалюта();
	
	ДобавитьВКэш("СуммаВключаетНДС");
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "ВидОперации".
// 
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ВопросОчисткиВидОперации", ЭтотОбъект);
	Если Объект.Товары.Количество() > 0 Тогда
		Вопрос = НСтр("ru = 'Изменен вид операции документа. Очистить табличную часть?'");
		ПоказатьВопрос(Оповещение, Вопрос, РежимДиалогаВопрос.ДаНет);
	Иначе
		УправлениеЭлементамиФормы();
		УстановитьПараметрыВыбораНоменклатуры();
	КонецЕсли;

КонецПроцедуры

// Процедура окончания процедуры "ВидОперацииПриИзменении".
// 
&НаКлиенте 
Процедура ВопросОчисткиВидОперации(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();
	КонецЕсли; 
	УправлениеЭлементамиФормы();
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// Процедура - обработчик ПриИзменении поля "Цена".
// 
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(мКэшЗначений.ЗначениеПустогоКоличества);
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "Количество".
// 
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЦена(мКэшЗначений.ЗначениеПустогоКоличества);
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "Сумма".
// 
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСумма(мКэшЗначений.ЗначениеПустогоКоличества);
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "СтавкаНДС".
// 
&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "СуммаНДС".
// 
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "ЕдиницаИзмерения".
// 
&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	Элементы.Товары.ТекущиеДанные.Коэффициент = 1;
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "ЗаявкаНаПотребность".
// 
&НаКлиенте
Процедура ТоварыЗаявкаНаПотребностьПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ТекДанные.Потребность = "";
	
КонецПроцедуры

// Процедура - обработчик ПриИзменении поля "Номенклатура".
// 
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ИД = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ТоварыНоменклатураПриИзмененииНаСервере(ИД);
	
КонецПроцедуры

// Процедура - обработчик перед началом добавления "Товары".
// 
&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ПроверитьВозможностьРедактированияСпискаНоменклатуры() Тогда 
		
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик перед удалением "Товары".
// 
&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если НЕ ПроверитьВозможностьРедактированияСпискаНоменклатуры() Тогда 
		
		Отказ = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей ввода "Аналитика".
// 
&НаКлиенте
Процедура Аналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      	   ,Элемент
															   ,Объект
															   ,Элемент.Имя
															   ,СтандартнаяОбработка
															   ,мКэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодбор" полей ввода "Аналитика".
// 
&НаКлиенте
Процедура Аналитика_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
    
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      ,Элемент
	                                                      ,Объект
														  ,Элемент.Имя
														  ,СтандартнаяОбработка
														  ,мКэшЗначений.НастройкиИзмерений);
                                                          
КонецПроцедуры

// Процедура - обработчик события "Очистка" полей ввода "Аналитика_<N>".
// 
&НаКлиенте
Процедура Аналитика_Очистка(Элемент, СтандартнаяОбработка)
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,Объект
	                                                                        ,Элемент.Имя
																			,СтандартнаяОбработка
																			,мКэшЗначений.НастройкиИзмерений);
	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаПодборНоменклатуры(Команда)
	
	ПодборНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьНоменклатуру(Команда)
	
	АдресХранилищаНоменклатура = ПоместитьНоменлатуруВоВременноеХранилищеНаСервере();
	ИзменитьНоменклатуру(АдресХранилищаНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Документ", Объект);
	СтруктураПараметров.Вставить("ИмяМакета", "СКД");
	СтруктураПараметров.Вставить("ИмяСобытия", "ПодборЗаявокНаПотребность");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПараметров",	СтруктураПараметров);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", 	Истина);
	
	ОткрытьФорму("Обработка.бит_мто_ПодборЗаявокНаПотребность.Форма.Форма", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	мКэшЗначений = Новый Структура;
	
	ДокументЗаявкаНаЗакупку = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.бит_мто_ЗаявкаНаЗакупку"));
	
	мКэшЗначений.Вставить("ИзмеренияДоп"      		  , ДокументЗаявкаНаЗакупку.мИзмеренияДоп);
	мКэшЗначений.Вставить("НастройкиИзмерений"		  , ДокументЗаявкаНаЗакупку.мНастройкиИзмерений);
	мКэшЗначений.Вставить("ВалютаРеглУчета"			  , Константы.ВалютаРегламентированногоУчета.Получить());
	
	// Запишем параметр для формирования заголовка.
	мКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Статусы заявки.
	мКэшЗначений.Вставить("ЗаявкаНаЗакупку_Закрыта"	 , Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Закрыта);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО",Объект.ЦФО);
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		ДатаНаст = Объект.Дата;
	Иначе	
		ДатаНаст = ТекущаяДата();
	КонецЕсли; 
	НастройкиПрограммы  = бит_ОбщегоНазначения.ПолучитьНастройкиПрограммы(ДатаНаст, , СтруктураПараметров, "Ошибки");	
	мКэшЗначений.Вставить("КонтрольПоБюджету",бит_ОбщегоНазначения.ИзвлечьНастройкуПрограммы(НастройкиПрограммы, ПланыВидовХарактеристик.бит_НастройкиПрограммы.КонтролироватьЗаявкуНаЗакупкуПоБюджету));
	
КонецПроцедуры

// Процедура устанавливает доступность элементам формы.
// 
// Параметры:
//  Доступность - Булево.
// 
&НаСервере
Процедура УстановитьДоступностьЭлементов()

	ЭлементыТолькоПросмотр = ?( Статус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Черновик
			ИЛИ Статус = Справочники.бит_СтатусыОбъектов.ПустаяСсылка(), Ложь, Истина);

	Исключения = Новый Массив();
	Исключения.Добавить(ВРег("ТоварыВсего"));
			
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") 
			И Исключения.Найти(ВРег(Элемент.Имя)) = Неопределено Тогда  
			
			Элемент.ТолькоПросмотр = ЭлементыТолькоПросмотр;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

// Процедура управляем видимостью-доступностью элементов формы. 
// 
&НаСервере
Процедура УправлениеЭлементамиФормы()

	ЗначениеПустогоКоличества = ?(Объект.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги, 1, 0);
	мКэшЗначений.Вставить("ЗначениеПустогоКоличества", ЗначениеПустогоКоличества);
	
	// Управление доступностью некоторых элементов в зависимости от статуса Черновик.
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Черновик);
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	Если ТипЗнч(МассивСтатусов.Найти(Статус)) = Тип("Неопределено") Тогда
		Элементы.ЦеныИВалюта.Доступность = Ложь;
		Элементы.Товары.КоманднаяПанель.Доступность = Ложь;
		Элементы.Товары.КонтекстноеМеню.Доступность = Ложь;
	Иначе
		Элементы.ЦеныИВалюта.Доступность = Истина;
		Элементы.Товары.КоманднаяПанель.Доступность = Истина;
		Элементы.Товары.КонтекстноеМеню.Доступность = Истина;
	КонецЕсли;
	
	// Управление доступностью команды создать на основании поступление товаров.
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Утверждена);
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_ЧастичноИсполнена);
	Если ТипЗнч(МассивСтатусов.Найти(Статус)) = Тип("Неопределено") Тогда
		Элементы.ФормаКнопкаСоздатьДокументПоступлениеТоваров.Доступность = Ложь;
	Иначе
		Элементы.ФормаКнопкаСоздатьДокументПоступлениеТоваров.Доступность = Истина;
	КонецЕсли;
	
	// Управление доступностью команды создать на основании Заявки на расходование ДС.
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Утверждена);
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_ЧастичноИсполнена);
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Исполнена);
	Если ТипЗнч(МассивСтатусов.Найти(Статус)) = Тип("Неопределено") Тогда
		Элементы.ФормаКнопкаСоздатьЗаявкуНаРасходованиеДС.Доступность = Ложь;
	Иначе
		Элементы.ФормаКнопкаСоздатьЗаявкуНаРасходованиеДС.Доступность = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
	Для каждого Строка Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(Строка.Потребность)
			ИЛИ ЗначениеЗаполнено(Строка.ЗаявкаНаПотребность) Тогда
		
			Элементы.ТоварыПотребность.Видимость = Истина;
			Элементы.ТоварыЗаявкаНаПотребность.Видимость = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Элементы.ТоварыКоличество.АвтоОтметкаНезаполненного = ?(Объект.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги, Ложь, Истина);
	
	УстановитьНастройкиДоступностиЭлементов();
	
	Если Статус = Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Закрыта Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком ожидания, отслеживает окончание транзакции записи/проведения документа.
// 
&НаКлиенте
Процедура ОжиданиеПроведенияДокумента()
	
	ОтключитьОбработчикОжидания("ОжиданиеПроведенияДокумента");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВизы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктурноеПодразделение", Объект.Организация);
	СтруктураПараметров.Вставить("ЦФО"					   , Объект.ЦФО);		
	
	бит_Визирование.ОбновитьПереченьВиз(Объект.Ссылка, Объект.Дата, СтруктураПараметров);
	
КонецПроцедуры

// Процедура применяет настройки доступности и видимости для элементов формы.
// 
&НаСервере
Процедура УстановитьНастройкиДоступностиЭлементов()
	
	бит_ОбщегоНазначения.УстановитьНастройкиДоступностиЭлементовДляФормы(ЭтотОбъект, Объект, Статус);
	
КонецПроцедуры

// Процедура осуществляет подбор номеклатуры.
// 
&НаКлиенте
Процедура ПодборНоменклатуры()

	ПараметрыПодбора = ПолучитьПараметрыПодбора();
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

// Процедура подбирает значения для передачи в типовую обработку "ПодборНоменклатуры".
// 
&НаКлиенте
Функция ПолучитьПараметрыПодбора()
	
	ОбъектФормы = ЭтотОбъект.Объект;

	ПараметрыФормы = Новый Структура;
	
	ДатаРасчетов     = ?(НачалоДня(ОбъектФормы.Дата) = НачалоДня(ТекущаяДата()), Неопределено, ОбъектФормы.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	
	Если ЭтоУслуга() Тогда
		
		ИмяТаблицы = "Услуги";
		ПредставлениеТаблицы = НСтр("ru = 'Услуги'");
	
	Иначе	
		ПредставлениеТаблицы = НСтр("ru = 'Товары'");
		ИмяТаблицы = "Товары";
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, ОбъектФормы.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы.Вставить("ЕстьЦена"          , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	ПараметрыФормы.Вставить("ТипЦен"            , Объект.ТипЦен);
	ПараметрыФормы.Вставить("Валюта"            , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("ДоговорКонтрагента", ОбъектФормы.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , ОбъектФормы.Контрагент);
	ПараметрыФормы.Вставить("Организация"       , ОбъектФормы.Организация);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"            , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Процедура осуществляет изменение номенклатуры при нажатии кнопки "Изменить".
// 
&НаКлиенте
Процедура ИзменитьНоменклатуру(АдресХранилищаТовары)

	ПараметрыФормы = ПолучитьПараметрыИзменения(АдресХранилищаТовары);
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

// Функция Процедура подбирает значения для передачи в типовую обработку "ИзменениеТаблицыТоваров".
// 
&НаКлиенте
Функция ПолучитьПараметрыИзменения(АдресХранилищаТовары)

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		АдресХранилищаТовары);
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Истина);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 			Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 			Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 		Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 			Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 			Объект.КурсДокумента);
	ПараметрыОбработки.Вставить("ДокументКратность", 		Объект.КратностьДокумента);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументСклад", 			Объект.Склад);
	
	ТипЦенСклада = Неопределено;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ТипЦенСклада = бит_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипЦенРозничнойТорговли");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТипЦенСклада) Тогда
	
		ПараметрыОбработки.Вставить("ДокументТипЦен", ТипЦенСклада);
	Иначе	
		ПараметрыОбработки.Вставить("ДокументТипЦен", Объект.ТипЦен);
	КонецЕсли; 

	Возврат ПараметрыОбработки;
	
КонецФункции

// Процедура рассчитывает сумму в строке табличной части документа.
// 
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0)

	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);

КонецПроцедуры

// Процедура осуществляет расчет суммы НДС, исходя из постоянной суммы.
// 
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС = Ложь)

	Если ТипЗнч(СтрокаТабличнойЧасти)=Тип("Структура") Тогда
		Если СтрокаТабличнойЧасти.Свойство("Сумма") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
			СтрокаТабличнойЧасти.СуммаНДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТабличнойЧасти.Сумма,
												Истина,
												СуммаВключаетНДС,
												бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;
	Иначе // Строка табличной части
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СуммаНДС = бит_БухгалтерияКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТабличнойЧасти.Сумма,
												Истина,
												СуммаВключаетНДС,
												бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура обновляет итоги по всем суммам.
// 
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;

	Форма.ИтогиВсего    = Объект.Товары.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Товары.Итог("СуммаНДС");
	
КонецПроцедуры

// Процедура рассчитывает сумму Всего в строке табличной части документа.
// 
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
// 
&НаСервере
Процедура РассчитатьСуммуВсего(СтрокаТаблицы)
	
	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

// Процедура пересчитывает суммы табличной части при изменении цены или количества.
// 
&НаКлиенте
Процедура ПриИзмененииКоличествоЦена(ЗначениеПустогоКоличества = 0)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

КонецПроцедуры

// Процедура пересчитывает суммы табличной части при изменении суммы.
// 
&НаКлиенте
Процедура ПриИзмененииСумма(ЗначениеПустогоКоличества = 0)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	Если (СтрокаТабличнойЧасти.Количество = 0) И (ЗначениеПустогоКоличества = 0) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
	КонецЕсли;

	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

КонецПроцедуры

// Процедура обрабатывает выбор номенклатуры.
// 
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ПараметрыОбъекта = Неопределено;
	
	Если ТипЗнч(ПараметрыОбъекта) <> Тип("Структура") Тогда
		ПараметрыОбъекта = Новый Структура;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, ПодразделениеОрганизации, Склад, ЭтоКомиссия, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
		
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
		
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
		
		МассивНайденныхСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
		Иначе	
			СтрокаТабличнойЧасти = Неопределено;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			// Рассчитываем реквизиты табличной части
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, мКэшЗначений.ЗначениеПустогоКоличества);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			РассчитатьСуммуВсего(СтрокаТабличнойЧасти);
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			// ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
			// Заполняем реквизиты табличной части
			СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
			
			СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
			// Рассчитываем реквизиты табличной части
			РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, мКэшЗначений.ЗначениеПустогоКоличества);
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			РассчитатьСуммуВсего(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
	КонецЦикла;	
		
КонецПроцедуры

// Процедура выполняет действия при нажатии на гиперссылку "ЦеныИВалюта".
// 
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюта()

	// Формирование структуры параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента"     , Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"       , Объект.КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"  , Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЦен"              , Объект.ТипЦен);
	СтруктураПараметров.Вставить("СуммаВключаетНДС"	   , Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("ДатаДокумента"       , Объект.Дата);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.бит_мто_ЗаявкаНаЗакупку.Форма.ФормаЦеныИВалюта"
		,СтруктураПараметров,,
		,ВариантОткрытияОкна.ОтдельноеОкно,
		,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Процедура окончание процедуры "ОбработатьИзмененияПоКнопкеЦеныИВалюта".
// 
&НаКлиенте 
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	  
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ЭтотОбъект.Модифицированность = Истина;
		
		ПриИзмененииЦеныИВалюты(РезультатЗакрытия);
		
		ОбновитьИтоги(ЭтотОбъект);
		СформироватьНадписьЦеныИВалюта();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура пересчитывает цены и суммы в табличной части "Товары".
// 
// Параметры:
//  СтруктураЦеныИВалюта - Структура.
// 
&НаСервере
Процедура ПриИзмененииЦеныИВалюты(СтруктураЦеныИВалюта)

	ВалютаДоИзменения    = Объект.ВалютаДокумента;
	КурсДоИзменения      = Объект.КурсДокумента;
	КратностьДоИзменения = Объект.КратностьДокумента;
	
	Объект.ТипЦен               = СтруктураЦеныИВалюта.ТипЦен;
	Объект.ВалютаДокумента      = СтруктураЦеныИВалюта.ВалютаДокумента;
	Объект.КурсДокумента      	= СтруктураЦеныИВалюта.КурсДокумента;
	Объект.КратностьДокумента 	= СтруктураЦеныИВалюта.КратностьДокумента;
	
	ПересчитатьНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС <> Объект.СуммаВключаетНДС;
	
	Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
	
	СписокНоменклатуры = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры,
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура"));
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда	
		ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
	Иначе
		ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатурыДокументов(
			СписокНоменклатуры,
			Перечисления.СпособыЗаполненияЦен.ПоЗакупочнымЦенам,
			Объект.Дата);
			
		// !! (БИТ) Пока не ищем в этом регистре !!	
		ТаблицаЦенНоменклатуры.Очистить();
	КонецЕсли;	
	
	Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
		СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
	Иначе
		СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаДоИзменения));
		
		СтруктураКурса.Вставить("Валюта",    ВалютаДоИзменения);
		СтруктураКурса.Вставить("ДатаКурса", Объект.Дата);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Цена = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсДокумента, НайденнаяСтрока.Кратность, Объект.КратностьДокумента);
			ЦенаВключаетНДС = НайденнаяСтрока.ЦенаВключаетНДС;
			
		Иначе
			
			Цена = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, ВалютаДоИзменения, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсДокумента, СтруктураКурса.Кратность, Объект.КратностьДокумента);
			// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа.
			ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
			
		КонецЕсли;

		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС,
			Объект.СуммаВключаетНДС, бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

		СтрокаТаблицы.Цена = Цена;
			
		СтрокаТаблицы.Сумма = Цена * ?(СтрокаТаблицы.Количество = 0, мКэшЗначений.ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);

		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС, бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
		РассчитатьСуммуВсего(СтрокаТаблицы);	
			
	КонецЦикла;

КонецПроцедуры

// Функция помещает во временное хранилище таб часть "Товары".
// 
&НаСервере
Функция ПоместитьНоменлатуруВоВременноеХранилищеНаСервере()

	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

// Процедура обрабатывает табличную часть "Товары".
// 
&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЦикла;
	
	ОбновитьИтоги(ЭтотОбъект);

КонецПроцедуры

// Процедура настраивает видимость элементов формы от конткретной статьи оборотов.
// 
&НаСервере
Процедура НастроитьВидимостьАналитикБюджетирования()
	
	НастройкиИзмерений = Неопределено;

	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(Объект.СтатьяОборотов);
	Префикс = "";
	
	МассивИсключаемыхИзмерений = Новый Массив;
	МассивИсключаемыхИзмерений.Добавить("Организация");
	МассивИсключаемыхИзмерений.Добавить("Сценарий");
	МассивИсключаемыхИзмерений.Добавить("ЦФО");
	МассивИсключаемыхИзмерений.Добавить("СтатьяОборотов");
	МассивИсключаемыхИзмерений.Добавить("Проект");
	МассивИсключаемыхИзмерений.Добавить("Контрагент");
	МассивИсключаемыхИзмерений.Добавить("ДоговорКонтрагента");
	МассивИсключаемыхИзмерений.Добавить("ФизическоеЛицо");
	
	НастройкаВидимости = бит_Бюджетирование.ПолучитьНастройкуВидимостиКолонок(МассивСтатей, НастройкиИзмерений);
	
	Для Каждого ТекИзмерение Из МассивИсключаемыхИзмерений Цикл
		
		Если НЕ НастройкаВидимости.Свойство(ТекИзмерение) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаВидимости.Удалить(ТекИзмерение);
		
	КонецЦикла;
	
	бит_РаботаСДиалогамиСервер.УправлениеВидимостьюКолонокТабличногоПоля(Элементы, НастройкаВидимости, Префикс);
	
	ВидимостьНазначенныхАналитик();
	
КонецПроцедуры

// Процедура управляет видимостью полей назначенных аналитик.
// 
&НаСервере
Процедура ВидимостьНазначенныхАналитик()

	Для Индекс = 1 По 7 Цикл
		Если ТипЗнч(Объект["Аналитика_" + Индекс]) = Тип("СправочникСсылка.Номенклатура") Тогда
			Элементы["Аналитика_" + Индекс].Видимость = Ложь;
		КонецЕсли; 
	КонецЦикла; 

	СовпадающиеАналитики = Документы.бит_мто_ЗаявкаНаЗакупку.НайтиАналитикиСовпадающиеСРеквизитами(Объект.Ссылка.метаданные());
	
	Для каждого Соотв Из СовпадающиеАналитики Цикл
		ИмяАналитики = Соотв.Ключ; 
		Элементы[ИмяАналитики].Видимость = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура изменение договора на сервере.
// 
&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		
		СтруктураДоговора = Новый Структура;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ТипЦен) Тогда
			
			ТипЦен = Объект.ДоговорКонтрагента.ТипЦен; 
			
			СтруктураДоговора.Вставить("ТипЦен", ТипЦен);
			СтруктураДоговора.Вставить("СуммаВключаетНДС", ТипЦен.ЦенаВключаетНДС);
			
		Иначе	
			СтруктураДоговора.Вставить("ТипЦен", Объект.ТипЦен);
			СтруктураДоговора.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
		КонецЕсли; 
		
		ВалютаДокумента = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента,Объект.Дата);
		КурсДокумента      = СтрКурса.Курс;
		КратностьДокумента = СтрКурса.Кратность;
		
		СтруктураДоговора.Вставить("ВалютаДокумента",      ВалютаДокумента);
		СтруктураДоговора.Вставить("КратностьДокумента",   КратностьДокумента);
		СтруктураДоговора.Вставить("КурсДокумента",        КурсДокумента);
		
		ПриИзмененииЦеныИВалюты(СтруктураДоговора);
		
		СформироватьНадписьЦеныИВалюта();
		
	КонецЕсли; 

КонецПроцедуры

// Процедура устанавливает договор контрагента в зависимости от текущих значений.
// 
&НаСервере
Процедура УстановитьДоговорКонтрагентаСервер()

	// Сформируем список видов договоров
	мСписокВидовДоговоров = Новый СписокЗначений;
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента
														  ,Объект.Контрагент
														  ,Объект.Организация
														  ,мСписокВидовДоговоров);

КонецПроцедуры

// Процедура изменение валюты.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()

	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента,Объект.Дата);
	Объект.КурсДокумента      = СтрКурса.Курс;
	Объект.КратностьДокумента = СтрКурса.Кратность;

КонецПроцедуры

// Функция при изменении ТипЦен на сервере. 
// 
&НаСервере
Функция ТипЦенПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		Объект.СуммаВключаетНДС = Объект.ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
КонецФункции

// Процедура пересчитывает суммы в табличной части Товары. 
// 
&НаСервере
Процедура ИзменениеТабличнойЧастиТоварыСервер(кВалютаДокумента, кКурсДокумента, кКратностьДокумента, кСуммаВключаетНДС)

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		ПересчитатьНДС = кСуммаВключаетНДС <> Объект.СуммаВключаетНДС;
		
		Цена = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Цена, кВалютаДокумента, Объект.ВалютаДокумента, кКурсДокумента,
			Объект.КурсДокумента, кКратностьДокумента, Объект.КратностьДокумента);
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа.
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
			
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС,
			Объект.СуммаВключаетНДС, бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

		СтрокаТаблицы.Цена = Цена;
			
		СтрокаТаблицы.Сумма = Цена * СтрокаТаблицы.Количество;

		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС, бит_БухгалтерияСервер.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
			
		РассчитатьСуммуВсего(СтрокаТаблицы);	
	
	КонецЦикла; 

КонецПроцедуры

// Процедура на сервере при изменении поля "Номенклатура". 
// 
&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(ИД)
	
	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИД);
	бит_мто.ЗаполнитьДанныеПоНоменклатуре(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора поля Номенклатура в зависимости от вида операции.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()

	МассивПараметровВыбора = Новый Массив;
	Если Объект.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги Тогда
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Услуга", Истина));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Заголовок", "Услуги"));
	Иначе	
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Услуга", Ложь));
	КонецЕсли; 
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

КонецПроцедуры

// Функция возможность редактирования списка номенклатуры.
// 
&НаСервере
Функция ПроверитьВозможностьРедактированияСпискаНоменклатуры()

	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ЗаявкаНаЗакупку_Черновик);
	МассивСтатусов.Добавить(Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	Если ТипЗнч(МассивСтатусов.Найти(Статус)) = Тип("Неопределено") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Процедура обрабатывает заполнение табличной части из подбора заявок на потребность.
// 
// Параметры:
//  СтрЗаполнения - Структура.
// 
&НаСервере
Процедура ОбработкаЗаполненияИзПодбора(СтрЗаполнения)

	Если СтрЗаполнения.ОчищатьТабЧасть Тогда
	
		Объект.Товары.Очистить();
	
	КонецЕсли; 
	
	ТаблицаПодбор = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтрЗаполнения.Хранилище);
	
	Для каждого Строка Из ТаблицаПодбор Цикл
	
		СтрОтбора = Новый Структура;
		СтрОтбора.Вставить("Потребность", Строка.Потребность);
		СтрОтбора.Вставить("Номенклатура", Строка.Номенклатура);
		СтрОтбора.Вставить("ЗаявкаНаПотребность", Строка.ЗаявкаНаПотребность);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтрОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].Количество 	= НайденныеСтроки[0].Количество + Строка.Количество;
			НайденныеСтроки[0].Сумма 		= НайденныеСтроки[0].Сумма 		+ Строка.Сумма;
			НайденныеСтроки[0].СуммаНДС 	= НайденныеСтроки[0].СуммаНДС 	+ Строка.СуммаНДС;
			НайденныеСтроки[0].Всего 		= НайденныеСтроки[0].Всего 		+ Строка.Всего;
			
		Иначе
			
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция проверяет вид операции документа.
// 
&НаСервере
Функция ЭтоУслуга()

	Возврат ?(Объект.ВидОперации = Перечисления.бит_мто_ВидыОперацийЗаявокНаПотребность.Услуги, Истина, Ложь);
	
КонецФункции

// Процедура выполняет действия на сервере,
//  необходимые при изменении СтатьиОборотов.
// 
// Параметры:
//  Контейнер - ДанныеФормыСтруктура, СтрокаТабличнойЧасти.
// 
&НаКлиенте 
Процедура ИзменениеСтатьиОборотов(Контейнер)

	Если Контейнер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
    ИзменениеСтатьиОборотовСервер();
	
КонецПроцедуры

// Процедура обрабатывает изменение статьи на сервере 
//
&НаСервере
Процедура ИзменениеСтатьиОборотовСервер()

	Контейнер = Объект;

	Если ЗначениеЗаполнено(Контейнер.СтатьяОборотов) Тогда
		
		НастройкиСтатьи = Справочники.бит_СтатьиОборотов.ПолучитьНастройки(Контейнер.СтатьяОборотов);
		бит_Бюджетирование.УстановитьИспользованиеАналитики(Контейнер, НастройкиСтатьи, мКэшЗначений.ИзмеренияДоп);
		
	КонецЕсли; 
	
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикШапкиПриИзмененииСтатьиОборотов(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСКэшемРеквизитовФормы
	
// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры

#КонецОбласти 

#Область УправлениеВнешнимВидомФормы

// Процедура устнавливает заголовок формы.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", мКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , "");
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры

// Процедура формирует гиперссылку с данными по ценам и валюте.
// 
&НаСервере
Процедура СформироватьНадписьЦеныИВалюта()

	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("ТипЦен", 		  	Объект.ТипЦен);
	СтруктураНадписи.Вставить("ВалютаДокумента",  	Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("Курс",             	Объект.КурсДокумента);
	СтруктураНадписи.Вставить("Кратность",        	Объект.КратностьДокумента);
	СтруктураНадписи.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	СтруктураНадписи.Вставить("ВалютаРегламентированногоУчета", мКэшЗначений.ВалютаРеглУчета);
	
	ЭтотОбъект.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

#КонецОбласти 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствАналитик(Форма)

	Результат = бит_МеханизмДопИзмеренийКлиентСервер.ПараметрыУстановкиСвойствАналитикПоШаблону(
		"Аналитика_", "Аналитика_", "СтатьяОборотов");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикШапкиПриИзмененииОрганизации(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект));	

КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСтатуса()
	
	Результат = бит_Визирование.ПолучитьСтатусОбъекта(Объект.Ссылка);
	
	Статус 				 = Результат.Статус;
	ДатаИзмененияСтатуса = Результат.Дата;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СформироватьИнформациюСтатус(Статус, ДатаИзмененияСтатуса, ИнформацияСтатус)

	СтруктураПараметров = Новый Структура("Статус, ДатаИзмененияСтатуса", Статус, ДатаИзмененияСтатуса);
	ИнформацияСтатус    = бит_ОбщегоНазначенияКлиентСервер.СформироватьИнформациюСтатус(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти
