
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте 
Перем мСписокВидовДоговоров; // Хранит список доступных для выбора видов договоров. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	фКоличествоСубконтоМУ = 4;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Устанавливаем связи параметров выбора и связи по типу субконто.
	бит_БухгалтерияСервер.УстановитьСвязиСубконто(Элементы, "СчетРасходы", "СубконтоРасходы", фКоличествоСубконтоМУ);

	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															   ,"ДанныеДляНачисления"
															   ,"СубконтоРасходы"
															   ,"КоличествоДоступныхСубконтоРасходов"
															   ,фКоличествоСубконтоМУ);
															   
	ВосстановитьКоличествоДоступныхСубконто();														   
															   
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходы, фКоличествоСубконтоМУ);									  
	УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходы");	 
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	УстановитьПараметрыВыбораДляСчетов();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("ОчищатьТабличнуюЧасть") 
			И ВыбранноеЗначение.ОчищатьТабличнуюЧасть 
			И (Объект.ДанныеДляНачисления.Количество() > 0) Тогда
				
				ТекстВопроса = НСтр("ru = 'Для заполнения документа, необходимо очистить табличную часть. Продолжить?'");
				ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОбработкаВыбора", ЭтотОбъект, ВыбранноеЗначение);
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
								
		Иначе
			
			Если ВыбранноеЗначение.Свойство("МассивСтрок") Тогда
				ОбработкаВыбораНаСервере(ВыбранноеЗначение.МассивСтрок);
			КонецЕсли;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьКоличествоДоступныхСубконто();
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_НачислениеРезерваПоМПЗ";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Дата".
// 
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаДокумента".
// 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетРасходы".
// 
&НаКлиенте
Процедура СчетРасходыПриИзменении(Элемент)
	
	ИзменениеСчетаРасходы();	

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоРасходы_<i>".
// 
&НаКлиенте
Процедура СубконтоРасходыПриИзменении(Элемент)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	ИзменениеСубконтоРасходы(Объект, ЗначениеСубконто);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СубконтоРасходы_<i>".
// 
&НаКлиенте
Процедура СубконтоРасходыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];
	НачалоВыбораСубконтоРасходы(Элемент, СтандартнаяОбработка, Объект, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоРасходыАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ЗначениеСубконто = Объект[Элемент.Имя];	
	ИсключитьОрганизацию = Ложь;
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
													 , Параметры
													 , Объект
													 , Объект
													 , "СубконтоРасходы"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , ИсключитьОрганизацию);

КонецПроцедуры // СубконтоРасходыАвтоПодбор()

&НаКлиенте
Процедура ДанныеДляНачисленияСчетРасходыПриИзменении(Элемент)
	
	Идентификатор = Элементы.ДанныеДляНачисления.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаСчетРасходовТабличноеПолеДанныеНачисления(Идентификатор);
	
КонецПроцедуры

&НаСервере         
Процедура ИзменениеСчетаСчетРасходовТабличноеПолеДанныеНачисления(Идентификатор)
	                       
	ТекущаяСтрока = Объект.ДанныеДляНачисления.НайтиПоИдентификатору(Идентификатор);
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетРасходы, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока, НастройкиСубконто, "СубконтоРасходы");
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетРасходы);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоРасходов = СвСч.КоличествоСубконто;
	
КонецПроцедуры // ИзменениеСчетаСчетРасходовТабличноеПолеДанныеНачисления()

&НаКлиенте
Процедура ДанныеДляНачисленияСубконтоРасходыПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.ДанныеДляНачисления.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ДанныеДляНачисления", Элемент.Имя);		
	ИзменениеСубконтоРасходов(Элементы.ДанныеДляНачисления.ТекущиеДанные, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляНачисленияСубконтоРасходыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.ДанныеДляНачисления.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, "ДанныеДляНачисления", Элемент.Имя);		
	НачалоВыбораСубконтоРасходов(Элемент, СтандартнаяОбработка, ТекущаяСтрока, ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляНачисленияСубконтоРасходыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДанныеДляНачисления.ТекущиеДанные;
	
	ЗначениеСубконто = ТекущиеДанные[СтрЗаменить(Элемент.Имя, "ДанныеДляНачисления", "")];	
	бит_БухгалтерияКлиентСервер.СубконтоАвтоПодбор(Элемент
	                                                 , ПараметрыПолученияДанных
													 , ТекущиеДанные
													 , Объект
													 , "СубконтоРасходы"
													 , ЗначениеСубконто
													 , фКоличествоСубконтоМУ
													 , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСубконтоРасходов(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоРасходы", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоРасходы", ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Контейнер, "СубконтоРасходы", "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоРасходов()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока, ИмяТабличногоПоля, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, ИмяТабличногоПоля, "");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура НачалоВыбораСубконтоРасходов(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоРасходы"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	// Установим параметры выбора субконто.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
	
КонецПроцедуры // НачалоВыбораСубконтоРасходов()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеДляНачисления

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура" 
// табличного поля "ДанныеДляНачисления".
// 
&НаКлиенте
Процедура ДанныеДляНачисленияНоменклатураПриИзменении(Элемент)
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Элементы.ДанныеДляНачисления.ТекущиеДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Склад" 
// табличного поля "ДанныеДляНачисления".
// 
&НаКлиенте
 Процедура ДанныеДляНачисленияСкладПриИзменении(Элемент)
	 
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Элементы.ДанныеДляНачисления.ТекущиеДанные);
	 
 КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Количество" 
// табличного поля "ДанныеДляНачисления".
// 
&НаКлиенте
Процедура ДанныеДляНачисленияКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДанныеДляНачисления.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, "Себестоимость", "СебестоимостьЕдиницы");
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, "СтоимостьНовая", "ЧистаяЦена");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СебестоимостьЕдиницы" 
// табличного поля "ДанныеДляНачисления".
// 
&НаКлиенте
Процедура ДанныеДляНачисленияСебестоимостьЕдиницыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДанныеДляНачисления.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, "Себестоимость", "СебестоимостьЕдиницы");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ЧистаяЦена" 
// табличного поля "ДанныеДляНачисления".
// 
&НаКлиенте
Процедура ДанныеДляНачисленияЧистаяЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДанныеДляНачисления.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, "СтоимостьНовая", "ЧистаяЦена");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Себестоимость" 
// табличного поля "ДанныеДляНачисления".
// 
&НаКлиенте
Процедура ДанныеДляНачисленияСебестоимостьПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДанныеДляНачисления.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьЦенуВСтрокеТЧ(ТекущаяСтрока, "Себестоимость", "СебестоимостьЕдиницы");
	РасчитатьРезерв(ТекущаяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтоимостьНовая" 
// табличного поля "ДанныеДляНачисления".
// 
&НаКлиенте
Процедура ДанныеДляНачисленияСтоимостьНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДанныеДляНачисления.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьЦенуВСтрокеТЧ(ТекущаяСтрока, "СтоимостьНовая", "ЧистаяЦена");
	РасчитатьРезерв(ТекущаяСтрока);
	
КонецПроцедуры

// Процедура расчитывает сумму резерва в табличной части. 
//
&НаКлиенте
Процедура РасчитатьРезерв(ТекСтрока)

	ТекСтрока.Резерв = ТекСтрока.Себестоимость - ТекСтрока.СтоимостьНовая;

КонецПроцедуры // РасчитатьРезерв()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала", 	Объект.Дата);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Документ",	Объект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПараметров",	СтруктураПараметров);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", 	Ложь);
	
	ОткрытьФорму("Обработка.бит_ПодборНоменклатуры.Форма.ФормаУправляемая", ПараметрыФормы, ЭтотОбъект);
	 
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСчетаРезерва(Команда)
	
	ЗаполнитьСчетаУчета();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура восстанавливает число доступных субконто. 
//
&НаСервере
Процедура ВосстановитьКоличествоДоступныхСубконто()

	// Восстанавливаем настройки субконто в зависимости от счетов учета.
    Для каждого СтрокаТаблицы Из Объект.ДанныеДляНачисления Цикл	
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетРасходы);
		СтрокаТаблицы.КоличествоДоступныхСубконтоРасходов = СвСч.КоличествоСубконто;
	КонецЦикла; 											   

КонецПроцедуры // ВосстановитьКоличествоДоступныхСубконто()

// Процедура добавляет строки в табличную часть "ДанныеДляНачисления".
// 
&НаСервере
Процедура ОбработкаВыбораНаСервере(МассивПодбора)
	
	Для каждого ТекСтр Из МассивПодбора Цикл
	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",	ТекСтр.Номенклатура);
		ПараметрыОтбора.Вставить("Склад", 			ТекСтр.Склад);
		ПараметрыОтбора.Вставить("СчетУчета", 		ТекСтр.СчетУчета);
		НайденныеСтроки = Объект.ДанныеДляНачисления.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ДанныеДляНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура заполняет счета учета в табличной части "ДанныеДляНачисления".
// 
&НаСервере
Процедура ЗаполнитьСчетаУчета()
	
	Для каждого ТекСтр Из Объект.ДанныеДляНачисления Цикл
		
		СтруктураПараметров = Новый Структура("Организация, Номенклатура, Склад, Возвращать", 
											  Объект.Организация,
											  ТекСтр.Номенклатура,
											  ТекСтр.Склад);
											  
		СчетаУчета     		= бит_му_МПЗ.ПолучитьСчетаУчетаНоменклатуры(СтруктураПараметров);	
	    ТекСтр.СчетРезерва 	= СчетаУчета.СчетРезерва;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Запишем параметр для формирования заголовка.
	КэшированныеЗначения.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура обрабатывает изменение валюты документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура обрабатывает изменение счета Расходы.
// 
&НаСервере
Процедура ИзменениеСчетаРасходы()

	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(Объект.СчетРасходы, фКоличествоСубконтоМУ);									  
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(Объект, НастройкиСубконто, "СубконтоРасходы");
	УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, "СубконтоРасходы");

КонецПроцедуры // ИзменениеСчетаМУ()

// Процедура устанавливает настройки элементов управления шапки связанных с субконто.
// 
// Параметры:
//  НастройкиСубконто  - СписокЗначений
//  ИмяЭлемента        - Строка.
// 
&НаСервере
Процедура УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, ИмяЭлемента)
	
	бит_БухгалтерияСервер.УстановитьНастройкиЭлементов(Элементы, НастройкиСубконто, ИмяЭлемента);
	
	Ном = 1;
	Для каждого ЭлементНастроек Из НастройкиСубконто Цикл
		
		ТекИмяЭлемента = ИмяЭлемента+Ном;
		
		Если (ЭлементНастроек.Значение = Новый ОписаниеТипов("СправочникСсылка.Номенклатура"))
			// Адаптация для ERP. Начало. 18.03.2014{{
			ИЛИ (ЭлементНастроек.Значение = Новый ОписаниеТипов(бит_ОбщегоНазначения.ПолучитьИмяТипаНоменклатурныеГруппы()))
			// Адаптация для ERP. Конец. 18.03.2014}}
			ИЛИ (ЭлементНастроек.Значение = Новый ОписаниеТипов("СправочникСсылка.Склады")) Тогда
			Элементы[ТекИмяЭлемента].Видимость = Ложь;
		КонецЕсли;
		
		Ном = Ном+1;
	КонецЦикла; 

КонецПроцедуры // УстановитьНастройкиЭлементов()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();	
	
	бит_БухгалтерияСервер.ПроверитьСоответствиеОрганизации(Объект, "СубконтоРасходы", фКоличествоСубконтоМУ, "В документе");
	
	Для каждого СтрокаТаблицы Из Объект.ДанныеДляНачисления Цикл
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиСервер(СтрокаТаблицы.ПолучитьИдентификатор());
			
	КонецЦикла; 
	
	
КонецПроцедуры // ИзменениеОрганизацииСервер()


// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ТаблицаОбъекта - ТаблицаЗначений.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ТаблицаОбъекта) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		// Выполним пересчет сумм строк табличной части.
		Для Каждого СтрокаТаблицы Из ТаблицаОбъекта Цикл
			
			СтрокаТаблицы.Себестоимость = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Себестоимость
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
			СтрокаТаблицы.СтоимостьНовая = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьНовая
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
																				 
		КонецЦикла;
		
	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент()

#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ДанныеДляНачисленияСчетУчета);
	МассивЭлементов.Добавить(Элементы.ДанныеДляНачисленияСчетРезерва);
	МассивЭлементов.Добавить(Элементы.СчетРасходы);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	ТаблицаОбъекта = Объект.ДанныеДляНачисления;
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И ((ТаблицаОбъекта.Итог("Себестоимость") <> 0) ИЛИ (ТаблицаОбъекта.Итог("СтоимостьНовая") <> 0)) Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать сумму документа?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект, ТаблицаОбъекта);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
							  
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли; 
		
КонецПроцедуры // ИзменениеВалютыКлиент()

&НаКлиенте
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЗаполнятьЕдиницуИзмерения = Ложь)

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиСервер(СтрокаТабличнойЧасти.ПолучитьИдентификатор(), ЗаполнятьЕдиницуИзмерения);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

&НаСервере
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиСервер(ИдСтроки, ЗаполнятьЕдиницуИзмерения = Ложь)

	СтрокаТабличнойЧасти = Объект.ДанныеДляНачисления.НайтиПоИдентификатору(ИдСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
	
		 Возврат;
	
	КонецЕсли;
	 
	СтруктураПараметров = Новый Структура("Организация, Номенклатура, Склад", 
										  Объект.Организация,
										  СтрокаТабличнойЧасти.Номенклатура,
										  СтрокаТабличнойЧасти.Склад);
										  
	СчетаУчета     						= бит_му_МПЗ.ПолучитьСчетаУчетаНоменклатуры(СтруктураПараметров);	
    СтрокаТабличнойЧасти.СчетРезерва 	= СчетаУчета.СчетРезерва;
	СтрокаТабличнойЧасти.СчетУчета      = СчетаУчета.СчетУчета;
	
	Если ЗаполнятьЕдиницуИзмерения Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СчетаУчета.БазоваяЕдиницаИзмерения;
	КонецЕсли;		
	 

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиСервер()

&НаКлиенте
Процедура НачалоВыбораСубконтоРасходы(Элемент, СтандартнаяОбработка,Контейнер, ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоРасходы"
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеСубконто
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораСубконто()

&НаКлиенте
Процедура ИзменениеСубконтоРасходы(Контейнер, ЗначениеСубконто)

	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер, "СубконтоРасходы", фКоличествоСубконтоМУ);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто, "СубконтоРасходы", ЗначениеСубконто, фКоличествоСубконтоМУ);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто, Объект, "СубконтоРасходы", "", фКоличествоСубконтоМУ);																   

КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
//  ВыбранноеЗначение - тип.
// 
&НаКлиенте
Процедура ВопросОбработкаВыбора(Ответ, ВыбранноеЗначение) Экспорт
						  
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДанныеДляНачисления.Очистить();
	
		Если ВыбранноеЗначение.Свойство("МассивСтрок") Тогда
			ОбработкаВыбораНаСервере(ВыбранноеЗначение.МассивСтрок);
		КонецЕсли;
		
		Модифицированность = Истина;
	
    КонецЕсли;

КонецПроцедуры // ВопросОбработкаВыбора()

// Процедура устнавливает заголовок формы документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
	
КонецПроцедуры // УправлениеЭлементамиФормы()

#КонецОбласти

#КонецОбласти

#Область Инициализация

// Зададим имена реквизитов, подлежащих кешированию.
мКэшРеквизитовФормы = Новый Структура;
мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
мКэшРеквизитовФормы.Вставить("КурсДокумента");
мКэшРеквизитовФормы.Вставить("КратностьДокумента");

#КонецОбласти    
