

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
    
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьДанныеФормы();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьВалютуМСФОНаФорме();
	ОтобразитьВалютуВзаиморасчетовНаФорме();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СуммаПоСчетамУчета = Объект.ОсновнойДолгДолгосрочный 
			              + Объект.ОсновнойДолгКраткосрочный 
						  + Объект.ПроцентыДолгосрочные 
						  + Объект.ПроцентыКраткосрочные;
				  
		Если СуммаПоСчетамУчета > Объект.СуммаОбязательств Тогда
			ТекстСообщения = НСтр("ru = 'Сумма обязательств (в валюте мсфо) по счетам учета превышает общую сумму обязательств (в валюте мсфо).'");			  
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "СуммаОбязательств", "Объект.СуммаОбязательств", Отказ);			  
		КонецЕсли;
		
		СуммаПоСчетамУчетаВзаим = Объект.ОсновнойДолгДолгосрочныйВзаиморасчеты 
					              + Объект.ОсновнойДолгКраткосрочныйВзаиморасчеты 
								  + Объект.ПроцентыДолгосрочныеВзаиморасчеты 
								  + Объект.ПроцентыКраткосрочныеВзаиморасчеты;
				  
		Если СуммаПоСчетамУчетаВзаим > Объект.СуммаОбязательствВзаиморасчеты Тогда
			ТекстСообщения = НСтр("ru = 'Сумма обязательств (в валюте взаиморасчетов) по счетам учета превышает общую сумму обязательств (в валюте взаиморасчетов).'");			  
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "СуммаОбязательствВзаиморасчеты", "Объект.СуммаОбязательствВзаиморасчеты", Отказ);			  
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УстановитьСостояниеДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетДоходовПриИзменении(Элемент)
	бит_БухгалтерияКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоСчетДоходов(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовПриИзменении(Элемент)
	бит_БухгалтерияКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоСчетРасходов(ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
		
	ТекстВопроса = НСтр("ru = 'Оргнизация изменена, данные будут очищены, продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЭлементШапкиПриИзмененииЗавершение", ЭтотОбъект, "Организация");
	ПоказатьВопросПользователю(Оповещение, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ТекстВопроса = НСтр("ru = 'Контрагент изменен, данные будут очищены, продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЭлементШапкиПриИзмененииЗавершение", ЭтотОбъект, "Контрагент");
	ПоказатьВопросПользователю(Оповещение, ТекстВопроса);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
		
	ТекстВопроса = НСтр("ru = 'Договор изменен, данные будут очищены, продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЭлементШапкиПриИзмененииЗавершение", ЭтотОбъект, "ДоговорКонтрагента");
	ПоказатьВопросПользователю(Оповещение, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ТекстВопроса = НСтр("ru = 'Дата документа изменена, данные будут очищены, продолжить?'");
	Оповещение = Новый ОписаниеОповещения("ЭлементШапкиПриИзмененииЗавершение", ЭтотОбъект, "ДатаДокумента");
	ПоказатьВопросПользователю(Оповещение, ТекстВопроса);
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконтоСчетДоходов(1);
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконтоСчетДоходов(2);
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконтоСчетДоходов(3);
КонецПроцедуры

&НаКлиенте
Процедура СчетДоходовСубконто4ПриИзменении(Элемент)
	ПриИзмененииСубконтоСчетДоходов(4);
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовСубконто1ПриИзменении(Элемент)
	ПриИзмененииСубконтоСчетРасходов(1);
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовСубконто2ПриИзменении(Элемент)
	ПриИзмененииСубконтоСчетРасходов(2);
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовСубконто3ПриИзменении(Элемент)
	ПриИзмененииСубконтоСчетРасходов(3);
КонецПроцедуры

&НаКлиенте
Процедура СчетРасходовСубконто4ПриИзменении(Элемент)
	ПриИзмененииСубконтоСчетРасходов(4);
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДолгДолгосрочныйВзаиморасчетыПриИзменении(Элемент)
	ПересчитатьИзВалютыВВалюту("ОсновнойДолгДолгосрочныйВзаиморасчеты", "ОсновнойДолгДолгосрочный");
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойДолгКраткосрочныйВзаиморасчетыПриИзменении(Элемент)
	ПересчитатьИзВалютыВВалюту("ОсновнойДолгКраткосрочныйВзаиморасчеты", "ОсновнойДолгКраткосрочный");
КонецПроцедуры

&НаКлиенте
Процедура ПроцентыДолгосрочныеВзаиморасчетыПриИзменении(Элемент)
	ПересчитатьИзВалютыВВалюту("ПроцентыДолгосрочныеВзаиморасчеты", "ПроцентыДолгосрочные");
КонецПроцедуры

&НаКлиенте
Процедура ПроцентыКраткосрочныеВзаиморасчетыПриИзменении(Элемент)
	ПересчитатьИзВалютыВВалюту("ПроцентыКраткосрочныеВзаиморасчеты", "ПроцентыКраткосрочные");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ОбновитьДанныеДокумента(Команда)
	ОбновитьДанныеДокументаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьДанныеФормы()

	УстановитьСостояниеДокумента();	

	бит_БухгалтерияКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоСчетДоходов(ЭтотОбъект));
	бит_БухгалтерияКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконтоСчетРасходов(ЭтотОбъект));
		
    ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СтруктураКурсыМСФО = ВалютаМСФОСервер(Объект.Организация, Объект.Дата);
	ВалютаМСФО         = СтруктураКурсыМСФО.Валюта;
	КурсМСФО           = СтруктураКурсыМСФО.Курс;
	КратностьМСФО      = СтруктураКурсыМСФО.Кратность;
	
	СтруктураКурсыВзаим     = ВалютаВзаиморасчетовСервер(Объект.ДоговорКонтрагента, Объект.Дата);
	ВалютаВзаиморасчетов    = СтруктураКурсыВзаим.Валюта;
	КурсВзаиморасчетов      = СтруктураКурсыВзаим.Курс;
	КратностьВзаиморасчетов = СтруктураКурсыВзаим.Кратность;
	
	ТекущаяОрганизация   = Объект.Организация;
	ТекущийКонтрагент    = Объект.Контрагент;
	ТекущийДоговор       = Объект.ДоговорКонтрагента;
	ТекущаяДатаДокумента = Объект.Дата;
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           Пользователи.ТекущийПользователь(),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураКурсыМСФО = ВалютаМСФОСервер(Объект.Организация, Объект.Дата);
		ВалютаМСФО         = СтруктураКурсыМСФО.Валюта;
		КурсМСФО           = СтруктураКурсыМСФО.Курс;
		КратностьМСФО      = СтруктураКурсыМСФО.Кратность;
	Иначе
		ВалютаМСФО         = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		КурсМСФО           = 1;
		КратностьМСФО      = 1;
	КонецЕсли; 
	
	ОтобразитьВалютуМСФОНаФорме();
		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		СтруктураКурсы          = ВалютаВзаиморасчетовСервер(Объект.ДоговорКонтрагента, Объект.Дата);
		ВалютаВзаиморасчетов    = СтруктураКурсы.Валюта;
		КурсВзаиморасчетов      = СтруктураКурсы.Курс;
		КратностьВзаиморасчетов = СтруктураКурсы.Кратность;
	Иначе	
		ВалютаВзаиморасчетов    = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		КурсВзаиморасчетов      = 1;
		КратностьВзаиморасчетов = 1;
	КонецЕсли;
	
	ОтобразитьВалютуВзаиморасчетовНаФорме();
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоСчетДоходов(Форма)
	
	Результат = бит_БухгалтерияКлиентСервер.НовыеПараметрыУстановкиСвойствСубконто();
	
	Результат.ПоляФормы.Субконто1   = "СчетДоходовСубконто1";
	Результат.ПоляОбъекта.Субконто1 = "СчетДоходовСубконто1";
	Результат.ПоляФормы.Субконто2   = "СчетДоходовСубконто2";
	Результат.ПоляОбъекта.Субконто2 = "СчетДоходовСубконто2";
	Результат.ПоляФормы.Субконто3   = "СчетДоходовСубконто3";
	Результат.ПоляОбъекта.Субконто3 = "СчетДоходовСубконто3";
	Результат.ПоляФормы.Субконто4   = "СчетДоходовСубконто4";
	Результат.ПоляОбъекта.Субконто4 = "СчетДоходовСубконто4";
	Результат.ПоляОбъекта.СчетУчета = "СчетДоходов";
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.ДопРеквизиты.Вставить("Контрагент", Форма.Объект.Контрагент);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконтоСчетРасходов(Форма)
	
	Результат = бит_БухгалтерияКлиентСервер.НовыеПараметрыУстановкиСвойствСубконто();
	
	Результат.ПоляФормы.Субконто1   = "СчетРасходовСубконто1";
	Результат.ПоляОбъекта.Субконто1 = "СчетРасходовСубконто1";
	Результат.ПоляФормы.Субконто2   = "СчетРасходовСубконто2";
	Результат.ПоляОбъекта.Субконто2 = "СчетРасходовСубконто2";
	Результат.ПоляФормы.Субконто3   = "СчетРасходовСубконто3";
	Результат.ПоляОбъекта.Субконто3 = "СчетРасходовСубконто3";
	Результат.ПоляФормы.Субконто4   = "СчетРасходовСубконто4";
	Результат.ПоляОбъекта.Субконто4 = "СчетРасходовСубконто4";
	Результат.ПоляОбъекта.СчетУчета = "СчетРасходов";
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	Результат.ДопРеквизиты.Вставить("Контрагент", Форма.Объект.Контрагент);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросПользователю(Оповещение, ТекстВопроса)

	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

// Обработка оповещения вопроса пользователю.
//
// Параметры:
//  Ответ        - КодВозвратаДиалога - ответ пользователя.
//  ИмяЭлемента  - Строка - Имя элемента формы.
//
&НаКлиенте
Процедура ЭлементШапкиПриИзмененииЗавершение(Ответ, ИмяЭлемента) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьДанныеДокумента();
		
		Если СтрСравнить(ИмяЭлемента, "Организация") = 0 Тогда
			ТекущаяОрганизация = Объект.Организация;
			ТекущийДоговор     = Объект.ДоговорКонтрагента;
			ОрганизацияПриИзмененииКлиент();
			ДоговорКонтрагентаПриИзмененииКлиент();
		ИначеЕсли СтрСравнить(ИмяЭлемента, "Контрагент") = 0 Тогда
			ТекущийКонтрагент  = Объект.Контрагент;
			ТекущийДоговор     = Объект.ДоговорКонтрагента;
			ДоговорКонтрагентаПриИзмененииКлиент();
		ИначеЕсли СтрСравнить(ИмяЭлемента, "ДоговорКонтрагента") = 0 Тогда
			ТекущийДоговор     = Объект.ДоговорКонтрагента;
			ДоговорКонтрагентаПриИзмененииКлиент();
		ИначеЕсли СтрСравнить(ИмяЭлемента, "ДатаДокумента") = 0 Тогда
			ТекущаяДатаДокумента = Объект.Дата;
			ОрганизацияПриИзмененииКлиент();
			ДоговорКонтрагентаПриИзмененииКлиент();
		КонецЕсли;
		
	Иначе
		
		Если СтрСравнить(ИмяЭлемента, "Организация") = 0 Тогда
			Объект.Организация        = ТекущаяОрганизация;
			Объект.ДоговорКонтрагента = ТекущийДоговор;
		ИначеЕсли СтрСравнить(ИмяЭлемента, "Контрагент") = 0 Тогда
			Объект.Контрагент         = ТекущийКонтрагент;
			Объект.ДоговорКонтрагента = ТекущийДоговор;
		ИначеЕсли СтрСравнить(ИмяЭлемента, "ДоговорКонтрагента") = 0 Тогда
			Объект.ДоговорКонтрагента = ТекущийДоговор;
		ИначеЕсли СтрСравнить(ИмяЭлемента, "ДатаДокумента") = 0 Тогда
			Объект.Дата = ТекущаяДатаДокумента;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеДокумента()

	Объект.ОсновныеСредства.Очистить();
		
	Объект.СчетУчетаДолгосрочный           = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка");
	Объект.СчетУчетаКраткосрочный          = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка");
	Объект.СчетУчетаПроцентовДолгосрочный  = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка");
	Объект.СчетУчетаПроцентовКраткосрочный = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка");
	Объект.ОсновнойДолгДолгосрочный  = 0;
	Объект.ОсновнойДолгКраткосрочный = 0;
	Объект.ПроцентыДолгосрочные      = 0;
	Объект.ПроцентыКраткосрочные     = 0;
	Объект.СуммаОбязательств         = 0;
	Объект.ОсновнойДолгДолгосрочныйВзаиморасчеты  = 0;
	Объект.ОсновнойДолгКраткосрочныйВзаиморасчеты = 0;
	Объект.ПроцентыДолгосрочныеВзаиморасчеты      = 0;
	Объект.ПроцентыКраткосрочныеВзаиморасчеты     = 0;
	Объект.СуммаОбязательствВзаиморасчеты         = 0;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВалютуМСФОНаФорме()

	Если ЗначениеЗаполнено(ВалютаМСФО) Тогда
		СтрокаВалютаМежУчета = НСтр("ru = '%1 = %2 %3'");
		КурсВалюты           = ?(КурсМСФО = 0, 1, КурсМСФО/КратностьМСФО);
		СтрокаВалютаМежУчета = СтрШаблон(СтрокаВалютаМежУчета, ВалютаМСФО, КурсВалюты, ВалютаРегламентированногоУчета);
		Элементы.ДекорацияВалютаМСФО.Заголовок = СтрокаВалютаМежУчета;
	Иначе
		Элементы.ДекорацияВалютаМСФО.Заголовок = НСтр("ru = 'НЕ УСТАНОВЛЕНА'");	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВалютуВзаиморасчетовНаФорме()

	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		СтрокаВалютаВзаиморасчетов = НСтр("ru = '%1 = %2 %3'");
		КурсВалюты = ?(КурсВзаиморасчетов = 0, 1, КурсВзаиморасчетов/КратностьВзаиморасчетов);
		СтрокаВалютаВзаиморасчетов = СтрШаблон(СтрокаВалютаВзаиморасчетов, ВалютаВзаиморасчетов, КурсВалюты, ВалютаРегламентированногоУчета);
		Элементы.ДекорацияВалютаВзаиморасчетов.Заголовок = СтрокаВалютаВзаиморасчетов;
	Иначе
		Элементы.ДекорацияВалютаВзаиморасчетов.Заголовок = НСтр("ru = 'НЕ УСТАНОВЛЕНА'");	
	КонецЕсли; 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВалютаМСФОСервер(Организация, ДатаКурса)
	
	ВалютыМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация);
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютыМСФО, ДатаКурса);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаВзаиморасчетовСервер(ДоговорКонтрагента, ДатаКурса)
	
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ДатаКурса);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеДокументаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",        Объект.Дата);
	Запрос.УстановитьПараметр("Организация",          Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",           Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",   Объект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("МоментВремени",        Новый Граница(Объект.Дата, ВидГраницы.Исключая));
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	
	СубконтоОбязательства = Новый Массив;
	СубконтоОбязательства.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	СубконтоОбязательства.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);
	Запрос.УстановитьПараметр("СубконтоОбязательства", СубконтоОбязательства);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФинансовыеНачисленияОбороты.Объект КАК ОсновноеСредство
		|ПОМЕСТИТЬ ОсновныеСредстваВАренде
		|ИЗ
		|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И Контрагент = &Контрагент
		|				И ДоговорКонтрагента = &ДоговорКонтрагента
		|				И Объект ССЫЛКА Справочник.ОсновныеСредства) КАК ФинансовыеНачисленияОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СостоянияОС КАК СостоянияОС
		|		ПО ФинансовыеНачисленияОбороты.Организация = СостоянияОС.Организация
		|			И ФинансовыеНачисленияОбороты.Объект = СостоянияОС.ОсновноеСредство
		|ГДЕ
		|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.бит_му_СостоянияОС.ПринятоКУчету)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПараметрыФинИнструментовСрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетДолгосрочныхОбязательств)
		|				ТОГДА ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
		|		КОНЕЦ) КАК СчетДолгосрочныхОбязательств,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПараметрыФинИнструментовСрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетКраткосрочныхОбязательств)
		|				ТОГДА ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
		|		КОНЕЦ) КАК СчетКраткосрочныхОбязательств,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПараметрыФинИнструментовСрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетДолгосрочныхПроцентов)
		|				ТОГДА ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
		|		КОНЕЦ) КАК СчетДолгосрочныхПроцентов,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПараметрыФинИнструментовСрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровФинИнструментов.СчетКраткосрочныхПроцентов)
		|				ТОГДА ПараметрыФинИнструментовСрезПоследних.ЗначениеПараметра
		|		КОНЕЦ) КАК СчетКраткосрочныхПроцентов
		|ПОМЕСТИТЬ СчетаУчетаОбязательств
		|ИЗ
		|	РегистрСведений.бит_му_ПараметрыФинИнструментов.СрезПоследних(&ДатаДокумента, ДоговорКонтрагента = &ДоговорКонтрагента) КАК ПараметрыФинИнструментовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаУчетаОбязательств.СчетДолгосрочныхОбязательств КАК СчетУчета
		|ПОМЕСТИТЬ СчетаУчетаОбязательствОбщий
		|ИЗ
		|	СчетаУчетаОбязательств КАК СчетаУчетаОбязательств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаУчетаОбязательств.СчетКраткосрочныхОбязательств
		|ИЗ
		|	СчетаУчетаОбязательств КАК СчетаУчетаОбязательств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаУчетаОбязательств.СчетДолгосрочныхПроцентов
		|ИЗ
		|	СчетаУчетаОбязательств КАК СчетаУчетаОбязательств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаУчетаОбязательств.СчетКраткосрочныхПроцентов
		|ИЗ
		|	СчетаУчетаОбязательств КАК СчетаУчетаОбязательств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КурсыВалютСрезПоследних.Курс = 0
		|			ТОГДА 1
		|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
		|	КОНЕЦ КАК Курс,
		|	ВЫБОР
		|		КОГДА КурсыВалютСрезПоследних.Кратность = 0
		|			ТОГДА 1
		|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
		|	КОНЕЦ КАК Кратность
		|ПОМЕСТИТЬ КурсКратностьВалютаВзаиморасчетов
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаВзаиморасчетов) КАК КурсыВалютСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(Общая.СуммаМУОстатокКт) КАК СуммаОбязательств,
		|	СУММА(ВЫБОР
		|			КОГДА Общая.Счет.Валютный
		|				ТОГДА Общая.ВалютнаяСуммаОстатокКт
		|			ИНАЧЕ Общая.СуммаРеглОстатокКт / КурсКратностьВалютаВзаиморасчетов.Курс * КурсКратностьВалютаВзаиморасчетов.Кратность
		|		КОНЕЦ) КАК СуммаОбязательствВзаиморасчеты
		|ПОМЕСТИТЬ Общая
		|ИЗ
		|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаУчетаОбязательствОбщий.СчетУчета КАК СчетУчета
		|				ИЗ
		|					СчетаУчетаОбязательствОбщий КАК СчетаУчетаОбязательствОбщий),
		|			&СубконтоОбязательства,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &ДоговорКонтрагента) КАК Общая,
		|	КурсКратностьВалютаВзаиморасчетов КАК КурсКратностьВалютаВзаиморасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеСредстваВАренде.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	ОсновныеСредстваВАренде КАК ОсновныеСредстваВАренде
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СчетаУчетаОбязательств.СчетДолгосрочныхОбязательств КАК СчетУчетаДолгосрочный,
		|	СчетаУчетаОбязательств.СчетКраткосрочныхОбязательств КАК СчетУчетаКраткосрочный,
		|	СчетаУчетаОбязательств.СчетДолгосрочныхПроцентов КАК СчетУчетаПроцентовДолгосрочный,
		|	СчетаУчетаОбязательств.СчетКраткосрочныхПроцентов КАК СчетУчетаПроцентовКраткосрочный,
		|	ДолгосрочныеОбязательства.СуммаМУОстатокКт КАК ОсновнойДолгДолгосрочный,
		|	ДолгосрочныеПроценты.СуммаМУОстатокКт КАК ПроцентыДолгосрочные,
		|	КраткосрочныеОбязательства.СуммаМУОстатокКт КАК ОсновнойДолгКраткосрочный,
		|	КраткосрочныеПроценты.СуммаМУОстатокКт КАК ПроцентыКраткосрочные,
		|	ВЫБОР
		|		КОГДА СчетаУчетаОбязательств.СчетКраткосрочныхПроцентов.Валютный
		|			ТОГДА КраткосрочныеПроценты.ВалютнаяСуммаОстатокКт
		|		ИНАЧЕ КраткосрочныеПроценты.СуммаРеглОстатокКт / КурсКратностьВалютаВзаиморасчетов.Курс * КурсКратностьВалютаВзаиморасчетов.Кратность
		|	КОНЕЦ КАК ПроцентыКраткосрочныеВзаиморасчеты,
		|	ВЫБОР
		|		КОГДА СчетаУчетаОбязательств.СчетДолгосрочныхПроцентов.Валютный
		|			ТОГДА ДолгосрочныеПроценты.ВалютнаяСуммаОстатокКт
		|		ИНАЧЕ ДолгосрочныеПроценты.СуммаРеглОстатокКт / КурсКратностьВалютаВзаиморасчетов.Курс * КурсКратностьВалютаВзаиморасчетов.Кратность
		|	КОНЕЦ КАК ПроцентыДолгосрочныеВзаиморасчеты,
		|	ВЫБОР
		|		КОГДА СчетаУчетаОбязательств.СчетДолгосрочныхОбязательств.Валютный
		|			ТОГДА ДолгосрочныеОбязательства.ВалютнаяСуммаОстатокКт
		|		ИНАЧЕ ДолгосрочныеОбязательства.СуммаРеглОстатокКт / КурсКратностьВалютаВзаиморасчетов.Курс * КурсКратностьВалютаВзаиморасчетов.Кратность
		|	КОНЕЦ КАК ОсновнойДолгДолгосрочныйВзаиморасчеты,
		|	ВЫБОР
		|		КОГДА СчетаУчетаОбязательств.СчетКраткосрочныхОбязательств.Валютный
		|			ТОГДА КраткосрочныеОбязательства.ВалютнаяСуммаОстатокКт
		|		ИНАЧЕ КраткосрочныеОбязательства.СуммаРеглОстатокКт / КурсКратностьВалютаВзаиморасчетов.Курс * КурсКратностьВалютаВзаиморасчетов.Кратность
		|	КОНЕЦ КАК ОсновнойДолгКраткосрочныйВзаиморасчеты,
		|	Общая.СуммаОбязательств КАК СуммаОбязательств,
		|	Общая.СуммаОбязательствВзаиморасчеты КАК СуммаОбязательствВзаиморасчеты
		|ИЗ
		|	СчетаУчетаОбязательств КАК СчетаУчетаОбязательств,
		|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаУчетаОбязательств.СчетДолгосрочныхОбязательств КАК СчетДолгосрочныхОбязательств
		|				ИЗ
		|					СчетаУчетаОбязательств КАК СчетаУчетаОбязательств),
		|			&СубконтоОбязательства,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &ДоговорКонтрагента) КАК ДолгосрочныеОбязательства,
		|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаУчетаОбязательств.СчетКраткосрочныхОбязательств КАК СчетКраткосрочныхОбязательств
		|				ИЗ
		|					СчетаУчетаОбязательств КАК СчетаУчетаОбязательств),
		|			&СубконтоОбязательства,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &ДоговорКонтрагента) КАК КраткосрочныеОбязательства,
		|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаУчетаОбязательств.СчетДолгосрочныхПроцентов КАК СчетДолгосрочныхПроцентов
		|				ИЗ
		|					СчетаУчетаОбязательств КАК СчетаУчетаОбязательств),
		|			&СубконтоОбязательства,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &ДоговорКонтрагента) КАК ДолгосрочныеПроценты,
		|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
		|			&МоментВремени,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаУчетаОбязательств.СчетКраткосрочныхПроцентов КАК СчетКраткосрочныхПроцентов
		|				ИЗ
		|					СчетаУчетаОбязательств КАК СчетаУчетаОбязательств),
		|			&СубконтоОбязательства,
		|			Организация = &Организация
		|				И Субконто1 = &Контрагент
		|				И Субконто2 = &ДоговорКонтрагента) КАК КраткосрочныеПроценты,
		|	КурсКратностьВалютаВзаиморасчетов КАК КурсКратностьВалютаВзаиморасчетов,
		|	Общая КАК Общая
		|ГДЕ
		|	Общая.СуммаОбязательств > 0";
		
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Объект.ОсновныеСредства.Загрузить(РезультатПакета[5].Выгрузить());
	
	Выборка = РезультатПакета[6].Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоСчетДоходов(НомерСубконто)
	
	бит_БухгалтерияКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконтоСчетДоходов(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСубконтоСчетРасходов(НомерСубконто)
	
	бит_БухгалтерияКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконтоСчетРасходов(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИзВалютыВВалюту(ИмяРеквизитаВзаиморасчеты, ИмяРеквизитаМСФО)
	
	Если КурсВзаиморасчетов = 0
		Или КурсМСФО = 0
		Или КратностьМСФО = 0
		Или КратностьВзаиморасчетов = 0 Тогда
		
		Объект[ИмяРеквизитаМСФО] = 0;
	Иначе
		Объект[ИмяРеквизитаМСФО] = (Объект[ИмяРеквизитаВзаиморасчеты] * КурсВзаиморасчетов * КратностьМСФО) / (КурсМСФО * КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти



