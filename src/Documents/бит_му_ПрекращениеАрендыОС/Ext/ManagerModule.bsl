
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция подготавливает параметры проведения.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.бит_НазначениеСоответствияАналитик - ссылка на документ.
//  Отказ          - Булево - признак обнаружения ошибки и отказа от дальнейших действий.
//
// Возвращаемое значение:
//  Структура - структура параметров проведения.
//
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура(); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Реквизиты.Организация КАК Организация,
	               |	Реквизиты.Контрагент КАК Контрагент,
	               |	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	Реквизиты.СуммаОбязательств КАК СуммаОбязательств,
	               |	Реквизиты.ОсновнойДолгДолгосрочный КАК ОсновнойДолгДолгосрочный,
	               |	Реквизиты.ОсновнойДолгКраткосрочный КАК ОсновнойДолгКраткосрочный,
	               |	Реквизиты.ПроцентыДолгосрочные КАК ПроцентыДолгосрочные,
	               |	Реквизиты.ПроцентыКраткосрочные КАК ПроцентыКраткосрочные,
	               |	Реквизиты.СчетДоходов КАК СчетДоходов,
	               |	Реквизиты.СчетДоходовСубконто1 КАК СчетДоходовСубконто1,
	               |	Реквизиты.СчетДоходовСубконто2 КАК СчетДоходовСубконто2,
	               |	Реквизиты.СчетДоходовСубконто3 КАК СчетДоходовСубконто3,
	               |	Реквизиты.СчетДоходовСубконто4 КАК СчетДоходовСубконто4,
	               |	Реквизиты.СчетРасходов КАК СчетРасходов,
	               |	Реквизиты.СчетРасходовСубконто1 КАК СчетРасходовСубконто1,
	               |	Реквизиты.СчетРасходовСубконто2 КАК СчетРасходовСубконто2,
	               |	Реквизиты.СчетРасходовСубконто3 КАК СчетРасходовСубконто3,
	               |	Реквизиты.СчетРасходовСубконто4 КАК СчетРасходовСубконто4,
	               |	Реквизиты.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	               |	Реквизиты.СчетУчетаКраткосрочный КАК СчетУчетаКраткосрочный,
	               |	Реквизиты.СчетУчетаПроцентовДолгосрочный КАК СчетУчетаПроцентовДолгосрочный,
	               |	Реквизиты.СчетУчетаПроцентовКраткосрочный КАК СчетУчетаПроцентовКраткосрочный,
	               |	Реквизиты.Дата КАК Период,
	               |	Реквизиты.ОсновнойДолгДолгосрочныйВзаиморасчеты КАК ОсновнойДолгДолгосрочныйВзаиморасчеты,
	               |	Реквизиты.ОсновнойДолгКраткосрочныйВзаиморасчеты КАК ОсновнойДолгКраткосрочныйВзаиморасчеты,
	               |	Реквизиты.ПроцентыДолгосрочныеВзаиморасчеты КАК ПроцентыДолгосрочныеВзаиморасчеты,
	               |	Реквизиты.ПроцентыКраткосрочныеВзаиморасчеты КАК ПроцентыКраткосрочныеВзаиморасчеты,
	               |	Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	               |ИЗ
	               |	Документ.бит_му_ПрекращениеАрендыОС КАК Реквизиты
	               |ГДЕ
	               |	Реквизиты.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выгрузить();
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	
	НомераТаблиц = Новый Структура(); 
	ТекстЗапроса = ТекстЗапросаВременныеТаблицы(НомераТаблиц)
	               + ТекстЗапросаДанныеМСФО(НомераТаблиц)
	               + ТекстЗапросаТаблицаФинансовыеНачисления(НомераТаблиц);
				 
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Ссылка",             ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",        Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент",         Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДатаДокумента",      Реквизиты.Период);
	Запрос.УстановитьПараметр("МоментВремени",      Новый Граница(Реквизиты.Период, ВидГраницы.Исключая));
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла; 
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ДокументСсылка, Реквизиты.Период, ВидыКурсов);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	ПараметрыПроведения.Вставить("СтруктураКурсыВалют", СтруктураКурсыВалют);
	
	Возврат ПараметрыПроведения;
	
КонецФункции 

// Формирует движения по регистру бухгалтерии: Журнал проводок (международный).
//
// Параметры:
//  ТаблицаОсновныеСредства	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		         - ТаблицаЗначений	 - таблица реквизитов по документу.
//  СтруктураКурсыВалют		 - Структура     	 - структура курсов.
//  Движения		         - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			         - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияМеждународныйУчет(ТаблицаОсновныеСредства, СпособыРасчетаАмортизации, Реквизиты, СтруктураКурсыВалют, Движения, Отказ) Экспорт

	Если ТаблицаОсновныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// Списание основых средств.
	Для каждого СтрокаТаблицы Из ТаблицаОсновныеСредства Цикл
		
		// Начисление амортизации за месяц выбытия.
		Если СтрокаТаблицы.НачислятьАмортизацию Тогда
			
			// Получим результат расчета амортизации.
			СуммаАмортизацииОбщаяМу       = СтрокаТаблицы.СуммаАмортизацииМу;
			СуммаАмортизацииОбщаяУпр      = 0;
			СуммаАмортизацииОбщаяРегл     = 0;
			СуммаАмортизацииНачисленнаяМу = 0;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("СпособРасчетаАмортизации", СтрокаТаблицы.СпособРасчетаАмортизации);
			МассивСтрокСпособовРасчета = СпособыРасчетаАмортизации.НайтиСтроки(СтруктураОтбора);
			
			Ном = 1;
			КоличествоСпособов = МассивСтрокСпособовРасчета.Количество();
			Для Каждого СтрокаТаблицыСпособов Из МассивСтрокСпособовРасчета Цикл
				
				// Распределяем согласно коэффициентам способа отражения расходов.
				СуммаАмортизацииМу 		      = Окр(СуммаАмортизацииОбщаяМу * СтрокаТаблицыСпособов.Коэффициент, 2);
				СуммаАмортизацииНачисленнаяМу = СуммаАмортизацииНачисленнаяМу + СуммаАмортизацииМу;
				
				// Убираем ошибки округления.
				Если Ном = КоличествоСпособов Тогда
					СуммаАмортизацииМу = СуммаАмортизацииМу + СуммаАмортизацииОбщаяМу - СуммаАмортизацииНачисленнаяМу;
				КонецЕсли;
				
				Проводка = Движения.бит_Дополнительный_2.Добавить();
		
				Проводка.Период      = Реквизиты.Период;
				Проводка.Организация = Реквизиты.Организация;
				Проводка.Содержание  = НСтр("ru = 'Начисление амортизации ОС'");
				
				Проводка.СчетДт = СтрокаТаблицыСпособов.СчетЗатрат;
				бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицыСпособов.Субконто1);
				бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицыСпособов.Субконто2);
				бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицыСпособов.Субконто3);
				бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 4, СтрокаТаблицыСпособов.Субконто4);
								
				Проводка.СчетКт = СтрокаТаблицы.СчетНачисленияАмортизации;
				бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
					
				Проводка.СуммаМУ = СуммаАмортизацииМу;
				
				// расчет суммы упр.
				ПараметрыТекущегоКурса = ПараметрыКурсаВалюты(СтрокаТаблицы.ВалютаМу,
				                                              СтрокаТаблицы.КурсМу,
															  СтрокаТаблицы.КратностьМу);
															  
				ПараметрыНовогоКурсаУпр = ПараметрыКурсаВалюты(СтрокаТаблицы.ВалютаУпр,
				                                               СтрокаТаблицы.КурсУпр,
													    	   СтрокаТаблицы.КратностьУпр);
				
				Проводка.СуммаУпр = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаАмортизацииМу,
				                                                                       ПараметрыТекущегоКурса,
																					   ПараметрыНовогоКурсаУпр);
																					   
				// расчет суммы регл.																	   
				СтруктураРасчет  = СтруктураКурсыВалют["Регл"];		
				
				ПараметрыНовогоКурсаРегл = ПараметрыКурсаВалюты(СтруктураРасчет.Валюта,
				                                                СтруктураРасчет.Курс,
															    СтруктураРасчет.Кратность);
															
				Проводка.СуммаРегл = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаАмортизацииМу,
				                                                                        ПараметрыТекущегоКурса,
																					    ПараметрыНовогоКурсаРегл);
				
				СуммаАмортизацииОбщаяУпр  = СуммаАмортизацииОбщаяУпр + Проводка.СуммаУпр;
				СуммаАмортизацииОбщаяРегл = СуммаАмортизацииОбщаяРегл + Проводка.СуммаРегл;
			
				Ном = Ном + 1;
				
			КонецЦикла;
			
			// Изменим суммовые показатели ОС.
			ОстСтоимостьМУ   = СтрокаТаблицы.СтоимостьМу - Окр(СуммаАмортизацииОбщаяМу, 2);
			ОстСтоимостьРегл = СтрокаТаблицы.СтоимостьРегл - СуммаАмортизацииОбщаяРегл;
			ОстСтоимостьУпр  = СтрокаТаблицы.СтоимостьУпр - СуммаАмортизацииОбщаяУпр;
			
			// Амортизация
			АмортизацияМу   = СтрокаТаблицы.СуммаАмортизацииМу + СуммаАмортизацииОбщаяМу;
			АмортизацияРегл = СтрокаТаблицы.СуммаАмортизацииРегл + СуммаАмортизацииОбщаяРегл;
			АмортизацияУпр  = СтрокаТаблицы.СуммаАмортизацииУпр + СуммаАмортизацииОбщаяУпр;
							
		КонецЕсли;
		
		// списание амортизации.
		Если АмортизацияМу > 0 Тогда
			Проводка = Движения.бит_Дополнительный_2.Добавить();
			
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = НСтр("ru = 'Списание амортизации ОС'");
			
			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
					
			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			
			Проводка.СуммаМУ   = АмортизацияМу;
			Проводка.СуммаУпр  = АмортизацияУпр;
			Проводка.СуммаРегл = АмортизацияРегл;
		КонецЕсли;
		
		Проводка = Движения.бит_Дополнительный_2.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = НСтр("ru = 'Выбытие ОС'");
		
		Проводка.СчетДт = Реквизиты.СчетРасходов;
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты.СчетРасходовСубконто1);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Реквизиты.СчетРасходовСубконто2);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Реквизиты.СчетРасходовСубконто3);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 4, Реквизиты.СчетРасходовСубконто4);
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);
			
		Проводка.СуммаМУ   = ОстСтоимостьМУ;
		Проводка.СуммаРегл = ОстСтоимостьРегл;
		Проводка.СуммаУпр  = ОстСтоимостьУпр;
		
	КонецЦикла;
	
	СтруктураПараметров = СтруктураПараметровПоУмолчанию();
	
	// Списано долгосрочное обязательство.
	СтруктураПараметров.СчетДт              = Реквизиты.СчетУчетаДолгосрочный;
	СтруктураПараметров.СуммаМУ             = Реквизиты.ОсновнойДолгДолгосрочный;
	СтруктураПараметров.СуммаВзаиморасчетов = Реквизиты.ОсновнойДолгДолгосрочныйВзаиморасчеты;
	СтруктураПараметров.Содержание          = НСтр("ru = 'Списание долгосрочных обязательств'");
	СформироватьПроводку(Движения, Реквизиты, СтруктураКурсыВалют, СтруктураПараметров);
		
	// Списано краткосрочное обязательство.
	СтруктураПараметров.СчетДт     = Реквизиты.СчетУчетаКраткосрочный;
	СтруктураПараметров.СуммаМУ    = Реквизиты.ОсновнойДолгКраткосрочный;
	СтруктураПараметров.СуммаВзаиморасчетов    = Реквизиты.ОсновнойДолгКраткосрочныйВзаиморасчеты;
	СтруктураПараметров.Содержание = НСтр("ru = 'Списание кртакосрочных обязательств'");
	СформироватьПроводку(Движения, Реквизиты, СтруктураКурсыВалют, СтруктураПараметров);
	
	// Списаны долгосрочные проценты по обязательству по финансовой аренде.
	СтруктураПараметров.СчетДт     = Реквизиты.СчетУчетаПроцентовДолгосрочный;
	СтруктураПараметров.СуммаМУ    = Реквизиты.ПроцентыДолгосрочные;
	СтруктураПараметров.СуммаВзаиморасчетов    = Реквизиты.ПроцентыДолгосрочныеВзаиморасчеты;
	СтруктураПараметров.Содержание = НСтр("ru = 'Списание процентов (долгосрочные)'");
	СформироватьПроводку(Движения, Реквизиты, СтруктураКурсыВалют, СтруктураПараметров);
	
	// Списаны краткосрочные проценты по обязательству по финансовой аренде.
	СтруктураПараметров.СчетДт     = Реквизиты.СчетУчетаПроцентовКраткосрочный;
	СтруктураПараметров.СуммаМУ    = Реквизиты.ПроцентыКраткосрочные;
	СтруктураПараметров.СуммаВзаиморасчетов    = Реквизиты.ПроцентыКраткосрочныеВзаиморасчеты;
	СтруктураПараметров.Содержание = НСтр("ru = 'Списание процентов (краткосрочные)'");
	СформироватьПроводку(Движения, Реквизиты, СтруктураКурсыВалют, СтруктураПараметров);
	
	Движения.бит_Дополнительный_2.Записывать = Истина;

КонецПроцедуры

// Формирует движения по регистру сведений: Параметры ОС (МСФО).
//
// Параметры:
//  ТаблицаОсновныеСредства	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		         - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		         - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			         - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияПараметрыОС(ТаблицаОсновныеСредства, Реквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОсновныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаОсновныеСредства Цикл
		Запись = Движения.бит_му_ПараметрыОС.Добавить();
		Запись.Период           = Реквизиты.Период;
		Запись.Организация      = Реквизиты.Организация;
		Запись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Запись.Параметр         = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС;
		Запись.ЗначениеПараметра         = Ложь;
	КонецЦикла;
	
	Движения.бит_му_ПараметрыОС.Записывать = Истина;

КонецПроцедуры

// Формирует движения по регистру сведений: События ОС (МСФО).
//
// Параметры:
//  ТаблицаОсновныеСредства	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		         - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		         - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			         - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияСобытияОС(ТаблицаОсновныеСредства, Реквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОсновныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаОсновныеСредства Цикл
		Запись = Движения.бит_му_СобытияОС.Добавить();
		Запись.Период           = Реквизиты.Период;
		Запись.Организация      = Реквизиты.Организация;
		Запись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Запись.Событие          = Перечисления.бит_му_СобытияОС.Выбытие;
	КонецЦикла;
	
	Движения.бит_му_СобытияОС.Записывать = Истина;

КонецПроцедуры

// Формирует движения по регистру сведений: Состояния ОС (МСФО).
//
// Параметры:
//  ТаблицаОсновныеСредства	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		         - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		         - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			         - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияСостояниеОС(ТаблицаОсновныеСредства, Реквизиты, Движения, Отказ) Экспорт

	Если ТаблицаОсновныеСредства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаОсновныеСредства Цикл
		Запись = Движения.бит_му_СостоянияОС.Добавить();
		Запись.Организация      = Реквизиты.Организация;
		Запись.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Запись.Состояние        = Перечисления.бит_му_СостоянияОС.СнятоСУчета;
		Запись.ДатаСостояния    = Реквизиты.Период;
	КонецЦикла;
	
	Движения.бит_му_СостоянияОС.Записывать = Истина;

КонецПроцедуры

// Формирует движения по регистру накопления: Финансовые начисления (МСФО).
//
// Параметры:
//  ТаблицаФинансовыеНачисления	 - ТаблицаЗначений	 - получаемая ранее.
//  Реквизиты		             - ТаблицаЗначений	 - таблица реквизитов по документу.
//  Движения		             - КоллекцияДвижений - Ссылка на движения документа.
//  Отказ			             - Булево			 - флаг отказа от проведения.
//
Процедура СформироватьДвиженияФинансовыеНачисления(ТаблицаФинансовыеНачисления, Реквизиты, Движения, Отказ) Экспорт

	Если ТаблицаФинансовыеНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.бит_му_ФинансовыеНачисления.Загрузить(ТаблицаФинансовыеНачисления);
	
	Движения.бит_му_ФинансовыеНачисления.Записывать = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураПараметровПоУмолчанию()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СчетДт",              ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка());
	СтруктураПараметров.Вставить("СуммаМУ",             0);
	СтруктураПараметров.Вставить("СуммаВзаиморасчетов", 0);
	СтруктураПараметров.Вставить("Содержание",          "");

	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПараметрыКурсаВалюты(Валюта, Курс = 1, Кратность = 1)

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Валюта",    Валюта);
	СтруктураПараметров.Вставить("Курс",      Курс);
	СтруктураПараметров.Вставить("Кратность", Кратность);

	Возврат СтруктураПараметров;
	
КонецФункции

Процедура СформироватьПроводку(Движения, Реквизиты, СтруктураКурсыВалют, СтруктураПараметров)

	Если СтруктураПараметров.СуммаМУ > 0 Тогда
		Проводка = Движения.бит_Дополнительный_2.Добавить();
			
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтруктураПараметров.Содержание;
		
		// списание амортизации
		Проводка.СчетДт = СтруктураПараметров.СчетДт;
		
		СвойстваСчетаДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
				
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтруктураПараметров.СуммаВзаиморасчетов;
		КонецЕсли;
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДоговорыКонтрагентов", Реквизиты.ДоговорКонтрагента);
		
		Проводка.СчетКт = Реквизиты.СчетДоходов;
		
		СвойстваСчетаКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
				
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтруктураПараметров.СуммаВзаиморасчетов;
		КонецЕсли;
		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.СчетДоходовСубконто1);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Реквизиты.СчетДоходовСубконто2);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, Реквизиты.СчетДоходовСубконто3);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 4, Реквизиты.СчетДоходовСубконто4);
		
		Проводка.СуммаМУ = СтруктураПараметров.СуммаМУ;
		ВыполнитьВалютныеПересчеты(Проводка, СтруктураКурсыВалют);
	КонецЕсли; 

КонецПроцедуры

Процедура ВыполнитьВалютныеПересчеты(Проводка, СтруктураКурсыВалют)
	
	// вычисление суммы регл.
	СтруктураБаза    = СтруктураКурсыВалют["МУ"];
	СтруктураРасчет  = СтруктураКурсыВалют["Регл"];
	Проводка.СуммаРегл = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Проводка.СуммаМУ,
	                                                                         СтруктураБаза.Валюта,
																			 СтруктураРасчет.Валюта,
																			 СтруктураБаза.Курс,
																			 СтруктураРасчет.Курс,
																			 СтруктураБаза.Кратность,
																			 СтруктураРасчет.Кратность);

	// вычисление суммы упр.
	СтруктураБаза   = СтруктураКурсыВалют["МУ"];
	СтруктураРасчет = СтруктураКурсыВалют["Упр"];
	Проводка.СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Проводка.СуммаМУ,
	                                                                        СтруктураБаза.Валюта,
																			СтруктураРасчет.Валюта,
																			СтруктураБаза.Курс,
																			СтруктураРасчет.Курс,
																			СтруктураБаза.Кратность,
																			СтруктураРасчет.Кратность);
КонецПроцедуры

Функция ТекстЗапросаВременныеТаблицы(НомераТаблиц)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаОсновныеСредства", НомераТаблиц.Количество());	
	НомераТаблиц.Вставить("ВременнаяТаблицаПараметрыОС", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрекращениеАрендыОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ
	|	Документ.бит_му_ПрекращениеАрендыОС.ОсновныеСредства КАК ПрекращениеАрендыОсновныеСредства
	|ГДЕ
	|	ПрекращениеАрендыОсновныеСредства.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетУчета_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СчетУчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетНачисленияАмортизации_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СчетНачисленияАмортизации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.СчетСниженияСтоимости_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СчетСниженияСтоимости,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.СпособОтраженияРасходовПоАмортизации_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК СпособРасчетаАмортизации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.НачислятьАмортизацию_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК НачислятьАмортизацию,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.ВалютаМУ_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК ВалютаМу,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.ВалютаУпр_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК ВалютаУпр,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.КратностьМУ_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК КратностьМу,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.КратностьУпр_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК КратностьУпр,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.КурсМУ_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК КурсМу,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыОССрезПоследних.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_му_ВидыПараметровВНА.КурсУпр_ОС)
	|				ТОГДА ПараметрыОССрезПоследних.ЗначениеПараметра
	|		КОНЕЦ) КАК КурсУпр
	|ПОМЕСТИТЬ ПараметрыОС
	|ИЗ
	|	ОсновныеСредства КАК ОсновныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_ПараметрыОС.СрезПоследних(
	|				&МоментВремени,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
	|						ИЗ
	|							ОсновныеСредства КАК ОсновныеСредства)) КАК ПараметрыОССрезПоследних
	|		ПО ОсновныеСредства.ОсновноеСредство = ПараметрыОССрезПоследних.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеСредства.ОсновноеСредство";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаДанныеМСФО(НомераТаблиц)

	НомераТаблиц.Вставить("ДанныеМСФО", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СпособыРасчетаАмортизации", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыОС.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(СтоимостьОС.СуммаМУОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаМУОстатокКт, 0) + ЕСТЬNULL(ОбесценениеОС.СуммаМУОстатокКт, 0) КАК СтоимостьМу,
	|	ЕСТЬNULL(СтоимостьОС.СуммаРеглОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаРеглОстатокКт, 0) - ЕСТЬNULL(ОбесценениеОС.СуммаРеглОстатокКт, 0) КАК СтоимостьРегл,
	|	ЕСТЬNULL(СтоимостьОС.СуммаУпрОстатокДт, 0) - ЕСТЬNULL(АмортизацияОС.СуммаУпрОстатокКт, 0) - ЕСТЬNULL(ОбесценениеОС.СуммаУпрОстатокКт, 0) КАК СтоимостьУпр,
	|	ПараметрыОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(АмортизацияОС.СуммаМУОстатокКт, 0) КАК СуммаАмортизацииМу,
	|	ЕСТЬNULL(АмортизацияОС.СуммаРеглОстатокКт, 0) КАК СуммаАмортизацииРегл,
	|	ЕСТЬNULL(АмортизацияОС.СуммаУпрОстатокКт, 0) КАК СуммаАмортизацииУпр,
	|	ПараметрыОС.СпособРасчетаАмортизации КАК СпособРасчетаАмортизации,
	|	ПараметрыОС.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ПараметрыОС.ВалютаМу КАК ВалютаМу,
	|	ПараметрыОС.ВалютаУпр КАК ВалютаУпр,
	|	ПараметрыОС.КратностьМу КАК КратностьМу,
	|	ПараметрыОС.КратностьУпр КАК КратностьУпр,
	|	ПараметрыОС.КурсМу КАК КурсМу,
	|	ПараметрыОС.КурсУпр КАК КурсУпр
	|ИЗ
	|	ПараметрыОС КАК ПараметрыОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ПараметрыОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|					ИЗ
	|						ПараметрыОС КАК ПараметрыОС),
	|				&Субконто,
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
	|						ИЗ
	|							ОсновныеСредства КАК ОсновныеСредства)) КАК АмортизацияОС
	|		ПО ПараметрыОС.ОсновноеСредство = АмортизацияОС.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ПараметрыОС.СчетСниженияСтоимости КАК СчетСниженияСтоимости
	|					ИЗ
	|						ПараметрыОС КАК ПараметрыОС),
	|				&Субконто,
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
	|						ИЗ
	|							ОсновныеСредства)) КАК ОбесценениеОС
	|		ПО ПараметрыОС.ОсновноеСредство = ОбесценениеОС.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|				&МоментВремени,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ПараметрыОС.СчетУчета КАК СчетУчета
	|					ИЗ
	|						ПараметрыОС КАК ПараметрыОС),
	|				&Субконто,
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
	|						ИЗ
	|							ОсновныеСредства)) КАК СтоимостьОС
	|		ПО ПараметрыОС.ОсновноеСредство = СтоимостьОС.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатрат КАК СчетЗатрат,
	|	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто1 КАК Субконто1,
	|	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто2 КАК Субконто2,
	|	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто3 КАК Субконто3,
	|	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Субконто4 КАК Субконто4,
	|	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Коэффициент КАК Коэффициент,
	|	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка КАК СпособРасчетаАмортизации
	|ИЗ
	|	Справочник.бит_му_СпособыОтраженияРасходовПоАмортизации.Способы КАК бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	бит_му_СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка В
	|			(ВЫБРАТЬ
	|				ПараметрыОС.СпособРасчетаАмортизации КАК СпособРасчетаАмортизации
	|			ИЗ
	|				ПараметрыОС КАК ПараметрыОС)";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаФинансовыеНачисления(НомераТаблиц)

	НомераТаблиц.Вставить("ТаблицаФинансовыеНачисления", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ФинансовыеНачисления.РасходДоход КАК РасходДоход,
	|	ФинансовыеНачисления.ВидСтавки КАК ВидСтавки,
	|	ФинансовыеНачисления.ВидИсточникаЗадолженности КАК ВидИсточникаЗадолженности,
	|	ФинансовыеНачисления.Организация КАК Организация,
	|	ФинансовыеНачисления.Контрагент КАК Контрагент,
	|	ФинансовыеНачисления.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ФинансовыеНачисления.Объект КАК Объект,
	|	-ФинансовыеНачисления.СуммаРеглОборот КАК СуммаРегл,
	|	-ФинансовыеНачисления.СуммаВзаиморасчетыОборот КАК СуммаВзаиморасчеты,
	|	-ФинансовыеНачисления.ПогашеннаяСуммаФинансовыхПроцентовРеглОборот КАК ПогашеннаяСуммаФинансовыхПроцентовРегл,
	|	-ФинансовыеНачисления.ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчетыОборот КАК ПогашеннаяСуммаФинансовыхПроцентовВзаиморасчеты,
	|	-ФинансовыеНачисления.НачисленнаяСуммаФинансовыхПроцентовРеглОборот КАК НачисленнаяСуммаФинансовыхПроцентовРегл,
	|	-ФинансовыеНачисления.НачисленнаяСуммаФинансовыхПроцентовВзаиморасчетыОборот КАК НачисленнаяСуммаФинансовыхПроцентовВзаиморасчеты,
	|	-ФинансовыеНачисления.СуммаПлатежаРеглОборот КАК СуммаПлатежаРегл,
	|	-ФинансовыеНачисления.СуммаПлатежаВзаиморасчетыОборот КАК СуммаПлатежаВзаиморасчеты,
	|	ИСТИНА КАК Сторно,
	|	ФинансовыеНачисления.Период КАК Период
	|ИЗ
	|	РегистрНакопления.бит_му_ФинансовыеНачисления.Обороты(
	|			&ДатаДокумента,
	|			,
	|			Запись,
	|			Организация = &Организация
	|				И ДоговорКонтрагента = &ДоговорКонтрагента
	|				И Контрагент = &Контрагент
	|				И Объект В
	|					(ВЫБРАТЬ
	|						ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство
	|					ИЗ
	|						ОсновныеСредства КАК ОсновныеСредства)) КАК ФинансовыеНачисления";
	
	Возврат ТекстЗапроса + бит_ОбщегоНазначения.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецОбласти

#КонецЕсли
