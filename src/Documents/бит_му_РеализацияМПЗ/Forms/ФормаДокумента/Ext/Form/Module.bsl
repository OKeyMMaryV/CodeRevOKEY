
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений();
	
	// Оформдение субконто счетов доходов и расходов.
	фКоличествоСубконтоМУ = 1;
	ОформитьСубконтоСчетовМСФО();
	
	Если Параметры.Ключ.Пустая() Тогда
		УстановитьСостояниеДокумента();
	КонецЕсли;
	
	бит_РаботаСДиалогамиСервер.УстановитьФормуВыбораДоговораКонтрагентаУппКа(Элементы);
	
	УстановитьПараметрыВыбораДляСчетов();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// Установка параметров выбора для Договоров.
	бит_РаботаСДиалогамиСервер.УстановитьСвязиПараметровВыбораДоговора(Элементы.ДоговорКонтрагента, "Объект.Контрагент");

КонецПроцедуры // ПриСозданииНаСервере()
 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВалютаДокумента");
	мКэшРеквизитовФормы.Вставить("КурсДокумента");
	мКэшРеквизитовФормы.Вставить("КратностьДокумента");
	мКэшРеквизитовФормы.Вставить("Склад");
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьНастройкиОформленияПоСчету();	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "Проведениебит_му_РеализацияМПЗ";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВалютаДокументаЗаполнена = ?(ЗначениеЗаполнено(Объект.ВалютаДокумента)
								,Истина
								,Ложь);
	
	ИзменениеОрганизацииСервер();
	
	Если Не ВалютаДокументаЗаполнена
		И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");
		
	КонецЕсли;
	
	// Заполним валюту МСФО.
	ЗаполнитьВалютуМСФО();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент)
	
КонецПроцедуры
 
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменениеКонтрагента();
	
	УстановитьПараметрыВыбораДоговораКонтрагента(Элементы.ДоговорКонтрагента, Объект.Контрагент)

КонецПроцедуры
 
&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент);
	
	ИзменениеВалютыКлиент(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораДоговораКлиент(Элемент, Объект.ДоговорКонтрагента, Объект.Контрагент, СтандартнаяОбработка);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ИзменениеВалютыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	СформироватьСписокДоступныхВалют();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		
		СтрокиТчПустойСклад = Объект.Товары.НайтиСтроки(Новый Структура("Склад", фКэшЗначений.ПустойСклад));
		
		Если СтрокиТчПустойСклад.Количество() > 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Заполнить пустые значения склада в табличных частях?'");
			
			ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСкладПриИзменении", ЭтотОбъект);

			ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);		
			
		Иначе

			Если ЗначениеЗаполнено(мКэшРеквизитовФормы.Склад) И Объект.Товары.НайтиСтроки(Новый Структура("Склад", мКэшРеквизитовФормы.Склад)).Количество() > 0 Тогда
				ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Нстр("ru = 'Заполнить в табличных частях значение склада ""%1%"" на ""%2%""?'")
							, мКэшРеквизитовФормы.Склад, Объект.Склад);
							
				ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСкладПриИзменении", ЭтотОбъект,мКэшРеквизитовФормы.Склад);
				
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
					
			Иначе
				
				ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(Нстр("ru = 'Заменить в табличных частях все значения склада на ""%1%""?'")
							, Объект.Склад);
							
				ОповещениеВопрос = Новый ОписаниеОповещения("ВопросСкладПриИзменении", ЭтотОбъект, Истина);
				
				ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		ДобавитьВКэш("Склад");

	КонецЕсли;
		
КонецПроцедуры // СкладПриИзменении()

// Обработка оповещения вопроса пользователю.
// 
// Параметры:
//  Ответ    - Строка.
//  Параметр - Булево, СправочникСсылка.
// 
&НаКлиенте
Процедура ВопросСкладПриИзменении(Ответ, Параметр) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда

		Если ТипЗнч(Параметр) = Тип("Булево") Тогда
			ИзменениеСкладаШапкиСервер(, Истина);
		ИначеЕсли ТипЗнч(Параметр) = Тип("Неопределено") Тогда
	        ИзменениеСкладаШапкиСервер();
		Иначе
			ИзменениеСкладаШапкиСервер(, , мКэшРеквизитовФормы.Склад);
		КонецЕсли;
		
	КонецЕсли;

	ДобавитьВКэш("Склад");

КонецПроцедуры // ВопросСкладПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
	 	Отказ = Истина;
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Склад = Объект.Склад;
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НоваяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры // ТоварыПередНачаломДобавления()
 
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор(), Истина);
		
КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьСуммуВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	бит_ОбщегоНазначенияКлиентСервер.РассчитатьЦенуВСтрокеТЧ(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовРасходовПриИзменении(Элемент)
	
	Идентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменениеСчетаТабличноеПоле(Идентификатор, СтрЗаменить(Элемент.Имя, "ТоварыСчет", ""));
			
КонецПроцедуры // ТоварыСчетДоходовРасходовПриИзменении()

&НаКлиенте
Процедура ТоварыСубконтоДоходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ИмяСубконто   = "СубконтоДоходов_";
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, Элемент.Имя);		
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // ТоварыСубконтоДоходовНачалоВыбора()
 
&НаКлиенте
Процедура ТоварыСубконтоРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ИмяСубконто   = "СубконтоРасходов_";
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, Элемент.Имя);		
	НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, ТекущиеДанные, ЗначениеСубконто, ИмяСубконто);
	
КонецПроцедуры // ТоварыСубконтоРасходовНачалоВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыОбработчикиКоманд

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПустыеЗначенияПоОсновномуСкладу(Команда)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ИзменениеСкладаШапкиСервер(Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПустыеЗначенияПоОсновномуСкладу()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеСлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = бит_ОбщегоНазначения.СостояниеДокумента(Объект);
	
КонецПроцедуры

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ТоварыСчетДоходов);
	МассивЭлементов.Добавить(Элементы.ТоварыСчетРасходов);
	МассивЭлементов.Добавить(Элементы.СчетВзаиморасчетов);

	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	// Адаптация для ERP. Начало. 18.03.2014{{
	КэшПеречисления.Вставить("ВидыДоговоровКонтрагентов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления[бит_ОбщегоНазначения.ПолучитьИмяПеречисленияВидыДоговоровКонтрагентов()]));
	// Адаптация для ERP. Конец. 18.03.2014}}
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	// Запишем параметр для формирования заголовка.
	фКэшЗначений.Вставить("ПредставлениеОбъекта", Объект.Ссылка.Метаданные().ПредставлениеОбъекта);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	// Сформируем список доступных валют.
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
	фКэшЗначений.Вставить("ПустойСклад", Справочники.Склады.ПустаяСсылка());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура получает и записывает валюту международного учета в кэш значений.
// 
// Параметры:
//  КэшированныеЗначения - Струкрута.
// 
&НаСервере 
Процедура ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(КэшированныеЗначения)
	
	// Получим валюту международного учета.
	ВалютаМСФО = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Объект.Организация);
	
	КэшированныеЗначения.Вставить("ВалютаМСФО", ВалютаМСФО);
	
КонецПроцедуры // ПолучитьИЗаписатьВалютуМСФОВКэшЗначений()

// Процедура обрабатывает изменение валюты документа.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()
	                 
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	ДокументОбъект.ИзменениеВалютыМодуль();
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	  
КонецПроцедуры // ИзменениеВалютыСервер()

// Функция получает тип объекта.
// 
// Параметры:
//  ОбъектСсылка - ДокументСсылка.
// 
// Возвращаемое значение:
//  ТипОбъекта - Тип.
// 
&НаСервереБезКонтекста 
Функция ПолучитьТипОбъекта(ОбъектСсылка)
	
	ИмяОбъекта = ОбъектСсылка.Метаданные().Имя;
	ТипОбъекта = Тип("ДокументОбъект." + ИмяОбъекта);
	
	Возврат ТипОбъекта;
	
КонецФункции // ПолучитьТипОбъекта()

// Процедура выполняет действия необходимые при изменении Организации. Сервер.
// 
&НаСервере
Процедура ИзменениеОрганизацииСервер()
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, ПолучитьТипОбъекта(Объект.Ссылка));
	
	// Выполняем общие действия для всех документов при изменении Организации.
	бит_ОбщегоНазначения.ПриИзмененииЗначенияОрганизации(ДокументОбъект, бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	// Получим и запишем валюту МСФО в кэш значений.
	ПолучитьИЗаписатьВалютуМСФОВКэшЗначений(фКэшЗначений);
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) 
		И ЗначениеЗаполнено(фКэшЗначений.ВалютаМСФО) Тогда
		
		Объект.ВалютаДокумента = фКэшЗначений.ВалютаМСФО;
		
		ИзменениеВалютыСервер();
		
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
	
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТаблицы.ПолучитьИдентификатор());
	
	КонецЦикла; 
	
	
КонецПроцедуры // ИзменениеОрганизацииСервер()

// Процедура обрабатывает изменение контрагента. 
// 
&НаСервере
Процедура ИзменениеКонтрагента()
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	бит_МеханизмыТиповых.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента
														  ,Объект.Контрагент
														  ,Объект.Организация
														  ,фСписокВидовДоговоров);	
	
	// Могли поменять договор.
	ИзменениеДоговораСервер(Объект.ДоговорКонтрагента, Объект.Контрагент);
	
КонецПроцедуры // ИзменениеКонтрагента()

// Процедура обрабатывает изменение договора. Сервер.
// 
// Параметры:
//  Договор				- СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаСервере 
Процедура ИзменениеДоговораСервер(Договор, Контрагент_Владелец)
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Договор.Организация;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		Контрагент_Владелец = бит_ОбщегоНазначения.ОпределитьКонтрагентаПоДоговору(Договор);
	КонецЕсли; 
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();	
	СписокВалют = Новый СписокЗначений;
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);	
	Объект.ВалютаДокумента   = ?(Объект.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
								    ,ВалютаРегламентированногоУчета
								    ,Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
	
	УстановитьСчетаРасчетов();
	
КонецПроцедуры // ИзменениеДоговораСервер()

// Процедура устанавливает счета расчетов значениями из регистра.
// 
&НаСервере
Процедура УстановитьСчетаРасчетов()
	
	СтруктураСчетов = бит_му_ОбщегоНазначения.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетВзаиморасчетов = СтруктураСчетов.СчетКраткосрочныхОбязательств;
	
КонецПроцедуры

// Процедура обрабатывает изменение склада шапки.
// 
// Параметры:
//  ЗаполнятьПустыеСчетаУчета - Булево.
//  ЗаменятьВсе               - Булево.
// 
&НаСервере
Процедура ИзменениеСкладаШапкиСервер(ЗаполнятьПустыеСчетаУчета = Ложь, ЗаменятьВсе = Ложь, ЗаменяемыйСклад = Неопределено)
	
	Для каждого СтрТч Из Объект.Товары Цикл
		
		Если ЗаменятьВсе Или (ЗаменяемыйСклад <> Неопределено И СтрТч.Склад = ЗаменяемыйСклад) Тогда
			СтрТч.Склад 	= Объект.Склад;		
		ИначеЕсли Не ЗначениеЗаполнено(СтрТч.Склад) Тогда
			СтрТч.Склад 	= Объект.Склад;		
		КонецЕсли;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрТч.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры // ИзменениеСкладаШапкиСервер()

// Заполняет счета в текущей строке табличной части.
// 
// Параметры:
// 	Ид 						  - Число.
// 	ЗаполнятьЕдиницуИзмерения - Булево.
// 
&НаСервере
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(Ид, ЗаполнятьЕдиницуИзмерения = Ложь)

	СтрокаТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(Ид);
	СтруктураПараметров = Новый Структура("Организация, Номенклатура, Склад",
										  Объект.Организация,
										  СтрокаТабличнойЧасти.Номенклатура,
										  ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад), СтрокаТабличнойЧасти.Склад, Объект.Склад));
										  
	СчетаУчета     					= бит_му_МПЗ.ПолучитьСчетаУчетаНоменклатуры(СтруктураПараметров);	
    СтрокаТабличнойЧасти.СчетУчета 	= СчетаУчета.СчетУчета;
	
	Если ЗаполнятьЕдиницуИзмерения Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СчетаУчета.БазоваяЕдиницаИзмерения;
	КонецЕсли;		
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

#КонецОбласти

#Область ОформлениеСубконтоСчетовДоходовИРасходовНаСервере

// Функция подсчитывает количество доступных субконто в строке тч.
// 
// Параметры:
//  СтрокаТаблицы  		   - ДанныеФормыЭлементКоллекции.
//  ИмяСчета  			   - Строка.
//  
&НаСервере
Процедура УстановитьПараметрыОформленияПоСчету(СтрокаТаблицы, ИмяСчета, Постфикс)

	ТекущийСчет = СтрокаТаблицы[ИмяСчета];
	Если ТекущийСчет <> Неопределено Тогда
        
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущийСчет);
	
		// Количество доступных субконто.
		СтрокаТаблицы["КоличествоДоступныхСубконто" + Постфикс] = СвСч.КоличествоСубконто;		
				
	КонецЕсли; 	
 	
КонецПроцедуры // УстановитьПараметрыОформленияПоСчету()

// Процедура определяет оформление субконто доходов и расходов.
// 
// Параметры:
//  ИмяСчета.
// 
&НаСервере
Процедура ОформитьСубконтоПоСчетуМСФО(ИмяСчета)
	
	Постфикс 			   = СтрЗаменить(ИмяСчета, "Счет", "");
	ИмяКоличестваДоступных = "КоличествоДоступныхСубконто" + Постфикс;
	ИмяСубконто			   = "Субконто" + Постфикс + "_";
	
	// Установка параметров оформления по счету.
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл 		
		УстановитьПараметрыОформленияПоСчету(СтрокаТаблицы, ИмяСчета, Постфикс);
		Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяСчета]) Тогда
			НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(СтрокаТаблицы[ИмяСчета], фКоличествоСубконтоМУ);									  
	    	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(СтрокаТаблицы, НастройкиСубконто, ИмяСубконто);
		КонецЕсли;
	КонецЦикла;
		
	// Настройки оформления для полей субконто.
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление
															, "Товары"
															, ИмяСубконто
															, ИмяКоличестваДоступных
															, фКоличествоСубконтоМУ);
	
КонецПроцедуры // ОформитьСубконтоПоСчетуМСФО()
														
// Процедура определяет оформление субконто доходов и расходов.
// 
&НаСервере
Процедура ОформитьСубконтоСчетовМСФО()

	бит_РаботаСДиалогамиСервер.УдалитьЭлементыОформленияПоПредставлению("Оформление субконто таблицы" , УсловноеОформление);
	
	ОформитьСубконтоПоСчетуМСФО("СчетДоходов");
	ОформитьСубконтоПоСчетуМСФО("СчетРасходов");
	
КонецПроцедуры // ОформитьСубконтоСчетовМСФО()

// Процедура восстанавливает настройки субконто в зависимости от счетов доходов и расходов.
// 
&НаСервере
Процедура ВосстановитьНастройкиОформленияПоСчету()

	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		УстановитьПараметрыОформленияПоСчету(СтрокаТаблицы, "СчетДоходов", "Доходов");
		УстановитьПараметрыОформленияПоСчету(СтрокаТаблицы, "СчетРасходов", "Расходов");
		
	КонецЦикла;	

КонецПроцедуры // ВосстановитьНастройкиОформленияПоСчету()

// Процедура обрабатывает изменение счета в табличном поле.
// 
// Параметры:
//  Идентификатор - Число - Индентификатор строки табличной части.
//  ДтКт	      - Строка.
// 
&НаСервере
Процедура ИзменениеСчетаТабличноеПоле(Идентификатор, Постфикс)
	
	ИмяСчета 	= "Счет" + Постфикс;
	ИмяСубконто = "Субконто" + Постфикс + "_";
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	
	// Настройки субконто.
	Если ЗначениеЗаполнено(ТекущиеДанные[ИмяСчета]) Тогда
		НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущиеДанные[ИмяСчета], фКоличествоСубконтоМУ);									  
    	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущиеДанные, НастройкиСубконто, ИмяСубконто);
	КонецЕсли;
	
	УстановитьПараметрыОформленияПоСчету(ТекущиеДанные, ИмяСчета, Постфикс);	
		
КонецПроцедуры // ИзменениеСчетаТабличноеПоле()

// Процедура формирует список доступных валют.
// 
&НаСервере
Процедура СформироватьСписокДоступныхВалют()
	
	СписокВалют = Новый СписокЗначений;
	
	СписокВалют = бит_Казначейство.СформироватьСписокДоступныхВалют(Объект);
	
	Элементы.ВалютаДокумента.СписокВыбора.ЗагрузитьЗначения(СписокВалют.ВыгрузитьЗначения());
		
КонецПроцедуры
 
#КонецОбласти

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанавливает отборы для договора контрагента.
// 
// Параметры:
//  Элемент    			- ПолеФормы. Для которого необходимо установить параметры выбора.
//  Контрагент_Владелец - СправочникСсылка.Контрагенты.
// 
&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец)

	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент_Владелец) Тогда
		ИмяРеквизитаКонтрагента = бит_ОбщегоНазначения.ОпределитьИмяРеквизитаКонтрагента();
		СтруктураОтбора.Вставить(ИмяРеквизитаКонтрагента, Контрагент_Владелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если НЕ бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		Если фСписокВидовДоговоров.Количество() > 0 Тогда
			СтруктураОтбора.Вставить("ВидДоговора", фСписокВидовДоговоров);
		КонецЕсли;
	КонецЕсли;
	
	// Установим параметры выбора.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураОтбора);
	
КонецПроцедуры // УстановитьПараметрыВыбораДоговораКонтрагента()

// Процедура обрабатывает изменение валюты документа. Клиент.
// 
&НаКлиенте
Процедура ИзменениеВалютыКлиент() 
	
	ИзменениеВалютыСервер();
	
	// Спросим, а не пересчитать ли суммы.
	Если Не мКэшРеквизитовФормы.ВалютаДокумента = Объект.ВалютаДокумента 
		И Не Объект.СуммаДокумента = 0 Тогда
						  
		ТекстВопроса = НСтр("ru = 'Изменилась валюта документа. Пересчитать суммы документа?'");
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросИзменениеВалютыКлиент", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ДобавитьВКэш("ВалютаДокумента");
		ДобавитьВКэш("КратностьДокумента");
		ДобавитьВКэш("КурсДокумента");

	КонецЕсли;
	
КонецПроцедуры // ИзменениеВалютыКлиент()

// ОБработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросИзменениеВалютыКлиент(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
			
		ТабличнаяЧасть = Объект.Товары;
		
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			
			СтрокаТаблицы.Цена = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена
																				 ,мКэшРеквизитовФормы.ВалютаДокумента
																				 ,Объект.ВалютаДокумента
																				 ,мКэшРеквизитовФормы.КурсДокумента
																				 ,Объект.КурсДокумента
																				 ,мКэшРеквизитовФормы.КратностьДокумента
																				 ,Объект.КратностьДокумента);
			
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			
		КонецЦикла;
		
		// Подсчитаем и запишем сумму документа.
		СуммаДокумента = Объект.Товары.Итог("Сумма");

	КонецЕсли;

	ДобавитьВКэш("ВалютаДокумента");
	ДобавитьВКэш("КратностьДокумента");
	ДобавитьВКэш("КурсДокумента");

КонецПроцедуры // ВопросИзменениеВалютыКлиент()

// Процедура выполняет действия необходимые при начале выбора Договора. Клиент.
// 
// Параметры:
//  Элемент    			 - ПолеФормы. Для которого необходимо установить параметры выбора.
//  Договор				 - СправочникСсылка.ДоговорыКонтрагентов.
//  Контрагент_Владелец  - СправочникСсылка.Контрагенты.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте 
Процедура НачалоВыбораДоговораКлиент(Элемент, Договор, Контрагент_Владелец, СтандартнаяОбработка)
	
	// Установим отбор для договора контрагента.
	УстановитьПараметрыВыбораДоговораКонтрагента(Элемент, Контрагент_Владелец);
	
КонецПроцедуры // НачалоВыбораДоговораКлиент()

#КонецОбласти

#Область ОформлениеСубконтоСчетовДоходовИРасходов

// Функция получает значение субконто в табличном поле исходя из имени элемента и имени табличного поля.
// Значение получается исходя из предположения что ИмяЭлементаУправления = ИмяТабличногоПоля+ИмяРеквизита.
// 
// Параметры:
//  ТекущиеДанные      - ДанныеФормыКоллекция.
//  ИмяЭлемента        - Строка.
// 
// Возвращаемое значение:
//  ЗначениеСубконто   - Произвольный.
// 
&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущиеДанные, ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента, "Товары", "");
		ЗначениеСубконто  = ТекущиеДанные[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

// Процедура обрабатывает начало выбора реквизита.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  СтруктураПараметров  - Структура.
//  ЗначениеРеквизита    - Произвольный.
// 
&НаКлиенте
Процедура НачалоВыбораРеквизитаЗаписи(Элемент, СтандартнаяОбработка, СтруктураПараметров, ЗначениеРеквизита)
	
	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		
		// Установим параметры выбора субконто.
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);

		
	Иначе
		
		// В обычном приложении открываем формы с отборами.
		бит_БухгалтерияКлиентСервер.ОбработатьВыборСубконтоОбычныеФормы(Элемент
					                                                      , СтандартнаяОбработка
																		  , ЗначениеРеквизита
																		  , Объект.Организация
																		  , СтруктураПараметров);
		
	КонецЕсли; 
	
КонецПроцедуры // НачалоВыбораРеквизитаЗаписи()

// Процедура обрабатывает начало выбора субконто.
// 
// Параметры:
//  Элемент              - ЭлементУправления.
//  СтандартнаяОбработка - Булево.
//  Контейнер            - Произвольный.
//  ЗначениеСубконто     - Произвольный.
//  ИмяСубконто			 - Строка.
// 
&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, СтандартнаяОбработка, Контейнер, ЗначениеСубконто, ИмяСубконто)
	
	ТипЭлемента = ТипЗнч(ЗначениеСубконто);																					  
	// Если ТипЭлемента = Тип("СправочникСсылка.Организации") Тогда
	// 	СтандартнаяОбработка = Ложь;
	// 	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	// 	ТекущиеДанные[СтрЗаменить(Элемент.Имя, "Товары", "")] = Объект.Организация;
	// 	Возврат;
	// ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда
	// 	СтандартнаяОбработка = Ложь;
	// 	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	// 	ТекущиеДанные[СтрЗаменить(Элемент.Имя, "Товары", "")] = Объект.Контрагент;
	// 	Возврат;
	// ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	// 	СтандартнаяОбработка = Ложь;
	// 	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	// 	ТекущиеДанные[СтрЗаменить(Элемент.Имя, "Товары", "")] = Объект.ДоговорКонтрагента;
	// 	Возврат;
	// ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.Склады") Тогда
	// 	СтандартнаяОбработка = Ложь;
	// 	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	// 	ТекущиеДанные[СтрЗаменить(Элемент.Имя, "Товары", "")] = Объект.Склад;
	// 	Возврат;
	// КонецЕсли;
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,ИмяСубконто
																						  ,ЗначениеСубконто
																						  ,фКоличествоСубконтоМУ);	
	
																						  
	Если ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 	 	
		СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
		СтруктураПараметров.Вставить("Владелец"  , Объект.Контрагент);
	КонецЕсли;
	
	НачалоВыбораРеквизитаЗаписи(Элемент, СтандартнаяОбработка, СтруктураПараметров, ЗначениеСубконто); 
	
КонецПроцедуры // НачалоВыбораСубконто()

#КонецОбласти

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы
// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	Элементы.ОтразитьВЗакрытомПериоде.Видимость = бит_ПраваДоступа.ПолучитьЗначениеДопПраваПользователя(
	 					                           бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь"),
	 					                           ПланыВидовХарактеристик.бит_ДополнительныеПраваПользователей.РазрешеноОтражениеДокументовВЗакрытомПериоде);
КонецПроцедуры // УправлениеЭлементамиФормы()
											   
// Процедура устнавливает заголовок формы документа.
// 
&НаКлиенте 
Процедура УстановитьЗаголовокФормыДокумента()
	
	СтруктураЗаголовка = Новый Структура;
	СтруктураЗаголовка.Вставить("ПредставлениеОбъекта", фКэшЗначений.ПредставлениеОбъекта);
	СтруктураЗаголовка.Вставить("СтрокаВидаОперации"  , Строка(""));
	СтруктураЗаголовка.Вставить("ЭтоНовый"			  , Параметры.Ключ.Пустая());
	СтруктураЗаголовка.Вставить("ДокументПроведен"	  , Объект.Проведен);
	
	бит_РаботаСДиалогамиКлиент.УстановитьЗаголовокФормыДокумента(ЭтотОбъект
																,СтруктураЗаголовка);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Процедура выполняет заполнение в форме документа валюту МСФО.
// 
&НаКлиенте 
Процедура ЗаполнитьВалютуМСФО()
	
	// Получим строковое представление валюты международного учета.
	СтрокаВалютаМСФО = Строка(фКэшЗначений.ВалютаМСФО);
	
	Элементы.ВалютаМСФО.Заголовок = ?(ПустаяСтрока(СтрокаВалютаМСФО), "НЕ УСТАНОВЛЕНА", СтрокаВалютаМСФО);
	
КонецПроцедуры // ЗаполнитьВалютуМСФО()

#КонецОбласти

#КонецОбласти

