#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мУдалятьГраницу; // Удалять границу.

Перем мКоличествоСубконтоМУ; // Количество субконто МУ.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеДокумента();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.бит_му_ПоступлениеМПЗ") Тогда
		
		ЗаполнитьНаОсновании(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	

	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = бит_ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ручной корректировки.
	Если бит_ОбщегоНазначения.РучнаяКорректировкаОбработкаПроведения(РучнаяКорректировка, Отказ, Заголовок, ЭтотОбъект, Ложь) Тогда
		Возврат
	КонецЕсли;
	
	Если мУдалятьГраницу Тогда
		бит_му_МПЗ.УдалитьРегистрациюДокументаВПоследовательностях(ЭтотОбъект, Истина);
	КонецЕсли;
	
	СтруктураШапкиДокумента = бит_ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураТаблиц 		= ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента);	
	
	// ПроверкаДанных(СтруктураШапкиДокумента, СтруктураТаблиц, Отказ, Заголовок);
	
	// Получим курсы валют, неоходимые для выполнения пересчетов.
	ВидыКурсов = Новый Структура("Упр,Регл,МУ,Документ");
	СтруктураКурсыВалют = бит_му_ОбщегоНазначения.ПолучитьСтруктуруКурсовВалют(ЭтотОбъект, СтруктураШапкиДокумента.Дата, ВидыКурсов);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок);
	КонецЕсли;
               
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ФормироватьПроводки Тогда
		
		ПроверяемыеРеквизиты.Добавить("СчетВзаиморасчетов");
		ПроверяемыеРеквизиты.Добавить("Товары.СчетУчета");
		ПроверяемыеРеквизиты.Добавить("Товары.СчетДоходов");
		ПроверяемыеРеквизиты.Добавить("Товары.СчетРасходов");
	
	КонецЕсли; 
		
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	бит_ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, РучнаяКорректировка);
	
	// бит_VAlekseev добавление кода. Начало: 24.09.2010.
	бит_му_МПЗ.УдалитьРегистрациюДокументаВПоследовательностях(ЭтотОбъект, Истина);
	// бит_VAlekseev добавление кода Конец
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		

	
	// Подсчитаем и запишем сумму документа.
	СуммаДокумента = Товары.Итог("Сумма");
	
	Если Не Отказ Тогда
		
		// Выполним синхронизацию пометки на удаление объекта и дополнительных файлов.
		бит_ХранениеДополнительнойИнформации.СинхронизацияПометкиНаУдалениеУДополнительныхФайлов(ЭтотОбъект);
		
	КонецЕсли; // Если Не Отказ Тогда.
	
	мУдалятьГраницу = не ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	
		
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	ПервоначальноеЗаполнениеДокумента(ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция готовит таблицы документа для проведения.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
// 
// Возвращаемое значение:
//  Структура.
// 
Функция ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка 			КАК Регистратор,
	|	ТабЧасть.Ссылка.Дата 		КАК Период,
	|	ТабЧасть.Ссылка 			КАК ОсновнойДокумент,
	|	ТабЧасть.Ссылка.Организация КАК Организация,
	|	ТабЧасть.НомерСтроки,
	|	ТабЧасть.Номенклатура,
	|	ТабЧасть.ЕдиницаИзмерения,
	|	ТабЧасть.ХарактеристикаНоменклатуры,
	|	ТабЧасть.СерияНоменклатуры,
	|	ТабЧасть.Качество,
	|	ТабЧасть.Количество,
	|	ТабЧасть.Цена,
	|	ТабЧасть.Сумма,
	|	ТабЧасть.СчетУчета,
	|	ТабЧасть.СчетДоходов,
	|	ТабЧасть.СубконтоДоходов_1,
	|	ТабЧасть.СчетРасходов,
	|	ТабЧасть.СубконтоРасходов_1,
	|	ВЫБОР
	|		КОГДА ТабЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА ТабЧасть.Ссылка.Склад
	|		ИНАЧЕ ТабЧасть.Склад
	|	КОНЕЦ КАК Склад,	 	
	|	""НаСкладах"" 				КАК ИсточникПоКодуОперации,
	|	""Товары"" 					КАК ВидТабличнойЧасти
	|ИЗ
	|	Документ.бит_му_РеализацияМПЗ.Товары КАК ТабЧасть
	|ГДЕ
	|	ТабЧасть.Ссылка = &Ссылка
	|";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоТовары = РезультатЗапроса.Выгрузить();
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Товары", ТаблицаПоТовары);
	
	Возврат СтруктураТаблиц;
	
КонецФункции // ПодготовитьТаблицыДокумента()

// Процедура обрабатывает изменение валюты документа.
// 
Процедура ИзменениеВалютыМодуль() Экспорт

	СтруктураКурса = бит_КурсыВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурса.Курс;
	КратностьДокумента = СтруктураКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыМодуль()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет первоначальное заполнение созданного/скопированного документа.
// 
// Параметры:
//  ПараметрОбъектКопирования - ДокументОбъект.
// 
Процедура ПервоначальноеЗаполнениеДокумента(ПараметрОбъектКопирования = Неопределено)
	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокумента(ЭтотОбъект
												,бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")
												,ПараметрОбъектКопирования);
	
	// Документ не скопирован.
	Если ПараметрОбъектКопирования = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			
			// Заполним валюту документа валютой международного учета.
			ВалютаДокумента = бит_му_ОбщегоНазначения.ПолучитьВалютуМеждународногоУчета(Организация,, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменениеВалютыМодуль();
	
КонецПроцедуры // ПервоначальноеЗаполнениеДокумента()

// Процедура заполняет новый документ.
// 
// Параметры:
//  Основание - ДокументСсылка.ПоступлениеТоваровУслуг.
// 
Процедура ЗаполнитьНаОсновании(Основание)

	ДокументОснование = Основание;	
	бит_ОбщегоНазначения.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	СкопироватьТовары(Основание);
	
КонецПроцедуры // ЗаполнитьНаОсновании()

// Процедура выполняет копирование табличной части "Товары" из документа основания.
// 
// Параметры:
//  ДокументОснование.
//
Процедура СкопироватьТовары(ДокументОснование)
	
	// Признак того, что документ основания = бит_му_ПоступлениеМПЗ.
	НаОснованииПоступленияМПЗ = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.бит_му_ПоступлениеМПЗ");
	// Определим нужно ли в запросе выбирать характеристики и серии номенклатуры.
	ВыбиратьХарактеристикиИСерии = НаОснованииПоступленияМПЗ;
	ТекстВыбратьХарактеристикиСерии = "
	|	ДокументОснование.ХарактеристикаНоменклатуры,
	|	ДокументОснование.СерияНоменклатуры, ";
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаДокументОснование", ДокументОснование);
    Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокументОснование.Ссылка.ВалютаДокумента = ДокументОснование.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ДокументОснование.Ссылка.%ИмяКурса%
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР
	|		КОГДА ДокументОснование.Ссылка.ВалютаДокумента = ДокументОснование.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ДокументОснование.Ссылка.%ИмяКратности%
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КратностьДокумента,
	|	ДокументОснование.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ДокументОснование.ЕдиницаИзмерения,
	|	ДокументОснование.Количество,
	|	ДокументОснование.Номенклатура,
	|	ДокументОснование.Сумма, " +
	?(ВыбиратьХарактеристикиИСерии, ТекстВыбратьХарактеристикиСерии , " ") +" 
	|	ДокументОснование.СчетУчета
	|ИЗ
	|	Документ.%Документ%.Товары КАК ДокументОснование
	|ГДЕ
	|	ДокументОснование.Ссылка = &СсылкаДокументОснование
	|";
	
	Если НаОснованииПоступленияМПЗ Тогда  	
		Текст = СтрЗаменить(Текст, "%Документ%"	   , "бит_му_ПоступлениеМПЗ");
		Текст = СтрЗаменить(Текст, "%ИмяКурса%"	   , "КурсДокумента");
		Текст = СтрЗаменить(Текст, "%ИмяКратности%", "КратностьДокумента");
	Иначе	
		Текст = СтрЗаменить(Текст, "%Документ%"    , "РеализацияТоваровУслуг");
		Текст = СтрЗаменить(Текст, "%ИмяКурса%"	   , "КурсВзаиморасчетов");
		Текст = СтрЗаменить(Текст, "%ИмяКратности%", "КратностьВзаиморасчетов");
	КонецЕсли;
	
	Запрос.Текст = Текст;
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		СтрокаТабличнойЧасти = Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
		
		СтрокаТабличнойЧасти.Сумма = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
																	  Выборка.ВалютаДокумента, ВалютаДокумента,
																	  Выборка.КурсДокумента, КурсДокумента,
																	  Выборка.КратностьДокумента, КратностьДокумента);
		
		бит_ОбщегоНазначенияКлиентСервер.РассчитатьЦенуВСтрокеТЧ(СтрокаТабличнойЧасти);

		СтруктураПараметров = Новый Структура("Организация, Номенклатура, Склад",
											  Организация,
											  СтрокаТабличнойЧасти.Номенклатура,
											  ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад), СтрокаТабличнойЧасти.Склад, Склад));
											  
											  
		Если НаОснованииПоступленияМПЗ Тогда
		
			СтрокаТабличнойЧасти.СчетУчета = Выборка.СчетУчета
		
		Иначе
			
			СтруктураСчетов	= бит_МеханизмТрансляции.КонструкторПараметровПодбораСчетов();
			СтруктураСчетов.Счет          = Выборка.СчетУчета;
			СтруктураСчетов.Субконто1     = Выборка.Номенклатура;
		    СтруктураСчетов.ТекущийОбъект = Ссылка;			
			СтруктураСчетовМСФО = бит_МеханизмТрансляции.ВыполнитьПодборСчетов(СтруктураСчетов ,Организация, ДокументОснование.Дата);									  
			СтрокаТабличнойЧасти.СчетУчета = СтруктураСчетовМСФО.Счет;
			
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры // СкопироватьТовары()

#Область ПроцедурыИФункцииДляОбеспеченияПроведенияДокумента

Процедура ПересчитатьСуммуУпр(ТаблицаПроводокПоПартиямМПЗ, СтруктураКурсыВалют)
	
	Для каждого СтрокаТаблицы Из ТаблицаПроводокПоПартиямМПЗ Цикл
		
		КурсыДокумент = СтруктураКурсыВалют["Документ"];
		КурсыУпр = СтруктураКурсыВалют["Упр"];

		СтрокаТаблицы.СуммаУпр = бит_КурсыВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаУпр
																			,КурсыУпр.Валюта
																			,КурсыДокумент.Валюта
																			,КурсыУпр.Курс
																			,КурсыДокумент.Курс
																			,КурсыУпр.Кратность
																			,КурсыДокумент.Кратность);
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет запись по регистру бухгалтерии бит_Дополнительный_2.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
//  СтруктураКурсыВалют  - Структура.
//  Осн_ДтКт.
//  Кор_ДтКт.
// 
Процедура ДобавитьЗаписьМУ(СтрокаТаблицы, СтруктураПараметров, СтруктураКурсыВалют, Осн_ДтКт, Кор_ДтКт)

	// Запись.
	Запись = Движения.бит_Дополнительный_2.Добавить();	
	бит_му_ОбщегоНазначения.ЗаполнитьЗаписьРегистраМУ(Запись, СтруктураПараметров);
	
	Осн_Счет 	 = Запись["Счет" + Осн_ДтКт];
	Кор_Счет 	 = Запись["Счет" + Кор_ДтКт];
	Осн_Субконто = Запись["Субконто" + Осн_ДтКт];
	Кор_Субконто = Запись["Субконто" + Кор_ДтКт];
	
	Аналитика_Контрагент 			= Контрагент;
	Аналитика_ДоговорКонтрагента 	= ДоговорКонтрагента;
	Аналитика_Склад 				= ?(ЗначениеЗаполнено(СтрокаТаблицы.Склад), СтрокаТаблицы.Склад, Склад);
	Аналитика_Номенклатура 			= СтрокаТаблицы.Номенклатура;
		
	// Заполнение аналитик.	
	бит_му_ОбщегоНазначения.УстановитьСубконто(Запись["Счет" + Осн_ДтКт], Запись["Субконто" + Осн_ДтКт], 1, СтруктураПараметров.Субконто1);
	Для Ном = 1 по мКоличествоСубконтоМУ Цикл 		
		бит_му_ОбщегоНазначения.УстановитьСубконто(Осн_Счет, Осн_Субконто, Ном, Аналитика_Номенклатура);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Кор_Счет, Кор_Субконто, Ном, Аналитика_Номенклатура);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Кор_Счет, Кор_Субконто, Ном, Аналитика_Контрагент);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Кор_Счет, Кор_Субконто, Ном, Аналитика_ДоговорКонтрагента);
		бит_му_ОбщегоНазначения.УстановитьСубконто(Кор_Счет, Кор_Субконто, Ном, Аналитика_Склад);               
    КонецЦикла;
    // Изменение кода. Начало. 26.01.2018{{ BF-1857
    Если СтруктураПараметров.Свойство("ДокументОприходования") Тогда
        бит_му_ОбщегоНазначения.УстановитьСубконто(Осн_Счет, Осн_Субконто, "ДокументыРасчетовСКонтрагентами", СтруктураПараметров.ДокументОприходования);
	    бит_му_ОбщегоНазначения.УстановитьСубконто(Кор_Счет, Кор_Субконто, "ДокументыРасчетовСКонтрагентами", СтруктураПараметров.ДокументОприходования);
    КонецЕсли;  
    // Изменение кода. Конец. 26.01.2018}}
	
	// Выполним валютные пересчеты.
	бит_му_ОбщегоНазначения.ВыполнитьВалютныеПересчетыЗаписи(СтруктураПараметров, Запись, СтруктураКурсыВалют);
	
КонецПроцедуры // ДобавитьЗаписьМУ()

// Процедура выполняет движения по регистру бит_Дополнительный_2.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура СформироватьДвиженияДоходовРасходовМу(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ТаблицаПроводокПоПартиямМПЗ = Неопределено)

	ТаблицаДанных = СтруктураТаблиц.Товары;	

	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Заполнение атрибутов записи.
		СтруктураПараметров = Новый Структура("Организация, Период, Валюта, СчетДт, СчетКт, Сумма, Количество, Субконто1, Содержание"
										 , СтруктураШапкиДокумента.Организация
										 , СтруктураШапкиДокумента.Дата
										 , СтруктураШапкиДокумента.ВалютаДокумента
										 , СчетВзаиморасчетов 		 // Дт
										 , СтрокаТаблицы.СчетДоходов // Кт
										 , СтрокаТаблицы.Сумма 	 	 // Сумма
										 , СтрокаТаблицы.Количество  // Количество
										 , СтрокаТаблицы.СубконтоДоходов_1
										 , "Реализация МПЗ");		
		ДобавитьЗаписьМУ(СтрокаТаблицы, СтруктураПараметров, СтруктураКурсыВалют, "Кт", "Дт");
		
		
		// Изменение кода. Начало. 26.01.2018{{ BF-1857
		// При наличии проводок по партиям МПЗ сформируем проводку по списанию себестоимости.
		Если ТаблицаПроводокПоПартиямМПЗ.Количество() <> 0 Тогда
            
            //Отбор = Новый Структура("НомерСтроки", СтрокаТаблицы.НомерСтроки);
            Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Качество"
                        , СтрокаТаблицы.Номенклатура
                        , СтрокаТаблицы.ХарактеристикаНоменклатуры
                        , СтрокаТаблицы.СерияНоменклатуры
                        , СтрокаТаблицы.Качество);
            ТаблицаПроводок = ТаблицаПроводокПоПартиямМПЗ.НайтиСтроки(Отбор);
            
            Для каждого СтрокаПроводок Из ТаблицаПроводок Цикл           
			
    			СтруктураПараметров.Вставить("Сумма"	            , СтрокаПроводок.СуммаУпр);
    			СтруктураПараметров.Вставить("СчетДт"	            , СтрокаТаблицы.СчетРасходов);
    			СтруктураПараметров.Вставить("СчетКт"	            , СтрокаТаблицы.СчетУчета);
    			СтруктураПараметров.Вставить("Субконто1"            , СтрокаТаблицы.СубконтоРасходов_1);
                СтруктураПараметров.Вставить("ДокументОприходования", СтрокаПроводок.ДокументОприходования);
    			ДобавитьЗаписьМУ(СтрокаТаблицы, СтруктураПараметров, СтруктураКурсыВалют, "Дт", "Кт");
                
            КонецЦикла;
        
        КонецЕсли;
        // Именение кода. Конец. 26.01.2018}}			
		
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияДоходовРасходовМу()

// Процедура выполняет движения по регистрам.
// 
// Параметры:
//  СтруктураШапкиДокумента - Структура.
//  СтруктураТаблиц 		- Структура.
//  СтруктураКурсыВалют 	- Структура.
//  Отказ 					- Булево.
//  Заголовок 				- Строка.
// 
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, Отказ, Заголовок)
	
	ТаблицаДанных = СтруктураТаблиц.Товары;
	
	// Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл.
	// 	
	// КонецЦикла;
	
	ТаблицаДанныхДляСписанияПартийТоваров = ТаблицаДанных.Скопировать();
	
	// бит_VAlekseev добавление кода. Начало: 06.09.2010.
	Если ТаблицаДанных.Количество() > 0 Тогда
		бит_му_МПЗ.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация);
	КонецЕсли;
	
	// бит_му_МПЗ.ДвижениеПартийТоваров(Ссылка, ТаблицаДанных, СтруктураКурсыВалют);
	бит_му_МПЗ.ДвижениеПартийТоваров(Ссылка, ТаблицаДанныхДляСписанияПартийТоваров, СтруктураКурсыВалют);
	// бит_VAlekseev добавление кода Конец
	
	ПроводкиПоПартиямМПЗ =  Ссылка.ПолучитьОбъект().Движения.бит_му_ПартииМПЗ;
	ПроводкиПоПартиямМПЗ.Прочитать();
	
	ТаблицаПроводокПоПартиямМПЗ = ПроводкиПоПартиямМПЗ.Выгрузить();
	
	// Пересчитаем СуммуУпр (сумму себестоимости), полученную из проводок по партиям МПЗ, в сумму в валюте документа.
	ПересчитатьСуммуУпр(ТаблицаПроводокПоПартиямМПЗ, СтруктураКурсыВалют);
	
	Если ФормироватьПроводки Тогда
		СформироватьДвиженияДоходовРасходовМу(СтруктураШапкиДокумента, СтруктураТаблиц, СтруктураКурсыВалют, ТаблицаПроводокПоПартиямМПЗ);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

#КонецОбласти

#КонецОбласти

#Область Инициализация

мКоличествоСубконтоМУ = 4;

#КонецОбласти

#КонецЕсли
