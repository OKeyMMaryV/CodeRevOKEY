
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("Организация") Тогда 
		Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("КонтрагентДебитор") Тогда 
		КонтрагентДебитор = Параметры.КонтрагентДебитор;
	КонецЕсли;
	Если Параметры.Свойство("КонтрагентКредитор") Тогда 
		КонтрагентКредитор = Параметры.КонтрагентКредитор;
	КонецЕсли;
	Если Параметры.Свойство("ВалютаДокумента") Тогда 
		ВалютаДокумента = Параметры.ВалютаДокумента;
	КонецЕсли;
	Если Параметры.Свойство("КурсДокумента") Тогда 
		КурсДокумента = Параметры.КурсДокумента;
	КонецЕсли;
	Если Параметры.Свойство("КратностьДокумента") Тогда 
		КратностьДокумента = Параметры.КратностьДокумента;
	КонецЕсли;

	Если Параметры.Свойство("ФВБ") Тогда 
		ФВБ = Параметры.ФВБ;
	КонецЕсли;

	Если Параметры.Свойство("ПараметрыЗаполнения") Тогда 
		ПараметрыЗаполнения = Параметры.ПараметрыЗаполнения;
	КонецЕсли;
		
	Если Параметры.Свойство("ПараметрыВыбораДоговора") Тогда 
		
		Элементы.ДоговорКонтрагента.ПараметрыВыбора = Параметры.ПараметрыВыбораДоговора;
		Элементы.КорДоговорКонтрагента.ПараметрыВыбора = Параметры.ПараметрыВыбораДоговора;
		
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Элементы.КурсДокумента.Видимость = ВалютаДокумента <> ВалютаРегламентированногоУчета;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КредиторскаяЗадолженностьВыбраноПриИзменении(Элемент)

	ТекущиеДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбраноПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтаФорма);

	ПересчитатьСуммуПоСтрокеНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ВалютаРегламентированногоУчета);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокаТаблицы = ПолучитьСтруктуруРеквизитовСтроки();
	ЗаполнитьЗначенияСвойств(ДанныеСтрокаТаблицы, ТекущиеДанные);
	
	ПараметрыОбъекта = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтаФорма);

	ПересчитатьСуммуПоСтрокеНаСервере(ДанныеСтрокаТаблицы, ПараметрыОбъекта, ВалютаРегламентированногоУчета, Ложь);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокаТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура КредиторскаяЗадолженностьСчетУчетаРасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КредиторскаяЗадолженность.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = КурсДокумента;
		ТекущиеДанные.КратностьВзаиморасчетов = КратностьДокумента;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если КредиторскаяЗадолженность.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед подбором кредиторская задолженность будет очищена. Продолжить?'");
		ДополнительныеПараметры = Неопределено;
		Оповещение = Новый ОписаниеОповещения("ВопросПередПодбораОстатковПоВзаиморасчетамЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да );
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Если ПоместитьВыбранныеСтрокиВременноеХранилище(АдресВХранилище) Тогда 
		Если ЗначениеЗаполнено(АдресВХранилище) Тогда 
			СтруктураВыбранныеДанные = Новый Структура("КонтрагентКредитор, АдресВХранилище", КонтрагентКредитор, АдресВХранилище);
			ОповеститьОВыборе(СтруктураВыбранныеДанные);
			//Закрыть();
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗакрытиеФормыБезПереносаДанныхЗавершение", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, "Отсутствуют выбранные строки. Форма будет закрыта без переноса данных. Продолжить?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да); 			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбрано(Команда)
	
	УстановитьСнятьВыбрано(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыбрано(Команда)
	
	УстановитьСнятьВыбрано(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьВыбрано(Команда)
	
	УстановитьСнятьВыбрано(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВопросПередПодбораОстатковПоВзаиморасчетамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	КредиторскаяЗадолженность.Очистить();
	АдресОстаткиВзаиморасчетов = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Документы.КорректировкаДолга.ЗаполнитьОстаткамиВзаиморасчетов(ПолучитьИзВременногоХранилища(ПараметрыЗаполнения), АдресОстаткиВзаиморасчетов);
	СтруктураОстаткиВзаиморасчетов = ПолучитьИзВременногоХранилища(АдресОстаткиВзаиморасчетов);
	ЗаполненнаяТаблица = СтруктураОстаткиВзаиморасчетов.ЗаполненныеТаблицы.Получить(Перечисления.ВидыЗадолженности.Кредиторская);	
	Если ЗаполненнаяТаблица <> Неопределено Тогда 
		АдресОстаткиВзаиморасчетов = ПоместитьВоВременноеХранилище(ЗаполненнаяТаблица, АдресОстаткиВзаиморасчетов); 
		АдресОстаткиВзаиморасчетов = Документы.КорректировкаДолга.ок_ОбработатьКЗДляПроведенияПоБК(АдресОстаткиВзаиморасчетов, ?(ЗначениеЗаполнено(ДоговорКонтрагента), ДоговорКонтрагента, Неопределено), КорДоговорКонтрагента, ?(ЗначениеЗаполнено(ФВБ), ФВБ, Неопределено));
		ОстаткиВзаиморасчетов = ПолучитьИзВременногоХранилища(АдресОстаткиВзаиморасчетов);
		Для Каждого СтрокаОстаткиВзаиморасчетов Из ОстаткиВзаиморасчетов Цикл
			СтрокаКредиторскаяЗадолженность = КредиторскаяЗадолженность.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКредиторскаяЗадолженность, СтрокаОстаткиВзаиморасчетов);
			СтрокаКредиторскаяЗадолженность.Выбрано = Истина;
		КонецЦикла;
	КонецЕсли;
	ИтогоСумма = КредиторскаяЗадолженность.Итог("Сумма");
	ИтогоСуммаНУ = КредиторскаяЗадолженность.Итог("СуммаНУ");
	ИтогоСуммаВзаиморасчетов = КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВыбранныеСтрокиВременноеХранилище(АдресВХранилище)
	
	ВыбранныеСтроки = КредиторскаяЗадолженность.НайтиСтроки(Новый Структура("Выбрано", Истина));
	Если ВыбранныеСтроки.Количество() Тогда
		ТЗКредиторскаяЗадолженность = КредиторскаяЗадолженность.Выгрузить(ВыбранныеСтроки);
		МассивФВБ = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТЗКредиторскаяЗадолженность.ВыгрузитьКолонку("ок_ФВБ"));
		Если МассивФВБ.Количество() > 1 Тогда 
			ТекстСообщения = НСтр("ru = 'Выбранные документы расчетов связаны с разными номерами заявок.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		Иначе
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, КонтрагентКредитор, КорДоговорКонтрагента);
			КорСчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			
			ТЗКредиторскаяЗадолженность.ЗаполнитьЗначения(КорДоговорКонтрагента, "КорДоговорКонтрагента");
			ТЗКредиторскаяЗадолженность.ЗаполнитьЗначения(КорСчетУчетаРасчетов, "КорСчетУчетаРасчетов");

			ПоместитьВоВременноеХранилище(ТЗКредиторскаяЗадолженность, АдресВХранилище);
		КонецЕсли;
	Иначе
		АдресВХранилище = Неопределено;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции
	
&НаКлиенте
Процедура ВопросЗакрытиеФормыБезПереносаДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьВыбрано(НовоеСостояние)
	
	Если Не КредиторскаяЗадолженность.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Если НовоеСостояние = Неопределено Тогда 
		Для Каждого СтрокаКредиторскаяЗадолженность Из КредиторскаяЗадолженность Цикл
			СтрокаКредиторскаяЗадолженность.Выбрано = Не СтрокаКредиторскаяЗадолженность.Выбрано;
			ВыбраноПриИзменении(СтрокаКредиторскаяЗадолженность);
		КонецЦикла;		
	Иначе
		НайденныеСтроки = КредиторскаяЗадолженность.НайтиСтроки(Новый Структура("Выбрано", Не НовоеСостояние));
		Для Каждого СтрокаКредиторскаяЗадолженность Из НайденныеСтроки Цикл
			СтрокаКредиторскаяЗадолженность.Выбрано = НовоеСостояние;
			ВыбраноПриИзменении(СтрокаКредиторскаяЗадолженность);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбраноПриИзменении(ТекущиеДанные)

	ИтогоСумма = ИтогоСумма + ТекущиеДанные.Сумма * ?(ТекущиеДанные.Выбрано, 1, -1);
	ИтогоСуммаНУ = ИтогоСумма + ТекущиеДанные.СуммаНУ * ?(ТекущиеДанные.Выбрано, 1, -1);
	ИтогоСуммаВзаиморасчетов = ИтогоСуммаВзаиморасчетов + ТекущиеДанные.СуммаВзаиморасчетов * ?(ТекущиеДанные.Выбрано, 1, -1);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруРеквизитовСтроки()

	Возврат Новый Структура("ДоговорКонтрагента, КорДоговорКонтрагента, Сделка, Сумма, СуммаВзаиморасчетов, 
		|КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетов, КорСчетУчетаРасчетов, СуммаНУ,
		|ЭтоАванс, КурсВзаиморасчетовДоступность"); 

КонецФункции

&НаСервереБезКонтекста 
Процедура ПересчитатьСуммуПоСтрокеНаСервере(СтрокаДанных, ДанныеОбъекта, ВалютаРегламентированногоУчета, ПересчетВалютнойСуммы = Истина)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанных.ДоговорКонтрагента, "ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
	
	ВалютаДоговора = РеквизитыДоговора.ВалютаВзаиморасчетов;
	РасчетыВУЕ = РеквизитыДоговора.РасчетыВУсловныхЕдиницах;
	Если РасчетыВУЕ Тогда
		Если ПересчетВалютнойСуммы Тогда
			СтрокаДанных.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
					ВалютаРегламентированногоУчета, ВалютаДоговора,
					1, СтрокаДанных.КурсВзаиморасчетов,
					1,СтрокаДанных.КратностьВзаиморасчетов);
		Иначе
			СтрокаДанных.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
					ВалютаДоговора, ВалютаРегламентированногоУчета,
					СтрокаДанных.КурсВзаиморасчетов, 1,
					СтрокаДанных.КратностьВзаиморасчетов, 1);
		КонецЕсли;
	Иначе
		Если ПересчетВалютнойСуммы Тогда
			СтрокаДанных.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
					ДанныеОбъекта.ВалютаДокумента, ВалютаДоговора,
					ДанныеОбъекта.КурсДокумента, СтрокаДанных.КурсВзаиморасчетов,
					ДанныеОбъекта.КратностьДокумента,СтрокаДанных.КратностьВзаиморасчетов);
		Иначе
			СтрокаДанных.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
					ВалютаДоговора, ДанныеОбъекта.ВалютаДокумента,
					СтрокаДанных.КурсВзаиморасчетов, ДанныеОбъекта.КурсДокумента,
					СтрокаДанных.КратностьВзаиморасчетов, ДанныеОбъекта.КратностьДокумента);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДанных.СуммаНУ = СтрокаДанных.Сумма;

КонецПроцедуры

#КонецОбласти

