#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс
	
// Функция определяет есть ли невыполненные задачи или нет. 
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.бит_уп_Процессы.
//  Исключения - Массив.
// 
// Возвращаемое значение:
//  флЕсть - Булево
// 
Функция ЕстьНевыполненныеЗадачи(Процесс, Исключения = Неопределено) Экспорт

	флЕсть = Ложь;
				   
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ
	                |	бит_уп_Задача.Ссылка КАК Задача
	                |ИЗ
	                |	Задача.бит_уп_Задача КАК бит_уп_Задача
	                |ГДЕ
	                |	бит_уп_Задача.БизнесПроцесс = &БизнесПроцесс
	                |	И (НЕ бит_уп_Задача.Выполнена)
	                |	%Исключения%";
					
					
	Запрос.УстановитьПараметр("БизнесПроцесс" , Процесс);
	Если ТипЗнч(Исключения) = Тип("Массив") Тогда
		
		Запрос.УстановитьПараметр("Исключения", Исключения);
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Исключения%","И (НЕ бит_уп_Задача.Ссылка В (&Исключения))");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%Исключения%","");
	
	КонецЕсли; 
					
				   
	Результат = Запрос.Выполнить();

	флЕсть = НЕ Результат.Пустой();
	
	Возврат флЕсть;
	
КонецФункции // ЕстьНевыполненныеЗадачи()

// Функция получает невыполненные задачи, для которых предусмотрено автоматическое выполнение действий.
// 
// Параметры:
//   Процесс - БизнесПроцессСсылка.бит_уп_Процесс.
// 
// Возвращаемое значение:
//  МассивЗадач - Массив.
// 
Функция ПолучитьАвтоматическиеНевыполненныеЗадачи(Процесс) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_уп_Задача.Ссылка
	               |ИЗ
	               |	Задача.бит_уп_Задача КАК бит_уп_Задача
	               |ГДЕ
	               |	бит_уп_Задача.БизнесПроцесс = &Процесс
	               |	И бит_уп_Задача.ТочкаАлгоритма.ПользовательскоеДействие.ВыполнятьАвтоматическиеДействия = ИСТИНА";
	
				   
	МассивЗадач = Новый Массив;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		МассивЗадач.Добавить(Выборка.Ссылка);
	
	КонецЦикла; 

	Возврат МассивЗадач;
	
КонецФункции // ПолучитьАвтоматическиеНевыполненныеЗадачи()

// Функция возвращает таблицу задач по процессу.
// 
// Параметры:
//  Алгоритм - СправочникСсылка.бит_уп_АлгоритмыПроцессов.
// 
// Возвращаемое значение:
//  ТабЗадачи - ТаблицаЗначений.
// 
Функция ПолучитьЗадачиПроцесса(Процесс, ТолькоВыполненные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("Выполнена", ТолькоВыполненные);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_уп_Задача.Ссылка КАК Задача,
	|	бит_уп_Задача.ТочкаАлгоритма КАК Точка,
	|	бит_уп_Задача.Состояние
	|ИЗ
	|	Задача.бит_уп_Задача КАК бит_уп_Задача
	|ГДЕ
	|	бит_уп_Задача.БизнесПроцесс = &Процесс";
				   
	Если НЕ ТолькоВыполненные = Неопределено Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		Отбор = "бит_уп_Задача.Выполнена = &Выполнена";
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(Отбор);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли; 			   
	
	Результат = Запрос.Выполнить();
	ТабЗадачи = Результат.Выгрузить();
	
	Возврат ТабЗадачи;
	
КонецФункции // ПолучитьЗадачиАлгоритма()

// Функция возвращает таблицу подчиненных бизнес-процессов.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.бит_уп_Процесс.
// 
// Возвращаемое значение:
//  ТабПодч - ТаблицаЗначений.
// 
Функция ПолучитьПодчиненныеПроцессы(Процесс) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("ПустойАлгоритм", Справочники.бит_уп_Алгоритмы.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_уп_Процесс.Ссылка КАК Процесс
	               |ИЗ
	               |	Задача.бит_уп_Задача КАК бит_уп_Задача
	               |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.бит_уп_Процесс КАК бит_уп_Процесс
	               |		ПО бит_уп_Задача.Ссылка = бит_уп_Процесс.ВедущаяЗадача
	               |ГДЕ
	               |	бит_уп_Задача.БизнесПроцесс = &Процесс
	               |	И бит_уп_Задача.АлгоритмПодчиненный <> ЗНАЧЕНИЕ(Справочник.бит_уп_Алгоритмы.ПустаяСсылка)
	               |	И (НЕ бит_уп_Процесс.Ссылка ЕСТЬ NULL )";
				   
	Результат = Запрос.Выполнить();
	
	ТабПодч = Результат.Выгрузить();
	
	Возврат ТабПодч;
	
КонецФункции // ПолучитьПодчиненныеПроцессы()

// Функция возвращает структуру с параметрами процесса.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.бит_уп_Процесс.
// 
// Возвращаемое значение:
//  ПарамПроцесса - Структура.
// 
Функция ПолучитьПараметрыПроцесса(Процесс)  Экспорт
	
	ПарамПроцесса = Новый Структура;
	Для каждого СтрокаТаблицы Из Процесс.ПараметрыПроцесса Цикл
		
		ПарамПроцесса.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
		
	КонецЦикла; 
	
	Возврат ПарамПроцесса;
	
КонецФункции // ПолучитьПараметрыПроцесса()

// Функция возвращает значение параметра процесса. Значение извлекается из структуры ПараметрыПроцесса 
// или из строки с настройкой параметров, если параметр указан явно.
// 
// Параметры:
//  НастройкаЗаполненияПарамета   - Произвольный - Должен содержать атрибут "Значение"
//  ПараметрыПроцесса - Структура.
// 
// Возвращаемое значение:
//  ТекЗначение - Произвольный.
// 
Функция ПолучитьЗначениеПараметраПроцесса(НастройкаЗаполненияПарамета, ПараметрыПроцесса) Экспорт
	
	Если ТипЗнч(НастройкаЗаполненияПарамета.Значение) = Тип("Строка") И Найти(НастройкаЗаполненияПарамета.Значение,"#ПП.") Тогда
		
		ТекЗначение = Неопределено;
		ИмяПараметра = СтрЗаменить(НастройкаЗаполненияПарамета.Значение, "#ПП.","");
		ПараметрыПроцесса.Свойство(ИмяПараметра, ТекЗначение);
		
	Иначе	
		
		ТекЗначение = НастройкаЗаполненияПарамета.Значение;
		
	КонецЕсли; 
	
	Возврат ТекЗначение;
	
КонецФункции // ПолучитьЗначениеПараметраПроцесса()

// Процедура выполняет остановку процесса, подчиненных процессов и задач процесса.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.бит_уп_Процесс
//  РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ОстановитьПроцесс(Процесс, РежимСообщений = "Ошибки") Экспорт
	
	флВыполнено = Ложь;
	
	// Остановка процесса
	Если Процесс.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Активный Тогда
		
		ПроцОбъект = Процесс.ПолучитьОбъект();
		ПроцОбъект.ДополнительныеСвойства.Вставить("Остановить");
		
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьБизнесПроцесс(ПроцОбъект, РежимСообщений);
		
	КонецЕсли; 
	
	Возврат флВыполнено;
	
КонецФункции // ОстановитьПроцесс()

// Функция выполняет остановку задач процесса.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.бит_уп_Процесс
//  РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ОстановитьЗадачиПроцесса(Процесс, РежимСообщений = "Ошибки") Экспорт
	
	флВыполнено = Ложь;
	
	// Остановка задач
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Создана);
	МассивСостояний.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Принята);
	МассивСостояний.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Просрочена);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
	Запрос.Текст = "ВЫБРАТЬ
	|	бит_уп_Задача.Ссылка КАК Задача
	|ИЗ
	|	Задача.бит_уп_Задача КАК бит_уп_Задача
	|ГДЕ
	|	бит_уп_Задача.БизнесПроцесс = &Процесс
	|	И бит_уп_Задача.Состояние В(&МассивСостояний)";
	
	Результат = Запрос.Выполнить();
	
	МассивЗадач = Результат.Выгрузить().ВыгрузитьКолонку("Задача");
	
	флОстановлена = Задачи.бит_уп_Задача.Остановить(МассивЗадач, Ложь, РежимСообщений);
	
	Если флОстановлена Тогда
	
		флВыполнено = Истина;
	
	КонецЕсли; 
	
	Возврат флВыполнено;
	
КонецФункции // ОстановитьЗадачиПроцесса()

// Функция возвобновляет выполнение процесса, вложенных процессов и задач после остановки.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.бит_уп_Процесс
//  РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ПродолжитьПроцесс(Процесс, РежимСообщений = "Ошибки") Экспорт

	флВыполнено = Ложь;
	
	флВыполнено = Ложь;
	Если Процесс.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Остановлен Тогда
		
		ПроцОбъект = Процесс.ПолучитьОбъект();
		ПроцОбъект.ДополнительныеСвойства.Вставить("Продолжить");
		
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьБизнесПроцесс(ПроцОбъект, РежимСообщений);
		
	КонецЕсли; 
	
	Возврат флВыполнено;
	
КонецФункции // ПродолжитьПроцесс()

// Функция возобновляет выполнение задач процесса после остановки.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.бит_уп_Процесс
//  РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ПродолжитьЗадачиПроцесса(Процесс, РежимСообщений = "Ошибки")  Экспорт
	
	флВыполнено = Ложь;
	
	// Продолжение задач
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Остановлена);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_уп_Задача.Ссылка КАК Задача
	               |ИЗ
	               |	Задача.бит_уп_Задача КАК бит_уп_Задача
	               |ГДЕ
	               |	бит_уп_Задача.БизнесПроцесс = &Процесс
	               |	И бит_уп_Задача.Состояние В(&МассивСостояний)";
	
	Результат = Запрос.Выполнить();
	
	МассивЗадач = Результат.Выгрузить().ВыгрузитьКолонку("Задача");
	
	флОК = Задачи.бит_уп_Задача.ПродолжитьВыполнение(МассивЗадач, Ложь, РежимСообщений);
	
	Если флОК Тогда
		
		флВыполнено = Истина;
		
	КонецЕсли; 
	
	Возврат флВыполнено;
	
КонецФункции // ПродолжитьЗадачиПроцесса()

// Процедура заполяет массив ФормируемыеЗадачи, объектами задач, которые необходимо создать.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.бит_уп_Процесс
//  ФормируемыеЗадачи - Массив.
// 
Процедура СоздатьЗадачиПроцесса(Процесс, ФормируемыеЗадачи) Экспорт
	
	 // Вызов выполнения алгоритма, для определения точек, по которым необходимо создать задачи.
	 КомментироватьВыполнение = бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("КомментироватьХодВыполненияАлгоритмовПроцессов",
																								 бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	 
	 РежимСообщений = ?(КомментироватьВыполнение,"Все","Ошибки");			
	 
	 ТабЗадачи = БизнесПроцессы.бит_уп_Процесс.ПолучитьЗадачиПроцесса(Процесс.Ссылка);
	 МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();
	 
	 СтруктураКонтекст = Новый Структура;
	 СтруктураКонтекст.Вставить("ТекущийОбъект",Процесс);
	 СтруктураКонтекст.Вставить("ТабЗадачи",ТабЗадачи);
	 СтруктураКонтекст.Вставить("ПользовательскиеДействия", Новый Массив);
	 
	 бит_уп_Сервер.ВыполнитьАлгоритм(Процесс.Алгоритм,СтруктураКонтекст,РежимСообщений);
	 
	 Если СтруктураКонтекст.ПользовательскиеДействия.Количество() > 0 Тогда
		 
		 ПарамПроцесса = Новый Структура;
		 Для каждого СтрокаТаблицы Из Процесс.ПараметрыПроцесса Цикл
		 	ПарамПроцесса.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
		 КонецЦикла; 
		 
		 ЕстьДинамическиеПараметры = Справочники.бит_уп_Алгоритмы.ЕстьДинамическиеПараметры(Процесс.Алгоритм);
		 Для каждого СтрТочкаДействие Из СтруктураКонтекст.ПользовательскиеДействия Цикл
			 
			 // Параметры для действия  
			 ПарамДляДействия = Новый Структура;
			 Для каждого КиЗ Из ПарамПроцесса Цикл
			 	ПарамДляДействия.Вставить(КиЗ.Ключ, КиЗ.Значение);
			 КонецЦикла; 
			 
			 // Получение динамических параметров из точки.
			 ПарамДинамические = Новый Структура;
			 Если ЕстьДинамическиеПараметры Тогда
			 	 Для каждого СтрокаТаблицы Из СтрТочкаДействие.Точка.ПараметрыПроцесса Цикл
				 	 ПарамДинамические.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
				 КонецЦикла; 
			 КонецЕсли; 
			 
			 // Переопределяем динамическими параметрами параметры процесса.
			 Для каждого КиЗ Из ПарамДинамические Цикл
			 	Если ПарамДляДействия.Свойство(КиЗ.Ключ) И ЗначениеЗаполнено(КиЗ.Ключ) Тогда
					 ПарамДляДействия[КиЗ.Ключ] = КиЗ.Значение;
				КонецЕсли; 
			 КонецЦикла; 
			 
			 КонтекстДействия = Новый Структура;
			 КонтекстДействия.Вставить("ЗадачаОбъект", Неопределено);
			 КонтекстДействия.Вставить("МаксКоличествоОбъектов", МаксКоличествоОбъектов);
			 КонтекстДействия.Вставить("ПараметрыПроцесса", ПарамДляДействия);
			 КонтекстДействия.Вставить("Процесс", Процесс.Ссылка);
		 	 бит_уп_Сервер.ВыполнитьПользовательскоеДействие(СтрТочкаДействие.Действие, КонтекстДействия, СтрТочкаДействие.Точка, , РежимСообщений);
			 
			 Если ТипЗнч(КонтекстДействия.ЗадачаОбъект) = Тип("ЗадачаОбъект.бит_уп_Задача") Тогда
				  КонтекстДействия.ЗадачаОбъект.БизнесПроцесс = Процесс.Ссылка;
				  КонтекстДействия.ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.бит_уп_Процесс.ТочкиМаршрута.ВыполнениеДействий;
			 	  ФормируемыеЗадачи.Добавить(КонтекстДействия.ЗадачаОбъект);
			 КонецЕсли;
		 КонецЦикла; 
	 Иначе	
		 // Завершить процесс
	 КонецЕсли; 
	
КонецПроцедуры // СоздатьЗадачиПроцесса()

Процедура ЗаполнитьПоАлгоритму(Процесс, Алгоритм) Экспорт
	
	Результат = Справочники.бит_уп_Алгоритмы.АлгоритмГотовКРаботе(Алгоритм);
	Если НЕ Результат Тогда
		ВызватьИсключение Нстр("ru = 'Алгоритм не готов к использованию.'");
	КонецЕсли;
	
	Реквизиты = "Наименование, ВидАлгоритма, Назначение_УУ, Назначение_МУ, Назначение_Бюдж, ПараметрыАлгоритма";
	РеквизитыАлгоритма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Алгоритм, Реквизиты);
	
	Если РеквизитыАлгоритма.ВидАлгоритма <> Перечисления.бит_уп_ВидыАлгоритмов.Прочее Тогда
		ВызватьИсключение НСтр("ru = 'Необходимо выбрать алгоритм произвольного процесса.'");
	КонецЕсли;  
	
	Процесс.Алгоритм 		= Алгоритм; 
	Процесс.Назначение_УУ   = РеквизитыАлгоритма.Назначение_УУ;
	Процесс.Назначение_МУ   = РеквизитыАлгоритма.Назначение_МУ;
	Процесс.Назначение_Бюдж = РеквизитыАлгоритма.Назначение_Бюдж;
	Процесс.Наименование    = РеквизитыАлгоритма.Наименование;
	
	Процесс.ПараметрыПроцесса.Очистить();
	ПараметрыАлгоритма = РеквизитыАлгоритма.ПараметрыАлгоритма.Выбрать();
	Пока ПараметрыАлгоритма.Следующий() Цикл
		НоваяСтрока = Процесс.ПараметрыПроцесса.Добавить();
		НоваяСтрока.Имя          = ПараметрыАлгоритма.Имя;
		НоваяСтрока.СтрТип       = ПараметрыАлгоритма.СтрТип;
		НоваяСтрока.Значение     = ПараметрыАлгоритма.ЗначениеПоУмолчанию;
		НоваяСтрока.Обязательный = ПараметрыАлгоритма.Обязательный И НЕ ПараметрыАлгоритма.Динамический;
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти 

#КонецЕсли
