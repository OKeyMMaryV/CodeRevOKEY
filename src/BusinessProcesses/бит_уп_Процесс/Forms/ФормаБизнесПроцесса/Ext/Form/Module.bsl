
#Область ОписаниеПеременных

&НаКлиенте 
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	УстановитьВидимостьАлгоритма();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередСтартом(Отказ)
	
	// необходимо перейти на закладку алгоритм, перед стартом процесса
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаАлгоритм;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекущаяСтраница = Элементы.СтраницаГлавное;
	Иначе	
		ТекущаяСтраница = Элементы.ГруппаСтраницаАлгоритм;
	КонецЕсли; 
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;

	Если Параметры.Свойство("Действие") И Параметры.Действие = "ПерезапускПроцесса" Тогда
		ВыполнитьПерезапускПроцесса();
	КонецЕсли; 
	
	// Список полей задачи, отображаемых в панели свойств.
	СписокПолейСвойства.Добавить("Задача");
	СписокПолейСвойства.Добавить("Важность");
	СписокПолейСвойства.Добавить("Автор");
	СписокПолейСвойства.Добавить("Исполнитель");
	СписокПолейСвойства.Добавить("Наименование");
	СписокПолейСвойства.Добавить("Описание");
	СписокПолейСвойства.Добавить("Предмет");
	СписокПолейСвойства.Добавить("Состояние");
	СписокПолейСвойства.Добавить("Процесс");

	ПоказыватьСрокиИсполненияЗадач = ХранилищеОбщихНастроек.Загрузить(Метаданные.БизнесПроцессы.бит_уп_Процесс.ПолноеИмя(), 
	             					 	"ПоказыватьСрокиИсполненияЗадач");
	
	ОбновитьАлгоритм();
	УправлениеГруппойПараметры();
	ОтобразитьДлительность();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьУсловноеОформление();
	УправлениеФормой();
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьАлгоритм();
    ОтобразитьДлительность();	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущееДействие = "Остановить" Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Остановить");
		ТекущийОбъект = "";
		
	ИначеЕсли ТекущееДействие = "Продолжить" Тогда	
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Продолжить");
		ТекущийОбъект = "";		
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АлгоритмПриИзменении(Элемент)
	
	ПриИзмененииАлгоритмаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокАлгоритмОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Расшифровка.Задача) Тогда
			
			Оповещение = Новый ОписаниеОповещения("ЗакрытиеЗадачиОповещение",ЭтотОбъект);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ",Расшифровка.Задача);
			ОткрытьФорму("Задача.бит_уп_Задача.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
// 
&НаКлиенте
Процедура ЗакрытиеЗадачиОповещение(Результат, ДополнительныеПараметры)  Экспорт
	
	ОбновитьАлгоритм();
	ОтобразитьИзменениеДанных(Объект.Состояние, ВидИзмененияДанных.Изменение);
	ОтобразитьИзменениеДанных(Объект.ДатаОкончанияИсполнения, ВидИзмененияДанных.Изменение);
	ОбновитьОтображениеДанных();
	
КонецПроцедуры // ОткрытиеФормыЗадачиОповещение()

&НаКлиенте
Процедура ТабДокАлгоритмПриАктивизацииОбласти(Элемент)
	
	флСброситьПанель = Истина;
	ТекущаяОбласть = ТабДокАлгоритм.ТекущаяОбласть;
	
	Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		 Если ТипЗнч(ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда
		 	 Расш = ТекущаяОбласть.Расшифровка;
			 Если ЗначениеЗаполнено(Расш.Задача) Тогда
			 	  ЗаполнитьЗначенияПанелиСвойств(Расш.Задача);
				  флСброситьПанель = Ложь;
			 КонецЕсли; 
		 КонецЕсли; 
	КонецЕсли; 
	
	Если флСброситьПанель Тогда
		СброситьЗначенияПанелиСвойств();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Свойства_Задача) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеЗадачиОповещение",ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",Свойства_Задача);
		ОткрытьФорму("Задача.бит_уп_Задача.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкаАвтоНадписьНажатие(Элемент)
	
	Обл = ТабДокАлгоритм.ТекущаяОбласть;
	
	Если ТипЗнч(Обл) = Тип("РисунокТабличногоДокумента") Тогда
	
		 Если ТипЗнч(Обл.Расшифровка) = Тип("Структура") Тогда
		 
		 	 Расш = Обл.Расшифровка;
			 
			 Если ЗначениеЗаполнено(Расш.Задача) Тогда
				 
				 ПараметрыФормы = Новый Структура;
				 ПараметрыФормы.Вставить("Задача", Расш.Задача);
				 
				 ОткрытьФорму("РегистрСведений.бит_уп_ПротоколВыполненияАвтоДействийПроцесса.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
				 
			 КонецЕсли; 
		 
		 КонецЕсли; 
	
	КонецЕсли; 

	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСрокиИсполненияПриИзменении(Элемент)
	
	ОбновитьАлгоритм();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафическаяСхемаВыбор(Элемент)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	Если Элементы.ГрафическаяСхема.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КодТочки = Элементы.ГрафическаяСхема.ТекущийЭлемент.Имя;
	СтрокаТаблицыТочек = Неопределено;
	
	// Выполняем сканирование, что бы избежать серверного вызова при поиске в таблице.
	Для каждого СтрокаТаблицы Из ТаблицаТочкиВизы Цикл
		Если СтрокаТаблицы.КодТочки = КодТочки Тогда
			СтрокаТаблицыТочек = СтрокаТаблицы;
			Прервать;		
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокаТаблицыТочек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (СтрокаТаблицыТочек.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие")
	 ИЛИ СтрокаТаблицыТочек.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс")) Тогда
		Возврат;	 
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТаблицыТочек.Задача) Тогда
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеЗадачиОповещение", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", СтрокаТаблицыТочек.Задача);
		ОткрытьФорму("Задача.бит_уп_Задача.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафическаяСхемаПриАктивизации(Элемент)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли; 
	
	Если Элементы.ГрафическаяСхема.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КодТочки = Элементы.ГрафическаяСхема.ТекущийЭлемент.Имя;
	СтрокаТаблицыТочек = Неопределено;
	
	// Выполняем сканирование, что бы избежать серверного вызова при поиске в таблице.
	Для каждого СтрокаТаблицы Из ТаблицаТочкиВизы Цикл
		Если СтрокаТаблицы.КодТочки = КодТочки Тогда
			СтрокаТаблицыТочек = СтрокаТаблицы;
			Прервать;		
		КонецЕсли;
	КонецЦикла; 
	
	Если СтрокаТаблицыТочек = Неопределено Тогда
		СброситьЗначенияПанелиСвойств();
		Возврат;
	КонецЕсли;
	
	Если НЕ (СтрокаТаблицыТочек.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие") 
	 ИЛИ СтрокаТаблицыТочек.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс")) Тогда
		СброситьЗначенияПанелиСвойств();
		Возврат;	 
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТаблицыТочек.Задача) Тогда
		ЗаполнитьЗначенияПанелиСвойств(СтрокаТаблицыТочек.Задача);
	Иначе
		СброситьЗначенияПанелиСвойств();	
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыпроцесса

&НаКлиенте
Процедура ПараметрыПроцессаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПараметрыПроцесса.ТекущиеДанные;
	Элемент.ВыбиратьТип = ?(ТекущаяСтрока.Значение = Неопределено, Истина, Ложь);
	Элемент.ОграничениеТипа = ТекущаяСтрока.Тип;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ПараметрыПроцесса.ТекущиеДанные;
	ТекущаяСтрока.Значение = ТекущаяСтрока.Тип.ПривестиЗначение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПроцесса.ТекущиеДанные;
	ТекущиеДанные.Значение = Элементы.ПараметрыПроцессаЗначение.ОграничениеТипа.ПривестиЗначение(ТекущиеДанные.Значение);
 	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПараметрыПроцесса.ТекущиеДанные;
	Элемент.ТекущийЭлемент.ОграничениеТипа = ТекущиеДанные.Тип;
	
	Если ТекущиеДанные.ОтображениеДаты = 1 Тогда
	
		Элементы.ПараметрыПроцессаЗначение.ФорматРедактирования = "ДФ=dd.MM.yyyy";
		
	ИначеЕсли ТекущиеДанные.ОтображениеДаты = 2 Тогда
		
		Элементы.ПараметрыПроцессаЗначение.ФорматРедактирования = "ДЛФ=DT";
		
	ИначеЕсли ТекущиеДанные.ОтображениеДаты = 3 Тогда
		
		Элементы.ПараметрыПроцессаЗначение.ФорматРедактирования = "ДЛФ=T";
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СозданныеДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СозданныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Стр = СозданныеДокументы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ Стр = Неопределено
		И НЕ ТипЗнч(Стр.Предмет) = Тип("Строка") Тогда
		ПоказатьЗначение(,Стр.Предмет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьАлгоритм(Команда)
	
	ОбновитьАлгоритм();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИсториюСостояний(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.Форма.ФормаИсторияСостоянийЗадач",ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьПараметры(Команда)
	
	Если Объект.ПараметрыПроцесса.Количество() > 0 Тогда
		// Необходимо спросить пользователя
		Оповещение = Новый ОписаниеОповещения("ОбновитьПараметрыЗавершение",ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Параметры будут перезаполнены. Продолжить?'");		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе	
		// Безусловное заполнение
		ЗаполнитьПараметрыПроцесса();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
// 
&НаКлиенте
Процедура ОбновитьПараметрыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьПараметрыПроцесса();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОстановить(Команда)
	
	ОстановитьВозобновитьПроцесс();
	
	ОповеститьОбИзменении(Тип("БизнесПроцессСсылка.бит_уп_Процесс"));
	ОповеститьОбИзменении(Тип("ЗадачаСсылка.бит_уп_Задача"));		
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетСтатусПроцесса(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтчетСтатусПроцессаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		ТекстВопроса =  НСтр("ru = 'Для продолжения необходимо записать процесс. Записать?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);		
	Иначе		
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
// 
&НаКлиенте
Процедура ОтчетСтатусПроцессаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 	
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	Успех = Записать();	
	Если Успех Тогда
		ОткрытьОтчетСтатусПроцесса();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	РежимПриИзмененииНаСервере();
КонецПроцедуры

// Процедура распроводит все документы, прикрепленные к задачам и отменяет выполнение задач. 
//
&НаСервере
Процедура РаспровестиВсе()

	 ТабЗадачи = БизнесПроцессы.бит_уп_Процесс.ПолучитьЗадачиПроцесса(Объект.Ссылка);
	 
	 Для каждого СтрокаТаблицы Из ТабЗадачи Цикл
	 
	 	Предмет = СтрокаТаблицы.Задача.Предмет;
		
		// Распроводим проведенные документы.
		Если ЗначениеЗаполнено(Предмет) Тогда
		
			 МетаПредмет = Предмет.Метаданные();
			 Имена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(МетаПредмет.ПолноеИмя());
			 
			 Если Имена.ИмяКласса = "Документ" И Предмет.Проведен Тогда
			 
				 ПредметОбъект = Предмет.ПолучитьОбъект();
				 бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПредметОбъект, РежимЗаписиДокумента.ОтменаПроведения,"","Ошибки",Ложь);
			 
			 КонецЕсли; 
		
		КонецЕсли; 
		
		// Отменяем выполнение задач.
		Если СтрокаТаблицы.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Выполнена Тогда
		
			Задачи.бит_уп_Задача.Отменить(СтрокаТаблицы.Задача, Истина);
		
		КонецЕсли; 
		
	 КонецЦикла; // по ТабЗадачи

КонецПроцедуры // РаспровестиВсе()

&НаКлиенте
Процедура КомандаРаспровестиВсе(Команда)
	
	РаспровестиВсе();
	
	ОбновитьАлгоритм();
	ОтобразитьИзменениеДанных(Объект.Состояние, ВидИзмененияДанных.Изменение);
	ОтобразитьИзменениеДанных(Объект.ДатаОкончанияИсполнения, ВидИзмененияДанных.Изменение);
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСозданныеДокументы(Команда)
	ОбновитьСозданныеДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ОбзорСхемы(Команда)
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("ГрафическаяСхема", ГрафическаяСхема);
	
	ОткрытьФорму("Справочник.бит_уп_Алгоритмы.Форма.ОбзорСхемы", ПараметрыФормы, 
		ЭтотОбъект, Объект.Ссылка);
		
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьПерезапускПроцесса()
		
	Объект.Режим 			= Перечисления.бит_уп_РежимыПроцессов.Перезапуск;
	Объект.ПроцессОснование = Параметры.Процесс;
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Процесс, 
		"Алгоритм, Состояние, ВедущаяЗадача, ПараметрыПроцесса");
	
	Объект.Алгоритм = Объект.ПроцессОснование.Алгоритм;
	Объект.РежимАдресацииАвтоматическихЗадач = Перечисления.бит_уп_РежимыАдресацииАвтоматическихЗадач.АдминистраторПроцесса;
	
	Если Объект.Режим = Перечисления.бит_уп_РежимыПроцессов.Перезапуск
		И РеквизитыОснования.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Остановлен
		И ЗначениеЗаполнено(РеквизитыОснования.ВедущаяЗадача) Тогда
		
		Объект.ВедущаяЗадача = РеквизитыОснования.ВедущаяЗадача;
		
		ПроцессПодчиненный = Задачи.бит_уп_Задача.НайтиПодчиненныйПроцесс(РеквизитыОснования.ВедущаяЗадача);
		ПроцессОбъект = ПроцессПодчиненный.ПолучитьОбъект();
		ПроцессОбъект.ВедущаяЗадача = Задачи.бит_уп_Задача.ПустаяСсылка();
		ПроцессОбъект.Записать();
	КонецЕсли; 
	
	Выборка = РеквизитыОснования.ПараметрыПроцесса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ПараметрыПроцесса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для каждого СтрокаТаблицы Из Объект.ПараметрыПроцесса Цикл
		УстановитьОтображениеДатыВСтроке(СтрокаТаблицы);
		СтрокаТаблицы.Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.СтрТип);
	КонецЦикла;	
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// ПараметрыПроцессаЗначение.ОтметкаНезаполненного
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрыПроцессаЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПараметрыПроцесса.Обязательный", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПараметрыПроцесса.Значение", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	// ПараметрыПроцессаЗначение.Формат1
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрыПроцессаЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПараметрыПроцесса.ОтображениеДаты", ВидСравненияКомпоновкиДанных.Равно, 1);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "Л=ru_RU; ДФ=dd.MM.yyyy");
	
	// ПараметрыПроцессаЗначение.Формат2
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрыПроцессаЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПараметрыПроцесса.ОтображениеДаты", ВидСравненияКомпоновкиДанных.Равно, 2);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "Л=ru_RU; ДЛФ=DT");
	
	// ПараметрыПроцессаЗначение.Формат3
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПараметрыПроцессаЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПараметрыПроцесса.ОтображениеДаты", ВидСравненияКомпоновкиДанных.Равно, 3);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "Л=ru_RU; ДЛФ=T");
	
КонецПроцедуры
 
// Процедура отображает длительность выполнения задачи.
// 
&НаСервере
Процедура ОтобразитьДлительность()
	
	Если Объект.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Завершен Тогда
		
		ДатаНач = Объект.ДатаНачалаИсполнения;
		ДатаКон = Объект.ДатаОкончанияИсполнения;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Состояние) Тогда
		
		ДатаНач = Объект.ДатаНачалаИсполнения;
		ДатаКон = ТекущаяДата();
		
	Иначе	
		
		ДатаНач = 0;
		ДатаКон = 0;
		
	КонецЕсли; 
	
	Разность = ДатаКон - ДатаНач;
	
	Время = бит_ОбщегоНазначенияКлиентСервер.СекундыВоВремя(Разность);
	
	СтрШаблон = " %1% %2%";
	
	СтрДни = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрШаблон
                                                                           , Время.Дни
                                                                           , бит_ОбщегоНазначенияКлиентСервер.ПрописьПериода(Время.Дни, "День"));
	
																				   
	СтрЧасы = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрШаблон
                                                                           , Время.Часы
                                                                           , бит_ОбщегоНазначенияКлиентСервер.ПрописьПериода(Время.Часы, "Час"));
	
	СтрМинуты = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрШаблон
                                                                           , Время.Минуты
                                                                           , бит_ОбщегоНазначенияКлиентСервер.ПрописьПериода(Время.Минуты, "Минута"));
	
																				   
	СтрДлительность = СтрДни+СтрЧасы+СтрМинуты;
	
	
	Элементы.ДекорацияДлительность.Заголовок = СтрДлительность;
	
КонецПроцедуры // ОтобразитьДлительность()

// Функция возвращает имя поля из группы свойств.
// 
// Параметры:
//  ИмяРеквизита - Строка
// 
// Возвращаемое значение:
//  ИмяПоля - Строка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляСвойств(ИмяРеквизита)

	ИмяПоля = "Свойства_"+ИмяРеквизита;
	
	Возврат ИмяПоля;
	
КонецФункции // ИмяПоляСвойств()

// Процедура сбрасывает значения реквизитов, отображающих свойства задачи.
// 
&НаКлиенте
Процедура СброситьЗначенияПанелиСвойств()
	
	Для каждого Элемент Из СписокПолейСвойства Цикл
		
		ИмяПоля             = ИмяПоляСвойств(Элемент.Значение);
		ЭтотОбъект[ИмяПоля] = Неопределено;
		
	КонецЦикла; 
	
	Элементы.ГруппаОшибкиАвтоДействий.Видимость = Ложь;
	
КонецПроцедуры // СброситьЗначенияПанелиСвойств()

// Процедура устанавливает видимость табличного поля со схемой алгоритма.
// 
&НаКлиенте
Процедура УстановитьВидимостьАлгоритма()
	
	// В Web-клиенте рисунки табличного документа отображаются некорректно...
	# Если ВебКлиент Тогда
		Элементы.ГруппаСтраницаАлгоритм.Видимость = Ложь;
	# КонецЕсли
	
КонецПроцедуры // УстановитьВидимостьАлгоритма()

// Процедура открывает форму отчета статус процесса. 
// 
&НаКлиенте
Процедура ОткрытьОтчетСтатусПроцесса()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Процесс", Объект.Ссылка);
	
	ОткрытьФорму("Отчет.бит_ОтчетСтатусПроцесса.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры // ОткрытьОтчетСтатусПроцесса()

// Процедура выполняет обновление отображения алгоритма процесса. 
// 
&НаСервере
Процедура ОбновитьАлгоритм()
	
	ГрафическаяСхема = Новый ГрафическаяСхема;
	
	Если ЗначениеЗаполнено(Объект.Алгоритм) Тогда
		
		ХранилищеОбщихНастроек.Сохранить(Метаданные.БизнесПроцессы.бит_уп_Процесс.ПолноеИмя() 
		             					 ,"ПоказыватьСрокиИсполненияЗадач" 
										 ,ПоказыватьСрокиИсполненияЗадач);
		ТочкиИЗадачи = Неопределено;
		бит_уп_Сервер.НарисоватьАлгоритмПроцесса(ТабДокАлгоритм, Объект.Алгоритм, Объект.Ссылка, ПоказыватьСрокиИсполненияЗадач, ТочкиИЗадачи);
		
		ТаблицаТочкиВизы.Загрузить(ТочкиИЗадачи);
		
		// Версия схемы = 2
		РеквизитыАлгоритма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Алгоритм, 
			"ВерсияСхемы, КартаМаршрута");
		
		Если РеквизитыАлгоритма.ВерсияСхемы = 2 Тогда
			ГрафическаяСхема = РеквизитыАлгоритма.КартаМаршрута.Получить();
			Для каждого СтрокаТаблицы Из ТаблицаТочкиВизы Цикл
				Если СтрокаТаблицы.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие 
				 ИЛИ СтрокаТаблицы.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс Тогда
					ВыделитьЭлементСхемы(СтрокаТаблицы);
					ПоказатьСрокиИсполненияЗадач(СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
		
		Элементы.ТабДокАлгоритм.Видимость   = НЕ РеквизитыАлгоритма.ВерсияСхемы = 2;
		Элементы.ГрафическаяСхема.Видимость = РеквизитыАлгоритма.ВерсияСхемы = 2;
	Иначе
		Элементы.ТабДокАлгоритм.Видимость   = Ложь;
		Элементы.ГрафическаяСхема.Видимость = Истина;
	КонецЕсли; 
	
	ОбновитьСозданныеДокументы();
	
КонецПроцедуры // ОбновитьАлгоритм()

&НаСервере
Процедура ВыделитьЭлементСхемы(ПараметрыТочки)
	
	Активные = Новый Массив(); 
	Активные.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Создана);
	Активные.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Просрочена);
	Активные.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Принята);
	
	Выполненные = Новый Массив(); 
	Выполненные.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Выполнена);
	Выполненные.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Отменена);
	
	Ожидание = Новый Массив();
	Ожидание.Добавить(Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
	Ожидание.Добавить(Справочники.бит_СтатусыОбъектов.Задача_Остановлена);
	
	Если Активные.Найти(ПараметрыТочки.Состояние) <> Неопределено Тогда
		passageState = "2";
	ИначеЕсли Выполненные.Найти(ПараметрыТочки.Состояние) <> Неопределено Тогда
		passageState = "1";
	ИначеЕсли Ожидание.Найти(ПараметрыТочки.Состояние) <> Неопределено Тогда
		passageState = "0";
	КонецЕсли;
	
	бит_УправлениеПроцессамиКлиентСервер.ВыделитьЭлемент(ГрафическаяСхема, 
		ПараметрыТочки.ИдентификаторТочки, passageState);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСрокиИсполненияЗадач(ПараметрыТочки)

	Если НЕ ПоказыватьСрокиИсполненияЗадач Тогда
		Возврат;		
	КонецЕсли; 

	ДокументDOM = бит_УправлениеПроцессамиКлиентСервер.ГрафическаяСхемаВDOM(ГрафическаяСхема);
	
	ИдентификаторТочки = Строка(ПараметрыТочки.ИдентификаторТочки);
	УзелТочкиМаршрута  = бит_УправлениеПроцессамиКлиентСервер.ЭлементПоЗначениюСвойства(ДокументDOM, "itemId", ИдентификаторТочки);
	
	Если УзелТочкиМаршрута = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	content = бит_УправлениеПроцессамиКлиентСервер.ЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "content");
	content = content + Символы.ПС + Нстр("ru = 'до '") 
			+ Формат(ПараметрыТочки.ДатаОкончания, "ДФ='dd.MM.yyyy HH:mm'; ДП=<неограничено>");
			
	бит_УправлениеПроцессамиКлиентСервер.УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "content", content);
	
	ГрафическаяСхема = бит_УправлениеПроцессамиКлиентСервер.ГрафическаяСхемаИзDOM(ДокументDOM);
	
КонецПроцедуры
 
// Процедура обрабатывает изменение алгоритма процесса. 
// 
&НаСервере
Процедура ПриИзмененииАлгоритмаНаСервере()
	
	Попытка
		Если ЗначениеЗаполнено(Объект.Алгоритм) Тогда
			БизнесПроцессы.бит_уп_Процесс.ЗаполнитьПоАлгоритму(Объект, Объект.Алгоритм);
		Иначе
			Объект.ПараметрыПроцесса.Очистить();
		КонецЕсли;
	Исключение
		Объект.Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ОбновитьАлгоритм();
	УправлениеГруппойПараметры();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПараметрыПроцесса() 
	
	Объект.ПараметрыПроцесса.Очистить();
	Если НЕ ЗначениеЗаполнено(Объект.Алгоритм) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыАлгоритма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Алгоритм, "ПараметрыАлгоритма").Выбрать();
	Пока ПараметрыАлгоритма.Следующий() Цикл
		
		НоваяСтрока = Объект.ПараметрыПроцесса.Добавить();
		НоваяСтрока.Имя          = ПараметрыАлгоритма.Имя;
		НоваяСтрока.СтрТип       = ПараметрыАлгоритма.СтрТип;
		НоваяСтрока.Значение     = ПараметрыАлгоритма.ЗначениеПоУмолчанию;
		НоваяСтрока.Обязательный = ПараметрыАлгоритма.Обязательный И НЕ ПараметрыАлгоритма.Динамический;
		
		НоваяСтрока.Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(НоваяСтрока.СтрТип);
		
		УстановитьОтображениеДатыВСтроке(НоваяСтрока);
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполняет значения реквизитов формы, отображающих свойства задачи.
// 
// Параметры:
//  ВхЗадача - ЗадачаСсылка.бит_уп_Задача.
// 
&НаСервере
Процедура ЗаполнитьЗначенияПанелиСвойств(ВхЗадача)
	
	Элементы.ГруппаОшибкиАвтоДействий.Видимость = Задачи.бит_уп_Задача.ЕстьНевыполненныеАвтоДействия(ВхЗадача);
	
	Для каждого Элемент Из СписокПолейСвойства Цикл
		ИмяРеквизита = Элемент.Значение;
		ИмяПоля      = ИмяПоляСвойств(Элемент.Значение);
		Если ИмяРеквизита = "Задача" Тогда
			ТекЗначение = ВхЗадача;
		ИначеЕсли ИмяРеквизита = "Процесс" Тогда
			ТекЗначение = Задачи.бит_уп_Задача.НайтиПодчиненныйПроцесс(ВхЗадача);
		Иначе	
			ТекЗначение = ВхЗадача[ИмяРеквизита];
		КонецЕсли; 
		ЭтотОбъект[ИмяПоля] = ТекЗначение;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура выполняет остановку/возобновление процесса. 
// 
&НаСервере
Процедура ОстановитьВозобновитьПроцесс()

	Если Объект.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Активный Тогда
		 ТекущееДействие = "Остановить";
	ИначеЕсли Объект.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Остановлен Тогда	
		 ТекущееДействие = "Продолжить";
	КонецЕсли; 

	Если НЕ ПустаяСтрока(ТекущееДействие) Тогда
		Записать();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УправлениеФормой()
	
	ЭтоПерезапуск = ?(Объект.Режим = Перечисления.бит_уп_РежимыПроцессов.Перезапуск, Истина, Ложь);
	
	Элементы.ФормаКомандаОстановить.Заголовок = ?(Объект.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Остановлен, "Продолжить", "Остановить");
	флОстПрод = ?(Объект.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Активный 
	               ИЛИ объект.Состояние = Справочники.бит_СтатусыОбъектов.Процесс_Остановлен, Истина, Ложь);
	
	Элементы.ФормаКомандаОстановить.Видимость = флОстПрод;									
	
	Элементы.ПроцессОснование.Видимость = ЭтоПерезапуск;
	Элементы.РежимАдресацииАвтоматическихЗадач.Видимость = ЭтоПерезапуск;
	Элементы.РежимАдресацииАвтоматическихЗадач.АвтоОтметкаНезаполненного = Истина;
	
	Элементы.ФормаСтарт.ЦветФона= WebЦвета.СветлоЗеленый;
	
	ПроцессСтартовал = Объект.Стартован;
	Элементы.ФормаСтарт.Видимость = НЕ ПроцессСтартовал;
	Элементы.ФормаСтартИЗакрыть.Видимость = НЕ ПроцессСтартовал;
	
КонецПроцедуры

&НаСервере
Процедура РежимПриИзмененииНаСервере()
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНевыполненныеЗадачи()

	ЗадачиПроцесса = Новый Массив;
	
	флЕстьНевыполненныеАвтоДействия = Задачи.бит_уп_Задача.ЕстьНевыполненныеАвтоДействия(Объект.Ссылка);
	
	Если флЕстьНевыполненныеАвтоДействия Тогда
		
		// Есть невыполненные автоматические действия. Нужно решить проблемы руками.
		ТекстСообщения =  НСтр("ru = 'Обнаружены невыполненные автоматические действия. 
		|Для продолжения выполните необходимые действия вручную, отметьте выполнение в протоколе и повторно запустите авто-выполнение.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	Иначе	
		ТабЗадач       = БизнесПроцессы.бит_уп_Процесс.ПолучитьЗадачиПроцесса(Объект.Ссылка, Ложь);
		ЗадачиПроцесса = ТабЗадач.ВыгрузитьКолонку("Задача");
	КонецЕсли; 
	
	Возврат ЗадачиПроцесса;
	
КонецФункции // ПолучитьНевыполненныеЗадачи()

&НаСервереБезКонтекста
Функция ВыполнитьЗадачуВФоне(вхЗадача, Процесс)

	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(вхЗадача);
	
	НаименованиеЗадания = "Выполнение задачи %1% процесса %2%";
	НаименованиеЗадания = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НаименованиеЗадания,вхЗадача,Процесс);
	
	КлючЗадания = Строка(вхЗадача.УникальныйИдентификатор());
	
	ФЗ = ФоновыеЗадания.Выполнить("бит_уп_Сервер.ВыполнитьЗадачу", ПараметрыЗадания, КлючЗадания,НаименованиеЗадания);
	
	ИдЗадания = Строка(ФЗ.УникальныйИдентификатор);
	
	Возврат ИдЗадания;
	
КонецФункции // ВыполнитьЗадачу()

&НаКлиенте
Процедура ВыполнитьЗадачиВФоне()
	
	НевыполненныеЗадачи = ПолучитьНевыполненныеЗадачи();
	
	Если НевыполненныеЗадачи.Количество() > 0 Тогда
		ОтключитьОбработчикОжидания("ОжиданиеВыполненияФоновогоЗадания");
		ИдФоновогоЗадания = ВыполнитьЗадачуВФоне( НевыполненныеЗадачи[0], Объект.Ссылка);
		ПодключитьОбработчикОжидания("ОжиданиеВыполненияФоновогоЗадания", 1);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдФоновогоЗадания); 
	Иначе
		Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") И ФормаДлительнойОперации.Открыта() Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ВыполнитьЗадачиВФоне()

&НаКлиенте
Процедура КомандаВыполнитьВсе(Команда)
	Если Не Параметры.Ключ.Пустая() Тогда
		ОчиститьСообщения();
		ВыполнитьЗадачиВФоне();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеВыполненияФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдФоновогоЗадания) Тогда
		
		РезСтруктура = ОбработкаРезультатаФоновогоЗадания();
				
		Если РезСтруктура.ОтключитьОбработчик Тогда
			
			ОтключитьОбработчикОжидания("ОжиданиеВыполненияФоновогоЗадания");			
			ОбновитьАлгоритм();
			ОбновитьОтображениеДанных();
			
			Если ФормаДлительнойОперации.Открыта() Тогда
					ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли; 

			Если РезСтруктура.Состояние = "Завершено" Тогда
				ВыполнитьЗадачиВФоне();
			ИначеЕсли РезСтруктура.Состояние = "Ошибка" Тогда
				
				//Если ФормаДлительнойОперации.Открыта() Тогда
				//	ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				//КонецЕсли; 
				
				ОтобразитьИзменениеДанных(Объект.Состояние, ВидИзмененияДанных.Изменение);
				ТекстСообщения =  СтрШаблон(НСтр("ru = 'Автоматическое выполнение остановлено. %1'"), РезСтруктура.Сообщение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Для каждого Сообщение Из РезСтруктура.НакопленныеСообщения Цикл
				    Сообщение.Сообщить();				
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли; 
	Иначе	
		ОтключитьОбработчикОжидания("ОжиданиеВыполненияФоновогоЗадания");			
		Если ФормаДлительнойОперации.Открыта() Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ОжиданиеВыполненияФоновогоЗадания()
	
&НаСервере
Функция ОбработкаРезультатаФоновогоЗадания()
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Состояние","Выполняется");
	РезультатОбработки.Вставить("ОтключитьОбработчик",Ложь);
	РезультатОбработки.Вставить("Наименование","");
	РезультатОбработки.Вставить("Сообщение","");
	РезультатОбработки.Вставить("НакопленныеСообщения",Новый Массив());
	
	УИД = Новый УникальныйИдентификатор(ИдФоновогоЗадания);
	ТекФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УИД);
	
	// Сообщить(Строка(ТекФоновоеЗадание.Наименование)+" "+ТекФоновоеЗадание.Состояние+" "+ТекущаяДата());
	
	Если ТипЗнч(ТекФоновоеЗадание) = Тип("ФоновоеЗадание") Тогда
		РезультатОбработки.Состояние 	  = "Выполняется";
		РезультатОбработки.Наименование = ТекФоновоеЗадание.Наименование;
		Если ТекФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			
			ОтборЗаданий = Новый Структура;
			ОтборЗаданий.Вставить("Состояние",СостояниеФоновогоЗадания.Активно);
			ОтборЗаданий.Вставить("ИмяМетода","бит_уп_Сервер.ВыполнитьАвтоматическиеДействия");
			ОтборЗаданий.Вставить("Наименование", Объект.Ссылка.УникальныйИдентификатор());
			
			ЗаданияАвтоДействий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
			
			Если ЗаданияАвтоДействий.Количество() > 0 Тогда
				// Ждем завершения фоновых заданий автоматических действий
				КоличествоЦикловОжидания = КоличествоЦикловОжидания + 1;				
				Если КоличествоЦикловОжидания > 100 Тогда
				    РезультатОбработки.Состояние = "Ошибка";	
				    РезультатОбработки.ОтключитьОбработчик = Истина;						
					РезультатОбработки.Сообщение =  НСтр("ru = 'Превышено время ожидания завершения выполнения автоматических действий.'");
					КоличествоЦикловОжидания = 0;
				КонецЕсли; 
			Иначе	
				
				ИдФоновогоЗадания = "";
				РезультатОбработки.ОтключитьОбработчик = Истина;	
				РезультатОбработки.Состояние = "Завершено";
				
				// Проверка выполнения автоматических действий
				флЕстьОшибки = Задачи.бит_уп_Задача.ЕстьНевыполненныеАвтоДействия(Объект.Ссылка);
				Если флЕстьОшибки Тогда
				    РезультатОбработки.Состояние = "Ошибка";					
					РезультатОбработки.Сообщение =  НСтр("ru = 'Обнаружены ошибки автоматических действий.'");
				КонецЕсли; 
				КоличествоЦикловОжидания = 0;
			КонецЕсли; 
			
		ИначеЕсли ТекФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно 
				  ИЛИ ТекФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда	
				  
		  ИдФоновогоЗадания = "";
		  РезультатОбработки.ОтключитьОбработчик = Истина;
		  РезультатОбработки.Состояние = "Ошибка";
		  
		  РезультатОбработки.Сообщение = НСтр("ru = 'Ошибка выполнения фонового задания %1.'"); 
		  РезультатОбработки.Сообщение = СтрШаблон(РезультатОбработки.Сообщение, ТекФоновоеЗадание.Наименование);
		  
		  РезультатОбработки.НакопленныеСообщения = ТекФоновоеЗадание.ПолучитьСообщенияПользователю(); 
		  КоличествоЦикловОжидания = 0;
		  
	    ИначеЕсли ТекФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда  
		  
			// Ничего не делаем. Ждем завершения задания.
			КоличествоЦикловОжидания = КоличествоЦикловОжидания + 1;
			Если КоличествоЦикловОжидания > 100 Тогда
				РезультатОбработки.Состояние = "Ошибка";	
				РезультатОбработки.ОтключитьОбработчик = Истина;										
				РезультатОбработки.Сообщение =  НСтр("ru = 'Превышено время ожидания завершения выполнения автоматических действий.'");
				КоличествоЦикловОжидания = 0;
			КонецЕсли; 
		КонецЕсли; 
	Иначе	
		ИдФоновогоЗадания 				 = "";	
		РезультатОбработки.Состояние 			 = "Завершено";
		РезультатОбработки.ОтключитьОбработчик = Истина;
	КонецЕсли; 
	
	Возврат РезультатОбработки;
	
КонецФункции // ОбработкаРезультатаФоновогоЗадания()

&НаСервере
Процедура УстановитьОтображениеДатыВСтроке(НоваяСтрока)

	Если НоваяСтрока.Тип = Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Дата)) Тогда
		НоваяСтрока.ОтображениеДаты = 1;
	ИначеЕсли НоваяСтрока.Тип = Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)) Тогда	
		НоваяСтрока.ОтображениеДаты = 2;
	ИначеЕсли НоваяСтрока.Тип = Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.Время)) Тогда	
		НоваяСтрока.ОтображениеДаты = 3;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УправлениеГруппойПараметры()

	Если Объект.Алгоритм.ПараметрыАлгоритма.Количество() > 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПараметры;
	Иначе	
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаАлгоритм;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСозданныеДокументы()

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	СозданныеДокументы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_уп_Задача.Предмет КАК Предмет
	|ИЗ
	|	Задача.бит_уп_Задача КАК бит_уп_Задача
	|ГДЕ
	|	бит_уп_Задача.БизнесПроцесс = &БизнесПроцесс
	|	И бит_уп_Задача.Предмет <> НЕОПРЕДЕЛЕНО";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СозданныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если ЗначениеЗаполнено(Выборка.Предмет) Тогда
			Если ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Выборка.Предмет.Метаданные()) = "Документы" Тогда
				
				Стр = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.Предмет,"ПометкаУдаления, Проведен");
				Если Стр.ПометкаУдаления Тогда
					НоваяСтрока.Картинка = БиблиотекаКартинок.ДокументПомеченНаУдалениеКоннекторНиз;
				ИначеЕсли Стр.Проведен Тогда 	
					НоваяСтрока.Картинка = БиблиотекаКартинок.ДокументПроведенКоннекторНиз;
				Иначе
					НоваяСтрока.Картинка = БиблиотекаКартинок.ДокументЗаписанКоннекторНиз;
				КонецЕсли; 
			Иначе	
				ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Предмет,"ПометкаУдаления");
				Если ПометкаУдаления Тогда
					НоваяСтрока.Картинка = БиблиотекаКартинок.СправочникПВХПомеченНаУдалениеКоннекторНиз;
				Иначе	
					НоваяСтрока.Картинка = БиблиотекаКартинок.СправочникПВХКоннекторНиз;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти



