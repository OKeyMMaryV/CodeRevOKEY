
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийВидЗапроса; // Хранит текущий вид запроса.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	
	// Вызов механизма защиты
	 	
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	// Автоматические REST сервисы доступны только начиная с версии 8.3.5.1.
	ТекВерсияПлатформы = бит_ОбщегоНазначенияКлиентСервер.ВерсияПлатформы();
	КонтрольнаяВерсия = "8.3.5.1";
	
	фВерсияСтарше835 = бит_ОбщегоНазначенияКлиентСервер.ВерсияОбновленияСтарше(КонтрольнаяВерсия, ТекВерсияПлатформы);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	мТекущийВидЗапроса = Объект.Вид;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ТекущийОбъект.Вид = ПредопределенноеЗначение("Перечисление.бит_мпд_ВидыЗапросов.ЗапросHTTP") Тогда
		
		ТекстСообщения = "";
		ПроверитьСинтаксисСервер(ТекстСообщения, Истина);
		ВывестиТекстСообщенийПользователю(ТекстСообщения, Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписьюНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидИнформационнойБазыПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ВидИнформационнойБазыПриИзменении()

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТекстЗапроса) Тогда
		
		ТекстВопроса =  НСтр("ru = 'Текст запроса будет очищен. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ВидВопросЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе
		
		мТекущийВидЗапроса = Объект.Вид;
		ВидПриИзмененииНаСервере();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ВидВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВидВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		мТекущийВидЗапроса = Объект.Вид;
		ВидПриИзмененииНаСервере();
		
	Иначе
		
		Объект.Вид = мТекущийВидЗапроса;
		
	КонецЕсли; 
	
КонецПроцедуры	// ВидВопросЗавершение 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	НовыйКонструкторЗапроса = Новый КонструкторЗапроса;
		
	Попытка
		
		Если Объект.ТекстЗапроса <> "" Тогда
			НовыйКонструкторЗапроса.Текст = Объект.ТекстЗапроса;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("КонструкторЗапросаЗавершение", ЭтотОбъект);
		НовыйКонструкторЗапроса.Показать(Оповещение);
		
	Исключение			
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ОписаниеОшибки());
		
	КонецПопытки; 
	
КонецПроцедуры // КонструкторЗапроса()

// Процедура обработчик оповещения "КонструкторЗапросаЗавершение".
//
// Параметры:
// РезТекстЗапроса - Строка
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура КонструкторЗапросаЗавершение(РезТекстЗапроса, ДополнительныеДанные) Экспорт

	Если НЕ РезТекстЗапроса = Неопределено Тогда
	
		 Объект.ТекстЗапроса = РезТекстЗапроса;
		 Модифицированность = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры	// КонструкторЗапросаЗавершение

&НаКлиенте
Процедура ЗапросыПоУмолчанию(Команда)
	
	ТекстСообщения = "";
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	Если Объект.Вид = ПредопределенноеЗначение("Перечисление.бит_мпд_ВидыЗапросов.ЗапросHTTP") Тогда
		
		ПараметрыФормы = ПолучитьДоступныеЗапросыHTTP();
		Оповещение = Новый ОписаниеОповещения("ЗапросыHTTPПоУмолчаниюОкончание", ЭтотОбъект); 
	    ОткрытьФорму("Справочник.бит_Запросы.Форма.ФормаВыбораЗапросаПоУмолчаниюУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОкна);
		
	Иначе	
		
		ПараметрыФормы = ПолучитьПараметрыФормыФормированияЗапросаПоУмолчаниюСервер(ТекстСообщения);
		ВывестиТекстСообщенийПользователю(ТекстСообщения);
		
		Если ПараметрыФормы <> Неопределено Тогда
			Оповещение = Новый ОписаниеОповещения("ЗапросыПоУмолчаниюОкончание", ЭтотОбъект); 
			ОткрытьФорму("Справочник.бит_Запросы.Форма.ФормаВыбораЗапросаПоУмолчаниюУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОкна);
		КонецЕсли;
		
	КонецЕсли; 
	
	
КонецПроцедуры // ЗапросыПоУмолчанию()

// Процедура обработчик оповещения "ЗапросыHTTPПоУмолчаниюОкончание".
// 
// Параметры:
// РезВыбора - Строка
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ЗапросыHTTPПоУмолчаниюОкончание(РезВыбора, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезВыбора) = Тип("Строка")  Тогда
		
		Объект.ТекстЗапроса = РезВыбора;
		
		Объект.ДоступныеПоля.Очистить();
		
		
		РезПоля = ПолучитьДоступныеПоляHTTP(РезВыбора);
		
		
		Модифицированность = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры	// ЗапросыHTTPПоУмолчаниюОкончание

// Функция.
// 
// Параметры:
//  ТекущийТекстЗапроса - Строка
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
&НаСервере
Функция ПолучитьДоступныеПоляHTTP(ТекущийТекстЗапроса)
	
	РезПоля = Справочники.бит_Запросы.ПолучитьДоступныеПоляHTTP(Объект, ТекущийТекстЗапроса);
	
		Для каждого КиЗ Из РезПоля Цикл
			
			ОписаниеПоля = КиЗ.Значение;
			НоваяСтрока = Объект.ДоступныеПоля.Добавить();
			НоваяСтрока.Имя          = ОписаниеПоля.Имя;
			НоваяСтрока.ТипСтр       = ОписаниеПоля.ТипСтр;
			НоваяСтрока.ТекстЗапроса = ОписаниеПоля.ТекстЗапроса;
		
		КонецЦикла; 
	
	Возврат РезПоля;
	
КонецФункции // ПолучитьДоступныеПоляHTTP()

// Процедура окончание процедуры "ЗапросыПоУмолчанию".
// 
&НаКлиенте 
Процедура ЗапросыПоУмолчаниюОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) И РезультатВыбора <> КодВозвратаДиалога.Отмена Тогда 						 		
		СформироватьТекстЗапроса(РезультатВыбора);       				
	КонецЕсли;
	
КонецПроцедуры // ЗапросыПоУмолчаниюОкончание()

&НаКлиенте
Процедура ПроверитьСинтаксис(Команда)
	
	ТекстСообщения = "";
	ПроверитьСинтаксисСервер(ТекстСообщения);
	ВывестиТекстСообщенийПользователю(ТекстСообщения);
	
КонецПроцедуры // ПроверитьСинтаксис()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает видимость/доступность элементов формы.
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()

	ЭтоПредопределенный = Объект.Предопределенный;
	ЭтоВнешняя = Справочники.бит_мпд_ВидыИнформационныхБаз.ЭтоВнешняяБаза(Объект.ВидИнформационнойБазы);
	ЭтоОбычныйЗапрос = Справочники.бит_Запросы.ЭтоОбычныйЗапрос(Объект);
	
	Элементы.Наименование.ТолькоПросмотр = ЭтоПредопределенный;
	Элементы.Релиз.ТолькоПросмотр        = ЭтоПредопределенный;
	Элементы.ТекстЗапроса.ТолькоПросмотр = ЭтоПредопределенный;
	
	Элементы.Вид.Видимость = фВерсияСтарше835 И ЭтоВнешняя;
	Элементы.Вид.Доступность = ЭтоВнешняя;
	
	Элементы.КонструкторЗапроса.Видимость   = ЭтоОбычныйЗапрос;
	Элементы.КонструкторЗапроса.Доступность = НЕ ЭтоВнешняя;
	Элементы.ПроверитьСинтаксис.Видимость   = ЭтоОбычныйЗапрос;
	
	Элементы.ГруппаКоманднаяПанельТекстаЗапроса.Доступность = Не ЭтоПредопределенный; // И ЭтоТекущаяИБ;
	
	Элементы.ГруппаДоступныеПоля.Видимость = НЕ ЭтоОбычныйЗапрос;
		
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьВнешнееПодключение(ВидИнформационнойБазы, ТипСоединения, ТекстСообщения)
	 
	СостояниеПодключения 	  = Неопределено;
	СоединениеВнешнейИБ       = Неопределено;
	


	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ Сервер Тогда
		
		ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
		флЭтоВнешняяБаза 		  = бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(ВидИнформационнойБазы);
		
		Если Не флЭтоВнешняяБаза Тогда
			
			СостояниеПодключения = ПеречСостоянияПодключения.ТекущаяБаза;
			
		Иначе
			
			Если СоединениеВнешнейИБ = Неопределено Тогда
				
				НастройкиИбПоУмолчанию = ВидИнформационнойБазы.НастройкаПодключенияПоУмолчанию;
				
				// Попытка установки соединения с внешней базой.
				Если ЗначениеЗаполнено(НастройкиИбПоУмолчанию) Тогда
					
					Если ТипСоединения = "КОМ" Тогда
						СоединениеВнешнейИБ = бит_мпд_ПовтИсп.ПодключитьКОМ(НастройкиИбПоУмолчанию);
					ИначеЕсли ТипСоединения = "ОЛЕ" Тогда
						СоединениеВнешнейИБ = бит_мпд_ПовтИсп.ПодключитьОЛЕ(НастройкиИбПоУмолчанию);
					КонецЕсли;
					
				Иначе	   
					
					ТекстСообщения = НСтр("ru = 'Для вида информационной базы ""%1%"" не указана настройка подключения по-умолчанию!'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(ВидИнформационнойБазы));
					
				КонецЕсли; 
				
			КонецЕсли;	
			
			Если СоединениеВнешнейИБ = Неопределено Тогда
				
				ТекстСообщения 		 = ?(ЗначениеЗаполнено(ТекстСообщения), ТекстСообщения + Символы.ПС, "")
				+ НСтр("ru = 'Не установлено соединение с внешней базой! Вызов конструктора невозможен.'");
				СостояниеПодключения = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена;
				
			Иначе
				
				ВидВнешнейИБ 		 = ВидИнформационнойБазы;
				СостояниеПодключения = ПеречСостоянияПодключения.ВнешняяБаза_Подключена;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	#КонецЕсли
	
	СтруктураПодключения = Новый Структура("СоединениеВнешнейИБ, СостояниеПодключения", СоединениеВнешнейИБ, СостояниеПодключения);
	Возврат СтруктураПодключения;

КонецФункции // ВыполнитьВнешнееПодключение()

&НаСервере
Процедура ПроверитьСинтаксисСервер(ТекстСообщения, ТолькоСообщенияОбОшибках = Ложь)

	Если ПустаяСтрока(Объект.ТекстЗапроса) Тогда
		Возврат;	
	КонецЕсли;
	
	// Проверка подключения, если вид информационной базы - внешняя.
	ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
	СтруктураПодключения = ВыполнитьВнешнееПодключение(Объект.ВидИнформационнойБазы, "КОМ", ТекстСообщения);
	СостояниеПодключения = СтруктураПодключения.СостояниеПодключения;
	СоединениеВнешнейИБ  = СтруктураПодключения.СоединениеВнешнейИБ;
	Если СостояниеПодключения = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена Тогда
		Возврат;
	КонецЕсли;
	фИспользоватьКОМ = СостояниеПодключения = ПеречСостоянияПодключения.ВнешняяБаза_Подключена;
	
	// Проверка текста запроса
	Если фИспользоватьКОМ Тогда
		ПостроительЗапроса = СоединениеВнешнейИБ.NewObject("ПостроительЗапроса");
	Иначе	
		ПостроительЗапроса = Новый ПостроительЗапроса;
	КонецЕсли;	
	
	Попытка
		ПостроительЗапроса.Текст = Объект.ТекстЗапроса;
	Исключение
		ТекстСообщения = Нстр("ru = 'Текст запроса не корректен.'") + ОписаниеОшибки();
		Возврат;
	КонецПопытки;

	Если Не ТолькоСообщенияОбОшибках Тогда
		ТекстСообщения = Нстр("ru = 'Синтаксических ошибок не обнаружено!'");
	КонецЕсли;				
	
КонецПроцедуры // ПроверитьСинтаксисСервер()

// ----------------------------------------------------------------------
// Выбор запроса по умолчанию

// Функция формирует строку определяющую таблицу - источник выборки.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//  Строка
// 
&НаСервере
Функция СформироватьСтрокуТекущейТаблицыИсточникаЗапроса()

	КопияТекстаДляПоискаИсточника = ВРег(Объект.ТекстЗапроса);
	МассивСтрокПоискаИсточника = Новый Массив;
	МассивСтрокПоискаИсточника.Добавить("ИЗ ");
	МассивСтрокПоискаИсточника.Добавить("ИЗ" + Символы.ПС);
	Для каждого СтрокаПоискаИсточника Из МассивСтрокПоискаИсточника Цикл
		ПозицияИсточника = Найти(КопияТекстаДляПоискаИсточника, СтрокаПоискаИсточника);	
		Если ПозицияИсточника > 0 Тогда
			Прервать;		
		КонецЕсли;   	
	КонецЦикла;
		
	Если ПозицияИсточника = 0 Тогда
		
		ТекущийВариант = "";
		
	Иначе
		
		ОбрезаннаяСтрока = Сред(Объект.ТекстЗапроса, ПозицияИсточника, 300);
		ОбрезаннаяСтрока = Сред(ОбрезаннаяСтрока, Найти(ОбрезаннаяСтрока, "Регистр"), 200);
		
		ПозицияПараметров = Найти(ОбрезаннаяСтрока, "(");
		Если ПозицияПараметров = 0 Тогда
			
			ПозицияПробела   = Найти(ОбрезаннаяСтрока, " ");	
			ОбрезаннаяСтрока = Сред(ОбрезаннаяСтрока, 1, ПозицияПробела - 1);
			ТекущийВариант   = ОбрезаннаяСтрока + ". ";
			
		Иначе
			
			ТекущийВариант = Сред(ОбрезаннаяСтрока, 1, ПозицияПараметров - 1);
		   	Если Прав(ТекущийВариант, 7) = "Остатки" Тогда
				ПервыйПараметр = Сред(ОбрезаннаяСтрока, ПозицияПараметров + 2, 13);
				ТекущийВариант = ?(ПервыйПараметр = "НачалоПериода", ТекущийВариант + "Нач", ТекущийВариант + "Кон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Лев(ТекущийВариант, 7) <> "Регистр" Тогда
			ТекущийВариант = ""; 	
		КонецЕсли;
	
	КонецЕсли;	

	Возврат ТекущийВариант;
	
КонецФункции // СформироватьСтрокуТекущейТаблицыИсточникаЗапроса()
      
&НаСервере
Процедура ДобавитьСтрокуВариантаЗапроса(Узел, ИмяВарианта, СинонимВарианта, МассивПути, Ид)

	Ид = Ид + 1;
	СтрокаВарианта = Узел.Добавить();
	
	СтрокаВарианта.Значение 	 = ИмяВарианта;
	СтрокаВарианта.Представление = СинонимВарианта;
	СтрокаВарианта.Уровень 		 = СтрокаВарианта.Уровень();
		
	Если МассивПути <> Неопределено И ТипЗнч(МассивПути[1]) = Тип("Число") И МассивПути[2] = ИмяВарианта Тогда
		МассивПути[2] = Ид;
	КонецЕсли;

КонецПроцедуры // ДобавитьСтрокуВариантаЗапроса()

&НаСервере
Процедура ДобавитьСтрокиВариантовЗапросов(СтрокаДерева, МетаданныеБазы, МассивПути, Ид)
		
	ПолноеИмяРегистра = СтрокаДерева.Значение;
	МассивИмени = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ПолноеИмяРегистра, ".");
	ТипРегистра = МассивИмени[0];
	ИмяРегистра = МассивИмени[1]; 	
	
	// Метаданные регистра
	МетаРег 			 = МетаданныеБазы[ТипРегистра][ИмяРегистра];
	МетаСвойстваОбъектов = МетаданныеБазы.СвойстваОбъектов;
	НепериодическийРегистрСведений = МетаСвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	ВидРегистраНакопленияОстатки   = МетаСвойстваОбъектов.ВидРегистраНакопления.Остатки;
		
	Узел = СтрокаДерева.Строки;
	
	Если ТипРегистра = "РегистрыСведений" ИЛИ ТипРегистра = "InformationRegisters" Тогда // РегистрыСведений
		
		ДобавитьСтрокуВариантаЗапроса(Узел, "", "Основная таблица", МассивПути, Ид);
	
		Если МетаРег.ПериодичностьРегистраСведений <> НепериодическийРегистрСведений Тогда
			ДобавитьСтрокуВариантаЗапроса(Узел, "СрезПервых"   , "Срез первых"	 , МассивПути, Ид);
			ДобавитьСтрокуВариантаЗапроса(Узел, "СрезПоследних", "Срез последних", МассивПути, Ид);
		КонецЕсли;
	
	ИначеЕсли ТипРегистра = "РегистрыНакопления" ИЛИ ТипРегистра = "AccumulationRegisters" Тогда // РегистрыНакопления
		
		ДобавитьСтрокуВариантаЗапроса(Узел, "Обороты", "Обороты", МассивПути, Ид);
		
		Если МетаРег.ВидРегистра = ВидРегистраНакопленияОстатки Тогда
			ДобавитьСтрокуВариантаЗапроса(Узел, "ОстаткиНач", "Остатки на начало", МассивПути, Ид);
			ДобавитьСтрокуВариантаЗапроса(Узел, "ОстаткиКон", "Остатки на конец" , МассивПути, Ид);
		КонецЕсли;
	
	ИначеЕсли ТипРегистра = "РегистрыБухгалтерии" ИЛИ ТипРегистра = "AccountingRegisters" Тогда // РегистрыБухгалтерии
		
		ДобавитьСтрокуВариантаЗапроса(Узел, "Обороты"		 , "Обороты"		   , МассивПути, Ид);
		ДобавитьСтрокуВариантаЗапроса(Узел, "ОстаткиНач"	 , "Остатки на начало" , МассивПути, Ид);
		ДобавитьСтрокуВариантаЗапроса(Узел, "ОстаткиКон"	 , "Остатки на конец"  , МассивПути, Ид);
		ДобавитьСтрокуВариантаЗапроса(Узел, "ОстаткиИОбороты", "Остатки и обороты" , МассивПути, Ид);
		
	КонецЕсли; 	
	
КонецПроцедуры // ДобавитьСтрокиВариантовЗапросов()
         
&НаСервере
Процедура ДобавитьСписокРегистров(СтрокаВерх, ИмяРегистра, МетаданныеБазы, МассивПути, Ид)

	ВеткаДерева = СтрокаВерх.Строки;
	
	ТаблицаРегистров = Новый ТаблицаЗначений;
	ТаблицаРегистров.Колонки.Добавить("Имя");
	ТаблицаРегистров.Колонки.Добавить("Синоним");	
	
	
	// Метаданные регистров определенного типа
	МетаданныеРегистров = МетаданныеБазы[ИмяРегистра];
				
	Для каждого ОбъектМетаданных Из МетаданныеРегистров Цикл
		СтрокаТабл = ТаблицаРегистров.Добавить();
		СтрокаТабл.Имя 	   = ОбъектМетаданных.Имя;
		СтрокаТабл.Синоним = ОбъектМетаданных.Синоним;
	КонецЦикла;
	ТаблицаРегистров.Сортировать("Синоним");
				
	Для каждого ЭлементТаблицы Из ТаблицаРегистров Цикл
		
		// Добавление строк дерева с названием объекта.
		Ид = Ид + 1;
		СтрокаДерева = ВеткаДерева.Добавить(); 		
		СтрокаДерева.Представление  = ЭлементТаблицы.Синоним;
		СтрокаДерева.Значение 		= СтрокаВерх.Значение + "." + ЭлементТаблицы.Имя;
		СтрокаДерева.Уровень  		= СтрокаДерева.Уровень();
				
		Если МассивПути <> Неопределено И ТипЗнч(МассивПути[0]) = Тип("Число") И МассивПути[1] = ЭлементТаблицы.Имя Тогда
			МассивПути[1] = Ид;
		КонецЕсли;
		
		ДобавитьСтрокиВариантовЗапросов(СтрокаДерева, МетаданныеБазы, МассивПути, Ид);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСписокРегистров()

&НаСервере
Функция СформироватьДеревоВыбора(МетаданныеБазы, МассивПути)

	// Структура дерева выбора
	СписокВетокДерева = Новый СписокЗначений;
	СписокВетокДерева.Добавить("РегистрыСведений"   , "Регистры сведений"   , , БиблиотекаКартинок.РегистрСведений);
	СписокВетокДерева.Добавить("РегистрыНакопления" , "Регистры накопления" , , БиблиотекаКартинок.РегистрНакопления);
	СписокВетокДерева.Добавить("РегистрыБухгалтерии", "Регистры бухгалтерии", , БиблиотекаКартинок.РегистрБухгалтерии);
		
	// Создание дерева выбора
	ДеревоВыбора = Новый ДеревоЗначений;
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ДеревоВыбора.Колонки.Добавить("Значение"     , ОписаниеТиповСтрока);
	ДеревоВыбора.Колонки.Добавить("Представление", ОписаниеТиповСтрока);
	ДеревоВыбора.Колонки.Добавить("Картинка"     , Новый ОписаниеТипов("Картинка"));
	ДеревоВыбора.Колонки.Добавить("Уровень"		 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
		
	Ид = -1;
	КореньДерева = ДеревоВыбора.Строки;
	Для каждого ЭлементСпискаВеток Из СписокВетокДерева Цикл
		     		
		// Верхние строки дерева - типы объектов
		Ид = Ид + 1;
		СтрокаТипов = КореньДерева.Добавить();		
		ЗаполнитьЗначенияСвойств(СтрокаТипов, ЭлементСпискаВеток);
		СтрокаТипов.Уровень = СтрокаТипов.Уровень();
				
		Если МассивПути <> Неопределено	И СтрЗаменить(МассивПути[0], "Регистр", "Регистры") = ЭлементСпискаВеток.Значение Тогда
			МассивПути[0] = Ид;
		КонецЕсли;
		
		ДобавитьСписокРегистров(СтрокаТипов, ЭлементСпискаВеток.Значение, МетаданныеБазы, МассивПути, Ид);
		     	
	КонецЦикла;

	Возврат ДеревоВыбора;
	
КонецФункции // СформироватьДеревоВыбора()

// Функция получает доступные запросы HTTP.
// 
// Возвращаемое значение:
//  СтруктураПараметров - Структура.
// 
&НаСервере
Функция ПолучитьДоступныеЗапросыHTTP()

	СтруктураПараметров = Справочники.бит_Запросы.ПолучитьДоступныеЗапросыHTTP(Объект);

	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьДоступныеЗапросыHTTP()

// Процедура формирует структуру параметров формы формирования запроса по умолчанию.
// 
// Параметры:
//  ТекстСообщения - Строка
// 
&НаСервере
Функция ПолучитьПараметрыФормыФормированияЗапросаПоУмолчаниюСервер(ТекстСообщения)
	                                           	
	// Проверка подключения, если вид информационной базы - внешняя.
	ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
	СтруктураПодключения = ВыполнитьВнешнееПодключение(Объект.ВидИнформационнойБазы, "КОМ", ТекстСообщения);
	СостояниеПодключения = СтруктураПодключения.СостояниеПодключения;
	СоединениеВнешнейИБ  = СтруктураПодключения.СоединениеВнешнейИБ;
	Если СостояниеПодключения = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена Тогда
		Возврат Неопределено;	
	КонецЕсли;
		                                   	
	фИспользоватьКОМ = СостояниеПодключения = ПеречСостоянияПодключения.ВнешняяБаза_Подключена;
	// Метаданные базы
	МетаданныеБазы = ?(фИспользоватьКОМ, СтруктураПодключения.СоединениеВнешнейИБ.Метаданные, Метаданные);
	
	// Строка таблицы - источника запроса
	ТекущийВариант = СформироватьСтрокуТекущейТаблицыИсточникаЗапроса();
	
	// Массив пути к таблице - источнику
	МассивПути = Неопределено;
	Если ЗначениеЗаполнено(ТекущийВариант) Тогда
		МассивПути = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ТекущийВариант, ".");
		Если МассивПути.Количество() < 3 Тогда
			МассивПути = Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
	ДеревоВыбора = СформироватьДеревоВыбора(МетаданныеБазы, МассивПути);
		
	// Текущая строка дерева
	Если МассивПути = Неопределено Тогда
		НомерТекущейСтроки = 0;	
	ИначеЕсли ТипЗнч(МассивПути[2]) = Тип("Число") Тогда
		НомерТекущейСтроки = МассивПути[2];
	ИначеЕсли ТипЗнч(МассивПути[1]) = Тип("Число") Тогда
		НомерТекущейСтроки = МассивПути[1];
	ИначеЕсли ТипЗнч(МассивПути[0]) = Тип("Число") Тогда
		НомерТекущейСтроки = МассивПути[0];
	КонецЕсли;	
		
	// Структура параметров формы формирования запроса по умолчанию.
	СтруктураПараметровЗУ = Новый Структура;
	СтруктураПараметровЗУ.Вставить("ХранилищеДереваВыбора", бит_ОбщегоНазначения.УпаковатьДеревоЗначений(ДеревоВыбора));
	СтруктураПараметровЗУ.Вставить("НомерТекущейСтроки"   , НомерТекущейСтроки);
                                              
	Возврат СтруктураПараметровЗУ;
	
КонецФункции // ПолучитьПараметрыФормыФормированияЗапросаПоУмолчаниюСервер()

// ----------------------------------------------------------------------
// Формирование текста запроса по умолчанию

// Функция проверяет примитивный ли тип.
// 
// Параметры:
//  ПроверяемыйТип  - Тип
//  ИспользоватьКОМ - Булево
//  
// Возвращаемое значение:
//   Тип.Вид   - описание
// 
&НаСервере
Функция ЭтоПримитивныйТип(ПроверяемыйТип, ИспользоватьКОМ)

	ПримитивныйТип = Ложь;
	
	Если фИспользоватьКОМ Тогда
		
		ПримитивныйТип = Истина;
		
	Иначе
		
		Если ТипЗнч(ПроверяемыйТип) = Тип("ОписаниеТипов") Тогда	
			
			ТипыОписания = ПроверяемыйТип.Типы();
			Если ТипыОписания.Количество() = 1 Тогда 				
				ПроверяемыйТип = ТипыОписания[0];								
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПроверяемыйТип = Тип("Строка") 
			 ИЛИ ПроверяемыйТип = Тип("Число")
			 ИЛИ ПроверяемыйТип = Тип("Дата")
			 ИЛИ ПроверяемыйТип = Тип("Булево")
			 ИЛИ ПроверяемыйТип = Тип("ХранилищеЗначения") Тогда
		
			ПримитивныйТип = Истина;
		
		КонецЕсли;
				
	КонецЕсли;

	Возврат ПримитивныйТип;
	
КонецФункции // ЭтоПримитивныйТип()

&НаСервере
Функция ЭтоЧисло(ТипРесурса)

	ЭтоЧисло = ТипРесурса = Тип("Число") ИЛИ ТипРесурса.Типы()[0] = Тип("Число");	
	
	Возврат ЭтоЧисло;
	
КонецФункции // ЭтоЧисло()

&НаСервере
Процедура ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, Имя, Представление, Развернутый = Ложь)

	Если Не Развернутый Тогда
		СписокРесурсов.Добавить(Имя, Представление, Истина);
	КонецЕсли; 
	
	СписокРесурсов.Добавить(Имя, Представление + "Дт", Истина);
	СписокРесурсов.Добавить(Имя, Представление + "Кт", Истина);
	
КонецПроцедуры // ДобавитьЭлементыВСписокРесурсовБух()

&НаСервере
Функция СформироватьСписокРесурсов(МетаРегРесурсы, ТипРегистра, ВариантЗапр, ИспользоватьКОМ)

	СписокРесурсов = Новый СписокЗначений; 
	
	Если ТипРегистра = "РегистрыСведений" Тогда
		
		Для каждого Ресурс Из МетаРегРесурсы Цикл
			ИмяРесурса = Ресурс.Имя;
			ТипРесурса = Ресурс.Тип;
			ЭтоЧисло   = ?(фИспользоватьКОМ, Ресурс.Type.NumberQualifiers.Digits <> 0, ЭтоЧисло(ТипРесурса));
			СписокРесурсов.Добавить(ИмяРесурса, ИмяРесурса, ЭтоЧисло);		
		КонецЦикла;
		
	ИначеЕсли ТипРегистра = "РегистрыНакопления" Тогда 
		
		Для каждого Ресурс Из МетаРегРесурсы Цикл
			ИмяРесурса = Ресурс.Имя;
			Представление = ИмяРесурса;
			Если ВариантЗапр = "Обороты" Тогда
				Представление = Представление  + "Оборот";
				СписокРесурсов.Добавить(ИмяРесурса, Представление, Истина);
			ИначеЕсли Лев(ВариантЗапр, 7) = "Остатки" Тогда
				Представление = Представление  + "Остаток";
				СписокРесурсов.Добавить(ИмяРесурса, Представление, Истина);
			КонецЕсли;		
		КонецЦикла;
		
	ИначеЕсли ТипРегистра = "РегистрыБухгалтерии" Тогда 
			
		Если ВариантЗапр = "ОстаткиНач" ИЛИ ВариантЗапр = "ОстаткиКон" Тогда
			
			Для каждого Ресурс Из МетаРегРесурсы Цикл
				ИмяРесурса = Ресурс.Имя;
				Представление = ИмяРесурса  + "Остаток";
				ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление);				
				Представление = ИмяРесурса  + "РазвернутыйОстаток";
				ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление, Истина);
			КонецЦикла;
		
		ИначеЕсли ВариантЗапр = "Обороты" Тогда
			
			Для каждого Ресурс Из МетаРегРесурсы Цикл
				ИмяРесурса 	  = Ресурс.Имя;
				ЭтоБалансовый = Ресурс.Балансовый;
				Представление = ИмяРесурса  + "Оборот";
				ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление);
				Если Не ЭтоБалансовый Тогда
					Представление = ИмяРесурса  + "Кор" + "Оборот";
					ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление, Истина);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВариантЗапр = "ОстаткиИОбороты" Тогда
			
			Для каждого Ресурс Из МетаРегРесурсы Цикл
				ИмяРесурса 	  = Ресурс.Имя;
				Представление = ИмяРесурса  + "НачальныйОстаток";
				ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление);
				Представление = ИмяРесурса  + "НачальныйРазвернутыйОстаток";
				ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление, Истина);
				Представление = ИмяРесурса  + "КонечныйОстаток";
				ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление);
				Представление = ИмяРесурса  + "КонечныйРазвернутыйОстаток";
				ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление, Истина);
				Представление = ИмяРесурса  + "Оборот";
				ДобавитьЭлементыВСписокРесурсовБух(СписокРесурсов, ИмяРесурса, Представление);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
				
	Возврат СписокРесурсов;
	
КонецФункции // СформироватьСписокРесурсов()

&НаСервере
Функция СформироватьСписокИзмерений(МетаРегИзмерения, ТипРегистра, ВариантЗапр, ИспользоватьКОМ)

	СписокИзмерений = Новый СписокЗначений;
	
	Для каждого Измерение Из МетаРегИзмерения Цикл
		
		ИмяИзмерения = Измерение.Имя;
		ТипИзмерения = Измерение.Тип;
		
		ЭтоПримитивныйТип = ЭтоПримитивныйТип(ТипИзмерения, фИспользоватьКОМ);
		СписокИзмерений.Добавить(ИмяИзмерения, , ЭтоПримитивныйТип);
		
		Если ТипРегистра = "РегистрыБухгалтерии" И ВариантЗапр = "Обороты" Тогда
			ЭтоБалансовый = Измерение.Балансовый;
			Если Не ЭтоБалансовый Тогда
				СписокИзмерений.Добавить(ИмяИзмерения + "Кор",, ЭтоПримитивныйТип);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СписокИзмерений;
	
КонецФункции // СформироватьСписокИзмерений()

&НаСервере
Процедура ДобавитьЗапятую(ТекстЗп, Переносить = Истина)

	Если ЗначениеЗаполнено(ТекстЗп) Тогда
		ТекстЗп = ТекстЗп + ", ";
		Если Переносить Тогда
			ТекстЗп = ТекстЗп + Символы.ПС + Символы.Таб		
		КонецЕсли;
	КонецЕсли;  	

КонецПроцедуры // ДобавитьЗапятую()

&НаСервере
Процедура ДополнитьСтрокуПолейДляПостроителяРегБух(ТекстЗп, МетаРег, СинонимТабл, ВариантЗапр)

	ПланСчетовРегистра  = МетаРег.ПланСчетов;
	
	ИмяСубконто 		= "Субконто";	
	МаксКолвоСубконто   = ПланСчетовРегистра.МаксКоличествоСубконто; 
	ЕстьКорреспонденция = МетаРег.Корреспонденция;
			
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Счет");
	Для i = 1 По МаксКолвоСубконто Цикл
		ПолноеИмяСубконто = ИмяСубконто + Строка(i);
		МассивПолей.Добавить(ПолноеИмяСубконто);	
	КонецЦикла;
	
	
	// Счет, Субконто1 ...
	Для каждого ИмяПоля Из МассивПолей Цикл
		ДобавитьЗапятую(ТекстЗп);
		ТекстЗп = ТекстЗп + СинонимТабл + "." + ИмяПоля + ".*";
	КонецЦикла;
		
	// КорСчет, КорСубконто1 ...
	Если ВариантЗапр = "Обороты" И ЕстьКорреспонденция Тогда
		Для каждого ИмяПоля Из МассивПолей Цикл
			ДобавитьЗапятую(ТекстЗп);
			ТекстЗп = ТекстЗп + СинонимТабл + ".Кор" + ИмяПоля + ".*";	
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры // ДополнитьСтрокуПолейДляПостроителяРегБух()

&НаСервере
Функция СформироватьСтрокуПараметров(ТипРегистра, ВариантЗапр, СписокИзмерений)

	ШаблонПараметров = ?(ЗначениеЗаполнено(ВариантЗапр), "()", "");
	
	// Сформируем шаблон набора параметров
	
	Если (ТипРегистра = "РегистрыСведений" И Лев(ВариантЗапр, 4) = "Срез") Тогда
		
		ШаблонПараметров = "(&" + ?(ВариантЗапр = "СрезПервых", "Начало", "Конец") + "Периода, 
							|		%Условие%)";
														
	ИначеЕсли (ТипРегистра = "РегистрыНакопления" И Лев(ВариантЗапр, 7) = "Остатки") Тогда
		
		ШаблонПараметров = "(&" + ?(ВариантЗапр = "ОстаткиНач", "Начало", "Конец") + "Периода, 
							|		%Условие%)";
									
	ИначеЕсли ТипРегистра = "РегистрыНакопления" И ВариантЗапр = "Обороты" Тогда
		
		ШаблонПараметров = "(&НачалоПериода, &КонецПериода, {(&Периодичность)}, 
							|		%Условие%)";	
		
	ИначеЕсли ТипРегистра = "РегистрыБухгалтерии" И ВариантЗапр = "Обороты" Тогда
		
		ШаблонПараметров = "(&НачалоПериода, &КонецПериода, 
							|		{(&Периодичность)}, 
							|		, 
							|		, 
							|		%Условие%, 
							|		, 
							|		)";	
							
	ИначеЕсли (ТипРегистра = "РегистрыБухгалтерии" И (ВариантЗапр = "ОстаткиНач" ИЛИ ВариантЗапр = "ОстаткиКон")) Тогда
		
		ШаблонПараметров = "(&" + ?(ВариантЗапр = "ОстаткиНач", "Начало", "Конец") + "Периода, 
							|		, 
							|		, 
							|		%Условие%)";
		
	ИначеЕсли ТипРегистра = "РегистрыБухгалтерии" И ВариантЗапр = "ОстаткиИОбороты" Тогда
		
		ШаблонПараметров = "(&НачалоПериода, &КонецПериода, 
							|		{(&Периодичность)}, 
							|		, 
							|		, 
							|		, 
							|		%Условие%)";	
		
	КонецЕсли;
	
	// Заполним шаблон и сформируем строку параметров
	// Строка измерений для построителя.
	Если СписокИзмерений.Количество() = 0 Тогда
		СтрокаИзмеренийДляПостроителя = "";	
	Иначе
		ТекстЗп = "";
		Для каждого Измерение Из СписокИзмерений Цикл
			ДобавитьЗапятую(ТекстЗп, Ложь);
			ТекстЗп = ТекстЗп + "(" + Измерение + ?(Измерение.Пометка, ")", ").*");
		КонецЦикла;
		СтрокаИзмеренийДляПостроителя = "{" + ТекстЗп + "}";
	КонецЕсли;
		
	// Заменим условие по измерениям в шаблоне
	СтрокаПараметров = СтрЗаменить(ШаблонПараметров, "%Условие%", СтрокаИзмеренийДляПостроителя);
	
	
	Возврат СтрокаПараметров;		

КонецФункции // СформироватьСтрокуПараметров()
                
// Процедура формирует текст запроса.
// 
// Параметры:
//  ВыбранноеЗначение - Строка
// 
&НаСервере
Процедура СформироватьТекстЗапроса(ВыбранноеЗначение)

	ТекстВыбора = ВыбранноеЗначение + ".";
		
	// Скелет текста запроса.
	// 1. БлокВыбираемыхПолей_Основные.
	// 2. БлокВыбираемыхПолей_Построитель.
	// 3. БлокИсточника.
	// 4. БлокУсловий_Построитель.
	// 5. БлокУпорядочивания_Построитель.
	// 6. БлокИтогов_Построитель = БлокУпорядочивания_Построитель.
	НовыйТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%1%
	|{ВЫБРАТЬ
	|	%2%}
	|ИЗ 
	|	%3%
	|{ГДЕ
	|	%4%}
	|{УПОРЯДОЧИТЬ ПО
	|	%5%}
	|{ИТОГИ ПО
	|	%5%}
	|";
	
	// ---------------------------------------------------------------------
	// Разбор выбранного значения 
	МассивВыбора = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ТекстВыбора, ".");
	
	ТипРегистра  = СтрЗаменить(МассивВыбора[0], "Регистр", "Регистры");
	ИмяРегистра  = СокрЛП(МассивВыбора[1]);
	ВариантЗапр  = СокрЛП(МассивВыбора[2]);
	
	Если ВариантЗапр = "ОстаткиНач" ИЛИ ВариантЗапр = "ОстаткиКон" Тогда 
		ВариантЗапрДляИсточника = ".Остатки"
	Иначе
		ВариантЗапрДляИсточника = ?(ЗначениеЗаполнено(ВариантЗапр), "." + ВариантЗапр, "");
	КонецЕсли;
	Источник 	 = МассивВыбора[0] + "." + ИмяРегистра + ВариантЗапрДляИсточника;
	СинонимТабл  = ИмяРегистра + ВариантЗапр;
	
	// Метаданные базы
	Если фИспользоватьКОМ Тогда
	
		// Проверка подключения, если вид информационной базы - внешняя.
		ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
		СтруктураПодключения = ВыполнитьВнешнееПодключение(Объект.ВидИнформационнойБазы, "КОМ", "");
		СостояниеПодключения = СтруктураПодключения.СостояниеПодключения;
		СоединениеВнешнейИБ  = СтруктураПодключения.СоединениеВнешнейИБ;
		Если СостояниеПодключения = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена Тогда
			ТекстСообщения = Нстр("ru = 'Потеряно подключение к внешней базе.'");
			Возврат;	
		ИначеЕсли СостояниеПодключения = ПеречСостоянияПодключения.ВнешняяБаза_Подключена Тогда
			МетаданныеБазы = СтруктураПодключения.СоединениеВнешнейИБ.Метаданные;	
		КонецЕсли;
				
	Иначе
		
		МетаданныеБазы = Метаданные;
		
	КонецЕсли;
		
	// Метаданные регистра
	МетаРег = МетаданныеБазы[ТипРегистра][ИмяРегистра];
		
	// Список измерений 
	СписокИзмерений = СформироватьСписокИзмерений(МетаРег.Измерения, ТипРегистра, ВариантЗапр, фИспользоватьКОМ);
	// Список ресурсов
	СписокРесурсов = СформироватьСписокРесурсов(МетаРег.Ресурсы, ТипРегистра, ВариантЗапр, фИспользоватьКОМ);
		
	// Строка измерений для построителя
	ТекстЗп = "";
	Для каждого Измерение Из СписокИзмерений Цикл
		ДобавитьЗапятую(ТекстЗп);
		ТекстЗп = ТекстЗп + СинонимТабл + "." + Измерение + ?(Измерение.Пометка, "", ".*");			
	КонецЦикла;
	СтрокаИзмеренийДляПостроителя = ТекстЗп; 
	
	// Добавим дополнительные поля для построителя, если это регистр бухгалтерии.
	СтрокаПолейДляПостроителя = СтрокаИзмеренийДляПостроителя;
	Если ТипРегистра = "РегистрыБухгалтерии" Тогда
		ДополнитьСтрокуПолейДляПостроителяРегБух(СтрокаПолейДляПостроителя, МетаРег, СинонимТабл, ВариантЗапр);
	КонецЕсли;
		
	// ---------------------------------------------------------------------
	// Формирование блоков текста запроса
		
	// 1. БлокВыбираемыхПолей_Основные
	ТекстЗп = "";
	Для каждого Ресурс Из СписокРесурсов Цикл
		ДобавитьЗапятую(ТекстЗп);
		ПутьКРесурсу = СинонимТабл + "." + Ресурс;
		СтрокаРесурса = ?(Ресурс.Пометка, "ЕСТЬNULL(" + ПутьКРесурсу + ", 0)", ПутьКРесурсу);
		Если ТипРегистра <> "РегистрыСведений" Тогда
			СтрокаРесурса = "СУММА(" + СтрокаРесурса + ")";
		КонецЕсли;
		ТекстЗп = ТекстЗп + СтрокаРесурса + " КАК " + Ресурс;
	КонецЦикла;
	Если ТипРегистра = "РегистрыСведений" Тогда
		Для каждого Измерение Из СписокИзмерений Цикл
			ДобавитьЗапятую(ТекстЗп);
			СтрокаИзмерения = СинонимТабл + "." + Измерение;
			ТекстЗп = ТекстЗп + СтрокаИзмерения + " КАК " + Измерение;
		КонецЦикла;
	КонецЕсли;
	БлокВыбираемыхПолей_Основные = ТекстЗп; 
	
	// 2. БлокВыбираемыхПолей_Построитель
	ТекстЗп = "";
	Для каждого Ресурс Из СписокРесурсов Цикл
		ДобавитьЗапятую(ТекстЗп);
		ТекстЗп = ТекстЗп + Ресурс; 			
	КонецЦикла;
	ДобавитьЗапятую(ТекстЗп);
	ТекстЗп = ТекстЗп + СтрокаПолейДляПостроителя;			
	БлокВыбираемыхПолей_Построитель = ТекстЗп;
	
	// 3. БлокИсточника
	ТекстПараметров = СформироватьСтрокуПараметров(ТипРегистра, ВариантЗапр, СписокИзмерений);
	ТекстЗп = Источник + ТекстПараметров + " КАК " + СинонимТабл;
	БлокИсточника = ТекстЗп;
	
	// 4. БлокУсловий_Построитель
	БлокУсловий_Построитель = СтрокаПолейДляПостроителя;
	
	// 5. БлокУпорядочивания_Построитель
	БлокУпорядочивания_Построитель = СтрокаПолейДляПостроителя;// СтрокаИзмеренийДляПостроителя;
	
	// 6. БлокИтогов_Построитель = БлокУпорядочивания_Построитель
	// .
	
	// ---------------------------------------------------------------------
	// Замена блоков в тексте запроса
	Объект.ТекстЗапроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(НовыйТекстЗапроса,
								БлокВыбираемыхПолей_Основные,
								БлокВыбираемыхПолей_Построитель,
								БлокИсточника,
								БлокУсловий_Построитель,
								БлокУпорядочивания_Построитель);
	
КонецПроцедуры // СформироватьТекстЗапроса()

&НаСервере
Процедура ВидПриИзмененииНаСервере()
	
	Объект.ТекстЗапроса = "";
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиТекстСообщенийПользователю(ТекстСообщения, Отказ = Ложь)

	Если ТекстСообщения <> "" Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;	

КонецПроцедуры // ВывестиТекстСообщенийПользователю()

#КонецОбласти
