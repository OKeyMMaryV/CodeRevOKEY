#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ДополнительныеСвойства); 
	
	УдаленИзСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства,
						"УдаленИзСхемы", Ложь);
	
	Если ПометкаУдаления И УдаленИзСхемы Тогда
		КодТочки = "";
		ИдентификаторТочки = 0;
		ВходящиеТочки.Очистить();
		ИсходящиеТочки.Очистить();
	КонецЕсли;
	
	АктивнаяТочкаМаршрута = ВходящиеТочки.Количество() <> 0 ИЛИ ИсходящиеТочки.Количество() <> 0;
	
	Если Не ЭтоНовый() И НЕ ПометкаУдаления = Ссылка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	ПроверитьЗаполнение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, 
									"ПроверитьЗаполнение", Истина);
	
	Если ПроверитьЗаполнение Тогда
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	// Сбросим флаг, что бы при повторном программном проведении, вызвать проверку. См. ОбработкаПроверкиЗаполнения().
	ДополнительныеСвойства.Вставить("ПроверитьЗаполнение", Истина);
	
	Если ЭтоНовый() И ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Старт Тогда
		СтруктураОформление = Новый Структура;
		СтруктураОформление.Вставить("Шрифт"                  ,Новый Шрифт("Roboto",8,Ложь));
		СтруктураОформление.Вставить("ЦветФона"               ,ЦветаСтиля.бит_ЦветТочекАлгоритма);
		СтруктураОформление.Вставить("ЦветЛинии"              ,ЦветаСтиля.бит_ЦветТочекАлгоритма);	
		СтруктураОформление.Вставить("ЦветТекста"             ,ЦветаСтиля.бит_ЦветТочекАлгоритма);	
		СтруктураОформление.Вставить("ГоризонтальноеПоложение",ГоризонтальноеПоложение.Центр);
		СтруктураОформление.Вставить("ВертикальноеПоложение"  ,ВертикальноеПоложение.Центр);
		
		СохранитьОформление(СтруктураОформление);
	КонецЕсли; 
	
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ДополнительныеСвойства, Метаданные().ПолноеИмя());
	
	Если НЕ ПометкаУдаления Тогда
		
		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Владелец, "ВидАлгоритма, СпособВыполнения");
		Если РеквизитыВладельца.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Визирование 
		   И РеквизитыВладельца.СпособВыполнения = Перечисления.бит_уп_СпособыВыполненияАлгоритма.Поэтапно Тогда
		
			Справочники.бит_уп_ТочкиАлгоритмов.ПриЗаписиТочкиСлияния(Ссылка, Отказ);	
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ПриЗаписи()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Наименование = СтрШаблон(Нстр("ru = '%1 (копия)'"), ОбъектКопирования.Наименование); 
	КодТочки = "";
	ИдентификаторТочки = 0;
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Справочники.бит_уп_ТочкиАлгоритмов.ПроверитьЗаполнение(ЭтотОбъект, Отказ);
	ДополнительныеСвойства.Вставить("ПроверитьЗаполнение", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура сохраняет настройки оформления в хранилище.
// 
// Параметры:
//  СтруктураОформление  - Структура.
// 
Процедура СохранитьОформление(СтруктураОформление) Экспорт

	ОформлениеТочки = Новый ХранилищеЗначения(СтруктураОформление);

КонецПроцедуры // СохранитьОформление()

// Функция считывает настройки оформления из структуры.
// 
// Возвращаемое значение:
//   СтруктураОформление   - Структура.
// 
Функция ПрочитатьОформление() Экспорт

	СтруктураОформление = ОформлениеТочки.Получить();

	Возврат СтруктураОформление;
	
КонецФункции // ПрочитатьОформление()

#КонецОбласти

#КонецЕсли
