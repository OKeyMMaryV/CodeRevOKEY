
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Анализ параметров формы
	Если Параметры.Свойство("Алгоритм") Тогда
	
		 Объект.Владелец = Параметры.Алгоритм;
	
	КонецЕсли; 
	Если Параметры.Свойство("ВидТочки") Тогда
	
		 Объект.ВидТочки = Параметры.ВидТочки;
	
	КонецЕсли; 
	Если Параметры.Свойство("ТочкаВходящая") Тогда
	
		НоваяСтрока = Объект.ВходящиеТочки.Добавить();
		НоваяСтрока.Точка       = Параметры.ТочкаВходящая;
		НоваяСтрока.Направление = Параметры.Направление;
	
	КонецЕсли; 
	Если Параметры.Свойство("СоздатьСвязьПриЗаписи") Тогда
	
		ЭтаФорма.СоздатьСвязьПриЗаписи = Параметры.СоздатьСвязьПриЗаписи;
	
	КонецЕсли; 
	Если Параметры.Свойство("КоличествоТочекВида") Тогда
	
		ЭтаФорма.КоличествоТочекВида = Параметры.КоличествоТочекВида;
	
	КонецЕсли; 
	Если Параметры.Свойство("ОткрытаИзМаршрута") Тогда
		
		 ЭтаФорма.Режим = "ОткрытаИзМаршрута";
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Владелец) И Объект.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие Тогда
		
		// Устанавливаем отбор по назначению действия
		 НазначениеДействияОтбор = Неопределено;
		 Если Объект.Владелец.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Визирование Тогда
			 
			 НазначениеДействияОтбор = Перечисления.бит_НазначенияПользовательскихДействий.Визирование;
			 
		 ИначеЕсли Объект.Владелец.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов Тогда
			 
			 НазначениеДействияОтбор = Перечисления.бит_НазначенияПользовательскихДействий.ИзменениеСтатусовОбъектов;
			 
		 ИначеЕсли Объект.Владелец.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Прочее Тогда	 
			 
			 //МассивОтбор = Новый Массив;
			 //МассивОтбор.Добавить(Перечисления.бит_НазначенияПользовательскихДействий.СозданиеЗадачи);
			 //МассивОтбор.Добавить(Перечисления.бит_НазначенияПользовательскихДействий.ПодчиненныйПроцесс);
			 //МассивОтбор.Добавить(Перечисления.бит_НазначенияПользовательскихДействий.Прочее);

			 //НазначениеДействияОтбор = Новый ФиксированныйМассив( МассивОтбор);
			 
		 КонецЕсли; 
		 
		 Если НЕ НазначениеДействияОтбор = Неопределено Тогда
			 
			 СтрОтборНазначение = Новый Структура();
			 СтрОтборНазначение.Вставить("Назначение",НазначениеДействияОтбор); 
			 
			 бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.ПользовательскоеДействие, СтрОтборНазначение);
			 
		 КонецЕсли; 
		 
		 
	КонецЕсли; 
	
	// Заполнение оформления
	ТочкаОбъект = ДанныеФормыВЗначение(Объект,Тип("СправочникОбъект.бит_уп_ТочкиАлгоритмов"));
	СохраненнаяНастройка = ТочкаОбъект.ПрочитатьОформление();
	
	Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") Тогда
		
		бит_ОбщегоНазначения.УстановитьСвойствоИзСтруктуры(ЭтаФорма,СохраненнаяНастройка,"Шрифт");
		бит_ОбщегоНазначения.УстановитьСвойствоИзСтруктуры(ЭтаФорма,СохраненнаяНастройка,"ЦветФона");
		бит_ОбщегоНазначения.УстановитьСвойствоИзСтруктуры(ЭтаФорма,СохраненнаяНастройка,"ЦветЛинии");		
		бит_ОбщегоНазначения.УстановитьСвойствоИзСтруктуры(ЭтаФорма,СохраненнаяНастройка,"ЦветТекста");
		бит_ОбщегоНазначения.УстановитьСвойствоИзСтруктуры(ЭтаФорма,СохраненнаяНастройка,"ГоризонтальноеПоложение","ГоризонтальноеПоложениеТекста");
		бит_ОбщегоНазначения.УстановитьСвойствоИзСтруктуры(ЭтаФорма,СохраненнаяНастройка,"ВертикальноеПоложение","ВертикальноеПоложениеТекста");
		
	Иначе
		
		ЭтаФорма.ГоризонтальноеПоложениеТекста = ГоризонтальноеПоложение.Центр;
		ЭтаФорма.ВертикальноеПоложениеТекста   = ВертикальноеПоложение.Центр;
		// Изменение кода. Начало. 04.07.2017{{
		ЭтаФорма.ЦветФона = ЦветаСтиля.бит_ЦветТочекАлгоритма;
		Если Объект.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие Тогда
		
			ЭтаФорма.ЦветЛинии 	= Новый Цвет(255,255,255);
			ЭтаФорма.ЦветТекста = Новый Цвет(255,255,255);
		Иначе
			ЭтаФорма.ЦветЛинии 	= ЦветаСтиля.бит_ЦветТочекАлгоритма;		
			ЭтаФорма.ЦветТекста = ЦветаСтиля.бит_ЦветТочекАлгоритма;
		КонецЕсли; 
		ЭтаФорма.Шрифт = Новый Шрифт("Roboto",8,Ложь);
		// Изменение кода. Конец. 04.07.2017}}
		
	КонецЕсли; 
	
	// Заполнение динамических параметров процесса.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ЗаполнитьПараметрыПроцесса();
	
	КонецЕсли;
	
    // Параметры выбора пользовательского условия.
	МассивПараметров = Новый Массив;
	
	СписокДоступныеКонтексты = Новый СписокЗначений;
	
	Если Объект.Владелец.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Прочее Тогда
		СписокДоступныеКонтексты.Добавить(Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.Процесс);
	Иначе	
		СписокДоступныеКонтексты.Добавить(Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.ТекущийОбъект);
		СписокДоступныеКонтексты.Добавить(Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.ТекущийОбъект_УстановленныеВизы);
	КонецЕсли; 
	
	НовыйПараметр   = Новый ПараметрВыбора("Отбор.КонтекстВыполнения",СписокДоступныеКонтексты);
	МассивПараметров.Добавить(НовыйПараметр);	
	
	Элементы.ПользовательскоеУсловие.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Параметры выбора пользовательского действия.
	МассивПараметров = Новый Массив;
	
	ЗаполнитьКэшЗначений(мКэшЗначений);
	ЕстьДинамическиеПараметры = Справочники.бит_уп_Алгоритмы.ЕстьДинамическиеПараметры(Объект.Владелец);		
	
	ЗаполнитьТипыПараметров();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-08 (#2971)	
	//Используется для реализации выполнения условий в разрезе аналитик
	ОбработатьНеобходимостьПараметраТочкиЦикла();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-08 (#2971)
	
	УстановитьВидимость();	
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
// 
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураОформление = Новый Структура;
	СтруктураОформление.Вставить("Шрифт"                  ,Шрифт);
	СтруктураОформление.Вставить("ЦветФона"               ,ЦветФона);
	СтруктураОформление.Вставить("ЦветЛинии"              ,ЦветЛинии);	
	СтруктураОформление.Вставить("ЦветТекста"             ,ЦветТекста);	
	СтруктураОформление.Вставить("ГоризонтальноеПоложение",ГоризонтальноеПоложениеТекста);
	СтруктураОформление.Вставить("ВертикальноеПоложение"  ,ВертикальноеПоложениеТекста);
	
	ТекущийОбъект.СохранитьОформление(СтруктураОформление);
	
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
// 
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
	
		 Объект.Наименование = Строка(Объект.ВидТочки)+" "+ЭтаФорма.КоличествоТочекВида;
	
	 КонецЕсли; 
	 
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
// 
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьТипыПараметров();	
	
	Если ЭтаФорма.СоздатьСвязьПриЗаписи Тогда
		
		Если ТекущийОбъект.ВходящиеТочки.Количество() > 0 Тогда
			
			ТочкаВходящая = ТекущийОбъект.ВходящиеТочки[0].Точка;
			Направление   = ТекущийОбъект.ВходящиеТочки[0].Направление;
			
			ТочкаВхОб = ТочкаВходящая.ПолучитьОбъект();
			
			НоваяСтрока = ТочкаВхОб.ИсходящиеТочки.Добавить();
			НоваяСтрока.Точка       = ТекущийОбъект.Ссылка;
			НоваяСтрока.Направление = Направление;
			
			бит_ОбщегоНазначения.ЗаписатьСправочник(ТочкаВхОб,,"Ошибки");
			
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
// 
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Если был записан новый элемент, открытый из карты - увеличим количество точек соответсвующего вида
	// это необходимо для корректного формирования автоматических наименований.
	Если ЭтаФорма.СоздатьСвязьПриЗаписи Тогда
		
		ЭтаФорма.СоздатьСвязьПриЗаписи = Ложь;
		
		Если НЕ ВладелецФормы = Неопределено И ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда
			
			Если ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("СправочникСсылка.бит_уп_Алгоритмы") Тогда
				Если Объект.ВидТочки = ЭтаФорма.мКэшЗначений.Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие Тогда
					 ИмяПараметра = "КоличествоТочекДействия";
				ИначеЕсли Объект.ВидТочки = ЭтаФорма.мКэшЗначений.Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие Тогда	 
					 ИмяПараметра = "КоличествоТочекУсловия";
				ИначеЕсли Объект.ВидТочки = ЭтаФорма.мКэшЗначений.Перечисления.бит_уп_ВидыТочекАлгоритмов.Разделение Тогда	 
					 ИмяПараметра = "КоличествоТочекРазделения";
				ИначеЕсли Объект.ВидТочки = ЭтаФорма.мКэшЗначений.Перечисления.бит_уп_ВидыТочекАлгоритмов.Слияние Тогда	 
					 ИмяПараметра = "КоличествоТочекСлияния";					 
				КонецЕсли; 
				Оповестить("УвеличитьКоличествоТочек", ИмяПараметра, ВладелецФормы.УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
// 
&НаКлиенте
Процедура ПриЗакрытии()
	
	Если НЕ ВладелецФормы = Неопределено И ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		Если ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("СправочникСсылка.бит_уп_Алгоритмы") Тогда
			Оповестить("ОбновитьАлгоритм",,ВладелецФормы.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидТочки".
// 
&НаКлиенте
Процедура ВидТочкиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПользовательскоеДействие".
// 
&НаКлиенте
Процедура ПользовательскоеДействиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПользовательскоеДействие) И ПустаяСтрока(Объект.Наименование) Тогда
	
		 Объект.Наименование = Строка(Объект.ПользовательскоеДействие);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПользовательскоеУсловие".
// 
&НаКлиенте
Процедура ПользовательскоеУсловиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПользовательскоеУсловие) И ПустаяСтрока(Объект.Наименование) Тогда
	
		 Объект.Наименование = Строка(Объект.ПользовательскоеУсловие);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Объект.ПользовательскоеДействие) Тогда 	
		
		Список.Добавить(Строка(Объект.ПользовательскоеДействие));
		
		Если ЕстьДинамическиеПараметры Тогда 			
			СтрНаименование = СформироватьНаименованиеИзПараметров();   			 
			Если НЕ ПустаяСтрока(СтрНаименование) Тогда 			
				 Элемент.СписокВыбора.Добавить(СтрНаименование);  			
			КонецЕсли;     			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ПользовательскоеУсловие) Тогда 
		
		Список.Добавить(Строка(Объект.ПользовательскоеУсловие));
		
	КонецЕсли; 
		
	Если Список.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеНачалоВыбораИзСпискаЗавершение", ЭтотОбъект, Элемент);
	
		ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
	
	КонецЕсли; 
	
КонецПроцедуры // НаименованиеНачалоВыбораИзСписка()

// Процедура обработчик оповещения "НаименованиеНачалоВыбораИзСпискаЗавершение".
// 
// Параметры:
// РезультатВыбора - Произвольный.
// Элемент - Структура.
// 
&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСпискаЗавершение(РезультатВыбора, Элемент) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда  		
		Объект.Наименование = РезультатВыбора; 		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда 
		 Объект.Наименование = ВыбранноеЗначение;
	КонецЕсли; 
	
КонецПроцедуры // НаименованиеОбработкаВыбора()

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ПользовательскоеДействие) Тогда
	
		Элемент.СписокВыбора.Добавить(Строка(Объект.ПользовательскоеДействие));
		
		Если ЕстьДинамическиеПараметры Тогда 			
			СтрНаименование = СформироватьНаименованиеИзПараметров();   			 
			Если НЕ ПустаяСтрока(СтрНаименование) Тогда 			
				 Элемент.СписокВыбора.Добавить(СтрНаименование);  			
			КонецЕсли;     			
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ПользовательскоеУсловие) Тогда
		
		Элемент.СписокВыбора.Добавить(Строка(Объект.ПользовательскоеУсловие));
	
	КонецЕсли;
	
КонецПроцедуры // НаименованиеАвтоПодбор()

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ВладелецИзменение();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыПроцесса

&НаКлиенте
Процедура ПараметрыПроцессаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПараметрыПроцесса.ТекущиеДанные;
	Элемент.ВыбиратьТип = ?(ТекущаяСтрока.Значение = Неопределено, Истина, Ложь);
	Элемент.ОграничениеТипа = ТекущаяСтрока.Тип;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ПараметрыПроцесса.ТекущиеДанные;
	ТекущаяСтрока.Значение = ТекущаяСтрока.Тип.ПривестиЗначение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПроцессаЗначениеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
	
		Объект.Наименование = СформироватьНаименованиеИзПараметров();
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьПараметры(Команда)
	
	Если Объект.ПараметрыПроцесса.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьПараметрыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Параметры будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе
		
		 ЗаполнитьПараметрыПроцесса();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура обработчик оповещения "КомандаОбновитьПараметрыЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура КомандаОбновитьПараметрыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ЗаполнитьПараметрыПроцесса();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_уп_ВидыТочекАлгоритмов);
	КэшПеречисления.Вставить("бит_уп_ВидыТочекАлгоритмов",ТекПеречисление);
	
	КэшированныеЗначения.Вставить("Перечисления",КэшПеречисления);
	
	флПроизвольныйПроцесс = Ложь;
	Если Объект.Владелец.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Визирование Тогда
		НазначениеДействия = Перечисления.бит_НазначенияПользовательскихДействий.Визирование;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-08 (#2971)
		КэшированныеЗначения.Вставить("ок_НоваяСхема"		  , Объект.Владелец.ок_НоваяСхема);
		КэшированныеЗначения.Вставить("ИмяПараметраНоваяТочка", "Точка цикла");
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-08 (#2971)
	ИначеЕсли Объект.Владелец.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов Тогда
		НазначениеДействия = Перечисления.бит_НазначенияПользовательскихДействий.ИзменениеСтатусовОбъектов
	ИначеЕсли Объект.Владелец.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Прочее Тогда
		
		НазначениеДействия = Новый СписокЗначений;
		НазначениеДействия.Добавить(Перечисления.бит_НазначенияПользовательскихДействий.СозданиеЗадачи);
		НазначениеДействия.Добавить(Перечисления.бит_НазначенияПользовательскихДействий.ПодчиненныйПроцесс);
		
	    флПроизвольныйПроцесс = Истина;
		
	КонецЕсли; 
	
	КэшированныеЗначения.Вставить("НазначениеДействия", НазначениеДействия);
	
	КэшированныеЗначения.Вставить("ЭтоПоизвольныйПроцесс", флПроизвольныйПроцесс);
	
КонецПроцедуры

// Устанавливает видимость/доступность элементов формы.
// 
// Параметры
//  Режим  - Строка
// 
&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоТочкаДействия = ?(Объект.ВидТочки = мКэшЗначений.Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие,Истина,Ложь);			
	ЭтоТочкаУсловия  = ?(Объект.ВидТочки = мКэшЗначений.Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие ,Истина,Ложь);
	
	
	Если ВРег(Режим) = ВРег("ОткрытаИзМаршрута") Тогда
		
		Элементы.Владелец.Видимость                      = Ложь;
		Элементы.ВидТочки.ТолькоПросмотр                 = Истина;
		Элементы.ВходящиеТочки.Доступность               = Ложь;
		Элементы.ИсходящиеТочки.Доступность              = Ложь;
		Элементы.ГруппаРазрешитьРедактирование.Видимость = Ложь; 		
		
	Иначе
		
		Элементы.ВходящиеТочки.Доступность = ЭтаФорма.РазрешитьРедактирование;
		Элементы.ИсходящиеТочки.Доступность= ЭтаФорма.РазрешитьРедактирование;
		Элементы.ВидТочки.ТолькоПросмотр   = НЕ ЭтаФорма.РазрешитьРедактирование;
				
	    Элементы.ДекорацияРазрешитьРедактирование.Заголовок = "Операции с точками алгоритма рекомендуется выполнять в поле ""Алгоритм"" справочника ""Алгоритмы процессов.""
															  |Непосредственное редактирование связей точек алгоритма может быть небезопасно!";
        Элементы.ДекорацияРазрешитьРедактирование.ЦветТекста = WebЦвета.Зеленый;
		
	КонецЕсли; 	
	
	Элементы.ПользовательскоеДействие.Видимость = ЭтоТочкаДействия;
	Элементы.ПользовательскоеДействие.АктивизироватьПоУмолчанию = ЭтоТочкаДействия;
	Элементы.ПользовательскоеУсловие.Видимость  = ЭтоТочкаУсловия;	
	Элементы.ПользовательскоеУсловие.АктивизироватьПоУмолчанию = ЭтоТочкаУсловия;
	Элементы.ЦветФона.Видимость                 = ЭтоТочкаДействия;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-08 (#2971)	
	Если мКэшЗначений.Свойство("ок_НоваяСхема") И
		 мКэшЗначений.ок_НоваяСхема И
		 Объект.ВидТочки = мКэшЗначений.Перечисления.бит_уп_ВидыТочекАлгоритмов.Слияние
		 //ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
		 ИЛИ Объект.ВидТочки = мКэшЗначений.Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие
		 //ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)
	Тогда
		//Кнопка используется только для действий
		Элементы.ПараметрыПроцессаКомандаОбновитьПараметры.Видимость   = Ложь;
		Элементы.ПараметрыПроцессаКомандаОбновитьПараметры.Доступность = Ложь;
		//Отобразим наш параметр
		Элементы.ГруппаПараметрыПроцесса.Видимость  = Истина;
		Возврат;
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-08 (#2971)
	
	Элементы.ГруппаПараметрыПроцесса.Видимость  = ЕстьДинамическиеПараметры И ЭтоТочкаДействия;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура ПользовательскоеДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если мКэшЗначений.ЭтоПоизвольныйПроцесс Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Алгоритм", Объект.Владелец);
		Отбор.Вставить("НазначениеДействия", мКэшЗначений.НазначениеДействия);
		
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		ОткрытьФорму("Справочник.бит_ПользовательскиеДействия.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обрабатывает изменение алгоритма. 
// 
&НаСервере
Процедура ВладелецИзменение()
	
	ЕстьДинамическиеПараметры = Справочники.бит_уп_Алгоритмы.ЕстьДинамическиеПараметры(Объект.Владелец);	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-08 (#2971)
	пТекНоваяСхема = Объект.Владелец.ок_НоваяСхема;
	Если мКэшЗначений.Свойство("ок_НоваяСхема") Тогда 
		
		Если мКэшЗначений.ок_НоваяСхема<>пТекНоваяСхема Тогда 
			Если Не пТекНоваяСхема Тогда 
				
				мКэшЗначений.Удалить("ок_НоваяСхема");
				
				мСтрокиПараметра = Объект.ПараметрыПроцесса.НайтиСтроки(Новый Структура("Имя", мКэшЗначений.ИмяПараметраНоваяТочка));
				Если мСтрокиПараметра.Количество()>0 Тогда 
					Объект.ПараметрыПроцесса.Удалить(мСтрокиПараметра);
				КонецЕсли;	
							
			Иначе 
				ДобавитьПараметрТочкаЦикла();
				мКэшЗначений.Вставить("ок_НоваяСхема",пТекНоваяСхема);				
			КонецЕсли;        					
		КонецЕсли;
		
	ИначеЕсли пТекНоваяСхема Тогда 
		ДобавитьПараметрТочкаЦикла();
		мКэшЗначений.Вставить("ок_НоваяСхема",пТекНоваяСхема);
	Иначе
		Возврат; //Не нужно обновлять видимость
	КонецЕсли;
	
	УстановитьВидимость();
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-08 (#2971)
	
КонецПроцедуры // ВладелецИзменение()

// Процедура заполняет параметры процесса. 
// 
&НаСервере
Процедура ЗаполнитьПараметрыПроцесса() 
	
	Объект.ПараметрыПроцесса.Очистить();
	
	Для каждого СтрокаТаблицы Из Объект.Владелец.ПараметрыАлгоритма Цикл
		
		Если НЕ СтрокаТаблицы.Динамический Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		НоваяСтрока = Объект.ПараметрыПроцесса.Добавить();
		НоваяСтрока.Имя          = СтрокаТаблицы.Имя;
		НоваяСтрока.СтрТип       = СтрокаТаблицы.СтрТип;
		НоваяСтрока.Значение     = СтрокаТаблицы.ЗначениеПоУмолчанию;
		НоваяСтрока.Обязательный = СтрокаТаблицы.Обязательный;
		
		НоваяСтрока.Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(НоваяСтрока.СтрТип);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьПараметрыПроцесса() 

// Процедура восстанавливает описания типов параметров из строкового представления. 
// Восстановление необходимо производить ПриСозданииНаСервере и ПослеЗаписи, 
// т.к. описание типов не может храниться в БД.
// 
&НаСервере
Процедура ЗаполнитьТипыПараметров()

	Для каждого СтрокаТаблицы Из Объект.ПараметрыПроцесса Цикл
		
		СтрокаТаблицы.Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.СтрТип);
		
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьТипыПараметров()

// Функция формирует наименование элемента по заполненным параметрам процесса.
// 
// Возвращаемое значение:
//  СтрНаименование - Строка.
// 
&НаКлиенте
Функция СформироватьНаименованиеИзПараметров()
	
	СтрНаименование = Строка(Объект.ПользовательскоеДействие);
	Для каждого СтрокаТаблицы Из Объект.ПараметрыПроцесса Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
			
			СтрНаименование = СтрНаименование + ?(ПустаяСтрока(СтрНаименование),"",", ") + Строка(СтрокаТаблицы.Значение);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат СтрНаименование;
	
КонецФункции // СформироватьНаименованиеИзПараметров()

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-05-08 (#2971)
&НаСервере
Процедура ОбработатьНеобходимостьПараметраТочкиЦикла()
	                                         
	Если мКэшЗначений.Свойство("ок_НоваяСхема") Тогда                
		мПараметрыПроцессаТочкаЦикла = Объект.ПараметрыПроцесса.НайтиСтроки(Новый Структура("Имя",мКэшЗначений.ИмяПараметраНоваяТочка));
		Если мПараметрыПроцессаТочкаЦикла.Количество() = 0 Тогда
			ДобавитьПараметрТочкаЦикла();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрТочкаЦикла()
	
	стрПараметр = Объект.ПараметрыПроцесса.Добавить();
	стрПараметр.Имя 	 = мКэшЗначений.ИмяПараметраНоваяТочка;
	стрПараметр.СтрТип   = "Булево";
	стрПараметр.Значение = Ложь;		

КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-05-08 (#2971)

#КонецОбласти
