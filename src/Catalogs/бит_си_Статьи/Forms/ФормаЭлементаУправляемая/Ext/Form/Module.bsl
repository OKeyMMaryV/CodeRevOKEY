
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	ОбновитьТекстСтатьиНаСервере(Объект.Ссылка);
	ЗаполнитьДеревоМеток(Объект.Ссылка); 
	ЗаполнитьДеревоОтборов(Объект.Ссылка);
	ЗаполнитьДеревоСвязанныхОбъектов(Объект.Ссылка);
	
	ОткрытаяСтраницаСтатьи = Элементы.ГруппаТекстСтатьиРедактирование.ТекущаяСтраница.Имя;
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
	
		 ВнутреннийИД = Объект.Ссылка.УникальныйИдентификатор();
	
	КонецЕсли; 
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаСтатьяСправки" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ОбновитьТекстСтатьиНаСервере(Объект.Ссылка);
			ЗаполнитьДеревоМеток(Объект.Ссылка); 
			ЗаполнитьДеревоОтборов(Объект.Ссылка);
			ЗаполнитьДеревоСвязанныхОбъектов(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ТекстHTML = РабочийТекстHTML;
	
	СтруктураКартинок = Новый Структура();
	НомерКартинки = 0;
	// Изменение кода. Начало. 23.01.2013{{
	Если ПараметрыЗаписи.Свойство("СписокИзображений") Тогда
		
		Для Каждого ТекКартинка Из ПараметрыЗаписи.СписокИзображений Цикл
			НомерКартинки = НомерКартинки + 1;
			ДанныеКартинки = ПолучитьИзВременногоХранилища(ТекКартинка.Значение);
			СтруктураКартинок.Вставить("image" + СокрЛП(НомерКартинки), Новый Картинка(ДанныеКартинки));
			ТекущийОбъект.ТекстHTML = СтрЗаменить(ТекущийОбъект.ТекстHTML, ТекКартинка.Представление, "image" + СокрЛП(НомерКартинки));
			
			ТекКартинка.Представление	= "image" + СокрЛП(НомерКартинки);
			ТекКартинка.Значение		= ДанныеКартинки;
		КонецЦикла;
		
		ТекущийОбъект.Изображения = Новый ХранилищеЗначения(ПараметрыЗаписи.СписокИзображений);
		
	КонецЕсли; 
	// Изменение кода. Конец. 23.01.2013}}
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НаборЗаписей = РегистрыСведений.бит_си_УстановленныеМеткиСтатей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Статья.Значение = ТекущийОбъект.Ссылка;
	НаборЗаписей.Отбор.Статья.Использование = Истина;
	УстановленныеМетки = УстановленныеМетки(Метки.ПолучитьЭлементы());
	Для Каждого ТекСтрока Из УстановленныеМетки Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Статья = ТекущийОбъект.Ссылка;
		Запись.Метка = ТекСтрока.Метка;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Описание = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи меток статьи произошла ошибка: " + Описание); 
	КонецПопытки;
		
	НаборЗаписей = РегистрыСведений.бит_си_СвязанныеОбъекты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Статья.Значение = ТекущийОбъект.Ссылка;
	НаборЗаписей.Отбор.Статья.Использование = Истина;
	НаборЗаписей.Отбор.ДляОтборов.Значение = Истина;
	НаборЗаписей.Отбор.ДляОтборов.Использование = Истина;
	Для Каждого ТекТип Из ОтборыОбъектов.ПолучитьЭлементы() Цикл
		Для Каждого ТекСтрока Из ТекТип.ПолучитьЭлементы() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Статья		= ТекущийОбъект.Ссылка;
			Запись.Объект		= ТекСтрока.Объект;
			Запись.Тип			= ТекТип.Тип;
			Запись.ДляОтборов	= Истина;
		КонецЦикла;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Описание = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При критериев отбора произошла ошибка: " + Описание);
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.бит_си_СвязанныеОбъекты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Статья.Значение = ТекущийОбъект.Ссылка;
	НаборЗаписей.Отбор.Статья.Использование = Истина;
	НаборЗаписей.Отбор.ДляОтборов.Значение = Ложь;
	НаборЗаписей.Отбор.ДляОтборов.Использование = Истина;
	Для Каждого ТекТип Из СвязанныеОбъекты.ПолучитьЭлементы() Цикл
		Для Каждого ТекСтрока Из ТекТип.ПолучитьЭлементы() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Статья		= ТекущийОбъект.Ссылка;
			Запись.Объект		= ТекСтрока.Объект;
			Запись.Тип			= ТекТип.Тип;
			Запись.ДляОтборов	= Ложь;
		КонецЦикла;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Описание = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При записи связанных объектов произошла ошибка: " + Описание);
	КонецПопытки;
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененаСтатьяСправки", Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры // ПослеЗаписи()

#КонецОбласти  

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстСтатьиРедактированиеПриИзменении(Элемент)
	
	ОбновитьРабочийТекстИзПоляРедактирования();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ТекстСтатьиРедактированиеПриИзменении()

&НаКлиенте
Процедура ТекстСтатьиHTMLПриИзменении(Элемент)
	
	СписокИзображений = ПолучитьСписокИзображенийВТексте(РабочийТекстHTML);
	
	ОбновитьТекстПоляРедактированияИзРабочегоТекста(СписокИзображений);
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ТекстСтатьиHTMLПриИзменении()

&НаКлиенте
Процедура ГруппаТекстСтатьиРедактированиеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// Переделываем на смену страниц, чтобы пользователь мог работать сколько хотел.
	Если ОткрытаяСтраницаСтатьи = "ГруппаРедактирование" И Модифицированность Тогда 
		ОбновитьРабочийТекстИзПоляРедактирования();
	ИначеЕсли ОткрытаяСтраницаСтатьи = "ГруппаHTML" И Модифицированность Тогда 
		ОбновитьТекстПоляРедактированияИзРабочегоТекста(ПолучитьСписокИзображенийВТексте(РабочийТекстHTML));
	КонецЕсли;
	
	ОткрытаяСтраницаСтатьи = ТекущаяСтраница.Имя;
	
КонецПроцедуры // ГруппаТекстСтатьиРедактированиеПриСменеСтраницы()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМестаИспользования

&НаКлиенте
Процедура МестаИспользованияИмяМеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИменаКоллекций = Новый Массив();
	ИменаКоллекций.Добавить("Справочники");
	ИменаКоллекций.Добавить("Документы");
	ИменаКоллекций.Добавить("ЖурналыДокументов");
	ИменаКоллекций.Добавить("ПланыВидовХарактеристик");
	ИменаКоллекций.Добавить("ПланыСчетов");
	ИменаКоллекций.Добавить("ПланыВидовРасчета");
	ИменаКоллекций.Добавить("РегистрыСведений");
	ИменаКоллекций.Добавить("РегистрыНакопления");
	ИменаКоллекций.Добавить("РегистрыБухгалтерии");
	ИменаКоллекций.Добавить("РегистрыРасчета");
	ИменаКоллекций.Добавить("Отчеты");
	ИменаКоллекций.Добавить("Обработки");
	ИменаКоллекций.Добавить("БизнесПроцессы");
	ИменаКоллекций.Добавить("Задачи");
	ИменаКоллекций.Добавить("ПланыОбмена");
	ИменаКоллекций.Добавить("ОбщиеФормы");
	
	ФормаВыбора = ПолучитьФорму("Справочник.бит_си_Статьи.Форма.ДеревоМетаданныхУправляемая",
								Новый Структура("ИменаКоллекций,
												|ПоказыватьФормы,
												|ОповещатьОВыборе,
												|ВозвращаемоеЗначение",
												ИменаКоллекций,
												Истина,
												Истина,
												"ИмяОбъектаПолное"),
								Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры // МестаИспользованияИмяМеткиНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборыОбъектов

&НаКлиенте
Процедура ОтборыОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование = Истина Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элементы.ОтборыОбъектов.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Элементы.ОтборыОбъектов.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
		НоваяСтрока = Элементы.ОтборыОбъектов.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		Элементы.ОтборыОбъектов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ОтборыОбъектовПриНачалеРедактирования(Элементы.ОтборыОбъектов, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ОтборыОбъектовПередНачаломДобавления()

&НаКлиенте
Процедура ОтборыОбъектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.ОтборыОбъектов.ТекущиеДанные;
		Если ТекущаяСтрока.ПолучитьРодителя().Тип = "#Роль" Тогда
			ТекущаяСтрока.Тип		= ТекущаяСтрока.ПолучитьРодителя().Тип;
			ТекущаяСтрока.Объект	= "";
			Элемент.ПодчиненныеЭлементы.ОтборыОбъектовОбъект.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			Элемент.ПодчиненныеЭлементы.ОтборыОбъектовОбъект.ВыбиратьТип = Ложь;
		ИначеЕсли ТекущаяСтрока.ПолучитьРодителя().Тип = "#РежимЗапуска" Тогда
			ТекущаяСтрока.Тип		= ТекущаяСтрока.ПолучитьРодителя().Тип;
			ТекущаяСтрока.Объект	= "";
			Элемент.ПодчиненныеЭлементы.ОтборыОбъектовОбъект.ОграничениеТипа = Новый ОписаниеТипов("Строка");
			Элемент.ПодчиненныеЭлементы.ОтборыОбъектовОбъект.ВыбиратьТип = Ложь;
		Иначе
			ТекущаяСтрока.Тип		= ТекущаяСтрока.ПолучитьРодителя().Тип;
			ТекущаяСтрока.Объект	= Новый (Тип(СтрЗаменить(ТекущаяСтрока.Тип, ".", "Ссылка.")));
			Элемент.ПодчиненныеЭлементы.ОтборыОбъектовОбъект.ОграничениеТипа = Новый ОписаниеТипов(СтрЗаменить(ТекущаяСтрока.Тип, ".", "Ссылка."));
			Элемент.ПодчиненныеЭлементы.ОтборыОбъектовОбъект.ВыбиратьТип = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОтборыОбъектовПриНачалеРедактирования()

&НаКлиенте
Процедура ОтборыОбъектовПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ОтборыОбъектов.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ОтборыОбъектовПередНачаломИзменения()

&НаКлиенте
Процедура ОтборыОбъектовОбъектПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборыОбъектов.ТекущиеДанные;
	ТекущаяСтрока = Элементы.ОтборыОбъектов.ТекущаяСтрока;
	НайденаяСтрока = Неопределено;
	СтрокиДляПроверки = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого ТекСтрока Из СтрокиДЛяПроверки Цикл
		Если НЕ ТекСтрока.ПолучитьИдентификатор() = ТекущаяСтрока И ТекСтрока.Объект = ТекущиеДанные.Объект Тогда
			НайденаяСтрока = ТекСтрока.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ НайденаяСтрока = Неопределено Тогда
		СтрокиДляПроверки.Удалить(СтрокиДляПроверки.Индекс(ТекущиеДанные));
		Элементы.ОтборыОбъектов.ТекущаяСтрока = НайденаяСтрока;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры // ОтборыОбъектовОбъектПриИзменении()

&НаКлиенте
Процедура ОтборыОбъектовОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.ОтборыОбъектов.ТекущиеДанные.Тип = "#Роль" Тогда
		СтандартнаяОбработка = Ложь;
	
		СписокРолей = ПолучитьСписокРолей();
		ТекРоль = ВыбратьИзСписка(СписокРолей, Элемент, СписокРолей.НайтиПоЗначению(Элементы.ОтборыОбъектов.ТекущиеДанные.Объект));
		Если НЕ ТекРоль = Неопределено Тогда
			Элементы.ОтборыОбъектов.ТекущиеДанные.Объект = ТекРоль.Значение;
			ОтборыОбъектовОбъектПриИзменении(Элемент);
		КонецЕсли;
	ИначеЕсли Элементы.ОтборыОбъектов.ТекущиеДанные.Тип = "#РежимЗапуска" Тогда
		СтандартнаяОбработка = Ложь;
	
		СписокРежимов = Новый СписокЗначений();
		СписокРежимов.Добавить("Обычный", "Обычный");
		СписокРежимов.Добавить("Управляемый", "Управляемый");
		//ТекРежим = ВыбратьИзСписка(СписокРежимов, Элемент, СписокРежимов.НайтиПоЗначению(Элементы.ОтборыОбъектов.ТекущиеДанные.Объект));
		//Если НЕ ТекРежим = Неопределено Тогда
		//	Элементы.ОтборыОбъектов.ТекущиеДанные.Объект = ТекРежим.Значение;
		//	ОтборыОбъектовОбъектПриИзменении(Элемент);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОтборыОбъектовОбъектНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязанныеОбъекты

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
    
    Если Копирование = Истина Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
    
    Если Элементы.СвязанныеОбъекты.ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
    
    Если Элементы.СвязанныеОбъекты.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
		НоваяСтрока = Элементы.СвязанныеОбъекты.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		Элементы.СвязанныеОбъекты.ТекущаяСтрока = Элементы.СвязанныеОбъекты.ТекущаяСтрока + 1;
		СвязанныеОбъектыПриНачалеРедактирования(Элементы.СвязанныеОбъекты, Истина, Ложь);
    КонецЕсли;
    
КонецПроцедуры // СвязанныеОбъектыПередНачаломДобавления()

&НаКлиенте
Процедура СвязанныеОбъектыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    
    Если НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.СвязанныеОбъекты.ТекущиеДанные;
		ТекущаяСтрока.Тип		= ТекущаяСтрока.ПолучитьРодителя().Тип;
		ТекущаяСтрока.Объект	= Новый (Тип(СтрЗаменить(ТекущаяСтрока.Тип, ".", "Ссылка.")));
		Элемент.ПодчиненныеЭлементы.СвязанныеОбъектыОбъект.ОграничениеТипа = Новый ОписаниеТипов(СтрЗаменить(ТекущаяСтрока.Тип, ".", "Ссылка."));
		Элемент.ПодчиненныеЭлементы.СвязанныеОбъектыОбъект.ВыбиратьТип = Ложь;
    КонецЕсли;
    
КонецПроцедуры // СвязанныеОбъектыПриНачалеРедактирования()

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломИзменения(Элемент, Отказ)
    
    Если Элементы.СвязанныеОбъекты.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
		Возврат;
    КонецЕсли;
    
КонецПроцедуры // СвязанныеОбъектыПередНачаломИзменения()

&НаКлиенте
Процедура СвязанныеОбъектыПередУдалением(Элемент, Отказ)
    
    Если Элементы.СвязанныеОбъекты.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
		Возврат;
    КонецЕсли;
    
КонецПроцедуры // СвязанныеОбъектыПередУдалением()

&НаКлиенте
Процедура СвязанныеОбъектыОбъектПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СвязанныеОбъекты.ТекущиеДанные;
	ТекущаяСтрока = Элементы.СвязанныеОбъекты.ТекущаяСтрока;
	НайденаяСтрока = Неопределено;
	СтрокиДляПроверки = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
    
    Для Каждого ТекСтрока Из СтрокиДляПроверки Цикл
		Если НЕ ТекСтрока.ПолучитьИдентификатор() = ТекущаяСтрока И ТекСтрока.Объект = ТекущиеДанные.Объект Тогда
			НайденаяСтрока = ТекСтрока.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
    КонецЦикла;
    
	Если НЕ НайденаяСтрока = Неопределено Тогда
		СтрокиДляПроверки.Удалить(СтрокиДляПроверки.Индекс(ТекущиеДанные));
		Элементы.ОтборыОбъектов.ТекущаяСтрока = НайденаяСтрока;
    КонецЕсли;
    
	Модифицированность = Истина;
	
КонецПроцедуры // СвязанныеОбъектыОбъектПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандМетокСтатьи

&НаКлиенте
Процедура Метки_РедактироватьМетку(Команда)
	
	Если Элементы.Метки.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.бит_си_МеткиСтатей." + ?(Элементы.Метки.ТекущиеДанные.ЭтоГруппа, "ФормаГруппы", "ФормаОбъекта"),
				 Новый Структура("Ключ", Элементы.Метки.ТекущиеДанные.Метка),
				 ЭтаФорма);
				 
КонецПроцедуры // Метки_РедактироватьМетку()

&НаКлиенте
Процедура Метки_ОткрытьСправочник(Команда)
	
	ОткрытьФорму("Справочник.бит_си_МеткиСтатей.ФормаСписка", , ЭтаФорма);
				 
КонецПроцедуры // Метки_ОткрытьСправочник()

&НаКлиенте
Процедура Метки_Обновить(Команда)
	
	ЗаполнитьДеревоМеток(Объект.Ссылка);
	
	СтрокиДерева = Метки.ПолучитьЭлементы();
	Дерево = Элементы.Метки;
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		Узел = ТекСтрока.ПолучитьИдентификатор();
		Если Дерево.Развернут(Узел) Тогда
			Продолжить;
		КонецЕсли;
		Дерево.Развернуть(Узел);
	КонецЦикла;
	
КонецПроцедуры // Метки_Обновить()

#КонецОбласти

#Область ОбработчикиКомандЗагрузкиСохраненияСтатей

&НаКлиенте
Процедура ЗагрузитьHTMLИзФайла(Команда)
    
    Если Элементы.Список.ТекущиеДанные = Неопределено Или 
		Элементы.Список.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = "Web-страница (*.htm,*.html)|*.htm;*.html";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если НЕ ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ВремДок = Новый ТекстовыйДокумент();
	ВремДок.Прочитать(ДиалогОткрытияФайла.ПолноеИмяФайла);
	РабочийТекстHTML = ВремДок.ПолучитьТекст();
	
	ОбновитьТекстПоляРедактированияИзРабочегоТекста(ПолучитьСписокИзображенийВТексте(РабочийТекстHTML));

	Модифицированность = Истина;
	
КонецПроцедуры // ЗагрузитьHTMLИзФайла()

#КонецОбласти

#Область ОбработчикиКомандРедактированияСтатьи

&НаКлиенте
Процедура ВставитьКартинкуИзБуфера(Команда)
	
	ВремДанныеРегистратора = "";
	ВремДанныеБиблиотеки = "";
	ПолучитьПараметрыБиблиотекиУтилитСервер(ВремДанныеРегистратора, ВремДанныеБиблиотеки);
	Если НЕ бит_Утилиты.ЕстьКартинкаВБуфереОбмена(ВремДанныеБиблиотеки, ВремДанныеРегистратора) Тогда
		Возврат;
	КонецЕсли;
	ВыбранноеИзображение = бит_Утилиты.ПолучитьКартинкуИзБуфераОбмена(ВремДанныеРегистратора,ВремДанныеБиблиотеки, "png");
	АдресВХранилище = ПоместитьВоВременноеХранилище(ВыбранноеИзображение, ЭтаФорма.УникальныйИдентификатор);
	ВставитьКартинкуСервер(АдресВХранилище);
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ВставитьКартинкуИзБуфера()

&НаКлиенте
Процедура ВставитьСсылкуНаСтатьюСправки(Команда)
	
	ФормаСтатьи = ПолучитьФорму("Справочник.бит_си_Статьи.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
	РезСтруктура = ФормаСтатьи.ОткрытьМодально(30);
	Если НЕ РезСтруктура = Неопределено Тогда
		НачалоВыделения = "";
		КонецВыделения = "";
		Элементы.ТекстСтатьиРедактирование.ПолучитьГраницыВыделения(НачалоВыделения, КонецВыделения);
		
		ТекстДляВставки = "<a href=""ВнСсылка=" +
						  СокрЛП(РезСтруктура.УникальныйИдентификатор()) +
						  """> " +
						  ?(ТекстСтатьиРедактирование.ПолучитьПозициюПоЗакладке(НачалоВыделения) = ТекстСтатьиРедактирование.ПолучитьПозициюПоЗакладке(КонецВыделения),
						    РезСтруктура.НазваниеСтатьи,
							ТекстСтатьиРедактирование.ПолучитьТекст(НачалоВыделения, КонецВыделения)) +
						  " </a>";
		
		ТекстСтатьиРедактирование.Удалить(НачалоВыделения, КонецВыделения);
		
		ВставитьТекстВHTMLСервер(ТекстДляВставки, НачалоВыделения);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ВставитьСсылкуНаСтатьюСправки()

&НаКлиенте
Процедура ВставитьСсылкуНаОбъект(Команда)
	
	ИменаКоллекций = Новый Массив;
	ИменаКоллекций.Добавить("Справочники");
	ИменаКоллекций.Добавить("Документы");
	ИменаКоллекций.Добавить("Отчеты");
	ИменаКоллекций.Добавить("Обработки");
	
	ФормаДерева = ПолучитьФорму("Справочник.бит_си_Статьи.Форма.ДеревоМетаданныхУправляемая", Новый Структура("ИменаКоллекций", ИменаКоллекций), ЭтаФорма);
	РезСтруктура = ФормаДерева.ОткрытьМодально(30);
	
	Если НЕ РезСтруктура = Неопределено Тогда
		НачалоВыделения = "";
		КонецВыделения = "";
		Элементы.ТекстСтатьиРедактирование.ПолучитьГраницыВыделения(НачалоВыделения, КонецВыделения);
		
		Если НЕ Найти("Справочники, Документы", РезСтруктура.ВидОбъекта) = 0 Тогда
			ФормаВыбора = ПолучитьФорму(РезСтруктура.ИмяОбъектаПолное + ".ФормаВыбора", , ЭтаФорма);
			ЗначениеВыбора = ФормаВыбора.ОткрытьМодально(30);
			Если ЗначениеВыбора <> Неопределено Тогда
				ТекстДляВставки = "<a href=""ОбъектКонфигурации=" +
								  РезСтруктура.ВидОбъекта +
								  "@" + РезСтруктура.ИмяОбъекта +
								  "@" + СокрЛП(ЗначениеВыбора.УникальныйИдентификатор()) +
								  """> " +
								  ?(ТекстСтатьиРедактирование.ПолучитьПозициюПоЗакладке(НачалоВыделения) = ТекстСтатьиРедактирование.ПолучитьПозициюПоЗакладке(КонецВыделения),
								    СокрЛП(ЗначениеВыбора),
									ТекстСтатьиРедактирование.ПолучитьТекст(НачалоВыделения, КонецВыделения)) +
								  " </a>";
			КонецЕсли; 
		Иначе	
			ТекстДляВставки = "<a href=""ОбъектКонфигурации=" +
							  РезСтруктура.ВидОбъекта +
							  "@" + РезСтруктура.ИмяОбъекта +
							  "@Форма" + """> " +
							  ?(ТекстСтатьиРедактирование.ПолучитьПозициюПоЗакладке(НачалоВыделения) = ТекстСтатьиРедактирование.ПолучитьПозициюПоЗакладке(КонецВыделения),
							    РезСтруктура.Синоним,
								ТекстСтатьиРедактирование.ПолучитьТекст(НачалоВыделения, КонецВыделения)) +
							  " </a>";
		КонецЕсли; 
		
		ТекстСтатьиРедактирование.Удалить(НачалоВыделения, КонецВыделения);
		
		ВставитьТекстВHTMLСервер(ТекстДляВставки, НачалоВыделения);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ВставитьСсылкуНаОбъект()

&НаКлиенте
Процедура ВставитьСсылкуНаФормуСписка(Команда)
	
	ИменаКоллекций = Новый Массив;
	ИменаКоллекций.Добавить("Справочники");
	ИменаКоллекций.Добавить("Документы");
	ИменаКоллекций.Добавить("РегистрыСведений");
	
	ФормаДерева = ПолучитьФорму("Справочник.бит_си_Статьи.Форма.ДеревоМетаданныхУправляемая", Новый Структура("ИменаКоллекций", ИменаКоллекций), ЭтаФорма);
	РезСтруктура = ФормаДерева.ОткрытьМодально(30);
	
	Если РезСтруктура <> Неопределено Тогда
		НачалоВыделения = "";
		КонецВыделения = "";
		Элементы.ТекстСтатьиРедактирование.ПолучитьГраницыВыделения(НачалоВыделения, КонецВыделения);
		
		ТекстДляВставки = "<a href=""ОбъектКонфигурации=" +
						  РезСтруктура.ВидОбъекта +
						  "@" + РезСтруктура.ИмяОбъекта +
						  "@ФормаСписка" + """> " +
						  ?(ТекстСтатьиРедактирование.ПолучитьПозициюПоЗакладке(НачалоВыделения) = ТекстСтатьиРедактирование.ПолучитьПозициюПоЗакладке(КонецВыделения),
						    РезСтруктура.Синоним,
							ТекстСтатьиРедактирование.ПолучитьТекст(НачалоВыделения, КонецВыделения)) +
						  " </a>";
						  
		ТекстСтатьиРедактирование.Удалить(НачалоВыделения, КонецВыделения);
		
		ВставитьТекстВHTMLСервер(ТекстДляВставки, НачалоВыделения);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ВставитьСсылкуНаФормуСписка

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Помещает внешнюю библиотеку утилит во временное хранилище.
// 
// Параметры: 
// 	ВремДанныеРегистратора - Строка	- Адрес исполняемого файла регистратора библиотеки
//															во временном хранилище.
// 	ВремДанныеБиблиотеки   - Строка	-  Адрес библиотеки утилит во временном хранилище.
//
&НаСервереБезКонтекста
Процедура ПолучитьПараметрыБиблиотекиУтилитСервер(ВремДанныеРегистратора, ВремДанныеБиблиотеки)
	
	ВремДанныеРегистратора = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.бит_РегистраторВнешнихБиблиотек.Имя),Новый УникальныйИдентификатор);
	ВремДанныеБиблиотеки = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.бит_Утилиты.Имя),Новый УникальныйИдентификатор);
	
КонецПроцедуры // ПолучитьПараметрыБиблиотекиУтилитСервер()

// Вставляет картинку в форматированный документ.
// 
// Параметры: 
// 	АдресВХранилище - Строка - Адрес картинки во временном хранилище.
//
&НаСервере
Процедура ВставитьКартинкуСервер(АдресВХранилище)
	
	КартинкаДляВставки = Новый Картинка(ПолучитьИзВременногоХранилища(АдресВХранилище));
	КартинкаДляВставки = КартинкаДляВставки.Преобразовать(ФорматКартинки.PNG);
	НачалоВыделения = "";
	КонецВыделения = "";
	Элементы.ТекстСтатьиРедактирование.ПолучитьГраницыВыделения(НачалоВыделения, КонецВыделения);
	ТекстСтатьиРедактирование.Удалить(НачалоВыделения, КонецВыделения);
	Элементы.ТекстСтатьиРедактирование.УстановитьГраницыВыделения(НачалоВыделения, НачалоВыделения);
	ТекстСтатьиРедактирование.Вставить(НачалоВыделения, КартинкаДляВставки, ТипЭлементаФорматированногоДокумента.Картинка);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ВставитьКартинкуСервер()

// Вставляет текст HTML в текущую позицию курсора в форматированном документе.
// 
// Параметры; 
// 	ТекстДляВставки - Строка - Статья.
// 	ПозицияВставки  - Закладка Форматированного Документа - Текущая позиция курсора в форматированном документе.
//
&НаСервере
Процедура ВставитьТекстВHTMLСервер(ТекстДляВставки, ПозицияВставки)
	
	Элементы.ТекстСтатьиРедактирование.УстановитьГраницыВыделения(ПозицияВставки, ПозицияВставки);
		
	ТекстСтатьиРедактирование.Вставить(ПозицияВставки, "--СлужебныйТекстДляЗамены--", ТипЭлементаФорматированногоДокумента.Текст);
		
	ВремHTML = "";
	КартинкиПослеВставки = Новый Структура();
	ТекстСтатьиРедактирование.ПолучитьHTML(ВремHTML, КартинкиПослеВставки);
	ВремHTML = СтрЗаменить(ВремHTML, "--СлужебныйТекстДляЗамены--", ТекстДляВставки);
	ТекстСтатьиРедактирование.УстановитьHTML(ВремHTML, КартинкиПослеВставки);
		
КонецПроцедуры // ВставитьТекстВHTMLСервер()

// Получает список всех ролей, доступных в конфигурации.
// 
&НаСервереБезКонтекста
Функция ПолучитьСписокРолей()
	
	СписокРолей = Новый СписокЗначений();
	Для Каждого ТекРоль Из Метаданные.Роли Цикл
		СписокРолей.Добавить(ТекРоль.ПолноеИмя(), ТекРоль.Представление());
	КонецЦикла;
	
	Возврат СписокРолей;
	
КонецФункции // ПолучитьСписокРолей()

#Область ПроцедурыИФункцииОбновленияОписанияСтатьи

// Заполняет строки дерева меток по переданному дереву значений.
// 
// Параметры: 
// 	Строки   - СтрокиДереваЗначений - Строки дерева значений.
// 	Родитель - ДанныеФормыЭлементДерева - Элемент дерева, в который добавляется новая строка.
//
&НаСервере 
Процедура ЗаполнитьСтрокиДереваМеток(Строки, Родитель = Неопределено)
	
	Родитель = ?(Родитель = Неопределено, Метки, Родитель);
	Для Каждого СтрокаДерева Из Строки Цикл 
		Если СтрокаДерева.Ссылка.ЭтоГруппа И
			СтрокаДерева.Строки.Количество() = 0  Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Метка = СтрокаДерева.Ссылка;
		НоваяСтрока.Использование = СтрокаДерева.Пометка;
		Если СтрокаДерева.Ссылка.ЭтоГруппа Тогда
			НоваяСтрока.Картинка = БиблиотекаКартинок.СправочникОбъект;
			НоваяСтрока.ЭтоГруппа = Истина;
		Иначе
			ВремКартинка = СтрокаДерева.Ссылка.Пиктограмма.Получить();
			Если ТипЗнч(ВремКартинка) = Тип("ДвоичныеДанные") Тогда
				ВремКартинка = Новый Картинка(ВремКартинка);
			КонецЕсли;
			Если НЕ ТипЗнч(ВремКартинка) = Тип("Картинка") ИЛИ ВремКартинка.Вид = ВидКартинки.Пустая Тогда
				ВремКартинка = БиблиотекаКартинок.бит_си_МеткаСтатьи;
			КонецЕсли;
			НоваяСтрока.Картинка = ВремКартинка;
		КонецЕсли;
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьСтрокиДереваМеток(СтрокаДерева.Строки, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтрокиДереваМеток()

// Заполняет дерево меток.
// 
// Параметры; 
// 	Статья		       -	СправочникСсылка.бит_си_Статьи - Строки для заполнения. 							
// 	УстановленныеМетки -	ТаблицаЗначений - Таблица меток, которые обязательно должны быть установленны.
// 	Обновлять          -	Булево - Проверка на необходимость заполнения.
//
&НаСервере
Процедура ЗаполнитьДеревоМеток(Знач Статья, Знач УстановленныеМетки = Неопределено, Знач Обновлять = Истина)
	
	Если Статья.ЭтоГруппа Или Не Обновлять Тогда
		Возврат;
	КонецЕсли;
	Метки.ПолучитьЭлементы().Очистить();
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	УстановленныеМетки.Метка
	               |ПОМЕСТИТЬ УстановленныеМетки
	               |ИЗ
	               |	&УстановленныеМетки КАК УстановленныеМетки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МеткиСтатей.Наименование КАК Метка,
	               |	ЕСТЬNULL(УстановленныеМетки.Пометка, 0) КАК Пометка,
	               |	МеткиСтатей.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.бит_си_МеткиСтатей КАК МеткиСтатей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			УстановленныеМетки.Метка КАК Метка,
	               |			1 КАК Пометка
	               |		ИЗ
	               |			РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМетки
	               |		ГДЕ
	               |			УстановленныеМетки.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей
	               |			И УстановленныеМетки.Статья = &Статья
	               |		
	               |		ОБЪЕДИНИТЬ
	               |		
	               |		ВЫБРАТЬ
	               |			УстановленныеМетки.Метка,
	               |			1
	               |		ИЗ
	               |			УстановленныеМетки КАК УстановленныеМетки) КАК УстановленныеМетки
	               |		ПО МеткиСтатей.Ссылка = УстановленныеМетки.Метка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Если НЕ ТипЗнч(УстановленныеМетки) = Тип("ТаблицаЗначений") Тогда
		УстановленныеМетки = Новый ТаблицаЗначений();
		УстановленныеМетки.Колонки.Добавить("Метка", Новый ОписаниеТипов("СправочникСсылка.бит_си_МеткиСтатей"));
	КонецЕсли;
	Запрос.УстановитьПараметр("Статья", Статья);
	Запрос.УстановитьПараметр("УстановленныеМетки", УстановленныеМетки);
	МеткиПер = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьСтрокиДереваМеток(МеткиПер.Строки);
	
КонецПроцедуры // ЗаполнитьДеревоМеток()

// Заполняет дерево отборов.
// 
// Параметры: 
// 	Статья - СправочникСсылка.бит_си_Статьи - Строки для заполнения.							
//
&НаСервере
Процедура ЗаполнитьДеревоОтборов(Статья)
	
	Если Статья.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	ОтборыОбъектов.ПолучитьЭлементы().Очистить();
	ВыборкаИсточников = Справочники.бит_си_Источники.Выбрать();
	МассивДобавленных = Новый Массив();
	Пока ВыборкаИсточников.Следующий() Цикл
		Если НЕ ВыборкаИсточников.Обработка.Получить() = "бит_си_ИсточникСправочникСтатьи" Тогда
			Продолжить;
		КонецЕсли;
		ТекНастройки = ВыборкаИсточников.НастройкаПоУмолчанию.Получить();
		Если НЕ ТипЗнч(ТекНастройки) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТекНастройки.Свойство("ОбъектыОтбора") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТекОбъект Из ТекНастройки.ОбъектыОтбора Цикл
			Если НЕ МассивДобавленных.Найти(ТекОбъект.МетаОбъект) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОтборыОбъектов.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Объект = ТекОбъект.Заголовок;
			НоваяСтрока.Тип = ТекОбъект.МетаОбъект;
			МассивДобавленных.Добавить(ТекОбъект.МетаОбъект);
		КонецЦикла;
	КонецЦикла;
	Если ОтборыОбъектов.ПолучитьЭлементы().Количество() = 0 Тогда
		Элементы.ОтборыОбъектов.Доступность = Ложь;
		Элементы.ОтборыОбъектов.КоманднаяПанель.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.ОтборыОбъектов.Доступность = Истина;
		Элементы.ОтборыОбъектов.КоманднаяПанель.Доступность = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыОтбора.Объект КАК Объект,
	               |	ОбъектыОтбора.Тип КАК Тип
	               |ИЗ
	               |	РегистрСведений.бит_си_СвязанныеОбъекты КАК ОбъектыОтбора
	               |ГДЕ
	               |	ОбъектыОтбора.Статья = &Статья
	               |	И ОбъектыОтбора.ДляОтборов";
	Запрос.УстановитьПараметр("Статья", Статья);
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектов.Следующий() Цикл
		СтрокиДерева = ОтборыОбъектов.ПолучитьЭлементы();
		СтрокаТипа = Неопределено;
		Для Каждого ТекСтрока Из СтрокиДерева Цикл
			Если ТекСтрока.Тип = ВыборкаОбъектов.Тип Тогда
				СтрокаТипа = ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокаТипа.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Объект = ВыборкаОбъектов.Объект;
		НоваяСтрока.Тип = СтрокаТипа.Тип;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДеревоОтборов()

// Заполняет дерево связанных объектов.
// 
// Параметры: 
// 	Статья - СправочникСсылка.бит_си_Статьи - Статья, для которой заполняются связанные объекты.						
//
&НаСервере
Процедура ЗаполнитьДеревоСвязанныхОбъектов(Статья)
	
	Если Статья.ЭтоГруппа  Тогда
		Возврат;
	КонецЕсли;
	СвязанныеОбъекты.ПолучитьЭлементы().Очистить();
	ВыборкаИсточников = Справочники.бит_си_Источники.Выбрать();
	МассивДобавленных = Новый Массив();
	Пока ВыборкаИсточников.Следующий() Цикл
		Если НЕ ВыборкаИсточников.Обработка.Получить() = "бит_си_ИсточникСправочникСтатьи" Тогда
			Продолжить;
		КонецЕсли;
		ТекНастройки = ВыборкаИсточников.НастройкаПоУмолчанию.Получить();
		Если НЕ ТипЗнч(ТекНастройки) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТекНастройки.Свойство("ОбъектыПривязки") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТекОбъект Из ТекНастройки.ОбъектыПривязки Цикл
			Если НЕ МассивДобавленных.Найти(ТекОбъект.МетаОбъект) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СвязанныеОбъекты.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Объект = ТекОбъект.Заголовок;
			НоваяСтрока.Тип = ТекОбъект.МетаОбъект;
			МассивДобавленных.Добавить(ТекОбъект.МетаОбъект);
		КонецЦикла;
	КонецЦикла;
	Если ОтборыОбъектов.ПолучитьЭлементы().Количество() = 0 Тогда
		Элементы.СвязанныеОбъекты.Доступность = Ложь;
		Элементы.СвязанныеОбъекты.КоманднаяПанель.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.СвязанныеОбъекты.Доступность = Истина;
		Элементы.СвязанныеОбъекты.КоманднаяПанель.Доступность = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязанныеОбъекты.Объект КАК Объект,
	               |	СвязанныеОбъекты.Тип КАК Тип
	               |ИЗ
	               |	РегистрСведений.бит_си_СвязанныеОбъекты КАК СвязанныеОбъекты
	               |ГДЕ
	               |	СвязанныеОбъекты.Статья = &Статья
	               |	И НЕ СвязанныеОбъекты.ДляОтборов";
	Запрос.УстановитьПараметр("Статья", Статья);
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОбъектов.Следующий() Цикл
		СтрокиДерева = СвязанныеОбъекты.ПолучитьЭлементы();
		СтрокаТипа = Неопределено;
		Для Каждого ТекСтрока Из СтрокиДерева Цикл
			Если ТекСтрока.Тип = ВыборкаОбъектов.Тип Тогда
				СтрокаТипа = ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокаТипа.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Объект = ВыборкаОбъектов.Объект;
		НоваяСтрока.Тип = СтрокаТипа.Тип;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДеревоСвязанныхОбъектов()

// Обновляет текст статьи.
// 
// Параметры 
// 	СтатьяСсылка - СправочникСсылка.бит_си_Статьи - Статья. 							
//
&НаСервере
Процедура ОбновитьТекстСтатьиНаСервере(СтатьяСсылка)
	
	Если НЕ ЗначениеЗаполнено(СтатьяСсылка) Тогда
		Возврат;
	КонецЕсли; 
	
	СпрСпОб = Объект.Ссылка.ПолучитьОбъект();
	Если СпрСпОб = Неопределено Тогда
		СпрСпОб = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	ВремСписокКартинок = Новый СписокЗначений();
	РабочийТекстHTML = СпрСпОб.ЗагрузитьИзображенияИзБД(ЭтаФорма.УникальныйИдентификатор, ВремСписокКартинок);
	
	ТекстHTML = РабочийТекстHTML;
	СтруктураКартинок = Новый Структура();
	НомерКартинки = 0;
	Для Каждого ТекКартинка Из ВремСписокКартинок Цикл
		НомерКартинки = НомерКартинки + 1;
		Попытка
			СтруктураКартинок.Вставить("image" + СокрЛП(НомерКартинки), Новый Картинка(ТекКартинка.Значение));
		Исключение
			Продолжить;
		КонецПопытки;
		ТекстHTML = СтрЗаменить(ТекстHTML, ТекКартинка.Представление, "image" + СокрЛП(НомерКартинки));
	КонецЦикла;
	ТекстСтатьиРедактирование.УстановитьHTML(ТекстHTML, СтруктураКартинок);
	
КонецПроцедуры // ОбновитьТекстСтатьиНаСервере()

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиТекстаСтатьи

// Получает список изображений в тексте HTML, при обнаружении ссылки на локальный файл изображения,
// помещает такие файлы во временное хранилище и заменяет ссылку на адрес во временном хранилище.
//
// Параметры: 
// 	пТекстHTML - Строка - Текст HTML для получения изображений.
//                          
&НаКлиенте
Функция ПолучитьСписокИзображенийВТексте(Знач пТекстHTML)
	
	сзСсылки = Новый СписокЗначений;
	src_Открыт = Ложь;
	ВсегоСтрок = СтрЧислоСтрок(пТекстHTML);
	
	Для СчСтрок = 1 По ВсегоСтрок Цикл
		ТекСтрока = СтрПолучитьСтроку(пТекстHTML, СчСтрок);
		ВсегоСимволов = СтрДлина(ТекСтрока);
		
		IMG_Начало = Найти(ВРег(ТекСтрока),"<IMG");
		
		Если IMG_Начало <> 0 Тогда
			IMG_Начало = IMG_Начало + 4;
			IMG_Путь = "";
			
			Для СчСимвол = IMG_Начало По ВсегоСимволов Цикл
				ТекСимвол = Сред(ТекСтрока, СчСимвол, 1);
				
				Если (ТекСимвол = Символ(34) ИЛИ ТекСимвол = Символ(39)) И src_Открыт Тогда
					
					Если Лев(IMG_Путь, 5) = "e1cib" ИЛИ Лев(IMG_Путь, 6) = "e1c:// " Тогда
						ИмяДляЗамены = IMG_Путь;
					Иначе
						Попытка
							ИмяДляЗамены = "";
							//ПоместитьФайл(ИмяДляЗамены, _IMG_Путь, , Ложь, ЭтаФорма.УникальныйИдентификатор);
						Исключение
							IMG_Путь = "";
							src_Открыт = Ложь;
							Описание = ОписаниеОшибки();
							Продолжить;
						КонецПопытки;
					КонецЕсли;
					
					СчСимвол = СчСимвол - (СтрДлина(IMG_Путь) - СтрДлина(ИмяДляЗамены));
					ТекСтрока = СтрЗаменить(ТекСтрока, IMG_Путь, ИмяДляЗамены);
					
					сзСсылки.Добавить(ИмяДляЗамены, IMG_Путь);
					
					IMG_Путь = "";
					src_Открыт = Ложь;
				КонецЕсли;
				
				Если НРег(Сред(ТекСтрока, СчСимвол, 5)) = ("src=" + Символ(34)) ИЛИ НРег(Сред(ТекСтрока, СчСимвол, 5)) = ("src=" + Символ(39)) Тогда
					СчСимвол = СчСимвол + 5;
					src_Открыт = Истина;
				КонецЕсли;
				
				Если src_Открыт Тогда
					IMG_Путь = IMG_Путь + Сред(ТекСтрока, СчСимвол, 1);
				КонецЕсли;
			КонецЦикла; // По строке, символы
		КонецЕсли; // встречается тег
	КонецЦикла;	// по тексту, строки

	Возврат сзСсылки;
	
КонецФункции // ПолучитьСписокИзображенийВТексте()

// Выполняет обновление текста HTML по результатм редактирования документа в поле форматированного документа.
//
&НаСервере
Процедура ОбновитьРабочийТекстИзПоляРедактирования()
	
	СтруктураКартинок = Новый Структура();
	ТекстHTML = "";
	ТекстСтатьиРедактирование.ПолучитьHTML(ТекстHTML, СтруктураКартинок);
	Для Каждого ТекКартинка Из СтруктураКартинок Цикл
		АдресКартинки = ПоместитьВоВременноеХранилище(ТекКартинка.Значение.ПолучитьДвоичныеДанные(), ЭтаФорма.УникальныйИдентификатор);
		ТекстHTML = СтрЗаменить(ТекстHTML, ТекКартинка.Ключ, АдресКартинки);
	КонецЦикла;
	
	РабочийТекстHTML = ТекстHTML;
	
КонецПроцедуры // ОбновитьРабочийтекстИзПоляРедактирования()

// Выполняет обновление форматированного документа по результатм редактирования текста HTML.
// и переданного списка картинок
//
// Параметры 
// 	СписокКартинок - СписокЗначений - Список изовражений: Значение - адрес картинки во временном хранилище;
//														  Представление - ссылка на изображение как она используется в Тексте HTML.
//                          
&НаСервере
Процедура ОбновитьТекстПоляРедактированияИзРабочегоТекста(СписокКартинок)
	
	ТекстHTML = РабочийТекстHTML;
	СтруктураКартинок = Новый Структура();
	НомерКартинки = 0;
	Для Каждого ТекКартинка Из СписокКартинок Цикл
		НомерКартинки = НомерКартинки + 1;
		СтруктураКартинок.Вставить("image" + СокрЛП(НомерКартинки), Новый Картинка(ПолучитьИзВременногоХранилища(ТекКартинка.Значение)));
		ТекстHTML = СтрЗаменить(ТекстHTML, ТекКартинка.Представление, "image" + СокрЛП(НомерКартинки));
	КонецЦикла;
	
	ТекстСтатьиРедактирование.УстановитьHTML(ТекстHTML, СтруктураКартинок);
	
КонецПроцедуры // ОбновитьТекстПоляРедактированияИзРабочегоТекста()

// Возвращает таблицу устаноленных меток.
// 
// Параметры: 
// 	Строки   - КоллекцияСтрокДереваЗначений - Строки для заполнения. 							
// 	ТабМетки - ТаблицаЗначений - Таблица меток для заполнения.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица устаноленных меток.
//
&НаСервере
Функция УстановленныеМетки(Строки, ТабМетки = Неопределено)
	
	Если НЕ ТипЗнч(ТабМетки) = Тип("ТаблицаЗначений") Тогда
		ТабМетки = Новый ТаблицаЗначений();
		ТабМетки.Колонки.Добавить("Метка", Новый ОписаниеТипов("СправочникСсылка.бит_си_МеткиСтатей"));
	КонецЕсли;
	Для Каждого ТекСтрока Из Строки Цикл
		Если ТекСтрока.Метка.ЭтоГруппа Тогда
			УстановленныеМетки(ТекСтрока.ПолучитьЭлементы(), ТабМетки);
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ТабМетки.Найти(ТекСтрока.Метка, "Метка") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТабМетки.Добавить();
		НоваяСтрока.Метка = ТекСтрока.Метка;
	КонецЦикла;
	
	Возврат ТабМетки;
	
КонецФункции // УстановленныеМетки()

// Подключаемая процедура ОМ. бит_си_ОбщегоНазначения.
// Загружает справку на сервере.
// 
// Параметры: 
// 	Адрес      - Строка - Адрес во временном хранилище.
// 	Расширение - Строка - Расширение файла.
//
&НаСервереБезКонтекста
Процедура ЗагрузитьСправкуНаСервере(Адрес, Расширение)
	
	ПроверкаПройдена = Истина;
	Попытка
		ВремФайл = "";
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		Данные = ПолучитьИзВременногоХранилища(Адрес);
		Данные.Записать(ИмяВременногоФайла);
		Файл = Новый Файл(ИмяВременногоФайла);
		ПроверкаПройдена = Файл.Существует();
	Исключение
		ПроверкаПройдена = Ложь;
	КонецПопытки;
	Если Не ПроверкаПройдена Тогда 
		Возврат;
	КонецЕсли;
	бит_си_ИсточникСправочникСтатьи.ЗагрузитьСправочнуюИнформациюИзФайла(ИмяВременногоФайла);
	
КонецПроцедуры // ЗагрузитьСправкуНаСервере()

// Подключаемая процедура ОМ. бит_си_ОбщегоНазначения.
// Загружает макет справки. 
// 
// Параметры: 
// 	АдресФайла - Строка - Адрес во временном хранилище файла архива выгруженной справочной информации.
//
&НаСервереБезКонтекста
Процедура ЗагрузитьСправкуМакетНаСервере(АдресФайла)
	
	СтруктураМетаданных = Новый Структура;
	СтруктураМетаданных.Вставить("Конфигурация"				, Новый Структура("Коллекция, Представление",
																			  "Конфигурация", "Конфигурация"));
	СтруктураМетаданных.Вставить("Подсистема"				, Новый Структура("Коллекция, Представление",
																			  "Подсистемы", "Подсистемы"));
	СтруктураМетаданных.Вставить("ОбщаяФорма"				, Новый Структура("Коллекция, Представление",
																			  "ОбщиеФормы", "Общие формы"));
	СтруктураМетаданных.Вставить("Справочник"				, Новый Структура("Коллекция, Представление",
																			  "Справочники", "Справочники"));
	СтруктураМетаданных.Вставить("Документ"					, Новый Структура("Коллекция, Представление",
																			  "Документы", "Документы"));
	СтруктураМетаданных.Вставить("ЖурналДокументов"			, Новый Структура("Коллекция, Представление",
																			  "ЖурналыДокументов", "Журналы документов"));
	СтруктураМетаданных.Вставить("Обработка"				, Новый Структура("Коллекция, Представление",
																			  "Обработки", "Обработки"));
	СтруктураМетаданных.Вставить("Отчет"					, Новый Структура("Коллекция, Представление",
																			  "Отчеты", "Отчеты"));
	СтруктураМетаданных.Вставить("РегистрСведений"			, Новый Структура("Коллекция, Представление",
																			  "РегистрыСведений", "Регистры сведений"));
	СтруктураМетаданных.Вставить("РегистрБухгалтерии"		, Новый Структура("Коллекция, Представление",
																			  "РегистрыБухгалтерии", "Регистры бухгалтерии"));
	СтруктураМетаданных.Вставить("РегистрНакопления"		, Новый Структура("Коллекция, Представление",
																			  "РегистрыНакопления", "Регистры накопления"));
	СтруктураМетаданных.Вставить("РегистрРасчета"			, Новый Структура("Коллекция, Представление",
																			  "РегистрыРасчета", "Регистры расчета"));
	СтруктураМетаданных.Вставить("ПланВидовХарактеристик"	, Новый Структура("Коллекция, Представление",
																			  "ПланыВидовХарактеристик", "Планы видов характеристик"));
	СтруктураМетаданных.Вставить("ПланВидовРасчета"			, Новый Структура("Коллекция, Представление",
																			  "ПланыВидовРасчета", "Планы видов расчета"));
	СтруктураМетаданных.Вставить("ПланСчетов"				, Новый Структура("Коллекция, Представление",
																			  "ПланыСчетов", "Планы счетов"));
	СтруктураМетаданных.Вставить("ПланОбмена"				, Новый Структура("Коллекция, Представление",
																			  "ПланыОбмена", "Планы обмена"));
	ДеревоСтатей = Новый ДеревоЗначений();
	ДеревоСтатей.Колонки.Добавить("Иерархия"			, Новый ОписаниеТипов("Строка"));
	ДеревоСтатей.Колонки.Добавить("Имя"					, Новый ОписаниеТипов("Строка"));
	ДеревоСтатей.Колонки.Добавить("Представление"		, Новый ОписаниеТипов("Строка"));
	ДеревоСтатей.Колонки.Добавить("Файл"				, Новый ОписаниеТипов("Строка"));
	ДеревоСтатей.Колонки.Добавить("СтруктураИерархии"	, Новый ОписаниеТипов("Строка"));
	
	ВремИмя = ПолучитьИмяВременногоФайла();
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	СоздатьКаталог(ВремИмя);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанные.Записать(ИмяФайлаАрхива);
	
	Архив = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	Архив.ИзвлечьВсе(ВремИмя, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	
	МассивФайлов = НайтиФайлы(ВремИмя, "*.htm");
	Для Каждого Файл Из МассивФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРазбора     = Файл.ИмяБезРасширения + ".";
		СтруктураИерархии = "";
		Иерархия = "";
		КолВоТочек        = СтрЧислоВхождений(СтрокаРазбора, ".");
		Имя = "";
		Для Сч = 1 По КолВоТочек Цикл
			
			ЭтоОписаниеКонфигурации = (Сч = 2 И Имя = "Конфигурация");
			
			ПозТочки = Найти(СтрокаРазбора, ".");
			Имя = Лев(СтрокаРазбора, ПозТочки - 1);
			
			СтруктураИерархииСтар = СтруктураИерархии;
			СтруктураИерархии     = ?(СтруктураИерархии = "", Имя, СтруктураИерархии + "." + Имя);
			Если НЕ ((Сч = 3 ИЛИ (Сч = 2 И ЭтоОписаниеКонфигурации)) И (Имя = "Форма" ИЛИ Имя = "Справка")) Тогда
				Иерархия = ?(Иерархия = "", Имя, Иерархия + "." + Имя);
			КонецЕсли;
			РодительскаяСтрокаСтар  = ДеревоСтатей.Строки.Найти(СтруктураИерархииСтар, "СтруктураИерархии", Истина);
			РодительскаяСтрока      = ДеревоСтатей.Строки.Найти(СтруктураИерархии, "СтруктураИерархии", Истина);
			
			Если РодительскаяСтрокаСтар = Неопределено И РодительскаяСтрока = Неопределено Тогда
				СтрокаДерева = ДеревоСтатей.Строки.Добавить();
			ИначеЕсли НЕ РодительскаяСтрока = Неопределено Тогда 
				СтрокаРазбора = Прав(СтрокаРазбора, СтрДлина(СтрокаРазбора) - ПозТочки);
				Продолжить;
			Иначе 
				Если ((Сч = 2 И ЭтоОписаниеКонфигурации) ИЛИ Сч = 3 ИЛИ Сч = 5) И Имя = "Справка" Тогда
					РодительскаяСтрокаСтар.Файл = Файл.ПолноеИмя;
					Прервать;
				КонецЕсли;
				СтрокаДерева = РодительскаяСтрокаСтар.Строки.Добавить();
			КонецЕсли; 
			
			СтрокаДерева.Имя				= Имя;
			Если Сч = 1 Тогда
				СтрокаДерева.Имя			= СтруктураМетаданных[Имя].Коллекция;
				СтрокаДерева.Представление	= СтруктураМетаданных[Имя].Представление;
			ИначеЕсли Сч = 2 Тогда
				СтрокаДерева.Представление	= Метаданные[СтрокаДерева.Родитель.Имя][Имя].Представление();
			ИначеЕсли Сч = 4 И СтрокаДерева.Родитель.Имя = "Форма" Тогда
				ВремМетаОбъект = Метаданные[СтрокаДерева.Родитель.Родитель.Родитель.Имя];
				СтрокаДерева.Представление	= ВремМетаОбъект[СтрокаДерева.Родитель.Родитель.Имя].Представление() + ": " +
											  ВремМетаОбъект[СтрокаДерева.Родитель.Родитель.Имя].Формы[Имя].Представление();
			КонецЕсли;
			СтрокаДерева.Иерархия			= Иерархия;
			СтрокаДерева.СтруктураИерархии	= СтруктураИерархии;
			
			Если Сч = КолВоТочек - 1 Тогда
				СтрокаДерева.Файл = Файл.ПолноеИмя;
			КонецЕсли; 
			
			СтрокаРазбора = Прав(СтрокаРазбора, СтрДлина(СтрокаРазбора) - ПозТочки);
			
		КонецЦикла; 
	КонецЦикла; 
	
	ГруппаСС = Справочники.бит_си_Статьи.НайтиПоНаименованию("Справка 1С",Истина);
	Если НЕ ГруппаСС.ЭтоГруппа ИЛИ ГруппаСС.Пустая() Тогда
		ГруппаСС = Справочники.бит_си_Статьи.СоздатьГруппу();
		ГруппаСС.Наименование = "Справка 1С";
		ГруппаСС.ОписаниеРаздела = "Статьи встроенной справки конфигурации """ + СокрЛП(Метаданные.Синоним) + """";
		ГруппаСС.Записать();
		ГруппаСС = ГруппаСС.Ссылка;
	КонецЕсли;
	
	СоздатьСтатьиСправки(ДеревоСтатей, ГруппаСС);
	
	Для Каждого Файл Из МассивФайлов Цикл 
		Попытка
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСправкуМакетНаСервере()

// Создает статьи справки из данных строк дерева значений.
// 
// Параметры 
// 	СтрокаДерева -	СтрокаДереваЗначений   	 Строка дерева, содержащая информацию для создания статьи справки.
// 		                Поля: 
// 			                Представление -	Строка - Наименование статьи справки.
// 			                Иерархия	  -	Строка - Наименование объекта метаданных для привязки статьи справки.
// 			                Файл		  -	Строка - Имя файла на диске, содержащего текст справки.
// 	Группа       -	СправочникСсылка.бит_си_Статьи - Группа справочника статей.                                        	                   	  	                	                                                                  
//
&НаСервереБезКонтекста
Процедура СоздатьСтатьиСправки(СтрокаДерева, Группа)
	
	Для Каждого Объект Из СтрокаДерева.Строки Цикл
		Если НЕ Объект.Файл = "" Тогда
    		Статья = Справочники.бит_си_Статьи.НайтиПоНаименованию(Объект.Представление, Истина, Группа);
			Если Статья.ЭтоГруппа ИЛИ Статья.Пустая() Тогда
				Статья = Справочники.бит_си_Статьи.СоздатьЭлемент();
				Статья.Родитель = Группа;
				Статья.Наименование = Объект.Представление;
			Иначе
				Статья = Статья.ПолучитьОбъект();
			КонецЕсли;
			Статья.НазваниеСтатьи = Объект.Представление;
			Статья.МестаИспользования.Очистить();
			Место = Статья.МестаИспользования.Добавить();
			Место.ИмяМетки = Объект.Иерархия;
			Статья.Записать();
			ВремФайл = Новый Файл(Объект.Файл);
			ТекКаталог = ВремФайл.Путь;
			ВремФайл = Новый ТекстовыйДокумент();
			ВремФайл.Прочитать(Объект.Файл);
			Если Статья.СохранитьИзображенияВБД(ВремФайл.ПолучитьТекст(), ТекКаталог) Тогда
				Статья.Записать();
			КонецЕсли;
		Иначе
			ГруппаК = Справочники.бит_си_Статьи.НайтиПоНаименованию(Объект.Представление, Истина, Группа);
			Если НЕ ГруппаК.ЭтоГруппа ИЛИ ГруппаК.Пустая() Тогда
				ГруппаК = Справочники.бит_си_Статьи.СоздатьГруппу();
				ГруппаК.Родитель		= Группа;
				ГруппаК.Наименование	= Объект.Представление;
				ГруппаК.ОписаниеРаздела	= "";
				ГруппаК.Записать();
				ГруппаК = ГруппаК.Ссылка;
			КонецЕсли;
			СоздатьСтатьиСправки(Объект, ГруппаК);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СоздатьСтатьиСправки()

#КонецОбласти

#КонецОбласти