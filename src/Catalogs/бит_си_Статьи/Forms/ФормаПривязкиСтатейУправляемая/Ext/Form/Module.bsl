
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ЗаполнитьДеревоОбъектов();
    
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоОбъектовПриАктивизацииСтроки(Элемент)
    
    Если ПоследнийКод = Элементы.ДеревоОбъектов.ТекущиеДанные.КодОбъекта Тогда 
		Возврат;
	КонецЕсли;
    
    ПоследнийКод = Элементы.ДеревоОбъектов.ТекущиеДанные.КодОбъекта;
	ЗаполнитьПривязки(Элементы.ДеревоОбъектов.ТекущиеДанные.КодОбъекта);
	Элементы.ПривязкаСтатей.Обновить();
	ПрибавляемоеЧисло = 0;
	НачальныйИндекс = Элементы.ПривязкаСтатей.ТекущаяСтрока;
    
    Для Каждого СтрокаДерева Из ПривязкаСтатей.ПолучитьЭлементы() Цикл 
		Индекс = ПривязкаСтатей.ПолучитьЭлементы().Индекс(СтрокаДерева) + ПрибавляемоеЧисло + НачальныйИндекс;
		Попытка
			Элементы.ПривязкаСтатей.Развернуть(Индекс,Истина);
		Исключение
		КонецПопытки;
		ПрибавляемоеЧисло = ПрибавляемоеЧисло + ПолучитьПрибавляемоеЧисло(СтрокаДерева,Истина);
    КонецЦикла;
    
КонецПроцедуры // ДеревоОбъектовПриАктивизацииСтроки()

&НаКлиенте
Процедура ПривязкаСтатейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
    
    Если Элементы.ПривязкаСтатей.ТекущиеДанные = Неопределено Тогда 
		Возврат;
    КонецЕсли;
    
	Если Элементы.ПривязкаСтатей.ТекущиеДанные.Ссылка.Пустая() Тогда
		Возврат;
    КонецЕсли;
    
	ЗаписатьДанныеПоСтатье(Элементы.ПривязкаСтатей.ТекущиеДанные.Ссылка,
						   Элементы.ДеревоОбъектов.ТекущиеДанные.КодОбъекта,
						   ОбновитьСтатусы,
						   Элементы.ПривязкаСтатей.ТекущиеДанные.Выводить);
                           
    МассивИмен = Новый Массив;
	МассивИмен.Добавить(Элементы.ДеревоОбъектов.ТекущиеДанные.КодОбъекта);	
	ОбновитьКоличествоМеток(МассивИмен);
    
КонецПроцедуры // ПривязкаСтатейПередОкончаниемРедактирования()

&НаКлиенте
Процедура ПривязкаСтатейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
    
    Если Элементы.ПривязкаСтатей.ТекущиеДанные.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
    
    Форма = ПолучитьФорму("Справочник.бит_си_Статьи.ФормаОбъекта",
						  ,
						  ЭтаФорма);
	Форма.Открыть();
    
КонецПроцедуры // ПривязкаСтатейВыбор()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет объекты метаданных из указанной коллекции в дерево объектов.
// 
// Параметры: 
// 	ИмяКоллекции - Строка               - Имя коллекции объектов метаданных.                                
// 	СтрокаДерева - СтрокаДереваЗначений - Строка дерева в которую добавляются объекты.                      
//
&НаСервере
Процедура ДобавитьПоВидуОбъекта(ИмяКоллекции, СтрокаДерева, МассивИмен = Неопределено)
    
    Для Каждого Мета Из Метаданные[ИмяКоллекции] Цикл
		
		СтрокаОбъекта = СтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаОбъекта.Объект = Мета.Синоним;
		СтрокаОбъекта.КодОбъекта = Мета.ПолноеИмя();
        
        Если МассивИмен <> Неопределено Тогда 
			МассивИмен.Добавить(СтрокаОбъекта.КодОбъекта);
		КонецЕсли;
        
        Формы = "";
        
        Попытка
			Формы = Мета.Формы;
		Исключение
		КонецПопытки;
        
        Если Формы <> "" Тогда
            
            Для Каждого Форма Из Формы Цикл
				СтрокаФормы = СтрокаОбъекта.ПолучитьЭлементы().Добавить();
				СтрокаФормы.Объект = Форма.Имя;
				СтрокаФормы.КодОбъекта = Мета.ПолноеИмя()+"."+Форма.Имя;
				Если МассивИмен <> Неопределено Тогда 
					МассивИмен.Добавить(СтрокаФормы.КодОбъекта);
				КонецЕсли;
            КонецЦикла;
            
		КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры // ДобавитьПоВидуОбъекта()

// Заполняет дерево объектов метаданных по данным конфигурации.
// 
&НаСервере
Процедура ЗаполнитьДеревоОбъектов()
    
    ВремСписок = Новый СписокЗначений();
    
    МассивИмен = Новый Массив;
    
    ВремСписок.Добавить("Справочники"            , "Справочники"              , , БиблиотекаКартинок.Справочник);
	ВремСписок.Добавить("Документы"              , "Документы"                , , БиблиотекаКартинок.Документ);
	ВремСписок.Добавить("ЖурналыДокументов"      , "Журналы документов"       , , БиблиотекаКартинок.ЖурналДокументов);
	ВремСписок.Добавить("ПланыВидовХарактеристик", "Планы видов характеристик", , БиблиотекаКартинок.ПланВидовХарактеристик);
	ВремСписок.Добавить("ПланыСчетов"            , "Планы счетов"             , , БиблиотекаКартинок.ПланСчетов);
	ВремСписок.Добавить("ПланыВидовРасчета"      , "Планы видов расчета"      , , БиблиотекаКартинок.ПланВидовРасчета);
	ВремСписок.Добавить("Перечисления"           , "Перечисления"             , , БиблиотекаКартинок.Перечисление);
	ВремСписок.Добавить("РегистрыСведений"       , "Регистры сведений"        , , БиблиотекаКартинок.РегистрСведений);
	ВремСписок.Добавить("РегистрыНакопления"     , "Регистры накопления"      , , БиблиотекаКартинок.РегистрНакопления);
	ВремСписок.Добавить("РегистрыБухгалтерии"    , "Регистры бухгалтерии"     , , БиблиотекаКартинок.РегистрБухгалтерии);
	ВремСписок.Добавить("РегистрыРасчета"        , "Регистры расчета"         , , БиблиотекаКартинок.РегистрРасчета);
	ВремСписок.Добавить("Отчеты"                 , "Отчеты"                   , , БиблиотекаКартинок.Отчет);
	ВремСписок.Добавить("Обработки"              , "Обработки"                , , БиблиотекаКартинок.Обработка);
	ВремСписок.Добавить("БизнесПроцессы"         , "Бизнес-процессы"          , , БиблиотекаКартинок.БизнесПроцесс);
	ВремСписок.Добавить("Задачи"                 , "Задачи"                   , , БиблиотекаКартинок.Задача);
	ВремСписок.Добавить("ПланыОбмена"            , "ПланыОбмена"              , , БиблиотекаКартинок.ПланОбмена);
	ВремСписок.Добавить("ОбщиеФормы"             , "ОбщиеФормы"               , , БиблиотекаКартинок.РедактироватьВДиалоге);
    
    СписокВыбора = Новый СписокЗначений();
    
    Для Каждого ВремЭлемент Из ВремСписок Цикл
		СтрокаВидаОбъекта = ДеревоОбъектов.ПолучитьЭлементы().Добавить();
		МассивИмен.Добавить(ВремЭлемент.Значение);
		СтрокаВидаОбъекта.Объект = ВремЭлемент.Значение;
		СтрокаВидаОбъекта.КодОбъекта = ВремЭлемент.Значение;
		ДобавитьПоВидуОбъекта(ВремЭлемент.Значение,СтрокаВидаОбъекта,МассивИмен);
    КонецЦикла;
    
	ОбновитьСтатусы = Истина;
	ОбновитьКоличествоМеток(МассивИмен);
    
КонецПроцедуры // ЗаполнитьДеревоОбъектов()

// Обновляет количество меток по массиву имен статей.
// 
&НаСервере
Процедура ОбновитьКоличествоМеток(МассивИмен)
    
    Если Не ОбновитьСтатусы Тогда 
		Возврат;
	КонецЕсли;
    
    Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СтатьиМестаИспользования.ИмяМетки КАК ИмяМетки,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатьиМестаИспользования.Ссылка) КАК Количество
	                      |ИЗ
	                      |	Справочник.бит_си_Статьи.МестаИспользования КАК СтатьиМестаИспользования
	                      |ГДЕ
	                      |	СтатьиМестаИспользования.ИмяМетки В(&МассивИмен)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	СтатьиМестаИспользования.ИмяМетки");
    Запрос.УстановитьПараметр("МассивИмен",МассивИмен);    
    ТабПривязок = Запрос.Выполнить().Выгрузить();
    
    ОбновитьСтатусы = Ложь;
    
    КолонкиСравнения = Новый Массив;
	КолонкиСравнения.Добавить("КодОбъекта");
    
    Значения = Новый Массив;    
    Для Каждого Привязка Из ТабПривязок Цикл
		Значения.Очистить();
		Значения.Добавить(Привязка.ИмяМетки);
		СтрокаПривязки = НайтиСтрокуВДереве(ДеревоОбъектов.ПолучитьЭлементы(),
						   КолонкиСравнения,
						   Значения,
						   Истина);
		Если СтрокаПривязки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПривязки.Количество = Привязка.Количество;
		ЗаполинтьКоличествоУРодителя(СтрокаПривязки,Привязка.Количество);
    КонецЦикла;
    
КонецПроцедуры // ОбновитьКоличествоМеток()

// Заполняет поле "КоличествоУПодчиненных" когда у подчиненного имеются собственные статьи (для оформления).
// 
// Параметры: 
// 	Строка     - СтрокаДереваЗначений - Подчиненная строка                                 
// 	Количество - Число - Количество строк. 
//
&НаСервереБезКонтекста
Процедура ЗаполинтьКоличествоУРодителя(Строка, Количество)
    
    Если Строка.ПолучитьРодителя() = Неопределено Тогда 
		Возврат;
	КонецЕсли;
    
    Строка.ПолучитьРодителя().КоличествоУПодчиненных = Строка.ПолучитьРодителя().КоличествоУПодчиненных + Количество;
    
    ЗаполинтьКоличествоУРодителя(Строка.ПолучитьРодителя(), Количество);
    
КонецПроцедуры // ЗаполинтьКоличествоУРодителя()

// Выполняет поиск строки в дереве значений.
// 
// Параметры 
// 	Строки             - КоллекцияСтрокДереваЗначений - Строки для поиска. 							
// 	КолонкиСравнения   - Массив - Коллекция имен строк для сравнения.
// 	Значения - Массив  - Массив значений для сравнения.
// 	ИскатьВПодчиненных - Булево - Выполняеть поиск среди подчиненных элементов.
//
// Возвращаемое значение:
// 	СтрокаДерева или Неопределено -	Найденная строка дерева.
//
&НаСервереБезКонтекста
Функция НайтиСтрокуВДереве(Строки, КолонкиСравнения, Значения, ИскатьВПодчиненных = Ложь)
    
    СтрокаДерева = Неопределено;
    
    Для Каждого Строка Из Строки Цикл 
        
        Индекс = 0;
		ПроверкаПройдена = Истина;
        
        Для Каждого КолонкаСравнения Из КолонкиСравнения Цикл 
			ПроверкаПройдена = ?(ПроверкаПройдена,Строка[КолонкаСравнения] = Значения[Индекс],ПроверкаПройдена);
			Индекс = Индекс + 1;
		КонецЦикла;
        
        Если ИскатьВПодчиненных И Не ПроверкаПройдена И Строка.ПолучитьЭлементы().Количество() > 0 Тогда 
			СтрокаДерева = НайтиСтрокуВДереве(Строка.ПолучитьЭлементы(),
						   КолонкиСравнения,
						   Значения,
						   ИскатьВПодчиненных);
		КонецЕсли;
        
        Если ПроверкаПройдена Тогда 
			СтрокаДерева = Строка;
			Прервать;
		ИначеЕсли СтрокаДерева <> Неопределено Тогда  
			Прервать;
		КонецЕсли;
        
    КонецЦикла;
    
    Возврат СтрокаДерева;
    
КонецФункции // НайтиСтрокуВДереве()

// Получает информацию о привязках для указанной метки (объекта метаданных).
// 
// Параметры: 
// 	Метка -	Строка - Метка для привязки статей справки.                                
//
&НаСервере
Процедура ЗаполнитьПривязки(Метка)
    
    Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Статьи.Родитель КАК Раздел,
	                      |	Статьи.Ссылка КАК Ссылка,
	                      |	Статьи.НазваниеСтатьи КАК Статья,
	                      |	ВЫБОР
	                      |		КОГДА Привязки.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА 0
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК Выводить
	                      |ИЗ
	                      |	Справочник.бит_си_Статьи КАК Статьи
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			СтатьиМестаИспользования.Ссылка КАК Ссылка
	                      |		ИЗ
	                      |			Справочник.бит_си_Статьи.МестаИспользования КАК СтатьиМестаИспользования
	                      |		ГДЕ
	                      |			СтатьиМестаИспользования.ИмяМетки = &Метка) КАК Привязки
	                      |		ПО Статьи.Ссылка = Привязки.Ссылка
	                      |ГДЕ
	                      |	(НЕ Статьи.ЭтоГруппа)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Статьи.НазваниеСтатьи
	                      |ИТОГИ ПО
	                      |	Раздел ИЕРАРХИЯ");
    
    Запрос.УстановитьПараметр("Метка", Метка);					  
    
    ПривязкаСтатей.ПолучитьЭлементы().Очистить();
	ЗаполнитьТаблицуПривязок(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки,);
    
КонецПроцедуры // ЗаполнитьПривязки()

// Заполняет информацию о привязках для каждой строки дерева из переданной коллекции строк.
// 
// Параметры: 
// 	Строки - КоллекцияСтрокДереваЗначений - Строки для заполнения.	                   	  	                  	                                                                  
//
&НаСервере
Процедура ЗаполнитьТаблицуПривязок(Строки, Родитель=Неопределено)
    
    Родитель = ?(Родитель=Неопределено,ПривязкаСтатей,Родитель);
    
    Для Каждого Строка Из Строки Цикл 
		НоваяСтрока = Родитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		Если НоваяСтрока.Ссылка.Пустая() Тогда
			НоваяСтрока.Статья = СокрЛП(Строка.Раздел.Наименование);
			НоваяСтрока.Выводить = 0;
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуПривязок(Строка.Строки, НоваяСтрока);
		КонецЕсли;
		НоваяСтрока.ЭтоГруппа = ?(НоваяСтрока.Ссылка.Пустая(),Строка.Раздел.ЭтоГруппа,Строка.Ссылка.ЭтоГруппа);
    КонецЦикла;
    
КонецПроцедуры // ЗаполнитьТаблицуПривязок()

// Получает прибавляемое число статей справки.
// 
// Параметры: 
// 	СтрокаДерева - СтрокаДереваЗначений - Подчиненная строка.                                
// 	Прибавлять   - Булево               - Проверка на необходимость прибавлять значение.
//
// Возвращаемое значение:
// 	Число - Результат.
//
&НаКлиенте
Функция ПолучитьПрибавляемоеЧисло(СтрокаДерева,Прибавлять = Истина)
    
    Число = 0;
    
    Если Прибавлять Тогда 
		Число = Число + СтрокаДерева.ПолучитьЭлементы().Количество();
	КонецЕсли;
    
    Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл 
		Число = Число + Строка.ПолучитьЭлементы().Количество();
		Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		Число = Число + ПолучитьПрибавляемоеЧисло(Строка,Ложь);
    КонецЦикла;
    
	Возврат Число;
    
КонецФункции // ПолучитьПрибавляемоеЧисло()

// Записывает данные по статье.
// 
// Параметры: 
// 	Ссылка          - СправочникСсылка.бит_си_Статьи - Статья. 							
// 	КодОбъекта      - Строка - Код записываемой статьи.
// 	ОбновитьСтатусы - Булево - Проверка на необходимость обновления статусов.
// 	Выводить	    - Булево - Проверка на выводить статусы.
//
&НаСервереБезКонтекста
Процедура ЗаписатьДанныеПоСтатье(Ссылка,КодОбъекта,ОбновитьСтатусы,Выводить)
    
    Статья = Ссылка.ПолучитьОбъект();
	Если Выводить = 1 Тогда
		НоваяСтрока = Статья.МестаИспользования.Добавить();
		НоваяСтрока.ИмяМетки = СокрЛП(КодОбъекта);
	Иначе
		СтрокаУдалить = Статья.МестаИспользования.Найти(КодОбъекта,"ИмяМетки");
		Если НЕ СтрокаУдалить = Неопределено Тогда
			Статья.МестаИспользования.Удалить(СтрокаУдалить);
		КонецЕсли;
	КонецЕсли;
	Статья.Записать();
	ОбновитьСтатусы = Истина;
    
КонецПроцедуры // ЗаписатьДанныеПоСтатье()

#КонецОбласти
