#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем РабочийТекстHTML Экспорт; // Хранит текущий редактируемый текст статьи справочной информации.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;
	КонецЕсли; 	
	
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства);
	
	Если НЕ ЭтоГруппа И НЕ РабочийТекстHTML = Неопределено Тогда
		Отказ = НЕ СохранитьИзображенияВБД(РабочийТекстHTML);
	КонецЕсли;
	
	Если НЕ Отказ И НЕ ЭтоГруппа Тогда  	
		ТекстHTML = СтрЗаменить(ТекстHTML,"<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />",""); 	
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выгружает сохраненные изображения во временный каталог, заменяет ссылки
// в HTML-статье справки ссылками на выгруженные файлы, возвращает итоговый текст HTML-статьи.
// 
// Параметры: 
// 	Каталог        -	Строка, Уникальный		В обычном приложении путь к каталогу сохранения.
// 							Идентификатор           файлов изображений, в управляемом - уникальный.
// 													идентификатор формы для создания временного хранилища.
//  СписокКартинок - СписокЗначений.
// 							
// Возвращаемое значение:
// 	Строка - Текст HTML-статьи после замены.                                   
// 
Функция ЗагрузитьИзображенияИзБД(Каталог = "", СписокКартинок = Неопределено) Экспорт 
								 
	сзФайлы = Изображения.Получить(); // СписокЗначений: Значение - ДвоичныеДанные изображения,
									  // 				 Представление - Ид изображения в тексте HTML
	СписокКартинок = Новый СписокЗначений();
	
	ВремТекстHTML = ТекстHTML;
	
	Если сзФайлы <> Неопределено Тогда
		
		Для Каждого ТекФайл Из сзФайлы Цикл


			#Если ТолстыйКлиентОбычноеПриложение Тогда
			ПолныйПутьКИзображению = ПолучитьИмяВременногоФайла("bit_h_img");
			Если НЕ Каталог = "" Тогда
				СоздатьКаталог(Каталог);
				ВремКаталог = "";
				ВремФайл = "";
				бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьКаталогИИмяФайла(ПолныйПутьКИзображению, ВремКаталог, ВремФайл);
				ПолныйПутьКИзображению = бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьИмяФайла(Каталог, ВремФайл);
			КонецЕсли;
			ТекФайл.Значение.Записать(ПолныйПутьКИзображению);
			#Иначе
			Если ТипЗнч(Каталог) = Тип("УникальныйИдентификатор") Тогда
				АдресРисунка = ПоместитьВоВременноеХранилище(ТекФайл.Значение, Каталог);
				ПолныйПутьКИзображению = ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/" + АдресРисунка;
			ИначеЕсли ТипЗнч(Каталог) = Тип("Строка") Тогда
				ПолныйПутьКИзображению = ПолучитьИмяВременногоФайла("bit_h_img");
				Если НЕ Каталог = "" Тогда
					СоздатьКаталог(Каталог);
					ВремКаталог = "";
					ВремФайл = "";
					бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьКаталогИИмяФайла(ПолныйПутьКИзображению, ВремКаталог, ВремФайл);
					ПолныйПутьКИзображению = бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьИмяФайла(Каталог, ВремФайл);
				КонецЕсли;
				ТекФайл.Значение.Записать(ПолныйПутьКИзображению);
			Иначе
				АдресРисунка = ПоместитьВоВременноеХранилище(ТекФайл.Значение);
				ПолныйПутьКИзображению = ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/" + АдресРисунка;
			КонецЕсли;
			#КонецЕсли
			ВремТекстHTML = СтрЗаменить(ВремТекстHTML, ТекФайл.Представление, ПолныйПутьКИзображению);
			СписокКартинок.Добавить(ТекФайл.Значение, ПолныйПутьКИзображению);
        КонецЦикла;
        
	КонецЕсли;
	
	Возврат ВремТекстHTML;
    
КонецФункции // ЗагрузитьИзображенияИзБД()

// Сохраняет изображения из временных файлов в текущий элемент справочника статьи, выполняет замену
// ссылок на изображения и записывает полученный текст также в текущий элемент.
// 
// Параметры 
// 	РабочийТекстHTML - Строка - Текст HTML-статьи справки.
//  ТекКаталог       - Строка.
//
// Возвращаемое значение:
// 	Булево - Истина - сохранение прошло успешно; Ложь в противном случае.      
//
Функция СохранитьИзображенияВБД(РабочийТекстHTML, ТекКаталог = "") Экспорт
	
	Если РабочийТекстHTML = Неопределено Тогда
		РабочийТекстHTML = ЭтотОбъект.ТекстHTML;
	КонецЕсли;
	
	Попытка
		сзСсылки	= ПолучитьСсылкиНаИзображения(РабочийТекстHTML);
		сзФайлы		= ПолучитьФайлыПоСсылкам(сзСсылки, ТекКаталог);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	// Изменение реквизитов.
	ЭтотОбъект.Изображения = Новый ХранилищеЗначения(сзФайлы, Новый СжатиеДанных);
	ВремТекстHTML = РабочийТекстHTML;
	
	Для Каждого ТекСсылка Из сзСсылки Цикл
		ВремТекстHTML = СтрЗаменить(ВремТекстHTML,ТекСсылка.Значение, ТекСсылка.Представление);
	КонецЦикла;
	
	ЭтотОбъект.ТекстHTML = ВремТекстHTML;
	
	Возврат Истина;
	
КонецФункции // СохранитьИзображенияВБД()

// Получает таблицу всех используемых меток статей
// 
// Параметры: 
// 	ВыгрузитьКартинки -	Булево - Истина - картинки сохраняются в файлы; Ложь - в противном случае.
// 	Каталог			  -	Строка - Каталог для сохранения картинок, если не указан,
//								  то используется каталог временных файлов.
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица используемых меток.
//
Функция ПолучитьМеткиСтатьи(ВыгрузитьКартинки = Ложь, Каталог = "") Экспорт
    
    Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	УстановленныеМеткиСтатей.Метка КАК Ссылка,
	               |	УстановленныеМеткиСтатей.Метка.Наименование КАК Наименование,
	               |	УстановленныеМеткиСтатей.Метка.Описание КАК Описание
	               |ИЗ
	               |	РегистрСведений.бит_си_УстановленныеМеткиСтатей КАК УстановленныеМеткиСтатей
	               |ГДЕ
	               |	УстановленныеМеткиСтатей.Метка ССЫЛКА Справочник.бит_си_МеткиСтатей
	               |	И УстановленныеМеткиСтатей.Статья = &Статья";
	Запрос.УстановитьПараметр("Статья", ЭтотОбъект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();

	Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов(?(ВыгрузитьКартинки, "Строка", "Картинка")));
	Если ВыгрузитьКартинки Тогда
		КартинкаПоУмолчанию = ПолучитьИмяВременногоФайла("bit_h_img");
		Если НЕ Каталог = "" Тогда
			СоздатьКаталог(Каталог);
			ВремКаталог = "";
			ВремФайл = "";
			бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьКаталогИИмяФайла(КартинкаПоУмолчанию, ВремКаталог, ВремФайл);
			КартинкаПоУмолчанию = бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьИмяФайла(Каталог, ВремФайл);
		КонецЕсли;
		БиблиотекаКартинок.бит_си_МеткаСтатьи.Записать(КартинкаПоУмолчанию);
	Иначе
		КартинкаПоУмолчанию = БиблиотекаКартинок.бит_си_МеткаСтатьи;
	КонецЕсли;
    
    Для Каждого ТекМетка Из Результат Цикл
		ВремКартинка = ТекМетка.Ссылка.Пиктограмма.Получить();
		Если НЕ ТипЗнч(ВремКартинка) = Тип("Картинка") ИЛИ ВремКартинка.Вид = ВидКартинки.Пустая Тогда
			ТекМетка.Картинка = КартинкаПоУмолчанию;
		ИначеЕсли ВыгрузитьКартинки Тогда
			ТекМетка.Картинка = ПолучитьИмяВременногоФайла("bit_h_img");
			Если НЕ Каталог = "" Тогда
				СоздатьКаталог(Каталог);
				ВремКаталог = "";
				ВремФайл = "";
				бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьКаталогИИмяФайла(ТекМетка.Картинка, ВремКаталог, ВремФайл);
				ТекМетка.Картинка = бит_си_ИсточникСправочникСтатьи.бит_си_ПолучитьИмяФайла(Каталог, ВремФайл);
			КонецЕсли;
			ВремКартинка.Записать(ТекМетка.Картинка);
		Иначе
			ТекМетка.Картинка = ВремКартинка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
    
КонецФункции // ПолучитьМеткиСтатьи()

#Если Клиент Тогда
    
// Вставляет ссылку указанного вида в текущую позицию курсора в переданном поле текстового документа.
// 
// Параметры 
// 	ВидСсылки          	    -	Строка - Вид вставляемой ссылки: СтатьяСправки - ссылка на конкретную     
// 	                   	  	                       	 статью справки; ФормаСписка - Ссылка, открывающая форму списка   
// 	                   	  	                       	 указанного объекта; Объект - ссылка на конкретный объект данных, 
// 	                   	  	                       	 отчет или обработку.                                              
// 	Владелец           	    -	Форма - Форма владелец диалога выбора объекта.                            
// 	ПолеТекстовогоДокумента -	ПолеТекстовогоДокумента - Поле в котором в текущей позиции курсора будет размещена ссылка.  
// 	               	  	                       	                                                                  
//
Процедура ВставитьСсылкуВТекст(ВидСсылки, Владелец, ПолеТекстовогоДокумента) Экспорт
    
    Если ВидСсылки = "СтатьяСправки" Тогда
        
        ФормаСтатьи = Справочники.бит_си_Статьи.ПолучитьФормуВыбора(,Владелец);
		РезСтруктура = ФормаСтатьи.ОткрытьМодально(30);
		Если РезСтруктура <> Неопределено Тогда
			ТекстДляВставки = "<a href=""ВнСсылка=" +
							  СокрЛП(РезСтруктура.УникальныйИдентификатор()) +
							  """> " +
							  РезСтруктура.НазваниеСтатьи +
							  " </a>";
			бит_си_ИсточникСправочникСтатьи.ВставитьТекстПоКурсору(ПолеТекстовогоДокумента,ТекстДляВставки);
			Владелец.Модифицированность = Истина;
        КонецЕсли;
        
	ИначеЕсли ВидСсылки = "ФормаСписка" Тогда
        
        ИменаКоллекций = Новый Массив;
		ИменаКоллекций.Добавить("Справочники");
		ИменаКоллекций.Добавить("Документы");
		ИменаКоллекций.Добавить("РегистрыСведений");
		ФормаДерева = ЭтотОбъект.ПолучитьФорму("ДеревоМетаданныхУправляемая",Владелец);
		ФормаДерева.мИменаКоллекций = ИменаКоллекций;
		РезСтруктура = ФормаДерева.ОткрытьМодально(30);
		Если РезСтруктура <> Неопределено Тогда
			ТекстДляВставки = "<a href=""ОбъектКонфигурации=" +
							  РезСтруктура.ВидОбъекта +
							  "@" + РезСтруктура.ИмяОбъекта +
							  "@ФормаСписка" + """> " +
							  РезСтруктура.Синоним + " </a>";
			бит_си_ИсточникСправочникСтатьи.ВставитьТекстПоКурсору(ПолеТекстовогоДокумента,ТекстДляВставки);
			Владелец.Модифицированность = Истина;
        КонецЕсли; 
        
	ИначеЕсли ВидСсылки = "Объект" Тогда
        
        ИменаКоллекций = Новый Массив;
		ИменаКоллекций.Добавить("Справочники");
		ИменаКоллекций.Добавить("Документы");
		ИменаКоллекций.Добавить("Отчеты");
		ИменаКоллекций.Добавить("Обработки");
		ФормаДерева = ЭтотОбъект.ПолучитьФорму("ДеревоМетаданныхУправляемая",Владелец);
		ФормаДерева.мИменаКоллекций = ИменаКоллекций;
		РезСтруктура = ФормаДерева.ОткрытьМодально(30);
		Если РезСтруктура <> Неопределено Тогда
			Если НЕ Найти("Справочники, Документы", РезСтруктура.ВидОбъекта) = 0 Тогда
				Менеджер = бит_си_ИсточникСправочникСтатьи.ПолучитьМенеджер(РезСтруктура.ВидОбъекта);
				ФормаВыбора = Менеджер[РезСтруктура.ИмяОбъекта].ПолучитьФормуВыбора(,Владелец);
				ЗначениеВыбора = ФормаВыбора.ОткрытьМодально(30);
				Если ЗначениеВыбора <> Неопределено Тогда
					ТекстДляВставки = "<a href=""ОбъектКонфигурации=" +
									  РезСтруктура.ВидОбъекта +
									  "@" + РезСтруктура.ИмяОбъекта +
									  "@" + СокрЛП(ЗначениеВыбора.УникальныйИдентификатор()) +
									  """> " + ЗначениеВыбора + " </a>";
					бит_си_ИсточникСправочникСтатьи.ВставитьТекстПоКурсору(ПолеТекстовогоДокумента,ТекстДляВставки);
					Владелец.Модифицированность = Истина;
				КонецЕсли; 
			Иначе	
				ТекстДляВставки = "<a href=""ОбъектКонфигурации=" +
								  РезСтруктура.ВидОбъекта +
								  "@" + РезСтруктура.ИмяОбъекта +
								  "@Форма" + """> " +
								  РезСтруктура.Синоним + " </a>";
				бит_си_ИсточникСправочникСтатьи.ВставитьТекстПоКурсору(ПолеТекстовогоДокумента,ТекстДляВставки);
				Владелец.Модифицированность = Истина;
			КонецЕсли; 
            
        КонецЕсли; 
        
    КонецЕсли;

КонецПроцедуры // ВставитьСсылкуВТекст()

#КонецЕсли

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Анализирует текст HTML-статьи справки и возвращает список ссылок на изображения.
// 
// Параметры 
// 	пТекстHTML - Текст HTML-статьи справки.
//
// Возвращаемое значение:
// 	СписокЗначений - Список изображений: Значение - путь к файлу изображения;          
// 	                 Представление - Идентификатор изображения для сохранения в ИБ.    
// 
Функция ПолучитьСсылкиНаИзображения(Знач пТекстHTML)
    
    сзСсылки = Новый СписокЗначений;
	src_Открыт = Ложь;
	ВсегоСтрок = СтрЧислоСтрок(пТекстHTML);
	
	Для СчСтрок = 1 По ВсегоСтрок Цикл
		ТекСтрока = СтрПолучитьСтроку(пТекстHTML, СчСтрок);
		ВсегоСимволов = СтрДлина(ТекСтрока);
		
		IMG_Начало = Найти(ВРег(ТекСтрока),"<IMG");
		
		Если IMG_Начало <> 0 Тогда
			IMG_Начало = IMG_Начало + 4;
			IMG_Путь = "";
			
			Для СчСимвол = IMG_Начало По ВсегоСимволов Цикл
				ТекСимвол = Сред(ТекСтрока,СчСимвол,1);
				
				Если ТекСимвол = Символ(34) И src_Открыт Тогда
					ИмяДляЗамены = СокрЛП(Новый УникальныйИдентификатор);
					ИмяДляЗамены = "img_hlp1c_" + ИмяДляЗамены;
					
					СчСимвол = СчСимвол - (СтрДлина(IMG_Путь) - СтрДлина(ИмяДляЗамены));
					ТекСтрока = СтрЗаменить(ТекСтрока,IMG_Путь,ИмяДляЗамены);
					
					сзСсылки.Добавить(IMG_Путь,ИмяДляЗамены);
					
					IMG_Путь = "";
					src_Открыт = Ложь;
				КонецЕсли;
				
				Если НРег(Сред(ТекСтрока,СчСимвол,5)) = ("src=" + Символ(34)) Тогда
					СчСимвол = СчСимвол + 5;
					src_Открыт = Истина;
				КонецЕсли;
				
				Если src_Открыт Тогда
					IMG_Путь = IMG_Путь + Сред(ТекСтрока,СчСимвол,1);
                КонецЕсли;
                
            КонецЦикла; // По строке, символы.
            
        КонецЕсли; // Встречается тег.
        
	КонецЦикла;	// По тексту, строки.

	Возврат сзСсылки;
    
КонецФункции // ПолучитьСсылкиНаИзображения()

// На основе списка изображений создает список файлов изображений, в виде двоичных данных, для сохранения в ИБ.
// 
// Параметры: 
// 	сзСсылки - СписокЗначений - Список файлов изображений: 
//                                  Значение - путь к файлу; Представление - Идентификатор изображения. 
//  ТекКаталог - Строка.
//
// Возвращаемое значение:
// 	СписокЗначений - Список изображений для сохранения в ИБ: Значение - ДвоичныеДанные
// 	                   - изображение; Представление - Идентификатор изображения.        
//
Функция ПолучитьФайлыПоСсылкам(сзСсылки, ТекКаталог="")
	
	сзФайлы = Новый СписокЗначений;
	
	Для Каждого ТекПутьКФайлу Из сзСсылки Цикл
		ПутьКФайлу = ТекПутьКФайлу.Значение;
		Если Найти(ПутьКФайлу, ":") = 0 И НЕ Лев(ПутьКФайлу, 2) = "\\" Тогда
			ПутьКФайлу = ТекКаталог + ?(Прав(ТекКаталог, 1)="\", "", "\") + ПутьКФайлу;
		КонецЕсли;
		КаталогНаДиске = Новый Файл(ПутьКФайлу);
    	Если КаталогНаДиске.Существует() Тогда
			сзФайлы.Добавить(Новый ДвоичныеДанные(ПутьКФайлу), ТекПутьКФайлу.Представление);
		Иначе
			#Если Клиент Тогда
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Ошибка сохранения файла! (" + ПутьКФайлу + ")");
			#КонецЕсли
		КонецЕсли;
	КонецЦикла;
	
	Возврат сзФайлы;
	
КонецФункции // ПолучитьФайлыПоСсылкам()

#КонецОбласти

#КонецЕсли
