#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КонтрагентОбъект = Неопределено;
	Параметры.Свойство("Контрагент", КонтрагентОбъект);
	
	Если КонтрагентОбъект = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	КонтрагентОбъект = ДанныеФормыВЗначение(КонтрагентОбъект, Тип("СправочникОбъект.Контрагенты"));
	ЗначениеВРеквизитФормы(КонтрагентОбъект, "Объект");
	
	Заголовок = Строка(Объект.Наименование) + ": Значения настроек ЭДО";
	
	НастройкиЭДОПриСозданииНаСервере(ЭтаФорма);
	
	ЗаполнитьПараметрыФормы();
	
	УстановитьУсловноеОформление();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьТекущиеДелаЭДО"
		Или ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда
		
		Элементы.НастройкиОтправки.Обновить();
		Элементы.НастройкиПолучения.Обновить();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Контрагенток_КодПровайдераПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагенток_ИДПоставщикаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагенток_GLNПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагенток_ВерсияАксаптаEDIПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагенток_ВерсияАксаптаУПДПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиОтправки

&НаКлиенте
Процедура НастройкиОтправкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ТекущиеДанные.ЭтоПрямойОбмен Тогда
		ОткрытьФормуНастроекПрямогоОбмена();
	Иначе
		ОткрытьФормуНастроекОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастройкиОтправкиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого ТекущаяСтрока Из Строки Цикл
		
		ТекущиеДанные = ТекущаяСтрока.Значение.Данные;
		
		СтандартныйРежим = Истина;
		Если ТекущиеДанные.КоличествоИдентификаторовОтправителя > 1 Тогда
			СтандартныйРежим = Ложь;
			ТекущиеДанные.ИдентификаторОтправителя = ПредставлениеИдентификатораРасширенныйРежим(
				ТекущиеДанные.КоличествоИдентификаторовОтправителя);
		КонецЕсли;
		
		Если ТекущиеДанные.КоличествоИдентификаторовПолучателя > 1 Тогда
			СтандартныйРежим = Ложь;
			ТекущиеДанные.ИдентификаторПолучателя = ПредставлениеИдентификатораРасширенныйРежим(
				ТекущиеДанные.КоличествоИдентификаторовПолучателя);
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоПрямойОбмен Тогда
			ТекущиеДанные.СтатусПриглашенияПредставление = НСтр("ru = '<Не требуется>'");
			Продолжить;
		КонецЕсли;
		
		Если СтандартныйРежим Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = 0;
		Если ТекущиеДанные.КоличествоОшибка Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.Ошибка;
			Количество = ТекущиеДанные.КоличествоОшибка;
		ИначеЕсли ТекущиеДанные.КоличествоТребуетсяСогласие Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.ТребуетсяСогласие;
			Количество = ТекущиеДанные.КоличествоТребуетсяСогласие;
		ИначеЕсли ТекущиеДанные.КоличествоТребуетсяОтправить Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
			Количество = ТекущиеДанные.КоличествоТребуетсяОтправить;
		ИначеЕсли ТекущиеДанные.КоличествоОтклонено Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.Отклонено;
			Количество = ТекущиеДанные.КоличествоОтклонено;
		ИначеЕсли ТекущиеДанные.КоличествоОжидаемСогласия Тогда
			СтатусПриглашения = Перечисления.СтатусыПриглашений.ОжидаемСогласия;
			Количество = ТекущиеДанные.КоличествоОжидаемСогласия;
		Иначе
			СтатусПриглашения = Перечисления.СтатусыПриглашений.Принято;
		КонецЕсли;
		
		Если Количество > 0 Тогда
			ТекущиеДанные.СтатусПриглашенияПредставление = СтрШаблон("%1 (%2)", СтатусПриглашения, Количество);
		Иначе
			ТекущиеДанные.СтатусПриглашенияПредставление = Строка(СтатусПриглашения);
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеПолей = Новый Структура;
	СоответствиеПолей.Вставить("ИдентификаторОрганизации", "ИдентификаторОтправителя");
	СоответствиеПолей.Вставить("ИдентификаторКонтрагента", "ИдентификаторПолучателя");
	ОбменСКонтрагентамиСлужебный.ЗаменитьПредставлениеСтатусовПриглашений(Строки, "СтатусПриглашенияСсылка", "СтатусПриглашенияПредставление", СоответствиеПолей);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиПолучения

&НаКлиенте
Процедура НастройкиПолученияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуНастроекПолучения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиЭУПД

&НаКлиенте
Процедура НастройкиЭУПД_КомандаСоздать(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Контрагент", Объект.Ссылка);
	
	ОписаниеОповещенияРедактированиеНастроекЭУПД = Новый ОписаниеОповещения("ВыполнитьПослеРедактированияНастройкиЭУПД", ЭтаФорма);
	
	ОткрытаяФорма = ОткрытьФорму("РегистрСведений.ок_НастройкиЭУПД.Форма.ФормаЗаписи", СтруктураПараметров, ЭтаФорма, Объект.Ссылка,,, ОписаниеОповещенияРедактированиеНастроекЭУПД, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытаяФорма.Заголовок = Строка(Объект.Ссылка) + ": Настройка ЭУПД (Создание)";
	ОткрытаяФорма.АвтоЗаголовок = Ложь;
	
	ОткрытаяФорма.Элементы.Контрагент.Видимость = Ложь;
	
	ОткрытаяФорма.Запись.Контрагент = Объект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЭУПДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Ключ", ВыбраннаяСтрока);
	
	ОписаниеОповещенияРедактированиеНастроекЭУПД = Новый ОписаниеОповещения("ВыполнитьПослеРедактированияНастройкиЭУПД", ЭтаФорма);
	
	ОткрытаяФорма = ОткрытьФорму("РегистрСведений.ок_НастройкиЭУПД.Форма.ФормаЗаписи", СтруктураПараметров, ЭтаФорма, Объект.Ссылка,,, ОписаниеОповещенияРедактированиеНастроекЭУПД, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытаяФорма.Заголовок = Строка(Объект.Ссылка) + ": Настройка ЭУПД (Изменение)";
	ОткрытаяФорма.АвтоЗаголовок = Ложь;
	
	ОткрытаяФорма.Элементы.Контрагент.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЭУПДПослеУдаления(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеРедактированияНастройкиЭУПД(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы.НастройкиЭУПД.Обновить();
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьДействиеКомандаЗаписать(Команда)
	
	Отказ = Ложь;
	ВыполнитьДействиеКомандаЗаписатьНаСервере(Отказ);
	
	Если НЕ Отказ Тогда
	
		Закрыть(Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеКомандаЗаписатьНаСервере(Отказ)
	
	Отказ = ПроверитьЗаполнениеЭлементовФормы(Истина);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка
	
		НачатьТранзакцию();
		
		КонтрагентОбъект = РеквизитФормыВЗначение("Объект");
		КонтрагентОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка: " + ОписаниеОшибки()); 
		
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеКомандаОтмена(Команда)
	
	Закрыть(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуОтправки(Команда)
	
	ОткрытьФормуНастроекОтправки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуПолучения(Команда)
	
	ОткрытьФормуНастроекПолучения(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВыполнитьПроверкуОбязательногоЗаполнения(ВидСвойства, Значение, УсловиеОбязательногоЗаполнения)
	
	Если НЕ ЗначениеЗаполнено(Значение)
		И НЕ ЗначениеЗаполнено(УсловиеОбязательногоЗаполнения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоответствиеЗначенийСвойств = Новый Соответствие;
	Результат = ЛожЬ;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастроекОтправки(ФормаСоздания = Ложь)
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ФормаСоздания Тогда
		
		ПараметрыОткрытия.Вставить("Создание", Истина);
		ПараметрыОткрытия.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		ПараметрыОткрытия.Вставить("Контрагент" , Объект.Ссылка);
		
	Иначе
		
		ТекущиеДанные = Элементы.НастройкиОтправки.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("Организация", ТекущиеДанные.Организация);
		ПараметрыОткрытия.Вставить("Контрагент" , ТекущиеДанные.Контрагент);
		ПараметрыОткрытия.Вставить("Договор"    , ТекущиеДанные.Договор);
		
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНастройкиОтправкиЭДО(ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекПолучения(ФормаСоздания = Ложь)
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ФормаСоздания Тогда
		
		ПараметрыОткрытия.Вставить("Создание", Истина);
		ПараметрыОткрытия.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		ПараметрыОткрытия.Вставить("Контрагент" , Объект.Ссылка);
		
	Иначе
		
		ТекущиеДанные = Элементы.НастройкиПолучения.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("Организация", 				ТекущиеДанные.Организация);
		ПараметрыОткрытия.Вставить("Контрагент", 				Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ИдентификаторКонтрагента", 	ТекущиеДанные.ИдентификаторКонтрагента);
		ПараметрыОткрытия.Вставить("ИдентификаторОрганизации", 	ТекущиеДанные.ИдентификаторОрганизации);
		
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНастройкиОтраженияВУчетеЭДО(ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекПрямогоОбмена(ФормаСоздания = Ложь)
	
	ПараметрыОткрытия = Новый Структура;
	Если ФормаСоздания Тогда
		ПараметрыОткрытия.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
		ПараметрыОткрытия.Вставить("Контрагент" , Объект.Ссылка);
	Иначе
		ТекущиеДанные = Элементы.НастройкиОтправки.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыОткрытия.Вставить("Организация", ТекущиеДанные.Организация);
		ПараметрыОткрытия.Вставить("Контрагент" , ТекущиеДанные.Контрагент);
		ПараметрыОткрытия.Вставить("Договор"    , ТекущиеДанные.Договор);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.Форма.НастройкиОтправкиДокументовПрямойОбмен",
		ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = НастройкиПолучения.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Все учетные записи>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПолучения.ИдентификаторКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиПолученияИдентификаторКонтрагента");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = НастройкиПолучения.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Все учетные записи>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиПолучения.ИдентификаторОрганизации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиПолученияИдентификаторОрганизации");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////

КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	Элементы.Контрагенток_GLN.Доступность = ЗначениеЗаполнено(Объект.ок_КодПровайдера);
	Элементы.Контрагенток_RECADV.Доступность = ЗначениеЗаполнено(Объект.ок_GLN);
	
	Элементы.Контрагенток_ВерсияАксаптаEDI.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(Объект.ок_GLN);
	Если НЕ Элементы.Контрагенток_ВерсияАксаптаEDI.АвтоОтметкаНезаполненного Тогда
		Элементы.Контрагенток_ВерсияАксаптаEDI.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.Контрагенток_ВерсияАксаптаУПД.АвтоОтметкаНезаполненного = ЕстьФункцияУПД(Объект.Ссылка);
	Если НЕ Элементы.Контрагенток_ВерсияАксаптаУПД.АвтоОтметкаНезаполненного Тогда
		Элементы.Контрагенток_ВерсияАксаптаУПД.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 
	
	Элементы.НастройкиЭУПД.Доступность = ЗначениеЗаполнено(Объект.ок_КодПровайдера) И ЗначениеЗаполнено(Объект.ок_ИДПоставщика);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеЭлементовФормы(ВыводитьСообщениеОбОшибке = Ложь)
	
	ОшибкаЗаполнения = Ложь;
	
	Если Элементы.Контрагенток_ВерсияАксаптаEDI.АвтоОтметкаНезаполненного
		И НЕ ЗначениеЗаполнено(Объект.ок_ВерсияАксаптаEDI) Тогда
	
		ОшибкаЗаполнения = Истина;
		
		Если ВыводитьСообщениеОбОшибке Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Версия аксапта EDI"" не заполнено",, "Объект.ок_ВерсияАксаптаEDI");			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Элементы.Контрагенток_ВерсияАксаптаУПД.АвтоОтметкаНезаполненного
		И НЕ ЗначениеЗаполнено(Объект.ок_ВерсияАксаптаУПД) Тогда
	
		ОшибкаЗаполнения = Истина;
		
		Если ВыводитьСообщениеОбОшибке Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Версия аксапта УПД"" не заполнено",, "Объект.ок_ВерсияАксаптаУПД");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОшибкаЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьФункцияУПД(КонтрагентСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ок_НастройкиЭУПД.ФункцияУПД КАК ФункцияУПД
		|ИЗ
		|	РегистрСведений.ок_НастройкиЭУПД КАК ок_НастройкиЭУПД
		|ГДЕ
		|	ок_НастройкиЭУПД.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Возврат Истина;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыФормы()
	
	МассивКодовПровайдера = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОператорыЭДО.ок_КодПровайдераДляАксапты КАК ок_КодПровайдераДляАксапты
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	ОператорыЭДО.ок_КодПровайдераДляАксапты <> """"";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КодПровайдераДляАксапты = СокрЛП(ВыборкаДетальныеЗаписи.ок_КодПровайдераДляАксапты);
		Если МассивКодовПровайдера.Найти(КодПровайдераДляАксапты) = Неопределено Тогда
		
			МассивКодовПровайдера.Добавить(КодПровайдераДляАксапты);
		
		КонецЕсли; 
		
	КонецЦикла;

	Элементы.Контрагенток_КодПровайдера.СписокВыбора.ЗагрузитьЗначения(МассивКодовПровайдера);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НастройкиОтправки, 		"ИспользоватьПрямойОбмен", ОбменСКонтрагентамиСлужебный.ИспользоватьПрямойОбмен());
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиОтправки, 	"Контрагент", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Объект.Ссылка));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиПолучения, "Контрагент", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Объект.Ссылка));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиЭУПД, 		"Контрагент", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Объект.Ссылка));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеИдентификатораРасширенныйРежим(Количество)
	Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 идентификатор;;%1 идентификатора;%1 идентификаторов;%1 идентификатора'"), Количество);
КонецФункции

&НаСервереБезКонтекста
Процедура НастройкиЭДОПриСозданииНаСервере(Форма)

	Форма.НастройкиОтправки.ТекстЗапроса = СтрЗаменить(Форма.НастройкиОтправки.ТекстЗапроса, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиПоВидам", 
										"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиПоВидам
										|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
										|	ПО НастройкиОтправкиПоВидам.ИдентификаторОтправителя = УчетныеЗаписиЭДО.ИдентификаторЭДО");

	Форма.НастройкиОтправки.ТекстЗапроса = СтрЗаменить(Форма.НастройкиОтправки.ТекстЗапроса, "НастройкиОтправки.Получатель КАК Контрагент,", "НастройкиОтправки.Получатель КАК Контрагент, 
										|МАКСИМУМ(ВЫБОР
										|	КОГДА УчетныеЗаписиЭДО.ок_СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.ок_СпособыОбменаЭД.ПустаяСсылка)
										|		ТОГДА УчетныеЗаписиЭДО.СпособОбменаЭД
										|	ИНАЧЕ УчетныеЗаписиЭДО.ок_СпособОбменаЭД
										|КОНЕЦ) КАК ок_ОператорЭДО,
										|");
	
	ок_УправлениеФормами.ДобавитьЭлементНаФорму(Форма, Новый Структура("Имя, Заголовок, Родитель, ПоследующийЭлемент, ПутьКДанным", 
															"ок_ОператорЭДО", 
															"Оператор ЭДО", 
															"НастройкиОтправки", 
															"НастройкиОтправкиГруппаОрганизация", 
															"НастройкиОтправки.ок_ОператорЭДО"));

КонецПроцедуры

#КонецОбласти 
