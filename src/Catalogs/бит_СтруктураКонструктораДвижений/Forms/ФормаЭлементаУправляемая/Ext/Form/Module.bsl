
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Регистр) и не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Объект.Регистр.Наименование;
	КонецЕсли;
	
	ЗаполнитьКэшНастроекКолонокНаСервере();
	ЗаполнитьКэшЗначенийНаСервере();
	
	// Создадим прототип таблицы в реквизите формы.
	СоздатьДинамическиеКолонкиНаСервере();
		          
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Реквизит) Тогда
		ПрочитатьСвойстваКолонки(Реквизит);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьКэшНастроекКолонокНаСервереСПараметром(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РеквизитПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Реквизит) Тогда
		ПрочитатьСвойстваКолонки(Реквизит);
	КонецЕсли;
	
	// Установим активным соответствующую колонку табличного поля.
	Элементы.СтруктураКолонок.ТекущийЭлемент = Элементы.Найти(ПараметрыКолонок.НайтиСтроки(Новый Структура("Реквизит", Реквизит)).Получить(0).ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура СинонимПриИзменении(Элемент)
	
	ЗаписатьСвойстваКолонки(Реквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	
	ЗаписатьСвойстваКолонки(Реквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложениеПриИзменении(Элемент)
	
	ЗаписатьСвойстваКолонки(Реквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьПриИзменении(Элемент)
	
	ЗаписатьСвойстваКолонки(Реквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрПриИзменении(Элемент)
	
	Если не ЗначениеЗаполнено(Объект.Регистр) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииРегистраНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерКолонкиПриИзменении(Элемент)
	
	Если НомерКолонки > ПараметрыКолонок.Количество() Тогда
		НомерКолонки = ПараметрыКолонок.Количество();
	КонецЕсли;
	
	ЗаписатьСвойстваКолонки(Реквизит);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураКолонок

&НаКлиенте
Процедура СтруктураКолонокПриАктивизацииПоля(Элемент)
	
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Эл = Элементы.Найти(ИмяЭлемента);
	
	СтрокиТаб = ПараметрыКолонок.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяЭлемента));
	
	Если СтрокиТаб.Количество() > 0 Тогда
		
		Рек = СтрокиТаб[0].Реквизит;	
		
		ЭтоЗамена = Ложь;
		
		Если Рек <> Реквизит Тогда
			Реквизит = Рек;
			ЭтоЗамена = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизит) и ЭтоЗамена Тогда
			ПрочитатьСвойстваКолонки(Реквизит);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСвойстваКолонок(Команда)
	
	ОбновитьСвойстваКолонокНаСервере();
	
	Элементы.Стабилизатор.Видимость = Ложь;
	Элементы.Стабилизатор.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчанию(Команда)
	
	ЗаполнитьПоУмолчаниюНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет кэш значений на сервере.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначенийНаСервере()
	
	фКэшЗначений = Новый Структура;
	
	ПоложенияКолонок = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ПоложенияКолонокТаблицы);
	
	КэшПеречислений = Новый Структура;
	КэшПеречислений.Вставить("ПоложенияКолонок", ПоложенияКолонок);
	
	ФКэшЗначений.Вставить("Перечисления", КэшПеречислений);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшНастроекКолонокНаСервере()
	
	ПараметрыКолонок.Загрузить(Объект.ПараметрыКолонок.Выгрузить());
	
	Для Каждого СтрокаКолонка Из ПараметрыКолонок Цикл
		СтрокаКолонка.ИмяРеквизита = СтрокаКолонка.Реквизит.Наименование;
	КонецЦикла;
	
	ПараметрыКолонок.Сортировать("НомерКолонки");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКэшНастроекКолонокНаСервереСПараметром(ЭлементОбъект)
	
	// Об = ЭлементОбъект;
	// Об.ПараметрыКолонок.Загрузить(ПараметрыКолонок.Выгрузить());
	
	ВремТаб = ПараметрыКолонок.Выгрузить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПараметрыКолонок.Реквизит,
	|	ПараметрыКолонок.СинонимРеквизита,
	|	ПараметрыКолонок.ПоложениеКолонки,
	|	ПараметрыКолонок.ШиринаКолонки,
	|	ПараметрыКолонок.Видимость,
	|	ПараметрыКолонок.НомерКолонки
	|ПОМЕСТИТЬ ПараметрыКолонок
	|ИЗ
	|	&ПараметрыКолонок КАК ПараметрыКолонок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКолонок.Реквизит,
	|	ПараметрыКолонок.СинонимРеквизита,
	|	ПараметрыКолонок.ПоложениеКолонки,
	|	ПараметрыКолонок.ШиринаКолонки,
	|	ПараметрыКолонок.Видимость,
	|	ПараметрыКолонок.НомерКолонки,
	|	ВложенныйЗапрос.ТипРеквизита
	|ИЗ
	|	ПараметрыКолонок КАК ПараметрыКолонок
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бит_ВидыРеквизитовДвижений.Ссылка КАК Реквизит,
	|			бит_ВидыРеквизитовДвижений.ТипыЗначений КАК ТипРеквизита
	|		ИЗ
	|			Справочник.бит_ВидыРеквизитовДвижений КАК бит_ВидыРеквизитовДвижений
	|		ГДЕ
	|			бит_ВидыРеквизитовДвижений.Родитель = &РегистрСсылка) КАК ВложенныйЗапрос
	|		ПО ПараметрыКолонок.Реквизит = ВложенныйЗапрос.Реквизит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыКолонок");
	
	Запрос.УстановитьПараметр("РегистрСсылка"	, ЭлементОбъект.Регистр);
	Запрос.УстановитьПараметр("ПараметрыКолонок", ВремТаб);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ЭлементОбъект.ПараметрыКолонок.Загрузить(Результат);
	
	ЭлементОбъект.ПараметрыКолонок.Сортировать("НомерКолонки");
	
КонецПроцедуры

// Получает свойтва колонки из кэша параметров колонок.
// 
&НаСервере
Процедура ПрочитатьСвойстваКолонкиНаСервере(РеквизитСсылка)
	
	СтрокиОписания = ПараметрыКолонок.НайтиСтроки(Новый Структура("Реквизит", РеквизитСсылка));
	
	Если СтрокиОписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКолонки = СтрокиОписания[0];
	
	Синоним 		= ОписаниеКолонки.СинонимРеквизита;
	Ширина 			= ОписаниеКолонки.ШиринаКолонки;
	Положение 		= ОписаниеКолонки.ПоложениеКолонки;
	Видимость		= ОписаниеКолонки.Видимость;
	НомерКолонки	= ОписаниеКолонки.НомерКолонки;
	
КонецПроцедуры

// Переопределенный вызов обработчика события "ПриИзменении" поля "Регистр".
// 
&НаСервере
Процедура ПриИзмененииРегистраНаСервере()
	
	Объект.Наименование = Объект.Регистр.Наименование;
	
	// Заполним кэш колонок регистра

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыРеквизитовДвижений.Ссылка КАК Реквизит,
	               |	ВидыРеквизитовДвижений.ПредставлениеЭлемента КАК СинонимРеквизита,
	               |	ВидыРеквизитовДвижений.ТипыЗначений КАК ТипРеквизита,
	               |	ЗНАЧЕНИЕ(Перечисление.бит_ПоложенияКолонокТаблицы.НоваяКолонка) КАК ПоложениеКолонки,
	               |	20 КАК ШиринаКолонки,
	               |	ИСТИНА КАК Видимость,
	               |	ВидыРеквизитовДвижений.Наименование КАК ИмяРеквизита
	               |ИЗ
	               |	Справочник.бит_ВидыРеквизитовДвижений КАК ВидыРеквизитовДвижений
	               |ГДЕ
	               |	ВидыРеквизитовДвижений.Родитель = &РегистрСсылка";
				   
	Запрос.УстановитьПараметр("РегистрСсылка", Объект.Регистр);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("НомерКолонки");
	
	жи = 0;
	
	Для Каждого Элемент Из Результат Цикл
		Элемент.НомерКолонки = жи;
		жи = жи + 1;
	КонецЦикла;
	
	ПараметрыКолонок.Загрузить(Результат);
	
	Об = РеквизитФормыВЗначение("Объект");
	Об.ПараметрыКолонок.Загрузить(Результат);
	
	СоздатьДинамическиеКолонкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасстановкуПоУмолчанию()
	
	ПараметрыКолонокВрем 	= ПараметрыКолонок.Выгрузить();
    Регистр 				= Объект.Регистр;
	
	СчетУпорядоченных = 0;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Период");
	МассивИменРеквизитов.Добавить("Организация");
	МассивИменРеквизитов.Добавить("Таблица");
	
	МассивУпорядоченных = Новый Массив;
	
	Для Каждого ЭлементИмени Из МассивИменРеквизитов Цикл
		
		РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ЭлементИмени, Истина, Регистр);
		
		Если не РРеквизит.Пустая() Тогда
			
			СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
			
			Если СтрокаТЧ <> Неопределено Тогда
				
				СчетУпорядоченных 			= СчетУпорядоченных + 1;
				СтрокаТЧ.НомерКолонки 		= СчетУпорядоченных;
				СтрокаТЧ.ПоложениеКолонки 	= ?(СчетУпорядоченных < 2
											  	, Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка
											  	, Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке);
											  
				МассивУпорядоченных.Добавить(РРеквизит);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("СчетДт");
	
	Для Каждого ЭлементИмени Из МассивИменРеквизитов Цикл
		
		РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ЭлементИмени, Истина, Регистр);
		
		Если не РРеквизит.Пустая() Тогда
			
			СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
			
			Если СтрокаТЧ <> Неопределено Тогда
				
				СчетУпорядоченных 			= СчетУпорядоченных + 1;
				СтрокаТЧ.НомерКолонки 		= СчетУпорядоченных;
				СтрокаТЧ.ПоложениеКолонки 	= ?(МассивИменРеквизитов.Найти(ЭлементИмени) = 0
												, Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка
												, Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке);
												
				МассивУпорядоченных.Добавить(РРеквизит);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Субконто");
	МассивИменРеквизитов.Добавить("ИмяВидаСубконто");
		
	МассивПостфиксов = Новый Массив;
	МассивПостфиксов.Добавить("Дт");
		
	Для Каждого Постфикс Из МассивПостфиксов Цикл
		
		Для Каждого ЭлементИмени Из МассивИменРеквизитов Цикл
			
			Для жи = 1 По 10 Цикл
				
				РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ЭлементИмени + Постфикс + Строка(жи)
																						, Истина
																						, Регистр);
				
				Если не РРеквизит.Пустая() Тогда

					СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
					
					Если СтрокаТЧ <> Неопределено Тогда
						
						СчетУпорядоченных 			= СчетУпорядоченных + 1;
						СтрокаТЧ.НомерКолонки 		= СчетУпорядоченных;
						СтрокаТЧ.ПоложениеКолонки 	= ?(жи = 1
														, Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка
														, Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке);
						
						МассивУпорядоченных.Добавить(РРеквизит);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("КоличествоДт");
	МассивИменРеквизитов.Добавить("ВалютаДт");
	МассивИменРеквизитов.Добавить("ВалютнаяСуммаДт");
	
	Для Каждого ЭлементИмени Из МассивИменРеквизитов Цикл
		
		РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ЭлементИмени, Истина, Регистр);
		
		Если не РРеквизит.Пустая() Тогда
			
			СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
			
			Если СтрокаТЧ <> Неопределено Тогда
				
				СчетУпорядоченных 			= СчетУпорядоченных + 1;
				СтрокаТЧ.НомерКолонки 		= СчетУпорядоченных;
				СтрокаТЧ.ПоложениеКолонки 	= ?(МассивИменРеквизитов.Найти(ЭлементИмени) = 0
												, Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка
												, Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке);
				
				МассивУпорядоченных.Добавить(РРеквизит);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("СчетКт");
	
	Для Каждого ЭлементИмени Из МассивИменРеквизитов Цикл
		
		РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ЭлементИмени, Истина, Регистр);
		
		Если не РРеквизит.Пустая() Тогда
			
			СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
			
			Если СтрокаТЧ <> Неопределено Тогда
				
				СчетУпорядоченных 			= СчетУпорядоченных + 1;
				СтрокаТЧ.НомерКолонки 		= СчетУпорядоченных;
				СтрокаТЧ.ПоложениеКолонки 	= ?(МассивИменРеквизитов.Найти(ЭлементИмени) = 0
												, Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка
												, Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке);
												
				МассивУпорядоченных.Добавить(РРеквизит);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Субконто");
	МассивИменРеквизитов.Добавить("ИмяВидаСубконто");
		
	МассивПостфиксов = Новый Массив;
	МассивПостфиксов.Добавить("Кт");
	
	Для Каждого Постфикс Из МассивПостфиксов Цикл
		
		Для Каждого ЭлементИмени Из МассивИменРеквизитов Цикл
			
			Для жи = 1 По 10 Цикл
				
				РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ЭлементИмени + Постфикс + Строка(жи), Истина, Регистр);
				
				Если не РРеквизит.Пустая() Тогда
					
					СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
					
					Если СтрокаТЧ <> Неопределено Тогда
						
						СчетУпорядоченных 			= СчетУпорядоченных + 1;
						СтрокаТЧ.НомерКолонки 		= СчетУпорядоченных;
						СтрокаТЧ.ПоложениеКолонки 	= ?(жи = 1
														, Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка
														, Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке);
														
						МассивУпорядоченных.Добавить(РРеквизит);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("КоличествоКт");
	МассивИменРеквизитов.Добавить("ВалютаКт");
	МассивИменРеквизитов.Добавить("ВалютнаяСуммаКт");
	
	Для Каждого ЭлементИмени Из МассивИменРеквизитов Цикл
		
		РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ЭлементИмени, Истина, Регистр);
		
		Если не РРеквизит.Пустая() Тогда
			
			СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
			
			Если СтрокаТЧ <> Неопределено Тогда
				
				СчетУпорядоченных 			= СчетУпорядоченных + 1;
				СтрокаТЧ.НомерКолонки 		= СчетУпорядоченных;
				СтрокаТЧ.ПоложениеКолонки 	= ?(МассивИменРеквизитов.Найти(ЭлементИмени) = 0
												, Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка
												, Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке);
												
				МассивУпорядоченных.Добавить(РРеквизит);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
    	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Условие");
	МассивИменРеквизитов.Добавить("ВидСравнения");
	МассивИменРеквизитов.Добавить("Значение");
	МассивИменРеквизитов.Добавить("ОбъединениеСПоследующим");
		
	Для жи = 1 По 3 Цикл
		
		Для Каждого ЭлементИмени Из МассивИменРеквизитов Цикл
			
			РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию(ЭлементИмени + Строка(жи), Истина, Регистр);
			
			Если не РРеквизит.Пустая() Тогда
				
				СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
				
				Если СтрокаТЧ <> Неопределено Тогда
					
					СчетУпорядоченных 		= СчетУпорядоченных + 1;
					СтрокаТЧ.НомерКолонки 	= СчетУпорядоченных;
					
					Если ЭлементИмени = "Условие" Тогда
						
						СтрокаТЧ.ПоложениеКолонки = ?(жи = 1
													  , Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка
													  , Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке);
													  
					Иначе

						СтрокаТЧ.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.ВТойЖеКолонке;
						
					КонецЕсли;
					
					МассивУпорядоченных.Добавить(РРеквизит);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	РРеквизит = Справочники.бит_ВидыРеквизитовДвижений.НайтиПоНаименованию("ПроизвольноеУсловие", Истина, Регистр);
	
	Если не РРеквизит.Пустая() Тогда
		
		СтрокаТЧ = ПараметрыКолонокВрем.Найти(РРеквизит, "Реквизит");
		
		Если СтрокаТЧ <> Неопределено Тогда
			
			СчетУпорядоченных 			= СчетУпорядоченных + 1;
			СтрокаТЧ.НомерКолонки 		= СчетУпорядоченных;
			СтрокаТЧ.ПоложениеКолонки 	= Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке;
			
			МассивУпорядоченных.Добавить(РРеквизит);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СквознойНумератор = СчетУпорядоченных;
	
	Для Каждого ЭлементТЧ Из ПараметрыКолонокВрем Цикл
		
		ЭлМассива = МассивУпорядоченных.Найти(ЭлементТЧ.Реквизит);
		
		Если ЭлМассива = Неопределено Тогда
			
			СквознойНумератор 		= СквознойНумератор + 1;
			ЭлементТЧ.НомерКолонки 	= СквознойНумератор;
			
		Иначе	
			
			ЭлементТЧ.НомерКолонки = ЭлМассива + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыКолонок.Загрузить(ПараметрыКолонокВрем);
	
	ПараметрыКолонок.Сортировать("НомерКолонки");
	
КонецПроцедуры

// Переопределенный вызов обработчика команды "ПоУмолчанию".
// 
&НаСервере
Процедура ЗаполнитьПоУмолчаниюНаСервере()
	
	ЗаполнитьРасстановкуПоУмолчанию();
	ОбновитьСвойстваКолонокНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолеВыбораРеквизит(МассивИменКолонок)
	
	Элементы.Реквизит.СписокВыбора.ЗагрузитьЗначения(МассивИменКолонок);
	
	Если МассивИменКолонок.Количество() <> 0 Тогда
		
		Реквизит = МассивИменКолонок[0];
		ПрочитатьСвойстваКолонкиНаСервере(Реквизит);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПолеВыбораРеквизит()

// Выводит свойства выбранного реквизита.
// 
&НаКлиенте
Процедура ПрочитатьСвойстваКолонки(РеквизитСсылка)
	
	СтрокиОписания = ПараметрыКолонок.НайтиСтроки(Новый Структура("Реквизит", РеквизитСсылка));
	
	Если СтрокиОписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКолонки = СтрокиОписания[0];
	
	Синоним 		= ОписаниеКолонки.СинонимРеквизита;
	Ширина 			= ОписаниеКолонки.ШиринаКолонки;
	Положение 		= ОписаниеКолонки.ПоложениеКолонки;
	Видимость		= ОписаниеКолонки.Видимость;
	НомерКолонки	= ОписаниеКолонки.НомерКолонки;
	
КонецПроцедуры

// Сохраняет измененные свойства выбранного реквизита.
// 
&НаКлиенте
Процедура ЗаписатьСвойстваКолонки(РеквизитСсылка)
	
	Если не ЗначениеЗаполнено(РеквизитСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОписания = ПараметрыКолонок.НайтиСтроки(Новый Структура("Реквизит", РеквизитСсылка));
	
	Если СтрокиОписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОписаниеКолонки = СтрокиОписания[0];
	
	// Проверим на изменение номера колонки
	НомерКолонкиИзменен = ОписаниеКолонки.НомерКолонки <> НомерКолонки;
	СтарыйНомер			= ОписаниеКолонки.НомерКолонки;
	МодульСдвига		= НомерКолонки - ОписаниеКолонки.НомерКолонки;
	
	Если НомерКолонкиИзменен Тогда
		
		// Найдем элемент, который потеснили
		СтрокиИзм 	= ПараметрыКолонок.НайтиСтроки(Новый Структура("НомерКолонки", НомерКолонки));
		ОписаниеИзм = СтрокиИзм[0];
		
		ОписаниеИзм.НомерКолонки = ОписаниеИзм.НомерКолонки + ?(МодульСдвига > 0, - 0.1, 0.1);
		
	КонецЕсли;
	
	ОписаниеКолонки.СинонимРеквизита	= Синоним;
	ОписаниеКолонки.ШиринаКолонки		= Ширина;
	ОписаниеКолонки.ПоложениеКолонки	= Положение;
	ОписаниеКолонки.Видимость			= Видимость;
	ОписаниеКолонки.НомерКолонки		= НомерКолонки;
		
	ПараметрыКолонок.Сортировать("НомерКолонки");
	
	Если НомерКолонкиИзменен Тогда
		
		// Необходимо перенумеровать все колонки
		
		ТекНомерКолонки = 0;
		
		Для Каждого ПеренумКолонка Из ПараметрыКолонок Цикл
			
			ТекНомерКолонки = ТекНомерКолонки + 1;
			
			Если ПеренумКолонка.Реквизит = РеквизитСсылка Тогда
				Продолжить;
			КонецЕсли;
			
			ПеренумКолонка.НомерКолонки = ТекНомерКолонки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если АвтообновлениеКолонок Тогда
		ОбновитьСвойстваКолонокНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Создает реквизиты формы и элементы формы, по описанию параметров колонок.
// 
&НаСервере
Процедура СоздатьДинамическиеКолонкиНаСервере()
	
	ФРМ 			= ЭтаФорма;
	ТаблицаНаФорме 	= Элементы.СтруктураКолонок;
	РеквизитФормы 	= СтруктураКолонок;
	КэшСтруктуры	= ПараметрыКолонок;
	
	бит_МеханизмХозяйственныхОперацийСервер.ПривестиРеквзитыФормыВСоответствииСоСтруктурой(ФРМ, ПараметрыКолонок);
    бит_МеханизмХозяйственныхОперацийСервер.ПривестиТабличноеПолеКСоответствиюСоСтруктурой(ФРМ, ТаблицаНаФорме, РеквизитФормы, КэшСтруктуры);
	
	Если ЗначениеЗаполнено(Объект.Регистр) Тогда
		ЗаполнитьПолеВыбораРеквизит(ПараметрыКолонок.Выгрузить().ВыгрузитьКолонку("Реквизит"));
		ФиктивнаяСтрока = СтруктураКолонок.Добавить();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваКолонокНаСервере()
	
	// Запомним имя активного элемента
	ИмяЭлемента = Элементы.СтруктураКолонок.ТекущийЭлемент.Имя;
			
	ФРМ 			= ЭтаФорма;
	ТаблицаНаФорме 	= Элементы.СтруктураКолонок;
	РеквизитФормы 	= СтруктураКолонок;
	КэшСтруктуры	= ПараметрыКолонок;
	
    бит_МеханизмХозяйственныхОперацийСервер.ПривестиТабличноеПолеКСоответствиюСоСтруктурой(ФРМ, ТаблицаНаФорме, РеквизитФормы, КэшСтруктуры);
	
	Эл = Элементы.Найти(ИмяЭлемента);
	
	СтрокиТаб = ПараметрыКолонок.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяЭлемента));
	
	Если СтрокиТаб.Количество() > 0 Тогда
		
		Рек = СтрокиТаб[0].Реквизит;	
		Реквизит = Рек;
		
		Если ЗначениеЗаполнено(Реквизит) Тогда
			ПрочитатьСвойстваКолонкиНаСервере(Реквизит);
			// Установим активный элемент
			Элементы.СтруктураКолонок.ТекущийЭлемент = Эл;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
