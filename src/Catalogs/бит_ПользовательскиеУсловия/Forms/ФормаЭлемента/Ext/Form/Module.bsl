
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте
Перем мИДУдаленной; // Служит для передачи ИД удаленной строки между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда 		
		Возврат;    		
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	
	фКодУсловия = Справочники.бит_ПользовательскиеУсловия.СформироватьПредставлениеКодаПользовательскогоУсловия(Объект.Условия,Объект.КодУсловия);
	
	ЗаполнитьДеревоУсловий();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ОбъектСистемы");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	фКодУсловия = Справочники.бит_ПользовательскиеУсловия.СформироватьПредставлениеКодаПользовательскогоУсловия(ТекущийОбъект.Условия,ТекущийОбъект.КодУсловия);	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Перенумеровываем строки дерева и при необходимости перенумеровываем связанные с ними строки табличной части
	// это необходимо для возможности изменения порядка строкв дереве.
	
	ТабВрем = ТекущийОбъект.Условия.Выгрузить();
	
	Сч = 1;
	КоллекцияВерх = ДеревоУсловия.ПолучитьЭлементы();
	
	Для каждого ТекСтрока Из КоллекцияВерх Цикл
	
		 ТекСтрока.НомерСтроки = Сч;
		 
		 СтрОтбор = Новый Структура;
		 СтрОтбор.Вставить("ИД", ТекСтрока.ИД);
		 
		 РезПоиска = ТабВрем.НайтиСтроки(СтрОтбор);
		 
		 Если РезПоиска.Количество() > 0 Тогда
		 
		 	 РезПоиска[0].НомерСтроки = ТекСтрока.НомерСтроки;
		 
		 КонецЕсли; 
		 
		 КоллекцияПараметры = ТекСтрока.ПолучитьЭлементы();
		 
		 Для каждого СтрокаПараметр Из КоллекцияПараметры Цикл
			 
			 СтрокаПараметр.НомерСтроки = Сч;
			 
			 СтрОтбор = Новый Структура;
			 СтрОтбор.Вставить("ИД", СтрокаПараметр.ИД);
			 
			 РезПоиска = ТабВрем.НайтиСтроки(СтрОтбор);
			 
			 Если РезПоиска.Количество() > 0 Тогда
				 
				 РезПоиска[0].НомерСтроки = СтрокаПараметр.НомерСтроки;
				 
			 КонецЕсли;
			 
		 КонецЦикла; 
		 
		 Сч = Сч+1;
	
	КонецЦикла; 
	
	ТабВрем.Сортировать("НомерСтроки");
	
	ТекущийОбъект.Условия.Загрузить(ТабВрем);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтекстВыполненияПриИзменении(Элемент)
	
	КонтекстВыполненияИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	Отказ = Ложь;
	ОбъектСистемыИзменение(Отказ);
	Если Отказ Тогда
		
		ИзвлечьИзКэша("ОбъектСистемы");
		Возврат;
		
	КонецЕсли; 
	
	ДобавитьВКэш("ОбъектСистемы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,фКэшЗначений.ДоступныеВидыОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.ОбъектСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольноеУсловиеПриИзменении(Элемент)
	
	ПроизвольноеУсловиеИзменение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоУсловия

&НаКлиенте
Процедура ДеревоУсловияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущаяСтрока = Элементы.ДеревоУсловия.ТекущиеДанные;	
	
	Если НЕ Копирование Тогда
		
		Отказ = Истина;
		
		// Всегда добавляем строку дерева верхнего уровня и добавляем соответствующую строку табличной части Условия.
		КоллекцияСтрок = ДеревоУсловия.ПолучитьЭлементы();
		НоваяСтрокаДерева              = КоллекцияСтрок.Добавить();
		НоваяСтрокаДерева.ВидСтроки    = "Условие";
		НоваяСтрокаДерева.ИД           = Строка(Новый УникальныйИдентификатор());
		НоваяСтрокаДерева.ВидСравнения = ПредопределенноеЗначение("Перечисление.бит_ВидыСравненияТрансляции.Равно");
		
		НоваяСтрокаТаблицы          = Объект.Условия.Добавить();
		НоваяСтрокаТаблицы.ИД       = НоваяСтрокаДерева.ИД;
		
		Элементы.ДеревоУсловия.ТекущаяСтрока  = НоваяСтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоУсловия.ТекущийЭлемент = Элементы.ДеревоУсловияСвойство;
		
		Элементы.ДеревоУсловия.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		
	Иначе	
		
		Если ТекущаяСтрока.ВидСтроки = "Параметр" Тогда
			
			Отказ = Истина;
			
		КонецЕсли;		
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		
		// При копировании назначим новые ИД и создадим необходимые строки в таблицах.
		ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;
		
		ТекущиеДанные.ИД   = Строка(Новый УникальныйИдентификатор());
		НоваяСтрокаТаблицы = Объект.Условия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы,ТекущиеДанные);
		
		Для каждого СтрокаДерева Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
			СтрокаДерева.ИД               = ТекущиеДанные.ИД;
			
			НоваяСтрокаТаблицы            = Объект.ПараметрыУсловий.Добавить();
			НоваяСтрокаТаблицы.ИД_Условия = СтрокаДерева.ИД;
			НоваяСтрокаТаблицы.Имя        = СтрокаДерева.Свойство;
			НоваяСтрокаТаблицы.Значение   = СтрокаДерева.Значение;
			
		КонецЦикла; 
	
	КонецЕсли;
	
	Элементы.ДеревоУсловияЗначение.ВыбиратьТип = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидСтроки = "Параметр" Тогда
		
		Отказ = Истина;
		
	Иначе
		
		// Запомним ИД удаляемой строки дерева
		мИДУдаленной = ТекущиеДанные.ИД;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловияПослеУдаления(Элемент)
	
	Если Не ПустаяСтрока(мИДУдаленной) Тогда
		
		// Удалим строки в табличных частях
		СтрОтбор = Новый Структура("ИД",мИДУдаленной);
		
		МассивСтрок = Объект.Условия.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			Объект.Условия.Удалить(СтрокаТаблицы);
			
		КонецЦикла; 	
		
		СтрОтбор = Новый Структура("ИД_Условия",мИДУдаленной);	
		
		МассивСтрок = Объект.ПараметрыУсловий.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			Объект.ПараметрыУсловий.Удалить(СтрокаТаблицы);
			
		КонецЦикла; 	
		
		мИДУдаленной = "";
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловияСвойствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;

	Если ТекущиеДанные.ВидСтроки = "Условие" Тогда
		
		РежимКонструктора = ?(Объект.КонтекстВыполнения = ПредопределенноеЗначение("Перечисление.бит_КонтекстыВыполненияПользовательскихУсловий.Процесс")
					           , "ПользовательскоеУсловие_Процесс"
							   , "ПользовательскоеУсловие");
		
		// Откроем форму конструктора произвольного условия.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектСистемы"          , Объект.ОбъектСистемы);
		ПараметрыФормы.Вставить("ВидСравнения"           , ТекущиеДанные.ВидСравнения);
		ПараметрыФормы.Вставить("ЗначениеФильтра"        , ТекущиеДанные.Значение);
		ПараметрыФормы.Вставить("ТекущееЗначениеФильтра" , ТекущиеДанные.Значение);
		ПараметрыФормы.Вставить("ОбъединениеСПоследующим", ТекущиеДанные.ОбъединениеСПоследующим);
		ПараметрыФормы.Вставить("Условие"                , ТекущиеДанные.Свойство);
		ПараметрыФормы.Вставить("Режим"                  , РежимКонструктора);
		ПараметрыФормы.Вставить("КонтекстВыполненияУсловия", Объект.КонтекстВыполнения);
		ПараметрыФормы.Вставить("Алгоритм"                 , Объект.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыКонструкторПроизвольногоУсловия", ЭтотОбъект, ТекущиеДанные); 
		ОткрытьФорму("ОбщаяФорма.бит_КонструкторПроизвольногоУсловия", ПараметрыФормы, Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		
		
	Иначе	
	
		Элементы.ДеревоУсловия.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
		
	КонецЕсли;	
		
КонецПроцедуры

// Процедура окончание открытия формы бит_КонструкторПроизвольногоУсловияУправляемая.
// 
&НаКлиенте 
Процедура ЗакрытиеФормыКонструкторПроизвольногоУсловия(РезСтруктура, ТекущиеДанные) Экспорт
	
	Если НЕ РезСтруктура = Неопределено Тогда
		
		ТекущиеДанные.Свойство                = РезСтруктура.Условие;
		Если НЕ ТекущиеДанные.ЭтоВыражение Тогда
			
			ТекущиеДанные.ВидСравнения            = РезСтруктура.ВидСравнения;
			ТекущиеДанные.Значение                = РезСтруктура.Значение;
			ТекущиеДанные.ОбъединениеСПоследующим = РезСтруктура.ОбъединениеСПоследующим;
			
		КонецЕсли; 
		
		ИменаФункций = Новый Массив;
		ИменаФункций.Добавить("Прочее.ТабЧастьСодержитЗначение");
		ИменаФункций.Добавить("СостояниеЗадачи");
		ИменаФункций.Добавить("Прочее.ДоступнаРольИсполнителя");
		ИменаФункций.Добавить("Прочее.ПозицияСодержитЗначение");
		ИменаФункций.Добавить("Прочее.ПозицияСодержитЗначениеВГруппе");
		
		Если Найти(ТекущиеДанные.Свойство,"УстановленныеВизы")>0 
			 ИЛИ НЕ ИменаФункций.Найти(ТекущиеДанные.Свойство) = Неопределено Тогда
			 
			 // Очистка параметров, которые могли остаться от предыдущей функции
			 ТекущиеДанные.ПолучитьЭлементы().Очистить();
			 СтрОтбор = Новый Структура("ИД_Условия",ТекущиеДанные.Ид);
			 МассивОчистка = Объект.ПараметрыУсловий.НайтиСтроки(СтрОтбор);
			 Для каждого СтрокаУдалить Из МассивОчистка Цикл
			 
			 	Объект.ПараметрыУсловий.Удалить(СтрокаУдалить);
			 
			 КонецЦикла; 
			 
			 СписокДопПараметры = РезСтруктура.ДополнительныеПараметры;
			 Для каждого Элемент Из СписокДопПараметры Цикл
				 
				 СтрОтбор = Новый Структура("ИД_Условия,Имя",ТекущиеДанные.Ид,Элемент.Представление);
				 МассивСтрок = Объект.ПараметрыУсловий.НайтиСтроки(СтрОтбор);
				 Если МассивСтрок.Количество() >0 Тогда
					 СтрокаПараметры          = МассивСтрок[0];
					 СтрокаПараметры.Значение = Элемент.Значение;
				 Иначе	
					 СтрокаПараметры                  = Объект.ПараметрыУсловий.Добавить();
					 СтрокаПараметры.ИД_Условия       = ТекущиеДанные.ИД;
					 СтрокаПараметры.Имя              = Элемент.Представление;
					 СтрокаПараметры.Значение         = Элемент.Значение;
				 КонецЕсли; // Нашли доп. параметр 
				 
				 СтрОтбор              = Новый Структура("ИД, Свойство, ВидСтроки", ТекущиеДанные.ИД, СтрокаПараметры.Имя, "Параметр");
				 СтрокаДереваПараметры = бит_РаботаСКоллекциямиКлиентСервер.НайтиЭлементДерева(ТекущиеДанные.ПолучитьЭлементы(), СтрОтбор);
				 
				 Если СтрокаДереваПараметры = Неопределено Тогда
					 
					 СтрокаДереваПараметры = ТекущиеДанные.ПолучитьЭлементы().Добавить();
					 СтрокаДереваПараметры.ВидСтроки = "Параметр";
					 
				 КонецЕсли; 
				 
				 СтрокаДереваПараметры.ИД           = СтрокаПараметры.ИД_Условия;
				 СтрокаДереваПараметры.ВидСтроки    = "Параметр";												
				 СтрокаДереваПараметры.Свойство     = СтрокаПараметры.Имя;
				 СтрокаДереваПараметры.Значение     = СтрокаПараметры.Значение;
				 СтрокаДереваПараметры.ВидСравнения = ПредопределенноеЗначение("Перечисление.бит_ВидыСравненияТрансляции.Равно");
				 
			 КонецЦикла; // По доп. параметрам
		
		КонецЕсли; 
		
	Элементы.ДеревоУсловия.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
		
	КонецЕсли; // НЕ РезСтруктура = НЕОПРЕДЕЛЕНО
	
КонецПроцедуры // ЗакрытиеФормыКонструкторПроизвольногоУсловия()

&НаКлиенте
Процедура ДеревоУсловияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;
	
	ОкончаниеРедактированияСтрокиДереваУсловий(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;
		
	Если ТекущиеДанные.Значение = Неопределено Тогда
		
		Если Не Элемент.ВыбиратьТип Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Выберем чем заполнять
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить("Выражение");
			СписокВыбора.Добавить("Значение");
			
			ДопПараметры = Новый Структура("Элемент", Элемент);
			ОповещениеВыбора_ДеревоУсловияЗначения = Новый ОписаниеОповещения("ОповещениеВыбора_ДеревоУсловияЗначения", ЭтотОбъект, ДопПараметры);
			ПоказатьВыборИзСписка(ОповещениеВыбора_ДеревоУсловияЗначения, СписокВыбора, Элемент);
			
		КонецЕсли;
				
	ИначеЕсли ТекущиеДанные.ЭтоВыражение Тогда	// если заполнено выражение открываем конструктор условия
			
		СтандартнаяОбработка = Ложь;
		ОткрытьКонструкторУсловия();
		
	Иначе
		
		Элемент.ВыбиратьТип = Ложь;
		ВыбратьЗначенияПараметровФункции(ТекущиеДанные, СтандартнаяОбработка, Элемент);
			
	КонецЕсли; 
	
КонецПроцедуры // ДеревоУсловияЗначениеНачалоВыбора()

// Процедура обработчик оповещения "ОповещениеВыбора_ДеревоУсловияЗначения".
// 
// Параметры:
// ВыбЗначение 	- Строка
// ДопПараметры - Структура
// 
&НаКлиенте
Процедура ОповещениеВыбора_ДеревоУсловияЗначения(ВыбЗначение, ДопПараметры) Экспорт

	Если ВыбЗначение <> Неопределено Тогда
		
		Если ВыбЗначение.Значение = "Выражение" Тогда
			
			ОткрытьКонструкторУсловия();
			
		ИначеЕсли ВыбЗначение.Значение = "Значение" Тогда
			
			ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;
			Если ТекущиеДанные.Значение = Неопределено Тогда
				ТекущиеДанные.ЭтоВыражение 		 = Ложь;
				ДопПараметры.Элемент.ВыбиратьТип = Истина;
			КонецЕсли;
		
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры // ОповещениеВыбора_ДеревоУсловияЗначения()

// Процедура открывает конструктор условия
//
&НаКлиенте
Процедура ОткрытьКонструкторУсловия()

	ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;
	
	// Откроем форму конструктора произвольного условия
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектСистемы", Объект.ОбъектСистемы);
	ПараметрыФормы.Вставить("Условие"      , ТекущиеДанные.Значение);
	ПараметрыФормы.Вставить("Режим"        , "ПользовательскоеУсловие_Выражение");
	ПараметрыФормы.Вставить("КонтекстВыполненияУсловия", Объект.КонтекстВыполнения);
	
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ДопПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	Оповещение = Новый ОписаниеОповещения("ОткрытьКонструкторУсловияЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.бит_КонструкторПроизвольногоУсловия", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОкна);
	
КонецПроцедуры // ОткрытьКонструкторУсловия()

// Процедура обработчик оповещения "ОткрытьКонструкторУсловияЗавершение".
// 
// Параметры:
// РезСтруктура - Структура
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОткрытьКонструкторУсловияЗавершение(РезСтруктура, ДополнительныеДанные) Экспорт
	
	Если РезСтруктура <> Неопределено Тогда
		
		ДополнительныеДанные.ТекущиеДанные.Значение  = РезСтруктура.Условие;
		ДополнительныеДанные.ТекущиеДанные.ЭтоВыражение = Истина;
		
	КонецЕсли;				
	
КонецПроцедуры	// ОткрытьКонструкторУсловияЗавершение

&НаКлиенте
Процедура ДеревоУсловияЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;
	ТекущиеДанные.Значение = Неопределено;
	
	Элемент.ВыбиратьТип = Ложь;
	
КонецПроцедуры

// Процедура обеспечивает возможность выбора из списков параметров функции.
// 
// Параметры:
//  ТекущиеДанные - СтрокаДереваЗначений.
// 
&НаКлиенте
Процедура ВыбратьЗначенияПараметровФункции(ТекущиеДанные, СтандартнаяОбработка, Элемент)
	
	// Выбираем значения параметров функции	
	СписокДляВыбора = Неопределено;	
	Если ТекущиеДанные.Свойство = "ИмяТабЧасти" Тогда
		
		// Выбираем параметр "ИмяТабЧасти" функции ТабЧастьСодержитЗначение.
		СписокДляВыбора = ПодготовитьСписокВыбора("СписокТабЧастей");
		
	ИначеЕсли ТекущиеДанные.Свойство = "ИмяРеквизита" Тогда	   
		
		// Выбираем параметр "ИмяРеквизита" функции ТабЧастьСодержитЗначение.
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИД",ТекущиеДанные.ИД);
		СтрОтбор.Вставить("Свойство","ИмяТабЧасти");
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если НЕ Родитель = Неопределено Тогда
			
			Если Найти(Родитель.Свойство, "ТабЧастьСодержитЗначение") > 0 Тогда
			
				ТекЭлемент = бит_РаботаСКоллекциямиКлиентСервер.НайтиЭлементДерева(Родитель.ПолучитьЭлементы(), СтрОтбор);
				
				Если НЕ ТекЭлемент = Неопределено Тогда
					
					СписокДляВыбора = ПодготовитьСписокВыбора("СписокРеквизитовТабЧасти", ТекЭлемент.Значение);
					
				КонецЕсли;
				
			ИначеЕсли Найти(Родитель.Свойство, "ПозицияСодержитЗначение") > 0 Тогда	
				
					СписокДляВыбора = ПодготовитьСписокВыбора("СписокРеквизитовПозиции");
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 	
	
	Если НЕ СписокДляВыбора = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДопПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
		Оповещение = Новый ОписаниеОповещения("ВыборПараметровФункцииЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВыборИзСписка(Оповещение, СписокДляВыбора);
			
	Иначе
		
		Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СправочникСсылка.бит_уп_ТочкиАлгоритмов") Тогда
			
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Алгоритм", Объект.Алгоритм);
			
			ОткрытьФорму("Справочник.бит_уп_ТочкиАлгоритмов.ФормаВыбора", ПараметрыФормы, Элемент);
			
		КонецЕсли; 
		
	КонецЕсли; // НЕ СписокДляВыбора = Неопределено
	
	
КонецПроцедуры // ВыбратьЗначенияПараметровФункции()

// Процедура обработчик оповещения "ВыборПараметровФункцииЗавершение".
// 
// Параметры:
// ВыбЗначение - ЭлементСпискаЗначений.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВыборПараметровФункцииЗавершение(ВыбЗначение, ДополнительныеДанные) Экспорт

	Если НЕ ВыбЗначение = Неопределено Тогда
		
		ДополнительныеДанные.ТекущиеДанные.Значение = ВыбЗначение.Представление;
		
		Если ДополнительныеДанные.ТекущиеДанные.Свойство = "ИмяРеквизита" Тогда
			
			// Приведем тип значения параметра "Значение" функции ТабЧастьСодержитЗначение.
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ИД",ДополнительныеДанные.ТекущиеДанные.ИД);
			СтрОтбор.Вставить("Свойство","Значение");
			
			Родитель = ДополнительныеДанные.ТекущиеДанные.ПолучитьРодителя();
			
			Если НЕ Родитель = Неопределено Тогда
				
				ТекЭлемент = бит_РаботаСКоллекциямиКлиентСервер.НайтиЭлементДерева(Родитель.ПолучитьЭлементы(), СтрОтбор);
				
				Если НЕ ТекЭлемент = Неопределено Тогда
					
					ТекЭлемент.Значение = ВыбЗначение.Значение.ПривестиЗначение(ТекЭлемент.Значение);
					
				КонецЕсли; 
				
			КонецЕсли; // Родитель есть
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПараметровФункцииЗавершение

// Функция готовит список выбора.
// 
// Параметры:
//   Режим - Строка
//   Параметр - Произвольный
// 
// Возвращаемое значение:
//  СписокДляВыбора - СписокЗначений.
// 
&НаСервере
Функция ПодготовитьСписокВыбора(Режим, Параметр = Неопределено)
	
	СписокДляВыбора = Новый СписокЗначений;
	
	Если Режим = "СписокТабЧастей" Тогда
		
		СписокДляВыбора = Справочники.бит_ПользовательскиеУсловия.СформироватьСписокТабЧастей(Объект.ОбъектСистемы);
		
	ИначеЕсли Режим = "СписокРеквизитовТабЧасти" Тогда
		
		// Параметр - Имя таб. части
		СписокДляВыбора = Справочники.бит_ПользовательскиеУсловия.СформироватьСписокРеквизитовТабЧасти(Объект.ОбъектСистемы,Параметр);
		
	ИначеЕсли Режим = "СписокРеквизитовПозиции" Тогда	
		
		СписокДляВыбора = Справочники.бит_ПользовательскиеУсловия.СформироватьСписокРеквизитовПозиции(Объект.ОбъектСистемы);
	
	КонецЕсли; 
	
	Возврат СписокДляВыбора;
	
КонецФункции // ПодготовитьСписокВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПроверить(Команда)
	
	ПроверитьУсловие();	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьКод(Команда)
	
    ОбновитьКод();	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

// Процедура кэширует значения, необходимые для работы на клиенте. 
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	ДоступныеВидыОбъектов = Новый СписокЗначений;
	ДоступныеВидыОбъектов.Добавить(Перечисления.бит_ВидыОбъектовСистемы.Документ);
	ДоступныеВидыОбъектов.Добавить(Перечисления.бит_ВидыОбъектовСистемы.Справочник);
	ДоступныеВидыОбъектов.Добавить(Перечисления.бит_ВидыОбъектовСистемы.Задача);
	
	фКэшЗначений.Вставить("ДоступныеВидыОбъектов", ДоступныеВидыОбъектов);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоПроцесс = ?(Объект.КонтекстВыполнения = Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.Процесс, Истина, Ложь);
	
	Элементы.Алгоритм.Доступность      = ЭтоПроцесс;
	Элементы.ОбъектСистемы.Доступность = НЕ ЭтоПроцесс;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура обрабатывает изменение контекста выполнения. 
// 
&НаСервере
Процедура КонтекстВыполненияИзменение()

	Если Объект.КонтекстВыполнения = Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.Процесс Тогда
	
		 Объект.ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.БизнесПроцессы.бит_уп_Процесс);
	
	КонецЕсли; 
	
 	УстановитьВидимость();

КонецПроцедуры // КонтекстВыполненияИзменение()

// Процедура обрабатывает изменение объекта системы. 
// 
&НаСервере
Процедура ОбъектСистемыИзменение(Отказ)
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) 
		И фКэшЗначений.ДоступныеВидыОбъектов.НайтиПоЗначению(Объект.ОбъектСистемы.ВидОбъекта) = Неопределено Тогда
		
		ТекстСообщения =  НСтр("ru='Объекты системы вида ""%1"" не доступны для выбора.';en='Objects of the type system ""%1"" is not available for selection.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектСистемы, "ВидОбъекта")); 
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Отказ = Истина;
		
	КонецЕсли; 	
	
КонецПроцедуры // ОбъектСистемыИзменение()

// Процедура обрабатывает изменение произвольного условия.
// 
&НаСервере
Процедура ПроизвольноеУсловиеИзменение()

	ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_ПользовательскиеУсловия"));	
	Объект.КодУсловия = ТекущийОбъект.СформироватьТекстУсловия();
	фКодУсловия = Справочники.бит_ПользовательскиеУсловия.СформироватьПредставлениеКодаПользовательскогоУсловия(Объект.Условия,Объект.КодУсловия);	

КонецПроцедуры // ПроизвольноеУсловиеИзменение()

// Выполняет синтаксический контроль кода условия. 
// 
&НаСервере
Процедура ПроверитьУсловие()

  ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_ПользовательскиеУсловия"));
  ТекущийОбъект.КодУсловия = ТекущийОбъект.СформироватьТекстУсловия();
  ТекущийОбъект.ПроверитьУсловие("Все");

КонецПроцедуры // ПроверитьУсловие()

// Процедура обновляет код условия. 
// 
&НаСервере
Процедура ОбновитьКод()
	
	ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_ПользовательскиеУсловия"));	
	Объект.КодУсловия = ТекущийОбъект.СформироватьТекстУсловия();
	
КонецПроцедуры // ОбновитьКод()

// Процедура заполняет дерево условий по табличным частям условий и параметров.
// 
&НаСервере
Процедура ЗаполнитьДеревоУсловий()
	
	ДеревоУсловия.ПолучитьЭлементы().Очистить();
	
	ДеревоВрем = ДанныеФормыВЗначение(ДеревоУсловия, Тип("ДеревоЗначений"));
	
	Для каждого СтрокаТаблицы Из Объект.Условия Цикл
		
		СтрокаДереваУсловия = ДеревоВрем.Строки.Добавить();
		СтрокаДереваУсловия.ВидСтроки = "Условие";
		
		ЗаполнитьЗначенияСвойств(СтрокаДереваУсловия,СтрокаТаблицы);
		
		СтрОтбор = Новый Структура("ИД_Условия",СтрокаТаблицы.ИД);
		
		МассивСтрокПараметров = Объект.ПараметрыУсловий.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрокПараметров.Количество() > 0  Тогда
			
			Для каждого СтрокаПараметр Из МассивСтрокПараметров Цикл
				
				СтрокаДереваПараметр = СтрокаДереваУсловия.Строки.Добавить();
				СтрокаДереваПараметр.Свойство = СтрокаПараметр.Имя;
				СтрокаДереваПараметр.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.Равно;
				СтрокаДереваПараметр.ВидСтроки = "Параметр";
				СтрокаДереваПараметр.ИД        = СтрокаПараметр.ИД_Условия;
				СтрокаДереваПараметр.Значение  = СтрокаПараметр.Значение;
				
			КонецЦикла; // По параметрам условия
			
		КонецЕсли;// 
		
	КонецЦикла; // По таблице условий

	ЗначениеВДанныеФормы(ДеревоВрем, ДеревоУсловия);
	
КонецПроцедуры // ЗаполнитьДеревоУсловий()

&НаКлиенте
Процедура ОкончаниеРедактированияСтрокиДереваУсловий(ТекущиеДанные)

	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	// Синхронизируем значения в строках табличных частей и в дереве.
	Если ТекущиеДанные.ВидСтроки = "Параметр" Тогда
		
		СтрОтбор = Новый Структура("ИД_Условия,Имя",ТекущиеДанные.ИД,ТекущиеДанные.Свойство);
		
		МассивСтрок = Объект.ПараметрыУсловий.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			 СтрокаПараметры            = МассивСтрок[0];
			 СтрокаПараметры.Значение   = ТекущиеДанные.Значение;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ТекущиеДанные.ВидСтроки = "Условие" Тогда
	
		СтрОтбор = Новый Структура("ИД",ТекущиеДанные.ИД);
		
		МассивСтрок = Объект.Условия.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
		
			 СтрокаУсловия = МассивСтрок[0];
			 ЗаполнитьЗначенияСвойств(СтрокаУсловия,ТекущиеДанные);
		
		КонецЕсли; 
	
	КонецЕсли; 


КонецПроцедуры // ОкончаниеРедактированияСтрокиДереваУсловий()

#КонецОбласти
