#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
	
// Функция формирует список реквизитов.
// 
// Параметры:
//  ТекОбъектСистемы - СправочникСсылка.бит_ОбъектыСистемы.
//  ИмяТабЧасти      - Строка - имя таблицы.
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
Функция СформироватьСписокРеквизитовТабЧасти(ТекОбъектСистемы, ИмяТабЧасти)   Экспорт

	РезСписок = Неопределено;
	
	Если ЗначениеЗаполнено(ТекОбъектСистемы) Тогда
		РезСписок = Новый СписокЗначений;
		СтрИмен = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ТекОбъектСистемы.ИмяОбъектаПолное);
		МетаОбъект = Метаданные[СтрИмен.ИмяКоллекции][СтрИмен.ИмяОбъекта];
		МетаТабЧасть = МетаОбъект.ТабличныеЧасти.Найти(ИмяТабЧасти);
		Если НЕ МетаТабЧасть = Неопределено Тогда
			 Для Каждого МетаРеквизит Из МетаТабЧасть.Реквизиты Цикл
			 	  РезСписок.Добавить(МетаРеквизит.Тип, МетаРеквизит.Имя);
			 КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 

	Возврат РезСписок;
	
КонецФункции

// Функция формирует список табличных частей данного объекта системы.
// 
// Параметры:
//  ТекОбъектСистемы - СправочникСсылка.бит_ОбъектыСистемы.
// 
// Возвращаемое значение:
//  СписокТабЧастей - СписокЗначений.
// 
Функция СформироватьСписокТабЧастей(ТекОбъектСистемы)  Экспорт
	
	СписокТабЧастей = Неопределено;
	
	Если ЗначениеЗаполнено(ТекОбъектСистемы) Тогда
	    СписокТабЧастей = Новый СписокЗначений;		
		СтрИмен = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ТекОбъектСистемы.ИмяОбъектаПолное);
		МетаОбъект = Метаданные[СтрИмен.ИмяКоллекции][СтрИмен.ИмяОбъекта];
		Для Каждого МетаТабЧасть Из МетаОбъект.ТабличныеЧасти Цикл
			СписокТабЧастей.Добавить(МетаТабЧасть.Имя, МетаТабЧасть.Имя);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат СписокТабЧастей;
	
КонецФункции

// Функция вычисляет значение пользовательского условия.
// 
// Параметры:
//  ПользовательскоеУсловие  - СправочникСсылка.бит_ПользовательскиеУсловия.
//  СтруктураКонтекст        - Структура.
//  ВыражениеКорректно       - Булево - признак того, что выражения условия корректно.
//  Заголовок      - Строка
//  РежимСообщений - Строка: "Нет","Все","Ошибки".
// 
// Возвращаемое значение:
//   флРезультат   - Булево
// 
Функция ПроверитьПользовательскоеУсловие(ПользовательскоеУсловие
	                                      ,СтруктураКонтекст
										  ,ВыражениеКорректно = Истина
										  ,Заголовок = ""
										  ,РежимСообщений = "Ошибки") Экспорт

	УстановитьПривилегированныйРежим(Истина);									  
										  
	Результат          = Ложь;
	ВыражениеКорректно = Истина;
	
	ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);
	
	УсловиеОбъектСистемы = Справочники.бит_ОбъектыСистемы.ПустаяСсылка();
	КодУсловия           = "";
	ВидОбъекта           = "";
	Если НЕ ПользовательскоеУсловие = Неопределено Тогда
		Если ТипЗнч(ПользовательскоеУсловие) = Тип("СправочникОбъект.бит_ПользовательскиеУсловия") Тогда
			УсловиеОбъектСистемы = ПользовательскоеУсловие.ОбъектСистемы;
			КодУсловия           = ПользовательскоеУсловие.КодУсловия;
			ВидОбъекта           = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УсловиеОбъектСистемы, "ВидОбъекта");
		Иначе
			РеквизитыУсловия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПользовательскоеУсловие, "ОбъектСистемы, КодУсловия, ОбъектСистемы.ВидОбъекта");
			УсловиеОбъектСистемы = РеквизитыУсловия.ОбъектСистемы;
			КодУсловия           = РеквизитыУсловия.КодУсловия;
			ВидОбъекта           = РеквизитыУсловия.ОбъектСистемыВидОбъекта;
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураКонтекст.ТекущийОбъект = Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		ВыражениеКорректно = Ложь;
		Если ЗначениеЗаполнено(УсловиеОбъектСистемы) Тогда
			Шаблон 		   = НСтр("ru='Перед записью пользовательского условия, необходимо ввести хотя бы один %1: %2';en='Before recording the user conditions, you must enter at least one %1 %2'");
			ТекстСообщения = СтрШаблон(Шаблон, ВидОбъекта, УсловиеОбъектСистемы);
		КонецЕсли; 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Результат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(УсловиеОбъектСистемы) Тогда
		
		// Подготовка к вычислению пользовательского условия.
		ПроверятьОбъектСистемы = Истина;
		
		// Заполнение соответствие значений 
		Значения = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ПользовательскоеУсловие.Условия Цикл
			Значения.Вставить(СтрокаТаблицы.ИД,СтрокаТаблицы.Значение);
			Если СтрСравнить(СтрокаТаблицы.Свойство, "Прочее.ДоступнаРольИсполнителя")=0 Тогда
				ПроверятьОбъектСистемы = Ложь;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ПроверятьОбъектСистемы Тогда
			ОбъектСистемы = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъекта", СтруктураКонтекст.ТекущийОбъект.Ссылка.Метаданные().Имя);
			Если УсловиеОбъектСистемы <> ОбъектСистемы Тогда
				Возврат Результат;
			КонецЕсли; 
		КонецЕсли; 
		
		// Заполнение параметров условия
		ПараметрыУсловия = Новый Структура;
		Для Каждого ТекущаяСтрока Из ПользовательскоеУсловие.ДополнительныеПараметры Цикл
			Если НЕ ПараметрыУсловия.Свойство(ТекущаяСтрока.Имя) Тогда
				ПараметрыУсловия.Вставить(ТекущаяСтрока.Имя,ТекущаяСтрока.Значение);
			Иначе	
				ПараметрыУсловия[ТекущаяСтрока.Имя] = ТекущаяСтрока.Значение;
			КонецЕсли; 
		КонецЦикла; 
		
		// Дополнение контекста динамически вычисляемыми своствами.
		ДополнитьКонтекст(ПользовательскоеУсловие, СтруктураКонтекст);
		
		// Вычисление значений функций работы с визами, ТабЧастьСодержитЗначение, СостояниеЗадачи.
		ВычислитьЗначенияПредопределенныхФункций(ПользовательскоеУсловие, СтруктураКонтекст);
		
		// Проверочный вариант кода условия
		Если СтруктураКонтекст.Свойство("КодУсловияПроверочный") Тогда
			КодУсловия = СтруктураКонтекст.КодУсловияПроверочный;
		КонецЕсли; 
		
		// Вычисление условия
		Статус = Неопределено;
		СтруктураКонтекст.Свойство("Статус", Статус);
		Попытка			
			Результат = Вычислить(КодУсловия);
		Исключение
			ВыражениеКорректно = Ложь;
			Если ВыводитьОшибки Тогда
				Заголовок = СтрШаблон(НСтр("ru='Вычисление пользовательского условия ""%1"":';en='The calculation of the user ""%1"" conditions:'"), ПользовательскоеУсловие);
	            КодУсловияПредставление = СформироватьПредставлениеКодаПользовательскогоУсловия(
											ПользовательскоеУсловие.Условия, КодУсловия);
				
				ТекстСообщения = "Ошибка:"
				                 +ОписаниеОшибки()
				                 +Символы.ПС
								 +"Код условия:"
								 +КодУсловияПредставление;
								 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПользовательскоеУсловие);
			КонецЕсли; 
		КонецПопытки; 
	КонецЕсли; 
	
	Если СтруктураКонтекст.Свойство("УстановленныеВизы") Тогда
		 СтруктураКонтекст.Удалить("УстановленныеВизы");
	КонецЕсли; 
	 
	Если СтруктураКонтекст.Свойство("ОплатаЗаявки") Тогда
		 СтруктураКонтекст.Удалить("ОплатаЗаявки");
	КонецЕсли;  

	УстановитьПривилегированныйРежим(Ложь);									  
	
	Возврат Результат;
	
КонецФункции

// Функция формирует представление пользовательского условия.
// ИД значений заменяются на представления.
// 
// Параметры:
//  ПользовательскоеУсловие  - СправочникСсылка.бит_ПользовательскиеУсловия.
//  Значения  - Соответствие.
// 
// Возвращаемое значение:
//   СтрРезультат   - Строка.
// 
Функция СформироватьПредставлениеКодаПользовательскогоУсловия(ТаблицаУсловия,КодУсловия) Экспорт
	
	СтрРезультат = КодУсловия;
	Для Каждого СтрокаТаблицы Из ТаблицаУсловия Цикл
		СтрКЗамене = "Значения["""+СтрокаТаблицы.ИД+"""]";
		СтрРезультат = СтрЗаменить(СтрРезультат,СтрКЗамене,""""+Строка(СтрокаТаблицы.Значение)+"""");
	КонецЦикла; 
	
	Возврат СтрРезультат;
	
КонецФункции

// Функция получает значение параметра пользовательского условия.
// 
// Параметры:
//  ПараметрыУсловий  - ТабличнаяЧасть.
//  ИД_Условия  - Строка.
//  Имя         - Строка.
//  ЗначениеПоУмолчанию - Произвольный.
// 
// Возвращаемое значение:
//   ПараметрУсловия   - Произвольный.
// 
Функция ПолучитьПараметрУсловия(ПараметрыУсловий,ИД_Условия,Имя,ЗначениеПоУмолчанию) Экспорт

	СтрОтбор    = Новый Структура("ИД_Условия,Имя",ИД_Условия,Имя);
	МассивСтрок = ПараметрыУсловий.НайтиСтроки(СтрОтбор);
	Если МассивСтрок.Количество()>0 Тогда
		ПараметрУсловия = МассивСтрок[0].Значение;
	Иначе	 
		ПараметрУсловия = ЗначениеПоУмолчанию;
	КонецЕсли; 

	Возврат ПараметрУсловия;
	
КонецФункции
	
// Функция формирует список реквизитов.
//
// Параметры:
//  ТекОбъектСистемы - СправочникСсылка.бит_ОбъектыСистемы
//  ИмяТабЧасти      - Строка
//
// Возвращаемое значение:
//  Результат - Строка.
//
Функция СформироватьСписокРеквизитовПозиции(ТекОбъектСистемы) Экспорт

	// Для совместимости с ЕРП.
	
КонецФункции

// Функция определяет, есть ли в позициях документа 
// планирования указанные значения указанного реквизита.
//
// Параметры:
//  ТекущийОбъект - ДокументОбъект, ДокументСсылка 
//  ИмяРеквизита - Строка
//  ТекущееЗначение - Произвольный
//
// Возвращаемое значение:
//  Результат - Строка.
//
Функция ПозицияСодержитЗначение(ТекущийОбъект, ИмяРеквизита, ТекущееЗначение) Экспорт
	
	// Для совместимости с ЕРП.

КонецФункции

// Функция определяет, есть ли в позициях документа 
// планирования указанные значения указанного реквизита.
//
// Параметры:
//  ТекущийОбъект - ДокументОбъект, ДокументСсылка 
//  ИмяРеквизита - Строка
//  ТекущееЗначение - Произвольный
//
// Возвращаемое значение:
//  Результат - Строка.
//
Функция ПозицияСодержитЗначениеВГруппе(ТекущийОбъект, ИмяРеквизита, ТекущееЗначение) Экспорт
	
	// Для совместимости с ЕРП.

КонецФункции

// Заполняет табличную часть РолеваяАдресация и вид пользовательского условия
//  в соответствии со значениями ТЧ Условия.
//
// Параметры:
//  ТекущийОбъект - СправочникОбъект.бит_ПользовательскиеУсловия
//
Процедура АктуализироватьДанныеРолевойАдресации(ТекущийОбъект) Экспорт
	
	ТЧРолеваяАдресация = ТекущийОбъект.РолеваяАдресация;
	ТЧРолеваяАдресация.Очистить();
	
	ЕстьУсловияРолевойАдресации = Ложь;
	ЕстьПрочиеУсловия           = Ложь;
	Для каждого СтрокаУсловия Из ТекущийОбъект.Условия Цикл
		Если СтрокаУсловия.Свойство = "Прочее.ДоступнаРольИсполнителя" Тогда
			РольИсполнителя = ПолучитьПараметрУсловия(ТекущийОбъект.ПараметрыУсловий
														,СтрокаУсловия.ИД
														,"Роль"
														,Неопределено);
			Если ЗначениеЗаполнено(РольИсполнителя) Тогда
				СтрокаАдресации = ТЧРолеваяАдресация.Добавить();
				СтрокаАдресации.РольИсполнителя = РольИсполнителя;
				ЕстьУсловияРолевойАдресации     = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ЕстьПрочиеУсловия = Истина;
	КонецЦикла;
	
	Если ЕстьУсловияРолевойАдресации И ЕстьПрочиеУсловия Тогда
		ВидУсловия = Перечисления.бит_ВидыПользовательскихУсловий.Смешанный;
	ИначеЕсли ЕстьУсловияРолевойАдресации Тогда
		ВидУсловия = Перечисления.бит_ВидыПользовательскихУсловий.РолеваяАдресация;
	Иначе
		ВидУсловия = Перечисления.бит_ВидыПользовательскихУсловий.Прочее;
	КонецЕсли;
	
	ТекущийОбъект.ВидПользовательскогоУсловия = ВидУсловия;
	
КонецПроцедуры

// Обработчик обновления версии 3.1.45.
// См. документацию БСП - Отложенное обновление больших архивов данных.
//
// Параметры:
//  Параметры - Структура - содержит необходимый для последующей обработки признак ОбработкаЗавершена.
Процедура АктуализироватьИсторическиеДанныеРолевойАдресацииПриОбновлении(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СпрУсловия.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтарыеЗначенияПараметров
	|ИЗ
	|	Справочник.бит_ПользовательскиеУсловия КАК СпрУсловия
	|ГДЕ
	|	НЕ СпрУсловия.ЭтоГруппа
	|	И СпрУсловия.ВидПользовательскогоУсловия = ЗНАЧЕНИЕ(Перечисление.бит_ВидыПользовательскихУсловий.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	ВыборкаЭлементов = РезультатЗапроса.Выбрать();
	Пока ВыборкаЭлементов.Следующий() Цикл
		СсылкаНаЭлемент = ВыборкаЭлементов.Ссылка;
		Попытка
			СправочникОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
			АктуализироватьДанныеРолевойАдресации(СправочникОбъект);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			// Если не удалось обработать, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = СтрШаблон("ru = 'Не удалось установить вид пользовательского условия %1 по причине:
							|%2';
							|en = 'Cant match type of user condition %1. Reason:
							|%2'", СсылкаНаЭлемент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = НСтр(ТекстСообщения);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации()
									, УровеньЖурналаРегистрации.Предупреждение
									, Метаданные.Справочники.бит_ПользовательскиеУсловия, СсылкаНаЭлемент, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 Тогда
		ТекстСообщения = СтрШаблон("ru = 'Процедуре ПеренестиЗначенийПроизвольныхПоказателей
									|не удалось перенести записи для некоторых произвольных параметров (пропущены): %1';
									|en = 'The update procedure skipped processing of some user conditions (missed): %1'",
									ПроблемныхОбъектов);
		ТекстСообщения = НСтр(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = СтрШаблон("ru = 'Процедура ПеренестиЗначенийПроизвольныхПоказателей
							|обработала очередную порцию значений произвольных показателей: %1';
							|en = 'The update procedure successfully converted new part of user conditions"": %1'",
									ОбъектовОбработано);
		ТекстСообщения = НСтр(ТекстСообщения);
		ТекстСообщения = НСтр(ТекстСообщения);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.бит_ПользовательскиеУсловия,,
			ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 	

#Область СлужебныеПроцедурыИФункции

// Функция определяет какой объект необходимо передавать в функцию для проверки.
//
// Параметры:
//   ТекущийОбъект - ДокументОбъект
//
// Возвращаемое значение:
//  ОбъектПроверки - Произвольный.
//
Функция ОпределитьОбъектПроверки(ТекущийОбъект)

	МетаОбъект = ТекущийОбъект.Метаданные();
	
	Если МетаОбъект.Имя = "бит_кзн_ПлатежнаяПозиция" 
		ИЛИ МетаОбъект.Имя = "бит_кзн_ПозицияПоступления" Тогда
		
		ОбъектПроверки = ТекущийОбъект.ДокументПланирования;
	Иначе	
		ОбъектПроверки = ТекущийОбъект.Ссылка;
	КонецЕсли; 											
	
	Возврат ОбъектПроверки;
	
КонецФункции

// Процедура дополняет контекст вычисления пользовательского условия динамически вычисляемыми значениями.
// 
// Параметры:
//  ПользовательскоеУсловие   - СправочникСсылка.бит_ПользовательскиеУсловия.
//  СтруктураКонтекст         - Структура.
// 
Процедура ДополнитьКонтекст(ПользовательскоеУсловие, СтруктураКонтекст)
    
    КодУсловия = ПользовательскоеУсловие.КодУсловия;
    
	// Заполним статус.
    Если НЕ СтруктураКонтекст.Свойство("Статус") И Найти(КодУсловия, "СтруктураКонтекст.Статус") <> 0 Тогда
		// Получаем статус и дату изменения статуса для документа.
		РезСтруктура = бит_Визирование.ПолучитьСтатусОбъекта(СтруктураКонтекст.ТекущийОбъект.Ссылка);		
		Статус 		  = ?(ЗначениеЗаполнено(РезСтруктура.Статус)
							, РезСтруктура.Статус
							, Справочники.бит_СтатусыОбъектов.ПустаяСсылка());
                            
        СтруктураКонтекст.Вставить("Статус", Статус);
	КонецЕсли; 
	
	// Заполним структуру прочее.
	Если НЕ СтруктураКонтекст.Свойство("Прочее") И Найти(КодУсловия, "СтруктураКонтекст.Прочее") <> 0 Тогда
		СтруктураПрочее = Новый Структура;
		Если СтруктураКонтекст.Свойство("ТекущийПользователь") Тогда
			СтруктураПрочее.Вставить("ТекущийПользователь", СтруктураКонтекст.ТекущийПользователь);
		Иначе	
			СтруктураПрочее.Вставить("ТекущийПользователь", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли; 
        СтруктураКонтекст.Вставить("Прочее", СтруктураПрочее);
	КонецЕсли; 
	
	// Структура оплат.
	// ++БП
	Если НЕ СтруктураКонтекст.Свойство("ОплатаЗаявки") И Найти(КодУсловия, "СтруктураКонтекст.ОплатаЗаявки") <> 0 Тогда
		Если бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(СтруктураКонтекст.ТекущийОбъект), "ДокументОбъект.бит_ЗаявкаНаРасходованиеСредств") 
			ИЛИ бит_ОбщегоНазначенияКлиентСервер.ЭтоУказанныйТип(ТипЗнч(СтруктураКонтекст.ТекущийОбъект), "ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда
			// +СБ. Широков Николай. 2014-10-03. Оптимизация
			 //СтруктураОплат = бит_Казначейство.ПолучитьОплатыПоЗаявке(СтруктураКонтекст.ТекущийОбъект.Ссылка);
			 СтруктураОплат = Новый Структура;
			 СтруктураОплат.Вставить("СуммаПлан"              , 0);
			 СтруктураОплат.Вставить("СуммаОплата"            , 0);
			 СтруктураОплат.Вставить("СуммаЗакрыта"           , 0);
			 СтруктураОплат.Вставить("Разность"               , 0);
			 СтруктураОплат.Вставить("СуммаДокументаПлан"     , 0);
			 СтруктураОплат.Вставить("СуммаДокументаОплата"   , 0);
			 СтруктураОплат.Вставить("СуммаДокументаЗакрыта"  , 0);
			 СтруктураОплат.Вставить("СуммаДокументаРазность" , 0);
			 // -СБ. Широков Николай
			СтруктураКонтекст.Вставить("ОплатаЗаявки", СтруктураОплат);
		КонецЕсли;
	КонецЕсли;
    // --БП
	
	// Для процесса заполним параметры.
	Если НЕ СтруктураКонтекст.Свойство("ПараметрыПроцесса") И Найти(КодУсловия, "СтруктураКонтекст.ПараметрыПроцесса") <> 0 Тогда
		Если ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("БизнесПроцессОбъект.бит_уп_Процесс") 
			ИЛИ ТипЗнч(СтруктураКонтекст.ТекущийОбъект) = Тип("БизнесПроцессСсылка.бит_уп_Процесс") Тогда
			
			СтрПараметрыПроцесса = Новый Структура;
			Для Каждого СтрокаТаблицы Из СтруктураКонтекст.ТекущийОбъект.ПараметрыПроцесса Цикл				
				СтрПараметрыПроцесса.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение); 				
			КонецЦикла; 
			СтруктураКонтекст.Вставить("ПараметрыПроцесса", СтрПараметрыПроцесса);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура вычисляет значения функций, использованных в пользовательском условии.
// 
// Параметры:
//  ПользовательскоеУсловие  - СправочникСсылка.бит_ПользовательскиеУсловия.
//  СтруктураКонтекст         - Структура.
// 
Процедура ВычислитьЗначенияПредопределенныхФункций(ПользовательскоеУсловие, СтруктураКонтекст)
	
	УстановленныеВизы        = Новый Соответствие;
	СостояниеЗадачи          = Новый Соответствие;
	ТабЧастьСодержитЗначение = Новый Соответствие;
	ДоступнаРольИсполнителя  = Новый Соответствие;
	ЕстьКорректировкаКонтрольныхЗначений = Новый Соответствие;
	ПозСодержитЗначениеВГруппе = Новый Соответствие;
	СуммаПозиций               = Новый Соответствие;
	ДоступнаРольИсполнителя    = Новый Соответствие;
	ПозСодержитЗначение        = Новый Соответствие;
	
	Если СтруктураКонтекст.Свойство("НаборВизы") Тогда
		НаборВизы = СтруктураКонтекст.НаборВизы;
	Иначе
		НаборВизы = Неопределено;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из ПользовательскоеУсловие.Условия Цикл
		
		Если СтрокаТаблицы.Свойство = "СостояниеЗадачи" Тогда
			Точка  = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
											,СтрокаТаблицы.ИД
											,"Точка"
											,Справочники.бит_уп_ТочкиАлгоритмов.ПустаяСсылка());
			
			Состояние = Задачи.бит_уп_Задача.СостояниеЗадачиВТочке(Точка, СтруктураКонтекст.ТекущийОбъект.Ссылка);											
			СостояниеЗадачи.Вставить(СтрокаТаблицы.ИД,Состояние);																	  
			
		ИначеЕсли СтрокаТаблицы.Свойство = "Прочее.ТабЧастьСодержитЗначение" Тогда
			
			ИмяТабЧасти  = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
													,СтрокаТаблицы.ИД
													,"ИмяТабЧасти"
													,"UnrealTable");
			
			ИмяРеквизита = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
													,СтрокаТаблицы.ИД
													,"ИмяРеквизита"
													,"UnrealAttribute");
			
			ПроверяемоеЗначение  = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
															,СтрокаТаблицы.ИД
															,"Значение"
															,Неопределено);
			
			
			флСодержитЗначение = бит_ОбщегоНазначения.ТабЧастьСодержитЗначение(СтруктураКонтекст.ТекущийОбъект
																				,ИмяТабЧасти
																				,ИмяРеквизита
																				,ПроверяемоеЗначение);											
			
			ТабЧастьСодержитЗначение.Вставить(СтрокаТаблицы.ИД,флСодержитЗначение);																	  
			
		ИначеЕсли СтрокаТаблицы.Свойство = "Прочее.ПозицияСодержитЗначение" Тогда
			
			ВычислитьПозицияСодержитЗначение(ПозСодержитЗначение, ПользовательскоеУсловие, СтрокаТаблицы, СтруктураКонтекст);
			
		ИначеЕсли СтрокаТаблицы.Свойство = "Прочее.ПозицияСодержитЗначениеВГруппе" Тогда
			
			ВычислитьПозицияСодержитЗначениеВГруппе(ПозСодержитЗначениеВГруппе, ПользовательскоеУсловие, СтрокаТаблицы, СтруктураКонтекст);
			
		ИначеЕсли СтрокаТаблицы.Свойство = "Прочее.СуммаПозиций" Тогда
			
			ВычислитьСуммаПозиций(СуммаПозиций, СтрокаТаблицы, СтруктураКонтекст);
			
		ИначеЕсли СтрокаТаблицы.Свойство = "Прочее.ДоступнаРольИсполнителя" Тогда
			
			ПараметрУсловия = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
														,СтрокаТаблицы.ИД
														,"Роль"
														,Справочники.бит_РолиИсполнителей);
														
			ТекПользователь = Неопределено;
			СтруктураКонтекст.Свойство("ТекущийПользователь", ТекПользователь);
			
			Если ЗначениеЗаполнено(СтруктураКонтекст.ТекущийОбъект.Ссылка)  Тогда
				ДоступнаРольИсполнителя[СтрокаТаблицы.ИД] = бит_Визирование.ДоступнаРольИсполнителя(СтруктураКонтекст.ТекущийОбъект.Ссылка
																								,ПараметрУсловия
																								,ТекПользователь);
			Иначе	
				ДоступнаРольИсполнителя[СтрокаТаблицы.ИД] = Ложь;
			КонецЕсли; 
			
		ИначеЕсли СтрокаТаблицы.Свойство = "Прочее.ЕстьКорректировкаКонтрольныхЗначений" Тогда
			
			ЕстьКорректировка = бит_Казначейство.ЕстьКорректировкаКонтрольныхЗначений(СтруктураКонтекст.ТекущийОбъект.Ссылка);
			
			ЕстьКорректировкаКонтрольныхЗначений.Вставить(СтрокаТаблицы.ИД, ЕстьКорректировка);
			
		ИначеЕсли Найти(СтрокаТаблицы.Свойство,"УстановленныеВизы")>0 Тогда
			
			Если СтрокаТаблицы.Свойство = "УстановленныеВизы.ВсеВизыПолучены" Тогда
				
				Если УстановленныеВизы["ВсеВизыПолучены"] = Неопределено Тогда
					
					ОбъектПроверки = ОпределитьОбъектПроверки(СтруктураКонтекст.ТекущийОбъект);
					УстановленныеВизы["ВсеВизыПолучены"] = бит_Визирование.ВизыПолучены(ОбъектПроверки);
					
				КонецЕсли; 
				
			ИначеЕсли СтрокаТаблицы.Свойство = "УстановленныеВизы.ПринятоРешение" Тогда
				
				ПараметрУсловия = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
															,СтрокаТаблицы.ИД
															,"Решение"
															,Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка());
															
				ОбъектПроверки = ОпределитьОбъектПроверки(СтруктураКонтекст.ТекущийОбъект);
				УстановленныеВизы[СтрокаТаблицы.ИД] = бит_Визирование.ПринятоРешение(ОбъектПроверки
																					,НаборВизы
																					,ПараметрУсловия);
				
			ИначеЕсли СтрокаТаблицы.Свойство = "УстановленныеВизы.ПринятоРешениеПоВизе" Тогда	
				
				ПараметрУсловия = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
															,СтрокаТаблицы.ИД
															,"Виза"
															,Справочники.бит_Визы.ПустаяСсылка());
															
				ОбъектПроверки = ОпределитьОбъектПроверки(СтруктураКонтекст.ТекущийОбъект);
				УстановленныеВизы[СтрокаТаблицы.ИД] = бит_Визирование.ПринятоРешениеПоВизе(ОбъектПроверки
																							,НаборВизы
																							,ПараметрУсловия);
				
			ИначеЕсли СтрокаТаблицы.Свойство = "УстановленныеВизы.ПринятыРешенияПоВышестоящимВизам" Тогда	
				
				ПараметрУсловия = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
															,СтрокаТаблицы.ИД
															,"Виза"
															,Справочники.бит_Визы.ПустаяСсылка());
															
				ОбъектПроверки = ОпределитьОбъектПроверки(СтруктураКонтекст.ТекущийОбъект);	
				УстановленныеВизы[СтрокаТаблицы.ИД] = бит_Визирование.ПринятыРешенияПоВышестоящимВизам(ОбъектПроверки
																										, ПараметрУсловия
																										, НаборВизы);
				
				
			ИначеЕсли СтрокаТаблицы.Свойство = "УстановленныеВизы.ПринятоРешениеПоВышестоящимВизам" Тогда	
				
				ПараметрУсловия = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
															,СтрокаТаблицы.ИД
															,"Виза"
															,Справочники.бит_Визы.ПустаяСсылка());
				
				РешениеПроверки = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
															,СтрокаТаблицы.ИД
															,"Решение"
															,Справочники.бит_ВидыРешенийСогласования);

				ОбъектПроверки = ОпределитьОбъектПроверки(СтруктураКонтекст.ТекущийОбъект);
				УстановленныеВизы[СтрокаТаблицы.ИД] = бит_Визирование.ПринятоРешениеПоВышестоящимВизам(ОбъектПроверки
																										, ПараметрУсловия
																										, РешениеПроверки
																										, НаборВизы);
				
				
			Иначе	
				
				Если УстановленныеВизы[СтрокаТаблицы.ИД] = Неопределено Тогда
					
					СтатусКПроверке = ПолучитьПараметрУсловия(ПользовательскоеУсловие.ПараметрыУсловий
																,СтрокаТаблицы.ИД
																,"Статус"
																,Неопределено);
					
					УстановленныеВизы[СтрокаТаблицы.ИД] = бит_Визирование.ВизыПолучены(СтруктураКонтекст.ТекущийОбъект.Ссылка
																						,СтатусКПроверке);
					
				КонецЕсли; 
				
			КонецЕсли; // ВсеВизы или конкретный статус
			
		КонецЕсли; // Это установка виз 
		
	КонецЦикла; // По пользовательским условиям
	
	СтруктураКонтекст.Вставить("СостояниеЗадачи"         , СостояниеЗадачи);
	СтруктураКонтекст.Вставить("ТабЧастьСодержитЗначение", ТабЧастьСодержитЗначение);
	СтруктураКонтекст.Вставить("ПозицияСодержитЗначение" , ПозСодержитЗначение);
	СтруктураКонтекст.Вставить("ПозицияСодержитЗначениеВГруппе" , ПозСодержитЗначениеВГруппе);
	СтруктураКонтекст.Вставить("СуммаПозиций"            , СуммаПозиций);
	СтруктураКонтекст.Вставить("УстановленныеВизы"       , УстановленныеВизы);
	СтруктураКонтекст.Вставить("ДоступнаРольИсполнителя" , ДоступнаРольИсполнителя);
	СтруктураКонтекст.Вставить("ЕстьКорректировкаКонтрольныхЗначений", ЕстьКорректировкаКонтрольныхЗначений);
	
КонецПроцедуры

// Процедура вычисляет результат выполнения пользовательского условия по свойству "ПозицияСодержитЗначение".
//
// Параметры:
//  ПозСодержитЗначение		 - Соответствие.
//  ПользовательскоеУсловие	 - СправочникОбъект.бит_ПользовательскиеУсловия.
//  СтрокаТаблицы			 - СправочникТабличнаяЧастьСтрока.бит_ПользовательскиеУсловия.Условия.
//  СтруктураКонтекст		 - Структура.
//
Процедура ВычислитьПозицияСодержитЗначение(ПозСодержитЗначение, ПользовательскоеУсловие, СтрокаТаблицы, СтруктураКонтекст)
	
	// Для совместимости с ЕРП.
	
КонецПроцедуры

// Процедура вычисляет результат выполнения пользовательского условия по свойству "ПозицияСодержитЗначениеВГруппе".
//
// Параметры:
//  ПозСодержитЗначениеВГруппе	 - Соответствие.
//  ПользовательскоеУсловие		 - СправочникОбъект.бит_ПользовательскиеУсловия.
//  СтрокаТаблицы				 - СправочникТабличнаяЧастьСтрока.бит_ПользовательскиеУсловия.Условия.
//  СтруктураКонтекст			 - Структура.
//
Процедура ВычислитьПозицияСодержитЗначениеВГруппе(ПозСодержитЗначениеВГруппе, ПользовательскоеУсловие, СтрокаТаблицы, СтруктураКонтекст)
	
	// Для совместимости с ЕРП.
	
КонецПроцедуры

// Процедура вычисляет результат выполнения пользовательского условия по свойству "СуммаПозиций".
//
// Параметры:
//  СуммаПозиций		 - Соответствие.
//  СтрокаТаблицы		 - СправочникТабличнаяЧастьСтрока.бит_ПользовательскиеУсловия.Условия.
//  СтруктураКонтекст	 - Структура.
//
Процедура ВычислитьСуммаПозиций(СуммаПозиций, СтрокаТаблицы, СтруктураКонтекст)
	
	// Для совместимости с ЕРП.
	
КонецПроцедуры

// Функция определяет имя позиции по имени объекта.
//
// Параметры:
//  ИмяОбъекта - строка
//
// Возвращаемое значение:
//  ИмяПоз - Строка.
//
Функция ИмяПозиций(ИмяОбъекта)
	
	// Для совместимости с ЕРП.
	
КонецФункции

// Функция вычисляет сумму позиций, подчиненных документу.
//
// Параметры:
//  ТекущийОбъект - ДокументСсылка
//
// Возвращаемое значение:
//  СуммаПозиций - Число.
//
Функция ВычислитьСуммуПозиций(ТекущийОбъект)
	
	// Для совместимости с ЕРП.
	
КонецФункции

#КонецОбласти

#КонецЕсли
