#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий 

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтоГруппа Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			  ДанныеЗаполнения.Свойство("КонтекстВыполнения", ЭтотОбъект.КонтекстВыполнения);
			  ДанныеЗаполнения.Свойство("Алгоритм", ЭтотОбъект.Алгоритм);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Для каждого СтрокаТаблицы Из Условия Цикл
		Если (СтрокаТаблицы.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.ВГруппе 
			ИЛИ СтрокаТаблицы.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.НЕВГруппе) 
			И бит_ОбщегоНазначения.ЭтоПримитивныйТип(СтрокаТаблицы.Значение) Тогда
			
			Пояснение = НСтр("ru = Такой вид сравнения поддерживается только для ссылок.");
			
			Префикс = СтрШаблон("Условия[%1].", Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="));
			Поле    = Префикс + "ВидСравнения";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ", 
								НСтр("ru='Вид сравнения';en='Comparison Type'"), СтрокаТаблицы.НомерСтроки,НСтр("ru='Условия';en='Conditions'"),Пояснение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ЭтоГруппа Тогда
		Возврат;	
	КонецЕсли; 
	
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства); 
	
	КодУсловия = СформироватьТекстУсловия();
	
	Заголовок = "Проверка заполнения элемента справочника """+Метаданные().Синоним+""" ";		
	
	// Проверим заполнение полей шапки.
	СтруктураОбязательных = Новый Структура;
	СтруктураОбязательных.Вставить("КонтекстВыполнения");
	Если КонтекстВыполнения = Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.Процесс Тогда
		СтруктураОбязательных.Вставить("Алгоритм");
	Иначе
		СтруктураОбязательных.Вставить("ОбъектСистемы");
	КонецЕсли; 
	
	бит_РаботаСМетаданными.ПроверитьЗаполнениеШапки(ЭтотОбъект,СтруктураОбязательных,Отказ,Заголовок);
	
	// Проверим заполнение табличной части.
	СтруктураОбязательных = Новый Структура("Свойство,ВидСравнения");
	бит_РаботаСМетаданными.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект,"Условия",СтруктураОбязательных,Отказ,Заголовок);
	
	Справочники.бит_ПользовательскиеУсловия.АктуализироватьДанныеРолевойАдресации(ЭтотОбъект);
	
	Если НЕ Отказ И НЕ ПустаяСтрока(КодУсловия) Тогда 		
		ПроверитьУсловие("Ошибки",Отказ); 		
	КонецЕсли; 
		
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Кэш для хранения ИД.
	КэшИД = Новый Соответствие;

	Для каждого СтрокаТаблицы Из Условия Цикл
		НовыйИД = ДобавитьИД(СтрокаТаблицы.ИД,КэшИД);
		Если ЗначениеЗаполнено(НовыйИД) Тогда
			СтрокаТаблицы.ИД = НовыйИД;
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из ПараметрыУсловий Цикл
		НовыйИД = ДобавитьИД(СтрокаТаблицы.ИД_Условия,КэшИД);
		Если ЗначениеЗаполнено(НовыйИД) Тогда
			СтрокаТаблицы.ИД_Условия = НовыйИД;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция формирует код пользовательского условия.
// 
// Возвращаемое значение:
//   ТекстУсловия   - Строка.
// 
Функция СформироватьТекстУсловия() Экспорт

	ТекстУсловия = "";
	ТекстОбъединения = "";

	Для каждого СтрокаТаблицы Из Условия Цикл
		Разделитель  = ?(ПустаяСтрока(ТекстОбъединения),"",Символы.ПС);
		ТекстУсловия = ТекстУсловия + Разделитель + ТекстОбъединения + Разделитель
					 + ЭлементОтбора(СтрокаТаблицы);
					   
        ТекстОбъединения = ТекстОбъединения(СтрокаТаблицы.ОбъединениеСПоследующим);					   
	КонецЦикла; 

	Если НЕ ПустаяСтрока(ПроизвольноеУсловие) Тогда
		Разделитель  = ?(ПустаяСтрока(ТекстОбъединения),"",Символы.ПС);
		ТекстУсловия = ТекстУсловия + Разделитель + ТекстОбъединения + Разделитель
	                 + ПроизвольноеУсловие;
	КонецЕсли; 
	
	Возврат ТекстУсловия;
	
КонецФункции

// Функция получает объект по имени.
//
// Параметры:
//  ИмяОбъектаПолное  - Строка.
// 
// Возвращаемое значение:
//   ТекОбъект   - Произвольный.
//
Функция ПолучитьЛюбойОбъектПоИмени(ИмяОбъектаПолное) Экспорт

	ТекСсылка = ПолучитьЛюбуюСсылкуПоИмени(ИмяОбъектаПолное);
	
	ТекОбъект = Неопределено;
	Если ЗначениеЗаполнено(ТекСсылка) Тогда
		ТекОбъект = ТекСсылка.ПолучитьОбъект();
	КонецЕсли; 

	Возврат ТекОбъект;
	
КонецФункции

// Процедура выполняет синтаксический контроль кода условия.
// 
// Параметры:
//  РежимСообщений  - Строка - "Все","Ошибки","Нет".
// 
Процедура ПроверитьУсловие(РежимСообщений,Отказ=Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);	
	
	ПараметрыУсловия = Новый Структура;
	
	Если КонтекстВыполнения = Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.Процесс Тогда
		ПараметрыУсловия.Вставить("ТекущийОбъект",ПолучитьЛюбойОбъектПоИмени("БизнесПроцесс.бит_уп_Процесс"));
		СтрПараметрыПроцесса = Новый Структура;
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Условия Цикл
			Если Найти(СтрокаТаблицы.Свойство,"ПараметрыПроцесса.") > 0 Тогда
				 ИмяПараметра = СтрЗаменить(СтрокаТаблицы.Свойство,"ПараметрыПроцесса.","");
				 СтрПараметрыПроцесса.Вставить(ИмяПараметра, СтрокаТаблицы.Значение);
			КонецЕсли; 
		КонецЦикла; 
		ПараметрыУсловия.Вставить("ПараметрыПроцесса", СтрПараметрыПроцесса);
	Иначе	
		ПараметрыУсловия.Вставить("ТекущийОбъект",ПолучитьЛюбойОбъектПоИмени(ОбъектСистемы.ИмяОбъектаПолное));
		ПараметрыУсловия.Вставить("Статус",ПолучитьЛюбуюСсылкуПоИмени("Справочник.бит_СтатусыОбъектов"));
	КонецЕсли; 
	
	Если КонтекстВыполнения = Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.ТекущийОбъект_ТекущаяВиза Тогда
	     ПараметрыУсловия.Вставить("ТекущаяВиза",ПолучитьЛюбуюСсылкуПоИмени("Справочник.бит_Визы"));
	КонецЕсли; 
	
	флУсловиеКорректно = ЛОЖЬ;
	
	// Для выполнения проверки заменяем все И на ИЛИ, чтобы обеспечить вычисление всех условий.
	ПараметрыУсловия.Вставить("КодУсловияПроверочный",СтрЗаменить(КодУсловия," И "," ИЛИ "));
	
	бит_уп_Сервер.ПроверитьПользовательскоеУсловие(ЭтотОбъект,ПараметрыУсловия,флУсловиеКорректно,ВыводитьОшибки);
	
	Отказ = НЕ флУсловиеКорректно;
	
	Если флУсловиеКорректно и ВыводитьИнформацию Тогда
		ТекстСообщения  =  НСтр("ru = 'Синтаксических ошибок не обнаружено.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭлементОтбора(СтрокаТаблицы)

	КодВыражения = СтрокаТаблицы.СкобкаНачало
				 + ДобавитьНЕ(СтрокаТаблицы.ВидСравнения)
				 + ЛогическоеВыражение(СтрокаТаблицы)
				 + СтрокаТаблицы.СкобкаКонец;

	Возврат КодВыражения;
	
КонецФункции

Функция КодСвойства(СтрКод,ИД)
	
	флЕстьЗначениеЗаполнено = ? ( Найти(СтрКод, "ЗначениеЗаполнено(") > 0, Истина, Ложь );
	
	Если флЕстьЗначениеЗаполнено Тогда
		СтрКод = СтрЗаменить(СтрКод, "ЗначениеЗаполнено(", "");
		СтрКод = Лев(СтрКод, СтрДлина(СтрКод) - 1);
	КонецЕсли; 
	
	Если Найти(СтрКод,"УстановленныеВизы")>0 Тогда
		Если ВРег(СтрКод) = ВРег("УстановленныеВизы.ВсеВизыПолучены") Тогда
			Результат = "СтруктураКонтекст.УстановленныеВизы[""ВсеВизыПолучены""]";
		Иначе	
			Результат = "СтруктураКонтекст.УстановленныеВизы["""+ИД+"""]";
		КонецЕсли; 
	ИначеЕсли Найти(СтрКод,"ТабЧастьСодержитЗначение")>0 Тогда
		
		Результат = "СтруктураКонтекст.ТабЧастьСодержитЗначение["""+ИД+"""]";
		
	ИначеЕсли Найти(СтрКод,"ДоступнаРольИсполнителя")>0 Тогда
		
		Результат = "СтруктураКонтекст.ДоступнаРольИсполнителя["""+ИД+"""]";
		
	ИначеЕсли Найти(СтрКод,"ЕстьКорректировкаКонтрольныхЗначений")>0 Тогда
		
		Результат = "СтруктураКонтекст.ЕстьКорректировкаКонтрольныхЗначений["""+ИД+"""]";	
		
	ИначеЕсли Найти(СтрКод,"СостояниеЗадачи") > 0 Тогда
		
		Результат = "СтруктураКонтекст.СостояниеЗадачи["""+ИД+"""]";
		
	ИначеЕсли Найти(СтрКод,"ОплатаЗаявки") > 0 Тогда
		
		Результат = СтрЗаменить(СтрКод, "ОплатаЗаявки", "СтруктураКонтекст.ОплатаЗаявки");	
		
	ИначеЕсли Найти(СтрКод,"Прочее") > 0 Тогда
		
		Результат = СтрЗаменить(СтрКод, "Прочее", "СтруктураКонтекст.Прочее");
		
	ИначеЕсли Найти(СтрКод, "ПараметрыПроцесса") > 0 Тогда	
		
		Результат = СтрЗаменить(СтрКод, "ПараметрыПроцесса", "СтруктураКонтекст.ПараметрыПроцесса");
		
	Иначе
		
		Результат = СтрЗаменить(СтрКод, "ТекущийОбъект.", "СтруктураКонтекст.ТекущийОбъект.");
		
		Если Найти(Результат,"ДополнительныйРеквизит_")>0 ИЛИ Найти(Результат,"ДополнительноеСвойство_")>0 Тогда
			 Результат = "бит_МеханизмТрансляции.ЗначениеРеквизита(СтруктураКонтекст.ТекущийОбъект,"""+Результат+""")";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если флЕстьЗначениеЗаполнено Тогда
		Результат = "ЗначениеЗаполнено("+Результат+")";
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция КодЗначения(СтрокаТаблицы)  

	Если СтрокаТаблицы.ЭтоВыражение Тогда
	  Результат = КодСвойства(СтрокаТаблицы.Значение,СтрокаТаблицы.ИД);
	Иначе	
	  Результат = "Значения["""+СтрокаТаблицы.ИД+"""]";
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

Функция ЛогическоеВыражение(СтрокаТаблицы)

	Свойство    = СтрокаТаблицы.Свойство;
	КодСвойства = КодСвойства(Свойство,СтрокаТаблицы.ИД);
	КодЗначения = КодЗначения(СтрокаТаблицы);
	
	Если СтрокаТаблицы.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.ВГруппе 
	 ИЛИ СтрокаТаблицы.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.НЕВГруппе Тогда	
		
		Шаблон 	  = "бит_ОбщегоНазначения.ОбъектПодчинен(%1, %2)";
		Выражение = СтрШаблон(Шаблон, КодСвойства, КодЗначения);
		
	ИначеЕсли СтрокаТаблицы.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.Содержит 
	      ИЛИ СтрокаТаблицы.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.НеСодержит Тогда	
		  
		  Шаблон    = "бит_ОбщегоНазначения.Содержит(%1, %2)"; 
		  Выражение = СтрШаблон(Шаблон, КодСвойства, КодЗначения);
		
	ИначеЕсли СтрокаТаблицы.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.НачинаетсяС 
		  ИЛИ СтрокаТаблицы.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.НеНачинаетсяС Тогда	
		  
		  Шаблон    = "бит_ОбщегоНазначения.НачинаетсяС(%1, %2)";  
		  Выражение = СтрШаблон(Шаблон, КодСвойства, КодЗначения);
		  
	Иначе
		Шаблон    = "%1 %2 %3";
		Выражение = СтрШаблон(Шаблон, КодСвойства, СтрокаТаблицы.ВидСравнения, КодЗначения);
	КонецЕсли; 

	Возврат Выражение;

КонецФункции

Функция ДобавитьНЕ(ВидСравнения)
	
	Результат = "";
	
	Если ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.НЕВГруппе 
		ИЛИ ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.НеСодержит
		ИЛИ ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.НеНачинаетсяС Тогда
		
		Результат = " НЕ ";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОбъединения(ОбъединениеСПоследующим)

	Если ОбъединениеСПоследующим = Перечисления.бит_ТипыОбъединенияУсловий.ЛогическоеУмножение Тогда
	   Результат = "И";
	ИначеЕсли ОбъединениеСПоследующим = Перечисления.бит_ТипыОбъединенияУсловий.ЛогическоеСложение Тогда	
	   Результат = "ИЛИ";
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции

// Функция получает любую ссылку по имени объекта.
// 
// Параметры:
//  ИмяОбъектаПолное  - Строка.
// 
// Возвращаемое значение:
//   ТекСсылка   - Произвольный.
// 
Функция ПолучитьЛюбуюСсылкуПоИмени(ИмяОбъектаПолное)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТекТаблица.Ссылка
	               |ИЗ
	               |	"+ИмяОбъектаПолное+" КАК ТекТаблица
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ЗНАЧЕНИЕ("+ИмяОбъектаПолное+".ПустаяСсылка)
				   |";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ТекСсылка = Неопределено;
	Если Выборка.Следующий() Тогда
		ТекСсылка = Выборка.Ссылка;
		Если НЕ бит_рлс_Основной.СсылкаДоступна(ТекСсылка) Тогда
			ТекСсылка = Неопределено;
		КонецЕсли; 
	КонецЕсли; 

	Возврат ТекСсылка;
	
КонецФункции

// Процедура добавляет новый ИД в кэш. Используется при замене ИД при копировании.
// 
// Параметры:
//  ТекИД  - Строка.
//  Кэш    - Соответствие.
// 
Функция ДобавитьИД(ТекИД,Кэш)

	НовыйИД = "";
	НайденныйИД = Кэш[ТекИД];
	Если НайденныйИД = Неопределено Тогда
		НовыйИД = Строка(Новый УникальныйИдентификатор());
		Кэш.Вставить(ТекИД,НовыйИД);
	Иначе
		НовыйИД = НайденныйИД;
	КонецЕсли; 

	Возврат НовыйИД;
	
КонецФункции

#КонецОбласти

#КонецЕсли
