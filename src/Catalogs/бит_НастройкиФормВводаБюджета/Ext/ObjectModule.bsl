#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мНастройкиИзмерений Экспорт; // Хранит настройки дополнительных измерений.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПередЗаписью" объекта справочника.
// 
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;
	КонецЕсли; 	
	
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ДополнительныеСвойства); 	
	
	Если Не ЭтоНовый() И Не ПометкаУдаления=Ссылка.ПометкаУдаления Тогда
		// В случае установки или снятия пометки удаления не производить проверку.
		Возврат;
	КонецЕсли;	
	
    // Выполним проверку заполнения элемента справочника.
	Если НЕ ЭтоГруппа Тогда
		
		// Проверим, что есть хотя бы одно измерение со способом разворачивать.
		СтрОтбор = Новый Структура("СпособЗаполнения", Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать);
		Строки = Измерения.НайтиСтроки(СтрОтбор);
		ЕстьРазворачивать = (Строки.Количество() > 0);
		
		Если НЕ ЕстьРазворачивать Тогда
			
			ТекстСообщения =  НСтр("ru = 'Хотя бы для одного разреза бюджетирования должен быть установлен способ редактирования ""Разворачивать"".'");	
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,,СтатусСообщения.Важное);
			
		КонецЕсли; 
		
		// Должен быть указан ввод хотя бы одного показателя.
		Если НЕ Учет_Количество И НЕ Учет_Сумма Тогда
			
			ТекстСообщения =  НСтр("ru = 'Не указан ввод НИ количества НИ суммы. Следует указать ввод хотя бы одного показателя.'");
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,,СтатусСообщения.Важное);
			
		КонецЕсли; 
		
		// Сценарий всегда заполняется по умолчанию без возможности редактирования.
		СтрОтбор = Новый Структура("Имя", "Сценарий");
		Строки = Измерения.НайтиСтроки(СтрОтбор);
		Если Строки.Количество() > 0 Тогда
			
			ПерваяСтрока = Строки[0];
			
			Если ПерваяСтрока.СпособЗаполнения <> Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию Тогда
				
				ТекстСообщения =  НСтр("ru = 'Способ редактирования сценария должен быть установлен в значение ""По умолчанию без возможности редактирования"".'");
				бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,,СтатусСообщения.Важное);
				
			КонецЕсли; 
			
			Если Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет И ЗначениеЗаполнено(ПерваяСтрока.ЗначениеПоУмолчанию) Тогда
			
				СценарийПоУмолчанию = ПерваяСтрока.ЗначениеПоУмолчанию;
				
				Если СценарийПоУмолчанию.бит_Периодичность <> ПериодичностьПланирования Тогда
				
					 ТекстСообщения =  НСтр("ru = 'Не совпадает периодичность сценария по-умолчанию и периодичность построения макета!'");
					 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					 Отказ = Истина;
				
				КонецЕсли; 
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		// Проверка на двойной разворот по статьи.
	    Справочники.бит_НастройкиФормВводаБюджета.ПроверитьМножественныйРазворотПоСтатьям(Измерения, Отказ);
		
	КонецЕсли; // НЕ ЭтоГруппа. 
	
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("СправочникСсылка.бит_Бюджеты") Тогда
		ЗаполнитьПоДаннымБюджета(ДанныеЗаполнения);
	КонецЕсли;

	ЗаполнитьИзмеренияПоУмолчанию();
	ТекстЗапроса = СформироватьТекстЗапроса();
	Учет_Сумма         = Истина;
	ВыводитьОбщиеИтоги = Истина;
	Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.Динамическая;
	ДатаНачалаПланирования    = НачалоГода(ОбщегоНазначения.ТекущаяДатаПользователя());
	ДатаОкончанияПланирования = КонецГода(ОбщегоНазначения.ТекущаяДатаПользователя());
	ПериодичностьПланирования = Перечисления.бит_ПериодичностьПланирования.Месяц;
	ПродолжительностьИнтервала= 12;
	РежимОтображенияВыходныхДней = Перечисления.бит_РежимыОтображенияВыходныхДнейФормыВвода.Обычный;
	ЦветаПоУмолчанию();
	ОбъединятьЯчейки = Истина;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет Тогда
	
		 ПроверяемыеРеквизиты.Добавить("ДатаНачалаПланирования");
		 ПроверяемыеРеквизиты.Добавить("ПериодичностьПланирования");
		 ПроверяемыеРеквизиты.Добавить("ПродолжительностьИнтервала");
		 
		 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура устанавливает цвета по-умолчанию.
// 
Процедура ЦветаПоУмолчанию() Экспорт
	
	ЦветаУмолчания = Справочники.бит_НастройкиФормВводаБюджета.ЦветаПоУмолчанию();
	
	Цвет_Группа   = ЦветаУмолчания.Цвет_Группа;  // LemonChiffon.
	Цвет_Ячейка   = ЦветаУмолчания.Цвет_Ячейка;  // LightGreen.
	Цвет_Формула  = ЦветаУмолчания.Цвет_Формула; // Добавленный реквизит фон.
	Цвет_Аргумент = ЦветаУмолчания.Цвет_Аргумент;
	
КонецПроцедуры

// Сохраняет дерево данных в хранилище значения.
// 
Процедура СохранитьДерево(ТабДок) Экспорт

	ХранилищеДерева = Новый ХранилищеЗначения(ТабДок);

КонецПроцедуры

// Извлекает дерево данных из хранилища.
// 
// Возвращаемое значение:
//  ТабДок - Табличный документ.
// 
Функция ПолучитьДерево() Экспорт
	
	ТабДок = ХранилищеДерева.Получить();
	
	Если НЕ ТипЗнч(ТабДок) = Тип("ТабличныйДокумент") Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		
	КонецЕсли; 
	
	Возврат ТабДок;
	
КонецФункции

// Функция получает настройки построителя.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
// 
Функция ПолучитьНастройкиПостроителя() Экспорт
	
	СтруктураНастроек = НастройкиПостроителя.Получить();
	
	Если НЕ ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
	
		СтруктураНастроек = Новый Структура;
	
	КонецЕсли; 	
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Процедура сохраняет настройки построителя.
// 
// Параметры:
//  СтруктураНастроек - Структура.
// 
Процедура СохранитьНастройкиПостроителя(СтруктураНастроек)  Экспорт
	
	НастройкиПостроителя = Новый ХранилищеЗначения(СтруктураНастроек);
	
КонецПроцедуры

Функция ПолучитьСпособЗаполненияПоУмолчанию(ИмяИзмерения)

	СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.РучнойВвод;
	Если ИмяИзмерения = "Сценарий" Тогда
	  СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию;
	ИначеЕсли ИмяИзмерения = "ЦФО" Тогда
	  СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.ПоУмолчанию;	
	ИначеЕсли ИмяИзмерения = "СтатьяОборотов" Тогда
	  СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать;	
    Иначе		
	  СпособЗаполнения = Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.РучнойВвод;
	КонецЕсли; 

	Возврат СпособЗаполнения;
КонецФункции

Процедура ПроверитьВозможностьРедактирования(Отказ,Заголовок,СтатусСообщения)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	               |	бит_ФормаВводаБюджета.Ссылка
	               |ИЗ
	               |	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	               |ГДЕ
	               |	бит_ФормаВводаБюджета.НастройкаФормы = &НастройкаФормы
	               |	И бит_ФормаВводаБюджета.Проведен";
				   
    Если Метаданные.Документы.Найти("бит_АктуализацияБюджета")<> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст +"
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	               |	бит_АктуализацияБюджета.Ссылка
	               |ИЗ
	               |	Документ.бит_АктуализацияБюджета КАК бит_АктуализацияБюджета
	               |ГДЕ
	               |	бит_АктуализацияБюджета.НастройкаФормы = &НастройкаФормы
	               |	И бит_АктуализацияБюджета.Проведен";
		
	
	КонецЕсли; 				   
	
	Запрос.УстановитьПараметр("НастройкаФормы",Ссылка);	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		ТекстСообщения = СтрШаблон(Нстр("ru = 'Редактирование настройки форм ввода бюджета ""%1"" запрещено. Настройка используется в проведенных документах:'"), 
							Ссылка);
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = ТекстСообщения+Символы.ПС+"- "+Выборка.Ссылка;			
		КонецЦикла; 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , ,Отказ); 
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет перечень измерений бюджетирования.
// 
Процедура ЗаполнитьИзмеренияПоУмолчанию()  Экспорт

	Измерения.Очистить();
	
	ИзмеренияБюджетирования = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Все", "Тип", "Структура");
	
	Для каждого КиЗ Из ИзмеренияБюджетирования Цикл
	
		НоваяСтрока = Измерения.Добавить();
	    НоваяСтрока.Имя = КиЗ.Ключ;
		НоваяСтрока.ЗначениеПоУмолчанию = КиЗ.Значение.ПривестиЗначение(НоваяСтрока.ЗначениеПоУмолчанию);
		
		НоваяСтрока.СпособЗаполнения = ПолучитьСпособЗаполненияПоУмолчанию(НоваяСтрока.Имя);
		
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеТекстаЗапроса

// Функция формирует текст запроса для заполнения при условии разворота по статья оборотов.
// Предусмотрена возможность фильтрации статей по принадлежности к бюджету.
// 
// Возвращаемое значение:
//   ТекстЗапроса   - Строка.
// 
Функция СформироватьТекстЗапросаПоСтатьямОборотов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	бит_СтатьиБюджета.СтатьяОборотов КАК СтатьяОборотов
	|ПОМЕСТИТЬ СтатьиБюджета
	|ИЗ
	|	Справочник.бит_СтатьиБюджета КАК бит_СтатьиБюджета
	|ГДЕ
	|	НЕ бит_СтатьиБюджета.СтатьяОборотов ЕСТЬ NULL
	|	И бит_СтатьиБюджета.СтатьяОборотов <> НЕОПРЕДЕЛЕНО
	|	И бит_СтатьиБюджета.СтатьяОборотов <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиБюджета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ОтобранныеБюджеты.Бюджет ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОтобранных
	|ПОМЕСТИТЬ ОтобранныеБюджеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВсеБюджеты.Бюджет КАК Бюджет_Все,
	|		Бюджеты.Бюджет КАК Бюджет
	|	ИЗ
	|		(ВЫБРАТЬ
	|			бит_Бюджеты.Ссылка КАК Бюджет
	|		ИЗ
	|			Справочник.бит_Бюджеты КАК бит_Бюджеты) КАК ВсеБюджеты
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				бит_Бюджеты.Ссылка КАК Бюджет
	|			ИЗ
	|				Справочник.бит_Бюджеты КАК бит_Бюджеты) КАК Бюджеты
	|			ПО ВсеБюджеты.Бюджет = Бюджеты.Бюджет) КАК ОтобранныеБюджеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрЭлементы.Ссылка КАК Ссылка,
	|	СпрЭлементы.Наименование КАК Наименование,
	|	СпрЭлементы.Кодификатор КАК Кодификатор
	//|{ВЫБРАТЬ
	//|	Ссылка.*}
	|ИЗ
	|	ОтобранныеБюджеты КАК ОтобранныеБюджеты,
	|	Справочник.бит_СтатьиОборотов КАК СпрЭлементы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиБюджета КАК СтатьиБюджета
	|		ПО СпрЭлементы.Ссылка = СтатьиБюджета.СтатьяОборотов
	|ГДЕ
	|	НЕ СпрЭлементы.ЭтоГруппа
	|	И НЕ СпрЭлементы.ПометкаУдаления
	|	И (НЕ СтатьиБюджета.СтатьяОборотов ЕСТЬ NULL
	|			ИЛИ ЕСТЬNULL(ОтобранныеБюджеты.КоличествоОтобранных, 0) = 0)
	//|{ГДЕ
	//|	СпрЭлементы.Ссылка.* КАК Измерение}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрГруппы.Ссылка,
	|	СпрГруппы.Наименование,
	|	СпрГруппы.Кодификатор
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК СпрГруппы,
	|	ОтобранныеБюджеты КАК ОтобранныеБюджеты
	|ГДЕ
	|	СпрГруппы.ЭтоГруппа
	|	И НЕ СпрГруппы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ,
	|	Кодификатор ИЕРАРХИЯ,
	|	Наименование ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует текст запроса по бюджету для заполнения формы ввода бюджета.
// 
// Возвращаемое значение:
//  ТекстЗапроса - Строка.
// 
Функция СформироватьТекстЗапросаПоБюджету()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатьиБюджета.Ссылка КАК СтатьяБюджета,
	|	бит_СтатьиБюджета.Кодификатор КАК Кодификатор,
	|	ВЫБОР
	|		КОГДА бит_СтатьиБюджета.ЭтоГруппа
	|			ТОГДА бит_СтатьиБюджета.Ссылка
	|		ИНАЧЕ бит_СтатьиБюджета.СтатьяОборотов
	|	КОНЕЦ КАК Ссылка
	//|{ВЫБРАТЬ
	//|	СтатьяБюджета.*,
	//|	Кодификатор,
	//|	Ссылка.*}
	|ИЗ
	|	Справочник.бит_СтатьиБюджета КАК бит_СтатьиБюджета
	|ГДЕ
	|	бит_СтатьиБюджета.Владелец = &Бюджет
	//|{ГДЕ
	//|	бит_СтатьиБюджета.Ссылка.* КАК СтатьяБюджета}
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СпрГруппы.Ссылка,
	|	СпрГруппы.Кодификатор,
	|	СпрГруппы.Ссылка
	|ИЗ
	|	Справочник.бит_СтатьиБюджета КАК СпрГруппы
	|ГДЕ
	|	СпрГруппы.ЭтоГруппа
	|	И НЕ СпрГруппы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Кодификатор ИЕРАРХИЯ,
	|	СтатьяБюджета ИЕРАРХИЯ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует текст запроса для заполнения формы ввода в случае 
// разворота по произвольному измерению бюджетирования.
// 
// Параметры:
//  ИмяИзмерения  - Строка
//  ИмяТипа - Строка
// 
// Возвращаемое значение:
//   ТекстЗапроса   - Строка.
// 
Функция СформироватьТекстЗапросаПоПроизвольномуИзмерению(ИмяИзмерения, ИмяТипа)
	
	Если Найти(ИмяТипа, "ПланВидовХарактеристик") > 0 Тогда
		
		МетаданныеСправочника = Метаданные.ПланыВидовХарактеристик[ИмяИзмерения];
		ЭтоИерархияЭлементов  = Ложь;
		ИмяКласса = "ПланВидовХарактеристик";
		
	Иначе
		
		МетаданныеСправочника = Метаданные.Справочники[ИмяИзмерения];
		
		Если МетаданныеСправочника.Иерархический Тогда
			ЭтоИерархияЭлементов  = ?(МетаданныеСправочника.ВидИерархии=Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов,Истина,Ложь);
		Иначе	
			ЭтоИерархияЭлементов  = Истина;
		КонецЕсли; 
		ИмяКласса = "Справочник";
		
	КонецЕсли;
	
	ЕстьКодификатор       = бит_РаботаСМетаданными.ЕстьРеквизит("Кодификатор",МетаданныеСправочника);
	ЕстьКод               = ?(МетаданныеСправочника.ДлинаКода = 0, Ложь, Истина);
	ТекстУпорядочить      = ?(МетаданныеСправочника.Иерархический,"ИЕРАРХИЯ","");
	ТекстКодификаторЭл    = ?(ЕстьКодификатор,"СпрЭлементы.Кодификатор КАК Кодификатор ",?(ЕстьКод, "СпрЭлементы.Код КАК Кодификатор "," "" "" КАК Кодификатор "));
	ТекстКодификаторГр    = ?(ЕстьКодификатор,"СпрГруппы.Кодификатор КАК Кодификатор ",?(ЕстьКод, "СпрГруппы.Код КАК Кодификатор "," "" "" КАК Кодификатор "));
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрЭлементы.Ссылка КАК Ссылка,
	|	СпрЭлементы.Наименование КАК Наименование, 		
	|   "+ТекстКодификаторЭл+"
	|{ВЫБРАТЬ
	|	Ссылка.* КАК Ссылка}
	|ИЗ
	|	"+ИмяКласса+"."+ИмяИзмерения+" КАК СпрЭлементы";
	
	Если НЕ ЭтоИерархияЭлементов  Тогда
		
		ТекстЗапроса = ТекстЗапроса+"
		|ГДЕ
		|	(НЕ СпрЭлементы.ЭтоГруппа) И (НЕ СпрЭлементы.ПометкаУдаления)";
		
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса+"
	|		
	|{ГДЕ
	|	СпрЭлементы.Ссылка.* КАК Измерение}";
	
	Если НЕ ЭтоИерархияЭлементов Тогда
		
		ТекстЗапроса = ТекстЗапроса+"
		
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СпрГруппы.Ссылка,
		|	СпрГруппы.Наименование,			
		|	"+ТекстКодификаторГр+"
		|ИЗ
		|	"+ИмяКласса+"."+ИмяИзмерения+" КАК СпрГруппы
		|ГДЕ
		|	СпрГруппы.ЭтоГруппа И (НЕ СпрГруппы.ПометкаУдаления)";
		
		
	КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса+"
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка "+ТекстУпорядочить;
	
	Если ЕстьКодификатор Тогда
		
		ТекстЗапроса = ТекстЗапроса+",
		| Кодификатор "+ТекстУпорядочить;
		
	КонецЕсли; 
	ТекстЗапроса = ТекстЗапроса+",
	|Наименование "+ТекстУпорядочить;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет текст запроса построителя отчета. 
//            Запрос строится по справочнику, соответствующему измерению бюджетирования.
// 
// Параметры:
//  ИмяИзмерения  - Строка.
// 
Функция СформироватьТекстЗапроса() Экспорт
	
	ТекстЗапроса = "";
	ИмяИзмерения = "";
	ИзмеренияБюдж = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя");	
	
	СтрОтбор = Новый Структура("СпособЗаполнения", Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать);
	Строки = Измерения.НайтиСтроки(СтрОтбор);
	Если Строки.Количество() = 1 Тогда
		СтрокаИзмерения = Строки[0];
		ИмяИзмерения    = СтрокаИзмерения.Имя;
		Если ИзмеренияБюдж.Свойство(ИмяИзмерения) Тогда
			РезСтруктура = ИзмеренияБюдж[ИмяИзмерения];
			Если ТипЗнч(РезСтруктура) = Тип("Структура")  Тогда
				Если РезСтруктура.Имя = "бит_СтатьиОборотов" И НЕ ЗначениеЗаполнено(Бюджет) Тогда
					ТекстЗапроса = СформироватьТекстЗапросаПоСтатьямОборотов();
				ИначеЕсли РезСтруктура.Имя = "бит_СтатьиОборотов" И ЗначениеЗаполнено(Бюджет) Тогда
					ТекстЗапроса = СформироватьТекстЗапросаПоБюджету();
				Иначе
					Если ЗначениеЗаполнено(СтрокаИзмерения.ИмяТипаПоУмолчанию) Тогда
						 Имена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(СтрокаИзмерения.ИмяТипаПоУмолчанию);
						 РезСтруктура.Имя = Имена.ИмяОбъекта;
						 РезСтруктура.ИмяТипа = Имена.ИмяКласса+"Ссылка."+Имена.ИмяОбъекта;
					КонецЕсли; 
					ТекстЗапроса = СформироватьТекстЗапросаПоПроизвольномуИзмерению(РезСтруктура.Имя, РезСтруктура.ИмяТипа);
				КонецЕсли; 
			КонецЕсли;  
		КонецЕсли; 
	Иначе	
		ТекстЗапрос = СформироватьТекстЗапросаМножественныйРазворот(Строки);
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для произвольного разворота измерений.
// 
// Параметры:
//  Строки - Массив
// 
// Возвращаемое значение:
//  ТекстЗапроса - Строка.
// 
Функция СформироватьТекстЗапросаМножественныйРазворот(Строки)

	ТекстЗапроса = "";
	флРежимПоБюджету = Ложь;
	
	ИзмеренияБюдж = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все", "имя");		
	
	Если Строки.Количество() > 0 Тогда
			
		// Разворот по нескольким измерениям.

		Шаблон = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |%ПолеСтатьяБюджета%							  
		                      |{%Для Каждого СтрокаИзмерения ИЗ Измерения Цикл%}
							  |{%СтрокаИзмерения.ВыражениеВыбор%} КАК {%СтрокаИзмерения.ИмяИзмерения%}{%СтрокаИзмерения.Разделитель%}
							  |{%КонецЦикла%}
							  |ПОМЕСТИТЬ ОсновнаяТаблица
	                          |{ВЫБРАТЬ
							  |%ИнструкцияСтатьяБюджета%
		                      |{%Для Каждого СтрокаИзмерения ИЗ Измерения Цикл%}						  
	                          |{%СтрокаИзмерения.ИмяИзмерения%}.*{%СтрокаИзмерения.Разделитель%}
							  |{%КонецЦикла%}						  
							  |}
	                          |ИЗ
		                      |{%Для Каждого СтрокаИзмерения ИЗ Измерения Цикл%}
							  |{%?(НЕ СтрокаИзмерения.Первая,"" ЛЕВОЕ СОЕДИНЕНИЕ "","""")%}{%СтрокаИзмерения.ИмяКласса%}.{%СтрокаИзмерения.ИмяТаблицы%} КАК {%СтрокаИзмерения.ПсевонимТаблицы%}
							  |{%СтрокаИзмерения.ВыражениеСоединения%}
							  |{%КонецЦикла%}
	                          |ГДЕ
							  |%ОтборБюджет%
							  |{%Для Каждого СтрокаИзмерения ИЗ Измерения Цикл%}
							  |{%?(НЕ СтрокаИзмерения.Первая,"" И "","""")%} НЕ {%СтрокаИзмерения.ПсевонимТаблицы%}.ПометкаУдаления
							  |{%СтрокаИзмерения.УсловияВладелецДопЗначений%}
							  |{%КонецЦикла%}						  						  						  						  						  
	                          |{ГДЕ
		                      |{%Для Каждого СтрокаИзмерения ИЗ Измерения Цикл%}
							  |{%СтрокаИзмерения.ПсевонимТаблицы%}.Ссылка.* КАК {%СтрокаИзмерения.ИмяИзмерения+СтрокаИзмерения.Разделитель%}
							  |{%КонецЦикла%}						  						  						  
							  |}
	                          |
							  |СГРУППИРОВАТЬ ПО
							  |{%Для Каждого СтрокаИзмерения ИЗ Измерения Цикл%}
							  |{%СтрокаИзмерения.ВыражениеВыбор%}{%СтрокаИзмерения.Разделитель%}
							  |{%КонецЦикла%}	
							  |
                              |;
                              |
                              |////////////////////////////////////////////////////////////////////////////////
                              |ВЫБРАТЬ 
		                      |%ПолеСтатьяБюджетаОсновнаяТаблица%							  							  
                              |{%Для Каждого СтрокаИзмерения ИЗ Измерения Цикл%}
                              |{%СтрокаИзмерения.ВыражениеКодификатор%}							  
							  |ОсновнаяТаблица.{%СтрокаИзмерения.ИмяИзмерения%}{%СтрокаИзмерения.Разделитель%}
							  |{%КонецЦикла%}							  
	                          | ИЗ
	                          |ОсновнаяТаблица КАК ОсновнаяТаблица
                              |#ОтборДоговораПоВладельцу
                              |УПОРЯДОЧИТЬ ПО
                              |{%Для Каждого СтрокаИзмерения ИЗ Измерения Цикл%}
							  |{%СтрокаИзмерения.ВыражениеУпорядочения%}{%СтрокаИзмерения.Разделитель%}
							  |{%КонецЦикла%}	                              
							  |";					 

							  
		// Подготовка параметров измерений для постановки в шаблон.
		
		ЕстьСтатья = Ложь;
		ЕстьКонтрагент = Ложь;
		ЕстьДоговор = Ложь;
		Для каждого Строка Из Строки Цикл
			Если Строка.Имя = "СтатьяОборотов" Тогда
				ЕстьСтатья = Истина;
			ИначеЕсли Строка.Имя = "Контрагент" Тогда
				ЕстьКонтрагент = Истина;
			ИначеЕсли Строка.Имя = "ДоговорКонтрагента" Тогда
				ЕстьДоговор = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
		флРежимПоБюджету = ?(Строки[0].Имя = "СтатьяОборотов" И ЗначениеЗаполнено(Бюджет), Истина, Ложь);
				
		ПараметрыИзмерений = Новый Массив;
		ВыражениеСоединения = "";		
		КолВо = Строки.Количество();
		Ном = 1;
		Для каждого СтрокаИзмерения Из Строки Цикл
			
			флПоследняя = (Ном = КолВо);
			
			ИмяИзмерения   = СтрокаИзмерения.Имя;
			СтрИзмер       = ИзмеренияБюдж[ИмяИзмерения];
			
			Если ЗначениеЗаполнено(СтрокаИзмерения.ИмяТипаПоУмолчанию) Тогда
				
				Имена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(СтрокаИзмерения.ИмяТипаПоУмолчанию);
				СтрИзмер.Имя = Имена.ИмяОбъекта;
				СтрИзмер.ИмяТипа = Имена.ИмяКласса+"Ссылка."+Имена.ИмяОбъекта;
				
			КонецЕсли; 
			
			
			Если ТипЗнч(СтрИзмер) = Тип("Структура") Тогда
				
				СтрПар = Новый Структура;
				
				ИмяСправочника = СтрИзмер.Имя;
				
				Если Найти(СтрИзмер.ИмяТипа, "ПланВидовХарактеристик") > 0 Тогда
					МетаданныеСправочника = Метаданные.ПланыВидовХарактеристик[ИмяСправочника];
				    СтрПар.Вставить("ЭтоИерархияЭлементов", Ложь);	
					СтрПар.Вставить("ИмяКласса", "ПланВидовХарактеристик");
				Иначе			
					МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
				    СтрПар.Вставить("ЭтоИерархияЭлементов", бит_РаботаСМетаданными.ЭтоИерархияЭлементов(МетаданныеСправочника));
					СтрПар.Вставить("ИмяКласса", "Справочник");					
				КонецЕсли;			
				
				СтрПар.Вставить("ИмяТаблицы"          , МетаданныеСправочника.Имя);
				СтрПар.Вставить("ЭтоДопЗначения"      , ?(Найти(МетаданныеСправочника.Имя,"бит_ДополнительныеЗначенияАналитик")> 0, Истина, Ложь));				
				Если СтрПар.ЭтоДопЗначения Тогда
					СтрПар.Вставить("ПсевонимТаблицы"     , "Т_"+Формат(Ном,"ЧГ="));	
					СтрПар.Вставить("УсловияВладелецДопЗначений"    , " И "+СтрПар.ПсевонимТаблицы+".Владелец = &"+ИмяИзмерения);
				Иначе
					Если МетаданныеСправочника.Имя = "бит_СтатьиОборотов" Тогда
						СтрПар.Вставить("ПсевонимТаблицы"     , "Т_"+МетаданныеСправочника.Имя);
					Иначе	
						СтрПар.Вставить("ПсевонимТаблицы"     , "Т_"+МетаданныеСправочника.Имя+"_"+Формат(Ном,"ЧГ="));
					КонецЕсли; 
					СтрПар.Вставить("УсловияВладелецДопЗначений"    ,  "");					
				КонецЕсли; 
				СтрПар.Вставить("ИмяИзмерения"        , СтрокаИзмерения.Имя);
				СтрПар.Вставить("ЕстьКод"             , ?(МетаданныеСправочника.ДлинаКода = 0, Ложь, Истина));
				СтрПар.Вставить("ЕстьКодификатор"     , бит_РаботаСМетаданными.ЕстьРеквизит("Кодификатор",МетаданныеСправочника));
				СтрПар.Вставить("Иерархический"       , МетаданныеСправочника.Иерархический);
				СтрПар.Вставить("СинонимКодификатор"  , ИмяИзмерения+"_Кодификатор");
				СтрПар.Вставить("Первая"              , (Ном = 1));
				СтрПар.Вставить("Последняя"           , флПоследняя);
				СтрПар.Вставить("Разделитель"         ,?(флПоследняя, "", ","));
				
				Если ЕстьСтатья И НЕ СтрПар.ИмяИзмерения = "СтатьяОборотов" И НЕ СтрПар.ИмяИзмерения = "ЦФО" Тогда
					
					ВыражениеВыбор =  "ВЫБОР КОГДА Т_бит_СтатьиОборотов.%ПромежуточноеПоле%Учет_%ИмяИзмерения% ТОГДА %ПсевонимТаблицы%.Ссылка ИНАЧЕ Неопределено КОНЕЦ";					
					
				Иначе	
					
					ВыражениеВыбор = "%ПсевонимТаблицы%.Ссылка";
					
				КонецЕсли; 
				
				ВыражениеВыбор = СтрЗаменить(ВыражениеВыбор, "%ИмяТаблицы%"       , СтрПар.ИмяТаблицы);
				ВыражениеВыбор = СтрЗаменить(ВыражениеВыбор, "%ПсевонимТаблицы%"  , СтрПар.ПсевонимТаблицы);				
				ВыражениеВыбор = СтрЗаменить(ВыражениеВыбор, "%ИмяИзмерения%"     , СтрПар.ИмяИзмерения);
				ВыражениеВыбор = СтрЗаменить(ВыражениеВыбор, "%ПромежуточноеПоле%", ?(флРежимПоБюджету,"СтатьяОборотов.",""));
				
				СтрПар.Вставить("ВыражениеВыбор", ВыражениеВыбор);
				
				Если СтрПар.ЕстьКодификатор Тогда
					
					ВыражениеКодификатор = "ОсновнаяТаблица."+СтрПар.ИмяИзмерения+".Кодификатор КАК "+СтрПар.СинонимКодификатор+",";
					
				ИначеЕсли СтрПар.ЕстьКод Тогда	
					
					ВыражениеКодификатор = "ОсновнаяТаблица."+СтрПар.ИмяИзмерения+".Код КАК "+СтрПар.СинонимКодификатор+",";
					
				Иначе
					
					ВыражениеКодификатор = " "" "" КАК "+СтрПар.СинонимКодификатор+",";
					
				КонецЕсли; 
				СтрПар.Вставить("ВыражениеКодификатор", ВыражениеКодификатор);
				
				
				СтрПар.Вставить("ВыражениеСоединения", ВыражениеСоединения);
				
				Если СтрПар.Первая Тогда
					
					ВыражениеУпорядочения = СтрПар.ИмяИзмерения + ?(СтрПар.Иерархический," ИЕРАРХИЯ","");
					
				Иначе	
					
					ВыражениеУпорядочения = ?(СтрПар.ЕстьКодификатор,СтрПар.ИмяИзмерения+".Кодификатор",СтрПар.ИмяИзмерения);
					
				КонецЕсли; 
				СтрПар.Вставить("ВыражениеУпорядочения", ВыражениеУпорядочения);
				
				
				ПараметрыИзмерений.Добавить(СтрПар);
				
			КонецЕсли; 
			
			ВыражениеСоединения = "ПО ИСТИНА";
			
			Ном = Ном+1;
		КонецЦикла; // Строки.
		
		СтрКонтекст = Новый Структура("Измерения", ПараметрыИзмерений);
		ТекстЗапроса = бит_СтрокиКлиентСервер.ОбработатьТекстШаблона(Шаблон,СтрКонтекст);
		
		Если флРежимПоБюджету Тогда
			
			// Доработка запроса при формировании по бюджету.
			СтрЗамены    = " ВЫБОР КОГДА Т_бит_СтатьиОборотов.ЭтоГруппа ТОГДА Т_бит_СтатьиОборотов.Ссылка ИНАЧЕ Т_бит_СтатьиОборотов.СтатьяОборотов КОНЕЦ КАК СтатьяОборотов";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т_бит_СтатьиОборотов.Ссылка КАК СтатьяОборотов", СтрЗамены);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.бит_СтатьиОборотов", "Справочник.бит_СтатьиБюджета");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т_бит_СтатьиОборотов.Ссылка.* КАК СтатьяОборотов", "Т_бит_СтатьиОборотов.СтатьяОборотов КАК СтатьяОборотов");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтатьяОборотов ИЕРАРХИЯ", "СтатьяБюджета ИЕРАРХИЯ");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеСтатьяБюджета%","Т_бит_СтатьиОборотов.Ссылка КАК СтатьяБюджета,");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеСтатьяБюджетаОсновнаяТаблица%","ОсновнаяТаблица.СтатьяБюджета КАК СтатьяБюджета,");			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИнструкцияСтатьяБюджета%","СтатьяБюджета.*,");			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборБюджет%", "Т_бит_СтатьиОборотов.Владелец = &Бюджет И ");	
			
			// Приводим к типу СтатьяОборотов.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОсновнаяТаблица.СтатьяОборотов,", "ВЫРАЗИТЬ(ОсновнаяТаблица.СтатьяОборотов КАК Справочник.бит_СтатьиОборотов) КАК СтатьяОборотов,");

		Иначе
			
			// Очистка меток для внедрения текста при формировании по бюджету.
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеСтатьяБюджета%","");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеСтатьяБюджетаОсновнаяТаблица%","");						
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИнструкцияСтатьяБюджета%","");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборБюджет%", "");			
			
		КонецЕсли; 
		
		// Доработка в части соединения Контргент-Договор.
		Если ЕстьКонтрагент И ЕстьДоговор Тогда
			ОтборДоговораПоВладельцу = " ГДЕ Контрагент = ДоговорКонтрагента.Владелец";
		Иначе
			ОтборДоговораПоВладельцу = "";
		КонецЕсли; 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборДоговораПоВладельцу", ОтборДоговораПоВладельцу);
	КонецЕсли; 
	
	Если флРежимПоБюджету Тогда
		// Для множественного разворота по бюджету добавим "кодификатор" статьи бюджета.
		ИндексПоля = -1;
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ПакетЗапроса = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
		Для каждого ОператорПакета Из ПакетЗапроса.Операторы Цикл
			Для каждого ИсточникСхемыЗапроса Из ОператорПакета.Источники Цикл
				ТаблицаСхемыЗапроса = ИсточникСхемыЗапроса.Источник;
				Для каждого Поле Из ТаблицаСхемыЗапроса.ДоступныеПоля Цикл
					Если Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.бит_СтатьиБюджета")) Тогда
						ВыражениеСхемыЗапроса = ОператорПакета.ВыбираемыеПоля.Добавить(Поле.Имя + ".Кодификатор");
						ИндексПоля = ОператорПакета.ВыбираемыеПоля.Индекс(ВыражениеСхемыЗапроса);
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
		Если ИндексПоля <> -1 Тогда
			КолонкаПакета = ПакетЗапроса.Колонки.Получить(ИндексПоля);
			КолонкаКУдалению = ПакетЗапроса.Колонки.Найти("СтатьяОборотов_Кодификатор");
			Если КолонкаКУдалению <> Неопределено Тогда
				ПакетЗапроса.Колонки.Удалить(ПакетЗапроса.Колонки.Индекс(КолонкаКУдалению));
			КонецЕсли; 
			КолонкаПакета.Псевдоним = "СтатьяОборотов_Кодификатор";
		КонецЕсли; 
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьПоДаннымБюджета(ДанныеЗаполнения)
	
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Наименование");
	Бюджет       = ДанныеЗаполнения;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

мНастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

#КонецОбласти

#КонецЕсли
