
#Область ОписаниеПеременных

// Хранит текущую дату начала планирования
&НаКлиенте
Перем мТекущаяДатаНачалаПланирования;
// Хранит текущую дату окончания планирования.
&НаКлиенте
Перем мТекущаяДатаОкончанияПланирования;
// Хранит текущую периодичность макета
&НаКлиенте
Перем мТекущаяПериодичность;
// Хранит текущую продолжительность интервала.
&НаКлиенте
Перем мТекущаяПродолжительностьИнтервала;
// Служит для передачи данных копирования
&НаКлиенте
Перем мБуфер;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если Отказ Тогда 		
		Возврат;    		
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	УстановитьУсловноеОформление();
	
	ДоработатьТаблицуИзмерения();
	
	Элементы.Измерения.ОтборСтрок = Новый ФиксированнаяСтруктура("Отключено", Ложь);
		
	// Восстановим настройки отбора
	Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ТекОбъект = РеквизитФормыВЗначение("Объект");
	Иначе	
		ТекОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
	КонецЕсли; 
	СохраненнаяНастройка= ТекОбъект.ПолучитьНастройкиПостроителя();
	// Восстановление дерева из хранилища
	ТабДокДанные = ТекОбъект.ПолучитьДерево();
	
	// Восстановление цветов из шестнадцатеричного представления.
	ПреобразоватьЦвета();
	
	фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);
	
	// Инициализация компоновщика, используемого для настройки отборов.
	АдресКомпоновки = Справочники.бит_НастройкиФормВводаБюджета.ИнициализироватьКомпоновщик(Объект.ТекстЗапроса, Компоновщик, УникальныйИдентификатор, , Объект.Бюджет);
	
	Если СохраненнаяНастройка.Свойство("НастройкиКомпоновщика") 
		И ТипЗнч(СохраненнаяНастройка.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных")  Тогда
		
		Если СохраненнаяНастройка.НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0 
			 ИЛИ СохраненнаяНастройка.НастройкиКомпоновщика.Порядок.Элементы.Количество() > 0 Тогда
			
			Компоновщик.ЗагрузитьНастройки(СохраненнаяНастройка.НастройкиКомпоновщика);
	        КопироватьПорядокКомпоновщика(Компоновщик, "Настройки", "ФиксированныеНастройки");
	        КопироватьОтборКомпоновщика(Компоновщик, "Настройки", "ФиксированныеНастройки");			
			
		КонецЕсли;  
		
	Иначе
		
		// Если сохранена еще старая настройка выполним конвертацию отбора построителя в отбор компоновщика.
		бит_МеханизмПолученияДанных.КонвертацияОтборПостроителяОтборКомпоновщика(СохраненнаяНастройка, Компоновщик, Объект.ТекстЗапроса);
		
	КонецЕсли; 
	
	// Заполнение таблицы ДополнительныеИтогиПериодов.
	Для каждого ТекЗн Из Перечисления.бит_ПериодичностьПланирования Цикл
		
		СтрОтбор = Новый Структура("Периодичность", ТекЗн);
		
		МассивСтрок = Объект.ДополнительныеИтоги.НайтиСтроки(СтрОтбор);
		
		НоваяСтрока = ДополнительныеИтогиПериодов.Добавить();
		НоваяСтрока.Периодичность = ТекЗн;
		Если МассивСтрок.Количество() > 0 Тогда
			
			НоваяСтрока.Выполнять = Истина;
			НоваяСтрока.НарастающийИтог = МассивСтрок[0].НарастающийИтог;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	УстановитьВидимость();
	
	ОтказВДоступе = Ложь;	
	ПроверитьВозможностьРедактирования(ОтказВДоступе);
	Элементы.ГруппаОтбор.ТолькоПросмотр            = ОтказВДоступе;
	Элементы.ИзмеренияКомандаЗаполнитьПоУмолчанию.Доступность = НЕ ОтказВДоступе;
	Элементы.Вид.Доступность = НЕ ОтказВДоступе;
	
	Элементы.ГруппаИзмерения.ТолькоПросмотр = ОтказВДоступе;
	Для каждого Элемент Из Элементы.ГруппаГлавноеШапкаЛевая.ПодчиненныеЭлементы Цикл
		Если Элемент.Имя <> "Наименование" Тогда		
			Элемент.ТолькоПросмотр = ОтказВДоступе;
		КонецЕсли; 		
	КонецЦикла; 
		
	Элементы.КомандаВводФормулы.Пометка = фВводФормулы;	
	
	// ----------------------------------------------------------------------
	// Редактор формул
	бит_РедакторФормулКлиентСервер.рф_ИнициализацияРедактораФормул(ЭтотОбъект, Истина);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТипЗнч(фКэшЗначений) = Тип("Структура") Тогда
		
		ДоработатьТаблицуИзмерения();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мТекущаяДатаНачалаПланирования     = Объект.ДатаНачалаПланирования;
	мТекущаяДатаОкончанияПланирования  = Объект.ДатаОкончанияПланирования;
	мТекущаяПериодичность              = Объект.ПериодичностьПланирования;
	мТекущаяПродолжительностьИнтервала = Объект.ПродолжительностьИнтервала;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет Тогда
	
		Если ТабДокДанные.ВысотаТаблицы = 0 Тогда
		
			ТекстСообщения =  НСтр("ru = 'Пред сохранением элемента сформируйте макет.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,"ТабДокДанные",Отказ);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	// Проверка на двойной разворот по статьи	
	Справочники.бит_НастройкиФормВводаБюджета.ПроверитьМножественныйРазворотПоСтатьям(Объект.Измерения, Отказ);
	
	Если Отказ Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ТекущийОбъект.ТекстЗапроса = ТекущийОбъект.СФормироватьТекстЗапроса();
	
	Если Объект.ТекстЗапроса <> ТекущийОбъект.ТекстЗапроса Тогда
		
		АдресКомпоновки = Справочники.бит_НастройкиФормВводаБюджета.ИнициализироватьКомпоновщик(ТекущийОбъект.ТекстЗапроса, Компоновщик, УникальныйИдентификатор, , Объект.Бюджет);
		
	КонецЕсли; 
	
	// Сохранение дерева данных
	ТекущийОбъект.СохранитьДерево(ТабДокДанные);	
	
	// Запомним отбор
	КопироватьПорядокКомпоновщика(Компоновщик, "ФиксированныеНастройки", "Настройки");
	КопироватьОтборКомпоновщика(Компоновщик, "ФиксированныеНастройки", "Настройки");
	Компоновщик.ФиксированныеНастройки.Отбор.Элементы.Очистить();	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
	КопироватьОтборКомпоновщика(Компоновщик, "Настройки", "ФиксированныеНастройки");	
	ТекущийОбъект.СохранитьНастройкиПостроителя(СтруктураНастройки);
	
	УстановитьВидимость();
	
	// Сохранение перечня дополнительных итогов по периодам.
	СинхронизироватьДополнительныеИтогиПериодов(ТекущийОбъект, ДополнительныеИтогиПериодов);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДоработатьТаблицуИзмерения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтотОбъект.рфРедакторФормулОткрыт И ЭтотОбъект.рфФормула <> ЭтотОбъект.рфСтараяФормула Тогда
	  	ТекстСообщения = Нстр("ru = 'Не закончен ввод формулы.'") + Символы.ПС
					   + Нстр("ru = 'Для окончания ввода закройте окно редактора или нажмите кнопку ""=""(равно) в окне редактора.'");
	  	ПоказатьПредупреждение(,ТекстСообщения, , Нстр("ru = 'Редактор формулы'"));
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПараметрНормНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоВалюты", Истина);
	
	ОткрытьФорму("ПланВидовХарактеристик.бит_ВидыПроизвольныхПараметров.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Модифицированность 
		 И (ТекущаяСтраница.Имя = "ГруппаСтраницаОтбор" 
		    ИЛИ ТекущаяСтраница.Имя = "ГруппаСтраницаМакет") Тогда
		
		ИзменениеСтраницы();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриИзменении(Элемент)
	
	ИзменениеБюджета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПланированияПриИзменении(Элемент)
	
	ОповещениеИстина = Новый ОписаниеОповещения("ДатаНачалаПланированияПриИзменении_ОтветИстина", ЭтотОбъект); 
	ОповещениеЛожь = Новый ОписаниеОповещения("ДатаНачалаПланированияПриИзменении_ОтветЛожь", ЭтотОбъект); 
	
	ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь);
	
КонецПроцедуры

// Процедура окончание процедуры "ДатаНачалаПланированияПриИзменении" при ответе Да.
// 
&НаКлиенте 
Процедура ДатаНачалаПланированияПриИзменении_ОтветИстина(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ОчиститьМакет();
	
	мТекущаяДатаНачалаПланирования = Объект.ДатаНачалаПланирования;
	ПериодПланирования.ДатаНачала = Объект.ДатаНачалаПланирования;
	
КонецПроцедуры

// Процедура окончание процедуры "ДатаНачалаПланированияПриИзменении" при ответе Нет.
// 
&НаКлиенте 
Процедура ДатаНачалаПланированияПриИзменении_ОтветЛожь(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Объект.ДатаНачалаПланирования = мТекущаяДатаНачалаПланирования;
	ПериодПланирования.ДатаНачала = Объект.ДатаНачалаПланирования;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПланированияПриИзменении(Элемент)
	
	ОповещениеИстина = Новый ОписаниеОповещения("ДатаОкончанияПланированияПриИзменении_ОтветИстина", ЭтотОбъект); 
	ОповещениеЛожь = Новый ОписаниеОповещения("ДатаОкончанияПланированияПриИзменении_ОтветЛожь", ЭтотОбъект); 
	
	ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь);
	
КонецПроцедуры

// Процедура окончание процедуры "ДатаОкончанияПланированияПриИзменении" при ответе Да.
// 
&НаКлиенте 
Процедура ДатаОкончанияПланированияПриИзменении_ОтветИстина(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ОчиститьМакет();
	
	мТекущаяДатаОкончанияПланирования = Объект.ДатаОкончанияПланирования;
	ПериодПланирования.ДатаОкончания  = Объект.ДатаОкончанияПланирования;	

КонецПроцедуры

// Процедура окончание процедуры "ДатаОкончанияПланированияПриИзменении" при отете Нет.
// 
&НаКлиенте 
Процедура ДатаОкончанияПланированияПриИзменении_ОтветЛожь(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Объект.ДатаОкончанияПланирования = мТекущаяДатаОкончанияПланирования;
	ПериодПланирования.ДатаОкончания = Объект.ДатаОкончанияПланирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
	
		Если Расшифровка.Вид = "Измерение" И ЗначениеЗаполнено(Расшифровка.Значение) Тогда
			
			ПоказатьЗначение(,Расшифровка.Значение);
		
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаПредставлениеПриИзменении(Элемент)
	
	Формула = ФормулаПредставление;
	
	// Формирование формулы по представлению
	МассивАргументы = бит_СтрокиКлиентСервер.РазобратьФормулу(ФормулаПредставление);
	Для Каждого Арг Из МассивАргументы Цикл
		
		ОблАрг = ТабДокДанные.Область(Арг);
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблАрг) Тогда
			
			Формула = СтрЗаменить(Формула, Арг, ОблАрг.Имя);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Цвет_ГруппаПриИзменении(Элемент)
	
	ИзменениеЦвета("Цвет_Группа");
	
КонецПроцедуры

&НаКлиенте
Процедура Цвет_ЯчейкаПриИзменении(Элемент)
	
	ИзменениеЦвета("Цвет_Ячейка");
	
КонецПроцедуры

&НаКлиенте
Процедура Цвет_ФормулаПриИзменении(Элемент)
	
	ИзменениеЦвета("Цвет_Формула");
	
КонецПроцедуры

&НаКлиенте
Процедура Цвет_АргументПриИзменении(Элемент)
	
	ИзменениеЦвета("Цвет_Аргумент");
	
КонецПроцедуры


&НаКлиенте
Процедура ПериодичностьПланированияПриИзменении(Элемент)
	
	ОповещениеИстина = Новый ОписаниеОповещения("ПериодичностьПланированияПриИзменении_ОтветИстина", ЭтотОбъект); 
	ОповещениеЛожь = Новый ОписаниеОповещения("ПериодичностьПланированияПриИзменении_ОтветЛожь", ЭтотОбъект); 
	
	ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь);
	
КонецПроцедуры

// Процедура окончание процедуры "ПериодичностьПланированияПриИзменении" при ответе ДА.
// 
&НаКлиенте 
Процедура ПериодичностьПланированияПриИзменении_ОтветИстина(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ОчиститьМакет();

	мТекущаяПериодичность = Объект.ПериодичностьПланирования;
	
КонецПроцедуры

// Процедура окончание процедуры "ПериодичностьПланированияПриИзменении" при ответе Нет.
// 
&НаКлиенте 
Процедура ПериодичностьПланированияПриИзменении_ОтветЛожь(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Объект.ПериодичностьПланирования = мТекущаяПериодичность;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжительностьИнтервалаПриИзменении(Элемент)
	
	ОповещениеИстина = Новый ОписаниеОповещения("ПродолжительностьИнтервалаПриИзменении_ОтветИстина", ЭтотОбъект); 
	ОповещениеЛожь = Новый ОписаниеОповещения("ПродолжительностьИнтервалаПриИзменении_ОтветЛожь", ЭтотОбъект); 
	
	ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь);
	
КонецПроцедуры

// Процедура окончание процедуры "ПродолжительностьИнтервалаПриИзменении" при ответе Да.
// 
&НаКлиенте 
Процедура ПродолжительностьИнтервалаПриИзменении_ОтветИстина(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ОчиститьМакет();
	
	мТекущаяПродолжительностьИнтервала = Объект.ПродолжительностьИнтервала;
	
КонецПроцедуры

// Процедура окончание процедуры "ПродолжительностьИнтервалаПриИзменении" при ответе Нет.
// 
&НаКлиенте 
Процедура ПродолжительностьИнтервалаПриИзменении_ОтветЛожь(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Объект.ПродолжительностьИнтервала = мТекущаяПродолжительностьИнтервала;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗащитаЯчейкиПриИзменении(Элемент)
	
	Для каждого ТекущаяОбласть Из ТабДокДанные.ВыделенныеОбласти Цикл
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ТекущаяОбласть) Тогда
			
			ШиринаОбласти = ТекущаяОбласть.Право - ТекущаяОбласть.Лево;
			ВысотаОбласти = ТекущаяОбласть.Низ   - ТекущаяОбласть.Верх;
			Для Колонка = 0 По ШиринаОбласти Цикл
				Лево = ТекущаяОбласть.Лево + Колонка;
				Для Строка = 0 По ВысотаОбласти Цикл
					Верх 	= ТекущаяОбласть.Верх + Строка;
					Область = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
					Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Область.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
						И Область.Расшифровка.Вид = "Значение" Тогда
						Область.Защита  = ЗащитаЯчейки;
						Модифицированность = Истина;
					КонецЕсли;
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;  

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабДокДанные

&НаКлиенте
Процедура ТабДокДанныеПриАктивизацииОбласти(Элемент)

	// Очищаем выделенные области табличного документа.
	бит_БюджетированиеКлиентСервер.ОчиститьВыделениеАргументов(ТабДокДанные, фВыделенныеОбласти);
	
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
				
		ДельтаГ = ОблМакета.Право - ОблМакета.Лево + 1;
		ДельтаВ = ОблМакета.Низ   - ОблМакета.Верх + 1;
		
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОблМакета.Расшифровка, "РасшифровкаЯчейкиФормыВвода") И ДельтаГ = 1 И ДельтаВ = 1 Тогда
			
			  Расшифровка = ОблМакета.Расшифровка;
			  
		      ЗащитаЯчейки = ОблМакета.Защита;
              // BF-1825 изменение кода. Начало. 15.01.2018{{
              Элементы.ЗащитаЯчейки.Доступность = Расшифровка.Вид = "Значение";// И ЗначениеЗаполнено(Расшифровка.Формула);
              // BF-1825 изменение кода. Конец. 15.01.2018}}
			  
			  Если фВводФормулы Тогда
				  
				  Если НЕ ОблМакета.Имя = фИмяЯчейкиВводФормулы Тогда
					  
					  НетОперандов = ?(Прав(СокрЛП(Формула),1)="]",Истина,Ложь);
					  Формула = Формула+?(НетОперандов," + "," ")+"["+Расшифровка.Имя+"]";
					  
					  // Формирование представления формулы
					  ФормулаПредставление = бит_БюджетированиеКлиент.ПользовательскоеПредставлениеФормулы(ТабДокДанные, Формула);
					  Если фКэшЗначений.ВыделятьАргументы Тогда
						  бит_БюджетированиеКлиент.ВыделитьАргументыФормулы(ТабДокДанные, Формула, фВыделенныеОбласти, Цвет_Аргумент);					  
					  КонецЕсли; 
					  
				  КонецЕсли; 
				  
			  Иначе
				  
				  Если Не ЭтотОбъект.рфРедакторФормулОткрыт Тогда
					  фИмяЯчейкиВводФормулы = Расшифровка.Имя;
				  КонецЕсли;
				  
				  Формула = Расшифровка.Формула;
				  // Формирование представления формулы
				  ФормулаПредставление = бит_БюджетированиеКлиент.ПользовательскоеПредставлениеФормулы(ТабДокДанные, Формула);
				  Если фКэшЗначений.ВыделятьАргументы Тогда
					  бит_БюджетированиеКлиент.ВыделитьАргументыФормулы(ТабДокДанные, Формула, фВыделенныеОбласти, Цвет_Аргумент);					  
				  КонецЕсли; 

			  КонецЕсли; 
			  
		  КонецЕсли;	// ИмяКласса подходит
		
	КонецЕсли; // ОблМакета подходит
	
	// ----------------------------------------------------------------------
	// Редактор формул
	Если ЭтотОбъект.рфРедакторФормулОткрыт Тогда
		ПодключитьОбработчикОжидания("рф_АнализЗначенияВводФормул", 0.3, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзмерения

&НаКлиенте
Процедура ИзмеренияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Измерения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.ЗначениеПоУмолчанию));   		
	ОписаниеТипаПоля = Новый ОписаниеТипов(МассивТипов);
	
	Элементы.ИзмеренияЗначениеПоУмолчанию.ОграничениеТипа = ОписаниеТипаПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмеренияЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ТекущаяСтрока = Элементы.Измерения.ТекущиеДанные;
    
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      , Элемент
	                                                      , ТекущаяСтрока
														  , ТекущаяСтрока.Имя
														  , СтандартнаяОбработка
														  , фКэшЗначений.НастройкиАналитик
                                                          , "ЗначениеПоУмолчанию");
										  														  
КонецПроцедуры

&НаКлиенте
Процедура ИзмеренияЗначениеПоУмолчаниюАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
    ТекущаяСтрока = Элементы.Измерения.ТекущиеДанные;
        
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
                                                          , Элемент
                                                          , ТекущаяСтрока
    													  , ТекущаяСтрока.Имя
    													  , СтандартнаяОбработка
    													  , фКэшЗначений.НастройкиАналитик
                                                          , "ЗначениеПоУмолчанию");  													  											  
														  
КонецПроцедуры

&НаКлиенте
Процедура ИзмеренияЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	
	ТекущаяСтрока = Элементы.Измерения.ТекущиеДанные;
	Контейнер = Новый Структура;
	Контейнер.Вставить(ТекущаяСтрока.Имя, ТекущаяСтрока.ЗначениеПоУмолчанию);	
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,Контейнер
	                                                                        ,ТекущаяСтрока.Имя
																			,СтандартнаяОбработка
																			,фКэшЗначений.НастройкиАналитик);
	
	ТекущаяСтрока.ЗначениеПоУмолчанию = Контейнер[ТекущаяСтрока.Имя];													  
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмеренияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИзмеренияОкончаниеРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмеренияСпособЗаполненияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Измерения.ТекущиеДанные;
	
	Если ТекущаяСтрока.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать") Тогда
		
		ТекущаяСтрока.ЗначениеПоУмолчанию = Неопределено;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмеренияИмяТипаПоУмолчаниюАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Измерения.ТекущиеДанные;
	
	ТекНастройка = фКэшЗначений.НастройкиАналитик[ТекущаяСтрока.Имя];
	
	Если НЕ ТекНастройка = Неопределено 
		 И ЗначениеЗаполнено(ТекНастройка.Аналитика) Тогда
		
		 МассивВыбора = ТипыПоУмолчанию(ТекНастройка.Аналитика);
		 
		 Если МассивВыбора.Количество() > 1 Тогда
			 
			 ДанныеВыбора = Новый СписокЗначений;		 
			 Для каждого Эл Из МассивВыбора Цикл
				 
				 ДанныеВыбора.Добавить(Эл);
				 
			 КонецЦикла; 
			 СтандартнаяОбработка = Ложь;
			 
		 КонецЕсли; 
		 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеИтогиПериодов

&НаКлиенте
Процедура ДополнительныеИтогиПериодовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДополнительныеИтогиПериодов.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ТекущаяСтрока.Выполнять = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьТекстЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоУмолчанию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьПоУмолчаниюОкончание", ЭтотОбъект); 
	ТекстВопроса =  НСтр("ru = 'Табличная часть ""Измерения"" будет перезаполнена. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаЗаполнитьПоУмолчанию".
// 
&НаКлиенте 
Процедура КомандаЗаполнитьПоУмолчаниюОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьИзмеренияПоУмолчанию();
		
	КонецЕсли; 
                
КонецПроцедуры

&НаКлиенте
Процедура КомандаВывестиТекстЗапроса(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(Объект.ТекстЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРедактироватьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаРедактироватьПериодОкончание", ЭтотОбъект); 
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПериодПланирования;
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаРедактироватьПериод".
// 
&НаКлиенте 
Процедура КомандаРедактироватьПериодОкончание(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		
		ОповещениеИстина = Новый ОписаниеОповещения("КомандаРедактироватьПериодОкончание_ОтветИстина", ЭтотОбъект, Период); 
		ОповещениеЛожь = Новый ОписаниеОповещения("КомандаРедактироватьПериодОкончание_ОтветЛожь", ЭтотОбъект); 
		
		ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь);
		
	КонецЕсли;	
		
КонецПроцедуры

// Процедура окончание процедуры "КомандаРедактироватьПериодОкончание" при ответе Да.
// 
&НаКлиенте 
Процедура КомандаРедактироватьПериодОкончание_ОтветИстина(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ОчиститьМакет();
	ПериодПланирования = ДополнительныеПараметры;
	Объект.ДатаНачалаПланирования    = ПериодПланирования.ДатаНачала;
	Объект.ДатаОкончанияПланирования = ПериодПланирования.ДатаОкончания;			
	
	мТекущаяДатаНачалаПланирования    = Объект.ДатаНачалаПланирования;
	мТекущаяДатаОкончанияПланирования = Объект.ДатаОкончанияПланирования;	
	
	Модифицированность = Истина;			
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаРедактироватьПериодОкончание" при ответе Нет.
// 
&НаКлиенте 
Процедура КомандаРедактироватьПериодОкончание_ОтветЛожь(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Объект.ДатаНачалаПланирования    = мТекущаяДатаНачалаПланирования;
	Объект.ДатаОкончанияПланирования = мТекущаяДатаОкончанияПланирования;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьМакет(Команда)
	
	ОбновитьМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВводФормулы(Команда)		
	
	Если Не ЭтотОбъект.рфРедакторФормулОткрыт Тогда
		фВводФормулы = НЕ фВводФормулы;
		Элементы.КомандаВводФормулы.Пометка = фВводФормулы;
		Элементы.ФормулаПредставление.ТолькоПросмотр = НЕ фВводФормулы;
		
		Если фВводФормулы Тогда
			
			ОбластьПриемник = ТабДокДанные.ТекущаяОбласть;
			Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОбластьПриемник) 
				 И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьПриемник.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
				 И ( ОбластьПриемник.Расшифровка.Вид = "Значение" ИЛИ ОбластьПриемник.Расшифровка.Вид = "Формула" ) Тогда
				 
				// Вручную формулы можно устанавливать только для ячеек значение.
				фИмяЯчейкиВводФормулы = ТабДокДанные.ТекущаяОбласть.Имя;
				
			Иначе
				
				// Формулу вводить нельзя
				фИмяЯчейкиВводФормулы = "";
				фВводФормулы = Ложь;
				Элементы.КомандаВводФормулы.Пометка = фВводФормулы;			
				Элементы.ФормулаПредставление.ТолькоПросмотр = НЕ фВводФормулы;
				
			КонецЕсли; 
			
		Иначе	
			
			Если НЕ ПустаяСтрока(фИмяЯчейкиВводФормулы) Тогда
				
				ОбластьПриемник = ТабДокДанные.Области.Найти(фИмяЯчейкиВводФормулы);
				
				Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОбластьПриемник) 
					И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьПриемник.Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
					
					Если НЕ ПустаяСтрока(Формула)  Тогда
						
						Если НЕ бит_СтрокиКлиентСервер.ФормулаКорректна(Формула, Истина) Тогда
							
							// Формула введена некорректно - продолжим редактирование.
							фВводФормулы = Истина;
							Элементы.КомандаВводФормулы.Пометка = фВводФормулы;
							Элементы.ФормулаПредставление.ТолькоПросмотр = НЕ фВводФормулы;						
							Возврат;
							
						КонецЕсли; 
						
						МассивАргументы = бит_СтрокиКлиентСервер.РазобратьФормулу(Формула);
						
						Для каждого Арг Из МассивАргументы Цикл
							
							ОбластьПриемник.Расшифровка.Аргументы.Добавить(Арг);
							
							// Необходимо установить зависимости ячеек
							Если фЗависимостиЯчеек.Свойство(Арг) Тогда
								
								фЗависимостиЯчеек[Арг].Добавить(фИмяЯчейкиВводФормулы);
								
							Иначе	
								
								МассивИмен = Новый Массив;
								МассивИмен.Добавить(фИмяЯчейкиВводФормулы);
								фЗависимостиЯчеек.Вставить(Арг, МассивИмен); 
								
							КонецЕсли; 
							
						КонецЦикла; 
						
						// Устанавливаем формулу
						Расшифровка = ОбластьПриемник.Расшифровка;
						Расшифровка.Формула = Формула;
						ОбластьПриемник.ЦветФона = Цвет_Формула;
						Если Объект.ЗащищатьФормулы Тогда
						
							 ОбластьПриемник.Защита = Истина;
						
						КонецЕсли; 
						
						// Записываем формулу в таб. часть формулы чтобы при обновлении дерева она не сбросилась.
						ЗаписатьФормулуВТабЧасть(ОбластьПриемник.Имя, Расшифровка.Формула, Объект.Формулы);					
						Модифицированность    = Истина;
						
						бит_БюджетированиеКлиентСервер.ВычислитьФормулу(ТабДокДанные, ОбластьПриемник);
						ИзменениеСодержимогоОбласти(ОбластьПриемник);
						
						
					Иначе	
						
						// Формула пустая - очистим в расшифровке и таб. части.
						ОчиститьФормулу(ОбластьПриемник);
						
					КонецЕсли;  
					
				КонецЕсли; // Ячейка подходит 	
				
			КонецЕсли; // Указана ячейка ввода формулы
			
		КонецЕсли; // Режим ввода формулы
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьФормулу(Команда)
	
	Если НЕ фВводФормулы Тогда
		
		Обл = ТабДокДанные.ТекущаяОбласть;
		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) 
			 И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			 И Обл.Расшифровка.Вид = "Значение" Тогда
		
		     ОчиститьФормулу(Обл, Истина);
		
		КонецЕсли; 
		
	Иначе
		
		Формула = "";
		ФормулаПредставление = "";
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЦветаПоУмолчанию(Команда)
	
	УстановитьЦветаПоУмолчанию();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокДанныеПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОблМакета = Элементы.ТабДокДанные.ТекущаяОбласть;
	ИзменениеСодержимогоОбласти(ОблМакета);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьФормулы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаОчиститьФормулыОкончание", ЭтотОбъект); 
	ТекстВопроса =  НСтр("ru = 'Все формулы, введенные вручную будут очищены. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаОчиститьФормулы".
// 
&НаКлиенте 
Процедура КомандаОчиститьФормулыОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	КоличествоСтрок = Объект.Формулы.Количество();
	
	Для Сч = 1 По КоличествоСтрок Цикл
		
		Счй = КоличествоСтрок - Сч;
		СтрокаТаблицы = Объект.Формулы[Счй];
		Обл = ТабДокДанные.Области.Найти(СтрокаТаблицы.ИмяЯчейки);
		ОчиститьФормулу(Обл);		
		
	КонецЦикла; 
	
	Объект.Формулы.Очистить();
	Модифицированность = Истина;
	
	фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);
	
	// Зависимости формул, установленных вручную.
	бит_БюджетированиеКлиентСервер.ВосстановитьПользовательскиеФормулы(ТабДокДанные, Объект.Формулы, фЗависимостиЯчеек, Цвет_Формула, Объект.ЗащищатьФормулы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьФормулу(Команда)
	
	флОтказ = Истина;
	мБуфер = Неопределено;
	ОблВыделенная = ТабДокДанные.ТекущаяОбласть;
	
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблВыделенная) Тогда
		
		мБуфер = Новый Массив;		
		
		// Необходимо определить координаты всех ячеек выделенной области
		// и обойти по отдельности эти ячейки.
		
		ДельтаГ = ОблВыделенная.Право - ОблВыделенная.Лево + 1;
		ДельтаВ = ОблВыделенная.Низ   - ОблВыделенная.Верх + 1;
		
		ЛевоНач = ОблВыделенная.Лево;
		ВерхНач = ОблВыделенная.Верх;
		Для нг = 1 По ДельтаГ Цикл
			
			Лево   = ЛевоНач + нг-1;
			
			Для нв = 1 По ДельтаВ Цикл
				
				Верх = ВерхНач + нв-1;
				Обл  = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
				// Если выделенная ячейка является ячейкой вида Значение - сохраним параметры, необходимые для копирования в буфер.
				Расшифровка = Обл.Расшифровка;
				Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
					 И Расшифровка.Вид = "Значение" 
					 И ЗначениеЗаполнено(Расшифровка.Формула) Тогда
					 
					флОтказ = Ложь;
					
					ПарамКопирования = Новый Структура;
					ПарамКопирования.Вставить("ИмяКласса", "БуферКопированияФормыВвода");
					ПарамКопирования.Вставить("Период"   , Расшифровка.Период);
					ПарамКопирования.Вставить("Измерения", Расшифровка.Измерения);
					ПарамКопирования.Вставить("Формула"  , Расшифровка.Формула);
					ПарамКопирования.Вставить("Аргументы", Расшифровка.Аргументы);
					ПарамКопирования.Вставить("Лево"     , Лево);
					ПарамКопирования.Вставить("Верх"     , Верх);
					ПарамКопирования.Вставить("СдвигГор" , нг-1);
					ПарамКопирования.Вставить("СдвигВерт", нв-1);
					
					мБуфер.Добавить(ПарамКопирования);
					
				КонецЕсли;	// ИмяКласса подходит
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЕсли; // ОблМакета подходит
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставитьФормулу(Команда)
	
	Если ТипЗнч(мБуфер) = Тип("Массив") Тогда
		
		Обл = ТабДокДанные.ТекущаяОбласть;		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) 
			 И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			 И Обл.Расшифровка.Вид = "Значение" Тогда
			 
			ПараметрыВставки = Новый Структура; 
			ПараметрыВставки.Вставить("ИмяОбласти", Обл.Имя);
			ПараметрыВставки.Вставить("Верх", Обл.Верх);
			ПараметрыВставки.Вставить("Лево", Обл.Лево);
			ПараметрыВставки.Вставить("Низ", Обл.Низ);
			ПараметрыВставки.Вставить("Право",Обл.Право);
												  
			ВыполнитьКопированиеДанных(мБуфер, ПараметрыВставки);
			ТабДокДанныеПриАктивизацииОбласти(Элементы.ТабДокДанные);
			
		КонецЕсли; // ОблМакета подходит
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьФормуВвода(Команда)

	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("СоздатьФормуВопросЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Элемент будет записан. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе
		
		бит_РаботаСДиалогамиКлиент.ОткрытьНовуюФормуВводаБюджета(Объект.Ссылка);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "СоздатьФормуВопросЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура СоздатьФормуВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флОК = Записать();
		
		Если флОК Тогда
			
			бит_РаботаСДиалогамиКлиент.ОткрытьНовуюФормуВводаБюджета(Объект.Ссылка);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИзмеренияСпособЗаполнения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Измерения.Имя", ВидСравненияКомпоновкиДанных.Равно, "Сценарий");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Измерения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Измерения.Отключено", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИзмеренияЗначениеПоУмолчанию");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Измерения.СпособЗаполнения", ВидСравненияКомпоновкиДанных.Равно, 
		Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
КонецПроцедуры
 
// Процедура заполняет кэш значений.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь");
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ВидСравненияРавно", ВидСравнения.Равно);
	фКэшЗначений.Вставить("НастройкиАналитик", бит_Бюджетирование.НастройкиИзмеренийБюджетирования());
	фКэшЗначений.Вставить("ВыделятьАргументы", бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("ВыделятьАргументыФормулФормыВвода", ТекПользователь));
	
КонецПроцедуры

// Дозаполняет служебные поля таблицы Измерения, необходимые для отображения.
// 
&НаСервере
Процедура ДоработатьТаблицуИзмерения()
	
	// Установка видимости дополнительных измерений.
	ИзмеренияПроизвольные = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("все","имя","массив");
	
	Для каждого Имя Из ИзмеренияПроизвольные Цикл
		
		Настройка = фКэшЗначений.НастройкиАналитик[Имя];
		
		СтрОтбор = Новый Структура("Имя", Имя);
		Строки = Объект.Измерения.НайтиСтроки(СтрОтбор);
		
		Если Строки.Количество() > 0 Тогда
			
			ПерваяСтрока = Строки[0];
			Если Настройка = Неопределено Тогда
				ПерваяСтрока.Отключено = Истина;
			Иначе
				ПерваяСтрока.Представление = Настройка.Синоним;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; // Измерения произвольные
	
КонецПроцедуры

// Функция определяет доступен ли для выбора Бюджет при даной настройке формы.
// 
// Возвращаемое значение:
//  флДоступностьБюджета - Булево.
// 
&НаСервере
Функция ОпределитьДоступностьБюджета()

	флДоступностьБюджета = Ложь;
	
	// Бюджет доступен только если первый разворот идет по статьям.
	СтрОтбор = Новый Структура("СпособЗаполнения", Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать);
	МассивСтрок = Объект.Измерения.НайтиСтроки(СтрОтбор);
	Если МассивСтрок.Количество() > 0 Тогда
	
		СтрокаПервая = МассивСтрок[0];
	    флДоступностьБюджета = ?(СтрокаПервая.Имя = "СтатьяОборотов", Истина, Ложь);		
		
	КонецЕсли; 

	Возврат флДоступностьБюджета;
	
КонецФункции

// Процедура управляем видимостью/доступностью элементов формы. 
// 
&НаСервере
Процедура УстановитьВидимость()

	флДоступность = ОпределитьДоступностьБюджета();
	Элементы.Бюджет.Доступность                              = флДоступность;
	Элементы.ИспользоватьКоэффициентыСтатейБюджета.Видимость = ЗначениеЗаполнено(Объект.Бюджет);
	
	ЭтоФиксМакет = ?(Объект.Вид = Перечисления.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет, Истина, Ложь);
	
	Элементы.ГруппаСтраницаМакет.Видимость = ЭтоФиксМакет;

КонецПроцедуры

// Процедура очищает бюджет в случае, если он недоступен.
// 
&НаСервере
Процедура ОчиститьБюджет()

	Если НЕ ОпределитьДоступностьБюджета() Тогда
	
		Объект.Бюджет = Справочники.бит_Бюджеты.ПустаяСсылка();
	
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет действия при окончании редактирования таб. поля измерения.
// 
&НаСервере
Процедура ИзмеренияОкончаниеРедактирования()

	УстановитьВидимость();
	ОчиститьБюджет();

КонецПроцедуры

// Обновляет текст запроса согласно настройке измерений. 
// 
&НаСервере
Процедура ОбновитьТекстЗапроса()

	СтрОтбор = Новый Структура("СпособЗаполнения", Перечисления.бит_СпособыЗаполненияИзмеренийВФормахВвода.Разворачивать);
	Строки = Объект.Измерения.НайтиСтроки(СтрОтбор);
	
	Если Строки.Количество() > 0 Тогда
		
		// Проверка на двойной разворот по статьи
		Отказ = Ложь;
		Справочники.бит_НастройкиФормВводаБюджета.ПроверитьМножественныйРазворотПоСтатьям(Объект.Измерения, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		
		ТекОбъект = РеквизитФормыВЗначение("Объект");
		Объект.ТекстЗапроса = ТекОбъект.СформироватьТекстЗапроса();
		
		АдресКомпоновки = Справочники.бит_НастройкиФормВводаБюджета.ИнициализироватьКомпоновщик(Объект.ТекстЗапроса, 
							Компоновщик, УникальныйИдентификатор, , Объект.Бюджет);
	КонецЕсли; 
	
КонецПроцедуры

// Обрабатывает изменение страницы. 
// 
&НаСервере
Процедура ИзменениеСтраницы()

	ОбновитьТекстЗапроса();
	УстановитьВидимость();
	ОчиститьБюджет();

КонецПроцедуры

// Выполняет заполнение табличной части "Измерения" по умолчанию. 
// 
&НаСервере
Процедура ЗаполнитьИзмеренияПоУмолчанию()
	
	СпрОб = РеквизитФормыВЗначение("Объект");
	СпрОб.ЗаполнитьИзмеренияПоУмолчанию();
	ЗначениеВДанныеФормы(СпрОб, Объект);
	
	ОбновитьТекстЗапроса();
	
	ДоработатьТаблицуИзмерения();
	
КонецПроцедуры

// Процедура проверяет доступность настройки для редактирования.
// 
// Параметры:
//  Отказ           - Булево.
//  Заголовок       - Строка.
//  СтатусСообщения - СтатусСообщения.
// 
&НаСервере
Процедура ПроверитьВозможностьРедактирования(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	               |	бит_ФормаВводаБюджета.Ссылка
	               |ИЗ
	               |	Документ.бит_ФормаВводаБюджета КАК бит_ФормаВводаБюджета
	               |ГДЕ
	               |	бит_ФормаВводаБюджета.НастройкаФормы = &НастройкаФормы
	               |	И бит_ФормаВводаБюджета.Проведен";
				   
    Если Метаданные.Документы.Найти("бит_АктуализацияБюджета")<> Неопределено Тогда
	
		Запрос.Текст = Запрос.Текст +"
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	               |	бит_АктуализацияБюджета.Ссылка
	               |ИЗ
	               |	Документ.бит_АктуализацияБюджета КАК бит_АктуализацияБюджета
	               |ГДЕ
	               |	бит_АктуализацияБюджета.НастройкаФормы = &НастройкаФормы
	               |	И бит_АктуализацияБюджета.Проведен";
		
	
	КонецЕсли; 				   
	
	Запрос.УстановитьПараметр("НастройкаФормы",Объект.Ссылка);	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		
		ТекстСообщения = "";
		ТекстСообщения =  НСтр("ru = 'Редактирование настройки форм ввода бюджета ""%1%"" запрещено. Настройка используется в проведенных документах:'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Объект.Ссылка);
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = ТекстСообщения+Символы.ПС+"- "+Выборка.Ссылка;			
		КонецЦикла; 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "Объект",Отказ);
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает изменение бюджета. 
// 
&НаСервере
Процедура ИзменениеБюджета()

	УстановитьВидимость();

КонецПроцедуры

// Процедура выполняет очистку макета.
// 
&НаСервере
Процедура ОчиститьМакет()

	ТабДокДанные.Очистить();

КонецПроцедуры

// Процедура обновляет макет формы ввода. 
// 
&НаСервере
Процедура ОбновитьМакет()

	Если НЕ ПроверитьЗаполнение() Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	СинхронизироватьДополнительныеИтогиПериодов(Объект, ДополнительныеИтогиПериодов);
	
	ТабДокДанные.Очистить();
	
	КопироватьПорядокКомпоновщика(Компоновщик, "ФиксированныеНастройки", "Настройки");	
	КопироватьОтборКомпоновщика(Компоновщик, "ФиксированныеНастройки", "Настройки");
	Компоновщик.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	НастройкиКомпоновщика = Компоновщик.ПолучитьНастройки();
	КопироватьОтборКомпоновщика(Компоновщик, "Настройки", "ФиксированныеНастройки");	
	
	КомпоновщикВрем = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресКомпоновкиВрем = Документы.бит_ФормаВводаБюджета.ИнициализироватьКомпоновщик(Объект.ТекстЗапроса, КомпоновщикВрем, УникальныйИдентификатор);
	
	ПараметрыОбновленияДерева = Документы.бит_ФормаВводаБюджета.НовыеПараметрыДерева();
	ПараметрыОбновленияДерева.АдресКомпоновки			= АдресКомпоновкиВрем;
	ПараметрыОбновленияДерева.НастройкиКомпоновщика		= НастройкиКомпоновщика;
	ПараметрыОбновленияДерева.Периодичность				= Объект.ПериодичностьПланирования;
	ПараметрыОбновленияДерева.ПродолжительностьИнтервала= Объект.ПродолжительностьИнтервала;	
	ПараметрыОбновленияДерева.ДатаНачалаПланирования	= Объект.ДатаНачалаПланирования;
	ПараметрыОбновленияДерева.ДатаОкончанияПланирования	= Объект.ДатаОкончанияПланирования;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("НастройкиКомпоновщика", НастройкиКомпоновщика);	
	СпрОб = РеквизитФормыВЗначение("Объект");
	СпрОб.СохранитьНастройкиПостроителя(СтруктураНастройки);
	
	Документы.бит_ФормаВводаБюджета.ОбновитьДеревоДанных(ТабДокДанные, СпрОб, СпрОб.ТекстЗапроса, ПараметрыОбновленияДерева);
	
	фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);	
	// Зависимости формул, установленных вручную.
	бит_БюджетированиеКлиентСервер.ВосстановитьПользовательскиеФормулы(ТабДокДанные, Объект.Формулы, фЗависимостиЯчеек, Цвет_Формула, Объект.ЗащищатьФормулы);	
	
	Модифицированность = Истина;

КонецПроцедуры

// Процедура обрабатывает изменение цвета. 
// Выполняется преобразование в HEX и установка полученного значения в реквизит объекта.
// 
// Параметры:
//  ИмяРеквизитаЦвет  - Строка
// 
&НаСервере
Процедура ИзменениеЦвета(ИмяРеквизитаЦвет)

	ЦветШестн = Обработки.бит_ПреобразованияЦветов.ПрообразоватьЦвет(ЭтотОбъект[ИмяРеквизитаЦвет]);
	
	Если НЕ ЗначениеЗаполнено(ЦветШестн) Тогда
	
		ЦветШестн = "#FFFFFF";
	
	КонецЕсли; 

	Объект[ИмяРеквизитаЦвет] = ЦветШестн;
	
	ИзмененЦвет = Истина;
	
КонецПроцедуры

// Процедура устанавливает цвета макета по-умолчанию. 
// 
// 
&НаСервере
Процедура УстановитьЦветаПоУмолчанию()

	СпрОб = РеквизитФормыВЗначение("Объект");
	СпрОб.ЦветаПоУмолчанию();
	ЗначениеВДанныеФормы(СпрОб, Объект);
	
	ПреобразоватьЦвета();

КонецПроцедуры

// Процедура преобразовывает цвета из шестнадцатеричного представлия в RGB. 
// 
&НаСервере
Процедура ПреобразоватьЦвета()

	Цвет_Группа  = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Группа);
	Цвет_Ячейка  = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Ячейка);
	Цвет_Формула = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Формула);	
	Цвет_Аргумент = Обработки.бит_ПреобразованияЦветов.HexToColor(Объект.Цвет_Аргумент);		
	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СинхронизироватьДополнительныеИтогиПериодов(ТекущийОбъект, НастройкаДопИтогов)
	
	ТекущийОбъект.ДополнительныеИтоги.Очистить();	
	
	Для каждого СтрокаТаблицы Из НастройкаДопИтогов Цикл
		
		Если СтрокаТаблицы.Выполнять Тогда
			
			НоваяСтрока = ТекущийОбъект.ДополнительныеИтоги.Добавить();
			НоваяСтрока.Периодичность   = СтрокаТаблицы.Периодичность;
			НоваяСтрока.НарастающийИтог = СтрокаТаблицы.НарастающийИтог;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипыПоУмолчанию(Аналитика)
	
	МассивВыбора = РегистрыСведений.бит_НазначениеДополнительныхИзмерений.ПолучитьМассивТиповПоУмолчанию(Аналитика);	
	Возврат МассивВыбора;
	
КонецФункции

&НаКлиенте
Процедура РедакторФормул(Команда)
	
	Если Не Элементы.КомандаВводФормулы.Пометка Тогда
		ОбластьПриемник = ТабДокДанные.ТекущаяОбласть;
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОбластьПриемник) 
			 И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьПриемник.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			 И (ОбластьПриемник.Расшифровка.Вид = "Значение" ИЛИ ОбластьПриемник.Расшифровка.Вид = "Формула") Тогда
			 
			// Вручную формулы можно устанавливать только для ячеек значение.
			фИмяЯчейкиВводФормулы = ТабДокДанные.ТекущаяОбласть.Имя;
	    	рф_Открыть();
			Если ЭтотОбъект.рфРедакторФормулОткрыт Тогда
				рфФормула = ФормулаПредставление;
			КонецЕсли;	
		Иначе
			
			// Формулу вводить нельзя
			фИмяЯчейкиВводФормулы = "";
			фВводФормулы = Ложь;
			Элементы.КомандаВводФормулы.Пометка = фВводФормулы;			
			Элементы.ФормулаПредставление.ТолькоПросмотр = НЕ фВводФормулы;
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КопироватьПорядокКомпоновщика(Компоновщик, ИмяНастроекИсточник, ИмяНастроекПриемник)
	
	// Копируем фиксированные настройки в настройки.
	Компоновщик[ИмяНастроекПриемник].Порядок.Элементы.Очистить();
	Для каждого ЭлПорядок Из Компоновщик[ИмяНастроекИсточник].Порядок.Элементы Цикл
		
		ЭлПорядокНовый = Компоновщик[ИмяНастроекПриемник].Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлПорядокНовый, ЭлПорядок);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура КопироватьОтборКомпоновщика(Компоновщик, ИмяНастроекИсточник, ИмяНастроекПриемник)
	
	// Копируем фиксированные настройки в настройки.
	Компоновщик[ИмяНастроекПриемник].Отбор.Элементы.Очистить();
	КоллекцияИсточник = Компоновщик[ИмяНастроекИсточник].Отбор.Элементы;
	КоллекцияПриемник = Компоновщик[ИмяНастроекПриемник].Отбор.Элементы;
	бит_МеханизмПолученияДанных.КопироватьКоллекциюЭлементовОтбора(КоллекцияИсточник, КоллекцияПриемник);
	
КонецПроцедуры

//	Процедура обрабатывает изменения при работе с Редактором формул.
// 
&НаКлиенте
Процедура ПринятьИзменения()
	
	ОбластьПриемник = ТабДокДанные.Области.Найти(фИмяЯчейкиВводФормулы);
			
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОбластьПриемник) 
		И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(ОбластьПриемник.Расшифровка, "РасшифровкаЯчейкиФормыВвода")  Тогда
		
		Если НЕ ПустаяСтрока(ЭтотОбъект.рфФормула)  Тогда
			
			Если НЕ бит_СтрокиКлиентСервер.ФормулаКорректна(ЭтотОбъект.рфФормула, Истина) Тогда
				
				// Формула введена некорректно - продолжим редактирование.
				фВводФормулы = Истина;
				Элементы.КомандаВводФормулы.Пометка = фВводФормулы;
				Элементы.ФормулаПредставление.ТолькоПросмотр = НЕ фВводФормулы;						
				Возврат;
				
			КонецЕсли; 
			
			Если ПустаяСтрока(Формула) Тогда
				Формула = бит_БюджетированиеКлиент.ПолучитьФормулуИзПредставления(ТабДокДанные, ЭтотОбъект.рфФормула);
			КонецЕсли;
			
			МассивАргументы = бит_СтрокиКлиентСервер.РазобратьФормулу(Формула);
			
			Для каждого Арг Из МассивАргументы Цикл
				
				ОбластьПриемник.Расшифровка.Аргументы.Добавить(Арг);
				
				// Необходимо установить зависимости ячеек
				Если фЗависимостиЯчеек.Свойство(Арг) Тогда
					
					фЗависимостиЯчеек[Арг].Добавить(фИмяЯчейкиВводФормулы);
					
				Иначе	
					
					МассивИмен = Новый Массив;
					МассивИмен.Добавить(фИмяЯчейкиВводФормулы);
					фЗависимостиЯчеек.Вставить(Арг, МассивИмен); 
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			// Устанавливаем формулу
			Расшифровка = ОбластьПриемник.Расшифровка;
			Расшифровка.Формула = Формула;
			Если Объект.ЗащищатьФормулы Тогда
			
				ОбластьПриемник.Защита = Истина;
			
			КонецЕсли; 
			ОбластьПриемник.ЦветФона = Цвет_Формула;
			
			// Записываем формулу в таб. часть формулы чтобы при обновлении дерева она не сбросилась.
			ЗаписатьФормулуВТабЧасть(ОбластьПриемник.Имя, Расшифровка.Формула, Объект.Формулы);					
			Модифицированность    = Истина;
			
			бит_БюджетированиеКлиентСервер.ВычислитьФормулу(ТабДокДанные, ОбластьПриемник);
			ИзменениеСодержимогоОбласти(ОбластьПриемник);
			
			
		Иначе	
			
			// Формула пустая - очистим в расшифровке и таб. части.
			ОчиститьФормулу(ОбластьПриемник);
			
		КонецЕсли;  
		
	КонецЕсли; // Ячейка подходит
	
КонецПроцедуры

// Процедура обрабатывает изменение содержимого области. 
// 
&НаКлиенте
Процедура ИзменениеСодержимогоОбласти(ОблМакета)
	
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		
		Рез = бит_БюджетированиеКлиентСервер.ВычислитьЗависимыеФормулы(ТабДокДанные, фЗависимостиЯчеек, ОблМакета.Имя);
		Если ТипЗнч(Рез) = Тип("Структура") И Рез.Статус = "Ошибка" Тогда
		
			ОчиститьФормулу(ОблМакета, Истина);
		
		КонецЕсли; 
		Модифицированность = Истина;
		
	КонецЕсли; // ОблМакета подходит
	
КонецПроцедуры

// Функция выводит вопрос о возможности продолжения с очисткой данных.
// 
// Возвращаемое значение:
//  флПродолжить - Булево.
// 
&НаКлиенте
Функция ЗадатьВопросОбОчисткеДанных(ОповещениеИстина, ОповещениеЛожь) 
	
	Если Объект.Вид = ПредопределенноеЗначение("Перечисление.бит_ВидыНастроекФормВводаБюджета.ФиксированныйМакет") 
		 И ТабДокДанные.ВысотаТаблицы > 0 Тогда
		 
		СтруктураОповещений = Новый Структура("ОповещениеИстина, ОповещениеЛожь", ОповещениеИстина, ОповещениеЛожь);  
		Оповещение = Новый ОписаниеОповещения("ЗадатьВопросОбОчисткеДанныхОкончание", ЭтотОбъект, СтруктураОповещений); 
		ТекстВопроса =  НСтр("ru = 'Макет будет очищен. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеИстина);
		
	КонецЕсли; 
	
КонецФункции

// Процедура окончание процедуры "ЗадатьВопросОбОчисткеДанных".
// 
&НаКлиенте 
Процедура ЗадатьВопросОбОчисткеДанныхОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеДанные.ОповещениеИстина);
		
	Иначе	
		ВыполнитьОбработкуОповещения(ДополнительныеДанные.ОповещениеЛожь);
	КонецЕсли; 
                
КонецПроцедуры

// Процедура очищает формулу в области и очищает строку соответствующую формуле в табличной части Формулы.
// 
// Параметры:
//  Обл - ТабличныйДокумент
// 
&НаКлиенте
Процедура ОчиститьФормулу(Обл, ОбновитьЗависимостиЯчеек = Ложь)
	
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) 
		И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") Тогда
		
		Обл.Расшифровка.Формула = "";
		Обл.Расшифровка.Аргументы = Новый Массив;
		Обл.ЦветФона = Цвет_Ячейка;
		Обл.Защита   = Ложь;
		
		СтрОтбор = Новый Структура("ИмяЯчейки", Обл.Имя);
		МассивСтрок = Объект.Формулы.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			Объект.Формулы.Удалить(СтрокаТаблицы);
			
		КонецЦикла; 
		
		Формула = "";
		ФормулаПредставление = "";
		Модифицированность = Истина;
		
		Если ОбновитьЗависимостиЯчеек Тогда
			
			фЗависимостиЯчеек = бит_БюджетированиеКлиентСервер.ПолучитьЗависимостиЯчеек(ТабДокДанные);
			
			// Зависимости формул, установленных вручную.
			бит_БюджетированиеКлиентСервер.ВосстановитьПользовательскиеФормулы(ТабДокДанные, Объект.Формулы, фЗависимостиЯчеек, Цвет_Формула, Объект.ЗащищатьФормулы);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура записывает формулу в табличную часть Формулы.
// 
// Параметры:
//  ИмяОбласти - Строка.
//  Формула - Строка
//  ТабЧасть - ТабличнаяЧасть
// 
&НаКлиенте
Процедура ЗаписатьФормулуВТабЧасть(ИмяОбласти, Формула, ТабЧасть)
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ИмяЯчейки", ИмяОбласти);
	
	МассивСтрок = ТабЧасть.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		СтрокаФормулы = ТабЧасть.Добавить();
		СтрокаФормулы.ИмяЯчейки = ИмяОбласти;
		
	Иначе	
		
		СтрокаФормулы = МассивСтрок[0];
		
	КонецЕсли; 
	
	СтрокаФормулы.Формула = Формула;
	
КонецПроцедуры

// Процедура выполняет копирование данных из буфера. 
// 
// Параметры:
//  Буфер      - Массив.
//  ПараметрыВставки - Структура
// 
&НаКлиенте
Процедура ВыполнитьКопированиеДанных(Буфер, ПараметрыВставки)
	
	КоличествоСкопированных = Буфер.Количество();
	Приемники = Новый Массив;
	// 
	// определение ячеек приемников
	Если КоличествоСкопированных = 0 Тогда
		
		// Ничего делать не нужно
		
	ИначеЕсли КоличествоСкопированных = 1 Тогда
		
		// Если скопирована одна ячейка, то в случае выделения области ее нужно вставить во вся ячейки области.
		
		ДельтаГ = ПараметрыВставки.Право - ПараметрыВставки.Лево + 1;
		ДельтаВ = ПараметрыВставки.Низ   - ПараметрыВставки.Верх + 1;
		
		ЛевоНач = ПараметрыВставки.Лево;
		ВерхНач = ПараметрыВставки.Верх;
		Для нг = 1 По ДельтаГ Цикл
			
			Лево   = ЛевоНач + нг-1;
			
			Для нв = 1 По ДельтаВ Цикл
				
				Верх = ВерхНач + нв-1;
				Обл  = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
				// Если выделенная ячейка является ячейкой вида Значение - запомним координаты.
				Расшифровка = Обл.Расшифровка;
				Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
					И Расшифровка.Вид = "Значение" Тогда
					
					Приемники.Добавить(Обл);
					
				КонецЕсли;	// ИмяКласса подходит
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	Иначе	
		
		// Если копируется более одной ячейки - 
		// выполняем копирование области начиная с левого верхнего угла выделенной области.
		Обл = ТабДокДанные.Область(ПараметрыВставки.Верх, ПараметрыВставки.Лево, ПараметрыВставки.Верх, ПараметрыВставки.Лево);
		Расшифровка = Обл.Расшифровка;
		Если бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			И Расшифровка.Вид = "Значение" Тогда
			
			Приемники.Добавить(Обл);
			
		КонецЕсли;	// ИмяКласса подходит
		
	КонецЕсли; 
	
	// Выполнение копирования
	Для каждого ОбластьПриемник Из Приемники  Цикл
		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОбластьПриемник) Тогда
			
			ЛевоНач = ОбластьПриемник.Лево;
			ВерхНач = ОбластьПриемник.Верх;
			
			Для каждого ПараметрыКопирования Из Буфер Цикл
				
				Лево = ЛевоНач+ПараметрыКопирования.СдвигГор;
				Верх = ВерхНач+ПараметрыКопирования.СдвигВерт;
				
				Обл = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
				
					Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл) 
						 И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
						 И Обл.Расшифровка.Вид = "Значение"  Тогда
					
						 Расшифровка = Обл.Расшифровка;
						 Расшифровка.Формула   = ПараметрыКопирования.Формула;
						 Расшифровка.Аргументы = ПараметрыКопирования.Аргументы;
						 Если Объект.ЗащищатьФормулы Тогда
						 
						 	Обл.Защита = Истина;
						 
						 КонецЕсли; 
					     Обл.ЦветФона = Цвет_Формула;
						 
						 // Сдвиг относительно первоначальной скопированной ячейки.
						 ДельтаГ = ЛевоНач - ПараметрыКопирования.Лево+ПараметрыКопирования.СдвигГор;
						 ДельтаВ = ВерхНач - ПараметрыКопирования.Верх+ПараметрыКопирования.СдвигВерт;
						 
						 ВыполнитьСдвигФормулы(Расшифровка, ДельтаГ, ДельтаВ, РежимСдвигаФормулы);
						 
						 Для каждого Арг Из  Расшифровка.Аргументы Цикл
							 
							 // Необходимо установить зависимости ячеек
							 Если фЗависимостиЯчеек.Свойство(Арг) Тогда
								 
								 фЗависимостиЯчеек[Арг].Добавить(Обл.Имя);
								 
							 Иначе	
								 
								 МассивИмен = Новый Массив;
								 МассивИмен.Добавить(Обл.Имя);
								 фЗависимостиЯчеек.Вставить(Арг, МассивИмен); 
								 
							 КонецЕсли; 
							 
						 КонецЦикла; 
						 
						 // Записываем формулу в таб. часть формулы чтобы при обновлении дерева она не сбросилась.
						 ЗаписатьФормулуВТабЧасть(Обл.Имя, Расшифровка.Формула, Объект.Формулы);
						 
					     бит_БюджетированиеКлиентСервер.ВычислитьФормулу(ТабДокДанные, Обл);
						 ИзменениеСодержимогоОбласти(Обл);
					     Модифицированность    = Истина;						 

					КонецЕсли; 
				
			КонецЦикла; // По данным копирования
			
		КонецЕсли;  // Область приемник подходит
		
	КонецЦикла; // Приемники
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСдвигФормулы(Расшифровка, ДельтаГ, ДельтаВ, РежимСдвигаФормулы)
	
	Если НЕ РежимСдвигаФормулы = 1 И НЕ РежимСдвигаФормулы = 2 И НЕ РежимСдвигаФормулы = 3 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Расшифровка.Аргументы = бит_РаботаСКоллекциямиКлиентСервер.УдалитьПовторяющиесяЭлементыМассива(Расшифровка.Аргументы);
	
	АргСоотв = Новый Соответствие;
	
	Для й = 0 По Расшифровка.Аргументы.ВГраница() Цикл
		
		АргСтарый = Расшифровка.Аргументы[й];
		
		ИмяАрг = "%Арг_"+Формат(й+1, "ЧГ=")+"%";
		Расшифровка.Формула = СтрЗаменить(Расшифровка.Формула, АргСтарый, ИмяАрг);
		
		ОблНач = ТабДокДанные.Области.Найти(АргСтарый);
		Лево = ОблНач.Лево+?(РежимСдвигаФормулы = 3 ИЛИ РежимСдвигаФормулы = 1, ДельтаГ, 0);
		Верх = ОблНач.Верх+?(РежимСдвигаФормулы = 3 ИЛИ РежимСдвигаФормулы = 2, ДельтаВ, 0);
		Обл = ТабДокДанные.Область(Верх, Лево, Верх, Лево);
		
		Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(Обл)  
			И бит_ОбщегоНазначенияКлиентСервер.ПроверитьИмяКласса(Обл.Расшифровка, "РасшифровкаЯчейкиФормыВвода") 
			И (Обл.Расшифровка.Вид = "Значение" 
			   ИЛИ Обл.Расшифровка.Вид = "Формула")  Тогда
			
			Расшифровка.Аргументы[й] = Обл.Имя;
			
		Иначе
			
			Расшифровка.Аргументы[й] = АргСтарый;
			
		КонецЕсли; 
		
		АргСоотв.Вставить(ИмяАрг, Расшифровка.Аргументы[й]);
		
	КонецЦикла;
	
	Для каждого КиЗ Из АргСоотв Цикл
		
		Расшифровка.Формула = СтрЗаменить(Расшифровка.Формула, КиЗ.Ключ, КиЗ.Значение);
		
	КонецЦикла; 
	
КонецПроцедуры

#Область ПроцедурыИФункцииДляРаботыСРедакторомФормул

&НаКлиенте
Процедура рф_АнализЗначенияВводФормул()

	бит_РедакторФормулКлиент.АнализЗначенияВводФормул(ЭтотОбъект, ТабДокДанные, ПравилаЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура рф_Открыть()

	бит_РедакторФормулКлиент.ОткрытьРедакторФормул(ЭтотОбъект, ТабДокДанные);
	
КонецПроцедуры

&НаКлиенте 
Процедура рф_РедакторФормул_ЗавершитьРедактированиеОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПринятьИзменения();   						
	КонецЕсли; 
	
	бит_РедакторФормулКлиентСервер.рф_ЗакрытьСервер(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_ПростыеКоманды(Команда)
	
	бит_РедакторФормулКлиент.РедакторФормул_ПростыеКоманды(Команда, ЭтотОбъект);
				
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_Очистить(Команда)
	
	бит_РедакторФормулКлиент.РедакторФормул_Очистить(ЭтотОбъект);  	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_Функция(Команда)
	
	бит_РедакторФормулКлиент.РедакторФормул_Функция(Команда, ЭтотОбъект);  	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_Вернуть()

	бит_РедакторФормулКлиент.РедакторФормул_Вернуть(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_ЗавершитьРедактирование(Команда)
	
	Если ЭтотОбъект.рфРедакторФормулОткрыт Тогда
		Оповещение = Новый ОписаниеОповещения("рф_РедакторФормул_ЗавершитьРедактированиеОкончание", ЭтотОбъект); 
		Если Команда.Имя = "РедакторФормул_ОК" Тогда
			ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		Иначе	
			Если ЭтотОбъект.рфФормула <> ЭтотОбъект.рфСтараяФормула Тогда
				ТекстВопроса = НСтр("ru = 'Формула изменена, принять изменения?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Нет);
			Иначе
				ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Нет);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранныеОбластиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	бит_РедакторФормулКлиент.ВыбранныеОбластиВыбор(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтрокаНазадОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	бит_РедакторФормулКлиент.СтрокаНазадОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФормулаПриИзменении(Элемент)

	бит_РедакторФормулКлиент.ПриИзмененииФормулы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти  

#КонецОбласти
