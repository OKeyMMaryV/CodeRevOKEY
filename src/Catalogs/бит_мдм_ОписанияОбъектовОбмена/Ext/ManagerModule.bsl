#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс
	
// Функция выполняет поиск элемента справочника.
// 
// Параметры:
//   ВидИБ      - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//   ВидОбъекта - ПеречислениеСсылка.бит_мдм_ВидыОбъектовОбмена.
//   Имя        - Строка.
// 
// Возвращаемое значение:
//  НайденныйЭлемент - СправочникСсылка.бит_мдм_ОписанияОбъектовОбмена.
// 
Функция НайтиЭлемент(ВидИБ, ВидОбъекта, Имя) Экспорт

	НайденныеЭлемент = Справочники.бит_мдм_ОписанияОбъектовОбмена.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Имя"  , Имя);
	Запрос.УстановитьПараметр("ВидИБ", ВидИБ);
	Запрос.УстановитьПараметр("Вид"  , ВидОбъекта);
	Запрос.Текст = 
    "ВЫБРАТЬ
    |	ТабСпр.Ссылка
    |ИЗ
    |	Справочник.бит_мдм_ОписанияОбъектовОбмена КАК ТабСпр
    |ГДЕ
    |	ТабСпр.Владелец = &ВидИБ
    |	И ТабСпр.Вид = &Вид
    |	И ТабСпр.Имя = &Имя";
	
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		НайденныйЭлемент = Выборка.Ссылка;
	
	КонецЕсли; 

	Возврат НайденныйЭлемент;
	
КонецФункции // НайтиЭлемент()

// Функция получает описания реквизитов объекта обмена.
// 
// Параметры:
//   ОписаниеОбъекта - СправочникСсылка.бит_мпд_ОписанияОбъектовОбмена.
// 
// Возвращаемое значение:
//  ОписанияРеквизитов - Структура.
// 
Функция ПолучитьОписанияРеквизитов(ОписаниеОбъекта) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОписаниеОбъекта", ОписаниеОбъекта);
	Запрос.Текст = 
    "ВЫБРАТЬ *
    |ИЗ
    |	Справочник.бит_мдм_ОписанияРеквизитовОбъектовОбмена КАК ТабСпр
    |ГДЕ
    |	ТабСпр.Владелец = &ОписаниеОбъекта";
	
				   
	ОписанияРеквизитов = Новый Структура;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Описание = Новый Структура;
		Описание.Вставить("Ссылка"           , Выборка.Ссылка);
		Описание.Вставить("Имя"              , Выборка.Имя);
		Описание.Вставить("Вид"              , Выборка.Вид);
		Описание.Вставить("ТипЗнчСтр"        , Выборка.ТипЗнчСтр);
		Описание.Вставить("Обязательный"     , Выборка.Обязательный);
		Описание.Вставить("ИмяОбъекта"       , Выборка.ИмяОбъекта);
		Описание.Вставить("ВидОбъекта"       , Выборка.ВидОбъекта);
		Описание.Вставить("ИмяТабличнойЧасти", Выборка.ИмяТабличнойЧасти);
		Описание.Вставить("Отключено"        , Выборка.Отключено);
		
		ОписанияРеквизитов.Вставить(Выборка.Имя, Описание);
	
	КонецЦикла; 

	Возврат ОписанияРеквизитов;
	
КонецФункции // ПолучитьОписанияРеквизитов()

// Функция эмулирует метаданные объекта обмена.
// 
// Параметры:
//  ОписаниеОбъекта - СправочникСсылка.бит_мдм_ОписанияОбъектовОбмена.
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
Функция ЭмулироватьМетаданные(ОписаниеОбъекта, ВидКоллекции = "Структура") Экспорт

	Если ВидКоллекции = "Структура" Тогда
		
		КоллекцияРеквизиты            = Новый Структура;
		КоллекцияСтандартныеРеквизиты = Новый Структура;
		КоллекцияИзмерения            = Новый Структура;
		КоллекцияРесурсы              = Новый Структура;
		КоллекцияПризнакиУчета        = Новый Структура;
		КоллекцияДанныеСубконто       = Новый Структура;
		КоллекцияТабЧасти             = Новый Структура;
		
	Иначе	
		
		КоллекцияРеквизиты            = Новый Массив;
		КоллекцияСтандартныеРеквизиты = Новый Массив;
		КоллекцияИзмерения            = Новый Массив;
		КоллекцияРесурсы              = Новый Массив;
		КоллекцияПризнакиУчета        = Новый Массив;
		КоллекцияДанныеСубконто       = Новый Массив;		
		КоллекцияТабЧасти             = Новый Массив;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОписаниеОбъекта) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОписаниеОбъекта", ОписаниеОбъекта);
		Запрос.Текст = 
        "ВЫБРАТЬ
        |	ТабРекв.Вид КАК Вид,
        |	ТабРекв.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
        |	ТабРекв.Имя,
        |	ТабРекв.ТипЗнчСтр,
        |	ТабРекв.ВидОбъекта,
        |	ТабРекв.ИмяОбъекта,
        |	ТабРекв.Обязательный,
        |	ТабРекв.Отключено,
        |	ТабРекв.Наименование,
        |	ТабРекв.Ссылка КАК ОписаниеРеквизита,
        |	ТабРекв.Составной
        |ИЗ
        |	Справочник.бит_мдм_ОписанияРеквизитовОбъектовОбмена КАК ТабРекв
        |ГДЕ
        |	ТабРекв.Владелец = &ОписаниеОбъекта
        |	И НЕ ТабРекв.Отключено
        |ИТОГИ ПО
        |	ИмяТабличнойЧасти";
		
		
		Результат = Запрос.Выполнить();
		
		ВыборкаТЧ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаТЧ.Следующий() Цикл
			
			Если (Найти(ВыборкаТЧ.ИмяТабличнойЧасти,"$") = 0 И ЗначениеЗаполнено(ВыборкаТЧ.ИмяТабличнойЧасти)) 
				  ИЛИ ВыборкаТЧ.ИмяТабличнойЧасти = "$ВидыСубконто" Тогда
				
				КоллекцияРеквизитыТЧ = ?(ВидКоллекции = "Структура", Новый Структура, Новый Массив);
				
			КонецЕсли; 
			
			Выборка = ВыборкаТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Вид = Перечисления.бит_мдм_ВидыРеквизитов.Реквизит Тогда
					
					ТекРекв = ОписаниеРеквизита(Выборка);
					ДобавитьВКоллекцию(КоллекцияРеквизиты, ТекРекв, Выборка.Имя);
					
				ИначеЕсли Выборка.Вид = Перечисления.бит_мдм_ВидыРеквизитов.СтандартныйРеквизит Тогда	
					
					ТекРекв = ОписаниеСтандартногоРеквизита(Выборка);
					ДобавитьВКоллекцию(КоллекцияСтандартныеРеквизиты, ТекРекв, Выборка.Имя);
					
				ИначеЕсли Выборка.Вид = Перечисления.бит_мдм_ВидыРеквизитов.Измерение Тогда
					
					ТекРекв = ОписаниеРеквизита(Выборка);
					ДобавитьВКоллекцию(КоллекцияИзмерения, ТекРекв, Выборка.Имя);
					
				ИначеЕсли Выборка.Вид = Перечисления.бит_мдм_ВидыРеквизитов.Ресурс Тогда
					
					ТекРекв = ОписаниеРеквизита(Выборка);
					ДобавитьВКоллекцию(КоллекцияРесурсы, ТекРекв, Выборка.Имя);
					
				ИначеЕсли Выборка.Вид = Перечисления.бит_мдм_ВидыРеквизитов.ПризнакУчета Тогда	
					
					ТекРекв = ОписаниеСтандартногоРеквизита(Выборка);
					ДобавитьВКоллекцию(КоллекцияРеквизиты, ТекРекв, Выборка.Имя);
					
				ИначеЕсли Выборка.Вид = Перечисления.бит_мдм_ВидыРеквизитов.ДанныеВидаСубконто Тогда	
					
					ТекРекв = ОписаниеСтандартногоРеквизита(Выборка);
					ДобавитьВКоллекцию(КоллекцияДанныеСубконто, ТекРекв, Выборка.Имя);
					
				Иначе	  
					
					ТекРекв = ОписаниеРеквизита(Выборка);
					ДобавитьВКоллекцию(КоллекцияРеквизитыТЧ, ТекРекв, Выборка.Имя);
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если (Найти(ВыборкаТЧ.ИмяТабличнойЧасти,"$") = 0 И ЗначениеЗаполнено(ВыборкаТЧ.ИмяТабличнойЧасти)) 
				   ИЛИ ВыборкаТЧ.ИмяТабличнойЧасти = "$ВидыСубконто" Тогда
				
				Если ВыборкаТЧ.ИмяТабличнойЧасти = "$ВидыСубконто" Тогда
					
					ИмяТабличнойЧасти = СтрЗаменить(ВыборкаТЧ.ИмяТабличнойЧасти,"$","");   
					
				Иначе	
					
					ИмяТабличнойЧасти = ВыборкаТЧ.ИмяТабличнойЧасти;
					
				КонецЕсли;    
                
                МетаТабЧасть = ОписаниеТабЧасти(ИмяТабличнойЧасти, ИмяТабличнойЧасти, КоллекцияРеквизитыТЧ);
				ДобавитьВКоллекцию(КоллекцияТабЧасти, МетаТабЧасть, ИмяТабличнойЧасти);			  
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Эмулируем метаданные 
	ПсевдоМета = Новый Структура;
    
    ЗаполненоОо = ЗначениеЗаполнено(ОписаниеОбъекта);
	ПсевдоМета.Вставить("Имя"               , ?(ЗаполненоОо, ОписаниеОбъекта.Имя                        , ""));
	ПсевдоМета.Вставить("Синоним"           , ?(ЗаполненоОо, ОписаниеОбъекта.Наименование               , ""));
	ПсевдоМета.Вставить("Вид"               , ?(ЗаполненоОо, ОписаниеОбъекта.Вид                        , Неопределено));
	ПсевдоМета.Вставить("ИмяТаблицыХранения", ?(ЗаполненоОо, бит_мдм.ИмяОбъектаХранения(ОписаниеОбъекта), ""));
	
	Если ПсевдоМета.Вид = Перечисления.бит_мдм_ВидыОбъектовОбмена.Счет Тогда
		
		ПсевдоМета.Вставить("ПризнакиУчета", КоллекцияПризнакиУчета);
		
		Если КоллекцияДанныеСубконто.Количество() > 0 Тогда
			
			МетаТабЧасть = ОписаниеТабЧасти("ВидыСубконто", "Виды субконто", КоллекцияДанныеСубконто);
			ДобавитьВКоллекцию(КоллекцияТабЧасти, МетаТабЧасть, "ВидыСубконто");			  
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПсевдоМета.Вставить("Реквизиты"           , КоллекцияРеквизиты);
	ПсевдоМета.Вставить("СтандартныеРеквизиты", КоллекцияСтандартныеРеквизиты);
	ПсевдоМета.Вставить("Измерения"           , КоллекцияИзмерения);
	ПсевдоМета.Вставить("Ресурсы"             , КоллекцияРесурсы);	
	ПсевдоМета.Вставить("ТабличныеЧасти"      , КоллекцияТабЧасти);

	Возврат ПсевдоМета;
	
КонецФункции // ЭмулироватьМетаданные()

// Функция эмулирует структурами объект метаданных.
// 
// Параметры:
//  ИсточникМета - ОбъектМетаданных.
// 
// Возвращаемое значение:
//  ПсевдоМета - Структура.
// 
Функция ЭмулироватьМетаданныеРеальныйОбъект(ИсточникМета, ЭтоГруппа) Экспорт

	ПсевдоМета = Новый Структура;
	ПсевдоМета.Вставить("СтандартныеРеквизиты", Новый Структура);
	ПсевдоМета.Вставить("Реквизиты"           , Новый Структура);
	ПсевдоМета.Вставить("ТабличныеЧасти"      , Новый Структура);
	
	Исключения = ИсключенияСтандартныеРеквизиты();
	
	Для каждого МетаРеквизит Из ИсточникМета.СтандартныеРеквизиты Цикл
		
		Если Исключения.Найти(МетаРеквизит.Имя) <> Неопределено Тогда			
			Продолжить;			
		КонецЕсли; 
		
		ТекРекв = ОписаниеРеквизитаКонструктор();
		ТекРекв.Имя = МетаРеквизит.Имя;
		ТекРекв.Синоним = ?(ЗначениеЗаполнено(МетаРеквизит.Синоним), МетаРеквизит.Синоним, МетаРеквизит.Имя);
		ТекРекв.Тип = МетаРеквизит.Тип;
		ТекРекв.ТипЗнчСтр = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ТекРекв.Тип);
		
		ПсевдоМета.СтандартныеРеквизиты.Вставить(МетаРеквизит.Имя, ТекРекв);
		
	КонецЦикла; 
	
	ИспользованиеРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита;
	
	Для каждого МетаРеквизит Из ИсточникМета.Реквизиты Цикл
		
		Если (МетаРеквизит.Использование = ИспользованиеРеквизита.ДляЭлемента И ЭтоГруппа) 
			  ИЛИ (МетаРеквизит.Использование = ИспользованиеРеквизита.ДляГруппы И НЕ ЭтоГруппа)  Тогда
		
			 Продолжить;
		
		КонецЕсли; 
		
		ТекРекв = ОписаниеРеквизитаКонструктор();
		ТекРекв.Имя = МетаРеквизит.Имя;
		ТекРекв.Синоним = ?(ЗначениеЗаполнено(МетаРеквизит.Синоним), МетаРеквизит.Синоним, МетаРеквизит.Имя);
		ТекРекв.Тип = МетаРеквизит.Тип;
		ТекРекв.ТипЗнчСтр = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ТекРекв.Тип);		
		
		ПсевдоМета.Реквизиты.Вставить(МетаРеквизит.Имя, ТекРекв);
		
	КонецЦикла; 
	
	Для каждого МетаТЧ Из ИсточникМета.ТабличныеЧасти Цикл
		
		ИмяТЧ = МетаТЧ.Имя;
		ОписаниеТЧ = Новый Структура;
		ОписаниеТЧ.Вставить("Имя"      , МетаТЧ.Имя);
		ОписаниеТЧ.Вставить("Синоним"  , МетаТЧ.Синоним);
		ОписаниеТЧ.Вставить("Реквизиты", Новый Структура);
		
		Для каждого МетаРеквизит Из МетаТЧ.Реквизиты Цикл
			
			ТекРекв = ОписаниеРеквизитаКонструктор();
			ТекРекв.Имя = МетаРеквизит.Имя;
			ТекРекв.Синоним = МетаРеквизит.Синоним;
			ТекРекв.Тип = МетаРеквизит.Тип;
			ТекРекв.ТипЗнчСтр = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ТекРекв.Тип);		
			
			ОписаниеТЧ.Реквизиты.Вставить(МетаРеквизит.Имя, ТекРекв);
			
		КонецЦикла; 
		
		ПсевдоМета.ТабличныеЧасти.Вставить(ИмяТЧ, ОписаниеТЧ);
		
	КонецЦикла; 

	Возврат ПсевдоМета;
	
КонецФункции // ЭмулироватьМетаданныеРеальныйОбъект()

// Функция эмулирует объект по данным объекта обмена.
// 
// Параметры:
//   Контейнер      - СправочникСсылка.бит_мдм_ОбъектыХранения, СправочникСсылка.бит_мдм_ОбъектыХраненияИерархияЭлементов.
//   ПсевдоМета     - Структура
//   ВидКоллекции   - Строка.
// 
// Возвращаемое значение:
//  МодельОбъекта - Структура.
// 
Функция ЭмулироватьОбъект(Контейнер, ПсевдоМета = Неопределено, Режим = "Коллекции")  Экспорт
	
	Если ПсевдоМета = Неопределено Тогда		
		ПсевдоМета = ЭмулироватьМетаданные(Контейнер.ОписаниеОбъекта, "Структура");		
	КонецЕсли; 
	
	ЭтоСведенияОбмена = ТипЗнч(Контейнер) = Тип("СправочникСсылка.бит_мдм_СведенияОбмена");
	
	КоллекцияРеквизиты            = Новый Структура;
	КоллекцияИзмерения            = Новый Структура;
	КоллекцияРесурсы              = Новый Структура;
	КоллекцияСтандартныеРеквизиты = Новый Структура;
	КоллекцияТабЧасти             = Новый Структура;
	
	КоллекцияСтандартныеРеквизиты.Вставить("Наименование", Контейнер.Наименование);

	Если НЕ ЭтоСведенияОбмена Тогда
		
		КоллекцияСтандартныеРеквизиты.Вставить("Код"     , Контейнер.КодОбъекта);
		КоллекцияСтандартныеРеквизиты.Вставить("Родитель", Контейнер.Родитель);
		КоллекцияСтандартныеРеквизиты.Вставить("Владелец", Контейнер.ВладелецОбъекта);
		
	КонецЕсли; 
	
	// Для доступа используем объектную модель, т.к. эмулировать бывает необходимо как по ссылке так и объекту.
	Для каждого СтрокаДанные Из Контейнер.Данные Цикл
		
		Если ПсевдоМета.Реквизиты.Свойство(СтрокаДанные.ИмяРеквизита) Тогда
			
			КоллекцияРеквизиты.Вставить(СтрокаДанные.ИмяРеквизита, СтрокаДанные.Значение);
			
		ИначеЕсли ПсевдоМета.Измерения.Свойство(СтрокаДанные.ИмяРеквизита) Тогда	
			
			КоллекцияИзмерения.Вставить(СтрокаДанные.ИмяРеквизита, СтрокаДанные.Значение);
			
		ИначеЕсли ПсевдоМета.Ресурсы.Свойство(СтрокаДанные.ИмяРеквизита) Тогда	
			
			КоллекцияРесурсы.Вставить(СтрокаДанные.ИмяРеквизита, СтрокаДанные.Значение);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если НЕ ЭтоСведенияОбмена Тогда
		
		ДанныеТабличныхЧастей = Контейнер.ДанныеТабличныхЧастей.Выгрузить();
		
		ДанныеТабличныхЧастей.Сортировать("ИмяТабличнойЧасти, НомерСтрокиТабличнойЧасти");
		
		ТекИмяТабЧасти = "";
		ТекНомерСтроки = 0;
		
		МодельТЧ     = Неопределено;
		МодельСтроки = Неопределено;
		
		Для каждого СтрокаДанные Из ДанныеТабличныхЧастей Цикл
			
			Если НЕ ТекИмяТабЧасти = СтрокаДанные.ИмяТабличнойЧасти Тогда
				
				// Сохраняем предыдущую модель ТЧ.
				Если НЕ МодельТЧ = Неопределено Тогда
					КоллекцияТабЧасти.Вставить(ТекИмяТабЧасти, МодельТЧ);			
				КонецЕсли; 
				
				// Начало новой табличной части.
				ПсевдоМетаТЧ = Неопределено;
				ПсевдоМета.ТабличныеЧасти.Свойство(СтрокаДанные.ИмяТабличнойЧасти, ПсевдоМетаТЧ);
				
				Если ПсевдоМетаТЧ = Неопределено Тогда					
					Продолжить;					
				КонецЕсли; 
				
				МодельТЧ = Новый Массив;
				ТекИмяТабЧасти = СтрокаДанные.ИмяТабличнойЧасти;
				
			КонецЕсли; 
			
			Если ТекНомерСтроки <> СтрокаДанные.НомерСтрокиТабличнойЧасти Тогда
				
				// Сохраняем предыдущую строку
				Если МодельТЧ <> Неопределено 
					И МодельСтроки <> Неопределено Тогда
					
					МодельТЧ.Добавить(МодельСтроки);
					
				КонецЕсли; 
				
				// Начало новой строки
				МодельСтроки = Новый Структура;
				ТекНомерСтроки = СтрокаДанные.НомерСтрокиТабличнойЧасти;
				
				
			КонецЕсли; 
			
			Если МодельСтроки <> Неопределено Тогда
				
				Если ПсевдоМетаТЧ.Реквизиты.Свойство(СтрокаДанные.ИмяРеквизита) Тогда
					
					МодельСтроки.Вставить(СтрокаДанные.ИмяРеквизита, СтрокаДанные.Значение);
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если МодельТЧ <> Неопределено Тогда
            
            Если МодельСтроки <> Неопределено Тогда				
				МодельТЧ.Добавить(МодельСтроки);				
            КонецЕсли; 
            
			КоллекцияТабЧасти.Вставить(ТекИмяТабЧасти, МодельТЧ);	
            
		КонецЕсли; 
	
	КонецЕсли; 
	
	МодельОбъекта = Новый Структура;
	
	Если ВРег(Режим) = ВРег("Плоский") Тогда
		
		Для каждого КиЗ Из КоллекцияСтандартныеРеквизиты Цикл		
			МодельОбъекта.Вставить(КиЗ.Ключ, КиЗ.Значение);		
		КонецЦикла; 
		
		Для каждого КиЗ Из КоллекцияРеквизиты Цикл		
			МодельОбъекта.Вставить(КиЗ.Ключ, КиЗ.Значение);		
		КонецЦикла; 
		
		Для каждого КиЗ Из КоллекцияИзмерения Цикл		
			МодельОбъекта.Вставить(КиЗ.Ключ, КиЗ.Значение);		
		КонецЦикла; 

		Для каждого КиЗ Из КоллекцияРесурсы Цикл		
			МодельОбъекта.Вставить(КиЗ.Ключ, КиЗ.Значение);		
		КонецЦикла; 
		
		Для каждого КиЗ Из КоллекцияТабЧасти Цикл		
			МодельОбъекта.Вставить(КиЗ.Ключ, КиЗ.Значение);		
		КонецЦикла; 		
		
	Иначе
		// По коллекциям
		МодельОбъекта.Вставить("Реквизиты"           , КоллекцияРеквизиты);
		МодельОбъекта.Вставить("Измерения"           , КоллекцияИзмерения);
		МодельОбъекта.Вставить("Ресурсы"             , КоллекцияРесурсы);		
		МодельОбъекта.Вставить("СтандартныеРеквизиты", КоллекцияСтандартныеРеквизиты);
		МодельОбъекта.Вставить("ТабличныеЧасти"      , КоллекцияТабЧасти);
	КонецЕсли; 
	
	Возврат МодельОбъекта;
	
КонецФункции // ЭмулироватьОбъект()

// Функция эмулирует объект на основании данных в реквизитах формы.
// 
// Параметры:
//   ТекущаяФорма - УправляемаяФорма.
//   ПсевдоМета - Структура.
// 
// Возвращаемое значение:
//  МодельОбъекта - Структура.
// 
Функция ЭмулироватьОбъектПоДаннымФормы(ТекущаяФорма, ПсевдоМета ) Экспорт

	КоллекцияРеквизиты            = Новый Структура;
	КоллекцияСтандартныеРеквизиты = Новый Структура;
	КоллекцияТабЧасти             = Новый Структура;
	
	// Шапка
	Для каждого КиЗ Из ПсевдоМета.Реквизиты Цикл
		
		Имя = КиЗ.Ключ;
		ИмяРеквизитаФормы = бит_мдм_РаботаСДиалогами.ИмяРеквизитаШапки(Имя);
		КоллекцияРеквизиты.Вставить(Имя, ТекущаяФорма[ИмяРеквизитаФормы]);
	
	КонецЦикла; 
	
	// Табличные части
	Для каждого КиЗ Из ПсевдоМета.ТабличныеЧасти Цикл
		
		МодельТаблицы = Новый Массив;
		
		Имя = КиЗ.Ключ;
		ПсевдоМетаТЧ = КиЗ.Значение;
		ИмяТаблицы = бит_мдм_РаботаСДиалогами.ИмяТаблицыФормы(Имя);
		
		ТекТаблица = ТекущаяФорма[ИмяТаблицы];
		
		Для каждого СтрокаТаблицы Из ТекТаблица Цикл
			
			МодельСтроки = Новый Структура;
			Для каждого КиЗР Из ПсевдоМетаТЧ.Реквизиты Цикл
			
			    МодельСтроки.Вставить(КиЗР.Ключ, СтрокаТаблицы[КиЗР.Ключ]);
			
			КонецЦикла; 
			
		    МодельТаблицы.Добавить(МодельСтроки);
			
		КонецЦикла; 
		
		КоллекцияТабЧасти.Вставить(Имя, МодельТаблицы);
	
	КонецЦикла; 
	
	МодельОбъекта = Новый Структура;
	МодельОбъекта.Вставить("Реквизиты"           , КоллекцияРеквизиты);
	МодельОбъекта.Вставить("СтандартныеРеквизиты", КоллекцияСтандартныеРеквизиты);
	МодельОбъекта.Вставить("ТабличныеЧасти"      , КоллекцияТабЧасти);
	
	Возврат МодельОбъекта;
	
КонецФункции // ЭмулироватьОбъектПоДаннымФормы()

// Функция формирует массив с именами стандартных реквизитов, которые следует исключать из обработки.
// 
// Возвращаемое значение:
//  Исключения - Массив.
// 
Функция ИсключенияСтандартныеРеквизиты() Экспорт

	Исключения = Новый Массив;
	Исключения.Добавить("Ссылка");
	Исключения.Добавить("ПометкаУдаления");
	Исключения.Добавить("Предопределенный");
	Исключения.Добавить("ИмяПредопределенныхДанных");

	Возврат Исключения;
	
КонецФункции // ИсключенияСтандартныеРеквизиты()

// Функция инициализирует модель объекта.
// 
// Возвращаемое значение:
//  Модель - Структура.
// 
Функция МодельОбъектаКонструктор() Экспорт

	Модель = Новый Структура;
	Модель.Вставить("СтандартныеРеквизиты", Новый Структура);
	Модель.Вставить("Реквизиты"           , Новый Структура);
	Модель.Вставить("ТабличныеЧасти"      , Новый Структура);

	Возврат Модель;
	
КонецФункции // МодельОбъектаКонструктор()

// Функция моделирует реальный объект БД структурами.
// 
// Параметры:
//   Источник - СправочникОбъект.
//   ИсточникМета - ОбъектМетаданных.
// 
// Возвращаемое значение:
//  Модель - Структура.
// 
Функция ЭмулироватьРеальныйОбъект(Источник, ИсточникМета) Экспорт
	
	Модель = МодельОбъектаКонструктор();
	
	Исключения = ИсключенияСтандартныеРеквизиты();
	
	Для каждого МетаРеквизит Из ИсточникМета.СтандартныеРеквизиты Цикл
		
		Если Исключения.Найти(МетаРеквизит.Имя) <> Неопределено Тогда			
			Продолжить;			
		КонецЕсли; 
		
		Модель.СтандартныеРеквизиты.Вставить(МетаРеквизит.Имя, Источник[МетаРеквизит.Имя]);
		
	КонецЦикла; 
	
	ЭтоГруппа = Источник.ЭтоГруппа = Истина;
	ИспользованиеРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита;
	
	Для каждого МетаРеквизит Из ИсточникМета.Реквизиты Цикл
		
		Если (МетаРеквизит.Использование = ИспользованиеРеквизита.ДляЭлемента И ЭтоГруппа) 
			  ИЛИ (МетаРеквизит.Использование = ИспользованиеРеквизита.ДляГруппы И НЕ ЭтоГруппа)  Тогда
		
			 Продолжить;
		
		КонецЕсли; 
		
		Модель.Реквизиты.Вставить(МетаРеквизит.Имя, Источник[МетаРеквизит.Имя]);
		
	КонецЦикла; 
	
	Для каждого МетаТЧ Из ИсточникМета.ТабличныеЧасти Цикл
		
		Если (МетаТЧ.Использование = ИспользованиеРеквизита.ДляЭлемента И ЭтоГруппа) 
			  ИЛИ (МетаТЧ.Использование = ИспользованиеРеквизита.ДляГруппы И НЕ ЭтоГруппа)  Тогда
		
			 Продолжить;
		
		КонецЕсли; 
		
		
		ИмяТЧ = МетаТЧ.Имя;
		МодельТЧ = Новый Массив;
		
		Для каждого СтрокаТЧ Из Источник[ИмяТЧ] Цикл
			
			МодельСтроки = Новый Структура;
			Для каждого МетаРеквизит Из МетаТЧ.Реквизиты Цикл
				
				МодельСтроки.Вставить(МетаРеквизит.Имя, СтрокаТЧ[МетаРеквизит.Имя]);
				
			КонецЦикла; 
			МодельТЧ.Добавить(МодельСтроки);
			
		КонецЦикла; 
		
		Модель.ТабличныеЧасти.Вставить(ИмяТЧ, МодельТЧ);
		
	КонецЦикла; 
	
	Возврат Модель;
	
КонецФункции // ЭмулироватьРеальныйОбъект()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Функция - конструктор структуры, описывающей интерфейсное отображения поля проформы.
// 
// Параметры:
// ВхСтрока - СправочникТабличнаяЧастьСтрока.бит_ВидыПроформ.НастройкиРеквизитов.
// 
// Возвращаемое значение:
//  НастройкиОтображения - Структура.
// 
Функция ОписаниеОтображенияЭлемента(ОписаниеРеквизита)

	НастройкиОтображения = Новый Структура("ВидПоля
	                                        |, ПроверкаЗаполнения
	                                        |, Ширина
											|, КнопкаВыбора
											|, КнопкаРегулирования
											|, КнопкаОткрытия
											|, КнопкаОчистки");
	
		
	НастройкиОтображения.ВидПоля = ?(ОписаниеРеквизита.ТипЗнчСтр = "Булево", "ПолеФлажка", "ПолеВвода");
	НастройкиОтображения.ПроверкаЗаполнения = ОписаниеРеквизита.Обязательный;
	
	Возврат НастройкиОтображения;
	
КонецФункции // ОписаниеОтображенияЭлемена()

// Функция конструктор структуры, описывающей реквизит.
// 
// Возвращаемое значение:
//  РезСтруктура - Структура.
// 
Функция ОписаниеРеквизитаКонструктор()

	РезСтруктура = Новый Структура("Имя
	                                 |, Синоним
									 |, Тип
									 |, ТипЗнчСтр
									 |, ВидОбъекта
									 |, ИмяОбъекта
									 |, Составной
									 |, Обязательный
									 |, Отключено
									 |, ОписаниеРеквизита
									 |,НастройкиОтображения"
									 ,""
									 ,""
									 ,Новый ОписаниеТипов("Строка")
									 ,"Строка"
									 ,
									 ,
									 ,Ложь
									 ,Ложь
									 ,Ложь
									 ,
									 ,);
									 
	РезСтруктура.НастройкиОтображения = ОписаниеОтображенияЭлемента(РезСтруктура);
	
	Возврат РезСтруктура;
	
КонецФункции // ОписаниеРеквизитаКонструктор()

// Функция создает структуру-описание реквизита.
// 
// Параметры:
// вхДанные - Выборка
// 
// Возвращаемое значение:
//  Реквизит - Структура.
// 
Функция ОписаниеРеквизита(вхДанные)
	
	Реквизит = Новый Структура;
	Реквизит.Вставить("Имя", вхДанные.Имя);
	
	ТекСиноним = ?(ПустаяСтрока(вхДанные.Наименование),вхДанные.Имя,вхДанные.Наименование);
	Реквизит.Вставить("Синоним", ТекСиноним);
	
	ТекТип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(вхДанные.ТипЗнчСтр);
    Реквизит.Вставить("Тип", ТекТип);
    
    Реквизит.Вставить("ТипЗнчСтр"        , вхДанные.ТипЗнчСтр);
	Реквизит.Вставить("ВидОбъекта"       , вхДанные.ВидОбъекта);
	Реквизит.Вставить("ИмяОбъекта"       , вхДанные.ИмяОбъекта);
	Реквизит.Вставить("Составной"        , вхДанные.Составной);
	Реквизит.Вставить("Обязательный"     , вхДанные.Обязательный);	
	Реквизит.Вставить("Отключено"        , вхДанные.Отключено);	
	Реквизит.Вставить("ОписаниеРеквизита", вхДанные.ОписаниеРеквизита);
	
	НастройкиОтображения = ОписаниеОтображенияЭлемента(Реквизит);
	Реквизит.Вставить("НастройкиОтображения", НастройкиОтображения);
	
	Возврат Реквизит;
	
КонецФункции	

// Функция описание стандартного реквизита.
// 
// Параметры:
// вхДанные - Выборка
// 
// Возвращаемое значение:
//  Реквизит - Структура.
// 
Функция ОписаниеСтандартногоРеквизита(вхДанные)
	
	Реквизит = Новый Структура;
	Реквизит.Вставить("Имя", вхДанные.Имя);
	
	ТекСиноним = ?(ПустаяСтрока(вхДанные.Наименование),вхДанные.Имя,вхДанные.Наименование);
	Реквизит.Вставить("Синоним", ТекСиноним);
	
	ТекТип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(вхДанные.ТипЗнчСтр);
	Реквизит.Вставить("Тип",ТекТип);
	Реквизит.Вставить("ТипЗнчСтр", вхДанные.ТипЗнчСтр);
	
	Реквизит.Вставить("Обязательный"     , вхДанные.Обязательный);	
	Реквизит.Вставить("ВидОбъекта"       , вхДанные.ВидОбъекта);
	Реквизит.Вставить("ИмяОбъекта"       , вхДанные.ИмяОбъекта);
	Реквизит.Вставить("Обязательный"     , вхДанные.Обязательный);	
	Реквизит.Вставить("Составной"        , вхДанные.Составной);
	Реквизит.Вставить("Отключено"        , вхДанные.Отключено);	
	Реквизит.Вставить("ОписаниеРеквизита", вхДанные.ОписаниеРеквизита);
	
	НастройкиОтображения = ОписаниеОтображенияЭлемента(Реквизит);
	Реквизит.Вставить("НастройкиОтображения", НастройкиОтображения);
	
	Возврат Реквизит;
	
КонецФункции // ОписаниеСтандартногоРеквизита()

// Функция создает структуру-описание табличной части.
// 
// Параметры:
// Имя       - Строка
// Синоним   - Строка
// Реквизиты - Структура
// 
// Возвращаемое значение:
//  МетаТабЧасть - Структура.
// 
Функция ОписаниеТабЧасти(Имя, Синоним, Реквизиты)

	МетаТабЧасть = Новый Структура;
	МетаТабЧасть.Вставить("Имя", Имя);
	
	ТекСиноним = ?(ПустаяСтрока(Синоним),Имя, Синоним);
	МетаТабЧасть.Вставить("Синоним", ТекСиноним);
	МетаТабЧасть.Вставить("Реквизиты", Реквизиты);

	Возврат МетаТабЧасть;
	
КонецФункции // ОписаниеТабЧасти()

// Функция добавляет значение в массив или структуру.
// 
// Параметры:
//   Коллекция - Массив, Структура.
//   Значение - Произвольный.
//   Имя - Строка.
// 
Процедура ДобавитьВКоллекцию(Коллекция, Значение, Имя = "")

	Если ТипЗнч(Коллекция) = Тип("Структура") И Не ПустаяСтрока(Имя) Тогда
		
		Коллекция.Вставить(Имя, Значение);
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Массив")	Тогда
		
		Коллекция.Добавить(Значение);
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьВКоллекцию()

#КонецОбласти

#КонецЕсли 
