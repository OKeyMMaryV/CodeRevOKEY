#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура инициализирует компоновщик, используемый для фильтрации структуры дерева.
// 
Функция ИнициализироватьКомпоновщик(вхТекстЗапроса, Компоновщик, УникальныйИдентификатор, Бюджет = Неопределено) Экспорт
	
	АдресКомпоновки = "";
	ТекстЗапроса = бит_МеханизмПолученияДанных.АдаптироватьТекстПостроителяДляКомпоновки(вхТекстЗапроса);
	
	СохраненнаяНастройка = Компоновщик.Настройки.Отбор.Элементы;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		// Создаем СКД по запросу
		СКД = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса);
		Если ЗначениеЗаполнено(Бюджет) Тогда
			// Параметр Бюджет не должен быть доступен в настройках СКД.
			ПараметрСКД = СКД.Параметры.Добавить();
			ПараметрСКД.Имя                      = "Бюджет";
			ПараметрСКД.Заголовок                = "Бюджет";
			ПараметрСКД.ТипЗначения              = Новый ОписаниеТипов("СправочникСсылка.бит_Бюджеты");
			ПараметрСКД.ВключатьВДоступныеПоля   = Ложь;
			ПараметрСКД.ОграничениеИспользования = Истина;
			ПараметрСКД.Значение                 = Бюджет;
		КонецЕсли; 
		
		// Заполняем поля набора.
		УстановитьЗаголовкиПолей(СКД);		
		
		АдресКомпоновки = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
		
		// Инициализируем компоновщик
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновки);
		Попытка
			Компоновщик.Инициализировать(ИсточникНастроек);
		Исключение
			ТекстСообщения =  НСтр("ru = 'Не удалось инициализировать компоновщик для отбора. Попробуйте обновить текст запроса. Описание ошибки: %1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецПопытки;
		
		Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		
		Если СохраненнаяНастройка.Количество() > 0 Тогда
			ЗаполнитьОтборы(СохраненнаяНастройка, Компоновщик.Настройки.Отбор.Элементы);
			Компоновщик.Восстановить();
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат АдресКомпоновки;
	
КонецФункции // ИнициализироватьКомпоновщик()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗаголовкиПолей(СКД)
	
	НастройкиИзмерений = ОбщегоНазначения.СкопироватьРекурсивно(
						бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	
	// Дополним "пустышками" неиспользуемые аналитики.
	ВГраница = ?(бит_ОбщегоНазначения.ЭтоСемействоБП(), 7, 12);
	Для Индекс = 1 По ВГраница Цикл
		ТекущаяНастройка = НастройкиИзмерений.Получить("Аналитика_" + Индекс);
		Если НастройкиИзмерений.Получить("Аналитика_" + Индекс) = Неопределено Тогда
			НастройкиИзмерений.Вставить("Аналитика_" + Индекс, Неопределено);
		КонецЕсли; 
	КонецЦикла; 
	
	ПоляВыбора = СКД.НастройкиПоУмолчанию.Выбор.Элементы;
	ПоляНабора = СКД.НаборыДанных[СКД.НаборыДанных.Количество() - 1].Поля;
		
	Для каждого Поле Из ПоляВыбора Цикл
		Если СтрНачинаетсяС(Строка(Поле.Поле), "Аналитика") Тогда
			ТекущаяНастройка = НастройкиИзмерений.Получить(Строка(Поле.Поле));
			НовоеПоле = ПоляНабора.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовоеПоле.Поле = Строка(Поле.Поле);
			НовоеПоле.ПутьКДанным = Строка(Поле.Поле);
			
			Если ТекущаяНастройка = Неопределено Тогда
				НовоеПоле.ОграничениеИспользования.Группировка = Истина;
				НовоеПоле.ОграничениеИспользования.Поле 	  = Истина;
				НовоеПоле.ОграничениеИспользования.Порядок 	  = Истина;
				НовоеПоле.ОграничениеИспользования.Условие 	  = Истина;
				НовоеПоле.ОграничениеИспользованияРеквизитов.Группировка  = Истина;
				НовоеПоле.ОграничениеИспользованияРеквизитов.Поле 	  	  = Истина;
				НовоеПоле.ОграничениеИспользованияРеквизитов.Порядок 	  = Истина;
				НовоеПоле.ОграничениеИспользованияРеквизитов.Условие 	  = Истина;
			Иначе	
				Поле.Заголовок 	= ТекущаяНастройка.Синоним;
				НовоеПоле.Заголовок = ТекущаяНастройка.Синоним;
				НовоеПоле.ТипЗначения = ТекущаяНастройка.ТипЗначения;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьОтборы(НаборИсточник, НаборПриемник)

	Для каждого ЭлементИсточник Из НаборИсточник Цикл
		ЭлементПриемник = НаборПриемник.Добавить(Тип(ЭлементИсточник));
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаполнитьОтборы(ЭлементИсточник.Элементы, ЭлементПриемник.Элементы);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры
 
#КонецОбласти

#КонецЕсли	
