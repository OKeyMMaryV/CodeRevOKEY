
#Область ОписаниеПеременных

&НаКлиенте
Перем мРежимПривязки; // Указывает, на то что включен режим привязки точек алгоритма.

&НаКлиенте
Перем мТочкаДляПривязки; // Хранит текущую точку для привязки

&НаКлиенте
Перем мТочкаДляПривязкиВидТочки; // Хранит текущую точку для привязки

&НаКлиенте
Перем мОбъектСкопирован; // Хранит признак того, что объект скопирован.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
    
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Параметры.Свойство("ТолькоЧтение", ТолькоЧтение);

	Если Параметры.Свойство("ВидАлгоритма") И ЗначениеЗаполнено(Параметры.ВидАлгоритма) Тогда
	
		Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов[Параметры.ВидАлгоритма];
		
		Если Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Визирование Тогда
		
			Объект.РазмещениеСвободныхТочек = Перечисления.бит_уп_Направление.Вертикаль;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	УправлениеДопИнформацией();
	УстановитьВидимость();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
	
		ОбъектКопирования = Параметры.ЗначениеКопирования;
	
	КонецЕсли; 
	
	// Восстановление типов параметров в таб. поле ПараметрыАлгоритма.
	ВосстановитьТипыПараметров();
	
	ЗаполнитьКэшированныеЗначения(мКэшированныеЗначения);	
	
	АлгоритмХТМЛ = бит_уп_Сервер.ПодготовитьКодСтраницыОтображенияАлгоритма();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мРежимПривязки = "";
	
	УстановитьВидимостьАлгоритма();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ТолькоЧтение Тогда
	    Отказ = Истина;
		ВызватьИсключение ПричинаБлокировки(); 
	КонецЕсли;
	
	ВыполнитьПроверкуТЧПараметры();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеДопИнформацией();
	
	Если ВыполнитьКопированиеТочекАлгоритма Тогда
		
		ВыполнитьКопированиеТочекАлгоритма = Ложь;
		Если ЗначениеЗаполнено(ОбъектКопирования) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("АлгоритмКопирования",ОбъектКопирования.Ссылка);
			Запрос.УстановитьПараметр("ТекущийАлгоритм"    ,Объект.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			               |	СтарыеТочки.ВидТочки,
			               |	СтарыеТочки.Ссылка КАК СтараяТочка,
			               |	НовыеТочки.Ссылка КАК НоваяТочка
			               |ИЗ
			               |	Справочник.бит_уп_ТочкиАлгоритмов КАК СтарыеТочки
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов КАК НовыеТочки
			               |		ПО СтарыеТочки.ВидТочки = НовыеТочки.ВидТочки
			               |			И (НовыеТочки.Владелец = &ТекущийАлгоритм)
			               |ГДЕ
			               |	СтарыеТочки.Владелец = &АлгоритмКопирования";
			
			Результат = Запрос.Выполнить();			   
			Выборка   = Результат.Выбрать();
			
			СтарыеНовые = Новый Соответствие;
			
			// Выполним копирование точек
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Старт Тогда
					СтарыеНовые.Вставить(Выборка.СтараяТочка,Выборка.НоваяТочка);
				Иначе	
					НоваяТочка          = Выборка.СтараяТочка.Скопировать();
					НоваяТочка.Владелец = Объект.Ссылка;
					флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(НоваяТочка,,"Ошибки");
					Если флДействиеВыполнено Тогда
						
						СтарыеНовые.Вставить(Выборка.СтараяТочка,НоваяТочка.Ссылка);
						
					КонецЕсли; // Удалось записать точку
				КонецЕсли; 
				
			КонецЦикла; // По точкам
			
			// Заменим точки в исходящих и входящих на новые ссылки.
			Для каждого КиЗ Из СтарыеНовые Цикл
				
				НоваяТочка  = КиЗ.Значение;
				СтараяТочка = КиЗ.Ключ;
				
				НоваяТочкаОбъект = НоваяТочка.ПолучитьОбъект();
				
				НоваяТочкаОбъект.ИсходящиеТочки.Очистить();
				Для каждого СтрокаТаблицы Из СтараяТочка.ИсходящиеТочки Цикл
					
					ТочкаЗамены = СтарыеНовые[СтрокаТаблицы.Точка];
					Если ЗначениеЗаполнено(ТочкаЗамены) Тогда
						
						НоваяСтрока             = НоваяТочкаОбъект.ИсходящиеТочки.Добавить();
						НоваяСтрока.Точка       = ТочкаЗамены;
						НоваяСтрока.Направление = СтрокаТаблицы.Направление;
						
					КонецЕсли; 
					
				КонецЦикла; // По исходящим точкам
				
				НоваяТочкаОбъект.ВходящиеТочки.Очистить();
				Для каждого СтрокаТаблицы Из СтараяТочка.ВходящиеТочки Цикл
					
					ТочкаЗамены = СтарыеНовые[СтрокаТаблицы.Точка];
					Если ЗначениеЗаполнено(ТочкаЗамены) Тогда
						
						НоваяСтрока             = НоваяТочкаОбъект.ВходящиеТочки.Добавить();
						НоваяСтрока.Точка       = ТочкаЗамены;
						НоваяСтрока.Направление = СтрокаТаблицы.Направление;
					КонецЕсли;
					
				КонецЦикла; // По входящим точкам 
				
				бит_ОбщегоНазначения.ЗаписатьСправочник(НоваяТочкаОбъект,,"Ошибки");
				
			КонецЦикла;// По точкам 
			
		КонецЕсли; 
		ОбъектКопирования = Неопределено;		
		
	КонецЕсли; // Выполнять копирование
	
	// Восстановление типов параметров в таб. поле ПараметрыАлгоритма.
	ВосстановитьТипыПараметров();	
	
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьАлгоритм();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Изменение кода. Начало. 25.07.2017{{
	Если НЕ ЗавершениеРаботы
		И НЕ ЗакрыватьФорму Тогда
		
		ТекстОтсутствияДействий = ПользовательскиеДействияЗаполнены(Объект.Ссылка);
		
		Если ЗначениеЗаполнено(ТекстОтсутствияДействий) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнено пользовательское действие для точек: '")
							+ ТекстОтсутствияДействий 
							+ Символы.ПС 
							+ НСтр("ru = 'Закрыть форму?'");
							
			Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыВопрос", ЭтотОбъект); 
			ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15);
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли; 
	// Изменение кода. Конец. 25.07.2017}}
	
КонецПроцедуры

// Процедура вопроса перед закрытием формы. 
//
// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ЗакрытиеФормыВопрос(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакрыватьФорму = Истина;
		Закрыть();
	Иначе	
		ЗакрыватьФорму = Ложь;
	КонецЕсли; 
                
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УвеличитьКоличествоТочек" И Источник = УникальныйИдентификатор Тогда
		УвеличитьКоличествоТочек(Параметр);			
	ИначеЕсли ИмяСобытия = "ОбновитьАлгоритм" И Источник = УникальныйИдентификатор Тогда
		ОбновитьАлгоритм();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МаршрутОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Меню             = Новый СписокЗначений;
	ВыбЭлемент       = Неопределено;
	флЭтоВизирование = ?(Объект.ВидАлгоритма = мКэшированныеЗначения.Перечисления.бит_уп_ВидыАлгоритмов.Визирование,Истина,Ложь);
	
	 
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ПустаяСтрока(мРежимПривязки) Тогда
			
			мРежимПривязки = "";
			Возврат;
		
		КонецЕсли; 
		
		// Формируем меню в зависимости вида от точек маршрута.
		Меню = СформироватьМенюРасшифровки(Расшифровка);
		
		// Выбираем необходимое действие
		ДополнительныеДанные = Новый Структура("Расшифровка", Расшифровка);
		Оповещение = Новый ОписаниеОповещения("ОбработкаРасшифровкиВыборЗавершение", ЭтотОбъект, ДополнительныеДанные);
		ПоказатьВыборИзМеню(Оповещение,Меню);
		
	КонецЕсли; // Расшифровка - структура
	
КонецПроцедуры

// Процедура обработчик оповещения "ОбработкаРасшифровкиВыборЗавершение".
// 
// Параметры:
// ВыбЭлемент - ЭлементСпискаЗначений.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОбработкаРасшифровкиВыборЗавершение(ВыбЭлемент, ДополнительныеДанные) Экспорт

	Если НЕ ВыбЭлемент = Неопределено Тогда
		
		ВыбЗначение = ВыбЭлемент.Значение;
	    РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		Расшифровка = ДополнительныеДанные.Расшифровка;
		
		// Выполняем действия
		Если ВРег(ВыбЗначение) = ВРег("Открыть") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ",Расшифровка.Точка);
			ПараметрыФормы.Вставить("ОткрытаИзМаршрута",Истина);
			ОткрытьФорму("Справочник.бит_уп_ТочкиАлгоритмов.ФормаОбъекта",ПараметрыФормы,ЭтаФорма,,,,,РежимОкна);
			
		ИначеЕсли ВРег(ВыбЗначение) = ВРег("ОткрытьДействие") Тогда	
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", Расшифровка.ПользовательскоеДействие);
			ОткрытьФорму("Справочник.бит_ПользовательскиеДействия.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,,РежимОкна);
			
		ИначеЕсли ВРег(ВыбЗначение) = ВРег("ОткрытьУсловие") Тогда	
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", Расшифровка.ПользовательскоеУсловие);
			ОткрытьФорму("Справочник.бит_ПользовательскиеУсловия.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,,РежимОкна);
			
		ИначеЕсли Найти(ВыбЗначение,"ДобавитьТочкуДействия")>0 Тогда	
			
			Если Найти(ВыбЗначение,"_НЕТ")>0 Тогда
			
				ТекНаправление = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Горизонталь;
				
			Иначе
				
				ТекНаправление = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль;
				
			КонецЕсли; 
			
			 ОткрытьНовуюТочкуАлгоритма(Объект.Ссылка
			                            ,Расшифровка.Точка
										,ТекНаправление
										,мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие
										,мКэшированныеЗначения.КоличествоТочекДействия);
			
												 
		ИначеЕсли Найти(ВыбЗначение,"ДобавитьТочкуУсловия")>0  Тогда	
			
			Если Найти(ВыбЭлемент.Значение,"_НЕТ")>0 Тогда
				ТекНаправление = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Горизонталь;
			Иначе
				ТекНаправление = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль;
			КонецЕсли; 
			
			ОткрытьНовуюТочкуАлгоритма(Объект.Ссылка
										 ,Расшифровка.Точка
										 ,ТекНаправление
										 ,мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие
										 ,мКэшированныеЗначения.КоличествоТочекУсловия);
												 
		ИначеЕсли ВРег(ВыбЗначение) = ВРег("ДобавитьТочкуРазделения")
			ИЛИ ВРег(ВыбЗначение) = ВРег("ДобавитьТочкуРазделения_ДА") Тогда
			
			ТекНаправление = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль;
			ОткрытьНовуюТочкуАлгоритма(Объект.Ссылка
										 ,Расшифровка.Точка
										 ,ТекНаправление
										 ,мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Разделение
										 ,мКэшированныеЗначения.КоличествоТочекРазделения);

		ИначеЕсли ВРег(ВыбЗначение) = ВРег("ДобавитьТочкуРазделения_НЕТ") Тогда
			
			ТекНаправление = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Горизонталь;
			ОткрытьНовуюТочкуАлгоритма(Объект.Ссылка
										 ,Расшифровка.Точка
										 ,ТекНаправление
										 ,мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Разделение
										 ,мКэшированныеЗначения.КоличествоТочекРазделения);

		ИначеЕсли ВРег(ВыбЗначение)= ВРег("ДобавитьТочкуСлияния") Тогда
			
			ТекНаправление = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль;
			ОткрытьНовуюТочкуАлгоритма(Объект.Ссылка
									 ,Расшифровка.Точка
									 ,ТекНаправление
									 ,мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Слияние
									 ,мКэшированныеЗначения.КоличествоТочекСлияния);
												 
												 
	    ИначеЕсли ВРег(ВыбЗначение) = ВРег("Отвязать") Тогда
			
			бит_уп_Сервер.ОтвязатьТочкуАлгоритма(Расшифровка.Точка);
	        ОбновитьАлгоритм();

		ИначеЕсли ВРег(ВыбЗначение) = ВРег("Привязать") Тогда
			
			мРежимПривязки            = "Привязка";
			мТочкаДляПривязки         = Расшифровка.Точка;
			мТочкаДляПривязкиВидТочки = Расшифровка.ВидТочки;
			
		ИначеЕсли ВРег(ВыбЗначение) = ВРег("УстановитьПометкуУдаления") Тогда
			
			бит_уп_Сервер.ПометитьОтвязатьТочку(Расшифровка.Точка,Истина);			
	        ОбновитьАлгоритм();
			
		ИначеЕсли ВРег(ВыбЗначение) = ВРег("СнятьПометкуУдаления") Тогда
			
			бит_уп_Сервер.УстановитьПометкуУдаленияТочки(Расшифровка.Точка,Ложь);
	        ОбновитьАлгоритм();
			
			
		ИначеЕсли ТипЗнч(ВыбЗначение) = Тип("Структура") Тогда
			
			Если ВыбЗначение.Действие = "Отвязать" Тогда
				
				бит_уп_Сервер.ОтвязатьТочкуАлгоритма(Расшифровка.Точка,ВыбЗначение.ТочкаСвязанная);
	            ОбновитьАлгоритм();
				
			КонецЕсли; 
			
		ИначеЕсли ВРег(ВыбЗначение) = ВРег("ПомощникСозданияТочек") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Точка",Расшифровка.Точка);
			ПараметрыФормы.Вставить("ТекНаправление",мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль); 
			ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);  
			ОткрытьФормуПомощника(ПараметрыФормы);
			
		КонецЕсли; 

	КонецЕсли; 
		
КонецПроцедуры	// ОбработкаРасшифровкиВыборЗавершение

&НаКлиенте
Процедура МаршрутВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ВРег(мРежимПривязки) = ВРег("Привязка") Тогда
		
		Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
			
			// Запретим нежелательные связи
			Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Визирование") 
				И Объект.СпособВыполнения = ПредопределенноеЗначение("Перечисление.бит_уп_СпособыВыполненияАлгоритма.Поэтапно")
				И мТочкаДляПривязкиВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Слияние") Тогда
				
				ТекстСообщения = НСтр("ru = 'При способе выполнения алгоритма поэтапно "
										  + "добавление точки слияния после точки условия невозможно.'");
				
				ПоказатьПредупреждение(,ТекстСообщения,,Объект.Наименование);
				мТочкаДляПривязки         = Неопределено;	
				мТочкаДляПривязкиВидТочки = Неопределено;
				Возврат;
			КонецЕсли; 
			
			 // Определим направление привязки
			 Если Область.Расшифровка.ПометкаУдаления Тогда
				 
			   ТекстСообщения = НСтр("ru = 'Точка ""%ТочкаАлгоритма%"" помечена на удаление. Привязка невозможна.'");
			   СтрЗамена = Новый Структура("ТочкаАлгоритма",Строка(Область.Расшифровка.Точка));
			   ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ЗаполнитьПараметрыСтроки(ТекстСообщения,СтрЗамена);
			   бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			   
               мТочкаДляПривязки         = Неопределено;	
			   мТочкаДляПривязкиВидТочки = Неопределено;
			   Возврат;	 
			 
			 КонецЕсли; 
			 
			 НаправлениеПривязки = Неопределено;
			 Если Область.Расшифровка.ВидТочки = мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие Тогда
				 
				 флПривязкаПоГоризонталиРазрешена = ПривязкаПоГоризонталиРазрешена();
				 Если Область.Расшифровка.КоличествоИсхВертикаль = 0 
					  И Область.Расшифровка.КоличествоИсхГоризонталь = 0 
					  И флПривязкаПоГоризонталиРазрешена Тогда
					  
					 Меню = Новый СписокЗначений;
					 Меню.Добавить("ПривязатьПоВертикали"  ,"Привязать по вертикали (ДА)");
					 Меню.Добавить("ПривязатьПоГоризонтали","Привязать по горизонтали (НЕТ)");
					 
					 ДопПараметры = Новый Структура("ТекущаяТочка, ТочкаПривязки",Область.Расшифровка.Точка, мТочкаДляПривязки);  
					 Оповещение = Новый ОписаниеОповещения("МаршрутВыборИзМенюЗавершение", ЭтотОбъект, ДопПараметры);
					 Меню.ПоказатьВыборЭлемента(Оповещение,  НСтр("ru = 'Выбор направления привязки'"));
					  
				 ИначеЕсли Область.Расшифровка.КоличествоИсхГоризонталь = 0 И флПривязкаПоГоризонталиРазрешена Тогда
					 
					 НаправлениеПривязки = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Горизонталь;
					 
					 
				 ИначеЕсли Область.Расшифровка.КоличествоИсхВертикаль   = 0 Тогда
					 
					 НаправлениеПривязки = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль;
					 
				 Иначе	
					 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данная точка уже содержит доступные связи!");
				 КонецЕсли; 
				 
			 Иначе	
				 
				 Если Область.Расшифровка.ВидТочки = мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Разделение Тогда
					 НаправлениеПривязки = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль;
				 Иначе	
					 
					 Если Область.Расшифровка.КоличествоИсхВертикаль = 0 Тогда
						 
						 НаправлениеПривязки = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль;
						 
					 Иначе
						 ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данная точка уже содержит связь!");
					 КонецЕсли; 
					 
					 
				 КонецЕсли; 
				 
			 КонецЕсли; 
			 
			 // Если удалось определить направление привязки точки - привязываем.
			Если НЕ НаправлениеПривязки = Неопределено И НЕ мТочкаДляПривязки = Неопределено Тогда
			
					 бит_уп_Сервер.ПривязатьТочкуАлгоритма(Область.Расшифровка.Точка
					                                       ,мТочкаДляПривязки
														   ,НаправлениеПривязки);
														   
                     ОбновитьАлгоритм();
					 
			КонецЕсли; 									   
												   
		КонецЕсли; 
        мТочкаДляПривязки         = Неопределено;
		мТочкаДляПривязкиВидТочки = Неопределено;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик оповещения "МаршрутВыборИзМенюЗавершение".
// 
&НаКлиенте 
Процедура МаршрутВыборИзМенюЗавершение(ВыбЭлемент, ДополнительныеДанные) Экспорт
	
	Если НЕ ВыбЭлемент = Неопределено Тогда
		
		Если ВыбЭлемент.Значение = "ПривязатьПоВертикали" Тогда
			НаправлениеПривязки = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Вертикаль;
		ИначеЕсли ВыбЭлемент.Значение = "ПривязатьПоГоризонтали" Тогда	
			НаправлениеПривязки = мКэшированныеЗначения.Перечисления.бит_уп_Направление.Горизонталь;
		КонецЕсли; 
		
		
			 // Если удалось определить направление привязки точки - привязываем.
			Если НЕ НаправлениеПривязки = Неопределено И НЕ ДополнительныеДанные.ТочкаПривязки = Неопределено Тогда
			
					 бит_уп_Сервер.ПривязатьТочкуАлгоритма(ДополнительныеДанные.ТекущаяТочка
					                                       ,ДополнительныеДанные.ТочкаПривязки
														   ,НаправлениеПривязки);
														   
                     ОбновитьАлгоритм();
					 
			КонецЕсли; 									   
		
		
	КонецЕсли; 
	
КонецПроцедуры	// МаршрутВыборИзМенюЗавершение

&НаКлиенте
Процедура ВидПроцессаПриИзменении(Элемент)
	
	ВидАлгоритмаИзменение();
	ПоказатьВопросОЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмХТМЛДокументСформирован(Элемент)
	
	ОбновитьАлгоритм();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыАлгоритма

&НаКлиенте
Процедура ПараметрыАлгоритмаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущаяСтрока = Элементы.ПараметрыАлгоритма.ТекущиеДанные;
		ТекущаяСтрока.СтрТип = "Строка";
		ТекущаяСтрока.Тип    = Новый ОписаниеТипов("Строка");
		ТекущаяСтрока.ЗначениеПоУмолчанию = ТекущаяСтрока.Тип.ПривестиЗначение(ТекущаяСтрока.ЗначениеПоУмолчанию);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАлгоритмаТипПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПараметрыАлгоритма.ТекущиеДанные;
	ТипИзменение(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАлгоритмаЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПараметрыАлгоритма.ТекущиеДанные;
	ТекущаяСтрока.ЗначениеПоУмолчанию = ТекущаяСтрока.Тип.ПривестиЗначение(ТекущаяСтрока.ЗначениеПоУмолчанию);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура-обработчик команды "ОбновитьМаршрут".
// 
&НаКлиенте
Процедура КомандаОбновитьМаршрут(Команда) 
	
	ОбновитьАлгоритм();
	
КонецПроцедуры

// Обработчик команды Помощник.
// 
&НаКлиенте
Процедура Помощник(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФормуПомощника(ПараметрыФормы);
	
КонецПроцедуры

// Процедура-обработчик команды "КомандаЗаписатьЗакрыть".
// 
&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если ЗначениеЗаполнено(ОбъектКопирования) Тогда
		
		ДопДанные = Новый Структура("Команда","Записать");
		Оповещение = Новый ОписаниеОповещения("ЗаписатьВопросЗавершение", ЭтотОбъект, ДопДанные);
		ТекстСообщения =  НСтр("ru = 'Выполнить копирование точек алгоритма после записи алгоритма?'");
		ПоказатьВопрос(Оповещение,ТекстСообщения, РежимДиалогаВопрос.ДаНетОтмена,30,КодВозвратаДиалога.Да); 
		
	Иначе
		
		Если ПроверитьЗаполнение() Тогда
			Записать();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик команды "КомандаЗаписатьЗакрыть".
// 
&НаКлиенте
Процедура КомандаЗаписатьЗакрыть(Команда)
	
	Если ЗначениеЗаполнено(ОбъектКопирования) Тогда
		
		ДопДанные = Новый Структура("Команда","ЗаписатьЗакрыть");
		Оповещение = Новый ОписаниеОповещения("ЗаписатьВопросЗавершение", ЭтотОбъект, ДопДанные);
		ТекстСообщения =  НСтр("ru = 'Выполнить копирование точек алгоритма после записи алгоритма?'");
		ПоказатьВопрос(Оповещение,ТекстСообщения, РежимДиалогаВопрос.ДаНетОтмена,30,КодВозвратаДиалога.Да); 
		
	Иначе
		
		Если ПроверитьЗаполнение() Тогда
			Записать();
			Закрыть();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗаписатьВопросЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ЗаписатьВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьКопированиеТочекАлгоритма = Истина;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		ОбъектКопирования = Неопределено;
		
	КонецЕсли; 
	
	Если НЕ Ответ = КодВозвратаДиалога.Отмена Тогда
		
		Если ПроверитьЗаполнение() Тогда
			Записать();
			Если ДополнительныеДанные.Команда = "ЗаписатьЗакрыть" Тогда
				
				Закрыть();
				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры	// ЗаписатьВопросЗавершение

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	
	ПараметрыФормы = Новый Структура("Алгоритм", Объект.Ссылка);
	ОткрытьФорму("БизнесПроцесс.бит_уп_Процесс.ФормаОбъекта", ПараметрыФормы);  
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеВАлгоритме(Команда)
	Оповещение = Новый ОписаниеОповещения("ВопросУстановитьОформление", ЭтотОбъект);
	Текст = Нстр("ru = 'Будет безвозвратно изменено оформление всех точек и линий алгоритмов. Продолжить?'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры

// Процедура окончание процедуры "УстановитьОформлениеВАлгоритме". 
//
// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВопросУстановитьОформление(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьОформлениеВАлгоритмеСервер();
		ОбновитьАлгоритм();
	КонецЕсли; 
                
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПричинаБлокировки()

	Возврат Нстр("ru = 'Алгоритм открыт для ознакомления. Изменения сохранены не будут.'"); 

КонецФункции
 
// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшированныеЗначения(КэшированныеЗначения)

 КэшированныеЗначения = Новый Структура;
 КэшПеречисления = Новый Структура;
 
 ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_уп_ВидыТочекАлгоритмов);
 КэшПеречисления.Вставить("бит_уп_ВидыТочекАлгоритмов",ТекПеречисление);
 
 ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_уп_Направление);
 КэшПеречисления.Вставить("бит_уп_Направление",ТекПеречисление);
 
 ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_уп_ВидыАлгоритмов);
 КэшПеречисления.Вставить("бит_уп_ВидыАлгоритмов",ТекПеречисление);
 
 КэшированныеЗначения.Вставить("Перечисления",КэшПеречисления);
 
 КоличествоТочек = бит_уп_Сервер.ПолучитьКоличествоТочекВида(Объект.Ссылка,Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие);
 КэшированныеЗначения.Вставить("КоличествоТочекДействия",КоличествоТочек);
 КоличествоТочек = бит_уп_Сервер.ПолучитьКоличествоТочекВида(Объект.Ссылка,Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие); 
 КэшированныеЗначения.Вставить("КоличествоТочекУсловия" ,КоличествоТочек);
 КоличествоТочек = бит_уп_Сервер.ПолучитьКоличествоТочекВида(Объект.Ссылка,Перечисления.бит_уп_ВидыТочекАлгоритмов.Разделение); 
 КэшированныеЗначения.Вставить("КоличествоТочекРазделения" ,КоличествоТочек);
 КоличествоТочек = бит_уп_Сервер.ПолучитьКоличествоТочекВида(Объект.Ссылка,Перечисления.бит_уп_ВидыТочекАлгоритмов.Слияние); 
 КэшированныеЗначения.Вставить("КоличествоТочекСлияния" ,КоличествоТочек);

 // Картинки
 КэшированныеЗначения.Вставить("КартинкаОткрыть"  ,БиблиотекаКартинок.бит_уп_Открыть);
 КэшированныеЗначения.Вставить("КартинкаПривязать",БиблиотекаКартинок.БизнесПроцесс);
 КэшированныеЗначения.Вставить("КартинкаОтвязать" ,БиблиотекаКартинок.бит_уп_Отвязать);
 КэшированныеЗначения.Вставить("ПометкаУдаления"  ,БиблиотекаКартинок.ПометитьНаУдаление);
 
 
КонецПроцедуры

&НаСервере
Процедура УвеличитьКоличествоТочек(ИмяПараметра)

	 мКэшированныеЗначения[ИмяПараметра] = мКэшированныеЗначения[ИмяПараметра]+1;

КонецПроцедуры

// Процедура устанавливаем видимость/доступность элементов формы.
// 
// 
&НаСервере
Процедура УстановитьВидимость()
	
	флЭтоВизирование  = ?(Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Визирование, Истина, Ложь);
	флЭтоПроизвольный = ?(Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Прочее, Истина, Ложь);
	                                    	
	Элементы.СпособВыполнения.Видимость 	= флЭтоВизирование;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-23 (#3314)
	//Элементы.ГруппаПараметры.Видимость  	= флЭтоПроизвольный;
	//Заменено на:
	Элементы.ГруппаПараметры.Видимость  	= флЭтоПроизвольный ИЛИ Объект.ок_НоваяСхема;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-23 (#3314)
	Элементы.ГруппаНазначение.Видимость 	= флЭтоПроизвольный;
	Элементы.ФормаСоздатьПроцесс.Видимость 	= флЭтоПроизвольный;
	
	Элементы.ФормаПомощник.Видимость = ОтображениеКнопкиПомощник();
	
	Элементы.ГруппаДекорацияПредупреждение.Видимость = ТолькоЧтение;
	Элементы.ДекорацияПредупредениеОБлокировке.Заголовок = ПричинаБлокировки();
	Если ТолькоЧтение Тогда
	    ТолькоПросмотр = Истина;	
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура восстанавливает типы в таб. поле ПараметрыАлгоритма по строковому представлению.
// 
&НаСервере
Процедура ВосстановитьТипыПараметров()
	
	Для каждого СтрокаТаблицы Из Объект.ПараметрыАлгоритма Цикл
		
		СтрокаТаблицы.Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.СтрТип);
		
	КонецЦикла; 
	
КонецПроцедуры // ВосстановитьТипыПараметров()

// Процедура выводит дополнительную информацию при необходимости.
// 
&НаСервере
Процедура УправлениеДопИнформацией()
	
	флОтображатьИнформацию = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		флОтображатьИнформацию = Истина;
		ТекстСообщения = НСтр("ru = 'Для начала редактирования алгоритма запишите элемент. Точка старта будет создана автоматически.'");
				
	Иначе
		
		МассивВидов = Новый Массив;
		МассивВидов.Добавить(Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие);
		МассивВидов.Добавить(Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие);
		МассивВидов.Добавить(Перечисления.бит_уп_ВидыТочекАлгоритмов.Разделение);
		МассивВидов.Добавить(Перечисления.бит_уп_ВидыТочекАлгоритмов.Слияние);
		
		КоличествоТочек = бит_уп_Сервер.ПолучитьКоличествоТочекВида(Объект.Ссылка,МассивВидов); 
		
		Если КоличествоТочек = 0 Тогда
			
			флОтображатьИнформацию = Истина;
			ТекстСообщения = НСтр("ru = 'Для добавления точек алгоритма щелкните левой кнопкой мыши по существующей точке алгоритма.'");
			
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Элементы.ГруппаИнформация.Видимость = флОтображатьИнформацию;
	Если флОтображатьИнформацию Тогда
		
		Элементы.ДекорацияНадписьИнформация.ЦветТекста = WebЦвета.Зеленый;
		Элементы.ДекорацияНадписьИнформация.Заголовок = ТекстСообщения;
		
	КонецЕсли; 
	
	ПараметрыОбъекта = КонструкторСтруктурыДляПередачи();
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта,Объект);
	ПараметрыОбъекта.ПоказатьВсеТочки = Истина;
	
	бит_уп_Сервер.НарисоватьМаршрутПроцесса(Маршрут,ПараметрыОбъекта);
	
КонецПроцедуры // УправлениеДопИнформацией()

&НаКлиентеНаСервереБезКонтекста
Функция КонструкторСтруктурыДляПередачи()

	ПараметрыОбъекта = Новый Структура("ПолеВерх
	                                    |,ПолеЛево
										|,Ширина
										|,Высота
										|,ИнтервалВертикаль
										|,ИнтервалГоризонталь
										|,Ссылка
										|,РазмещениеСвободныхТочек
										|,ПоказатьВсеТочки");

	Возврат ПараметрыОбъекта;
	
КонецФункции // КонструкторСтруктурыДляПередачи()

// Процедура обрабатывает изменение вида процесса.
// 
&НаСервере
Процедура ВидАлгоритмаИзменение()
	
	УстановитьВидимость();
	
	Если Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Прочее Тогда
		
		Объект.СпособВыполнения = Перечисления.бит_уп_СпособыВыполненияАлгоритма.Поэтапно;
	
	ИначеЕсли Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов Тогда	
		
		Объект.СпособВыполнения = Перечисления.бит_уп_СпособыВыполненияАлгоритма.Сразу;
		
	КонецЕсли; 
	
КонецПроцедуры // ВидПроцессаИзменение()

// Процедура обрабатывает изменение типа в строке табличной части ПараметрыАлгоритма.
// 
// Параметры:
//  ИдСтроки - Число.
// 
&НаСервере
Процедура ТипИзменение(ИдСтроки)
    
	ТекущаяСтрока = Объект.ПараметрыАлгоритма.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ТекущаяСтрока.СтрТип              = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ТекущаяСтрока.Тип);
		ТекущаяСтрока.ЗначениеПоУмолчанию = ТекущаяСтрока.Тип.ПривестиЗначение(ТекущаяСтрока.ЗначениеПоУмолчанию);
	
	КонецЕсли; 

КонецПроцедуры // ТипИзменение() 

// Функция возвращает значение видимости кнопки "Помощник создания точек".
// 
&НаСервере
Функция ОтображениеКнопкиПомощник()
	
	Видимость = Ложь;
	Для Каждого Стр Из Объект.ПараметрыАлгоритма Цикл
		Если Стр.Динамический Тогда
		   Видимость = Истина;
		   Прервать;
	   КонецЕсли;
	КонецЦикла;
	
	Возврат Видимость;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПользовательскиеДействияЗаполнены(Алгоритм)

	Результат = Справочники.бит_уп_Алгоритмы.ПользовательскиеДействияЗаполнены(Алгоритм);

	Возврат Результат.СписокТочек;
	
КонецФункции

&НаСервере
Процедура УстановитьОформлениеВАлгоритмеСервер()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТочкиАлгоритмов.Ссылка,
	               |	ТочкиАлгоритмов.ВидТочки
	               |ИЗ
	               |	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	               |ГДЕ
	               |	ТочкиАлгоритмов.Владелец = &Владелец";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Отказ = Ложь;
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		СтруктураОформление = Новый Структура;
		СтруктураОформление.Вставить("Шрифт"                  ,Новый Шрифт("Roboto",8,Ложь));
		СтруктураОформление.Вставить("ЦветФона"               ,ЦветаСтиля.бит_ЦветТочекАлгоритма);
		СтруктураОформление.Вставить("ЦветЛинии"              ,ЦветаСтиля.бит_ЦветТочекАлгоритма);	
		
		Если Выборка.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие Тогда
		
			СтруктураОформление.Вставить("ЦветТекста",Новый Цвет(255,255,255));	
		Иначе	
			СтруктураОформление.Вставить("ЦветТекста",ЦветаСтиля.бит_ЦветТочекАлгоритма);	
		КонецЕсли; 
		
		СтруктураОформление.Вставить("ГоризонтальноеПоложение",ГоризонтальноеПоложение.Центр);
		СтруктураОформление.Вставить("ВертикальноеПоложение"  ,ВертикальноеПоложение.Центр);
		
		ОформлениеТочки = Новый ХранилищеЗначения(СтруктураОформление);
		
		ТочкиОб = Выборка.Ссылка.ПолучитьОбъект();
		ТочкиОб.ОформлениеТочки = ОформлениеТочки;
		
		Если Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Визирование 
		   И Объект.СпособВыполнения = Перечисления.бит_уп_СпособыВыполненияАлгоритма.Поэтапно Тогда
			
			Справочники.бит_уп_ТочкиАлгоритмов.ПриЗаписиТочкиСлияния(Выборка.Ссылка, Отказ);
		КонецЕсли;
	
		Если НЕ Отказ Тогда
			ТочкиОб.Записать();
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		ЗафиксироватьТранзакцию();	
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьВопросОЗаписи()

	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ВидАлгоритма) Тогда
		
		ТекстСообщения = НСтр("ru = 'Для начала редактирования маршрута запишите алгоритм.
						            |При этом точка старта будет создана автоматически.
						            |
						            |Записать алгоритм?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьВопросОЗаписиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли; 	

КонецПроцедуры

// Описание оповещения о завершении для процедуры "ПоказатьВопросОЗаписи()".
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога.
//  ДополнительныеПараметры	 - Произвольный.
//
&НаКлиенте
Процедура ПоказатьВопросОЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			Записать();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ПоказатьВопросОЗаписи()
 
// Открывает форму помощника создания точек алгоритма.
// 
&НаКлиенте
Процедура ОткрытьФормуПомощника(ПараметрыФормы)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОЗаписиЭлементаЗавершение", ЭтотОбъект, ПараметрыФормы);
		Вопрос = РежимДиалогаВопрос.ДаНет;
		Текст = Нстр("ru = 'Для открытия формы помощника необходимо записать документ. Записать?'");
		ПоказатьВопрос(Оповещение, Текст, Вопрос, 0);
	Иначе
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.бит_уп_Алгоритмы.Форма.ФормаПомощникаВводаАлгоритма",ПараметрыФормы,ЭтаФорма,,,,,РежимОкна);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения "ВопросОЗаписиЭлементаЗавершение".
// 
&НаКлиенте
Процедура ВопросОЗаписиЭлементаЗавершение(Ответ, ПараметрыФормы) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;		
		ОткрытьФорму("Справочник.бит_уп_Алгоритмы.Форма.ФормаПомощникаВводаАлгоритма",ПараметрыФормы,ЭтаФорма,,,,,РежимОкна);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВопросОЗаписиЭлементаЗавершение() 

// Процедура проверяет значения колонки Имя ТЧ Параметры,
// на наличие пробелов.
// 
&НаСервере
Процедура ВыполнитьПроверкуТЧПараметры()
	
	ТЧ = Объект.ПараметрыАлгоритма;
	Для Каждого Стр Из ТЧ Цикл
		Если Найти(Стр.Имя," ") Тогда
			Стр.Имя = СтрЗаменить(Стр.Имя," ", "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьПараметрыДляПередачи()

	ПараметрыОбъекта = КонструкторСтруктурыДляПередачи();
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта,Объект);
	ПараметрыОбъекта.ПоказатьВсеТочки = Истина;
	
	Возврат ПараметрыОбъекта;
	
КонецФункции // ЗаполнитьПараметрыДляПередачи()

&НаКлиенте
Функция ВетвлениеДоступно()

	флВетвлениеДоступно = ?(Объект.ВидАлгоритма = мКэшированныеЗначения.Перечисления.бит_уп_ВидыАлгоритмов.Визирование 
	                          ИЛИ Объект.ВидАлгоритма = мКэшированныеЗначения.Перечисления.бит_уп_ВидыАлгоритмов.Прочее,Истина,Ложь);

	Возврат флВетвлениеДоступно;
	
КонецФункции // ВетвлениеДоступно()

&НаКлиенте
Функция ПривязкаПоГоризонталиРазрешена()

	Если НЕ мТочкаДляПривязки = Неопределено 
		 И НЕ мТочкаДляПривязкиВидТочки = мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Слияние Тогда
		 
		флПривязкаРазрешена = Истина ;
		
	Иначе	
		
		флПривязкаРазрешена = Ложь;
		
	КонецЕсли; 

	Возврат флПривязкаРазрешена;
	
КонецФункции // ПривязкаПоГоризонталиРазрешена()

// Функция формирует меню действий при обработке расшифровки.
// 
// Параметры:
//  Расшифровка  - Структура
// 
// Возвращаемое значение:
//   Меню   - СписокЗначений
// 
&НаКлиенте
Функция СформироватьМенюРасшифровки(Расшифровка)
	
	флВетвлениеДоступно = ВетвлениеДоступно();
	
	Меню = Новый СписокЗначений;
	
	Меню.Добавить("Открыть","Открыть",,мКэшированныеЗначения.КартинкаОткрыть);
	Если ЗначениеЗаполнено(Расшифровка.ПользовательскоеДействие) Тогда
		
		Меню.Добавить("ОткрытьДействие","Открыть действие",,мКэшированныеЗначения.КартинкаОткрыть);
		
	КонецЕсли; 
	Если ЗначениеЗаполнено(Расшифровка.ПользовательскоеУсловие) Тогда
		
		Меню.Добавить("ОткрытьУсловие","Открыть условие",,мКэшированныеЗначения.КартинкаОткрыть);
		
	КонецЕсли; 
	
	Если НЕ Расшифровка.ПометкаУдаления Тогда
		
		Если Расшифровка.ВидТочки = мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Старт Тогда
			
			Если Расшифровка.КоличествоИсхВертикаль = 0 Тогда
				
				Меню.Добавить("ДобавитьТочкуДействия","Добавить точку действия");
				Меню.Добавить("ДобавитьТочкуУсловия" ,"Добавить точку условия");
				Если флВетвлениеДоступно Тогда
					
					Меню.Добавить("ДобавитьТочкуРазделения","Добавить точку разделения");
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			
		ИначеЕсли Расшифровка.ВидТочки = мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие Тогда
			
			Если Расшифровка.КоличествоИсхВертикаль = 0 Тогда
				
				Меню.Добавить("ДобавитьТочкуДействия","Добавить точку действия");
				Меню.Добавить("ДобавитьТочкуУсловия" ,"Добавить точку условия");
				Если флВетвлениеДоступно Тогда
					
					Меню.Добавить("ДобавитьТочкуРазделения","Добавить точку разделения");
					
				КонецЕсли; 
				Меню.Добавить("ДобавитьТочкуСлияния"   ,"Добавить точку слияния");

				
			КонецЕсли; 
			
			Если Расшифровка.КоличествоСвязейВход = 0 Тогда
				
				Меню.Добавить("Привязать","Привязать",,мКэшированныеЗначения.КартинкаПривязать);	
				
			Иначе
				
				Меню.Добавить("Отвязать","Отвязать",,мКэшированныеЗначения.КартинкаОтвязать);
				
			КонецЕсли; 
			
			
		ИначеЕсли Расшифровка.ВидТочки = мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие Тогда
			
			Если Расшифровка.КоличествоИсхВертикаль = 0 Тогда
				
				Меню.Добавить("ДобавитьТочкуДействия_ДА","Добавить точку действия (ДА)");
				Меню.Добавить("ДобавитьТочкуУсловия_ДА" ,"Добавить точку условия (ДА)");	
				
				Если флВетвлениеДоступно Тогда
					Меню.Добавить("ДобавитьТочкуРазделения_ДА","Добавить точку разделения (ДА)");
				КонецЕсли;	
				Меню.Добавить("ДобавитьТочкуСлияния"   ,"Добавить точку слияния");
				
			КонецЕсли;
			
			Если Расшифровка.КоличествоИсхГоризонталь = 0 Тогда
				
				Меню.Добавить("ДобавитьТочкуДействия_НЕТ","Добавить точку действия (НЕТ)");
				Меню.Добавить("ДобавитьТочкуУсловия_НЕТ" ,"Добавить точку условия (НЕТ)");
				
				Если флВетвлениеДоступно Тогда
					Меню.Добавить("ДобавитьТочкуРазделения_НЕТ","Добавить точку разделения (НЕТ)");
				КонецЕсли;	
				
			КонецЕсли; 
						
			Если Расшифровка.КоличествоСвязейВход = 0 Тогда
				
				Меню.Добавить("Привязать","Привязать",,мКэшированныеЗначения.КартинкаПривязать);	
				
			Иначе
				
				Меню.Добавить("Отвязать","Отвязать",,мКэшированныеЗначения.КартинкаОтвязать);
				
			КонецЕсли; 
			
		ИначеЕсли Расшифровка.ВидТочки = мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Разделение Тогда
			
			Меню.Добавить("ДобавитьТочкуДействия","Добавить точку действия");
			Меню.Добавить("ДобавитьТочкуУсловия" ,"Добавить точку условия");	
			Если ОтображениеКнопкиПомощник() Тогда
			    Меню.Добавить("ПомощникСозданияТочек", "Помощник создания точек");
			КонецЕсли;
			Если Расшифровка.КоличествоСвязейВход = 0 Тогда
				
				Меню.Добавить("Привязать","Привязать",,мКэшированныеЗначения.КартинкаПривязать);	
				
			Иначе
				
				Меню.Добавить("Отвязать","Отвязать",,мКэшированныеЗначения.КартинкаОтвязать);
				
			КонецЕсли; 
			
			
		ИначеЕсли Расшифровка.ВидТочки = мКэшированныеЗначения.Перечисления.бит_уп_ВидыТочекАлгоритмов.Слияние Тогда
			
			
			Меню.Добавить("Привязать","Привязать",,мКэшированныеЗначения.КартинкаПривязать);	
			Для каждого Элемент Из Расшифровка.ВходящиеТочки Цикл
				
				СтрПунктМеню = Новый Структура("Действие,ТочкаСвязанная","Отвязать",Элемент.Значение);
				ТекстПунктМеню = "Отвязать """+Элемент.Представление+"""";
				Меню.Добавить(СтрПунктМеню,ТекстПунктМеню,,мКэшированныеЗначения.КартинкаОтвязать);
				
			КонецЦикла; 
			
			
			Если Расшифровка.КоличествоИсхВертикаль = 0 Тогда
				
				Меню.Добавить("ДобавитьТочкуДействия"   ,"Добавить точку действия");
				Меню.Добавить("ДобавитьТочкуУсловия"    ,"Добавить точку условия");
				Меню.Добавить("ДобавитьТочкуРазделения" ,"Добавить точку разделения");				
				
			КонецЕсли; 
			
			
		КонецЕсли; 
		
		Меню.Добавить("УстановитьПометкуУдаления","Установить пометку удаления",,мКэшированныеЗначения.ПометкаУдаления);		
		
	Иначе
		
		Меню.Добавить("СнятьПометкуУдаления","Снять пометку удаления",,мКэшированныеЗначения.ПометкаУдаления);
		
	КонецЕсли;  // Пометка удаления
	
	
	Возврат Меню;
	
КонецФункции // СформироватьМенюРасшифровки()

&НаКлиенте
Процедура ОткрытьНовуюТочкуАлгоритма(Алгоритм,ТочкаВходящая,Направление,ВидТочки,КоличествоТочек)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Алгоритм"             ,Алгоритм);
	ПараметрыФормы.Вставить("ТочкаВходящая"        ,ТочкаВходящая);
	ПараметрыФормы.Вставить("Направление"          ,Направление);
	ПараметрыФормы.Вставить("ВидТочки"             ,ВидТочки);
	ПараметрыФормы.Вставить("КоличествоТочекВида"  ,КоличествоТочек);
	ПараметрыФормы.Вставить("СоздатьСвязьПриЗаписи",Истина);
	ПараметрыФормы.Вставить("ОткрытаИзМаршрута"    ,Истина);
	
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;	
	ОткрытьФорму("Справочник.бит_уп_ТочкиАлгоритмов.ФормаОбъекта",ПараметрыФормы,ЭтаФорма,,,,,РежимОкна);
	
КонецПроцедуры // ОткрытьНовуюТочкуАлгоритма()

// Процедура устанавливает видимость табличного поля со схемой алгоритма.
// 
&НаКлиенте
Процедура УстановитьВидимостьАлгоритма()
	
	// В Web-клиенте рисунки табличного документа отображаются некорректно...
	# Если ВебКлиент Тогда
		Элементы.Маршрут.Видимость      = Ложь;
		Элементы.АлгоритмХТМЛ.Видимость = Истина;
	# КонецЕсли
	
	# Если НЕ ВебКлиент Тогда
		Элементы.Маршрут.Видимость      = Истина;
		Элементы.АлгоритмХТМЛ.Видимость = Ложь;
	# КонецЕсли
	
КонецПроцедуры // УстановитьВидимостьАлгоритма()

// Процедура выполняет перерисовку алгортима процесса.
// 
&НаКлиенте
Процедура ОбновитьАлгоритм()
	
	#Если ВебКлиент Тогда
		
		// Вывод блок-схемы алгоритма в Поле ХТМЛ
		СтрДанные = бит_уп_Сервер.ПолучитьДанныеОтрисовкиХТМЛ(Объект.Ссылка);
		ОбновитьАлгоритмХТМЛ(СтрДанные);
		
	#КонецЕсли 	

	#Если НЕ ВебКлиент Тогда
		
		// Вывод блок-схемы алгоритма в табличный документ.
	    бит_уп_Сервер.НарисоватьМаршрутПроцесса(Маршрут,СформироватьПараметрыДляПередачи());
		
	#КонецЕсли 
	
КонецПроцедуры // ОбновитьАлгоритмХТМЛ()

// Осуществляет вывод алгоритма процесса в поле HTML.
// 
// Параметры:
//  СтрДанные - Структура
// 
&НаКлиенте
Процедура ОбновитьАлгоритмХТМЛ(СтрДанные)
	
	Элементы.АлгоритмХТМЛ.document.defaultView.sData  = СтрДанные.Точки;
	Элементы.АлгоритмХТМЛ.document.defaultView.sLines = СтрДанные.Линии;
	Элементы.АлгоритмХТМЛ.document.defaultView.sSvgAreaParam = СтрДанные.Холст;		
	
	СтрВыполнить = "CreateMap()";
	
	Элементы.АлгоритмХТМЛ.document.defaultView.eval(СтрВыполнить);
	
КонецПроцедуры // ОбновитьАлгоритмХТМЛ()

#КонецОбласти
