
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	КартаМаршрута = ТекущийОбъект.КартаМаршрута.Получить();
	ПодготовитьФормуНаСервере(КартаМаршрута, ТекущийОбъект.Ссылка, Ложь);
	УправлениеДопИнформацией();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	#Если ВебКлиент Тогда
	 	ЭтоВебКлиент = Истина;	
	#КонецЕсли 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ЗначениеКопирования, 
									"КартаМаршрута, ВидАлгоритма");
			КартаМаршрута	 = Параметры.ЗначениеКопирования.КартаМаршрута.Получить();
			Если РеквизитыИсточника.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Прочее Тогда
				ЗначениеКопирования = Параметры.ЗначениеКопирования;
			КонецЕсли;
		Иначе 
			КартаМаршрута = Справочники.бит_уп_Алгоритмы.ПолучитьМакет("СхемаНовогоАлгоритма");
		КонецЕсли; 		
		
		ПодготовитьФормуНаСервере(КартаМаршрута, Параметры.ЗначениеКопирования, Истина);
		УправлениеДопИнформацией();
	КонецЕсли; 
	
	// Восстановление типов параметров в таб. поле ПараметрыАлгоритма.
	ВосстановитьТипыПараметров();
	
	ТекущийВидАлгоритма = Объект.ВидАлгоритма;
	
	УстановитьПараметрыВыбораТекущаяТочкаДействие(ЭтотОбъект);
	УправлениеПанельюТекущаяТочка(ЭтотОбъект, Ложь);
	
	Если ТочкиМаршрута.Количество() <> 0 Тогда
	    Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМаршрут;
	КонецЕсли; 
	
	// ++ БП 
	Элементы.ДекорацияКот.Картинка = БиблиотекаКартинок.ДлительнаяОперация200;
	// -- БП 
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	 	ЭтоВебКлиент = Истина;
		УправлениеПанельюТекущаяТочка(ЭтотОбъект, Ложь);
		УправлениеФормой(ЭтотОбъект);
	#КонецЕсли 
	
	Если ЭтоВебКлиент Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ПодключитьОбработчикОжидания("ПриОткрытииПродолжение", 1, Истина);
	ИначеЕсли Объект.Ссылка.Пустая() Тогда 	
		// Выделить точку действия "новой" схемы.
		ВыделитьЭлементыСхемы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТочкиМаршрута.Количество() <> 0 Тогда
		ТочкаСтарта = ТочкиМаршрута.НайтиСтроки(Новый Структура("ВидТочки", Перечисления.бит_уп_ВидыТочекАлгоритмов.Старт));
		Если ТочкаСтарта.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Нет точки стартра.'"),,, "Объект",Отказ); 
		ИначеЕсли ТочкаСтарта.Количество() > 1 Тогда 	
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Несколько точек старта не поддерживатся.'"),,, "Объект",Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
	Если Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Визирование Тогда
		// Визирование не поддерживает вложенные процессы.
		Для каждого СтрокаТаблицы Из ТочкиМаршрута Цикл
			Если Объект.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Визирование
			   И СтрокаТаблицы.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс Тогда
				ТекстСообщения = НСтр("ru = 'Вложенные процессы в алгоритме визирования не поддерживаются.'"); 
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,"Объект",Отказ);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		УправлениеДопИнформацией();
		Если ТочкиМаршрутаКУдалению.Количество() > 0 И АлгоритмИспользуется Тогда
			ОбщегоНазначения.СообщитьПользователю(НадписьИнформация,,, "Объект",Отказ); 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЭтоВебКлиент Тогда
		Возврат;
	КонецЕсли;
	
	// Операции без активизации графической схемы.
	УстановитьСвойстваТекущейСтрокиТочекМаршрута(ЭтотОбъект);

	ВыделитьЭлементыСхемы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоВебКлиент Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущийОбъект.КартаМаршрута = Новый ХранилищеЗначения(ГрафическаяСхема, 
										Новый СжатиеДанных(9));

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоВебКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийОбъект.ПометкаУдаления Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Алгоритм помечен на удаление."
				+ "Графическая схема сохранена, но изменения точек схемы игнорируются.'"));
		Возврат;
	КонецЕсли; 
	
	Результат = бит_УправлениеПроцессамиКлиентСервер.СвязиЭлементовГрафическойСхемы(ГрафическаяСхема);
	
	ВходящиеТочки = Результат.ВходящиеТочки;
	ИсходящиеТочки = Результат.ИсходящиеТочки;  	
	
	ИдентификаторыТочек = Новый Соответствие(); // Для ускорения многократного поиска.
	КопияТочкиМаршрута  = РеквизитФормыВЗначение("ТочкиМаршрута"); // Резервная копия для восстановления при ошибках записи.
	
	Для каждого СтрокаТаблицы Из ТочкиМаршрута Цикл
		Если СтрокаТаблицы.НоваяТочка Тогда
			СтрокаТаблицы.ТочкаМаршрута = Справочники.бит_уп_ТочкиАлгоритмов.ПолучитьСсылку();
		КонецЕсли; 
		ИдентификаторыТочек.Вставить(СтрокаТаблицы.ИдентификаторТочки, СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ТочкиМаршрута Цикл
		
		Если Отказ Тогда
			Прервать;		
		КонецЕсли; 
		
		ДанныеЗаполнения = Новый Структура("Наименование, КодТочки, ИдентификаторТочки, ВидТочки, Владелец"); 
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаТаблицы);
		ДанныеЗаполнения.Вставить("ПользовательскоеУсловие", СтрокаТаблицы.Условие);
		ДанныеЗаполнения.Вставить("ПользовательскоеДействие",СтрокаТаблицы.Действие);
		ДанныеЗаполнения.Вставить("Владелец", 				 ТекущийОбъект.Ссылка);
		
		Если СтрокаТаблицы.НоваяТочка Тогда
			ТочкаМаршрута = Справочники.бит_уп_ТочкиАлгоритмов.СоздатьЭлемент();
			ТочкаМаршрута.Заполнить(ДанныеЗаполнения);
			ТочкаМаршрута.УстановитьСсылкуНового(СтрокаТаблицы.ТочкаМаршрута);
		Иначе
			ТочкаМаршрута = СтрокаТаблицы.ТочкаМаршрута.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ТочкаМаршрута, ДанныеЗаполнения);
		КонецЕсли; 
		
		ТочкаМаршрута.ВходящиеТочки.Очистить();
		ТочкаМаршрута.ИсходящиеТочки.Очистить();
		ТочкаМаршрута.ПараметрыПроцесса.Очистить();
		
		НайденныеСвязи = ВходящиеТочки.Получить(СтрокаТаблицы.ИдентификаторТочки);
		Если ТипЗнч(НайденныеСвязи) = Тип("Соответствие") Тогда
			Для каждого ЭлементСвязи Из НайденныеСвязи Цикл
				СвойствоВходящейТочки = ИдентификаторыТочек.Получить(ЭлементСвязи.Ключ);
				НоваяСтрока = ТочкаМаршрута.ВходящиеТочки.Добавить();
				НоваяСтрока.Точка = СвойствоВходящейТочки.ТочкаМаршрута;
				Если СвойствоВходящейТочки.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие Тогда
					НоваяСтрока.Направление = ?(СтрокаТаблицы.РезультатУсловия, 
					Перечисления.бит_уп_Направление.Вертикаль, Перечисления.бит_уп_Направление.Горизонталь);
				Иначе	
					НоваяСтрока.Направление = Перечисления.бит_уп_Направление.Вертикаль;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		НайденныеСвязи = ИсходящиеТочки.Получить(СтрокаТаблицы.ИдентификаторТочки);
		Если ТипЗнч(НайденныеСвязи) = Тип("Соответствие") Тогда
			Для каждого ЭлементСвязи Из НайденныеСвязи Цикл
				СвойствоИсходящейТочки = ИдентификаторыТочек.Получить(ЭлементСвязи.Ключ);
				НоваяСтрока = ТочкаМаршрута.ИсходящиеТочки.Добавить();
				НоваяСтрока.Точка = СвойствоИсходящейТочки.ТочкаМаршрута;
				Если СтрокаТаблицы.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие Тогда
					НоваяСтрока.Направление = ?(СвойствоИсходящейТочки.РезультатУсловия, 
					Перечисления.бит_уп_Направление.Вертикаль, Перечисления.бит_уп_Направление.Горизонталь);
				Иначе	
					НоваяСтрока.Направление = Перечисления.бит_уп_Направление.Вертикаль;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
		
		КопироватьЗначенияПараметров(Объект.ПараметрыАлгоритма, 
			СтрокаТаблицы.ПараметрыТочки, ТочкаМаршрута.ПараметрыПроцесса);

		ТочкаМаршрута.Владелец = ТекущийОбъект.Ссылка;
		
		Если ТочкаМаршрута.ПроверитьЗаполнение() Тогда
			Попытка
				ТочкаМаршрута.Записать();
				СтрокаТаблицы.НоваяТочка 		 = Ложь;
				СтрокаТаблицы.Модифицированность = Ложь;
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , ,Отказ);
				Если СтрокаТаблицы.НоваяТочка Тогда
					СтрокаТаблицы.ТочкаМаршрута = Справочники.бит_уп_ТочкиАлгоритмов.ПустаяСсылка();
				Иначе
					Отказ = Истина;
				КонецЕсли; 
			КонецПопытки; 
		Иначе
			Если СтрокаТаблицы.НоваяТочка Тогда
				СтрокаТаблицы.ТочкаМаршрута = Справочники.бит_уп_ТочкиАлгоритмов.ПустаяСсылка();
			Иначе
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Отказ Тогда
		ЗначениеВРеквизитФормы(КопияТочкиМаршрута, "ТочкиМаршрута");
		Возврат;	
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ТочкиМаршрутаКУдалению Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ТочкаМаршрута) Тогда
			ДанныеЗаполнения = Новый Структура("КодТочки, ИдентификаторТочки", "", 0);
			ТочкаМаршрута = СтрокаТаблицы.ТочкаМаршрута.ПолучитьОбъект();
			ТочкаМаршрута.ДополнительныеСвойства.Вставить("УдаленИзСхемы", Истина);
			ТочкаМаршрута.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоВебКлиент Тогда
		Возврат;
	КонецЕсли;
	
	// Восстановление типов параметров в таб. поле ПараметрыАлгоритма.
	ВосстановитьТипыПараметров();	
	УправлениеФормой(ЭтотОбъект);
	УстановитьПараметрыВыбораТекущаяТочкаДействие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтоВебКлиент Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НЕ ЗавершениеРаботы И НЕ ЗакрыватьФорму Тогда
		Если Модифицированность Тогда
			УстановитьСвойстваТекущейСтрокиТочекМаршрута(ЭтотОбъект);
			ВыделитьЭлементыСхемы();
		КонецЕсли; 
		Если НЕ Объект.ПометкаУдаления Тогда
			ПроверитьЗаполнениеТочекМаршрутаПередЗакрытием(Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НазначитьИспользование(Команда)
	
	Отказ = Ложь;
	ПередНачаломИспользования(Отказ);
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидАлгоритма", Объект.ВидАлгоритма); 
	Отбор.Вставить("Алгоритм", 	   Объект.Ссылка); 
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор); 
	ОткрытьФорму("РегистрСведений.бит_уп_НазначениеАлгоритмов.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Отбор);
	ОткрытьФорму("РегистрСведений.бит_уп_НазначениеАлгоритмов.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбзорСхемы(Команда)
	
	ПараметрыФормы = Новый Структура; 
	ПараметрыФормы.Вставить("ГрафическаяСхема", ГрафическаяСхема);
	
	ОткрытьФорму("Справочник.бит_уп_Алгоритмы.Форма.ОбзорСхемы", ПараметрыФормы, 
		ЭтотОбъект, Объект.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ТочкиАлгоритма(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Алгоритм не записан'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор, ЗакрыватьПриЗакрытииВладельца", Отбор, Истина);
	ОткрытьФорму("Справочник.бит_уп_ТочкиАлгоритмов.ФормаСписка", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидПроцессаПриИзменении(Элемент)
	
	Если ТекущийВидАлгоритма <> Объект.ВидАлгоритма Тогда
		ТекущийВидАлгоритма = Объект.ВидАлгоритма;
		УстановитьПараметрыВыбораТекущаяТочкаДействие(ЭтотОбъект);
		ВидАлгоритмаИзменение();
		ПредложитьЗаписатьСправочник();
		ВыделитьЭлементыСхемы();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафическаяСхемаПриИзменении(Элемент)
	
	// Изменение схемы может быть связано с изменением свойств элементов схемы или состава элементов.
	// При этом изменение свойств текущей точки может быть не зафиксированно.
	// Считываем текущую точку.
	// Изменяем таблицу точек при изменении схемы.
	// Устанавливть новую текущую точку будем при активизации.
	
	УстановитьСвойстваТекущейСтрокиТочекМаршрута(ЭтотОбъект);
		
	ПриИзмененииГрафическойСхемы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафическаяСхемаПриАктивизации(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииГрафическойСхемы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафическаяСхемаВыбор(Элемент)
	
	// Выбор происходит раньше подключенного обработчика, поэтому вызываем.
	ПриАктивизацииГрафическойСхемы();
	
	Если ТекущаяТочкаИдентификатор <> 0 Тогда
		
		Если ТекущаяТочкаВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие") Тогда
			Если ЗначениеЗаполнено(ТекущаяТочкаДействие) Тогда
				ПараметрыПередачи = Новый Структура("Ключ", ТекущаяТочкаДействие);
				ПараметрыПередачи.Вставить("ЗначенияЗаполнения", ПараметрыВыбораТочкиДействия()); 
				
				ОткрытьФорму("Справочник.бит_ПользовательскиеДействия.ФормаОбъекта", ПараметрыПередачи, 
					ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ПоказатьСписокВыбораДействия();	
			КонецЕсли;	
		КонецЕсли;
		
		Если ТекущаяТочкаВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс") Тогда
			Если ЗначениеЗаполнено(ТекущаяТочкаДействие) Тогда
				ПодчиненныйАлгоритм = ПодчиненныйАлгоритм(ТекущаяТочкаДействие);
				ПараметрыПередачи = Новый Структура("Ключ", ПодчиненныйАлгоритм);
				ПараметрыПередачи.Вставить("ЗначенияЗаполнения", ПараметрыВыбораТочкиДействия());
				
				ОткрытьФорму("Справочник.бит_уп_Алгоритмы.ФормаОбъекта", ПараметрыПередачи, 
					ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ПоказатьСписокВыбораДействия();	
			КонецЕсли;	
		КонецЕсли;
		
		Если ТекущаяТочкаВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Условие") Тогда
			Если ЗначениеЗаполнено(ТекущаяТочкаУсловие) Тогда
				ПараметрыПередачи = Новый Структура("Ключ", ТекущаяТочкаУсловие); 
				ОткрытьФорму("Справочник.бит_ПользовательскиеУсловия.ФормаОбъекта", ПараметрыПередачи, 
					ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
			Иначе
				ПоказатьСписокВыбораУсловия();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТочкаНаименованиеПриИзменении(Элемент)
	
	ПриИзмененииНаименованияТекущейТочки();
	ТекущаяТочкаМодифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТочкаДействиеПриИзменении(Элемент)
	
	ОбработатьИзменениеТекущейТочкиДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТочкаДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Прочее")
		И Объект.Ссылка.Пустая() Тогда
		ПредложитьЗаписатьСправочник();
	Иначе
		ПоказатьСписокВыбораДействия();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТочкаДействиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПередачи = Новый Структура("Ключ", ТекущаяТочкаДействие);
	ПараметрыПередачи.Вставить("ЗначенияЗаполнения", ПараметрыВыбораТочкиДействия()); 
	
	ОткрытьФорму("Справочник.бит_ПользовательскиеДействия.ФормаОбъекта", ПараметрыПередачи, 
		ЭтотОбъект, ЭтотОбъект,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТочкаУсловиеПриИзменении(Элемент)

	ОбработатьИзменениеТекущейТочкиУсловие();
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-06 (#3816)
&НаКлиенте
Процедура ок_НоваяСхемаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-06 (#3816)

#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляПараметрыАлгоритма

&НаКлиенте
Процедура ПараметрыАлгоритмаПриИзменении(Элемент)
	
	ОпределитьИспользуютсяПараметрыТочки(ЭтотОбъект);
	УправлениеПанельюТекущаяТочка(ЭтотОбъект, ТекущаяТочкаИдентификатор <> 0);	
	
	// Приведение параметров точек к параметрам алгоритма.
	Для каждого ПараметрАлгоритма Из Объект.ПараметрыАлгоритма Цикл
		СтрокаСуществует = Ложь;
		Для каждого СтрокаТаблицы Из ТекущаяТочкаПараметрыПроцесса Цикл
			Если СтрокаТаблицы.Имя = ПараметрАлгоритма.Имя Тогда
				СтрокаСуществует = Истина;
				Если НЕ ПараметрАлгоритма.Динамический Тогда
					ТекущаяТочкаПараметрыПроцесса.Удалить(СтрокаТаблицы);
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрАлгоритма);
					СтрокаТаблицы.Значение = ПараметрАлгоритма.Тип.ПривестиЗначение(СтрокаТаблицы.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		Если НЕ СтрокаСуществует И ПараметрАлгоритма.Динамический Тогда
			СтрокаТаблицы = ТекущаяТочкаПараметрыПроцесса.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрАлгоритма);
			СтрокаТаблицы.Значение = ПараметрАлгоритма.ЗначениеПоУмолчанию;	 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАлгоритмаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущаяСтрока = Элементы.ПараметрыАлгоритма.ТекущиеДанные;
		ТекущаяСтрока.СтрТип = "Строка";
		ТекущаяСтрока.Тип    = Новый ОписаниеТипов("Строка");
		ТекущаяСтрока.ЗначениеПоУмолчанию = ТекущаяСтрока.Тип.ПривестиЗначение(ТекущаяСтрока.ЗначениеПоУмолчанию);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАлгоритмаТипПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПараметрыАлгоритма.ТекущиеДанные;
	ТипИзменение(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАлгоритмаЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПараметрыАлгоритма.ТекущиеДанные;
	ТекущаяСтрока.ЗначениеПоУмолчанию = ТекущаяСтрока.Тип.ПривестиЗначение(ТекущаяСтрока.ЗначениеПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАлгоритмаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ПараметрыАлгоритма.ТекущиеДанные;
	ТекущиеДанные.Имя = СтрЗаменить(ТекущиеДанные.Имя, " ","_");
	ТекущиеДанные.Имя = СтрЗаменить(ТекущиеДанные.Имя, ",","_");

	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.Имя) Тогда
		Попытка
			Кандидат = Новый Структура(ТекущиеДанные.Имя); 
		Исключение
			
			ИндексСтроки = Объект.ПараметрыАлгоритма.Индекс(Элементы.ПараметрыАлгоритма.ТекущиеДанные);
			
			Пояснение = НСтр("ru = 'Имя параметра не соответствуют требованиям к именам переменных. "
								+ "Параметром  может быть любая последовательность букв, цифр и знаков подчеркивания, "
								+ "начинающаяся с буквы или знака подчеркивания.'");
			
			Поле = СтрШаблон("Объект.ПараметрыАлгоритма[%1].Имя", Формат(ИндексСтроки, "ЧН=0; ЧГ="));
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ",
								"Имя", ИндексСтроки + 1,"Параметры", Пояснение);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Поле,, Отказ);
		КонецПопытки; 
	КонецЕсли; 

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличногоПоляТекущаяТочкаПараметрыПроцесса

&НаКлиенте
Процедура ТекущаяТочкаПараметрыПроцессаПриИзменении(Элемент)
	
	ТекущаяТочкаМодифицированность = Истина;

КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзменениеТекущейТочкиУсловие()
	
	Если ЗначениеЗаполнено(ТекущаяТочкаУсловие) Тогда
		ТекущаяТочкаНаименование = Строка(ТекущаяТочкаУсловие);
		ПриИзмененииНаименованияТекущейТочки();
	КонецЕсли; 
	
	ВыделитьЭлементСхемы(ТекущаяТочкаУсловие, Ложь, Строка(ТекущаяТочкаИдентификатор), ЭтотОбъект);
	ТекущаяТочкаМодифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеТекущейТочкиДействие()
	
	Если ЗначениеЗаполнено(ТекущаяТочкаДействие) Тогда
		ТекущаяТочкаНаименование = Строка(ТекущаяТочкаДействие);
		ПриИзмененииНаименованияТекущейТочки();
	КонецЕсли; 
	
	Затемнить = Ложь;
	Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Визирование") 
		И ТекущаяТочкаВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс") Тогда
		Затемнить = Истина;
	КонецЕсли;
	
	ВыделитьЭлементСхемы(ТекущаяТочкаДействие, Затемнить, Строка(ТекущаяТочкаИдентификатор), ЭтотОбъект);
	ТекущаяТочкаМодифицированность = Истина;

КонецПроцедуры 

&НаКлиенте
Функция ПараметрыВыбораТочкиДействия()

	ПараметрыВыбораТочки = Элементы.ТекущаяТочкаДействие.ПараметрыВыбора;
	УстановленныеОтборы  = Новый Структура; 

	Если ПараметрыВыбораТочки <> Неопределено Тогда
		Для каждого ПараметрВыбора Из ПараметрыВыбораТочки Цикл
			УстановленныеОтборы.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
		КонецЦикла; 
	КонецЕсли;	

	Возврат УстановленныеОтборы;

КонецФункции
 
&НаКлиенте
Процедура ПоказатьСписокВыбораДействия()
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("Отбор", ПараметрыВыбораТочкиДействия());
	ПараметрыПередачи.Вставить("ТекущаяСтрока", ТекущаяТочкаДействие);
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьСписокВыбораДействияЗавершение", ЭтотОбъект); 
	ОткрытьФорму("Справочник.бит_ПользовательскиеДействия.ФормаВыбора", ПараметрыПередачи, 
		Неопределено, ЭтотОбъект,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры
	
// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте
Процедура ПоказатьСписокВыбораДействияЗавершение(Результат, Дополнительно) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Если ТекущаяТочкаДействие <> Результат Тогда
		ТекущаяТочкаДействие = Результат;
		ОбработатьИзменениеТекущейТочкиДействие();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокВыбораУсловия()
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ТекущаяСтрока", ТекущаяТочкаУсловие);
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьСписокВыбораУсловияЗавершение", ЭтотОбъект); 

	ОткрытьФорму("Справочник.бит_ПользовательскиеУсловия.ФормаВыбора", , 
		Неопределено, ЭтотОбъект,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте
Процедура ПоказатьСписокВыбораУсловияЗавершение(Результат, Дополнительно) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Если ТекущаяТочкаУсловие <> Результат Тогда
		ТекущаяТочкаУсловие = Результат;
		ОбработатьИзменениеТекущейТочкиУсловие();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодчиненныйАлгоритм(Действие)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "АлгоритмПодчиненный");

КонецФункции
 
&НаКлиенте
Процедура ПриОткрытииПродолжение()
	
	ТекстСообщения = НСтр("ru = 'Скопировать пользовательские действия в точки алгоритма?
						|Для этого придется записать элемент.'"); 
	
	Оповещение = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект); 
	ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, Дополнительно) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
	    Записать();
	    ПриОткрытииЗавершениеНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриОткрытииЗавершениеНаСервере()

	Справочники.бит_уп_Алгоритмы.КопироватьДействияВТочкиМаршрута(ЗначениеКопирования, Объект.Ссылка);
	ЗначениеКопирования = Неопределено;
	Прочитать();
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста 
Процедура ОпределитьИспользуютсяПараметрыТочки(Форма)
	
	Объект = Форма.Объект;
	// Используется сканирование таблицы, для того, что бы избежать вызова сервера при обработке на клиенте.
	Форма.ИспользуютсяПараметрыТочки = Ложь;
	Для каждого СтрокаТаблицы Из Объект.ПараметрыАлгоритма Цикл
		Форма.ИспользуютсяПараметрыТочки = Макс(СтрокаТаблицы.Динамический, Форма.ИспользуютсяПараметрыТочки);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоВизирование  = Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Визирование");
	ЭтоПроизвольный = Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Прочее");
	                                    	
	Элементы.СпособВыполнения.Видимость 		  = ЭтоВизирование;
	Элементы.ГруппаНазначение.Видимость 		  = ЭтоПроизвольный;
	Элементы.НазначитьИспользование.Видимость 	  = НЕ ЭтоПроизвольный;
	Элементы.ВидПроцесса.ТолькоПросмотр     	  = Форма.ЭтоВебКлиент;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-05-23 (#3314)
	//Элементы.СтраницаПараметрыАлгоритма.Видимость = ЭтоПроизвольный;
	//Заменено на:
	Элементы.СтраницаПараметрыАлгоритма.Видимость = ЭтоПроизвольный ИЛИ Объект.ок_НоваяСхема;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-05-23 (#3314)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-06 (#3816)
	//Если ЭтоПроизвольный Тогда
	Если ЭтоПроизвольный 
		ИЛИ Объект.ок_НоваяСхема Тогда
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-06 (#3816)
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе	
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли; 
	
	Если Форма.ЭтоВебКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Прочее") Тогда
		Элементы.ТекущаяТочкаДействие.Доступность = НЕ Объект.Ссылка.Пустая();
		Если Объект.Ссылка.Пустая() Тогда
			ТекстСообщения = НСтр("ru = '<Запишите алгоритм>'"); 
		Иначе	
			ТекстСообщения = ""; 
		КонецЕсли; 
		Элементы.ТекущаяТочкаДействие.ПодсказкаВвода = ТекстСообщения;
	Иначе	
		Элементы.ТекущаяТочкаДействие.Доступность 	 = Истина;
		Элементы.ТекущаяТочкаДействие.ПодсказкаВвода = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТипыПараметров()
	
	Для каждого СтрокаТаблицы Из Объект.ПараметрыАлгоритма Цикл
		
		СтрокаТаблицы.Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.СтрТип);
		
	КонецЦикла; 
	
КонецПроцедуры // ВосстановитьТипыПараметров()

&НаСервере
Процедура УправлениеДопИнформацией()
	
	НадписьИнформация = "";
	Результат = Справочники.бит_уп_Алгоритмы.АлгоритмИспользуется(Объект.Ссылка);
	
	АлгоритмИспользуется = Результат.АлгоритмИспользуется;
	Если АлгоритмИспользуется Тогда
		НадписьИнформация = СтрШаблон(НСтр("ru = 'Изменение состава точек не допускается. Алгоритм используется %1.'"), 
					Результат.МестоИспользования); 
	КонецЕсли; 
	Элементы.ГруппаДекорацияПредупреждение.Видимость = АлгоритмИспользуется;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВидАлгоритмаИзменение()
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Прочее") Тогда
		Объект.СпособВыполнения = ПредопределенноеЗначение("Перечисление.бит_уп_СпособыВыполненияАлгоритма.Поэтапно");
	ИначеЕсли Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Визирование") Тогда
		Объект.СпособВыполнения = ПредопределенноеЗначение("Перечисление.бит_уп_СпособыВыполненияАлгоритма.Поэтапно");	
	ИначеЕсли Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов") Тогда	
		Объект.СпособВыполнения = ПредопределенноеЗначение("Перечисление.бит_уп_СпособыВыполненияАлгоритма.Сразу");
	КонецЕсли; 
	
	ТекущаяТочкаДействие = ПредопределенноеЗначение("Справочник.бит_ПользовательскиеДействия.ПустаяСсылка");
	Для каждого СтрокаТаблицы Из ТочкиМаршрута Цикл
		СтрокаТаблицы.Действие = ТекущаяТочкаДействие;
	КонецЦикла; 
   
КонецПроцедуры

&НаСервере
Процедура ТипИзменение(ИдСтроки)
    
	ТекущаяСтрока = Объект.ПараметрыАлгоритма.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ТекущаяСтрока.СтрТип              = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ТекущаяСтрока.Тип);
		ТекущаяСтрока.ЗначениеПоУмолчанию = ТекущаяСтрока.Тип.ПривестиЗначение(ТекущаяСтрока.ЗначениеПоУмолчанию);
	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломИспользования(Отказ)

	Если (Модифицированность ИЛИ Объект.Ссылка.Пустая()) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Запишите алгоритм.'"); 
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	ОчиститьСообщения();
	Результат = АлгоритмГотовКРаботе();
	Если НЕ Результат.ГотовКРаботе Тогда
		ВызватьИсключение Результат.Ошибки;
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Функция АлгоритмГотовКРаботе()
	
	ГотовКРаботе = Справочники.бит_уп_Алгоритмы.АлгоритмГотовКРаботе(Объект.Ссылка);
	Ошибки = "";
	Если НЕ ГотовКРаботе Тогда
		Сообщения = ПолучитьСообщенияПользователю(Истина);
		Тексты = Новый Массив; 
		Для каждого Сообщение Из Сообщения Цикл
			Тексты.Добавить(Сообщение.Текст);
		КонецЦикла; 
		Ошибки = СтрСоединить(Тексты, Символы.ПС);
	КонецЕсли; 
	
	Результат = Новый Структура; 
	Результат.Вставить("ГотовКРаботе", ГотовКРаботе);
	Результат.Вставить("Ошибки", Ошибки);
	
	Возврат Результат;

КонецФункции
 
&НаКлиенте
Процедура ПроверитьЗаполнениеТочекМаршрутаПередЗакрытием(Отказ)

	ПропуститьПроверку = Ложь;
	
	Если ТочкиМаршрута.Количество() = 0 Тогда
		// Нет точек - нет проверки.
		ПропуститьПроверку = Истина;
	Иначе
		Если ТочкиМаршрута.Количество() = 1 Тогда
			Если ТочкиМаршрута[0].ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Старт") Тогда
				// Единственная точка - "старт". Пропустим проверку.
				ПропуститьПроверку = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли; 
	
	Результат = АлгоритмГотовКРаботе();
	
	Если НЕ Результат.ГотовКРаботе Тогда
		Отказ = Истина;
		ТекстСообщения = Результат.Ошибки 
					   + Символы.ПС + НСтр("ru='Закрыть форму?';en='Close form?'");   
		Оповещение = Новый ОписаниеОповещения("ПроверитьЗаполнениеТочекМаршрутаЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры
 
// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ПроверитьЗаполнениеТочекМаршрутаЗавершение(Результат, Дополнительно) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрыватьФорму = Истина;
		Закрыть();
	Иначе	
		ЗакрыватьФорму = Ложь;
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ПредложитьЗаписатьСправочник()

	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ВидАлгоритма) Тогда
		ТекстСообщения = "";
		Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Прочее") Тогда
			ТекстСообщения = НСтр("ru = 'Для заполнения действий в точках вида ""Действие""
										|требуется записать алгоритм. Продолжить?'"); 
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьЗаписатьСправочникЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли; 	

КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ПредложитьЗаписатьСправочникЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			Записать();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииГрафическойСхемы()

	ТекущийЭлементСхемы = Элементы.ГрафическаяСхема.ТекущийЭлемент;
	ТочкаМаршрута = Неопределено;
	Если ТекущийЭлементСхемы <> Неопределено Тогда
		ТочкаМаршрута = НайтиТочкуМаршрута(ТекущийЭлементСхемы.Имя, "КодТочки");
		Если ТочкаМаршрута <> Неопределено Тогда
			Если ТекущаяТочкаИдентификатор <> ТочкаМаршрута.ИдентификаторТочки Тогда
			    УстановитьСвойстваТекущейСтрокиТочекМаршрута(ЭтотОбъект);
				УстановитьСвойстваТекущейТочки(ТочкаМаршрута);
				УстановитьПараметрыВыбораТекущаяТочкаДействие(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	УправлениеПанельюТекущаяТочка(ЭтотОбъект, ТекущаяТочкаИдентификатор <> 0);
	
КонецПроцедуры
 
&НаКлиенте    
Функция НайтиТочкуМаршрута(Значение, Колонка)
	
	// Используется сканирование таблицы, для того, что бы избежать вызова сервера при обработке на клиенте.
	СтрокаТочекМаршрута = Неопределено;
	Для каждого СтрокаТаблицы Из ТочкиМаршрута Цикл
	    Если СтрокаТаблицы[Колонка] = Значение Тогда
		      Возврат СтрокаТаблицы
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат СтрокаТочекМаршрута
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста 
Процедура ПриИзмененииГрафическойСхемы(Форма)
	
	ВидыЭлементов = бит_УправлениеПроцессамиКлиентСервер.ВидыЭлементовГрафическойСхемы();
	
	ИдентификаторыТочек = Новый Массив;
	ТочкиУсловий 		= Новый Массив; 
	
	// пример работы с DOM графической схемы
	ДокументDOM = бит_УправлениеПроцессамиКлиентСервер.ГрафическаяСхемаВDOM(Форма.ГрафическаяСхема);
	
	// каждый элемент схемы "item" представлен свойством "itemType"
	СписокЭлементовDOM = ДокументDOM.ПолучитьЭлементыПоИмени("itemType");
	
	Для Каждого Элемент Из СписокЭлементовDOM Цикл
		
		ТипЭлемента = Число(Элемент.ТекстовоеСодержимое);
		
		Если ТипЭлемента = 0 ИЛИ ТипЭлемента = 1 Тогда
			// Типы элементов см. бит_КартыМаршрутовКлиентСервер.ТипыЭлементовГрафическойСхемы().
			Продолжить;
		КонецЕсли;
		
		УзелТочкиМаршрута = Элемент.РодительскийУзел;
		
		// каждый элемент схемы имеет itemId
		ИдентификаторТочки = Число(бит_УправлениеПроцессамиКлиентСервер.ЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "itemId"));
		КодТочки		   = бит_УправлениеПроцессамиКлиентСервер.ЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "itemCode");
		НаименованиеТочки  = бит_УправлениеПроцессамиКлиентСервер.ЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "content");
		
		// заполняеем перечень текущих идентификаторов
		ИдентификаторыТочек.Добавить(ИдентификаторТочки);
		
		Если ТипЭлемента = 4 Тогда
			 ТочкиУсловий.Добавить(ИдентификаторТочки);
		КонецЕсли; 
		 
		// находим, есть ли данный узел в точках маршрута
		ПараметрыОтбора = Новый Структура("ИдентификаторТочки", ИдентификаторТочки);
		
		РезультатПоиска = Форма.ТочкиМаршрута.НайтиСтроки(ПараметрыОтбора);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			СтрокаТаблицы = Форма.ТочкиМаршрута.Добавить();
			СтрокаТаблицы.ИдентификаторТочки = ИдентификаторТочки;
			СтрокаТаблицы.ВидТочки = ВидыЭлементов[ТипЭлемента];
			СтрокаТаблицы.Наименование = НаименованиеТочки;
			СтрокаТаблицы.КодТочки     = КодТочки;
			СтрокаТаблицы.РезультатУсловия = Истина;
			СтрокаТаблицы.Модифицированность = Истина;
			СтрокаТаблицы.НоваяТочка = Истина;
			Если СтрокаТаблицы.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс") 
				И Форма.ТекущийВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Визирование") Тогда
				ТекстСообщения = НСтр("ru = 'Вложенные процессы в алгоритме визирования не поддерживаются.'"); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
			
		Иначе            
			СтрокаТаблицы = РезультатПоиска[0];
			Если СтрокаТаблицы.Наименование <> НаименованиеТочки Тогда
			     СтрокаТаблицы.Наименование = НаименованиеТочки;
				 СтрокаТаблицы.Модифицированность = Истина;
			КонецЕсли; 
			Если СтрокаТаблицы.КодТочки <> КодТочки Тогда
			     СтрокаТаблицы.КодТочки = КодТочки;
				 СтрокаТаблицы.Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//// Установки красной линии (текущее действие в запущенном БП), точек, где нет действий.
		//Если (ТипЭлемента = 5 ИЛИ ТипЭлемента = 10) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Действие) Тогда
		//	бит_КартыМаршрутовКлиентСервер.УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "passageState", "2");
		//	//бит_КартыМаршрутовКлиентСервер.УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "isAddrZoneDivideValid", "true");
		//	//бит_КартыМаршрутовКлиентСервер.УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "addrZoneDivideYPos", "16");
		//Иначе
		//	бит_КартыМаршрутовКлиентСервер.УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "passageState", "0");
		//КонецЕсли;
	КонецЦикла;

	// Заполним свойства точек, связанных с условием.
	Для Каждого ТочкаУсловия Из ТочкиУсловий Цикл
		ЭлементыСхемы = бит_УправлениеПроцессамиКлиентСервер.ЭлементыПоЗначениюСвойства(ДокументDOM, "connectFromItemId", Строка(ТочкаУсловия));
		Для каждого ЭлементСхемы Из ЭлементыСхемы Цикл
			ИдентификаторТочки = Число(бит_УправлениеПроцессамиКлиентСервер.ЗначениеСвойстваЭлемента(ЭлементСхемы, "connectToItemId"));
		    НаименованиеТочки = бит_УправлениеПроцессамиКлиентСервер.ЗначениеСвойстваЭлемента(ЭлементСхемы, "content");
			Если ВРЕГ(НаименованиеТочки) = "ДА" ИЛИ ВРЕГ(НаименованиеТочки) = "НЕТ" Тогда
				РезультатПоиска = Форма.ТочкиМаршрута.НайтиСтроки(Новый Структура("ИдентификаторТочки", ИдентификаторТочки));
			    Если РезультатПоиска.Количество() > 0 Тогда
					  СтрокаТаблицы = РезультатПоиска[0];
				      СтрокаТаблицы.РезультатУсловия = ВРЕГ(НаименованиеТочки) = "ДА";
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	// НУЖНО, ЧТО БЫ ПОДСВЕТИТЬ ВЫДЕЛЕННЫЕ ЭЛЕМЕНТЫ. СМ. ВЫШЕ.
	// NB. Делать нельзя, т.к. уходит фокус клавиатуры с текущего элемента.
	// Выделим при записи.
	//Форма.ГрафическаяСхема = бит_КартыМаршрутовКлиентСервер.ГрафическаяСхемаИзDOM(ДокументDOM);
	
	// удалим из таблицы точек маршрута те элементы, которые удалили на схеме
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из Форма.ТочкиМаршрута Цикл
		Если ИдентификаторыТочек.Найти(СтрокаТаблицы.ИдентификаторТочки) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		ЗаполнитьЗначенияСвойств(Форма.ТочкиМаршрутаКУдалению.Добавить(), СтрокаТаблицы);
		Если СтрокаТаблицы.ИдентификаторТочки = Форма.ТекущаяТочкаИдентификатор Тогда
		    Форма.ТекущаяТочкаИдентификатор = 0; 
			УправлениеПанельюТекущаяТочка(Форма, Ложь);
		КонецЕсли;
		Форма.ТочкиМаршрута.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыделитьЭлементыСхемы()
		
	ДокументDOM 	   = бит_УправлениеПроцессамиКлиентСервер.ГрафическаяСхемаВDOM(ГрафическаяСхема);
	СписокЭлементовDOM = ДокументDOM.ПолучитьЭлементыПоИмени("itemType");
	
	Для Каждого Элемент Из СписокЭлементовDOM Цикл
		
		ТипЭлемента = Число(Элемент.ТекстовоеСодержимое);
		Если НЕ (ТипЭлемента = 4 ИЛИ ТипЭлемента = 5 ИЛИ ТипЭлемента = 10) Тогда
			Продолжить;
		КонецЕсли;
		
		УзелТочкиМаршрута  = Элемент.РодительскийУзел;
		ИдентификаторТочки = Число(бит_УправлениеПроцессамиКлиентСервер.ЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "itemId"));
				 
		ПараметрыОтбора = Новый Структура("ИдентификаторТочки", ИдентификаторТочки);
		СтрокаТаблицы   = ТочкиМаршрута.НайтиСтроки(ПараметрыОтбора)[0];
		
		СвойствоДляПроверки = Неопределено;
		Если СтрокаТаблицы.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс") Тогда
			Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Визирование") Тогда
				СвойствоДляПроверки = Неопределено;
				// Затемнить элемент.
				бит_УправлениеПроцессамиКлиентСервер.УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "passageState", "1");
			Иначе	
				СвойствоДляПроверки = СтрокаТаблицы.Действие;
			КонецЕсли; 
		ИначеЕсли СтрокаТаблицы.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие") Тогда
			СвойствоДляПроверки = СтрокаТаблицы.Действие;	
		ИначеЕсли СтрокаТаблицы.ВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Условие") Тогда
			СвойствоДляПроверки = СтрокаТаблицы.Условие;
		КонецЕсли; 
		
		Если СвойствоДляПроверки <> Неопределено Тогда
			Если ЗначениеЗаполнено(СвойствоДляПроверки) Тогда
				passageState = "0";
			Иначе	
				passageState = "2";
			КонецЕсли; 
			бит_УправлениеПроцессамиКлиентСервер.УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "passageState", passageState);
		КонецЕсли; 
	КонецЦикла;
	
	ГрафическаяСхема = бит_УправлениеПроцессамиКлиентСервер.ГрафическаяСхемаИзDOM(ДокументDOM);
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТочкиМаршрута(Ссылка, Копирование)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиАлгоритмов.Ссылка КАК ТочкаМаршрута,
	|	ТочкиАлгоритмов.ВидТочки КАК ВидТочки,
	|	ТочкиАлгоритмов.Наименование КАК Наименование,
	|	ТочкиАлгоритмов.ИдентификаторТочки КАК ИдентификаторТочки,
	|	ТочкиАлгоритмов.КодТочки КАК КодТочки,
	|	ТочкиАлгоритмов.ПользовательскоеУсловие КАК Условие,
	|	ТочкиАлгоритмов.ПользовательскоеДействие КАК Действие
	|ПОМЕСТИТЬ ТочкиМаршрута
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	|ГДЕ
	|	ТочкиАлгоритмов.Владелец = &Владелец
	|	И ТочкиАлгоритмов.ИдентификаторТочки <> 0
	|	И ТочкиАлгоритмов.АктивнаяТочкаМаршрута
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВходящиеТочки.Направление ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВходящиеТочки.Направление = ЗНАЧЕНИЕ(Перечисление.бит_уп_Направление.Вертикаль)
	|	КОНЕЦ КАК РезультатУсловия,
	|	ВЫБОР
	|		КОГДА &Копирование
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.бит_уп_ТочкиАлгоритмов.ПустаяСсылка)
	|		ИНАЧЕ ТочкиМаршрута.ТочкаМаршрута
	|	КОНЕЦ КАК ТочкаМаршрута,
	|	ТочкиМаршрута.ВидТочки КАК ВидТочки,
	|	ТочкиМаршрута.Наименование КАК Наименование,
	|	ТочкиМаршрута.ИдентификаторТочки КАК ИдентификаторТочки,
	|	ТочкиМаршрута.КодТочки КАК КодТочки,
	|	ТочкиМаршрута.Условие КАК Условие,
	|	ТочкиМаршрута.Действие КАК Действие,
	|	&Копирование КАК НоваяТочка,
	|	&Копирование КАК Модифицированность,
	|	ТочкиМаршрута.ТочкаМаршрута.ПараметрыПроцесса.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Имя КАК Имя,
	|		СтрТип КАК СтрТип,
	|		Значение КАК Значение,
	|		Обязательный КАК Обязательный
	|	) КАК ПараметрыПроцесса
	|ИЗ
	|	ТочкиМаршрута КАК ТочкиМаршрута
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов.ВходящиеТочки КАК ВходящиеТочки
	|		ПО ТочкиМаршрута.ТочкаМаршрута = ВходящиеТочки.Ссылка
	|			И (ВходящиеТочки.Точка.ВидТочки = ЗНАЧЕНИЕ(Перечисление.бит_уп_ВидыТочекАлгоритмов.Условие))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторТочки";
	
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	Запрос.УстановитьПараметр("Копирование", Копирование);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТочкиМаршрута.Очистить();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = ТочкиМаршрута.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		НоваяСтрока.ПараметрыТочки.Загрузить(ВыборкаДетальныеЗаписи.ПараметрыПроцесса.Выгрузить());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНаименованияТекущейТочки()
	
	ДокументDOM = бит_УправлениеПроцессамиКлиентСервер.ГрафическаяСхемаВDOM(ГрафическаяСхема);
	
	ИдентификаторТочки = Строка(ТекущаяТочкаИдентификатор);
	УзелТочкиМаршрута  = бит_УправлениеПроцессамиКлиентСервер.ЭлементПоЗначениюСвойства(ДокументDOM, "itemId", ИдентификаторТочки);
	
	Если УзелТочкиМаршрута = Неопределено Тогда
		Возврат;	
	КонецЕсли; 

	бит_УправлениеПроцессамиКлиентСервер.УстановитьЗначениеСвойстваЭлемента(УзелТочкиМаршрута, "content", ТекущаяТочкаНаименование);
	
	ГрафическаяСхема = бит_УправлениеПроцессамиКлиентСервер.ГрафическаяСхемаИзDOM(ДокументDOM);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ВыделитьЭлементСхемы(СвойствоДляПроверки, Затемнить, ИдентификаторТочки, Форма)
	
	Если Затемнить Тогда
		passageState = "1";
	Иначе	
		Если НЕ ЗначениеЗаполнено(СвойствоДляПроверки)  Тогда  
			passageState = "2";
		Иначе
			passageState = "0";
		КонецЕсли;
	КонецЕсли; 

	бит_УправлениеПроцессамиКлиентСервер.ВыделитьЭлемент(Форма.ГрафическаяСхема, 
		ИдентификаторТочки, passageState);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеПанельюТекущаяТочка(Форма, ПоказатьСвойства)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Элементы.ДекорацияСвойстваТочки.Видимость 	  = НЕ ПоказатьСвойства; 
	Элементы.ДекорацияКот.Видимость 	  		  = НЕ ПоказатьСвойства;
	Элементы.ГруппаСвойстваТекущейТочки.Видимость = ПоказатьСвойства;

	ЭтоТочкаДействия = Форма.ТекущаяТочкаВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие");			
	ЭтоТочкаУсловия  = Форма.ТекущаяТочкаВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.Условие");
	ЭтоТочкаПроцесса = Форма.ТекущаяТочкаВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс");
	
	Элементы.ТекущаяТочкаДействие.Видимость = ЭтоТочкаДействия ИЛИ ЭтоТочкаПроцесса;
	Элементы.ТекущаяТочкаУсловие.Видимость  = ЭтоТочкаУсловия;
	
	Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Прочее") Тогда
		Элементы.ТекущаяТочкаПараметрыПроцесса.Видимость = (ЭтоТочкаДействия ИЛИ ЭтоТочкаПроцесса) 
			И Форма.ИспользуютсяПараметрыТочки;
	Иначе	
		Элементы.ТекущаяТочкаПараметрыПроцесса.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаСвойстваТочки.Видимость = НЕ Форма.ЭтоВебКлиент;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваТекущейСтрокиТочекМаршрута(Форма)

	Если НЕ Форма.ТекущаяТочкаМодифицированность Тогда
	     Возврат;	
	КонецЕсли;
	
	НайденныеСтроки = Форма.ТочкиМаршрута.НайтиСтроки(
		Новый Структура("ИдентификаторТочки", Форма.ТекущаяТочкаИдентификатор));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СвойстваТочки = НайденныеСтроки[0];
		СвойстваТочки.Наименование = Форма.ТекущаяТочкаНаименование; 
		СвойстваТочки.ИдентификаторТочки = Форма.ТекущаяТочкаИдентификатор;
		СвойстваТочки.Действие = Форма.ТекущаяТочкаДействие;
		СвойстваТочки.Условие = Форма.ТекущаяТочкаУсловие;
		СвойстваТочки.Модифицированность = Форма.ТекущаяТочкаМодифицированность;
		СвойстваТочки.ВидТочки = Форма.ТекущаяТочкаВидТочки;
		СвойстваТочки.РезультатУсловия = Форма.ТекущаяТочкаРезультатУсловия;
		СвойстваТочки.КодТочки = Форма.ТекущаяТочкаКодТочки;
		ПараметрыТочки = СвойстваТочки.ПараметрыТочки;
		
		КопироватьЗначенияПараметров(Форма.Объект.ПараметрыАлгоритма, 
			Форма.ТекущаяТочкаПараметрыПроцесса, ПараметрыТочки);
		ТекущаяТочкаМодифицированность = Ложь;	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваТекущейТочки(СвойстваТочки)

	ТекущаяТочкаНаименование = СвойстваТочки.Наименование; 
	ТекущаяТочкаИдентификатор = СвойстваТочки.ИдентификаторТочки;
	ТекущаяТочкаДействие = СвойстваТочки.Действие;
	ТекущаяТочкаУсловие = СвойстваТочки.Условие;
	ТекущаяТочкаМодифицированность = СвойстваТочки.Модифицированность;
	ТекущаяТочкаВидТочки = СвойстваТочки.ВидТочки;
	ТекущаяТочкаРезультатУсловия = СвойстваТочки.РезультатУсловия;
	ТекущаяТочкаКодТочки = СвойстваТочки.КодТочки;

	КопироватьЗначенияПараметров(Объект.ПараметрыАлгоритма, 
		СвойстваТочки.ПараметрыТочки, ТекущаяТочкаПараметрыПроцесса);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КопироватьЗначенияПараметров(Шаблон, Источник, Приемник)

	Приемник.Очистить();
	Для каждого ТекущийПараметр Из Шаблон Цикл
		Если НЕ ТекущийПараметр.Динамический Тогда
		     Продолжить;
		КонецЕсли;
	    НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийПараметр);
	    // Используется сканирование таблицы, для того, что бы избежать вызова сервера при обработке на клиенте.
		Для каждого ПараметрТочки Из Источник Цикл
		   Если ПараметрТочки.Имя = ТекущийПараметр.Имя Тогда
		   	    НоваяСтрока.Значение = ТекущийПараметр.Тип.ПривестиЗначение(ПараметрТочки.Значение);
		   КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораТекущаяТочкаДействие(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыВыбора = Новый Структура; 	
	Если Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Визирование") Тогда
		НазначениеДействия = ПредопределенноеЗначение("Перечисление.бит_НазначенияПользовательскихДействий.Визирование");
	ИначеЕсли Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов") Тогда
		НазначениеДействия = ПредопределенноеЗначение("Перечисление.бит_НазначенияПользовательскихДействий.ИзменениеСтатусовОбъектов");
	ИначеЕсли Объект.ВидАлгоритма = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАлгоритмов.Прочее") Тогда
		Если Форма.ТекущаяТочкаВидТочки = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс") Тогда
			НазначениеДействия = ПредопределенноеЗначение("Перечисление.бит_НазначенияПользовательскихДействий.ПодчиненныйПроцесс");
		Иначе	
			НазначениеДействия = ПредопределенноеЗначение("Перечисление.бит_НазначенияПользовательскихДействий.СозданиеЗадачи");
		КонецЕсли; 
		ПараметрыВыбора.Вставить("Алгоритм", Объект.Ссылка);
	КонецЕсли; 
	
	ПараметрыВыбора.Вставить("Назначение",НазначениеДействия);
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.ТекущаяТочкаДействие, ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(КартаМаршрута, Алгоритм, Копирование)

	ОпределитьИспользуютсяПараметрыТочки(ЭтотОбъект);

	Если ТипЗнч(КартаМаршрута) = Тип("ГрафическаяСхема") Тогда
		ГрафическаяСхема = КартаМаршрута;
		ЗаполнитьТочкиМаршрута(Алгоритм, Копирование);
		// Что бы синхронизироваь данные справочника "Точки" и схемы.
		ПриИзмененииГрафическойСхемы(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти