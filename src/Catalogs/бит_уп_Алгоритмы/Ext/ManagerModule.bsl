#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если НЕ ВидФормы = "ФормаОбъекта" Тогда
		Возврат;	
	КонецЕсли; 
	
	Если Параметры.Свойство("Ключ") Тогда
		Если НЕ Параметры.Ключ.Пустая() Тогда
			ВерсияСхемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВерсияСхемы");
			Если ВерсияСхемы <> 2 Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаЭлемента";
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		ВерсияСхемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ВерсияСхемы");
		Если ВерсияСхемы <> 2 Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаЭлемента";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция АлгоритмГотовКРаботе(Алгоритм) Экспорт

	Результат1 = ЕстьТочкиСтартаИЗвершения(Алгоритм);
	Результат2 = ВсеТочкиЗаполнены(Алгоритм);
	Отказ 	   = Ложь;
	
	Если НЕ Результат1.ЕстьТочкиСтартаИЗвершения Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат1.Ошибки, Алгоритм,,,Отказ); 
	КонецЕсли; 
	
	Если НЕ Результат2.ВсеТочкиЗаполнены Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат2.Ошибки, Алгоритм,,,Отказ); 
	КонецЕсли; 

	Возврат НЕ Отказ;
	
КонецФункции
 
Процедура ЗаполнитьКартуМаршрутаXMLПриПереходеНаНовуюВерсию(РегистрироватьНаУзлахПлановОбмена = Ложь) Экспорт
	
	ЗаполнитьВидТочкиПодчиненногоПроцесса();
	ДобавитьТочкиЗавершения();
	ОтметитьТочкиМаршрута();
	
	ТочкиАлгоритмов = ТочкиАлгоритмовДляВосстановления();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Алгоритмы.Ссылка КАК Ссылка,
	|	Алгоритмы.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.бит_уп_Алгоритмы КАК Алгоритмы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТочкиАлгоритмов.Владелец КАК Владелец
	|		ИЗ
	|			Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТочкиАлгоритмов.Владелец) КАК ВложенныйЗапрос
	|		ПО Алгоритмы.Ссылка = ВложенныйЗапрос.Владелец
	|ГДЕ
	|	Алгоритмы.ВерсияСхемы <> 2
	|	И НЕ Алгоритмы.ЭтоГруппа";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПроблемныхОбъектов = 0;
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Данные = Новый Структура; 
			Данные.Вставить("Алгоритм", Выборка.Ссылка);
			Данные.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
			
			ВосстановитьКартуМаршрута(Данные, ТочкиАлгоритмов, РегистрироватьНаУзлахПлановОбмена);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать алгоритм %1 по причине:
							|%2'"), Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
							УровеньЖурналаРегистрации.Предупреждение,
							Метаданные.Справочники.бит_уп_Алгоритмы, Выборка.Ссылка, ТекстСообщения);
		КонецПопытки; 
	КонецЦикла;

	Если ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Процедуре ЗаполнитьКартуМаршрутаXMLПриПереходеНаНовуюВерсию
							|не удалось обработать некоторые элементы справочника Алгоритмы процессов (пропущены): %1
							|Свяжитесь с технической поддержкой продукта БИТ.ФИНАНС для завершения обновления.'"), ПроблемныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
							УровеньЖурналаРегистрации.Предупреждение,
							Метаданные.Справочники.бит_уп_Алгоритмы, Выборка.Ссылка, ТекстСообщения);
 		
	КонецЕсли;	

КонецПроцедуры

Функция АлгоритмИспользуется(Алгоритм) Экспорт
	
	Результат = Новый Структура; 
	Результат.Вставить("АлгоритмИспользуется", Ложь);
	Результат.Вставить("МестоИспользования", "");
	
	Если Алгоритм.Пустая() Тогда
		Возврат Результат;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаИспользования.Используется КАК Используется,
	|	МестаИспользования.МестоИспользования КАК МестоИспользования
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА КАК Используется,
	|		&ПричинаВизы КАК МестоИспользования
	|	ИЗ
	|		РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|	ГДЕ
	|		бит_УстановленныеВизы.Алгоритм = &Алгоритм
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА,
	|		&ПричинаПроцесс
	|	ИЗ
	|		БизнесПроцесс.бит_уп_Процесс КАК бит_уп_Процесс
	|	ГДЕ
	|		(бит_уп_Процесс.Стартован
	|				ИЛИ бит_уп_Процесс.Завершен)
	|		И бит_уп_Процесс.Алгоритм = &Алгоритм) КАК МестаИспользования
	|ГДЕ
	|	ЕСТЬNULL(МестаИспользования.Используется, ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Алгоритм", Алгоритм);
	Запрос.УстановитьПараметр("ПричинаВизы", Нстр("ru = 'в процессе согласования'"));
	Запрос.УстановитьПараметр("ПричинаПроцесс", Нстр("ru = 'в начатых или завершенных бизнес-процессах'"));
	
	Используется = Ложь;
	МестоИспользования = Новый Массив(); 
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Используется = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МестоИспользования.Добавить(Выборка.МестоИспользования);
		КонецЦикла;
	КонецЕсли; 
	
	Результат.Вставить("АлгоритмИспользуется", Используется);
	Результат.Вставить("МестоИспользования", СтрСоединить(МестоИспользования, ", "));
	
	Возврат Результат;

КонецФункции
 
Процедура КопироватьДействияВТочкиМаршрута(Источник, Приемник) Экспорт

	ГруппаДействий = Справочники.бит_ПользовательскиеДействия.СоздатьГруппу();
	ГруппаДействий.Наименование = Строка(Приемник);
	ГруппаДействий.Записать();
	
	СсылкиДействия = Новый Соответствие(); 
	
	Запрос = Новый Запрос;   	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользовательскиеДействия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_ПользовательскиеДействия КАК ПользовательскиеДействия
	|ГДЕ
	|	НЕ ПользовательскиеДействия.ПометкаУдаления
	|	И ПользовательскиеДействия.Алгоритм = &Источник";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.Скопировать(); 
		ТекущийОбъект.Алгоритм = Приемник;
		ТекущийОбъект.Родитель = ГруппаДействий.Ссылка;
		ТекущийОбъект.Записать();
		СсылкиДействия.Вставить(Выборка.Ссылка, ТекущийОбъект.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Приемник", Приемник);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТочкиАлгоритмовПриемник.Ссылка КАК Ссылка,
		|	ТочкиАлгоритмовИсточник.ПользовательскоеДействие КАК ПользовательскоеДействие
		|ИЗ
		|	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмовПриемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмовИсточник
		|		ПО ТочкиАлгоритмовПриемник.ВидТочки = ТочкиАлгоритмовИсточник.ВидТочки
		|			И ТочкиАлгоритмовПриемник.ИдентификаторТочки = ТочкиАлгоритмовИсточник.ИдентификаторТочки
		|			И ТочкиАлгоритмовПриемник.КодТочки = ТочкиАлгоритмовИсточник.КодТочки
		|			И (ТочкиАлгоритмовИсточник.Владелец = &Источник)
		|			И (ТочкиАлгоритмовПриемник.Владелец = &Приемник)";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.ПользовательскоеДействие = СсылкиДействия.Получить(Выборка.ПользовательскоеДействие);
		ТекущийОбъект.Записать();
	КонецЦикла;

КонецПроцедуры
 
Функция ПользовательскиеДействияЗаполнены(Алгоритм) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Алгоритм);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиАлгоритмов.Ссылка,
	|	ТочкиАлгоритмов.Наименование
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	|ГДЕ
	|	ТочкиАлгоритмов.Владелец = &Владелец
	|	И ТочкиАлгоритмов.ПользовательскоеДействие = ЗНАЧЕНИЕ(Справочник.бит_ПользовательскиеДействия.ПустаяСсылка)
	|	И ТочкиАлгоритмов.ПометкаУдаления = ЛОЖЬ
	|	И ТочкиАлгоритмов.ВидТочки = ЗНАЧЕНИЕ(Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ТочкиЗаполнены = Истина;
	ТочкиСОшибкой = Новый Массив(); 
	Пока Выборка.Следующий() Цикл
	    ТочкиСОшибкой.Добавить(Выборка.Наименование);
		ТочкиЗаполнены = Ложь;
	КонецЦикла;
	СписокТочек = СтрСоединить(ТочкиСОшибкой, "; ");
	
	Результат = Новый Структура; 
	Результат.Вставить("ТочкиЗаполнены", ТочкиЗаполнены);
	Результат.Вставить("СписокТочек",	 СписокТочек);
	
	Возврат Результат;
	
КонецФункции
	
// Выполняет поиск по наименованию группы справочника бит_уп_Алгоритмы. 
// Если найти не удалось, создается новая группа. Используется при первоначальном заполнении ИБ.
// 
// Параметры:
//  Наименование - Строка
// 
// Возвращаемое значение:
//  Группа - СправочникСсылка.бит_уп_Алгоритмы.
// 
Функция СоздатьГруппуАлгоритмов(Наименование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка
	               |ИЗ
	               |	Справочник.бит_уп_Алгоритмы КАК Спр
	               |ГДЕ
	               |	Спр.ЭтоГруппа
	               |	И Спр.Наименование ПОДОБНО &Наименование";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Группа = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		
		 Группа = Выборка.Ссылка;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Группа) Тогда
	
		ГруппаОб = Справочники.бит_уп_Алгоритмы.СоздатьГруппу();
		ГруппаОб.Наименование = Наименование;
		ГруппаОб.УстановитьНовыйКод();
		
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ГруппаОб, "", "Ошибки", Истина);
		
		Если флВыполнено Тогда
		
			Группа = ГруппаОб.Ссылка;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Группа;
	
КонецФункции // СоздатьГруппуАлгоритмов()

// Выполняет создание элемента справочника алгоритмы. Перед созданием элемента 
// справочника выполняется поиск уже созданных элементов по наименованию.
// 
// Параметры:
//   Наименование - Строка.
//   Группа - СправочникСсылка.бит_уп_Алгоритмы.
//   Вид - ПеречислениеСсылка.бит_уп_ВидыАлгоритмов.
//   СтрПар - Структура.
// 
// Возвращаемое значение:
//  Алг - СправочникСсылка.бит_уп_Алгоритмы.
// 
Функция СоздатьАлгоритм(Наименование, Группа, Вид, СтрПар = Неопределено) Экспорт

	Алгоритм = Справочники.бит_уп_Алгоритмы.НайтиПоНаименованию(Наименование, Ложь, Группа);
	Если ЗначениеЗаполнено(Алгоритм) И НЕ Алгоритм.ПометкаУдаления  Тогда
		ТекущийОбъект = Алгоритм.ПолучитьОбъект(); 
		ТекущийОбъект.УстановитьПометкуУдаления(Истина);
		Алгоритм = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Алгоритм) ИЛИ Алгоритм.ПометкаУдаления Тогда
	
		СпрОб = Справочники.бит_уп_Алгоритмы.СоздатьЭлемент();
		СпрОб.Заполнить(Неопределено);
		СпрОб.Наименование = Наименование;
		СпрОб.Родитель = Группа;
		СпрОб.ВидАлгоритма = Вид;
		СпрОб.СпособВыполнения = Перечисления.бит_уп_СпособыВыполненияАлгоритма.Сразу;
		СпрОб.ДополнительныеСвойства.Вставить("СоздатьТочкуСтарта", Истина);
		// Вызывается из процедур заполнения ИБ, поэтому схема старая:
		СпрОб.ВерсияСхемы = 0;
		
		Если ТипЗнч(СтрПар) = Тип("Структура") И СтрПар.Свойство("Реквизиты") Тогда
		
			Для каждого КиЗ Из СтрПар.Реквизиты Цикл
			
				СпрОб[КиЗ.Ключ] = КиЗ.Значение;
			
			КонецЦикла; // СтрПар.Реквизиты
		
		КонецЕсли;
		
		Если ТипЗнч(СтрПар) = Тип("Структура") И СтрПар.Свойство("ПараметрыАлгоритма") Тогда
			 Для каждого МодельСтроки Из СтрПар.ПараметрыАлгоритма Цикл
			 	НоваяСтрока = СпрОб.ПараметрыАлгоритма.Добавить();
				НоваяСтрока.Имя          = МодельСтроки.Имя;
				НоваяСтрока.Обязательный = МодельСтроки.Обязательный;
				НоваяСтрока.СтрТип       = МодельСтроки.Тип;
				ТекОписание = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(НоваяСтрока.СтрТип);
				НоваяСтрока.ЗначениеПоУмолчанию = ТекОписание.ПривестиЗначение();
			 КонецЦикла; 
		КонецЕсли; 
		
		СпрОб.УстановитьНовыйКод();
		
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб, "", "Ошибки", Ложь);
		
		Если флВыполнено Тогда
			 Алгоритм = СпрОб.Ссылка;
		КонецЕсли; 
	КонецЕсли; 

	Возврат Алгоритм;
	
КонецФункции

// Выполняет поиск последней созданной точки в алгоритме. 
// Анализ структуры алгоритма не выполняется, возвращается именно последняя созданная точка. 
// Используется при первоначальном заполнении ИБ. 
// 
// Параметры:
//  Алгоритм - СправочникСсылка.бит_уп_Алгоритмы.
// 
// Возвращаемое значение:
//  Точка - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
// 
Функция НайтиПоследнююТочку(Алгоритм) Экспорт

	Точка = Справочники.бит_уп_ТочкиАлгоритмов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Алгоритм", Алгоритм);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_уп_ТочкиАлгоритмов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.бит_уп_ТочкиАлгоритмов КАК бит_уп_ТочкиАлгоритмов
	               |ГДЕ
	               |	бит_уп_ТочкиАлгоритмов.Владелец = &Алгоритм
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка УБЫВ";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Точка = Выборка.Ссылка;
	
	КонецЕсли; 

	Возврат Точка;
	
КонецФункции // НайтиПоследнююТочку()

// Функция определяем входит ли пользовательское действие в указанный алгоритм.
//
// Параметры:
//   Алгоритм - СправочникСсылка.бит_уп_Алгоритмы.
//   ПользовательскоеДействие - СправочникСсылка.бит_ПользовательскиеДействия.
//
// Возвращаемое значение:
//  флВходит - Булево.
//
Функция ДействиеВАлгоритме(Алгоритм, ПользовательскоеДействие) Экспорт

	флВходит = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Алгоритм", Алгоритм);
	Запрос.УстановитьПараметр("ПользовательскоеДействие", ПользовательскоеДействие);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_уп_ТочкиАлгоритмов.Ссылка
	               |ИЗ
	               |	Справочник.бит_уп_ТочкиАлгоритмов КАК бит_уп_ТочкиАлгоритмов
	               |ГДЕ
	               |	бит_уп_ТочкиАлгоритмов.Владелец = &Алгоритм
	               |	И бит_уп_ТочкиАлгоритмов.ПользовательскоеДействие = &ПользовательскоеДействие";
				   
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		флВходит = Истина;
	
	КонецЕсли; 

	Возврат флВходит;
	
КонецФункции // ДействиеВАлгоритме()

// Назначает алгоритм объекту системы.
// 
// Параметры:
//  Алгоритм - СправочникСсылка.бит_уп_Алгоритмы.
//  ОбъектСистемы - СправочникСсылка.бит_ОбъектыСистемы.
//  ДатаНачала - Дата.
//  ПользовательскоеУсловие - СправочникСсылка.бит_ПользовательскиеУсловия.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция НазначитьАлгоритм(Алгоритм, ОбъектСистемы,  ДатаНачала, ПользовательскоеУсловие = Неопределено) Экспорт

	Отказ = Ложь;
	ВидАлгоритма = Неопределено;
	
	Если ЗначениеЗаполнено(Алгоритм) Тогда
		ВидАлгоритма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Алгоритм, "ВидАлгоритма");
	Иначе
		ТекстСообщения = Нстр("ru = 'Не заполнен алгоритм.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , ,Отказ); 
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура; 
	ДанныеЗаполнения.Вставить("ОбъектСистемы", 			 ОбъектСистемы);
	ДанныеЗаполнения.Вставить("ВидАлгоритма",  			 ВидАлгоритма);
	ДанныеЗаполнения.Вставить("ПользовательскоеУсловие", ПользовательскоеУсловие);
	ДанныеЗаполнения.Вставить("Алгоритм", 				 Алгоритм);
	ДанныеЗаполнения.Вставить("Период", 				 ДатаНачала);
	
	Запись = РегистрыСведений.бит_уп_НазначениеАлгоритмов.СоздатьМенеджерЗаписи();
	Запись.Заполнить(ДанныеЗаполнения);
	
	Отказ = Ложь;
	Если НЕ Запись.ПроверитьЗаполнение() Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось назначить алгоритм %1.'"), Алгоритм);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Алгоритм, , ,Отказ); 
	Иначе
		Запись.Записать();
	КонецЕсли; 
		
	Возврат НЕ Отказ;
	
КонецФункции

// Процедура определяет есть ли динамические параметры у алгоритма.
// 
Функция ЕстьДинамическиеПараметры(Алгоритм)  Экспорт

	флЕсть = Ложь;
	
	Если Алгоритм.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.Прочее Тогда
	
		 СтрОтбор = Новый Структура("Динамический", Истина);
		 МассивСтрок = Алгоритм.ПараметрыАлгоритма.НайтиСтроки(СтрОтбор);
		 
		 флЕсть = ?(МассивСтрок.Количество()>0,Истина,Ложь);
	
	КонецЕсли; 
	
	Возврат флЕсть;

КонецФункции // ЕстьДинамическиеПараметры()

// Процедура заполняет алгоритм значениями по-умолчанию. 
//
// Параметры:
//  ИмяМакета - Строка.
//
Процедура ЗаполнитьАлгоритм(ИмяМакета) Экспорт
 
 	  ТекстМакета = Справочники.бит_уп_Алгоритмы.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	  
	  Чтение = Новый ЧтениеJSON();
	  Чтение.УстановитьСтроку(ТекстМакета);
	  
	  РезДанные = ПрочитатьJSON(Чтение,,,,"ВосстановлениеДжейсон", бит_уп_Сервер);	  
	  
	  // Создание алгоритма
	  ГруппаАлгоритмов = Справочники.бит_уп_Алгоритмы.СоздатьГруппуАлгоритмов(РезДанные.Алгоритм.Родитель);
	  
	  ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов[РезДанные.Алгоритм.ВидАлгоритма];
	  
	  ОписаниеАлгоритма = Новый Структура("Реквизиты", Новый Структура);
	  ОписаниеАлгоритма.Реквизиты.Вставить("Назначение_Бюдж", РезДанные.Алгоритм.Назначение_Бюдж);
	  ОписаниеАлгоритма.Реквизиты.Вставить("Назначение_МУ", РезДанные.Алгоритм.Назначение_МУ);
	  ОписаниеАлгоритма.Реквизиты.Вставить("Назначение_УУ", РезДанные.Алгоритм.Назначение_УУ);
	  ОписаниеАлгоритма.Вставить("ПараметрыАлгоритма", РезДанные.Алгоритм.Параметры);
	  
	  Алгоритм = СоздатьАлгоритм(РезДанные.Алгоритм.Наименование, ГруппаАлгоритмов, ВидАлгоритма, ОписаниеАлгоритма);
	  
	  // Создание пользовательских действий
	  ГруппаДействий = Справочники.бит_ПользовательскиеДействия.СоздатьГруппуДействий(РезДанные.Алгоритм.Наименование);
	  
	  ПользовательскиеДействия = Новый Соответствие;
	  Для каждого ОписаниеДействия Из РезДанные.ПользовательскиеДействия Цикл
	  
	  	  ОписаниеДействия.Назначение = Перечисления.бит_НазначенияПользовательскихДействий[ОписаниеДействия.Назначение];
		  ОписаниеДействия.Вставить("Исполнитель", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь")); 
		  ОписаниеДействия.Вставить("Алгоритм", Алгоритм);
		  
		  ТекДействие = Справочники.бит_ПользовательскиеДействия.СоздатьДействие(ОписаниеДействия, ГруппаДействий);
		  
		  ПользовательскиеДействия.Вставить(ОписаниеДействия.Наименование, ТекДействие);
	  
	  КонецЦикла; 
	  
	  // Создание точек алгоритма
	  ТочкиАлгоритма = Новый Соответствие;
	  
	  ТочкаСтарт = бит_уп_Сервер.НайтиТочкуАлгоритма("Старт",Алгоритм);
	  ТочкиАлгоритма.Вставить("Старт", ТочкаСтарт);
	  
	  Для каждого ОписаниеТочки Из РезДанные.Точки Цикл
	  
	  	   ТекТочка = бит_уп_Сервер.НайтиТочкуАлгоритма(ОписаниеТочки.Наименование, Алгоритм);
		   
		   Если ЗначениеЗаполнено(ТекТочка) Тогда
			   
			   ТочкиАлгоритма.Вставить(ОписаниеТочки.Наименование, ТекТочка);
			   
		   Иначе	
			   
			   ПарамТочки = Новый Структура("Реквизиты", Новый Структура);
			   ПарамТочки.Реквизиты.Вставить("Наименование", ОписаниеТочки.Наименование);
			   
			   ТекДействие = ПользовательскиеДействия[ОписаниеТочки.Наименование];
			   ПарамТочки.Реквизиты.Вставить("ПользовательскоеДействие", ТекДействие);
			   
			   ТекТочка = бит_уп_Сервер.ДобавитьТочкуАлгоритма(Алгоритм, Неопределено, Неопределено, ОписаниеТочки.ВидТочки, 0, "Ошибки", ПарамТочки); 
			   
			   Если ЗначениеЗаполнено(ТекТочка) Тогда
			   
			     ТочкиАлгоритма.Вставить(ОписаниеТочки.Наименование, ТекТочка);
				     // Привязываем точку
					 Для каждого МодельСтроки Из ОписаниеТочки.ВходящиеТочки Цикл
						 ТочкаВходящая = ТочкиАлгоритма[МодельСтроки.Точка];
					 	 бит_уп_Сервер.ПривязатьТочкуАлгоритма(ТочкаВходящая, ТекТочка, МодельСтроки.Направление, "Ошибки", Истина);
					 КонецЦикла; 
			   КонецЕсли; 
		   КонецЕсли; 
	  КонецЦикла; 
	  
	  ДобавитьТочкиЗавершения(Алгоритм);
	  ТочкиАлгоритмов = ТочкиАлгоритмовДляВосстановления(Алгоритм);
	  Данные = Новый Структура; 
	  Данные.Вставить("Алгоритм", Алгоритм);
	  Данные.Вставить("ПометкаУдаления", Ложь);
	  ВосстановитьКартуМаршрута(Данные, ТочкиАлгоритмов, Истина);
	  
КонецПроцедуры

Функция НовыеПараметрыОтображенияАлгоритма() Экспорт

	ПараметрыОтображения = Новый Структура; 
	ПараметрыОтображения.Вставить("Ширина", 30);
	ПараметрыОтображения.Вставить("Высота", 10);
	ПараметрыОтображения.Вставить("ИнтервалВертикаль", 5);
	ПараметрыОтображения.Вставить("ИнтервалГоризонталь", 5);
	ПараметрыОтображения.Вставить("ПолеВерх", 5);
	ПараметрыОтображения.Вставить("ПолеЛево", 5);
	ПараметрыОтображения.Вставить("РазмещениеСвободныхТочек", Перечисления.бит_уп_Направление.Горизонталь);
	ПараметрыОтображения.Вставить("ПоказатьВсеТочки", Ложь);
	
	Возврат ПараметрыОтображения;
	
КонецФункции
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеГрафическойСхемы

Процедура ОтметитьТочкиМаршрута()

	Запрос = Новый Запрос(); 
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧВходящиеТочки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВходящиеТочки
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов.ВходящиеТочки КАК ТЧВходящиеТочки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧИсходящиеТочки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ИсходящиеТочки
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов.ИсходящиеТочки КАК ТЧИсходящиеТочки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТочкиАлгоритмов.Ссылка КАК Ссылка,
	|	ТочкиАлгоритмов.АктивнаяТочкаМаршрута КАК АктивнаяТочкаМаршрута
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВходящиеТочки КАК ВТ_ВходящиеТочки
	|		ПО (ВТ_ВходящиеТочки.Ссылка = ТочкиАлгоритмов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходящиеТочки КАК ВТ_ИсходящиеТочки
	|		ПО (ВТ_ИсходящиеТочки.Ссылка = ТочкиАлгоритмов.Ссылка)
	|ГДЕ
	|	НЕ ТочкиАлгоритмов.ПометкаУдаления
	|	И (НЕ ВТ_ВходящиеТочки.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ВТ_ИсходящиеТочки.Ссылка ЕСТЬ NULL)
	|	И НЕ ТочкиАлгоритмов.АктивнаяТочкаМаршрута";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		ТекущийОбъект.АктивнаяТочкаМаршрута = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла;

	ЗафиксироватьТранзакцию();
	
	ОтметитьТочкиМаршрута();
	
КонецПроцедуры
 
// Восстанавливает (создает) карту маршрута (графическую схему) по данным информационной базы.
//
// Параметры:
//  Данные - Структура - объект для обработки.
//	ТочкиАлгоритма - ТаблицвЗначений - свойства точек алгоритмов.
//  РегистрироватьНаУзлахПлановОбмена - Булево - см. ОбновлениеИнформационнойБазы.ЗаписатьДанные().
//
Процедура ВосстановитьКартуМаршрута(Данные, ТочкиАлгоритма, РегистрироватьНаУзлахПлановОбмена)

	Алгоритм 		= Данные.Алгоритм;
	ПометкаУдаления = Данные.ПометкаУдаления;
	
	// Помеченные на удаление алгоритмы не обрабатываем, потому что они могут содержать ошибки.
	Если ПометкаУдаления Тогда
		МакетНовойСхемы = Справочники.бит_уп_Алгоритмы.ПолучитьМакет("СхемаНовогоАлгоритма");
		ТекущийОбъект 				= Алгоритм.ПолучитьОбъект();
		ТекущийОбъект.ВерсияСхемы 	= 2;
		ТекущийОбъект.КартаМаршрута = Новый ХранилищеЗначения(МакетНовойСхемы, Новый СжатиеДанных(9));
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект, РегистрироватьНаУзлахПлановОбмена);
	КонецЕсли; 
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли; 
	
	// Настройка алгоритма (объекта) по-умолчанию.
	ПараметрыОбъекта = НовыеПараметрыОтображенияАлгоритма();  
	ПараметрыОбъекта.Вставить("Ссылка", Алгоритм);
	
	// Рисование карты маршрута в "старой" нотациию
	КартаHTML = Новый ТабличныйДокумент;
	бит_уп_Сервер.НарисоватьМаршрутПроцесса(КартаHTML, ПараметрыОбъекта);
	
	КартаМаршрутаXML = Новый ТекстовыйДокумент(); 
	ДобавитьЗаголовокСхемы(КартаМаршрутаXML);
	
	ЭлементыСхемы = Новый Соответствие(); 
	ДекоративныеЛинии = Новый ТаблицаЗначений(); 
	ДекоративныеЛинии.Колонки.Добавить("Индекс");
	ДекоративныеЛинии.Колонки.Добавить("Начало");
	ДекоративныеЛинии.Колонки.Добавить("Конец");
	ДекоративныеЛинии.Колонки.Добавить("Координаты");
	ДекоративныеЛинии.Колонки.Добавить("Заголовок");
	
	ИндексЗавершения = 0;
	ИндексДействия 	 = 0;
	ИндексУсловия  	 = 0;
	ИндексСлияния  	 = 0;
	ИндексРазделения = 0;
	ИндексПроцесс	 = 0;
	ИндексЭлемента 	 = 0;
	Для каждого Рисунок Из КартаHTML.Рисунки Цикл
		
		Если Рисунок.ТипРисунка  = ТипРисункаТабличногоДокумента.Прямая Тогда
			 Продолжить;
		КонецЕсли; 
		 
		ИндексЭлемента = ИндексЭлемента + 1;
		ВидТочки = Рисунок.Расшифровка.ВидТочки;
		
		Если ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Старт Тогда
			СвойстваЭлемента = ДобавитьТочкуСтарта(КартаМаршрутаXML, Рисунок, ИндексЭлемента);
		ИначеЕсли ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Завершение Тогда
			СвойстваЭлемента = ДобавитьТочкуЗавершения(КартаМаршрутаXML, Рисунок, ИндексЭлемента, ИндексЗавершения);	
		ИначеЕсли ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие Тогда
			СвойстваЭлемента = ДобавитьТочкуДействие(КартаМаршрутаXML, Рисунок, ИндексЭлемента, ИндексДействия, ТочкиАлгоритма);
		ИначеЕсли ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие Тогда
	        СвойстваЭлемента = ДобавитьТочкуУсловия(КартаМаршрутаXML, Рисунок, ИндексЭлемента, ИндексУсловия, ТочкиАлгоритма);
		ИначеЕсли ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Слияние Тогда
	        СвойстваЭлемента = ДобавитьТочкуСлияние(КартаМаршрутаXML, Рисунок, ИндексЭлемента, ИндексСлияния);
		ИначеЕсли ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Разделение Тогда
	        СвойстваЭлемента = ДобавитьТочкуРазделение(КартаМаршрутаXML, Рисунок, ИндексЭлемента, ИндексРазделения);
		ИначеЕсли ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс Тогда
			СвойстваЭлемента = ДобавитьТочкуПодчиненныйПроцесс(КартаМаршрутаXML, Рисунок, ИндексЭлемента, ИндексПроцесс, ТочкиАлгоритма);	
		КонецЕсли; 
		ЭлементыСхемы.Вставить(Рисунок.Расшифровка.Точка,СвойстваЭлемента);
	КонецЦикла; 
	
	ЗаполнитьДекоративныеЛинии(КартаHTML, ДекоративныеЛинии, ИндексЭлемента, ЭлементыСхемы);
	
	Для каждого СтрокаТаблицы Из ДекоративныеЛинии Цикл
		СвойстваЭлемента = ДобавитьДекоративнуюЛинию(КартаМаршрутаXML, СтрокаТаблицы, 
			ДекоративныеЛинии.Индекс(СтрокаТаблицы) + 1);	
	КонецЦикла;
	
	КартаМаршрутаXML.ДобавитьСтроку("</FlowchartContextType>");
	
	Для каждого КлючЗначение Из ЭлементыСхемы Цикл
	    ТекущийОбъект = КлючЗначение.Ключ.ПолучитьОбъект(); 
		ТекущийОбъект.ИдентификаторТочки = КлючЗначение.Значение.Индекс;
		ТекущийОбъект.КодТочки = СокрЛП(КлючЗначение.Значение.КодТочки);
	    ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект); 
	КонецЦикла; 
	
	ТекущийОбъект = Алгоритм.ПолучитьОбъект();
	ТекущийОбъект.ВерсияСхемы = 2;

	КартаМаршрута = ОбщегоНазначения.ЗначениеИзСтрокиXML(КартаМаршрутаXML.ПолучитьТекст());
	ТекущийОбъект.КартаМаршрута = Новый ХранилищеЗначения(КартаМаршрута,
										Новый СжатиеДанных(9));
		
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект, РегистрироватьНаУзлахПлановОбмена);
			
КонецПроцедуры

Процедура ЗаполнитьВидТочкиПодчиненногоПроцесса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиАлгоритмов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_ПользовательскиеДействия КАК ПользовательскиеДействия
	|		ПО ТочкиАлгоритмов.ПользовательскоеДействие = ПользовательскиеДействия.Ссылка
	|			И (ПользовательскиеДействия.Назначение = ЗНАЧЕНИЕ(Перечисление.бит_НазначенияПользовательскихДействий.ПодчиненныйПроцесс))
	|			И (ТочкиАлгоритмов.ВидТочки = ЗНАЧЕНИЕ(Перечисление.бит_уп_ВидыТочекАлгоритмов.Действие))";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьТочкиЗавершения(Алгоритм = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Завершение", Перечисления.бит_уп_ВидыТочекАлгоритмов.Завершение);
	Запрос.УстановитьПараметр("Алгоритм",   Алгоритм);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТочкиАлгоритмов.Ссылка КАК Ссылка,
	|	ПустаяИсходящиеТочки.Ссылка КАК Ссылка1,
	|	ТочкиАлгоритмов.Владелец КАК Владелец,
	|	ТочкиАлгоритмов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов.ИсходящиеТочки КАК ПустаяИсходящиеТочки
	|		ПО (ПустаяИсходящиеТочки.Ссылка = ТочкиАлгоритмов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВходящиеТочки.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.бит_уп_ТочкиАлгоритмов.ВходящиеТочки КАК ВходящиеТочки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВходящиеТочки.Ссылка) КАК ЗаполненнаяВходящиеТочки
	|		ПО ТочкиАлгоритмов.Ссылка = ЗаполненнаяВходящиеТочки.Ссылка
	|ГДЕ
	|	&Алгоритм
	|	И ПустаяИсходящиеТочки.Ссылка ЕСТЬ NULL
	|	И НЕ ТочкиАлгоритмов.ВидТочки = &Завершение
	|	И НЕ ЗаполненнаяВходящиеТочки.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Владелец,
	|	Наименование";
	
	ЧтоЗаменить   = "&Алгоритм";
	НаЧтоЗаменить = ?(Алгоритм = Неопределено, "ИСТИНА", "Владелец = &Алгоритм");
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);
	
	Запрос.Текст = ТекстЗапроса;	
	Результат 	 = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	Выборка = Результат.Выбрать();
	Владелец = Неопределено;
	Индекс   = 0;
	Пока Выборка.Следующий() Цикл
		Если Владелец <> Выборка.Владелец Тогда
			Индекс = 0;
			Владелец = Выборка.Владелец;
		Иначе	
			Индекс = Индекс + 1;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура; 
		ДанныеЗаполнения.Вставить("Владелец", Выборка.Владелец);
		ДанныеЗаполнения.Вставить("Наименование", СтрШаблон(Нстр("ru = 'Завершение %1'"), Формат(Индекс, "ЧГ=")));
		ДанныеЗаполнения.Вставить("ВидТочки", Перечисления.бит_уп_ВидыТочекАлгоритмов.Завершение);
		
		Завершение = Справочники.бит_уп_ТочкиАлгоритмов.СоздатьЭлемент();
		Завершение.Заполнить(ДанныеЗаполнения);
		НоваяСтрока = Завершение.ВходящиеТочки.Добавить();
		НоваяСтрока.Точка = Выборка.Ссылка;
		НоваяСтрока.Направление = Перечисления.бит_уп_Направление.Вертикаль;
		Завершение.АктивнаяТочкаМаршрута = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Завершение);
		
		Точка = Выборка.Ссылка.ПолучитьОбъект();
		НоваяСтрока = Точка.ИсходящиеТочки.Добавить();
		НоваяСтрока.Точка = Завершение.Ссылка;
		НоваяСтрока.Направление = Перечисления.бит_уп_Направление.Вертикаль;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Точка);
	КонецЦикла;

	ЗафиксироватьТранзакцию();
	
	ДобавитьТочкиЗавершения();
	
КонецПроцедуры
 
Процедура ДобавитьЗаголовокСхемы(ТекстовыйДокумент)

	Шаблон =
	"<FlowchartContextType xmlns=""http://v8.1c.ru/8.2/data/graphscheme"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""FlowchartContextType"">
	|<backColor xmlns:d2p1=""http://v8.1c.ru/8.1/data/ui/style"">d2p1:FieldBackColor</backColor>
	|<enableGrid>true</enableGrid>
	|<drawGridMode>Lines</drawGridMode>
	|<gridHorizontalStep>20</gridHorizontalStep>
	|<gridVerticalStep>20</gridVerticalStep>
	|<bpUUID>00000000-0000-0000-0000-000000000000</bpUUID>
	|<useOutput>Auto</useOutput>
	|<printPropItem>
	|	<key>6</key>
	|	<val>10</val>
	|</printPropItem>
	|<printPropItem>
	|	<key>7</key>
	|	<val>10</val>
	|</printPropItem>
	|<printPropItem>
	|	<key>8</key>
	|	<val>10</val>
	|</printPropItem>
	|<printPropItem>
	|	<key>9</key>
	|	<val>10</val>
	|</printPropItem>
	|<printPropItem>
	|	<key>13</key>
	|	<val>0</val>
	|</printPropItem>
	|<printPropItem>
	|	<key>16</key>
	|	<val>0</val>
	|</printPropItem>";

	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);

КонецПроцедуры
 
Процедура ЗаполнитьДекоративныеЛинии(ТабличныйДокумент, ДекоративныеЛинии, ИндексЭлемента, ЭлементыСхемы)
	
	Для каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		
		Если Рисунок.ТипРисунка <> ТипРисункаТабличногоДокумента.Прямая  Тогда
			Продолжить;
		КонецЕсли; 
		Если Рисунок.Расшифровка = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Начало = ЭлементыСхемы.Получить(Рисунок.Расшифровка.Начало);
		Конец = ЭлементыСхемы.Получить(Рисунок.Расшифровка.Конец);
		
		Результат = ДекоративныеЛинии.НайтиСтроки(Новый Структура("Начало, Конец", Начало.Индекс, Конец.Индекс));
		Если Результат.Количество() = 0 Тогда
			ИндексЭлемента = ИндексЭлемента + 1;
			
			СтрокаТаблицы = ДекоративныеЛинии.Добавить();
			СтрокаТаблицы.Начало = Начало.Индекс;
			СтрокаТаблицы.Конец  = Конец.Индекс;
			СтрокаТаблицы.Индекс = ИндексЭлемента;
			СтрокаТаблицы.Координаты = НоваяТаблицаКоординат();
			Если Рисунок.Расшифровка.Начало.ВидТочки = Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие Тогда
			    Если Рисунок.Расшифровка.Направление = Перечисления.бит_уп_Направление.Вертикаль Тогда
				    СтрокаТаблицы.Заголовок = Нстр("ru = 'Да'"); 
				ИначеЕсли Рисунок.Расшифровка.Направление = Перечисления.бит_уп_Направление.Горизонталь Тогда	
				    СтрокаТаблицы.Заголовок = Нстр("ru = 'Нет'");
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			СтрокаТаблицы = Результат[0];
		КонецЕсли;
		
		Верх = Окр(Рисунок.Верх,0) * 4; // у
		Лево = Окр(Рисунок.Лево,0) * 4; // х
		Ширина = Окр(Рисунок.Ширина,0) * 4;
		Высота = Окр(Рисунок.Высота,0) * 4;
		
		Координаты = Новый Структура("Х, У", КоординатаВСтроку(Лево), КоординатаВСтроку(Верх)); 
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Координаты.Добавить(), Координаты);
		
		Координаты = Новый Структура("Х, У", КоординатаВСтроку(Лево + Ширина), КоординатаВСтроку(Верх + Высота)); 
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Координаты.Добавить(), Координаты);
	КонецЦикла;

КонецПроцедуры

Функция ДобавитьТочкуСтарта(ТекстовыйДокумент, Рисунок, Индекс)
	
	Шаблон = 
	"
	|<item>
	|	<itemType>2</itemType>
	|	<itemId>[Индекс]</itemId>
	|	<currentLanguage>#</currentLanguage>
	|	<itemTitle>
	|		<item xmlns=""http://v8.1c.ru/8.1/data/core"">
	|			<lang>#</lang>
	|			<content>Старт</content>
	|		</item>
	|	</itemTitle>
	|	<tipText/>
	|	<itemCode>[КодТочки]</itemCode>
	|	<itemTabOrder>1</itemTabOrder>
	|	<backColor>auto</backColor>
	|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
	|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
	|	<groupNum>0</groupNum>
	|	<zOrder>0</zOrder>
	|	<hyperlink>false</hyperlink>
	|	<transparent>false</transparent>
	|	<textFont kind=""AutoFont""/>
	|	<alignHor>Center</alignHor>
	|	<alignVer>Center</alignVer>
	|	<picturePlacement>Left</picturePlacement>
	|	<rectLeft>[Лево]</rectLeft>
	|	<rectRight>[Право]</rectRight>
	|	<rectTop>[Верх]</rectTop>
	|	<rectBottom>[Низ]</rectBottom>
	|	<point>
	|		<x>[Х1]</x>
	|		<y>[У1]</y>
	|	</point>
	|	<point>
	|		<x>[Х2]</x>
	|		<y>[У2]</y>
	|	</point>
	|	<point>
	|		<x>[Х3]</x>
	|		<y>[У3]</y>
	|	</point>
	|	<point>
	|		<x>[Х4]</x>
	|		<y>[У4]</y>
	|	</point>
	|	<point>
	|		<x>[Х5]</x>
	|		<y>[У5]</y>
	|	</point>
	|	<border width=""1"" gap=""false"">
	|		<style xmlns=""http://v8.1c.ru/8.1/data/ui"" xmlns:d4p1=""http://v8.1c.ru/8.2/data/graphscheme"" xsi:type=""d4p1:ConnectorLineType"">Solid</style>
	|	</border>
	|	<picture/>
	|	<pictureStyle>4</pictureStyle>
	|	<pointUUID>cbbad246-500e-4510-a8f6-08b4ac83f9d5</pointUUID>
	|	<passageState>0</passageState>
	|	<tableCode>0</tableCode>
	|</item>";

	Верх = Окр(Рисунок.Верх,0) * 4; // у
	Лево = Окр(Рисунок.Лево,0) * 4; // х
	Ширина = Окр(Рисунок.Ширина,0) * 4;
	Высота = Окр(Рисунок.Высота,0) * 4;
	
	Точки = Новый Структура; 
	Точки.Вставить("Индекс", КоординатаВСтроку(Индекс));
	Точки.Вставить("КодТочки", "Старт");
	Точки.Вставить("Лево", КоординатаВСтроку(Лево));
	Точки.Вставить("Право", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("Верх", КоординатаВСтроку(Верх));
	Точки.Вставить("Низ", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х1", КоординатаВСтроку(Лево));
	Точки.Вставить("У1", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х2", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У2", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х3", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У3", КоординатаВСтроку(ОКР(Высота/2, 1) + Верх));
	
	Точки.Вставить("Х4", КоординатаВСтроку(ОКР(Ширина/2, 1) + Лево));
	Точки.Вставить("У4", КоординатаВСтроку(Высота + Верх));
	
	Точки.Вставить("Х5", КоординатаВСтроку(Лево));
	Точки.Вставить("У5", КоординатаВСтроку(ОКР(Высота/2, 1) + Верх));
	
	Для каждого Точка Из Точки Цикл
	    ЧтоЗаменить   = СтрШаблон("[%1]", Точка.Ключ);
		НаЧтоЗаменить = Точка.Значение;
		Шаблон = СтрЗаменить(Шаблон, ЧтоЗаменить, НаЧтоЗаменить); 
	КонецЦикла; 
	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);
	
	Возврат Точки;
	
КонецФункции

Функция ДобавитьТочкуЗавершения(ТекстовыйДокумент, Рисунок, Индекс, ИндексТипа)
	
	Шаблон = 
	"
	|<item>
	|	<itemType>3</itemType>
	|	<itemId>[Индекс]</itemId>
	|	<currentLanguage>#</currentLanguage>
	|	<itemTitle>
	|		<item xmlns=""http://v8.1c.ru/8.1/data/core"">
	|			<lang>#</lang>
	|			<content>[Наименование]</content>
	|		</item>
	|	</itemTitle>
	|	<tipText/>
	|	<itemCode>[КодТочки]</itemCode>
	|	<itemTabOrder>1</itemTabOrder>
	|	<backColor>auto</backColor>
	|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
	|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
	|	<groupNum>0</groupNum>
	|	<zOrder>0</zOrder>
	|	<hyperlink>false</hyperlink>
	|	<transparent>false</transparent>
	|	<textFont kind=""AutoFont""/>
	|	<alignHor>Center</alignHor>
	|	<alignVer>Center</alignVer>
	|	<picturePlacement>Left</picturePlacement>
	|	<rectLeft>[Лево]</rectLeft>
	|	<rectRight>[Право]</rectRight>
	|	<rectTop>[Верх]</rectTop>
	|	<rectBottom>[Низ]</rectBottom>
	|	<point>
	|		<x>[Х1]</x>
	|		<y>[У1]</y>
	|	</point>
	|	<point>
	|		<x>[Х2]</x>
	|		<y>[У2]</y>
	|	</point>
	|	<point>
	|		<x>[Х3]</x>
	|		<y>[У3]</y>
	|	</point>
	|	<point>
	|		<x>[Х4]</x>
	|		<y>[У4]</y>
	|	</point>
	|	<point>
	|		<x>[Х5]</x>
	|		<y>[У5]</y>
	|	</point>
	|	<border width=""1"" gap=""false"">
	|		<style xmlns=""http://v8.1c.ru/8.1/data/ui"" xmlns:d4p1=""http://v8.1c.ru/8.2/data/graphscheme"" xsi:type=""d4p1:ConnectorLineType"">Solid</style>
	|	</border>
	|	<picture/>
	|	<pictureStyle>4</pictureStyle>
	|	<pointUUID>1f3f072a-bc35-4757-8311-5a35ee84db4a</pointUUID>
	|	<passageState>0</passageState>
	|	<tableCode>0</tableCode>
	|</item>";

	Верх = Окр(Рисунок.Верх,0) * 4; // у
	Лево = Окр(Рисунок.Лево,0) * 4; // х
	Ширина = Окр(Рисунок.Ширина,0) * 4;
	Высота = Окр(Рисунок.Высота,0) * 4;
		
	ИндексТипа = ИндексТипа + 1;

	Точки = Новый Структура;
	Точки.Вставить("Наименование", Рисунок.Расшифровка.Точка);
	Точки.Вставить("Индекс", КоординатаВСтроку(Индекс));
	Точки.Вставить("КодТочки", "Завершение" + КоординатаВСтроку(ИндексТипа));
	Точки.Вставить("Лево", КоординатаВСтроку(Лево));
	Точки.Вставить("Право", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("Верх", КоординатаВСтроку(Верх));
	Точки.Вставить("Низ", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х1", КоординатаВСтроку(ОКР(Ширина/2, 1) + Лево));
	Точки.Вставить("У1", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х2", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У2", КоординатаВСтроку(ОКР(Высота/2, 1) + Верх));

	Точки.Вставить("Х3", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У3", КоординатаВСтроку(Высота + Верх));
	
	Точки.Вставить("Х4", КоординатаВСтроку(Лево));
	Точки.Вставить("У4", КоординатаВСтроку(Высота + Верх));
	
	Точки.Вставить("Х5", КоординатаВСтроку(Лево));
	Точки.Вставить("У5", КоординатаВСтроку(ОКР(Высота/2, 1) + Верх));

	Для каждого Точка Из Точки Цикл
	    ЧтоЗаменить   = СтрШаблон("[%1]", Точка.Ключ);
		НаЧтоЗаменить = Точка.Значение;
		Шаблон = СтрЗаменить(Шаблон, ЧтоЗаменить, НаЧтоЗаменить); 
	КонецЦикла; 
	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);
	
	Возврат Точки;
	
КонецФункции

Функция ДобавитьТочкуДействие(ТекстовыйДокумент, Рисунок, Индекс, ИндексТипа, ТочкиАлгоритма)
	
	Шаблон =
	"
	|<item>
	|	<itemType>5</itemType>
	|	<itemId>[Индекс]</itemId>
	|	<currentLanguage>#</currentLanguage>
	|	<itemTitle>
	|		<item xmlns=""http://v8.1c.ru/8.1/data/core"">
	|			<lang>#</lang>
	|			<content>[Наименование]</content>
	|		</item>
	|	</itemTitle>
	|	<tipText/>
	|	<itemCode>[КодТочки]</itemCode>
	|	<itemTabOrder>1</itemTabOrder>
	|	<backColor>auto</backColor>
	|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
	|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
	|	<groupNum>0</groupNum>
	|	<zOrder>0</zOrder>
	|	<hyperlink>false</hyperlink>
	|	<transparent>false</transparent>
	|	<textFont kind=""AutoFont""/>
	|	<alignHor>Center</alignHor>
	|	<alignVer>Center</alignVer>
	|	<picturePlacement>Left</picturePlacement>
	|	<rectLeft>[Лево]</rectLeft>
	|	<rectRight>[Право]</rectRight>
	|	<rectTop>[Верх]</rectTop>
	|	<rectBottom>[Низ]</rectBottom>
	|	<point>
	|		<x>[Х1]</x>
	|		<y>[У1]</y>
	|	</point>
	|	<point>
	|		<x>[Х2]</x>
	|		<y>[У2]</y>
	|	</point>
	|	<point>
	|		<x>[Х3]</x>
	|		<y>[У3]</y>
	|	</point>
	|	<point>
	|		<x>[Х4]</x>
	|		<y>[У4]</y>
	|	</point>
	|	<border width=""1"" gap=""false"">
	|		<style xmlns=""http://v8.1c.ru/8.1/data/ui"" xmlns:d4p1=""http://v8.1c.ru/8.2/data/graphscheme"" xsi:type=""d4p1:ConnectorLineType"">Solid</style>
	|	</border>
	|	<picture/>
	|	<pictureStyle>4</pictureStyle>
	|	<pointUUID>402fea57-2dc2-49e3-b7b2-a3d93c6fa801</pointUUID>
	|	<passageState>[Рамка]</passageState>
	|	<tableCode>0</tableCode>
	|	<taskDescription>Действие1</taskDescription>
	|	<explanation/>
	|	<groupAddressing>false</groupAddressing>
	|	<isAddrZoneDivideValid>true</isAddrZoneDivideValid>
	|	<addrZoneDivideYPos>13</addrZoneDivideYPos>
	|</item>";
	
	Верх = Окр(Рисунок.Верх,0) * 4; // у
	Лево = Окр(Рисунок.Лево,0) * 4; // х
	Ширина = Окр(Рисунок.Ширина,0) * 4;
	Высота = Окр(Рисунок.Высота,0) * 4;
	
	ИндексТипа = ИндексТипа + 1;
	
	Точки = Новый Структура;
	Точки.Вставить("Наименование", Рисунок.Расшифровка.Точка);
	Точки.Вставить("Индекс", КоординатаВСтроку(Индекс));
	Точки.Вставить("КодТочки", "Действие" + КоординатаВСтроку(ИндексТипа));
	Точки.Вставить("Лево", КоординатаВСтроку(Лево));
	Точки.Вставить("Право", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("Верх", КоординатаВСтроку(Верх));
	Точки.Вставить("Низ", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х1", КоординатаВСтроку(Лево));
	Точки.Вставить("У1", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х2", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У2", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х3", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У3", КоординатаВСтроку(Высота + Верх));
	
	Точки.Вставить("Х4", КоординатаВСтроку(Лево));
	Точки.Вставить("У4", КоординатаВСтроку(Высота + Верх));
	
	ТочкаАлгоритма = ТочкиАлгоритма.Найти(Рисунок.Расшифровка.Точка, "Точка");
	Если ТочкаАлгоритма = Неопределено Тогда
		Рамка = "0";
	Иначе
		Рамка = ?(ТочкаАлгоритма.Заполнена, "0", "2");
	КонецЕсли;
	Точки.Вставить("Рамка", Рамка);
	
	Для каждого Точка Из Точки Цикл
	    ЧтоЗаменить   = СтрШаблон("[%1]", Точка.Ключ);
		НаЧтоЗаменить = Точка.Значение;
		Шаблон = СтрЗаменить(Шаблон, ЧтоЗаменить, НаЧтоЗаменить); 
	КонецЦикла; 
	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);
	
	Возврат Точки;
	
КонецФункции

Функция ДобавитьТочкуПодчиненныйПроцесс(ТекстовыйДокумент, Рисунок, Индекс, ИндексТипа, ТочкиАлгоритма)
	
	Шаблон =
	"
	|<item>
	|	<itemType>10</itemType>
	|	<itemId>[Индекс]</itemId>
	|	<currentLanguage>#</currentLanguage>
	|	<itemTitle>
	|		<item xmlns=""http://v8.1c.ru/8.1/data/core"">
	|			<lang>#</lang>
	|			<content>[Наименование]</content>
	|		</item>
	|	</itemTitle>
	|	<tipText/>
	|	<itemCode>[КодТочки]</itemCode>
	|	<itemTabOrder>1</itemTabOrder>
	|	<backColor>auto</backColor>
	|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
	|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
	|	<groupNum>0</groupNum>
	|	<zOrder>0</zOrder>
	|	<hyperlink>false</hyperlink>
	|	<transparent>false</transparent>
	|	<textFont kind=""AutoFont""/>
	|	<alignHor>Center</alignHor>
	|	<alignVer>Center</alignVer>
	|	<picturePlacement>Left</picturePlacement>
	|	<rectLeft>[Лево]</rectLeft>
	|	<rectRight>[Право]</rectRight>
	|	<rectTop>[Верх]</rectTop>
	|	<rectBottom>[Низ]</rectBottom>
	|	<point>
	|		<x>[Х1]</x>
	|		<y>[У1]</y>
	|	</point>
	|	<point>
	|		<x>[Х2]</x>
	|		<y>[У2]</y>
	|	</point>
	|	<point>
	|		<x>[Х3]</x>
	|		<y>[У3]</y>
	|	</point>
	|	<point>
	|		<x>[Х4]</x>
	|		<y>[У4]</y>
	|	</point>
	|	<border width=""1"" gap=""false"">
	|		<style xmlns=""http://v8.1c.ru/8.1/data/ui"" xmlns:d4p1=""http://v8.1c.ru/8.2/data/graphscheme"" xsi:type=""d4p1:ConnectorLineType"">Solid</style>
	|	</border>
	|	<picture/>
	|	<pictureStyle>4</pictureStyle>
	|	<pointUUID>694e1d81-211f-4ec2-8033-89776497f51c</pointUUID>
	|	<passageState>[Рамка]</passageState>
	|	<tableCode>0</tableCode>
	|	<subprocessUUID>00000000-0000-0000-0000-000000000000</subprocessUUID>
	|	<taskDescription>Вложенный процесс1</taskDescription>
	|</item>";
	
	Верх = Окр(Рисунок.Верх,0) * 4; // у
	Лево = Окр(Рисунок.Лево,0) * 4; // х
	Ширина = Окр(Рисунок.Ширина,0) * 4;
	Высота = Окр(Рисунок.Высота,0) * 4;
	
	ИндексТипа = ИндексТипа + 1;
	
	Точки = Новый Структура;
	Точки.Вставить("Наименование", Рисунок.Расшифровка.Точка);
	Точки.Вставить("Индекс", КоординатаВСтроку(Индекс));
	Точки.Вставить("КодТочки", "ПодчиненныйПроцесс" + КоординатаВСтроку(ИндексТипа));
	Точки.Вставить("Лево", КоординатаВСтроку(Лево));
	Точки.Вставить("Право", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("Верх", КоординатаВСтроку(Верх));
	Точки.Вставить("Низ", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х1", КоординатаВСтроку(Лево));
	Точки.Вставить("У1", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х2", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У2", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х3", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У3", КоординатаВСтроку(Высота + Верх));
	
	Точки.Вставить("Х4", КоординатаВСтроку(Лево));
	Точки.Вставить("У4", КоординатаВСтроку(Высота + Верх));
	
	ТочкаАлгоритма = ТочкиАлгоритма.Найти(Рисунок.Расшифровка.Точка, "Точка");
	Если ТочкаАлгоритма = Неопределено Тогда
		Рамка = "0";
	Иначе
		Рамка = ?(ТочкаАлгоритма.Заполнена, "0", "2");
	КонецЕсли;
	Точки.Вставить("Рамка", Рамка);

	Для каждого Точка Из Точки Цикл
	    ЧтоЗаменить   = СтрШаблон("[%1]", Точка.Ключ);
		НаЧтоЗаменить = Точка.Значение;
		Шаблон = СтрЗаменить(Шаблон, ЧтоЗаменить, НаЧтоЗаменить); 
	КонецЦикла; 
	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);
	
	Возврат Точки;
	
КонецФункции

Функция ДобавитьТочкуУсловия(ТекстовыйДокумент, Рисунок, Индекс, ИндексТипа, ТочкиАлгоритма)
	
	Шаблон = 
	"
	|<item>
	|	<itemType>4</itemType>
	|	<itemId>[Индекс]</itemId>
	|	<currentLanguage>#</currentLanguage>
	|	<itemTitle>
	|		<item xmlns=""http://v8.1c.ru/8.1/data/core"">
	|			<lang>#</lang>
	|			<content>[Наименование]</content>
	|		</item>
	|	</itemTitle>
	|	<tipText/>
	|	<itemCode>[КодТочки]</itemCode>
	|	<itemTabOrder>1</itemTabOrder>
	|	<backColor>auto</backColor>
	|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
	|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
	|	<groupNum>0</groupNum>
	|	<zOrder>0</zOrder>
	|	<hyperlink>false</hyperlink>
	|	<transparent>false</transparent>
	|	<textFont kind=""AutoFont""/>
	|	<alignHor>Center</alignHor>
	|	<alignVer>Center</alignVer>
	|	<picturePlacement>Left</picturePlacement>
	|	<rectLeft>[Лево]</rectLeft>
	|	<rectRight>[Право]</rectRight>
	|	<rectTop>[Верх]</rectTop>
	|	<rectBottom>[Низ]</rectBottom>
	|	<point>
	|		<x>[Х1]</x>
	|		<y>[У1]</y>
	|	</point>
	|	<point>
	|		<x>[Х2]</x>
	|		<y>[У2]</y>
	|	</point>
	|	<point>
	|		<x>[Х3]</x>
	|		<y>[У3]</y>
	|	</point>
	|	<point>
	|		<x>[Х4]</x>
	|		<y>[У4]</y>
	|	</point>
	|	<point>
	|		<x>[Х5]</x>
	|		<y>[У5]</y>
	|	</point>
	|	<point>
	|		<x>[Х6]</x>
	|		<y>[У6]</y>
	|	</point>
	|	<border width=""1"" gap=""false"">
	|		<style xmlns=""http://v8.1c.ru/8.1/data/ui"" xmlns:d4p1=""http://v8.1c.ru/8.2/data/graphscheme"" xsi:type=""d4p1:ConnectorLineType"">Solid</style>
	|	</border>
	|	<picture/>
	|	<pictureStyle>4</pictureStyle>
	|	<pointUUID>a0d54113-7f97-4725-89d9-15edf2d52ccd</pointUUID>
	|	<passageState>[Рамка]</passageState>
	|	<tableCode>0</tableCode>
	|	<truePortIndex>3</truePortIndex>
	|	<falsePortIndex>1</falsePortIndex>
	|</item>";

	Верх = Окр(Рисунок.Верх,0) * 4; // у
	Лево = Окр(Рисунок.Лево,0) * 4; // х
	Ширина = Окр(Рисунок.Ширина,0) * 4;
	Высота = Окр(Рисунок.Высота,0) * 4;
	
	ИндексТипа = ИндексТипа + 1;
	
	Точки = Новый Структура; 
	Точки.Вставить("Наименование", Рисунок.Расшифровка.Точка);
	Точки.Вставить("Индекс", КоординатаВСтроку(Индекс));
	Точки.Вставить("КодТочки", "Условие" + КоординатаВСтроку(ИндексТипа));
	Точки.Вставить("Лево", КоординатаВСтроку(Лево));
	Точки.Вставить("Право", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("Верх", КоординатаВСтроку(Верх));
	Точки.Вставить("Низ", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х1", КоординатаВСтроку(Лево));
	Точки.Вставить("У1", КоординатаВСтроку(ОКР(Высота/2, 1) + Верх));
	
	Точки.Вставить("Х2", КоординатаВСтроку(Лево + 11));
	Точки.Вставить("У2", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х3", КоординатаВСтроку(Ширина + Лево - 11));
	Точки.Вставить("У3", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х4", КоординатаВСтроку(Ширина + Лево));
	Точки.Вставить("У4", КоординатаВСтроку(ОКР(Высота/2, 1) + Верх));
	
	Точки.Вставить("Х5", КоординатаВСтроку(Ширина + Лево - 11));
	Точки.Вставить("У5", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х6", КоординатаВСтроку(Лево + 11));
	Точки.Вставить("У6", КоординатаВСтроку(Верх + Высота));
	
	ТочкаАлгоритма = ТочкиАлгоритма.Найти(Рисунок.Расшифровка.Точка, "Точка");
	Если ТочкаАлгоритма = Неопределено Тогда
		Рамка = "0";
	Иначе
		Рамка = ?(ТочкаАлгоритма.Заполнена, "0", "2");
	КонецЕсли;
	Точки.Вставить("Рамка", Рамка);

	Для каждого Точка Из Точки Цикл
	    ЧтоЗаменить   = СтрШаблон("[%1]", Точка.Ключ);
		НаЧтоЗаменить = Точка.Значение;
		Шаблон = СтрЗаменить(Шаблон, ЧтоЗаменить, НаЧтоЗаменить); 
	КонецЦикла; 
	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);

	Возврат Точки;
	
КонецФункции

Функция ДобавитьТочкуСлияние(ТекстовыйДокумент, Рисунок, Индекс, ИндексТипа)
	
	Шаблон = 
	"
	|<item>
	|	<itemType>8</itemType>
	|	<itemId>[Индекс]</itemId>
	|	<currentLanguage>#</currentLanguage>
	|	<itemTitle>
	|		<item xmlns=""http://v8.1c.ru/8.1/data/core"">
	|			<lang>#</lang>
	|			<content>[КодТочки]</content>
	|		</item>
	|	</itemTitle>
	|	<tipText/>
	|	<itemCode>[КодТочки]</itemCode>
	|	<itemTabOrder>1</itemTabOrder>
	|	<backColor>auto</backColor>
	|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
	|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
	|	<groupNum>0</groupNum>
	|	<zOrder>0</zOrder>
	|	<hyperlink>false</hyperlink>
	|	<transparent>false</transparent>
	|	<textFont kind=""AutoFont""/>
	|	<alignHor>Center</alignHor>
	|	<alignVer>Center</alignVer>
	|	<picturePlacement>Left</picturePlacement>
	|	<rectLeft>[Лево]</rectLeft>
	|	<rectRight>[Право]</rectRight>
	|	<rectTop>[Верх]</rectTop>
	|	<rectBottom>[Низ]</rectBottom>
	|	<point>
	|		<x>[Х1]</x>
	|		<y>[У1]</y>
	|	</point>
	|	<point>
	|		<x>[Х2]</x>
	|		<y>[У2]</y>
	|	</point>
	|	<point>
	|		<x>[Х3]</x>
	|		<y>[У3]</y>
	|	</point>
	|	<border width=""1"" gap=""false"">
	|		<style xmlns=""http://v8.1c.ru/8.1/data/ui"" xmlns:d4p1=""http://v8.1c.ru/8.2/data/graphscheme"" xsi:type=""d4p1:ConnectorLineType"">Solid</style>
	|	</border>
	|	<picture/>
	|	<pictureStyle>4</pictureStyle>
	|	<pointUUID>43421bb0-9f3b-4b9a-a9f4-2b59ade8079c</pointUUID>
	|	<passageState>0</passageState>
	|	<tableCode>0</tableCode>
	|</item>";
	
	Верх = Окр(Рисунок.Верх,0) * 4; // у
	Лево = Окр(Рисунок.Лево,0) * 4; // х
	Ширина = Окр(Рисунок.Ширина,0) * 4;
	Высота = Окр(Рисунок.Высота,0) * 4;
	
	ИндексТипа = ИндексТипа + 1;
	
	Точки = Новый Структура; 
	Точки.Вставить("Индекс", КоординатаВСтроку(Индекс));
	Точки.Вставить("КодТочки", "Слияние" + КоординатаВСтроку(ИндексТипа));
	Точки.Вставить("Лево", КоординатаВСтроку(Лево));
	Точки.Вставить("Право", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("Верх", КоординатаВСтроку(Верх));
	Точки.Вставить("Низ", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х1", КоординатаВСтроку(Окр(Ширина/2,1) + Лево));
	Точки.Вставить("У1", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х2", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("У2", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х3", КоординатаВСтроку(Лево));
	Точки.Вставить("У3", КоординатаВСтроку(Верх + Высота));

	Для каждого Точка Из Точки Цикл
	    ЧтоЗаменить   = СтрШаблон("[%1]", Точка.Ключ);
		НаЧтоЗаменить = Точка.Значение;
		Шаблон = СтрЗаменить(Шаблон, ЧтоЗаменить, НаЧтоЗаменить); 
	КонецЦикла; 
	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);

	Возврат Точки;
	
КонецФункции

Функция ДобавитьТочкуРазделение(ТекстовыйДокумент, Рисунок, Индекс, ИндексТипа)
	
	Шаблон =
	"
	|<item>
	|	<itemType>7</itemType>
	|	<itemId>[Индекс]</itemId>
	|	<currentLanguage>#</currentLanguage>
	|	<itemTitle>
	|		<item xmlns=""http://v8.1c.ru/8.1/data/core"">
	|			<lang>#</lang>
	|			<content>[КодТочки]</content>
	|		</item>
	|	</itemTitle>
	|	<tipText/>
	|	<itemCode>[КодТочки]</itemCode>
	|	<itemTabOrder>1</itemTabOrder>
	|	<backColor>auto</backColor>
	|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
	|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
	|	<groupNum>0</groupNum>
	|	<zOrder>0</zOrder>
	|	<hyperlink>false</hyperlink>
	|	<transparent>false</transparent>
	|	<textFont kind=""AutoFont""/>
	|	<alignHor>Center</alignHor>
	|	<alignVer>Center</alignVer>
	|	<picturePlacement>Left</picturePlacement>
	|	<rectLeft>[Лево]</rectLeft>
	|	<rectRight>[Право]</rectRight>
	|	<rectTop>[Верх]</rectTop>
	|	<rectBottom>[Низ]</rectBottom>
	|	<point>
	|		<x>[Х1]</x>
	|		<y>[У1]</y>
	|	</point>
	|	<point>
	|		<x>[Х2]</x>
	|		<y>[У2]</y>
	|	</point>
	|	<point>
	|		<x>[Х3]</x>
	|		<y>[У3]</y>
	|	</point>
	|	<border width=""1"" gap=""false"">
	|		<style xmlns=""http://v8.1c.ru/8.1/data/ui"" xmlns:d4p1=""http://v8.1c.ru/8.2/data/graphscheme"" xsi:type=""d4p1:ConnectorLineType"">Solid</style>
	|	</border>
	|	<picture/>
	|	<pictureStyle>4</pictureStyle>
	|	<pointUUID>a33b112f-88f5-408a-a1d8-a7aa29479506</pointUUID>
	|	<passageState>0</passageState>
	|	<tableCode>0</tableCode>
	|</item>";
	
	Верх = Окр(Рисунок.Верх,0) * 4; // у
	Лево = Окр(Рисунок.Лево,0) * 4; // х
	Ширина = Окр(Рисунок.Ширина,0) * 4;
	Высота = Окр(Рисунок.Высота,0) * 4;
	
	ИндексТипа = ИндексТипа + 1;
	
	Точки = Новый Структура; 
	Точки.Вставить("Индекс", КоординатаВСтроку(Индекс));
	Точки.Вставить("КодТочки", "Разделение" + КоординатаВСтроку(ИндексТипа));
	Точки.Вставить("Лево", КоординатаВСтроку(Лево));
	Точки.Вставить("Право", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("Верх", КоординатаВСтроку(Верх));
	Точки.Вставить("Низ", КоординатаВСтроку(Верх + Высота));
	
	Точки.Вставить("Х1", КоординатаВСтроку(Лево));
	Точки.Вставить("У1", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х2", КоординатаВСтроку(Лево + Ширина));
	Точки.Вставить("У2", КоординатаВСтроку(Верх));
	
	Точки.Вставить("Х3", КоординатаВСтроку(Окр(Ширина/2,1) + Лево));
	Точки.Вставить("У3", КоординатаВСтроку(Верх + Высота));
	
	Для каждого Точка Из Точки Цикл
	    ЧтоЗаменить   = СтрШаблон("[%1]", Точка.Ключ);
		НаЧтоЗаменить = Точка.Значение;
		Шаблон = СтрЗаменить(Шаблон, ЧтоЗаменить, НаЧтоЗаменить); 
	КонецЦикла; 
	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);

	Возврат Точки;
	
КонецФункции

Функция ДобавитьДекоративнуюЛинию(ТекстовыйДокумент, СвойстваЛиниии, ИндексТипа)
	
	Шаблон =
	"
	|<item>
	|	<itemType>1</itemType>
	|	<itemId>[Индекс]</itemId>
	|	<currentLanguage>#</currentLanguage>
	|	[Заголовок]
	|	<itemCode>[КодТочки]</itemCode>
	|	<itemTabOrder>2</itemTabOrder>
	|	<backColor>auto</backColor>
	|	<textColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:FormTextColor</textColor>
	|	<lineColor xmlns:d3p1=""http://v8.1c.ru/8.1/data/ui/style"">d3p1:BorderColor</lineColor>
	|	<groupNum>0</groupNum>
	|	<zOrder>2</zOrder>
	|	<hyperlink>false</hyperlink>
	|	<transparent>false</transparent>
	|	<textFont kind=""AutoFont""/>
	|	<alignHor>Center</alignHor>
	|	<alignVer>Center</alignVer>
	|	<picturePlacement>Left</picturePlacement>
	|	[ТочкиКоординат]
	|	<border width=""1"" gap=""false"">
	|		<style xmlns=""http://v8.1c.ru/8.1/data/ui"" xmlns:d4p1=""http://v8.1c.ru/8.2/data/graphscheme"" xsi:type=""d4p1:ConnectorLineType"">Solid</style>
	|	</border>
	|	<connectFromItemId>[Начало]</connectFromItemId>
	|	<connectFromPortIndex>0</connectFromPortIndex>
	|	<connectToItemId>[Конец]</connectToItemId>
	|	<decorativeLine>true</decorativeLine>
	|	<portIndexFrom>4</portIndexFrom>
	|	<portIndexTo>2</portIndexTo>
	|	<textPos>FirstSegment</textPos>
	|	<beginArrowStyle>None</beginArrowStyle>
	|	<endArrowStyle>Filled</endArrowStyle>
	|</item>";
	
	СвойстваЛиниии.Координаты.Свернуть("Х, У");
	ТочкиКоординат = "";	
	ШаблонКоординаты = 
	"	<point>
	|		<x>%1</x>
	|		<y>%2</y>
	|	</point>";
	
	ШаблонЗаголовка =
	"	<itemTitle>
	|			<item xmlns=""http://v8.1c.ru/8.1/data/core"">
	|				<lang>#</lang>
	|				<content>%1</content>
	|			</item>
	|	</itemTitle>";
		
	Для каждого СтрокаТаблицы Из СвойстваЛиниии.Координаты Цикл
	    Разделитель = ?(ПустаяСтрока(ТочкиКоординат), "", Символы.ПС);
		ТочкиКоординат = ТочкиКоординат + Разделитель + СтрШаблон(ШаблонКоординаты, СтрокаТаблицы.Х, СтрокаТаблицы.У);
	КонецЦикла; 
	
	Точки = Новый Структура; 
	Точки.Вставить("Индекс", КоординатаВСтроку(СвойстваЛиниии.Индекс));
	Точки.Вставить("КодТочки", "Линия" + КоординатаВСтроку(ИндексТипа));
	Точки.Вставить("Начало", СвойстваЛиниии.Начало);
	Точки.Вставить("Конец", СвойстваЛиниии.Конец);
	
	Для каждого Точка Из Точки Цикл
	    ЧтоЗаменить   = СтрШаблон("[%1]", Точка.Ключ);
		НаЧтоЗаменить = Точка.Значение;
		Шаблон = СтрЗаменить(Шаблон, ЧтоЗаменить, НаЧтоЗаменить); 
	КонецЦикла; 
	ТекстовыйДокумент.ДобавитьСтроку(Шаблон);

	Текст = ТекстовыйДокумент.ПолучитьТекст();
	Текст = СтрЗаменить(Текст, "[ТочкиКоординат]", ТочкиКоординат);
	
	Если ЗначениеЗаполнено(СвойстваЛиниии.Заголовок) Тогда
	     ТекстЗаголовка = СтрШаблон(ШаблонЗаголовка, СвойстваЛиниии.Заголовок);
	Иначе	
	     ТекстЗаголовка = "<itemTitle/>";
	КонецЕсли; 
	Текст = СтрЗаменить(Текст, "[Заголовок]", ТекстЗаголовка);
	
	ТекстовыйДокумент.УстановитьТекст(Текст);
	
	Возврат Точки;
	
КонецФункции

Функция НоваяТаблицаКоординат()

	Таблица = Новый ТаблицаЗначений(); 
	Таблица.Колонки.Добавить("Х");
	Таблица.Колонки.Добавить("У");

	Возврат Таблица;
	
КонецФункции

Функция КоординатаВСтроку(Значение)

	Возврат Формат(Значение, "ЧГ=");

КонецФункции

Функция ТочкиАлгоритмовДляВосстановления(Алгоритм = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Алгоритм", Алгоритм);
	Запрос.УстановитьПараметр("Действие", Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие);
	Запрос.УстановитьПараметр("Процесс",  Перечисления.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс);
	Запрос.УстановитьПараметр("Условие",  Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие);
	Запрос.УстановитьПараметр("ПустоеДействие", Справочники.бит_ПользовательскиеДействия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеУсловие",  Справочники.бит_ПользовательскиеУсловия.ПустаяСсылка());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТочкиАлгоритмов.Ссылка КАК Точка,
	|	ТочкиАлгоритмов.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА ТочкиАлгоритмов.ВидТочки = &Действие
	|				И ТочкиАлгоритмов.ПользовательскоеДействие = &ПустоеДействие
	|			ТОГДА ЛОЖЬ
	|		КОГДА ТочкиАлгоритмов.ВидТочки = &Процесс
	|				И ТочкиАлгоритмов.ПользовательскоеДействие = &ПустоеДействие
	|			ТОГДА ЛОЖЬ
	|		КОГДА ТочкиАлгоритмов.ВидТочки = &Условие
	|				И ТочкиАлгоритмов.ПользовательскоеУсловие = &ПустоеУсловие
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Заполнена
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	|ГДЕ
	|	ТочкиАлгоритмов.ВидТочки В (&Действие, &Процесс, &Условие)
	|	И &Алгоритм";
	
	ЧтоЗаменить   = "&Алгоритм";
	НаЧтоЗаменить = ?(Алгоритм = Неопределено, "ИСТИНА", "Владелец = &Алгоритм");
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);

	Запрос.Текст   = ТекстЗапроса;
	ТочкиАлгоритма = Запрос.Выполнить().Выгрузить();
	ТочкиАлгоритма.Индексы.Добавить("Точка");
	
	Возврат ТочкиАлгоритма;
	
КонецФункции
 
#КонецОбласти 
 
Функция ЕстьТочкиСтартаИЗвершения(Алгоритм)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Алгоритм",Алгоритм);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Алгоритмы.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТочкиСтарта.Ссылка) КАК Старт,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТочкиЗавершения.Ссылка) КАК Завершение
	|ИЗ
	|	Справочник.бит_уп_Алгоритмы КАК Алгоритмы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиСтарта
	|		ПО (ТочкиСтарта.Владелец = Алгоритмы.Ссылка)
	|			И (ТочкиСтарта.ВидТочки = ЗНАЧЕНИЕ(Перечисление.бит_уп_ВидыТочекАлгоритмов.Старт))
	|			И (ТочкиСтарта.АктивнаяТочкаМаршрута)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиЗавершения
	|		ПО (ТочкиЗавершения.Владелец = Алгоритмы.Ссылка)
	|			И (ТочкиЗавершения.ВидТочки = ЗНАЧЕНИЕ(Перечисление.бит_уп_ВидыТочекАлгоритмов.Завершение))
	|			И (ТочкиЗавершения.АктивнаяТочкаМаршрута)
	|ГДЕ
	|	Алгоритмы.Ссылка = &Алгоритм
	|
	|СГРУППИРОВАТЬ ПО
	|	Алгоритмы.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка 		 = РезультатЗапроса.Выбрать();
	Ошибки 			 = Новый Массив; 
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Старт = 0 Тогда
			Ошибки.Добавить(Нстр("ru = 'Нет точки старта.'"));
		ИначеЕсли Выборка.Старт > 1 Тогда	
			Ошибки.Добавить(Нстр("ru = 'Несколько точек старта не поддерживается.'"));
		КонецЕсли; 
		Если Выборка.Завершение = 0 Тогда
			Ошибки.Добавить(Нстр("ru = 'Нет точки завершения.'"));
		КонецЕсли; 
	КонецЦикла;

	Результат = Новый Структура; 
	Результат.Вставить("ЕстьТочкиСтартаИЗвершения", Ошибки.Количество() = 0);
	Результат.Вставить("Ошибки", СтрСоединить(Ошибки, Символы.ПС));
	
	Возврат Результат;
	
КонецФункции
 
Функция ВсеТочкиЗаполнены(Алгоритм)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Алгоритм", Алгоритм);
	Запрос.УстановитьПараметр("Действие", Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие);
	Запрос.УстановитьПараметр("Процесс",  Перечисления.бит_уп_ВидыТочекАлгоритмов.ПодчиненныйПроцесс);
	Запрос.УстановитьПараметр("Условие",  Перечисления.бит_уп_ВидыТочекАлгоритмов.Условие);
	Запрос.УстановитьПараметр("ПустоеДействие", Справочники.бит_ПользовательскиеДействия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеУсловие",  Справочники.бит_ПользовательскиеУсловия.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТочкиАлгоритмов.Ссылка КАК Точка,
	|	ТочкиАлгоритмов.Представление КАК Представление
	|ИЗ
	|	Справочник.бит_уп_ТочкиАлгоритмов КАК ТочкиАлгоритмов
	|ГДЕ
	|	ТочкиАлгоритмов.Владелец = &Алгоритм
	|	И ВЫБОР
	|			КОГДА ТочкиАлгоритмов.ВидТочки = &Действие
	|					И ТочкиАлгоритмов.ПользовательскоеДействие = &ПустоеДействие
	|				ТОГДА ИСТИНА
	|			КОГДА ТочкиАлгоритмов.ВидТочки = &Процесс
	|					И ТочкиАлгоритмов.ПользовательскоеДействие = &ПустоеДействие
	|				ТОГДА ИСТИНА
	|			КОГДА ТочкиАлгоритмов.ВидТочки = &Условие
	|					И ТочкиАлгоритмов.ПользовательскоеУсловие = &ПустоеУсловие
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ТочкиАлгоритмов.АктивнаяТочкаМаршрута";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТекстСообщения = СтрШаблон(Нстр("ru = 'Работа со схемой алгоритма ""%1"" не завершена. Не заполнены свойства выделенных точек.'"),
						Алгоритм);
				
	Результат = Новый Структура; 
	Результат.Вставить("ВсеТочкиЗаполнены", РезультатЗапроса.Пустой());
	Результат.Вставить("Ошибки", 	ТекстСообщения);
	
	Возврат Результат;
	
КонецФункции
 
#КонецОбласти 

#КонецЕсли
