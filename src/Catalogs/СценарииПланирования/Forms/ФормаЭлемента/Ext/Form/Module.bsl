#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ОК Ванюков К. +// Вывод добавленных реквизитов // 2012-04-12
	ИжТиСи_СВД_Сервер.ОК_ВывестиРеквизиты(ЭтаФорма, "Справочник.СценарииПланирования.ФормаЭлементаУправляемая");
	//ОК Ванюков К. -
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	ВалютаЗаполнения = Объект.Валюта;
	
	ЗаполнитьКэшЗначений();
	
	// Если объект новый
	Если Параметры.Ключ.Пустая() Тогда
		
		// Если это копирование
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			фЗадатьВопросОКопированииКурсов = Параметры.ЗначениеКопирования.ИспользоватьКурсыСценария;					
			фКэшЗначений.Вставить("ЗначениеКопирования", Параметры.ЗначениеКопирования);
					 			
		КонецЕсли; 	
	
	КонецЕсли;   
	
	// Вызов процедуры установки доступности элементов управления
	УстановитьДоступностьЭлементов();
	
	// Установка параметров динамических список на случай записи нового элемента.	
	УстановитьОтборыДинамическихСписков();
		 	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Установка параметров динамических список на случай записи нового элемента.	
	УстановитьОтборыДинамическихСписков();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("бит_Периодичность");
	                       	                                              		
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	мКэшРеквизитовФормы.Вставить("ВалютаЗаполнения", ВалютаЗаполнения);
	
	// Если это скопированный элемент с признаком использования курсов сценария, тогда
	Если фЗадатьВопросОКопированииКурсов Тогда
		ТекстСообщения = Нстр("ru = 'Выполнить копирование курсов сценария?
									|Сценарий будет при этом записан.'"); 
		Оповещение = Новый ОписаниеОповещения("ВопросОКопированииКурсовСценарияЗавершение", ЭтотОбъект, Отказ);
		ПоказатьВопрос(Оповещение,ТекстСообщения, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш реквизитов формы данными объекта.
//
// Параметры:
//  Нет.
//
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
//
// Параметры:
// 	ИмяРеквизита - Строка.
//
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура записывает данный объект
//
// Параметры:
//  Отказ - Булево
//  КопироватьКурсыСценария - Булево (По умолчанию = Ложь)
//
&НаКлиенте
Процедура ЗаписатьЭтотОбъектКлиент(Отказ, КопироватьКурсыСценария = Ложь)

	ЗаписатьЭтотОбъект(Отказ, КопироватьКурсыСценария);
	
	Если Не Отказ Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры // ЗаписатьЭтотОбъектКлиент()

// Процедура открывает форму настройки заполнения курсов сценария
//
// Параметры:
//	СпособЗаполнения - Число (Номер способа в соответствии с которым будет заполняться регистр)
//
&НаКлиенте
Процедура ОткрытьФормуНастройкиЗаполненияКурсов(СпособЗаполнения) 	
	
	Отказ = Ложь;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросОЗаписиЭлементаЗавершение", ЭтотОбъект, СпособЗаполнения);
		ПоказатьВопрос(Оповещение, Нстр("ru = 'Элемент еще не записан. Записать?'"), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ОткрытиеФормыНастройкиЗаписиКурсов(СпособЗаполнения, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуНастройкиЗаполненияКурсов()

// Процедура - обработчик оповещения "ВопросОЗаписиЭлементаЗавершение" 
//
&НаКлиенте
Процедура ВопросОЗаписиЭлементаЗавершение(Ответ, СпособЗаполнения) Экспорт
	
	Отказ = Ложь;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ЗаписатьЭтотОбъектКлиент(Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытиеФормыНастройкиЗаписиКурсов(СпособЗаполнения, Отказ);
		
КонецПроцедуры // ВопросОЗаписиЭлементаЗавершение() 

// Процедура выполняет открытие формы настройки заполнения курсов сценария 
//
// Параметры:
//	СпособЗаполнения - Число (Номер способа в соответствии с которым будет заполняться регистр)
//
&НаКлиенте
Процедура ОткрытиеФормыНастройкиЗаписиКурсов(СпособЗаполнения, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ВалютаЗаполнения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,Нстр("ru = 'Валюта заполнения'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ВалютаЗаполнения",,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеКурса = Элементы.СписокКурсыСценариевПланирования.ТекущиеДанные;
	Если ТекущиеДанныеКурса = Неопределено Тогда
		флДатаНачала    = ОбщегоНазначенияКлиент.ДатаСеанса();
		флНачальныйКурс = 1;
	Иначе
		флДатаНачала    = ТекущиеДанныеКурса.Период;
		флНачальныйКурс = ТекущиеДанныеКурса.Курс;
	КонецЕсли;
	
	ИмяФормыЗаполненияКурсов = "Справочник.СценарииПланирования.Форма.ФормаНастройкиЗаполненияКурсов";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"		  			  , Объект.Ссылка);
	ПараметрыФормы.Вставить("ВалютаЗаполнения"		  , ВалютаЗаполнения);
	ПараметрыФормы.Вставить("ДатаНачала"   			  , флДатаНачала);		
	ПараметрыФормы.Вставить("ДатаОкончания"	  		  , ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыФормы.Вставить("ДлинаИнтервала"  		  , 1);
	ПараметрыФормы.Вставить("КоличествоШагов" 		  , 1);
	ПараметрыФормы.Вставить("НачальныйКурс"			  , флНачальныйКурс);
	ПараметрыФормы.Вставить("СпособЗаполнения"		  , СпособЗаполнения);
	ОткрытьФорму(ИмяФормыЗаполненияКурсов, ПараметрыФормы, Элементы.СписокКурсыСценариевПланирования);

КонецПроцедуры // ОткрытиеФормыПомощникаЗаписиКурсов() 

// Процедура  - обработчик оповещения "ВопросКопированииКурсовСценарияЗавершение"
//             
&НаКлиенте    
Процедура ВопросОКопированииКурсовСценарияЗавершение(Ответ, Отказ) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьЭтотОбъектКлиент(Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры // ВопросПроверкиЭлементаНаНаличиеВ_ИБЗавершение()

&НаКлиенте
Процедура КурсыКопироватьИзКурсовВалют(Команда)
	
	ОткрытьФормуНастройкиЗаполненияКурсов(1);
	
КонецПроцедуры // КурсыКопироватьИзКурсовВалют()

&НаКлиенте
Процедура КурсыЗаполнитьИспользуяЛинейноеЗаполнение(Команда)
	
	ОткрытьФормуНастройкиЗаполненияКурсов(2);
	
КонецПроцедуры // КурсыЗаполнитьИспользуяЛинейноеЗаполнение()

&НаКлиенте
Процедура КурсыЗаполнитьПоПроизвольномуАлгоритму(Команда)
	
	ОткрытьФормуНастройкиЗаполненияКурсов(3);
	
КонецПроцедуры //КурсыЗаполнитьПоПроизвольномуАлгоритму()

&НаКлиенте
Процедура бит_ПериодичностьПриИзменении(Элемент)
	
	
	Если Не ЗначениеЗаполнено(Объект.ПериодичностьКонтроля) 
		 ИЛИ Не Объект.бит_Периодичность = Объект.ПериодичностьКонтроля Тогда
	
		 Объект.ПериодичностьКонтроля = Объект.бит_Периодичность;
	
	КонецЕсли; 
	
	ДобавитьВКэш("бит_Периодичность");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКурсыСценарияПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры // ИспользоватьКурсыСценарияПриИзменении()

&НаКлиенте
Процедура ВалютаЗаполненияПриИзменении(Элемент)
	
	УстановитьОтборыСпискаКурсовСценария();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКурсыСценариевПланированияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо записать элемент!'"));
	
	КонецЕсли; 
	
КонецПроцедуры // СписокКурсыСценариевПланированияПередНачаломДобавления()

&НаКлиенте
Процедура СписокНастройкаКонтроляПоСценариямПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Необходимо записать элемент!'"));
	
	КонецЕсли; 
	
КонецПроцедуры // СписокНастройкаКонтроляПоСценариямПередНачаломДобавления()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	фКэшЗначений.Вставить("ИмяОбъекта", МетаданныеОбъекта.Имя);
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "СправочникОбъект." + МетаданныеОбъекта.Имя);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает доступность элементов управления формы
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьДоступностьЭлементов()

	// Выясняем, есть ли по сценарию движения в регистре бит_ОборотыПоБюджетам 
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	ДоступностьОбязательныхЭлементов = Не СправочникОбъект.ЕстьДвиженияПоСценарию();
	ДоступностьКонтроля              = Не СправочникОбъект.ЕстьДвиженияПоКонтролю();
		
	// Если движений нет, то делаем доступными обязательные реквизиты   
	Элементы.Валюта.ТолькоПросмотр 					  	= Не ДоступностьОбязательныхЭлементов;
	Элементы.бит_Периодичность.ТолькоПросмотр	  		= Не ДоступностьОбязательныхЭлементов;
	Элементы.ПродолжительностьИнтервала.ТолькоПросмотр  = Не ДоступностьОбязательныхЭлементов;
	Элементы.ИспользоватьКурсыСценария.ТолькоПросмотр 	= Не ДоступностьОбязательныхЭлементов;
	
	Элементы.СтраницаКурсыСценария.Доступность = Объект.ИспользоватьКурсыСценария;
	Элементы.СписокКурсыСценариевПланирования.ТолькоПросмотр = Не ДоступностьКонтроля;
	
	Элементы.ПериодичностьКонтроля.ТолькоПросмотр = НЕ ДоступностьКонтроля;
	
	Если ДоступностьКонтроля Тогда
		ТекстСообщения = ""; 
		ПериодичностьКонтроляОтображениеПодсказки =	ОтображениеПодсказки.Авто;
	Иначе	
		ТекстСообщения = Нстр("ru = 'Изменение периодичности контроля запрещено,"
			+ "т.к. зафиксированы движения по исполнению в регистре ""Контрольные значения бюджетов"".'"); 
		ПериодичностьКонтроляОтображениеПодсказки =	ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;  

	Элементы.ГруппаПериодичностьКонтроля.Подсказка			  = ТекстСообщения;
	Элементы.ГруппаПериодичностьКонтроля.ОтображениеПодсказки = ПериодичностьКонтроляОтображениеПодсказки;
	
КонецПроцедуры

// Процедура устанавливает отборы списка курсов сценария.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьОтборыСпискаКурсовСценария()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКурсыСценариевПланирования, 
		"Сценарий", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина); 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКурсыСценариевПланирования, 
		"Валюта", ВалютаЗаполнения, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ВалютаЗаполнения)); 
	
КонецПроцедуры // УстановитьОтборыСпискаКурсовСценария()

// Процедура устанавливает отборы списка настроек контроля по сценарию.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьОтборыСпискаНастроекКонтроляСценария()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНастройкаКонтроляПоСценариям, 
		"Сценарий", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина); 
	
КонецПроцедуры // УстановитьОтборыСпискаНастроекКонтроляСценария()

// Процедура устанавливает параметры динамических списков 
// (СписокКурсыСценариевПланирования и СписокНастройкаКонтроляПоСценариям)  
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьОтборыДинамическихСписков()

	УстановитьОтборыСпискаКурсовСценария();
	УстановитьОтборыСпискаНастроекКонтроляСценария();

КонецПроцедуры // УстановитьОтборыДинамическихСписков()

// Процедура записывает данный объект
//
// Параметры:
//  Отказ - Булево
//  КопироватьКурсыСценария - Булево (По умолчанию = Ложь)
//
&НаСервере
Процедура ЗаписатьЭтотОбъект(Отказ, КопироватьКурсыСценария = Ложь)

	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	Выполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СправочникОбъект, , "Нет");
	Если НЕ Выполнено Тогда
		Отказ = Истина;
	КонецЕсли; 
          		
	Если Не Отказ Тогда
		Если КопироватьКурсыСценария Тогда			
			СправочникОбъект.СкопироватьКурсыСценария(фКэшЗначений.ЗначениеКопирования);	
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(СправочникОбъект, Объект);
	УстановитьОтборыДинамическихСписков();

КонецПроцедуры  

#КонецОбласти
