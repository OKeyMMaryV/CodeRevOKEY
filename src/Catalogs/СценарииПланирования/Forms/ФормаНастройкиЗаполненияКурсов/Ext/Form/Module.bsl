
// Способы заполнения:
// 1 - копировать из курсов валют
// 2 - заполнить используя линейное заполнение
// 3 - заполнить по произвольному алгоритму


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполнение реквизитов по параметрам
	ВалютаЗаполнения 		= Параметры.ВалютаЗаполнения;
	ДатаНачала 				= Параметры.ДатаНачала;
	ДатаОкончания 			= Параметры.ДатаОкончания;
	ДлинаИнтервала 			= Параметры.ДлинаИнтервала;
	КоличествоШагов 		= Параметры.КоличествоШагов;
	НачальныйКурс 			= Параметры.НачальныйКурс;
	ПериодичностьЗаполнения = Объект.бит_Периодичность;
	СпособЗаполнения 		= Параметры.СпособЗаполнения;
	
	УправлениеВидимостьюДоступностью();	
		
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура Выполняет заполнение курсов сценария
//
// Параметры:
//  Отказ  - Булево (По умолчанию = Ложь)
//
&НаКлиенте
Процедура ВыполнитьЗаполнениеКурсов(Отказ = Ложь)

	Если СпособЗаполнения = 1 Тогда
		
		КопироватьИзКурсовВалют();
		
	ИначеЕсли СпособЗаполнения = 2 Тогда
		
		Если ДлинаИнтервала = 0 Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена длина интервала", Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПериодичностьЗаполнения) Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена периодичность", Отказ);
		КонецЕсли;
		Если КоличествоШагов = 0 Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Не заполнено количество шагов", Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ЗаполнитьИспользуяЛинейноеЗаполнение(); 		
		
	ИначеЕсли СпособЗаполнения = 3 Тогда
		
		Если ДлинаИнтервала = 0 Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Не указана длина интервала", Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПериодичностьЗаполнения) Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Не заполнена периодичность", Отказ);
		КонецЕсли;
		Если КоличествоШагов = 0 Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Не указано количество шагов", Отказ);
		КонецЕсли;
		Если ПользовательскаяФункция = 0 Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Не указана функция расчета курса сценария", Отказ);
		КонецЕсли;
		
		ПроверитьПроизвольныйАлгоритм(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ТекстСообщенияОбОшибке = "";
		ЗаполнитьПоПроизвольномуАлгоритму(ТекстСообщенияОбОшибке, Отказ);
		Если Отказ Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
	// Обновление списков в других формах
	Если Не Отказ Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Если ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы") Тогда
			ВладелецФормы.Обновить(); 
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры // ВыполнитьЗаполнениеКурсов()

// Процедура выполняет синтаксический контроль произвольного алгоритма описанного в пользовательской функции
//
// Параметры:
//  Отказ - Булево
//
&НаСервере
Процедура ПроверитьПроизвольныйАлгоритм(Отказ)
	
	Результат = 0;
	
	// Проверим работу функции со значениями по умолчанию
	Сценарий 	= Объект.Ссылка;
	НомерШага 	= 1;
	ПериодКурса = ДатаНачала;
	
	КодРасчета = ПользовательскаяФункция.КодПодпрограммы;
	
	ТекстСообщения = ВыполнитьПроизвольныйАлгоритм(Отказ); 	
	Если Отказ Тогда
		бит_ОбщегоНазначения.СообщитьОбОшибке("ТекстСообщения");
		бит_ОбщегоНазначения.СообщитьОбОшибке("В произвольном алгоритме обнаружены ошибки."); 		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПроизвольныйАлгоритм()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериодаПоДатам(ЭтотОбъект);
		
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура КомандаОК(Команда)
	
	Отказ = Ложь;
	ВыполнитьЗаполнениеКурсов(Отказ);
		
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // КомандаОК()

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	Если СпособЗаполнения = 3 И Не ЗначениеЗаполнено(ПользовательскаяФункция) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнена пользовательская функция.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;	
	КонецЕсли;
	
	ВыполнитьЗаполнениеКурсов();
		
КонецПроцедуры // КомандаВыполнить()

&НаКлиенте
Процедура КомандаСоздатьФункциюСПараметрами(Команда)
	
	СтруктураЗаполнения = СоздатьСтруктуруЗаполненияПользовательскойФункции();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	ОткрытьФорму("Справочник.бит_ПользовательскиеФункции.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры // КомандаСоздатьФункциюСПараметрами()

// Процедура управляет отображением элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УправлениеВидимостьюДоступностью()

	ЭтоСпособ_1 = СпособЗаполнения = 1;
	ЭтоСпособ_2 = СпособЗаполнения = 2;
	ЭтоСпособ_3 = СпособЗаполнения = 3;
	
	Элементы.КомандаСоздатьФункциюСПараметрами.Видимость 		= ЭтоСпособ_3;	
	Элементы.ГруппаКопироватьИзКурсовВалют.Видимость 			= ЭтоСпособ_1;
	Элементы.ГруппаЛинейноеЗаполнение.Видимость 				= ЭтоСпособ_2;
	Элементы.ГруппаЗаполнениеПоПроизвольномуАлгоритму.Видимость = ЭтоСпособ_3;
                  		
	Если ЭтоСпособ_1 Тогда 		
		Элементы.ПанельВариантыНастроек.ТекущаяСтраница = Элементы.СтраницаКопироватьИзКурсовВалют;
	ИначеЕсли ЭтоСпособ_2 Тогда		
	  	Элементы.ПанельВариантыНастроек.ТекущаяСтраница = Элементы.СтраницаЗаполнитьИспользуяЛинейноеЗаполнение;
	ИначеЕсли ЭтоСпособ_3 Тогда 		
	  	Элементы.ПанельВариантыНастроек.ТекущаяСтраница = Элементы.СтраницаЗаполнитьПоПроизвольномуАлгоритму;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// Функция формирует структуру параметров, которые могут быть использованы в пользовательской функции
//
&НаСервере
Функция СформироватьСтруктуруПараметровПользовательскойФункции()
	
	СтруктураПараметров = Новый Структура;
	
	
	СтруктураПараметров.Вставить("Сценарий", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования")),
													Объект.Ссылка));
													
	СтруктураПараметров.Вставить("ВалютаЗаполнения", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("СправочникСсылка.Валюты")),
													ВалютаЗаполнения)); 
													
	СтруктураПараметров.Вставить("ПериодКурса", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("Дата")),
													ДатаНачала));
													
	СтруктураПараметров.Вставить("ДатаНачала", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("Дата")),
													ДатаНачала));
													
	СтруктураПараметров.Вставить("ДлинаИнтервала", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("Число")),
													ДлинаИнтервала));
													
	СтруктураПараметров.Вставить("НачальныйКурс", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("Число")),
													НачальныйКурс));
													
	СтруктураПараметров.Вставить("КоличествоШагов", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("Число")),
													КоличествоШагов));
													
	СтруктураПараметров.Вставить("Приращение", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("Число")),
													Приращение));
													
	СтруктураПараметров.Вставить("НомерШага", Новый Структура("ТипПараметра,ЗначениеПоУмолчанию",
													Новый ХранилищеЗначения(Новый ОписаниеТипов("Число")),
													1));
													
												
	Возврат СтруктураПараметров;
	
КонецФункции // СформироватьСтруктуруПараметровПользовательскойФункции()

// Процедура создает функцию с параметрами
//
&НаСервере
Функция СоздатьСтруктуруЗаполненияПользовательскойФункции()

	СтруктураЗаполнения = Новый Структура;
	
	СтруктураЗаполнения.Вставить("Наименование"	   , "Заполнение курсов сценария");
	СтруктураЗаполнения.Вставить("Контекст"		   , Перечисления.бит_КонтекстыВыполненияПользовательскихФункций.Произвольный);
	СтруктураЗаполнения.Вставить("КодПодпрограммы" , "Результат = НачальныйКурс + Приращение * (НомерШага-1);");
	СтруктураЗаполнения.Вставить("ПараметрыФункции", СформироватьСтруктуруПараметровПользовательскойФункции());
	
	Возврат СтруктураЗаполнения;

КонецФункции

// Процедура дополняет переданную ТаблицуКурсов за определенный период курсами, уже имеющимися в регистре
//
// Параметры:
//	ТаблицаКурсов - таблица значений - содержит курсы сценариев сформированные одним из способов заполнения
//
&НаСервере
Процедура ДополнитьИЗаписатьВРегистрТаблицуКурсов(ТаблицаКурсов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаКурсов.Период,
	|	ТаблицаКурсов.Сценарий,
	|	ТаблицаКурсов.Валюта,
	|	ТаблицаКурсов.Курс,
	|	ТаблицаКурсов.Кратность
	|ПОМЕСТИТЬ ТаблицаКурсов
	|ИЗ
	|	&ТаблицаКурсов КАК ТаблицаКурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_КурсыСценариевПланирования.Период,
	|	бит_КурсыСценариевПланирования.Сценарий,
	|	бит_КурсыСценариевПланирования.Валюта,
	|	бит_КурсыСценариевПланирования.Курс,
	|	бит_КурсыСценариевПланирования.Кратность
	|ПОМЕСТИТЬ КурсыСценариевПланирования
	|ИЗ
	|	РегистрСведений.бит_КурсыСценариевПланирования КАК бит_КурсыСценариевПланирования
	|ГДЕ
	|	бит_КурсыСценариевПланирования.Сценарий = &Сценарий
	|	И бит_КурсыСценариевПланирования.Валюта = &ВалютаЗаполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаКурсов.Период ЕСТЬ NULL 
	|			ТОГДА КурсыСценариевПланирования.Период
	|		ИНАЧЕ ТаблицаКурсов.Период
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаКурсов.Сценарий ЕСТЬ NULL 
	|			ТОГДА КурсыСценариевПланирования.Сценарий
	|		ИНАЧЕ ТаблицаКурсов.Сценарий
	|	КОНЕЦ КАК Сценарий,
	|	ВЫБОР
	|		КОГДА ТаблицаКурсов.Валюта ЕСТЬ NULL 
	|			ТОГДА КурсыСценариевПланирования.Валюта
	|		ИНАЧЕ ТаблицаКурсов.Валюта
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаКурсов.Период ЕСТЬ NULL 
	|			ТОГДА КурсыСценариевПланирования.Курс
	|		ИНАЧЕ ТаблицаКурсов.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ТаблицаКурсов.Период ЕСТЬ NULL 
	|			ТОГДА КурсыСценариевПланирования.Кратность
	|		ИНАЧЕ ТаблицаКурсов.Кратность
	|	КОНЕЦ КАК Кратность
	|ИЗ
	|	КурсыСценариевПланирования КАК КурсыСценариевПланирования
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсов
	|		ПО КурсыСценариевПланирования.Сценарий = ТаблицаКурсов.Сценарий
	|			И КурсыСценариевПланирования.Период = ТаблицаКурсов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КурсыСценариевПланирования
	|";
	
	Запрос.УстановитьПараметр("ТаблицаКурсов"	, ТаблицаКурсов);
	Запрос.УстановитьПараметр("Сценарий"	 	, Объект.Ссылка);
	Запрос.УстановитьПараметр("ВалютаЗаполнения", ВалютаЗаполнения);
	
	Результат 			= Запрос.Выполнить();
	ТаблицаВсехКурсов 	= Результат.Выгрузить();
	
	НаборКурсыСценария = РегистрыСведений.бит_КурсыСценариевПланирования.СоздатьНаборЗаписей();
	
	НаборКурсыСценария.Отбор.Сценарий.Установить(Объект.Ссылка);
	НаборКурсыСценария.Отбор.Валюта.Установить(ВалютаЗаполнения);
	
	НаборКурсыСценария.Загрузить(ТаблицаВсехКурсов);
	
	НаборКурсыСценария.Записать();
	
КонецПроцедуры // ДополнитьИЗаписатьВРегистрТаблицуКурсов()

// Процедура выполняет синтаксический контроль произвольного алгоритма описанного в пользовательской функции
//
// Параметры:
//  Отказ - Булево
//
// Возвращаемое значение:
//	Строка - Текст сообщения об ошибке
//
&НаСервере
Функция ВыполнитьПроизвольныйАлгоритм(Отказ)
	
	ТекстСообщения = "";
	ВыполнитьПользовательскуюФункциюРасчетаКурса(1, ДатаНачала, ТекстСообщения, Отказ);
	
	Возврат ТекстСообщения;
	
КонецФункции 

// Функция выполняет расчет курса сценария для конкретного периода и шага
//
// Параметры:
//	НомерШага   	- Число (Номер шага на котором производится расчет курса)
//	ПериодКурса 	- Дата  (Дата, на которую рассчитывается курс)
//  ТекстСообщения 	- Строка
//	Отказ 		  	- Булево
//
&НаСервере
Функция ВыполнитьПользовательскуюФункциюРасчетаКурса(НомерШага, ПериодКурса, ТекстСообщения, Отказ)
	
	Результат  = 0;
	Сценарий   = Объект.Ссылка;
	КодРасчета = ПользовательскаяФункция.КодПодпрограммы;
	
	Попытка
		Выполнить(КодРасчета);
		Если НЕ ТипЗнч(Результат) = Тип("Число") Тогда
			ТекстСообщения = Нстр("ru = 'Пользовательская функция должна возвращать числовое значение.'"); 			
			Отказ = Истина;
		КонецЕсли;
	Исключение
		ТекстСообщения = СтрШаблон(Нстр("ru = 'Ошибка при выполнении пользовательской функции: %1.'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
		Отказ = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура заполняет регистр "бит_КурсыСценариевПланирования" данными из регистра "КурсыВалют" за указанный период
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура КопироватьИзКурсовВалют()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсыВалют.Период,
	|	&Сценарий КАК Сценарий,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КурсыВалют.Валюта = &Валюта
	|АВТОУПОРЯДОЧИВАНИЕ
	|";
	
	Запрос.УстановитьПараметр("ДатаНачала"		, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, ДатаОкончания);
	Запрос.УстановитьПараметр("Валюта"			, ВалютаЗаполнения);
	Запрос.УстановитьПараметр("Сценарий"		, Объект.Ссылка);
	
	Результат 		= Запрос.Выполнить();
	ТаблицаКурсов 	= Результат.Выгрузить();
	
	ДополнитьИЗаписатьВРегистрТаблицуКурсов(ТаблицаКурсов);
	
КонецПроцедуры // КопироватьИзКурсовВалют()

// Процедура заполняет регистр "бит_КурсыСценариевПланирования" в соответствии с указанными параметрами
//
// Параметры:
//	Отказ - Булево
//
&НаСервере
Процедура ЗаполнитьИспользуяЛинейноеЗаполнение(Отказ = Ложь)
		
	ТаблицаКурсов = Новый ТаблицаЗначений;
	
	ТаблицаКурсов.Колонки.Добавить("Период"		, Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаКурсов.Колонки.Добавить("Сценарий"	, Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"));
	ТаблицаКурсов.Колонки.Добавить("Валюта"		, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсов.Колонки.Добавить("Курс"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаКурсов.Колонки.Добавить("Кратность"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Для Ном = 0 По КоличествоШагов - 1 Цикл
		
		Если Ном = 0 Тогда
			ПериодКурса = ДатаНачала;
		Иначе
			СдвигПериода = Ном * ДлинаИнтервала;
			ПериодКурса  = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачала, СдвигПериода, ПериодичностьЗаполнения);
		КонецЕсли;
		
		НовыйКурс = НачальныйКурс + Приращение * Ном;
		
		НоваяСтрокаКурса = ТаблицаКурсов.Добавить();
		
		НоваяСтрокаКурса.Период 	= ПериодКурса;
		НоваяСтрокаКурса.Сценарий 	= Объект.Ссылка;
		НоваяСтрокаКурса.Валюта		= ВалютаЗаполнения;
		НоваяСтрокаКурса.Курс 		= НовыйКурс;
		НоваяСтрокаКурса.Кратность  = 1;
		
	КонецЦикла;
	
	ДополнитьИЗаписатьВРегистрТаблицуКурсов(ТаблицаКурсов);
	
КонецПроцедуры // ЗаполнитьИспользуяЛинейноеЗаполнение()

// Процедура заполняет регистр "бит_КурсыСценариевПланирования" в соответствии с указанными настройками 
//	и произвольным выражением расчета курса
//
// Параметры:
//  ТекстСообщенияОбОшибке - Строка
//	Отказ 				   - Булево
//
&НаСервере
Процедура ЗаполнитьПоПроизвольномуАлгоритму(ТекстСообщенияОбОшибке, Отказ = Ложь)
		
	ТаблицаКурсов = Новый ТаблицаЗначений;
	
	ТаблицаКурсов.Колонки.Добавить("Период"		, Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаКурсов.Колонки.Добавить("Сценарий"	, Новый ОписаниеТипов("СправочникСсылка.СценарииПланирования"));
	ТаблицаКурсов.Колонки.Добавить("Валюта"		, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсов.Колонки.Добавить("Курс"		, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаКурсов.Колонки.Добавить("Кратность"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	Для Ном = 1 По КоличествоШагов Цикл
		
		Если Ном = 1 Тогда
			ПериодКурса = ДатаНачала;
		Иначе
			СдвигПериода = (Ном - 1) * ДлинаИнтервала;
			ПериодКурса  = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНачала, СдвигПериода, ПериодичностьЗаполнения);
		КонецЕсли;
		
		НовыйКурс = ВыполнитьПользовательскуюФункциюРасчетаКурса(Ном, ПериодКурса, ТекстСообщенияОбОшибке, Отказ);
		
		НоваяСтрокаКурса = ТаблицаКурсов.Добавить();
		
		НоваяСтрокаКурса.Период 	= ПериодКурса;
		НоваяСтрокаКурса.Сценарий 	= Объект.Ссылка;
		НоваяСтрокаКурса.Валюта 	= ВалютаЗаполнения;
		НоваяСтрокаКурса.Курс 		= НовыйКурс;
		НоваяСтрокаКурса.Кратность  = 1;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		ДополнитьИЗаписатьВРегистрТаблицуКурсов(ТаблицаКурсов);
	КонецЕсли;                                                 
	
КонецПроцедуры // ЗаполнитьПоПроизвольномуАлгоритму()

#КонецОбласти

