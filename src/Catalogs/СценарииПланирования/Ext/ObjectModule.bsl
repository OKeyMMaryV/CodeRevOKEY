#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция проверяет, есть ли движения по сценарию в регистре бит_ОборотыПоБюджетам
//
// Возвращаемое значение:
//   Булево - Истина, если движения есть, или Ложь - в противном случае.
//
Функция ЕстьДвиженияПоСценарию() Экспорт

	ЕстьДвижения = Ложь;
	
	Если ЭтоНовый() Тогда
		Возврат ЕстьДвижения;
	КонецЕсли;
	
	// Выясняем, есть ли движения по сценарию в регистре бит_ОборотыПоБюджетам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_ОборотыПоБюджетам.Сценарий
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|ГДЕ
	|	бит_ОборотыПоБюджетам.Сценарий = &Сценарий
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ТранзакцияАктивна() Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.бит_ОборотыПоБюджетам");
		ЭлементБлокировки.УстановитьЗначение("Сценарий", Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;	
		Блокировка.Заблокировать();
	КонецЕсли; 
	
	ЕстьДвижения = Не РезультатЗапроса.Пустой();
	
	Возврат ЕстьДвижения;
	
КонецФункции

// Функция определяет есть движения 
// по контрольным значениям для данного сценария в качестве контролируемого или нет.
// И используется ли данный сценарий для контроля заявок.
//
// Возвращаемое значение:
//   ЕстьДвиженя - Булево
//
Функция ЕстьДвиженияПоКонтролю()  Экспорт
	
	ЕстьДвижения = Ложь;
	
	Если ЭтоНовый() Тогда
		// Для нового элемента не проверяем наличие движений.
		Возврат ЕстьДвижения;
	КонецЕсли;
	
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий"	  , Ссылка);
	Запрос.УстановитьПараметр("ПустойСценарий", Справочники[ИмяСправочникаСценарии].ПустаяСсылка());
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_КонтрольныеЗначенияБюджетовОбороты.Сценарий,
	|	бит_КонтрольныеЗначенияБюджетовОбороты.СценарийКонтролируемый
	|ИЗ
	|	РегистрНакопления.бит_КонтрольныеЗначенияБюджетов.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			СценарийКонтролируемый = &Сценарий
	|				ИЛИ Сценарий = &Сценарий
	|					И СценарийКонтролируемый = &ПустойСценарий) КАК бит_КонтрольныеЗначенияБюджетовОбороты
	|ГДЕ
	|	(НЕ бит_КонтрольныеЗначенияБюджетовОбороты.Регистратор ССЫЛКА Документ.бит_УстановкаКонтрольныхЗначений)
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьДвижения     = Не РезультатЗапроса.Пустой();
	
	Возврат ЕстьДвижения;
	
КонецФункции // ЕстьДвиженияПоКонтролю()

Процедура СкопироватьКурсыСценария(Сценарий) Экспорт
	
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Ссылка",   Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыСценариевПланирования.Период КАК Период,
	|	КурсыСценариевПланирования.Валюта КАК Валюта,
	|	КурсыСценариевПланирования.Курс КАК Курс,
	|	КурсыСценариевПланирования.Кратность КАК Кратность,
	|	&Ссылка КАК Сценарий
	|ИЗ
	|	РегистрСведений.бит_КурсыСценариевПланирования КАК КурсыСценариевПланирования
	|ГДЕ
	|	КурсыСценариевПланирования.Сценарий = &Сценарий";
	
	РезультатЗапроса = Запрос.Выполнить();
	НаборЗаписей = РегистрыСведений.бит_КурсыСценариевПланирования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сценарий.Установить(Ссылка);
	НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());	
	НаборЗаписей.УстановитьАктивность(Истина);
	НаборЗаписей.Записать();
			
КонецПроцедуры // СкопироватьКурсыСценария()

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ЭтоНовый() Тогда
		Возврат;	
	КонецЕсли; 
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	

	КонтролируемыеРеквизиты = Новый Структура("Валюта, бит_Периодичность, ПродолжительностьИнтервала, ИспользоватьКурсыСценария");
	ИзммененныеРеквизиты	= бит_ОбщегоНазначения.ПолучитьСтруктуруИзмененныхРеквизитовОбъекта(ЭтотОбъект, 
								КонтролируемыеРеквизиты, Истина);
	// Проверяем, если есть движения по сценарию в регистре бит_ОборотыПоБюджетам 
	// и изменены обязательные реквизиты, то выводим сообщение об ошибке и запрещаем сохранение изменений.
	Если ЕстьДвиженияПоСценарию() И НЕ ИзммененныеРеквизиты = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'По сценарию есть движения в регистре ""Обороты по бюджетам"" и "
							+ "были изменены реквизиты, влияющие на формирование записей.'"); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , ,Отказ); 
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 	

	Если Не ЭтоГруппа
		И Не Отказ
		И ИспользоватьКурсыСценария Тогда
		
		бит_Бюджетирование.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка, Валюта);
		
		ВалютаУпр = Константы.бит_ВалютаУправленческогоУчета.Получить();
		Если ЗначениеЗаполнено(ВалютаУпр) Тогда
			бит_Бюджетирование.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка, ВалютаУпр);
		Иначе	
			ТекстСообщения = Нстр("ru = 'Не установлена валюта управленческого учета.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , ,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
		
	Если НЕ ЭтоГруппа Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли; 

		Если НЕ ЗначениеЗаполнено(бит_Периодичность) Тогда
			бит_Периодичность = Перечисления.бит_ПериодичностьПланирования.Месяц;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ПериодичностьКонтроля) Тогда
			ПериодичностьКонтроля = Перечисления.бит_ПериодичностьПланирования.Месяц;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ПродолжительностьИнтервала) Тогда
			ПродолжительностьИнтервала = 12;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
		Комментарий = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
