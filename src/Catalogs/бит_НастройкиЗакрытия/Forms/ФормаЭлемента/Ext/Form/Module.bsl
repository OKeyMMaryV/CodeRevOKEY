
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы.

&НаКлиенте
Перем мСписокРесурсов; // Хранит список ресурсов источника редактируемой строки.

&НаКлиенте
Перем мСписокПолей; // Хранит список полей источника редактируемой строки.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Значения по умолчанию для сохраняемых реквизитов формы.
	фОтображатьПанельДанныхСтроки = Ложь;
	
	ИзменитьОтображениеДанныхСтрокиСервер();
	
	ЗаполнитьКэшЗначений();
	
	// Список выбора для имен реквизитов документа закрытие счетов.
	СписокИменРеквизитов = Документы.бит_ЗакрытиеСчетов.ИменаРесурсов();
	Для каждого эл Из СписокИменРеквизитов Цикл
		
		Элементы.ИменаРесурсовИмяРеквизита.СписокВыбора.Добавить(эл.Значение); 
		
	КонецЦикла; 
	
	УстановитьСпискиВыбора();
	
	// Восстанавливаем настройки субконто закрыти и признаки учета в зависимости от счетов закрытия.
	ДоработатьТаблицуЗакрытие();
	
	// Условное оформление субконто
	бит_БухгалтерияСервер.УстановитьОформлениеСубконтоТаблицы(УсловноеОформление,
		"Закрытие", "СубконтоЗакрытия", "КоличествоДоступныхСубконтоЗакрытия",
		фКэшЗначений.МаксКоличествоСубконтоНастройки);														   
															   
	УстановитьУсловноеОформлениеПолейЗакрытие();
	УстановитьПараметрыВыбораДляСчетов();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ИзменитьОтображениеДанныхСтрокиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура("РегистрБухгалтерии");
	
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
	мСписокПолей    = Новый СписокЗначений;
	мСписокРесурсов = Новый СписокЗначений;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДоработатьТаблицуЗакрытие();
	
	// Изменение кода. Начало. 07.08.2014{{
	ЭтоНовый = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), Истина, Ложь);
	Элементы.ГруппаИнфоПлатежи.Видимость = ЭтоНовый;
	// Изменение кода. Конец. 07.08.2014}}	
	
КонецПроцедуры // ПослеЗаписиНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	// Предупреждение об очистке таб части
	Если Объект.Закрытие.Количество() > 0 И Объект.РегистрБухгалтерии <> мКэшРеквизитовФормы.РегистрБухгалтерии Тогда
	
		ТекстСообщения =  НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		
	    ОповещениеВопрос = Новый ОписаниеОповещения("ВопросРегистрБухгалтерииПриИзменении", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);

	Иначе
		
		// Проверка допустимости выбранного значения.
		Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) 
			И фКэшЗначений.ДоступныеОбъектыСистемы.НайтиПоЗначению(Объект.РегистрБухгалтерии) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбрано недопустимое значение регистра бухгелтерии %1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Объект.РегистрБухгалтерии);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект, "Объект.РегистрБухгалтерии");
			ИзвлечьИзКэша("РегистрБухгалтерии");
			Возврат;
			
		КонецЕсли; 
		
		РегистрБухгалтерииИзменение();	
		
		ДобавитьВКэш("РегистрБухгалтерии");

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы",фКэшЗначений.ДоступныеОбъектыСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент,УникальныйИдентификатор);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрытие

&НаКлиенте
Процедура ЗакрытиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Закрытие.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока.ИД = Строка( Новый УникальныйИдентификатор);
		
		Если НЕ Копирование Тогда
		
			ТекущаяСтрока.СчетЗакрытия = фКэшЗначений.ПараметрыРБ.ПустойСчет;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	УстановитьСпискиВыбораСпособаЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеВидЗакрытияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Закрытие.ТекущиеДанные;
	
	УстановитьСпискиВыбораСпособаЗаполнения();
	
	// Очистим недоступные способы заполнения субконто
	// для выбранного вида закрытия.
	
	флЭтоРаспределение = ?(ТекущаяСтрока.ВидЗакрытия = ПредопределенноеЗначение("Перечисление.бит_ВидыЗакрытия.Распределение"), Истина, Ложь);
	ИмяСпискаВыбора    = ?(флЭтоРаспределение, "фСписокСпособыЗаполнения", "фСписокСпособыЗаполненияПростой");	
	
	СписокВыбора = ЭтотОбъект[ИмяСпискаВыбора];
	Для Ном = 1 По фКэшЗначений.ПараметрыРБ.МинКоличествоСубконто Цикл
		
		Если СписокВыбора.НайтиПоЗначению(ТекущаяСтрока["СпособЗаполненияСубконто" + Ном]) = Неопределено Тогда
			ТекущаяСтрока["СпособЗаполненияСубконто" + Ном] = "";			 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если НЕ флЭтоРаспределение Тогда
		
	    // Очистим поля заполняющиеся для распределения.		
		Для Ном = 1 По фКэшЗначений.ПараметрыРБ.МинКоличествоСубконто Цикл
			
			ТекущаяСтрока["ПолеБазы"   + Ном] = "";
			ТекущаяСтрока["ПолеДанных" + Ном] = "";
			
		КонецЦикла;
	
	КонецЕсли; 
	
	ТекЕстьРаспределение = ОпределитьНаличиеРаспределения(Объект.Закрытие);
	
	Если ТекЕстьРаспределение <> фЕстьРаспределение Тогда
		
		фЕстьРаспределение = ТекЕстьРаспределение;
	    ВидЗакрытияИзменение();
	
	КонецЕсли; 
	
	УстановитьВидимостьОткрывающейсяСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеДанныеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Закрытие.ТекущиеДанные;
	ИсточникДанныеИзменение(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСчетЗакрытияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Закрытие.ТекущиеДанные;
	ИзменениеСчета(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСубконтоЗакрытияПриИзменении(Элемент)
	
	ТекущаяСтрока     = Элементы.Закрытие.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,"Закрытие",Элемент.Имя);		
	ИзменениеСубконтоЗакрытия(Элементы.Закрытие.ТекущиеДанные,ЗначениеСубконто);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСубконтоЗакрытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока     = Элементы.Закрытие.ТекущиеДанные;
	
	ЗначениеСубконто  = ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,"Закрытие",Элемент.Имя);
	
	Если НЕ ЗначениеЗаполнено(ЗначениеСубконто) Тогда
	   Элемент.ВыбиратьТип = Истина;
	Иначе	
	   Элемент.ВыбиратьТип = Ложь;
	КонецЕсли; 
	
	ОграничениеСубконто = ПолучитьОграничениеТипаДляСубконто(Элемент.Имя,ТекущаяСтрока.ПолучитьИдентификатор());
	
	Элемент.ОграничениеТипа = ОграничениеСубконто;
	
	НачалоВыбораСубконтоЗакрытия(Элемент,СтандартнаяОбработка,ТекущаяСтрока,ЗначениеСубконто);
	
КонецПроцедуры

// Функция получает ограничение типа для субконто. 
// 
// Параметры:
//  ИмяЭлемента - Строка.
//  ИдСтроки - Число
// 
&НаСервере
Функция ПолучитьОграничениеТипаДляСубконто(ИмяЭлемента, ИДСтроки)

	ТекущаяСтрока = Объект.Закрытие.НайтиПоИдентификатору(ИдСтроки);
	
	НомСтр = СтрЗаменить(ИмяЭлемента,"ЗакрытиеСубконтоЗакрытия","");
	Попытка		
		Индекс = Число(НомСтр);		
	Исключение		
		Индекс = 1;		
	КонецПопытки;
		
	Счет = ТекущаяСтрока.СчетЗакрытия;
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если СвСч.КоличествоСубконто >= Индекс Тогда	
        ОграничениеСубконто = СвСч["ВидСубконто" + Индекс + "ТипЗначения"];		
	Иначе		
		ОграничениеСубконто = Новый ОписаниеТипов();	
	КонецЕсли; 

	Возврат ОграничениеСубконто;
	
КонецФункции // УстановитьОграничениеТипаДляСубконто()

&НаКлиенте
Процедура ЗакрытиеРесурсОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Закрытие.ТекущиеДанные;	
		ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Закрытие","");
		ТекущиеДанные[ИмяРеквизита] = ВыбранноеЗначение;
	
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеРесурсОбработкаВыбора()

&НаКлиенте
Процедура ЗакрытиеРесурсАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.Закрытие.ТекущиеДанные;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Данные) И мСписокРесурсов.Количество() = 0 Тогда 	
		мСписокРесурсов = РесурсыИсточника(ТекущиеДанные.ПолучитьИдентификатор());	
	КонецЕсли;
	 
	Если мСписокРесурсов.Количество() > 0 Тогда
		
		Для каждого Эл Из мСписокРесурсов Цикл		
			Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеРесурсАвтоПодбор()

&НаКлиенте
Процедура ЗакрытиеПолеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Закрытие.ТекущиеДанные;	
		ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Закрытие","");
		ТекущиеДанные[ИмяРеквизита] = ВыбранноеЗначение;
	
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеПолеОбработкаВыбора()

&НаКлиенте
Процедура ЗакрытиеПолеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.Закрытие.ТекущиеДанные;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Данные) И мСписокПолей.Количество() = 0 Тогда 	
		мСписокПолей = ПоляИсточника(ТекущиеДанные.ПолучитьИдентификатор()); 	
	КонецЕсли;
	 
	Если мСписокПолей.Количество() > 0 Тогда
		
		Для каждого Эл Из мСписокПолей Цикл   		
			Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры // ЗакрытиеПолеАвтоПодбор()

&НаКлиенте
Процедура ЗакрытиеПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьВидимостьОткрывающейсяСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИменаРесурсов

&НаКлиенте
Процедура ИменаРесурсовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Получим количество суммовых ресурсов для текущего регистра бухгалтерии.
	КолВоРесурсов = Мин(фКэшЗначений.ПараметрыРБ.КоличествоРесурсов, фКэшЗначений.МаксКоличествоРесурсовНастройки);
	
	Если Объект.ИменаРесурсов.Количество() >= КолВоРесурсов Тогда
		
		// Предупредим пользователя что нельзя указывать соответствие 
		// имен ресурсов для большего кол-ва ресурсов
		// чем есть на самом деле у выбранного регистра бухгалтерии.
		ТекстСообщения =  НСтр("ru = 'Превышение количества суммовых ресурсов регистра бухгалтерии.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИменаРесурсовПослеУдаления(Элемент)
	
	УстановитьЗаголовкиКолонокЗакрытия();
	
КонецПроцедуры

&НаКлиенте
Процедура ИменаРесурсовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	УстановитьЗаголовкиКолонокЗакрытия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаИменаРесурсовПоУмолчанию(Команда)
	
	// Проверим наличие установленного соответствия имен ресурсов.
	Если Объект.ИменаРесурсов.Количество() > 0 Тогда
		
		ТекстВопроса =  НСтр("ru = 'Текущее соответствие имен будет перезаполнено значениями по умолчанию. Продолжить?'");
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ВопросКомандаИменаРесурсовПоУмолчанию", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
	Иначе
		
		ЗаполнитьПоУмолчаниюСоответствиеИменРесурсов();
		УстановитьЗаголовкиКолонокЗакрытия();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображениеПанелиДанныхСтроки(Команда)
	
	фОтображатьПанельДанныхСтроки = НЕ фОтображатьПанельДанныхСтроки;	
	ИзменитьОтображениеДанныхСтрокиСервер();
	
КонецПроцедуры // ИзменитьОтображениеПанелиДанныхСтроки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

// Процедура кэширут значения, необходимые для работы на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("МаксКоличествоРесурсовНастройки", Справочники.бит_НастройкиЗакрытия.ПолучитьМаксимальноеКоличествоРесурсовНастройки());
	фКэшЗначений.Вставить("МаксКоличествоСубконтоНастройки", Справочники.бит_НастройкиЗакрытия.ПолучитьМаксимальноеКоличествоСубконтоНастройки());
	фКэшЗначений.Вставить("ПараметрыРБ", бит_РегламентныеЗакрытия.ПолучитьПараметрыРегистраБухгалтерии(Объект.РегистрБухгалтерии));
	
	СписокОбъектов = бит_РегламентныеЗакрытия.СформироватьСписокРегистровБухгалтерииДляВыбора();
	фКэшЗначений.Вставить("ДоступныеОбъектыСистемы", СписокОбъектов);

КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейЗакрытие()

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеСчетЗакрытия");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Закрытие.СчетЗакрытия", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Закрытие.ВидЗакрытия", ВидСравненияКомпоновкиДанных.Равно, Перечисления.бит_ВидыЗакрытия.Простое);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	Для н = 1 По фКэшЗначений.МаксКоличествоСубконтоНастройки Цикл
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеПолеБазы"+н);
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеПолеДанных"+н);
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПолеБазы"+н);
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПолеДанных"+н);		
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Закрытие.ВидЗакрытия", ВидСравненияКомпоновкиДанных.НеРавно, 
		Перечисления.бит_ВидыЗакрытия.Распределение);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 	   ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", 		   НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	Если фКэшЗначений.ПараметрыРБ.ЕстьПодразделение Тогда				
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗакрытиеПодразделениеЗакрытия");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПодразделениеЗакрытия");
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Закрытие.ПодразделениеЗакрытияДоступно", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 	   ЦветаСтиля.бит_ТекстНедоступнойНадписи);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", 		   НСтр("ru = '<не требуется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	КонецЕсли; 														   
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	

КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Функция ИменаРесурсов()

	РезСтруктура = бит_ОбщегоНазначения.ПрочитатьXMLВТаблицу(
						Справочники.бит_НастройкиЗакрытия.ПолучитьМакет("ИменаРесурсовРегистра").ПолучитьТекст());
	ТабДанные    = РезСтруктура.Данные;

	Возврат ТабДанные;
	
КонецФункции

// Процедура заполняет список имен ресурсов для данного регистра бухгалтерии.
// 
&НаСервере
Процедура ЗаполнитьСписокВыбораИмяРесурса()
	
	ТабДанные = ИменаРесурсов();
	
	СтрОтбор = Новый Структура("ИмяРегистраБухгалтерии", Объект.РегистрБухгалтерии.ИмяОбъекта);
	МассивСтрок = ТабДанные.НайтиСтроки(СтрОтбор);
	
	Элементы.ИменаРесурсовИмяРесурса.СписокВыбора.Очистить();
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Элементы.ИменаРесурсовИмяРесурса.СписокВыбора.Добавить(СтрокаТаблицы.ИмяРесурса);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьСписокВыбораИмяРесурса()

// Процедура устанавливает списки выбора для полей табличного поля Закрытие. 
// 
&НаСервере
Процедура УстановитьСпискиВыбора()
	
	// Список выбора для имен ресурсов регистра
	ЗаполнитьСписокВыбораИмяРесурса();
	
	// Списки выбора полей базы и данных
	СписокСубконто = Справочники.бит_НастройкиЗакрытия.СформироватьСписокСубконто(фКэшЗначений.ПараметрыРБ.МинКоличествоСубконто
	                                                                               , фКэшЗначений.ПараметрыРБ.ЕстьПодразделение);
																				   
																				   
	КоличествоПолейНастройки = фКэшЗначений.ПараметрыРБ.МаксКоличествоСубконто + ?(фКэшЗначений.ПараметрыРБ.ЕстьПодразделение, 1, 0);																			   
																				   
	Для н = 1 По КоличествоПолейНастройки Цикл
		
		// Изменение кода. Начало. 27.08.2014{{
		Элементы["ЗакрытиеПолеДанных"+н].СписокВыбора.Очистить();
		Элементы["ЗакрытиеПолеБазы"+н].СписокВыбора.Очистить();
		
		Элементы["ПолеДанных"+н].СписокВыбора.Очистить();
		Элементы["ПолеБазы"+н].СписокВыбора.Очистить();
		
		Для каждого эл Из СписокСубконто Цикл
			
			Элементы["ЗакрытиеПолеДанных"+н].СписокВыбора.Добавить(эл.Значение, эл.Представление);
			Элементы["ЗакрытиеПолеБазы"+н].СписокВыбора.Добавить(эл.Значение, эл.Представление);
			
			Элементы["ПолеДанных"+н].СписокВыбора.Добавить(эл.Значение, эл.Представление);
			Элементы["ПолеБазы"+н].СписокВыбора.Добавить(эл.Значение, эл.Представление);
			
		КонецЦикла; // СписокСубконто
		// Изменение кода. Конец. 27.08.2014}}
		
	КонецЦикла; // Количество субконто настройки 
	
	
	// Заполнение списков для выбора способа заполнения субконто.
	Справочники.бит_НастройкиЗакрытия.СформироватьСписокСпособовЗаполненияСубконто(фСписокСпособыЗаполнения
																					, фСписокСпособыЗаполненияПростой
																					, фКэшЗначений.ПараметрыРБ.МинКоличествоСубконто
																					, фКэшЗначений.ПараметрыРБ.ЕстьПодразделение);
	
КонецПроцедуры // УстановитьСпискиВыбора()

// Процедура Заполняет соответствие имен ресурсов
// именам суммовых реквизитов документа "бит_ЗакрытиеСчетов" 
// из макета справочника "ИменаРесурсов".
// 
&НаСервере
Процедура ЗаполнитьПоУмолчаниюСоответствиеИменРесурсов()
	
	Объект.ИменаРесурсов.Очистить();
	
	// Получим таблицу с данными имен ресурсов.
	ТабДанные = ИменаРесурсов();
	
	// Добавим соответствия имен ресурсов для текущего регистра бухгалтерии.
	СтрОтбор = Новый Структура("ИмяРегистраБухгалтерии", Объект.РегистрБухгалтерии.ИмяОбъекта);
	МассивСтрок = ТабДанные.НайтиСтроки(СтрОтбор);
	
	Для Каждого ТекИмена Из МассивСтрок Цикл
		
		НовСтрока = Объект.ИменаРесурсов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекИмена);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоУмолчаниюСоответствиеИменРесурсов()

// Процедура осуществляет управление видимостью/доступностью элементов управления формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	// Получим метаданные регистра бухгалтерии.
	ПараметрыРБ = бит_РегламентныеЗакрытия.ПолучитьПараметрыРегистраБухгалтерии(Объект.РегистрБухгалтерии);
	
	ИмяРегистраБухгалтерии = ПараметрыРБ.ИмяРегистра;
	
	// Управление видимостью колонок табличного поля "Закрытие".
	Элементы.ЗакрытиеИмяПоказателяЦФО.Видимость      = ПараметрыРБ.ЭтоРегистрБюдж;
	Элементы.ЗакрытиеИмяПоказателяВидУчета.Видимость = ПараметрыРБ.ЭтоРегистрНУ;
	// Изменение кода. Начало. 28.08.2014{{
	Элементы.ИмяПоказателяЦФО.Видимость      = ПараметрыРБ.ЭтоРегистрБюдж;
	Элементы.ИмяПоказателяВидУчета.Видимость = ПараметрыРБ.ЭтоРегистрНУ;
	// Изменение кода. Конец. 28.08.2014}}
	
	КоличествоПолейНастройки = фКэшЗначений.ПараметрыРБ.МинКоличествоСубконто + ?(фКэшЗначений.ПараметрыРБ.ЕстьПодразделение, 1, 0);																			   	
	
	Для Ном = 1 По фКэшЗначений.МаксКоличествоСубконтоНастройки Цикл
		
		флОтобразитьКолонку = ? (Ном <= ПараметрыРБ.МинКоличествоСубконто, Истина, Ложь);
		
		Элементы["ЗакрытиеСубконтоЗакрытия" + Ном].Видимость = флОтобразитьКолонку;
		Элементы["ЗакрытиеСпособЗаполненияСубконто" + Ном].Видимость = флОтобразитьКолонку;
		// Изменение кода. Начало. 28.08.2014{{
		Если Ном<>2 Тогда
		
			Элементы["СубконтоЗакрытия" + Ном].Видимость = флОтобразитьКолонку;
		
		КонецЕсли; 
		Элементы["СпособЗаполненияСубконто" + Ном].Видимость = флОтобразитьКолонку;
		// Изменение кода. Конец. 28.08.2014}}
		
		флОтобразитьКолонку = ? (Ном <= КоличествоПолейНастройки, Истина, Ложь);		
		
		Элементы["ЗакрытиеПолеБазы" 		+ Ном].Видимость = флОтобразитьКолонку;
		Элементы["ЗакрытиеПолеДанных" 	    + Ном].Видимость = флОтобразитьКолонку;
		
		// Изменение кода. Начало. 28.08.2014{{
		Элементы["ПолеБазы" 		+ Ном].Видимость = флОтобразитьКолонку;
		Элементы["ПолеДанных" 	    + Ном].Видимость = флОтобразитьКолонку;
		// Изменение кода. Конец. 28.08.2014}}
		
	КонецЦикла;
	
	Элементы.ЗакрытиеИмяПоказателяКоличество.Видимость 	  = ПараметрыРБ.ЕстьКоличественныйУчет;
	Элементы.ЗакрытиеИмяПоказателяВалюта.Видимость 		  = ПараметрыРБ.ЕстьВалютныйУчет;
	Элементы.ЗакрытиеИмяПоказателяВалютнаяСумма.Видимость = ПараметрыРБ.ЕстьВалютныйУчет;
	// Изменение кода. Начало. 28.08.2014{{
	Элементы.ИмяПоказателяКоличество.Видимость 	  = ПараметрыРБ.ЕстьКоличественныйУчет;
	Элементы.ИмяПоказателяВалюта.Видимость 		  = ПараметрыРБ.ЕстьВалютныйУчет;
	Элементы.ИмяПоказателяВалютнаяСумма.Видимость = ПараметрыРБ.ЕстьВалютныйУчет;
	// Изменение кода. Конец. 28.08.2014}}
	
	// Установим заголовки колонок закрытия.
	УстановитьЗаголовкиКолонокЗакрытия();
	
	// Если в табличной части только простое закрытие можно скрыть колонки, имеющие смысл только для распределения.
	фЕстьРаспределение = ОпределитьНаличиеРаспределения(Объект.Закрытие);
    УстановитьВидимостьКолонокРаспределения(фЕстьРаспределение);	
	
	// Если не выбран регистр табличное поле недоступно.
	Элементы.Закрытие.Доступность = ?(ЗначениеЗаполнено(Объект.РегистрБухгалтерии), Истина, Ложь);
	
	// Изменение кода. Начало. 07.08.2014{{
	ЭтоНовый = ?(НЕ ЗначениеЗаполнено(Объект.Ссылка), Истина, Ложь);
	Элементы.ГруппаИнфоПлатежи.Видимость = ЭтоНовый;
	// Изменение кода. Конец. 07.08.2014}}	
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьНаличиеРаспределения(ТабЧастьЗакрытие)

	СтрОтбор = Новый Структура("ВидЗакрытия", ПредопределенноеЗначение("Перечисление.бит_ВидыЗакрытия.Распределение"));
	МассивСтрок = ТабЧастьЗакрытие.НайтиСтроки(СтрОтбор);
	
	флЕстьРаспределение = ?(МассивСтрок.Количество()>0, Истина, Ложь);

	Возврат флЕстьРаспределение;
	
КонецФункции // ОпределитьНаличиеРаспределения()

// Процедура управляет видимостью полей, характерных только для распределения. 
// 
// Параметры:
//  ЕстьЗакрытие - Булево.
// 
&НаСервере
Процедура УстановитьВидимостьКолонокРаспределения(ЕстьРаспределение)
	
	Элементы.ЗакрытиеБаза.Видимость 			= ЕстьРаспределение;
	Элементы.ЗакрытиеГруппаПоляДанных.Видимость = ЕстьРаспределение;
	Элементы.ЗакрытиеПоляБазы.Видимость 		= ЕстьРаспределение;
	// Изменение кода. Начало. 28.08.2014{{
	Элементы.База.Видимость 					= ЕстьРаспределение;
	Элементы.СтраницаДанныеСтрокиОсновныеСведения.Видимость = ЕстьРаспределение;
	// Изменение кода. Конец. 28.08.2014}}
	
КонецПроцедуры // УстановитьВидимостьКолонокРаспределения()

// Процедура устанавливает заголовки колонок табличного поля "Закрытие".
// 
&НаСервере
Процедура УстановитьЗаголовкиКолонокЗакрытия()
	
	МаксКоличествоРесурсовНастройки = Справочники.бит_НастройкиЗакрытия.ПолучитьМаксимальноеКоличествоРесурсовНастройки();	
	
	// Получим количество суммовых ресурсов для текущего регистра бухгалтерии.
	КолВоРесурсов = Мин(Объект.ИменаРесурсов.Количество(), МаксКоличествоРесурсовНастройки);
	
	Для Ном = 1 По МаксКоличествоРесурсовНастройки Цикл
		
		флОтобразитьКолонку = ?(Ном <= КолВоРесурсов, Истина, Ложь);
		
		Элементы["ЗакрытиеИмяПоказателяСумма" + Ном].Видимость = флОтобразитьКолонку;
		Элементы["ИмяПоказателяСумма" + Ном].Видимость = флОтобразитьКолонку;
		
		Если флОтобразитьКолонку Тогда
			
			СтрОтбор = Новый Структура("ИмяРеквизита","Сумма"+Ном);
			МассивСтрок = Объект.ИменаРесурсов.НайтиСтроки(СтрОтбор);
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				Первая = МассивСтрок[0];
                Если МассивСтрок.Количество() = 1 Тогда
				    ИмяРесурса = Первая.ИмяРесурса;
                Иначе
                    ИмяРесурса = СтрЗаменить(Первая.ИмяРесурса, "Дт", "");
                КонецЕсли;
                ТекстЗаголовка = СтрШаблон(Нстр("ru = 'Имя %1 (Сумма%2)'"), ИмяРесурса, Ном);
			Иначе
				ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Имя Сумма %1'"), Ном);				
			КонецЕсли; 
			
			Элементы["ЗакрытиеИмяПоказателяСумма" + Ном].Заголовок = ТекстЗаголовка;
			Элементы["ИмяПоказателяСумма" + Ном].Заголовок = ТекстЗаголовка;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ЗакрытиеПодразделениеЗакрытия.Видимость = фКэшЗначений.ПараметрыРБ.ЕстьПодразделение;
	Элементы.ЗакрытиеСпособЗаполненияПодразделения.Видимость = фКэшЗначений.ПараметрыРБ.ЕстьПодразделение;	
	Элементы.ПодразделениеЗакрытия.Видимость = фКэшЗначений.ПараметрыРБ.ЕстьПодразделение;
	Элементы.СпособЗаполненияПодразделения.Видимость = фКэшЗначений.ПараметрыРБ.ЕстьПодразделение;	
	
КонецПроцедуры // УстановитьЗаголовкиКолонокЗакрытия()

// Процедура обрабатывает изменение регистра бухгалтерии. 
// 
&НаСервере
Процедура РегистрБухгалтерииИзменение()
	
	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		
		фКэшЗначений.ПараметрыРБ = бит_РегламентныеЗакрытия.ПолучитьПараметрыРегистраБухгалтерии(Объект.РегистрБухгалтерии);
		
	    УстановитьСпискиВыбора();		
		
		ЗаполнитьПоУмолчаниюСоответствиеИменРесурсов();
		
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // РегистрБухгалтерииИзменение()

// Процедура обрабатывает изменение вида закрытия.
// 
&НаСервере
Процедура ВидЗакрытияИзменение()

	УстановитьВидимость();

КонецПроцедуры // ВидЗакрытияИзменение()

&НаСервере
Процедура ИзменениеСчета(Идентификатор)
	
	ТекущаяСтрока = Объект.Закрытие.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущаяСтрока = Неопределено Тогда		
		Возврат;		
	КонецЕсли; 
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетЗакрытия, фКэшЗначений.МаксКоличествоСубконтоНастройки);									  
	
	бит_БухгалтерияКлиентСервер.ПривестиЗначенияСубконто(ТекущаяСтрока,НастройкиСубконто,"СубконтоЗакрытия");
    
    СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущаяСтрока.СчетЗакрытия);
    
	ТекущаяСтрока.КоличествоДоступныхСубконтоЗакрытия = СвСч.КоличествоСубконто;
	
	Если фКэшЗначений.ПараметрыРБ.ЕстьПодразделение Тогда
                
		ТекущаяСтрока.ПодразделениеЗакрытияДоступно = СвСч.УчетПоПодразделениям;
		 
		Если НЕ ТекущаяСтрока.ПодразделениеЗакрытияДоступно Тогда		 
		    ТекущаяСтрока.ПодразделениеЗакрытия = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();		 
		КонецЕсли; 
		 
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеСчетаВТабличномПолеМУ()

// Процедура заполняет дополнительные поля в таблице Закрытие
// , используемые для установки условного оформления. 
// 
&НаСервере
Процедура ДоработатьТаблицуЗакрытие()
	
	Для каждого СтрокаТаблицы Из Объект.Закрытие Цикл
        
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗакрытия);
        
		СтрокаТаблицы.КоличествоДоступныхСубконтоЗакрытия = СвСч.КоличествоСубконто;
        
		Если фКэшЗначений.ПараметрыРБ.ЕстьКоличественныйУчет Тогда			
			СтрокаТаблицы.КоличественныйУчет = СвСч.Количественный;			
        КонецЕсли; 
        
		Если фКэшЗначений.ПараметрыРБ.ЕстьВалютныйУчет Тогда			
			СтрокаТаблицы.ВалютныйУчет = СвСч.Валютный;			
        КонецЕсли;
        
		Если фКэшЗначений.ПараметрыРБ.ЕстьПодразделение Тогда			
			СтрокаТаблицы.ПодразделениеЗакрытияДоступно = СвСч.УчетПоПодразделениям;					
		КонецЕсли; 
		
	КонецЦикла; 											   
	
КонецПроцедуры // ДоработатьТаблицуЗакрытие()

// Обрабатывает изменение поля Данные в строке табличной части. 
// 
// Параметры:
//  ИдСтроки - Число.
// 
&НаСервере
Процедура ИсточникДанныеИзменение(ИдСтроки)
	
	ТекущаяСтрока = Объект.Закрытие.НайтиПоИдентификатору(ИдСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Данные) Тогда
	
		 СписокРесурсов = Справочники.бит_ИсточникиДанных.ПолучитьСписокПолейИсточника(ТекущаяСтрока.Данные, "Ресурс");
		 
		 // Автозаполнение ресурсов
		 Для каждого СтрокаИмена Из Объект.ИменаРесурсов Цикл
		 
		 	 Если НЕ СписокРесурсов.НайтиПоЗначению(СтрокаИмена.ИмяРесурса) = Неопределено Тогда
			 
			 	 ТекущаяСтрока["ИмяПоказателя"+СтрокаИмена.ИмяРеквизита] = СтрокаИмена.ИмяРесурса;
			 
			 КонецЕсли; 
		 
		 КонецЦикла; 
		 
	КонецЕсли; 
	
КонецПроцедуры // ИсточникДанныеИзменение()

&НаСервере
Функция РесурсыИсточника(ИдСтроки)

	ТекущаяСтрока = Объект.Закрытие.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.Данные) Тогда
		
		СписокРесурсов = Справочники.бит_ИсточникиДанных.ПолучитьСписокПолейИсточника(ТекущаяСтрока.Данные, "Ресурс");
		
	Иначе
		
		СписокРесурсов = Новый СписокЗначений;
		
	КонецЕсли; 
	
	Возврат СписокРесурсов;
	
КонецФункции

&НаСервере
Функция ПоляИсточника(ИдСтроки)

	ТекущаяСтрока = Объект.Закрытие.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.Данные) Тогда
		
		СписокПолей = Справочники.бит_ИсточникиДанных.ПолучитьСписокПолейИсточника(ТекущаяСтрока.Данные, "Поле");		 
		
	Иначе
		
		СписокПолей = Новый СписокЗначений;
		
	КонецЕсли; 
	
	Возврат СписокПолей;
	
КонецФункции

// Процедура изменяет отображение панели данных строки.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИзменитьОтображениеДанныхСтрокиСервер()

	Элементы.ЗакрытиеИзменитьОтображениеПанелиДанныхСтроки.Пометка = фОтображатьПанельДанныхСтроки;
	Элементы.ГруппаДанныеСтроки.Видимость		   				   = фОтображатьПанельДанныхСтроки;

КонецПроцедуры // ИзменитьОтображениеДанныхСтрокиСервер()

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ЗакрытиеСчетЗакрытия);
	МассивЭлементов.Добавить(Элементы.ЗакрытиеСчетЗакрытия);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура устанавливает списки выбора для полей "СпособЗаполненияСубконто".
// 
&НаКлиенте
Процедура УстановитьСпискиВыбораСпособаЗаполнения()
	
	ТекущаяСтрока = Элементы.Закрытие.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		флЭтоРаспределение = ?(ТекущаяСтрока.ВидЗакрытия = ПредопределенноеЗначение("Перечисление.бит_ВидыЗакрытия.Распределение"), Истина, Ложь);
		ИмяСпискаВыбора = ?(флЭтоРаспределение, "фСписокСпособыЗаполнения", "фСписокСпособыЗаполненияПростой");
		
		КоличествоПолейНастройки = фКэшЗначений.МаксКоличествоСубконтоНастройки;
		
		// Изменение кода. Начало. 28.08.2014{{
		Для н = 1 По КоличествоПолейНастройки Цикл
			
			Элементы["ЗакрытиеСпособЗаполненияСубконто"+н].СписокВыбора.Очистить();
			Элементы["СпособЗаполненияСубконто"+н].СписокВыбора.Очистить();
			
			Для каждого эл Из ЭтотОбъект[ИмяСпискаВыбора] Цикл
				
				Элементы["ЗакрытиеСпособЗаполненияСубконто"+н].СписокВыбора.Добавить(эл.Значение, эл.Представление);
				Элементы["СпособЗаполненияСубконто"+н].СписокВыбора.Добавить(эл.Значение, эл.Представление);
				
			КонецЦикла; // Список выбора
			
		КонецЦикла; // Количество субконто настройки
		
		Если фКэшЗначений.ПараметрыРБ.ЕстьПодразделение Тогда
		
			Для каждого эл Из ЭтотОбъект[ИмяСпискаВыбора] Цикл
				
				Элементы.ЗакрытиеСпособЗаполненияПодразделения.СписокВыбора.Добавить(эл.Значение, эл.Представление);
				Элементы.СпособЗаполненияПодразделения.СписокВыбора.Добавить(эл.Значение, эл.Представление);
				
			КонецЦикла; // Список выбора
		
		КонецЕсли; 
		// Изменение кода. Конец. 28.08.2014}}
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСпискиВыбораСпособаЗаполнения()

&НаКлиенте
Функция ПолучитьЗначениеСубконтоТабПоле(ТекущаяСтрока,ИмяТабличногоПоля,ИмяЭлемента)

	ЗначениеСубконто = Неопределено;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИмяРеквизита      = СтрЗаменить(ИмяЭлемента,ИмяТабличногоПоля,"");
		ЗначениеСубконто  = ТекущаяСтрока[ИмяРеквизита];
		
	КонецЕсли; 

	Возврат ЗначениеСубконто;
	
КонецФункции // ПолучитьЗначениеСубконтоТабПоле()

&НаКлиенте
Процедура ИзменениеСубконтоЗакрытия(Контейнер,ЗначениеСубконто)
	
	СтруктураСубконто = бит_БухгалтерияКлиентСервер.ПодготовитьСтруктуруСубконто(Контейнер,"СубконтоЗакрытия",фКэшЗначений.МаксКоличествоСубконтоНастройки);
	бит_БухгалтерияСервер.ОбработатьИзменениеСубконто(СтруктураСубконто,"СубконтоЗакрытия",ЗначениеСубконто,фКэшЗначений.МаксКоличествоСубконтоНастройки);
	бит_БухгалтерияКлиентСервер.ЗаполнитьСубконтоПоСтруктуре(СтруктураСубконто,Контейнер,"СубконтоЗакрытия","",фКэшЗначений.МаксКоличествоСубконтоНастройки);																   
	
КонецПроцедуры // ИзменениеСубконтоКлиентМУ()

&НаКлиенте
Процедура НачалоВыбораСубконтоЗакрытия(Элемент,СтандартнаяОбработка,Контейнер,ЗначениеСубконто)
	
	СтруктураПараметров = бит_БухгалтерияКлиентСервер.ПодготовитьПараметрыВыбораСубконто(Контейнер
	                                                                                      ,Объект
	                                                                                      ,"СубконтоЗакрытия"
																						  ,ЗначениеСубконто
																						  ,фКэшЗначений.МаксКоличествоСубконтоНастройки);	
	
		
  // Установим параметры выбора субконто.
  бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтруктураПараметров);
  
		
КонецПроцедуры // НачалоВыбораСубконто()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросКомандаИменаРесурсовПоУмолчанию(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюСоответствиеИменРесурсов();
		УстановитьЗаголовкиКолонокЗакрытия();
	КонецЕсли;

КонецПроцедуры // ВопросКомандаИменаРесурсовПоУмолчанию()

// Обработка оповещения вопроса пользователю. 
// 
// Параметры:
//  Ответ - Строка.
// 
&НаКлиенте
Процедура ВопросРегистрБухгалтерииПриИзменении(Ответ, ДопПараметры) Экспорт

	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			
	    ИзвлечьИзКэша("РегистрБухгалтерии");
		Возврат;
		
	Иначе
		
		Объект.Закрытие.Очистить();
		
		// Проверка допустимости выбранного значения.
		Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) 
			И фКэшЗначений.ДоступныеОбъектыСистемы.НайтиПоЗначению(Объект.РегистрБухгалтерии) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбрано недопустимое значение регистра бухгелтерии %1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Объект.РегистрБухгалтерии);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Объект, "Объект.РегистрБухгалтерии");
			ИзвлечьИзКэша("РегистрБухгалтерии");
			Возврат;
			
		КонецЕсли; 
		
		РегистрБухгалтерииИзменение();	
		
		ДобавитьВКэш("РегистрБухгалтерии");

	КонецЕсли;

КонецПроцедуры // ВопросРегистрБухгалтерииПриИзменении()

// Процедура управляет видимостью полей выплывающей строки. 
// 
&НаКлиенте
Процедура УстановитьВидимостьОткрывающейсяСтроки()

	
	ТекущаяСтрока = Элементы.Закрытие.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	флЭтоРаспределение = ?(ТекущаяСтрока.ВидЗакрытия = ПредопределенноеЗначение("Перечисление.бит_ВидыЗакрытия.Распределение"), Истина, Ложь);

	Элементы.База.Доступность = флЭтоРаспределение;
	
	ном=0;
	Для ном=ном+1 По 4 Цикл
	
		Элементы["ПолеДанных"+ном].Доступность 	= флЭтоРаспределение;
		Элементы["ПолеБазы"+ном].Доступность 	= флЭтоРаспределение;
	
	КонецЦикла; 
	
	НастройкиСубконто = бит_БухгалтерияСервер.ПолучитьНастройкиСубконто(ТекущаяСтрока.СчетЗакрытия, фКэшЗначений.МаксКоличествоСубконтоНастройки);									  
	
	Ном = 1;
	Для каждого ЭлементНастроек Из НастройкиСубконто Цикл
		
		ТекИмяЭлемента = "СубконтоЗакрытия"+Ном;
		
		Если ЭлементНастроек.Пометка Тогда
		
			Элементы[ТекИмяЭлемента].Доступность = Истина;
		
		Иначе 
		
			Элементы[ТекИмяЭлемента].Доступность = Ложь;
			
		КонецЕсли;	
			
		Ном = Ном + 1;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьОткрывающейсяСтроки()

#КонецОбласти       
