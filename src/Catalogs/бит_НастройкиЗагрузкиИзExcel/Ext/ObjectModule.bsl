#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мЖирныйШрифт Экспорт; // Хранит жирный шрифт для выделения типа произвольный код.
Перем мЦветНеДоступно; // Хранит цвет недоступных ячеек дерева данных.
Перем мСтруктураСсылочныхТипов Экспорт; // Хранит структуру имен - ссылочный типов.
Перем мСтруктураПростыхТипов; // Хранит структуру имен - простейших типов.
Перем мСтруктураРеквизитПоиска; // Хранит структуру имен - реквизитов поиска по умолчанию.
Перем мСоотИменТиповДляПолейБезСопоставления Экспорт; // Хранит соответствие имен - ссылочный типов для полей без сопоставления.
Перем мСоотТипВидОбъекта; // Хранит соответствие тип - вид объекта.
Перем мКартинкиТипов; // Хранит соответствие картинок для типов.

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ)
    
    Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;
	КонецЕсли;
	
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства);
	
    // Если это установка/снятие пометки удаления, тогда.
    Если Ссылка.ПометкаУдаления <> ПометкаУдаления Тогда
        Возврат;
    КонецЕсли;
    
    // Проверим принадлежность элемента/группы к предопределеннм группам справочника.
    ПроверитьПринадлежностьНастройкиКПредопределеннымГруппам(Отказ);
    
    Если Не Отказ Тогда
        
        // Проверим правильность заполнения настройки загрузки.
        ПроверитьПравильностьЗаполненияНастройкиЗагрузки(Отказ);
        
        // Если это основная настройка для объекта, тогда.
        Если Не Отказ И Не ЭтоГруппа И ОсновнаяНастройка Тогда
        
            Запрос = Новый Запрос;
            Запрос.УстановитьПараметр("ТекОбъект", Объект);
            Запрос.УстановитьПараметр("ТекСсылка", Ссылка);
            
            Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                |    бит_НастройкиЗагрузкиИзExcel.Ссылка
                |ИЗ
                |    Справочник.бит_НастройкиЗагрузкиИзExcel КАК бит_НастройкиЗагрузкиИзExcel
                |ГДЕ
                |    бит_НастройкиЗагрузкиИзExcel.Ссылка <> &ТекСсылка
                |    И бит_НастройкиЗагрузкиИзExcel.Объект = &ТекОбъект
                |    И бит_НастройкиЗагрузкиИзExcel.ОсновнаяНастройка";
                
            Выборка = Запрос.Выполнить().Выбрать();
            
			Пока Выборка.Следующий() Цикл
				
                ТекСпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
                ТекСпрОбъект.ОсновнаяНастройка 	   = Ложь;
				ТекСпрОбъект.ОбменДанными.Загрузка = Истина;
				
				бит_ОбщегоНазначения.ЗаписатьСправочник(ТекСпрОбъект,, "Ошибки");
				
            КонецЦикла;
                
        КонецЕсли;
        
    КонецЕсли; // Если Не Отказ Тогда       
    
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает картинку соответствующая типу.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
// 
// Возвращаемое значение:
//  Картинка - Картинка.
// 
Функция ПолучитьКартинкуПоТипу(ТекущаяСтрока, ЭтоВыборТипа = Ложь) Экспорт
    
    Картинка = Неопределено;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Картинка;
	КонецЕсли;
	
    Если Не ЭтоВыборТипа Тогда
        ТипОбъекта = ТекущаяСтрока.Тип;
	Иначе
		ТипОбъекта = ТекущаяСтрока;
	КонецЕсли;
	
	Картинка = мКартинкиТипов.Получить(ТипОбъекта);
	Картинка = ?(Картинка = Неопределено, БиблиотекаКартинок.бит_од_Реквизит, Картинка);
        
    Возврат Картинка;
    
КонецФункции // ПолучитьКартинкуПоТипу()

// Функция возвращает список значений для выбора.
// 
// Параметры:
//  ТаблицаРеквизитов - ТаблицаЗначений, Массив.
//  ЭтоМассив         - Булево.
// 
// Возвращаемое значение:
//  Список - СписокЗначений.
// 
Функция ПолучитьСписокЗначенийДляВыбора(ТаблицаРеквизитов, ЭтоМассив = Ложь, Картинка = Неопределено) Экспорт
    
    Список = Новый СписокЗначений;
    
    Если Не ЭтоМассив Тогда
        
        Для Каждого ТекСтрока Из ТаблицаРеквизитов Цикл
            Список.Добавить(ТекСтрока.ИмяРеквизита, ТекСтрока.Представление,, Картинка);
        КонецЦикла;
        
    Иначе
        Для Каждого ТекЭлемент Из ТаблицаРеквизитов Цикл
            Список.Добавить(ТекЭлемент,,, ?(ТипЗнч(Картинка) = Тип("Картинка"), Картинка, ПолучитьКартинкуПоТипу(ТекЭлемент, Истина)));
        КонецЦикла;
    КонецЕсли;
	
    Возврат Список;
    
КонецФункции // ПолучитьСписокЗначенийДляВыбора()


// Функция проверяет доступность флажка "ТолькоДляПустых"
// для изменения.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//  ФлажокДоступен - Булево
// 
Функция Удалить_ФлажокСтрокиДоступен(СтрокаДерева) Экспорт
	
	ФлажокДоступен = Истина;
	
	Если СтрокаДерева.ВерхнийУровень
		Или СтрокаДерева.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм Тогда
		ФлажокДоступен = Ложь;
	КонецЕсли; 
	
	Возврат ФлажокДоступен;
	
КонецФункции // Удалить_ФлажокСтрокиДоступен()

// Процедура устанавливает флажки по дереву. Рекурсия.
// 
// Параметры:
//  СтрокаРодитель - СтрокаДереваЗначений.
//  ИмяРеквизита   - Строка.
//  Режим          - Число.
// 
Процедура Удалить_УстановитьФлажкиПоДереву(СтрокаРодитель, ИмяРеквизита, Режим) Экспорт

	Для Каждого СтрокаДерева Из СтрокаРодитель.Строки Цикл
		
		Если Удалить_ФлажокСтрокиДоступен(СтрокаДерева) Тогда
			
			Если Режим = 0 Тогда
				СтрокаДерева[ИмяРеквизита] = Ложь;
			ИначеЕсли Режим = 1 Тогда
				СтрокаДерева[ИмяРеквизита] = Истина;
			ИначеЕсли Режим = 2 Тогда
				СтрокаДерева[ИмяРеквизита] = Не СтрокаДерева[ИмяРеквизита];
			КонецЕсли; 
			
		КонецЕсли;
			
	    Удалить_УстановитьФлажкиПоДереву(СтрокаДерева, ИмяРеквизита, Режим);
		
	КонецЦикла; 

КонецПроцедуры // УстановитьФлажкиПоДереву()

// Обрабатывает вывод строки табличного поля.
// Установим доступность ячеек и раскрасим строки, ячейки.
// 
// Параметры:
//  ОформлениеСтроки - ОформлениеСтроки.
//  ДанныеСтроки     - СтрокаТабличнойЧасти.
// 
Процедура ПриВыводеСтрокиПравилЗагрузки(ОформлениеСтроки, ДанныеСтроки) Экспорт

    Если ДанныеСтроки = Неопределено Тогда
        Возврат
    КонецЕсли;    
    
    СсылкаТипы = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel;
    ТекущийТип = ДанныеСтроки.Тип;
    
    ЭтоПроизвольныйАлгоритм = (ТекущийТип = СсылкаТипы.ПроизвольныйАлгоритм);
	ЭтоРеквизитРодитель = Ложь;
	Если ДанныеСтроки.ИмяРеквизита = "Родитель" Тогда
		Если ПринадлежитЭлементу(Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники) Тогда
			ЭтоРеквизитРодитель = (Метаданные.Справочники[ИмяОбъекта].Иерархический);
	
		КонецЕсли;
	КонецЕсли;
	ЯчейкиТабличногоПоля    = ОформлениеСтроки.Ячейки;
	
	ЭтоВерхнийУровень = ДанныеСтроки.ВерхнийУровень;
	
	Если ЭтоВерхнийУровень Тогда
		
		ЯчейкиТабличногоПоля.ВидДанных.Шрифт = мЖирныйШрифт;
		
		// Ячейки не доступны для редактирования.
		ОформлениеСтроки.ЦветФона = мЦветНеДоступно;
		
		ЯчейкиТабличногоПоля.ИмяВФайле.ТолькоПросмотр 	   = Истина;
		ЯчейкиТабличногоПоля.ИмяРеквизита.ТолькоПросмотр   = Истина;
		ЯчейкиТабличногоПоля.Тип.ТолькоПросмотр 		   = Истина;
		ЯчейкиТабличногоПоля.РеквизитПоиска.ТолькоПросмотр = Истина;
		
	Иначе
		
		// Скроем текст ячейки "Объект".
		ЯчейкиТабличногоПоля.ВидДанных.ОтображатьТекст = Ложь;
		                        
		ЯчейкиТабличногоПоля.ВидДанных.ЦветФона    = мЦветНеДоступно;
		ЯчейкиТабличногоПоля.ИмяВФайле.ЦветФона    = Новый Цвет(204,255,204);
		ЯчейкиТабличногоПоля.ИмяРеквизита.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
		
	КонецЕсли;
	
	СтрокаРодитель 		   = ДанныеСтроки.Родитель;
	РодительСтрокиРодитель = ?(СтрокаРодитель = Неопределено, Неопределено, СтрокаРодитель.Родитель);
	
	ЯчейкиТабличногоПоля.ВидДанных.ТолькоПросмотр = СтрокаРодитель = Неопределено
													Или (ЭтоВерхнийУровень И (СтрокаРодитель.ВидДанных = "Шапка" 
														 Или СтрокаРодитель.ВидДанных = "Табличные части"))
													Или (РодительСтрокиРодитель = Неопределено
														 Или РодительСтрокиРодитель.ВидДанных = "Табличные части");
	
	Если ЭтоПроизвольныйАлгоритм Тогда
		ЯчейкиТабличногоПоля.Тип.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
	Если ДанныеСтроки.ИмяРеквизита = "Без_Сопоставления" Тогда
		ЯчейкиТабличногоПоля.ИмяВФайле.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
	ЯчейкиТабличногоПоля.Тип.ОтметкаНезаполненного = Не ЭтоВерхнийУровень 
													 И Не ЗначениеЗаполнено(ДанныеСтроки.Тип);
	
	ЭтоПростейщиеТипы = (ТекущийТип = СсылкаТипы.Число
						 Или ТекущийТип = СсылкаТипы.Строка
						 Или ТекущийТип = СсылкаТипы.Дата
						 Или ТекущийТип = СсылкаТипы.Булево);
	
	ЯчейкиТабличногоПоля.ИмяОбъекта.ТолькоПросмотр = ЭтоВерхнийУровень Или ЭтоПростейщиеТипы;
	
	ЯчейкиТабличногоПоля.ИмяОбъекта.ОтметкаНезаполненного = Не ЭтоВерхнийУровень
															И Не ЯчейкиТабличногоПоля.ИмяОбъекта.ТолькоПросмотр 
															И Не ЗначениеЗаполнено(ДанныеСтроки.ИмяОбъекта);
	
	ЯчейкиТабличногоПоля.РеквизитПоиска.ТолькоПросмотр = (ЭтоВерхнийУровень Или ЭтоПростейщиеТипы
														  Или ТекущийТип = СсылкаТипы.ПеречислениеСсылка
														  Или (ЭтоПроизвольныйАлгоритм И НЕ ЭтоРеквизитРодитель));
	
	ЯчейкиТабличногоПоля.РеквизитПоиска.ОтметкаНезаполненного = Не ЭтоВерхнийУровень
																И Не ЯчейкиТабличногоПоля.РеквизитПоиска.ТолькоПросмотр 
																И Не ЗначениеЗаполнено(ДанныеСтроки.РеквизитПоиска);                                                                 
                                                                 
	ЗначенияПоУмолчаниюДоступны = Не Удалить_ФлажокСтрокиДоступен(ДанныеСтроки);
	
    ЯчейкиТабличногоПоля.ПоУмолчанию.ТолькоПросмотр     = ЗначенияПоУмолчаниюДоступны;
    ЯчейкиТабличногоПоля.ТолькоДляПустых.ТолькоПросмотр = ЗначенияПоУмолчаниюДоступны;
    
КонецПроцедуры // ПриВыводеСтрокиПравилЗагрузки()

// Функция возвращает реквизиты объекта для выбора.
// 
// Параметры:
//  ВидДанных - Строка, "Шапка, ИмяТабЧасти - объекта".
// 
// Возвращаемое значение:
//  ТаблицаРеквизитов - ТаблицаЗначений.
// 
Функция ПолучитьРеквизитыОбъектаДляВыбора(ВидДанных = "") Экспорт
    
    СтруктураСвойстОбъекта = Новый Структура;
    СтруктураСвойстОбъекта.Вставить("ВидОбъекта", ВидОбъекта);
    СтруктураСвойстОбъекта.Вставить("ИмяОбъекта", ИмяОбъекта);
	СтруктураСвойстОбъекта.Вставить("ВидДанных" , ВидДанных);
    
    ТаблицаРеквизитов = бит_ОбменДанными_Excel.ПолучитьРеквизитыОбъектаЗагрузки(мСтруктураСсылочныхТипов, СтруктураСвойстОбъекта);
    
    Возврат ТаблицаРеквизитов;
    
КонецФункции // ПолучитьРеквизитыОбъектаДляВыбора()

// Функция возвращает таблицу объектов составного реквизита для выбора.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
// 
// Возвращаемое значение:
//  ТаблицаОбъектов - ТаблицаЗначений.
// 
Функция ПолучитьТаблицуОбъектовСоставногоРеквизитаДляВыбора(ТекущаяСтрока) Экспорт
    
    ТаблицаОбъектов = Новый ТаблицаЗначений;
    ТаблицаОбъектов.Колонки.Добавить("ИмяРеквизита");
    ТаблицаОбъектов.Колонки.Добавить("Представление");
    
    Если ТекущаяСтрока = Неопределено Тогда
        Возврат ТаблицаОбъектов;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ТекущаяСтрока.ИмяРеквизита) Тогда
        ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Объекты не получены для выбора. Неуказано имя реквизита.'"));
        Возврат ТаблицаОбъектов;
    КонецЕсли;
    
	СимволыДляПоиска = ВидОбъекта;
	ИмяРеквизита	 = ТекущаяСтрока.ИмяРеквизита;
	ТипыРеквизита 	 = Новый Массив;
	
	Попытка
		
		// Если это регистр сведений, тогда
		Если СимволыДляПоиска = "РегистрСведений" Тогда
			
			// Получим реквизит регистра сведений.
			ТекРеквизит = бит_ОбменДанными_Excel.ПолучитьЭлементДанныхРегистраСведедний(ИмяОбъекта, ИмяРеквизита);
			
			Если Не ТекРеквизит = Неопределено Тогда
				ТипыРеквизита = ТекРеквизит.Тип.Типы();
			КонецЕсли;
				
		Иначе
			// Иначе, это не регистр сведений.
			
			РезСтруктура = мСтруктураСсылочныхТипов[СимволыДляПоиска];
			МетаОбъекта  = Метаданные[РезСтруктура.ИмяКоллекции][ИмяОбъекта];
			
			// Если это дополнительные реквизиты, тогда
			Если ИмяРеквизита = "Родитель" Тогда
				// ТипыРеквизита.Добавить(ТипЗначенияОбъекта.Получить());
				ИмяТипаОбъекта = бит_ОбменДанными_Excel.ПолучитьИмяТипаОбъекта(ИмяОбъекта, ВидОбъекта);
				ТипыРеквизита.Добавить(Тип(ИмяТипаОбъекта));
				
			ИначеЕсли ИмяРеквизита = "Владелец" Тогда
				
				Для Каждого ТекВладелец Из МетаОбъекта.Владельцы Цикл
					
					// Получим тек. вид объекта.
					ТекВидОбъекта = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоМетаданным(ТекВладелец);
					
					// Получим имя типа объекта.
					ПервыйТипТипов = Тип(бит_ОбменДанными_Excel.ПолучитьИмяТипаОбъекта(ТекВладелец.Имя, ТекВидОбъекта));
					
					ТипыРеквизита.Добавить(ПервыйТипТипов);
					
				КонецЦикла;
				
			Иначе
				
				Если ТекущаяСтрока.ВидДанных = "Шапка" Тогда
					ТипыРеквизита = МетаОбъекта.Реквизиты[ИмяРеквизита].Тип.Типы();
				ИначеЕсли Лев(ТекущаяСтрока.ВидДанных, 9) = "Движения_" Тогда 
					ТаблицаРеквизитов = ПолучитьРеквизитыОбъектаДляВыбора(ТекущаяСтрока.ВидДанных);
					ОписаниеРеквизита = ТаблицаРеквизитов.Найти(ИмяРеквизита, "ИмяРеквизита");
					Если НЕ ОписаниеРеквизита = Неопределено Тогда
						Если ТипЗнч(ОписаниеРеквизита.Реквизит) = Тип("ОбъектМетаданных") Тогда
							ТипыРеквизита = ОписаниеРеквизита.Реквизит.Тип.Типы();
						Иначе
							ТипыРеквизита = ОписаниеРеквизита.Реквизит.Типы();
						КонецЕсли;
					Иначе
						ТипыРеквизита = Новый Массив;
					КонецЕсли;
				Иначе
					ТипыРеквизита = МетаОбъекта.ТабличныеЧасти[ТекущаяСтрока.ВидДанных].Реквизиты[ИмяРеквизита].Тип.Типы();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; // Если СимволыДляПоиска = "РегистрСведений" Тогда.
		
		СимволыТипаСтрокиДляОтбора = бит_ОбменДанными_Excel.ПолучитьВидОбъектаИзСоответствия(мСоотТипВидОбъекта
																							,ТекущаяСтрока.Тип);
		
		Для Каждого ТекТип Из ТипыРеквизита Цикл
			
			// Получим вид объекта реквизита.
			ВидОбъектаРеквизита = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоТипу(ТекТип);
			
			Если Не ВидОбъектаРеквизита = СимволыТипаСтрокиДляОтбора Тогда
				Продолжить;
			КонецЕсли;
			
			РезСтруктура = мСтруктураСсылочныхТипов[ВидОбъектаРеквизита];
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТекТип);
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			
			СтруктураОбъекта = бит_ОбменДанными_Excel.ПолучитьИмяОбъектаПоОписаниюТипов(ОписаниеТипов, 
																						РезСтруктура.ИмяКоллекции,
																						РезСтруктура.НачалоИмениТипа + "Ссылка");
			Если Не СтруктураОбъекта = Неопределено Тогда																			
																						
				НовСтрока = ТаблицаОбъектов.Добавить();
				НовСтрока.ИмяРеквизита  = СтруктураОбъекта.Имя;
				НовСтрока.Представление = СтруктураОбъекта.Синоним;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Объекты не получены для выбора. Неправильно указано имя реквизита.'"));
	КонецПопытки;
	
	Возврат ТаблицаОбъектов;
	
КонецФункции // ПолучитьТаблицуОбъектовСоставногоРеквизитаДляВыбора()

// Функция возвращает массив типов реквизита для выбора.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
//  Сообщать      - Булево.
// 
// Возвращаемое значение:
//  МассивТипов - Массив.
// 
Функция ПолучитьМассивТиповРеквизитаДляВыбора(ТекущаяСтрока, Сообщать = Истина) Экспорт
    
    МассивТипов = Новый Массив;
    
    Если ТекущаяСтрока = Неопределено Тогда
        Возврат МассивТипов;
    КонецЕсли;
	
	ИмяРеквизита = ТекущаяСтрока.ИмяРеквизита;
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Типы не получены для выбора. Неуказано имя реквизита.'"));
		КонецЕсли;
			
        Возврат МассивТипов;
    КонецЕсли;
	
	СимволыДляПоиска = ВидОбъекта;
	ТекРеквизит		 = Неопределено;
	
	Попытка
		
		// Если это регистр сведений, тогда
		Если СимволыДляПоиска = "РегистрСведений" Тогда
			
			Если ИмяРеквизита = "Период" Тогда
				МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Дата);
				
			ИначеЕсли Не ИмяРеквизита = "Без_Сопоставления" Тогда	
				
				// Получим реквизит регистра сведений.
				ТекРеквизит = бит_ОбменДанными_Excel.ПолучитьЭлементДанныхРегистраСведедний(ИмяОбъекта, ИмяРеквизита);
				
			КонецЕсли;
			
		Иначе
			// Иначе, это не регистр сведений.
			
			РезСтруктура = мСтруктураСсылочныхТипов[СимволыДляПоиска];
			МетаОбъекта  = Метаданные[РезСтруктура.ИмяКоллекции][ИмяОбъекта];
			
			// Если это справочник, тогда
			Если СимволыДляПоиска = "Справочник" Тогда
				
				Если ИмяРеквизита = "Код" Тогда
					
					Если МетаОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
						МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Число);
					Иначе
						МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Строка);
					КонецЕсли;
					
				ИначеЕсли ИмяРеквизита = "Наименование" Тогда
					МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Строка);
					
				ИначеЕсли ИмяРеквизита = "Родитель" Тогда
					РезСтруктура = мСтруктураСсылочныхТипов[СимволыДляПоиска];
					МассивТипов.Добавить(РезСтруктура.Тип);
					
				ИначеЕсли ИмяРеквизита = "Владелец" Тогда
					
					Для Каждого ТекВладелец Из МетаОбъекта.Владельцы Цикл
						
						// Получим тек. вид объекта.
						ТекВидОбъекта = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоМетаданным(ТекВладелец);
						
						// Получим имя типа объекта.
						ПервыйТипТипов = бит_ОбменДанными_Excel.ПолучитьИмяТипаОбъекта(ТекВладелец.Имя, ТекВидОбъекта);
						
						// Получим вид объекта реквизита.
						ВидОбъектаРеквизита = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоТипу(Тип(ПервыйТипТипов));
						
						РезСтруктура = мСтруктураСсылочныхТипов[ВидОбъектаРеквизита];
						МассивТипов.Добавить(РезСтруктура.Тип);
						
					КонецЦикла;
					
				ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда
					МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Булево);
					
				КонецЕсли;
				
				// Иначе если это документ, тогда
			ИначеЕсли СимволыДляПоиска = "Документ" Тогда
				
				Если ИмяРеквизита = "Дата" Тогда
					МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Дата);
					
				ИначеЕсли ИмяРеквизита = "Номер" Тогда
					
					Если МетаОбъекта.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда
						МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Число);
					Иначе
						МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Строка);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяРеквизита = "ПометкаУдаления" Тогда
				МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Булево);
			КонецЕсли;
			
			Если Не ИмяРеквизита = "Без_Сопоставления"
				И МассивТипов.Количество() = 0 Тогда
				
				Если ТекущаяСтрока.ВидДанных = "Шапка" Тогда
					ТекРеквизит = МетаОбъекта.Реквизиты[ИмяРеквизита];
				ИначеЕсли Лев(ТекущаяСтрока.ВидДанных, 9) = "Движения_" Тогда 
					ТаблицаРеквизитов = ПолучитьРеквизитыОбъектаДляВыбора(ТекущаяСтрока.ВидДанных);
					ОписаниеРеквизита = ТаблицаРеквизитов.Найти(ИмяРеквизита, "ИмяРеквизита");
					Если НЕ ОписаниеРеквизита = Неопределено Тогда
						ТекРеквизит = ОписаниеРеквизита.Реквизит;
					Иначе
						ТекРеквизит = Неопределено;
					КонецЕсли;
				Иначе
					ТекРеквизит = МетаОбъекта.ТабличныеЧасти[ТекущаяСтрока.ВидДанных].Реквизиты[ИмяРеквизита];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; // Если СимволыДляПоиска = "РегистрСведений" Тогда.
		
		Если ИмяРеквизита = "Без_Сопоставления" Тогда
			
			ПеречислениеТипы = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel;
			
			Для Каждого ТекТип Из ПеречислениеТипы Цикл
				МассивТипов.Добавить(ТекТип);
			КонецЦикла;
			
			Возврат МассивТипов;
		КонецЕсли;
		
		Если Не ТекРеквизит = Неопределено Тогда
			
			Если ТипЗнч(ТекРеквизит) = Тип("ОписаниеТипов") Тогда
				ТипыРеквизита = ТекРеквизит.Типы();
			Иначе
				ТипыРеквизита = ТекРеквизит.Тип.Типы();
			КонецЕсли;
		
			Для Каждого ТекТип Из ТипыРеквизита Цикл
				
				// Получим вид объекта реквизита.
				ВидОбъектаРеквизита = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоТипу(ТекТип);
				
				// Если это ссылочный тип, тогда
				Если мСтруктураСсылочныхТипов.Свойство(ВидОбъектаРеквизита) Тогда
					
					РезСтруктура = мСтруктураСсылочныхТипов[ВидОбъектаРеквизита];
					МассивТипов.Добавить(РезСтруктура.Тип);
					
				Иначе
					
					МассивТипов.Добавить(?(НЕ мСтруктураПростыхТипов.Получить(ТекТип)=Неопределено, 
										   мСтруктураПростыхТипов[ТекТип].Тип, мСтруктураПростыхТипов[Тип("Строка")].Тип));
										   
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли; // Если Не ТекРеквизит = Неопределено Тогда
		
		МассивТипов.Добавить(Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм);
		
	Исключение
		
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Типы не получены для выбора. Неправильно указано имя реквизита.'"));
		КонецЕсли;
		
	КонецПопытки;
	
    Возврат МассивТипов;
    
КонецФункции // ПолучитьМассивТиповРеквизитаДляВыбора()

// Функция возвращает реквизиты объекта текущей строки 
// табличного поля ПравилаЗагрузки для выбора.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
//  Сообщать      - Булево.
// 
// Возвращаемое значение:
//  ТаблицаРеквизитов - ТаблицаЗначений.
// 
Функция ПолучитьРеквизитыОбъектаТекущейСтрокиДляВыбора(ТекущаяСтрока, Сообщать = Истина) Экспорт
    
    ТаблицаРеквизитов = бит_ОбменДанными_Excel.ПолучитьРеквизитыОбъектаТекущейСтроки(мСтруктураСсылочныхТипов, ТекущаяСтрока, Сообщать);
    
    Возврат ТаблицаРеквизитов;
    
КонецФункции // ПолучитьРеквизитыОбъектаТекущейСтрокиДляВыбора()

// Процедура заполняет значения правила загрузки реквизита.
// 
// Параметры:
//  ТекущаяСтрока     - СтрокаТабЧасти.
//  ИмяРеквизита      - Строка. 
//  ТаблицаРеквизитов - ТаблицаЗначений.
// 
Процедура ЗаполнитьЗначенияПравилаЗагрузкиРеквизита(ТекущаяСтрока, ИмяРеквизита = Неопределено, 
                                                    ТаблицаРеквизитов = Неопределено, ЭтоИзменениеТипа = Ложь, 
													ПоРеквизитам = Ложь, ЭтоИзменениеИмениОбъекта = Ложь) Экспорт
    
    Если ТекущаяСтрока = Неопределено Тогда
        Возврат
    КонецЕсли;
	
    Если (ЭтоИзменениеТипа Или ЭтоИзменениеИмениОбъекта)
        И ТекущаяСтрока.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм Тогда
        
		// ТекущаяСтрока.ИмяВФайле = "";
        
        Если ТипЗнч(ТекущаяСтрока.ИмяОбъекта) <> Тип("СправочникСсылка.бит_ПользовательскиеФункции") Тогда
            ТекущаяСтрока.ИмяОбъекта = Справочники.бит_ПользовательскиеФункции.ПустаяСсылка();
        КонецЕсли;
        
        ТекущаяСтрока.РеквизитПоиска  = ""; 
        ТекущаяСтрока.ПоУмолчанию     = "";
        
        Если ИмяРеквизита = Неопределено Тогда
			// ТекущаяСтрока.КлючевоеПоле    = Ложь;
            ТекущаяСтрока.ТолькоДляПустых = Ложь;
        КонецЕсли;
        
    Иначе
		
		СимволыДляПроверки = ВидОбъекта;
		
        Если ИмяРеквизита = Неопределено Тогда
			
            ИмяРеквизита = ТекущаяСтрока.ИмяРеквизита;
            
            // Это очистка имени реквизита, очистим зависимые поля.
            Если ПустаяСтрока(ИмяРеквизита) Тогда
                
                ТекущаяСтрока.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПустаяСсылка();
                ТекущаяСтрока.ИмяОбъекта      = "";
                ТекущаяСтрока.РеквизитПоиска  = "";
                ТекущаяСтрока.ПоУмолчанию     = "";
                ТекущаяСтрока.КлючевоеПоле    = Ложь;
                ТекущаяСтрока.ТолькоДляПустых = Ложь;
				
            КонецЕсли;
            
        КонецЕсли;
        
        Если ТаблицаРеквизитов = Неопределено Тогда
            // Получим реквизиты объекта.
            ТаблицаРеквизитов = ПолучитьРеквизитыОбъектаДляВыбора(ТекущаяСтрока.ВидДанных);
        КонецЕсли;
        
        МассивДляПоиска = Новый Массив;
        
        // Сформируем массив с именами реквизитов в верхнем регистре.
        // Для осуществления поиска.
        Для Каждого ТекСтрока Из ТаблицаРеквизитов Цикл
            МассивДляПоиска.Добавить(ВРег(ТекСтрока.ИмяРеквизита));
        КонецЦикла;
		
		ЭтоСопоставление = (Не ТекущаяСтрока.ВидДанных = "Шапка" И Найти(ВРег(ИмяРеквизита), 
							ВРег(ТекущаяСтрока.ВидДанных + "_")) > 0);
		
		Если ЭтоСопоставление Тогда
			
			// Проверим наличие реквизита загружаемого объекта.
			ИндексСтроки = МассивДляПоиска.Найти(ВРег(ИмяРеквизита));
			
			Если ИндексСтроки = Неопределено Тогда
				ИмяРеквизитаДляПоиска = ВРег(СтрЗаменить(ВРег(ИмяРеквизита), ВРег(ТекущаяСтрока.ВидДанных + "_"), ""));
				ИндексСтроки 		  = МассивДляПоиска.Найти(ИмяРеквизитаДляПоиска);
			КонецЕсли;
			
		Иначе
			// Проверим наличие реквизита загружаемого объекта.
			ИндексСтроки = МассивДляПоиска.Найти(ВРег(ИмяРеквизита));
		КонецЕсли;
		
        // Если есть реквизит с именем колонки, тогда
        // заполним имя реквизита.
        Если ИндексСтроки <> Неопределено Тогда
            
            // Проверим наличие реквизита загружаемого объекта.
            НайденныйРеквизит = ТаблицаРеквизитов.Получить(ИндексСтроки);
            
            ИмяРеквизита = НайденныйРеквизит.ИмяРеквизита;
			
			// Заполняем имя реквизита.
            ТекущаяСтрока.ИмяРеквизита = ИмяРеквизита;
			
            НайденныйРеквизит = НайденныйРеквизит.Реквизит;
            
            // Если это не дополнительный реквизит, тогда.
			Если НайденныйРеквизит <> Неопределено Тогда
				
				Если ТипЗнч(НайденныйРеквизит) = Тип("ОписаниеТипов") Тогда
					ТипыРеквизита = НайденныйРеквизит.Типы();
				Иначе	
					ТипыРеквизита = НайденныйРеквизит.Тип.Типы();
				КонецЕсли;
				
				Если ТипыРеквизита.Количество() > 1 Тогда
					
					Если Не ЗначениеЗаполнено(ТекущаяСтрока.ИмяОбъекта)
						И Не ЗначениеЗаполнено(ТекущаяСтрока.РеквизитПоиска) Тогда
						
						Если Не ПоРеквизитам И Не ЗначениеЗаполнено(ТекущаяСтрока.ИмяВФайле) Тогда
							ДопТекст = ?(ТекущаяСтрока.ВидДанных = "Шапка", "", ТекущаяСтрока.ВидДанных + "_");
							ТекущаяСтрока.ИмяВФайле = ДопТекст + ИмяРеквизита;
						КонецЕсли;
						
						Если Не (ЭтоИзменениеТипа Или ЭтоИзменениеИмениОбъекта) Тогда
							ТекущаяСтрока.Тип = "";
						КонецЕсли;
						
						Возврат;
					КонецЕсли;
					
					// Если мСтруктураПростыхТипов.Свойство(Лев(ТекущаяСтрока.Тип, 3)) Тогда
					// 	ТекстТипа = ТекущаяСтрока.Тип;
					// Иначе
						
						Если Не ЭтоИзменениеИмениОбъекта Тогда
							
							Если Не ЭтоИзменениеТипа Тогда
								ТекущаяСтрока.Тип = "";
							КонецЕсли;
							
							ТекущаяСтрока.ИмяОбъекта      = "";
							ТекущаяСтрока.РеквизитПоиска  = "";
							ТекущаяСтрока.ПоУмолчанию     = Неопределено;
							ТекущаяСтрока.ТолькоДляПустых = Ложь;
							
							Возврат;
						КонецЕсли;
						
						ТекстТипа = СтрЗаменить(ТекущаяСтрока.Тип, " ", "") + "." + ТекущаяСтрока.ИмяОбъекта;
						
					// КонецЕсли;
					
					ПервыйТипТипов = Тип(ТекстТипа);
					
				Иначе
					ПервыйТипТипов = ТипыРеквизита[0];
				КонецЕсли;
				
				// Получим вид объекта реквизита.
				ВидОбъектаРеквизита = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоТипу(ПервыйТипТипов);
				
            Иначе
                // Иначе - это дополнительный реквизит.
				
				// Если это регистр сведений, тогда
				Если СимволыДляПроверки = "РегистрСведений" Тогда
					
					Если ИмяРеквизита = "Период" Тогда
						ПервыйТипТипов = Тип("Дата");
					КонецЕсли;
					
				Иначе
				    // Иначе, если это не регистр сведений.
					
					Если ИмяРеквизита = "Код" Тогда
						
						РезСтруктура = мСтруктураСсылочныхТипов[ВидОбъекта];
						МетаОбъекта  = Метаданные[РезСтруктура.ИмяКоллекции][ИмяОбъекта];
						
						Если МетаОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
							ПервыйТипТипов = Тип("Число");
						Иначе
							ПервыйТипТипов = Тип("Строка");
						КонецЕсли;
						
					ИначеЕсли ИмяРеквизита = "Наименование" Тогда
						ПервыйТипТипов = Тип("Строка");
						
					ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда
						ПервыйТипТипов = Тип("Булево");
						
					ИначеЕсли ИмяРеквизита = "Родитель" Тогда
						ПервыйТипТипов = Тип("СправочникСсылка." + ИмяОбъекта);
						
					ИначеЕсли ИмяРеквизита = "Владелец" Тогда
						
						РезСтруктура = мСтруктураСсылочныхТипов[ВидОбъекта];
						МетаОбъекта  = Метаданные[РезСтруктура.ИмяКоллекции][ИмяОбъекта];
						
						ТекИмяОбъекта     = ТекущаяСтрока.ИмяОбъекта;
						ИмяОбъектаУказано = ЗначениеЗаполнено(ТекИмяОбъекта);
						
						Для Каждого ТекВладелец Из МетаОбъекта.Владельцы Цикл
							
							// Получим тек. вид объекта.
							ТекВидОбъекта = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоМетаданным(ТекВладелец);
							
							// Получим имя типа объекта.
							ПервыйТипТипов = Тип(бит_ОбменДанными_Excel.ПолучитьИмяТипаОбъекта(ТекВладелец.Имя, ТекВидОбъекта));
							
							Если Не ЭтоИзменениеИмениОбъекта 
								Или (ЭтоИзменениеИмениОбъекта 
								И ИмяОбъектаУказано 
								И ТекВладелец.Имя = ТекИмяОбъекта) Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
					ИначеЕсли ИмяРеквизита = "Дата" Тогда
						ПервыйТипТипов = Тип("Дата");
						
					ИначеЕсли ИмяРеквизита = "Номер" Тогда
						
						РезСтруктура = мСтруктураСсылочныхТипов[ВидОбъекта];
						МетаОбъекта  = Метаданные[РезСтруктура.ИмяКоллекции][ИмяОбъекта];
						
						Если МетаОбъекта.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда
							ПервыйТипТипов = Тип("Число");
						Иначе
							ПервыйТипТипов = Тип("Строка");
						КонецЕсли;
						
					ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
						ПервыйТипТипов = Тип("Булево");  
						
					КонецЕсли; // Если ИмяРеквизита = "Код" Тогда
					
				КонецЕсли; // Если СимволыДляПроверки = "РегистрСведений" Тогда.
				
				Если ИмяРеквизита = "Без_Сопоставления" Тогда
					
					Если ЭтоИзменениеИмениОбъекта
						И ЗначениеЗаполнено(ТекущаяСтрока.ИмяОбъекта) Тогда
						
						ПервыйТипТипов = Тип(СтрЗаменить(ТекущаяСтрока.Тип, " ", "")
										 + "." + ТекущаяСтрока.ИмяОбъекта);
						
					Иначе
						ПервыйТипТипов = "Все";  
					КонецЕсли;
					
				КонецЕсли;
				
				// Получим вид объекта реквизита.
				ВидОбъектаРеквизита = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоТипу(ПервыйТипТипов);
				
            КонецЕсли;
            
			Если Не ПоРеквизитам И Не ЗначениеЗаполнено(ТекущаяСтрока.ИмяВФайле) Тогда
				ДопТекст = ?(ТекущаяСтрока.ВидДанных = "Шапка", "", ТекущаяСтрока.ВидДанных + "_");
                ТекущаяСтрока.ИмяВФайле = ДопТекст + ИмяРеквизита;
            КонецЕсли;
            
            // Если это ссылочный тип, тогда
            Если мСтруктураСсылочныхТипов.Свойство(ВидОбъектаРеквизита) Тогда
                
                РезСтруктура = мСтруктураСсылочныхТипов[ВидОбъектаРеквизита];
                
                МассивТипов = Новый Массив;
                МассивТипов.Добавить(ПервыйТипТипов);
                ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
                
                СтруктураОбъекта = бит_ОбменДанными_Excel.ПолучитьИмяОбъектаПоОписаниюТипов(ОписаниеТипов, 
                                                                                            РезСтруктура.ИмяКоллекции,
                                                                                            РезСтруктура.НачалоИмениТипа + "Ссылка");
                Если Не СтруктураОбъекта = Неопределено Тогда
					
					// Заполняем тип объекта.
	                ТекущаяСтрока.Тип = РезСтруктура.Тип;
					
	                // Заполняем имя ссылочного объекта.
	                ТекущаяСтрока.ИмяОбъекта = СтруктураОбъекта.Имя;
					
					Если ЗначениеЗаполнено(ТекущаяСтрока.РеквизитПоиска) Тогда
						// Проверим принадлежность реквизита поиска к реквизитам выбранного объекта.
						ПроверитьПринадлежностьРеквизитаКРеквизитамОбъекта(ТекущаяСтрока);
					Иначе
						// Заполняем реквизит поиска по умолчанию.
						ТекущаяСтрока.РеквизитПоиска = мСтруктураРеквизитПоиска[ВидОбъектаРеквизита];
					КонецЕсли;
	    			
	    			// Приведем значение типа по умолчанию.
	    			Выполнить("ТекущаяСтрока.ПоУмолчанию = " + РезСтруктура.ИмяКоллекции + "." 
	    												  + СтруктураОбъекта.Имя + ".ПустаяСсылка();");
    			Иначе
					
					ТекущаяСтрока.Тип 			 = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПустаяСсылка();
					ТекущаяСтрока.ИмяОбъекта     = "";
					ТекущаяСтрока.РеквизитПоиска = "";
					ТекущаяСтрока.ПоУмолчанию    = Неопределено;
					
				КонецЕсли;
    		Иначе

				
				Если ПервыйТипТипов = "Все" Тогда
					ПервыйТипТипов = ?(ЗначениеЗаполнено(ТекущаяСтрока.Тип), ТекущаяСтрока.Тип, ПервыйТипТипов);
				КонецЕсли;
				
				// СтрокаТип = СтрЗаменить((Строка(ПервыйТипТипов)), " ", "");
				// СтрокаТип = СтрЗаменить((Строка(СтрокаТип))		, ":", "");
					
				// Если мСтруктураПростыхТипов.Свойство(СтрокаТип) Тогда.
				Если НЕ мСтруктураПростыхТипов.Получить(ПервыйТипТипов) = Неопределено Тогда
					ТекущаяСтрока.Тип = мСтруктураПростыхТипов[ПервыйТипТипов].Тип;
				// Иначе
				// 	СтрокаТип = "Строка";
				КонецЕсли;
				
                ТекущаяСтрока.ИмяОбъекта     = "";
                ТекущаяСтрока.РеквизитПоиска = "";
    			
    			Попытка
    				// Приведем значение типа по умолчанию.
    				Выполнить("ТекущаяСтрока.ПоУмолчанию = мСтруктураПростыхТипов[ПервыйТипТипов].Значение;");
                Исключение
                    // Если потерпели неудачу при установке типа, тогда
    				// приведем значение типа по умолчанию - Строка.
    				Выполнить("ТекущаяСтрока.ПоУмолчанию = """";");
    			КонецПопытки;
                
            КонецЕсли; // Если мСтруктураСсылочныхТипов.Свойство(ВидОбъектаРеквизита) Тогда.
            
        Иначе
            
            // Иначе, если не нашли реквизит.
            Если Не ЭтоИзменениеТипа И Не ПустаяСтрока(ТекущаяСтрока.ИмяРеквизита) Тогда
                ТекущаяСтрока.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Строка;
            КонецЕсли;
            
            ТекущаяСтрока.ИмяОбъекта     = "";
            ТекущаяСтрока.РеквизитПоиска = ""; 
            ТекущаяСтрока.ПоУмолчанию    = "";
            
            Если ИмяРеквизита = Неопределено Тогда
                ТекущаяСтрока.КлючевоеПоле    = Ложь;
                ТекущаяСтрока.ТолькоДляПустых = Ложь;
            КонецЕсли;
            
        КонецЕсли; // Если ИндексСтроки <> Неопределено Тогда
    
    КонецЕсли;
    
КонецПроцедуры // ЗаполнитьЗначенияПравилаЗагрузкиРеквизита()

// Процедура вызывает функции и процедуры необходимые для выполнения
// загрузки структуры из файла.
// 
// Параметры:
//  ПоРеквизитам     - Булево.
//  ЭтоСопоставление - Булево.
// 
Процедура Удалить_ЗагрузитьСтруктуруПравилЗагрузки(ПоРеквизитам = Ложь, ЭтоСопоставление = Ложь) Экспорт
    
    Отказ = Ложь;
	
	// Формируем структуу обязательных полей.
	СтруктураПолей = Новый Структура; 
	
	Если ПоРеквизитам Тогда
		СтруктураПолей.Вставить("Объект");
	Иначе
		СтруктураПолей.Вставить("ФайлИсточник");
		СтруктураПолей.Вставить("ИмяЛиста");
		СтруктураПолей.Вставить("НомерСтрокиСИменамиКолонок");  
		СтруктураПолей.Вставить("НомерНачальнойКолонки");
	КонецЕсли;
	
    // Проверим заполненность шапки.
    бит_ОбменДанными_Excel.ПроверитьЗаполнениеШапкиОбъекта(ЭтотОбъект, СтруктураПолей, Отказ, "");
    
    Если Не Отказ Тогда
        
        // Выполним загрузку правил из файла.
        Удалить_ВыполнитьЗагрузкуПравил(ПоРеквизитам, ЭтоСопоставление);
        
    КонецЕсли;
    
КонецПроцедуры // ЗагрузитьСтруктуруПравилЗагрузки()

// Процедура выполняет выгрузку структуры колонок из имен колонки "Имя в файле" в файл Excel.
// 
// Параметры:
//  Нет.
// 
Процедура Удалить_ВыгрузитьСтруктуруИменКолонки_ИмяВФайлеВExcel() Экспорт 
	
	ЕстьОшибки = Ложь;
	
	// Формируем структуу обязательных полей.
	СтруктураПолей = Новый Структура; 
	СтруктураПолей.Вставить("НомерСтрокиСИменамиКолонок");  
	СтруктураПолей.Вставить("НомерНачальнойКолонки");
    
    // Проверим заполненность шапки.
    бит_ОбменДанными_Excel.ПроверитьЗаполнениеШапкиОбъекта(ЭтотОбъект, СтруктураПолей, ЕстьОшибки, "");
    
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим приложение Excel.
	Excel = бит_ОбменДанными_Excel.СоздатьПриложениеExcel();
	
	Если Excel = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ПравилаЗагрузкиДляРазбиения = ПравилаЗагрузки.Выгрузить();
		
		// Разобъем таблицу правил на две таблицы:
		// 1) "ПравилаЗагрузкиШапки" - правила загрузки шапки.
		// 2) "ПравилаЗагрузкиТЧ" 	 - правила загрузки значений табличных частей.
		СтруктураТаблиц = бит_ОбменДанными_Excel.РазбитьТаблицуПравилЗагрузкиНаДвеТаблицы(ПравилаЗагрузкиДляРазбиения);
		
		// Получим масси колонок для выгрузки в Excel.
		МассивКолонок = Новый Массив;
		
		Для Каждого КлючЗначение Из СтруктураТаблиц Цикл
			
			ИмяТаблицы = КлючЗначение.Ключ;
			ТекТаблица = КлючЗначение.Значение;
			
			Если ИмяТаблицы = "ПравилаЗагрузкиТЧ" 
				И Не ТекТаблица.Количество() = 0 Тогда
				МассивКолонок.Добавить("ИмяТабЧасти");
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ТекТаблица Цикл
				
				ТекИмяКолонки = ТекСтрока.ИмяВФайле;
				
				Если ЗначениеЗаполнено(ТекИмяКолонки) 
					И МассивКолонок.Найти(ТекИмяКолонки) = Неопределено Тогда
					МассивКолонок.Добавить(ТекИмяКолонки);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Книга = Excel.Application.WorkBooks.Add(1);
		
		// Добавим и оформим лист для загрузки структуры
		// правил загрузки.
		ExcelЛист 	   = Excel.ActiveSheet;
		ExcelЛист.Name = СокрЛП(ИмяЛиста);
		
		// Устанавливаем ширину колонок - 15.
		бит_ОбменДаннымиЭксельКлиентСервер.УстановитьШиринуКолонокДляЛиста(ExcelЛист, 15);
		
		// Устанавливаем формат ячейки - "Текстовый".
		ExcelЛист.Cells.NumberFormat = "@";
		
		НомерКолонки = НомерНачальнойКолонки;
		
		Для Каждого ТекКолонка Из МассивКолонок Цикл
			
			Ячейка = ExcelЛист.Cells(НомерСтрокиСИменамиКолонок, НомерКолонки);
			
			// Заполним имя колонки.
			Ячейка.Value = ТекКолонка;
			
			// Установим границы для ячейки.
			бит_ОбменДаннымиЭксельКлиентСервер.УстановитьГраницыДляЯчейки(Ячейка);
			
			НомерКолонки = НомерКолонки + 1;
			
		КонецЦикла;
		
		// // Добавим и оформим лист для загрузки
		//// информации по правилам загрузки.
		// ЛистЗначения 	  = Книга.Sheets.Add();
		// ЛистЗначения.Name = "...Значения...";
		// 
		// СтруктураКолонок = Новый Структура;
		// СтруктураКолонок.Вставить("Строка1", "Имя колонки");
		// СтруктураКолонок.Вставить("Строка2", "Возможные значения");
		// 
		// Для Каждого КлючЗначение Из СтруктураКолонок Цикл
		// 	
		// 	НомерСтроки = Число(Прав(КлючЗначение.Ключ, 1));
		// 	
		// 	Ячейка = ЛистЗначения.Cells(1, НомерСтроки);
		// 	
		// 	//  Заполним имя колонки.
		// 	Ячейка.Value = КлючЗначение.Значение;
		// 	
		//  // Установим границы для ячейки.
		//  бит_ОбменДанными_Excel.УстановитьГраницыДляЯчейки(Ячейка);
		// 
		// КонецЦикла;
		
		// ЛистЗначения.Columns(1).Width = 50;
		// ЛистЗначения.Columns(2).Width = 80;
		
		Excel.Visible = Истина;
		
	Исключение
		ЕстьОшибки = Истина;
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить лист Excel - %1. %2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СокрЛП(Объект), ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	// Если не удалось выгрузить, тогда
	// закрываем приложение Excel.
	Если ЕстьОшибки Тогда
		// Закроем приложение Excel.
		бит_ОбменДанными_Excel.ЗакрытьПриложениеExcel(Excel);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьСтруктуруИменКолонки_ИмяВФайлеВExcel()

// Процедура проверяет принадлежность элемента/группы к предопределеннм группам справочника.
// 
// Параметры:
//  Отказ - Булево, флаг отказа ввода настройки.
// 
Процедура ПроверитьПринадлежностьНастройкиКПредопределеннымГруппам(Отказ) Экспорт

    ПредГруппы = Справочники.бит_НастройкиЗагрузкиИзExcel;
    
    // Проверим принадлежность элемента к предопределенным группам.
    Если Не (ПринадлежитЭлементу(ПредГруппы.Справочники)
        Или ПринадлежитЭлементу(ПредГруппы.Документы)
        Или ПринадлежитЭлементу(ПредГруппы.РегистрыСведений)) Тогда
        Отказ = Истина;
		Если ЭтоГруппа Тогда
			ТекстСообщения = Нстр("ru = 'Группа может принадлежать только предопределенным группам'");
		Иначе	
			ТекстСообщения = Нстр("ru = 'Элемент может принадлежать только предопределенным группам'");
		КонецЕсли;
        ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
    КонецЕсли;
    
    // Перемещение между группами запрешено.
    Если Не ЭтоНовый() 
        И Ссылка.Родитель <> Родитель Тогда
        
        ТекРодитель = Ссылка.Родитель;
        НовРодитель = Родитель;
        
        Если Не ЗначениеЗаполнено(НовРодитель)
            Или Не (((ТекРодитель = ПредГруппы.Справочники Или ТекРодитель.ПринадлежитЭлементу(ПредГруппы.Справочники))
            И НовРодитель = ПредГруппы.Справочники Или НовРодитель.ПринадлежитЭлементу(ПредГруппы.Справочники))
            
            Или ((ТекРодитель = ПредГруппы.Документы Или ТекРодитель.ПринадлежитЭлементу(ПредГруппы.Документы))
                 И НовРодитель = ПредГруппы.Документы Или НовРодитель.ПринадлежитЭлементу(ПредГруппы.Документы))
            
            Или ((ТекРодитель = ПредГруппы.РегистрыСведений Или ТекРодитель.ПринадлежитЭлементу(ПредГруппы.РегистрыСведений))
                 И НовРодитель = ПредГруппы.РегистрыСведений Или НовРодитель.ПринадлежитЭлементу(ПредГруппы.РегистрыСведений))) Тогда
            
            Отказ = Истина;
            ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Перемещение между предопределенными группами запрещено.'"));
            ОбщегоНазначения.СообщитьПользователю(Символы.НПП + НСтр("ru = '*** Перемещение разрешено только внутри предопределенных групп. ***'"));
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры // ПроверитьПринадлежностьНастройкиКПредопределеннымГруппам()

// Процедура проверяет правильность заполнения настройки загрузки.
// 
// Параметры:
//  Отказ - Булево, флаг правильности заполнения настройки загрузки.
// 
Процедура ПроверитьПравильностьЗаполненияНастройкиЗагрузки(Отказ) Экспорт
    
    Заголовок = "Проверка правильности настройки правил загрузки.";
    
    СтруктураСвойстОбъекта = Новый Структура;
    СтруктураСвойстОбъекта.Вставить("ВидОбъекта", ВидОбъекта);
    СтруктураСвойстОбъекта.Вставить("ИмяОбъекта", ИмяОбъекта);
    СтруктураСвойстОбъекта.Вставить("ИспользоватьНестандартныйАлгоритмПоиска", ИспользоватьНестандартныйАлгоритмПоиска);
	
    // Проверим правильность заполнения настройки загрузки.
    бит_ОбменДанными_Excel.ПроверитьПравильностьЗаполненияНастройкиЗагрузки(ПравилаЗагрузки.Выгрузить(), СтруктураСвойстОбъекта, Отказ, Заголовок);
    
КонецПроцедуры // ПроверитьПравильностьЗаполненияНастройкиЗагрузки()

// Функция получаем структуру имен объектов для поля без сопоставления реквизита.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
// 
// Возвращаемое значение:
//  СтруктураИмен - Структура.
// 
Функция ПолучитьСтруктуруИменОбъектовДляПоляБезСопоставления(ТекущаяСтрока) Экспорт
	
	СтруктураИмен = мСоотИменТиповДляПолейБезСопоставления.Получить(ТекущаяСтрока.Тип);
	
	Если СтруктураИмен = Неопределено Тогда
		
		СтруктураИмен = Новый Структура;
		СтруктураИмен.Вставить("СписокИмен");
		СтруктураИмен.Вставить("СинонимКоллекции");
		
	КонецЕсли;
	
	Возврат СтруктураИмен;
	
КонецФункции // ПолучитьСтруктуруИменОбъектовДляПоляБезСопоставления()

// Процедура удаляет из таблицы значений строку со значением "Без_Сопоставления".
// 
// Параметры:
//  ТаблицаРеквизитов - ТаблицаЗначений.
// 
Процедура УдалитьСтрокуСоЗначением_Без_Сопоставления(ТаблицаРеквизитов) Экспорт
	
	СтрокаДляУдаления = ТаблицаРеквизитов.Найти("Без_Сопоставления", "ИмяРеквизита");
	
	Если Не СтрокаДляУдаления = Неопределено Тогда
		ТаблицаРеквизитов.Удалить(СтрокаДляУдаления);
	КонецЕсли;
	
КонецПроцедуры // УдалитьСтрокуСоЗначением_Без_Сопоставления()

// Процедура проверяет принадлежность реквизита поиска в реквизитам объекта.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТаблицыЗначений.
// 
Процедура ПроверитьПринадлежностьРеквизитаКРеквизитамОбъекта(ТекущаяСтрока) Экспорт

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
        
	РеквизитЗаполнен = ЗначениеЗаполнено(ТекущаяСтрока.РеквизитПоиска);
	
	Если РеквизитЗаполнен Тогда
		
		// Получаем реквизиты текущего объекта для проверки правильности указания имени реквизита поиска.
		ТаблицаРеквизитов = бит_ОбменДанными_Excel.ПолучитьРеквизитыОбъектаТекущейСтроки(мСтруктураСсылочныхТипов, ТекущаяСтрока);
		
		МассивДляПоиска = Новый Массив;
		
		// Сформируем массив с именами реквизитов в верхнем регистре.
		// Для осуществления поиска.
		Для Каждого ТекСтрока Из ТаблицаРеквизитов Цикл
			МассивДляПоиска.Добавить(ВРег(ТекСтрока.ИмяРеквизита));
		КонецЦикла;
		
		// Проверим наличие реквизита у объекта.
		// Если реквизит не найден, тогда. 
		Если МассивДляПоиска.Найти(ВРег(ТекущаяСтрока.РеквизитПоиска)) = Неопределено Тогда
			ТекущаяСтрока.РеквизитПоиска = "";
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры // ПроверитьПринадлежностьРеквизитаКРеквизитамОбъекта()

// Функция получает строку родитель для текущей строки дерева.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//  СтрокаРодитель - СтрокаДереваЗначений, Неопределено.
// 
Функция Удалить_ПолучитьСтрокуРодительДляТекущейСтрокиДерева(ТекущаяСтрока) Экспорт
	
	СтрокаРодитель = Неопределено;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат СтрокаРодитель;
	КонецЕсли;
	
	ТекВидДанных   = ТекущаяСтрока.ВидДанных;
	ВерхнийУровень = ТекущаяСтрока.ВерхнийУровень;
	
	Если ТекВидДанных = "Шапка" Тогда
		СтрокаРодитель = ?(ВерхнийУровень, ТекущаяСтрока, ТекущаяСтрока.Родитель);
	Иначе
		
		Если ТекВидДанных = "Табличные части" Тогда
			СтрокаРодитель = Неопределено;
			
		ИначеЕсли ТекущаяСтрока.Родитель.ВидДанных = "Табличные части" Тогда
			СтрокаРодитель = ТекущаяСтрока;
			
		ИначеЕсли ТекущаяСтрока.Родитель.Родитель.ВидДанных = "Табличные части" Тогда
			СтрокаРодитель = ТекущаяСтрока.Родитель;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаРодитель;
	
КонецФункции // ПолучитьСтрокуРодительДляТекущейСтрокиДерева()

// Функция возвращает массив доступных для выбора листов книги Excel.
// 
// Параметры:
//  ИмяФайла - Имя файла MS Excel.
// 
// Возвращаемое значение:
//  МассивЛистов - Массив, Неопределено.
// 
// 
Функция ПолучитьМассивЛистовExcel(ИмяФайла) Экспорт
	
	ЕстьОшибки = Ложь;
		
	// Создадим приложение Excel.
	Excel = бит_ОбменДанными_Excel.СоздатьПриложениеExcel(ЕстьОшибки, Истина);
		
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	// Откроем указанный файл.
	ExcelФайл = бит_ОбменДанными_Excel.ОткрытьExcelФайл(Excel, ИмяФайла, ЕстьОшибки);
		
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивЛистов = бит_ОбменДанными_Excel.ПолучитьСписокЛистовExcel(ExcelФайл, ЕстьОшибки);
	
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	бит_ОбменДанными_Excel.ЗакрытьExcelФайл(ExcelФайл);
	
	Если Excel.Workbooks.Count = 0 Тогда
		бит_ОбменДанными_Excel.ЗакрытьПриложениеExcel(Excel);
	КонецЕсли;
	
	Возврат МассивЛистов;
	
КонецФункции

// Функция возвращает массив имен колонок доступных для выбора на листе книги Excel.
// 
// Параметры:
//  ИмяФайла - Имя файла MS Excel.
// 
// Возвращаемое значение:
//  МассивКолонок - Массив, Неопределено.
// 
// 
Функция Удалить_ПолучитьМассивИменКолонокЛистаExcel(ИмяФайла) Экспорт
	
	ЕстьОшибки = Ложь;
		
	// Создадим приложение Excel.
	Excel = бит_ОбменДанными_Excel.СоздатьПриложениеExcel(ЕстьОшибки, Истина);
		
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	// Откроем указанный файл.
	ExcelФайл = бит_ОбменДанными_Excel.ОткрытьExcelФайл(Excel, ИмяФайла, ЕстьОшибки);
		
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Откроем лист Excel.
	ExcelЛист = бит_ОбменДанными_Excel.ОткрытьExcelЛист(ExcelФайл, ИмяЛиста, ЕстьОшибки,, 
														"	не удалось получить лист Excel!");
															
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаКолонок = Удалить_ПолучитьТаблицуСИменамиКолонокФайла(ExcelЛист);
	
	МассивКолонок = ТаблицаКолонок.ВыгрузитьКолонку("ИмяВФайле");
	
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	бит_ОбменДанными_Excel.ЗакрытьExcelФайл(ExcelФайл);
	
	Если Excel.Workbooks.Count = 0 Тогда
		бит_ОбменДанными_Excel.ЗакрытьПриложениеExcel(Excel);
	КонецЕсли;
	
	Возврат МассивКолонок;
	
КонецФункции

// Процедура заполняет таблицу правил загрузки дополнительными значениями.
// 
// Параметры:
//  ПравилаЗагрузки - ТаблицаЗначений.
//  ПоРеквизитам    - Булево.
// 
Процедура ДополнитьИЗагрузитьТаблицуПравилЗагрузки(НовПравилаЗагрузки, ПоРеквизитам = Ложь) Экспорт
    
    МассивТипов = Новый Массив;
    МассивТипов.Добавить("");
    
    // Добавим новые колонки.
    Если Не ПоРеквизитам Тогда
        НовПравилаЗагрузки.Колонки.Добавить("ИмяРеквизита",   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	КонецЕсли;
    НовПравилаЗагрузки.Колонки.Добавить("Тип",            Новый ОписаниеТипов("ПеречислениеСсылка.бит_ТипыЗагружаемыхОбъектовИзExcel"));
    НовПравилаЗагрузки.Колонки.Добавить("ИмяОбъекта",     Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
    НовПравилаЗагрузки.Колонки.Добавить("РеквизитПоиска", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
    НовПравилаЗагрузки.Колонки.Добавить("ПоУмолчанию",    Новый ОписаниеТипов(МассивТипов));
    
    Если Не ПоРеквизитам Тогда
        
        Для Каждого ТекСтрока Из НовПравилаЗагрузки Цикл
            
            ТекИмяКолонки = ТекСтрока.ИмяВФайле;
			
			// Получим реквизиты объекта.
			ТаблицаРеквизитов = ПолучитьРеквизитыОбъектаДляВыбора(ТекСтрока.ВидДанных);
			
            // Заполним значения в текущей строке.
            ЗаполнитьЗначенияПравилаЗагрузкиРеквизита(ТекСтрока, ТекИмяКолонки, ТаблицаРеквизитов);
            
        КонецЦикла;
        
    Иначе
        
        Для Каждого ТекСтрока Из НовПравилаЗагрузки Цикл
            // Заполним значения в текущей строке.
            ЗаполнитьЗначенияПравилаЗагрузкиРеквизита(ТекСтрока,,,, ПоРеквизитам);
        КонецЦикла;
        
    КонецЕсли;
    
    ПравилаЗагрузки.Загрузить(НовПравилаЗагрузки);
    
КонецПроцедуры // ДополнитьИЗагрузитьТаблицуПравилЗагрузки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедуры и ф ункции необходимые для загрузки структуры правил из файла.

// Процедура чтения данных из EXCEL файла через COMSafeArray.
// 
// Параметры:
//  ExcelЛист - ComObject.
// 
Функция Удалить_ПолучитьТаблицуСИменамиКолонокФайла(ExcelЛист)

    НовПравилаЗагрузки = Новый ТаблицаЗначений;
	НовПравилаЗагрузки.Колонки.Добавить("ИмяВФайле"	  , Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	НовПравилаЗагрузки.Колонки.Добавить("ИмяДляПоиска", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
    
	Arr  = ExcelЛист.UsedRange.Value;
	КоличествоКолонок = Arr.GetUpperBound(0);
	
	// Формируем массив неразрешимых символов.
	МассивНеРазрешимыхСимволов = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьМассивНеРазрешимыхСимволов();
	
	Для НомКол = НомерНачальнойКолонки По КоличествоКолонок Цикл
		
		бит_ОбменДанными_Excel.ВывестиСостояниеПользователю("Обработка файла Microsoft Excel: "
		                             + "колонка " + НомКол + " из " + КоличествоКолонок);
                  
        // Получим имя колонки.
        ИмяКолонки = СокрЛП(ExcelЛист.Cells(НомерСтрокиСИменамиКолонок, НомКол).Value);
        
        // Удалим неразрешимые символы из имени колонки.
		бит_ОбменДанными_Excel.УдалитьИзСтрокиМассивСимволов(ИмяКолонки, МассивНеРазрешимыхСимволов);
        
        Если НЕ ЗначениеЗаполнено(ИмяКолонки) Тогда
            Продолжить;
        КонецЕсли;
        
		НовСтрока = НовПравилаЗагрузки.Добавить();
		НовСтрока.ИмяВФайле    = ИмяКолонки;
		НовСтрока.ИмяДляПоиска = ВРег(ИмяКолонки);
        
	КонецЦикла;
    
	Возврат НовПравилаЗагрузки;
	
КонецФункции // Удалить_ПолучитьТаблицуСИменамиКолонокФайла()

// Процедура выполняет загрузку структуры правил из файла.
// 
// Параметры:
//  ПоРеквизитам     - Булево.
//  ЭтоСопоставление - Булево.
// 
Процедура Удалить_ВыполнитьЗагрузкуПравил(ПоРеквизитам, ЭтоСопоставление)
    
    Если ПоРеквизитам Тогда
        
        // Получаем реквизиты объекта загрузки для выбора.
        ТаблицаРеквизитов = ПолучитьРеквизитыОбъектаДляВыбора();
		
		// Удалим строку со значением "Без_Сопоставления" из таблицы реквизитов.
		УдалитьСтрокуСоЗначением_Без_Сопоставления(ТаблицаРеквизитов);
		
        // Заполнить дополнительные значения правил загрузки.
        ДополнитьИЗагрузитьТаблицуПравилЗагрузки(ТаблицаРеквизитов, ПоРеквизитам);
        
    Иначе
    
        ЕстьОшибки = Ложь;
		
		// Создадим приложение Excel.
		Excel = бит_ОбменДанными_Excel.СоздатьПриложениеExcel(ЕстьОшибки, Истина);
		
		Если Excel = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Откроем указанный файл.
		ExcelФайл = бит_ОбменДанными_Excel.ОткрытьExcelФайл(Excel, ФайлИсточник, ЕстьОшибки);
		
		Если ExcelФайл = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Откроем лист Excel.
		ExcelЛист = бит_ОбменДанными_Excel.ОткрытьExcelЛист(ExcelФайл, ИмяЛиста, ЕстьОшибки,, 
															"	загрузка структуры правил не выполнена!");
		
        Если Не ЕстьОшибки Тогда
            
            // Получим таблицу значений с именами колонок файла.
            ТаблицаИменФайла = Удалить_ПолучитьТаблицуСИменамиКолонокФайла(ExcelЛист);
			ТаблицаИменФайла.Колонки.Добавить("Загружена", Новый ОписаниеТипов("Булево"));
			
			Если Не ЭтоСопоставление Тогда
				
				// Получаем реквизиты объекта.
				ТаблицаРеквизитов = ПолучитьРеквизитыОбъектаДляВыбора();
				
				Для Каждого ТекСтрока Из ТаблицаРеквизитов Цикл
					
					ЭтоРеквизитШапки = ТекСтрока.ВидДанных = "Шапка";
					
					Если Не ЭтоРеквизитШапки Тогда
						// Попробуем найти элемент с префиксом: "ИмяТабЧасти_" + ИмяРеквизита.
						ИмяРеквизитаВФайле = ТекСтрока.ВидДанных + "_" + ТекСтрока.ИмяРеквизита;
						СтрокаТаблицы 	   = ТаблицаИменФайла.Найти(ВРег(ИмяРеквизитаВФайле), "ИмяДляПоиска");
					Иначе
						СтрокаТаблицы = Неопределено;
					КонецЕсли;
					
					Если СтрокаТаблицы = Неопределено Тогда
						// Ищем колонку с именем тек. реквизита.
						ИмяРеквизитаВФайле = ТекСтрока.ИмяРеквизита;
						СтрокаТаблицы 	   = ТаблицаИменФайла.Найти(ВРег(ИмяРеквизитаВФайле), "ИмяДляПоиска");
					КонецЕсли;
					
					Если Не СтрокаТаблицы = Неопределено Тогда
						
						НоваяСтрока = ПравилаЗагрузки.Добавить();
						НоваяСтрока.ВидДанных = ТекСтрока.ВидДанных;
						НоваяСтрока.ИмяВФайле = ИмяРеквизитаВФайле;
						
						// Отметим что данные строки загружены.
						СтрокаТаблицы.Загружена = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Проверим все ли колонки сопоставлены реквизитам документа,
				// не сопоставленные колонки добавим в шапку.
				НеЗагруженныеИмена = ТаблицаИменФайла.НайтиСтроки(Новый Структура("Загружена", Ложь));
				
				Для Каждого ТекСтрока Из НеЗагруженныеИмена Цикл
					
					ИмяКолонки = ТекСтрока.ИмяВФайле;
					
					Если ВРег(ИмяКолонки) = "ИМЯТАБЧАСТИ" Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ПравилаЗагрузки.Добавить();
					НоваяСтрока.ВидДанных = "Шапка";
					НоваяСтрока.ИмяВФайле = ИмяКолонки;
					
				КонецЦикла;
				
            Иначе
                // Необходимо выполнить сопоставление значений колонки "ИмяВФайле"
                // именам реквизитов объекта.
                Для Каждого ТекСтрока Из ПравилаЗагрузки Цикл
					
					ЭтоРеквизитШапки = ТекСтрока.ВидДанных = "Шапка";
					
					Если Не ЭтоРеквизитШапки Тогда
						// Попробуем найти элемент с префиксом: "ИмяТабЧасти_" + ИмяРеквизита.
						ИмяРеквизитаВФайле = ТекСтрока.ВидДанных + "_" + ТекСтрока.ИмяРеквизита;
						СтрокаТаблицы 	   = ТаблицаИменФайла.Найти(ВРег(ИмяРеквизитаВФайле), "ИмяДляПоиска");
					Иначе
						СтрокаТаблицы = Неопределено;
					КонецЕсли;
					
					Если СтрокаТаблицы = Неопределено Тогда
						// Ищем колонку с именем тек. реквизита.
						ИмяРеквизитаВФайле = ТекСтрока.ИмяРеквизита;
						СтрокаТаблицы 	   = ТаблицаИменФайла.Найти(ВРег(ИмяРеквизитаВФайле), "ИмяДляПоиска");
					КонецЕсли;
                    
                    // Если есть колонка с тек. именем реквизита, тогда.
                    Если Не СтрокаТаблицы = Неопределено Тогда
                        ТекСтрока.ИмяВФайле = ИмяРеквизитаВФайле;
                    КонецЕсли;
                    
                КонецЦикла;
                
            КонецЕсли;
            // // Заполнить дополнительные значения правил загрузки.
            // ДополнитьИЗагрузитьТаблицуПравилЗагрузки(НовПравилаЗагрузки);
        КонецЕсли;

		// Закроем открытый файл.
		бит_ОбменДанными_Excel.ЗакрытьExcelФайл(ExcelФайл);
		
		// Закроем приложение Excel.
		бит_ОбменДанными_Excel.ЗакрытьПриложениеExcel(Excel, Истина);
		
   КонецЕсли;
        
КонецПроцедуры // Удалить_ВыполнитьЗагрузкуПравил()

#КонецОбласти

#Область Инициализация

мЖирныйШрифт = Новый Шрифт("Arial",8,Истина);

// Получим структуру имен простейщих типов.
мСтруктураПростыхТипов = бит_ОбменДанными_Excel.ПолучитьСтруктуруИменПростейщихТиповДляЗагрузки();

// Получим структуру имен - ссылочных типов.
мСтруктураСсылочныхТипов = бит_ОбменДанными_Excel.ПолучитьСтруктуруИменСсылочныхТиповДляЗагрузки();

// Получим соответствие имен - ссылочных типов для полей без сопоставления.
мСоотИменТиповДляПолейБезСопоставления = бит_ОбменДанными_Excel.ПолучитьСоответствиеИменСсылочныхТиповДляПолейБезСопоставленияРеквизиту();

// Получим соответствие тип - вид объекта.
мСоотТипВидОбъекта = бит_ОбменДанными_Excel.ПолучитьСоответствиеТиповИВидовОбъектов();

// Формируем структуру имен - реквизитов поиска по умолчанию.
мСтруктураРеквизитПоиска = Новый Структура;
мСтруктураРеквизитПоиска.Вставить("Справочник"			  , "Код");
мСтруктураРеквизитПоиска.Вставить("Документ"			  , "Номер");
мСтруктураРеквизитПоиска.Вставить("Перечисление"		  , "");
мСтруктураРеквизитПоиска.Вставить("ПланВидовХарактеристик", "Код");
мСтруктураРеквизитПоиска.Вставить("ПланСчетов"			  , "Код");
мСтруктураРеквизитПоиска.Вставить("ПланВидовРасчета"	  , "Код");
мСтруктураРеквизитПоиска.Вставить("ПланОбмена"			  , "Код");

	
// Формируем соответствие картинок типов.
МенеджерТипы  = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel;
мКартинкиТипов = Новый Соответствие;
мКартинкиТипов.Вставить(МенеджерТипы.СправочникСсылка 	   		 , БиблиотекаКартинок.СправочникОбъект);
мКартинкиТипов.Вставить(МенеджерТипы.ДокументСсылка   	   		 , БиблиотекаКартинок.ДокументОбъект);
мКартинкиТипов.Вставить(МенеджерТипы.ПеречислениеСсылка	   		 , БиблиотекаКартинок.Перечисление);
мКартинкиТипов.Вставить(МенеджерТипы.ПланВидовХарактеристикСсылка, БиблиотекаКартинок.ПланВидовХарактеристикОбъект);
мКартинкиТипов.Вставить(МенеджерТипы.ПланСчетовСсылка 	   		 , БиблиотекаКартинок.ПланСчетовОбъект);
мКартинкиТипов.Вставить(МенеджерТипы.ПланВидовРасчетаСсылка		 , БиблиотекаКартинок.ПланВидовРасчетаОбъект);
мКартинкиТипов.Вставить(МенеджерТипы.ПланОбменаСсылка 	   		 , БиблиотекаКартинок.ПланОбменаОбъект);
мКартинкиТипов.Вставить(МенеджерТипы.ПроизвольныйАлгоритм  		 , БиблиотекаКартинок.бит_од_ФункцииПолученияЗначения);


мЦветНеДоступно = WebЦвета.Лимонный;

#КонецОбласти

#КонецЕсли
