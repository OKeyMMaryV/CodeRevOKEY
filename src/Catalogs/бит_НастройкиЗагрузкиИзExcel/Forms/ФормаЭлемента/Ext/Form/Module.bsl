
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Cтандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	
	// Вызов механизма защиты
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Зададим имена реквизитов, подлежащих кешированию.
	фКэшРеквизитов = Новый Структура;
	фКэшРеквизитов.Вставить("Объект");
	
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьКэшРеквизитовФормы();
	
	Если Параметры.Ключ.Пустая() Тогда
        // Проверим принадлежность элемента/группы к предопределеннм группам справочника.
        ПроверитьПринадлежностьНастройкиКПредопределеннымГруппам(Отказ);
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Установим значения по умолчанию.
			Объект.НомерСтрокиСИменамиКолонок = 2;
			Объект.НомерНачальнойКолонки      = 1;
		КонецЕсли;
	Иначе
		// Выполним обновление дерева правил загрузки.
		ВыполнитьОбновлениеДереваПравилЗагрузки();
	КонецЕсли;
	
	// Установим картинку для объекта.
    УстановитьКартинкуОбъекта();
	
	ОпределитьИерархиюОбъекта();
	
	ЗаполнитьСписокРегистров();
	ИзменитьСоставРегистровВДереве();
	
	// Код_АлгоритмПоиска = ?(Объект.ВидОбъекта = "РегистрСведений" ИЛИ Объект.ИспользоватьНестандартныйАлгоритмПоиска,
	// 									 			   Объект.АлгоритмПоискаСуществующихОбъектов,
	// 												   "");
	// Код_ПередЗагрузкой		 = Объект.АлгоритмПередЗагрузкой;
	// Код_ПослеЗагрузки		 = Объект.АлгоритмПослеЗагрузки;
	// Код_ПередЗаписьюОбъекта	 = Объект.АлгоритмПередЗаписьюОбъекта;
	// Код_ПослеЗаписиОбъекта	 = Объект.АлгоритмПослеЗаписиОбъекта;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки(ТекущийОбъект);
		
	ИмяТипаОбъекта = бит_ОбменДанными_Excel.ПолучитьИмяТипаОбъекта(Объект.ИмяОбъекта, Объект.ВидОбъекта);
	ТекущийОбъект.ТипЗначенияОбъекта = Новый ХранилищеЗначения(Тип(ИмяТипаОбъекта));
	
	Если НЕ (Объект.ВидОбъекта = "РегистрСведений" 
		ИЛИ Объект.ИспользоватьНестандартныйАлгоритмПоиска) Тогда
		
		Объект.АлгоритмПоискаСуществующихОбъектов = "";
	КонецЕсли;
											
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ОбновитьСписокДоступныхИменКолонок();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлИсточник) Тогда
	  	МассивЛистов = ПолучитьМассивЛистовExcel(Объект.ФайлИсточник); 		
		Если МассивЛистов <> Неопределено Тогда   		
			Элементы.ИмяЛиста.СписокВыбора.ЗагрузитьЗначения(МассивЛистов);		
		КонецЕсли;
	КонецЕсли;
	
    // Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
    
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекстОбъект = "";
	ВыбЭлемент = фКэшЗначений.СписокОбъектовДляВыбора.НайтиПоЗначению(Объект.ИмяОбъекта);
	
	Оповещение = Новый ОписаниеОповещения("ОбъектНачалоВыбораЗавершение",ЭтотОбъект);
	фКэшЗначений.СписокОбъектовДляВыбора.ПоказатьВыборЭлемента(Оповещение, "Выбор объекта: " + ТекстОбъект, ВыбЭлемент);
	
КонецПроцедуры

// Процедура обработчик оповещения "ОбъектНачалоВыбораЗавершение".
// 
// Параметры:
// ВыбЭлемент - Структура.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОбъектНачалоВыбораЗавершение(ВыбЭлемент, ДополнительныеДанные) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		
		Объект.Объект = ВыбЭлемент.Представление;
		
		// Обновим правила загрузки.
		ОбновитьПравилаЗагрузки();
		
		Если НЕ Объект.ПравилаЗагрузки.Количество() = 0
			И НЕ фКэшРеквизитов.Объект = Объект.Объект Тогда
			
			Оповещение = Новый ОписаниеОповещения("ОбъектНачалоВыбораЗавершениеОбработкаВопроса", ЭтотОбъект, ВыбЭлемент);
			ТекстВопроса = НСтр("ru='Изменился объект, правила загрузки будут очищены. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		Иначе
			
			ПриИзмененииОбъектаСервер(ВыбЭлемент.Значение);
			
			ОбновитьСписокДоступныхИменКолонок();
			
		КонецЕсли;
		
	КонецЕсли;  
	
КонецПроцедуры

// Процедура обработчик оповещения "ОбъектНачалоВыбораЗавершениеОбработкаВопроса".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ВыбЭлемент - Структура.
// 
&НаКлиенте
Процедура ОбъектНачалоВыбораЗавершениеОбработкаВопроса(Результат, ВыбЭлемент) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Объект = фКэшРеквизитов.Объект;
		Возврат;
	КонецЕсли;
	
	фКэшРеквизитов.Объект = Объект;
	
	Объект.ПравилаЗагрузки.Очистить();
	
	ПриИзмененииОбъектаСервер(ВыбЭлемент.Значение);
			
	ОбновитьСписокДоступныхИменКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки();
	
	Если Объект.ПравилаЗагрузки.Количество() <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбъектОчисткаЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Правила загрузки будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
        
	Иначе
		
		Объект.Объект     = "";
		Объект.ИмяОбъекта = "";
		Объект.ВидОбъекта = "";
		
		Объект.ИмяОбъектаПолное   = "";
		ИмяТипаОбъекта     = "";
		// ТипЗначенияОбъекта = Новый ХранилищеЗначения(Неопределено);
		
		// Заполним текущие значения.
		фКэшРеквизитов.Объект = Объект.Объект;
		
		// Установить видимость реквизитов и заголовков колонок.
		УстановитьВидимость();
		
    КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ОбъектОчисткаЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ОбъектОчисткаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПравилаЗагрузки.Очистить();
	
	ВыполнитьОбновлениеДереваПравилЗагрузки();
	
	Объект.Объект     = "";
	Объект.ИмяОбъекта = "";
	Объект.ВидОбъекта = "";
	
	Объект.ИмяОбъектаПолное   = "";
	ИмяТипаОбъекта     = "";
	// ТипЗначенияОбъекта = Новый ХранилищеЗначения(Неопределено);
    
    // Заполним текущие значения.
    фКэшРеквизитов.Объект = Объект.Объект;
    
    // Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = бит_ОбменДанными_Excel.ПолучитьФильтрДляВыбораФайлаExcel();
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьДиалогВыбораЗавершение", ЭтотОбъект); 
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, Диалог);
	
КонецПроцедуры

// Обработчик завершения выбора файла.
//  См. Синтакс-помощник: ДиалогВыбораФайла.Показать().
//
&НаКлиенте
Процедура ПоказатьДиалогВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ФайлИсточник = ВыбранныеФайлы[0];
		ФайлИсточникПриИзменении(Неопределено);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ФайлИсточникПриИзменении(Элемент)
	
	Файл = Новый Файл(Объект.ФайлИсточник);
	
	Оповещение = Новый ОписаниеОповещения("НачатьПроверкуСуществованияЗавершение", ЭтотОбъект); 
	Файл.НачатьПроверкуСуществования(Оповещение);
	
КонецПроцедуры

// Обработчик завершения проверки существования файла.
//  См. Синтакс-помощник: Файл.НачатьПроверкуСуществования().
//
&НаКлиенте
Процедура НачатьПроверкуСуществованияЗавершение(Существует, ДополнительныеПараметры) Экспорт

	Если Существует Тогда
		ФайлИсточникПриИзмененииЗавершение();	
	КонецЕсли; 	

КонецПроцедуры
  
&НаКлиенте
Процедура ФайлИсточникПриИзмененииЗавершение()
	
	Элементы.ИмяЛиста.СписокВыбора.Очистить();
	
	МассивЛистов = ПолучитьМассивЛистовExcel(Объект.ФайлИсточник); 		
	Если МассивЛистов <> Неопределено Тогда
		
		Элементы.ИмяЛиста.СписокВыбора.ЗагрузитьЗначения(МассивЛистов);
		Если МассивЛистов.Найти(Объект.ИмяЛиста) = Неопределено Тогда
			Объект.ИмяЛиста = МассивЛистов[0];
			ИмяЛистаПриИзменении(Элементы.ИмяЛиста);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлИсточникОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФайла = СокрЛП(Объект.ФайлИсточник);
	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		ФайловаяСистемаКлиент.ОткрытьФайл(ИмяФайла);	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛистаПриИзменении(Элемент)
	
	ОбновитьСписокДоступныхИменКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Модифицированность Тогда
		
		ИмяСтраницы = Элемент.ТекущаяСтраница.Имя;
		
		Если ИмяСтраницы = "ГруппаСтраницаКлючевыеПоля" Тогда
			
			// Обновим правила загрузки.
			ОбновитьПравилаЗагрузки();
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидДанных", "Шапка");
			
			Элементы.ПравилаЗагрузки.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСтрокиСИменамиКолонокПриИзменении(Элемент)
	
	ОбновитьСписокДоступныхИменКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерНачальнойКолонкиПриИзменении(Элемент)
	
	ОбновитьСписокДоступныхИменКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНестандартныйАлгоритмПоискаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗагрузкиДерево

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		КолонкиТП = Элементы.ПравилаЗагрузкиДерево;
		
		Если ТекущаяСтрока.ВерхнийУровень Тогда
			Элементы.ПравилаЗагрузкиДеревоИмяОбъекта.Заголовок = "Имя объекта";
			Возврат;
		КонецЕсли;
		
		ЭтоПроизвольныйАлгоритм = (ТекущаяСтрока.Тип = ПредопределенноеЗначение("Перечисление.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм"));
		// Получаем имя колекции.
		ЭтоРеквизитРодитель = Ложь;
		Если ТекущаяСтрока.ИмяРеквизита = "Родитель" Тогда
			ЭтоРеквизитРодитель = ОбъектИерархический;
		КонецЕсли;
	
		
		Элементы.ПравилаЗагрузкиДеревоИмяОбъекта.Заголовок     = ?(ЭтоПроизвольныйАлгоритм, "Пользовательская функция", "Имя объекта");
		Элементы.ПравилаЗагрузкиДеревоРеквизитПоиска.Заголовок = ?(ЭтоПроизвольныйАлгоритм,
												?(ЭтоРеквизитРодитель, "Колонка поиска в Excel", ""),
												"Реквизит поиска");
		
		Элементы.ПравилаЗагрузкиДеревоИмяОбъекта.КнопкаОткрытия 	= ЭтоПроизвольныйАлгоритм;
		
		Элементы.ПравилаЗагрузкиДеревоРеквизитПоиска.РедактированиеТекста = ?(ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель, Истина, Ложь);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	// Получим строку родитель для текущей строки дерева.
	СтрокаРодитель = ПолучитьСтрокуРодительДляТекущейСтрокиДерева(ТекущаяСтрока);
	
	Если СтрокаРодитель = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаРодитель.ПолучитьЭлементы();
	
	Если Не Копирование Тогда
		
		НоваяСтрока = ПодчиненныеСтроки.Добавить();
		НоваяСтрока.ВидДанных = СтрокаРодитель.ВидДанных;
		НоваяСтрока.ИД 		  = Новый УникальныйИдентификатор();
		
	Иначе
		
		Если Не ТекущаяСтрока.ВерхнийУровень Тогда
			
			НоваяСтрока = ПодчиненныеСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.ИД 		  = Новый УникальныйИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обновим нумирацию строк дерева
	УстановитьНомераСтрок(ПравилаЗагрузкиДерево, 1);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Строки верхнего уровня удалять нельзя.
	Отказ = ТекущаяСтрока.ВерхнийУровень;
	
	Если Отказ Тогда
		
		ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		
		Если ТекущаяСтрока.ВидДанных = "Табличные части" Тогда
			
			Для Каждого ТекСтрока Из ПодчиненныеСтроки Цикл
				ТекСтрока.ПолучитьЭлементы().Очистить();
			КонецЦикла;
			
		Иначе
			ПодчиненныеСтроки.Очистить();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоПослеУдаления(Элемент)
	
	// Обновим нумирацию строк дерева
	УстановитьНомераСтрок(ПравилаЗагрузкиДерево, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоТипПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	// Заполним значения правила загрузки.
	ЗаполнитьЗначенияПравилаЗагрузкиРеквизитаСервер(ТекущаяСтрока.ПолучитьИдентификатор());
	
	// Вызовим обработчик.
	ПравилаЗагрузкиДеревоПриАктивизацииСтроки("");
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	СписокТипов = Новый СписокЗначений;
	
    МассивТипов = ПолучитьМассивТиповТекущегоРеквизита(ТекущаяСтрока.ПолучитьИдентификатор());
	
	СписокТипов.ЗагрузитьЗначения(МассивТипов);
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Эл Из СписокТипов Цикл
	
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоИмяОбъектаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	ОбработатьИзменениеИмениОбъектаВСтроке(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоИмяОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	Если ТекущаяСтрока.Тип = ПредопределенноеЗначение("Перечисление.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм") Тогда
		
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Тип("СправочникСсылка.бит_ПользовательскиеФункции"));
		
		бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтотОбъект, Элемент, ТекущаяСтрока, "ИмяОбъекта", СписокТипов, СтандартнаяОбработка);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураИмен = ПолучитьСтруктуруИменОбъектовДляПоляБезСопоставленияСервер(ТекущаяСтрока.ПолучитьИдентификатор());
		
		СтруктураДопПараметров = Новый Структура;
		СтруктураДопПараметров.Вставить("ТекущаяСтрока", ТекущаяСтрока);
		СтруктураДопПараметров.Вставить("Элемент"	   , Элемент);
		
		Если ТекущаяСтрока.ИмяРеквизита = "Без_Сопоставления" Тогда
			
			// Получим список имен объектов для поля без сопоставления.
			СписокИмен = СтруктураИмен.СписокИмен;
			
			Если ЗначениеЗаполнено(СписокИмен) Тогда
				
				Заголовок = "Выбор объекта: " + СтруктураИмен.СинонимКоллекции;
				
				ВыбЭлемент = СписокИмен.НайтиПоЗначению(Элемент.Значение);
				
				Оповещение = Новый ОписаниеОповещения("ПравилаЗагрузкиДеревоИмяОбъектаНачалоВыбораЗавершение", ЭтотОбъект, СтруктураДопПараметров);
				СписокИмен.ПоказатьВыборЭлемента(Оповещение, Заголовок, ВыбЭлемент);

			КонецЕсли;	
			
		Иначе
			
			// Получим таблицу объектов для выбора.
			СписокВыбора = ПолучитьСписокВыбораИмениОбъекта(ТекущаяСтрока.ПолучитьИдентификатор());
			
			Если СписокВыбора.Количество() > 1 Тогда
				
				Заголовок = "Выбор объекта: " + СтруктураИмен.СинонимКоллекции;
				
				ВыбЭлемент = СписокВыбора.НайтиПоЗначению(ТекущаяСтрока.ИмяОбъекта);
				
				Оповещение = Новый ОписаниеОповещения("ОбработатьПравилоЗагрузкиИмениОбъекта", ЭтотОбъект, СтруктураДопПараметров);
				СписокВыбора.ПоказатьВыборЭлемента(Оповещение, Заголовок, ВыбЭлемент);
				
			ИначеЕсли СписокВыбора.Количество() = 1 Тогда
					ТекущаяСтрока.ИмяОбъекта = СписокВыбора[0].Значение;				
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ПравилаЗагрузкиДеревоИмяОбъектаНачалоВыбораЗавершение".
// 
// Параметры:
// ВыбЭлемент - Структура.
// СтруктураДопПараметров - Структура.
// 
&НаКлиенте 
Процедура ПравилаЗагрузкиДеревоИмяОбъектаНачалоВыбораЗавершение(ВыбЭлемент, СтруктураДопПараметров) Экспорт
	
	Если Не ВыбЭлемент = Неопределено
		И Не ВыбЭлемент.Значение = СтруктураДопПараметров.Элемент.Значение Тогда
		
		СтруктураДопПараметров.ТекущаяСтрока.ИмяОбъекта = ВыбЭлемент.Значение;
		ОбработатьИзменениеИмениОбъектаВСтроке(СтруктураДопПараметров.ТекущаяСтрока); 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ОбработатьПравилоЗагрузкиИмениОбъекта".
// 
// Параметры:
// ВыбЭлемент - Структура.
// СтруктураДопПараметров - Структура.
// 
&НаКлиенте 
Процедура ОбработатьПравилоЗагрузкиИмениОбъекта(ВыбЭлемент, СтруктураДопПараметров) Экспорт
	
	Если Не ВыбЭлемент = Неопределено
		И Не ВыбЭлемент.Значение = СтруктураДопПараметров.ТекущаяСтрока.ИмяОбъекта Тогда
		
		СтруктураДопПараметров.ТекущаяСтрока.ИмяОбъекта = ВыбЭлемент.Значение;
		ОбработатьИзменениеИмениОбъектаВСтроке(СтруктураДопПараметров.ТекущаяСтрока.ПолучитьИдентификатор()); 
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПравилаЗагрузкиДеревоИмяРеквизитаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
    
	ЗадатьВопрос = Ложь;
	
	ПриИзмененииИмениРеквизита(ТекущаяСтрока.ПолучитьИдентификатор(), ЗадатьВопрос);
	
	Если ЗадатьВопрос Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПравилаЗагрузкиДеревоИмяРеквизитаПриИзмененииЗавершение", ЭтотОбъект, ТекущаяСтрока);
		ТекстВопроса = НСтр("ru='В поле введены некоректные данные. Очистить поле?
		|
		|Нажмите ""Да"" для очистки поля или ""Нет"" для продолжения редактирования'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;	
		
КонецПроцедуры

// Процедура обработчик оповещения "ПравилаЗагрузкиДеревоИмяРеквизитаПриИзмененииЗавершение".
// 
// Параметры:
// Результат - Структура.
// ТекущаяСтрока - Текущие данные строки таблицы "ПравилаЗагрузкиДерево".
// 
&НаКлиенте
Процедура ПравилаЗагрузкиДеревоИмяРеквизитаПриИзмененииЗавершение(Результат, ТекущаяСтрока) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока.ИмяРеквизита = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоИмяРеквизитаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем реквизиты объекта загрузки для выбора.
	МассивРеквизитов = ПолучитьРеквизитыОбъектаПоВидуДанных(ТекущиеДанные.ВидДанных);
	СписокВыбора = ПолучитьСписокЗначенийДляВыбора(МассивРеквизитов, , БиблиотекаКартинок.бит_од_Реквизит);
	
    Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // ПравилаЗагрузкиДеревоИмяРеквизитаНачалоВыбораИзСписка()

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоИмяРеквизитаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	ТекущиеДанные = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем реквизиты объекта загрузки для выбора.
	МассивРеквизитов = ПолучитьРеквизитыОбъектаПоВидуДанных(ТекущиеДанные.ВидДанных);
	СписокВыбора = ПолучитьСписокЗначенийДляВыбора(МассивРеквизитов, , БиблиотекаКартинок.бит_од_Реквизит);
	
    Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // ПравилаЗагрузкиДеревоИмяРеквизитаАвтоПодбор()

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтотОбъект, Элемент, ТекущиеДанные, "ПоУмолчанию", фКэшЗначений.СписокТиповПоляПоУмолчанию, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоРеквизитПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	СписокВыбора = ПолучитьСписокРеквизитовПоиска(ТекущаяСтрока.ПолучитьИдентификатор());
												
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // ПравилаЗагрузкиДеревоРеквизитПоискаНачалоВыбораИзСписка()

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоРеквизитПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	СписокВыбора = ПолучитьСписокРеквизитовПоиска(ТекущаяСтрока.ПолучитьИдентификатор());
												
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // ПравилаЗагрузкиДеревоРеквизитПоискаАвтоПодбор()

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоВыгружатьСписокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьФлажкиПоДереву(ТекущиеДанные, "ВыгружатьСписок", ?(ТекущиеДанные.ВыгружатьСписок, 1, 0));
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоТолькоДляПустыхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьФлажкиПоДереву(ТекущиеДанные, "ТолькоДляПустых", ?(ТекущиеДанные.ТолькоДляПустых, 1, 0));
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоОтборПорядокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидОбъекта = фКэшЗначений.СоотТипВидОбъекта[ТекущиеДанные.Тип];
	Если ВидОбъекта = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Установка настроек доступна только для ссылочных типов.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	
	КонецЕсли; 
	
	ИмяТипа = бит_ОбменДанными_Excel.ПолучитьИмяТипаОбъекта(ТекущиеДанные.ИмяОбъекта, ВидОбъекта);
	ОписаниеТипа = Новый ОписаниеТипов(ИмяТипа);
	СтрокаТип = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ОписаниеТипа);
	ПараметрыФормы = Новый Структура("СтрТип", СтрокаТип);
	
	СтрСохр = Неопределено;
	НастройкиОтборПорядок.Свойство(ТекущиеДанные.ИмяРеквизита, СтрСохр);
	
	Если ТипЗнч(СтрСохр) = Тип("Структура") Тогда
	
		ПараметрыФормы.Вставить("СтруктураНастроек", СтрСохр.СтруктураНастроек);
	
	КонецЕсли; 
	
	Обработчик = Новый ОписаниеОповещения("ПравилаЗагрузкиДеревоОтборПорядокНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
    Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("Справочник.бит_ВидыПроформ.Форма.НастройкиВыгрузки", ПараметрыФормы, ЭтотОбъект,,,, Обработчик, Режим);
	
КонецПроцедуры

// Процедура обработчик оповещения "ПравилаЗагрузкиДеревоОтборПорядокНачалоВыбораЗавершение".
// 
// Параметры:
// РезСтруктура - Структура.
// ТекущиеДанные - Текущие данные строки таблицы "ПравилаЗагрузкиДерево".
// 
&НаКлиенте
Процедура ПравилаЗагрузкиДеревоОтборПорядокНачалоВыбораЗавершение(РезСтруктура, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(РезСтруктура) = Тип("Структура") Тогда
		
		НастройкиОтборПорядок.Вставить(ТекущиеДанные.ИмяРеквизита, РезСтруктура);
		ТекущиеДанные.ОтборПорядок = РезСтруктура.ПредставлениеНастроек;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗагрузкиДеревоОтборПорядокОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПравилаЗагрузкиДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтборПорядок.Свойство(ТекущиеДанные.ИмяРеквизита) Тогда
		
		НастройкиОтборПорядок.Удалить(ТекущиеДанные.ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьСтруктуруПоРеквизитамОбъекта(Команда)
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки();
	
	Если Объект.ПравилаЗагрузки.Количество() <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьСтруктуруПоРеквизитамОбъектаЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Правила загрузки будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
        
	Иначе
		
		ЗагрузитьСтруктуруПравилЗагрузки(Истина);
		
		// Выполним обновление дерева правил загрузки.
		ВыполнитьОбновлениеДереваПравилЗагрузки();
		
		// ОбновитьСписокДоступныхИменКолонок();
		
    КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗагрузитьСтруктуруПоРеквизитамОбъектаЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ЗагрузитьСтруктуруПоРеквизитамОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПравилаЗагрузки.Очистить();
	
	ЗагрузитьСтруктуруПравилЗагрузки(Истина);
	
	// Выполним обновление дерева правил загрузки.
	ВыполнитьОбновлениеДереваПравилЗагрузки();
	
	// ОбновитьСписокДоступныхИменКолонок();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПравилаЗагрузки(Команда)
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки();
	
	Если Объект.ПравилаЗагрузки.Количество() <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОчиститьПравилаЗагрузкиЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Правила загрузки будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ОчиститьПравилаЗагрузкиЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ОчиститьПравилаЗагрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПравилаЗагрузки.Очистить();
	
	// Выполним обновление дерева правил загрузки.
	ВыполнитьОбновлениеДереваПравилЗагрузки();
	
	ОбновитьСписокДоступныхИменКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтруктуруИзExcel(Команда)
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки();
	
	Если Объект.ПравилаЗагрузки.Количество() <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьСтруктуруИзExcelЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Правила загрузки будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗагрузитьСтруктуруПравилЗагрузки();
		
		// Выполним обновление дерева правил загрузки.
		ВыполнитьОбновлениеДереваПравилЗагрузки();
		
		ОбновитьСписокДоступныхИменКолонок();
		
    КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗагрузитьСтруктуруИзExcelЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ЗагрузитьСтруктуруИзExcelЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПравилаЗагрузки.Очистить();

	ЗагрузитьСтруктуруПравилЗагрузки();
	
	// Выполним обновление дерева правил загрузки.
	ВыполнитьОбновлениеДереваПравилЗагрузки();
	
	ОбновитьСписокДоступныхИменКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИменамиРеквизитов(Команда)
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки();
	
    Если Объект.ПравилаЗагрузки.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    Сопоставлять = Ложь;
    
    // Проверим, а есть чему сопостовлять.
    Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл 
        
        Если ЗначениеЗаполнено(ТекСтрока.ИмяРеквизита) Тогда
            Сопоставлять = Истина;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если Не Сопоставлять Тогда
        ПоказатьПредупреждение(,"Не заполнены имена реквизитов для заполнения!");
    Иначе
        ЗадатьВопрос = Ложь;
        
        // Проверим заполненность колонки "ИмяВФайле".
        Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл 
            
            Если ЗначениеЗаполнено(ТекСтрока.ИмяВФайле) Тогда
                ЗадатьВопрос = Истина;
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
        
		Если ЗадатьВопрос Тогда
			
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьИменамиРеквизитовЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Прежние сопоставленные имена в файле именам реквизитов будут перезаполнены. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
            
		Иначе
			
			МассивИменРеквизитов = Новый Массив;
			
			Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл
				
				ДопТекст = ?(ТекСтрока.ВидДанных = "Шапка", "", ТекСтрока.ВидДанных + "_");
				
				МассивИменРеквизитов.Добавить(ДопТекст + ТекСтрока.ИмяРеквизита);
				
				ТекСтрока.ИмяВФайле = ДопТекст + ТекСтрока.ИмяРеквизита; 
				
			КонецЦикла;
			
			// Объект.ПравилаЗагрузки.ЗагрузитьКолонку(МассивИменРеквизитов, "ИмяВФайле");
			
			// Выполним обновление дерева правил загрузки.
			ВыполнитьОбновлениеДереваПравилЗагрузки();
			
        КонецЕсли;
		
	КонецЕсли; // Если Сопоставлять Тогда
	
КонецПроцедуры

// Процедура обработчик оповещения "ЗаполнитьИменамиРеквизитовЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ЗаполнитьИменамиРеквизитовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменРеквизитов = Новый Массив;
	
	Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл
		
		ДопТекст = ?(ТекСтрока.ВидДанных = "Шапка", "", ТекСтрока.ВидДанных + "_");
		
		МассивИменРеквизитов.Добавить(ДопТекст + ТекСтрока.ИмяРеквизита);
		
		ТекСтрока.ИмяВФайле = ДопТекст + ТекСтрока.ИмяРеквизита; 
		
	КонецЦикла;
	
	// Объект.ПравилаЗагрузки.ЗагрузитьКолонку(МассивИменРеквизитов, "ИмяВФайле");
	
	// Выполним обновление дерева правил загрузки.
	ВыполнитьОбновлениеДереваПравилЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматически(Команда)
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки();
	
	Если Объект.ПравилаЗагрузки.Количество() <> 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьАвтоматическиЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Правила загрузки будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
        		
	Иначе
		
		// Загрузим структуру объекта
		ЗагрузитьСтруктуруПравилЗагрузки(Истина);
		
		// Заполним имя в файле по имени объекта
		МассивИменРеквизитов = Новый Массив;
		
		Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл
			
			ЭтоРеквизитШапки = ТекСтрока.ВидДанных = "Шапка"; 
			
			ДопТекст = ?(ЭтоРеквизитШапки, "", ТекСтрока.ВидДанных + "_");
			
			МассивИменРеквизитов.Добавить(ДопТекст + ТекСтрока.ИмяРеквизита);
			
			ТекСтрока.ИмяВФайле = ДопТекст + ТекСтрока.ИмяРеквизита; 
			
			// Заполним ключевые поля
			МассивКлючевыхПолей = Новый Массив;
			Если Объект.ВидОбъекта = "Документ" Тогда
				МассивКлючевыхПолей.Добавить("Номер");
				МассивКлючевыхПолей.Добавить("Дата");
			ИначеЕсли Объект.ВидОбъекта = "Справочник" Тогда
				МассивКлючевыхПолей.Добавить("Наименование");
			КонецЕсли;
			
			Если ЭтоРеквизитШапки Тогда
				НайденноеЗначение = МассивКлючевыхПолей.Найти(ТекСтрока.ИмяРеквизита); 
				Если НЕ НайденноеЗначение = Неопределено Тогда
					ТекСтрока.КлючевоеПоле = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Выполним обновление дерева правил загрузки.
		ВыполнитьОбновлениеДереваПравилЗагрузки();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "КомандаЗаполнитьАвтоматическиЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура КомандаЗаполнитьАвтоматическиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПравилаЗагрузки.Очистить();
	
	// Загрузим структуру объекта
	ЗагрузитьСтруктуруПравилЗагрузки(Истина);
	
	// Заполним имя в файле по имени объекта
	МассивИменРеквизитов = Новый Массив;
	
	Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл
		
		ЭтоРеквизитШапки = ТекСтрока.ВидДанных = "Шапка"; 
		
		ДопТекст = ?(ЭтоРеквизитШапки, "", ТекСтрока.ВидДанных + "_");
		
		МассивИменРеквизитов.Добавить(ДопТекст + ТекСтрока.ИмяРеквизита);
		
		ТекСтрока.ИмяВФайле = ДопТекст + ТекСтрока.ИмяРеквизита; 
		
		// Заполним ключевые поля
		МассивКлючевыхПолей = Новый Массив;
		Если Объект.ВидОбъекта = "Документ" Тогда
			МассивКлючевыхПолей.Добавить("Номер");
			МассивКлючевыхПолей.Добавить("Дата");
		ИначеЕсли Объект.ВидОбъекта = "Справочник" Тогда
			МассивКлючевыхПолей.Добавить("Наименование");
		КонецЕсли;
		
		Если ЭтоРеквизитШапки Тогда
			НайденноеЗначение = МассивКлючевыхПолей.Найти(ТекСтрока.ИмяРеквизита); 
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ТекСтрока.КлючевоеПоле = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполним обновление дерева правил загрузки.
	ВыполнитьОбновлениеДереваПравилЗагрузки();

	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьИменаРеквизитам(Команда)
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки();
	
    Если Объект.ПравилаЗагрузки.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
	
    Сопоставлять = Ложь;
    
    // Проверим, а есть чему сопостовлять.
    Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл 
        
        Если ЗначениеЗаполнено(ТекСтрока.ИмяВФайле) Тогда
            Сопоставлять = Истина;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если Не Сопоставлять Тогда
        ПоказатьПредупреждение(,"Не заполнены имена файла для сопоставления!");
    Иначе
        
        ЗадатьВопрос = Ложь;
        
        // Проверим заполненность колонки "ИмяРеквизита".
        Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл 
            
            Если ЗначениеЗаполнено(ТекСтрока.ИмяРеквизита) Тогда
                ЗадатьВопрос = Истина;
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
        
		Если ЗадатьВопрос Тогда
			
			Оповещение = Новый ОписаниеОповещения("СопоставитьИменаРеквизитамЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Прежние сопоставленные имена реквизитов будут перезаполнены. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
            
		Иначе
			
			Отказ = Ложь;
			
			// Проверим заполненность шапки.
			Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
				ТекстСообщения = НСтр("ru='Не заполнен объект!'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			// Выполним сопоставление имен в файле - именам реквизитов.
			ВыполнитьСопоставлениеИменВФайле();
			
			// Выполним обновление дерева правил загрузки.
			ВыполнитьОбновлениеДереваПравилЗагрузки();
			
        КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "СопоставитьИменаРеквизитамЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура СопоставитьИменаРеквизитамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Проверим заполненность шапки.
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		ТекстСообщения = НСтр("ru='Не заполнен объект!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним сопоставление имен в файле - именам реквизитов.
	ВыполнитьСопоставлениеИменВФайле();
	
	// Выполним обновление дерева правил загрузки.
	ВыполнитьОбновлениеДереваПравилЗагрузки();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСтруктуруИменФайла(Команда)
	
	Выгружать = Ложь;
	
	# Если ВебКлиент Тогда 
		ВызватьИсключение НСтр("ru = 'Работа с файлами Excel в режиме Веб-клиента недоступна.'");
	# КонецЕсли
    
    // Проверим, а есть что выгружать.
    Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл 
        
        Если ЗначениеЗаполнено(ТекСтрока.ИмяВФайле) Тогда
            Выгружать = Истина;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если Выгружать Тогда
		
		Если Модифицированность Тогда
			
			Оповещение = Новый ОписаниеОповещения("ВыгрузитьСтруктуруИменФайлаЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Настройка модифицирована. Перед выгрузкой ее необходимо записать. Записать?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		Иначе
			// Выгрузим структуру колонок из имен колонки "Имя в файле".
			ВыгрузитьСтруктуруИменКолонки_ИмяВФайлеВExcel();
			
		КонецЕсли;	
		
		
    Иначе
        ПоказатьПредупреждение(,"В колонке ""Имя в файле"" нет имен для выгрузки в Excel!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыгрузитьСтруктуруИменФайлаЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ВыгрузитьСтруктуруИменФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		ТекстСообщения = НСтр("ru='Не удалось записать настройку по причине: %1%'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекстОшибки);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецПопытки;
	
	// Выгрузим структуру колонок из имен колонки "Имя в файле".
	ВыгрузитьСтруктуруИменКолонки_ИмяВФайлеВExcel();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписание(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьОписаниеЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, Объект.Описание, "Описание настройки",,Истина);
	
КонецПроцедуры

// Процедура обработчик оповещения "СопоставитьРеквизитыИменамЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ДобавитьОписаниеЗавершение(ВведеннаяСтрока, ПараметрыВыполнения) Экспорт
	
	Если ВведеннаяСтрока <> Неопределено Тогда
		Объект.Описание = ВведеннаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьРеквизитыИменам(Команда)
	
	// Обновим правила загрузки.
	ОбновитьПравилаЗагрузки();
	
    Если Объект.ПравилаЗагрузки.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    Сопоставлять = Ложь;
    
    // Проверим, а есть чему сопостовлять.
    Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл 
        
        Если ЗначениеЗаполнено(ТекСтрока.ИмяРеквизита) Тогда
            Сопоставлять = Истина;
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Если Не Сопоставлять Тогда
        ПоказатьПредупреждение(,"Не заполнены имена реквизитов для сопоставления!");
    Иначе
        ЗадатьВопрос = Ложь;
        
        // Проверим заполненность колонки "ИмяВФайле".
        Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл 
            
            Если ЗначениеЗаполнено(ТекСтрока.ИмяВФайле) Тогда
                ЗадатьВопрос = Истина;
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
        
		Если ЗадатьВопрос Тогда
			
			Оповещение = Новый ОписаниеОповещения("СопоставитьРеквизитыИменамЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Прежние сопоставленные имена в файле именам реквизитов будут перезаполнены. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
            
		Иначе
			
			ЗагрузитьСтруктуруПравилЗагрузки(,Истина);
			
			// Выполним обновление дерева правил загрузки.
			ВыполнитьОбновлениеДереваПравилЗагрузки();
			
		КонецЕсли;
		
				
	КонецЕсли; // Если Сопоставлять Тогда
	
КонецПроцедуры

// Процедура обработчик оповещения "СопоставитьРеквизитыИменамЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура СопоставитьРеквизитыИменамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСтруктуруПравилЗагрузки(,Истина);
	
	// Выполним обновление дерева правил загрузки.
	ВыполнитьОбновлениеДереваПравилЗагрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиКлючевыеПоля(Команда)
	
	ОбработатьФлаги("ПравилаЗагрузки", "КлючевоеПоле", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиКлючевыеПоля(Команда)
	
	ОбработатьФлаги("ПравилаЗагрузки", "КлючевоеПоле", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРегистров(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Регистры", СписокРегистров);
	
	Обработчик = Новый ОписаниеОповещения("НастройкаРегистровЗавершение", ЭтотОбъект);
    Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("Справочник.бит_НастройкиЗагрузкиИзExcel.Форма.ФормаНастройкиРегистров", ПараметрыФормы, ЭтотОбъект,,,, Обработчик, Режим);

КонецПроцедуры

// Процедура обработчик оповещения "НастройкаРегистровЗавершение".
// 
// Параметры:
// СтруктураРезультат - Структура.
// Параметры - Структура.
// 
&НаКлиенте
Процедура НастройкаРегистровЗавершение(СтруктураРезультат, Параметры) Экспорт
	
	Если ТипЗнч(СтруктураРезультат) = Тип("Структура") Тогда
		
		СписокРегистров = СтруктураРезультат.СписокРегистров.Скопировать();
		
		ИзменитьСоставРегистровВДереве();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	КэшированныеЗначения = Новый Структура;
	
	КэшированныеЗначения.Вставить("СтруктураСсылочныхТипов", бит_ОбменДанными_Excel.ПолучитьСтруктуруИменСсылочныхТиповДляЗагрузки());
	
	КэшированныеЗначения.Вставить("СоотТипВидОбъекта", бит_ОбменДанными_Excel.ПолучитьСоответствиеТиповИВидовОбъектов());
	
	МассивТиповПоУмолчанию = Объект.Ссылка.Метаданные().ТабличныеЧасти.ПравилаЗагрузки.Реквизиты.ПоУмолчанию.Тип.Типы();
	СписокТиповПоУмолчанию = Новый СписокЗначений;
	СписокТиповПоУмолчанию.ЗагрузитьЗначения(МассивТиповПоУмолчанию);
	КэшированныеЗначения.Вставить("СписокТиповПоляПоУмолчанию", СписокТиповПоУмолчанию);
	
	// Формируем соответствие картинок типов.
	МенеджерТипы  = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel;
	КартинкиТипов = Новый Соответствие;
	КартинкиТипов.Вставить(МенеджерТипы.СправочникСсылка 	   		 , БиблиотекаКартинок.СправочникОбъект);
	КартинкиТипов.Вставить(МенеджерТипы.ДокументСсылка   	   		 , БиблиотекаКартинок.ДокументОбъект);
	КартинкиТипов.Вставить(МенеджерТипы.ПеречислениеСсылка	   		 , БиблиотекаКартинок.Перечисление);
	КартинкиТипов.Вставить(МенеджерТипы.ПланВидовХарактеристикСсылка, БиблиотекаКартинок.ПланВидовХарактеристикОбъект);
	КартинкиТипов.Вставить(МенеджерТипы.ПланСчетовСсылка 	   		 , БиблиотекаКартинок.ПланСчетовОбъект);
	КартинкиТипов.Вставить(МенеджерТипы.ПланВидовРасчетаСсылка		 , БиблиотекаКартинок.ПланВидовРасчетаОбъект);
	КартинкиТипов.Вставить(МенеджерТипы.ПланОбменаСсылка 	   		 , БиблиотекаКартинок.ПланОбменаОбъект);
	КартинкиТипов.Вставить(МенеджерТипы.ПроизвольныйАлгоритм  		 , БиблиотекаКартинок.бит_од_ФункцииПолученияЗначения);
	
	КэшированныеЗначения.Вставить("КартинкиТипов", КартинкиТипов);

	СписокОбъектовДляВыбора = ПолучитьСписокОбъектовДляВыбора();
	КэшированныеЗначения.Вставить("СписокОбъектовДляВыбора", СписокОбъектовДляВыбора);
	
	// Получим реквизиты объекта
	МассивРеквизитов = ПолучитьМассивРеквизитовОбъекта();
	КэшированныеЗначения.Вставить("МассивРеквизитов", МассивРеквизитов);
	
КонецПроцедуры

// Формирует кэш значений реквизитов формы.
// 
&НаСервере
Процедура ЗаполнитьКэшРеквизитовФормы()
	
	Для Каждого КэшРеквизита Из фКэшРеквизитов Цикл
		
		фКэшРеквизитов[КэшРеквизита.Ключ] = Объект[КэшРеквизита.Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура осуществляет управление видимостью/доступностью элементов управления формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьВидимость()

	// КнопкиПанелиПрЗагр = ЭлементыФормы.КоманднаяПанельПравилаЗагрузки.Кнопки;
	// КнопкиПанелиПрЗагр.Загрузить.Кнопки.ЗагрузитьСтруктуру.Доступность           = ПометкаНастройкиExcel;
	// КнопкиПанелиПрЗагр.Сопоставить.Кнопки.СопоставитьРеквизитыИменам.Доступность = ПометкаНастройкиExcel;
	
	ОбъектВыбран = ЗначениеЗаполнено(Объект.Объект);
	
	Элементы.ПравилаЗагрузкиДеревоКоманднаяПанель.Доступность = ОбъектВыбран;
	Элементы.ПравилаЗагрузкиДерево.Доступность			 	  = ОбъектВыбран;
	
	ЭтоРегистрСведений = (Объект.ВидОбъекта = "РегистрСведений");
	
	Элементы.ИспользоватьНестандартныйАлгоритмПоиска.Видимость	= НЕ ЭтоРегистрСведений;
	Если Объект.ИспользоватьНестандартныйАлгоритмПоиска 
		ИЛИ ЭтоРегистрСведений Тогда
		Элементы.ГруппаСтраницаКлючевыеПоля.Заголовок = "Алгоритм поиска";
		Элементы.ГруппаСтраницыАлгоритмПоиска.ТекущаяСтраница = Элементы.ГруппаАлгоритмПоискаСтраницаАлгоритмПоиска;
	Иначе
		Элементы.ГруппаСтраницаКлючевыеПоля.Заголовок = "Ключевые поля";
		Элементы.ГруппаСтраницыАлгоритмПоиска.ТекущаяСтраница = Элементы.ГруппаАлгоритмПоискаСтраницаКлючевыеПоля;
	КонецЕсли;
	
	Элементы.ПравилаЗагрузкиДеревоНастройкаРегистров.Видимость = бит_ОбменДанными_Excel.ЭтоДокументРучнаяОперация(Объект.ИмяОбъекта);
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ОпределитьИерархиюОбъекта()
	
	Если ПустаяСтрока(Объект.ИмяОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияРодитель = ПолучитьСсылкуКоллекцииРодителя();
	Если КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники Тогда
		ОбъектИерархический = Метаданные.Справочники[Объект.ИмяОбъекта].Иерархический;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылкуКоллекцииРодителя()
	
	Если НЕ ЗначениеЗаполнено(Объект.Родитель) Тогда
		Возврат Справочники.бит_НастройкиЗагрузкиИзExcel.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.Родитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники 
		ИЛИ Объект.Родитель.ПринадлежитЭлементу(Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники) Тогда
		КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники;
		
	ИначеЕсли Объект.Родитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Документы 
		ИЛИ Объект.Родитель.ПринадлежитЭлементу(Справочники.бит_НастройкиЗагрузкиИзExcel.Документы) Тогда
		КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Документы;
		
	ИначеЕсли Объект.Родитель = Справочники.бит_НастройкиЗагрузкиИзExcel.РегистрыСведений 
		ИЛИ Объект.Родитель.ПринадлежитЭлементу(Справочники.бит_НастройкиЗагрузкиИзExcel.РегистрыСведений) Тогда
		КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.РегистрыСведений;
		
	КонецЕсли;
	
	Возврат КоллекцияРодитель;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокОбъектовДляВыбора()
	
	СписокЗначений   = Новый СписокЗначений;
	
	КоллекцияРодитель = ПолучитьСсылкуКоллекцииРодителя();
	// Получаем имя колекции.
	Если КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники Тогда
		ИмяКоллекции  = "Справочники"; 
		ТекстОбъект   = "Справочник";
		ТекВидОбъекта = "Справочник";
		
	ИначеЕсли КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Документы Тогда
		ИмяКоллекции  = "Документы";
		ТекстОбъект   = "Документ";
		ТекВидОбъекта = "Документ";
		
	ИначеЕсли КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.РегистрыСведений Тогда
		ИмяКоллекции  = "РегистрыСведений";
		ТекстОбъект   = "Регистр сведений";
		ТекВидОбъекта = "РегистрСведений";
		
	Иначе
		Возврат СписокЗначений;
	КонецЕсли;
	
	СоответствиеКартинок = Новый Соответствие;
	СоответствиеКартинок.Вставить("Справочники", 	  БиблиотекаКартинок.СправочникОбъект);
	СоответствиеКартинок.Вставить("Документы", 		  БиблиотекаКартинок.ДокументОбъект);
	СоответствиеКартинок.Вставить("РегистрыСведений", БиблиотекаКартинок.РегистрСведений);
	
	КартинкаКоллекции = СоответствиеКартинок.Получить(ИмяКоллекции);
	
	
	ОбъектыКоллекции = Метаданные[ИмяКоллекции];
	
	ЭтоРегистрСведений     = (ТекВидОбъекта = "РегистрСведений");
	ПодчинениеРегистратору = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	
	Для Каждого ТекОбъект Из ОбъектыКоллекции Цикл
		
		Если ЭтоРегистрСведений
			И ТекОбъект.РежимЗаписи = ПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		СписокЗначений.Добавить(ТекОбъект.Имя, ТекОбъект.Синоним,, КартинкаКоллекции);
		
	КонецЦикла;
	
	СписокЗначений.СортироватьПоПредставлению();
	
	Возврат СписокЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивРеквизитовОбъекта()
	
	МассивРеквизитов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Объект.Объект) Тогда
		Возврат МассивРеквизитов;
	КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаРеквизитов = СправочникОбъект.ПолучитьРеквизитыОбъектаДляВыбора();
	
	// Получим колонки из таблицы
	МассивКолонок = Новый Массив;
	Для Каждого ТекКолонка Из ТаблицаРеквизитов.Колонки Цикл
		Если ТекКолонка.Имя = "Реквизит" Тогда
			// Нет отображения этого типа данных на клиенте.
			Продолжить;
		КонецЕсли;
		
		МассивКолонок.Добавить(ТекКолонка.Имя);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаРеквизитов Цикл
		
		СтруктураСтроки = Новый Структура;
		
		Для Каждого ТекКолонка Из МассивКолонок Цикл
			СтруктураСтроки.Вставить(ТекКолонка, ТекСтрока[ТекКолонка]);
		КонецЦикла;
		
		МассивРеквизитов.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат МассивРеквизитов;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОбъектаСервер(ВыбОбъект)
	
	КоллекцияРодитель = ПолучитьСсылкуКоллекцииРодителя();
	// Получаем имя колекции.
	Если КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники Тогда
		ТекВидОбъекта = "Справочник";
		
	ИначеЕсли КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Документы Тогда
		ТекВидОбъекта = "Документ";
		
	ИначеЕсли КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.РегистрыСведений Тогда
		ТекВидОбъекта = "РегистрСведений";
		
	КонецЕсли;
	
	Объект.ИмяОбъекта = ВыбОбъект;
	Объект.ВидОбъекта = ТекВидОбъекта;
	
	Объект.ИмяОбъектаПолное = бит_ОбменДанными_Excel.ПолучитьПолноеИмяОбъекта(Объект.ИмяОбъекта, Объект.ВидОбъекта);
	ИмяТипаОбъекта     = бит_ОбменДанными_Excel.ПолучитьИмяТипаОбъекта(Объект.ИмяОбъекта, Объект.ВидОбъекта);
	// ТипЗначенияОбъекта = Новый ХранилищеЗначения(Тип(ИмяТипаОбъекта));
	
	// Сформируем наименование.
	СформироватьНаименование();
	
	// Получим реквизиты объекта
	МассивРеквизитов = ПолучитьМассивРеквизитовОбъекта();
	фКэшЗначений.МассивРеквизитов = МассивРеквизитов;
	
	ОпределитьИерархиюОбъекта();
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	ЗаполнитьСписокРегистров();
	
	// Выполним обновление дерева правил загрузки.
	ВыполнитьОбновлениеДереваПравилЗагрузки();
	
КонецПроцедуры

// Процедура формирует наименование.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура СформироватьНаименование()
    
	Если Объект.ВидОбъекта = "Справочник" Тогда 
		ТекстИмяОбъекта = "справочника";
	ИначеЕсли Объект.ВидОбъекта = "Документ" Тогда 
		ТекстИмяОбъекта = "документа";
	ИначеЕсли Объект.ВидОбъекта = "РегистрСведений" Тогда 
		ТекстИмяОбъекта = "регистра сведений";
    КонецЕсли;
	
	ДопТекст = ?(ЗначениеЗаполнено(Объект.Код), " (№" + Объект.Код + ")", "");
    Объект.Наименование = "Загрузка " + ТекстИмяОбъекта + " """ + Объект.Объект + """" + ДопТекст;
    
	Объект.Описание = "Настройка предназначена для загрузки " + ТекстИмяОбъекта + " """ + Объект.Объект + """.";
	Объект.ИмяЛиста = Объект.Объект;
    
КонецПроцедуры // СформироватьНаименование()

&НаСервере
Процедура ПроверитьПринадлежностьНастройкиКПредопределеннымГруппам(Отказ)
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	СправочникОбъект.ПроверитьПринадлежностьНастройкиКПредопределеннымГруппам(Отказ);
	
КонецПроцедуры

// Процедура установливает картинку для объекта.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УстановитьКартинкуОбъекта()
	
	КоллекцияРодитель = ПолучитьСсылкуКоллекцииРодителя();
    Если КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники Тогда
        Элементы.КартинкаОбъекта.Картинка = БиблиотекаКартинок.Справочник;
        
    ИначеЕсли КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Документы Тогда
        Элементы.КартинкаОбъекта.Картинка = БиблиотекаКартинок.ДокументОбъект;
        
    ИначеЕсли КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.РегистрыСведений Тогда
        Элементы.КартинкаОбъекта.Картинка = БиблиотекаКартинок.РегистрСведений;
        
    КонецЕсли;
        
КонецПроцедуры

// Процедура вызывает процедуру по обновлению дерева правил загрузки
// и позиционируется на активной строке до обновления дерева.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ВыполнитьОбновлениеДереваПравилЗагрузки()
	
	ТекущаяСтрока = Элементы.ПравилаЗагрузкиДерево.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = ПравилаЗагрузкиДерево.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	ВидДанных 	 = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ВидДанных);
	ИмяРеквизита = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ИмяРеквизита);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураСсылочныхТипов", фКэшЗначений.СтруктураСсылочныхТипов);
	СтруктураПараметров.Вставить("ВидОбъекта"	  		  , Объект.ВидОбъекта);
	СтруктураПараметров.Вставить("ИмяЗагружаемогоОбъекта" , Объект.ИмяОбъекта);
	СтруктураПараметров.Вставить("ЗаполнятьИДСтроки"	  , Истина);
	СтруктураПараметров.Вставить("БезСопоставления"	  	  , Ложь);
	
	ДеревоПравилаЗагрузкиДерево = ДанныеФормыВЗначение(ПравилаЗагрузкиДерево, Тип("ДеревоЗначений"));
	
	// Обновим дерево правил загрузки.
	бит_ОбменДанными_Excel.ОбновитьДеревоПравилЗагрузки(Объект.ПравилаЗагрузки, ДеревоПравилаЗагрузкиДерево, 
														СтруктураПараметров, Элементы.ПравилаЗагрузки);
														
														
														
	// Раскроем все уровни.
	Элементы.ПравилаЗагрузкиДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	// Спозиционируемся в дереве по значениям до заполнения.
	СпозиционироватьсяВДеревеПоЗначениям(ДеревоПравилаЗагрузкиДерево, ВидДанных, ИмяРеквизита, ТекущиеДанные);
	
	// Настройки выгрузки списков
	НастройкиОтборПорядок = Новый Структура;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбновитьНастройкиОтбораПорядка(ТекОбъект, ДеревоПравилаЗагрузкиДерево);
	
	ЗначениеВДанныеФормы(ДеревоПравилаЗагрузкиДерево, ПравилаЗагрузкиДерево);
	
	ИзменитьСоставРегистровВДереве();
	
КонецПроцедуры // ВыполнитьОбновлениеДереваПравилЗагрузки()

// Процедура позиционируется по значениям в дереве. Рекурсивный вызов.
// 
// Параметры:
//  СтрокиДерева  - Коллекция строк дерева значений.
//  ВидДанных     - Строка.
//  ИмяРеквизита  - Строка.
//  ТекущаяСтрока - СтрокаДереваЗначений.
// 
&НаСервере
Процедура СпозиционироватьсяВДеревеПоЗначениям(СтрокиДерева, ВидДанных, ИмяРеквизита, ТекущаяСтрока)
	
	// Если текущая строка уже установлена, тогда.
    Если Не ТекущаяСтрока = Неопределено Тогда
        // Устанавливать нечего.
        Возврат;
    КонецЕсли;
    
    // Ищем строку с указанным видом данных.
    СтрокаРодителя = СтрокиДерева.Строки.Найти(ВидДанных, "ВидДанных");
    СтрокаЕсть     = (Не СтрокаРодителя = Неопределено);
    
    // Если строку с объектом нашли, тогда
    Если СтрокаЕсть Тогда
        
        Если ИмяРеквизита = Неопределено Тогда
            ТекущаяСтрока = СтрокаРодителя;
        Иначе
            
            СтрокаЗначения = СтрокаРодителя.Строки.Найти(ИмяРеквизита, "ИмяРеквизита");
            Если Не СтрокаЗначения = Неопределено Тогда
                ТекущаяСтрока = СтрокаЗначения;
            Иначе
                // Если имени реквизита не нашли, тогда
                // текущей строкой ставим строку родитель.
                ТекущаяСтрока = СтрокаРодителя;
            КонецЕсли;
            
        КонецЕсли;
        
        // Текущая строка установлена, выходим из процедуры.
        Возврат;
        
    Иначе
        
        // Иначе, не нашли продолжаем поиск.
        Для Каждого ТекСтроки Из СтрокиДерева.Строки Цикл
            
            СпозиционироватьсяВДеревеПоЗначениям(ТекСтроки, ВидДанных, ИмяРеквизита, ТекущаяСтрока);
            
            // Если текущая строка уже установлена, тогда.
            Если Не ТекущаяСтрока = Неопределено Тогда
                // Устанавливать нечего.
                Возврат;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЕсли; // Если СтрокаЕсть Тогда
										 
КонецПроцедуры // СпозиционироватьсяВДеревеПоЗначениям()

// Процедура обновляет правила загрузки.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОбновитьПравилаЗагрузки(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекОбъект = Объект;
	Иначе
		ТекОбъект = ТекущийОбъект;
	КонецЕсли;
	
	// Запомним ключевые поля.
	КлючевыеПоля = Новый Массив;
	
	НайденныеСтроки = ТекОбъект.ПравилаЗагрузки.НайтиСтроки(Новый Структура("КлючевоеПоле", Истина));
	
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		КлючевыеПоля.Добавить(ТекСтрока.ИмяРеквизита);
	КонецЦикла;
	
	НомерСтроки = 1;
	ТекОбъект.ПравилаЗагрузки.Очистить();
	
	СтрокиДереваПравилЗагрузки = ПравилаЗагрузкиДерево.ПолучитьЭлементы();
	
	Для Каждого СтрокаПравилЗагрузки Из СтрокиДереваПравилЗагрузки Цикл
		
		ПодчиненныеСтроки = СтрокаПравилЗагрузки.ПолучитьЭлементы();
		
		ЭтоШапка = (СтрокаПравилЗагрузки.ВидДанных = "Шапка");
		
		Если ЭтоШапка Тогда
			
			Для Каждого ПравилоШапки Из ПодчиненныеСтроки Цикл
				
				НоваяСтрока = ТекОбъект.ПравилаЗагрузки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПравилоШапки);
				
				НоваяСтрока.КлючевоеПоле = Не (КлючевыеПоля.Найти(НоваяСтрока.ИмяРеквизита) = Неопределено);
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаТабЧасть Из ПодчиненныеСтроки Цикл
				
				СтрокиТабЧасти = СтрокаТабЧасть.ПолучитьЭлементы();
				
				Для Каждого ПравилоШапки Из СтрокиТабЧасти Цикл
					
					НоваяСтрока = ТекОбъект.ПравилаЗагрузки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПравилоШапки);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТекущийОбъект = Неопределено Тогда
		
		// Сохранение настроек построителя для выгрузки списков.
		Для каждого СтрокаТаблицы Из ТекОбъект.ПравилаЗагрузки Цикл
			
			ВидОбъекта = фКэшЗначений.СоотТипВидОбъекта[СтрокаТаблицы.Тип];
			Если НЕ ВидОбъекта = Неопределено Тогда
				ИмяТипа = бит_ОбменДанными_Excel.ПолучитьИмяТипаОбъекта(СтрокаТаблицы.ИмяОбъекта, ВидОбъекта);
			ИначеЕсли СтрокаТаблицы.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Строка
				ИЛИ СтрокаТаблицы.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Число
				ИЛИ СтрокаТаблицы.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Булево
				ИЛИ СтрокаТаблицы.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.Дата Тогда
				
				ИмяТипа = Строка(СтрокаТаблицы.Тип);
			Иначе
				ИмяТипа = "Строка";
			КонецЕсли;
			ОписаниеТипа = Новый ОписаниеТипов(ИмяТипа);
			СтрокаТаблицы.СтрТип = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ОписаниеТипа);
			
			ТекНастройка = Неопределено;
			Если НастройкиОтборПорядок.Свойство(СтрокаТаблицы.ИмяРеквизита, ТекНастройка) Тогда
				
				СтрокаТаблицы.НастройкиУстановлены = Истина;
				
				ТекНастройка.Изменено = Ложь;
				СтрокаТаблицы.ХранилищеНастроек = Новый ХранилищеЗначения(ТекНастройка);
					
			Иначе	
				
				СтрокаТаблицы.НастройкиУстановлены = Ложь;
				СтрокаТаблицы.ХранилищеНастроек    = Неопределено;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;	
		
	// Объект.АлгоритмПоискаСуществующихОбъектов	= ?(Объект.ВидОбъекта = "РегистрСведений" 
	// 												ИЛИ Объект.ИспользоватьНестандартныйАлгоритмПоиска,
	// 									 				Код_АлгоритмПоиска,
	// 													Объект.АлгоритмПоискаСуществующихОбъектов);
	// Объект.АлгоритмПередЗагрузкой		 = Код_ПередЗагрузкой;
	// Объект.АлгоритмПослеЗагрузки		 = Код_ПослеЗагрузки;
	// Объект.АлгоритмПередЗаписьюОбъекта = Код_ПередЗаписьюОбъекта;
	// Объект.АлгоритмПослеЗаписиОбъекта	 = Код_ПослеЗаписиОбъекта;
	
КонецПроцедуры // ОбновитьПравилаЗагрузки()

&НаСервере
Функция ПолучитьМассивТиповТекущегоРеквизита(ИДСтроки)
	
	ТекущаяСтрока = ПравилаЗагрузкиДерево.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	// Получим массив типов текущего реквизита для выбора.
    МассивТипов = бит_ОбменДанными_Excel.УдалитьПовторяющиесяЭлементыМассива(СправочникОбъект.ПолучитьМассивТиповРеквизитаДляВыбора(ТекущаяСтрока), Истина);
	
	Возврат МассивТипов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияПравилаЗагрузкиРеквизитаСервер(ИДСтроки)
	
	ТекущаяСтрока = ПравилаЗагрузкиДерево.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	СправочникОбъект.ЗаполнитьЗначенияПравилаЗагрузкиРеквизита(ТекущаяСтрока,,, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРеквизитовПоиска(ИДСтроки)
	
	ТекущаяСтрока = ПравилаЗагрузкиДерево.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	ЭтоПроизвольныйАлгоритм = (ТекущаяСтрока.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм);
	
	ЭтоРеквизитРодитель = Ложь;
	Если ТекущаяСтрока.ИмяРеквизита = "Родитель" Тогда
		ЭтоРеквизитРодитель = ОбъектИерархический;
	КонецЕсли;
	
	РодительСтроки = ТекущаяСтрока.ПолучитьРодителя();
	ПодчиненныеСтроки = РодительСтроки.ПолучитьЭлементы();
	
	МассивИмен = Новый Массив;
	Для Каждого ТекСтрока Из ПодчиненныеСтроки Цикл
		
		МассивИмен.Добавить(ТекСтрока.ИмяВФайле);
		
	КонецЦикла;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаРеквизитов = ?(ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель,
						МассивИмен,
						СправочникОбъект.ПолучитьРеквизитыОбъектаТекущейСтрокиДляВыбора(ТекущаяСтрока, Ложь));
	СписокВыбора = СправочникОбъект.ПолучитьСписокЗначенийДляВыбора(ТаблицаРеквизитов,
												?(ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель, Истина, Ложь),
												?(ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель,
												БиблиотекаКартинок.бит_од_Excel,
												БиблиотекаКартинок.бит_од_Реквизит));
												
	Возврат СписокВыбора;											
												
КонецФункции

&НаСервере
Процедура ВыполнитьСопоставлениеИменВФайле()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл
		
		ТекИмяКолонки = ТекСтрока.ИмяВФайле;
		
		// Получим реквизиты объекта.
		ТаблицаРеквизитов = СправочникОбъект.ПолучитьРеквизитыОбъектаДляВыбора(ТекСтрока.ВидДанных);
		
		// Заполним значения в текущей строке.
		СправочникОбъект.ЗаполнитьЗначенияПравилаЗагрузкиРеквизита(ТекСтрока, ТекИмяКолонки, ТаблицаРеквизитов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеПоля(ДанныеПоля, ТекСтрока, МетаОбъект)
	
	Если ТекСтрока = "ИмяТабЧасти" Тогда
		
		НастройкиОбмена = Новый Структура;
		НастройкиОбмена.Вставить("Выгружать", Ложь);
		НастройкиОбмена.Вставить("ВыражениеПредставления", "");
		
		ДанныеПоля.Вставить("Имя"	, "ИмяТабЧасти");
		ДанныеПоля.Вставить("Синоним", "Имя табличной части");
		ДанныеПоля.Вставить("СтрТип", "Строка");
		ДанныеПоля.Вставить("НастройкиОбмена", НастройкиОбмена);
		
	ИначеЕсли НЕ ТекСтрока.ВидДанных = "Шапка"	Тогда
		
		НастройкиОбмена = Новый Структура;
		НастройкиОбмена.Вставить("Выгружать", ТекСтрока.ВыгружатьСписок);
		НастройкиОбмена.Вставить("ВыражениеПредставления", ТекСтрока.ВыражениеПредставления);
		
		Если бит_РаботаСМетаданными.ЕстьРеквизитТабЧасти(ТекСтрока.ИмяРеквизита, МетаОбъект, ТекСтрока.ВидДанных) Тогда
			СинонимРеквизита = МетаОбъект.ТабличныеЧасти[ТекСтрока.ВидДанных].Реквизиты[ТекСтрока.ИмяРеквизита].Синоним;
		Иначе
			СинонимРеквизита = ТекСтрока.ИмяРеквизита;
		КонецЕсли;
		
		ДанныеПоля.Вставить("Имя"	, ТекСтрока.ИмяРеквизита);
		ДанныеПоля.Вставить("Синоним", СинонимРеквизита);
		ДанныеПоля.Вставить("СтрТип", ТекСтрока.СтрТип);
		ДанныеПоля.Вставить("НастройкиОбмена", НастройкиОбмена);
		
	Иначе
		
		НастройкиОбмена = Новый Структура;
		НастройкиОбмена.Вставить("Выгружать", ТекСтрока.ВыгружатьСписок);
		НастройкиОбмена.Вставить("ВыражениеПредставления", ТекСтрока.ВыражениеПредставления);
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ТекСтрока.ИмяРеквизита, МетаОбъект) Тогда
			СинонимРеквизита = МетаОбъект.Реквизиты[ТекСтрока.ИмяРеквизита].Синоним;
		Иначе
			СинонимРеквизита = ТекСтрока.ИмяРеквизита;
		КонецЕсли;
		
		ДанныеПоля.Вставить("Имя"	, ТекСтрока.ИмяРеквизита);
		ДанныеПоля.Вставить("Синоним", СинонимРеквизита);
		ДанныеПоля.Вставить("СтрТип", ТекСтрока.СтрТип);
		ДанныеПоля.Вставить("НастройкиОбмена", НастройкиОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруДанныхКолонокДляВыгрузкиВExcel()
	
	СтруктураДанных = Новый Структура;
	
	Если Объект.ВидОбъекта = "РегистрСведений" Тогда
		МетаОбъект = Метаданные.РегистрыСведений[Объект.ИмяОбъекта];
	Иначе
		МетаОбъект = Метаданные[фКэшЗначений.СтруктураСсылочныхТипов[Объект.ВидОбъекта].ИмяКоллекции][Объект.ИмяОбъекта];
	КонецЕсли;
	
	ПравилаЗагрузкиДляРазбиения = Объект.ПравилаЗагрузки.Выгрузить();
	
	// Разобъем таблицу правил на две таблицы:
	// 1) "ПравилаЗагрузкиШапки" - правила загрузки шапки.
	// 2) "ПравилаЗагрузкиТЧ" 	 - правила загрузки значений табличных частей.
	СтруктураТаблиц = бит_ОбменДанными_Excel.РазбитьТаблицуПравилЗагрузкиНаДвеТаблицы(ПравилаЗагрузкиДляРазбиения);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючевоеПоле", Истина);
	
	КлючевыеПоля = СтруктураТаблиц.ПравилаЗагрузкиШапки.НайтиСтроки(СтруктураОтбора);
	
	МассивКолонок = Новый Массив;
	
	СтруктураПолей = Новый Структура;
	
	Для Каждого ТекСтрока Из КлючевыеПоля Цикл
		Если НЕ МассивКолонок.Найти(ТекСтрока.ИмяВФайле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоля = Новый Структура;
		ЗаполнитьОписаниеПоля(ДанныеПоля, ТекСтрока, МетаОбъект);
		
		СтруктураПолей.Вставить(ТекСтрока.ИмяВФайле, ДанныеПоля);
		МассивКолонок.Добавить(ТекСтрока.ИмяВФайле);
	КонецЦикла;
	
	СтруктураДанных.Вставить("КлючевыеПоля", СтруктураПолей);
	
	СтруктураПолей = Новый Структура;
	
	Для Каждого ТекСтрока Из СтруктураТаблиц.ПравилаЗагрузкиШапки Цикл
		Если НЕ МассивКолонок.Найти(ТекСтрока.ИмяВФайле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоля = Новый Структура;
		ЗаполнитьОписаниеПоля(ДанныеПоля, ТекСтрока, МетаОбъект);
		
		СтруктураПолей.Вставить(ТекСтрока.ИмяВФайле, ДанныеПоля);
		МассивКолонок.Добавить(ТекСтрока.ИмяВФайле);
	КонецЦикла;
	
	СтруктураДанных.Вставить("Шапка", СтруктураПолей);
	
	СтруктураПолей = Новый Структура;
	
	Если НЕ СтруктураТаблиц.ПравилаЗагрузкиТЧ.Количество() = 0 Тогда
		ДанныеПоля = Новый Структура;
		ЗаполнитьОписаниеПоля(ДанныеПоля, "ИмяТабЧасти", МетаОбъект);
		
		СтруктураПолей.Вставить("ИмяТабЧасти", ДанныеПоля);
		МассивКолонок.Добавить("ИмяТабЧасти");
	КонецЕсли;
	
	Для Каждого ТекСтрока Из СтруктураТаблиц.ПравилаЗагрузкиТЧ Цикл
		Если НЕ МассивКолонок.Найти(ТекСтрока.ИмяВФайле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоля = Новый Структура;
		ЗаполнитьОписаниеПоля(ДанныеПоля, ТекСтрока, МетаОбъект);
		
		СтруктураПолей.Вставить(ТекСтрока.ИмяВФайле, ДанныеПоля);
		МассивКолонок.Добавить(ТекСтрока.ИмяВФайле);
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТабЧасти", СтруктураПолей);
	
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруИменОбъектовДляПоляБезСопоставленияСервер(ИДСтроки)
	
	ТекущаяСтрока = ПравилаЗагрузкиДерево.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураИмен = СправочникОбъект.ПолучитьСтруктуруИменОбъектовДляПоляБезСопоставления(ТекущаяСтрока);
	
	Возврат СтруктураИмен;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокВыбораИмениОбъекта(ИДСтроки)
	
	ТекущаяСтрока = ПравилаЗагрузкиДерево.НайтиПоИдентификатору(ИДСтроки);
	
	СписокВыбора = Новый СписокЗначений;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	ТаблицаОбъектов = СправочникОбъект.ПолучитьТаблицуОбъектовСоставногоРеквизитаДляВыбора(ТекущаяСтрока);
	СписокВыбора = СправочникОбъект.ПолучитьСписокЗначенийДляВыбора(ТаблицаОбъектов,, СправочникОбъект.ПолучитьКартинкуПоТипу(ТекущаяСтрока));
	
	Возврат СписокВыбора;
	
КонецФункции

// Процедура обработчик изменения имени объекта в строке 
// табличного поля "ПравилаЗагрузкиДерево".
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
// 
&НаСервере
Процедура ОбработатьИзменениеИмениОбъектаВСтроке(ИДСтроки)
	
	ТекущаяСтрока = ПравилаЗагрузкиДерево.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	// Проверим принадлежность реквизита поиска к реквизитам выбранного объекта.
    СправочникОбъект.ПроверитьПринадлежностьРеквизитаКРеквизитамОбъекта(ТекущаяСтрока);

	// Заполним значения правила загрузки.
    СправочникОбъект.ЗаполнитьЗначенияПравилаЗагрузкиРеквизита(ТекущаяСтрока,,,,, Истина);
	
	ЭтоПроизвольныйАлгоритм = (ТекущаяСтрока.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм);
	ЭтоРеквизитРодитель = Ложь;
	Если ТекущаяСтрока.ИмяРеквизита = "Родитель" Тогда
		КоллекцияРодитель = ПолучитьСсылкуКоллекцииРодителя();
		Если КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники Тогда
			ЭтоРеквизитРодитель = (Метаданные.Справочники[Объект.ИмяОбъекта].Иерархический);
	
		КонецЕсли;
	КонецЕсли;

	Если ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель Тогда
		РодительСтроки = ТекущаяСтрока.ПолучитьРодителя();
		ЭлементыРодителя = РодительСтроки.ПолучитьЭлементы();
		МассивИменВФайле = Новый Массив;
		Для Каждого ПодчиненныйЭлемент Из ЭлементыРодителя Цикл
			МассивИменВФайле.Добавить(ПодчиненныйЭлемент.ИмяВФайле);
		КонецЦикла;
	КонецЕсли;
	
	// Получаем реквизиты текущего объекта строки для выбора.
	ТаблицаРеквизитов = ?(ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель,
						  МассивИменВФайле,
						  СправочникОбъект.ПолучитьРеквизитыОбъектаТекущейСтрокиДляВыбора(ТекущаяСтрока, Ложь));
	СписокВыбора = СправочникОбъект.ПолучитьСписокЗначенийДляВыбора(ТаблицаРеквизитов,
												   ?(ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель, Истина, Ложь),
												   ?(ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель,
													 БиблиотекаКартинок.бит_од_Excel,
													 БиблиотекаКартинок.бит_од_Реквизит));
	Элементы.ПравилаЗагрузкиДеревоРеквизитПоиска.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // ОбработатьИзменениеИмениОбъектаВСтроке()

&НаСервере
Процедура ПриИзмененииИмениРеквизита(ИДСтроки, ЗадатьВопрос)
	
	ТекущаяСтрока = ПравилаЗагрузкиДерево.НайтиПоИдентификатору(ИДСтроки);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	// Проверим наличие реквизита у объекта.
    ПроверитьНаличиеРеквизитаУОбъекта(ТекущаяСтрока, Отказ);
	ЗадатьВопрос = Отказ;
    
	Если Не Отказ Тогда
		
        // Заполним значения правила загрузки.
        СправочникОбъект.ЗаполнитьЗначенияПравилаЗагрузкиРеквизита(ТекущаяСтрока);
		
		// Получим массив типов текущего реквизита для выбора.
		МассивТипов  = бит_ОбменДанными_Excel.УдалитьПовторяющиесяЭлементыМассива(СправочникОбъект.ПолучитьМассивТиповРеквизитаДляВыбора(ТекущаяСтрока, Ложь), Истина);
		СписокВыбора = СправочникОбъект.ПолучитьСписокЗначенийДляВыбора(МассивТипов, Истина);
		Элементы.ПравилаЗагрузкиДеревоТип.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
		
		// Получаем реквизиты текущего объекта строки для выбора.
		ТаблицаРеквизитов = СправочникОбъект.ПолучитьРеквизитыОбъектаТекущейСтрокиДляВыбора(ТекущаяСтрока, Ложь);
		СписокВыбора = СправочникОбъект.ПолучитьСписокЗначенийДляВыбора(ТаблицаРеквизитов,, БиблиотекаКартинок.бит_од_Реквизит);
		
		ЭлементУправления = Элементы.ПравилаЗагрузкиДеревоРеквизитПоиска;
		ЭлементУправления.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
		
		ЭтоПроизвольныйАлгоритм = (ТекущаяСтрока.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм);
		ЭтоРеквизитРодитель = Ложь;
		Если ТекущаяСтрока.ИмяРеквизита = "Родитель" Тогда
			КоллекцияРодитель = ПолучитьСсылкуКоллекцииРодителя();
			Если КоллекцияРодитель = Справочники.бит_НастройкиЗагрузкиИзExcel.Справочники Тогда
				ЭтоРеквизитРодитель = (Метаданные.Справочники[Объект.ИмяОбъекта].Иерархический);
		
			КонецЕсли;
		КонецЕсли;
        ЭлементУправления.РедактированиеТекста = ?(ЭтоПроизвольныйАлгоритм И ЭтоРеквизитРодитель, Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет наличие реквизита у объекта.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаТабличнойЧасти.
//  Отказ         - Булево.
// 
&НаСервере
Процедура ПроверитьНаличиеРеквизитаУОбъекта(ТекущаяСтрока, Отказ)
	
    Если ТекущаяСтрока = Неопределено
        Или Не ЗначениеЗаполнено(ТекущаяСтрока.ИмяРеквизита) Тогда
        Возврат
    КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
    // Получим реквизиты объекта.
    ТаблицаРеквизитов = СправочникОбъект.ПолучитьРеквизитыОбъектаДляВыбора(ТекущаяСтрока.ВидДанных);
    
    // Если есть реквизит с именем колонки, тогда
    // заполним имя реквизита.
    Если ТаблицаРеквизитов.Найти(ТекущаяСтрока.ИмяРеквизита, "ИмяРеквизита") = Неопределено Тогда
        
        Отказ = Истина;
        
    КонецЕсли;
    
КонецПроцедуры // ПроверитьНаличиеРеквизитаУОбъекта()

&НаСервере
Процедура ВыполнитьЗагрузкуПравилПоРеквизитам()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	// Получаем реквизиты объекта загрузки для выбора.
	ТаблицаРеквизитов = СправочникОбъект.ПолучитьРеквизитыОбъектаДляВыбора();
	
	// Удалим строку со значением "Без_Сопоставления" из таблицы реквизитов.
	СправочникОбъект.УдалитьСтрокуСоЗначением_Без_Сопоставления(ТаблицаРеквизитов);
	
	// Заполнить дополнительные значения правил загрузки.
	СправочникОбъект.ДополнитьИЗагрузитьТаблицуПравилЗагрузки(ТаблицаРеквизитов, Истина);
	
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРегистров()
	
	МетаОбъект = Метаданные.Документы.Найти(Объект.ИмяОбъекта);
	
	СписокРегистров.Очистить();
	
	Если МетаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПравил = РеквизитФормыВЗначение("ПравилаЗагрузкиДерево");
	
	Для Каждого ТекДвижение Из МетаОбъект.Движения Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидДанных", "Движения_"+ТекДвижение.Имя);
		
		НайденныеСтроки = ДеревоПравил.Строки.НайтиСтроки(СтруктураОтбора,Истина);
		
		ОтображатьРегистр = НайденныеСтроки.Количество() > 1;
		
		ВидРегистра = бит_ОбменДанными_Excel.ПолучитьВидОбъектаПоМетаданным(ТекДвижение);
		
		Если ВидРегистра = "РегистрСведений" Тогда
			КартинкаРегистра = БиблиотекаКартинок.РегистрСведений;
		ИначеЕсли ВидРегистра = "РегистрНакопления" Тогда
			КартинкаРегистра = БиблиотекаКартинок.РегистрНакопления;
		ИначеЕсли ВидРегистра = "РегистрБухгалтерии" Тогда
			КартинкаРегистра = БиблиотекаКартинок.РегистрБухгалтерии;
		Иначе
			КартинкаРегистра = Неопределено;
		КонецЕсли;
		
		СписокРегистров.Добавить(ТекДвижение.Имя, ТекДвижение.Синоним, ОтображатьРегистр, КартинкаРегистра);
	КонецЦикла;
	
	СписокРегистров.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставРегистровВДереве()
	
	Если СписокРегистров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоПравил = РеквизитФормыВЗначение("ПравилаЗагрузкиДерево");
	
	СтрокаТабЧасти = ДеревоПравил.Строки.Найти("Табличные части", "ВидДанных");
	
	// Изменение кода. Начало. 07.09.2016{{
	Если СтрокаТабЧасти = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	// Изменение кода. Конец. 07.09.2016}}

	
	Для Каждого ТекРегистр Из СписокРегистров Цикл
		
		ИмяТабЧасти = "Движения_"+ТекРегистр.Значение;
		
		НайденнаяСтрока = СтрокаТабЧасти.Строки.Найти(ИмяТабЧасти, "ВидДанных");
		
		Если ТекРегистр.Пометка Тогда
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = СтрокаТабЧасти.Строки.Добавить();
				НоваяСтрока.ВидДанных = ИмяТабЧасти;
				НоваяСтрока.ВерхнийУровень = Истина;
			КонецЕсли;
		Иначе
			Если НЕ НайденнаяСтрока = Неопределено Тогда 
				СтрокаТабЧасти.Строки.Удалить(НайденнаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПравил, "ПравилаЗагрузкиДерево");
	
	// Обновим нумирацию строк дерева
	УстановитьНомераСтрок(ПравилаЗагрузкиДерево, 1);
	
КонецПроцедуры

// Процедура обновляет настройки отбора/порядка.
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.бит_ВидыПроформ.
// 
&НаСервере
Процедура ОбновитьНастройкиОтбораПорядка(ТекОбъект, ДеревоПравил)
	
	Для каждого СтрокаТаблицы Из ТекОбъект.ПравилаЗагрузки Цикл
		
		Если СтрокаТаблицы.НастройкиУстановлены Тогда
			
			СтрНастр = СтрокаТаблицы.ХранилищеНастроек.Получить();
			
			Если ТипЗнч(СтрНастр) = Тип("Структура") Тогда
				
				НастройкиОтборПорядок.Вставить(СтрокаТаблицы.ИмяРеквизита, СтрНастр);
				
				// Обновление представления настроек
				СтрОтбор = Новый Структура("ИмяРеквизита", СтрокаТаблицы.ИмяРеквизита);
				
				МассивСтрок = ДеревоПравил.Строки.НайтиСтроки(СтрОтбор,Истина);
				Для каждого СтрДанныеФормы Из МассивСтрок Цикл
					
					СтрДанныеФормы.ОтборПорядок = СтрНастр.ПредставлениеНастроек;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьНастройкиОтбораПорядка() 

&НаСервере
Функция ПодготовитьДанныеДляВыгрузкиШаблона() 

	МассивНастроек = Новый Массив;
	
	МассивНастроек.Добавить(Объект.Ссылка);
		
	// Подготовка псевдометаданных и данных необходимых для формирования шаблона
	// МассивДанных = Новый Массив;	
	// Для каждого ВидПроформы Из МассивВидов Цикл
	// 	
	// 	СтрПар = Новый Структура;
	// 	СтрПар.Вставить("ПсевдоМетаданные", Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(ВидПроформы));
	// 	СтрПар.Вставить("ВидПроформы", ВидПроформы);
	// 	СтрПар.Вставить("Наименование", ВидПроформы.Наименование);
	// 	
	// 	МассивДанных.Добавить(СтрПар);
	// 	
	// КонецЦикла; 
	
	// Подготовка списков для выгрузки
	СпискиВыгрузки = Новый Соответствие;
	ВидыПредставлений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНастроек",МассивНастроек);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПравилаЗагрузки.СтрТип,
	               |	ПравилаЗагрузки.ВыражениеПредставления
	               |ИЗ
	               |	Справочник.бит_НастройкиЗагрузкиИзExcel.ПравилаЗагрузки КАК ПравилаЗагрузки
	               |ГДЕ
	               |	ПравилаЗагрузки.ВыгружатьСписок
	               |	И ПравилаЗагрузки.Ссылка В(&МассивНастроек)
	               |	И (НЕ ПравилаЗагрузки.НастройкиУстановлены)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПравилаЗагрузки.ИмяРеквизита,
	               |	ПравилаЗагрузки.СтрТип,
	               |	ПравилаЗагрузки.ВыражениеПредставления,
	               |	ПравилаЗагрузки.ХранилищеНастроек
	               |ИЗ
	               |	Справочник.бит_НастройкиЗагрузкиИзExcel.ПравилаЗагрузки КАК ПравилаЗагрузки
	               |ГДЕ
	               |	ПравилаЗагрузки.Ссылка В(&МассивНастроек)
	               |	И ПравилаЗагрузки.ВыгружатьСписок
	               |	И ПравилаЗагрузки.НастройкиУстановлены";			   
				   
				   
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Получение списков без отборов и порядка
	ТаблицаНастройки = МассивРезультатов[0].Выгрузить();
	ТаблицаНастройки.Свернуть("СтрТип, ВыражениеПредставления");
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
		
		ТекстЗапроса = ПодготовитьТекстЗапросаДляВыгрузки(СтрокаТаблицы.СтрТип, СтрокаТаблицы.ВыражениеПредставления);
		СписокВыгрузки = ЗаполнитьСписокВыгрузки(ТекстЗапроса, СтрокаТаблицы.СтрТип);
		
		Если СписокВыгрузки.Количество() > 0 Тогда
			
			Если ПустаяСтрока(СтрокаТаблицы.ВыражениеПредставления) Тогда
				
				Ключ = СтрокаТаблицы.СтрТип;
				
			Иначе	
				
				ВидыПредставлений.Добавить(СтрокаТаблицы.СтрТип+"/"+СтрокаТаблицы.ВыражениеПредставления);
				Ключ = СтрокаТаблицы.СтрТип+"_PresentationType_"+Формат(ВидыПредставлений.Количество(),"ЧРГ=");
				
			КонецЕсли; 
			
			СпискиВыгрузки.Вставить(Ключ, СписокВыгрузки);
			
		КонецЕсли; 
		
	КонецЦикла; // ТаблицаНастройки
	
	// Получение списков с учетом настроек построителя - отборами и порядком.
	ТаблицаНастройки = МассивРезультатов[1].Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
		
		ТекстЗапроса = ПодготовитьТекстЗапросаДляВыгрузки(СтрокаТаблицы.СтрТип, СтрокаТаблицы.ВыражениеПредставления, СтрокаТаблицы.ИмяРеквизита);
		СтрНастр = СтрокаТаблицы.ХранилищеНастроек.Получить();
		СписокВыгрузки = ЗаполнитьСписокВыгрузки(ТекстЗапроса, СтрокаТаблицы.СтрТип, СтрНастр, "Построитель");
		
		Если СписокВыгрузки.Количество() > 0 Тогда
			
			СпискиВыгрузки.Вставить(СтрокаТаблицы.ИмяРеквизита, СписокВыгрузки);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Обязательные списки - Булево и Валюты
	ВыгрузитьОбязательныеСписки(СпискиВыгрузки);
	
	ДанныеВыгрузки = Новый Структура;
	ДанныеВыгрузки.Вставить("СпискиВыгрузки", СпискиВыгрузки);
	ДанныеВыгрузки.Вставить("ВидыПредставлений", ВидыПредставлений);	
	
	Возврат ДанныеВыгрузки;
	
КонецФункции // ПодготовитьДанныеДляВыгрузкиШаблона()

&НаСервере
Функция ПодготовитьТекстЗапросаДляВыгрузки(СтрТип, ВыражениеПредставления = "", ИмяРеквизита="") 
		
	ТекстЗапроса = "";
	
	// Заготовки для формирования текста запроса.
	ШаблонЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |   ""%ИмяПолное%"" КАК ИмяПолное,
					|   ""%ИмяОбъекта%"" КАК ИмяОбъекта,
					|   %ВыражениеПредставления% КАК Представление,
	                |	ТекТаб.Ссылка КАК Ссылка
					|{ВЫБРАТЬ
	                | Представление.*,
	                | Ссылка.*}
	                |ИЗ
	                |	%ИмяТаблицы% КАК ТекТаб
					|";
					
	ШаблонОбъединить = "
	                   |ОБЪЕДИНИТЬ ВСЕ
	                   |";
					   
    ШаблонНеГруппа = "
                    |ГДЕ
	                |(НЕ ТекТаб.ЭтоГруппа)
					|";
					
	ШаблонГруппа = "
                    |ГДЕ
	                |(ТекТаб.ЭтоГруппа)
					|";				
					
	ШаблонИнстр = "
				   |{ГДЕ
	               | ТекТаб.Ссылка.*}
                   |{УПОРЯДОЧИТЬ ПО
	               | Ссылка.*}
				   |";

					   
	ШаблонАвтоУп	= "АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Типы = бит_ОбщегоНазначенияКлиентСервер.ПолучитьТипыИзСтроки(СтрТип);
	
	Описание = Новый ОписаниеТипов(Типы);
	
	Для каждого ТекТип Из Типы Цикл
		
		Если НЕ бит_ОбщегоНазначенияКлиентСервер.ЭтоПримитивныйТип(ТекТип) Тогда
			
			МетаОбъект = Метаданные.НайтиПоТипу(ТекТип);
			
			Если НЕ МетаОбъект = Неопределено Тогда
				
				ИмяПолное = МетаОбъект.ПолноеИмя();
				СтрИмена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ИмяПолное);
				ИмяТаблицы = СтрИмена.ИмяКласса+"."+СтрИмена.ИмяОбъекта;					  
				
				ТекстТекТаблица = ШаблонЗапроса;
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ИмяПолное%", ИмяПолное);
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ИмяОбъекта%", СтрИмена.ИмяОбъекта);					  
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ИмяТаблицы%",ИмяТаблицы);
				
				Если НЕ ПустаяСтрока(ВыражениеПредставления) Тогда
					
					ВыражениеПредставления = СтрЗаменить(ВыражениеПредставления,"Ссылка.","ТекТаб.");
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ВыражениеПредставления%",ВыражениеПредставления);						  
					
				Иначе	
					
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ВыражениеПредставления%","ПредставлениеСсылки(ТекТаб.Ссылка)");
					
				КонецЕсли; 
				
				Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
					
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"РАЗРЕШЕННЫЕ","");
					
				КонецЕсли; 
				
				// Группы не выгружаем
				Если бит_ОбщегоНазначения.ОбъектПринадлежитКоллекцииМетаданных("Справочники", СтрИмена.ИмяОбъекта) Тогда
					
					Если МетаОбъект.Иерархический 
						И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
						Если ИмяРеквизита = "Родитель" Тогда
							ТекстТекТаблица = ТекстТекТаблица+ШаблонГруппа;
						Иначе
							ТекстТекТаблица = ТекстТекТаблица+ШаблонНеГруппа;
						КонецЕсли;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				ТекстЗапроса = ТекстЗапроса+?(ПустаяСтрока(ТекстЗапроса),"",ШаблонОбъединить)+ТекстТекТаблица;
				
			КонецЕсли; 
			
		КонецЕсли; // Тип не примитивный
		
	КонецЦикла; // Типы
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		ТекстЗапроса = ТекстЗапроса+ШаблонИнстр+ШаблонАвтоУп;
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПодготовитьТекстЗапросаДляВыгрузки()

// Функция извлекает из БД список для выгрузки в Эксель.
// В Эксель список будет установлен в качестве списка выбора для полей соответсвующих типов.
// 
// Параметры:
//   ТекстЗапроса - Строка
//   СтрТип - Строка
// 
// Возвращаемое значение:
//  СписокВыгрузки - СписокЗначений.
//
&НаСервере
Функция ЗаполнитьСписокВыгрузки(ТекстЗапроса, СтрТип, СтрНастроек = Неопределено, Режим = "Запрос")
	
	СписокВыгрузки = Новый СписокЗначений;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		Если Режим = "Построитель" Тогда
			
			Построитель = Новый ПостроительЗапроса;
			Построитель.Текст = ТекстЗапроса;
			// Построитель.ЗаполнитьНастройки();
			
			Если ТипЗнч(СтрНастроек) = Тип("Структура") Тогда
			
				СтруктураНастроек = СтрНастроек.СтруктураНастроек;
				
				Если СтруктураНастроек.Свойство("Отбор") Тогда
				
					Для каждого СтрОтбор Из СтруктураНастроек.Отбор Цикл
					
						   НовыйЭлОтбора = Построитель.Отбор.Добавить(СтрОтбор.ПутьКДанным);
						   бит_ОбщегоНазначения.ЗаполнитьЭлементОтбора(СтрОтбор, НовыйЭлОтбора);
					
					КонецЦикла; 
				
				КонецЕсли; 
				
				Если СтруктураНастроек.Свойство("Порядок") Тогда
					
					бит_МеханизмПолученияДанных.УстановитьПорядокПостроителя(СтруктураНастроек.Порядок, Построитель, НаправлениеСортировки);
				
				КонецЕсли; 
				
			КонецЕсли; 
			
			Попытка
			
				Построитель.Выполнить();
				Результат = Построитель.Результат;
			
			Исключение
				
				ТекстСообщения = "Не удалось выгрузить список для типа ""%1%"" по причине ""%2%"".";
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																							, СтрТип
																							, Строка(ОписаниеОшибки()));
																							
				
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				Результат = Неопределено;
				
			КонецПопытки;
			
		Иначе	
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			
			Попытка
				
				Результат = Запрос.Выполнить();
				
			Исключение
				
				ТекстСообщения = "Не удалось выгрузить список для типа ""%1%"" по причине ""%2%"".";
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
																							, СтрТип
																							, Строка(ОписаниеОшибки()));
																							
				
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				Результат = Неопределено;
				
			КонецПопытки;
			
			
		КонецЕсли; 
		
		
		Если ТипЗнч(Результат) = Тип("РезультатЗапроса") Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Найти(Выборка.ИмяПолное,"Перечисление") > 0 Тогда
					
					ТекПеречисление = Перечисления[Выборка.ИмяОбъекта];
					ИмяЗначения = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(ТекПеречисление, Выборка.Ссылка);
					
					СтрСсылка = Выборка.ИмяПолное+"."+ИмяЗначения;
					СтрПредставление = ИмяЗначения;
					
					
				Иначе	 
					
					СтрСсылка = Выборка.ИмяПолное+"/"+Строка(Выборка.Ссылка.УникальныйИдентификатор());
					СтрПредставление = Выборка.Представление;
					
				КонецЕсли; 
				
				СписокВыгрузки.Добавить(СтрСсылка, СтрПредставление);
				
				
			КонецЦикла; // Выборка
			
		КонецЕсли; // ЕстьРезультат
		
	КонецЕсли; 
	
	Возврат СписокВыгрузки;
	
КонецФункции // ЗаполнитьСписокВыгрузки()

// Процедура готовит списки, которые нужно выгружать обязательно. 
// 
// Параметры:
//  СпискиВыгрузки - Булево.
// 
&НаСервере
Процедура ВыгрузитьОбязательныеСписки(СпискиВыгрузки)
	
	// Булево
	СписокБулево = Новый СписокЗначений;
	СписокБулево.Добавить("Истина", "Да");
	СписокБулево.Добавить("Ложь", "Нет");
	
	СпискиВыгрузки.Вставить("Булево", СписокБулево);
	
КонецПроцедуры // ВыгрузитьОбязательныеСписки()	

&НаКлиенте
Процедура ВыгрузитьСтруктуруИменКолонки_ИмяВФайлеВExcel() 
	
	ЕстьОшибки = Ложь;
	
	Если Объект.НомерСтрокиСИменамиКолонок = 0
		ИЛИ Объект.НомерНачальнойКолонки = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Номера колонок с которых начинается старт чтения не могут быть меньше 1!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,ЕстьОшибки);
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	// Создадим приложение Excel.
	Excel = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, ЕстьОшибки);
	
	Если Excel = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	XlEnums = бит_ОбменДаннымиЭксельКлиентСервер.InitExcelEnums();
	
	Попытка
		
		СтруктураКолонок = ПолучитьСтруктуруДанныхКолонокДляВыгрузкиВExcel();
		
		Книга = Excel.Application.WorkBooks.Add(1);
		
		ДанныеДляВыгрузки = ПодготовитьДанныеДляВыгрузкиШаблона();
		
		// Загрузка данных для выпадающих списков
		LoadedLists = бит_ПроформыКлиентСервер.UnloadLists(Книга, XlEnums, ДанныеДляВыгрузки);
		
		Лист = Книга.WorkSheets.Add(Книга.Worksheets(Книга.Worksheets.Count));
		
		// Добавим и оформим лист для загрузки структуры
		// правил загрузки.
		ExcelЛист 	   = Excel.ActiveSheet;
		ExcelЛист.Name = СокрЛП(Объект.ИмяЛиста);
		
		// Устанавливаем ширину колонок - 15.
		бит_ОбменДаннымиЭксельКлиентСервер.УстановитьШиринуКолонокДляЛиста(ExcelЛист, 15);
		
		// Устанавливаем формат ячейки - "Текстовый".
		ExcelЛист.Cells.NumberFormat = "@";
		
		СтруктураЦветов = Новый Структура;
		СтруктураЦветов.Вставить("КлючевыеПоля"	, 10092543); // Новый Цвет(255, 255, 153)
		СтруктураЦветов.Вставить("Шапка"		, 10092441); // Новый Цвет(153, 255, 153)
		СтруктураЦветов.Вставить("ТабЧасти"		, 14857357); // Новый Цвет(141, 180, 226)
		
		СтруктураИменШапки = Новый Структура;
		СтруктураИменШапки.Вставить("КлючевыеПоля"	, "Ключевые поля");
		СтруктураИменШапки.Вставить("Шапка"			, "Шапка");
		СтруктураИменШапки.Вставить("ТабЧасти"		, "Табличные части");
		
		НомерКолонки = Объект.НомерНачальнойКолонки;
		
		
		Для Каждого ДанныеТаблицы Из СтруктураКолонок Цикл
			
			ИмяТаблицы = ДанныеТаблицы.Ключ;
			ТекТаблица = ДанныеТаблицы.Значение;
			
			Если ТекТаблица.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПерваяКолонкаВГруппе = НомерКолонки;
			
			Для Каждого ТекКолонка Из ТекТаблица Цикл
				
				НастройкиКолонки = ТекКолонка.Значение;
				
				Ячейка = ExcelЛист.Cells(Объект.НомерСтрокиСИменамиКолонок, НомерКолонки);
				
				// Заполним имя колонки.
				Ячейка.Name = "CellName."+ТекКолонка.Ключ;
				// Заполним заголовок колонки
				Ячейка.Value = НастройкиКолонки.Синоним;
				// Заполним цвет фона
				Ячейка.Interior.Color = СтруктураЦветов[ИмяТаблицы];
				
				// Установим границы для ячейки.
				бит_ОбменДаннымиЭксельКлиентСервер.УстановитьГраницыДляЯчейки(Ячейка);
				
				// Установка списков
				ListName = бит_ПроформыКлиентСервер.FindList(LoadedLists, НастройкиКолонки, ДанныеДляВыгрузки.ВидыПредставлений);					
				
				If NOT ListName = Undefined Then
					
					PosStart = бит_ОбменДаннымиЭксельКлиентСервер.CellPosition(Объект.НомерСтрокиСИменамиКолонок+1,НомерКолонки);
					
					Selection = ExcelЛист.Range(ExcelЛист.Cells(PosStart.Row, PosStart.Column)
												,ExcelЛист.Cells(PosStart.Row, PosStart.Column).End(XlEnums.XlDirection.xlDown));						
					
					бит_ОбменДаннымиЭксельКлиентСервер.SetList(Selection, ListName, XlEnums);
					
				EndIf;
				
				НомерКолонки = НомерКолонки + 1;
				
			КонецЦикла;
			
			Если Объект.НомерСтрокиСИменамиКолонок > 1 Тогда
				ЯчейкаНачало = ExcelЛист.Cells(Объект.НомерСтрокиСИменамиКолонок-1, ПерваяКолонкаВГруппе);
				ЯчейкаКонец = ExcelЛист.Cells(Объект.НомерСтрокиСИменамиКолонок-1, НомерКолонки-1);
				ExcelЛист.Range(ЯчейкаНачало, ЯчейкаКонец).Merge();
				ExcelЛист.Range(ЯчейкаНачало, ЯчейкаКонец).Value = СтруктураИменШапки[ИмяТаблицы];
				ExcelЛист.Range(ЯчейкаНачало, ЯчейкаКонец).Interior.Color = СтруктураЦветов[ИмяТаблицы];
				ExcelЛист.Range(ЯчейкаНачало, ЯчейкаКонец).Font.Size = 16;
				ExcelЛист.Range(ЯчейкаНачало, ЯчейкаКонец).Font.Bold = Истина;
				ПерваяКолонкаВГруппе = НомерКолонки;
			КонецЕсли;
			
		КонецЦикла;
		
		Excel.Visible = Истина;
		
		// Удаляем лист по умолчанию
		Книга.Worksheets(1).Delete();
		
	Исключение
		ЕстьОшибки = Истина;
		
		ТекстОшибки = ОписаниеОшибки();
		
		ТекстСообщения = НСтр("ru='Не удалось заполнить лист Excel - %1%. %2%'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СокрЛП(Объект.Объект), ТекстОшибки);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецПопытки;
	
	// Если не удалось выгрузить, тогда
	// закрываем приложение Excel.
	Если ЕстьОшибки Тогда
		// Закроем приложение Excel.
		бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Excel);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьСтруктуруИменКолонки_ИмяВФайлеВExcel()

&НаКлиенте
Функция ПолучитьКартинкуПоТипу(ТекущаяСтрока, ЭтоВыборТипа = Ложь)
    
    Картинка = Неопределено;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат Картинка;
	КонецЕсли;
	
    Если Не ЭтоВыборТипа Тогда
        ТипОбъекта = ТекущаяСтрока.Тип;
	Иначе
		ТипОбъекта = ТекущаяСтрока;
	КонецЕсли;
	
	Картинка = фКэшЗначений.КартинкиТипов.Получить(ТипОбъекта);
	Картинка = ?(Картинка = Неопределено, БиблиотекаКартинок.бит_од_Реквизит, Картинка);
        
    Возврат Картинка;
    
КонецФункции // ПолучитьКартинкуПоТипу()

&НаКлиенте
Функция ПолучитьСписокЗначенийДляВыбора(ТаблицаРеквизитов, ЭтоМассив = Ложь, Картинка = Неопределено)
    
    Список = Новый СписокЗначений;
    
    Если Не ЭтоМассив Тогда
        
        Для Каждого ТекСтрока Из ТаблицаРеквизитов Цикл
            Список.Добавить(ТекСтрока.ИмяРеквизита, ТекСтрока.Представление,, Картинка);
        КонецЦикла;
        
    Иначе
        Для Каждого ТекЭлемент Из ТаблицаРеквизитов Цикл
            Список.Добавить(ТекЭлемент,,, ?(ТипЗнч(Картинка) = Тип("Картинка"), Картинка, ПолучитьКартинкуПоТипу(ТекЭлемент, Истина)));
        КонецЦикла;
    КонецЕсли;
	
    Возврат Список;
    
КонецФункции // ПолучитьСписокЗначенийДляВыбора()

// Процедура обновляет список выбора значений для поля ИмяВФайле дерева ПравилаЗагрузкиДерево.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ОбновитьСписокДоступныхИменКолонок()
	
	ЭлементУправления = Элементы.ПравилаЗагрузкиДеревоИмяВФайле;
	ЭлементУправления.СписокВыбора.Очистить();
	
	МассивКолонок = ПолучитьМассивИменКолонокЛистаExcel(Объект.ФайлИсточник);
	
	Если НЕ МассивКолонок = Неопределено Тогда
		ЭлементУправления.СписокВыбора.ЗагрузитьЗначения(МассивКолонок);
		
		СтрокиДерева = ПравилаЗагрузкиДерево.ПолучитьЭлементы();
		
		Для Каждого СтрокаПравилЗагрузки Из СтрокиДерева Цикл
			ПодчиненныеСтроки = СтрокаПравилЗагрузки.ПолучитьЭлементы();
			
			ЭтоШапка = (СтрокаПравилЗагрузки.ВидДанных = "Шапка");
			
			Если ЭтоШапка Тогда
				
				Для Каждого ТекСтрока Из ПодчиненныеСтроки Цикл
					
					Если МассивКолонок.Найти(ТекСтрока.ИмяВФайле) = Неопределено Тогда
						Если МассивКолонок.Найти(СокрЛП(ТекСтрока.ИмяРеквизита)) = Неопределено Тогда
							ТекСтрока.ИмяВФайле = "";
						Иначе
							ТекСтрока.ИмяВФайле = СокрЛП(ТекСтрока.ИмяРеквизита);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого СтрокаТабЧасть Из ПодчиненныеСтроки Цикл
					СтрокиТабЧасти = СтрокаТабЧасть.ПолучитьЭлементы();
					
					Для Каждого ТекСтрока Из СтрокиТабЧасти Цикл
						
						Если МассивКолонок.Найти(ТекСтрока.ИмяВФайле) = Неопределено Тогда
							Если МассивКолонок.Найти(СокрЛП(ТекСтрока.ИмяРеквизита)) = Неопределено Тогда
								ТекСтрока.ИмяВФайле = "";
							Иначе
								ТекСтрока.ИмяВФайле = СокрЛП(ТекСтрока.ИмяРеквизита);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивИменКолонокЛистаExcel(ИмяФайла)
	
	Отказ = Ложь;
	
	// Выполним проверку заполнения обязательных полей.
	Если ПустаяСтрока(Объект.ФайлИсточник) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.НомерНачальнойКолонки = 0
		ИЛИ Объект.НомерСтрокиСИменамиКолонок = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Номера колонок с которых начинается старт чтения не могут быть меньше 1!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения,,,Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Создадим приложение Excel.
	Excel = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, Отказ);
		
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	// Откроем указанный файл.
	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Excel, ИмяФайла, Отказ);
		
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Откроем лист Excel.
	ExcelЛист = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheet(ExcelФайл, Объект.ИмяЛиста, Отказ);
															
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаКолонок = ПолучитьТаблицуСИменамиКолонокФайла(ExcelЛист);
	
	МассивКолонок = Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаКолонок Цикл
		
		МассивКолонок.Добавить(ТекСтрока.ИмяВФайле);
		
	КонецЦикла;
	
	бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelФайл,Ложь);
	
	Если Excel.Workbooks.Count = 0 Тогда
		бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Excel);
	КонецЕсли;
	
	Возврат МассивКолонок;
	
КонецФункции

// Процедура чтения данных из EXCEL файла через COMSafeArray.
// 
// Параметры:
//  ExcelЛист - ComObject.
// 
&НаКлиенте
Функция ПолучитьТаблицуСИменамиКолонокФайла(ExcelЛист)

	НовПравилаЗагрузки = Новый Массив;
    
	Arr = ExcelЛист.UsedRange.Value;
	
	Если ExcelЛист.UsedRange.Value <> Неопределено Тогда
	
		КоличествоКолонок = Arr.GetUpperBound(0);
		
		// Формируем массив неразрешимых символов.
		МассивНеРазрешимыхСимволов = бит_ОбменДаннымиЭксельКлиентСервер.ПолучитьМассивНеРазрешимыхСимволов();
		
		Для НомКол = Объект.НомерНачальнойКолонки По КоличествоКолонок Цикл
			
			ТекстСообщения = НСтр("ru='Обработка файла Microsoft Excel: колонка %1%  из %2%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, НомКол, КоличествоКолонок);
			Состояние(ТекстСообщения);
	                  
			// Получаем имя колонки.
			Ячейка = ExcelЛист.Cells(Объект.НомерСтрокиСИменамиКолонок, НомКол);
			Попытка
				ИмяЯчейки = Ячейка.Name.Name;
			Исключение
				ИмяЯчейки = "";
			КонецПопытки;
			
			Если Найти(ИмяЯчейки, "CellName.") = 0 Тогда
				// В старом формате файлов шаблонов имя колонки хранилось как значение ячейки.
				ИмяКолонки = СокрЛП(Ячейка.Value);
			Иначе
				// В новом формате файлов шаблонов в ячейках указывается синоним реквизита, и его имя помещаем в имя ячейки.
				ИмяКолонки = СтрЗаменить(ИмяЯчейки, "CellName.", "");
			КонецЕсли;
	        
	        // Удалим неразрешимые символы из имени колонки.
			бит_ОбменДаннымиЭксельКлиентСервер.УдалитьИзСтрокиМассивСимволов(ИмяКолонки, МассивНеРазрешимыхСимволов);
	        
	        Если НЕ ЗначениеЗаполнено(ИмяКолонки) Тогда
	            Продолжить;
	        КонецЕсли;
	        
			НовСтрока = Новый Структура;
			НовСтрока.Вставить("ИмяВФайле"	 , ИмяКолонки);
			НовСтрока.Вставить("ИмяДляПоиска", ВРег(ИмяКолонки));
			НовСтрока.Вставить("Загружена"	 , Ложь);
			
			НовПравилаЗагрузки.Добавить(НовСтрока);
	        
		КонецЦикла;
		
	КонецЕсли;
    
	Возврат НовПравилаЗагрузки;
	
КонецФункции // ПолучитьТаблицуСИменамиКолонокФайла()

&НаКлиенте
Функция ПолучитьРеквизитыОбъектаПоВидуДанных(ВидДанных)
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого ТекЭлемент Из фКэшЗначений.МассивРеквизитов Цикл
		
		Если НЕ ТекЭлемент.ВидДанных = ВидДанных Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРеквизитов.Добавить(ТекЭлемент);
		
	КонецЦикла;
	
	Возврат МассивРеквизитов;
	
КонецФункции

// Процедура заполняет соответствие номеров.
// 
// Параметры:
//  СтрокаДереваВерх - СтрокаДереваЗначений.
//  Ном				 - Число.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНомераСтрок(СтрокаДереваВерх, Ном)
	
	ПодчиненныеСтроки = СтрокаДереваВерх.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
		
		Если Не СтрокаДерева.ВерхнийУровень Тогда
			
			СтрокаДерева.НомерСтроки = Ном;
			Ном = Ном + 1;
			
		КонецЕсли;
		
		УстановитьНомераСтрок(СтрокаДерева, Ном);  
		
	КонецЦикла; 
	
КонецПроцедуры // УстановитьНомераСтрок()

// Функция получает строку родитель для текущей строки дерева.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//  СтрокаРодитель - СтрокаДереваЗначений, Неопределено.
// 
&НаКлиенте
Функция ПолучитьСтрокуРодительДляТекущейСтрокиДерева(ТекущаяСтрока)
	
	СтрокаРодитель = Неопределено;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат СтрокаРодитель;
	КонецЕсли;
	
	ТекВидДанных   = ТекущаяСтрока.ВидДанных;
	ВерхнийУровень = ТекущаяСтрока.ВерхнийУровень;
	
	РодительСтр = ТекущаяСтрока.ПолучитьРодителя();
	
	Если ТекВидДанных = "Шапка" Тогда
		СтрокаРодитель = ?(ВерхнийУровень, ТекущаяСтрока, РодительСтр);
	Иначе
		
		Если ТекВидДанных = "Табличные части" Тогда
			СтрокаРодитель = Неопределено;
			
		ИначеЕсли РодительСтр.ВидДанных = "Табличные части" Тогда
			СтрокаРодитель = ТекущаяСтрока;
			
		ИначеЕсли РодительСтр.ПолучитьРодителя().ВидДанных = "Табличные части" Тогда
			СтрокаРодитель = РодительСтр;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаРодитель;
	
КонецФункции // ПолучитьСтрокуРодительДляТекущейСтрокиДерева()

&НаКлиенте
Процедура УстановитьФлажкиПоДереву(СтрокаРодитель, ИмяРеквизита, Режим)

	ПодчиненныеСтроки = СтрокаРодитель.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
		
		Если ФлажокСтрокиДоступен(СтрокаДерева, ИмяРеквизита) Тогда
			
			Если Режим = 0 Тогда
				СтрокаДерева[ИмяРеквизита] = Ложь;
			ИначеЕсли Режим = 1 Тогда
				СтрокаДерева[ИмяРеквизита] = Истина;
			ИначеЕсли Режим = 2 Тогда
				СтрокаДерева[ИмяРеквизита] = Не СтрокаДерева[ИмяРеквизита];
			КонецЕсли; 
			
		КонецЕсли;
			
	    УстановитьФлажкиПоДереву(СтрокаДерева, ИмяРеквизита, Режим);
		
	КонецЦикла; 

КонецПроцедуры // УстановитьФлажкиПоДереву()

// Функция проверяет доступность флажка "ТолькоДляПустых"
// для изменения.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//  ФлажокДоступен - Булево
// 
&НаКлиенте
Функция ФлажокСтрокиДоступен(СтрокаДерева, ИмяРеквизита)
	
	ФлажокДоступен = Истина;
	
	Если ИмяРеквизита = "ВыгружатьСписок" Тогда
		
		ФлажокДоступен = Истина;
		
	ИначеЕсли ИмяРеквизита = "ТолькоДляПустых"
		И СтрокаДерева.Тип = ПредопределенноеЗначение("Перечисление.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм") Тогда
		
		ФлажокДоступен = Ложь;
		
	КонецЕсли; 
	
	Возврат ФлажокДоступен;
	
КонецФункции // ФлажокСтрокиДоступен()

// Процедура управляет флагами в табличной части.
// 
// Параметры:
//  ИмяТабЧасти   - Строка.
//  ИмяРеквизита  - Строка.
//  ЗначениеФлага - Число.
// 
&НаКлиенте
Процедура ОбработатьФлаги(ИмяТабЧасти, ИмяРеквизита, ЗначениеФлага)
	
	ТабличнаяЧасть = Объект[ИмяТабЧасти];
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Если ЗначениеФлага = 0 Тогда
			СтрокаТаблицы[ИмяРеквизита] = Ложь;
		ИначеЕсли ЗначениеФлага = 1 Тогда
			СтрокаТаблицы[ИмяРеквизита] = Истина;
		ИначеЕсли ЗначениеФлага = 2 Тогда	
			СтрокаТаблицы[ИмяРеквизита] = НЕ СтрокаТаблицы[ИмяРеквизита];
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьФлаги()

// Процедура вызывает функции и процедуры необходимые для выполнения
// загрузки структуры из файла.
// 
// Параметры:
//  ПоРеквизитам     - Булево.
//  ЭтоСопоставление - Булево.
// 
&НаКлиенте
Процедура ЗагрузитьСтруктуруПравилЗагрузки(ПоРеквизитам = Ложь, ЭтоСопоставление = Ложь) 
    
    Отказ = Ложь;
	
	// Формируем структуу обязательных полей.
	СтруктураПолей = Новый Структура; 
	
	Если ПоРеквизитам Тогда
		СтруктураПолей.Вставить("Объект");
	Иначе
		СтруктураПолей.Вставить("ФайлИсточник");
		СтруктураПолей.Вставить("ИмяЛиста");
		СтруктураПолей.Вставить("НомерСтрокиСИменамиКолонок");  
		СтруктураПолей.Вставить("НомерНачальнойКолонки");
	КонецЕсли;
	
    // Проверим заполненность шапки.
    // бит_ОбменДанными_Excel.ПроверитьЗаполнениеШапкиОбъекта(ЭтотОбъект, СтруктураПолей, Отказ, "");
    
    Если Не Отказ Тогда
        
        // Выполним загрузку правил из файла.
        ВыполнитьЗагрузкуПравил(ПоРеквизитам, ЭтоСопоставление);
        
    КонецЕсли;
    
КонецПроцедуры // ЗагрузитьСтруктуруПравилЗагрузки()

// Процедура выполняет загрузку структуры правил из файла.
// 
// Параметры:
//  ПоРеквизитам     - Булево.
//  ЭтоСопоставление - Булево.
// 
&НаКлиенте
Процедура ВыполнитьЗагрузкуПравил(ПоРеквизитам, ЭтоСопоставление)
	
	Если ПоРеквизитам Тогда
		
		ВыполнитьЗагрузкуПравилПоРеквизитам();
		
	Иначе
    
        ЕстьОшибки = Ложь;
		
		// Создадим приложение Excel.
		Excel = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(Ложь, ЕстьОшибки);
		
		Если Excel = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Откроем указанный файл.
		ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Excel, Объект.ФайлИсточник, ЕстьОшибки);
		
		Если ExcelФайл = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Откроем лист Excel.
		ExcelЛист = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheet(ExcelФайл, Объект.ИмяЛиста, ЕстьОшибки);
		
        Если Не ЕстьОшибки Тогда
            
            // Получим таблицу значений с именами колонок файла.
            ТаблицаИменФайла = ПолучитьТаблицуСИменамиКолонокФайла(ExcelЛист);
			
			Если Не ЭтоСопоставление Тогда
				
				// Получаем реквизиты объекта.
				ТаблицаРеквизитов = фКэшЗначений.МассивРеквизитов;
				
				Для Каждого ТекСтрока Из ТаблицаРеквизитов Цикл
					
					ЭтоРеквизитШапки = ТекСтрока.ВидДанных = "Шапка";
					
					Если Не ЭтоРеквизитШапки Тогда
						// Попробуем найти элемент с префиксом: "ИмяТабЧасти_" + ИмяРеквизита.
						ИмяРеквизитаВФайле = ТекСтрока.ВидДанных + "_" + ТекСтрока.ИмяРеквизита;
						СтрокаТаблицы 	   = НайтиСтрокуВМассивеСтруктур(ТаблицаИменФайла, ВРег(ИмяРеквизитаВФайле), "ИмяДляПоиска");
					Иначе
						СтрокаТаблицы = Неопределено;
					КонецЕсли;
					
					Если СтрокаТаблицы = Неопределено Тогда
						// Ищем колонку с именем тек. реквизита.
						ИмяРеквизитаВФайле = ТекСтрока.ИмяРеквизита;
						СтрокаТаблицы 	   = НайтиСтрокуВМассивеСтруктур(ТаблицаИменФайла, ВРег(ИмяРеквизитаВФайле), "ИмяДляПоиска");
					КонецЕсли;
					
					Если Не СтрокаТаблицы = Неопределено Тогда
						
						НоваяСтрока = Объект.ПравилаЗагрузки.Добавить();
						НоваяСтрока.ВидДанных = ТекСтрока.ВидДанных;
						НоваяСтрока.ИмяВФайле = ИмяРеквизитаВФайле;
						
						// Отметим что данные строки загружены.
						СтрокаТаблицы.Загружена = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Проверим все ли колонки сопоставлены реквизитам документа,
				// не сопоставленные колонки добавим в шапку.
				
				Для Каждого ТекСтрока Из ТаблицаИменФайла Цикл
					
					Если ТекСтрока.Загружена Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ТекСтрока.ИмяВФайле;
					
					Если ВРег(ИмяКолонки) = "ИМЯТАБЧАСТИ" Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Объект.ПравилаЗагрузки.Добавить();
					НоваяСтрока.ВидДанных = "Шапка";
					НоваяСтрока.ИмяВФайле = ИмяКолонки;
					
				КонецЦикла;
				
            Иначе
                // Необходимо выполнить сопоставление значений колонки "ИмяВФайле"
                // именам реквизитов объекта.
                Для Каждого ТекСтрока Из Объект.ПравилаЗагрузки Цикл
					
					ЭтоРеквизитШапки = ТекСтрока.ВидДанных = "Шапка";
					
					Если Не ЭтоРеквизитШапки Тогда
						// Попробуем найти элемент с префиксом: "ИмяТабЧасти_" + ИмяРеквизита.
						ИмяРеквизитаВФайле = ТекСтрока.ВидДанных + "_" + ТекСтрока.ИмяРеквизита;
						СтрокаТаблицы 	   = НайтиСтрокуВМассивеСтруктур(ТаблицаИменФайла, ВРег(ИмяРеквизитаВФайле), "ИмяДляПоиска");
					Иначе
						СтрокаТаблицы = Неопределено;
					КонецЕсли;
					
					Если СтрокаТаблицы = Неопределено Тогда
						// Ищем колонку с именем тек. реквизита.
						ИмяРеквизитаВФайле = ТекСтрока.ИмяРеквизита;
						СтрокаТаблицы 	   = НайтиСтрокуВМассивеСтруктур(ТаблицаИменФайла, ВРег(ИмяРеквизитаВФайле), "ИмяДляПоиска");
					КонецЕсли;
                    
                    // Если есть колонка с тек. именем реквизита, тогда.
                    Если Не СтрокаТаблицы = Неопределено Тогда
                        ТекСтрока.ИмяВФайле = ИмяРеквизитаВФайле;
                    КонецЕсли;
                    
                КонецЦикла;
                
            КонецЕсли;
            // // Заполнить дополнительные значения правил загрузки.
            // ДополнитьИЗагрузитьТаблицуПравилЗагрузки(НовПравилаЗагрузки);
        КонецЕсли;

		// Закроем открытый файл.
		бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelФайл,Ложь);
		
		// Закроем приложение Excel.
		бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Excel);
		
   КонецЕсли;
        
КонецПроцедуры // ВыполнитьЗагрузкуПравил()

&НаКлиенте
Функция НайтиСтрокуВМассивеСтруктур(Массив, ЗначениеПоиска, СвойствоПоиска)
	
	НайденнаяСтрока = Неопределено;
	
	Для Каждого ТекЭлемент Из Массив Цикл
		
		Если НЕ ТекЭлемент.Свойство(СвойствоПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекЭлемент[СвойствоПоиска] = ЗначениеПоиска Тогда
			НайденнаяСтрока = ТекЭлемент;
			
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивЛистовExcel(ИмяФайла)
	
	ЕстьОшибки = Ложь;
		
	// Создадим приложение Excel.
	Excel = бит_ОбменДаннымиЭксельКлиентСервер.InitExcel(ЕстьОшибки, Истина);
		
	Если Excel = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	// Откроем указанный файл.
	ExcelФайл = бит_ОбменДаннымиЭксельКлиентСервер.OpenExcelFile(Excel, ИмяФайла, ЕстьОшибки);
		
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// МассивЛистов = бит_ОбменДанными_Excel.ПолучитьСписокЛистовExcel(ExcelФайл, ЕстьОшибки);
	МассивЛистов = бит_ОбменДаннымиЭксельКлиентСервер.GetExcelSheetsList(ExcelФайл, ЕстьОшибки);
	
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	бит_ОбменДаннымиЭксельКлиентСервер.CloseExcelFile(ExcelФайл, Ложь);
	
	Если Excel.Workbooks.Count = 0 Тогда
		бит_ОбменДаннымиЭксельКлиентСервер.QuitExcel(Excel);
	КонецЕсли;
	
	Возврат МассивЛистов;
	
КонецФункции

#КонецОбласти
