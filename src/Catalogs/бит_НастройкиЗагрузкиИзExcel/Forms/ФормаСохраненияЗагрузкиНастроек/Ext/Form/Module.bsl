
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьДеревоНастроек();
	
	СохранитьПользовательскиеФункции = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиЗагрузки

&НаКлиенте
Процедура НастройкиЗагрузкиСохранятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиЗагрузки.ТекущиеДанные;
	
	Если ТекущиеДанные.Сохранять = 2 Тогда
		ТекущиеДанные.Сохранять = 0;
	КонецЕсли;
	
	ИзменитьФлажкиДерево(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Сохранять);
	
	ИзменитьФлажкиРодителей(ТекущиеДанные.ПолучитьРодителя(), ТекущиеДанные.Сохранять);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ИзменитьФлажкиДерево(НастройкиЗагрузки.ПолучитьЭлементы(), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ИзменитьФлажкиДерево(НастройкиЗагрузки.ПолучитьЭлементы(), 0);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ТекстФильтра = НСтр("ru='Файлы настроек загрузки из Excel (*.xml)|*.xml|Упакованные файлы настроек загрузки из Excel (*.zip)|*.zip'");
	Диалог.Фильтр = ТекстФильтра;
	Диалог.Расширение = "zip";
	Диалог.МножественныйВыбор = ложь;
	
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Новый ОписаниеОповещения("СохранитьПоказатьДиалогВыбораЗавершение", ЭтотОбъект), Диалог);
	
КонецПроцедуры

// Обработчик завершения выбора каталога сохраненных файлов.
//  См. Синтакс-помощник: ДиалогВыбораФайла.Показать().
//
&НаКлиенте
Процедура СохранитьПоказатьДиалогВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Упаковать 		= Прав(ВыбранныеФайлы[0],4) = ".zip";
	ДанныеДляЗаписи = СохранитьНастройкиСервер(Упаковать);
	
	Если НЕ ДанныеДляЗаписи = Неопределено Тогда
		АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеДляЗаписи, УникальныйИдентификатор);
		ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, АдресХранилищаДанных, ВыбранныеФайлы[0]);
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьДерево(Команда)
	
	ОбновитьДеревоНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет дерево настроек загрузки.
// 
&НаСервере
Процедура ОбновитьДеревоНастроек()
	
	НастройкиЗагрузки.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьСтрокиДереваНастроек(НастройкиЗагрузки);
	
КонецПроцедуры // ОбновитьДеревоНастроек()

// Заполняет строки дерева настроек загрузки данных из Excel.
// 
// Параметры 
// 	СтрокаРодителя     	 -	СтрокаДереваЗначений   	 Строка дерева настроек для добавления дочерних настроек          
// 	Родитель           	 -	СправочникСсылка.бит_	 Элемент справочника настроек, дочерние элементы которого           
// 	                   	  	_НастройкиЗагрузкиИз	 добавляются в дерево Excel, Неопределено.
// 
&НаСервере
Процедура ЗаполнитьСтрокиДереваНастроек(СтрокаРодителя, Родитель = Неопределено)
	
	ПодчиненныеСтроки = СтрокаРодителя.ПолучитьЭлементы();
	
	ТекРодитель = ?(Родитель = Неопределено, Справочники.бит_НастройкиЗагрузкиИзExcel.ПустаяСсылка(), Родитель);
	Выборка = Справочники.бит_НастройкиЗагрузкиИзExcel.ВыбратьИерархически(ТекРодитель);
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Родитель = ТекРодитель Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ПодчиненныеСтроки.Добавить();
		НоваяСтрока.Сохранять = 0;
		НоваяСтрока.Настройка = Выборка.Ссылка;
		Если Выборка.ЭтоГруппа Тогда
			ЗаполнитьСтрокиДереваНастроек(НоваяСтрока, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьСтрокиДереваНастроек()

&НаСервере
Функция СохранитьНастройкиСервер(Упаковать)
	
	ЗаписьXML = Новый ЗаписьXML;
	// ВремФайл = ?(Прав(ДиалогОткрытияФайла.ПолноеИмяФайла,4)=".zip",
	// 			 ПолучитьИмяВременногоФайла("xml"),
	// 			 ДиалогОткрытияФайла.ПолноеИмяФайла);
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML.ОткрытьФайл(ВремФайл);
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("бит_НастройкиЗагрузкиИзExcel");
	
	// // Для сокращения размера файла сообщения записываем соответствие пространств имен
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	Попытка
		
		// Получаем выборку сохраняемых данных	
		ПодчиненныеСтроки = НастройкиЗагрузки.ПолучитьЭлементы();
		Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
			Если СтрокаДерева.Сохранять = 0 Тогда
				Продолжить;
			КонецЕсли;
			СохранениеНастройки(СтрокаДерева, ЗаписьXML, СохранитьПользовательскиеФункции);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		ВызватьИсключение (ТекстОшибки);
		
	КонецПопытки;
	
	ЗаписанныеДанные = ВремФайл;
	
	Если Упаковать Тогда
		Попытка
			ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
			
			Архиватор = Новый ЗаписьZipФайла(ФайлАрхива);
			Архиватор.Добавить(ВремФайл);
			Архиватор.Записать();
			
			ЗаписанныеДанные = ФайлАрхива;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			
			ТекстСообщения = НСтр("ru='Ошибка архивации файла настроек загрузки из Excel: %1%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ТекстОшибки);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			ЗаписанныеДанные = Неопределено;
	    КонецПопытки;
		
	КонецЕсли;
	
	Если ЗаписанныеДанные = Неопределено Тогда
		ВозвращаемыеДанные = Неопределено;
	Иначе
		ВозвращаемыеДанные = Новый ДвоичныеДанные(ЗаписанныеДанные);
	КонецЕсли;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

// Добавляет данные настройки загрузки из Excel текущей строки дерева настроек в запись XML.
// 
// Параметры 
// 	СтрокаДерева       	             -	СтрокаДереваЗначений   	 Строка дерева настроек загрузки из Excel.
// 	ЗаписьXML          	             -	ЗаписьXML              	 Объект записи XML в файл.                                         
// 	СохранятьПользовательскиеФункции -	Булево                 	 Истина - сохранить пользовательские функции.
// 
&НаСервере
Процедура СохранениеНастройки(СтрокаДерева,
							  ЗаписьXML,
							  СохранятьПользовательскиеФункции = Истина)
							  
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();						  
	Для Каждого ВремСтрокаДерева Из ПодчиненныеСтроки Цикл
		Если ВремСтрокаДерева.Сохранять = 0 Тогда
			Продолжить;
		КонецЕсли;
		СохранениеНастройки(ВремСтрокаДерева, ЗаписьXML, СохранятьПользовательскиеФункции);
	КонецЦикла;
	Если СтрокаДерева.Сохранять = 1 И НЕ СтрокаДерева.Настройка.ЭтоГруппа Тогда
		ВремДанные = СтрокаДерева.Настройка.ПолучитьОбъект();
		ЗаписатьXML(ЗаписьXML, ВремДанные);
		Если СохранятьПользовательскиеФункции Тогда
			Для Каждого ТекПравилоЗагрузки Из ВремДанные.ПравилаЗагрузки Цикл
				Если НЕ ТекПравилоЗагрузки.Тип = Перечисления.бит_ТипыЗагружаемыхОбъектовИзExcel.ПроизвольныйАлгоритм Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ ТипЗнч(ТекПравилоЗагрузки.ИмяОбъекта) = Тип("СправочникСсылка.бит_ПользовательскиеФункции") Тогда
					Продолжить;
				КонецЕсли;
				ВремДанные = ТекПравилоЗагрузки.ИмяОбъекта.ПолучитьОбъект();
				ЗаписатьXML(ЗаписьXML, ВремДанные);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СохранениеНастройки()

&НаКлиенте
Процедура ИзменитьФлажкиДерево(ЭлементыДерева, ЗначениеФлажка)
	
	Для Каждого ТекущаяВетка Из ЭлементыДерева Цикл
		
		ТекущаяВетка.Сохранять = ЗначениеФлажка;
		
		ИзменитьФлажкиДерево(ТекущаяВетка.ПолучитьЭлементы(), ЗначениеФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает пометки для строк дерева разделов, дочерних по отношению к переданной.
// 
// Параметры 
// 	Строка         -	СтрокаДереваЗначений   	 Строка для дочерних строк которой будут установлены флажки.       
// 	ЗначениеФлажка -	Число                  	 Значение пометки к установке для дочерних строк.                  
// 
&НаКлиенте
Процедура УстановитьФлажкиПодчиненных(Строка, ЗначениеФлажка)
	ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
	
	Для Каждого ТекСтрока Из ПодчиненныеСтроки Цикл
		ТекСтрока.Сохранять = ЗначениеФлажка;
		УстановитьФлажкиПодчиненных(ТекСтрока, ЗначениеФлажка);
	КонецЦикла;
КонецПроцедуры // УстановитьФлажкиПодчиненных()

// Процедура настраивает флаги для родительских строк. Вызывается рекурсивно.
// 
// Параметры: 	
//  ВеткаРодитель.
//  ЗначениеФлажка.
//
&НаКлиенте
Процедура ИзменитьФлажкиРодителей(ВеткаРодитель, ЗначениеФлажка)
	
	Если ВеткаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = ВеткаРодитель.ПолучитьЭлементы();
	
	СостояниеРодителя = ЗначениеФлажка;
	
	Для Каждого ТекущаяВетка Из ЭлементыРодителя Цикл
		Если НЕ ТекущаяВетка.Сохранять = ЗначениеФлажка Тогда
			СостояниеРодителя = 2;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВеткаРодитель.Сохранять = СостояниеРодителя;
	
	ИзменитьФлажкиРодителей(ВеткаРодитель.ПолучитьРодителя(), ЗначениеФлажка);
	
КонецПроцедуры

#КонецОбласти

