
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.СписокПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);
	
	МетаданныеОбъекта = Метаданные.Справочники.бит_НастройкиЗагрузкиИзExcel;
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПоказатьОписаниеНастройки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ОткрытьФорму("Справочник.бит_НастройкиЗагрузкиИзExcel.Форма.ФормаСохраненияЗагрузкиНастроек",,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ТекстСообщения = НСтр("ru='Загрузка настроек не доступна, т.к. не подключено расширение работы с файлами!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
		Возврат;
	КонецЕсли;
	
	ТекстФильтра = НСтр("ru='Файлы настроек загрузки из Excel(*.xml)|*.xml|Упакованные файлы настроек загрузки из Excel (*.zip)|*.zip'");
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = ТекстФильтра;
	ДиалогОткрытияФайла.Расширение = "zip";
	ДиалогОткрытияФайла.МножественныйВыбор = ложь;
	
	// Передадим файл на сервер для обработки
	МассивПомещенныеФайлы = Новый Массив;
	
	Если ПоместитьФайлы(,МассивПомещенныеФайлы, ДиалогОткрытияФайла,Ложь, УникальныйИдентификатор) Тогда
		
		Если МассивПомещенныеФайлы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеФайла = МассивПомещенныеФайлы[0];
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьНастройкиЗавершение", ЭтотОбъект, ОписаниеФайла);
		ТекстВопроса = НСтр("ru='Очистить существующие настройки перед загрузкой?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	КонецЕсли;

КонецПроцедуры

// Процедура обработчик оповещения "ЗагрузитьНастройкиЗавершение".
// 
// Параметры:
// Результат - КодВозвратаДиалога.
// ОписаниеФайла - Структура.
// 
&НаКлиенте
Процедура ЗагрузитьНастройкиЗавершение(Результат, ОписаниеФайла) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
		УдалитьТекущиеНастройки = Истина;
	Иначе
		УдалитьТекущиеНастройки = Ложь;
	КонецЕсли;
	
	ЗагрузитьНастройкиИзXML(ОписаниеФайла, УдалитьТекущиеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура формирует описание настройки или группы настроек.
// 
// Параметры:
// 	Ссылка - СправочникСсылка.бит_НастройкиЗагрузкиИзExcel.
// 
&НаСервере
Процедура ПоказатьОписаниеНастройкиСервер(Ссылка)
	
	Если Ссылка.ЭтоГруппа Тогда
		
		ТекстОписания = "#В группе: " + Символы.ПС;
		
		Запрос = Новый Запрос;
        Запрос.УстановитьПараметр("ТекГруппа", Ссылка);
        
        Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    бит_НастройкиЗагрузкиИзExcel.Ссылка,
		|    бит_НастройкиЗагрузкиИзExcel.ЭтоГруппа,
		|    бит_НастройкиЗагрузкиИзExcel.Описание
		|ИЗ
		|    Справочник.бит_НастройкиЗагрузкиИзExcel КАК бит_НастройкиЗагрузкиИзExcel
		|ГДЕ
		|    бит_НастройкиЗагрузкиИзExcel.Родитель В ИЕРАРХИИ(&ТекГруппа)";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеСКомментариями = СтрЗаменить(СокрЛП(Выборка.Описание), Символы.ПС, Символы.ПС + "// ");
			ОписаниеФункции = "// " + ?(СокрЛП(Выборка.Описание) = "", "<нет описания>", ОписаниеСКомментариями);
			
			бит_ОбщегоНазначения.ДобавитьСтрокуКТексту(ТекстОписания, ОписаниеФункции);
			бит_ОбщегоНазначения.ДобавитьСтрокуКТексту(ТекстОписания, "" + Выборка.Ссылка + Символы.ПС);
			
		КонецЦикла;
		
		ПолеОписанияНастройки = ТекстОписания;
		
	КонецЕсли;
	
	Элементы.ПолеОписанияНастройки.Видимость = Ссылка.ЭтоГруппа;
		
КонецПроцедуры

// Процедура загружает элементы справочника из переданного файла.
// 
// Параметры:
// 	ОписаниеФайла           - ОписаниеПереданногоФайла - информация о файле переданного на сервер для обработки.
// 	УдалитьТекущиеНастройки - Булево - удалить существующие элементы из справочника.
// 
&НаСервере
Процедура ЗагрузитьНастройкиИзXML(ОписаниеФайла, УдалитьТекущиеНастройки)
	
	Если УдалитьТекущиеНастройки Тогда
		УдалитьСуществующиеНастройки();
	КонецЕсли;
	
	ВремФайлДанные = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
	РасширениеФайла = Прав(ОписаниеФайла.Имя,4);
	
	Если РасширениеФайла = ".zip" Тогда
		ВремФайл = ПолучитьИмяВременногоФайла("zip");
	Иначе
		ВремФайл = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;
	
	ВремФайлДанные.Записать(ВремФайл);
	
	Если Прав(ВремФайл,4)=".zip" Тогда
	
		Попытка
			КаталогДляРаспаковки = КаталогВременныхФайлов();
			
			Архиватор = Новый ЧтениеZipФайла(ВремФайл);
		                                                               
			Если Архиватор.Элементы.Количество() > 0 Тогда
			
				Архиватор.Извлечь(Архиватор.Элементы[0], КаталогДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
				ВремФайл = КаталогДляРаспаковки + ?(Прав(КаталогДляРаспаковки, 1) = "\", "", "\") + Архиватор.Элементы[0].Имя;
			
			Иначе
			    ТекстСообщения = НСтр("ru='Файлы данных в архиве не найдены'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
				Возврат;	
			
			КонецЕсли;

			Архиватор.Закрыть();
	
		Исключение
			
			ТекстСообщения = НСтр("ru='Ошибка распаковки файла настроек: %1%'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			Возврат;				
		КонецПопытки;
	
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВремФайл);
	ЧтениеXML.ПерейтиКСодержимому();
	ЧтениеXML.Прочитать();
	
	Попытка
		
		Пока ВозможностьЧтенияДанных(ЧтениеXML) Цикл
			
			// Читаем очередное значение
			Данные = ПрочитатьXML(ЧтениеXML);
			
			Если Данные = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Данные.ОбменДанными.Загрузка = Истина;           

			Данные.Записать();		
			
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстОшибки);
		
		ВызватьИсключение (ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Функция определяет возможность чтения очередных данных из объекта ЧтениеXML.
// 
// Параметры:
//  ЧтениеXML - объект чтения XML
// 
// Возвращаемое значение:
//  Булево - Истина, если возможно чтение очередных данных или Ложь - в противном случае
// 
&НаСервере
Функция ВозможностьЧтенияДанных(ЧтениеXML)
	
	// Получаем тип данных XML, который может быть считан в данный момент.
	ТипXML = ПолучитьXMLТип(ЧтениеXML);
	Если ТипXML = Неопределено Тогда		
		Возврат Ложь;		
	ИначеЕсли ТипXML.ИмяТипа = "CatalogObject.бит_НастройкиЗагрузкиИзExcel" Тогда
		Возврат Истина;
	ИначеЕсли ТипXML.ИмяТипа = "CatalogObject.бит_ПользовательскиеФункции" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ВозможностьЧтенияXML(ЧтениеXML);
	
КонецФункции // ВозможностьЧтенияДанных()

// Процедура удаляет все элементы справочника.
// 
&НаСервере
Процедура УдалитьСуществующиеНастройки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.Ссылка
	|ИЗ
	|	Справочник.бит_НастройкиЗагрузкиИзExcel КАК Настройки
	|ГДЕ
	|	(НЕ Настройки.ЭтоГруппа)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НастройкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если НастройкаОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НастройкаОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Процедура обработчик ожидания активизации строки.
// 
&НаКлиенте
Процедура ПоказатьОписаниеНастройки()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОписаниеНастройкиСервер(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

