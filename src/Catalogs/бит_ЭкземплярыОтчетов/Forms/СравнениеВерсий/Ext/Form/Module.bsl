
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	Если Не ЗначениеЗаполнено(Параметры.ЭкземплярОтчета) ИЛИ Не ЗначениеЗаполнено(Параметры.Эталон) Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Эталон 	  		   = Параметры.Эталон;
	ВерсияДляСравнения = Параметры.ВерсияДляСравнения;
	ЭкземплярОтчета	   = Параметры.ЭкземплярОтчета; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабДокРезультат

&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.бит_ПоказателиПроизвольныхОтчетов") Тогда
		// Воспользуемся стандартной обработкой расшифровки.
	Иначе 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ВерсияДляСравнения);
		ОткрытьФорму("Документ.бит_ВерсияОтчета.ФормаОбъекта",ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СравнитьВерсии(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		СформироватьДокументРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьВерсииМестами(Команда)
	
	ВерсияКэш 		   = Эталон;
	Эталон 	  		   = ВерсияДляСравнения;
	ВерсияДляСравнения = ВерсияКэш;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция РезультатЗапросаПоСравнению()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ДанныеПроизвольныхОтчетов.ПоказательОтчета КАК ПоказательОтчета,
	|	СУММА(бит_ДанныеПроизвольныхОтчетов.ЗначениеПоказателя) КАК ЗначениеПоказателя,
	|	бит_ДанныеПроизвольныхОтчетов.ИмяОбласти КАК ИмяОбласти
	|ПОМЕСТИТЬ ВремТаблицаДанныеОтчета1
	|ИЗ
	|	РегистрСведений.бит_ДанныеПроизвольныхОтчетов КАК бит_ДанныеПроизвольныхОтчетов
	|ГДЕ
	|	бит_ДанныеПроизвольныхОтчетов.ВерсияОтчета = &ВерсияОсновная
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ДанныеПроизвольныхОтчетов.ИмяОбласти,
	|	бит_ДанныеПроизвольныхОтчетов.ПоказательОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_ДанныеПроизвольныхОтчетов.ПоказательОтчета КАК ПоказательОтчета,
	|	СУММА(бит_ДанныеПроизвольныхОтчетов.ЗначениеПоказателя) КАК ЗначениеПоказателя,
	|	бит_ДанныеПроизвольныхОтчетов.ИмяОбласти КАК ИмяОбласти
	|ПОМЕСТИТЬ ВремТаблицаДанныеОтчета2
	|ИЗ
	|	РегистрСведений.бит_ДанныеПроизвольныхОтчетов КАК бит_ДанныеПроизвольныхОтчетов
	|ГДЕ
	|	бит_ДанныеПроизвольныхОтчетов.ВерсияОтчета = &ВерсияДляСравнения
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ДанныеПроизвольныхОтчетов.ИмяОбласти,
	|	бит_ДанныеПроизвольныхОтчетов.ПоказательОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблицаДанныеОтчета1.ПоказательОтчета КАК ПоказательОтчета,
	|	ВремТаблицаДанныеОтчета1.ИмяОбласти КАК ИмяОбласти,
	|	СУММА(ЕСТЬNULL(ВремТаблицаДанныеОтчета1.ЗначениеПоказателя, 0)) КАК ЗначениеПоказателя,
	|	ВремТаблицаДанныеОтчета2.ПоказательОтчета КАК ПоказательОтчетаОтсутствующий,
	|	ВремТаблицаДанныеОтчета2.ИмяОбласти КАК ИмяОбластиОтсутствующий,
	|	СУММА(ЕСТЬNULL(ВремТаблицаДанныеОтчета2.ЗначениеПоказателя, 0)) КАК ЗначениеПоказателяОтсутствующий,
	|	СУММА(ЕСТЬNULL(ВремТаблицаДанныеОтчета1.ЗначениеПоказателя, 0) - ЕСТЬNULL(ВремТаблицаДанныеОтчета2.ЗначениеПоказателя, 0)) КАК Дельта,
	|	ВЫБОР
	|		КОГДА ВремТаблицаДанныеОтчета1.ПоказательОтчета ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтсутствующийПоказатель
	|ИЗ
	|	ВремТаблицаДанныеОтчета1 КАК ВремТаблицаДанныеОтчета1
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВремТаблицаДанныеОтчета2 КАК ВремТаблицаДанныеОтчета2
	|		ПО ВремТаблицаДанныеОтчета1.ПоказательОтчета = ВремТаблицаДанныеОтчета2.ПоказательОтчета
	|			И ВремТаблицаДанныеОтчета1.ИмяОбласти = ВремТаблицаДанныеОтчета2.ИмяОбласти
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремТаблицаДанныеОтчета1.ПоказательОтчета,
	|	ВремТаблицаДанныеОтчета1.ИмяОбласти,
	|	ВремТаблицаДанныеОтчета2.ПоказательОтчета,
	|	ВремТаблицаДанныеОтчета2.ИмяОбласти";
	
	Запрос.УстановитьПараметр("ВерсияОсновная"	  , Эталон);
	Запрос.УстановитьПараметр("ВерсияДляСравнения", ВерсияДляСравнения);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьДокументРезультат()
		
	Макет = Эталон.ХранилищеТабДокумент.Получить();
	
	Если НЕ ТипЗнч(Макет) = Тип("ТабличныйДокумент") Тогда
		Макет = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	// Покажем макет сохраненный в документе
	ДокументРезультат.Вывести(Макет);
	
	Результат = РезультатЗапросаПоСравнению();
	
	Выборка = Результат.Выбрать();
	
	ТабДокОтсутствующие = Новый ТабличныйДокумент;
	
	ТабДокОтсутствующие.Область(3,2).Текст = "Отсутствующие показатели";
	ТабДокОтсутствующие.Область(3,2).Шрифт = Новый Шрифт(, 14, Истина);
	
	НомерСтрокиОтсутствующегоПоказателя = 4;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоОтсутствующийПоказатель Тогда
			ТабДокОтсутствующие.Область(НомерСтрокиОтсутствующегоПоказателя,2).Текст = Выборка.ПоказательОтчетаОтсутствующий;
			ТабДокОтсутствующие.Область(НомерСтрокиОтсутствующегоПоказателя,3).Текст = Выборка.ЗначениеПоказателяОтсутствующий;
			
			ТабДокОтсутствующие.Область(НомерСтрокиОтсутствующегоПоказателя,3).ЦветФона = Новый Цвет(255, 255, 192);
			
			ТабДокОтсутствующие.Область(НомерСтрокиОтсутствующегоПоказателя,2).Расшифровка = Выборка.ПоказательОтчетаОтсутствующий;
			ТабДокОтсутствующие.Область(НомерСтрокиОтсутствующегоПоказателя,3).Расшифровка = Выборка.ИмяОбластиОтсутствующий;
			
			ТабДокОтсутствующие.Область(НомерСтрокиОтсутствующегоПоказателя,2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			
			НомерСтрокиОтсутствующегоПоказателя = НомерСтрокиОтсутствующегоПоказателя + 1;
		Иначе
			бит_МеханизмПолученияДанных.УстановитьЗначениеВТабличныйДокумент(ДокументРезультат, Выборка.ИмяОбласти, Выборка.Дельта);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НомерСтрокиОтсутствующегоПоказателя = 4 Тогда
		ДокументРезультат.Вывести(ТабДокОтсутствующие);
	КонецЕсли;
	
	РасчетШириныКолонок(ДокументРезультат);
	
КонецПроцедуры

&НаСервере
Процедура РасчетШириныКолонок(ТабличныйДокумент)
	
	Перем МаксимальнаяШиринаКолонки;
	Перем КонечнаяСтрока, НачальнаяСтрока, ТекущаяКолонка, ТекущаяСтрока, НачалоДанных;
	Перем ОбластьШапки, ОбластьПодвала;
	Перем ШиринаКолонки, ТекстЯчейки, НомерСтрокиТекста;
	Перем КоличествоУровнейГруппировокСтрок, Отступ;
	Перем ШириныКолонок;
	
	мРассчитыватьШиринуКолонкиПоНазванию = Истина;
	мМинимальнаяШиринаКолонкиПоказатель = 14;
	
	// Ограничение максимальной ширины колонки
	МаксимальнаяШиринаКолонки = 50;
	
	// Массив, в который будут помещаться ширины колонок.
	ШириныКолонок = Новый Массив;
	
	// Получим количество уровней группировок в отчете для учета автоматического отступа.
	КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	
	// Инициализируем начальные строки
	НачальнаяСтрока = 0;
	НачалоДанных = 0;
	
	// Найдем в результирующем документе область шапки таблицы.
	ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаТаблицы");
	
	Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		// Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины.
		НачальнаяСтрока = ОбластьШапки.Верх;
		НачалоДанных = ОбластьШапки.Низ + 1;
	Иначе
		// Если область шапки таблицы не найдена, найдем область шапки строк.
		ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаСтрок");
		Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			// Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины.
			НачальнаяСтрока = ОбластьШапки.Верх;
			НачалоДанных = ОбластьШапки.Низ + 1;
		КонецЕсли;
	КонецЕсли;
	
	// Получим область подвала отчета и вычислим конечную строку расчета.
	ОбластьПодвала = ТабличныйДокумент.Области.Найти("Подвал");
	Если ТипЗнч(ОбластьПодвала) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		// Область подвала найдена
		КонечнаяСтрока = ОбластьПодвала.Верх - 1;
	Иначе 
		// Область подвала не найдена
		КонечнаяСтрока = ТабличныйДокумент.ВысотаТаблицы;
	КонецЕсли;
	
	// Переберем все колонки отчета
	Для ТекущаяКолонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		АвтоОтступ = 0;
		
		// Переберем строки, которые будут использованы для расчета ширин колонок.
		Для ТекущаяСтрока = НачальнаяСтрока По КонечнаяСтрока Цикл
			ШиринаКолонки = 0;

			// Получим область текущей ячейки
			ОбластьЯчейки = ТабличныйДокумент.Область(ТекущаяСтрока, ТекущаяКолонка);
			Если ОбластьЯчейки.Лево <> ТекущаяКолонка Или ОбластьЯчейки.Верх <> ТекущаяСтрока Тогда
				// Данная ячейка принадлежит объединенным ячейкам и не является начальной ячейкой.
				Продолжить;
			КонецЕсли;
			
			Если КоличествоУровнейГруппировокСтрок > 0 И ТекущаяСтрока = НачалоДанных Тогда
				// Для первой строки с данными получим значение автоотступа.
				АвтоОтступ = ОбластьЯчейки.АвтоОтступ;
			КонецЕсли;
			
			// Получим текст ячейки
			ТекстЯчейки = ОбластьЯчейки.Текст;
			
			// Для каждой строки из текста ячейки рассчитаем количество символов в строке.
			Для НомерСтрокиТекста = 1 По СтрЧислоСтрок(ТекстЯчейки) Цикл
				ШиринаТекстаЯчейки = СтрДлина(СтрПолучитьСтроку(ТекстЯчейки, НомерСтрокиТекста));
				Если НЕ мРассчитыватьШиринуКолонкиПоНазванию И ТекущаяСтрока < НачалоДанных И ШиринаТекстаЯчейки > 0 Тогда
					ШиринаТекстаЯчейки = мМинимальнаяШиринаКолонкиПоказатель;
				КонецЕсли;
				
				// Если используется автоотступ, то прибавим к ширине ячейки его величину.
				Если АвтоОтступ <> Неопределено И АвтоОтступ > 0 Тогда
					ШиринаТекстаЯчейки = ШиринаТекстаЯчейки + КоличествоУровнейГруппировокСтрок * АвтоОтступ;
				КонецЕсли;
				ШиринаКолонки = Макс(ШиринаКолонки, ШиринаТекстаЯчейки);
			КонецЦикла;

			Если ШиринаКолонки > МаксимальнаяШиринаКолонки Тогда
				// Ограничим ширину колонки
				ШиринаКолонки = МаксимальнаяШиринаКолонки;
			КонецЕсли;
			
			Если ШиринаКолонки <> 0 Тогда
			// Ширина колонки рассчитана
				
				// Определим, сколько ячеек по ширине используется в области для текущей ячейки.
				КоличествоКолонок = ОбластьЯчейки.Право - ОбластьЯчейки.Лево;
				// Переберем все ячейки, расположенные в области.
				Для НомерКолонки = 0 По КоличествоКолонок Цикл
					
					Если ШириныКолонок.ВГраница() >= ТекущаяКолонка - 1 + НомерКолонки Тогда
						// В массиве ширин колонок уже был элемент для текущей колонки.
						Если ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Неопределено Тогда
							// Значение ширины колонки еще не было установлено.
							ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = ШиринаКолонки / (КоличествоКолонок + 1);
						Иначе
							// Значение ширины колонки уже было установлено
							// Вычислим максимум ширины колонки.
							ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Макс(ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки], ШиринаКолонки / (КоличествоКолонок + 1));
						КонецЕсли;
					Иначе
						// В массиве ширин колонок еще не было элемента для данной колонки
						// Добавим элемент в массив ширин колонок.
						ШириныКолонок.Вставить(ТекущаяКолонка - 1 + НомерКолонки, ШиринаКолонки / (КоличествоКолонок + 1));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	// Конец цикла перебора строк
	КонецЦикла;	// Конец цикла перебора колонок
	
	// Переберем все элементы в массиве вычисленных ширин колонок.
	Для ТекущаяКолонка = 0 По ШириныКолонок.ВГраница() Цикл
		Если ШириныКолонок[ТекущаяКолонка] <> Неопределено Тогда
			// Ширина колонок установлена
			// Установим ширину области ячеек.
			Если ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки < ШириныКолонок[ТекущаяКолонка] + 1 Тогда
				ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки = ШириныКолонок[ТекущаяКолонка] + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры
 
#КонецОбласти
