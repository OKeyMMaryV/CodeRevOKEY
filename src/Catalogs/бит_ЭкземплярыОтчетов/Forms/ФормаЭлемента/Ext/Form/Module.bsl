
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийВидСравнения; // Служит для передачи вида сравнения между обработчиками.

&НаКлиенте
Перем мТекущийВидПараметра; // Служит для передачи вида параметра между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Значения по умолчанию
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.СтандартныйПериод = "ЭтотГод";
		Объект.ДатаНачала    = НачалоГода(ОбщегоНазначения.ТекущаяДатаПользователя());
		Объект.ДатаОкончания = КонецГода(ОбщегоНазначения.ТекущаяДатаПользователя());
		
	КонецЕсли; 
	
	Если Параметры.Свойство("ПараметрыОтчета") Тогда
	
		Для каждого КиЗ Из Параметры.ПараметрыОтчета Цикл
		
			Если КиЗ.Ключ = "ОтборВОтчете" 
				 ИЛИ КиЗ.Ключ = "ТаблицаПараметры" 
				 ИЛИ КиЗ.Ключ = "ТаблицаДанныеОтчета"  Тогда
				
				Для каждого СтрокаТаблицы Из КиЗ.Значение Цикл
					НоваяСтрока = ЭтотОбъект[КиЗ.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
				КонецЦикла; 
			ИначеЕсли КиЗ.Ключ = "ТабДокРезультат"	 Тогда
				
				ТабДокВрем = КиЗ.Значение;
				Если ТипЗнч(ТабДокВрем) = Тип("ТабличныйДокумент") Тогда
					ТабДокРезультат.ФиксацияСверху = ТабДокВрем.ФиксацияСверху;
					ТабДокРезультат.ФиксацияСлева  = ТабДокВрем.ФиксацияСлева;
					ТабДокРезультат.Вывести(ТабДокВрем);
				КонецЕсли; 
			Иначе
				Если НЕ Метаданные.Справочники.бит_ЭкземплярыОтчетов.Реквизиты.Найти(КиЗ.Ключ) = Неопределено Тогда
					Объект[КиЗ.Ключ] = КиЗ.Значение;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; // Параметры.ПараметрыОтчета
		
		ДанныеАктуальны = Истина;
		
	КонецЕсли; // Есть ПараметрыОтчета
	
	ЗаполнитьКэшЗначений();
	
	УстановитьСписокВыбораЭлементов();
	
	// Параметры выбора текущей версии
	СтрВыбора = Новый Структура;
	СтрВыбора.Вставить("ЭкземплярОтчета",Объект.Ссылка);
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.АктуальнаяВерсия, СтрВыбора);
	
	// Восстановим стандартный период по строке
	ВосстановитьСтандартныйПериод();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		// Восстановим таблицу данных
		Документы.бит_ВерсияОтчета.ВосстановитьТаблицуВерсии(Объект.АктуальнаяВерсия,ТаблицаДанныеОтчета);
		
		// Восстановим табличный документ
		Если ЗначениеЗаполнено(Объект.АктуальнаяВерсия) Тогда
			ВосстановитьТабличныйДокумент();
			Если Объект.УдалитьПримечания Тогда
				ВыполнитьУдалениеПримечаний(ТабДокРезультат);
			КонецЕсли; 
		КонецЕсли; 
		
		// Восстановим таблицу ОтборВОтчете
		Документы.бит_ВерсияОтчета.ВосстановитьТаблицуОтборов(Объект,ОтборВОтчете);
		// Восстановим таблицу ТаблицаПараметры
		Документы.бит_ВерсияОтчета.ВосстановитьТаблицуПараметров(Объект,ТаблицаПараметры);
		// Восстановим допустимые типы в таблице параметров.
		бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Объект.НастройкаОтчета.СпособКомпоновки, ТаблицаПараметры, Ложь);	
		
	КонецЕсли; 
	
	// В начала устанавливаем отбор в результате которого будет чистое поле.
	СтрОтбор = Новый ФиксированнаяСтруктура("ИмяОбласти","#UnrealCellName#");
	Элементы.ТаблицаДанныеОтчета.ОтборСтрок  = СтрОтбор;
	
	НастроитьТаблицуДанных();	
		
	Если Объект.ЗаполнитьПриОткрытии Тогда
		
		// Экземпляр был создан автоматически при генерации задачи
		// необходимо заполнить макет и таблицы ОтборВОтчете и Параметры.
		ИзменениеНастройки();
		Объект.ЗаполнитьПриОткрытии = Ложь;
		
	КонецЕсли; 
	
	ПанельДеталиВидимость = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
								"НастройкиПользователя", "Справочник.бит_ЭкземплярыОтчетов.ПанельДеталиВидимость", Истина);
	ПанельНастройкиСкрыта = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
								"НастройкиПользователя", "Справочник.бит_ЭкземплярыОтчетов.ПанельНастройкиСкрыта", Ложь);

	Элементы.ФормаКомандаВидимостьДетали.Пометка    = ПанельДеталиВидимость;
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ПанельНастройкиСкрыта;
	Элементы.ФормаКомандаУдалитьПримечания.Пометка  = Объект.УдалитьПримечания;	
	
	УстановитьВидимость();
	УстановитьУсловноеОфрмление();
	
КонецПроцедуры // ПриСозданииНаСервере()   

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗначенияПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
		
	флЗаписатьНовую     = ЗаписатьНовуюВерсию ИЛИ НЕ ЗначениеЗаполнено(Объект.АктуальнаяВерсия);
	флДействиеВыполнено = Ложь;	
	
	Если Объект.Ссылка.Пустая() Тогда
		
		НоваяСсылка = Справочники.бит_ЭкземплярыОтчетов.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(НоваяСсылка);
		
	КонецЕсли; 
	
	СохранитьТаблицуОтборов(ТекущийОбъект);
	СохранитьТаблицуПараметров(ТекущийОбъект);
	
	Если флЗаписатьНовую Тогда
		
		// Создаем новую версия экземпляра отчета
		ДокВерсия = Документы.бит_ВерсияОтчета.СоздатьДокумент();
		ЗаполнитьВерсию(ДокВерсия,НоваяСсылка,ТекущийОбъект);
		
		Если ЗначениеЗаполнено(ДокВерсия.РежимЗависимыхОборотов) Тогда
			ДокВерсия.РежимЗависимыхОборотов = Объект.РежимЗависимыхОборотов;
		Иначе	
			ДокВерсия.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.НеФормировать;
		КонецЕсли; 
		
		ДокВерсия.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();		
		ДокВерсия.УстановитьНомерВерсии();
		
		флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокВерсия,РежимЗаписиДокумента.Проведение,,"Ошибки");
		
		Если флДействиеВыполнено Тогда
			ТекущийОбъект.АктуальнаяВерсия = ДокВерсия.Ссылка;
		КонецЕсли; 
		
	Иначе	
		
		// Обновляем существующую версию
		ДокВерсия = Объект.АктуальнаяВерсия.ПолучитьОбъект();
		ЗаполнитьВерсию(ДокВерсия,НоваяСсылка,ТекущийОбъект);		
		флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ДокВерсия,РежимЗаписиДокумента.Проведение,, "Ошибки", Ложь);
		
	КонецЕсли; 
	
	Если НЕ флДействиеВыполнено = Истина Тогда
		ТекстСообщения = Нстр("ru = 'Не удалось записать версию экземпляра отчета.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , ,Отказ); 
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Параметры выбора текущей версии
	СтрВыбора = Новый Структура;
	СтрВыбора.Вставить("ЭкземплярОтчета",Объект.Ссылка);
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.АктуальнаяВерсия, СтрВыбора);
	
	ЗаписатьНовуюВерсию = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Если необходимо формировать движения по бюджету
	// проверим установлены ли обязательные аналитики ЦФО и СтатьяОборотов.
	Если Объект.ФормироватьДвиженияПоБюджету Тогда
		
		флЦФО    = Ложь;
		флСтатья = Ложь;
		
		Для каждого КиЗ Из фКэшЗначений.НастройкиАналитик Цикл
			Если КиЗ.Значение.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ЦФО 
				И КиЗ.Значение.Обязательное Тогда
			
				флЦФО = Истина;
			КонецЕсли; 
			
			Если КиЗ.Значение.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов 
				И КиЗ.Значение.Обязательное Тогда
				
				флСтатья = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
		Если флЦФО = Ложь ИЛИ флСтатья = Ложь Тогда
			ТекстСообщения = НСтр("ru = 'Для формирования движений по бюджету в настройке отчета должны быть установлены обязательные аналитики ""ЦФО"" и ""Статья оборотов"".'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "НастройкаОтчета", "Объект", Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
    // Проверка заполнения аналитик
	СтруктураОбязательных = Новый Структура;
	Для каждого КиЗ Из фКэшЗначений.НастройкиАналитик Цикл
		Если КиЗ.Значение.Обязательное Тогда
			СтруктураОбязательных.Вставить(КиЗ.Ключ,КиЗ.Значение.Синоним);
		КонецЕсли; 
	КонецЦикла; 
	
	Если Объект.НастройкаОтчета.ОтображатьПериод Тогда
		СтруктураОбязательных.Вставить("ПериодДанных",Нстр("ru = 'Период данных'"));
	КонецЕсли; 
	
	КоличествоОбязательных = СтруктураОбязательных.Количество();
	Если КоличествоОбязательных > 0 Тогда
		
		ТаблицаДляПроверки = ТаблицаДанныеОтчета.Выгрузить();
		ТаблицаДляПроверки.Индексы.Добавить("ФормироватьДвиженияПоБюджету, ПоказательОтчета");
		
		ПоказателиОтчета = Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьПоказателиОтчета(Объект.НастройкаОтчета);
		
		Для каждого ТекПоказатель Из ПоказателиОтчета Цикл
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ФормироватьДвиженияПоБюджету", Истина);
			СтрОтбор.Вставить("ПоказательОтчета", ТекПоказатель.Ссылка);
			
			ДанныеПоказателя = ТаблицаДляПроверки.НайтиСтроки(СтрОтбор);
			
			Пустые = Новый Соответствие;
			
			Для каждого СтрокаДанные Из ДанныеПоказателя Цикл
				
				Для каждого КиЗ Из СтруктураОбязательных Цикл
					Если Пустые[КиЗ.Ключ] = Неопределено И  НЕ ЗначениеЗаполнено(СтрокаДанные[КиЗ.Ключ]) Тогда
						Отказ = Истина;
						Пустые.Вставить(КиЗ.Ключ,КиЗ.Значение);
					КонецЕсли; 
				КонецЦикла; // По обязательным полям
				
				Если Пустые.Количество()>=КоличествоОбязательных Тогда
					 Прервать;
				КонецЕсли; 
			КонецЦикла; // ДанныеПоказателя
			
			Если Пустые.Количество()>0 Тогда
				ТекстСообщения = НСтр("ru = 'По показателю ""%1%"" обнаружены незаполненные значения обязательных аналитик:'");
				Для каждого КиЗ Из Пустые Цикл
					ТекстСообщения = ТекстСообщения+Символы.ПС + "- " + КиЗ.Значение;
				КонецЦикла; 
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(ТекПоказатель.Ссылка));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект", Отказ); 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АктивизироватьОбласть" И Источник = УникальныйИдентификатор Тогда
		АктивизироватьОбласть(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "СтандартныйПериод".
// 
&НаКлиенте
Процедура СтандартныйПериодПриИзменении(Элемент)
	
	Объект.ДатаНачала    = СтандартныйПериод.ДатаНачала;
	Объект.ДатаОкончания = СтандартныйПериод.ДатаОкончания;
	Объект.СтандартныйПериод = бит_ОбщегоНазначенияКлиентСервер.ИмяВариантаСтандартногоПериода(СтандартныйПериод.Вариант);	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтандартныйПериод".
// 
&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	Объект.СтандартныйПериод = бит_ОбщегоНазначенияКлиентСервер.ИмяВариантаСтандартногоПериода(СтандартныйПериод.Вариант);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаНачала".
// 
&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	Объект.СтандартныйПериод = бит_ОбщегоНазначенияКлиентСервер.ИмяВариантаСтандартногоПериода(СтандартныйПериод.Вариант);	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаОкончанияОднаДата".
// 
&НаКлиенте
Процедура ДатаОкончанияОднаДатаПриИзменении(Элемент)
	
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	Объект.СтандартныйПериод = бит_ОбщегоНазначенияКлиентСервер.ИмяВариантаСтандартногоПериода(СтандартныйПериод.Вариант);	
	Объект.ДатаНачала = бит_МеханизмПолученияДанных.ОпределитьДатуНачалаДляМСФО(фКэшЗначений.ТипОтчета
	                                                                              , Объект.ДатаНачала
																				  , Объект.ДатаОкончания);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФорматЧисел".
// 
&НаКлиенте
Процедура ФорматЧиселНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонструктовФормата = Новый КонструкторФорматнойСтроки(Объект.ФорматЧисел);
	
	КонструктовФормата.ДоступныеТипы = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	
	Обработчик = Новый ОписаниеОповещения("ФорматЧиселНачалоВыбораЗавершение", ЭтотОбъект);
	
	КонструктовФормата.Показать(Обработчик);
	
КонецПроцедуры

// Процедура - завершение выбора реквизита "ФорматЧисел".
// 
&НаКлиенте
Процедура ФорматЧиселНачалоВыбораЗавершение(Результат, Параметры) Экспорт
 
	Если Результат <> Неопределено Тогда
		Объект.ФорматЧисел = Результат;
		Модифицированность = Истина;
	    ИзменениеФорматаЧисел();
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФорматЧисел".
// 
&НаКлиенте
Процедура ФорматЧиселПриИзменении(Элемент)
	
	ИзменениеФорматаЧисел();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Язык".
// 
&НаКлиенте
Процедура ЯзыкПриИзменении(Элемент)
	
	ИзменениеЯзыка();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НастройкаОтчета".
// 
&НаКлиенте
Процедура НастройкаОтчетаПриИзменении(Элемент)
	
	ИзменениеНастройки();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтотОбъект
	                                                   ,Элемент
	                                                   ,Объект
	                                                   ,"Организация"
													   ,фКэшЗначений.СписокТиповОрганизация
													   ,СтандартнаяОбработка);
	
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьЗаголовокОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСписок = СформироватьСписокВыбораНаименование();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, ТекСписок);
	
КонецПроцедуры

// Процедура - завершение выбора реквизита "Наименование".
// 
&НаКлиенте
Процедура НаименованиеНачалоВыбораЗавершение(ВыбЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбЗначение = Неопределено Тогда
	
		Объект.Наименование = ВыбЗначение.Значение;
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Валюта".
// 
&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ИзменениеВалютыСервер();
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииОбласти" 
// поля табличного документа "ТабДокРезультат".
// 
&НаКлиенте
Процедура ТабДокРезультатПриАктивизацииОбласти(Элемент)
	
	Если ПанельДеталиВидимость Тогда
		
		ОблМакета = Элементы.ТабДокРезультат.ТекущаяОбласть;
		Если ОблМакета <> Неопределено И ТипЗнч(ОблМакета) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			ИмяТекущейОбласти  = ОблМакета.Имя;
			
			Если ТипЗнч(ОблМакета.Защита) = Тип("Булево") Тогда
				ЗащитаТаблицыДанных = ОблМакета.Защита;
			Иначе	
				ЗащитаТаблицыДанных = Ложь;
			КонецЕсли; 
			
			// Используем обработчик ожидания, т.к. вызовы сервера в данном обработчике приводят к зацикливанию.
			ОтключитьОбработчикОжидания("ОжиданиеАктивизацииТабДокументРезультат");
			ПодключитьОбработчикОжидания("ОжиданиеАктивизацииТабДокументРезультат",0.1,Истина);
		КонецЕсли; // ОблМакета подходит
	КонецЕсли; // ПанельНастройкиСкрыта
	
КонецПроцедуры

// Процедура- обрабатчик ожидания активизации табличного документа результат.
// 
&НаКлиенте
Процедура ОжиданиеАктивизацииТабДокументРезультат()
	
	бит_БюджетированиеКлиентСервер.ОчиститьВыделениеАргументов(ТабДокРезультат, АктивныеОбласти);
	ОблМакета = Элементы.ТабДокРезультат.ТекущаяОбласть;
	Если бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОблМакета) И ОблМакета.СодержитЗначение = Истина Тогда
		АктивныеОбласти.Добавить(ОблМакета.Имя);
		бит_БюджетированиеКлиент.ВеделитьОбласть(ТабДокРезультат, АктивныеОбласти);
		Если НЕ ПустаяСтрока(ОблМакета.Формат) Тогда
			Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.Формат				= ОблМакета.Формат;
			Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.ФорматРедактирования = ОблМакета.Формат;			
		КонецЕсли; 
	КонецЕсли; 
	
	ДействияПриАктивизацииТабДокументРезультат(ЭтотОбъект);
	УстановитьОтборДанных(ИмяТекущейОбласти);

КонецПроцедуры // ОжиданиеАктивизацииТабДокументРезультат()

// Процедура - обработчик события "ПриИзмененииСодержимогоОбласти" 
// поля табличного документа "ТабДокРезультат".
// 
&НаКлиенте
Процедура ТабДокРезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.СодержитЗначение 
		 И ТипЗнч(Область.Значение) = Тип("Число") Тогда
		 
		ИзменениеСодержимогоОбласти(Область.Имя,Область.Значение);
			
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АктуальнаяВерсия".
// 
&НаКлиенте
Процедура АктуальнаяВерсияПриИзменении(Элемент)
	
	ИзменениеАктуальнойВерсии();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" переключателя "ФормироватьДвиженияПоБюджету".
// 
&НаКлиенте
Процедура ФормироватьДвиженияПоБюджетуПриИзменении(Элемент)
	
	ИзменениеФормироватьДвиженияПоБюджету();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗависимыхОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.Автоматический"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.бит_РежимыЗависимыхОборотов.НеФормировать"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДанныеОтчета

// Процедура - обработчик события "ПриОкончанииРедактирования" 
// табличного поля "ТаблицаДанныеОтчета".
// 
&НаКлиенте
Процедура ТаблицаДанныеОтчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ТаблицаДанныеОтчета.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ИзменениеЗначенияПоказателя(ТекущаяСтрока.ПоказательОтчета);
		ТекущаяСтрока.РучнаяКорректировка = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличного поля "ТаблицаДанныеОтчета".
// 
&НаКлиенте
Процедура ТаблицаДанныеОтчетаПослеУдаления(Элемент)
	
	Если ЗначениеЗаполнено(ТекущийПоказатель) Тогда
		
	    ИзменениеЗначенияПоказателя(ТекущийПоказатель);		
		ТекущийПоказатель = Неопределено;
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" табличного поля "ТаблицаДанныеОтчета".
// 
&НаКлиенте
Процедура ТаблицаДанныеОтчетаПередУдалением(Элемент, Отказ)
	
	Если НЕ Отказ Тогда
	
		ТекущийПоказатель = Элементы.ТаблицаДанныеОтчета.ТекущиеДанные.ПоказательОтчета;
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТаблицаДанныеОтчета".
// 
&НаКлиенте
Процедура ТаблицаДанныеОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элементы.ТаблицаДанныеОтчета.ТекущиеДанные;
		
		Если НЕ Копирование Тогда
			Если Элементы.ТаблицаДанныеОтчета.ОтборСтрок.Свойство("ИмяОбласти") Тогда
				ИмяОбласти = Элементы.ТаблицаДанныеОтчета.ОтборСтрок.ИмяОбласти;
				ЗаполнитьНовуюСтроку(ТекущаяСтрока.ПолучитьИдентификатор(),ИмяОбласти);
			КонецЕсли;
		Иначе	
			ТекущаяСтрока.ИД = Строка(Новый  УникальныйИдентификатор);			
		КонецЕсли; // НЕ Копирование
	КонецЕсли; // НоваяСтрока 
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "Аналитика_<i>" 
// табличного поля "ТаблицаДанныеОтчета".
// 
&НаКлиенте
Процедура ТаблицаДанныеОтчетаАналитика_Очистка(Элемент, СтандартнаяОбработка)
	
 	ИмяЭлемента = СтрЗаменить(Элемент.Имя,"ТаблицаДанныеОтчета","");
	
	ТекущаяСтрока = Элементы.ТаблицаДанныеОтчета.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущаяСтрока
	                                                                        ,ИмяЭлемента
																			,СтандартнаяОбработка
																			,фКэшЗначений.НастройкиАналитик);
	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Аналитика_<i>" 
// табличного поля "ТаблицаДанныеОтчета".
// 
&НаКлиенте
Процедура ТаблицаДанныеОтчетаАналитика_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
 	ИмяЭлемента = СтрЗаменить(Элемент.Имя,"ТаблицаДанныеОтчета","");
	
	ТекущаяСтрока = Элементы.ТаблицаДанныеОтчета.ТекущиеДанные;
	
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
	                                                      ,Элемент
	                                                      ,ТекущаяСтрока
														  ,ИмяЭлемента
														  ,СтандартнаяОбработка
														  ,фКэшЗначений.НастройкиАналитик);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияПоУмолчанию

&НаКлиенте
Процедура ЗначенияПоУмолчаниюАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого КиЗ Из фКэшЗначений.НастройкиАналитик Цикл
		
		Настройка = КиЗ.Значение;
		СписокВыбора.Добавить(КиЗ.Ключ,Настройка.Синоним);
	
	КонецЦикла; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗначенияПоУмолчаниюАналитикаНачалоВыбораЗавершение", ЭтотОбъект);
		
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора);
	
КонецПроцедуры

// Процедура - завершение выбора реквизита "Аналитика" табличного поля "ЗначенияПоУмолчанию".
// 
&НаКлиенте
Процедура ЗначенияПоУмолчаниюАналитикаНачалоВыбораЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбЭлемент = Неопределено Тогда
		
		ИмяАналитики = ВыбЭлемент.Значение;
		Настройка    = фКэшЗначений.НастройкиАналитик[ИмяАналитики];
		
		ТекущаяСтрока = Элементы.ЗначенияПоУмолчанию.ТекущиеДанные;
		ТекущаяСтрока.ИмяАналитики        = ИмяАналитики;
		ТекущаяСтрока.Аналитика           = Настройка.Аналитика;
		ТекущаяСтрока.ЗначениеАналитики   = Настройка.ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
	ОбновитьЗначенияПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПоУмолчаниюАналитикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ИмяАналитики = ВыбранноеЗначение;
		Настройка    = фКэшЗначений.НастройкиАналитик[ИмяАналитики];
		
		ТекущаяСтрока = Элементы.ЗначенияПоУмолчанию.ТекущиеДанные;
		ТекущаяСтрока.ИмяАналитики        = ИмяАналитики;
		ТекущаяСтрока.Аналитика           = Настройка.Аналитика;
		ТекущаяСтрока.ЗначениеАналитики   = Настройка.ЗначениеПоУмолчанию;
	
	КонецЕсли; 
	
	ОбновитьЗначенияПоУмолчанию();

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеПоУмолчанию" 
// табличного поля "ЗначенияПоУмолчанию".
// 
&НаКлиенте
Процедура ЗначенияПоУмолчаниюЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ЗначенияПоУмолчанию.ТекущиеДанные;
	
	ИмяЭлемента = "ЗначениеАналитики";
	
	ТекНастройка = фКэшЗначений.НастройкиАналитик[ТекущаяСтрока.ИмяАналитики];
	
	СтрНастройки = Новый Структура;
	СтрНастройки.Вставить(ИмяЭлемента,ТекНастройка);
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			,ТекущаяСтрока
	                                                                        ,ИмяЭлемента
																			,СтандартнаяОбработка
																			,СтрНастройки);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗначениеПоУмолчанию"
// табличного поля "ЗначенияПоУмолчанию".
// 
&НаКлиенте
Процедура ЗначенияПоУмолчаниюЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ЗначенияПоУмолчанию.ТекущиеДанные;
	
	ИмяЭлемента = "ЗначениеАналитики";
	
	ТекНастройка = фКэшЗначений.НастройкиАналитик[ТекущаяСтрока.ИмяАналитики];
	
	СтрНастройки = Новый Структура;
	СтрНастройки.Вставить(ИмяЭлемента,ТекНастройка);
	
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
														  ,Элемент
														  ,ТекущаяСтрока
														  ,ИмяЭлемента
														  ,СтандартнаяОбработка
														  ,СтрНастройки);
КонецПроцедуры

// Процедура обновляет кэш значений по-умолчанию, используемый при заполнении ТаблицыДанныеОтчета.
// 
&НаКлиенте
Процедура ОбновитьЗначенияПоУмолчанию()

	СтрЗначения = Новый Структура;
	
	Для каждого СтрокаТаблицы Из Объект.ЗначенияПоУмолчанию Цикл
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.ИмяАналитики) Тогда
			
			Если НЕ СтрЗначения.Свойство(СтрокаТаблицы.ИмяАналитики) Тогда
				
				СтрЗначения.Вставить(СтрокаТаблицы.ИмяАналитики,СтрокаТаблицы.ЗначениеАналитики);
				
			КонецЕсли; 
			
		КонецЕсли; // ИмяЗадано
	
	КонецЦикла; // Объект.ЗначенияПоУмолчанию

    фКэшЗначений.ЗначенияПоУмолчанию = СтрЗначения;
	
КонецПроцедуры // ОбновитьЗначенияПоУмолчанию()

// Процедура - обработчик события "ПриОкончанииРедактирования" 
// табличного поля "ЗначенияПоУмолчанию".
// 
&НаКлиенте
Процедура ЗначенияПоУмолчаниюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьЗначенияПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметры

// Процедура выполняет обновление таблицы параметров.
// 
&НаСервере
Процедура ОбновитьТаблицуПараметров()
	
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Объект.НастройкаОтчета.СпособКомпоновки, ТаблицаПараметры, Ложь);
	
КонецПроцедуры // ОбновитьТаблицуПараметров()

// Процедура - обработчик события "ПриНачалеРедактирования" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение;   			
	КонецЕсли; 
	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	ОграничитьОписаниеТиповПараметра();
	
КонецПроцедуры // ТаблицаПараметрыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	// Изменение кода. Начало. 21.06.2011{{
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		
		ОграничитьОписаниеТиповПараметра();
				
	КонецЕсли; 
	// Изменение кода. Конец. 21.06.2011}}
		
КонецПроцедуры // ТаблицаПараметрыВидПараметраПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;

КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения); 
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()
     
// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
		
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока        = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущаяСтрока.Значение = Неопределено Тогда
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
		
	Иначе	
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеОчистка" 
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Объект.ДатаНачала, Объект.ДатаОкончания) Тогда
		ЗаполнитьДанные();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВидимостьНастройки(Команда)
	
	ПанельНастройкиСкрыта = НЕ ПанельНастройкиСкрыта;
	Элементы.ФормаКомандаВидимостьНастройки.Пометка = НЕ ПанельНастройкиСкрыта;
	
	УстановитьВидимостьПанелей();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВидимостьДетали(Команда)
	
	ПанельДеталиВидимость = НЕ ПанельДеталиВидимость;
	Элементы.ФормаКомандаВидимостьДетали.Пометка = ПанельДеталиВидимость;
	
	УстановитьВидимостьПанелей();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьНовуюВерсию(Команда)
	
	ЗаписатьНовуюВерсию = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьАналитикиПоУмолчанию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьАналитикиПоУмолчаниюЗавершение", ЭтотОбъект);
	ТекстСообщения = НСтр("ru = 'Будут перезаполнены значения всех аналитик 
	                             |согласно значениям, установленным по-умолчанию. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет,Нстр("ru = 'Заполнение по умолчанию'"));

КонецПроцедуры

// Процедура - завершение обработки команды "ЗаполнитьАналитикиПоУмолчанию".
// 
&НаКлиенте
Процедура КомандаЗаполнитьАналитикиПоУмолчаниюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьАналитики(,Истина);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьАналитикуПоУмолчанию(Команда)
	
	ТекущаяСтрока = Элементы.ЗначенияПоУмолчанию.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьАналитикуПоУмолчаниюЗавершение", ЭтотОбъект, ТекущаяСтрока);
		ТекстСообщения = НСтр("ru = 'Будут перезаполнены значения аналитики ""%1%"" 
		                            |согласно значениям, установленным по-умолчанию. Продолжить?'");
									
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(ТекущаяСтрока.Аналитика));
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет, Нстр("ru = 'Заполнение по умолчанию'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Не выбрана аналитика для заполнения.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - завершение обработки команды "ЗаполнитьАналитикуПоУмолчанию".
// 
&НаКлиенте
Процедура КомандаЗаполнитьАналитикуПоУмолчаниюЗавершение(Ответ, ТекущаяСтрока) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьАналитики(ТекущаяСтрока.ИмяАналитики,Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДополнитьАналитикиПоУмолчанию(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаДополнитьАналитикиПоУмолчаниюЗавершение", ЭтотОбъект);
	ТекстСообщения = НСтр("ru = 'Будут заполнены пустые значения всех аналитик 
	                             |согласно значениям, установленным по-умолчанию. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет, Нстр("ru = 'Заполнение по умолчанию'"));
	
КонецПроцедуры

// Процедура - завершение обработки команды "ДополнитьАналитикиПоУмолчанию".
// 
&НаКлиенте
Процедура КомандаДополнитьАналитикиПоУмолчаниюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьАналитики();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДополнитьАналитикуПоУмолчанию(Команда)
	
	ТекущаяСтрока = Элементы.ЗначенияПоУмолчанию.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаДополнитьАналитикуПоУмолчаниюЗавершение", ЭтотОбъект, ТекущаяСтрока);
		ТекстСообщения = НСтр("ru = 'Будут заполнены пустые значения аналитики ""%1%"" 
		                            |согласно значениям, установленным по-умолчанию. Продолжить?'");
									
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(ТекущаяСтрока.Аналитика));
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет, Нстр("ru = 'Заполнение по умолчанию'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Не выбрана аналитика для заполнения.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - завершение обработки команды "ДополнитьАналитикуПоУмолчанию".
// 
&НаКлиенте
Процедура КомандаДополнитьАналитикуПоУмолчаниюЗавершение(Ответ, ТекущаяСтрока) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьАналитики(ТекущаяСтрока.ИмяАналитики,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПараметры(Команда)
	
	Если ТаблицаПараметры.Количество()>0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьПараметрыЗавершение", ЭтотОбъект);
		ТекстСообщения = НСтр("ru = 'Параметры будут перезаполнены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ОбновитьТаблицуПараметров();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - завершение обработки команды "ЗаполнитьПараметры".
// 
&НаКлиенте
Процедура КомандаЗаполнитьПараметрыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ОбновитьТаблицуПараметров();

КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьЯчейку(Команда)
	
	ОткрытьФормуРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьВсе(Команда)
	
	ОткрытьФормуРасшифровки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьОтчетом(Команда)
	
	РасшифроватьОтчетом();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьРасшифровки(Команда)
	
	бит_мпд_Клиент.ЗакрытьРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	
	ТекОбл = ТабДокРезультат.ТекущаяОбласть;
	Если ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		ИзменитьФлажки(ТекОбл.Имя,1);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	ТекОбл = ТабДокРезультат.ТекущаяОбласть;
	Если ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		ИзменитьФлажки(ТекОбл.Имя,0);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	ТекОбл = ТабДокРезультат.ТекущаяОбласть;
	Если ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		ИзменитьФлажки(ТекОбл.Имя,2);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьПримечания(Команда)
	
	Элементы.ФормаКомандаУдалитьПримечания.Пометка = НЕ Элементы.ФормаКомандаУдалитьПримечания.Пометка;
	Объект.УдалитьПримечания = НЕ Объект.УдалитьПримечания;
	Модифицированность = Истина;
	
	Если Объект.УдалитьПримечания Тогда
		
		ВыполнитьУдалениеПримечаний(ТабДокРезультат);
		
	Иначе	
		
		ВывестиМакетОтчета();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСравнитьВерсии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Эталон", 		   Объект.АктуальнаяВерсия);
	ПараметрыФормы.Вставить("ЭкземплярОтчета", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ОткрытьФорму("Справочник.бит_ЭкземплярыОтчетов.Форма.СравнениеВерсий", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьМакет(Команда)
	
	ВывестиМакетОтчета();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого СтрокаТаблицы Из ТаблицаДанныеОтчета Цикл
		ЗаполнитьДобавленныеКолонкиВСтроке(СтрокаТаблицы, ЭтотОбъект);
	КонецЦикла; 		

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиВСтроке(СтрокаТаблицы, Форма)
	
	Для Индекс = 1 По 7 Цикл
		СтрНастройка = Форма.фКэшЗначений.НастройкиАналитик["Аналитика_" + Индекс];
		Если СтрНастройка <> Неопределено Тогда
			СтрокаТаблицы["Аналитика_" + Индекс + "Проверять"] = СтрНастройка.Обязательное;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
// Подключаемый обработчик - выполняет активизацию области табличного документа.
// 
// Параметры:
//  ИмяОбласти - Строка.
// 
&НаКлиенте
Процедура АктивизироватьОбласть(ИмяОбласти)

	Обл = ТабДокРезультат.Области.Найти(ИмяОбласти);
	
	Если НЕ Обл = Неопределено Тогда
		
		Элементы.ТабДокРезультат.ТекущаяОбласть = Обл;
			
	КонецЕсли; 

КонецПроцедуры

// Процедура устнанавливает отбор в таблице ТаблицаДанныеОтчета 
// по имени активной области табличного документа.
// 
// Параметры:
//  ИмяОбласти  - Строка
// 
&НаКлиенте
Процедура УстановитьОтборДанных(ИмяОбласти)

	СтрОтбор = Новый Структура("ИмяОбласти",ИмяОбласти); 
	
	// Установим отбор в поле Детали			
	СтрОтборФикс = Новый ФиксированнаяСтруктура(СтрОтбор);
	Элементы.ТаблицаДанныеОтчета.ОтборСтрок  = СтрОтборФикс;			

КонецПроцедуры // УстановитьОтборДанных()

&НаСервере
Процедура УстановитьСписокВыбораЭлементов()
	
	Элементы.ЗначенияПоУмолчаниюАналитика.СписокВыбора.Очистить();	
	
	Для каждого КиЗ Из фКэшЗначений.НастройкиАналитик Цикл
		
		Настройка = КиЗ.Значение;
        Элементы.ЗначенияПоУмолчаниюАналитика.СписокВыбора.Добавить(КиЗ.Ключ, Настройка.Синоним);		
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьФорматЯчеек(ТекущийФормат, ФорматПоУмолчанию, КодСтраны)

	Если ПустаяСтрока(ТекущийФормат) Тогда		
		ПараметрыФормата = Новый Структура("ФорматЧисел", ФорматПоУмолчанию);
	Иначе
		ПараметрыФормата = Новый Структура("ФорматЧисел",ТекущийФормат);
	КонецЕсли;
	
	ФорматнаяСтрока = бит_ОбщегоНазначенияКлиентСервер.ОпределитьФорматПоСтрокеПравил(ПараметрыФормата, 
			ФорматПоУмолчанию, КодСтраны);

	Возврат ФорматнаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРасшифровки(ОткрытьВсе = Ложь)
	
	ТекОбл = Элементы.ТабДокРезультат.ТекущаяОбласть;
	Если ТекОбл <> Неопределено И ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		СтрПар = Новый Структура;
		СтрПар.Вставить("ИмяОбласти"        ,ТекОбл.Имя);
		СтрПар.Вставить("НастройкаОтчета"   ,Объект.НастройкаОтчета);
		СтрПар.Вставить("ДатаНачала"        ,Объект.ДатаНачала);
		СтрПар.Вставить("ДатаОкончания"     ,Объект.ДатаОкончания);
		СтрПар.Вставить("ФорматЧисел"       ,Объект.ФорматЧисел);
		СтрПар.Вставить("ОткрытьВсе"        ,ОткрытьВсе);
		СтрПар.Вставить("ВалютаДокумента"   ,Объект.ВалютаДокумента);
		СтрПар.Вставить("КурсДокумента"     ,Объект.КурсДокумента);
		СтрПар.Вставить("КратностьДокумента",Объект.КратностьДокумента);
		СтрПар.Вставить("Организация"       ,Объект.Организация);
		СтрПар.Вставить("ИмяФормыВладельца" ,ИмяФормы);
		СтрПар.Вставить("НастройкаПулаПодключений", Объект.НастройкаПулаПодключений);		
		
		УпаковатьТаблицы(СтрПар);
		
		СтрКлюч = ?(ОткрытьВсе, Строка(Объект.НастройкаОтчета), ТекОбл.Имя);
		ОткрытьФорму("Обработка.бит_РасшифровкаПроизвольногоОтчета.Форма.ФормаУправляемая", СтрПар, ЭтотОбъект, СтрКлюч);
		
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуРасшифровки()

&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда
			
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
		
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры // ОграничитьОписаниеТиповПараметра()

// Процедура обеспечивает получение данных по настройке произвольного отчета.
// 
&НаСервере
Процедура ЗаполнитьДанные()

	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.НастройкаОтчета) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,"Настройка"); 
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "НастройкаОтчета", "Объект", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	СпрОбъект 	   = РеквизитФормыВЗначение("Объект");
	ТаблицаОтборов = РеквизитФормыВЗначение("ОтборВОтчете");
	
	бит_МеханизмПолученияДанных.СформироватьПроизвольныйОтчет(СпрОбъект, ТабДокРезультат, 
			ТаблицаОтборов, ТаблицаПараметры, ТаблицаДанныеОтчета, Объект.НастройкаПулаПодключений);
	
	Модифицированность = Истина;
	ДанныеАктуальны    = Истина;
	
	УстановитьВидимость();
	 
КонецПроцедуры // ЗаполнитьДанные()

// Процедура заполняет кэш значений, используемый при работе с формой.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	СписокТиповОрганизация = Новый СписокЗначений;
	СписокТиповОрганизация.Добавить(Тип("СправочникСсылка.Организации"));
	Если Метаданные.Справочники.Найти("бит_му_ПериметрыКонсолидации") <> Неопределено Тогда
		СписокТиповОрганизация.Добавить(Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации"), НСтр("ru = 'Периметры консолидации'"));	
	КонецЕсли;
	фКэшЗначений.Вставить("СписокТиповОрганизация", СписокТиповОрганизация);
	
	фКэшЗначений.Вставить("КодСтраны"			, Справочники.бит_Языки.ПолучитьКодЯзыкСтрана(Объект.Язык));
	фКэшЗначений.Вставить("НастройкиАналитик"	, Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьНастройкуАналитик(Объект.НастройкаОтчета));
	фКэшЗначений.Вставить("ЗначенияПоУмолчанию" , Новый Структура);	
	фКэшЗначений.Вставить("МассивВидовСравнения", бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	фКэшЗначений.Вставить("ТипОтчета"			, Объект.НастройкаОтчета.ТипОтчета);
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока", ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	

	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса", ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления",КэшПеречисления);  	
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура восстанавливает стандартный период по строковому представлению.
// 
&НаСервере
Процедура ВосстановитьСтандартныйПериод()

	Попытка
	
		СтандартныйПериод.Вариант = ВариантСтандартногоПериода[Объект.СтандартныйПериод];
	
	Исключение
		
		СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;		
		
	КонецПопытки;
	
	Если СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		
		СтандартныйПериод.ДатаНачала    = Объект.ДатаНачала;
		СтандартныйПериод.ДатаОкончания = Объект.ДатаОкончания;
		
	КонецЕсли; 

КонецПроцедуры // ВосстановитьСтандартныйПериод()

// Процедура восстанавливает табличный документ.
// 
&НаСервере
Процедура ВосстановитьТабличныйДокумент()
	
	ДокОбъект  = Объект.АктуальнаяВерсия.ПолучитьОбъект();
	СохрТабДок = ДокОбъект.ПолучитьТабДокРезультат();
	
	ТабДокРезультат.Очистить();
	
	ТабДокРезультат.ФиксацияСверху = СохрТабДок.ФиксацияСверху;
	ТабДокРезультат.ФиксацияСлева  = СохрТабДок.ФиксацияСлева;
	ТабДокРезультат.Вывести(СохрТабДок);	
	
КонецПроцедуры // ВосстановитьТабличныйДокумент()

&НаСервере
Процедура НастроитьТаблицуДанных()

	// Настроим отображение колонок ТаблицыДанныеОтчета.
	Для каждого Колонка Из Элементы.ТаблицаДанныеОтчета.ПодчиненныеЭлементы Цикл
		
		ИмяКолонки = СтрЗаменить(Колонка.Имя,"ТаблицаДанныеОтчета","");
		Если Найти(ИмяКолонки,"Аналитика_")>0 Тогда
		
			СтрНастройка = фКэшЗначений.НастройкиАналитик[ИмяКолонки];
			
			Если СтрНастройка = Неопределено Тогда
				Колонка.Видимость = Ложь;
			Иначе	
				Колонка.Видимость = Истина;
				Колонка.Заголовок = СтрНастройка.Синоним;
				Колонка.ОграничениеТипа = СтрНастройка.ТипЗначения;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;  
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	// Установим формат для значений
	Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.Формат = Объект.ФорматЧисел;
	Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.ФорматРедактирования = Объект.ФорматЧисел;

КонецПроцедуры

// Процедура управляет видимостью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	ЭтоОтчетМСФО = ?(Объект.НастройкаОтчета.ТипОтчета = Перечисления.бит_ТипыПроизвольныхОтчетов.ОтчетностьМСФО, Истина, Ложь);
	ДоступностьРасшифровок = ?(ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение, Истина, Ложь);
	
	Элементы.ГруппаОрганизацияПериметр.Видимость = ЭтоОтчетМСФО;
	Элементы.ГруппаПериодНаДату.Видимость 		 = ЭтоОтчетМСФО;
	Элементы.ГруппаПериод.Видимость 			 = НЕ ЭтоОтчетМСФО;
	
	Элементы.Сценарий.Видимость                                        = Объект.ФормироватьДвиженияПоБюджету;
	Элементы.ТаблицаДанныеОтчетаФормироватьДвиженияПоБюджету.Видимость = Объект.ФормироватьДвиженияПоБюджету;
	Элементы.ТаблицаДанныеОтчетаГруппаФлажки.Видимость                 = Объект.ФормироватьДвиженияПоБюджету;
	
	Элементы.РежимЗависимыхОборотов.Видимость  = Объект.ФормироватьДвиженияПоБюджету;
	Элементы.ФормаГруппаРасшифровать.Видимость = ДоступностьРасшифровок;
	Элементы.ФормаГруппаРасшифровать.Видимость = ДанныеАктуальны;
	
	Элементы.ТаблицаДанныеОтчетаПериодДанных.Видимость = Объект.НастройкаОтчета.ОтображатьПериод;
	
	УстановитьВидимостьПанелей();
	УстановитьЗаголовокОрганизации();

КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура УстановитьВидимостьПанелей()

	Элементы.ГруппаДетали.Видимость  = ПанельДеталиВидимость;
	Элементы.ГруппаПраво.Видимость   = НЕ ПанельНастройкиСкрыта;
	
	Если ПанельДеталиВидимость Тогда
		ТабДокРезультат.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.БезПерехода;
	Иначе	
		ТабДокРезультат.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.ПоКолонкам;
	КонецЕсли; 

КонецПроцедуры

// Процедура устанавливает заголовок надписи организация в зависимости от того, 
// какое значение выбрано.
// 
&НаСервере
Процедура УстановитьЗаголовокОрганизации()

	Элементы.Организация.Заголовок = ?(Объект.Организация = Неопределено Или ТипЗнч(Объект.Организация) = Тип("СправочникСсылка.Организации")
										, "Организация"
										, "Периметр"); 

КонецПроцедуры // УстановитьЗаголовокОрганизации()

// Процедура обрабатывает изменение формата. 
// Новый формат устанавливается в табличном документе и поле Детализация.
// 
&НаСервере
Процедура ИзменениеФорматаЧисел()
	
	бит_МеханизмПолученияДанных.УстановитьФорматВывода(Объект.НастройкаОтчета,ТабДокРезультат,Объект.ФорматЧисел, Объект.Язык);	
	
	НовыйФормат = ОпределитьФорматЯчеек("", Объект.ФорматЧисел, фКэшЗначений.КодСтраны);
	Для каждого СтрокаТаблицы Из ТаблицаДанныеОтчета Цикл
		СтрокаТаблицы.ФорматЧисел = НовыйФормат;
	КонецЦикла; 
	
	Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.Формат				= НовыйФормат;
	Элементы.ТаблицаДанныеОтчетаЗначениеПоказателя.ФорматРедактирования = НовыйФормат;			

КонецПроцедуры // ИзменениеФорматаЧисел()

// Процедура обрабатывает изменение языка.
// Табличный документ выводится заново с учетом нового установленного языка.
// 
&НаСервере
Процедура ИзменениеЯзыка()

	фКэшЗначений.КодСтраны = Справочники.бит_Языки.ПолучитьКодЯзыкСтрана(Объект.Язык);
	ВывестиМакетОтчета();

КонецПроцедуры // ИзменениеЯзыка()

// Процедура обрабатывает изменение настройки.
// 
&НаСервере
Процедура ИзменениеНастройки()
	
	ФорматЧисел = Объект.НастройкаОтчета.ФорматЧисел;
	Язык        = Объект.НастройкаОтчета.Язык;
	
	фКэшЗначений.НастройкиАналитик = Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьНастройкуАналитик(Объект.НастройкаОтчета);
	УстановитьСписокВыбораЭлементов();
	фКэшЗначений.ТипОтчета = Объект.НастройкаОтчета.ТипОтчета;
	
	Объект.ЗначенияПоУмолчанию.Очистить();
	фКэшЗначений.ЗначенияПоУмолчанию = Новый Структура;
	
	ТаблицаДанныеОтчета.Очистить();
	
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Объект.НастройкаОтчета.СпособКомпоновки, ТаблицаПараметры, Истина);	
	
	ЗаполнитьТаблицуОтборов();
	
	НастроитьТаблицуДанных();		
	
	ВывестиМакетОтчета();
	
	УстановитьВидимость();	
	
КонецПроцедуры // ИзменениеНастройки()

// Процедура заполняет таблицу отборов.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьТаблицуОтборов()

	ТаблицаОтборов = РеквизитФормыВЗначение("ОтборВОтчете");
	бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Объект.НастройкаОтчета.СпособКомпоновки, ТаблицаОтборов);
	ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);	

КонецПроцедуры // ЗаполнитьТаблицуОтборов()

&НаСервере
Процедура ЗаполнитьВерсию(ДокВерсия,НоваяСсылка,ТекущийОбъект)
	
	ЗаполнитьЗначенияСвойств(ДокВерсия,ТекущийОбъект);
	Если Объект.Ссылка.Пустая() Тогда
		ДокВерсия.ЭкземплярОтчета = НоваяСсылка;
	Иначе
		ДокВерсия.ЭкземплярОтчета = Объект.Ссылка;
	КонецЕсли; 
	
	ДокВерсия.СохранитьТабДокРезультат(ТабДокРезультат);		
	ДокВерсия.ДатаДвижений         = ТекущийОбъект.ДатаОкончания;		
	ДокВерсия.ДополнительныеСвойства.Вставить("ДанныеОтчета", РеквизитФормыВЗначение("ТаблицаДанныеОтчета"));
	
	ДокВерсия.ОтборХранение.Очистить();
	
	Для каждого СтрокаТаблицы Из ТекущийОбъект.ОтборХранение Цикл
		
		  НоваяСтрока = ДокВерсия.ОтборХранение.Добавить();
		  ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	КонецЦикла; 
	
	ДокВерсия.ПараметрыХранение.Очистить();
	
	Для каждого СтрокаТаблицы Из ТекущийОбъект.ПараметрыХранение Цикл
	
		НоваяСтрока = ДокВерсия.ПараметрыХранение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьВерсию()

// Процедура сохраняет таблицу ОтборВОтчете в табличную часть ОтборХранение.
// 
&НаСервере
Процедура СохранитьТаблицуОтборов(ТекущийОбъект)

	ТекущийОбъект.ОтборХранение.Очистить();
	
	Для каждого СтрокаТаблицы Из ОтборВОтчете Цикл
		
		 Если ТипЗнч(СтрокаТаблицы.Значение) = Тип("СписокЗначений") Тогда
			 
			 // В случае если значение список, развернем каждое значение в отдельную строку.
			 Для каждого Элемент Из СтрокаТаблицы.Значение Цикл
				 
				 НоваяСтрока = ТекущийОбъект.ОтборХранение.Добавить();
				 НоваяСтрока.Имя           = СтрокаТаблицы.Имя;
				 НоваяСтрока.Использование = СтрокаТаблицы.Использование;
				 НоваяСтрока.Значение      = Элемент.Значение;
				 НоваяСтрока.ВидСравнения  = бит_ОбщегоНазначенияКлиентСервер.ИмяВидаСравнения(СтрокаТаблицы.ВидСравнения);
				 
			 КонецЦикла;
			 
		 Иначе	 
			 
			 // Если значение одно, просто сохраним в строку табличной части.
			 НоваяСтрока = ТекущийОбъект.ОтборХранение.Добавить();
			 НоваяСтрока.Использование = СтрокаТаблицы.Использование;			 
			 НоваяСтрока.Имя           = СтрокаТаблицы.Имя;
			 НоваяСтрока.Значение      = СтрокаТаблицы.Значение;
			 НоваяСтрока.ВидСравнения  = бит_ОбщегоНазначенияКлиентСервер.ИмяВидаСравнения(СтрокаТаблицы.ВидСравнения);
			 
		 КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры // СохранитьТаблицуОтборов()

// Процедура сохраняет ТаблицаПараметров в табличную часть ПараметрыХранение.
// 
&НаСервере
Процедура СохранитьТаблицуПараметров(ТекущийОбъект)

  ТекущийОбъект.ПараметрыХранение.Очистить();
  
  Для каждого СтрокаТаблицы Из ТаблицаПараметры Цикл
	  
	  Если ТипЗнч(СтрокаТаблицы.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
		  
		  // В случае если значение список, развернем каждое значение в отдельную строку.
		  Для каждого Элемент Из СтрокаТаблицы.ЗначениеПараметра Цикл
			  
			  НоваяСтрока = ТекущийОбъект.ПараметрыХранение.Добавить();
			  НоваяСтрока.ИмяПараметра      = СтрокаТаблицы.ИмяПараметра;
			  НоваяСтрока.ВидПараметра      = СтрокаТаблицы.ВидПараметра;		  
			  НоваяСтрока.ЗначениеПараметра = Элемент.Значение;
			  
		  КонецЦикла; 
		  
	  Иначе	
		  
		  // Если значение одно, просто сохраним в строку табличной части.
		  НоваяСтрока = ТекущийОбъект.ПараметрыХранение.Добавить();
		  НоваяСтрока.ИмяПараметра      = СтрокаТаблицы.ИмяПараметра;
		  НоваяСтрока.ВидПараметра      = СтрокаТаблицы.ВидПараметра;		  
		  НоваяСтрока.ЗначениеПараметра = СтрокаТаблицы.ЗначениеПараметра;
		  
	  КонецЕсли; 
  
  КонецЦикла; 

КонецПроцедуры // СохранитьТаблицуПараметров()

// Процедура обрабатывает изменение валюты. Выполняется получение курса/кратности.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()

	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента,Объект.ДатаОкончания);
	
	Объект.КурсДокумента      = СтрКурса.Курс;
	Объект.КратностьДокумента = СтрКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыСервер()

&НаСервере
Процедура ИзменениеЗначенияПоказателя(Показатель)
  
  Если ЗначениеЗаполнено(Показатель) Тогда
	  
		ИмяОбласти = Показатель.Код;
		
  	  	СтрОтбор = Новый Структура("ПоказательОтчета",Показатель); 
		
		МассивСтрок = ТаблицаДанныеОтчета.НайтиСтроки(СтрОтбор);
		
		ИтСумма = 0;
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
			ИтСумма = ИтСумма+СтрокаТаблицы.ЗначениеПоказателя;
		
		КонецЦикла; 
		
		Попытка
			
			ОблМакета = ТабДокРезультат.Область(ИмяОбласти);
			
		Исключение
			
			ОблМакета = Неопределено;
			
		КонецПопытки;
		
		Если НЕ ОблМакета = Неопределено Тогда
		
			ОблМакета.Значение = ИтСумма;
		
		КонецЕсли; 
		
		Модифицированность = Истина;
		
		Если Показатель.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение Тогда
			
			бит_МеханизмПолученияДанных.ВыполнитьРасчет(Объект.НастройкаОтчета,ТабДокРезультат,ТаблицаДанныеОтчета);
			
		КонецЕсли; 
		
		
  КонецЕсли; 

КонецПроцедуры // ИзменениеЗначенияПоказателя()

// Процедура обрабатывает изменение содержимого области табличного документа.
// 
// Параметры:
//  ИмяОбласти  - Строка
//  ТекЗначение - Число
// 
&НаСервере
Процедура ИзменениеСодержимогоОбласти(ИмяОбласти,ТекЗначение)
	
	СтрОтбор = Новый Структура("ИмяОбласти",ИмяОбласти); 
	
	МассивСтрок = ТаблицаДанныеОтчета.НайтиСтроки(СтрОтбор);
	
	НовоеЗначение = ТекЗначение;
	
	// Есть строки данных, соответствующие на данной области.
	Если МассивСтрок.Количество()>0 Тогда
		
		Если ТекЗначение = 0 Тогда
			// Удаляем данные
			Для каждого Элемент Из МассивСтрок Цикл
				ТаблицаДанныеОтчета.Удалить(Элемент);
			КонецЦикла; 
		Иначе	
			// Пропорционально изменяем данные
			ИтСумма = 0;
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				ИтСумма = ИтСумма+СтрокаТаблицы.ЗначениеПоказателя;
			КонецЦикла; 
			
			ИтСуммаНов = 0;
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				
				Коэфф = ?(ИтСумма<>0,СтрокаТаблицы.ЗначениеПоказателя/ИтСумма,0);
				
				СтрокаТаблицы.ЗначениеПоказателя = НовоеЗначение*Коэфф;
				СтрокаТаблицы.РучнаяКорректировка = Истина;				
				
				ИтСуммаНов = ИтСуммаНов+СтрокаТаблицы.ЗначениеПоказателя;
			КонецЦикла; 
			
			Дельта = НовоеЗначение-ИтСуммаНов;
			
			Если Дельта <> 0 Тогда
				СтрокаТаблицы.ЗначениеПоказателя  = СтрокаТаблицы.ЗначениеПоказателя+Дельта;
				СтрокаТаблицы.РучнаяКорректировка = Истина;
			КонецЕсли; 
			Модифицированность = Истина;
		КонецЕсли; 
		
	Иначе
		
		// В таблице данных нет строк данных, соответствующих данной области.
		НоваяСтрока = ТаблицаДанныеОтчета.Добавить();
		НоваяСтрока.ЗначениеПоказателя  = ТекЗначение;
		НоваяСтрока.РучнаяКорректировка = Истина;
		
		ЗаполнитьНовуюСтроку(НоваяСтрока.ПолучитьИдентификатор(),ИмяОбласти);
		
	КонецЕсли; 
	
	бит_МеханизмПолученияДанных.ВыполнитьРасчет(Объект.НастройкаОтчета, ТабДокРезультат, ТаблицаДанныеОтчета);
	
КонецПроцедуры // ИзменениеСодержимогоОбласти()

// Процедура заполняет реквизиты новой строки таблицы ТаблицаДанныеОтчета по-умолчанию.
// 
// Параметры:
//  ИдСтроки    - Число
//  ИмяОбласти  - Строка
// 
&НаСервере
Процедура ЗаполнитьНовуюСтроку(ИдСтроки,ИмяОбласти)
	
	ТекущаяСтрока = ТаблицаДанныеОтчета.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		бит_МеханизмПолученияДанных.ЗаполнитьНовуюСтрокуТаблицыДанных(ТекущаяСтрока, ИмяОбласти, 
				ТаблицаДанныеОтчета, Объект.НастройкаОтчета, Объект.ФорматЧисел, Объект.Язык);
		
		// Заполнение значений по-умолчанию
		Для каждого КиЗ Из фКэшЗначений.ЗначенияПоУмолчанию Цикл
			
			ИмяАналитики = КиЗ.Ключ;
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяАналитики]) Тогда
				ТекущаяСтрока[ИмяАналитики] = КиЗ.Значение;
			КонецЕсли; 
		КонецЦикла; // Заполнение значений по-умолчанию
		ЗаполнитьДобавленныеКолонкиВСтроке(ТекущаяСтрока, ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьНовуюСтроку()

&НаСервере
Процедура ИзменениеАктуальнойВерсии()
	
	// Восстановим табличный документ
	Если ЗначениеЗаполнено(Объект.АктуальнаяВерсия) Тогда
		
		АктуальнаяВерсия = Объект.АктуальнаяВерсия;
		
		ЗаполнитьЗначенияСвойств(Объект,АктуальнаяВерсия,,"ОтборХранение,ПараметрыХранение");
		Объект.ОтборХранение.Очистить();
		Для каждого СтрокаТаблицы Из АктуальнаяВерсия.ОтборХранение Цикл
		
			НоваяСтрока = Объект.ОтборХранение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		
		КонецЦикла; 
		
		Документы.бит_ВерсияОтчета.ВосстановитьТаблицуОтборов(Объект,ОтборВОтчете);
		
		// Восстановим версию отчета
		Документы.бит_ВерсияОтчета.ВосстановитьТаблицуВерсии(Объект.АктуальнаяВерсия,ТаблицаДанныеОтчета);		
		ВосстановитьТабличныйДокумент();
		ВосстановитьСтандартныйПериод();
		
		ДанныеАктуальны = Ложь;
		УстановитьВидимость();
		
	КонецЕсли; 
	
	
КонецПроцедуры // ИзменениеАктуальнойВерсии()

// Процедура осуществляет заполнение аналитик значениями по-умолчанию.
// 
// Параметры:
//  ИмяАналитики   - Строка
//  Перезаполнять  - Булево
// 
&НаСервере
Процедура ЗаполнитьАналитики(ИмяАналитики="",Перезаполнять = Ложь)
	
	Для каждого СтрокаТаблицы Из ТаблицаДанныеОтчета Цикл
		
		Для каждого КиЗ Из фКэшЗначений.ЗначенияПоУмолчанию Цикл
		
			ТекИмя = КиЗ.Ключ;
			
			Если НЕ ПустаяСтрока(ИмяАналитики) И НЕ ТекИмя = ИмяАналитики Тогда
				Продолжить;
			КонецЕсли; 
			
			ТекЗначение = СтрокаТаблицы[ТекИмя];
			
			Если ЗначениеЗаполнено(ТекЗначение) И НЕ Перезаполнять Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТаблицы[ТекИмя] = КиЗ.Значение;
			
		КонецЦикла; // ФКэшЗначений.НастройкиАналитик
	КонецЦикла; // Объект.ТаблицаДанныеОтчета
	
КонецПроцедуры // ЗаполнитьАналитики()

// Процедура открывает отчет-расшифровку.
// 
&НаКлиенте
Процедура РасшифроватьОтчетом()
	
	ТекОбл = Элементы.ТабДокРезультат.ТекущаяОбласть;
	флЕстьРасшифровка = Ложь;
	
	Если ТекОбл <> Неопределено И ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяОбласти"     ,ТекОбл.Имя);
		СтруктураПараметров.Вставить("НастройкаОтчета",Объект.НастройкаОтчета);
		СтруктураПараметров.Вставить("ДатаНачала"     ,Объект.ДатаНачала);
		СтруктураПараметров.Вставить("ДатаОкончания"  ,Объект.ДатаОкончания);
		СтруктураПараметров.Вставить("ФорматЧисел"    ,Объект.ФорматЧисел);
		СтруктураПараметров.Вставить("ВалютаДокумента",Объект.ВалютаДокумента);
		СтруктураПараметров.Вставить("КурсДокумента"  ,Объект.КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента",Объект.КратностьДокумента);
		СтруктураПараметров.Вставить("Организация"       ,Объект.Организация);
		СтруктураПараметров.Вставить("Язык"              ,Объект.Язык);
		СтруктураПараметров.Вставить("РежимРасшифровки"  ,Истина);
		
		УпаковатьТаблицы(СтруктураПараметров);		
		
		ОткрытьФорму("Отчет.бит_ПроизвольныйОтчет.Форма.ФормаОтчетаУправляемая", СтруктураПараметров, ЭтотОбъект, Строка(ТекОбл.Имя));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не выбрана ячейка для которой следует вывести расшифровку.'");		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; // Область
	

КонецПроцедуры // РасшифроватьОтчетом()

// Процедура упаковывает таблицы формы.
// 
// Возвращаемое значение:
//  СтрТаблиц - Структура
// 
&НаСервере
Процедура УпаковатьТаблицы(СтрПар)
	
	ТабВрем = РеквизитФормыВЗначение("ТаблицаДанныеОтчета");
	СтрПар.Вставить("ТаблицаДанныеОтчета", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
	ТабВрем =РеквизитФормыВЗначение("ОтборВОтчете");
	СтрПар.Вставить("ОтборВОтчете", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
	ТабВрем = РеквизитФормыВЗначение("ТаблицаПараметры");
	СтрПар.Вставить("ТаблицаПараметры", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
КонецПроцедуры	

// Процедура выводит макет произвольного отчета в табличный документ.
// 
&НаСервере
Процедура ВывестиМакетОтчета()

	ТабДокРезультат.Очистить();
	
	Если ЗначениеЗаполнено(Объект.НастройкаОтчета) Тогда
		
		МакетОтчета = Объект.НастройкаОтчета.ХранилищеМакета.Получить();
		Если ТипЗНЧ(МакетОтчета) = Тип("ТабличныйДокумент") Тогда
			
		ТабДокРезультат.ФиксацияСверху = МакетОтчета.ФиксацияСверху;
		ТабДокРезультат.ФиксацияСлева  = МакетОтчета.ФиксацияСлева;
		ТабДокРезультат.Вывести(МакетОтчета);
		
		// Заполним значения ячеек макета, по уже полученным данным.
		Если ТаблицаДанныеОтчета.Количество() > 0  Тогда
			
		    ТабВрем = РеквизитФормыВЗначение("ТаблицаДанныеОтчета");
			ТабВрем.Свернуть("ИмяОбласти","ЗначениеПоказателя");
			
			Для каждого СтрокаТаблицы Из ТабВрем Цикл
				бит_МеханизмПолученияДанных.УстановитьЗначениеВТабличныйДокумент(
					ТабДокРезультат,СтрокаТаблицы.ИмяОбласти,СтрокаТаблицы.ЗначениеПоказателя);
			КонецЦикла; 
		КонецЕсли; 
		
		СпрОбъект 		 = РеквизитФормыВЗначение("Объект");
		ТаблицаОтборов   = РеквизитФормыВЗначение("ОтборВОтчете");
		ПараметрыЗапроса = РеквизитФормыВЗначение("ТаблицаПараметры");
		бит_МеханизмПолученияДанных.УстановитьПараметрыВДокРезультат(СпрОбъект, ТабДокРезультат, ТаблицаОтборов, ПараметрыЗапроса);
		ИзменениеФорматаЧисел();
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // ВывестиМакетОтчета()

// Процедура выполняет удаление примечаний табличного документа.
// 
&НаСервере
Процедура ВыполнитьУдалениеПримечаний(ТабличныйДокумент)
	
	// Удалим примечания, если необходимо
	Если Объект.УдалитьПримечания Тогда
		Для каждого Область Из ТабличныйДокумент.Области Цикл
			Область.Примечание.Текст = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет флажки таблицы данных.
// 
// Параметры:
//  ИмяОбласти - Строка.
//  Флаг       - Булево
// 
&НаСервере
Процедура ИзменитьФлажки(ИмяОбласти,Флаг)
	
	СтрОтбор = Новый Структура("ИмяОбласти",ИмяОбласти); 
	
	МассивСтрок = ТаблицаДанныеОтчета.НайтиСтроки(СтрОтбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Если Флаг = 0 Тогда
			
			СтрокаТаблицы.ФормироватьДвиженияПоБюджету = Ложь;
			
		ИначеЕсли Флаг = 1 Тогда
			
			СтрокаТаблицы.ФормироватьДвиженияПоБюджету = Истина;
			
		ИначеЕсли Флаг = 2 Тогда
			
			СтрокаТаблицы.ФормироватьДвиженияПоБюджету = НЕ СтрокаТаблицы.ФормироватьДвиженияПоБюджету;
			
		КонецЕсли; 
		 		
	КонецЦикла; 
	
	
КонецПроцедуры // ИзменитьФлажки()

&НаСервере
Процедура ИзменитьВидПараметра(ИД, мТекущийВидПараметра)

	ТекущиеДанные = ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, мТекущийВидПараметра);

КонецПроцедуры // ИзменитьВидПараметра()

&НаКлиентеНаСервереБезКонтекста 
Процедура ДействияПриАктивизацииТабДокументРезультат(Форма)

	Если Форма.Объект.ФормироватьДвиженияПоБюджету Тогда
		Форма.Элементы.ТаблицаДанныеОтчета.ТолькоПросмотр = Ложь;
	Иначе	
		Форма.Элементы.ТаблицаДанныеОтчета.ТолькоПросмотр = Форма.ЗащитаТаблицыДанных;
	КонецЕсли; 

КонецПроцедуры

// Процедура обрабатывает изменение флага ФормироватьДвиженияПоБюджету.
// 
&НаСервере
Процедура ИзменениеФормироватьДвиженияПоБюджету()

	Если Объект.ФормироватьДвиженияПоБюджету = Ложь Тогда
		Объект.РежимЗависимыхОборотов = Неопределено;
	Иначе
		Объект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;
	КонецЕсли; 
	
	УстановитьВидимость();

	ДействияПриАктивизацииТабДокументРезультат(ЭтотОбъект);
	
КонецПроцедуры // ИзменениеФормироватьДвиженияПоБюджету()

// Функция формирует список для выбора наименования.
// 
// Возвращаемое значение:
//  ТекСписок - СписокЗначений
// 
&НаСервере
Функция СформироватьСписокВыбораНаименование()
	
	ТекСписок = Новый СписокЗначений;
	СтрПар = Справочники.бит_ЭкземплярыОтчетов.НовыеПараметрыСформироватьАвтонаименование();
	ЗаполнитьЗначенияСвойств(СтрПар, Объект);
	АвтоНаименование = Справочники.бит_ЭкземплярыОтчетов.СформироватьАвтоНаименование(СтрПар);
	ТекСписок.Добавить(АвтоНаименование, АвтоНаименование);
	
	Возврат ТекСписок;
	
КонецФункции // СформироватьСписокВыбораНаименование()

&НаСервере
Процедура УстановитьУсловноеОфрмление()

	// КоличественныйУчет (сумма)
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДанныеОтчетаКоличественныйУчет");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ТаблицаДанныеОтчета.КоличественныйУчет", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сумма'"));

	// КоличественныйУчет (количество)
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДанныеОтчетаКоличественныйУчет");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ТаблицаДанныеОтчета.КоличественныйУчет", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Количество'"));
	
	// Автоотметка незаполненного.
	Для Индекс = 1 По 7 Цикл
		Разрез = "Аналитика_" + Индекс;
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДанныеОтчета" + Разрез);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ТаблицаДанныеОтчета.ФормироватьДвиженияПоБюджету", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ТаблицаДанныеОтчета." + Разрез + "Проверять", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ТаблицаДанныеОтчета." + Разрез, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	КонецЦикла; 
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаДанныеОтчетаПериодДанных");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблицаДанныеОтчета.ФормироватьДвиженияПоБюджету", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ТаблицаДанныеОтчета.ПериодДанных", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", 
		"Справочник.бит_ЭкземплярыОтчетов.ПанельДеталиВидимость", ПанельДеталиВидимость);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПользователя", 
		"Справочник.бит_ЭкземплярыОтчетов.ПанельНастройкиСкрыта", ПанельНастройкиСкрыта);
	
КонецПроцедуры

#КонецОбласти