#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция проверяет токен бота.
//
// Параметры:
//   Токен - Строка - представление токена.
//
// Возвращаемое значение:
//  СтрРезультат - Структура - результат проверки подключения.
//
Функция ПроверитьТокен(Токен) Экспорт
	
	СтрРезультат = Новый Структура("Существует, Сообщение",Ложь,"");
	
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		
		СтрРезультат.Сообщение =  НСтр("ru = 'Токен незаполнен!'"); 
		
	Иначе	
		
		ИмяМетода = "bot"+Токен+"/getMe";

		НастройкиПрокси = бит_ТелеграмПовтИсп.НастройкиПрокси();
		
		Соединение = бит_ТелеграмСервер.НовоеHTTPСоединение();
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("ContentType","application/json");
		ВебЗапрос = Новый HTTPЗапрос(ИмяМетода, Заголовки);
		
		ВебОтвет = Соединение.Получить(ВебЗапрос);
		
		Если ВебОтвет.КодСостояния = 200 Тогда
			
			СтрРезультат.Существует = Истина;
		Иначе	
			СтрРезультат.Сообщение = НСтр("ru = 'КодСостояния: '")+ВебОтвет.КодСостояния+НСтр("ru = ', ответ сервера: '")+ВебОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат СтрРезультат;
	
КонецФункции // ПроверитьТокен()

// Функция получает информацию о сообщениях боту.
//
// Параметры:
//   Токен - Строка	- представление токена.
//
// Возвращаемое значение:
//  СтрРезультат - Структура - результат поиска.
//
Функция НайтиЧаты(Токен) Экспорт
	
	СтрРезультат = Новый Структура("Выполнено, Сообщение, Данные",Ложь,"",Новый Массив);
	
	Если НЕ ЗначениеЗаполнено(Токен) Тогда
		
		СтрРезультат.Сообщение =  НСтр("ru = 'Токен незаполнен!'"); 
		
	Иначе	
		
		ИмяМетода = "bot"+Токен+"/getUpdates";
		
		НастройкиПрокси = бит_ТелеграмПовтИсп.НастройкиПрокси();

		Соединение = бит_ТелеграмСервер.НовоеHTTPСоединение();
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("ContentType","application/json");
		ВебЗапрос = Новый HTTPЗапрос(ИмяМетода, Заголовки);
		
		ВебОтвет = Соединение.Получить(ВебЗапрос);
		
		Если ВебОтвет.КодСостояния = 200 Тогда
			
			СтрРезультат.Выполнено = Истина;
			СтрРезультат.Сообщение = ВебОтвет.ПолучитьТелоКакСтроку(); 
			
			Чтение = Новый ЧтениеJSON();
			Чтение.УстановитьСтроку(СтрРезультат.Сообщение);
			
			ДанныеВрем = ПрочитатьJSON(Чтение);	
			
			СтрРезультат.Данные = РазобратьДанныеЧатов(ДанныеВрем);
			
		Иначе	
			СтрРезультат.Сообщение = НСтр("ru = 'КодСостояния: '")+ВебОтвет.КодСостояния+НСтр("ru = ', ответ сервера: '")+ВебОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СтрРезультат;
	
КонецФункции // НайтиЧаты()

#КонецОбласти 
	
#Область СлужебныеПроцедурыИФункции

// Функция разбирает данные чатов.
//
// Параметры:
//  вхДанные - Структура
//
// Возвращаемое значение:
//  ДанныеЧатов - Массив.
//
Функция РазобратьДанныеЧатов(вхДанные, ТолькоНовые = Истина)
	
	ОбработанныеИД = Новый Соответствие;
	ДанныеЧатов = Новый Массив;
	
	Если ТипЗнч(вхДанные) = Тип("Структура") И вхДанные.Свойство("result") Тогда
		
		Для каждого ЭлементРезультат Из вхДанные.result Цикл
			
			ЧатИнфо = ЭлементРезультат.message.chat;
			ПодготовитьСтруктуруЧата(ЧатИнфо);
			
			Если ОбработанныеИД[ЧатИнфо.id] <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ОбработанныеИД.Вставить(ЧатИнфо.id, Истина);
			
			Чат = Справочники.бит_ЧатыTelegram.НайтиПоРеквизиту("ИД",ЧатИнфо.id);
			ЭтоНовыйЧат = ?(ЗначениеЗаполнено(Чат),Ложь,Истина);
			
			Если ТолькоНовые И НЕ ЭтоНовыйЧат Тогда
				Продолжить;
			КонецЕсли; 
			
			ПараметрыЧата = ОпределитьПараметрыЧата(ЧатИнфо);
			
			ДанныеЧата = Новый Структура;
			ДанныеЧата.Вставить("ЭтоНовый"	,ЭтоНовыйЧат);
			ДанныеЧата.Вставить("Чат"		,Чат);
			ДанныеЧата.Вставить("ИД"		,ЧатИнфо.id);
			ДанныеЧата.Вставить("Пользователь", ПараметрыЧата.Пользователь);
			ДанныеЧата.Вставить("Наименование", ПараметрыЧата.Наименование);
			
			ДанныеЧатов.Добавить(ДанныеЧата);
			
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ДанныеЧатов;
	
КонецФункции

Функция ОпределитьПараметрыЧата(ЧатИнфо)
	
	Параметры = Новый Структура("Пользователь, Наименование"); 
	
	КлючиПоиска      = Новый Массив(); 
	КлючиПоиска.Добавить(ЧатИнфо.username);
	
	Если ЧатИнфо.Свойство("last_name") Тогда
	
		КлючиПоиска.Добавить(ЧатИнфо.last_name);
		КлючиПоиска.Добавить(ЧатИнфо.last_name + " " + ЧатИнфо.first_name);
		
	КонецЕсли; 
	
	Для каждого Значение Из КлючиПоиска Цикл
		Если ЗначениеЗаполнено(Значение) Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.Наименование) Тогда
			     Параметры.Наименование = Значение;
			КонецЕсли; 
			//ПользовательЧата = бит_ПолныеПрава.НайтиПользователя(Значение);
			//Если ЗначениеЗаполнено(ПользовательЧата) Тогда
			//	Параметры.Пользователь = ПользовательЧата;
			//	Прервать;
			//КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Параметры;

КонецФункции // РазобратьДанныеЧатов()

Процедура ПодготовитьСтруктуруЧата(ЧатИнфо)

	СтруктураПоУмолчанию = Новый Структура(); 
	СтруктураПоУмолчанию.Вставить("id",        0);
	СтруктураПоУмолчанию.Вставить("username",  "");
	СтруктураПоУмолчанию.Вставить("last_name", "");
	СтруктураПоУмолчанию.Вставить("first_name","");
	
	Если НЕ ТипЗнч(ЧатИнфо) = Тип("Структура") Тогда
		ЧатИнфо = Новый Структура(); 
	КонецЕсли;
	
	Для каждого КлючЗначение Из СтруктураПоУмолчанию Цикл
		Если НЕ ЧатИнфо.Свойство(КлючЗначение.Ключ) Тогда
			ЧатИнфо.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти

#КонецЕсли
