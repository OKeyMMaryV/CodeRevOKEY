#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
	
		ДанныеЗаполнения.Свойство("Назначение", Назначение);
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;
	КонецЕсли;
	
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ДополнительныеСвойства);
	
	ПроверитьДублиИмен(Отказ);
	
	Если НЕ Отказ И НЕ ЭтоГруппа Тогда
		
		бит_МеханизмХозяйственныхОперацийСервер.ИнтерпретироватьШаблоныПроформы(ЭтотОбъект);
		
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда			
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ДополнительныеСвойства, Метаданные().ПолноеИмя());
	
	Если НЕ Отказ Тогда
	
		Для каждого СтрокаТаблицы Из НастройкиДвижений Цикл
		
			Если СтрокаТаблицы.ШаблонДвижений.ПометкаУдаления <> ПометкаУдаления Тогда
			
				ШаблонОбъект = СтрокаТаблицы.ШаблонДвижений.ПолучитьОбъект();
				
				Попытка
				
					ШаблонОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Не удалось пометить на удаление шаблон движений ""%1%"" по причине: %2%.'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.ШаблонДвижений, Строка(ОписаниеОшибки()));
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					
				КонецПопытки;
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры // ПриЗаписи()

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
	
		НастройкиДвижений.Очистить();
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриУстановкеНовогоКода(СтандартнаяОбработка, Префикс)
	
	Если Назначение = Перечисления.бит_НазначенияПроформ.ПроизвольнаяФорма Тогда
		Префикс = НСтр("ru = 'ПФ-'");
	Иначе
		Префикс = "0";
	КонецЕсли; 
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(ЭтотОбъект, Истина, Префикс);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет проверку на дубли имен реквизитов и табличных частей. 
// 
// Параметры:
//  Отказ - Булево.
// 
Процедура ПроверитьДублиИмен(Отказ)
	
	// Проверка уникальности имени проформы.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Имя"   , Имя);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ВидыПроформ.Ссылка
	               |ИЗ
	               |	Справочник.бит_ВидыПроформ КАК бит_ВидыПроформ
	               |ГДЕ
	               |	бит_ВидыПроформ.Имя = &Имя
	               |	И бит_ВидыПроформ.Ссылка <> &Ссылка";
				   
				   
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Имя вида проформы ""%1%"" не уникально.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Имя);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);		
		Отказ = Истина;
	
	КонецЕсли; 
	
	// Проверка на дубли имен
	// в пределах одной коллекции - Реквизиты, ТабличныеЧасти, <ТабличнаяЧасть> - дублей имен быть не должно.
	ТабТест = НастройкиРеквизитов.Выгрузить(,"ИмяТаблицы,Имя");
	ТабТест.Колонки.Добавить("Количество");
	ТабТест.ЗаполнитьЗначения(1,"Количество");
	ТабТест.Свернуть("ИмяТаблицы, Имя", "Количество");
	ТабТест.Сортировать("ИмяТаблицы");
	
	Для каждого СтрокаТаблицы Из ТабТест Цикл
		
		Если СтрокаТаблицы.Количество > 1 Тогда
			
			Отказ = Истина;
			Если СтрокаТаблицы.ИмяТаблицы = "Реквизиты" Тогда
				
				ТекстСообщения = НСтр("ru = 'Обнаружено дублирующееся имя реквизитов ""%1%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.Имя);
				
			ИначеЕсли СтрокаТаблицы.ИмяТаблицы = "ТабличныеЧасти" Тогда
				
				ТекстСообщения = НСтр("ru = 'Обнаружено дублирующееся имя табличных частей ""%1%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.Имя);
				
			Иначе	
				
				ТекстСообщения = НСтр("ru = 'Обнаружено дублирующееся имя реквизита ""%1%"" в табличной части ""%2%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.Имя, СтрокаТаблицы.ИмяТаблицы);				
				
			КонецЕсли; // СтрокаТаблицы.ИмяТаблицы;
			
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; // СтрокаТаблицы.Количество
		
	КонецЦикла; // ТабТест
	
	// Проверка на дубли имен реквизитов шапки и табличных частей.
	СтрОтбор = Новый Структура("ИмяТаблицы","ТабличныеЧасти");
	МассивТЧ = ТабТест.НайтиСтроки(СтрОтбор);
	
	СтрОтбор = Новый Структура("ИмяТаблицы", "Реквизиты");
	МассивСтрок = ТабТест.НайтиСтроки(СтрОтбор);
	
	МассивРеквизитов = Новый Массив;
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл	
		МассивРеквизитов.Добавить(СтрокаТаблицы.Имя);	
	КонецЦикла; 
	
	Для каждого СтрокаТЧ Из МассивТЧ Цикл
		
		Если МассивРеквизитов.Найти(СтрокаТЧ.Имя) <> Неопределено Тогда
			
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Обнаружено дублирующееся имя реквизита шапки и табличной части ""%1%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаТаблицы.Имя);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЦикла; // МассивТЧ
	
КонецПроцедуры // ПроверитьДублиИмен()

#КонецОбласти

#КонецЕсли
