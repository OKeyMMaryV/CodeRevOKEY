#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти	

#Область СлужебныйПрограммныйИнтерфейс
	
// Функция эмулирует с помощью структур описание метаданных документа для указанного вида проформы.
// 
// Параметры:
//  ВидПроформы  - СправочникСсылка.бит_ВидыПроформ.
//  ВидКоллекции - Строка - "Массив", "Структура".
// 
// Возвращаемое значение:
//  ПсевдоМета - Структура.
// 
Функция ЭмулироватьМетаданные(ВидПроформы, ВидКоллекции = "Массив") Экспорт
	
	// Заполним данные о реквизиты проформы
	Если ВидКоллекции = "Структура" Тогда
		
		КоллекцияРеквизиты = Новый Структура;
		
	Иначе	
		
		КоллекцияРеквизиты = Новый Массив;
		
	КонецЕсли; 
	
	СтрОтбор = Новый Структура("ИмяТаблицы","Реквизиты");
	МассивНастройки = ВидПроформы.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
	
	Для каждого СтрокаНастройка Из МассивНастройки Цикл
		
		Если ВидКоллекции = "Структура" Тогда
			
			КоллекцияРеквизиты.Вставить(СтрокаНастройка.Имя, ОписаниеРеквизита(СтрокаНастройка));
			
		Иначе
			
			КоллекцияРеквизиты.Добавить(ОписаниеРеквизита(СтрокаНастройка));
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	СтрОтбор = Новый Структура("ИмяТаблицы","ТабличныеЧасти");
	МассивНастройкиТЧ = ВидПроформы.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
	
	// Заполним данные о табличных частях проформы.
	СтрТабЧасти = Новый Структура;
	
	Для каждого СтрокаТЧ Из МассивНастройкиТЧ  Цикл
		
		ИмяТабЧасти = СтрокаТЧ.Имя;
		
		Если ВидКоллекции = "Структура" Тогда
			
			КоллекцияРеквизитыТабЧасти = Новый Структура;
			
		Иначе	
			
			КоллекцияРеквизитыТабЧасти = Новый Массив;
			
		КонецЕсли; 
		
		СтрОтбор = Новый Структура("ИмяТаблицы",ИмяТабЧасти);
		МассивНастройки = ВидПроформы.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаНастройка Из МассивНастройки Цикл
			
			Если ВидКоллекции = "Структура" Тогда
				
				КоллекцияРеквизитыТабЧасти.Вставить(СтрокаНастройка.Имя, ОписаниеРеквизита(СтрокаНастройка));
				
			Иначе	
				
				КоллекцияРеквизитыТабЧасти.Добавить(ОписаниеРеквизита(СтрокаНастройка));
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		МетаТабЧасть = ОписаниеТабЧасти(СтрокаТЧ.Имя, СтрокаТЧ.Синоним, КоллекцияРеквизитыТабЧасти);
		
		СтрТабЧасти.Вставить(СтрокаТЧ.Имя, МетаТабЧасть);
		
	КонецЦикла; 
	
	// Стандартные реквизиты
	Если ВидКоллекции = "Структура" Тогда
		
		СтандартныеРеквизиты = Новый Структура;
		
	Иначе	
		
		СтандартныеРеквизиты = Новый Массив;
		
	КонецЕсли; 
	
	СтРекв = ОписаниеСтандартногоРеквизита("НомерПроформы", "Номер проформы", "Строка");
	ДобавитьВКоллекцию(СтандартныеРеквизиты, СтРекв, СтРекв.Имя);
	СтРекв = ОписаниеСтандартногоРеквизита("Дата", "Дата", "Дата");
	ДобавитьВКоллекцию(СтандартныеРеквизиты, СтРекв, СтРекв.Имя);
	СтРекв = ОписаниеСтандартногоРеквизита("ВалютаДокумента", "Валюта", "СправочникСсылка.Валюты");
	ДобавитьВКоллекцию(СтандартныеРеквизиты, СтРекв, СтРекв.Имя);
	СтРекв = ОписаниеСтандартногоРеквизита("КурсДокумента", "Курс", "Число(10,4)");
	ДобавитьВКоллекцию(СтандартныеРеквизиты, СтРекв, СтРекв.Имя);
	СтРекв = ОписаниеСтандартногоРеквизита("КратностьДокумента", "Кратность", "Число(10,4)");
	ДобавитьВКоллекцию(СтандартныеРеквизиты, СтРекв, СтРекв.Имя);
	
	// Эмулируем метаданные проформы
	ПсевдоМета = Новый Структура;
	ПсевдоМета.Вставить("Имя"           , ВидПроформы.Имя);
	ПсевдоМета.Вставить("Синоним"       , ВидПроформы.Наименование);
	ПсевдоМета.Вставить("Реквизиты"     , КоллекцияРеквизиты);
	ПсевдоМета.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
	ПсевдоМета.Вставить("ТабличныеЧасти", СтрТабЧасти);

	Возврат ПсевдоМета;
	
КонецФункции // ЭмулироватьМетаданные()

// Процедура заполняет список имен, запрещенных для использования в проформах.
// 
// Параметры:
//  СписокЗапрещенных - Список значений.
// 
Процедура СформироватьСписокЗапрещенныхИмен(СписокЗапрещенных) Экспорт

	СписокЗапрещенных.Очистить();
	
	СписокЗапрещенных.Добавить("Дата");
	СписокЗапрещенных.Добавить("Номер");
	СписокЗапрещенных.Добавить("Проведен");
	СписокЗапрещенных.Добавить("ПометкаУдаления");
	СписокЗапрещенных.Добавить("ВалютаДокумента");
	СписокЗапрещенных.Добавить("КурсДокумента");
	СписокЗапрещенных.Добавить("КратностьДокумента");
	СписокЗапрещенных.Добавить("Ответственный");	
	СписокЗапрещенных.Добавить("Комментарий");
	
КонецПроцедуры // СформироватьСписокЗапрещенныхИмен()

// Функция формирует данные необходимые для выгрузки проформы в Эксель.
// 
// Параметры:
//  ВхВидПроформы - СправочникСсылка.бит_ВидыПроформ, Массив.
// 
// Возвращаемое значение:
//  ДанныеВыгрузки - Структура
// 
Функция ПодготовитьДанныеДляВыгрузкиШаблона(ВхВидПроформы) Экспорт

	МассивВидов = Новый Массив;
	
	Если ТипЗнч(ВхВидПроформы) = Тип("Массив") Тогда
		
		МассивВидов = ВхВидПроформы;
		
	Иначе	
		
		МассивВидов.Добавить(ВхВидПроформы);
		
	КонецЕсли; 
	
	// Подготовка псевдометаданных и данных необходимых для формирования шаблона.
	МассивДанных = Новый Массив;	
	Для каждого ВидПроформы Из МассивВидов Цикл
		
		СтрПар = Новый Структура;
		СтрПар.Вставить("ПсевдоМетаданные", Справочники.бит_ВидыПроформ.ЭмулироватьМетаданные(ВидПроформы));
		СтрПар.Вставить("ВидПроформы", ВидПроформы);
		СтрПар.Вставить("Наименование", ВидПроформы.Наименование);
		
		МассивДанных.Добавить(СтрПар);
		
	КонецЦикла; 
	
	// Подготовка списков для выгрузки
	СпискиВыгрузки = Новый Соответствие;
	ВидыПредставлений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВидов",МассивВидов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиРеквизитов.СтрТип,
	               |	НастройкиРеквизитов.ВыражениеПредставления
	               |ИЗ
	               |	Справочник.бит_ВидыПроформ.НастройкиРеквизитов КАК НастройкиРеквизитов
	               |ГДЕ
	               |	НастройкиРеквизитов.Выгружать
	               |	И НастройкиРеквизитов.Ссылка В(&МассивВидов)
	               |	И (НЕ НастройкиРеквизитов.НастройкиУстановлены)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкиРеквизитов.Имя,
	               |	НастройкиРеквизитов.СтрТип,
	               |	НастройкиРеквизитов.ВыражениеПредставления,
	               |	НастройкиРеквизитов.ХранилищеНастроек
	               |ИЗ
	               |	Справочник.бит_ВидыПроформ.НастройкиРеквизитов КАК НастройкиРеквизитов
	               |ГДЕ
	               |	НастройкиРеквизитов.Ссылка В(&МассивВидов)
	               |	И НастройкиРеквизитов.Выгружать
	               |	И НастройкиРеквизитов.НастройкиУстановлены";			   
				   
				   
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Получение списков без отборов и порядка
	ТаблицаНастройки = МассивРезультатов[0].Выгрузить();
	ТаблицаНастройки.Свернуть("СтрТип, ВыражениеПредставления");
	
	Для каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
		
		ТекстЗапроса = ПодготовитьТекстЗапросаДляВыгрузки(СтрокаТаблицы.СтрТип, СтрокаТаблицы.ВыражениеПредставления);
		СписокВыгрузки = ЗаполнитьСписокВыгрузки(ТекстЗапроса, СтрокаТаблицы.СтрТип);
		
		Если СписокВыгрузки.Количество() > 0 Тогда
			
			Если ПустаяСтрока(СтрокаТаблицы.ВыражениеПредставления) Тогда
				
				Ключ = СтрокаТаблицы.СтрТип;
				
			Иначе	
				
				ВидыПредставлений.Добавить(СтрокаТаблицы.СтрТип+"/"+СтрокаТаблицы.ВыражениеПредставления);
				Ключ = СтрокаТаблицы.СтрТип+"_PresentationType_"+Формат(ВидыПредставлений.Количество(),"ЧРГ=");
				
			КонецЕсли; 
			
			СпискиВыгрузки.Вставить(Ключ, СписокВыгрузки);
			
		КонецЕсли; 
		
	КонецЦикла; // ТаблицаНастройки
	
	// Получение списков с учетом настроек построителя - отборами и порядком.
	ТаблицаНастройки = МассивРезультатов[1].Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаНастройки Цикл
		
		ТекстЗапроса = ПодготовитьТекстЗапросаДляВыгрузки(СтрокаТаблицы.СтрТип, СтрокаТаблицы.ВыражениеПредставления);
		СтрНастр = СтрокаТаблицы.ХранилищеНастроек.Получить();
		СписокВыгрузки = ЗаполнитьСписокВыгрузки(ТекстЗапроса, СтрокаТаблицы.СтрТип, СтрНастр, "Построитель");
		
		Если СписокВыгрузки.Количество() > 0 Тогда
			
			СпискиВыгрузки.Вставить(СтрокаТаблицы.Имя, СписокВыгрузки);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Обязательные списки - Булево и Валюты
	ВыгрузитьОбязательныеСписки(СпискиВыгрузки);
	
	ДанныеВыгрузки = Новый Структура;
	// Псевдо метаданные и ссылки на виды проформ.
	ДанныеВыгрузки.Вставить("МассивДанных", МассивДанных);
	// Списки, которые будут устанавливаться в качестве списков выбора.
	ДанныеВыгрузки.Вставить("СпискиВыгрузки", СпискиВыгрузки);
	// Испольуемые виды представлений
	ДанныеВыгрузки.Вставить("ВидыПредставлений", ВидыПредставлений);
	
	СисИнфо = бит_ОбщегоНазначения.ПолучитьСведенияОПрограмме();
	ДанныеВыгрузки.Вставить("НомерРелизаБИТ"  , СисИнфо.НомерРелиза_1С);
	
	
	Возврат ДанныеВыгрузки;
	
КонецФункции // ПодготовитьДанныеДляВыгрузкиШаблона()

// Функция формирует текст запроса, для извлечения данных списков выгружаемых в Эксель.
// В Эксель списки используются в качестве списков выбора для полей соответсвующих типов.
// 
// Параметры:
//   СтрТип - Строка
//   ВыражениеПредставления - Строка.
// 
// Возвращаемое значение:
//  ТекстЗапроса - Строка.
// 
Функция ПодготовитьТекстЗапросаДляВыгрузки(СтрТип, ВыражениеПредставления = "") Экспорт
	
	ТекстЗапроса = "";
	
	// Заготовки для формирования текста запроса.
	ШаблонЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |   ""%ИмяПолное%"" КАК ИмяПолное,
					|   ""%ИмяОбъекта%"" КАК ИмяОбъекта,
					|   %ВыражениеПредставления% КАК Представление,
	                |	ТекТаб.Ссылка КАК Ссылка
					|{ВЫБРАТЬ
	                | Представление.*,
	                | Ссылка.*}
	                |ИЗ
	                |	%ИмяТаблицы% КАК ТекТаб
					|";
					
	ШаблонОбъединить = "
	                   |ОБЪЕДИНИТЬ ВСЕ
	                   |";
					   
    ШаблонНеГруппа = "
                    |ГДЕ
	                |(НЕ ТекТаб.ЭтоГруппа)
					|";
					
	ШаблонИнстр = "
				   |{ГДЕ
	               | ТекТаб.Ссылка.*}
                   |{УПОРЯДОЧИТЬ ПО
	               | Ссылка.*}
				   |";

					   
	ШаблонАвтоУп	= "АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Типы = бит_ОбщегоНазначенияКлиентСервер.ПолучитьТипыИзСтроки(СтрТип);
	
	Описание = Новый ОписаниеТипов(Типы);
	
	Для каждого ТекТип Из Типы Цикл
		
		Если НЕ бит_ОбщегоНазначенияКлиентСервер.ЭтоПримитивныйТип(ТекТип) Тогда
			
			МетаОбъект = Метаданные.НайтиПоТипу(ТекТип);
			
			Если НЕ МетаОбъект = Неопределено Тогда
				
				ИмяПолное = МетаОбъект.ПолноеИмя();
				СтрИмена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ИмяПолное);
				ИмяТаблицы = СтрИмена.ИмяКласса+"."+СтрИмена.ИмяОбъекта;					  
				
				ТекстТекТаблица = ШаблонЗапроса;
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ИмяПолное%", ИмяПолное);
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ИмяОбъекта%", СтрИмена.ИмяОбъекта);					  
				ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ИмяТаблицы%",ИмяТаблицы);
				
				Если НЕ ПустаяСтрока(ВыражениеПредставления) Тогда
					
					ВыражениеПредставления = СтрЗаменить(ВыражениеПредставления,"Ссылка.","ТекТаб.");
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ВыражениеПредставления%",ВыражениеПредставления);						  
					
				Иначе	
					
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"%ВыражениеПредставления%","ПредставлениеСсылки(ТекТаб.Ссылка)");
					
				КонецЕсли; 
				
				Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
					
					ТекстТекТаблица = СтрЗаменить(ТекстТекТаблица,"РАЗРЕШЕННЫЕ","");
					
				КонецЕсли; 
				
				// Группы не выгружаем
				Если бит_ОбщегоНазначения.ОбъектПринадлежитКоллекцииМетаданных("Справочники", СтрИмена.ИмяОбъекта) Тогда
				
					Если МетаОбъект.Иерархический 
						 И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
					
						 ТекстТекТаблица = ТекстТекТаблица+ШаблонНеГруппа;
					
					КонецЕсли; 
				
				КонецЕсли; 
				
				ТекстЗапроса = ТекстЗапроса+?(ПустаяСтрока(ТекстЗапроса),"",ШаблонОбъединить)+ТекстТекТаблица;
				
			КонецЕсли; 
			
		КонецЕсли; // Тип не примитивный
		
	КонецЦикла; // Типы
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		ТекстЗапроса = ТекстЗапроса+ШаблонИнстр+ШаблонАвтоУп;
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПодготовитьТекстЗапросаДляВыгрузки()

// Процедура готовит списки, которые нужно выгружать обязательно. 
// 
// Параметры:
//  СпискиВыгрузки - Булево.
// 
Процедура ВыгрузитьОбязательныеСписки(СпискиВыгрузки)
	
	// Булево
	СписокБулево = Новый СписокЗначений;
	СписокБулево.Добавить("Истина", "Да");
	СписокБулево.Добавить("Ложь", "Нет");
	
	СпискиВыгрузки.Вставить("Булево", СписокБулево);
	
	// Валюты
	СтрТипВалюты = "СправочникСсылка.Валюты";	
	
	Если СпискиВыгрузки[СтрТипВалюты] = Неопределено Тогда
		
		ТекстЗапроса = ПодготовитьТекстЗапросаДляВыгрузки(СтрТипВалюты);
		СписокВыгрузки = ЗаполнитьСписокВыгрузки(ТекстЗапроса, СтрТипВалюты);
		
		Если СпискиВыгрузки.Количество() > 0 Тогда
			
			СпискиВыгрузки.Вставить(СтрТипВалюты ,СписокВыгрузки);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ВыгрузитьОбязательныеСписки()	

// Процедура конвертирует виды проформ.
// 
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("",);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Имя КАК Имя,
	|	Таблица.СтрТип КАК СтрТип
	|ИЗ
	|	Справочник.бит_ВидыПроформ.НастройкиРеквизитов КАК Таблица
	|ГДЕ
	|	(Таблица.СтрТип ПОДОБНО ""%_%бит_СценарииБюджетирования%_%""
	|			ИЛИ Таблица.СтрТип ПОДОБНО ""%_%бит_СценарииБюджетирования""
	|			ИЛИ Таблица.СтрТип ПОДОБНО ""%_%бит_ВидыЦФО%_%""
	|			ИЛИ Таблица.СтрТип ПОДОБНО ""%_%бит_ВидыЦФО""
	|			ИЛИ Таблица.СтрТип ПОДОБНО ""%_%бит_ЦФО%_%""
	|			ИЛИ Таблица.СтрТип ПОДОБНО ""%_%бит_ЦФО""
	|			ИЛИ Таблица.СтрТип ПОДОБНО ""%_%бит_Проекты%_%""
	|			ИЛИ Таблица.СтрТип ПОДОБНО ""%_%бит_Проекты"")
	|ИТОГИ ПО
	|	Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСпр = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаСпр.Следующий() Цикл
		
		СпрОбъект = ВыборкаСпр.Ссылка.ПолучитьОбъект();	
		
		Выборка = ВыборкаСпр.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ИндексСтроки = Выборка.НомерСтроки - 1;
			СтрокаТипа = СпрОбъект.НастройкиРеквизитов[ИндексСтроки].СтрТип;
			
			СтрокаТипа = СтрЗаменить(СтрокаТипа, "бит_СценарииБюджетирования", "СценарииПланирования");
			СтрокаТипа = СтрЗаменить(СтрокаТипа, "бит_ВидыЦФО"				 , "ВидыЦФО");
			СтрокаТипа = СтрЗаменить(СтрокаТипа, "бит_ЦФО"				     , "Подразделения");
			СтрокаТипа = СтрЗаменить(СтрокаТипа, "бит_Проекты"				 , "Проекты");		
									
			СпрОбъект.НастройкиРеквизитов[ИндексСтроки].СтрТип = СтрокаТипа;
			
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
	КонецЦикла;
	
КонецПроцедуры // КонвертироватьВидыПроформ()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет необходимость добавления кнопки, исходя из установленого режима.
// 
// Параметры:
//  ВхРежим - ПеречислениеСсылка.бит_ДаНетАвто.
// 
// Возвращаемое значение:
//  Режим - Булево.
// 
Функция РежимКнопки(ВхРежим)
	
	Если ВхРежим = Перечисления.бит_ДаНетАвто.Да Тогда
		
		Режим = Истина;
		
	ИначеЕсли ВхРежим = Перечисления.бит_ДаНетАвто.Нет Тогда
		
		Режим = Ложь;
		
	Иначе	
		
		Режим = Неопределено;
		
	КонецЕсли; 
	
	Возврат Режим;
	
КонецФункции

// Функция добавляет значение в массив или структуру.
// 
// Параметры:
//   Коллекция - Массив, Структура.
//   Значение - Произвольный.
//   Имя - Строка.
// 
Процедура ДобавитьВКоллекцию(Коллекция, Значение, Имя = "")

	Если ТипЗнч(Коллекция) = Тип("Структура") И Не ПустаяСтрока(Имя) Тогда
		
		Коллекция.Вставить(Имя, Значение);
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Массив")	Тогда
		
		Коллекция.Добавить(Значение);
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция создает структуру-описание табличной части.
// 
// Параметры:
// Имя - Строка
// Синоним - Строка
// Реквизиты - Структура
// 
// Возвращаемое значение:
//  МетаТабЧасть - Структура.
// 
Функция ОписаниеТабЧасти(Имя, Синоним, Реквизиты)

	МетаТабЧасть = Новый Структура;
	МетаТабЧасть.Вставить("Имя",Имя);
	
	ТекСиноним = ?(ПустаяСтрока(Синоним),Имя, Синоним);
	МетаТабЧасть.Вставить("Синоним", ТекСиноним);
	МетаТабЧасть.Вставить("Реквизиты", Реквизиты);

	Возврат МетаТабЧасть;
	
КонецФункции // ОписаниеТабЧасти()

// Функция создает структуру-описание реквизита 
// по строке табличной части СправочникТабличнаяЧастьСтрока.бит_ВидыПроформ.НастройкиРеквизитов.
// 
// Параметры:
// ВхСтрока - СправочникТабличнаяЧастьСтрока.бит_ВидыПроформ.НастройкиРеквизитов.
// 
// Возвращаемое значение:
//  Реквизит - Структура.
// 
Функция ОписаниеРеквизита(ВхСтрока)
	
	Реквизит = Новый Структура;
	Реквизит.Вставить("Имя", ВхСтрока.Имя);
	
	ТекСиноним = ?(ПустаяСтрока(ВхСтрока.Синоним),ВхСтрока.Имя,ВхСтрока.Синоним);
	Реквизит.Вставить("Синоним", ТекСиноним);
	
	ТекТип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(ВхСтрока.СтрТип);
	Реквизит.Вставить("Тип",ТекТип);
	Реквизит.Вставить("СтрТип", ВхСтрока.СтрТип);
	
	Реквизит.Вставить("ПроверкаЗаполнения",ВхСтрока.ПроверкаЗаполнения);
	
	НастройкиОтображения = ОписаниеОтображенияЭлемента(ВхСтрока);
	Реквизит.Вставить("НастройкиОтображения", НастройкиОтображения);
	
	НастройкиОбмена = ОписаниеНастроекОбмена(ВхСтрока);
	Реквизит.Вставить("НастройкиОбмена", НастройкиОбмена);
	
	Возврат Реквизит;
	
КонецФункции

// Функция описание стандартного реквизита.
// 
// Параметры:
//  Имя - Строка
//  Синоним - Строка
//  Тип - ОписаниеТипов
// 
// Возвращаемое значение:
//  Реквизит - Структура.
// 
Функция ОписаниеСтандартногоРеквизита(Имя, Синоним, СтрТип)

	Реквизит = Новый Структура;
	Реквизит.Вставить("Имя", Имя);
	Реквизит.Вставить("Синоним", Синоним);
	Реквизит.Вставить("Тип", бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрТип));
	Реквизит.Вставить("СтрТип", СтрТип);
	Реквизит.Вставить("НастройкиОбмена");
	
	Возврат Реквизит;
	
КонецФункции

// Функция - конструктор структуры, описывающей интерфейсное отображения поля проформы.
// 
// Параметры:
// ВхСтрока - СправочникТабличнаяЧастьСтрока.бит_ВидыПроформ.НастройкиРеквизитов.
// 
// Возвращаемое значение:
//  НастройкиОтображения - Структура.
// 
Функция ОписаниеОтображенияЭлемента(ВхСтрока)

	НастройкиОтображения = Новый Структура("ВидПоля
	                                        |, ПроверкаЗаполнения
	                                        |, Ширина
											|, КнопкаВыбора
											|, КнопкаРегулирования
											|, КнопкаОткрытия
											|, КнопкаОчистки");
	
		
	НастройкиОтображения.ВидПоля = ?(ЗначениеЗаполнено(ВхСтрока.ВидПоля),ВхСтрока.ВидПоля, Перечисления.бит_ВидыПолейПроформы.ПолеВвода);
	НастройкиОтображения.Ширина  = ВхСтрока.Ширина;
	НастройкиОтображения.КнопкаВыбора        = РежимКнопки(ВхСтрока.КнопкаВыбора);
	НастройкиОтображения.КнопкаРегулирования = РежимКнопки(ВхСтрока.КнопкаРегулирования);
	НастройкиОтображения.КнопкаОткрытия      = РежимКнопки(ВхСтрока.КнопкаОткрытия);
	НастройкиОтображения.КнопкаОчистки       = РежимКнопки(ВхСтрока.КнопкаОчистки);
	НастройкиОтображения.ПроверкаЗаполнения  = ВхСтрока.ПроверкаЗаполнения;
	
	Возврат НастройкиОтображения;
	
КонецФункции

// Функция - конструктор структуры, описывающей настройки обмена данными.
// 
// Параметры:
// ВхСтрока - СправочникТабличнаяЧастьСтрока.бит_ВидыПроформ.НастройкиРеквизитов.
// 
// Возвращаемое значение:
//  НастройкиОбмена - Структура.
// 
Функция ОписаниеНастроекОбмена(ВхСтрока)

	НастройкиОбмена = Новый Структура("Выгружать,ВыражениеПредставления, Настройки");
	
	НастройкиОбмена.Выгружать = ВхСтрока.Выгружать;
	НастройкиОбмена.ВыражениеПредставления = ВхСтрока.ВыражениеПредставления;
	
	НастройкиОбмена.Настройки = ВхСтрока.ХранилищеНастроек.Получить();
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Функция извлекает из БД список для выгрузки в Эксель.
// В Эксель список будет установлен в качестве списка выбора для полей соответсвующих типов.
// 
// Параметры:
//   ТекстЗапроса - Строка
//   СтрТип - Строка
// 
// Возвращаемое значение:
//  СписокВыгрузки - СписокЗначений.
// 
Функция ЗаполнитьСписокВыгрузки(ТекстЗапроса, СтрТип, СтрНастроек = Неопределено, Режим = "Запрос")
	
	СписокВыгрузки = Новый СписокЗначений;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		Если Режим = "Построитель" Тогда
			
			Построитель = Новый ПостроительЗапроса;
			Построитель.Текст = ТекстЗапроса;
			// Построитель.ЗаполнитьНастройки();
			
			Если ТипЗнч(СтрНастроек) = Тип("Структура") Тогда
			
				СтруктураНастроек = СтрНастроек.СтруктураНастроек;
				
				Если СтруктураНастроек.Свойство("Отбор") Тогда
				
					Для каждого СтрОтбор Из СтруктураНастроек.Отбор Цикл
					
						   НовыйЭлОтбора = Построитель.Отбор.Добавить(СтрОтбор.ПутьКДанным);
						   бит_ОбщегоНазначения.ЗаполнитьЭлементОтбора(СтрОтбор, НовыйЭлОтбора);
					
					КонецЦикла; 
				
				КонецЕсли; 
				
				Если СтруктураНастроек.Свойство("Порядок") Тогда
					
					бит_МеханизмПолученияДанных.УстановитьПорядокПостроителя(СтруктураНастроек.Порядок, Построитель, НаправлениеСортировки);
				
				КонецЕсли; 
				
			КонецЕсли; 
			
			Попытка
			
				Построитель.Выполнить();
				Результат = Построитель.Результат;
			
			Исключение
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось выгрузить список для типа ""%1"" по причине ""%2"".'"),
											СтрТип, Строка(ОписаниеОшибки()));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
				Результат = Неопределено;
				
			КонецПопытки;
			
		Иначе	
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			
			Попытка
				
				Результат = Запрос.Выполнить();
				
			Исключение
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось выгрузить список для типа ""%1"" по причине ""%2"".'"),
											СтрТип, Строка(ОписаниеОшибки()));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				
				Результат = Неопределено;
				
			КонецПопытки;
			
			
		КонецЕсли; 
		
		
		Если ТипЗнч(Результат) = Тип("РезультатЗапроса") Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Найти(Выборка.ИмяПолное,"Перечисление") > 0 Тогда
					
					ТекПеречисление = Перечисления[Выборка.ИмяОбъекта];
					ИмяЗначения = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(ТекПеречисление, Выборка.Ссылка);
					
					СтрСсылка = Выборка.ИмяПолное+"."+ИмяЗначения;
					СтрПредставление = ИмяЗначения;
					
					
				Иначе	 
					
					СтрСсылка = Выборка.ИмяПолное+"/"+Строка(Выборка.Ссылка.УникальныйИдентификатор());
					СтрПредставление = Выборка.Представление;
					
				КонецЕсли; 
				
				СписокВыгрузки.Добавить(СтрСсылка, СтрПредставление);
				
				
			КонецЦикла; // Выборка
			
		КонецЕсли; // ЕстьРезультат
		
	КонецЕсли; 
	
	Возврат СписокВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецЕсли 
