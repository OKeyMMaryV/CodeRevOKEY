
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	бит_РаботаСДиалогамиСервер.ФормаВыбораПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);

	// Определение назначения проформы	
	Если Параметры.Свойство("Назначение") Тогда
		
		Если ТипЗнч(Параметры.Назначение) = Тип("ПеречислениеСсылка.бит_НазначенияПроформ") Тогда
			Назначение = Параметры.Назначение;
		Иначе	
			Назначение = Перечисления.бит_НазначенияПроформ[Параметры.Назначение];
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Назначение) Тогда
	
		Назначение = Перечисления.бит_НазначенияПроформ.ФормаСбораДанных;
	
	КонецЕсли; 	
	
	Если НЕ ЗначениеЗаполнено(Назначение) Тогда
		
		ТекстСообщения =  НСтр("ru = 'Данная форма не предназначена для непосредственного использования.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли; 
	
	// Проверка лицензии
	бит_ОбщегоНазначения.ПроверитьДоступностьПроформ(Назначение, Отказ);	
	
	// Настройка формы в зависимости от назначения.
	ЭтоФСД = ?(Назначение = Перечисления.бит_НазначенияПроформ.ПроизвольнаяФорма, Ложь, Истина);
	
	Если ЭтоФСД Тогда
		
		Заголовок =  НСтр("ru = 'Виды форм сбора данных'");
		
	Иначе	
		
		Заголовок =  НСтр("ru = 'Виды произвольных форм'");
		
	КонецЕсли; 
	
	ТекСсылка = Неопределено;
	Параметры.Свойство("ТекЗначение", ТекСсылка);	
	
	ОбновитьДерево(ТекСсылка);
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПроформ

&НаКлиенте
Процедура ДеревоПроформыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОсуществитьВыбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ТекСсылка = ПолучитьТекущуюСсылку();
	ОбновитьДерево(ТекСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбор(Команда)
	
	ОсуществитьВыбор();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет обновление дерева видов проформ.
// 
&НаСервере
Процедура ОбновитьДерево(ТекСсылка = Неопределено)

	ДеревоПроформы.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	бит_ВидыПроформ.Ссылка КАК Ссылка,
	               |	бит_ВидыПроформ.Имя,
	               |	бит_ВидыПроформ.Код,
	               |	бит_ВидыПроформ.Наименование,
	               |	бит_ВидыПроформ.ЭтоГруппа,
	               |	бит_ВидыПроформ.ПометкаУдаления
	               |ИЗ
	               |	Справочник.бит_ВидыПроформ КАК бит_ВидыПроформ
	               |ГДЕ
	               |	бит_ВидыПроформ.Назначение = &Назначение
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка ИЕРАРХИЯ
	               |АВТОУПОРЯДОЧИВАНИЕ";

	Результат = Запрос.Выполнить();
	
	ДеревоДанные = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоДанные.Колонки.Добавить("Картинка");
	
	ЗначениеВДанныеФормы(ДеревоДанные, ДеревоПроформы);
	
	// Дозаполнение дерева 
	ИдТекущейСтроки = 0;
	ОбойтиДанныеФормыДерево(ДеревоПроформы, ТекСсылка, ИдТекущейСтроки);
	
	// Восстановление позиции в дереве
	Если ИдТекущейСтроки <> 0  Тогда
		
		Элементы.ДеревоПроформы.ТекущаяСтрока = ИдТекущейСтроки;
	
	КонецЕсли; 
	
КонецПроцедуры // ОбновитьДерево()

// Процедура рекурсивно обходит дерево видов проформ и дозаполняет данные. 
// 
&НаСервере
Процедура ОбойтиДанныеФормыДерево(СтрокаВерх, ТекСсылка, ИдТекущейСтроки)

	ТекКоллекция = СтрокаВерх.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из ТекКоллекция Цикл
	
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			Если СтрокаДерева.ПометкаУдаления Тогда
				
				СтрокаДерева.Картинка = БиблиотекаКартинок.бит_казна_ПапкаПометка;
				
			Иначе
				
				СтрокаДерева.Картинка = БиблиотекаКартинок.бит_казна_Папка;
			
			КонецЕсли; 
			
		Иначе	
			
			Если СтрокаДерева.ПометкаУдаления Тогда
				
				СтрокаДерева.Картинка = БиблиотекаКартинок.бит_казна_ЕстьЗначениеПометка;
				
			Иначе
				
				СтрокаДерева.Картинка = БиблиотекаКартинок.бит_Реквизит;
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если СтрокаДерева.Ссылка = ТекСсылка Тогда
		
			 ИдТекущейСтроки = СтрокаДерева.ПолучитьИдентификатор();
		
		КонецЕсли; 
		
		ОбойтиДанныеФормыДерево(СтрокаДерева, ТекСсылка, ИдТекущейСтроки);
		
	КонецЦикла; 

КонецПроцедуры // ОбойтиДанныеФормыДерево()

// Функция получает ссылку, на которой позиционирована текущая строка дерева.
// 
// Возвращаемое значение:
//  ТекСсылка - СправочникСсылка.бит_ВидыПроформ.
// 
&НаКлиенте
Функция ПолучитьТекущуюСсылку()

	ТекСсылка = Неопределено;
	
	ТекущаяСтрока = Элементы.ДеревоПроформы.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
	
		ТекСсылка = ТекущаяСтрока.Ссылка;
		
	КонецЕсли; 

	Возврат ТекСсылка;
	
КонецФункции // ПолучитьТекущуюСсылку()

// Процедура оповещает форму-владельца о выборе значения.
// 
&НаКлиенте
Процедура ОсуществитьВыбор()
	
	ТекущаяСтрока = Элементы.ДеревоПроформы.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущаяСтрока.ЭтоГруппа Тогда
		
		ОповеститьОВыборе(ТекущаяСтрока.Ссылка);
		
	КонецЕсли; 
	
КонецПроцедуры // ОсуществитьВыбор()

#КонецОбласти

