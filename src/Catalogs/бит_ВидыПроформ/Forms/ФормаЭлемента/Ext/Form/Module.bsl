
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущееИмя; // Служит для передачи редактируемого имени между обработчиками.

&НаКлиенте
Перем мИмяПроформы; // Хранит текущее имя проформы.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	// Вызов механизма защиты
	бит_ОбщегоНазначения.ПроверитьДоступностьПроформ(Объект.Назначение, Отказ);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// Кеширование данных, необходимых при работе на клиенте.
	ЗаполнитьКэшЗначений();
	
	// Формирование дерева ДеревоНастройки
	ОбновитьДерево();
	
	Справочники.бит_ВидыПроформ.СформироватьСписокЗапрещенныхИмен(СписокЗапрещенные);
	
	// Формирование списка синхронизирумых полей между палитрой свойств и табличной частью НастройкиРеквизитов.
	Исключения = Новый Массив;
	Исключения.Добавить("КлючСинхронизации");
	Исключения.Добавить("ИмяТаблицы");
	Исключения.Добавить("ХранилищеНастроек");
	Исключения.Добавить("НастройкиУстановлены");
	
	Для каждого МетаРеквизит Из Метаданные.Справочники.бит_ВидыПроформ.ТабличныеЧасти.НастройкиРеквизитов.Реквизиты Цикл
		
		Если НЕ Исключения.Найти(МетаРеквизит.Имя) = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		СписокСинхронизации.Добавить(МетаРеквизит.Имя);
		
		Если НЕ МетаРеквизит.Имя = "КлючСвязи" Тогда
			
			ИмяЭлемента = "Свойства_"+МетаРеквизит.Имя;
			СписокЭлементыПанели.Добавить(ИмяЭлемента);
			
		КонецЕсли; 
	
	КонецЦикла; 
	СписокСинхронизации.Добавить("ОтборПорядок");
	СписокЭлементыПанели.Добавить("Свойства_ОтборПорядок");
	СписокЭлементыПанели.Добавить("Свойства_Тип");
	
	
	НастройкиОтборПорядок = Новый Структура;
	
	// Восстановление настроек построителя для выгрузки списков.
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ТекущийОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
	Иначе	
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли; 
	
	ОбновитьНастройкиОтбораПорядка(ТекущийОбъект);
	
	// Обработка ситуации копирования
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Параметры.ЗначениеКопирования.НастройкиДвижений.Количество() > 0 Тогда
		
		Объект.Имя = Объект.Имя+"_1";
		ВидПроформыИсточник = Параметры.ЗначениеКопирования;
	
	КонецЕсли; 
	
	// Настройка формы в зависимости от назначения.
	ЭтоФСД = ?(Объект.Назначение = Перечисления.бит_НазначенияПроформ.ПроизвольнаяФорма, Ложь, Истина);
	
	Если ЭтоФСД Тогда
		
		Заголовок =  НСтр("ru = 'Вид формы сбора данных'");
		
	Иначе	
		
		Заголовок =  НСтр("ru = 'Вид произвольной формы'");
		
	КонецЕсли; 
	
	Элементы.ФормаКомандаВыгрузитьШаблонExcel.Видимость = ЭтоФСД;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ВидПроформыИсточник) Тогда
		
		 ПодключитьОбработчикОжидания("ОжиданиеНеобходимостиКопирования",0.1, Истина);
		
	КонецЕсли; 
	
	мИмяПроформы = Объект.Имя;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
		
		// Сохранение настроек построителя для выгрузки списков.
		Для каждого СтрокаТаблицы Из ТекущийОбъект.НастройкиРеквизитов Цикл
			
			КлючСтруктуры = бит_ОбщегоНазначенияКлиентСервер.КлючСтруктурыИзИД(СтрокаТаблицы.КлючСвязи);
			
			ТекНастройка = Неопределено;
			Если НастройкиОтборПорядок.Свойство(КлючСтруктуры, ТекНастройка) Тогда
				
				ТекХранилище = СтрокаТаблицы.ХранилищеНастроек.Получить();
				Если ТекНастройка.Изменено ИЛИ НЕ ТипЗнч(ТекХранилище) = Тип("Структура") Тогда
					
					СтрокаТаблицы.НастройкиУстановлены = Истина;
					
					ТекНастройка.Изменено = Ложь;
					СтрокаТаблицы.ХранилищеНастроек    = Новый ХранилищеЗначения(ТекНастройка);
					
				КонецЕсли; 
				
			Иначе	
				
				СтрокаТаблицы.НастройкиУстановлены = Ложь;
				СтрокаТаблицы.ХранилищеНастроек    = Неопределено;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьНастройкиОтбораПорядка(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Записан_ВидПроформы");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Назначение",Объект.Назначение);
	ПараметрыФормы.Вставить("ТекЗначение", Объект.Родитель);
	
	ОткрытьФорму("Справочник.бит_ВидыПроформ.ФормаВыбораГруппы", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Имя) Тогда
		
		Объект.Имя = бит_ОбщегоНазначенияКлиентСервер.ПроверитьСпецСимволы(Объект.Имя, ,"Имя");
		
		Если ЭтоДопустимоеИмя(Объект.Имя, "ИмяПроформы") Тогда
			
			Если НЕ ПустаяСтрока(Объект.Имя) И ПустаяСтрока(Объект.Наименование) Тогда
				
				Объект.Наименование = Объект.Имя;
				
			КонецЕсли; 
			
		Иначе	
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Было введено недопустимое имя ""%1"".'"),
										Объект.Имя);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Объект.Имя = мИмяПроформы;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	мИмяПроформы = Объект.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.Наименование = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();	
	Элемент.СписокВыбора.Добавить(Объект.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_СинонимОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Свойства_Синоним = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_СинонимАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	АвтоСиноним = АвтоФормированиеСинонима(Свойства_Имя);
	
	Элемент.СписокВыбора.Добавить(АвтоСиноним);
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ПолеПриИзменение(Элемент)
	
	ИзменитьСвойство(Элемент.Имя, ЭтотОбъект[Элемент.Имя]);	
	
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ТипПриИзменении(Элемент)
	
	ИзменениеТипа(Свойства_Тип);
	ИзменитьСвойство("Свойства_СтрТип",Свойства_СтрТип);
			
КонецПроцедуры

&НаКлиенте
Процедура Свойства_ОтборПорядокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЭтоСсылочныйТип(Свойства_СтрТип) Тогда
		
		ТекстСообщения = НСтр("ru = 'Установка настроек доступна только для ссылочных типов.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Возврат;
	
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("СтрТип", Свойства_СтрТип);
	
	Ключ = бит_ОбщегоНазначенияКлиентСервер.КлючСтруктурыИзИД(Свойства_КлючСвязи);	
	СтрСохр = Неопределено;
	НастройкиОтборПорядок.Свойство(Ключ, СтрСохр);
	
	Если ТипЗнч(СтрСохр) = Тип("Структура") Тогда
	
		ПараметрыФормы.Вставить("СтруктураНастроек", СтрСохр.СтруктураНастроек);
	
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("Свойства_ОтборПорядокНачалоВыбораОкончание", ЭтотОбъект, Ключ); 
	ОткрытьФорму("Справочник.бит_ВидыПроформ.Форма.НастройкиВыгрузки", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура окончание процедуры "Свойства_ОтборПорядокНачалоВыбора".
// 
&НаКлиенте 
Процедура Свойства_ОтборПорядокНачалоВыбораОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Ключ = ДополнительныеПараметры;
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		НастройкиОтборПорядок.Вставить(Ключ, РезультатВыбора);
		Свойства_ОтборПорядок = РезультатВыбора.ПредставлениеНастроек;
		ИзменитьСвойство("Свойства_ОтборПорядок", Свойства_ОтборПорядок);	
		
	КонецЕсли; 
	
КонецПроцедуры // Свойства_ОтборПорядокНачалоВыбораОкончание()

&НаКлиенте
Процедура Свойства_ОтборПорядокОчистка(Элемент, СтандартнаяОбработка)
		
	Ключ = бит_ОбщегоНазначенияКлиентСервер.КлючСтруктурыИзИД(Свойства_КлючСвязи);	
	Если НастройкиОтборПорядок.Свойство(Ключ) Тогда
		
		НастройкиОтборПорядок.Удалить(Ключ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастройки   

&НаКлиенте
Процедура ДеревоНастройкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если НЕ Копирование Тогда
		
		// Добавление новых строк различного вида
		Если ТекущаяСтрока.ВидУзла = "Реквизиты" Тогда
			
			ВидУзлаНовойСтроки = "Реквизит";
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "ТабличныеЧасти" Тогда
			
			ВидУзлаНовойСтроки = "ТабличнаяЧасть";
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда
			
			ДобавитьСтрокуРеквизитТабЧасти(ТекущаяСтрока.Имя);
			Отказ = Истина;
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "РеквизитТабличнойЧасти" Тогда
			
			ДобавитьСтрокуРеквизитТабЧасти(ТекущаяСтрока.ПолучитьИдентификатор());
			Отказ = Истина;
			
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "Реквизит" Тогда
			
			ДобавитьСтрокуРеквизит();
			Отказ = Истина;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли; 
		
	Иначе	
		
		Если ТекущаяСтрока.ВидУзла = "Реквизиты" ИЛИ ТекущаяСтрока.ВидУзла = "ТабличныеЧасти"  Тогда
			
			// Группировочные строки копировать нельзя
			Отказ = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;	
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
		ТекущаяСтрока.ВидУзла = ВидУзлаНовойСтроки;
		ТекущаяСтрока.КлючСвязи = Строка(Новый УникальныйИдентификатор);
		Если ТекущаяСтрока.ВидУзла = "Реквизит" Тогда
		
			ТекущаяСтрока.Картинка = фКэшЗначений.БиблиотекаКартинок.бит_Реквизит;
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "ТабличныеЧасти" Тогда
			
			ТекущаяСтрока.Картинка = фКэшЗначений.БиблиотекаКартинок.бит_ТабличнаяЧасть;
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда	
			
			ТекущаяСтрока.Картинка = фКэшЗначений.БиблиотекаКартинок.бит_ТабличнаяЧасть;			
			
		КонецЕсли; 
		
		ВидУзлаНовойСтроки = "";
		
	ИначеЕсли НоваяСтрока И Копирование Тогда
		
		ИмяНач = ТекущаяСтрока.Имя;
		ТекущаяСтрока.КлючСвязи = Строка(Новый УникальныйИдентификатор);
		ТекущаяСтрока.Имя = ТекущаяСтрока.Имя+"1";
		
		Если ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда
			
			 // Копируем реквизиты табличной части
			 КоллекцияПриемник = ТекущаяСтрока.ПолучитьЭлементы();
			 
			 СтрОтбор = Новый Структура("ИмяТаблицы",ИмяНач);
			 
			 МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
			 
			 Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				 
				НоваяСтрока = Объект.НастройкиРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ИмяТаблицы = ТекущаяСтрока.Имя;
				НоваяСтрока.КлючСвязи = Строка(Новый УникальныйИдентификатор);
				
			 	СоздатьЭлементДерева(КоллекцияПриемник
				                      , СтрокаТаблицы.Имя
									  , "РеквизитТабличнойЧасти"
									  , СтрокаТаблицы.КлючСвязи
									  , фКэшЗначений.БиблиотекаКартинок.бит_Реквизит); 
			 
			 КонецЦикла;  // МассивСтрок
			 
			 Элементы.ДеревоНастройки.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор(), Истина);
			 
		КонецЕсли; 
		
	КонецЕсли; 
	
	мТекущееИмя = ТекущаяСтрока.Имя;
	
	// Сообщить("ПриНачалеРедактирования");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	Если НЕ ЭтоДопустимоеИмя(ТекущаяСтрока.Имя, ТекущаяСтрока.ВидУзла) И ЗначениеЗаполнено(ТекущаяСтрока.Имя) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ДеревоНастройкиПередОкончаниемРедактированияОкончание", ЭтотОбъект); 
		ТекстВопроса = НСтр("ru = 'Введено недопустимое имя. Продолжить редактирование?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,15,КодВозвратаДиалога.Да); 
		
		Отказ = Истина;
		
	КонецЕсли;	
		
КонецПроцедуры

// Процедура окончание процедуры "ДеревоНастройкиПередОкончаниемРедактирования".
// 
&НаКлиенте 
Процедура ДеревоНастройкиПередОкончаниемРедактированияОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		
		// Возврат к исходному имени
		ТекущаяСтрока.Имя = мТекущееИмя;
		
	КонецЕсли; 
                
КонецПроцедуры // ДеревоНастройкиПередОкончаниемРедактированияОкончание()

&НаКлиенте
Процедура ДеревоНастройкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	ОкончаниеРедактированияСтрокиДерева(ТекущаяСтрока.ПолучитьИдентификатор(), мТекущееИмя);
	ОжиданиеАктивизацииСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВидУзла = "Реквизиты" 
		ИЛИ ТекущаяСтрока.ВидУзла = "ТабличныеЧасти"  Тогда
		
		// Данные строки удалять нельзя
		Отказ = Истина;
		
	ИначеЕсли ТекущаяСтрока.ЕстьСсылки = Истина Тогда
		
		Отказ = Истина;
		
	Иначе	
		
		// Запомним ключ удаляемой строки для обработки после удаления.
		УдаляемыйКлюч = ТекущаяСтрока.КлючСвязи;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПослеУдаления(Элемент)
	
	Если НЕ ПустаяСтрока(УдаляемыйКлюч) Тогда
		
		// После удаления из деерва удалим строки из табличной части.
		СтрОтбор = Новый Структура("КлючСвязи", УдаляемыйКлюч);
		
		МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаПервая = МассивСтрок[0];
			
			Если СтрокаПервая.ИмяТаблицы = "ТабличныеЧасти" Тогда
				
				// Вместе с табличной частью необходимо удалить реквизиты табличной части.
				СтрОтбор = Новый Структура("ИмяТаблицы", СтрокаПервая.Имя);
				
				МассивРеквизиты = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
				
				Для каждого эл Из МассивРеквизиты Цикл
				
					МассивСтрок.Добавить(эл);
				
				КонецЦикла;  // МассивРеквизитов
			
			КонецЕсли; // "ТабличныеЧасти"
			
		КонецЕсли; 
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			Объект.НастройкиРеквизитов.Удалить(СтрокаТаблицы);
			
		КонецЦикла; 
		
		УдаляемыйКлюч = "";
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПриАктивизацииСтроки(Элемент)
	
	ОтключитьОбработчикОжидания("ОжиданиеАктивизацииСтрокиДерева");
	ПодключитьОбработчикОжидания("ОжиданиеАктивизацииСтрокиДерева", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиДвижений 

&НаКлиенте
Процедура НастройкиДвиженийШаблонДвиженийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		УсловияОтбора = Новый Структура;
		УсловияОтбора.Вставить("ВидПроформы", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", УсловияОтбора);
		ОткрытьФорму("Справочник.бит_ШаблоныДвижений.ФормаВыбора", ПараметрыФормы, Элемент);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДвиженийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
	
		ТекущаяСтрока = Элементы.НастройкиДвижений.ТекущиеДанные;
		ТекущаяСтрока.Активность = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПереместитьВверх(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	СдвинутьСтрокуДерева(ТекущаяСтрока, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьВниз(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	СдвинутьСтрокуДерева(ТекущаяСтрока, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьШаблонExcel(Команда)
	
	Если Модифицированность Тогда
		
		ТекстСообщения = НСтр("ru = 'Для выполнения действия необходимо записать элемент. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("КомандаВыгрузитьШаблонExcelОкончание", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
		
	Иначе 
		
		ДанныеДляВыгрузки = ПодготовитьДанныеДляВыгрузкиШаблона();
		бит_ПроформыКлиентСервер.ВыгрузитьШаблоныПроформ(ДанныеДляВыгрузки);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура окончание процедуры "КомандаВыгрузитьШаблонExcel".
// 
&НаКлиенте 
Процедура КомандаВыгрузитьШаблонExcelОкончание(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флВыгружать = Записать();
		
	Иначе	
		
		флВыгружать = Ложь;
		
	КонецЕсли; 
	
	Если флВыгружать Тогда
		
		ДанныеДляВыгрузки = ПодготовитьДанныеДляВыгрузкиШаблона();
		бит_ПроформыКлиентСервер.ВыгрузитьШаблоныПроформ(ДанныеДляВыгрузки);
		
	КонецЕсли; 
                
КонецПроцедуры // КомандаВыгрузитьШаблонExcelОкончание()

&НаКлиенте
Процедура КомандаКонструкторБюджетирования(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКонструктора", "ДанныеБюджета");
	
	Оповещение = Новый ОписаниеОповещения("КонструкторПроформыЗавершение", ЭтотОбъект);
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Справочник.бит_ВидыПроформ.Форма.ФормаКонструкторПроформы",ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОкна);
	
	
КонецПроцедуры

// Процедура обработчик оповещения "КонструкторПроформыЗавершение".
//
// Параметры:
// РезДанные - Структура
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура КонструкторПроформыЗавершение(РезДанные, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезДанные) = Тип("Структура") Тогда
		
		ИмяТаблицы = "ДанныеБюджета";
		
		// Выполняем поиск таблицы ДанныеБюджета
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИмяТаблицы","ТабличныеЧасти");
		СтрОтбор.Вставить("Имя", ИмяТаблицы);		  
		СтрОтбор.Вставить("СтрТип", "ТабличнаяЧасть");
		НайденныеСтроки = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТЧ = НайденныеСтроки[0];
			
		Иначе	
			
			СтрокаТЧ = Объект.НастройкиРеквизитов.Добавить();
			СтрокаТЧ.ИмяТаблицы = "ТабличныеЧасти";
			СтрокаТЧ.Имя        = ИмяТаблицы;
			СтрокаТЧ.СтрТип     = "ТабличнаяЧасть";
			СтрокаТЧ.КлючСвязи  = Строка(Новый УникальныйИдентификатор);
			
		КонецЕсли; 
		
		Для каждого КиЗ Из РезДанные Цикл
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ИмяТаблицы", ИмяТаблицы);
			СтрОтбор.Вставить("Имя",КиЗ.Ключ);
			
			СтрокиРеквизита = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
			
			Если СтрокиРеквизита.Количество() = 0 Тогда
			
				НоваяСтрока = Объект.НастройкиРеквизитов.Добавить();
				НоваяСтрока.Имя = КиЗ.Ключ;
				НоваяСтрока.ИмяТаблицы = ИмяТаблицы;
				
				НоваяСтрока.ВидПоля = ПредопределенноеЗначение("Перечисление.бит_ВидыПолейПроформы.ПолеВвода");
				НоваяСтрока.КнопкаОткрытия      = ПредопределенноеЗначение("Перечисление.бит_ДаНетАвто.Авто");
				НоваяСтрока.КнопкаВыбора        = ПредопределенноеЗначение("Перечисление.бит_ДаНетАвто.Авто");
				НоваяСтрока.КнопкаОчистки       = ПредопределенноеЗначение("Перечисление.бит_ДаНетАвто.Авто");
				НоваяСтрока.КнопкаРегулирования = ПредопределенноеЗначение("Перечисление.бит_ДаНетАвто.Авто");
				НоваяСтрока.Выгружать = Истина;
				НоваяСтрока.СтрТип = КиЗ.Значение;
				НоваяСтрока.КлючСвязи = Строка(Новый УникальныйИдентификатор);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Модифицированность = Истина;
		
		ОбновитьДерево();

	    бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоНастройки, ДеревоНастройки.ПолучитьЭлементы());
		
	КонецЕсли; 
	
КонецПроцедуры	// КонструкторПроформыЗавершение

&НаКлиенте
Процедура СоздатьПроизвольнуюФорму(Команда)
	
	СтрПараметры = Новый Структура("ВидПроформы", Объект.Ссылка);
	ОткрытьФорму("Документ.бит_Проформы.ФормаОбъекта", СтрПараметры);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	СтрКартинки = Новый Структура;
	СтрКартинки.Вставить("бит_Реквизит"      ,БиблиотекаКартинок.бит_Реквизит);
	СтрКартинки.Вставить("бит_Реквизиты"     , БиблиотекаКартинок.бит_Реквизиты);
	СтрКартинки.Вставить("бит_ТабличнаяЧасть", БиблиотекаКартинок.бит_ТабличнаяЧасть);
	
	фКэшЗначений.Вставить("БиблиотекаКартинок", СтрКартинки);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция получает данные об использование реквизитов проформы в уже созданных проформах.
// 
// Параметры:
//  ВидПроформы - СправочникСсылка.бит_ВидыПроформ.
// 
// Возвращаемое значение:
//  ТаблицаИспользования - ТаблицаЗначений.
// 
&НаСервере
Функция ДокументыТекущейПроформы(ВидПроформы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПроформы", ВидПроформы);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_Проформы.Ссылка
	               |ИЗ
	               |	Документ.бит_Проформы КАК бит_Проформы
	               |ГДЕ
	               |	бит_Проформы.ВидПроформы = &ВидПроформы";
				   
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ТаблицаИспользования = Новый ТаблицаЗначений;
		ТаблицаИспользования.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка"));
		ТаблицаИспользования.Колонки.Добавить("ИмяТаблицы",Новый ОписаниеТипов("Строка"));		
		
	Иначе	
		
		ТаблицаИспользования = Объект.НастройкиРеквизитов.Выгрузить(, "ИмяТаблицы, Имя");
		
	КонецЕсли; 
	

	Возврат ТаблицаИспользования;
	
КонецФункции

// Функция определяет используется ли рекизит в записанных документах Проформа.
// 
// Параметры:
//  ТаблицаИспользования - ТаблицаЗначений.
//  Коллекция - Строка.
//  Имя       - Строка.
// 
// Возвращаемое значение:
//  флИспользуется - Булево.
// 
&НаСервере
Функция ИмяИспользуется(ТаблицаИспользования, ИмяТаблицы, Имя)

	флИспользуется = Ложь;
	
	СтрОтбор = Новый Структура("ИмяТаблицы, Имя", ИмяТаблицы, Имя);
	
	МассивСтрок = ТаблицаИспользования.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
	
		флИспользуется = Истина;
	
	КонецЕсли; 

	Возврат флИспользуется;
	
КонецФункции // ИмяИспользуется()

// Функция определяет используется ли табличная часть в записанных документах Проформа.
// 
// Параметры:
//  ТаблицаИспользования - ТаблицаЗначений.
//  Коллекция - Строка.
//  Имя       - Строка.
// 
// Возвращаемое значение:
//  флИспользуется - Булево.
// 
&НаСервере
Функция ТаблицаИспользуется(ТаблицаИспользования, ИмяТаблицы)

	флИспользуется = Ложь;
	
	СтрОтбор = Новый Структура("ИмяТаблицы", ИмяТаблицы);
	
	МассивСтрок = ТаблицаИспользования.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
	
		флИспользуется = Истина;
	
	КонецЕсли; 

	Возврат флИспользуется;
	
КонецФункции // ИмяИспользуется()

// Процедура обновляет дерево ДеревоНастройки. 
// Восстанавливаются данные из табличной части НастройкиРеквизитов.
// 
&НаСервере
Процедура ОбновитьДерево()

	ТаблицаИспользования = ДокументыТекущейПроформы(Объект.Ссылка);
	
	КоллекцияЭлементов = ДеревоНастройки.ПолучитьЭлементы();
	КоллекцияЭлементов.Очистить();
	
	// Обязательная строка - корень коллекции реквизитов.
	ЭлементРеквизиты = СоздатьЭлементДерева(КоллекцияЭлементов
	                                          , "Реквизиты"
											  , "Реквизиты"
											  , "Реквизиты"
											  , БиблиотекаКартинок.бит_Реквизиты
											  , Истина);
	
	// Заполнение реквизитов
	СтрОтбор = Новый Структура("ИмяТаблицы","Реквизиты");
	МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
	
	КоллекцияРеквизиты = ЭлементРеквизиты.ПолучитьЭлементы();
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		 ЕстьСсылки = ИмяИспользуется(ТаблицаИспользования, "Реквизиты", СтрокаТаблицы.Имя);
	     СоздатьЭлементДерева(КоллекцияРеквизиты
		                        , СтрокаТаблицы.Имя
								, "Реквизит"
								, СтрокаТаблицы.КлючСвязи
								, БиблиотекаКартинок.бит_Реквизит
								, Ложь
								, ЕстьСсылки);
		
	КонецЦикла; // Реквизиты
	
	// Обязательная строка - корень коллекции табличных частей.
	ЭлементТабЧасти = СоздатьЭлементДерева(КоллекцияЭлементов
	                                       , "ТабличныеЧасти"
										   , "ТабличныеЧасти"
										   , "ТабличныеЧасти"
										   , БиблиотекаКартинок.бит_ТабличнаяЧасть
										   , Истина);
	
	// Заполнение табличных частей и реквизитов табличных частей.
	СтрОтбор = Новый Структура("ИмяТаблицы", "ТабличныеЧасти");
	МассивТабЧасти = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
	
	КоллекцияТабЧасти = ЭлементТабЧасти.ПолучитьЭлементы();
	Для каждого СтрТабЧасть Из МассивТабЧасти Цикл
		
		ЕстьСсылки = ТаблицаИспользуется(ТаблицаИспользования, СтрТабЧасть.Имя);
		ЭлементТабЧасть = СоздатьЭлементДерева(КоллекцияТабЧасти
		                                        , СтрТабЧасть.Имя
												, "ТабличнаяЧасть"
												, СтрТабЧасть.КлючСвязи
												, БиблиотекаКартинок.бит_ТабличнаяЧасть
												, Ложь
												, ЕстьСсылки);
												
		КоллекцияТабЧасть = ЭлементТабЧасть.ПолучитьЭлементы();
		
		СтрОтбор = Новый Структура("ИмяТаблицы", СтрТабЧасть.Имя);
		
		МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
		    ЕстьСсылки = ИмяИспользуется(ТаблицаИспользования, СтрТабЧасть.Имя, СтрокаТаблицы.Имя);
			СоздатьЭлементДерева(КоллекцияТабЧасть
			                     , СтрокаТаблицы.Имя
								 , "РеквизитТабличнойЧасти"
								 , СтрокаТаблицы.КлючСвязи
								 , БиблиотекаКартинок.бит_Реквизит
								 , Ложь
								 , ЕстьСсылки);
		
		КонецЦикла;  // Реквизиты таб. части
		
	КонецЦикла; // Табличные части

КонецПроцедуры // ОбновитьДерево()

// Процедура добавляет строку дерева, описывающую реквизит. 
// 
&НаСервере
Процедура ДобавитьСтрокуРеквизит()
	
	КоллекцияЭлементов = ДеревоНастройки.ПолучитьЭлементы();
	ЭлРеквизиты = НайтиЭлементПоИмени(КоллекцияЭлементов, "Реквизиты");
	
	Если НЕ ЭлРеквизиты = Неопределено Тогда
		
		КоллекцияРеквизиты = ЭлРеквизиты.ПолучитьЭлементы();
		НовыйЭл = КоллекцияРеквизиты.Добавить();
		НовыйЭл.ВидУзла = "Реквизит";
		НовыйЭл.Картинка = БиблиотекаКартинок.бит_Реквизит;
		НовыйЭл.КлючСвязи = Строка(Новый УникальныйИдентификатор);
		
		Элементы.ДеревоНастройки.ТекущаяСтрока = НовыйЭл.ПолучитьИдентификатор();
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьРеквизит()

// Процедура добавляет строку дерева, описывающую реквизит табличной части. 
// 
// Параметры:
//  ИдСтроки - Число - Идентификатор строки, описывающей табличную часть.
// 
&НаСервере
Процедура ДобавитьСтрокуРеквизитТабЧасти(ИдСтроки)
	
	// Определим имя табличной части, в которую нужно добавить реквизит.
	ИмяТабЧасти = "";
	
	Если ТипЗнч(ИдСтроки) = Тип("Число") Тогда
		ТекущаяСтрока = ДеревоНастройки.НайтиПоИдентификатору(ИдСтроки);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
			ИмяТабЧасти = СтрокаРодитель.Имя;
			
		КонецЕсли; 
	Иначе	
		ИмяТабЧасти = ИдСтроки;
	КонецЕсли; 
	
	// Добавление строки дерева
	Если НЕ ПустаяСтрока(ИмяТабЧасти) Тогда
		
		// Поиск строки "ТабличныеЧасти"
		КоллекцияЭлементов = ДеревоНастройки.ПолучитьЭлементы();
		ЭлТабЧасти = НайтиЭлементПоИмени(КоллекцияЭлементов, "ТабличныеЧасти");
		
		Если НЕ ЭлТабЧасти = Неопределено Тогда
			
			// Поиск таб. части по имени
			КоллекцияЭлементов = ЭлТабЧасти.ПолучитьЭлементы();
			ЭлТабЧасть = НайтиЭлементПоИмени(КоллекцияЭлементов, ИмяТабЧасти);
			
			Если НЕ ЭлТабЧасть = Неопределено Тогда
				
				// Добавление новой строки дерева
				КоллекцияЭлементов = ЭлТабЧасть.ПолучитьЭлементы();
				
				НовыйЭл = КоллекцияЭлементов.Добавить();
				НовыйЭл.ВидУзла  = "РеквизитТабличнойЧасти";
				НовыйЭл.Картинка = БиблиотекаКартинок.бит_Реквизит;
				НовыйЭл.КлючСвязи = Строка(Новый УникальныйИдентификатор);
				
				Элементы.ДеревоНастройки.ТекущаяСтрока = НовыйЭл.ПолучитьИдентификатор();
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьРеквизит()

// Процедура обрабатывает окончание редактирования строки ДереваНастройки.
// 
// Параметры:
//  ИдСтроки - Число.
// 
&НаСервере
Процедура ОкончаниеРедактированияСтрокиДерева(ИдСтроки, ИмяТекущее)
	
	ТекущаяСтрока = ДеревоНастройки.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		СтрОтбор = Новый Структура("КлючСвязи",ТекущаяСтрока.КлючСвязи);
		МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество() = 0 Тогда
			
			// Добавляем новую строку табличной части НастройкиРеквизитов 
			// и заполняем значениями по-умолчанию.
			СтрокаНастройки = Объект.НастройкиРеквизитов.Добавить();
			
			Если НЕ ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда
				
				СтрокаНастройки.ВидПоля = Перечисления.бит_ВидыПолейПроформы.ПолеВвода;
				СтрокаНастройки.КнопкаОткрытия      = Перечисления.бит_ДаНетАвто.Авто;
				СтрокаНастройки.КнопкаВыбора        = Перечисления.бит_ДаНетАвто.Авто;
				СтрокаНастройки.КнопкаОчистки       = Перечисления.бит_ДаНетАвто.Авто;
				СтрокаНастройки.КнопкаРегулирования = Перечисления.бит_ДаНетАвто.Авто;
				СтрокаНастройки.Выгружать = Истина;
					
				
			КонецЕсли; 
			
			Если ТекущаяСтрока.ВидУзла = "Реквизит" Тогда
				
				СтрокаНастройки.ИмяТаблицы = "Реквизиты";
				СтрокаНастройки.СтрТип = "Строка";
				
			ИначеЕсли ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда
				
				СтрокаНастройки.ИмяТаблицы = "ТабличныеЧасти";
				СтрокаНастройки.СтрТип = "ТабличнаяЧасть";			
				
			ИначеЕсли ТекущаяСтрока.ВидУзла = "РеквизитТабличнойЧасти" Тогда	
				
				СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
				
				Если НЕ СтрокаРодитель = Неопределено Тогда
					
					ИмяТабЧасти = СтрокаРодитель.Имя;
					
					СтрокаНастройки.ИмяТаблицы = ИмяТабЧасти;
					СтрокаНастройки.СтрТип = "Строка";				
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		Иначе	
			
			СтрокаНастройки = МассивСтрок[0];
			
		КонецЕсли; 
		СтрокаНастройки.КлючСвязи = ТекущаяСтрока.КлючСвязи;
		СтрокаНастройки.Имя = ТекущаяСтрока.Имя;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастройки.Синоним) Тогда
		
			 СтрокаНастройки.Синоним = АвтоФормированиеСинонима(ТекущаяСтрока.Имя);
		
		КонецЕсли; 
		
		Если СтрокаНастройки.ИмяТаблицы = "ТабличныеЧасти" И НЕ СтрокаНастройки.Имя = ИмяТекущее Тогда
			
			// Заменим имя таблицы для реквизитов строк табличной части.
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ИмяТаблицы", ИмяТекущее);
			
			МассивРеквизитыТЧ = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
			
			Для каждого СтрокаРеквизитТЧ Из МассивРеквизитыТЧ Цикл
				
				СтрокаРеквизитТЧ.ИмяТаблицы = СтрокаНастройки.Имя;
				
			КонецЦикла; 
			
		КонецЕсли;  // Табличная часть
		
	КонецЕсли; 
	
КонецПроцедуры // ОкончаниеРедактированияСтрокиДерева()

// Процедура обрабатывает изменение типа. 
// Формируется строковое представление типа.
// 
// Параметры:
//  ТекОписание - ОписаниеТипов.
// 
&НаСервере
Процедура ИзменениеТипа(ТекОписание)
	
	СтрТип = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ТекОписание);
	
	Если ПустаяСтрока(СтрТип) Тогда
		
		Свойства_СтрТип = "Строка";
		
	Иначе
		
		Свойства_СтрТип = СтрТип;
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеТипа() 

// Функция готовит структуру параметров для выгрузки шаблона проформы.
// 
// Возвращаемое значение:
//  СтрПар - Структура.
// 
&НаСервере
Функция ПодготовитьДанныеДляВыгрузкиШаблона()

	СтрПар = Справочники.бит_ВидыПроформ.ПодготовитьДанныеДляВыгрузкиШаблона(Объект.Ссылка);

	Возврат СтрПар;
	
КонецФункции // ПодготовитьДанныеДляВыгрузкиШаблона()

// Процедура выполняет копирование шаблонов движений при копировании ВидаПроформы. 
// 
&НаСервере
Процедура ВыполнитьКопированиеШаблонов()

	флВыполнено = Записать();
	
	Если флВыполнено Тогда
		
		// Получение таблицы значений реквизитов шаблонов, которая понадобится в дальшейшем при копировании шаблонов.
		МассивШаблонов = ВидПроформыИсточник.НастройкиДвижений.ВыгрузитьКолонку("ШаблонДвижений");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивШаблонов", МассивШаблонов);
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений,
		               |	бит_ЗначенияРеквизитовШаблонов.Реквизит,
		               |	бит_ЗначенияРеквизитовШаблонов.НомерДвижения,
		               |	бит_ЗначенияРеквизитовШаблонов.Значение
		               |ИЗ
		               |	РегистрСведений.бит_ЗначенияРеквизитовШаблонов КАК бит_ЗначенияРеквизитовШаблонов
		               |ГДЕ
		               |	бит_ЗначенияРеквизитовШаблонов.ШаблонДвижений В(&МассивШаблонов)";
					   
		Результат = Запрос.Выполнить();
		
		ТаблицаРеквизитыШаблонов = Результат.Выгрузить();
		
		Для каждого СтрокаТаблицы Из ВидПроформыИсточник.НастройкиДвижений Цикл
		
			 ШаблонОбъект = СтрокаТаблицы.ШаблонДвижений.Скопировать();
			 ШаблонОбъект.ВидПроформы = Объект.Ссылка;
			 ШаблонОбъект.УстановитьНовыйКод();
			 бит_МеханизмХозяйственныхОперацийСервер.ПолучитьНаименованиеШаблонаДвиженийНаСервере(ШаблонОбъект);
			 
			 флЗаписан = бит_ОбщегоНазначения.ЗаписатьСправочник(ШаблонОбъект,,"Ошибки");
			 
			 Если флЗаписан  Тогда
				 
				НовыйШаблон = ШаблонОбъект.Ссылка; 
				
				// Копирование значений реквизитов шаблона
				СтрОтбор = Новый Структура("ШаблонДвижений", СтрокаТаблицы.ШаблонДвижений);
				
				МассивСтрок = ТаблицаРеквизитыШаблонов.НайтиСтроки(СтрОтбор);
				
				Если МассивСтрок.Количество() > 0 Тогда
				
					 НаборНовый = РегистрыСведений.бит_ЗначенияРеквизитовШаблонов.СоздатьНаборЗаписей();
	                 НаборНовый.Отбор.ШаблонДвижений.Установить(НовыйШаблон);
					 
					 Для каждого СтрокаТаблицы Из МассивСтрок Цикл
					 
					 	Запись = НаборНовый.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
						Запись.ШаблонДвижений = НовыйШаблон;
					 
					 КонецЦикла; 
					 
					 бит_ОбщегоНазначения.ЗаписатьНаборЗаписейРегистра(НаборНовый, "Ошибки");
					 
				КонецЕсли; 
				
				// Добавление в вид проформы ссылки на скопированный шаблон.
			 	НоваяСтрока = Объект.НастройкиДвижений.Добавить();
				НоваяСтрока.ШаблонДвижений = НовыйШаблон;
				НоваяСтрока.Активность     = Истина;
				
			 КонецЕсли; 
			 
		КонецЦикла; 
		
		Записать();
		
	КонецЕсли; 

КонецПроцедуры // ВыполнитьКопированиеШаблонов() 

// Процедура обновляет настройки отбора/порядка.
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.бит_ВидыПроформ.
// 
&НаСервере
Процедура ОбновитьНастройкиОтбораПорядка(ТекущийОбъект)
	
	Для каждого СтрокаТаблицы Из ТекущийОбъект.НастройкиРеквизитов Цикл
		
		Если СтрокаТаблицы.НастройкиУстановлены Тогда
			
			СтрНастр = СтрокаТаблицы.ХранилищеНастроек.Получить();
			
			Если ТипЗнч(СтрНастр) = Тип("Структура") Тогда
				
				КлючСтруктуры = бит_ОбщегоНазначенияКлиентСервер.КлючСтруктурыИзИД(СтрокаТаблицы.КлючСвязи);
				НастройкиОтборПорядок.Вставить(КлючСтруктуры, СтрНастр);
				
				// Обновление представления настроек
				СтрОтбор = Новый Структура("КлючСвязи", СтрокаТаблицы.КлючСвязи);
				
				МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
				Для каждого СтрДанныеФормы Из МассивСтрок Цикл
					
					СтрДанныеФормы.ОтборПорядок = СтрНастр.ПредставлениеНастроек;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьНастройкиОтбораПорядка() 

// Процедура выполняет сдвиг строки дерева и связанной 
// со строкой дерева строки табличной части.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементДерева.
//  Сдвиг - Число.
// 
&НаКлиенте
Процедура СдвинутьСтрокуДерева(ТекущаяСтрока, Сдвиг)	
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
		
		Если НЕ СтрокаРодитель = Неопределено Тогда
			
			Коллекция = СтрокаРодитель.ПолучитьЭлементы();
			
			ТекИндекс = Коллекция.Индекс(ТекущаяСтрока);
			РезИндекс = ТекИндекс+Сдвиг;
			
			Если РезИндекс >= 0 И РезИндекс <= (Коллекция.Количество()-1) Тогда
				
				// Сдвиг строки дерева
				Коллекция.Сдвинуть(Коллекция.Индекс(ТекущаяСтрока),Сдвиг);
				
				СтрОтбор = Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
				МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
				
				Если МассивСтрок.Количество() > 0 Тогда
					
					// Сдвиг строки табличной части, связанной с деревом.
					СтрокаТаблицы = МассивСтрок[0];
					ИндексСтрокиТаблицы = Объект.НастройкиРеквизитов.Индекс(СтрокаТаблицы);
					Объект.НастройкиРеквизитов.Сдвинуть(ИндексСтрокиТаблицы,Сдвиг);
					Модифицированность = Истина;
					
				КонецЕсли; // МассивСтрок.Количество() > 0
				
			КонецЕсли; // Индекс входит в интервал
			
		КонецЕсли; // НЕ СтрокаРодитель = Неопределено
		
	КонецЕсли; // НЕ ТекущаяСтрока = Неопределено
	
КонецПроцедуры // СдвинутьСтрокуДерева()

// Процедура синхронизирует значение из реквизита "ПалитрыСвойств" 
// и строки табличной части НастройкиРеквизитов.
// 
// Параметры:
//  Имя - Строка.
//  Значение - Произвольный.
// 
&НаКлиенте
Процедура ИзменитьСвойство(Имя, Значение)

	Если ЗначениеЗаполнено(Свойства_КлючСвязи) Тогда
	
		СтрОтбор = Новый Структура("КлючСвязи", Свойства_КлючСвязи);
		МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
		
		ИмяРеквизита = СтрЗаменить(Имя,"Свойства_","");
		
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		
			СтрокаТаблицы[ИмяРеквизита] = Значение;
		
		КонецЦикла; 
		
		Модифицированность = Истина;
		
	КонецЕсли; 

КонецПроцедуры // ИзменитьСвойство()

// Процедура обработчик-ожидания активизации строки дерева.
// 
&НаКлиенте
Процедура ОжиданиеАктивизацииСтрокиДерева()
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		// Очистка свойств
		Для каждого Элемент Из СписокЭлементыПанели Цикл
			
			ЭтотОбъект[Элемент.Значение] = Неопределено;
			
		КонецЦикла;	

		ЭтоПредопред = ?(ТекущаяСтрока.ВидУзла = "Реквизиты" ИЛИ ТекущаяСтрока.ВидУзла = "ТабличныеЧасти", Истина, Ложь);
		ЭтоТабЧасть  = ?(ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть", Истина, Ложь);
		
		СтрОтбор = Новый Структура("КлючСвязи", ТекущаяСтрока.КлючСвязи);
		
		МассивСтрок = Объект.НастройкиРеквизитов.НайтиСтроки(СтрОтбор);
		
		// Отображение свойств для текущей строки
		Для каждого СтрокаТаблицы Из МассивСтрок Цикл
			
			Свойства_КлючСвязи = ТекущаяСтрока.КлючСвязи;
			
			Для каждого Элемент Из СписокСинхронизации Цикл
				
				ИмяРеквФормы = "Свойства_"+Элемент.Значение;
				ЭтотОбъект[ИмяРеквФормы] = СтрокаТаблицы[Элемент.Значение];
				
			КонецЦикла; 
			
			Если НЕ Свойства_СтрТип = "ТабличнаяЧасть" Тогда
				
				Свойства_Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(Свойства_СтрТип,,Новый ОписаниеТипов("Строка"));
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Управление доступностью элементов панели свойств в зависимости от ВидаУзла.
		Для каждого Элемент Из СписокЭлементыПанели Цикл
			
			ИмяРеквФормы = Элемент.Значение;
			
			Если ЭтоПредопред Тогда
				
				флДоступность = Ложь;
				
			ИначеЕсли ЭтоТабЧасть Тогда
				
				Если ИмяРеквФормы = "Свойства_Имя" 
					 ИЛИ ИмяРеквФормы = "Свойства_Синоним" Тогда
					 
					флДоступность = Истина; 
					 
				Иначе	
					
					флДоступность = Ложь;
					
				КонецЕсли; 
				
			Иначе
				
				флДоступность = Истина;
				
			КонецЕсли; 
			
			Элементы[ИмяРеквФормы].Доступность = флДоступность;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // ОжиданиеАктивизацииСтроки()

// Процедура - обработчик ожидания необходимости выполнения копирования шаблонов движений. 
// 
&НаКлиенте
Процедура ОжиданиеНеобходимостиКопирования()

	ТекстВопроса = НСтр("ru = 'Выполнить копирование шаблонов движений? Элемент при этом будет записан.'");
	Оповещение = Новый ОписаниеОповещения("ОжиданиеНеобходимостиКопированияОкончание", ЭтотОбъект); 
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 

КонецПроцедуры // ОжиданиеНеобходимостиКопирования() 

// Процедура окончание процедуры "ОжиданиеНеобходимостиКопирования".
// 
&НаКлиенте 
Процедура ОжиданиеНеобходимостиКопированияОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
	
		 ВыполнитьКопированиеШаблонов();
		 ОповеститьОбИзменении(Объект.Ссылка);
		 
	КонецЕсли; 
	
	мИмяПроформы = Объект.Имя;
	
КонецПроцедуры // ОжиданиеНеобходимостиКопированияОкончание()

// Функция проверяет допустимость использования имен.
// 
// Параметры:
//  вхИмя - Строка
//  ВидУзла - Строка
// 
// Возвращаемое значение:
//  флДопустимое - Булево.
// 
&НаКлиенте
Функция ЭтоДопустимоеИмя(вхИмя, ВидУзла)

	флДопустимое = Истина;
	
	Если ВидУзла = "Реквизит" И НЕ СписокЗапрещенные.НайтиПоЗначению(вхИмя) = Неопределено Тогда
	
		флДопустимое = Ложь;
	
	КонецЕсли; 
	
	Попытка
	
		СтрТест = Новый Структура;
		СтрТест.Вставить(ВхИмя);
	
	Исключение
		
		флДопустимое = Ложь;		
		
	КонецПопытки;
	
	
	Возврат флДопустимое;
	
КонецФункции // ЭтоДопустимоеИмя()

// Функция проверяет по строковому представлению является ли данный тип ссылочным.
// 
// Параметры:
//  СтрТип - Строка.
// 
// Возвращаемое значение:
//  флСсылочный - Булево.
// 
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСсылочныйТип(СтрТип)

	Если Найти(СтрТип,"Ссылка") > 0  Тогда
		
		флСсылочный = Истина;
		
	Иначе	
		
		флСсылочный = Ложь;
		
	КонецЕсли; 

	Возврат флСсылочный;
	
КонецФункции // ЭтоСсылочныйТип()

// Функция формируем синоним по имени.
// 
// Параметры:
//  Имя - Строка
// 
// Возвращаемое значение:
//  СтрСиноним - Строка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция АвтоФормированиеСинонима(Имя)
	
	СтрСиноним = "";
	
	КолСимволов = СтрДлина(Имя);
	
	Для н = 1 По КолСимволов Цикл
		
		ТекСимвол = Сред(Имя,н,1);
		
		Если н > 1 И ВРег(ТекСимвол) = ТекСимвол Тогда
			
			СтрСиноним = СтрСиноним+" "+НРег(ТекСимвол);
			
		Иначе
			
			СтрСиноним = СтрСиноним+ТекСимвол;
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат СтрСиноним;
	
КонецФункции // АвтоФормированиеСинонима()

// Функция выполняет поиск элемента в коллекции элементов дерева по имени.
// 
// Параметры:
//  КоллекцияЭлементов - ДанныеФормыКоллекцияЭлементовДерева.
// 
// Возвращаемое значение:
//  РезЭлДерева - ДанныеФормыЭлементДерева.
// 
&НаКлиентеНаСервереБезКонтекста
Функция НайтиЭлементПоИмени(КоллекцияЭлементов, Имя)
	
	РезЭлДерева = Неопределено;
	
	Для каждого ЭлДерева Из КоллекцияЭлементов Цикл
		
		Если ЭлДерева.Имя = Имя Тогда
			
			 РезЭлДерева = ЭлДерева;
			 Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат РезЭлДерева;
	
КонецФункции // НайтиЭлементПоИмени()

// Функция создает элемент ДереваНастройка.
// 
// Параметры:
//  Коллекция - ДанныеФормыКоллекцияЭлементовДерева.
//  Имя       - Строка.
//  ВидУзла   - Строка.
//  КлючСвязи - Строка.
//  Картинка  - Картинка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СоздатьЭлементДерева(Коллекция, Имя, ВидУзла, КлючСвязи, Картинка, ТолькоПросмотр = Ложь, ЕстьСсылки = Ложь)
	
	НовыйЭлемент = Коллекция.Добавить();
	НовыйЭлемент.Имя       = Имя;
	НовыйЭлемент.ВидУзла   = ВидУзла;
	НовыйЭлемент.КлючСвязи = КлючСвязи;
	
	Если ЗначениеЗаполнено(Картинка) Тогда
		
		НовыйЭлемент.Картинка = Картинка;
		
	КонецЕсли; 
	
	НовыйЭлемент.ТолькоПросмотр = ТолькоПросмотр;
	НовыйЭлемент.ЕстьСсылки     = ЕстьСсылки;
	
	Возврат НовыйЭлемент;
	
КонецФункции // СоздатьЭлементДерева()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНастройки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНастройки.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоНастройкиИмя.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНастройки.ЕстьСсылки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветПустойГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти
