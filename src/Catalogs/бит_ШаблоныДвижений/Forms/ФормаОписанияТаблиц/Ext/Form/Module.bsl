
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущееИмя; // Служит для передачи редактируемого имени между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработатьПараметрыВызоваФормы();
	ЗаполнитьКэшЗначений();
    
    // Формирование дерева ДеревоНастройки
	ОбновитьДерево();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНастройки

&НаКлиенте
Процедура ДеревоНастройкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если НЕ Копирование Тогда
		
		Если ТекущаяСтрока.ВидУзла = "ТабличныеЧасти" Тогда
			
			ВидУзлаНовойСтроки = "ТабличнаяЧасть";
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда
			
			ДобавитьСтрокуРеквизитТабЧасти(ТекущаяСтрока.Имя);
			Отказ = Истина;
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "РеквизитТабличнойЧасти" Тогда
			
			ДобавитьСтрокуРеквизитТабЧасти(ТекущаяСтрока.ПолучитьИдентификатор());
			Отказ = Истина;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли; 
		
	Иначе	
		
		Если ТекущаяСтрока.ВидУзла = "ТабличныеЧасти"  Тогда
			
			// Группировочные строки копировать нельзя
			Отказ = Истина;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;	
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
		ТекущаяСтрока.ВидУзла = ВидУзлаНовойСтроки;
		ТекущаяСтрока.КлючСвязи = Строка(Новый УникальныйИдентификатор);
		
		Если ТекущаяСтрока.ВидУзла = "ТабличныеЧасти" Тогда
			
			ТекущаяСтрока.Картинка = фКэшЗначений.БиблиотекаКартинок.бит_ВремТаб;
			
		ИначеЕсли ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда	
			
			ТекущаяСтрока.Картинка = фКэшЗначений.БиблиотекаКартинок.бит_ТабличнаяЧасть;			
			
		КонецЕсли; 
		
		ВидУзлаНовойСтроки = "";
		
	КонецЕсли; 
	
	мТекущееИмя = ТекущаяСтрока.Имя;
	
	// Сообщить("ПриНачалеРедактирования");
	
	ДеревоНастройкиПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если НЕ ЭтоДопустимоеИмя(ТекущаяСтрока.Имя, ТекущаяСтрока.ВидУзла) Тогда
		
		
		ТекстВопроса = НСтр("ru = 'Введено недопустимое имя! Продолжить редактирование?'");
		ОписаниеОповоещения = Новый ОписаниеОповещения("ДеревоНастройкиПередОкончаниемРедактированияЗавершение",
								ЭтотОбъект, Отказ);
		ПоказатьВопрос(ОписаниеОповоещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);						
	КонецЕсли;
	
КонецПроцедуры

// Завершение немодального вызова "ДеревоНастройкиПередОкончаниемРедактирования".
//
// Параметры:
//  Результат	 - РежимДиалогаВопрос	 - ответ пользователя.
//  ДопПараметры - Структура	 - доп. иформация.
//
&НаКлиенте
Процедура ДеревоНастройкиПередОкончаниемРедактированияЗавершение(Результат,  ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Продолжаем редактирование имени
		ДопПараметры = Истина;
	Иначе
		// Возврат к исходному имени
		Элементы.ДеревоНастройки.ТекущиеДанные.Имя = мТекущееИмя;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	// ОкончаниеРедактированияСтрокиДерева(ТекущаяСтрока.ПолучитьИдентификатор(), мТекущееИмя);
	// ОжиданиеАктивизацииСтрокиДерева();
	// ДеревоНастройкиПриАктивизацииСтроки(Элемент);
	
	Если ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда
		
		// Автоматом имя, если не заполнено
		Если ТекущаяСтрока.ВидТаблицы = "" Тогда
			ТекущаяСтрока.ВидТаблицы = "ТаблицаЗначений";
		КонецЕсли;
		
		ПриИзмененииИмениТаблицы(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВидУзла = "ТабличныеЧасти" или ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоНастройкиКодИнициализации.Доступность 	= Ложь;
	Элементы.ДеревоНастройкиКодИнициализации1.Доступность 	= Ложь;
	
	Если ТекущаяСтрока.ВидУзла = "ТабличныеЧасти" Тогда
		
		Элементы.ГруппаТипВид.ТекущаяСтраница = Элементы.ГруппаПусто;
		
	ИначеЕсли ТекущаяСтрока.ВидУзла = "ТабличнаяЧасть" Тогда
		
		Элементы.ГруппаТипВид.ТекущаяСтраница = Элементы.ГруппаВид;
		Элементы.ДеревоНастройкиКодИнициализации1.Доступность 	= Истина;
		Элементы.ДеревоНастройкиКодИнициализации.Доступность	= Истина;
		
	ИначеЕсли ТекущаяСтрока.ВидУзла = "РеквизитТабличнойЧасти" Тогда
		
		Элементы.ГруппаТипВид.ТекущаяСтраница = Элементы.ГруппаТип;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиВидТаблицыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	ПриИзмененииВидаТаблицы(ТекущаяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	РезСтр = ПолучитьОписаниеТаблицСтруктурой();
	
	Отказ = Ложь;
	Для каждого ОписаниеТаблицы Из РезСтр.МассивОписанияТаблиц Цикл
	
		Если ОписаниеТаблицы.Реквизиты.Количество() = 0 Тогда
		
			Отказ = Истина;
			ТекстСообщения =  НСтр("ru = 'Необходимо добавить описание колонок таблицы ""%1%"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеТаблицы.Имя);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если НЕ Отказ Тогда
		
		Закрыть(РезСтр);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Закрыть_(Команда)
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкиПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВидУзла = "ТабличныеЧасти"  Тогда
		
		// Данные строки удалять нельзя
		Отказ = Истина;
		
	КонецЕсли;
    	
КонецПроцедуры

&НаКлиенте
Процедура КодИнициализации(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоНастройки.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормыИнициализации = Новый Структура("ИмяТаблицы, КодИнициализации", ТекущаяСтрока.Имя, ТекущаяСтрока.КодИнициализации);
	
	Обработчик    = Новый ОписаниеОповещения("ОкончаниеРедактированияКода", ЭтотОбъект);//, Неопределено);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.бит_ШаблоныДвижений.Форма.ФормаРедактированияКода", ПараметрыОткрытияФормыИнициализации, ЭтаФорма, , , , Обработчик, РежимОткрытия);
	
КонецПроцедуры

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте
Процедура ОкончаниеРедактированияКода(ПараметрыИнициализации, ВходящийКонтекст) Экспорт
	
	Если ПараметрыИнициализации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы 			= ПараметрыИнициализации.ИмяТаблицы;
	КодИнициализации    = ПараметрыИнициализации.КодИнициализации;
	
	ТекущаяСтрока       = Элементы.ДеревоНастройки.ТекущиеДанные;
	ТекущаяСтрока.КодИнициализации = КодИнициализации;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	СтрКартинки = Новый Структура;
	СтрКартинки.Вставить("бит_Реквизит"      	,БиблиотекаКартинок.бит_Реквизит);
	СтрКартинки.Вставить("бит_Реквизиты"     	, БиблиотекаКартинок.бит_Реквизиты);
	СтрКартинки.Вставить("бит_ТабличнаяЧасть"	, БиблиотекаКартинок.бит_ТабличнаяЧасть);
	СтрКартинки.Вставить("бит_ВремТаб"			, БиблиотекаКартинок.бит_ВременныеТаблицы);
	
	фКэшЗначений.Вставить("БиблиотекаКартинок", СтрКартинки);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ОбработатьПараметрыВызоваФормы()
	
	Если Параметры.Свойство("ОписаниеТаблиц") Тогда
		Если ТипЗнч(Параметры.ОписаниеТаблиц) = Тип("Структура") Тогда
			ОписаниеТаблиц = Параметры.ОписаниеТаблиц;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет дерево ДеревоНастройки. 
// Восстанавливаются данные из табличной части НастройкиРеквизитов.
// 
&НаСервере
Процедура ОбновитьДерево()

	КоллекцияЭлементов = ДеревоНастройки.ПолучитьЭлементы();
	КоллекцияЭлементов.Очистить();
	
	// Обязательная строка - корень коллекции табличных частей.
	ЭлементТабЧасти = СоздатьЭлементДерева(КоллекцияЭлементов
	                                       , "Описание произвольных таблиц"
										   , "ТабличныеЧасти"
										   , "ТабличныеЧасти"
										   , фКэшЗначений.БиблиотекаКартинок.бит_ВремТаб
										   , Истина);
										   
	Если ТипЗнч(ОписаниеТаблиц) = Тип("Структура") Тогда
		
		ОписаниеТаблицМассив = ОписаниеТаблиц.МассивОписанияТаблиц;
		
		Для Каждого ОписаниеТаблицы Из ОписаниеТаблицМассив Цикл									   
			ДобавитьТаблицуВОписаниеНаСервере(ОписаниеТаблицы, ЭлементТабЧасти.ПолучитьЭлементы());
		КонецЦикла;
		
	КонецЕсли;										   

	Элементы.ДеревоНастройки.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецПроцедуры // ОбновитьДерево()

&НаСервере
Процедура ДобавитьТаблицуВОписаниеНаСервере(ОписаниеТаблицы, КоллекцияТабЧасти)
	
	Если ТипЗнч(ОписаниеТаблицы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим описание таблицы
	ЭлементТабЧасть = СоздатьЭлементДерева(КоллекцияТабЧасти
	, ОписаниеТаблицы.Имя
	, "ТабличнаяЧасть"
	, ""
	, БиблиотекаКартинок.бит_ТабличнаяЧасть
	, Ложь
	, Ложь);
	
	ЭлементТабЧасть.ВидТаблицы 			= ОписаниеТаблицы.Вид;
	ЭлементТабЧасть.КодИнициализации 	= ОписаниеТаблицы.КодИнициализации;
	
	КоллекцияТабЧасть = ЭлементТабЧасть.ПолучитьЭлементы();
	
	// Заполним реквизиты
	Для Каждого ОписаниеРеквизита Из ОписаниеТаблицы.Реквизиты Цикл
		
		Реквизит = ОписаниеРеквизита;
		
		ЭлементРеквизит = СоздатьЭлементДерева(КоллекцияТабЧасть
		, Реквизит.Имя
		, "РеквизитТабличнойЧасти"
		, ""
		, БиблиотекаКартинок.бит_Реквизит
		, Ложь
		, Ложь);
		
		ЭлементРеквизит.Тип = Реквизит.Тип;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает элемент ДереваНастройка.
// 
// Параметры:
//  Коллекция - ДанныеФормыКоллекцияЭлементовДерева.
//  Имя       - Строка.
//  ВидУзла   - Строка.
//  КлючСвязи - Строка.
//  Картинка  - Картинка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СоздатьЭлементДерева(Коллекция, Имя, ВидУзла, КлючСвязи, Картинка, ТолькоПросмотр = Ложь, ЕстьСсылки = Ложь)
	
	НовыйЭлемент = Коллекция.Добавить();
	НовыйЭлемент.Имя       = Имя;
	НовыйЭлемент.ВидУзла   = ВидУзла;
	НовыйЭлемент.КлючСвязи = КлючСвязи;
	
	Если ЗначениеЗаполнено(Картинка) Тогда
		
		НовыйЭлемент.Картинка = Картинка;
		
	КонецЕсли; 
	
	НовыйЭлемент.ТолькоПросмотр = ТолькоПросмотр;
	НовыйЭлемент.ЕстьСсылки     = ЕстьСсылки;
	
	Возврат НовыйЭлемент;
	
КонецФункции // СоздатьЭлементДерева()

// Процедура добавляет строку дерева, описывающую реквизит табличной части. 
// 
// Параметры:
//  ИдСтроки - Число - Идентификатор строки, описывающей табличную часть.
// 
&НаСервере
Процедура ДобавитьСтрокуРеквизитТабЧасти(ИдСтроки)
	
	// Определим имя табличной части, в которую нужно добавить реквизит.
	ИмяТабЧасти = "";
	
	Если ТипЗнч(ИдСтроки) = Тип("Число") Тогда
		ТекущаяСтрока = ДеревоНастройки.НайтиПоИдентификатору(ИдСтроки);
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
			ИмяТабЧасти = СтрокаРодитель.Имя;
			
		КонецЕсли; 
	Иначе	
		ИмяТабЧасти = ИдСтроки;
	КонецЕсли; 
	
	// Добавление строки дерева
	Если НЕ ПустаяСтрока(ИмяТабЧасти) Тогда
		
		// Поиск строки "ТабличныеЧасти"
		КоллекцияЭлементов = ДеревоНастройки.ПолучитьЭлементы();
		ЭлТабЧасти = НайтиЭлементПоИмени(КоллекцияЭлементов, "Описание произвольных таблиц");
		
		Если НЕ ЭлТабЧасти = Неопределено Тогда
			
			// Поиск таб. части по имени
			КоллекцияЭлементов = ЭлТабЧасти.ПолучитьЭлементы();
			ЭлТабЧасть = НайтиЭлементПоИмени(КоллекцияЭлементов, ИмяТабЧасти);
			
			Если НЕ ЭлТабЧасть = Неопределено Тогда
				
				// Добавление новой строки дерева
				КоллекцияЭлементов = ЭлТабЧасть.ПолучитьЭлементы();
				
				НовыйЭл = КоллекцияЭлементов.Добавить();
				НовыйЭл.ВидУзла  = "РеквизитТабличнойЧасти";
				НовыйЭл.Картинка = БиблиотекаКартинок.бит_Реквизит;
				НовыйЭл.КлючСвязи = Строка(Новый УникальныйИдентификатор);
				
				Элементы.ДеревоНастройки.ТекущаяСтрока = НовыйЭл.ПолучитьИдентификатор();
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьРеквизит()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиЭлементПоИмени(КоллекцияЭлементов, Имя)
	
	РезЭлДерева = Неопределено;
	
	Для каждого ЭлДерева Из КоллекцияЭлементов Цикл
		
		Если ЭлДерева.Имя = Имя Тогда
			
			 РезЭлДерева = ЭлДерева;
			 Прервать;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат РезЭлДерева;
	
КонецФункции // НайтиЭлементПоИмени()

// Функция проверяет допустимость использования имен.
// 
// Параметры:
//  вхИмя - Строка
//  ВидУзла - Строка
// 
// Возвращаемое значение:
//  флДопустимое - Булево.
// 
&НаКлиенте
Функция ЭтоДопустимоеИмя(вхИмя, ВидУзла)

	флДопустимое = Истина;
	
	Если ВидУзла = "Реквизит" И НЕ СписокЗапрещенные.НайтиПоЗначению(вхИмя) = Неопределено Тогда
	
		флДопустимое = Ложь;
	
	КонецЕсли; 

	РезСтрока = бит_ОбщегоНазначенияКлиентСервер.ПроверитьСпецСимволы(вхИмя, " ,;:[]{}'""/\?!@#%^&*+=<>~`|№", "Имя");
	
	Если НЕ РезСтрока = ВхИмя Тогда
	
		флДопустимое = Ложь;
	
	КонецЕсли; 
	
	Возврат флДопустимое;
	
КонецФункции // ЭтоДопустимоеИмя()

&НаКлиенте
Процедура ПриИзмененииВидаТаблицы(ИД_Строки)
	
	ТекущаяСтрока = ДеревоНастройки.НайтиПоИдентификатору(ИД_Строки);
	
	Если ТекущаяСтрока.ВидТаблицы = "ТабличнаяЧасть" Тогда // Табличная часть
		ТекущаяСтрока.Имя = СтрЗаменить(СтрЗаменить(ТекущаяСтрока.Имя, "$", ""), "()", "");
	ИначеЕсли ТекущаяСтрока.ВидТаблицы = "ТаблицаЗначений" Тогда // Таблица значений
		ТекущаяСтрока.Имя = СтрЗаменить(СтрЗаменить(ТекущаяСтрока.Имя, "$", ""), "()", "");
		ТекущаяСтрока.Имя = "$" + ТекущаяСтрока.Имя;
	Иначе // Выборка
		ТекущаяСтрока.Имя = СтрЗаменить(СтрЗаменить(ТекущаяСтрока.Имя, "$", ""), "()", "");
		ТекущаяСтрока.Имя = "$" + ТекущаяСтрока.Имя + "()";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИмениТаблицы(ИД_Строки)
	
	ТекСтрока = ДеревоНастройки.НайтиПоИдентификатору(ИД_Строки);
		
	Если Найти(ТекСтрока.Имя, "$") <> 0 и Найти(ТекСтрока.Имя, "()") <> 0 Тогда // Выборка
		
		ТекСтрока.ВидТаблицы = "Выборка";
		
	ИначеЕсли Найти(ТекСтрока.Имя, "$") <> 0 Тогда 	// Таблица значений
		
		ТекСтрока.ВидТаблицы = "ТаблицаЗначений";
		
	ИначеЕсли Найти(ТекСтрока.Имя, "()") <> 0 Тогда 	// Такого не должно быть, необходимо добавить "$" и это выборка.
		
		ТекСтрока.Имя = "$" + ТекСтрока.Имя;
		ПриИзмененииИмениТаблицы(ИД_Строки);
		
	Иначе
		
		// Табличная часть
		ТекСтрока.ВидТаблицы = "ТабличнаяЧасть";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеТаблицСтруктурой()
	
	СписокТаблиц.Очистить();
	
	ОписаниеТаблицМасс = Новый Массив;
		
	// Получим корневой элемент
	ВремТаблицы = НайтиЭлементПоИмени(ДеревоНастройки.ПолучитьЭлементы(), "Описание произвольных таблиц");
	Таблицы 	= ВремТаблицы.ПолучитьЭлементы();	
	
	Для Каждого Таблица Из Таблицы Цикл
		
		СписокТаблиц.Добавить(Таблица.Имя);
		
		ЭлементОписанияТаблицы = Новый Структура("Имя, Вид, Реквизиты, КодИнициализации");
		ЭлементОписанияТаблицы.Имя 				= Таблица.Имя;
		ЭлементОписанияТаблицы.Вид 				= Таблица.ВидТаблицы;
		ЭлементОписанияТаблицы.КодИнициализации = Таблица.КодИнициализации;
		
		ОписаниеРеквизитов = Новый Массив;
		
		СтрокиРеквизитов = Таблица.ПолучитьЭлементы();
		
		Для Каждого СтрокаРеквизита Из СтрокиРеквизитов Цикл
			
			ОписаниеРеквизита = Новый Структура("Имя, Синоним, Тип"
												, СтрокаРеквизита.Имя
												, СтрокаРеквизита.Имя
												, СтрокаРеквизита.Тип);
												
			ОписаниеРеквизитов.Добавить(ОписаниеРеквизита);
			
		КонецЦикла;
		
		ЭлементОписанияТаблицы.Реквизиты = ОписаниеРеквизитов;
		
		ОписаниеТаблицМасс.Добавить(ЭлементОписанияТаблицы);
		
	КонецЦикла;
	
	Возврат Новый Структура("МассивОписанияТаблиц, СписокТаблиц", ОписаниеТаблицМасс, СписокТаблиц.ВыгрузитьЗначения());
	
КонецФункции

#КонецОбласти
