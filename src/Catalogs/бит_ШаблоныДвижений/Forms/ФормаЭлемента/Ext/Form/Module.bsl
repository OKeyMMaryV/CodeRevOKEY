
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Об = РеквизитФормыВЗначение("Объект");
		Об.УстановитьНовыйКод();
		ЗначениеВРеквизитФормы(Об, "Объект");
		
	КонецЕсли;
	
	ЗаполнитьКэшЗначенийНаСервере();
	
	Элементы.ГруппаСтраницыШаблона.ТекущаяСтраница = Элементы.СтраницаШаблонДвижений;
	
	ОбновитьДоступностьПроформНаСервере();
	
	ЗагрузитьСтруктуруДопТаблицИзТЧНаСервере();
	
	Если ЗначениеЗаполнено(Объект.Регистр) Тогда
		
		СоздатьКолонкиИЗаполнитьДвиженияНаСервере();	
		
	КонецЕсли; 
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если не заполнены "Регистр" и "ВидДокумента" - необходимо предложить их выбрать пользователю.
	бит_МеханизмХозяйственныхОперацийКлиент.ЗаполнитьРегистрДляШаблонаДвижений(Объект, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидРеквизитаДвижений_Завершение() Экспорт // ВыбранныйРегистр, ДопПараметры
	
	// Удалить в совместимо.
	СоздатьКолонкиИЗаполнитьДвиженияНаСервере();
		
КонецПроцедуры // ВыбратьВидРеквизитаДвижений_Завершение()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Необходимо записать текущие значения реквизитов движений для данного шаблона.
	бит_МеханизмХозяйственныхОперацийСервер.ЗаписатьЗначенияРеквизитовДвиженийШаблона(Объект.Ссылка
																					  , Объект.Регистр
																					  , ПолеДвижения.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегистрПриИзменении(Элемент)
	
	ТекстСообщения = НСтр("ru = 'Шаблон проводок будет очищен. Продолжить?'");
	ОписаниеОповоещения = Новый ОписаниеОповещения("РегистрПриИзмененииЗавершение",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповоещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Процедура - Регистр при изменении завершение.
//
// Параметры:
//  Результат	 - РежимДиалогаВопрос	 - выбор пользователя.
//  ДопПараметры - произвольный - что придется.
//
&НаКлиенте
Процедура РегистрПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьДинамическиеКолонкиНаСервере();
	КонецЕсли;
	
	бит_МеханизмХозяйственныхОперацийКлиент.ПолучитьНаименованиеШаблонаДвижений(Объект);

КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	бит_МеханизмХозяйственныхОперацийКлиент.ПолучитьНаименованиеШаблонаДвижений(Объект);
	ОбновитьДоступностьПроформ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УсловияОтбора = Новый Структура;
	УсловияОтбора.Вставить("ВидОбъекта", фКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", УсловияОтбора);
	ОткрытьФорму("Справочник.бит_ОбъектыСистемы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолеДвижения

&НаКлиенте
Процедура ПолеДвиженияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КоманднаяПанельДвиженияСкопироватьЗначение(Команда)
	
	ТекущиеДанные = Элементы.ПолеДвижения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Будет выполнено копирование значения ячейки
								|по всем строкам текущей колонки. Продолжить?'");
	
	Оповещение = Новый ОписаниеОповещения("СкопироватьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет, "Копирование значения");
	
КонецПроцедуры

// Процедура окончание процедуры КоманднаяПанельДвиженияСкопироватьЗначение. 
//
// Параметры:
//  Ответ - КодВозвратаДиалога.
//  ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура СкопироватьЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные = Элементы.ПолеДвижения.ТекущиеДанные;
		
		ИмяКолонки = Элементы.ПолеДвижения.ТекущийЭлемент.Имя;
		
		ЗначениеДляКопирования = ТекущиеДанные[ИмяКолонки];
		
		Для Каждого ТекСтрока Из ПолеДвижения Цикл
			ТекСтрока[ИмяКолонки] = ЗначениеДляКопирования;
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // СкопироватьЗавершение()

&НаКлиенте
Процедура КоманднаяПанельДвиженияСкопироватьЗначениеВверх(Команда)
	
	ТекущиеДанные = Элементы.ПолеДвижения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Будет выполнено копирование значения ячейки
	|по строкам текущей колонки вверх. Продолжить?'");
	
	ОписаниеОповоещения = Новый ОписаниеОповещения("КоманднаяПанельДвиженияСкопироватьЗначениеВверхЗавершение",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповоещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15,
					КодВозвратаДиалога.Нет, НСтр("ru = 'Копирование значения'"));
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура КоманднаяПанельДвиженияСкопироватьЗначениеВверхЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные = Элементы.ПолеДвижения.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяКолонки 				= Элементы.ПолеДвижения.ТекущийЭлемент.Имя;
		ЗначениеДляКопирования 	= ТекущиеДанные[ИмяКолонки];
		
		Для Каждого ТекСтрока Из ПолеДвижения Цикл
			
			ТекСтрока[ИмяКолонки] = ЗначениеДляКопирования;
			
			Если ТекСтрока.ПолучитьИдентификатор() = ТекущиеДанные.ПолучитьИдентификатор() Тогда
				 // Дальше заполнять нельзя.
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры
 
&НаКлиенте
Процедура КоманднаяПанельДвиженияСкопироватьЗначениеВниз(Команда)
	
	ТекущиеДанные = Элементы.ПолеДвижения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Будет выполнено копирование значения ячейки
	|по строкам текущей колонки вниз. Продолжить?'");
	
	ОписаниеОповоещения = Новый ОписаниеОповещения("КоманднаяПанельДвиженияСкопироватьЗначениеВнизЗавершение",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповоещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15,
					КодВозвратаДиалога.Нет, НСтр("ru = 'Копирование значения'"));
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура КоманднаяПанельДвиженияСкопироватьЗначениеВнизЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные = Элементы.ПолеДвижения.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКолонки 				= Элементы.ПолеДвижения.ТекущийЭлемент.Имя;
		ЗначениеДляКопирования 	= ТекущиеДанные[ИмяКолонки];
		
		КоличествоСтрок = ПолеДвижения.Количество();
		
		Для Ном = 1 По КоличествоСтрок Цикл
			
			ТекСтрока = ПолеДвижения[КоличествоСтрок - Ном];
			
			ТекСтрока[ИмяКолонки] = ЗначениеДляКопирования;
			
			Если ТекСтрока.ПолучитьИдентификатор() = ТекущиеДанные.ПолучитьИдентификатор() Тогда
				// Дальше заполнять нельзя.
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВключитьШаблонВКомплект(Команда)
	
	Если Модифицированность Тогда
		
		ТекстСообщения = НСтр("ru = 'Будет выполнена запись шаблона. Продолжить?'");
		
		ОписаниеОповоещения = Новый ОписаниеОповещения("ВключитьШаблонВКомплектЗавершение",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповоещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 15,
						КодВозвратаДиалога.Нет, НСтр("ru = 'Включение шаблона в комплект'"));
	Иначе
		бит_МеханизмХозяйственныхОперацийКлиент.ВключитьШаблонВКомплектИнтерактивно(Объект.Ссылка, Объект.ВидДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения метода "показать вопрос".
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ВключитьШаблонВКомплектЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		бит_МеханизмХозяйственныхОперацийКлиент.ВключитьШаблонВКомплектИнтерактивно(Объект.Ссылка, Объект.ВидДокумента);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаблонАвтоматически(Команда)
	
	ПараметрыФормыАвто = Новый Структура("Регистр, Документ, ВидПроформы", Объект.Регистр, Объект.ВидДокумента, Объект.ВидПроформы);
	
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыбораПараметровАвтоматическогоЗаполнения", ЭтотОбъект);//, ПараметрыВыполнения);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.бит_ШаблоныДвижений.Форма.ФормаАвтоматическогоЗаполненияПараметров", ПараметрыФормыАвто, ЭтаФорма, , , , Обработчик, РежимОткрытия);
	
КонецПроцедуры

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте
Процедура ОбработкаВыбораПараметровАвтоматическогоЗаполнения(ПараметрыАвтозаполнения, ВходящийКонтекст) Экспорт
	
	Если ПараметрыАвтозаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПараметрыАвтозаполненияНаСервере(ПараметрыАвтозаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПроизвольныхТаблиц(Команда)
	
	ПараметрыФормыОписания = Новый Структура("ОписаниеТаблиц", ОписаниеТаблиц);
	
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыбораОписанияПроизвольныхТаблиц", ЭтотОбъект);//, ПараметрыВыполнения);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.бит_ШаблоныДвижений.Форма.ФормаОписанияТаблиц", ПараметрыФормыОписания, ЭтаФорма, , , , Обработчик, РежимОткрытия);
	
КонецПроцедуры

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте
Процедура ОбработкаВыбораОписанияПроизвольныхТаблиц(ЗначениеОписанияТаблиц, ВходящийКонтекст) Экспорт
	
	Если ЗначениеОписанияТаблиц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТаблиц = Новый Структура("МассивОписанияТаблиц", ЗначениеОписанияТаблиц.МассивОписанияТаблиц);
	ИменаДопТаблиц.ЗагрузитьЗначения(ЗначениеОписанияТаблиц.СписокТаблиц);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Определяет доступность реквизита "ВидПроформы".
// 
&НаКлиенте
Процедура ОбновитьДоступностьПроформ()
	
	Элементы.ВидПроформы.Доступность = Объект.ВидДокумента = фКэшЗначений.ОбъектДоступаПроформы и ЗначениеЗаполнено(фКэшЗначений.ОбъектДоступаПроформы); 
		
КонецПроцедуры

// Определяет доступность реквизита "ВидПроформы" на сервере.
// 
&НаСервере
Процедура ОбновитьДоступностьПроформНаСервере()
	
	Элементы.ВидПроформы.Доступность = Объект.ВидДокумента = фКэшЗначений.ОбъектДоступаПроформы и ЗначениеЗаполнено(фКэшЗначений.ОбъектДоступаПроформы); 
		
КонецПроцедуры

#КонецОбласти

// Заполняет кэш значений на сервере.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначенийНаСервере()
	
	фКэшЗначений = Новый Структура;
	
	бит_ВидыОбъектовСистемы	= бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОбъектовСистемы);
	
	КэшПеречислений = Новый Структура;
	КэшПеречислений.Вставить("бит_ВидыОбъектовСистемы"	, бит_ВидыОбъектовСистемы);
	
	фКэшЗначений.Вставить("Перечисления"				, КэшПеречислений);
	фКэшЗначений.Вставить("ТекущийПользователь"			, ПараметрыСеанса.ТекущийПользователь);
	фКэшЗначений.Вставить("ПользователиПустаяСсылка" 	, Справочники.Пользователи.ПустаяСсылка());
	
	// Найдем объект проформы
	ОбъектДоступа = бит_УправлениеОбъектамиСистемы.НайтиОбъектДоступаПоТипу("бит_Проформы", Перечисления.бит_ВидыОбъектовСистемы.Документ);
	
	фКэшЗначений.Вставить("ОбъектДоступаПроформы", ОбъектДоступа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗначениеДопРеквизита(Команда)
	
	ТекущаяСтрока = Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено и не ТекущаяСтрока.Простое Тогда
		Элементы.ДополнительныеРеквизиты.ТекущиеДанные.Значение = ПолеПроизвольныйТекст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКолонкиИЗаполнитьДвиженияНаСервере() Экспорт
	
	СоздатьДинамическиеКолонкиНаСервере();
	ЗаполнитьШаблонЗначениямиРеквизитовДвижений();
	
КонецПроцедуры

// Заполняет табличное поле "Движения" значениями реквизитов шаблонов.
// 
&НаСервере
Процедура ЗаполнитьШаблонЗначениямиРеквизитовДвижений()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений = ПолеДвижения.Выгрузить();
	
	бит_МеханизмХозяйственныхОперацийСервер.ПрочитатьЗначенияРеквизитовДвиженийШаблона(Объект.Ссылка, ТаблицаЗначений);
	
	ПолеДвижения.Загрузить(ТаблицаЗначений);
	
КонецПроцедуры

// Создает реквизиты формы и элементы формы, по описанию параметров колонок.
// 
&НаСервере
Процедура СоздатьДинамическиеКолонкиНаСервере()
	
	// Определим, существует	ли актуальная настройка конструктора.
	Отбор = Новый Структура;
	Отбор.Вставить("Регистр", Объект.Регистр);
	
	НастройкиКонструктора 	= Справочники.бит_СтруктураКонструктораДвижений.Выбрать(,,Отбор);
	Настройка 				= Неопределено;
	
	Пока НастройкиКонструктора.Следующий() Цикл
		Если не НастройкиКонструктора.ПометкаУдаления Тогда 
			// Берем первую попавшуюся не помеченную на удаление настройку, соответствующую отбору.
			Настройка = НастройкиКонструктора.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКолонок = Неопределено;
	
	Если Настройка <> Неопределено Тогда
		
		КС = Новый КвалификаторыСтроки(150);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
		
		ПараметрыКолонок = Настройка.ПараметрыКолонок.Выгрузить();
		ПараметрыКолонок.Колонки.Добавить("ИмяРеквизита", ОписаниеТиповС);
		
		Для Каждого ПараметрКолонок Из ПараметрыКолонок Цикл
			ПараметрКолонок.ИмяРеквизита = ПараметрКолонок.Реквизит.Наименование;
		КонецЦикла;
		
		ВремТаб = ПараметрыКолонок;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПараметрыКолонок.Реквизит,
		|	ПараметрыКолонок.СинонимРеквизита,
		|	ПараметрыКолонок.ИмяРеквизита,
		|	ПараметрыКолонок.ПоложениеКолонки,
		|	ПараметрыКолонок.ШиринаКолонки,
		|	ПараметрыКолонок.Видимость,
		|	ПараметрыКолонок.НомерКолонки
		|ПОМЕСТИТЬ ПараметрыКолонок
		|ИЗ
		|	&ПараметрыКолонок КАК ПараметрыКолонок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыКолонок.Реквизит,
		|	ПараметрыКолонок.СинонимРеквизита,
		|	ПараметрыКолонок.ПоложениеКолонки,
		|	ПараметрыКолонок.ШиринаКолонки,
		|	ПараметрыКолонок.Видимость,
		|	ПараметрыКолонок.ИмяРеквизита,
		|	ПараметрыКолонок.НомерКолонки КАК НомерКолонки,
		|	ВложенныйЗапрос.ТипРеквизита
		|ИЗ
		|	ПараметрыКолонок КАК ПараметрыКолонок
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			бит_ВидыРеквизитовДвижений.Ссылка КАК Реквизит,
		|			бит_ВидыРеквизитовДвижений.ТипыЗначений КАК ТипРеквизита
		|		ИЗ
		|			Справочник.бит_ВидыРеквизитовДвижений КАК бит_ВидыРеквизитовДвижений
		|		ГДЕ
		|			бит_ВидыРеквизитовДвижений.Родитель = &РегистрСсылка) КАК ВложенныйЗапрос
		|		ПО ПараметрыКолонок.Реквизит = ВложенныйЗапрос.Реквизит
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерКолонки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПараметрыКолонок");
		
		Запрос.УстановитьПараметр("РегистрСсылка"	, Объект.Регистр);
		Запрос.УстановитьПараметр("ПараметрыКолонок", ВремТаб);
		
		ПараметрыКолонок = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		// Получим список реквизитов движений для регистра.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВидыРеквизитовДвижений.Ссылка КАК Реквизит,
		               |	ВидыРеквизитовДвижений.Наименование КАК ИмяРеквизита,
		               |	ВидыРеквизитовДвижений.ТипыЗначений КАК ТипРеквизита,
		               |	ВидыРеквизитовДвижений.ПредставлениеЭлемента КАК СинонимРеквизита,
		               |	20 КАК ШиринаКолонки,
		               |	ЗНАЧЕНИЕ(Перечисление.бит_ПоложенияКолонокТаблицы.НоваяКолонка) КАК ПоложениеКолонки,
		               |	ИСТИНА КАК Видимость
		               |ИЗ
		               |	Справочник.бит_ВидыРеквизитовДвижений КАК ВидыРеквизитовДвижений
		               |ГДЕ
		               |	ВидыРеквизитовДвижений.Родитель = &Регистр";
		
		Запрос.УстановитьПараметр("Регистр", Объект.Регистр);
		
		ПараметрыКолонок = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ФРМ 			= ЭтаФорма;
	ТаблицаНаФорме 	= Элементы.ПолеДвижения;
	РеквизитФормы 	= ПолеДвижения;
	КэшСтруктуры	= ПараметрыКолонок;
	
	МассивКолонок 	= ПараметрыКолонок.ВыгрузитьКолонку("ИмяРеквизита");
	
	фСписокКолонок.Очистить();
	
	Для Каждого ИмяКолонки Из МассивКолонок Цикл
		фСписокКолонок.Добавить(ИмяКолонки, ИмяКолонки);
	КонецЦикла;
	
	бит_МеханизмХозяйственныхОперацийСервер.ПривестиРеквзитыФормыВСоответствииСоСтруктурой(ФРМ, КэшСтруктуры, "ПолеДвижения");
    бит_МеханизмХозяйственныхОперацийСервер.ПривестиТабличноеПолеКСоответствиюСоСтруктурой(ФРМ, ТаблицаНаФорме, РеквизитФормы, КэшСтруктуры, "ПолеДвижения", Ложь, Истина);
		
КонецПроцедуры

// Процедура ЗаполнитьПодчиненноеЗначение.
// 
&НаКлиенте
Процедура ЗаполнитьПодчиненноеЗначение(ТекущаяСтрока, ТекущаяКолонка, ПодчиненноеЗначение)
	
	// Заполнение актуально только для условий
	
	// ИмяКолонки = ТекущаяКолонка.Имя;
	// 
	// Если Найти(ИмяКолонки, "Условие") > 0 Тогда
	// 	
	// 	ПостфиксУсловия 	= СтрЗаменить(ИмяКолонки, "Условие", "");
	// 	ИмяЗначенияУсловия  = "Значение" + ПостфиксУсловия;
	// 	
	// 	Если ЭлементыФормы.ПолеДвижения.Колонки.Найти(ИмяЗначенияУсловия) <> Неопределено Тогда
	// 		
	// 		// Если не ЗначениеЗаполнено(ТекущаяСтрока[ИмяЗначенияУсловия]) Тогда
	// 			ТекущаяСтрока[ИмяЗначенияУсловия] = ПодчиненноеЗначение;
	// 		// КонецЕсли;
	// 		
	// 	КонецЕсли;
	// 	
	// КонецЕсли;
	// 
КонецПроцедуры

// Открывает общую форму просмотра кода и переменных строки шаблона движений.
// 
&НаКлиенте
Процедура ПоказатьКодСтроки(Команда)
	
	// Подготовим данные для параметров формы на сервере.
	СтруктураПараметров = ПодготовитьПараметрыОтрытияФормыИсполнимогоКодаНаСервере("Строка");
	ОткрытьФорму("ОбщаяФорма.бит_мхо_ФормаПросмотраКодаИПеременных", СтруктураПараметров);
	
КонецПроцедуры

// Открывает общую форму просмотра кода и переменных шаблона движений.
// 
&НаКлиенте
Процедура ПоказатьКодШаблона(Команда)
	
	// Подготовим данные для параметров формы на сервере.
	СтруктураПараметров = ПодготовитьПараметрыОтрытияФормыИсполнимогоКодаНаСервере("Таблица");
	ОткрытьФорму("ОбщаяФорма.бит_мхо_ФормаПросмотраКодаИПеременных", СтруктураПараметров);
		
КонецПроцедуры

// Возвращает параметры для формы автозаполнения шаблона.
// 
&НаСервере
Процедура ОбработатьПараметрыАвтозаполненияНаСервере(ПараметрыАвтозаполнения)
	
	Если ПараметрыАвтозаполнения.ОчищатьДвижения Тогда
		ПолеДвижения.Очистить();
	КонецЕсли;
	
	ТаблицаЗначений = ПолеДвижения.Выгрузить();
	
	бит_МеханизмХозяйственныхОперацийСервер.ПрочитатьЗначенияРеквизитовДвиженийШаблонаМуляж(ТаблицаЗначений, ПараметрыАвтозаполнения.ПараметрыАвтозаполнения);
	
	ПолеДвижения.Загрузить(ТаблицаЗначений);
	
	
КонецПроцедуры

// Открывает форму информации о шаблоне движений.
// 
&НаКлиенте
Процедура ПоказатьИнформациюОШаблонеКлиент(СтруктураИнформации)
	
	ПараметрыФормыИнфо = Новый Структура("СтруктураИнфо", СтруктураИнформации);		
	ОткрытьФорму("Справочник.бит_ШаблоныДвижений.Форма.ФормаИнформацииОШаблонеУправлемая", ПараметрыФормыИнфо);
	
КонецПроцедуры // ПоказатьИнформациюОШаблонеКлиент()

// Получает доступные типы для переданного в качестве параметра реквизита.
// 
&НаСервере
Функция ПолучитьДоступныеТипыРеквизитаНаСервере(ИмяЭлемента)
	
	СсылкаРеквизит = бит_МеханизмХозяйственныхОперацийСервер.ПолучитьСсылкуРеквизитаПоИмени(Объект.Регистр, ИмяЭлемента);
	ТипыЗначений = СсылкаРеквизит.ТипыЗначений.Получить();
	Возврат ТипыЗначений;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтрытияФормыИсполнимогоКодаНаСервере(УровеньРасшифровки = "Таблица")
	
	СтекПеременных = бит_МеханизмХозяйственныхОперацийСервер.ИнициализироватьСтекПеременных();
	
	СписокШаблонов = Новый Массив;
	СписокШаблонов.Добавить(Объект.Ссылка);
	
	Если УровеньРасшифровки = "Таблица" Тогда
		КодОбработчика = бит_МеханизмХозяйственныхОперацийСервер.ПолучитьИсполнимыйКодШаблонов(СписокШаблонов, СтекПеременных);
		бит_МеханизмХозяйственныхОперацийСервер.ВыровнятьФрагментКода(КодОбработчика);
	ИначеЕсли УровеньРасшифровки = "Строка" Тогда
		КодОбработчика = "";
		Структура = Новый Структура("ШаблонДвижений, НомерДвижения");
		Структура.ШаблонДвижений = Объект.Ссылка;
		Структура.НомерДвижения = Элементы.ПолеДвижения.ТекущаяСтрока;
		бит_МеханизмХозяйственныхОперацийСервер.СформироватьКодДвиженияПоРегистру(КодОбработчика, Структура, СтекПеременных);
		бит_МеханизмХозяйственныхОперацийСервер.ВыровнятьФрагментКода(КодОбработчика);
	Иначе
		СтекПеременных = Новый Массив;
		КодОбработчика = "";
	КонецЕсли;
	
	Возврат Новый Структура("КодОбработчика, СтекПеременных", КодОбработчика, СтекПеременных);
	
КонецФункции

// Возвращает структуру, содержащую основные сведения о шаблоне движений.
// 
&НаСервере
Функция ПодготовитьСтруктуруИнфоНаСервере(Ссылка)
	
	ОбъектСсылка = Ссылка;
	
	СтруктураИнфо = Новый Структура("Документ, Регистр, Автор, ДатаСоздания, Редактор,
	|ДатаПоследнейРедакции, Идентификатор, СписокКомплектов, СписокОрганизаций");
	
	СтруктураИнфо.Документ 				= ОбъектСсылка.ВидДокумента.Наименование;
	СтруктураИнфо.Регистр 				= ОбъектСсылка.Регистр.Наименование;
	СтруктураИнфо.Автор 				= Строка(ОбъектСсылка.Автор);
	СтруктураИнфо.ДатаСоздания 			= ОбъектСсылка.ДатаСоздания;
	СтруктураИнфо.Редактор 				= Строка(ОбъектСсылка.ПоследнийРедактор);
	СтруктураИнфо.ДатаПоследнейРедакции = ОбъектСсылка.ДатаПоследнегоРедактирования;
	СтруктураИнфо.Идентификатор 		= ОбъектСсылка.Идентификатор;
	
	// Подготовим список комплектов, в которые включен шаблон.
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	бит_КомплектыДвиженийШаблоныДвижений.Ссылка КАК Комплект
	|ИЗ
	|	Справочник.бит_КомплектыДвижений.ШаблоныДвижений КАК бит_КомплектыДвиженийШаблоныДвижений
	|ГДЕ
	|	бит_КомплектыДвиженийШаблоныДвижений.ШаблонДвижения = &ШаблонДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_КомплектыДвиженийШаблоныДвижений.Ссылка");
	
	Запрос.УстановитьПараметр("ШаблонДвижения", ОбъектСсылка);
	
	СписокКомплектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Комплект");
	
	СтруктураИнфо.СписокКомплектов = СписокКомплектов;
	
	Возврат СтруктураИнфо;
	
КонецФункции // ПодготовитьСтруктуруИнфоНаСервере()

#Область ОбщиеОбработчикиСобытийПолейТабличногоПоляДвижения

// Подключаемый Процедура - обработчик события "НачалоВыбораИзСписка" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка) 
	
	ТекущаяКолонка 	= Элемент;
	ТекущаяСтрока	= Элементы.ПолеДвижения.ТекущиеДанные;
	
	СписокВыбора = Новый СписокЗначений;
	
	Если бит_МеханизмХозяйственныхОперацийСервер.ЗаполнитьЗначенияПредопределенныхРеквизитов(ТекущаяКолонка.Имя, СписокВыбора, Объект.ВидДокумента, Объект.Регистр, Объект.ВидПроформы, ИменаДопТаблиц.ВыгрузитьЗначения()) Тогда
		
		Элемент.СписокВыбора.Очистить();
		
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Подключаемый Процедура - обработчик события "АвтоПодбор" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка) 
	
	Если Ожидание = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущаяКолонка 	= Элемент;
		ТекущаяСтрока	= Элементы.ПолеДвижения.ТекущиеДанные;
		
		ДанныеВыбора = Новый СписокЗначений;
		
		бит_МеханизмХозяйственныхОперацийСервер.ЗаполнитьЗначенияПредопределенныхРеквизитов(ТекущаяКолонка.Имя
			                                                                                      , ДанныеВыбора
																								  , Объект.ВидДокумента
																								  , Объект.Регистр
																								  , Объект.ВидПроформы
																								  , ИменаДопТаблиц.ВыгрузитьЗначения());
			
		
	КонецЕсли; 
	
КонецПроцедуры

// Подключаемый Процедура - обработчик события "Очистка" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_Очистка(Элемент, СтандартнаяОбработка) 

КонецПроцедуры

// Подключаемый Процедура - обработчик события "Регулирование" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_Регулирование(Элемент, Направление, СтандартнаяОбработка) 
	
КонецПроцедуры

// Подключаемый Процедура - обработчик события "Открытие" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка) 

КонецПроцедуры

// Подключаемый Процедура - обработчик события "ОбработкаВыбора" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	
КонецПроцедуры

// Подключаемый Процедура - обработчик события "АвтоПодборТекста" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка) 
	
	ТекущаяКолонка 	= Элемент;
	ТекущаяСтрока	= Элементы.ПолеДвижения.ТекущиеДанные;
	
	СписокВыбора = Новый СписокЗначений;
	
	Если бит_МеханизмХозяйственныхОперацийСервер.ЗаполнитьЗначенияПредопределенныхРеквизитов(ТекущаяКолонка.Имя, СписокВыбора, Объект.ВидДокумента, Объект.Регистр, Объект.ВидПроформы, ИменаДопТаблиц.ВыгрузитьЗначения()) Тогда
		
		Элемент.СписокВыбора.Очистить();
		
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Подключаемый Процедура - обработчик события "ВводаТекста" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка) 
	// Сообщить("Окончание ввода текста");
КонецПроцедуры

// Подключаемый Процедура - обработчик события "ПриИзменении" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_ПриИзменении(Элемент) 
	
	Модифицированность = Истина;
	
	// Изменение кода. Начало. 05.06.2014{{
	ТекущаяСтрока = Элементы.ПолеДвижения.ТекущиеДанные;
	ТекущееЗначение = ТекущаяСтрока[Элемент.Имя];
	
	// Обработка изменения вида сравнения
	Если ТипЗнч(ТекущееЗначение) = Тип("ПеречислениеСсылка.бит_ЛогическиеОператоры") Тогда
		
		ТекНомУсловияСтр = СтрЗаменить(Элемент.Имя,"ВидСравнения", "");
		
		Попытка
		
			ТекНомУсловия = Число(ТекНомУсловияСтр);
		
		Исключение
			
			ТекНомУсловия = 0;
			
		КонецПопытки;
		
		Если ТекНомУсловия > 0 Тогда
			
			ЗначениеУсловия = ТекущаяСтрока["Значение"+ТекНомУсловия];
			Если ТекущееЗначение = ПредопределенноеЗначение("Перечисление.бит_ЛогическиеОператоры.ВСписке") Тогда
				
				Если НЕ ТипЗнч(ЗначениеУсловия) = Тип("СписокЗначений") Тогда
					
					// Приводим значение условия к списку
					 НовыйСписок = Новый СписокЗначений;	
					 Если ЗначениеЗаполнено(ЗначениеУсловия) Тогда
						 
						 НовыйСписок.Добавить(ЗначениеУсловия);
						 
					 КонецЕсли; 
					 ТекущаяСтрока["Значение"+ТекНомУсловия] = НовыйСписок;
				
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("ПеречислениеСсылка.бит_ЛогическиеОператоры") Тогда	
				
				Если ТипЗнч(ЗначениеУсловия) = Тип("СписокЗначений") Тогда
					
					// Берем из списка первое значение
					Если ЗначениеУсловия.Количество() > 0 Тогда
						ТекущаяСтрока["Значение"+ТекНомУсловия] = ЗначениеУсловия[0].Значение;
					Иначе	
						ТекущаяСтрока["Значение"+ТекНомУсловия] = Неопределено;
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; // Обработка изменения вида сравнения 

	// Изменение кода. Конец. 05.06.2014}}
	
КонецПроцедуры

// Подключаемый Процедура - обработчик события "НачалоВыбора" поля "ХранилищеОбработчиков".
// 
&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	
	
	// Изменение кода. Начало. 26.12.2013{{
	Если Элемент.Имя = "Таблица" 
		или Найти(Элемент.Имя, "ВидСравнения") <> 0 
		или Найти(Элемент.Имя, "ОбъединениеСПоследующим") <> 0 
		или Найти(Элемент.Имя, "ИмяВидаСубконто") <> 0 Тогда
		
		СтандартнаяОбработка = Ложь;
        Подключаемый_НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка);
		Возврат;
		
	КонецЕсли;	
	// Изменение кода. Конец. 26.12.2013}}
	
	ТекущаяКолонка 	= Элемент;
	ТекущаяСтрока	= Элементы.ПолеДвижения.ТекущиеДанные;
	
	СписокВыбора = Новый СписокЗначений;
	
	Если бит_МеханизмХозяйственныхОперацийСервер.ЗаполнитьЗначенияПредопределенныхРеквизитов(ТекущаяКолонка.Имя, СписокВыбора, Объект.ВидДокумента, Объект.Регистр, Объект.ВидПроформы) Тогда
		
		МассивИменТаблиц = СписокВыбора.ВыгрузитьЗначения();
		
		ПараметрыФормыТаблицы = Новый Структура("СписокИмен, ТекущееИмя, ОписаниеТаблиц"
		, МассивИменТаблиц
		, Элементы.ПолеДвижения.ТекущиеДанные[Элемент.Имя]
		, ОписаниеТаблиц);
		
		ДополнительныеПараметрыОбработки = Новый Структура;
		ДополнительныеПараметрыОбработки.Вставить("Элемент", Элемент);
		Обработчик    = Новый ОписаниеОповещения("ОбработкаВыбораИмениТаблицы", ЭтотОбъект, ДополнительныеПараметрыОбработки);
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Справочник.бит_ШаблоныДвижений.Форма.ФормаВыбораИмениТаблицыУправляемая", ПараметрыФормыТаблицы, Элемент, , , , Обработчик, РежимОткрытия);
		
		Элемент.СписокВыбора.Очистить();
		
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормыКонструктора = Новый Структура("МассивИменРеквизитов, ДоступныеТипы, ТекущееЗначение, ТабличнаяЧасть, Документ, ВидПроформы, ОписаниеТаблиц, ВидСравнения");
		
		ИмяЭлемента = Элемент.Имя;
		
		ДоступныеТипы 			= ПолучитьДоступныеТипыРеквизитаНаСервере(ИмяЭлемента);
		
		// Изменение кода. Начало. 05.06.2014{{
		Если Найти(Элемент.Имя,"Значение") > 0 Тогда
			
			НомерУсловияСтр = СтрЗаменить(Элемент.Имя,"Значение","");
			Попытка
				
				НомерУсловия = Число(НомерУсловияСтр);
				
			Исключение
				
				НомерУсловия = 0;
				
			КонецПопытки;
			
			Если НомерУсловия > 0 Тогда
				
				Если ТекущаяСтрока["ВидСравнения"+НомерУсловия] = ПредопределенноеЗначение("Перечисление.бит_ЛогическиеОператоры.ВСписке") Тогда
					ДоступныеТипы = Новый ОписаниеТипов(ДоступныеТипы, "СписокЗначений");		
				КонецЕсли;
				
				ПараметрыФормыКонструктора.ВидСравнения  = ТекущаяСтрока["ВидСравнения"+НомерУсловия];
				
			КонецЕсли; 
			
		КонецЕсли; 
		// Изменение кода. Конец. 05.06.2014}}
		
		ПараметрыФормыКонструктора.МассивИменРеквизитов 	= Объект.ДополнительныеРеквизиты;
		ПараметрыФормыКонструктора.ДоступныеТипы 			= ДоступныеТипы;
		ПараметрыФормыКонструктора.ТекущееЗначение 			= ТекущаяСтрока[Элемент.Имя];
		ПараметрыФормыКонструктора.ТабличнаяЧасть			= ТекущаяСтрока.Таблица;
		ПараметрыФормыКонструктора.Документ					= Объект.ВидДокумента;
		ПараметрыФормыКонструктора.ВидПроформы				= Объект.ВидПроформы;
		ПараметрыФормыКонструктора.ОписаниеТаблиц			= ОписаниеТаблиц;
		ПараметрыФормыКонструктора.Вставить("Регистр", Объект.Регистр);
		
		ДополнительныеПараметрыОбработки = Новый Структура;
		ДополнительныеПараметрыОбработки.Вставить("ТекущаяСтрока",  ТекущаяСтрока);
		ДополнительныеПараметрыОбработки.Вставить("ТекущаяКолонка", ТекущаяКолонка);
		ДополнительныеПараметрыОбработки.Вставить("Элемент",        Элемент);
		Обработчик    = Новый ОписаниеОповещения("ОбработкаНастройкиКонструктораЗначений", ЭтотОбъект, ДополнительныеПараметрыОбработки);
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("ОбщаяФорма.бит_ФормаКонструктораЗначенийУправляемая", ПараметрыФормыКонструктора, Элемент, , , , Обработчик, РежимОткрытия);
		
	КонецЕсли;
		
КонецПроцедуры

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте
Процедура ОбработкаВыбораИмениТаблицы(ВыбранноеИмя, ВходящийКонтекст) Экспорт
	
	Если ВыбранноеИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = ВходящийКонтекст.Элемент;
	Элементы.ПолеДвижения.ТекущиеДанные[Элемент.Имя] = ВыбранноеИмя;
	
КонецПроцедуры

// Обработчик завершения открытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте
Процедура ОбработкаНастройкиКонструктораЗначений(СтруктураЗначения, ВходящийКонтекст) Экспорт
	
	Если СтруктураЗначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ВходящийКонтекст.ТекущаяСтрока;
	Элемент       = ВходящийКонтекст.Элемент;
	
	Если ТипЗнч(СтруктураЗначения) = Тип("Структура") Тогда
		
		ТекущаяСтрока[Элемент.Имя] = СтруктураЗначения.Значение;
		
		ПодчиненноеЗначение	= СтруктураЗначения.ПодчиненноеЗначение;
		ЗаполнитьПодчиненноеЗначение(ТекущаяСтрока, ВходящийКонтекст.ТекущаяКолонка, ПодчиненноеЗначение);
		
	Иначе	
		
		ТекущаяСтрока[Элемент.Имя] = СтруктураЗначения;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьСтруктуруДопТаблицВТЧНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСтруктуруДопТаблицВТЧНаСервере(ТекущийОбъект)
	
	Об = ТекущийОбъект;
	
	Об.НастройкиРеквизитов.Очистить();
	
	Если ОписаниеТаблиц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = ОписаниеТаблиц.МассивОписанияТаблиц;
	
	Для Каждого Таблица Из МассивТЧ Цикл
		
		ИмяТаблицы 			= Таблица.Имя;
		ВидТаблицы 			= Таблица.Вид;
		КодИнициализации 	= Таблица.КодИнициализации;
		
		Для Каждого Реквизит Из Таблица.Реквизиты Цикл
			
			НовСтрока = Об.НастройкиРеквизитов.Добавить();
			НовСтрока.ИмяТаблицы 	= ИмяТаблицы;
			НовСтрока.Имя 			= Реквизит.Имя;
			НовСтрока.Синоним 		= Реквизит.Синоним;
			НовСтрока.СтрТип		= ПолучитьТипСтрокой(Реквизит.Тип);
			НовСтрока.ВидТаблицы	= ВидТаблицы;
			
		КонецЦикла;
		
		НовСтрока.ИнициализацияТаблицы 	= Истина;
		НовСтрока.КодИнициализации 		= КодИнициализации;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтруктуруДопТаблицИзТЧНаСервере()
	
	// Инициализируем структуру описания таблиц
	ОписаниеТаблиц = Новый Структура("МассивОписанияТаблиц", Новый Массив);
	
	// Получим список таблиц и их видов
	ТаблицыИВиды = Объект.НастройкиРеквизитов.Выгрузить();
	ТаблицыИВиды.Свернуть("ИмяТаблицы, ВидТаблицы");
	
	Для Каждого Таблица Из ТаблицыИВиды Цикл
		
		Отбор = новый Структура("ИмяТаблицы, ВидТаблицы", Таблица.ИмяТаблицы, Таблица.ВидТаблицы);
		// Найдем все реквизиты
		МассивСтрокРеквизитов = Объект.НастройкиРеквизитов.НайтиСтроки(Отбор);
		
		ЭлементОписанияТаблицы = Новый Структура("Имя, Вид, Реквизиты, КодИнициализации");
		ЭлементОписанияТаблицы.Имя 				= Таблица.ИмяТаблицы;
		ЭлементОписанияТаблицы.Вид 				= Таблица.ВидТаблицы;
				
		ОписаниеРеквизитов = Новый Массив;
		
		Для Каждого СтрокаРеквизита Из МассивСтрокРеквизитов Цикл
			
			Если СтрокаРеквизита.ИнициализацияТаблицы Тогда
				ЭлементОписанияТаблицы.КодИнициализации = СтрокаРеквизита.КодИнициализации;
			КонецЕсли;
			
			ОпТипа = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаРеквизита.СтрТип,,Новый ОписаниеТипов("Строка"));
			
			ОписаниеРеквизита = Новый Структура("Имя, Синоним, Тип"
												, СтрокаРеквизита.Имя
												, СтрокаРеквизита.Синоним
												, ОпТипа);
												
			ОписаниеРеквизитов.Добавить(ОписаниеРеквизита);
			
		КонецЦикла;
		
		ЭлементОписанияТаблицы.Реквизиты = ОписаниеРеквизитов;
		
		ОписаниеТаблиц.МассивОписанияТаблиц.Добавить(ЭлементОписанияТаблицы);
		
	КонецЦикла;
	
	ТаблицыИВиды.Свернуть("ИмяТаблицы");
	
	ИменаДопТаблиц.ЗагрузитьЗначения(ТаблицыИВиды.ВыгрузитьКолонку("ИмяТаблицы")); 
	
КонецПроцедуры

// Процедура обрабатывает изменение типа. 
// Формируется строковое представление типа.
// 
// Параметры:
//  ТекОписание - ОписаниеТипов.
// 
&НаСервере
Функция ПолучитьТипСтрокой(ТекОписание)
	
	МассивТипов = ТекОписание.Типы();
	
	СтрТип = "";
	
	Если МассивТипов.Количество() = 0 Тогда
		
		СтрТип = СтрТип+"Строка";
		
	Иначе	
		
		Для каждого ТекТип Из МассивТипов Цикл
			
			Если бит_ОбщегоНазначения.ЭтоПримитивныйТип(ТекТип) Тогда
				
				Если ТекТип = Тип("Строка") Тогда
					
					СтрИмяТипа = "Строка";
					
				ИначеЕсли ТекТип = Тип("Число") Тогда
					
					СтрИмяТипа = "Число";
					
				ИначеЕсли ТекТип = Тип("Дата") Тогда	
					
					СтрИмяТипа = "Дата";
					
				ИначеЕсли ТекТип = Тип("Булево") Тогда	
					
					СтрИмяТипа = "Булево";
					
				КонецЕсли; 
				СтрТип = СтрТип+?(ПустаяСтрока(СтрТип),"","/")+СтрИмяТипа;				
				
			Иначе
				
				МетаОбъект = Метаданные.НайтиПоТипу(ТекТип);
				
				Если НЕ МетаОбъект = Неопределено Тогда
					
					ИмяПолное = МетаОбъект.ПолноеИмя();
					СтрИмена  = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ИмяПолное);
					СтрИмяТипа = СтрИмена.ИмяКласса+"Ссылка."+СтрИмена.ИмяОбъекта;
					СтрТип = СтрТип+?(ПустаяСтрока(СтрТип),"","/")+СтрИмяТипа;
					
				КонецЕсли; 
				
			КонецЕсли;	  
			
		КонецЦикла; // МассивТипов
		
	КонецЕсли; 
	
	Если ПустаяСтрока(СтрТип) Тогда
		
		Свойства_СтрТип = "Строка";
		
	Иначе
		
		Свойства_СтрТип = СтрТип;
		
	КонецЕсли; 
	
	Возврат Свойства_СтрТип;
	
КонецФункции // ИзменениеТипа()

&НаКлиенте
Процедура ДополнительныеРеквизитыПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.Простое Тогда
		ПолеПроизвольныйТекст = "";
	Иначе	
		ПолеПроизвольныйТекст = ТекСтрока.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и не Копирование Тогда
		Элемент.ТекущиеДанные.Простое = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПростоеПриИзменении(Элемент)
	
	ДополнительныеРеквизитыПриАктивизацииСтроки(Элементы.ДополнительныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеДвиженияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока и не Копирование и ТекущаяСтрока <> Неопределено Тогда
		// Всем полям - строки в значение
		
		Для Каждого ИмяКолонки Из фСписокКолонок Цикл
			
			Если ТекущаяСтрока.Свойство(ИмяКолонки.Значение) Тогда
				ТекущаяСтрока[ИмяКолонки.Значение] = "";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОШаблоне(Команда)
	
	ТекущаяСтрока = Объект.Ссылка;

	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Откроем форму информации о шаблоне
	СтруктураИнформации = ПодготовитьСтруктуруИнфоНаСервере(ТекущаяСтрока);
	ПоказатьИнформациюОШаблонеКлиент(СтруктураИнформации);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти
