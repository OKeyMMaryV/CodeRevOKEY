
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();
	НастройкиАдресации = Справочники.бит_РолиИсполнителей.НастройкиОбъектовАдресации(Объект.РольИсполнителя);		
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПодчиненный) Тогда 	
		АлгоритмПодчиненныйИзменение();
	КонецЕсли;	
		
	ЗаполнитьПереченьПараметровПроцесса();	
    ЗаполнитьРеквизитыПредмета(Ложь);
	
	// Заполнение списка объектов системы, доступных для "быстрого выбора".
	СписокБыстрыеОбъекты = СформироватьСписокБыстрыхОбъектовСистемы();
	Для каждого Элемент Из СписокБыстрыеОбъекты Цикл
		Элементы.ОбъектСистемы.СписокВыбора.Добавить(Элемент.Значение);
	КонецЦикла; 
	
	ЗаполнитьКэшЗначений(мКэшЗначений);
	
	ПолеКодДействия.УстановитьТекст(Объект.КодДействия);
	ПолеПередЗаписьюПредмета.УстановитьТекст(Объект.КодПередЗаписьюПредмета);
		
	Если НЕ ПустаяСтрока(Объект.КодПередЗаписьюПредмета) Тогда
		ПередЗаписьюПредметаHTML = РаскраситьКод(Объект.КодПередЗаписьюПредмета);
	КонецЕсли; 
	Если НЕ ПустаяСтрока(Объект.КодДействия) Тогда
		КодДействияHTML = РаскраситьКод(Объект.КодДействия);
	КонецЕсли;
	
	// Перечень автоматических действий
	ЗаполнитьАвтоматическиеДействия();
	
	МинутыВоВремя();
	
	ЗаполнитьТипыПараметров();
	УстановитьВидимость();	
	УправлениеСтраницамиСОбработчиками(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
		БлокироватьЭлементыФормы(Параметры.ЗначенияЗаполнения);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьАвтоотметкиНезаполненного();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.КодДействия = ПолеКодДействия.ПолучитьТекст();
	Объект.КодПередЗаписьюПредмета = ПолеПередЗаписьюПредмета.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьТипыПараметров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "Назначение".
// 
&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	НазначениеИзменение();
	УстановитьАвтоотметкиНезаполненного();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Виза".
// 
&НаКлиенте
Процедура ВизаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Виза) Тогда
		
		ЗаполнитьВремяНаУстановку();
		
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			
			Объект.Наименование = Строка(Объект.Виза);
			
		КонецЕсли; 
		
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Статус".
// 
&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
	
		Объект.Наименование = Строка(Объект.Статус);
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВремяНаУстановку_Дни".
// 
&НаКлиенте
Процедура ВремяНаУстановку_ДниПриИзменении(Элемент)
	
	ВычислитьВремяНаУстановку();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВремяНаУстановку_Часы".
// 
&НаКлиенте
Процедура ВремяНаУстановку_ЧасыПриИзменении(Элемент)
	
	ВычислитьВремяНаУстановку();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВремяНаУстановку_Минуты".
// 
&НаКлиенте
Процедура ВремяНаУстановку_МинутыПриИзменении(Элемент)
	
	ВычислитьВремяНаУстановку();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Алгоритм".
// 
&НаКлиенте
Процедура АлгоритмПриИзменении(Элемент)
	
	АлгоритмИзменение();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Алгоритм".
// 
&НаКлиенте
Процедура АлгоритмПодчиненныйПриИзменении(Элемент)
	
	АлгоритмПодчиненныйИзменение();
	
КонецПроцедуры // АлгоритмПодчиненныйПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Задача_Наименование".
// 
&НаКлиенте
Процедура Задача_НаименованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
	
		Объект.Наименование = Объект.Задача_Наименование;
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Справочник);
	СписокВидовОбъектов.Добавить(мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Документ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.ОбъектСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	ОбъектСистемыПриИзмененииНаСервере();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ЭтоПроверочнаяЗадача".
// 
&НаКлиенте
Процедура ЭтоПроверочнаяЗадачаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура обрабатывает изменение предмета задачи
//
&НаСервере
Процедура Задача_ПредметИзменение()
	
	Если ЗначениеЗаполнено(Объект.Задача_Предмет) Тогда
		
		 ЗаполнитьАвтоматическиеДействия();
		
	КонецЕсли; 
	
КонецПроцедуры // Задача_ПредметИзменение()

&НаКлиенте
Процедура Задача_ПредметПриИзменении(Элемент)
	
	Задача_ПредметИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.Наименование = ВыбранноеЗначение;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	Если Объект.Назначение = мКэшЗначений.Перечисления.бит_НазначенияПользовательскихДействий.Визирование Тогда
		Элемент.СписокВыбора.Добавить(Строка(Объект.Виза));
	ИначеЕсли Объект.Назначение = мКэшЗначений.Перечисления.бит_НазначенияПользовательскихДействий.ИзменениеСтатусовОбъектов Тогда
		Элемент.СписокВыбора.Добавить(Строка(Объект.Статус));
	ИначеЕсли Объект.Назначение = мКэшЗначений.Перечисления.бит_НазначенияПользовательскихДействий.ПодчиненныйПроцесс Тогда	
		Элемент.СписокВыбора.Добавить(Строка(Объект.Алгоритм));
	ИначеЕсли Объект.Назначение = мКэшЗначений.Перечисления.бит_НазначенияПользовательскихДействий.СозданиеЗадачи Тогда
		Элемент.СписокВыбора.Добавить(Объект.Задача_Наименование);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеПараметры 

&НаКлиенте
Процедура ДополнительныеПараметрыИмяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если РеквизитыПредмета.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДополнительныеПараметрыИмяНачалоВыбораИзСпискаЗавершение", ЭтотОбъект);
		
		ПоказатьВыборИзСписка(ОписаниеОповещения, РеквизитыПредмета);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ДополнительныеПараметрыИмяНачалоВыбораИзСпискаЗавершение".
// 
// Параметры:
// ВыбЭлемент - Структура.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ДополнительныеПараметрыИмяНачалоВыбораИзСпискаЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбЭлемент = Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ДополнительныеПараметры.ТекущиеДанные;
		ЗаполнитьСтрокуПараметровПоОписаниюРеквизита(ТекущаяСтрока, ВыбЭлемент.Значение);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПараметрыИмяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Эл Из РеквизитыПредмета Цикл
	
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПараметрыИмяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
    СтандартнаяОбработка = Ложь;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ТекущаяСтрока = Элементы.ДополнительныеПараметры.ТекущиеДанные;
		ЗаполнитьСтрокуПараметровПоОписаниюРеквизита(ТекущаяСтрока, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Значение) И Не ТипЗнч(ТекущаяСтрока.Значение) = Тип("Дата") Тогда
		
		СтандартнаяОбработка = Ложь;
		Элемент.ВыбиратьТип = Ложь;
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("Выражение");
		СписокВыбора.Добавить("Значение");

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Элемент", Элемент);
		Оповещение = Новый ОписаниеОповещения("ЗначениеВыборВидаЗаполненияЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент);
		
	ИначеЕсли ТекущаяСтрока.ЭтоВыражение Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокВыбора = Новый СписокЗначений;
		
		Для каждого Эл Из ПараметрыПроцесса Цикл
			СписокВыбора.Добавить("#ПП."+Эл.Представление);
		КонецЦикла; 
		
		Оповещение = Новый ОписаниеОповещения("ЗначениеВыражениеВыборЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент);
	Иначе	
		// Обычный выбор значения.
		МассивТипов = ТекущаяСтрока.Тип.Типы();
		ОписаниеОграничение = Новый ОписаниеТипов(МассивТипов);
		Элемент.ОграничениеТипа = ОписаниеОграничение;
	КонецЕсли; 
	
	
КонецПроцедуры

// Обработчик завершения открытия формы списка значений.
//  См. Синтакс-помощник: ПоказатьВыборИзСписка().
//
&НаКлиенте 
Процедура ЗначениеВыборВидаЗаполненияЗавершение(РезультатВыбора, ДополнительныеДанные) Экспорт

	Если НЕ РезультатВыбора = Неопределено Тогда
		
	     ТекущаяСтрока = Элементы.ДополнительныеПараметры.ТекущиеДанные;
		
		 Если РезультатВыбора.Значение = "Выражение" Тогда
			 
			 // Выбрано использования выражения - необходимо выбрать конкретное выражение.
			 ТекущаяСтрока.ЭтоВыражение = Истина;
			 
			 ДанныеВыбора = Новый СписокЗначений;
			 
			 Для каждого Эл Из ПараметрыПроцесса Цикл
				 
				 ДанныеВыбора.Добавить("#ПП."+Эл.Представление);
				 
			 КонецЦикла; 

			 Оповещение = Новый ОписаниеОповещения("ЗначениеВыражениеВыборЗавершение", ЭтотОбъект);
			 ПоказатьВыборИзСписка(Оповещение, ДанныеВыбора, ДополнительныеДанные.Элемент);
			 
		 Иначе	
			 
			 ТекущаяСтрока.ЭтоВыражение = Ложь;
			 
			 МассивТипов = ТекущаяСтрока.Тип.Типы();

			 Если МассивТипов.Количество() = 1 Тогда
				 
				  ТекТип = МассивТипов[0];
				  
				  Если бит_ОбщегоНазначенияКлиентСервер.ЭтоПримитивныйТип(ТекТип) Тогда
					  
					  ТекущаяСтрока.Значение = ТекущаяСтрока.Тип.ПривестиЗначение();
					  
				  Иначе	
					  
					  // установим тип элемента
					  ОписаниеОграничение = Новый ОписаниеТипов(МассивТипов);
					  ДополнительныеДанные.Элемент.ОграничениеТипа = ОписаниеОграничение;
							  
					  ИмяФормыВыбора = ОпределитьИмяФормыВыбора(ТекТип);
					  Если НЕ ПустаяСтрока(ИмяФормыВыбора) Тогда
						  ПараметрыФормы = Новый Структура;
						  ПараметрыФормы.Вставить("РежимВыбора", Истина);
						  
						  ОповещениеЗначение = Новый ОписаниеОповещения("ЗначениеЗначениеВыборЗавершение", ЭтотОбъект);
						  ОткрытьФорму(ИмяФормыВыбора,ПараметрыФормы,ДополнительныеДанные.Элемент,,,,ОповещениеЗначение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					  КонецЕсли; 
					  
				  КонецЕсли; 
				 
			 ИначеЕсли МассивТипов.Количество() > 1 Тогда	
				 
				 // Используется составной тип - необходимо выбрать тип для значения.
				 СписокВыбора = Новый СписокЗначений;
				 Для каждого ТекТип Из МассивТипов Цикл
				 
				 	СписокВыбора.Добавить(ТекТип,Строка(ТекТип));
				 
				 КонецЦикла; 
				 
				 ДопПараметры = Новый Структура;
				 ДопПараметры.Вставить("Элемент", ДополнительныеДанные.Элемент);
				 Оповещение = Новый ОписаниеОповещения("ВыборЗначенияВыборТипаЗавершение", ЭтотОбъект, ДопПараметры);
				 ПоказатьВыборИзСписка(Оповещение, СписокВыбора, ДополнительныеДанные.Элемент);
				 
				 
			 КонецЕсли; 
			 
		 КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры	// ЗначениеВыборВидаЗаполненияЗавершение

// Обработчик завершения открытия формы списка значений.
//  См. Синтакс-помощник: ПоказатьВыборИзСписка().
//
&НаКлиенте 
Процедура ВыборЗначенияВыборТипаЗавершение(РезультатВыбора, ДополнительныеДанные) Экспорт

	Если НЕ РезультатВыбора = Неопределено Тогда
		
	    ТекущаяСтрока = Элементы.ДополнительныеПараметры.ТекущиеДанные;		
		
		ТекТип = РезультатВыбора.Значение;
		
		Если бит_ОбщегоНазначенияКлиентСервер.ЭтоПримитивныйТип(ТекТип) Тогда
			
			ТекущаяСтрока.Значение = ТекущаяСтрока.Тип.ПривестиЗначение();
			
		Иначе	
			
			ИмяФормыВыбора = ОпределитьИмяФормыВыбора(ТекТип);
			Если НЕ ПустаяСтрока(ИмяФормыВыбора) Тогда
				
				ОткрытьФорму(ИмяФормыВыбора,,ДополнительныеДанные.Элемент);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры	// ВыборЗначенияВыборТипаЗавершение

// Обработчик завершения открытия формы списка значений.
//  См. Синтакс-помощник: ПоказатьВыборИзСписка().
//
&НаКлиенте 
Процедура ЗначениеВыражениеВыборЗавершение(РезультатВыбора, ДополнительныеДанные) Экспорт

	Если НЕ РезультатВыбора = Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ДополнительныеПараметры.ТекущиеДанные;
		
		ТекущаяСтрока.Значение = РезультатВыбора.Значение;
		
	КонецЕсли; 
	
КонецПроцедуры	// ЗначениеВыражениеВыборЗавершение

// Обработчик завершения открытия формы списка значений.
//  См. Синтакс-помощник: ПоказатьВыборИзСписка().
//
&НаКлиенте 
Процедура ЗначениеЗначениеВыборЗавершение(РезультатВыбора, ДополнительныеДанные) Экспорт

	Если НЕ РезультатВыбора = Неопределено Тогда
		
		ТекущаяСтрока = Элементы.ДополнительныеПараметры.ТекущиеДанные;
		ТекущаяСтрока.Значение = РезультатВыбора;
		
	КонецЕсли; 
	
КонецПроцедуры	// ЗначениеЗначениеВыборЗавершение

&НаКлиенте
Процедура ДополнительныеПараметрыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ДополнительныеПараметры.ТекущиеДанные;
	
	ТекущаяСтрока.Значение = Неопределено;
	ТекущаяСтрока.ЭтоВыражение = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвтоматическиеДействия

&НаКлиенте
Процедура АвтоматическиеДействияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
	
		 ТекущаяСтрока = Элементы.АвтоматическиеДействия.ТекущиеДанные;
		 ТекущаяСтрока.ИД = Строка(Новый УникальныйИдентификатор);
		 ТекущаяСтрока.Выполнять = Истина;
		 
		 АвтоматическиеДействияПриАктивизацииСтроки(Элемент);
		 
	 КонецЕсли; 
	 
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиеДействияПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.АвтоматическиеДействия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Элементы.ПараметрыАвтоматическихДействий.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДДействия","#unrealID#");
	Иначе	
		Элементы.ПараметрыАвтоматическихДействий.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДДействия",ТекущаяСтрока.ИД);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиеДействияПередУдалением(Элемент, Отказ)
	
	Если НЕ Отказ Тогда
		
		// удаляем параметры текущего действия
		ТекущаяСтрока = Элементы.АвтоматическиеДействия.ТекущиеДанные;
		
		СтрОтбор = Новый Структура("ИДДействия", ТекущаяСтрока.ИД);
		НайденныеСтроки = Объект.ПараметрыАвтоматическихДействий.НайтиСтроки(СтрОтбор);
		
		КоличествоПараметров = НайденныеСтроки.Количество();
		Для Сч = 0 По КоличествоПараметров - 1  Цикл
			
			Кол = КоличествоПараметров - Сч - 1;
			СтрокаПараметры = Объект.ПараметрыАвтоматическихДействий[Кол];
			Объект.ПараметрыАвтоматическихДействий.Удалить(СтрокаПараметры);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыАвтоматическихДействий

&НаКлиенте
Процедура ПараметрыАвтоматическихДействийЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПараметрыАвтоматическихДействий.ТекущиеДанные;
	
	СтрОтбор = Новый Структура("ИД", ТекущаяСтрока.ИДДействия);
	НайденныеСтроки = Объект.АвтоматическиеДействия.НайтиСтроки(СтрОтбор);
	
	ТекДействие = Неопределено;
	Если НайденныеСтроки.Количество() > 0 Тогда
	
		 ТекДействие = НайденныеСтроки[0].Действие;
	
	КонецЕсли; 
	
	ИменаДействийОбработкиПолучения = Новый Массив;
	ИменаДействийОбработкиПолучения.Добавить(ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАвтоматическихДействийЗадач.ПолучениеДанныхБюджета")); 
	ИменаДействийОбработкиПолучения.Добавить(ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхБюджета")); 
	ИменаДействийОбработкиПолучения.Добавить(ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхГрафиковДоговоров")); 
	
	Если ТекущаяСтрока.Имя = "Настройка" И НЕ ИменаДействийОбработкиПолучения.Найти(ТекДействие) = Неопределено Тогда
	
		 ИмяОбработки = "Обработка.бит_ПолучениеДанныхБюджета";
		 
		 ОтборНастроек = Новый Структура;
		 ОтборНастроек.Вставить("КлючОбъекта", ИмяОбработки);
		 бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, ОтборНастроек);
		 
	Иначе	 
		
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАвтоматическихДействийЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПараметрыАвтоматическихДействий.ТекущиеДанные;
	
	// определяем имя действия
	СтрОтбор = Новый Структура("ИД", ТекущаяСтрока.ИДДействия);
	НайденныеСтроки = Объект.АвтоматическиеДействия.НайтиСтроки(СтрОтбор);
	
	АвтоДействие = Неопределено;
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		АвтоДействие = НайденныеСтроки[0].Действие;
		
	КонецЕсли; 
	
	ОписаниеПараметра = Неопределено;	
	НастройкиПараметров = мКэшЗначений.ПараметрыАвтоДействий[АвтоДействие];		
	Если ТипЗнч(НастройкиПараметров) = Тип("Структура") Тогда
		
		НастройкиПараметров.Свойство(ТекущаяСтрока.Имя, ОписаниеПараметра);
		
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеПараметра) = Тип("Структура") Тогда
		
		ТекОписание = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(ОписаниеПараметра.ТипСтр);
		ТекущаяСтрока.ЗначениеПараметра = ТекОписание.ПривестиЗначение(ОписаниеПараметра.ЗначениеПоУмолчанию);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыАвтоматическихДействийЗначениеПараметраАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;			 	
	
	ТекущаяСтрока = Элементы.ПараметрыАвтоматическихДействий.ТекущиеДанные;
	
	// определяем имя действия
	СтрОтбор = Новый Структура("ИД", ТекущаяСтрока.ИДДействия);
	НайденныеСтроки = Объект.АвтоматическиеДействия.НайтиСтроки(СтрОтбор);
	
	АвтоДействие = Неопределено;
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		АвтоДействие = НайденныеСтроки[0].Действие;
		
	КонецЕсли; 
	
	
	Если Ожидание = 0 Тогда
		
		ОписаниеПараметра = Неопределено;	
        НастройкиПараметров = мКэшЗначений.ПараметрыАвтоДействий[АвтоДействие];		
		Если ТипЗнч(НастройкиПараметров) = Тип("Структура") Тогда
			
			НастройкиПараметров.Свойство(ТекущаяСтрока.Имя, ОписаниеПараметра);
			
		КонецЕсли; 

		
		// заполняем список выбора
		Если АвтоДействие = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАвтоматическихДействийЗадач.ПолучениеДанныхБюджета") 
			 ИЛИ АвтоДействие = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхБюджета") 
			 ИЛИ АвтоДействие = ПредопределенноеЗначение("Перечисление.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхГрафиковДоговоров")  Тогда
			
			Если ТипЗнч(ОписаниеПараметра) = Тип("Структура") Тогда
				
				Если ТекущаяСтрока.Имя = "Режим" Тогда
					
					МассивЗначенийСтр = СтрРазделить(ОписаниеПараметра.СписокВыбора,"/",Ложь);
					ТекОписание = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(ОписаниеПараметра.ТипСтр);
					
					ДанныеВыбора = Новый СписокЗначений;
					
					Для каждого ТекЗнч Из МассивЗначенийСтр Цикл
						
						ДанныеВыбора.Добавить(ТекОписание.ПривестиЗначение(ТекЗнч));
						
					КонецЦикла;	
					
				ИначеЕсли ТекущаяСтрока.Имя = "НачалоПериода" ИЛИ ТекущаяСтрока.Имя = "КонецПериода" Тогда	
					
					ДанныеВыбора = Новый СписокЗначений;
					
					Для каждого Эл Из ПараметрыПроцесса Цикл
					
						Если Эл.Значение.СодержитТип( Тип("Дата") ) Тогда
						
							 ДанныеВыбора.Добавить("#ПП."+Эл.Представление);
						
						КонецЕсли; 
					
					КонецЦикла; 
					
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;  // Ожидание = 0
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВвестиКомментарий(Команда)
	
	Текст        = Объект.Комментарий;
	Подсказка    = НСтр("ru = 'Введите текст комментария'");
	ДопПараметры = Новый Структура("ТекстКомментария", Текст);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("КомандаВвестиКомментарийЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПоказатьВводСтроки(ОповещениеОЗавершении, Текст, Подсказка, 300, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВвестиКомментарийЗавершение(Комментарий, ДопПараметры) Экспорт

	Если ПустаяСтрока(Комментарий) Тогда
		Объект.Комментарий = ДопПараметры.ТекстКомментария;
	Иначе
		Объект.Комментарий = Комментарий;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПередЗаписьюПредмета(Команда)
	
	Если РедактируетсяПередЗаписьюПредмета Тогда
		ПередЗаписьюПредметаHTML = РаскраситьКод(ПолеПередЗаписьюПредмета.ПолучитьТекст());
	КонецЕсли; 
	
	РедактируетсяПередЗаписьюПредмета = НЕ РедактируетсяПередЗаписьюПредмета;
	УправлениеСтраницамиСОбработчиками(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКодДействия(Команда)
	
	Если РедактируетсяКодДействия Тогда
		КодДействияHTML = РаскраситьКод(ПолеКодДействия.ПолучитьТекст());
	КонецЕсли; 
	
	РедактируетсяКодДействия = НЕ РедактируетсяКодДействия;
	УправлениеСтраницамиСОбработчиками(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АдресацияЗадач

&НаКлиенте
Процедура РольИсполнителяПриИзменении(Элемент)
	
	ИзменениеРолиИсполнителя();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособАдресацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектАдресацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		
		ВыборПараметровПроцессаИзСписка(Элемент.Имя, ДанныеВыбора, СтандартнаяОбработка);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектАдресацииОчистка(Элемент, СтандартнаяОбработка)
	
	ОчисткаОбъектаАдресации(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаОбъектаАдресации(Имя)
	
	ТекНастройка = Неопределено;
	НастройкиАдресации.Свойство(Имя, ТекНастройка);
	
	Если НЕ ТекНастройка = Неопределено Тогда
		
		Объект[Имя] = ТекНастройка.Тип.ПривестиЗначение(Объект[Имя]);
		
	Иначе
		
		Объект[Имя] = Неопределено;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеРолиИсполнителя()

	НастройкиАдресации = Справочники.бит_РолиИсполнителей.НастройкиОбъектовАдресации(Объект.РольИсполнителя);

	бит_уп_Сервер.НазначитьТипыОбъектовАдресации(Объект, НастройкиАдресации, МаксКоличествоОбъектов);
	
	УстановитьВидимость();

КонецПроцедуры // ИзменениеРолиИсполнителя()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура УстановитьАвтоотметкиНезаполненного()

	Если Объект.Назначение = мКэшЗначений.Перечисления.бит_НазначенияПользовательскихДействий.Визирование Тогда
		
		Элементы.Виза.АвтоОтметкаНезаполненного = Истина;
		
	ИначеЕсли Объект.Назначение = мКэшЗначений.Перечисления.бит_НазначенияПользовательскихДействий.ИзменениеСтатусовОбъектов Тогда	
		
		Элементы.Статус.АвтоОтметкаНезаполненного = Истина;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВычислитьВремяНаУстановку()

	СтрВремя = Новый Структура("Дни,Часы,Минуты",ВремяНаУстановку_Дни,ВремяНаУстановку_Часы,ВремяНаУстановку_Минуты);
	Объект.ВремяНаУстановку = бит_ОбщегоНазначенияКлиентСервер.ВремяВМинуты(СтрВремя);
	
КонецПроцедуры // ВычислитьВремяНаУстановку()

&НаКлиенте
Процедура ВыборПараметровПроцессаИзСписка(ИмяРеквизита, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ТекНастройка = Неопределено;
	НастройкиАдресации.Свойство(ИмяРеквизита, ТекНастройка);
	
	Если НЕ ТекНастройка = Неопределено Тогда
		
		Для каждого Элемент Из ПараметрыПроцесса Цикл
			
			Если ТекНастройка.Тип = Элемент.Значение Тогда
				
				ДанныеВыбора.Добавить("#ПП."+Элемент.Представление,Элемент.Представление);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; // НЕ ТекНастройка = Неопределено
	
КонецПроцедуры // ВыборПараметровПроцессаИзСписка()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуПараметровПоОписаниюРеквизита(СтрокаПараметры, ОписаниеРеквизита)
	
	СтрокаПараметры.Имя          = ОписаниеРеквизита.ИмяТег;
	СтрокаПараметры.СтрТип       = ОписаниеРеквизита.СтрТип;
	СтрокаПараметры.Тип          = ОписаниеРеквизита.Тип;
	СтрокаПараметры.Обязательный = ОписаниеРеквизита.Обязательный;
	СтрокаПараметры.Значение     = ОписаниеРеквизита.Тип.ПривестиЗначение(СтрокаПараметры.Значение);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция РаскраситьКод(ТекстМодуля)
	
	Модуль = Обработки.бит_РаскрашиваниеКода.Создать();
	Возврат Модуль.РаскраситьТекст(ТекстМодуля);
	
КонецФункции

&НаСервере
Процедура БлокироватьЭлементыФормы(ЗначенияЗаполнения)

	Если ЗначенияЗаполнения.Свойство("Назначение") Тогда
		Элементы.Назначение.ТолькоПросмотр = Истина;
	КонецЕсли; 

	Если ЗначенияЗаполнения.Свойство("Алгоритм") Тогда
		Элементы.Алгоритм.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()

	ВидимостьВиза      = ?(Объект.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.Визирование,Истина,Ложь);
	ВидимостьСтатус    = ?(Объект.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.ИзменениеСтатусовОбъектов,Истина,Ложь);
	ГенерацияЗадач     = ?(Объект.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.СозданиеЗадачи, Истина, Ложь);
	ПодчиненныйПроцесс = ?(Объект.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.ПодчиненныйПроцесс, Истина, Ложь);
	
	Элементы.Виза.Видимость                   = ВидимостьВиза;
	Элементы.Виза.АктивизироватьПоУмолчанию   = ВидимостьВиза;
	Элементы.ГруппаВремяНаУстановку.Видимость = ВидимостьВиза;
	Элементы.Статус.Видимость                 = ВидимостьСтатус;
	Элементы.Статус.АктивизироватьПоУмолчанию = ВидимостьСтатус;
	Элементы.Алгоритм.Видимость				  = ГенерацияЗадач ИЛИ ПодчиненныйПроцесс;
	Элементы.ГруппаПараметры.Видимость        = ГенерацияЗадач ИЛИ ПодчиненныйПроцесс;
	Элементы.ГруппаСтраницаЗадача.Видимость   = ГенерацияЗадач;
	Элементы.ГруппаСтраницаАвтоматическиеДействия.Видимость = ГенерацияЗадач;
	Элементы.ГруппаСтраницаПередЗаписьюПредмета.Видимость   = ГенерацияЗадач;
	Элементы.АлгоритмПодчиненный.Видимость    = ПодчиненныйПроцесс;
	Если ГенерацияЗадач Тогда
		Элементы.ГруппаСтраницыАлгоритмы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе	
		Элементы.ГруппаСтраницыАлгоритмы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаСтраницыАлгоритмы.ТекущаяСтраница = Элементы.ГруппаСтраницаКодДействия;
	КонецЕсли; 
	
	Элементы.ГруппаПараметры.Заголовок = ?(ГенерацияЗадач,  НСтр("ru = 'Предмет задачи'"),  НСтр("ru = 'Параметры'"));

	ЭтоАдресацияИсполнителю = ?(Объект.СпособАдресации = 0,Истина,Ложь);
	ЭтоАдресацияРоли        = ?(Объект.СпособАдресации = 1,Истина,Ложь);
	
	Элементы.Исполнитель.Видимость         = ЭтоАдресацияИсполнителю;
	Элементы.ГруппаАдресацияРоли.Видимость = ЭтоАдресацияРоли;
	
	бит_уп_Сервер.НастроитьПоляОбъектовАдресации(Элементы, НастройкиАдресации, МаксКоличествоОбъектов);	
	
	Элементы.ДополнительныеПараметры.ИзменятьСоставСтрок = НЕ ПодчиненныйПроцесс;
	Элементы.ДополнительныеПараметрыИмя.ТолькоПросмотр   = ПодчиненныйПроцесс;
	Элементы.ДополнительныеПараметрыЗначение.ВыбиратьТип = НЕ ПодчиненныйПроцесс;
	
	ЕстьПараметрыПроцесса = ?(ПараметрыПроцесса.Количество() > 0, Истина, Ложь);
	Элементы.ОбъектАдресации_1.КнопкаСпискаВыбора = ЕстьПараметрыПроцесса;
	Элементы.ОбъектАдресации_2.КнопкаСпискаВыбора = ЕстьПараметрыПроцесса;
	Элементы.ОбъектАдресации_3.КнопкаСпискаВыбора = ЕстьПараметрыПроцесса;
	Элементы.ДополнительныеПараметрыЗначение.КнопкаСпискаВыбора = ЕстьПараметрыПроцесса;
	
	ЕстьРеквизитыПредмета = ?(РеквизитыПредмета.Количество() > 0, Истина, Ложь);
	Элементы.ДополнительныеПараметрыИмя.КнопкаСпискаВыбора = ЕстьРеквизитыПредмета;
	
	Элементы.ГруппаНаПроверку.Видимость = Объект.ЭтоПроверочнаяЗадача И ГенерацияЗадач;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницамиСОбработчиками(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Если Форма.РедактируетсяПередЗаписьюПредмета Тогда
		Элементы.ГруппаСтраницаПередЗаписьюПредмета.Заголовок = НСтр("ru = 'Перед записью предмета (!)'");
		Элементы.РедактироватьПередЗаписьюПредмета.Картинка = БиблиотекаКартинок.Записать;
		Элементы.СтраницыПередЗаписьюПредмета.ТекущаяСтраница = Элементы.СтраницаПередЗаписьюПредмета;
	Иначе
		Элементы.ГруппаСтраницаПередЗаписьюПредмета.Заголовок = НСтр("ru = 'Перед записью предмета'");
		Элементы.РедактироватьПередЗаписьюПредмета.Картинка = БиблиотекаКартинок.Изменить;
		Элементы.СтраницыПередЗаписьюПредмета.ТекущаяСтраница = Элементы.СтраницаПередЗаписьюПредметаHTML;
	КонецЕсли;
	
	Если Форма.РедактируетсяКодДействия Тогда
		Элементы.ГруппаСтраницаКодДействия.Заголовок = НСтр("ru = 'Код действия (!)'");
		Элементы.РедактироватьКодДействия.Картинка = БиблиотекаКартинок.Записать;
		Элементы.СтраницыКодДействия.ТекущаяСтраница = Элементы.СтраницаКодДействия;
	Иначе
		Элементы.ГруппаСтраницаКодДействия.Заголовок = НСтр("ru = 'Код действия'");
		Элементы.РедактироватьКодДействия.Картинка = БиблиотекаКартинок.Изменить;
		Элементы.СтраницыКодДействия.ТекущаяСтраница = Элементы.СтраницаКодДействияHTML;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	КэшПеречисления      = Новый Структура;
	КэшПеречисления.Вставить("бит_НазначенияПользовательскихДействий",
		бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_НазначенияПользовательскихДействий));
	КэшПеречисления.Вставить("бит_ВидыОбъектовСистемы",
		бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОбъектовСистемы));
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Параметры автоматических действий
	ПараметрыАвтоДействий = Новый Соответствие;
	
	ОписаниеПараметраНастройка = ОписаниеПараметраДействия();
	ОписаниеПараметраНастройка.Имя    = "Настройка";
	ОписаниеПараметраНастройка.ТипСтр = "СправочникСсылка.бит_СохраненныеНастройки";
	
	ОписаниеПараметраРежим = ОписаниеПараметраДействия();
	ОписаниеПараметраРежим.Имя                 = "Режим";
	ОписаниеПараметраРежим.ТипСтр              = "Строка";
	ОписаниеПараметраРежим.ЗначениеПоУмолчанию = "Загрузить";
	ОписаниеПараметраРежим.СписокВыбора        = "Загрузить/Добавить/Заменить";
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Настройка", ОписаниеПараметраНастройка);
	ПараметрыДействия.Вставить("Режим",     ОписаниеПараметраРежим);
	ПараметрыАвтоДействий.Вставить(Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.ПолучениеДанныхБюджета, ПараметрыДействия);
	
	ПараметрыДействия = Новый Структура;
	ОписаниеПараметра = ОписаниеПараметраДействия();
	ПараметрыДействия.Вставить("Настройка", ОписаниеПараметраНастройка);
	ПараметрыДействия.Вставить("Режим",     ОписаниеПараметраРежим);
	
	ОписаниеПараметра = ОписаниеПараметраДействия(); 
	ОписаниеПараметра.Имя                 = "НачалоПериода";
	ОписаниеПараметра.ТипСтр              = "Дата/Строка";
	ОписаниеПараметра.ЗначениеПоУмолчанию = Дата("00010101");
	ПараметрыДействия.Вставить("НачалоПериода", ОписаниеПараметра);
	
	ОписаниеПараметра = ОписаниеПараметраДействия(); 
	ОписаниеПараметра.Имя                 = "КонецПериода";
	ОписаниеПараметра.ТипСтр              = "Дата/Строка";
	ОписаниеПараметра.ЗначениеПоУмолчанию = Дата("00010101");
	ПараметрыДействия.Вставить("КонецПериода", ОписаниеПараметра);
	
	ПараметрыАвтоДействий.Вставить(Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхБюджета, ПараметрыДействия);
	
	ПараметрыДействия = Новый Структура;
	ОписаниеПараметра = ОписаниеПараметраДействия();
	ПараметрыДействия.Вставить("Настройка", ОписаниеПараметраНастройка);
	ПараметрыДействия.Вставить("Режим",     ОписаниеПараметраРежим);
	ПараметрыАвтоДействий.Вставить(Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхГрафиковДоговоров, ПараметрыДействия);
	
	// Получение фактических данных
	ПараметрыДействия = Новый Структура;
	ОписаниеПараметра = ОписаниеПараметраДействия();
	ОписаниеПараметра.Имя    = "ИсточникДанных";
	ОписаниеПараметра.ТипСтр = "СправочникСсылка.бит_ИсточникиДанных";
	ПараметрыДействия.Вставить("ИсточникДанных", ОписаниеПараметра);
	ПараметрыАвтоДействий.Вставить(Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.ПолучениеФактическихДанных_Заполнить, ПараметрыДействия);
	
	КэшированныеЗначения.Вставить("ПараметрыАвтоДействий", ПараметрыАвтоДействий);
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПараметраДействия()
	
	ОписаниеПараметра = Новый Структура;
	
	ОписаниеПараметра.Вставить("Имя");
	ОписаниеПараметра.Вставить("ТипСтр");
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию");
	ОписаниеПараметра.Вставить("СписокВыбора");
	ОписаниеПараметра.Вставить("Настройка");
	
	Возврат ОписаниеПараметра;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВремяНаУстановку()

	Объект.ВремяНаУстановку = Объект.Виза.ВремяНаУстановку;
    МинутыВоВремя();
	
КонецПроцедуры // ЗаполнитьВремяНаУстановку()

&НаСервере
Процедура МинутыВоВремя()

	// Заполним поля редактирования времени
	СтрВремя = бит_ОбщегоНазначенияКлиентСервер.МинутыВоВремя(Объект.ВремяНаУстановку);
	ВремяНаУстановку_Дни    = СтрВремя.Дни;
	ВремяНаУстановку_Часы   = СтрВремя.Часы;
	ВремяНаУстановку_Минуты = СтрВремя.Минуты;

КонецПроцедуры // МинутыВоВремя()

&НаСервере
Процедура НазначениеИзменение()
	
	Если Объект.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.СозданиеЗадачи Тогда
	
	  Если НЕ ЗначениеЗаполнено(Объект.Задача_Важность) Тогда
	  
	  	Объект.Задача_Важность = Перечисления.бит_уп_ВидыВажностиЗадач.Средняя;
	  
	  КонецЕсли; 	
	  
	  Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСтраницаЗадача;
	  
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // НазначениеИзменение() 

&НаСервере
Функция СформироватьСписокБыстрыхОбъектовСистемы()
	
	СписокБыстрыеОбъекты = Новый СписокЗначений;
	
	СтрКоллекции = Новый Структура;
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("бит_ФормаВводаБюджета");
	МассивИмен.Добавить("бит_БюджетнаяОперация");
	МассивИмен.Добавить("бит_РаспределениеБюджета");
	МассивИмен.Добавить("бит_ПолучениеФактическихДанных");
	МассивИмен.Добавить("бит_ЗакрытиеСчетов");
	МассивИмен.Добавить("бит_Проформы");	
	
	СтрКоллекции.Вставить("Документы", МассивИмен);
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("бит_ЭкземплярыОтчетов");
	
	СтрКоллекции.Вставить("Справочники", МассивИмен);
	
	Для каждого КиЗ Из СтрКоллекции Цикл
		
		ИмяКоллекции = КиЗ.Ключ;
		МассивИмен   = КиЗ.Значение;
		Для каждого ИмяОбъекта Из МассивИмен Цикл
			
			ОбМета = Метаданные[ИмяКоллекции].Найти(ИмяОбъекта);
			
			Если НЕ ОбМета = Неопределено Тогда
				
				ТекОбСист = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(ОбМета);
				СписокБыстрыеОбъекты.Добавить(ТекОбСист);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат СписокБыстрыеОбъекты;
	
КонецФункции // СформироватьСписокБыстрыхОбъектовСистемы()

&НаСервере
Процедура ЗаполнитьПереченьПараметровПроцесса()
	
	Если ЗначениеЗаполнено(Объект.Алгоритм) Тогда
		
		Для каждого СтрокаТаблицы Из Объект.Алгоритм.ПараметрыАлгоритма Цикл
			
			ТипПараметра = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.СтрТип);
			ПараметрыПроцесса.Добавить(ТипПараметра, СтрокаТаблицы.Имя);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьПереченьПараметровПроцесса()

&НаСервере
Процедура АлгоритмПодчиненныйИзменение()

	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
	
		Объект.Наименование = Строка(Объект.АлгоритмПодчиненный);
	
	КонецЕсли; 
	
	ЗаполнитьПараметрыПроцесса();

КонецПроцедуры // АлгоритмПодчиненныйИзменение() 

&НаСервере
Процедура ЗаполнитьПараметрыПроцесса()

	Объект.ДополнительныеПараметры.Очистить();
	
	Для каждого СтрокаТаблицы Из Объект.АлгоритмПодчиненный.ПараметрыАлгоритма Цикл
		
		НоваяСтрока = Объект.ДополнительныеПараметры.Добавить();
		НоваяСтрока.Имя          = СтрокаТаблицы.Имя;
		НоваяСтрока.СтрТип       = СтрокаТаблицы.СтрТип;
		НоваяСтрока.Значение     = СтрокаТаблицы.ЗначениеПоУмолчанию;
		НоваяСтрока.Обязательный = СтрокаТаблицы.Обязательный;
		
		НоваяСтрока.Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(НоваяСтрока.СтрТип);
		
	КонецЦикла; 

	ЭтотОбъект.Прочитать();
	
КонецПроцедуры // ЗаполнитьПараметрыПроцесса()

&НаСервере
Процедура ОбъектСистемыПриИзмененииНаСервере()

	Если Объект.ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
		Если Объект.ОбъектСистемы.ИмяОбъекта = "бит_му_НачислениеАмортизацииНМА" Тогда
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("Действие", Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.НачислениеАмортизацииОСЗаполнить);
			НайденныеСтроки = Объект.АвтоматическиеДействия.НайтиСтроки(СтрОтбор);
			Если НайденныеСтроки.Количество()>0 Тогда
				Для каждого Строка Из НайденныеСтроки Цикл
					Строка.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.НачислениеАмортизацииНМАЗаполнить;
				КонецЦикла; 
			КонецЕсли; 
		ИначеЕсли Объект.ОбъектСистемы.ИмяОбъекта = "бит_му_НачислениеАмортизацииОС" Тогда
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("Действие", Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.НачислениеАмортизацииНМАЗаполнить);
			НайденныеСтроки = Объект.АвтоматическиеДействия.НайтиСтроки(СтрОтбор);
			Если НайденныеСтроки.Количество()>0 Тогда
				Для каждого Строка Из НайденныеСтроки Цикл
					Строка.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.НачислениеАмортизацииОСЗаполнить;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		// Для документов добавляем автоматическое действие Провести.
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Действие", Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.Провести);
		
		НайденныеСтроки = Объект.АвтоматическиеДействия.НайтиСтроки(СтрОтбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.АвтоматическиеДействия.Добавить();
			НоваяСтрока.Выполнять = Истина;
			НоваяСтрока.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.Провести;
			НоваяСтрока.ИД  = Строка(Новый УникальныйИдентификатор);
		КонецЕсли; 
	КонецЕсли;
		
	ЗаполнитьРеквизитыПредмета(Истина);
	ЗаполнитьАвтоматическиеДействия();
	
	УстановитьВидимость();
   
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПредмета(ЗаполнятьОбязательные = Ложь)
	
	// Список для выбора в таблице параметров
	РеквизитыПредмета.Очистить();
	
	// Структура для быстрого поиска при проверке необходимости наличия строк в табличной части.
	Имена = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		Возврат;
	КонецЕсли; 
	
	Исключения = Новый Массив;
	Исключения.Добавить("КурсДокумента");
	Исключения.Добавить("КратностьДокумента");
	Исключения.Добавить("ВалютаДокумента");
	
	// Заполнение параметров
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектСистемы.ИмяОбъектаПолное);
	
	Если НЕ МетаОбъект = Неопределено Тогда
		
		// Стандартные реквизиты
		Если ОбщегоНазначения.ЭтоСправочник(МетаОбъект) Тогда
			ОписаниеРеквизита = НовоеОписаниеРеквизитаПредмета();
			ОписаниеРеквизита.Имя 		   = "Наименование";
			ОписаниеРеквизита.ИмяТег 	   = "#Р.Наименование";
			ОписаниеРеквизита.Тип		   = Новый ОписаниеТипов("Строка");
			ОписаниеРеквизита.СтрТип 	   = "Строка";
			ОписаниеРеквизита.Обязательный = Истина;
												
			РеквизитыПредмета.Добавить(ОписаниеРеквизита, "Наименование");
			Имена.Вставить("Наименование");
			ДобавитьСтрокуПараметровПоОписаниюРеквизита(ОписаниеРеквизита);
			
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаОбъект) Тогда										
			
			ОписаниеРеквизита = НовоеОписаниеРеквизитаПредмета();
			ОписаниеРеквизита.Имя 		   = "Дата";
			ОписаниеРеквизита.ИмяТег 	   = "#Р.Дата";
			ОписаниеРеквизита.Тип		   = Новый ОписаниеТипов("Дата");
			ОписаниеРеквизита.СтрТип 	   = "Дата";
			ОписаниеРеквизита.Обязательный = Истина;
												
			РеквизитыПредмета.Добавить(ОписаниеРеквизита, "Дата");
			Имена.Вставить("Дата");
			ДобавитьСтрокуПараметровПоОписаниюРеквизита(ОписаниеРеквизита);
		КонецЕсли;
		
		// Реквизиты
		Для каждого МетаРеквизит Из МетаОбъект.Реквизиты Цикл
			
			ИмяРеквизита    = МетаРеквизит.Имя;			
			МассивТипов 	= МетаРеквизит.Тип.Типы();
			МетаРеквизитТип = Новый ОписаниеТипов(МассивТипов);
			
			СтрТип       = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(МетаРеквизитТип);
			Обязательный = (МетаРеквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
			
			// Частные случаи обязательных реквизитов.			
			Если МетаОбъект.Имя = "бит_ПереоценкаВалютныхДенежныхСтатей" И МетаРеквизит.Имя = "Организация" Тогда
				Обязательный = Истина;
			ИначеЕсли МетаОбъект.Имя = "бит_РаспределениеБюджета" И МетаРеквизит.Имя = "НастройкаРаспределения" Тогда
				Обязательный = Истина;
			ИначеЕсли МетаОбъект.Имя = "бит_ЗакрытиеСчетов" И МетаРеквизит.Имя = "Организация" Тогда
				Обязательный = Истина;
			ИначеЕсли МетаОбъект.Имя = "бит_му_НачислениеПроцентовПоФинИнструментам" 
				      И (МетаРеквизит.Имя = "СчетДоходов" ИЛИ МетаРеквизит.Имя = "СчетРасходов") Тогда
				
				Обязательный = Истина;
			КонецЕсли; 
			
			ОписаниеРеквизита = НовоеОписаниеРеквизитаПредмета();
			ОписаниеРеквизита.Имя 		   = ИмяРеквизита;
			ОписаниеРеквизита.ИмяТег 	   = "#Р."+ИмяРеквизита;
			ОписаниеРеквизита.Тип		   = МетаРеквизитТип;
			ОписаниеРеквизита.СтрТип 	   = СтрТип;
			ОписаниеРеквизита.Обязательный = Обязательный;
			
			РеквизитыПредмета.Добавить(ОписаниеРеквизита, МетаРеквизит.Имя);
			Имена.Вставить(МетаРеквизит.Имя);
			
			Если ЗаполнятьОбязательные И Обязательный И Исключения.Найти(МетаРеквизит.Имя) = Неопределено Тогда
				ДобавитьСтрокуПараметровПоОписаниюРеквизита(ОписаниеРеквизита);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	РеквизитыПредмета.СортироватьПоПредставлению();
	
	Если ЗаполнятьОбязательные Тогда
		
		// Проверка на наличие лишних реквизитов после изменения объекта системы.
		Индекс = Объект.ДополнительныеПараметры.Количество() - 1;
		Пока Индекс >= 0 Цикл
			СтрокаТаблицы = Объект.ДополнительныеПараметры[Индекс];
			Если Найти(СтрокаТаблицы.Имя, "#Р.") Тогда
				ИмяРеквизита  = СтрЗаменить(СтрокаТаблицы.Имя, "#Р.","");
				Если НЕ Имена.Свойство(ИмяРеквизита) Тогда
					Объект.ДополнительныеПараметры.Удалить(СтрокаТаблицы);
				КонецЕсли; 
			КонецЕсли; 
			Индекс = Индекс - 1;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НовоеОписаниеРеквизитаПредмета()

	Возврат Новый Структура("Имя, ИмяТег, Тип, СтрТип, Обязательный"); 

КонецФункции
 
&НаСервере
Процедура ДобавитьСтрокуПараметровПоОписаниюРеквизита(ОписаниеРеквизита)
	
	Отбор	  = Новый Структура("Имя", ОписаниеРеквизита.ИмяТег);
	Результат = Объект.ДополнительныеПараметры.НайтиСтроки(Отбор);
	
	Если Результат.Количество() = 0 Тогда
		НоваяСтрока = Объект.ДополнительныеПараметры.Добавить();
		ЗаполнитьСтрокуПараметровПоОписаниюРеквизита(НоваяСтрока, ОписаниеРеквизита);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура АлгоритмИзменение()
	
	ЗаполнитьПереченьПараметровПроцесса();
	
КонецПроцедуры // АлгоритмИзменение()

&НаСервере
Процедура ЗаполнитьТипыПараметров()

	Для каждого СтрокаТаблицы Из Объект.ДополнительныеПараметры Цикл
		
		СтрокаТаблицы.Тип = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.СтрТип);
		
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьТипыПараметров()

&НаСервере
Функция ОпределитьИмяФормыВыбора(ТекТип)
	
	ИмяФормыВыбора = "";
	
	МетаОбъект = Метаданные.НайтиПоТипу(ТекТип);
	Если НЕ МетаОбъект = Неопределено Тогда
		
		Имена = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(МетаОбъект.ПолноеИмя());
		
		ИмяФормыВыбора = "%ИмяКласса%.%ИмяОбъекта%.ФормаВыбора";
		
		ИмяФормыВыбора = СтрЗаменить(ИмяФормыВыбора, "%ИмяКласса%", Имена.ИмяКласса);
		ИмяФормыВыбора = СтрЗаменить(ИмяФормыВыбора, "%ИмяОбъекта%", Имена.ИмяОбъекта);
		
	КонецЕсли; 
	
	Возврат ИмяФормыВыбора;
	
КонецФункции // ОпределитьИмяФормыВыбора()

&НаСервере
Процедура ЗаполнитьАвтоматическиеДействия()
	
	Элементы.АвтоматическиеДействияДействие.СписокВыбора.Очистить();
	
	ИмяПредмета = "";
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		
		ИмяПредмета = Объект.ОбъектСистемы.ИмяОбъекта;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Задача_Предмет) Тогда	
		
		МетаПредмет = Объект.Задача_Предмет.Метаданные();
		ИмяПредмета = МетаПредмет.Имя;
		
	КонецЕсли; 
	
	ВидыДействий = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач;
	
	Если ИмяПредмета = "бит_РаспределениеБюджета" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.ЗаполнитьРаспределить);
		
	ИначеЕсли ИмяПредмета = "бит_ФормаВводаБюджета" ИЛИ ИмяПредмета = "бит_БюджетнаяОперация" Тогда 	
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.ПолучениеДанныхБюджета);
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.КопированиеДанныхБюджета);
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.КопированиеДанныхГрафиковДоговоров);
		
	ИначеЕсли ИмяПредмета = "бит_му_НачислениеПроцентовПоФинИнструментам" Тогда	
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_НачислениеФинансовыхПроцентовПоАрендеОС" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_РасчетОтложенныхНалогов" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_ЗакрытиеСчетов" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	#Область  ДокументыОСиНМА_МСФО
		
	ИначеЕсли ИмяПредмета = "бит_му_НачислениеАмортизацииОС" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.НачислениеАмортизацииОСЗаполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_НачислениеАмортизацииНМА" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.НачислениеАмортизацииНМАЗаполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_ПереоценкаНМА" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_МодернизацияОС" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_ВыбытиеОС" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_ПринятиеКУчетуОС" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_ПринятиеКУчетуНМА" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_РазнесениеСальдоНаОтчетнуюДату" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_ПеремещениеОС" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	ИначеЕсли ИмяПредмета = "бит_му_ВыбытиеНМА" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Заполнить);
		
	#КонецОбласти
		
	ИначеЕсли ИмяПредмета = "бит_ПолучениеФактическихДанных" Тогда
		
		Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.ПолучениеФактическихДанных_Заполнить);
		
	КонецЕсли; 
	
	Элементы.АвтоматическиеДействияДействие.СписокВыбора.Добавить(ВидыДействий.Провести);
	
КонецПроцедуры // ЗаполнитьАвтоматическиеДействия()

&НаКлиенте
Процедура АвтоматическиеДействияДействиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.АвтоматическиеДействия.ТекущиеДанные;

	НастройкиПараметров = мКэшЗначений.ПараметрыАвтоДействий[ТекущаяСтрока.Действие];
		
	Если ЗначениеЗаполнено(ТекущаяСтрока.Действие) И ТипЗнч(НастройкиПараметров) = Тип("Структура") Тогда
		
		 СуществующиеПараметры = Новый Структура;
		
		 СтрОтбор = Новый Структура("ИДДействия", ТекущаяСтрока.ИД);
		 НайденныеСтроки = Объект.ПараметрыАвтоматическихДействий.НайтиСтроки(СтрОтбор);
		 
		 // Проверка существующих параметров
		 КоличествоПараметров = НайденныеСтроки.Количество();
		 Для Сч = 0 По КоличествоПараметров - 1  Цикл
			 
			 Кол = КоличествоПараметров - Сч - 1;
			 СтрокаПараметры = Объект.ПараметрыАвтоматическихДействий[Кол];
			 
			 Если НЕ НастройкиПараметров.Свойство(СтрокаПараметры.Имя) Тогда
				 
				 Объект.ПараметрыАвтоматическихДействий.Удалить(СтрокаПараметры);
				 
			 Иначе
				 
				 СуществующиеПараметры.Вставить(СтрокаПараметры.Имя);
				 
			 КонецЕсли; 
			 
		 КонецЦикла; 
		 
		 // Создание новых параметров
		 
		 Для каждого КиЗ Из НастройкиПараметров Цикл
		 
		 	Если СуществующиеПараметры.Свойство(КиЗ.Ключ) Тогда
			
				  Продолжить;
			
			КонецЕсли; 
			
			ОписаниеПараметра = КиЗ.Значение;
			
			НоваяСтрока = Объект.ПараметрыАвтоматическихДействий.Добавить();
			НоваяСтрока.ИДДействия = ТекущаяСтрока.ИД;
			НоваяСтрока.Имя = КиЗ.Ключ;
			ТекОписание = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(ОписаниеПараметра.ТипСтр);
			НоваяСтрока.ЗначениеПараметра = ТекОписание.ПривестиЗначение(ОписаниеПараметра.ЗначениеПоУмолчанию);
			
		 КонецЦикла; 
		 
	Иначе	 
		
		 // удаляем значения параметров
		 СтрОтбор = Новый Структура("ИДДействия", ТекущаяСтрока.ИД);
		 НайденныеСтроки = Объект.ПараметрыАвтоматическихДействий.НайтиСтроки(СтрОтбор);
		 
		 КоличествоПараметров = НайденныеСтроки.Количество();
		 Для Сч = 0 По КоличествоПараметров - 1  Цикл
			 
			 Кол = КоличествоПараметров - Сч - 1;
			 СтрокаПараметры = Объект.ПараметрыАвтоматическихДействий[Кол];
			 Объект.ПараметрыАвтоматическихДействий.Удалить(СтрокаПараметры);
			 
		 КонецЦикла; 
		 
	КонецЕсли; 

	
КонецПроцедуры

#КонецОбласти
