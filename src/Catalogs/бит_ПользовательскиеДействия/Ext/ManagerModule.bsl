#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
    
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИб

// Выполняет поиск по наименованию группы справочника бит_ПользовательскиеДействия. 
// Если найти не удалось, создается новая группа. Используется при первоначальном заполнении ИБ.
// 
// Параметры:
//  Наименование - Строка
// 
// Возвращаемое значение:
//  Группа - СправочникСсылка.бит_ПользовательскиеДействия.
// 
Функция СоздатьГруппуДействий(Наименование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = 
    "ВЫБРАТЬ
    |	бит_ПользовательскиеДействия.Ссылка
    |ИЗ
    |	Справочник.бит_ПользовательскиеДействия КАК бит_ПользовательскиеДействия
    |ГДЕ
    |	бит_ПользовательскиеДействия.ЭтоГруппа
    |	И бит_ПользовательскиеДействия.Наименование ПОДОБНО &Наименование";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Группа = Справочники.бит_ПользовательскиеДействия.ПустаяСсылка();
	Если Выборка.Следующий() Тогда		
		 Группа = Выборка.Ссылка;		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Группа) Тогда
	
		ГруппаОб = Справочники.бит_ПользовательскиеДействия.СоздатьГруппу();
		ГруппаОб.Наименование = Наименование;
		ГруппаОб.УстановитьНовыйКод();
		
		Выполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ГруппаОб, "", "Ошибки", Истина);
		
		Если Выполнено Тогда		
			Группа = ГруппаОб.Ссылка;		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Группа;
	
КонецФункции // СоздатьГруппуДействий()
   
// Создает элемент справочника пользовательские действия, предназначенный для визирования.
// Используется при первоначальном заполнении ИБ.
// 
// Параметры:
//  Виза   - СправочникСсылка.бит_Визы.
//  Группа - СправочникСсылка.бит_Визы.
// 
// Возвращаемое значение:
//  Действие - СправочникСсылка.бит_ПользовательскиеДействия.
// 
Функция СоздатьДействиеВизирования(Виза, Группа) Экспорт
	
	Наименование = Виза.Наименование;
	Действие     = Справочники.бит_ПользовательскиеДействия.НайтиПоНаименованию(Наименование, Ложь, Группа);
	
	Если НЕ ЗначениеЗаполнено(Действие) Тогда
		
		ДействиеОб = Справочники.бит_ПользовательскиеДействия.СоздатьЭлемент();
		ДействиеОб.Наименование = Наименование;
		ДействиеОб.Родитель     = Группа;
		ДействиеОб.Назначение   = Перечисления.бит_НазначенияПользовательскихДействий.Визирование;
		ДействиеОб.Виза         = Виза;
		ДействиеОб.УстановитьНовыйКод();
		
		Выполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ДействиеОб, "", "Ошибки", Истина);
		
		Если Выполнено Тогда		
			Действие = ДействиеОб.Ссылка;		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Действие;
	
КонецФункции // СоздатьДействиеВизирования()

// Функция создает пользовательское действие по описанию. 
// Используется при создании процесса по-умолчанию.
//
// Параметры:
//  ОписаниеДействия - Структура.
//
// Возвращаемое значение:
//  Действие - СправочникСсылка.бит_ПользовательскиеДействия.
//
Функция СоздатьДействие(ОписаниеДействия, Группа) Экспорт

	Действие = Справочники.бит_ПользовательскиеДействия.НайтиПоНаименованию(ОписаниеДействия.Наименование, Ложь, Группа);
	
	Если НЕ ЗначениеЗаполнено(Действие) Тогда
		
		ДействиеОб = Справочники.бит_ПользовательскиеДействия.СоздатьЭлемент();
		ДействиеОб.Наименование = ОписаниеДействия.Наименование;
		ДействиеОб.Задача_Наименование = ОписаниеДействия.Наименование;
		ДействиеОб.Задача_Важность = Перечисления.бит_уп_ВидыВажностиЗадач.Средняя;
		ДействиеОб.Родитель     = Группа;
		ДействиеОб.Назначение   = ОписаниеДействия.Назначение;
		ДействиеОб.ОбъектСистемы = ОписаниеДействия.ОбъектСистемы;
		ДействиеОб.Исполнитель  = ОписаниеДействия.Исполнитель;
		ДействиеОб.Алгоритм = ОписаниеДействия.Алгоритм;
		
		Если ОписаниеДействия.Свойство("АвтоматическиеДействия") Тогда
		
			ДействиеОб.ВыполнятьАвтоматическиеДействия = ОписаниеДействия.ВыполнятьАвтоматическиеДействия;
			
			Для каждого ОписаниеАвтоДействия Из ОписаниеДействия.АвтоматическиеДействия Цикл
			
				НоваяСтрока = ДействиеОб.АвтоматическиеДействия.Добавить();
				НоваяСтрока.Выполнять = ОписаниеАвтоДействия.Выполнять;
				НоваяСтрока.ИД = Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач[ОписаниеАвтоДействия.Действие];
			
			КонецЦикла; 
		
		КонецЕсли; // Автоматические действия.
		
		Если ОписаниеДействия.Свойство("ДополнительныеПараметры") Тогда
		
			 Для каждого ОписаниеДопПараметра Из ОписаниеДействия.ДополнительныеПараметры Цикл
			 
			 	  НоваяСтрока = ДействиеОб.ДополнительныеПараметры.Добавить();
				  НоваяСтрока.Обязательный = ОписаниеДопПараметра.Обязательный;
				  НоваяСтрока.ЭтоВыражение = ОписаниеДопПараметра.ЭтоВыражение;
				  НоваяСтрока.СтрТип       = ОписаниеДопПараметра.СтрТип;
				  НоваяСтрока.Имя          = ОписаниеДопПараметра.Имя;
				  
				  ТекЗнч      = ОписаниеДопПараметра.Значение;
				  
				  Если Найти(ТекЗнч,"#ПП.")> 0 Тогда
					  
					  НоваяСтрока.Значение = ТекЗнч;
					  
				  ИначеЕсли ВРег(НоваяСтрока.СтрТип) = ВРег("СправочникСсылка.бит_ОбъектыСистемы") Тогда	  
					  
					  НоваяСтрока.Значение = Справочники.бит_ОбъектыСистемы.НайтиПоРеквизиту("ИмяОбъектаПолное", ОписаниеДопПараметра.Значение);
					  
				  ИначеЕсли Найти(НоваяСтрока.СтрТип, "ПеречислениеСсылка.")>0 Тогда 	  
					  
					  ИмяПолное = СтрЗаменить(НоваяСтрока.СтрТип, "Ссылка","");
					  МетаОбъект = Метаданные.НайтиПоПолномуИмени(ИмяПолное);
					  
					  НоваяСтрока.Значение = Перечисления[МетаОбъект.Имя][ОписаниеДопПараметра.Значение];
					  
				  Иначе
					  
				      ТекОписание = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(НоваяСтрока.СтрТип);					  					  
					  НоваяСтрока.Значение = ТекОписание.ПривестиЗначение();
					  
				  КонецЕсли; 
				  
			 КонецЦикла; 
		
		КонецЕсли; // Дополнительные параметры.
		
		ДействиеОб.УстановитьНовыйКод();
		
		Выполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ДействиеОб, "", "Ошибки", Истина);
		
		Если Выполнено Тогда		
			Действие = ДействиеОб.Ссылка;		
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат Действие;
	
КонецФункции // СоздатьДействие()

Процедура ОбработатьПредметыЗадачПриПереходеНаНовуюВерсию() Экспорт
	
	Назначения = Новый Массив; 
	Назначения.Добавить(Перечисления.бит_НазначенияПользовательскихДействий.ПодчиненныйПроцесс);
	Назначения.Добавить(Перечисления.бит_НазначенияПользовательскихДействий.СозданиеЗадачи);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Назначения", Назначения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользовательскиеДействия.Ссылка КАК Ссылка,
	|	ПользовательскиеДействия.Задача_Предмет КАК Задача_Предмет
	|ИЗ
	|	Справочник.бит_ПользовательскиеДействия КАК ПользовательскиеДействия
	|ГДЕ
	|	ПользовательскиеДействия.Назначение В(&Назначения)
	|	И ПользовательскиеДействия.Задача_Предмет <> НЕОПРЕДЕЛЕНО";	
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Задача_Предмет) Тогда
			ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
			ТекущийОбъект.Задача_Предмет = Неопределено;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект); 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти

#Область АвтоматическиеДействия

// Функция выполняет автоматические действия.
//
// Параметры:
//  Задача.
//
// Возвращаемое значение:
//  Результат - Строка.
//
Процедура ВыполнитьАвтоматическиеДействия(Задача) Экспорт
 
    Если ЗначениеЗаполнено(Задача.Предмет) Тогда

        ПользовательскоеДействие = Задача.ТочкаАлгоритма.ПользовательскоеДействие;

        // Выполнение автоматических действий 
        Если ПользовательскоеДействие.ВыполнятьАвтоматическиеДействия Тогда

            ПредметОбъект = Задача.Предмет.ПолучитьОбъект();

            АвтоматическиеДействия = ПользовательскоеДействие.АвтоматическиеДействия;
            ПараметрыАвтоДействий  = ПользовательскоеДействие.ПараметрыАвтоматическихДействий;

            // Параметры процесса необходимы для передачи в обработки ПолучениеДанныхБюджета, КопированиеДанныхБюджета.
            ПараметрыПроцесса = Новый Структура;

            Для каждого СтрокаТаблицы Из Задача.БизнесПроцесс.ПараметрыПроцесса Цикл
                 ПараметрыПроцесса.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
            КонецЦикла;

            Для каждого СтрокаТаблицы Из Задача.ТочкаАлгоритма.ПараметрыПроцесса Цикл
                 ПараметрыПроцесса.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
            КонецЦикла; 
				
				
            Ном = 1;
            Для каждого СтрокаАвтоДействие Из АвтоматическиеДействия Цикл

                Если НЕ СтрокаАвтоДействие.Выполнять Тогда
                    Продолжить;
                КонецЕсли;  

                РезультатДействия = КонструкторРезультатаДействия();
                Если СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.ЗаполнитьРаспределить  Тогда

                    РезультатДействия = ДействиеЗаполнитьРаспределить(ПредметОбъект);

				ИначеЕсли СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.ПолучениеДанныхБюджета
					ИЛИ СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхБюджета
					ИЛИ СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхГрафиковДоговоров Тогда

                    РезультатДействия = ДействиеПолучениеДанныхБюджета(ПредметОбъект
                                                                , ПараметрыАвтоДействий
                                                                , СтрокаАвтоДействие.ИД
                                                                , СтрокаАвтоДействие.Действие
                                                                , ПараметрыПроцесса);						

                ИначеЕсли СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.Заполнить  Тогда

                    РезультатДействия = ДействиеЗаполнить(ПредметОбъект);						

                ИначеЕсли СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.НачислениеАмортизацииОСЗаполнить  Тогда	

                    РезультатДействия = ДействиеНачислениеАмортизацииОСЗаполнить(ПредметОбъект);

                ИначеЕсли СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.НачислениеАмортизацииНМАЗаполнить Тогда	

                    РезультатДействия = ДействиеНачислениеАмортизацииНМАЗаполнить(ПредметОбъект);
                                
                ИначеЕсли СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.ПолучениеФактическихДанных_Заполнить Тогда

                    РезультатДействия = ДействиеПолучениеФактическихДанныхЗаполнить(ПредметОбъект, ПараметрыАвтоДействий, СтрокаАвтоДействие.ИД);

                ИначеЕсли СтрокаАвтоДействие.Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.Провести Тогда	

                    РезультатДействия = ДействиеПровести(ПредметОбъект);						

                КонецЕсли; 

                ТекстПротокол =  НСтр("ru = 'Выполнение автоматического действия ""%1%"".'");
                ТекстПротокол = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстПротокол, СтрокаАвтоДействие.Действие)+Символы.ПС;
                ТекстПротокол = ТекстПротокол+?(РезультатДействия.Выполнено,  НСтр("ru = 'Действие выполнено.'"),  НСтр("ru = 'Действие НЕ выполнено.'"))+Символы.ПС+РезультатДействия.Сообщение;

                // Протоколируем результат автоматического действия.
                МенеджерЗаписи = РегистрыСведений.бит_уп_ПротоколВыполненияАвтоДействийПроцесса.СоздатьМенеджерЗаписи();
                МенеджерЗаписи.Процесс = Задача.БизнесПроцесс;
                МенеджерЗаписи.Задача  = Задача.Ссылка;
                МенеджерЗаписи.ИД = Новый УникальныйИдентификатор;
                МенеджерЗаписи.Период = ТекущаяДата();

                МенеджерЗаписи.Выполнено = РезультатДействия.Выполнено;
                МенеджерЗаписи.Протокол  = ТекстПротокол;
                МенеджерЗаписи.ПорядковыйНомер = Ном;
                МенеджерЗаписи.ИмяДействия = СтрокаАвтоДействие.Действие;

                Попытка
                    МенеджерЗаписи.Записать();
                Исключение
                    ТекстСообщения =  НСтр("ru = 'Не удалось записать протокол выполнения авто-действия по задаче %1. Описание ошибки: %2.'");
                    ТекстСообщения = СтрШаблон(ТекстСообщения, Задача.Ссылка, Строка(ОписаниеОшибки()));
                КонецПопытки;

                Ном = Ном + 1;

            КонецЦикла;
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АвтоматическиеДействия

// Функция возвращает параметры автоматического действия.
//
// Возвращаемое значение:
//  ПараметрыДействия - Структура.
//
Функция ПолучитьПараметрыАвтоДействия(ТабПараметры, ИдДействия)

	СтрОтборПараметры = Новый Структура;
	СтрОтборПараметры.Вставить("ИДДействия", ИдДействия);
	
	НайденныеСтрокиПараметры = ТабПараметры.НайтиСтроки(СтрОтборПараметры);
	
	ПараметрыДействия = Новый Структура;
	Для Каждого СтрокаПараметры Из НайденныеСтрокиПараметры Цикл
		
		ПараметрыДействия.Вставить(СтрокаПараметры.Имя, СтрокаПараметры.ЗначениеПараметра);
		
	КонецЦикла;	 

	Возврат ПараметрыДействия;
	
КонецФункции // ПолучитьПараметрыАвтоДействия()

// Функция генерирует структуру для описания результата автоматического действия.
//
// Возвращаемое значение:
//  РезультатДействия - Структура.
//
Функция КонструкторРезультатаДействия()
 
 	РезультатДействия = Новый Структура;
	РезультатДействия.Вставить("ИмяКласса",   "РезультатАвтоДействия");
	РезультатДействия.Вставить("Выполнено",   Ложь);
	РезультатДействия.Вставить("КодВозврата", 0);
	РезультатДействия.Вставить("Сообщение",   "");
 
 	Возврат РезультатДействия;
 	
 КонецФункции // КонструкторРезультатаДействия()

// Процедура проводит проведенный документ и записывает непроведенный.
//
// Параметры:
//  ПредметОбъект     - ДокументОбъект.
//  РезультатДействия - Структура.
//
Процедура ПровестиЗаписатьПредмет(ПредметОбъект, РезультатДействия)
	 
	 Если ПредметОбъект.Проведен Тогда
		 
		 РезультатДействия.Выполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПредметОбъект, РежимЗаписиДокумента.Проведение,"","Ошибки");
		 
		 Если НЕ РезультатДействия.Выполнено Тогда
			 
			 РезультатДействия.КодВозврата = -4;
			 РезультатДействия.Сообщение =  НСтр("ru = 'Ошибка проведения документа.'");
			 
		 КонецЕсли; 			
		 
	 Иначе	
		 
		 РезультатДействия.Выполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПредметОбъект, РежимЗаписиДокумента.Запись,"","Ошибки");
		 
		 Если НЕ РезультатДействия.Выполнено Тогда
			 
			 РезультатДействия.КодВозврата = -3;
			 РезультатДействия.Сообщение =  НСтр("ru = 'Ошибка записи документа.'");
			 
		 КонецЕсли; 
		 
	 КонецЕсли; 
	 
 КонецПроцедуры // ПровестиПроведенный()
 
// Функция выполняет действие Провести.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_РаспределениеБюджета.
//
// Возвращаемое значение:
//  РезДанные - Структура.
//
Функция ДействиеПровести(ПредметОбъект)
	 
    РезультатДействия = КонструкторРезультатаДействия(); 

    РезультатДействия.Выполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПредметОбъект, РежимЗаписиДокумента.Проведение, "", "Ошибки");

    Если НЕ РезультатДействия.Выполнено Тогда
     
        РезультатДействия.КодВозврата = -4;
        РезультатДействия.Сообщение = НСтр("ru = 'Ошибка проведения документа.'");
     
    КонецЕсли; 			

    Возврат РезультатДействия;

КонецФункции // ДействиеПровести()
 
// Функция выполняет действие Заполнить.
//
// Параметры:
//   ПредметОбъект - ДокументОбъект.бит_РаспределениеБюджета.
//
// Возвращаемое значение:
//  РезДанные - Структура.
//
Функция ДействиеЗаполнить(ПредметОбъект)
	 
    Отказ = Ложь; 

    РезультатДействия = КонструкторРезультатаДействия(); 

    Если ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_НачислениеПроцентовПоФинИнструментам") Тогда

        ПредметОбъект.ЗаполнитьТчДанныеНачисления();

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_НачислениеФинансовыхПроцентовПоАрендеОС") Тогда

        ПредметОбъект.ЗаполнитьТчОсновныеСредства();		

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_РасчетОтложенныхНалогов") Тогда	

        РасшифровкаРасчетов = ПредметОбъект.ЗаполнитьДокумент(Новый Структура);
        ПредметОбъект.ЗаписатьРасшифровкуРасчетов(РасшифровкаРасчетов);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_ЗакрытиеСчетов") Тогда	

        ПредметОбъект.ЗаполнитьДокумент(Новый Структура);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_ПереоценкаНМА") Тогда	

        РезультатДействия = ДействиеПереоценкаНМАЗаполнитьЗаполнить(ПредметОбъект);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_МодернизацияОС") Тогда	

        РезультатДействия = ДействиеМодернизацияОСЗаполнить(ПредметОбъект);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_ВыбытиеОС") Тогда	

        РезультатДействия = ДействиеВыбытиеОСЗаполнить(ПредметОбъект);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_ПринятиеКУчетуОС") Тогда	

        РезультатДействия = ДействиеПринятиеКУчетуОСЗаполнитьЗаполнить(ПредметОбъект);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_ПринятиеКУчетуНМА") Тогда	

        РезультатДействия = ДействиеПринятиеКУчетуНМАЗаполнить(ПредметОбъект);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_РазнесениеСальдоНаОтчетнуюДату") Тогда	

        РезультатДействия = ДействиеРазнесениеСальдоНаОтчетнуюДатуЗаполнить(ПредметОбъект);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_ПеремещениеОС") Тогда	

        РезультатДействия = ДействиеПеремещениеОСЗаполнить(ПредметОбъект);

    ИначеЕсли ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_ВыбытиеНМА") Тогда	

        РезультатДействия = ДействиеВыбытиеНМАЗаполнить(ПредметОбъект);

    Иначе	

        РезультатДействия.КодВозврата = -1;
        РезультатДействия.Сообщение =  НСтр("ru = 'Действие Заполнить не предназначено для данного документа.'");
        Отказ = Истина;

    КонецЕсли;

    Если НЕ Отказ Тогда

        ПровестиЗаписатьПредмет(ПредметОбъект, РезультатДействия);

    КонецЕсли; 

    Возврат РезультатДействия;

КонецФункции // ДействиеЗаполнить()
 
// Функция выполняет заполнение документа бит_му_НачислениеАмортизацииОС.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_НачислениеАмортизацииОС.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеНачислениеАмортизацииОСЗаполнить(ПредметОбъект)

    РезультатДействия = КонструкторРезультатаДействия(); 

    Если ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_НачислениеАмортизацииОС") Тогда

        ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
        ПараметрыПодбора = ПредметОбъект.ЗаполнитьПараметрыПодбора();
        
        РезДанные = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
        ПредметОбъект.ЗаполнитьТчОсновныеСредстваПоДаннымПодбора(РезДанные, Ложь);

        ПровестиЗаписатьПредмет(ПредметОбъект, РезультатДействия);

    Иначе	

        РезультатДействия.КодВозврата = -1;
        РезультатДействия.Сообщение =  НСтр("ru = 'Действие НачислениеАмортизацииОСЗаполнить предназначено только для документа ""Начисление амортизации ОС (МСФО)"".'");

    КонецЕсли; 

    Возврат РезультатДействия;

КонецФункции // ДействиеНачислениеАмортизацииОСЗаполнить()
 
// Функция выполняет заполнение документа бит_му_НачислениеАмортизацииНМА.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_НачислениеАмортизацииНМА.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеНачислениеАмортизацииНМАЗаполнить(ПредметОбъект)

    РезультатДействия = КонструкторРезультатаДействия(); 

    Если ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_му_НачислениеАмортизацииНМА") Тогда

        ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
        ПараметрыПодбора = ПредметОбъект.ЗаполнитьПараметрыПодбора();
        
        РезДанные = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
        ПредметОбъект.ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(РезДанные, Ложь);

        ПровестиЗаписатьПредмет(ПредметОбъект, РезультатДействия);

    Иначе	

        РезультатДействия.КодВозврата = -1;
        РезультатДействия.Сообщение =  НСтр("ru = 'Действие НачислениеАмортизацииНМАЗаполнить предназначено только для документа ""Начисление амортизации НМА (МСФО)"".'");

    КонецЕсли; 

    Возврат РезультатДействия;

КонецФункции // ДействиеНачислениеАмортизацииОСЗаполнить()

// Функция выполняет заполнение документа бит_му_ВыбытиеОС.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_ВыбытиеОС.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеВыбытиеОСЗаполнить(ПредметОбъект)
 
	РезультатДействия = КонструкторРезультатаДействия(); 
	
	ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
	ПараметрыПодбора = ПредметОбъект.ЗаполнитьПараметрыПодбора();
    
    РезДанные = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	ПредметОбъект.ОбработатьПодборНМА(РезДанные);
	
 	Возврат РезультатДействия;
 	
КонецФункции // ДействиеВыбытиеОСЗаполнить()

// Функция выполняет заполнение документа бит_му_ПереоценкаНМА.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_ПереоценкаНМА.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеПереоценкаНМАЗаполнитьЗаполнить(ПредметОбъект)
 
	РезультатДействия = КонструкторРезультатаДействия(); 
	
	ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
	ПараметрыПодбора = ПредметОбъект.ЗаполнитьПараметрыПодбора();
    
    РезДанные = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	ПредметОбъект.ЗаполнитьТчНематериальныеАктивыПоДаннымПодбора(РезДанные);
	
 	Возврат РезультатДействия;
 	
КонецФункции // ДействиеПереоценкаНМАЗаполнитьЗаполнить()

// Функция выполняет заполнение документа бит_му_МодернизацияОС.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_МодернизацияОС.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеМодернизацияОСЗаполнить(ПредметОбъект)
 
	РезультатДействия = КонструкторРезультатаДействия(); 
		
	ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
	ПараметрыПодбора = ПредметОбъект.ЗаполнитьПараметрыПодбора();
    
    РезДанные = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	ПредметОбъект.ЗаполнитьОсновныеСредства(РезДанные, Истина);
	
 	Возврат РезультатДействия;
 	
КонецФункции // ДействиеМодернизацияОСЗаполнить()

// Функция выполняет заполнение документа бит_му_ПринятиеКУчетуОС.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_ПринятиеКУчетуОС.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеПринятиеКУчетуОСЗаполнитьЗаполнить(ПредметОбъект)
 
	РезультатДействия = КонструкторРезультатаДействия(); 
		
	ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
	ПараметрыПодбора = ПредметОбъект.ЗаполнитьПараметрыПодбора();
    
    РезДанные = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	ПредметОбъект.ЗаполнитьОсновныеСредства(РезДанные);
 
 	Возврат РезультатДействия;
 	
КонецФункции // ДействиеПринятиеКУчетуОСЗаполнитьЗаполнить()

// Функция выполняет заполнение документа бит_му_ПринятиеКУчетуНМА.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_ПринятиеКУчетуНМА.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеПринятиеКУчетуНМАЗаполнить(ПредметОбъект)
 
	РезультатДействия = КонструкторРезультатаДействия(); 
	
	ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
	ПараметрыПодбора = Документы.бит_му_ПринятиеКУчетуНМА.ЗаполнитьПараметрыПодбора(ПредметОбъект);
    
    РезДанные        = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	Документы.бит_му_ПринятиеКУчетуНМА.ЗаполнитьНМА(РезДанные, ПредметОбъект);
 
 	Возврат РезультатДействия;
 	
КонецФункции // ДействиеПринятиеКУчетуНМАЗаполнить()

// Функция выполняет заполнение документа бит_му_РазнесениеСальдоНаОтчетнуюДату.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_РазнесениеСальдоНаОтчетнуюДату.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеРазнесениеСальдоНаОтчетнуюДатуЗаполнить(ПредметОбъект)
 
	РезультатДействия = КонструкторРезультатаДействия(); 
	
	ПредметОбъект.ЗаполнитьТчРазнесение();
	
 	Возврат РезультатДействия;
 	
КонецФункции // ДействиеРазнесениеСальдоНаОтчетнуюДатуЗаполнить()

// Функция выполняет заполнение документа бит_му_ПеремещениеОС.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_ПеремещениеОС.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеПеремещениеОСЗаполнить(ПредметОбъект)
 
	РезультатДействия = КонструкторРезультатаДействия(); 
		
	ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
	ПараметрыПодбора = ПредметОбъект.ЗаполнитьПараметрыПодбора();
    
    РезДанные = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	ПредметОбъект.ЗаполнитьОсновныеСредства(РезДанные);
	
 	Возврат РезультатДействия;
 	
КонецФункции // ДействиеПеремещениеОСЗаполнить()

// Функция выполняет заполнение документа бит_му_ВыбытиеНМА.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_му_ВыбытиеНМА.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеВыбытиеНМАЗаполнить(ПредметОбъект)
 
	РезультатДействия = КонструкторРезультатаДействия(); 
		
	ОбработкаПодбор  = Обработки.бит_му_ПодборВНА.Создать();
	ПараметрыПодбора = ПредметОбъект.ЗаполнитьПараметрыПодбора();
    
    РезДанные = ОбработкаПодбор.ВыполнитьПодборДляЗакрытия(ПараметрыПодбора);
	ПредметОбъект.ЗаполнитьНематериальныеАктивы(РезДанные);
	
 	Возврат РезультатДействия;
 	
КонецФункции // ДействиеВыбытиеНМАЗаполнить()

// Функция выполняет действие ЗаполнитьРаспределить.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_РаспределениеБюджета.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеЗаполнитьРаспределить(ПредметОбъект)
	
	РезультатДействия = КонструкторРезультатаДействия(); 
	
	Если ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_РаспределениеБюджета") Тогда
		
		ЗаполнитьДанныеПоНастройке(ПредметОбъект);
		ЗаполнитьБазуПоНастройке(ПредметОбъект);	
		ПредметОбъект.РезультатРаспределения.Очистить();
		
		ПараметрыРаспределения = Документы.бит_РаспределениеБюджета.НовыеПараметрыРаспределения();
		ПараметрыРаспределения.Вставить("Данные", ПредметОбъект.Данные.Выгрузить());
		ПараметрыРаспределения.Вставить("База", ПредметОбъект.База.Выгрузить());
		ПараметрыРаспределения.Вставить("НастройкаРаспределения", ПредметОбъект.НастройкаРаспределения);
		
		АдресРезультата = ПоместитьВоВременноеХранилище(Новый УникальныйИдентификатор());
		Попытка
			Документы.бит_РаспределениеБюджета.РаспределитьБюджет(ПараметрыРаспределения, АдресРезультата);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Пользовательское действие.Заполнение объектов'"),УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.бит_РаспределениеБюджета, ПредметОбъект.Ссылка, 
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
				
		ПредметОбъект.РезультатРаспределения.Загрузить(ПолучитьИзВременногоХранилища(АдресРезультата).РезультатРаспределения);
		ПровестиЗаписатьПредмет(ПредметОбъект, РезультатДействия);
		
	Иначе	
		
		РезультатДействия.КодВозврата = -1;
		РезультатДействия.Сообщение =  НСтр("ru = 'Действие ЗаполнитьРаспределить предназначено только для распределения бюджета.'");
		
	КонецЕсли; 
	
	Возврат РезультатДействия;
	
КонецФункции // ДействиеЗаполнитьРаспределить()

// Процедура заполняет данные по настройке.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.
//
Процедура ЗаполнитьДанныеПоНастройке(ПредметОбъект)

	ПредметОбъект.Данные.Очистить();
	
	ТаблицаРезультат = Документы.бит_РаспределениеБюджета.ПодготовитьТаблицуЗаполнения(ПредметОбъект, Истина, ПодготовитьСтруктуруЗаполненияАналитик(Истина, ПредметОбъект));
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		
		НоваяСтрока = ПредметОбъект.Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Период = бит_Бюджетирование.ПолучитьНачалоПериода(СтрокаТаблицы.Период, СтрокаТаблицы.Сценарий.бит_Периодичность);
		
	КонецЦикла;  	
	
КонецПроцедуры // ЗаполнитьДанныеПоНастройке()

// Процедура заполняет базу по настройке.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.
//
Процедура ЗаполнитьБазуПоНастройке(ПредметОбъект)
	
	ПредметОбъект.База.Очистить();
	
	ТаблицаРезультат = Документы.бит_РаспределениеБюджета.ПодготовитьТаблицуЗаполнения(ПредметОбъект, Ложь, ПодготовитьСтруктуруЗаполненияАналитик(Ложь, ПредметОбъект));
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		
		НоваяСтрока = ПредметОбъект.База.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		НоваяСтрока.Период = бит_Бюджетирование.ПолучитьНачалоПериода(СтрокаТаблицы.Период, СтрокаТаблицы.Сценарий.бит_Периодичность);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьБазуПоНастройке()

// Функция подготавливает структуру заполнения аналитик.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.
//
// Возвращаемое значение:
//  Структура - Структура заполнения аналитик.
//
Функция ПодготовитьСтруктуруЗаполненияАналитик(ЭтоДанные, ПредметОбъект)
	
	стрЗаполнениеАналитик = Новый Структура;
	
	Если ЭтоДанные Тогда
		стрЗаполнениеАналитик.Вставить("ЦФО"			, Новый Структура("Использовать, Значение",Ложь,ПредметОбъект.ЦФО));
		стрЗаполнениеАналитик.Вставить("Проект"			, Новый Структура("Использовать, Значение",Ложь,ПредметОбъект.Проект));
		стрЗаполнениеАналитик.Вставить("СтатьяОборотов"	, Новый Структура("Использовать, Значение",Ложь,ПредметОбъект.СтатьяОборотов));
	Иначе	
		стрЗаполнениеАналитик.Вставить("ЦФО"			, Новый Структура("Использовать, Значение",Ложь,ПредметОбъект.ЦФО));
		стрЗаполнениеАналитик.Вставить("Проект"			, Новый Структура("Использовать, Значение",Ложь,ПредметОбъект.Проект));
		стрЗаполнениеАналитик.Вставить("СтатьяОборотов"	, Новый Структура("Использовать, Значение",Ложь,ПредметОбъект.СтатьяОборотов));
	КонецЕсли; 
	
	Возврат стрЗаполнениеАналитик;
	
КонецФункции

// Функция Функция выполняет действие Заполнить для ПолучениеФактическихДанных.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_ПолучениеФактическихДанных.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеПолучениеФактическихДанныхЗаполнить(ПредметОбъект, ТабПараметрыДействия, ИдДействия)

    РезультатДействия = КонструкторРезультатаДействия(); 

    Если ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_ПолучениеФактическихДанных") Тогда

        ПараметрыДействия = ПолучитьПараметрыАвтоДействия(ТабПараметрыДействия, ИдДействия);

        // Устанавливаем источник данных из параметров, если не установлен.
        СтрОтбор = Новый Структура;
        СтрОтбор.Вставить("ИсточникДанных", ПараметрыДействия.ИсточникДанных);

        НайденныеСтроки = ПредметОбъект.ИсточникиДанных.НайтиСтроки(СтрОтбор);

        Если НайденныеСтроки.Количество() = 0  Тогда

            НоваяСтрока = ПредметОбъект.ИсточникиДанных.Добавить();
            НоваяСтрока.ИсточникДанных = ПараметрыДействия.ИсточникДанных;

        КонецЕсли; 

        // Получаем данных по источнику.
        ПредметОбъект.ЗаполнитьФактическиеДанные();		
        ПровестиЗаписатьПредмет(ПредметОбъект, РезультатДействия);

    Иначе	

        РезультатДействия.КодВозврата = -1;
        РезультатДействия.Сообщение =  НСтр("ru = 'Данное действие предназначено только для документа ПолучениеФактическихДанных.'");

    КонецЕсли; 

    Возврат РезультатДействия;

КонецФункции // ДействиеПолучениеФактическихДанныхЗаполнить()
 
// Функция выполняет действие получение данных бюджета.
//
// Параметры:
//  ПредметОбъект - ДокументОбъект.бит_ПолучениеФактическихДанных.
//  ТабПараметрыДействия.
//  ИдДействия.
//  Действие.
//  ПараметрыПроцесса.
//
// Возвращаемое значение:
//  Структура - Результат действия.
//
Функция ДействиеПолучениеДанныхБюджета(ПредметОбъект, ТабПараметрыДействия, ИдДействия, Действие, ПараметрыПроцесса)
	 
    РезультатДействия     = КонструкторРезультатаДействия(); 
	ТипДокументаПриемника = ТипЗнч(ПредметОбъект);

    Если ТипДокументаПриемника = Тип("ДокументОбъект.бит_БюджетнаяОперация") 
        ИЛИ ТипДокументаПриемника = Тип("ДокументОбъект.бит_ФормаВводаБюджета") Тогда

        ПараметрыДействия = ПолучитьПараметрыАвтоДействия(ТабПараметрыДействия, ИдДействия);

        // Заполняем параметры действия из параметров процесса
        Для каждого КиЗ Из ПараметрыДействия Цикл

            Если ТипЗнч(КиЗ.Значение) = Тип("Строка") И Найти(КиЗ.Значение, "#ПП.") > 0 Тогда

                ИмяПараметра = СтрЗаменить(КиЗ.Значение, "#ПП.", "");
                
                Если ПараметрыПроцесса.Свойство(ИмяПараметра) Тогда
                    ПараметрыДействия[КиЗ.Ключ] = ПараметрыПроцесса[ИмяПараметра];
                КонецЕсли; 

            КонецЕсли; 

        КонецЦикла; 		 
		 
		ОбработкаОбъект = Обработки.бит_ПолучениеДанныхБюджета.Создать();
		 
        Если Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.ПолучениеДанныхБюджета  Тогда

            ОбработкаОбъект.РежимЗаполнения = "ПолучениеБюджета";
            РезПолучения = ОбработкаОбъект.ДействиеПолучениеДанныхБюджета(ПараметрыДействия, ПараметрыПроцесса);

        ИначеЕсли Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхБюджета Тогда

            ОбработкаОбъект.РежимЗаполнения = "КопированиеБюджета";
            РезПолучения = ОбработкаОбъект.ДействиеКопированиеДанныхБюджета(ПараметрыДействия, ПараметрыПроцесса);

        ИначеЕсли Действие = Перечисления.бит_уп_ВидыАвтоматическихДействийЗадач.КопированиеДанныхГрафиковДоговоров Тогда	 

            ОбработкаОбъект.РежимЗаполнения = "ГрафикДоговоров";
            РезПолучения = ОбработкаОбъект.ДействиеКопированиеДанныхГрафиковДоговоров(ПараметрыДействия, ПараметрыПроцесса);

        Иначе	 

            РезПолучения = Новый Структура("Выполнено", Ложь);

        КонецЕсли;		 
		 
		Если РезПолучения.Выполнено Тогда
			
			ИмяТабличнойЧасти = "БДДС";
			Если СтрСравнить(ПараметрыДействия.Режим, "Загрузить") = 0 Тогда
				ТаблицаБДДС  = ПредметОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонки();
			Иначе
				ТаблицаБДДС  = ПредметОбъект[ИмяТабличнойЧасти].Выгрузить();
			КонецЕсли;
			ТаблицаОборотыПоБюджетам = ОбработкаОбъект.ОборотыПоБюджетам.Выгрузить();
			Если СтрСравнить(ПараметрыДействия.Режим, "Заменить") = 0 Тогда
				Обработки.бит_ПолучениеДанныхБюджета.ЗаполнитьТабЧастьСЗаменой(ТаблицаОборотыПоБюджетам,
					ТаблицаБДДС, ТипДокументаПриемника);
			Иначе 
				Обработки.бит_ПолучениеДанныхБюджета.ЗаполнитьТабЧасть(ТаблицаОборотыПоБюджетам,
					ТаблицаБДДС, ТипДокументаПриемника);
			КонецЕсли;
			ПредметОбъект[ИмяТабличнойЧасти].Загрузить(ТаблицаБДДС);
			 
			Если ТипДокументаПриемника = Тип("ДокументОбъект.бит_ФормаВводаБюджета") Тогда				 
				ПредметОбъект.ВосстановитьДеревоПоДаннымВнеш();				 
			КонецЕсли; 
			 
			Если ПредметОбъект.Проведен Тогда
				 
				РезультатДействия.Выполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПредметОбъект, РежимЗаписиДокумента.Проведение,"","Ошибки");
				
				Если НЕ РезультатДействия.Выполнено Тогда
					
					РезультатДействия.КодВозврата = -4;
					РезультатДействия.Сообщение =  НСтр("ru = 'Ошибка проведения документа.'");
					
				КонецЕсли; 				
				
			Иначе	
				 
				РезультатДействия.Выполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПредметОбъект, РежимЗаписиДокумента.Запись,"","Ошибки");
				
				Если НЕ РезультатДействия.Выполнено Тогда
					
					РезультатДействия.КодВозврата = -3;
					РезультатДействия.Сообщение =  НСтр("ru = 'Ошибка записи документа.'");
					
				КонецЕсли; 
                 
            КонецЕсли;
			 
		Иначе
			 
			РезультатДействия.КодВозврата = -2;
			РезультатДействия.Сообщение =  НСтр("ru = 'Нет данных, соответствующих отбору.'");
			 
		КонецЕсли;
		 
	Иначе
		 
        РезультатДействия.КодВозврата = -1;
        РезультатДействия.Сообщение =  НСтр("ru = 'Действие предназначено только для формы ввода бюджета и бюджетной операции.'");
		 
	КонецЕсли; // проверка на тип Предмета.
	 
	Возврат РезультатДействия;
	 
КонецФункции // ДействиеПолучениеДанныхБюджета()
 
#КонецОбласти

#Область ВыполнениеПользовательскихДействий

// Функция выполняет пользовательское действие.
// 
// Параметры:
//  ПользовательскоеДействие - СправочникСсылка.бит_ПользовательскиеДействия.
//  СтруктураКонтекст  		 - Структура.
//  ЗначенияРеквизитов 		 - Структура.
//  Заголовок      			 - Строка.
//  РежимСообщений 			 - Строка: "Нет","Все","Ошибки".
// 
// Возвращаемое значение:
//   Булево.
// 
Функция ВыполнитьПользовательскоеДействие(ПользовательскоеДействие
	                                       , СтруктураКонтекст
										   , ТочкаАлгоритма = Неопределено
										   , Заголовок = ""
										   , РежимСообщений = "Ошибки") Экспорт
	
										   
	УстановитьПривилегированныйРежим(Истина);									   
										   
	ДействиеВыполнено = Истина;
	
	ВыводитьОшибки     = РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки";
	ВыводитьИнформацию = РежимСообщений = "Все";	
		
	ПараметрыДействия = Новый Структура;
	МодельОбъекта     = Новый Структура;
	Для каждого ТекущаяСтрока Из ПользовательскоеДействие.ДополнительныеПараметры Цикл
		
		ИмяПараметра = ТекущаяСтрока.Имя;
		
		Если Найти(ИмяПараметра, "#") > 0 Тогда
			
			// Реквизиты объекта. 
			ИмяРеквизита = СтрЗаменить(ИмяПараметра, "#Р.", "");
			МодельОбъекта.Вставить(ИмяРеквизита, ТекущаяСтрока.Значение);
			
		Иначе	
			
			// Параметры действия.
			Если НЕ ПараметрыДействия.Свойство(ИмяПараметра) Тогда
				ПараметрыДействия.Вставить(ИмяПараметра, ТекущаяСтрока.Значение);
			Иначе	
				ПараметрыДействия[ИмяПараметра] = ТекущаяСтрока.Значение;
			КонецЕсли; 
			
		КонецЕсли;     		
		
	КонецЦикла; 

	КонтекстТекущийОбъект = СтруктураКонтекст.Свойство("ТекущийОбъект");
	КонтекстВизы          = СтруктураКонтекст.Свойство("Визы");
	
	Алгоритм = ?(ЗначениеЗаполнено(ТочкаАлгоритма), ТочкаАлгоритма.Владелец, Справочники.бит_уп_Алгоритмы.ПустаяСсылка());	
	Если КонтекстТекущийОбъект И КонтекстВизы 
		И ПользовательскоеДействие.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.Визирование Тогда
		
		ПустоеПодразделениеОрганизации = ?(бит_ОбщегоНазначения.ЭтоУТ(), Неопределено, Справочники.ПодразделенияОрганизаций.ПустаяСсылка());	 
		
		Параметры = Новый Структура; 
		Параметры.Вставить("Виза",					   ПользовательскоеДействие.Виза);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-01 (#2873)
		//Параметры.Вставить("ВремяНаУстановку",		   ПользовательскоеДействие.ВремяНаУстановку);
		//Заменено на: устанавливается далее - для поддержки установки крайней даты при открытии этапа согласования
		Параметры.Вставить("ВремяНаУстановку",		   0);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-01 (#2873)
		Параметры.Вставить("ОбъектСвязи",			   ПользовательскоеДействие.Виза.ОбъектСвязи);
		Параметры.Вставить("СтруктурноеПодразделение", ПустоеПодразделениеОрганизации);
		Параметры.Вставить("Алгоритм",				   Алгоритм);
		Параметры.Вставить("ТочкаАлгоритма",		   ТочкаАлгоритма);
		Параметры.Вставить("ДатаЗаполнения", 		   СтруктураКонтекст.ТекущийОбъект.Дата);
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-07-23 (#3231)
		Если СтруктураКонтекст.Свойство("РасшифровкаУсловияОпределенияВизы") Тогда 
			Параметры.Вставить("РасшифровкаУсловияОпределенияВизы", СтруктураКонтекст.РасшифровкаУсловияОпределенияВизы);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-07-23 (#3231)									  
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-02 (#3393)
		Если СтруктураКонтекст.Свойство("ОК_ВидРасхода") Тогда 
			Параметры.Вставить("ОК_ВидРасхода", СтруктураКонтекст.ОК_ВидРасхода);
		КонецЕсли;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-02 (#3393)
		
		бит_Визирование.ДобавитьВизу(СтруктураКонтекст.Визы, СтруктураКонтекст.ТекущийОбъект.Ссылка, Параметры);
		 
	ИначеЕсли КонтекстТекущийОбъект
		И ПользовательскоеДействие.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.ИзменениеСтатусовОбъектов Тогда
		 
		Если Алгоритм.ВидАлгоритма = Перечисления.бит_уп_ВидыАлгоритмов.ИзменениеСтатусовОбъектов Тогда
			СтруктураКонтекст.ТекущийОбъект.ДополнительныеСвойства.Вставить("бит_НовыйСтатус", ПользовательскоеДействие.Статус);
		КонецЕсли; // Это алгоритм изменения статусов объектов.
		 
	ИначеЕсли ПользовательскоеДействие.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.СозданиеЗадачи Тогда
		 
		СтрЗадачи = Задачи.бит_уп_Задача.СтруктураЗадачи();
		ЗаполнитьЗначенияСвойств(СтрЗадачи, ПользовательскоеДействие);
		
		ЭтоПерезапускПроцесса = Ложь;
		// Адресация процесса в случае перезапуска.
		Если СтруктураКонтекст.Свойство("Процесс") Тогда
		
			 Процесс = СтруктураКонтекст.Процесс;
			 ЭтоПерезапускПроцесса = ?(Процесс.Режим = Перечисления.бит_уп_РежимыПроцессов.Перезапуск, Истина, Ложь);
			 Если Процесс.Режим = Перечисления.бит_уп_РежимыПроцессов.Перезапуск 
				  И Процесс.РежимАдресацииАвтоматическихЗадач = Перечисления.бит_уп_РежимыАдресацииАвтоматическихЗадач.АдминистраторПроцесса 
				  И ПользовательскоеДействие.ВыполнятьАвтоматическиеДействия  Тогда
			 
			 	  СтрЗадачи.СпособАдресации = 0;
				  СтрЗадачи.Исполнитель = Процесс.Автор;
			 
			 КонецЕсли; 
		
		КонецЕсли; 
		
		// Сбрасываем значение свойства "АлгоритмПодчиненный", чтобы не выполнился старт подчиненного процесса.
		СтрЗадачи.АлгоритмПодчиненный = Справочники.бит_уп_Алгоритмы.ПустаяСсылка();
		СтрЗадачи.Наименование      = ПользовательскоеДействие.Задача_Наименование;
		СтрЗадачи.Важность          = ПользовательскоеДействие.Задача_Важность;
		СтрЗадачи.Описание          = ПользовательскоеДействие.Задача_Описание;
		СтрЗадачи.ТочкаАлгоритма    = ТочкаАлгоритма;
		СтрЗадачи.Алгоритм          = ТочкаАлгоритма.Владелец;
		СтрЗадачи.ПараметрыПроцесса = СтруктураКонтекст.ПараметрыПроцесса;

		СтрЗадачи.ЭтоПроверочнаяЗадача = ПользовательскоеДействие.ЭтоПроверочнаяЗадача;
		  
		Если СтрЗадачи.ЭтоПроверочнаяЗадача Тогда

			МассивТочекНаПроверку = ПользовательскоеДействие.НаПроверку.ВыгрузитьКолонку("Точка");
			СтрЗадачи.МассивНаПроверку = Задачи.бит_уп_Задача.ПолучитьЗадачиНаПроверку(СтруктураКонтекст.Процесс, МассивТочекНаПроверку);

		КонецЕсли; 
		  
		Если ПользовательскоеДействие.ВремяНаУстановку > 0 Тогда
			СтрЗадачи.СрокИсполнения = ТекущаяДата() + ПользовательскоеДействие.ВремяНаУстановку*60;
		КонецЕсли; 

		// Заполнение предмета задачи.

		Если ЭтоПерезапускПроцесса Тогда
		
			// Предмет берем из задачи процесса-основания.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПроцессОснование", Процесс.ПроцессОснование);
			Запрос.УстановитьПараметр("ТочкаАлгоритма", ТочкаАлгоритма);
			Запрос.Текст = "ВЫБРАТЬ
			               |	бит_уп_Задача.Ссылка,
			               |	бит_уп_Задача.Предмет
			               |ИЗ
			               |	Задача.бит_уп_Задача КАК бит_уп_Задача
			               |ГДЕ
			               |	бит_уп_Задача.БизнесПроцесс = &ПроцессОснование
			               |	И бит_уп_Задача.ТочкаАлгоритма = &ТочкаАлгоритма";
						   
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
			
				 СтрЗадачи.Предмет = Выборка.Предмет;
			
			КонецЕсли; 
			
			// Если не удалось взять предмет из задачи процесса-основания, 
			// действуем так же как и в обычном процессе.
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрЗадачи.Предмет) Тогда
			
			// Прямая ссылка.
			СтрЗадачи.Предмет = ПользовательскоеДействие.Задача_Предмет;
			
			// Предмет из другой задачи.
			Если ЗначениеЗаполнено(ПользовательскоеДействие.Задача_ТочкаПредмета) Тогда
				
				ЗадачаПредмета = Задачи.бит_уп_Задача.НайтиЗадачу(СтруктураКонтекст.Процесс, ПользовательскоеДействие.Задача_ТочкаПредмета);
				
				Если ЗначениеЗаполнено(ЗадачаПредмета) И ЗначениеЗаполнено(ЗадачаПредмета.Предмет) Тогда
					
					СтрЗадачи.Предмет = ЗадачаПредмета.Предмет;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			// Создание предмета задачи.
			Если ЗначениеЗаполнено(ПользовательскоеДействие.ОбъектСистемы) Тогда
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("ОбъектСистемы", 			  ПользовательскоеДействие.ОбъектСистемы);
				ДанныеЗаполнения.Вставить("МодельОбъекта", 			  МодельОбъекта);
				ДанныеЗаполнения.Вставить("ПараметрыДействия", 		  ПараметрыДействия);
				ДанныеЗаполнения.Вставить("ПараметрыПроцесса", 		  СтруктураКонтекст.ПараметрыПроцесса);
				ДанныеЗаполнения.Вставить("ПользовательскоеДействие", ПользовательскоеДействие);
				
				ПредметСсылка = Неопределено;
				СоздатьПредметЗадачи(ДанныеЗаполнения, ПредметСсылка, РежимСообщений);
				Если ЗначениеЗаполнено(ПредметСсылка) Тогда
					СтрЗадачи.Предмет = ПредметСсылка;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		  
		ЗадачаОбъект = Задачи.бит_уп_Задача.ЗаполнитьОбъектЗадачи(СтрЗадачи, СтруктураКонтекст.МаксКоличествоОбъектов);
		СтруктураКонтекст.ЗадачаОбъект = ЗадачаОбъект;		

	ИначеЕсли ПользовательскоеДействие.Назначение = Перечисления.бит_НазначенияПользовательскихДействий.ПодчиненныйПроцесс Тогда
		  
		СтрЗадачи = Задачи.бит_уп_Задача.СтруктураЗадачи();
		ЗаполнитьЗначенияСвойств(СтрЗадачи, ПользовательскоеДействие);
		СтрЗадачи.Наименование = ПользовательскоеДействие.Наименование;
		СтрЗадачи.Важность     = Перечисления.бит_уп_ВидыВажностиЗадач.Средняя;

		ТекстОписание = НСтр("ru = 'Выполнить процесс согласно алгоритма ""%1%"".'");
		ТекстОписание = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстОписание, Строка(ПользовательскоеДействие.АлгоритмПодчиненный));
		СтрЗадачи.Описание     = ТекстОписание;

		СтрЗадачи.ТочкаАлгоритма 	  = ТочкаАлгоритма;
		СтрЗадачи.Алгоритм            = ТочкаАлгоритма.Владелец;
		СтрЗадачи.АлгоритмПодчиненный = ПользовательскоеДействие.АлгоритмПодчиненный;
		СтрЗадачи.ПараметрыПроцесса   = СтруктураКонтекст.ПараметрыПроцесса;

		Если ПользовательскоеДействие.ВремяНаУстановку > 0 Тогда

		   СтрЗадачи.СрокИсполнения = ТекущаяДата() + ПользовательскоеДействие.ВремяНаУстановку*60;

		КонецЕсли; 

		ЗадачаОбъект = Задачи.бит_уп_Задача.ЗаполнитьОбъектЗадачи(СтрЗадачи, СтруктураКонтекст.МаксКоличествоОбъектов);
		СтруктураКонтекст.ЗадачаОбъект = ЗадачаОбъект; 		  
		  
	КонецЕсли; 
	
	КодДействия = ПользовательскоеДействие.КодДействия;
	
	Если НЕ ПустаяСтрока(КодДействия) Тогда
		Попытка
			// АПК:488-выкл проектное решение.
			Выполнить(КодДействия);
			// АПК:488-вкл

			Если ВыводитьИнформацию Тогда
				Если НЕ ПустаяСтрока(Заголовок) Тогда
					ОбщегоНазначения.СообщитьПользователю(Заголовок); 	
				КонецЕсли; 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Выполнено пользовательское действие ""%1"".'"), ПользовательскоеДействие);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
			КонецЕсли; 
		Исключение
			Если ВыводитьОшибки Тогда
				Если НЕ ПустаяСтрока(Заголовок) Тогда
					ОбщегоНазначения.СообщитьПользователю(Заголовок); 	
				КонецЕсли; 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось выполнить пользовательское действие ""%1"". По причине %2.'"),
									ПользовательскоеДействие, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
			КонецЕсли; 
			ДействиеВыполнено = Ложь;
		КонецПопытки;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);									   
	
	Возврат ДействиеВыполнено;
	
КонецФункции

#КонецОбласти

Процедура СоздатьПредметЗадачи(СтруктураПараметров, Предмет, РежимСообщений = "Ошибки")
	
	ПредметОбъект = Неопределено;
	Выполнено   = Ложь;
	
	МодельОбъекта     = СтруктураПараметров.МодельОбъекта;
	ПараметрыПроцесса = СтруктураПараметров.ПараметрыПроцесса;
	ОбъектСистемы     = СтруктураПараметров.ОбъектСистемы;
	
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	// Заполнение предмета.
	Если ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
		
		ПредметОбъект  = Справочники[ОбъектСистемы.ИмяОбъекта].СоздатьЭлемент();
		МетаОбъект = ПредметОбъект.Метаданные();
		ЗаполнитьРеквизитыПредметаЗадачи(ПредметОбъект, МетаОбъект, МодельОбъекта, ПараметрыПроцесса);
		
		Если ТипЗнч(ПредметОбъект) = Тип("СправочникОбъект.бит_ЭкземплярыОтчетов") Тогда
			
			Если ПустаяСтрока(ПредметОбъект.Наименование) Тогда				
				ПредметОбъект.Наименование = Справочники.бит_ЭкземплярыОтчетов.СформироватьАвтоНаименование(ПредметОбъект);				
            КонецЕсли;
            
			ПредметОбъект.ЗаполнитьПриОткрытии = Истина;
			
			Если НЕ ЗначениеЗаполнено(ПредметОбъект.ДатаНачала) И НЕ ЗначениеЗаполнено(ПредметОбъект.ДатаОкончания) Тогда			
				ПредметОбъект.СтандартныйПериод = "ЭтотГод";				
			Иначе				
				ПредметОбъект.СтандартныйПериод = "ПроизвольныйПериод";			
			КонецЕсли; 
		
		КонецЕсли; 
		
		ПроверитьЗаполнитьВалюту(ПредметОбъект, МетаОбъект);
		
	ИначеЕсли ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда	
		
		ПредметОбъект  = Документы[ОбъектСистемы.ИмяОбъекта].СоздатьДокумент();
		МетаОбъект = ПредметОбъект.Метаданные();
		ЗаполнитьРеквизитыПредметаЗадачи(ПредметОбъект, МетаОбъект, МодельОбъекта, ПараметрыПроцесса);
        
        Если НЕ ЗначениеЗаполнено(ПредметОбъект.Дата) Тогда			
			ПредметОбъект.Дата = ТекущаяДата();
			ПредметОбъект.УстановитьВремя();
        КонецЕсли; 
        
		ПредметОбъект.УстановитьНовыйНомер();
		ПредметОбъект.Заполнить(Неопределено);
		ПроверитьЗаполнитьВалюту(ПредметОбъект, МетаОбъект);
		
		Если ТипЗнч(ПредметОбъект) = Тип("ДокументОбъект.бит_ФормаВводаБюджета") Тогда
			
			 ПредметОбъект.ЗаполнитьПриОткрытии = Истина;
			 ПредметОбъект.ПодготовитьНовуюФорму();
			
		КонецЕсли; 
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит("ЕдиницаИзмеренияСумм",МетаОбъект)  Тогда
			
			Если НЕ ЗначениеЗаполнено(ПредметОбъект.ЕдиницаИзмеренияСумм) Тогда				
				ПредметОбъект.ЕдиницаИзмеренияСумм = Перечисления.бит_ЕдиницыИзмеренияСумм.Единицы;				
			КонецЕсли; 			
			
		КонецЕсли; 
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит("РежимЗависимыхОборотов",МетаОбъект)  Тогда
			
			Если НЕ ЗначениеЗаполнено(ПредметОбъект.РежимЗависимыхОборотов) Тогда				
				ПредметОбъект.РежимЗависимыхОборотов = Перечисления.бит_РежимыЗависимыхОборотов.Автоматический;				
			КонецЕсли; 
			
		КонецЕсли;		
		
	КонецЕсли; 	
	
	// Обработчик "ПередЗаписьюПредмета".
	Если ЗначениеЗаполнено(СтруктураПараметров.ПользовательскоеДействие.КодПередЗаписьюПредмета) Тогда
		Попытка
			// АПК:488-выкл проектное решение.
			Выполнить(СтруктураПараметров.ПользовательскоеДействие.КодПередЗаписьюПредмета);
			// АПК:488-вкл
		Исключение
			Если РежимыВывода.ВыводитьОшибки Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось выполнить обработчик ""ПередЗаписьюПредмета"". По причине: %1.'"),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
			КонецЕсли; 
		КонецПопытки;
	КонецЕсли; 
	
	// Запись предмета.
	Если ПредметОбъект <> Неопределено Тогда
		Если ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
			Выполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ПредметОбъект ,"" ,"Ошибки");
		ИначеЕсли ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
			Выполнено = бит_ОбщегоНазначения.ЗаписатьПровестиДокумент(ПредметОбъект, РежимЗаписиДокумента.Запись, "", "Ошибки");
		КонецЕсли;
	КонецЕсли; 
	
	Если Выполнено Тогда
		Предмет = ПредметОбъект.Ссылка;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура проверяет и при необходимости заполняет валюту и курс/кратность предмета. 
// 
// Параметры:
//  НовОбъект  - ДокументОбъект, СправочникОбъект.
//  МетаОбъект - ОбъектМетаданных.
// 
Процедура ПроверитьЗаполнитьВалюту(НовОбъект, МетаОбъект)
	
	Если НовОбъект = Неопределено Тогда		
		Возврат;		
	КонецЕсли; 
	
	Если бит_РаботаСМетаданными.ЕстьРеквизит("ВалютаДокумента", МетаОбъект) 
		  И бит_РаботаСМетаданными.ЕстьРеквизит("КурсДокумента", МетаОбъект) 
		  И бит_РаботаСМетаданными.ЕстьРеквизит("КратностьДокумента", МетаОбъект) Тогда
		
		Если НЕ ЗначениеЗаполнено(НовОбъект.ВалютаДокумента) Тогда
			
			// Заполняем валюту и получаем курсы.
			Если бит_РаботаСМетаданными.ЕстьРеквизит("Сценарий", МетаОбъект) И ЗначениеЗаполнено(НовОбъект.Сценарий) Тогда
				
				НовОбъект.ВалютаДокумента = НовОбъект.Сценарий.Валюта;
				СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(НовОбъект.Сценарий,НовОбъект.ВалютаДокумента,НовОбъект.Дата);
				НовОбъект.КурсДокумента      = СтрКурса.Курс;
				НовОбъект.КратностьДокумента = СтрКурса.Кратность;
				
			Иначе	
				
				НовОбъект.ВалютаДокумента    = Константы.ВалютаРегламентированногоУчета.Получить();
				НовОбъект.КурсДокумента      = 1;
				НовОбъект.КратностьДокумента = 1;
				
			КонецЕсли; 
			
		ИначеЕсли НовОбъект.КурсДокумента = 0 ИЛИ НовОбъект.КратностьДокумента = 0 Тогда
			
			// Заполняем курсы.
			Если бит_РаботаСМетаданными.ЕстьРеквизит("Сценарий", МетаОбъект) Тогда
				
				СтрКурса = бит_Бюджетирование.ПолучитьКурсПоСценарию(НовОбъект.Сценарий,НовОбъект.ВалютаДокумента,НовОбъект.Дата);
				НовОбъект.КурсДокумента      = СтрКурса.Курс;
				НовОбъект.КратностьДокумента = СтрКурса.Кратность;
				
			Иначе	
				
				СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(НовОбъект.ВалютаДокумента, НовОбъект.Дата);
				НовОбъект.КурсДокумента      = СтрКурса.Курс;
				НовОбъект.КратностьДокумента = СтрКурса.Кратность;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнитьВалюту()

// Процедура заполняет реквизиты предмета задачи по модели объекта. 
// 
// Параметры:
//  ПредметОбъект     - ДокументОбъект, СправочникОбъект.
//  МетаОбъект        - ОбъектМетаданных.
//  МодельОбъекта     - Структура.
//  ПараметрыПроцесса - Структура.
// 
Процедура ЗаполнитьРеквизитыПредметаЗадачи(ПредметОбъект, МетаОбъект, МодельОбъекта, ПараметрыПроцесса)
	
	Для каждого КиЗ Из МодельОбъекта Цикл
		
		Имя = КиЗ.Ключ;
		Значение = КиЗ.Значение;
		Если бит_ОбщегоНазначения.ЕстьРеквизит(Имя, МетаОбъект) 
			 ИЛИ бит_ОбщегоНазначения.ЕстьСтандартныйРеквизит(Имя, МетаОбъект) Тогда
			
			ТекЗначение = БизнесПроцессы.бит_уп_Процесс.ПолучитьЗначениеПараметраПроцесса(КиЗ, ПараметрыПроцесса);
			ПредметОбъект[Имя] = ТекЗначение;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьРеквизитыПредметаЗадачи() 

#КонецОбласти
 
#КонецЕсли