
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СхемаКомпоновкиДанных 		= ТекущийОбъект.СхемаКомпоновкиДанных.Получить();
	фАдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ТекущийИсточникДанных 		= Объект.ИсточникДанных;
	
	ЗагрузитьНастройкиВарианта(ТекущийОбъект.ВариантОтчета.Получить(), Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	УстановитьЗаголовокИсточника();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СхемаКомпоновкиДанных") Тогда
		фАдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(ВыбранноеЗначение, УникальныйИдентификатор);
		Модифицированность = Истина;
		
		ТекстСообщения = Нстр("ru = 'Загрузить стандартные настройки?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект), ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗагрузитьНастройкиВарианта("", Истина);
	Иначе
		ЗагрузитьНастройкиВарианта("", Ложь);
	КонецЕсли; 
 	ПоказатьВариантОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСКД();
	
	ТекущийОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(фАдресСхемыКомпоновкиДанных));
	ВариантОтчета = ОбщегоНазначения.ЗначениеВСтрокуXML(КомпоновщикНастроек.ПолучитьНастройки());
	ТекущийОбъект.ВариантОтчета = Новый ХранилищеЗначения(ВариантОтчета, Новый СжатиеДанных(9));	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                               , Элемент
								   , Объект
								   , "ИсточникДанных"
								   , фКэшЗначений.СписокТиповИсточникДанных
								   , СтандартнаяОбработка);
								
КонецПроцедуры // ИсточникДанныхНачалоВыбора()

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	УстановитьЗаголовокИсточника();
	
	Если Объект.ИсточникДанных <> ТекущийИсточникДанных Тогда
		фАдресСхемыКомпоновкиДанных = "";
		ПолучитьСКД();
	КонецЕсли; 
	
	ТекущийИсточникДанных = Объект.ИсточникДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ИсточникДанных.ВыбиратьТип = Истина;
	
КонецПроцедуры // ИсточникДанныхОчистка()

&НаКлиенте
Процедура ЗаголовокОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработа = Ложь;
	
	ПараметрыФормы = Новый Структура("РедактируемыйТекст", Объект.ЗаголовокОтчета);
	
	Обработчик = Новый ОписаниеОповещения("ЗаголовокОтчетаНачалоВыбораЗавершение", ЭтотОбъект);
    Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("ОбщаяФорма.бит_ФормаРедактированияТекстаНаРазныхЯзыках",ПараметрыФормы,,,,, Обработчик, Режим);
	
КонецПроцедуры // ЗаголовокОтчетаНачалоВыбора()

// Процедура обработчик оповещения "ЗаголовокОтчетаНачалоВыбораЗавершение".
// 
// Параметры:
// Результат - Строка.
// Параметры - Структура.
// 
&НаКлиенте
Процедура ЗаголовокОтчетаНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда 	
		Объект.ЗаголовокОтчета = Результат;
		Модифицированность 	   = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроек(Элемент)
	
	НастройкиТекущейСтрокиИзменены = Истина;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныеВыбранныеПоляПриИзменении(Элемент)
	
	Если ЛокальныеВыбранныеПоля Тогда
		
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
			
	Иначе
		
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиВыбранныхПолей;

		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.Структура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьВыборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОтчету(Элемент)
	
	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.Структура.ТекущаяСтрока);
	НастройкиЭлемента =  КомпоновщикНастроек.Настройки.НастройкиЭлемента(ЭлементСтруктуры);
	Элементы.Структура.ТекущаяСтрока = КомпоновщикНастроек.Настройки.ПолучитьИдентификаторПоОбъекту(НастройкиЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныйОтборПриИзменении(Элемент)
	
	Если ЛокальныйОтбор Тогда
		
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
			
	Иначе
		
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиОтбора;

		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.Структура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьОтборЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныйПорядокПриИзменении(Элемент)
	
	Если ЛокальныйПорядок Тогда
		
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
					
	Иначе
		
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПорядка;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.Структура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьПорядокЭлемента(ЭлементСтруктуры);
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЛокальноеУсловноеОформлениеПриИзменении(Элемент)

	Если ЛокальноеУсловноеОформление Тогда
		
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
					
	Иначе
		
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.ОтключенныеНастройкиУсловногоОформления;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.Структура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьУсловноеОформлениеЭлемента(ЭлементСтруктуры);
					
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЛокальныеПараметрыВыводаПриИзменении(Элемент)
	
	Если ЛокальныеПараметрыВывода Тогда
		
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
					
	Иначе
		
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПараметровВывода;
					
		ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.Структура.ТекущаяСтрока);
		КомпоновщикНастроек.Настройки.ОчиститьПараметрыВыводаЭлемента(ЭлементСтруктуры);
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметры

&НаКлиенте
Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
	
		ТекущиеДанные = Элементы.Параметры.ТекущиеДанные;
		ТекущиеДанные.ВидПараметра = фКэшЗначений.ТекстНаРазныхЯзыках;
	
	КонецЕсли;
	
КонецПроцедуры // ПараметрыПриНачалеРедактирования()

&НаКлиенте
Процедура ПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработа = Ложь;
	
	ТекущиеДанные = Элементы.Параметры.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура("РедактируемыйТекст", ТекущиеДанные.Значение); 
	
	Обработчик = Новый ОписаниеОповещения("ПараметрыЗначениеНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
    Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("ОбщаяФорма.бит_ФормаРедактированияТекстаНаРазныхЯзыках",ПараметрыФормы,,,,, Обработчик, Режим);

КонецПроцедуры // ПараметрыЗначениеНачалоВыбора()

// Процедура обработчик оповещения "ПараметрыЗначениеНачалоВыбораЗавершение".
// 
// Параметры:
// Результат - Строка.
// ТекущиеДанные - Текущие данные строки таблицы Параметры.
// 
&НаКлиенте
Процедура ПараметрыЗначениеНачалоВыбораЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда	
		ТекущиеДанные.Значение = Результат;
		Модифицированность 	   = Истина;
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктура

&НаКлиенте
Процедура СтруктураПриАктивизацииСтроки(Элемент)
	
	ЭлементСтруктуры = КомпоновщикНастроек.Настройки.ПолучитьОбъектПоИдентификатору(Элементы.Структура.ТекущаяСтрока);
	ТипЭлемента = ТипЗнч(ЭлементСтруктуры); 
	
	Если ТипЭлемента = Неопределено  
		ИЛИ ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
		ИЛИ ТипЭлемента = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		 
		ПоляГруппировкиНедоступны();
		ВыбранныеПоляНедоступны();
		ОтборНедоступен();
		ПорядокНедоступен();
		УсловноеОформлениеНедоступно();
		ПараметрыВыводаНедоступны();
		
	ИначеЕсли ТипЭлемента = Тип("НастройкиКомпоновкиДанных") 
		ИЛИ ТипЭлемента = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		
		ЛокальныеВыбранныеПоля = Истина;
		Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Истина;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
		
		ЛокальныйОтбор = Истина;
		Элементы.ЛокальныйОтбор.ТолькоПросмотр = Истина;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
		
		ЛокальныйПорядок = Истина;
		Элементы.ЛокальныйПорядок.ТолькоПросмотр = Истина;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
		
		ЛокальноеУсловноеОформление = Истина;
		Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Истина;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
		
		ЛокальныеПараметрыВывода = Истина;
		Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Истина;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
		
	ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЭлемента = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		 
		Элементы.СтраницыПолейГруппировки.ТекущаяСтраница = Элементы.НастройкиПолейГруппировки;
			
		ВыбранныеПоляДоступны(ЭлементСтруктуры);
		ОтборДоступен(ЭлементСтруктуры);
		ПорядокДоступен(ЭлементСтруктуры);
		УсловноеОформлениеДоступно(ЭлементСтруктуры);
		ПараметрыВыводаДоступны(ЭлементСтруктуры);
		
	ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") 
		ИЛИ ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		ПоляГруппировкиНедоступны();
		ВыбранныеПоляДоступны(ЭлементСтруктуры);
		ОтборНедоступен();
		ПорядокНедоступен();
		УсловноеОформлениеДоступно(ЭлементСтруктуры);
		ПараметрыВыводаДоступны(ЭлементСтруктуры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПриАктивизацииПоля(Элемент)
		
	Перем ВыбраннаяСтраница;
	
	Если Элементы.Структура.ТекущийЭлемент.Имя = "СтруктураНаличиеВыбора" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПолейВыбора;
		
	ИначеЕсли Элементы.Структура.ТекущийЭлемент.Имя = "СтруктураНаличиеОтбора" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаОтбора;
		
	ИначеЕсли Элементы.Структура.ТекущийЭлемент.Имя = "СтруктураНаличиеПорядка" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПорядка;
		
	ИначеЕсли Элементы.Структура.ТекущийЭлемент.Имя = "СтруктураНаличиеУсловногоОформления" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаУсловногоОформления;
		
	ИначеЕсли Элементы.Структура.ТекущийЭлемент.Имя = "СтруктураНаличиеПараметровВывода" Тогда
		
		ВыбраннаяСтраница = Элементы.СтраницаПараметровВывода;
		
	КонецЕсли;
	
	Если ВыбраннаяСтраница <> Неопределено Тогда
		
		Элементы.СтраницыНастроек.ТекущаяСтраница = ВыбраннаяСтраница;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СхемаКомпоновкиОткрыть(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		Конструктор = Новый КонструкторСхемыКомпоновкиДанных;
		ПолучитьСКД();
		Конструктор.УстановитьСхему(ПолучитьИзВременногоХранилища(фАдресСхемыКомпоновкиДанных));
		Конструктор.Редактировать(ЭтотОбъект);
	#Иначе
		ПоказатьПредупреждение(,НСтр("ru='Конструктор схемы компоновки данных можно открыть только в толстом клиенте. В тонком клиенте и веб клиенте редактирование схемы компоновки данных не поддерживается.'"));
	#КонецЕсли
		
КонецПроцедуры // СхемаКомпоновкиОткрыть()

&НаКлиенте
Процедура СхемаКомпоновкиЗаполнитьПлоскаяТаблица(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СхемаКомпоновкиЗаполнитьПлоскаяТаблицаЗавершение", ЭтотОбъект);
	Если ЗначениеЗаполнено(фАдресСхемыКомпоновкиДанных) Тогда
		ТекстВопроса = Нстр("ru = 'Схема компоновки данных будет обновлена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
			
КонецПроцедуры // СхемаКомпоновкиЗаполнитьПлоскаяТаблица()

// Процедура обработчик оповещения "СхемаКомпоновкиЗаполнитьПлоскаяТаблицаЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура СхемаКомпоновкиЗаполнитьПлоскаяТаблицаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПолучитьСКД("ПлоскаяТаблица");
		Модифицированность = Истина;
		ПоказатьВариантОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаКомпоновкиЗаполнитьИерархияЭлементовДанных(Команда)
	
	Если ТипЗнч(Объект.ИсточникДанных) <> Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных") Тогда
		ТекстСообщения = Нстр("ru = 'Иерархический способ заполнения доступен только при использовании компоновки источников данных.'");
		ПоказатьПредупреждение(,ТекстСообщения, 15);
	Иначе
		Оповещение = Новый ОписаниеОповещения("СхемаКомпоновкиЗаполнитьИерархияЭлементовДанныхЗавершение", ЭтотОбъект);
		Если ЗначениеЗаполнено(фАдресСхемыКомпоновкиДанных) Тогда
			ТекстВопроса = Нстр("ru = 'Схема компоновки данных будет обновлена. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
		Иначе
			ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "СхемаКомпоновкиЗаполнитьИерархияЭлементовДанныхЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура СхемаКомпоновкиЗаполнитьИерархияЭлементовДанныхЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПолучитьСКД("ИерархияЭлементовДанных");
		Модифицированность = Истина;
		ПоказатьВариантОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаКомпоновкиОчистить(Команда)
	
	фАдресСхемыКомпоновкиДанных = "";
	ЗагрузитьНастройкиВарианта("", Ложь);
	
КонецПроцедуры // СхемаКомпоновкиОчистить()

&НаКлиенте
Процедура ЗаполнитьПараметры(Команда)
	
	ЗаполнитьПараметрыСервер();
	
КонецПроцедуры // ЗаполнитьПараметры()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПоказатьВариантОтчета()

	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаВарианта;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСхемуКомпоновкиДанныхВКомпоновщикНастроек(ЗагружатьНастройкиПоУмолчанию)
	
	Если фАдресСхемыКомпоновкиДанных <> "" Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(фАдресСхемыКомпоновкиДанных);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(фАдресСхемыКомпоновкиДанных));
	Иначе
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		АдресНовойСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресНовойСхемыКомпоновкиДанных));
	КонецЕсли;
	
	Если ЗагружатьНастройкиПоУмолчанию Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВарианта(ВариантОтчета, ЗагружатьНастройкиПоУмолчанию)
	
	Если фАдресСхемыКомпоновкиДанных <> "" Тогда
		ЗагрузитьСхемуКомпоновкиДанныхВКомпоновщикНастроек(ЗагружатьНастройкиПоУмолчанию);
		Если ВариантОтчета <> "" И ВариантОтчета <> Неопределено Тогда
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ВариантОтчета);
			Настройки = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("НастройкиКомпоновкиДанных"));
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		КонецЕсли;
	Иначе
		ЗагрузитьСхемуКомпоновкиДанныхВКомпоновщикНастроек(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляГруппировкиНедоступны()
	
	Элементы.СтраницыПолейГруппировки.ТекущаяСтраница = Элементы.НедоступныеНастройкиПолейГруппировки;
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляДоступны(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеВыбораУЭлемента(ЭлементСтруктуры) Тогда
				
		ЛокальныеВыбранныеПоля = Истина;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НастройкиВыбранныхПолей;
			
	Иначе
			
		ЛокальныеВыбранныеПоля = Ложь;
		Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиВыбранныхПолей;
			
	КонецЕсли;
		
	Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Ложь;
					
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПоляНедоступны()
	
	ЛокальныеВыбранныеПоля = Ложь;
	Элементы.ЛокальныеВыбранныеПоля.ТолькоПросмотр = Истина;
	Элементы.СтраницыПолейВыбора.ТекущаяСтраница = Элементы.НедоступныеНастройкиВыбранныхПолей;
					
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоступен(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеОтбораУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныйОтбор = Истина;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НастройкиОтбора;
			
	Иначе
		
		ЛокальныйОтбор = Ложь;
		Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.ОтключенныеНастройкиОтбора;
			
	КонецЕсли;
			
	Элементы.ЛокальныйОтбор.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНедоступен()
	
	ЛокальныйОтбор = Ложь;
	Элементы.ЛокальныйОтбор.ТолькоПросмотр = Истина;
	Элементы.СтраницыОтбора.ТекущаяСтраница = Элементы.НедоступныеНастройкиОтбора;
		
КонецПроцедуры

&НаКлиенте
Процедура ПорядокДоступен(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеПорядкаУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныйПорядок = Истина;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НастройкиПорядка;
					
	Иначе
		
		ЛокальныйПорядок = Ложь;
		Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПорядка;
					
	КонецЕсли;
			
	Элементы.ЛокальныйПорядок.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПорядокНедоступен()
	
	ЛокальныйПорядок = Ложь;
	Элементы.ЛокальныйПорядок.ТолькоПросмотр = Истина;
	Элементы.СтраницыПорядка.ТекущаяСтраница = Элементы.НедоступныеНастройкиПорядка;
		
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеДоступно(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеУсловногоОформленияУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальноеУсловноеОформление = Истина;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НастройкиУсловногоОформления;
					
	Иначе
		
		ЛокальноеУсловноеОформление = Ложь;
		Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.ОтключенныеНастройкиУсловногоОформления;
					
	КонецЕсли;
			
	Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура УсловноеОформлениеНедоступно()
	
	ЛокальноеУсловноеОформление = Ложь;
	Элементы.ЛокальноеУсловноеОформление.ТолькоПросмотр = Истина;
	Элементы.СтраницыУсловногоОформления.ТекущаяСтраница = Элементы.НедоступныеНастройкиУсловногоОформления;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводаДоступны(ЭлементСтруктуры)
	
	Если КомпоновщикНастроек.Настройки.НаличиеПараметровВыводаУЭлемента(ЭлементСтруктуры) Тогда
		
		ЛокальныеПараметрыВывода = Истина;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НастройкиПараметровВывода;
					
	Иначе
		
		ЛокальныеПараметрыВывода = Ложь;
		Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.ОтключенныеНастройкиПараметровВывода;
					
	КонецЕсли;
			
	Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыводаНедоступны()
	
	ЛокальныеПараметрыВывода = Ложь;
	Элементы.ЛокальныеПараметрыВывода.ТолькоПросмотр = Истина;
	Элементы.СтраницыПараметровВывода.ТекущаяСтраница = Элементы.НедоступныеНастройкиПараметровВывода;
	
КонецПроцедуры

// Процедура кеширует значения, используемые на клиенте. 
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	// Заполним список типов для быстрого выбора составного.
	МассивТипов  = Метаданные.Обработки.бит_ПолучениеДанныхРегистровБухгалтерии.Реквизиты.ИсточникДанных.Тип.Типы();
	СписокВыбора = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МассивТипов);
	фКэшЗначений.Вставить("СписокТиповИсточникДанных", СписокВыбора);
	
	фКэшЗначений.Вставить("ТекстНаРазныхЯзыках", Перечисления.бит_ВидыПараметровПроизвольныхОтчетов.ТекстНаРазныхЯзыках);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Устанавливает заголовок элемента "ИсточникДанных".
// 
&НаСервере
Процедура УстановитьЗаголовокИсточника()

	Элементы.ИсточникДанных.Заголовок = ?(ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных")
											, Нстр("ru = 'Источник данных'")
											, Нстр("ru = 'Способ компоновки'")); 
											
КонецПроцедуры // УстановитьЗаголовокИсточника()

&НаСервере
Процедура ПолучитьСКД(СпособЗаполнения = Неопределено)

	СКД = Неопределено;
	Если ЗначениеЗаполнено(фАдресСхемыКомпоновкиДанных) И СпособЗаполнения = Неопределено Тогда
		СКД = ПолучитьИзВременногоХранилища(фАдресСхемыКомпоновкиДанных);
		ЗагрузитьНастройки = Ложь;
	Иначе
		СпрОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_НастройкиОтчетов"));
		СКД = СпрОбъект.ЗаполнитьСхемуКомпоновки(СпособЗаполнения);
		ЗагрузитьНастройки = Истина;
	КонецЕсли;

	фАдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	Если ЗагрузитьНастройки Тогда
		ЗагрузитьНастройкиВарианта("", Истина);
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьСКД()

&НаСервере
Функция ПолучитьМасивПараметровМакета(ТекущаяСхема)

	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Параметр");
	
	Для каждого МакетКд Из ТекущаяСхема.Макеты Цикл
		Для каждого СтрокаТаблицыОбластиКд Из МакетКд.Макет Цикл
			Для каждого ЯчейкаТаблицыОбластиКд Из СтрокаТаблицыОбластиКд.Ячейки Цикл
				Для каждого ПолеОбластиКд Из ЯчейкаТаблицыОбластиКд.Элементы Цикл
					
					// Значение поля области компоновки данных     						
					ЗначениеПоля = ПолеОбластиКд.Значение;
					// Если тип значения = Строка, то нужно подставить заголовки.
					Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
						
						// Поиск вхождений параметров для замены: [ИмяПараметра].
						МассивСтрПарам = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ЗначениеПоля, "[");
						Для каждого СтрокаПоиска Из МассивСтрПарам Цикл
							
							ПозицияЗакрытия = Найти(СтрокаПоиска, "]");
							Если ПозицияЗакрытия = 0 Тогда
								Продолжить;
							Иначе	
								СтрокаПараметр = Лев(СтрокаПоиска, ПозицияЗакрытия-1);
								Если ЗначениеЗаполнено(СтрокаПараметр) Тогда
								 	НоваяСтрока = ТаблицаПараметров.Добавить();
									НоваяСтрока.Параметр = СтрокаПараметр;
								КонецЕсли;  									
							КонецЕсли;
						
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;		
			КонецЦикла;			
		КонецЦикла; 		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() = 0 Тогда
		МассивПараметров = Новый Массив;
	Иначе
		ТаблицаПараметров.Свернуть("Параметр");
		ТаблицаПараметров.Сортировать("Параметр");
		МассивПараметров = ТаблицаПараметров.ВыгрузитьКолонку("Параметр");
	КонецЕсли;

	Возврат МассивПараметров;
	
КонецФункции // ПолучитьМасивПараметровМакета()

// Процедура добавляет параметры в табличную часть, если они еще не записаны.
// 
// Параметры:
//  ИмяПараметра - Строка
// 
&НаСервере
Процедура ДобавитьПараметр(ИмяПараметра, ВидПараметра)

	НайденныеСтроки = Объект.Параметры.НайтиСтроки(Новый Структура("Параметр", ИмяПараметра));
	Если НайденныеСтроки.Количество() = 0 Тогда	
		НоваяСтрока = Объект.Параметры.Добавить();
		НоваяСтрока.Параметр     = ИмяПараметра;
		НоваяСтрока.ВидПараметра = фКэшЗначений.ТекстНаРазныхЯзыках;
	КонецЕсли;	

КонецПроцедуры // ДобавитьПараметр()

// Процедура заполняет параметры по СКД.
// 
&НаСервере
Процедура ЗаполнитьПараметрыСервер()
	
	СКДанных = ПолучитьИзВременногоХранилища(фАдресСхемыКомпоновкиДанных);
	Если СКДанных = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ВидПараметра = фКэшЗначений.ТекстНаРазныхЯзыках;
	
	ПоляНабора = СКДанных.НаборыДанных.мТаблицаРезультат.Поля;
	Для каждого ПолеНабора Из СКДанных.НаборыДанных.мТаблицаРезультат.Поля Цикл 		          		
		// Поиск параметров с заголовком в табличной части настройки.
		ДобавитьПараметр(СокрЛП(ПолеНабора.Поле), ВидПараметра);   		
	КонецЦикла;
	
	МассивПараметров = ПолучитьМасивПараметровМакета(СКДанных);
	Для каждого ИмяПараметра Из МассивПараметров Цикл   		
		ДобавитьПараметр(ИмяПараметра, ВидПараметра);  		
	КонецЦикла;
	
	Если ПоляНабора.Количество() > 0 Или МассивПараметров.Количество() > 0 Тогда
		Модифицированность = Истина; 	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыСервер()   

#КонецОбласти

