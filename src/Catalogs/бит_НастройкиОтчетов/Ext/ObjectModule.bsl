#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
	
Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства);
		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры // ПриЗаписи()	
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция заполняет схему компоновки данных по умолчанию.
// 
// 
// Возвращаемое значение:
//   СКД   - СхемаКомпоновкиДанных.
// 
Функция ЗаполнитьСхемуКомпоновки(СпособЗаполнения = "") Экспорт
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИД  = СКД.ИсточникиДанных.Добавить();
	ИД.Имя                = "ИсточникДанных1";
	ИД.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя 		   = "мТаблицаРезультат";
	НаборДанных.ИмяОбъекта 	   = "мТаблицаРезультат";
	НаборДанных.ИсточникДанных = ИД.Имя;
	
	// Поля набора данных.
	Если ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		// ++ NB
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(ИсточникДанных.ЗапросБД.ТекстЗапроса);
		ЗапросПакета = Схема.ПакетЗапросов[Схема.ПакетЗапросов.Количество()-1]; // Может быть НЕ ВЫБОР
		// -- NB
		Для каждого ПолеИсточника Из ИсточникДанных.Поля Цикл
			
			Если ПолеИсточника.Использование Тогда
				
				ИмяПоля = ?(НЕ ПустаяСтрока(ПолеИсточника.Синоним),ПолеИсточника.Синоним,ПолеИсточника.Имя);
				ЭтоИзмерение = ВРЕГ(ПолеИсточника.ВидПоля) = ВРЕГ("Поле");
				Если ЭтоИзмерение Тогда
					// ++ NB 
					Колонка = ЗапросПакета.Колонки.Найти(ПолеИсточника.Имя);
					Если НЕ Колонка = Неопределено  Тогда
					    ОписаниеТипов = Колонка.ТипЗначения;
					Иначе	
					    ОписаниеТипов = Неопределено;
					КонецЕсли; 
					// -- NB 
				Иначе	
					ОписаниеТипов = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
				КонецЕсли; 
				ДобавитьПолеНабораДанныхКомпоновки(НаборДанных,ИмяПоля,,,ОписаниеТипов,ЭтоИзмерение);			
				
				// Заполним ресурсы компоновки
				Если НЕ ЭтоИзмерение Тогда
					ПолеИтога = СКД.ПоляИтога.Добавить();
					ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
					ПолеИтога.ПутьКДанным = ИмяПоля;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных") Тогда	
		
		// Добавим поля, специфичные для работы через способы компоновки источников данных.
		ОписаниеЭлементыДанных = Новый ОписаниеТипов("СправочникСсылка.бит_ЭлементыДанных");
		ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, "Кодификатор"		 , , "Кодификатор");				
		ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, "ЭлементДанных"		 , , "Элемент данных"		  , ОписаниеЭлементыДанных);
		ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, "ГруппаЭлементДанных", , "Группа элементов данных", ОписаниеЭлементыДанных);
		
		Для каждого ПолеИсточника Из ИсточникДанных.КолонкиТаблицы Цикл
			
			ИмяПоля = ПолеИсточника.ИмяКолонки;
			ЭтоИзмерение = ВРЕГ(ПолеИсточника.ВидКолонки) = ВРЕГ("Поле");
			Если ЭтоИзмерение Тогда
				ОписаниеТипов = ПолеИсточника.ОписаниеТипов.Получить();
			Иначе	
				ОписаниеТипов = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);
			КонецЕсли; 
			ДобавитьПолеНабораДанныхКомпоновки(НаборДанных,ИмяПоля,,,ОписаниеТипов,ЭтоИзмерение);			
			
			// Заполним ресурсы компоновки
			Если НЕ ЭтоИзмерение Тогда
				ПолеИтога = СКД.ПоляИтога.Добавить();
				Если ИсточникДанных.НеРассчитыватьИтогиПоГруппам Тогда
					ПолеИтога.Выражение = "Сумма(" + ИмяПоля + ")";
				Иначе	
					ПолеИтога.Выражение = ИмяПоля;
				КонецЕсли; 
				ПолеИтога.ПутьКДанным = ИмяПоля;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	// ----------------------------------------------------------------------
	// Настройка по-умолчанию
	
	// Поля
	Для каждого ПолеНабора Из НаборДанных.Поля Цикл
		
		ВыбранноеПоле  = СКД.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки = Новый  ПолеКомпоновкиДанных(ПолеНабора.ПутьКДанным);
		ВыбранноеПоле.Поле          = ПолеКомпоновки;
		ВыбранноеПоле.Использование = Истина;
		
	КонецЦикла; 
	
	// Структура
	Если СпособЗаполнения = "ИерархияЭлементовДанных" Тогда
		
		ГруппировкаКомпоновки = СКД.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ВыбранноеПоле         = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтовыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		
		ВыбранноеПоле         = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле      	= Новый  ПолеКомпоновкиДанных("ЭлементДанных.Кодификатор");
		
		ВыбранноеПоле         = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле      	= Новый  ПолеКомпоновкиДанных("ЭлементДанных");
		
		ПолеГруппировки = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый  ПолеКомпоновкиДанных("ЭлементДанных");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
		ПолеГруппировки.ТипДополнения  = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
		
	Иначе	
		
		ГруппировкаКомпоновки = СКД.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ВыбранноеПоле         = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтовыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		
	КонецЕсли; 
	
	// Заголовок отчета
	ЗначениеПараметра = СКД.НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("Title");
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение      = Наименование;
	
	// Вывод заголовка
	ЗначениеПараметра = СКД.НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("TitleOutput");
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение      = ТипВыводаТекстаКомпоновкиДанных.Выводить;
	
	// Вывод итогов по горизонтали
	ЗначениеПараметра = СКД.НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("HorizontalOverallPlacement");
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение      = РасположениеИтоговКомпоновкиДанных.Нет;
	
	// Вывод итогов по вертикали
	ЗначениеПараметра = СКД.НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("VerticalOverallPlacement");
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение      = РасположениеИтоговКомпоновкиДанных.Нет;
	
	// Способ вывода реквизитов
	ЗначениеПараметра = СКД.НастройкиПоУмолчанию.ПараметрыВывода.Элементы.Найти("AttributePlacement");
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение      = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
	
	Возврат СКД;
	
КонецФункции // ЗаполнитьСхемуКомпоновки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура добавляет поле  в набор данных компоновки данных.
// Параметры:
//  НаборДанных  - НаборДанныхКомпоновкиДанных.
//  ИмяПоля      - Строка.
//  ПутьКДанным  - Строка.
//  Заголовок    - Строка.
// 
Процедура ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, ИмяПоля, ПутьКДанным = "", Заголовок = "",
	ОписаниеТипов = Неопределено, Измерение = Истина)

	ПолеКомпоновки = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	
	ПолеКомпоновки.Поле        = ИмяПоля;	
	ПолеКомпоновки.Заголовок   = ?(НЕ ПустаяСтрока(Заголовок)  , Заголовок  , ИмяПоля);
	ПолеКомпоновки.ПутьКДанным = ?(НЕ ПустаяСтрока(ПутьКДанным), ПутьКДанным, ИмяПоля);
	
	ПолеКомпоновки.Роль.Измерение = Измерение;
	
	Если ОписаниеТипов <> Неопределено Тогда
		ПолеКомпоновки.ТипЗначения = ОписаниеТипов;	
	КонецЕсли; 

КонецПроцедуры // ДобавитьПолеНабораДанных()

#КонецОбласти

#КонецЕсли
