
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Режим", Режим);
	Параметры.Свойство("АдресРеквизитыИсточника", АдресРеквизитыИсточника);
	Параметры.Свойство("АдресРеквизитыПриемника", АдресРеквизитыПриемника);
	Параметры.Свойство("Приемник", Приемник);
	Параметры.Свойство("Источник", Источник);
	Параметры.Свойство("ТекущееПоле", ТекущееПоле);
	
	ОбновитьДерево();
	
	// Позиционируемся в дереве на текущее поле
	Если НЕ ПустаяСтрока(ТекущееПоле) Тогда
		
		ТекущаяСтрокаДерева = Неопределено;
		Если Лев(ТекущееПоле,3) = "#И." Тогда
			
			СтрокаПоляИсточника = НайтиСтрокуДерева(ДеревоДанные, "ЗаписьИсточник");
			Если СтрокаПоляИсточника <> Неопределено Тогда
				
				ТекущаяСтрокаДерева = НайтиСтрокуДерева(СтрокаПоляИсточника,Сред(ТекущееПоле,4)); 
				
			КонецЕсли; 
			
		ИначеЕсли Лев(ТекущееПоле,3) = "#А." Тогда
			
			СтрокаПоляИсточника = НайтиСтрокуДерева(ДеревоДанные, "ДополнительныеАналитики");
			Если СтрокаПоляИсточника <> Неопределено Тогда
				
				ТекущаяСтрокаДерева = НайтиСтрокуДерева(СтрокаПоляИсточника,Сред(ТекущееПоле,4)); 				
				
			КонецЕсли; 
			
		ИначеЕсли Лев(ТекущееПоле,3) = "#П." Тогда
			
			СтрокаПоляИсточника = НайтиСтрокуДерева(ДеревоДанные, "ПользовательскиеФункции");			
			Если СтрокаПоляИсточника <> Неопределено Тогда
				
				ПозицияСкобки = Найти(ТекущееПоле,"(");
				
				Если ПозицияСкобки>0 Тогда
					
					ИмяПоля = Сред(ТекущееПоле,4,ПозицияСкобки-4); 	
					
					ТекущаяСтрокаДерева = НайтиСтрокуДерева(СтрокаПоляИсточника,ИмяПоля); 								  
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		ИначеЕсли ЭтоФункцияМодуля(ТекущееПоле) Тогда
			
			СтрокаПоляИсточника = НайтиСтрокуДерева(ДеревоДанные, "ПрочиеФункции");			
			Если СтрокаПоляИсточника <> Неопределено Тогда
				
				ПозицияСкобки = Найти(ТекущееПоле,"(");
				
				Если ПозицияСкобки>0 Тогда
					
					ИмяПоля = Сред(ТекущееПоле,1,ПозицияСкобки-1); 	
					
					ТекущаяСтрокаДерева = НайтиСтрокуДерева(СтрокаПоляИсточника,ИмяПоля); 								  
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		Иначе	
			
			ТекущаяСтрокаДерева = НайтиСтрокуДерева(ДеревоДанные, ТекущееПоле); 							
			
		КонецЕсли; 
		
		Если ТекущаяСтрокаДерева <> Неопределено Тогда
			
			Элементы.ДеревоДанные.ТекущаяСтрока = ТекущаяСтрокаДерева.ПолучитьИдентификатор();
			
		КонецЕсли; 
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоДанные, ДеревоДанные.ПолучитьЭлементы());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДанные  

&НаКлиенте
Процедура ДеревоДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоДанные.ТекущиеДанные;
	ПоКнопкеОК(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныеСинонимНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДеревоДанные.ТекущиеДанные;	
	
	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "Поля");
	ПараметрыФормы.Вставить("Источник", Источник);	
	ПараметрыФормы.Вставить("Приемник", Приемник);
	ПараметрыФормы.Вставить("АдресРеквизитыИсточника", АдресРеквизитыИсточника);
	ПараметрыФормы.Вставить("АдресРеквизитыПриемника", АдресРеквизитыПриемника);
	ПараметрыФормы.Вставить("ТекущееПоле", ТекущаяСтрока.Имя);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Оповещение = Новый ОписаниеОповещения("ОткрытиеФормаВыбораПоляЗавершение", ЭтотОбъект, ДополнительныеДанные);
	РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;		
	
	ОткрытьФорму("Справочник.бит_ПравилаЗаполненияПолейПриТрансляции.Форма.ФормаВыбораПоляУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение, РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "ОткрытиеФормаВыбораПоляЗавершение".
// 
// Параметры:
// РезСтр - Структура
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОткрытиеФормаВыбораПоляЗавершение(РезСтр, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезСтр) = Тип("Структура") И РезСтр.Действие = "ОК" Тогда
	
		ДополнительныеДанные.ТекущаяСтрока.Имя = РезСтр.ПравилоЗаполнения;
		ДополнительныеДанные.ТекущаяСтрока.Синоним = РезСтр.ПравилоЗаполнения;		
	
	КонецЕсли; 

КонецПроцедуры	// ОткрытиеФормаВыбораПоляЗавершение

&НаКлиенте
Процедура ДеревоДанныеСинонимПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоДанные.ТекущиеДанные;
	ТекущаяСтрока.Имя = ТекущаяСтрока.Синоним;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоДанные.ТекущиеДанные;
	ПоКнопкеОК(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьДерево();
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоДанные, ДеревоДанные.ПолучитьЭлементы());
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция поиска строки дерева.
// 
// Параметры:
//  СтрокаВерх.
//  Имя.
// 
// Возвращаемое значение:
//  Строка.
// 
&НаСервере
Функция НайтиСтрокуДерева(СтрокаВерх, Имя)

	НайденнаяСтрока = Неопределено;
	ТекКоллекция = СтрокаВерх.ПолучитьЭлементы();
	
	Для каждого ТекСтрока Из ТекКоллекция Цикл
	
		Если ТекСтрока.Имя = Имя Тогда
		
			НайденнаяСтрока = ТекСтрока;
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 
	

	Возврат НайденнаяСтрока;
	
КонецФункции // НайтиСтрокуДерева()

// Функция извлекает таблицу реквизитов источника из временного хранилища.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуРеквизитовИсточника() 

	ТабВрем = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресРеквизитыИсточника) Тогда
	
		ТабВрем = ПолучитьИзВременногоХранилища(АдресРеквизитыИсточника);
	
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции // ПолучитьТаблицуРеквизитовИсточника()

// Функция извлекает таблицу реквизитов приемника из временного хранилища.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуРеквизитовПриемника()

	ТабВрем = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресРеквизитыПриемника) Тогда
	
		ТабВрем = ПолучитьИзВременногоХранилища(АдресРеквизитыПриемника);
	
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции // ПолучитьТаблицуРеквизитовПриемника()

// Процедура обновляет дерево значений "ДеревоПолей".
// 
&НаСервере
Процедура ОбновитьДерево()
	
	ДеревоДанные.ПолучитьЭлементы().Очистить();
	
	ТаблицаИсточник = ПолучитьТаблицуРеквизитовИсточника();
	ТаблицаПриемник = ПолучитьТаблицуРеквизитовПриемника();
	
	НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхИзмерений();
	
	Если ТаблицаИсточник = Неопределено 
		 ИЛИ ТаблицаПриемник = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	// Из-за изменения данных строки таблицы по ссылкам
	// в хранилище дублируются данные строк. Будем работать с копией.
	ТаблицаИсточник = ТаблицаИсточник.Скопировать();
	ТаблицаПриемник = ТаблицаПриемник.Скопировать();
	// Добавление кода. Конец }}  
	
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	ДеревоПолей = Новый ДеревоЗначений;
	ДеревоПолей.Колонки.Добавить("Имя", ОписаниеСтрока);
	ДеревоПолей.Колонки.Добавить("Синоним", ОписаниеСтрока);
	ДеревоПолей.Колонки.Добавить("ДоступноДляВыбора", ОписаниеБулево);
	ДеревоПолей.Колонки.Добавить("ДоступенВыбор", ОписаниеБулево);
	ДеревоПолей.Колонки.Добавить("ПользовательскаяФункция", Новый ОписаниеТипов("СправочникСсылка.бит_ПользовательскиеФункции"));
	ДеревоПолей.Колонки.Добавить("Картинка");
	
	ЭтоВставкаКода = ?(ВРЕГ(Режим) = ВРЕГ("ВставкаКода"),Истина,Ложь);
 
	
	ЗаполнятьПоляИсточника = ?(ВРЕГ(Режим) = ВРЕГ("ПоляИсточника") 
	                           ИЛИ ВРЕГ(Режим) = ВРЕГ("ПравилаЗаполнения") 
							   ИЛИ ВРЕГ(Режим) = ВРЕГ("Поля") 
							   ИЛИ ЭтоВставкаКода,Истина,Ложь);
							   
	ЗаполнятьПоляПриемника = ?(ВРЕГ(Режим) = ВРЕГ("ПоляПриемника") 
	                            ИЛИ ВРЕГ(Режим) = ВРЕГ("ВставкаКода"),Истина,Ложь); 
								
	ЗаполнятьДопАналитики  = ?(ВРЕГ(Режим) = ВРЕГ("ПравилаЗаполнения") ,Истина,Ложь);
	ЗаполнятьФункции       = ?(ВРЕГ(Режим) = ВРЕГ("ПравилаЗаполнения") ,Истина,Ложь); 
	
	Если ЗаполнятьПоляИсточника Тогда
	
		 СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"ЗаписьИсточник","Запись источник",Ложь);
		 
		 Для каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
			 
			 Если ЭтоВставкаКода И СтрокаТаблицы.ЭтоСубконто Тогда
				 
				 Продолжить;
				 
			 КонецЕсли; 
			 
		     Справочники.бит_СтруктураКонструктораПравилТрансляции.ДобавитьИнформациюОбИзмерении(СтрокаТаблицы, НастройкиИзмерений); 
			 
			 ДобавитьСтрокуВДерево(СтрокаВерх,СтрокаТаблицы.ИмяРеквизита,СтрокаТаблицы.Синоним,Истина);
			 
		 КонецЦикла; 
		 
		 Если ЭтоВставкаКода Тогда
		 
		 	 СтрКод = "ЗначениеСубконто(ЗаписьИсточник,""Дт"",""Субконто.<ИмяСубконто>.<ИмяРеквизита>.<ИмяРеквизита>..."")";
			 ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);
			 
		 	 СтрКод = "ЗначениеСубконто(ЗаписьИсточник,""Кт"",""Субконто.<ИмяСубконто>.<ИмяРеквизита>.<ИмяРеквизита>..."")";
			 ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);
			 
			 СтрКод = "УстановитьСубконто(ЗаписьИсточник.СчетДт, ЗаписьИсточник.СубконтоДт, <""ИмяСубконто"">, <ЗначениеСубконто>)";
             ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);

			 СтрКод = "УстановитьСубконто(ЗаписьИсточник.СчетКт, ЗаписьИсточник.СубконтоКт, <""ИмяСубконто"">, <ЗначениеСубконто>)";
             ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);			 
		 
		 КонецЕсли; 
		 
	КонецЕсли; 

	Если ЗаполнятьДопАналитики Тогда
		
		 СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"ДополнительныеАналитики","Дополнительные аналитики",Ложь);
		 
		 ВыборкаПВХ = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Выбрать();
		 
		 Пока ВыборкаПВХ.Следующий() Цикл
			 
			 ИмяАналитики = бит_МеханизмТрансляции.СформироватьИмяАналитики(ВыборкаПВХ.Ссылка);
			 ДобавитьСтрокуВДерево(СтрокаВерх,ИмяАналитики,ВыборкаПВХ.Ссылка,Истина)
			 
		 КонецЦикла; 
		 
	КонецЕсли; 
	
	Если ЗаполнятьФункции Тогда
		
		 СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"ПользовательскиеФункции","Пользовательские функции",Ложь);
		 
		 Выборка = Справочники.бит_ПользовательскиеФункции.Выбрать();
		 
		 Пока Выборка.Следующий() Цикл
		 
		 	 СтрокаДерева = ДобавитьСтрокуВДерево(СтрокаВерх,Выборка.Наименование,Выборка.Наименование,Истина);
			 СтрокаДерева.ПользовательскаяФункция = Выборка.Ссылка;
			 
			 Для каждого ПараметрФункции Из Выборка.ПараметрыФункции Цикл
			 
			 	   СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева,ПараметрФункции.Наименование,ПараметрФункции.Наименование, Ложь, Истина);
			 
			 КонецЦикла; 
			 
		 
		 КонецЦикла; 
		 
		 // Функции из модуля бит_МеханизмТрансляции
		 СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"ПрочиеФункции","Прочие функции",Ложь);	
		 СтрокаДерева    = ДобавитьСтрокуВДерево(СтрокаВерх, "ПересчитатьРеглУпр", "ПересчитатьРеглУпр", Истина);		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "Сумма", "Сумма", Ложь, Истина);
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "ЗаписьПриемник.Период", "ЗаписьПриемник.Период", Ложь);		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "СтруктураШапкиДокумента", "СтруктураШапкиДокумента",Ложь);
		 
		 СтрокаДерева    = ДобавитьСтрокуВДерево(СтрокаВерх, "ПересчитатьРеглМУ", "ПересчитатьРеглМУ", Истина);		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "Сумма", "Сумма", Ложь, Истина);
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "ЗаписьПриемник.Период", "ЗаписьПриемник.Период", Ложь);		 		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "СтруктураШапкиДокумента", "СтруктураШапкиДокумента",Ложь);
		 
		 СтрокаДерева    = ДобавитьСтрокуВДерево(СтрокаВерх, "ПересчитатьРеглСценарий", "ПересчитатьРеглСценарий", Истина);		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "Сумма", "Сумма", Ложь, Истина);
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "ЗаписьПриемник.Период", "ЗаписьПриемник.Период", Ложь);
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "ЗаписьПриемник.Сценарий", "ЗаписьПриемник.Сценарий", Ложь);		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "СтруктураШапкиДокумента", "СтруктураШапкиДокумента",Ложь);
		 
		 СтрокаДерева    = ДобавитьСтрокуВДерево(СтрокаВерх, "ПересчитатьПоВалюте", "ПересчитатьПоВалюте", Истина);		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "Сумма", "Сумма", Ложь, Истина);
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "Период", "Период", Ложь, Истина);
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "ВалютаНач", "ВалютаНач", Ложь, Истина);
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "ВалютаКон", "ВалютаКон", Ложь, Истина);
		 
		 СтрокаДерева    = ДобавитьСтрокуВДерево(СтрокаВерх, "КоличествоПроводки", "КоличествоПроводки", Истина);		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "ЗаписьИсточник", "ЗаписьИсточник", Ложь);
		 
		 СтрокаДерева    = ДобавитьСтрокуВДерево(СтрокаВерх, "ВалютаОборотовБюджетирования", "ВалютаОборотовБюджетирования", Истина);		 
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "ЗаписьИсточник", "ЗаписьИсточник", Ложь);
		 СтрокаПараметры = ДобавитьСтрокуВДерево(СтрокаДерева, "СтруктураШапкиДокумента", "СтруктураШапкиДокумента",Ложь);
		 
	КонецЕсли; 
	 
	Если ЗаполнятьПоляПриемника Тогда
	
		 СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"ЗаписьПриемник","Запись приемник",Ложь);
		 
		 Для каждого СтрокаТаблицы Из ТаблицаПриемник Цикл
			 
			 Если ЭтоВставкаКода И СтрокаТаблицы.ЭтоСубконто Тогда
				 
				 Продолжить;
				 
			 КонецЕсли; 
			 
		     Справочники.бит_СтруктураКонструктораПравилТрансляции.ДобавитьИнформациюОбИзмерении(СтрокаТаблицы, НастройкиИзмерений); 
			 
			 ДобавитьСтрокуВДерево(СтрокаВерх,СтрокаТаблицы.ИмяРеквизита,СтрокаТаблицы.Синоним,Истина);
			 
		 КонецЦикла; 
		 
		 Если ЭтоВставкаКода Тогда
		 
		 	 СтрКод = "ЗначениеСубконто(ЗаписьПриемник,""Дт"",""Субконто.<ИмяСубконто>.<ИмяРеквизита>.<ИмяРеквизита>..."")";
			 ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);
			 
		 	 СтрКод = "ЗначениеСубконто(ЗаписьПриемник,""Кт"",""Субконто.<ИмяСубконто>.<ИмяРеквизита>.<ИмяРеквизита>..."")";
			 ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);
			 
			 СтрКод = "УстановитьСубконто(ЗаписьПриемник.СчетДт, ЗаписьПриемник.СубконтоДт, <""ИмяСубконто"">, <ЗначениеСубконто>)";
             ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);

			 СтрКод = "УстановитьСубконто(ЗаписьПриемник.СчетКт, ЗаписьПриемник.СубконтоКт, <""ИмяСубконто"">, <ЗначениеСубконто>)";
             ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);			 
		 
		 КонецЕсли; 
		 
	КонецЕсли; 
	
	// Прочие функции
	Если ЭтоВставкаКода Тогда
		
		 СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"ПрочиеФункции","Прочие функции",Ложь);	
		
		 СтрКод = "ЗначениеСубконто(<ЗаписьИсточник|ЗаписьПриемник>,<""Дт""|""Кт"">,""Субконто.<ИмяСубконто>.<ИмяРеквизита>.<ИмяРеквизита>..."")";
		 ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);
		 
		 СтрКод = "ИзвлечьЗначениеАналитики(<""ИмяАналитики"">,ДополнительныеАналитики)";
		 ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);
		 
		 СтрКод = "УстановитьСубконто(<ЗаписьИсточник|ЗаписьПриемник>.Счет<Дт|Кт>, <ЗаписьИсточник|ЗаписьПриемник>.Субконто<Дт|Кт>, <""ИмяСубконто"">, <ЗначениеСубконто>)";
		 ДобавитьСтрокуВДерево(СтрокаВерх,СтрКод,СтрКод,Истина);

	
	КонецЕсли; 
	
	ЗначениеВДанныеФормы(ДеревоПолей, ДеревоДанные);
	
КонецПроцедуры // Обновить()

// Процедура добавляет строку в дерево ДеревоПолей.
// 
// Параметры:
//  СтрокаРодитель    - СтрокаДереваЗначений.
//  Имя               - Строка.
//  Синоним           - Строка.
//  ДоступноДляВыбора - Булево - Можно выбирать как результат.
//  ДоступенВыбор     - Булево - можно открывать еще одну форму выбора.
// 
&НаСервере
Функция ДобавитьСтрокуВДерево(СтрокаРодитель, Имя, Синоним, ДоступноДляВыбора, ДоступенВыбор = Ложь)
	
	СтрокаДерева = СтрокаРодитель.Строки.Добавить();
	СтрокаДерева.Имя               = Имя;
	СтрокаДерева.Синоним           = Синоним;
	СтрокаДерева.ДоступноДляВыбора = ДоступноДляВыбора;
	СтрокаДерева.ДоступенВыбор     = ДоступенВыбор;
	
	ИмяРодителя           = ?(ТипЗнч(СтрокаРодитель) = Тип("СтрокаДереваЗначений"), СтрокаРодитель.Имя, "");
	
	ЭтоРеквизитФункции = Ложь;
	Если ТипЗнч(СтрокаРодитель) = Тип("СтрокаДереваЗначений") Тогда
		
		РодительРодителя    = СтрокаРодитель.Родитель;
		ЭтоРеквизитФункции  = ?(ТипЗнч(РодительРодителя) = Тип("СтрокаДереваЗначений") 
		                         И (РодительРодителя.Имя = "ПользовательскиеФункции" 
								     ИЛИ РодительРодителя.Имя = "ПрочиеФункции"), Истина, Ложь);
		
	КонецЕсли; 
	
	СтрокаДерева.Картинка = ОпределитьКартинкуСтроки(СтрокаДерева.Имя, ИмяРодителя, ЭтоРеквизитФункции, ДоступенВыбор);
	
	Возврат СтрокаДерева;
	
КонецФункции // ДобавитьСтрокуВДерево()

// Процедура - обработчик события "ПриПолученииДанных" табличного поля "ДеревоПолей".
// 
&НаСервереБезКонтекста
Функция ОпределитьКартинкуСтроки(ИмяПоля, ИмяРодителя, ЭтоРеквизитФункции, ДоступенВыбор)
	
	Если ИмяПоля = "ЗаписьИсточник" Тогда
		
		Если ЗначениеЗаполнено(ИмяРодителя) Тогда
			ТекКартинка = БиблиотекаКартинок.бит_Реквизит;
		Иначе	
			ТекКартинка = БиблиотекаКартинок.бит_Реквизиты;
		КонецЕсли; 
		
	ИначеЕсли ИмяПоля = "ЗаписьПриемник" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_Реквизиты;
		
	ИначеЕсли ИмяПоля = "ДополнительныеАналитики" Тогда
		
		ТекКартинка = БиблиотекаКартинок.РегистрСведенийЗапись;
		
	ИначеЕсли ИмяПоля = "ПользовательскиеФункции" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;
		
	ИначеЕсли ИмяПоля = "ПрочиеФункции" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;
		
	ИначеЕсли ИмяРодителя = "ПрочиеФункции" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;
		
	ИначеЕсли ИмяРодителя = "ПользовательскиеФункции" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;
		
	Иначе
		
		Если ЭтоРеквизитФункции И ДоступенВыбор Тогда
			
			ТекКартинка = БиблиотекаКартинок.бит_мхо_ПараметрФункции;
			
		Иначе
			
			ТекКартинка = БиблиотекаКартинок.бит_Реквизит;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ТекКартинка;
	
КонецФункции

// Определяет является ли данная функция, функцией определенной в модуле бит_МеханизмТрансляции.
// 
// Параметры:
//  Имя - Строка.
// 
// Возвращаемое значение:
//  Булево
// 
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФункцияМодуля(Имя)

	Имена = Новый Массив;
	Имена.Добавить("ПересчитатьРеглУпр");
	Имена.Добавить("ПересчитатьРеглМУ");
	Имена.Добавить("ПересчитатьРеглСценарий");
	Имена.Добавить("ПересчитатьПоВалюте");	
	Имена.Добавить("КоличествоПроводки");
	Имена.Добавить("ВалютаОборотовБюджетирования");
	
	ПозицияСкобки = Найти(Имя,"(");
	
	Если ПозицияСкобки>0 Тогда
		
		ИмяПоля = Сред(Имя,1,ПозицияСкобки-1); 	
		
	Иначе
		
		ИмяПоля = Имя;
		
	КонецЕсли;	
	
	флФункцияМодуля = ?(Имена.Найти(ИмяПоля) = Неопределено, Ложь, Истина); 

	Возврат флФункцияМодуля;
	
КонецФункции // ЭтоФункцияМодуля()

// Процедура формирует строковое представление параметров пользовательской функции.
// 
// Параметры:
//  СтрокаВерх                  - СтрокаДереваЗначений.
//  СтрПредставлениеПараметров  - Строка.
// 
&НаКлиенте
Процедура СформироватьПредставлениеПараметров(СтрокаВерх,СтрПредставлениеПараметров)
	
	Для каждого СтрокаДерева Из СтрокаВерх.ПолучитьЭлементы() Цикл
		
		 СтрПредставлениеПараметров = СтрПредставлениеПараметров
		                              +?(ПустаяСтрока(СтрПредставлениеПараметров),"",",")
									  +СтрокаДерева.Имя;
									  
		 СформироватьПредставлениеПараметров(СтрокаДерева,СтрПредставлениеПараметров);							  
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПредставлениеПараметров()

// Процедура обрабатывает нажатие на кнопку "ОК".
// 
// Параметры:
//  СтрокаДерева  - СтрокаДереваЗначений.
// 
&НаКлиенте
Процедура ПоКнопкеОК(СтрокаДерева)

	Если СтрокаДерева = Неопределено Тогда
	
		 Возврат;
	
	КонецЕсли; 

	Если СтрокаДерева.ДоступноДляВыбора Тогда
		
		РезСтр = Новый Структура("Действие, ПравилоЗаполнения, Синоним", "Отмена", "", "");
		
		Если Режим = "ПравилаЗаполнения" ИЛИ Режим = "Поля" Тогда
			
			ТекРодитель = СтрокаДерева.ПолучитьРодителя();			
			Если ТекРодитель <> Неопределено  Тогда
				
				Если ТекРодитель.Имя = "ЗаписьИсточник" Тогда
					
					РезСтр.Действие = "ОК";
					РезСтр.ПравилоЗаполнения  = "#И."+СтрокаДерева.Имя;
					
				КонецЕсли;
				Если ТекРодитель.Имя = "ДополнительныеАналитики" Тогда
					
					РезСтр.Действие = "ОК";
					РезСтр.ПравилоЗаполнения  = "#А."+СтрокаДерева.Имя;
					
				КонецЕсли;
				Если ТекРодитель.Имя = "ПользовательскиеФункции" Тогда
					
					СтрПредставлениеПараметров = "";
					СформироватьПредставлениеПараметров(СтрокаДерева,СтрПредставлениеПараметров);
					
					РезСтр.Действие = "ОК";
					Если ЗначениеЗаполнено(СтрокаДерева.ПользовательскаяФункция) Тогда
						РезСтр.ПравилоЗаполнения  = "#П."+СтрокаДерева.Имя+"("+СтрПредставлениеПараметров+")";
					Иначе	
						РезСтр.ПравилоЗаполнения  = СтрокаДерева.Имя+"("+СтрПредставлениеПараметров+")";
					КонецЕсли; 
					
				КонецЕсли;
				Если ТекРодитель.Имя = "ПрочиеФункции" Тогда
					
					СтрПредставлениеПараметров = "";
					СформироватьПредставлениеПараметров(СтрокаДерева,СтрПредставлениеПараметров);
					
					РезСтр.Действие = "ОК";
					Если ЗначениеЗаполнено(СтрокаДерева.ПользовательскаяФункция) Тогда
						РезСтр.ПравилоЗаполнения  = "#П."+СтрокаДерева.Имя+"("+СтрПредставлениеПараметров+")";
					Иначе	
						РезСтр.ПравилоЗаполнения  = СтрокаДерева.Имя+"("+СтрПредставлениеПараметров+")";
					КонецЕсли; 
					
				КонецЕсли;
				
				
			КонецЕсли; 	
			
		ИначеЕсли Режим = "ВставкаКода" Тогда
			
			ТекРодитель = СтрокаДерева.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
			
				Если (ТекРодитель.Имя = "ЗаписьИсточник" 
					   ИЛИ ТекРодитель.Имя = "ЗаписьПриемник") 
					   И Найти(СтрокаДерева.Имя,"(")=0 Тогда
				
					РезСтр.Действие = "ОК";
					РезСтр.ПравилоЗаполнения  =  ТекРодитель.Имя+"."+СтрокаДерева.Имя;
					
					
				Иначе
					
					РезСтр.Действие 		 = "ОК";
					РезСтр.ПравилоЗаполнения = СтрокаДерева.Имя;
					
				КонецЕсли; 
			
			КонецЕсли; 
			
		Иначе	
			
			РезСтр.Действие 		 = "ОК";
			РезСтр.ПравилоЗаполнения = СтрокаДерева.Имя;			
			РезСтр.Синоним           = СократитьСиноним(СтрокаДерева);
			
		КонецЕсли; 
		
		Закрыть(РезСтр);
		
	КонецЕсли; 
	
КонецПроцедуры // ПоКнопкеОК()

// Удаляет из переданной строки имя правила и знаки - разделители.
// 
// Параметры:
//  СтрокаДерева  - СтрокаДереваЗначений.
// 
&НаКлиенте
Функция СократитьСиноним(СтрокаДерева)

	Универсальные = "Аналитика_";
	Если НЕ Найти(СтрокаДерева.Имя, Универсальные) = 0 Тогда
		Имя     = СтрЗаменить(СтрокаДерева.Имя, "_", " ");
		Синоним = СтрЗаменить(СтрокаДерева.Синоним, Имя, "");
		Синоним = СокрЛП(СтрЗаменить(Синоним, ":", ""));
	Иначе
		Синоним = СтрокаДерева.Синоним;
	КонецЕсли; 
	
	Возврат Синоним;

КонецФункции // СократитьСиноним()
 
#КонецОбласти
