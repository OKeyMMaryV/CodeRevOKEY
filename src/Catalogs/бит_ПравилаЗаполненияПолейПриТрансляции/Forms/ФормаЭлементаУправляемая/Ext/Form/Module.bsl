
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуРеквизитовИсточника();
	ЗаполнитьТаблицуРеквизитовПриемника();
	
	фИтоговыйАлгоритм = СформироватьИтоговыйКод(Объект.КодПередФормированиемНабораЗаписей
	                                              , Объект.КодПередФормированиемЗаписи
												  , Объект.КодПослеФормированияЗаписи
												  , Объект.КодПослеФормированияНабораЗаписей
												  , Объект.КодЗаполнения);
	
	ДоработатьТаблицуПоляПриемника();
	ЗаполнитьИспользуемыеСоответствия();											  	
	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Источник");
	мКэшРеквизитовФормы.Вставить("Приемник");
	
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ИспользуемыеСоответствия.Очистить();
	
	Для каждого Элемент Из ИспользуемыеСоответствия Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			
			// Признаки использования фикс. соответствий хранятся в реквизитах.
			ТекущийОбъект[Элемент.Значение] = Элемент.Пометка;
		
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.бит_ВидыСоответствийАналитик") И  Элемент.Пометка Тогда
			
			// Универсальных соответствий в табличной части.
			НоваяСтрока = ТекущийОбъект.ИспользуемыеСоответствия.Добавить();
			НоваяСтрока.ВидСоответствия = Элемент.Значение;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	ТекущийОбъект.ГенерироватьКод();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДоработатьТаблицуПоляПриемника();											  
	
	фИтоговыйАлгоритм = СформироватьИтоговыйКод(Объект.КодПередФормированиемНабораЗаписей
	                                              , Объект.КодПередФормированиемЗаписи
												  , Объект.КодПослеФормированияЗаписи
												  , Объект.КодПослеФормированияНабораЗаписей
												  , Объект.КодЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодОбработчикаПриИзменении(Элемент)
	
	фИтоговыйАлгоритм = СформироватьИтоговыйКод(Объект.КодПередФормированиемНабораЗаписей
	                                              , Объект.КодПередФормированиемЗаписи
												  , Объект.КодПослеФормированияЗаписи
												  , Объект.КодПослеФормированияНабораЗаписей
												  , Объект.КодЗаполнения);
												  
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = СформироватьСписокДоступныхВидовРегистров();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.Источник);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	
	Если Объект.ПоляПриемника.Количество()>0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросИсточникИзменениеЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Правила заполнения полей будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
		
	Иначе
		
		Отказ = Ложь;
		ИсточникИзменение(Отказ);
		
		Если Отказ Тогда
			
			ИзвлечьИзКэша("Источник");
			Возврат;
			
		КонецЕсли; 
		
		ДобавитьВКэш("Источник");
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ВопросИсточникИзменениеЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВопросИсточникИзменениеЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ПоляПриемника.Очистить();
		
		Отказ = Ложь;
		ИсточникИзменение(Отказ);
		
		Если Отказ Тогда
			
			ИзвлечьИзКэша("Источник");
			Возврат;
			
		КонецЕсли; 
		
		ДобавитьВКэш("Источник");
		
	Иначе
		
		ИзвлечьИзКэша("Источник");
		
	КонецЕсли; 
	
КонецПроцедуры	// ВопросИсточникИзменениеЗавершение

&НаКлиенте
Процедура ПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = СформироватьСписокДоступныхВидовРегистров();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.Приемник);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемникПриИзменении(Элемент)
	
	Если Объект.ПоляПриемника.Количество()>0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросПриемникЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Правила заполнения полей будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
		
	Иначе
		
		Отказ = Ложь;
		ПриемникИзменение(Отказ);
		
		Если Отказ Тогда
			
			ИзвлечьИзКэша("Приемник");
			Возврат;
			
		КонецЕсли; 
		
		ДобавитьВКэш("Приемник");
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ВопросПриемникЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВопросПриемникЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.ПоляПриемника.Очистить();
		
		Отказ = Ложь;
		ПриемникИзменение(Отказ);
		
		Если Отказ Тогда
			
			ИзвлечьИзКэша("Приемник");
			Возврат;
			
		КонецЕсли; 
		
		ДобавитьВКэш("Приемник");
		
		
	Иначе
		
		ИзвлечьИзКэша("Приемник");
		
	КонецЕсли; 
	
КонецПроцедуры	// ВопросПриемникЗавершение

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекНаименование = СформироватьНаименование(Объект.Источник, Объект.Приемник);
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(ТекНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекНаименование = СформироватьНаименование(Объект.Источник, Объект.Приемник);
	
	// Элемент.СписокВыбора.Очистить();
	// Элемент.СписокВыбора.Добавить(ТекНаименование);
	
	Если Ожидание = 0 Тогда
		
	СтандартнаяОбработка = Ложь;		
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ТекНаименование);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекНаименование = СформироватьНаименование(Объект.Источник, Объект.Приемник);
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ТекНаименование);
	
КонецПроцедуры


&НаКлиенте
Процедура РежимИспользованияСоответствийПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляПриемника

&НаКлиенте
Процедура ПоляПриемникаИмяПоляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПоляПриемника.ТекущиеДанные;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ПоляПриемника");
	ПараметрыФормы.Вставить("Источник", Объект.Источник);	
	ПараметрыФормы.Вставить("Приемник", Объект.Приемник);
	ПараметрыФормы.Вставить("АдресРеквизитыИсточника", фАдресРеквизитыИсточника);
	ПараметрыФормы.Вставить("АдресРеквизитыПриемника", фАдресРеквизитыПриемника);
	ПараметрыФормы.Вставить("ТекущееПоле", ТекущаяСтрока.ИмяПоля);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Оповещение = Новый ОписаниеОповещения("ОткрытиеФормаВыбораПоляЗавершение", ЭтотОбъект, ДополнительныеДанные);
	РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;		
	
	ОткрытьФорму("Справочник.бит_ПравилаЗаполненияПолейПриТрансляции.Форма.ФормаВыбораПоляУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "ОткрытиеФормаВыбораПоляЗавершение".
// 
// Параметры:
// РезСтр - Структура
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОткрытиеФормаВыбораПоляЗавершение(РезСтр, ДополнительныеДанные) Экспорт
	
	Если ТипЗнч(РезСтр) = Тип("Структура") И РезСтр.Действие = "ОК" Тогда
		
		ДополнительныеДанные.ТекущаяСтрока.ИмяПоля = РезСтр.ПравилоЗаполнения;
		ДополнительныеДанные.ТекущаяСтрока.Синоним = РезСтр.Синоним;
		
	КонецЕсли; 
	
КонецПроцедуры	// ОткрытиеФормаВыбораПоляЗавершение

&НаКлиенте
Процедура ПоляПриемникаПравилоЗаполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ПоляПриемника.ТекущиеДанные;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "ПравилаЗаполнения");
	ПараметрыФормы.Вставить("Источник", Объект.Источник);	
	ПараметрыФормы.Вставить("Приемник", Объект.Приемник);	
	ПараметрыФормы.Вставить("АдресРеквизитыИсточника", фАдресРеквизитыИсточника);
	ПараметрыФормы.Вставить("АдресРеквизитыПриемника", фАдресРеквизитыПриемника);
	ПараметрыФормы.Вставить("ТекущееПоле", ТекущаяСтрока.ПравилоЗаполнения);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Оповещение = Новый ОписаниеОповещения("ОткрытиеФормаВыбораПоляПриемникаЗавершение", ЭтотОбъект, ДополнительныеДанные);
	РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;		
	
	ОткрытьФорму("Справочник.бит_ПравилаЗаполненияПолейПриТрансляции.Форма.ФормаВыбораПоляУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОкна);
	
	
КонецПроцедуры

// Процедура обработчик оповещения "ОткрытиеФормаВыбораПоляПриемникаЗавершение".
// 
// Параметры:
// РезСтр - Структура
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОткрытиеФормаВыбораПоляПриемникаЗавершение(РезСтр, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезСтр) = Тип("Структура") И РезСтр.Действие = "ОК" Тогда
	
		ДополнительныеДанные.ТекущаяСтрока.ПравилоЗаполнения = РезСтр.ПравилоЗаполнения;
	
	КонецЕсли; 	
	
КонецПроцедуры	// ОткрытиеФормаВыбораПоляПриемникаЗавершение

&НаКлиенте
Процедура ПоляПриемникаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ГенерироватьКодКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПриемникаПриИзменении(Элемент)
	
	ГенерироватьКодКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	ЗаполнитьПоляПриемника();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГенерироватьКод(Команда)
	
	ГенерироватьКодКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчистить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВопросОчиститьЗавершение", ЭтотОбъект);
	ТекстВопроса =  НСтр("ru = 'Правила заполнения будут очищены. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВопросОчиститьЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВопросОчиститьЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Для каждого СтрокаТаблицы Из Объект.ПоляПриемника Цикл
			
			СтрокаТаблицы.ПравилоЗаполнения = "";
			
		КонецЦикла; 
		Модифицированность = Истина;
		ГенерироватьКодКлиент();		
		
	КонецЕсли; 
	
КонецПроцедуры	// ВопросОчиститьЗавершение

&НаКлиенте
Процедура КомандаНазначениеПравиллЗаполненияПолей(Команда)
	ЭлементыОтбора = Новый Структура;
	ЭлементыОтбора.Вставить("ПравилоЗаполнения", Объект.Ссылка);
	ЭлементыОтбора.Вставить("Источник",          Объект.Источник);
	ЭлементыОтбора.Вставить("Приемник",          Объект.Приемник);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЭлементыОтбора);
	ОткрытьФорму("РегистрСведений.бит_НазначениеПравилЗаполненияПриТрансляции.ФормаЗаписи", ПараметрыФормы,,ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

// Функция определяет для каких целей предназначено данное правило заполнения полей.
// 
// Возвращаемое значение:
//   Структура
// 
&НаСервере
Функция ОпределитьНазначениеПравила() 

	РезСтруктура = Новый Структура("МСФО, ОборотыБюдж, ПроводкиБюдж", Ложь, Ложь, Ложь);
	
	// Изменение кода. Начало. 04.06.2013{{
	// РезСтруктура.МСФО         = ?(Объект.Приемник.ИмяОбъекта = "бит_Дополнительный_2" ,Истина,Ложь);
	РезСтруктура.МСФО         = бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(Объект.Приемник.ИмяОбъекта);
	// Изменение кода. Конец. 04.06.2013}}
	РезСтруктура.ОборотыБюдж  = Объект.Приемник.ИмяОбъекта = "бит_ОборотыПоБюджетам";
	РезСтруктура.ПроводкиБюдж = Объект.Приемник.ИмяОбъекта = "бит_Бюджетирование"   ;

	Возврат РезСтруктура;
	
КонецФункции // ОпределитьНазначениеПравил()

// Процедура устанавливает видимость/доступность элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоУТ = бит_ОбщегоНазначения.ЭтоУТ();	
	
	НазначениеПравила = ОпределитьНазначениеПравила();
	
	Элементы.ГруппаМСФО.Видимость = НЕ ЭтоУТ;	
	Элементы.ПринудительноеЗаполнениеВалютныхСумм.Доступность = НазначениеПравила.МСФО;
	Элементы.УчетМПЗпоИсторическойСтоимости.Доступность       = НазначениеПравила.МСФО;
	Элементы.УчетАвансовПоИсторическойСтоимости.Доступность   = НазначениеПравила.МСФО;
	
	Элементы.ФормироватьПроводкиБюджетирования.Доступность     = НазначениеПравила.ОборотыБюдж;
	Элементы.ФормироватьЗависимыеОбороты.Доступность           = НазначениеПравила.ОборотыБюдж;
	
	флСтандартныйРежимСоответствий = ?(Объект.РежимИспользованияСоответствий = Перечисления.бит_РежимыИспользованияСоответствийПриТрансляции.Стандартный, Истина, Ложь);
	
	Элементы.ИспользуемыеСоответствия.Видимость = флСтандартныйРежимСоответствий;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура определяет необходимость блокировки элементов управления таблицы ПоляПриемника.
// 
&НаСервере
Процедура ДоработатьТаблицуПоляПриемника()

	МассивИмен = МассивЗапретНезаполненных();
	
	Для каждого СтрокаТаблицы Из Объект.ПоляПриемника Цикл
	
		Если СтрокаТаблицы.Обязательное И НЕ МассивИмен.Найти(СтрокаТаблицы.ИмяПоля) = Неопределено Тогда
		
			 СтрокаТаблицы.ЗаблокироватьОбязательное = Истина;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры // ДоработатьТаблицуПоляПриемника()

// Процедура сбрасывает настройки, которые для текущего правила не имеют смысла.
// 
&НаСервере
Процедура СброситьНенужныеНастройки()

	НазначениеПравила = ОпределитьНазначениеПравила();
	
	Если НЕ НазначениеПравила.МСФО Тогда
		
		Объект.ПринудительноеЗаполнениеВалютныхСумм = Ложь;
		
	КонецЕсли; 

	Если НЕ НазначениеПравила.ОборотыБюдж Тогда
	
	  Объект.ФормироватьПроводкиБюджетирования = Ложь;
	
	КонецЕсли; 
	
КонецПроцедуры // СброситьНенужныеФлаги()

// Функция заполняет таблицу реквизитов источника.
// 
// Возвращаемое значение:
//  ТабВрем - ТаблицаЗначений.
// 
&НаСервере
Функция ЗаполнитьТаблицуРеквизитовИсточника()

	ТабВрем = Неопределено;
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
	
		 ТабВрем = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ЗаполнитьТаблицуРеквизитов(Объект.Источник);
		 фАдресРеквизитыИсточника = ПоместитьВоВременноеХранилище(ТабВрем, УникальныйИдентификатор);
	
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции // ЗаполнитьТаблицуРеквизитовИсточника()

// Функция извлекает таблицу реквизитов источника из временного хранилища.
// 
// Возвращаемое значение:
//  ТабВрем - ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуРеквизитовИсточника()

	ТабВрем = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(фАдресРеквизитыИсточника) Тогда
	
		ТабВрем = ПолучитьИзВременногоХранилища(фАдресРеквизитыИсточника);
	
	КонецЕсли; 
	
	Если НЕ ТипЗнч(ТабВрем) = Тип("ТаблицаЗначений") Тогда
		
		ТабВрем = ЗаполнитьТаблицуРеквизитовИсточника();
	
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции // ПолучитьТаблицуРеквизитовИсточника()

// Функция заполняет таблицу реквизитов приемника.
// 
// Возвращаемое значение:
//  ТабВрем - ТаблицаЗначений.
// 
&НаСервере
Функция ЗаполнитьТаблицуРеквизитовПриемника()
	
	Если ЗначениеЗаполнено(Объект.Приемник) Тогда
		
		ТабВрем = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ЗаполнитьТаблицуРеквизитов(Объект.Приемник);
		фАдресРеквизитыПриемника = ПоместитьВоВременноеХранилище(ТабВрем, УникальныйИдентификатор);
		
	КонецЕсли; 
	
	Возврат ТабВрем;
	
КонецФункции // ЗаполнитьТаблицуРеквизитовПриемника()

// Функция извлекает таблицу реквизитов Приемника из временного хранилища..
// 
// Возвращаемое значение:
//  ТабВрем - ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуРеквизитовПриемника()

	ТабВрем = Неопределено;

	Если ЭтоАдресВременногоХранилища(фАдресРеквизитыПриемника) Тогда
	
		ТабВрем = ПолучитьИзВременногоХранилища(фАдресРеквизитыПриемника);
	
	КонецЕсли; 
	
	Если НЕ ТипЗнч(ТабВрем) = Тип("ТаблицаЗначений") Тогда
		
		ТабВрем = ЗаполнитьТаблицуРеквизитовПриемника();
	
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции // ПолучитьТаблицуРеквизитовПриемника()

&НаСервере
Процедура ЗаполнитьПоля(ТаблицаРеквизитов,ТаблицаПолей)

	Если ТаблицаРеквизитов.Количество()=0 Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ТаблицаПолей.Очистить();
	
	НастройкиДопИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	
	Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		
		 // Cубконто по-умолчанию не добавляем
		 Если СтрокаТаблицы.ЭтоСубконто Тогда
		 
		 	 Продолжить;
		 
		 КонецЕсли; 
		
		 НоваяСтрока = ТаблицаПолей.Добавить();
		 НоваяСтрока.ИмяПоля = СтрокаТаблицы.ИмяРеквизита;
		 
		 // Для назначенных дополнительных измерений укажем сразу правило заполнения.
		 ТекНастройка = НастройкиДопИзмерений[НоваяСтрока.ИмяПоля];
		 Если НЕ ТекНастройка = Неопределено И ТипЗнч(ТаблицаПолей) = Тип("СправочникТабличнаяЧасть.бит_ПравилаЗаполненияПолейПриТрансляции.ПоляПриемника") Тогда
		 
		 	ИмяАналитики = бит_МеханизмТрансляции.СформироватьИмяАналитики(ТекНастройка.Аналитика);
			НоваяСтрока.ПравилоЗаполнения = "#А."+ИмяАналитики;
		 
		 КонецЕсли; 
		 
		 // Добавление кода. Начало: 09.11.2016  {{
		 УстановитьСиноним(СтрокаТаблицы, НоваяСтрока, НастройкиДопИзмерений);
		 // Добавление кода конец }}  
		 
		 Если Найти(НоваяСтрока.ИмяПоля,"Аналитика_")>0 Тогда
		 
		 	
		 
		 КонецЕсли; 
		 
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьПоля()

// Удаляет из переданной строки имя правила и знаки - разделители
//
&НаСервереБезКонтекста
Функция СократитьСиноним(ТекСтрока)

	Универсальные = "Аналитика_";
	Если НЕ Найти(ТекСтрока.ИмяРеквизита, Универсальные) = 0 Тогда
		Имя     = СтрЗаменить(ТекСтрока.ИмяРеквизита, "_", " ");
		Синоним = СтрЗаменить(ТекСтрока.Синоним, Имя, "");
		Синоним = СокрЛП(СтрЗаменить(Синоним, ":", ""));
	Иначе
		Синоним = ТекСтрока.Синоним;
	КонецЕсли; 
	
	Возврат Синоним;

КонецФункции // СократитьСиноним()

&НаСервереБезКонтекста
Процедура УстановитьСиноним(Источник, Приемник, НастройкиДопИзмерений)

	Буфер = Новый Структура("ИмяРеквизита, Синоним, Тип");
	ЗаполнитьЗначенияСвойств(Буфер, Источник);
	
	Справочники.бит_СтруктураКонструктораПравилТрансляции.ДобавитьИнформациюОбИзмерении(Буфер, НастройкиДопИзмерений);
	Буфер.Синоним = СократитьСиноним(Буфер);

	ЗаполнитьЗначенияСвойств(Приемник, Буфер);
	
КонецПроцедуры // УстановитЬСисноним()

// Процедура выполняет поиск строки правил приемника 
// по имени и устанавливает правило заполнения в найденную строку. 
// 
// Параметры:
//  ИмяПоля - Строка.
//  ПравилоЗаполнения - Строка
// 
&НаСервере
Процедура УстановитьПравилоЗаполнения(ИмяПоля, ПравилоЗаполнения)
	
	СтрОтбор = Новый Структура("ИмяПоля", ИмяПоля);
	МассивНайденных = Объект.ПоляПриемника.НайтиСтроки(СтрОтбор);
	
	Если МассивНайденных.Количество() > 0 Тогда
		
		ПерваяСтрока = МассивНайденных[0];
		ПерваяСтрока.ПравилоЗаполнения = ПравилоЗаполнения;
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПравилоЗаполнения()

// Процедура заполняет табличную часть для полей приемника 
// и устанавливает правила заполнения по-умолчанию.
// 
&НаСервере
Процедура ЗаполнитьПоляПриемника()
	
	Объект.ПоляПриемника.Очистить();
	
	ТаблицаПриемник = ПолучитьТаблицуРеквизитовПриемника();
	ТаблицаИсточник = ПолучитьТаблицуРеквизитовИсточника();
	
	// Заполнение перечня полей приемника 
	ЗаполнитьПоля(ТаблицаПриемник,Объект.ПоляПриемника);
	// Отмечает поля, которые должны быть обязательными.
	ОтметитьОбязательныеПоУмолчанию();
	
	// Установка правил заполнения по-умолчанию
	Исключения = Новый Массив;
	Исключения.Добавить("Счет");
	Исключения.Добавить("СчетДт");
	Исключения.Добавить("СчетКт");
	Для каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		Если НЕ Исключения.Найти(СтрокаИсточник.ИмяРеквизита) = Неопределено Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		СтрОтбор = Новый Структура("ИмяПоля",СтрокаИсточник.ИмяРеквизита);
		МассивНайденных = Объект.ПоляПриемника.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаПриемник Из МассивНайденных Цикл
			
			СтрокаПриемник.ПравилоЗаполнения = "#И."+СтрокаИсточник.ИмяРеквизита;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	// Специфические правила заполнения для конкретных пар Источник Приемник.
	Если Объект.Источник.ИмяОбъектаПолное = "РегистрБухгалтерии.Хозрасчетный" 
		 // Изменение кода. Начало. 04.06.2013{{
		 // И Объект.Приемник.ИмяОбъектаПолное = "РегистрБухгалтерии.бит_Дополнительный_2" Тогда
		 И бит_му_ОбщегоНазначения.ЭтоМеждународныйПланСчетовИлиРегистр(СтрЗаменить(Объект.Приемник.ИмяОбъектаПолное, "РегистрБухгалтерии.", "")) Тогда
		 // Изменение кода. Конец. 04.06.2013}}
	
		 УстановитьПравилоЗаполнения("СуммаРегл", "#И.Сумма");
		 УстановитьПравилоЗаполнения("СуммаУпр" , "ПересчитатьРеглУпр(#И.Сумма, ЗаписьПриемник.Период, СтруктураШапкиДокумента)");
		 УстановитьПравилоЗаполнения("СуммаМУ"  , "ПересчитатьРеглМУ(#И.Сумма, ЗаписьПриемник.Период, СтруктураШапкиДокумента)");
		 
	КонецЕсли; 
	
	Если Объект.Приемник.ИмяОбъектаПолное = "РегистрНакопления.бит_ОборотыПоБюджетам" Тогда
	
		 УстановитьПравилоЗаполнения("Период"         , "#И.Период");
		 УстановитьПравилоЗаполнения("ЦФО"            , "#А.ЦФО");
		 УстановитьПравилоЗаполнения("СтатьяОборотов" , "#А.СтатьяОборотов");
		 УстановитьПравилоЗаполнения("Проект"         , "#А.Проект");
		 // Изменение кода. Начало. 07.12.2016{{
		 Если СтрНайти(Объект.Источник.ИмяОбъектаПолное, "РегистрНакопления") = 0 Тогда 
			 УстановитьПравилоЗаполнения("Количество"     , "КоличествоПроводки(ЗаписьИсточник)");
			 УстановитьПравилоЗаполнения("Валюта"         , "ВалютаОборотовБюджетирования(ЗаписьИсточник, СтруктураШапкиДокумента)");
		 КонецЕсли;
		 // Изменение кода. Конец. 07.12.2016}}
		 
		 Шаблоны = Новый Структура;
		 Шаблоны.Вставить("Сумма"        , "ПересчитатьПоВалюте(#И.%ИмяРесурса%, ЗаписьПриемник.Период, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, ЗаписьПриемник.Валюта)"); 
		 Шаблоны.Вставить("СуммаРегл"    , "#И.%ИмяРесурса%");
		 Шаблоны.Вставить("СуммаУпр"     , "ПересчитатьРеглУпр(#И.%ИмяРесурса%,ЗаписьПриемник.Период,СтруктураШапкиДокумента)");
		 Шаблоны.Вставить("СуммаСценарий", "ПересчитатьРеглСценарий(#И.%ИмяРесурса%,ЗаписьПриемник.Период,ЗаписьПриемник.Сценарий,СтруктураШапкиДокумента)");
		 
		 СтрОтбор =  Новый Структура;
		 СтрОтбор.Вставить("ИмяРеквизита", "Сумма");
		 НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(СтрОтбор);
		 
		 
		 Если НайденныеСтроки.Количество() > 0 Тогда
			 
			 Для каждого КиЗ Из Шаблоны Цикл
				 
				 ТекВыражение = СтрЗаменить(КиЗ.Значение, "%ИмяРесурса%", "Сумма");
				 УстановитьПравилоЗаполнения(КиЗ.Ключ, ТекВыражение);
				 
			 КонецЦикла; 
			 
		 Иначе	 
			 
			 СтрОтбор =  Новый Структура;
			 СтрОтбор.Вставить("ИмяРеквизита", "СуммаРегл");
			 НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(СтрОтбор);
			 
			 Если НайденныеСтроки.Количество() > 0 Тогда
				 
				 Для каждого КиЗ Из Шаблоны Цикл
					 
					 ТекВыражение = СтрЗаменить(КиЗ.Значение, "%ИмяРесурса%", "СуммаРегл");
					 УстановитьПравилоЗаполнения(КиЗ.Ключ, ТекВыражение);
					 
				 КонецЦикла; 
				 
			 КонецЕсли; 
			 
		 КонецЕсли; 
		 
	КонецЕсли; // бит_ОборотыПоБюджетам	
	
	Если Объект.Источник.ИмяОбъектаПолное = "РегистрБухгалтерии.Хозрасчетный" 
		 И Объект.Приемник.ИмяОбъектаПолное = "РегистрБухгалтерии.бит_Бюджетирование" Тогда
	
		 УстановитьПравилоЗаполнения("Период"         , "#И.Период");
		 УстановитьПравилоЗаполнения("ЦФО"            , "#А.ЦФО");
		 УстановитьПравилоЗаполнения("СтатьяОборотов" , "#А.СтатьяОборотов");
		 УстановитьПравилоЗаполнения("Количество"     , "КоличествоПроводки(ЗаписьИсточник)");
		 УстановитьПравилоЗаполнения("СуммаРегл"      , "#И.Сумма");
		 УстановитьПравилоЗаполнения("СуммаУпр"       , "ПересчитатьРеглУпр(#И.Сумма,ЗаписьПриемник.Период,СтруктураШапкиДокумента)");
		 УстановитьПравилоЗаполнения("СуммаСценарий"  , "ПересчитатьРеглСценарий(#И.Сумма,ЗаписьПриемник.Период,ЗаписьПриемник.Сценарий,СтруктураШапкиДокумента)");
		 
	КонецЕсли; 	
	
	
	Если Объект.Источник.ИмяОбъектаПолное = "РегистрБухгалтерии.Хозрасчетный" 
		 И Объект.Приемник.ИмяОбъектаПолное = "РегистрНакопления.бит_му_ПартииМПЗ" Тогда
	
		 УстановитьПравилоЗаполнения("Период"         , "#И.Период");
		 УстановитьПравилоЗаполнения("СуммаУпр"       , "ПересчитатьРеглУпр(#И.Сумма,ЗаписьПриемник.Период,СтруктураШапкиДокумента)");
		 УстановитьПравилоЗаполнения("СуммаПоступленияУпр", "ПересчитатьРеглУпр(#И.Сумма,ЗаписьПриемник.Период,СтруктураШапкиДокумента)");		 
		 
		 Объект.КодПослеФормированияЗаписи = "ЗаписьПриемник.ДокументОприходования = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьИсточник,""Дт"",""Субконто.Партии"");
											|Если НЕ ЗначениеЗаполнено(ЗаписьПриемник.ДокументОприходования) Тогда
											|     ЗаписьПриемник.ДокументОприходования = бит_МеханизмТрансляции.ЗначениеСубконто(ЗаписьИсточник,""Кт"",""Субконто.Партии"");
											|КонецЕсли; 
											|
											|ЗаписьПриемник.Количество = ЗаписьИсточник.КоличествоДт;
											|Если ЗаписьПриемник.Количество = 0 Тогда
											|     ЗаписьПриемник.Количество = ЗаписьИсточник.КоличествоКт;
											|КонецЕсли;		 
											|		 ";
	
	КонецЕсли; 
	
	ДоработатьТаблицуПоляПриемника();											  	
    ГенерироватьКод();	
	
КонецПроцедуры // ЗаполнитьПоляПриемника()

&НаСервере
Процедура ЗаполнитьНаименованиеПоУмолчанию()

	Если ПустаяСтрока(Объект.Наименование) Тогда
	
		Если ЗначениеЗаполнено(Объект.Источник) И ЗначениеЗаполнено(Объект.Приемник) Тогда
		
			 Объект.Наименование = СформироватьНаименование(Объект.Источник, Объект.Приемник);
		
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьНаименованиеПоУмолчанию()

// Функция возвращает массив имен реквизитов регистра-приемника 
// для которых запрещены незаполненные значения.
// 
// Возвращаемое значение:
//  МассивИмен - Массив.
// 
&НаСервере
Функция МассивЗапретНезаполненных()

	МассивИмен = Новый Массив;
	
	МетаРегистр = Метаданные.НайтиПоПолномуИмени(Объект.Приемник.ИмяОбъектаПолное);
	Если НЕ МетаРегистр = Неопределено Тогда
		
		Для каждого МетаАтрибут Из МетаРегистр.Измерения Цикл
			
			  Если МетаАтрибут.ЗапрещатьНезаполненныеЗначения Тогда
			  
			  	  МассивИмен.Добавить(МетаАтрибут.Имя);
			  
			  КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 

	МассивИмен.Добавить("Период");
	
	Возврат МассивИмен;
	
КонецФункции // МассивЗапретНезаполненных()


// Процедура отмечает обязательные к заполнению поля источника.
// 
&НаСервере
Процедура ОтметитьОбязательныеПоУмолчанию()
	
	ОбязательныеПоУмолчанию = КонструкторМассиваОбязательныхПоУмолчанию(Объект.Источник, Объект.Приемник);
	
	// Так же обязательными отметим, поля указанные в качестве обязательных в метаданных.
	МассивИмен = МассивЗапретНезаполненных();
	Для каждого ТекИмя Из МассивИмен Цикл
		
		ОбязательныеПоУмолчанию.Добавить(ТекИмя);
		
	КонецЦикла; 
	
	Для каждого СтрокаТаблицы Из Объект.ПоляПриемника Цикл
		
		Если ОбязательныеПоУмолчанию.Найти(СтрокаТаблицы.ИмяПоля) <> Неопределено Тогда
			
			СтрокаТаблицы.Обязательное = Истина;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ОтметитьОбязательныеПоУмолчанию()

// Процедура обрабатывает изменение Приемника. 
// 
// Параметры:
//  Отказ - Булево.
// 
&НаСервере
Процедура ПриемникИзменение(Отказ)

	СписокВидовОбъектов = СформироватьСписокДоступныхВидовРегистров();

	Если СписокВидовОбъектов.НайтиПоЗначению(Объект.Приемник.ВидОбъекта) = Неопределено Тогда
	
		Отказ = Истина;
		ВывестиСообщениеОВидеОбъекта();
	
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		
		ЗаполнитьТаблицуРеквизитовПриемника();
		
		Если ЗначениеЗаполнено(Объект.Источник) И ЗначениеЗаполнено(Объект.Приемник) Тогда
			
			ЗаполнитьПоляПриемника();
			ЗаполнитьНаименованиеПоУмолчанию();
			
		КонецЕсли; 
		
	КонецЕсли; 

	УстановитьВидимость();	
	СброситьНенужныеНастройки();
	
КонецПроцедуры // ПриемникИзменение()

// Процедура обрабатывает изменение источника. 
// 
// Параметры:
//  Отказ - Булево.
// 
&НаСервере
Процедура ИсточникИзменение(Отказ)

	СписокВидовОбъектов = СформироватьСписокДоступныхВидовРегистров();

	Если СписокВидовОбъектов.НайтиПоЗначению(Объект.Источник.ВидОбъекта) = Неопределено Тогда
	
		Отказ = Истина;
		ВывестиСообщениеОВидеОбъекта();		
	
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		
		ЗаполнитьТаблицуРеквизитовИсточника();
		
		Если ЗначениеЗаполнено(Объект.Источник) И ЗначениеЗаполнено(Объект.Приемник) Тогда
			
			ЗаполнитьПоляПриемника();
			ЗаполнитьНаименованиеПоУмолчанию();
			
		КонецЕсли; 
		
	КонецЕсли; 

	УстановитьВидимость();
	
КонецПроцедуры // ИсточникИзменение()

&НаКлиенте
Процедура КомандаОткрытьКонструкторДополнительнойЗаписи(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытиеКонструкторДополнительногоДвиженияЗавершение", ЭтотОбъект);
	РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;			
	
	ОткрытьФорму("Обработка.бит_КонструкторВыражений.Форма.ФормаКонструкторКодаДополнительногоДвижения", , ЭтаФорма,,,,Оповещение, РежимОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКонструкторДополнительнойПроводки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытиеКонструкторДополнительногоДвиженияЗавершение", ЭтотОбъект);
	РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;			
	
	ОткрытьФорму("Обработка.бит_КонструкторВыражений.Форма.ФормаКонструкторКодаДополнительнойПроводки", , ЭтаФорма,,,,Оповещение, РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "ОткрытиеКонструкторДополнительногоДвиженияЗавершение".
// 
// Параметры:
// Рез - Строка
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОткрытиеКонструкторДополнительногоДвиженияЗавершение(Рез, ДополнительныеДанные) Экспорт

	Если ТипЗнч(Рез) = Тип("Строка") И НЕ ПустаяСтрока(Рез) Тогда
	
		Элементы.КодПослеФормированияЗаписи.ВыделенныйТекст = Рез;
	
	КонецЕсли; 
	
КонецПроцедуры	// ОткрытиеКонструкторДополнительногоДвиженияЗавершение

// Процедура заполняет список видов соответствий. 
// 
&НаСервере
Процедура ЗаполнитьИспользуемыеСоответствия()

	ИспользуемыеСоответствия.Очистить();
	
	// Фиксированные соответствия
	ФиксСоотв = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ФиксированныеСоответствия();
	
	Для каждого Эл ИЗ ФиксСоотв Цикл
		
		ИспользуемыеСоответствия.Добавить(Эл.Значение, Эл.Представление, Объект[Эл.Значение]);
		
	КонецЦикла;	
	
	// Универсальные соответствия
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка,
	               |	Спр.Наименование
	               |ИЗ
	               |	Справочник.бит_ВидыСоответствийАналитик КАК Спр
	               |ГДЕ
	               |	НЕ Спр.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Спр.Приоритет
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрОтбор = Новый Структура("ВидСоответствия", Выборка.Ссылка);
		Строки = Объект.ИспользуемыеСоответствия.НайтиСтроки(СтрОтбор);
		
		Используется = ?(Строки.Количество() > 0, Истина, Ложь);
		
		ИспользуемыеСоответствия.Добавить(Выборка.Ссылка, Выборка.Наименование, Используется);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьИспользуемыеСоответствия()

// Функция формирует итоговый код правила заполнения.
// 
// Возвращаемое значение:
//  КодИтоговый - Строка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьИтоговыйКод(КодПередФормированиемНабораЗаписей
	                             ,КодПередФормированиемЗаписи
								 ,КодПослеФормированияЗаписи
								 ,КодПослеФормированияНабораЗаписей
								 ,КодЗаполнения) 

		КодИтоговый = "// ОБРАБОТЧИК ПЕРЕД НАЧАЛОМ ФОРМИРОВАНИЯ НАБОРА ЗАПИСЕЙ"
	             +Символы.ПС
	             +КодПередФормированиемНабораЗаписей
				 +Символы.ПС
				 +Символы.ПС
				 +"Для каждого ЗаписьИсточник Из НаборИсточник Цикл"
				 +Символы.ПС				 
				 +Символы.ПС
				 +"// ОБРАБОТЧИК ПЕРЕД НАЧАЛОМ ФОРМИРОВАНИЯ ЗАПИСИ"
				 +Символы.ПС
				 +КодПередФормированиемЗаписи
				 +Символы.ПС
				 +Символы.ПС
				 +"// АЛГОРИТМ ЗАПОЛНЕНИЯ ЗАПИСИ ПРИЕМНИКА ПО ЗАПИСИ ИСТОЧНИКА"
				 +Символы.ПС
				 +КодЗаполнения
				 +Символы.ПС
				 +Символы.ПС
				 +"// ОБРАБОТЧИК ПОСЛЕ ФОРМИРОВАНИЯ ЗАПИСИ"
				 +Символы.ПС
				 +КодПослеФормированияЗаписи
				 +Символы.ПС
				 +Символы.ПС
				 +"КонецЦикла;"				 
				 +Символы.ПС
				 +Символы.ПС				 
				 +"// ОБРАБОТЧИК ПОСЛЕ ФОРМИРОВАНИЯ НАБОРА ЗАПИСЕЙ"
				 +Символы.ПС
				 +КодПослеФормированияНабораЗаписей;
	

	Возврат КодИтоговый;
	
КонецФункции // СформироватьИтоговыйКод()

// Функция создает массив имен полей, которые следует устанавливать обязательными.
// 
// Возвращаемое значение:
//  ОбязательныеПоУмолчанию - Массив.
// 
&НаСервереБезКонтекста
Функция КонструкторМассиваОбязательныхПоУмолчанию(Источник, Приемник)
	
	ОбязательныеПоУмолчанию = Новый Массив;
	ОбязательныеПоУмолчанию.Добавить("Период");
	ОбязательныеПоУмолчанию.Добавить("Регистратор");
	Если НЕ ( Источник.ИмяОбъектаПолное = "РегистрНакопления.бит_ОборотыПоБюджетам" 
		       И Приемник.ИмяОбъектаПолное = "РегистрБухгалтерии.бит_Бюджетирование" ) Тогда
	
		ОбязательныеПоУмолчанию.Добавить("Организация");
	
	КонецЕсли; 
	ОбязательныеПоУмолчанию.Добавить("СчетДт");
	ОбязательныеПоУмолчанию.Добавить("СчетКт");
	ОбязательныеПоУмолчанию.Добавить("Сумма");
	ОбязательныеПоУмолчанию.Добавить("СуммаРегл");
	
	Если Приемник.ИмяОбъектаПолное = "РегистрНакопления.бит_ОборотыПоБюджетам" Тогда
		
		ОбязательныеПоУмолчанию.Добавить("Сценарий");
		
	КонецЕсли; 
	
	Если Приемник.ИмяОбъектаПолное = "РегистрНакопления.бит_му_ПартииМПЗ" Тогда
	
		ОбязательныеПоУмолчанию.Добавить("СчетУчета");
		ОбязательныеПоУмолчанию.Добавить("СуммаУпр");
		
	КонецЕсли; 
	
	Возврат ОбязательныеПоУмолчанию;
	
КонецФункции // КонструкторМассиваОбязательныхПоУмолчанию()

// Функция формирует список видов регистров, доступных для выбора 
// в правилах заполнения полей при трансляции.
// 
// Возвращаемое значение:
//  СписокВидовОбъектов - Строка.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСписокДоступныхВидовРегистров()

	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрНакопления"));
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии"));

	Возврат СписокВидовОбъектов;
	
КонецФункции // СформироватьСписокДоступныхВидовРегистров()

// Функция Формирует наименование исходя из наименования приемника и источника.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНаименование(Источник, Приемник)

	ТекНаименование = Строка(Источник)+"-->"+Строка(Приемник);

	Возврат ТекНаименование;
	
КонецФункции // СформироватьНаименование()

// Процедура выводит сообщение о доступных видах объектов.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеОВидеОбъекта()
	
	ТекстСообщения =  НСтр("ru = 'Для выбора в качестве Приемника и Источника доступны только регистры накопления и регистры бухгалтерии.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры // ВывестиСообщениеОВидеОбъекта()

// Процедура генерирует код выполнения.
// 
&НаКлиенте
Процедура ГенерироватьКодКлиент()

	Объект.КодЗаполнения = бит_МеханизмТрансляцииКлиентСервер.ГенерироватьКод(Объект.ПоляПриемника);
	фИтоговыйАлгоритм = СформироватьИтоговыйКод(Объект.КодПередФормированиемНабораЗаписей
	                                              , Объект.КодПередФормированиемЗаписи
												  , Объект.КодПослеФормированияЗаписи
												  , Объект.КодПослеФормированияНабораЗаписей
												  , Объект.КодЗаполнения);
	
	
КонецПроцедуры // ГенерироватьКодВФорме()

// Процедура генерирует код выполнения.
// 
&НаСервере
Процедура ГенерироватьКод()

	Объект.КодЗаполнения = бит_МеханизмТрансляцииКлиентСервер.ГенерироватьКод(Объект.ПоляПриемника);
	фИтоговыйАлгоритм = СформироватьИтоговыйКод(Объект.КодПередФормированиемНабораЗаписей
	                                              , Объект.КодПередФормированиемЗаписи
												  , Объект.КодПослеФормированияЗаписи
												  , Объект.КодПослеФормированияНабораЗаписей
												  , Объект.КодЗаполнения);
	
	
КонецПроцедуры // ГенерироватьКодВФорме()

#КонецОбласти
