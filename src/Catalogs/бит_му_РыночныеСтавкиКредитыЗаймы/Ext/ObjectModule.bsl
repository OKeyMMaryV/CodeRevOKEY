#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем УстановленаПометкаУдаления; // Хранит флаг, устанавливается ли пометка на удаление.

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;
	КонецЕсли;
	
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства);
	
	Если Не ЭтоНовый() И Не ПометкаУдаления=Ссылка.ПометкаУдаления Тогда
		// В случае установки или снятия пометки удаления не производить проверку.
		Возврат;
	КонецЕсли;		
	
	// Перед записью удалим движения из регистра сведений "бит_му_РыночныеСтавкиКредитыЗаймы".
	УдалитьДвижения();
	
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда
		Если ПометкаУдаления Тогда
			УстановленаПометкаУдаления = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
	
	Если НЕ УстановленаПометкаУдаления И НЕ ПометкаУдаления Тогда
		
		// Добавим запись в регистр сведений "бит_му_РыночныеСтавкиКредитыЗаймы".
		ДобавитьДвижение();
		
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура удаляет предыдущие движения из регистра сведений "бит_му_РыночныеСтавкиКредитыЗаймы".
// 
Процедура УдалитьДвижения()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_РыночныеСтавкиКредитыЗаймы.Период,
	               |	бит_му_РыночныеСтавкиКредитыЗаймы.Валюта,
	               |	бит_му_РыночныеСтавкиКредитыЗаймы.Ставки
	               |ИЗ
	               |	РегистрСведений.бит_му_РыночныеСтавкиКредитыЗаймы КАК бит_му_РыночныеСтавкиКредитыЗаймы
	               |ГДЕ
	               |	(бит_му_РыночныеСтавкиКредитыЗаймы.Ставки = &Ставки
	               |			ИЛИ бит_му_РыночныеСтавкиКредитыЗаймы.Ставки = ЗНАЧЕНИЕ(Справочник.бит_му_РыночныеСтавкиКредитыЗаймы.ПустаяСсылка))";
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Ставки", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Очистим предыдущие движения для данного элемента справочника.
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей = РегистрыСведений.бит_му_РыночныеСтавкиКредитыЗаймы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Валюта.Установить(Выборка.Валюта);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет движение в регистр сведений "бит_му_РыночныеСтавкиКредитыЗаймы".
// 
Процедура ДобавитьДвижение()
	
	// Создадим новое движение
	НаборЗаписей = РегистрыСведений.бит_му_РыночныеСтавкиКредитыЗаймы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		СтрокаСообщения = НСтр("ru = 'Для периода %1% и валюты ""%2%"" уже существуют установленные рыночные ставки!'");
		СтрокаСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(СтрокаСообщения, Формат(Период, "ДФ='MMMM yyyy'"), Валюта);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = Период;
	Запись.Валюта = Валюта;
	Запись.Ставки = Ссылка;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

УстановленаПометкаУдаления = Ложь;

#КонецОбласти

#КонецЕсли
