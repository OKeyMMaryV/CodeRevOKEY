#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс
	
// Функция создает новый показатель произвольного отчета.
// 
// Параметры:
//  НастройкаОтчета  - СправочникСсылка.бит_НастройкиПроизвольныхОтчетов.
//  СтруктураПараметров  - Структура.
// 
// Возвращаемое значение:
//   Показатель   - СправочникСсылка.бит_ПоказателиПроизвольныхОтчетов.
// 
Функция СоздатьПоказатель(НастройкаОтчета,СтруктураПараметров) Экспорт
	
	Показатель   = Справочники.бит_ПоказателиПроизвольныхОтчетов.ПустаяСсылка();
	
	ПоказательОб = Справочники.бит_ПоказателиПроизвольныхОтчетов.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ПоказательОб,СтруктураПараметров);
	ПоказательОб.Владелец     = НастройкаОтчета;
	ПоказательОб.Код          = СтруктураПараметров.ИмяОбласти;
	ПоказательОб.Наименование = АвтоНаименование(ПоказательОб);
	ПоказательОб.КолонкаТаблицыОтчета = СтруктураПараметров.КолонкаТаблицыОтчета;
	ПоказательОб.СтрокаТаблицыОтчета  = СтруктураПараметров.СтрокаТаблицыОтчета;
	
	Если СтруктураПараметров.Свойство("ЗначенияПоУмолчанию") Тогда
		ПоказательОб.ЗначенияПоУмолчанию.Загрузить(СтруктураПараметров.ЗначенияПоУмолчанию);
	КонецЕсли; 
	
	флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(ПоказательОб,,"Ошибки");
	Если флДействиеВыполнено Тогда
		Показатель = ПоказательОб.Ссылка;
	КонецЕсли;
	
	Возврат Показатель;
	
КонецФункции // СоздатьПоказатель()

// Функция выполняет обновление показателя произвольного отчета.
// 
// Параметры:
//  ТекПоказатель        - СправочникСсылка.бит_ПоказателиПроизвольныхОтчетов.
//  СтруктураПараметров  - Структура.
// 
// Возвращаемое значение:
//   флДействиеВыполнено   - Булево.
// 
Функция ОбновитьПоказатель(ТекПоказатель,СтруктураПараметров) Экспорт
	
	Успех = Истина;
	
	Записывать = Ложь;
	Поля 	   = Новый Структура;
	Таблицы    = Новый Структура; 
	
	Реквизиты = Реквизиты(ТекПоказатель);
	Для каждого КлючЗначение Из Реквизиты Цикл
		Если СтруктураПараметров.Свойство(КлючЗначение.Ключ) Тогда
			
			Если ТипЗнч(СтруктураПараметров[КлючЗначение.Ключ]) = Тип("ТаблицаЗначений") Тогда
				// Табличные части.
				ТаблицаОбъекта 	   = КопияТаблицыОбъекта(СтруктураПараметров[КлючЗначение.Ключ], КлючЗначение.Значение); 
				КоллекцииИдентичны = ОбщегоНазначения.КоллекцииИдентичны(
										КлючЗначение.Значение, ТаблицаОбъекта);
				Если НЕ КоллекцииИдентичны Тогда
					Записывать = Истина;
					Таблицы.Вставить(КлючЗначение.Ключ, ТаблицаОбъекта);
				КонецЕсли;
			Иначе
				// Шапка.
				Если КлючЗначение.Значение <> СтруктураПараметров[КлючЗначение.Ключ] Тогда
					Записывать = Истина;
					Поля.Вставить(КлючЗначение.Ключ, СтруктураПараметров[КлючЗначение.Ключ]);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла; 
	
	Если Записывать Тогда
		
		ТекущийОбъект = ТекПоказатель.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ТекущийОбъект,Поля);

		Для каждого Таблица Из Таблицы Цикл
			ТекущийОбъект[Таблица.Ключ].Очистить();
			Для каждого СтрокаТаблицы Из Таблица.Значение Цикл
				НоваяСтрока = ТекущийОбъект[Таблица.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла; 
		КонецЦикла;
		
		Успех = бит_ОбщегоНазначения.ЗаписатьСправочник(ТекущийОбъект,,"Ошибки");	
	КонецЕсли; 
	
	Возврат Успех;
	
КонецФункции // ОбновитьПоказатель()

// Функция выполняет удаление показателя.
// 
// Параметры:
//  ТекПоказатель        - СправочникСсылка.бит_ПоказателиПроизвольныхОтчетов.
// 
// Возвращаемое значение:
//   флДействиеВыполнено   - Булево.
// 
Функция УдалитьПоказатель(ТекПоказатель) Экспорт

	флДействиеВыполнено = Ложь;
	
	ПоказательОбъект = ТекПоказатель.ПолучитьОбъект();
	
	Попытка
	
		ПоказательОбъект.Удалить();
		флДействиеВыполнено = Истина;
		
	Исключение
		
		ТекстСообщения = "Не удалось удалить показатель %1% по причине ""%2%"".";
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
		                                                                              ,Строка(ТекПоказатель)
																					  ,Строка(ОписаниеОшибки()));
																					  
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);																			  
		
	КонецПопытки;

	Возврат флДействиеВыполнено;
	
КонецФункции // УдалитьПоказатель()

// Функция формирует автоматическое наименование показателя.
// 
// Параметры:
//  Показатель  - СправочникСсылка|СправочникОбъект.бит_ПоказателиПроизвольныхОтчетов.
// 
// Возвращаемое значение:
//  СтрНаименование   - Строка.
// 
Функция АвтоНаименование(Показатель) Экспорт
	
	СтрНаименование = "";
	
	Если Показатель.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение Тогда
		Если ЗначениеЗаполнено(Показатель.ЭлементДанных) Тогда
			СтрНаименование = Строка(Показатель.ЭлементДанных)+" - "+Строка(Показатель.ИмяРесурса);
		Иначе	
			СтрНаименование = Показатель.Код;
		КонецЕсли; 
	ИначеЕсли Показатель.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда
		СтрНаименование = Показатель.Формула;
	Иначе	
		СтрНаименование = Показатель.Код;
	КонецЕсли; 
	
	Возврат СтрНаименование;
	
КонецФункции // АвтоНаименование()

// Функция получает показатели произвольного отчета определенного вида.
// 
// Параметры:
//  НастройкаОтчета - СправочникСсылка.бит_НастройкиПроизвольныхОтчетов.
//  Вид             - ПеречислениеСсылка.бит_ВидыЯчеекПроизвольныхОтчетов.
// 
// Возвращаемое значение:
//   ТаблицаЗначений
// 
Функция ПолучитьПоказателиВида(НастройкаОтчета, Вид) Экспорт
	
	МассивВидов = Новый Массив;
	Если ТипЗнч(Вид) = Тип("Строка") Тогда		
		ТекВид = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета[Вид];
		МассивВидов.Добавить(ТекВид);   		
	ИначеЕсли ТипЗнч(Вид) = Тип("Массив") Тогда	
		МассивВидов = Вид; 		
	Иначе	     		
		МассивВидов.Добавить(Вид);   		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"   , НастройкаОтчета);	
	Запрос.УстановитьПараметр("МассивВидов", МассивВидов); 	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.ПометкаУдаления КАК ПометкаУдаления,
	|	Реквизиты.Владелец КАК Владелец,
	|	Реквизиты.Код КАК Код,
	|	Реквизиты.Код КАК ИмяОбласти,
	|	Реквизиты.Наименование КАК Наименование,
	|	Реквизиты.ВидЯчейки КАК ВидЯчейки,
	|	Реквизиты.ЭлементДанных КАК ЭлементДанных,
	|	Реквизиты.ИмяРесурса КАК ИмяРесурса,
	|	Реквизиты.Формула КАК Формула,
	|	Реквизиты.ФорматЧисел КАК ФорматЧисел,
	|	Реквизиты.ФормироватьДвиженияПоБюджету КАК ФормироватьДвиженияПоБюджету,
	|	Реквизиты.ПериодДанных КАК ПериодДанных,
	|	Реквизиты.КолонкаТаблицыОтчета КАК КолонкаТаблицыОтчета,
	|	Реквизиты.СтрокаТаблицыОтчета КАК СтрокаТаблицыОтчета,
	|	Реквизиты.СтрокаТаблицыОтчета.Таблица КАК ТаблицаОтчета,
	|	Реквизиты.ЗначенияПоУмолчанию.(
	|		ИмяАналитики КАК ИмяАналитики,
	|		Аналитика КАК Аналитика,
	|		ЗначениеАналитики КАК ЗначениеАналитики
	|	) КАК ЗначенияПоУмолчанию,
	|	Реквизиты.КоличественныйУчет КАК КоличественныйУчет,
	|	Реквизиты.Ссылка КАК ПоказательОтчета
	|ИЗ
	|	Справочник.бит_ПоказателиПроизвольныхОтчетов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Владелец = &Владелец
	|	И Реквизиты.ВидЯчейки В(&МассивВидов)
	|	И НЕ Реквизиты.ПометкаУдаления";
	
	Результат  = Запрос.Выполнить();
	Показатели = Результат.Выгрузить();

	Возврат Показатели;
	
КонецФункции // ПолучитьПоказателиВида()

#КонецОбласти 	
 
#Область СлужебныеПроцедурыИФункции

Функция Реквизиты(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Код КАК Код,
	|	Реквизиты.Наименование КАК Наименование,
	|	Реквизиты.ВидЯчейки КАК ВидЯчейки,
	|	Реквизиты.ЭлементДанных КАК ЭлементДанных,
	|	Реквизиты.ИмяРесурса КАК ИмяРесурса,
	|	Реквизиты.Формула КАК Формула,
	|	Реквизиты.ФорматЧисел КАК ФорматЧисел,
	|	Реквизиты.ФормироватьДвиженияПоБюджету КАК ФормироватьДвиженияПоБюджету,
	|	Реквизиты.ПериодДанных КАК ПериодДанных,
	|	Реквизиты.КолонкаТаблицыОтчета КАК КолонкаТаблицыОтчета,
	|	Реквизиты.СтрокаТаблицыОтчета КАК СтрокаТаблицыОтчета,
	|	Реквизиты.ЗначенияПоУмолчанию.(
	|		ИмяАналитики КАК ИмяАналитики,
	|		Аналитика КАК Аналитика,
	|		ЗначениеАналитики КАК ЗначениеАналитики
	|	) КАК ЗначенияПоУмолчанию,
	|	Реквизиты.Аргументы.(
	|		Аргумент КАК Аргумент
	|	) КАК Аргументы,
	|	Реквизиты.КоличественныйУчет КАК КоличественныйУчет
	|ИЗ
	|	Справочник.бит_ПоказателиПроизвольныхОтчетов КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРеквизиты = РезультатЗапроса.Выгрузить();
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
		
	Возврат Реквизиты;

КонецФункции // Реквизиты()
 
Функция КопияТаблицыОбъекта(Коллекция, Шаблон)

	Таблица = Шаблон.СкопироватьКолонки();
	Для каждого СтрокаТаблицы Из Коллекция Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла; 
	
	Возврат Таблица;
	
КонецФункции
 
#КонецОбласти

#КонецЕсли