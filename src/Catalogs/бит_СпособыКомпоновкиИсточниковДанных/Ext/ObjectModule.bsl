#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий
	
Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства);
		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры // ПриЗаписи()	

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("Основание") И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
			ЗаполнитьПоИсточникуДанных(ДанныеЗаполнения.Основание);
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		ЗаполнитьПоИсточникуДанных(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
 
// Функция получает элементы данных способа компоновки источников данных.
// 
// Параметры:
//  СпособКомпоновки - СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных.
// 
// Возвращаемое значение:
//  РезультатЗапроса
// 
Функция ПолучитьЭлементыДанных(СпособКомпоновки) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", СпособКомпоновки);
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	бит_ЭлементыДанных.Ссылка КАК Ссылка,
	|	бит_ЭлементыДанных.ВидГруппы,
	|	ЗНАЧЕНИЕ(Справочник.бит_ЭлементыДанных.ПустаяСсылка) КАК Приемник
	|ИЗ
	|	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
	|ГДЕ
	|	бит_ЭлементыДанных.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ
	|";
	
    Результат = Запрос.Выполнить();
	
	Возврат Результат;

КонецФункции // ПолучитьЭлементыДанных()

// Процедура выполняет копирование элементов данных.
// 
// Параметры:
//  РезультатЭлементыДанных  	- РезультатЗапроса.
//  НовыйВладелец            	- СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных.
//  СоответствиеЭлементовДанных - Соответствие (По умолчанию = Неопределено).
// 
Процедура СкопироватьЭлементыДанных(РезультатЭлементыДанных, НовыйВладелец, СоответствиеЭлементовДанных = Неопределено) Экспорт

	СоответствиеЭлементовДанных = Новый Соответствие;
	
	ДеревоДанные = РезультатЭлементыДанных.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	НачатьТранзакцию();
	
	ОбойтиИерархиюЭлементовДанных(ДеревоДанные, НовыйВладелец, СоответствиеЭлементовДанных);
	
	// Замена аргументов в формулах
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("ВидГруппы", Перечисления.бит_ВидыГруппДанных.Формула);
	
	МассивСтрокФормул = ДеревоДанные.Строки.НайтиСтроки(СтрОтбор, Истина);
	
	Для каждого СтрокаФормула Из МассивСтрокФормул Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаФормула.Приемник) Тогда		
			Продолжить;		
		КонецЕсли; 
		
		СпрОбъект = СтрокаФормула.Приемник.ПолучитьОбъект();
		Для каждого СтрокаТаблицы Из СпрОбъект.СтрокиРасчетаДляФормулы Цикл
		
			КодСтарый 	  = СтрокаТаблицы.СтрокаРасчета.Код;
			КодНовый  	  = "";
			НовыйАргумент = Справочники.бит_ЭлементыДанных.ПустаяСсылка();
			
			СтрокаДереваАргумент = ДеревоДанные.Строки.Найти(СтрокаТаблицы.СтрокаРасчета, "Ссылка", Истина);
			Если Не СтрокаДереваАргумент = Неопределено Тогда
			
				НовыйАргумент = СтрокаДереваАргумент.Приемник;
				КодНовый      = НовыйАргумент.Код;
			
			КонецЕсли; 
			
			СтрокаТаблицы.СтрокаРасчета = НовыйАргумент;
			КодНовый                    = КодНовый;
			
			// Замена кодов в тексте формулы
			СпрОбъект.Формула = СтрЗаменить(СпрОбъект.Формула, КодСтарый, КодНовый);
		
		КонецЦикла; // По аргументам
		
		бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОбъект, , "Ошибки");
		
	КонецЦикла; // По строкам дерева с элементами данных - формулами.
	
	ЗафиксироватьТранзакцию();  	                            
								
	ТекстСообщения = Нстр("ru = 'Копирование завершено.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
КонецПроцедуры // СкопироватьЭлементыДанных()

Процедура ЗаполнитьПоИсточникуДанных(ДанныеЗаполнения)

	Если ПустаяСтрока(Наименование) Тогда
		Наименование = Строка(ДанныеЗаполнения);
	КонецЕсли; 
	
	НоваяСтрока = ИсточникиДанных.Добавить();
	НоваяСтрока.ИсточникДанных = ДанныеЗаполнения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоляИсточника.НомерСтроки КАК НомерСтроки,
	|	ПоляИсточника.Имя,
	|	ПоляИсточника.Синоним,
	|	ПоляИсточника.ВидПоля
	|ИЗ
	|	Справочник.бит_ИсточникиДанных.Поля КАК ПоляИсточника
	|ГДЕ
	|	ПоляИсточника.Ссылка = &Ссылка
	|	И ПоляИсточника.Использование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка 		 = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = КолонкиТаблицы.Добавить();
		НоваяСтрока.ИмяКолонки = Выборка.Имя;
		НоваяСтрока.ВидКолонки = Выборка.ВидПоля;
		
		НоваяСтрока = СоответствиеКолонок.Добавить();
		НоваяСтрока.ИмяКолонки 			= Выборка.Имя;
		НоваяСтрока.ИмяКолонкиИсточника = Выборка.Имя;
		НоваяСтрока.ИсточникДанных      = ДанныеЗаполнения;
		
	КонецЦикла;
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет обход элементов данных и копирует элементы данных.
// Рекурсивный вызов.
// 
// Параметры:
//  СтрокаВерх  				- СтрокаДереваЗначений.
//  НовыйВладелец 				- СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных.
//  СоответствиеЭлементовДанных - Соответсвие.
// 
Процедура ОбойтиИерархиюЭлементовДанных(СтрокаВерх, НовыйВладелец, СоответствиеЭлементовДанных)
	
	Для каждого СтрокаДерева Из СтрокаВерх.Строки Цикл

		СпрОбъект = СтрокаДерева.Ссылка.Скопировать();
		СпрОбъект.Владелец = НовыйВладелец;
		
		Если ЗначениеЗаполнено(СпрОбъект.Родитель) Тогда
			// Замена родителя
			СпрОбъект.Родитель = СтрокаВерх.Приемник; 
		КонецЕсли; 

		ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОбъект, , "Все");
		Если ДействиеВыполнено Тогда 
			СтрокаДерева.Приемник = СпрОбъект.Ссылка;
			СоответствиеЭлементовДанных.Вставить(СтрокаДерева.Ссылка, СтрокаДерева.Приемник);  
		КонецЕсли; 

		ОбойтиИерархиюЭлементовДанных(СтрокаДерева, НовыйВладелец, СоответствиеЭлементовДанных);

	КонецЦикла; 
	
КонецПроцедуры // ОбойтиИерархиюЭлементовДанных()

#КонецОбласти

#КонецЕсли