
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущееИмяКолонки; // Хранит текущее значения реквизита ИмяКолонки.

&НаКлиенте
Перем мКолонкиИсточников; // Хранит соответствие источников данных и списков колонок источников данных.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьТипыКолонокТаблицы(ТекущийОбъект);
		
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	                                     	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	
	ОбъектКопирования = Параметры.ЗначениеКопирования;
	Если Параметры.Ключ.Пустая() И ЗначениеЗаполнено(ОбъектКопирования) Тогда
					  		
		Если Не ОбъектКопирования.ЭтоГруппа Тогда
			
			СпрОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_СпособыКомпоновкиИсточниковДанных"));
			РезультатЭлементыДанных = СпрОбъект.ПолучитьЭлементыДанных(ОбъектКопирования.Ссылка);	
			Если Не РезультатЭлементыДанных.Пустой() Тогда 				
				фЗадатьВопросОКопированииЭлементовДанных = Истина;
				фКэшЗначений.Вставить("ОбъектКопирования", ОбъектКопирования.Ссылка);
			КонецЕсли;
        КонецЕсли; // Это не группа
	
	КонецЕсли;
	                       		
	// УстановитьОтборСпискаЭлементовДанных(Параметры.Ключ);
	// СформироватьСписокКолонкиТаблицы();
	// ЗаполнитьПодменюВыбораУровня(); 	
	// УстановитьВидимостьДоступность();	   	
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	КопироватьЭлементыДанных = Ложь;
	Если фЗадатьВопросОКопированииЭлементовДанных Тогда 
		
		Оповещение = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'Выполнить копирование элементов данных?'") + Символы.ПС + Нстр("ru = 'Способ компоновки будет при этом записан.'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
		
	Иначе
		
		ПриОткрытииСервер(КопироватьЭлементыДанных, мКолонкиИсточников);
		Если КопироватьЭлементыДанных Тогда
			ОповеститьОбИзменении(Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных"));
			ОповеститьОбИзменении(Тип("СправочникСсылка.бит_ЭлементыДанных"));	
		КонецЕсли;  		
		
	КонецЕсли;                                      	
	
КонецПроцедуры // ПриОткрытии()

// Процедура - завершение обработки вопроса о выполнении копирования элементов данных при открытии формы. 
// 
&НаКлиенте
Процедура ПриОткрытииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	КопироватьЭлементыДанных = Ложь;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 				
		КопироватьЭлементыДанных = Истина;    				
	КонецЕсли; // Нужно копировать
	
	ПриОткрытииСервер(КопироватьЭлементыДанных, мКолонкиИсточников);
	Если КопироватьЭлементыДанных Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.бит_ЭлементыДанных"));	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	      	
	Для каждого СтрТабл Из Объект.КолонкиТаблицы Цикл
		
		Если СтрТабл.ВидКолонки = "Поле" Тогда
			
			ТекущийОбъект.КолонкиТаблицы[СтрТабл.НомерСтроки - 1].ОписаниеТипов = Новый ХранилищеЗначения(СтрТабл.Тип); 			
		
		КонецЕсли; 		
	
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборСпискаЭлементовДанных(Объект.Ссылка);
	
	ЗаполнитьПодменюВыбораУровня();
	
	УстановитьВидимостьДоступность(Ложь);
	
	ПрочитатьТипыКолонокТаблицы(ТекущийОбъект);
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ЗаполнитьПодменюВыбораУровня();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // НаименованиеПриИзменении()

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // НаименованиеПолноеПриИзменении()

&НаКлиенте
Процедура ПанельОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ПанельОсновнаяПриСменеСтраницы()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКолонкиТаблицы

&НаКлиенте
Процедура КолонкиТаблицыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	 
	 ТекущиеДанные      = Элементы.КолонкиТаблицы.ТекущиеДанные;
	 мТекущееИмяКолонки = ?(НоваяСтрока, "", ТекущиеДанные.ИмяКолонки);
	 
КонецПроцедуры // КолонкиТаблицыПриНачалеРедактирования()

&НаКлиенте
Процедура КолонкиТаблицыПередОкончаниемРедактирования()
	
	Отказ = Ложь;
		
	ПроверитьДублированиеЗначенийВТабличнойЧасти("КолонкиТаблицы", "ИмяКолонки", Отказ);

КонецПроцедуры // КолонкиТаблицыПередОкончаниемРедактирования()

&НаКлиенте
Процедура КолонкиТаблицыПриОкончанииРедактирования()
	
	СформироватьСписокКолонкиТаблицы();
	
КонецПроцедуры // КолонкиТаблицыПриОкончанииРедактирования()

&НаКлиенте
Процедура КолонкиТаблицыПередУдалением(Элемент, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанные = Элементы.КолонкиТаблицы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяКолонки", ТекущиеДанные.ИмяКолонки);
	
	МассивКУдалению = Объект.СоответствиеКолонок.НайтиСтроки(Отбор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Если МассивКУдалению.Количество() > 0 Тогда
		
		ДополнительныеПараметры.Вставить("МассивКУдалению", МассивКУдалению);

		Оповещение = Новый ОписаниеОповещения("КолонкиТаблицыПередУдалениемОбработатьПервыйВопрос", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = Нстр("ru = 'Будут очищены соответствия с источниками для данной колонки. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
		Отказ = Истина;
		
	Иначе
		
		ИзменяемыеЭлементыДанных = НайтиИзменяемыеЭлементыДанных(Объект.Ссылка, ТекущиеДанные.ИмяКолонки);
		Если ИзменяемыеЭлементыДанных.Количество() > 0 Тогда
			
			ДополнительныеПараметры.Вставить("ИзменяемыеЭлементыДанных", ИзменяемыеЭлементыДанных);
			
			Оповещение = Новый ОписаниеОповещения("КолонкиТаблицыПередУдалениемОбработатьВторойВопрос", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = Нстр("ru = 'Будут удалены строки из таблицы настройки пересчетов по курсам в элементах данных. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // КолонкиТаблицыПередУдалением()

// Процедура - завершение обработки вопроса №1 перед удалением строки табличного поля "КолонкиТаблицы".
// 
&НаКлиенте
Процедура КолонкиТаблицыПередУдалениемОбработатьПервыйВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 			
		Возврат;  			
	КонецЕсли; 
	
	МассивКУдалению = ДополнительныеПараметры.МассивКУдалению;
	
	Для каждого СтрокаКУдалению Из МассивКУдалению Цикл 			
		Объект.СоответствиеКолонок.Удалить(СтрокаКУдалению); 			
	КонецЦикла;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	ИзменяемыеЭлементыДанных = НайтиИзменяемыеЭлементыДанных(Объект.Ссылка, ТекущиеДанные.ИмяКолонки);
	Если ИзменяемыеЭлементыДанных.Количество() > 0 Тогда
		
		ДополнительныеПараметры.Вставить("ИзменяемыеЭлементыДанных", ИзменяемыеЭлементыДанных);
		
		Оповещение = Новый ОписаниеОповещения("КолонкиТаблицыПередУдалениемОбработатьВторойВопрос", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = Нстр("ru = 'Будут удалены строки из таблицы настройки пересчетов по курсам в элементах данных. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ИдентификаторСтроки = ДополнительныеПараметры.Элемент.ТекущаяСтрока;
		ЭлементКоллекции = Объект.КолонкиТаблицы.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИндексЭлементаКоллекции = Объект.КолонкиТаблицы.Индекс(ЭлементКоллекции);
		Объект.КолонкиТаблицы.Удалить(ИндексЭлементаКоллекции);
		
		КолонкиТаблицыПослеУдаления();
		
	КонецЕсли;

	
КонецПроцедуры

// Процедура - завершение обработки вопроса №2 перед удалением строки табличного поля "КолонкиТаблицы".
// 
&НаКлиенте
Процедура КолонкиТаблицыПередУдалениемОбработатьВторойВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 			
		Возврат;  			
	КонецЕсли;  
	ИзменитьЭлементыДанных(ДополнительныеПараметры.ИзменяемыеЭлементыДанных,
		ДополнительныеПараметры.ТекущиеДанные.ИмяКолонки, Неопределено, Истина);

	ИдентификаторСтроки = ДополнительныеПараметры.Элемент.ТекущаяСтрока;
	ЭлементКоллекции = Объект.КолонкиТаблицы.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИндексЭлементаКоллекции = Объект.КолонкиТаблицы.Индекс(ЭлементКоллекции);
	Объект.КолонкиТаблицы.Удалить(ИндексЭлементаКоллекции);
	
	КолонкиТаблицыПослеУдаления();
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиТаблицыПослеУдаления()
	
	СформироватьСписокКолонкиТаблицы();
	   
КонецПроцедуры // КолонкиТаблицыПослеУдаления()

&НаКлиенте
Процедура КолонкиТаблицыПослеУдаленияОбработчик(Элемент)
	
	СформироватьСписокКолонкиТаблицы();
	   
КонецПроцедуры // КолонкиТаблицыПослеУдаления()


&НаКлиенте
Процедура КолонкиТаблицыИмяКолонкиПриИзменении(Элемент)
	 
	ТекущиеДанные = Элементы.КолонкиТаблицы.ТекущиеДанные;

	СпецСимволы = " ,;:[]{}'""/\?!@#$%^&*+=<>~`|()";		

	ТекущиеДанные.ИмяКолонки = бит_ОбщегоНазначенияКлиентСервер.ПроверитьСпецСимволы(ТекущиеДанные.ИмяКолонки, СпецСимволы, "Имя колонки");
	НовоеИмя 				 = ТекущиеДанные.ИмяКолонки;
	
	ИзменяемыеЭлементыДанных = НайтиИзменяемыеЭлементыДанных(Объект.Ссылка, мТекущееИмяКолонки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НовоеИмя", НовоеИмя);
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	ДополнительныеПараметры.Вставить("ИзменяемыеЭлементыДанных", ИзменяемыеЭлементыДанных);


	Если мТекущееИмяКолонки <> НовоеИмя И Не ПустаяСтрока(мТекущееИмяКолонки) Тогда

		Если Объект.СоответствиеКолонок.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("КолонкиТаблицыИмяКолонкиПриИзмененииОбработатьПервыйВопрос", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = Нстр("ru = 'Имя колонки ""%1%"" изменено на ""%2%"". Произвести замену в соответствии колонок?'");
			ТекстВопроса = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстВопроса, мТекущееИмяКолонки, НовоеИмя);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);

		Иначе
			
			Если ИзменяемыеЭлементыДанных.Количество() > 0 Тогда
				
				Оповещение = Новый ОписаниеОповещения("КолонкиТаблицыИмяКолонкиПриИзмененииОбработатьВторойВопрос", ЭтотОбъект, ДополнительныеПараметры);
				ТекстВопроса = Нстр("ru = 'Изменить строки из таблицы настройки пересчетов по курсам в элементах данных?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
				
			Иначе
				
				КолонкиТаблицыПередОкончаниемРедактирования();
				КолонкиТаблицыПриОкончанииРедактирования();
				
			КонецЕсли;
			
		КонецЕсли; // Соответсвие колонок не пустое
		
	Иначе
		
		Если ИзменяемыеЭлементыДанных.Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("КолонкиТаблицыИмяКолонкиПриИзмененииОбработатьВторойВопрос", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = Нстр("ru = 'Изменить строки из таблицы настройки пересчетов по курсам в элементах данных?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		Иначе
			
			КолонкиТаблицыПередОкончаниемРедактирования();
			КолонкиТаблицыПриОкончанииРедактирования()

		КонецЕсли;

	КонецЕсли; // Имя колонки изменено
	 
КонецПроцедуры // КолонкиТаблицыИмяКолонкиПриИзменении()

// Процедура - завершение обработки вопроса №1 при изменении имя колонки.
// 
&НаКлиенте
Процедура КолонкиТаблицыИмяКолонкиПриИзмененииОбработатьПервыйВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.СоответствиеКолонок.НайтиСтроки(Новый Структура("ИмяКолонки", мТекущееИмяКолонки));
	Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		СтрокаТаблицы.ИмяКолонки = ДополнительныеПараметры.НовоеИмя;
	КонецЦикла; // По массиву строк 
	
	ИзменяемыеЭлементыДанных = НайтиИзменяемыеЭлементыДанных(Объект.Ссылка, мТекущееИмяКолонки);
	ДополнительныеПараметры.Вставить("ИзменяемыеЭлементыДанных", ИзменяемыеЭлементыДанных);
	Если ИзменяемыеЭлементыДанных.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КолонкиТаблицыИмяКолонкиПриИзмененииОбработатьВторойВопрос", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = Нстр("ru = 'Изменить строки из таблицы настройки пересчетов по курсам в элементах данных?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	Иначе
		
		КолонкиТаблицыПередОкончаниемРедактирования();
		КолонкиТаблицыПриОкончанииРедактирования()
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - завершение обработки вопроса №2 при изменении имя колонки.
// 
&НаКлиенте
Процедура КолонкиТаблицыИмяКолонкиПриИзмененииОбработатьВторойВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 			
		ИзменитьЭлементыДанных(ДополнительныеПараметры.ИзменяемыеЭлементыДанных, мТекущееИмяКолонки, ДополнительныеПараметры.ТекущиеДанные.ИмяКолонки, Ложь);  			
	КонецЕсли;	
	
	КолонкиТаблицыПередОкончаниемРедактирования();
	КолонкиТаблицыПриОкончанииРедактирования()

КонецПроцедуры

&НаКлиенте
Процедура КолонкиТаблицыВидКолонкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КолонкиТаблицы.ТекущиеДанные;
	
	Если ВРег(ТекущиеДанные.ВидКолонки) = ВРег("Ресурс") Тогда
		ТекущиеДанные.ИспользоватьВРасчетах   = Ложь;
		ТекущиеДанные.СпособПересчетаПоКурсам = фКэшЗначений.Перечисления.бит_СпособыПересчетаПоКурсам.НеПересчитывается;
	Иначе
		ТекущиеДанные.СпособПересчетаПоКурсам = фКэшЗначений.ПустойСпособПересчета;
	КонецЕсли;
	
КонецПроцедуры // КолонкиТаблицыВидКолонкиПриИзменении()

&НаКлиенте
Процедура КолонкиТаблицыСпособПересчетаПоКурсамОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КолонкиТаблицы.ТекущиеДанные;
	ТекущиеДанные.СпособПересчетаПоКурсам = фКэшЗначений.Перечисления.бит_СпособыПересчетаПоКурсам.НеПересчитывается;
	
КонецПроцедуры // КолонкиТаблицыСпособПересчетаПоКурсамОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсточникиДанных

&НаКлиенте 
Процедура ИсточникиДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	мКолонкиИсточников = СформироватьСпискиКолонкиИсточников();

КонецПроцедуры // ИсточникиДанныхПриОкончанииРедактирования()

&НаКлиенте 
Процедура ИсточникиДанныхПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсточникиДанных.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ТекстСообщения = ""; 		
	ПроверитьВозможностьУдаленияИсточника(ТекущиеДанные.ИсточникДанных, ТекстСообщения);
	Если ТекстСообщения <> "" Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Если удалять можно предупредим об очистке соответствий колонок.
	МассивКУдалению = Объект.СоответствиеКолонок.НайтиСтроки(Новый Структура("ИсточникДанных", ТекущиеДанные.ИсточникДанных));
	
	// Дополнительные параметры для обработчика оповещения.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивКУдалению", МассивКУдалению);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	Если МассивКУдалению.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИсточникиДанныхПередУдалениемОбработатьВопрос", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = Нстр("ru = 'Будут очищены соответствия с источниками для данной колонки. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
		
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры // ИсточникиДанныхПередУдалением()

// Процедура - завершение обработки вопроса перед удалением источника данных.
// 
&НаКлиенте
Процедура ИсточникиДанныхПередУдалениемОбработатьВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда  			
		Возврат;   			
	КонецЕсли; 
	
	МассивКУдалению = ДополнительныеПараметры.МассивКУдалению;
	
	Для каждого СтрокаКУдалению Из МассивКУдалению Цикл 			
		Объект.СоответствиеКолонок.Удалить(СтрокаКУдалению); 			
	КонецЦикла;
	
	ИдентификаторСтроки = ДополнительныеПараметры.Элемент.ТекущаяСтрока;
	ЭлементКоллекции = Объект.ИсточникиДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИндексЭлементаКоллекции = Объект.ИсточникиДанных.Индекс(ЭлементКоллекции);
	Объект.ИсточникиДанных.Удалить(ИндексЭлементаКоллекции);
	
	ИсточникиДанныхПослеУдаления();	
	
КонецПроцедуры
          
&НаКлиенте 
Процедура ИсточникиДанныхПослеУдаления()
	
	мКолонкиИсточников = СформироватьСпискиКолонкиИсточников();
	
КонецПроцедуры // ИсточникиДанныхПослеУдаления()

&НаКлиенте
Процедура ИсточникиДанныхПослеУдаленияОбработчик(Элемент)
	
	мКолонкиИсточников = СформироватьСпискиКолонкиИсточников();
	
КонецПроцедуры


&НаКлиенте
Процедура ИсточникиДанныхИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсточникиДанных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтотОбъект
						                               , Элемент
													   , ТекущиеДанные
													   , "ИсточникДанных"
													   , фКэшЗначений.СписокВыбораИсточникаДанных
													   , СтандартнаяОбработка);
	
КонецПроцедуры // ИсточникиДанныхИсточникДанныхНачалоВыбора()
												   
&НаКлиенте
Процедура ИсточникиДанныхИсточникДанныхОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсточникиДанных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ИсточникДанных = Неопределено;
	
КонецПроцедуры // ИсточникиДанныхИсточникДанныхОчистка()

&НаКлиенте
Процедура СоответствиеКолонокИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
		
	Для каждого СтрокаТаблицы Из Объект.ИсточникиДанных Цикл 	
		Элемент.СписокВыбора.Добавить(СтрокаТаблицы.ИсточникДанных);  	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеКолонокИмяКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СоответствиеКолонок.ТекущиеДанные;
	
	// Заполним список выбора доступными полями источника данных.
	Если ЗначениеЗаполнено(ТекущиеДанные.ИсточникДанных) Тогда
		
		СписокВыбора = мКолонкиИсточников[ТекущиеДанные.ИсточникДанных];
		Если СписокВыбора <> Неопределено Тогда		
			Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());  		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // СоответствиеКолонокИмяКолонкиИсточникаНачалоВыбораИзСписка()

&НаКлиенте
Процедура СоответствиеКолонокИмяКолонкиИсточникаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СоответствиеКолонок.ТекущиеДанные;
	
	// Заполним список выбора доступными полями источника данных.
	Если ЗначениеЗаполнено(ТекущиеДанные.ИсточникДанных) Тогда
		
		СписокВыбора = мКолонкиИсточников[ТекущиеДанные.ИсточникДанных];
		Если СписокВыбора <> Неопределено Тогда		
			Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());  		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // СоответствиеКолонокИмяКолонкиИсточникаАвтоПодбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлементыДанных

&НаКлиенте
Процедура СписокЭлементыДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		ДобавитьЭлементДанных(Ложь);	
	КонецЕсли;     	 
	
КонецПроцедуры // СписокЭлементыДанныхПередНачаломДобавления()

&НаКлиенте
Процедура СписокЭлементыДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("Ключ", ВыбраннаяСтрока);
	ПараметрыПередачи.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ОткрытьФорму("Справочник.бит_ЭлементыДанных.ФормаОбъекта", ПараметрыПередачи, ЭтотОбъект, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактированиеНаименования(Команда)
	
	ПараметрыФормы = Новый Структура("РедактируемыйТекст", Объект.НаименованиеМногоязычное); 
	
	Обработчик = Новый ОписаниеОповещения("РедактированиеНаименованияЗавершение", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("ОбщаяФорма.бит_ФормаРедактированияТекстаНаРазныхЯзыках",ПараметрыФормы,,,,, Обработчик, Режим);
	
КонецПроцедуры // РедактированиеНаименования()

// Процедура - завершение обработки команды "РедактированиеНаименования".
// 
&НаКлиенте
Процедура РедактированиеНаименованияЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
	
		Объект.НаименованиеМногоязычное = Результат;
		Объект.НаименованиеПолное 	    = НСтр(Объект.НаименованиеМногоязычное, "ru");
		
		Модифицированность = Истина;  	
		УстановитьВидимостьДоступность();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОткрытьОтчетПроверку();
	
КонецПроцедуры // Проверить()

&НаКлиенте
Процедура ПроверитьПоЭлементамДанных(Команда)
	
	ОткрытьОтчетПроверку("Фильтр");
	  
КонецПроцедуры // ПроверитьПоЭлементамДанных()

&НаКлиенте
Процедура ЗаполнитьКодификаторыВсе(Команда)
	
	ТекущаяСтрока = Элементы.СписокЭлементыДанных.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКодификаторы(ТекущаяСтрока, Ложь);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.бит_ЭлементыДанных"));
	
	ТекстСообщения = Нстр("ru = 'Кодификаторы установлены.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);

КонецПроцедуры // ЗаполнитьКодификаторыВсе()

&НаКлиенте
Процедура ЗаполнитьКодификаторыПоИерархии(Команда)
	
	ТекущаяСтрока = Элементы.СписокЭлементыДанных.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКодификаторы(ТекущаяСтрока, Истина);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.бит_ЭлементыДанных"));
	
	ТекстСообщения = Нстр("ru = 'Кодификаторы установлены.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры // ЗаполнитьКодификаторыПоИерархии()

&НаКлиенте
Процедура КолонкиТаблицыУстановитьВсе(Команда)
	
	ОбработатьФлагиКолонкиТаблицы(1);
	
КонецПроцедуры // КолонкиТаблицыУстановитьВсе()

&НаКлиенте
Процедура КолонкиТаблицыСнятьВсе(Команда)
	
	ОбработатьФлагиКолонкиТаблицы(0);
	
КонецПроцедуры // КолонкиТаблицыСнятьВсе()

&НаКлиенте
Процедура КолонкиТаблицыИнвертировать(Команда)
	
	ОбработатьФлагиКолонкиТаблицы(2);
	
КонецПроцедуры // КолонкиТаблицыИнвертировать()

&НаКлиенте
Процедура ДействиеСписокЭлементыДанныхГруппаУровень(Команда)
	
	Элементы.СписокЭлементыДанных.Свернуть(фКэшЗначений.бит_ЭлементыДанныхПустаяСсылка);
	
	КнопкиУровней = Элементы.СписокЭлементыДанныхПодменюУровни.ПодчиненныеЭлементы;
	
	НомПодчерк = Найти(Команда.Имя, "_");
	Если НомПодчерк > 0 Тогда
	
		НомУровняСтр = Сред(Команда.Имя, НомПодчерк + 1);
		Попытка 			 
			НомУровня = Число(НомУровняСтр);  		 
		Исключение
			НомУровня = - 1;
		КонецПопытки; 

		Если НомУровня > 0 Тогда

			МассивЭлементов = ПолучитьМассивРазворачиваемыхУзлов(НомУровня - 1);
			Для каждого СтрЭлемент Из МассивЭлементов Цикл
				Элементы.СписокЭлементыДанных.Развернуть(СтрЭлемент);	
			КонецЦикла;

			Уровень = 1;
			Для каждого Кнопка Из КнопкиУровней Цикл 		   
				Кнопка.Пометка = Ложь;     			   
				Если Уровень = НомУровня Тогда   			   
					Кнопка.Пометка = Истина;  			   
				КонецЕсли;    			   
				Уровень = Уровень + 1;
			КонецЦикла; 

		КонецЕсли; 
		 
		фУровеньПросмотраДерева = НомУровня;
		 
	КонецЕсли;
	
КонецПроцедуры // ДействиеСписокЭлементыДанныхГруппаУровень()

&НаКлиенте
Процедура СоответствиеКолонокЗаполнить(Кнопка)
	
	Если Объект.СоответствиеКолонок.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СоответствиеКолонокЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ЗаполнитьСоответствиеКолонок(мКолонкиИсточников);
		
	КонецЕсли; 

КонецПроцедуры // СоответствиеКолонокЗаполнить()

// Процедура - завершение обработки команды "СоответствиеКолонокЗаполнить".
// 
&НаКлиенте
Процедура СоответствиеКолонокЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СоответствиеКолонок.Очистить();
	
	ЗаполнитьСоответствиеКолонок(мКолонкиИсточников);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)

	ДобавитьЭлементДанных(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "СправочникОбъект.бит_СпособыКомпоновкиИсточниковДанных");
	
	СписокВыбораИсточникаДанных = Новый СписокЗначений;
	МассивТипов = Объект.Ссылка.Метаданные().ТабличныеЧасти.ИсточникиДанных.Реквизиты.ИсточникДанных.Тип.Типы();
	СписокВыбораИсточникаДанных.ЗагрузитьЗначения(МассивТипов);
	фКэшЗначений.Вставить("СписокВыбораИсточникаДанных", СписокВыбораИсточникаДанных);

	фКэшЗначений.Вставить("бит_ЭлементыДанныхПустаяСсылка", Справочники.бит_ЭлементыДанных.ПустаяСсылка());
	
	фКэшЗначений.Вставить("ПустойСпособПересчета", Перечисления.бит_СпособыПересчетаПоКурсам.ПустаяСсылка());
	
	КэшПеречислений = Новый Структура;
	КэшПеречислений.Вставить("бит_СпособыПересчетаПоКурсам", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_СпособыПересчетаПоКурсам));
	    
	фКэшЗначений.Вставить("Перечисления", КэшПеречислений);
	    
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ПриОткрытииСервер(КопироватьЭлементыДанных, КолонкиИсточников)

	Если КопироватьЭлементыДанных Тогда
		
		СпрОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_СпособыКомпоновкиИсточниковДанных"));		
		СправочникЗаписан = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОбъект, , "Нет");
		ЗначениеВДанныеФормы(СпрОбъект, Объект);
		
		Если СправочникЗаписан Тогда 
			
			СпрОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_СпособыКомпоновкиИсточниковДанных"));
			РезультатЭлементыДанных = СпрОбъект.ПолучитьЭлементыДанных(фКэшЗначений.ОбъектКопирования);
			Если Не РезультатЭлементыДанных.Пустой() Тогда
				СпрОбъект.СкопироватьЭлементыДанных(РезультатЭлементыДанных, Объект.Ссылка);
			КонецЕсли;
			
			ЗначениеВДанныеФормы(СпрОбъект, Объект);
			      					
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьОтборСпискаЭлементовДанных(Объект.Ссылка);  	
	ЗаполнитьПодменюВыбораУровня();      	
	
	СформироватьСписокКолонкиТаблицы();
	КолонкиИсточников = СформироватьСпискиКолонкиИсточников();

	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ПриОткрытииСервер()

&НаСервере
Процедура УстановитьВидимостьДоступность(ПроверятьМодифицированность = Истина)
	
	ЗапретитьИзменятьЭлементыДанных = (ПроверятьМодифицированность И ЭтотОбъект.Модифицированность)
									Или Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.СписокЭлементыДанных.Доступность = Не ЗапретитьИзменятьЭлементыДанных;		
	Элементы.НадписьЗапрет.Видимость 		  = ЗапретитьИзменятьЭлементыДанных;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаСервере
Процедура ПрочитатьТипыКолонокТаблицы(ТекущийОбъект)

	Для каждого СтрТабл Из ТекущийОбъект.КолонкиТаблицы Цикл
		
		Если СтрТабл.ВидКолонки = "Поле" И ТипЗнч(СтрТабл.ОписаниеТипов) = Тип("ХранилищеЗначения") Тогда
			
			ОписаниеТиповСтроки = СтрТабл.ОписаниеТипов.Получить();
			Если ОписаниеТиповСтроки <> Неопределено Тогда
				Объект.КолонкиТаблицы[СтрТабл.НомерСтроки - 1].Тип = ОписаниеТиповСтроки;		
			КонецЕсли; 			
		
		КонецЕсли; 		
	
	КонецЦикла;	

КонецПроцедуры // ПрочитатьТипыКолонокТаблицы()
            
// ----------------------------------------------------------------------
// Табличные части

// Формирует список колонок результирующей таблицы 
// для выбора имя колонки в таблице "СоответствиеКолонок".
// 
&НаСервере
Процедура СформироватьСписокКолонкиТаблицы()

	Элементы.СоответствиеКолонокИмяКолонки.СписокВыбора.Очистить();
	
	Для каждого СтрокаТаблицы Из Объект.КолонкиТаблицы Цикл   	
		Элементы.СоответствиеКолонокИмяКолонки.СписокВыбора.Добавить(СтрокаТаблицы.ИмяКолонки);    	
	КонецЦикла; 
	
КонецПроцедуры // СформироватьСписокКолонкиТаблицы()

//  Формирует список колонок по источнику данных.
// 
// Параметры:
//  ИсточникДанных - СправочникСсылка.ИсточникиДанныхДляРасчетовПоМоделиБюджетирования.
// 
// Возвращаемое значение:
//  СписокЗначений
// 
&НаСервере
Функция СформироватьСписокКолонкиИсточникДанных(ИсточникДанных)

	РезСписок = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ИсточникДанных) Тогда
		
		Если ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда

			Для каждого Поле Из ИсточникДанных.Поля Цикл

				Если Поле.Использование Тогда

					ИмяПоля = ?(ПустаяСтрока(Поле.Синоним),Поле.Имя,Поле.Синоним);
					РезСписок.Добавить(ИмяПоля);

				КонецЕсли;

			КонецЦикла; 

		ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных") Тогда

			Для каждого СтрокаТаблицы Из ИсточникДанных.КолонкиТаблицы Цикл

				РезСписок.Добавить(СтрокаТаблицы.ИмяКолонки);

			КонецЦикла; 

		КонецЕсли; // Проверка на тип источника

	КонецЕсли; // Источник заполнен

	Возврат РезСписок;
	
КонецФункции

// Функция формирует соответствие источников данных и списка колонок источника.
// 
// Возвращаемое значение:
//   Соответствие.
// 
&НаСервере
Функция СформироватьСпискиКолонкиИсточников()

	КолонкиИсточников = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из Объект.ИсточникиДанных Цикл

		Если ЗначениеЗаполнено(СтрокаТаблицы.ИсточникДанных) Тогда

			РезСписок = СформироватьСписокКолонкиИсточникДанных(СтрокаТаблицы.ИсточникДанных); 
			КолонкиИсточников.Вставить(СтрокаТаблицы.ИсточникДанных, РезСписок);

		КонецЕсли; 

	КонецЦикла; 

	Возврат КолонкиИсточников;
	
КонецФункции // СформироватьСпискиКолонкиИсточников()

// Процедура заполняет табличную часть "СоответствиеКолонок". 
// Подбор производится по именам колонок результирующей таблицы и именам колонок источника.
// 
// Параметры:
//  мКолонкиИсточников - Соответствие.
// 
&НаСервере
Процедура ЗаполнитьСоответствиеКолонок(мКолонкиИсточников)
	
	Для каждого СтрокаИсточник Из Объект.ИсточникиДанных Цикл
		
		СписокКолонокИсточника = мКолонкиИсточников[СтрокаИсточник.ИсточникДанных];
		Если СписокКолонокИсточника = Неопределено Тогда
			Продолжить;	
		КонецЕсли;	
		
		Для каждого СтрокаКолонки Из Объект.КолонкиТаблицы Цикл
				
			НайденныйЭлемент = СписокКолонокИсточника.НайтиПоЗначению(СтрокаКолонки.ИмяКолонки);
			
			Если НайденныйЭлемент <> Неопределено Тогда
				
				НоваяСтрока = Объект.СоответствиеКолонок.Добавить();
				НоваяСтрока.ИсточникДанных      = СтрокаИсточник.ИсточникДанных;
				НоваяСтрока.ИмяКолонки          = СтрокаКолонки.ИмяКолонки;
				НоваяСтрока.ИмяКолонкиИсточника = НайденныйЭлемент.Значение;
				
			КонецЕсли; 
			
		КонецЦикла;   	    
		
	КонецЦикла;
	
	Модифицированность = Истина;  	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ЗаполнитьСоответствиеКолонок()

&НаСервере
Процедура ПроверитьВозможностьУдаленияИсточника(ИсточникДанных, ТекстСообщения)
	
 	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_ЭлементыДанных.Код,
	|	бит_ЭлементыДанных.Наименование
	|ИЗ
	|	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
	|ГДЕ
	|	бит_ЭлементыДанных.Владелец = &Владелец
	|	И бит_ЭлементыДанных.ИсточникДанных = &ИсточникДанных
	|";    				   
	Запрос.УстановитьПараметр("Владелец"	  , Объект.Ссылка);
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
			
		ТекстСообщения = Нстр("ru = 'Источник данных ""%1%"" используется в элементах данных: '");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ИсточникДанных);
			
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл		
			ТекстСообщения = ТекстСообщения + Символы.ПС + Выборка.Код + " " + Выборка.Наименование; 		
		КонецЦикла; 
		 
		ТекстСообщения = ТекстСообщения + Символы.ПС + Нстр("ru = 'Источник данных не может быть удален!'");
					
	КонецЕсли; 

КонецПроцедуры // ПроверитьВозможностьУдаленияИсточника()

&НаСервере
Процедура ПроверитьДублированиеЗначенийВТабличнойЧасти(ИмяТч, ИмяРеквизита, Отказ)
	
	СпрОбъект      = ДанныеФормыВЗначение(Объект, Тип(фКэшЗначений.ИмяТипаОбъекта));
	СтруктураПолей = Новый Структура(ИмяРеквизита);
	
	бит_ОбщегоНазначения.ПроверитьДублированиеЗначенийВТабличнойЧасти(СпрОбъект, ИмяТч, СтруктураПолей, Отказ);

КонецПроцедуры // ПроверитьДублированиеЗначенийВТабличнойЧасти()

&НаСервере
Процедура УстановитьОтборСпискаЭлементовДанных(ТекСсылка)

	СписокЭлементыДанных.Отбор.Элементы.Очистить();
	бит_РаботаСДиалогамиСервер.УстановитьЭлементОтбораСписка(СписокЭлементыДанных, "Владелец", ТекСсылка, , "Владелец");
		
КонецПроцедуры // УстановитьОтборСпискаЭлементовДанных()

&НаСервере
Процедура УстановитьКодификаторыИерархически(СтрокаДереваВерх, КодификаторРодителя)
	 
	КоличествоНаУровне = СтрокаДереваВерх.Строки.Количество();
	Ном = 1;
	
	Для каждого СтрокаДерева Из СтрокаДереваВерх.Строки Цикл
	 
		ТекущийКодификатор = КодификаторРодителя + ?(ПустаяСтрока(КодификаторРодителя), "", ".") + Ном;

		ТекущийОбъект = СтрокаДерева.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.Кодификатор 			= ТекущийКодификатор;
		ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		бит_ОбщегоНазначения.ЗаписатьСправочник(ТекущийОбъект, , "Ошибки", Истина);

		УстановитьКодификаторыИерархически(СтрокаДерева, ТекущийКодификатор);
		Ном = Ном + 1;
		
	КонецЦикла;   	
 
КонецПроцедуры // УстановитьКодификаторыИерархически()

&НаСервере
Процедура ЗаполнитьКодификаторы(ТекЭлементДанных, ПоТекущейГруппе)
	
	ТекущийРодитель = ?(ПоТекущейГруппе, ТекЭлементДанных.Родитель, фКэшЗначений.бит_ЭлементыДанныхПустаяСсылка);
		
    Запрос = Новый Запрос;
    Запрос.Текст =  "
	|ВЫБРАТЬ
	|	бит_ЭлементыДанных.Ссылка 		КАК Ссылка,
	|	бит_ЭлементыДанных.Наименование КАК Наименование
	|ИЗ
	|	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
	|ГДЕ
	|	бит_ЭлементыДанных.Владелец = &Владелец
	|	И бит_ЭлементыДанных.Ссылка В ИЕРАРХИИ(&Родитель)
	|   И бит_ЭлементыДанных.Ссылка <> &Родитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ,
	|	Наименование
	|";  
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
   	Запрос.УстановитьПараметр("Родитель", ТекущийРодитель);
                                              
    Результат       = Запрос.Выполнить();   
    РезультатДерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
   
    УстановитьКодификаторыИерархически(РезультатДерево, ТекущийРодитель.Кодификатор);
		
КонецПроцедуры // ЗаполнитьКодификаторы()
 
&НаСервере
Функция ПолучитьРезультатВыборкиЭлементовДанных()

	Результат = Неопределено;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_ЭлементыДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
	|ГДЕ
	|	бит_ЭлементыДанных.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ
	|";
	Результат = Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции // ПолучитьРезультатВыборкиЭлементовДанных()

&НаСервере
Процедура РасчитатьКоличествоУровней(ВыборкаВерх)

	Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		
		УровеньПоВыборке = Выборка.Уровень() + 1;
		фМаксимальныйУровеньДерева = ?(фМаксимальныйУровеньДерева < УровеньПоВыборке, УровеньПоВыборке, фМаксимальныйУровеньДерева);
		РасчитатьКоличествоУровней(Выборка);
	
	КонецЦикла;	

КонецПроцедуры // РасчитатьКоличествоУровней()

&НаСервере
Процедура ОпределитьКоличествоУровней()

	фМаксимальныйУровеньДерева = 0;
	
	Результат = ПолучитьРезультатВыборкиЭлементовДанных();
	РасчитатьКоличествоУровней(Результат);
		
КонецПроцедуры // ОпределитьКоличествоУровней()

&НаСервере
Процедура ЗаполнитьПодменюВыбораУровня()
	
	ОпределитьКоличествоУровней();
	
	Если фУровеньПросмотраДерева = 0 Тогда
		фУровеньПросмотраДерева = фМаксимальныйУровеньДерева;	
	КонецЕсли;

	// Очищаем существующие кнопки подменю
	КоличествоЭлементов = Элементы.СписокЭлементыДанныхПодменюУровни.ПодчиненныеЭлементы.Количество();
	Для Счетчик = 1 По КоличествоЭлементов Цикл
	
		ИндексКнопки = КоличествоЭлементов - Счетчик;
		Кнопка = Элементы.СписокЭлементыДанныхПодменюУровни.ПодчиненныеЭлементы[ИндексКнопки];
		Элементы.Удалить(Кнопка);
	
	КонецЦикла; 
	
	// Создадим команды и кнопки в подменю
	Для Уровень = 1 По фМаксимальныйУровеньДерева Цикл
		
		ИмяКоманды = "СписокЭлементыДанныхГруппаУровень_" + Уровень;
		
		КомандаУровня = Команды.Найти(ИмяКоманды);
		
		Если КомандаУровня = Неопределено Тогда
			
			КомандаУровня = Команды.Добавить(ИмяКоманды);
			КомандаУровня.Действие = "ДействиеСписокЭлементыДанныхГруппаУровень";
			
		КонецЕсли; 
		
		НоваяКнопка = Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элементы.СписокЭлементыДанныхПодменюУровни);
		
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок = "Уровень " + Уровень;
		
		Если Счетчик = фУровеньПросмотраДерева Тогда
			НоваяКнопка.Пометка = Истина;		
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПодменюВыбораУровня()

&НаСервере
Процедура ДополнитьМассивЭлементов(ВыборкаВерх, МассивЭлементов, Уровень)

	Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Уровень() + 1 > Уровень Тогда
			Прервать;
		КонецЕсли;
		
		МассивЭлементов.Добавить(Выборка.Ссылка);
		ДополнитьМассивЭлементов(Выборка, МассивЭлементов, Уровень);
		
	КонецЦикла;	

КонецПроцедуры // ДополнитьМассивЭлементов()

&НаСервере
Функция ПолучитьМассивРазворачиваемыхУзлов(Уровень)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(фКэшЗначений.бит_ЭлементыДанныхПустаяСсылка);
	
	ВыборкаВерх = ПолучитьРезультатВыборкиЭлементовДанных();
	
	ДополнитьМассивЭлементов(ВыборкаВерх, МассивЭлементов, Уровень);
	               	
	Возврат МассивЭлементов;
	
КонецФункции // ПолучитьМассивРазворачиваемыхУзлов()           

&НаСервереБезКонтекста
Функция НайтиИзменяемыеЭлементыДанных(СсылкаСКИД, ИмяКолонки)

	МассивРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"  , СсылкаСКИД);
	Запрос.УстановитьПараметр("ИмяКолонки", ИмяКолонки);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭД_СпособыПересчета.Ссылка
	|ИЗ
	|	Справочник.бит_ЭлементыДанных.СпособыПересчетаПоКурсам КАК ЭД_СпособыПересчета
	|ГДЕ
	|	ЭД_СпособыПересчета.Ссылка.Владелец = &Владелец
	|	И ЭД_СпособыПересчета.ИмяКолонки = &ИмяКолонки
	|СГРУППИРОВАТЬ ПО
	|	ЭД_СпособыПересчета.Ссылка
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивРезультат.Добавить(Выборка.Ссылка);
		КонецЦикла; 
	
	КонецЕсли;	

	Возврат МассивРезультат;
	
КонецФункции // НайтиИзменяемыеЭлементыДанных()

&НаСервереБезКонтекста
Процедура ИзменитьЭлементыДанных(ИзменяемыеЭлементыДанных, ТекущееИмяКолонки, НовоеИмяКолонки, УдалитьСтрокуРесурса = Ложь)

	Для каждого ЭлДн Из ИзменяемыеЭлементыДанных Цикл
		
		ЭлДнОбъект = ЭлДн.ПолучитьОбъект();
		
		НайденныеСтроки = ЭлДнОбъект.СпособыПересчетаПоКурсам.НайтиСтроки(Новый Структура("ИмяКолонки", ТекущееИмяКолонки));
		Для каждого СтрокСп Из НайденныеСтроки Цикл
			
			Если УдалитьСтрокуРесурса Тогда
				ЭлДнОбъект.СпособыПересчетаПоКурсам.Удалить(СтрокСп);	
			Иначе	
				СтрокСп.ИмяКолонки = НовоеИмяКолонки;
			КонецЕсли;   			
		
		КонецЦикла;
		
		бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлДнОбъект, , "Ошибки");
	
	КонецЦикла;	

КонецПроцедуры // ИзменитьЭлементыДанных()

&НаКлиенте
Процедура ДобавитьЭлементДанных(Группа = Ложь)

	ТекущаяСтрока = Элементы.СписокЭлементыДанных.ТекущаяСтрока; 	
	ТекущиеДанные = Элементы.СписокЭлементыДанных.ТекущиеДанные;

	ЗначенияЗаполнения = Новый Структура(); 
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
	Если Группа Тогда
		ЗначенияЗаполнения.Вставить("ВидГруппы",ПредопределенноеЗначение("Перечисление.бит_ВидыГруппДанных.Группировка")); 
	Иначе
		ЗначенияЗаполнения.Вставить("ВидГруппы",ПредопределенноеЗначение("Перечисление.бит_ВидыГруппДанных.ВыборкаДанных")); 
	КонецЕсли; 
	
	Если НЕ ТекущаяСтрока = Неопределено И НЕ ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.ВидГруппы = ПредопределенноеЗначение("Перечисление.бит_ВидыГруппДанных.ВыборкаДанных") 
			ИЛИ ТекущиеДанные.ВидГруппы = ПредопределенноеЗначение("Перечисление.бит_ВидыГруппДанных.Формула") Тогда
			ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.Родитель);
		Иначе
			ЗначенияЗаполнения.Вставить("Родитель", ТекущаяСтрока);
		КонецЕсли;			
	КонецЕсли;
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыПередачи.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.бит_ЭлементыДанных.ФормаОбъекта", ПараметрыПередачи, ЭтотОбъект, ЭтотОбъект); 

КонецПроцедуры // ДобавитьЭлементДанных()
 
&НаКлиенте
Процедура ОткрытьОтчетПроверку(Режим = Неопределено)
			
	ПараметрыФормы = Новый Структура("СпособКомпоновки", Объект.Ссылка);
	Если Режим = "Фильтр" Тогда
		ТекущиеДанные = Элементы.СписокЭлементыДанных.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ПараметрыФормы.Вставить("ЭлементДанных", ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.бит_ПроверкаСпособаКомпоновкиИсточников.Форма", ПараметрыФормы);

КонецПроцедуры // ОткрытьОтчетПроверку()

&НаКлиенте
Процедура ОбработатьФлагиКолонкиТаблицы(ЗначениеФлага)
	
	Для каждого СтрокаТаблицы Из Объект.КолонкиТаблицы Цикл
		
		Если ВРег(СтрокаТаблицы.ВидКолонки) = ВРег("Ресурс") Тогда
			Продолжить;	
		КонецЕсли;
			
		Если ЗначениеФлага = 0 Тогда			
			СтрокаТаблицы.ИспользоватьВРасчетах = Ложь;			
		ИначеЕсли ЗначениеФлага = 1 Тогда 			
			СтрокаТаблицы.ИспользоватьВРасчетах = Истина; 			
		ИначеЕсли ЗначениеФлага = 2 Тогда	 			
			СтрокаТаблицы.ИспользоватьВРасчетах = Не СтрокаТаблицы.ИспользоватьВРасчетах;   			
		КонецЕсли;
				 
	КонецЦикла;
	
	Модифицированность = Истина;  	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ОбработатьФлагиКолонкиТаблицы()

#КонецОбласти
