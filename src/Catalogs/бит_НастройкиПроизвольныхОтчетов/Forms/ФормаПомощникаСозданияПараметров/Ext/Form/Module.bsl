
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНасервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ 			   = Истина;
		ТекстВопроса 	   = Нстр("ru = 'Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект); 
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик оповещения процедуры ""ПередЗакрытием"".
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога	 - решение пользователя
//  ДополнительныеПараметры	 - Произвольный	 - дополнительные параметры
//
&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодготовитьРезультат();
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметры

&НаКлиенте
Процедура СписокПараметровПараметрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПараметров.ТекущиеДанные;
	ТекущиеДанные.Параметр = ПодготовитьИмяПараметра(ТекущиеДанные.Параметр);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоКнопкеЗавершить(Команда)
	
	ПодготовитьРезультат();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СоздатьРеквизитыФормы(КолонкиСпискаПараметров)

	ДобавляемыеРеквизиты = Новый Массив(); 
	Для каждого Колонка  Из КолонкиСпискаПараметров Цикл
		Имя   = Колонка.Значение;
		Тип   = ОбщегоНазначения.ОписаниеТипаСтрока(0);
		Путь  = "СписокПараметров";
		Шапка = Колонка.Представление;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Имя,Тип,Путь,Шапка));
	КонецЦикла; 	

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры // ОбновитьРеквизитыФормы()

&НаСервере
Процедура СоздатьЭлементыФормы()

	ТаблицаПараметров = СписокПараметров.Выгрузить();
	ТаблицаПараметров.Колонки.Удалить("Параметр");
	ТаблицаПараметров.Колонки.Удалить("ИмяОбласти");
	Для каждого КолонкаРеквизита Из ТаблицаПараметров.Колонки Цикл
		ТекКолонка = Элементы.Добавить("СписокПараметров" + КолонкаРеквизита.Имя, Тип("ПолеФормы"), Элементы.СписокПараметров); 
		ТекКолонка.ПутьКДанным = "СписокПараметров." + КолонкаРеквизита.Имя;
		ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
		ТекКолонка.Заголовок = КолонкаРеквизита.Заголовок;
	КонецЦикла; 
	
КонецПроцедуры // СоздатьЭлементыФормы()

&НаСервере
Процедура ЗаполнитьТаблицуПараметров()

	Для каждого Элемент Из Параметры.Имена Цикл
		НоваяСтрока = СписокПараметров.Добавить();
		НоваяСтрока.Параметр = ПодготовитьИмяПараметра(Элемент.Представление);
		//СтрЯзыки = бит_ОбщегоНазначенияКлиентСервер.РазобратьТекстНаЯзыки(Элемент.Представление);
		НоваяСтрока.Ru = Элемент.Представление;
		НоваяСтрока.ИмяОбласти = Элемент.Значение;
	КонецЦикла; 

КонецПроцедуры // ЗаполнитьТаблицуПараметров()
 
&НаСервере
Процедура ПодготовитьФормуНасервере()
	
	СоздатьРеквизитыФормы(Параметры.КолонкиСпискаПараметров);
	СоздатьЭлементыФормы();
	ЗаполнитьТаблицуПараметров();
	
КонецПроцедуры // ПодготовитьФормуНасервере()

&НаКлиентеНаСервереБезКонтекста  
Функция ПодготовитьИмяПараметра(ИмяПараметра)

	Возврат бит_ОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(СокрЛП(ИмяПараметра));
	
КонецФункции // ВалидностьПараметра()

&НаКлиенте
Процедура ПодготовитьРезультат()
	
	Если ПроверитьТаблицуПараметров() Тогда
				
		Модифицированность = Ложь;
		Закрыть(СписокПараметров);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьТаблицуПараметров()

	Отказ = Ложь;
	Пояснение = НСтр("ru = 'Параметр не соответствует требованиям к именам переменных.'") ;
	// Именем переменной, объявленной процедуры или функции может быть любая последовательность букв, 
	// цифр и знаков подчеркивания, начинающаяся с буквы или знака подчеркивания. 
	// Вновь создаваемые имена не должны совпадать с зарезервированными словами языка или именами свойств, 
	// непосредственно доступных в текущем контексте. 
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из СписокПараметров Цикл
		
		ТекстСообщения = ""; 
		
		Поле = "СписокПараметров[%1].Параметр";
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													Поле, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Параметр) Тогда
			Попытка
				Тест = Новый Структура(СтрокаТаблицы.Параметр); 
			Исключение
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА"
																					,"КОРРЕКТНОСТЬ"
																					,"Параметр"
																					,НомерСтроки
																					,"Список параметров"
																					,Пояснение);
			КонецПопытки; 
		Иначе
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА"
																				,
																				,"Параметр"
																				,НомерСтроки
																				,"Список параметров");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,,Отказ);
		КонецЕсли; 
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
	
	Возврат НЕ Отказ;
	
КонецФункции
 
#КонецОбласти