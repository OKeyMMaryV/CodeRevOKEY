
#Область ОписаниеПеременных
 
&НаКлиенте
Перем мЦветЗначение; // Хранит цвет ячеек - значений 

&НаКлиенте
Перем мЦветФормула; // Хранит цвет ячеек - формул

&НаКлиенте
Перем мЦветШаблон; // Хранит цвет ячеек типа текст или шаблон

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	фСписокУдаленныхПоказателей = Новый СписокЗначений;
	БуферОбмена = Новый ФиксированнаяСтруктура("Область, Ячейки", "", Новый Массив);
	
	// Если копирование
	Если Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		фЗначениеКопирования = Параметры.ЗначениеКопирования;
		// Новое наименование настройки отчетов
		Наименование = бит_ОбщегоНазначения.ПолучитьНаименованиеКопии(фЗначениеКопирования.Наименование, фЗначениеКопирования.Метаданные());		
		// Восстановление табличного документа
		ВосстановитьТабличныйДокумент(фЗначениеКопирования.ХранилищеМакета);
	КонецЕсли; 
	
	// Таблица правил
	ЗаполнитьПравилаЗаполнения();
	
	Если ПравилаЗаполнения.Количество() = 0 Тогда
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОсновное;
	Иначе	
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаМакет;	
	КонецЕсли; 
	
	// Список выбора для поля "Имя аналитики" таблицы "ИспользованиеАналитики".
	МаксКоличествоАналитикОтчета = 7;	
	Для n = 1 По МаксКоличествоАналитикОтчета Цикл
		Элементы.ИспользованиеАналитикиИмяАналитики.СписокВыбора.Добавить("Аналитика_" + n);
	КонецЦикла;
	
	ТекущийСпособКомпоновки = Объект.СпособКомпоновки;
	
	// ----------------------------------------------------------------------
	// Редактор формул
	бит_РедакторФормулКлиентСервер.рф_ИнициализацияРедактораФормул(ЭтотОбъект, Истина);
	
	ОбновитьДеревоСтруктуры();	
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекущееПравилоОткрыта = Истина;
	Иначе	
		ВсеПравилаОткрыта 	  = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПроизвольныхОтчетов", "ВсеПравилаОткрыта");
		ТекущееПравилоОткрыта = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПроизвольныхОтчетов", "ТекущееПравилоОткрыта");
	КонецЕсли;
	
	Если НЕ СписокПараметровПодготовлен Тогда
		ПодготовитьФормуИСписокПараметров(Ложь);
	КонецЕсли; 
	
	МакетОтчета.НаправлениеПерехода = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("бит_НастройкиПроизвольныхОтчетов",
										"МакетНаправлениеПерехода", ТипНаправленияПереходаТабличногоДокумента.ПоКолонкам); 
	
	УправлениеПанелямиФормы(ЭтотОбъект);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	мЦветЗначение = Новый Цвет(255, 255, 192);
	мЦветФормула  = Новый Цвет(192, 220, 192);
	мЦветШаблон   = Новый Цвет(255, 255, 255);

	// Копирование данных из другого элемента справочника.
	Если ЗначениеЗаполнено(фЗначениеКопирования) Тогда
		// Открытие формы настройки режима копирования.
		ПараметрыФормы = Новый Структура;
		
		Обработчик = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.ФормаНастройкиКопированияУправляемая",ПараметрыФормы,ЭтотОбъект,,,, Обработчик, Режим); 
		
	Иначе
		
		Если фСообщитьОКонвертацииПравил Тогда 
			ТекстСообщения =  НСтр("ru='Выполнена конвертация правил заполнения.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);   		
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура обработчик оповещения "ПриОткрытииЗавершение".
// 
// Параметры:
// СтруктураРежимаКопирования - Структура.
// Параметры - Структура.
// 
&НаКлиенте
Процедура ПриОткрытииЗавершение(СтруктураРежимаКопирования, Параметры) Экспорт
   
	Если ТипЗнч(СтруктураРежимаКопирования) = Тип("Структура") Тогда
		СкопироватьДанныеИзЗначенияКопирования(СтруктураРежимаКопирования);
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда                              			
			ОповеститьОбИзменении(Объект.Ссылка);	
	        бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСтруктура, ДеревоСтруктура.ПолучитьЭлементы(), Истина);			
		КонецЕсли;
	КонецЕсли;

	Если фСообщитьОКонвертацииПравил Тогда 
		ТекстСообщения =  НСтр("ru='Выполнена конвертация правил заполнения.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);   		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЭтотОбъект.рфРедакторФормулОткрыт И ЭтотОбъект.рфФормула <> ЭтотОбъект.рфСтараяФормула Тогда
	  	ТекстСообщения = Нстр("ru = 'Не закончен ввод формулы!'") + Символы.ПС
					   + Нстр("ru = 'Для окончания ввода закройте окно редактора или нажмите кнопку ""=""(равно) в окне редактора.'");
	  	ПоказатьПредупреждение(,ТекстСообщения, , Нстр("ru = 'Редактор формулы"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПроизвольныхОтчетов", "ВсеПравилаОткрыта", ВсеПравилаОткрыта);
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПроизвольныхОтчетов", "ТекущееПравилоОткрыта", ТекущееПравилоОткрыта);
	КонецЕсли; 
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "бит_ЗаписанЭлементСтруктурыПроизвольногоОтчета" И Параметр.Отчет = Объект.Ссылка Тогда
		 ОбновитьДеревоСтруктуры();
	     бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСтруктура, ДеревоСтруктура.ПолучитьЭлементы(), Истина);
		 
		 Элементы.КомандаСоздатьПравила.Отображение = ОтображениеКнопки.КартинкаИТекст;
		 Элементы.ДеревоСтруктураКонтекстноеМенюКомандаСоздатьПравила.Отображение = ОтображениеКнопки.КартинкаИТекст;
		 Элементы.КомандаСоздатьПравила.ЦветРамки = Новый Цвет(255,0,0);
	 КонецЕсли; 
	
 КонецПроцедуры // ОбработкаОповещения()
 
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Восстановление табличного документа
	ВосстановитьТабличныйДокумент(ТекущийОбъект.ХранилищеМакета);
			
	ЗаполнитьРесурсыСпособаКомпоновки();
	ЗаполнитьНастройкиАналитик();
	ПодготовитьФормуИСписокПараметров(Истина);
	СписокПараметровПодготовлен = Истина;
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СохранитьТекущееПравило(Отказ);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;		
	КонецЕсли;
			
	ТекущийОбъект.ХранилищеМакета = Новый ХранилищеЗначения(МакетОтчета);
	
	СохранитьСписокПараметров(ТекущийОбъект);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("бит_НастройкиПроизвольныхОтчетов",
						"МакетНаправлениеПерехода", МакетОтчета.НаправлениеПерехода,,
						Пользователи.ТекущийПользователь()); 

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;		
	КонецЕсли;
          	
	// Обновим измененные показатели или создадим новые.
	КолонкиПравил = ДанныеФормыВЗначение(ПравилаЗаполнения, Тип("ТаблицаЗначений")).Колонки;
	Для каждого СтрокаТаблицы Из ПравилаЗаполнения Цикл
		
		СтрПар = Новый Структура;  		
		Для каждого Колонка Из КолонкиПравил Цикл 		
			СтрПар.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);  		
		КонецЦикла;
		
		ЗначенияПоУмолчанию = Новый ТаблицаЗначений(); 
		ЗначенияПоУмолчанию.Колонки.Добавить("ИмяАналитики");
		ЗначенияПоУмолчанию.Колонки.Добавить("Аналитика");
		ЗначенияПоУмолчанию.Колонки.Добавить("ЗначениеАналитики");
		Для каждого Элемент Из СтрокаТаблицы.ЗначенияПоУмолчанию Цикл
			НоваяСтрока = ЗначенияПоУмолчанию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
		КонецЦикла; 
		СтрПар.Вставить("ЗначенияПоУмолчанию", ЗначенияПоУмолчанию);
		
		Если СтрокаТаблицы.ЭтоНовый Тогда
			
			СтрокаТаблицы.Показатель = Справочники.бит_ПоказателиПроизвольныхОтчетов.СоздатьПоказатель(ТекущийОбъект.Ссылка, СтрПар);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Показатель) Тогда				
				СтрокаТаблицы.ЭтоНовый = Ложь;				
			КонецЕсли; 
			СтрокаТаблицы.Изменен  = Ложь;   			
			
		ИначеЕсли СтрокаТаблицы.Изменен Тогда	
			
			Если Справочники.бит_ПоказателиПроизвольныхОтчетов.ОбновитьПоказатель(СтрокаТаблицы.Показатель, СтрПар) Тогда
				СтрокаТаблицы.ЭтоНовый = Ложь;
				СтрокаТаблицы.Изменен  = Ложь;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла; // Правила заполнения
	
	// Удаление показателей
	Для каждого УдаленыйЭлемент Из фСписокУдаленныхПоказателей Цикл
	
		Если ЗначениеЗаполнено(УдаленыйЭлемент.Значение) Тогда			
			Справочники.бит_ПоказателиПроизвольныхОтчетов.УдалитьПоказатель(УдаленыйЭлемент.Значение);			
		КонецЕсли; 
	
	КонецЦикла; // Удаление показателей
	
	фСписокУдаленныхПоказателей = Новый СписокЗначений;
		             	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьСписокПараметровПередЗаписью(Отказ);
	ПроверитьЗаполнениеПравилЗаполнения(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособКомпоновкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ТекущийСпособКомпоновки) И ПравилаЗаполнения.Количество()>0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпособКомпоновкиПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'В правилах заполнения будут очищены ссылки на элементы данных и ресурсы отчета. Продолжить?'");		 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьРесурсыСпособаКомпоновки();
	КонецЕсли; 
	
КонецПроцедуры // СпособКомпоновкиПриИзменении()

// Процедура обработчик оповещения "СпособКомпоновкиПриИзмененииЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура СпособКомпоновкиПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРесурсыСпособаКомпоновки(Истина);  
		ТекущийСпособКомпоновки = Объект.СпособКомпоновки;
	Иначе
		Объект.СпособКомпоновки = ТекущийСпособКомпоновки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматЧиселНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонструкторФормата = Новый КонструкторФорматнойСтроки(Объект.ФорматЧисел);
	
	КонструкторФормата.ДоступныеТипы = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФорматЧиселНачалоВыбораЗавершение", ЭтотОбъект, КонструкторФормата);
	
	КонструкторФормата.Показать(ОписаниеОповещения);

КонецПроцедуры // ФорматЧиселНачалоВыбора()

// Процедура обработчик оповещения "ПараметрыЗначениеНачалоВыбораЗавершение".
// 
// Параметры:
// Результат - Структура.
// КонструкторФормата - КонструкторФорматнойСтроки.
// 
&НаКлиенте
Процедура ФорматЧиселНачалоВыбораЗавершение(Результат, КонструкторФормата) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ФорматЧисел = КонструкторФормата.Текст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетОтчетаПриАктивизацииОбласти(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииОбластиМакета", 0.1, Истина);
	
КонецПроцедуры // МакетОтчетаПриАктивизацииОбласти()
 
&НаКлиенте
Процедура МакетОтчетаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры // МакетОтчетаПриИзменении()

&НаКлиенте
Процедура ТипОтчетаПриИзменении(Элемент)
	
	УправлениеПанелямиФормы(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельТекущееПравило

&НаКлиенте
Процедура ТекущееПравилоВидЯчейкиПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	УправлениеПанельюТекущееПравило();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоФорматЧиселНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(ТекущееПравилоФорматЧисел) 
	 ИЛИ ТекущееПравилоВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Шаблон") Тогда
		КонструкторФормата = Новый КонструкторФорматнойСтроки(ТекущееПравилоФорматЧисел);     	
	Иначе                                    		
		КонструкторФормата = Новый КонструкторФорматнойСтроки(Объект.ФорматЧисел); 		
	КонецЕсли; 
	КонструкторФормата.ДоступныеТипы = Новый ОписаниеТипов("Число, Дата",
											 Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой),
											 Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеОповещения = Новый ОписаниеОповещения("ТекущееПравилоФорматЧиселНачалоВыбораЗавершение", ЭтотОбъект, КонструкторФормата);
	КонструкторФормата.Показать(ОписаниеОповещения);

КонецПроцедуры

// Процедура обработчик оповещения "ФорматЧиселНачалоВыбораЗавершение".
// 
// Параметры:
// Результат - Структура.
// КонструкторФормата - КонструкторФорматнойСтроки.
// 
&НаКлиенте
Процедура ТекущееПравилоФорматЧиселНачалоВыбораЗавершение(Результат, КонструкторФормата) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекущееПравилоФорматЧисел = КонструкторФормата.Текст;
		ПриИзмененииТекущегоПравила("ТекущееПравилоФорматЧисел");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоЭлементДанныхПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);

	Если НЕ СписокРесурсов.Количество() = 0 Тогда
		ТекущееПравилоИмяРесурса = СписокРесурсов[0].Значение;
	КонецЕсли; 
	
	УправлениеПанельюТекущееПравило();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаОбластей", ПравилаЗаполнения);
	ПараметрыФормы.Вставить("Текст"   	     , ТекущееПравилоФормула);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТекущееПравилоФормулаНачалоВыбораЗавершение", ЭтотОбъект);
    Режим 			   = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("ОбщаяФорма.бит_ФормаВводаФормулыУправляемая",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, Режим);

КонецПроцедуры

// Процедура обработчик оповещения "ТекущееПравилоФормулаНачалоВыбора".
// 
// Параметры:
// Результат - Строка.
// Параметры - Структура.
// 
&НаКлиенте
Процедура ТекущееПравилоФормулаНачалоВыбораЗавершение(Результат, Параметры) Экспорт
  
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
	 	ТекущееПравилоФормула = Результат;
		ПриИзмененииТекущегоПравила("ТекущееПравилоФормула");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы 	   = ПодготовитьПараметрыФормыВыбораПараметров();
	ОписаниеОповещения = Новый ОписаниеОповещения("ТекущееПравилоШаблонНачалоВыбораЗавершение", ЭтотОбъект);
    Режим 			   = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
    ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.ФормаВыбораПараметров",
			ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, Режим);

КонецПроцедуры

// Процедура обработчик оповещения "ТекущееПравилоШаблонНачалоВыбораЗавершение".
// 
// Параметры:
// Результат - Структура.
// Параметры - Структура.
// 
&НаКлиенте
Процедура ТекущееПравилоШаблонНачалоВыбораЗавершение(Результат, Параметры) Экспорт
   
	Если ТипЗнч(Результат) = Тип("Структура")  Тогда
		
		ТекущееПравилоШаблон = Результат.ИмяПараметра;
		
		Текст  = МакетОтчета.ТекущаяОбласть.Текст;
		Шаблон = "[" + ТекущееПравилоШаблон + "]";
		Если СтрНайти(Текст, Шаблон) = 0 Тогда
			Текст = Текст + Шаблон;
		КонецЕсли; 
		МакетОтчета.ТекущаяОбласть.Текст = Текст;
		
		ПриИзмененииТекущегоПравила("ТекущееПравилоШаблон");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоИмяОбластиПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоИмяРесурсаПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоФормулаПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоШаблонПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоФорматЧиселПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоПериодДанныхПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоФормироватьДвиженияПоБюджетуПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	УправлениеПанельюТекущееПравилоФормированияДвижения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоКоличественныйУчетПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗаполнения

&НаКлиенте
Процедура ПравилаЗаполненияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ТекущийЭлемент = Элементы.ПравилаЗаполнения Тогда
		ОблМакета = бит_мпд_Клиент.ПолучитьОбластьЯчеек(МакетОтчета, ТекущиеДанные.ИмяОбласти);
		Если ОблМакета <> Неопределено Тогда
			Элементы.МакетОтчета.ТекущаяОбласть = ОблМакета;
			ЭтотОбъект.ТекущийЭлемент = Элементы.МакетОтчета;
		КонецЕсли;   	
	КонецЕсли; 
	
КонецПроцедуры // ПравилаЗаполненияПриАктивизацииСтроки()

&НаКлиенте
Процедура ПравилаЗаполненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // ПравилаЗаполненияПередНачаломДобавления()

&НаКлиенте
Процедура ПравилаЗаполненияПередУдалением(Элемент, Отказ)
	
	Для каждого ТекИд Из Элементы.ПравилаЗаполнения.ВыделенныеСтроки Цикл
	
		СтрокаПравила = ПравилаЗаполнения.НайтиПоИдентификатору(ТекИД);
		
		ПередУдалениемСтрокиПравил(СтрокаПравила, Отказ);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПравилаЗаполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	     
	ОблМакета = бит_мпд_Клиент.ПолучитьОбластьЯчеек(МакетОтчета, ТекущиеДанные.ИмяОбласти, Истина);
	Если ОблМакета = Неопределено Тогда  	
		Возврат;                       	
	КонецЕсли;
	
	Если НЕ ТекущееПравилоОткрыта Тогда
		ТекущееПравилоОткрыта = Истина;
		УправлениеПанелямиФормы(ЭтотОбъект);
		ЭтотОбъект.ТекущийЭлемент = Элементы.ТекущееПравилоВидЯчейки;
	КонецЕсли; 

КонецПроцедуры // ПравилаЗаполненияВыбор()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПараметров

&НаКлиенте
Процедура СписокПараметровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.СписокПараметров.ТекущиеДанные;
	ОбработатьИзменениеИмениПараметра(ТекущиеДанные.Параметр, Отказ);
	
	Если Отказ Тогда
		Элементы.СписокПараметров.ТекущийЭлемент = Элементы.СписокПараметровПараметр;
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущееИмяПараметра <> ТекущиеДанные.Параметр Тогда
		ПриИзмененииИмениПараметра(ТекущееИмяПараметра, ТекущиеДанные.Параметр);
		ТекущееИмяПараметра = ТекущиеДанные.Параметр;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СписокПараметров.ТекущиеДанные;
	Если Копирование Тогда
		ТекущиеДанные.Параметр = ТекущиеДанные.Параметр + 1;
	КонецЕсли; 
	ТекущееИмяПараметра = ТекущиеДанные.Параметр;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СписокПараметров.ТекущиеДанные;
	ПриИзмененииИмениПараметра(ТекущиеДанные.Параметр, "");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровПараметрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокПараметров.ТекущиеДанные;
	ОбработатьИзменениеИмениПараметра(Текст, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИспользованиеАналитики

&НаКлиенте
Процедура ИспользованиеАналитикиАналитикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИспользованиеАналитики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	 	Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Аналитика) И ПустаяСтрока(ТекущиеДанные.СинонимАналитики) Тогда
	
	  	ТекущиеДанные.СинонимАналитики = ТекущиеДанные.Аналитика;
	  
	  	// Попытка автоматически подобрать поле компоновки.
		ПодобратьПолеКомпоновкиПоАналитике(ТекущиеДанные.ПолучитьИдентификатор());
	 	  
	КонецЕсли; 
	
КонецПроцедуры // ИспользованиеАналитикиАналитикаПриИзменении()

&НаКлиенте
Процедура ИспользованиеАналитикиСинонимАналитикиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИспользованиеАналитики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	 	Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Аналитика) Тогда 	
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(Строка(ТекущиеДанные.Аналитика));	
	КонецЕсли; 
	
КонецПроцедуры // ИспользованиеАналитикиСинонимАналитикиНачалоВыбораИзСписка()

&НаКлиенте
Процедура ИспользованиеАналитикиСинонимАналитикиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ИспользованиеАналитики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
	 	Возврат;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Аналитика) Тогда
	
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(Строка(ТекущиеДанные.Аналитика));
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеАналитикиИмяПоляНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = бит_МеханизмПолученияДанных.ПолучитьСписокПолейДляСпособаКомпоновки(Объект.СпособКомпоновки, "Поле", "СписокЗначений");	
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры // ИспользованиеАналитикиИмяПоляНачалоВыбораИзСписка()

&НаКлиенте
Процедура ИспользованиеАналитикиИмяПоляАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = бит_МеханизмПолученияДанных.ПолучитьСписокПолейДляСпособаКомпоновки(Объект.СпособКомпоновки, "Поле", "СписокЗначений");	
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеАналитикиПриИзменении(Элемент)
	
	ЗаполнитьНастройкиАналитик();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТекущееПравилоЗначенияПоУмолчанию

&НаКлиенте
Процедура ТекущееПравилоЗначенияПоУмолчаниюПриИзменении(Элемент)
	
	ПриИзмененииТекущегоПравила(Элемент.Имя);
	ТекущееПравилоЗначенияПоУмолчаниюКоличествоСтрок = ТекущееПравилоЗначенияПоУмолчанию.Количество();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТекущееПравилоЗначенияПоУмолчаниюАналитикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ТекущееПравилоЗначенияПоУмолчанию.ТекущиеДанные;		
		ИмяАналитики = ВыбранноеЗначение;
		
		ТекНастройка = НастройкаАналитик[ИмяАналитики];
		Если ТекНастройка = Неопределено Тогда
			
			ТекущиеДанные.ИмяАналитики 	    = "";
			ТекущиеДанные.ЗначениеАналитики = Неопределено;
			
		Иначе
			
			ТекущиеДанные.ИмяАналитики 	    = ИмяАналитики;
			ТекущиеДанные.Аналитика         = ТекНастройка.Аналитика;
			ТекущиеДанные.ЗначениеАналитики = ТекНастройка.ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееПравилоЗначенияПоУмолчаниюЗначениеАналитикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТекущееПравилоЗначенияПоУмолчанию.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Если ПустаяСтрока(ТекущиеДанные.ИмяАналитики) Тогда
			СтандартнаяОбработка = Ложь;
		Иначе	
			ИмяЭлемента  = "ЗначениеАналитики";	
			ТекНастройка = НастройкаАналитик[ТекущиеДанные.ИмяАналитики];
			
			СтрНастройки = Новый Структура(ИмяЭлемента, ТекНастройка); 				
			бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
											, Элемент
											, ТекущиеДанные
											, ИмяЭлемента
											, СтандартнаяОбработка
											, СтрНастройки);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ЗначенияПоУмолчаниюЗначениеАналитикиНачалоВыбора()

&НаКлиенте
Процедура ТекущееПравилоЗначенияПоУмолчаниюЗначениеАналитикиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТекущееПравилоЗначенияПоУмолчанию.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;	
	Иначе
		Если ПустаяСтрока(ТекущиеДанные.ИмяАналитики) Тогда
			СтандартнаяОбработка = Ложь;
		Иначе	
			ИмяЭлемента  = "ЗначениеАналитики";	
			ТекНастройка = НастройкаАналитик[ТекущиеДанные.ИмяАналитики];
			СтрНастройки = Новый Структура(ИмяЭлемента, ТекНастройка);
			бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
										, ТекущиеДанные
										, ИмяЭлемента
										, СтандартнаяОбработка
										, СтрНастройки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗначенияПоУмолчаниюЗначениеАналитикиОчистка()

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		Записать();
		ПараметрыФормы = Новый Структура("НастройкаОтчета", Объект.Ссылка);
		ОткрытьФорму("Отчет.бит_ПроизвольныйОтчет.Форма"
										, ПараметрыФормы
										, ЭтотОбъект
										, ЭтотОбъект);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСкрытьПравилаЗаполнения(Кнопка)
	
	ВсеПравилаОткрыта = Не ВсеПравилаОткрыта;
	УправлениеПанелямиФормы(ЭтотОбъект);
	
КонецПроцедуры // ОтобразитьСкрытьПравилаЗаполнения()

&НаКлиенте
Процедура ДействияМакетаУстановитьПравилоЗаполненияОбласти(Кнопка)
	
	УстановитьПравилоЗаполненияОбласти();
	
КонецПроцедуры // ДействияМакетаУстановитьПравилоЗаполненияОбласти

&НаКлиенте
Процедура ДействияМакетаУстановитьПараметр(Кнопка)
	
	УстановитьПараметр();
	
КонецПроцедуры // ДействияМакетаУстановитьПараметр()

&НаКлиенте
Процедура ДействияМакетаУстановитьФормулу(Кнопка)
	
	// ----------------------------------------------------------------------
	// Редактор формул
	 рф_Открыть();
	
КонецПроцедуры // ДействияМакетаВвестиФормулу()

&НаКлиенте
Процедура ДействияМакетаРаскраситьЯчейки(Кнопка)
	
	РаскраситьЯчейки();
		
КонецПроцедуры // ДействияМакетаРаскраситьЯчейки()

&НаКлиенте
Процедура ДействияМакетаУдалитьПримечания(Кнопка)
	
	Оповещение = Новый ОписаниеОповещения("ДействияМакетаУдалитьПримечанияЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Выполнить удаление примечаний?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	
КонецПроцедуры // ДействияМакетаУдалитьПримечания()

// Процедура обработчик оповещения "ДействияМакетаУдалитьПримечанияЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ДействияМакетаУдалитьПримечанияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого Область Из МакетОтчета.Области Цикл
			Область.Примечание.Текст = "";
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьМакет()

   МакетОтчета.Очистить();
   
КонецПроцедуры // ОчиститьМакет()

&НаКлиенте
Процедура ДействияМакетаОчистить(Команда)
	
   	Оповещение = Новый ОписаниеОповещения("ДействияМакетаОчиститьЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Очистить макет?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияМакетаОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьМакет();
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияМакетаКопироватьНастройкуОбласти(Кнопка)
	
	ОблМакета = МакетОтчета.ТекущаяОбласть;
	Если ОблМакета = Неопределено Тогда      		
		ТекстСообщения = Нстр("ru = 'Не выбрана область макета!'");
		ПоказатьПредупреждение(,ТекстСообщения); 
		Возврат;   	
	КонецЕсли; 
	
	Если НЕ ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		Возврат;
	КонецЕсли; 
	
	Ячейки = ЯчейкиОбласти(ОблМакета);
	Привязки = ЯчейкиПривязанныеКПравилам(Ячейки);
	Если НЕ ВсеЯчейкиПривязанны(Привязки) Тогда
		Возврат;
	КонецЕсли; 
	БуферОбмена = Новый ФиксированнаяСтруктура("Область, Ячейки",ОблМакета.Имя, Ячейки);
	
	Оформление = Новый Структура;
	Оформление.Вставить("Область",ОблМакета.Имя);
	Оформление.Вставить("ГраницаСверху",ОблМакета.ГраницаСверху);
	Оформление.Вставить("ГраницаСнизу",ОблМакета.ГраницаСнизу);
	Оформление.Вставить("ГраницаСлева",ОблМакета.ГраницаСлева);
	Оформление.Вставить("ГраницаСправа",ОблМакета.ГраницаСправа);
	
	ОформлениеВыделения = Новый ФиксированнаяСтруктура(Оформление);
	//
	//Шаблон = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.ЧастыйПунктир, 2);
	//ОблМакета.Обвести(Шаблон, Шаблон, Шаблон, Шаблон);
	//ОблМакета.ЦветРамки = Новый Цвет(255, 215, 0);
	
КонецПроцедуры // ДействияМакетаКопироватьНастройкуОбласти()

&НаКлиенте
Процедура ДействияМакетаВставитьНастройкуОбласти(Кнопка)
	
	Если БуферОбмена.Ячейки.Количество() = 0 Тогда	
		Возврат;                                             	
	КонецЕсли; 
	
	ОблМакета = МакетОтчета.ТекущаяОбласть;
	Если ОблМакета = Неопределено Тогда		
		Возврат;	
	КонецЕсли; 
	
	Если НЕ ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		Возврат;
	КонецЕсли;  
	
	// Буфер обмена мог устареть. Нужно выполнить проверку, что правила привязанны.
	Привязки = ЯчейкиПривязанныеКПравилам(БуферОбмена.Ячейки);
	Если НЕ ВсеЯчейкиПривязанны(Привязки) Тогда
		Возврат;
	КонецЕсли; 

	ЕстьФормула = Ложь;
	Для каждого Связь Из Привязки Цикл
	    Если Связь.Значение.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула") Тогда
		     ЕстьФормула = Истина;
			 Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("Источники",    Привязки); 
	ПараметрыПередачи.Вставить("Приемники",  ЯчейкиОбласти(ОблМакета));
	
	// ++ NB Формирование областей для вставки выполняется кратно размерам образца.
	ИсходнаяОбласть = МакетОтчета.Область(БуферОбмена.Область);
	ВысотаИсточникаВЯчейках = ИсходнаяОбласть.Низ - ИсходнаяОбласть.Верх + 1;
	ШиринаИсточникаВЯчейках = ИсходнаяОбласть.Право - ИсходнаяОбласть.Лево + 1;
	
	ВысотаПриемникаВЯчейках = ОблМакета.Низ - ОблМакета.Верх + 1;
	ШиринаПриемникаВЯчейках = ОблМакета.Право - ОблМакета.Лево + 1;
	
	КратностьВысоты = Макс(Цел(ВысотаПриемникаВЯчейках/(ВысотаИсточникаВЯчейках)), 1);
	КратностьШирины = Макс(Цел(ШиринаПриемникаВЯчейках/(ШиринаИсточникаВЯчейках)), 1);
	
	Модель = МодельЯчейкиОбласти(ИсходнаяОбласть);
	НоваяМодель = Новый Массив(); 
	НоваяВыделеннаяОбласть = "";
	Для Счетчик = 1 По КратностьВысоты Цикл
		Для Счетчик1 = 1 По КратностьШирины Цикл
			Верх = ОблМакета.Верх + ВысотаИсточникаВЯчейках * (Счетчик - 1);
			Низ = ОблМакета.Верх + ВысотаИсточникаВЯчейках * Счетчик;
			Лево = ОблМакета.Лево + ШиринаИсточникаВЯчейках * (Счетчик1 -1);
			Право = ОблМакета.Лево + ШиринаИсточникаВЯчейках * Счетчик1;
			Диапазон = "R" + Верх + "C" + Лево + ":" + "R" + Низ + "C" + Право;
			НоваяМодель.Добавить(МодельЯчейкиОбласти(МакетОтчета.Область(Диапазон)));
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыПередачи = Новый Структура(); 
	ПараметрыПередачи.Вставить("Привязки",   Привязки);
	ПараметрыПередачи.Вставить("Источники",  Модель);
	ПараметрыПередачи.Вставить("Приемники",  НоваяМодель);
	// -- NB
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("ДействияМакетаВставитьНастройкуОбластиЗавершение", ЭтотОбъект, ПараметрыПередачи);
	Если ЕстьФормула Тогда
		ПараметрыПередачи.Вставить("ОповещениеПродолжения", ОповещениеПродолжения);
		ОповещениеЗавершениеВыбора = Новый ОписаниеОповещения("ВыборРежимаСдвигаФормулыЗавершение", ЭтотОбъект, ПараметрыПередачи); 
		ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.РежимСдвигаФормулы",,ЭтотОбъект,,,,
						ОповещениеЗавершениеВыбора,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, Неопределено);				
	КонецЕсли; 
	
КонецПроцедуры // ДействияМакетаВставитьНастройкуОбласти()

// Процедура - Выбор режима сдвига формулы завершение
//
// Параметры:
//  Результат				 - Произвольный	 - параметры, возрвщаемые формой редактирования.
//  ДополнительныеПараметры	 - Структура	 - параметры, переданные для завершения вставки формулы. 
//
&НаКлиенте
Процедура ВыборРежимаСдвигаФормулыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
    
    Если Результат = Неопределено Тогда
        Возврат;   
    КонецЕсли;
    
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		РежимСдвигаФормулы = Результат.РежимСдвигаФормулы;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПродолжения, Неопределено);
	
КонецПроцедуры // ВыборРежимаСдвигаФормулыЗавершение()

// Обработка оповещения при вставке из буфера обмена 
//
// Параметры:
//  Результат				 - Произвольный	 - параметры для завешения вставки.
//  ДополнительныеПараметры	 - Структура	 - Дополнительные параметры. 
//
&НаКлиенте
Процедура ДействияМакетаВставитьНастройкуОбластиЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Источники = ДополнительныеПараметры.Источники;
	Приемники = ДополнительныеПараметры.Приемники;
	Привязки  = ДополнительныеПараметры.Привязки;
	
	Для каждого Диапазон Из Приемники Цикл
		Для ИндексСтроки = 0 По Источники.ВГраница() Цикл
			Ряд = Источники[ИндексСтроки];
			Для ИндексКолонки = 0 По Ряд.Вграница() Цикл
				
				ЯчейкаПолучатель = МакетОтчета.Область(Диапазон[ИндексСтроки][ИндексКолонки]);
				ОбразецПравила	 = Привязки[Источники[ИндексСтроки][ИндексКолонки]];
				ОбразецЯчейки	 = МакетОтчета.Область(Источники[ИндексСтроки][ИндексКолонки]);
				ЭтоФормула		 = (ОбразецПравила.ВидЯчейки 
								 = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула"));
				
				ВставитьНастройку(ЯчейкаПолучатель, ОбразецПравила, ОбразецЯчейки, ЭтоФормула);
			КонецЦикла; 
		КонецЦикла; 
		
	КонецЦикла; 

	ВывестиТекущееПравило();

КонецПроцедуры // ВыборРежимаСдвигаФормулыЗавершение()

&НаКлиенте
Процедура СоздатьЭкземплярОтчета(Команда)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("СоздатьЭкземплярОтчетаВопросЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Элемент будет записан. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе
		
		бит_РаботаСДиалогамиКлиент.ОткрытьНовуюФормуСправочникаЭкземплярОтчета(Объект.Ссылка);
	
	КонецЕсли;
	
КонецПроцедуры // СоздатьЭкземплярОтчета()

// Процедура обработчик оповещения "СоздатьЭкземплярОтчетаВопросЗавершение".
//
// Параметры:
// Ответ 			    - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура СоздатьЭкземплярОтчетаВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флОК = Записать();
		
		Если флОК Тогда
			
			бит_РаботаСДиалогамиКлиент.ОткрытьНовуюФормуСправочникаЭкземплярОтчета(Объект.Ссылка);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьЭкземплярОтчетаВопросЗавершение

&НаКлиенте
Процедура УвеличитьРазмерШрифта(Команда)
	
	Для Каждого Область Из СписокОбластейДляИзмененияШрифта() Цикл
		Размер = Область.Шрифт.Размер;
		Размер = Размер + ШагИзмененияРазмераШрифтаУвеличение(Размер);
		Область.Шрифт = Новый Шрифт(Область.Шрифт,,Размер);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьРазмерШрифта(Команда)
	
	Для Каждого Область Из СписокОбластейДляИзмененияШрифта() Цикл
		Размер = Область.Шрифт.Размер;
		Размер = Размер - ШагИзмененияРазмераШрифтаУменьшение(Размер);
		Если Размер < 1 Тогда
			Размер = 1;
		КонецЕсли;
		Область.Шрифт = Новый Шрифт(Область.Шрифт,,Размер);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Зачеркивание(Команда)
	
	УстанавливаемоеЗначение = Неопределено;
	Для Каждого Область Из СписокОбластейДляИзмененияШрифта() Цикл
		Если УстанавливаемоеЗначение = Неопределено Тогда
			УстанавливаемоеЗначение = Не Область.Шрифт.Зачеркивание = Истина;
		КонецЕсли;
		Область.Шрифт = Новый Шрифт(Область.Шрифт,,,,,,УстанавливаемоеЗначение);
	КонецЦикла;
	
	ОбновитьПометкиКнопокКоманднойПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникСозданияПараметров(Команда)
	
	ОблМакета = Элементы.МакетОтчета.ТекущаяОбласть;
	Если НЕ ТипЗнч(ОблМакета) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда  		
		ПоказатьПредупреждение(,Нстр("ru = 'Не выбрана область макета!'"));
		Возврат; 	
	КонецЕсли; 
	
	Если НЕ ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		Возврат;
	КонецЕсли;  
	
	Имена = Новый СписокЗначений(); 
	
	Для Ряд = ОблМакета.Верх По ОблМакета.Низ Цикл
		Для Колонка = ОблМакета.Лево По ОблМакета.Право Цикл			
			ТекущаяОбласть = "R" + Формат(Ряд, "ЧЦ=4; ЧГ=") + "C" + Формат(Колонка,"ЧЦ=4; ЧГ=");	
			ИмяОбласти     = МакетОтчета.Область(ТекущаяОбласть).Имя;
			Текст	       = МакетОтчета.Область(ТекущаяОбласть).Текст;
			Если НЕ ПустаяСтрока(Текст) Тогда
				Имена.Добавить(ИмяОбласти, Текст);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	Если Имена.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Нет данных для создания параметров.'");
		ПоказатьПредупреждение(,ТекстСообщения);
	Иначе	
		
		ПараметрыПередачи = Новый Структура;
		ПараметрыПередачи.Вставить("Имена", Имена);
		ПараметрыПередачи.Вставить("СписокПараметров",        СписокПараметров);
		ПараметрыПередачи.Вставить("КолонкиСпискаПараметров", КолонкиСпискаПараметров);
		
		Оповещение = Новый ОписаниеОповещения("ПомощникСозданияПараметровЗавершение", ЭтотОбъект, );
		ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.ФормаПомощникаСозданияПараметров", 
						ПараметрыПередачи, ЭтотОбъект, ЭтотОбъект,,,Оповещение, 
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
				
КонецПроцедуры

// Обработчик оповещения о закрытии окна помощника создания параметров
//
// Параметры:
//  Результат				 - Произвольный - результат открытия окна
//  ДополнительныеПараметры	 - Произвольный	 - дополнительные параметры
//
&НаКлиенте
Процедура ПомощникСозданияПараметровЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Если НЕ Результат = Неопределено Тогда
		Модифицированность = Истина;
		Для каждого СтрокаРезультат Из Результат Цикл
			РезультатПроиска = СписокПараметров.НайтиСтроки(Новый Структура("Параметр", СтрокаРезультат.Параметр));
			Если РезультатПроиска.Количество() = 0 Тогда
				СтрокаТаблицы = СписокПараметров.Добавить();
			Иначе	
				СтрокаТаблицы = РезультатПроиска[0]; 
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРезультат); 
			
			ИмяОбласти = ПолучитьИмяОбласти(СтрокаРезультат.ИмяОбласти, МакетОтчета, Объект);
			
			ОписаниеПравила  = НовоеОписаниеПравила();
			ОписаниеПравила.Вставить("ИмяОбласти",ИмяОбласти);
			ОписаниеПравила.Вставить("ВидЯчейки", ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Шаблон"));
			ОписаниеПравила.Вставить("Шаблон",    СтрокаРезультат.Параметр);
			
			СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения);
			
			НовоеОформление = Ложь;
			Если СтрокаПравил = Неопределено Тогда
				
				СтрокаПравил = ПравилаЗаполнения.Добавить();
				СтрокаПравил.ЭтоНовый = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаПравил, ОписаниеПравила);
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаПравил, ОписаниеПравила);
				ПодготовитьПравило(СтрокаПравил);
				СтрокаПравил.Изменен = Истина;
			КонецЕсли;
			
			ОблМакета           	   = МакетОтчета.Область(СтрокаРезультат.ИмяОбласти);
			ОблМакета.СодержитЗначение = Ложь;
			ОблМакета.Текст 		   = "[" + СтрокаРезультат.Параметр + "]";	
			ОблМакета.Имя 			   = ИмяОбласти;
		КонецЦикла; 	
	КонецЕсли; 
	
	ПриАктивизацииОбластиМакета();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЭлементНеФормироватьПроводки(Команда)
		
	УстановитьСнятьФормироватьПроводки(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЭлементФормироватьПроводки(Команда)
	
	УстановитьСнятьФормироватьПроводки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаправлениеПерехода(Команда)
	
	ПараметрыПередачи = Новый Структура("НаправлениеПерехода", МакетОтчета.НаправлениеПерехода); 
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ИзменитьНаправлениеПереходаЗавершение", ЭтотОбъект); 
	ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.ФормаВыбораНаправленияПерехода", 
								ПараметрыПередачи,, ЭтотОбъект,,,
								ОповещениеОЗавершении,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
								
КонецПроцедуры

// Обработчик оповещения о закрытии окна выбора направления перехода.
//
// Параметры:
//  Результат				 - Произвольный - результат открытия окна
//  ДополнительныеПараметры	 - Произвольный	 - дополнительные параметры
//
&НаКлиенте
Процедура ИзменитьНаправлениеПереходаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		МакетОтчета.НаправлениеПерехода = Результат.НаправлениеПерехода;
	КонецЕсли;

КонецПроцедуры // ИзменитьНаправлениеПереходаЗавершение()
 
#Область ПанельТекущееПравило

&НаКлиенте
Процедура ЗакрытьПанельТекущееПравило(Команда)
	
	ПриЗакрытииПанелиТекущееПравило();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельТекущееПравило(Команда)
	
	Если НЕ ТекущееПравилоОткрыта Тогда
		ТекущееПравилоОткрыта = Истина;
		ПриАктивизацииОбластиМакета();
		УправлениеПанелямиФормы(ЭтотОбъект);
	Иначе
		ПриЗакрытииПанелиТекущееПравило();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКнопкеСохранитьТекущееПравило(Команда)
	
	ОбластьТекущегоПравила			 = МакетОтчета.ТекущаяОбласть.Имя;
	ТекущееПравилоМодифицированность = Истина;
	СохранитьТекущееПравило();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИмяОбласти(Команда)
	
	ТекущееПравилоИмяОбласти = СформироватьУникальноеИмяОбласти(МакетОтчета, Объект); 
	ПриИзмененииТекущегоПравила("ТекущееПравилоИмяОбласти");
	
КонецПроцедуры

#КонецОбласти 

#Область ЗагрузкаМакетаИзФайла

&НаКлиенте
Процедура ЗагрузитьМакетИзФайла(Команда)
    
    Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        ОткрытьОбработкуЗагрузкиМакетИзФайла();
        
    Иначе	
   
        Оповещение = Новый ОписаниеОповещения("ВопросЗагрузитьМакетИзФайлаЗавершение", ЭтотОбъект);
        ТекстВопроса =  НСтр("ru = 'Для работы с файлами необходимо записать элемент. Записать элемент?'");
        ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
        
    КонецЕсли;
    
КонецПроцедуры // ЗагрузитьМакетИзФайла()

// Процедура обработчик оповещения "ВопросЗагрузитьМакетИзФайлаЗавершение".
//
// Параметры:
// Ответ                - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВопросЗагрузитьМакетИзФайлаЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
        
        Если Записать() Тогда
				
            ОткрытьОбработкуЗагрузкиМакетИзФайла(); 
            
        КонецЕсли;
    
	КонецЕсли; 
	
КонецПроцедуры	// ВопросЗагрузитьМакетИзФайлаЗавершение

// Процедура открывает обработку бит_ЗагрузкаМакетаИзФайла для загрузки данных файла.
// Обработка загружает макет из файла. 
// В процессе загрузки могут быть созданы элементы структуры отчета и правила заполнения областей.
//
&НаКлиенте
Процедура ОткрытьОбработкуЗагрузкиМакетИзФайла()
	
    СтруктураИмениОбласти = Новый Структура;
	СтруктураИмениОбласти.Вставить("Префикс",		   Объект.Префикс);
    СтруктураИмениОбласти.Вставить("МаксНомерОбласти", Объект.МаксНомерОбласти);
	СтруктураИмениОбласти.Вставить("ДлинаИмени", 	   Объект.ДлинаИмени);
	
    ОповещениеОЗакрытииОбработки = Новый ОписаниеОповещения("ЗавершениеЗагрузкиМакета", ЭтотОбъект);
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Отчет"                         , Объект.Ссылка);    
    ПараметрыФормы.Вставить("СтруктураИмениОбласти"         , СтруктураИмениОбласти);
    ОткрытьФорму("Обработка.бит_ЗагрузкаМакетаИзФайла.Форма", ПараметрыФормы, ЭтотОбъект, , , , ОповещениеОЗакрытииОбработки);
    
КонецПроцедуры // ОткрытьОбработкуЗагрузкиМакетИзФайла()

// Процедура обработчик оповещения "ЗавершениеЗагрузкиМакета".
//
// Параметры:
// АдресХранилища - Адрес во временном хранилище.
// ДопПараметры   - Структура.
//
&НаКлиенте
Процедура ЗавершениеЗагрузкиМакета(АдресХранилища, ДопПараметры) Экспорт 
    
    Если ТипЗнч(АдресХранилища) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
        
        СтруктураРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
        ХранилищеТабДок = СтруктураРезультат.ХранилищеТабДок;
        Если ХранилищеТабДок = Неопределено Тогда
            Возврат;       
        КонецЕсли;
        
        // ХранилищеМакета - хранилище табличного документа - результата выполнения обработки по загрузки макета из файла.
        ВосстановитьТабличныйДокумент(ХранилищеТабДок);
        
        // Обновление данных формы.
        Если СтруктураРезультат.СозданаСтруктура Тогда
            // Обновление структуры отчета.
            ОбновитьДеревоСтруктуры();     
        КонецЕсли;
        Если СтруктураРезультат.СозданыПравила Тогда
            // Обновление таблицы правил.
            ЗаполнитьПравилаЗаполнения();
            // Возврат максимального номера области для правил.
            Объект.МаксНомерОбласти = СтруктураРезультат.МаксНомерОбласти;
        КонецЕсли;
        
        Модифицированность = Истина;
               
        УдалитьИзВременногоХранилища(АдресХранилища);
        
    КонецЕсли;
      
КонецПроцедуры // ЗавершениеЗагрузкиМакета()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСПараметрамиОтчета

&НаСервере
Процедура ПодготовитьФормуИСписокПараметров(Чтение)

	КолонкиСпискаПараметров.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Языки.КодЯзыка,
	|	Языки.Наименование
	|ИЗ
	|	Справочник.бит_Языки КАК Языки
	|ГДЕ
	|	НЕ Языки.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка			 = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КолонкиСпискаПараметров.Добавить(Выборка.КодЯзыка, Выборка.Наименование);
	КонецЦикла;
	
	Если КолонкиСпискаПараметров.НайтиПоЗначению("ru") = Неопределено Тогда
		КолонкиСпискаПараметров.Вставить(0,"ru","Русский");
	КонецЕсли; 
	
	УдаляемыеРеквизиты   = Новый Массив(); 
	РеквизитыСписка		 = ПолучитьРеквизиты("СписокПараметров");

	Для каждого Реквизит Из РеквизитыСписка Цикл
		Если НЕ Реквизит.Имя = "Параметр" Тогда

			УдаляемыеРеквизиты.Добавить("СписокПараметров." + Реквизит.Имя);
			
			ЭлементФормы = Элементы.Найти("СписокПараметров" + Реквизит.Имя);
			Если НЕ ЭлементФормы = Неопределено Тогда
				Элементы.Удалить(ЭлементФормы);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ УдаляемыеРеквизиты.Количество() = 0 Тогда
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли; 
	
	Для каждого Элемент Из КолонкиСпискаПараметров Цикл
		Имя      = Элемент.Значение;
		Тип      = ОбщегоНазначения.ОписаниеТипаСтрока(0);
		Путь     = "СписокПараметров";
		Шапка    = Элемент.Представление;
		Реквизит = Новый РеквизитФормы(Имя,Тип,Путь,Шапка);
		
		ДобавляемыеРеквизиты = Новый Массив();
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ИмяЭлемента = "СписокПараметров" + Элемент.Значение;
		
		ТекКолонка = Элементы.Добавить("СписокПараметров" + Элемент.Значение, Тип("ПолеФормы"), Элементы.СписокПараметров); 
		ТекКолонка.ПутьКДанным = "СписокПараметров." + Элемент.Значение;
		ТекКолонка.Вид		   = ВидПоляФормы.ПолеВвода;
		ТекКолонка.Заголовок   = Элемент.Представление;

	КонецЦикла; 	

	Если Чтение Тогда
		ЗагрузитьСписокПараметров();	
	КонецЕсли; 	

КонецПроцедуры // ПодготовитьСписокПараметров()

&НаСервере
Процедура ЗагрузитьСписокПараметров()
	
	Для каждого СтрокаТаблицы Из Объект.Параметры Цикл
		
		НоваяСтрока = СписокПараметров.Добавить();
		НоваяСтрока.Параметр = СтрокаТаблицы.Параметр;
		РазноязыкоеПредставление = бит_ОбщегоНазначенияКлиентСервер.РазобратьТекстНаЯзыки(СтрокаТаблицы.Значение);
		Для каждого Элемент Из КолонкиСпискаПараметров Цикл
			Если РазноязыкоеПредставление.Свойство(Элемент.Значение) Тогда
				НоваяСтрока[Элемент.Значение] = РазноязыкоеПредставление[Элемент.Значение];
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 	
	
КонецПроцедуры // ЗаполнитьСписокПараметров()

&НаСервере 
Функция ПроверитьСписокПараметровПередЗаписью(Отказ)

	Пояснение= НСтр("ru = 'Параметр не соответствует требованиям к именам переменных.'") ;
	// Именем переменной, объявленной процедуры или функции может быть любая последовательность букв, 
	// цифр и знаков подчеркивания, начинающаяся с буквы или знака подчеркивания. 
	// Вновь создаваемые имена не должны совпадать с зарезервированными словами языка или именами свойств, 
	// непосредственно доступных в текущем контексте. 
	
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из СписокПараметров Цикл
		
		ТекстСообщения = ""; 
		
		Поле = "СписокПараметров[%1].Параметр";
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													Поле, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Параметр) Тогда
			Попытка
				Тест = Новый Структура(СтрокаТаблицы.Параметр); 
			Исключение
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА"
																					,"КОРРЕКТНОСТЬ"
																					,"Параметр"
																					,НомерСтроки
																					,"Список параметров"
																					,Пояснение);
			КонецПопытки; 
		Иначе
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА"
																				,
																				,"Параметр"
																				,НомерСтроки
																				,"Список параметров");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,,Отказ);
		КонецЕсли; 
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла; 
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеПравилЗаполнения(Отказ)
	
	Для каждого СтрокаТаблицы Из ПравилаЗаполнения Цикл
		НомерСтроки = СтрокаТаблицы.ПолучитьИдентификатор() + 1;
		Префикс = "ПравилаЗаполнения[%1].";
		Префикс = СтрШаблон(Префикс, Формат(НомерСтроки - 1, "ЧН=0; ЧГ="));
		
		Отказ = Ложь;
		Попытка
			Тест = Новый Структура(СтрокаТаблицы.ИмяОбласти); 
		Исключение
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", 
			"КОРРЕКТНОСТЬ", "Имя области",НомерСтроки, "Правила заполнения",
			"Не соответствует требованиям к именам переменных");
			Поле = Префикс + "ИмяОбласти";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,,Отказ);
		КонецПопытки; 
		
		ЗаполненСпособКомпоновки = ЗначениеЗаполнено(Объект.СпособКомпоновки);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидЯчейки) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,"Вид ячейки", 
							НомерСтроки, "Правила заполнения"); 
			Поле = Префикс + "ВидЯчейки";				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,,Отказ);
		КонецЕсли; 
		
		Если СтрокаТаблицы.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение 
			И ЗаполненСпособКомпоновки И ЗначениеЗаполнено(СтрокаТаблицы.ЭлементДанных) Тогда 	
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ИмяРесурса) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,"Ресурс", 
							НомерСтроки, "Правила заполнения");
				Поле = Префикс + "ИмяРесурса";			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,,Отказ);
			КонецЕсли; 
			
		ИначеЕсли ТекущееПравилоВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда 	
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Формула) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА",,"Формула",
								НомерСтроки, "Правила заполнения");
				Поле = Префикс + "Формула";				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,,Отказ);
			КонецЕсли; 
			
		КонецЕсли; 	
		
	КонецЦикла; 
	
КонецПроцедуры // ПроверитьЗаполнениеПравилЗаполнения()

&НаСервере
Процедура СохранитьСписокПараметров(ТекущийОбъект)
	
	ТекущийОбъект.Параметры.Очистить();
	
	Для каждого СтрокаТаблицы Из СписокПараметров Цикл
		
		ТекстНаРазныхЯзыках = Новый Структура(); 
		Для каждого Колонка Из КолонкиСпискаПараметров Цикл
			Если НЕ ПустаяСтрока(СтрокаТаблицы[Колонка.Значение]) Тогда
				ТекстНаРазныхЯзыках.Вставить(Колонка.Значение, СтрокаТаблицы[Колонка.Значение]);
			КонецЕсли; 
		КонецЦикла; 
		НоваяСтрока = ТекущийОбъект.Параметры.Добавить();
		НоваяСтрока.Параметр	 = СтрокаТаблицы.Параметр;
		НоваяСтрока.ВидПараметра = Перечисления.бит_ВидыПараметровПроизвольныхОтчетов.ТекстНаРазныхЯзыках;
		НоваяСтрока.Значение 	 = бит_ОбщегоНазначенияКлиентСервер.СформироватьТекстНаРазныхЯзыках(ТекстНаРазныхЯзыках);
	КонецЦикла;

КонецПроцедуры // ПередЗаписьюНаСервере()

&НаКлиенте
Функция ПодготовитьПараметрыФормыВыбораПараметров()

	ОблМакета = Элементы.МакетОтчета.ТекущаяОбласть;
	Если ОблМакета = Неопределено Тогда   		
		ТекстСообщения = Нстр("ru = 'Не выбрана область макета!'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат Неопределено;  		
	КонецЕсли; 
	
	ИмяПараметраНач = СтрЗаменить(ОблМакета.Текст, "[", "");
	ИмяПараметраНач = СтрЗаменить(ИмяПараметраНач, "]", "");	
	
	ПервыйПараметр = "";
	СтрокаПравил   = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ОблМакета.Имя, ПравилаЗаполнения);
	Если СтрокаПравил = Неопределено Тогда
		ПервыйПараметр = ТекущееПравилоШаблон;
	Иначе
		ПервыйПараметр = СтрокаПравил.Шаблон;
	КонецЕсли; 
	
	Если ПустаяСтрока(ПервыйПараметр) И НЕ СписокПараметров.Количество() = 0 Тогда
		ПервыйПараметр = СписокПараметров[0].Параметр;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяПараметраПоследнее", ПервыйПараметр);
	ПараметрыФормы.Вставить("СпособКомпоновки"     , Объект.СпособКомпоновки);
	ПараметрыФормы.Вставить("Тч_Параметры"		   , Объект.Параметры);
	ПараметрыФормы.Вставить("КолонкиСпискаПараметров", КолонкиСпискаПараметров);
	ПараметрыФормы.Вставить("СписокПараметров"	   , СписокПараметров);
	ПараметрыФормы.Вставить("ТипОтчета",			Объект.ТипОтчета);
	
	Возврат ПараметрыФормы;
	
КонецФункции // ПодготовитьПараметрыФормыВыбораПараметров()
 
#КонецОбласти 

#Область РедакторФормул

&НаКлиенте
Процедура рф_АнализЗначенияВводФормул()

	бит_РедакторФормулКлиент.АнализЗначенияВводФормул(ЭтотОбъект, МакетОтчета, ПравилаЗаполнения);
		
КонецПроцедуры

&НаКлиенте
Процедура рф_Открыть()

	бит_РедакторФормулКлиент.ОткрытьРедакторФормул(ЭтотОбъект, МакетОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_ПростыеКоманды(Команда)
	
	бит_РедакторФормулКлиент.РедакторФормул_ПростыеКоманды(Команда, ЭтотОбъект);
				
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_Очистить(Команда)
	
	бит_РедакторФормулКлиент.РедакторФормул_Очистить(ЭтотОбъект);  	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_Функция(Команда)
	
	бит_РедакторФормулКлиент.РедакторФормул_Функция(Команда, ЭтотОбъект);  	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_Вернуть()

	бит_РедакторФормулКлиент.РедакторФормул_Вернуть(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторФормул_ЗавершитьРедактирование(Команда)
	
	СтруктураИмени = Новый Структура("МаксНомерОбласти, Префикс, ДлинаИмени", Объект.МаксНомерОбласти, Объект.Префикс, Объект.ДлинаИмени);
	
	бит_РедакторФормулКлиент.РедакторФормул_ЗавершитьРедактирование(Команда
															, ЭтотОбъект
															, СтруктураИмени
															, ПравилаЗаполнения
															, МакетОтчета);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранныеОбластиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	бит_РедакторФормулКлиент.ВыбранныеОбластиВыбор(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтрокаНазадОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	бит_РедакторФормулКлиент.СтрокаНазадОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ФормулаПриИзменении(Элемент)

	бит_РедакторФормулКлиент.ПриИзмененииФормулы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураОтчета

 // Процедура обновляет дерево структуры отчета
 //
 &НаСервере
 Процедура ОбновитьДеревоСтруктуры()
	 
	ДеревоСтруктура.ПолучитьЭлементы().Очистить();
	
	ДеревоВрем = Новый ДеревоЗначений;
	ДеревоВрем.Колонки.Добавить("ЭлементСтруктуры");
	ДеревоВрем.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	ДеревоВрем.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	ДеревоВрем.Колонки.Добавить("Картинка");
	 
 	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_мпд_ТаблицыПроизвольныхОтчетов.Ссылка КАК Таблица,
	|	бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.Вид КАК Вид,
	|	бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.ВидЯчейки,
	|	бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.Ссылка КАК Элемент
	|ИЗ
	|	Справочник.бит_мпд_ТаблицыПроизвольныхОтчетов КАК бит_мпд_ТаблицыПроизвольныхОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов КАК бит_мпд_ЭлементыТаблицПроизвольныхОтчетов
	|		ПО бит_мпд_ТаблицыПроизвольныхОтчетов.Ссылка = бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.Таблица
	|			И (НЕ бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.ПометкаУдаления)
	|ГДЕ
	|	бит_мпд_ТаблицыПроизвольныхОтчетов.Владелец = &Владелец
	|	И бит_мпд_ТаблицыПроизвольныхОтчетов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_мпд_ТаблицыПроизвольныхОтчетов.Верх,
	|	бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.КодСортировки
	|ИТОГИ ПО
	|	Таблица,
	|	Вид
	|АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.Выполнить();
	
	ВыборкаТаблицы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицы.Следующий() Цикл
		
        СтрокаТаблица = ДеревоВрем.Строки.Добавить();
        СтрокаТаблица.ЭлементСтруктуры = ВыборкаТаблицы.Таблица;
        СтрокаТаблица.Вид = "Таблица";
        СтрокаТаблица.Картинка = БиблиотекаКартинок.бит_ТабличнаяЧасть;

        СтрокаКолонки = СтрокаТаблица.Строки.Добавить();
        СтрокаКолонки.ЭлементСтруктуры = НСтр("ru = 'Колонки'");
        СтрокаКолонки.Вид = "Колонки";
        СтрокаКолонки.Картинка = БиблиотекаКартинок.бит_Реквизиты;
        СтрокаКолонки.ТолькоПросмотр = Истина;

        СтрокаСтроки = СтрокаТаблица.Строки.Добавить();
        СтрокаСтроки.ЭлементСтруктуры = НСтр("ru = 'Строки'");
        СтрокаСтроки.Вид = "Строки";
        СтрокаСтроки.Картинка = БиблиотекаКартинок.бит_Реквизиты;
        СтрокаСтроки.ТолькоПросмотр = Истина;
		 
		ВыборкаВид = ВыборкаТаблицы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВид.Следующий() Цикл
		
			 Выборка = ВыборкаВид.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			 
			 Пока Выборка.Следующий() Цикл
				 
				 Если ЗначениеЗаполнено(Выборка.Элемент) Тогда
					 
					 Если Выборка.Вид = Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Колонка Тогда
						 
						 СтрокаЭлемент = СтрокаКолонки.Строки.Добавить();
						 СтрокаЭлемент.Вид = "Колонка";
						 
					 Иначе	
						 
						 СтрокаЭлемент = СтрокаСтроки.Строки.Добавить();
						 СтрокаЭлемент.Вид = "Строка";
						 
					 КонецЕсли; 
					 
					 СтрокаЭлемент.ЭлементСтруктуры = Выборка.Элемент;
					 Если Выборка.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда
						 СтрокаЭлемент.Картинка = БиблиотекаКартинок.бит_ФункцияФормула;
					 Иначе	
						 СтрокаЭлемент.Картинка = БиблиотекаКартинок.бит_мхо_Реквизит;
					 КонецЕсли; 
					 
				 КонецЕсли; 
				   
			 КонецЦикла; // Выборка
		
		КонецЦикла;  // ВыборкаВид
	
	КонецЦикла; // ВыборкаТаблицы
	
	ЗначениеВДанныеФормы(ДеревоВрем, ДеревоСтруктура);
	
 КонецПроцедуры // ОбновитьДеревоСтруктуры()

&НаКлиенте
Процедура КомандаОбновитьСтруктуру(Команда)
	
	ОбновитьДеревоСтруктуры();
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСтруктура, ДеревоСтруктура.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ДеревоСтруктура.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЭлементСтруктуры) И НЕ ТипЗнч(ТекущаяСтрока.ЭлементСтруктуры) = Тип("Строка")  Тогда
		Если ТипЗнч(ТекущаяСтрока.ЭлементСтруктуры) = Тип("СправочникСсылка.бит_мпд_ТаблицыПроизвольныхОтчетов") Тогда
			ПоказатьЗначение(, ТекущаяСтрока.ЭлементСтруктуры);		
		Иначе	
			ПараметрыПередачи = Новый Структура(); 
			ПараметрыПередачи.Вставить("Ключ",ТекущаяСтрока.ЭлементСтруктуры);
			ПараметрыПередачи.Вставить("НастройкиУстановлены", Истина);
			ФормаЭлемента = ОткрытьФорму("Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.ФормаОбъекта", 
								ПараметрыПередачи, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура открывает форму для добавления таблицы или элемента таблицы отчета. 
//
&НаКлиенте
Процедура ДобавитьЭлементСтруктуры(ВидЯчейки = Неопределено)

	ТекущаяСтрока = Элементы.ДеревоСтруктура.ТекущиеДанные;
	ВыделенныеЭлементы = Новый Массив;
	Для каждого Ид Из Элементы.ДеревоСтруктура.ВыделенныеСтроки Цикл
	
		ТекЭлементДерева = ДеревоСтруктура.НайтиПоИдентификатору(Ид);
		Если НЕ ТекЭлементДерева = Неопределено 
			 И ТипЗнч(ТекЭлементДерева.ЭлементСтруктуры) = Тип("СправочникСсылка.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов") Тогда
		
			 ВыделенныеЭлементы.Добавить(ТекЭлементДерева.ЭлементСтруктуры);
			 
		КонецЕсли; 
	
	КонецЦикла; 
	
	
	Если ТекущаяСтрока = Неопределено ИЛИ (НЕ ТекущаяСтрока = Неопределено И ТекущаяСтрока.Вид = "Таблица")  Тогда
		
		// добавляем новую таблицу
		
		ПарамФормы = Новый Структура;
		ПарамФормы.Вставить("РежимРедактирования", "ИзНастройкиОтчета");
		ПарамФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Владелец, Наименование", Объект.Ссылка, "Новая таблица"));
		ОткрытьФорму("Справочник.бит_мпд_ТаблицыПроизвольныхОтчетов.ФормаОбъекта",ПарамФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	ИначеЕсли ТекущаяСтрока.Вид = "Колонки" ИЛИ ТекущаяСтрока.Вид = "Колонка" Тогда
		
		ТекТаблица = Неопределено;
		Если ТекущаяСтрока.Вид = "Колонки" Тогда
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ЭлементСтруктуры;
			
		ИначеЕсли ТекущаяСтрока.Вид = "Колонка" Тогда	  
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ЭлементСтруктуры;
			
		КонецЕсли; 
		
		// добавляем новую колонку
		ПарамФормы = Новый Структура;
		ПарамФормы.Вставить("РежимРедактирования", "ИзНастройкиОтчета");
		ПарамФормы.Вставить("ВыделенныеЭлементы", ВыделенныеЭлементы);
		
		ЗнЗаполнения = Новый Структура;
		ЗнЗаполнения.Вставить("Владелец", Объект.Ссылка);
		ЗнЗаполнения.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Колонка"));
		ЗнЗаполнения.Вставить("Таблица", ТекТаблица);
		Если ЗначениеЗаполнено(ВидЯчейки) Тогда
		
			ЗнЗаполнения.Вставить("ВидЯчейки", ВидЯчейки);
		
		КонецЕсли; 
		
		ПарамФормы.Вставить("ЗначенияЗаполнения", ЗнЗаполнения);
		ОткрытьФорму("Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.ФормаОбъекта",ПарамФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		
	ИначеЕсли ТекущаяСтрока.Вид = "Строки" ИЛИ ТекущаяСтрока.Вид = "Строка" Тогда
		
		ТекТаблица = Неопределено;
		Если ТекущаяСтрока.Вид = "Строки" Тогда
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ЭлементСтруктуры;
			
		ИначеЕсли ТекущаяСтрока.Вид = "Строка" Тогда	  
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ЭлементСтруктуры;
			
		КонецЕсли; 
		
		// добавляем новую строку
		ПарамФормы = Новый Структура;
		ПарамФормы.Вставить("РежимРедактирования", "ИзНастройкиОтчета");
        ПарамФормы.Вставить("ВыделенныеЭлементы", ВыделенныеЭлементы);
		
		ЗнЗаполнения = Новый Структура;
		ЗнЗаполнения.Вставить("Владелец", Объект.Ссылка);
		ЗнЗаполнения.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Строка"));
		ЗнЗаполнения.Вставить("Таблица", ТекТаблица);
        Если ЗначениеЗаполнено(ВидЯчейки) Тогда
			ЗнЗаполнения.Вставить("ВидЯчейки", ВидЯчейки);
		КонецЕсли; 
		
		ПарамФормы.Вставить("ЗначенияЗаполнения", ЗнЗаполнения);
		ОткрытьФорму("Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.ФормаОбъекта",ПарамФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли; 

КонецПроцедуры // ДобавитьЭлементСтруктуры()

&НаКлиенте
Процедура КомандаДобавитьЭлементСтруктуры(Команда)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросДобавитьЭлементСтруктурыЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Для работы со структурой необходимо записать элемент. Выполнить запись?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе	
		
		ДобавитьЭлементСтруктуры();
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ВопросДобавитьЭлементСтруктурыЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВопросДобавитьЭлементСтруктурыЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флОК = Записать();
		Если флОК Тогда
			
			ДобавитьЭлементСтруктуры();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры	// ВопросДобавитьЭлементСтруктурыЗавершение

&НаКлиенте
Процедура КомандаДобавитьЭлементФормулу(Команда)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросДобавитьЭлементФормулуЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Для работы со структурой необходимо записать элемент. Выполнить запись?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе	
		
		ДобавитьЭлементСтруктуры(ПредоПределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула"));
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "ВопросДобавитьЭлементСтруктурыЗавершение".
//
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура ВопросДобавитьЭлементФормулуЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флОК = Записать();
		Если флОК Тогда
			
			ДобавитьЭлементСтруктуры(ПредоПределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула"));
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры	// ВопросДобавитьЭлементСтруктурыЗавершение
 
// Процедура очищает таблицу в макете. 
//
// Параметры:
//  ТабВрем - ТаблицаЗначений.
//
&НаСервере
Процедура ОчиститьТаблицуМакета(ТабВрем)

	// Очистка таблицы в макете
	Для каждого ТекСтрока Из ТабВрем Цикл
		
		ТекТаблица      = ТекСтрока.Таблица;
		НачНомерСтроки  = ТекТаблица.ВерхПред;
		НачНомерКолонки = ТекТаблица.ЛевоПред;
		
		Если ТекТаблица.ВыводитьЗаголовкиСтрокПред Тогда
			
			// заголовок строки
			ОблЗаголовокСтроки = МакетОтчета.Область(НачНомерСтроки, НачНомерКолонки, НачНомерСтроки, НачНомерКолонки);
			ОблЗаголовокСтроки.Очистить(Истина, Истина, Истина);
			ОблЗаголовокСтроки.Имя = бит_мпд_КлиентСервер.СформироватьТиповоеИмяОбласти(НачНомерСтроки, НачНомерКолонки);
			ОблЗаголовокСтроки.СодержитЗначение = Ложь;
			//Сообщить(ОблЗаголовокСтроки.Имя);
			
		КонецЕсли; // выводить заголовки строк
		
		
		ТекНомерСтроки = НачНомерСтроки+1;
		
		Для каждого ОписаниеСтроки Из ТекСтрока.СтрокиТаблицы Цикл
			
			Если ТекТаблица.ВыводитьЗаголовкиСтрокПред Тогда
				
				// заголовок строки
				ОблЗаголовокСтроки = МакетОтчета.Область(ТекНомерСтроки, НачНомерКолонки, ТекНомерСтроки, НачНомерКолонки);
				ОблЗаголовокСтроки.Очистить(Истина, Истина, Истина);
				ОблЗаголовокСтроки.Имя = бит_мпд_КлиентСервер.СформироватьТиповоеИмяОбласти(ТекНомерСтроки, НачНомерКолонки);
				ОблЗаголовокСтроки.СодержитЗначение = Ложь;
				//Сообщить(ОблЗаголовокСтроки.Имя);

				
			КонецЕсли; // выводить заголовки строк
			
			ТекНомерКолонки = НачНомерКолонки+1; 
			Для каждого ОписаниеКолонки Из ТекСтрока.КолонкиТаблицы Цикл
				
				Если ТекТаблица.ВыводитьЗаголовкиКолонокПред Тогда
					
					// заголовок столбца
					Если ТекНомерСтроки = НачНомерСтроки + 1 Тогда
						
						ОблЗаголовокКолонки = МакетОтчета.Область(НачНомерСтроки, ТекНомерКолонки, НачНомерСтроки, ТекНомерКолонки);
						ОблЗаголовокКолонки.Очистить(Истина, Истина, Истина);
						ОблЗаголовокКолонки.Имя = бит_мпд_КлиентСервер.СформироватьТиповоеИмяОбласти(НачНомерСтроки, ТекНомерКолонки);
						ОблЗаголовокКолонки.СодержитЗначение = Ложь;
						
					КонецЕсли; 
					
				КонецЕсли; // выводить заголовки колонок
				
				ОблМакета = МакетОтчета.Область(ТекНомерСтроки, ТекНомерКолонки, ТекНомерСтроки, ТекНомерКолонки);
				Если НЕ бит_мпд_КлиентСервер.ИмяОбластиТиповое(ОблМакета.Имя) Тогда
					
					ОблМакета.Очистить(Истина, Истина, Истина);
					ОблМакета.Имя = "П"+бит_мпд_КлиентСервер.СформироватьТиповоеИмяОбласти(ТекНомерСтроки, ТекНомерКолонки);
					ОблМакета.Примечание.Текст = "";
					ОблМакета.СодержитЗначение = Ложь;
				КонецЕсли; 
				
				ТекНомерКолонки = ТекНомерКолонки + 1;				
			КонецЦикла; // по колонкам таблицы
			
			ТекНомерСтроки = ТекНомерСтроки + 1;			
		КонецЦикла; // по строкам таблицы
		
	КонецЦикла; // по таблицам

КонецПроцедуры // ОчиститьТаблицуМакета()
 
&НаСервере 
Процедура ОформитьЯчейкуТаблицы(ОблМакета, СтрокаПравил, НовоеОформление = Истина)
	
	ОблМакета.Имя = СтрокаПравил.ИмяОбласти;
	Если СтрокаПравил.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Шаблон") Тогда
		
		Текст  = ОблМакета.Текст;
		Шаблон = "[" + СтрокаПравил.Шаблон + "]";
		Если СтрНайти(Текст, Шаблон) = 0 Тогда
			Текст = Текст + Шаблон;
		КонецЕсли; 
		// Шаблон
		ОблМакета.СодержитЗначение = Ложь;
		ОблМакета.Текст			   = Текст;
		
	Иначе // Значение или формула
		
		ОблМакета.СодержитЗначение = Истина;
		Если ОблМакета.СодержитЗначение <> Неопределено Тогда
			
			ОблМакета.ТипЗначения = Новый ОписаниеТипов("Число");
			Если ОблМакета.ЭлементУправления <> Неопределено Тогда 				 
				ОблМакета.ЭлементУправления.КнопкаВыбора = Истина; 				 
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если СтрокаПравил.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Значение") Тогда
			// Значение
			ОблМакета.Примечание.Текст = Строка(СтрокаПравил.ЭлементДанных) + "(" + СтрокаПравил.ИмяРесурса + ")";
			ОблМакета.Защита = Ложь;
		ИначеЕсли СтрокаПравил.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула") Тогда	
			// Формула
			ОблМакета.Примечание.Текст = СтрокаПравил.Формула;
			ОблМакета.Защита = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НовоеОформление Тогда
		ЛинияГраницы = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, Ложь);	
		
		ОблМакета.ГраницаСверху = ЛинияГраницы;
		ОблМакета.ГраницаСлева = ЛинияГраницы;
		ОблМакета.ГраницаСнизу = ЛинияГраницы;
		ОблМакета.ГраницаСправа = ЛинияГраницы;
	КонецЕсли; 
	
КонецПроцедуры // ОформитьЯчейкуТаблицы()

&НаСервере
Процедура ОформитьЯчейкуТаблицыВызовСервера(ИмяОбласти, НовоеОформление = Истина)

	ОбластьЯчеек = МакетОтчета.Области.Найти(ИмяОбласти);
	СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения);
	ОформитьЯчейкуТаблицы(ОбластьЯчеек, СтрокаПравил, НовоеОформление);

КонецПроцедуры // ОформитьЯчейкуТаблицыВызовСервера()

&НаКлиенте
Процедура ОчиститьЯчейкуТаблицы(ОблМакета)

	ОблМакета.Очистить(Истина, Истина, Истина);
	ОблМакета.Имя = "";
	ОблМакета.Примечание.Текст = "";
	ОблМакета.СодержитЗначение = Ложь;
	ОблМакета.Защита = Ложь;
	
КонецПроцедуры // ОчиститьОбластьМакета()
 
&НаСервере
Функция ГенерироватьФормулу(ОписаниеКолонки, ОписаниеСтроки)
	
	// Генерация формулы по алгоритму.
	СтрФормула = "";
	НайденныеСтроки = Новый Массив;
	ВремАргументы   = Новый Массив;
	
	Если ОписаниеКолонки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула 
		И НЕ ОписаниеСтроки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда
		
		ТекАлгоритм = ОписаниеКолонки.Алгоритм;
		
		ОтборЯчеек = Новый Структура;
		ОтборЯчеек.Вставить("СтрокаТаблицыОтчета", ОписаниеСтроки);
		//ОтборЯчеек.Вставить("ВидЯчейки", Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение);
		
		НайденныеСтроки = ПравилаЗаполнения.НайтиСтроки(ОтборЯчеек);
		
		
		Если ОписаниеКолонки.Аргументы.Количество() > 0 Тогда
			
			КэшАрг = Новый Соответствие;
			Для каждого СтрокаАрг Из ОписаниеКолонки.Аргументы Цикл
				
				КэшАрг.Вставить(СтрокаАрг.ЭлементТаблицы, СтрокаАрг.Коэффициент);
				
			КонецЦикла; 
			
			Для каждого ТекСтрокаПравила Из НайденныеСтроки Цикл
				
				Коэфф = КэшАрг[ТекСтрокаПравила.КолонкаТаблицыОтчета];
				
				Если НЕ Коэфф = Неопределено Тогда
					
					ВремАргументы.Добавить(Новый Структура("Аргумент,Коэффициент", ТекСтрокаПравила, Коэфф));
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		Иначе	
			
			Для каждого ТекСтрокаПравила Из НайденныеСтроки Цикл
				
				Если ТекСтрокаПравила.КолонкаТаблицыОтчета = ОписаниеКолонки Тогда
				
					 Продолжить;
				
				КонецЕсли; 

				
				ВремАргументы.Добавить(Новый Структура("Аргумент,Коэффициент", ТекСтрокаПравила, 1));
				
			КонецЦикла; 
			
		КонецЕсли;
		
	ИначеЕсли ОписаниеСтроки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула 
		И НЕ ОписаниеКолонки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда
		
		ТекАлгоритм = ОписаниеСтроки.Алгоритм;
		
		ОтборЯчеек = Новый Структура;
		ОтборЯчеек.Вставить("КолонкаТаблицыОтчета", ОписаниеКолонки);
		//ОтборЯчеек.Вставить("ВидЯчейки", Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение);
		
		НайденныеСтроки = ПравилаЗаполнения.НайтиСтроки(ОтборЯчеек);
		
		Если ОписаниеСтроки.Аргументы.Количество() > 0 Тогда
			
			КэшАрг = Новый Соответствие;
			Для каждого СтрокаАрг Из ОписаниеСтроки.Аргументы Цикл
				
				КэшАрг.Вставить(СтрокаАрг.ЭлементТаблицы, СтрокаАрг.Коэффициент);
				
			КонецЦикла; 
			
			Для каждого ТекСтрокаПравила Из НайденныеСтроки Цикл
				
				Коэфф = КэшАрг[ТекСтрокаПравила.СтрокаТаблицыОтчета];
				
				Если НЕ Коэфф = Неопределено Тогда
					
					ВремАргументы.Добавить(Новый Структура("Аргумент,Коэффициент", ТекСтрокаПравила, Коэфф));
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		Иначе	
			
			Для каждого ТекСтрокаПравила Из НайденныеСтроки Цикл
				
				Если ТекСтрокаПравила.СтрокаТаблицыОтчета = ОписаниеСтроки Тогда
				
					 Продолжить;
				
				КонецЕсли; 
				
				ВремАргументы.Добавить(Новый Структура("Аргумент,Коэффициент", ТекСтрокаПравила, 1));
				
			КонецЦикла; 
			
		КонецЕсли;
		
	ИначеЕсли ОписаниеСтроки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула 
		И ОписаниеКолонки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда	
		
		ТекАлгоритм = ОписаниеКолонки.Алгоритм;
		
		ОтборЯчеек = Новый Структура;
		ОтборЯчеек.Вставить("СтрокаТаблицыОтчета", ОписаниеСтроки);
		
		НайденныеСтроки = ПравилаЗаполнения.НайтиСтроки(ОтборЯчеек);
		
		Если ОписаниеСтроки.Аргументы.Количество() > 0 Тогда
			
			КэшАрг = Новый Соответствие;
			Для каждого СтрокаАрг Из ОписаниеКолонки.Аргументы Цикл
				
				КэшАрг.Вставить(СтрокаАрг.ЭлементТаблицы, СтрокаАрг.Коэффициент);
				
			КонецЦикла; 
			
			Для каждого ТекСтрокаПравила Из НайденныеСтроки Цикл
				
				Коэфф = КэшАрг[ТекСтрокаПравила.КолонкаТаблицыОтчета];
				
				Если НЕ Коэфф = Неопределено Тогда
					
					ВремАргументы.Добавить(Новый Структура("Аргумент,Коэффициент", ТекСтрокаПравила, Коэфф));
					
				КонецЕсли; 
				
			КонецЦикла; 

			
		Иначе	
			
			Для каждого ТекСтрокаПравила Из НайденныеСтроки Цикл
				
				Если ТекСтрокаПравила.КолонкаТаблицыОтчета = ОписаниеКолонки Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				ВремАргументы.Добавить(Новый Структура("Аргумент,Коэффициент", ТекСтрокаПравила, 1));
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ТекАлгоритм = "Итог" Тогда
		
		//Для каждого ТекНайденнаяСтрока Из НайденныеСтроки Цикл
		//	
		//	СтрФормула = СтрФормула + ?(ПустаяСтрока(СтрФормула),""," + ")+"["+ТекНайденнаяСтрока.ИмяОбласти+"]";
		//	
		//КонецЦикла; 
		
		Для каждого СтрАрг Из ВремАргументы Цикл
			
			Если СтрАрг.Коэффициент = 0 Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			СтрФормула = СтрФормула + ?(ПустаяСтрока(СтрФормула),""," + ")+"["+СтрАрг.Аргумент.ИмяОбласти+"]*("+Формат(СтрАрг.Коэффициент,"ЧГ=")+")";
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ТекФормула = СтрФормула;
	

Возврат ТекФормула;

КонецФункции // ГенерироватьФормулу()

&НаСервере
Процедура КомандаСоздатьПравилаНаСервере()
	
	// проверка возможности обновления таблиц в макете
	МассивОписаний = Справочники.бит_мпд_ТаблицыПроизвольныхОтчетов.ПолучитьТаблицыОтчета(Объект.Ссылка);
	
	Если Справочники.бит_мпд_ТаблицыПроизвольныхОтчетов.ПроверитьПересечения(МассивОписаний, Истина) Тогда
		
		 ТекстСообщения =  НСтр("ru = 'Обновление невозможно из-за пересечения таблиц! '");
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		 Возврат;
	
	КонецЕсли; 
	
	// обновление таблиц в макете
	ТабВрем = Новый ТаблицаЗначений;
	ТабВрем.Колонки.Добавить("Таблица");
	ТабВрем.Колонки.Добавить("СтрокиТаблицы");
	ТабВрем.Колонки.Добавить("КолонкиТаблицы");
	
 	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблицы.Ссылка КАК Таблица,
	|	ЭлементыТаблиц.Вид КАК Вид,
	|	ЭлементыТаблиц.Ссылка КАК Элемент,
	|	ЕСТЬNULL(ЭлементыТаблиц.ПометкаУдаления, ИСТИНА) КАК ПометкаУдаления,
	|	Таблицы.ВерхПред,
	|	Таблицы.ЛевоПред,
	|	ЭлементыТаблиц.ВидЯчейки,
	|	ЭлементыТаблиц.ЭлементДанных,
	|	ЭлементыТаблиц.ИмяРесурса
	|ИЗ
	|	Справочник.бит_мпд_ТаблицыПроизвольныхОтчетов КАК Таблицы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов КАК ЭлементыТаблиц
	|		ПО Таблицы.Ссылка = ЭлементыТаблиц.Таблица
	|ГДЕ
	|	Таблицы.Владелец = &Владелец
	|	И Таблицы.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблицы.Верх,
	|	ЭлементыТаблиц.КодСортировки
	|ИТОГИ ПО
	|	Таблица,
	|	Вид
	|АВТОУПОРЯДОЧИВАНИЕ";				   
				   
	Результат 	   = Запрос.Выполнить();
	ВыборкаТаблицы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицы.Следующий() Цикл
		
		НоваяСтрока = ТабВрем.Добавить();
		НоваяСтрока.Таблица = ВыборкаТаблицы.Таблица;
		НоваяСтрока.СтрокиТаблицы = Новый Массив;
		НоваяСтрока.КолонкиТаблицы = Новый Массив;
		 
		ВыборкаВид = ВыборкаТаблицы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВид.Следующий() Цикл
		
			 Выборка = ВыборкаВид.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			 
			 Пока Выборка.Следующий() Цикл
				 Если ЗначениеЗаполнено(Выборка.Элемент) Тогда
					 Если Выборка.Вид = Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Колонка Тогда
						 НоваяСтрока.КолонкиТаблицы.Добавить(Выборка.Элемент);
					 Иначе	
						 НоваяСтрока.СтрокиТаблицы.Добавить(Выборка.Элемент);
					 КонецЕсли; 
				 КонецЕсли; 
			 КонецЦикла; // Выборка
		КонецЦикла;  // ВыборкаВид
	КонецЦикла; // ВыборкаТаблицы
	
	ЛинияГраницы = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, Ложь);	
	
	// Очистка отрисованной таблицы.
	ОчиститьТаблицуМакета(ТабВрем);
	
	// Создание таблицы в макете
	Для каждого ТекСтрока Из ТабВрем Цикл
		
		ТекТаблица             = ТекСтрока.Таблица;
		НачНомерСтроки         = ТекТаблица.Верх;
		НачНомерКолонки        = ТекТаблица.Лево;
		СтрокиПравилТекТаблицы = ПравилаЗаполнения.НайтиСтроки(Новый Структура("ТаблицаОтчета", ТекТаблица));
		
		Если ТекТаблица.ВыводитьЗаголовкиСтрок Тогда
			
			// заголовок строки
			ОблЗаголовокСтроки = МакетОтчета.Область(НачНомерСтроки, НачНомерКолонки, НачНомерСтроки, НачНомерКолонки);
			ОформитьОбластьПриСозданииПравилаНаСервере(ОблЗаголовокСтроки, "", ЛинияГраницы, 25, ГоризонтальноеПоложение.Лево
														,ВертикальноеПоложение.Центр);
			
		КонецЕсли; // выводить заголовки строк
		
		ТекНомерСтроки = НачНомерСтроки+1;
		Для каждого ОписаниеСтроки Из ТекСтрока.СтрокиТаблицы Цикл
			
			Если ОписаниеСтроки.ПометкаУдаления Тогда
			     Продолжить;
			КонецЕсли; 
			
			Если ТекТаблица.ВыводитьЗаголовкиСтрок Тогда
				
				// заголовок строки
				ОблЗаголовокСтроки = МакетОтчета.Область(ТекНомерСтроки, НачНомерКолонки, ТекНомерСтроки, НачНомерКолонки);
				ОформитьОбластьПриСозданииПравилаНаСервере(ОблЗаголовокСтроки, ОписаниеСтроки.Наименование, ЛинияГраницы, 25
															,ГоризонтальноеПоложение.Лево, ВертикальноеПоложение.Центр);
				
			КонецЕсли; // выводить заголовки строк
			
			ТекНомерКолонки = НачНомерКолонки+1; 
			Для каждого ОписаниеКолонки Из ТекСтрока.КолонкиТаблицы Цикл
				
				Если ОписаниеКолонки.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;  
				 
				Если ТекТаблица.ВыводитьЗаголовкиКолонок Тогда
				
					// заголовок столбца
					Если ТекНомерСтроки = НачНомерСтроки + 1 Тогда
						
						ОблЗаголовокСтроки = МакетОтчета.Область(НачНомерСтроки, ТекНомерКолонки, НачНомерСтроки, ТекНомерКолонки);
						ОформитьОбластьПриСозданииПравилаНаСервере(ОблЗаголовокСтроки, ОписаниеКолонки.Наименование, ЛинияГраницы, 15
															,ГоризонтальноеПоложение.Центр, ВертикальноеПоложение.Центр);
					КонецЕсли; 
				
				КонецЕсли; // выводить заголовки колонок
				
				ОблМакета    = МакетОтчета.Область(ТекНомерСтроки, ТекНомерКолонки, ТекНомерСтроки, ТекНомерКолонки);
				СтрокаПравил = НайтиСтрокуПравилЗаполненияПоЭлементамТаблицы(ОписаниеКолонки, ОписаниеСтроки, ПравилаЗаполнения);
				
				Если ОписаниеКолонки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула 
				 ИЛИ ОписаниеСтроки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда
					ВидЯчейки  = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула;
					ТекФормула = ГенерироватьФормулу(ОписаниеКолонки, ОписаниеСтроки);
				Иначе
					ВидЯчейки  = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
					ТекФормула = "";
				КонецЕсли;
				
				ТекПериодДанных = ОписаниеКолонки.ПериодДанных;
				Если НЕ ЗначениеЗаполнено(ТекПериодДанных) Тогда
					ТекПериодДанных = ОписаниеСтроки.ПериодДанных
				КонецЕсли;
				
				Если СтрокаПравил = Неопределено Тогда
					
					ИмяОбласти = ПолучитьИмяОбласти(ОблМакета.Имя, МакетОтчета, Объект);
						
					// создаем новое правило заполнения
					СтрокаПравил = ПравилаЗаполнения.Добавить();
					СтрокаПравил.ИмяОбласти = ИмяОбласти;
					СтрокаПравил.ЭтоНовый	= Истина;
					
					ЗаполнитьПравило(СтрокаПравил, ОписаниеСтроки, ОписаниеКолонки);
					
					СтрокаПравил.КолонкаТаблицыОтчета = ОписаниеКолонки;
					СтрокаПравил.СтрокаТаблицыОтчета  = ОписаниеСтроки;
					СтрокаПравил.ТаблицаОтчета        = ТекСтрока.Таблица;
					
					
					ОформитьЯчейкуТаблицы(ОблМакета, СтрокаПравил);
					
				Иначе	
					
					ОбновитьПравило(СтрокаПравил, ОписаниеСтроки, ОписаниеКолонки);
					
					ОформитьЯчейкуТаблицы(ОблМакета, СтрокаПравил);
					ИндексУдаления = СтрокиПравилТекТаблицы.Найти(СтрокаПравил);
					Если НЕ ИндексУдаления = Неопределено Тогда
						СтрокиПравилТекТаблицы.Удалить(ИндексУдаления);
					КонецЕсли; 
					
				КонецЕсли; // есть строка правил
				
				ТекНомерКолонки = ТекНомерКолонки + 1;
			КонецЦикла; // по колонкам таблицы
			
			ТекНомерСтроки = ТекНомерСтроки + 1;
		КонецЦикла;  // по строкам таблицы
		
		// Изменяем предыдущие координаты таблицы на текущие.
		ТабОб = ТекТаблица.ПолучитьОбъект();
		ТабОб.АктуализироватьПредыдущиеКоординаты();
		бит_ОбщегоНазначения.ЗаписатьСправочник(ТабОб,"","Ошибки",Истина);
		
		// Удаляем правила, связанные с тек. таблицей, но не использованные для создания.
		Для каждого СтрокаКУдалению Из СтрокиПравилТекТаблицы Цикл
			Если ЗначениеЗаполнено(СтрокаКУдалению.Показатель) Тогда
				Справочники.бит_ПоказателиПроизвольныхОтчетов.УдалитьПоказатель(СтрокаКУдалению.Показатель);
			КонецЕсли; 
			ПравилаЗаполнения.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЦикла; // по таблицам 
		
КонецПроцедуры

&НаСервере
Процедура ОформитьОбластьПриСозданииПравилаНаСервере(Область, Текст = "", ЛинияГраницы, ШиринаКолонки, 
													ГоризонтальноеПоложение, ВертикальноеПоложение)
	
	Область.Текст = Текст;
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение;
	Область.ВертикальноеПоложение 	= ВертикальноеПоложение;
	Область.ГраницаСверху 	 		= ЛинияГраницы;
	Область.ГраницаСлева 	 		= ЛинияГраницы;
	Область.ГраницаСнизу 	 		= ЛинияГраницы;
	Область.ГраницаСправа 	 		= ЛинияГраницы;
	Область.ШиринаКолонки 	 		= ШиринаКолонки;
	Область.Заполнение				= ТипЗаполненияОбластиТабличногоДокумента.Текст;
	Область.РазмещениеТекста 		= ТипРазмещенияТекстаТабличногоДокумента.Переносить;

КонецПроцедуры

&НаСервере
Функция ОпределитьПараметрыПравила(ОписаниеСтроки, ОписаниеКолонки)

	Ключи = "ФормироватьДвиженияПоБюджету,ВидЯчейки,Формула,ЭлементДанных,ИмяРесурса,ПериодДанных, ЗначенияПоУмолчанию";
	ПараметрыПравила = Новый Структура(Ключи); 

	Если ЗначениеЗаполнено(ОписаниеКолонки.ПериодДанных) Тогда
		ПериодДанных = ОписаниеКолонки.ПериодДанных;
	Иначе	
		ПериодДанных = ОписаниеСтроки.ПериодДанных
	КонецЕсли;
	
	ФормироватьДвиженияПоБюджету = ОписаниеКолонки.ФормироватьДвиженияПоБюджету ИЛИ ОписаниеСтроки.ФормироватьДвиженияПоБюджету;
	
	Если ОписаниеКолонки.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула 
	 ИЛИ ОписаниеСтроки.ВидЯчейки  = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула Тогда
		ВидЯчейки 			= Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Формула;
		Формула  			= ГенерироватьФормулу(ОписаниеКолонки, ОписаниеСтроки);
		ЗначенияПоУмолчанию = Новый СписокЗначений(); 
	Иначе
		ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
		Формула   = "";
		
		Если ЗначениеЗаполнено(ОписаниеКолонки.ЭлементДанных) Тогда
			ЭлементДанных = ОписаниеКолонки.ЭлементДанных
		Иначе	
			ЭлементДанных = ОписаниеСтроки.ЭлементДанных;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ОписаниеКолонки.ИмяРесурса) Тогда
			ИмяРесурса = ОписаниеКолонки.ИмяРесурса;
		Иначе	
			ИмяРесурса = ОписаниеСтроки.ИмяРесурса;
		КонецЕсли;
		
		ЗначенияПоУмолчанию = Новый СписокЗначений(); 
		// заполнение аналитик
		Для каждого СтрокаЗначения Из ОписаниеКолонки.ЗначенияПоУмолчанию Цикл
			
			СтрАналитика = Новый Структура("ИмяАналитики, Аналитика, ЗначениеАналитики"
			, СтрокаЗначения.ИмяАналитики
			, СтрокаЗначения.Аналитика
			, СтрокаЗначения.ЗначениеАналитики);
			
			ЗначенияПоУмолчанию.Добавить(СтрАналитика, СтрокаЗначения.ИмяАналитики);
			
		КонецЦикла; 
		
		Для каждого СтрокаЗначения Из ОписаниеСтроки.ЗначенияПоУмолчанию Цикл
			
			СтрАналитика = Новый Структура("ИмяАналитики, Аналитика, ЗначениеАналитики"
			, СтрокаЗначения.ИмяАналитики
			, СтрокаЗначения.Аналитика
			, СтрокаЗначения.ЗначениеАналитики);
			
			ЗначенияПоУмолчанию.Добавить(СтрАналитика, СтрокаЗначения.ИмяАналитики);
			
		КонецЦикла; 
		
		ПараметрыПравила.Вставить("ЭлементДанных", ЭлементДанных);
		ПараметрыПравила.Вставить("ИмяРесурса",    ИмяРесурса);
	КонецЕсли;
	
	ПараметрыПравила.Вставить("ФормироватьДвиженияПоБюджету",ФормироватьДвиженияПоБюджету);
	ПараметрыПравила.Вставить("ПериодДанных",        		 ПериодДанных);
	ПараметрыПравила.Вставить("ВидЯчейки",           		 ВидЯчейки);
	ПараметрыПравила.Вставить("Формула",             		 Формула);
	ПараметрыПравила.Вставить("ЗначенияПоУмолчанию", 		 ЗначенияПоУмолчанию);

	Возврат ПараметрыПравила;
	
КонецФункции // ОпределитьПараметрыПравила()
 
&НаСервере  
Процедура ЗаполнитьПравило(Правило, ОписаниеСтроки, ОписаниеКолонки)
	
	ПараметрыПравила = ОпределитьПараметрыПравила(ОписаниеСтроки, ОписаниеКолонки);
	ЗаполнитьЗначенияСвойств(Правило, ПараметрыПравила);
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьПравило(Правило, ОписаниеСтроки, ОписаниеКолонки)
	
	ПодготовитьПравило(Правило);
	
	РеквизитыПравила = "ФормироватьДвиженияПоБюджету,ВидЯчейки,Формула,ЭлементДанных,ИмяРесурса,ПериодДанных";
	ПараметрыПравила = ОпределитьПараметрыПравила(ОписаниеСтроки, ОписаниеКолонки);
	Изменен 		 = Ложь;
	
	РеквизитыПравила = СтрРазделить(РеквизитыПравила, ",");
	Для каждого Реквизит Из РеквизитыПравила Цикл
		Если НЕ Правило[Реквизит] = ПараметрыПравила[Реквизит] Тогда
			Правило[Реквизит] = ПараметрыПравила[Реквизит];
			Изменен = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ Правило.ЗначенияПоУмолчанию.Количество() = ПараметрыПравила.ЗначенияПоУмолчанию.Количество() Тогда
		Правило.ЗначенияПоУмолчанию = ПараметрыПравила.ЗначенияПоУмолчанию;
		Изменен = Истина;
	Иначе
		Правило.ЗначенияПоУмолчанию.СортироватьПоПредставлению();
		ПараметрыПравила.ЗначенияПоУмолчанию.СортироватьПоПредставлению();
		Для каждого ЭлементСписка Из ПараметрыПравила.ЗначенияПоУмолчанию Цикл
			
			Индекс         = ПараметрыПравила.ЗначенияПоУмолчанию.Индекс(ЭлементСписка);
			ЛевоЗначение   = ЭлементСписка.Значение;
			ПравоеЗначение = Правило.ЗначенияПоУмолчанию.Получить(Индекс).Значение;
			
			Ключи = СтрРазделить("ИмяАналитики,Аналитика,ЗначениеАналитики", ",");
			Для каждого Ключ Из Ключи Цикл
				Если НЕ ЛевоЗначение[Ключ] = ПравоеЗначение[Ключ] Тогда
					Правило.ЗначенияПоУмолчанию = ПараметрыПравила.ЗначенияПоУмолчанию;
					Изменен = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли;  
	
	Правило.Изменен = Изменен;
	
КонецПроцедуры
 
&НаКлиенте
Процедура КомандаСоздатьПравила(Команда)
	
	КомандаСоздатьПравилаНаСервере();
	РаскраситьЯчейки();
	Элементы.КомандаСоздатьПравила.Отображение = ОтображениеКнопки.Текст;
	Элементы.ДеревоСтруктураКонтекстноеМенюКомандаСоздатьПравила.Отображение = ОтображениеКнопки.Текст;
	Элементы.КомандаСоздатьПравила.ЦветРамки   = Новый Цвет();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПериоды(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоСтруктура.ТекущиеДанные;
	
	ТекТаблица = Неопределено;
	ТекВид = "";
	
	Если ТекущаяСтрока = Неопределено ИЛИ (НЕ ТекущаяСтрока = Неопределено И ТекущаяСтрока.Вид = "Таблица")  Тогда
		
		// Не понятно в строки или колонки добавлять периоды
		Возврат;
		
	ИначеЕсли ТекущаяСтрока.Вид = "Колонки" ИЛИ ТекущаяСтрока.Вид = "Колонка" Тогда
		
		Если ТекущаяСтрока.Вид = "Колонки" Тогда
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ЭлементСтруктуры;
			
		ИначеЕсли ТекущаяСтрока.Вид = "Колонка" Тогда	  
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ЭлементСтруктуры;
			
		КонецЕсли; 
		ТекВид = "Колонки";
		
	ИначеЕсли ТекущаяСтрока.Вид = "Строки" ИЛИ ТекущаяСтрока.Вид = "Строка" Тогда
		
		Если ТекущаяСтрока.Вид = "Строки" Тогда
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ЭлементСтруктуры;
			
		ИначеЕсли ТекущаяСтрока.Вид = "Строки" Тогда	  
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ЭлементСтруктуры;
			
		КонецЕсли; 
		ТекВид = "Строки";
		
	КонецЕсли; 
	
	ДопДанные = Новый Структура;
	ДопДанные.Вставить("Вид", ТекВид);
	ДопДанные.Вставить("Таблица", ТекТаблица);
	
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Оповещение = Новый ОписаниеОповещения("СоздатьПериодыЗавершение", ЭтотОбъект, ДопДанные);
	ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.ФормаСозданияЭлементовПериодов",,ЭтотОбъект,,,,Оповещение,РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "СоздатьПериодыЗавершение".
//
// Параметры:
// РезДанные - Структура
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура СоздатьПериодыЗавершение(РезДанные, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезДанные) = Тип("Структура") Тогда
	
		 СоздатьЭлементыПериоды(РезДанные, ДополнительныеДанные);
		 бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСтруктура, ДеревоСтруктура.ПолучитьЭлементы(), Истина);
		 
	КонецЕсли; 
	
КонецПроцедуры	// СоздатьПериодыЗавершение

&НаСервере
Процедура СоздатьЭлементыПериоды(ДанныеПериодов, ДополнительныеДанные)
	
	ДатаНач = бит_Бюджетирование.ПолучитьНачалоПериода(ДанныеПериодов.ДатаНачала, ДанныеПериодов.Периодичность);
	ДатаКон = бит_Бюджетирование.ПолучитьКонецПериода(ДанныеПериодов.ДатаОкончания, ДанныеПериодов.Периодичность);
	
	КоличествоИнтервалов = бит_Бюджетирование.РазностьДат(ДатаНач, ДатаКон, ДанныеПериодов.Периодичность)+1;
	
	Для Н = 1 По КоличествоИнтервалов Цикл
	
		ТекущийПериод = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ДатаНач,Н-1,ДанныеПериодов.Периодичность);
		
		НовЭл = Справочники.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.СоздатьЭлемент();
		НовЭл.Владелец = Объект.Ссылка;
		НовЭл.Таблица = ДополнительныеДанные.Таблица;
		НовЭл.ПериодДанных = ТекущийПериод;
		НовЭл.Наименование = бит_Бюджетирование.СформироватьПредставлениеПериода(ТекущийПериод, ДанныеПериодов.Периодичность);
		
		ПеречислениеВиды = Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов; 
		НовЭл.Вид = ?(ДополнительныеДанные.Вид = "Строки", ПеречислениеВиды.Строка, ПеречислениеВиды.Колонка);
		НовЭл.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
		НовЭл.КодСортировки = Справочники.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.МаксимальныйКодСортировки(НовЭл.Владелец, НовЭл.Вид)+10;		
		НовЭл.УстановитьНовыйКод();
		
		бит_ОбщегоНазначения.ЗаписатьСправочник(НовЭл,"","Ошибки",Ложь);
		
	КонецЦикла;  // по периодам
	
	ОбновитьДеревоСтруктуры();
	
КонецПроцедуры // СоздатьЭлементыПериоды()

&НаКлиенте
Процедура КомандаСоздатьЭлементыАналитики(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоСтруктура.ТекущиеДанные;
	
	ТекТаблица = Неопределено;
	ТекВид = "";
	
	Если ТекущаяСтрока = Неопределено ИЛИ (НЕ ТекущаяСтрока = Неопределено И ТекущаяСтрока.Вид = "Таблица")  Тогда
		
		// Не понятно в строки или колонки добавлять периоды
		Возврат;
		
	ИначеЕсли ТекущаяСтрока.Вид = "Колонки" ИЛИ ТекущаяСтрока.Вид = "Колонка" Тогда
		
		Если ТекущаяСтрока.Вид = "Колонки" Тогда
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ЭлементСтруктуры;
			
		ИначеЕсли ТекущаяСтрока.Вид = "Колонка" Тогда	  
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ЭлементСтруктуры;
			
		КонецЕсли; 
		ТекВид = "Колонки";
		
	ИначеЕсли ТекущаяСтрока.Вид = "Строки" ИЛИ ТекущаяСтрока.Вид = "Строка" Тогда
		
		Если ТекущаяСтрока.Вид = "Строки" Тогда
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ЭлементСтруктуры;
			
		ИначеЕсли ТекущаяСтрока.Вид = "Строка" Тогда	  
			
			ТекТаблица = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().ЭлементСтруктуры;
			
		КонецЕсли; 
		ТекВид = "Строки";
		
	КонецЕсли; 
	
	ДопДанные = Новый Структура;
	ДопДанные.Вставить("Вид", ТекВид);
	ДопДанные.Вставить("Таблица", ТекТаблица);
	
	РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Оповещение = Новый ОписаниеОповещения("СоздатьЭлементыАналитикиЗавершение", ЭтотОбъект, ДопДанные);
	
	
	ПарамФормы = Новый Структура;
	ИспользуемаяАналитика = Новый Структура;
	Для каждого СтрокаТаблицы Из Объект.ИспользованиеАналитики Цикл
	
	    ИспользуемаяАналитика.Вставить(СтрокаТаблицы.ИмяАналитики, СтрокаТаблицы.Аналитика);
	
	КонецЦикла; 
	ПарамФормы.Вставить("ИспользуемаяАналитика", ИспользуемаяАналитика);
	
	ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.ФормаСозданияЭлементовАналитики",ПарамФормы,ЭтотОбъект,,,,Оповещение,РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "СоздатьЭлементыАналитикиЗавершение".
//
// Параметры:
// РезДанные - Структура
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура СоздатьЭлементыАналитикиЗавершение(РезДанные, ДополнительныеДанные) Экспорт

	Если ТипЗнч(РезДанные) = Тип("Структура") Тогда
		
		 СоздатьЭлементыАналитики(РезДанные, ДополнительныеДанные);
		 бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСтруктура, ДеревоСтруктура.ПолучитьЭлементы(), Истина);
	
	КонецЕсли; 
	
КонецПроцедуры	// СоздатьЭлементыАналитикиЗавершение

&НаСервере
Процедура СоздатьЭлементыАналитики(ДанныеАналитики, ДополнительныеДанные)

	 Для каждого Эл Из ДанныеАналитики.ЭлементыЗаполнения Цикл
		 
		ЗначениеАналитики = Эл.Значение;
		Если ЗначениеАналитики.ЭтоГруппа Тогда
		
			 Продолжить;
		
		КонецЕсли;  
		 
		НовЭл = Справочники.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.СоздатьЭлемент();
		НовЭл.Владелец = Объект.Ссылка;
		НовЭл.Таблица = ДополнительныеДанные.Таблица;
		НовЭл.Наименование = Строка(ЗначениеАналитики);
		
		НоваяСтрока = НовЭл.ЗначенияПоУмолчанию.Добавить();
		НоваяСтрока.Аналитика = ДанныеАналитики.Аналитика;
		НоваяСтрока.ИмяАналитики = ДанныеАналитики.ИмяАналитики;
		НоваяСтрока.ЗначениеАналитики = ЗначениеАналитики;
		
		ПеречислениеВиды = Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов; 
		НовЭл.Вид = ?(ДополнительныеДанные.Вид = "Строки", ПеречислениеВиды.Строка, ПеречислениеВиды.Колонка);
		НовЭл.ВидЯчейки = Перечисления.бит_ВидыЯчеекПроизвольногоОтчета.Значение;
		НовЭл.КодСортировки = Справочники.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.МаксимальныйКодСортировки(НовЭл.Владелец, НовЭл.Вид)+10;	
		
		НовЭл.УстановитьНовыйКод();
		
		бит_ОбщегоНазначения.ЗаписатьСправочник(НовЭл,"","Ошибки",Ложь);
	 
	 КонецЦикла; 

	ОбновитьДеревоСтруктуры();
	 	 
КонецПроцедуры // СоздатьЭлементыАналитики()

&НаКлиенте
Процедура КомандаЭлементСтруктурыВверх(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоСтруктура.ТекущиеДанные;
    Если ТекущаяСтрока.Вид = "Колонка" ИЛИ ТекущаяСтрока.Вид = "Строка" Тогда
	
		КоллекцияЭлементов =  ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
		Инд = КоллекцияЭлементов.Индекс(ТекущаяСтрока);
		ИндПред = Инд-1;
		Сдвиг = -1;
		Если ИндПред < 0 Тогда
			
			ИндПред = КоллекцияЭлементов.Количество() - 1;
			Сдвиг =  КоллекцияЭлементов.Количество() - 1;
			
		КонецЕсли; 
		
		СтрокаПред = КоллекцияЭлементов.Получить(ИндПред);
		ПоменятьПорядокЭлементовСтруктуры(ТекущаяСтрока.ЭлементСтруктуры, СтрокаПред.ЭлементСтруктуры);
		
		КоллекцияЭлементов.Сдвинуть(Инд, Сдвиг);

		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЭлементСтруктурыВниз(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоСтруктура.ТекущиеДанные;
    Если ТекущаяСтрока.Вид = "Колонка" ИЛИ ТекущаяСтрока.Вид = "Строка" Тогда
	
		КоллекцияЭлементов =  ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
		Инд = КоллекцияЭлементов.Индекс(ТекущаяСтрока);
		ИндПред = Инд+1;
		Сдвиг = 1;
		Если ИндПред > (КоллекцияЭлементов.Количество()-1) Тогда
			
			ИндПред = 0;
			Сдвиг = -(КоллекцияЭлементов.Количество()-1);
			
		КонецЕсли; 
		
		СтрокаПред = КоллекцияЭлементов.Получить(ИндПред);
		ПоменятьПорядокЭлементовСтруктуры(ТекущаяСтрока.ЭлементСтруктуры, СтрокаПред.ЭлементСтруктуры);
		
		КоллекцияЭлементов.Сдвинуть(Инд, Сдвиг);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура меняет порядок элементов в дереве структуры.
//
&НаСервере
Процедура ПоменятьПорядокЭлементовСтруктуры(Эл1, Эл2)

	  ЭлОб1 = Эл1.ПолучитьОбъект();
	  ЭлОб2 = Эл2.ПолучитьОбъект();

	  КодСортировкиВрем = ЭлОб1.КодСортировки;
	  ЭлОб1.КодСортировки = ЭлОб2.КодСортировки;
	  ЭлОб2.КодСортировки = КодСортировкиВрем;
	  
	  бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлОб1,"","Ошибки",Истина);
	  бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлОб2,"","Ошибки",Истина);
	  
	  
КонецПроцедуры // ПоменятьПорядокЭлементовСтруктуры()

&НаКлиенте
Процедура КомандаЭлементСтруктурыУдалить(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоСтруктура.ТекущиеДанные;
	Если ТекущаяСтрока.Вид = "Колонка" 
		ИЛИ ТекущаяСтрока.Вид = "Строка"
		// Изменение кода. Начало. 13.02.2017{{
		ИЛИ ТекущаяСтрока.Вид = "Таблица" Тогда
		// Изменение кода. Конец. 13.02.2017}}
		УдалитьЭлементСтруктурыНаСервере(ТекущаяСтрока.ЭлементСтруктуры);
		бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоСтруктура, ДеревоСтруктура.ПолучитьЭлементы(), Истина);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементСтруктурыНаСервере(ЭлементСтруктуры)
	
	Если ЗначениеЗаполнено(ЭлементСтруктуры) 
		И ТипЗнч(ЭлементСтруктуры) = Тип("СправочникСсылка.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов") Тогда
		
		СпрОб = ЭлементСтруктуры.ПолучитьОбъект();
		СпрОб.УстановитьПометкуУдаления(Истина, Истина);
		
		ОбновитьДеревоСтруктуры();
		
	// Изменение кода. Начало. 13.02.2017{{
	ИначеЕсли ЗначениеЗаполнено(ЭлементСтруктуры)
		И ТипЗнч(ЭлементСтруктуры) = Тип("СправочникСсылка.бит_мпд_ТаблицыПроизвольныхОтчетов") Тогда 
	
		СпрОб = ЭлементСтруктуры.ПолучитьОбъект();
		СпрОб.УстановитьПометкуУдаления(Истина, Истина);
		
		УдалитьТаблицуИзСтруктуры(ЭлементСтруктуры);
		
		ОбновитьДеревоСтруктуры();
	
	КонецЕсли; 
	// Изменение кода. Конец. 13.02.2017}}
	
КонецПроцедуры // УдалитьЭлементСтруктурыНаСервере()

// Процедура удаляет таблицу из структуры. 
//
&НаСервере
Процедура УдалитьТаблицуИзСтруктуры(ТаблицаСтруктуры)

	// обновление таблиц в макете
	ТабВрем = Новый ТаблицаЗначений;
	ТабВрем.Колонки.Добавить("Таблица");
	ТабВрем.Колонки.Добавить("СтрокиТаблицы");
	ТабВрем.Колонки.Добавить("КолонкиТаблицы");
	
 	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ТаблицаСтруктуры);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_мпд_ТаблицыПроизвольныхОтчетов.Ссылка КАК Таблица,
	               |	бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.Вид КАК Вид,
	               |	бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.Ссылка КАК Элемент,
	               |	ЕСТЬNULL(бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.ПометкаУдаления, ИСТИНА) КАК ПометкаУдаления,
	               |	бит_мпд_ТаблицыПроизвольныхОтчетов.ВерхПред,
	               |	бит_мпд_ТаблицыПроизвольныхОтчетов.ЛевоПред
	               |ИЗ
	               |	Справочник.бит_мпд_ТаблицыПроизвольныхОтчетов КАК бит_мпд_ТаблицыПроизвольныхОтчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов КАК бит_мпд_ЭлементыТаблицПроизвольныхОтчетов
	               |		ПО бит_мпд_ТаблицыПроизвольныхОтчетов.Ссылка = бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.Таблица
	               |ГДЕ
	               |	бит_мпд_ТаблицыПроизвольныхОтчетов.Ссылка = &Таблица
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	бит_мпд_ТаблицыПроизвольныхОтчетов.Верх,
	               |	бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.КодСортировки
	               |ИТОГИ ПО
	               |	Таблица,
	               |	Вид
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Результат = Запрос.Выполнить();
	ВыборкаТаблицы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицы.Следующий() Цикл
		
		НоваяСтрока = ТабВрем.Добавить();
		НоваяСтрока.Таблица = ВыборкаТаблицы.Таблица;
		НоваяСтрока.СтрокиТаблицы = Новый Массив;
		НоваяСтрока.КолонкиТаблицы = Новый Массив;
		 
		ВыборкаВид = ВыборкаТаблицы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВид.Следующий() Цикл
		
			 Выборка = ВыборкаВид.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			 
			 Пока Выборка.Следующий() Цикл
				 
				 Если ЗначениеЗаполнено(Выборка.Элемент) Тогда
					 
					 Если Выборка.Вид = Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Колонка Тогда
						 
						 НоваяСтрока.КолонкиТаблицы.Добавить(Выборка.Элемент);
						 
					 Иначе	
						 
						 НоваяСтрока.СтрокиТаблицы.Добавить(Выборка.Элемент);
						 
					 КонецЕсли; 
					 
				 КонецЕсли; 
				   
			 КонецЦикла; // Выборка
		
		КонецЦикла;  // ВыборкаВид
	
	КонецЦикла; // ВыборкаТаблицы
	
	ЛинияГраницы = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, Ложь);	
	
	// Очистка отрисованной таблицы.
	ОчиститьТаблицуМакета(ТабВрем);
	
	СтрокиПравил = ПравилаЗаполнения.НайтиСтроки(Новый Структура("ТаблицаОтчета", ТаблицаСтруктуры));
	
	Для каждого эл Из СтрокиПравил Цикл
	
		ПравилаЗаполнения.Удалить(эл);
		фСписокУдаленныхПоказателей.Добавить(эл.Показатель);
	
	КонецЦикла; 
	
	Модифицированность = Истина;
	
КонецПроцедуры // УдалитьТаблицуИзСтруктуры()

&НаКлиенте
Процедура УстановитьСнятьФормироватьПроводки(Пометка)

	Массив = Новый Массив(); 
	ВыделенныеСтроки = Элементы.ДеревоСтруктура.ВыделенныеСтроки;
	Для каждого Элемент Из ВыделенныеСтроки Цикл
	
		СтрокаДерева = ДеревоСтруктура.НайтиПоИдентификатору(Элемент);
		Если ТипЗнч(СтрокаДерева.ЭлементСтруктуры) = Тип("СправочникСсылка.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов") 
		   И ЗначениеЗаполнено(СтрокаДерева.ЭлементСтруктуры) Тогда
			Массив.Добавить(СтрокаДерева.ЭлементСтруктуры);
		КонецЕсли; 
	КонецЦикла; 

	Если НЕ Массив.Количество() = 0 Тогда
		 УстановитьСнятьФормироватьПроводкиНаСервере(Массив, Пометка);
	КонецЕсли; 
	 
КонецПроцедуры // УстановитьСнятьФормироватьПроводки()

&НаСервереБезКонтекста
Процедура УстановитьСнятьФормироватьПроводкиНаСервере(Массив, Пометка)

	Для каждого ЭлементСтруктуры Из Массив Цикл
		НачатьТранзакцию();
		Объект = ЭлементСтруктуры.ПолучитьОбъект();
		Объект.ФормироватьДвиженияПоБюджету = Пометка;
		Попытка
			Объект.Заблокировать();
			Объект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Шаблон 		   = Нстр("ru = 'Не удалось записать элемент структуры отчета %1 по причине %2'");
			ТекстСообщения = СтрШаблон(Шаблон, Строка(ЭлементСтруктуры), ТекстСообщения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки; 
	КонецЦикла; 
	
КонецПроцедуры // УстановитьСнятьФормироватьПроводкиНаСервере(УстановитьСнятьФормироватьПроводки, Пометка)()
 
#КонецОбласти

#Область ТекущееПравило

&НаКлиентеНаСервереБезКонтекста
Функция НовоеОписаниеПравила()
	
	ОписаниеПравила = Новый Структура;
	ОписаниеПравила.Вставить("ИмяОбласти","");
	ОписаниеПравила.Вставить("ВидЯчейки",	 ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.ПустаяСсылка"));
	ОписаниеПравила.Вставить("ЭлементДанных",ПредопределенноеЗначение("Справочник.бит_ЭлементыДанных.ПустаяСсылка"));
	ОписаниеПравила.Вставить("ИмяРесурса","");
	ОписаниеПравила.Вставить("ФорматЧисел","");
	ОписаниеПравила.Вставить("Формула","");
	ОписаниеПравила.Вставить("ИсточникДанных","");
	ОписаниеПравила.Вставить("Настройка","");
	ОписаниеПравила.Вставить("Показатель","");
	ОписаниеПравила.Вставить("ФормироватьДвиженияПоБюджету",Ложь);
	ОписаниеПравила.Вставить("ПериодДанных",'0001-01-01');
	ОписаниеПравила.Вставить("ЗначенияПоУмолчанию",Новый СписокЗначений());
	ОписаниеПравила.Вставить("КолонкаТаблицыОтчета",ПредопределенноеЗначение("Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.ПустаяСсылка"));
	ОписаниеПравила.Вставить("СтрокаТаблицыОтчета", ПредопределенноеЗначение("Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.ПустаяСсылка"));	
	ОписаниеПравила.Вставить("ТаблицаОтчета",      	ПредопределенноеЗначение("Справочник.бит_мпд_ТаблицыПроизвольныхОтчетов.ПустаяСсылка"));
	ОписаниеПравила.Вставить("Шаблон","");
	ОписаниеПравила.Вставить("КоличественныйУчет",0);
	
	Возврат ОписаниеПравила;
	
КонецФункции // НовоеОписаниеПравила()
 
&НаКлиенте
Функция ОдинаковыеСвойстваПравил(Привязки)

	СвойстваПравил = НовоеОписаниеПравила(); 
	Для каждого КлючЗначение Из СвойстваПравил Цикл
	    СвойстваПравил[КлючЗначение.Ключ] = Новый Массив();
	КонецЦикла; 
	
	Для каждого Привязка Из Привязки Цикл
	    Если НЕ Привязка.Значение = Неопределено Тогда
		     Для каждого ЗначенияСвойства Из СвойстваПравил Цикл
			     ТекущееЗначение = Привязка.Значение[ЗначенияСвойства.Ключ];
			 	 Если ЗначенияСвойства.Значение.Найти(ТекущееЗначение) = Неопределено Тогда
				      ЗначенияСвойства.Значение.Добавить(ТекущееЗначение);
				 КонецЕсли; 
			 КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
	Шаблон 			   = НовоеОписаниеПравила();
	ОдинаковыеСвойства = Новый Структура(); 
	Для каждого ЗначенияСвойства Из СвойстваПравил Цикл
		Если ЗначенияСвойства.Значение.Количество() = 0 Тогда
			// Значение по-умолчанию.
		     ОдинаковыеСвойства.Вставить(ЗначенияСвойства.Ключ, Шаблон[ЗначенияСвойства.Ключ]);
		ИначеЕсли ЗначенияСвойства.Значение.Количество() = 1 Тогда	
		     ОдинаковыеСвойства.Вставить(ЗначенияСвойства.Ключ, ЗначенияСвойства.Значение[0]);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ОдинаковыеСвойства;
	
КонецФункции // ОдинаковыеСвойстваПравил()

&НаКлиенте
Функция НовыйСписокСвойствТекущегоПравила()

	СписокСвойств = ""
			  + "ИмяОбласти,"
			  + "ВидЯчейки,"
			  + "ЭлементДанных,"
			  + "ИмяРесурса,"
			  + "ФорматЧисел,"
			  + "Формула,"
			  + "ПериодДанных,"
			  + "ФормироватьДвиженияПоБюджету,"
			  + "КолонкаТаблицыОтчета,"
			  + "СтрокаТаблицыОтчета,"
			  + "Шаблон,"
			  + "ЗначенияПоУмолчанию,"
			  + "КоличественныйУчет";

	Возврат СписокСвойств;
	
КонецФункции // НовыйСписокСвойствТекущегоПравила()

// Копирует текущую строку правил заполнения в реквизиты формы,
// связанные с понелью "Текуще правило".
//
&НаКлиенте
Процедура НовоеТекущееПравило(СтрокаПравил = Неопределено)
	
	ТекущееПравилоЗначенияПоУмолчанию.Очистить();
	
	Свойства = Новый Структура(НовыйСписокСвойствТекущегоПравила());		  
	Если НЕ СтрокаПравил = Неопределено Тогда
	     ЗаполнитьЗначенияСвойств(Свойства, СтрокаПравил); 
	 КонецЕсли; 
	 
	Для каждого Свойство Из Свойства Цикл
		Если Свойство.Ключ = "ЗначенияПоУмолчанию" Тогда
			Если НЕ СтрокаПравил = Неопределено И СтрокаПравил.Свойство("ЗначенияПоУмолчанию") Тогда
				Для каждого ЭлементСписка Из СтрокаПравил.ЗначенияПоУмолчанию Цикл 	
					НоваяСтрока = ТекущееПравилоЗначенияПоУмолчанию.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСписка.Значение);	
				КонецЦикла;
			КонецЕсли; 
		Иначе
			ЭтотОбъект["ТекущееПравило" + Свойство.Ключ] = Свойство.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
	ТекущееПравилоЗначенияПоУмолчаниюКоличествоСтрок = ТекущееПравилоЗначенияПоУмолчанию.Количество();
	
КонецПроцедуры // НовоеТеущееПравило()

&НаКлиенте
Процедура ОтметитьИзмененияТекущегоПравила(ИмяСвойства)

	Элемент = ТекущееПравилоИзменения.НайтиПоЗначению(ИмяСвойства);
	Элемент.Пометка = Истина;
	
КонецПроцедуры // ОтметитьИзмененияТекущегоПравила()
 
&НаКлиенте
Процедура СохранитьТекущееПравило(Отказ = Ложь)
	
	Если НЕ ТекущееПравилоМодифицированность Тогда
		Возврат;	
	КонецЕсли; 
	
	Если ТекущееПравилоРежимОбразца И НЕ ЗначениеЗаполнено(ТекущееПравилоВидЯчейки) Тогда
	     // Пока не понятно, что с этим делать.
	Иначе
		
		ОбластьМакета = МакетОтчета.Области.Найти(ТекущееПравилоИмяОбласти);
		Если ОбластьМакета = Неопределено Тогда
			ОбластьМакета = МакетОтчета.Область(ОбластьТекущегоПравила);	
		КонецЕсли; 
		
		Ячейки = ЯчейкиОбласти(ОбластьМакета);
		Для каждого Ячейка Из Ячейки Цикл
	        Если Ячейки.Количество() = 1 Тогда
			    ИмяОбласти = ПолучитьИмяОбласти(ТекущееПравилоИмяОбласти, МакетОтчета, Объект);
			Иначе	
			    ИмяОбласти = ПолучитьИмяОбласти(Ячейка, МакетОтчета, Объект);
			КонецЕсли; 
			
			ОписаниеПравила = НовоеОписаниеПравила();
			ОписаниеПравила.Вставить("ИмяОбласти",ИмяОбласти);
			ОписаниеПравила.Вставить("ВидЯчейки",ТекущееПравилоВидЯчейки);
			ОписаниеПравила.Вставить("ЭлементДанных",ТекущееПравилоЭлементДанных);
			ОписаниеПравила.Вставить("ИмяРесурса",ТекущееПравилоИмяРесурса);
			ОписаниеПравила.Вставить("ФорматЧисел",ТекущееПравилоФорматЧисел);
			ОписаниеПравила.Вставить("Формула",ТекущееПравилоФормула);
			ОписаниеПравила.Вставить("ПериодДанных",ТекущееПравилоПериодДанных);
			ОписаниеПравила.Вставить("ФормироватьДвиженияПоБюджету",ТекущееПравилоФормироватьДвиженияПоБюджету);
			ОписаниеПравила.Вставить("КолонкаТаблицыОтчета",ТекущееПравилоКолонкаТаблицыОтчета);
			ОписаниеПравила.Вставить("СтрокаТаблицыОтчета",ТекущееПравилоСтрокаТаблицыОтчета);
			ОписаниеПравила.Вставить("Шаблон",ТекущееПравилоШаблон);
			ОписаниеПравила.Вставить("КоличественныйУчет",ТекущееПравилоКоличественныйУчет);
			
			СписокЗначенияПоУмолчанию = Новый СписокЗначений;
			Для каждого СтрокаТаблицы Из ТекущееПравилоЗначенияПоУмолчанию Цикл	
				Структура = Новый Структура;
				Структура.Вставить("ИмяАналитики",СтрокаТаблицы.ИмяАналитики);  
				Структура.Вставить("Аналитика",СтрокаТаблицы.Аналитика);  
				Структура.Вставить("ЗначениеАналитики",СтрокаТаблицы.ЗначениеАналитики);	
				
				СписокЗначенияПоУмолчанию.Добавить(Структура, СтрокаТаблицы.ИмяАналитики);
			КонецЦикла;
			ОписаниеПравила.Вставить("ЗначенияПоУмолчанию",	СписокЗначенияПоУмолчанию);
			
			Если ТекущееПравилоРежимОбразца Тогда
			     // Копирование измененных свойств.
				 // Если сюда попали, значит есть изменения, т.к. ТекущееПравилоМодифицированность
				 СтрокаИсточник = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения);
				 Если НЕ СтрокаИсточник = Неопределено Тогда // Редактирование существующей строки.
				     Для каждого Элемент Из ТекущееПравилоИзменения Цикл
						 Если НЕ Элемент.Пометка Тогда
							ОписаниеПравила[Элемент.Значение] = СтрокаИсточник[Элемент.Значение];
						 КонецЕсли; 
					 КонецЦикла; 
				 КонецЕсли; 
			КонецЕсли; 

			Если НЕ ПроверитьЗаполнениеТекущегоПравила(ОписаниеПравила) Тогда
				Отказ = Истина;
				Продолжить;	
			КонецЕсли; 
			
			СтрокаПравил 	= НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения);
			СписокСвойств 	= НовыйСписокСвойствТекущегоПравила();
			НовоеОформление = Ложь;
			Если СтрокаПравил = Неопределено Тогда
				ПодготовитьПравило(ОписаниеПравила);
				СтрокаПравил = ПравилаЗаполнения.Добавить();
				СтрокаПравил.ЭтоНовый = Истина;
				ЗаполнитьЗначенияСвойств(СтрокаПравил, ОписаниеПравила, СписокСвойств);
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаПравил, ОписаниеПравила, СписокСвойств);
				Если НЕ СтрокаПравил.ЭтоНовый Тогда
					СтрокаПравил.Изменен = Истина;
				КонецЕсли; 
			КонецЕсли;
			
			МакетОтчета.Область(Ячейка).Имя = ИмяОбласти;
			ОформитьЯчейкуТаблицыВызовСервера(ИмяОбласти, НовоеОформление);
		КонецЦикла; 	
	КонецЕсли;

	ТекущееПравилоМодифицированность = Ложь;
	Модифицированность 				 = Истина;
	Если НЕ ОбластьТекущегоПравила = МакетОтчета.ТекущаяОбласть.Имя Тогда
	     ОбластьТекущегоПравила = "";
	КонецЕсли; 
	
	УстановитьЗаголовокПанелиТекущееПравило();
	ПриАктивизацииОбластиМакета();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПанельюТекущееПравило()

	ЗаполненСпособКомпоновки = ЗначениеЗаполнено(Объект.СпособКомпоновки);

	Если ТекущееПравилоВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.ПустаяСсылка") Тогда
		
		Элементы.ГруппаТекущееПравилоЭлементДанных.Видимость = Ложь;
		Элементы.ТекущееПравилоФормула.Видимость       = Ложь;
		Элементы.ТекущееПравилоШаблон.Видимость        = Ложь;
		
	ИначеЕсли ТекущееПравилоВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Значение") Тогда 	
		
		Элементы.ГруппаТекущееПравилоЭлементДанных.Видимость = ЗаполненСпособКомпоновки;
		Элементы.ТекущееПравилоФормула.Видимость       = Ложь;
		Элементы.ТекущееПравилоШаблон.Видимость        = Ложь;
				
		Элементы.ТекущееПравилоИмяРесурса.АвтоОтметкаНезаполненного = ЗаполненСпособКомпоновки 
																	И ЗначениеЗаполнено(ТекущееПравилоЭлементДанных);
		Элементы.ТекущееПравилоИмяРесурса.ОтметкаНезаполненного     = ЗаполненСпособКомпоновки 
																	И ЗначениеЗаполнено(ТекущееПравилоЭлементДанных);
		
	ИначеЕсли ТекущееПравилоВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула") Тогда 	
		
		Элементы.ГруппаТекущееПравилоЭлементДанных.Видимость = Ложь;
		Элементы.ТекущееПравилоФормула.Видимость       = Истина;
		Элементы.ТекущееПравилоШаблон.Видимость        = Ложь;
		
		Элементы.ТекущееПравилоФормула.АвтоОтметкаНезаполненного = Истина;
		Элементы.ТекущееПравилоФормула.ОтметкаНезаполненного     = Истина;

	ИначеЕсли ТекущееПравилоВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Шаблон") Тогда	
		
		Элементы.ГруппаТекущееПравилоЭлементДанных.Видимость = Ложь;
		Элементы.ТекущееПравилоФормула.Видимость       = Ложь;
		Элементы.ТекущееПравилоШаблон.Видимость        = Истина;
		
	КонецЕсли; 	
	
	Элементы.ТекущееПравилоФорматЧисел.Видимость = ЗначениеЗаполнено(ТекущееПравилоВидЯчейки);
	
	Если ПустаяСтрока(ОбластьТекущегоПравила) Тогда
		Ячейки = ЯчейкиОбласти(МакетОтчета.ТекущаяОбласть);
	Иначе	
		Ячейки = ЯчейкиОбласти(МакетОтчета.Область(ОбластьТекущегоПравила));
	КонецЕсли;

	Если НЕ Ячейки.Количество() = 1 Тогда
		СтрокаПравил = Неопределено;
		Элементы.ТекущееПравилоИмяОбласти.Доступность = Ложь;
		Элементы.ПодобратьИмяОбласти.Доступность      = Ложь;
	Иначе
	    СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ТекущееПравилоИмяОбласти, ПравилаЗаполнения);
		Элементы.ТекущееПравилоИмяОбласти.Доступность = Истина;
		Элементы.ПодобратьИмяОбласти.Доступность 	  = (СтрокаПравил = Неопределено);
	КонецЕсли; 
	
	Элементы.ТекущееПравилоВидЯчейки.ОтметкаНезаполненного     = НЕ (СтрокаПравил = Неопределено);
	Элементы.ТекущееПравилоВидЯчейки.АвтоОтметкаНезаполненного = НЕ (СтрокаПравил = Неопределено);
	Элементы.ТекущееПравилоИмяОбласти.ОтметкаНезаполненного     = Истина;
	Элементы.ТекущееПравилоИмяОбласти.АвтоОтметкаНезаполненного = Истина;
	
	Строки = ДеревоСтруктура.ПолучитьЭлементы();
	Элементы.ГруппаТекущееПравилоСтруктура.Видимость = НЕ (Строки.Количество() = 0);
	
	ЭтоМСФО  = (Объект.ТипОтчета = ПредопределенноеЗначение("Перечисление.бит_ТипыПроизвольныхОтчетов.ОтчетностьМСФО"));
	Элементы.ТекущееПравилоФормироватьДвиженияПоБюджету.Видимость = Не ЭтоМСФО;	
	Элементы.ГруппаТекущееПравилоЗначенияПоУмолчанию.Видимость    = НЕ ЭтоМСФО;
	Элементы.ГруппаТекущееПравилоСтруктура.Видимость              = НЕ ЭтоМСФО;
	
	УправлениеПанельюТекущееПравилоФормированияДвижения();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПанельюТекущееПравилоФормированияДвижения()

	Если Элементы.ТекущееПравилоФормироватьДвиженияПоБюджету.Видимость Тогда
		Показать = ТекущееПравилоФормироватьДвиженияПоБюджету;
	Иначе
		Показать = Ложь;
	КонецЕсли; 
	
	Элементы.ГруппаТекущееПравилоФормированияДвижения.Видимость = Показать;	

КонецПроцедуры
  
&НаКлиенте
Процедура УстановитьЗаголовокПанелиТекущееПравило()

	Элементы.ГруппаТекущееПравилоЗаголовок.Заголовок = "Заполнение ячейки"
													 + ?(ТекущееПравилоМодифицированность," *","");

КонецПроцедуры // УстановитьЗаголовокПанелиТекущееПравило()
 
&НаКлиенте
Процедура ВывестиТекущееПравило()
	
	ОблМакета = МакетОтчета.ТекущаяОбласть;
	Если ОблМакета = Неопределено 
	 Или ТипЗнч(ОблМакета) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;

	// Инициализация.
	ТекущееПравилоМодифицированность = Ложь;
	Если НЕ ОбластьТекущегоПравила = ОблМакета.Имя Тогда
	     ОбластьТекущегоПравила = ОблМакета.Имя;
	КонецЕсли; 

	ТекущееПравилоИзменения.ЗагрузитьЗначения(СтрРазделить(НовыйСписокСвойствТекущегоПравила(), ","));
	
	Ячейки = ЯчейкиОбласти(МакетОтчета.Область(ОбластьТекущегоПравила));
	ТекущееПравилоРежимОбразца = НЕ (Ячейки.Количество() = 1);
	 
	Если ТекущееПравилоРежимОбразца Тогда
		
		// Показать только одинаковые поля, а потом сохранять изменения.
		Привязки = Новый Структура(); 
		Для каждого Ячейка Из Ячейки Цикл
			СтрокаПравил  = НайтиСтрокуПравилЗаполненияПоИмениОбласти(Ячейка, ПравилаЗаполнения);
			Если СтрокаПравил = Неопределено Тогда
				 СтрокаПравил = НовоеОписаниеПравила();
			КонецЕсли; 
			Привязки.Вставить(Ячейка,СтрокаПравил);
		КонецЦикла;

		СтрокаПравил = ОдинаковыеСвойстваПравил(Привязки);
		// Если выделенны ячейки с разным видом, тогда "тякущее правило" не используется.
		Если НЕ СтрокаПравил.Свойство("ВидЯчейки") Тогда
		    НовоеТекущееПравило(Неопределено);
			ТекущееПравилоИмяОбласти = ОбластьТекущегоПравила;
		Иначе	
			НовоеТекущееПравило(СтрокаПравил);
			ТекущееПравилоИмяОбласти = ОбластьТекущегоПравила;
		КонецЕсли; 
	Иначе
		СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(Ячейки[0], ПравилаЗаполнения);
		Если СтрокаПравил = Неопределено Тогда
		    СтрокаПравил = НовоеОписаниеПравила();
			СтрокаПравил.ИмяОбласти = ОбластьТекущегоПравила;
		КонецЕсли; 
		НовоеТекущееПравило(СтрокаПравил);
		ТекущееПравилоИмяОбласти = СтрокаПравил.ИмяОбласти;
	КонецЕсли; 
	
	УправлениеПанельюТекущееПравило();
	УстановитьЗаголовокПанелиТекущееПравило();
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьРесурсыСпособаКомпоновки(ИзменениеСпособаКомпоновки = Ложь)

	// Список ресурсов
	СписокРесурсов   = бит_МеханизмПолученияДанных.ПолучитьСписокПолейДляСпособаКомпоновки(Объект.СпособКомпоновки, "Ресурс", "СписокЗначений");
	ДоступныеРесурсы = СписокРесурсов.ВыгрузитьЗначения();
	Элементы.ТекущееПравилоИмяРесурса.СписокВыбора.ЗагрузитьЗначения(ДоступныеРесурсы);

	Если НЕ ДоступныеРесурсы.Количество() = 0 Тогда
		ТекущееПравилоИмяРесурса = ДоступныеРесурсы[0];
	КонецЕсли; 
	
	Если ИзменениеСпособаКомпоновки Тогда
		Для каждого СтрокаТаблицы Из ПравилаЗаполнения Цикл
			Изменен = Ложь;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлементДанных) Тогда
			     СтрокаТаблицы.ЭлементДанных = Неопределено;
				 Изменен = Истина;
			КонецЕсли; 
			Если ДоступныеРесурсы.Найти(СтрокаТаблицы.ИмяРесурса) = Неопределено Тогда
				СтрокаТаблицы.ИмяРесурса = "";
				Изменен = Истина;
			КонецЕсли; 
			Если НЕ СтрокаТаблицы.ЭтоНовый И Изменен Тогда
				СтрокаТаблицы.Изменен = Истина;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРесурсыСпособаКомпоновки()

&НаКлиентеНаСервереБезКонтекста 
Процедура ПодготовитьПравило(Правило)

	Если Правило.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Значение") Тогда
		
		Правило.Формула = "";		
		Правило.Шаблон  = ""; 
		
	ИначеЕсли Правило.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула") Тогда
		
		Правило.ЭлементДанных = ПредопределенноеЗначение("Справочник.бит_ЭлементыДанных.ПустаяСсылка");
		Правило.ИмяРесурса    = "";
		Правило.Шаблон   	  = "";
		
	ИначеЕсли Правило.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Шаблон") Тогда
		
		Правило.ЭлементДанных = ПредопределенноеЗначение("Справочник.бит_ЭлементыДанных.ПустаяСсылка");
		Правило.ИмяРесурса    = "";
		Правило.Формула 	  = "";
		
	КонецЕсли;	
	
КонецПроцедуры // ПодготовитьПравило()

&НаКлиенте
Функция ПроверитьЗаполнениеТекущегоПравила(Правило)
	
	Отказ = Ложь;
	Попытка
		Тест = Новый Структура(Правило.ИмяОбласти); 
	Исключение
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", 
								"Корректность", "Имя",,,"Не соответствует требованиям к именам переменных"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТекущееПравилоИмяОбласти",,Отказ);
	КонецПопытки; 
		
	ЗаполненСпособКомпоновки = ЗначениеЗаполнено(Объект.СпособКомпоновки);
	Если НЕ ЗначениеЗаполнено(ТекущееПравилоВидЯчейки) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",,"Вид ячейки"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТекущееПравилоВидЯчейки",,Отказ);
	КонецЕсли; 

	Если ТекущееПравилоВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Значение") 
	   И ЗаполненСпособКомпоновки И ЗначениеЗаполнено(ТекущееПравилоЭлементДанных) Тогда 	
		
		//Если НЕ ЗначениеЗаполнено(ТекущееПравилоЭлементДанных) Тогда
		//	ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",,"Элемент данных"); 
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТекущееПравилоЭлементДанных",,Отказ);
		//КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ТекущееПравилоИмяРесурса) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",,"Ресурс"); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТекущееПравилоИмяРесурса",,Отказ);
		КонецЕсли; 
		
	ИначеЕсли ТекущееПравилоВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула") Тогда 	
		
		Если НЕ ЗначениеЗаполнено(ТекущееПравилоФормула) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле",,"Формула"); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТекущееПравилоФормула",,Отказ);
		КонецЕсли; 

	КонецЕсли; 	
	
	Возврат НЕ Отказ;
	
КонецФункции // ПроверитьЗаполнениеТекущегоПравила()

&НаСервере
Процедура ЗаполнитьНастройкиАналитик()

	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	НастройкаАналитик = Новый ФиксированноеСоответствие(Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьНастройкуАналитик(СправочникОбъект));	
	Элементы.ТекущееПравилоЗначенияПоУмолчаниюАналитика.СписокВыбора.Очистить();
	
	Для каждого КлючЗначение Из НастройкаАналитик Цикл  		
		Настройка = КлючЗначение.Значение;
		Элементы.ТекущееПравилоЗначенияПоУмолчаниюАналитика.СписокВыбора.Добавить(КлючЗначение.Ключ, Настройка.Синоним);
	КонецЦикла;      	

КонецПроцедуры // ЗаполнитьНастройкиАналитик()

&НаКлиенте
Процедура ПриИзмененииТекущегоПравила(ИмяЭлемента)

	ТекущееПравилоМодифицированность = Истина;	
	ОбластьТекущегоПравила			 = МакетОтчета.ТекущаяОбласть.Имя;
	УстановитьЗаголовокПанелиТекущееПравило();
	
	ОтметитьИзмененияТекущегоПравила(СтрЗаменить(ИмяЭлемента,"ТекущееПравило", ""));
	
КонецПроцедуры // ПриИзмененииТекущегоПравила()

&НаКлиенте
Функция ВыполнятьАвтосохранениеТекущегоПравила()

	Возврат ЗначениеЗаполнено(ТекущееПравилоВидЯчейки)	

КонецФункции // ВыполнятьАвтосохранениеТекущегоПравила()

&НаКлиенте
Процедура ПриЗакрытииПанелиТекущееПравило()

	Если ТекущееПравилоМодифицированность Тогда
		
		ТекстВопроса = Нстр("ru = 'Сохранить настройку ячейки?'");
		Оповещение   = новый ОписаниеОповещения("ПриЗакрытииПанелиТекущееПравилоЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ТекущееПравилоОткрыта  = Ложь;
		ОбластьТекущегоПравила = "";
		УправлениеПанелямиФормы(ЭтотОбъект);	
	КонецЕсли;

КонецПроцедуры // ПриЗакрытииПанелиТекущееПравило()

// Обработчик оповещения процедуры "ПриЗакрытииПанелиТекущееПравило".
//
// Параметры:
//  Результат		 - КодВозвратаДиалога	 - ответ пользователя.
//  Дополнительно	 - Произвольный	 - произвольные данные.
//
&НаКлиенте
Процедура ПриЗакрытииПанелиТекущееПравилоЗавершение(Результат, Дополнительно) Экспорт 

	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		СохранитьТекущееПравило(Отказ);
		Если НЕ Отказ Тогда
			ТекущееПравилоОткрыта = Ложь;
			УправлениеПанелямиФормы(ЭтотОбъект);
		КонецЕсли; 
	Иначе
		ТекущееПравилоМодифицированность = Ложь;
		ПриЗакрытииПанелиТекущееПравило();
	КонецЕсли; 

КонецПроцедуры // ПриЗакрытииПанелиТекущееПравилоЗавершение()
 
#КонецОбласти 

&НаКлиенте
Процедура ОбработатьИзменениеИмениПараметра(Текст, Отказ)
	
	ТекущиеДанные = Элементы.СписокПараметров.ТекущиеДанные;
	
	Кандидат = бит_ОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Текст);
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(Кандидат) Тогда
		Попытка
			Результат = Новый Структура(Кандидат); 
		Исключение
			
			ИндексСтроки = СписокПараметров.Индекс(Элементы.СписокПараметров.ТекущиеДанные);
			
			Пояснение = НСтр("ru = 'Параметр не соответствует требованиям к именам переменных. "
								+ "Параметром  может быть любая последовательность букв, цифр и знаков подчеркивания, "
								+ "начинающаяся с буквы или знака подчеркивания.'");
			
			Поле = СтрШаблон("СписокПараметров[%1].Параметр", Формат(ИндексСтроки, "ЧН=0; ЧГ="));
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ",
								"Параметр",ИндексСтроки + 1,"Параметры", Пояснение);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,Поле,, Отказ);
		КонецПопытки; 
	КонецЕсли; 

	Если НЕ Отказ Тогда
		ТекущиеДанные.Параметр = Кандидат;
		Если Кандидат <> Текст Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Имя параметра изменено. Было ""%1"", стало ""%2"".'") , Текст, Кандидат);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Функция ЯчейкиОбласти(ОбластьЯчеек)

	Ячейки  	  = Новый Массив();
	ВысотаОбласти = ОбластьЯчеек.Низ;
	ШиринаОбласти = ОбластьЯчеек.Право; 
	Если НЕ ВысотаОбласти = 0 И НЕ ШиринаОбласти = 0 Тогда
		// Выделение строк или столбцов целиком не поддерживаетя.
		Для Ряд = ОбластьЯчеек.Верх По ВысотаОбласти Цикл
			Для Колонка = ОбластьЯчеек.Лево По ОбластьЯчеек.Право Цикл
				ТекущаяОбласть = "R" + Формат(Ряд, "ЧЦ=4; ЧГ=") + "C" + Формат(Колонка,"ЧЦ=4; ЧГ=");
				Ячейки.Добавить(МакетОтчета.Область(ТекущаяОбласть).Имя);
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Ячейки;
	
КонецФункции // ЯчейкиОбласти()

&НаКлиенте
Функция МодельЯчейкиОбласти(ОбластьЯчеек)

	ВысотаОбласти = ОбластьЯчеек.Низ;
	ШиринаОбласти = ОбластьЯчеек.Право;
	
	Рядов   = ВысотаОбласти - ОбластьЯчеек.Верх + 1;
	Колонок = ШиринаОбласти - ОбластьЯчеек.Лево + 1;
	Модель  = Новый Массив(Рядов, Колонок); 
    ИндексСтрок = 0;
	Если НЕ ВысотаОбласти = 0 И НЕ ШиринаОбласти = 0 Тогда
		// Выделение строк или столбцов целиком не поддерживаетя.
		Для Ряд = ОбластьЯчеек.Верх По ВысотаОбласти Цикл
			ИндексКолонок = 0;
			Для Колонка = ОбластьЯчеек.Лево По ОбластьЯчеек.Право Цикл
				ТекущаяОбласть = "R" + Формат(Ряд, "ЧЦ=4; ЧГ=") + "C" + Формат(Колонка,"ЧЦ=4; ЧГ=");
				Модель[ИндексСтрок][ИндексКолонок] = МакетОтчета.Область(ТекущаяОбласть).Имя;
				ИндексКолонок = ИндексКолонок + 1;
			КонецЦикла;
			ИндексСтрок = ИндексСтрок + 1;
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Модель;
	
КонецФункции // МодельЯчейкиОбласти()

// Осуществляет поиск связей обалстей макета и строк правил заполнения. 
//
// Параметры:
//  ОбластьЯчеек - Массив	 - имена областей макета.
// 
// Возвращаемое значение:
//  Структура, Неопределено - связь именованных областей и строк праил заполнения. 
//							Если хотя бы одно имя не связанно с правилами, то возвращется Неопределено. 
//
&НаКлиенте
Функция ЯчейкиПривязанныеКПравилам(ОбластьЯчеек)

	Привязки = Новый Структура(); 
	
	Отказ = Ложь;
	Для каждого ТекущаЯчейка Из ОбластьЯчеек Цикл
		
		//Если МакетОтчета.Области.Найти(ТекущаЯчейка) = Неопределено Тогда
		//    // Актально при проверке данных буфера обмена. Область может быть измерена, удалена.  
		//	ТекстСообщения = НСтр("ru = 'Область ""%1"" не найдена.'");
		//	ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущаЯчейка); 
		//    ПоказатьПредупреждение(,ТекстСообщения);
		//	Отказ = Истина;
		//	Прервать;
		//КонецЕсли; 
		
		СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ТекущаЯчейка, ПравилаЗаполнения);
		//Если СтрокаПравил = Неопределено Тогда
		//	ТекстСообщения = НСтр("ru = 'Для области ""%1"" не установлено правило заполнения.'");
		//	ТекстСообщения = СтрШаблон(ТекстСообщения, ТекущаЯчейка);
		//	ПоказатьПредупреждение(,ТекстСообщения);
		//	Отказ = Истина;
		//	Прервать;
		//Иначе
			Привязки.Вставить(ТекущаЯчейка, СтрокаПравил); 
		//КонецЕсли;
	КонецЦикла; 
	
	//Если Отказ Тогда
	//     Привязки = Неопределено;
	//КонецЕсли; 
	
	Возврат Привязки;
	
КонецФункции // ЯчейкиПривязанныеКПравилам()

&НаКлиенте
Функция ВсеЯчейкиПривязанны(Привязки)
// Эксперимент...
	НетОшибок  = Истина;
	Ошибки 	   = Новый Массив(); 
	
	Для каждого Связь Из Привязки Цикл
		Если НЕ бит_мпд_КлиентСервер.ИмяОбластиТиповое(Связь.Ключ) Тогда
			Если МакетОтчета.Области.Найти(Связь.Ключ) = Неопределено Тогда
				// Актально при проверке данных буфера обмена. Область может быть измерена, удалена.  
				ШаблонСообщения = НСтр("ru = 'Область ""%1"" не найдена.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Связь.Ключ); 
				Ошибки.Добавить(ТекстСообщения); 
			КонецЕсли; 
		КонецЕсли; 
		
		Если Связь.Значение = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Для области ""%1"" не установлено правило заполнения.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Связь.Ключ);
			Ошибки.Добавить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла; 

	Если НЕ Ошибки.Количество() = 0 Тогда
	    // Выводим 10 ошибок ...
		ОшибкиДляВывода = Новый Массив(); 
		Если Ошибки.Количество() > 10 Тогда
		     Для Индекс = 0 По 9 Цикл
			     ОшибкиДляВывода.Добавить(Ошибки.Получить(Индекс));
			 КонецЦикла; 
			 ШаблонСообщения = НСтр("ru = 'И еще %1 ошибок...'");
			 ТекстСообщения = СтрШаблон(ШаблонСообщения, Ошибки.Количество() - 9); 
			 ОшибкиДляВывода.Добавить(ТекстСообщения);
		Иначе
			 ОшибкиДляВывода = Ошибки;
		КонецЕсли; 
		ТекстСообщения = СтрСоединить(ОшибкиДляВывода, Символы.ПС);
		ПоказатьПредупреждение(,ТекстСообщения);
		НетОшибок = Ложь;
	КонецЕсли; 
	
	Возврат НетОшибок;
	
КонецФункции // ЯчейкиПривязанны()
  
&НаКлиенте
Функция ЭтоПрямоугольнаяОбласть(ОбластьМакета)
	
	Результат = бит_БюджетированиеКлиентСервер.ЭтоПрямоугольнаяОбласть(ОбластьМакета);
	Если НЕ Результат Тогда
		ТекстСообщения = Нстр("ru = 'Операция не приминима к выделению.'");
		ПоказатьПредупреждение(,ТекстСообщения); 				    
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции // ЭтоПрямоугольнаяОбласть()
 
&НаКлиенте
Процедура РаскраситьЯчейки()

	Если ПравилаЗаполнения.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого СтрокаПравил Из ПравилаЗаполнения Цикл
		
		ОблМакета = бит_мпд_Клиент.ПолучитьОбластьЯчеек(МакетОтчета, СтрокаПравил.ИмяОбласти);
		Если ОблМакета <> Неопределено Тогда
			
			Если СтрокаПравил.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Значение") Тогда
				 ОблМакета.ЦветФона = мЦветЗначение;
			ИначеЕсли СтрокаПравил.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула") Тогда	
				 ОблМакета.ЦветФона = мЦветФормула;
			ИначеЕсли СтрокаПравил.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Шаблон") Тогда
				 ОблМакета.ЦветФона = мЦветШаблон;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Модифицированность = Истина;

КонецПроцедуры // РаскраситьЯчейки()

&НаКлиенте
Процедура ПриАктивизацииОбластиМакета()

	ОблМакета = МакетОтчета.ТекущаяОбласть;
	Если ОблМакета = Неопределено Или ТипЗнч(ОблМакета) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = ОблМакета.Имя;	
	
	Если ВсеПравилаОткрыта Тогда
		Ячейки = ЯчейкиОбласти(ОблМакета);
		Если Ячейки.Количество() = 1 Тогда
			СтрокаПравил  = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения);
			Если НЕ СтрокаПравил = Неопределено Тогда
				Элементы.ПравилаЗаполнения.ТекущаяСтрока = СтрокаПравил.ПолучитьИдентификатор();
				ЭтотОбъект.ТекущийЭлемент = Элементы.МакетОтчета;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПометкиКнопокКоманднойПанели();
	
	// Редактор формул
	Если ЭтотОбъект.рфРедакторФормулОткрыт Тогда
		ПодключитьОбработчикОжидания("рф_АнализЗначенияВводФормул", 0.3, Истина);
	КонецЕсли;	
	
	Если НЕ ИмяОбласти = ОбластьТекущегоПравила И ТекущееПравилоОткрыта Тогда
		
		Отказ = Ложь;
		Если ТекущееПравилоМодифицированность Тогда
			СтрокаТекущегоПравила = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ОбластьТекущегоПравила, ПравилаЗаполнения);
			Если ВыполнятьАвтосохранениеТекущегоПравила() Тогда
				СохранитьТекущееПравило(Отказ);
				Если Отказ Тогда
					Области = Новый Массив();
					Области.Добавить(МакетОтчета.Область(ОбластьТекущегоПравила));
					Элементы.МакетОтчета.УстановитьВыделенныеОбласти(Области);
				КонецЕсли; 
			ИначеЕсли НЕ СтрокаТекущегоПравила = Неопределено Тогда
				ПередУдалениемСтрокиПравил(СтрокаТекущегоПравила, Отказ);
				Если Отказ Тогда
					Области = Новый Массив();
					Области.Добавить(МакетОтчета.Область(ОбластьТекущегоПравила));
					Элементы.МакетОтчета.УстановитьВыделенныеОбласти(Области);
				Иначе
					ПравилаЗаполнения.Удалить(СтрокаТекущегоПравила);
					//МакетОтчета.Область(ОбластьТекущегоПравила).Примечание.Текст = "";
					ОчиститьЯчейкуТаблицы(МакетОтчета.Область(ОбластьТекущегоПравила));
					ТекущееПравилоМодифицированность = Ложь;
					ОбластьТекущегоПравила = "";
				КонецЕсли; 
			Иначе	
				//МакетОтчета.Область(ОбластьТекущегоПравила).Примечание.Текст = "";
				ОчиститьЯчейкуТаблицы(МакетОтчета.Область(ОбластьТекущегоПравила));
				ТекущееПравилоМодифицированность = Ложь;
				ОбластьТекущегоПравила = "";
			КонецЕсли; 
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			ВывестиТекущееПравило();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ПриАктивизации()

&НаСервере
Процедура ВосстановитьТабличныйДокумент(ХранилищеМакета)
	
    // ХранилищеМакета - сохраненный в хранилище значений макет.
    СохраненныйМакет = ХранилищеМакета.Получить();
            
    // Загрузка табличного документа
    Если ТипЗнч(СохраненныйМакет) = Тип("ТабличныйДокумент") Тогда
        МакетОтчета.Очистить();
        
        МакетОтчета.ФиксацияСверху 	   = СохраненныйМакет.ФиксацияСверху;
		МакетОтчета.ФиксацияСлева 	   = СохраненныйМакет.ФиксацияСлева;
        МакетОтчета.ОриентацияСтраницы = СохраненныйМакет.ОриентацияСтраницы;
        МакетОтчета.Вывести(СохраненныйМакет);
    КонецЕсли;
    			
КонецПроцедуры // ВосстановитьТабличныйДокумент()

// Функция получает показатели отчета.
// 
// Параметры:
//  ВладелецИсточник  - СправочникСсылка.бит_НастройкиПроизвольныхОтчетов.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
&НаСервере
Функция ПолучитьПоказателиПроизвольныхОтчетов(ВладелецИсточник)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ВладелецИсточник);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.бит_ПоказателиПроизвольныхОтчетов КАК бит_ПоказателиПроизвольныхОтчетов
	|ГДЕ
	|	бит_ПоказателиПроизвольныхОтчетов.Владелец = &Владелец
	|";  				   
	Результат = Запрос.Выполнить();			   

	Возврат Результат;
	
КонецФункции // ПолучитьПоказателиПроизвольныхОтчетов()

// Процедура копирует показатели произвольных отчетов.
// 
// Параметры:
//  РезультатПоказатели  		- РезультатЗапроса.
//  СоответствиеЭлементовДанных - Соответствие.
// 
&НаСервере
Процедура КопироватьПоказателиПроизвольныхОтчетов(РезультатПоказатели, СоответствиеЭлементовДанных, СоответствиеЭлементовТаблиц)

	Выборка = РезультатПоказатели.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НовыйПоказатель = Справочники.бит_ПоказателиПроизвольныхОтчетов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйПоказатель, Выборка);
		НовыйПоказатель.Владелец = Объект.Ссылка;
		
		Если СоответствиеЭлементовДанных <> Неопределено Тогда 		
			НовыйПоказатель.ЭлементДанных = СоответствиеЭлементовДанных.Получить(Выборка.ЭлементДанных);		
		КонецЕсли;
		
		Если НЕ СоответствиеЭлементовТаблиц = Неопределено Тогда
		
			НовыйПоказатель.КолонкаТаблицыОтчета = СоответствиеЭлементовТаблиц[Выборка.КолонкаТаблицыОтчета];
			НовыйПоказатель.СтрокаТаблицыОтчета = СоответствиеЭлементовТаблиц[Выборка.СтрокаТаблицыОтчета];
		
		КонецЕсли; 
		
		бит_ОбщегоНазначения.ЗаписатьСправочник(НовыйПоказатель, , "Ошибки");
		
	КонецЦикла; 

КонецПроцедуры // КопироватьПоказателиПроизвольныхОтчетов()

// Процедура копирует таблицы и элементы таблиц отчета. 
//
// Параметры:
//  СоответствиеЭлементовДанных - Соответствие.
//
&НаСервере
Функция КопироватьСтруктуруОтчета(ВладелецИсточник, СоответствиеЭлементовДанных)

	// копирование таблиц
	СоответствиеТаблиц = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ВладелецИсточник);
	Запрос.Текст = "ВЫБРАТЬ
	               |	*
				   |ИЗ
	               |	Справочник.бит_мпд_ТаблицыПроизвольныхОтчетов КАК ТаблицыОтчетов
	               |ГДЕ
	               |	ТаблицыОтчетов.Владелец = &Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	 *
				   |ИЗ
	               |	Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов КАК ЭлементыТаблиц
	               |ГДЕ
	               |	ЭлементыТаблиц.Владелец = &Владелец И НЕ ЭлементыТаблиц.ПометкаУдаления";
				   
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 НоваяТаблица = Справочники.бит_мпд_ТаблицыПроизвольныхОтчетов.СоздатьЭлемент();
		 ЗаполнитьЗначенияСвойств(НоваяТаблица, Выборка);
		 
		 НоваяТаблица.Владелец = Объект.Ссылка;
		 НоваяТаблица.УстановитьНовыйКод();
		 
		 флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(НоваяТаблица, , "Ошибки",Истина);
		 
		 Если флВыполнено Тогда
		 
		 	  СоответствиеТаблиц.Вставить(Выборка.Ссылка, НоваяТаблица.Ссылка);
		 
		 КонецЕсли; 
		 
	КонецЦикла; 

	// копирование элементов таблиц
	СоответствиеЭлементовТаблиц = Новый Соответствие;
	
	Выборка = МассивРезультатов[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 НовыйЭлемент = Справочники.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов.СоздатьЭлемент();
		 ЗаполнитьЗначенияСвойств(НовыйЭлемент, Выборка);
		 НовыйЭлемент.Владелец = Объект.Ссылка;
		 НовыйЭлемент.Таблица = СоответствиеТаблиц[Выборка.Таблица];
		 
		 Если НЕ ЗначениеЗаполнено(НовыйЭлемент.Таблица) Тогда
		 
		 	Продолжить;
		 
		 КонецЕсли; 
		 
		 Если НЕ СоответствиеЭлементовДанных = Неопределено Тогда
			 
			 Если ЗначениеЗаполнено(Выборка.ЭлементДанных) Тогда
				 
				 НовыйЭлемент.ЭлементДанных = СоответствиеЭлементовДанных[Выборка.ЭлементДанных];
				 
			 КонецЕсли; 
			 
		 КонецЕсли; 
		 
		 НовыйЭлемент.УстановитьНовыйКод();
		 
		 флВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(НовыйЭлемент, , "Ошибки",Истина);
		 
		 Если флВыполнено Тогда
		 
		 	  СоответствиеЭлементовТаблиц.Вставить(Выборка.Ссылка, НовыйЭлемент.Ссылка);
		 
		 КонецЕсли; 
		 
	КонецЦикла; 
	
	Возврат СоответствиеЭлементовТаблиц;
	
КонецФункции // КопироватьСтруктуруОтчета()

&НаСервере
Процедура СкопироватьДанныеИзЗначенияКопирования(СтруктураРежимаКопирования)
    		
	КопироватьПЗ = СтруктураРежимаКопирования.КопироватьПравилаЗаполнения;
	КопироватьСК = СтруктураРежимаКопирования.КопироватьСпособКомпоновки;
	
	Если КопироватьПЗ Или КопироватьСК Тогда
		
		СоответствиеЭлементовДанных = Неопределено;
		
		Если КопироватьСК Тогда
			
			// Копирование способа компоновки
			НовыйСпособКомпоновки = Объект.СпособКомпоновки.Скопировать();
			НовыйСпособКомпоновки.Наименование = бит_ОбщегоНазначения.ПолучитьНаименованиеКопии(Объект.СпособКомпоновки.Наименование, Объект.СпособКомпоновки.Ссылка.Метаданные());
			
			ОбъектСпособКомпоновки = Объект.СпособКомпоновки.ПолучитьОбъект();
			
			флЗаписьСкВыполнена = бит_ОбщегоНазначения.ЗаписатьСправочник(НовыйСпособКомпоновки, , "Нет"); 				
			Если флЗаписьСкВыполнена Тогда  						
				РезультатЭлементыДанных = ОбъектСпособКомпоновки.ПолучитьЭлементыДанных(Объект.СпособКомпоновки);
				// Новый способ компоновки данных
				Объект.СпособКомпоновки  = НовыйСпособКомпоновки.Ссылка;
				// Копирование элементов данных
				НовыйСпособКомпоновки.СкопироватьЭлементыДанных(РезультатЭлементыДанных, Объект.СпособКомпоновки, СоответствиеЭлементовДанных);
			Иначе
				// Если не удалось записать новый способ компоновки, то и записывать правила заполнения нет смысла.
				КопироватьПЗ = Ложь;
			КонецЕсли; // Записан новый способ компоновки
			
			Модифицированность = Истина;
			
		КонецЕсли; // Нужно копировать способ компоновки				
		
		Если КопироватьПЗ Тогда
			
			// Запись настройки произвольного отчета
			СпрОб = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_НастройкиПроизвольныхОтчетов"));
			СпрОб.ХранилищеМакета = Новый ХранилищеЗначения(МакетОтчета);
			флЗаписьВыполнена = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб, , "Нет");
			ЗначениеВДанныеФормы(СпрОб, Объект);
			
			Если флЗаписьВыполнена Тогда
				
				// копирование структуры отчета
				СоответствиеЭлементовТаблиц = КопироватьСтруктуруОтчета(фЗначениеКопирования, СоответствиеЭлементовДанных);				
				
				РезультатПоказатели = ПолучитьПоказателиПроизвольныхОтчетов(фЗначениеКопирования); 					
				Если Не РезультатПоказатели.Пустой() Тогда
					// Копирование правил заполнения
					КопироватьПоказателиПроизвольныхОтчетов(РезультатПоказатели, СоответствиеЭлементовДанных, СоответствиеЭлементовТаблиц);
					// Таблица правил
					ЗаполнитьПравилаЗаполнения();
				КонецЕсли; // Есть показатели для копирования
				
				ОбновитьДеревоСтруктуры();
				
			Иначе
				
				Модифицированность = Истина;	
				
			КонецЕсли;

		КонецЕсли; // Нужно копировать правила заполнения
				
	КонецЕсли; // Нужно копировать способ компоновки и/или правила заполнения.
	
	фЗначениеКопирования = Неопределено;
	
КонецПроцедуры // СкопироватьДанныеИзЗначенияКопирования()

// Процедура заполняет таблицу правил заполнения.
// 
&НаСервере
Процедура ЗаполнитьПравилаЗаполнения()
	
	ПравилаЗаполнения.Очистить();
	
	ТаблицаПоказатели = Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьПоказателиОтчета(Объект.Ссылка);	
	МассивПоказатели  = ТаблицаПоказатели.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказатели);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_ДанныеПроизвольныхОтчетов.ПоказательОтчета
	|ИЗ
	|	РегистрСведений.бит_ДанныеПроизвольныхОтчетов КАК бит_ДанныеПроизвольныхОтчетов
	|ГДЕ
	|	бит_ДанныеПроизвольныхОтчетов.ПоказательОтчета В(&МассивПоказателей)";
	Результат = Запрос.Выполнить();   
	
	СохраненныеПоказатели = Результат.Выгрузить().ВыгрузитьКолонку("ПоказательОтчета");
	
	Для каждого СтрокаТаблицы Из ТаблицаПоказатели Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ТаблицаОтчета)
			И СтрокаТаблицы.ТаблицаОтчета.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ПравилаЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ИмяОбласти = СтрокаТаблицы.Код;
		НоваяСтрока.Показатель = СтрокаТаблицы.Ссылка;
		Область = МакетОтчета.Области.Найти(НоваяСтрока.ИмяОбласти);
		Если НЕ Область = Неопределено Тогда
			НоваяСтрока.Шаблон = Область.Текст;
		КонецЕсли; 		 
		
		Для каждого СтрокаЗначения Из СтрокаТаблицы.ЗначенияПоУмолчанию Цикл
			
			СтрАналитика = Новый Структура("ИмяАналитики, Аналитика, ЗначениеАналитики"
			                                 , СтрокаЗначения.ИмяАналитики
											 , СтрокаЗначения.Аналитика
											 , СтрокаЗначения.ЗначениеАналитики);
											 
			НоваяСтрока.ЗначенияПоУмолчанию.Добавить(СтрАналитика, СтрокаЗначения.ИмяАналитики);
		
		КонецЦикла; 
		
		Если Не СохраненныеПоказатели.Найти(СтрокаТаблицы.Ссылка) = Неопределено Тогда  		
			НоваяСтрока.ЕстьСсылки = Истина;		
		КонецЕсли;
		
		ЭлементДанныхСтроки = НоваяСтрока.ЭлементДанных;
		Если ЗначениеЗаполнено(ЭлементДанныхСтроки) Тогда
			НоваяСтрока.ИсточникДанных = ЭлементДанныхСтроки.ИсточникДанных;
			Если ЭлементДанныхСтроки.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула Тогда
				НоваяСтрока.Настройка = ЭлементДанныхСтроки.Формула;
			Иначе
				НоваяСтрока.Настройка = ЭлементДанныхСтроки.ПредставлениеОтбора;
		    КонецЕсли;
        КонецЕсли;
        
        //НоваяСтрока.Изменен = ИзмененыПравила;
			
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТаблицуПравил()

// Процедура пытается подобрать поле компоновки.
// 
// Параметры:
//  Ид  - Число
// 
&НаСервере
Процедура ПодобратьПолеКомпоновкиПоАналитике(Ид)
	
	ТекущиеДанные = Объект.ИспользованиеАналитики.НайтиПоИдентификатору(Ид);
	Если ТекущиеДанные = Неопределено Тогда
	 	Возврат;	
	КонецЕсли; 
	
	флНашли = Ложь;
	КодАналитики = СокрЛП(ТекущиеДанные.Аналитика.Код);
	
	МассивСтрок = Объект.СпособКомпоновки.КолонкиТаблицы.НайтиСтроки(Новый Структура("ИмяКолонки", КодАналитики));  
  	Если МассивСтрок.Количество() > 0 Тогда	  
  		ТекущиеДанные.ИмяПоля = МассивСтрок[0].ИмяКолонки;
		флНашли = Истина;   	  
  	КонецЕсли; 
  
  	Если Не флНашли Тогда
  
	  	Для каждого СтрокаТаблицы Из Объект.СпособКомпоновки.КолонкиТаблицы Цикл
			
			ТекОписание = СтрокаТаблицы.ОписаниеТипов.Получить();			
			Если ТипЗнч(ТекОписание) <> Тип("ОписаниеТипов") Тогда				
				Продолжить;    				
			КонецЕсли; 
			
			МассивТипов = ТекОписание.Типы();			
			Для каждого ТекущийТип Из МассивТипов Цикл
				
				Если ТекущиеДанные.Аналитика.ТипЗначения.СодержитТип(ТекущийТип) Тогда 					
					ТекущиеДанные.ИмяПоля = СтрокаТаблицы.ИмяКолонки;   
					Возврат;                 					
				КонецЕсли; 
				
			КонецЦикла; 
		
		КонецЦикла; // По колонкам способов компоновки
  
  	КонецЕсли;

КонецПроцедуры // ПодобратьПолеКомпоновкиПоАналитике()

&НаКлиенте
Процедура ВыполнитьСдвигФормулы(ОписаниеФормулы, СтруктураПараметров, Рядов, Колонок)

	// Напишем формулу	
	Если РежимСдвигаФормулы = 0 Тогда
		Возврат;
	КонецЕсли; 

	Формула   = ОписаниеФормулы.Формула;
	Аргументы = ОписаниеФормулы.Аргументы;
	Отказ     = Ложь;
	Для каждого Аргумент Из Аргументы Цикл
	
		ОбластьАргумент = Аргумент.Значение; 
		
		Лево   = ОбластьАргумент.Лево+?(РежимСдвигаФормулы = 3 ИЛИ РежимСдвигаФормулы = 1, Колонок, 0);
		Верх   = ОбластьАргумент.Верх+?(РежимСдвигаФормулы = 3 ИЛИ РежимСдвигаФормулы = 2, Рядов, 0);
		Обл    = МакетОтчета.Область(Верх, Лево, Верх, Лево);
		
		Результат = ВалидностьАргумента(Обл.Имя); 
		Если НЕ Результат.Отказ Тогда
			Формула = СтрЗаменить(Формула, Аргумент.Ключ, Обл.Имя);
		Иначе
			Отказ = Истина;
		КонецЕсли; 
	КонецЦикла;
	СтруктураПараметров.Формула = Формула;
		
	Если Отказ Тогда
		ТекстСообщения = Нстр("ru = 'Формула скопирована по образцу без учета настроек сдвига'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОписаниеАргументов(ОписаниеФормулы, Аргументы)
		
	Отказ = Ложь;
	Для каждого Аргумент Из Аргументы Цикл
				
		Результат = ВалидностьАргумента(Аргумент);
		Отказ     = Результат.Отказ;
		Если НЕ Отказ Тогда
			Область 		  = Результат.Область;
			ОписаниеАргумента = Новый Структура(); 
			ОписаниеАргумента.Вставить("Верх",  Область.Верх);
			ОписаниеАргумента.Вставить("Низ",   Область.Низ);
			ОписаниеАргумента.Вставить("Лево",  Область.Лево);
			ОписаниеАргумента.Вставить("Право", Область.Право);
			Попытка
				ОписаниеФормулы.Аргументы.Вставить(Аргумент, ОписаниеАргумента);
			Исключение
				ТекстСообщения = СтрШаблон(Нстр("ru = 'Имя аргумента %1 не соотвествует требованиям'"), Аргумент);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);				   
			КонецПопытки; 		
		КонецЕсли; 
	КонецЦикла; 
	
	ОписаниеФормулы.Вставить("Отказ", Отказ);

КонецПроцедуры

&НаКлиенте
Функция ВалидностьАргумента(Аргумент)

	Отказ 	= Ложь;	
	Правило = Неопределено;
	Область = МакетОтчета.Области.Найти(Аргумент);
	
	Если Область = Неопределено Тогда
		ТекстСообщения = СтрШаблон(Нстр("ru = 'Не задано имя для области %1'"), Аргумент);  				   
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ); 
	КонецЕсли; 
	
	Если НЕ Область = Неопределено Тогда
		Правило = НайтиСтрокуПравилЗаполненияПоИмениОбласти(Аргумент, ПравилаЗаполнения);
		Если Правило = Неопределено Тогда			
			ТекстСообщения = СтрШаблон(Нстр("ru = 'Не найдено правило заполнения для области %1'"),Аргумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);				   
		КонецЕсли; 
	КонецЕсли; 
	
	Результат = Новый Структура(); 
	Результат.Вставить("Отказ",   Отказ);
	Результат.Вставить("Правило", Правило);
	Результат.Вставить("Область", Область);
	
	Возврат Результат;
	
КонецФункции // ОбработатьАргумент()

&НаКлиенте
Процедура ОбновитьПометкиКнопокКоманднойПанели()
	
	#Если Не ВебКлиент Тогда
		
	Область = Элементы.МакетОтчета.ТекущаяОбласть;
	Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	// Шрифт
	Шрифт = Область.Шрифт;
	Элементы.МакетОтчетаЖирный.Пометка = Шрифт <> Неопределено И Шрифт.Жирный = Истина;
	Элементы.МакетОтчетаНаклонный.Пометка = Шрифт <> Неопределено И Шрифт.Наклонный = Истина;
	Элементы.МакетОтчетаПодчеркивание.Пометка = Шрифт <> Неопределено И Шрифт.Подчеркивание = Истина;
	Элементы.МакетОтчетаЗачеркивание.Пометка = Шрифт <> Неопределено И Шрифт.Зачеркивание = Истина;
	
	// Горизонтальное положение
	Элементы.МакетОтчетаВыровнятьВлево.Пометка = Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Элементы.МакетОтчетаВыровнятьПоЦентру.Пометка = Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Элементы.МакетОтчетаВыровнятьВправо.Пометка = Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	Элементы.МакетОтчетаВыровнятьПоШирине.Пометка = Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.ПоШирине;
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ШагИзмененияРазмераШрифтаУвеличение(Размер)
	
	Если Размер = -1 Тогда
		Возврат 10;
	КонецЕсли;
	
	Если Размер < 10 Тогда
		Возврат 1;
	ИначеЕсли 10 <= Размер И  Размер < 20 Тогда
		Возврат 2;
	ИначеЕсли 20 <= Размер И  Размер < 48 Тогда
		Возврат 4;
	ИначеЕсли 48 <= Размер И  Размер < 72 Тогда
		Возврат 6;
	ИначеЕсли 72 <= Размер И  Размер < 96 Тогда
		Возврат 8;
	Иначе
		Возврат Окр(Размер / 10);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ШагИзмененияРазмераШрифтаУменьшение(Размер)
	
	Если Размер = -1 Тогда
		Возврат -8;
	КонецЕсли;
	
	Если Размер <= 11 Тогда
		Возврат 1;
	ИначеЕсли 11 < Размер И Размер <= 23 Тогда
		Возврат 2;
	ИначеЕсли 23 < Размер И Размер <= 53 Тогда
		Возврат 4;
	ИначеЕсли 53 < Размер И Размер <= 79 Тогда
		Возврат 6;
	ИначеЕсли 79 < Размер И Размер <= 105 Тогда
		Возврат 8;
	Иначе
		Возврат Окр(Размер / 11);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СписокОбластейДляИзмененияШрифта()
	
	Результат = Новый Массив;
	
	Для Каждого ОбрабатываемаяОбласть Из Элементы.МакетОтчета.ПолучитьВыделенныеОбласти() Цикл
		Если ОбрабатываемаяОбласть.Шрифт <> Неопределено Тогда
			Результат.Добавить(ОбрабатываемаяОбласть);
			Продолжить;
		КонецЕсли;
		
		ОбрабатываемаяОбластьВерх = ОбрабатываемаяОбласть.Верх;
		ОбрабатываемаяОбластьНиз = ОбрабатываемаяОбласть.Низ;
		ОбрабатываемаяОбластьЛево = ОбрабатываемаяОбласть.Лево;
		ОбрабатываемаяОбластьПраво = ОбрабатываемаяОбласть.Право;
		
		Если ОбрабатываемаяОбластьВерх = 0 Тогда
			ОбрабатываемаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ОбрабатываемаяОбластьНиз = 0 Тогда
			ОбрабатываемаяОбластьНиз = МакетОтчета.ВысотаТаблицы;
		КонецЕсли;
		
		Если ОбрабатываемаяОбластьЛево = 0 Тогда
			ОбрабатываемаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ОбрабатываемаяОбластьПраво = 0 Тогда
			ОбрабатываемаяОбластьПраво = МакетОтчета.ШиринаТаблицы;
		КонецЕсли;
		
		Если ОбрабатываемаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ОбрабатываемаяОбластьВерх = ОбрабатываемаяОбласть.Низ;
			ОбрабатываемаяОбластьНиз = МакетОтчета.ВысотаТаблицы;
		КонецЕсли;
			
		Для НомерКолонки = ОбрабатываемаяОбластьЛево По ОбрабатываемаяОбластьПраво Цикл
			ШиринаКолонки = Неопределено;
			Для НомерСтроки = ОбрабатываемаяОбластьВерх По ОбрабатываемаяОбластьНиз Цикл
				Ячейка = МакетОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ОбрабатываемаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
					Если ШиринаКолонки = Неопределено Тогда
						ШиринаКолонки = Ячейка.ШиринаКолонки;
					КонецЕсли;
					Если Ячейка.ШиринаКолонки <> ШиринаКолонки Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Если Ячейка.Шрифт <> Неопределено Тогда
					Результат.Добавить(Ячейка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
 
&НаКлиенте
Процедура ВставитьНастройку(ОблМакета, СтрокаПравилИсточник, ОбластьИсточник, ЭтоФормула, СписокСвойств = "")

	Если ЭтоФормула Тогда
						
		ОписаниеФормулы = Новый Структура;
		ОписаниеФормулы.Вставить("Формула",	 "");
		ОписаниеФормулы.Вставить("Аргументы",Новый Структура());
		ОписаниеФормулы.Вставить("Отказ",	 Ложь);
		
		ОписаниеФормулы.Формула   = СтрокаПравилИсточник.Формула;
		Аргументы 				  = бит_МеханизмПолученияДанных.РазобратьФормулу(СтрокаПравилИсточник.Формула);	
		УстановитьОписаниеАргументов(ОписаниеФормулы, Аргументы);
		
		Если ОписаниеФормулы.Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 

	Строк 		 = ОблМакета.Верх - ОбластьИсточник.Верх; 
	Колонок 	 = ОблМакета.Лево - ОбластьИсточник.Лево;
	РежимОбразца = Ложь;
	
	Если Строк = 0 И Колонок = 0 Тогда
		// Среди ячеек-приемников встретилась ячейка-источник.
		РежимОбразца = Истина;
	КонецЕсли; 
	
	Для Ряд = ОблМакета.Верх По ОблМакета.Низ Цикл
		Для Колонка = ОблМакета.Лево По ОблМакета.Право Цикл
			
			ТекущаяОбласть = "R" + Формат(Ряд, "ЧЦ=4; ЧГ=") + "C" + Формат(Колонка,"ЧЦ=4; ЧГ=");
			ИмяОбласти     = ПолучитьИмяОбласти(МакетОтчета.Область(ТекущаяОбласть).Имя, МакетОтчета, Объект);
			МакетОтчета.Область(ТекущаяОбласть).Имя = ИмяОбласти;
			
			// Строка, куда копируются данные
			СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения);
			
			СтруктураПараметров = ПодготовитьПараметрыФормыРедактированияПравила();
			Если РежимОбразца Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаПравил, ,СписокСвойств);
				ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаПравилИсточник, СписокСвойств);
				СтруктураПараметров.Вставить("ИмяПараметраПоследнее", СтрокаПравил.Шаблон);	
			Иначе
				ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаПравилИсточник, ,"ИмяОбласти, Показатель");
				Если НЕ СтрокаПравил = Неопределено Тогда
					СтруктураПараметров.Вставить("Показатель", СтрокаПравил.Показатель);
				КонецЕсли; 
				СтруктураПараметров.Вставить("ИмяПараметраПоследнее", СтрокаПравилИсточник.Шаблон);	
			КонецЕсли; 
			
			//СтруктураПараметров.Шаблон     		 = МакетОтчета.Область(ИмяОбласти).Текст;			
			СтруктураПараметров.МаксНомерОбласти = Объект.МаксНомерОбласти; 		
			СтруктураПараметров.ИмяОбласти       = ИмяОбласти;  		
			
			СтруктураПараметров.Вставить("СправочникОбъект"	    , Объект);
			СтруктураПараметров.Вставить("ПравилаЗаполнения"	, ПравилаЗаполнения);
			СтруктураПараметров.Вставить("СписокСвойств"	, 	  СписокСвойств);
			
			Если ЭтоФормула Тогда
				ВыполнитьСдвигФормулы(ОписаниеФормулы, СтруктураПараметров, Строк, Колонок);
			КонецЕсли; 
			
			ЗавершитьРедактированиеПравила(СтруктураПараметров, СтруктураПараметров, СтрокаПравил, МакетОтчета.Область(ИмяОбласти));
			Колонок = Колонок + 1;
		КонецЦикла; 
		Строк = Строк + 1;
	КонецЦикла; 

	ПриАктивизацииОбластиМакета();
	
КонецПроцедуры // ВставитьНастройку()

&НаКлиенте
Процедура ЗавершитьРедактированиеПравила(РезСтруктура, СтруктураПараметров, СтрокаПравил, ОблМакета)
	
	// Проверка уникальности имени области
	НайденнаяСтрока = НайтиСтрокуПравилЗаполненияПоИмениОбласти(РезСтруктура.ИмяОбласти, ПравилаЗаполнения);
	
	Если НайденнаяСтрока <> Неопределено 
	  И (СтрокаПравил = Неопределено 
	ИЛИ СтрокаПравил.ИмяОбласти <> НайденнаяСтрока.ИмяОбласти) Тогда 
	
		ТекстСообщения = Нстр("ru = 'Имя ""%1%"" уже используется! Строка правил заполнения № %2%.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, 
							РезСтруктура.ИмяОбласти, 
							НайденнаяСтрока.НомерСтроки);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Объект.МаксНомерОбласти = СтруктураПараметров.МаксНомерОбласти;		
		Возврат;  
		
 	КонецЕсли;  	  
	
	Модифицированность = Истина;
	 
	Если НайденнаяСтрока = Неопределено Тогда
		СтрокаПравил = ПравилаЗаполнения.Добавить();
		СтрокаПравил.ЭтоНовый = Истина;
	КонецЕсли; 
		
	ЗаполнитьЗначенияСвойств(СтрокаПравил, РезСтруктура);
	СтрокаПравил.Изменен = Истина;

	Если СтруктураПараметров.ИмяОбласти <> РезСтруктура.ИмяОбласти Или ОблМакета.Имя <> РезСтруктура.ИмяОбласти Тогда	 
		ОблМакета.Имя = РезСтруктура.ИмяОбласти;	 
	КонецЕсли;

	Если РезСтруктура.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Шаблон") Тогда
		
		ОблМакета.СодержитЗначение = Ложь;
		ОблМакета.Текст			   = РезСтруктура.Шаблон;
		
	Иначе // Значение или формула
		
		ОблМакета.СодержитЗначение = Истина;
		Если ОблМакета.СодержитЗначение <> Неопределено Тогда

			ОблМакета.ТипЗначения = Новый ОписаниеТипов("Число");
			Если ОблМакета.ЭлементУправления <> Неопределено Тогда 				 
				ОблМакета.ЭлементУправления.КнопкаВыбора = Истина; 				 
			КонецЕсли; 
		КонецЕсли; 

		Если РезСтруктура.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Значение") Тогда
			// Значение
			ОблМакета.Примечание.Текст = Строка(СтрокаПравил.ЭлементДанных) + "(" + СтрокаПравил.ИмяРесурса + ")";
			ОблМакета.Защита = Ложь;
		ИначеЕсли РезСтруктура.ВидЯчейки = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Формула") Тогда	
			// Формула
			ОблМакета.Примечание.Текст = РезСтруктура.Формула;
			ОблМакета.Защита = Истина;
		КонецЕсли;
		
	КонецЕсли;

	ПриАктивизацииОбластиМакета();
	
КонецПроцедуры // ЗавершитьРедактированиеПравила()

&НаКлиенте
Процедура ЗавершитьРедактированиеОбразца(Результат, ОблМакета)
	
	Ключи = "ИмяОбласти ,ВидЯчейки ,ЭлементДанных ,ИмяРесурса ,"
		  + "Формула ,ФорматЧисел ,Шаблон ,ФормироватьДвиженияПоБюджету ,"
		  + "ПериодДанных, ЗначенияПоУмолчанию";
	СтрокаПравил = Новый Структура(Ключи); 
	
	ЗаполнитьЗначенияСвойств(СтрокаПравил, Результат, Результат.СписокСвойств);
	ВставитьНастройку(ОблМакета, СтрокаПравил, ОблМакета, Ложь, Результат.СписокСвойств);
	
КонецПроцедуры // ЗавершитьРедактированиеПравила()

// Функция производит поиск строки правил заполнения по имени области.
// 
// Параметры:
//  ИмяОбласти - Строка
//  
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции
// 
&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения)

	СтрокаПравил = Неопределено;
	
	НайденныеСтрокиПравил = ПравилаЗаполнения.НайтиСтроки(Новый Структура("ИмяОбласти", ИмяОбласти));	
	Если НайденныеСтрокиПравил.Количество() > 0 Тогда
		СтрокаПравил = НайденныеСтрокиПравил[0];
	КонецЕсли;

	Возврат СтрокаПравил;
	
КонецФункции // НайтиСтрокуПравилЗаполненияПоИмениОбласти()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуПравилЗаполненияПоЭлементамТаблицы(КолонкаТаблицы, СтрокаТаблицы, ПравилаЗаполнения)

	СтрокаПравил = Неопределено;
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("КолонкаТаблицыОтчета", КолонкаТаблицы);
	СтрОтбор.Вставить("СтрокаТаблицыОтчета", СтрокаТаблицы);

	НайденныеСтрокиПравил = ПравилаЗаполнения.НайтиСтроки(СтрОтбор);	
	Если НайденныеСтрокиПравил.Количество() > 0 Тогда
		СтрокаПравил = НайденныеСтрокиПравил[0];
	КонецЕсли;
	
	Возврат СтрокаПравил;
	
КонецФункции // НайтиСтрокуПравилЗаполненияПоЭлементамТаблицы()

&НаКлиенте
Функция ПодготовитьПараметрыФормыРедактированияПравила()
	
	СтруктураПараметров = НовоеОписаниеПравила();
	
	// Вспомогательные данные.
	СтруктураПараметров.Вставить("СпособКомпоновки",Объект.СпособКомпоновки);
	СтруктураПараметров.Вставить("ТипОтчета",	 	Объект.ТипОтчета);

	СтруктураПараметров.Вставить("ТекущаяСтраница",);
	СтруктураПараметров.Вставить("МаксНомерОбласти",);
	СтруктураПараметров.Вставить("СправочникОбъект",);
	СтруктураПараметров.Вставить("ИмяПараметраПоследнее",);
	СтруктураПараметров.Вставить("ПравилаЗаполнения",);
	СтруктураПараметров.Вставить("СписокСвойств","");
	
	Возврат СтруктураПараметров;
	
КонецФункции // ИнициализироватьСтруктуруПараметров()
 
&НаКлиентеНаСервереБезКонтекста  
Функция СформироватьУникальноеИмяОбласти(ТабДокумент, Объект)

	КонтрольнаяОбласть = "ВыполнимХотябыОдинРаз";
	Пока КонтрольнаяОбласть <> Неопределено Цикл
		
		Объект.МаксНомерОбласти   = Объект.МаксНомерОбласти + 1;
		ИмяОбласти         = бит_мпд_КлиентСервер.СформироватьИмяОбласти(Объект.Префикс, Объект.МаксНомерОбласти, Объект.ДлинаИмени);
		КонтрольнаяОбласть = бит_мпд_КлиентСервер.ПолучитьОбластьЯчеек(ТабДокумент, ИмяОбласти);
		
	КонецЦикла; 

    Возврат ИмяОбласти;
	
КонецФункции // СформироватьУникальноеИмяОбласти()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяОбласти(ИмяОбласти, МакетОтчета, Объект)

	Если бит_мпд_КлиентСервер.ИмяОбластиТиповое(ИмяОбласти) Тогда 		
		Результат = СформироватьУникальноеИмяОбласти(МакетОтчета, Объект);
	Иначе
		Результат = бит_ОбщегоНазначенияКлиентСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ИмяОбласти);
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // ПолучитьимяОбласти()
 
&НаКлиенте
Процедура ЗаполнитьСтруктуруПараметровПоСтрокеПравилЗаполнения(СтруктураПараметров, СтрокаПравил)

	СтруктураПараметров.ВидЯчейки     				 = СтрокаПравил.ВидЯчейки;
	СтруктураПараметров.ЭлементДанных 				 = СтрокаПравил.ЭлементДанных;
	СтруктураПараметров.ИмяРесурса    				 = СтрокаПравил.ИмяРесурса;
	СтруктураПараметров.Формула       				 = СтрокаПравил.Формула;
	СтруктураПараметров.ФорматЧисел   				 = СтрокаПравил.ФорматЧисел;
	СтруктураПараметров.ФормироватьДвиженияПоБюджету = СтрокаПравил.ФормироватьДвиженияПоБюджету;
	СтруктураПараметров.ПериодДанных  				 = СтрокаПравил.ПериодДанных;
	СтруктураПараметров.ЗначенияПоУмолчанию 		 = СтрокаПравил.ЗначенияПоУмолчанию;
	СтруктураПараметров.КолонкаТаблицыОтчета         = СтрокаПравил.КолонкаТаблицыОтчета;
	СтруктураПараметров.СтрокаТаблицыОтчета          = СтрокаПравил.СтрокаТаблицыОтчета;
	СтруктураПараметров.ЭлементДанных	             = СтрокаПравил.ЭлементДанных;
	СтруктураПараметров.Шаблон			             = СтрокаПравил.Шаблон;
	
КонецПроцедуры // ЗаполнитьСтруктуруПараметровПоСтрокеПравилЗаполнения()

&НаКлиенте
Процедура ОткрытьФормуПравилаЗаполнения(СтруктураПараметров, СтрокаПравил, ОблМакета, РежимОбразца = Ложь)
	
	СтруктураПараметров.Вставить("СправочникОбъект"	    , Объект);
	СтруктураПараметров.Вставить("ПравилаЗаполнения"	, ПравилаЗаполнения);
	СтруктураПараметров.Вставить("РежимОбразца"	    	, РежимОбразца);
	СтруктураПараметров.Вставить("СписокПараметров"	    , СписокПараметров);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПараметров", СтруктураПараметров);
	ДополнительныеПараметры.Вставить("СтрокаПравил", СтрокаПравил);
	ДополнительныеПараметры.Вставить("ОблМакета", 	 ОблМакета);
	ДополнительныеПараметры.Вставить("РежимОбразца" , РежимОбразца);
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуПравилаЗаполненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);			
	ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.ФормаПравилаЗаполнения",
				СтруктураПараметров, ЭтотОбъект, ЭтотОбъект,,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
           	
КонецПроцедуры // ОткрытьФормуРедактированияПравилаЗаполнения()

// Процедура обработчик оповещения "ОткрытьФормуПравилаЗаполненияЗавершение".
// 
// Параметры:
// РезСтруктура - Структура.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура ОткрытьФормуПравилаЗаполненияЗавершение(РезСтруктура, ДополнительныеПараметры) Экспорт
	
	Если РезСтруктура = Неопределено Тогда
		Объект.МаксНомерОбласти = ДополнительныеПараметры.СтруктураПараметров.МаксНомерОбласти;
	Иначе
		
		РезСтруктура.Удалить("ИмяПараметраПоследнее");

		СтруктураПараметров = ДополнительныеПараметры.СтруктураПараметров;
		СтрокаПравил		= ДополнительныеПараметры.СтрокаПравил;
		ОблМакета			= ДополнительныеПараметры.ОблМакета;

		Если ДополнительныеПараметры.РежимОбразца Тогда
			ЗавершитьРедактированиеОбразца(РезСтруктура, ОблМакета);
		Иначе	
			ЗавершитьРедактированиеПравила(РезСтруктура, СтруктураПараметров, СтрокаПравил, ОблМакета);
		КонецЕсли; 
	КонецЕсли;
	    
КонецПроцедуры

// Процедура открывает форму для установки правил заполнения области макета.
// 
&НаКлиенте
Процедура УстановитьПравилоЗаполненияОбласти()
	
	// NB: Устарело, не следует использовать.
	
	// Проверка текущей области макета
	ОблМакета = Элементы.МакетОтчета.ТекущаяОбласть;
	Если НЕ ТипЗнч(ОблМакета) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда  		
		ПоказатьПредупреждение(,Нстр("ru = 'Не выбрана область макета!'"));
		Возврат; 	
	КонецЕсли; 
	
	Если НЕ ЭтоПрямоугольнаяОбласть(ОблМакета) Тогда
		Возврат;
	КонецЕсли;  
	
	Ячейки    = ЯчейкиОбласти(ОблМакета);
	Привязки  = ЯчейкиПривязанныеКПравилам(Ячейки);
	ВидыЯчеек = Новый Массив(); 

	Если Привязки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Привязка Из Привязки Цикл
		Если НЕ Привязка.Значение = Неопределено И ВидыЯчеек.Найти(Привязка.Значение.ВидЯчейки) = Неопределено Тогда
		     ВидыЯчеек.Добавить(Привязка.Значение.ВидЯчейки);
		КонецЕсли; 
	КонецЦикла; 
	 	
	Если Ячейки.Количество() = 1 Тогда
	
		СтрокаПравил = Привязки[Ячейки[0]];
		
		Если СтрокаПравил = Неопределено Тогда
			СтрокаПравил = НовоеОписаниеПравила();
			СтрокаПравил.ИмяОбласти = ПолучитьИмяОбласти(ОблМакета.Имя, МакетОтчета, Объект);
			СтрокаПравил.ВидЯчейки     = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Значение");
		КонецЕсли;	
		
		СтруктураПараметров = ПодготовитьПараметрыФормыРедактированияПравила();
		СтруктураПараметров.МаксНомерОбласти = Объект.МаксНомерОбласти;

		ЗаполнитьСтруктуруПараметровПоСтрокеПравилЗаполнения(СтруктураПараметров, СтрокаПравил);
		
		СтруктураПараметров.ИмяОбласти = СтрокаПравил.ИмяОбласти;

		ОткрытьФормуПравилаЗаполнения(СтруктураПараметров, СтрокаПравил, ОблМакета);
		
	Иначе
		
		// Групповое редактирование.
		Отказ = Ложь;
		Если ВидыЯчеек.Количество() > 1 Тогда
			ТекстСообщения = Нстр("ru = 'Редактирование свойств группы ячеек поддерживается для однородных видов.'");
			ПоказатьПредупреждение(,ТекстСообщения);				   
			Отказ = Истина;		
		КонецЕсли; 
		
		Если НЕ Отказ Тогда	
			СтрокаПравил = Привязки[Ячейки[0]];
			
			Если СтрокаПравил = Неопределено Тогда
				СтрокаПравил = НовоеОписаниеПравила();
				СтрокаПравил.ВидЯчейки     = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Значение");
			КонецЕсли;	
			
			СтруктураПараметров = ПодготовитьПараметрыФормыРедактированияПравила();
			СтруктураПараметров.ВидЯчейки 		 = СтрокаПравил.ВидЯчейки;
			СтруктураПараметров.МаксНомерОбласти = Объект.МаксНомерОбласти;

			ОткрытьФормуПравилаЗаполнения(СтруктураПараметров, Неопределено, ОблМакета, Истина);
		КонецЕсли; 
	КонецЕсли; 
	               
КонецПроцедуры // УстановитьПравилоЗаполненияОбласти()

// Процедура устанавливает шаблон из параметров в область отчета.
// 
&НаКлиенте
Процедура УстановитьПараметр()
	
	ПараметрыФормы = ПодготовитьПараметрыФормыВыбораПараметров();
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Обработчик 	   = Новый ОписаниеОповещения("УстановитьПараметрЗавершение", ЭтотОбъект);
    Режим          = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("Справочник.бит_НастройкиПроизвольныхОтчетов.Форма.ФормаВыбораПараметров",ПараметрыФормы,,,,, Обработчик, Режим);
	
КонецПроцедуры // УстановитьПараметр()

// Процедура обработчик оповещения "УстановитьПараметрЗавершение".
// 
// Параметры:
// ВыбЗначение - Структура.
// Дополнительно - Текущая область макета.
// 
&НаКлиенте
Процедура УстановитьПараметрЗавершение(ВыбЗначение, Дополнительно) Экспорт
  
	Если ТипЗнч(ВыбЗначение) = Тип("Структура")  Тогда
		ОблМакета  = Элементы.МакетОтчета.ТекущаяОбласть;
		ИмяОбласти = ПолучитьИмяОбласти(ОблМакета.Имя, МакетОтчета, Объект);
		
		СтрокаПравил = НайтиСтрокуПравилЗаполненияПоИмениОбласти(ИмяОбласти, ПравилаЗаполнения);
		Если СтрокаПравил = Неопределено Тогда
			СтрокаПравил = ПравилаЗаполнения.Добавить();
			СтрокаПравил.ЭтоНовый   = Истина;  			
			СтрокаПравил.ИмяОбласти = ИмяОбласти; 
		КонецЕсли;
		СтрокаПравил.ВидЯчейки     = ПредопределенноеЗначение("Перечисление.бит_ВидыЯчеекПроизвольногоОтчета.Шаблон");
		СтрокаПравил.ЭлементДанных = ПредопределенноеЗначение("Справочник.бит_ЭлементыДанных.ПустаяСсылка");
		СтрокаПравил.Формула 	   = "";
		СтрокаПравил.Шаблон        = ВыбЗначение.ИмяПараметра;
		
		ОблМакета.Имя 			   = ИмяОбласти;
		ОблМакета.СодержитЗначение = Ложь;
		ОблМакета.Текст 		   = ОблМакета.Текст + "[" + ВыбЗначение.ИмяПараметра + "]";	
		
		Модифицированность = Истина;
		ПриАктивизацииОбластиМакета();
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеПанелямиФормы(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;

	Элементы.ГруппаПравилаПоказатели.Видимость = Форма.ВсеПравилаОткрыта;
	Элементы.ПоказатьПравилаЗаполнения.Пометка = Форма.ВсеПравилаОткрыта;
	
	Элементы.ГруппаТекущееПравило.Видимость = Форма.ТекущееПравилоОткрыта;
	Элементы.ПоказатьТекущееПравило.Пометка = Форма.ТекущееПравилоОткрыта;
	
	ЭтоМСФО  = (Объект.ТипОтчета = ПредопределенноеЗначение("Перечисление.бит_ТипыПроизвольныхОтчетов.ОтчетностьМСФО"));
	Элементы.СтраницаАналитикиСтрок.Видимость = НЕ ЭтоМСФО;
	Элементы.ГруппаСтруктура.Видимость		  = НЕ ЭтоМСФО;
	
	Если ЭтоМСФО Тогда
		Элементы.ГруппаМакетСтруктура.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.ГруппаМакетСтруктура.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли; 
	
КонецПроцедуры // УправлениеФормой()

&НаКлиенте
Процедура ПередУдалениемСтрокиПравил(СтрокаПравил, Отказ)
		
	Если НЕ СтрокаПравил = Неопределено Тогда
		
		Если СтрокаПравил.ЕстьСсылки Тогда
			ТекстСообщения = НСтр("ru = 'Показатель отчета ""%1"" удалить нельзя т.к. на него есть ссылки в сохраненных экземплярах отчета.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтрокаПравил.Показатель));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Отказ); 
		Иначе 		
			
			фСписокУдаленныхПоказателей.Добавить(СтрокаПравил.Показатель);
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры // ПравилаЗаполненияПередУдалением()

&НаСервере
Процедура ПриИзмененииИмениПараметра(ЧтоЗаменить, НаЧтоЗаменить)

	СтарыйТекст = "[" + ЧтоЗаменить + "]";
	Если ПустаяСтрока(НаЧтоЗаменить) Тогда
		НовыйТекст = "";
	Иначе	
		НовыйТекст = "[" + НаЧтоЗаменить + "]";
	КонецЕсли; 
	
	Для Ряд = 1 По МакетОтчета.ВысотаТаблицы Цикл
		Для Колонка = 1 По МакетОтчета.ШиринаТаблицы Цикл
			Адрес	= "R" + Формат(Ряд, "ЧЦ=4; ЧГ=") + "C" + Формат(Колонка,"ЧЦ=4; ЧГ=");
			Область = МакетОтчета.Область(Адрес);
			Если СтрНайти(Область.Текст, СтарыйТекст) <> 0 Тогда
				Область.Текст = СтрЗаменить(Область.Текст, СтарыйТекст, НовыйТекст);
				СтрокаПравил  = НайтиСтрокуПравилЗаполненияПоИмениОбласти(Область.Имя, ПравилаЗаполнения);
				Если СтрокаПравил <> Неопределено Тогда
					СтрокаПравил.Шаблон = НовыйТекст;
					Если ТекущееПравилоОткрыта Тогда
						ТекущееПравилоШаблон = НовыйТекст;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти
