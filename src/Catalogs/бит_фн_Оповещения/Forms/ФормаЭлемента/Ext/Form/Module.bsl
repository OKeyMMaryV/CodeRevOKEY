
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	// Получим список доступных видов контактной информации.
		// Получим список доступных видов контактной информации.
	Если  бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		
		Запрос.Текст =  "ВЫБРАТЬ
		                |	ВидыКонтактнойИнформации.Ссылка,
		                |	ВидыКонтактнойИнформации.Наименование,
		                |	ВидыКонтактнойИнформации.Родитель
		                |ИЗ
		                |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		                |ГДЕ
		                |	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		                |	И (ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПользователи)
		                |			ИЛИ ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты)  
						|           ИЛИ ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникФизическиеЛица) 
						|           ИЛИ ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛица) )";
						
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекНаименование = "";
			Если Выборка.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПользователи Тогда
				
				ТекНаименование = "Пользователь."+Выборка.Наименование;
				
			ИначеЕсли Выборка.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты Тогда	
				
				ТекНаименование = "Контрагент."+Выборка.Наименование;
				
			ИначеЕсли Выборка.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица Тогда	
				
				ТекНаименование = "ФизЛицо."+Выборка.Наименование;

			ИначеЕсли Выборка.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица Тогда	
				
				ТекНаименование = "КонтактноеЛицо."+Выборка.Наименование;
				
			КонецЕсли; 
			Элементы.ПолучателиВидКонтактнойИнформации.СписокВыбора.Добавить(Выборка.Ссылка,ТекНаименование);
			
		КонецЦикла; 
		
		//+СБ Пискунова #2691 20.02.2017
		Элементы.ПолучателиВидКонтактнойИнформации.СписокВыбора.Добавить(Справочники.ВидыКонтактнойИнформации.EmailИнициатора,"Инициатор.Email");
		//-СБ Пискунова #2691 20.02.2017
				
		
	КонецЕсли; 
	
	// Установка доступных видов событий
	ЭтоСемействоERP = бит_ОбщегоНазначения.ЭтоСемействоERP();
	бит_фн_ОповещенияСервер.ЗаполнитьСписокВыбораВидовСобытий(Элементы.ВидСобытия.СписокВыбора, ЭтоСемействоERP);		
	
	ДоработатьТаблицуПолучатели(Объект);
	
	// Связь параметра выбора шаблона сообщения по виду события.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСвязьПараметраВыбораЭлемента(Элементы.ШаблонСообщения
	                                                                        ,"Отбор.ВидСобытия"
																			,"Объект.ВидСобытия"
																			,РежимИзмененияСвязанногоЗначения.Очищать);
																			
	// связь параметра выбора состояния по объекту
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСвязьПараметраВыбораЭлемента(Элементы.Статус
	                                                                        ,"Отбор.Объект"
																			,"Объект.ОбъектСистемы"
																			,РежимИзмененияСвязанногоЗначения.Очищать);
																			
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСвязьПараметраВыбораЭлемента(Элементы.ТочкаАлгоритма
	                                                                        ,"Отбор.Владелец"
																			,"Объект.АлгоритмПроцесса"
																			,РежимИзмененияСвязанногоЗначения.Очищать);																		
	
	Если НеобходимоИнициализироватьКомпоновщик() Тогда

		ТекОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_фн_Оповещения"));
		
		ТекОбъект.ИнициализироватьКомпоновщик(Объект.ВидСобытия, Компоновщик);
		
		СохраненнаяНастройка = ТекОбъект.ПолучитьНастройкиКомпоновщика();
		
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-09-13 (#4271)
		//	Если СохраненнаяНастройка.НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0 
		//	ИЛИ СохраненнаяНастройка.НастройкиКомпоновщика.Порядок.Элементы.Количество() > 0 Тогда
		Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура")
			И СохраненнаяНастройка.Свойство("НастройкиКомпоновщика")
			И (СохраненнаяНастройка.НастройкиКомпоновщика.Отбор.Элементы.Количество() > 0 
			ИЛИ СохраненнаяНастройка.НастройкиКомпоновщика.Порядок.Элементы.Количество() > 0) Тогда
		// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-09-13 (#4271)
			
			
			Компоновщик.ЗагрузитьНастройки(СохраненнаяНастройка.НастройкиКомпоновщика);
			
		КонецЕсли; 
		
	КонецЕсли;
		
	мКэшЗначений = Новый Структура;
	
	// Кэшируем перечисления
	КэшПеречисления = Новый Структура;	
	СтрПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОбъектовСистемы);
	
	КэшПеречисления.Вставить("бит_ВидыОбъектовСистемы",СтрПеречисление);
	
	СтрПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_фн_ВидыСобытийОповещений);
	КэшПеречисления.Вставить("бит_фн_ВидыСобытийОповещений",СтрПеречисление);
	
	мКэшЗначений.Вставить("Перечисления",КэшПеречисления);
	
	// Вид контактной информации
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда	
		мКэшЗначений.Вставить("ВидКонтактнойИнформацииСлужебнаяПочта",Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		мКэшЗначений.Вставить("ВидКонтактнойИнформацииПочтаКонтрагента",Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);	
	ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		мКэшЗначений.Вставить("ВидКонтактнойИнформацииСлужебнаяПочта",Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		мКэшЗначений.Вставить("ВидКонтактнойИнформацииПочтаКонтрагента",Справочники.ВидыКонтактнойИнформации["EmailКонтрагента"]);			
	КонецЕсли; 
	
	// Список объектов на которые распространяется механизм визирования.
	СписокВизируемыхОбъектов = бит_Визирование.ВизируемыеОбъектыСистемы();
	мКэшЗначений.Вставить("СписокВизируемыхОбъектов",СписокВизируемыхОбъектов);
	
	мКэшЗначений.Вставить("СписокВыражений",Новый СписокЗначений);
	мКэшЗначений.СписокВыражений = СформироватьСписокВыражений();
	
	СписокДоступныхСтатусов = ПолучитьСписокДоступныхСтатусов();
	мКэшЗначений.Вставить("СписокДоступныхСтатусов", СписокДоступныхСтатусов);
	
	мКэшЗначений.Вставить("ШапкаСпособТранспорта", Объект.НастройкаДоставки.СпособТранспорта);
	
	ОбновитьДеревоУсловия();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДоработатьТаблицуПолучатели(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидСобытияПриИзменении(Элемент)
	
// Проверим соответствует ли объект системы виду события.
	Если Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ЗаписанСправочник Тогда
		
		Если НЕ ВидОбъектаСистемы = мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
			
			Объект.ОбъектСистемы = Неопределено;
			
		КонецЕсли; 
	ИначеЕсли Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеЗадачи Тогда
		
		Если НЕ ВидОбъектаСистемы = мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Задача Тогда
			
			Объект.ОбъектСистемы = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеПроцесса Тогда
		
		Если НЕ ВидОбъектаСистемы = мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.БизнесПроцесс Тогда
			
			Объект.ОбъектСистемы = Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования Тогда
		
		Объект.ОбъектСистемы = Неопределено;
		
	Иначе	
		
		Если НЕ ВидОбъектаСистемы = мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
			
			Объект.ОбъектСистемы = Неопределено;
			
		КонецЕсли; 
		
		// События по визированию и изменению статусов распространяются на ограниченный список документов.
		Если ЗначениеЗаполнено(Объект.ОбъектСистемы) И  НеобходимоОграничитьСписокОбъектов() Тогда
			
			Если мКэшЗначений.СписокВизируемыхОбъектов.НайтиПоЗначению(Объект.ОбъектСистемы) = Неопределено Тогда
				
				Объект.ОбъектСистемы = Неопределено;
				
			КонецЕсли; 
			
		КонецЕсли; // Проверка на вхождение в список визируемых.
		
	КонецЕсли; // По виду события
	
	ВидСобытияИзменение();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСобытия".
// 
&НаСервере
Процедура ВидСобытияИзменение()
	
	УстановитьОбъектПоВидуСобытия();
	
	ИзменениеОбъектаСистемы();
	
	ИнициализироватьКомпоновщик();
	
	УстановитьВидимость();
	
КонецПроцедуры

// Функция определяет необходимость инициализации компоновщика.
//
// Возвращаемое значение:
//  флИнициализировать - Булево.
//
&НаСервере
Функция НеобходимоИнициализироватьКомпоновщик()

	флИнициализировать = Ложь;
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		
		Если Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуНачислений
			ИЛИ Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей
			ИЛИ Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора Тогда
			
			флИнициализировать = Истина;
			
		КонецЕсли;	
		
	ИначеЕсли бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
		
		Если  Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора Тогда
			
			флИнициализировать = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 

	Возврат флИнициализировать;
	
КонецФункции // НеобходимоИнициализироватьКомпоновщик()

// Процедура инциализирует компоновщик.
// 
// Параметры:
// 
&НаСервере
Процедура ИнициализироватьКомпоновщик()

	Если НеобходимоИнициализироватьКомпоновщик() Тогда

		ТекОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_фн_Оповещения"));
			
		ТекОбъект.ИнициализироватьКомпоновщик(Объект.ВидСобытия, Компоновщик);
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьКомпоновщик()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	
	Если Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ЗаписанСправочник Тогда
		ВидОбъектаСистемы = мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Справочник;
	ИначеЕсли Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеПроцесса Тогда
		ВидОбъектаСистемы = мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.БизнесПроцесс;
	ИначеЕсли Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеЗадачи Тогда
		ВидОбъектаСистемы = мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Задача;	
	Иначе	
		ВидОбъектаСистемы = мКэшЗначений.Перечисления.бит_ВидыОбъектовСистемы.Документ;
	КонецЕсли; 
	СписокВидовОбъектов.Добавить(ВидОбъектаСистемы);		
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.ОбъектСистемы);
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	Если НеобходимоОграничитьСписокОбъектов() Тогда
		
		ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы",мКэшЗначений.СписокВизируемыхОбъектов);	
		
	КонецЕсли; 	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПользовательскоеУсловие".
// 
&НаКлиенте
Процедура ПользовательскоеУсловиеПриИзменении(Элемент)
	
	ОбновитьДеревоУсловия();
	РазвернутьДерево();	
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	НачалоСтроки = Строка(Объект.ВидСобытия) + " """;
	
	Если Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.УстановленСтатус Тогда
		
		СтрВыбора = НачалоСтроки + Строка(Объект.Статус) + """ объекта """ + Строка(Объект.ОбъектСистемы) + """";
		
	ИначеЕсли Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ПринятоРешение Тогда	
		
		СтрВыбора = НачалоСтроки + Строка(Объект.Решение) + """ по визе """ + Строка(Объект.Виза) + """";		
		
	Иначе	
		
		СтрВыбора = НачалоСтроки + Строка(Объект.ОбъектСистемы) + """";
		
	КонецЕсли; 
	
	Элемент.СписокВыбора.Добавить(СтрВыбора);
	
КонецПроцедуры // НаименованиеНачалоВыбораИзСписка

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	НачалоСтроки = Строка(Объект.ВидСобытия) + " """;
	
	Если Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.УстановленСтатус Тогда
		
		СтрВыбора = НачалоСтроки + Строка(Объект.Статус) + """ объекта """ + Строка(Объект.ОбъектСистемы) + """";
		
	ИначеЕсли Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ПринятоРешение Тогда	
		
		СтрВыбора = НачалоСтроки + Строка(Объект.Решение) + """ по визе """ + Строка(Объект.Виза) + """";		
		
	Иначе	
		
		СтрВыбора = НачалоСтроки + Строка(Объект.ОбъектСистемы) + """";
		
	КонецЕсли; 
	
	Элемент.СписокВыбора.Добавить(СтрВыбора);
	
КонецПроцедуры // НаименованиеАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода "ОбъектСистемы".
// 
&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
  ИзменениеОбъектаСистемы();	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Статус".
// 
&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	


	#Если ТолстыйКлиентОбычноеПриложение Тогда
		// В тонком клиенте действуют параметры выбора.
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатусНачалоВыбораЗавершение", ЭтотОбъект);
	
		ПоказатьВыборИзСписка(ОписаниеОповещения, мКэшЗначений.СписокДоступныхСтатусов);
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура обработчик оповещения "СтатусНачалоВыбораЗавершение".
// 
// Параметры:
// ВыбранноеЗначение - Произвольный.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура СтатусНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Объект.Статус = ВыбранноеЗначение.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрОтбор = Новый Структура;
	
	Если мКэшЗначений.ШапкаСпособТранспорта = ПредопределенноеЗначение("Перечисление.бит_фн_СпособыТранспортаОповещений.ЭлектроннаяПочта") 
		ИЛИ мКэшЗначений.ШапкаСпособТранспорта = ПредопределенноеЗначение("Перечисление.бит_фн_СпособыТранспортаОповещений.ЭлектроннаяПочта1С") Тогда
		СпособТранспортаОтбор = Новый СписокЗначений;
		СпособТранспортаОтбор.Добавить(ПредопределенноеЗначение("Перечисление.бит_фн_СпособыТранспортаОповещений.ЭлектроннаяПочта"));
		СпособТранспортаОтбор.Добавить(ПредопределенноеЗначение("Перечисление.бит_фн_СпособыТранспортаОповещений.ЭлектроннаяПочта1С"));
		
		СтрОтбор.Вставить("СпособТранспорта", СпособТранспортаОтбор);
	Иначе
		СтрОтбор.Вставить("СпособТранспорта", мКэшЗначений.ШапкаСпособТранспорта);
	КонецЕсли;
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтрОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДоставкиПриИзменении(Элемент)
	НастройкаДоставкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НастройкаДоставкиПриИзмененииНаСервере()
	
	мКэшЗначений.ШапкаСпособТранспорта = Объект.НастройкаДоставки.СпособТранспорта;
	
	Если НЕ Объект.ШаблонСообщения.СпособТранспорта = Объект.НастройкаДоставки.СпособТранспорта Тогда
	
		 Объект.ШаблонСообщения = Неопределено;
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоУсловия

&НаКлиенте
Процедура ДеревоУсловияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РедактироватьПользовательскоеУсловие();
	РазвернутьДерево();		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолучатели

&НаКлиенте
Процедура ПолучателиПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("СправочникСсылка.Пользователи")               ,"Пользователь                      ");
	СписокТипов.Добавить(Тип("СправочникСсылка.ГруппыПользователей")        ,"Группа пользователей              ");	
	СписокТипов.Добавить(Тип("СправочникСсылка.Контрагенты")                ,"Контрагент                        ");	
	СписокТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица")             ,"Физические лица                   ");		
	СписокТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛица")             ,"Контактные лица                   ");			
	СписокТипов.Добавить(Тип("Строка")                                      ,"Выражение                         ");
	СписокТипов.Добавить(Тип("СправочникСсылка.бит_ПользовательскиеФункции"),"Пользовательская функция          ");		
	//+СБ Пискунова 20.02.2017#2691 
	СписокТипов.Добавить(Тип("СправочникСсылка.бит_БК_Инициаторы")          ,"Инициатор          ");	
	//+СБ Пискунова 20.02.2017#2691
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                                                   ,Элемент
	                                                   ,ТекущиеДанные
	                                                   ,"Пользователь"
													   ,СписокТипов
													   ,СтандартнаяОбработка);

													   
	Если ТипЗнч(ТекущиеДанные.Пользователь) = Тип("Строка") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиПользовательНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
		
		ПоказатьВыборИзСписка(ОписаниеОповещения, мКэшЗначений.СписокВыражений);
		
	КонецЕсли; 												   
													   
КонецПроцедуры

// Процедура обработчик оповещения "ПолучателиПользовательНачалоВыбораЗавершение".
// 
// Параметры:
// ВыбЗначение - Произвольный
// ТекущиеДанные - Структура
// 
&НаКлиенте
Процедура ПолучателиПользовательНачалоВыбораЗавершение(ВыбЗначение, ТекущиеДанные) Экспорт
	
	Если НЕ ВыбЗначение = Неопределено Тогда
		
		ТекущиеДанные.Пользователь = ВыбЗначение.Значение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПользовательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Получатели.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидКонтактнойИнформации) И ЗначениеЗаполнено(ТекущиеДанные.Пользователь) Тогда
		
		Если ТипЗнч(ТекущиеДанные.Пользователь) = Тип("СправочникСсылка.Контрагенты") Тогда
			ТекущиеДанные.ВидКонтактнойИнформации = мКэшЗначений.ВидКонтактнойИнформацииПочтаКонтрагента;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Пользователь) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ТекущиеДанные.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактныеЛица");
		ИначеЕсли ТипЗнч(ТекущиеДанные.Пользователь) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ТекущиеДанные.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
			//+СБ Пискунова #2691 20.02.2017
		ИначеЕсли ТипЗнч(ТекущиеДанные.Пользователь) = Тип("СправочникСсылка.бит_БК_Инициаторы") Тогда
			ТекущиеДанные.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailИнициатора");
		//-СБ Пискунова #2691 20.02.2017
		Иначе	
			ТекущиеДанные.ВидКонтактнойИнформации = мКэшЗначений.ВидКонтактнойИнформацииСлужебнаяПочта;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиШаблонСообщенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Получатели.ТекущиеДанные;
	
	СтрОтбор = Новый Структура;
	СтрОтбор.Вставить("СпособТранспорта", ТекущаяСтрока.СпособТранспорта);
	бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элемент, СтрОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиНастройкаДоставкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Получатели.ТекущиеДанные;
	ТекущаяСтрока.СпособТранспорта = ПолучателиНастройкаДоставкиПриИзмененииНаСервере(ТекущаяСтрока.НастройкаДоставки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучателиНастройкаДоставкиПриИзмененииНаСервере(НастройкаДоставки)
	
	 Возврат НастройкаДоставки.СпособТранспорта;
	 
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "РедактироватьУсловие".
// 
&НаКлиенте
Процедура КомандаРедактироватьУсловие(Команда)
	
	РедактироватьПользовательскоеУсловие();
	РазвернутьДерево();		
	
КонецПроцедуры

// Процедура - обработчик команды "ОбновитьДеревоУсловий".
// 
&НаКлиенте
Процедура КомандаОбновитьДеревоУсловий(Команда)
	
	ОбновитьДеревоУсловия();
	РазвернутьДерево();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура 
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаСервере
Процедура КопироватьКоллекциюЭлементовОтбора(КоллекцияИсточник, КоллекцияПриемник)

	Для каждого ЭлОтбор Из КоллекцияИсточник Цикл
		
		Если ТипЗнч(ЭлОтбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ЭлОтборНовый = КоллекцияПриемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлОтборНовый, ЭлОтбор);
			
		ИначеЕсли ТипЗнч(ЭлОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда	
			
			ГрОтборНовый = КоллекцияПриемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ГрОтборНовый, ЭлОтбор);
			КопироватьКоллекциюЭлементовОтбора(ЭлОтбор.Элементы, ГрОтборНовый.Элементы);
			
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры // КопироватьКоллекциюЭлементовОтбора()

&НаСервереБезКонтекста
Функция НеРегистрироватьПовторноПоВидуСобытия(ВидСобытия)
	
	Результат =  Ложь;
	
	МассивВидовСобытий = Новый Массив;
	МассивВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.ДоступнаВиза);
	МассивВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.ЗаписанДокумент);
	МассивВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.ЗаписанСправочник);
	МассивВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования);
	МассивВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора);
	МассивВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей);
	МассивВидовСобытий.Добавить(Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуНачислений);

	Если МассивВидовСобытий.Найти(ВидСобытия) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции 

// Процедура устанавливает видимость элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	ЭтоИзменениеСтатуса = ?(Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.УстановленСтатус,Истина,Ложь);
	ЭтоУстановленаВиза  = ?(Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ПринятоРешение,Истина,Ложь);
	ЭтоДоступнаВиза     = ?(Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ДоступнаВиза,Истина,Ложь);
	НеРегистрироватьПовторно = НеРегистрироватьПовторноПоВидуСобытия(Объект.ВидСобытия);
	
	Если НЕ Элементы.Статус.Видимость = ЭтоИзменениеСтатуса Тогда
		Элементы.Статус.Видимость  = ЭтоИзменениеСтатуса;		
	КонецЕсли; 
	
	Элементы.Виза.Видимость    = ЭтоУстановленаВиза ИЛИ ЭтоДоступнаВиза;
	Элементы.Решение.Видимость = ЭтоУстановленаВиза;

	ЭтоИзменениеСостоянияПроцесса = ?(Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеПроцесса,Истина,Ложь);
	ЭтоИзменениеСостоянияЗадачи   = ?(Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеЗадачи,Истина,Ложь);
	
	Элементы.АлгоритмПроцесса.Видимость = ЭтоИзменениеСостоянияПроцесса
										ИЛИ ЭтоИзменениеСостоянияЗадачи;
										
	Элементы.ТочкаАлгоритма.Видимость = ЭтоИзменениеСостоянияЗадачи;
	
	Элементы.Статус.Видимость = ЭтоИзменениеСтатуса
								ИЛИ ЭтоИзменениеСостоянияПроцесса
								ИЛИ ЭтоИзменениеСостоянияЗадачи;
								
	ЭтоДокументыДляВизирования = ?(Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования,Истина,Ложь);
	
	Элементы.ГруппаСтраницаУсловие.Видимость = НЕ ЭтоДокументыДляВизирования;
	
	Элементы.ОбъектСистемы.Доступность = НЕ ЭтоДокументыДляВизирования;
	
	Если ЭтоИзменениеСостоянияПроцесса
		ИЛИ ЭтоИзменениеСостоянияЗадачи Тогда
		Элементы.Статус.Заголовок = "Состояние";
	Иначе
		Элементы.Статус.Заголовок = "Статус";
	КонецЕсли;
	
	Если НеобходимоИнициализироватьКомпоновщик() Тогда
		
		Элементы.ГруппаСтраницаНастройкаОтбора.Видимость = Истина;
		Элементы.ГруппаСтраницаУсловие.Видимость = Ложь;
		Элементы.ОбъектСистемы.ТолькоПросмотр = Истина;
		
	Иначе
		
		Элементы.ГруппаСтраницаУсловие.Видимость = НЕ ЭтоДокументыДляВизирования;
		Элементы.ГруппаСтраницаНастройкаОтбора.Видимость = Ложь;
		Элементы.ОбъектСистемы.ТолькоПросмотр = Ложь;

	КонецЕсли;
	
	Элементы.ФоновыйРежим.Видимость = ЭтоДоступнаВиза;
	Элементы.НеРегистрироватьПовторно.Видимость = НеРегистрироватьПовторно;
	Элементы.НеРегистрироватьПовторно.ОтображениеПодсказки = ?(ЭтоДоступнаВиза, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
	
	ДоступноСоздаватьОбсуждение = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		Если ОбсужденияСлужебныйВызовСервера.Подключены() Тогда
			ДоступноСоздаватьОбсуждение = Истина;
		КонецЕсли; 
	КонецЕсли; 

	Элементы.ПолучателиСоздаватьОбсуждение.Видимость = ДоступноСоздаватьОбсуждение;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура обновляет дерево условий, отображающее структуру пользовательского условия.
// 
&НаСервере
Процедура ОбновитьДеревоУсловия()
	
	ДанныеДерева = ДеревоУсловия.ПолучитьЭлементы();
	ДанныеДерева.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ПользовательскоеУсловие) Тогда
		
		Для каждого СтрокаТаблицы Из Объект.ПользовательскоеУсловие.Условия Цикл
			
			ЭлементДерева = ДанныеДерева.Добавить();
			ЭлементДерева.ВидСтроки = "Условие";
			ЗаполнитьЗначенияСвойств(ЭлементДерева,СтрокаТаблицы);
			
			СтрОтбор = Новый Структура("ИД_Условия",СтрокаТаблицы.ИД);
			
			МассивСтрокПараметров = Объект.ПользовательскоеУсловие.ПараметрыУсловий.НайтиСтроки(СтрОтбор);
			
			Если МассивСтрокПараметров.Количество() > 0  Тогда
				
		       КоллекцияЭлементовВерх = ЭлементДерева.ПолучитьЭлементы();
				
				Для каждого СтрокаПараметр Из МассивСтрокПараметров Цикл
					
					ЭлементДереваПараметр = КоллекцияЭлементовВерх.Добавить();
					ЭлементДереваПараметр.Свойство = СтрокаПараметр.Имя;
					ЭлементДереваПараметр.ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.Равно;
					ЭлементДереваПараметр.ВидСтроки = "Параметр";
					ЭлементДереваПараметр.ИД        = СтрокаПараметр.ИД_Условия;
					ЭлементДереваПараметр.Значение  = СтрокаПараметр.Значение;
					
				КонецЦикла; // По параметрам условия
				
			КонецЕсли;// Есть параметры
			
		КонецЦикла; // По таблице условий
	
	КонецЕсли; 
	
КонецПроцедуры // ОбновитьДеревоУсловия()

// Процедура открывает форму редактирования пользовательского условия.
// 
&НаКлиенте
Процедура РедактироватьПользовательскоеУсловие()
	
	ПользовательскоеУсловие = Объект.ПользовательскоеУсловие; 
	
	Если ЗначениеЗаполнено(ПользовательскоеУсловие) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ПользовательскоеУсловие);
		
		Обработчик = Новый ОписаниеОповещения("РедактироватьПользовательскоеУсловиеЗавершение", ЭтотОбъект);
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.бит_ПользовательскиеУсловия.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, Обработчик, Режим);
		
	КонецЕсли; 
	
КонецПроцедуры // РедактироватьПользовательскоеУсловие()

// Процедура обработчик оповещения "РедактироватьПользовательскоеУсловиеЗавершение".
// 
// Параметры:
// Результат - Произвольный.
// ДополнительныеПараметры - Структура.
// 
&НаКлиенте
Процедура РедактироватьПользовательскоеУсловиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	  ОбновитьДеревоУсловия();	
	
КонецПроцедуры

// Процедура обрабатывает изменение объекта системы.
// 
&НаСервере
Процедура ИзменениеОбъектаСистемы()
	
	мКэшЗначений.СписокВыражений = СформироватьСписокВыражений();
	
	мКэшЗначений.СписокДоступныхСтатусов = ПолучитьСписокДоступныхСтатусов();
	
	НайденноеЗначение = мКэшЗначений.СписокДоступныхСтатусов.НайтиПоЗначению(Объект.Статус);
	
	Если НайденноеЗначение = Неопределено Тогда
		Объект.Статус = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ИзменениеОбъектаСистемы()

// Функция формирует список доступных выражений для вычисления получателя.
// 
// 
&НаСервере
Функция СформироватьСписокВыражений()
	
	СписокВыражений = Новый СписокЗначений;
	
	СписокВыражений.Добавить("Пользователь","Пользователь");
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектСистемы.ИмяОбъектаПолное);
	
	Переход = Ложь;
	Если НеобходимоИнициализироватьКомпоновщик() Тогда
		
		СписокВыражений.Добавить("ТекущийОбъект.Контрагент","ТекущийОбъект.Контрагент");
		
		Переход = Истина;
	КонецЕсли;
	
	Если НЕ МетаОбъект = Неопределено И НЕ Переход Тогда
		
		Для каждого МетаРеквизит Из МетаОбъект.Реквизиты Цикл
			
			Если МетаРеквизит.Тип.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
				
				СписокВыражений.Добавить("ТекущийОбъект."+МетаРеквизит.Имя);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если МетаОбъект.Имя = "бит_уп_Задача" Тогда
		
				СписокВыражений.Добавить("ТекущийОбъект.Исполнитель");
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СписокВыражений;
	
КонецФункции // СформироватьСписокВыражений()

&НаСервере
Функция ПолучитьСписокДоступныхСтатусов()
	
	СписокДоступныхСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатусыОбъектов.Ссылка
	|ИЗ
	|	Справочник.бит_СтатусыОбъектов КАК бит_СтатусыОбъектов
	|ГДЕ
	|	бит_СтатусыОбъектов.Объект = &ОбъектСистемы";
	Запрос.УстановитьПараметр("ОбъектСистемы", Объект.ОбъектСистемы);
	
	Результат = Запрос.Выполнить();
	
	МассивСтатусов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	СписокДоступныхСтатусов.ЗагрузитьЗначения(МассивСтатусов);
	
	Возврат СписокДоступныхСтатусов;
	
КонецФункции

// Процедура заполняет реквизит ОбъектСистемы некоторым значением по-умолчания для текущего вида события.
// 
&НаСервере
Процедура УстановитьОбъектПоВидуСобытия()
	
	Если Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования Тогда
		
		МетаОбъект = Метаданные.Обработки.бит_РабочееМестоВизирования;
		
		Объект.ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
		
	ИначеЕсли Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеПроцесса Тогда
		
		МетаОбъект = Метаданные.БизнесПроцессы.бит_уп_Процесс;
		
		Объект.ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
		
	ИначеЕсли Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ИзмененоСостояниеЗадачи Тогда
		
		МетаОбъект = Метаданные.Задачи.бит_уп_Задача;
		
		Объект.ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);	
		
	ИначеЕсли Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуНачислений  
		       ИЛИ Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей Тогда

			   Если бит_РаботаСМетаданными.ЕстьДокумент("бит_ДополнительныеУсловияПоДоговору")	Тогда   
				   
				   МетаОбъект = Метаданные.Документы.бит_ДополнительныеУсловияПоДоговору;
				   
				   Объект.ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
				   
			   КонецЕсли;
		
	ИначеЕсли Объект.ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора Тогда

		МетаОбъект = Метаданные.Справочники.ДоговорыКонтрагентов;
		
		Объект.ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(МетаОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
	
	ТекущийОбъект.СохранитьНастройкиКомпоновщика(СтруктураНастройки);

КонецПроцедуры

// Процедура заполняет колонку СпособТранспорта таблицы Получатели
//
&НаСервере
Процедура ДоработатьТаблицуПолучатели(ТекОбъект)
	
	Для каждого СтрокаТаблицы Из Объект.Получатели Цикл
		
		СтрокаТаблицы.СпособТранспорта = СтрокаТаблицы.НастройкаДоставки.СпособТранспорта;
		
	КонецЦикла; 
	
КонецПроцедуры // ДоработатьТаблицуПолучатели()

// Процедура разворачивает дерево.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура РазвернутьДерево()

	ЭлементыДерева = ДеревоУсловия.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл

		Элементы.ДеревоУсловия.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция НеобходимоОграничитьСписокОбъектов()

	Если Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.ПринятоРешение 
		ИЛИ Объект.ВидСобытия = мКэшЗначений.Перечисления.бит_фн_ВидыСобытийОповещений.УстановленСтатус Тогда
		
		флНеобходимоОграничить = Истина;	
		
	Иначе
		
		флНеобходимоОграничить = Ложь;
		
	КонецЕсли; 	

	Возврат флНеобходимоОграничить;
	
КонецФункции // НеобходимоОграничитьСписокОбъектов()

#КонецОбласти
