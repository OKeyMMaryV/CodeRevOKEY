#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция получает таблицу реквизитов для регистра.
//
// Параметры:
//  ОбъектСистемы				 - СправочникСсылка.бит_ОбъектыСистемы	 - объект системы.
//  Источник					 - СправочникСсылка.бит_ОбъектыСистемы	 - источник.
//  Приемник					 - СправочникСсылка.бит_ОбъектыСистемы	 - приемник.
//  УчитыватьКорреспонденцию	 - СправочникСсылка.бит_ОбъектыСистемы	 - учитывать корреспонденцию.
//  ДобавлятьИменаВидовСубконто	 - СправочникСсылка.бит_ОбъектыСистемы	 - добавлять имена субконто.
// 
// Возвращаемое значение:
//  ТаблицаРеквизитов - ТаблицаЗначений.
//
Функция ПолучитьТаблицуРеквизитов(ОбъектСистемы, Источник, Приемник, УчитыватьКорреспонденцию, ДобавлятьИменаВидовСубконто) Экспорт

	// Получение таблицы реквизитов
	ТаблицаРеквизитов = бит_МеханизмТрансляции.ИнициализироватьТаблицуРеквизитов();
	
	Если НЕ ЗначениеЗаполнено(ОбъектСистемы) Тогда
		
		флДобавитьДтКт = НЕ УчитыватьКорреспонденцию 
		                 И (Источник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии 
						    ИЛИ Приемник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
							
		бит_МеханизмТрансляции.ДополнитьТаблицуПредопределеннымиРеквизитамиДвижений(ТаблицаРеквизитов,флДобавитьДтКт,Приемник);
		
	Иначе	
		
		Если ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии Тогда
			ТаблицаРеквизитов = бит_МеханизмТрансляции.ПолучитьРеквизитыРегистраБухгалтерии(ОбъектСистемы.ИмяОбъекта, УчитыватьКорреспонденцию, ДобавлятьИменаВидовСубконто);
		ИначеЕсли ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления Тогда	
			ТаблицаРеквизитов = бит_МеханизмТрансляции.ПолучитьРеквизитыРегистраНакопления(ОбъектСистемы.ИмяОбъекта);
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат ТаблицаРеквизитов

КонецФункции // ПолучитьТаблицуРеквизитов()

// Функция добавляет информацию о произвольном измерении.
//
// Параметры:
//  СтрокаТаблицы		 - СтрокаТаблицыЗначений - строка таблицы.
//  НастройкиИзмерений	 - Соответствие	 - настройки измерений.
//
Процедура ДобавитьИнформациюОбИзмерении(СтрокаТаблицы, НастройкиИзмерений) Экспорт
	
	ТекНастройкаИзмерения = НастройкиИзмерений[СтрокаТаблицы.ИмяРеквизита];
	Если НЕ ТекНастройкаИзмерения = Неопределено Тогда
		
		СтрокаТаблицы.Синоним = СтрокаТаблицы.Синоним+": "+ТекНастройкаИзмерения.Синоним;
		МассивТипов = ТекНастройкаИзмерения.ТипЗначения.Типы();
		МассивТипов.Добавить(Тип("Строка"));
		
		НовоеОписание = Новый ОписаниеТипов(МассивТипов,,,,Новый КвалификаторыСтроки(900));
		
		СтрокаТаблицы.Тип = НовоеОписание;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьИнформациюОбИзмерении()
 
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьОписаниеТиповКолонки() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураКонструктор.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_СтруктураКонструктораПравилТрансляции.КолонкиПравилТрансляции КАК СтруктураКонструктор
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтруктураКонструктор.ТипыЗначенийСтр КАК СТРОКА(10))) = """"";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		флЕстьИзменения = Ложь;
		Для каждого СтрокаТаблицы Из СпрОб.КолонкиПравилТрансляции Цикл
			 Если ПустаяСтрока(СтрокаТаблицы.ТипыЗначенийСтр) Тогда
				 
				  флЕстьИзменения = Истина;
			 	  ОписаниеТипов = СтрокаТаблицы.ТипыЗначений.Получить();
				  Если ТипЗнч(ОписаниеТипов) = Тип("ОписаниеТипов") Тогда
					  СтрокаТаблицы.ТипыЗначенийСтр = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ОписаниеТипов);
				  Иначе
					  СтрокаТаблицы.ТипыЗначенийСтр = "Строка";
				  КонецЕсли; 
			 КонецЕсли; 
		КонецЦикла;  // По таб. части
		
		Если флЕстьИзменения Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
		КонецЕсли; 
	КонецЦикла; // По выборке
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // КонвертироватьКонструкторыПравилТрансляции()

Процедура ЗаполнитьКолонкуОписанияТиповПриПереходеНаНовуюВерсию() Экспорт

	НачатьТранзакцию();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КолонкиПравилТрансляции.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бит_СтруктураКонструктораПравилТрансляции.КолонкиПравилТрансляции КАК КолонкиПравилТрансляции";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.бит_СтруктураКонструктораПравилТрансляции");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Ссылка");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;	
	Блокировка.Заблокировать();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		Для каждого СтрокаТаблицы Из ТекущийОбъект.КолонкиПравилТрансляции Цикл		
			ОписаниеТипов = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.ТипыЗначенийСтр);
			СтрокаТаблицы.ТипыЗначений = Новый ХранилищеЗначения(ОписаниеТипов);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТекущийОбъект, Истина, Ложь); 
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
 
#КонецОбласти 

#КонецЕсли
