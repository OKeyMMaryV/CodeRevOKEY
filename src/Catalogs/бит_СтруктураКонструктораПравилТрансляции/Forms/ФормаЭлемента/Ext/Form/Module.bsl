
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

&НаКлиенте
Перем мСпецСимволы; // Хранит перечень спец символов, запрещенных к вводу в именах реквизитов.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц(Параметры.ЗначениеКопирования);
	КонецЕсли; 
	
	Если Объект.КолонкиПравилТрансляции.Количество() > 0 Тогда
		Элементы.КолонкиПравилТрансляции.ТекущаяСтрока = Объект.КолонкиПравилТрансляции[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
	 УправлениеФормой(ЭтотОбъект);
	 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("Источник");
	мКэшРеквизитовФормы.Вставить("Приемник");
	мКэшРеквизитовФормы.Вставить("УчитыватьКорреспонденцию");
	
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();
											   
    мСпецСимволы = " ,;:[]{}'""/\?!@#$%^&*+=<>~`|()№";
												   
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для каждого СтрокаТаблицы Из ТекущийОбъект.КолонкиПравилТрансляции Цикл
		ДанныеФормы = Объект.КолонкиПравилТрансляции.НайтиСтроки(Новый Структура("ИмяКолонки",СтрокаТаблицы.ИмяКолонки))[0];
		СтрокаТаблицы.ТипыЗначений = Новый ХранилищеЗначения(ДанныеФормы.ТипыЗначенийВФорме);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.КолонкиПравилТрансляции.Количество() > 0 Тогда
		СтрокаТаблицы = Объект.КолонкиПравилТрансляции[0];
		Если СтрокаТаблицы.ПоложениеКолонки <> Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка Тогда
			ТекстПояснения = НСтр("ru = 'Первая колонка должна быть в положении ""Новая колонка"".'");
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,"Корректность",
				НСтр("ru = 'Положение'"),,,ТекстПояснения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КолонкиПравилТрансляции[0].НаименованиеКолонки", "Объект",Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
		
	ТекНаименование = СформироватьНаименование(Объект.Источник, Объект.Приемник);
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(ТекНаименование);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
		
	ТекНаименование = СформироватьНаименование(Объект.Источник, Объект.Приемник);
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(ТекНаименование);

КонецПроцедуры

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ИсточникПриИзменениеЗавершение", ЭтотОбъект);
	
	Если Объект.КолонкиПравилТрансляции.Количество()>0 Тогда
		ТекстВопроса =  НСтр("ru = 'Колонки правил будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 	
	
КонецПроцедуры

// Процедура обработчик оповещения "ИсточникПриИзменениеЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ИсточникПриИзменениеЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.КолонкиПравилТрансляции.Очистить();
		
		Отказ = Ложь;
		Состояние( НСтр("ru = 'Заполнение колонок правил...'"));	
		ИсточникИзменение(Отказ);
		
		Если Отказ Тогда
			ИзвлечьИзКэша("Источник");
		Иначе
			ДобавитьВКэш("Источник");
			ДобавитьВКэш("УчитыватьКорреспонденцию");	
		КонецЕсли; 
	Иначе	
		ИзвлечьИзКэша("Источник");
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = СформироватьСписокДоступныхВидовРегистров();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.Источник);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемникПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ПриемникПриИзменениеЗавершение", ЭтотОбъект);
	Если Объект.КолонкиПравилТрансляции.Количество()>0 Тогда
		ТекстВопроса =  НСтр("ru = 'Колонки правил будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 	
	
КонецПроцедуры

// Процедура обработчик оповещения "ПриемникПриИзменениеЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ПриемникПриИзменениеЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.КолонкиПравилТрансляции.Очистить();
		
		Отказ = Ложь;
		Состояние( НСтр("ru = 'Заполнение колонок правил...'"));
		ПриемникИзменение(Отказ);
		
		Если Отказ Тогда
			ИзвлечьИзКэша("Приемник");
		Иначе
			ДобавитьВКэш("Приемник");
			ДобавитьВКэш("УчитыватьКорреспонденцию");	
		КонецЕсли; 
	Иначе	
		ИзвлечьИзКэша("Приемник");
	КонецЕсли; 
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = СформироватьСписокДоступныхВидовРегистров();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           ,СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   ,Объект.Приемник);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКорреспонденциюПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("УчитыватьКорреспонденциюЗавершение", ЭтотОбъект);
	Если Объект.КолонкиПравилТрансляции.Количество()>0 Тогда
		ТекстВопроса =  НСтр("ru = 'Колонки правил будут очищены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,5,КодВозвратаДиалога.Нет); 
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обработчик оповещения "УчитыватьКорреспонденциюЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура УчитыватьКорреспонденциюЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.КолонкиПравилТрансляции.Очистить();
		Состояние( НСтр("ru = 'Заполнение колонок правил...'"));
		
		УчитыватьКорреспонденциюИзменение();
		ДобавитьВКэш("УчитыватьКорреспонденцию");
	Иначе
		ИзвлечьИзКэша("УчитыватьКорреспонденцию");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКолонкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КолонкиПравилТрансляции.ТекущиеДанные;
	ТекущиеДанные.ИмяКолонки = бит_ОбщегоНазначенияКлиентСервер.ПроверитьСпецСимволы(
									ТекущиеДанные.ИмяКолонки ,мСпецСимволы, Нстр("ru = 'Имя колонки'"));
	
КонецПроцедуры
								
&НаКлиенте
Процедура ТипыЗначенийВФормеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КолонкиПравилТрансляции.ТекущиеДанные;
	ОписаниеТипа = ТекущиеДанные.ТипыЗначенийВФорме;
	Если ОписаниеТипа.СодержитТип(Тип("Строка"))
	   И (ОписаниеТипа.КвалификаторыСтроки.Длина = 0 
	 ИЛИ ОписаниеТипа.КвалификаторыСтроки.Длина > 900) Тогда
			ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа,,,,Новый КвалификаторыСтроки(900));
			ТекущиеДанные.ТипыЗначенийВФорме = ОписаниеТипа;
			ТекстСообщения = НСтр("ru = 'Длина строки не может быть нулевой или больше 900.
							            |Длина приведена к 900.'");
			ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыКолонкиПравилТрансляции

&НаКлиенте
Процедура КолонкиПравилТрансляцииПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.КолонкиПравилТрансляции.ТекущиеДанные;
	// ++ NB Требуется управлять доступностью ЭУ в зависимости от строк.
	
КонецПроцедуры

&НаКлиенте
Процедура КолонкиПравилТрансляцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущаяСтрока = Элементы.КолонкиПравилТрансляции.ТекущиеДанные;	
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Режим"      , "ПоляПриемника");
		ПараметрыФормы.Вставить("Источник"   , Объект.Источник);	
		ПараметрыФормы.Вставить("Приемник"   , Объект.Приемник);
		ПараметрыФормы.Вставить("ТекущееПоле", ТекущаяСтрока.ИмяРеквизита);
		
		Оповещение = Новый ОписаниеОповещения("ОткрытиеФормаВыбораПоляЗавершение", ЭтотОбъект);
		РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ОткрытьФорму("Справочник.бит_СтруктураКонструктораПравилТрансляции.Форма.ФормаВыбораПоля", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОкна);
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик завершения отрытия формы.
//  См. Синтакс-помощник: ОткрытьФорму().
//
&НаКлиенте 
Процедура ОткрытиеФормаВыбораПоляЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")  Тогда
		ОчиститьСообщения();
		ОбработкаВыбораПоля(Результат);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьТипы(Команда)
	
	ОбновитьТипыКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМакетПравил(Команда)
	
	ПараметрыФормы = ПараметрыФормыМакета();
	ОткрытьФорму("Справочник.бит_СтруктураКонструктораПравилТрансляции.Форма.МакетПравил", 
		ПараметрыФормы, ЭтотОбъект, ЭтотОбъект,,);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКэшемРеквизитовФормы

&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект;
	
	Элементы.КолонкиПравилТрансляции.Доступность = ЗначениеЗаполнено(Объект.Источник) 
		И ЗначениеЗаполнено(Объект.Приемник);

КонецПроцедуры
 
&НаСервере
Функция ЗаполнитьТаблицуРеквизитовИсточника()

	ТабВрем = Неопределено;
	Если ЗначениеЗаполнено(Объект.Источник) Тогда
	
		 ТабВрем = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ЗаполнитьТаблицуРеквизитов(Объект.Источник);
		 фАдресРеквизитыИсточника = ПоместитьВоВременноеХранилище(ТабВрем, УникальныйИдентификатор);
	
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции // ЗаполнитьТаблицуРеквизитовИсточника()

&НаСервере
Функция ТаблицаРеквизитовИсточника()

	ТабВрем = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(фАдресРеквизитыИсточника) Тогда
	
		ТабВрем = ПолучитьИзВременногоХранилища(фАдресРеквизитыИсточника);
	
	КонецЕсли; 
	
	Если НЕ ТипЗнч(ТабВрем) = Тип("ТаблицаЗначений") Тогда
		
		ТабВрем = ЗаполнитьТаблицуРеквизитовИсточника();
	
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуРеквизитовПриемника()
	
	Если ЗначениеЗаполнено(Объект.Приемник) Тогда
		
		ТабВрем = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ЗаполнитьТаблицуРеквизитов(Объект.Приемник);
		фАдресРеквизитыПриемника = ПоместитьВоВременноеХранилище(ТабВрем, УникальныйИдентификатор);
		
	КонецЕсли; 
	
	Возврат ТабВрем;
	
КонецФункции // ЗаполнитьТаблицуРеквизитовПриемника()

&НаСервере
Функция ПолучитьТаблицуРеквизитовПриемника()

	ТабВрем = Неопределено;

	Если ЭтоАдресВременногоХранилища(фАдресРеквизитыПриемника) Тогда
		ТабВрем = ПолучитьИзВременногоХранилища(фАдресРеквизитыПриемника);
	КонецЕсли; 
	
	Если НЕ ТипЗнч(ТабВрем) = Тип("ТаблицаЗначений") Тогда		
		ТабВрем = ЗаполнитьТаблицуРеквизитовПриемника();
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции // ПолучитьТаблицуРеквизитовПриемника()

&НаСервере
Процедура ЗаполнитьНаименованиеПоУмолчанию()

	Если ПустаяСтрока(Объект.Наименование) Тогда
	
		Если ЗначениеЗаполнено(Объект.Источник) И ЗначениеЗаполнено(Объект.Приемник) Тогда
		
			 Объект.Наименование = СформироватьНаименование(Объект.Источник, Объект.Приемник);
		
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьНаименованиеПоУмолчанию()

&НаСервере
Процедура ПринудительноУстановитьКорреспонденцию()

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		 И ЗначениеЗаполнено(Объект.Источник) 
		 И ЗначениеЗаполнено(Объект.Приемник) Тогда
	
		Если Объект.Приемник.ИмяОбъектаПолное = "РегистрНакопления.бит_ОборотыПоБюджетам" Тогда
			 Объект.УчитыватьКорреспонденцию = Истина;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ПринудительноУстановитьКорреспонденцию()

&НаСервере
Процедура ИсточникИзменение(Отказ)

	СписокВидовОбъектов = СформироватьСписокДоступныхВидовРегистров();

	Если ЗначениеЗаполнено(Объект.Источник) И СписокВидовОбъектов.НайтиПоЗначению(Объект.Источник.ВидОбъекта) = Неопределено Тогда
		Отказ = Истина;
		ВывестиСообщениеОВидеОбъекта();		
	КонецЕсли; 
	
	Если НЕ Отказ Тогда		
		Если ЗначениеЗаполнено(Объект.Источник) И ЗначениеЗаполнено(Объект.Приемник) Тогда			
			ПринудительноУстановитьКорреспонденцию();
	        ОбновитьКолонкиПравил();
			ЗаполнитьНаименованиеПоУмолчанию();			
		КонецЕсли; 		
	КонецЕсли; 

	УстановитьВидимость();

КонецПроцедуры // ИсточникИзменение()

&НаСервере
Процедура ПриемникИзменение(Отказ)

	СписокВидовОбъектов = СформироватьСписокДоступныхВидовРегистров();

	Если ЗначениеЗаполнено(Объект.Источник) И СписокВидовОбъектов.НайтиПоЗначению(Объект.Приемник.ВидОбъекта) = Неопределено Тогда
	
		Отказ = Истина;
		ВывестиСообщениеОВидеОбъекта();
	
	КонецЕсли; 
	
	Если НЕ Отказ Тогда	
		Если ЗначениеЗаполнено(Объект.Источник) И ЗначениеЗаполнено(Объект.Приемник) Тогда			
			ПринудительноУстановитьКорреспонденцию();
	        ОбновитьКолонкиПравил();
			ЗаполнитьНаименованиеПоУмолчанию();			
		КонецЕсли; 		
	КонецЕсли; 

	УстановитьВидимость();
	
КонецПроцедуры // ПриемникИзменение()

&НаСервере
Процедура УчитыватьКорреспонденциюИзменение()
	
	Если ЗначениеЗаполнено(Объект.Источник) И ЗначениеЗаполнено(Объект.Приемник) Тогда
		
		ОбновитьКолонкиПравил();
		ЗаполнитьНаименованиеПоУмолчанию();
		
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // УчитыватьКорреспонденциюИзменение()

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЧислоБольше_1(ВхСимвол)
	
	ЭтоЧисло = КодСимвола(ВхСимвол) >= 50 И КодСимвола(ВхСимвол) <= 57; 
	
	Возврат ЭтоЧисло;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПрефикс(ВидКолонки)

	Если ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.РеквизитИсточника Тогда
		Префикс = "Источник";
	ИначеЕсли ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.РеквизитПриемника Тогда
		Префикс = "Приемник";
	Иначе
		Префикс = "";
	КонецЕсли; 
	
	Возврат Префикс;
КонецФункции // СформироватьПрефикс()

&НаСервере
Процедура ПеренумероватьКолонкиПравил()

	Объект.КолонкиПравилТрансляции.Сортировать("НомерКолонки");	
	
	Счетчик = 10;
	Для каждого СтрокаТаблицы Из Объект.КолонкиПравилТрансляции Цикл
		
		СтрокаТаблицы.НомерКолонки = Счетчик;
		
		Счетчик = Счетчик + 10;
	КонецЦикла; 

КонецПроцедуры // ПеренумероватьКолонкиПравил()

&НаСервере
Процедура УпорядочитьКолонки(ИмяКоллекцииКолонок,СтрокаИсключение="")
	
	Счетчик = 1;
	НачальныйНомер = 0;
	Для каждого СтрокаТабЧасти Из Объект.КолонкиПравилТрансляции Цикл
		
		Если Найти(СтрокаТабЧасти.ИмяКолонки,ИмяКоллекцииКолонок)>0 
			И ?(ПустаяСтрока(СтрокаИсключение),Истина,Найти(СтрокаТабЧасти.ИмяКолонки,СтрокаИсключение)=0) Тогда
			
			Если Счетчик = 1 Тогда
				
				НачальныйНомер = СтрокаТабЧасти.НомерКолонки;
			Иначе
				СтрокаТабЧасти.НомерКолонки = НачальныйНомер + Счетчик;
				
			КонецЕсли; 
			Счетчик = Счетчик + 1;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // УпорядочитьКолонки()

&НаСервере
Функция ОпределитьВидКолонки(ОбъектСистемы,ИмяРеквизита)

	Если ОбъектСистемы = Объект.Источник Тогда
		ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.РеквизитИсточника;
	ИначеЕсли ОбъектСистемы = Объект.Приемник Тогда
		ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.РеквизитПриемника;
	Иначе
		Если ИмяРеквизита = "ПроизвольныйКод" Тогда
		   ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.РеквизитПриемника;
	   ИначеЕсли ИмяРеквизита = "КоэффициентСумма" Тогда
		   ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.ДополнительныеДанные;
	   ИначеЕсли ИмяРеквизита = "КоэффициентКоличество" Тогда
		   ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.ДополнительныеДанные;
	   ИначеЕсли ИмяРеквизита = "СпособЗаполненияСуммы" Тогда
		   ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.ДополнительныеДанные;
	   ИначеЕсли ИмяРеквизита = "ИспользоватьИсторическиеКурсы" Тогда
		   ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.ДополнительныеДанные;
	   ИначеЕсли Найти(ИмяРеквизита,"ДополнительноеПоле")>0 Тогда
		   ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.ДополнительныеДанные;		   
	   Иначе	
		   ВидКолонки = Перечисления.бит_ВидыКолонокПравилТрансляции.Прочее;
	   КонецЕсли; 
	КонецЕсли; 

	Возврат ВидКолонки;
	
КонецФункции // ОпределитьВидКолонки()

&НаСервере
Функция ДобавитьОписаниеКолонкиПравил(ОбъектСистемы, СтрокаТаблицы, НомерКолонки, ДобавлятьСтроковойТипПолейПриемника = Ложь)

	ВидКолонки = ОпределитьВидКолонки(ОбъектСистемы,СтрокаТаблицы.ИмяРеквизита);
	Префикс    = СформироватьПрефикс(ВидКолонки);
	ИмяОбъекта = ?(ЗначениеЗаполнено(ОбъектСистемы),ОбъектСистемы.ИмяОбъекта,"");
	
	ИмяКолонки = ИмяОбъекта + ?(ПустаяСтрока(ИмяОбъекта),"","_")+СтрокаТаблицы.ИмяРеквизита;
	
	// Проверка на уникальность имени колонки
	СтрОтбор    = Новый Структура("ИмяКолонки", ИмяКолонки);
	МассивСтрок = Объект.КолонкиПравилТрансляции.НайтиСтроки(СтрОтбор);
	НайденнаяСтрока = ?(МассивСтрок.Количество()>0,МассивСтрок[0],Неопределено);
	Если НайденнаяСтрока <> Неопределено Тогда
		
		ШаблонСообщения = СтрШаблон(НСтр("ru = 'Колонка правил с именем ""%1"" уже добавлена.'"), ИмяКолонки);
		Поле = "КолонкиПравилТрансляции[%1].НаименованиеКолонки";
		Поле = СтрШаблон(Поле, Формат(НайденнаяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ="));
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Некорректно заполнена свойство ""%1"" в строке %2 списка ""%3"". %4'"), 
			Нстр("ru = 'Имя колонки'"), НайденнаяСтрока.НомерСтроки, Нстр("ru = 'Колонки правил'"), ШаблонСообщения);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "Объект");

		Возврат НайденнаяСтрока;		
	КонецЕсли; 
	
	НоваяСтрока = Объект.КолонкиПравилТрансляции.Добавить();
	
	НоваяСтрока.НаименованиеКолонки = Префикс+?(ПустаяСтрока(Префикс),""," - ")+СтрокаТаблицы.Синоним;
	НоваяСтрока.ИмяКолонки      = ИмяКолонки;
	
	Если ДобавлятьСтроковойТипПолейПриемника 
		 И Найти(НоваяСтрока.ИмяКолонки,"ИмяВидаСубконто") = 0 
		 И Найти(НоваяСтрока.ИмяКолонки,"Счет") = 0 
		 ИЛИ Найти(НоваяСтрока.ИмяКолонки,"БанковскийСчет") > 0  Тогда
		
		// Для полей приемника необходимо иметь возможность задать выражение.
		МассивВрем = СтрокаТаблицы.Тип.Типы();
		МассивВрем.Вставить(0, Тип("Строка"));
		
		ТекТип = Новый ОписаниеТипов(МассивВрем, ,Новый КвалификаторыСтроки(900));
		
	Иначе	
		
		ТекТип = СтрокаТаблицы.Тип;
		
	КонецЕсли; 
	
	НоваяСтрока.ТипыЗначенийСтр    = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(ТекТип);
	НоваяСтрока.ТипыЗначенийВФорме = ТекТип;
	НоваяСтрока.ВидКолонки         = ВидКолонки;
	НоваяСтрока.НеБалансовый       = НЕ СтрокаТаблицы.Балансовый;
	НоваяСтрока.ИмяРеквизита       = СтрокаТаблицы.ИмяРеквизита;
	
	Если Найти(СтрокаТаблицы.ИмяРеквизита,"Субконто")>0 Тогда
		
		НоваяСтрока.ЭтоСубконто = Истина;
		
	КонецЕсли; 
	
	// Установка кнопок
	Если Найти(НоваяСтрока.ИмяКолонки,"ИмяВидаСубконто")>0 Тогда
		
		НоваяСтрока.КнопкаСпискаВыбора = Истина;
		
	ИначеЕсли НоваяСтрока.ИмяКолонки = "ДтКт" Тогда
		
		НоваяСтрока.КнопкаВыбора = Истина;
		
	ИначеЕсли Найти(НоваяСтрока.ИмяКолонки,"ВидСравнения") > 0 Тогда
		
		НоваяСтрока.КнопкаВыбора = Истина;
		
	ИначеЕсли Найти(НоваяСтрока.ИмяКолонки,"ОбъединениеСПоследующим") > 0 Тогда
		
		НоваяСтрока.КнопкаВыбора = Истина;
		
	ИначеЕсли НоваяСтрока.ИмяКолонки = "ПроизвольноеУсловие" Тогда
		
		НоваяСтрока.КнопкаОчистки  = Истина;
		НоваяСтрока.КнопкаВыбора   = Истина;		
		
	Иначе
		
		НоваяСтрока.КнопкаВыбора   = Истина;
		НоваяСтрока.КнопкаОткрытия = Истина;
		НоваяСтрока.КнопкаОчистки  = Истина;
		
	КонецЕсли; 
	
	НоваяСтрока.НомерКолонки = НомерКолонки;
	
	Если ЭтоЧислоБольше_1(Прав(НоваяСтрока.ИмяКолонки,1)) Тогда
		НоваяСтрока.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.НаСледующейСтроке;
	Иначе	
		НоваяСтрока.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка;
	КонецЕсли; 
	
	Возврат НоваяСтрока;				
	
КонецФункции

&НаСервере
Процедура ДобавитьКолонкиПравилДляРегистра(ОбъектСистемы,ДобавлятьИменаВидовСубконто,Счетчик, ДобавлятьСтроковойТипПолейПриемника = Ложь)

	ТаблицаРеквизитов = Справочники.бит_СтруктураКонструктораПравилТрансляции.ПолучитьТаблицуРеквизитов(ОбъектСистемы
															                                              , Объект.Источник
																										  , Объект.Приемник
																										  , Объект.УчитыватьКорреспонденцию
																										  , ДобавлятьИменаВидовСубконто);
	
	Если ТаблицаРеквизитов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектСистемы <> Неопределено Тогда
		// РегистрНакопления.бит_вго_ДанныеКорректировок.
		Если ОбъектСистемы.ИмяОбъектаПолное = "РегистрНакопления.бит_вго_ДанныеКорректировок" Тогда
			
			ОтборСтрок = Новый Структура("ИмяРеквизита", "ОперацияВГО");	
			МассивСтрокТаблицы = ТаблицаРеквизитов.НайтиСтроки(ОтборСтрок);
			Для каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
			
				ДобавитьОписаниеКолонкиПравил(ОбъектСистемы, СтрокаТаблицы, Счетчик);				
				Счетчик = Счетчик + 10;	
			
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриемникОборотыПоТипамПроводок = ?(ОбъектСистемы = Объект.Приемник 
	                                   И Объект.Приемник.ИмяОбъектаПолное = "РегистрНакопления.бит_ОборотыПоТипамПроводок", Истина, Ложь);
	
	// Все остальные случаи 			
	Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		
		Если НЕ СтрокаТаблицы.Использование 
			ИЛИ (Найти(СтрокаТаблицы.ИмяРеквизита,"Счет") > 0 
			И Найти(СтрокаТаблицы.ИмяРеквизита,"БанковскийСчет") = 0)
			ИЛИ Найти(СтрокаТаблицы.ИмяРеквизита,"Субконто") > 0 Тогда   			
			
			Если ОбъектСистемы = Объект.Источник 
				 И Найти(СтрокаТаблицы.ИмяРеквизита,"Субконто") > 0 Тогда
				 // Субконто источника по-умолчанию не добавляем.
				Продолжить;
			КонецЕсли; 
			
			Если Найти(СтрокаТаблицы.ИмяРеквизита, "ДополнительноеПоле_Счет") > 0 Тогда
				 Продолжить;
			КонецЕсли; 
			
			// В случае подбора по типам проводок по-умолчанию добаляем только ТипПроводки.
			// Код добавления  ниже.
			Если ПриемникОборотыПоТипамПроводок Тогда
				 Продолжить;
			КонецЕсли; 
			
			ДобавитьОписаниеКолонкиПравил(ОбъектСистемы, СтрокаТаблицы, Счетчик, ДобавлятьСтроковойТипПолейПриемника);				
			Счетчик = Счетчик + 10;	
		КонецЕсли;			
	КонецЦикла; 
	
	// Добавление сценария в для случая БУ --> ОборотыПоБюджетам.
	Если ОбъектСистемы = Объект.Приемник 
		 И (Объект.Приемник.ИмяОбъектаПолное = "РегистрНакопления.бит_ОборотыПоБюджетам" 
		     ИЛИ Объект.Приемник.ИмяОбъектаПолное = "РегистрБухгалтерии.бит_Бюджетирование") Тогда
	
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИмяРеквизита", "Сценарий");
		
		МассивСтрок = ТаблицаРеквизитов.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество() > 0 Тогда
			ДобавитьОписаниеКолонкиПравил(ОбъектСистемы, МассивСтрок[0], Счетчик, ДобавлятьСтроковойТипПолейПриемника);				
			Счетчик = Счетчик + 10;	
		КонецЕсли; 
	КонецЕсли; 
	
	// Добавление ЦФО в для случая ЛюбойИсточник --> РБ.бит_Бюджетирование.
	Если ОбъектСистемы = Объект.Приемник 
		 И Объект.Приемник.ИмяОбъектаПолное = "РегистрБухгалтерии.бит_Бюджетирование" Тогда
	
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИмяРеквизита", "ЦФО");
		
		МассивСтрок = ТаблицаРеквизитов.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество() > 0 Тогда
			ДобавитьОписаниеКолонкиПравил(ОбъектСистемы, МассивСтрок[0], Счетчик, ДобавлятьСтроковойТипПолейПриемника);				
			Счетчик = Счетчик + 10;	
		КонецЕсли; 
	КонецЕсли; 
	
	// Добавляем ТипПроводки для случая РБ --> ОборотыПоТипамПроводок.
	Если ПриемникОборотыПоТипамПроводок Тогда
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("ИмяРеквизита", "ТипПроводки");
		
		МассивСтрок = ТаблицаРеквизитов.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество() > 0 Тогда
			ДобавитьОписаниеКолонкиПравил(ОбъектСистемы, МассивСтрок[0], Счетчик, ДобавлятьСтроковойТипПолейПриемника);				
			Счетчик = Счетчик + 10;	
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьКолонкиПравилДляРегистра()

&НаСервере
Процедура ОбновитьКолонкиПравил()

	Если НЕ ЗначениеЗаполнено(Объект.Источник) Тогда
		 Возврат;
	КонецЕсли; 
	 
	Если НЕ ЗначениеЗаполнено(Объект.Приемник) Тогда
		Возврат;
	КонецЕсли;  
	
	Объект.КолонкиПравилТрансляции.Очистить();
	
	Счетчик = 10;
	ДобавитьКолонкиПравилДляРегистра(Объект.Источник,Ложь,Счетчик);
	ДобавитьКолонкиПравилДляРегистра(Неопределено,Ложь,Счетчик);
	ДобавитьКолонкиПравилДляРегистра(Объект.Приемник, Истина, Счетчик, Истина);
	
	Если Объект.УчитыватьКорреспонденцию Тогда
		УпорядочитьКолонки(Объект.Источник.ИмяОбъекта+"_СубконтоДт");
		УпорядочитьКолонки(Объект.Источник.ИмяОбъекта+"_СубконтоКт");
		УпорядочитьКолонки(Объект.Источник.ИмяОбъекта+"_ИмяВидаСубконтоДт");	
		УпорядочитьКолонки(Объект.Источник.ИмяОбъекта+"_ИмяВидаСубконтоКт");
		УпорядочитьКолонки(Объект.Приемник.ИмяОбъекта+"_СубконтоДт");
		УпорядочитьКолонки(Объект.Приемник.ИмяОбъекта+"_СубконтоКт");		
		УпорядочитьКолонки(Объект.Приемник.ИмяОбъекта+"_ИмяВидаСубконтоДт");	
		УпорядочитьКолонки(Объект.Приемник.ИмяОбъекта+"_ИмяВидаСубконтоКт");						
	Иначе	
		УпорядочитьКолонки(Объект.Источник.ИмяОбъекта+"_Субконто");
		УпорядочитьКолонки(Объект.Источник.ИмяОбъекта+"_ИмяВидаСубконто");	
		УпорядочитьКолонки(Объект.Приемник.ИмяОбъекта+"_Субконто");
		УпорядочитьКолонки(Объект.Приемник.ИмяОбъекта+"_ИмяВидаСубконто");				
	КонецЕсли; 
	УпорядочитьКолонки("Условие","ПроизвольноеУсловие");
	УпорядочитьКолонки("ВидСравнения");
	УпорядочитьКолонки("Значение");
	УпорядочитьКолонки("ОбъединениеСПоследующим");
	
	СтрОтбор    = Новый Структура("ИмяКолонки", "ДтКт");
	МассивСтрок = Объект.КолонкиПравилТрансляции.НайтиСтроки(СтрОтбор);
	СтрокаТабЧасти = ?(МассивСтрок.Количество()>0,МассивСтрок[0],Неопределено);
	Если СтрокаТабЧасти <> Неопределено Тогда
		СтрокаТабЧасти.НомерКолонки = -1;
	КонецЕсли; 	
	
	ПеренумероватьКолонкиПравил();
	
КонецПроцедуры // ОбновитьКолонкиПравил()

&НаСервере
Функция ОбаРегистрыНакопления()

	флОбаРегистрыНакопления = (Объект.Приемник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления 
	                            И Объект.Источник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления);
								
	Возврат флОбаРегистрыНакопления;							

КонецФункции // ОбаРегистрыНакопления()

&НаСервере
Процедура УстановитьВидимость()

	флОбаРегистрыНакопления = ОбаРегистрыНакопления();
	Элементы.УчитыватьКорреспонденцию.Доступность = НЕ флОбаРегистрыНакопления;							

КонецПроцедуры // УстановитьВидимость()

&НаСервере
Функция ОпределитьМаксимальныйНомерКолонки()

	МаксимальныйНомер = 0;
	
	ТабВрем = Объект.КолонкиПравилТрансляции.Выгрузить();
	Если ТабВрем.Количество() >0 Тогда
		
		ТабВрем.Сортировать("НомерКолонки УБЫВ");
		МаксимальныйНомер = ТабВрем[0].НомерКолонки;
		
	КонецЕсли; 
	
    Возврат МаксимальныйНомер;
	
КонецФункции // ОпределитьМаксимальныйНомерКолонки()

&НаСервереБезКонтекста
Функция КоличествоКолонокШаблона(ТаблицаКолонок, ШаблонИмени)

	КоличествоВхождений = 0;
	
	Для каждого СтрокаТаблицы Из ТаблицаКолонок Цикл
	
		Если Найти(СтрокаТаблицы.ИмяКолонки, ШаблонИмени) > 0 Тогда
		
			 КоличествоВхождений = КоличествоВхождений + 1;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат КоличествоВхождений;
	
КонецФункции // КоличествоКолонокШаблона()

&НаСервере
Процедура ОбработкаВыбораПоля(РезультатВыбора)
	
	ТаблицаИсточник = ТаблицаРеквизитовИсточника();
	ТаблицаПриемник = ПолучитьТаблицуРеквизитовПриемника();
	
	НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхИзмерений();
	
	ТекущаяСтрока = НЕОПРЕДЕЛЕНО;
	ТекущийОбъект = НЕОПРЕДЕЛЕНО;
	НомерКолонки  = ОпределитьМаксимальныйНомерКолонки()+10;
	
	флДобавлятьСтроковойТип = Ложь;
	
	Если РезультатВыбора.ВидПоля = "ЗаписьИсточник" Тогда
		
		ТекущаяСтрока = ТаблицаИсточник.Найти(РезультатВыбора.Имя,"ИмяРеквизита");
		Справочники.бит_СтруктураКонструктораПравилТрансляции.ДобавитьИнформациюОбИзмерении(ТекущаяСтрока, НастройкиИзмерений); 

		ТекущийОбъект = Объект.Источник;
		
	ИначеЕсли РезультатВыбора.ВидПоля = "ЗаписьПриемник" Тогда	
		
		ТекущаяСтрока = ТаблицаПриемник.Найти(РезультатВыбора.Имя,"ИмяРеквизита");
		Справочники.бит_СтруктураКонструктораПравилТрансляции.ДобавитьИнформациюОбИзмерении(ТекущаяСтрока, НастройкиИзмерений); 
		
		ТекущийОбъект = Объект.Приемник;
		Если ТекущаяСтрока.Тип.Типы().Количество() = 1 И ТекущаяСтрока.Тип.СодержитТип(Тип("Булево")) Тогда
			флДобавлятьСтроковойТип = Ложь;
		Иначе	
			флДобавлятьСтроковойТип = Истина;
		КонецЕсли;  
		
	ИначеЕсли РезультатВыбора.ВидПоля = "Прочее" Тогда
		
		ТаблицаПрочее = Справочники.бит_СтруктураКонструктораПравилТрансляции.ПолучитьТаблицуРеквизитов(
							НЕОПРЕДЕЛЕНО, Объект.Источник, Объект.Приемник, Объект.УчитыватьКорреспонденцию, ЛОЖЬ);

		Если РезультатВыбора.Имя = "Условие" Тогда
			
			// Для условий отдельный алгоритм - необходимо добавить 4 колонки:
			// "Условие","ВидСравнения","Значение","ОбъединениеСПредыдущим".
			ТекущаяСтрока = НЕОПРЕДЕЛЕНО;
			
			// Определяем сколько условий уже добавлено
			НомерУсловия = 1;
			Пока ИСТИНА Цикл
				
				ИмяУсловие = "Условие" + НомерУсловия;  
				
				СтрОтбор = Новый Структура("ИмяРеквизита", ИмяУсловие);
				МассивСтрок = Объект.КолонкиПравилТрансляции.НайтиСтроки(СтрОтбор);
				СтрокаУсловие = ?(МассивСтрок.Количество() > 0, МассивСтрок[0], Неопределено);
				Если СтрокаУсловие = НЕОПРЕДЕЛЕНО Тогда					
					Прервать;					
				КонецЕсли;   				
				НомерУсловия = НомерУсловия + 1;
			КонецЦикла; 
			
			// Добавляем новые колонки 
			Имена = Новый Массив;
			Имена.Добавить("Условие");
			Имена.Добавить("ВидСравнения");
			Имена.Добавить("Значение");
			Имена.Добавить("ОбъединениеСПоследующим");
			
			Для каждого Имя Из Имена Цикл				
				ИмяКолонки = Имя + "1";				
				СтрокаУсловие = ТаблицаПрочее.Найти(ИмяКолонки,"ИмяРеквизита");
				Если СтрокаУсловие <> НЕОПРЕДЕЛЕНО Тогда
					СтрокаУсловие.ИмяРеквизита = Имя + Строка(НомерУсловия);
					Если Имя = "ОбъединениеСПоследующим" Тогда
						СтрокаУсловие.Синоним = Нстр("ru = 'и/или'");
					ИначеЕсли Имя = "ВидСравнения" Тогда
						СтрокаУсловие.Синоним = Нстр("ru = 'Вид сравнения'");
					Иначе	
						СтрокаУсловие.Синоним = СтрШаблон(Нстр("ru = '%1 № %2'"), Имя, НомерУсловия);
					КонецЕсли; 
					ДобавитьОписаниеКолонкиПравил(ТекущийОбъект,СтрокаУсловие,НомерКолонки);
					НомерКолонки = НомерКолонки+10;
				КонецЕсли; 				
			КонецЦикла; 
			
			// Сортируем и перенумеровываем колонки правил.
			УпорядочитьКолонки("Условие","ПроизвольноеУсловие");
			УпорядочитьКолонки("ВидСравнения");
			УпорядочитьКолонки("Значение");
			УпорядочитьКолонки("ОбъединениеСПоследующим");
			
			ПеренумероватьКолонкиПравил();
		ИначеЕсли РезультатВыбора.Имя = "ДополнительноеПоле" Тогда
			
			НомерУсловия = 1;
			Пока ИСТИНА Цикл
				ИмяУсловие = "ДополнительноеПоле" + НомерУсловия;
				
				СтрОтбор = Новый Структура("ИмяРеквизита", ИмяУсловие);
				МассивСтрок = Объект.КолонкиПравилТрансляции.НайтиСтроки(СтрОтбор);
				СтрокаУсловие = ?(МассивСтрок.Количество() > 0, МассивСтрок[0], Неопределено);
				Если СтрокаУсловие = НЕОПРЕДЕЛЕНО Тогда
					Прервать;
				КонецЕсли;   
				НомерУсловия = НомерУсловия + 1;
			КонецЦикла; 
			
			ТекущаяСтрока = ТаблицаПрочее.Найти(РезультатВыбора.Имя,"ИмяРеквизита");
			Если НЕ ТекущаяСтрока = Неопределено Тогда
				ТекущаяСтрока.ИмяРеквизита = РезультатВыбора.Имя + НомерУсловия;
				ТекущаяСтрока.Синоним = СтрШаблон(НСтр("ru = 'Дополнительное поле № %1'"), НомерУсловия);
			КонецЕсли; 
		ИначеЕсли РезультатВыбора.Имя = "ДополнительноеПоле_Счет" Тогда
			Если Объект.УчитыватьКорреспонденцию Тогда
				
				СтрокаДопСчетДт =  ТаблицаПрочее.Найти(РезультатВыбора.Имя+"Дт","ИмяРеквизита");
				ТекущаяСтрока = ТаблицаПрочее.Найти(РезультатВыбора.Имя+"Кт","ИмяРеквизита");
				
				Кол = КоличествоКолонокШаблона(Объект.КолонкиПравилТрансляции, РезультатВыбора.Имя+"Дт");
                Если Кол > 0 Тогда
					СтрокаДопСчетДт.ИмяРеквизита = РезультатВыбора.Имя+"Дт"+Кол;
                    СтрокаДопСчетДт.Синоним = НСтр("ru = 'Дополнительный счет Дт'")+ " № "+Кол;					

					ТекущаяСтрока.ИмяРеквизита = РезультатВыбора.Имя+"Кт"+Кол;
                    ТекущаяСтрока.Синоним = НСтр("ru = 'Дополнительный счет Кт'")+ " № "+Кол;					
				КонецЕсли; 
		        ДобавитьОписаниеКолонкиПравил(ТекущийОбъект ,СтрокаДопСчетДт ,НомерКолонки, флДобавлятьСтроковойТип);
			Иначе	
				ТекущаяСтрока = ТаблицаПрочее.Найти(РезультатВыбора.Имя,"ИмяРеквизита");
				Кол = КоличествоКолонокШаблона(Объект.КолонкиПравилТрансляции, РезультатВыбора.Имя);
				Если Кол > 0 Тогда
					ТекущаяСтрока.ИмяРеквизита = РезультатВыбора.Имя+Кол;
                    ТекущаяСтрока.Синоним = НСтр("ru = 'Дополнительный счет'")+ " № "+Кол;					
				КонецЕсли; 
			КонецЕсли; 
		Иначе	
			ТекущаяСтрока = ТаблицаПрочее.Найти(РезультатВыбора.Имя,"ИмяРеквизита");
		КонецЕсли; 
	КонецЕсли; // Условие по виду поля
	
	Если ТекущаяСтрока <> НЕОПРЕДЕЛЕНО Тогда
		Модифицированность = Истина;
		ТекущаяСтрока = ДобавитьОписаниеКолонкиПравил(ТекущийОбъект ,ТекущаяСтрока ,НомерКолонки, флДобавлятьСтроковойТип);
		Если ТекущаяСтрока <> Неопределено Тогда
			Элементы.КолонкиПравилТрансляции.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаВыбораПоля()

&НаСервере
Процедура ОбновитьТипыКолонок()

	СпрОб = РеквизитФормыВЗначение("Объект");
	ЕстьИзменения = СпрОб.ОбновитьТипыКолонок();
	
	Если ЕстьИзменения Тогда
		ЗначениеВДанныеФормы(СпрОб, Объект);
		ЗаполнитьДобавленныеКолонкиТаблиц(СпрОб);
		Модифицированность = Истина;
	Иначе	
		ТекстСообщения =  НСтр("ru = 'Типы проверены, изменений нет.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры // ОбновитьТипыКолонок()
 
&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ТекущийОбъект)

	Для каждого СтрокаТаблицы Из Объект.КолонкиПравилТрансляции Цикл
		ДанныеОбъекта = ТекущийОбъект.КолонкиПравилТрансляции.НайтиСтроки(Новый Структура("ИмяКолонки", СтрокаТаблицы.ИмяКолонки))[0];
		ТипыЗначений = ДанныеОбъекта.ТипыЗначений.Получить();
		Если ТипЗнч(ТипыЗначений) = Тип("ОписаниеТипов") Тогда
			// Один (единственый) из типов удален.
			Если ТипыЗначений.Типы().Количество() = 0 Тогда
				ТипыЗначений = ОбщегоНазначения.ОписаниеТипаСтрока(100);
			КонецЕсли;
		Иначе	
			// Незаполнялось.
			ТипыЗначений = ОбщегоНазначения.ОписаниеТипаСтрока(100); 
		КонецЕсли; 		
		СтрокаТаблицы.ТипыЗначенийВФорме = ТипыЗначений;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСписокДоступныхВидовРегистров()

	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрНакопления"));
	СписокВидовОбъектов.Добавить(ПредопределенноеЗначение("Перечисление.бит_ВидыОбъектовСистемы.РегистрБухгалтерии"));

	Возврат СписокВидовОбъектов;
	
КонецФункции // СформироватьСписокДоступныхВидовРегистров()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНаименование(Источник, Приемник)

	ТекНаименование = Строка(Источник)+"-->"+Строка(Приемник);

	Возврат ТекНаименование;
	
КонецФункции // СформироватьНаименование()

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиСообщениеОВидеОбъекта()
	
	ТекстСообщения =  НСтр("ru = 'Для выбора в качестве Приемника и Источника доступны только регистры накопления и регистры бухгалтерии.'");
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
КонецПроцедуры // ВывестиСообщениеОВидеОбъекта()

&НаСервере
Функция ПараметрыФормыМакета()
	
	ТабКолонки = Объект.КолонкиПравилТрансляции.Выгрузить();
	ТабКолонки.Колонки.Добавить("НачатьГруппу"      , Новый ОписаниеТипов("Булево"));
	ТабКолонки.Колонки.Добавить("ЗакончитьГруппу"   , Новый ОписаниеТипов("Булево"));
	ТабКолонки.Колонки.Добавить("ГруппировкаКолонок", Новый ОписаниеТипов("ГруппировкаКолонок"));
	
	Для каждого СтрокаТаблицы Из ТабКолонки Цикл
		СтрокаТаблицы.НомерКолонки = СтрокаТаблицы.НомерСтроки * 10;
	КонецЦикла; 
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(ТабКолонки, УникальныйИдентификатор);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресТаблицыВХранилище", АдресТаблицы);
	ПараметрыФормы.Вставить("Наименование", Объект.Наименование);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти
