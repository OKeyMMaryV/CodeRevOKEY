
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиСервер.ФормаВыбораПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект);

	Параметры.Свойство("Режим", Режим);
	Параметры.Свойство("АдресРеквизитыИсточника", АдресРеквизитыИсточника);
	Параметры.Свойство("АдресРеквизитыПриемника", АдресРеквизитыПриемника);
	Параметры.Свойство("Приемник", Приемник);
	Параметры.Свойство("Источник", Источник);
	Параметры.Свойство("ТекущееПоле", ТекущееПоле);
	
	ОбновитьДерево();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДереводанныеВыбор

&НаКлиенте
Процедура ДеревоДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоКнопкеОК();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ПоКнопкеОК();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	
	ОбновитьДерево();
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоДанные, ДеревоДанные.ПолучитьЭлементы());	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция заполняет таблицу реквизитов источника.
// 
// Возвращаемое значение:
//  ТабВрем - ТаблицаЗначений.
// 
&НаСервере
Функция ЗаполнитьТаблицуРеквизитовИсточника()

	ТабВрем = Неопределено;
	Если ЗначениеЗаполнено(Источник) Тогда
	
		 ТабВрем = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ЗаполнитьТаблицуРеквизитов(Источник);
		 АдресРеквизитыИсточника = ПоместитьВоВременноеХранилище(ТабВрем, УникальныйИдентификатор);
	
	КонецЕсли; 

	Возврат ТабВрем;
	
КонецФункции // ЗаполнитьТаблицуРеквизитовИсточника()

// Функция извлекает таблицу реквизитов источника из временного хранилища.
// 
// Возвращаемое значение:
//  ТабВрем - ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуРеквизитовИсточника() 

	ТабВрем = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресРеквизитыИсточника) Тогда
	
		ТабВрем = ПолучитьИзВременногоХранилища(АдресРеквизитыИсточника);
	
	КонецЕсли; 

	Если НЕ ТипЗнч(ТабВрем) = Тип("ТаблицаЗначений") Тогда
		
		ТабВрем = ЗаполнитьТаблицуРеквизитовИсточника();
			
	КонецЕсли; 
	
	Возврат ТабВрем;
	
КонецФункции // ПолучитьТаблицуРеквизитовИсточника()

// Функция заполняет таблицу реквизитов приемника.
// 
// Возвращаемое значение:
//  ТабВрем - ТаблицаЗначений.
// 
&НаСервере
Функция ЗаполнитьТаблицуРеквизитовПриемника()
	
	Если ЗначениеЗаполнено(Приемник) Тогда
		ТабВрем = Справочники.бит_ПравилаЗаполненияПолейПриТрансляции.ЗаполнитьТаблицуРеквизитов(Приемник);
		АдресРеквизитыПриемника = ПоместитьВоВременноеХранилище(ТабВрем, УникальныйИдентификатор);
	КонецЕсли; 
	
	Возврат ТабВрем;
	
КонецФункции

// Функция извлекает таблицу реквизитов приемника из временного хранилища.
// 
// Возвращаемое значение:
//  ТабВрем - ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуРеквизитовПриемника()

	ТабВрем = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресРеквизитыПриемника) Тогда
		ТабВрем = ПолучитьИзВременногоХранилища(АдресРеквизитыПриемника);
	КонецЕсли; 

	Если НЕ ТипЗнч(ТабВрем) = Тип("ТаблицаЗначений") Тогда
		ТабВрем = ЗаполнитьТаблицуРеквизитовПриемника();
	КонецЕсли; 	
	
	Возврат ТабВрем;
	
КонецФункции // ПолучитьТаблицуРеквизитовПриемника()

// Процедура обновляет дерево значений "ДеревоПолей".
// 
&НаСервере
Процедура ОбновитьДерево()
	
	ДеревоДанные.ПолучитьЭлементы().Очистить();
	
	ТаблицаИсточник = ПолучитьТаблицуРеквизитовИсточника();
	ТаблицаПриемник = ПолучитьТаблицуРеквизитовПриемника();
	
	НастройкиИзмерений = бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхИзмерений();
	
	Если ТаблицаИсточник = Неопределено ИЛИ ТаблицаПриемник = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ДеревоПолей = Новый ДеревоЗначений;
	ДеревоПолей.Колонки.Добавить("Имя"              , Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("Синоним"          , Новый ОписаниеТипов("Строка"));
	ДеревоПолей.Колонки.Добавить("ДоступноДляВыбора", Новый ОписаниеТипов("Булево"));
	ДеревоПолей.Колонки.Добавить("Картинка");
		
	СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"ЗаписьИсточник", Нстр("ru = 'Запись источник'"),Ложь);
	
	Для каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
		
		Справочники.бит_СтруктураКонструктораПравилТрансляции.ДобавитьИнформациюОбИзмерении(СтрокаТаблицы, НастройкиИзмерений); 
		
		ДобавитьСтрокуВДерево(СтрокаВерх,СтрокаТаблицы.ИмяРеквизита,СтрокаТаблицы.Синоним,Истина);
		
	КонецЦикла; 
	
	СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"ЗаписьПриемник", Нстр("ru = 'Запись приемник'"),Ложь);
	
	Для каждого СтрокаТаблицы Из ТаблицаПриемник Цикл
		
		Справочники.бит_СтруктураКонструктораПравилТрансляции.ДобавитьИнформациюОбИзмерении(СтрокаТаблицы, НастройкиИзмерений); 
		
		ДобавитьСтрокуВДерево(СтрокаВерх,СтрокаТаблицы.ИмяРеквизита,СтрокаТаблицы.Синоним,Истина);
		
	КонецЦикла; 
	
	СтрокаВерх = ДобавитьСтрокуВДерево(ДеревоПолей,"Прочее",Нстр("ru = 'Прочее'"),Ложь);
	
	ДобавитьСтрокуВДерево(СтрокаВерх,"Условие",					 Нстр("ru = 'Условие'"),							Истина);
	ДобавитьСтрокуВДерево(СтрокаВерх,"ДтКт",					 Нстр("ru = 'Дт/Кт'"),								Истина);	
	ДобавитьСтрокуВДерево(СтрокаВерх,"ПроизвольныйКод",			 Нстр("ru = 'Произвольный код'"),					Истина);
	ДобавитьСтрокуВДерево(СтрокаВерх,"ДополнительноеПоле",		 Нстр("ru = 'Дополнительное поле'"),				Истина);
	ДобавитьСтрокуВДерево(СтрокаВерх,"ДополнительноеПоле_Счет",	 Нстр("ru = 'Дополнительный счет'"),				Истина);
	ДобавитьСтрокуВДерево(СтрокаВерх,"КоэффициентСумма",		 Нстр("ru = 'Коэффициент сумма'"),					Истина);		 
	ДобавитьСтрокуВДерево(СтрокаВерх,"КоэффициентКоличество",	 Нстр("ru = 'Коэффициент количество'"),				Истина);
	ДобавитьСтрокуВДерево(СтрокаВерх,"ИспользоватьАналитикуКорр",Нстр("ru = 'Использовать аналитику корр. счета'"),	Истина);	
	
	ЗначениеВДанныеФормы(ДеревоПолей, ДеревоДанные);
	
КонецПроцедуры // Обновить()

&НаСервере
Функция ДобавитьСтрокуВДерево(СтрокаРодитель,Имя,Синоним,ДоступноДляВыбора)

	СтрокаДерева = СтрокаРодитель.Строки.Добавить();
	СтрокаДерева.Имя               = Имя;
	СтрокаДерева.Синоним           = Синоним;
	СтрокаДерева.ДоступноДляВыбора = ДоступноДляВыбора;

	Если НЕ ДоступноДляВыбора Тогда
		
		СтрокаДерева.Картинка = БиблиотекаКартинок.бит_Реквизиты;
		
	Иначе	
		
		СтрокаДерева.Картинка = БиблиотекаКартинок.бит_Реквизит;
		
	КонецЕсли; 
	
	Возврат СтрокаДерева;
	
КонецФункции // ДобавитьСтрокуВДерево()

&НаКлиенте
Процедура ПоКнопкеОК()
	
	ТекущаяСтрока = Элементы.ДеревоДанные.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено И ТекущаяСтрока.ДоступноДляВыбора Тогда
		
		ТекРодитель = ТекущаяСтрока.ПолучитьРодителя();
		ВидПоля     = ?(ТекРодитель = Неопределено, "", ТекРодитель.Имя);
		
		РезСтруктура = Новый Структура;
		РезСтруктура.Вставить("ВидПоля",ВидПоля);
		РезСтруктура.Вставить("Имя"    ,ТекущаяСтрока.Имя);
		
		Закрыть(РезСтруктура);
		
	КонецЕсли; 
	
КонецПроцедуры // ПоКнопкеОК()

#КонецОбласти

