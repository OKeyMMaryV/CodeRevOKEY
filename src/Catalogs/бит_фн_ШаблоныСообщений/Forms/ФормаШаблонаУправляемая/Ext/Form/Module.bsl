
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ОбъектСистемы = Параметры.ОбъектСистемы;
	ВидСобытия 	  = Параметры.ВидСобытия;
	
	ОбновитьДеревоРеквизитов();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Результат = ПолучитьРезультат(ВыбраннаяСтрока);
	
	Закрыть(Результат);
	
КонецПроцедуры // ДеревоРеквизитовВыбор()

&НаКлиенте
Процедура ДеревоРеквизитовПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	РазвернутьПодчиненные(Строка);
	
КонецПроцедуры // ДеревоРеквизитовПередРазворачиванием()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбраннаяСтрока = Элементы.ДеревоРеквизитов.ТекущаяСтрока;
	
	Результат = ПолучитьРезультат(ВыбраннаяСтрока);
	
	Закрыть(Результат);
	
КонецПроцедуры // ОК()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьТипОбъекта(СтрокаТип = Неопределено)
	
	Если СтрокаТип = Неопределено Тогда
		
		ИмяОбъекта = ОбъектСистемы.ИмяОбъекта;
		ВидОбъекта = ОбъектСистемы.ВидОбъекта;
		ИмяТипа	   = бит_УправлениеОбъектамиСистемы.ПолучитьИмяТипаОбъекта(ИмяОбъекта, ВидОбъекта);
		
	Иначе
		
		ИмяТипа	= "СправочникСсылка." + СтрокаТип;
	
	КонецЕсли;
	
	ТипЭлемента  = Новый ОписаниеТипов(ИмяТипа);
	
	Возврат ТипЭлемента;
	
КонецФункции // ПолучитьТипОбъекта()

&НаСервере
Функция ДобавитьСтрокуДерева(КоллекцияЭлементов, Синоним, Имя = Неопределено, ОписаниеТипов = Неопределено, ДобавитьПодчиненную = Ложь,ЭтоШаблон=Истина)
		                      
	СтрокаДерева = КоллекцияЭлементов.Добавить();
	
	СтрокаДерева.Синоним   = Синоним;
	СтрокаДерева.ЭтоШаблон = ЭтоШаблон;
	
	Если Имя = Неопределено Тогда
		СтрокаДерева.Имя 	 = СтрЗаменить(ТРег(Синоним), " ", "");
	Иначе
		СтрокаДерева.Имя 	 = Имя;	
	КонецЕсли;	
	
	ТекОписаниеТипов  = ?(ОписаниеТипов = Неопределено, Новый ОписаниеТипов("Строка"), ОписаниеТипов);
	СтрокаДерева.Тип = ТекОписаниеТипов;

	// Добавление подчиненной строки по умолчанию для возможности дальнейшего раскрытия.
	Если ДобавитьПодчиненную Тогда
		
		ОписаниеСправочники = Справочники.ТипВсеСсылки();
		ОписаниеДокументы   = Документы.ТипВсеСсылки();
		ОписаниеБизнесПроцессы = БизнесПроцессы.ТипВсеСсылки();
		ОписаниеЗадачи		   = Задачи.ТипВсеСсылки();
		
		Для каждого Тип Из ТекОписаниеТипов.Типы() Цикл
		
			Если ОписаниеСправочники.СодержитТип(Тип) ИЛИ ОписаниеДокументы.СодержитТип(Тип)
				ИЛИ ОписаниеБизнесПроцессы.СодержитТип(Тип) ИЛИ ОписаниеЗадачи.СодержитТип(Тип) Тогда
				
				КоллекцияПодчиненных = СтрокаДерева.ПолучитьЭлементы();
				НоваяСтрока = КоллекцияПодчиненных.Добавить();
				НоваяСтрока.Имя = "СлужебнаяДляРазворота";
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции // ДобавитьСтрокуДерева()

// Процедура обновляет дерево реквизитов.
// 
&НаСервере
Процедура ОбновитьДеревоРеквизитов()

	ДанныеДерева = ЭтаФорма.ДеревоРеквизитов.ПолучитьЭлементы();
	ДанныеДерева.Очистить();
	
	КоллекцияЭлементов = ДеревоРеквизитов.ПолучитьЭлементы();  	
	
	Если ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ДокументыДляВизирования Тогда
		
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Вид события");		
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Выборка документов", , , , Ложь);
		
		ПодчиненнаяКоллекция = СтрокаДерева.ПолучитьЭлементы();
		
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Период"	  , , , , Ложь);
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Объект"	  , , , , Ложь);
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Оповещение", , , , Ложь);
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Статус" 	  , , ПолучитьТипОбъекта("бит_СтатусыОбъектов")		   , Истина, Ложь);
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Виза"   	  , , ПолучитьТипОбъекта("бит_Визы")			  	   , Истина, Ложь);
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Решение"	  , , ПолучитьТипОбъекта("бит_ВидыРешенийСогласования"), Истина, Ложь);
		
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Пользователь",, ПолучитьТипОбъекта("Пользователи"), Истина);
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Получатель",, 	 ПолучитьТипОбъекта("Пользователи"), Истина);
		
	ИначеЕсли ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуНачислений
		ИЛИ ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.НапоминанияПоГрафикуПлатежей
		ИЛИ ВидСобытия = Перечисления.бит_фн_ВидыСобытийОповещений.ОкончаниеСрокаДействияДоговора Тогда

		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Вид события");		
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Выборка документов", , , , Ложь);
		
		ПодчиненнаяКоллекция = СтрокаДерева.ПолучитьЭлементы();
		
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Период"	  , , , , Ложь);
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Объект"	  , , , , Ложь);
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Оповещение", , , , Ложь);
			СтрокаДерева = ДобавитьСтрокуДерева(ПодчиненнаяКоллекция, "Статус" 	  , , ПолучитьТипОбъекта("бит_СтатусыОбъектов")		   , Истина, Ложь);
		
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Пользователь",, ПолучитьТипОбъекта("Пользователи"), Истина);
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Получатель",, 	 ПолучитьТипОбъекта("Пользователи"), Истина);
		
	Иначе
		
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Период");
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Вид события");
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Оповещение");
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Текущий объект", , ПолучитьТипОбъекта() 			          		 , Истина);
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Статус" 	   	, , ПолучитьТипОбъекта("бит_СтатусыОбъектов")		 , Истина);
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Виза"   	  	, , ПолучитьТипОбъекта("бит_Визы")			  		 , Истина);
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Решение"	  	, , ПолучитьТипОбъекта("бит_ВидыРешенийСогласования"), Истина);
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Комментарий"	, ,                                                  , Истина);		
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Пользователь"	, , ПолучитьТипОбъекта("Пользователи")		  		 , Истина);
		СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Получатель"  	, , ПолучитьТипОбъекта("Пользователи")	 	  	 	 , Истина);
		
	КонецЕсли;  	

КонецПроцедуры // ОбновитьДеревоРеквизитов()
    
&НаСервере
Процедура ДобавитьОписаниеРеквизитов(СтрокаДерева, ИмяКоллекции, ОписаниеКоллекции, НачалоИмениТипа)

	Если НЕ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли; 
	
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеДата   = Новый ОписаниеТипов("Дата");
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	
	Для каждого Тип Из СтрокаДерева.Тип.Типы() Цикл
		
		Если ОписаниеКоллекции.СодержитТип(Тип) Тогда
			
			РезСтруктура = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоОписаниюТипов(СтрокаДерева.Тип, ИмяКоллекции, НачалоИмениТипа);
			Если РезСтруктура <> Неопределено Тогда
				
				КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
				Если КоллекцияЭлементов.Количество() > 0 Тогда
					КоллекцияЭлементов.Очистить();
				КонецЕсли;
				
				// Добавление строк дерева по умолчанию
			   	ДобавитьСтрокуДерева(КоллекцияЭлементов, "Синоним объекта", "Метаданные().Синоним");
				Если ИмяКоллекции = "Справочники" Тогда
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Код",, ОписаниеСтрока);
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Наименование",, ОписаниеСтрока);
				ИначеЕсли ИмяКоллекции = "Документы" Тогда	
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Дата"    ,, ОписаниеДата);
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Номер"   ,, ОписаниеСтрока);
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Проведен",, ОписаниеБулево);	
				ИначеЕсли ИмяКоллекции = "Задачи" Тогда	
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Дата"    ,, ОписаниеДата);
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Номер"   ,, ОписаниеСтрока);
				КонецЕсли; 
				
				// Добавление строк дерева из метаданных
				Для каждого Мета Из Метаданные[ИмяКоллекции][РезСтруктура.Имя].Реквизиты Цикл
			        ДобавитьСтрокуДерева(КоллекцияЭлементов, Мета.Синоним, Мета.Имя, Мета.Тип, Истина);
				КонецЦикла;
								
				Прервать;
				
			КонецЕсли; 
			
		КонецЕсли; // Есть тип
		
	КонецЦикла; // По массиву типов

	// СтрокаДерева.Сортировать("Синоним");

КонецПроцедуры // ДобавитьОписаниеРеквизитов()

// Процедура добавляет в дерево подчиненные реквизиты.
// 
// Параметры:
//  ИдСтрокиДерева  - Число
// 
&НаСервере
Процедура РазвернутьПодчиненные(ИдСтрокиДерева)

	Если ИдСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НайденнаяСтрокаДерева = ЭтаФорма.ДеревоРеквизитов.НайтиПоИдентификатору(ИдСтрокиДерева);
	
	ДобавитьОписаниеРеквизитов(НайденнаяСтрокаДерева, "Справочники", Справочники.ТипВсеСсылки(), "СправочникСсылка");
	ДобавитьОписаниеРеквизитов(НайденнаяСтрокаДерева, "Документы"  , Документы.ТипВсеСсылки()  , "ДокументСсылка");
	ДобавитьОписаниеРеквизитов(НайденнаяСтрокаДерева, "ПланыСчетов", ПланыСчетов.ТипВсеСсылки(), "ПланСчетовСсылка");
	ДобавитьОписаниеРеквизитов(НайденнаяСтрокаДерева, "БизнесПроцессы", БизнесПроцессы.ТипВсеСсылки(), "БизнесПроцессСсылка");
	ДобавитьОписаниеРеквизитов(НайденнаяСтрокаДерева, "Задачи"		  , Задачи.ТипВсеСсылки()		 , "ЗадачаСсылка");

КонецПроцедуры // РазвернутьПодчиненные()

// Функция получает результат выбора.
// 
// Параметры:
//  Идентификатор  - Число
//  
// Возвращаемое значение:
//   Строка
// 
&НаКлиенте
Функция ПолучитьРезультат(Идентификатор)

	Результат = Неопределено;
	
	СтрокаДерева = ДеревоРеквизитов.НайтиПоИдентификатору(Идентификатор);
	ТекущийРеквизит  = СтрокаДерева.Имя;
	СтрокаРезультата = "";
	
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		
		СтрокаРезультата = Родитель.Имя + "." + СтрокаРезультата;
		Родитель         = Родитель.ПолучитьРодителя();	
	
	КонецЦикла;
	
	СтрокаРезультата = СтрокаРезультата + ТекущийРеквизит;
	
	Если НЕ СтрокаДерева.ЭтоШаблон Тогда
		Результат = "СтруктураКонтекст." + СтрокаРезультата;
	Иначе
		Результат = "{{" + СтрокаРезультата + "}}";
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ПолучитьРезультат()

#КонецОбласти
