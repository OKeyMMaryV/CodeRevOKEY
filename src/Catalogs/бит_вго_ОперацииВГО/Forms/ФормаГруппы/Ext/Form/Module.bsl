
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	ЗаполнитьКэшЗначений();
	
	// Видимость, доступность...
	УстановитьВидимостьДоступность();
		
КонецПроцедуры // ПриСозданииНаСервере()
 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("ВидОперации", Объект.ВидОперации);
	мКэшРеквизитовФормы.Вставить("ТипОперации", Объект.ТипОперации);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если (Объект.ВидОперации <> мКэшРеквизитовФормы.ВидОперации ИЛИ Объект.ТипОперации <> мКэшРеквизитовФормы.ТипОперации) 
		И НужноПерезаполнитьЭлементы(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Для элементов группы будут перезаполнены значения реквизитов ""вид операции"" и ""тип операции"". Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерезаполненияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		Отказ = Истина;
		
	КонецЕсли;
		
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если фНужноПерезаполнитьЭлементы Тогда
		ПерезаполнитьЭлементыГруппы(Объект.Ссылка, Объект.ВидОперации, Объект.ТипОперации);
	КонецЕсли;
		
КонецПроцедуры // ПослеЗаписиНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
        
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	 
	ЭтоТехническаяОперация = Объект.ВидОперации = фКэшЗначений.Перечисления.бит_вго_ВидыОперацийВГО.Техническая;
	ЭтоОперацияОстатки 	= Объект.ВидОперации = фКэшЗначений.Перечисления.бит_вго_ВидыОперацийВГО.Остатки; 

	Если ЭтоТехническаяОперация ИЛИ ЭтоОперацияОстатки Тогда 		
		Объект.ТипОперации = Неопределено;
		Элементы.ТипОперации.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Элементы.ТипОперации.АвтоОтметкаНезаполненного = НЕ (ЭтоТехническаяОперация ИЛИ ЭтоОперацияОстатки);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обработчик оповещения "ВопросПерезаполненияЗавершение".
// 
// Параметры:
//  РезультатВопроса - Произвольный.
//  ДопПараметры 	 - Структура.
// 
&НаКлиенте
Процедура ВопросПерезаполненияЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	  	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		фНужноПерезаполнитьЭлементы = Истина;
		мКэшРеквизитовФормы.ВидОперации = Объект.ВидОперации;
		мКэшРеквизитовФормы.ТипОперации = Объект.ТипОперации;
	Иначе	
		фНужноПерезаполнитьЭлементы = Ложь;
		Объект.ВидОперации = мКэшРеквизитовФормы.ВидОперации;
		Объект.ТипОперации = мКэшРеквизитовФормы.ТипОперации;
	КонецЕсли;
	Записать();
			
КонецПроцедуры // ВопросПерезаполненияЗавершение()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
		
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_вго_ВидыОперацийВГО", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_вго_ВидыОперацийВГО));
			
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	МассивВидовОперации = Новый Массив;
	Для каждого ЗначениеВидОперации Из Перечисления.бит_вго_ВидыОперацийВГО Цикл
		Если ЗначениеВидОперации <> Перечисления.бит_вго_ВидыОперацийВГО.Остатки  Тогда
			МассивВидовОперации.Добавить(ЗначениеВидОперации); 		
		КонецЕсли;
	КонецЦикла;
	фКэшЗначений.Вставить("МассивВидовОперации", МассивВидовОперации);
	
КонецПроцедуры

// Процедура устанавливает видимость, доступность, только просмотр.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()

	ЗаполненРодитель = ЗначениеЗаполнено(Объект.Родитель);
	ЭтоТехническаяОперация = Объект.ВидОперации = фКэшЗначений.Перечисления.бит_вго_ВидыОперацийВГО.Техническая;
	ЭтоОперацияОстатки 	   = Объект.ВидОперации = фКэшЗначений.Перечисления.бит_вго_ВидыОперацийВГО.Остатки; 
	
	Элементы.ВидОперации.ТолькоПросмотр = ЗаполненРодитель;
	Элементы.ТипОперации.ТолькоПросмотр = ЗаполненРодитель ИЛИ ЭтоТехническаяОперация ИЛИ ЭтоОперацияОстатки;
 	
КонецПроцедуры // УстановитьВидимостьДоступность()

// Функция проверяет наличие элементов в группе.
// 
// Параметры:
//  Родитель	- СправочникСсылка.бит_вго_ОперацииВГО.
//  
// Возвращаемое значение:
//   Булево
// 
&НаСервереБезКонтекста
Функция НужноПерезаполнитьЭлементы(Родитель)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_вго_ОперацииВГО.Ссылка
	|ИЗ
	|	Справочник.бит_вго_ОперацииВГО КАК бит_вго_ОперацииВГО
	|ГДЕ
	|	бит_вго_ОперацииВГО.Родитель = &Родитель
	|";
	РезультатЗапроса = Запрос.Выполнить();
		
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции // НужноПерезаполнитьЭлементы()

// Процедура перезаписывает новые значения вида и типа операции для элементов группы.
// 
// Параметры:
//  Родитель	- СправочникСсылка.бит_вго_ОперацииВГО.
//  ВидОперации - ПеречислениеСсылка.бит_вго_ВидыОперацийВГО.
//  ТипОперации - ПеречислениеСсылка.бит_вго_ТипыОперацийВГО.
// 
&НаСервереБезКонтекста
Процедура ПерезаполнитьЭлементыГруппы(Родитель, ВидОперации, ТипОперации)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_вго_ОперацииВГО.Ссылка
	|ИЗ
	|	Справочник.бит_вго_ОперацииВГО КАК бит_вго_ОперацииВГО
	|ГДЕ
	|	бит_вго_ОперацииВГО.Родитель = &Родитель
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭлемСсылка = Выборка.Ссылка;
		ЭлОбъект = ЭлемСсылка.ПолучитьОбъект();
		
		ЭлОбъект.ВидОперации = ВидОперации;
		ЭлОбъект.ТипОперации = ТипОперации;
		
		бит_ОбщегоНазначения.ЗаписатьСправочник(ЭлОбъект, , "Ошибки");		
	
	КонецЦикла;    

КонецПроцедуры // ПерезаполнитьЭлементыГруппы()

#КонецОбласти    
