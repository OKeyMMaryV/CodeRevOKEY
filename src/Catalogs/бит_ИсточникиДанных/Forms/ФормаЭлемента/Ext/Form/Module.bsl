
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийВидСравнения; // Служит для передачи вида сравнения между обработчиками.

&НаКлиенте
Перем мТекущийВидПараметра; // Служит для передачи вида параметра между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяНастройкаПодключения = Объект.НастройкаПодключения;
	
	ЗаполнитьКэшЗначений();
	
	// Восстановим настройки из хранилища
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ИсточникОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.бит_Запросы") Тогда
		ОбновитьТаблицуПараметров();
		ИсточникОбъект = РеквизитФормыВЗначение("Объект");
	Иначе	
		ИсточникОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли; 
	СохраненнаяНастройка = ИсточникОбъект.ПолучитьНастройкиИсточника();
	
	Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") Тогда
		
		Если СохраненнаяНастройка.Свойство("НастройкиПараметров") Тогда
			НастройкиПараметров = СохраненнаяНастройка.НастройкиПараметров;
		Иначе
			НастройкиПараметров = Новый Структура;
		КонецЕсли; 
		
		// Восстанавливаем сохраненные параметры
		Если СохраненнаяНастройка.Свойство("ПараметрыПостроителя") Тогда
			
			Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
				
				СтрокаПараметр                   = ТаблицаПараметры.Добавить();
				СтрокаПараметр.ИмяПараметра      = Параметр.Ключ;
				СтрокаПараметр.ЗначениеПараметра = Параметр.Значение;
				
				Если ТипЗнч(СтрокаПараметр.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
					СтрокаПараметр.ВидПараметра = Перечисления.бит_ВидыПараметровЗапроса.Список;
				Иначе 
					СтрокаПараметр.ВидПараметра = Перечисления.бит_ВидыПараметровЗапроса.Значение;
				КонецЕсли;
				Если НастройкиПараметров.Свойство(СтрокаПараметр.ИмяПараметра) Тогда
					СтрокаПараметр.ОграничениеДоступности = НастройкиПараметров[СтрокаПараметр.ИмяПараметра].ОграничениеДоступности;
				КонецЕсли; 
			КонецЦикла; // По параметрам
		КонецЕсли; 
		
		// Восстанавливаем отбор построителя
		Если СохраненнаяНастройка.Свойство("Отбор") Тогда
		
			 Для каждого ЭлементОтбора Из СохраненнаяНастройка.Отбор Цикл
			 
			 	СтрокаОтбор = ТаблицаОтбор.Добавить();
				СтрокаОтбор.ПутьКДанным   = ЭлементОтбора.ПутьКДанным;
				СтрокаОтбор.Использование = ЭлементОтбора.Использование;
				СтрокаОтбор.ВидСравнения  = ЭлементОтбора.ВидСравнения;
				СтрокаОтбор.Значение      = ЭлементОтбора.Значение;
				СтрокаОтбор.ЗначениеС     = ЭлементОтбора.ЗначениеС;
				СтрокаОтбор.ЗначениеПо    = ЭлементОтбора.ЗначениеПо;
				СтрокаОтбор.ТипЗначения   = ЭлементОтбора.ТипЗначения;
				
				Если СтрокаОтбор.ПутьКДанным = "Периодичность" И ТипЗнч(СтрокаОтбор.Значение) = Тип("Число") Тогда
					СтрокаОтбор.ЭтоПериодичность = Истина;
				КонецЕсли; 
			 КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
    бит_МеханизмПолученияДанных.УстановитьОформлениеТаблицыОтбор(УсловноеОформление);	
	
	СохранитьВосстановитьНастройкиСоответствий("Восстановить", Объект);
		
	УстановитьВидимость();
	
	Если НЕ ПустаяСтрока(Параметры.АктивныйЭлемент) Тогда
		НайденныйЭлемент = Элементы.Найти(Параметры.АктивныйЭлемент);
		Если НайденныйЭлемент <> Неопределено Тогда
			ТекущийЭлемент = НайденныйЭлемент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохраненнаяНастройка = Новый Структура;
	СтруктураПараметры   = Новый Структура;
	НастройкиПараметров  = Новый Структура;
	
	Для каждого СтрокаПараметры Из ТаблицаПараметры  Цикл
		
		СтруктураПараметры.Вставить(СтрокаПараметры.ИмяПараметра, СтрокаПараметры.ЗначениеПараметра);
		НастройкиПараметров.Вставить(СтрокаПараметры.ИмяПараметра, Новый Структура("ОграничениеДоступности", СтрокаПараметры.ОграничениеДоступности));
		
	КонецЦикла; 
	
	СохраненнаяНастройка.Вставить("ПараметрыПостроителя", СтруктураПараметры);
	СохраненнаяНастройка.Вставить("НастройкиПараметров" , НастройкиПараметров);
	
	МассивОтбор = Новый Массив;
	Для каждого СтрокаОтбор Из ТаблицаОтбор  Цикл
	
		 ЭлементОтбора = Новый Структура("ПутьКДанным, Использование, ВидСравнения, Значение, ЗначениеС, ЗначениеПо, ТипЗначения, Представление");
		 
		 ЭлементОтбора.ПутьКДанным   = СтрокаОтбор.ПутьКДанным;
		 ЭлементОтбора.Использование = СтрокаОтбор.Использование;
		 ЭлементОтбора.ВидСравнения  = СтрокаОтбор.ВидСравнения;
		 ЭлементОтбора.Значение      = СтрокаОтбор.Значение;
		 ЭлементОтбора.ЗначениеС     = СтрокаОтбор.ЗначениеС;
		 ЭлементОтбора.ЗначениеПо    = СтрокаОтбор.ЗначениеПо;
		 ЭлементОтбора.ТипЗначения   = СтрокаОтбор.ТипЗначения;
		 ЭлементОтбора.Представление = СтрокаОтбор.ПутьКДанным;

		 МассивОтбор.Добавить(ЭлементОтбора);
		 
	КонецЦикла; 
	
	СохраненнаяНастройка.Вставить("Отбор", МассивОтбор);
	
	ТекущийОбъект.СохранитьНастройкиИсточника(СохраненнаяНастройка);
	
	СохранитьВосстановитьНастройкиСоответствий("Сохранить", ТекущийОбъект);
	                                     	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ВыбранныеПоля = СписокАктивныхПолей(ЭтотОбъект);
	Для каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
		Если НЕ СтрокаТаблицы.Применить Тогда
			Продолжить;
		КонецЕсли;	
		
		Индекс  = ТаблицаСоответствия.Индекс(СтрокаТаблицы);
		Префикс = "ТаблицаСоответствия[%1].";
		Префикс = СтрШаблон(Префикс, Формат(Индекс, "ЧН=0; ЧГ="));
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПоляИсточники) Тогда
			Поле 		   = Префикс + "ПоляИсточники";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Поля источники'"),
								Индекс + 1, НСтр("ru = 'Соответствия'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, ,Отказ);
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПолеПриемник) Тогда
			Поле 		   = Префикс + "ПолеПриемник";
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,НСтр("ru = 'Поля приемники'"),
								Индекс + 1, НСтр("ru = 'Соответствия'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, ,Отказ);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПолеПриемник) 
			И ВыбранныеПоля.НайтиПоЗначению(СтрокаТаблицы.ПолеПриемник) = Неопределено Тогда
			Поле 	  = Префикс + "ПолеПриемник";
			Уточнение = СтрШаблон(НСтр("ru = 'В качестве поля приемника указано отключенное поле ""%1"".'"),
							СтрокаТаблицы.ПолеПриемник);
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,"Корректность",
								НСтр("ru = 'Поля приемники'"), Индекс + 1, НСтр("ru = 'Соответствия'"), Уточнение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, ,Отказ);
		КонецЕсли; 
		
		ПоляИсточники  = СтрРазделить(СтрокаТаблицы.ПоляИсточники,"/", Ложь);
		ТекстСообщения = "";
		Для каждого ПолеИсточник Из ПоляИсточники Цикл
			Если ВыбранныеПоля.НайтиПоЗначению(ПолеИсточник) = Неопределено Тогда
				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", ", ") + ПолеИсточник;
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			Поле	  = Префикс + "ПоляИсточники";
			Уточнение = СтрШаблон(НСтр("ru = 'В качестве полей источника указаны отключенные поля: %1.'"),
							ТекстСообщения);
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,"Корректность",
								НСтр("ru = 'Поля источники'"), Индекс + 1, НСтр("ru = 'Соответствия'"), Уточнение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, ,Отказ);
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ЗапросБД) И НЕ Объект.Предопределенный 
		И НЕ бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(Объект.ВидИнформационнойБазы)  Тогда
		
		ТекстЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗапросБД, "ТекстЗапроса");
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Возврат;		
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст 	   = ТекстЗапроса;
		ОписаниеПараметров = Запрос.НайтиПараметры();
		Служебные 		   = бит_МеханизмПолученияДанных.КонструкторПредопределенныхПараметров();
		
		Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл				
			ИмяПараметра = ОписаниеПараметра.Имя;
			Если Служебные.Найти(ИмяПараметра)<>Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			НайденныеСтроки = ТаблицаПараметры.НайтиСтроки(Новый Структура("ИмяПараметра", ИмяПараметра));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ТекстСообщения = СтрШаблон(Нстр("ru = 'Не задан параметр запроса: ""%1"".'"), ИмяПараметра);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , ,Отказ);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "ТипИсточника".
// 
&НаКлиенте
Процедура ТипИсточникаПриИзменении(Элемент)
	
	ИзменениеТипаИсточника();
	
КонецПроцедуры // ТипИсточникаПриИзменении()

 // Процедура - обработчик события "ПриИзменении" поля ввода "ЗапросБД".
 // 
&НаКлиенте
Процедура ЗапросБДПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЗапросБД)
		И Объект.Поля.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Будут применены настройки запроса. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗапросБДПриИзмененииОкончание", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 
		
	Иначе	
		
		ПриИзмененииЗапроса();
		
	КонецЕсли;	
		
КонецПроцедуры // ЗапросБДПриИзменении()

// Процедура окончание процедуры "ЗапросБДПриИзменении".
// 
&НаКлиенте 
Процедура ЗапросБДПриИзмененииОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриИзмененииЗапроса();
	Иначе	
		Объект.ЗапросБД = ЗапросБДТекущий;
	КонецЕсли;
		
КонецПроцедуры // ЗапросБДПриИзмененииОкончание()

// Процедура - обработчик события "ПриИзменении" поля ввода "НастройкаПодключения".
// 
&НаКлиенте
Процедура НастройкаПодключенияПриИзменении(Элемент)
	
	ИзменениеНастройкиПодключения();
		
КонецПроцедуры // НастройкаПодключенияПриИзменении()

&НаКлиенте
Процедура ВидИнформационнойБазыПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоля

&НаКлиенте
Процедура ПоляСинонимПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Поля.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		
	    СпецСимволы = " ,;:[]{}'""/\?!@#$%^&*+=<>~`|()";		
		ТекущаяСтрока.Синоним = бит_ОбщегоНазначенияКлиентСервер.ПроверитьСпецСимволы(ТекущаяСтрока.Синоним, СпецСимволы, "Синоним");
	
	КонецЕсли;                             	
	
КонецПроцедуры // ПоляСинонимПриИзменении()

&НаКлиенте
Процедура ПоляСинонимАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Поля.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		
		Если ВРЕГ(ТекущаяСтрока.ВидПоля) = "РЕСУРС" Тогда			
			Имена = фКэшЗначений.ИменаРесурсов; 			
		Иначе         			
			Имена = фКэшЗначений.ИменаИзмерений;  			
		КонецЕсли;  
		
		Если ТипЗнч(Имена) = Тип("СписокЗначений") Тогда
			Элемент.СписокВыбора.Очистить();
			Для каждого Эл Из Имена Цикл
				// Изменения кода. Начало: 12.05.2017 # BF-980 {{ 
				Элемент.СписокВыбора.Добавить(Эл.Представление, Эл.Представление);   
				// Изменения кода. Конец 12.05.2017 # BF-980 }} 
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПоляСинонимАвтоПодбор()

&НаКлиенте
Процедура ПоляИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПолейПостроителя("Поля", "Имя", "Поле");
	
КонецПроцедуры // ПоляИмяНачалоВыбора()

&НаКлиенте
Процедура ПоляПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			ТекущаяСтрока = Элементы.Поля.ТекущиеДанные;
			ТекущаяСтрока.Имя = "";
		КонецЕсли; 	
		
		ОткрытьФормуПолейПостроителя("Поля", "Имя", "Поле");
	КонецЕсли;
	
КонецПроцедуры // ПоляПриНачалеРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОтбор

&НаКлиенте
Процедура ТаблицаОтборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
	
	  ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;		
		
	  Если Копирование Тогда
	  
		ТекущаяСтрока.ПутьКДанным = "";
		
	  Иначе
		  
		ТекущаяСтрока.Использование = Истина;  
		ТекущаяСтрока.ВидСравнения  = фКэшЗначений.ВидСравненияРавно;
		
	  КонецЕсли; 	
		
	  ОткрытьФормуПолейПостроителя("ТаблицаОтбор", "ПутьКДанным", "Отбор");
	
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаОтборПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаОтборПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	  СтандартнаяОбработка = Ложь;
	  ОткрытьФормуПолейПостроителя("ТаблицаОтбор", "ПутьКДанным", "Отбор");
	  
КонецПроцедуры // ТаблицаОтборПолеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	мТекущийВидСравнения = ТекущаяСтрока.ВидСравнения;
	
	СписокВидов = СписокВыбораВидаСравнения(ТекущаяСтрока.ПолучитьИдентификатор());
	Элемент.СписокВыбора.Очистить();
	Для каждого Эл Из СписокВидов Цикл
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборВидСравненияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	ИзменениеВидаСравнения(ТекущаяСтрока.ПолучитьИдентификатор(),мТекущийВидСравнения);
	
КонецПроцедуры // ТаблицаОтборВидСравненияПриИзменении()

&НаСервере
Процедура ИзменениеВидаСравнения(ИдСтроки, ПредВидСравнения)
	
	ТекущаяСтрока = ТаблицаОтбор.НайтиПоИдентификатору(ИдСтроки);
	
	бит_МеханизмПолученияДанных.ИзменениеВидаСравнения(ТекущаяСтрока, ПредВидСравнения);
		
КонецПроцедуры // ИзменениеВидаСравнения()

&НаСервере
Функция СписокВыбораВидаСравнения(ИдСтроки)
	
	ТекущаяСтрока = ТаблицаОтбор.НайтиПоИдентификатору(ИдСтроки);
	СписокВидов   = бит_МеханизмПолученияДанных.СписокВыбораВидаСравнения(ТекущаяСтрока);
	
    Возврат СписокВидов;
	
КонецФункции // СписокВыбораВидаСравнения()

&НаКлиенте
Процедура ТаблицаОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	
	Если ТекущаяСтрока.ЭтоПериодичность Тогда
	
		СтандартнаяОбработка = Ложь;
		
		СписокПериодичности = бит_ОбщегоНазначенияКлиентСервер.ПолучитьПериодичности();
		
		Оповещение = Новый ОписаниеОповещения("ВыборИзСпискаПериодичности", ЭтотОбъект); 
		ПоказатьВыборИзСписка(Оповещение,СписокПериодичности); 
		
	Иначе 
	
		ТаблицаОтборЗначениеНачалоВыбораОкончание(ТекущаяСтрока);
		
	КонецЕсли;	
	
	//bit auavseenkov++ Расчет отложенных налогов 22.11.2014
	Если ТекущаяСтрока.ПутьКДанным = "ТипРегистратора" Тогда 
		
		Если ТекущаяСтрока.ВидСравнения = ВидСравнения.Равно Или 
			ТекущаяСтрока.ВидСравнения = ВидСравнения.НеРавно Тогда 
			
			Форма =  ПолучитьФорму("Справочник.бит_ИсточникиДанных.Форма.ФормаВыбораТипаДокумента");
			ТекущаяСтрока.Значение = Форма.ОткрытьМодально();
		ИначеЕсли ТекущаяСтрока.ВидСравнения = ВидСравнения.ВСписке Или 
			ТекущаяСтрока.ВидСравнения = ВидСравнения.НеВСписке Тогда 
	        СписокТипов = ТаблицаОтборЗначениеНачалоВыбора_ВызовСервера();
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда  
				СписокДляВыбора = ТекущаяСтрока.Значение.Скопировать();
			Иначе 
				СписокДляВыбора  = Новый СписокЗначений;
			КонецЕсли;
			СписокДляВыбора.ДоступныеЗначения = СписокТипов;
			ТекущаяСтрока.Значение = СписокДляВыбора;
		КонецЕсли;	
	КонецЕсли;
	 //}
	
КонецПроцедуры // ТаблицаОтборЗначениеНачалоВыбора()

// Процедура выбора из списка периодичности.
// 
&НаКлиенте 
Процедура ВыборИзСпискаПериодичности(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	
	Если НЕ РезультатВыбора = Неопределено Тогда
	
		ТекущаяСтрока.Значение = РезультатВыбора.Значение;
	
	КонецЕсли; 
	
	ТаблицаОтборЗначениеНачалоВыбораОкончание(ТекущаяСтрока);
	
КонецПроцедуры // ВыборИзСпискаПериодичности()

// Процедура окончание процедуры "ТаблицаОтборЗначениеНачалоВыбора".
// 
&НаКлиенте
Процедура ТаблицаОтборЗначениеНачалоВыбораОкончание(ТекущаяСтрока)

	Если ТипЗнч(ТекущаяСтрока.ТипЗначения) = Тип("ОписаниеТипов") 
		 И ТекущаяСтрока.ТипЗначения.Типы().Количество() > 1 
		 И ТекущаяСтрока.Значение = Неопределено  Тогда
		
		Элементы.ТаблицаОтборЗначение.ВыбиратьТип     = Истина;	
		Элементы.ТаблицаОтборЗначение.ОграничениеТипа = ТекущаяСтрока.ТипЗначения;
		
	Иначе	
		
		Элементы.ТаблицаОтборЗначение.ВыбиратьТип     = Ложь;	
		Элементы.ТаблицаОтборЗначение.ОграничениеТипа = Новый ОписаниеТипов;		
			 		
	КонецЕсли; 

КонецПроцедуры // ТаблицаОтборЗначениеНачалоВыбораОкончание()

&НаКлиенте
Процедура ТаблицаОтборЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	
	Если ТипЗнч(ТекущаяСтрока.ТипЗначения) = Тип("ОписаниеТипов") 
		И ТекущаяСтрока.ТипЗначения.Типы().Количество() > 1 Тогда
		
		ТекущаяСтрока.Значение = Неопределено;
		
	КонецЕсли;	
	
КонецПроцедуры // ТаблицаОтборЗначениеОчистка()

&НаКлиенте
Процедура ТаблицаОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Элемент.ТекущийЭлемент.Имя = "ТаблицаОтборИспользование" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Использование = Истина;
	
КонецПроцедуры // ТаблицаОтборПриОкончанииРедактирования()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если Копирование Тогда
			
			ТекущаяСтрока = Элементы.ОтборВОтчете.ТекущиеДанные;
			ТекущаяСтрока.Имя = "";
			
		КонецЕсли; 	
		
		ОткрытьФормуПолейПостроителя("ОтборВОтчете", "Имя", "Отбор");
		
	КонецЕсли;
  
КонецПроцедуры // ОтборВОтчетеПриНачалеРедактирования()

&НаКлиенте
Процедура ОтборВОтчетеИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПолейПостроителя("ОтборВОтчете", "Имя", "Отбор");
	  
КонецПроцедуры // ОтборВОтчетеИмяНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметры

// Процедура выполняет обновление таблицы параметров.
// 
&НаСервере
Процедура ОбновитьТаблицуПараметров()
	
	Если бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(Объект.ВидИнформационнойБазы) Тогда
		
		ПулСоединений = Новый Соответствие;
		
		Соединение = ПолучитьСоединение();
		ПулСоединений.Вставить(Объект.ВидИнформационнойБазы, Соединение);
		
	Иначе
		
		ПулСоединений = Неопределено;
		
	КонецЕсли; 
	
	ИсточникОбъект = РеквизитФормыВЗначение("Объект");

	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(ИсточникОбъект, ТаблицаПараметры, Истина, ПулСоединений);
	
КонецПроцедуры // ОбновитьТаблицуПараметров()

&НаСервере
Процедура ИзменитьВидПараметра(ИД, мТекущийВидПараметра)

	ТекущиеДанные = ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, мТекущийВидПараметра);

КонецПроцедуры // ИзменитьВидПараметра()

// Процедура ограничивает описание типов в строке таблица параметров.
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда
			
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
		
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры // ОграничитьОписаниеТиповПараметра()

&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение;   			
	КонецЕсли; 
	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	ОграничитьОписаниеТиповПараметра();
	
КонецПроцедуры // ТаблицаПараметрыПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		
		ОграничитьОписаниеТиповПараметра();
				
	КонецЕсли; 
		
КонецПроцедуры // ТаблицаПараметрыВидПараметраПриИзменении()

&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;
	
	//bit auavseenkov++ Расчет отложенных налогов
	Если ТекущиеДанные.ИмяПараметра = "ТипДанныхМУОбъект"
		или ТекущиеДанные.ИмяПараметра = "ТипДанныхНУОбъект" 
		  или ТекущиеДанные.ИмяПараметра = "ТипДанныхБУОбъект" Тогда 		
		СтандартнаяОбработка = Ложь;
		ПараметрыФ = Новый Структура("ИмяПараметра",ТекущиеДанные.ИмяПараметра);
		Форма = ПолучитьФорму("Справочник.бит_ИсточникиДанных.Форма.ФормаВыбораСубконто",ПараметрыФ);
		ТекущиеДанные.ЗначениеПараметра = Форма.ОткрытьМодально();
		
	КонецЕсли;	
	//}

КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраНачалоВыбора()

&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПорядок

&НаКлиенте
Процедура ПорядокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элементы.Порядок.ТекущиеДанные;		

			Если Копирование Тогда

				ТекущаяСтрока.Имя = "";

			Иначе

				ТекущаяСтрока.НаправлениеСортировки = фКэшЗначений.Перечисления.бит_мпд_НаправленияСортировки.Возрастание;

			КонецЕсли; 	

		ОткрытьФормуПолейПостроителя("Порядок", "ПутьКДанным", "Порядок");
	
	КонецЕсли; 
	
КонецПроцедуры // ПорядокПриНачалеРедактирования()

&НаКлиенте
Процедура ПорядокИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПолейПостроителя("Порядок", "ПутьКДанным", "Порядок");
	
КонецПроцедуры // ПорядокИмяНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзмерения

&НаКлиенте
Процедура ИзмеренияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		
		Если Копирование Тогда

		  	ТекущаяСтрока = Элементы.Измерения.ТекущиеДанные;
			ТекущаяСтрока.Имя = "";

		КонецЕсли; 	
		
	  	ОткрытьФормуПолейПостроителя("Измерения", "ПутьКДанным", "Измерение");
	
	КонецЕсли; 
	
КонецПроцедуры // ИзмеренияПриНачалеРедактирования()

&НаКлиенте
Процедура ИзмеренияПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПолейПостроителя("Измерения", "ПутьКДанным", "Измерение");
	  
КонецПроцедуры // ИзмеренияПолеНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствия

&НаКлиенте
Процедура ТаблицаСоответствияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ТаблицаСоответствияПриОкончанииРедактирования()

&НаКлиенте
Процедура ТаблицаСоответствияПолеПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если ТипЗнч(ТекущаяСтрока.ВидСоответствия) = Тип("Строка") Тогда
		
		// Фиксированные соответствия - можно выбрать.
		
		// Массив уже используемых полей источников
		СписокПолей = СписокАктивныхПолей(ЭтотОбъект);
		
		// Открываем форму выбора элемента
		Если СписокПолей.Количество() > 0 Тогда
			
			ТекЭлемент = СписокПолей.НайтиПоЗначению(ТекущаяСтрока.ПолеПриемник);
			
			Оповещение = Новый ОписаниеОповещения("ВыборПоляПриемникаЗавершение",ЭтотОбъект);
			СписокПолей.ПоказатьВыборЭлемента(Оповещение, "Выберите поле", ТекЭлемент);
			
		КонецЕсли; 
	
	ИначеЕсли ТипЗнч(ТекущаяСтрока.ВидСоответствия) = Тип("СправочникСсылка.бит_ВидыСоответствийАналитик") Тогда	
		
		// Универсальные соответствия
		
		// Массив уже используемых полей источников
		МассивВыбранных = бит_ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСРазделителями(ТекущаяСтрока.ПолеПриемник, "/");
		
		СписокПолей = Новый СписокЗначений;
		Для каждого СтрокаТаблицы Из Объект.Поля Цикл
			
			Если СтрокаТаблицы.Использование И СтрокаТаблицы.ВидПоля = "Поле" Тогда
				
				ИмяПоля = ПолучитьИмяПоля(СтрокаТаблицы.Имя, СтрокаТаблицы.Синоним);
				
				Если МассивВыбранных.Найти(ИмяПоля) = Неопределено Тогда
					флПометка = Ложь;
				Иначе	
					флПометка = Истина;
				КонецЕсли; 
				СписокПолей.Добавить(ИмяПоля, , флПометка);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Если СписокПолей.Количество() > 0 Тогда
			
			// Открываем форму для отметки полей
			Оповещение = Новый ОписаниеОповещения("ОтметкаПолейПримениковЗавершение", ЭтотОбъект);
			СписокПолей.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите поля приемники'"));
								
			
		КонецЕсли; 
				
	КонецЕсли;	// Это универсальное соответствие
	
КонецПроцедуры // ТаблицаСоответствияПолеПриемникНачалоВыбора()

// Процедура обработчик оповещения "ОтметкаПолейПримениковЗавершение".
// 
// Параметры:
// Список - СписокЗначений.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ОтметкаПолейПримениковЗавершение(Список, ДополнительныеДанные) Экспорт
	
	ТекущаяСтрока = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если ТипЗнч(Список) = Тип("СписокЗначений") И НЕ ТекущаяСтрока = Неопределено Тогда
		
		СтрИсточники = "";
		Для каждого Элемент Из Список Цикл
			
			Если Элемент.Пометка Тогда
				
				СтрИсточники = СтрИсточники + ?(ПустаяСтрока(СтрИсточники), "", "/") + Элемент.Значение;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Сохраняем результат выбора
		ТекущаяСтрока.ПолеПриемник = СтрИсточники;
		
	КонецЕсли; 
	
КонецПроцедуры	// ОтметкаПолейПримениковЗавершение

// Процедура обработчик оповещения "ВыборПоляПриемникаЗавершение".
// 
// Параметры:
// ВыбЭлемент - ЭлементСпискаЗначений.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВыборПоляПриемникаЗавершение(ВыбЭлемент, ДополнительныеДанные) Экспорт
	
	ТекущаяСтрока = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если НЕ ВыбЭлемент = Неопределено И НЕ ТекущаяСтрока = Неопределено Тогда
		
		// Сохраняем результат выбора
		ТекущаяСтрока.ПолеПриемник = ВыбЭлемент.Значение;
		
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПоляПриемникаЗавершение

&НаКлиенте
Процедура ТаблицаСоответствияПоляИсточникиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	// Массив уже используемых полей источников
	МассивВыбранных = бит_ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСРазделителями(ТекущаяСтрока.ПоляИсточники, "/");
	
	// Готовим список используемых полей
	СписокПолей = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Объект.Поля Цикл
		
		Если СтрокаТаблицы.Использование И СтрокаТаблицы.ВидПоля = "Поле" Тогда
			
			ИмяПоля = ПолучитьИмяПоля(СтрокаТаблицы.Имя, СтрокаТаблицы.Синоним);
			
			Если МассивВыбранных.Найти(ИмяПоля) = Неопределено Тогда
			    флПометка = Ложь;
			Иначе	
			    флПометка = Истина;
			КонецЕсли; 
			СписокПолей.Добавить(ИмяПоля, , флПометка);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если СписокПолей.Количество() > 0 Тогда
		
		// Открываем форму для отметки полей
		Оповещение = Новый ОписаниеОповещения("ВыборПолейИсточникаЗавершение", ЭтотОбъект);
		СписокПолей.ПоказатьОтметкуЭлементов(Оповещение,"Выберите поля источники");
	
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаСоответствияПоляИсточникиНачалоВыбора()

// Процедура обработчик оповещения "ВыборПолейИсточникаЗавершение".
// 
// Параметры:
// Список - СписокЗначений.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВыборПолейИсточникаЗавершение(Список, ДополнительныеДанные) Экспорт
	
	ТекущаяСтрока = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	Если ТипЗнч(Список) = Тип("СписокЗначений") И НЕ ТекущаяСтрока = Неопределено Тогда
		
		СтрИсточники = "";
		Для каждого Элемент Из Список Цикл
			
			Если Элемент.Пометка Тогда
				
				СтрИсточники = СтрИсточники + ?(ПустаяСтрока(СтрИсточники), "", "/") + Элемент.Значение;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Сохраняем результат выбора
		ТекущаяСтрока.ПоляИсточники = СтрИсточники;
		
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПолейИсточникаЗавершение

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПроверить(Команда)
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед выполнением действия необходимо записать источник данных. Записать?'");			
		Оповещение = Новый ОписаниеОповещения("КомандаПроверитьОкончаниеВопроса", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе 
	
		КомандаПроверитьОкончание();
		
	КонецЕсли;	
		
КонецПроцедуры // КомандаПроверить()

// Процедура окончание вопроса процедуры "КомандаПроверить".
// 
&НаКлиенте 
Процедура КомандаПроверитьОкончаниеВопроса(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();			
	КонецЕсли; 
	
	КомандаПроверитьОкончание();
	
КонецПроцедуры // КомандаПроверитьОкончаниеВопроса()

// Процедура окончание процедуры "КомандаПроверить".
// 
&НаКлиенте
Процедура КомандаПроверитьОкончание()

	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда			
		
		ПараметрыФормы = Новый Структура("СпособКомпоновки, ТаблицаПараметры", Объект.Ссылка, ТаблицаПараметры);
		ОткрытьФорму("Отчет.бит_ПроверкаСпособаКомпоновкиИсточников.Форма", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.Независимый);
       		
	КонецЕсли;	 

КонецПроцедуры // КомандаПроверитьОкончание()

&НаКлиенте
Процедура КомандаЗаполнитьПоля(Команда)
	
	Если ЗначениеЗаполнено(Объект.ЗапросБД)
		И Объект.Поля.Количество()>0 Тогда
			
		ТекстВопроса = НСтр("ru = 'Перечень полей будет перезаполнен. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьПоляОкончание", ЭтотОбъект); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе                          	
		ЗаполнениеПолей();
	КонецЕсли;	
	
КонецПроцедуры // КомандаЗаполнитьПоля()

// Процедура окончание процедуры "КомандаЗаполнитьПоля".
// 
&НаКлиенте 
Процедура КомандаЗаполнитьПоляОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнениеПолей();
	КонецЕсли; 
                
КонецПроцедуры // КомандаЗаполнитьПоляОкончание()

&НаКлиенте
Процедура КомандаЗаполнитьПараметры(Команда)
	
	ОбновитьТаблицуПараметров();	
		
КонецПроцедуры // КомандаЗаполнитьПараметры()

&НаКлиенте
Процедура КомандаДанныеУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.Поля, "Использование", 1);
	
КонецПроцедуры // КомандаДанныеУстановитьВсе()

&НаКлиенте
Процедура КомандаДанныеСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.Поля, "Использование", 0);
	
КонецПроцедуры // КомандаДанныеСнятьВсе()

&НаКлиенте
Процедура КомандаДанныеИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(Объект.Поля, "Использование", 2);
	
КонецПроцедуры // КомандаДанныеИнвертировать()

&НаКлиенте
Процедура КомандаОтборУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтбор, "Использование", 1);
	
КонецПроцедуры // КомандаОтборУстановитьВсе()

&НаКлиенте
Процедура КомандаОтборСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтбор, "Использование", 0);
	
КонецПроцедуры // КомандаОтборСнятьВсе()

&НаКлиенте
Процедура КомандаОтборИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтбор, "Использование", 2);
	
КонецПроцедуры // КомандаОтборИнвертировать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фТекстЗапроса = Объект.ЗапросБД.ТекстЗапроса;
	
	фКэшЗначений = Новый Структура;
	
	СтруктураИмен = Справочники.бит_ИсточникиДанных.ЗаполнитьСпискиИмен(Объект.ТипИсточника);
	фКэшЗначений.Вставить("ИменаРесурсов" , СтруктураИмен.ИменаРесурсов);
	фКэшЗначений.Вставить("ИменаИзмерений", СтруктураИмен.ИменаИзмерений);
	
	фКэшЗначений.Вставить("ВидСравненияРавно", ВидСравнения.Равно);
	
	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса", ТекПеречисление);
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_мпд_НаправленияСортировки);
	КэшПеречисления.Вставить("бит_мпд_НаправленияСортировки", ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления",КэшПеречисления);
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока"		 , ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью доступностью реквизитов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьВидимость()

	ПеречислениеТипов = Перечисления.бит_ТипыИсточниковДанных;
	
	ЭтоПолучениеФакта = Объект.ТипИсточника = ПеречислениеТипов.ПолучениеФакта;
	ЭтоРеглЗакрытие   = Объект.ТипИсточника = ПеречислениеТипов.РегламентноеЗакрытие;
	ЭтоОтложНалоги    = Объект.ТипИсточника = ПеречислениеТипов.ОтложенныеНалогиМСФО;
		
	Элементы.ПоляСиноним.КнопкаСпискаВыбора = ЭтоПолучениеФакта	ИЛИ ЭтоРеглЗакрытие ИЛИ ЭтоОтложНалоги;
	
	Элементы.Наименование.ТолькоПросмотр = Объект.Предопределенный;
	Элементы.ТипИсточника.ТолькоПросмотр = Объект.Предопределенный;
	Элементы.ЗапросБД.ТолькоПросмотр     = Объект.Предопределенный;
	Элементы.Релиз.ТолькоПросмотр        = Объект.Предопределенный;
	Элементы.Поля.ТолькоПросмотр         = Объект.Предопределенный;
	
	Если Метаданные.Справочники.бит_ИсточникиДанных.Реквизиты.Найти("ТипАлгоритмаЭлиминации") <> Неопределено Тогда
		ЭтоЭлиминация = Объект.ТипИсточника = Перечисления.бит_ТипыИсточниковДанных.Элиминация;
		Элементы.ТипАлгоритмаЭлиминации.Видимость = бит_ОбщегоНазначения.ЕстьОбъектыМСФО() И ЭтоЭлиминация;		
	КонецЕсли;                                                                                      	
	
	ЭтоВнешний = ?(Объект.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, Ложь, Истина);
	
	Элементы.НастройкаПодключения.Доступность               = ЭтоВнешний;
	Элементы.НастройкаПодключения.АвтоОтметкаНезаполненного = ЭтоВнешний;
	
	// Возможности запросов к автоматическому REST сервису в данный момент сильно ограничены ошибками платформы.
	ЭтоHTTP = ?(Объект.ЗапросБД.Вид = Перечисления.бит_мпд_ВидыЗапросов.ЗапросHTTP, Истина, Ложь);
	// Элементы.ГруппаСтраницаОтбор.Видимость = НЕ ЭтоHTTP;
	Элементы.ГруппаСтраницаОтборВОтчете.Видимость = НЕ ЭтоHTTP;	
	Элементы.ГруппаСтраницаПараметры.Видимость = НЕ ЭтоHTTP;
	Элементы.ГруппаСтраницаРасшифровка.Видимость = НЕ ЭтоHTTP;
	Элементы.ГруппаСтраницаПорядок.Видимость = НЕ ЭтоHTTP;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура сохраняет/восстанавливает настройки использования соответствий.
// 
// Параметры:
//  Строка - режим
// 
&НаСервере
Процедура СохранитьВосстановитьНастройкиСоответствий(Режим, ТекущийОбъект = Неопределено)

										
	ИменаПолей       = Новый Структура("Применить, ПоляИсточники, ПолеПриемник");
	
	Если Режим = "Восстановить" Тогда
		
         // Восстанавливаем таблицу соответствий
	     ВидыСоответствийФикс = Справочники.бит_ИсточникиДанных.ФиксированныеСоответствия();		
		
		// Фиксированные соответствия
		Для каждого КиЗ Из ВидыСоответствийФикс Цикл
			
			ВидСоотв = КиЗ.Ключ;
			
			НоваяСтрока   = ТаблицаСоответствия.Добавить();	
			НоваяСтрока.ВидСоответствия  = ВидСоотв;
			НоваяСтрока.ПредставлениеСоответствия = КиЗ.Значение;
			
			Для каждого КиЗполя Из ИменаПолей Цикл
				
				ИмяКолонки    = КиЗполя.Ключ;
				ИмяРеквизита  = ВидСоотв + "_" + ИмяКолонки;
				НоваяСтрока[ИмяКолонки] = Объект[ИмяРеквизита];			
				
			КонецЦикла; 
			
		КонецЦикла; // Фиксированные соответствия 
		
		// Универсальные соответствия
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	бит_ВидыСоответствийАналитик.Ссылка,
		               |	бит_ВидыСоответствийАналитик.Наименование
		               |ИЗ
		               |	Справочник.бит_ВидыСоответствийАналитик КАК бит_ВидыСоответствийАналитик
		               |ГДЕ
		               |	НЕ бит_ВидыСоответствийАналитик.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	бит_ВидыСоответствийАналитик.Приоритет
		               |АВТОУПОРЯДОЧИВАНИЕ";
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрОтбор = Новый Структура("ВидСоответствия", Выборка.Ссылка);
			НайденныеСтроки = ТекущийОбъект.НастройкиСоответствий.НайтиСтроки(СтрОтбор);
			
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			НоваяСтрока.ВидСоответствия           = Выборка.Ссылка;
			НоваяСтрока.ПредставлениеСоответствия = Выборка.Наименование;
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ПерваяСтрока = НайденныеСтроки[0];
				НоваяСтрока.Применить = Истина;
				НоваяСтрока.ПоляИсточники = ПерваяСтрока.ПоляИсточники;
				НоваяСтрока.ПолеПриемник = ПерваяСтрока.ПоляПриемники;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		
	ИначеЕсли Режим = "Сохранить" Тогда	
		
		ТекущийОбъект.НастройкиСоответствий.Очистить();		
		
		Для каждого СтрокаТаблицы Из ТаблицаСоответствия Цикл
			
			Если ТипЗнч(СтрокаТаблицы.ВидСоответствия) = Тип("Строка") Тогда
				
				// Фиксированные соответствия
				Для каждого КиЗполя Из ИменаПолей Цикл
					
					ИмяКолонки   = КиЗполя.Ключ;
					ИмяРеквизита = СтрокаТаблицы.ВидСоответствия + "_" + ИмяКолонки;
					ТекущийОбъект[ИмяРеквизита] = СтрокаТаблицы[ИмяКолонки];			
					
				КонецЦикла; 
				
			ИначеЕсли ТипЗнч(СтрокаТаблицы.ВидСоответствия) = Тип("СправочникСсылка.бит_ВидыСоответствийАналитик") Тогда
				
				// Универсальные соответствия
				Если СтрокаТаблицы.Применить Тогда
					
					НоваяСтрока = ТекущийОбъект.НастройкиСоответствий.Добавить();
					НоваяСтрока.ВидСоответствия = СтрокаТаблицы.ВидСоответствия;
					НоваяСтрока.ПоляИсточники = СтрокаТаблицы.ПоляИсточники;
					НоваяСтрока.ПоляПриемники = СтрокаТаблицы.ПолеПриемник;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; // ТаблицаСоответствий 
		
	КонецЕсли; 

КонецПроцедуры // СохранитьВосстановитьНастройкиСоответствий()

// Процедура обрабатывает изменение типа источника.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИзменениеТипаИсточника()
	
	СтруктураИмен = Справочники.бит_ИсточникиДанных.ЗаполнитьСпискиИмен(Объект.ТипИсточника);
	фКэшЗначений.ИменаРесурсов  = СтруктураИмен.ИменаРесурсов;
	фКэшЗначений.ИменаИзмерений = СтруктураИмен.ИменаИзмерений;
	
	УстановитьВидимость();	
	
КонецПроцедуры // ИзменениеТипаИсточника()

// Процедура Обрабатывает изменение запроса.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ПриИзмененииЗапроса()
	
	Если НЕ ЗначениеЗаполнено(Объект.ЗапросБД) Тогда
		
		Объект.ВидИнформационнойБазы = Неопределено;
		фТекстЗапроса  				 = "";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_Запросы.Ссылка,
		|	бит_Запросы.Наименование,
		|	бит_Запросы.ТекстЗапроса,
		|	бит_Запросы.ВидИнформационнойБазы,
		|	бит_Запросы.ВидИнформационнойБазы.НастройкаПодключенияПоУмолчанию КАК НастройкаПодключенияПоУмолчанию,
		|	бит_Запросы.Вид
		|ИЗ
		|	Справочник.бит_Запросы КАК бит_Запросы
		|ГДЕ
		|	бит_Запросы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.ЗапросБД);
		
		ТаблицаРеквизитов  = Запрос.Выполнить().Выгрузить();
		РеквивизитыЗапроса = ТаблицаРеквизитов[0];
		
		Объект.ВидИнформационнойБазы = РеквивизитыЗапроса.ВидИнформационнойБазы;
		фТекстЗапроса  				 = РеквивизитыЗапроса.ТекстЗапроса;
		Объект.НастройкаПодключения  = РеквивизитыЗапроса.НастройкаПодключенияПоУмолчанию;
		
		Если РеквивизитыЗапроса.Вид = Перечисления.бит_мпд_ВидыЗапросов.ЗапросHTTP Тогда
			
			ЗаполнениеПолейHTTP(Объект.ЗапросБД);
			
		Иначе	
			
			Если ТекущаяНастройкаПодключения <> Объект.НастройкаПодключения Тогда
				ТекущаяНастройкаПодключения = Объект.НастройкаПодключения;
			КонецЕсли; 
			
			ЗаполнениеПолей();
			ОбновитьТаблицуПараметров();
			
		КонецЕсли; 
	КонецЕсли; 
	
	ЗапросБДТекущий = Объект.ЗапросБД;	
	УстановитьВидимость();	
	
КонецПроцедуры // ИзменениеЗапроса()

// Процедура обрабатывает изменение настройки подключения.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИзменениеНастройкиПодключения()
	
	Если ТекущаяНастройкаПодключения <> Объект.НастройкаПодключения Тогда
		
		ТекущаяНастройкаПодключения = Объект.НастройкаПодключения;
		
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // ИзменениеНастройкиПодключения()

&НаСервере
Процедура ЗаполнениеПолейHTTP(ТекущийЗапрос)
	
	Объект.Поля.Очистить();
	Объект.ОтборВОтчете.Очистить();
	Объект.Измерения.Очистить();
	Объект.Порядок.Очистить();	
	
	Для каждого ТекущаяСтрока Из ТекущийЗапрос.ДоступныеПоля Цикл
		
		НоваяСтрока = Объект.Поля.Добавить();
		НоваяСтрока.Имя = ТекущаяСтрока.Имя;
		НоваяСтрока.ВидПоля = ?( ВРег(ТекущаяСтрока.ТипСтр) = ВРег("Число"), "Ресурс", "Поле");
		НоваяСтрока.Использование = ?( ВРег(НоваяСтрока.ВидПоля) = ВРег("Ресурс"), Истина, Ложь);
		
		Если Найти(ТекущаяСтрока.Имя, "_Key") > 0 Тогда
			
			НоваяСтрока.Синоним = СтрЗаменить(ТекущаяСтрока.Имя, "_Key", "");	
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнениеПолейHTTP()

// Процедура заполняет перечень полей источника.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнениеПолей()
	
	ПоляВрем = Объект.Поля.Выгрузить();
	
	Если Объект.ЗапросБД.Вид = Перечисления.бит_мпд_ВидыЗапросов.ЗапросHTTP Тогда
		
		ЗаполнениеПолейHTTP(Объект.ЗапросБД);
		
	Иначе	
		
		РезСтруктура = ПолучитьПостроитель();
		
		Если НЕ РезСтруктура.Построитель = Неопределено Тогда
			
			ИсточникОбъект = ДанныеФормыВЗначение(Объект,Тип("СправочникОбъект.бит_ИсточникиДанных"));
			Справочники.бит_ИсточникиДанных.ЗаполнитьПоля(ИсточникОбъект,РезСтруктура.Построитель,,РезСтруктура.Соединение);
			ЗначениеВДанныеФормы(ИсточникОбъект, Объект);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	// Восстанавливаем настройки, если поля уже использовались
	МаксИндекс = Объект.Поля.Количество() - 1;
	Для каждого СтрокаТаблицы Из ПоляВрем Цикл
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Имя", СтрокаТаблицы.Имя);
		
		НайденныеСтроки = Объект.Поля.НайтиСтроки(СтрОтбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ПерваяСтрока = НайденныеСтроки[0];
			ПерваяСтрока.Использование = СтрокаТаблицы.Использование;
			ПерваяСтрока.Синоним = СтрокаТаблицы.Синоним;
			
			Дельта = СтрокаТаблицы.НомерСтроки - ПерваяСтрока.НомерСтроки;
			Если НЕ Дельта = 0 Тогда
				
				ТекИндекс = Объект.Поля.Индекс(ПерваяСтрока);
				НовИндекс = ТекИндекс + Дельта;
				Если НовИндекс >=0 И НовИндекс <= МаксИндекс  Тогда
					
					Объект.Поля.Сдвинуть(ТекИндекс, Дельта);
					
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;  //ПоляВрем
	
	Если Объект.Поля.Количество() > 0 Тогда
		 ПерваяСтрока = Объект.Поля[0];
		 Элементы.Поля.ТекущаяСтрока = ПерваяСтрока.ПолучитьИдентификатор();
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнениеПолей()

// Функция получает соединение с внешней ИБ. 
// Если соединение не обнаружено производится попытка подключиться к внешней ИБ.
// 
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//  ComObject
// 
&НаСервере
Функция ПолучитьСоединение()
	
	Соединение = Неопределено;	
	
	Если ЗначениеЗаполнено(Объект.НастройкаПодключения) Тогда
		Соединение = бит_мпд_ПовтИсп.ПодключитьКОМ(Объект.НастройкаПодключения);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнена настройка подключения!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.НастройкаПодключения"); 
	КонецЕсли; 
	
	Возврат Соединение;
	
КонецФункции // ПолучитьСоединение()

// Функция инициализирует построитель для текущей или внешней базы.
// 
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//  Структура
// 
&НаСервере
Функция ПолучитьПостроитель()

	Если бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(Объект.ВидИнформационнойБазы) Тогда
		
		Соединение = ПолучитьСоединение();
				
		Если НЕ Соединение = Неопределено Тогда
		
			Построитель     = Соединение.NewObject("ПостроительЗапроса");
		
		КонецЕсли; 
		
	Иначе
		
		Построитель = Новый ПостроительЗапроса;
	
	КонецЕсли; 	

	Если НЕ Построитель = Неопределено Тогда
	
		Построитель.Текст = Объект.ЗапросБД.ТекстЗапроса;
		Если Объект.ЗапросБД.АвтозаполнениеНастроек Тогда
		
			Построитель.ЗаполнитьНастройки();
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	РезСтруктура = Новый Структура("Построитель, Соединение", Построитель, Соединение);
	
	Возврат РезСтруктура;
	
КонецФункции // ПолучитьПостроитель()

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ЗапросБДТекущий = Объект.ЗапросБД;

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяПоля(Имя,Синоним)
	
	ИмяПоля = ?(ПустаяСтрока(Синоним), Имя, Синоним);
	ИмяПоля = СтрЗаменить(ИмяПоля, ".", "");
	
	Возврат ИмяПоля;
	
КонецФункции // ПолучитьИмяПоля()

&НаКлиентеНаСервереБезКонтекста
Функция СписокАктивныхПолей(Форма)
	
	СписокПолей = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Форма.Объект.Поля Цикл
		Если СтрокаТаблицы.Использование И СтрокаТаблицы.ВидПоля = "Поле" Тогда
			ИмяПоля = ПолучитьИмяПоля(СтрокаТаблицы.Имя,СтрокаТаблицы.Синоним);
			СписокПолей.Добавить(ИмяПоля);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат СписокПолей;
	
КонецФункции

// Процедура открывает форму выбора полей построителя //внутри модальный вызов!.
// 
// Параметры:
//  ИмяТабЧасти - Строка
//  ИмяПоля     - Строка
//  Режим       - Строка
// 
&НаКлиенте
Процедура ОткрытьФормуПолейПостроителя(ИмяТабЧасти, ИмяПоля, Режим)

	ТекущаяСтрока = Элементы[ИмяТабЧасти].ТекущиеДанные;
		
	ПараметрыФормы  = Новый Структура;
	ПараметрыФормы.Вставить("ВидИнформационнойБазы", Объект.ВидИнформационнойБазы);
	ПараметрыФормы.Вставить("ТекстЗапроса"         , фТекстЗапроса);
	ПараметрыФормы.Вставить("Режим"            	   , Режим);
	ПараметрыФормы.Вставить("ВыводитьВложенные"	   , Истина);
	ПараметрыФормы.Вставить("НастройкаПодключения" ,Объект.НастройкаПодключения);
	ПараметрыФормы.Вставить("ЗапросБД", Объект.ЗапросБД);
	
	ВремПоля = Новый Структура;
	Для каждого СтрокаТаблицы Из Объект.Поля Цикл
	
		Если СтрокаТаблицы.Использование Тогда
		
			ОписаниеПоля = Новый Структура("Имя, Синоним, ВидПоля", СтрокаТаблицы.Имя, СтрокаТаблицы.Синоним, СтрокаТаблицы.ВидПоля);
			ВремПоля.Вставить(СтрокаТаблицы.Имя, ОписаниеПоля);
		
		КонецЕсли; 
	
	КонецЦикла; 
	ПараметрыФормы.Вставить("Поля", ВремПоля);
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока[ИмяПоля]) Тогда
		
		ПараметрыФормы.Вставить("ТекПутьКДанным", ТекущаяСтрока[ИмяПоля]);
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуПолейПостроителяОкончание", ЭтотОбъект, Новый Структура("ИмяТабЧасти, ИмяПоля, Режим", ИмяТабЧасти, ИмяПоля, Режим));  
	ОткрытьФорму("ОбщаяФорма.бит_мпд_ФормаВыбораСвойствПостроителя", ПараметрыФормы,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОткрытьФормуПолейПостроителя()

// Процедура окончание процедуры "ОткрытьФормуПолейПостроителя".
// 
&НаКлиенте 
Процедура ОткрытьФормуПолейПостроителяОкончание(РезВыбора, ДополнительныеПараметры) Экспорт
	
	ИмяТабЧасти  = ДополнительныеПараметры.ИмяТабЧасти;
	ИмяПоля		 = ДополнительныеПараметры.ИмяПоля;
	Режим 		 = ДополнительныеПараметры.Режим;
	
	ТекущаяСтрока = Элементы[ИмяТабЧасти].ТекущиеДанные;
	
	Если ТипЗнч(РезВыбора) = Тип("Структура") Тогда
	
		ТекущаяСтрока[ИмяПоля] = РезВыбора.ПутьКДанным;
		
		Если ИмяТабЧасти = "ТаблицаОтбор" Тогда
		
			ТекущаяСтрока.ТипЗначения  = РезВыбора.ТипЗначения;
			ТекущаяСтрока.Значение     = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.Значение);
			ТекущаяСтрока.ВидСравнения = ВидСравнения.Равно;
			
			Если ТекущаяСтрока.ПутьКДанным = "Периодичность" 
				 И ТипЗнч(ТекущаяСтрока.Значение) = Тип("Число") Тогда
			
				ТекущаяСтрока.ЭтоПериодичность = Истина;
			
			КонецЕсли; 
			
		ИначеЕсли ИмяТабЧасти = "ОтборВОтчете" Тогда
			
			ТекущаяСтрока.ТипЗначенияСтр = бит_ОбщегоНазначения.СтроковоеПредставлениеОписанияТипов(РезВыбора.ТипЗначения);
			
		ИначеЕсли ИмяТабЧасти = "Поля" Тогда	
			
			Если РезВыбора.ЭтоЧисловоеПоле Тогда
				
				ТекущаяСтрока.ВидПоля = "Ресурс";
			
			Иначе	
				
				ТекущаяСтрока.ВидПоля = "Поле";
				
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФормуПолейПостроителяОкончание()

&НаСервере
Функция ТаблицаОтборЗначениеНачалоВыбора_ВызовСервера()
	СписокТипов = Новый СписокЗначений;
	НаборЗаписей = РегистрыБухгалтерии.бит_Дополнительный_2.СоздатьНаборЗаписей();
	ВсеСсылки = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	
	Для Каждого Строка из ВсеСсылки Цикл 
		СтрокаТипов = СписокТипов.Добавить();
		СтрокаТипов.Значение = Строка(Строка);
		СтрокаТипов.Представление = Строка(Строка);
	КонецЦикла;
	Возврат СписокТипов;
КонецФункции

//bit auavseenkov++ Расчет отложенных налогов 21.11.2014
&НаКлиенте
Процедура ПоляИспользованиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Поля.ТекущиеДанные;
	Если  ЗначениеЗаполнено(Объект.ТипИсточника) Тогда 
		Если Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.бит_ТипыИсточниковДанных.бит_МСФО_ОтложенныеНалогиКорректировкиОстаткиБУ") 
			Или Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.бит_ТипыИсточниковДанных.бит_МСФО_ОтложенныеНалогиКорректировкиОборотыМУ")
			  Или Объект.ТипИсточника = ПредопределенноеЗначение("Перечисление.бит_ТипыИсточниковДанных.бит_МСФО_ОтложенныеНалогиКорректировкиОстаткиМУ") Тогда 
			Если ВРЕГ(ТекущаяСтрока.ВидПоля) = "РЕСУРС" и ТекущаяСтрока.Использование Тогда 
				ТекущаяСтрока.Синоним = "Сумма";
			ИначеЕсли ВРЕГ(ТекущаяСтрока.ВидПоля) = "РЕСУРС" и не ТекущаяСтрока.Использование Тогда   
				ТекущаяСтрока.Синоним = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

