#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда			
		Возврат;			
	КонецЕсли; 
	
	Если НЕ ЭтоГруппа Тогда 
		ПроверитьПередЗаписью(Отказ);
	КонецЕсли; 
	
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства); 
		
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда			
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
		Релиз = "";
		Если НЕ ПолучитьФункциональнуюОпцию("бит_ИспользоватьПодключениеКВнешнимБазам") Тогда
			ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
			НастройкаПодключения = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЭтоГруппа Тогда 
		// В проверке заполнения используются данные объекта, изменяемые перед записью.
		// Поэтому проверку надо делать перед записью.
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И Не ЭтоГруппа Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("Основание") И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("СправочникСсылка.бит_Запросы") Тогда
			ЗаполнитьПоЗапросу(ДанныеЗаполнения.Основание);
		КонецЕсли; 	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.бит_Запросы") Тогда
		ЗаполнитьПоЗапросу(ДанныеЗаполнения);
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
          
// Функция получает настройки источника.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
// 
Функция ПолучитьНастройкиИсточника() Экспорт

	СтруктураНастроек = НастройкиПостроителя.Получить();
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Процедура сохраняет настройки источника.
// 
// Параметры:
//  СтруктураНастроек - Структура.
// 
Процедура СохранитьНастройкиИсточника(СтруктураНастроек)  Экспорт

	 НастройкиПостроителя = Новый ХранилищеЗначения(СтруктураНастроек);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоЗапросу(ДанныеЗаполнения)

	Если ПустаяСтрока(Наименование) Тогда
		Наименование = Строка(ДанныеЗаполнения);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_Запросы.Ссылка,
	|	бит_Запросы.Наименование,
	|	бит_Запросы.ТекстЗапроса,
	|	бит_Запросы.ВидИнформационнойБазы,
	|	бит_Запросы.ВидИнформационнойБазы.НастройкаПодключенияПоУмолчанию КАК НастройкаПодключенияПоУмолчанию,
	|	бит_Запросы.Вид
	|ИЗ
	|	Справочник.бит_Запросы КАК бит_Запросы
	|ГДЕ
	|	бит_Запросы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ТаблицаРеквизитов  = Запрос.Выполнить().Выгрузить();
	РеквивизитыЗапроса = ТаблицаРеквизитов[0];
	
	ВидИнформационнойБазы = РеквивизитыЗапроса.ВидИнформационнойБазы;
	НастройкаПодключения  = РеквивизитыЗапроса.НастройкаПодключенияПоУмолчанию;
	ЗапросБД			  = ДанныеЗаполнения;
	
	Если РеквивизитыЗапроса.Вид = Перечисления.бит_мпд_ВидыЗапросов.Запрос1С 
		И ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза Тогда
		
		Построитель = Новый ПостроительОтчета;
		Справочники.бит_ИсточникиДанных.ЗаполнитьПоля(ЭтотОбъект,Построитель);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПередЗаписью(Отказ)
	
	Если ПолучитьФункциональнуюОпцию("бит_ИспользоватьПодключениеКВнешнимБазам") Тогда
		Если НЕ ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза Тогда
			Если НЕ ЗначениеЗаполнено(НастройкаПодключения) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Нстр("ru = 'Подключение'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НастройкаПодключения", , Отказ);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	РеквизитыЗапроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотОбъект.ЗапросБД, "Вид, ТекстЗапроса");
	Если НЕ РеквизитыЗапроса.Вид = Перечисления.бит_мпд_ВидыЗапросов.ЗапросHTTP Тогда
		
		ПроверитьПередЗаписьюОбщаяПроверка(РеквизитыЗапроса, Отказ);
		
		Если ТипИсточника = Перечисления.бит_ТипыИсточниковДанных.ОтложенныеНалогиМСФО Тогда
			ПроверитьПередЗаписьюОтложенныеНалогиМСФО(Отказ);
		ИначеЕсли ТипИсточника = Перечисления.бит_ТипыИсточниковДанных.ПолучениеФакта Тогда
			ПроверитьПередЗаписьюПолучениеФакта(Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПередЗаписьюПолучениеФакта(Отказ)
	
	// Сформируем таблицу измерений для передачи в проверочный запрос.
	Исключения = Новый Массив;
	Исключения.Добавить("Сценарий");
	ИменаИзмерений = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Обязательные",
						"Синоним", "Массив", Исключения);
	
	ТаблицаИзмерения = Новый ТаблицаЗначений;
	ТаблицаИзмерения.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка"));
	Для й = 1 По ИменаИзмерений.Количество() Цикл
		ТаблицаИзмерения.Добавить();
	КонецЦикла; 
	ТаблицаИзмерения.ЗагрузитьКолонку(ИменаИзмерений,"Имя");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПоля",Поля.Выгрузить());	
	Запрос.УстановитьПараметр("Измерения"  ,ТаблицаИзмерения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоля.Использование КАК Использование,
	|	ВЫРАЗИТЬ(ТаблицаПоля.Имя КАК СТРОКА(200)) КАК Имя,
	|	ВЫРАЗИТЬ(ТаблицаПоля.Синоним КАК СТРОКА(200)) КАК Синоним
	|ПОМЕСТИТЬ Поля
	|ИЗ
	|	&ТаблицаПоля КАК ТаблицаПоля
	|ГДЕ
	|	ТаблицаПоля.Использование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Измерения.Имя КАК СТРОКА(200)) КАК Имя
	|ПОМЕСТИТЬ Измерения
	|ИЗ
	|	&Измерения КАК Измерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Поля.Использование КАК Использование,
	|	Поля.Имя КАК Имя,
	|	Поля.Синоним КАК Синоним
	|ИЗ
	|	Поля КАК Поля
	|ГДЕ
	|	(Поля.Имя = ""Сумма""
	|				И Поля.Синоним = """"
	|			ИЛИ Поля.Синоним = ""Сумма""
	|			ИЛИ Поля.Имя = ""Количество""
	|				И Поля.Синоним = """"
	|			ИЛИ Поля.Синоним = ""Количество"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Измерения.Имя КАК Имя
	|ИЗ
	|	Измерения КАК Измерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Поля КАК Поля
	|		ПО (Поля.Имя = Измерения.Имя
	|					И Поля.Синоним = """"
	|				ИЛИ Поля.Синоним = Измерения.Имя)
	|ГДЕ
	|	Поля.Имя ЕСТЬ NULL";
	
	Пакет = Запрос.ВыполнитьПакет();
	Если Пакет[2].Пустой() Тогда
		Уточнение 	   = Нстр("ru = 'Не указаны ни сумма, ни количество!'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список",
							"Корректность",,,"Данные",Уточнение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Поля", ,Отказ);
	КонецЕсли; 
	
	// Выведем сообщения об отсутствии связи с обязательными измерениями бюджетирования.
	Выборка = Пакет[3].Выбрать();
	ТекстСообщения = "";
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения),"",", ") + СокрЛП(Выборка.Имя);
	КонецЦикла; 
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		Уточнение = СтрШаблон(НСтр("ru = 'Не указана связь с обязательными измерениями бюджетирования: %1.'"),
						ТекстСообщения);
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список",
							"Корректность",,,"Данные",Уточнение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Поля", ,Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПередЗаписьюОбщаяПроверка(РеквизитыЗапроса, Отказ)
	
	Если ТипИсточника = Перечисления.бит_ТипыИсточниковДанных.РегламентированнаяОтчетность Тогда		
		Если НЕ ЗначениеЗаполнено(ИмяСлагаемогоРасшифровкиРеглОтчетности) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Нстр("ru = 'Имя слагаемого расшифровки регламентированной отчетности'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ИмяСлагаемогоРасшифровкиРеглОтчетности", , Отказ);
		КонецЕсли; 
	КонецЕсли; 
	
	СтрокаКонтроль = Поля.Найти(Истина, "Использование");
	Если СтрокаКонтроль = Неопределено Тогда
		Уточнение = НСтр("ru = 'Должно быть выбрано хотя бы одно поле.'");	
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список" , "Корректность",,,"Данные", Уточнение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Поля", ,Отказ);
	КонецЕсли; 
	
	// Проверим заполнение параметров запроса.
	Если ЗначениеЗаполнено(ЗапросБД) И НЕ Предопределенный 
		И НЕ бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(ВидИнформационнойБазы) Тогда
		
		Параметры = Новый Массив;
		СохраненнаяНастройка = НастройкиПостроителя.Получить();
		
		Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура")  Тогда
			Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
				Параметры.Добавить(Параметр.Ключ);
			КонецЦикла;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-06-21 (#3314)
		Иначе
			Возврат;
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-06-21 (#3314)			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст 	   = РеквизитыЗапроса.ТекстЗапроса;
		ОписаниеПараметров = Запрос.НайтиПараметры();
		ТекстСообщения     = ""; 
		Служебные 		   = бит_МеханизмПолученияДанных.КонструкторПредопределенныхПараметров();
		
		Для каждого ОписаниеПараметра Из ОписаниеПараметров Цикл				
			ИмяПараметра = ОписаниеПараметра.Имя;
			Если Служебные.Найти(ИмяПараметра)<>Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Параметры.Найти(ИмяПараметра)=Неопределено Тогда
				ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", ", ") + ИмяПараметра;
			КонецЕсли; 
		КонецЦикла;
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			Уточнение = СтрШаблон(НСтр("ru = 'Не заданы параметры: ""%1"".'"), ТекстСообщения);
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список" , "Корректность",,,"Параметры",Уточнение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТаблицаПараметры", ,Отказ);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПередЗаписьюОтложенныеНалогиМСФО(Отказ)
	
	// Соответствие хранит список обязательных полей и признаки того, что они указаны в источнике.
	Служебные = Новый Соответствие;
	Служебные.Вставить("СуммаНУ", Ложь);
	Служебные.Вставить("СуммаМУ", Ложь);
	Служебные.Вставить("СуммаПР", Ложь);
	
	Для каждого СтрокаТаблицы Из Поля Цикл
		Если СтрокаТаблицы.Использование Тогда
			ИмяПоля   = ?(ПустаяСтрока(СтрокаТаблицы.Синоним), "Имя", "Синоним");
			Служебный = Служебные.Получить(СтрокаТаблицы[ИмяПоля]);
			Если Служебный <> Неопределено Тогда
				Если Служебный = Истина Тогда
					Поле = "Поля[%1].%2";
					Поле = СтрШаблон(Поле, Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ="),ИмяПоля);
					Уточнение	   = Нстр("ru = 'Значение дублируется.'");
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",
										"Корректность", ИмяПоля, СтрокаТаблицы.НомерСтроки, "Данные", Уточнение);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,,Отказ);
				Иначе
					Служебные[СтрокаТаблицы[ИмяПоля]] = Истина;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли; 					
	КонецЦикла;
	
	ТекстСообщения = "";
	Для каждого Элемент Из Служебные Цикл
		Если Элемент.Значение = Ложь Тогда
			ТекстСообщения = ТекстСообщения + ?(ПустаяСтрока(ТекстСообщения), "", ",") + Элемент.Ключ;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		Уточнение 	   = СтрШаблон(Нстр("ru = 'Не выбраны обязательные поля: %1'"), ТекстСообщения);
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список",
							"Корректность",,, "Данные", Уточнение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Поля", ,Отказ);
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти

#КонецЕсли
