#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ЭкспортныеПроцедурыФункции
	
// Процедура обновляет настройки предопределенных источников данных.
// 
// 
Процедура ОбновитьПредопределенныеИсточники(Знач Макет = Неопределено, РежимСообщений = "Все") Экспорт

	ВыводитьОшибки     = РежимСообщений = "Все" ИЛИ РежимСообщений = "Ошибки";
	ВыводитьИнформацию = РежимСообщений = "Все";
	
	Если Макет = Неопределено Тогда	
		Макет = Справочники.бит_ИсточникиДанных.ПолучитьМакет("НастройкиПоУмолчанию");	
	КонецЕсли; 
	
	ЕстьТипаАлгоритмаЭлиминации = Метаданные.Справочники.бит_ИсточникиДанных.Реквизиты.Найти("ТипАлгоритмаЭлиминации") <> Неопределено 
									И бит_ОбщегоНазначения.ЕстьОбъектыМСФО();
	
	// Инициализируем таблицу для получения данных.
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Релиз");
	ТаблицаДанных.Колонки.Добавить("Имя");
	ТаблицаДанных.Колонки.Добавить("ИмяЗапроса");
	ТаблицаДанных.Колонки.Добавить("ТипИсточника");
	ТаблицаДанных.Колонки.Добавить("ВыбранныеПоля");
	ТаблицаДанных.Колонки.Добавить("ПоляОтбора");
	Если ЕстьТипаАлгоритмаЭлиминации Тогда
		ТаблицаДанных.Колонки.Добавить("ТипАлгоритмаЭлиминации");
	КонецЕсли;

	// Получим данные из макета
	НСтрока      = 2;
	НКолонкаТест = 1;
	ТестовоеЗначение = СокрЛП(Макет.Область(НСтрока,НКолонкаТест,НСтрока,НКолонкаТест).Текст);
	Дальше = ЗначениеЗаполнено(ТестовоеЗначение);

	Пока Дальше Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Релиз           = СокрЛП(Макет.Область(НСтрока, 1, НСтрока, 1).Текст);
		НоваяСтрока.Имя             = СокрЛП(Макет.Область(НСтрока, 2, НСтрока, 2).Текст);
		НоваяСтрока.ИмяЗапроса      = СокрЛП(Макет.Область(НСтрока, 3, НСтрока, 3).Текст);
		НоваяСтрока.ТипИсточника    = СокрЛП(Макет.Область(НСтрока, 4, НСтрока, 4).Текст);
		НоваяСтрока.ВыбранныеПоля   = СокрЛП(Макет.Область(НСтрока, 5, НСтрока, 5).Текст);
		НоваяСтрока.ПоляОтбора      = СокрЛП(Макет.Область(НСтрока, 6, НСтрока, 6).Текст);
		Если ЕстьТипаАлгоритмаЭлиминации Тогда
			НоваяСтрока.ТипАлгоритмаЭлиминации = СокрЛП(Макет.Область(НСтрока, 7, НСтрока, 7).Текст);
		КонецЕсли;
		
		НоваяСтрока.ВыбранныеПоля  = СтрЗаменить(НоваяСтрока.ВыбранныеПоля, Символы.ПС, "");
		НоваяСтрока.ПоляОтбора     = СтрЗаменить(НоваяСтрока.ПоляОтбора   , Символы.ПС, "");
		
        НСтрока = НСтрока + 1;				
        ТестовоеЗначение = СокрЛП(Макет.Область(НСтрока, НКолонкаТест, НСтрока, НКолонкаТест).Текст);
        Дальше = ЗначениеЗаполнено(ТестовоеЗначение);
		
	КонецЦикла;  // По строкам макета
	
	// Обновим предопределенные источники при необходимости.
	Ном = 0;
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		// Найдем источник данных по имени предопределенного.
		Попытка
			
			СпрИсточник = Справочники.бит_ИсточникиДанных[СтрокаТаблицы.Имя];
			
		Исключение
			
		  СпрИсточник = Неопределено;
		  Если ВыводитьОшибки Тогда
		  
		  	ТекстСообщения = "ru = 'Не удалось найти предопределенный элемент справочника ""Источники данных"" по имени %1%'";
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.Имя);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		  
		  КонецЕсли; 
			
			
		КонецПопытки;
		
		// Найдем запрос по имени предопределенного
		Попытка
		
			СпрЗапрос = Справочники.бит_Запросы[СтрокаТаблицы.ИмяЗапроса];
		
		Исключение
			
		  СпрЗапрос = Неопределено;
		  Если ВыводитьОшибки Тогда
		  
		  	ТекстСообщения = "ru = 'Не удалось найти предопределенный элемент справочника ""Запросы"" по имени %1%'";
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.ИмяЗапроса);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		  
		  КонецЕсли;			
			
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(СпрИсточник) ИЛИ НЕ ЗначениеЗаполнено(СпрЗапрос) Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если бит_ОбщегоНазначенияКлиентСервер.ВерсияОбновленияСтарше(СпрИсточник.Релиз,СтрокаТаблицы.Релиз) Тогда
			
			СпрОбъект = СпрИсточник.ПолучитьОбъект();
			СпрОбъект.ЗапросБД     = СпрЗапрос;
			СпрОбъект.ТипИсточника = Перечисления.бит_ТипыИсточниковДанных[СтрокаТаблицы.ТипИсточника];
			СпрОбъект.Релиз        = СтрокаТаблицы.Релиз;
			СпрОбъект.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
			Если ЕстьТипаАлгоритмаЭлиминации И ЗначениеЗаполнено(СтрокаТаблицы.ТипАлгоритмаЭлиминации) Тогда
			 	СпрОбъект.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации[СтрокаТаблицы.ТипАлгоритмаЭлиминации];
			КонецЕсли;
			
			МассивПолейВкл   = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(СтрокаТаблицы.ВыбранныеПоля,",");
			
			// Разберем синонимы
			СоотвПолейВкл    = Новый Соответствие;
			Для каждого Элемент Из МассивПолейВкл Цикл
				
				ПозРазделитель = Найти(Элемент,"/");
				Если ПозРазделитель>0 Тогда
					ИмяПоля     = СокрЛП(Лев(Элемент,ПозРазделитель-1));
					СинонимПоля = Сред(Элемент,ПозРазделитель+1);
					СоотвПолейВкл.Вставить(ИмяПоля,СинонимПоля);
				Иначе	
				   ИмяПоля = СокрЛП(Элемент);
				   СоотвПолейВкл.Вставить(ИмяПоля,"");
				КонецЕсли; 
			
			КонецЦикла; 
			
			МассивПолейОтбор = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(СтрокаТаблицы.ПоляОтбора,",");
			
			Построитель = Новый ПостроительОтчета;
			
			// Заполним параметры построителя
			МассивИсключений  = бит_МеханизмПолученияДанных.КонструкторПредопределенныхПараметров();
			ТаблицаПараметров = КонструкторТаблицыПараметров();
			ЗаполнитьПараметры(ТаблицаПараметров,СпрЗапрос,МассивИсключений,Ложь);
			
			ЗаполнитьПоля(СпрОбъект,Построитель,СоотвПолейВкл);
			ЗаполнитьПоляОтбора(Построитель,МассивПолейОтбор);
			
			Построитель.Параметры.Очистить();
			
			Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
				
				Построитель.Параметры.Вставить(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
				
			КонецЦикла;
			
			// Сохраним настройки построителя
			СтруктураНастройки = Новый Структура;
			СтруктураНастройки.Вставить("НастройкиПостроителя", Построитель.ПолучитьНастройки(Истина,Ложь,Истина,Истина));
			СтруктураНастройки.Вставить("ПараметрыПостроителя", Построитель.Параметры);
			СтруктураНастройки.Вставить("Отбор"               , Построитель.Отбор);
			
			ХранилищеДанных = Новый ХранилищеЗначения(СтруктураНастройки);
			СпрОбъект.НастройкиПостроителя = ХранилищеДанных;
			
			флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОбъект,,"Ошибки");
			Если флДействиеВыполнено Тогда			
				Ном = Ном + 1;			
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; // По таблице данных

	Если ВыводитьИнформацию Тогда
	
		 ТекстСообщения = НСтр("ru = 'Выполнена проверка версий предопределенных элементов справочника ""Источники данных"". Обновлено %1% элементов.'");
		 ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(Ном));
		 бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьПредопределенныеИсточники()

// Процедура заполняет табличную часть поля по доступным полям построителя.
// 
Процедура ЗаполнитьПоля(ИсточникОбъект,ПостроительОтчета,СоотвВключенных = Неопределено, Соединение = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИсточникОбъект.ЗапросБД) 
		ИЛИ НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникОбъект.ЗапросБД, "ТекстЗапроса")) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	ОписаниеЧисло = Новый ОписаниеТипов("Число");
	
	ИсточникОбъект.Поля.Очистить();
	
	ПостроительОтчета.Текст = ИсточникОбъект.ЗапросБД.ТекстЗапроса;
	
	Если ИсточникОбъект.ЗапросБД.АвтозаполнениеНастроек Тогда
	
		 ПостроительОтчета.ЗаполнитьНастройки();
	
	КонецЕсли; 
	
	Для каждого ПолеПостроителя Из ПостроительОтчета.ДоступныеПоля Цикл
		
		Если ПолеПостроителя.Имя = "Периодичность" Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ПолеПостроителя.Поле Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока     = ИсточникОбъект.Поля.Добавить();
		НоваяСтрока.Имя = ПолеПостроителя.Имя;
		Если ПостроительОтчета.ВыбранныеПоля.Найти(ПолеПостроителя.Имя)<>Неопределено Тогда
			НоваяСтрока.Использование = Истина;
		КонецЕсли; 
		Если ЭтоЧисловоеПоле(ПолеПостроителя, Соединение) Тогда
			НоваяСтрока.ВидПоля = "Ресурс";
		Иначе	
			НоваяСтрока.ВидПоля = "Поле";			
		КонецЕсли; 
		
		Если ТипЗнч(СоотвВключенных) = Тип("Соответствие") Тогда
			 
			 
			 Если НЕ СоотвВключенных[НоваяСтрока.Имя] = Неопределено Тогда
			 
			 	  НоваяСтрока.Использование = Истина;
				  НоваяСтрока.Синоним = СоотвВключенных[НоваяСтрока.Имя];
				  			 	 
			 Иначе	  
			 	
			 	 НоваяСтрока.Использование = Ложь;
			 	
			 КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	ИсточникОбъект.Поля.Сортировать("ВидПоля Возр");
	
КонецПроцедуры // ЗаполнитьПоля()

// Функция определяет является ли поле построителя числовым или нет.
// 
// Параметры:
// 
// 
// Возвращаемое значение:
//  Результат – Строка.
// 
Функция ЭтоЧисловоеПоле(ПолеПостроителя, Соединение)  Экспорт

	флЭтоЧисловоеПоле = Ложь;
	
	Если ТипЗнч(ПолеПостроителя) = Тип("ComObject") Тогда
		
		Если НЕ Соединение = Неопределено Тогда
			
			ПредставлениеТипа = Соединение.String(ПолеПостроителя.ТипЗначения);
			флЭтоЧисловоеПоле = ?(ВРег(ПредставлениеТипа) = ВРег("Число"),Истина,Ложь);
			
		КонецЕсли; 
		
	Иначе
		
		флЭтоЧисловоеПоле =  ПолеПостроителя.ТипЗначения.СодержитТип(Тип("Число"));
		
	КонецЕсли; 

	Возврат флЭтоЧисловоеПоле;
	
КонецФункции // ЭтоЧисловоеПоле()

// Процедура добавляет поля отбора в отбор построителя.
// 
// Параметры:
//  Построитель      - ПостроительОтчета.
//  МассивПолейОтбор - Массив.
// 
Процедура ЗаполнитьПоляОтбора(Построитель,МассивПолейОтбор) Экспорт
	
	Для каждого ИмяЭлементаОтбора Из МассивПолейОтбор Цикл
		
		ПолеНастройки = Построитель.ДоступныеПоля.Найти(ИмяЭлементаОтбора);
		Если ПолеНастройки <> Неопределено И ПолеНастройки.Отбор Тогда
			ЭлементОтбора = Построитель.Отбор.Найти(ИмяЭлементаОтбора);
			Если ЭлементОтбора = Неопределено Тогда
				Построитель.Отбор.Добавить(ИмяЭлементаОтбора);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла; // По массиву полей отбора
	
КонецПроцедуры // ЗаполнитьПоляОтбора()

// Процедура заполняет таблицу параметров на основании текста запроса.
// 
// Параметры:
//  ЗапрашиватьДобавление  – Булево.
// 
Процедура ЗаполнитьПараметры(Параметры,ЗапросБД,МассивПараметровИсключений,ЗапрашиватьДобавление=Ложь)  Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗапросБД) Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Если НЕ ЗапрашиватьДобавление Тогда
	
		Параметры.Очистить();
	
	КонецЕсли; 
	
	ТекстЗапроса = ЗапросБД.ТекстЗапроса;
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		бит_ОбщегоНазначения.бит_Предупреждение(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// Добавим выбор параметров для ввода
	СписокПараметров=новый СписокЗначений;
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Если МассивПараметровИсключений.Найти(ПараметрЗапроса.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 		
		СписокПараметров.Добавить(ПараметрЗапроса.ТипЗначения, ПараметрЗапроса.Имя,Истина);
	КонецЦикла; 
	
	Для каждого ПараметрЗапроса Из СписокПараметров Цикл
		Если ПараметрЗапроса.Пометка тогда
			ИмяПараметра =  ПараметрЗапроса.Представление;
			Если МассивПараметровИсключений.Найти(ИмяПараметра) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаПараметров = Параметры.Найти(ИмяПараметра,"ИмяПараметра");
			Если  СтрокаПараметров = Неопределено Тогда
				СтрокаПараметров = Параметры.Добавить();
				СтрокаПараметров.ИмяПараметра = ИмяПараметра;
				СтрокаПараметров.ЭтоВыражение = Ложь ;   
			КонецЕсли; 
			Если СтрокаПараметров.ЭтоВыражение<>2 тогда				
				СтрокаПараметров.ЗначениеПараметра = ПараметрЗапроса.Значение.ПривестиЗначение(СтрокаПараметров.ЗначениеПараметра);
			КонецЕсли;  	
		КонецЕсли;
	КонецЦикла; 
	
	
КонецПроцедуры // ЗаполнитьПараметры()

// Функция формирует список параметров массив запросов.
// 
// Параметры:
//  МассивЗапросов  - Массив.
//  Исключения      - Массив.
// 
// Возвращаемое значение:
//   СписокПараметров   - СписокЗначений.
// 
Функция ПолучитьПараметрыЗапросов(МассивЗапросов, Исключения, ПулСоединений = Неопределено) Экспорт
	
	СписокПараметров = Новый СписокЗначений;
	
	Для каждого ТекЗапрос Из МассивЗапросов Цикл
		
		Если ЗначениеЗаполнено(ТекЗапрос) Тогда
			
			ТекстЗапроса = ТекЗапрос.ТекстЗапроса;
			
			Запрос = Неопределено;
			
			Если бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(ТекЗапрос.ВидИнформационнойБазы) Тогда
				
				// Соединяемся с внешней базой и создаем запрос там.
				Если НЕ ПулСоединений = Неопределено Тогда
					
					Соединение = ПулСоединений[ТекЗапрос.ВидИнформационнойБазы];
					
					Если НЕ Соединение = Неопределено Тогда
						
						Запрос = Соединение.NewObject("Запрос");
						Запрос.Текст = ТекстЗапроса;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			Иначе	
				
				// Инициализация запроса в текущей базе
				Запрос = Новый Запрос(ТекстЗапроса);
				
			КонецЕсли; 
			
			Если Запрос = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли; 
			
			Попытка
				ПараметрыЗапроса = Запрос.НайтиПараметры();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(ТекЗапрос.ВидИнформационнойБазы) Тогда
				
				ПравилаПоискаВнешТек = РегистрыСведений.бит_мпд_НазначениеПравилПоискаДанных.ПолучитьПравилаПоиска(ТекЗапрос.ВидИнформационнойБазы
				                                                                    ,Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза);
				
			КонецЕсли; 
			
			
			Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
				
				Если Исключения.Найти(ПараметрЗапроса.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли; 	
				
				// Возможно такой параметр уже был добавлен из других запросов - выполним поиск.
				флЕсть = Ложь;
				Для каждого Элемент Из СписокПараметров Цикл
				
					Если Элемент.Представление = ПараметрЗапроса.Имя Тогда
					
						флЕсть = Истина;
						Прервать;
					
					КонецЕсли; 
				
				КонецЦикла; // СписокПараметров
				
				Если НЕ флЕсть Тогда
					
					
					Если бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(ТекЗапрос.ВидИнформационнойБазы) Тогда
						
					ОписаниеТекущая = бит_мпд_ВнешниеИсточникиСервер.ПреобразоватьОписаниеТиповВнешняяТекущая(Соединение
					                                                                                          ,ПараметрЗапроса.ТипЗначения
																											  ,ПравилаПоискаВнешТек);
						
						
					Иначе	
						
					ОписаниеТекущая = ПараметрЗапроса.ТипЗначения;	
						
					КонецЕсли; 
					
					СписокПараметров.Добавить(ОписаниеТекущая, ПараметрЗапроса.Имя,Истина);
					
				КонецЕсли; 
				
			КонецЦикла; // ПараметрыЗапроса
			
		КонецЕсли; // Запрос заполнен
		
	КонецЦикла; // МассивЗапросов

	Возврат СписокПараметров;
	
КонецФункции // ПолучитьПараметрыЗапросов()

// Процедура проверяет наличеи колонки в таблице значений и добавляет, если колонка не найдена.
// 
// Параметры:
//  ТаблицаПр  - ТаблицаЗначений
//  ИмяКолонки - Строка
// 
Процедура ПроверитьНаличиеКолонкиТаблицы(ТаблицаПр, ИмяКолонки)

	Если ТаблицаПр.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ТаблицаПр.Колонки.Добавить(ИмяКолонки);	
	КонецЕсли;	

КонецПроцедуры // ПроверитьНаличиеКолонкиТаблицы()

// Процедура обновляет таблицу параметров запроса.
// 
// Параметры:
//  ТаблицаПараметров - ТаблицаЗначений.
//  СписокПараметров  - СписокЗначений.
//  Очищать           - Булево.
// 
Процедура ОбновитьТаблицуПараметров(ТаблицаПараметров, СписокПараметров, Очищать=Ложь) Экспорт

	Если ТаблицаПараметров = Неопределено Тогда
		ТаблицаПараметров = Новый ТаблицаЗначений();
		ТаблицаПараметров.Колонки.Добавить("ИмяПараметра");
		ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	КонецЕсли;
	
	Если Очищать Тогда 		
		ТаблицаПараметров.Очистить(); 		
	КонецЕсли; 
	
	Если НЕ ТипЗнч(ТаблицаПараметров) = Тип("ДанныеФормыКоллекция") Тогда
		
		ПроверитьНаличиеКолонкиТаблицы(ТаблицаПараметров, "ВидПараметра");
		ПроверитьНаличиеКолонкиТаблицы(ТаблицаПараметров, "ДоступныеТипы");
		
	КонецЕсли; 

	Для каждого Элемент Из СписокПараметров Цикл
	
		Если Элемент.Пометка Тогда
		
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("ИмяПараметра",Элемент.Представление);
			
			НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(СтрОтбор);
			
			Если НайденныеСтроки.Количество()=0 Тогда
				
				НоваяСтрока = ТаблицаПараметров.Добавить();
				НоваяСтрока.ИмяПараметра      = Элемент.Представление;
				НоваяСтрока.ВидПараметра      = Перечисления.бит_ВидыПараметровЗапроса.Значение;
				НоваяСтрока.ЗначениеПараметра = Элемент.Значение.ПривестиЗначение();
				НоваяСтрока.ДоступныеТипы     = Элемент.Значение;
				
			Иначе	
				
				Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				
					Если СтрокаТаблицы.ВидПараметра = Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда
					
						СтрокаТаблицы.ЗначениеПараметра = Элемент.Значение.ПривестиЗначение(СтрокаТаблицы.ЗначениеПараметра);
						СтрокаТаблицы.ДоступныеТипы     = Элемент.Значение;
					
					КонецЕсли; 
				
				КонецЦикла; // НайденныеСтроки
				
			КонецЕсли; // НайденныеСтроки.Количество()
		
		КонецЕсли; // Элемент.Пометка
	
	КонецЦикла;  // СписокПараметров
	
КонецПроцедуры // ОбновитьТаблицуПараметров()

// Функция Инициализирует таблицу параметров.
// 
// 
// Возвращаемое значение:
//   ТаблицаПараметров   - ТаблицаЗначений - таблица с задаными полями.
// 
Функция КонструкторТаблицыПараметров()

	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра");
	ТаблицаПараметров.Колонки.Добавить("ЭтоВыражение");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");

	Возврат ТаблицаПараметров;
	
КонецФункции // КонструкторТаблицыПараметров()

// Функция определяет имя ресурса в источнике данных.
// 
// Параметры:
//  ИсточникДанных – СправочникСсылка.бит_ИсточникиДанных.
//  Имя – Строка.
// 
// Возвращаемое значение:
//  ИмяРесурсаИсточника – Строка.
// 
Функция ОпределитьИмяРесурсаИсточника(ИсточникДанных,Имя) Экспорт
	
	ИмяРесурсаИсточника = "";
	Для каждого СтрокаТаблицы Из ИсточникДанных.Поля Цикл
		
		Если ВРег(СтрокаТаблицы.ВидПоля) = ВРег("Ресурс") Тогда
			
			Если СтрокаТаблицы.Синоним = Имя ИЛИ СтрокаТаблицы.Имя = Имя Тогда
				
				ИмяРесурсаИсточника = СтрокаТаблицы.Имя;
				Прервать;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ИмяРесурсаИсточника;
	
КонецФункции // ОпределитьИмяРесурсаИсточника()

// Процедура заполняет списки имен измерений и ресурсов в зависимости от типа источника.
// 
Функция ЗаполнитьСпискиИмен(ТипИсточника) Экспорт

	ИменаРесурсов  = Новый СписокЗначений;
	ИменаИзмерений = Новый СписокЗначений;
	
	ПеречислениеТипов   = Перечисления.бит_ТипыИсточниковДанных;
	ЭтоПолучениеФакта   = ТипИсточника = ПеречислениеТипов.ПолучениеФакта;
	ЭтоОтложенныеНалоги = ТипИсточника = ПеречислениеТипов.ОтложенныеНалогиМСФО;
	
	Если ЭтоПолучениеФакта Тогда
		
		// Измерения
		МассивИсключений = Новый Массив;
		МассивИсключений.Добавить("Сценарий");
		ИменаИзмерений = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Все",
																			"Синоним",
																			"СписокЗначений",
																			МассивИсключений);
		ИменаИзмерений.Добавить("Регистратор");
		
		// Ресурсы
		ИменаРесурсов.Добавить("Сумма");
		ИменаРесурсов.Добавить("Количество");
			
	ИначеЕсли ЭтоОтложенныеНалоги Тогда
		
		// Ресурсы
		ИменаРесурсов.Добавить("СуммаНУ");
		ИменаРесурсов.Добавить("СуммаМУ");
		ИменаРесурсов.Добавить("СуммаПР");
		
		// Измерения
		ИменаИзмерений.Добавить("Организация");
		ИменаИзмерений.Добавить("Субконто1");
		ИменаИзмерений.Добавить("Субконто2");
		ИменаИзмерений.Добавить("Субконто3");
			
	КонецЕсли;   

	РезСтруктура = Новый Структура("ИменаРесурсов, ИменаИзмерений", ИменаРесурсов, ИменаИзмерений);
	
	Возврат РезСтруктура;
	
КонецФункции // ЗаполнитьСпискиИмен()

// Функция получает список полей источника.
// 
// Параметры:
//  Источник - СправочникСсылка.бит_ИсточникиДанных.
//  ВидПоля - Строка.
// 
// Возвращаемое значение:
//  СписокПолей – СписокЗначений.
// 
Функция ПолучитьСписокПолейИсточника(Источник, ВидПоля) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Для каждого СтрокаТаблицы Из Источник.Поля Цикл
		
		Если СтрокаТаблицы.Использование 
			 И ВРег(СтрокаТаблицы.ВидПоля) = ВРег(ВидПоля) Тогда
			 
			 Имя = ?(ЗначениеЗаполнено(СтрокаТаблицы.Синоним), СтрокаТаблицы.Синоним, СтрокаТаблицы.Имя);
			 СписокПолей.Добавить(Имя);
			
		КонецЕсли; 
		
	КонецЦикла; // Источник.Поля
	
	Возврат СписокПолей;
	
КонецФункции // ПолучитьСписокПолейИсточника()

// Функция возвращает перечень фиксированных соответствий.
// 
// Возвращаемое значение:
//  ФиксСоотв – Структура.
// 
Функция ФиксированныеСоответствия() Экспорт

	ФиксСоотв = Новый Структура;
	
	флЕстьРегистр = ?(НЕ Метаданные.РегистрыСведений.Найти("бит_СтатьиОборотов_СтатьиРегл") = Неопределено, Истина, Ложь);
	
	Если флЕстьРегистр Тогда
		
		ФиксСоотв.Вставить("СоотвСтатьиРегл","Статьи регл. --> статьи оборотов"); 	
		
	КонецЕсли; 
	
	флЕстьРегистр = ?(НЕ Метаданные.РегистрыСведений.Найти("бит_СтатьиОборотов_НоменклатурныеГруппы") = Неопределено, Истина, Ложь);

	Если флЕстьРегистр Тогда
	
		 ФиксСоотв.Вставить("СоотвНомГруппы","Ном. группы --> статьи оборотов");
	
	КонецЕсли; 
	
	флЕстьРегистр = ?(НЕ Метаданные.РегистрыСведений.Найти("бит_ЦФО_Подразделения") = Неопределено, Истина, Ложь);		
	
	Если флЕстьРегистр Тогда
	
		 ФиксСоотв.Вставить("СоотвПодразделения","Подразделение --> ЦФО");
	
	КонецЕсли; 	
	
	Возврат ФиксСоотв;
	
КонецФункции // ФиксированныеСоответствия()

	#КонецОбласти
 
#КонецЕсли
