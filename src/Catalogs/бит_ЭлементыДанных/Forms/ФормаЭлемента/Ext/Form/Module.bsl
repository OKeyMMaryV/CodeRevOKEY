
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийВидСравнения; // Служит для передачи вида сравнения между обработчиками.

&НаКлиенте
Перем мТекущийВидПараметра; // Служит для передачи вида параметра между обработчиками.

&НаКлиенте
Перем мТекущийРодитель; // Хранит текущего родителя

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	ЗаполнитьКэшЗначений();
	
	// Восстановим настройки из хранилища
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЭлементОбъект = Параметры.ЗначениеКопирования.ПолучитьОбъект();
		Ссылка = Параметры.ЗначениеКопирования;
	Иначе	
		ЭлементОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.бит_ЭлементыДанных"));
		Ссылка = Объект.Ссылка;
	КонецЕсли; 
	
	СохраненнаяНастройка = Справочники.бит_ЭлементыДанных.ПолучитьНастройкиПостроителя(Ссылка);
	ЗаполнитьОтборПоНастройке(СохраненнаяНастройка);
	
	// Восстанавливаем таблицу ОтборВОтчете
    СохрОтборВОтчете = ЭлементОбъект.ПолучитьОтборВОтчете();
	
	Если ТипЗнч(СохрОтборВОтчете) = Тип("ТаблицаЗначений") 
		 Или ТипЗнч(СохрОтборВОтчете) = Тип("ДанныеФормыКоллекция")  Тогда
		
		Для каждого СтрокаТаблицы Из СохрОтборВОтчете Цикл
		
			НоваяСтрока = ОтборВОтчете.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		КонецЦикла; 
			
	КонецЕсли; 
	
	// Для случая, когда источник данных - другой способ компновки необходимо 
	// инициализировать таблицу-источник для построителя.
	ИнициализироватьТаблицуИсточникПостроителя();		
	
	// Восстанавливаем настройки оформления
	НастройкиОформления = ЭлементОбъект.ПолучитьНастройкиОформления();
	
	Если ТипЗнч(НастройкиОформления) = Тип("Структура") Тогда
		
		// "Шрифт,ЦветТекста,ЦветФона,Формат,Отступ,ГоризонтальноеПоложение".
		Для каждого КлЗнч Из НастройкиОформления Цикл
			ЭтаФорма[КлЗнч.Ключ] = КлЗнч.Значение;		
		КонецЦикла;
				
	Иначе
		
		// Настройки оформления по-умолчанию
		ЦветФона = Новый Цвет(255, 255, 255);
		ЭтаФорма.ГоризонтальноеПоложение = HorizontalAlign.Авто;
			
	КонецЕсли;     
	
	// Список доступных источников данных
	СписокИсточников = бит_МеханизмПолученияДанных.СформироватьСписокИсточники(Объект.Владелец);
	
	// Список выбора ресурсов 
	ЗаполнитьСписокРесурсовДляПересчетаПоКурсам();
	
    бит_МеханизмПолученияДанных.УстановитьОформлениеТаблицыОтбор(УсловноеОформление);	
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
	 	Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мТекущийРодитель = Объект.Родитель;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохраненнаяНастройка = Новый Структура;
	
	// Сохраняем отбор построителя
	МассивОтбор = Новый Массив;
	Для каждого СтрокаОтбор Из ТаблицаОтбор  Цикл
	
		 ЭлементОтбора = Новый Структура("ПутьКДанным
		                                  |, Использование
										  |, ВидСравнения
										  |, Значение
										  |, ЗначениеС
										  |, ЗначениеПо
										  |, ТипЗначения
										  |, Представление");
		 
		 ЭлементОтбора.ПутьКДанным   = СтрокаОтбор.ПутьКДанным;
		 ЭлементОтбора.Использование = СтрокаОтбор.Использование;
		 ЭлементОтбора.ВидСравнения  = СтрокаОтбор.ВидСравнения;
		 ЭлементОтбора.Значение      = СтрокаОтбор.Значение;
		 ЭлементОтбора.ЗначениеС     = СтрокаОтбор.ЗначениеС;
		 ЭлементОтбора.ЗначениеПо    = СтрокаОтбор.ЗначениеПо;
		 ЭлементОтбора.ТипЗначения   = СтрокаОтбор.ТипЗначения;
		 ЭлементОтбора.Представление = СтрокаОтбор.ПутьКДанным;

		 МассивОтбор.Добавить(ЭлементОтбора);
		 
	КонецЦикла; 
	
	СохраненнаяНастройка.Вставить("Отбор", МассивОтбор);
	
	ТекущийОбъект.СохранитьНастройкиПостроителя(СохраненнаяНастройка);
	
	// Сохраняем ОтборВОтчете
	ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));	
	ТекущийОбъект.СохранитьОтборВОтчете(ТаблицаОтборов);
	
	// Сохраняем НастройкиОформления
	НастройкиОформления = Новый Структура;
	НастройкиОформления.Вставить("Шрифт"     			  , Шрифт);
	НастройкиОформления.Вставить("ЦветФона"  			  , ЦветФона);
	НастройкиОформления.Вставить("ЦветТекста"			  , ЦветТекста);
	НастройкиОформления.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложение);
	НастройкиОформления.Вставить("Формат"                 , Формат);
	НастройкиОформления.Вставить("Отступ"                 , Отступ);
	
	ТекущийОбъект.СохранитьНастройкиОформления(НастройкиОформления);
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", ТекущийОбъект.Ссылка.Пустая());
	
КонецПроцедуры // ПередЗаписьюНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	ИзменениеРодителя(Отказ);
	
	Если Отказ Тогда

		Объект.Родитель = мТекущийРодитель;
		ТекстСообщения = НСтр("ru = 'Элемент данных может быть подчинен только элементам вида ""Группировка""!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
	мТекущийРодитель = Объект.Родитель;  	
	
КонецПроцедуры // РодительПриИзменении()

&НаКлиенте
Процедура ВидГруппыПриИзменении(Элемент)	
	
	УстановитьВидимость();
	
	Если Объект.ВидГруппы = фКэшЗначений.Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаОтбор;
		
	ИначеЕсли Объект.ВидГруппы = фКэшЗначений.Перечисления.бит_ВидыГруппДанных.Формула Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаФормула;
		
	КонецЕсли; 
	
КонецПроцедуры // ВидГруппыПриИзменении()

&НаКлиенте
Процедура НаименованиеМногоязычноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("РедактируемыйТекст", Объект.НаименованиеМногоязычное);
	
	Обработчик = Новый ОписаниеОповещения("НаименованиеМногоязычноеНачалоВыбораЗавершение", ЭтотОбъект);
    Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("ОбщаяФорма.бит_ФормаРедактированияТекстаНаРазныхЯзыках",ПараметрыФормы,,,,, Обработчик, Режим);

КонецПроцедуры // НаименованиеМногоязычноеНачалоВыбора()

// Процедура - завершение выбора реквизита "НаименованиеМногоязычное".
// 
&НаКлиенте
Процедура НаименованиеМногоязычноеНачалоВыбораЗавершение(Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда   	
		Объект.НаименованиеМногоязычное = Результат; 	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ИзменениеИсточникаДанных();
	
КонецПроцедуры // ИсточникДанныхПриИзменении()

&НаКлиенте
Процедура ИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;	
	
	Для каждого Эл Из СписокИсточников Цикл
		
		ДанныеВыбора.Добавить(Эл.Значение, Эл.Представление);
		
	КонецЦикла; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПодключенияПриИзменении(Элемент)
	
	ИзменениеНастройкиПодключения();
		
КонецПроцедуры // НастройкаПодключенияПриИзменении()

&НаКлиенте
Процедура ВидИнформационнойБазыПриИзменении(Элемент)
	
	ИзменениеВидаИнформационнойБазы();
	
КонецПроцедуры // ВидИнформационнойБазыПриИзменении()


&НаКлиенте
Процедура ОтчетРасшифровкаПриИзменении(Элемент)
	
	ИзменениеОтчетРасшифровка();
	
КонецПроцедуры // ОтчетРасшифровкаПриИзменении()


&НаКлиенте
Процедура ВидСубконто1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ВидСубконто1");
	
КонецПроцедуры // ВидСубконто1НачалоВыбора()

&НаКлиенте
Процедура ВидСубконто2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ВидСубконто2");
	
КонецПроцедуры // ВидСубконто2НачалоВыбора()

&НаКлиенте
Процедура ВидСубконто3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ВидСубконто3");
	
КонецПроцедуры // ВидСубконто3НачалоВыбора()

&НаКлиенте
Процедура ВидСубконто4НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ВидСубконто4");
	
КонецПроцедуры // ВидСубконто4НачалоВыбора()

&НаКлиенте
Процедура ВидСубконтоОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;
	
КонецПроцедуры // ВидСубконтоОчистка()


&НаКлиенте
Процедура ФорматНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	КонструктовФормата = Новый КонструкторФорматнойСтроки(Формат);
	
	КонструктовФормата.ДоступныеТипы = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(16, 3));
	
	Обработчик = Новый ОписаниеОповещения("ФорматНачалоВыбораЗавершение", ЭтотОбъект);
	
	КонструктовФормата.Показать(Обработчик);
	
КонецПроцедуры // ФорматНачалоВыбора()

// Процедура - завершение выбора реквизита "Формат".
// 
&НаКлиенте
Процедура ФорматНачалоВыбораЗавершение(Результат, Параметры) Экспорт
 
	Если Результат <> Неопределено Тогда
		Формат = Результат;		
	КонецЕсли;	
	
КонецПроцедуры


&НаКлиенте
Процедура ФормулаПриИзменении(Элемент)
	
	МассивАргументов = бит_СтрокиКлиентСервер.РазобратьФормулу(Объект.Формула);
	ОбновитьСтрокиРасчета(МассивАргументов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОтбор

&НаКлиенте
Процедура ТаблицаОтборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			ТекущаяСтрока.ПутьКДанным = "";
		Иначе
			ТекущаяСтрока.Использование  = Истина;  
			ТекущаяСтрока.ВидСравнения   = фКэшЗначений.ВидСравненияРавно;
		КонецЕсли; 	
		ОткрытьФормуПолейПостроителя("ТаблицаОтбор", "ПутьКДанным", "Отбор");
	Иначе
		УстановитьСвойствоВыборГруппИЭлементов(Элементы.ТаблицаОтборЗначение, ТекущаяСтрока.ВидСравнения);
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаОтборПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаОтборПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПолейПостроителя("ТаблицаОтбор", "ПутьКДанным", "Отбор");
	
КонецПроцедуры // ТаблицаОтборПолеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;	
	СписокВидов = СписокВыбораВидаСравнения(ТекущаяСтрока.ПолучитьИдентификатор());
	
	Элемент.СписокВыбора.Очистить();

	Для Каждого Эл Из СписокВидов Цикл
		
		Элемент.СписокВыбора.Добавить(Эл.Значение, Эл.Представление);
	
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборВидСравненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("ВидСравнения") Тогда
		
		ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	    мТекущийВидСравнения = ТекущаяСтрока.ВидСравнения;
		ТекущаяСтрока.ВидСравнения = ВыбранноеЗначение;
		
	    ИзменениеВидаСравнения(ТекущаяСтрока.ПолучитьИдентификатор(), мТекущийВидСравнения);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборВидСравненияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	ИзменениеВидаСравнения(ТекущаяСтрока.ПолучитьИдентификатор(), мТекущийВидСравнения);
	
КонецПроцедуры // ТаблицаОтборВидСравненияПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.бит_ЭлементыДанных") Тогда
	
		СкопироватьОтборЭлементаДанных(ВыбранноеЗначение, РежимКопированияНастроек);
	
	КонецЕсли; 
	
	РежимКопированияНастроек = "";
	
КонецПроцедуры // ТаблицаОтборОбработкаВыбора()


&НаКлиенте
Процедура ТаблицаОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	
	Если ТекущаяСтрока.ЭтоПериодичность Тогда
	
		СтандартнаяОбработка = Ложь;
		
		СписокПериодичности = бит_ОбщегоНазначенияКлиентСервер.ПолучитьПериодичности();
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаОтборЗначениеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокПериодичности);
		
	Иначе
		
		Если ТипЗнч(ТекущаяСтрока.ТипЗначения) = Тип("ОписаниеТипов") 
			И ТекущаяСтрока.ТипЗначения.Типы().Количество() > 1 
			И ТекущаяСтрока.Значение = Неопределено Тогда
			
			Элементы.ТаблицаОтборЗначение.ВыбиратьТип     = Истина;	
			Элементы.ТаблицаОтборЗначение.ОграничениеТипа = ТекущаяСтрока.ТипЗначения;
			
		Иначе	
			
			Элементы.ТаблицаОтборЗначение.ВыбиратьТип     = Ложь;	
			Элементы.ТаблицаОтборЗначение.ОграничениеТипа = Новый ОписаниеТипов;		
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаОтборЗначениеНачалоВыбора()

// Процедура - завершение выбора реквизита "Значение" табличного поля "ТаблицаОтбор".
// 
&НаКлиенте
Процедура ТаблицаОтборЗначениеНачалоВыбораЗавершение(ВыбЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбЗначение = Неопределено Тогда 		
		ДополнительныеПараметры.ТекущаяСтрока.Значение = ВыбЗначение.Значение;		
	КонецЕсли; 
	
	Если ТипЗнч(ДополнительныеПараметры.ТекущаяСтрока.ТипЗначения) = Тип("ОписаниеТипов") 
		 И ДополнительныеПараметры.ТекущаяСтрока.ТипЗначения.Типы().Количество() > 1 
		 И ДополнительныеПараметры.ТекущаяСтрока.Значение = Неопределено Тогда
		
		Элементы.ТаблицаОтборЗначение.ВыбиратьТип     = Истина;	
		Элементы.ТаблицаОтборЗначение.ОграничениеТипа = ДополнительныеПараметры.ТекущаяСтрока.ТипЗначения;
		
	Иначе	
		
		Элементы.ТаблицаОтборЗначение.ВыбиратьТип     = Ложь;	
        Элементы.ТаблицаОтборЗначение.ОграничениеТипа = Новый ОписаниеТипов;		
		                   		
	КонецЕсли; 

	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ТаблицаОтборПриОкончанииРедактирования()

&НаКлиенте
Процедура ТаблицаОтборЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаОтбор.ТекущиеДанные;
	
	Если ТипЗнч(ТекущаяСтрока.ТипЗначения) = Тип("ОписаниеТипов") 
		И ТекущаяСтрока.ТипЗначения.Типы().Количество() > 1 Тогда
		
		ТекущаяСтрока.Значение = Неопределено;
		
	КонецЕсли;		
	
КонецПроцедуры // ТаблицаОтборЗначениеОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущиеДанные.Значение = Неопределено Тогда  		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;  		
	Иначе	                  		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь; 		
	КонецЕсли; 
	
КонецПроцедуры // ОтборВОтчетеПриНачалеРедактирования()

&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОтборВОтчетеПриОкончанииРедактирования()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения); 
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()
     
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
		
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры // ОтборВОтчетеЗначениеОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзмерения

&НаКлиенте
Процедура ИзмеренияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда

		Если Копирование Тогда

		 	ТекущаяСтрока = Элементы.Измерения.ТекущиеДанные;
			ТекущаяСтрока.Имя = "";

		КонецЕсли; 	

		ОткрытьФормуПолейПостроителя("Измерения", "ПутьКДанным", "Измерение");

	КонецЕсли; 
	
КонецПроцедуры // ИзмеренияПриНачалеРедактирования()

&НаКлиенте
Процедура ИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.бит_ЭлементыДанных") Тогда
	
		 СкопироватьНастройкиРасшифровкиЭлементаДанных(ВыбранноеЗначение, РежимКопированияНастроек);
	
	КонецЕсли; 
	
	РежимКопированияНастроек = "";
	
КонецПроцедуры // ИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ИзмеренияПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	  СтандартнаяОбработка = Ложь;
	  ОткрытьФормуПолейПостроителя("Измерения", "ПутьКДанным", "Измерение");
	  
КонецПроцедуры // ИзмеренияПолеНачалоВыбора()
   
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьОтбор(Команда)
	
	РежимКопированияНастроек = "Заполнение";
	
	Если НЕ ТаблицаОтбор.Количество() = 0 Тогда
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьОтборЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Отбор будет очищен. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		ОткрытьФормуВыбораЭлементовДанных(Элементы.ТаблицаОтбор);		
	КонецЕсли; 
	
КонецПроцедуры // КомандаЗаполнитьОтбор()

// Процедура - завершение обработки команды "ЗаполнитьОтбор".
// 
&НаКлиенте
Процедура КомандаЗаполнитьОтборЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораЭлементовДанных(Элементы.ТаблицаОтбор);		
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьОтбор(Команда)
	
   РежимКопированияНастроек = "Добавление";	
   
   ОткрытьФормуВыбораЭлементовДанных(Элементы.ТаблицаОтбор);
   
КонецПроцедуры // КомандаДобавитьОтбор()

&НаКлиенте
Процедура КомандаЗаполнитьРасшифровку(Команда)
	
   РежимКопированияНастроек = "Заполнение";	
   
   Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьРасшифровкуЗавершение", ЭтотОбъект);
   ТекстВопроса = НСтр("ru = 'Настройка расшифровки будет очищена. Продолжить?'");
   ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
   
КонецПроцедуры // КомандаЗаполнитьРасшифровку()

// Процедура - завершение обработки команды "ЗаполнитьРасшифровку".
// 
&НаКлиенте
Процедура КомандаЗаполнитьРасшифровкуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ОткрытьФормуВыбораЭлементовДанных(Элементы.Измерения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьРасшифровку(Команда)
	
   РежимКопированияНастроек = "Добавление";	
   
   ОткрытьФормуВыбораЭлементовДанных(Элементы.Измерения);
   
КонецПроцедуры // КомандаДобавитьРасшифровку()

&НаКлиенте
Процедура КомандаЗаполнитьПересчетыПоКурсамИзСпособаКомпоновки(Команда)
	
	ЗаполнитьТаблицуПересчетаПоКурсам();
	
КонецПроцедуры // КомандаЗаполнитьПересчетыПоКурсамИзСпособаКомпоновки()

&НаКлиенте
Процедура ОткрытьПомощникВводаФормулы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка"  , Объект.Ссылка);
	ПараметрыФормы.Вставить("Владелец", Объект.Владелец);
	ПараметрыФормы.Вставить("Текст"   , Объект.Формула);
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьПомощникВводаФормулыЗавершение", ЭтотОбъект);
    Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("ОбщаяФорма.бит_ФормаВводаФормулыУправляемая",ПараметрыФормы,ЭтотОбъект,,,, Обработчик, Режим);
	
КонецПроцедуры

// Процедура - завершение выбора реквизита "Формула".
// 
&НаКлиенте
Процедура ОткрытьПомощникВводаФормулыЗавершение(СтруктураФормулы, Параметры) Экспорт
 
	Если ТипЗнч(СтруктураФормулы) = Тип("Структура") Тогда
		
		Объект.Формула = СтруктураФормулы.ТекстФормулы;
		
		// Таблица аргументов
		МассивСтрокРасчета = СтруктураФормулы.МассивСтрокРасчета;
		Объект.СтрокиРасчетаДляФормулы.Очистить();
		Для каждого ЭлементМассива Из МассивСтрокРасчета Цикл
			
			НоваяСтрока = Объект.СтрокиРасчетаДляФормулы.Добавить();
			НоваяСтрока.СтрокаРасчета = ЭлементМассива;
			
		КонецЦикла;   
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуПолейПостроителя(ИмяТабЧасти, ИмяПоля, Режим)

	ТекущаяСтрока = Элементы[ИмяТабЧасти].ТекущиеДанные;
			
	ПараметрыФормы  = Новый Структура;
	ПараметрыФормы.Вставить("ВидИнформационнойБазы", Объект.ВидИнформационнойБазы);
	ПараметрыФормы.Вставить("НастройкаПодключения" , Объект.НастройкаПодключения);
	ПараметрыФормы.Вставить("Режим"            	   , Режим);
	ПараметрыФормы.Вставить("ВыводитьВложенные"    , Истина);
	ПараметрыФормы.Вставить("ТекстЗапроса"         , фТекстЗапроса);
	ПараметрыФормы.Вставить("АдресИсточникаПостроителя", фАдресТаблицыИсточника);	
	
	Если НЕ ПустаяСтрока(ТекущаяСтрока[ИмяПоля]) Тогда
		
		ПараметрыФормы.Вставить("ТекПутьКДанным", ТекущаяСтрока[ИмяПоля]);
		
	КонецЕсли;
	
	Если ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		
		ПараметрыФормы.Вставить("ИсточникДанных", Объект.ИсточникДанных);
		
	КонецЕсли; 

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяПоля", ИмяПоля);
	ДополнительныеПараметры.Вставить("ИмяТабЧасти", ИмяТабЧасти);
	
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуПолейПостроителяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
    Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
    ОткрытьФорму("ОбщаяФорма.бит_мпд_ФормаВыбораСвойствПостроителя",ПараметрыФормы,,,,, Обработчик, Режим);
	
КонецПроцедуры // ОткрытьФормуПолейПостроителя()

&НаКлиенте
Процедура ОткрытьФормуПолейПостроителяЗавершение(РезВыбора, ДополнительныеПараметры) Экспорт
   
	Если ТипЗнч(РезВыбора) = Тип("Структура") Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока[ДополнительныеПараметры.ИмяПоля] = РезВыбора.ПутьКДанным;
		
		Если ДополнительныеПараметры.ИмяТабЧасти = "ТаблицаОтбор" Тогда
			
			ДополнительныеПараметры.ТекущаяСтрока.ТипЗначения  = РезВыбора.ТипЗначения;
			ДополнительныеПараметры.ТекущаяСтрока.Значение     = ДополнительныеПараметры.ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ДополнительныеПараметры.ТекущаяСтрока.Значение);
			ДополнительныеПараметры.ТекущаяСтрока.ВидСравнения = ВидСравнения.Равно;
			
			Если ДополнительныеПараметры.ТекущаяСтрока.ПутьКДанным = "Периодичность" 
				И ТипЗнч(ДополнительныеПараметры.ТекущаяСтрока.Значение) = Тип("Число") Тогда
				
				ДополнительныеПараметры.ТекущаяСтрока.ЭтоПериодичность = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ИмяРеквизита)
	
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                                                   , Элемент
	                                                   , Объект
	                                                   , ИмяРеквизита
													   , фКэшЗначений.СписокТиповВидСубконто
													   , СтандартнаяОбработка);
	
КонецПроцедуры // ВидСубконтоНачалоВыбора()

&НаКлиенте
Процедура ОткрытьФормуВыбораЭлементовДанных(ЭлементВладелец)
	
	Отбор = Новый Структура(); 
	Отбор.Вставить("Владелец", 		 Объект.Владелец);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ИсточникДанных", Объект.ИсточникДанных);
	ПараметрыФормы.Вставить("ВыборЭлемента", Истина);
	
	ОткрытьФорму("Справочник.бит_ЭлементыДанных.Форма.ФормаВыбора", ПараметрыФормы, ЭлементВладелец);

КонецПроцедуры // ОткрытьФормуВыбораЭлементовДанных()

&НаСервере
Процедура УстановитьВидимость()

	ЭтоГруппировка = ?(Объект.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Группировка  , Истина, Ложь);
	ЭтоВыборка     = ?(Объект.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных, Истина, Ложь);
	ЭтоФормула     = ?(Объект.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула      , Истина, Ложь);
	ЭтоТекст       = ?(Объект.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Текст        , Истина, Ложь);
	
	Элементы.ГруппаСтраницаОтбор.Видимость       = ЭтоВыборка;
	Элементы.ГруппаСтраницаРасшифровка.Видимость = ЭтоВыборка;
	Элементы.ГруппаСтраницаФормула.Видимость     = ЭтоФормула;
	// Изменение кода. Начало. 30.01.2014{{
	Элементы.ГруппаСтаницаСпособыРасчетаПоКурсам.Видимость = НЕ ЭтоТекст;
	// Изменение кода. Начало. 30.01.2014{{
	
	// Видимость страницы субконто
	флВидимостьСубконто = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ИсточникДанных) 
		 И ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") 
		 И ЭтоВыборка Тогда
	
		ТекстЗапроса = ВРег(Объект.ИсточникДанных.ЗапросБД.ТекстЗапроса);
		Если Найти(ТекстЗапроса,ВРег("РегистрБухгалтерии")) Тогда
		
			 флВидимостьСубконто = Истина;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Элементы.ГруппаСтраницаСубконто.Видимость = флВидимостьСубконто;

	ЭтоВнешний   = ?(Объект.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза, Ложь, Истина);
	// Источник элемента данных - способ компоновки.
	ЭтоВложенный = ?(ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных"), Истина, Ложь);
	
	Элементы.ВидИнформационнойБазы.Доступность              = Не ЭтоВложенный;
	Элементы.НастройкаПодключения.Доступность               = ЭтоВнешний;
	Элементы.НастройкаПодключения.АвтоОтметкаНезаполненного = ЭтоВнешний;
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	Если ЗначениеЗаполнено(Объект.ИсточникДанных) 
		 И ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		
		фТекстЗапроса = Объект.ИсточникДанных.ЗапросБД.ТекстЗапроса;
		
	КонецЕсли; 
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ВидСравненияРавно"   , ВидСравнения.Равно);
	фКэшЗначений.Вставить("МассивВидовСравнения", бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	
	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса", ТекПеречисление);
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_мпд_НаправленияСортировки);
	КэшПеречисления.Вставить("бит_мпд_НаправленияСортировки", ТекПеречисление);
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыГруппДанных);
	КэшПеречисления.Вставить("бит_ВидыГруппДанных", ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока"		 , ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	
	// Заполним список типов для быстрого выбора составного.
	МассивТипов  = Объект.Ссылка.Метаданные().Реквизиты.ВидСубконто1.Тип.Типы();
	СписокВыбора = бит_ОбщегоНазначения.ПодготовитьСписокВыбораТипа(МассивТипов);
	
	фКэшЗначений.Вставить("СписокТиповВидСубконто", СписокВыбора);	
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ЗаполнитьСписокРесурсовДляПересчетаПоКурсам()

	Для каждого КолонкаТб Из Объект.Владелец.КолонкиТаблицы Цикл
		
		Если КолонкаТб.ВидКолонки = "Ресурс" Тогда
		
			Элементы.СпособыПересчетаПоКурсамИмяКолонки.СписокВыбора.Добавить(КолонкаТб.ИмяКолонки);	
		
		КонецЕсли; 	
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСписокРесурсовДляПересчетаПоКурсам()

&НаСервере
Процедура ЗаполнитьТаблицуПересчетаПоКурсам()

	Объект.СпособыПересчетаПоКурсам.Очистить();
	
	Для каждого КолонкаТб Из Объект.Владелец.КолонкиТаблицы Цикл
		
		Если КолонкаТб.ВидКолонки = "Ресурс" Тогда
		
			НовСтрока = Объект.СпособыПересчетаПоКурсам.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, КолонкаТб);
		
		КонецЕсли; 	
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуПересчетаПоКурсам()

&НаСервере
Процедура ИзменениеВидаСравнения(ИдСтроки, ПредВидСравнения)
	
	ТекущаяСтрока = ТаблицаОтбор.НайтиПоИдентификатору(ИдСтроки);
	
	бит_МеханизмПолученияДанных.ИзменениеВидаСравнения(ТекущаяСтрока, ПредВидСравнения);
	
	УстановитьСвойствоВыборГруппИЭлементов(Элементы.ТаблицаОтборЗначение, ТекущаяСтрока.ВидСравнения);
	
КонецПроцедуры // ИзменениеВидаСравнения()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойствоВыборГруппИЭлементов(Элемент, ВидСравнения)

	Если ВидСравнения = ПредопределенноеЗначение("ВидСравнения.ВИерархии") 
		ИЛИ ВидСравнения = ПредопределенноеЗначение("ВидСравнения.НеВИерархии")
		ИЛИ ВидСравнения = ПредопределенноеЗначение("ВидСравнения.ВСпискеПоИерархии")
		ИЛИ ВидСравнения = ПредопределенноеЗначение("ВидСравнения.НеВСпискеПоИерархии") Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	Иначе	
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СписокВыбораВидаСравнения(ИдСтроки)
	
	ТекущаяСтрока = ТаблицаОтбор.НайтиПоИдентификатору(ИдСтроки);
	СписокВидов   = бит_МеханизмПолученияДанных.СписокВыбораВидаСравнения(ТекущаяСтрока);
	
    Возврат СписокВидов;
	
КонецФункции // СписокВыбораВидаСравнения()

&НаСервере
Процедура ИзменениеИсточникаДанных()
	
	Если ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		
		Объект.ВидИнформационнойБазы = Объект.ИсточникДанных.ВидИнформационнойБазы;
		Объект.НастройкаПодключения  = Объект.ИсточникДанных.НастройкаПодключения;
		
	Иначе	
		
		Объект.ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза;
		
	КонецЕсли; 
	
	ИнициализироватьТаблицуИсточникПостроителя();	
	
	Если ЗначениеЗаполнено(Объект.ИсточникДанных) 
		 И ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		
		фТекстЗапроса = Объект.ИсточникДанных.ЗапросБД.ТекстЗапроса;
		
	Иначе
		
		фТекстЗапроса = "";
		
	КонецЕсли; 
	
	ИзменениеНастройкиПодключения();
	
	УстановитьВидимость();	
	
КонецПроцедуры // ИзменениеИсточникаДанных()

&НаСервере
Процедура ИзменениеРодителя(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Родитель) 
		И Объект.Родитель.ВидГруппы <> Перечисления.бит_ВидыГруппДанных.Группировка Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеРодителя()

&НаСервере
Процедура ИзменениеНастройкиПодключения()
	
	Если ТекущаяНастройкаПодключения <> Объект.НастройкаПодключения Тогда
		
		ТекущаяНастройкаПодключения = Объект.НастройкаПодключения;
		
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // ИзменениеНастройкиПодключения()

&НаСервере
Процедура ИзменениеВидаИнформационнойБазы()

	Если Не бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(Объект.ВидИнформационнойБазы) Тогда
		
		Объект.НастройкаПодключения = Справочники.бит_мпд_НастройкиВнешнихПодключений.ПустаяСсылка();
		
	Иначе	
		
		Объект.НастройкаПодключения = Объект.ВидИнформационнойБазы.НастройкаПодключенияПоУмолчанию;
		
	КонецЕсли; 

	ИзменениеНастройкиПодключения();
	
КонецПроцедуры // ИзменениеВидаИнформационнойБазы()

&НаСервере
Процедура ИзменениеОтчетРасшифровка()
	
	Если ЗначениеЗаполнено(Объект.ОтчетРасшифровка) Тогда
		
		ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
		бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Объект.ОтчетРасшифровка.СпособКомпоновки, ТаблицаОтборов);
		ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);	
		
	Иначе	
		
		ОтборВОтчете.Очистить();
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменениеОтчетРасшифровка()

&НаСервере
Процедура СкопироватьНастройкиРасшифровкиЭлементаДанных(ВыбранноеЗначение, Режим)
	
	Если ВРег(Режим) = ВРег("Заполнение") Тогда
		
		Объект.Измерения.Очистить();
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Для каждого СтрокаТаблицы Из ВыбранноеЗначение.Измерения Цикл
			
			НоваяСтрока = Объект.Измерения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Модифицированность = Истина;	
	
КонецПроцедуры // СкопироватьНастройкиРасшифровкиЭлементаДанных()

&НаСервере
Процедура СкопироватьОтборЭлементаДанных(ВыбранноеЗначение, Режим)

	Если ВРег(Режим) = ВРег("Заполнение") Тогда
		ТаблицаОтбор.Очистить();
	КонецЕсли; 

	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		СохраненнаяНастройка = Справочники.бит_ЭлементыДанных.ПолучитьНастройкиПостроителя(ВыбранноеЗначение);
        ЗаполнитьОтборПоНастройке(СохраненнаяНастройка);
		
	КонецЕсли; 
	
	Модифицированность = Истина;
	
КонецПроцедуры // СкопироватьОтбор()

&НаСервере
Процедура ЗаполнитьОтборПоНастройке(СохраненнаяНастройка)

	Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") Тогда
		
		// Восстанавливаем отбор построителя
		Если СохраненнаяНастройка.Свойство("Отбор") Тогда
			
			Для каждого ЭлементОтбора Из СохраненнаяНастройка.Отбор Цикл
				
				СтрокаОтбор = ТаблицаОтбор.Добавить();
				СтрокаОтбор.ПутьКДанным   = ЭлементОтбора.ПутьКДанным;
				СтрокаОтбор.Использование = ЭлементОтбора.Использование;
				СтрокаОтбор.ВидСравнения  = ЭлементОтбора.ВидСравнения;
				СтрокаОтбор.Значение      = ЭлементОтбора.Значение;
				СтрокаОтбор.ЗначениеС     = ЭлементОтбора.ЗначениеС;
				СтрокаОтбор.ЗначениеПо    = ЭлементОтбора.ЗначениеПо;
				СтрокаОтбор.ТипЗначения   = ЭлементОтбора.ТипЗначения;
				
				Если СтрокаОтбор.ПутьКДанным = "Периодичность" И ТипЗнч(СтрокаОтбор.Значение) = Тип("Число") Тогда
					СтрокаОтбор.ЭтоПериодичность = Истина;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьОтборПоСтруктуре()

// В случае, если источник данных - способ компоновки, процедура инициализирует таблицу, 
// которая является источником для построителя.  
// 
&НаСервере
Процедура ИнициализироватьТаблицуИсточникПостроителя()

	Если ТипЗнч(Объект.ИсточникДанных) = Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных") Тогда
		
		МассивРесурсов  = бит_МеханизмПолученияДанных.ПолучитьСписокПолейДляСпособаКомпоновки(Объект.ИсточникДанных,"Ресурс");				
		ТабВрем = бит_МеханизмПолученияДанных.ИнициализироватьТаблицуРезультат(Объект.ИсточникДанных, МассивРесурсов);
		фАдресТаблицыИсточника = ПоместитьВоВременноеХранилище(ТабВрем, УникальныйИдентификатор);
		
	Иначе
		
		фАдресТаблицыИсточника = "";
		
	КонецЕсли; 

КонецПроцедуры // ИнициализироватьТаблицуИсточникПостроителя()

// Процедура обновляет перечень элементов данных, используемых в формуле. 
//
// Параметры:
//  МассивАргументов - Массив.
//
&НаСервере
Процедура ОбновитьСтрокиРасчета(МассивАргументов)
	
	МассивАргументов = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(МассивАргументов);
	
	Объект.СтрокиРасчетаДляФормулы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	Запрос.УстановитьПараметр("МассивАргументов", МассивАргументов);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ЭлементыДанных.Ссылка,
	               |	бит_ЭлементыДанных.Код
	               |ИЗ
	               |	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
	               |ГДЕ
	               |	бит_ЭлементыДанных.Код В(&МассивАргументов)
	               |	И бит_ЭлементыДанных.Владелец = &Владелец
	               |	И бит_ЭлементыДанных.Ссылка <> &Ссылка";
				   
	Результат = Запрос.Выполнить();
	ТаблицаРезультат = Результат.Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
	
		НоваяСтрока = Объект.СтрокиРасчетаДляФормулы.Добавить();
		НоваяСтрока.СтрокаРасчета = СтрокаТаблицы.Ссылка;
	
	КонецЦикла; 
	
	Если НЕ МассивАргументов.Количество() = ТаблицаРезультат.Количество() Тогда
	
		 Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		 
		 	Инд = МассивАргументов.Найти(СтрокаТаблицы.Код);
			Если Инд >= 0  Тогда
			
				МассивАргументов.Удалить(Инд);
			
			КонецЕсли; 
		 
		 КонецЦикла; 
		 
		 Если МассивАргументов.Количество() > 0  Тогда
		 
		 	  ТекстСообщения =  НСтр("ru = 'Не удалось найти элементы данных: '");
			  ТекстПотерянные = "";
			  Для каждого Эл Из МассивАргументов Цикл
			  
			  	  ТекстПотерянные = ТекстПотерянные + ?(ПустаяСтрока(ТекстПотерянные),"",", ") + Эл; 
			  
			  КонецЦикла; 
			  ТекстПотерянные = ТекстПотерянные + ?(ПустаяСтрока(ТекстПотерянные),"",".");
			  
			  ТекстСообщения = ТекстСообщения + ТекстПотерянные + " " +  НСтр("ru = 'Возможно, ошибка в формуле!'");
			  
			  бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			  
		 КонецЕсли; 
		 
	КонецЕсли; 
	
КонецПроцедуры // ОбновитьСтрокиРасчета()

#КонецОбласти
