#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства); 
	
	Если ПометкаУдаления ИЛИ Ссылка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = "Запись элемента данных " + Ссылка;
	
	// Представление отбора.
	Если ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
				
		ТекНастройкиПостроителя = НастройкиПостроителя.Получить();  		
		Если ТипЗнч(ТекНастройкиПостроителя) = Тип("Структура") Тогда			
			ПредставлениеОтбора = бит_МеханизмПолученияДанных.СформироватьТекстНастроек(ТекНастройкиПостроителя.Отбор);  						
		КонецЕсли; 
		
	КонецЕсли;
	
	// Проверка на подчинение только группам.
	Если ЗначениеЗаполнено(Родитель) И Родитель.ВидГруппы <> Перечисления.бит_ВидыГруппДанных.Группировка Тогда
		
		ТекстСообщения = Нстр("ru = 'Элемент данных может быть подчинен только элементам вида ""Группировка""!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
		
	КонецЕсли; 
	
	// Проверка вида у элемента данных, содержащих подчиненные.
	Если НЕ ЭтоНовый() И  ВидГруппы <> Перечисления.бит_ВидыГруппДанных.Группировка Тогда
		 Запрос = Новый Запрос;
		 Запрос.Текст =  "
		 |ВЫБРАТЬ ПЕРВЫЕ 1
         |	бит_ЭлементыДанных.Ссылка
         |ИЗ
         |	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
         |ГДЕ
         |	бит_ЭлементыДанных.Владелец = &Владелец
         |	И бит_ЭлементыДанных.Ссылка В ИЕРАРХИИ(&Родитель)
         |	И бит_ЭлементыДанных.Ссылка <> &Родитель
		 |";                						 
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Родитель", Ссылка);
		
		Результат = Запрос.Выполнить();  		
		Выборка   = Результат.Выбрать(); 
		
		Если Выборка.Следующий() Тогда 
			
			ТекстСообщения = Нстр("ru = 'Только элемент вида ""Группировка"" может содержать подчиненные элементы данных!'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);			
			
		КонецЕсли; 
		
	КонецЕсли; 
		
	// Проверка формулы.
	Если ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула Тогда
	
		Для каждого СтрокаОперанд Из СтрокиРасчетаДляФормулы Цикл
			
			// Проверка на наличие элементов-родителей в формуле.
			Если ПринадлежитЭлементу(СтрокаОперанд.СтрокаРасчета) Тогда
				ТекстСообщения = Нстр("ru = 'Элемент данных ""%1%"" не может быть использован в формуле, так как он является родителем данной формулы!'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, СтрокаОперанд.СтрокаРасчета);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);		
			КонецЕсли;    			 
			 
		КонецЦикла; 
		
		// Проверка на перекрестное использование формул.
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_ЭлементыДанныхСтрокиРасчетаДляФормулы.СтрокаРасчета.Ссылка КАК Операнд,
		|	бит_ЭлементыДанныхСтрокиРасчетаДляФормулы.Ссылка КАК ЭлементДанных
		|ИЗ
		|	Справочник.бит_ЭлементыДанных.СтрокиРасчетаДляФормулы КАК бит_ЭлементыДанныхСтрокиРасчетаДляФормулы
		|ГДЕ
		|	бит_ЭлементыДанныхСтрокиРасчетаДляФормулы.Ссылка В ИЕРАРХИИ(&МассивОперандов)
		|	И бит_ЭлементыДанныхСтрокиРасчетаДляФормулы.Ссылка.Владелец = &Владелец
		|	И бит_ЭлементыДанныхСтрокиРасчетаДляФормулы.Ссылка.ВидГруппы = ЗНАЧЕНИЕ(Перечисление.бит_ВидыГруппДанных.Формула)
		|";
					   
		Запрос.УстановитьПараметр("Владелец"	   , Владелец);
		Запрос.УстановитьПараметр("МассивОперандов", СтрокиРасчетаДляФормулы.ВыгрузитьКолонку("СтрокаРасчета"));
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ПринадлежитЭлементу(Выборка.Операнд) Тогда
				
				ТекстСообщения = Нстр("ru = 'Обнаружены перекрестные ссылки в формулах! Формула ""%1%"" использует в качестве операнда элемент данных ""%2%"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Выборка.ЭлементДанных, Выборка.Операнд);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , , Отказ);
								
			КонецЕсли; 
			
		КонецЦикла;		
		
	КонецЕсли;
		
КонецПроцедуры
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")  Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли; 
	
	СтруктураОформления = Новый Структура();
	СтруктураОформления.Вставить("ЦветФона"  			  , Новый Цвет(255, 255, 255));
	СтруктураОформления.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Авто);
	ХранилищеДанных = Новый ХранилищеЗначения(СтруктураОформления);
	Оформление = ХранилищеДанных;	
	
	Коэффициент = 1;
	
	Если НЕ ЗначениеЗаполнено(ВидГруппы) И ЗначениеЗаполнено(Родитель) Тогда
		ВидГруппыРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ВидГруппы");
		Если ВидГруппыРодителя = Перечисления.бит_ВидыГруппДанных.Группировка Тогда
			ЭтотОбъект.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ВидГруппы) Тогда
		ВидГруппы  = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных;
	КонецЕсли; 

	Если ВидГруппы  = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
		ЗаполнитьПоВладельцу();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидГруппы = Перечисления.бит_ВидыГруппДанных.Текст Тогда
		
		бит_РаботаСКоллекциямиКлиентСервер.УдалитьЭлементМассиваПоЗначению(ПроверяемыеРеквизиты, "Наименование"); 	
		
	ИначеЕсли ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
		
		ПроверяемыеРеквизиты.Добавить("ВидИнформационнойБазы");
		ПроверяемыеРеквизиты.Добавить("ИсточникДанных");
		
		Если Не ВидИнформационнойБазы = Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза Тогда 			
			ПроверяемыеРеквизиты.Добавить("НастройкаПодключения");       			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция.
// 
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//  СтруктураНастроек - Строка.
// 
Функция ПолучитьНастройкиПостроителя() Экспорт

	Возврат Справочники.бит_ЭлементыДанных.ПолучитьНастройкиПостроителя(Ссылка);
	
КонецФункции

// Процедура 
// 
// Параметры:
//  СтруктураНастроек - Строка.
// 
Процедура СохранитьНастройкиПостроителя(СтруктураНастроек)  Экспорт

	 НастройкиПостроителя = Новый ХранилищеЗначения(СтруктураНастроек);

КонецПроцедуры

// Функция восстанавливает из хранилища таблицу ОтборВОтчете.
// 
// Возвращаемое значение:
//  ТабОтборВОтчете - ТаблицаЗначений.
// 
Функция ПолучитьОтборВОтчете()  Экспорт
	
	ТабОтборВОтчете = ХранилищеОтборВОтчете.Получить();

	Возврат ТабОтборВОтчете;
	
КонецФункции

// Процедура сохраняет отбор в отчете.
// 
Процедура СохранитьОтборВОтчете(ОтборВОтчете) Экспорт

    ХранилищеОтборВОтчете = Новый ХранилищеЗначения(ОтборВОтчете);	

КонецПроцедуры

// Функция получает настройки оформления элемента данных из хранилища. 
// 
Функция ПолучитьНастройкиОформления()  Экспорт

	НастройкиОформления = Оформление.Получить();
	
	Возврат НастройкиОформления;

КонецФункции

// Процедура сохраняет настройки оформления.
// 
// Параметры:
//  НастройкиОФормления - Структура.
// 
Процедура СохранитьНастройкиОформления(НастройкиОФормления) Экспорт

	Оформление = Новый ХранилищеЗначения(НастройкиОФормления);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоВладельцу()

	Если ЗначениеЗаполнено(Владелец) Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.НомерСтроки КАК НомерСтроки,
		|	Таблица.ИсточникДанных КАК ИсточникДанных,
		|	ИсточникиДанных.НастройкаПодключения,
		|	ИсточникиДанных.ВидИнформационнойБазы
		|ИЗ
		|	Справочник.бит_СпособыКомпоновкиИсточниковДанных.ИсточникиДанных КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ИсточникиДанных КАК ИсточникиДанных
		|		ПО Таблица.ИсточникДанных = ИсточникиДанных.Ссылка
		|ГДЕ
		|	Таблица.Ссылка = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка			 = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если НЕ ЗначениеЗаполнено(ВидИнформационнойБазы) Тогда
				ВидИнформационнойБазы = Выборка.ВидИнформационнойБазы;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(НастройкаПодключения) Тогда
				НастройкаПодключения  = Выборка.НастройкаПодключения;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ИсточникДанных) Тогда
				ИсточникДанных		  = Выборка.ИсточникДанных;
			КонецЕсли; 
		
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#КонецЕсли
