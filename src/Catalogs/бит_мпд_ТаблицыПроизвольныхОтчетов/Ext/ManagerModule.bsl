#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция-конструктор описания координат таблицы.
//
// Возвращаемое значение:
//  ОписаниеТаблицы - Структура.
//
Функция КонструкторОписанияТаблицы() Экспорт

    ОписаниеТаблицы = Новый Структура;
    ОписаниеТаблицы.Вставить("ИмяКласса", "бит_ОписаниеТаблицы");
    ОписаниеТаблицы.Вставить("Таблица"  , Справочники.бит_мпд_ТаблицыПроизвольныхОтчетов.ПустаяСсылка());

    ОписаниеТаблицы.Вставить("Лево"  , 0);	
    ОписаниеТаблицы.Вставить("Верх"  , 0);	
    ОписаниеТаблицы.Вставить("Ширина", 0);
    ОписаниеТаблицы.Вставить("Высота", 0);

    // Координаты углов.
    ОписаниеТаблицы.Вставить("ЛевоВерх" , Новый Структура("Столбец, Строка", 0, 0));
    ОписаниеТаблицы.Вставить("ПравоВерх", Новый Структура("Столбец, Строка", 0, 0));
    ОписаниеТаблицы.Вставить("ЛевоНиз"  , Новый Структура("Столбец, Строка", 0, 0));
    ОписаниеТаблицы.Вставить("ПравоНиз" , Новый Структура("Столбец, Строка", 0, 0));

    Возврат ОписаниеТаблицы;
 
КонецФункции // КонструкторОписанияТаблицы()

// Функция заполняет координаты таблицы отчета.
//
// Параметры:
//  ТаблицаОтчета - СправочникСсылка.бит_мпд_ТаблицыПроизвольныхОтчетов.
//
// Возвращаемое значение:
//  ОписаниеТаблицы - Структура.
//
Функция ПодготовитьОписаниеТаблицы(ТаблицаОтчета, Ширина = Неопределено, Высота = Неопределено) Экспорт
 
    флЗаголовкиСтрок   = ТаблицаОтчета.ВыводитьЗаголовкиСтрок;
    флЗаголовкиКолонок = ТаблицаОтчета.ВыводитьЗаголовкиКолонок;

    ОписаниеТаблицы = КонструкторОписанияТаблицы();
    ОписаниеТаблицы.Таблица = ТаблицаОтчета;

    ОписаниеТаблицы.Лево = ТаблицаОтчета.Лево;
    ОписаниеТаблицы.Верх = ТаблицаОтчета.Верх;
 
    Если Ширина = Неопределено ИЛИ Высота = Неопределено Тогда
     
     // необходимо получить ширину и высоту таблицы
     Запрос = Новый Запрос;
     Запрос.УстановитьПараметр("Владелец"  , ТаблицаОтчета.Владелец);
     Запрос.УстановитьПараметр("Таблица"   , ТаблицаОтчета);
     Запрос.УстановитьПараметр("ВидСтолбец", Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Колонка);
     Запрос.УстановитьПараметр("ВидСтрока" , Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Строка);
     
     Запрос.Текст = 
     "ВЫБРАТЬ
     |	СУММА(ВЫБОР
     |			КОГДА ЭлементыТаблиц.Вид = &ВидСтолбец
     |				ТОГДА 0
     |			ИНАЧЕ 1
     |		КОНЕЦ) КАК КоличествоСтолбцов,
     |	СУММА(ВЫБОР
     |			КОГДА ЭлементыТаблиц.Вид = &ВидСтрока
     |				ТОГДА 0
     |			ИНАЧЕ 1
     |		КОНЕЦ) КАК КоличествоСтрок
     |ИЗ
     |	Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов КАК ЭлементыТаблиц
     |ГДЕ
     |	ЭлементыТаблиц.Таблица = &Таблица
     |	И ЭлементыТаблиц.Владелец = &Владелец";
     
     Результат = Запрос.Выполнить();
     Выборка = Результат.Выбрать();
     
     Если Выборка.Следующий() Тогда
         
         ОписаниеТаблицы.Ширина = ?(ТипЗнч(Выборка.КоличествоСтолбцов) = Тип("Число"), Выборка.КоличествоСтолбцов, 0);
         ОписаниеТаблицы.Высота = ?(ТипЗнч(Выборка.КоличествоСтрок) = Тип("Число"), Выборка.КоличествоСтрок, 0);
         
     КонецЕсли; 
     
    Иначе	
     
     ОписаниеТаблицы.Ширина = Ширина;
     ОписаниеТаблицы.Высота = Высота;
     
    КонецЕсли; 

    Если флЗаголовкиСтрок Тогда
        ОписаниеТаблицы.Ширина = ОписаниеТаблицы.Ширина + 1;
    КонецЕсли; 

    Если флЗаголовкиКолонок Тогда
        ОписаниеТаблицы.Высота = ОписаниеТаблицы.Высота + 1;
    КонецЕсли; 

    // Описания углов.
    ОписаниеТаблицы.ЛевоВерх.Столбец = ОписаниеТаблицы.Лево;
    ОписаниеТаблицы.ЛевоВерх.Строка  = ОписаниеТаблицы.Верх;

    ОписаниеТаблицы.ПравоВерх.Столбец = ОписаниеТаблицы.Лево+ОписаниеТаблицы.Ширина;
    ОписаниеТаблицы.ПравоВерх.Строка  = ОписаниеТаблицы.Верх;

    ОписаниеТаблицы.ЛевоНиз.Столбец = ОписаниеТаблицы.Лево;
    ОписаниеТаблицы.ЛевоНиз.Строка  = ОписаниеТаблицы.Верх + ОписаниеТаблицы.Высота;

    ОписаниеТаблицы.ПравоНиз.Столбец = ОписаниеТаблицы.Лево + ОписаниеТаблицы.Ширина;
    ОписаниеТаблицы.ПравоНиз.Строка  = ОписаниеТаблицы.Верх + ОписаниеТаблицы.Высота;

    Возврат ОписаниеТаблицы;
 
КонецФункции // ПодготовитьОписаниеТаблицы()

// Функция получает массив таблиц данной настройки отчета.
//
// Параметры:
//  НастройкаОтчета - СправочникСсылка.бит_мпд_НастройкиПроизвольныхОтчетов.
//
// Возвращаемое значение:
//  МассивТаблиц - Массив.
//
Функция ПолучитьТаблицыОтчета(НастройкаОтчета) Экспорт

    МассивТаблиц = Новый Массив;

    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Владелец"  , НастройкаОтчета);
    Запрос.УстановитьПараметр("ВидСтолбец", Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Колонка);
    Запрос.УстановитьПараметр("ВидСтрока" , Перечисления.бит_мпд_ВидыЭлементовТаблицПроизвольныхОтчетов.Строка);

    Запрос.Текст = 
    "ВЫБРАТЬ
    |	ТаблицыОтчета.Ссылка КАК Таблица,
    |	СУММА(ВЫБОР
    |			КОГДА ЭлементыТаблиц.Вид = &ВидСтолбец
    |				ТОГДА 1
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК КоличествоСтолбцов,
    |	СУММА(ВЫБОР
    |			КОГДА ЭлементыТаблиц.Вид = &ВидСтрока
    |				ТОГДА 1
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК КоличествоСтрок
    |ИЗ
    |	Справочник.бит_мпд_ТаблицыПроизвольныхОтчетов КАК ТаблицыОтчета
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_мпд_ЭлементыТаблицПроизвольныхОтчетов КАК ЭлементыТаблиц
    |		ПО ТаблицыОтчета.Ссылка = ЭлементыТаблиц.Таблица
    |ГДЕ
    |	ТаблицыОтчета.Владелец = &Владелец
    |	И ЭлементыТаблиц.Владелец = &Владелец
    // Изменение кода. Начало. 13.02.2017{{
    |	И ТаблицыОтчета.ПометкаУдаления = ЛОЖЬ
    // Изменение кода. Конец. 13.02.2017}}
    |
    |СГРУППИРОВАТЬ ПО
    |	ТаблицыОтчета.Ссылка";
               
    Результат = Запрос.Выполнить();

    Выборка = Результат.Выбрать();

    Пока Выборка.Следующий() Цикл

    Ширина = ?(ТипЗнч(Выборка.КоличествоСтолбцов) = Тип("Число"), Выборка.КоличествоСтолбцов, 0);
    Высота = ?(ТипЗнч(Выборка.КоличествоСтрок) = Тип("Число"), Выборка.КоличествоСтрок, 0);

    ОписаниеТаблицы = ПодготовитьОписаниеТаблицы(Выборка.Таблица, Ширина, Высота);

    МассивТаблиц.Добавить(ОписаниеТаблицы);

    КонецЦикла; 

    Возврат МассивТаблиц;
 
КонецФункции // ПолучитьТаблицыОтчета()

// Функция проверяет взаимные пересечения таблиц отчета.
//
// Параметры:
//  МассивОписаний - Массив.
//  ВыводитьСообщения - Булево.
//
// Возвращаемое значение:
//  флЕстьПересечение - Булево.
//
Функция ПроверитьПересечения(МассивОписаний, ВыводитьСообщения) Экспорт

    флЕстьПересечение = Ложь;

    КоличествоЭлементов = МассивОписаний.Количество();

    Для К = 1 По КоличествоЭлементов - 1 Цикл

    Для Н = К+1 По КоличествоЭлементов Цикл

        Если ПроверитьПересеченияПары(МассивОписаний[К-1], МассивОписаний[Н-1], ВыводитьСообщения) Тогда
            
            флЕстьПересечение = Истина;
            
        КонецЕсли	

    КонецЦикла; 

    КонецЦикла; 

    Возврат флЕстьПересечение;
 
КонецФункции // ПроверитьПересечения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет пересечения таблиц.
//
// Параметры:
//   ОписаниеТаблицы1 - Структура.
//   ОписаниеТаблицы2 - Структура.
//   ВыводитьСообщения - Булево.
//
// Возвращаемое значение:
//  флЕстьПересечение - Булево.
//
Функция ПроверитьПересеченияПары(ОписаниеТаблицы1, ОписаниеТаблицы2, ВыводитьСоообщения)

    флЕстьПересечение = Ложь;

    Если ПроверитьВхождениеУгла(ОписаниеТаблицы2.ЛевоВерх, ОписаниеТаблицы1.ЛевоВерх, ОписаниеТаблицы1.ПравоНиз) Тогда

        флЕстьПересечение = Истина;

    ИначеЕсли ПроверитьВхождениеУгла(ОписаниеТаблицы2.ПравоВерх, ОписаниеТаблицы1.ЛевоВерх, ОписаниеТаблицы1.ПравоНиз) Тогда

        флЕстьПересечение = Истина;

    ИначеЕсли ПроверитьВхождениеУгла(ОписаниеТаблицы2.ЛевоНиз, ОписаниеТаблицы1.ЛевоВерх, ОписаниеТаблицы1.ПравоНиз) Тогда

        флЕстьПересечение = Истина;

    ИначеЕсли ПроверитьВхождениеУгла(ОписаниеТаблицы2.ПравоНиз, ОписаниеТаблицы1.ЛевоВерх, ОписаниеТаблицы1.ПравоНиз) Тогда

        флЕстьПересечение = Истина;

    КонецЕсли; 

    Если флЕстьПересечение И ВыводитьСоообщения Тогда

        ТекстСообщения =  НСтр("ru = 'Обнаружено пересечение таблиц ""%1%"" и ""%2%""!'");
        ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеТаблицы1.Таблица, ОписаниеТаблицы2.Таблица);
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);

    КонецЕсли; 

    Возврат флЕстьПересечение;
 
КонецФункции // ПроверитьПересеченияПары()

// Функция проверяет вхождение угла таблицы в диапазон координат другой таблицы.
//
// Параметры:
//  КоординатыУгла - Структура.
//  ЛевоВерх - Структура.
//  ПравоНиз - Структура.
//
// Возвращаемое значение:
//  флЕстьВхождение - Булево.
//
Функция ПроверитьВхождениеУгла(КоординатыУгла, ЛевоВерх, ПравоНиз)

    флЕстьВхождение = Ложь;

    Если КоординатыУгла.Столбец >= ЛевоВерх.Столбец 
        И КоординатыУгла.Столбец <= ПравоНиз.Столбец 
        И КоординатыУгла.Строка >= ЛевоВерх.Строка
        И КоординатыУгла.Строка <= ПравоНиз.Строка Тогда

        флЕстьВхождение = Истина;

    КонецЕсли; 

    Возврат флЕстьВхождение;
 
КонецФункции // ПроверитьВхождениеУгла()

#КонецОбласти

#КонецЕсли
