
#Область ОписаниеПеременных

&НаКлиенте
Перем мСостояниеПодключенияКОМ_1; // Хранит КОМ соединение с внешней базой.
 
&НаКлиенте
Перем мСостояниеПодключенияКОМ_2; // Хранит КОМ соединение с внешней базой.  

&НаКлиенте
Перем мВидИнформационнойБазыСоединенияКОМ_1; // Хранит вид информационной базы, подключенной по соединению КОМ.

&НаКлиенте
Перем мВидИнформационнойБазыСоединенияКОМ_2; // Хранит вид информационной базы, подключенной по соединению КОМ.


&НаКлиенте                                   
Перем мВидИБ_1; // Хранит текущий вид ИБ 1.
    
&НаКлиенте
Перем мВидИБ_2; // Хранит текущий вид ИБ 2.

&НаКлиенте                                   
Перем мИмяОбъекта_1; // Хранит текущее имя объекта 1.
    
&НаКлиенте
Перем мИмяОбъекта_2; // Хранит текущее имя объекта 2.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОшибкаСоединенияИБ" 
		И ТипЗнч(Параметр) = Тип("Строка") Тогда
	
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения();

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	ИменаЗаполнены = ЗначениеЗаполнено(Объект.ИмяОбъектаПолное_1) И ЗначениеЗаполнено(Объект.ИмяОбъектаПолное_2);
	
	Если ИменаЗаполнены Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		
		Если Объект.ИмяОбъектаПолное_1 = Объект.ИмяОбъектаПолное_2 Тогда
	    	НаименованиеТекстПоИмени = Объект.ИмяОбъектаПолное_1;
		Иначе
			НаименованиеТекстПоИмени = Объект.ИмяОбъектаПолное_1 + " -> " + Объект.ИмяОбъектаПолное_2;
		КонецЕсли;
		НаименованиеТекстПоИБ = Строка(Объект.ВидИнформационнойБазы_1) + " -> " + Строка(Объект.ВидИнформационнойБазы_2);
		
		ДанныеВыбора.Добавить(НаименованиеТекстПоИмени);
		ДанныеВыбора.Добавить(НаименованиеТекстПоИБ + " (" + НаименованиеТекстПоИмени + ")");
		
	КонецЕсли;
	
КонецПроцедуры // НаименованиеНачалоВыбора()

&НаКлиенте
Процедура ВидИнформационнойБазы_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мВидИБ_1 = Объект.ВидИнформационнойБазы_1;
	
КонецПроцедуры // ВидИнформационнойБазы_1НачалоВыбора() 

&НаКлиенте
Процедура ВидИнформационнойБазы_1ПриИзменении(Элемент)
		
	Если Объект.ВидИнформационнойБазы_1 <> мВидИБ_1 Тогда
		
		Объект.ВидОбъекта_1 	  = Неопределено;
		Объект.ИмяОбъектаПолное_1 = "";
		
		Если Объект.ПравилаПоиска.Количество() > 0 
			ИЛИ Объект.СоответствиеИмен.Количество() > 0 Тогда
		
			ТекстВопроса = НСтр("ru = 'Изменился вид ИБ. Будут очищены правила поиска. Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВидИнформационнойБазы_1ПриИзмененииОкончание", ЭтотОбъект); 
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 
			
		КонецЕсли;
		
	Иначе
		
		Объект.ВидИнформационнойБазы_1 = мВидИБ_1;
			
	КонецЕсли;
		
КонецПроцедуры // ВидИнформационнойБазы_1ПриИзменении()

// Процедура окончание процедуры "ВидИнформационнойБазы_1ПриИзменении".
// 
&НаКлиенте 
Процедура ВидИнформационнойБазы_1ПриИзмененииОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ПравилаПоиска.Очистить();
		Объект.СоответствиеИмен.Очистить();
	Иначе	
		Объект.ВидИнформационнойБазы_1 = мВидИБ_1;
	КонецЕсли;
                
КонецПроцедуры // ВидИнформационнойБазы_1ПриИзмененииОкончание()

&НаКлиенте
Процедура ВидИнформационнойБазы_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мВидИБ_2 = Объект.ВидИнформационнойБазы_2;
	
КонецПроцедуры // ВидИнформационнойБазы_2НачалоВыбора()     

&НаКлиенте
Процедура ВидИнформационнойБазы_2ПриИзменении(Элемент)
	
	Если Объект.ВидИнформационнойБазы_2 <> мВидИБ_2 Тогда
		
		Объект.ВидОбъекта_2 	  = Неопределено;
		Объект.ИмяОбъектаПолное_2 = "";
		
		Если Объект.ПравилаПоиска.Количество() > 0 
			ИЛИ Объект.СоответствиеИмен.Количество() > 0 Тогда
		
			ТекстВопроса = НСтр("ru = 'Изменился вид ИБ. Будут очищены правила поиска. Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВидИнформационнойБазы_2ПриИзмененииОкончание", ЭтотОбъект); 
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 
			
		КонецЕсли;
		
	Иначе
		
		Объект.ВидИнформационнойБазы_2 = мВидИБ_2;
			
	КонецЕсли;
	
КонецПроцедуры // ВидИнформационнойБазы_2ПриИзменении()

// Процедура окончание процедуры "ВидИнформационнойБазы_1ПриИзменении".
// 
&НаКлиенте 
Процедура ВидИнформационнойБазы_2ПриИзмененииОкончание(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ПравилаПоиска.Очистить();
		Объект.СоответствиеИмен.Очистить();
	Иначе	
		Объект.ВидИнформационнойБазы_2 = мВидИБ_2;
	КонецЕсли;
                
КонецПроцедуры // ВидИнформационнойБазы_2ПриИзмененииОкончание()

&НаКлиенте
Процедура ИмяОбъектаПолное_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураДопНастроек = Новый Структура("ЗапомнитьИмяОбъекта, ЗапомнитьВидОбъекта", Объект.ИмяОбъектаПолное_1, Объект.ВидОбъекта_1); 
	
	Оповещение = Новый ОписаниеОповещения("ИмяОбъектаПолное_1НачалоВыбораОкончание", ЭтотОбъект, СтруктураДопНастроек); 
	ВыбратьОбъектМетаданных(Элемент, 
							"1",
							мСостояниеПодключенияКОМ_1,
							мВидИнформационнойБазыСоединенияКОМ_1,
							Оповещение);
							
КонецПроцедуры // ИмяОбъектаПолное_1НачалоВыбора()

// Процедура окончание процедуры "ИмяОбъектаПолное_1НачалоВыбора".
// 
&НаКлиенте 
Процедура ИмяОбъектаПолное_1НачалоВыбораОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗапомнитьИмяОбъекта = ДополнительныеПараметры.ЗапомнитьИмяОбъекта;
	ЗапомнитьВидОбъекта = ДополнительныеПараметры.ЗапомнитьВидОбъекта;
	
	Если Объект.ИмяОбъектаПолное_1 <> ЗапомнитьИмяОбъекта 
		И (Объект.ПравилаПоиска.Количество() > 0	
			ИЛИ Объект.СоответствиеИмен.Количество() > 0) Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменилось имя объекта. Будут очищены правила поиска. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ИмяОбъектаПолное_1ОбработкаВопроса", ЭтотОбъект, ДополнительныеПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	ИначеЕсли Объект.ВидОбъекта_1 <> Объект.ВидОбъекта_2 Тогда
		
		Объект.ВидОбъекта_2 	  = Неопределено;
		Объект.ИмяОбъектаПолное_2 = "";	
		УстановитьДоступностьВидимость();
	
	КонецЕсли;
		
КонецПроцедуры // ИмяОбъектаПолное_1НачалоВыбораОкончание()

&НаКлиенте 
Процедура ИмяОбъектаПолное_1ОбработкаВопроса(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ПравилаПоиска.Очистить();
		Объект.СоответствиеИмен.Очистить();
	Иначе	
		Объект.ИмяОбъектаПолное_1 = ДополнительныеДанные.ЗапомнитьИмяОбъекта;
		Объект.ВидОбъекта_1 	  = ДополнительныеДанные.ЗапомнитьВидОбъекта;
	КонецЕсли;
	
	Если Объект.ВидОбъекта_1 <> Объект.ВидОбъекта_2 Тогда
		
		Объект.ВидОбъекта_2 	  = Неопределено;
		Объект.ИмяОбъектаПолное_2 = "";	
		УстановитьДоступностьВидимость();
	
	КонецЕсли;
	
КонецПроцедуры // ИмяОбъектаПолное_1ОбработкаВопроса()

&НаКлиенте
Процедура ИмяОбъектаПолное_1Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИмяОбъектаПолное_1Очистка()

&НаКлиенте
Процедура ИмяОбъектаПолное_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураДопНастроек = Новый Структура("ЗапомнитьИмяОбъекта, ЗапомнитьВидОбъекта", Объект.ИмяОбъектаПолное_2, Объект.ВидОбъекта_2); 
	
	Оповещение = Новый ОписаниеОповещения("ИмяОбъектаПолное_2НачалоВыбораОкончание", ЭтотОбъект, СтруктураДопНастроек); 
	ВыбратьОбъектМетаданных(Элемент, 
							"2",
							мСостояниеПодключенияКОМ_2,
							мВидИнформационнойБазыСоединенияКОМ_2,
							Оповещение);
							
КонецПроцедуры // ИмяОбъектаПолное_2НачалоВыбора()

// Процедура окончание процедуры "ИмяОбъектаПолное_2НачалоВыбора".
// 
&НаКлиенте 
Процедура ИмяОбъектаПолное_2НачалоВыбораОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗапомнитьИмяОбъекта = ДополнительныеПараметры.ЗапомнитьИмяОбъекта;
	ЗапомнитьВидОбъекта = ДополнительныеПараметры.ЗапомнитьВидОбъекта;
	
	Если Объект.ИмяОбъектаПолное_2 <> ЗапомнитьИмяОбъекта 
	  И (Объект.ПравилаПоиска.Количество() > 0	
	ИЛИ Объект.СоответствиеИмен.Количество() > 0) Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменилось имя объекта. Будут очищены правила поиска. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ИмяОбъектаПолное_2ОбработкаВопроса", ЭтотОбъект, ДополнительныеПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
				
	КонецЕсли;
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры // ИмяОбъектаПолное_2НачалоВыбораОкончание()

//  Процедура обработка вопроса поля "ИмяОбъектаПолное_2".
// 
&НаКлиенте 
Процедура ИмяОбъектаПолное_2ОбработкаВопроса(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ПравилаПоиска.Очистить();
		Объект.СоответствиеИмен.Очистить();
	Иначе	
		Объект.ИмяОбъектаПолное_2 = ДополнительныеДанные.ЗапомнитьИмяОбъекта;
		Объект.ВидОбъекта_2 	  = ДополнительныеДанные.ЗапомнитьВидОбъекта;
	КонецЕсли;
	
	Если Объект.ВидОбъекта_2 <> Объект.ВидОбъекта_1 Тогда
		
		Объект.ВидОбъекта_1 	  = Неопределено;
		Объект.ИмяОбъектаПолное_1 = "";	
		
	КонецЕсли;
	
КонецПроцедуры // ИмяОбъектаПолное_1ОбработкаВопроса()

&НаКлиенте
Процедура ИмяОбъектаПолное_2Очистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИмяОбъектаПолное_2Очистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаПоиска

&НаКлиенте
Процедура ПравилаПоискаСпособПоискаДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПеречСпособыПоискаДанных = фКэшЗначений.Перечисления.бит_мпд_СпособыПоискаДанных;
	ВидПеречисление 		 = фКэшЗначений.Перечисления.бит_мпд_ВидыОбъектовМетаданных.Перечисление;
	
	СписокЗначенийВыбора = Новый СписокЗначений;
	
	// Если Не ЗначениеЗаполнено(Объект.ВидОбъекта_1) Тогда.
	Если Объект.ВидОбъекта_1 = ВидПеречисление Тогда
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоИменам);
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоСоответствиюИмен);
	Иначе
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоВнутреннимИдентификаторам);
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоРеквизитам);
		СписокЗначенийВыбора.Добавить(ПеречСпособыПоискаДанных.ПоЗначению);	
	КонецЕсли; 	
	
	ДанныеВыбора = СписокЗначенийВыбора;
	
КонецПроцедуры // ПравилаПоискаСпособПоискаДанныхНачалоВыбора()

&НаКлиенте
Процедура ПравилаПоискаСпособПоискаДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаПоиска.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПеречСпособыПоискаДанных = фКэшЗначений.Перечисления.бит_мпд_СпособыПоискаДанных;
	
	Если ТекущиеДанные.СпособПоискаДанных = ПеречСпособыПоискаДанных.ПоВнутреннимИдентификаторам Тогда
		ТекущиеДанные.ИмяРеквизита_1 = "";	
		ТекущиеДанные.ИмяРеквизита_2 = "";	
	КонецЕсли;
		
КонецПроцедуры // ПравилаПоискаСпособПоискаДанныхПриИзменении()

&НаКлиенте
Процедура ПравилаПоискаИмяРеквизита_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокДанныхВыбора(мСостояниеПодключенияКОМ_1, 
											мВидИнформационнойБазыСоединенияКОМ_1,
											"Реквизиты",
											"1");
	
КонецПроцедуры // ПравилаПоискаИмяРеквизита_1НачалоВыбора()

&НаКлиенте
Процедура ПравилаПоискаИмяРеквизита_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокДанныхВыбора(мСостояниеПодключенияКОМ_2, 
											мВидИнформационнойБазыСоединенияКОМ_2,
											"Реквизиты",
											"2"); 
	
КонецПроцедуры // ПравилаПоискаИмяРеквизита_2НачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоответствиеЗначений

&НаКлиенте
Процедура СоответствиеЗначенийИмяЗначения_1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокДанныхВыбора(мСостояниеПодключенияКОМ_1, 
											мВидИнформационнойБазыСоединенияКОМ_1,
											"ЗначенияПеречисления",
											"1");

	
КонецПроцедуры // СоответствиеЗначенийИмяЗначения_1НачалоВыбора()
											
&НаКлиенте
Процедура СоответствиеЗначенийИмяЗначения_2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокДанныхВыбора(мСостояниеПодключенияКОМ_2, 
											мВидИнформационнойБазыСоединенияКОМ_2,
											"ЗначенияПеречисления",
											"2");

	
КонецПроцедуры // СоответствиеЗначенийИмяЗначения_2НачалоВыбора()											

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоответствиеЗначенийЗаполнить(Команда)
	
	ЗаполнитьСоответсвиеЗначений(мСостояниеПодключенияКОМ_1, мСостояниеПодключенияКОМ_2, мВидИнформационнойБазыСоединенияКОМ_1, мВидИнформационнойБазыСоединенияКОМ_2);
	
КонецПроцедуры // СоответствиеЗначенийЗаполнить()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
     	
	КэшПеречислений = Новый Структура;
	КэшПеречислений.Вставить("бит_мпд_СпособыПоискаДанных", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_мпд_СпособыПоискаДанных));
	КэшПеречислений.Вставить("бит_мпд_ВидыОбъектовМетаданных", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_мпд_ВидыОбъектовМетаданных));
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречислений);                                                                    
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура устанавливает доступность и видимость элементам формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьДоступностьВидимость()

		
	ИменаЗаполнены = ЗначениеЗаполнено(Объект.ИмяОбъектаПолное_1) И ЗначениеЗаполнено(Объект.ИмяОбъектаПолное_2);
	
	ВидПеречисление = Перечисления.бит_мпд_ВидыОбъектовМетаданных.Перечисление;
	ЕстьПеречисление = Объект.ВидОбъекта_1 = ВидПеречисление
					ИЛИ Объект.ВидОбъекта_2 = ВидПеречисление;
		
	Элементы.ПравилаПоиска.Доступность  = ИменаЗаполнены;
	// Элементы.ПравилаПоиска.Видимость    = Не ЕстьПеречисление;
	Элементы.СоответствиеИмен.Видимость = ЕстьПеречисление;	

КонецПроцедуры // УстановитьДоступностьВидимость()

&НаСервере
Процедура ЗаполнитьСоответсвиеЗначений(СостояниеКОМ_1, СостояниеКОМ_2, ВидПодключеннойИБ_1, ВидПодключеннойИБ_2)

	// Очистка старых значений
	Объект.СоответствиеИмен.Очистить();
	
	// Продолжаем работу если имена заполнены и это перечисления.
	ВидПеречисление = Перечисления.бит_мпд_ВидыОбъектовМетаданных.Перечисление;
	ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
		
	Если Не ЗначениеЗаполнено(Объект.ИмяОбъектаПолное_1)
		ИЛИ Не ЗначениеЗаполнено(Объект.ИмяОбъектаПолное_2)
		ИЛИ Объект.ВидОбъекта_1 <> ВидПеречисление 
		ИЛИ Объект.ВидОбъекта_2 <> ВидПеречисление Тогда
		Возврат;	
	КонецЕсли;
	
	фТекстОшибки = Неопределено;
	СоединениеИБ_1 = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеКОМ_1, Объект.ВидИнформационнойБазы_1, ВидПодключеннойИБ_1, "КОМ", АдресКомОбъекта_1, фТекстОшибки);
	СоединениеИБ_2 = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеКОМ_2, Объект.ВидИнформационнойБазы_2, ВидПодключеннойИБ_2, "КОМ", АдресКомОбъекта_2, фТекстОшибки);
	
	Если СостояниеКОМ_1 = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена 
		ИЛИ СостояниеКОМ_2 = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена Тогда
		Возврат;
	КонецЕсли;
		
	МетаданныеИБ_1 = ?(СостояниеКОМ_1 = ПеречСостоянияПодключения.ТекущаяБаза, Метаданные, СоединениеИБ_1.Метаданные);
	МетаданныеИБ_2 = ?(СостояниеКОМ_2 = ПеречСостоянияПодключения.ТекущаяБаза, Метаданные, СоединениеИБ_2.Метаданные);
	
	МассивИмени = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(Объект.ИмяОбъектаПолное_1, ".");
	ИмяОбъекта_1 = МассивИмени[1];
	МассивИмени = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(Объект.ИмяОбъектаПолное_2, ".");
	ИмяОбъекта_2 = МассивИмени[1];
	
	МетаОбъекта_1 = МетаданныеИБ_1.Перечисления[ИмяОбъекта_1];
	МетаОбъекта_2 = МетаданныеИБ_2.Перечисления[ИмяОбъекта_2];
	
	
	// Описание типов: Строка
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	КС = Новый КвалификаторыСтроки(255);
	ОписаниеСтрока = Новый ОписаниеТипов(МассивТипов, , КС);
	
	// Формирование таблицы сравнения значений
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Имя"		    , ОписаниеСтрока);
	ТаблицаОбъектов.Колонки.Добавить("ИмяЗначения_1", ОписаниеСтрока);
	ТаблицаОбъектов.Колонки.Добавить("ИмяЗначения_2", ОписаниеСтрока);
	
	Для каждого ЗначениеПеречисления Из МетаОбъекта_1.ЗначенияПеречисления Цикл
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Имя 		  = ЗначениеПеречисления.Имя;
		НоваяСтрока.ИмяЗначения_1 = ЗначениеПеречисления.Имя;
	КонецЦикла;
	Для каждого ЗначениеПеречисления Из МетаОбъекта_2.ЗначенияПеречисления Цикл
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Имя 		  = ЗначениеПеречисления.Имя;
		НоваяСтрока.ИмяЗначения_2 = ЗначениеПеречисления.Имя;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Имя,
	|	ТаблицаОбъектов.ИмяЗначения_1,
	|	ТаблицаОбъектов.ИмяЗначения_2
	|ПОМЕСТИТЬ ТаблОб
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблОб.Имя 						КАК Имя,
	|	МАКСИМУМ(ТаблОб.ИмяЗначения_1) 	КАК ИмяЗначения_1,
	|	МАКСИМУМ(ТаблОб.ИмяЗначения_2) 	КАК ИмяЗначения_2
	|ИЗ
	|	ТаблОб КАК ТаблОб
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблОб.Имя
	|УПОРЯДОЧИТЬ ПО
	|	Имя
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Заполнения таблицы соответствия на форме
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НовоеСоответствие = Объект.СоответствиеИмен.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСоответствие, Выборка);
	КонецЦикла;
	
	// ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьСоответсвиеЗначений()

&НаСервере
Функция ПолучитьСписокДанныхВыбора(СостояниеКОМ, ВидПодключеннойИБ, ИмяКоллекции, НомерИБ)

	ДанныеВыбора = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.бит_мпд_ВидыОбъектовМетаданных.ЗначенияПеречисления;
	ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
	
	фТекстОшибки 	 = Неопределено;
	АдресКомОбъекта  = ЭтаФорма["АдресКомОбъекта_" + НомерИБ];
	ВидТекущейИБ 	 = Объект["ВидИнформационнойБазы_" + НомерИБ];
	ИмяОбъектаПолное = Объект["ИмяОбъектаПолное_" + НомерИБ];
	
	НастройкаПодключения = ВидТекущейИБ.НастройкаПодключенияПоУмолчанию;
	
	Если НастройкаПодключения.РасположениеБазы = Перечисления.бит_мпд_ВидыРасположенияИнформационныхБаз.RestСервис Тогда
		
		ИмяОбъектаПолноеАнгл = ИмяОбъектаПолное;
		Имена = бит_СтрокиКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбъектаПолноеАнгл,".");
		Если Имена.Количество() > 1 Тогда
			
			ИмяОбъектаПолноеАнгл = бит_мпд_ВнешниеИсточникиСервер.ПеревестиИмяКласса(Имена[0],"en")+"_"+Имена[1];
			
		КонецЕсли; 
		
		// Получение реквизитов через REST сервис
		Ответ = бит_мпд_ПовтИсп.ПолучитьМетаданныеHTTP(НастройкаПодключения, Истина);
		Если Ответ.КодСостояния = 200 Тогда
		
			 Чтение = Новый ЧтениеXML;
			 Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			 
			 флЧитатьСвойства = Ложь;
			 Пока Чтение.Прочитать() Цикл
			 
			 	  Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента И Чтение.Имя = "EntityType" Тогда
				  
				  	   ИмяЭлемента = Чтение.ПолучитьАтрибут("Name");
					   
					   Если ИмяЭлемента = ИмяОбъектаПолноеАнгл Тогда
						   
						  флЧитатьСвойства = Истина; 
						   
					   Иначе	
						   
						   Чтение.Пропустить();
						   
					   КонецЕсли; 
				  
				  КонецЕсли; 
				  
				  Если флЧитатьСвойства Тогда
				  
					  Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента 
						   И Чтение.Имя = "Property" Тогда
					  
					  	   ИмяСвойства = Чтение.ПолучитьАтрибут("Name");
						   ДанныеВыбора.Добавить(ИмяСвойства);
					  
					  КонецЕсли; 
					  
					  Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента 
						   И Чтение.Имя = "EntityType" Тогда
					  
					  	  флЧитатьСвойства = Ложь;
					  
					  КонецЕсли; 
					  
				  КонецЕсли; 
				  
			 КонецЦикла; // Чтение XML
		
		КонецЕсли; 
		
	Иначе	
		
		// Получение реквизитов через COM- соединение.
		СоединениеИБ = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеКОМ, ВидТекущейИБ, ВидПодключеннойИБ, "КОМ", АдресКомОбъекта, фТекстОшибки);
		
		Если СостояниеКОМ <> ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена Тогда
			
			МетаданныеИБ = ?(СостояниеКОМ = ПеречСостоянияПодключения.ТекущаяБаза, Метаданные, СоединениеИБ.Метаданные);
			
			СтрИмен    = бит_ОбщегоНазначенияКлиентСервер.РазобратьПолноеИмяОбъекта(ИмяОбъектаПолное);
			ИмяОбъекта       = СтрИмен.ИмяОбъекта;
			ИмяКоллекцииМета = СтрИмен.ИмяКоллекции;
					
			МетаОбъекта = МетаданныеИБ[ИмяКоллекцииМета][ИмяОбъекта];
			
			Если ИмяКоллекции = "Реквизиты" Тогда
				
				// Добавим стандартные реквизиты
				Для каждого ЭлементМетаданных Из МетаОбъекта.СтандартныеРеквизиты Цикл
				
					ДанныеВыбора.Добавить(ЭлементМетаданных.Имя);
				
				КонецЦикла; 
			
			КонецЕсли; 
			
			Для каждого ЭлементМетаданных Из МетаОбъекта[ИмяКоллекции] Цикл
				ДанныеВыбора.Добавить(ЭлементМетаданных.Имя);
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли; 
	

	Возврат ДанныеВыбора;
	
КонецФункции // ПолучитьСписокДанныхВыбора()

&НаКлиенте
Процедура ВыбратьОбъектМетаданных(Элемент, НомерИБ, СостояниеПодключенияКОМ, ВидПодключеннойИБ, Оповещение)

	ВидТекущейИБ = Объект["ВидИнформационнойБазы_" + НомерИБ];
	ИмяТекущего  = Объект["ИмяОбъектаПолное_" + НомерИБ];
	
	Если Не ЗначениеЗаполнено(ВидТекущейИБ) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнено значение вида информационной базы.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ХранилищеДеревоОбъектов = ЭтаФорма["ХранилищеДеревоОбъектов_" + НомерИБ];
	АдресКомОбъекта 		= ЭтаФорма["АдресКомОбъекта_" + НомерИБ];
																	
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе"	 , Истина);
	ПараметрыФормы.Вставить("ХранилищеДеревоОбъектов", ХранилищеДеревоОбъектов);
	ПараметрыФормы.Вставить("ИмяТекущего" 		 	 , ИмяТекущего);
	ПараметрыФормы.Вставить("СостояниеПодключенияКОМ", СостояниеПодключенияКОМ);
	ПараметрыФормы.Вставить("ВидТекущейИБ" 			 , ВидТекущейИБ);
	ПараметрыФормы.Вставить("ВидПодключеннойИБ"	 	 , ВидПодключеннойИБ);
	ПараметрыФормы.Вставить("АдресКомОбъекта"	 	 , АдресКомОбъекта);
	
	СтруктураДопПараметров = Новый Структура("НомерИБ, Оповещение", НомерИБ, Оповещение);
	ОповещениеФормаМодально = Новый ОписаниеОповещения("ВыбратьОбъектМетаданныхОкончание", ЭтотОбъект, СтруктураДопПараметров); 
	ОткрытьФорму("ОбщаяФорма.бит_мпд_ФормаВыбораОбъектовМетаданныхУправляемая", ПараметрыФормы, Элемент,,,,ОповещениеФормаМодально, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры // ВыбратьОбъектМетаданных()

// Процедура окончание процедуры "ВыбратьОбъектМетаданных".
// 
&НаКлиенте 
Процедура ВыбратьОбъектМетаданныхОкончание(СтруктураРезультата, ДополнительныеПараметры) Экспорт
	
	НомерИБ = ДополнительныеПараметры.НомерИБ;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если ТипЗнч(СтруктураРезультата) = Тип("Структура") Тогда
		
		Объект["ИмяОбъектаПолное_" + НомерИБ]  = СтруктураРезультата.ИмяОбъектаПолное;
		Объект["ВидОбъекта_" + НомерИБ] 	   = СтруктураРезультата.ВидОбъекта;
		ЭтаФорма["АдресКомОбъекта_" + НомерИБ] = СтруктураРезультата.АдресКомОбъекта;
		
		ХранилищеДеревоОбъектов = СтруктураРезультата.ХранилищеДеревоОбъектов;
		ЭтаФорма["ХранилищеДеревоОбъектов_" + НомерИБ] = ХранилищеДеревоОбъектов;
		
		СостояниеПодключенияКОМ = СтруктураРезультата.СостояниеПодключенияКОМ;
		ВидПодключеннойИБ 	 	= СтруктураРезультата.ВидПодключеннойИБ;
		
		ВыполнитьОбработкуОповещения(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры // ВыбратьОбъектМетаданныхОкончание()

#КонецОбласти
