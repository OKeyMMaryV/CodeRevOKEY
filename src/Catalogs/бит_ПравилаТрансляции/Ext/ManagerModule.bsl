#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция - выполняет поиска полей, участвующих в задании произвольного условия.
//
// Параметры:
//  СтрокаУсловия	 - СтрокаТаблицыЗначений - строка.
//  КолонкиПравила	 - КолонкиТаблицыЗначений - колонки.
//  НомерУсловия	 - Строка - номер.
// 
// Возвращаемое значение:
//  РезСтруктура - Структура.
//
Функция НайтиПоляУсловия(СтрокаУсловия,КолонкиПравила,НомерУсловия) Экспорт
	
	РезСтруктура = КонструкторСтруктурыПоляУсловия();
	
	Для каждого КлючИЗначение Из РезСтруктура Цикл
		
		ИмяКолонки = КлючИЗначение.Ключ+НомерУсловия;
		
		Если ТипЗнч(КолонкиПравила) = Тип("Структура") Тогда
			
			флЕстьКолонка = КолонкиПравила.Свойство(ИмяКолонки);
			
		Иначе
			
			флЕстьКолонка = ?(КолонкиПравила.Найти(ИмяКолонки) <> Неопределено, Истина, Ложь);
			
		КонецЕсли;	  
		
		Если флЕстьКолонка Тогда
			
			РезСтруктура[КлючИЗначение.Ключ] = СтрокаУсловия[ИмяКолонки];
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат РезСтруктура;
	
КонецФункции // НайтиПоляУсловия()

// Процедура - очищает поля, связанные с условием определенного номера.
//
// Параметры:
//  СтрокаУсловия	 - СтрокаТаблицыЗначений - строка.
//  КолонкиПравила	 - КолонкаТаблицыЗначений - колонка.
//  НомерУсловия	 - Строка - номер.
//
Процедура ОчиститьПоляУсловия(СтрокаУсловия,КолонкиПравила,НомерУсловия) Экспорт
	
	ПоляУсловия = КонструкторСтруктурыПоляУсловия();
	
	Для каждого КиЗ Из ПоляУсловия Цикл
		
		ИмяКолонки = КиЗ.Ключ+НомерУсловия;
		
		Если КолонкиПравила.Найти(ИмяКолонки) <> Неопределено Тогда
			
			СтрокаУсловия[ИмяКолонки] = Неопределено;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // ОчиститьПоляУсловия()

// Процедура - устанавливает поля условия из структуры.
//
// Параметры:
//  СтрокаУсловия		 - СтрокаТаблицыЗначений - строка условия.
//  КолонкиПравила		 - КолонкаТаблицыЗначений - колонки.
//  СтруктураПараметров	 - Структура - параметры.
//  НомерУсловия		 - Строка - номер.
//
Процедура УстановитьПоляУсловия(СтрокаУсловия,КолонкиПравила,СтруктураПараметров,НомерУсловия) Экспорт

	Для каждого КиЗ Из СтруктураПараметров Цикл
		
		ИмяКолонки = КиЗ.Ключ+НомерУсловия;
		
		Если КолонкиПравила.Найти(ИмяКолонки) <> Неопределено Тогда
			
			СтрокаУсловия[ИмяКолонки] = КиЗ.Значение;
			
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры // УстановитьПоляУсловия()

// Функция проверяет является ли данное поле полем, участвующим в формировании условия. 
// А также определяет номер условия в котором участвует это поле.
// Если возвращается 0 - поле не является полем условия.
// 
// Параметры:
//  ИмяПоля  - Строка - имя поля.
// 
// Возвращаемое значение:
//  НомерУсловия - Число.
// 
Функция ЭтоПолеУсловия(ИмяПоля) Экспорт
	
	НомерУсловия = 0;
	
	ПоляУсловия = КонструкторСтруктурыПоляУсловия();
	
	Для каждого КиЗ Из ПоляУсловия Цикл
		
		Если Найти(ИмяПоля,КиЗ.Ключ)>0 Тогда
			
			
			ДлинаИмени = СтрДлина(КиЗ.Ключ);
			СтрНомерУсловия = Сред(ИмяПоля,ДлинаИмени+1);
			Попытка
			
				НомерУсловия = Число(СтрНомерУсловия);
			
			Исключение
				
				НомерУсловия = 0;
				
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат НомерУсловия;
	
КонецФункции // ЭтоПолеУсловия()

// Функция создает структуру полей условия.
// 
// Возвращаемое значение:
//   ПоляУсловия   - Структура
// 
Функция КонструкторСтруктурыПоляУсловия() Экспорт

	ПоляУсловия = Новый Структура("Условие,ВидСравнения,Значение,ОбъединениеСПоследующим");

	Возврат ПоляУсловия;
	
КонецФункции // КонструкторСтруктурыПоляУсловия()
		
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_ПравилаТрансляции.Ссылка
	               |ИЗ
	               |	Справочник.бит_ПравилаТрансляции КАК бит_ПравилаТрансляции
	               |ГДЕ
	               |	НЕ бит_ПравилаТрансляции.ЭтоГруппа";
				   
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.ПерекомпилироватьКод();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОб);
	КонецЦикла; 
	
КонецПроцедуры // КонвертироватьПравилаТрансляции()

Процедура ОбновитьИсполняемыйКод(Ссылки, АдресРезультата) Экспорт
	
	Ошибки = Новый Соответствие; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки",Ссылки);
	
	Запрос.Текст =   
	"ВЫБРАТЬ
	|	бит_ПравилаТрансляции.Ссылка КАК Ссылка,
	|	бит_ПравилаТрансляции.Наименование КАК Наименование,
	|	бит_ПравилаТрансляции.Код КАК Код
	|ИЗ
	|	Справочник.бит_ПравилаТрансляции КАК бит_ПравилаТрансляции
	|ГДЕ
	|	НЕ бит_ПравилаТрансляции.ЭтоГруппа
	|	И бит_ПравилаТрансляции.Ссылка В(&Ссылки)";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.ПерекомпилироватьКод();
		Попытка
			ТекущийОбъект.Записать();
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Ошибка = СтрШаблон(Нстр("ru = 'Ошибка при записи правила ""%1 (%2)"" по причине: %3'"),
						Выборка.Наименование, Выборка.Код, ТекстОшибки);
			Ошибки.Вставить(Выборка.Ссылка, Ошибка);
		КонецПопытки; 
	КонецЦикла; 

	РезультатОбновления = Новый Структура(); 
	РезультатОбновления.Вставить("Ошибки",Ошибки);
	РезультатОбновления.Вставить("Статус",?(Ошибки.Количество() = 0, "Успех", "Ошибка"));
	
	ПоместитьВоВременноеХранилище(РезультатОбновления, АдресРезультата);

КонецПроцедуры

#КонецОбласти 

#КонецЕсли
