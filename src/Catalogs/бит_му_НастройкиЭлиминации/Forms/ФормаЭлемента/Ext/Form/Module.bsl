
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполняем кэш значений	
	ЗаполнитьКэшЗначений();
	
	// Изменение кода. Начало. 03.04.2014{{
	УстановитьПараметрыВыбораДляСчетов();
    // Изменение кода. Конец. 03.04.2014}}

КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Проверим наличие в запросе источника соответствующей таблицы.
	СтрокаСообщений = "";
	
	МетаданныеТабЧасти = Метаданные.Справочники.бит_му_НастройкиЭлиминации.ТабличныеЧасти.Настройки.Реквизиты;
	
	Для каждого ТекСтр Из ТекущийОбъект.Настройки Цикл
		
		ТекстЗапросаИсточника = ТекСтр.ИсточникДанных.ЗапросБД.ТекстЗапроса;
		
		Если НЕ ТекСтр.ТипАлгоритмаЭлиминации = Перечисления.бит_му_ТипыАлгоритмовЭлиминации.НереализованнаяПрибыль 
			 И Найти(ТекстЗапросаИсточника, ТекущийОбъект.ОбъектСистемы.ИмяОбъекта) = 0
			 И Найти(ТекстЗапросаИсточника, "бит_вго_ДанныеКорректировок") = 0 Тогда
			 
			ТекстСообщения = СтрШаблон(НСтр("ru = '• в строке № %1 реквизит ""%2"" не содержит запрос к выбранному объекту системы'"),
										(ТекущийОбъект.Настройки.Индекс(ТекСтр) + 1),
										МетаданныеТабЧасти.ИсточникДанных.Синоним);
			СтрокаСообщений = СтрокаСообщений + Символы.ПС + ТекстСообщения;
															
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаСообщений) Тогда
		СтрокаСообщений = НСтр("ru = 'Невозможно записать элемент по причине:'") + СтрокаСообщений;	
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщений, Объект,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбъектСистемыПриИзменении(Элементы.ОбъектСистемы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(мКэшЗначений.ВидОбъекта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.ОбъектСистемы);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", мКэшЗначений.ДоступныеОбъектыСистемы);
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСистемыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектСистемы) Тогда
		Элементы.НастройкиСчетДополнительногоДвижения.ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка." + ПолучитьИмяСчета(Объект.ОбъектСистемы));
	Иначе
		Элементы.НастройкиСчетДополнительногоДвижения.ОграничениеТипа = Новый ОписаниеТипов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройки

&НаКлиенте
Процедура НастройкиПриАктивизацииСтроки(Элемент)
	
    // Используем обработчик ожидания, т.к. вызовы сервера в данном обработчике приводят к зацикливанию.
	ОтключитьОбработчикОжидания("ОжиданиеАктивизацииСтроки");
	ПодключитьОбработчикОжидания("ОжиданиеАктивизацииСтроки",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеАктивизацииСтроки()

  ОбновитьОтборКлиент("ИсточникДанных");

КонецПроцедуры // ОжиданиеАктивизацииСтроки()

&НаКлиенте
Процедура НастройкиИсточникДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуИсточникаДанных("ИсточникДанных", Элемент);

КонецПроцедуры

&НаКлиенте
Процедура НастройкиИсточникДанныхПриИзменении(Элемент)
	
	ОбновитьОтборКлиент("ИсточникДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьОтборКлиент("ИсточникДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТипАлгоритмаЭлиминацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипАлгоритмаЭлиминации <> ВыбранноеЗначение Тогда
		ТекущиеДанные.ИсточникДанных = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтбор

&НаКлиенте
Процедура ОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяИсточникаДанных = "ИсточникДанных";
	
	#Если НЕ ТонкийКлиент Тогда
		
	// Откроем форму источника данных
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные[ИмяИсточникаДанных]);
	ПараметрыФормы.Вставить("АктивныйЭлемент", "ТаблицаОтбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборВыборЗавершение", ЭтотОбъект, ИмяИсточникаДанных);
	
	ОткрытьФорму("Справочник.бит_ИсточникиДанных.ФормаОбъекта", ПараметрыФормы, Элемент,,,,
					ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	#КонецЕсли
	
КонецПроцедуры

// Процедура - завершение обработчика события "Выбор" табличного поля "Отбор".
// 
&НаКлиенте
Процедура ОтборВыборЗавершение(Результат, ИмяИсточникаДанных) Экспорт
  
	ОбновитьОтборКлиент(ИмяИсточникаДанных);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьОтбор(Команда)
	
	ОбновитьОтборКлиент("ИсточникДанных");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.НастройкиСчетДополнительногоДвижения);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	мКэшЗначений = Новый Структура;
	
	мКэшЗначений.Вставить("ТипИсточникаЭлиминация",		Перечисления.бит_ТипыИсточниковДанных.Элиминация);
	мКэшЗначений.Вставить("ПростойАлгоритмЭлиминации", 	Перечисления.бит_му_ТипыАлгоритмовЭлиминации.Простой);
	мКэшЗначений.Вставить("ВидОбъекта",					Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	// Список регистров бухгалтерии
	ДоступныеОбъектыСистемы = Новый СписокЗначений;
	
	СписокПлановСчетов = Метаданные.Справочники.бит_му_НастройкиЭлиминации.ТабличныеЧасти.Настройки.Реквизиты.СчетДополнительногоДвижения.Тип.Типы();
	
	Для каждого ТекРегистр Из Метаданные.РегистрыБухгалтерии Цикл
		
		Для каждого ПланСчетов Из СписокПлановСчетов Цикл
			
			Если ТипЗнч(ПланыСчетов[ТекРегистр.ПланСчетов.Имя].ПустаяСсылка()) = ПланСчетов Тогда
				
				ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(ТекРегистр);
				ДоступныеОбъектыСистемы.Добавить(ОбъектСистемы);
				
			КонецЕсли;
			
		КонецЦикла;			
		
	КонецЦикла;	
	
	ДоступныеОбъектыСистемы.СортироватьПоЗначению();
	
	мКэшЗначений.Вставить("ДоступныеОбъектыСистемы", ДоступныеОбъектыСистемы);	
	
КонецПроцедуры

// Функция получает имя плана счетов для указанного регистра.
// 
// Параметры:
//  ПериметрКонсолидации - СправочникСсылка.бит_ОбъектыСистемы.
// 
// Возвращаемое значение:
//  Результат - Строка.
// 
&НаСервереБезКонтекста
Функция ПолучитьИмяСчета(ОбъектСистемыСсылка)

	Возврат Метаданные.РегистрыБухгалтерии[ОбъектСистемыСсылка.ИмяОбъекта].ПланСчетов.Имя;
	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов.
// 
&НаКлиенте
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина)
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ОтборКомпоновки = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		ОтборКомпоновки = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = ОтборКомпоновки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Возврат НовыйЭлемент;
	
КонецФункции

// Процедура обновляет таблицу значений "Отбор".
// 
// Параметры:
//  ИсточникДанных - СправочникСсылка.бит_ИсточникиДанных.
// 
&НаСервере
Процедура ОбновитьОтбор(ИсточникДанных)
	
	Отбор.Очистить();	
	
	СохраненнаяНастройка = ИсточникДанных.НастройкиПостроителя.Получить();
	
	Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") Тогда
		
		Для каждого ТекСтр Из СохраненнаяНастройка.Отбор Цикл
			
			НоваяСтрока = Отбор.Добавить();
			НоваяСтрока.Использование 	= ТекСтр.Использование;
			НоваяСтрока.Поле 		 	= ТекСтр.Представление;
			НоваяСтрока.ВидСравнения 	= ТекСтр.ВидСравнения;
			
			Если НЕ ТекСтр.Значение = Неопределено Тогда
				НоваяСтрока.Значение	 	= Строка(ТекСтр.Значение);
			Иначе	
				НоваяСтрока.Значение	 	= Строка(ТекСтр.ЗначениеС)+" - "+Строка(ТекСтр.ЗначениеПо);
			КонецЕсли; 
			
		КонецЦикла; // СохраненнаяНастройка.Отбор
		
	КонецЕсли;

КонецПроцедуры // ОбновитьОтбор()

// Процедура обновляет таблицу значений "Отбор".
// 
// Параметры:
//  ИмяИсточинкаДанных - Строка.
// 
&НаКлиенте
Процедура ОбновитьОтборКлиент(ИмяИсточникаДанных)

	ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Отбор.Очистить();
		Возврат;
	КонецЕсли;
	
	ИсточникДанных = ТекущиеДанные[ИмяИсточникаДанных];
	
	ОбновитьОтбор(ИсточникДанных);

КонецПроцедуры // ОбновитьОтборКлиент()

// Процедура открывает форму элемента справочника "бит_ИсточникиДанных".
// 
// Параметры:
//  ИмяИсточникаДанных - Строка.
//  Элемент - Элемент формы, Владелец.
// 
&НаКлиенте
Процедура ОткрытьФормуИсточникаДанных(ИмяИсточникаДанных, Элемент)

	ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборИсточников = Новый Структура;
	ОтборИсточников.Вставить("ТипИсточника", мКэшЗначений.ТипИсточникаЭлиминация); 
	ОтборИсточников.Вставить("ТипАлгоритмаЭлиминации", ТекущиеДанные.ТипАлгоритмаЭлиминации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийЭлемент", ТекущиеДанные[ИмяИсточникаДанных]);
	ПараметрыФормы.Вставить("Отбор", ОтборИсточников);
	
	ОткрытьФорму("Справочник.бит_ИсточникиДанных.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры // ОткрытьФормуИсточникаДанных() 

#КонецОбласти

