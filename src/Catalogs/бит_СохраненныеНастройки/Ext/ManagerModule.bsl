#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция формирует ключ объекта.
// 
// Параметры:
//  НастраиваемыйОбъект - ЛюбаяСсылка - Настраиваемый объект.
// 
// Возвращаемое значение:
//   КлючОбъекта  - Строка.
// 
Функция СформироватьКлючОбъекта(НастраиваемыйОбъект)  Экспорт
	
	Если ТипЗнч(НастраиваемыйОбъект) = Тип("Строка") Тогда
		КлючОбъекта = НастраиваемыйОбъект;
	Иначе	
		ИмяОбъекта  = НастраиваемыйОбъект.Метаданные().ПолноеИмя();
		КлючОбъекта = ИмяОбъекта + "_" + Строка(НастраиваемыйОбъект.УникальныйИдентификатор());
	КонецЕсли; 

	Возврат КлючОбъекта;
	
КонецФункции // СформироватьКлючОбъекта()

// Функция получает сохраненные настройки по переданным параметрам.
// 
// Параметры:
//  СтруктураПараметров  - Структура - Ключи: ТипНастройки,
//  											НастраиваемыйОбъект,
// 												КлючОбъекта,
// 												ИспользоватьПриОткрытии.
// 
// Возвращаемое значение:
//   Результат   - РезультатЗапроса.
// 
Функция ПолучитьНастройки(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипНастройки"	   , СтруктураПараметров.ТипНастройки);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", СтруктураПараметров.НастраиваемыйОбъект);
	
	Если СтруктураПараметров.Свойство("КлючОбъекта") Тогда		
		КлючОбъекта = СтруктураПараметров.КлючОбъекта;		
	Иначе		
		КлючОбъекта = СформироватьКлючОбъекта(СтруктураПараметров.НастраиваемыйОбъект);		
	КонецЕсли; 
	Запрос.УстановитьПараметр("КлючОбъекта", КлючОбъекта);
	
	// Список недоступных настроек
	СтруктураДоступности = бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(КлючОбъекта, Ложь);
	Запрос.УстановитьПараметр("СписокНеДоступныхНастроек", СтруктураДоступности.СписокНеДоступныхНастроек);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_СохраненныеНастройки.Ссылка,
	|	бит_СохраненныеНастройки.Ответственный,
	|	бит_СохраненныеНастройки.КлючНастройки
	|ИЗ
	|	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|ГДЕ
	|	бит_СохраненныеНастройки.ТипНастройки = &ТипНастройки
	|	И бит_СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И бит_СохраненныеНастройки.КлючОбъекта = &КлючОбъекта
	|	И бит_СохраненныеНастройки.КлючНастройки НЕ В(&СписокНеДоступныхНастроек)
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_СохраненныеНастройки.Наименование
	|АВТОУПОРЯДОЧИВАНИЕ
	|";
				   
	Результат = Запрос.Выполнить();

	Возврат Результат;
	
КонецФункции // ПолучитьНастройки()

// Функция - Создать настройку
//
// Параметры:
//  СтруктураПараметров	 - Структура - параметры передачи.
// 
// Возвращаемое значение:
//  РезНастройка - сохраненая найстройка.
//
Функция СоздатьНастройку(СтруктураПараметров) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СпрОб = Справочники.бит_СохраненныеНастройки.СоздатьЭлемент();
	СпрОб.Наименование        = СтруктураПараметров.НаименованиеНастройки;
	СпрОб.ТипНастройки        = СтруктураПараметров.ТипНастройки;
	СпрОб.НастраиваемыйОбъект = СтруктураПараметров.НастраиваемыйОбъект;
	СпрОб.Ответственный       = СтруктураПараметров.Ответственный;
	СпрОб.КлючНастройки       = Строка(Новый УникальныйИдентификатор());
	
	// КлючОбъекта
	Если СтруктураПараметров.ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.НастройкиПанелиИндикаторов 
		ИЛИ СтруктураПараметров.ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.Обработки 
		ИЛИ СтруктураПараметров.ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.Отчеты Тогда
		
		СпрОб.КлючОбъекта = Справочники.бит_СохраненныеНастройки.СформироватьКлючОбъекта(СтруктураПараметров.НастраиваемыйОбъект);
		
	КонецЕсли; 
	
	// СтруктураНастройки
	Если СтруктураПараметров.ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.НастройкиПанелиИндикаторов 
		ИЛИ СтруктураПараметров.ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.Обработки 
		ИЛИ СтруктураПараметров.ТипНастройки = Перечисления.бит_ТипыСохраненныхНастроек.Отчеты Тогда
	
		СпрОб.ХранилищеНастроек = Новый ХранилищеЗначения(СтруктураПараметров.СтруктураНастройки);
	
	КонецЕсли; 
	
	флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОб,,"Ошибки");
	
	Если флДействиеВыполнено Тогда
	   	РезНастройка = СпрОб.Ссылка; 
	Иначе	
	   	РезНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();
	КонецЕсли; 
 	
	УстановитьПривилегированныйРежим(Ложь); 	
	
	Возврат РезНастройка;
	
КонецФункции // СоздатьНастройку()

// Функция упаковывает реквизиты шапки объекта в структуру.
//
// Параметры:
//  Контейнер		 - Произвольный	 - контейнер реквизитов.
//  МетаОбъект		 - ОбъектМетаданных	 - метаданные объекта.
//  МассивИсключений - Массив	 - массив исключений.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
//
Функция УпаковатьРеквизиты(Контейнер,МетаОбъект,МассивИсключений = Неопределено) Экспорт

	Если МассивИсключений = Неопределено Тогда
		
		МассивИсключений = Новый Массив;
		
	КонецЕсли;	
	
	СтруктураНастроек = Новый Структура;
	
	Для каждого Мета Из МетаОбъект.Реквизиты Цикл
		
		Если НЕ МассивИсключений.Найти(Мета.Имя) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		СтруктураНастроек.Вставить(Мета.Имя,Контейнер[Мета.Имя]);
				
	КонецЦикла; 
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьРеквизиты()

// Процедура заполняет реквизиты шапки объекта из структуры сохраненных настроек.
//
// Параметры:
//  Контейнер			 - Произвольный	 - контейнер реквизитов.
//  МетаОбъект			 - ОбъектМетаданных	 - метаданные объекта.
//  СтруктураНастроек	 - Структура	 - структура настроек.
//  МассивИсключений	 - Массив	 - массив исключений.
//
Процедура РаспаковатьРеквизиты(Контейнер,МетаОбъект,СтруктураНастроек,МассивИсключений = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если МассивИсключений = Неопределено Тогда
		
		МассивИсключений = Новый Массив;
		
	КонецЕсли;	
	
	Для каждого Мета Из МетаОбъект.Реквизиты Цикл
		
		Если НЕ МассивИсключений.Найти(Мета.Имя) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Если СтруктураНастроек.Свойство(Мета.Имя) Тогда
			
			Контейнер[Мета.Имя] = СтруктураНастроек[Мета.Имя];
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры // РаспаковатьРеквизиты()

// Функция получает настройку по умолчанию для данного варианта.
//
// Параметры:
//  СтруктураПараметров	 - 	Структура - структура параметров.
// 
// Возвращаемое значение:
//  НастройкаПоУмолчанию - СправочникСсылка.бит_СохраненныеНастройки.
//
Функция ПолучитьНастройкуПоУмолчанию(СтруктураПараметров) Экспорт

	НастройкаПоУмолчанию = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();
	
	Результат = ПолучитьНастройки(СтруктураПараметров);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 НастройкаПоУмолчанию = Выборка.Ссылка;
	
	КонецЦикла; 

	Возврат НастройкаПоУмолчанию;
	
КонецФункции // ПолучитьНастройкуПоУмолчанию()

#КонецОбласти

#Область Служебныйпрограммныйинтерфейс

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючОбъекта", "бит_ОборотноСальдоваяВедомость_Управленческий_Построитель");
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_СохраненныеНастройки.Ссылка,
	|	бит_СохраненныеНастройки.КлючОбъекта
	|ИЗ
	|	Справочник.бит_СохраненныеНастройки КАК бит_СохраненныеНастройки
	|ГДЕ
	|	бит_СохраненныеНастройки.КлючОбъекта = &КлючОбъекта
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПравельныйКлючОбъекта = "Отчет." + Выборка.КлючОбъекта;
		
		СпрОбъект.КлючОбъекта 		  = ПравельныйКлючОбъекта;
		СпрОбъект.НастраиваемыйОбъект = ПравельныйКлючОбъекта;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СпрОбъект);
	КонецЦикла;

КонецПроцедуры // ОбработатьДанныеДляПереходаНаНовуюВерсию()

#КонецОбласти 

#КонецЕсли
