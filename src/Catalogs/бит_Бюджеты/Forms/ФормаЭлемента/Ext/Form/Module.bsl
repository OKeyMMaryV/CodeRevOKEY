
#Область ОписаниеПеременных

&НаСервере
Перем мРезультатСтатьиСчета Экспорт; // Хранит статьи и счета объекта копирования.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ЕстьМеханизмБалансовогоУчета = бит_Бюджетирование.ЕстьМеханизмБалансовогоУчета();
	Элементы.СтраницаСчетаБюджета.Видимость = ЕстьМеханизмБалансовогоУчета;
	УстановитьОтборПоВладельцу();
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Справочники.бит_СтатьиБюджета) Тогда
		Элементы.СтатьиБюджетаУдалитьСтатьюНепосредственно.Видимость = Ложь;
		Элементы.СтатьиБюджетаКонтекстноеМенюУдалитьСтатьюНепосредственно.Видимость = Ложь;
    КонецЕсли;
	
	Если НЕ ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Справочники.бит_СчетаБюджета) Тогда
		Элементы.СчетаБюджетаУдалитьСчетНепосредственно.Видимость = Ложь;
		Элементы.СчетаБюджетаКонтекстноеМенюУдалитьСчетНепосредственно.Видимость = Ложь;
    КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ПодключитьОбработчикОжидания("ПриОткрытииЗавершение", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПриОткрытииЗавершение();
	
	Если ЕстьМеханизмБалансовогоУчета Тогда
		ТекстВопроса = НСтр("ru = 'Выполнить копирование статей и счетов бюджета?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Выполнить копирование статей бюджета?'");
	КонецЕсли;
	ТекстВопроса = СтрШаблон(НСтр("ru = '%1
		|Бюджет будет при этом записан.'"), ТекстВопроса);
	
	Оповещение = Новый ОписаниеОповещения("ВопросКопированиеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗадатьВопросКопирования = Ложь;
	Иначе
		ЗначениеКопирования = ПредопределенноеЗначение("Справочник.бит_Бюджеты.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ПроверитьЗаполнение() Тогда
			ЗадатьВопросКопирования = Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
		Исключение
			ЗадатьВопросКопирования = Истина;
			ТекстСообщения = НСтр("ru = 'Не удалось записать бюджет.
			|%1'"); 
			ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		СкопироватьПодчиненныеСправочники();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = "бит_ЗаполнениеПоГруппеСтатейОборотов" Тогда
		Добавленные = НайтиДобавленнуюГруппу(Параметр);
		Для каждого ДобавленныйЭлемент Из Добавленные Цикл
			Элементы.СтатьиБюджета.Развернуть(ДобавленныйЭлемент, Истина);
		КонецЦикла; 
	ИначеЕсли ИмяСобытия = "ЗаписьСтатьиБюджета" Тогда
		Если Параметр.Свойство("Бюджет")
			И Параметр.Бюджет = Объект.Ссылка Тогда
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьОтборПоВладельцу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗадатьВопросКопирования Тогда
		Если ЕстьМеханизмБалансовогоУчета Тогда
			ТекстВопроса = НСтр("ru = 'Повторить попытку копирования статей и счетов бюджета?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Повторить попытку копирования статей бюджета?'");
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ВопросКопированиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	ИначеЕсли ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		СкопироватьПодчиненныеСправочники();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
	
	    Объект.НаименованиеПолное = ВыбранноеЗначение;
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить(); 	
	Элемент.СписокВыбора.Добавить(Объект.Наименование);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатьиБюджета

&НаКлиенте
Процедура СтатьиБюджетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(,НСтр("ru='Элемент еще не записан.'"));
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СчетаБюджетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если Параметры.Ключ.Пустая() Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(,НСтр("ru='Элемент еще не записан.'"));
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СтатьиБюджетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	НоваяСтатьяБюджета = ВыбранныйЭлементСтруктуры(ВыбранноеЗначение);				
	
	Если ЗначениеЗаполнено(НоваяСтатьяБюджета) Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.бит_СтатьиБюджета"));
		Элементы.СтатьиБюджета.ТекущаяСтрока = НоваяСтатьяБюджета;		
		Элементы.СтатьиБюджета.Развернуть(Элементы.СтатьиБюджета.ТекущаяСтрока, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаБюджетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	НовыйСчетБюджета = ВыбранныйСчетБюджета(ВыбранноеЗначение, Объект.Ссылка, ТекущийСчет, ТекущаяГруппаСчетов);
	
	Если ЗначениеЗаполнено(НовыйСчетБюджета) Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.бит_СчетаБюджета"));
		Элементы.СчетаБюджета.ТекущаяСтрока = НовыйСчетБюджета;		
	КонецЕсли;
	   
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборСтатейБюджета(Команда)
	
	ПроверитьВозможностьДобавленияЭлементов(Новый ОписаниеОповещения("ПодборСтатейБюджетаОкончание", ЭтотОбъект));
	
КонецПроцедуры 

// Процедура окончание процедуры "ПодборСтатейБюджета".
// 
&НаКлиенте 
Процедура ПодборСтатейБюджетаОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.СтатьиБюджета.ТекущиеДанные;
	ТекущаяСтатья 		= ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	ТекущаяГруппаСтатей = Неопределено;
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.ТипБюджета);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ОткрытьФорму("Справочник.бит_СтатьиОборотов.ФормаВыбора", ПараметрыФормы, Элементы.СтатьиБюджета);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ЗаполнитьПоГруппеСтатейОборотов" 
// коммандной панели "СтатьиБюджетаКоманднаяПанель".
// 
&НаКлиенте
Процедура ЗаполнитьПоГруппеСтатейОборотов(Команда)
	
	ПроверитьВозможностьДобавленияЭлементов(Новый ОписаниеОповещения("ЗаполнитьПоГруппеСтатейОборотовОкончание", ЭтотОбъект));
	
КонецПроцедуры

// Процедура окончание процедуры "ЗаполнитьПоГруппеСтатейОборотов".
// 
&НаКлиенте 
Процедура ЗаполнитьПоГруппеСтатейОборотовОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	// Определим в какой группе следует создавать статьи бюджета.
	 Группа = ПолучитьГруппуСтатейБюджетов(Элементы.СтатьиБюджета.ТекущаяСтрока);
	
	// Открываем форму заполнения.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Группа", Группа);
	ПараметрыФормы.Вставить("Бюджет", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РежимВыбора"		, Истина);
	ОткрытьФорму("Справочник.бит_Бюджеты.Форма.ФормаЗаполненияПоГруппе", ПараметрыФормы, Элементы.СтатьиБюджета);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПодборСчетовБюджета" 
// коммандной панели "СчетаБюджетаКоманднаяПанель".
// 
&НаКлиенте
Процедура ПодборСчетовБюджета(Команда)
	
	ПроверитьВозможностьДобавленияЭлементов(Новый ОписаниеОповещения("ПодборСчетовБюджетаОкончание", ЭтотОбъект));
	
КонецПроцедуры
      
// Процедура окончание процедуры "ПодборСчетовБюджета".
// 
&НаКлиенте 
Процедура ПодборСчетовБюджетаОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.СчетаБюджета.ТекущиеДанные;
	ТекущийСчет   = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	ТекущаяГруппаСчетов = Неопределено;
	
	Отбор = Новый Структура; 
	Отбор.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("ПланСчетов.бит_Бюджетирование.ФормаВыбора", ПараметрыФормы, Элементы.СчетаБюджета);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтатьюНепосредственно(Команда)
	
	ТекущиеДанные = Элементы.СтатьиБюджета.Выделенныестроки;
	Если ТекущиеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	Оповещение = Новый ОписаниеОповещения("УдалитьСтатьюНепосредственноВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыОповещения);
	ТекстВопроса = НСтр("ru = 'Выделенные статьи бюджета удаляются безвозвратно. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура УдалитьСтатьюНепосредственноВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьСтатьюНепосредственноСервер(ДополнительныеПараметры.ТекущиеДанные);
		ОповеститьОбИзменении(Тип("СправочникСсылка.бит_СтатьиБюджета"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСчетНепосредственно(Команда)
	
	ТекущиеДанные = Элементы.СчетаБюджета.Выделенныестроки;
	Если ТекущиеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	Оповещение = Новый ОписаниеОповещения("УдалитьСчетНепосредственноВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыОповещения);
	ТекстВопроса = НСтр("ru = 'Выделенные счета удаляются безвозвратно. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет); 
	
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура УдалитьСчетНепосредственноВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьСчетНепосредственноСервер(ДополнительныеПараметры.ТекущиеДанные);
		ОповеститьОбИзменении(Тип("СправочникСсылка.бит_СчетаБюджета"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере  
Процедура УстановитьОтборПоВладельцу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СтатьиБюджета, "Владелец", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно, , Истина, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СчетаБюджета, "Владелец", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно, , Истина, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОтборУстановлен = Истина;
	
КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(Объект.НаименованиеПолное) 
	 ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет записан ли элемент справочника бит_Бюджеты, если он новый
// перед началом добавления строк в табличные части.
// 
&НаКлиенте
Процедура ПроверитьВозможностьДобавленияЭлементов(Оповещение)

	Если Параметры.Ключ.Пустая() Тогда
		
		ОповещениеВопрос = Новый ОписаниеОповещения("ОбработкаВопроса", ЭтотОбъект, Оповещение); 
		ТекстВопроса = НСтр("ru='Элемент еще не записан. Записать?'");
		ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ОкОтмена);
	Иначе	
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработка вопроса пользователю.
// 
&НаКлиенте 
Процедура ОбработкаВопроса(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Разрешено = Записать();
		Если Разрешено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеДанные);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура получает группу текущей статьи бюджета
// либо возвращает пустую ссылку.
// 
// Параметры:
//  СтатьяБюджета  - СправочникСсылка.бит_СтатьиБюджета - текущая статья бюджета.
// 
// Возращаемое значение:
//  СправочникСсылка.бит_СтатьиБюджета - группа статей бюджета.
// 
&НаСерверебезКонтекста
Функция ПолучитьГруппуСтатейБюджетов(СтатьяБюджета)
	
	Если СтатьяБюджета <> Неопределено Тогда
		
		Если СтатьяБюджета.ЭтоГруппа Тогда
			Группа = СтатьяБюджета.Ссылка;
		ИначеЕсли ЗначениеЗаполнено(СтатьяБюджета.Родитель) Тогда
			Группа = СтатьяБюджета.Родитель; 
		КонецЕсли; 
		
	Иначе
		Группа = Справочники.бит_СтатьиБюджета.ПустаяСсылка();
	КонецЕсли;  
	
	Возврат Группа;
	
КонецФункции
	
// Функция формирует параметры формы выбора.
// 
// Возвращаемое значение:
//   Структура   - параметры.
// 
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(ТипБюджета)
	
	Возврат бит_ОбщегоНазначения.ПолучитьПараметрыФормыВыбораСтатейОборотов(ТипБюджета); 	
	
КонецФункции

// Функция выполняет поиск добавленных групп.
// 
// Параметры:
//   Парам - Структура
// 
// Возвращаемое значение:
//  Добавленные - Массив.
// 
&НаСервере
Функция НайтиДобавленнуюГруппу(Парам)

	Добавленные = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бюджет", Объект.Ссылка);
	Запрос.УстановитьПараметр("СтатьяОборотов", Парам.ГруппаСтатей);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бит_СтатьиБюджета.Ссылка КАК СтатьяБюджета
	|ИЗ
	|	Справочник.бит_СтатьиБюджета КАК бит_СтатьиБюджета
	|ГДЕ
	|	бит_СтатьиБюджета.Владелец = &Бюджет
	|	И бит_СтатьиБюджета.СтатьяОборотов = &СтатьяОборотов";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		 Добавленные.Добавить(Выборка.СтатьяБюджета);
	КонецЦикла; 

	Возврат Добавленные;
	
КонецФункции

&НаКлиенте 
Процедура СкопироватьПодчиненныеСправочники()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Источник", ЗначениеКопирования);
	ПараметрыПроцедуры.Вставить("Приемник", Объект.Ссылка);
	ДлительнаяОперация = ПараметрыКопированияСправочника(ПараметрыПроцедуры, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Если ЕстьМеханизмБалансовогоУчета Тогда
		ТекстСообщения = НСтр("ru = 'Копирование статей и счетов бюджета'");
	Иначе	
		ТекстСообщения = НСтр("ru = 'Копирование статей бюджета'");
	КонецЕсли;
	ПараметрыОжидания.ТекстСообщения = ТекстСообщения; 
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьПодчиненныеСправочникиЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры
 
// Функция устанавливает параметры и запускает выполнение процедуры в фоновом задании. 
//
// Параметры:
//  ПараметрыПроцедуры - Структура - Параметр копирования бюджета:
//   * Источник - СправочникСсылка.бит_Бюджеты	 - Ссылка на бюджет источник копирования.
//   * Приемник - СправочникСсылка.бит_Бюджеты	 - Ссылка на бюджет приемник.
//  УникальныйИдентификатор	 - УникальныйИдентификатор	 - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                     "Выполнено", если задание было успешно выполнено;
//                                     "Ошибка", если задание завершено с ошибкой;
//                                     "Отменено", если задание отменено пользователем или администратором.
//   * ИдентификаторЗадания - УникальныйИдентификатор - если Статус = "Выполняется", то содержит 
//                                     идентификатор запущенного фонового задания.
//   * АдресРезультата       - Строка - адрес временного хранилища, в которое будет
//                                     помещен (или уже помещен) результат работы процедуры.
//   * АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//                                     содержит адрес дополнительного временного хранилища,
//                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//   * КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//   * ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//
&НаСервереБезКонтекста
Функция ПараметрыКопированияСправочника(Параметры, УникальныйИдентификатор)

  НаименованиеЗадания = НСтр("ru = 'Копирование элемента справочника ""Бюджеты (БИТ)"".'");
  ВыполняемыйМетод = "Справочники.бит_Бюджеты.СкопироватьПодчиненныеСправочники";
  
  ПараметрыПроцедуры = Справочники.бит_Бюджеты.НовыеПараметрыКопированияБюджета();
  ЗаполнитьЗначенияСвойств(ПараметрыПроцедуры, Параметры);
  
  // Заполнение пераметов длительной операции.
  ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
  ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
  
  Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыПроцедуры, ПараметрыВыполнения);

КонецФункции
  
// Процедура оповещения завершения длительной операции копирования.
//
// Параметры:
//  Результат				 - Структура	 - См. общий модуль ДлительныеОпрации.
//  ДополнительныеПараметры	 - Произвольный	 - произвольные данные, переданные в обработку оповещения.
//
&НаКлиенте
Процедура СкопироватьПодчиненныеСправочникиЗавершение(Результат, ДополнительныеПараметры) Экспорт

  Если Результат = Неопределено Тогда
    Возврат;
  КонецЕсли;
  
  Если Результат.Статус = "Ошибка" Тогда
	  ЗадатьВопросКопирования = Истина;
	  ТекстСообщения = НСтр("ru = 'Ошибка при выполнении копирования: %1'"); 
	  ТекстСообщения = СтрШаблон(ТекстСообщения, Результат.КраткоеПредставлениеОшибки);
	  ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	  Модифицированность = Истина;
  Иначе
	  ЗначениеКопирования = ПредопределенноеЗначение("Справочник.бит_Бюджеты.ПустаяСсылка");
	  // Обновить все динамические списки.
	  Элементы.СтатьиБюджета.Обновить();
	  Элементы.СтатьиБюджета.Развернуть(Элементы.СтатьиБюджета.ТекущаяСтрока, Истина);
	  Элементы.СчетаБюджета.Обновить();
	  Элементы.СчетаБюджета.Развернуть(Элементы.СчетаБюджета.ТекущаяСтрока, Истина);
  КонецЕсли; 
  
КонецПроцедуры

&НаСервере
Функция ВыбранныйЭлементСтруктуры(СтатьяОборотов)
	
	// Один раз определим группу, в которую нужно положить новый элемент.
	Если ТекущаяГруппаСтатей = Неопределено Тогда
		Если ТекущаяСтатья <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущаяСтатья) Тогда
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтатья, "ЭтоГруппа, Родитель");
				Если Реквизиты.ЭтоГруппа Тогда
					ТекущаяГруппаСтатей = ТекущаяСтатья;
				Иначе
					ТекущаяГруппаСтатей = Реквизиты.Родитель;
				КонецЕсли; 
			Иначе
				ТекущаяГруппаСтатей = ТекущаяСтатья;
			КонецЕсли; 
		Иначе
			ТекущаяГруппаСтатей = Справочники.бит_СтатьиБюджета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли; 
	
	ПараметрыЗаполнения = Справочники.бит_СтатьиБюджета.НовыеПараметрыЗаполненияПоГруппеСтатейБюджета();
	ПараметрыЗаполнения.Вставить("Бюджет",			Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("ГруппаСтруктуры",	ТекущаяГруппаСтатей);
	ПараметрыЗаполнения.Вставить("ГруппаСтатей",	СтатьяОборотов);
	ПараметрыЗаполнения.Вставить("Коэффициент",		0);
	
	Справочники.бит_СтатьиБюджета.ЗаполнитьПоГруппеСтатейБюджета(ПараметрыЗаполнения, АдресВХранилище);	
	
	Результат 		   = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДобавленныеОбъекты = Результат.ДобавленныеОбъекты;
	Ошибки 			   = Результат.Ошибки;
	
	Если ДобавленныеОбъекты.Количество() = 0 Тогда
		ЭлементСтруктуры = Справочники.бит_СтатьиБюджета.ПустаяСсылка();
	Иначе
		ЭлементСтруктуры = ДобавленныеОбъекты.Получить(ДобавленныеОбъекты.ВГраница());
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

	Возврат ЭлементСтруктуры;
	
КонецФункции

&НаСерверебезКонтекста
Функция ВыбранныйСчетБюджета(Счет, Бюджет, ТекущийСчет, ТекущаяГруппаСчетов)

	// Один раз определим группу, в которую нужно положить новый элемент.
	Если ТекущаяГруппаСчетов = Неопределено Тогда
		Если ТекущийСчет <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекущийСчет) Тогда
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийСчет, "ЭтоГруппа, Родитель");
				Если Реквизиты.ЭтоГруппа Тогда
					ТекущаяГруппаСчетов = ТекущийСчет;
				Иначе
					ТекущаяГруппаСчетов = Реквизиты.Родитель;
				КонецЕсли; 
			Иначе
				ТекущаяГруппаСчетов = ТекущийСчет;
			КонецЕсли; 
		Иначе
			ТекущаяГруппаСчетов = Справочники.бит_СчетаБюджета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Счет);
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бит_Бюджетирование.Ссылка КАК Счет,
	|	бит_Бюджетирование.Код КАК Кодификатор,
	|	бит_Бюджетирование.Наименование КАК Наименование,
	|	бит_Бюджетирование.НаименованиеПолное КАК НаименованиеПолное
	|ПОМЕСТИТЬ ВТБюджетирование
	|ИЗ
	|	ПланСчетов.бит_Бюджетирование КАК бит_Бюджетирование
	|ГДЕ
	|	бит_Бюджетирование.Ссылка В(&Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_СчетаБюджета.Ссылка КАК Ссылка,
	|	бит_СчетаБюджета.Счет КАК Счет
	|ПОМЕСТИТЬ ВТСчетаБюджета
	|ИЗ
	|	Справочник.бит_СчетаБюджета КАК бит_СчетаБюджета
	|ГДЕ
	|	бит_СчетаБюджета.Счет В(&Ссылка)
	|	И бит_СчетаБюджета.Владелец = &Бюджет
	|	И НЕ бит_СчетаБюджета.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТБюджетирование.Счет КАК Счет,
	|	ВТБюджетирование.Кодификатор КАК Кодификатор,
	|	ВТБюджетирование.Наименование КАК Наименование,
	|	ВТБюджетирование.НаименованиеПолное КАК НаименованиеПолное,
	|	ВТСчетаБюджета.Счет ЕСТЬ NULL КАК МожноСкопировать
	|ИЗ
	|	ВТБюджетирование КАК ВТБюджетирование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСчетаБюджета КАК ВТСчетаБюджета
	|		ПО ВТБюджетирование.Счет = ВТСчетаБюджета.Счет";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ДобавленныеОбъекты = Новый Массив(); 		
	ДанныеЗаполнения   = Новый Структура; 
	
	ДанныеЗаполнения.Вставить("Счет");
	ДанныеЗаполнения.Вставить("Владелец",		 	Бюджет);
	ДанныеЗаполнения.Вставить("Родитель",		 	ТекущаяГруппаСчетов);
	ДанныеЗаполнения.Вставить("Наименование",		"");
	ДанныеЗаполнения.Вставить("НаименованиеПолное",	"");
	ДанныеЗаполнения.Вставить("Коэффициент",		1);
	ДанныеЗаполнения.Вставить("Кодификатор",		"");
	
	Ошибки = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Выборка.МожноСкопировать Тогда
			ТекстОшибки = НСтр("ru = 'Счет ""%1"" уже подобран в бюджет ""%2"".'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.Счет, Бюджет);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстОшибки, "");
			Продолжить;
		КонецЕсли;
		СчетБюджета = Справочники.бит_СчетаБюджета.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ЗаполнитьЗначенияСвойств(СчетБюджета, ДанныеЗаполнения);
		СчетБюджета.УстановитьНовыйКод();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СчетБюджета, Истина);
		ДобавленныеОбъекты.Добавить(СчетБюджета.Ссылка);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Если ДобавленныеОбъекты.Количество() = 0 Тогда
		ЭлементСтруктуры = Справочники.бит_СчетаБюджета.ПустаяСсылка();
	Иначе
		ЭлементСтруктуры = ДобавленныеОбъекты.Получить(ДобавленныеОбъекты.ВГраница());
	КонецЕсли;
	
	Возврат ЭлементСтруктуры;
 		
КонецФункции

&НаСервереБезКонтекста 
Процедура УдалитьСтатьюНепосредственноСервер(ТекущиеДанные)
	
	Результат = ОбщегоНазначенияВызовСервера.ЕстьСсылкиНаОбъект(ТекущиеДанные);
	Если Результат = Ложь Тогда
		Для каждого Статья Из ТекущиеДанные Цикл
			УдалитьСтатьюБюджета(Статья);
		КонецЦикла;
	Иначе
		Ошибки = Неопределено;
		Для каждого Статья Из ТекущиеДанные Цикл
			Результат = ОбщегоНазначенияВызовСервера.ЕстьСсылкиНаОбъект(Статья);
			Если Результат = Ложь Тогда
				УдалитьСтатьюБюджета(Статья);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не получилось удалить статью ""%1"". Ссылка на статью бюджета используется в других объекта системы.
				|Обратитесь к администратору базы.'"), Статья);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,"",ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСтатьюБюджета(ТекущиеДанные)
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.бит_СтатьиБюджета");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущиеДанные);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		СтатьяБюджетаОб = ТекущиеДанные.ПолучитьОбъект();
		СтатьяБюджетаОб.Заблокировать();
		СтатьяБюджетаОб.Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста 
Процедура УдалитьСчетНепосредственноСервер(ТекущиеДанные)
	
	Результат = ОбщегоНазначенияВызовСервера.ЕстьСсылкиНаОбъект(ТекущиеДанные);
	Если Результат = Ложь Тогда
		Для каждого Счет Из ТекущиеДанные Цикл
			УдалитьСчет(Счет);
		КонецЦикла;
	Иначе
		Ошибки = Неопределено;
		Для каждого Счет Из ТекущиеДанные Цикл
			Результат = ОбщегоНазначенияВызовСервера.ЕстьСсылкиНаОбъект(Счет);
			Если Результат = Ложь Тогда
				УдалитьСчет(Счет);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не получилось удалить счет ""%1"". Ссылка на счет бюджета используется в других объекта системы.
				|Обратитесь к администратору базы.'"), Счет);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,"",ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСчет(ТекущиеДанные)
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.бит_СчетаБюджета");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущиеДанные);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		СчетБюджетаОб = ТекущиеДанные.ПолучитьОбъект();
		СчетБюджетаОб.Заблокировать();
		СчетБюджетаОб.Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма);
	
	Элементы = Форма.Элементы;
	Объект 	 = Форма.Объект;
	Элементы.ГруппаДекорацияПредупреждения.Видимость = ЕстьДублиСтатейОборотов(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДублиСтатейОборотов(Бюджет)
	
	Возврат Справочники.бит_Бюджеты.БюджетЗапрещенВПланировании(Бюджет);
	
КонецФункции

#КонецОбласти    
