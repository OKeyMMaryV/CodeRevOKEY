#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ДополнительныеСвойства);

	Если Не ЭтоНовый() И Не ПометкаУдаления = Ссылка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(ТипБюджета) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,,Нстр("ru = 'Тип бюджета'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ТипБюджета", "Объект", Отказ);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;			
	КонецЕсли; 
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ДополнительныеСвойства, Метаданные().ПолноеИмя());
	Справочники.бит_Бюджеты.ОбработатьБюджетЗапрещенКПланированию(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет статьи бюджета по группе статей оборотов.
// 
// Параметры:
//  ВерхняяГруппа  - СправочникСсылка.бит_СтатьиОборотов.
//  Бюджет         - СправочникСсылка.бит_Бюджеты.
//  РодительПоУмолчанию - СправочникСсылка.бит_СтатьиБюджета.
//  Коэффициент         - Число.
//  ВыполнятьВТранзакции- Булево.
// 
Процедура ЗаполнитьПоСтатьеОборотов(ВерхняяГруппа, Бюджет, РодительПоУмолчанию, Коэффициент, ВыполнятьВТранзакции)  Экспорт

	Если Бюджет.ТипБюджета = Перечисления.бит_ТипыБюджетов.БДДС Тогда
		ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДДС;
	ИначеЕсли Бюджет.ТипБюджета = Перечисления.бит_ТипыБюджетов.БДР Тогда
		ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.БДР;
	Иначе	
		ТипСтатьи = Перечисления.бит_ТипыСтатейОборотов.ПустаяСсылка();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РодительПоУмолчанию"	,РодительПоУмолчанию);
	Запрос.УстановитьПараметр("ВерхняяГруппа"      	,ВерхняяГруппа);
	Запрос.УстановитьПараметр("ТипСтатьи"			,ТипСтатьи);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	бит_СтатьиОборотов.Ссылка КАК Ссылка,
	|	бит_СтатьиОборотов.ЭтоГруппа КАК ЭтоГруппа,
	|	бит_СтатьиОборотов.Наименование КАК Наименование,
	|	бит_СтатьиОборотов.Кодификатор КАК Кодификатор,
	|	бит_СтатьиОборотов.НаименованиеПолное КАК НаименованиеПолное,
	|	&РодительПоУмолчанию КАК Приемник
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|ГДЕ
	|	бит_СтатьиОборотов.Ссылка В ИЕРАРХИИ(&ВерхняяГруппа)
	|	И бит_СтатьиОборотов.ЭтоГруппа = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА &ТипСтатьи = ЗНАЧЕНИЕ(Перечисление.бит_ТипыСтатейОборотов.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ бит_СтатьиОборотов.ТипСтатьи = &ТипСтатьи
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_СтатьиОборотов.Ссылка,
	|	бит_СтатьиОборотов.ЭтоГруппа,
	|	бит_СтатьиОборотов.Наименование,
	|	бит_СтатьиОборотов.Кодификатор,
	|	бит_СтатьиОборотов.НаименованиеПолное,
	|	&РодительПоУмолчанию
	|ИЗ
	|	Справочник.бит_СтатьиОборотов КАК бит_СтатьиОборотов
	|ГДЕ
	|	бит_СтатьиОборотов.Ссылка В ИЕРАРХИИ(&ВерхняяГруппа)
	|	И бит_СтатьиОборотов.ЭтоГруппа = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
				   
    Результат = Запрос.Выполнить();
	ДеревоРезультат = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию()
	КонецЕсли; 
	
	Попытка
		ОбойтиИерархиюСтатейОборотов(ДеревоРезультат,Бюджет,Коэффициент);
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Заполнение завершено.'")); 
		Справочники.бит_Бюджеты.ОбработатьБюджетЗапрещенКПланированию(Бюджет);
	Исключение
		Если ВыполнятьВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ТекстСообщения = СтрШаблон(Нстр("ru = 'Не удалось выполнить заполнение по причине: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;
	КонецПопытки; 
	
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обходит дерево статей оборотов и создает статьи бюджета.
// Рекурсивный вызов.
// 
// Параметры:
//  СтрокаВерх  - СтрокаДереваЗначений.
//  Бюджет      - СправочникСсылка.бит_Бюджеты.
//  Коэффициент - Число.
// 
Процедура ОбойтиИерархиюСтатейОборотов(СтрокаВерх,Бюджет,Коэффициент)

	Для каждого СтрокаДерева Из СтрокаВерх.Строки Цикл
		
		// Определим группу или элемент создавать
		Если СтрокаДерева.ЭтоГруппа Тогда
			// Изменение кода. Начало. 19.02.2015{{
			ЕстьЭлементы = Ложь;
			ПроверкаНаличияЭлементовУГруппы(СтрокаДерева, ЕстьЭлементы);
			Если НЕ ЕстьЭлементы Тогда
				Продолжить;
			КонецЕсли; 
			// Изменение кода. Конец. 19.02.2015}}
			СтатьяБюджета = Справочники.бит_СтатьиБюджета.СоздатьГруппу();
		Иначе
			СтатьяБюджета = Справочники.бит_СтатьиБюджета.СоздатьЭлемент();
			СтатьяБюджета.НаименованиеПолное = СтрокаДерева.НаименованиеПолное;
		КонецЕсли; 
		
		// Заполним реквизиты.
		СтатьяБюджета.Владелец       = Бюджет;
		СтатьяБюджета.СтатьяОборотов = СтрокаДерева.Ссылка;
		СтатьяБюджета.Наименование   = СокрЛП(СтрокаДерева.Наименование);
		СтатьяБюджета.Кодификатор    = СокрЛП(СтрокаДерева.Кодификатор);
		
		Если Коэффициент = 0 И Не СтрокаДерева.ЭтоГруппа Тогда
			СтатьяБюджета.Коэффициент = ?(СтатьяБюджета.СтатьяОборотов.РасходДоход = Перечисления.бит_РасходДоход.Расходование, -1, 1);
		Иначе	
			СтатьяБюджета.Коэффициент = Коэффициент;
		КонецЕсли;
						
		Если СтрокаДерева.Родитель <> Неопределено Тогда
		    // Родителя заполняем из верхней ветки дерева.
			Если ЗначениеЗаполнено(СтрокаДерева.Родитель.Приемник) 
				 И СтрокаДерева.Родитель.Приемник.ЭтоГруппа Тогда				
				СтатьяБюджета.Родитель = СтрокаДерева.Родитель.Приемник;				
			КонецЕсли; 
		Иначе
			// Если строка дерева не подчинена - то по умолчанию.
			СтатьяБюджета.Родитель = СтрокаДерева.Приемник;
		КонецЕсли; 
		
		СтатьяБюджета.УстановитьНовыйКод();
		СтатьяБюджета.ДополнительныеСвойства.Вставить("ЭтоКопирование", Истина);
		ДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СтатьяБюджета, , "Все");
		Если ДействиеВыполнено Тогда
			
			// Если запись выполнена - запомним приемник для последующего заполнения иерархии.
			СтрокаДерева.Приемник = СтатьяБюджета.Ссылка;	
			
		КонецЕсли; 
		
		// Рекурсивный вызов.
		ОбойтиИерархиюСтатейОборотов(СтрокаДерева,Бюджет,Коэффициент);
		
	КонецЦикла; 

КонецПроцедуры

// Процедура проверяет наличие элементов у группы, вызывается рекурсивно.
// 
Процедура ПроверкаНаличияЭлементовУГруппы(СтрокаДерева, ЕстьЭлементы)

	Если СтрокаДерева.ЭтоГруппа И СтрокаДерева.Строки.Количество()>0 Тогда
	
		Для каждого Строка Из СтрокаДерева.Строки Цикл
		
			Если Строка.ЭтоГруппа Тогда
				
				// Рекурсивный вызов.
				ПроверкаНаличияЭлементовУГруппы(Строка, ЕстьЭлементы)
				
			Иначе	
				ЕстьЭлементы = Истина;
			КонецЕсли; 
		
		КонецЦикла; 
		
	Иначе	
		Возврат;
	КонецЕсли; 

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Наименование = ОбъектКопирования.Наименование + " " + НСтр("ru = '(Копия)'"); 
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
