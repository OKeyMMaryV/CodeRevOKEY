#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Отбор = Параметры.Отбор;
	Если ТипЗнч(Отбор) = Тип("Структура")
		И Отбор.Свойство("ЗапрещенВПланировании") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДоступныеЗначения(
			Параметры.Отбор, Параметры.СтрокаПоиска);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура копирует статьи и счета из бюджета источника в бюджет приемник.
//
// Параметры:
//  ПараметрыКопирования - Структура - см. НовыеПараметрыКопированияБюджета.
//  АдресРезультата		 - Строка	 - Адрес временного хранилища.
//
Процедура СкопироватьПодчиненныеСправочники(ПараметрыКопирования, АдресРезультата = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыКопирования.Источник) ИЛИ НЕ ЗначениеЗаполнено(ПараметрыКопирования.Приемник) Тогда
		Возврат;	
	КонецЕсли;
	
	Справочники.бит_СтатьиБюджета.СкопироватьСтатьи(ПараметрыКопирования.Источник, ПараметрыКопирования.Приемник);
	Если бит_Бюджетирование.ЕстьМеханизмБалансовогоУчета() Тогда
		Справочники.бит_СчетаБюджета.СкопироватьСчета(ПараметрыКопирования.Источник, ПараметрыКопирования.Приемник);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Конструктор параметра функции СкопироватьПодчиненныеСправочники.
// 
// Возвращаемое значение:
//  Структура - Параметр копирования бюджета:
//   * Источник - СправочникСсылка.бит_Бюджеты	 - Ссылка на бюджет источник копирования.
//   * Приемник - СправочникСсылка.бит_Бюджеты	 - Ссылка на бюджет приемник.
//
Функция НовыеПараметрыКопированияБюджета() Экспорт
	
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("Источник", Справочники.бит_Бюджеты.ПустаяСсылка());
	ПараметрыКопирования.Вставить("Приемник", Справочники.бит_Бюджеты.ПустаяСсылка());
	
	Возврат ПараметрыКопирования;
	
КонецФункции

// Функция выполняет заполнение списка значений 
// данных выбора с учетом настроек параметров учета.
// Поддерживается параметр отбора.
// Обрабатывается также строка поиска.
//
Функция ПолучитьДоступныеЗначения(Отбор, СтрокаПоиска = "") Экспорт
	
	ДоступныеЗначения = Новый СписокЗначений;
	
	Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Бюджеты.Ссылка КАК Ссылка,
		|	Бюджеты.Представление КАК Представление,
		|	Бюджеты.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ ВТБюджеты
		|ИЗ
		|	Справочник.бит_Бюджеты КАК Бюджеты
		|ГДЕ
		|	Бюджеты.Наименование ПОДОБНО &СтрокаПоиска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТБюджеты.Ссылка КАК Ссылка,
		|	ВТБюджеты.Представление КАК Представление,
		|	ВТБюджеты.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	ВТБюджеты КАК ВТБюджеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_БюджетЗапрещенКИспользованиюВПланировании КАК БюджетЗапрещенВПланировании
		|		ПО ВТБюджеты.Ссылка = БюджетЗапрещенВПланировании.Бюджет
		|ГДЕ
		|	(БюджетЗапрещенВПланировании.Запрещен ЕСТЬ NULL
		|			ИЛИ БюджетЗапрещенВПланировании.Запрещен = ЛОЖЬ)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			СтандартнаяОбработка = Ложь;
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
					Значение = Новый Структура("Значение,ПометкаУдаления",Выборка.Ссылка,Выборка.ПометкаУдаления); 
					ДоступныеЗначения.Добавить(Значение, Выборка.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныеЗначения;
	
КонецФункции

Процедура ОбработатьБюджетЗапрещенКПланированию(Бюджет, СтатьяБюджета = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бюджет",	Бюджет);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтатьиБюджета.Владелец КАК Бюджет,
	|	КОЛИЧЕСТВО(СтатьиБюджета.СтатьяОборотов) КАК КоличествоСтатей
	|ПОМЕСТИТЬ ВТБюджеты
	|ИЗ
	|	Справочник.бит_СтатьиБюджета КАК СтатьиБюджета
	|ГДЕ
	|	СтатьиБюджета.Владелец = &Бюджет
	|	И СтатьиБюджета.СтатьяОборотов <> ЗНАЧЕНИЕ(Справочник.бит_СтатьиОборотов.ПустаяСсылка)
	|	И СтатьиБюджета.Ссылка <> &СтатьяБюджета
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиБюджета.Владелец,
	|	СтатьиБюджета.СтатьяОборотов
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СтатьиБюджета.СтатьяОборотов) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТБюджеты.Бюджет КАК Бюджет
	|ИЗ
	|	ВТБюджеты КАК ВТБюджеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БюджетЗапрещенВПланировании.Бюджет КАК Бюджет,
	|	БюджетЗапрещенВПланировании.Запрещен КАК Запрещен
	|ИЗ
	|	РегистрСведений.бит_БюджетЗапрещенКИспользованиюВПланировании КАК БюджетЗапрещенВПланировании
	|ГДЕ
	|	БюджетЗапрещенВПланировании.Бюджет = &Бюджет";

	Если ЗначениеЗаполнено(СтатьяБюджета) Тогда
		Запрос.УстановитьПараметр("СтатьяБюджета", СтатьяБюджета);
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СтатьиБюджета.Ссылка <> &СтатьяБюджета", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	
	ЕстьДублиСтатей = НЕ Результат[1].Пустой();
	Выборка = Результат[2].Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЕстьДублиСтатей <> Выборка.Запрещен Тогда
			ОбновитьЗапретКИспользованиюВПланировании(Бюджет, ЕстьДублиСтатей);
		КонецЕсли;
	Иначе
		ОбновитьЗапретКИспользованиюВПланировании(Бюджет, ЕстьДублиСтатей);
	КонецЕсли;
			
КонецПроцедуры

Функция БюджетЗапрещенВПланировании(Бюджет) Экспорт
	
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бюджет", Бюджет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_БюджетЗапрещенКИспользованиюВПланировании.Бюджет КАК Бюджет,
	|	ЕСТЬNULL(бит_БюджетЗапрещенКИспользованиюВПланировании.Запрещен, ЛОЖЬ) КАК Запрещен
	|ИЗ
	|	РегистрСведений.бит_БюджетЗапрещенКИспользованиюВПланировании КАК бит_БюджетЗапрещенКИспользованиюВПланировании
	|ГДЕ
	|	бит_БюджетЗапрещенКИспользованиюВПланировании.Бюджет = &Бюджет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Запрещен;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьЗапретКИспользованиюВПланировании(Бюджет, ЕстьДублиСтатей)
	
	Если ТранзакцияАктивна() Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.бит_БюджетЗапрещенКИспользованиюВПланировании");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Бюджет", Бюджет);
		Блокировка.Заблокировать();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.бит_БюджетЗапрещенКИспользованиюВПланировании.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Бюджет.Установить(Бюджет);
	Запись = НаборЗаписей.Добавить();
	Запись.Бюджет = Бюджет;
	Запись.Запрещен = ЕстьДублиСтатей;
	НаборЗаписей.Записать();

КонецПроцедуры	

#КонецОбласти 
#КонецЕсли