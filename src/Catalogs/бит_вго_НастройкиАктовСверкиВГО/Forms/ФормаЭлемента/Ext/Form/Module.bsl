 
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьКэшЗначений();
	
	// Имя регистра бухгалтерии
	УстановитьИмяРегистраБухгалтерии();
	УстановитьВидимостьДоступность();
	
	УстановитьПараметрыВыбораДляСчетов();
	
	// Управление отображением счетов субконто
	фКоличествоСубконто = 4;
	ОформитьСчета();
	ВосстановитьНастройкиОформленияПоСчету();
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВосстановитьНастройкиОформленияПоСчету();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("РегистрБухгалтерии");
	                                              		
	// Запомним текущие значения реквизитов формы.
	ЗаполнитьТекущиеЗначенияРеквизитовФормы();

КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(фКэшЗначений.ВидОбъектаРегистрБухгалтерии);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Объект.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", фКэшЗначений.СписокДоступныхРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);
	
КонецПроцедуры // РегистрБухгалтерииНачалоВыбора()

&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	Если Объект.РегистрБухгалтерии <> мКэшРеквизитовФормы.РегистрБухгалтерии Тогда
		
		НужноОчистить = Истина;
		Если Объект.Счета.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("РегистрБухгалтерииПриИзмененииЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru='Таблица счетов будет очищена. Продолжить?'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
			
		Иначе
			
			Если НужноОчистить Тогда 
				ИзменениеРегистраБухгалтерииСервер();
				ДобавитьВКэш("РегистрБухгалтерии");
			Иначе
				ИзвлечьИзКэша("РегистрБухгалтерии");	
			КонецЕсли;
			
		КонецЕсли;     		
				  
			
	КонецЕсли;
	
КонецПроцедуры // РегистрБухгалтерииПриИзменении()

// Процедура выполняет действия при завершении изменения реквизита "РегистрБухгалтерии".
// 
&НаКлиенте
Процедура РегистрБухгалтерииПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	НужноОчистить = Ответ = КодВозвратаДиалога.Да;
	
	Если НужноОчистить Тогда 
		ИзменениеРегистраБухгалтерииСервер();
		ДобавитьВКэш("РегистрБухгалтерии");
	Иначе
		ИзвлечьИзКэша("РегистрБухгалтерии");	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчета

&НаКлиенте
Процедура СчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		
		НоваяСтрока = Объект.Счета.Добавить();
		НоваяСтрока.Счет = Элементы.СчетаСчет.ДоступныеТипы.ПривестиЗначение(НоваяСтрока.Счет);
				
		Элементы.Счета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	КонецЕсли;
	
КонецПроцедуры // СчетаПередНачаломДобавления()

&НаКлиенте
Процедура СчетаСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ПланСчетовСуществет(ИмяПланаСчетов) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Счета.ТекущиеДанные;
	Если ТекущиеДанные.Счет = Неопределено Тогда
		ТекущиеДанные.Счет = Элемент.ДоступныеТипы.ПривестиЗначение(ТекущиеДанные.Счет);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущиеДанные.Счет);
	ОткрытьФорму("ПланСчетов." + ИмяПланаСчетов + ".ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Счета.ТекущиеДанные;
	УстановитьПараметрыОформленияПоСчету(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // СчетаСчетПриИзменении()

&НаКлиенте
Процедура СчетаРазрешеноВыбиратьСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Счета.ТекущиеДанные;
	
	ИмяТекущего = Элемент.Имя;
	Если Не ТекущиеДанные[СтрЗаменить(ИмяТекущего, "Счета", "")] Тогда
		ИмяРеквизита = "ПроверкаЗаполненияСубконто_" + СтрЗаменить(ИмяТекущего, "СчетаРазрешеноВыбиратьСубконто_", "");
	    ТекущиеДанные[ИмяРеквизита] = Ложь;	
	КонецЕсли;
		
КонецПроцедуры // СчетаРазрешеноВыбиратьСубконтоПриИзменении()

&НаКлиенте
Процедура СчетаПроверкаЗаполненияСубконтоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Счета.ТекущиеДанные;
	
	ИмяТекущего = Элемент.Имя;
	Если ТекущиеДанные[СтрЗаменить(ИмяТекущего, "Счета", "")] Тогда
		ИмяРеквизита = "РазрешеноВыбиратьСубконто_" + СтрЗаменить(ИмяТекущего, "СчетаПроверкаЗаполненияСубконто_", "");
	    ТекущиеДанные[ИмяРеквизита] = Истина;	
	КонецЕсли;
		
КонецПроцедуры // СчетаПроверкаЗаполненияСубконтоПриИзменении()

&НаКлиенте
Процедура СчетаЭтоСчетРасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Счета.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоСчетРасчетов Тогда
		ТекущиеДанные.ЭтоСчетОплаты = Ложь;
	КонецЕсли;
		
КонецПроцедуры // СчетаЭтоСчетРасчетовПриИзменении()

&НаКлиенте
Процедура СчетаЭтоСчетОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Счета.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоСчетОборотов Тогда
		ТекущиеДанные.ЭтоСчетОплаты = Ложь;
	КонецЕсли;
		
КонецПроцедуры // СчетаЭтоСчетОборотовПриИзменении()

&НаКлиенте
Процедура СчетаЭтоСчетОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Счета.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоСчетОплаты Тогда
		ТекущиеДанные.ЭтоСчетРасчетов = Ложь;
		ТекущиеДанные.ЭтоСчетОборотов = Ложь;
	КонецЕсли;
	
КонецПроцедуры // СчетаЭтоСчетОплатыПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаФлажкиКолонкиУстановить(Команда)
	
	ИзменитьФлажкиДляКолонки(1);
	
КонецПроцедуры
   
&НаКлиенте
Процедура КомандаФлажкиКолонкиСнять(Команда)
	
	ИзменитьФлажкиДляКолонки(2);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаФлажкиКолонкиИнвертировать(Команда)
	
	ИзменитьФлажкиДляКолонки(3);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСчетРасчета(Команда)
	
	ИзменитьОсновнойПризнак("ЭтоСчетРасчетов");
	
КонецПроцедуры // КомандаСчетРасчета()

&НаКлиенте
Процедура КомандаСчетОборотов(Команда)
	
	ИзменитьОсновнойПризнак("ЭтоСчетОборотов");	
	
КонецПроцедуры // КомандаСчетОборотов()

&НаКлиенте
Процедура КомандаСчетОплаты(Команда)
	
	ИзменитьОсновнойПризнак("ЭтоСчетОплаты");	
	
КонецПроцедуры // КомандаСчетОплаты()

&НаКлиенте
Процедура КомандаЗагрузитьПодчиненные(Команда)
	
	ТекущиеДанные = Элементы.Счета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Счет) Тогда
		Возврат;	
	КонецЕсли;
	
	ДобавитьПодчиненныеСтроки(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // КомандаЗагрузитьПодчиненные()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКэшемРеквизитовФормы

// Процедура заполняет кэш реквизитов формы данными объекта.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ЗаполнитьТекущиеЗначенияРеквизитовФормы()
	
	Для Каждого КлючИЗначение Из мКэшРеквизитовФормы Цикл
		мКэшРеквизитовФормы[КлючИЗначение.Ключ] = Объект[КлючИЗначение.Ключ];
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТекущиеЗначенияРеквизитовФормы()

// Процедура добавляет в кэш реквизитов текущее значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ДобавитьВКэш(ИмяРеквизита)
	
	мКэшРеквизитовФормы[ИмяРеквизита] = Объект[ИмяРеквизита];	
	
КонецПроцедуры // ДобавитьВКэш()

// Процедура извлекает из кэша и присваивает объекту значение заданного реквизита.
// 
// Параметры:
// 	ИмяРеквизита - Строка.
// 
&НаКлиенте
Процедура ИзвлечьИзКэша(ИмяРеквизита)
	
	Объект[ИмяРеквизита] = мКэшРеквизитовФормы[ИмяРеквизита];
	
КонецПроцедуры // ИзвлечьИзКэша()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура меняет флажки для текущей колонки.
// 
// Параметры:
//  ВариантИзменения - Число
// 
&НаКлиенте
Процедура ИзменитьФлажкиДляКолонки(ВариантИзменения)

	ТекущееПолеФормы = Элементы.Счета.ТекущийЭлемент;
	Если ТекущееПолеФормы.Вид = ВидПоляФормы.ПолеФлажка Тогда
		
		ИмяПоля = СтрЗаменить(ТекущееПолеФормы.Имя, "Счета", "");
		
		Для каждого СтрокаТабл Из Объект.Счета Цикл
			
			Если Найти(ИмяПоля, "Субконто") > 0 
				И Число(Прав(ИмяПоля, 1)) > СтрокаТабл.КоличествоДоступныхСубконто Тогда
				Продолжить;	
			КонецЕсли;
		
			Если ВариантИзменения = 1 Тогда
				СтрокаТабл[ИмяПоля] = Истина;
			ИначеЕсли ВариантИзменения = 2 Тогда 
				СтрокаТабл[ИмяПоля] = Ложь;
			Иначе
			    СтрокаТабл[ИмяПоля] = Не СтрокаТабл[ИмяПоля];
			КонецЕсли;                                       			 	
			
			Если СтрокаТабл[ИмяПоля] Тогда
				Если ИмяПоля = "ЭтоСчетРасчетов" ИЛИ ИмяПоля = "ЭтоСчетОборотов" Тогда
					СтрокаТабл.ЭтоСчетОплаты = Ложь;
				Иначе	
				    СтрокаТабл.ЭтоСчетРасчетов = Ложь;
					СтрокаТабл.ЭтоСчетОборотов = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли; 	

КонецПроцедуры // ИзменитьФлажкиДляКолонки()

// Процедура - обработчик команды "КомандаСчетРасчета".
// 
// Параметры:
//  ИмяПоля - Строка
// 
&НаКлиенте
Процедура ИзменитьОсновнойПризнак(ИмяПоля)
	
	Для каждого ИдВыделенной Из Элементы.Счета.ВыделенныеСтроки Цикл
		
		СтрокаТабл = Объект.Счета.НайтиПоИдентификатору(ИдВыделенной);
		СтрокаТабл[ИмяПоля] = Не СтрокаТабл[ИмяПоля];	
		
		Если СтрокаТабл[ИмяПоля] Тогда
			Если ИмяПоля = "ЭтоСчетРасчетов" ИЛИ ИмяПоля = "ЭтоСчетОборотов" Тогда
				СтрокаТабл.ЭтоСчетОплаты = Ложь;
			Иначе	
			    СтрокаТабл.ЭтоСчетРасчетов = Ложь;
				СтрокаТабл.ЭтоСчетОборотов = Ложь;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;	
	
КонецПроцедуры // ИзменитьОсновнойПризнак()

#КонецОбласти

#Область СерверныеПроцедурыИФункцииОбщегоНазначения

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СчетаСчет);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	
	фКэшЗначений.Вставить("ВидОбъектаРегистрБухгалтерии" , Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	фКэшЗначений.Вставить("СписокДоступныхРегистров", бит_вго_Сервер.СформироватьСписокДоступныхРегистровБухгалтерииДляСверкиВГО());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УстановитьВидимостьДоступность()
	
	ТаблицаСчетовДоступна =  ЗначениеЗаполнено(Объект.РегистрБухгалтерии);
					
	Элементы.Счета.ТолькоПросмотр 				 = Не ТаблицаСчетовДоступна;
	Элементы.СчетаКомандаСчетРасчета.Доступность = ТаблицаСчетовДоступна;
			
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаНомерСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаСчет.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Счета.ЭтоСчетРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	Для Сч = 1 По 4 Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СчетаРазрешеноВыбиратьСубконто_" + Сч);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СчетаПроверкаЗаполненияСубконто_" + Сч);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Счета.КоличествоДоступныхСубконто");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ОтборЭлемента.ПравоеЗначение = Сч;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.бит_ИтогиФонГруппы);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает имя регистра бухгалтерии.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьИмяРегистраБухгалтерии()

	Если ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		ИмяРегистраБухгалтерии = Объект.РегистрБухгалтерии.ИмяОбъекта;
		ИмяПланаСчетов = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
	Иначе
	    ИмяРегистраБухгалтерии = "";
		ИмяПланаСчетов = "";
	КонецЕсли;         	
		
КонецПроцедуры // УстановитьИмяРегистраБухгалтерии()

&НаСервереБезКонтекста
Функция ПланСчетовСуществет(ИмяПланаСчетов)
	
	Возврат (Метаданные.ПланыСчетов.Найти(ИмяПланаСчетов) <> Неопределено);
	
КонецФункции

// Процедура добавляет подчиненные счета.
// 
// Параметры:
//  Идентификатор - Число
// 
&НаСервере
Процедура ДобавитьПодчиненныеСтроки(Идентификатор)

	ТекущиеДанные = Объект.Счета.НайтиПоИдентификатору(Идентификатор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ТекущиеДанные.Счет);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТекПланСчетов.Ссылка КАК Счет,
	|	ТекПланСчетов.Родитель,
	|	ТекПланСчетов.Порядок КАК Порядок
	|ИЗ
	|	ПланСчетов." + ИмяПланаСчетов + " КАК ТекПланСчетов
	|ГДЕ
	|	ТекПланСчетов.Родитель В ИЕРАРХИИ(&Родитель)
    |
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Счета.Добавить();
		НоваяСтрока.Счет = Выборка.Счет;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , "Счет");
	    УстановитьПараметрыОформленияПоСчету(НоваяСтрока.ПолучитьИдентификатор());	
	
	КонецЦикла;

КонецПроцедуры // ДобавитьПодчиненныеСтроки()

#КонецОбласти

#Область ОформлениеСчетовИСубконто

// Процедура подсчитывает количество доступных субконто в строке тч.
// 
// Параметры:
//  Идентификатор  		   - Число
//  
&НаСервере
Процедура УстановитьПараметрыОформленияПоСчету(Идентификатор)

	ТекущиеДанные = Объект.Счета.НайтиПоИдентификатору(Идентификатор);
	
	ТекущийСчет = ТекущиеДанные.Счет;
	Если ТекущийСчет <> Неопределено Тогда
	
		// Количество доступных субконто
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекущийСчет);
		КоличествоДоступных = СвСч.КоличествоСубконто;
		ТекущиеДанные.КоличествоДоступныхСубконто = КоличествоДоступных;
		
		Для i = 1 По фКоличествоСубконто Цикл
			НомерСтр = Строка(i);
			ИмяПоля = "РазрешеноВыбиратьСубконто_" + НомерСтр;
			ТекущиеДанные[ИмяПоля] = ТекущиеДанные[ИмяПоля] И Не КоличествоДоступных < i;
			ИмяПоля = "ПроверкаЗаполненияСубконто_" + НомерСтр;
		    ТекущиеДанные[ИмяПоля] = ТекущиеДанные[ИмяПоля] И Не КоличествоДоступных < i;
		КонецЦикла;
			
	КонецЕсли;
	 	
КонецПроцедуры // УстановитьПараметрыОформленияПоСчету()

// Процедура восстанавливает настройки субконто в зависимости от счетов учета.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ВосстановитьНастройкиОформленияПоСчету()

	Для каждого СтрокаСчет Из Объект.Счета Цикл
						
		УстановитьПараметрыОформленияПоСчету(СтрокаСчет.ПолучитьИдентификатор());
		
	КонецЦикла;

КонецПроцедуры // ВосстановитьНастройкиОформленияПоСчету()


// Процедура оформляет счета в табличной части по регистру бухгалтерии.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОформитьСчета()
	
	Если Не ЗначениеЗаполнено(Объект.РегистрБухгалтерии) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипаДляСчетов = "ПланСчетовСсылка." + ИмяПланаСчетов;
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип(ИмяТипаДляСчетов));
	ОписаниеТиповСчета = Новый ОписаниеТипов(МассивТипов);
	
	Элементы.СчетаСчет.ВыбиратьТип   = Ложь;
	Элементы.СчетаСчет.ДоступныеТипы = ОписаниеТиповСчета;
	
КонецПроцедуры // ОформитьСчета()


// Процедура выполняет действия необходимые при изменении регистра бухгалтерии.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеРегистраБухгалтерииСервер()

	// Очистка табличной части
	Объект.Счета.Очистить();
	
	УстановитьИмяРегистраБухгалтерии();
	УстановитьВидимостьДоступность();
	
	ОформитьСчета();
			
КонецПроцедуры // ИзменениеРегистраБухгалтерииСервер()

#КонецОбласти

#КонецОбласти
