
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ОбъектСистемы = Параметры.ОбъектСистемы;
	ТипШаблона    = Параметры.ТипШаблона;
	
	ЭтоШаблонНомера = ТипШаблона = Перечисления.бит_ТипыШаблоновЗаполненияРеквизитов.Номер;
		
	ОбновитьДеревоРеквизитов();
	
	// Начальные значения
	СпособОбрезки  				  = "Не обрезать";
	ОграничениеКоличестваСимволов = "Не обрезать";          	
						
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьПодчиненные(1);
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоРеквизитов, ДеревоРеквизитов.ПолучитьЭлементы(), Ложь);

	СтрокиДерева = ДеревоРеквизитов.ПолучитьЭлементы();
	Если ДеревоРеквизитов.ПолучитьЭлементы().Количество() > 0 Тогда
		СтрокаДерева = СтрокиДерева[0];
		СформироватьПутьКПараметру(СтрокиДерева[0]);
		УставновитьВидимостьДоступностьЭлементов_ПоПараметру(СтрокаДерева.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособОбрезкиПриИзменении(Элемент)
	
	УставновитьВидимостьДоступностьЭлементов_ПоСпособуОбрезки();
	
КонецПроцедуры // СпособОбрезкиПриИзменении()

&НаКлиенте
Процедура ОграничениеКоличестваСимволовПриИзменении(Элемент)
	
	УставновитьВидимостьДоступностьЭлементов_ПоСпособуОбрезки();
	
КонецПроцедуры // ОграничениеКоличестваСимволовПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРеквизитов

&НаКлиенте
Процедура ДеревоРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДерева = ДеревоРеквизитов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Не СтрокаДерева.ЭтоДоступныйПараметр Тогда
		Возврат;	
	КонецЕсли;     	
	                 	
	СформироватьПутьКПараметру(СтрокаДерева);
	
	УставновитьВидимостьДоступностьЭлементов_ПоПараметру(СтрокаДерева.ПолучитьИдентификатор());
	
КонецПроцедуры // ДеревоРеквизитовВыбор()

&НаКлиенте
Процедура ДеревоРеквизитовПередРазворачиванием(Элемент, Строка, Отказ)

	ИмяЭлемента = ?(ЗначениеЗаполнено(Строка), ДеревоРеквизитов.НайтиПоИдентификатору(Строка).Имя, "");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Найти(ИмяЭлемента, "Организация") > 0 Или Найти(ИмяЭлемента, "Контрагент") > 0 Или ИмяЭлемента = "ТипДоговора" Тогда
		РазвернутьПодчиненные(Строка);
	КонецЕсли;
	
КонецПроцедуры // ДеревоРеквизитовПередРазворачиванием()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Результат = ПолучитьРезультат();
	
	Закрыть(Результат);
	
КонецПроцедуры // ОК()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура получает путь к параметру выбора.
// 
// Параметры:
//  СтрокаДерева
//  
// Возвращаемое значение:
//   Строка
// 
&НаКлиенте
Процедура СформироватьПутьКПараметру(СтрокаДерева)

	ПутьКПараметру = Неопределено;
	
	ТекущийРеквизит      = СтрокаДерева.Имя;
	СтрокаПутьКПараметру = "";
	
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		
		СтрокаПутьКПараметру = Родитель.Имя + "." + СтрокаПутьКПараметру;
		Родитель             = Родитель.ПолучитьРодителя();	
	
	КонецЦикла;
	
	ПутьКПараметру = СтрокаПутьКПараметру + ТекущийРеквизит;
	
КонецПроцедуры // СформироватьПутьКПараметру()

// Функция получает результат выбора.
// 
// Параметры:
//  СтрокаДерева
//  
// Возвращаемое значение:
//   Строка
// 
&НаКлиенте
Функция ПолучитьРезультат()
	
	Результат = ПутьКПараметру;
	
	Если ПутьКПараметру = "ПорядковыйНомер" Тогда
		
		Если ОграничениеКоличестваСимволов <> "Не обрезать" Тогда		
			Результат = "Прав(" + Результат + ", " + КоличествоСимволов + ")";	 		
		КонецЕсли;           		
		
	Иначе
		
		Если СпособОбрезки = "Слева" Тогда
		 	Результат = "Лев(" + Результат + ", " + КоличествоСимволов + ")";	
		ИначеЕсли СпособОбрезки = "Справа" Тогда
		 	Результат = "Прав(" + Результат + ", " + КоличествоСимволов + ")";	
		ИначеЕсли СпособОбрезки = "С символа №" Тогда
		 	Результат = "Сред(" + Результат + ", " + НачальныйНомерСимвола + ", " + КоличествоСимволов + ")";	
		КонецЕсли;

	КонецЕсли;
	
	Возврат "{{" + Результат + "}}";
	
КонецФункции // ПолучитьРезультат()

#Область ПервоначальноеЗаполнениеУзловДерева

// Процедура устанавливает видимость, доступность элементов формы.
// 
&НаСервере
Процедура УставновитьВидимостьДоступностьЭлементов_ПоПараметру(ИдСтроки)

	СтрокаДерева = ДеревоРеквизитов.НайтиПоИдентификатору(ИдСтроки);
	
	РазрешитьОграничениеКолСимв = ПутьКПараметру = "ПорядковыйНомер";
	//РазрешитьОбрезать = Не РазрешитьОграничениеКолСимв И Не СтрокаДерева.Тип.СодержитТип(Тип("Дата"));
	РазрешитьОбрезать = Не РазрешитьОграничениеКолСимв;
	
	Элементы.ГруппаОбрезка.Видимость 				  	   = РазрешитьОбрезать;
	Элементы.ГруппаОграниченияКоличестваСимволов.Видимость = РазрешитьОграничениеКолСимв;
	
	УставновитьВидимостьДоступностьЭлементов_ПоСпособуОбрезки();
	
КонецПроцедуры // УставновитьВидимостьДоступностьЭлементов_ПоПараметру()

// Процедура устанавливает видимость, доступность элементов формы.
// 
&НаСервере
Процедура УставновитьВидимостьДоступностьЭлементов_ПоСпособуОбрезки()
	                                                                        	 	
	Элементы.КоличествоСимволов.Видимость 	 = СпособОбрезки <> "Не обрезать" Или ОграничениеКоличестваСимволов <> "Не обрезать";
	Элементы.НачальныйНомерСимвола.Видимость = СпособОбрезки =  "С символа №";
	
КонецПроцедуры // УставновитьВидимостьДоступностьЭлементов_ПоСпособуОбрезки()

&НаСервере
Функция ПолучитьТипОбъекта(СтрокаТип = Неопределено)
	
	Если СтрокаТип = Неопределено Тогда
		
		ИмяОбъекта = ОбъектСистемы.ИмяОбъекта;
		ВидОбъекта = ОбъектСистемы.ВидОбъекта;
		ИмяТипа	   = бит_УправлениеОбъектамиСистемы.ПолучитьИмяТипаОбъекта(ИмяОбъекта, ВидОбъекта);
		
	Иначе
		
		ИмяТипа	= "СправочникСсылка." + СтрокаТип;
	
	КонецЕсли;
	
	ТипЭлемента = Новый ОписаниеТипов(ИмяТипа);
	
	Возврат ТипЭлемента;
	
КонецФункции // ПолучитьТипОбъекта()

&НаСервере
Функция ДобавитьСтрокуДерева(КоллекцияЭлементов, Синоним, Имя = Неопределено, ОписаниеТипов = Неопределено, ДобавитьПодчиненную = Ложь)
		                      
	СтрокаДерева = КоллекцияЭлементов.Добавить();
	
	СтрокаДерева.Имя 	  = Имя;
	СтрокаДерева.Синоним  = Синоним;
			
	ТекОписаниеТипов = ?(ОписаниеТипов = Неопределено, Новый ОписаниеТипов("Строка"), ОписаниеТипов);
	СтрокаДерева.Тип = ТекОписаниеТипов;
	
	Если ТекОписаниеТипов.Типы().Количество() = 1
		И (ТекОписаниеТипов.СодержитТип(Тип("Строка")) ИЛИ ТекОписаниеТипов.СодержитТип(Тип("Число")) ИЛИ ТекОписаниеТипов.СодержитТип(Тип("Дата"))) Тогда
	 	СтрокаДерева.ЭтоДоступныйПараметр = Истина;	
	КонецЕсли;
	
	// Добавление подчиненной строки по умолчанию для возможности дальнейшего раскрытия.
	Если ДобавитьПодчиненную Тогда
		
		ОписаниеСправочники = Справочники.ТипВсеСсылки();
		ОписаниеДокументы   = Документы.ТипВсеСсылки();
				
		Для каждого Тип Из ТекОписаниеТипов.Типы() Цикл
		
			Если ОписаниеСправочники.СодержитТип(Тип) ИЛИ ОписаниеДокументы.СодержитТип(Тип) Тогда
				
				КоллекцияПодчиненных = СтрокаДерева.ПолучитьЭлементы();
				НоваяСтрока = КоллекцияПодчиненных.Добавить();
				НоваяСтрока.Имя = "СлужебнаяДляРазворота";
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции // ДобавитьСтрокуДерева()

// Процедура обновляет дерево реквизитов.
// 
&НаСервере
Процедура ОбновитьДеревоРеквизитов()

	ДанныеДерева = ЭтаФорма.ДеревоРеквизитов.ПолучитьЭлементы();
	ДанныеДерева.Очистить();
	
	КоллекцияЭлементов = ДеревоРеквизитов.ПолучитьЭлементы();
	
	Если ЭтоШаблонНомера Тогда
		СтрокаДерева = КоллекцияЭлементов.Добавить();
		СтрокаДерева.Имя 	   			  = "ПорядковыйНомер";
		СтрокаДерева.Синоним   			  = "Порядковый номер";
		СтрокаДерева.Тип 	   			  = Новый ОписаниеТипов("Строка");
		СтрокаДерева.ЭтоДоступныйПараметр = Истина;
	КонецЕсли;
		
	СтрокаДерева = ДобавитьСтрокуДерева(КоллекцияЭлементов, "Текущий объект", "ТекущийОбъект", ПолучитьТипОбъекта(), Истина);
		   
КонецПроцедуры // ОбновитьДеревоРеквизитов()

#КонецОбласти

#Область РазворотУзла

&НаСервере
Процедура ДобавитьСтрокиПоДате(КоллекцияЭлементов, Имя, Синоним, ОписаниеДата)

	СтрокаДаты = ДобавитьСтрокуДерева(КоллекцияЭлементов, Синоним , Имя, ОписаниеДата, Истина);
	
	КоллекцияЭлементовДаты = СтрокаДаты.ПолучитьЭлементы();
	
	ДобавитьСтрокуДерева(КоллекцияЭлементовДаты, "Год"  , "Год"  , ОписаниеДата);
	ДобавитьСтрокуДерева(КоллекцияЭлементовДаты, "Месяц", "Месяц", ОписаниеДата);
		
КонецПроцедуры // ДобавитьСтрокиПоДате()

&НаСервере
Функция ТипВходитВДоступныеСсылочныеТипы(ТекТип)

	// ВсеСправочники = Справочники.ТипВсеСсылки();
	// ВсеДокументы   = Документы.ТипВсеСсылки();
	
	// ТипВходитВДоступные = Истина;
	
	ТипВходитВДоступные = ТекТип = Новый ОписаниеТипов("СправочникСсылка.Организации")
				Или ТекТип = Новый ОписаниеТипов("СправочникСсылка.Контрагенты")
				Или ТекТип = Новый ОписаниеТипов("СправочникСсылка.бит_ТипыДоговоров");	

	Возврат ТипВходитВДоступные;
	
КонецФункции // ТипВходитВДоступныеСсылочныеТипы()

&НаСервере
Процедура ДобавитьОписаниеРеквизитов(СтрокаДерева, ИмяКоллекции, ОписаниеКоллекции, НачалоИмениТипа)

	Если НЕ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли;
		
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	// ОписаниеЧисло  = Новый ОписаниеТипов("Число");
	ОписаниеДата   = Новый ОписаниеТипов("Дата");
		
	Для каждого Тип Из СтрокаДерева.Тип.Типы() Цикл
		
		Если ОписаниеКоллекции.СодержитТип(Тип) Тогда
			
			РезСтруктура = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоОписаниюТипов(СтрокаДерева.Тип, ИмяКоллекции, НачалоИмениТипа);
			Если РезСтруктура <> Неопределено Тогда
				
				КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
				Если КоллекцияЭлементов.Количество() > 0 Тогда
					КоллекцияЭлементов.Очистить();
				КонецЕсли;
				
				// Добавление строк дерева по умолчанию
			   	ДобавитьСтрокуДерева(КоллекцияЭлементов, "Синоним объекта", "Метаданные().Синоним");
				Если ИмяКоллекции = "Справочники" Тогда
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Код"		   , "Код", ОписаниеСтрока);
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Наименование", "Наименование", ОписаниеСтрока);
				ИначеЕсли ИмяКоллекции = "Документы" Тогда	
					ДобавитьСтрокуДерева(КоллекцияЭлементов, "Номер", "Номер"		  , ОписаниеСтрока);
					ДобавитьСтрокиПоДате(КоллекцияЭлементов, "Дата" , "Дата документа", ОписаниеДата)
				КонецЕсли; 
				
				// Добавление строк дерева из метаданных
				Для каждого Мета Из Метаданные[ИмяКоллекции][РезСтруктура.Имя].Реквизиты Цикл
					
					ТекОписаниеТипов = Мета.Тип;
					Если ТекОписаниеТипов.Типы().Количество() = 1 Тогда
						
						Если (ТекОписаниеТипов.СодержитТип(Тип("Строка")) И (ТекОписаниеТипов.КвалификаторыСтроки.Длина > 0 Или Не ЭтоШаблонНомера)) 
							Или ТекОписаниеТипов.СодержитТип(Тип("Число")) 
							Или ТипВходитВДоступныеСсылочныеТипы(Мета.Тип) Тогда
							
							ДобавитьСтрокуДерева(КоллекцияЭлементов, Мета.Синоним, Мета.Имя, Мета.Тип, Истина);
							
						ИначеЕсли ТекОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
							
							ДобавитьСтрокиПоДате(КоллекцияЭлементов, Мета.Имя, Мета.Синоним, Мета.Тип);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// СтрокаДерева.Сортировать("Синоним");
				
				Прервать;
				
			КонецЕсли; 
			
		КонецЕсли; // Есть тип
		
	КонецЦикла; // По массиву типов
 
КонецПроцедуры // ДобавитьОписаниеРеквизитов()

// Процедура добавляет в дерево подчиненные реквизиты.
// 
// Параметры:
//  ИдСтрокиДерева - Число
// 
&НаСервере
Процедура РазвернутьПодчиненные(ИдСтрокиДерева)

	Если ИдСтрокиДерева = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НайденнаяСтрокаДерева = ЭтаФорма.ДеревоРеквизитов.НайтиПоИдентификатору(ИдСтрокиДерева);
	
	ДобавитьОписаниеРеквизитов(НайденнаяСтрокаДерева, "Документы"  , Документы.ТипВсеСсылки()  , "ДокументСсылка");
	ДобавитьОписаниеРеквизитов(НайденнаяСтрокаДерева, "Справочники", Справочники.ТипВсеСсылки(), "СправочникСсылка");
			
КонецПроцедуры // РазвернутьПодчиненные()    

#КонецОбласти

#КонецОбласти
