#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура проверяет шаблон.
// 
// Параметры:
//  ШаблонСсылка - СправочникСсылка.бит_ШаблоныЗаполненияРеквизитов.
// 
Функция ПроверитьШаблон(ШаблонСсылка) Экспорт

	ТекущаяДата = ТекущаяДатаСеанса();
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ШаблонСсылка" 				, ШаблонСсылка);
	СтруктураШаблона.Вставить("ОрганизацияПоРегистру" 		, Справочники.Организации.ПустаяСсылка());
	СтруктураШаблона.Вставить("МассивОрганизацийИсключений" , Новый Массив);
	СтруктураШаблона.Вставить("ДатаНачала"	 , ТекущаяДата);
	СтруктураШаблона.Вставить("ДатаОкончания", ТекущаяДата);
		
	Результат = ЗаполнитьРеквизитПоШаблону(СтруктураШаблона, , Истина);	
					
	Возврат Результат;

КонецФункции // ПроверитьШаблон()

// Процедура заполняет структуру шаблона.
// 
// Параметры:
//  ДанныеОбъекта 			- ДанныеФормыСтруктура.
//  ИмяРеквизита  		    - Строка.
//  ИскатьЗначимыеРеквизиты - Булево (По умолчанию = Истина).
// 
Функция СформироватьСтруктуруПараметровШаблона(ДанныеОбъекта, ИмяРеквизита, ИскатьЗначимыеРеквизиты = Истина) Экспорт

	СтруктураШаблона = Неопределено;
	
	МетаданныеОбъекта = ДанныеОбъекта.Ссылка.Метаданные();
	
	ВидОбъекта = бит_УправлениеОбъектамиСистемы.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);
    Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ 
        ИЛИ ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
				
		ИмяТипаОбъекта = бит_УправлениеОбъектамиСистемы.ПолучитьИмяТипаОбъекта(МетаданныеОбъекта.Имя, ВидОбъекта);
		ОбъектСистемы  = бит_УправлениеОбъектамиСистемы.НайтиОбъектДоступаПоТипу(МетаданныеОбъекта.Имя, ВидОбъекта);
		
		Организация = ?(МетаданныеОбъекта.Реквизиты.Найти("Организация") = Неопределено, Неопределено, ДанныеОбъекта.Организация);
        
        СтруктураШаблона = ПолучитьНазначенныйОбъектуШаблон(ОбъектСистемы, ИмяРеквизита, Организация, ДанныеОбъекта.Дата);
		Если СтруктураШаблона <> Неопределено И ИскатьЗначимыеРеквизиты Тогда
			ЗаполнятьСтруктуруЗначимыхРеквизитов(СтруктураШаблона);							
		КонецЕсли;
	    
	КонецЕсли;

	Возврат СтруктураШаблона;

КонецФункции // СформироватьЗначениеРеквизитаПоШаблону()

// Процедура запоминает значения значимых реквизитов.
// 
// Параметры:
//  ДанныеОбъекта 				- ДанныеФормыСтруктура.
//  СтруктураЗначимыхРеквизитов - Структура.
// 
Процедура ЗапомнитьЗначенияЗначимыхРеквизитов(ДанныеОбъекта, СтруктураЗначимыхРеквизитов) Экспорт

	МетаданныеОбъекта = ДанныеОбъекта.Ссылка.Метаданные();
	
	Для каждого КлЗнч Из СтруктураЗначимыхРеквизитов Цикл
		
		ИмяРеквизита = КлЗнч.Ключ;
		
		НайденныйРеквизит = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита); 
		Если НайденныйРеквизит = Неопределено Тогда
			НайденныйРеквизит = СтрандартныйРеквизит(МетаданныеОбъекта, ИмяРеквизита);
		КонецЕсли;
		Если НайденныйРеквизит = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СтруктураЗначимыхРеквизитов.Вставить(ИмяРеквизита, ДанныеОбъекта[ИмяРеквизита]);		
			
	КонецЦикла;	

КонецПроцедуры // ЗапомнитьЗначенияЗначимыхРеквизитов()

// Процедура проверяет значения значимых реквизитов.
// 
// Параметры:
//  ДанныеОбъекта 					   - ДанныеФормыСтруктура.
//  СтруктураЗначимыхРеквизитов 	   - Структура.
//  ПредставлениеЗаполняемогоРеквизита - Строка.
// 
Функция ПроверитьИзмененияЗначимыхРеквизитов(ДанныеОбъекта, СтруктураЗначимыхРеквизитов, ПредставлениеЗаполняемогоРеквизита = Неопределено) Экспорт
	
	РеквизитыИзменены = Ложь;
	
	Если СтруктураЗначимыхРеквизитов <> Неопределено Тогда
		
		МетаданныеОбъекта = ДанныеОбъекта.Ссылка.Метаданные();
		
		Для каждого КлЗнч Из СтруктураЗначимыхРеквизитов Цикл
			
			ИмяРеквизита = КлЗнч.Ключ;
			
			НайденныйРеквизит = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита); 
			Если НайденныйРеквизит = Неопределено Тогда
				НайденныйРеквизит = СтрандартныйРеквизит(МетаданныеОбъекта, ИмяРеквизита);
			КонецЕсли; 		
			Если НайденныйРеквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураЗначимыхРеквизитов[ИмяРеквизита] <> ДанныеОбъекта[ИмяРеквизита] Тогда
				
				Если  ПредставлениеЗаполняемогоРеквизита <> Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Изменен реквизит ""%1"", на основании которого был заполнен ""%2"".'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ИмяРеквизита, ПредставлениеЗаполняемогоРеквизита);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			
				РеквизитыИзменены = Истина;	
			
			КонецЕсли;	
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РеквизитыИзменены;

КонецФункции // ПроверитьИзмененияЗначимыхРеквизитов()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПорядковыйНомер

// Функция проверяет реквизит на соответствие шаблону.
// 
// Параметры: 
//  Выборка   		 - ВыборкаИзРезультатаЗапроса (Номер, НомерЧисло).
//  СтруктураШаблона - Структура.
//  ТаблицаШаблона   - ТаблицаЗначений.
//
// Возвращаемое значение:
// 	Булево
//
Функция РеквизитСоответствуетШаблону(Выборка, СтруктураШаблона, ТаблицаШаблона)

	Соответствует = Истина;
	
	ДлинаПорядковогоНомера = СтруктураШаблона.ДлинаПорядковогоНомера;
		
	ПроверяемоеЗначение = Выборка.Номер;
	НомерЧисло  	    = Выборка.НомерЧисло;
	
	ОбщееКоличествоСимволов = ТаблицаШаблона.Итог("КоличествоСимволов");
	
	Если СтрДлина(НомерЧисло) <> ДлинаПорядковогоНомера ИЛИ СтрДлина(ПроверяемоеЗначение) <> ОбщееКоличествоСимволов Тогда
		Соответствует = Ложь;
	Иначе
		Для каждого СтрТабл Из ТаблицаШаблона Цикл
			Если Не СтрТабл.ЭтоПараметр Тогда
				// Проверка фиксированного текста
				Если СтрТабл.Значение <> Сред(ПроверяемоеЗначение, СтрТабл.НомерПервогоСимвола, СтрТабл.КоличествоСимволов) Тогда
					Соответствует = Ложь;	
					Прервать;				
				КонецЕсли;		
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции // РеквизитСоответствуетШаблону()

// Функция получает последний порядковый номер.
// 
// Параметры:
//  СтруктураШаблона	   - Структура.
//  ТаблицаШаблона		   - ТаблицаЗначений.
//  ИмяОбъектаДляЗапроса   - Строка.
//  ДанныеОбъекта  		   - ДанныеФормыСтруктура.
//
// Возвращаемое значение:
// 	Строка
//
Функция ПолучитьПоследнийПорядковыйНомер(СтруктураШаблона, ТаблицаШаблона, ИмяОбъектаДляЗапроса, ДанныеОбъекта)
	
	МетаданныеОбъекта = ДанныеОбъекта.Ссылка.Метаданные();
	
	ШаблонСсылка  		  	    = СтруктураШаблона.ШаблонСсылка;	
	ОрганизацияПоРегистру 	    = СтруктураШаблона.ОрганизацияПоРегистру;
	МассивОрганизацийИсключений = СтруктураШаблона.МассивОрганизацийИсключений;
	
	ДлинаПорядковогоНомера = СтруктураШаблона.ДлинаПорядковогоНомера;
	НачальнаяПозиция 	   = СтруктураШаблона.НачальнаяПозицияПорядковогоНомера;
	
	ОбъектСистемы = ШаблонСсылка.ОбъектСистемы;
	ИмяРеквизита  = ШаблонСсылка.ИмяРеквизита;
	Периодичность = ШаблонСсылка.Периодичность;
	
	ВидОбъекта = ОбъектСистемы.ВидОбъекта;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачальнаяПозиция"      , НачальнаяПозиция);
	Запрос.УстановитьПараметр("ДлинаПорядковогоНомера", ДлинаПорядковогоНомера);
	Запрос.УстановитьПараметр("ТекОбСсылка"			  , ДанныеОбъекта.Ссылка);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТекОбъект." + ИмяРеквизита + " КАК Номер
	|ПОМЕСТИТЬ ТаблНомеров
	|ИЗ
	|	" + ИмяОбъектаДляЗапроса + " КАК ТекОбъект
	|ГДЕ
	|	ТекОбъект.Ссылка <> &ТекОбСсылка
	|	%ТекстУсловияПоОрганизации%
	|	%ТекстУсловияПоДате%
	|;	
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ТаблНомеров.Номер,
	|	ПОДСТРОКА(ТаблНомеров.Номер, &НачальнаяПозиция, &ДлинаПорядковогоНомера) КАК НомерЧисло
	|ИЗ
	|	ТаблНомеров КАК ТаблНомеров
	|УПОРЯДОЧИТЬ ПО
	|	НомерЧисло УБЫВ	
	|";
	
	
	Если ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда		
		
		// Условие по организации
		РеквизитОрганизация = МетаданныеОбъекта.Реквизиты.Найти("Организация");
		Если РеквизитОрганизация = Неопределено Тогда
			ТекстУсловияПоОрганизации = "";
		Иначе
			Если ЗначениеЗаполнено(ОрганизацияПоРегистру) Тогда
				ТекстУсловияПоОрганизации = "
				|И ТекОбъект.Организация = &Организация";
				Запрос.УстановитьПараметр("Организация", ОрганизацияПоРегистру);
			Иначе
				ТекстУсловияПоОрганизации = "
				|И ТекОбъект.Организация Не В(&МассивОрганизацийИсключений)";
				Запрос.УстановитьПараметр("МассивОрганизацийИсключений", МассивОрганизацийИсключений);
			КонецЕсли;
		КонецЕсли; 
		
		// Условие по дате
		ТекстУсловияПоДате = "И ТекОбъект.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаНачала"   , СтруктураШаблона.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", СтруктураШаблона.ДатаОкончания);
		
	Иначе     		
		
		// Условие по организации пустое
		ТекстУсловияПоОрганизации = "";
		// Условие по дате пустое
		ТекстУсловияПоДате = "";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстУсловияПоОрганизации%", ТекстУсловияПоОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстУсловияПоДате%"		  , ТекстУсловияПоДате);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПоследнийНомер = 1;		
	Иначе
		
		УдалосьПолучитьПоследнийНомер = Ложь;

		Выборка = РезультатЗапроса.Выбрать(); 			
		Пока Выборка.Следующий() Цикл 
			Если Не РеквизитСоответствуетШаблону(Выборка, СтруктураШаблона, ТаблицаШаблона) Тогда
				Продолжить;			
			КонецЕсли;
			ПоследнийНомер = Выборка.НомерЧисло;
			Попытка
				// Попытка преобразовать найденный номер в число.
				ПоследнийНомер = Число(Выборка.НомерЧисло); 		
			Исключение
				УдалосьПолучитьПоследнийНомер = Ложь;
				Продолжить;
			КонецПопытки;
			УдалосьПолучитьПоследнийНомер = Истина;
			Прервать;
		КонецЦикла;
		
		Если Не УдалосьПолучитьПоследнийНомер Тогда
		 	ТекстСообщения = НСтр("ru = 'Не удалось найти последний порядковый номер.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ПоследнийНомер = 0; 		
		КонецЕсли;
		
		// Преобразуем последний номер в строк
		ПоследнийНомер = Строка(ПоследнийНомер + 1);                                             		
		
	КонецЕсли;
	
	ПоследнийНомер = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(ПоследнийНомер, ДлинаПорядковогоНомера, "0", "Слева");
	
	Возврат ПоследнийНомер;

КонецФункции // ПолучитьПоследнийПорядковыйНомер()

// Процедура заполняет по умолчанию порядковый номер.
// 
// Параметры:
//  СтрокаТабл - СтрокаТаблицыЗначений.
// 
Процедура ЗаполнитьЗначениеПорядковогоНомераПоУмолчанию(СтрокаТабл)

	Если СтрокаТабл.НомерПервогоСимвола = 0 Тогда	
		СтрокаТабл.Значение    		  = "0001"; 
		СтрокаТабл.КоличествоСимволов = 4;
	ИначеЕсли СтрокаТабл.КоличествоСимволов > 0 Тогда
		СтрокаТабл.Значение = "1";
		СтрокаТабл.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов, "0", "Слева");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЗначениеПорядковогоНомераПоУмолчанию()

// Процедура корректирует длину и значение порядкового номера.
// 
// Параметры:
//  ТаблицаШаблона 		  - ТаблицаЗначений.
//  СтруктураШаблона	  - Структура.
//  ДанныеОбъекта  		  - ДанныеФормыСтруктура.
//  ИмяОбъектаДляЗапроса  - Строка.
//  МаксДлина   		  - Число.
// 
Процедура СкорректироватьЗначениеПорядковогоНомера(ТаблицаШаблона, СтруктураШаблона, ДанныеОбъекта, ИмяОбъектаДляЗапроса, МаксДлина)
		
	СтрокаИд = ТаблицаШаблона.Найти("ПорядковыйНомер", "Имя");
	Если СтрокаИд = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ОбщееКоличествоСимволов = ТаблицаШаблона.Итог("КоличествоСимволов");
	
	Если ЗначениеЗаполнено(СтрокаИд.ТипОбрезки) Тогда
		                            		
		Если ОбщееКоличествоСимволов > МаксДлина Тогда
			НоваяДлина = СтрокаИд.КоличествоСимволов - (ОбщееКоличествоСимволов - МаксДлина);
			Если НоваяДлина > 1 Тогда
			 	ТекстСообщения = НСтр("ru = 'Строка по шаблону слишком велика. Порядковый номер будет обрезан.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				СтрокаИд.КоличествоСимволов = НоваяДлина; 		
			КонецЕсли;
		 КонецЕсли;  		
				
	Иначе
		
		Если ОбщееКоличествоСимволов < МаксДлина Тогда				
			СтрокаИд.КоличествоСимволов = Мин(9, СтрокаИд.КоличествоСимволов + МаксДлина - ОбщееКоличествоСимволов);	
		КонецЕсли;
		
		НачальнаяПозиция = 1;
		Для каждого СтрТабл Из ТаблицаШаблона Цикл
			СтрТабл.НомерПервогоСимвола = НачальнаяПозиция;
			НачальнаяПозиция = НачальнаяПозиция + СтрТабл.КоличествоСимволов;
		КонецЦикла;
		
		СтрокаИд.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаИд.Значение, СтрокаИд.КоличествоСимволов, "0", "Слева");
		           	
	КонецЕсли; 	
	
	Если ДанныеОбъекта <> Неопределено Тогда
		
		СтруктураШаблона.Вставить("ДлинаПорядковогоНомера"			 , СтрокаИд.КоличествоСимволов);
		СтруктураШаблона.Вставить("НачальнаяПозицияПорядковогоНомера", СтрокаИд.НомерПервогоСимвола);
		СтрокаИд.Значение = ПолучитьПоследнийПорядковыйНомер(СтруктураШаблона, ТаблицаШаблона, ИмяОбъектаДляЗапроса, ДанныеОбъекта);
		
	КонецЕсли;

КонецПроцедуры // СкорректироватьЗначениеПорядковогоНомера()
	
#КонецОбласти

#Область Заполнение

#Область ЗначенияПараметровШаблона	

// Процедура обрезает значение.
// 
// Параметры:
//  СтрокаТабл - Строка таблицы значений.
// 
Процедура ЗаполнитьЗначениеПоПараметрамОбрезки(СтрокаТабл)

	Если СтрокаТабл.ТипОбрезки = "ЛЕВ" Тогда
		СтрокаТабл.Значение = Лев(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов);
	ИначеЕсли СтрокаТабл.ТипОбрезки = "ПРАВ" Тогда
		СтрокаТабл.Значение = Прав(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов);
	ИначеЕсли СтрокаТабл.ТипОбрезки = "СРЕД" Тогда	
	    СтрокаТабл.Значение = Сред(СтрокаТабл.Значение, СтрокаТабл.НомерПервогоСимвола, СтрокаТабл.КоличествоСимволов);
	КонецЕсли;  		

КонецПроцедуры // ЗаполнитьЗначениеПоПараметрамОбрезки()

// Процедура заполняет значение из строки.
// 
// Параметры:
//  СтрокаТабл 				- СтрокаТаблицыЗначений.
//  ИсследуемыйРеквизит_Мет - ОбъектМетаданных.
//  ИсследуемыйРеквизит_Знч - Строка.
//  ЭтоНомер		   	    - Булево.
//  ЭтоПроверка		   		- Булево.
// 
Процедура ЗаполнитьЗначениеПоСтроке(СтрокаТабл, ИсследуемыйРеквизит_Мет, ИсследуемыйРеквизит_Знч, ЭтоНомер, ЭтоПроверка)

	СтрокаТабл.Значение = СокрЛП(ИсследуемыйРеквизит_Знч);	
	
	Если СтрокаТабл.КоличествоСимволов = 0 Тогда 	
	 
		Если ЭтоНомер Тогда
			
			СтрокаТабл.КоличествоСимволов = ИсследуемыйРеквизит_Мет.Тип.КвалификаторыСтроки.Длина;
			Если СтрокаТабл.КоличествоСимволов > СтрДлина(СтрокаТабл.Значение) Тогда	
				Если ИсследуемыйРеквизит_Мет.Имя = "Префикс" Тогда
					Если ЭтоПроверка Тогда
					    СтрокаТабл.Значение = Лев("Префикс", СтрокаТабл.КоличествоСимволов);
					КонецЕсли;
					СтрокаТабл.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов, "0", "Слева");
				Иначе
					Если ЭтоПроверка Тогда
					    СтрокаТабл.Значение = Лев("Значение", СтрокаТабл.КоличествоСимволов);
					КонецЕсли;
				    СтрокаТабл.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов, " ", "Справа");
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтрокаТабл.КоличествоСимволов = СтрДлина(СтрокаТабл.Значение);	
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьЗначениеПоПараметрамОбрезки(СтрокаТабл);
		Если ИсследуемыйРеквизит_Мет.Имя = "Префикс" Тогда
			СтрокаТабл.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов, "0", "Слева");
		КонецЕсли;
		Если СтрокаТабл.КоличествоСимволов > СтрДлина(СтрокаТабл.Значение) Тогда
			СтрокаТабл.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов, " ", "Слева");
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗначениеПоСтроке()

// Процедура заполняет значение из числа.
// 
// Параметры:
//  СтрокаТабл 			    - СтрокаТаблицыЗначений.
//  ИсследуемыйРеквизит_Мет - ОбъектМетаданных.
//  ИсследуемыйРеквизит_Знч - Строка.
//  ЭтоНомер				- Булево.
// 
Процедура ЗаполнитьЗначениеПоЧислу(СтрокаТабл, ИсследуемыйРеквизит_Мет, ИсследуемыйРеквизит_Знч, ЭтоНомер)

	Разрядность   = ИсследуемыйРеквизит_Мет.Тип.КвалификаторыЧисла.Разрядность;
	РазрядностьДр = ИсследуемыйРеквизит_Мет.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	
	СтрокаНуля    = ?(РазрядностьДр = 0
					, "0"
					, бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами("0,", РазрядностьДр + 2, "0", "Справа"));
	СтрокаФормата = "ЧГ=20; ЧЦ=" + Разрядность + "; ЧДЦ=" + РазрядностьДр + "; ЧН = " + СтрокаНуля;
	
	СтрокаТабл.Значение = Формат(ИсследуемыйРеквизит_Знч, СтрокаФормата);
	
	Если СтрокаТабл.КоличествоСимволов = 0 Тогда
		
		Если ЭтоНомер Тогда
			
			СтрокаТабл.КоличествоСимволов = ИсследуемыйРеквизит_Мет.Тип.КвалификаторыЧисла.Разрядность;
			Если РазрядностьДр > 0 Тогда
			 	СтрокаТабл.КоличествоСимволов = СтрокаТабл.КоличествоСимволов + 1;		
			КонецЕсли;  	

			Если СтрокаТабл.КоличествоСимволов > СтрДлина(СтрокаТабл.Значение) Тогда
				СтрокаТабл.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов, "0", "Слева");
			КонецЕсли;
			
		Иначе
			
			СтрокаТабл.КоличествоСимволов = СтрДлина(СтрокаТабл.Значение);	
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьЗначениеПоПараметрамОбрезки(СтрокаТабл);
		Если СтрокаТабл.КоличествоСимволов > СтрДлина(СтрокаТабл.Значение) Тогда
			СтрокаТабл.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов, "0", "Слева");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЗначениеПоЧислу()

// Процедура заполняет значение из даты.
// 
// Параметры:
//  СтрокаТабл 				- СтрокаТаблицыЗначений.
//  ИсследуемыйРеквизит_Знч - Строка.
//  МассивПараметра 		- Массив.
//  КоличествоРазделов 		- Число.
//  Счетчик					- Число.
//  ЭтоНомер				- Булево.
// 
Процедура ЗаполнитьЗначениеПоДате(СтрокаТабл, ИсследуемыйРеквизит_Знч, МассивПараметра, КоличествоРазделов, Счетчик, ЭтоНомер)

	ЭтоПоследнийРаздел = КоличествоРазделов = Счетчик + 1;
	
	Если ЭтоПоследнийРаздел Тогда		
		СтрокаТабл.Значение = Строка(ИсследуемыйРеквизит_Знч);
	Иначе
		СледующийРаздел = МассивПараметра[Счетчик + 1];
		Если СледующийРаздел = "Год" Тогда		
			СтрокаТабл.Значение = Формат(ИсследуемыйРеквизит_Знч, НСтр("ru='ДФ=""гггг""'"));
		ИначеЕсли СледующийРаздел = "Месяц" Тогда		
			СтрокаТабл.Значение = Формат(ИсследуемыйРеквизит_Знч, НСтр("ru='ДФ=""ММ""'"));
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТабл.ТипОбрезки = "" Тогда
		Если ЭтоПоследнийРаздел Тогда
			СтрокаТабл.КоличествоСимволов = СтрДлина(СтрокаТабл.Значение);
		ИначеЕсли СледующийРаздел = "Год" Тогда
			СтрокаТабл.КоличествоСимволов = 4;			
		ИначеЕсли СледующийРаздел = "Месяц" Тогда
			СтрокаТабл.КоличествоСимволов = 2;			
		КонецЕсли;	
	Иначе
		ЗаполнитьЗначениеПоПараметрамОбрезки(СтрокаТабл);	
	КонецЕсли;
	
	Если ЭтоНомер Тогда 
		СтрокаТабл.Значение = бит_СтрокиКлиентСервер.ДополнитьСтрокуСимволами(СтрокаТабл.Значение, СтрокаТабл.КоличествоСимволов, "0", "Слева");
	КонецЕсли;
	
КонецПроцедуры

// Процедура исследует и заполняет значение параметра.
// 
// Параметры:
//  СтрокаТабл 		   - СтрокаТаблицыЗначений.
//  КоличествоРазделов - Число.
//  МетаданныеОбъекта  - ОбъектМетаданных.
//  ДанныеОбъекта      - ДанныеФормыСтруктура.
//  ЭтоНомер		   - Булево.
//  МассивПараметра    - Массив.
//  Счетчик			   - Число.
//  ЭтоПроверка		   - Булево. 
//  Отказ 			   - Булево.
// 
Процедура ИсследоватьТекущееЗначениеПараметра(ПараметрыИсследования, ДанныеОбъекта, МетаданныеОбъекта, Счетчик, Отказ)		
	
	СтрокаТабл         = ПараметрыИсследования.СтрокаТабл;
	ЭтоНомер           = ПараметрыИсследования.ЭтоНомер;
	МассивПараметра    = ПараметрыИсследования.МассивПараметра;
	ЭтоПроверка        = ПараметрыИсследования.ЭтоПроверка;
	
	ОписаниеСправочники = Справочники.ТипВсеСсылки();
	
	Счетчик = Счетчик + 1;
	Если МассивПараметра.Количество() = Счетчик Тогда
	 	Возврат;
	КонецЕсли;
	РазделПараметра = МассивПараметра[Счетчик];
	
	// Метаданные исследуемого реквизита
	ИсследуемыйРеквизит_Мет = Неопределено;
	Если ЗначениеЗаполнено(РазделПараметра) Тогда
		ИсследуемыйРеквизит_Мет = МетаданныеОбъекта.Реквизиты.Найти(РазделПараметра);
		Если ИсследуемыйРеквизит_Мет = Неопределено Тогда
			ИсследуемыйРеквизит_Мет = СтрандартныйРеквизит(МетаданныеОбъекта, РазделПараметра);
		КонецЕсли;
	КонецЕсли;	
	
	Если ИсследуемыйРеквизит_Мет = Неопределено Тогда
    	ТекстСообщения = СтрШаблон(НСтр("ru = 'Неверно задан параметр %1.'"), СтрокаТабл.Имя);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , Отказ);
		Возврат;
	КонецЕсли;	
	
	// Значение
	ИсследуемыйРеквизит_Знч = ДанныеОбъекта[ИсследуемыйРеквизит_Мет.Имя];
	ТекОписаниеТипов = ИсследуемыйРеквизит_Мет.Тип;
	
	Если ТекОписаниеТипов.Типы().Количество() = 1 Тогда
		
		Если ТекОписаниеТипов.СодержитТип(Тип("Строка")) Тогда
			
			// Строки
			ЗаполнитьЗначениеПоСтроке(СтрокаТабл, ИсследуемыйРеквизит_Мет, ИсследуемыйРеквизит_Знч, ЭтоНомер, ЭтоПроверка);
			
		ИначеЕсли ТекОписаниеТипов.СодержитТип(Тип("Число")) Тогда
			
			// Числа
			ЗаполнитьЗначениеПоЧислу(СтрокаТабл, ИсследуемыйРеквизит_Мет, ИсследуемыйРеквизит_Знч, ЭтоНомер);
			
		ИначеЕсли ТекОписаниеТипов.СодержитТип(Тип("Дата")) Тогда
			
			// Даты
			Если Не ЗначениеЗаполнено(ИсследуемыйРеквизит_Знч) Тогда
				Если ЭтоПроверка Тогда
					ИсследуемыйРеквизит_Знч = ТекущаяДатаСеанса();				
				Иначе
					ТекстСообщения = НСтр("ru = 'Не заполнено значение %1.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ИсследуемыйРеквизит_Мет.Имя);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , Отказ);
				КонецЕсли; 			 	
			КонецЕсли;
			
			ЗаполнитьЗначениеПоДате(СтрокаТабл, ИсследуемыйРеквизит_Знч, МассивПараметра, ПараметрыИсследования.КоличествоРазделов, Счетчик, ЭтоНомер);	
			
		ИначеЕсли ОписаниеСправочники.СодержитТип(ТекОписаниеТипов.Типы()[0]) Тогда
			       			
			// Ссылки
			Если Не ЗначениеЗаполнено(ИсследуемыйРеквизит_Знч) Тогда
				Если ЭтоПроверка Тогда
					// ---				
				Иначе
					ТекстСообщения = НСтр("ru = 'Не заполнено значение %1.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ИсследуемыйРеквизит_Мет.Имя);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , Отказ);
				КонецЕсли;  			 	
			КонецЕсли; 
			
			ДанныеОбъекта      = ИсследуемыйРеквизит_Знч;
			МетаданныеОбъекта  = ИсследуемыйРеквизит_Знч.Метаданные();
			
			ИсследоватьТекущееЗначениеПараметра(ПараметрыИсследования, ДанныеОбъекта,
													МетаданныеОбъекта, Счетчик, Отказ);
						
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не удалось определить значение параметра %1.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТабл.Имя);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , Отказ);
			
		КонецЕсли;
				
	КонецЕсли;	
	
КонецПроцедуры

Функция ПараметрыИсследования()
	
	ПараметрыИсследования = Новый Структура;
	ПараметрыИсследования.Вставить("СтрокаТабл");
	ПараметрыИсследования.Вставить("КоличествоРазделов");
	ПараметрыИсследования.Вставить("ЭтоНомер");
	ПараметрыИсследования.Вставить("МассивПараметра");
	ПараметрыИсследования.Вставить("ЭтоПроверка");
	
	Возврат ПараметрыИсследования;
	
КонецФункции

// Процедура заполняет данные параметров таблицы шаблона.
// 
// Параметры:
//  ТаблицаШаблона    - ТаблицаЗначений.
//  ЭтоНомер		  - Булево.
//  МетаданныеОбъекта - Метаданные объекта.
//  ДанныеОбъекта     - ДанныеФормыСтруктура.
//  ЭтоПроверка 	  - Булево (По умолчанию = Ложь).
//  Отказ 			  - Булево.
// 
Процедура ЗаполнитьДанныеПараметровТаблицыШаблона(ТаблицаШаблона, ЭтоНомер, МетаданныеОбъекта, ДанныеОбъекта, ЭтоПроверка = Ложь, Отказ)
           	
	Если ТаблицаШаблона.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
			
	Для каждого СтрокаТабл Из ТаблицаШаблона Цикл
		
		Если Не СтрокаТабл.ЭтоПараметр Тогда
			Продолжить;		
		КонецЕсли;
		
		Если ЭтоНомер И СтрокаТабл.Имя = "ПорядковыйНомер" Тогда
			ЗаполнитьЗначениеПорядковогоНомераПоУмолчанию(СтрокаТабл);   			
			Продолжить;    			
		КонецЕсли;
			
		МассивПараметра = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(СтрокаТабл.Имя, ".");
		      		
		КоличествоРазделов = МассивПараметра.Количество();
		Если КоличествоРазделов < 2 Тогда
			Продолжить;		
		КонецЕсли;
		
		Сч = 0;		
		// ТекущийОбъект.
		Если МассивПараметра[Сч] = "ТекущийОбъект" Тогда 		
			
			ПараметрыИсследования = ПараметрыИсследования();
			ПараметрыИсследования.СтрокаТабл         = СтрокаТабл;
			ПараметрыИсследования.КоличествоРазделов = КоличествоРазделов;
			ПараметрыИсследования.ЭтоНомер           = ЭтоНомер;
			ПараметрыИсследования.МассивПараметра    = МассивПараметра;
			ПараметрыИсследования.ЭтоПроверка        = ЭтоПроверка;
			
			ИсследоватьТекущееЗначениеПараметра(ПараметрыИсследования, ДанныеОбъекта,
													МетаданныеОбъекта, Сч, Отказ);	
		
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Неверно задан параметр %1'"), МассивПараметра[Сч]);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , Отказ);
			
		КонецЕсли;
	
	КонецЦикла;
	
	// НомерПервогоСимвола
	НачальнаяПозиция = 1;
	Для каждого СтрТабл Из ТаблицаШаблона Цикл
		СтрТабл.НомерПервогоСимвола = НачальнаяПозиция;
		НачальнаяПозиция = НачальнаяПозиция + СтрТабл.КоличествоСимволов;	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеПараметровТаблицыШаблона()

#КонецОбласти

#Область ТаблицаЗаполненияЗначенияПоШаблону

// Функция формирует таблицу шаблона без значений параметров.
// 
// Параметры:
//  ТекстШаблона - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений
// 
Функция РазложитьТекстШаблонаВТаблицу(Знач ТекстШаблона)
	
	СтрОткрытие = "{{";
	СтрЗакрытие = "}}";
	
	ОписаниеЧисло  = Новый ОписаниеТипов("Число");
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаШаблона = Новый ТаблицаЗначений;
	ТаблицаШаблона.Колонки.Добавить("Имя");
	ТаблицаШаблона.Колонки.Добавить("ЭтоПараметр");
	ТаблицаШаблона.Колонки.Добавить("Значение");
	ТаблицаШаблона.Колонки.Добавить("КоличествоСимволов" , ОписаниеЧисло);
	ТаблицаШаблона.Колонки.Добавить("НомерПервогоСимвола", ОписаниеЧисло);
	ТаблицаШаблона.Колонки.Добавить("ТипОбрезки"		 , ОписаниеСтрока);
	
	ЧислоШаблонов = СтрЧислоВхождений(ТекстШаблона, СтрОткрытие);
	Для i = 1 По ЧислоШаблонов Цикл
		
		НомерСимволаОткрытие = Найти(ТекстШаблона, СтрОткрытие);
		Если НомерСимволаОткрытие > 0 Тогда
			
			Если НомерСимволаОткрытие > 1 Тогда
				
				// Просто текст
				НоваяСтрокаТаблицы = ТаблицаШаблона.Добавить();
				НоваяСтрокаТаблицы.Имя 		   		   = "_Текст";
				НоваяСтрокаТаблицы.ЭтоПараметр 		   = Ложь;
				НоваяСтрокаТаблицы.Значение    		   = Лев(ТекстШаблона, НомерСимволаОткрытие - 1);
				НоваяСтрокаТаблицы.КоличествоСимволов  = СтрДлина(НоваяСтрокаТаблицы.Значение);
				НоваяСтрокаТаблицы.НомерПервогоСимвола = 0;
				
			КонецЕсли;
			
			ТекстШаблона = Сред(ТекстШаблона, НомерСимволаОткрытие + 2);
			НомерСимволаЗакрытие = Найти(ТекстШаблона, СтрЗакрытие);
			Если НомерСимволаЗакрытие > 0 Тогда
				
				// Параметр
				НоваяСтрокаТаблицы = ТаблицаШаблона.Добавить();
				НоваяСтрокаТаблицы.ЭтоПараметр = Истина;
				НоваяСтрокаТаблицы.Значение    = "";
				
				ЗначениеПараметра = СокрЛП(Лев(ТекстШаблона, НомерСимволаЗакрытие - 1));
				Если ВРег(Лев(ЗначениеПараметра, 4)) = "ЛЕВ(" Тогда
					ЗначениеПараметра = СтрЗаменить(Прав(ЗначениеПараметра, СтрДлина(ЗначениеПараметра)-4), ")", "");
					МассивПараметра = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ЗначениеПараметра, ",");
					НоваяСтрокаТаблицы.Имя 		   		   = МассивПараметра[0];				
					НоваяСтрокаТаблицы.КоличествоСимволов  = Число(МассивПараметра[1]);
					НоваяСтрокаТаблицы.НомерПервогоСимвола = 1;
					НоваяСтрокаТаблицы.ТипОбрезки 		   = "ЛЕВ";
				ИначеЕсли ВРег(Лев(ЗначениеПараметра, 5)) = "ПРАВ(" Тогда
					ЗначениеПараметра = СтрЗаменить(Прав(ЗначениеПараметра, СтрДлина(ЗначениеПараметра)-5), ")", "");
					МассивПараметра = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ЗначениеПараметра, ",");
					НоваяСтрокаТаблицы.Имя 		   		   = МассивПараметра[0];;				
					НоваяСтрокаТаблицы.КоличествоСимволов  = Число(МассивПараметра[1]);
					НоваяСтрокаТаблицы.НомерПервогоСимвола = 1;
					НоваяСтрокаТаблицы.ТипОбрезки 		   = "ПРАВ";
				ИначеЕсли ВРег(Лев(ЗначениеПараметра, 5)) = "СРЕД(" Тогда
					ЗначениеПараметра = СтрЗаменить(Прав(ЗначениеПараметра, СтрДлина(ЗначениеПараметра)-5), ")", "");
					МассивПараметра = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ЗначениеПараметра, ",");
					НоваяСтрокаТаблицы.Имя 		   		   = МассивПараметра[0];;				
					НоваяСтрокаТаблицы.НомерПервогоСимвола = Число(МассивПараметра[1]);
					НоваяСтрокаТаблицы.КоличествоСимволов  = Число(МассивПараметра[2]);
					НоваяСтрокаТаблицы.ТипОбрезки 		   = "СРЕД";
				Иначе
					НоваяСтрокаТаблицы.Имя 		   		   = ЗначениеПараметра;				
					НоваяСтрокаТаблицы.КоличествоСимволов  = 0;
					НоваяСтрокаТаблицы.НомерПервогоСимвола = 0;					
				КонецЕсли;                                    				
								
				ТекстШаблона = Сред(ТекстШаблона, НомерСимволаЗакрытие + 2);
				
			КонецЕсли; // Нашли закрытие
			
		КонецЕсли; // Нашли открытие
		
	КонецЦикла; // По количеству параметров в тексте
	
	Если СтрДлина(ТекстШаблона) > 0 Тогда 
		
		// Просто текст
		НоваяСтрокаТаблицы = ТаблицаШаблона.Добавить();
		НоваяСтрокаТаблицы.Имя 		   		   = "_Текст";
		НоваяСтрокаТаблицы.ЭтоПараметр 		   = Ложь;
		НоваяСтрокаТаблицы.Значение    		   = ТекстШаблона;
		НоваяСтрокаТаблицы.КоличествоСимволов  = СтрДлина(НоваяСтрокаТаблицы.Значение);			
		НоваяСтрокаТаблицы.НомерПервогоСимвола = 0;
		
	КонецЕсли;
		
	Возврат ТаблицаШаблона;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеЗначенияРеквизитаПоШаблону

// Процедура заполняет реквизит по шаблону.
// 
// Параметры:
//  СтруктураШаблона  - Структура.
//  ДанныеОбъекта 	  - ДанныеФормыСтруктура.
//  ЭтоПроверка 	  - Булево (По умолчанию = Ложь).
//  Отказ 			  - Булево (По умолчанию = Ложь).
// 
Функция ЗаполнитьРеквизитПоШаблону(СтруктураШаблона, ДанныеОбъекта = Неопределено, ЭтоПроверка = Ложь, Отказ = Ложь)

	Результат = "";
		
	// Шаблон
	ШаблонСсылка  = СтруктураШаблона.ШаблонСсылка;
	ОбъектСистемы = ШаблонСсылка.ОбъектСистемы;
	ИмяРеквизита  = ШаблонСсылка.ИмяРеквизита;
	ТекстШаблона  = ШаблонСсылка.ТекстШаблона;
	ЭтоНомер 	  = ШаблонСсылка.ТипШаблона = Перечисления.бит_ТипыШаблоновЗаполненияРеквизитов.Номер;
	  		
	// Объект системы
	ИмяОбъекта 			 = ОбъектСистемы.ИмяОбъекта;
	ВидОбъекта 			 = ОбъектСистемы.ВидОбъекта;
	ИмяОбъектаДляЗапроса = ОбъектСистемы.ИмяОбъектаПолное;
	
	МетаданныеОбъекта = Неопределено;
	Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
		МетаданныеОбъекта = Метаданные.Документы[ИмяОбъекта];
		Если ДанныеОбъекта = Неопределено Тогда
			ДанныеОбъекта = Документы[МетаданныеОбъекта.Имя].ПустаяСсылка();	
		КонецЕсли; 
	ИначеЕсли ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Справочник Тогда
		МетаданныеОбъекта = Метаданные.Справочники[ИмяОбъекта];
		Если ДанныеОбъекта = Неопределено Тогда
			ДанныеОбъекта = Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;
	
    Если МетаданныеОбъекта = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить значение реквизита по шаблону'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , Отказ);
		
	Иначе
		
	    МетаЗаполняемыйРеквизит      = МетаданныеОбъекта.Реквизиты[ИмяРеквизита];
		МаксимальнаяДлинаРеквизита   = МетаЗаполняемыйРеквизит.Тип.КвалификаторыСтроки.Длина;
		ЗаполняемыйРеквизитОрганичен = МаксимальнаяДлинаРеквизита > 0;
		МинимальнаяДлинаПрефикса     = 4;
			
		// Формирование таблицы шаблона
		ТаблицаШаблона = РазложитьТекстШаблонаВТаблицу(ТекстШаблона);
		ЗаполнитьДанныеПараметровТаблицыШаблона(ТаблицаШаблона, ЭтоНомер, МетаданныеОбъекта, ДанныеОбъекта, ЭтоПроверка, Отказ);
		// Корректировка длины порядкового номера
		Если ЭтоНомер Тогда
			СкорректироватьЗначениеПорядковогоНомера(ТаблицаШаблона, СтруктураШаблона, ДанныеОбъекта, ИмяОбъектаДляЗапроса, МаксимальнаяДлинаРеквизита);		
		КонецЕсли;                                                                                                                                      
		
		// Формирование строки - результата
		Для каждого СтрокаТабл Из ТаблицаШаблона Цикл
			Результат = Результат + СтрокаТабл.Значение;
		КонецЦикла;
		
		// Проверка результата с выводом сообщений 
		Если ЭтоПроверка Тогда
			Если ЗаполняемыйРеквизитОрганичен Тогда
				Если ТаблицаШаблона.Найти(0, "КоличествоСимволов") <> Неопределено Тогда
			 		ТекстСообщения = НСтр("ru = 'В шаблон включены параметры неограниченной длины.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Если СтрДлина(Результат) > МаксимальнаяДлинаРеквизита Тогда
				 	ТекстСообщения = НСтр("ru = 'Строка по шаблону слишком велика и будет обрезана по длине реквизита.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Обрезка результата под длину реквизита
		Если ЗаполняемыйРеквизитОрганичен Тогда
			Результат = Лев(Результат, МаксимальнаяДлинаРеквизита);		
		КонецЕсли;                                                 		
	
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

// Функция получает массив организаций по которым назначены другие шаблоны 
// для этого объекта и имени реквизита.
// 
// Параметры:
//   ОбъектСистемы - СправочникСсылка.бит_ОбъектыСистемы.
//   ИмяРеквизита  - Строка.
//  
// Возвращаемое значение:
//   Массив.
// 
Функция ОрганизацииИсключения(ОбъектСистемы, ИмяРеквизита, ТекДата)
	
	МассивОрганизацийИсключений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЗапроса"	 	 , ТекДата);
	Запрос.УстановитьПараметр("ОбъектСистемы"	 , ОбъектСистемы);
	Запрос.УстановитьПараметр("ИмяРеквизита" 	 , ИмяРеквизита);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НазначениеШаблонов.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.бит_НазначениеШаблоновЗаполненияРеквизитов.СрезПоследних(
	|			&ДатаЗапроса,
	|			ОбъектСистемы = &ОбъектСистемы
	|				И ИмяРеквизита = &ИмяРеквизита
	|				И Организация <> &ПустаяОрганизация) КАК НазначениеШаблонов
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл                                 	
		МассивОрганизацийИсключений.Добавить(Выборка.Организация);	
	КонецЦикла;
	
	Возврат МассивОрганизацийИсключений;
	
КонецФункции

// Функция получает дату окончания действия шаблона.
// 
// Параметры:
//  Запрос  			  - Запрос.
//  ШаблонСсылка 		  - СправочникСсылка.бит_ШаблоныЗаполненияРеквизитов.
//  ДатаНачала  		  - Дата.
//  Периодичность 		  - ПеречислениеСсылка.бит_ПериодичностьПланирования.
//  ОрганизацияПоРегистру - СправочникСсылка.Организации.
//  
// Возвращаемое значение:
//   Дата
// 
Функция ПолучитьДатуОкончанияДействияШаблона(Запрос, ШаблонСсылка, ДатаНачала, Периодичность, ОрганизацияПоРегистру)

	ДатаОкончания = бит_Бюджетирование.ПолучитьКонецПериода(ДатаНачала, Периодичность);
	
	Запрос.УстановитьПараметр("ДатаЗапроса"	 	     , ДатаОкончания);
	Запрос.УстановитьПараметр("ОрганизацияПоРегистру", ОрганизацияПоРегистру);	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   НазначениеШаблонов.Период КАК Период,
	|	НазначениеШаблонов.Шаблон,
	|	НазначениеШаблонов.Организация,	
	|	ВЫБОР 
	|		КОГДА НазначениеШаблонов.Организация = &ПустаяОрганизация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.бит_НазначениеШаблоновЗаполненияРеквизитов.СрезПоследних(
	|			&ДатаЗапроса,
	|			ОбъектСистемы = &ОбъектСистемы
	|				И ИмяРеквизита = &ИмяРеквизита
	|				И (Организация = &Организация ИЛИ Организация = &ОрганизацияПоРегистру)) КАК НазначениеШаблонов
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|   Период
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда		
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Шаблон <> ШаблонСсылка Тогда
			ДатаОкончания = Выборка.Период - 1;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ДатаОкончания;
	
КонецФункции // ПолучитьДатуОкончанияДействияШаблона()

// Функция получает назначенный объекту шаблон из регистра бит_НазначениеШаблоновЗаполненияРеквизитов.
// 
// Параметры:
//  ОбъектСистемы - СправочникСсылка.бит_ОбъектыСистемы.
//  ИмяРеквизита  - Строка.
//  Организация   - СправочникСсылка.Организации.
//  ТекДата		  - Дата (По умолчанию = Неопределено).
//  
// Возвращаемое значение:
//  СправочникСсылка.бит_ШаблоныЗаполненияРеквизитов.
// 
Функция ПолучитьНазначенныйОбъектуШаблон(ОбъектСистемы, ИмяРеквизита, Организация = Неопределено, ТекДата = Неопределено, ДополнитьСтруктуру = Истина)
	
	Если Не ЗначениеЗаполнено(ТекДата) Тогда
		ТекДата = ТекущаяДатаСеанса();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЗапроса"	 	 , ТекДата);
	Запрос.УстановитьПараметр("ОбъектСистемы"	 , ОбъектСистемы);
	Запрос.УстановитьПараметр("ИмяРеквизита" 	 , ИмяРеквизита);
	Запрос.УстановитьПараметр("Организация"  	 , Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.Текст = "
	|ВЫБРАТЬ
	|   НазначениеШаблонов.Период КАК Период,
	|	НазначениеШаблонов.Шаблон,
	|	НазначениеШаблонов.Организация,	
	|	ВЫБОР 
	|		КОГДА НазначениеШаблонов.Организация = &ПустаяОрганизация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.бит_НазначениеШаблоновЗаполненияРеквизитов.СрезПоследних(
	|			&ДатаЗапроса,
	|			ОбъектСистемы = &ОбъектСистемы
	|				И ИмяРеквизита = &ИмяРеквизита
	|				И (Организация = &Организация ИЛИ Организация = &ПустаяОрганизация)) КАК НазначениеШаблонов
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		СтруктураШаблона = Неопределено;
		
	Иначе 		
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ШаблонСсылка = Выборка.Шаблон;		
		
		СтруктураШаблона = Новый Структура;
		СтруктураШаблона.Вставить("ШаблонСсылка", ШаблонСсылка);
		
		Если ДополнитьСтруктуру Тогда
			
			Период		  		  = Выборка.Период;
			ОрганизацияПоРегистру = Выборка.Организация;
			Периодичность 		  = ШаблонСсылка.Периодичность;
			
			МассивОрганизацийИсключений = ОрганизацииИсключения(ОбъектСистемы, ИмяРеквизита, ТекДата);
			
			СтруктураШаблона.Вставить("ОрганизацияПоРегистру", Выборка.Организация);
			СтруктураШаблона.Вставить("МассивОрганизацийИсключений" , 
						?(ЗначениеЗаполнено(Выборка.Организация), Новый Массив, МассивОрганизацийИсключений));		
						
			СтруктураШаблона.Вставить("ДатаНачала"	 , Макс(Период, бит_Бюджетирование.ПолучитьНачалоПериода(ТекДата, Периодичность)));
			СтруктураШаблона.Вставить("ДатаОкончания", ПолучитьДатуОкончанияДействияШаблона(Запрос, ШаблонСсылка, СтруктураШаблона.ДатаНачала, Периодичность, ОрганизацияПоРегистру)); 
					
		КонецЕсли;
	
	КонецЕсли; 

	Возврат СтруктураШаблона;
	
КонецФункции // ПолучитьНазначенныйОбъектуШаблон()

// Процедура производит поиск шаблона и формирует значение реквизита по шаблону по данным объекта.
// 
// Параметры:
//  ДанныеОбъекта    - ДанныеФормыСтруктура.
//  ИмяРеквизита     - Строка.
//  СтруктураШаблона - Структура .
// 
Функция СформироватьЗначениеРеквизитаПоШаблону(ДанныеОбъекта, ИмяРеквизита, СтруктураШаблона) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	
	Если СтруктураШаблона = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'На заполнение реквизита не назначен шаблон.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);		
		
	Иначе
		
		Отказ = Ложь;
		
		Результат = ЗаполнитьРеквизитПоШаблону(СтруктураШаблона, ДанныеОбъекта, Ложь, Отказ);
		
		Если Отказ Тогда
			Результат = Неопределено;	
		КонецЕсли;
		
	КонецЕсли;                                                                  		
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;

КонецФункции // СформироватьЗначениеРеквизитаПоШаблону()

// Процедура проверяет уникальность номера для объектов типа "Документ".
// 
// Параметры:
//  ТекОбъект    - ДокументОбъект.
//  ИмяРеквизита - Строка.
//  Отказ		 - Булево.
// 
Процедура ПроверитьУникальностьРеквизитаДляДокумента(ТекОбъект, ИмяРеквизита, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийНомер = ТекОбъект[ИмяРеквизита];	
	Если ПустаяСтрока(ТекущийНомер) Тогда
		// Пустой номер не проверяется
		Возврат;	
	КонецЕсли;
	
	МетаданныеОбъекта = ТекОбъект.Метаданные();
	ИмяДокумента = МетаданныеОбъекта.Имя;
	
	ВидОбъекта = бит_УправлениеОбъектамиСистемы.ПолучитьВидОбъектаПоМетаданным(МетаданныеОбъекта);
	Если ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.Документ Тогда
				
		ИмяТипаОбъекта = бит_УправлениеОбъектамиСистемы.ПолучитьИмяТипаОбъекта(ИмяДокумента, ВидОбъекта);
		ОбъектСистемы  = бит_УправлениеОбъектамиСистемы.НайтиОбъектДоступаПоТипу(ИмяДокумента, ВидОбъекта);
		
		ЕстьОрганизация = МетаданныеОбъекта.Реквизиты.Найти("Организация") <> Неопределено;
		Организация = ?(ЕстьОрганизация, ТекОбъект.Организация, Неопределено);
		СтруктураШаблона = ПолучитьНазначенныйОбъектуШаблон(ОбъектСистемы, ИмяРеквизита, Организация, ТекОбъект.Дата);
		
		Если СтруктураШаблона = Неопределено Тогда
		 	// Если шаблон не назначен, то нет проверки на уникальность
			Возврат;		
		КонецЕсли;
		
		РеквизитНомер = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
		Если РеквизитНомер = Неопределено Тогда
		 	Возврат;	
		КонецЕсли;
		СинонимРеквизита = РеквизитНомер.Синоним;
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущаяСсылка", ТекОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТекущийНомер" , ТекущийНомер);	
		ТекстЗапроса = "
		|ВЫБРАТЬ
	    |	ТекОбъект.Ссылка,
	    |	ТекОбъект.Дата,
	    |	ТекОбъект." + ИмяРеквизита + "
	    |ИЗ
	    |	Документ." + ИмяДокумента + " КАК ТекОбъект
	    |ГДЕ
		|   ТекОбъект.Ссылка <> &ТекущаяСсылка
	    |	И ТекОбъект." + ИмяРеквизита + " = &ТекущийНомер
		|   %ТекстУсловияПоДате%
		|   %ТекстУсловияПоОрганизации%
		|";
		
		// Условие по организации
		Если ЕстьОрганизация Тогда
			ТекстУсловияПоОрганизации = "И ТекОбъект.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Организация);
		Иначе
			ТекстУсловияПоОрганизации = "";
		КонецЕсли;    		
		
		// Условие по дате
		Если СтруктураШаблона = Неопределено Тогда
			// Ошибка
			ТекстУсловияПоДате = "";
		Иначе
			ТекстУсловияПоДате = "И ТекОбъект.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
			Запрос.УстановитьПараметр("ДатаНачала"   , СтруктураШаблона.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", СтруктураШаблона.ДатаОкончания);
		КонецЕсли;
				
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстУсловияПоОрганизации%", ТекстУсловияПоОрганизации);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТекстУсловияПоДате%", ТекстУсловияПоДате);			
	
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Значение ""%1"" не уникально.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СинонимРеквизита);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ПроверитьУникальностьРеквизитаДляДокумента()    

#КонецОбласти

#КонецОбласти

#Область Проверки

// Процедура заполняет структуру параметров шаблона.
// 
// Параметры:
//  СтруктураШаблон - Структура
// 
Процедура ЗаполнятьСтруктуруЗначимыхРеквизитов(СтруктураШаблона)

	Если Не ЗначениеЗаполнено(СтруктураШаблона.ШаблонСсылка) Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстШаблона = СтруктураШаблона.ШаблонСсылка.ТекстШаблона;
	
	СтрОткрытие = "{{";
	СтрЗакрытие = "}}";
	
	СтруктураЗначимыхРеквизитов = Новый Структура;
	
	ЧислоШаблонов = СтрЧислоВхождений(ТекстШаблона, СтрОткрытие);
	Для i = 1 По ЧислоШаблонов Цикл
		
		НомерСимволаОткрытие = Найти(ТекстШаблона, СтрОткрытие);
		Если НомерСимволаОткрытие > 0 Тогда
		
			ТекстШаблона = Сред(ТекстШаблона, НомерСимволаОткрытие + 2);
			НомерСимволаЗакрытие = Найти(ТекстШаблона, СтрЗакрытие);
			Если НомерСимволаЗакрытие > 0 Тогда
				
				// Параметр
				ПредставлениеПараметра = СокрЛП(Лев(ТекстШаблона, НомерСимволаЗакрытие - 1));
				
				МассивПараметра = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ПредставлениеПараметра, ".");		      		
				КоличествоРазделов = МассивПараметра.Количество();
				Если КоличествоРазделов > 1 Тогда
					Если МассивПараметра[0] = "ТекущийОбъект" Тогда			
						СтруктураЗначимыхРеквизитов.Вставить(МассивПараметра[1]);
					КонецЕсли;
				КонецЕсли;
									
				ТекстШаблона = Сред(ТекстШаблона, НомерСимволаЗакрытие + 2);
				
			КонецЕсли; // Нашли закрытие
			
		КонецЕсли; // Нашли открытие
		
	КонецЦикла; // По количеству параметров в тексте
	
	СтруктураШаблона.Вставить("СтруктураЗначимыхРеквизитов", СтруктураЗначимыхРеквизитов);

КонецПроцедуры // ЗаполнятьСтруктуруЗначимыхРеквизитов()

#КонецОбласти

Функция СтрандартныйРеквизит(МетаданныеОбъекта, ИмяРеквизита)
	
	Результат = Неопределено;
	Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			Результат = Реквизит;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
