
#Область ОписаниеПеременных

// Хранит флаг, указывающий на необходимость автоматически заполняеть полное наименование.
&НаКлиенте
Перем мФормироватьНаименованиеПолноеАвтоматически;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Объект);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполним кэш значений, доступный на сервере и клиенте.
	ЗаполнитьКэшЗначений();
	
	// Отобразим данные в табличном поле "Разрезы бюджетирования".
	ОтобразитьРазрезыБюджетирования();
	
	СформироватьДеревоВидовОперацийДляЗаявки();
	
	УправлениеФормой(ЭтотОбъект);
	МетаОбъект = Объект.Ссылка.Метаданные();
	Элементы.НеКонтролироватьВсе.Видимость = бит_ОбщегоНазначения.ЕстьРеквизит("НеКонтролировать_Бюджеты", МетаОбъект) 
											И бит_ОбщегоНазначения.ЕстьРеквизит("НеКонтролировать_Графики", МетаОбъект) 
											И бит_ОбщегоНазначения.ЕстьРеквизит("НеКонтролировать_Заявки", МетаОбъект);
											
	                   
	УстановитьМаскиЭлементам();
	УстановитьПараметрыВыбораДляСчетов();
	УстановитьУсловноеОформление();
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-11-08 (#3393)
	ок_УправлениеФормами.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-11-08 (#3393)
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
 	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
// 
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УстановитьРазрезыБюджетирования();
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СтатьиОборотов", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОтобразитьРазрезыБюджетирования();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события ПриИзменении элемента формы Наименование.
// 
&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПриИзменении()

// Обработчик события ПриИзменении для полного наименования.
// 
&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

&НаКлиенте
Процедура НаименованиеПолноеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
	
		Объект.НаименованиеПолное = ВыбранноеЗначение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	
	КонецЕсли;
	
КонецПроцедуры // НаименованиеПолноеОбработкаВыбора()

&НаКлиенте
Процедура НаименованиеПолноеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Элемент.СписокВыбора.Добавить(Объект.Наименование);
	
КонецПроцедуры // НаименованиеПолноеАвтоПодбор()

// Процедура - обработчик события "ПриИзменении" флажка "Учет_Количество".
// 
&НаКлиенте
Процедура Учет_КоличествоПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // Учет_КоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "Учет_Сумма".
// 
&НаКлиенте
Процедура Учет_СуммаПриИзменении(Элемент)
	
	Если НЕ Объект.Учет_Сумма Тогда
	
		Объект.ЭтоКоэффициент = Ложь;
	
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ТипСтатьи".
// 
&НаКлиенте
Процедура ТипСтатьиПриИзменении(Элемент)
	
	ТипыСтатей = мКэшЗначений.Перечисления.бит_ТипыСтатейОборотов;
	
	Если Объект.ТипСтатьи = ТипыСтатей.БДР Тогда
		
		Объект.СтавкаНДС = мКэшЗначений.СтавкаНДС_БезНДС;
		
	ИначеЕсли Объект.ТипСтатьи = ТипыСтатей.НефинансовыйПоказатель ИЛИ Объект.ТипСтатьи = ТипыСтатей.ФинансовыйПоказатель Тогда
		
		Объект.СтавкаНДС   = мКэшЗначений.СтавкаНДС_БезНДС;
		Объект.ВидСтатьи   = мКэшЗначений.ПустойВидСтатьи;
		Объект.РасходДоход = мКэшЗначений.ПустоеНаправление; 		
		
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ТипСтатьиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "РасходДоход".
// 
&НаКлиенте
Процедура РасходДоходПриИзменении(Элемент)
	
	Объект.ВидОперации = Неопределено;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // РасходДоходПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "НеКонтролироватьВсе".
// 
&НаКлиенте
Процедура НеКонтролироватьВсеПриИзменении(Элемент)
	
	Объект.НеКонтролировать_Заявки     = НеКонтролироватьВсе;
	Объект.НеКонтролировать_Бюджеты    = НеКонтролироватьВсе;
	Объект.НеКонтролировать_Графики    = НеКонтролироватьВсе;
	Объект.НеКонтролировать_Количество = НеКонтролироватьВсе;
	Объект.НеКонтролировать_Сумма      = НеКонтролироватьВсе;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "НеКонтролировать_Заявки".
// 
&НаКлиенте
Процедура НеКонтролировать_ЗаявкиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "НеКонтролировать_Бюджеты".
// 
&НаКлиенте
Процедура НеКонтролировать_БюджетыПриИзменении(Элемент)
	
	Объект.НеКонтролировать_Количество = Объект.НеКонтролировать_Бюджеты;
	Объект.НеКонтролировать_Сумма = Объект.НеКонтролировать_Бюджеты;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "НеКонтролировать_Графики".
// 
&НаКлиенте
Процедура НеКонтролировать_ГрафикиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СсылкаДокумента"    , мКэшЗначений.ЗаявкаНаРасходованиеДСПустая);
	ПараметрыФормы.Вставить("ДеревоВидовОпераций", ДеревоВидовОпераций);
	
	Оповещение = Новый ОписаниеОповещения("ВидОперацииНачалоВыбораОкончание", ЭтотОбъект, Элемент); 
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Процедура окончание процедуры "ВидОперацииНачалоВыбора".
// 
&НаКлиенте 
Процедура ВидОперацииНачалоВыбораОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Объект.ВидОперации = РезультатВыбора.ВидОперации;
		Объект.ФормаОплаты = РезультатВыбора.ФормаОплаты;
	КонецЕсли;
	
	ВидОперацииПриИзменении(ДополнительныеПараметры);
	
КонецПроцедуры // ВидОперацииНачалоВыбораОкончание()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРазрезПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РазрезыБюджетирования.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ИспользоватьРазрез Тогда
		ТекущиеДанные.Обязательный = Ложь;
	КонецЕсли;	
	
	РазрезыБюджетированияУстановитьЗаголовок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыШаблоныПроводок

&НаКлиенте
Процедура ШаблоныПроводокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ШаблоныПроводок.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		
		// Заполним значения по усолчанию
		ТекущаяСтрока.КоэффициентСумма = 1;
		ТекущаяСтрока.КоэффициентКоличество = 1;
		ТекущаяСтрока.СпособЗаполненияСуммы = мКэшЗначений.СпособыЗаполненияСуммПроводокБюджетирования;
		
	КонецЕсли; 
	
КонецПроцедуры // ШаблоныПроводокПриНачалеРедактирования()

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемыСвойства

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
    УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти 

// Процедура устанвливает параметры выбора для элементов формы. 
// 
// Параметры:
//  МассивЭлементов - Массив.
// 
&НаСервере
Процедура УстановитьПараметрыВыбораДляСчетов()

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ШаблоныПроводокСчетДТ);
	МассивЭлементов.Добавить(Элементы.ШаблоныПроводокСчетКТ);
	
	бит_РаботаСДиалогамиСервер.УстановитьПараметрыВыбораДляЭлементов(МассивЭлементов);
	
КонецПроцедуры // УстановитьПараметрыВыбораДляСчетов() 

// Процедура заполняет кэш значений доступных на сервере и на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	мКэшЗначений = Новый Структура;
	
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ТипыСтатейОборотов", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ТипыСтатейОборотов));
	КэшПеречисления.Вставить("бит_ВидыОперацийЗаявкаНаРасходование", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОперацийЗаявкаНаРасходование));
	мКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	мКэшЗначений.Вставить("НастройкиАналитик", бит_Бюджетирование.НастройкиИзмеренийБюджетирования());
	
	мКэшЗначений.Вставить("ЕстьМеханизмБалансовогоУчета", бит_Бюджетирование.ЕстьМеханизмБалансовогоУчета());
	
	мКэшЗначений.Вставить("ПустойВидСтатьи"	 , Справочники.бит_ВидыСтатейОборотов.ПустаяСсылка());
	мКэшЗначений.Вставить("ПустоеНаправление", Перечисления.бит_РасходДоход.ПустаяСсылка());
	
	мКэшЗначений.Вставить("СтавкаНДС_БезНДС" , Перечисления.СтавкиНДС.БезНДС);
	
	мКэшЗначений.Вставить("СпособыЗаполненияСуммПроводокБюджетирования", Перечисления.бит_СпособыЗаполненияСуммПроводокБюджетирования.Сумма);	
	
	мКэшЗначений.Вставить("ЕстьДокументЗаявка", Истина);
	мКэшЗначений.Вставить("ЗаявкаНаРасходованиеДСПустая", бит_Казначейство.ПустоеЗначениеЗаявкаНаРасходованиеСредств());
	
КонецПроцедуры // ЗаполнитьКэшЗначений()
 
&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект	 = Форма.Объект;
	
	Если бит_ОбщегоНазначения.ЭтоСемействоБП() Тогда
		Элементы.ЕдиницаИзмерения.Доступность = Объект.Учет_Количество;	
		Элементы.ЕдиницаИзмерения.АвтоОтметкаНезаполненного = Объект.Учет_Количество;
	Иначе	
		Элементы.ЕдиницаИзмерения.Видимость = Ложь;
	КонецЕсли; 
	
	Элементы.ЭтоКоэффициент.Доступность = Объект.Учет_Сумма;
	
	// Видимость шаблонов проводок
	Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаШаблоныПроводок.Видимость = Форма.мКэшЗначений.ЕстьМеханизмБалансовогоУчета; 
	
	ЭтоНефинансовыйПоказатель = ЭтоПоказатель(Объект.ТипСтатьи);
	Элементы.СтавкаНДС.ТолькоПросмотр   	   = ЭтоНефинансовыйПоказатель;
	Элементы.РасходДоход.ТолькоПросмотр 	   = ЭтоНефинансовыйПоказатель;	 
	Элементы.РасходДоход.ОтметкаНезаполненного = Не ЭтоНефинансовыйПоказатель;
	Элементы.РасходДоход.АвтоОтметкаНезаполненного = Не ЭтоНефинансовыйПоказатель;
	
	Форма.НеКонтролироватьВсе = НеКонтролироватьВсе(Объект);
						
	Элементы.НеКонтролировать_Количество.Доступность = НЕ Объект.НеКонтролировать_Бюджеты;	
	Элементы.НеКонтролировать_Сумма.Доступность = НЕ Объект.НеКонтролировать_Бюджеты;					
						
	Если Форма.мКэшЗначений.ЕстьДокументЗаявка Тогда
		Элементы.ГруппаВидОперацииФормаОплаты.Видимость = Объект.ТипСтатьи = ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС");
		Элементы.ВидОперации.Видимость 					= Объект.РасходДоход = ПредопределенноеЗначение("Перечисление.бит_РасходДоход.Расходование");
		Элементы.ФормаОплаты.ТолькоПросмотр 			= ЭтоПеремещениеДСПереопределяемый(Объект.ВидОперации);		
	Иначе
		Элементы.ГруппаВидОперацииФормаОплаты.Видимость = Ложь;	
	КонецЕсли;					
	
	Если Объект.ТипСтатьи = ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС") 
		ИЛИ Объект.ТипСтатьи = ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.Прочее") Тогда
		
		Элементы.ГруппаРазрешитьПроводитьБезЗаявки.Видимость = Истина;
		
	Иначе
		Элементы.ГруппаРазрешитьПроводитьБезЗаявки.Видимость = Ложь;
	КонецЕсли;
	
	РазрезыБюджетированияУстановитьЗаголовок(Форма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПеремещениеДСПереопределяемый(ВидОперации)

	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЭтоПеремещениеДС = Истина;
	Иначе	
		ЭтоПеремещениеДС = Ложь;
	КонецЕсли; 
	
	Возврат ЭтоПеремещениеДС;

КонецФункции

&НаСервереБезКонтекста
Функция НеКонтролироватьВсе(Объект)

	МетаОбъект = Объект.Ссылка.Метаданные();
	НеКонтролироватьВсе = (бит_ОбщегоНазначения.ЕстьРеквизит("НеКонтролировать_Бюджеты", МетаОбъект) И Объект.НеКонтролировать_Бюджеты)
						И (бит_ОбщегоНазначения.ЕстьРеквизит("НеКонтролировать_Графики", МетаОбъект) И Объект.НеКонтролировать_Графики)
						И (бит_ОбщегоНазначения.ЕстьРеквизит("НеКонтролировать_Заявки", МетаОбъект) И Объект.НеКонтролировать_Заявки);
						
	Возврат НеКонтролироватьВсе;	
	
КонецФункции
 
// Процедура заполняет таблицу значений "РазрезыБюджетирования" по данным текущего объекта.
// 
&НаСервере
Процедура ОтобразитьРазрезыБюджетирования()

	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("произвольные","синоним");
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	МетаданныеОбъекта = СправочникОбъект.Метаданные();
	
	// Получаем настройки используемых дополнительных измерений.
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");

	РазрезыБюджетирования.Очистить();
	Для каждого КлючИЗначение Из Измерения Цикл
		
		ИмяРеквизита 			 = "Учет_" + КлючИЗначение.Ключ;
		ИмяРеквизитаОбязательный = "Обязательный_" + КлючИЗначение.Ключ;
		ИмяРеквизитаИмяТипа      = "ИмяТипаПоУмолчанию_" + КлючИЗначение.Ключ;
		
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита,МетаданныеОбъекта) Тогда  
			
			ТекущаяНастройка = НастройкиИзмерений[КлючИЗначение.Ключ];
			Если СтрНачинаетсяС(ВРег(КлючИЗначение.Ключ), "АНАЛИТИКА") Тогда
				Если НЕ ТекущаяНастройка = Неопределено Тогда
					НоваяСтрока                    = РазрезыБюджетирования.Добавить();
					НоваяСтрока.ИмяРеквизита       = ИмяРеквизита;
					НоваяСтрока.ИспользоватьРазрез = Объект[ИмяРеквизита];
					НоваяСтрока.Измерение          = ТекущаяНастройка.Синоним;
					НоваяСтрока.ИмяТипаПоУмолчанию = Объект[ИмяРеквизитаИмяТипа];
					
					Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизитаОбязательный,МетаданныеОбъекта) Тогда
						НоваяСтрока.Обязательный = Объект[ИмяРеквизитаОбязательный];
					КонецЕсли;
					НоваяСтрока.ИмяТипаПоУмолчаниюДоступность = ТекущаяНастройка.ТипЗначения.Типы().Количество() > 1;
				КонецЕсли;
				
			Иначе
				// Обратная совместимость с БП, КОРП.
				НоваяСтрока                    = РазрезыБюджетирования.Добавить();
				НоваяСтрока.ИмяРеквизита       = ИмяРеквизита;
				НоваяСтрока.ИспользоватьРазрез = Объект[ИмяРеквизита];
				НоваяСтрока.Измерение          = КлючИЗначение.Значение;
				
				Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизитаОбязательный,МетаданныеОбъекта) Тогда
					НоваяСтрока.Обязательный = Объект[ИмяРеквизитаОбязательный];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ОтобразитьРазрезыБюджетирования()

&НаСервере
Процедура УстановитьРазрезыБюджетирования()
	
	Измерения = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("произвольные","синоним");
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	МетаданныеОбъекта = СправочникОбъект.Метаданные();
	
	Для каждого СтрокаТаблицы Из РазрезыБюджетирования Цикл
		ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизита,МетаданныеОбъекта) Тогда
			
			Если Объект[ИмяРеквизита] <> СтрокаТаблицы.ИспользоватьРазрез Тогда
				
				Объект[ИмяРеквизита] = СтрокаТаблицы.ИспользоватьРазрез;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		ИмяРеквизитаОбязательный = СтрЗаменить(СтрокаТаблицы.ИмяРеквизита, "Учет_", "Обязательный_");
		Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизитаОбязательный,МетаданныеОбъекта) Тогда
			
			Если Объект[ИмяРеквизитаОбязательный] <> СтрокаТаблицы.Обязательный Тогда
				
				Объект[ИмяРеквизитаОбязательный] = СтрокаТаблицы.Обязательный;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		ИмяРеквизитаИмяТипа      = СтрЗаменить(СтрокаТаблицы.ИмяРеквизита, "Учет_", "ИмяТипаПоУмолчанию_");
        Если бит_РаботаСМетаданными.ЕстьРеквизит(ИмяРеквизитаИмяТипа,МетаданныеОбъекта) Тогда
			
			Если Объект[ИмяРеквизитаИмяТипа] <> СтрокаТаблицы.ИмяТипаПоУмолчанию Тогда
				
				Объект[ИмяРеквизитаИмяТипа] = СтрокаТаблицы.ИмяТипаПоУмолчанию;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		
	КонецЦикла; 
		
КонецПроцедуры // УстановитьРазрезыБюджетирования()

// Процедура формирует дерево видов операций.
// 
&НаСервере
Процедура СформироватьДеревоВидовОперацийДляЗаявки()
	
	Если Не мКэшЗначений.ЕстьДокументЗаявка Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоВидовОперацийИсточник = Документы.бит_ЗаявкаНаРасходованиеСредств.СформироватьДеревоВидовОперацийДляЗаявки(мКэшЗначений.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование);
	
	ЗначениеВРеквизитФормы(ДеревоВидовОперацийИсточник, "ДеревоВидовОпераций");
	
КонецПроцедуры // СформироватьДеревоВидовОперацийДляЗаявки()

// Процедура устанавливает маску кодификатора.
// 
&НаСервере
Процедура УстановитьМаскиЭлементам()

	ТекОбъектСистемы = бит_УправлениеОбъектамиСистемы.НайтиОбъектДоступаПоТипу(ТипЗнч(Объект.Ссылка), Перечисления.бит_ВидыОбъектовСистемы.Справочник);
	
	// Маска кодификатора
	Элементы.Кодификатор.Маска = РегистрыСведений.бит_МаскиКодов.ПолучитьМаскуРеквизита(ТекОбъектСистемы, "Кодификатор");	

КонецПроцедуры // УстановитьМаскиЭлементам()

&НаКлиенте
Процедура РазрезыБюджетированияИмяТипаПоУмолчаниюАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.РазрезыБюджетирования.ТекущиеДанные;
	
	ИмяАналитики = СтрЗаменить(ТекущаяСтрока.ИмяРеквизита, "Учет_","");
	ТекНастройка = мКэшЗначений.НастройкиАналитик[ИмяАналитики];
	
	Если НЕ ТекНастройка = Неопределено 
		 И ЗначениеЗаполнено(ТекНастройка.Аналитика) Тогда
		
		 МассивВыбора = ТипыПоУмолчанию(ТекНастройка.Аналитика);
		 
		 Если МассивВыбора.Количество() > 1 Тогда
			 
			 ДанныеВыбора = Новый СписокЗначений;		 
			 Для каждого Эл Из МассивВыбора Цикл
				 
				 ДанныеВыбора.Добавить(Эл);
				 
			 КонецЦикла; 
			 СтандартнаяОбработка = Ложь;
			 
		 КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипыПоУмолчанию(Аналитика)
	
	МассивВыбора = РегистрыСведений.бит_НазначениеДополнительныхИзмерений.ПолучитьМассивТиповПоУмолчанию(Аналитика);	
	Возврат МассивВыбора;
	
КонецФункции // ПолучитьМассивТиповПоУмолчанию()

&НаКлиентеНаСервереБезКонтекста
Процедура РазрезыБюджетированияУстановитьЗаголовок(Форма)

	РазрезыЗаголовок = Нстр("ru = 'Разрезы бюджетирования'");
	Аналитики = "";
	Для каждого СтрокаТаблицы Из Форма.РазрезыБюджетирования Цикл
		Разделитель = ?(ПустаяСтрока(Аналитики), "", ", ");
		Если СтрокаТаблицы.ИспользоватьРазрез Тогда
			Аналитики = Аналитики + Разделитель + СтрокаТаблицы.Измерение;
		КонецЕсли; 
	КонецЦикла; 
	
	Разделитель = ?(ПустаяСтрока(Аналитики), "", ": ");
	Форма.Элементы.ГруппаРазрезыБюджетирования.ЗаголовокСвернутогоОтображения = РазрезыЗаголовок + Разделитель + Аналитики;
	
КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(Объект.НаименованиеПолное) 
	 ИЛИ Объект.НаименованиеПолное = Объект.Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПоказатель(ТипСтатьи)

	флЭтоПоказатель = ?(ТипСтатьи = ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.НефинансовыйПоказатель") 
	                     ИЛИ ТипСтатьи = ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.ФинансовыйПоказатель"), Истина, Ложь);
	
	Возврат флЭтоПоказатель;
	
КонецФункции // ЭтоПоказатель()

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Обязательный.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Обязательный");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РазрезыБюджетирования.ИспользоватьРазрез", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// РазрезыБюджетированияИмяТипаПоУмолчанию.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РазрезыБюджетированияИмяТипаПоУмолчанию");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"РазрезыБюджетирования.ИмяТипаПоУмолчаниюДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ТекстНедоступнойНадписи);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));

КонецПроцедуры
 
#КонецОбласти
