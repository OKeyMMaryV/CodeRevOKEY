
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.ВидНастройки = Перечисления.бит_ВидыНастроекРаспределенияБюджета.Простая Тогда		
		ИнициализироватьКомпоновщик(КомпоновщикДанные, ТекущийОбъект.ХранилищеНастроекДанные.Получить(), "Данные");
		ИнициализироватьКомпоновщик(КомпоновщикБаза, ТекущийОбъект.ХранилищеНастроекБаза.Получить(), "База");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаОбъектаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Объект);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИзмеренияБюджетирования = бит_БюджетированиеПовтИспВызовСервера.ИзмеренияБюджетирования("Сценарий");
	
	ЗаполнитьСпискиВыбора();
	ЗаполнитьДобавленныеКолонкиТаблиц();

	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Если Объект.ВидНастройки = Перечисления.бит_ВидыНастроекРаспределенияБюджета.Простая Тогда 
				РеквизитыЗначенияКопирования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ЗначениеКопирования, 
										"ХранилищеНастроекДанные, ХранилищеНастроекБаза");
				
				ИнициализироватьКомпоновщик(КомпоновщикДанные, РеквизитыЗначенияКопирования.ХранилищеНастроекДанные.Получить(), "Данные");
				ИнициализироватьКомпоновщик(КомпоновщикБаза, РеквизитыЗначенияКопирования.ХранилищеНастроекБаза.Получить(), "База");
			КонецЕсли;
		Иначе	
			Если Объект.ВидНастройки = Перечисления.бит_ВидыНастроекРаспределенияБюджета.Простая Тогда
				ИнициализироватьКомпоновщик(КомпоновщикДанные, Неопределено, "Данные");
				ИнициализироватьКомпоновщик(КомпоновщикБаза, Неопределено, "База");
			КонецЕсли; 
			СформироватьПравилаЗаполненияПоУмолчанию();
		КонецЕсли; 
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ХранилищеНастроекДанные = Новый ХранилищеЗначения(КомпоновщикДанные.ПолучитьНастройки());
	ТекущийОбъект.ХранилищеНастроекБаза   = Новый ХранилищеЗначения(КомпоновщикБаза.ПолучитьНастройки());
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидНастройкиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	ВидНастройкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникДанныеПриИзменении(Элемент)
	
	ПриИзмененииИсточниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникБазаПриИзменении(Элемент)
	
	ПриИзмененииИсточниковНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗаполнения

&НаКлиенте
Процедура ПравилаЗаполненияИмяПоляПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаЗаполнения.ТекущиеДанные;
	Если СтрЧислоВхождений(ТекущиеДанные.ПравилоЗаполнения, ТекущиеДанные.ИмяПоля) = 0 Тогда
		ТекущиеДанные.ПравилоЗаполнения = "";	
	КонецЕсли; 
	
	ЗаполнитьСписокВыбораДляПравилаЗаполнения();
	ЗаполнитьДобавленныеКолонкиСтрокиПравилаЗаполнения(ЭтотОбъект, ТекущиеДанные);
	ПриИзмененииПолейПравилЗаполнения(ТекущиеДанные);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПравилаЗаполненияПравилоЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПравилаЗаполнения.ТекущиеДанные;
	ЗаполнитьДобавленныеКолонкиСтрокиПравилаЗаполнения(ЭтотОбъект, ТекущиеДанные);
	ПриИзмененииПолейПравилЗаполнения(ТекущиеДанные);	

КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ЗаполнитьСписокВыбораДляПравилаЗаполнения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУсловияРаспределения

&НаКлиенте
Процедура УсловияРаспределенияПолеДанныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УсловияРаспределения.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПолеБазы) Тогда
		ТекущиеДанные.ПолеБазы = ТекущиеДанные.ПолеДанных;
	КонецЕсли; 
	ЗаполнитьДобавленныеКолонкиСтрокиУсловияРаспределения(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияРаспределенияПолеБазыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УсловияРаспределения.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПолеДанных) Тогда
		ТекущиеДанные.ПолеДанных = ТекущиеДанные.ПолеБазы;
	КонецЕсли; 
	ЗаполнитьДобавленныеКолонкиСтрокиУсловияРаспределения(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПравилаЗаполненияПоУмолчанию(Команда)
	
	СформироватьПравилаЗаполненияПоУмолчанию();	
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеНастройкиДанные(Команда)
	
	ВосстановитьСтандартныеНастройки(КомпоновщикДанные, "Данные");
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеНастройкиБаза(Команда)
	
	ВосстановитьСтандартныеНастройки(КомпоновщикБаза, "База");

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументРаспределениеБюджета(Команда)
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		Оповещение = Новый ОписаниеОповещения("СоздатьДокументРБВопросЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Элемент будет записан. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
	Иначе
		бит_РаботаСДиалогамиКлиент.ОткрытьНовуюФормуДокументаРаспределениеБюджета(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик оповещения "СоздатьДокументРБВопросЗавершение".
//
// Параметры:
// Ответ 			    - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура СоздатьДокументРБВопросЗавершение(Ответ, ДополнительныеДанные) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			Записать();
			бит_РаботаСДиалогамиКлиент.ОткрытьНовуюФормуДокументаРаспределениеБюджета(Объект.Ссылка);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокГруппировкаДанныхНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектАнализа", "Данные");
	ДополнительныеПараметры.Вставить("ГруппировкиСворачивания", ГруппировкиДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьЭлементыГруппировкиСворачиванияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ГруппировкиДанные.ПоказатьОтметкуЭлементов(ОписаниеОповещения, НСтр("ru = 'Укажите поля группировок';
																   	|en = 'Укажите поля группировок'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокГруппировкаБазыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектАнализа", "База");
	ДополнительныеПараметры.Вставить("ГруппировкиСворачивания", ГруппировкиБаза);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтметитьЭлементыГруппировкиСворачиванияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ГруппировкиБаза.ПоказатьОтметкуЭлементов(ОписаниеОповещения, НСтр("ru = 'Укажите поля группировок';
																   	|en = 'Укажите поля группировок'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьКомпоновщик(КомпоновщикНастроек, НастройкаКомпоновщика, ОбъектАнализа)
	
	ОтключенныеПоляГруппировок = Новый Массив;
	Если НастройкаКомпоновщика <> Неопределено Тогда
		Для каждого ПолеВыбора Из НастройкаКомпоновщика.Выбор.Элементы Цикл
			Если НЕ ПолеВыбора.Использование Тогда
				ОтключенныеПоляГруппировок.Добавить(ПолеВыбора.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикНастроек = Справочники.бит_НастройкиРаспределенияБюджета.ИнициализироватьКомпоновщик(НастройкаКомпоновщика);
	
	Если ОтключенныеПоляГруппировок.Количество() > 0 Тогда
		Для каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
			Если ОтключенныеПоляГруппировок.Найти(ПолеВыбора.Поле) <> Неопределено Тогда
				ПолеВыбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбъектАнализа = "Данные" Тогда
		ГруппировкиСворачивания = ГруппировкиДанные;
	Иначе // ОбъектАнализа = "База".
		ГруппировкиСворачивания = ГруппировкиБаза;
	КонецЕсли;
	
	ГруппировкиСворачивания.Очистить();
	
	ПустойТип = Новый ОписаниеТипов;
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Для каждого ДоступноеПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПолеВыбора.ТипЗначения = ПустойТип
			ИЛИ ДоступноеПолеВыбора.ТипЗначения = ТипЧисло
			ИЛИ ДоступноеПолеВыбора.Заголовок = "Ңе используется" Тогда
			Продолжить;
		КонецЕсли;
		ГруппировкиСворачивания.Добавить(ДоступноеПолеВыбора.Поле, ДоступноеПолеВыбора.Заголовок);
	КонецЦикла;
	
	Для каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		ЭлементСпискаВыбранногоПоля = ГруппировкиСворачивания.НайтиПоЗначению(ПолеВыбора.Поле);
		Если ЭлементСпискаВыбранногоПоля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЭлементСпискаВыбранногоПоля.Пометка = ПолеВыбора.Использование;
	КонецЦикла;
	
	ГруппировкиСворачивания.СортироватьПоПредставлению();
	ОбновитьЗаголовокПредставленияГруппировок(ОбъектАнализа);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокПредставленияГруппировок(ОбъектАнализа)
	
	Если ОбъектАнализа = "Данные" Тогда
		ГруппировкиСворачивания = ГруппировкиДанные;
	Иначе // ОбъектАнализа = "База".
		ГруппировкиСворачивания = ГруппировкиБаза;
	КонецЕсли;
	
	ЗаголовокГруппировки = "";
	
	Для каждого ПолеГруппировки Из ГруппировкиСворачивания Цикл
		Если НЕ ПолеГруппировки.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ЗаголовокГруппировки = ЗаголовокГруппировки + ПолеГруппировки.Представление + "; ";
	КонецЦикла;
	
	Если ПустаяСтрока(ЗаголовокГруппировки) Тогда
		ЗаголовокГруппировки = НСтр("ru = '<Выберите поля группировки>';
							   	|en = '<Choose group fields>'")
	КонецЕсли;
	
	Если ОбъектАнализа = "Данные" Тогда
		ЗаголовокГруппировкаДанных = ЗаголовокГруппировки;
	Иначе // ОбъектАнализа = "База".
		ЗаголовокГруппировкаБазы = ЗаголовокГруппировки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтандартныеНастройки(КомполновщикНастроек, ОбъектАнализа)
	
	ИнициализироватьКомпоновщик(КомполновщикНастроек, Неопределено, ОбъектАнализа);

КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьСпискиВыбора()

	ДоступныеПоляПравил.Очистить();
	
	Элементы.ПравилаЗаполненияИмяПоля.СписокВыбора.Очистить();
	Элементы.ПравилаЗаполненияПравилоЗаполнения.СписокВыбора.Очистить();
	Элементы.УсловияРаспределенияПолеДанных.СписокВыбора.Очистить();
	Элементы.УсловияРаспределенияПолеБазы.СписокВыбора.Очистить();
	
	Элементы.ПравилаЗаполненияИмяПоля.СписокВыбора.Добавить("Период", "Период");
	Элементы.УсловияРаспределенияПолеДанных.СписокВыбора.Добавить("Период", "Период");
	Элементы.УсловияРаспределенияПолеБазы.СписокВыбора.Добавить("Период", "Период");

	Количество = ИзмеренияБюджетирования.КоличествоИзмерений;
	Для Индекс = 1 По Количество Цикл		
		Элементы.ПравилаЗаполненияИмяПоля.СписокВыбора.Добавить(ИзмеренияБюджетирования["Измерение" + Индекс], 
			ИзмеренияБюджетирования["Измерение" + Индекс + "Представление"]);
		Элементы.УсловияРаспределенияПолеДанных.СписокВыбора.Добавить(ИзмеренияБюджетирования["Измерение" + Индекс], 
			ИзмеренияБюджетирования["Измерение" + Индекс + "Представление"]);
		Элементы.УсловияРаспределенияПолеБазы.СписокВыбора.Добавить(ИзмеренияБюджетирования["Измерение" + Индекс], 
			ИзмеренияБюджетирования["Измерение" + Индекс + "Представление"]);	
	КонецЦикла; 
	
	Если Объект.ВидНастройки = Перечисления.бит_ВидыНастроекРаспределенияБюджета.ИсточникиДанных Тогда
		СписокПолейДанных = ПоляИсточника(Объект.ИсточникДанные);
		СписокПолейБазы   = ПоляИсточника(Объект.ИсточникБаза);
	Иначе
		СписокПолейДанных = Элементы.ПравилаЗаполненияИмяПоля.СписокВыбора;
		СписокПолейБазы   = Элементы.ПравилаЗаполненияИмяПоля.СписокВыбора;
	КонецЕсли; 
	
	Для каждого Элемент Из СписокПолейДанных Цикл
		ДоступныеПоляПравил.Добавить("Данные" + Элемент.Значение, "Данные: " + Элемент.Представление);
	КонецЦикла; 
	
	Для каждого Элемент Из СписокПолейБазы Цикл
		ДоступныеПоляПравил.Добавить("База" + Элемент.Значение, "База: " + Элемент.Представление);
	КонецЦикла; 

	ДоступныеПоляПравил.Добавить("УказаноЯвно", НСтр("ru = 'Выбранным значением'"));
	Для каждого Элемент Из ДоступныеПоляПравил Цикл
		ЗаполнитьЗначенияСвойств(Элементы.ПравилаЗаполненияПравилоЗаполнения.СписокВыбора.Добавить(), Элемент);
	КонецЦикла; 

КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого СтрокаТаблицы Из Объект.ПравилаЗаполнения Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиПравилаЗаполнения(ЭтотОбъект, СтрокаТаблицы);
	КонецЦикла; 	

	Для каждого СтрокаТаблицы Из Объект.УсловияРаспределения Цикл
		ЗаполнитьДобавленныеКолонкиСтрокиУсловияРаспределения(ЭтотОбъект, СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиПравилаЗаполнения(Форма, ТекущиеДанные)

	Объект = Форма.Объект;
	ТекущиеДанные.ПредставлениеПоля = "";
	ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов;
	ТекущиеДанные.ПредставлениеПравила = "";
	
	Если ТекущиеДанные.ИмяПоля = "Период" Тогда
		ТекущиеДанные.ПредставлениеПоля = "Период";
		ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)); 		
	Иначе	
		Для Индекс = 1 По Форма.ИзмеренияБюджетирования.КоличествоИзмерений Цикл
			Если Форма.ИзмеренияБюджетирования["Измерение" + Индекс] = ТекущиеДанные.ИмяПоля Тогда		
				ТекущиеДанные.ПредставлениеПоля = Форма.ИзмеренияБюджетирования["Измерение" + Индекс + "Представление"];
				ТекущиеДанные.ТипЗначения = Форма.ИзмеренияБюджетирования["Измерение" + Индекс + "ТипЗначения"];		
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	НайденнаяСтрока = Форма.ДоступныеПоляПравил.НайтиПоЗначению(ТекущиеДанные.ПравилоЗаполнения);
	Если НайденнаяСтрока <> Неопределено Тогда
		ТекущиеДанные.ПредставлениеПравила = НайденнаяСтрока.Представление;
	КонецЕсли; 	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиУсловияРаспределения(Форма, ТекущиеДанные)

	Объект = Форма.Объект;
	ТекущиеДанные.ПредставлениеДанных = "";
	ТекущиеДанные.ПредставлениеБазы   = "";
	
	Если ТекущиеДанные.ПолеДанных = "Период" Тогда
		ТекущиеДанные.ПредставлениеДанных = "Период";
	КонецЕсли;
	
	Если ТекущиеДанные.ПолеБазы = "Период" Тогда
		ТекущиеДанные.ПредставлениеБазы = "Период";	
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ПредставлениеДанных) ИЛИ ПустаяСтрока(ТекущиеДанные.ПредставлениеБазы) Тогда
		Для Индекс = 1 По Форма.ИзмеренияБюджетирования.КоличествоИзмерений Цикл
			Если Форма.ИзмеренияБюджетирования["Измерение" + Индекс] = ТекущиеДанные.ПолеДанных Тогда		
				ТекущиеДанные.ПредставлениеДанных = Форма.ИзмеренияБюджетирования["Измерение" + Индекс + "Представление"];
			КонецЕсли; 
			Если Форма.ИзмеренияБюджетирования["Измерение" + Индекс] = ТекущиеДанные.ПолеБазы Тогда		
				ТекущиеДанные.ПредставлениеБазы = Форма.ИзмеренияБюджетирования["Измерение" + Индекс + "Представление"];
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПолейПравилЗаполнения(ТекущиеДанные)

	Если ТекущиеДанные.ПравилоЗаполнения = "УказаноЯвно" Тогда
		ТекущиеДанные.Значение = ТекущиеДанные.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
	Иначе			
		ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораДляПравилаЗаполнения()

	ТекущиеДанные = Элементы.ПравилаЗаполнения.ТекущиеДанные;
	
	Если Объект.ВидНастройки = ПредопределенноеЗначение("Перечисление.бит_ВидыНастроекРаспределенияБюджета.Простая") Тогда
		
		Если ПустаяСтрока(ТекущиеДанные.ИмяПоля) Тогда
			ТекущийСписок = ДоступныеПоляПравил;
		Иначе
			ТекущийСписок = Новый СписокЗначений();
			ПоляПоиска = Новый Массив(); 
			ПоляПоиска.Добавить("Данные" + ТекущиеДанные.ИмяПоля);
			ПоляПоиска.Добавить("База"   + ТекущиеДанные.ИмяПоля);
			ПоляПоиска.Добавить("УказаноЯвно");
			Для каждого ПолеПоиска Из ПоляПоиска Цикл
				НайденнаяСтрока = ДоступныеПоляПравил.НайтиПоЗначению(ПолеПоиска);
				Если НайденнаяСтрока <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ТекущийСписок.Добавить(), НайденнаяСтрока);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	Иначе
		ТекущийСписок = ДоступныеПоляПравил;
	КонецЕсли; 
	
	Индекс = 0;
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяПоля) Тогда
		НайденнаяСтрока = ТекущийСписок.НайтиПоЗначению(ТекущиеДанные.ИмяПоля);
		Если НайденнаяСтрока <> Неопределено Тогда
			Индекс = ТекущийСписок.Индекс(НайденнаяСтрока);
		Иначе	
			Индекс = 0;
		КонецЕсли; 
	КонецЕсли;
	
	СписокВыбора = Элементы.ПравилаЗаполненияПравилоЗаполнения.СписокВыбора;
	СписокВыбора.Очистить();
	Для каждого СтрокаТаблицы Из ТекущийСписок Цикл
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), СтрокаТаблицы);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ПоляИсточника(Источник)
	
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		Возврат Новый СписокЗначений(); 
	КонецЕсли;
	
	Поля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Поля").Выбрать();	
	СписокПолей = Новый СписокЗначений(); 
	Пока Поля.Следующий() Цикл
		Если Поля.Использование И Поля.ВидПоля = "Поле" Тогда
			Значение = ?(ПустаяСтрока(Поля.Синоним), Поля.Имя, Поля.Синоним);
			СписокПолей.Добавить(Значение, Значение);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат СписокПолей;
	
КонецФункции
 
&НаСервере 
Процедура ВидНастройкиПриИзмененииНаСервере()
	
	Если Объект.ВидНастройки = Перечисления.бит_ВидыНастроекРаспределенияБюджета.Простая Тогда
		ИнициализироватьКомпоновщик(КомпоновщикДанные, Неопределено, "Данные");
		ИнициализироватьКомпоновщик(КомпоновщикБаза, Неопределено, "База");
		
		Объект.ИсточникДанные = Неопределено;
		Объект.ИсточникБаза   = Неопределено;
	КонецЕсли; 
	
	ПриИзмененииИсточниковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсточниковНаСервере()

	ЗаполнитьСпискиВыбора();
	СформироватьПравилаЗаполненияПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПравилаЗаполненияПоУмолчанию()

	Модифицированность = Истина;
	
	Объект.ПравилаЗаполнения.Очистить();
	
	НоваяСтрока = Объект.ПравилаЗаполнения.Добавить();
	НоваяСтрока.ИмяПоля = "Период";
	
	НайденнаяСтрока = ДоступныеПоляПравил.НайтиПоЗначению("ДанныеПериод");
	Если НайденнаяСтрока <> Неопределено Тогда
		НоваяСтрока.ПравилоЗаполнения = НайденнаяСтрока.Значение;
	КонецЕсли;
	
	Количество = ИзмеренияБюджетирования.КоличествоИзмерений;
	Для Индекс = 1 По Количество Цикл		
		
		НоваяСтрока = Объект.ПравилаЗаполнения.Добавить();
		НоваяСтрока.ИмяПоля = ИзмеренияБюджетирования["Измерение" + Индекс];
		
		НайденнаяСтрока = ДоступныеПоляПравил.НайтиПоЗначению("Данные" + НоваяСтрока.ИмяПоля);
		Если НайденнаяСтрока <> Неопределено Тогда
			НоваяСтрока.ПравилоЗаполнения = "Данные" + НоваяСтрока.ИмяПоля;
		КонецЕсли;
	КонецЦикла; 
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Объект 	 = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоПростая   = Объект.ВидНастройки = ПредопределенноеЗначение("Перечисление.бит_ВидыНастроекРаспределенияБюджета.Простая");
	ЭтоИсточники = Объект.ВидНастройки = ПредопределенноеЗначение("Перечисление.бит_ВидыНастроекРаспределенияБюджета.ИсточникиДанных");
	                  		
	Элементы.СтраницаОтборы.Видимость = ЭтоПростая;
	Элементы.ИсточникДанные.Видимость = ЭтоИсточники;
	Элементы.ИсточникБаза.Видимость   = ЭтоИсточники;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// ПравилаЗаполненияЗначение.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПравилаЗаполненияЗначение");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПравилаЗаполнения.ПравилоЗаполнения", ВидСравненияКомпоновкиДанных.НеСодержит, "УказаноЯвно");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветНедоступногоТекста);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);		

	// ПравилаЗаполненияИмяПоля.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПравилаЗаполненияИмяПоля");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПравилаЗаполнения.ПредставлениеПоля", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", 
		Новый ПолеКомпоновкиДанных("Объект.ПравилаЗаполнения.ПредставлениеПоля"));
		
	// ПравилаЗаполненияПравилоЗаполнения.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПравилаЗаполненияПравилоЗаполнения");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ПравилаЗаполнения.ПредставлениеПравила", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", 
		Новый ПолеКомпоновкиДанных("Объект.ПравилаЗаполнения.ПредставлениеПравила"));
		
	// УсловияРаспределенияТекстРавно.	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УсловияРаспределенияТекстРавно");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.УсловияРаспределения.НомерСтроки", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "=");
	
	// УсловияРаспределенияПолеДанных.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УсловияРаспределенияПолеДанных");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.УсловияРаспределения.ПредставлениеДанных", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", 
		Новый ПолеКомпоновкиДанных("Объект.УсловияРаспределения.ПредставлениеДанных"));
		
	// УсловияРаспределенияПолеБазы.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УсловияРаспределенияПолеБазы");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.УсловияРаспределения.ПредставлениеБазы", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", 
		Новый ПолеКомпоновкиДанных("Объект.УсловияРаспределения.ПредставлениеБазы"));
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЭлементыГруппировкиСворачиванияЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрименитьИзмененияГруппировок(ДополнительныеПараметры.ОбъектАнализа);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияГруппировок(ОбъектАнализа)
	
	Если ОбъектАнализа = "Данные" Тогда
		ГруппировкиСворачивания = ГруппировкиДанные;
		КомпоновщикНастроек     = КомпоновщикДанные;
	Иначе // ОбъектАнализа = "База".
		ГруппировкиСворачивания = ГруппировкиБаза;
		КомпоновщикНастроек     = КомпоновщикБаза;
	КонецЕсли;
	
	Для каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		НастройкаГруппировки = ГруппировкиСворачивания.НайтиПоЗначению(ПолеВыбора.Поле);
		Если НастройкаГруппировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПолеВыбора.Использование = НастройкаГруппировки.Пометка;
	КонецЦикла;
	
	ОбновитьЗаголовокПредставленияГруппировок(ОбъектАнализа);
	
КонецПроцедуры

#КонецОбласти
