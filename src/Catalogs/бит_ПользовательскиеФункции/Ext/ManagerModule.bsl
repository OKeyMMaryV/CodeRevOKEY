#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбщегоНазначения
	
// Процедура обновляет тексты предопределенных элементов справочника пользовательские функции.
// 
// 
Процедура ОбновитьПредопределенныеЭлементы(Знач Макет = Неопределено, РежимСообщений = "Все") Экспорт
	
	ВыводитьОшибки     = ?(РежимСообщений="Все" ИЛИ РежимСообщений="Ошибки",Истина,Ложь);
	ВыводитьИнформацию = ?(РежимСообщений="Все",Истина,Ложь);
	
	Если Макет = Неопределено Тогда
		Макет = Справочники.бит_ПользовательскиеФункции.ПолучитьМакет("НастройкиПоУмолчанию");
	КонецЕсли;
	
	ТекстМакета = Макет.ПолучитьТекст();
	
	СтруктураТаблиц = Новый Структура;
	
	// Чтобы не уйти в вечный цикл
	КоличествоТаблиц = 0;
	
	// Получим данные таблиц из макета
	Пока Истина Цикл
		НомерПервойПозиции	  = Найти(ТекстМакета, "<Items");
		НомерПоследнейПозиции = Найти(ТекстМакета, "</Items>");
		
		Если НомерПервойПозиции = 0
			ИЛИ НомерПоследнейПозиции = 0
			ИЛИ КоличествоТаблиц > 99 Тогда
			
			Прервать;
		КонецЕсли;
		
		ТекстОписанияТаблицы = Сред(ТекстМакета, НомерПервойПозиции, НомерПоследнейПозиции+7);
		
		ТекстМакета = СтрЗаменить(ТекстМакета, ТекстОписанияТаблицы, "");
		
		Структура = бит_ОбщегоНазначения.ПрочитатьXMLВТаблицу(ТекстОписанияТаблицы);
		
		СтруктураТаблиц.Вставить(Структура.ИмяТаблицы, Структура.Данные);
		
		КоличествоТаблиц = КоличествоТаблиц + 1;
	КонецЦикла;
	
	Ном = 0;
	// Обработаем данные полученные из макета
	Для Каждого ОписаниеЭлемента Из СтруктураТаблиц.ТаблицаПредопределенныеЭлементы Цикл
		
		Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПредопределенного) Тогда
			Попытка
				СпрСсылка = Справочники.бит_ПользовательскиеФункции[ОписаниеЭлемента.ИмяПредопределенного];
			Исключение
				СпрСсылка = Неопределено;	
				
				Если ВыводитьОшибки Тогда
					
					ТекстСообщения = НСтр("ru = 'Не удалось найти предопределенный элемент справочника ""Пользовательские функции"" по имени %1%'");
					ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,ОписаниеЭлемента.ИмяПредопределенного);
					бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
					
				КонецЕсли;
				
			КонецПопытки;
		Иначе
			СпрСсылка = Неопределено;
		КонецЕсли;
		
		Если СпрСсылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если бит_ОбщегоНазначенияКлиентСервер.ВерсияОбновленияСтарше(СпрСсылка.Релиз,ОписаниеЭлемента.Релиз) Тогда
			
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			
			СпрОбъект.Наименование 				= ОписаниеЭлемента.Наименование;
			СпрОбъект.КодПодпрограммы 			= ОписаниеЭлемента.КодПодпрограммы;
			СпрОбъект.Описание 					= ОписаниеЭлемента.Описание;
			СпрОбъект.ТипВозвращаемогоЗначения 	= ОписаниеЭлемента.ТипВозвращаемогоЗначения;
			СпрОбъект.Контекст 					= Перечисления.бит_КонтекстыВыполненияПользовательскихФункций[ОписаниеЭлемента.Контекст];
			СпрОбъект.Релиз 					= ОписаниеЭлемента.Релиз;
			
			// Заполним таблицу ПараметрыФункции в элементе справочника.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИД", ОписаниеЭлемента.ИД);
			
			НайденныеПараметры = СтруктураТаблиц.ТаблицаПараметрыФункции.НайтиСтроки(СтруктураОтбора);
			
			Если НЕ НайденныеПараметры.Количество() = 0 Тогда
				СпрОбъект.ПараметрыФункции.Очистить();
				
				Для Каждого ОписаниеПараметра Из НайденныеПараметры Цикл
					
					НовыйПараметр = СпрОбъект.ПараметрыФункции.Добавить();
					НовыйПараметр.Наименование				  = ОписаниеПараметра.Наименование;
					НовыйПараметр.НеОбязательныйДляЗаполнения = ?(ОписаниеПараметра.НеОбязательныйДляЗаполнения="Истина", Истина, Ложь);
					
				КонецЦикла;
			КонецЕсли;
			
			флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьСправочник(СпрОбъект,,"Ошибки");
			Если флДействиеВыполнено Тогда
				
				Ном = Ном+1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыводитьИнформацию Тогда
		
		ТекстСообщения = НСтр("ru = 'Выполнена проверка версий предопределенных элементов справочника ""Пользовательские функции"". Обновлено %1% элементов.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(Ном));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует структуру заголовков для элемента справочника.
// 
Функция ПолучитьНазваниеПодпрограммыСПараметрами(Ссылка) Экспорт
	
	// Значения элементов структуры:
	// 
	// 	- ЗаголовокФункции: Функция МояФункция(Параметр1, Параметр2).
	// 	- НазваниеСПараметрами: МояФункция(Параметр1, Параметр2).
	// 	- ОписаниеПараметров: // Типы входных параметров: 
	// 						  // Параметр1 - 'Число'.
	// 						  // Параметр2 - 'Строка'.
	СтруктураПараметров = Новый Структура("ЗаголовокФункции,НазваниеСПараметрами,ОписаниеПараметров");
	
	ТекстНазвания = СокрЛП(Ссылка.Наименование) + "(";
	ТекстКомментария 	= "// Типы входных параметров: ";
	
	Для Каждого Параметр Из Ссылка.ПараметрыФункции Цикл
		
		ТекстНазвания = ТекстНазвания + СокрЛП(Параметр.Наименование);
		
		Если Параметр.НеОбязательныйДляЗаполнения Тогда
			ТекстНазвания = ТекстНазвания + " = Неопределено";
		КонецЕсли;
		
		Если ТипЗнч(Ссылка) = Тип("ДанныеФормыСтруктура") Тогда
			ОписаниеТипаПараметра = "";
		Иначе
			ОписаниеТипаПараметра = СокрЛП(Параметр.ТипПараметра.Получить());
		КонецЕсли;
		
		ТекстКомментария = ТекстКомментария + Символы.ПС + "// " + СокрЛП(Параметр.Наименование) + " - " + "'" + ОписаниеТипаПараметра + "'";
		
		Если не Параметр.НомерСтроки = Ссылка.ПараметрыФункции.Количество() Тогда
			ТекстНазвания = ТекстНазвания + ", ";
		КонецЕсли;	
		
	КонецЦикла;
	
	ТекстНазвания = ТекстНазвания + ")";
	
	СтруктураПараметров.ЗаголовокФункции	 = "Функция " + ТекстНазвания;
	СтруктураПараметров.НазваниеСПараметрами = ТекстНазвания;
	СтруктураПараметров.ОписаниеПараметров	 = ТекстКомментария;
	
	Возврат СтруктураПараметров;
	
КонецФункции	

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЦЫ ПАРАМЕТРОВ ПОЛЬЗОВАТЕЛЬСКОЙ ФУНКЦИИ.

#Область ПроцедурыЗаполненияТаблицыПараметровПользовательскойФункции



// Процедура заполняет параметры функции для переданного объекта.
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура, СправочникОбъект.бит_ПользовательскиеФункции.
// 
Процедура ЗаполнитьПараметры(Объект) Экспорт
	
	Если Объект.Контекст = Перечисления.бит_КонтекстыВыполненияПользовательскихФункций.ЗависимыеОбороты Тогда
		
		Объект.ПараметрыФункции.Очистить();
		ДобавитьПараметрыЗависимыеОбороты(Объект);
	
	ИначеЕсли Объект.Контекст = Перечисления.бит_КонтекстыВыполненияПользовательскихФункций.ЗагрузкаЭксель Тогда	
		
		Объект.ПараметрыФункции.Очистить();		
		ДобавитьПараметрыЗагрузкаЭксель(Объект);
		
	ИначеЕсли Объект.Контекст = Перечисления.бит_КонтекстыВыполненияПользовательскихФункций.ФинансовыеДоговора Тогда
		
		Объект.ПараметрыФункции.Очистить();
		ДобавитьПараметрыФинансовыеДоговора(Объект);	
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет добавляет параметр при отсутствии. 
// 
// Параметры:
//  ИмяПараметра – Строка.
// 
Процедура НайтиДобавитьПараметр(Объект, ИмяПараметра)

	СтрОтбор = Новый Структура("Наименование",ИмяПараметра);
   	МассивСтрок = Объект.ПараметрыФункции.НайтиСтроки(СтрОтбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
	
		НоваяСтрока = Объект.ПараметрыФункции.Добавить();
		НоваяСтрока.Наименование = ИмяПараметра;
	
	КонецЕсли; 

КонецПроцедуры // НайтиДобавитьПараметр()

// Процедура добавляет параметры, необходимые для контекста ЗависимыеОбороты.
// 
// 
Процедура ДобавитьПараметрыЗависимыеОбороты(Объект)

	НайтиДобавитьПараметр(Объект, "НастройкаРасчета");
	НайтиДобавитьПараметр(Объект, "СтрокаИсточник");
	НайтиДобавитьПараметр(Объект, "СтрокаПриемник");
	// Изменение кода. Начало. 07.05.2018{{
	НайтиДобавитьПараметр(Объект, "Сценарий");
	// Изменение кода. Конец. 07.05.2018}}

КонецПроцедуры // ДобавитьПараметрыЗависимыеОбороты()

// Процедура добавляет параметры, необходимые для контекста ЗагрузкаЭксель.
// 
// 
Процедура ДобавитьПараметрыЗагрузкаЭксель(Объект)

	НайтиДобавитьПараметр(Объект, "СтрокаЗагрузки");
	НайтиДобавитьПараметр(Объект, "ДанныеЗагрузки");
	НайтиДобавитьПараметр(Объект, "СтрокаПравил");

КонецПроцедуры // ДобавитьПараметрыЗагрузкаЭксель() 

// Процедура добавляет параметры, необходимые для контекста ФинансовыеДоговора.
// 
// 
Процедура ДобавитьПараметрыФинансовыеДоговора(Объект)

	НайтиДобавитьПараметр(Объект, "ПараметрыПлатежа");
	НайтиДобавитьПараметр(Объект, "ДанныеПериодаРасчета");

КонецПроцедуры // ДобавитьПараметрыЗагрузкаЭксель() 


#КонецОбласти
 
#КонецЕсли
