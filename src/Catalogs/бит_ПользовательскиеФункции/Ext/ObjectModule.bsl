#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
	
Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытия(Отказ, ЭтотОбъект.ДополнительныеСвойства);
		
КонецПроцедуры // ПередЗаписью()
	
Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		// В случае выполнения обмена данными не производить проверку.
		Возврат;			
	КонецЕсли; 
		
	бит_ук_СлужебныйСервер.РегистрацияПриЗаписи(Отказ, ЭтотОбъект.ДополнительныеСвойства, Метаданные().ПолноеИмя());
		
КонецПроцедуры // ПриЗаписи()	

// Процедура - обработчик события "ОбработкаЗаполнения".
// 
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтоГруппа Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			
			ДанныеЗаполнения.Свойство("Наименование"    , Наименование);
			ДанныеЗаполнения.Свойство("Контекст"	    , Контекст);
			ДанныеЗаполнения.Свойство("КодПодпрограммы" , КодПодпрограммы);
			
			// Если ДанныеЗаполнения.Свойство("ПараметрыФункции") <> Неопределено Тогда				
			// 	Для Каждого ТекущийПараметр Из ДанныеЗаполнения.ПараметрыФункции Цикл					
			// 		НовыйПараметр = ПараметрыФункции.Добавить();		
			// 		НовыйПараметр.Наименование = ТекущийПараметр.Ключ; 		
			// 		ЗаполнитьЗначенияСвойств(НовыйПараметр, ТекущийПараметр.Значение);		
			// 	КонецЦикла;			
			// КонецЕсли;
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Контекст) Тогда			
			Контекст = Перечисления.бит_КонтекстыВыполненияПользовательскихФункций.Произвольный;			
		КонецЕсли; 
		
		Если ПустаяСтрока(КодПодпрограммы) Тогда		
			КодПодпрограммы = КодПодпрограммы + Символы.ПС + Символы.ПС + "Результат = ";		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
		Релиз = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка имен параметров
	СтрВрем = Новый Структура;
	
	Для каждого СтрокаТаблицы Из Переменные Цикл
		
		НомСтроки = СтрокаТаблицы.НомерСтроки-1;
		
		Попытка
		
			флЕстьСвойство = СтрВрем.Свойство(СтрокаТаблицы.Имя);
		
		Исключение
			
			флЕстьСвойство = Ложь;
			
		КонецПопытки;
		
		Если НЕ флЕстьСвойство Тогда
			
			Попытка
				
				СтрВрем.Вставить(СтрокаТаблицы.Имя);
				
			Исключение
				
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Обнаружено некорректное имя ""%1%"" в таблице ""Переменные"".'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.Имя);
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, ЭтотОбъект, "Переменные["+НомСтроки+"].Имя");
				
				
			КонецПопытки;
			
		Иначе	
			
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Обнаружено дублирующееся имя ""%1%"" в таблице ""Переменные"".'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтрокаТаблицы.Имя);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, ЭтотОбъект, "Переменные["+НомСтроки+"].Имя");
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
