
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ХранилищеДеревоОбъектов = ?(Параметры.Свойство("ХранилищеДеревоОбъектов"),
								Параметры.ХранилищеДеревоОбъектов,
								Неопределено);
	ИмяТекущего 			= ?(Параметры.Свойство("ИмяТекущего"),
								Параметры.ИмяТекущего,
								Неопределено);
	АдресКомОбъекта			= ?(Параметры.Свойство("АдресКомОбъекта"),
								Параметры.АдресКомОбъекта,
								Неопределено);
	СостояниеПодключенияКОМ = ?(Параметры.Свойство("СостояниеПодключенияКОМ"),
								Параметры.СостояниеПодключенияКОМ,
								Неопределено);
	ВидТекущейИБ 			= ?(Параметры.Свойство("ВидТекущейИБ"),
								Параметры.ВидТекущейИБ,
								Неопределено);
	ВидПодключеннойИБ 		= ?(Параметры.Свойство("ВидПодключеннойИБ"),
								Параметры.ВидПодключеннойИБ,
								Неопределено);
	
	ПеречСостоянияПодключения = Перечисления.бит_мпд_СостоянияПодключенияИБ;
	
	// Заполним дерево объектов
	Если ХранилищеДеревоОбъектов = Неопределено Тогда
		
		НастройкаПодключения = ВидТекущейИБ.НастройкаПодключенияПоУмолчанию;
		
		Если НастройкаПодключения.РасположениеБазы = Перечисления.бит_мпд_ВидыРасположенияИнформационныхБаз.RestСервис Тогда
			
			// Получение дерева объектов по HTTP
			СформироватьДеревоОбъектовHTTP(НастройкаПодключения);
			
		Иначе	
			
			
			Если ВидТекущейИБ <> ВидПодключеннойИБ
			ИЛИ СостояниеПодключенияКОМ = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена 
			ИЛИ ХранилищеДеревоОбъектов = Неопределено Тогда
			
				// Проверим подключение, если вид информационной базы - внешняя.
				СоединениеИБ = бит_мпд_ВнешниеИсточникиСервер.ПолучитьСоединениеИБ(СостояниеПодключенияКОМ, 
																					ВидТекущейИБ, 
																					ВидПодключеннойИБ, 
																					"КОМ",
																					АдресКомОбъекта,
																					фТекстОшибки);
				
				Если СостояниеПодключенияКОМ = ПеречСостоянияПодключения.ВнешняяБаза_НеПодключена Тогда
					
					фОтказ = Истина;
					
				Иначе
					
					ИспользоватьКОМ = СостояниеПодключенияКОМ = ПеречСостоянияПодключения.ВнешняяБаза_Подключена;
					СформироватьДеревоОбъектов(	ИспользоватьКОМ,
												СоединениеИБ,
												ВидТекущейИБ, 
												ВидПодключеннойИБ);
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли; 
										
	Иначе
		
		Если ТипЗнч(ХранилищеДеревоОбъектов) = Тип("ХранилищеЗначения") Тогда
			
			ДеревоЗнОбъектов = бит_ОбщегоНазначения.РаспаковатьДеревоЗначений(ХранилищеДеревоОбъектов);
			Если ДеревоЗнОбъектов <> Неопределено Тогда
			 	ЗначениеВДанныеФормы(ДеревоЗнОбъектов, ДеревоОбъектов);		
			КонецЕсли;	
		
		КонецЕсли;    		                                                 									
		
	КонецЕсли;
	
	// Выделим текущую строку дерева
	УстановитьТекущуюСтрокуДерева(ИмяТекущего);  	
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда 	
		Оповестить("ОшибкаСоединенияИБ", фТекстОшибки);
		фТекстОшибки = "";
		Отказ = Истина;
		Возврат;	
	КонецЕсли;     	
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектов

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ОбработатьВыбор();
	
КонецПроцедуры // ДеревоОбъектовВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОбработатьВыбор();
	
КонецПроцедуры // ОК()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обрабатывает выбор элемента метаданных.
// 
&НаКлиенте
Процедура ОбработатьВыбор()

	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.ИмяОбъектаПолное) Тогда
		Возврат;	
	КонецЕсли;
	
	ХранилищеДеревоОбъектов = СформироватьХранилищеДереваОбъектов();
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ИмяОбъектаПолное"	      , ТекущиеДанные.ИмяОбъектаПолное);
	СтруктураРезультата.Вставить("ВидОбъекта"		      , ТекущиеДанные.ВидОбъекта);
	СтруктураРезультата.Вставить("ХранилищеДеревоОбъектов", ХранилищеДеревоОбъектов);
	СтруктураРезультата.Вставить("АдресКомОбъекта"	 	  , АдресКомОбъекта);
	СтруктураРезультата.Вставить("СостояниеПодключенияКОМ", СостояниеПодключенияКОМ);
	СтруктураРезультата.Вставить("ВидПодключеннойИБ"	  , ВидПодключеннойИБ);
	
	Закрыть(СтруктураРезультата);

КонецПроцедуры // ОбработатьВыбор()

// Функция формирует дерево объектов метеденных.
// 
// Параметры:
//  ИспользоватьКОМ   - Булево.
//  СоединениеИБ  	  - COMОбъект.
//  ВидТекущейИБ      - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
//  ВидПодключеннойИБ - СправочникСсылка.бит_мпд_ВидыИнформационныхБаз.
// 
&НаСервере
Процедура СформироватьДеревоОбъектов(ИспользоватьКОМ, СоединениеИБ, ВидТекущейИБ, ВидПодключеннойИБ)
	
	МетаданныеИБ = ?(ИспользоватьКОМ, СоединениеИБ.Метаданные, Метаданные);
	
	КореньДерева = ДеревоОбъектов.ПолучитьЭлементы();
	ЗначенияПеречисления = Метаданные.Перечисления.бит_мпд_ВидыОбъектовМетаданных.ЗначенияПеречисления;
	
	Для каждого ЭлПеречисление Из ЗначенияПеречисления Цикл
		
		ИмяВидаОбъекта = ЭлПеречисление.Имя;
		ВидОбъектов    = ЭлПеречисление.Комментарий;
		СинонимВида    = ЭлПеречисление.Синоним;
		ВидОбъекта     = Перечисления.бит_мпд_ВидыОбъектовМетаданных[ЭлПеречисление.Имя];
		
		// Строка группы
		СтрокаДерева = КореньДерева.Добавить();				
		СтрокаДерева.СинонимОбъекта = СинонимВида;
		КартинкаВида = бит_мпд_ВнешниеИсточникиСервер.ОпределитьКартинкуВидаМетаданных(ВидОбъекта);
		Если КартинкаВида <> Неопределено Тогда
			СтрокаДерева.Картинка = КартинкаВида;
		КонецЕсли;
		
		// Строки нижнего уровня дерева
		МетаданныеОбъектов = МетаданныеИБ[ВидОбъектов];
		
		УзелДерева = СтрокаДерева.ПолучитьЭлементы();
		Для каждого МетаОбъект Из МетаданныеОбъектов Цикл
		
			ПодстрокаДерева = УзелДерева.Добавить();
			ПодстрокаДерева.СинонимОбъекта   = МетаОбъект.Синоним;
			ПодстрокаДерева.ИмяОбъектаПолное = ИмяВидаОбъекта + "." + МетаОбъект.Имя;
			ПодстрокаДерева.ВидОбъекта = ВидОбъекта;
			
		КонецЦикла;
		
	КонецЦикла;  
	
КонецПроцедуры // СформироватьДеревоОбъектов()

// Процедура 
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаСервере
Процедура ДобавитьСтрокуДерева(СтрокаВерх ,ИмяОбъекта, Синоним = "", ВидОбъекта, Картинка = Неопределено)
	
	СтрокаДерева = СтрокаВерх.Строки.Добавить();
	СтрокаДерева.ИмяОбъектаПолное = ИмяОбъекта;
	СтрокаДерева.СинонимОбъекта   = ?(ЗначениеЗаполнено(Синоним), Синоним, ИмяОбъекта);
	СтрокаДерева.ВидОбъекта       = ВидОбъекта;
	СтрокаДерева.Картинка         = Картинка;
	
КонецПроцедуры // ДобавитьСтрокуДерева()

// функция определяет ВидОбъекта по английскому имени класса. 
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаСервере
Функция ОпределитьВидОбъектаПоИмениКласса(ИмяКлассаАнгл)
	
	ИмяКласса = бит_мпд_ВнешниеИсточникиСервер.ПеревестиИмяКласса(ИмяКлассаАнгл);
	
	Попытка
		
		ВидОбъекта = Перечисления.бит_мпд_ВидыОбъектовМетаданных[ИмяКласса];
		
	Исключение
		
		ВидОбъекта = Неопределено;
		
	КонецПопытки; 
	
	Возврат ВидОбъекта;
	
КонецФункции // ОпределитьВидОбъектаПоИмениКласса()

// Процедура формирует дерево объектов удаленной ИБ по HTTP.
// 
&НаСервере
Процедура СформироватьДеревоОбъектовHTTP(НастройкаПодключения)
	
	ДеревоОбъектов.ПолучитьЭлементы().Очистить();	
	
	ДеревоВрем = Новый ДеревоЗначений;
	ДеревоВрем.Колонки.Добавить("ИмяОбъектаПолное");
	ДеревоВрем.Колонки.Добавить("СинонимОбъекта");
	ДеревоВрем.Колонки.Добавить("ВидОбъекта");
	ДеревоВрем.Колонки.Добавить("Картинка");
	
	ТекВид = Перечисления.бит_мпд_ВидыОбъектовМетаданных.Справочник;
	ДобавитьСтрокуДерева(ДеревоВрем, "Справочник", , ТекВид, бит_мпд_ВнешниеИсточникиСервер.ОпределитьКартинкуВидаМетаданных(ТекВид));
	
	ТекВид = Перечисления.бит_мпд_ВидыОбъектовМетаданных.Перечисление;
	ДобавитьСтрокуДерева(ДеревоВрем, "Перечисление", , ТекВид, бит_мпд_ВнешниеИсточникиСервер.ОпределитьКартинкуВидаМетаданных(ТекВид));
	
	ТекВид = Перечисления.бит_мпд_ВидыОбъектовМетаданных.Документ;
	ДобавитьСтрокуДерева(ДеревоВрем, "Документ", , ТекВид, бит_мпд_ВнешниеИсточникиСервер.ОпределитьКартинкуВидаМетаданных(ТекВид));
	
	ТекВид = Перечисления.бит_мпд_ВидыОбъектовМетаданных.ПланСчетов;
	ДобавитьСтрокуДерева(ДеревоВрем, "ПланСчетов", , ТекВид, бит_мпд_ВнешниеИсточникиСервер.ОпределитьКартинкуВидаМетаданных(ТекВид));
	
	ТекВид = Перечисления.бит_мпд_ВидыОбъектовМетаданных.ПланВидовХарактеристик;
	ДобавитьСтрокуДерева(ДеревоВрем, "ПланВидовХарактеристик", , ТекВид, бит_мпд_ВнешниеИсточникиСервер.ОпределитьКартинкуВидаМетаданных(ТекВид));
	
	Ответ = бит_мпд_ПовтИсп.ПолучитьМетаданныеHTTP(НастройкаПодключения, Истина);
	
	Если Ответ.КодСостояния = 200 Тогда
		
		СтрОтвет = Ответ.ПолучитьТелоКакСтроку();
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(СтрОтвет);
		
		Пока Чтение.Прочитать() Цикл
			
			Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента 
				 И (Чтение.Имя = "EntityType" ИЛИ Чтение.Имя = "EnumType")  Тогда
				
				ИмяОбъектаПолноеАнгл = Чтение.ПолучитьАтрибут("Name");
				Если Чтение.Имя = "EnumType" Тогда
					
					ИмяКласса  = "Enum";
					ИмяОбъекта = ИмяОбъектаПолноеАнгл;
					ВидОбъекта = ОпределитьВидОбъектаПоИмениКласса(ИмяКласса);
					
				Иначе	
					
					НомРазд    = Найти(ИмяОбъектаПолноеАнгл,"_");
					ИмяКласса  = Лев(ИмяОбъектаПолноеАнгл, НомРазд-1);
					ИмяОбъекта = Сред(ИмяОбъектаПолноеАнгл, НомРазд+1);
					ВидОбъекта = ОпределитьВидОбъектаПоИмениКласса(ИмяКласса);
					
				КонецЕсли; 
				
				Если НЕ ЗначениеЗаполнено(ВидОбъекта) Тогда
				
					Продолжить;
				
				КонецЕсли; 
				
				СтрОтбор = Новый Структура("ВидОбъекта", ВидОбъекта);
				
				НайденныеСтроки = ДеревоВрем.Строки.НайтиСтроки(СтрОтбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
				
					СтрокаКоллекция = НайденныеСтроки[0];
					ИмяОбъектаПолное = бит_РаботаСМетаданными.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_мпд_ВидыОбъектовМетаданных, ВидОбъекта)+"."+ИмяОбъекта;
					ДобавитьСтрокуДерева(СтрокаКоллекция, ИмяОбъектаПолное, ИмяОбъекта, ВидОбъекта);
				
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ЗначениеВДанныеФормы(ДеревоВрем, ДеревоОбъектов);
	
КонецПроцедуры // СформироватьДеревоОбъектовHTTP()

// Процедура устанавливает текущую строку дерева.
// 
// Параметры:
//  ИмяОбъектаПолное   - Строка
// 
&НаСервере
Процедура УстановитьТекущуюСтрокуДерева(ИмяОбъектаПолное)

	ЗначенияПеречисления = Метаданные.Перечисления.бит_мпд_ВидыОбъектовМетаданных.ЗначенияПеречисления;
	
	Если ЗначениеЗаполнено(ИмяОбъектаПолное) Тогда
		МассивПути = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ИмяОбъектаПолное, ".");
		Если МассивПути.Количество() = 2 Тогда
			ИмяВидаОбъекта     = МассивПути[0];
			СинонимВидаОбъекта = ЗначенияПеречисления[ИмяВидаОбъекта].Синоним;
		КонецЕсли;
	КонецЕсли;
	
	КореньДерева = ДеревоОбъектов.ПолучитьЭлементы(); 
	
	Для каждого СтрокаВерх Из КореньДерева Цикл
		
		Если СтрокаВерх.СинонимОбъекта = СинонимВидаОбъекта Тогда
			
			УзелДерева = СтрокаВерх.ПолучитьЭлементы();
			Для каждого СтрокаДерева Из УзелДерева Цикл
				
				Если СтрокаДерева.ИмяОбъектаПолное = ИмяОбъектаПолное Тогда
					
					ИД = СтрокаДерева.ПолучитьИдентификатор();
					Элементы.ДеревоОбъектов.ТекущаяСтрока = ИД;
					Прервать;
					
				КонецЕсли;				
				
			КонецЦикла;
						
		КонецЕсли; 		
	
	КонецЦикла;    	

КонецПроцедуры // УстановитьТекущуюСтрокуДерева()

// Функция формирует хранилище дерева объектов.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   Хранилище значений
// 
&НаСервере
Функция СформироватьХранилищеДереваОбъектов()

	ДеревоЗнОбъектов  = РеквизитФормыВЗначение("ДеревоОбъектов", Тип("ДеревоЗначений"));
	ХранилищеДереваОбъектов = бит_ОбщегоНазначения.УпаковатьДеревоЗначений(ДеревоЗнОбъектов);   

	Возврат ХранилищеДереваОбъектов;
	
КонецФункции // СформироватььХранилищеДереваОбъектов()

#КонецОбласти
