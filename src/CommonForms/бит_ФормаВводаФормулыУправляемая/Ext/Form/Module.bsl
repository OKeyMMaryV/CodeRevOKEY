
#Область ОбработчикиСобытийФормы
                     
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекстИсходный = СокрЛП(Параметры.Текст);
	
	Если Параметры.Свойство("Ссылка") И Параметры.Свойство("Владелец") Тогда
		
		фРежимЗаполненияФормулы = "Для элемента данных";
		
		Ссылка 			 = Параметры.Ссылка;
		СпособКомпоновки = Параметры.Владелец;
		
		ЗаполнитьДеревоАргументов(Ссылка, СпособКомпоновки);
		
		// Видимость элементов
		Элементы.ТаблицаОбластей.Видимость = Ложь;
		
	ИначеЕсли Параметры.Свойство("ТаблицаОбластей") Тогда
		
		фРежимЗаполненияФормулы = "Для настройки произвольных отчетов";
		
		ВрТабл = ДанныеФормыВЗначение(Параметры.ТаблицаОбластей, Тип("ТаблицаЗначений"));
		ЗначениеВДанныеФормы(ВрТабл, ТаблицаОбластей);
		
		// Видимость элементов
		Элементы.КодНаименование.Видимость   = Ложь;
		Элементы.ДеревоАргументов.Видимость  = Ложь;
		
	Иначе
		
		фОтказ = Истина;
		Возврат;
		
	КонецЕсли;	
	
	Элементы.КодНаименование.Пометка = Ложь;
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьТекстФормулы();	
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаАргументов

&НаКлиенте
Процедура ДеревоАргументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если Элементы.КодНаименование.Пометка Тогда
		УстанавливаемыйТекст = "[" + ТекущиеДанные.Наименование + "]";
	Иначе
		УстанавливаемыйТекст = "[" + ТекущиеДанные.Код + "]";
    КонецЕсли;
	
	УстановитьТекстЯчейки(УстанавливаемыйТекст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОбластей

&НаКлиенте
Процедура ТаблицаОбластейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьТекстЯчейки("[" + СокрЛП(ТекущиеДанные.ИмяОбласти) + "]");
	
КонецПроцедуры // ТаблицаОбластейВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	    	      	
	Если фРежимЗаполненияФормулы = "Для элемента данных" Тогда	
		
		// Для элементов данных
		ПрефПарам = "[";
		ПостПарам = "]";
		
		ЗаменитьКодПредставление(Ложь);                             
		ТекстРезультат = ТекстФормулы.ПолучитьТекст();

		Результат = Новый Структура;
		Результат.Вставить("ТекстФормулы", ТекстФормулы.ПолучитьТекст());
		
		// Массив строк расчета
		МассивСтрокРасчета = Новый Массив;
		ЗаполнитьМассивСтрокРасчета_ОбходДерева(ДеревоАргументов, МассивСтрокРасчета, ТекстРезультат, ПрефПарам, ПостПарам);
		
		Результат.Вставить("МассивСтрокРасчета", МассивСтрокРасчета);
		
	Иначе
		
		// Для областей настроек произвольных отчетов.
		Результат = ТекстФормулы.ПолучитьТекст();
	
	КонецЕсли;    	

	Закрыть(Результат);	
	
КонецПроцедуры // ОК()

&НаКлиенте
Процедура СправочнаяИнформация(Команда)
	
	ОткрытьСправочнуюИнформацию();
	
КонецПроцедуры // СправочнаяИнформация()

&НаКлиенте
Процедура Плюс(Команда)
	
	УстановитьТекстЯчейки("+");
	
КонецПроцедуры

&НаКлиенте
Процедура Минус(Команда)
	
	УстановитьТекстЯчейки("-");
	
КонецПроцедуры

&НаКлиенте
Процедура Умножить(Команда)
	
	УстановитьТекстЯчейки("*");
	
КонецПроцедуры

&НаКлиенте
Процедура Разделить(Команда)
	
	УстановитьТекстЯчейки("/");	
	
КонецПроцедуры

&НаКлиенте
Процедура СкобкаОткрыть(Команда)
	
	УстановитьТекстЯчейки("(");
	
КонецПроцедуры

&НаКлиенте
Процедура СкобкаЗакрыть(Команда)
	
	УстановитьТекстЯчейки(")");
	
КонецПроцедуры
 
&НаКлиенте
Процедура Условие(Команда)
	
	УстановитьТекстЯчейки("?");
	
КонецПроцедуры

&НаКлиенте
Процедура Меньше(Команда)
	
	УстановитьТекстЯчейки("<");
	
КонецПроцедуры

&НаКлиенте
Процедура Равно(Команда)
	
	УстановитьТекстЯчейки("=");
	
КонецПроцедуры

&НаКлиенте
Процедура Больше(Команда)
	
	УстановитьТекстЯчейки(">");
	
КонецПроцедуры
 
&НаКлиенте
Процедура Минимум(Команда)
	
	УстановитьТекстЯчейки("Мин");
	
КонецПроцедуры

&НаКлиенте
Процедура Максимум(Команда)
	
	УстановитьТекстЯчейки("Макс");
	
КонецПроцедуры

&НаКлиенте
Процедура Число1(Команда)
	
	УстановитьТекстЯчейки("1");
	
КонецПроцедуры
     
&НаКлиенте
Процедура Число2(Команда)
	
	УстановитьТекстЯчейки("2");
	
КонецПроцедуры
     
&НаКлиенте
Процедура Число3(Команда)
	
	УстановитьТекстЯчейки("3");
	
КонецПроцедуры
     
&НаКлиенте
Процедура Число4(Команда)
	
	УстановитьТекстЯчейки("4");
	
КонецПроцедуры
     
&НаКлиенте
Процедура Число5(Команда)
	
	УстановитьТекстЯчейки("5");
	
КонецПроцедуры
    
&НаКлиенте
Процедура Число6(Команда)
	
	УстановитьТекстЯчейки("6");
	
КонецПроцедуры
     
&НаКлиенте
Процедура Число7(Команда)
	
	УстановитьТекстЯчейки("7");
	
КонецПроцедуры
      
&НаКлиенте
Процедура Число8(Команда)
	
	УстановитьТекстЯчейки("8");
	
КонецПроцедуры
        
&НаКлиенте
Процедура Число9(Команда)
	
	УстановитьТекстЯчейки("9");
	
КонецПроцедуры

&НаКлиенте
Процедура Число0(Команда)
	
	УстановитьТекстЯчейки("0");
	
КонецПроцедуры
      
&НаКлиенте
Процедура Собака(Команда)
	
	УстановитьТекстЯчейки("@");
	
КонецПроцедуры
     
&НаКлиенте
Процедура Точка(Команда)
	
	УстановитьТекстЯчейки(".");
	
КонецПроцедуры
      
&НаКлиенте
Процедура Запятая(Команда)
	
	УстановитьТекстЯчейки(",");
	
КонецПроцедуры

&НаКлиенте
Процедура КодНаименование(Команда)
	
	Элементы.КодНаименование.Пометка = Не Элементы.КодНаименование.Пометка;		
	
	ЗаменитьКодПредставление(Элементы.КодНаименование.Пометка);

КонецПроцедуры // КодНаименование()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает текст ячейки
// 
// Параметры:
//  ТекстЯчейки - Строка
// 
&НаКлиенте
Процедура УстановитьТекстЯчейки(ТекстЯчейки)

	Элементы.ТекстФормулы.ВыделенныйТекст = ТекстЯчейки;
		
КонецПроцедуры // УстановитьТекстЯчейки()

// Процедура заполняет текст формулы.
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура ЗаполнитьТекстФормулы()

	КоличествоСимволов = СтрДлина(ТекстИсходный);
	           
	Если КоличествоСимволов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрефПарам = "[";
	ПостПарам = "]";

	ТекстЯчейки = "";

	Для Индекс = 1 По КоличествоСимволов Цикл

		ТекСимвол = Сред(ТекстИсходный, Индекс, 1);

		Если ТекСимвол = ПрефПарам Тогда  // Формируем текст аргумента расчета

			ТекстЯчейки = ТекстЯчейки + ТекСимвол;

		ИначеЕсли ТекСимвол = ПостПарам Тогда // Устанавливаем текст аргумента расчета


			ТекстЯчейки = ТекстЯчейки + ТекСимвол;
			УстановитьТекстЯчейки(ТекстЯчейки);
			ТекстЯчейки = "";

		Иначе

			Если ТекстЯчейки = "" Тогда // Устанавливаем операнд расчета

				УстановитьТекстЯчейки(ТекСимвол);

			Иначе // Формируем текст аргумента расчета

				ТекстЯчейки = ТекстЯчейки + ТекСимвол;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;   

КонецПроцедуры // ЗаполнитьТекстФормулы()

// Процедура заполняет дерево аргументов.
// 
// Параметры:
//  ВыборкаДерево  		- ДеревоЗначений, СтрокаДереваЗначений.
//  ДеревоАрг			- ДанныеФормыДерево.
//  СловарьНаименований - Соответсвие.
//  ТекущееЗначениеВерх - СправочникСсылка.бит_ЭлементыДанных.
// 
&НаСервере
Процедура ЗаполнитьДеревоАргументов_ОбходДерева(ВыборкаДерево, ДеревоАрг, СловарьНаименований, ТекущееЗначениеВерх = Неопределено)

	ВыборкаВетка   = ВыборкаДерево.Строки;
	ВеткаДереваАрг = ДеревоАрг.ПолучитьЭлементы();
	
	Для каждого Выборка Из ВыборкаВетка Цикл
			
		ТекущееЗначение = Выборка.СтрокаРасчета;
		
		Если ТекущееЗначениеВерх = Неопределено ИЛИ ТекущееЗначениеВерх <> ТекущееЗначение Тогда
			
			СтрокаДереваАрг = ВеткаДереваАрг.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДереваАрг, Выборка);
			
			КоличествоВхождений = СловарьНаименований[СтрокаДереваАрг.Наименование];
			КоличествоВхождений = ?(КоличествоВхождений = Неопределено, 0, КоличествоВхождений);
			ТекНаименование = ?(КоличествоВхождений > 0, СтрокаДереваАрг.Наименование + "_" + (КоличествоВхождений + 1), СтрокаДереваАрг.Наименование);
			СловарьНаименований.Вставить(СтрокаДереваАрг.Наименование, КоличествоВхождений + 1);

			ЗаполнитьДеревоАргументов_ОбходДерева(Выборка, СтрокаДереваАрг, СловарьНаименований, ТекущееЗначение);
			
		КонецЕсли;	
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДеревоАргументов_ОбходДерева()

// Процедура заполняет дерево аргументов.
// 
// Параметры:
//  Ссылка  		- СправочникСсылка.бит_ЭлементыДанных.
//  СпособКомпновки - СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных.
// 
&НаСервере
Процедура ЗаполнитьДеревоАргументов(Ссылка, СпособКомпоновки)

	НачальныйСписок = Новый СписокЗначений;
	НачальныйСписок.Добавить(Ссылка);
	
	СловарьНаименований = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтрокиРасчета.Код КАК Код,
	|	СтрокиРасчета.Ссылка КАК СтрокаРасчета,
	|	СтрокиРасчета.Кодификатор,
	|	СтрокиРасчета.Наименование,
	|	СтрокиРасчета.Родитель КАК Родитель
	|ИЗ
	|	Справочник.бит_ЭлементыДанных КАК СтрокиРасчета
	|ГДЕ
	|	СтрокиРасчета.Владелец = &Владелец
	|	И НЕ СтрокиРасчета.Ссылка В (&СписокИсключаемыхСтрок)
	|	И НЕ СтрокиРасчета.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Кодификатор
	|ИТОГИ ПО
	|	СтрокаРасчета ИЕРАРХИЯ
	|";

	Запрос.УстановитьПараметр("Владелец"			  , СпособКомпоновки);
	Запрос.УстановитьПараметр("СписокИсключаемыхСтрок", НачальныйСписок);

	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоСтрок = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗаполнитьДеревоАргументов_ОбходДерева(ДеревоСтрок, ДеревоАргументов, СловарьНаименований);

КонецПроцедуры // ЗаполнитьДеревоАргументов()

// Процедура заменяет код на представление или наоборот.
// 
// Параметры:
//  ДеревоАрг			    - ДанныеФормыДерево.
//  ИзменяемыйТекст		    - Строка.
//  ПрефПарам			    - Строка.
//  ПостПарам			    - Строка.
//  фПредставленияВВидеИмен - Булево.
// 
&НаСервере
Процедура ЗаменитьКодПредставление_ОбходДерева(ДеревоАрг, ИзменяемыйТекст, ПрефПарам, ПостПарам, фПредставленияВВидеИмен)
	
	ВеткаДереваАрг = ДеревоАрг.ПолучитьЭлементы();
	
	Для каждого СтрокаДереваАрг Из ВеткаДереваАрг Цикл

		ТекстСтрокаКод 		= ПрефПарам + СтрокаДереваАрг.Код + ПостПарам;
		ТекстСтрокаРасчета  = ПрефПарам + СокрЛП(СтрокаДереваАрг.Наименование) + ПостПарам;
		
		Если фПредставленияВВидеИмен Тогда
			ИзменяемыйТекст = СтрЗаменить(ИзменяемыйТекст, ТекстСтрокаКод, ТекстСтрокаРасчета);
		Иначе	
		    ИзменяемыйТекст = СтрЗаменить(ИзменяемыйТекст, ТекстСтрокаРасчета, ТекстСтрокаКод);
		КонецЕсли;
		
		ЗаменитьКодПредставление_ОбходДерева(СтрокаДереваАрг, ИзменяемыйТекст, ПрефПарам, ПостПарам, фПредставленияВВидеИмен);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаменитьКодПредставление_ОбходДерева()

// Процедура заменяет код на представление или наоборот.
// 
// Параметры:
//  ПредставленияВВидеИмен - Булево.
//  
&НаСервере
Процедура ЗаменитьКодПредставление(ПредставленияВВидеИмен)
                    	
	ПрефПарам = "[";
	ПостПарам = "]";
	
	фПредставленияВВидеИмен = ПредставленияВВидеИмен;
	
	ИзменяемыйТекст = ТекстФормулы.ПолучитьТекст();
	
	ЗаменитьКодПредставление_ОбходДерева(ДеревоАргументов, ИзменяемыйТекст, ПрефПарам, ПостПарам, фПредставленияВВидеИмен);
	
	ТекстФормулы.УстановитьТекст(ИзменяемыйТекст);
	
КонецПроцедуры // ЗаменитьКодПредставление()

// Процедура заполняет массив строк расчета.
// 
// Параметры:
//  ДеревоАрг		   - ДанныеФормыДерево.
//  МассивСтрокРасчета - Массив.
//  ТекстРезультат 	   - Строка.
//  ПрефПарам		   - Строка.
//  ПостПарам		   - Строка. 
//
&НаКлиенте
Процедура ЗаполнитьМассивСтрокРасчета_ОбходДерева(ДеревоАрг, МассивСтрокРасчета, ТекстРезультат, ПрефПарам, ПостПарам)

	ВеткаДереваАрг = ДеревоАрг.ПолучитьЭлементы();
	
	Для каждого СтрокаДереваАрг Из ВеткаДереваАрг Цикл

	 	Если Найти(ТекстРезультат, ПрефПарам + СтрокаДереваАрг.Код + ПостПарам) Тогда
		 	МассивСтрокРасчета.Добавить(СтрокаДереваАрг.СтрокаРасчета);		
		КонецЕсли;
			
		ЗаполнитьМассивСтрокРасчета_ОбходДерева(СтрокаДереваАрг, МассивСтрокРасчета, ТекстРезультат, ПрефПарам, ПостПарам)
		
	КонецЦикла;	

КонецПроцедуры

// Процедура осуществляет поиск статьи справки.
//
&НаСервере
Функция НайтиСтатью()
	
	// Удалить в совместимо.
	СтатьяСправки = Справочники.бит_си_Статьи.НайтиПоНаименованию("ОбщиеФормы.Формулы");
	
	Возврат СтатьяСправки;
	
КонецФункции // НайтиСтатью()

// Процедура открывает справочную информацию.
// 
&НаКлиенте
Процедура ОткрытьСправочнуюИнформацию()
	
	// Удалить в совместимо.
	ПараметрыФормы = Новый Структура("СписокЗакладок, ПараметрОткрытия");
	
	ФормаИсточника = ПолучитьФорму("Обработка.бит_си_ИсточникСправочникСтатьи.Форма.ФормаУправляемая");	
	ПараметрыФормы.СписокЗакладок = ФормаИсточника.ПолучитьМассивИсточников("бит_си_ИсточникСправочникСтатьи");
	ПараметрыФормы.ПараметрОткрытия = НайтиСтатью();
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ПараметрОткрытия) Тогда
		
		ОткрытьФорму("Обработка.бит_си_СправочнаяИнформация.Форма", ПараметрыФормы, "бит_си_СправочнаяИнформация", Ложь);		
		
	Иначе
		
		ТекстСообщения =  НСтр("ru = 'Не найдена статья справки.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьСправочнуюИнформацию()

#КонецОбласти
