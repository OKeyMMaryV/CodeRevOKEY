
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Режим"                    , Режим);
	Параметры.Свойство("АдресИсточникаПостроителя", АдресИсточникаПостроителя);
	Параметры.Свойство("ВидИнформационнойБазы"    , ВидИнформационнойБазы);
	Параметры.Свойство("ВыводитьВложенные"        , ВыводитьВложенные);
	Параметры.Свойство("ТекПутьКДанным"           , ТекПутьКДанным);
	Параметры.Свойство("ТекстЗапроса"             , ТекстЗапроса);
	Параметры.Свойство("НастройкаПодключения"     , НастройкаПодключения);
	Параметры.Свойство("ЗапросБД"                 , ЗапросБД);
	Параметры.Свойство("Поля"                     , ВыбранныеПоляИсточника);
	
	Если Параметры.Свойство("ИсточникДанных") Тогда
		ТекИсточник = Параметры.ИсточникДанных;
		ЗапросБД = ТекИсточник.ЗапросБД;
		ВыбранныеПоляИсточника = Новый Структура;
		Для каждого СтрокаТаблицы Из ТекИсточник.Поля Цикл
			Если СтрокаТаблицы.Использование Тогда
				ОписаниеПоля = Новый Структура("Имя, Синоним, ВидПоля", СтрокаТаблицы.Имя, СтрокаТаблицы.Синоним, СтрокаТаблицы.ВидПоля);
				ВыбранныеПоляИсточника.Вставить(СтрокаТаблицы.Имя, ОписаниеПоля);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если Параметры.Свойство("МассивСубконто") Тогда	
		СписокСубконто.ЗагрузитьЗначения(Параметры.МассивСубконто); 	
	КонецЕсли;
	Параметры.Свойство("ДтКт", ДтКт);
		
	Если ЭтоАдресВременногоХранилища(АдресИсточникаПостроителя) Тогда
		ИсточникПостроителя = ПолучитьИзВременногоХранилища(АдресИсточникаПостроителя);
		АдресИсточникаПостроителя = ПоместитьВоВременноеХранилище(ИсточникПостроителя, УникальныйИдентификатор);
	КонецЕсли; 
	
	ЭтоВнешняяБаза = бит_мпд_ВнешниеИсточникиСервер.ЭтоВнешняяБаза(ВидИнформационнойБазы);
	
	// В случае вызова из обычной формы значения во временном хранилище не передаются...
	// единственный способ инициализировать построитель прямо в форме.
	Построитель = ИнициализироватьПостроитель();
	
	Если ПостроительГодный(Построитель) Тогда
		ЭлементыДерева = ДеревоПолей.ПолучитьЭлементы();
		
		// Заполним дерево
		ЗаполнитьДеревоПолей(Построитель.ДоступныеПоля, ЭлементыДерева);
		Если НЕ ПустаяСтрока(ТекПутьКДанным) Тогда
			
			// Установим текущую строку дерева
			флИгнорироватьРазворачивание = Истина;
			МассивИмен = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ТекПутьКДанным,".");
			
			ТекКоллекция = ЭлементыДерева;
			Для каждого Имя Из МассивИмен Цикл
				ТекСтрока = НайтиСтрокуДереваПоИмени(ТекКоллекция,Имя);
				Если НЕ ТекСтрока = Неопределено Тогда
					 ДобавитьВложенныеПоля(ТекСтрока.ПолучитьИдентификатор());
					 ТекКоллекция = ТекСтрока.ПолучитьЭлементы();
				КонецЕсли; 
			КонецЦикла; 
			
			Если НЕ ТекСтрока = Неопределено Тогда
				Элементы.ДеревоПолей.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
			КонецЕсли; 
		КонецЕсли; // НЕ ПустаяСтрока(ТекущийПутьКДанным)
	КонецЕсли;
	
	ЗакрыватьПриВыборе = Ложь;	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПолей

// Процедура - обработчик события "Выбор" табличного поля "ДеревоПолей".
// 
&НаКлиенте
Процедура ДеревоПолейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = ДеревоПолей.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		РезСтруктура = СформироватьСтруктуруРезультат(ТекущаяСтрока);
		ОповеститьОВыборе(ТекущаяСтрока.Представление);
		Закрыть(РезСтруктура);
		
	КонецЕсли; 
	
КонецПроцедуры // ДеревоПолейВыбор()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "ДеревоПолей".
// 
&НаКлиенте
Процедура ДеревоПолейПриАктивизацииСтроки(Элемент)
	
	Если флИгнорироватьРазворачивание Тогда
	
		флИгнорироватьРазворачивание = Ложь;
	
	КонецЕсли; 
	
КонецПроцедуры // ДеревоПолейПриАктивизацииСтроки()

// Процедура - обработчик события "ПередРазворачиванием" табличного поля "ДеревоПолей".
// 
&НаКлиенте
Процедура ДеревоПолейПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если НЕ флИгнорироватьРазворачивание Тогда
	
      ДобавитьВложенныеПоля(Строка);
	
	КонецЕсли; 
	
КонецПроцедуры // ДеревоПолейПередРазворачиванием()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "КомандаОК".
// 
&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоПолей.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		РезСтруктура = СформироватьСтруктуруРезультат(ТекущаяСтрока);
		ОповеститьОВыборе(ТекущаяСтрока.Представление);
		Закрыть(РезСтруктура);
		
	Иначе	
		
		Закрыть();
		
	КонецЕсли; 
	           	
КонецПроцедуры // КомандаОК()

// Процедура - действие команды "КомандаОтмена".
// 
&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры // КомандаОтмена()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ДеревоПолейСиноним, ДеревоПолейИмя.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоПолейСиноним");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДеревоПолейИмя");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
	"ДеревоПолей.ПутьКДанным", ВидСравненияКомпоновкиДанных.Содержит, "Субконто");

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
КонецПроцедуры
  
// Функция формирует структуру результат.
// 
// Возвращаемое значение:
//  РезСтруктура - Структура
// 
&НаКлиенте
Функция СформироватьСтруктуруРезультат(ТекущаяСтрока)
	
	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("ПутьКДанным"    , ТекущаяСтрока.ПутьКДанным);
	РезСтруктура.Вставить("Синоним"        , ТекущаяСтрока.Синоним);
	РезСтруктура.Вставить("Представление"  , ТекущаяСтрока.Представление);
	РезСтруктура.Вставить("ТипЗначения"    , ТекущаяСтрока.ТипЗначения);
	РезСтруктура.Вставить("Имя"            , ТекущаяСтрока.Имя);
	РезСтруктура.Вставить("ЭтоЧисловоеПоле", ТекущаяСтрока.ЭтоЧисловоеПоле);
	
	Возврат РезСтруктура;
	
КонецФункции // СформироватьСтруктуруРезультат()

// Функция выполняет поиск строки в коллекции строк дерева.
// 
// Параметры:
//   КоллецияСтрок - ДанныеФормыКоллекцияЭлементовДерева.
// 
// Возвращаемое значение:
//  СтрокаДерева - ДанныеФормыЭлементДерева.
// 
&НаСервере
Функция НайтиСтрокуДереваПоИмени(КоллекцияСтрок, Имя)

	СтрокаДерева = Неопределено;
	
	Для каждого ТекСтрока Из КоллекцияСтрок Цикл
	
		Если ТекСтрока.Имя = Имя Тогда
		
			СтрокаДерева = ТекСтрока;
		
		КонецЕсли; 
	
	КонецЦикла; 

	Возврат СтрокаДерева;
	
КонецФункции // НайтиСтрокуДереваПоИмени()

// Функция определяет можно ли работать с построителем.
// 
// Параметры:
// Построитель - ПостроительОтчета, ПостроительЗапроса.
// 
// Возвращаемое значение:
//  флГодный - Булево.
// 
&НаСервере
Функция ПостроительГодный(Построитель)

	флГодный = Ложь;
	
	Если ТипЗнч(Построитель) = Тип("ПостроительОтчета") 
		 ИЛИ ТипЗнч(Построитель) = Тип("ПостроительЗапроса") 
		 ИЛИ ТипЗнч(Построитель) = Тип("ComObject") Тогда
	
		флГодный = Истина;
	
	КонецЕсли;	
	

	Возврат флГодный;
	
КонецФункции // ПостроительГодный()

// Процедура заполняет дерево полей.
// 
// Параметры:
//  ДоступныеПоля - ПоляНастройки.
//  ЭлементыВерх  - ДанныеФормыКоллекцияЭлементовДерева.
// 
&НаСервере
Процедура ЗаполнитьДеревоПолей(ДоступныеПоля, ЭлементыВерх)
	
	ЭтоHTTP = ?(НастройкаПодключения.РасположениеБазы = Перечисления.бит_мпд_ВидыРасположенияИнформационныхБаз.RestСервис, Истина, Ложь);
	
	Если ЭтоВнешняяБаза И НЕ ЭтоHTTP Тогда
		
		 Соединение = ВыполнитьПодключение();
		 
		 ПравилаПоискаВнешТек = РегистрыСведений.бит_мпд_НазначениеПравилПоискаДанных.ПолучитьПравилаПоиска(ВидИнформационнойБазы
		 ,Справочники.бит_мпд_ВидыИнформационныхБаз.ТекущаяИнформационнаяБаза);
		 
	
	КонецЕсли; 
	
	Для каждого ДоступноеПоле Из ДоступныеПоля Цикл
	
		Если ПолеСоответствуетРежиму(ДоступноеПоле) Тогда
		
			ЭлементДерева = ЭлементыВерх.Добавить();
			ЭлементДерева.Имя         	  = ДоступноеПоле.Имя;
			ЭлементДерева.ПутьКДанным 	  = ДоступноеПоле.ПутьКДанным;			
			ЭлементДерева.Синоним     	  = ДоступноеПоле.Представление;
			ЭлементДерева.ЭтоЧисловоеПоле = Справочники.бит_ИсточникиДанных.ЭтоЧисловоеПоле(ДоступноеПоле,Соединение);
			ЭлементДерева.Представление   = ?(ДоступноеПоле.Родитель = Неопределено
											, ДоступноеПоле.Представление
											, ДоступноеПоле.Родитель.Представление + "." + ДоступноеПоле.Представление);
			
			Если НЕ ЭтоВнешняяБаза ИЛИ ЭтоHTTP Тогда
				ЭлементДерева.ТипЗначения = ДоступноеПоле.ТипЗначения;
			Иначе	
				
				Если НЕ Соединение = Неопределено Тогда
				
					 ОписаниеТекущая = бит_мпд_ВнешниеИсточникиСервер.ПреобразоватьОписаниеТиповВнешняяТекущая(Соединение
					                                                                                ,ДоступноеПоле.ТипЗначения
																									,ПравилаПоискаВнешТек);
					 ЭлементДерева.ТипЗначения = ОписаниеТекущая;																				
				
				КонецЕсли; 
				
			КонецЕсли; 
			
			// Для периодичности установим тип значения вручную.
			Если ЭлементДерева.Имя = "Периодичность" И ЭлементДерева.ТипЗначения.Типы().Количество() = 0 Тогда
			
				 ЭлементДерева.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный));
			
			КонецЕсли; 
			
			// В некоторых случаях у полей настройки
			Попытка
				флЕстьВложенные = ?(ДоступноеПоле.Поля.Количество()>0,Истина,Ложь);
			Исключение
				флЕстьВложенные = Ложь;
				Для каждого ТекПоле Из ДоступноеПоле.Поля Цикл
					флЕстьВложенные = Истина;
					Прервать;
				КонецЦикла; 
			КонецПопытки;
			
			Если ВыводитьВложенные И флЕстьВложенные Тогда
				ВложенныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
				ВложенныеЭлементы.Добавить();
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьДеревоПолей()

// Функция определяет соответствует ли поле режиму настройки.
// 
// Параметры:
//  ДоступноеПоле - ПолеНастройки.
// 
// Возвращаемое значение:
//  флСоответствует - Булево.
// 
&НаСервере
Функция ПолеСоответствуетРежиму(ДоступноеПоле)

	флСоответствует = Ложь;
	
	Если ВРег(Режим) = ВРег("Отбор") Тогда
	
		флСоответствует = ДоступноеПоле.Отбор;
		
	ИначеЕсли ВРег(Режим) = ВРег("Измерение") Тогда
		
		флСоответствует = ДоступноеПоле.Измерение;
		
	ИначеЕсли ВРег(Режим) = ВРег("Порядок") Тогда
		
		флСоответствует = ДоступноеПоле.Порядок;
		
	ИначеЕсли ВРег(Режим) = ВРег("Поле") Тогда
		
		флСоответствует = ДоступноеПоле.Поле;
	
	КонецЕсли; 

	Возврат флСоответствует;
	
КонецФункции // ПолеСоответствуетРежиму()

// Процедура добавляет вложенные поля в дерево полей. 
// 
// Параметры:
//  ИдСтроки - Строка.
// 
&НаСервере
Процедура ДобавитьВложенныеПоля(ИдСтроки)
	
	ЭлементДерева = ДеревоПолей.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ЭлементДерева = Неопределено Тогда
		
		Вложенные = ЭлементДерева.ПолучитьЭлементы();
		Вложенные.Очистить();
		
		Построитель = ИнициализироватьПостроитель();
		
		Если ПостроительГодный(Построитель) Тогда
			
			МассивИмен = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ЭлементДерева.ПутьКДанным,".");
			
			ТекКоллекция = Построитель.ДоступныеПоля;
			
			Сй = 0;
			Для каждого Имя Из МассивИмен Цикл
			
				ТекПоле = ТекКоллекция.Найти(Имя);
				
				Если НЕ ТекПоле = Неопределено Тогда
				
					 ТекКоллекция = ТекПоле.Поля;
					 
				КонецЕсли; 
				
			Сй = Сй+1;	
			КонецЦикла; 
			
			Если Сй = МассивИмен.Количество() Тогда
				
				ДоступноеПоле = ТекПоле;
				
			Иначе
				
				ДоступноеПоле = Неопределено;
				
			КонецЕсли; 
			
			
			Если НЕ ДоступноеПоле = Неопределено Тогда
				
				ЗаполнитьДеревоПолей(ДоступноеПоле.Поля, Вложенные);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ДобавитьВложенныеПоля()

// Инициализирует построитель. 
// 
&НаСервере
Функция ИнициализироватьПостроитель()
	
	Построитель = Неопределено;
	
	Если ЭтоВнешняяБаза Тогда
		
		Если НастройкаПодключения.РасположениеБазы = Перечисления.бит_мпд_ВидыРасположенияИнформационныхБаз.RestСервис Тогда
			
			// Инициализируем таблицу значений, которая будет служить в качестве источника построителя.
			 ТабВрем = Новый ТаблицаЗначений;
			 
			 Для каждого КиЗ Из ВыбранныеПоляИсточника Цикл
			 
			 	ОписаниеПоля = КиЗ.Значение;
				
				Если ОписаниеПоля.ВидПоля = "Ресурс" Тогда
					
					ТекОписание = Новый ОписаниеТипов("Число");
					
				Иначе	
					
					СтрОтбор = Новый Структура("Имя", ОписаниеПоля.Имя);
					
					НайденныеСтроки = ЗапросБД.ДоступныеПоля.НайтиСтроки(СтрОтбор);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
					
						 ПерваяСтрока = НайденныеСтроки[0];
						 ТекОписание = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(ПерваяСтрока.ТипСтр,,Новый ОписаниеТипов("Строка"));
						 
					 Иначе
						 
						 ТекОписание = Новый ОписаниеТипов("Строка");
						 
					КонецЕсли; 
					
				КонецЕсли; 
				
				ИмяКолонки = ?(ЗначениеЗаполнено(ОписаниеПоля.Синоним), ОписаниеПоля.Синоним, ОписаниеПоля.Имя);
				ТабВрем.Колонки.Добавить(ИмяКолонки, ТекОписание);
				
			КонецЦикла; 
			 
			 Построитель = Новый ПостроительЗапроса;
			 Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабВрем);
			
		Иначе	
			
			Соединение = ВыполнитьПодключение();
			Если НЕ Соединение = Неопределено Тогда
				Построитель = Соединение.NewObject("ПостроительЗапроса");
				Попытка
					Построитель.Текст = ТекстЗапроса;
				Исключение
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка выполнения: %1'"),
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
				КонецПопытки;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		
		Построитель = Новый ПостроительЗапроса;
		
		Если ЭтоАдресВременногоХранилища(АдресИсточникаПостроителя) Тогда
			ИсточникПостроителя = ПолучитьИзВременногоХранилища(АдресИсточникаПостроителя);
			Попытка
				Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ИсточникПостроителя);
			Исключение
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка выполнения: %1'"),
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе	
			Попытка
				Построитель.Текст = ТекстЗапроса;
				Если ЗначениеЗаполнено(ЗапросБД) И ЗапросБД.АвтозаполнениеНастроек Тогда
					Построитель.ЗаполнитьНастройки();
				Иначе
					НастройкиДопИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
					НастройкиОснИзмерений = бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Все"  , "Синоним");

					Для каждого ДоступноеПоле Из Построитель.ДоступныеПоля Цикл
						ОписаниеИзмерения = НастройкиДопИзмерений.Получить(ДоступноеПоле.Имя);
						Если ОписаниеИзмерения <> Неопределено Тогда
							ДоступноеПоле.Представление = ОписаниеИзмерения.Синоним;
						Иначе
							Если НастройкиОснИзмерений.Свойство(ДоступноеПоле.Имя, ОписаниеИзмерения) Тогда
								ДоступноеПоле.Представление = ОписаниеИзмерения;
							КонецЕсли; 
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка в тексте запроса'"), УровеньЖурналаРегистрации.Ошибка, 
					Метаданные.ОбщиеФормы.бит_мпд_ФормаВыбораСвойствПостроителя, ТекстЗапроса, 
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли; 
	
	Если СписокСубконто.Количество() > 0 Тогда
		бит_БухгалтерскиеОтчетыСервер.УстановитьТипыОтборовПостроителяПоСубконто(Построитель, СписокСубконто.ВыгрузитьЗначения(), ДтКт); 	
	КонецЕсли;
	
	Возврат Построитель;
	
КонецФункции // ИнициализироватьПостроитель()

// Функция выполняет подключение по COM.
// 
// Возвращаемое значение:
//  Соединение - ComObject.
// 
&НаСервере
Функция ВыполнитьПодключение()
	
	Соединение = Неопределено;
	
	Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
		
		Соединение = бит_мпд_ПовтИсп.ПодключитьКОМ(НастройкаПодключения);
		
	КонецЕсли; 
	
	Возврат Соединение;
	
КонецФункции // ВыполнитьСоединение()

#КонецОбласти
