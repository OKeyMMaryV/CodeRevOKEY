
#Область ОписаниеПеременных

// // Переменная хранит признак того, что выбор вида операции сделан.
// &НаКлиенте 
// Перем мВыборСделан Экспорт;

&НаКлиенте 
Перем мСтруктураПараметров Экспорт; // Переменная хранит структуру параметров для записи в данные формы.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполняем кэш значений	.
	ЗаполнитьКэшЗначений();
	
	Если Параметры.Свойство("СсылкаДокумента") Тогда	
		фСсылкаДокумента = Параметры.СсылкаДокумента;	
	КонецЕсли;
	Если Параметры.Свойство("ДеревоВидовОпераций") Тогда		
		ЗаполнитьДеревоВидовОпераций(Параметры.ДеревоВидовОпераций, ДеревоВидовОпераций);
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// МВыборСделан		 = Ложь;
	мСтруктураПараметров = Неопределено;
	
	// Раскроем все уровни дерева видов операции.
	Элементы.ДеревоВидовОпераций.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	// Настроим условное оформление формы.
	НастроитьУсловноеОформленияФормы();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоВидовОпераций

&НаКлиенте
Процедура ДеревоВидовОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработкаВыбора();
	
КонецПроцедуры // ДеревоВидовОперацийВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьОперацию(Команда)
	
	ОбработкаВыбора();	
	
КонецПроцедуры // ВыбратьОперацию()

&НаКлиенте
Процедура ОтменитьВыборОперации(Команда)
	
	Закрыть();
	
КонецПроцедуры // ОтменитьВыборОперации()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	мКэшЗначений = Новый Структура;
	
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_РасходДоход", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_РасходДоход));
	
	мКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	мКэшЗначений.Вставить("ЕстьДокумент_бит_ЗаявкаНаРасходованиеСредств"	, ЕстьДокументКонфигурации("бит_ЗаявкаНаРасходованиеСредств"));
	мКэшЗначений.Вставить("ЕстьДокумент_бит_ДополнительныеУсловияПоДоговору", ЕстьДокументКонфигурации("бит_ДополнительныеУсловияПоДоговору"));
	мКэшЗначений.Вставить("ЕстьДокумент_бит_му_ОбесценениеОС"				, ЕстьДокументКонфигурации("бит_му_ОбесценениеОС"));
	мКэшЗначений.Вставить("ЕстьДокумент_бит_му_ВыбытиеОС"					, ЕстьДокументКонфигурации("бит_му_ВыбытиеОС"));
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура выполняет настройку условного оформления формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура НастроитьУсловноеОформленияФормы()
	
	// Получим список родителей.
	СписокВидовОпераций = Новый СписокЗначений;
	ПолучитьСписокРодительскихВидовОпераций(ДеревоВидовОпераций, СписокВидовОпераций);
	
	// Установим жирный шрифт для строк верхнего уровня.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// Установим отбор для оформления.
	бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(ЭлементУсловногоОформления.Отбор
														   , Новый ПолеКомпоновкиДанных("ДеревоВидовОпераций.ВидОперации")
														   , СписокВидовОпераций
														   , ВидСравненияКомпоновкиДанных.ВСписке);
														   
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	ПолеУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеУсловногоОформления.Поле 		  = Новый ПолеКомпоновкиДанных("ДеревоВидовОпераций");
	ПолеУсловногоОформления.Использование = Истина;
	
КонецПроцедуры // НастроитьУсловноеОформленияФормы()

// Процедура получает список родительских видов операций. Рекурсия.
// 
// Параметры:
// 	ДеревоДляОбхода 	- ДанныеФормыДерево.
//  СписокВидовОпераций - СписокЗначений.
// 
&НаСервереБезКонтекста  
Процедура ПолучитьСписокРодительскихВидовОпераций(ДеревоДляОбхода, СписокВидовОпераций)
	
	СтрокиДерева = ДеревоДляОбхода.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ПолучитьРодителя() = Неопределено 
			И СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			СписокВидовОпераций.Добавить(СтрокаДерева.ВидОперации);
		КонецЕсли;
		
		// ПолучитьСписокРодительскихВидовОпераций(СтрокаДерева, СписокВидовОпераций).
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьСписокРодительскихВидовОпераций()

// Функция проверяет наличие документа в конфишурации.
// 
// Параметры:
//  ИмяДокумента - Строка.
// 
// Возвращаемое значение:
//  ЕстьДокумент - Булево.
// 
&НаСервереБезКонтекста 
Функция ЕстьДокументКонфигурации(ИмяДокумента)
	
	ЕстьДокумент = ?(Метаданные.Документы.Найти(ИмяДокумента) = Неопределено
					,Ложь
					,Истина);
					
	Возврат ЕстьДокумент;
	
КонецФункции // ЕстьДокументКонфигурации()

// Процедура заполняет дерево видов операций. Рекурсия.
// 
// Параметры:
//  ДеревоИсточник - ДанныеФормыДерево.
//  ДеревоПриемник - ДанныеФормыДерево.
// 
&НаСервере
Процедура ЗаполнитьДеревоВидовОпераций(ДеревоИсточник, ДеревоПриемник) 
	
	СтрокиИсточника = ДеревоИсточник.ПолучитьЭлементы();
	СтрокиПриемника = ДеревоПриемник.ПолучитьЭлементы();
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		СтрокаПриемника = СтрокиПриемника.Добавить();
		СтрокаПриемника.ВидОперации = СтрокаИсточника.ВидОперации;
		
		ЗаполнитьДеревоВидовОпераций(СтрокаИсточника, СтрокаПриемника);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДеревоВидовОпераций()

// Процедура - обработчик выбора вида операции.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте 
Процедура ОбработкаВыбора()

	// Получаем текущую строку дерева видов операций.
	ТекущиеДанные  = Элементы.ДеревоВидовОпераций.ТекущиеДанные;
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	// Обрабатываем выбор, если выбранная строка это верхний уровень выходим.
	// Если СтрокаРодитель = Неопределено И ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
	// 	Возврат;
	// КонецЕсли;
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранРодитель = Ложь;
	
	СтруктураПараметровДляЗаписи = Новый Структура;
	
	ТипЗнчДокументаСсылка = ТипЗнч(фСсылкаДокумента);
	
	СтруктураПараметровДляЗаписи.Вставить("ВидОперации", ТекущиеДанные.ВидОперации);
	
	// Для документа "бит_ЗаявкаНаРасходованиеСредств" заполняем 
	// реквизит "ФормаОплаты" значением родителя выбранной строки.
	Если мКэшЗначений.ЕстьДокумент_бит_ЗаявкаНаРасходованиеСредств И ТипЗнчДокументаСсылка = Тип("ДокументСсылка.бит_ЗаявкаНаРасходованиеСредств") Тогда 
		
		СтруктураПараметровДляЗаписи.Вставить("ФормаОплаты", СтрокаРодитель.ВидОперации);	
		
	КонецЕсли;
	
	// Для документа "бит_ДополнительныеУсловияПоДоговору" заполняем реквизиты "ФормаОплаты, РасходДоход"
	// значениями из родительских строк.
	Если мКэшЗначений.ЕстьДокумент_бит_ДополнительныеУсловияПоДоговору И ТипЗнчДокументаСсылка = Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору") Тогда
		
		Если ТипЗнч(СтрокаРодитель.ВидОперации) = Тип("ПеречислениеСсылка.бит_РасходДоход") Тогда
			
			// Выбирать родителя ветки нельзя.
			Если СтрокаРодитель.ВидОперации = мКэшЗначений.Перечисления.бит_РасходДоход.Расходование Тогда
				ВыбранРодитель = ТипЗнч(ТекущиеДанные.ВидОперации) = Тип("ПеречислениеСсылка.бит_ВидыДенежныхСредств");
			КонецЕсли;
			
			СтруктураПараметровДляЗаписи.Вставить("ФормаОплаты", ТекущиеДанные.ВидОперации);
			СтруктураПараметровДляЗаписи.Вставить("РасходДоход", СтрокаРодитель.ВидОперации);
			
		Иначе
			
			СтруктураПараметровДляЗаписи.Вставить("ФормаОплаты", СтрокаРодитель.ВидОперации);
			
			СтрокаРодитель_Родитель = СтрокаРодитель.ПолучитьРодителя();
			
			Если СтрокаРодитель_Родитель = Неопределено Тогда
				СтруктураПараметровДляЗаписи.Вставить("РасходДоход", СтрокаРодитель.ВидОперации);
			Иначе
				СтруктураПараметровДляЗаписи.Вставить("РасходДоход", СтрокаРодитель_Родитель.ВидОперации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для документа "бит_му_ОбесценениеОС" заполняем реквизит "ВидДвижения".
	Если мКэшЗначений.ЕстьДокумент_бит_му_ОбесценениеОС И ТипЗнчДокументаСсылка = Тип("ДокументСсылка.бит_му_ОбесценениеОС") Тогда
		
		СтруктураПараметровДляЗаписи.Вставить("ВидДвижения", СтрокаРодитель.ВидОперации);
				
	КонецЕсли; 
	
	// Для документа "бит_му_ВыбытиеОС" заполняем реквизит "ВидДвижения".
	Если мКэшЗначений.ЕстьДокумент_бит_му_ВыбытиеОС И ТипЗнчДокументаСсылка = Тип("ДокументСсылка.бит_му_ВыбытиеОС") Тогда
		
		СтруктураПараметровДляЗаписи.Вставить("ВидДвижения", СтрокаРодитель.ВидОперации);
				
	КонецЕсли;
	
	// Если вид операции не выбран, то запрещаем открытие формы-владельца.
	Если Не ЗначениеЗаполнено(СтруктураПараметровДляЗаписи.ВидОперации)
		 И Не (ТипЗнчДокументаСсылка = Тип("ДокументСсылка.бит_ДополнительныеУсловияПоДоговору")
		 		И ЗначениеЗаполнено(СтруктураПараметровДляЗаписи.ФормаОплаты) 
				И Не ВыбранРодитель) Тогда
		
		// МВыборСделан = Ложь;
		СтруктураПараметровДляЗаписи = Новый Структура;
		
	Иначе
		// МВыборСделан		 = Истина;
		мСтруктураПараметров = СтруктураПараметровДляЗаписи;
	КонецЕсли;
	
	Закрыть(СтруктураПараметровДляЗаписи);
	
КонецПроцедуры // ОбработкаВыбора() 

#КонецОбласти
