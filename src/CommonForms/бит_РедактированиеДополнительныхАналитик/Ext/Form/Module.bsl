#Область ОписаниеПеременных

&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-15 (#3758)
Перем мНомерЗаявки; // Служит для передачи текущего номера заявки (ФВБ) между обработчиками.
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-15 (#3758)

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Не ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Непосредственное открытие этой формы не предусмотрено.';
							 | en = 'Непосредственное открытие этой формы не предусмотрено.'") + Символы.ПС 
					   + НСтр("ru = 'Для открытия формы можно воспользоваться командой ""Аналитики (БИТ)"" в формах документов.';
						 	  |en = 'Для открытия формы можно воспользоваться командой ""Аналитики (БИТ)"" в формах документов.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 	
	
	СсылкаНаОбъект = Параметры.Ссылка;
	ВызовИзСписка  = Параметры.ВызовИзСписка;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код (
	//Если бит_МеханизмДопИзмерений.ВключенРежимЗаполнятьВсегда() Тогда
	//	ПараметрыОбъекты = Новый Структура("ЗапретитьПерезаполнениеАналитик", ЗапретитьПерезаполнениеАналитик);
	//	бит_МеханизмДопИзмерений.ЗаписатьДополнительныеПараметрыОбъекта(СсылкаНаОбъект.Ссылка, ПараметрыОбъекты);
	//КонецЕсли;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление, некомментированный исправленный код )
	
   	ТекущаяПлатежнаяПозиция = бит_ОбщегоНазначения.ПолучитьЗначениеАналитики(СсылкаНаОбъект, 
		ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-15 (#3758)
	мНомерЗаявки = бит_ОбщегоНазначения.ПолучитьЗначениеАналитики(СсылкаНаОбъект, ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки"));
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-15 (#3758)
	
	МетаданныеДокумента = СсылкаНаОбъект.Метаданные();
	Если бит_ДатыЗапретаРедактирования.ПропуститьПроверкуДатыЗапрета(МетаданныеДокумента, ТекущийОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = бит_ДатыЗапретаРедактирования.ВыполнитьПроверкуДатыЗапретаРедактирования(МетаданныеДокумента, СсылкаНаОбъект);
	Если РезультатПроверки Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	// Очистка аналитик, по которым не ведется учет.
	АналитическиеРазрезы = АналитическиеРазрезы();
	Для каждого СтрокаТаблицы Из РаспределениеБюджета Цикл
		Для каждого Разрез Из АналитическиеРазрезы Цикл
			Если НЕ СтрокаТаблицы[Разрез + "Доступность"] Тогда
				СтрокаТаблицы[Разрез] = Неопределено;			
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Отказ", Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаписатьДокумент(ПараметрыЗаписи);
	
	ДоработатьТаблицуАналитик();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОбИзменении(СсылкаНаОбъект);
	ЗаписатьИЗакрыть = ?(ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть"), ПараметрыЗаписи.ЗаписатьИЗакрыть, Ложь);
	
	// "Стандартный" для БП прием обновления формы документа при записи вне формы.
	// См. ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента().
	Если НЕ ПараметрыЗаписи.Отказ Тогда
		Оповестить("ВыполненаЗаписьДокумента", Новый Структура("ДокументСсылка", СсылкаНаОбъект), ВладелецФормы);
	КонецЕсли; 
	
	Если ВладелецФормы <> Неопределено Тогда
		Если ЗаписатьИЗакрыть Тогда
			// АПК:534-выкл Безопасное открытие формы документа.
			ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(СсылкаНаОбъект));
			// АПК:534-вкл
		КонецЕсли;
	Иначе
		Если ЗаписатьИЗакрыть И Открыта() Тогда
		     Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтобразитьРаспределениеБюджета();
	ПодключитьОбработчикОжидания("ПроверитьМодификациюВладельцаФормы", 0.5, Истина);
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-16 (#3066)
	МассивПараметровБДР = Новый Массив;
	
	НовыйПараметрБДР = Новый ПараметрВыбора("Отбор.ТипСтатьи"	, ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДР"));
	МассивПараметровБДР.Добавить(НовыйПараметрБДР);
	
	Элементы.РасшифровкаПлатежаок_СтатьяОборотовБДР.ПараметрыВыбора			   = Новый ФиксированныйМассив(МассивПараметровБДР);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-16 (#3066)
	
КонецПроцедуры
 
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ИспользуетсяРаспределениеБюджета Тогда
		
		// Проверка завершения редактирования ТЧ "РаспределениеБюджета".
		КлючСтроки = "";
		Для каждого СтрокаТаблицы Из РаспределениеБюджета Цикл
			Если СтрокаТаблицы.СуммаПлатежа = 0 Тогда
				Если КлючСтроки <> СтрокаТаблицы.бит_КлючСтроки Тогда
					КлючСтроки = СтрокаТаблицы.бит_КлючСтроки;
					Если ЕстьРасшифровкаПлатежа Тогда
						ТекстСообщения = НСтр("ru = 'В строке списка ""Распределение факта"", связанной со строкой %1, не закончено редактирование суммы платежа.';
											  |en = 'В строке списка ""Распределение факта"", связанной со строкой %1, не закончено редактирование суммы платежа.'"); 
						СтрокаРасшифровки = РасшифровкаПлатежа.НайтиСтроки(
											Новый Структура("бит_КлючСтроки", КлючСтроки))[0];
						Индекс 		   = Формат(СтрокаРасшифровки.НомерСтрокиДокумента - 1, "ЧГ=");					
						Поле  		   = СтрШаблон("РасшифровкаПлатежа[%1].НомерСтрокиДокумента", Индекс);
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаРасшифровки.НомерСтрокиДокумента);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, ,Отказ); 
					Иначе
						ТекстСообщения = НСтр("ru='В строке %1 ""Распределение факта"" не закончено редактирование суммы платежа.';en='Line %1 ""Distribution of fact"" not finished editing the payment amount.'");
						Индекс 		   = Формат(РаспределениеБюджета.Индекс(СтрокаТаблицы), "ЧГ=");					
						Поле  		   = СтрШаблон("РаспределениеБюджета[%1].СуммаПлатежа", Индекс);
						ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаРасшифровки.НомерСтрокиДокумента);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, ,Отказ); 
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		// Проверка совпадения итога по колокам "СуммаПлатежа".
		Если ЕстьРасшифровкаПлатежа Тогда
			Для каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
				Если СтрокаТаблицы.СуммаПлатежа <> СтрокаТаблицы.Распределено Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 списка ""Расшифровка платежа"" распределенная сумма не совпадает с суммой платежа.';
										  |en = 'В строке %1 списка ""Расшифровка платежа"" распределенная сумма не совпадает с суммой платежа.'"); 
					Индекс 		   = Формат(РаспределениеБюджета.Индекс(СтрокаТаблицы), "ЧГ=");					
					Поле  		   = СтрШаблон("РасшифровкаПлатежа[%1].Распределено", Индекс);
					ТекстСообщения = СтрШаблон(ТекстСообщения, СтрокаТаблицы.НомерСтрокиДокумента);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, ,Отказ); 
				КонецЕсли; 
			КонецЦикла; 
		Иначе	
			Если СуммаДокумента <> РаспределениеБюджета.Итог("СуммаПлатежа") Тогда
				ТекстСообщения = НСтр("ru='Распределенная сумма не совпадает с суммой платежа.';en='The distributed amount is not equal to the sum of payment.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Распределено", ,Отказ); 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗапретитьПерезаполнениеАналитикПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИмяТекущейСтраницы = Элементы.СтраницыФормы.ТекущаяСтраница.Имя;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаборДопАналитики

&НаКлиенте
Процедура НаборДопАналитикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.НаборДопАналитики.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Объект = СсылкаНаОбъект;
	КонецЕсли; 
	
	// Установим ограничение типа при редактировании.
	НастройкаАналитики = КэшЗначений.НастройкиАналитик[ТекущиеДанные.ИмяАналитики];
	Если НЕ НастройкаАналитики = Неопределено Тогда
	
		Элементы.НаборДопАналитикиЗначениеАналитики.ОграничениеТипа = НастройкаАналитики.ТипЗначения;
		
		Если НастройкаАналитики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.бит_ДополнительныеЗначенияАналитик")) Тогда
			СтрОтбор = Новый Структура("Владелец", НастройкаАналитики.Аналитика);
			бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.НаборДопАналитикиЗначениеАналитики, СтрОтбор);
		ИначеЕсли НастройкаАналитики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.бит_СтатьиОборотов")) Тогда
			УстановитьПараметрыВыбораСтатьиОборотов();
		Иначе
			Элементы.НаборДопАналитикиЗначениеАналитики.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаборДопАналитикиПослеУдаления(Элемент)
		
	УстановитьВидимостьДоступностьАналитик();
	ЗапретитьПерезаполнениеАналитик = Истина;
	
КонецПроцедуры
           
&НаКлиенте
Процедура НаборДопАналитикиАналитикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НаборДопАналитики.ТекущиеДанные;
	ИзменениеАналитики(ТекущиеДанные.ПолучитьИдентификатор());
	
	// Установим ограничение типа при редактировании.
	НастройкаАналитики = КэшЗначений.НастройкиАналитик[ТекущиеДанные.ИмяАналитики];
	Если НЕ НастройкаАналитики = Неопределено Тогда
	
		Элементы.НаборДопАналитикиЗначениеАналитики.ОграничениеТипа = НастройкаАналитики.ТипЗначения;
		
		Если НастройкаАналитики.ТипЗначения.СодержитТип(Тип("СправочникСсылка.бит_ДополнительныеЗначенияАналитик"))  Тогда
			
			СтрОтбор = Новый Структура("Владелец", НастройкаАналитики.Аналитика);
			бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.НаборДопАналитикиЗначениеАналитики, СтрОтбор);
			
		Иначе
			
			Элементы.НаборДопАналитикиЗначениеАналитики.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		
		КонецЕсли; 		
		
	КонецЕсли;
	
	ЗапретитьПерезаполнениеАналитик = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораЗначениеАналитикиШапки(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НаборДопАналитики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ++ БП 
	Если ТекущиеДанные.Аналитика = ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПланируемоеПоступлениеДенежныхСредств") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьПланируемоеПоступлениеОтбор(Истина);
	КонецЕсли; 
	// -- БП 
	
	Если Элемент.ОграничениеТипа.Типы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
   
    бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект
    													  	   , Элемент
    														   , ТекущиеДанные
    														   , ТекущиеДанные.ИмяАналитики
    														   , СтандартнаяОбработка
    														   , КэшЗначений.НастройкиАналитик
                                                               , "ЗначениеАналитики");
    
	ЗапретитьПерезаполнениеАналитик = Истина;
															   
КонецПроцедуры // НачалоВыбораЗначениеАналитикиШапки()

&НаКлиенте
Процедура НаборДопАналитикиЗначениеАналитикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораЗначениеАналитикиШапки(Элемент, СтандартнаяОбработка);
															   
КонецПроцедуры // НаборДопАналитикиЗначениеАналитикиНачалоВыбора()

&НаКлиенте
Процедура НаборДопАналитикиЗначениеАналитикиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НачалоВыбораЗначениеАналитикиШапки(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // НаборДопАналитикиЗначениеАналитикиАвтоПодбор()
  
&НаКлиенте
Процедура НаборДопАналитикиЗначениеАналитикиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НаборДопАналитики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗначениеАналитики = ТекущиеДанные.ЗначениеАналитики;
	Если ЗначениеЗаполнено(ТекЗначениеАналитики) Тогда
		Если бит_МеханизмДопИзмеренийКлиент.ЭтотДокументОбОплатеБит(ТекЗначениеАналитики) Тогда
			ЗаполнениеДополнительныхАналитикПоДокументуБит(ТекЗначениеАналитики);
			Элементы.НаборДопАналитики.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	ЗапретитьПерезаполнениеАналитик = Истина;
	
	ПредложитьЗаполнениеДокументовПланирования(ТекЗначениеАналитики);
	
КонецПроцедуры

&НаКлиенте
Процедура НаборДопАналитикиЗначениеАналитикиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НаборДопАналитики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Новый Структура;
	Контейнер.Вставить(ТекущиеДанные.ИмяАналитики, ТекущиеДанные.ЗначениеАналитики);	

	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент
																			, Контейнер
																		   	, ТекущиеДанные.ИмяАналитики
																		   	, СтандартнаяОбработка
																		   	, КэшЗначений.НастройкиАналитик);
																		
	ТекущиеДанные.ЗначениеАналитики = Контейнер[ТекущиеДанные.ИмяАналитики];
			
	Если бит_МеханизмДопИзмеренийКлиент.ЭтотДокументОбОплатеБит(ТекущиеДанные.ЗначениеАналитики) Тогда
		УстановитьВидимостьДоступностьАналитик();
	КонецЕсли;
	ЗапретитьПерезаполнениеАналитик = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры // НаборДопАналитикиЗначениеАналитикиОчистка()

&НаКлиенте
Процедура НаборДопАналитикиПриИзменении(Элемент)
	
	Кандидат = ОсновнаяСтатьяОборотов(ЭтотОбъект);
	Если ОсновнаяСтатьяОборотов <> Кандидат Тогда
		ОсновнаяСтатьяОборотов = Кандидат;
		ЗаполнитьДобавленныеКолонкиТаблиц();	
	КонецЕсли; 
	
	ОсновнаяПлатежнаяПозиция = ОсновнаяПлатежнаяПозиция(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Колонка 	  = СтрЗаменить(Поле.Имя, "РасшифровкаПлатежа", "");
	
	Если Колонка = "НомерСтроки" Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущиеДанные[Колонка]) Тогда
		ПоказатьЗначение(, ТекущиеДанные[Колонка]);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	ОтобразитьРаспределениеБюджета();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениеБюджета
&НаКлиенте
Процедура РаспределениеБюджетаПередНачаломИзменения(Элемент, Отказ)

	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьНачальныеСвойстваАналитикСтроки(
		ЭтотОбъект, ТекущиеДанные, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "РаспределениеБюджета"));

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеБюджетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Если ЕстьРасшифровкаПлатежа Тогда
			КлючСтроки = Элементы.РаспределениеБюджета.ОтборСтрок.бит_КлючСтроки;
			СуммаДокумента = Элементы.РасшифровкаПлатежа.ТекущиеДанные.СуммаПлатежа;
		Иначе	
			КлючСтроки = "";
		КонецЕсли; 
		
		ТекущиеДанные.бит_КлючСтроки = КлючСтроки;
		Если РаспределениеБюджета.Количество() = 1 Тогда
			ТекущиеДанные.СуммаПлатежа = СуммаДокумента;
		КонецЕсли; 
	КонецЕсли; 

	Если НоваяСтрока Тогда
		ПриИзмененииСуммыПлатежаРаспределенияБюджета(Копирование);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеБюджетаПриИзменении(Элемент)
	
	// Любой элемент таблицы, кроме "суммы платежа", взводит флаг "ЗапретитьПерезаполнениеАналитик".
	Колонка = Элементы.РаспределениеБюджета.ТекущийЭлемент;
	Если Колонка <> Элементы.РаспределениеБюджетаСуммаПлатежа Тогда
		ЗапретитьПерезаполнениеАналитик = Истина;
	КонецЕсли; 
	
	ЗаполнитьНомераСтрокРаспределения(ЭтотОбъект);
	
	КлючСтроки = "";
	Если ЕстьРасшифровкаПлатежа Тогда
		КлючСтроки = Элементы.РаспределениеБюджета.ОтборСтрок.бит_КлючСтроки;
	КонецЕсли; 
	
	ОбновитьИтоги(КлючСтроки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеБюджетаАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "РаспределениеБюджета", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяАналитики,
		СтандартнаяОбработка, КэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры
                                                           
&НаКлиенте
Процедура РаспределениеБюджетаАналитикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "РаспределениеБюджета", "");
	
	бит_МеханизмДопИзмеренийКлиент.ВыбратьТипСоставнойАналитики(ЭтотОбъект, Элемент, ТекущиеДанные, ИмяАналитики,
		СтандартнаяОбработка, КэшЗначений.НастройкиИзмерений);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеБюджетаАналитикаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	ИмяАналитики  = СтрЗаменить(Элемент.Имя, "РаспределениеБюджета", "");
	
	бит_МеханизмДопИзмеренийКлиент.ОбработкаОчисткиДополнительногоИзмерения(Элемент, ТекущиеДанные, 
		ИмяАналитики, СтандартнаяОбработка, КэшЗначений.НастройкиИзмерений);
																			
	ЗапретитьПерезаполнениеАналитик = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеБюджетаСуммаПлатежаПриИзменении(Элемент)
	
	ПриИзмененииСуммыПлатежаРаспределенияБюджета();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеБюджетаСтатьяОборотовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	ИзменениеСтатьиОборотовНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеБюджетаСтатьяОборотовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяОборотов) И ЗначениеЗаполнено(ОсновнаяСтатьяОборотов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Отборы = Новый Структура("ТипСтатьи", 
					ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС")); 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ОсновнаяСтатьяОборотов);
		ПараметрыФормы.Вставить("Отбор", Отборы);
		
		ОткрытьФорму("Справочник.бит_СтатьиОборотов.ФормаВыбора", ПараметрыФормы, Элемент); 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗаписатьИЗакрыть", Истина); 
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьШапку(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьШапкуЗавершение",ЭтотОбъект);
	Если НаборДопАналитики.Количество()>0 Тогда
		ТекстВопроса =  НСтр("ru='Дополнительные аналитики будут очищены. Продолжить?';en='Additional analysts will be cleared. Continue?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;	
		
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
// 
&НаКлиенте 
Процедура КомандаЗаполнитьШапкуЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьШапку(Истина);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьАналитикиРаспределения(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьАналитикиРаспределенияЗавершение",ЭтотОбъект);
	Если РаспределениеБюджета.Количество()>0 Тогда
		ТекстВопроса =  НСтр("ru='Дополнительные аналитики будут заполнены для всего списка ""Распределение факта""."
"Продолжить?';en='Additional analysts will be filled for a list of ""the fact of distribution."""
"Proceed?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ТекстСообщения = НСтр("ru='Список ""Расределение бюджета"" пустой. "
"Выполнить не могу.';en='List ""Rasredelenie budget"" empty."
"I can not perform.'"); 
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли;	
		
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
// 
&НаКлиенте 
Процедура ЗаполнитьАналитикиРаспределенияЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьАналитикиРаспределенияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьВсе(Команда)
	
	Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьВсеЗвершение",ЭтотОбъект);
	Если НаборДопАналитики.Количество()>0 Тогда
		ТекстВопроса =  НСтр("ru='Дополнительные аналитики будут очищены. Продолжить?';en='Additional analysts will be cleared. Continue?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе 
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;	
		
КонецПроцедуры // КомандаЗаполнитьВсе()

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
// 
&НаКлиенте 
Процедура КомандаЗаполнитьВсеЗвершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВсеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоПрофилю(Команда)
	
	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Колонка = Элементы.РаспределениеБюджета.ТекущийЭлемент;
	Если Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СтрЗаменить(Колонка.Имя, "РаспределениеБюджета", "");
	
	Если НЕ РаспределениеПоддерживается(ТекущиеДанные, Колонка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗначение = ТекущиеДанные[ИмяКолонки];
	
	Отбор = Новый Структура; 
	Отбор.Вставить("ТипСтатьи", ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Вид", ПредопределенноеЗначение("Перечисление.бит_ВидыПрофилейРаспределения.ПоАналитике"));
	ПараметрыФормы.Вставить("ИмяКолонки", 	   ИмяКолонки);
	ПараметрыФормы.Вставить("ТекущееЗначение", ТекущиеДанные[ИмяКолонки]);
	ПараметрыФормы.Вставить("Отбор", 		   Отбор);
	
	Оповещение = Новый ОписаниеОповещения("РаспределитьПоПрофилюЗавершение", ЭтотОбъект);
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Обработка.бит_РаспределениеБюджетныхДанныхПоПрофилю.Форма", ПараметрыФормы, ЭтотОбъект,,,,Оповещение,РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "РаспределитьПоПрофилюЗавершение".
//
// Параметры:
// Результат - КодВозвратаДиалога
// ДополнительныеДанные - Структура.
//
&НаКлиенте 
Процедура РаспределитьПоПрофилюЗавершение(Результат, ДополнительныеДанные) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ВыделенныеСтроки = Элементы.РаспределениеБюджета.ВыделенныеСтроки;
		ВыполнитьРаспределение(ВыделенныеСтроки, Результат);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаписатьДокумент(ПараметрыЗаписи)
		
	// ТекущийОбъект в параметрам процедуры - РегистрСведенийНаборЗаписей.бит_УстановленныеВизы, 
	// т.к. набор записей установлен основным реквизитом формы.
	ДокументОбъект = СсылкаНаОбъект.ПолучитьОбъект();
	
	Если ИспользуетсяРаспределениеБюджета Тогда
		ДокументОбъект.бит_РаспределениеБюджета.Загрузить(РаспределениеБюджета.Выгрузить());
	КонецЕсли; 
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-15 (#3758)
	Если ЗначениеЗаполнено(мНомерЗаявки)
		И (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеДопРасходов")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеНМА")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг")) Тогда
	
		ТекущийНомерЗаявки = бит_ОбщегоНазначения.ПолучитьЗначениеАналитики(СсылкаНаОбъект, ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.НайтиПоКоду("NЗаявки"));
		
		Если Не ЗначениеЗаполнено(ТекущийНомерЗаявки) Тогда
			ДокументОбъект.ОК_ID_Разноска = "";
		КонецЕсли; 
		
	КонецЕсли; 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-15 (#3758)
	
	Если ИзменениеЗапрещено Тогда
		ЗаписатьДокументИзменениеЗапрещено(ДокументОбъект);
	Иначе
		ЗаписатьДокументИзменениеРазрешено(ДокументОбъект, ПараметрыЗаписи);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокументИзменениеЗапрещено(ДокументОбъект)
	
	Если ИспользуетсяРаспределениеБюджета Тогда
		// Требуется фиксация модификации ТЧ "бит_РаспределениеБюджета".
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		ПодготовитьВспомогательныеДанныеДляПроведения(ДокументОбъект);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Если НЕ ДокументОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	// Где еще встречается: см. бит_ГрупповоеРедактированиеДополнительныхАналитик.Форма.ВыполнитьПроведениеБитСервер();
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	МетаданныеДвижения 	= МетаданныеДокумента.Движения;
	
	Отказ 		    = Ложь;
	РежимПроведения = РежимПроведенияДокумента.Неоперативный; 
	
	// ++БП
	ОборотыПоБюджетам 				 = Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам;
	ПланируемыйРасходДенежныхСредств = Метаданные.РегистрыНакопления.бит_ПланируемыйРасходДенежныхСредств;
	ДвиженияДенежныхСредств 		 = Метаданные.РегистрыНакопления.бит_ДвиженияДенежныхСредств;
	НезапланированныеРасходы 		 = Метаданные.РегистрыНакопления.бит_НезапланированныеРасходы;
	ПланируемыеЗатраты 				 = Метаданные.РегистрыНакопления.бит_ПланируемыеЗатраты;
	
	ФормироватьОборотыПоБюджетам = МетаданныеДвижения.Содержит(Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам);	
	
	ФормироватьДвижениеДенежныхСредств = МетаданныеДвижения.Содержит(ПланируемыйРасходДенежныхСредств) 
									   И МетаданныеДвижения.Содержит(ДвиженияДенежныхСредств);
									   
	ФормироватьЗатраты = МетаданныеДвижения.Содержит(НезапланированныеРасходы) 
									   И МетаданныеДвижения.Содержит(ПланируемыеЗатраты);
									   
	Если ФормироватьОборотыПоБюджетам Тогда
		бит_Казначейство.бит_ОбработкаПроведенияПлатежногоДокумента(ДокументОбъект, Отказ, РежимПроведения);
	КонецЕсли;

	Если ФормироватьДвижениеДенежныхСредств Тогда
		бит_Казначейство.бит_ОбработкаПроведенияРасходДСОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения, Истина);
		бит_Казначейство.бит_ОбработкаПроведенияПоступлениеДСОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения, Истина);
	КонецЕсли;

	Если ФормироватьЗатраты Тогда		
		бит_ДоговораСервер.бит_ОбработкаПроведенияЗатратыОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения);
	КонецЕсли;
	// --БП
	
	ЕстьМеханизмКонтроляЗакрытогоПериода = бит_ОбщегоНазначения.ЕстьМеханизмКонтроляЗакрытогоПериода();
	Если ЕстьМеханизмКонтроляЗакрытогоПериода Тогда			
		бит_КонтрольЗакрытогоПериода.КонсервироватьДвижения(ДокументОбъект, Отказ, 
			РежимЗаписиДокумента.Проведение, РежимПроведения);	
	КонецЕсли;
	
	бит_МеханизмХозяйственныхОперацийСервер.бит_мхо_НастраиваемыеДвиженияДокументовОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения);
	
	бит_МеханизмТрансляции.ВыполнитьТрансляцию(ДокументОбъект, Неопределено, Неопределено, Истина, Перечисления.бит_РежимыТрансляции.Ручной);
														   
	Если ЕстьМеханизмКонтроляЗакрытогоПериода Тогда			
		бит_КонтрольЗакрытогоПериода.КонтрольПриОбработкеПроведения(ДокументОбъект, Отказ, РежимПроведения, Истина);	
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого НаборЗаписей Из ДокументОбъект.Движения Цикл
		Если НаборЗаписей.Записывать Тогда
			НаборЗаписей.Записать();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокументИзменениеРазрешено(ДокументОбъект, ПараметрыЗаписи)
	
	Если ДокументОбъект.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе	
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли; 
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.бит_ОперацияУправленческий") Тогда
		Для каждого Проводки Из ДокументОбъект.Движения Цикл
			Проводки.Прочитать();
			Проводки.Записывать = Проводки.Количество() > 0;
		КонецЦикла; 
	КонецЕсли; 
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПодготовитьВспомогательныеДанныеДляПроведения(ДокументОбъект);
	КонецЕсли; 
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
		Модифицированность = Ложь;
	Исключение
		Модифицированность    = Истина;
		ПараметрыЗаписи.Отказ = Истина;
		ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось записать документ по причине: %1';en='Could not write the document because of: %1'"), 
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ОсновнаяСтатьяОборотов(Форма)

	ОсновнаяСтатьяОборотов = ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка");
	ПВХСтатьяОборотов	   = ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.СтатьяОборотов");
	
	Для каждого СтрокаТаблицы Из Форма.НаборДопАналитики Цикл
		Если СтрокаТаблицы.Аналитика = ПВХСтатьяОборотов Тогда
			ОсновнаяСтатьяОборотов = СтрокаТаблицы.ЗначениеАналитики;		
		КонецЕсли; 
	КонецЦикла; 

	Возврат ОсновнаяСтатьяОборотов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ОсновнаяПлатежнаяПозиция(Форма)

	ОсновнаяПлатежнаяПозиция = Неопределено;
	ПВХПлатежнаяПозиция 	 = Неопределено;
	
	Если Форма.ИспользуетсяПланируемоеПоступление Тогда
		ПВХПлатежнаяПозиция = ПредопределенноеЗначение(
								"ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПланируемоеПоступлениеДенежныхСредств");
	ИначеЕсли Форма.ИспользуетсяПлатежнаяПозиция Тогда 	
		ПВХПлатежнаяПозиция = ПредопределенноеЗначение(
								"ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция");
	КонецЕсли; 
	
	Если ПВХПлатежнаяПозиция <> Неопределено Тогда
		Для каждого СтрокаТаблицы Из Форма.НаборДопАналитики Цикл
			Если СтрокаТаблицы.Аналитика = ПВХПлатежнаяПозиция Тогда
				ОсновнаяПлатежнаяПозиция = СтрокаТаблицы.ЗначениеАналитики;		
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 

	Возврат ОсновнаяПлатежнаяПозиция;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьЗаполнениеДокументовПланирования(ДокументПланирования)

	Если НЕ ИспользуетсяРаспределениеБюджета ИЛИ НЕ ЗначениеЗаполнено(ДокументПланирования) Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НЕ ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция")
		И НЕ ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств") Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция") Тогда
		ЗаголовокВопроса = НСтр("ru = 'Изменение платежной позиции'; en = 'Изменение платежной позиции'"); 
	Иначе	
		ЗаголовокВопроса = НСтр("ru = 'Изменение позиции поступления'; en = 'Изменение позиции поступления'"); 
	КонецЕсли;	

	ТекстСообщения = НСтр("ru='Как изменить документы планирования в списке распределения?';en='How to change the planning documents in the distribution list?'"); 
	
	Меню = Новый СписокЗначений(); 
	Меню.Добавить("Заменить",	НСтр("ru='Заменить во всем списке';en='Replace all over the list'"));
	Меню.Добавить("Заполнить",	НСтр("ru='Заполнить пустые';en='fill in the blank'"));
	Меню.Добавить("НеИзменять",	НСтр("ru='Оставить без изменений';en='Leave unchanged'"));
	
	Оповещение = Новый ОписаниеОповещения("ПредложитьЗаполнениеДокументовПланированияЗавершение", 
		ЭтотОбъект, ДокументПланирования); 

	ПоказатьВопрос(Оповещение, ТекстСообщения, Меню, ,"НеИзменять", ЗаголовокВопроса);
	
КонецПроцедуры

// Обработчик завершения выбора диалога вопрос.
//  См. Синтакс-помощник: ПоказатьВопрос().
//
&НаКлиенте
Процедура ПредложитьЗаполнениеДокументовПланированияЗавершение(Результат, Дополнительно) Экспорт

	Если Результат = "Заменить" Тогда
		ЗаполнитьДокументПланированияВРаспределении(Дополнительно, Ложь);
	ИначеЕсли Результат = "Заполнить" Тогда
		ЗаполнитьДокументПланированияВРаспределении(Дополнительно, Истина);	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументПланированияВРаспределении(ДокументПланирования, ЗаполнитьПустые)

	Для каждого СтрокаТаблицы Из РаспределениеБюджета Цикл
		Если ЗаполнитьПустые И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) Тогда
			СтрокаТаблицы.ДокументПланирования = ДокументПланирования;
		ИначеЕсли НЕ ЗаполнитьПустые Тогда
			СтрокаТаблицы.ДокументПланирования = ДокументПланирования;
		КонецЕсли; 
	КонецЦикла; 

	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаАналитикиТабличнойЧасти;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствАналитик(Форма, Префикс = "")

	Результат = бит_МеханизмДопИзмеренийКлиентСервер.ПараметрыУстановкиСвойствАналитикПоШаблону(
		Префикс + "Аналитика_", "Аналитика_", "СтатьяОборотов");
		
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Организация);
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ИзменениеСтатьиОборотовНаСервере(ИД)

	СтрокаТаблицы = РаспределениеБюджета.НайтиПоИдентификатору(ИД); 
	
	бит_МеханизмДопИзмеренийКлиентСервер.УстановитьСвойстваАналитикСтрокиПриИзмененииСтатьиОборотов(
				ЭтотОбъект, СтрокаТаблицы, ПараметрыУстановкиСвойствАналитик(ЭтотОбъект, "РаспределениеБюджета"));
	ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы);

КонецПроцедуры

&НаСервере
Функция АналитическиеРазрезы()

	Разрезы = Новый Массив();
	Разрезы.Добавить("Проект");
	Разрезы.Добавить("НоменклатурнаяГруппа");
	Для Индекс = 1 По 7 Цикл
		Разрезы.Добавить("Аналитика_" + Индекс);
	КонецЦикла; 
	
	Возврат Разрезы;
	
КонецФункции
 
&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	Для каждого СтрокаТаблицы Из РаспределениеБюджета Цикл
		ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы); 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиСтроки(СтрокаТаблицы)
	
	// Если в "аналитиках шапки" выбрана статья оборотов, но не выбрана в "распределении",
	// наследуем ее настройки.
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяОборотов) Тогда
		СтатьяОборотов = СтрокаТаблицы.СтатьяОборотов;
	Иначе	
		СтатьяОборотов = ОсновнаяСтатьяОборотов;
	КонецЕсли; 
	
	СвойстваСтатьи = бит_БюджетированиеПовтИспВызовСервера.ПолучитьСвойстваСтатьи(СтатьяОборотов);
	Разрезы = АналитическиеРазрезы(); 
	
	Для каждого Разрез Из Разрезы Цикл
		СтрокаТаблицы[Разрез + "Доступность"] = СвойстваСтатьи[Разрез];
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределение(ВыделенныеСтроки, НастройкиРаспределения)
	
	Ресурсы = Новый Массив(); 
	Ресурсы.Добавить("СуммаПлатежа");
	
	Для каждого ИдСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = РаспределениеБюджета.НайтиПоИдентификатору(ИдСтроки);	
		Если СтрокаТаблицы <> Неопределено Тогда
			бит_Бюджетирование.РаспределитьПоПрофилюАналитики(НастройкиРаспределения, 
				РаспределениеБюджета, СтрокаТаблицы, Ресурсы);
			Модифицированность = Истина;
			ОбновитьИтоги(СтрокаТаблицы.бит_КлючСтроки, ЭтотОбъект);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Функция РаспределениеПоддерживается(ДанныеСтроки, ПолеФормы)
	
	Поддерживается = Истина;
	ТекстСообщения = "";
	
	Если Поддерживается Тогда
		Исключения = Новый Массив;
		Исключения.Добавить(Элементы.РаспределениеБюджетаДокументПланирования);
		Исключения.Добавить(Элементы.РаспределениеБюджетаСуммаПлатежа);

		Если Исключения.Найти(ПолеФормы) <> Неопределено Тогда
			Поддерживается = Ложь;
			ТекстСообщения = НСтр("ru='По этой колонке распределение не поддерживается.';en='For this column, the distribution is not supported.'");
		КонецЕсли;
	КонецЕсли; 
	
	Если НЕ Поддерживается Тогда
		ПоказатьПредупреждение(, ТекстСообщения,, НСтр("ru='Распределить по ...';en='Distribute ...'"));	
	КонецЕсли; 
	
	Возврат Поддерживается;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбновитьИтоги(КлючСтроки, Форма)

	Распределено = 0;
	Разница		 = 0;
	Для каждого СтрокаТаблицы Из Форма.РаспределениеБюджета Цикл
		Если СтрокаТаблицы.бит_КлючСтроки = КлючСтроки Тогда
			Распределено = Распределено + СтрокаТаблицы.СуммаПлатежа;
		КонецЕсли; 
	КонецЦикла; 

	Если Форма.ЕстьРасшифровкаПлатежа Тогда
		Для каждого СтрокаТаблицы Из Форма.РасшифровкаПлатежа Цикл
			Если СтрокаТаблицы.бит_КлючСтроки = КлючСтроки Тогда
				СтрокаТаблицы.Распределено = Распределено;
				СтрокаТаблицы.Разница 	   = СтрокаТаблицы.СуммаПлатежа - Распределено;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Форма.Распределено = Распределено;
	Форма.Разница      = Форма.СуммаДокумента - Распределено;
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	УстановитьУсловноеОфрмлениеШапка();
	УстановитьУсловноеОфрмлениеРасшифровкаПлатежа();
	УстановитьУсловноеОформлениеРаспределениеБюджета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОфрмлениеШапка()

	// Распределено.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Разница");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Разница", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.ЗеленыйЛес);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=2; ЧН=0");
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Разница");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Разница", ВидСравненияКомпоновкиДанных.НеРавно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=2; ЧН=0");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОфрмлениеРасшифровкаПлатежа()
	
	// ++ БП 	
	// РасшифровкаПлатежаДоговорКонтрагента.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаДоговорКонтрагента");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"РасшифровкаПлатежа.ДоговорКонтрагента", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Договор>';en='<Contract>'"));

	// РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Статья движения ден. средств>';en='<Article motion den. tools>'"));

	// РасшифровкаПлатежаРазница.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРазница");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"РасшифровкаПлатежа.Разница", ВидСравненияКомпоновкиДанных.Равно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста",WebЦвета.ЗеленыйЛес);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=2; ЧН=0");
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаРазница");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"РасшифровкаПлатежа.Разница", ВидСравненияКомпоновкиДанных.НеРавно, 0);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=2; ЧН=0");
	
	// РасшифровкаПлатежаСпособПогашенияЗадолженности
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСпособПогашенияЗадолженности");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Способ погашения>';en='<Settlement method>'"));
	
	// РасшифровкаПлатежаСделка
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РасшифровкаПлатежа.Сделка", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Документ>';en='<Document>'"));
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСделка");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// РасшифровкаПлатежаСчетНаОплату
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РасшифровкаПлатежаСчетНаОплату");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, "ВидОперации",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	// -- БП 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеРаспределениеБюджета()
	
	Разрезы = АналитическиеРазрезы();
	Для каждого Разрез Из Разрезы Цикл
		
		// Доступность аналитик
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределениеБюджета" + Разрез);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"РаспределениеБюджета." + Разрез + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>';en='<Not required>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	КонецЦикла; 
	
	// РаспределениеБюджетаСтатьяОборотов.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределениеБюджетаСтатьяОборотов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаспределениеБюджета.СтатьяОборотов", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОсновнаяСтатьяОборотов", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Статья оборотов>';en='<Article speed>'"));
	
	// Если статья в списке на заполнена, но есть в "шапке", покажем представление статьи шапки.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределениеБюджетаСтатьяОборотов");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаспределениеБюджета.СтатьяОборотов", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОсновнаяСтатьяОборотов", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ОсновнаяСтатьяОборотов"));

	// РаспределениеБюджетаДокументПланирования.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределениеБюджетаДокументПланирования");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаспределениеБюджета.ДокументПланирования", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОсновнаяПлатежнаяПозиция", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Документ планирования>';en='<Planning Document>'"));
	
	// Если документ планирования в списке на заполнен, но есть в "шапке", покажем представление документа шапки.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "РаспределениеБюджетаДокументПланирования");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаспределениеБюджета.ДокументПланирования", ВидСравненияКомпоновкиДанных.НеЗаполнено, "");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОсновнаяПлатежнаяПозиция", ВидСравненияКомпоновкиДанных.Заполнено, "");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.бит_ЦветНедоступногоПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ОсновнаяПлатежнаяПозиция"));

КонецПроцедуры

&НаСервере
Процедура ПодготовитьВспомогательныеДанныеДляПроведения(ДокументОбъект)
	
	УдаленныеПозиции = Новый Массив;
	ПлатежнаяПозицияВШапке = ПлатежнаяПозицияВШапке();
	
	Если ЗначениеЗаполнено(ТекущаяПлатежнаяПозиция) И ТекущаяПлатежнаяПозиция <> ПлатежнаяПозицияВШапке Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("бит_ПлатежнаяПозицияУдаленная", ТекущаяПлатежнаяПозиция);
	КонецЕсли; 
	
	Если ИспользуетсяРаспределениеБюджета И ИспользуетсяПлатежнаяПозиция Тогда
		
		РеквизитыСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "бит_РаспределениеБюджета");
		СтарыеПозиции 	= РеквизитыСсылки.Выгрузить().ВыгрузитьКолонку("ДокументПланирования");
		НовыеПозиции  	= РаспределениеБюджета.Выгрузить().ВыгрузитьКолонку("ДокументПланирования");
		
		// Включим позицию которая была в доп.аналитиках.
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("бит_ПлатежнаяПозицияУдаленная") Тогда
			СтарыеПозиции.Добавить(ДокументОбъект.ДополнительныеСвойства.бит_ПлатежнаяПозицияУдаленная);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтарыеПозиции);
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(НовыеПозиции);
		
		Для Каждого НоваяПозиция Из НовыеПозиции Цикл
			НайденныйЭлемент = СтарыеПозиции.Найти(НоваяПозиция);
			Если НЕ НайденныйЭлемент = Неопределено Тогда
				СтарыеПозиции.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("бит_ПлатежнаяПозицияУдаленная", СтарыеПозиции);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьНомераСтрокРаспределения(Форма)
	
	НомерСтрокиДокумента = 1;
	Для каждого СтрокаТаблицы Из Форма.РаспределениеБюджета Цикл
		СтрокаТаблицы.НомерСтрокиДокумента = НомерСтрокиДокумента;
		НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодификациюВладельцаФормы()
	
	СистемнаяИнформация        = Новый СистемнаяИнформация;
	ТекущаяВерсияПлатформы     = СистемнаяИнформация.ВерсияПриложения;
	МинимальнаяВерсияПлатформы = "8.3.14.0";
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсияПлатформы, МинимальнаяВерсияПлатформы) >= 0 Тогда
		ИмяТипаФормы = "ФормаКлиентскогоПриложения";
	Иначе
		ИмяТипаФормы = "УправляемаяФорма"; //Платформа 8.3.13
	КонецЕсли;
	
	Если ТипЗнч(ВладелецФормы) = Тип(ИмяТипаФормы) Тогда
		Если НЕ ВладелецМодифицирован = ВладелецФормы.Модифицированность Тогда
			ТолькоПросмотр 		  = ВладелецФормы.Модифицированность;
			ВладелецМодифицирован = ВладелецФормы.Модифицированность;
			Если ТолькоПросмотр Тогда
				Модифицированность = Ложь;
			КонецЕсли; 
			ПодготовитьФормуНаСервере();
		КонецЕсли; 
		ПодключитьОбработчикОжидания("ПроверитьМодификациюВладельцаФормы", 0.5, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыПлатежаРаспределенияБюджета(Копирование = Ложь)
	
	ТекущиеДанные = Элементы.РаспределениеБюджета.ТекущиеДанные;
	
	Если ЕстьРасшифровкаПлатежа Тогда
		ДанныеРасшифровки = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		СуммаДокумента 	  = ДанныеРасшифровки.СуммаПлатежа;
		КлючСтроки		  = Элементы.РаспределениеБюджета.ОтборСтрок.бит_КлючСтроки;
	Иначе
		КлючСтроки = "";
	КонецЕсли; 
	
	Итого = 0;
	Для каждого СтрокаТаблицы Из РаспределениеБюджета Цикл
		Если СтрокаТаблицы.бит_КлючСтроки = КлючСтроки Тогда
			Итого = СтрокаТаблицы.СуммаПлатежа + Итого;
		КонецЕсли; 
	КонецЦикла; 
	
	Остаток = СуммаДокумента - Итого + ТекущиеДанные.СуммаПлатежа;
	Если Итого > СуммаДокумента Тогда
		Если НЕ Копирование Тогда
			Если ЕстьРасшифровкаПлатежа Тогда
				ТекстСообщения = НСтр("ru='Сумма распределенных платежей превышает сумму платежа."
"Остаток от распределения: %1.';en='The amount of distributed payment exceeds the amount of the payment."
"The residue from the distribution: %1.'"); 
			Иначе
				ТекстСообщения = НСтр("ru='Сумма распределенных платежей превышает сумму документа."
"Сумма документа: %1.';en='The amount of payments exceeds the amount distributed document."
"The amount of the document:%1.'"); 
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Остаток, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=")); 
			Индекс = ТекущиеДанные.НомерСтрокиДокумента - 1;		
			Поле   = СтрШаблон("РаспределениеБюджета[%1].СуммаПлатежа", Формат(Индекс, "ЧЦ=5; ЧГ="));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Поле, ); 
		КонецЕсли; 
		ТекущиеДанные.СуммаПлатежа = Остаток;
	ИначеЕсли ТекущиеДанные.СуммаПлатежа = 0 Тогда
		ТекущиеДанные.СуммаПлатежа = Остаток;
	КонецЕсли;

	ОбновитьИтоги(ТекущиеДанные.бит_КлючСтроки, ЭтотОбъект);
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьРаспределениеБюджета()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РаспределениеБюджета.НомерСтроки КАК НомерСтрокиДокумента,
	|	РаспределениеБюджета.ЦФО КАК ЦФО,
	|	РаспределениеБюджета.СтатьяОборотов КАК СтатьяОборотов,
	|	РаспределениеБюджета.Проект КАК Проект,
	|	РаспределениеБюджета.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РаспределениеБюджета.Аналитика_1 КАК Аналитика_1,
	|	РаспределениеБюджета.Аналитика_2 КАК Аналитика_2,
	|	РаспределениеБюджета.Аналитика_3 КАК Аналитика_3,
	|	РаспределениеБюджета.Аналитика_4 КАК Аналитика_4,
	|	РаспределениеБюджета.Аналитика_5 КАК Аналитика_5,
	|	РаспределениеБюджета.Аналитика_6 КАК Аналитика_6,
	|	РаспределениеБюджета.Аналитика_7 КАК Аналитика_7,
	|	РаспределениеБюджета.бит_КлючСтроки КАК бит_КлючСтроки,
	|	РаспределениеБюджета.СуммаПлатежа КАК СуммаПлатежа,
	|	РаспределениеБюджета.ДокументПланирования КАК ДокументПланирования
	|ИЗ
	|	#РаспределениеБюджета КАК РаспределениеБюджета
	|ГДЕ
	|	РаспределениеБюджета.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеБюджета",
		СсылкаНаОбъект.Метаданные().ПолноеИмя() + ".бит_РаспределениеБюджета");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	РаспределениеБюджета.Очистить();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РаспределениеБюджета.Добавить(), Выборка);
	КонецЦикла;

КонецПроцедуры
 
// Процедура вызывается по кнопке при изменении активной строки в таблице расшифровки платежа.
//
&НаКлиенте
Процедура ОтобразитьРаспределениеБюджета()
	
	Если ЕстьРасшифровкаПлатежа Тогда
		СтрокаТаблицы =  Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		
		Если СтрокаТаблицы <> Неопределено Тогда
			// Включаем отбор по ключу из текущей строки табличной части "РасшифровкаПлатежа".
			ОтборСтрок = Новый ФиксированнаяСтруктура("бит_КлючСтроки", СтрокаТаблицы.бит_КлючСтроки); 
			
			Элементы.РаспределениеБюджета.ТолькоПросмотр = Ложь;
			Элементы.РаспределениеБюджета.ОтборСтрок 	 = ОтборСтрок;
			
		Иначе
			// Текущая строка в таблице распределения платежа не установлена.
			Элементы.РаспределениеБюджета.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры 
 
&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если ВызовИзСписка Тогда
		Заголовок = Строка(СсылкаНаОбъект);
		Элементы.СсылкаНаОбъект.Видимость = Ложь;
	КонецЕсли; 
	
	ЗаполнитьКэшЗначений();
	ЗаполнитьФлаги();
	
	ПрочитатьРеквизитыВладельцаАналитик();
		
	ДоработатьТаблицуАналитик();	
	
	Если ИспользуетсяРаспределениеБюджета Тогда
		
		// Управляем видимостью колонок дополнительных измерений.
		бит_МеханизмДопИзмерений.ОтобразитьДополнительныеИзмеренияВТабличномПоле_Управляемая(ЭтотОбъект, 
			"РаспределениеБюджета", КэшЗначений.ИзмеренияДоп, КэшЗначений.НастройкиИзмерений);	

		Если ЕстьРасшифровкаПлатежа Тогда
			бит_Казначейство.ПрочитатьРасшифровкуПлатежа(Новый Структура("РасшифровкаПлатежа", РасшифровкаПлатежа), 
				СсылкаНаОбъект);
		КонецЕсли; 
		
		ЗаполнитьРаспределениеБюджета();
		
		Если ЕстьРасшифровкаПлатежа Тогда
			Для каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
				ОбновитьИтоги(СтрокаТаблицы.бит_КлючСтроки, ЭтотОбъект);
			КонецЦикла; 
		Иначе
			ОбновитьИтоги("", ЭтотОбъект);
		КонецЕсли; 
	КонецЕсли;
		
	УстановитьВидимостьДоступностьАналитик(); 	
	ЗапретитьПерезаполнениеАналитик = бит_МеханизмДопИзмерений.ПолучитьЗначениеДополнительногоПарамераОбъекта(
		СсылкаНаОбъект, "ЗапретитьПерезаполнениеАналитик");
		
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//Элементы.ЗапретитьПерезаполнениеАналитик.Видимость = бит_МеханизмДопИзмерений.ВключенРежимЗаполнятьВсегда();
	//
	//Если бит_ОбщегоНазначения.ЭтоСемействоERP() Тогда
	//	Элементы.ФормаКомандаЗаполнитьВсе.Видимость 			  = Ложь;
	//	Элементы.НаборДопАналитикиКомандаЗаполнитьШапку.Видимость = Ложь;
	//	Элементы.ЗаполнитьАналитикиРаспределения.Видимость   = Ложь;
	//КонецЕсли;
	Элементы.ЗапретитьПерезаполнениеАналитик.Видимость = Истина;
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	ОсновнаяСтатьяОборотов 	 = ОсновнаяСтатьяОборотов(ЭтотОбъект);
	ОсновнаяПлатежнаяПозиция = ОсновнаяПлатежнаяПозиция(ЭтотОбъект); 
	ВладелецМодифицирован  	 = ТолькоПросмотр;
		
	УстановитьИзменениеЗапрещено();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	УправлениеФормой(ЭтотОбъект);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИзменениеЗапрещено()
	
	ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	НоваяСтрока = ДанныеДляПроверки.Добавить();
	НоваяСтрока.Дата   = СсылкаНаОбъект.Дата;
	НоваяСтрока.Раздел = "БухгалтерскийУчет";
	НоваяСтрока.Объект = СсылкаНаОбъект.Организация;	
	
	ОписаниеДанных = Новый Структура; 
	ОписаниеДанных.Вставить("НоваяВерсия", Ложь);
	ОписаниеДанных.Вставить("Данные ", СсылкаНаОбъект);
	
	ОписаниеОшибки = "";
	
	ИзменениеЗапрещено = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, ОписаниеДанных,
							ОписаниеОшибки);
	
	УточнениеИнформации = НСтр("ru = 'При записи проведенного документа движения формируются только по регистрам подсистемы ""БИТ.ФИНАНС"".';
							   |en = 'При записи проведенного документа движения формируются только по регистрам подсистемы ""БИТ.ФИНАНС"".'");
	
	Элементы.ДекорацияНадписьИнформация1.Заголовок = ОписаниеОшибки + Символы.ПС + УточнениеИнформации;

КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьФлаги()
	
	// ++ БП 
	ДокументыСРасшифровкой = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ДокументыСРасшифровкой();	
	Если ДокументыСРасшифровкой.Найти(ТипЗнч(СсылкаНаОбъект)) <> Неопределено Тогда
		ИспользуетсяРаспределениеБюджета = Истина;	
	КонецЕсли; 

	// Для некоторых видов операций даем возможность редактирования таб.части.
	Если ИспользуетсяРаспределениеБюджета Тогда
		ВидОперации  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ВидОперации");
		ЕстьРасшифровкаПлатежа = бит_ОбщегоНазначенияПереопределяемый.ЕстьРасшифровкаПлатежа(СсылкаНаОбъект, ВидОперации);
	КонецЕсли; 

	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		ИспользуетсяПланируемоеПоступление = Истина;
		ОграничениеТипаПозиции = Новый ОписаниеТипов("ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств");
	Иначе	
		ИспользуетсяПлатежнаяПозиция = Истина;
		ОграничениеТипаПозиции = Новый ОписаниеТипов("ДокументСсылка.бит_ПлатежнаяПозиция");
	КонецЕсли;
	
	Элементы.РаспределениеБюджетаДокументПланирования.ОграничениеТипа = ОграничениеТипаПозиции;
	// -- БП 
	
КонецПроцедуры

// Процедура заполняет значения, необходимые для работы на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ИзмеренияДоп"      , бит_Бюджетирование.ПолучитьИзмеренияБюджетирования("Дополнительные", "Синоним"));
	// Настройки дополнительных измерений
	КэшЗначений.Вставить("НастройкиИзмерений", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений"));
	// Настройки всех дополнительных аналитик
	КэшЗначений.Вставить("НастройкиАналитик", бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхАналитик());

КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ПредупреждениеОЗапретеИзменения.Видимость = Форма.ИзменениеЗапрещено;
	
	Элементы.ПредупреждениеОНезаписанномДокументе.Видимость = Форма.ВладелецМодифицирован;
	Элементы.СтраницаАналитикиТабличнойЧасти.Видимость 		= Форма.ИспользуетсяРаспределениеБюджета;
	Элементы.ФормаКомандаЗаполнитьВсе.Видимость 			= Форма.ИспользуетсяРаспределениеБюджета;
	Элементы.ФормаЗаписатьИЗакрыть.Доступность 				= НЕ Форма.ВладелецМодифицирован;
	Элементы.ЗапретитьПерезаполнениеАналитик.Доступность    = НЕ Форма.ВладелецМодифицирован;
	Элементы.ЗаполнитьАналитикиРаспределения.Доступность    = НЕ Форма.ВладелецМодифицирован;
	
	Элементы.РаспределениеБюджетаКонтекстноеМенюРаспределитьПоПрофилю.Доступность = НЕ Форма.ВладелецМодифицирован;
	
	Если Форма.ИспользуетсяРаспределениеБюджета Тогда
		Элементы.РасшифровкаПлатежа.Видимость 	  = Форма.ЕстьРасшифровкаПлатежа;
		Элементы.ГруппаСуммаПлатежа.Видимость 	  = НЕ Форма.ЕстьРасшифровкаПлатежа;
		Элементы.СтраницыФормы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Если ПустаяСтрока(Форма.ИмяТекущейСтраницы) Тогда
			Если Форма.РаспределениеБюджета.Количество() <= 1 Тогда
				Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаАналитикиШапки;
			Иначе	
				Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаАналитикиТабличнойЧасти;
			КонецЕсли;
			Форма.ИмяТекущейСтраницы = Элементы.СтраницыФормы.ТекущаяСтраница.Имя;
		Иначе	
			// При обновлении формы-владельца происходит повторное открытие формы.
			// Это приводит к переключению закладок.
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы[Форма.ИмяТекущейСтраницы];
		КонецЕсли;
	Иначе
		Элементы.СтраницыФормы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРеквизитыВладельцаАналитик()
	
	МетаданныеСсылки = СсылкаНаОбъект.Метаданные();
	ИменаРеквизитов  = Новый Массив;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеСсылки) Тогда
		ИменаРеквизитов.Добавить("Организация");
	КонецЕсли; 
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеСсылки) Тогда
		ИменаРеквизитов.Добавить("ВидОперации");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", МетаданныеСсылки) Тогда
		ИменаРеквизитов.Добавить("СуммаДокумента");
	КонецЕсли;
	
	Если ИменаРеквизитов.Количество() <> 0 Тогда
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыСсылки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДоработатьТаблицуАналитик()

	Для каждого СтрокаТаблицы Из НаборДопАналитики Цикл
		ДозаполнитьСтрокуАналитик(СтрокаТаблицы);
	КонецЦикла; 

КонецПроцедуры

// Процедура дозаполняет строку аналитик. 
// 
&НаСервере
Процедура ДозаполнитьСтрокуАналитик(ТекущиеДанные)

	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Аналитика) Тогда
			
			ОписаниеТиповАналитики = ТекущиеДанные.Аналитика.ТипЗначения;
			ТекущиеДанные.ЗначениеАналитики = ОписаниеТиповАналитики.ПривестиЗначение(ТекущиеДанные.ЗначениеАналитики);
			
			// Для дополнительных значений аналитик необходимо проверить владельца.
			Если ТипЗнч(ТекущиеДанные.ЗначениеАналитики) = Тип("СправочникСсылка.бит_ДополнительныеЗначенияАналитик") 
				 И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАналитики) Тогда
			
				Если НЕ ТекущиеДанные.ЗначениеАналитики.Владелец = ТекущиеДанные.Аналитика Тогда
				
					ТекущиеДанные.ЗначениеАналитики = Справочники.бит_ДополнительныеЗначенияАналитик.ПустаяСсылка();
				
				КонецЕсли; 
			
			КонецЕсли; 
			
			ТекущиеДанные.ИмяАналитики = СокрЛП(ТекущиеДанные.Аналитика.Код);
			
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

// Обрабатывает изменение аналитики в строке таблицы НаборДопАналитики. 
// 
// Параметры:
//  ИдСтроки - Число.
// 
&НаСервере
Процедура ИзменениеАналитики(ИдСтроки)
	
	ТекущиеДанные = НаборДопАналитики.НайтиПоИдентификатору(ИдСтроки);
	ДозаполнитьСтрокуАналитик(ТекущиеДанные);
	
	Если КэшЗначений.НастройкиАналитик.Получить(ТекущиеДанные.ИмяАналитики) = Неопределено Тогда
		КэшЗначений.Вставить("НастройкиАналитик", бит_МеханизмДопИзмерений.ПолучитьНастройкиДополнительныхАналитик());	
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ЗначениеАналитики) = Тип("ДокументСсылка.бит_ПлатежнаяПозиция") Тогда
		УстановитьВидимостьДоступностьАналитик();
	КонецЕсли;
	
КонецПроцедуры // ИзменениеАналитики()

&НаСервере
Процедура ЗаполнитьШапку(ЗаполнитьДополнительныеКолонки)
	
	НаборДопАналитики.Очистить();
	бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоУмолчанию(
		СсылкаНаОбъект, НаборДопАналитики, Истина, Ложь);
	УстановитьВидимостьДоступностьАналитик();
	
	Кандидат = ОсновнаяСтатьяОборотов(ЭтотОбъект);
	Если ЗаполнитьДополнительныеКолонки Тогда
		Если ОсновнаяСтатьяОборотов <> Кандидат Тогда
			ОсновнаяСтатьяОборотов = Кандидат;
			ЗаполнитьДобавленныеКолонкиТаблиц();	
		КонецЕсли;	
	Иначе
		ОсновнаяСтатьяОборотов = Кандидат;
	КонецЕсли; 
	
	ОсновнаяПлатежнаяПозиция = ОсновнаяПлатежнаяПозиция(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитикиРаспределенияНаСервере()

	ДокументыСРасшифровкой 			 = бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ДокументыСРасшифровкой();	
	ИспользуетсяРаспределениеБюджета = ДокументыСРасшифровкой.Найти(ТипЗнч(СсылкаНаОбъект)) <> Неопределено;
	
	ДокОбъект = СсылкаНаОбъект.ПолучитьОбъект(); // Временная копия объекта для заполнения.
	Если ИспользуетсяРаспределениеБюджета Тогда
		ДокОбъект.бит_РаспределениеБюджета.Загрузить(РеквизитФормыВЗначение("РаспределениеБюджета"));
	КонецЕсли;
	
	бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоУмолчанию(ДокОбъект, НаборДопАналитики, Ложь, Истина);

	Если ИспользуетсяРаспределениеБюджета Тогда
		РаспределениеБюджета.Загрузить(ДокОбъект.бит_РаспределениеБюджета.Выгрузить());
	КонецЕсли;
	
	ЗаполнитьНомераСтрокРаспределения(ЭтотОбъект);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеНаСервере()
	
	ЗаполнитьШапку(Ложь);
	ЗаполнитьАналитикиРаспределенияНаСервере();
	ЗапретитьПерезаполнениеАналитик = Ложь;
	УстановитьВидимостьДоступностьАналитик();
	
КонецПроцедуры

// Процедура заполняет дополнительные аналитики по платежной позиции.
// Параметры:
//  ДокументБит - ДокументСсылка.бит_ПлатежнаяПозиция 
// 				  или ДокументСсылка.бит_РасходнаяПозиция 
// 				  или ДокументСсылка.бит_ПланируемоеПоступлениеДенежныхСредств.
// 
&НаСервере
Процедура ЗаполнениеДополнительныхАналитикПоДокументуБит(Знач ДокументБит)
	
	НаборЗаписейАналитики = РеквизитФормыВЗначение("НаборДопАналитики");
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//бит_МеханизмДопИзмерений.ЗаполнитьДополнительныеАналитикиПоДокументуБит(
	//	НаборЗаписейАналитики, СсылкаНаОбъект, ДокументБит);
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	ЗначениеВРеквизитФормы(НаборЗаписейАналитики, "НаборДопАналитики");	
	
	Для каждого ТекущаяСтрока Из НаборДопАналитики Цикл
		ДозаполнитьСтрокуАналитик(ТекущаяСтрока);	
	КонецЦикла;
	
	УстановитьВидимостьДоступностьАналитик(Истина);
	 	
КонецПроцедуры

// Процедура устанавливает доступность элементов, зависящих от аналитики "ПлатежнаяПозиция".
// 
&НаСервере
Процедура УстановитьВидимостьДоступностьАналитик(ЕстьДокументОплатыБит = Ложь)

	// ++ БП 
	Если Не ЕстьДокументОплатыБит Тогда
		МассивСтрокПлПоз = НаборДопАналитики.НайтиСтроки(Новый Структура("Аналитика", ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция));
		Для каждого ЭлементПлПоз Из МассивСтрокПлПоз Цикл
			Если ЗначениеЗаполнено(ЭлементПлПоз.ЗначениеАналитики) Тогда
				ЕстьДокументОплатыБит = Истина;
				Прервать;		
			КонецЕсли;   	
		КонецЦикла;
	КонецЕсли;
		
	Если ЕстьДокументОплатыБит Тогда 
		// Однозначно запрещаем перезаполнение, если платежная позиция есть.
		ЗапретитьПерезаполнениеАналитик = Истина;
	КонецЕсли;                                            	
	// -- БП 
	
КонецПроцедуры

&НаСервере
Функция ПлатежнаяПозицияВШапке()
		
	ПлатежнаяПозицияВШапке = Документы.бит_ПлатежнаяПозиция.ПустаяСсылка(); 		
	Для каждого Запись Из НаборДопАналитики Цикл
		Если Запись.Аналитика = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция Тогда 				
			ПлатежнаяПозицияВШапке = Запись.ЗначениеАналитики;
			Прервать;  				
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ПлатежнаяПозицияВШапке;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПланируемоеПоступлениеОтбор(ИзменятьРеквизиты)

	Оповещение = Новый ОписаниеОповещения("ВыборПоступленияСредст", ЭтотОбъект,ИзменятьРеквизиты); 
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПоступлениеОтбор", СсылкаНаОбъект);
	ОткрытьФорму("Документ.бит_ПланируемоеПоступлениеДенежныхСредств.ФормаВыбора", ПараметрыОтбора,,,,,Оповещение);

КонецПроцедуры

// Процедура окончание процедуры "ОткрытьПланируемоеПоступлениеОтбор". 
//
// Параметры:
//  РезультатВыбора - Структура.
//  ИзменятьРеквизиты - Булево.
//
&НаКлиенте 
Процедура ВыборПоступленияСредст(РезультатВыбора, ИзменятьРеквизиты) Экспорт
	
	Если ИзменятьРеквизиты Тогда
	
		ТекущиеДанные = Элементы.НаборДопАналитики.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.ЗначениеАналитики = РезультатВыбора;
		НаборДопАналитикиЗначениеАналитикиПриИзменении(Элементы.НаборДопАналитикиЗначениеАналитики);
	Иначе	
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.бит_ПланируемоеПоступление = РезультатВыбора;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораСтатьиОборотов()

	ТипыДокументовБанкКасса = Новый Массив(); 
	ТипыДокументовБанкКасса.Добавить(Тип("ДокументСсылка." 
		+ бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ИмяДокументаПоступленияБезналичныхДенежныхСредств()));
	ТипыДокументовБанкКасса.Добавить(Тип("ДокументСсылка." 
		+ бит_ОбщегоНазначенияКлиентСерверПереопределяемый.ИмяДокументаСписанияБезналичныхДенежныхСредств()));
	ТипыДокументовБанкКасса.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	ТипыДокументовБанкКасса.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Если ТипыДокументовБанкКасса.Найти(ТипЗнч(СсылкаНаОбъект)) <> Неопределено Тогда
		Фильтр = Новый Структура("ТипСтатьи", ПредопределенноеЗначение("Перечисление.бит_ТипыСтатейОборотов.БДДС"));
		бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.НаборДопАналитикиЗначениеАналитики, Фильтр);		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-08-21 (#3066)
&НаКлиенте
Процедура РасшифровкаПлатежаок_СтатьяОборотовБДРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;		
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//ТекущиеДанные.бит_СтатьяОборотов = ПолучитьСоответствующуюСтатьюБДДС(ТекущиеДанные.Ок_СтатьяОборотовБДР);	
	НайденныеСтроки = РаспределениеБюджета.НайтиСтроки(Новый Структура("бит_КлючСтроки", ТекущиеДанные.бит_КлючСтроки));
	Для Каждого СтрокаТЧ ИЗ НайденныеСтроки Цикл
		СтрокаТЧ.СтатьяОборотов = ПолучитьСоответствующуюСтатьюБДДС(ТекущиеДанные.Ок_СтатьяОборотовБДР);
	КонецЦикла;	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
	
	//Регл
	ТекущиеДанные.СтатьяДвиженияДенежныхСредств = Неопределено;
	МассивСтатей = бит_Бюджетирование.СвязанныеСтатьиОборотовИСтатьиРегл(ТекущиеДанные.бит_СтатьяОборотов, "СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	Если МассивСтатей.Количество() > 0 Тогда  		
		ТекущиеДанные.СтатьяДвиженияДенежныхСредств = МассивСтатей[0];		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствующуюСтатьюБДДС(СтатьяОборотов)
	
	Возврат РегистрыСведений.бит_СоответствияАналитик.ПолучитьПравуюАналитику(ПредопределенноеЗначение("Справочник.бит_ВидыСоответствийАналитик.СтатьиОборотовБДР_СтатьиОборотовБДДС"),СтатьяОборотов);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьТабЧасть(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда" 	 		, "бит_РедактированиеДополнительныхАналитик");
	ПараметрыФормы.Вставить("Объект"	 		, ПолучитьОбъектЗаполненияНаСервере());	
	ПараметрыФормы.Вставить("АдресАналитикиТЧ"	, ПодготовитьАналитикТЧ(ЭтаФорма.УникальныйИдентификатор));
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти" , "РасшифровкаПлатежа");
		
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДанныеБюджета.Форма", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьАналитикТЧ(УИДФормы)
	
	ТЗ = РасшифровкаПлатежа.Выгрузить();
	КолонкаСуммаПлатежа = ТЗ.Колонки.Найти("СуммаПлатежа");
	Если КолонкаСуммаПлатежа<>Неопределено Тогда 
		КолонкаСуммаПлатежа.Имя = "Сумма";
	КонецЕсли;
	
	Для Каждого Колонка ИЗ ТЗ.Колонки Цикл 
		Если Колонка.Имя = "СуммаПлатежа" Тогда 
			Колонка.Имя = "Сумма";
		ИначеЕсли СтрНайти(Колонка.Имя,"бит_")>0 Тогда 
			Колонка.Имя = СтрЗаменить(Колонка.Имя,"бит_","");
		КонецЕсли;
	
	КонецЦикла;
		
	Возврат ПоместитьВоВременноеХранилище(ТЗ, УИДФормы);
	
КонецФункции

&НаСервере
Функция ПолучитьОбъектЗаполненияНаСервере()
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда 
		
		мНайденныеДопАналитики = НаборДопАналитики.НайтиСтроки(Новый Структура("Аналитика",ПредопределенноеЗначение("ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик.ПлатежнаяПозиция")));
		
		Если мНайденныеДопАналитики.Количество() = 0 Тогда 
			Возврат ПредопределенноеЗначение("Документ.бит_ЗаявкаНаРасходованиеСредств.ПустаяСсылка");
		Иначе 
			Возврат мНайденныеДопАналитики[0].ЗначениеАналитики.ДокументОснование;			
		КонецЕсли;
	
	КонецЕсли;

	Возврат СсылкаНаОбъект;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьТабличнуюЧасть(ХранилищеДанные)

	//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
	//ДанныеЗаполнения = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(ХранилищеДанные);
	//Для каждого Строка Из ДанныеЗаполнения Цикл
	//	
	//	пИмяАналитики = Строка.Реквизит;
	//	Если Найти("ЦФО,СтатьяОборотов,Проект,НоменклатурнаяГруппа",пИмяАналитики) > 0 Тогда 
	//		пИмяАналитики = "бит_" + пИмяАналитики;
	//	КонецЕсли;
	//		
	//	Если Объект.РасшифровкаПлатежа[Строка.ИД].Свойство(пИмяАналитики) Тогда
	//	
	//		Объект.РасшифровкаПлатежа[Строка.ИД][пИмяАналитики] = Строка.Значение;
	//	
	//	КонецЕсли; 	
	//			
	//КонецЦикла; 
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(ХранилищеДанные);
	Если ДанныеЗаполнения.Колонки.Найти("ИмяТабличнойЧасти") = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	Для каждого Строка Из ДанныеЗаполнения Цикл
		пИмяАналитики = Строка.Реквизит;
		Если ЭтаФорма[Строка.ИмяТабличнойЧасти][Строка.ИД].Свойство(пИмяАналитики) Тогда			
			ЭтаФорма[Строка.ИмяТабличнойЧасти][Строка.ИД][пИмяАналитики] = Строка.Значение;			
		КонецЕсли; 	
	КонецЦикла;	
	Модифицированность = Истина;	
	//1С-ИжТиСи, Кондратьев, 03.2020, обновление )

КонецПроцедуры // ПерезаполнитьТабличнуюЧасть()
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-08-21 (#3066)

//1С-ИжТиСи, Кондратьев, 03.2020, обновление (
&НаКлиенте
Процедура ИзменитьТабЧастьРаспределение(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Команда" 	 		, "бит_РедактированиеДополнительныхАналитик");
	ПараметрыФормы.Вставить("Объект"	 		, ПолучитьОбъектЗаполненияНаСервере());	
	ПараметрыФормы.Вставить("АдресАналитикиТЧ"	, ПодготовитьАналитикТЧРаспределение(ЭтаФорма.УникальныйИдентификатор));
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти" , "РаспределениеБюджета");
		
	ОткрытьФорму("Обработка.бит_ИзменениеТабЧастиДанныеБюджета.Форма", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьАналитикТЧРаспределение(УИДФормы)
	
	ТЗ = РаспределениеБюджета.Выгрузить();
	КолонкаСуммаПлатежа = ТЗ.Колонки.Найти("СуммаПлатежа");
	Если КолонкаСуммаПлатежа<>Неопределено Тогда 
		КолонкаСуммаПлатежа.Имя = "Сумма";
	КонецЕсли;
	
	Для Каждого Колонка ИЗ ТЗ.Колонки Цикл 
		Если Колонка.Имя = "СуммаПлатежа" Тогда 
			Колонка.Имя = "Сумма";
		КонецЕсли;	
	КонецЦикла;
		
	Возврат ПоместитьВоВременноеХранилище(ТЗ, УИДФормы);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеТабличнойЧасти" Тогда 		
		Если НЕ ЭтоАдресВременногоХранилища(Параметр) Тогда
			Возврат;
		КонецЕсли; 
		ПерезаполнитьТабличнуюЧасть(Параметр);		
	КонецЕсли; 

КонецПроцедуры
//1С-ИжТиСи, Кондратьев, 03.2020, обновление )
