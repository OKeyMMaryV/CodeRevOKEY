
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивГруппировок = ?(Параметры.Свойство("МассивГруппировок"), Параметры.МассивГруппировок, Новый Массив);
	ИсточникСубконто  = ?(Параметры.Свойство("ИсточникСубконто"),  Параметры.ИсточникСубконто,  Неопределено);
	Счет			  = ?(Параметры.Свойство("Счет"),              Параметры.Счет,              Неопределено);
	          	
	ЗаполнитьДеревоПолей(МассивГруппировок, ИсточникСубконто, Счет);
	
	ЗакрыватьПриВыборе = Ложь;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПолей

// Процедура - обработчик события "Выбор" табличного поля "ДеревоПолей".
// 
&НаКлиенте
Процедура ДеревоПолейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = ДеревоПолей.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		РезСтруктура = СформироватьСтруктуруРезультат(ТекущиеДанные);
		ОповеститьОВыборе(ТекущиеДанные.Представление);
		Закрыть(РезСтруктура);
		
	КонецЕсли; 
	
КонецПроцедуры // ДеревоПолейВыбор()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПолей.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		РезСтруктура = СформироватьСтруктуруРезультат(ТекущиеДанные);
		ОповеститьОВыборе(ТекущиеДанные.Представление);
		Закрыть(РезСтруктура);
		
	Иначе	
		
		Закрыть();
		
	КонецЕсли; 
	           	
КонецПроцедуры // КомандаОК()

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры // КомандаОтмена()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет дерево полей.
// 
// Параметры:
//  ДоступныеПоля - ПоляНастройки.
//  ЭлементыВерх  - ДанныеФормыКоллекцияЭлементовДерева.
// 
&НаСервере
Процедура ЗаполнитьДеревоПолей(МассивГруппировок, ИсточникСубконто, Счет)
	
	КореньДерева = ДеревоПолей.ПолучитьЭлементы();
	
	Для каждого ЭлГрупп Из МассивГруппировок Цикл
		СтрокаДерева = КореньДерева.Добавить();
		СтрокаДерева.Имя           = ЭлГрупп;
		СтрокаДерева.Представление = ЭлГрупп;
	КонецЦикла;
	
	Если ИсточникСубконто = Неопределено И Счет <> Неопределено Тогда
		ИсточникСубконто = Счет.ВидыСубконто;
	КонецЕсли;
	
	Если ИсточникСубконто <> Неопределено Тогда
		Для каждого СтрТч Из ИсточникСубконто Цикл
			СтрокаДерева = КореньДерева.Добавить();
			СтрокаДерева.Имя           = "Субконто" + СокрЛп(СтрТч.НомерСтроки);
			СтрокаДерева.Представление = СтрТч.ВидСубконто;			
			СтрокаДерева.ЭтоСубконто   = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеревоПолей()

// Функция формирует структуру результат.
// 
// Возвращаемое значение:
//  РезСтруктура - Структура
// 
&НаКлиенте
Функция СформироватьСтруктуруРезультат(ТекущиеДанные)
	
	РезСтруктура = Новый Структура;
	// РезСтруктура.Вставить("Представление", ТекущиеДанные.Представление);
	РезСтруктура.Вставить("Имя"          , ТекущиеДанные.Имя);
	РезСтруктура.Вставить("ЭтоСубконто"  , ТекущиеДанные.ЭтоСубконто);
	
	Возврат РезСтруктура;
	
КонецФункции // СформироватьСтруктуруРезультат()

#КонецОбласти

