#Область ОписаниеПеременных

&НаСервере
Перем мДерево; // Хранит дерево документов на сервере.

&НаСервере
Перем мУжеВСписке; // Хранит соответствие документов и признак присутствия в списке на сервере.

&НаСервере
Перем мКэшРеквизитовЗадачи; // Хранит соответствие имени документов и их метаданных на сервере.

&НаСервере
Перем мКэшПраваДоступаКМетаданным; // Хранит соответствие документов и права доступа к ним на сервере.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("ЗадачаСсылка", ЗадачаСсылка);
	Параметры.Свойство("ЗадачаСсылка", ЗадачаСсылкаИсточник);
	
	ЗаполнитьКэшЗначений();	
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗадачаСсылка = Неопределено 
		Или ЗадачаСсылка.Пустая() Тогда
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;  	
	
	ВыполнитьОбновлениеДереваЗадач();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗадач

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// табличного поля "ДеревоЗадач".
// 
&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКнопок();
	
КонецПроцедуры // ДеревоЗадачПриАктивизацииСтроки()

// Процедура - обработчик события "ПередНачаломИзменения" 
// табличного поля "ДеревоЗадач".
// 
&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)	
	
	Отказ = Истина;
	
	ОткрытьЗадачу();
	
КонецПроцедуры // ДеревоЗадачПередНачаломИзменения()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "Изменить" формы.
// 
&НаКлиенте
Процедура Изменить(Команда)
	
	ОткрытьЗадачу();
	
КонецПроцедуры // Изменить()

// Процедура - обработчик команды "ИзменитьПометкуУдаления" формы.
// 
&НаКлиенте
Процедура ИзменитьПометкуУдаления(Команда)
	
	ДанныеТекущейСтроки = Элементы.ДеревоЗадач.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗадачаСсылка = ДанныеТекущейСтроки.Ссылка;
	ПометкаУдаления   = ДанныеТекущейСтроки.ПометкаУдаления;
	ИзмененаПометка   = ИзменитьПометкуУдаленияЗадачи(ТекЗадачаСсылка, ПометкаУдаления);
	
	Если ИзмененаПометка Тогда
		
		ДанныеТекущейСтроки.ПометкаУдаления = Не ПометкаУдаления;
		
		// Установим индекс пиктограммы текущего состояния документа.
		УстановитьИндексПиктограммыСостоянияЗадачиКлиент(ДанныеТекущейСтроки);
		
		ОповеститьОбИзменении(ТипЗнч(ТекЗадачаСсылка));
		
		ОбновитьДоступностьКнопок();
		
	КонецЕсли;

КонецПроцедуры // ИзменитьПометкуУдаления()

// Процедура - обработчик команды "Обновить" формы.
// 
&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	Если ОсновнаяЗадачаЕщеДоступен(ЗадачаСсылка) Тогда
		ВыполнитьОбновлениеДереваЗадач();
	Иначе
		ЗакрытьФормуСПредупреждением("ru = 'Задача, для которой сформирован отчет о структуре
									 |подчиненности была удалена, или же стала недоступна.'");
	КонецЕсли;		
	
КонецПроцедуры // ОбновитьСписок()

// Процедура - обработчик команды "ВывестиДляТекущего" формы.
// 
&НаКлиенте
Процедура ВывестиДляТекущего(Команда)
	
	ДанныеТекущейСтроки = Элементы.ДеревоЗадач.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗадачаСсылка = ДанныеТекущейСтроки.Ссылка;
	
	Если ОсновнаяЗадачаЕщеДоступен(ЗадачаСсылка) Тогда
		ВыполнитьОбновлениеДереваЗадач();
	Иначе
		ЗакрытьФормуСПредупреждением("ru = 'Задача, для которой сформирован отчет о структуре
									 |подчиненности была удален, или же стала недоступна.'");
	КонецЕсли;
	
КонецПроцедуры // ВывестиДляТекущего()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура вызывает процедуру по заполнению дерева документов.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ВыполнитьОбновлениеДереваЗадач()
	
	ВывестиДеревоЗадач();
	РазвернутьДеревоЗадач();
		
КонецПроцедуры // ВыполнитьОбновлениеДереваЗадач()

// Процедура разворачивает дерево документов.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура РазвернутьДеревоЗадач()

	ЭлементыДерева = ДеревоЗадач.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл

		Элементы.ДеревоЗадач.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры // РазвернутьДеревоЗадач()

// Процедура устанавливает индекс пиктограммы текущего состояния документа на клиенте.
// 
// Параметры:
//  ДанныеТекущейСтроки - ДанныеФормыЭлементДерева.
// 
&НаКлиенте 
Процедура УстановитьИндексПиктограммыСостоянияЗадачиКлиент(ДанныеТекущейСтроки)
	
	// Установим индекс пиктограммы текущего состояния задачи:
	// 0 - Создана, Принята ...и т.п.,
	// 1 - Помечена на удаление,
	// 2 - Выполнена.
	
	Если ДанныеТекущейСтроки.Состояние = фКэшЗначений.ЗадачаВыполнена Тогда
		ДанныеТекущейСтроки.ИндексПиктограммы = 1;
		
	ИначеЕсли ДанныеТекущейСтроки.ПометкаУдаления Тогда
		ДанныеТекущейСтроки.ИндексПиктограммы = 2;
		
	Иначе
		ДанныеТекущейСтроки.ИндексПиктограммы = 0;
	КонецЕсли;
	
КонецПроцедуры // УстановитьИндексПиктограммыСостоянияЗадачиКлиент()

// Процедура выполняет закрытие формы с предупреждением.
// 
// Параметры:
//  ТекстПредупреждения - Строка.
// 
&НаКлиенте
Процедура ЗакрытьФормуСПредупреждением(ТекстПредупреждения)
	
	ЭтаФорма.Закрыть();
	
	ПоказатьПредупреждение(,ТекстПредупреждения);
	
КонецПроцедуры // ЗакрытьФормуСПредупреждением()

// Процедура выполняет открытие текущего документа.
// 
// Параметры:
//  Нет.
// 
&НаКлиенте
Процедура ОткрытьЗадачу()
	
	ДанныеТекущейСтроки = Элементы.ДеревоЗадач.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ДанныеТекущейСтроки.Ссылка);
	
КонецПроцедуры // ОткрытьЗадачу()

// Процедура управляет доступностью кнопок.
// 
&НаКлиенте 
Процедура ОбновитьДоступностьКнопок()
	
	ДанныеТекущейСтроки = Элементы.ДеревоЗадач.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки = Неопределено Тогда
		
		ПроведениеРазрешено 		= Ложь;
		ИзменениеСостоянияРазрешено = Ложь;
		
	Иначе
		
		ТекЗадачаСсылка   			= ДанныеТекущейСтроки.Ссылка;
		ИзменениеСостоянияРазрешено = ?(Не ТекЗадачаСсылка = ЗадачаСсылкаИсточник, Истина, Ложь);
		
	КонецЕсли;
	
	Элементы.ДеревоЗадачИзменитьЗадачу.Доступность 		     = ИзменениеСостоянияРазрешено;
	Элементы.ДеревоЗадачИзменитьПометкуУдаления.Доступность  = ИзменениеСостоянияРазрешено;
	
КонецПроцедуры // ОбновитьДоступностьКнопок()

// Процедура заполняет кэш значений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ЗадачаВыполнена", Справочники.бит_СтатусыОбъектов.Задача_Выполнена);	

КонецПроцедуры // ЗаполнитьКэшЗначений()

// Функция проверяет наличие документа в ИБ.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.
// 
// Возвращаемое значение:
//  ЗадачаДоступна - Булево.
// 
&НаСервереБезКонтекста
Функция ОсновнаяЗадачаЕщеДоступен(ЗадачаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЗадачаСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Представление 
	|ИЗ 
	|	Задача." + ЗадачаСсылка.Метаданные().Имя + " 
	|ГДЕ 
	|	Ссылка = &ТекущийДокумент";
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗадачаДоступна = ?(РезультатЗапроса.Пустой(), Ложь, Истина);
	
	Возврат ЗадачаДоступна;
	
КонецФункции // ОсновнаяЗадачаЕщеДоступен()

// Процедура вывода дерева структуры подчиненности документа.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ВывестиДеревоЗадач()
	
	ДанныеДерева = ДеревоЗадач.ПолучитьЭлементы();
	ДанныеДерева.Очистить();
	
	мДерево = ДанныеДерева;	
	мУжеВСписке.Очистить();
	
	ВывестиРодительскиеЗадачи(ЗадачаСсылка);
	ВывестиПодчиненныеЗадачи(мДерево, мКэшПраваДоступаКМетаданным);
				
КонецПроцедуры // ВывестиДеревоЗадач()

// Функция изменяет пометку удаления документа.
// 
// Параметры:
//  ТекЗадачаСсылка - ЗадачаСсылка.
//  ПометкаУдаления   - Булево.
// 
// Возвращаемое значение:
//   ИзмененаПометка - Булево
// 
&НаСервереБезКонтекста 
Функция ИзменитьПометкуУдаленияЗадачи(ТекЗадачаСсылка, ПометкаУдаления)
	
	ИзмененаПометка = бит_ОбщегоНазначения.ИзменитьПометкуНаУдалениеУОбъекта(ТекЗадачаСсылка
																			,Не ПометкаУдаления
																			,
																			,"Ошибки");
	Возврат ИзмененаПометка;
	
КонецФункции // ИзменитьПометкуУдаленияЗадачи()

// Процедура устанавливает индекс пиктограммы текущего состояния документа на сервере.
// 
// Параметры:
//  ДанныеТекущейСтроки - ДанныеФормыЭлементДерева.
// 
&НаСервереБезКонтекста 
Процедура УстановитьИндексПиктограммыСостоянияЗадачиСервер(ДанныеТекущейСтроки)
	
	// Установим индекс пиктограммы текущего состояния задачи:
	// 0 - Создана, Принята ...и т.п.,
	// 1 - Помечена на удаление,
	// 2 - Выполнена.
	
	Если ДанныеТекущейСтроки.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Выполнена Тогда
		ДанныеТекущейСтроки.ИндексПиктограммы = 1;
		
	ИначеЕсли ДанныеТекущейСтроки.ПометкаУдаления Тогда
		ДанныеТекущейСтроки.ИндексПиктограммы = 2;
		
	Иначе
		ДанныеТекущейСтроки.ИндексПиктограммы = 0;
	КонецЕсли;
	
КонецПроцедуры // УстановитьИндексПиктограммыСостоянияЗадачиСервер()

// Функция добавляет элементы в список документов.
// 
// Параметры:
//  СписокРеквизитов     	- СписокЗначений.
//  МетаданныеЗадача  		- ОбъектМетаданных.
//  МетаданныеЗадачи  		- КоллекцияОбъектовМетаданных.
//  мКэшМетаданныеРеквизита - Соответствие.
// 
&НаСервере
Процедура ДополнитьСписокЗадачПоРеквизитам(СписокРеквизитов, ЗадачаСсылка, МетаданныеЗадача, МетаданныеЗадачи, мКэшМетаданныеРеквизита)

	Для Каждого Реквизит ИЗ МетаданныеЗадача.Реквизиты Цикл
		
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
			
			МетаданныеРеквизита = мКэшМетаданныеРеквизита.Получить(ТекущийТип);
			Если МетаданныеРеквизита = неопределено Тогда
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				мКэшМетаданныеРеквизита.Вставить(ТекущийТип,МетаданныеРеквизита);
			КонецЕсли;
					
			Если МетаданныеРеквизита<>Неопределено 
				 И МетаданныеЗадачи.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				 
				Попытка
					ЗначениеРеквизита = ЗадачаСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				
				Если ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ЗадачаСсылка[Реквизит.Имя]) = Неопределено Тогда
					 
					Попытка
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата, "ДФ=yyyyMMddЧЧММсс"));
					Исключение
						ОтладкаТекстОшибки = ОписаниеОшибки();
					КонецПопытки;
					 
				КонецЕсли;
				
			КонецЕсли;			
			
		КонецЦикла;
	КонецЦикла;	
		
КонецПроцедуры // ДополнитьСписокЗадачПоРеквизитам()

// Процедура выполняет вывод родительских документов.
// 
&НаСервере
Процедура ВывестиРодительскиеЗадачи(ЗадачаСсылка)
	
	МетаданныеЗадача = ЗадачаСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	МетаданныеЗадачи = Метаданные.Задачи; 
	мКэшМетаданныеРеквизита = Новый Соответствие;
	
	
	ДополнитьСписокЗадачПоРеквизитам(СписокРеквизитов, ЗадачаСсылка, МетаданныеЗадача, МетаданныеЗадачи, мКэшМетаданныеРеквизита);
			
	СписокРеквизитов.СортироватьПоПредставлению();
	мУжеВСписке.Вставить(ЗадачаСсылка, Истина);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеЗадачи(СписокРеквизитов[0].Значение);
	ИначеЕсли СписокРеквизитов.Количество() > 1 Тогда
		ВывестиБезРодителей(СписокРеквизитов);		
	КонецЕсли;

	Если ТипЗнч(мДерево) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтрокаДерева = мДерево.ПолучитьЭлементы().Добавить();
	Иначе
		СтрокаДерева = мДерево.Добавить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСсылка);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтаЗадача.Ссылка,
	|	ЭтаЗадача.ПометкаУдаления,
	|	ЭтаЗадача.Представление КАК ЗадачаПредставление,
	|	ЭтаЗадача.Состояние,
	|	ВЫБОР КОГДА ЭтаЗадача.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		ТОГДА ЭтаЗадача.РольИсполнителя
	|		ИНАЧЕ ЭтаЗадача.Исполнитель
	|	КОНЕЦ КАК Исполнитель
	|ИЗ
	|	Задача." + МетаданныеЗадача.Имя + " КАК ЭтаЗадача
	|ГДЕ
	|	ЭтаЗадача.Ссылка = &Ссылка
	|";
	                 					   	
	Выборка  = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда		
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
		// Установим индекс пиктограммы текущего состояния документа.
		УстановитьИндексПиктограммыСостоянияЗадачиСервер(СтрокаДерева);
		
	Иначе
		СтрокаДерева.Ссылка				 = ЗадачаСсылка;
		СтрокаДерева.ЗадачаПредставление = Строка(ЗадачаСсылка);
		
	КонецЕсли;
	
	мДерево = СтрокаДерева;
		
КонецПроцедуры // ВывестиРодительскиеЗадачи()

// Процедура осуществляет вывод родительских документов с ограничением по уровню в дереве.
// 
// Параметры:
//  СписокДокументов   - Список значений.
//  ВывестиПодчиненные - Булево.
// 
&НаСервере
Процедура ВывестиБезРодителей(СписокДокументов, ВывестиПодчиненные = Ложь)
	
	Если ТипЗнч(мДерево) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтрокиДерева = мДерево.ПолучитьЭлементы();
	Иначе
		СтрокиДерева = мДерево;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокДокументов Цикл
		
		МетаданныеЗадача = ЭлементСписка.Значение.Метаданные();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ЭлементСписка.Значение);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтаЗадача.Ссылка,
		|	ЭтаЗадача.ПометкаУдаления,
		|	ЭтаЗадача.Представление КАК ЗадачаПредставление,
		|	ЭтаЗадача.Состояние,
		|	ВЫБОР КОГДА ЭтаЗадача.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|		ТОГДА ЭтаЗадача.РольИсполнителя
		|		ИНАЧЕ ЭтаЗадача.Исполнитель
		|	КОНЕЦ КАК Исполнитель
		|ИЗ
		|	Задача." + МетаданныеЗадача.Имя + " КАК ЭтаЗадача
		|ГДЕ
		|	ЭтаЗадача.Ссылка = &Ссылка
		|";
	
		Выборка  = Запрос.Выполнить().Выбрать();
		ЕСли Выборка.Следующий() Тогда		
			
			Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
				
				СтрокаДерева = СтрокиДерева.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
				// Установим индекс пиктограммы текущего состояния документа.				
				УстановитьИндексПиктограммыСостоянияЗадачиСервер(СтрокаДерева);				
				
				мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
				
				Если ВывестиПодчиненные Тогда
					ВывестиПодчиненныеЗадачи(СтрокаДерева, мКэшПраваДоступаКМетаданным);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;

	мДерево = СтрокаДерева;
	
КонецПроцедуры // ВывестиБезРодителей()

// Процедура осуществляет вывод подчиненных документов.
// 
// Параметры:
//  СтрокаДерева 				- ДанныеФормыЭлементДерева.
//  мКэшПраваДоступаКМетаданным - Соответствие.
// 
&НаСервере
Процедура ВывестиПодчиненныеЗадачи(СтрокаДерева, мКэшПраваДоступаКМетаданным)
	
	ТекущийДокумент = СтрокаДерева.Ссылка;	
	Таблица = бит_ПолныеПрава.ПолучитьСписокПодчиненныхДокументов(ТекущийДокумент, мКэшПраваДоступаКМетаданным, "бит_СтруктураПодчиненностиЗадач");
	КэшПоТипамЗадач = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		
		МетаданныеЗадача = СтрокаТаблицы.Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеЗадача) Тогда
			Продолжить;
		КонецЕсли;			
		ИмяЗадачи 	  = МетаданныеЗадача.Имя;
		СинонимЗадачи = МетаданныеЗадача.Синоним;
		
		СтруктураТипа = КэшПоТипамЗадач[ИмяЗадачи];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимЗадачи, Новый Массив);
			КэшПоТипамЗадач.Вставить(ИмяЗадачи, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);		
		
	КонецЦикла;
	
	Если КэшПоТипамЗадач.Количество() = 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеЗадачи УПОРЯДОЧИТЬ ПО ПодчиненныеЗадачи.Дата";
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение ИЗ КэшПоТипамЗадач Цикл
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
					|ВЫБРАТЬ ", "
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ") + "
					|	Дата, 
					|	Ссылка, 
					|	Представление КАК ЗадачаПредставление, 
					|	ПометкаУдаления, 
					|	Состояние,
					|	ВЫБОР КОГДА Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
					|		ТОГДА РольИсполнителя
					|		ИНАЧЕ Исполнитель
					|	КОНЕЦ КАК Исполнитель
					|ИЗ Задача." + КлючИЗначение.Ключ + "
					|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";
					
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);		
	КонецЦикла;
		
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	Иначе
		СтрокиДерева = СтрокаДерева;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
			
			НоваяСтрока = СтрокиДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка); 					             			
			// Установим индекс пиктограммы текущего состояния документа.
			УстановитьИндексПиктограммыСостоянияЗадачиСервер(НоваяСтрока);
			
			мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			ВывестиПодчиненныеЗадачи(НоваяСтрока, мКэшПраваДоступаКМетаданным);
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиПодчиненныеЗадачи()

#КонецОбласти

#Область Инициализация

мУжеВСписке 				= Новый Соответствие;
мКэшРеквизитовЗадачи 		= Новый Соответствие;
мКэшПраваДоступаКМетаданным	= Новый Соответствие;

#КонецОбласти
