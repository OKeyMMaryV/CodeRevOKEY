
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("ИмяИзменяемойТаблицы") Тогда
		фОтказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗакрыватьПриЗакрытииВладельца = Истина;
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(фКэшЗначений);
	
	// Заполним значение реквизитов формы из параметров.
	Если Параметры.Свойство("Периодичность") Тогда
		ПериодичностьРезультата = Параметры.Периодичность;
	Иначе	
		ПериодичностьРезультата = фКэшЗначений.Перечисления.бит_ПериодичностьПланирования.День;
	КонецЕсли;
	Если Параметры.Свойство("ДатаНачала") Тогда
		Период.ДатаНачала = Параметры.ДатаНачала;
	КонецЕсли;
	Если Параметры.Свойство("ДатаОкончания") Тогда
		Период.ДатаОкончания = Параметры.ДатаОкончания;
	КонецЕсли;
	Если Параметры.Свойство("РаспределятьСумму") Тогда
		Сумма = Параметры.РаспределятьСумму;
	КонецЕсли;
	
	// Отрисуем и заполним таблицу результата.
	ОтрисоватьИЗаполнитьТаблицуРезультата();
	
	// Установим заголовок элементов формы.
	УстановитьЗаголовокЭлементовФормы();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	НастроитьУсловноеОформление();
	
	НастройкаИзХранилища = ХранилищеОбщихНастроек.Загрузить("ОбщаяФорма.бит_ФормаИзмененияДанныхТаблицыУправляемая"
														   ,"ЗапрашиватьПодтверждение");
	ЗапрашиватьПодтверждение = ?(НастройкаИзХранилища = Неопределено, Истина, НастройкаИзХранилища);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидОтклонения".
// 
&НаКлиенте 
Процедура ВидОтклоненияПриИзменении(Элемент)
	
	ИзменениеВидОтклоненияСервер();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ЗначениеОтклонения".
// 
&НаКлиенте 
Процедура ЗначениеОтклоненияПриИзменении(Элемент)
	
	// Выполним расчет сумм результата.
	РассчитатьСуммыРезультатаВТаблицеРезультата();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПериодичностьРезультата".
// 
&НаКлиенте 
Процедура ПериодичностьРезультатаПриИзменении(Элемент)
	
	ИзменениеПериодичностьРезультатаСервер();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СдвигДат".
// 
&НаКлиенте 
Процедура СдвигДатПриИзменении(Элемент)
	
	// Выполним сдвиг дат результата.
	СдвинутьДатыРезультатаВТаблицеРезультата();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ЗапрашиватьПодтверждение".
// 
&НаКлиенте
Процедура ЗапрашиватьПодтверждениеПриИзменении(Элемент)
	
	ИзменениеЗапрашиватьПодтверждениеСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаРезультата

// Процедура - обработчик события "ПередНачаломДобавления" 
// табличной поля "ТаблицаРезультата".
// 
&НаКлиенте
Процедура ТаблицаРезультатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ЗначениеЗаполнено(фКэшЗначений.ЗначенияДляНовойСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	НоваяСтрока = ТаблицаРезультата.Добавить();
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.ТаблицаРезультата.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		
		// Если это копирование заполним значения только для служебных полей.
		Если ЗначениеЗаполнено(фКэшЗначений.КолонкиСлужебные) Тогда
			ЗаполнитьЗначенияСлужебныхПолейВСтроке(НоваяСтрока, Истина);
		КонецЕсли;
		
	Иначе
		
		// Для новой строки заполним значения по умолчанию.
		ЗначенияДляНовойСтроки 	   = фКэшЗначений.ЗначенияДляНовойСтроки;
		СоотвИменКолонок		   = фКэшЗначений.СоотвИменКолонок;
		СоотвИменКолонокРезультата = фКэшЗначений.СоотвИменКолонок;
		
		Для Каждого КлючЗначение Из ЗначенияДляНовойСтроки Цикл
			
			ИмяКолонкиИсточника = КлючЗначение.Ключ;
			ИмяКолонкиПриемника = СоотвИменКолонок.Получить(ИмяКолонкиИсточника);
			
			Если Не ИмяКолонкиПриемника = Неопределено Тогда
				
				НоваяСтрока[ИмяКолонкиПриемника] = КлючЗначение.Значение;
				
				ИмяКолонкиПриемникаРезультат = СоотвИменКолонокРезультата.Получить(ИмяКолонкиИсточника);
				
				Если Не ИмяКолонкиПриемникаРезультат = Неопределено Тогда
					НоваяСтрока[ИмяКолонкиПриемникаРезультат] = КлючЗначение.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Если Копирование Тогда
	
	ВывестиИтогПоКолонкамТаблицыРезультата();
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// табличной поля "ТаблицаРезультата".
// 
&НаКлиенте
Процедура ТаблицаРезультатаПередУдалением(Элемент, Отказ)
	
	// Если это документ "Корректировка графиков финансовых начислений (МСФО)", тогда
	// удалять строки добавленные не вручную запрещено.
	Если фКэшЗначений.ИмяОбъекта = "бит_му_КорректировкаГрафиковФинансовыхНачислений" Тогда
		
		ИмяКолонкиДобавленоВручную = фКэшЗначений.СоотвИменКолонок.Получить("ДобавленоВручную");
		
		ВыделенныеСтроки = Элементы.ТаблицаРезультата.ВыделенныеСтроки;
		
		Для Каждого Ном Из ВыделенныеСтроки Цикл
			
			ТекСтрока = ТаблицаРезультата.НайтиПоИдентификатору(Ном);
			
			Если Не ТекСтрока[ИмяКолонкиДобавленоВручную] Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" 
// табличной поля "ТаблицаРезультата".
// 
&НаКлиенте
Процедура ТаблицаРезультатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока 
		И Не ОтменаРедактирования Тогда
		ВывестиИтогПоКолонкамТаблицыРезультата();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" 
// табличной поля "ТаблицаРезультата".
// 
&НаКлиенте
Процедура ТаблицаРезультатаПослеУдаления(Элемент)
	
	ВывестиИтогПоКолонкамТаблицыРезультата();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПолеИтога"
// табличного поля "ТаблицаРезультата".
// 
&НаКлиенте 
Процедура ТаблицаРезультатаПолеИтогаПриИзменении(Элемент)
	
	ВывестиИтогПоКолонкамТаблицыРезультата();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "КомандаВыборПериода" формы.
// 
&НаКлиенте
Процедура КомандаВыборПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Период;
	
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

// Процедура обработчик оповещения "ВыборПериодаЗавершение".
// 
// Параметры:
// ВыбПериод - СтандартныйПериод.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ВыборПериодаЗавершение(ВыбПериод, ДополнительныеДанные) Экспорт

	Если НЕ ВыбПериод = Неопределено Тогда
	
		Период =  ВыбПериод;
	
	КонецЕсли; 
	
КонецПроцедуры	// ВыборПериодаЗавершение

// Процедура - обработчик команды "КомандаУстановитьВсе" формы.
// 
&НаКлиенте
Процедура КомандаУстановитьВсе(Команда)
	
	// Установим все флаги.
	ОбработатьФлаги(1);
	
КонецПроцедуры

// Процедура - обработчик команды "КомандаСнятьВсе" формы.
// 
&НаКлиенте
Процедура КомандаСнятьВсе(Команда)
	
	// Установим все флаги.
	ОбработатьФлаги(0);
	
КонецПроцедуры

// Процедура - обработчик команды "КомандаИнвертировать" формы.
// 
&НаКлиенте
Процедура КомандаИнвертировать(Команда)
	
	// Инвертируем все флаги.
	ОбработатьФлаги(2);
	
КонецПроцедуры

// Процедура - обработчик команды "КомандаДобавитьДанные" формы.
// 
&НаКлиенте
Процедура КомандаДобавитьДанные(Команда)
	
	СтрокиДляПереноса = ТаблицаРезультата.НайтиСтроки(Новый Структура("Загрузить", Истина));
	
	Если СтрокиДляПереноса.Количество() = 0 Тогда
		
		ТекстПредупреждения = "ru = 'Не указаны строки для добавления!'";
		ПоказатьПредупреждение(, НСтр(ТекстПредупреждения), 30);
		
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждение Тогда
		
		ТекстВопроса = "ru = 'Будет выполнено добавление данных. Продолжить?'"; 
		Оповещение = Новый ОписаниеОповещения("ВопросНаДобавлениеДанныхЗавершение", ЭтотОбъект, СтрокиДляПереноса);
		ПоказатьВопрос(Оповещение, НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
				   
	Иначе
		
		ДобавлениеДанныхВТаблицу(СтрокиДляПереноса);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ВопросНаДобавлениеДанныхЗавершение". 
// 
&НаКлиенте
Процедура ВопросНаДобавлениеДанныхЗавершение(Ответ, СтрокиДляПереноса) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда

		ДобавлениеДанныхВТаблицу(СтрокиДляПереноса);
		
	КонецЕсли;

КонецПроцедуры // ВопросНаДобавлениеДанныхЗавершение() 

// Процедура - обработчик команды "КомандаЗагрузитьДанные" формы.
// 
&НаКлиенте
Процедура КомандаЗагрузитьДанные(Команда)
	
	СтрокиДляПереноса = ТаблицаРезультата.НайтиСтроки(Новый Структура("Загрузить", Истина));
	
	Если СтрокиДляПереноса.Количество() = 0 Тогда
		
		ТекстПредупреждения = "ru = 'Не указаны строки для загрузки!'";
		ПоказатьПредупреждение(, НСтр(ТекстПредупреждения), 30);
		
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждение Тогда
		
		ТекстВопроса = "ru = 'Будет выполнена загрузка данных. Продолжить?'";
		Оповещение = Новый ОписаниеОповещения("ВопросНаЗагрузкуДанныхЗавершение", ЭтотОбъект, СтрокиДляПереноса);
		ПоказатьВопрос(Оповещение, НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
					   
	Иначе
		
		ЗагрузкаДанныхВТаблицу(СтрокиДляПереноса);
		
	КонецЕсли;
			
КонецПроцедуры

// Процедура - обработчик события "ВопросНаЗагрузкуДанныхЗавершение". 
// 
&НаКлиенте
Процедура ВопросНаЗагрузкуДанныхЗавершение(Ответ, СтрокиДляПереноса) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда

		ЗагрузкаДанныхВТаблицу(СтрокиДляПереноса);
		
	КонецЕсли;

КонецПроцедуры // ВопросНаЗагрузкуДанныхЗавершение() 

// Процедура - обработчик команды "КомандаИзменитьОтмеченныеСтроки" формы.
// 
&НаКлиенте
Процедура КомандаИзменитьОтмеченныеСтроки(Команда)
	
	СтрокиДляПереноса = ТаблицаРезультата.НайтиСтроки(Новый Структура("Загрузить", Истина));
	
	Если СтрокиДляПереноса.Количество() = 0 Тогда
		
		ТекстПредупреждения = "ru = 'Не указаны строки для изменения!'";
		ПоказатьПредупреждение(, НСтр(ТекстПредупреждения), 30);
		
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьПодтверждение Тогда
		
		ТекстВопроса = "ru = 'Будет выполнено изменение данных. Продолжить?'";
		Оповещение = Новый ОписаниеОповещения("ВопросНаИзменениеДанныхЗавершение", ЭтотОбъект, СтрокиДляПереноса);
		ПоказатьВопрос(Оповещение, НСтр(ТекстВопроса), РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
					   
	Иначе
		
		ИзменениеДанныхВТаблице(СтрокиДляПереноса);
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура - обработчик события "ВопросНаИзменениеДанныхЗавершение". 
// 
&НаКлиенте
Процедура ВопросНаИзменениеДанныхЗавершение(Ответ, СтрокиДляПереноса) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда

		ИзменениеДанныхВТаблице(СтрокиДляПереноса);
		
	КонецЕсли;

КонецПроцедуры // ВопросНаИзменениеДанныхЗавершение() 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФормы

// Процедура устанавливает заголовок элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УстановитьЗаголовокЭлементовФормы()
	
	Элементы.ДекорацияПериодичность.Заголовок = Строка(ПериодичностьРезультата);
	
	Если ВидОтклонения = фКэшЗначений.Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент Тогда
		Элементы.ДекорацияТипЗначения.Заголовок = "%";
		
	Иначе
		Элементы.ДекорацияТипЗначения.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокЭлементовФормы()

// Процедура осуществляет управление доступностью/видимостью элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура УправлениеЭлементамиФормы()
	
	КолонкиПериодУказаны = ?(ЗначениеЗаполнено(фКэшЗначений.КолонкиПериод), Истина, Ложь);
	КолонкиСуммУказаны   = ?(ЗначениеЗаполнено(фКэшЗначений.КолонкиСумма) , Истина, Ложь);
	
	ТолькоКорректировка  = фКэшЗначений.ТолькоКорректировка;
	РаспределятьСумму    = фКэшЗначений.РаспределятьСумму;
	
	Если КолонкиПериодУказаны Тогда
		Элементы.СдвигДат.Доступность = ЗначениеЗаполнено(ПериодичностьРезультата);
		Элементы.Период.Видимость 	  = Не ТолькоКорректировка;
	Иначе
		Элементы.ГруппаСдвигДат.Видимость = Ложь;
		Элементы.Период.Видимость 		  = Ложь;
	КонецЕсли;
	
	Если КолонкиСуммУказаны Тогда
		Элементы.ЗначениеОтклонения.Доступность = ЗначениеЗаполнено(ВидОтклонения);
		Элементы.Сумма.Видимость				= РаспределятьСумму;
	Иначе
		Элементы.ГруппаОтклонениеСуммы.Видимость = Ложь;
		Элементы.Сумма.Видимость  				 = Ложь;
	КонецЕсли;
	
	// Если Не КолонкиПериодУказаны
	// 	И Не КолонкиСуммУказаны Тогда
	// 	Элементы.ТаблицаРезультатаГруппаИзменить.Видимость = Ложь;
	// 	
	// Иначе
	// 	
	// 	Если ТолькоКорректировка
	// 		И Не РаспределятьСумму Тогда
	// 		Элементы.ТаблицаРезультатаГруппаИзменить.Видимость = Ложь;
	// 	Иначе
	// 		
	// 		КнопкиПодменюИзменить = Элементы.ТаблицаРезультатаГруппаИзменить.ПодчиненныеЭлементы;
	// 		
	// 		Если КолонкиПериодУказаны Тогда
	// 			КнопкиПодменюИзменить.ТаблицаРезультатаКомандаСформироватьПоНастройкам.Видимость = Не ТолькоКорректировка;
	// 		Иначе
	// 			КнопкиПодменюИзменить.ТаблицаРезультатаКомандаСформироватьПоНастройкам.Видимость = Ложь;
	// 		КонецЕсли;
	// 		
	// 		Если Не КнопкиПодменюИзменить.ТаблицаРезультатаКомандаСформироватьПоНастройкам.Видимость
	// 			И Не РаспределятьСумму Тогда
	// 			Элементы.ТаблицаРезультатаГруппаИзменить.Видимость = Ложь;
	// 		Иначе
	// 			
	// 			ВидимостьКнопок = ?(КолонкиСуммУказаны И РаспределятьСумму, Истина, Ложь);
	// 			
	// 			КнопкиПодменюИзменить.ТаблицаРезультатаКомандаРаспределитьПропорционально.Видимость = ВидимостьКнопок;
	// 			КнопкиПодменюИзменить.ТаблицаРезультатаКомандаРаспределитьПоКоэффициенту.Видимость  = ВидимостьКнопок;
	// 			
	// 		КонецЕсли;
	// 		
	// 	КонецЕсли;
	// 	
	// КонецЕсли; //  Если Не КолонкиПериодУказаны И Не РаспределятьСумму Тогда
	
	Элементы.ТаблицаРезультатаГруппаПеренести.Видимость 				= Не ТолькоКорректировка;
	Элементы.ТаблицаРезультатаКомандаИзменитьОтмеченныеСтроки.Видимость = ТолькоКорректировка;
	
КонецПроцедуры // УправлениеЭлементамиФормы()

#КонецОбласти

// Процедура выполняет перенос данных таблицы результата.
// 
// Параметры:
//  СтрокиДляПереноса - Массив.
//  РежимПереноса	  - Строка. / "Загрузка" / "Добавление" / "Изменение" /.
// 
&НаКлиенте 
Процедура ПеренестиДанныеТаблицыРезультата(СтрокиДляПереноса, РежимПереноса)
	
	РежимЗагружка 			   = ?(РежимПереноса = "Загрузка" , Истина, Ложь);
	РежимИзменение			   = ?(РежимПереноса = "Изменение", Истина, Ложь);
	ЗаполнятьСлужебныеЗначения = ?(Не РежимЗагружка 
								   И ЗначениеЗаполнено(фКэшЗначений.КолонкиСлужебные)
								   И ЗначениеЗаполнено(фКэшЗначений.ЗначенияДляНовойСтроки), Истина, Ложь);
	
	ТаблицаДляИзменения = фКэшЗначений.ТаблицаДляИзменения;
	
	Если РежимЗагружка
		Или РежимИзменение Тогда
		ТаблицаДляИзменения.Очистить();
	КонецЕсли;
	
	СоотвИменКолонок 		   = фКэшЗначений.СоотвИменКолонок;
	СоотвИменКолонокРезультата = фКэшЗначений.СоотвИменКолонокРезультата;
	СоотвСтарыеЗначенияСтрок   = Новый Соответствие;
	
	НомерСтроки = ТаблицаДляИзменения.Количество() + 1;
	
	Для Каждого ТекСтрока Из СтрокиДляПереноса Цикл
		
		НоваяСтрока = ТаблицаДляИзменения.Добавить();
		
		СтруктураСтарыеЗначенияСтроки = Новый Структура;
		
		// Заполним значения новой строки.
		Для Каждого КлючЗначение Из СоотвИменКолонок Цикл 
			
			ИмяКолонкиПриемник = КлючЗначение.Ключ;
			ИмяКолонкиИсточникРезультата = СоотвИменКолонокРезультата.Получить(ИмяКолонкиПриемник);
			
			Если ИмяКолонкиИсточникРезультата = Неопределено Тогда
				ЗначениеДляПереноса = ТекСтрока[КлючЗначение.Значение];
			Иначе
				
				ЗначениеДляПереноса = ТекСтрока[ИмяКолонкиИсточникРезультата];
				
				// Запишем в структуру старое значение.
				СтруктураСтарыеЗначенияСтроки.Вставить(ИмяКолонкиПриемник + "_Старое", ТекСтрока[КлючЗначение.Значение]);
				
				Если РежимИзменение Тогда
					// В таблице результата старое значение обновим на новое.
					ТекСтрока[КлючЗначение.Значение] = ЗначениеДляПереноса;
				КонецЕсли;
				
				
			КонецЕсли;
			
			НоваяСтрока[ИмяКолонкиПриемник] = ЗначениеДляПереноса;
			
		КонецЦикла;
		
		// Запишем в старые значения строки.
		СоотвСтарыеЗначенияСтрок.Вставить("Строка_" + НомерСтроки, СтруктураСтарыеЗначенияСтроки);
		
		Если ЗаполнятьСлужебныеЗначения Тогда
			// Заполним значения служебных полей в новой строке.
			ЗаполнитьЗначенияСлужебныхПолейВСтроке(НоваяСтрока);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла; // Для Каждого ТекСтрока Из СтрокиДляПереноса Цикл.
	
	фКэшЗначений.Вставить("ТаблицаДляИзменения", ТаблицаДляИзменения);
		
	ПараметрыОповещения = Новый Структура; 
	ПараметрыОповещения.Вставить("ИмяИзменяемойТаблицы", фКэшЗначений.ИмяИзменяемойТаблицы);
	ПараметрыОповещения.Вставить("ТаблицаРезультата", ТаблицаДляИзменения);
	ПараметрыОповещения.Вставить("СоотвСтарыеЗначенияСтрок", СоотвСтарыеЗначенияСтрок);
	ПараметрыОповещения.Вставить("РежимЗагрузки", РежимПереноса);
	
	Оповестить("ЗагрузитьТаблицуРезультатаКлиент", ПараметрыОповещения, ВладелецФормы.УникальныйИдентификатор);
	
КонецПроцедуры // ПеренестиДанныеТаблицыРезультата()

// Процедура заполняет значения служебных полей в строке.
// 
// Параметры:
//  СтрокаПриемник 				  - ДанныеФормыЭлементКоллекции.
//  КопированиеВТаблицеРезультата - Булево.
// 
&НаКлиенте 
Процедура ЗаполнитьЗначенияСлужебныхПолейВСтроке(СтрокаПриемник, КопированиеВТаблицеРезультата = Ложь)
	
	ЗначенияДляНовойСтроки = фКэшЗначений.ЗначенияДляНовойСтроки;
	КолонкиСлужебные	   = фКэшЗначений.КолонкиСлужебные;
	
	Если КопированиеВТаблицеРезультата Тогда
		СоотвИменКолонок = фКэшЗначений.СоотвИменКолонок;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из КолонкиСлужебные Цикл
		
		ИмяКолонкиИсточника = КлючЗначение.Ключ;
		
		Если ЗначенияДляНовойСтроки.Свойство(ИмяКолонкиИсточника) Тогда
			
			Если КопированиеВТаблицеРезультата Тогда
				
				ИмяКолонкиПриемника = СоотвИменКолонок.Получить(ИмяКолонкиИсточника);
				
				Если ИмяКолонкиПриемника = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				ИмяКолонкиПриемника = ИмяКолонкиИсточника;
			КонецЕсли;
			
			СтрокаПриемник[ИмяКолонкиПриемника] = ЗначенияДляНовойСтроки[ИмяКолонкиИсточника];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначенияСлужебныхПолейВСтроке()

// Процедура выполняет установку/снятие/инвертирование флагов в таблице
// для доступных строк.
// 
// Параметры:
//  ТекЗначение - Число. / 0 - Ложь / 1 - Истина / 2 - Инвертировать /.
// 
&НаКлиенте 
Процедура ОбработатьФлаги(ТекЗначение)
	
	Для Каждого ТекущаяСтрока Из ТаблицаРезультата Цикл
		
		Если СтрокаДоступнаДляРедактированияКлиент(ТекущаяСтрока) Тогда
			
			Если ТекЗначение = 0 Тогда
				ТекущаяСтрока.Загрузить = Ложь;
				
			ИначеЕсли ТекЗначение = 1 Тогда
				ТекущаяСтрока.Загрузить = Истина;	
				
			ИначеЕсли ТекЗначение = 2 Тогда			
				ТекущаяСтрока.Загрузить = Не ТекущаяСтрока.Загрузить;
				
			КонецЕсли;   
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьФлаги()

// Функция проверяет строку на признак возможности редактирования. Клиент.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции.
// 
// Возвращаемое значение:
//  Результат - Тип.
// 
&НаКлиенте 
Функция СтрокаДоступнаДляРедактированияКлиент(ТекущаяСтрока)
	
	СтрокаДоступна		 = Истина;
	УсловияНедоступности = фКэшЗначений.УсловияНедоступности;
	
	Если Не ЗначениеЗаполнено(УсловияНедоступности) Тогда
		Возврат СтрокаДоступна;
	КонецЕсли;
		
	СоотвИменКолонок 		   = фКэшЗначений.СоотвИменКолонок;
	СоотвИменКолонокРезультата = фКэшЗначений.СоотвИменКолонокРезультата;
	
	ЗначенияСтроки  = Новый Структура;
	ЗначенияУсловий = Новый Структура;
	
	ТекстНаВычисление = "Истина ";
	
	Ном = 1;
	
	Для Каждого КлючЗначение Из УсловияНедоступности Цикл
		
		ИмяКолонкиИсточника = КлючЗначение.Ключ;
		ИмяКолонкиПриемника = СоотвИменКолонокРезультата.Получить(ИмяКолонкиИсточника);
		
		Если ИмяКолонкиПриемника = Неопределено Тогда
			ИмяКолонкиПриемника = СоотвИменКолонок.Получить(ИмяКолонкиИсточника);
		КонецЕсли;
		
		Если ИмяКолонкиПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УсловиеПоКолонкеИсточника = КлючЗначение.Значение;
		
		ВидыСравненияУсловия  = УсловиеПоКолонкеИсточника.ВидыСравнения;
		ЗначениеУсловия		  = УсловиеПоКолонкеИсточника.Значение;
		ТекущееЗначениеСтроки = ТекущаяСтрока[ИмяКолонкиПриемника];
		
		ИмяКлюча = "Значение_" + Ном;
		
		// Запомним текущие значения для сравнения.
		ЗначенияСтроки.Вставить(ИмяКлюча, ТекущееЗначениеСтроки);
		ЗначенияУсловий.Вставить(ИмяКлюча, ЗначениеУсловия);
		
		// Сформируем текст текущего условия для вычисления.
		Для Каждого ТекВидСравнения Из ВидыСравненияУсловия Цикл
			
			ТекущийТекстУсловия = "";
			
			Если ТекВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " > ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " >= ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ТекущийТекстУсловия = "ЗначениеЗаполнено(ЗначенияСтроки." + ИмяКлюча + ")";
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " < ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " <= ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ТекущийТекстУсловия = "Не ЗначениеЗаполнено(ЗначенияСтроки." + ИмяКлюча + ")";
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ТекущийТекстУсловия = "Не ЗначенияСтроки." + ИмяКлюча + " = ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " = ЗначенияУсловий." + ИмяКлюча;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекущийТекстУсловия) Тогда
				ТекстНаВычисление = ТекстНаВычисление + Символы.ПС 
									+ "И " + ТекущийТекстУсловия;
			КонецЕсли;
			
		КонецЦикла; // Для Каждого ТекВидСравнения Из ВидыСравненияУсловия Цикл.
		
		Ном = Ном + 1;
		
	КонецЦикла; // Для Каждого КлючЗначение Из УсловияНедоступности Цикл.
	
	// Вычислим результат.
	СтрокаНедоступна = Вычислить(ТекстНаВычисление);
	
	СтрокаДоступна = ?(СтрокаНедоступна, Ложь, Истина);
	
	Возврат СтрокаДоступна;
	
КонецФункции // СтрокаДоступнаДляРедактированияКлиент()

// Процедура выполняет добавление данных в таблицу.
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаКлиенте
Процедура ДобавлениеДанныхВТаблицу(СтрокиДляПереноса)

	ПеренестиДанныеТаблицыРезультата(СтрокиДляПереноса, "Добавление");	
	ТекстСообщения = "ru = 'Данные добавлены.'";
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр(ТекстСообщения));

КонецПроцедуры // ИзменениеДанныхВТаблице() 

// Процедура выполняет загрузку данных в таблицу.
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаКлиенте
Процедура ЗагрузкаДанныхВТаблицу(СтрокиДляПереноса)

	ПеренестиДанныеТаблицыРезультата(СтрокиДляПереноса, "Загрузка");	
	ТекстСообщения = "ru = 'Данные загружены.'";
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр(ТекстСообщения));

КонецПроцедуры // ИзменениеДанныхВТаблице() 

// Процедура выполняет изменение данных в таблице.
// 
// Параметры:
//  Параметр1 - Строка.
// 
&НаКлиенте
Процедура ИзменениеДанныхВТаблице(СтрокиДляПереноса)

	ПеренестиДанныеТаблицыРезультата(СтрокиДляПереноса, "Изменение");		
	ТекстСообщения = "ru = 'Данные изменены.'";
	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(НСтр(ТекстСообщения));

КонецПроцедуры // ИзменениеДанныхВТаблице() 

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  КэшированныеЗначения - Структура.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_ВидыОтклоненийКонтрольныхЗначений"
							,бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений));
	КэшПеречисления.Вставить("бит_ПериодичностьПланирования"
							,бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ПериодичностьПланирования));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	
	// Закэшируем значения переданные в параметры формы при открытии.
	Если Параметры.Свойство("УсловияНедоступности") Тогда
		КэшированныеЗначения.Вставить("УсловияНедоступности", Параметры.УсловияНедоступности);
	Иначе
		КэшированныеЗначения.Вставить("УсловияНедоступности", Новый Структура);
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоКорректировка") Тогда
		
		Если ТипЗнч(Параметры.ТолькоКорректировка) = Тип("Булево")Тогда
			ТолькоКорректировка = Параметры.ТолькоКорректировка;
		Иначе
			ТолькоКорректировка = Истина;
		КонецЕсли;
		
	Иначе
		ТолькоКорректировка = Ложь;
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("ТолькоКорректировка", ТолькоКорректировка);
	
	Если Параметры.Свойство("РаспределятьСумму") Тогда
		КэшированныеЗначения.Вставить("РаспределятьСумму", Истина);
	Иначе
		КэшированныеЗначения.Вставить("РаспределятьСумму", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("КолонкиПериод") Тогда
		КэшированныеЗначения.Вставить("КолонкиПериод", Параметры.КолонкиПериод);
	Иначе
		КэшированныеЗначения.Вставить("КолонкиПериод", Новый Структура);
	КонецЕсли;
	
	Если Параметры.Свойство("КолонкиАналитика") Тогда
		КэшированныеЗначения.Вставить("КолонкиАналитика", Параметры.КолонкиАналитика);
	Иначе
		КэшированныеЗначения.Вставить("КолонкиАналитика", Новый Структура);
	КонецЕсли;
	
	Если Параметры.Свойство("КолонкиСумма") Тогда
		КэшированныеЗначения.Вставить("КолонкиСумма", Параметры.КолонкиСумма);
	Иначе
		КэшированныеЗначения.Вставить("КолонкиСумма", Новый Структура);
	КонецЕсли;
	
	Если Параметры.Свойство("КолонкиСлужебные") Тогда
		КэшированныеЗначения.Вставить("КолонкиСлужебные", Параметры.КолонкиСлужебные);
	Иначе
		КэшированныеЗначения.Вставить("КолонкиСлужебные", Новый Структура);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КэшированныеЗначения.КолонкиСумма) Тогда
		
		Если Параметры.Свойство("КолонкаКоэффициента")
			И фКэшЗначений.РаспределятьСумму Тогда
			
			КолонкаКоэффициента 		 = Параметры.КолонкаКоэффициента;
			ИсключатьКолонкуКоэффициента = Ложь;
			
		Иначе
			// Иначе, не указана колонка источник для заполнения коэффициента из данных.
			
			КолонкаКоэффициента = Новый Структура;
			
			Если фКэшЗначений.РаспределятьСумму Тогда
				КолонкаКоэффициента.Вставить("Коэффициент", "Коэф. распр.");
			КонецЕсли;
			
			// Необходимо исключать данные по коэффициентам при переносе полученных данных. 
			ИсключатьКолонкуКоэффициента = Истина;
			
		КонецЕсли;
		
	Иначе
		КолонкаКоэффициента 		 = Новый Структура;
		ИсключатьКолонкуКоэффициента = Истина;
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("КолонкаКоэффициента"			, КолонкаКоэффициента);
	КэшированныеЗначения.Вставить("ИсключатьКолонкуКоэффициента", ИсключатьКолонкуКоэффициента);
	
	Если Параметры.Свойство("ИмяОбъекта") Тогда
		КэшированныеЗначения.Вставить("ИмяОбъекта", Параметры.ИмяОбъекта);
	Иначе
		КэшированныеЗначения.Вставить("ИмяОбъекта", "");
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("ИмяИзменяемойТаблицы", Параметры.ИмяИзменяемойТаблицы);
	КэшированныеЗначения.Вставить("ТаблицаДляИзменения" , Параметры.ТаблицаДляИзменения);
	
	Если Параметры.Свойство("ЗначенияДляНовойСтроки") Тогда
		КэшированныеЗначения.Вставить("ЗначенияДляНовойСтроки", Параметры.ЗначенияДляНовойСтроки);
	Иначе
		КэшированныеЗначения.Вставить("ЗначенияДляНовойСтроки", Новый Структура);
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("ЖирныйШрифт", Новый Шрифт("Arial", 8, Истина));
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура отрисовывает и заполняет таблицу результата.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ОтрисоватьИЗаполнитьТаблицуРезультата()
	
	// Отрисуем колонки таблицы.
	СоотвИменКолонок		   = Новый Соответствие;
	СоотвИменКолонокРезультата = Новый Соответствие;
	СоотвИменКолонокИтога 	   = Новый Соответствие;
	
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("ПолеПериод"	 	, фКэшЗначений.КолонкиПериод);
	СтруктураКолонок.Вставить("ПолеАналитика"	, фКэшЗначений.КолонкиАналитика);
	СтруктураКолонок.Вставить("ПолеКоэффициента", фКэшЗначений.КолонкаКоэффициента);
	СтруктураКолонок.Вставить("ПолеСумма"		, фКэшЗначений.КолонкиСумма);
	СтруктураКолонок.Вставить("ПолеСлужебное"	, фКэшЗначений.КолонкиСлужебные);
	
	Для Каждого КлючЗначениеКолонки Из СтруктураКолонок Цикл
		
		ПрефиксИмениКолонок  = КлючЗначениеКолонки.Ключ;
		КолонкиДляДобавления = КлючЗначениеКолонки.Значение;
		
		КолонкиРастягиватьПоГоризонтали = ?(ПрефиксИмениКолонок = "ПолеАналитика", Истина, Ложь);
		
		Если КолонкиРастягиватьПоГоризонтали Тогда
			ШиринаКолонок = 16;
		Иначе
			ШиринаКолонок = ?(ПрефиксИмениКолонок = "ПолеПериод", 14, 13);
		КонецЕсли;
		
		Если ПрефиксИмениКолонок = "ПолеКоэффициента" Тогда
			ДобавлятьИмяВСоотвИменКолонок = ?(Не фКэшЗначений.ИсключатьКолонкуКоэффициента, Истина, Ложь);
		Иначе
			ДобавлятьИмяВСоотвИменКолонок = Истина;
		КонецЕсли;
		
		ДобавлятьКолонкиРезультата = ?(ПрефиксИмениКолонок = "ПолеПериод"
								  	  Или ПрефиксИмениКолонок = "ПолеСумма", Истина, Ложь);
								  
		ОтображатьИтогВПодвале 	   = ?(ПрефиксИмениКолонок = "ПолеКоэффициента"
								  	  Или ПрефиксИмениКолонок = "ПолеСумма", Истина, Ложь);
									  
		ОтображатьКолонкиВТаблице  = ?(ПрефиксИмениКолонок = "ПолеСлужебное", Ложь, Истина);
		
		СчетчикКолонок = 1;
		
		Для Каждого КлючЗначениеТекКолонки Из КолонкиДляДобавления Цикл
			
			ИмяКолонкиИсточник = КлючЗначениеТекКолонки.Ключ;
			ИмяКолонкиПриемник = ПрефиксИмениКолонок + СчетчикКолонок;
			ЗаголовокКолонки   = Строка(КлючЗначениеТекКолонки.Значение);
			
			Если ДобавлятьКолонкиРезультата Тогда
				
				ИмяГруппыКолонок = "ГруппаКолонок" + ПрефиксИмениКолонок + СчетчикКолонок;
				
				// Создадим группу колонок.
				ГруппаКолонок = Элементы.Добавить(ИмяГруппыКолонок, Тип("ГруппаФормы"), Элементы.ТаблицаРезультата);
				ГруппаКолонок.Вид = ВидГруппыФормы.ГруппаКолонок;
				
				РодительКолонки = ГруппаКолонок;
				
			Иначе
				РодительКолонки = Элементы.ТаблицаРезультата;
			КонецЕсли;
			
			ДобавитьКолонкуВПолеРезультата(РодительКолонки
										  ,ИмяКолонкиИсточник
										  ,ИмяКолонкиПриемник
										  ,ЗаголовокКолонки
										  ,ОтображатьКолонкиВТаблице
										  ,ШиринаКолонок
										  ,КолонкиРастягиватьПоГоризонтали
										  ,ОтображатьИтогВПодвале
										  ,ПрефиксИмениКолонок
										  ,СоотвИменКолонокИтога);
										  
			Если ДобавлятьИмяВСоотвИменКолонок Тогда
				СоотвИменКолонок.Вставить(ИмяКолонкиИсточник, ИмяКолонкиПриемник);
			КонецЕсли;
			
			Если ДобавлятьКолонкиРезультата Тогда
				
				ИмяКолонкиПриемникРезультат = ПрефиксИмениКолонок + "Результат" + СчетчикКолонок;
				
				ДобавитьКолонкуВПолеРезультата(РодительКолонки
											  ,ИмяКолонкиИсточник
										  	  ,ИмяКолонкиПриемникРезультат
											  ,ЗаголовокКолонки
											  ,ОтображатьКолонкиВТаблице
											  ,ШиринаКолонок
											  ,КолонкиРастягиватьПоГоризонтали
											  ,ОтображатьИтогВПодвале
											  ,ПрефиксИмениКолонок
											  ,СоотвИменКолонокИтога
											  ,Истина);
											  
				СоотвИменКолонокРезультата.Вставить(ИмяКолонкиИсточник, ИмяКолонкиПриемникРезультат);
											  
			КонецЕсли;
				
			СчетчикКолонок = СчетчикКолонок + 1;
			
		КонецЦикла; // Для Каждого КлючЗначениеТекКолонки Из КолонкиДляДобавления Цикл.
		
	КонецЦикла; // Для Каждого КлючЗначениеКолонки Из СтруктураКолонок Цикл.
	
	// Заполним таблицу результата.
	ТаблицаИсточник = фКэшЗначений.ТаблицаДляИзменения;
	
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		СтрокаПриемник = ТаблицаРезультата.Добавить();
		
		Для Каждого КлючЗначение Из СоотвИменКолонок Цикл
			СтрокаПриемник[КлючЗначение.Значение] = СтрокаИсточник[КлючЗначение.Ключ];
		КонецЦикла;
		Для Каждого КлючЗначение Из СоотвИменКолонокРезультата Цикл
			СтрокаПриемник[КлючЗначение.Значение] = СтрокаИсточник[КлючЗначение.Ключ];
		КонецЦикла;
		
	КонецЦикла;
	
	// Запишем в кэш значений заполненные соответствия.
	фКэшЗначений.Вставить("СоотвИменКолонок"		  , СоотвИменКолонок);
	фКэшЗначений.Вставить("СоотвИменКолонокРезультата", СоотвИменКолонокРезультата);
	фКэшЗначений.Вставить("СоотвИменКолонокИтога"	  , СоотвИменКолонокИтога);
	
	ВывестиИтогПоКолонкамТаблицыРезультата();
	
КонецПроцедуры // ОтрисоватьИЗаполнитьТаблицуРезультата()

// Процедура добавляет колонку в поле результата.
// 
&НаСервере 
Процедура ДобавитьКолонкуВПолеРезультата(РодительКолонки
										,ИмяКолонкиИсточник
										,ИмяКолонкиПриемник
										,ЗаголовокКолонки
										,ОтображатьКолонкиВТаблице
										,ШиринаКолонок
										,КолонкиРастягиватьПоГоризонтали
										,ОтображатьИтогВПодвале
										,ПрефиксИмениКолонок
										,СоотвИменКолонокИтога
										,КолонкаРезультата = Ложь)
										
	ИтоговыйЗаголовокКолонки = ?(ПустаяСтрока(ЗаголовокКолонки), ИмяКолонкиИсточник, ЗаголовокКолонки);
	
	Если КолонкаРезультата Тогда									
		ИтоговыйЗаголовокКолонки = ИтоговыйЗаголовокКолонки + " - Результат";
	КонецЕсли;
	
	НоваяКолонка = Элементы.Добавить("ТаблицаРезультата" + ИмяКолонкиПриемник, Тип("ПолеФормы"), РодительКолонки);
	НоваяКолонка.Заголовок				  = ИтоговыйЗаголовокКолонки;
	НоваяКолонка.Вид					  = ВидПоляФормы.ПолеВвода;
	НоваяКолонка.ПутьКДанным			  = "ТаблицаРезультата." + ИмяКолонкиПриемник;
	НоваяКолонка.Видимость				  = ОтображатьКолонкиВТаблице;
	НоваяКолонка.Ширина					  = ШиринаКолонок;
	НоваяКолонка.РастягиватьПоГоризонтали = КолонкиРастягиватьПоГоризонтали;
	
	Если ОтображатьИтогВПодвале Тогда
		
		НоваяКолонка.ШрифтПодвала 					 = фКэшЗначений.ЖирныйШрифт;
		НоваяКолонка.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		
		Если КолонкаРезультата
			Или ПрефиксИмениКолонок = "ПолеКоэффициента" Тогда
			НоваяКолонка.УстановитьДействие("ПриИзменении", "ТаблицаРезультатаПолеИтогаПриИзменении");
		КонецЕсли;
		
		ТочностьДляИтога = ?(ПрефиксИмениКолонок = "ПолеКоэффициента", "3", "2");
		
		СоотвИменКолонокИтога.Вставить(ИмяКолонкиПриемник + "_Точность_" + ТочностьДляИтога
									  ,"ТаблицаРезультата" + ИмяКолонкиПриемник);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКолонкуВПолеРезультата()

// Процедура обрабатывает изменение вида отклонения. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеВидОтклоненияСервер()
	
	Если ВидОтклонения = фКэшЗначений.Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное Тогда
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Любой);
		Элементы.ЗначениеОтклонения.ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
		
		ЗначениеОтклонения = Элементы.ЗначениеОтклонения.ОграничениеТипа.ПривестиЗначение(ЗначениеОтклонения);
		
	ИначеЕсли ВидОтклонения = фКэшЗначений.Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент Тогда
		
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2, ДопустимыйЗнак.Любой);
		Элементы.ЗначениеОтклонения.ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
		
		ЗначениеОтклонения = Элементы.ЗначениеОтклонения.ОграничениеТипа.ПривестиЗначение(ЗначениеОтклонения);
		
		Если ЗначениеОтклонения > 100 Тогда
			ЗначениеОтклонения = 100;
		ИначеЕсли ЗначениеОтклонения < -100 Тогда
			ЗначениеОтклонения = -100;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ВидОтклонения) Тогда
		ЗначениеОтклонения = 0;
	КонецЕсли;
	
	// Установим заголовок элементов формы.
	УстановитьЗаголовокЭлементовФормы();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// Выполним расчет сумм результата.
	РассчитатьСуммыРезультатаВТаблицеРезультата();
	
КонецПроцедуры // ИзменениеВидОтклоненияСервер()

// Процедура обрабатывает изменение периодичности результата. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ИзменениеПериодичностьРезультатаСервер()
	
	Если Не ЗначениеЗаполнено(ПериодичностьРезультата) Тогда
		СдвигДат = 0;
	КонецЕсли;
	
	// Установим заголовок элементов формы.
	УстановитьЗаголовокЭлементовФормы();
	
	// Установить видимость реквизитов и заголовков колонок.	
	УправлениеЭлементамиФормы();
	
	// Выполним сдвиг дат результата.
	СдвинутьДатыРезультатаВТаблицеРезультата();
	
КонецПроцедуры // ИзменениеПериодичностьРезультатаСервер()

// Процедура выполняет расчет сумм результата в таблице результата.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура РассчитатьСуммыРезультатаВТаблицеРезультата()
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним пересчет сумм результата.
	Для Каждого ТекСтрока Из ТаблицаРезультата Цикл
		
		Если СтрокаДоступнаДляРедактированияСервер(ТекСтрока) Тогда
			РассчитатьСуммыРезультатаВСтроке(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	ВывестиИтогПоКолонкамТаблицыРезультата();
	
КонецПроцедуры // РассчитатьСуммыРезультатаВТаблицеРезультата()

// Процедура выполняет расчет сумм результата в таблице результата.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции.
// 
&НаСервере 
Процедура РассчитатьСуммыРезультатаВСтроке(ТекущаяСтрока)
	
	КолонкиСумма 	 		   = фКэшЗначений.КолонкиСумма;
	СоотвИменКолонок 		   = фКэшЗначений.СоотвИменКолонок;
	СоотвИменКолонокРезультата = фКэшЗначений.СоотвИменКолонокРезультата;
	
	Для Каждого КлючЗначение Из КолонкиСумма Цикл
		
		ИмяКолонки = КлючЗначение.Ключ;
		
		ИмяКолонкиИсточникаЗначения = СоотвИменКолонок.Получить(ИмяКолонки);
		ИмяКолонкиПриемникаЗначения = СоотвИменКолонокРезультата.Получить(ИмяКолонки);
		
		ЗначениеИсточник = ТекущаяСтрока[ИмяКолонкиИсточникаЗначения];
		
		Если ВидОтклонения = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Процент Тогда
			
			СуммаРезультат = ЗначениеИсточник + ЗначениеИсточник * ЗначениеОтклонения / 100;
			
		ИначеЕсли ВидОтклонения = Перечисления.бит_ВидыОтклоненийКонтрольныхЗначений.Абсолютное Тогда
			
			СуммаРезультат = ЗначениеИсточник + ЗначениеОтклонения;
			
		Иначе
			СуммаРезультат = ЗначениеИсточник;
		КонецЕсли;
		
		ТекущаяСтрока[ИмяКолонкиПриемникаЗначения] = СуммаРезультат;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСуммыРезультатаВСтроке()

// Процедура выполняет сдвиг дат результата в таблице результата.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура СдвинутьДатыРезультатаВТаблицеРезультата()
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним сдвиг дат результата.
	Для Каждого ТекСтрока Из ТаблицаРезультата Цикл
		
		Если СтрокаДоступнаДляРедактированияСервер(ТекСтрока) Тогда
			СдвинутьДатыРезультатаВСтроке(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СдвинутьДатыРезультатаВТаблицеРезультата()

// Функция проверяет строку на признак возможности редактирования. Сервер.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции.
// 
// Возвращаемое значение:
//  Результат - Тип.
// 
&НаСервере 
Функция СтрокаДоступнаДляРедактированияСервер(ТекущаяСтрока)
	
	СтрокаДоступна		 = Истина;
	УсловияНедоступности = фКэшЗначений.УсловияНедоступности;
	
	Если Не ЗначениеЗаполнено(УсловияНедоступности) Тогда
		Возврат СтрокаДоступна;
	КонецЕсли;
		
	СоотвИменКолонок 		   = фКэшЗначений.СоотвИменКолонок;
	СоотвИменКолонокРезультата = фКэшЗначений.СоотвИменКолонокРезультата;
	
	ЗначенияСтроки  = Новый Структура;
	ЗначенияУсловий = Новый Структура;
	
	ТекстНаВычисление = "Истина ";
	
	Ном = 1;
	
	Для Каждого КлючЗначение Из УсловияНедоступности Цикл
		
		ИмяКолонкиИсточника = КлючЗначение.Ключ;
		ИмяКолонкиПриемника = СоотвИменКолонокРезультата.Получить(ИмяКолонкиИсточника);
		
		Если ИмяКолонкиПриемника = Неопределено Тогда
			ИмяКолонкиПриемника = СоотвИменКолонок.Получить(ИмяКолонкиИсточника);
		КонецЕсли;
		
		Если ИмяКолонкиПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УсловиеПоКолонкеИсточника = КлючЗначение.Значение;
		
		ВидыСравненияУсловия  = УсловиеПоКолонкеИсточника.ВидыСравнения;
		ЗначениеУсловия		  = УсловиеПоКолонкеИсточника.Значение;
		ТекущееЗначениеСтроки = ТекущаяСтрока[ИмяКолонкиПриемника];
		
		ИмяКлюча = "Значение_" + Ном;
		
		// Запомним текущие значения для сравнения.
		ЗначенияСтроки.Вставить(ИмяКлюча, ТекущееЗначениеСтроки);
		ЗначенияУсловий.Вставить(ИмяКлюча, ЗначениеУсловия);
		
		// Сформируем текст текущего условия для вычисления.
		Для Каждого ТекВидСравнения Из ВидыСравненияУсловия Цикл
			
			ТекущийТекстУсловия = "";
			
			Если ТекВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " > ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " >= ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ТекущийТекстУсловия = "ЗначениеЗаполнено(ЗначенияСтроки." + ИмяКлюча + ")";
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " < ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " <= ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ТекущийТекстУсловия = "Не ЗначениеЗаполнено(ЗначенияСтроки." + ИмяКлюча + ")";
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				ТекущийТекстУсловия = "Не ЗначенияСтроки." + ИмяКлюча + " = ЗначенияУсловий." + ИмяКлюча;
				
			ИначеЕсли ТекВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ТекущийТекстУсловия = "ЗначенияСтроки." + ИмяКлюча + " = ЗначенияУсловий." + ИмяКлюча;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекущийТекстУсловия) Тогда
				ТекстНаВычисление = ТекстНаВычисление + Символы.ПС 
									+ "И " + ТекущийТекстУсловия;
			КонецЕсли;
			
		КонецЦикла; // Для Каждого ТекВидСравнения Из ВидыСравненияУсловия Цикл.
		
		Ном = Ном + 1;
		
	КонецЦикла; // Для Каждого КлючЗначение Из УсловияНедоступности Цикл.
	
	// Вычислим результат.
	СтрокаНедоступна = Вычислить(ТекстНаВычисление);
	
	СтрокаДоступна = ?(СтрокаНедоступна, Ложь, Истина);
	
	Возврат СтрокаДоступна;
	
КонецФункции // СтрокаДоступнаДляРедактированияСервер()

// Процедура выполняет сдвиг дат результата в таблице результата.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции.
// 
&НаСервере 
Процедура СдвинутьДатыРезультатаВСтроке(ТекущаяСтрока)
	
	КолонкиПериод 	 		   = фКэшЗначений.КолонкиПериод;
	СоотвИменКолонок 		   = фКэшЗначений.СоотвИменКолонок;
	СоотвИменКолонокРезультата = фКэшЗначений.СоотвИменКолонокРезультата;
	
	Для Каждого КлючЗначение Из КолонкиПериод Цикл
		
		ИмяКолонки = КлючЗначение.Ключ;
		
		ИмяКолонкиИсточникаЗначения = СоотвИменКолонок.Получить(ИмяКолонки);
		ИмяКолонкиПриемникаЗначения = СоотвИменКолонокРезультата.Получить(ИмяКолонки);
		
		ПериодРезультат = бит_Бюджетирование.ПолучитьПериодПоСдвигу(ТекущаяСтрока[ИмяКолонкиИсточникаЗначения]
																   ,СдвигДат
																   ,ПериодичностьРезультата);
		
		ТекущаяСтрока[ИмяКолонкиПриемникаЗначения] = ПериодРезультат;
		
	КонецЦикла;
	
КонецПроцедуры // СдвинутьДатыРезультатаВСтроке()

// Процедура выводит итог по колонкам таблицы результата.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ВывестиИтогПоКолонкамТаблицыРезультата()
	
	СоотвИменКолонокИтога = фКэшЗначений.СоотвИменКолонокИтога;
	
	Для Каждого КлючЗначение Из СоотвИменКолонокИтога Цикл
		
		СтрокаТочность = Прав(КлючЗначение.Ключ, 11);
		ФорматДляИтога = "ЧЦ=15; ЧДЦ=" + Прав(СтрокаТочность, 1);
		
		ИмяКолонки		   = СтрЗаменить(КлючЗначение.Ключ, СтрокаТочность, "");
		ИмяЭлементаКолонки = КлючЗначение.Значение;
		
		ИтогПоКолонке = ТаблицаРезультата.Итог(ИмяКолонки);
		
		Элементы[ИмяЭлементаКолонки].ТекстПодвала = Формат(ИтогПоКолонке, ФорматДляИтога);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиИтогПоКолонкамТаблицыРезультата()

// Процедура настраивает условное оформление формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура НастроитьУсловноеОформление()
	
	ЦветНеопределено = Новый Цвет(225, 225, 225);
	
	// Получим массив не доступных колонок.
	МассивКолонокНередактируемых   = Новый Массив;
	МассивКолонокНедоступнойСтроки = Новый Массив;
	
	ПоляТаблицы = Элементы.ТаблицаРезультата.ПодчиненныеЭлементы;
	
	Для Каждого ПолеТаблицы Из ПоляТаблицы Цикл
		
		ИмяПоляТаблицы = ПолеТаблицы.Имя;
		
		Если Не Найти(ИмяПоляТаблицы, "ГруппаКолонок") = 0 Тогда
			
			ПоляГруппы = ПолеТаблицы.ПодчиненныеЭлементы;
			
			Для Каждого ПолеГруппы Из ПоляГруппы Цикл
				
				ИмяПоляГруппы = ПолеГруппы.Имя;
				
				Если Найти(Прав(ИмяПоляГруппы, 10), "Результат") = 0 Тогда
					МассивКолонокНередактируемых.Добавить(ИмяПоляГруппы);
				КонецЕсли;
				
				МассивКолонокНедоступнойСтроки.Добавить(ИмяПоляГруппы);
				
			КонецЦикла;
			
		Иначе
			
			МассивКолонокНедоступнойСтроки.Добавить(ИмяПоляТаблицы);
			
			Если ИмяПоляТаблицы = "ТаблицаРезультатаЗагрузить"
				Или ИмяПоляТаблицы = "ТаблицаРезультатаПолеКоэффициента1" Тогда
				Продолжить;
			КонецЕсли;
			
			МассивКолонокНередактируемых.Добавить(ИмяПоляТаблицы);
			
		КонецЕсли;
		
	КонецЦикла; // Для Каждого ПолеТаблицы Из ПоляТаблицы Цикл.
	
	// Установим условное оформление для колонок таблицы результата.
	Для Каждого ИмяОформляемогоПоля Из МассивКолонокНередактируемых Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		// Установим отбор для оформления.
		ИмяПоляКомпоновки = СтрЗаменить(ИмяОформляемогоПоля, "ТаблицаРезультата", "ТаблицаРезультата.");
		бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(ЭлементУсловногоОформления.Отбор
															   ,Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки)
															   ,"ТакогоЗначенияНет"
															   ,ВидСравненияКомпоновкиДанных.НеСодержит);
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона"	  , ЦветНеопределено);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ПолеУсловногоОформления               = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеУсловногоОформления.Поле 		  = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
		ПолеУсловногоОформления.Использование = Истина;
		
	КонецЦикла;
	
	// Установим условное оформление для доступности строк таблицы результата.
	УсловияНедоступности = фКэшЗначений.УсловияНедоступности;
	
	Если ЗначениеЗаполнено(УсловияНедоступности) Тогда
		
		СоотвИменКолонок 		   = фКэшЗначений.СоотвИменКолонок;
		СоотвИменКолонокРезультата = фКэшЗначений.СоотвИменКолонокРезультата;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		Для Каждого КлючЗначение Из УсловияНедоступности Цикл
			
			ИмяКолонкиИсточника = КлючЗначение.Ключ;
			ИмяКолонкиПриемника = СоотвИменКолонокРезультата.Получить(ИмяКолонкиИсточника);
			
			Если ИмяКолонкиПриемника = Неопределено Тогда
				ИмяКолонкиПриемника = СоотвИменКолонок.Получить(ИмяКолонкиИсточника);
			КонецЕсли;
			
			Если ИмяКолонкиПриемника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УсловиеПоКолонкеИсточника = КлючЗначение.Значение;
			
			ВидыСравненияУсловия = УсловиеПоКолонкеИсточника.ВидыСравнения;
			ЗначениеУсловия		 = УсловиеПоКолонкеИсточника.Значение;
			
			ИмяПоляКомпоновки 	 = "ТаблицаРезультата." + ИмяКолонкиПриемника;
			ПолеКомпановкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
			
			// Установим указанный отбор для колонки условия.
			Для Каждого ТекВидСравнения Из ВидыСравненияУсловия Цикл
				
				Если ТекВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
					Или ТекВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
					ТекЗначениеДляУсловия = Неопределено;
				Иначе
					ТекЗначениеДляУсловия = ЗначениеУсловия;
				КонецЕсли;
					
				бит_ОбщегоНазначенияКлиентСервер.УстановитьОтборУСписка(ЭлементУсловногоОформления.Отбор
																	   ,Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки)
																	   ,ТекЗначениеДляУсловия
																	   ,ТекВидСравнения
																	   ,Ложь);
			КонецЦикла;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона"	  , ЦветНеопределено);
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
			// Установим оформляемые поля.
			Для Каждого ПолеТаблицы Из МассивКолонокНедоступнойСтроки Цикл
				
				ПолеУсловногоОформления               = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеУсловногоОформления.Поле 		  = Новый ПолеКомпоновкиДанных(ПолеТаблицы);
				ПолеУсловногоОформления.Использование = Истина;
				
			КонецЦикла;
			
		КонецЦикла; // Для Каждого КлючЗначение Из УсловияНедоступности Цикл.
		
	КонецЕсли; // Если ЗначениеЗаполнено(УсловияНедоступности) Тогда.
	
КонецПроцедуры // НастроитьУсловноеОформление()

// Процедура обрабатывает изменение флага ЗапрашиватьПодтверждение. Сервер.
// 
// Параметры:
//  Нет.
// 
&НаСервере 
Процедура ИзменениеЗапрашиватьПодтверждениеСервер()
	
	ХранилищеОбщихНастроек.Сохранить("ОбщаяФорма.бит_ФормаИзмененияДанныхТаблицыУправляемая"
									,"ЗапрашиватьПодтверждение"
									,ЗапрашиватьПодтверждение);
	
КонецПроцедуры // ИзменениеЗапрашиватьПодтверждениеСервер()

#КонецОбласти
