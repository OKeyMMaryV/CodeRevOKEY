
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Режим) Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено.';en='The immediate opening of this form is not provided.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Режим 					  = Параметры.Режим;
	ВыборВыражения 			  = Параметры.ВыборВыражения;
	ОбъектСистемы 			  = Параметры.ОбъектСистемы;
	ОбъектСистемыПриемник 	  = Параметры.Приемник;
	КонтекстВыполненияУсловия = Параметры.КонтекстВыполненияУсловия;
	УчитыватьКорреспонденцию  = Параметры.УчитыватьКорреспонденцию;
	Счет 					  = Параметры.Счет;
	СчетКор 				  = Параметры.СчетКор;
	ТекУсловие 				  = Параметры.Условие;
	ЗначениеФильтра 		  = Параметры.ЗначениеФильтра;
	ТипЗначения 			  = Параметры.ТипЗначения;
	Алгоритм 				  = Параметры.Алгоритм;
			
	// Установка текущей строки
	ПодготовитьФормуНаСервере(ТекУсловие);
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроверкаЗаполненияПриИзменении(Элемент)
	
	ДеревоУсловияПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСравненияПриИзменении(Элемент)
	
	Если ВидСравнения = ПредопределенноеЗначение("Перечисление.бит_ВидыСравненияТрансляции.ВГруппе")
	 ИЛИ ВидСравнения = ПредопределенноеЗначение("Перечисление.бит_ВидыСравненияТрансляции.НЕВГруппе") Тогда
		
		НовыеПараметрыВыбора = Новый Массив; 
		НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЭтоГруппа", Истина));
		НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Группы)); 
	Иначе	
		НовыеПараметрыВыбора = Новый Массив;
	КонецЕсли;
	
	Элементы.ЗначениеФильтра.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоУсловия

&НаКлиенте
Процедура ДеревоУсловияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДействиеОК();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловияПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	РазвернутьПодчиненные(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУсловияПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоУсловия.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		Если ЭтоПравилаТрансляцииВыборВыражения Тогда
			// "раскручиваем" по иерархии дерева путь к данным.
			СтрПуть = ТекущаяСтрока.Имя;
			ТекРодитель = ТекущаяСтрока;
			Пока НЕ ТекРодитель = Неопределено Цикл
				ТекРодитель = ТекРодитель.ПолучитьРодителя();
				Если НЕ ТекРодитель = Неопределено Тогда
					СтрПуть = ТекРодитель.Имя+"."+СтрПуть;
				КонецЕсли; 
			КонецЦикла; 
			
			// Формируем выражение для правил трансляции.
			Если СтрПуть = "ФиксированноеЗначение" Тогда
				
			Иначе	
				СтрВыражение = "";
				МассивСтрок = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(СтрПуть, ".");
				Если МассивСтрок.Количество() > 1 Тогда
					
					Если МассивСтрок[0] = "ДополнительныеАналитики" Тогда
						
						СтрВыражение = "#А";
						Для Сй = 1 По МассивСтрок.Количество() - 1 Цикл
							
							СтрВыражение = СтрВыражение+?(ПустаяСтрока(СтрВыражение), "", ".")+МассивСтрок[Сй];
							
						КонецЦикла; 
						
					ИначеЕсли МассивСтрок[0] = "Регистратор" Тогда
						
						СтрВыражение = "#Р";
						Для Сй = 1 По МассивСтрок.Количество() - 1 Цикл
							
							Если Сй >= 1 Тогда
								
								СтрВыражение = СтрВыражение+?(ПустаяСтрока(СтрВыражение), "", ".")+МассивСтрок[Сй];
								
							КонецЕсли; 
							
						КонецЦикла; 
						
					ИначеЕсли МассивСтрок[0] = "Прочее" Тогда
						
						Если МассивСтрок[1] = "Соответствие" Тогда
							
							СтрВыражение = "#С";						
							СтрВыражение = СтрВыражение+?(ПустаяСтрока(СтрВыражение), "", ".")+МассивСтрок[2];
							
						КонецЕсли; 
						
					ИначеЕсли МассивСтрок[0] = "Субконто" ИЛИ МассивСтрок[0] = "СубконтоКор" Тогда	
						
						СтрВыражение = СтрПуть;
						
					Иначе	
						
						СтрВыражение = СтрПуть;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
				Если Найти(СтрВыражение, ".") = 0 Тогда
					
					СтрВыражение = "";
					
				КонецЕсли; 
				
				ЗначениеФильтра = СтрВыражение;
				
			КонецЕсли; 
			
			
		Иначе
			
			Если РежимПроверкиЗаполнения Тогда
				
				ТекОписание = Новый ОписаниеТипов("Булево");
				
			Иначе	
				
				ТекОписание = ТекущаяСтрока.Типы;
				
			КонецЕсли; 
			
			ЗначениеФильтра = ТекОписание.ПривестиЗначение(ЗначениеФильтра);
			Элементы.ЗначениеФильтра.ОграничениеТипа = ТекОписание;
			
			// Установка отбора по видуАналитики для аналитик типа ДополнительныеЗначенияАналитик.
			Если ТипЗнч(ЗначениеФильтра) = Тип("СправочникСсылка.бит_ДополнительныеЗначенияАналитик") Тогда
				
				Эл = Неопределено;
				Для каждого ТекЭл Из ТекущаяСтрока.ДополнительныеПараметры Цикл
					
					Если ТекЭл.Представление = "Аналитика" Тогда
					
						Эл = ТекЭл;
						Прервать;
					
					КонецЕсли; 
				
				КонецЦикла; 
				
				Если НЕ Эл = Неопределено Тогда
					
					СтрОтбор = Новый Структура("Владелец", Эл.Значение);
					бит_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыВыбораЭлемента(Элементы.ЗначениеФильтра, СтрОтбор);
					
					ПроверитьЗначениеВыбраннойАналитики(ЗначениеФильтра, Эл.Значение);
					
				КонецЕсли; 
				
			Иначе
				
				Элементы.ЗначениеФильтра.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
				
			КонецЕсли; 
			УстановитьПараметрыВыбораВидаСравнения(ТекОписание);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ДействиеОК();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает родителя строкиДерева и элементаДерева.
// 
// Параметры:
//   ТекущаяСтрока - ЭлементДерева, СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//  Родитель - ЭлементДерева, СтрокаДереваЗначений.
// 
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРодителя(ТекущаяСтрока)

	флЭтоЭлементДерева = ?(ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева"), Истина, Ложь);
	
	Если флЭтоЭлементДерева Тогда
		
		Родитель = ТекущаяСтрока.ПолучитьРодителя();
		
	Иначе	
		
		Родитель = ТекущаяСтрока.Родитель();
		
	КонецЕсли; 

	Возврат Родитель;
	
КонецФункции // ПолучитьРодителя()

// Функция проверяет является ли текущая строка параметром Решение функции ПринятоРешение.
// 
// Параметры:
//  ТекущиеДанные  - СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//   флЭтоПараметрРешение   - Булево.
// 
&НаКлиенте
Функция ЭтоПараметрРешение(ТекущиеДанные)
	
	флЭтоПараметрРешение = Ложь;
	Родитель = ПолучитьРодителя(ТекущиеДанные);
	
	Если ТекущиеДанные <> Неопределено И Родитель <> Неопределено Тогда
		
		Если ТекущиеДанные.Имя = "Решение" И Родитель.Имя = "ПринятоРешение" Тогда
			
			флЭтоПараметрРешение = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат флЭтоПараметрРешение;
	
КонецФункции // ЭтоПараметрРешение()

// Функция проверяет является ли текущая строка параметров Виза функции ПринятоРешениеПоВизе.
// 
// Параметры:
//  ТекущиеДанные  - СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//   флЭтоПараметрРешение   - Булево.
// 
&НаКлиенте
Функция ЭтоПараметрВиза(ТекущиеДанные)
	
	флЭтоПараметрРешение = Ложь;
	Родитель = ПолучитьРодителя(ТекущиеДанные);
	
	Если ТекущиеДанные <> Неопределено И Родитель <> Неопределено Тогда
		
		Если ТекущиеДанные.Имя = "Виза" И Родитель.Имя = "ПринятоРешениеПоВизе" Тогда
			
			флЭтоПараметрРешение = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат флЭтоПараметрРешение;
	
КонецФункции // ЭтоПараметрРешение()

// Функция проверяет является ли текущая строка параметров Точка функции ЭтоПараметрТочка.
// 
// Параметры:
//  ТекущиеДанные  - СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//   флЭтоПараметр   - Булево.
// 
&НаКлиенте
Функция ЭтоПараметрТочка(ТекущиеДанные)
	
	флЭтоПараметр = Ложь;
	Родитель = ПолучитьРодителя(ТекущиеДанные);	
	
	Если ТекущиеДанные <> Неопределено И Родитель <> Неопределено Тогда
		
		Если ТекущиеДанные.Имя = "Точка" И Родитель.Имя = "СостояниеЗадачи" Тогда
			
			флЭтоПараметр = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат флЭтоПараметр;
	
КонецФункции // ЭтоПараметрРешение()

// Функция формирует строку имен с разделителями точка по подчиненным строкам дерева. 
// Рекурсия.
// 
// Параметры:
// 	СтрокаСтарт        	 - СтрокаДереваЗначений.
//
// Возвращаемое значение:
// 	РезСтрока        	 - Строка.
// 
&НаКлиенте
Функция СобратьИмена(СтрокаСтарт)

	РезСтрока  = "";
	Если СтрокаСтарт <> Неопределено Тогда
		
		РезСтрока = СтрокаСтарт.Имя;
		
		Родитель = ПолучитьРодителя(СтрокаСтарт);
		Если Родитель <> Неопределено Тогда
			
			РезСтрока = СобратьИмена(Родитель)+"."+РезСтрока;
			
		КонецЕсли; 
	КонецЕсли; 

	Возврат РезСтрока;
	
КонецФункции // СобратьИмена()

// Процедура обрабатывает выбор пользователя и закрывает форму. 
// 
&НаКлиенте
Процедура ДействиеОК()

	ТекущиеДанные = Элементы.ДеревоУсловия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Если ТекущиеДанные.ПропускатьПриВыборе Тогда
		Возврат;	
	КонецЕсли; 
	
	Если ЭтоПараметрРешение(ТекущиеДанные) 
		ИЛИ ЭтоПараметрВиза(ТекущиеДанные) 
		ИЛИ ЭтоПараметрТочка(ТекущиеДанные) Тогда
		
		ТекущиеДанные = ТекущиеДанные.Родитель;
		
	КонецЕсли; 
	
	РезСтруктура = Новый Структура("Условие,ВидСравнения,Значение,ОбъединениеСПоследующим,ДополнительныеПараметры");
	
	СтрУсловие = СобратьИмена(ТекущиеДанные);
	Если РежимПроверкиЗаполнения Тогда
		СтрУсловие = "ЗначениеЗаполнено("+СтрУсловие+")";
	КонецЕсли; 
	СтрУсловие = СтрЗаменить(СтрУсловие,"ДополнительныеАналитики.","#А.");
	
	РезСтруктура.Условие = СтрУсловие;
	РезСтруктура.ВидСравнения = ВидСравнения;
	РезСтруктура.Значение     = ЗначениеФильтра;
	РезСтруктура.ОбъединениеСПоследующим =  ОбъединениеСПоследующим;
	РезСтруктура.ДополнительныеПараметры =  ТекущиеДанные.ДополнительныеПараметры;
	
	Закрыть(РезСтруктура);

КонецПроцедуры // ДействиеОК()

&НаКлиенте
Процедура УстановитьПараметрыВыбораВидаСравнения(ОписаниеТипов)

	ПараметрыВыбора = Новый Массив();
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ОписаниеТипов", ОписаниеТипов));
	
	НовыеПараметры = Новый ФиксированныйМассив(ПараметрыВыбора);
	Элементы.ВидСравнения.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ТекУсловие)
	
	ЭтоПравилаТрансляции 				  = СтрСравнить(Режим, "ПравилаТрансляции") = 0;
	ЭтоПользовательскоеУсловие 			  = СтрНайти(Режим, "ПользовательскоеУсловие") > 0;
	ЭтоПользовательскоеУсловиеДляПроцесса = СтрСравнить(Режим, "ПользовательскоеУсловие_Процесс") = 0;
	
	// "ЭтоПравилаТрансляцииВыборЗначения" - это расширение "ЭтоПравилаТрансляции".
	Если ЭтоПравилаТрансляции И ВыборВыражения Тогда
		ЭтоПравилаТрансляцииВыборВыражения = Истина;
	КонецЕсли;
	
	Если ЭтоПравилаТрансляцииВыборВыражения Тогда
		ЭтотОбъект.Заголовок =  НСтр("ru='Выбор значения';en='Value Selection'");
	КонецЕсли; 
	
	Если СтрНайти(ТекУсловие, "ЗначениеЗаполнено(") > 0 Тогда
		РежимПроверкиЗаполнения = Истина;
	КонецЕсли; 
	
	СчетДт = ?(УчитыватьКорреспонденцию, Счет, 	  Неопределено);
	СчетКт = ?(УчитыватьКорреспонденцию, СчетКор, Неопределено);

	СформироватьДеревоРеквизитов();	
	
	УстановитьТекущуюСтрокуПриОткрытии(ТекУсловие);
	
	Если НЕ ЗначениеЗаполнено(ВидСравнения) Тогда
		ВидСравнения = Перечисления.бит_ВидыСравненияТрансляции.Равно;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтрокуПриОткрытии(ТекУсловие)
	
	Если ЭтоПравилаТрансляцииВыборВыражения Тогда
		
		Элементы.ЗначениеФильтра.ОграничениеТипа = ТипЗначения;
		
		Коллекция = ДеревоУсловия.ПолучитьЭлементы();
		РезСтрока = Неопределено;
		
		Если ТипЗнч(ЗначениеФильтра) = Тип("Строка") 
			И ( Найти(ЗначениеФильтра,"#А.") > 0      
			ИЛИ Найти(ЗначениеФильтра,"#Р.") > 0 
			ИЛИ Найти(ЗначениеФильтра,"#С.") > 0
			ИЛИ Найти(ЗначениеФильтра,"Субконто.")>0
			ИЛИ Найти(ЗначениеФильтра,"СубконтоКор.")>0)Тогда
			
			РезМассив = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ЗначениеФильтра, ".");
			Если РезМассив.Количество() > 0 Тогда
				
				РезМассив[0] = СтрЗаменить(РезМассив[0], "#А", "ДополнительныеАналитики"); // Лат
				РезМассив[0] = СтрЗаменить(РезМассив[0], "#Р", "Регистратор");
				Если РезМассив[0] = "#С" Тогда
					
					РезМассив[0] = "Прочее";
					РезМассив[1] = "Соответствие."+РезМассив[1];
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			РезСтрока = НайтиСтрокуДерева(Коллекция, РезМассив);
			
		Иначе
			
			// Это фиксированное значение
			СтрОтбор  = Новый Структура("Имя", "ФиксированноеЗначение");			
			РезСтрока = бит_РаботаСКоллекциямиКлиентСервер.НайтиЭлементДерева(Коллекция, СтрОтбор);
			
		КонецЕсли; 
		
		Если РезСтрока <> Неопределено Тогда
			Элементы.ДеревоУсловия.ТекущаяСтрока = РезСтрока.ПолучитьИдентификатор();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекУсловие) Тогда
		
		ТекУсловие = СтрЗаменить(ТекУсловие, "#А", "ДополнительныеАналитики");
		
		Если СтрНайти(ТекУсловие, "ЗначениеЗаполнено(") > 0 Тогда
			ТекУсловие = СтрЗаменить(ТекУсловие, "ЗначениеЗаполнено(", "");
			ТекУсловие = Лев(ТекУсловие, СтрДлина(ТекУсловие) - 1); // Последняя скобка.
		КонецЕсли; 
		
		РезМассив = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ТекУсловие,".");
		
		Коллекция = ДеревоУсловия.ПолучитьЭлементы();
		РезСтрока = НайтиСтрокуДерева(Коллекция, РезМассив);
		
		Если РезСтрока <> Неопределено Тогда
			Элементы.ДеревоУсловия.ТекущаяСтрока = РезСтрока.ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Выполняет поиск строки дерева по массиву имен. 
// 
// Параметры:
//  Коллекция  - КоллекцияЭлементовДерева.
//  МассивИмен - Массив.
// 
// ВозвращаемоеЗначение:
// РезСтрока - ЭлементДерева.
// 
&НаСервере
Функция НайтиСтрокуДерева(Коллекция, МассивИмен)
	
	РезСтрока = Неопределено;
	
	ТекущаяСтрокаДерева = Коллекция[0];	
	Для каждого Имя Из МассивИмен Цикл
		
		СтрОтбор  = Новый Структура("Имя", Имя);
		РезСтрока = бит_РаботаСКоллекциямиКлиентСервер.НайтиЭлементДерева(Коллекция, СтрОтбор);
		Если РезСтрока = Неопределено Тогда
			
			РазвернутьПодчиненные(ТекущаяСтрокаДерева);
			Коллекция = ТекущаяСтрокаДерева.ПолучитьЭлементы();
			
			РезСтрока = бит_РаботаСКоллекциямиКлиентСервер.НайтиЭлементДерева(Коллекция, СтрОтбор);
			
			Если РезСтрока = Неопределено Тогда
				Продолжить;
			Иначе
				ТекущаяСтрокаДерева = РезСтрока;
			КонецЕсли; 
			
		Иначе
			
			ТекущаяСтрокаДерева = РезСтрока;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат РезСтрока;
	
КонецФункции // НайтиСтрокуДерева()

// Процедура заполняет дерево реквизитов.
// 
&НаСервере
Процедура СформироватьДеревоРеквизитов()
	
	ДеревоУсловия.ПолучитьЭлементы().Очистить();
	Функциональность = РеквизитФормыВЗначение("ДеревоУсловия");
	
	Если ЭтоПользовательскоеУсловиеДляПроцесса Тогда
		СформироватьДеревоДляПроцесса(Функциональность);
	ИначеЕсли ЭтоПользовательскоеУсловие Тогда
		СформироватьДеревоПользовательскиеУсловия(Функциональность);
	ИначеЕсли ЭтоПравилаТрансляции Тогда
		СформироватьДеревоПравилаТрансляции(Функциональность);
		Если ЭтоПравилаТрансляцииВыборВыражения Тогда
			СформироватьДеревоПравилаТрансляцииВыборЗначения(Функциональность);
		КонецЕсли; 
	КонецЕсли; 
	
	ЗначениеВРеквизитФормы(Функциональность, "ДеревоУсловия");
	
КонецПроцедуры

// Процедура формирует дерево в случае контекста Процесс.
// 
&НаСервере
Процедура СформироватьДеревоДляПроцесса(Функциональность)
	
	// Процесс
	Описание   = Новый ОписаниеТипов("БизнесПроцессСсылка.бит_уп_Процесс");
	СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"ТекущийОбъект","ТекущийОбъект",Описание,Истина);
	
	// Параметры алгоритма
	Описание   = Новый ОписаниеТипов("Строка");
	СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"ПараметрыПроцесса","ПараметрыПроцесса",Описание,Истина);
	
	Для каждого СтрокаТаблицы Из Алгоритм.ПараметрыАлгоритма Цикл
		
		Описание   = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.СтрТип);
		ДобавитьСтрокуДерева(СтрокаВерх, СтрокаТаблицы.Имя, СтрокаТаблицы.Имя, Описание, Истина);
		
	КонецЦикла; 
	
	// Функция проверки состояния задачи
	Описание = Новый ОписаниеТипов("СправочникСсылка.бит_СтатусыОбъектов");
	СтрокаФункция = ДобавитьСтрокуДерева(Функциональность,"СостояниеЗадачи","СостояниеЗадачи",Описание, Ложь);
	ДопПараметры = Новый СписокЗначений;
	ДопПараметры.Добавить(Справочники.бит_уп_ТочкиАлгоритмов.ПустаяСсылка(),"Точка");
	СтрокаФункция.ДополнительныеПараметры = ДопПараметры;		
	
КонецПроцедуры

// Процедура формирует дерево для заполнения условий в справочнике ПользовательскиеУсловия.
// 
&НаСервере
Процедура СформироватьДеревоПользовательскиеУсловия(Функциональность)
	
	ИмяТипа = бит_УправлениеОбъектамиСистемы.ПолучитьИмяТипаОбъекта(ОбъектСистемы.ИмяОбъекта,ОбъектСистемы.ВидОбъекта);
	Описание = Новый ОписаниеТипов(ИмяТипа);
	СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"ТекущийОбъект","ТекущийОбъект",Описание,Истина);
	
	РазвернутьПодчиненные(СтрокаВерх);
	
	флДобавлятьВизы = ?(КонтекстВыполненияУсловия = Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.ТекущийОбъект_ТекущаяВиза,Истина,Ложь);
	флДобавлятьУстановленныеВизы = ?(КонтекстВыполненияУсловия = Перечисления.бит_КонтекстыВыполненияПользовательскихУсловий.ТекущийОбъект_УстановленныеВизы,Истина,Ложь);
	
	Описание   = Новый ОписаниеТипов("СправочникСсылка.бит_СтатусыОбъектов");
	СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"Статус","Статус",Описание,Истина);
	
	Если флДобавлятьВизы Тогда
		
		Описание   = Новый ОписаниеТипов("СправочникСсылка.бит_Визы");
		СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"ТекущаяВиза","ТекущаяВиза",Описание,Истина);
		
	КонецЕсли; 		
	
	Если флДобавлятьУстановленныеВизы Тогда
		
		// Сведения об установленных визах
		Описание = Новый ОписаниеТипов("Строка");
		СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"УстановленныеВизы","УстановленныеВизы",Описание,Истина);
		
		Описание = Новый ОписаниеТипов("Булево");
		СтрокаУсловиеВиза = ДобавитьСтрокуДерева(СтрокаВерх,"ВсеВизыПолучены","ВсеВизыПолучены",Описание,Ложь);
		
		// Принято решение
		Описание = Новый ОписаниеТипов("Булево");
		СтрокаФункция = ДобавитьСтрокуДерева(СтрокаВерх,"ПринятоРешение","ПринятоРешение",Описание,Ложь);
		
		ДопПараметры = Новый СписокЗначений;
		ДопПараметры.Добавить(Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка(),"Решение");
		СтрокаФункция.ДополнительныеПараметры = ДопПараметры;		
		
		// Принято решение по визе
		Описание = Новый ОписаниеТипов("СправочникСсылка.бит_ВидыРешенийСогласования");
		СтрокаФункция = ДобавитьСтрокуДерева(СтрокаВерх,"ПринятоРешениеПоВизе","ПринятоРешениеПоВизе",Описание,Ложь);
		ДопПараметры = Новый СписокЗначений;
		ДопПараметры.Добавить(Справочники.бит_Визы.ПустаяСсылка(),"Виза");
		СтрокаФункция.ДополнительныеПараметры = ДопПараметры;		
		
		// Приняты решения по вышестоящим визам
		Описание = Новый ОписаниеТипов("Булево");
		СтрокаФункция = ДобавитьСтрокуДерева(СтрокаВерх,"ПринятыРешенияПоВышестоящимВизам","ПринятыРешенияПоВышестоящимВизам",Описание,Ложь);
		
		ДопПараметры = Новый СписокЗначений;
		ДопПараметры.Добавить(Справочники.бит_Визы.ПустаяСсылка(),"Виза");
		СтрокаФункция.ДополнительныеПараметры = ДопПараметры;		
		
		// Принято решение по вышестоящим визам
		Описание = Новый ОписаниеТипов("Булево");
		СтрокаФункция = ДобавитьСтрокуДерева(СтрокаВерх,"ПринятоРешениеПоВышестоящимВизам","ПринятоРешениеПоВышестоящимВизам",Описание,Ложь);
		
		ДопПараметры = Новый СписокЗначений;
		ДопПараметры.Добавить(Справочники.бит_Визы.ПустаяСсылка(),"Виза");
		ДопПараметры.Добавить(Справочники.бит_ВидыРешенийСогласования.ПустаяСсылка(),"Решение");		
		СтрокаФункция.ДополнительныеПараметры = ДопПараметры;		
		
	КонецЕсли; 
        
    Если Метаданные.Документы.Найти("бит_ЗаявкаНаРасходованиеСредств") <> Неопределено Тогда
        ДокументЗаявкаНаРасходованиеСредств = "Документ.бит_ЗаявкаНаРасходованиеСредств";  
	Иначе
		ДокументЗаявкаНаРасходованиеСредств = "Документ.бит_кзн_ЗаявкаНаРасходованиеСредств";
    КонецЕсли;        
    	
	ПолноеИмяОбъектаСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСистемы, "ИмяОбъектаПолное");
    
	Если ПолноеИмяОбъектаСистемы = ДокументЗаявкаНаРасходованиеСредств Тогда
		
		// Оплаты по заявке
		Описание   = Новый ОписаниеТипов("Строка");
		СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"ОплатаЗаявки","ОплатаЗаявки",Описание,Истина);
		
		Описание = Новый ОписаниеТипов("Число");
		СтрокаУсловиеВиза = ДобавитьСтрокуДерева(СтрокаВерх,"СуммаПлан","СуммаПлан",Описание,Ложь);
		
		Описание = Новый ОписаниеТипов("Число");
		СтрокаУсловиеВиза = ДобавитьСтрокуДерева(СтрокаВерх,"СуммаОплата","СуммаОплата",Описание,Ложь);		
		
		Описание = Новый ОписаниеТипов("Число");
		СтрокаУсловиеВиза = ДобавитьСтрокуДерева(СтрокаВерх,"Разность","Разность",Описание,Ложь);		

	КонецЕсли; 
	
	// Прочее
	Описание = Новый ОписаниеТипов("Строка");
	СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"Прочее","Прочее",Описание,Истина);
	
	Описание   = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	СтрокаПодч = ДобавитьСтрокуДерева(СтрокаВерх,"ТекущийПользователь","ТекущийПользователь",Описание,Ложь);
	
	// Проверка, содержит ли табличная часть то или иное значение.
	Описание   = Новый ОписаниеТипов("Булево");
	СтрокаТабЧасти = ДобавитьСтрокуДерева(СтрокаВерх,"ТабЧастьСодержитЗначение","ТабЧастьСодержитЗначение",Описание,Истина);	
	ДопПараметры = Новый СписокЗначений;
	ДопПараметры.Добавить("","ИмяТабЧасти");
	ДопПараметры.Добавить("","ИмяРеквизита");
	ДопПараметры.Добавить(Неопределено, "Значение");
	СтрокаТабЧасти.ДополнительныеПараметры = ДопПараметры;
	
	// Проверка, доступна ли пользователю текущая роль.
	Описание       = Новый ОписаниеТипов("Булево");
	СтрокаТабЧасти = ДобавитьСтрокуДерева(СтрокаВерх,"ДоступнаРольИсполнителя","ДоступнаРольИсполнителя",Описание,Истина);	
	ДопПараметры   = Новый СписокЗначений;
	ДопПараметры.Добавить(Справочники.бит_РолиИсполнителей.ПустаяСсылка(),"Роль");
	СтрокаТабЧасти.ДополнительныеПараметры = ДопПараметры;
	
	Если Метаданные.Документы.Найти("бит_ЗаявкаНаЗатраты") <> Неопределено Тогда
		ДокументЗаявкаНаЗатраты = "Документ.бит_ЗаявкаНаЗатраты";
	Иначе
		ДокументЗаявкаНаЗатраты = "";
	КонецЕсли; 
	
	Если ПолноеИмяОбъектаСистемы = ДокументЗаявкаНаРасходованиеСредств
	 ИЛИ ПолноеИмяОбъектаСистемы = ДокументЗаявкаНаЗатраты Тогда
		
		Описание       = Новый ОписаниеТипов("Булево");
		СтрокаТабЧасти = ДобавитьСтрокуДерева(СтрокаВерх,"ЕстьКорректировкаКонтрольныхЗначений","ЕстьКорректировкаКонтрольныхЗначений",Описание,Ложь);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПриемника(ДеревоРеквизиты)
	
	Если ОбъектСистемыПриемник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии Тогда
		МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ОбъектСистемыПриемник.ИмяОбъекта];
		ТаблицаРеквизитов = бит_МеханизмТрансляции.ПолучитьРеквизитыРегистраБухгалтерии(ОбъектСистемыПриемник.ИмяОбъекта,Ложь,Ложь);
	ИначеЕсли ОбъектСистемыПриемник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ОбъектСистемыПриемник.ИмяОбъекта];
		ТаблицаРеквизитов = бит_МеханизмТрансляции.ПолучитьРеквизитыРегистраНакопления(ОбъектСистемыПриемник.ИмяОбъекта);
	Иначе
		Возврат;
	КонецЕсли; 
	
	СтрокаВерх = ДобавитьСтрокуДерева(ДеревоРеквизиты,"ЗаписьПриемник","Запись приемника",,,Истина);
	Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		Если СтрокаТаблицы.Использование И НЕ СтрокаТаблицы.ЭтоСубконто Тогда
			Если СтрокаТаблицы.Балансовый Тогда
				ДобавитьСтрокуДерева(СтрокаВерх, СтрокаТаблицы.ИмяРеквизита, СтрокаТаблицы.Синоним, СтрокаТаблицы.Тип, Истина);
			Иначе	
				ДобавитьСтрокуДерева(СтрокаВерх,СтрокаТаблицы.ИмяРеквизита + "Дт", СтрокаТаблицы.Синоним + " Дт", СтрокаТаблицы.Тип, Истина);
				ДобавитьСтрокуДерева(СтрокаВерх,СтрокаТаблицы.ИмяРеквизита + "Кт", СтрокаТаблицы.Синоним + " Кт", СтрокаТаблицы.Тип, Истина);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	// Виды субконто приемника
	Если ОбъектСистемыПриемник.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии Тогда
		// Субконто
		СтрокаВерхСубконто = ДобавитьСтрокуДерева(СтрокаВерх,"СубконтоДт","Субконто Дт",,, Истина);
		ДобавитьСубконто(СтрокаВерхСубконто, МетаданныеРегистра, Неопределено);
		
		// Кор субконто
		СтрокаВерхСубконтоКор = ДобавитьСтрокуДерева(СтрокаВерх,"СубконтоКт","Субконто Кт",,, Истина);
		ДобавитьСубконто(СтрокаВерхСубконтоКор, МетаданныеРегистра, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыИсточника(МетаданныеРегистра, ТаблицаРеквизитов, Функциональность)
	
	// Реквизиты источника
	СтрокаВерх = ДобавитьСтрокуДерева(Функциональность,"ЗаписьИсточник","Запись источника",,,Истина);
	Если ЭтоПравилаТрансляции Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
			Если СтрокаТаблицы.Использование И НЕ СтрокаТаблицы.ЭтоСубконто Тогда
				
				СтрДтКт = ?(СтрокаТаблицы.Балансовый ИЛИ УчитыватьКорреспонденцию,"","[ДтКт]");
				ДобавитьСтрокуДерева(СтрокаВерх, СтрокаТаблицы.ИмяРеквизита + СтрДтКт, 
				СтрокаТаблицы.Синоним + СтрДтКт, СтрокаТаблицы.Тип,Истина);
				
				Если НЕ СтрокаТаблицы.Балансовый 
					И НЕ УчитыватьКорреспонденцию Тогда
					
					СтрДтКт = "[Кор]";
					ДобавитьСтрокуДерева(СтрокаВерх,СтрокаТаблицы.ИмяРеквизита+СтрДтКт,СтрокаТаблицы.Синоним+СтрДтКт,СтрокаТаблицы.Тип,Истина)
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	// Виды субконто источника
	Если ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии Тогда
		Если УчитыватьКорреспонденцию Тогда
			// Субконто
			СтрокаВерхСубконто = ДобавитьСтрокуДерева(СтрокаВерх,"СубконтоДт", "Субконто Дт",,, Истина);
			ДобавитьСубконто(СтрокаВерхСубконто, МетаданныеРегистра, Счет);
			
			// Кор субконто
			СтрокаВерхСубконтоКор = ДобавитьСтрокуДерева(СтрокаВерх,"СубконтоКт", "Субконто Кт",,, Истина);
			ДобавитьСубконто(СтрокаВерхСубконтоКор,МетаданныеРегистра, СчетКор);
		Иначе	
			// Субконто
			СтрокаВерхСубконто = ДобавитьСтрокуДерева(СтрокаВерх,"Субконто", "Субконто",,, Истина);
			ДобавитьСубконто(СтрокаВерхСубконто, МетаданныеРегистра, Счет);
			
			// Кор субконто
			СтрокаВерхСубконтоКор = ДобавитьСтрокуДерева(СтрокаВерх,"СубконтоКор", "Субконто Кор.",,, Истина);
			ДобавитьСубконто(СтрокаВерхСубконтоКор,МетаданныеРегистра, СчетКор);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Процедура формирует дерево для заполнения условий в правилах трансляции.
// 
&НаСервере
Процедура СформироватьДеревоПравилаТрансляции(Функциональность)
	
	Если ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии Тогда
		МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ОбъектСистемы.ИмяОбъекта];
		ТаблицаРеквизитов = бит_МеханизмТрансляции.ПолучитьРеквизитыРегистраБухгалтерии(ОбъектСистемы.ИмяОбъекта,УчитыватьКорреспонденцию,Ложь);
	ИначеЕсли ОбъектСистемы.ВидОбъекта = Перечисления.бит_ВидыОбъектовСистемы.РегистрНакопления Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ОбъектСистемы.ИмяОбъекта];
		ТаблицаРеквизитов = бит_МеханизмТрансляции.ПолучитьРеквизитыРегистраНакопления(ОбъектСистемы.ИмяОбъекта);
	Иначе	
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьРеквизитыИсточника(МетаданныеРегистра, ТаблицаРеквизитов, Функциональность);
	
	// Реквизиты приемника
	Если ЗначениеЗаполнено(ОбъектСистемыПриемник) Тогда
		ЗаполнитьРеквизитыПриемника(Функциональность);
	КонецЕсли;
	
	// Регистраторы
	ТекОписание = Новый ОписаниеТипов("СправочникСсылка.бит_ОбъектыСистемы");
	СтрокаРегистраторы = ДобавитьСтрокуДерева(Функциональность,"Регистратор","Регистратор",ТекОписание);
	
	Для Каждого МетаДок ИЗ Метаданные.Документы Цикл
		Если МетаДок.Движения.Содержит(МетаданныеРегистра) Тогда
			ТекОписание = Новый ОписаниеТипов("ДокументСсылка."+МетаДок.Имя);
			ДобавитьСтрокуДерева(СтрокаРегистраторы,МетаДок.Имя,МетаДок.Синоним,ТекОписание,Истина)
		КонецЕсли; 
	КонецЦикла;		
	
	// ДополнительныеАналитики
	СтрокаАналитики = ДобавитьСтрокуДерева(Функциональность,"ДополнительныеАналитики","Дополнительные аналитики",,, Истина);	
	
	ВыборкаПВХ = ПланыВидовХарактеристик.бит_ВидыДополнительныхАналитик.Выбрать();
	
	Пока ВыборкаПВХ.Следующий() Цикл
		ИмяАналитики = бит_МеханизмТрансляции.СформироватьИмяАналитики(ВыборкаПВХ.Ссылка);
		СтрокаДерева = ДобавитьСтрокуДерева(СтрокаАналитики, ИмяАналитики, ВыборкаПВХ.Ссылка, ВыборкаПВХ.ТипЗначения, Истина);
		ДопПараметры = Новый СписокЗначений;
		ДопПараметры.Добавить(ВыборкаПВХ.Ссылка, "Аналитика");
		СтрокаДерева.ДополнительныеПараметры = ДопПараметры;
	КонецЦикла; 	
	
КонецПроцедуры

// Процедура формирует дерево для заполнения условий в правилах трансляции.
// 
&НаСервере
Процедура СформироватьДеревоПравилаТрансляцииВыборЗначения(Функциональность)
	
	// Прочее
	СтрокаПрочее = ДобавитьСтрокуДерева(Функциональность,"Прочее", "Прочее");
	
	// Фиксированные соответствия	
	ТипСтатья = Тип("СправочникСсылка.бит_СтатьиОборотов");
	ТипЦФО = Тип(бит_ОбщегоНазначения.ПолучитьИмяТипаЦФО());
	Если ТипЗначения.СодержитТип(ТипЦФО) ИЛИ ТипЗначения.СодержитТип(ТипСтатья) Тогда
		Если ТипЗначения.СодержитТип(ТипСтатья) Тогда
			Если НЕ Метаданные.РегистрыСведений.Найти("бит_СтатьиОборотов_СтатьиРегл") = Неопределено Тогда
				ДобавитьСтрокуДерева(СтрокаПрочее,"Соответствие.Статьи_СтатьиРегл", 
					НСтр("ru='Соответствие:Статьи регл.-->Статьи об.';en='Compliance: Articles Regul. -> Articles on.'"),Новый ОписаниеТипов("Строка"),Истина);
			КонецЕсли; 
			
			Если НЕ Метаданные.РегистрыСведений.Найти("бит_СтатьиОборотов_НоменклатурныеГруппы") = Неопределено Тогда
				ДобавитьСтрокуДерева(СтрокаПрочее,"Соответствие.Статьи_НоменклатурныеГруппы",  
					НСтр("ru='Соответствие:Ном. группы-->Статьи об.';en='Compliance: Nom. Groups -> Articles on.'") ,Новый ОписаниеТипов("Строка"),Истина);
			КонецЕсли; 
		КонецЕсли; 
		
		Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_СинхронизироватьПодразделенияРеглЦФО") И ТипЗначения.СодержитТип(ТипЦФО) Тогда
			ДобавитьСтрокуДерева(СтрокаПрочее,"Соответствие.СинхронизацияПодразделенийЦФО", 
				НСтр("ru='Синхронизация:Подразделения-->ЦФО';en='Synchronization: Divisions -> CFD'")      ,Новый ОписаниеТипов("Строка"),Истина);	
		КонецЕсли; 
		
		Если НЕ Метаданные.РегистрыСведений.Найти("бит_ЦФО_Подразделения") = Неопределено И ТипЗначения.СодержитТип(ТипЦФО) Тогда
			ДобавитьСтрокуДерева(СтрокаПрочее,"Соответствие.ЦФО_Подразделения", 
				НСтр("ru='Соответствие:Подразделения-->ЦФО';en='Compliance: Units -> CFA'")      ,Новый ОписаниеТипов("Строка"),Истина);	
		КонецЕсли; 
	КонецЕсли; 
	
	// Универсальные соответствия
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_ВидыСоответствийАналитик.Код,
	|	бит_ВидыСоответствийАналитик.Наименование,
	|	бит_ВидыСоответствийАналитик.ЛеваяАналитика_1,
	|	бит_ВидыСоответствийАналитик.ЛеваяАналитика_2,
	|	бит_ВидыСоответствийАналитик.ЛеваяАналитика_3,
	|	бит_ВидыСоответствийАналитик.ПраваяАналитика_1,
	|	бит_ВидыСоответствийАналитик.ПраваяАналитика_2,
	|	бит_ВидыСоответствийАналитик.ПраваяАналитика_3
	|ИЗ
	|	Справочник.бит_ВидыСоответствийАналитик КАК бит_ВидыСоответствийАналитик
	|
	|УПОРЯДОЧИТЬ ПО
	|	бит_ВидыСоответствийАналитик.Приоритет
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоАналитикСоответствия = Справочники.бит_ВидыСоответствийАналитик.МаксКоличествоАналитик();
	
	Пока Выборка.Следующий() Цикл
		// Проверка на необходимость отображения данного соответствия.
		МассивТиповПроверки = Новый Массив;
		
		Для Н = 1 По КоличествоАналитикСоответствия Цикл
			Если ЗначениеЗаполнено(Выборка["ПраваяАналитика_"+н]) Тогда
				 МассивВрем = Выборка["ПраваяАналитика_"+н].ТипЗначения.Типы();
				 Для каждого Эл Из МассивВрем Цикл
				 	МассивТиповПроверки.Добавить(Эл);
				 КонецЦикла; 
			КонецЕсли; 
		КонецЦикла; 
		
		флЕстьТип = Ложь;
		
		Для каждого ТекТип Из МассивТиповПроверки Цикл
			Если ТипЗначения.СодержитТип(ТекТип) Тогда
				флЕстьТип = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		// Добавление соответсвия в ветку Прочее
		Если флЕстьТип Тогда
			ДобавитьСтрокуДерева(СтрокаПрочее,"Соответствие." + Выборка.Код,  
				НСтр("ru='Соответствие:';en='Match:'")+Выборка.Наименование ,Новый ОписаниеТипов("Строка"),Истина);	
		КонецЕсли; 
	КонецЦикла; 
	
	// ФиксированноеЗначение
	СтрокаАналитики = ДобавитьСтрокуДерева(Функциональность,"ФиксированноеЗначение","Фиксированное значение");		
	
КонецПроцедуры

// Процедура добавляет перечень субконто для данного регистра. 
// Производится фильтрация по наличию субконто на счете.
// 
// Параметры: 
// 	СтрокаВерх         	 -	СтрокаДереваЗначений.
// 	МетаданныеРегистра 	 -	ОбъектМетаданных.
// 	СчетКонтроля       	 -	ПланСчетовСсылка.
// 
&НаСервере
Процедура ДобавитьСубконто(СтрокаВерх, МетаданныеРегистра, СчетКонтроля)

	ИмяПВХ = МетаданныеРегистра.ПланСчетов.ВидыСубконто.Имя;
	Если ЗначениеЗаполнено(СчетКонтроля) Тогда
		СвойстваСчета = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКонтроля);
		Для Индекс = 1 По СвойстваСчета.КоличествоСубконто Цикл
			СтрокаСубконто = ДобавитьСтрокуДерева(СтрокаВерх, 
				бит_МеханизмТрансляции.ПолучитьИмяСубконто(ИмяПВХ, СвойстваСчета["ВидСубконто" + Индекс]),
				СвойстваСчета["ВидСубконто" + Индекс + "Наименование"], 
				СвойстваСчета["ВидСубконто" + Индекс + "ТипЗначения"], Истина);
		КонецЦикла; 
	Иначе	
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВидыСубконто.Ссылка КАК Ссылка,
		|	ВидыСубконто.Наименование КАК Наименование,
		|	ВидыСубконто.ТипЗначения КАК ТипЗначения
		|ИЗ
		|	#Таблица КАК ВидыСубконто
		|ГДЕ
		|	НЕ ВидыСубконто.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
		ЧтоЗаменить   = "#Таблица";
		НаЧтоЗАменить = "ПланВидовХарактеристик." + ИмяПВХ;
		ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗАменить);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Результат 	 = Запрос.Выполнить();
		Выборка 	 = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаСубконто = ДобавитьСтрокуДерева(СтрокаВерх, 
				бит_МеханизмТрансляции.ПолучитьИмяСубконто(ИмяПВХ, Выборка.Ссылка),
				Выборка.Наименование, Выборка.ТипЗначения, Истина);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура добавляет в дерево подчиненные реквизиты.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений.
// 
&НаСервере
Процедура РазвернутьПодчиненные(вхПараметр)

	Если ТипЗнч(вхПараметр) = Тип("Число") Тогда
		ЭлементДерева = ДеревоУсловия.НайтиПоИдентификатору(вхПараметр);
	Иначе	
		ЭлементДерева = вхПараметр;
	КонецЕсли; 
	
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьОписаниеРеквизитов(ЭлементДерева, "Справочники"   ,Справочники.ТипВсеСсылки()    ,"СправочникСсылка");
	ДобавитьОписаниеДопРеквизитов(ЭлементДерева);
	
КонецПроцедуры

// Процедура добавляет описание дополнительных реквизитов. 
//
&НаСервере
Процедура ДобавитьОписаниеДопРеквизитов(СтрокаДерева)
	
	Если НЕ ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") 
		И НЕ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Возврат;
	КонецЕсли; 	
	
	флЭтоЭлементДерева = ?(ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева"), Истина, Ложь);
	Если флЭтоЭлементДерева Тогда
		Коллекция = СтрокаДерева.ПолучитьЭлементы();
	Иначе	
		Коллекция = СтрокаДерева.Строки;
	КонецЕсли; 
	
	// Удалим доп реквизиты и доп. свойства, если они уже есть.
	Индекс = Коллекция.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ТекЭлемент = Коллекция[Индекс];
		
		Если СтрНайти(ТекЭлемент.Имя, "ДополнительныйРеквизит_") > 0 
			ИЛИ СтрНайти(ТекЭлемент.Имя, "ДополнительноеСвойство_") > 0 Тогда
			
			Коллекция.Удалить(Индекс);
		КонецЕсли; 
		Индекс = Индекс - 1;
	КонецЦикла; 
	
	Для каждого Тип Из СтрокаДерева.Типы.Типы() Цикл
		
		МетаОбъект = Метаданные.НайтиПоТипу(Тип);
		Если МетаОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ОбщегоНазначения.ЭтоПеречисление(МетаОбъект) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданых = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаОбъект);
		Если ЗначениеЗаполнено(ОбъектМетаданых) Тогда
			ИмяНабора = СтрЗаменить(ОбъектМетаданых.ПолноеИмя, ".", "_");
		Иначе
			ИмяНабора = "";
		КонецЕсли; 
		
		Попытка
			НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяНабора];
		Исключение
			НаборСсылка = Неопределено;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(НаборСсылка) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НаборСсылка", НаборСсылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТабДопРеквизиты.Свойство КАК Свойство,
			|	ТабДопРеквизиты.Свойство.Наименование КАК Наименование,
			|	ТабДопРеквизиты.Свойство.ТипЗначения КАК ТипЗначения,
			|	""ДополнительныйРеквизит"" КАК ВидПоля
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТабДопРеквизиты
			|ГДЕ
			|	ТабДопРеквизиты.Ссылка = &НаборСсылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТабДопСведения.Свойство,
			|	ТабДопСведения.Свойство.Наименование,
			|	ТабДопСведения.Свойство.ТипЗначения,
			|	""ДополнительноеСвойство""
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ТабДопСведения
			|ГДЕ
			|	ТабДопСведения.Ссылка = &НаборСсылка";
			
			Результат = Запрос.Выполнить();
			Выборка   = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Имя = Выборка.ВидПоля+"_"+Выборка.Наименование; 
				ДобавитьСтрокуДерева(СтрокаДерева, Имя, Имя, Выборка.ТипЗначения, Истина);
				
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // ДобавитьОписаниеДопРеквизитов()

// Процедура добавляет в дерево строки с описанием реквизитов объекта.
// 
// Параметры:
// 	СтрокаДерева       	 -	СтрокаДереваЗначений.
// 	ИмяКоллекции       	 -	Строка.
// 	ОписаниеКоллекции  	 -	ОписаниеТипов.
// 	НачалоИмениТипа    	 -	Строка.
// 
&НаСервере
Процедура ДобавитьОписаниеРеквизитов(СтрокаДерева,ИмяКоллекции,ОписаниеКоллекции,НачалоИмениТипа)

	Если НЕ ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") 
	   И НЕ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		Возврат;
	КонецЕсли; 
	
	флЭтоЭлементДерева = ?(ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева"), Истина, Ложь);
	Если флЭтоЭлементДерева Тогда
		Коллекция = СтрокаДерева.ПолучитьЭлементы();
	Иначе	
		Коллекция = СтрокаДерева.Строки;
	КонецЕсли; 
	
	Если ЕстьСтрокаКоллекции(Коллекция, "Имя", "СлужебнаяДляРазворота") Тогда
		Коллекция.Очистить();
	КонецЕсли; 
	
	Если Коллекция.Количество()>0 Тогда
		Возврат;
	КонецЕсли; 
	
	ОбщиеРеквизиты = Новый ТаблицаЗначений(); 
	ОбщиеРеквизиты.Колонки.Добавить("Имя");
	ОбщиеРеквизиты.Колонки.Добавить("Синоним");
	ОбщиеРеквизиты.Колонки.Добавить("Типы");
		
	Для каждого Тип Из СтрокаДерева.Типы.Типы() Цикл
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			
			МетаданныеСтроки = Метаданные.НайтиПоТипу(Тип);
			Для каждого Реквизит Из МетаданныеСтроки.СтандартныеРеквизиты Цикл
				Если Реквизит.Имя = "Ссылка" Тогда
					Продолжить;				
				КонецЕсли; 
				НоваяСтрока = ОбщиеРеквизиты.Добавить();
				НоваяСтрока.Имя = Реквизит.Имя;
				НоваяСтрока.Синоним = Реквизит.Представление();
				НоваяСтрока.Типы = Реквизит.Тип;
			КонецЦикла;
			
			Если ОбщегоНазначения.ЭтоПеречисление(МетаданныеСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого Реквизит Из МетаданныеСтроки.Реквизиты Цикл
				НоваяСтрока = ОбщиеРеквизиты.Добавить();
				НоваяСтрока.Имя = Реквизит.Имя;
				НоваяСтрока.Синоним = Реквизит.Представление();
				НоваяСтрока.Типы = Реквизит.Тип;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; // По массиву типов

	// Группируем общие рекизиты
	Имена = ОбщиеРеквизиты.Скопировать(,"Имя, Синоним");
	Имена.Свернуть("Имя, Синоним");
	Для каждого СтрокаТаблицы Из Имена Цикл
		ОбщийТип = Новый Массив();
		НайденныеСтроки = ОбщиеРеквизиты.НайтиСтроки(Новый Структура("Имя, Синоним", СтрокаТаблицы.Имя, СтрокаТаблицы.Синоним));
		Если НайденныеСтроки.Количество() > 1 Тогда
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Для каждого Тип Из НайденнаяСтрока.Типы.Типы() Цикл
					ОбщийТип.Добавить(Тип);
				КонецЦикла; 
			КонецЦикла; 
			ОписаниеТипов = Новый ОписаниеТипов(ОбщийТип);
		Иначе
			ОписаниеТипов = НайденныеСтроки[0].Типы;
		КонецЕсли;
		
		ДобавитьСтрокуДерева(СтрокаДерева, СтрокаТаблицы.Имя, СтрокаТаблицы.Синоним, ОписаниеТипов, Истина);
	КонецЦикла; 
	
	Если НЕ флЭтоЭлементДерева Тогда
		СтрокаДерева.Строки.Сортировать("Синоним");
	КонецЕсли; 

КонецПроцедуры

// Функция определяет наличие строки в коллекции с заданным значением поля.
// 
// Параметры:
//  Коллекция      - СтрокиДереваЗначений, ДанныеФормыКоллекцияЭлементовДерева. 
//  ИмяПоля        - Строка.
//  ЗначениеПоиска - Значение.
// 
// Возвращаемое значение:
//  флЕсть - Булево.
// 
&НаСервере
Функция ЕстьСтрокаКоллекции(Коллекция, ИмяПоля, ЗначениеПоиска)
	
	флЕсть = Ложь;
	
	Если ТипЗнч(Коллекция) = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
		Для каждого Эл Из Коллекция Цикл
			Если Эл[ИмяПоля] = ЗначениеПоиска Тогда
				флЕсть = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
	Иначе	
		
		// Коллекция строк обычного дерева
		Если НЕ Коллекция.Найти(ЗначениеПоиска, ИмяПоля) = Неопределено  Тогда
			флЕсть = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат флЕсть;
	
КонецФункции // ЕстьСтрокаКоллекции()

// Функция определяет картинку текущий строки дерева.
// 
// Параметры:
//  ТекущаяСтрока - СтрокаДереваЗначений.
// 
// Возвращаемое значение:
//  ТекКартинка - Картинка.
// 
&НаСервере
Функция ОпределитьКартинкуСтроки(ТекущаяСтрока)

	флЭтоЭлементДерева = ?(ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева"), Истина, Ложь);
	
	Если флЭтоЭлементДерева Тогда
		
		Родитель = ТекущаяСтрока.ПолучитьРодителя();
		
	Иначе	
		
		Родитель = ТекущаяСтрока.Родитель;
		
	КонецЕсли; 
	
	
	Если ТекущаяСтрока.Имя = "ЗаписьИсточник"
		ИЛИ ТекущаяСтрока.Имя = "ЗаписьПриемник" 		
		ИЛИ ТекущаяСтрока.Имя = "ТекущийОбъект" 
		ИЛИ ТекущаяСтрока.Имя = "ТекущаяВиза" 
		ИЛИ ТекущаяСтрока.Имя = "УстановленныеВизы"
		ИЛИ ТекущаяСтрока.Имя = "Прочее" 
		ИЛИ ТекущаяСтрока.Имя = "ОплатаЗаявки" 
		ИЛИ ТекущаяСтрока.Имя = "ПараметрыПроцесса" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_Реквизиты;
		
	ИначеЕсли ТекущаяСтрока.Имя = "Субконто" ИЛИ ТекущаяСтрока.Имя = "СубконтоКор" Тогда
		
		ТекКартинка = БиблиотекаКартинок.ПланВидовХарактеристик;
		
	ИначеЕсли ТекущаяСтрока.Имя = "Регистратор" Тогда
		
		ТекКартинка = БиблиотекаКартинок.ДокументОбъект;
		
	ИначеЕсли НЕ Родитель = Неопределено И Родитель.Имя = "Регистратор" Тогда			
		
		ТекКартинка = БиблиотекаКартинок.ДокументОбъект;
		
	ИначеЕсли НЕ Родитель = Неопределено И Родитель.Имя = "УстановленныеВизы" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;
		
	ИначеЕсли ТекущаяСтрока.Имя = "ТабЧастьСодержитЗначение" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;
		
    ИначеЕсли СтрНайти(ТекущаяСтрока.Имя, "ПозицияСодержитЗначение")>0 Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;
		
	ИначеЕсли ТекущаяСтрока.Имя = "СуммаПозиций" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;		
		
	ИначеЕсли ТекущаяСтрока.Имя = "ДоступнаРольИсполнителя" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;		
		
	ИначеЕсли ТекущаяСтрока.Имя = "СостояниеЗадачи" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;
		
	ИначеЕсли ТекущаяСтрока.Имя = "ЕстьКорректировкаКонтрольныхЗначений" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_казна_ПользовательскиеФункции;	
		
	ИначеЕсли ТекущаяСтрока.Имя = "ДополнительныеАналитики" Тогда
		
		ТекКартинка = БиблиотекаКартинок.РегистрСведенийЗапись;
		
	ИначеЕсли ТекущаяСтрока.Имя = "ФиксированноеЗначение" Тогда
		
		ТекКартинка = БиблиотекаКартинок.бит_мхо_ФиксированноеЗначение;
		
	Иначе
		
		ТекКартинка = БиблиотекаКартинок.бит_Реквизит;
		
	КонецЕсли; 

	Возврат ТекКартинка;
	
КонецФункции // ОпределитьКартинкуСтроки()

// Функция добавляет строку в дерево значений.
// 
// Параметры:
// 	СтрокаРодитель     	 -	СтрокаДереваЗначений.
// 	Имя                	 -	Строка.
// 	Синоним            	 -	Строка.
// 	ОписаниеТипов      	 -	ОписаниеТипов.
// 	ДобавитьПодчиненную	 -	Булево. 
// 
// Возвращаемое значение:
// 	СтрокаДерева      	 -	СтрокаДереваЗначений.
// 
&НаСервере
Функция ДобавитьСтрокуДерева(СтрокаРодитель, Имя, Синоним, ОписаниеТипов = Неопределено, 
			ДобавитьПодчиненную = Ложь, ПропускатьПриВыборе = Ложь)

	флЭтоЭлементДерева = ?(ТипЗнч(СтрокаРодитель) = Тип("ДанныеФормыЭлементДерева"), Истина, Ложь);
	Если флЭтоЭлементДерева Тогда
		Коллекция = СтрокаРодитель.ПолучитьЭлементы();
	Иначе	
		Коллекция = СтрокаРодитель.Строки;
	КонецЕсли; 
	
	СтрокаДерева = Коллекция.Добавить();
	СтрокаДерева.ИД       = Строка(Новый УникальныйИдентификатор());
	СтрокаДерева.Имя      = Имя;
	СтрокаДерева.Синоним  = Синоним;
	ТекОписаниеТипов      = ?(ОписаниеТипов = Неопределено,Новый ОписаниеТипов("Строка"),ОписаниеТипов);
	СтрокаДерева.Типы     = ТекОписаниеТипов;
    СтрокаДерева.Картинка = ОпределитьКартинкуСтроки(СтрокаДерева);
	СтрокаДерева.ПропускатьПриВыборе = ПропускатьПриВыборе;
	
	Если ДобавитьПодчиненную Тогда
		Для каждого Тип Из ТекОписаниеТипов.Типы() Цикл
			Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				Если ОбщегоНазначения.ЭтоПеречисление(Метаданные.НайтиПоТипу(Тип)) Тогда
					Продолжить;
				КонецЕсли; 
				Если флЭтоЭлементДерева Тогда
					НоваяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
				Иначе	
					НоваяСтрока = СтрокаДерева.Строки.Добавить();
				КонецЕсли;  
				
				НоваяСтрока.Имя = "СлужебнаяДляРазворота";
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Возврат СтрокаДерева;
	
КонецФункции // ДобавитьСтрокуДерева()

// Процедура устанавливает видимость/доступность элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	ЭтоВыражениеПользовательскогоУсловия = ?(Режим = "ПользовательскоеУсловие_Выражение",Истина,Ложь);
	ДоступностьПолейСравнения = НЕ ЭтоВыражениеПользовательскогоУсловия И НЕ ВыборВыражения; 
	
	Элементы.ВидСравнения.Доступность           = ДоступностьПолейСравнения;
	Элементы.ЗначениеФильтра.Доступность        = ДоступностьПолейСравнения ИЛИ ЭтоПравилаТрансляцииВыборВыражения;
	Элементы.ОбъединениеСПредыдущим.Доступность = ДоступностьПолейСравнения;
	
	Элементы.ПроверкаЗаполнения.Видимость     = НЕ ЭтоПравилаТрансляцииВыборВыражения;	
	Элементы.ВидСравнения.Видимость           = НЕ ЭтоПравилаТрансляцииВыборВыражения;
	Элементы.ОбъединениеСПредыдущим.Видимость = НЕ ЭтоПравилаТрансляцииВыборВыражения;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура проверяет по владельцу корректность выбранной дополнительной аналитики. 
// 
&НаСервереБезКонтекста
Процедура ПроверитьЗначениеВыбраннойАналитики(ЗначениеФильтра, Аналитика)
	
	Если ЗначениеЗаполнено(ЗначениеФильтра) И ЗначениеФильтра.Владелец <> Аналитика Тогда
		
		ЗначениеФильтра = ПредопределенноеЗначение("Справочник.бит_ДополнительныеЗначенияАналитик.ПустаяСсылка");
		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗначениеВыбраннойАналитики()

#КонецОбласти
