////////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполняем кэш значений.
	ЗаполнитьКэшЗначений(мКэшЗначений);
	// Заполняем Исключения виды операций
	ЗаполнитьИсключенияВидОперации(ИсключенияВидыОпераций);

	//ОК Калинин М. 2711112	
	
	//{ bit SVKushnirenko 02.12.2016 #Перенос кода SSenin (исправление ошибок перенесенного кода)
	//ИсходныйКод{
	//ДобавитьКолонку("Инициатор","Список.бит_БК_Инициатор");
	//}ИсходныйКод
	//Удален странный код создания второй колонки "Инициатор", который принят из обновленного релиза
	//} bit SVKushnirenko 02.12.2016 #Перенос кода SSenin  (исправление ошибок перенесенного кода) 
	
	//ДобавитьКоманду("ИзменитьОтбор","ИзменитьОтбор");
	//ДобавитьКнопку("ИзменитьОтбор","ИзменитьОтбор",Элементы.Список.КоманднаяПанель);	
	//ОК Калинин М. 
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-26 (#2989)
	Элементы.КнопкаРаскраситьПросроченные.Пометка = Истина;
	РасскраситьНаСервере(Истина);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-26 (#2989)
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-08-24 (#3432)
	Если ОК_ОбщегоНазначения.ТекущийИнициаторОЦР(ПараметрыСеанса.бит_БК_ТекущийИнициатор) Тогда 
		ОК_ОбщегоНазначения.ДобавитьКомандуФормы(Команды, "СформироватьОтчетПоБюджетуДляОЦР", НСтр("ru = 'Отчет по бюджету для ОЦР'"), "СформироватьОтчетПоБюджетуДляОЦР");
		ОК_ОбщегоНазначения.ВывестиКомандуНаФорму(ЭтаФорма, "СформироватьОтчетПоБюджетуДляОЦР", "СформироватьОтчетПоБюджетуДляОЦР", НСтр("ru = 'Отчет по бюджету для ОЦР'"), Элементы.Список.КоманднаяПанель,, Элементы.ОбновитьСписок);
	КонецЕсли;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-08-24 (#3432)	
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-09-29 (#3393)
	мДоступныхИнициаторов = Новый Массив;
	соотФД_ЦФОТекИнициатора = Документы.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.ПолучитьДоступныеИнициаторуЦФОДляКорректировки(,,мДоступныхИнициаторов);
	Если соотФД_ЦФОТекИнициатора.Количество()=0 Тогда 
		Элементы.ОК_КорректировкиКонтрольныхЗначенийИБюджета.Видимость   = Ложь;
		Элементы.ОК_КорректировкиКонтрольныхЗначенийИБюджета.Доступность = Ложь;		
	Иначе 
		Если мДоступныхИнициаторов.Найти(ПараметрыСеанса.бит_БК_ТекущийИнициатор) = Неопределено Тогда 
			мДоступныхИнициаторов.Добавить(ПараметрыСеанса.бит_БК_ТекущийИнициатор);
		КонецЕсли;
	КонецЕсли;     		
	ОК_СписокКорректировок.Параметры.УстановитьЗначениеПараметра("Инициаторы", мДоступныхИнициаторов);
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-09-29 (#3393)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-14 (#3788)
	Если ок_НачислениеАккруалов.НачислениеАккруаловДоступноДляИнициатора(ПараметрыСеанса.бит_БК_ТекущийИнициатор) Тогда
		Элементы.СтраницаЗаявкиИАккруалы.Видимость   = Истина;
		Элементы.СтраницаЗаявкиИАккруалы.Доступность = Истина;
	Иначе
		Элементы.СтраницаЗаявкиИАккруалы.Видимость   = Ложь;
		Элементы.СтраницаЗаявкиИАккруалы.Доступность = Ложь;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-14 (#3788)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-25 (#3969)
	МассивИнициаторовПоОтветственномуЗаОбработкуЗаписейКампании = ок_НачислениеАккруалов.ПолучитьМассивИнициаторовПоОтветственномуЗаОбработкуЗаписейКампании(ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	Если ок_НачислениеАккруалов.НачислениеАккруаловДоступноДляИнициатора(МассивИнициаторовПоОтветственномуЗаОбработкуЗаписейКампании) Тогда
		Элементы.СтраницаЗаявкиИАккруалыКонтроль.Видимость   = Истина;
		Элементы.СтраницаЗаявкиИАккруалыКонтроль.Доступность = Истина;
	Иначе
		Элементы.СтраницаЗаявкиИАккруалыКонтроль.Видимость   = Ложь;
		Элементы.СтраницаЗаявкиИАккруалыКонтроль.Доступность = Ложь;
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-25 (#3969)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-08 (#4242)
	РеквизитСписок = ЭтаФорма["ОК_ЗаявкиНаРасходованиеДС"];
	РеквизитСписок.Параметры.УстановитьЗначениеПараметра("Ответственный", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-08 (#4242)
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-08-24 (#3432)
&НаКлиенте
Процедура СформироватьОтчетПоБюджетуДляОЦР(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПривилегированныйРежим", Истина);  //Для отборов
	ОткрытьФорму("Отчет.ок_ОтчетДляОЦРПоБюджету.Форма.ФормаОтчета", ПараметрыФормы);
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-08-24 (#3432)


&НаСервере
Процедура ЗаполнитьКэшЗначений(КэшированныеЗначения)
	КэшированныеЗначения = Новый Структура;
	
	// Перечисления.
	КэшПеречисления = Новый Структура;
	КэшПеречисления.Вставить("бит_БК_ВидыОперацийФормаВводаБюджета", бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета));
	
	КэшированныеЗначения.Вставить("Перечисления", КэшПеречисления);
	КэшированныеЗначения.Вставить("ДоступнаРольGuest", РольДоступна("Guest"));

КонецПроцедуры

//ОК Калинин М. 27112012 Добавление подчиненных инициаторов 
&НаСервере
Процедура УстановитьПараметрСеансаТекущийИнициаторПодчиненные(КэшированныеЗначения)
	Запрос=новый Запрос("ВЫБРАТЬ
	                     |	бит_БК_Инициаторы.Ссылка
	                     |ИЗ
	                     |	Справочник.бит_БК_Инициаторы КАК бит_БК_Инициаторы
	                     |ГДЕ
	                     |	бит_БК_Инициаторы.Руководитель = &Руководитель");
						 
	Запрос.УстановитьПараметр("Руководитель",КэшированныеЗначения.Инициатор.ТекущийИнициатор.Наименование);
	Подчиненные=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КэшированныеЗначения.Вставить("Подчиненные",Подчиненные);	
КонецПроцедуры	
//ОК Калинин М.

&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
//Процедура УстановитьПараметрСеансаТекущийИнициатор(DomainName,КэшированныеЗначения)
Процедура УстановитьПараметрСеансаТекущийИнициатор(КэшированныеЗначения)
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	//определяем текущего инициатора, если не определим завершим работу
	КэшИнициатора = Новый Структура;

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
	//ПараметрыСеанса.бит_БК_ТекущийИнициатор = Справочники.бит_БК_Инициаторы.НайтиПоРеквизиту("DomainName",DomainName);
	СтандартныеПодсистемыВызовСервера.УстановитьПараметрСеансаТекущийИнициатор();
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	
	КэшИнициатора.Вставить("ПустойИнициатор", Справочники.бит_БК_Инициаторы.ПустаяСсылка());
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
	//КэшИнициатора.Вставить("DomainName",DomainName);
	КэшИнициатора.Вставить("DomainName", ПараметрыСеанса.бит_БК_ТекущийИнициатор.DomainName);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	КэшИнициатора.Вставить("ТекущийИнициатор", ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
	////ОК Калинин М. 130813
	//КэшИнициатора.Вставить("ИспользуемаяФорма", ПараметрыСеанса.бит_БК_ТекущийИнициатор.ИспользуемаяФорма);
	////ОК Калинин М. 
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)
	
	
	//СписокОтбораИнициатора = Новый СписокЗначений;
	//ТекИнициаторСписка = ПараметрыСеанса.бит_БК_ТекущийИнициатор;
	
	//Пока Истина Цикл
	//	ПодИнициатором = Справочники.бит_БК_Инициаторы.НайтиПоРеквизиту("Руководитель",ТекИнициаторСписка.Наименование);
	//	Если ПодИнициатором.Пустая() Тогда
	//		Прервать;
	//	КонецЕсли;
	//	
	//	Если СписокОтбораИнициатора.НайтиПоЗначению(ПодИнициатором) = Неопределено Тогда
	//		СписокОтбораИнициатора.Добавить(ПодИнициатором);
	//	Иначе 
	//		Прервать;
	//	КонецЕсли;
	//	
	//	ТекИнициаторСписка = ПодИнициатором;
	//КонецЦикла;
	
	//СписокОтбораИнициатора.Добавить(ПараметрыСеанса.бит_БК_ТекущийИнициатор);
	//КэшИнициатора.Вставить("СписокОтбораИнициатора",СписокОтбораИнициатора);
	
	КэшированныеЗначения.Вставить("Инициатор",КэшИнициатора);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-10-22 (#3926)
	////на клиенте
	//DomainName = ПолучитьДоменноеИмяПользователя();
	////на сервере
	//УстановитьПараметрСеансаТекущийИнициатор(DomainName, мКэшЗначений);
	УстановитьПараметрСеансаТекущийИнициатор(мКэшЗначений);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-10-22 (#3926)
	
	Если мКэшЗначений.Инициатор.ТекущийИнициатор = мКэшЗначений.Инициатор.ПустойИнициатор И мКэшЗначений.ДоступнаРольGuest Тогда	
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-11-03 (#3926)
		//ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), "Не удалось определить текущего инициатора по доменному имени " + мКэшЗначений.Инициатор.DomainName + Символы.ПС + "Работа системы будет завершена",5);
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), "Не удалось определить инициатора для текущего пользователя" + Символы.ПС + "Работа системы будет завершена",5);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-11-03 (#3926)
		Возврат;
	КонецЕсли;
	
	ПриОткрытииНаСервере();
	
	// BIT AMerkulov 30-03-2015 ++
	СписокОплат.Параметры.УстановитьЗначениеПараметра("Инициатор", мКэшЗначений.Инициатор.ТекущийИнициатор);
	СписокОплат.Параметры.УстановитьЗначениеПараметра("ИнициаторНаименование", Строка(мКэшЗначений.Инициатор.ТекущийИнициатор));  
	СписокОплат.Параметры.УстановитьЗначениеПараметра("ПоказыватьПодчиненных", Ложь);
	// BIT AMerkulov 30-03-2015 ++
	
	//СофтЛаб Начало 2019-04-16 #3284
	СписокОплат.Параметры.УстановитьЗначениеПараметра("ОтборПоПериметруДоступа", мКэшЗначений.ПоказатьОплатыПоПериметруДоступа);
	СписокОплат.Параметры.УстановитьЗначениеПараметра("ОтборПоИнициатору", 		 НЕ мКэшЗначений.ПоказатьОплатыПоПериметруДоступа);
	//СофтЛаб Конец 2019-04-16 #3284
	
	//{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//+Сенин С.В. 26.08.16 №2596
	СписокЗаказов.Параметры.УстановитьЗначениеПараметра("Инициатор", мКэшЗначений.Инициатор.ТекущийИнициатор);
	//+Сенин С.В. 26.08.16 №2596
	//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-08 (#3788)
	Если Элементы.СтраницаЗаявкиИАккруалы.Доступность Тогда
		
		ЗаписиКампании.Параметры.УстановитьЗначениеПараметра("Инициатор", мКэшЗначений.Инициатор.ТекущийИнициатор);
		
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-31 (#3823)
		//ПодключитьОбработчикОжидания("ОбновитьПоказателиЗаявкиИАккруалы", 20);
		ОбновитьПоказателиЗаявкиИАккруалыПриАктивномОкне();
		
		ПодключитьОбработчикОжидания("ОбновитьПоказателиЗаявкиИАккруалыПриАктивномОкне", 20);
		ПодключитьОбработчикОжидания("ОбновитьПоказателиЗаявкиИАккруалыВнеАктивногоОкна", 20*60);
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-31 (#3823)
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-08 (#3788)
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-23 (#3969)
	Если Элементы.СтраницаЗаявкиИАккруалыКонтроль.Доступность Тогда
		
		ЗаписиКампанииКонтроль.Параметры.УстановитьЗначениеПараметра("Инициатор", мКэшЗначений.Инициатор.ТекущийИнициатор);
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-23 (#3969)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
    
    ЗавершитьРаботуСистемы(Ложь);

КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	
	// + БИТ AMerkulov 2015-10-09	
	мКэшЗначений.Вставить("ПоказатьПоПериметру",ложь);
	// - БИТ AMerkulov 2015-10-09
	
	//СофтЛаб Начало 2019-04-16 #3284
	мКэшЗначений.Вставить("ПоказатьОплатыПоПериметруДоступа", Ложь);
	//СофтЛаб Конец 2019-04-16 #3284

	//ОК Калинин М. 2711112	
	мКэшЗначений.Вставить("ОтбиратьЗаявкиПодчиненных",ложь);	
	УстановитьПараметрСеансаТекущийИнициаторПодчиненные(мКэшЗначений);
	Если мКэшЗначений.Подчиненные.Количество()=0 тогда 		
		//СкрытьКнопку(ЭтаФорма.Элементы.ИзменитьОтбор);
	конецесли;	
	УстановитьЗаголовокУправляющейКнопахи();
	
	Список.УсловноеОформление.Элементы.Очистить();
	//ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();	
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст","Вы");
	//ЭлементОтбора = ЭлементОформления.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("бит_БК_Инициатор");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;    			
	//ЭлементОтбора.ПравоеЗначение = мКэшЗначений.Инициатор.ТекущийИнициатор; 
	//ЭлементОтбора.Использование = Истина;
  
	//ОК Калинин М.	
	
	УстановитьОтборСписка();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписка()
	
	// БИТ_YK_н 01/16 
	// Сначала зачистим отборы
	Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();   
	
	//отбор
	//по виду операции
	ЭлементОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидОперации");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;	
	СписокВидовОперации = Новый СписокЗначений;
	СписокВидовОперации.Добавить(мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный);
	СписокВидовОперации.Добавить(мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный);
	СписокВидовОперации.Добавить(мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный);

	// BIT AMerkulov 23122014 ++
	СписокВидовОперации.Добавить(мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт);
	// BIT AMerkulov 23122014 --
	
	ЭлементОтбора.ПравоеЗначение = СписокВидовОперации;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Попытка
		ДоступныйЭлементОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("ВидОперации");
		ДоступныйЭлементОтбора.ДоступныеЗначения = СписокВидовОперации;
		ДоступныйЭлементОтбора.Элементы[0].ДоступныеЗначения = СписокВидовОперации;
	Исключение
	КонецПопытки;
	
	ЭлементОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("бит_БК_Инициатор");
	//ОК Калинин М. 27112012
	Если  мКэшЗначений.ОтбиратьЗаявкиПодчиненных тогда
		СписЗнач_=Новый СписокЗначений();
		СписЗнач_.ЗагрузитьЗначения(мКэшЗначений.Подчиненные);
		ВидимыеИнициаторы= СписЗнач_.ВыгрузитьЗначения();
		ВидимыеИнициаторы.Добавить(мКэшЗначений.Инициатор.ТекущийИнициатор);		
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = ВидимыеИнициаторы;
		//{ bit SVKushnirenko 05.12.2016 #Перенос кода SSenin
		//ИсходныйКод{
		//ЭтаФОрма.Элементы.Инициатор.Видимость=истина;    		
		//}ИсходныйКод
		
		//} bit SVKushnirenko 05.12.2016 #Перенос кода SSenin
		
		ЭлементГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ЭлементГруппировки.Использование = Истина;
		ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("бит_БК_Инициатор");  
	иначе	
		//{ bit SVKushnirenko 05.12.2016 #Перенос кода SSenin
		//ИсходныйКод{
		//ЭтаФОрма.Элементы.Инициатор.Видимость=ложь;
		//}ИсходныйКод
		
		//} bit SVKushnirenko 05.12.2016 #Перенос кода SSenin
		
		Список.Группировка.Элементы.Очистить();
		//ОК Калинин М. 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;    			
		ЭлементОтбора.ПравоеЗначение = мКэшЗначений.Инициатор.ТекущийИнициатор; 
	конецесли;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Представление  = "Инициаторов отбор";
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-05-13 (#4117)
	Согласование.Параметры.УстановитьЗначениеПараметра("Пользователь", бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-05-13 (#4117) 
	
	Согласование.Параметры.УстановитьЗначениеПараметра("Инициатор", мКэшЗначений.Инициатор.ТекущийИнициатор);
	// БИТ_YK_к
	//+СБ Пискунова 03.03.2017 #2691
	Согласование.Параметры.УстановитьЗначениеПараметра("ДатаДок", ТекущаяДата());
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2017-09-15 (#2873)
	//СБ_ДелегированиеСписок.Параметры.УстановитьЗначениеПараметра("ДатаДок", ТекущаяДата());
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2017-09-15 (#2873)
	СБ_ДелегированиеСписок.Параметры.УстановитьЗначениеПараметра("Заместитель", ПараметрыСеанса.ТекущийПользователь);
	//-СБ Пискунова 03.03.2017 #2691

КонецПроцедуры

&НаКлиенте
Функция ПолучитьДоменноеИмяПользователя()
	oNet = Новый COMОбъект("WScript.Network");
	DomainName = СокрЛП(""+oNet.UserDomain+"\"+oNet.UserName);
    Возврат DomainName;
КонецФункции

&НаСервере
Процедура ЗаполнитьИсключенияВидОперации(Исключения)
	Исключения = Новый Структура;
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.ФинансовыйПлан);
	// BIT Amerkulov 23122014 ++
	//МассивИсключений.Добавить(Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт);
	// BIT Amerkulov 23122014 --
	Исключения.Вставить("ВидыОперацийБК",МассивИсключений);
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоВидовОперацийДляЗаявки(ОбъектЗаполнения
												,Исключения 	= Неопределено
												,ВеткиДляВывода = "все") Экспорт

	Если ТипЗнч(Исключения) <> Тип("Структура") Тогда
		Исключения = Новый Структура;
	КонецЕсли;
	
	ДеревоВидовОперацийИсточник = Новый ДеревоЗначений;
	
	ДеревоВидовОперацийИсточник.Колонки.Добавить("ВидОперации");
	ДобавитьВеткуДереваВидыОпераций(ДеревоВидовОперацийИсточник
										,"Виды операций БК"
									   ,ОбъектЗаполнения
									  ,Исключения["ВидыОперацийБК"]
									);
		
	ЗначениеВРеквизитФормы(ДеревоВидовОперацийИсточник, "ДеревоВидовОпераций");
	
КонецПроцедуры // СформироватьДеревоВидовОперацийДляЗаявки()
&НаСервереБезКонтекста 
Процедура ДобавитьВеткуДереваВидыОпераций(ДеревоВидыОпераций									
										 ,ВидОперацииГруппа
										 ,ОбъектЗаполнения
										 ,МассивИсключений
										)

	Если Не ТипЗнч(МассивИсключений) = Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли; 
		
	// Добавляем строку верхнего уровня.
	СтрокаГруппа = ДеревоВидыОпераций.Строки.Добавить();
	СтрокаГруппа.ВидОперации = ВидОперацииГруппа;

	Для Каждого КлючЗначение Из ОбъектЗаполнения Цикл
		
		ЗначениеПеречисления = КлючЗначение.Значение;
		
		//Если Не СоответствиеКонтроль[ЗначениеПеречисления] = Неопределено Тогда
			
			Если МассивИсключений.Найти(ЗначениеПеречисления) = Неопределено Тогда
				
				 НоваяСтрока = СтрокаГруппа.Строки.Добавить();
				 НоваяСтрока.ВидОперации = ЗначениеПеречисления;
				
			КонецЕсли;
			
		//КонецЕсли; 
		
	КонецЦикла; // по объектам заполнения

КонецПроцедуры // ДобавитьВеткуДереваВидыОпераций()

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
   // ПараметрыФормы.Вставить("СтруктураПараметров", Новый Структура);
	
	Если Копирование Тогда 		
		СтруктураПараметров = Новый Структура;
	иначе
		
		СформироватьДеревоВидовОперацийДляЗаявки(мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета,ИсключенияВидыОпераций);			
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
		//// + БИТ AMerkulov 2014-01-28 /  Универсальная заявка
		//Если ФормаИнициатора(мКэшЗначений.Инициатор.ИспользуемаяФорма) = "ФормаЗаявкаНаОперационныеРасходы" Тогда
		//	
		//	СтруктураПараметров = Новый Структура;
		//
		//	СтруктураПараметров.Вставить("ВидОперации", мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный);
		//	ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный;
		//	
		//Иначе
		//
		//	Оповещение = Новый ОписаниеОповещения("СписокПередНачаломДобавленияЗавершение", ЭтотОбъект, Ложь); 
		//	
		//	ПараметрыФормы = Новый Структура;
		//	ПараметрыФормы.Вставить("СсылкаДокумента"    , ПустойОбъект);
		//	ПараметрыФормы.Вставить("ДеревоВидовОпераций", ДеревоВидовОпераций);
		//	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораВидаОперацииИзДереваУправляемая", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		//	Возврат;
		//	
		//КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("ВидОперации", мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный);
		ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный;
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)
		
	КонецЕсли;	
	
	СписокПередНачаломДобавленияЗавершение(СтруктураПараметров, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавленияЗавершение(СтруктураПараметров, Копирование) Экспорт 
	
	Если СтруктураПараметров = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.Список.ТекущаяСтрока);
		ВидОперации = Элементы.Список.ТекущиеДанные.ВидОперации;
	Иначе
		// - БИТ AMerkulov  /  Универсальная заявка
		ВидОперации = СтруктураПараметров.ВидОперации;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СтруктураПараметров", СтруктураПараметров);

	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
	//// + БИТ AMerkulov 2014-01-24 /  Универсальная заявка
	//
	//ФормаИнициатора = ФормаИнициатора(мКэшЗначений.Инициатор.ИспользуемаяФорма);
	//
	//Если ФормаИнициатора = "ФормаЗаявкаНаОперационныеРасходы" Тогда
	//	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
	//Иначе		
	//	Если ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
	//		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаДокументаУправляемаяИнвест", ПараметрыФормы);
	//	ИначеЕсли ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
	//		ИЛИ   ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный	Тогда
	//		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаДокументаУправляемаяGuest", ПараметрыФормы);
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// - БИТ AMerkulov  /  Универсальная заявка
	
	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока);	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
	//// + БИТ AMerkulov 2014-12-24 
	//
	//ФормаИнициатора = ФормаИнициатора(мКэшЗначений.Инициатор.ИспользуемаяФорма);
	//
	//
	//Если Элементы.Список.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
	//	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаКонтрактУправляемая", ПараметрыФормы);		
	//Иначе				
	//	Если ФормаИнициатора = "ФормаЗаявкаНаОперационныеРасходы" Тогда
	//		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
	//	Иначе		
	//		Если Элементы.Список.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
	//			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаДокументаУправляемаяИнвест", ПараметрыФормы);
	//		ИначеЕсли Элементы.Список.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
	//			ИЛИ  Элементы.Список.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный	Тогда
	//			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаДокументаУправляемаяGuest", ПараметрыФормы);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//// - БИТ AMerkulov 
	
	Если Элементы.Список.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаКонтрактУправляемая", ПараметрыФормы);		
	Иначе				
		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)
	
КонецПроцедуры

//ОК Калинин М. 27112012
&НаСервере
Процедура ДобавитьКнопку(имя,ИмяКоманды,Место)
	НоваяКнопка = Элементы.Добавить(имя, Тип("КнопкаФормы"),Место);
   	НоваяКнопка.ИмяКоманды = ИмяКоманды;
   	НоваяКнопка.Заголовок = имя;		
КонецПроцедуры

&НаСервере
Процедура ДобавитьКоманду(ИмяКоманды,Действие)
	КомандаФормы  = Команды.Добавить(ИмяКоманды);
    КомандаФормы.Действие =Действие;	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонку(Адрес,ПутьКДанным)
	НовыйЭлемент = Элементы.Добавить(Адрес,Тип("ПолеФормы"),Элементы.Список); 
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
	НовыйЭлемент.ПутьКДанным = ПутьКДанным; 
	НовыйЭлемент.ТолькоПросмотр = Истина; 		
КонецПроцедуры

&НаКлиенте
Процедура СкрытьКнопку(Кнопка)
	Кнопка.Видимость=ложь;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокУправляющейКнопахи()
	Этаформа.Элементы.ИзменитьОтбор.Заголовок=?(мКэшЗначений.ОтбиратьЗаявкиПодчиненных,"Скрыть заявки подчиненных","Показать заявки подчиненных");	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
//&НаКлиенте
//Функция ФормаИнициатора(ИспользуемаяФорма)
//	возврат  ?(ИспользуемаяФорма=0,"ФормаДокументаУправляемаяGuest","ФормаЗаявкаНаОперационныеРасходы");
//КонецФункции
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)
//ОК Калинин М. 

&НаКлиенте
Процедура СписокЗаказаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказов1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтбор(Команда) 
	мКэшЗначений.ОтбиратьЗаявкиПодчиненных=не мКэшЗначений.ОтбиратьЗаявкиПодчиненных;
	ИзменитьОтборНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтборНаСервере() 
	УстановитьОтборСписка(); 
	УстановитьЗаголовокУправляющейКнопахи(); 
КонецПроцедуры

// + БИТ AMerkulov 2014-09-10 /  Универсальная заявка
&НаКлиенте
Процедура СогласованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры
// - БИТ AMerkulov 2014-09-10 /  Универсальная заявка

// + БИТ AMerkulov 2015-03-11 
&НаКлиенте
Процедура СогласованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2019-10-15 (#3393)
	//ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока);	
	//Заменено на:
	ТекДанные = Элементы.Согласование.ТекущиеДанные;
	Если ТекДанные = Неопределено 
	 ИЛИ Не ЗначениеЗаполнено(ТекДанные.Ссылка)
	Тогда 
	 	Возврат;
	КонецЕсли;
		
	ПараметрыФормы.Вставить("Ключ", ТекДанные.Ссылка);	
	
	Если ТипЗнч(ТекДанные.Ссылка) = Тип("ДокументСсылка.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета") Тогда 
		ПараметрыФормы.Вставить("РежимСогласования", НЕ ЗначениеЗаполнено(ТекДанные.ДатаСогласования));		
		ПараметрыФормы.Вставить("УстановитьПривилегированныйРежим", Истина);		
		ОткрытьФорму("Документ.бит_БК_КорректировкаКонтрольныхЗначенийИБюджета.Форма.ФормаДокументаПоВидам", ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2019-10-15 (#3393)
	
	
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-05-18 (#3750)
	//ФормаИнициатора = ФормаИнициатора(мКэшЗначений.Инициатор.ИспользуемаяФорма);
	//
	//
	//Если Элементы.Согласование.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
	//	ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаКонтрактУправляемая", ПараметрыФормы);		
	//Иначе				
	//	Если ФормаИнициатора = "ФормаЗаявкаНаОперационныеРасходы" Тогда
	//		ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
	//	Иначе		
	//		Если Элементы.Согласование.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Инвестиционный Тогда
	//			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаДокументаУправляемаяИнвест", ПараметрыФормы);
	//		ИначеЕсли Элементы.Согласование.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Операционный 
	//			ИЛИ  Элементы.Согласование.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Заявка_Универсальный	Тогда
	//			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаДокументаУправляемаяGuest", ПараметрыФормы);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-20 (#3997)
	Если ТипЗнч(ТекДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ок_ФормаПросмотраВходящегоДокумента", ПараметрыФормы);	
	ИначеЕсли ТипЗнч(ТекДанные.Ссылка) = Тип("ДокументСсылка.бит_ФормаВводаБюджета") Тогда
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-20 (#3997)
		Если Элементы.Согласование.ТекущиеДанные.ВидОперации = мКэшЗначений.Перечисления.бит_БК_ВидыОперацийФормаВводаБюджета.Контракт Тогда
			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаКонтрактУправляемая", ПараметрыФормы);		
		Иначе				
			ОткрытьФорму("Документ.бит_ФормаВводаБюджета.Форма.ФормаЗаявкаНаОперационныеРасходы", ПараметрыФормы);
		КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-05-18 (#3750)
    //ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-01-20 (#3997)
	КонецЕсли;
	//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-01-20 (#3997)
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ПериодСпискаОплат;
	Диалог.Показать(Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    //ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-03-23 (#4015)
	//Диалог = ДополнительныеПараметры.Диалог;
	//
	//Если Период<>Неопределено Тогда 
	//    ПериодСпискаОплат = Диалог.Период;
	//    
	//    //{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//	//=ИСХОДНЫЙ КОД
	//	ЭлементОтбора1 = СписокОплат.КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	//	//=ИСХОДНЫЙ КОД
	//	
	//	//+Сенин С.В. 02.11.16 №2596
	//    //ЭлементОтбора1 = СписокОплат.КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	//    //ЭлементОтбора1 = СписокОплат.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0];
	//	//-Сенин С.В. 02.11.16 №2596
	//	//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//	
	//    ЭлементОтбора1.ПравоеЗначение = ПериодСпискаОплат.ДатаНачала;
	//    ЭлементОтбора1.Использование = Истина;
	//    
	//    Если НЕ ЗначениеЗаполнено(ПериодСпискаОплат.ДатаОкончания) Тогда
	//        //{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin (изменение не помечено разработчиком!)
	//		//ИсходныйКод{
	//		СписокОплат.КомпоновщикНастроек.Настройки.Отбор.Элементы[1].Использование = Ложь;
	//		//}ИсходныйКод
	//		
	//		//СписокОплат.КомпоновщикНастроек.Настройки.Отбор.Элементы[1].Использование = Ложь;
	//     	//СписокОплат.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[1] = Ложь;
	//		//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin (изменение не помечено разработчиком!)
	//		
	//    Иначе
	//        //{ bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//		//ИсходныйКод{
	//		ЭлементОтбора2 = СписокОплат.КомпоновщикНастроек.Настройки.Отбор.Элементы[1];
	//		//}ИсходныйКод
	//		
	//		//+Сенин С.В. 02.11.16 №2596
	//        //ЭлементОтбора2 = СписокОплат.КомпоновщикНастроек.Настройки.Отбор.Элементы[1];
	//     	//ЭлементОтбора2 = СписокОплат.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[1];
	//		//-Сенин С.В. 02.11.16 №2596
	//		//} bit SVKushnirenko 01.12.2016 #Перенос кода SSenin
	//		
	//        ЭлементОтбора2.ПравоеЗначение = ПериодСпискаОплат.ДатаОкончания;
	//        ЭлементОтбора2.Использование = Истина;			
	//    КонецЕсли;
	//    
	//КонецЕсли;
	
	пкдДатаПП = Новый ПолеКомпоновкиДанных("ДатаПП");
	
	МассивКУдалению = Новый Массив;
	Для Каждого ЭлементОтбора Из СписокОплат.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = пкдДатаПП Тогда
			МассивКУдалению.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементКУдалению Из МассивКУдалению Цикл
		СписокОплат.Отбор.Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла; 
	
	МассивКУдалению.Очистить();
	Для Каждого ЭлементОтбора Из СписокОплат.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = пкдДатаПП Тогда
			МассивКУдалению.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементКУдалению Из МассивКУдалению Цикл
		СписокОплат.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла; 
	
    Если Период <> Неопределено Тогда 
		
		Диалог = ДополнительныеПараметры.Диалог;
		ПериодСпискаОплат = Диалог.Период;
		
		Если ЗначениеЗаполнено(ПериодСпискаОплат.ДатаНачала) Тогда
		
			ЭлементОтбора = СписокОплат.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование 	= Истина;
			ЭлементОтбора.ЛевоеЗначение 	= пкдДатаПП;
			ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение 	= НачалоДня(ПериодСпискаОплат.ДатаНачала);
			ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ПериодСпискаОплат.ДатаОкончания) Тогда
		
			ЭлементОтбора = СписокОплат.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование 	= Истина;
			ЭлементОтбора.ЛевоеЗначение 	= пкдДатаПП;
			ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение 	= КонецДня(ПериодСпискаОплат.ДатаОкончания);
			ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		КонецЕсли;
		
	КонецЕсли;
	//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-03-23 (#4015)

КонецПроцедуры
// - БИТ AMerkulov 

// + БИТ AMerkulov 2015-03-30 
&НаКлиенте
Процедура ПоказатьПодчиненныхПоОплате(Команда)
	
	мПоказыватьПодчиненных = НЕ мПоказыватьПодчиненных;
	СписокОплат.Параметры.УстановитьЗначениеПараметра("ПоказыватьПодчиненных", мПоказыватьПодчиненных);
	Этаформа.Элементы.СписокОплат1ПоказатьПодчиненныхПоОплате.Заголовок=?(мПоказыватьПодчиненных,"Скрыть данные подчиненных","Показать данные подчиненных");	
	
КонецПроцедуры

// - БИТ AMerkulov 2015-03-30 

// + БИТ AMerkulov 2015-05-12
&НаКлиенте
Процедура ПоказатьПоПериметру(Команда)

	мКэшЗначений.ПоказатьПоПериметру = не мКэшЗначений.ПоказатьПоПериметру;
	УстановитьПоПериметру(); 	
	УстановитьЗаголовокКнопкиОтбораПоПериметру();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоПериметру()
	
	// БИТ_YK_н 01/16
	// Очистить отборы
	Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Инициаторов отбор" ИЛИ ЭлементОтбора.Представление = "Отбор по периметру" Тогда

			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Элемент.Представление = "Инициаторов отбор"  Тогда

			Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	// Установить отборы	
	Если  мКэшЗначений.ПоказатьПоПериметру тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = ПолучитьСписокДоступныхЗаявок(); 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Представление  = "Отбор по периметру";
	Иначе
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("бит_БК_Инициатор");
		
		
		//{ bit_SVKushnirenko 09.02.2017 #2671
		//ИсходныйКод{
		//ЭтаФорма.Элементы.Инициатор.Видимость=ложь;
		//}ИсходныйКод
		//Отключен код, который вызывал исключение (колонка отсутствует в списке)
		//} bit_SVKushnirenko 09.02.2017 #2671
		
		Список.Группировка.Элементы.Очистить();
		ЭлементОтбора.Использование = Истина;  
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.ПравоеЗначение = мКэшЗначений.Инициатор.ТекущийИнициатор; 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Представление  = "Инициаторов отбор";		
	КонецЕсли;
	// БИТ_YK_к
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхЗаявок()
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	бит_ОтветственныеПоФункциональнымПериметрамСрезПоследних.ФункциональныйПериметр
	                      |ПОМЕСТИТЬ ВТ_ДоступныеПериметры
	                      |ИЗ
	                      |	РегистрСведений.бит_ОтветственныеПоФункциональнымПериметрам.СрезПоследних КАК бит_ОтветственныеПоФункциональнымПериметрамСрезПоследних
	                      |ГДЕ
	                      |	бит_ОтветственныеПоФункциональнымПериметрамСрезПоследних.Инициатор = &Инициатор
	                      |	И бит_ОтветственныеПоФункциональнымПериметрамСрезПоследних.Активно
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	бит_ОтветственныеПоФункциональнымПериметрамСрезПоследних.ФункциональныйПериметр
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	бит_ФормаВводаБюджетаБДДС.Ссылка КАК Ссылка,
	                      |	МАКСИМУМ(бит_ФормаВводаБюджетаБДДС_ВсеСтроки.НомерСтроки) КАК НомерСтроки
	                      |ПОМЕСТИТЬ ВТ_СписокЗаявок
	                      |ИЗ
	                      |	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_МатрицаДоступаПоФункциональнымПериметрам КАК бит_МатрицаДоступаПоФункциональнымПериметрам
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеПериметры КАК ВТ_ДоступныеПериметры
	                      |			ПО (ВТ_ДоступныеПериметры.ФункциональныйПериметр = бит_МатрицаДоступаПоФункциональнымПериметрам.ФункциональныйПериметр)
	                      |		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = бит_МатрицаДоступаПоФункциональнымПериметрам.Объект
	                      |			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = бит_МатрицаДоступаПоФункциональнымПериметрам.СтатьяОборотов
	                      |			И бит_ФормаВводаБюджетаБДДС.ЦФО = бит_МатрицаДоступаПоФункциональнымПериметрам.ЦФО
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС_ВсеСтроки
	                      |		ПО бит_ФормаВводаБюджетаБДДС.Ссылка = бит_ФормаВводаБюджетаБДДС_ВсеСтроки.Ссылка
	                      |ГДЕ
	                      |	ЕСТЬNULL(ВТ_ДоступныеПериметры.ФункциональныйПериметр, 0) <> 0
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	бит_ФормаВводаБюджетаБДДС.Ссылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	бит_ФормаВводаБюджетаБДДС.Ссылка КАК Ссылка,
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ бит_ФормаВводаБюджетаБДДС.НомерСтроки) КАК НомерСтроки,
	                      |	бит_МатрицаДоступаПоФункциональнымПериметрам.ФункциональныйПериметр
	                      |ПОМЕСТИТЬ ВТ_КоличестваПоПериметрам
	                      |ИЗ
	                      |	Документ.бит_ФормаВводаБюджета.БДДС КАК бит_ФормаВводаБюджетаБДДС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_МатрицаДоступаПоФункциональнымПериметрам КАК бит_МатрицаДоступаПоФункциональнымПериметрам
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеПериметры КАК ВТ_ДоступныеПериметры
	                      |			ПО (ВТ_ДоступныеПериметры.ФункциональныйПериметр = бит_МатрицаДоступаПоФункциональнымПериметрам.ФункциональныйПериметр)
	                      |		ПО бит_ФормаВводаБюджетаБДДС.Аналитика_2 = бит_МатрицаДоступаПоФункциональнымПериметрам.Объект
	                      |			И бит_ФормаВводаБюджетаБДДС.СтатьяОборотов = бит_МатрицаДоступаПоФункциональнымПериметрам.СтатьяОборотов
	                      |			И бит_ФормаВводаБюджетаБДДС.ЦФО = бит_МатрицаДоступаПоФункциональнымПериметрам.ЦФО
	                      |ГДЕ
	                      |	ЕСТЬNULL(ВТ_ДоступныеПериметры.ФункциональныйПериметр, 0) <> 0
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	бит_ФормаВводаБюджетаБДДС.Ссылка,
	                      |	бит_МатрицаДоступаПоФункциональнымПериметрам.ФункциональныйПериметр
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_СписокЗаявок.Ссылка,
	                      |	ВТ_КоличестваПоПериметрам.НомерСтроки,
	                      |	ВТ_СписокЗаявок.НомерСтроки КАК НомерСтроки1
	                      |ИЗ
	                      |	ВТ_СписокЗаявок КАК ВТ_СписокЗаявок
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличестваПоПериметрам КАК ВТ_КоличестваПоПериметрам
	                      |		ПО ВТ_СписокЗаявок.Ссылка = ВТ_КоличестваПоПериметрам.Ссылка
	                      |ГДЕ
	                      |	ВТ_КоличестваПоПериметрам.НомерСтроки = ВТ_СписокЗаявок.НомерСтроки");
						  
	Запрос.УстановитьПараметр("Инициатор", мКэшЗначений.Инициатор.ТекущийИнициатор);
	СписокЗаявок = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл	
			СписокЗаявок.Добавить(Выборка.Ссылка);
	КонецЦикла;
		
	Возврат СписокЗаявок;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗаголовокКнопкиОтбораПоПериметру()
	Этаформа.Элементы.СписокПоказатьПоПериметру.Заголовок=?(мКэшЗначений.ПоказатьПоПериметру,"Скрыть заявки по периметру доступа","Показать заявки по периметру доступа");	
КонецПроцедуры
// - БИТ AMerkulov 2015-05-12

//СофтЛаб Начало 2019-04-16 #3284
&НаКлиенте
Процедура ПоказатьОплатыПоПериметруДоступа(Команда)
	
	мКэшЗначений.ПоказатьОплатыПоПериметруДоступа = НЕ мКэшЗначений.ПоказатьОплатыПоПериметруДоступа;
	
	СписокОплат.Параметры.УстановитьЗначениеПараметра("ОтборПоПериметруДоступа", мКэшЗначений.ПоказатьОплатыПоПериметруДоступа);
	СписокОплат.Параметры.УстановитьЗначениеПараметра("ОтборПоИнициатору", 		 НЕ мКэшЗначений.ПоказатьОплатыПоПериметруДоступа);
	
	Этаформа.Элементы.СписокОплат1ПоказатьОплатыПоПериметруДоступа.Заголовок = 
			?(мКэшЗначений.ПоказатьОплатыПоПериметруДоступа, "Скрыть оплаты по периметру доступа", "Показать оплаты по периметру доступа");
	
КонецПроцедуры
//СофтЛаб Конец 2019-04-16 #3284

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//{ bit SVKushnirenko Bit 01.02.2017 #2657
	Если ИмяСобытия = "бит_БК_ИзмСтатусаПослеИзмБалансаЗаявок" Тогда //Обновление статусов на списках если это возможно
		
		Элементы.Список.Обновить();
		Элементы.Согласование.Обновить();
	КонецЕсли; 
	//} bit SVKushnirenko Bit 01.02.2017 #2657
КонецПроцедуры

//{ bit SVKushnirenko Bit 09.02.2017 #2657
//Запрет открытия документов
&НаКлиенте
Процедура СписокОплат1ПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
КонецПроцедуры
//} bit SVKushnirenko Bit 09.02.2017 #2657

&НаКлиенте
Процедура СБ_СоздатьЗаписи(Команда)
	
	ПараметрыФормыЗам = Новый Структура;
	ПараметрыФормыЗам.Вставить("Пользователь", мКэшЗначений.Инициатор.ТекущийИнициатор);
	Форма = ПолучитьФорму("Обработка.СБ_СозданиеНазначенныхЗаместителей.Форма.Форма", ПараметрыФормыЗам, ЭтаФорма);
	Форма.открыть();
	
	Элементы.СБ_ДелегированиеСписок.Обновить();
	
КонецПроцедуры

//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2018-02-20 (#2989)
&НаКлиенте
Процедура ок_ПоказатьОжидающиеСогласования(Команда)
	
	пПометка = НЕ Элементы.КнопкаПоказатьОжидающиеСогласования.Пометка;
	Элементы.КнопкаПоказатьОжидающиеСогласования.Пометка = пПометка;
	Элементы.КнопкаПоказатьОжидающиеСогласования.Заголовок = ?(пПометка, "Показать все", "Показать ожидающие согласования");
	
	пЕстьОтбор = Ложь;
	
	Для Каждого пЭлОтбора Из Согласование.Отбор.Элементы Цикл 
		Если пЭлОтбора.Представление = "ОжидающиеСогласования" Тогда 
			пЕстьОтбор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не пЕстьОтбор Тогда 
		Если Не пПометка Тогда 
			Возврат;
		КонецЕсли;
		
		пЭлОтбора = Согласование.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		пЭлОтбора.Представление = "ОжидающиеСогласования";
		пЭлОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-06-05 (#3777)
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование = Истина;
		//пЭлГрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСогласования");
		//пЭлГрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		//
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование  = Истина;
		//пЭлГрОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Согласовано");
		//пЭлГрОтбора.ПравоеЗначение = Ложь;
		//
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование = Истина;
		//пЭлГрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаКрайняя");
		//пЭлГрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		//
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование  = Истина;
		//пЭлГрОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтмененнаяЗаявка");
		//пЭлГрОтбора.ПравоеЗначение = Ложь;
		//
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование  = Истина;
		//пЭлГрОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
		//пЭлГрОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании");
		//Заменено на:
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "ДатаСогласования",,ВидСравненияКомпоновкиДанных.НеЗаполнено, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "Согласовано",Ложь,ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "ДатаКрайняя",,ВидСравненияКомпоновкиДанных.Заполнено, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "ОтмененнаяЗаявка",Ложь,ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		мСтатусов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании"));
		мСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_НаСогласовании"));
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997)
		мСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование"));
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997)
		спСтатусов = Новый СписокЗначений;
		спСтатусов.ЗагрузитьЗначения(мСтатусов);
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "Статус",спСтатусов, ВидСравненияКомпоновкиДанных.ВСписке, Истина);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-06-05 (#3777)
				
	КонецЕсли;
	
	пЭлОтбора.Использование = пПометка;
				
КонецПроцедуры

&НаКлиенте
Процедура ок_РаскраситьПросроченные(Команда)
	
	пПометка = НЕ Элементы.КнопкаРаскраситьПросроченные.Пометка;
	Элементы.КнопкаРаскраситьПросроченные.Пометка = пПометка;
	РасскраситьНаСервере(пПометка);
	
КонецПроцедуры

Процедура РасскраситьНаСервере(пПометка);
	
	пУО = Согласование.УсловноеОформление.Элементы;
	
	пЕстьЭлУО = Ложь;
	
	Для Каждого пЭлУО Из пУО Цикл 
		Если пЭлУО.Представление = "РаскраскаПросроченных" Тогда 
			пЕстьЭлУО = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Если Не пЕстьЭлУО Тогда 
		
		Если НЕ пПометка Тогда 
			Возврат;
		КонецЕсли;
		
		//Условное оформление: новый элемент
		пЭлУО = пУО.Добавить();
		пЭлУО.Представление = "РаскраскаПросроченных";
		
		//Условное оформление: отбор  		
		пЭлОтбора = пЭлУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		пЭлОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Начало 2020-06-05 (#3777)
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование = Истина;
		//пЭлГрОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСогласования");
		//пЭлГрОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		//
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование  = Истина;
		//пЭлГрОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Согласовано");
		//пЭлГрОтбора.ПравоеЗначение = Ложь;
		//
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("ДатаКрайняя");
		//пЭлГрОтбора.Использование	 = Истина;
		//пЭлГрОтбора.ПравоеЗначение   = КонецДня(ТекущаяДата());
		//пЭлГрОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Меньше;
		//
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("ДатаКрайняя");
		//пЭлГрОтбора.Использование	 = Истина;
		//пЭлГрОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Заполнено;

		// 		
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование  = Истина;
		//пЭлГрОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОтмененнаяЗаявка");
		//пЭлГрОтбора.ПравоеЗначение = Ложь;
		//
		//пЭлГрОтбора = пЭлОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//пЭлГрОтбора.Использование  = Истина;
		//пЭлГрОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
		//пЭлГрОтбора.ПравоеЗначение = ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании");		
		//Заменено на:
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "ДатаСогласования",,ВидСравненияКомпоновкиДанных.НеЗаполнено, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "Согласовано",Ложь,ВидСравненияКомпоновкиДанных.Равно, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "ДатаКрайняя",КонецДня(ТекущаяДата()),ВидСравненияКомпоновкиДанных.Меньше, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "ДатаКрайняя",,ВидСравненияКомпоновкиДанных.Заполнено, Истина);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "ОтмененнаяЗаявка",Ложь,ВидСравненияКомпоновкиДанных.Равно, Истина);
		
		мСтатусов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.ФормаВвода_НаСогласовании"));
		мСтатусов.Добавить(ПредопределенноеЗначение("Справочник.бит_СтатусыОбъектов.КорректировкаКонтрольныхЗначений_НаСогласовании"));
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Начало 2021-02-04 (#3997)
		мСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.ок_СтатусыВходящегоЭлектронногоДокументооборота.НаСогласование"));
		//ОКЕЙ Назаренко Д.В. (СофтЛаб) Конец 2021-02-04 (#3997) 
		спСтатусов = Новый СписокЗначений;
		спСтатусов.ЗагрузитьЗначения(мСтатусов);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(пЭлОтбора, "Статус",спСтатусов, ВидСравненияКомпоновкиДанных.ВСписке, Истина);
		//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2020-06-05 (#3777)
		
		//Условное оформление: оформление		
		пЭлУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветМонитораЗадачаПросрочена);
			
	КонецЕсли;
	
	пЭлУО.Использование = пПометка;
	
КонецПроцедуры
//ОКЕЙ Лобанов В.И.(СофтЛаб) Конец 2018-02-20 (#2989)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-07-08 (#4242)
&НаКлиенте
Процедура ОК_ЗаявкиНаРасходованиеДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ок_ЗаявкиНаРасходованиеДС.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
	 	Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекДанные.Ссылка);	
	ОткрытьФорму("Документ.бит_ЗаявкаНаРасходованиеСредств.Форма.ФормаДокумента", ПараметрыФормы);		
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-07-08 (#4242)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-06-26 (#3788)
// ЗаявкиИАккруалы
#Область ОбработчикиКомандФормы_ЗаявкиИАккруалы

&НаКлиенте
Процедура ЗаявкиИАккруалы_ВнестиДату(Команда)
	
	Если Элементы.ЗаписиКампании.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	МассивСтрокДляОбработки = ПолучитьМассивСтрокДляОбработки("ПредполагаемаяДатаПредоставленияДокументов");
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);
	
	Оповещение = Новый ОписаниеОповещения("ЗаписиКампанииВыборПослеВводаЗначения", ЭтаФорма, СтруктураПараметров);
	
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов("Дата", , , КД);

	ПоказатьВводЗначения(Оповещение, ТекущаяДата(), "Укажите предполагаемую дату предоставления документов.", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалы_ВнестиСумму(Команда)
	
	Если Элементы.ЗаписиКампании.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	МассивСтрокДляОбработки = ПолучитьМассивСтрокДляОбработки("СуммаПринятоУслугТоваровРаботБезНДС");
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);
	
	Оповещение = Новый ОписаниеОповещения("ЗаписиКампанииВнестиСуммуЗакрытие", ЭтаФорма, СтруктураПараметров);
	
	СтруктураПараметровВыделенныхСтрок = ПолучитьСтруктуруПараметровВыделенныхСтрок();
	
	ОткрытьФорму("ОбщаяФорма.ок_ФормаВводаСуммы", СтруктураПараметровВыделенныхСтрок, ЭтаФорма, ,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
&НаКлиенте
Процедура ЗаявкиИАккруалы_ВнестиКомментарий(Команда)
	
	Если Элементы.ЗаписиКампании.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИмяПоля = "Комментарий";
	МассивСтрокДляОбработки = ПолучитьМассивСтрокДляОбработки(ИмяПоля);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписиКампанииВыборПослеВводаЗначения", ЭтотОбъект, СтруктураПараметров);
	
	ПоказатьВводСтроки(ОписаниеОповещения, "",, 250, Истина);
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)

&НаКлиенте
Процедура ЗаявкиИАккруалы_ЗакрытьЗаявку(Команда)
	
	Если Элементы.ЗаписиКампании.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	МассивСтрокДляОбработки = ПолучитьМассивСтрокДляОбработки("СуммаКЗакрытию");
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);
	СтруктураПараметров.Вставить("СуммаКЗакрытиюКакВБухгалтерскомУчете", Истина);
	
	ЗаписиКампанииВыборПослеВводаЗначения(0, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалы_Советы(Команда)
	
	ОткрытьСправку("ОбщаяФорма.бит_ФормаРабочегоСтола");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалы_Инструкция(Команда)
	
	ОткрытьСправку("ОбщаяФорма.ок_ФормаВводаСуммы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалы_ОтметитьКакОбработанные(Команда)
	
	Если Элементы.ЗаписиКампании.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	МассивСтрокДляОбработки = ПолучитьМассивСтрокДляОбработки("Обработано");
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);
	
	ЗаписиКампанииВыборПослеВводаЗначения(Истина, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалы_ПерейтиВСписокЗаявокДляЗакрытия(Команда)
	
	ТекущаяСтрока = Элементы.ЗаписиКампании.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ФВБ = ТекущаяСтрока.ФВБ;
	
	Элементы.Группа1.ТекущаяСтраница = Элементы.СписокЗаявок;
	
	Элементы.Список.ТекущаяСтрока = ФВБ;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалы_ПоказатьНеобработанные(Команда)
	
	Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Пометка = НЕ Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Пометка;
	
	Если Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Пометка Тогда
		Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Заголовок = "Показать все";
		ИзменитьПодсказкуКомандыНаСервере("ЗаявкиИАккруалы_ПоказатьНеобработанные", "Показать все записи");
		//Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.ЦветФона = Новый Цвет(222, 222, 222);
	Иначе
		Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Заголовок = "Показать необработанные";
		ИзменитьПодсказкуКомандыНаСервере("ЗаявкиИАккруалы_ПоказатьНеобработанные", "Показать только необработанные записи");
		//Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.ЦветФона = Новый Цвет();
	КонецЕсли; 
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПодсказкуКомандыНаСервере(ИмяКоманды, ТекстПодсказки)
	
	Команды.Найти(ИмяКоманды).Подсказка = ТекстПодсказки;
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-20 (#3822)
&НаКлиенте
Процедура ЗаявкиИАккруалы_УстановитьПометку(Команда)
	
	ЗаявкиИАккруалы_ИзменитьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалы_СнятьПометку(Команда)
	
	ЗаявкиИАккруалы_ИзменитьПометку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалы_ИзменитьПометку(Пометка = Истина)
	
	Если Элементы.ЗаписиКампании.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Элементы.ЗаписиКампании.ТекущийЭлемент) = Тип("ПолеФормы")
		И Элементы.ЗаписиКампании.ТекущийЭлемент.Имя = "ЗаписиКампанииОбработано") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПоля = СтрЗаменить(Элементы.ЗаписиКампании.ТекущийЭлемент.Имя, "ЗаписиКампании","");
	МассивСтрокДляОбработки = ПолучитьМассивСтрокДляОбработки(ИмяПоля);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);
	
	ЗаписиКампанииВыборПослеВводаЗначения(Пометка, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВыделенныхСтрокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РассчитатьСуммуВыделенныхСтрок();
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-20 (#3822)

#КонецОбласти

#Область ОбработчикиСобытийФормы_ЗаявкиИАккруалы

&НаКлиенте
Процедура ЗаписиКампанииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаписиКампании.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ЗаписиКампанииСуммаПринятоУслугТоваровРаботБезНДС"
			ИЛИ Поле.Имя = "ЗаписиКампанииПроведеноВМСФО"
			ИЛИ Поле.Имя = "ЗаписиКампанииНачислитьАккруал"
			ИЛИ Поле.Имя = "ЗаписиКампанииСуммаКЗакрытию" Тогда
			
			ИмяПоля = СтрЗаменить(Поле.Имя, "ЗаписиКампании","");
			
			МассивСтрокДляОбработки = Новый Массив;
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Кампания", 	ТекущиеДанные.Кампания);
			СтруктураСтроки.Вставить("ИДСтроки", 	ТекущиеДанные.ИДСтроки);
			СтруктураСтроки.Вставить("ИмяПоля", 	ИмяПоля);
			
			МассивСтрокДляОбработки.Добавить(СтруктураСтроки);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);
			СтруктураПараметров.Вставить("ИмяПоля", 				ИмяПоля);

			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписиКампанииВыборПослеВводаЗначения", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВводЧисла(ОписаниеОповещения, ТекущиеДанные[ИмяПоля], ,15, 2);

		ИначеЕсли Поле.Имя = "ЗаписиКампанииПредполагаемаяДатаПредоставленияДокументов" Тогда
			
			ИмяПоля = СтрЗаменить(Поле.Имя, "ЗаписиКампании","");
			
			МассивСтрокДляОбработки = Новый Массив;
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Кампания", 	ТекущиеДанные.Кампания);
			СтруктураСтроки.Вставить("ИДСтроки", 	ТекущиеДанные.ИДСтроки);
			СтруктураСтроки.Вставить("ИмяПоля", 	ИмяПоля);
			
			МассивСтрокДляОбработки.Добавить(СтруктураСтроки);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);

			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписиКампанииВыборПослеВводаЗначения", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВводДаты(ОписаниеОповещения, ТекущиеДанные[ИмяПоля], , ЧастиДаты.Дата);
			
		ИначеЕсли Поле.Имя = "ЗаписиКампанииКомментарий" Тогда
			
			ИмяПоля = СтрЗаменить(Поле.Имя, "ЗаписиКампании","");
			
			МассивСтрокДляОбработки = Новый Массив;
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Кампания", 	ТекущиеДанные.Кампания);
			СтруктураСтроки.Вставить("ИДСтроки", 	ТекущиеДанные.ИДСтроки);
			СтруктураСтроки.Вставить("ИмяПоля", 	ИмяПоля);
			
			МассивСтрокДляОбработки.Добавить(СтруктураСтроки);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);

			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписиКампанииВыборПослеВводаЗначения", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВводСтроки(ОписаниеОповещения, ТекущиеДанные[ИмяПоля],, 250, Истина);
			
		ИначеЕсли Поле.Имя = "ЗаписиКампанииОбработано" Тогда
			
			МассивСтрокДляОбработки = Новый Массив;
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Кампания", 	ТекущиеДанные.Кампания);
			СтруктураСтроки.Вставить("ИДСтроки", 	ТекущиеДанные.ИДСтроки);
			СтруктураСтроки.Вставить("ИмяПоля", 	"Обработано");
			
			МассивСтрокДляОбработки.Добавить(СтруктураСтроки);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("МассивСтрокДляОбработки", МассивСтрокДляОбработки);
			
			ЗаписиКампанииВыборПослеВводаЗначения(НЕ ТекущиеДанные.Обработано, СтруктураПараметров);

		ИначеЕсли Поле.Имя = "ЗаписиКампанииФВБНомер"
			ИЛИ Поле.Имя = "ЗаписиКампанииФВБДата" Тогда
			
			ОткрытьЗначение(ТекущиеДанные.ФВБ);
			
		ИначеЕсли Поле.Имя = "ЗаписиКампанииФВБбит_БК_Инициатор"
			ИЛИ Поле.Имя = "ЗаписиКампанииФВБбит_БК_Организация"
			ИЛИ Поле.Имя = "ЗаписиКампанииФВБбит_БК_Цель"
			ИЛИ Поле.Имя = "ЗаписиКампанииФВБбит_БК_ПредпологаемыйКонтрагент" Тогда
			
			ИмяПоля = СтрЗаменить(Поле.Имя, "ЗаписиКампанииФВБ","");
			
			РеквизитФВБ = бит_ОбщегоНазначения.ПолучитьЗначениеРеквизитаОбъекта(ТекущиеДанные.ФВБ, ИмяПоля);
			ОткрытьЗначение(РеквизитФВБ);
			
		Иначе
			
			ИмяПоля = СтрЗаменить(Поле.Имя, "ЗаписиКампании","");
			ОткрытьЗначение(ТекущиеДанные[ИмяПоля]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-20 (#3822)
&НаКлиенте
Процедура ЗаписиКампанииПриАктивизацииСтроки(Элемент)
	
	РассчитатьСуммуВыделенныхСтрок();
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-20 (#3822)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗаявкиИАккруалы

&НаСервере
Функция ПолучитьМассивСтрокДляОбработки(ИмяПоля)
	
	МассивСтрокДляОбработки = Новый Массив;
	Для каждого ТекущаяВыделенаяСтрока Из Элементы.ЗаписиКампании.ВыделенныеСтроки Цикл
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("Кампания", 	ТекущаяВыделенаяСтрока.Кампания);
		СтруктураСтроки.Вставить("ИДСтроки", 	ТекущаяВыделенаяСтрока.ИДСтроки);
		СтруктураСтроки.Вставить("ИмяПоля", 	ИмяПоля);
		МассивСтрокДляОбработки.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивСтрокДляОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПараметровВыделенныхСтрок()
	
	СтруктураСтроки = Новый Структура();
	СтруктураСтроки.Вставить("КоличествоСтрок", 0);
	СтруктураСтроки.Вставить("ОбщаяСуммаСтрок", 0);
	
	СтруктураСтроки.КоличествоСтрок = Элементы.ЗаписиКампании.ВыделенныеСтроки.Количество();
	
	Для каждого ТекущаяВыделенаяСтрока Из Элементы.ЗаписиКампании.ВыделенныеСтроки Цикл
		
		МенеджерЗаписи = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущаяВыделенаяСтрока);
		МенеджерЗаписи.Прочитать();

		Если МенеджерЗаписи.Выбран() Тогда
			СтруктураСтроки.ОбщаяСуммаСтрок = СтруктураСтроки.ОбщаяСуммаСтрок + МенеджерЗаписи.СуммаКонтроль;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура ЗаписиКампанииВыборПослеВводаЗначения(ВыбЗнач, Параметры) Экспорт
	
	Если ВыбЗнач = Неопределено 
		ИЛИ НЕ Параметры.Свойство("МассивСтрокДляОбработки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяПоля")
		И Параметры.ИмяПоля = "СуммаПринятоУслугТоваровРаботБезНДС" 
		И ВыбЗнач < 0 Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Факт. оказано работ (услуг), принято ТМЦ"" может принимать только неотрицательные значения.");
		Возврат;
	КонецЕсли; 
	
	БылоИзменениеВРегистре = Ложь;
	ЗаписиКампанииВыборПослеВводаЗначенияНаСервере(ВыбЗнач, Параметры, БылоИзменениеВРегистре); 
	
	Если БылоИзменениеВРегистре Тогда
	
		Элементы.ЗаписиКампании.Обновить();
		СтруктураПоказателей = ОбновитьПоказателиЗаявкиИАккруалыНаСервере(мКэшЗначений.Инициатор.ТекущийИнициатор);
	
		Если СтруктураПоказателей <> Неопределено Тогда
		
			ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании 	= СтруктураПоказателей.ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании;
			ЗаявкиИАккруалы_ОбработаноЗаписей				= СтруктураПоказателей.ЗаявкиИАккруалы_ОбработаноЗаписей;
			ЗаявкиИАккруалы_ОсталосьНеобработанных			= СтруктураПоказателей.ЗаявкиИАккруалы_ОсталосьНеобработанных;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписиКампанииВыборПослеВводаЗначенияНаСервере(ВыбЗнач, Параметры, БылоИзменениеВРегистре)
	
	БылоИзменениеВРегистре = Ложь;
	
	Для каждого СтруктураСтроки Из Параметры.МассивСтрокДляОбработки Цикл
	
		НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Кампания.Установить(СтруктураСтроки.Кампания);
		НаборЗаписей.Отбор.ИДСтроки.Установить(СтруктураСтроки.ИДСтроки);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			ТекущаяЗапись = НаборЗаписей[0];
			
			Если СтруктураСтроки.ИмяПоля = "СуммаКЗакрытию"
				И Параметры.Свойство("СуммаКЗакрытиюКакВБухгалтерскомУчете")
				И Параметры.СуммаКЗакрытиюКакВБухгалтерскомУчете Тогда
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-24 (#3822)
				//ВыбЗнач = ТекущаяЗапись.СуммаКонтроль - ТекущаяЗапись.СуммаИсполнение;
				ВыбЗнач = ТекущаяЗапись.СуммаКонтроль - ТекущаяЗапись.СуммаПринятоУслугТоваровРаботБезНДС;
				Если ВыбЗнач < 0 Тогда
					ВыбЗнач = 0;
				КонецЕсли;
				
			ИначеЕсли СтруктураСтроки.ИмяПоля = "СуммаКЗакрытию" Тогда
				
				Если ВыбЗнач > 0 Тогда
				
					Если НЕ ВыбЗнач = (ТекущаяЗапись.СуммаКонтроль - ТекущаяЗапись.СуммаПринятоУслугТоваровРаботБезНДС) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вводимая сумма не равна разности между плановой суммой и суммой факт. оказанных услуг"); 
						Продолжить;
					КонецЕсли;
					
				ИначеЕсли ВыбЗнач < 0 Тогда
					Возврат;
				КонецЕсли;
				
			ИначеЕсли СтруктураСтроки.ИмяПоля = "СуммаПринятоУслугТоваровРаботБезНДС" Тогда
				
				Если ТекущаяЗапись.СуммаКЗакрытию <> 0 Тогда
				
					ТекущаяЗапись.СуммаКЗакрытию = ТекущаяЗапись.СуммаКонтроль - ВыбЗнач;
					Если ТекущаяЗапись.СуммаКЗакрытию < 0 Тогда
						ТекущаяЗапись.СуммаКЗакрытию = 0;
					КонецЕсли;
				
				КонецЕсли;
				
				Если ВыбЗнач > ТекущаяЗапись.СуммаКонтроль Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Введенная сумма превышает запланированную по заявке на этот объект, в плановый период. Вы уверены, что фактически расходов было больше, чем планировалось?");
				КонецЕсли; 
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-24 (#3822)
			КонецЕсли; 
			
			Если ТекущаяЗапись[СтруктураСтроки.ИмяПоля] = ВыбЗнач Тогда
				Продолжить;
			КонецЕсли; 
			
			ТекущаяЗапись[СтруктураСтроки.ИмяПоля] = ВыбЗнач;
			ТекущаяЗапись.ДатаИзменения = ТекущаяДата();
			ТекущаяЗапись.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			
			Если СтруктураСтроки.ИмяПоля = "СуммаПринятоУслугТоваровРаботБезНДС" Тогда
				ТекущаяЗапись.Обработано = Истина;
			КонецЕсли; 
			
			НаборЗаписей.Записать();
			
			БылоИзменениеВРегистре = Истина;
			
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиКампанииВнестиСуммуЗакрытие(ВыбЗнач, Параметры) Экспорт
	
	Если ВыбЗнач = Неопределено
		ИЛИ ВыбЗнач = КодВозвратаДиалога.Отмена
		ИЛИ НЕ Параметры.Свойство("МассивСтрокДляОбработки") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаписиКампанииВнестиСуммуЗакрытиеНаСервере(ВыбЗнач, Параметры); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаписиКампанииВнестиСуммуЗакрытиеНаСервере(ВыбЗнач, Параметры)
	
	БылоИзменениеВРегистре = Ложь;
	
	Для каждого СтруктураСтроки Из Параметры.МассивСтрокДляОбработки Цикл
	
		НаборЗаписей = РегистрыСведений.ок_НачислениеАккруаловКонтроллинг.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Кампания.Установить(СтруктураСтроки.Кампания);
		НаборЗаписей.Отбор.ИДСтроки.Установить(СтруктураСтроки.ИДСтроки);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			ТекущаяЗапись = НаборЗаписей[0];
			
			Если ВыбЗнач.ЭтоКоэффициент Тогда
				ТекущаяЗапись[СтруктураСтроки.ИмяПоля] = ТекущаяЗапись.СуммаКонтроль * ВыбЗнач.ВозвращаемоеЗначение;
			ИначеЕсли ВыбЗнач.УстановитьСуммуКакВБухгалтерскомУчете Тогда
				ТекущаяЗапись[СтруктураСтроки.ИмяПоля] = ТекущаяЗапись.СуммаИсполнение;
			Иначе
				ТекущаяЗапись[СтруктураСтроки.ИмяПоля] = ВыбЗнач.ВозвращаемоеЗначение;
			КонецЕсли; 
			
			ТекущаяЗапись.ДатаИзменения = ТекущаяДата();
			ТекущаяЗапись.Ответственный = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
			
			Если СтруктураСтроки.ИмяПоля = "СуммаПринятоУслугТоваровРаботБезНДС" Тогда
				ТекущаяЗапись.Обработано = Истина;
				
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-25 (#3822)
				Если ТекущаяЗапись.СуммаКЗакрытию <> 0 Тогда
					
					ТекущаяЗапись.СуммаКЗакрытию = ТекущаяЗапись.СуммаКонтроль - ТекущаяЗапись.СуммаПринятоУслугТоваровРаботБезНДС;
					Если ТекущаяЗапись.СуммаКЗакрытию < 0 Тогда
						ТекущаяЗапись.СуммаКЗакрытию = 0;
					КонецЕсли;
				
				КонецЕсли; 
				//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-25 (#3822)
				
			КонецЕсли; 
			
			НаборЗаписей.Записать();
			
			БылоИзменениеВРегистре = Истина;
			
		КонецЕсли;
	
	КонецЦикла;

	Если БылоИзменениеВРегистре Тогда
	
		СтруктураПоказателей = ОбновитьПоказателиЗаявкиИАккруалыНаСервере(мКэшЗначений.Инициатор.ТекущийИнициатор);
	
		Если СтруктураПоказателей <> Неопределено Тогда
		
			ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании 	= СтруктураПоказателей.ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании;
			ЗаявкиИАккруалы_ОбработаноЗаписей				= СтруктураПоказателей.ЗаявкиИАккруалы_ОбработаноЗаписей;
			ЗаявкиИАккруалы_ОсталосьНеобработанных			= СтруктураПоказателей.ЗаявкиИАккруалы_ОсталосьНеобработанных;
			
			Элементы.ЗаписиКампании.Обновить();
			
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	
	ЭлементыОтбора = Неопределено;
	ЭлементыПользовательскихНастроек = ЗаписиКампании.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для каждого ТекущийЭлементНастроек Из ЭлементыПользовательскихНастроек Цикл
		Если ТипЗнч(ТекущийЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			ЭлементыОтбора = ТекущийЭлементНастроек.Элементы;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЭлементыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеКомпоновкиДанных_Обработано = Новый ПолеКомпоновкиДанных("Обработано");
	НайденоПКД_Обработано = Ложь;
	
	Для каждого ТекущийЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТекущийЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДанных_Обработано Тогда
			НайденоПКД_Обработано = Истина;
			ТекущийЭлементОтбора.Использование 	= Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Пометка;
			ТекущийЭлементОтбора.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеРавно;
			ТекущийЭлементОтбора.ПравоеЗначение = Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Пометка;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если НЕ НайденоПКД_Обработано Тогда
	
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование 	= Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Пометка;
		ЭлементОтбора.ЛевоеЗначение 	= ПолеКомпоновкиДанных_Обработано;
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение 	= Элементы.ЗаявкиИАккруалы_ПоказатьНеобработанные.Пометка;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиЗаявкиИАккруалы()
	
	Если НЕ Элементы.СтраницаЗаявкиИАккруалы.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоказателей = ОбновитьПоказателиЗаявкиИАккруалыНаСервере(мКэшЗначений.Инициатор.ТекущийИнициатор);
	
	Если СтруктураПоказателей <> Неопределено Тогда
	
		ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании 	= СтруктураПоказателей.ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании;
		ЗаявкиИАккруалы_ОбработаноЗаписей				= СтруктураПоказателей.ЗаявкиИАккруалы_ОбработаноЗаписей;
		ЗаявкиИАккруалы_ОсталосьНеобработанных			= СтруктураПоказателей.ЗаявкиИАккруалы_ОсталосьНеобработанных;
		
		Элементы.ЗаписиКампании.Обновить();
		
	КонецЕсли; 
	
КонецПроцедуры

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-07-31 (#3823)
&НаКлиенте
Процедура ОбновитьПоказателиЗаявкиИАккруалыПриАктивномОкне()
	
	пАктивноеОкно = АктивноеОкно();
	Если пАктивноеОкно <> Неопределено
		И ТипЗнч(пАктивноеОкно) = Тип("ОкноКлиентскогоПриложения")
		И СтрНайти(пАктивноеОкно.Заголовок, "Начальная страница") = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьПоказателиЗаявкиИАккруалы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиЗаявкиИАккруалыВнеАктивногоОкна()
	
	ОбновитьПоказателиЗаявкиИАккруалы();
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-07-31 (#3823)

&НаСервереБезКонтекста
Функция ОбновитьПоказателиЗаявкиИАккруалыНаСервере(ТекущийИнициатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Кампания КАК Кампания
		|ПОМЕСТИТЬ ВТ_ОткрытыеКампании
		|ИЗ
		|	РегистрСведений.ок_СтатусыКампанииПоНачислениюАккруалов.СрезПоследних КАК ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних
		|ГДЕ
		|	ок_СтатусыКампанииПоНачислениюАккруаловСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.ок_СтатусыКампанииПоАккруалам.ОткрытаДляИнициаторов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(МИНИМУМ(НачислениеАккруаловКонтроллинг.Кампания.ДатаЗавершенияКампании), ДАТАВРЕМЯ(1, 1, 1)) КАК МинимальнаяДатаЗавершенияКампании,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НачислениеАккруаловКонтроллинг.Обработано
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК КоличествоОбработанныхЗаписей,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА НачислениеАккруаловКонтроллинг.Обработано
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ), 0) КАК КоличествоНеобработанныхЗаписей
		|ИЗ
		|	ВТ_ОткрытыеКампании КАК ОткрытыеКампании
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК НачислениеАккруаловКонтроллинг
		|		ПО ОткрытыеКампании.Кампания = НачислениеАккруаловКонтроллинг.Кампания
		|ГДЕ
		|	НЕ НачислениеАккруаловКонтроллинг.ФВБ ЕСТЬ NULL
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-18 (#3822)
		//|	И НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = &Инициатор
		|	И (НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = ЗНАЧЕНИЕ(СПравочник.бит_БК_Инициаторы.ПустаяСсылка)
		|		И НачислениеАккруаловКонтроллинг.ФВБ.бит_БК_Инициатор = &Инициатор
		|		ИЛИ НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор <> ЗНАЧЕНИЕ(СПравочник.бит_БК_Инициаторы.ПустаяСсылка)
		|			И НачислениеАккруаловКонтроллинг.ЗамещающийИнициатор = &Инициатор)
		//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-18 (#3822)
		|	И НачислениеАккруаловКонтроллинг.ПередатьИнициатору";
	
	Запрос.УстановитьПараметр("Инициатор", ТекущийИнициатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДнейДоОкончанияКампании 		= 0;
	КоличествоОбработанныхЗаписей 	= 0;
	КоличествоНеобработанныхЗаписей = 0;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.МинимальнаяДатаЗавершенияКампании) Тогда
			ДнейДоОкончанияКампании		= Окр((НачалоДня(ВыборкаДетальныеЗаписи.МинимальнаяДатаЗавершенияКампании) - НачалоДня(ТекущаяДата())) / (60 * 60 * 24), 0) + 1;
		КонецЕсли; 
		
		КоличествоОбработанныхЗаписей 	= ВыборкаДетальныеЗаписи.КоличествоОбработанныхЗаписей;
		КоличествоНеобработанныхЗаписей = ВыборкаДетальныеЗаписи.КоличествоНеобработанныхЗаписей;
	
	КонецЕсли;
	
	ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании 	= ДнейДоОкончанияКампании;
	ЗаявкиИАккруалы_ОбработаноЗаписей				= КоличествоОбработанныхЗаписей;
	ЗаявкиИАккруалы_ОсталосьНеобработанных			= КоличествоНеобработанныхЗаписей;
	
	СтруктураПоказателей = Новый Структура();
	СтруктураПоказателей.Вставить("ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании", ЗаявкиИАккруалы_ОсталосьДнейДоЗакрытияКампании);
	СтруктураПоказателей.Вставить("ЗаявкиИАккруалы_ОбработаноЗаписей", 				ЗаявкиИАккруалы_ОбработаноЗаписей);
	СтруктураПоказателей.Вставить("ЗаявкиИАккруалы_ОсталосьНеобработанных", 		ЗаявкиИАккруалы_ОсталосьНеобработанных);
	
	Возврат СтруктураПоказателей;
	
КонецФункции

&НаСервере
Процедура РассчитатьСуммуВыделенныхСтрок()
	
	СуммаВыделенныхСтрок = 0;
	
	Если Элементы.ЗаписиКампании.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	МассивИДСтрок = Новый Массив;
	Для каждого ТекущаяВыделенаяСтрока Из Элементы.ЗаписиКампании.ВыделенныеСтроки Цикл
		МассивИДСтрок.Добавить(ТекущаяВыделенаяСтрока.ИДСтроки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ок_НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС), 0) КАК СуммаПринятоУслугТоваровРаботБезНДС
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК ок_НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	ок_НачислениеАккруаловКонтроллинг.ИДСтроки В(&ИДСтроки)";
	
	Запрос.УстановитьПараметр("ИДСтроки", МассивИДСтрок);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СуммаВыделенныхСтрок = ВыборкаДетальныеЗаписи.СуммаПринятоУслугТоваровРаботБезНДС;
	КонецЕсли;
	
КонецПроцедуры
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-19 (#3822)

#КонецОбласти
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-06-26 (#3788)

//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2021-01-23 (#3969)
// ЗаявкиИАккруалы
#Область ОбработчикиКомандФормы_ЗаявкиИАккруалыКонтроль

&НаКлиенте
Процедура ЗаявкиИАккруалыКонтроль_ПоказатьНеобработанные(Команда)
	
	Элементы.ЗаявкиИАккруалыКонтроль_ПоказатьНеобработанные.Пометка = НЕ Элементы.ЗаявкиИАккруалыКонтроль_ПоказатьНеобработанные.Пометка;
	
	Если Элементы.ЗаявкиИАккруалыКонтроль_ПоказатьНеобработанные.Пометка Тогда
		Элементы.ЗаявкиИАккруалыКонтроль_ПоказатьНеобработанные.Заголовок = "Показать все";
		ИзменитьПодсказкуКомандыНаСервере("ЗаявкиИАккруалыКонтроль_ПоказатьНеобработанные", "Показать все записи");	
	Иначе
		Элементы.ЗаявкиИАккруалыКонтроль_ПоказатьНеобработанные.Заголовок = "Показать необработанные";
		ИзменитьПодсказкуКомандыНаСервере("ЗаявкиИАккруалыКонтроль_ПоказатьНеобработанные", "Показать только необработанные записи");	
	КонецЕсли; 
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиИАккруалыКонтроль_СуммаВыделенныхСтрокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаявкиИАккруалыКонтроль_РассчитатьСуммуВыделенныхСтрок();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы_ЗаявкиИАккруалыКонтроль

&НаКлиенте
Процедура ЗаписиКампанииКонтрольВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Возврат;
	
	ТекущиеДанные = Элементы.ЗаписиКампанииКонтроль.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ЗаписиКампанииКонтрольФВБНомер"
			ИЛИ Поле.Имя = "ЗаписиКампанииКонтрольФВБДата" Тогда
			
			ОткрытьЗначение(ТекущиеДанные.ФВБ);
			
		ИначеЕсли Поле.Имя = "ЗаписиКампанииКонтрольФВБбит_БК_Инициатор"
			ИЛИ Поле.Имя = "ЗаписиКампанииКонтрольФВБбит_БК_Организация"
			ИЛИ Поле.Имя = "ЗаписиКампанииКонтрольФВБбит_БК_Цель"
			ИЛИ Поле.Имя = "ЗаписиКампанииКонтрольФВБбит_БК_ПредпологаемыйКонтрагент" Тогда
			
			ИмяПоля = СтрЗаменить(Поле.Имя, "ЗаписиКампанииКонтрольФВБ","");
			
			РеквизитФВБ = бит_ОбщегоНазначения.ПолучитьЗначениеРеквизитаОбъекта(ТекущиеДанные.ФВБ, ИмяПоля);
			ОткрытьЗначение(РеквизитФВБ);
			
		Иначе
			
			ИмяПоля = СтрЗаменить(Поле.Имя, "ЗаписиКампанииКонтроль","");
			ОткрытьЗначение(ТекущиеДанные[ИмяПоля]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗаявкиИАккруалыКонтроль

&НаСервере
Процедура ЗаявкиИАккруалыКонтроль_РассчитатьСуммуВыделенныхСтрок()
	
	ЗаявкиИАккруалыКонтроль_СуммаВыделенныхСтрок = 0;
	
	Если Элементы.ЗаписиКампанииКонтроль.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	МассивИДСтрок = Новый Массив;
	Для каждого ТекущаяВыделенаяСтрока Из Элементы.ЗаписиКампанииКонтроль.ВыделенныеСтроки Цикл
		МассивИДСтрок.Добавить(ТекущаяВыделенаяСтрока.ИДСтроки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ок_НачислениеАккруаловКонтроллинг.СуммаПринятоУслугТоваровРаботБезНДС), 0) КАК СуммаПринятоУслугТоваровРаботБезНДС
		|ИЗ
		|	РегистрСведений.ок_НачислениеАккруаловКонтроллинг КАК ок_НачислениеАккруаловКонтроллинг
		|ГДЕ
		|	ок_НачислениеАккруаловКонтроллинг.ИДСтроки В(&ИДСтроки)";
	
	Запрос.УстановитьПараметр("ИДСтроки", МассивИДСтрок);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаявкиИАккруалыКонтроль_СуммаВыделенныхСтрок = ВыборкаДетальныеЗаписи.СуммаПринятоУслугТоваровРаботБезНДС;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2021-01-23 (#3969)
