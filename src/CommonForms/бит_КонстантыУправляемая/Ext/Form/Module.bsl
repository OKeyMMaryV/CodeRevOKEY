
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ТекстЗаголовок = "Редактирование Настроек программы (БИТ):";
	
	Если НЕ ЗначениеЗаполнено(НаборКонстант.бит_РежимОбновленияПеречняВиз) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено значение настройки ""Режим обновления перечня виз"".'");
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ТекстЗаголовок, СтатусСообщения.Важное);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаборКонстант.бит_РежимАвтоЗаполненияАналитик) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено значение настройки ""Режим автозаполнения аналитик"".'");
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, ТекстЗаголовок, СтатусСообщения.Важное);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фИзмененыНастройкиПрав = Ложь;
	
	ОпределитьДоступностьРедактированияВалютыРегламентированногоУчета();
	    	
	Включенные = бит_рлс_Основной.ПолучитьВключенныеВидыОбластей();
	
	Для каждого МетаЗначение Из Метаданные.Перечисления.бит_рлс_ВидыОбластейДоступа.ЗначенияПеречисления Цикл
		
		ЗначениеПеречисления = Перечисления.бит_рлс_ВидыОбластейДоступа[МетаЗначение.Имя];		 
		ОбластьВключена      = ?(Включенные[ЗначениеПеречисления]= Истина, Истина, Ложь);		 
		
		Элемент = ВидыОбластейДоступа.Добавить();
		Элемент.Значение      = ЗначениеПеречисления;
		Элемент.Представление = МетаЗначение.Синоним;
		Элемент.Пометка       = ОбластьВключена;
		
	КонецЦикла; // По областям доступа.
	
	ЗаполнитьСписки();
	
	РежимАвтоЗаполненияАналитикПриИзмененииСервер(ЭтотОбъект);
	
	// Управление видимостью доступностью.	
	УправлениеВидимостьюДоступностью();
	
	ЗаполнитьКэшЗначений();
	
	фВестиУчетПоТипамПроводокНач 		= НаборКонстант.бит_ВестиУчетПоТипамПроводок;
	ТекущийРежимыАвтоЗаполненияАналитик = НаборКонстант.бит_РежимАвтоЗаполненияАналитик;
	
	ВерсииПодсистем = ОбновлениеИнформационнойБазы.ВерсииПодсистем();
	НайденнаяСтрока = ВерсииПодсистем.Найти("БитФинанс", "ИмяПодсистемы"); 
	Если НайденнаяСтрока <> Неопределено Тогда
		ВерсияБиблиотеки = НайденнаяСтрока.Версия;
	КонецЕсли;

	Элементы.бит_НомерРелиза.Видимость = ПустаяСтрока(ВерсияБиблиотеки);
	Элементы.ВерсияБиблиотеки.Видимость = НЕ ПустаяСтрока(ВерсияБиблиотеки);
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Общие настройки/Первый запуск БИТ.ФИНАНС", "", Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	флЕстьИзменения = Ложь;

	Если НЕ Отказ Тогда
		
		флЕстьИзмененияВидовОбластей = Ложь;
		ВидыОбластейДоступаНачальный = фКэшЗначений.ВидыОбластейДоступа;
		
		Для й = 0 По ВидыОбластейДоступа.Количество()-1  Цикл 			
			
			Если ВидыОбластейДоступаНачальный[й].Пометка <> ВидыОбластейДоступа[й].Пометка Тогда  				
				флЕстьИзмененияВидовОбластей = Истина;
				Прервать;  				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если флЕстьИзмененияВидовОбластей Тогда
			
			Для каждого Элемент Из ВидыОбластейДоступа Цикл
				
				МенеджерЗаписи = РегистрыСведений.бит_рлс_НазначениеВидовОбластейДоступа.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ВидОбластиДоступа = Элемент.Значение;
				
				Попытка
					
					Если Элемент.Пометка Тогда
						МенеджерЗаписи.Записать();
					Иначе	
						МенеджерЗаписи.Удалить();
					КонецЕсли; 
					
				Исключение
					
					ТекстСообщения = "Не удалось установить настройку для вида области """ + Элемент.Значение + """!";
					бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ,, СтатусСообщения.Важное);
					
				КонецПопытки;
				
			КонецЦикла; // По видам областей.
			
		КонецЕсли; // Есть изменения видов областей. 
		
		Если флЕстьИзмененияВидовОбластей 
			 ИЛИ фКэшЗначений.бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей 
				  <> НаборКонстант.бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей  Тогда
		
			флЕстьИзменения = Истина;
		
		КонецЕсли; 
				
	КонецЕсли; // Не отказ. 

	Если НЕ Отказ Тогда
		
		Если флЕстьИзменения Тогда
			
			// Инициируем обновление параметров сеанса под ограниченными ролями.
			Константы.бит_ИдентификаторКэшаНастроек.Установить(Строка(Новый УникальныйИдентификатор));
			// Обновим параметры в текущем сеанса.
			Если бит_ОбщегоНазначения.ЭтоСемействоУПП() Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ПолныеПрава");
				Модуль.УстановитьПараметрыМеханизмаОграниченияПравДоступа();                
			Иначе
				бит_рлс_Основной.ЗаполнитьПараметрыСеансаRLS();
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
   
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьКэшЗначений();
	
	// Изменено значение общей переменной - сбрасываем повторно используемые значения.
	ОбновитьПовторноИспользуемыеЗначения();
	
	фВестиУчетПоТипамПроводокНач = НаборКонстант.бит_ВестиУчетПоТипамПроводок;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПолучитьФункциональнуюОпцию("бит_УХ") Тогда
		ТекущийОбъект.бит_ПолучатьИнформациюОтБотаТелеграм = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура бит_РежимАвтоЗаполненияАналитикОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписейПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРЛС_УппКа_ПереходКТиповымНастройкамНажатие(Элемент)
	



	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИмяФормыТиповой = "Обработка.НастройкиПрограммы.Форма.ПараметрыДоступаНаУровнеЗаписей";
		Выполнить("ОткрытьФорму(ИмяФормыТиповой);");
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ВестиУчетПоТипамПроводокПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаполнитьТипыПроводокНажатие(Элемент)
	
	флОткрыть = Истина;
	Если фВестиУчетПоТипамПроводокНач = Ложь Тогда
		
		флОткрыть = Ложь;
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьТипПроводкиЗавершение", ЭтотОбъект);
		ТекстВопроса =  НСтр("ru = 'Для заполнения типов проводок необходимо записать значение константы. Выполнить запись?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	
	КонецЕсли; 
	
	Если флОткрыть Тогда
		
		ОткрытьФорму("Обработка.бит_ЗаполнитьТипыПроводок.Форма");
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик оповещения ВопросЗаполнитьТипПроводкиЗавершение.
// 
&НаКлиенте 
Процедура ВопросЗаполнитьТипПроводкиЗавершение(Ответ, ДополнительныеДанные) Экспорт
	
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		флОткрыть = Записать();
		
	Иначе
		
		флОткрыть = Ложь;
		
	КонецЕсли; 
	
	Если флОткрыть Тогда
		
		ОткрытьФорму("Обработка.бит_ЗаполнитьТипыПроводок.Форма");
		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура бит_ТекущаяВерсияПродуктаПриИзменении(Элемент)

	Успех = бит_ТекущаяВерсияПродуктаПриИзмененииНаСервере();
		
	Если Успех Тогда
		бит_РаботаСДиалогамиКлиент.ОбновитьИнтерфейсПользователя();
	Иначе
		ТекстСообщения = Нстр("ru = 'Выбранная версия продукта не доступна в ""БИТ.Сервере лицензий 1.6"".'");
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура бит_РежимАвтоЗаполненияАналитикПриИзменении(Элемент)
	
	НеЗаполнять = ПредопределенноеЗначение("Перечисление.бит_РежимыАвтоЗаполненияАналитик.НеЗаполнять");
	ДляНовых 	= ПредопределенноеЗначение("Перечисление.бит_РежимыАвтоЗаполненияАналитик.ЗаполнятьТолькоДляНовыхДокументов");
	Всегда  	= ПредопределенноеЗначение("Перечисление.бит_РежимыАвтоЗаполненияАналитик.ЗаполнятьВсегда");
		
	Если ТекущийРежимАвтоЗаполненияАналитик <> НаборКонстант.бит_РежимАвтоЗаполненияАналитик Тогда
		НеЗаполнять = ПредопределенноеЗначение("Перечисление.бит_РежимыАвтоЗаполненияАналитик.НеЗаполнять");
		ДляНовых 	= ПредопределенноеЗначение("Перечисление.бит_РежимыАвтоЗаполненияАналитик.ЗаполнятьТолькоДляНовыхДокументов");
		Всегда  	= ПредопределенноеЗначение("Перечисление.бит_РежимыАвтоЗаполненияАналитик.ЗаполнятьВсегда");
		Если (ТекущийРежимАвтоЗаполненияАналитик = НеЗаполнять ИЛИ ТекущийРежимАвтоЗаполненияАналитик = ДляНовых) 
			И НаборКонстант.бит_РежимАвтоЗаполненияАналитик = Всегда Тогда
		
			ТекстСообщения = Нстр("ru = 'При установке режима ""Заполнять всегда"" во всех бухгалтерских документах в ""Аналитиках БИТ""
			|будет отображаться флаг ""Запрещено автоматическое перезаполнение аналитик"". 
			|Если необходимо, чтобы аналитики перезаполнялись автоматически при любом изменении и/или перепроведении документа, 
			|тогда флаг не устанавливается. 
			|Если необходимо зафиксировать аналитики от изменений, тогда необходимо установить флаг в документе.
			|При любом изменении заполненных аналитик вручную или при заполнении аналитик на основании документов
			|""Заявка на расходование ДС"" или ""Планируемое поступление ДС"" 
			|флаг ""Запрещено автоматическое перезаполнение аналитик"" установится автоматически.'");
			ПоказатьПредупреждение(,ТекстСообщения,,Нстр("ru = 'Режим автозаполнения аналитик'"));
		КонецЕсли; 
	КонецЕсли; 
	
	Если НаборКонстант.бит_РежимАвтоЗаполненияАналитик = НеЗаполнять Тогда
		НаборКонстант.бит_ИспользоватьЗаполнениеАналитикПоНазначениюПлатежа = Ложь;
	КонецЕсли; 

	ТекущийРежимАвтоЗаполненияАналитик = НаборКонстант.бит_РежимАвтоЗаполненияАналитик;
	
	РежимАвтоЗаполненияАналитикПриИзмененииСервер(ЭтотОбъект);
	
	УправлениеВидимостьюДоступностью();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция бит_ТекущаяВерсияПродуктаПриИзмененииНаСервере()
	
	Успех = бит_ЛицензированиеБФCервер.УстановитьВерсиюРешения(бит_ТекущаяВерсияПродукта);
	
	бит_ТекущаяВерсияПродукта = Константы.бит_ТекущаяВерсияПродукта.Получить();
	
	Возврат Успех;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьРучноеРедактиованиеФакта()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	бит_РучнаяКорректировкаФакта.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.бит_РучнаяКорректировкаФакта КАК бит_РучнаяКорректировкаФакта
	|ГДЕ
	|	бит_РучнаяКорректировкаФакта.Значение";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции
 
// Процедура заполняет кэш значений.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей"
						, НаборКонстант["бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей"]);
	фКэшЗначений.Вставить("ВидыОбластейДоступа", ВидыОбластейДоступа.Скопировать());
	
КонецПроцедуры

// Процедура управляет отображением элементов формы.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью()

	ЭтоСемействоУПП = бит_ОбщегоНазначения.ЭтоСемействоУПП();
	
	Элементы.ГруппаРЛС_БП.Видимость    = Не ЭтоСемействоУПП;
	Элементы.ГруппаРЛС_УппКа.Видимость = ЭтоСемействоУПП;

	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		Элементы.ДекорацияРЛС_УппКа_ПереходКТиповымНастройкам.Видимость = Ложь;
	#КонецЕсли
	
	ДоступнаНастройкаРЛС = НаборКонстант.бит_рлс_ИспользоватьРазделениеДоступаНаУровнеЗаписей;		
	Элементы.ВидыОбластейДоступа.Доступность = ДоступнаНастройкаРЛС;
	
	Если бит_ОбщегоНазначения.ЕстьОбъектыМСФО() Тогда			
		Если Метаданные.Константы.Найти("бит_му_ИспользоватьСерииНоменклатуры") <> Неопределено Тогда
		 	Элементы.бит_му_ИспользоватьСерииНоменклатуры.Видимость = ЭтоСемействоУПП;	
		КонецЕсли;
		Если Метаданные.Константы.Найти("бит_му_ИспользоватьХарактеристикиНоменклатуры") <> Неопределено Тогда
		 	Элементы.бит_му_ИспользоватьХарактеристикиНоменклатуры.Видимость = ЭтоСемействоУПП;	
		КонецЕсли;
	Иначе	
		Элементы.СтраницаМСФО.Видимость = Ложь;
	КонецЕсли;
		
	Элементы.бит_РежимФормированияОтчетов.ТолькоПросмотр  	   = бит_ОбщегоНазначенияКлиентСервер.ЭтоФайловаяИБ();
	Элементы.ДекорацияЗаполнитьТипыПроводок.Видимость     	   = НаборКонстант.бит_ВестиУчетПоТипамПроводок;
	Элементы.бит_ИспользоватьЭлектронныеПодписи.Видимость 	   = Константы.ИспользоватьЭлектронныеПодписи.Получить();
	Элементы.бит_ТекущаяВерсияПродукта.Доступность             = бит_ПолныеПрава.ДоступностьОбщихНастроек();
	Элементы.ИспользоватьРучнуюКорректировкуФакта.Доступность  = НЕ ЕстьРучноеРедактиованиеФакта();
	Элементы.бит_ИспользоватьЗаполнениеАналитикПоНазначениюПлатежа.Доступность = ИспользоватьЗаполнениеАналитикПоНазначениюПлатежа;
	Элементы.бит_ОграничиватьДоступКДоговорам.ТолькоПросмотр   = НЕ ДоступнаНастройкаРЛС;
	
КонецПроцедуры

// Процедура определяет доступность редактирования валюты регламентированного учета.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ОпределитьДоступностьРедактированияВалютыРегламентированногоУчета()

	УстановитьПривилегированныйРежим(Истина);
			
	// Запрос по регистрам "бит_ОборотыПоБюджетам", "бит_ПланируемыйРасходДенежныхСредств" 
	// и "бит_ПланируемоеПоступлениеДенежныхСредств" на предмет наличия в них записей.  
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бит_ОборотыПоБюджетам.Период
	|ИЗ
	|	РегистрНакопления.бит_ОборотыПоБюджетам КАК бит_ОборотыПоБюджетам
	|";
	Если Метаданные.РегистрыНакопления.Найти("бит_ПланируемыйРасходДенежныхСредств") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ПланируемыйРасходДенежныхСредств.Период
		|ИЗ
		|	РегистрНакопления.бит_ПланируемыйРасходДенежныхСредств КАК бит_ПланируемыйРасходДенежныхСредств
		|";
	КонецЕсли;
	Если Метаданные.РегистрыНакопления.Найти("бит_ПланируемоеПоступлениеДенежныхСредств") <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	бит_ПланируемоеПоступлениеДенежныхСредств.Период
		|ИЗ
		|	РегистрНакопления.бит_ПланируемоеПоступлениеДенежныхСредств КАК бит_ПланируемоеПоступлениеДенежныхСредств
		|";
	КонецЕсли;
	
	// Если результат запроса не пустой, то запрещаем изменение валюты и меняем надпись.
	Если Не Запрос.Выполнить().Пустой() Тогда
		Элементы.бит_ВалютаУправленческогоУчета.ТолькоПросмотр = Истина;
		Элементы.НадписьПредупреждение.Заголовок = "Изменение валюты запрещено, так как есть проведенные документы в подсистемах ""Бюджетирование"" и ""Казначейство""";
		Элементы.НадписьПредупреждение.ЦветТекста = Новый Цвет(255, 0, 0);
	Иначе
		Элементы.бит_ВалютаУправленческогоУчета.ТолькоПросмотр = бит_ОбщегоНазначения.ЭтоСемействоУПП() Или бит_ОбщегоНазначения.ЭтоСемействоERP();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписки()

	Список = бит_ЛицензированиеБФCервер.ПолучитьСписокВерсийПродуктов();
	Список.Вставить(0,"", "АВТО");
	Для каждого Элемент Из Список Цикл
	
		Элементы.бит_ТекущаяВерсияПродукта.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	бит_ТекущаяВерсияПродукта            = Константы.бит_ТекущаяВерсияПродукта.Получить();
	ИспользоватьРучнуюКорректировкуФакта = Константы.бит_ИспользоватьРучнуюКорректировкуФакта.Получить();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьРучноеРедактированиеФактаПриИзмененииНаСервере()
	
	 Константы.бит_ИспользоватьРучнуюКорректировкуФакта.Установить(ИспользоватьРучнуюКорректировкуФакта);
	 
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРучноеРедактированиеФактаПриИзменении(Элемент)
	
	Если НЕ ИспользоватьРучнуюКорректировкуФакта И ЕстьРучноеРедактиованиеФакта() Тогда
		ИспользоватьРучноеРедактированиеФакта = Истина;
		ТекстСообщения = Нстр("ru = 'Нельзя отменить опцию, т.к. она уже используется.'");
		ПоказатьПредупреждение(,ТекстСообщения);					    
	Иначе
		ИспользоватьРучноеРедактированиеФактаПриИзмененииНаСервере();
		бит_РаботаСДиалогамиКлиент.ОбновитьИнтерфейсПользователя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура РежимАвтоЗаполненияАналитикПриИзмененииСервер(Форма)

	НеЗаполнять = ПредопределенноеЗначение("Перечисление.бит_РежимыАвтоЗаполненияАналитик.НеЗаполнять");
	Если Форма.НаборКонстант.бит_РежимАвтоЗаполненияАналитик = НеЗаполнять Тогда
		Форма.ИспользоватьЗаполнениеАналитикПоНазначениюПлатежа = Ложь;
	Иначе	
		Форма.ИспользоватьЗаполнениеАналитикПоНазначениюПлатежа = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыОбластейДоступаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВидыОбластейДоступаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти
