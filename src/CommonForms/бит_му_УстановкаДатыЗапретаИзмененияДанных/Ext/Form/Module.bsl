&НаСервере
// ТРТИЛЕК Сохранение в параметре сеанса бит_му_ГраницыЗапретаИзмененияДанных границ запрета изменений данных
Процедура УстановитьПараметрГраницыЗапретаИзмененияДанныхМСФО() Экспорт
		
	//Если РольДоступна("ПолныеПрава") И НЕ Константы.ПрименятьДатуЗапретаДляПолныхПрав.Получить() Тогда
	Если РольДоступна("ПолныеПрава") Тогда
		ПараметрыСеанса.бит_му_ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
		Возврат;
	КонецЕсли;
	ТекстЗапросаПоПриоритетамЗаписей = "ВЫБРАТЬ
                                       |    Границы.Организация КАК Организация,
                                       |    Границы.Пользователь КАК Пользователь,
                                       |    ВЫБОР
                                       |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
                                       |            ТОГДА 3
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
                                       |                И ГруппыПользователей.Пользователь = &Пользователь
                                       |            ТОГДА 2
                                       |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
                                       |                И Границы.Пользователь = &Пользователь
                                       |            ТОГДА 1
                                       |    КОНЕЦ КАК Приоритет,
                                       |    Границы.ДатаЗапрета КАК ГраницаЗапретаИзменений
                                       |ИЗ
                                       |    РегистрСведений.бит_ДатыЗапретаРедактирования КАК Границы
                                       |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователей
                                       |        ПО (ГруппыПользователей.Пользователь = &Пользователь И ГруппыПользователей.Ссылка = Границы.Пользователь)";
                                       
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
                   |    Организации.Ссылка как Организация,
                   |    МИНИМУМ(ЕСТЬNULL(ТаблицаГраницыЗапрета.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59))) КАК ГраницаЗапретаИзменений
                   |ИЗ
                   |    Справочник.Организации КАК Организации
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
                   |            Границы.Организация КАК Организация,
                   |            МИНИМУМ(Приоритеты.Приоритет) КАК Приоритет
                   |        ИЗ
                   |            РегистрСведений.бит_ДатыЗапретаРедактирования КАК Границы
                   |                ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК Приоритеты
                   |                ПО Границы.Организация = Приоритеты.Организация
                   |                    И Границы.Пользователь = Приоритеты.Пользователь
                   |        
                   |        СГРУППИРОВАТЬ ПО
                   |            Границы.Организация) КАК ТаблицаПриоритетов
                   |        ПО ТаблицаПриоритетов.Организация = Организации.Ссылка
                   |        ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапросаПоПриоритетамЗаписей + ") КАК ТаблицаГраницыЗапрета
                   |        ПО ТаблицаПриоритетов.Организация = ТаблицаГраницыЗапрета.Организация
                   |            И ТаблицаПриоритетов.Приоритет = ТаблицаГраницыЗапрета.Приоритет
                   |
                   |СГРУППИРОВАТЬ ПО
                   |    Организации.Ссылка";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
    
    РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Соответствие = Неопределено;
	Иначе			
		Соответствие = Новый Соответствие;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Соответствие[Выборка.Организация] = Выборка.ГраницаЗапретаИзменений;
		КонецЦикла;
		ЕСли Соответствие.Количество() = 0 Тогда
			Соответствие = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Соответствие <> Неопределено Тогда
		Соответствие.Вставить(Справочники.Организации.ПустаяСсылка(), Дата('00010101'));
		СохранятьСоответствие = Ложь;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			ЕСли КлючИЗначение.Значение <> Дата('00010101') Тогда
				СохранятьСоответствие = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СохранятьСоответствие Тогда
			Соответствие = Неопределено;
		КонецЕсли;			
	КонецЕсли;
		
	ПараметрыСеанса.бит_му_ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Соответствие, Новый СжатиеДанных(0));	
	
КонецПроцедуры

&НаСервере
// Процедура выполняет запись данных в регистр сведений
// "Границы запрета изменения данных"
//
Функция СохранитьДанные(Отказ = Неопределено)
	
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Отказ = Истина;
		Возврат "Установка даты запрета изменения данных должна выполняться в монопольном режиме.";
	КонецПопытки;
	
	ОбъектДеревоДаты = РеквизитФормыВЗначение("ДеревоДаты");
	Если СпособУказанияДаты = 1 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ // РАЗРЕШЕННЫЕ
		                |	Организации.Ссылка КАК Организация,
		                |	НЕОПРЕДЕЛЕНО КАК Пользователь,
		                |	&ОбщаяДата КАК ДатаЗапрета
		                |ИЗ
		                |	Справочник.Организации КАК Организации";
						
		Если Не РольДоступна("ПолныеПрава") Тогда			
			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
			|ПО Организации.Ссылка = НастройкиПравДоступаПользователей.ОбъектДоступа
	        |	И (НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации))
	        |	И (НастройкиПравДоступаПользователей.Пользователь В	
		    |				(ВЫБРАТЬ
		    |					Состав.Ссылка
		    |				ИЗ
		    |					Справочник.ГруппыПользователей.Состав КАК Состав
		    |				ГДЕ
		    |					Состав.Пользователь = &ТекущийПользователь))			
			|	И (НастройкиПравДоступаПользователей.Запись = ИСТИНА)";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;
						
		Запрос.УстановитьПараметр("ОбщаяДата", ОбщаяДатаЗапрета);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.бит_ДатыЗапретаРедактирования.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			//Запись = РегистрыСведений.бит_му_ГраницыЗапретаИзмененияДанных.СоздатьМенеджерЗаписи();
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Набор.Записать();
		КонецЦикла;
		
	ИначеЕсли СпособУказанияДаты = 2 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ// РАЗРЕШЕННЫЕ
		                |	Организации.Ссылка КАК Организация,
		                |	НЕОПРЕДЕЛЕНО КАК Пользователь
		                |ИЗ
		                |	Справочник.Организации КАК Организации";
						
		Если Не РольДоступна("ПолныеПрава") Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
			|ПО Организации.Ссылка = НастройкиПравДоступаПользователей.ОбъектДоступа
	        |	И (НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации))
	        |	И (НастройкиПравДоступаПользователей.Пользователь В	
		    |				(ВЫБРАТЬ
		    |					Состав.Ссылка
		    |				ИЗ
		    |					Справочник.ГруппыПользователей.Состав КАК Состав
		    |				ГДЕ
		    |					Состав.Пользователь = &ТекущийПользователь))
			|	И (НастройкиПравДоступаПользователей.Запись = ИСТИНА)";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
        Пока Выборка.Следующий() Цикл
            НаборЗаписей  = РегистрыСведений.бит_ДатыЗапретаРедактирования.СоздатьНаборЗаписей();
            НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
            
            Запись = НаборЗаписей.Добавить();
            Запись.Организация = Выборка.Организация;
            Запись.Пользователь = Выборка.Пользователь;
            Запись.ДатаЗапрета = Дата('00010101');
            
			//Запись = РегистрыСведений.бит_му_ГраницыЗапретаИзмененияДанных.СоздатьМенеджерЗаписи();
			//ЗаполнитьЗначенияСвойств(Запись, Выборка);
			СтрокаВДереве = ОбъектДеревоДаты.Строки.Найти(Выборка.Организация, "ОрганизацияПользователь");
			Если СтрокаВДереве <> Неопределено Тогда
				Запись.ДатаЗапрета = СтрокаВДереве.Граница;
				Запись.ОбъектСистемы = СтрокаВДереве.ОбъектСистемы;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЦикла;
		
	ИначеЕсли СпособУказанияДаты = 3 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст  = "ВЫБРАТЬ //РАЗРЕШЕННЫЕ
		                |	Организации.Ссылка КАК Организация
		                |ИЗ
		                |	Справочник.Организации КАК Организации";
						
		Если Не РольДоступна("ПолныеПрава") Тогда
			Запрос.Текст = Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
			|ПО Организации.Ссылка = НастройкиПравДоступаПользователей.ОбъектДоступа
	        |	И (НастройкиПравДоступаПользователей.ВидОбъектаДоступа = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Организации))
	        |	И (НастройкиПравДоступаПользователей.Пользователь В 
		    |				(ВЫБРАТЬ
		    |					Состав.Ссылка
		    |				ИЗ
		    |					Справочник.ГруппыПользователей.Состав КАК Состав
		    |				ГДЕ
		    |					Состав.Пользователь = &ТекущийПользователь))			
			|	И (НастройкиПравДоступаПользователей.Запись = ИСТИНА)";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		КонецЕсли;						
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл		
			
			Набор = РегистрыСведений.бит_ДатыЗапретаРедактирования.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			
			СтрокаВДереве = ОбъектДеревоДаты.Строки.Найти(Выборка.Организация, "ОрганизацияПользователь");
			
			Запись = Набор.Добавить();
			Запись.Организация = Выборка.Организация;
			Запись.Пользователь = Неопределено;
			
			Если СтрокаВДереве = Неопределено Тогда
				Запись.ДатаЗапрета = Дата('00010101');
			Иначе
				Запись.ДатаЗапрета = СтрокаВДереве.Граница;
				Для Каждого СтрокаРоли ИЗ СтрокаВДереве.Строки Цикл
					Запись = Набор.Добавить();
					Запись.Организация = Выборка.Организация;
					Запись.Пользователь = СтрокаРоли.ОрганизацияПользователь;
					Запись.ДатаЗапрета = СтрокаРоли.Граница;
					Запись.ОбъектСистемы = СтрокаРоли.ОбъектСистемы;
				КонецЦикла;
			КонецЕсли;			
			
			Набор.Записать();
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	УстановитьПараметрГраницыЗапретаИзмененияДанныхМСФО();
	Модифицированность = Ложь;
	
	УстановитьМонопольныйРежим(Ложь);
	
КонецФункции // СохранитьДанные

&НаКлиенте
Процедура КнопкаЗаписать(Команда)
	Результат = СохранитьДанные();
	Если Результат <> Неопределено Тогда
		Предупреждение(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОК(Команда)
	Отказ = Ложь;
	Результат = СохранитьДанные(Отказ);
	Если Результат <> Неопределено Тогда
		Предупреждение(Результат);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть();
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПользовательУжеЕсть(Ид, Пользователь)
	ОбъектДеревоДаты = РеквизитФормыВЗначение("ДеревоДаты");
	КорневаяСтрока = ОбъектДеревоДаты.Строки.Найти(Ид, "Ид");
    Возврат КорневаяСтрока.Строки.Найти(Пользователь) <> Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьПравоНаИзменений(Ид)
	ОбъектДеревоДаты = РеквизитФормыВЗначение("ДеревоДаты");
	КорневаяСтрока = ОбъектДеревоДаты.Строки.Найти(Ид, "Ид");
	Возврат КорневаяСтрока.ПравоНаИзменение;
КонецФункции

&НаСервере
Функция ПолучитьОрганизацияПользователь(Ид)
	ОбъектДеревоДаты = РеквизитФормыВЗначение("ДеревоДаты");
	КорневаяСтрока = ОбъектДеревоДаты.Строки.Найти(Ид, "Ид");
	Возврат КорневаяСтрока.ОрганизацияПользователь;
КонецФункции

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	КорневаяСтрока = Элементы.ДеревоДаты.ТекущиеДанные;
	Если КорневаяСтрока = Неопределено Тогда
		// если в табличном поле не выбрана строка
		// добавление в дерево невозможно
		Возврат;
	КонецЕсли;
	
	Если НЕ КорневаяСтрока.ТипСтроки = 1 Тогда
		// Если выбрана строка на уровне пользователя или группы пользователей
		// новую строку добавляем в ту же ветку дерева
		КорневаяСтрока = КорневаяСтрока.ПолучитьРодителя();
	КонецЕсли;    

	ТипСтроки = ?(Команда.Имя = "ДобавитьПользователя", 3, 2);
	
	// Если у пользователя нет права на редактирование данных
	// этой ветки - добавление в нее невозможно.
	Если Не КорневаяСтрока.ПравоНаИзменение Тогда
	  Сообщить("У Вас нет права редактирования данных организации " + КорневаяСтрока.ОрганизацияПользователь, СтатусСообщения.Важное);
	  Возврат;
	КонецЕсли;

	Если ТипСтроки = 2 Тогда
	   //ФормаВыбора = ПолучитьФорму("Справочник.ГруппыПользователей.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Ссылка", ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи"))), ЭтаФорма);
	   ФормаВыбора = ПолучитьФорму("Справочник.ГруппыПользователей.ФормаВыбора", Новый Структура("РежимВыбора,ЗакрыватьПриВыборе", Истина, Истина), ЭтаФорма);
	   Отбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	   Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	   Отбор.Использование = Истина;
	   Отбор.ЛевоеЗначение = ФормаВыбора.Список.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Ссылка").Поле;
	   Отбор.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи");
	   ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
	Иначе    
	   ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	   ВвестиЗначение(ВыбранноеЗначение);
	КонецЕсли;    
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
	    Возврат;
	КонецЕсли;    
	
    Если ПользовательУжеЕсть(КорневаяСтрока.Ид, ВыбранноеЗначение) Тогда     
        //ЭлементыФормы[ИмяДерева].ТекущаяСтрока = СуществующаяСтрока;
        Возврат;
    КонецЕсли;  
    
    СтрокаПользователя = КорневаяСтрока.ПолучитьЭлементы().Добавить();
    
    СтрокаПользователя.ОрганизацияПользователь = ВыбранноеЗначение;
    СтрокаПользователя.Граница              = КорневаяСтрока.Граница;
    СтрокаПользователя.ТипСтроки            = ТипСтроки;		
    СтрокаПользователя.ПравоНаИзменение     = Истина;
	СтрокаПользователя.ИдРодителя = КорневаяСтрока.Ид;
	СтрокаПользователя.Уровень = ТипСтроки - 1;
	СтрокаПользователя.Картинка = СтрокаПользователя.ТипСтроки - 1;
    
	//КорневаяСтрока.Строки.Сортировать("ТипСтроки, ОрганизацияПользователь");
    //Элементы[ИмяДерева].ТекущаяСтрока = СтрокаПользователя;
	
	Элементы.ДеревоДаты.Развернуть(КорневаяСтрока.ПолучитьИдентификатор());
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	ТекущиеДанные = Элементы.ДеревоДаты.ТекущиеДанные;
    
    Если ТекущиеДанные = Неопределено тогда
		Возврат;
    КонецЕсли;	
    
    Если НЕ ТекущиеДанные.ПравоНаИзменение тогда
        СтрокаОрганизации = ?(ТекущиеДанные.Уровень = 0, ТекущиеДанные, ДеревоДаты.Строки.НайтиСтроки(Новый Структура("ИдРодителя", ТекущиеДанные.ИдРодителя))[0]);
        Сообщить("У Вас нет права на удаление данных по организации " + СокрЛП(СтрокаОрганизации.ОрганизацияПользователь), СтатусСообщения.Важное);
        
        Возврат;
    КонецЕсли;	                           
    
    Если ТекущиеДанные.Уровень = 0 Тогда
        Сообщить("Удаление организации невозможно. Вы можете удалить пользователя или группу пользователей.", СтатусСообщения.Важное);
        
        Возврат;        
    КонецЕсли;
	
	ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДатыПередНачаломИзменения(Элемент, Отказ)
	Если Не Элементы.ДеревоДаты.ТекущиеДанные.ПравоНаИзменение Тогда
		Отказ = Истина;
		Предупреждение("Недостаточно прав для изменения даты запрета по данной организации");
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДатыГраницаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособУказанияДатыПриИзменении(Элемент)
	ПриИзмененииСпособаУказания();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиПоМассиву(МассивСтрокКРазвороту)
	Для Каждого текВетка Из ДеревоДаты.ПолучитьЭлементы() Цикл
		Если МассивСтрокКРазвороту.Найти(текВетка.Ид) <> Неопределено Тогда
			Элементы.ДеревоДаты.Развернуть(текВетка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСпособаУказания()
    
    Если СпособУказанияДаты = 1 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ОбщаяДата;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.ДатаПоОрганизациям;
		Элементы.ДеревоДатыОрганизацияПользователь.Заголовок = "Организация" + ?(СпособУказанияДаты = 3, " / группа пользователей(пользователь)", "");
		РазвернутьСтрокиПоМассиву(ЗаполнитьДеревоДат());
        УстановитьВидимость();
    КонецЕсли;    
    
КонецПроцедуры // ПриИзмененииСпособаУказания

&НаКлиенте
Процедура ОбщаяДатаЗапретаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
    
    Если СпособУказанияДаты = 2 Тогда
        Элементы.КП.Видимость = Ложь;
		Элементы.ДеревоДаты.КонтекстноеМеню.Доступность = Ложь;
    Иначе
        Элементы.КП.Видимость = Истина;
		Элементы.ДеревоДаты.КонтекстноеМеню.Доступность = Истина;
    КонецЕсли;                           
    
КонецПроцедуры // УстановитьВидимость

&НаСервере
Функция ЗаполнитьДеревоДат()
	ОбъектДеревоДаты = РеквизитФормыВЗначение("ДеревоДаты");
	ОбъектДеревоДаты.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Профили.Ссылка,
	               |	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа
	               |ПОМЕСТИТЬ Профили
	               |ИЗ
	               |	Справочник.ПрофилиГруппДоступа КАК Профили
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	               |			И (ГруппыДоступа.Пользователь = &ТекущийПользователь
	               |				ИЛИ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	               |			И (ГруппыДоступаПользователи.Пользователь = &ТекущийПользователь)
	               |ГДЕ
	               |	НЕ Профили.ПометкаУдаления
	               |	И НЕ ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Профили.Ссылка КАК ГруппаДоступа,
	               |	ПрофилиВидыДоступа.ВидДоступа,
	               |	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа,
	               |	ПрофилиВидыДоступа.ВсеРазрешены
	               |ПОМЕСТИТЬ Доступ
	               |ИЗ
	               |	Профили КАК Профили
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиВидыДоступа
	               |		ПО Профили.Ссылка = ПрофилиВидыДоступа.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	               |		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	               |			И (ПрофилиВидыДоступа.ВидДоступа = ГруппыДоступаЗначенияДоступа.ВидДоступа)
	               |ГДЕ
	               |	НЕ ПрофилиВидыДоступа.Предустановленный
	               |	И ГруппыДоступаЗначенияДоступа.Ссылка.Пользователь = &ТекущийПользователь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Организации.Ссылка КАК Организация,
	               |	ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) КАК Пользователь,
	               |	ЕСТЬNULL(Границы.ДатаЗапрета, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)) КАК ГраницаЗапретаИзменений,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	               |			ТОГДА 1
	               |		КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
	               |			ТОГДА 2
	               |		КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
	               |			ТОГДА 3
	               |	КОНЕЦ КАК ПризнакТипаСтроки,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА Доступ.ВсеРазрешены ЕСТЬ NULL 
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ НЕ Доступ.ВсеРазрешены
	               |		КОНЕЦ) КАК ПравоНаИзменение,
	               |	Границы.ОбъектСистемы
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДатыЗапретаРедактирования КАК Границы
	               |		ПО (Границы.Организация = Организации.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Доступ КАК Доступ
	               |		ПО Организации.Ссылка = Доступ.ЗначениеДоступа
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Организации.Ссылка,
	               |	ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО),
	               |	ЕСТЬNULL(Границы.ДатаЗапрета, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)),
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	               |			ТОГДА 1
	               |		КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
	               |			ТОГДА 2
	               |		КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
	               |			ТОГДА 3
	               |	КОНЕЦ,
	               |	Границы.ОбъектСистемы
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	ПризнакТипаСтроки,
	               |	Пользователь
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
				   
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивСтрокКРазвороту = Новый Массив;
	ЕстьРольПолныеПрава = РольДоступна("ПолныеПрава");
	Ид = 0; ИдРодителя = 0;
	Пока Выборка.Следующий() Цикл
				
		Если Выборка.Пользователь = Неопределено Тогда
			СтрокаОрганизации = ОбъектДеревоДаты.Строки.Добавить();
			
			СтрокаОрганизации.ОрганизацияПользователь   = Выборка.Организация;
			СтрокаОрганизации.Граница           = Выборка.ГраницаЗапретаИзменений;		
			СтрокаОрганизации.ПравоНаИзменение  = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;
			СтрокаОрганизации.ОбъектСистемы  = Выборка.ОбъектСистемы;
            СтрокаОрганизации.ТипСтроки         = Выборка.ПризнакТипаСтроки;
			Ид = Ид + 1;
			СтрокаОрганизации.Ид = Ид;
			СтрокаОрганизации.ИдРодителя = 0;
			СтрокаОрганизации.Уровень = 0;
			ИдРодителя = Ид;
			СтрокаОрганизации.Картинка = СтрокаОрганизации.ТипСтроки - 1;
		Иначе		
			
			Если СтрокаОрганизации = Неопределено ИЛИ СтрокаОрганизации.ОрганизацияПользователь <> Выборка.Организация Тогда
				СтрокаОрганизации = ОбъектДеревоДаты.Строки.Добавить();
				СтрокаОрганизации.ОрганизацияПользователь   =Выборка.Организация;
				СтрокаОрганизации.ПравоНаИзменение  = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;
				СтрокаОрганизации.ОбъектСистемы  = Выборка.ОбъектСистемы;
				СтрокаОрганизации.ТипСтроки         = 1;
				Ид = Ид + 1;
				СтрокаОрганизации.Ид = Ид;
				СтрокаОрганизации.ИдРодителя = 0;
				СтрокаОрганизации.Уровень = 0;
				ИдРодителя = Ид;
				СтрокаОрганизации.Картинка = СтрокаОрганизации.ТипСтроки - 1;
			КонецЕсли;				
			МассивСтрокКРазвороту.Добавить(Ид);
			
			Если СпособУказанияДаты = 3 Тогда				
				СтрокаПользователя = СтрокаОрганизации.Строки.Добавить();                
				СтрокаПользователя.ОрганизацияПользователь      = Выборка.Пользователь;
				СтрокаПользователя.Граница              = Выборка.ГраницаЗапретаИзменений;
				СтрокаПользователя.ПравоНаИзменение     = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;
				СтрокаОрганизации.ОбъектСистемы  = Выборка.ОбъектСистемы;
                СтрокаПользователя.ТипСтроки            = Выборка.ПризнакТипаСтроки;
				Ид = Ид + 1;
				СтрокаОрганизации.Ид = Ид;
				СтрокаОрганизации.ИдРодителя = ИдРодителя;
				СтрокаОрганизации.Уровень = 1;
				СтрокаОрганизации.Картинка = СтрокаОрганизации.ТипСтроки - 1;
			КонецЕСли;		
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектДеревоДаты, "ДеревоДаты");
	Возврат МассивСтрокКРазвороту;
КонецФункции // ЗаполнитьДеревоДат

&НаСервере
Процедура ОпределитьСпособУказанияДаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	бит_ДатыЗапретаРедактирования.ДатаЗапрета КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.бит_ДатыЗапретаРедактирования КАК бит_ДатыЗапретаРедактирования";
	
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		СпособУказанияДаты = 1;
		ОбщаяДатаЗапрета = Дата('00010101');
	ИначеЕСли ТаблицаЗапроса.Количество() = 1 Тогда
		СпособУказанияДаты = 1;
		ОбщаяДатаЗапрета = ТаблицаЗапроса[0].ДатаЗапрета;
	Иначе		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ГраницыЗапрета.ДатаЗапрета, ДАТАВРЕМЯ(1, 1, 1)))
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_ДатыЗапретаРедактирования КАК ГраницыЗапрета
		|		ПО ГраницыЗапрета.Организация = Организации.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Организации.Ссылка
		|ИМЕЮЩИЕ КОЛИЧЕСТВО (РАЗЛИЧНЫЕ ЕСТЬNULL(ГраницыЗапрета.ДатаЗапрета, ДАТАВРЕМЯ(01,01,01))) > 1";
		
		Результат = Запрос.Выполнить();
		СпособУказанияДаты = 2 + Число(НЕ Результат.Пустой());		
	КонецЕсли;		
	
КонецПроцедуры // ОпределитьСпособУказанияДаты

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьДанные(Отказ);
		КонецЕсли;		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОпределитьСпособУказанияДаты();
	ПриИзмененииСпособаУказания();	    
КонецПроцедуры
