#Область ОписаниеПеременных

&НаКлиенте
Перем Ссылка Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыПриСозданииНаСервере();
	УстановитьВидимостьДоступностьЭлементовПриСозданииНаСервере();
	СброситьРазмерыИПоложениеОкна();
	ВывестиПоясняющийТекст();
	УстановитьПараметрыВыбораНоменклатуры();
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Характеристика", "Номенклатура");
	СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораШаблонаЭтикетки(
		ЭтотОбъект,
		Элементы.ШаблонЭтикетки.Имя);
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ВидимостьШаблонаЭтикетки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ШаблонЭтикетки");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры
		
&НаСервере
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 1 Тогда
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
			ЭтотОбъект, ПараметрыСканирования.ДопустимыеВидыПродукции[0], "Номенклатура");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяФормыУказанияСерии = "";
	ШтрихкодированиеИСКлиентПереопределяемый.ЗаполнитьПолноеИмяФормыУказанияСерии(ИмяФормыУказанияСерии);
	
	Если ИсточникВыбора.ИмяФормы = ИмяФормыУказанияСерии Тогда
		Серия = ВыбранноеЗначение.Значение;
	КонецЕсли;
	
	Если ТипыНоменклатуры.НайтиПоЗначению(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		
		Если ВыбранноеЗначение <> Номенклатура
			И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			
			Номенклатура = ВыбранноеЗначение;
			ОтключитьОтметкуНезаполненного();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияУдалосьПодобрать.Видимость = ЗначениеЗаполнено(Серия);
	
	ОтключитьОтметкуНезаполненного();
	ОбновитьДоступностьКомандыГотово();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
		ЭтотОбъект, Источник, Событие, Данные);
	
	ВводШтрихкодаЗавершение(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Новый Структура;
	ТекущиеДанные.Вставить("Номенклатура",               Номенклатура);
	ТекущиеДанные.Вставить("Характеристика",             Характеристика);
	ТекущиеДанные.Вставить("Серия",                      Неопределено);
	ТекущиеДанные.Вставить("ИдентификаторТекущейСтроки", 1);
	ТекущиеДанные.Вставить("СтатусУказанияСерий",        1);
	ТекущиеДанные.Вставить("ХарактеристикиИспользуются", ЗначениеЗаполнено(Характеристика));
	ТекущиеДанные.Вставить("Количество",                 1);
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, "", Ложь, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	ОбновитьДоступностьКомандыГотово();
	
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	
	ОбновитьДоступностьКомандыГотово();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	СтруктурыДанных = ШтрихкодированиеИСКлиент.ИнициализацияСтруктурыДанныхСохраненногоВыбора();
	СтруктурыДанных.ДанныеВыбора.Номенклатура        = Номенклатура;
	СтруктурыДанных.ДанныеВыбора.Характеристика      = Характеристика;
	СтруктурыДанных.ДанныеВыбора.Серия               = Серия;
	СтруктурыДанных.ЗапомнитьВыбор                   = ЗапомнитьВыбор;
	СтруктурыДанных.ДанныеВыбора.ЭтоКодВводаОстатков = ЭтоКодВводаОстатков;
	
	Если ЗначениеЗаполнено(GTIN) Тогда
		СтруктурыДанных.ДанныеВыбора.GTIN = GTIN;
	Иначе
		СтруктурыДанных.ДанныеВыбора.GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
	КонецЕсли;
	
	Закрыть(СтруктурыДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктурыДанных = ШтрихкодированиеИСКлиент.ИнициализацияСтруктурыДанныхСохраненногоВыбора();
	
	СтруктурыДанных.ЗапомнитьВыбор = ЗапомнитьВыбор;
	
	СтруктурыДанных.ДанныеВыбора.Номенклатура   = Номенклатура;
	СтруктурыДанных.ДанныеВыбора.Характеристика = Характеристика;
	СтруктурыДанных.ДанныеВыбора.Серия          = Серия;
	
	СтруктурыДанных.ДанныеВыбора.ШаблонЭтикетки   = ШаблонЭтикетки;
	СтруктурыДанных.ДанныеВыбора.СразуНаПринтер   = СразуНаПринтер;
	СтруктурыДанных.ДанныеВыбора.ШаблонМаркировки = ШаблонКодаМаркировки;
	
	Закрыть(СтруктурыДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоясняющийТекстОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СкопироватьШтрихкодБуферОбмена" Тогда
		ИнтеграцияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, ШтрихкодEAN);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СкопироватьКодМаркировкиВБуферОбмена" Тогда 
		ИнтеграцияИСКлиент.СкопироватьШтрихКодВБуферОбмена(Элементы.БуферОбмена, КодМаркировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводШтрихкодаЗавершение", ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НоменклатураПриИзмененииСервер()
	
	ПроверитьНеобходимостьЗаполненияСерии();
	ХарактеристикиИспользуются = ИнтеграцияИС.ПризнакИспользованияХарактеристик(Номенклатура);
	ОбновитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура СброситьРазмерыИПоложениеОкна()
	
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ХранилищеСистемныхНастроек.Удалить("Обработка.ПроверкаИПодборТабачнойПродукции.Форма.ФормаВыбораСерии", "", ИмяПользователя);
	КонецЕсли;
	КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоясняющийТекст()
	
	МассивСтрок = Новый Массив;
	
	Элементы.ПоясняющийТекст.Высота = 1;
	Если Не РежимПечатиЭтикеток Тогда
		
		Элементы.ПоясняющийТекст.Высота = 3;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обработка кода маркировки:'"),, ЦветаСтиля.ПоясняющийТекст));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(КодМаркировки, Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,, "СкопироватьКодМаркировкиВБуферОбмена"));
		МассивСтрок.Добавить(Символы.ПС);
		
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Номенклатура) = Тип("Массив") Тогда
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Штрихкоду'"),, ЦветаСтиля.ПоясняющийТекст));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ШтрихкодEAN, Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,, "СкопироватьШтрихкодБуферОбмена"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'сопоставлено несколько номенклатурных позиций. Укажите номенклатуру.'"),, ЦветаСтиля.ПоясняющийТекст));
		
	ИначеЕсли Не ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите номенклатуру.'"),, ЦветаСтиля.ПоясняющийТекст));
		
	Иначе
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите серию номенклатуры.'"),, ЦветаСтиля.ПоясняющийТекст));
		
	КонецЕсли;
	
	Если РежимПечатиЭтикеток Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите шаблон этикетки.'"),, ЦветаСтиля.ПоясняющийТекст));
	КонецЕсли;
	
	ПоясняющийТекст = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПриСозданииНаСервере()
	
	Заголовок = НСтр("ru = 'Уточнение данных'");
	
	ТипыНоменклатуры.ЗагрузитьЗначения(Метаданные.ОпределяемыеТипы.Номенклатура.Тип.Типы());
	
	ИспользоватьСерииНоменклатуры          = ИнтеграцияИС.СерииИспользуются();
	ИспользоватьХарактеристикиНоменклатуры = ИнтеграцияИС.ХарактеристикиИспользуются();
	
	ПараметрыСканирования = Параметры.ПараметрыСканирования;
	Если ТипЗнч(Параметры.Номенклатура) = Тип("Массив") Тогда
		
		Элементы.Номенклатура.РежимВыбораИзСписка = Истина;
		Элементы.Номенклатура.СписокВыбора.ЗагрузитьЗначения(Параметры.Номенклатура);
		
	Иначе
		
		Номенклатура   = Параметры.Номенклатура;
		Характеристика = Параметры.Характеристика;
		Серия          = Параметры.Серия;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Элементы.Номенклатура.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Номенклатура.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Элементы.Характеристика.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Характеристика.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	КодМаркировки            = Параметры.КодМаркировки;
	ШтрихкодEAN              = Параметры.ШтрихкодEAN;
	ПараметрыУказанияСерий   = Параметры.ПараметрыУказанияСерий;
	Склад                    = Параметры.Склад;
	Документ                 = Параметры.Документ;
	ЭтоКодВводаОстатков      = ШтрихкодированиеИС.ЭтоШтрихкодВводаОстатков(GTIN) Или ШтрихкодированиеИС.ЭтоШтрихкодВводаОстатков(ШтрихкодEAN);
	ВидимостьШаблонаЭтикетки = РегистрыСведений.ПулКодовМаркировкиСУЗ.ВидимостьШаблонаЭтикетки();
	
	ИзменитьПараметрыУказанияСерий();
	ПроверитьНеобходимостьЗаполненияСерии();
	ЗаполнитьСерииПоДокументу();
	ЗаполнитьДанныеДляПечатиЭтикеток();
	ХарактеристикиИспользуются = ИнтеграцияИС.ПризнакИспользованияХарактеристик(Номенклатура);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляПечатиЭтикеток()
	
	РежимПечатиЭтикеток       = Параметры.РежимПечатиЭтикеток;
	СразуНаПринтер            = Параметры.СразуНаПринтер;
	ШаблонЭтикетки            = Параметры.ШаблонЭтикетки;
	
	Если ЗначениеЗаполнено(Параметры.ШаблоныКодовМаркировки) Тогда
		
		Элементы.ШаблонКодаМаркировки.СписокВыбора.ЗагрузитьЗначения(Параметры.ШаблоныКодовМаркировки);
		
		Если Элементы.ШаблонКодаМаркировки.СписокВыбора.НайтиПоЗначению(Параметры.ШаблонКодаМаркировки) <> Неопределено Тогда
			ШаблонКодаМаркировки = Параметры.ШаблонКодаМаркировки;
		Иначе
			ШаблонКодаМаркировки = Элементы.ШаблонКодаМаркировки.СписокВыбора.Получить(0).Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидПродукции = ИнтеграцияИСМП.ВидПродукцииПоНоменклатуре(Номенклатура);
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
		ШаблонКодаМаркировки = Перечисления.ШаблоныКодовМаркировкиСУЗ.Обувь;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		ШаблоныКодовМаркировки = Новый Массив;
		ШаблоныКодовМаркировки.Добавить(Перечисления.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек);
		ШаблоныКодовМаркировки.Добавить(Перечисления.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка);
		Элементы.ШаблонКодаМаркировки.СписокВыбора.ЗагрузитьЗначения(ШаблоныКодовМаркировки);
		Элементы.ШаблонКодаМаркировки.РежимВыбораИзСписка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДоступностьЭлементов()
	
	Элементы.Характеристика.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	Элементы.Серия.Видимость          = ИспользоватьСерииНоменклатуры;
	Элементы.ДекорацияУдалосьПодобрать.Видимость = Ложь;
	
	ОбновитьОтображениеПоляСерия();
	ОбновитьОтображениеПоляХарактеристика();
	ОбновитьДоступностьКомандыГотово();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПоляСерия()
	
	Если ТребуетсяУказаниеСерии Тогда
		
		Если ЗначениеЗаполнено(Склад) Тогда
			Элементы.Серия.ТолькоПросмотр = Ложь;
			Элементы.Серия.ПодсказкаВвода = "";
			Элементы.Серия.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<допустимо указание серии>'");
			Элементы.Серия.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.Серия.ТолькоПросмотр = Истина;
		Элементы.Серия.ПодсказкаВвода = НСтр("ru = '<серии не используются>'");
		Элементы.Серия.АвтоОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПоляХарактеристика()
	
	Если ХарактеристикиИспользуются Тогда
		Элементы.Характеристика.ПодсказкаВвода            = "";
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Истина;
		Элементы.Характеристика.ТолькоПросмотр            = Ложь;
	Иначе
		Элементы.Характеристика.ПодсказкаВвода            = НСтр("ru = '<характеристики не используются>'");
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Характеристика.ТолькоПросмотр            = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПараметрыУказанияСерий()
	
	Если ПараметрыУказанияСерий = Неопределено
		Или Не ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУказанияСерий.ТоварВШапке = Ложь;
	ПараметрыУказанияСерий.ИмяТЧСерии  = ПараметрыУказанияСерий.ИмяТЧТовары;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтаФорма";
	СтатусУказанияСерий = 1;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьЗаполненияСерии()
	
	ТребуетсяУказаниеСерии = Ложь;
	Если ПараметрыУказанияСерий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляРасчетаСерии  = Новый Структура("Склад, Номенклатура, Характеристика", Склад, Номенклатура, Характеристика);
	ШтрихкодированиеИСПереопределяемый.ПриОпределинииНеобходимостиВыбораСерии(
		ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяУказаниеСерии);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьКомандыГотово()
	
	Если Не ЗначениеЗаполнено(Номенклатура)
		Или ТребуетсяУказаниеСерии И Не ЗначениеЗаполнено(Серия) И ЗначениеЗаполнено(Склад)
		Или ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Характеристика) Тогда
		Элементы.ЗавершитьРедактирование.Доступность = Ложь;
	Иначе
		Элементы.ЗавершитьРедактирование.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовПриСозданииНаСервере()
	
	ОбновитьВидимостьДоступностьЭлементов();
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Элементы.Характеристика.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ГруппаПечатьЭтикеток.Видимость = РежимПечатиЭтикеток;
	Если РежимПечатиЭтикеток Тогда
		Элементы.ЗавершитьРедактирование.Видимость = Ложь;
		Элементы.Печать.Видимость                  = Истина;
		Элементы.Печать.КнопкаПоУмолчанию          = Истина;
	КонецЕсли;
	Элементы.ШаблонЭтикетки.Видимость = ВидимостьШаблонаЭтикетки;
	
	Элементы.ШаблонКодаМаркировки.Видимость = Элементы.ШаблонКодаМаркировки.СписокВыбора.Количество() > 1
		Или Не ЗначениеЗаполнено(ШаблонКодаМаркировки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСерииПоДокументу()
	
	Если ИспользоватьСерииНоменклатуры
		И ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
		ДоступныеСерии = ДоступныеСерииПоДаннымТаблицыТовары(ДанныеДокументаОснования);
		
		Если ДоступныеСерии.Количество() = 0 Тогда
			
			Элементы.Серия.ТолькоПросмотр = Истина;
			
		Иначе
			
			Элементы.Серия.КнопкаВыпадающегоСписка = Истина;
			Элементы.Серия.СписокВыбора.ЗагрузитьЗначения(ДоступныеСерии);
			Если ДоступныеСерии.Количество() = 1 Тогда
				Серия = ДоступныеСерии[0];
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИспользоватьСерииНоменклатуры
		И ЗначениеЗаполнено(ПараметрыСканирования.ДанныеТаблицыТовары) Тогда
		
		ДанныеТаблицыТовары = ПолучитьИзВременногоХранилища(ПараметрыСканирования.ДанныеТаблицыТовары);
		ДоступныеСерии = ДоступныеСерииПоДаннымТаблицыТовары(ДанныеТаблицыТовары);
		
		Если ДоступныеСерии.Количество() > 0 Тогда
			
			Элементы.Серия.КнопкаВыпадающегоСписка = Истина;
			Для Каждого Серия Из ДоступныеСерии Цикл
			
				ДоступныеСерии = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДоступныеСерии);
				Если ЗначениеЗаполнено(Серия) Тогда
					Элементы.Серия.СписокВыбора.Добавить(Серия);
				Иначе
					Элементы.Серия.СписокВыбора.Добавить(Серия, НСтр("ru='<Неопределена>'"));
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДоступныеСерииПоДаннымТаблицыТовары(ДанныеТаблицыТовары)
	
	СписокДоступныхСерий = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", Номенклатура);
	Если ИнтеграцияИС.ХарактеристикиИспользуются() Тогда
		Отбор.Вставить("Характеристика", Характеристика);
	КонецЕсли;
	
	НайденныеСтроки = ДанныеТаблицыТовары.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		СписокДоступныхСерий.Добавить(Строка.Серия);
	КонецЦикла;
	
	СписокДоступныхСерий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокДоступныхСерий);
	
	Возврат СписокДоступныхСерий;
	
КонецФункции

&НаКлиенте
Процедура ВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТекстОшибки = "";
	ДанныеШтрихкода.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
	ДанныеШтрихкода.Вставить("ШтрихкодBase64", Истина);
	
	ШтрихкодНайден = Ложь;
	ОбработатьШтрихкод(ДанныеШтрихкода, ШтрихкодНайден, ТекстОшибки);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.ТекстОшибки = ТекстОшибки;
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытия);
		
		Возврат;
	КонецЕсли;
	
	Если Не ШтрихкодНайден Тогда
		
		Штрихкоды = Новый Массив;
		Штрихкоды.Добавить(ДанныеШтрихкода);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеСопоставленияНеизвестныхШтрихкодов", ЭтотОбъект);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Штрихкоды, ЭтотОбъект, ОповещениеОЗакрытии);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкод(ДанныеШтрихкода, ШтрихкодНайден, ТекстОшибки = "")
	
	Если Не ДопустимыйФорматШтрихкода(ДанныеШтрихкода) Тогда
		ТекстОшибки = НСтр("ru='Недопустимый формат штрихкода'");
		Возврат;
	КонецЕсли;
	
	Штрихкоды = Новый Массив;
	Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(Штрихкоды);
	
	Если ДанныеПоШтрихкодамEAN.Количество() = 0
		Или Не ЗначениеЗаполнено(ДанныеПоШтрихкодамEAN[0].Номенклатура) Тогда
		ШтрихкодНайден = Ложь;
		Возврат;
	КонецЕсли;
	
	ШтрихкодНайден = Истина;
	Номенклатура   = ДанныеПоШтрихкодамEAN[0].Номенклатура;
	Характеристика = ДанныеПоШтрихкодамEAN[0].Характеристика;
	НоменклатураПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияНеизвестныхШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
		ОбработатьШтрихкод(Результат.ЗарегистрированныеШтрихкоды[0], Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДопустимыйФорматШтрихкода(ДанныеШтрихкода)
	
	Если Не ДанныеШтрихкода.Свойство("ШтрихкодBase64") Или Не ДанныеШтрихкода.ШтрихкодBase64 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗначениеШтрихкода = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ДанныеШтрихкода.Штрихкод);
	Если НайтиНедопустимыеСимволыXML(ЗначениеШтрихкода) > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеШтрихкода.Штрихкод = ЗначениеШтрихкода;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеСтроки = Новый Структура("Номенклатура", Номенклатура);
	ДанныеСтроки.Вставить("Характеристика",        Характеристика);
	ДанныеСтроки.Вставить("Серия",                 Серия);
	ДанныеСтроки.Вставить("Количество",            1);
	
	ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент, ДанныеСтроки, СтандартнаяОбработка, ВидыПродукции);
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти