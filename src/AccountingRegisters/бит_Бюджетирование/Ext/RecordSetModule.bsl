#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПередЗаписью".
// 
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Количество()>0 Тогда
	    Заголовок = СокрЛП(ЭтотОбъект.Отбор.Регистратор.Значение);
	Иначе
		Возврат;
	КонецЕсли; 
	
	ВидыСоставныхСубконто = Новый Соответствие;

	Для Каждого Проводка Из ЭтотОбъект Цикл
        
        СвСчДт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
        СвСчКт = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
        
		Если НЕ ЗначениеЗаполнено(Проводка.СчетДт) И НЕ СвСчКт.Забалансовый Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Проводка № "+(Проводка.НомерСтроки+1) +" <"+Проводка.Содержание+">: не заполнен счет дебета.",Отказ,Заголовок);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Проводка.СчетКт) И НЕ СвСчДт.Забалансовый Тогда
			бит_ОбщегоНазначения.СообщитьОбОшибке("Проводка № "+(Проводка.НомерСтроки+1) +" <"+Проводка.Содержание+">: не заполнен счет кредита.",Отказ,Заголовок);
		КонецЕсли;
		
		бит_БухгалтерияСервер.КорректировкаПустыхЗначенийСубконто(Проводка.СубконтоДт, ВидыСоставныхСубконто);
		бит_БухгалтерияСервер.КорректировкаПустыхЗначенийСубконто(Проводка.СубконтоКт, ВидыСоставныхСубконто);
				
	КонецЦикла;

	// Проверка фиксации
	ОтборРегистратор = ЭтотОбъект.Отбор.Найти("Регистратор");
	Если НЕ ОтборРегистратор = Неопределено 
		И ОтборРегистратор.Использование 
		И ОтборРегистратор.ВидСравнения = ВидСравнения.Равно 
		И ЗначениеЗаполнено(ОтборРегистратор.Значение) Тогда
		
		// Проверяем предыдущие движения на наличе зафиксированных данных.
		Регистратор = ОтборРегистратор.Значение; 
		
	Иначе
		
		Регистратор = Неопределено;
		
	КонецЕсли;	
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.бит_ОперацияБюджетирование") Тогда
		
		// В остальных случаях проводки РБ.бит_Бюджетирование формируются по движениям РН.бит_ОборотыПоБюджетам, 
		// проверка фиксации осуществляется в РН.
		
		НаборПред = РегистрыБухгалтерии.бит_Бюджетирование.СоздатьНаборЗаписей();
		НаборПред.Отбор.Регистратор.Установить(Регистратор);
		НаборПред.Прочитать();
		
		Если НаборПред.Количество() > 0 Тогда
			
			ТабДвижений = НаборПред.Выгрузить();
			ПерваяСтрока = ТабДвижений[0];
			
			бит_Бюджетирование.ПроверитьФиксацию(ПерваяСтрока.Сценарий, ТабДвижений, Отказ, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтотОбъект.Количество() > 0 И НЕ Отказ Тогда
		
		// Проверяем текущие движения на наличе зафиксированных данных.
		ТабДвижений = ЭтотОбъект.Выгрузить();
		ПерваяСтрока = ТабДвижений[0];
		
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.бит_ОперацияБюджетирование") Тогда
			
			// В остальных случаях проводки РБ.бит_Бюджетирование формируются по движениям РН.бит_ОборотыПоБюджетам, 
			// проверка фиксации осуществляется в РН.			
			
			бит_Бюджетирование.ПроверитьФиксацию(ПерваяСтрока.Сценарий, ТабДвижений, Отказ, Истина);
			
		КонецЕсли; 
		
	КонецЕсли;		
	
КонецПроцедуры // ПередЗаписью()  

#КонецОбласти

#КонецЕсли
