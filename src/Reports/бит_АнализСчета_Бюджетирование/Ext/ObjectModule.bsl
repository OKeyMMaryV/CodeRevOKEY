#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт;// Текущий вариант отчета.   

Перем МассивШиринКолонок; // Хранить массив ширины колонок.

Перем ШиринаТаблицы; // Хранит ширину таблицы.

Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

Перем ЕстьВалюта Экспорт; // Хранить признак наличия валюты.

Перем ЕстьКоличество Экспорт; // Хранить признак наличия количества.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Процедура выполняет сохранение настроек отчета.
// 
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина, , Истина);
		
КонецПроцедуры // ПрименитьНастройку()

// Процедура запоняет начальные настройки отчета.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтарыеНастройки = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
    
    ТекстПолейРесурсов = "";
    ТекстИтогиРесурсов = "";
    МассивПоказателей  = СформироватьМассивПоказателей();
    
    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
        
        ТекстПолейРесурсов = ТекстПолейРесурсов + ", ОстаткиИОбороты." + ТекПоказатель + "ОборотКт"
                             + " КАК " + ТекПоказатель + "ОборотКт";
        
        ТекстИтогиРесурсов = ТекстИтогиРесурсов + ", СУММА(" + ТекПоказатель + "ОборотКт)";
                             
    КонецЦикла;
    
    ТекстПолейРесурсов = Сред(ТекстПолейРесурсов, 2);
    ТекстИтогиРесурсов = Сред(ТекстИтогиРесурсов, 2);
    
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ?(ПустаяСтрока(ТекстПолейРесурсов), " """" Как Поле", ТекстПолейРесурсов);
    
    ТекстПоля  = "";
	// Изменение кода. Начало. 12.05.2014{{
	ТекстОтбор = ", Валюта.*, ЦФО.*, Сценарий.*, Организация.*";
	// Изменение кода. Конец. 12.05.2014}}
	ТекстИтоги = "  ЦФО.*";
	Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
		ТекстИтоги = ТекстИтоги + ", Организация.*";	
	КонецЕсли;
    
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч + 1;
		
		ТекстПоля  = ТекстПоля  + ", ОстаткиИОбороты.Субконто" + Сч + " КАК Субконто" + Сч;
		ТекстОтбор = ТекстОтбор + ", Субконто" + Сч + ".*";
		ТекстИтоги = ТекстИтоги + ", Субконто" + Сч + ".*";
			
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля
		, 2) 
		+ "}";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		ТекстОтбор = "{" + Сред(ТекстОтбор, 2) + "}";
	КонецЕсли;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(, , МЕСЯЦ, , Счет В ИЕРАРХИИ (&Счет), , " + ТекстОтбор + ") КАК ОстаткиИОбороты
	|
	|ИТОГИ " + ТекстИтогиРесурсов + " ПО ОБЩИЕ";
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст + "
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги 
		, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
	
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из МассивСубконто Цикл
		Сч = Сч + 1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто" + Сч);
		Поле.ТипЗначения = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
		
		ПостроительОтчета.Отбор.Добавить("Субконто" + Сч);
	КонецЦикла;
	
	бит_БухгалтерскиеОтчетыСервер.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
	
	
	// Определим признаки учета субконто, которые могут быть использованы.
    СтруктураУчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьПризнакиУчетаСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии, МассивСубконто);
	ЕстьВалюта     = СтруктураУчета.ЕстьВалюта;
    ЕстьКоличество = СтруктураУчета.ЕстьКоличество;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек.
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

#КонецОбласти

#Область ЗаголовокОтчета

// Функция формирует заголовок отчета (синоним).
// 
// Возвращаемое значение:
//  Строка - заголовок отчета.
// 
Функция ЗаголовокОтчета() Экспорт
    
    ПредставлениеРегистра = "бюджетирование";
	СтрокаПоСчету = ?(ЗначениеЗаполнено(Счет), Счет, Нстр("ru = ' не выбран счет'"));
	
	ТекстЗаголовка = Нстр("ru = 'Анализ счета %2% (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра, СтрокаПоСчету);

	Возврат ТекстЗаголовка;
	
КонецФункции // ЗаголовокОтчета()

// Функция формирует табличный документа отчета
// и выполняет заполнение области "Заголовок".
// 
// Возвращаемое значение:
//  ТабличныйДокумент - заголовок отчета.
// 
Функция СформироватьЗаголовок() Экспорт

    ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);
	
	Макет = ПолучитьМакет("Макет");
	
	Если НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("ВВалюте"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если НЕ ПоСубсчетамИСубконто И ПостроительОтчета.ИзмеренияСтроки.Количество() = 0 И Не ЗначениеЗаполнено(Периодичность) И НЕ ПоВалютам Тогда
		Макет.УдалитьОбласть(Макет.Область("КорСчет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	ЗаголовокОтчета  = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок = Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам.
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы - 1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх + Сч, 2, ОбластьЗаголовок.Верх + Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх + Сч, 2, ОбластьЗаголовок.Верх + Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	ЗаголовокОтчета.Параметры.Заголовок        = ЗаголовокОтчета();
	ЗаголовокОтчета.Параметры.ОписаниеПериода  = ОписаниеПериода;

    ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
    КонецЕсли;
	Если ВыводитьСуммуСценарий Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (сценарий)'");
    КонецЕсли;
	Если ПоВалютам Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
	КонецЕсли; 
	Если ПоКоличеству Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'количество'");
	КонецЕсли;
    
	ТекстПроИтоги = "";
	Если ПоСубсчетамИСубконто Тогда
		ТекстПроИтоги = ТекстПроИтоги + Нстр("ru = ', субсчетам'");
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + Нстр("ru = ', субконто: '") + бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;
	
	Если ПоКорСубсчетамИСубконто Тогда
		ТекстПроИтоги = ТекстПроИтоги + Нстр("ru = ', кор.субсчетам и субконто'");
	КонецЕсли;

	ТекстПроИтоги = Сред(ТекстПроИтоги, 2);

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = Нстр("ru = 'Детализация по '") + ТекстПроИтоги;
	КонецЕсли;

	// Вывод списка фильтров:
	СтрОтбор = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

	Возврат Новый ТабличныйДокумент;

КонецФункции // СформироватьЗаголовок()

#КонецОбласти

#Область ФормированиеОтчета

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент - Табличный документ, формируемый отчетом.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина) - признак отображения заголовка.
//  ВысотаЗаголовка     - Число (По умолчанию = 0) - высота заголовка.
// 
// Возвращаемое значение:
//  Булево - отчет сформирован.
// 
Функция СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Запоминание ширины колонки
	Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

		МассивШиринКолонок.Очистить(); 
		// Запоминать следует, если документ не пустой.
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда 			
			Для Сч = 1 По ШиринаТаблицы Цикл
				МассивШиринКолонок.Добавить(ДокументРезультат.Область(1, Сч).ШиринаКолонки);
			КонецЦикла; 			
		КонецЕсли;

	КонецЕсли;
		
	// Очистка табличного поля
	ДокументРезультат.Очистить();
		   	
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;   	
		
		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);

	    
		МассивРесурсов = СформироватьМассивПоказателей();

		ЗапросОбороты = Новый Запрос;
		ЗапросОстатки = Новый Запрос;
		УстановитьПараметрыЗапроса(ЗапросОбороты, Истина);
		УстановитьПараметрыЗапроса(ЗапросОстатки);
		
		Периодичность = Периодичность;
				
		ТекстОтбор = "";
		ТекстСоединениеПо 	   = "";
		
		МассивСубконто    = Новый Массив;
		СписокГруппировок = Новый СписокЗначений;
		
		СоотТипыИзмерений = Новый Соответствие;
		СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.Иерархия       , " ИЕРАРХИЯ");
		СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.ТолькоИерархия , " ТОЛЬКО ИЕРАРХИЯ");
		СоотТипыИзмерений.Вставить(ТипИзмеренияПостроителяОтчета.Элементы       , "");
		                   		
		ТекстГруппировокВыбрать = "" + Символы.ПС;
		ТекстГруппировокИтоги   = "" + Символы.ПС;
		ТекстПорядокГруппировок = "";
								
		// Субконто отчета и группировки (Организация, ЦФО).
		Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество()-1 Цикл
			
			Измерение = ПостроительОтчета.ИзмеренияСтроки[Инд];
			ИмяИзмерения = Измерение.Имя;
			
			ТекстГруппировокИтоги  = ТекстГруппировокИтоги + ", 
			|	Таблица." + Измерение.ПутьКДанным + СоотТипыИзмерений[Измерение.ТипИзмерения] + " КАК " + ИмяИзмерения;
			
			ТекстГруппировокВыбрать = ТекстГруппировокВыбрать + "
			|	Таблица." + Измерение.ПутьКДанным + " КАК " + ИмяИзмерения + ",
			|	ПРЕДСТАВЛЕНИЕ(Таблица." + Измерение.ПутьКДанным + ") КАК " + ИмяИзмерения + "Представление" + ",";
			
			МассивСубконто.Добавить(ИмяИзмерения);
			
			ТекстСоединениеПо = ТекстСоединениеПо 
					+ Символы.ПС + " И ТаблицаОбороты." + Измерение.ПутьКДанным + " = Таблица." + Измерение.ПутьКДанным + "";
			
			ТекстПорядокГруппировок = ТекстПорядокГруппировок + ", Таблица." + Измерение.ПутьКДанным;
			
			СписокГруппировок.Добавить(ИмяИзмерения, Измерение.Представление);
			
		КонецЦикла;
		
		ОтборСубконто = Новый Соответствие;
		
		Сч = 0;
		Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
			
			Если НЕ Элемент.Использование ИЛИ ПустаяСтрока(Элемент.ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
		
			ТекстОтбор = ?(ПустаяСтрока(ТекстОтбор), " ", ТекстОтбор + " И ") + бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(Элемент.ВидСравнения, "&Значение" + Сч, Элемент.ПутьКДанным, "&ЗначениеС" + Сч, "&ЗначениеПо" + Сч, Элемент.Значение, Элемент.ЗначениеС, Элемент.ЗначениеПо);
			
			ВидСр = новый Структура;
			ВидСр.Вставить("Значение"    ,Элемент.Значение);
			ВидСр.Вставить("ВидСравнения",Элемент.ВидСравнения);
	        
			ОтборСубконто.Вставить(Элемент.ПутьКДанным, ВидСр);
			
			бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(ЗапросОбороты, Элемент, Строка(Сч));
			бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(ЗапросОстатки, Элемент, Строка(Сч));
					
			Сч = Сч + 1;
		
		КонецЦикла; 
		
		СоответствиеКорСубконто = Новый Соответствие;
		
		Если ПоКорСубсчетамИСубконто Тогда
			
			Для Каждого Строка Из ПравилаВыводаИтогов Цикл
				
				Для Каждого СтрокаРазворота Из Строка.РазворотПоСубконто Цикл     					
					СоответствиеКорСубконто.Вставить(СтрокаРазворота.Имя, СтрокаРазворота.Имя);    				
				КонецЦикла; 
				
			КонецЦикла;
		
		КонецЕсли; 
		
		ТекстКорСубконто      = "";
		ТекстКорСубконтоИтоги = "";
	    
		Для Каждого Элемент Из СоответствиеКорСубконто Цикл
			
			ТекстКорСубконто      = ТекстКорСубконто             + "Кор" + Элемент.Ключ          + " КАК " + "Кор" + Элемент.Ключ + ",";
			ТекстКорСубконтоИтоги = ТекстКорСубконтоИтоги + ", " + "Кор" + Элемент.Ключ + " ИЕРАРХИЯ КАК " + "Кор" + Элемент.Ключ;
			
		КонецЦикла;
		
		Если ПоСубсчетамИСубконто Тогда
			
			ТекстСчет = 
			"	Таблица.Счет КАК Счет, 
			|	Таблица.Счет.Вид КАК ВидСчета, 
			|	Таблица.Счет.Порядок КАК СчетПорядок, 
			|	Таблица.Счет.Представление КАК СчетПредставление,";
			
		Иначе
			
			ТекстСчет = "";
			
		КонецЕсли;
			
		ТекстОбороты = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет + ТекстГруппировокВыбрать + "
		|	Таблица.КорСчет.Ссылка КАК КорСчет, 
		|	Таблица.КорСчет.Порядок КАК КорСчетПорядок, 
		|	Таблица.КорСчет.Представление КАК КорСчетПредставление,
		|  " + ТекстКорСубконто;
		
		ТекстОстатки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет + ТекстГруппировокВыбрать + "";
			
		Если ПоВалютам Тогда
			
			ТекстПоВалютам = " Таблица.Валюта КАК Валюта, Таблица.Валюта.Представление КАК ВалютаПредставление,";
			ТекстОбороты = ТекстОбороты + ТекстПоВалютам;
			ТекстОстатки = ТекстОстатки + ТекстПоВалютам;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Периодичность) Тогда
			
			ТекстОбороты = ТекстОбороты + " Таблица.Период,";
			ТекстОстатки = ТекстОстатки + " Таблица.Период,";
			
		КонецЕсли;
		
		Для каждого ИмяРесурса Из МассивРесурсов Цикл
			
			ТекстОбороты = ТекстОбороты + "
			|	Таблица." + ИмяРесурса + "ОборотДт КАК " + ИмяРесурса + "ОборотДт,
			|	Таблица." + ИмяРесурса + "ОборотКт КАК " + ИмяРесурса + "ОборотКт,";
			ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "Развернутый", "");
			ТекстОстатки = ТекстОстатки + "
			|	Таблица." + ИмяРесурса + "Начальный" + ТекстРазвернутоеСальдо + "ОстатокДт КАК " + ИмяРесурса + "НачДт,
			|	Таблица." + ИмяРесурса + "Начальный" + ТекстРазвернутоеСальдо + "ОстатокКт КАК " + ИмяРесурса + "НачКт,
			|	Таблица." + ИмяРесурса + "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокДт КАК " + ИмяРесурса + "КонДт,
			|	Таблица." + ИмяРесурса + "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокКт КАК " + ИмяРесурса + "КонКт,
			|	Таблица." + ИмяРесурса + "ОборотДт КАК " + ИмяРесурса + "ЕстьОборотДт,
			|	Таблица." + ИмяРесурса + "ОборотКт КАК " + ИмяРесурса + "ЕстьОборотКт,";
			
	    КонецЦикла;
	    
		ТекстОстатки = Лев(ТекстОстатки, СтрДлина(ТекстОстатки) - 1);
		ТекстОбороты = Лев(ТекстОбороты, СтрДлина(ТекстОбороты) - 1);
		
		ОтборПоВидамСубконто = бит_БухгалтерскиеОтчетыСервер.УстановитьОтборНаВидыСубконтоПоПостроителюОтчета(ПостроительОтчета, Счет, ЗапросОбороты);
		ОтборПоВидамСубконто = бит_БухгалтерскиеОтчетыСервер.УстановитьОтборНаВидыСубконтоПоПостроителюОтчета(ПостроительОтчета, Счет, ЗапросОстатки);
		
		ТекстУсловияОбороты = ТекстОтбор;
		ТекстУсловияОстатки = ТекстОтбор;
		
		ТекстКорСчет = "";
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСчету(ТекстКорСчет, КорСчет, КорСчетВидСравнения, КорСчетИспользование);
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСубконто(ТаблицаКорСубконто, ТекстУсловияОбороты);
		
		// Изменение кода. Начало. 12.05.2014{{
		ТекстДопОтбор = " {ЦФО.*, Сценарий.*, Организация.*}";
		// Изменение кода. Конец. 12.05.2014}}
		
		ТекстОборотыИЗ = "
		|ИЗ
		|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".Обороты(&ДатаНач, &ДатаКон, " + Периодичность + 
				", Счет В ИЕРАРХИИ (&Счет), " + ОтборПоВидамСубконто + ", " + ТекстУсловияОбороты + ТекстДопОтбор + " , " + ТекстКорСчет + ") КАК Таблица
		|";
		
		ТекстОстаткиИЗ = "
		|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, " + Периодичность + 
				", ДвиженияИГраницыПериода, счет В ИЕРАРХИИ (&счет), " + ОтборПоВидамСубконто + ", " + ТекстУсловияОстатки + ТекстДопОтбор + ") КАК Таблица
		|";
			
		ЕстьОтборПоКорСубконто = Ложь;
		Для каждого СтрТаблКорСб Из ТаблицаКорСубконто Цикл
			Если СтрТаблКорСб.Использование Тогда
				ЕстьОтборПоКорСубконто = Истина;
				Прервать;		
			КонецЕсли;   
		КонецЦикла;
		
		Если КорСчетИспользование ИЛИ ЕстьОтборПоКорСубконто Тогда
			ТекстОстаткиИЗ = СтрЗаменить(ТекстОборотыИЗ, "Таблица", "ТаблицаОбороты") + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстОстаткиИЗ + "
			|	ПО ТаблицаОбороты.Счет = Таблица.Счет " + ТекстСоединениеПо;
		Иначе	
			ТекстОстаткиИЗ = "
			|ИЗ 
			|" + ТекстОстаткиИЗ;
		КонецЕсли;
		
		ТекстОбороты = ТекстОбороты + ТекстОборотыИЗ;
		ТекстОстатки = ТекстОстатки + ТекстОстаткиИЗ;
	
		ТекстИтогиОбороты = "";
		ТекстИтогиОстатки = "";
		ТекстПорядок = "";
		
		Если ПоСубсчетамИСубконто Тогда   			
			ТекстПорядок = ТекстПорядок + ", СчетПорядок";			
		КонецЕсли;
		
		// Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл   			
		// 	ТекстПорядок = ТекстПорядок + ", Таблица." + Измерение.Имя;  
		// КонецЦикла;
		ТекстПорядок = ТекстПорядок + ТекстПорядокГруппировок;
		
		Если ЗначениеЗаполнено(Периодичность) Тогда 			
			ТекстПорядок = ТекстПорядок + ", Таблица.Период";  			
		КонецЕсли;
		
		Если ПоВалютам Тогда
			ТекстПорядок = ТекстПорядок + ", Таблица.Валюта";
		КонецЕсли;
		
		ТекстОбороты = ТекстОбороты + "
		|УПОРЯДОЧИТЬ ПО " + Сред(ТекстПорядок + ", КорСчетПорядок", 2);
		
		Если Не ПустаяСтрока(ТекстПорядок) Тогда
			
			ТекстОстатки = ТекстОстатки + "
			|УПОРЯДОЧИТЬ ПО " + Сред(ТекстПорядок, 2);
			
		КонецЕсли;
		
		Для каждого ИмяРесурса Из МассивРесурсов Цикл
			
			ТекстИтогиОбороты = ТекстИтогиОбороты + ",
			|	СУММА(" + ИмяРесурса + "ОборотДт),
			|	СУММА(" + ИмяРесурса + "ОборотКт)";

			ТекстИтогиОстатки = ТекстИтогиОстатки + ",
			|	СУММА(" + ИмяРесурса + "НачДт),
			|	СУММА(" + ИмяРесурса + "НачКт),
			|	СУММА(" + ИмяРесурса + "КонДт),
			|	СУММА(" + ИмяРесурса + "КонКт),
			|	СУММА(" + ИмяРесурса + "ЕстьОборотДт),
			|	СУММА(" + ИмяРесурса + "ЕстьОборотКт)";

		КонецЦикла; 
		
		ТекстОбороты = ТекстОбороты + "
		|ИТОГИ " + Сред(ТекстИтогиОбороты, 2)+ "
		|	ПО ОБЩИЕ";
		
		ТекстОстатки = ТекстОстатки + "
		|ИТОГИ " + Сред(ТекстИтогиОстатки, 2)+ "
		|	ПО ОБЩИЕ";
		
		Если ПоСубсчетамИСубконто Тогда
			
			ТекстОбороты = ТекстОбороты +	",
			|	Таблица.Счет ИЕРАРХИЯ КАК Счет";
			ТекстОстатки = ТекстОстатки +	",
			|	Таблица.Счет ИЕРАРХИЯ КАК Счет";
			
		КонецЕсли;
		
		// Добавим итоги по субконто
		ТекстОбороты = ТекстОбороты + ТекстГруппировокИтоги;
		ТекстОстатки = ТекстОстатки + ТекстГруппировокИтоги;
		
		Если ЗначениеЗаполнено(Периодичность) Тогда  			
			ТекстОбороты = ТекстОбороты + ", Таблица.Период КАК Период";
			ТекстОстатки = ТекстОстатки + ", Таблица.Период КАК Период";  			
		КонецЕсли;
		
		ТекстОбороты = ТекстОбороты + ", Таблица.КорСчет ИЕРАРХИЯ КАК КорСчет";
		
		ТекстОбороты = ТекстОбороты + ТекстКорСубконтоИтоги;
		
		Если ПоВалютам Тогда
			ТекстОбороты = ТекстОбороты + ", Таблица.Валюта КАК Валюта";
			ТекстОстатки = ТекстОстатки + ", Таблица.Валюта КАК Валюта";
		КонецЕсли;

		
		ТекстОбороты = ТекстОбороты + "
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		ТекстОстатки = ТекстОстатки + "
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		ЗапросОбороты.Текст = ТекстОбороты;
		ЗапросОстатки.Текст = ТекстОстатки;
		
		// Состояние("Выполнение запроса");
		
		РезультатОбороты = ЗапросОбороты.Выполнить();
		РезультатОстатки = ЗапросОстатки.Выполнить();
		
		Макет = ПолучитьМакет("Макет");
						
		Если НЕ ПоВалютам Тогда
			Макет.УдалитьОбласть(Макет.Область("ВВалюте"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		ЕстьПараметрГруппировки = Истина;
		Если НЕ ПоСубсчетамИСубконто 
				И МассивСубконто.Количество() = 0// ПостроительОтчета.ИзмеренияСтроки.Количество() = 0.
				И Не ЗначениеЗаполнено(Периодичность) И НЕ ПоВалютам Тогда
			Макет.УдалитьОбласть(Макет.Область("Счет"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			ЕстьПараметрГруппировки = Ложь;
		КонецЕсли;

		// Вывод шапки
		ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьЗаголовкаТаблицы.Параметры.Д = "Д";
		ОбластьЗаголовкаТаблицы.Параметры.К = "К";
		Если ЕстьПараметрГруппировки Тогда
			ЗаголовокГруппировки = "";
			Для каждого ЭлГр Из СписокГруппировок Цикл
				ЗаголовокГруппировки = ЗаголовокГруппировки + СокрЛп(ЭлГр.Представление) + Символы.ПС;
			КонецЦикла;
			ЗаголовокГруппировки = ЗаголовокГруппировки + "Счет";
			ОбластьЗаголовкаТаблицы.Параметры.Группировки = ЗаголовокГруппировки;
		КонецЕсли;
		ДокументРезультат.Вывести(ОбластьЗаголовкаТаблицы, 1);
		
		// Счет
		ОбластьСтрокаСчет = Макет.ПолучитьОбласть("СтрокаСчет");
		ОбластьИтогСчет   = Макет.ПолучитьОбласть("ИтогСчет");
		
		// Валюта
		ОбластьСтрокаВалюта = Макет.ПолучитьОбласть("СтрокаВалюта");
		ОбластьИтогВалюта   = Макет.ПолучитьОбласть("ИтогВалюта");
		
		// Субконто
		// Для вывода количества используются другие области.
		СтрокаКоличество = ?(ПоКоличеству, "Количество", "");
		
		ОбластьСтрокаСубконто = Макет.ПолучитьОбласть("СтрокаСубконто" + СтрокаКоличество);
		ОбластьИтогСубконто   = Макет.ПолучитьОбласть("ИтогСубконто" + СтрокаКоличество);
		
		// Для вывода количества используются другие области.
		СтрокаКоличество 	= ?(ПоКоличеству И (МассивСубконто.Количество() > 0), "Количество", "");
		ОбластьСтрокаПериод = Макет.ПолучитьОбласть("СтрокаПериод" + СтрокаКоличество);
		ОбластьИтогПериод   = Макет.ПолучитьОбласть("ИтогПериод" + СтрокаКоличество);
		
		// КорСчет
		ОбластьСтрокаКорСчет     = Макет.ПолучитьОбласть("СтрокаКорСчет" + СтрокаКоличество);
		
		// КорСубконто
		ОбластьСтрокаКорСубконто = Макет.ПолучитьОбласть("СтрокаКорСубконто" + СтрокаКоличество);
		
		Если ЗначениеЗаполнено(Периодичность) Тогда
			ФорматПериода = "";
			Если Врег(Периодичность) = "ГОД" Тогда
				ФорматПериода = "ДФ = ""гггг """"г.""""""";
			ИначеЕсли Врег(Периодичность) = "КВАРТАЛ" Тогда
				ФорматПериода = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
			ИначеЕсли Врег(Периодичность) = "МЕСЯЦ" Тогда
				ФорматПериода = "ДФ = ""ММММ гггг """"г.""""""";
			ИначеЕсли Врег(Периодичность) = "НЕДЕЛЯ" Тогда
				ФорматПериода = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
			ИначеЕсли Врег(Периодичность) = "ДЕНЬ" Тогда
				ФорматПериода = "ДЛФ = D";
			КонецЕсли;
			ОбластьСтрокаПериод.Область(1, 2).Формат = ФорматПериода;
		КонецЕсли;

		// Сдвиг уровня выводимой группировки отчета относительно группировки запроса.
		СдвигУровня = 0;
		
		// Флаг сброса сдвига уровня при выводе группировки по счету.
		СброситьСдвигУровня = Истина;

		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("ОбластьСтрокаСчет"	, ОбластьСтрокаСчет);
		СтруктураПараметров.Вставить("ОбластьИтогСчет"		, ОбластьИтогСчет);
		СтруктураПараметров.Вставить("ОбластьСтрокаВалюта"	, ОбластьСтрокаВалюта);
		СтруктураПараметров.Вставить("ОбластьИтогВалюта"	, ОбластьИтогВалюта);
			
		СтруктураПараметров.Вставить("ОбластьСтрокаКорСчет"	, ОбластьСтрокаКорСчет);
		
		СтруктураПараметров.Вставить("ОбластьСтрокаПериод"	, ОбластьСтрокаПериод);
		СтруктураПараметров.Вставить("ОбластьИтогПериод"	, ОбластьИтогПериод);
		
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконто", ОбластьСтрокаСубконто);
		СтруктураПараметров.Вставить("ОбластьИтогСубконто"	, ОбластьИтогСубконто);
		
		СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
		
		СтруктураПараметров.Вставить("ОбластьСтрокаКорСубконто", ОбластьСтрокаКорСубконто);
		
		СтруктураПараметров.Вставить("МассивСубконто"   , МассивСубконто); 
		СтруктураПараметров.Вставить("СписокГруппировок", СписокГруппировок);
	    СтруктураПараметров.Вставить("МассивРесурсов"   , МассивРесурсов);
	    
	    НомерВалютнойСуммы = СтруктураПараметров.МассивРесурсов.Найти("ВалютнаяСумма");
	    Если Не НомерВалютнойСуммы = Неопределено Тогда
	        СтруктураПараметров.МассивРесурсов.Удалить(НомерВалютнойСуммы);
	    КонецЕсли;
	    
	    НомерКоличества = СтруктураПараметров.МассивРесурсов.Найти("Количество");
	    Если Не НомерКоличества = Неопределено Тогда
	        СтруктураПараметров.МассивРесурсов.Удалить(НомерКоличества);
	    КонецЕсли;
	    
		// Вывод отчета
		ОбщийИтогОбороты = РезультатОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
		ОбщийИтогОстатки = РезультатОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
		ЕстьИтог = ОбщийИтогОстатки.Следующий();
		ОбщийИтогОбороты.Следующий();
		ОбластьНачало = Макет.ПолучитьОбласть("НачалоОтчет");
	    
	    // Заполним параметры области.
	    бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьНачало, ОбщийИтогОстатки, МассивРесурсов, "НачДт, НачКт");
	    
		ДокументРезультат.Вывести(ОбластьНачало);

		ДокументРезультат.НачатьАвтогруппировкуСтрок();

		ВывестиСчета(РезультатОбороты, РезультатОстатки, СтруктураПараметров, ОтборСубконто);
		
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
		// Итого по отчету
		ОбластьИтог = Макет.ПолучитьОбласть("ИтогОтчет");
	    ОбластьИтог.Параметры.Заполнить(ОбщийИтогОбороты);
	    
	    // Заполним параметры области.
	    бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьИтог, ОбщийИтогОбороты, МассивРесурсов, "ОборотДт, ОборотКт");
	    
	    Если ЕстьИтог Тогда
	        
	        ОбластьИтог.Параметры.Заполнить(ОбщийИтогОстатки);
	        
	        // Заполним параметры области.
	        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьИтог, ОбщийИтогОстатки, МассивРесурсов, "КонДт, КонКт");
	        
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьИтог);
		
		// Заполним общую расшифровку:
		СтруктураНастроекОтчета = Новый Структура;

		СтруктураНастроекОтчета.Вставить("Период" , Период);
		
		СтруктураНастроекОтчета.Вставить("Сценарий"             , Сценарий);
		СтруктураНастроекОтчета.Вставить("СценарийВидСравнения" , СценарийВидСравнения);
		СтруктураНастроекОтчета.Вставить("СценарийИспользование", СценарийИспользование);
		
		// Изменение кода. Начало. 12.05.2014{{
		Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
			СтруктураНастроекОтчета.Вставить("Организация"             , Организация);
		    СтруктураНастроекОтчета.Вставить("ОрганизацияВидСравнения" , ОрганизацияВидСравнения);
		    СтруктураНастроекОтчета.Вставить("ОрганизацияИспользование", ОрганизацияИспользование)
		КонецЕсли;
		// Изменение кода. Конец. 12.05.2014}}
		
	    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуРегл"    , ВыводитьСуммуРегл);
	    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуУпр"     , ВыводитьСуммуУпр);
	    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуСценарий", ВыводитьСуммуСценарий);
	    
		СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

		ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;
		
		// Обведение таблицы отчета линией, как в области границы.
		ТолстаяЛиния = ОбластьИтог.Область(ОбластьИтог.ВысотаТаблицы, 2).ГраницаСнизу;
		
		ДокументРезультат.Область(ВысотаЗаголовка + 2, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
		
		ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
		
		// Восстановление ширин колонок
		Если ТипЗнч(МассивШиринКолонок) = Тип("Массив") Тогда
			Если МассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
				Инд = 0;
				Для Каждого Элемент Из МассивШиринКолонок Цикл
					ДокументРезультат.Область(, 1 + Инд, , 1 + Инд).ШиринаКолонки = Элемент;
					Инд = Инд + 1;             
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		// Зафиксируем заголовок отчета
		ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;
		
		// Первую колонку не печатаем
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
		
		// Присвоим имя для сохранения параметров печати табличного документа.
		ДокументРезультат.КлючПараметровПечати = "АнализСчета" + ИмяРегистраБухгалтерии;
		
		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
	
	КонецЕсли;

	Возврат ОтчетСформирован;
	
КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Возвращаемое значение:
//  Массив - массив показателей.
//  
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
    
	Если ВыводитьСуммуСценарий Тогда
		МассивПоказателей.Добавить("СуммаСценарий");
    КонецЕсли;
    
    Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;
    
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

// Проверка корректности настроек отчета
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПараметрыОтчетаКорректны()
  	
	РезультатПроверки = 
		бит_БухгалтерскиеОтчетыСервер.ПроверитьСчет(Счет)
		И бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Истина)
		И Не бит_БухгалтерскиеОтчетыСервер.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()

#КонецОбласти

#Область ФормированиеОтчета

// Процедура устанавливает параметры для переданного запроса.
// 
// Параметры:
//  Запрос     - Запрос.
//  ЭтоОбороты - Булево.
// 
Процедура УстановитьПараметрыЗапроса(Запрос, ЭтоОбороты = Ложь)
	
	Запрос.УстановитьПараметр("Счет"   , Счет);
	
	Если КорСчетИспользование Тогда  // ЭтоОбороты И
		Запрос.УстановитьПараметр("КорСчет", КорСчет);	
	КонецЕсли;
	бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_КорСубконто(Запрос, ТаблицаКорСубконто);
	
	Запрос.УстановитьПараметр("ДатаНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ?(Период.ДатаОкончания = '00010101000000'
										  , Период.ДатаОкончания
										  , Новый Граница(КонецДня(Период.ДатаОкончания), ВидГраницы.Включая)));

КонецПроцедуры // УстановитьПараметрыЗапроса()

// Процедура выводит субконто определенного номера.
// 
// Параметры:
// 	ВыборкаОбороты.
//  ВыборкаОстатки.
//  Инд.
//  СтруктураПараметров.
//  ОтборДляРасшифровки.
// 
Процедура ВыводСубконто(Знач ВыборкаОбороты,Знач ВыборкаОстатки, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки)
	
	Если Инд < СтруктураПараметров.МассивСубконто.Количество() Тогда
		
		Измерение = СтруктураПараметров.МассивСубконто[Инд];
		
		ОборотИспользован  = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		ОстатокИспользован = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		ОстатокПрочитан = Ложь;
		ОборотПрочитан  = Ложь;
		
		Пока Истина Цикл
			
			Если ОстатокИспользован Тогда
				ОстатокПрочитан = ВыборкаОстатки.Следующий();
				ОстатокИспользован = Ложь;
			КонецЕсли;
			
			Если ОборотИспользован Тогда
				ОборотПрочитан = ВыборкаОбороты.Следующий();
				ОборотИспользован = Ложь;
			КонецЕсли;
			
			// Оборот сопоставляется с остатком
			Если ОборотПрочитан И ОстатокПрочитан
			   И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			   
				ОборотИспользован = Истина;
				ОстатокИспользован = Истина;
				
			ИначеЕсли ОборотПрочитан И бит_БухгалтерскиеОтчетыСервер.ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству, СтруктураПараметров.МассивРесурсов) Тогда
				
				ОборотИспользован = Истина;
				
			ИначеЕсли ОстатокПрочитан Тогда
				
				ОстатокИспользован = Истина;
				
			КонецЕсли;
			
			Если Не ОстатокИспользован И Не ОборотИспользован Тогда
				Прервать;
			КонецЕсли;
			
			Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
			ВыборкаОборотыПараметр = ?(ОборотИспользован , ВыборкаОбороты, Неопределено);
			ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
				
			// Вывод нач сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[Измерение + "Представление"];
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
            
            // Заполним параметры области.
			Если ОстатокИспользован Тогда 
           		бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, Выборка, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
			КонецЕсли;
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки);
			
			бит_БухгалтерскиеОтчетыСервер.УстановитьКурсивПоТипуЗаписи(ВыводимаяОбласть.Область(1, 2), Выборка.ТипЗаписи());
			
			Уровень = Выборка.Уровень();
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
			// Вывод вложенных итогов
			ВыводСубконто(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, Инд+1, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			
			// Вывод оборота и кон сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСубконто;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
            
            Если ОборотИспользован Тогда
                
                ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
                
                // Заполним параметры области.
                бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаОбороты, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
                
            КонецЕсли;
            
            Если ОстатокИспользован тогда
                
                ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОстатки);
                
                // Заполним параметры области.
                бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаОстатки, СтруктураПараметров.МассивРесурсов, "КонДт, КонКт");
                
			КонецЕсли;
						
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
		КонецЦикла;
		
	ИначеЕсли ВыборкаОбороты <> Неопределено Тогда
		
		ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		
	КонецЕсли;
	
КонецПроцедуры // ВыводСубконто()

// Процедура выводит периоды.
// 
// Параметры:
// 	ВыборкаОбороты.
//  ВыборкаОстатки.
//  СтруктураПараметров.
//  ОтборДляРасшифровки.
// 
Процедура ВывестиПериоды(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки)
	
	Если ЗначениеЗаполнено(Периодичность) Тогда
		
		Измерение = "Период";
		
		ОборотИспользован  = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		ОстатокИспользован = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		ОстатокПрочитан = Ложь;
		ОборотПрочитан = Ложь;
		
		Пока Истина Цикл
			
			Если ОстатокИспользован Тогда
				ОстатокПрочитан = ВыборкаОстатки.Следующий();
				ОстатокИспользован = Ложь;
			КонецЕсли;
			
			Если ОборотИспользован Тогда
				ОборотПрочитан = ВыборкаОбороты.Следующий();
				ОборотИспользован = Ложь;
			КонецЕсли;
			
			// Оборот сопоставляется с остатком
			Если ОборотПрочитан И ОстатокПрочитан
			   И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			   
				ОборотИспользован = Истина;
				ОстатокИспользован = Истина;
				
			ИначеЕсли ОборотПрочитан И бит_БухгалтерскиеОтчетыСервер.ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству, СтруктураПараметров.МассивРесурсов) Тогда
				
				ОборотИспользован = Истина;
				
			ИначеЕсли ОстатокПрочитан Тогда
				ОстатокИспользован = Истина;
			КонецЕсли;
			
			Если Не ОстатокИспользован И Не ОборотИспользован Тогда
				Прервать;
			КонецЕсли;
			
			Если Не ОборотИспользован Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
			ВыборкаОборотыПараметр = ?(ОборотИспользован, ВыборкаОбороты, Неопределено);
			ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
				
			// Вывод начального сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПериод;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
            
            // Заполним параметры области.
            бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, Выборка, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
            
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки);
			
			Уровень = Выборка.Уровень();
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
			// Вывод вложенных итогов
			Если ПоВалютам Тогда
				ВывестиВалюты(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			Иначе
				ВывестиКорСчета(ВыборкаОборотыПараметр, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			КонецЕсли;
			
			// Вывод оборота и кон сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогПериод;
			ОчиститьПараметрыОбласти(ВыводимаяОбласть);
            
            Если ОборотИспользован Тогда
                
				ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
                
                // Заполним параметры области.
                бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаОбороты, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
                
            КонецЕсли;
            
            Если ОстатокИспользован тогда
                
				ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОстатки);
                
                // Заполним параметры области.
                бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаОстатки, СтруктураПараметров.МассивРесурсов, "КонДт, КонКт");
                
			КонецЕсли;
		
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод оборота и кон сальдо: конец
			
		КонецЦикла;
		
	Иначе
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		Иначе
			ВывестиКорСчета(ВыборкаОбороты, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВывестиПериоды()

// Процедура выводит кор. счета.
// 
// Параметры:
// 	Выборка.
//  СтруктураПараметров.
//  ОтборДляРасшифровки.
// 
Процедура ВывестиКорСчета(Знач Выборка, СтруктураПараметров, ОтборДляРасшифровки)

	// Кор счета выводятся всегда
	ВыборкаОбороты = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
	
	ВерхнийУровень = 1000;
	
	Пока ВыборкаОбороты.Следующий() Цикл
		
		ПравилоКорСчета = ПолучитьПравилоКорСчета(ВыборкаОбороты.КорСчет);
		
		Если НЕ ПоКорСубсчетамИСубконто Тогда
			
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОбороты.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОбороты.Уровень();
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывод оборота или кон сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаКорСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
        
        // Заполним параметры области.
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаОбороты, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
        
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаОбороты, ОтборДляРасшифровки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, ВыборкаОбороты.Уровень());
		
		Если ПоКорСубсчетамИСубконто Тогда
			
			ВывестиКорСубконто(ВыборкаОбороты, ПравилоКорСчета, СтруктураПараметров, ОтборДляРасшифровки);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ВывестиКорСчета()

// Функция получает правило кор. счета.
// 
// Параметры:
// 	КорСчет.
// 
Функция ПолучитьПравилоКорСчета(КорСчет)
	
	ПравилоКорСчета = ПравилаВыводаИтогов.Найти(КорСчет, "Счет");
	Если ПравилоКорСчета <> Неопределено Тогда
		Возврат ПравилоКорСчета; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьПравилоКорСчета()

// Вывод кор субконто: общая процедура
// 
// Параметры:
// 	ВыборкаОбороты.
//  ПравилоКорСчета.
//  СтруктураПараметров.
//  ОтборДляРасшифровки.
// 
Процедура ВывестиКорСубконто(Знач ВыборкаОбороты, ПравилоКорСчета, СтруктураПараметров, ОтборДляРасшифровки)

	Если ПравилоКорСчета <> Неопределено Тогда
		
		Если ПравилоКорСчета.РазворотПоСубконто.Количество() > 0 Тогда
			
			ВыводКорСубконто(ВыборкаОбороты, ПравилоКорСчета, 0, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВывестиКорСубконто()

// Процедура выводит кор. субконто определенного номера.
// 
// Параметры:
//  ВыборкаОбороты.
//  ПравилоКорСчета.
//  Инд.
//  СтруктураПараметров.
//  ОтборДляРасшифровки.
// 
Процедура ВыводКорСубконто(Знач ВыборкаОбороты, ПравилоКорСчета, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки)

	Если Инд >= ПравилоКорСчета.РазворотПоСубконто.Количество() Тогда
		Возврат;
	КонецЕсли;
		
	ВыборкаОбороты = ВыборкаОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Кор" + ПравилоКорСчета.РазворотПоСубконто[Инд].Имя);
		
	Пока ВыборкаОбороты.Следующий() Цикл
			
		// Вывод оборота                       
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаКорСубконто;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);	
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
        
        // Заполним параметры области.
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаОбороты, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
        
		ВыводимаяОбласть.Параметры.КорСубконтоПредставление = ВыборкаОбороты["Кор" + ПравилоКорСчета.РазворотПоСубконто[Инд].Имя];
			
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаОбороты, ОтборДляРасшифровки);
			
		бит_БухгалтерскиеОтчетыСервер.УстановитьКурсивПоТипуЗаписи(ВыводимаяОбласть.Область(1, ВыводимаяОбласть.ШиринаТаблицы - 2), ВыборкаОбороты.ТипЗаписи());

		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, ВыборкаОбороты.Уровень());
			
		ВыводКорСубконто(ВыборкаОбороты, ПравилоКорСчета, Инд + 1, СтруктураПараметров, ОтборДляРасшифровки);
			
	КонецЦикла;
		                                            
КонецПроцедуры // ВыводКорСубконто()

// Заполняет параметры расшифровки
// 
// Параметры:
// 	Область.
//  Выборка.
//  ОтборСубконто.
// 
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)

	Если Не ПоСубсчетамИСубконто ИЛИ Выборка.Счет = Null Тогда
		СчетРасшифровки = Счет;
	Иначе
		СчетРасшифровки = Выборка.Счет;
	КонецЕсли;
    
    ИмяРегистраБухгалтерииБезПрефикса = СтрЗаменить(ИмяРегистраБухгалтерии, "бит", "");
    
	СписокРасшифровкиДт = Неопределено;
	СписокРасшифровкиКт = Неопределено;
	
	ПараметрыРасшифровки = Новый Структура;
	
	ПараметрыРасшифровки.Вставить("ИмяОбъекта"		 , "бит_ОтчетПоПроводкам" + ИмяРегистраБухгалтерииБезПрефикса);
	ПараметрыРасшифровки.Вставить("Счет"			 , СчетРасшифровки);
	ПараметрыРасшифровки.Вставить("СпособРасшифровки", "Отчет");
    
    ПараметрыРасшифровки.Вставить("ВыводитьСуммуРегл"    , ВыводитьСуммуРегл);
    ПараметрыРасшифровки.Вставить("ВыводитьСуммуУпр"     , ВыводитьСуммуУпр);
    ПараметрыРасшифровки.Вставить("ВыводитьСуммуСценарий", ВыводитьСуммуСценарий);
    
	ПараметрыКарточкиСчета = Новый Структура;
	
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта"       , "бит_КарточкаСчета" + ИмяРегистраБухгалтерииБезПрефикса);
	ПараметрыКарточкиСчета.Вставить("Счет"			   , СчетРасшифровки);
	ПараметрыКарточкиСчета.Вставить("СпособРасшифровки", "Отчет");

    ПараметрыКарточкиСчета.Вставить("ВыводитьСуммуРегл"    , ВыводитьСуммуРегл);
    ПараметрыКарточкиСчета.Вставить("ВыводитьСуммуУпр"     , ВыводитьСуммуУпр);
    ПараметрыКарточкиСчета.Вставить("ВыводитьСуммуСценарий", ВыводитьСуммуСценарий);
    
	Если Лев(Выборка.Группировка(), 8) = "Субконто" 
		ИЛИ Лев(Выборка.Группировка(), 12) = "Организация" ИЛИ Лев(Выборка.Группировка(), 3) = "ЦФО" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			Измерение = ПостроительОтчета.ИзмеренияСтроки.Найти(Выборка.Группировка());
			ОтборСубконто.Вставить(Измерение.ПутьКДанным, Выборка[Выборка.Группировка()]); 			
			// Измерение = ТаблицаГруппировки.Найти(Выборка.Группировка());
			// ОтборСубконто.Вставить(Измерение.Имя, Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, Нстр("ru = 'Карточка счета '") + СчетРасшифровки);
		
	ИначеЕсли Выборка.Группировка() = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, Нстр("ru = 'Карточка счета '") + СчетРасшифровки);
		
	ИначеЕсли Выборка.Группировка() = "КорСчет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			// ПараметрыРасшифровки.Вставить("Отбор", ОтборРасшифровка);
			
		КонецЕсли;
		
		ПараметрыРасшифровкиДт = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоДт"), Элемент.Значение);
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоКт"), Элемент.Значение);
			Иначе				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиДт.Вставить("СчетДт", СчетРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("СчетКт", Выборка.КорСчет);
		
		СписокРасшифровкиДт = Новый СписокЗначений;
		СписокРасшифровкиДт.Добавить(ПараметрыРасшифровкиДт, Нстр("ru = 'Отчет по проводкам '") + СчетРасшифровки);
		ПараметрыРасшифровкиКт = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		ПараметрыРасшифровкиКт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоКт"), Элемент.Значение);
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоДт"), Элемент.Значение);
			Иначе				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиКт.Вставить("СчетДт", Выборка.КорСчет);
		ПараметрыРасшифровкиКт.Вставить("СчетКт", СчетРасшифровки);
		
		СписокРасшифровкиКт = Новый СписокЗначений;
		СписокРасшифровкиКт.Добавить(ПараметрыРасшифровкиКт, Нстр("ru = 'Отчет по проводкам '") + СчетРасшифровки);
		
		// Для счета в целом
		ПараметрыРасшифровки.Вставить("Отбор", Новый Соответствие);
		Для каждого Элемент Из ОтборРасшифровка Цикл
			ПараметрыРасшифровки["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, Нстр("ru = 'Отчет по проводкам '") + СчетРасшифровки);
		
	ИначеЕсли Лев(Выборка.Группировка(), 11) = "КорСубконто" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
		КонецЕсли;
		
		ПараметрыРасшифровкиДт = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоДт"), Элемент.Значение);
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоКт"), Элемент.Значение);
			Иначе				
				ПараметрыРасшифровкиДт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиДт.Вставить("СчетДт", СчетРасшифровки);
		ПараметрыРасшифровкиДт.Вставить("СчетКт", Выборка.КорСчет);
		
		СписокРасшифровкиДт = Новый СписокЗначений;
		СписокРасшифровкиДт.Добавить(ПараметрыРасшифровкиДт, Нстр("ru = 'Отчет по проводкам '") + СчетРасшифровки);
		ПараметрыРасшифровкиКт = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ПараметрыРасшифровки);
		ПараметрыРасшифровкиКт.Вставить("Отбор", Новый Соответствие);
		
		Для каждого Элемент Из ОтборРасшифровка Цикл
			
			Если Лев(Элемент.Ключ, 8) = "Субконто" Тогда				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "Субконто", "СубконтоКт"), Элемент.Значение);
			ИначеЕсли Лев(Элемент.Ключ, 11) = "КорСубконто" Тогда  				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(СтрЗаменить(Элемент.Ключ, "КорСубконто", "СубконтоДт"), Элемент.Значение);
			Иначе     				
				ПараметрыРасшифровкиКт["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыРасшифровкиКт.Вставить("СчетДт", Выборка.КорСчет);
		ПараметрыРасшифровкиКт.Вставить("СчетКт", СчетРасшифровки);
		
		СписокРасшифровкиКт = Новый СписокЗначений;
		СписокРасшифровкиКт.Добавить(ПараметрыРасшифровкиКт, Нстр("ru = 'Отчет по проводкам '") + СчетРасшифровки);
		
		// Для счета в целом
		ПараметрыРасшифровки.Вставить("Отбор", Новый Соответствие);
		Для каждого Элемент Из ОтборРасшифровка Цикл
			ПараметрыРасшифровки["Отбор"].Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, Нстр("ru = 'Отчет по проводкам '") + СчетРасшифровки);
		
	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		Если ОтборСубконто <> Неопределено Тогда
			
			ДатаНачПериода = Выборка[Выборка.Группировка()];
			ОтборСубконто.Вставить(Выборка.Группировка(), ДатаНачПериода);
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			ОтборРасшифровкаБезПериода = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборРасшифровка);
			ОтборРасшифровкаБезПериода.Удалить("Период");
			
			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровкаБезПериода);
			
			ПараметрыКарточкиСчета.Вставить("ДатаНач", ДатаНачПериода);
			
			ПараметрыКарточкиСчета.Вставить("ДатаКон", ПолучитьКонецПериода(ДатаНачПериода, Периодичность));
			
			СписокРасшифровки = Новый СписокЗначений;
			
			СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, Нстр("ru = 'Карточка счета '") + СчетРасшифровки);
			
		КонецЕсли;
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;
	
	Если СписокРасшифровкиДт <> Неопределено Тогда
		Область.Параметры.РасшифровкаДт = СписокРасшифровкиДт;
	КонецЕсли;
	Если СписокРасшифровкиКт <> Неопределено Тогда
		Область.Параметры.РасшифровкаКт = СписокРасшифровкиКт;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Процедура выводит счета.
// 
// Параметры:
//  ВыборкаОбороты.
//  ВыборкаОстатки.
//  СтруктураПараметров.
//  ОтборСубконто.
// 
Процедура ВывестиСчета(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборСубконто)

	Если Не ПоСубсчетамИСубконто Тогда
		ВывестиСубконто(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, ОтборСубконто);
		Возврат;
	КонецЕсли;
		
	Измерение = "Счет";
	
	ОборотИспользован  = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, Измерение);
	ОстатокИспользован = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, Измерение);
	
	ОстатокПрочитан = Ложь;
	ОборотПрочитан = Ложь;
		
	Пока Истина Цикл
		
		// ОбработкаПрерыванияПользователя();
		
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
		
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
		
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда     			
			ОборотИспользован  = Истина;
			ОстатокИспользован = Истина;       			
		ИначеЕсли ОборотПрочитан И бит_БухгалтерскиеОтчетыСервер.ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству, СтруктураПараметров.МассивРесурсов) Тогда 			
			ОборотИспользован = Истина;  			
		ИначеЕсли ОстатокПрочитан Тогда 			
			ОстатокИспользован = Истина; 			
		КонецЕсли;
		
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
		
		Выборка = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован,  ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
		
		// Вывод начального сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(Выборка);
        
        // Заполним параметры области.
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, Выборка, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
        
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборСубконто);
		
		Уровень = Выборка.Уровень();
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
		// Вывод вложенных итогов
		ВывестиСубконто(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, ОтборСубконто);
		ВывестиСчета(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, ОтборСубконто);
			
		// Вывод оборота и кон сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСчет;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
        
        Если ОборотИспользован Тогда
            
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОбороты);
            
            // Заполним параметры области.
            бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаОбороты, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
            
        КонецЕсли;
        
        Если ОстатокИспользован тогда
            
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОстатки);
            
            // Заполним параметры области.
            бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаОстатки, СтруктураПараметров.МассивРесурсов, "КонДт, КонКт");
            
		КонецЕсли;
			
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборСубконто);
			
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			
	КонецЦикла;
	
КонецПроцедуры // ВывестиСчета()

// Процедура выполняет очистку параметров области.
// 
// Параметры:
//  Область.
// 
Процедура ОчиститьПараметрыОбласти(Область)
	
	Для Индекс = 0 По Область.Параметры.Количество() - 1 Цикл
		Область.Параметры.Установить(Индекс, Неопределено);
	КонецЦикла;
	
КонецПроцедуры // ОчиститьПараметрыОбласти()

// Процедура выполняет переход к слудующему обороту.
// 
// Параметры:
//  Выборка.
//  ИмяИзмерения.
//  ЗначениеИзмерения.
//  МассивРесурсов.
// 
Процедура СледующийОборот(Выборка, ИмяИзмерения = Неопределено, ЗначениеИзмерения = Неопределено, МассивРесурсов = Неопределено)
	
	// В выборке могу быть строки без оборотов но с остатками, их пропускаем.
	Если ИмяИзмерения <> Неопределено Тогда
		СтруктураПоиска = Новый Структура(ИмяИзмерения, ЗначениеИзмерения);
	КонецЕсли;
		
	Пока ИмяИзмерения = Неопределено И Выборка.Следующий() 
        ИЛИ Выборка.НайтиСледующий(СтруктураПоиска) Цикл
        
        // Проверим наличие оборота по ресурсам.
        Счетчик = 0;
        
        Для Каждого ТекРесурс Из МассивРесурсов Цикл
            
            ОборотовНет = ВЧисло(Выборка[ТекРесурс + "ЕстьОборотДт"]) = 0 И ВЧисло(Выборка[ТекРесурс + "ЕстьОборотКт"]) = 0;
            
            Если ОборотовНет Тогда
                Счетчик = Счетчик + 1;
            Иначе
                Прервать;
            КонецЕсли;
            
        КонецЦикла;
        
        Если Счетчик = МассивРесурсов.Количество()
            И (Не ПоКоличеству ИЛИ ВЧисло(Выборка.КоличествоЕстьОборотДт) = 0 И ВЧисло(Выборка.КоличествоЕстьОборотКт)) = 0 Тогда
			Продолжить;
		Иначе
			Возврат;
        КонецЕсли;
        
	КонецЦикла;
		
КонецПроцедуры // СледующийОборот()

// Процедура выводит валюту.
// 
// Параметры:
//  ВыборкаОбороты.
//  ВыборкаОстатки.
//  СтруктураПараметров.
//  ОтборДляРасшифровки.
// 
Процедура ВывестиВалюты(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки)
	
	ВыборкаВалютОбороты = ВыборкаОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
	ВыборкаВалютОстатки = ВыборкаОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
		
	ЕстьПериоды = ЗначениеЗаполнено(Периодичность);
	
	Пока ВыборкаВалютОбороты.Следующий() Цикл
		
		// Ищем следующий остаток по той же валюте, по которой оборот.
		СледующийОборот(ВыборкаВалютОстатки, "Валюта", ВыборкаВалютОбороты.Валюта, СтруктураПараметров.МассивРесурсов);
		
		// Вывод нач сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалюта;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалютОстатки);
        
        // Заполним параметры области.
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаВалютОстатки, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
        
		Уровень = ВыборкаВалютОбороты.Уровень();
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаВалютОбороты, ВыборкаВалютОстатки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		// Вывод начального сальдо: конец
		
		// Вывод вложенных итогов
		ВывестиКорСчета(ВыборкаВалютОбороты, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		// Вывод вложенных итогов: конец
		
		// Вывод оборота и кон сальдо
		
		ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогВалюта;
		ОчиститьПараметрыОбласти(ВыводимаяОбласть);
        
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалютОбороты);
        
        // Заполним параметры области.
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаВалютОбороты, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
        
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалютОстатки);
        
        // Заполним параметры области.
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаВалютОстатки, СтруктураПараметров.МассивРесурсов, "КонДт, КонКт");
        
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаВалютОбороты, ВыборкаВалютОстатки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		
	КонецЦикла;

КонецПроцедуры // ВывестиВалюты()

// Вывод субконто: общая процедура
// 
// Параметры:
//  ВыборкаОбороты.
//  ВыборкаОстатки.
//  СтруктураПараметров.
//  ОтборСубконто.
// 
Процедура ВывестиСубконто(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборСубконто)

	Если СтруктураПараметров.МассивСубконто.Количество() > 0 Тогда
		ВыводСубконто(ВыборкаОбороты, ВыборкаОстатки, 0, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто));
	ИначеЕсли ВыборкаОбороты <> Неопределено Тогда
		ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто));
	КонецЕсли;

КонецПроцедуры // ВывестиСубконто()

#КонецОбласти

// Преобразование значения из выборки результат запроса в число.
// 
// Параметры:
//  Значение - Число.
// 
Функция ВЧисло(Значение)
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции // ВЧисло()

// Получение даты конца периода по заданной периодичности и началу периода.
// 
// Параметры:
//   ПериодС   - Начало периода.
//   СтдПериод - Периодичность: ДЕНЬ, НЕДЕЛЯ, ДЕКАДА, МЕСЯЦ, КВАРТАЛ, ПОЛУГОДИЕ, ГОД.
// 
// Возвращаемое значение:
//   Дата         - Рассчитанный конец периода.
// 
Функция ПолучитьКонецПериода(ПериодС, СтдПериод)
	
	// Переменная Период
	Перем Период;
	
	Периодичность = Врег(СтдПериод);
	
	Если Периодичность = "ДЕНЬ" Тогда
		ПериодПо = КонецДня(ПериодС);
	ИначеЕсли Периодичность = "НЕДЕЛЯ" Тогда
		ПериодПо = КонецНедели(ПериодС);
	ИначеЕсли Периодичность = "ДЕКАДА" Тогда
		ПериодПо = ПериодС + 10 * 24 * 60 * 60 - 1;
	ИначеЕсли Периодичность = "МЕСЯЦ" Тогда
		ПериодПо = КонецДня(КонецМесяца(ПериодС));
	ИначеЕсли Периодичность = "КВАРТАЛ" Тогда
		ПериодПо = КонецДня(КонецКвартала(ПериодС));
	ИначеЕсли Периодичность = "ПОЛУГОДИЕ" Тогда
		
		СерединаГода = КонецМесяца(ДобавитьМесяц(НачалоГода(ПериодС), 6));
		
		Если ПериодС <= СерединаГода Тогда
			ПериодПо = СерединаГода;
		Иначе
			ПериодПо = КонецДня(КонецГода(ПериодС));
		КонецЕсли;
		
	ИначеЕсли Периодичность = "ГОД" Тогда
		ПериодПо = КонецДня(КонецГода(ПериодС));
	КонецЕсли;
	
	Возврат ПериодПо;
	
КонецФункции // ПолучитьКонецПериода()

#КонецОбласти

#Область Инициализация

ИмяРегистраБухгалтерии = "бит_Бюджетирование";

СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

МассивСчет = Новый Массив;
МассивСчет.Добавить(ТипЗнч(ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].ПустаяСсылка()));

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));

МассивТаблицаЗначений = Новый Массив;
МассивТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));

ОписаниеТиповСчет            = Новый ОписаниеТипов(МассивСчет);
ОписаниеТиповБулево          = Новый ОписаниеТипов(МассивБулево);
ОписаниеТиповСтрока          = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТаблицаЗначений);

// Создание структуры реквизитов - таблиц.
ПравилаВыводаИтогов.Колонки.Очистить();
ПравилаВыводаИтогов.Колонки.Добавить("Счет"                           , ОписаниеТиповСчет);
ПравилаВыводаИтогов.Колонки.Добавить("Субсчета"                       , ОписаниеТиповБулево);
ПравилаВыводаИтогов.Колонки.Добавить("ПредставлениеРазворотПоСубконто", ОписаниеТиповСтрока);
ПравилаВыводаИтогов.Колонки.Добавить("РазворотПоСубконто"             , ОписаниеТиповТаблицаЗначений);

МассивШиринКолонок = Новый Массив;
ШиринаТаблицы      = 0;

#КонецОбласти

#КонецЕсли
