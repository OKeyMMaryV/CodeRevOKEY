
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСКД();
		
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_ПравилаТрансляции;
	
	ЗаполнитьКэшЗначений();
    	
	УстановитьЗначенияПоУмолчанию();
	
	РасположитьНаРазныхСтр = Истина;
	УправлениеРасположениемТаблиц();
		
	ЗаполнитьСКД();
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	Элементы.ГруппаОсновныеНастройки.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	Элементы.ГруппаОсновныеНастройки.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "СтруктураКонструктора".
// 
&НаКлиенте
Процедура СтруктураКонструктораПриИзменении(Элемент)
	
	ЗаполнитьСКД();	
	ЗаполненоСКД = Истина;
	
КонецПроцедуры // СтруктураКонструктораПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ПравилоТрансляции".
// 
&НаКлиенте
Процедура ПравилоТрансляцииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Отчет.ПравилоТрансляции) Тогда 
				
		ПравилоТрансляцииПриИзмененииСервер();	
		
	КонецЕсли;
		
КонецПроцедуры // ПравилоТрансляцииПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода "ВидВыводимыхПравил".
// 
&НаКлиенте
Процедура ВидВыводимыхПравилОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидВыводимыхПравилОчистка()

// Процедура - обработчик события "ОбработкаРасшифровки" 
// полей табличных документов "ТабДокПравил" 
// и "ТабДокПравил2".
// 
&НаКлиенте
Процедура ТабДокПравилОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОбработкаРасшифровки(Расшифровка, ДанныеРасшифровкиПравил, СтандартнаяОбработка);
		
КонецПроцедуры // ТабДокПравилОбработкаРасшифровки()

// Процедура - обработчик события "ОбработкаРасшифровки" 
// полей табличных документов "ТабДокИсключений" 
// и "ТабДокИсключений2".
// 
&НаКлиенте
Процедура ТабДокИсключенийОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОбработкаРасшифровки(Расшифровка, ДанныеРасшифровкиИсключений, СтандартнаяОбработка);
		
КонецПроцедуры // ТабДокИсключенийОбработкаРасшифровки()  

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();
		
КонецПроцедуры // КомандаПанельНастроек()

// Процедура - обработчик команды "КомандаСформировать".
// 
&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	СформироватьОтчет();
	
КонецПроцедуры // КомандаСформировать()

// Процедура - обработчик команды "КомандаНаОднойСтранице".
// 
&НаКлиенте
Процедура КомандаИзменитьРасположениеТаблиц(Команда)
	
	РасположитьНаРазныхСтр = Не РасположитьНаРазныхСтр;
	УправлениеРасположениемТаблиц();	
	
КонецПроцедуры // КомандаНаОднойСтранице()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обрабатывает расшифровку.
// 
// Параметры:
//  Расшифровка  		 - ИдентификаторРасшифровкиКомпоновкиДанных.
//  ДанныеРасшифровки  	 - Строка.
//  СтандартнаяОбработка - Булево.
// 
&НаКлиенте
Процедура ОбработкаРасшифровки(Расшифровка, ДанныеРасшифровки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ЗначениеРасшифровки = бит_ОтчетыСервер.ПолучитьСсылкуРасшифровки(Расшифровка, ДанныеРасшифровки);
	
	Если ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
		ПоказатьЗначение( , ЗначениеРасшифровки);			
	КонецЕсли;	

КонецПроцедуры // ОбработкаРасшифровки()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	                    		
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Отчеты);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Отчет.бит_ПравилаТрансляции");
	
	ВидыКолонокИсключений = Новый Массив;
	ВидыКолонокИсключений.Добавить(Перечисления.бит_ВидыКолонокПравилТрансляции.РеквизитИсточника);
	ВидыКолонокИсключений.Добавить(Перечисления.бит_ВидыКолонокПравилТрансляции.Прочее);
	фКэшЗначений.Вставить("ВидыКолонокИсключений", ВидыКолонокИсключений);
	            	                                                  
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет расположением таблиц: на одной странице / на разных.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УправлениеРасположениемТаблиц()

	Элементы.ГруппаОтчетВертикально.Видимость = Не РасположитьНаРазныхСтр;
	Элементы.ГруппаОтчетНаСтраницах.Видимость = РасположитьНаРазныхСтр;	
	
	Элементы.КомандаИзменитьРасположениеТаблиц.Заголовок = ?(РасположитьНаРазныхСтр, 
															"Расположить на одной странице", 
															"Расположить на разных страницах");

КонецПроцедуры // УправлениеРасположениемТаблиц()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
													 
	Элементы.ГруппаОсновныеНастройки.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура - обработчик события "ПриИзменении" поля ввода "ПравилоТрансляции".
// 
&НаСервере
Процедура ПравилоТрансляцииПриИзмененииСервер()
	
	Если Не Отчет.ПравилоТрансляции.ЭтоГруппа Тогда 
				
		Отчет.СтруктураКонструктора = Отчет.ПравилоТрансляции.НастройкаПравилТрансляции;
		ЗаполнитьСКД();
		ЗаполненоСКД = Истина;
		
	КонецЕсли;  
	
КонецПроцедуры // ПравилоТрансляцииПриИзмененииСервер()

// Функция формирует массив правил трансляции.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   Массив.
// 
&НаСервере
Функция ПолучитьМассивПравилТрансляции()

	МассивПравил = Новый Массив;
	
	ЗаполненоПравило = ЗначениеЗаполнено(Отчет.ПравилоТрансляции);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтруктураКонструктора", Отчет.СтруктураКонструктора);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Текст = "
	|ВЫБРАТЬ
	|	бит_ПравилаТрансляции.Ссылка КАК ПравилоТрансляции
	|ИЗ
	|	Справочник.бит_ПравилаТрансляции КАК бит_ПравилаТрансляции
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_НазначениеПравилТрансляции.СрезПоследних КАК НазначениеПравил
	|	ПО бит_ПравилаТрансляции.Ссылка = НазначениеПравил.ПравилоТрансляции
	|
	|ГДЕ
	|	бит_ПравилаТрансляции.НастройкаПравилТрансляции = &СтруктураКонструктора
	|	%УсловиеПоПравилу%
	|   %УсловиеПоНазначенности%
	|	
	|СГРУППИРОВАТЬ ПО
	|	бит_ПравилаТрансляции.Ссылка
	|
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	// Условие по правилу или родителю
	Если ЗаполненоПравило Тогда
		Запрос.УстановитьПараметр("ПравилоТрансляции", Отчет.ПравилоТрансляции);
		Если Отчет.ПравилоТрансляции.ЭтоГруппа Тогда
		   	ТекстУсловияПоПравилу = "И бит_ПравилаТрансляции.Родитель = &ПравилоТрансляции";
		Иначе
			ТекстУсловияПоПравилу = "И бит_ПравилаТрансляции.Ссылка = &ПравилоТрансляции";
		КонецЕсли;
	Иначе
		ТекстУсловияПоПравилу = "";
	КонецЕсли;
	Текст = СтрЗаменить(Текст, "%УсловиеПоПравилу%", ТекстУсловияПоПравилу);
	
	// Условие: правило назначено / неназначено
	УсловиеПоНазн = " (НазначениеПравил.Регистратор ЕСТЬ NULL 
					|ИЛИ НазначениеПравил.Активность = ЛОЖЬ 
					|ИЛИ (НазначениеПравил.ДатаОкончания < &ТекущаяДата И НазначениеПравил.ДатаОкончания <>  ДАТАВРЕМЯ(1,1,1)))";
	Если Отчет.ВидВыводимыхПравил = "Назначенные" Тогда
		ТекстУсловияПоНазначенности = "И Не " + УсловиеПоНазн;
	ИначеЕсли Отчет.ВидВыводимыхПравил = "Неназначенные" Тогда
		ТекстУсловияПоНазначенности = "И " + УсловиеПоНазн;
	Иначе
	    ТекстУсловияПоНазначенности = "";
	КонецЕсли;
	Текст = СтрЗаменить(Текст, "%УсловиеПоНазначенности%", ТекстУсловияПоНазначенности);
	
	// Обработка запроса
	Запрос.Текст = Текст;
	Результат = Запрос.Выполнить();
	ТаблицаПравил = Результат.Выгрузить();
	
	// Формирование массива правил
	МассивПравил = ТаблицаПравил.ВыгрузитьКолонку("ПравилоТрансляции");
	
	Возврат МассивПравил;
	
КонецФункции // ПолучитьМассивПравилТрансляции()

// Функция формирует таблицу исключений.
// 
// Параметры:
//  МассивПравил    - Массив.
//  ТаблицаКолонки  - ТаблицаЗначений.
//  ВидыКолонок     - Массив.
//  
// Возвращаемое значение:
//   ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуИсключений(МассивПравил, ТаблицаКолонки, ВидыКолонок)

	ТаблицаИсключений = Новый ТаблицаЗначений;
	
	// Таблица исключений
	бит_МеханизмТрансляции.ИнициализироватьТаблицуНастройки(ТаблицаИсключений, ТаблицаКолонки, ВидыКолонок);
	
	ТаблицаЧистая = ТаблицаИсключений.Скопировать();
	
	ТаблицаИсключений.Колонки.Добавить("ПравилоТрансляции");
		
	Для каждого ТекущееПравило Из МассивПравил Цикл
		
		ТаблицаВременная = ТаблицаЧистая.Скопировать();
		
		ПравилоОбъект = ТекущееПравило.ПолучитьОбъект();
		ПравилоОбъект.ВосстановитьТаблицуИсключений(ТаблицаВременная);
		
		Для каждого Стр Из ТаблицаВременная Цикл
			
			НоваяСтр = ТаблицаИсключений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Стр);
			НоваяСтр.ПравилоТрансляции = ТекущееПравило;
			
		КонецЦикла; 
		
	КонецЦикла; 

	Возврат ТаблицаИсключений;
	
КонецФункции // ПолучитьТаблицуИсключений()

// Процедура обрабатывает строку дерева, добавляет новые строки в таблицу правил.
// 
// Параметры:
//  СтрокаДерева   - СтрокаДереваЗначений.
//  ТаблицаПравил  - ТаблицаЗначений.
//  ТекущееПравило - СправочникСсылка.бит_ПравилаТрансляции.
// 
&НаСервере
Процедура ОбработатьСтрокуДерева(СтрокаДерева, ТаблицаПравил, ТекущееПравило, Уровень)

	НоваяСтр = ТаблицаПравил.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтр, СтрокаДерева);
	НоваяСтр.ПравилоТрансляции = ТекущееПравило;
	НоваяСтр.Уровень = Уровень;
	
	Для каждого Стр Из СтрокаДерева.Строки Цикл
		Уровень = Уровень + 1;
		ОбработатьСтрокуДерева(Стр, ТаблицаПравил, ТекущееПравило, Уровень);
		Уровень = Уровень - 1;
	КонецЦикла;

КонецПроцедуры // ОбработатьСтрокуДерева()

// Функция формирует таблицу правил.
// 
// Параметры:
//  МассивПравил   - Массив.
//  ТаблицаКолонки - ТаблицаЗначений.
//  
// Возвращаемое значение:
//   ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуПравил(МассивПравил, ТаблицаКолонки)

	ДеревоПравил = Новый ДеревоЗначений; 
	ТаблицаПравил = Новый ТаблицаЗначений;   
	
	// Таблица правил
	бит_МеханизмТрансляции.ИнициализироватьТаблицуНастройки(ДеревоПравил, ТаблицаКолонки);
	
	ДеревоЧистое = ДеревоПравил.Скопировать();
	
	ТаблицаПравил.Колонки.Добавить("ПравилоТрансляции");
	ТаблицаПравил.Колонки.Добавить("Уровень");
	Для каждого КолонкаДерева Из ДеревоПравил.Колонки Цикл
		ТаблицаПравил.Колонки.Добавить(КолонкаДерева.Имя);
	КонецЦикла; 
	
	// Уровень по справочнику бит_ПравилаТрансляции.
	Уровень = 0;
	
	Для каждого ТекущееПравило Из МассивПравил Цикл
		
		ПравилоОбъект = ТекущееПравило.ПолучитьОбъект();
		ПравилоОбъект.ВосстановитьТаблицуПравил(ДеревоПравил); 
		
		Для каждого Стр Из ДеревоПравил.Строки Цикл
			ОбработатьСтрокуДерева(Стр, ТаблицаПравил, ТекущееПравило, Уровень);
		КонецЦикла;
		
		ДеревоПравил.Строки.Очистить();
		
	КонецЦикла; 

	Возврат ТаблицаПравил;
	
КонецФункции // ПолучитьТаблицуПравил()

// Процедура добавляет поле  в набор данных компоновки данных.
// 
// Параметры:
//  НаборДанных   - НаборДанныхКомпоновкиДанных.
//  ИмяПоля       - Строка.
//  ПутьКДанным   - Строка.
//  Заголовок     - Строка.
//  ОписаниеТипов - ОписаниеТипов.
// 
&НаСервере
Процедура ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, ИмяПоля, ПутьКДанным="", Заголовок="", ОписаниеТипов = Неопределено)

	ПолеКомпоновки = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеКомпоновки.Поле        = ИмяПоля;	
	ПолеКомпоновки.Заголовок   = ?(НЕ ПустаяСтрока(Заголовок),   Заголовок,   ИмяПоля);
	ПолеКомпоновки.ПутьКДанным = ?(НЕ ПустаяСтрока(ПутьКДанным), ПутьКДанным, ИмяПоля);
	
	Если ОписаниеТипов <> Неопределено Тогда
		ПолеКомпоновки.ТипЗначения = ОписаниеТипов;	
	КонецЕсли; 

КонецПроцедуры // ДобавитьПолеНабораДанных()

// Процедура добавляет поля быстрого отбора.
// 
// Параметры:
//  СКД 		  - СхемаКомпоновкиДанных.
//  МассивКолонок - Массив. 
// 
&НаСервере
Процедура ДобавитьПоляБыстрогоОтбора(СКД, МассивКолонок)

	Для каждого Колонка Из МассивКолонок Цикл
		ЭлементОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		ЭлементОтбора.Использование = Ложь;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Колонка.ИмяКолонки);
		
		//ТекОписание = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(Колонка.ТипыЗначенийСтр);
		ТекОписание = Колонка.ТипыЗначенийВФорме;
		Если ТипЗнч(ТекОписание) = Тип("ОписаниеТипов") Тогда
		
		     ЭлементОтбора.ПравоеЗначение = ТекОписание.ПривестиЗначение();
		
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры // ДобавитьПоляБыстрогоОтбора()

// Функция формирует СКД.
// 
// Параметры:
//  ТаблицаКолонки  - ТаблицаЗначений.
//  ВидыКолонок  	- Массив (по умолчанию = Неопределено).
//  
// Возвращаемое значение:
//   СхемаКомпоновкиДанных.
// 
&НаСервере
Функция СформироватьСКД(ТаблицаКолонки, ВидыКолонок = Неопределено)

	ЭтоТаблицаПравил = ВидыКолонок = Неопределено;
	
	МассивОсновныхПолей  = Новый Массив;
	СписокИсключений.Очистить();	
	
	
	СКД = Отчеты.бит_ПравилаТрансляции.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	// Набор данных
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "ТаблицаПравил";
	НаборДанных.ИмяОбъекта = "ТаблицаПравил";
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
		           	
	// Поля набора
	Если ЭтоТаблицаПравил Тогда
		КЧ = Новый КвалификаторыЧисла(3);
		Массив = Новый Массив;
        Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
		ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, "Уровень",,, ОписаниеТиповЧ);
	КонецЕсли;
	
	Массив = Новый Массив;
    Массив.Добавить(Тип("СправочникСсылка.бит_ПравилаТрансляции"));
	ОписаниеТиповПТ = Новый ОписаниеТипов(Массив);
	ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, "ПравилоТрансляции",, "Правило трансляции", ОписаниеТиповПТ);
	
	Для каждого СтрокаТаблицы Из ТаблицаКолонки Цикл
		
		ИмяПоля = СтрокаТаблицы.ИмяКолонки;
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
		Если фКэшЗначений.ВидыКолонокИсключений.Найти(СтрокаТаблицы.ВидКолонки) <> Неопределено Тогда
      		МассивОсновныхПолей.Добавить(ПолеКД);
		Иначе
			
			СписокИсключений.Добавить(ПолеКД);
			Если Не ЭтоТаблицаПравил Тогда
				Продолжить; 			
			КонецЕсли;
			
		КонецЕсли;
		
		//ТекОписание = бит_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеИзСтроки(СтрокаТаблицы.ТипыЗначенийСтр);
		ТекОписание = СтрокаТаблицы.ТипыЗначенийВФорме;
		ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, ИмяПоля,, СтрокаТаблицы.НаименованиеКолонки, ТекОписание);  				
		
	КонецЦикла; 
            	
	// Выбранные поля
	ПоляСКД = СКД.НастройкиПоУмолчанию.Выбор.Элементы;
	Сч = 0;  
	
	Для каждого ПолеНабора Из НаборДанных.Поля Цикл
		
		НайденнаяКолонкаТз = ТаблицаКолонки.Найти(ПолеНабора.Поле, "ИмяКолонки");
				
		Если НайденнаяКолонкаТз = Неопределено 
			ИЛИ НайденнаяКолонкаТз.ПоложениеКолонки = Перечисления.бит_ПоложенияКолонокТаблицы.НоваяКолонка Тогда
			
			// Группировки
			Группа = ПоляСКД.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ИмяГруппы = "Группа" + Строка(Сч);
			Сч = Сч +1;
			Группа.Поле = Новый ПолеКомпоновкиДанных(ИмяГруппы);
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
			Группа.Использование = Истина;
			Группа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			
			
		КонецЕсли;
			
		ВыбранноеПоле = Группа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки = Новый  ПолеКомпоновкиДанных(ПолеНабора.ПутьКДанным);
		ВыбранноеПоле.Поле          = ПолеКомпоновки;
		ВыбранноеПоле.Заголовок = ?(НайденнаяКолонкаТз = Неопределено, ПолеНабора.Заголовок, НайденнаяКолонкаТз.НаименованиеКолонки);
		ВыбранноеПоле.Использование = Истина;
		
	КонецЦикла; 
	
	// Группировка по правилам трансляции
	ГруппировкаКомпоновки = СКД.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле         = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	Группа = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	Группа.Использование = Истина;
	Группа.Поле = Новый ПолеКомпоновкиДанных("ПравилоТрансляции");
	
	// Детальные записи
	ГруппировкаКомпоновкиДетали = ГруппировкаКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле         = ГруппировкаКомпоновкиДетали.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	
	
	// Быстрые отборы
	ДобавитьПоляБыстрогоОтбора(СКД, ТаблицаКолонки.НайтиСтроки(Новый Структура("ИмяРеквизита", "Счет")));
	ДобавитьПоляБыстрогоОтбора(СКД, ТаблицаКолонки.НайтиСтроки(Новый Структура("ИмяРеквизита", "СчетДт")));
	ДобавитьПоляБыстрогоОтбора(СКД, ТаблицаКолонки.НайтиСтроки(Новый Структура("ИмяРеквизита", "СчетКт")));

	
	// Условное оформление
	НовыйЭлемент = СКД.НастройкиПоУмолчанию.УсловноеОформление.Элементы.Добавить();
	ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение 		= WebЦвета.Белый;// WebЦвета.СветлоЖелтыйЗолотистый;
	Для каждого ПолеКомп Из МассивОсновныхПолей Цикл
		ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = ПолеКомп;
		ОформляемоеПоле.Использование = Истина;
	КонецЦикла;
	
	Если ЭтоТаблицаПравил Тогда
		НовыйЭлемент = СКД.НастройкиПоУмолчанию.УсловноеОформление.Элементы.Добавить();
		ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение 		= WebЦвета.СветлоНебесноГолубой;
		Для каждого СтрЭл Из СписокИсключений Цикл
			ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = СтрЭл.Значение;
			ОформляемоеПоле.Использование = Истина;
		КонецЦикла;	
	КонецЕсли;  	 
	
		
	Возврат СКД;
	
КонецФункции // СформироватьСКД()

// Процедура заполняет СКД и инициализирует настройки компоновщика.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьСКД(ОбновлятьНастройки = Истина)

	// Если не заполнен реквизит "СтруктураКонструктора", то ничего не делаем.
	Если Не ЗначениеЗаполнено(Отчет.СтруктураКонструктора) Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаКолонки = бит_МеханизмТрансляции.ПолучитьКолонкиТрансляции(Отчет.СтруктураКонструктора);
	
	МассивПравил = ПолучитьМассивПравилТрансляции();
	
	////////////////////////////////////////////////////////////////////////////////
	// Таблица правил
	// Сформируем СКД
	СКД = СформироватьСКД(ТаблицаКолонки);
	// Сохранение адреса СКД	
	АдресХранилищаСКД_Правила = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	
	
	////////////////////////////////////////////////////////////////////////////////
	// Компоновщик настроек
	ИсточникНастроек 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД_Правила);
	Отчет.КомпоновщикНастроек.Инициализировать(Неопределено);
	Отчет.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	// Перезаполним выбранные поля компоновщика настроек.
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество();
		
	////////////////////////////////////////////////////////////////////////////////
	// Таблица исключений
    ВидыКолонок = фКэшЗначений.ВидыКолонокИсключений;
	// Сформируем СКД
	СКД = СформироватьСКД(ТаблицаКолонки, ВидыКолонок);
	// Сохранение адреса СКД	
	АдресХранилищаСКД_Исключения = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
		    	
КонецПроцедуры // ЗаполнитьСКД()

// Процедура инициализирует СКД.
// 
// Параметры:
//  ТаблицаКолонки 	  - ТаблицаЗначений.
//  ВидыКолонок	   	  - Массив.
//  ТаблицаДанных	  - ТаблицаЗначений.
//  АдресХранилищаСКД - Строка.
//  ПроцессорКомпоновкиДанных - ПроцессорКомпоновкиДанных.
// 
&НаСервере
Процедура ИнициализацияСКД(ТаблицаКолонки, ВидыКолонок, ТаблицаДанных, АдресХранилищаСКД, ПроцессорКомпоновкиДанных, ДанныеРасшифровкиТаблицы)
    	
	// Сформируем СКД
	СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);// СформироватьСКД(ТаблицаКолонки, ВидыКолонок);
			
	// Формируем макет, с помощью компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Настройки по умолчанию
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	// Уберем лишние отборы для таблицы исключений.
	КоличествоОтборов = Настройки.Отбор.Элементы.Количество();
	Если ВидыКолонок <> Неопределено Тогда
		Для Сч = 1 По КоличествоОтборов Цикл
			ЭлНастройки = Настройки.Отбор.Элементы[КоличествоОтборов - Сч];
			МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлНастройки.ЛевоеЗначение, ".");
			ПолеОтбораИсключение = Новый ПолеКомпоновкиДанных(МассивСтрок[0]);
			Если СписокИсключений.НайтиПоЗначению(ПолеОтбораИсключение) <> Неопределено Тогда
				Настройки.Отбор.Элементы.Удалить(ЭлНастройки);			
			КонецЕсли; 			
		КонецЦикла;
	КонецЕсли;
		
	// Передаем в макет компоновки схему, настройки и данные расшифровки.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровкиТаблицы);
	
	// Внешняя таблица
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПравил", ТаблицаДанных);
	
	// Выполним компоновку с помощью процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиТаблицы, Истина);
	
	АдресДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиТаблицы, УникальныйИдентификатор); 
	              	
КонецПроцедуры // ИнициализацияСКД()

// Процедура закрывает все открытые группы.
// 
// Параметры:
//  ТемпУровень - Число
// 
&НаСервере
Процедура ЗакрытьГруппы(ТемпУровень)

	Пока ТемпУровень <> 0 Цикл
		ТабДокПравил.ЗакончитьГруппуСтрок();
		ТемпУровень = ТемпУровень - 1; 
	КонецЦикла;	

КонецПроцедуры // ЗакрытьГруппы()

// Процедура формирует отчет.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура СформироватьОтчет()
	
	СтрРегистрация = Новый Структура;
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);

	// Очистка табличных полей
	ТабДокИсключений.Очистить();
	ТабДокПравил.Очистить();
	
	// Если не заполнен реквизит "СтруктураКонструктора", то ничего не делаем.
	Если Не ЗначениеЗаполнено(Отчет.СтруктураКонструктора) Тогда
		Возврат;	
	КонецЕсли;	
	
	ТаблицаКолонки = бит_МеханизмТрансляции.ПолучитьКолонкиТрансляции(Отчет.СтруктураКонструктора);
	
	МассивПравил = ПолучитьМассивПравилТрансляции();
		 		
		
	//////////////////////////////////////////////////////////////////////////////////////
	// Таблица правил
	
	ВидыКолонок = Неопределено;
	
	ТаблицаПравил = ПолучитьТаблицуПравил(МассивПравил, ТаблицаКолонки);
	
	// Помещаем в переменную данные о расшифровке данных.
	ДанныеРасшифровкиПравил1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ИнициализацияСКД(ТаблицаКолонки, ВидыКолонок, ТаблицаПравил, АдресХранилищаСКД_Правила, ПроцессорКомпоновкиДанных, ДанныеРасшифровкиПравил1);
		
	// Подготовка к выводу таблицы 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокПравил);
		
	ТемпУровень = 0;
	КоличествоГрупп = 0;
	
	// Вывод поэлементно
	// ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.НачатьВывод();
	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	Пока ЭлементРезультата <> Неопределено Цикл
		
		Если ЭлементРезультата.ЗначенияПараметров.Количество() > 0 Тогда
			
			ПервыйПараметр = ЭлементРезультата.ЗначенияПараметров["П1"].Значение;
			Если ТипЗнч(ПервыйПараметр) = Тип("Число") Тогда
				Если ТемпУровень < ПервыйПараметр Тогда
					ТабДокПравил.НачатьГруппуСтрок();
				ИначеЕсли ТемпУровень > ПервыйПараметр Тогда
					ТабДокПравил.ЗакончитьГруппуСтрок();
				КонецЕсли;
				ТемпУровень = ПервыйПараметр;
				
			Иначе
				ЗакрытьГруппы(ТемпУровень);
			КонецЕсли;
		КонецЕсли;
		
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
	КонецЦикла;	
	
	ЗакрытьГруппы(ТемпУровень); 	
	ПроцессорВывода.ЗакончитьВывод();
	
	
	//////////////////////////////////////////////////////////////////////////////////////
	// Таблица исключений  
	
	ВидыКолонок = Новый Массив;
	ВидыКолонок.Добавить(Перечисления.бит_ВидыКолонокПравилТрансляции.РеквизитИсточника);
	ВидыКолонок.Добавить(Перечисления.бит_ВидыКолонокПравилТрансляции.Прочее);
	
	ТаблицаИсключений = ПолучитьТаблицуИсключений(МассивПравил, ТаблицаКолонки, ВидыКолонок);
	
	// Помещаем в переменную данные о расшифровке данных.
	ДанныеРасшифровкиИсключений1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ИнициализацияСКД(ТаблицаКолонки, ВидыКолонок, ТаблицаИсключений, АдресХранилищаСКД_Исключения, ПроцессорКомпоновкиДанных, ДанныеРасшифровкиИсключений1);
	
	// Вывод таблицы   	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	// ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьДокумент(ТабДокИсключений); 	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	//////////////////////////////////////////////////////////////////////////////////////
	// Сохранение данных расшифровки в хранилище.
	ДанныеРасшифровкиПравил = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиПравил1, УникальныйИдентификатор);
	ДанныеРасшифровкиИсключений = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиИсключений1, УникальныйИдентификатор);
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);

КонецПроцедуры // СформироватьОтчет()

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Отчеты.бит_ПравилаТрансляции.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		СтруктураНастроек.Вставить(ИмяРеквизита, Отчет[ИмяРеквизита]);	
	КонецЦикла; 
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	ЗаполнитьЗначенияСвойств(Отчет, СтруктураНастроек);
							
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда	
		ПрименитьНастройки(НастройкаПоУмолчанию);
	Иначе
		Отчет.ВидВыводимыхПравил = "Все";
	КонецЕсли;
			      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",
											ПараметрыФормы,
											ЭтаФорма);	
													
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
		
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура обработчик оповещения "НастройкиВосстановитьЗавершение".
// 
// Параметры:
// Настройка - Произвольный
// Параметры - Структура
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(Настройка, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Настройка) Тогда		
		ПрименитьНастройки(Настройка);
		ЗаполнитьСКД();
	КонецЕсли;
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()

#КонецОбласти
