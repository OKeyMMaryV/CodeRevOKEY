

//////////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Отчет по группе компаний");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Истина);
	РегистрационныеДанные.Вставить("Версия", "2.1");	
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");	
	РегистрационныеДанные.Вставить("Информация", "Отчет по группе компаний");
	РегистрационныеДанные.Вставить("ВерсияБСП", "2.2.2.1");
	
	///////////// команды /////////////////////////
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");
	
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "СБ_ОтчетПоГруппеКомпаний_Внешний";
	строкаКоманды.Представление = "Отчет по группе компаний";
	строкаКоманды.ПоказыватьОповещение = Истина;
	строкаКоманды.Использование = "ОткрытиеФормы";
	
	РегистрационныеДанные.Вставить("Команды", тзКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции


//Процедура СформироватьОтчет(Результат = Неопределено, ТаблицаНастроек) Экспорт
//	
//	Результат.Очистить();
//	
//	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
//	ВыводЗаголовкаОтчета(ЭтотОбъект, Результат);
//	ДоработатьКомпоновщикПередВыводом(ТаблицаНастроек);
//	КомпоновщикНастроек.Восстановить();
//	НастройкаКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
//	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
//	СтандартныеОтчеты.ВывестиОтчет(ЭтотОбъект, Результат, Неопределено, Истина, Неопределено, Истина, НастройкаКомпоновкиДанных);
//	
//	// Выполним дополнительную обработку Результата отчета
//	ОбработкаРезультатаОтчета(Результат);
//	
//КонецПроцедуры

//// В процедуре можно доработать компоновщик перед выводом в отчет
//// Изменения сохранены не будут
//Процедура ДоработатьКомпоновщикПередВыводом(ТаблицаНастроек) Экспорт
//	
//	КомпоновщикНастроек.Настройки.Структура.Очистить();
//	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
//	
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(НачалоПериода), Истина);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(КонецПериода), Истина);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ПериметрКонсолидации", ПериметрКонсолидации, Истина);
//	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТаблицаНастроек", ТаблицаНастроек, Истина);
//	
//	//ТекстЗапросаКонечныеОстатки = СхемаКомпоновкиДанных.НаборыДанных.КонечныеОстатки.Запрос;
//	//ТекстДляЗаменыКонечныеОстатки = СтандартныеОтчеты.ПолучитьТекстПоМаркерам(ТекстЗапросаКонечныеОстатки, "// МАРКЕР_ДобавлениеПолей_Начало", "// МАРКЕР_ДобавлениеПолей_Конец", Истина);
//	//ТекстНовыеПоляКонечныеОстатки = "";
//	//ТекстЗапросаНачальныеОстатки = СхемаКомпоновкиДанных.НаборыДанных.КонечныеОстатки.Запрос;
//	//ТекстЗапросаОбороты = СхемаКомпоновкиДанных.НаборыДанных.Обороты.Запрос;
//	
//	//Для Каждого СтрокаНастроек Из ТаблицаНастроек Цикл
//	//	
//	//	Если СтрокаНастроек.ТипПоказателя = "Конечные остатки" Тогда
//	//		ТекстНовыеПоляКонечныеОстатки = ТекстНовыеПоляКонечныеОстатки + ",
//	//		|	ВЫБОР
//	//		|		КОГДА ЕСТЬNULL(бит_Дополнительный_2Остатки.Счет, НЕОПРЕДЕЛЕНО) В (&Счета_" + СтрокаНастроек.ИмяПоказателя + ")
//	//		|			ТОГДА бит_Дополнительный_2Остатки.СуммаУпрОстаток
//	//		|		ИНАЧЕ 0
//	//		|	КОНЕЦ КАК " + СтрокаНастроек.ИмяПоказателя + "_КонОст";
//	//		
//	//		НовоеПоле = СхемаКомпоновкиДанных.НаборыДанных.КонечныеОстатки.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
//	//		НовоеПоле.Поле = СтрокаНастроек.ИмяПоказателя + "_КонОст";
//	//		НовоеПоле.ПутьКДанным = СтрокаНастроек.ИмяПоказателя + "_КонОст";
//	//		НовоеПоле.Заголовок = СтрокаНастроек.ПредставлениеПоказателяРус;
//	//		НовоеПоле.ВыражениеПредставление = "ВЫБОР КОГДА &АнглЯзык ТОГДА """ + СтрокаНастроек.ПредставлениеПоказателяАнгл + """ ИНАЧЕ """ + СтрокаНастроек.ПредставлениеПоказателяРус + """ КОНЕЦ";
//	//		
//	//		ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Структура, СтрокаНастроек.ИмяПоказателя + "_КонОст");
//	//	КонецЕсли;
//	//	
//	//КонецЦикла;
//	//
//	//СхемаКомпоновкиДанных.НаборыДанных.КонечныеОстатки.Запрос = СтрЗаменить(ТекстЗапросаКонечныеОстатки, ТекстДляЗаменыКонечныеОстатки, ТекстНовыеПоляКонечныеОстатки);
//	//
//	//Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
//	//	
//	//ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
//	//ПолеГруппировки.Использование  = Истина;
//	//ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
//	//ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
//	//Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
//	//Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
//	//ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец); 
//	
//КонецПроцедуры

//Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат)
//	
//	//ДополнительныеПараметры = Новый Структура();
//	//СтандартныеОтчеты.ВыводЗаголовкаОтчета(ОтчетОбъект, Результат, ДополнительныеПараметры);
//			
//КонецПроцедуры

//Процедура ОбработкаРезультатаОтчета(Результат)
//	
//	СтандартныеОтчеты.ОбработкаРезультатаОтчета(ЭтотОбъект, Результат);
//	
//КонецПроцедуры

