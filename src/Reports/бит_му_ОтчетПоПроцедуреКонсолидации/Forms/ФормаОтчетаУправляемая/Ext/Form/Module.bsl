
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_му_ОтчетПоПроцедуреКонсолидации;
	
	// Вызов механизма защиты
	
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);

	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
		
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ОбработкаРасшифровки" поля табличного документа "Результат".
// 
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка 		 = Ложь;
	ОбработкаРасшифровки 		 = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД));
	// ВыполненноеДействие 		 = Неопределено;
	// ПараметрВыполненногоДействия = Неопределено;
	
	ДополнительноеМеню = Новый СписокЗначений;
	ДополнительноеМеню.Добавить("СверкаВГО", 	"Сверка внутригрупповых оборотов");

	#Если Не ТонкийКлиент И Не ВебКлиент Тогда
	ДополнительноеМеню.Добавить("ОСВ", 			"Оборотно-сальдовая ведомость");
	ДополнительноеМеню.Добавить("ОСВПоСчету", 	"Оборотно-сальдовая ведомость по счету");
	#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Расшифровка", Расшифровка);
	
	ОбработчикВДРЗ = Новый ОписаниеОповещения("ВыбратьДействиеРасшифровкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОбработчикВДРЗ, Расшифровка, , ДополнительноеМеню);
		
КонецПроцедуры // РезультатОбработкаРасшифровки()

// Процедура - обработчик оповещения для выбора расшифровки.
// 
&НаКлиенте
Процедура ВыбратьДействиеРасшифровкиЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДопПараметры) Экспорт
	
	Расшифровка = ДопПараметры.Расшифровка;
	
	Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ПоказатьЗначение( , ПараметрВыполненногоДействия); 
			
		ИначеЕсли ВыполненноеДействие = "СверкаВГО" Тогда
		
			Счет 		= ПолучитьЗначениеРасшифровки(Расшифровка, "Счет");
			Организация = ПолучитьЗначениеРасшифровки(Расшифровка, "Организация");
			
			ФормаОтчета = ПолучитьФорму("Отчет.бит_му_СверкаВГО.Форма");
			
			Период = Неопределено;
			Для каждого ТекСтр Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ТекСтр) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если Строка(ТекСтр.Параметр) = "Период" Тогда
					Период = ТекСтр.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Заполним параметры и отбор
			Для каждого ТекСтр Из ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если (ТипЗнч(ТекСтр) = Тип("ОтборКомпоновкиДанных")) Тогда
					ТекСтр.Элементы.Очистить();
					
					Если ЗначениеЗаполнено(Счет) Тогда
						НоваяСтрока = ТекСтр.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						НоваяСтрока.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Счет");
						НоваяСтрока.ВидСравнения 	= ВидСравненияКомпоновкиДанных.ВИерархии;
						НоваяСтрока.ПравоеЗначение 	= Счет;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Организация) Тогда				
						НоваяСтрока = ТекСтр.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						НоваяСтрока.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Организация");
						НоваяСтрока.ПравоеЗначение 	= Организация;
					КонецЕсли;
				КонецЕсли;
				Если (ТипЗнч(ТекСтр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")) И (Строка(ТекСтр.Параметр) = "Период") Тогда
					ТекСтр.Значение = Период;
				КонецЕсли;
			КонецЦикла;
			
			ФормаОтчета.Открыть();		
			ФормаОтчета.СкомпоноватьРезультат();
			
		#Если Не ТонкийКлиент И Не ВебКлиент Тогда
		ИначеЕсли ВыполненноеДействие = "ОСВ" Тогда
			
			Организация = ПолучитьЗначениеРасшифровки(Расшифровка, "Организация");
			
			Период 				 = Неопределено;
			Для каждого ТекСтр Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ТекСтр) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если Строка(ТекСтр.Параметр) = "ПериметрКонсолидации" Тогда
					Если Организация = Неопределено Тогда
						Организация = ТекСтр.Значение;
					КонецЕсли;
				КонецЕсли;
				Если Строка(ТекСтр.Параметр) = "Период" Тогда
					Период = ТекСтр.Значение;
				КонецЕсли;
			КонецЦикла;
			
			ОтчетОСВ = Отчеты.бит_ОборотноСальдоваяВедомость_Управленческий.Создать();
			
			ФормаОтчета = ОтчетОСВ.ПолучитьФорму(, , Новый УникальныйИдентификатор());
			
            //ФормаОтчета.ЭтоОтработкаРасшифровки      = Истина;
            //ФормаОтчета.РежимРедактированияНастройки = Истина;
            //ФормаОтчета.ПредставлениеНастройки       = "Расшифровка " + Символы.ПС + "Отчет по процедуре консолидации";
			
			ФормаОтчета.Открыть();
			
			ОтчетОСВ.Организация 			= Организация;
			ОтчетОСВ.ВыводитьСуммуУпр 		= Истина;
			ОтчетОСВ.РегистрБухгалтерии 	= ПолучитьРегистрБухгалтерии();
			ОтчетОСВ.ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
			
			Если Период <> Неопределено Тогда
				ОтчетОСВ.Период = Период;
			КонецЕсли;
				
			//ФормаОтчета.ОбновитьОтчет();
            
            ФормаОтчета.Открыть();
			
		ИначеЕсли ВыполненноеДействие = "ОСВПоСчету" Тогда
			
			Счет = ПолучитьЗначениеРасшифровки(Расшифровка, "Счет");
			Если Счет = Неопределено Тогда
				Счет = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
			КонецЕсли;
			
			Организация = ПолучитьЗначениеРасшифровки(Расшифровка, "Организация");
			
			Период 				 = Неопределено;
			Для каждого ТекСтр Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ТекСтр) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если Строка(ТекСтр.Параметр) = "ПериметрКонсолидации" Тогда
					Если Организация = Неопределено Тогда
						Организация = ТекСтр.Значение;
					КонецЕсли;
				КонецЕсли;
				Если Строка(ТекСтр.Параметр) = "Период" Тогда
					Период = ТекСтр.Значение;
				КонецЕсли;
			КонецЦикла;
			
			ОтчетОСВ = Отчеты.бит_ОборотноСальдоваяВедомостьПоСчету_Управленческий.Создать();
			
			ФормаОтчета = ОтчетОСВ.ПолучитьФорму(, , Новый УникальныйИдентификатор());
			
            //ОтчетОСВ.ЗаполнитьНастройкиОтчетаЗначениямиПоУмолчанию(ФормаОтчета);
			
			ОтчетОСВ.Счет 					= Счет;
			ОтчетОСВ.Организация 			= Организация;
			ОтчетОСВ.ВыводитьСуммуУпр 		= Истина;
			ОтчетОСВ.РегистрБухгалтерии 	= ПолучитьРегистрБухгалтерии();
			ОтчетОСВ.ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
			
			Если Период <> Неопределено Тогда
				ОтчетОСВ.Период = Период;
			КонецЕсли;
			
            //ФормаОтчета.ЭтоОтработкаРасшифровки      = Истина;
            //ФормаОтчета.РежимРедактированияНастройки = Истина;
            //ФормаОтчета.ПредставлениеНастройки       = "Расшифровка " + Символы.ПС + "Отчет по процедуре консолидации";
				
			//ФормаОтчета.ОбновитьОтчет();
		
			ФормаОтчета.Открыть();
			
		#КонецЕсли
		
		Иначе
			
			ОтработатьРасшифровку(Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(АдресДанныеРасшифровки, Расшифровка, ПараметрВыполненногоДействия));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыбратьДействиеРасшифровкиЗавершение()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();	
	
КонецПроцедуры // КомандаПанельНастроек()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Функция получает элемент, соотвествующий регистру бухгалтерии "бит_Дополнительный_2"
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Результат - СправочникСсылка.бит_ОбъектыСистемы.
&НаСервере
Функция ПолучитьРегистрБухгалтерии()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_ОбъектыСистемы.Ссылка
	               |ИЗ
	               |	Справочник.бит_ОбъектыСистемы КАК бит_ОбъектыСистемы
	               |ГДЕ
	               |	бит_ОбъектыСистемы.Родитель = &Родитель
	               |	И бит_ОбъектыСистемы.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Родитель", 	Справочники.бит_ОбъектыСистемы.РегистрыБухгалтерии);
	Запрос.УстановитьПараметр("ИмяОбъекта", "бит_Дополнительный_2");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает значение расшифровки.
// 
// Параметры:
//  Расшифровка	- ИдентификаторРасшифровкиКомпоновкиДанных.
// 	Поле 		- Строка.
// 
// Возвращаемое значение:
//  Результат - Значение расшифровки.
// 
&НаСервере
Функция ПолучитьЗначениеРасшифровки(Расшифровка, Поле)

	ДанныеРасшифровкиОтчета = ПолучитьИзВременногоХранилища(АдресДанныеРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровкиОтчета.Элементы[Расшифровка];

	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ЗначениеПоляРасшифровки Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Значение = ЗначениеПоляРасшифровки.Значение;
			Если ЗначениеПоляРасшифровки.Поле = Поле Тогда
				Возврат Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Для каждого РодительПоляРасшифровки Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		Значение = ПолучитьЗначениеРасшифровки(РодительПоляРасшифровки.Идентификатор, Поле);
		Если Значение <> Неопределено Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции // ПолучитьЗначениеРасшифровки() 

// Процедура выполняет расшифровку отчета.
// 
&НаСервере
Процедура ОтработатьРасшифровку(ОписаниеОбработкиРасшифровки)
 
	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(АдресДанныеРасшифровки);
	ОбработкаРасшифровки 	= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровкиОбъект, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ОписаниеОбработкиРасшифровки.Идентификатор, ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки);

	Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	КонецЕсли;

	СкомпоноватьРезультат();
 
КонецПроцедуры

#КонецОбласти
