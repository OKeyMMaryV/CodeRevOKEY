&НаКлиенте
// +СБ Кузнецова С. 2016-07-14 
//Перем ПараметрыОбработчикаОжидания; 
Перем ПараметрыОбработчикаОжидания Экспорт; 
// -СБ Кузнецова С.

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

&НаКлиенте
Перем КлючеваяОперация;

&НаКлиенте
Перем ВремяНачалаОперации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                      , Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                     , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Отчет.ВключатьОбособленныеПодразделения);
	ПараметрыОтчета.Вставить("ПоказательСуммаРегл"              , Отчет.ПоказательСуммаРегл);
	ПараметрыОтчета.Вставить("ПоказательСуммаУпр"               , Отчет.ПоказательСуммаУпр);
	ПараметрыОтчета.Вставить("ПоказательСуммаМУ"                , Отчет.ПоказательСуммаМУ);
	ПараметрыОтчета.Вставить("ПоказательВалютнаяСумма"          , Мин(Отчет.ПоказательВалютнаяСумма, БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет()));
	ПараметрыОтчета.Вставить("ПоказательКоличество"             , Отчет.ПоказательКоличество);
	ПараметрыОтчета.Вставить("РазвернутоеСальдо"                , Отчет.РазвернутоеСальдо);
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей"    , Отчет.РазмещениеДополнительныхПолей);
	ПараметрыОтчета.Вставить("Периодичность"                    , Отчет.Периодичность);
	ПараметрыОтчета.Вставить("Счет"                             , Отчет.Счет);
	ПараметрыОтчета.Вставить("ПоСубсчетам"                      , Отчет.ПоСубсчетам);
	ПараметрыОтчета.Вставить("ПоСубсчетамКорСчетов"             , Отчет.ПоСубсчетамКорСчетов);
	ПараметрыОтчета.Вставить("Группировка"                      , Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ДополнительныеПоля"               , Отчет.ДополнительныеПоля.Выгрузить());
	ПараметрыОтчета.Вставить("СальдоНаНачалоДт"                 , Отчет.СальдоНаНачалоДт);
	ПараметрыОтчета.Вставить("СальдоНаНачалоКт"                 , Отчет.СальдоНаНачалоКт);
	ПараметрыОтчета.Вставить("СальдоНаКонецДт"                  , Отчет.СальдоНаКонецДт);
	ПараметрыОтчета.Вставить("СальдоНаКонецКт"                  , Отчет.СальдоНаКонецКт);
	ПараметрыОтчета.Вставить("ОборотыЗаПериодДт"                , Отчет.ОборотыЗаПериодДт);
	ПараметрыОтчета.Вставить("ОборотыЗаПериодКт"                , Отчет.ОборотыЗаПериодКт);
	ПараметрыОтчета.Вставить("ОборотыСоСчетамиДт"               , Отчет.ОборотыСоСчетамиДт);
	ПараметрыОтчета.Вставить("ОборотыСоСчетамиКт"               , Отчет.ОборотыСоСчетамиКт);
	ПараметрыОтчета.Вставить("РежимРасшифровки"                 , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ЭлементРасшифровки"               , ЭлементРасшифровки);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"                , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал"                   , ВыводитьПодвал);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                  , МакетОформления);	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"              , БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтаФорма));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("НаборПоказателей"                 , Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьНаборПоказателей());
	ПараметрыОтчета.Вставить("ОтветственноеЛицо"                , Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	ПараметрыОтчета.Вставить("ВыводитьЕдиницуИзмерения"         , ВыводитьЕдиницуИзмерения);
	//izhtc Алексей Яковлев 22.10.2015(
	ПараметрыОтчета.Вставить("МассивПоказателейДляОтбора"		, МассивПоказателейДляОтбора.ВыгрузитьЗначения());
	//izhtc Алексей Яковлев 22.10.2015)
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	// СофтБаланс Начало Кузнецова С. [15.01.2014] 
	Если Форма.ЭлементРасшифровки <> "" Тогда
		// СофтБаланс Начало Кузнецова С. [16.01.2014] 
		ТекстПериод = "";
		ТекстПредлог = ?(Отчет.ОборотыЗаПериодДт Или Отчет.ОборотыЗаПериодКт Или Отчет.ОборотыСоСчетамиДт Или Отчет.ОборотыСоСчетамиКт, " за ", " на ");
		
		// СофтБаланс Начало Кузнецова С. [20.01.2014] 
		Если Отчет.ОборотыЗаПериодДт Или Отчет.ОборотыЗаПериодКт Или Отчет.ОборотыСоСчетамиДт Или Отчет.ОборотыСоСчетамиКт Тогда
			// СофтБаланс Окончание Кузнецова С. [20.01.2014]
			Если ЗначениеЗаполнено(Отчет.КонецПериода) Тогда 
				Если Отчет.КонецПериода >= Отчет.НачалоПериода Тогда
					ТекстПериод = ТекстПредлог + ПредставлениеПериода(НачалоДня(Отчет.НачалоПериода), КонецДня(Отчет.КонецПериода), "ФП = Истина");
				Иначе
					ТекстПериод = "";
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Отчет.НачалоПериода) И Не ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
				ТекстПериод = ТекстПредлог + ПредставлениеПериода(НачалоДня(Отчет.НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
				ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
			КонецЕсли;
			// СофтБаланс Начало Кузнецова С. [20.01.2014] 
		ИначеЕсли (Отчет.СальдоНаНачалоДт Или Отчет.СальдоНаНачалоКт) И Не (Отчет.СальдоНаКонецДт Или Отчет.СальдоНаКонецКт) Тогда
			ТекстПериод = ТекстПредлог + " " + Формат(Отчет.НачалоПериода, "ДФ=dd.MM.yyyy") + " г.";
		ИначеЕсли (Отчет.СальдоНаКонецДт Или Отчет.СальдоНаКонецКт) И Не (Отчет.СальдоНаНачалоДт Или Отчет.СальдоНаНачалоКт) Тогда
			ТекстПериод = ТекстПредлог + " " + Формат(Отчет.КонецПериода, "ДФ=dd.MM.yyyy") + " г.";
		Иначе // сальдо начальное + сальдо конечное
			Для Каждого Показатель Из Форма.МассивПоказателейДляОтбора Цикл
				Если Лев(Показатель, 14) = "СальдоНаНачало" Тогда
					ТекстПериод = ТекстПредлог + " " + Формат(Отчет.НачалоПериода, "ДФ=dd.MM.yyyy") + " г.";
				ИначеЕсли Лев(Показатель, 13) = "СальдоНаКонец" Тогда
					ТекстПериод = ТекстПредлог + " " + Формат(Отчет.КонецПериода, "ДФ=dd.MM.yyyy") + " г.";
				Иначе
					ТекстПериод = ТекстПредлог + " " + Формат(Отчет.НачалоПериода, "ДФ=dd.MM.yyyy") + " г." + " - " + Формат(Отчет.КонецПериода, "ДФ=dd.MM.yyyy") + " г.";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
		// СофтБаланс Окончание Кузнецова С. [20.01.2014]
		
		ЗаголовокОтчета = Форма.ЭлементРасшифровки + ТекстПериод;
		// СофтБаланс Окончание Кузнецова С. [16.01.2014]
	Иначе
		// СофтБаланс Окончание Кузнецова С. [15.01.2014]
		ЗаголовокОтчета = "Обороты счета " + Отчет.Счет + " (международный) " + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);
		// СофтБаланс Начало Кузнецова С. [15.01.2014] 
	КонецЕсли;
	// СофтБаланс Окончание Кузнецова С. [15.01.2014]
	
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	СписокПолей.Добавить("Регистратор");
	СписокПолей.Добавить("БухТипРесурса");
	
	Если Режим = "Выбор" Тогда
		Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.Счет) Тогда 
		КоличествоСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчетаМУ(Отчет.Счет).КоличествоСубконто;
	Иначе
		КоличествоСубконто = 0;
	КонецЕсли;
	Для Индекс = КоличествоСубконто + 1 По 3 Цикл
		СписокПолей.Добавить("Субконто" + Индекс);
	КонецЦикла;
	
	Если Не БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчетаМУ(Отчет.Счет).УчетПоПодразделениям Тогда
		СписокПолей.Добавить("Подразделение");
	КонецЕсли;
	
	Если Не Отчет.ПоказательВалютнаяСумма Тогда
		СписокПолей.Добавить("Валюта");
		СписокПолей.Добавить("КорВалюта");
	КонецЕсли;
	
	Если Режим = "Группировка" Тогда
		СписокПолей.Добавить("Счет");
		СписокПолей.Добавить("СальдоНаНачалоПериода");
		СписокПолей.Добавить("ОборотыЗаПериод");
		СписокПолей.Добавить("СальдоНаКонецПериода");
		СписокПолей.Добавить("КорСчет");		
	ИначеЕсли Режим = "Выбор" Тогда
		СписокПолей.Добавить("СальдоНаНачалоПериода");
		СписокПолей.Добавить("ОборотыЗаПериод");
		СписокПолей.Добавить("СальдоНаКонецПериода");
		СписокПолей.Добавить("КорСчет");
	ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Порядок" Тогда
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено, ОтказПроверкиЗаполнения", Истина, Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
		ПараметрыОтчета,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура СчетПриИзмененииСервер()
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	Иначе
		ИзменениеСхемыКомпоновкиДанныхНаСервере();
	КонецЕсли;
	
	// 1С-ИжТиСи Полина 04.09.2015 (
	ЗначениеСчета = Неопределено;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл 
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И 
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет") И 
			(ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			// СофтБаланс Начало Кузнецова С. [16.01.2014] 
			Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Или
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			// СофтБаланс Окончание Кузнецова С. [16.01.2014]
			)
			И ЭлементОтбора.Использование = Истина Тогда
			ЗначениеСчета = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ЗначениеСчета) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
		Отчет.Счет = ЗначениеСчета;
	ИначеЕсли ТипЗнч(ЗначениеСчета) = Тип("СписокЗначений") И ЗначениеСчета.Количество() > 0 Тогда
		Отчет.Счет = ЗначениеСчета[0].Значение;
	Иначе
		Возврат;
	КонецЕсли;
	// 1С-ИжТиСи Полина 04.09.2015 )
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, ВыводимыеДанные, Группировка, Отбор, ДополнительныеПоля",
	Истина, Истина, Истина, Истина, Истина);
	ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИсходныеЗначения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСхемыКомпоновкиДанныхНаСервере() Экспорт
	
	Схема = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	Счет = Отчет.Счет;
	Если ЗначениеЗаполнено(Счет) Тогда
		
		КоличествоСубконто = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчетаМУ(Отчет.Счет).КоличествоСубконто;
		
		ИмяПоляПрефикс = "Субконто";
		
		ПараметрыОС      = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыНМА     = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		ПараметрыФизЛица = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
		
		// Изменение представления и наложения ограничения типа значения
		МассивНаборовДанных = Новый Массив;
		МассивНаборовДанных.Добавить("ОсновнойНаборДанных");
		МассивНаборовДанных.Добавить("Обороты");
		Для Индекс = 1 По КоличествоСубконто Цикл
			Для Каждого ИмяНабораДанных Из МассивНаборовДанных Цикл
				Поле = Схема.НаборыДанных[ИмяНабораДанных].Поля.Найти(ИмяПоляПрефикс + Индекс);
				Если Поле <> Неопределено Тогда
					ТипЗначения = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения;
					Поле.ТипЗначения = ТипЗначения;
					Поле.Заголовок   = Счет.ВидыСубконто[Индекс - 1].ВидСубконто.Наименование;
				КонецЕсли;
				
				Если Поле.ТипЗначения.СодержитТип(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипОсновныеСредства()) Тогда
					ПараметрыОС.ИндексСубконто    = Индекс;
					ПараметрыОС.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
					ПараметрыНМА.ИндексСубконто    = Индекс;
					ПараметрыНМА.ЗаголовокСубконто = Поле.Заголовок;
				ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ПараметрыФизЛица.ИндексСубконто    = Индекс;
					ПараметрыФизЛица.ЗаголовокСубконто = Поле.Заголовок;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеОС"     , ПараметрыОС);
		БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеНМА"    , ПараметрыНМА);
		БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеФизЛица", ПараметрыФизЛица);
		
		СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, СхемаКомпоновкиДанных);
		Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки) Экспорт
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчетаМУ(Отчет.Счет);
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	КоличествоСубконто = ДанныеСчета.КоличествоСубконто;
	
	ИмяПоляПрефикс = "Субконто";
	
	Если ЗаполняемыеНастройки.Свойство("Показатели") Тогда
		Если ЗаполняемыеНастройки.Показатели Тогда
			// Управление показателями
			Отчет.ПоказательСуммаРегл     = Истина;
			Отчет.ПоказательСуммаУпр      = Ложь;
			Отчет.ПоказательСуммаМУ       = Ложь;
			Отчет.ПоказательВалютнаяСумма = Отчет.Счет.Валютный;
			Отчет.ПоказательКоличество    = Отчет.Счет.Количественный;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("ВыводимыеДанные") Тогда
		Если ЗаполняемыеНастройки.ВыводимыеДанные Тогда
			Отчет.СальдоНаНачалоДт   = Истина;
			Отчет.СальдоНаНачалоКт   = Истина;
			Отчет.СальдоНаКонецДт    = Истина;
			Отчет.СальдоНаКонецКт    = Истина;
			Отчет.ОборотыЗаПериодДт  = Истина;
			Отчет.ОборотыЗаПериодКт  = Истина;
			Отчет.ОборотыСоСчетамиДт = Истина;
			Отчет.ОборотыСоСчетамиКт = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Группировка") Тогда
		Если ЗаполняемыеНастройки.Группировка Тогда
			// Добавление группировок с соответствии с выбранным счетом	
			Отчет.Группировка.Очистить();
			
			НоваяСтрока = Отчет.Группировка.Добавить();
			Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Организация"));
			НоваяСтрока.Поле           = Поле.Поле;
			НоваяСтрока.Использование  = Истина;
			НоваяСтрока.Представление  = Поле.Заголовок;
			НоваяСтрока.ТипГруппировки = 0;
			
			// По умолчанию включаем только 1 субконто
			КоличествоВключенныхСубконто = 1;
			Использование = Истина;
			
			Если Отчет.РежимРасшифровки Тогда
				Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
					Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
						ЛевоеЗначениеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
						
						Если ЛевоеЗначениеОтбора = "Субконто2" Тогда
							КоличествоВключенныхСубконто = 2;	
						ИначеЕсли ЛевоеЗначениеОтбора = "Субконто3" Тогда
							КоличествоВключенныхСубконто = 3;	
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Индекс = 1 По КоличествоСубконто Цикл
				Если ИспользоватьОднуНоменклатурнуюГруппу 
					И ДанныеСчета["ВидСубконто" + Индекс] = ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.НоменклатурныеГруппы Тогда
					Продолжить;
				КонецЕсли;
				// По умолчанию включаем только 1 субконто
				Использование = Индекс <= КоличествоВключенныхСубконто;
				
				НоваяСтрока = Отчет.Группировка.Добавить();
				Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПрефикс + Индекс));
				НоваяСтрока.Поле           = Поле.Поле;
				НоваяСтрока.Использование  = Использование;
				НоваяСтрока.Представление  = Поле.Заголовок;
				НоваяСтрока.ТипГруппировки = 0;	
				
				Если Отчет.Счет.Валютный Тогда
					НоваяСтрока = Отчет.Группировка.Добавить();
					НоваяСтрока.Поле = "Валюта";
					НоваяСтрока.Использование = Использование;
					НоваяСтрока.Представление = "Валюта";
					НоваяСтрока.ТипГруппировки = 0;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("Отбор") Тогда
		Если ЗаполняемыеНастройки.Отбор Тогда
			// Добавление неактивных отборов по субконто в соответствии с выбранным счетом
			ОтборыДляУдаления = Новый Массив;
			ПодразделениеЗаполнено = Ложь;
			Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					Если Найти(ЭлементОтбора.ЛевоеЗначение, "Субконто") > 0 ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = "Валюта" Тогда
						ОтборыДляУдаления.Добавить(ЭлементОтбора);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ЭлементОтбора Из ОтборыДляУдаления Цикл
				Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			КонецЦикла;
			
			Для Индекс = 1 По КоличествоСубконто Цикл
				ТипЗначенияСубконто = ДанныеСчета["ВидСубконто"+Индекс+"ТипЗначения"];
				Если ИспользоватьОднуНоменклатурнуюГруппу И ТипЗначенияСубконто = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы") Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлементОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, ИмяПоляПрефикс + Индекс, ТипЗначенияСубконто.ПривестиЗначение(Неопределено), , Ложь);
				Для Каждого Отбор из ОтборыДляУдаления Цикл
					Если ТипЗначенияСубконто.СодержитТип(ТипЗнч(Отбор.ПравоеЗначение)) Тогда
						ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,Отбор,"ПравоеЗначение, ВидСравнения, Использование");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если Отчет.Счет.Валютный Тогда
				Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Валюта"));
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Валюта", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь); 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеНастройки.Свойство("ДополнительныеПоля") И ЗаполняемыеНастройки.ДополнительныеПоля Тогда
		Отчет.ДополнительныеПоля.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИсходныеЗначения(Форма)
	
	Отчет    = Форма.Отчет;
	
	Форма.СчетИсходноеЗначение        = Отчет.Счет;
	Форма.ОрганизацияИсходноеЗначение = Форма.ПолеОрганизация;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчетаМУ(Отчет.Счет);
	
	Элементы.ПоказательВалютнаяСумма.Доступность = ДанныеСчета.Валютный ИЛИ ДанныеСчета.ЗапретитьИспользоватьВПроводках;
	Элементы.ПоказательКоличество.Доступность    = ДанныеСчета.Количественный;
	
	Элементы.РазвернутоеСальдо.Доступность = ДанныеСчета.Вид = ВидСчета.АктивноПассивный;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Результат = РезультатВыполнения.Результат;	
	
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			ЗафиксироватьДлительностьКлючевойОперации();
			
			БухгалтерскийУчетКлиентПереопределяемый.ПодключитьПроверкуАктуальности(ЭтотОбъект);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"              , Отчет.КонецПериода);
	СписокПараметров.Вставить("СчетУчета"         , Отчет.Счет);
	СписокПараметров.Вставить("Номенклатура"      , Неопределено);
	СписокПараметров.Вставить("Склад"             , Неопределено);
	СписокПараметров.Вставить("Организация"       , Отчет.Организация);
	СписокПараметров.Вставить("Контрагент"        , Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	ПолеСумма, Результат,Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	Если ВремяНачалаОперации <> Неопределено Тогда
		//ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
		//	КлючеваяОперация, 
		//	ВремяНачалаОперации
		//);
		ЗакончитьЗамерВремениНаСервере(КлючеваяОперация, ВремяНачалаОперации);
		ВремяНачалаОперации = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьЗамерВремениНаСервере(КлючеваяОперация, ВремяНачалаОперации)
	ОценкаПроизводительности.ЗакончитьЗамерВремени(
	КлючеваяОперация, 
	ВремяНачалаОперации);
	
КОнецПроцедуры

&НаКлиенте
Функция ЗначениеТаймера()
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		// +СБ Кузнецова С. 2017-05-23 
		//Возврат РегламентированнаяОтчетностьКлиентСервер.ЗначениеТаймера();
		Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
		// -СБ Кузнецова С.
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаСервере
//ОКЕЙ Поздняков А.С. (СофтЛаб) Начало 2020-08-03 (#3816)
//Процедура ИнициализацияКомпоновщикаНастроек()
Процедура ИнициализацияКомпоновщикаНастроек() Экспорт
//ОКЕЙ Поздняков А.С. (СофтЛаб) Конец 2020-08-03 (#3816)
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтаФорма, ОрганизацияИзменилась);
	
	ИзменениеСхемыКомпоновкиДанныхНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛЕЗНАЯ ИНФОРМАЦИЯ

&НаКлиенте
Процедура ПоказатьБыстроеОсвоение()
	
	//ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("СохранениеРегистровБУСЭЦПСтандартныеОтчеты", , НастройкиПредупреждений);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ПЕРИОД

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИсходныеЗначения(ЭтаФорма);
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	// Уведомим о появлении нового функционала
	КлючиНастроек = "ОтправкаПоЭлектроннойПочте";
	НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях(КлючиНастроек);
	
	//Если Параметры.СБ_УсловияПогашенияДолгаИГрафикПлатежей = Истина Тогда
	//	СБ_УсловияПогашенияДолгаИГрафикПлатежейРасшифровкаЗаполнить(Параметры.ПараметрыРасшифровки, Параметры.Организация);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.СБ_УсловияПогашенияДолгаИГрафикПлатежей = Истина Тогда
		СБ_УсловияПогашенияДолгаИГрафикПлатежейРасшифровкаЗаполнить(Параметры.ПараметрыРасшифровки, Параметры.Организация);
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
	ИначеЕсли Отчет.РежимРасшифровки Тогда
		БухгалтерскийУчетКлиентПереопределяемый.ПодключитьПроверкуАктуальности(ЭтотОбъект);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);
	
	ПодключитьОбработчикОжидания("ПоказатьБыстроеОсвоение", 0.5, Истина);
	
	КлючеваяОперация = "ФормированиеОтчетаОборотыСчета";
	ВремяНачалаОперации = Неопределено;
	
	Если НастройкиПредупреждений.ОтправкаПоЭлектроннойПочте Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьИнформациюОтправкаПоЭлектроннойПочте", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьЗаданияАктуализации(ЭтотОбъект, Отчет.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Параметры.СБ_УсловияПогашенияДолгаИГрафикПлатежей = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КомпоновщикИнициализирован Тогда
		ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	Если Не КомпоновщикИнициализирован И ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ИнициализацияКомпоновщикаНастроек();
		РазделыНастроек = Элементы.РазделыНастроек.ПодчиненныеЭлементы;
		Элементы.РазделыНастроек.ТекущаяСтраница = РазделыНастроек.ГруппаГруппировка;
	ИначеЕсли КомпоновщикИнициализирован Тогда
		ИзменениеСхемыКомпоновкиДанныхНаСервере();
	КонецЕсли;
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИсходныеЗначения(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ЗначениеТаймера();
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		
		ЗафиксироватьДлительностьКлючевойОперации();
		
		Если НЕ РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
			БухгалтерскийУчетКлиентПереопределяемый.ПодключитьПроверкуАктуальности(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе	
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОткрытьНастройки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ ГРУППЫ РЕГИСТРЫ УЧЕТА

&НаКлиенте
Процедура СохранитьРегистрУчета(Команда)
	
	РегистрыУчетаКлиент.СохранитьРегистрУчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРегистрУчетаИПодписатьЭП(Команда)
	
	РегистрыУчетаКлиент.СохранитьРегистрУчета(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивРегистровУчета(Команда)
	
	РегистрыУчетаКлиент.ОткрытьАрхивРегистровУчета(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	
	
	Если СчетИсходноеЗначение = Отчет.Счет Тогда
		Возврат;
	КонецЕсли;
	
	// 1С-ИжТиСи Полина 04.09.2015 (
	ОтборУказан = Ложь;
	
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		// СофтБаланс Начало Кузнецова С. [22.01.2014] 
		//Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет") Тогда
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет") Тогда
			// СофтБаланс Окончание Кузнецова С. [22.01.2014]
			Если Не ОтборУказан Тогда
				ЭлементОтбора.Использование = Истина;
				СписокСчетов = Новый СписокЗначений;
				СписокСчетов.Добавить(Отчет.Счет);
				ЭлементОтбора.ПравоеЗначение = СписокСчетов;
				ОтборУказан = Истина;
			Иначе
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// 1С-ИжТиСи Полина 04.09.2015 )
	
	СчетПриИзмененииСервер();
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	Если ОрганизацияИсходноеЗначение = ПолеОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияИзменилась = Истина;
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(Элемент, ПолеОрганизация,
	Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	Если КомпоновщикИнициализирован Тогда
		БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтаФорма, Элемент);
	КонецЕсли;
	
	ОбновитьИсходныеЗначения(ЭтаФорма);
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
	ПолеОрганизация, СоответствиеОрганизаций);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, 
	СоответствиеОрганизаций, Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ПОКАЗАТЕЛИ

&НаКлиенте
Процедура ПоказательБУПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательСуммаУпрПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательСуммаМУПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательСуммаРеглПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательВалютнаяСуммаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательКоличествоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутоеСальдоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ВЫВОДИМЫЕ ДАННЫЕ

&НаКлиенте
Процедура СальдоНаНачалоДтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СальдоНаНачалоКтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СальдоНаКонецДтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СальдоНаКонецКтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыЗаПериодДтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыЗаПериодКтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыСоСчетамиДтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыСоСчетамиКтПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ГРУППИРОВКА

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоСубсчетамПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоСубсчетамКорСчетовПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

// 1С-ИжТиСи Полина 04.09.2015 (
&НаКлиенте
Процедура ГруппировкаПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Представление = "Счет" Или Элемент.ТекущиеДанные.Представление = "Организация" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
// 1С-ИжТиСи Полина 04.09.2015 )

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ОТБОРЫ

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтаФорма, Элемент, Ложь);
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = ПолучитьПараметрыВыбораЗначенияОтбора();
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.ДополнительныеПоля Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ СОРТИРОВКА

&НаКлиенте
Процедура СортировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ОФОРМЛЕНИЕ

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЕдиницуИзмеренияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры


&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры


&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтправки()
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьИнформациюОтправкаПоЭлектроннойПочте()
	
	//ОбщегоНазначенияБПКлиент.ПоказатьПредупреждениеОбИзменениях("ОтправкаПоЭлектроннойПочте", , НастройкиПредупреждений);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СБ_УсловияПогашенияДолгаИГрафикПлатежейРасшифровкаЗаполнить(ПараметрыРасшифровки, ОрганизацияОтчета)
	
	//Взведем флаг расшифровки
	Отчет.РежимРасшифровки = Истина;
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	// Установка пользовательских настроек
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	
	// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	// Загрузка основных настроек
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Очистка пользовательских настроек
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	ИзменениеСхемыКомпоновкиДанныхНаСервере();
	
	Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	Отчет.НачалоПериода = ПараметрыРасшифровки.Дата;
	Отчет.КонецПериода = ПараметрыРасшифровки.Дата;
	
	// организация/периметр
	Если ТипЗнч(ОрганизацияОтчета) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
		НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокОрганизаций = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Дата, ПериметрКонсолидации = &Периметр) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
		|ГДЕ
		|	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Дата
		|			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация";
		Запрос.УстановитьПараметр("Дата", КонецДня(ПараметрыРасшифровки.Дата));
		Запрос.УстановитьПараметр("Периметр", ОрганизацияОтчета);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Организация);
		КонецЦикла; 
		НовыйОтбор.ПравоеЗначение = СписокОрганизаций;
		НовыйОтбор.Использование = Истина;
	Иначе
		Отчет.Организация = ОрганизацияОтчета;
	КонецЕсли;
	
	// показатели
	Отчет.СальдоНаКонецДт = Истина;
	Отчет.СальдоНаКонецКт = Истина;
	Отчет.ОборотыЗаПериодДт = Ложь;
	Отчет.ОборотыЗаПериодКт = Ложь;
	Отчет.СальдоНаНачалоДт = Ложь;
	Отчет.СальдоНаНачалоКт = Ложь;
	Отчет.ОборотыСоСчетамиДт = Ложь;
	Отчет.ОборотыСоСчетамиКт = Ложь;
	Отчет.РежимРасшифровки = Истина;
	Отчет.ПоСубсчетам = Истина;
	//ОтчетРасшифровка.ПоСубсчетамКорСчетов = Истина;
	
	// счета
	НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.Счета;
	НовыйОтбор.Использование = Истина;
	
	СчетПриИзмененииСервер();
	
	// тип договора
	НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.бит_му_ТипКредитногоДоговора");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.ТипДоговора;
	НовыйОтбор.Использование = Истина;
	
	// валюта
	НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.ВалютаВзаиморасчетов");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.Валюта;
	НовыйОтбор.Использование = Истина;
	
	// тип процентной ставки
	Если ЗначениеЗаполнено(ПараметрыРасшифровки.ТипПроцентнойСтавки) Тогда
		НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Тип процентной ставки (параметр фин.договора)]");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.ТипПроцентнойСтавки;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	
	// вид плавающей ставки
	Если ПараметрыРасшифровки.ТипПроцентнойСтавки = ПредопределенноеЗначение("Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Плавающая") Тогда
		НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Вид плавающей ставки (параметр фин.договора)]");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.ВидПлавающейСтавки;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	
	// ставка
	Если ПараметрыРасшифровки.ТипПроцентнойСтавки = ПредопределенноеЗначение("Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная") Тогда
		Если ПараметрыРасшифровки.МинСтавка = 0 И ПараметрыРасшифровки.МаксСтавка = 0 Тогда
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Процентная ставка (параметр фин.договора)]");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.ПроцентнаяСтавка;
			НовыйОтбор.Использование = Истина;
			ТекстСтавки = Строка(ПараметрыРасшифровки.ПроцентнаяСтавка) + "%";
		ИначеЕсли ПараметрыРасшифровки.МинСтавка = 0 Тогда
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Процентная ставка (параметр фин.договора)]");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.ПроцентнаяСтавка;
			НовыйОтбор.Использование = Истина;
			
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Макс.ставка (только для отчетности) (параметр фин.договора)]");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.МаксСтавка;
			НовыйОтбор.Использование = Истина;
			ТекстСтавки = Строка(Мин(ПараметрыРасшифровки.ПроцентнаяСтавка, ПараметрыРасшифровки.МаксСтавка)) + "-" + Строка(Макс(ПараметрыРасшифровки.ПроцентнаяСтавка, ПараметрыРасшифровки.МаксСтавка)) + "%"
		ИначеЕсли ПараметрыРасшифровки.МаксСтавка = 0 Тогда
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Процентная ставка (параметр фин.договора)]");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.ПроцентнаяСтавка;
			НовыйОтбор.Использование = Истина;
			
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Мин.ставка (только для отчетности) (параметр фин.договора)]");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.МинСтавка;
			НовыйОтбор.Использование = Истина;
			ТекстСтавки = Строка(Мин(ПараметрыРасшифровки.ПроцентнаяСтавка, ПараметрыРасшифровки.МинСтавка)) + "-" + Строка(Макс(ПараметрыРасшифровки.ПроцентнаяСтавка, ПараметрыРасшифровки.МинСтавка)) + "%"
		ИначеЕсли ПараметрыРасшифровки.МинСтавка = ПараметрыРасшифровки.МаксСтавка Тогда
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Мин.ставка (только для отчетности) (параметр фин.договора)]");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.МинСтавка;
			НовыйОтбор.Использование = Истина;
			ТекстСтавки = Строка(ПараметрыРасшифровки.МинСтавка) + "%"
		Иначе
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Мин.ставка (только для отчетности) (параметр фин.договора)]");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.МинСтавка;
			НовыйОтбор.Использование = Истина;
			
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.[Макс.ставка (только для отчетности) (параметр фин.договора)]");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.МаксСтавка;
			НовыйОтбор.Использование = Истина;
			ТекстСтавки = Строка(ПараметрыРасшифровки.МинСтавка) + "-" + Строка(ПараметрыРасшифровки.МаксСтавка) + "%"
		КонецЕсли;	
	Иначе // плавающая
		Если ЗначениеЗаполнено(ПараметрыРасшифровки.МинСтавка) Тогда
			НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НоминальнаяСтавка");
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.МинСтавка;
			НовыйОтбор.Использование = Истина;
		КонецЕсли;
		Если ПараметрыРасшифровки.ВидПлавающейСтавки = ПредопределенноеЗначение("Справочник.бит_му_ВидыДополнительныхСтавок.СБ_MosPrimeRateOneMonth") Тогда
			ТекстСтавки = Строка(ПараметрыРасшифровки.МинСтавка) + "%+1mnt Mosprime";
		ИначеЕсли ПараметрыРасшифровки.ВидПлавающейСтавки = ПредопределенноеЗначение("Справочник.бит_му_ВидыДополнительныхСтавок.СБ_MosPrimeRateThreeMonths") Тогда
			ТекстСтавки = Строка(ПараметрыРасшифровки.МинСтавка) + "%+3mnt Mosprime";
		Иначе
			ТекстСтавки = Строка(ПараметрыРасшифровки.МинСтавка) + "%+" + ПараметрыРасшифровки.ВидПлавающейСтавки;
		КонецЕсли;
	КонецЕсли;
	
	// год погашения
	Если Не ЗначениеЗаполнено(ПараметрыРасшифровки.ГодПогашения) Тогда
		НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.СрокДействия");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.ГодПогашения;
		НовыйОтбор.Использование = Истина;
	Иначе
		НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.СрокДействия");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.ГодПогашения;
		НовыйОтбор.Использование = Истина;
		
		НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2.СрокДействия");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		НовыйОтбор.ПравоеЗначение = КонецГода(ПараметрыРасшифровки.ГодПогашения);
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	
	ТекстВалюты = ?(ПараметрыРасшифровки.Валюта.Код = "643", "RUB", Строка(ПараметрыРасшифровки.Валюта));
	ТекстГодаПогашения = Формат(ПараметрыРасшифровки.ГодПогашения, "ДФ=гггг");
	ЭлементРасшифровки = Строка(ПараметрыРасшифровки.ТипДоговора) + " кредиты (" + ТекстВалюты + ", " + ТекстСтавки + ", " + ТекстГодаПогашения +
	"): " + ПараметрыРасшифровки.ТипСтоимости + " стоимость";
	
	// отбор по ненулевым значениям показателей
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокДт");
	МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокКт");
	Отчет.ПоказательСуммаУпр = Истина;
	Отчет.ПоказательСуммаМУ = Ложь;
	Отчет.ПоказательСуммаРегл = Ложь;
	//ОтчетРасшифровка.МассивПоказателейДляОтбора = МассивПоказателей;
	
	// дополнительный отбор по заполненным показателям на верхнем уровне структуры
	ГруппаОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.Использование = Истина;
	
	Для Каждого Элемент Из МассивПоказателей Цикл
		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Отбор.Использование = Истина;
	КонецЦикла;
	
	СформироватьОтчетНаСервере();
	
КонецФункции

&НаСервере
Функция СБ_ОтчетПоГруппеКомпанийРасшифровкаЗаполнить(ПараметрыОтчета) Экспорт
	
	ПараметрыРасшифровки = ПараметрыОтчета.ПараметрыРасшифровки;
	
	//Взведем флаг расшифровки
	Отчет.РежимРасшифровки = Истина;
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	// Установка пользовательских настроек
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
	
	// Получение основных настроек компоновщика настроек, с учетом пользовательских настроек
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	// Загрузка основных настроек
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	// Очистка пользовательских настроек
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	ИзменениеСхемыКомпоновкиДанныхНаСервере();
	
	Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	Отчет.НачалоПериода = ПараметрыОтчета.НачалоПериода;
	Отчет.КонецПериода = ПараметрыОтчета.КонецПериода;
	
	Если ПараметрыРасшифровки.ЯчейкаСОрганизацией = "Итого" Или ПараметрыРасшифровки.ЯчейкаСОрганизацией = "Total" Тогда
		НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокОрганизаций = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Дата, ПериметрКонсолидации = &Периметр) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
		|ГДЕ
		|	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Дата
		|	ИЛИ (КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) < &Дата И КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &ДатаНач)
		|	ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация";
		Запрос.УстановитьПараметр("Дата", КонецДня(ПараметрыОтчета.КонецПериода));
		Запрос.УстановитьПараметр("ДатаНач", ПараметрыОтчета.НачалоПериода);
		Запрос.УстановитьПараметр("Периметр", ПараметрыОтчета.ПериметрКонсолидации);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокОрганизаций.Добавить(Выборка.Организация);
		КонецЦикла; 
		НовыйОтбор.ПравоеЗначение = СписокОрганизаций;
		НовыйОтбор.Использование = Истина;
	Иначе
		Отчет.Организация = Справочники.Организации.НайтиПоНаименованию(ПараметрыРасшифровки.ЯчейкаСОрганизацией);
	КонецЕсли;
	
	Если ПараметрыРасшифровки.Показатель = "_Оборот" Тогда
		Отчет.СальдоНаКонецДт = Ложь;
		Отчет.СальдоНаКонецКт = Ложь;
		Отчет.ОборотыЗаПериодДт = Истина;
		Отчет.ОборотыЗаПериодКт = Истина;
		Отчет.СальдоНаНачалоДт = Ложь;
		Отчет.СальдоНаНачалоКт = Ложь;
		Отчет.ОборотыСоСчетамиДт = Ложь;
		Отчет.ОборотыСоСчетамиКт = Ложь;
	ИначеЕсли ПараметрыРасшифровки.Показатель = "_КонОст" Тогда
		Отчет.СальдоНаКонецДт = Истина;
		Отчет.СальдоНаКонецКт = Истина;
		Отчет.ОборотыЗаПериодДт = Ложь;
		Отчет.ОборотыЗаПериодКт = Ложь;
		Отчет.СальдоНаНачалоДт = Ложь;
		Отчет.СальдоНаНачалоКт = Ложь;
		Отчет.ОборотыСоСчетамиДт = Ложь;
		Отчет.ОборотыСоСчетамиКт = Ложь;
	ИначеЕсли ПараметрыРасшифровки.Показатель = "_НачОст" Тогда
		Отчет.СальдоНаКонецДт = Ложь;
		Отчет.СальдоНаКонецКт = Ложь;
		Отчет.ОборотыЗаПериодДт = Ложь;
		Отчет.ОборотыЗаПериодКт = Ложь;
		Отчет.СальдоНаНачалоДт = Истина;
		Отчет.СальдоНаНачалоКт = Истина;
		Отчет.ОборотыСоСчетамиДт = Ложь;
		Отчет.ОборотыСоСчетамиКт = Ложь;
	ИначеЕсли ПараметрыРасшифровки.Показатель = "_СпецКонОст" Тогда
		Отчет.СальдоНаКонецДт = Истина;
		Отчет.СальдоНаКонецКт = Истина;
		Отчет.ОборотыЗаПериодДт = Истина;
		Отчет.ОборотыЗаПериодКт = Истина;
		Отчет.СальдоНаНачалоДт = Ложь;
		Отчет.СальдоНаНачалоКт = Ложь;
		Отчет.ОборотыСоСчетамиДт = Истина;
		Отчет.ОборотыСоСчетамиКт = Истина;
	КонецЕсли;
	Отчет.ПоказательСуммаРегл = Ложь;
	Отчет.ПоказательСуммаУпр = Истина;
	Отчет.ПоказательСуммаМУ = Ложь;
	Отчет.РежимРасшифровки = Истина;
	ЭлементРасшифровки = ПараметрыРасшифровки.ЯчейкаСНазванием;
	Отчет.ПоСубсчетам = Истина;
	Отчет.ПоСубсчетамКорСчетов = Истина;
	
	НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.Счета_ИмяПараметра;
	НовыйОтбор.Использование = Истина;
	
	Если ПараметрыРасшифровки.Свойство("КорСчета_ИмяПараметра") И ПараметрыРасшифровки.Показатель <> "_СпецКонОст" Тогда
		НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорСчет");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		НовыйОтбор.ПравоеЗначение = ПараметрыРасшифровки.КорСчета_ИмяПараметра;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;
	
	// отбор по ненулевым значениям показателей
	МассивПоказателей = Новый Массив;
	Если ПараметрыРасшифровки.Показатель = "_КонОст" Тогда
		МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокДт");
		МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокКт");
	ИначеЕсли ПараметрыРасшифровки.Показатель = "_НачОст" Тогда 
		МассивПоказателей.Добавить("СальдоНаНачалоПериода.СуммаУпрНачальныйОстатокДт");
		МассивПоказателей.Добавить("СальдоНаНачалоПериода.СуммаУпрНачальныйОстатокКт");
	ИначеЕсли ПараметрыРасшифровки.Показатель = "_СпецКонОст" Тогда 
		МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокДт");
		МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокКт");
		МассивПоказателей.Добавить("ОборотыЗаПериод.СуммаУпрОборотДт");
		МассивПоказателей.Добавить("ОборотыЗаПериод.СуммаУпрОборотКт");
	Иначе
		МассивПоказателей.Добавить("ОборотыЗаПериод.СуммаУпрОборотДт");
		МассивПоказателей.Добавить("ОборотыЗаПериод.СуммаУпрОборотКт");
	КонецЕсли;
	МассивПоказателейДляОтбора.ЗагрузитьЗначения(МассивПоказателей);
	
	// дополнительный отбор по заполненным показателям на верхнем уровне структуры
	ГруппаОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.Использование = Истина;
	
	Для Каждого Элемент Из МассивПоказателей Цикл
		Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Отбор.Использование = Истина;
	КонецЦикла;
	//
	
	// Добавление группировок с соответствии с выбранным счетом	
	Отчет.Группировка.Очистить();
	
	НоваяСтрока = Отчет.Группировка.Добавить();
	Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Организация"));
	НоваяСтрока.Поле           = Поле.Поле;
	НоваяСтрока.Использование  = Истина;
	НоваяСтрока.Представление  = Поле.Заголовок;
	НоваяСтрока.ТипГруппировки = 0;
	
	ИзменениеСхемыКомпоновкиДанныхНаСервере();
	
	// 1С-ИжТиСи Полина 04.09.2015 (
	ЗначениеСчета = Неопределено;
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл 
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И 
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет") И 
			(ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			// СофтБаланс Начало Кузнецова С. [16.01.2014] 
			Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Или
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
			// СофтБаланс Окончание Кузнецова С. [16.01.2014]
			)
			И ЭлементОтбора.Использование = Истина Тогда
			ЗначениеСчета = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ЗначениеСчета) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
		Отчет.Счет = ЗначениеСчета;
	ИначеЕсли ТипЗнч(ЗначениеСчета) = Тип("СписокЗначений") И ЗначениеСчета.Количество() > 0 Тогда
		Отчет.Счет = ЗначениеСчета[0].Значение;
	КонецЕсли;
	// 1С-ИжТиСи Полина 04.09.2015 )
	ИзменениеСхемыКомпоновкиДанныхНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	ОбновитьИсходныеЗначения(ЭтаФорма);
	
	СформироватьОтчетНаСервере();
	
КонецФункции


&НаСервере
Функция бит_ПроизвольныйОтчетРасшифровкаЗаполнить(СтруктураПараметров) Экспорт
	
	Отчет.РежимРасшифровки = Истина;
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализацияКомпоновщикаНастроек();
	КонецЕсли;
	
	Отчет.СальдоНаКонецДт = Ложь;
	Отчет.СальдоНаКонецКт = Ложь;
	Отчет.ОборотыЗаПериодДт = Ложь;
	Отчет.ОборотыЗаПериодКт = Ложь;
	Отчет.СальдоНаНачалоДт = Ложь;
	Отчет.СальдоНаНачалоКт = Ложь;
	Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	флЕстьРасшифровка = Ложь;
	
	СтрокаТаблицы = Справочники.бит_ПоказателиПроизвольныхОтчетов.НайтиПоКоду(СтруктураПараметров.ИмяОбласти,,,СтруктураПараметров.НастройкаОтчета);
	
	Если НЕ СтрокаТаблицы = Неопределено Тогда
		Если СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
			ЗаполнитьСчет(СтрокаТаблицы.ЭлементДанных, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
		ИначеЕсли СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула Тогда
			Для Каждого СтрокаФормулы Из СтрокаТаблицы.ЭлементДанных.СтрокиРасчетаДляФормулы Цикл
				ЗаполнитьСчет(СтрокаФормулы.СтрокаРасчета, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
			КонецЦикла;
		КонецЕсли;
		//СчетПриИзмененииСервер();
		//ИзменениеСхемыКомпоновкиДанныхНаСервере();
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлементДанных) И СтрокаТаблицы.ЭлементДанных.ВидГруппы <> Перечисления.бит_ВидыГруппДанных.Формула Тогда
			
			// создадим отчет-расшифровку
			Если СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущий" Или СтрокаТаблицы.ИмяРесурса = "КонОстатокПредыдущий" 
				// +СБ Кузнецова С. 2017-05-31 Redmine 2537
				Или СтрокаТаблицы.ИмяРесурса = "ПредыдущиеДанные"
				// -СБ Кузнецова С.
				Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийБезНДС"  Или СтрокаТаблицы.ИмяРесурса = "НачОстатокПредыдущий" Тогда
				Отчет.НачалоПериода = СтруктураПараметров.ДатаНачалаПред;
				Отчет.КонецПериода = КонецДня(СтруктураПараметров.ДатаОкончанияПред);
			Иначе
				Отчет.НачалоПериода      = СтруктураПараметров.ДатаНачала;
				Отчет.КонецПериода       = СтруктураПараметров.ДатаОкончания;
			КонецЕсли;
			Если ТипЗнч(СтруктураПараметров.Организация) = Тип("СправочникСсылка.Организации") Тогда
				Отчет.Организация        = СтруктураПараметров.Организация;
			ИначеЕсли ТипЗнч(СтруктураПараметров.Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") И ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
				НовыйОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				
				СписокОрганизаций = Новый СписокЗначений;
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
				|ИЗ
				|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Дата, ПериметрКонсолидации = &Периметр) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
				|ГДЕ
				|	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Дата
				|	ИЛИ (КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) < &Дата И КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &ДатаНач)
				|	ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
				|
				|СГРУППИРОВАТЬ ПО
				|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация";
				Если СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущий" Или СтрокаТаблицы.ИмяРесурса = "КонОстатокПредыдущий" Тогда
					Запрос.УстановитьПараметр("Дата", КонецДня(СтруктураПараметров.ДатаОкончанияПред));
					Запрос.УстановитьПараметр("ДатаНач", СтруктураПараметров.ДатаНачалаПред);
				Иначе
					// БИТ_YK_н Доработка #2084 01/16
					//Запрос.УстановитьПараметр("Дата", КонецДня(Отчет.ДатаОкончания));
					//Запрос.УстановитьПараметр("ДатаНач", Отчет.ДатаНачала);
					Запрос.УстановитьПараметр("Дата", КонецДня(Отчет.КонецПериода));
					Запрос.УстановитьПараметр("ДатаНач", Отчет.НачалоПериода);
					// БИТ_YK_к 
				КонецЕсли;
				
				// БИТ_YK_н Доработка #2084 12/15 (Перенос старых доработок)
				Если СтрокаТаблицы.ЭлементДанных.ИсточникДанных.Наименование = "НачальныеОстаткиДляДвухПериодов" Тогда
					Если СтрокаТаблицы.ИмяРесурса = "ПредыдущиеДанные" Тогда
						Запрос.УстановитьПараметр("Дата",    СтруктураПараметров.НачалоПредПериода);
						Запрос.УстановитьПараметр("ДатаНач", СтруктураПараметров.НачалоПредПериода);
					Иначе
						Запрос.УстановитьПараметр("Дата",    Отчет.НачалоПериода);
						Запрос.УстановитьПараметр("ДатаНач", Отчет.НачалоПериода);
					КонецЕсли;
				ИначеЕсли СтрокаТаблицы.ЭлементДанных.ИсточникДанных.Наименование = "КонечныеОстаткиДляДвухПериодов" Тогда
					Если СтрокаТаблицы.ИмяРесурса = "ПредыдущиеДанные" Тогда
						Запрос.УстановитьПараметр("Дата",    КонецДня(СтруктураПараметров.КонецПредПериода));
						Запрос.УстановитьПараметр("ДатаНач", КонецДня(СтруктураПараметров.КонецПредПериода));
					Иначе
						Запрос.УстановитьПараметр("Дата",    КонецДня(Отчет.КонецПериода));
						Запрос.УстановитьПараметр("ДатаНач", КонецДня(Отчет.КонецПериода));
					КонецЕсли;
				ИначеЕсли СтрокаТаблицы.ИмяРесурса = "ПредыдущиеДанные" Тогда
					Запрос.УстановитьПараметр("Дата", КонецДня(СтруктураПараметров.КонецПредПериода));
					Запрос.УстановитьПараметр("ДатаНач",       СтруктураПараметров.НачалоПредПериода);
				КонецЕсли;
				
				Отчет.Группировка.Очистить();
				
				НоваяСтрока = Отчет.Группировка.Добавить();
				Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Организация"));
				НоваяСтрока.Поле           = Поле.Поле;
				НоваяСтрока.Использование  = Истина;
				НоваяСтрока.Представление  = Поле.Заголовок;
				НоваяСтрока.ТипГруппировки = 0;	
				// БИТ_YK_к
				
				Запрос.УстановитьПараметр("Периметр", СтруктураПараметров.Организация);
				
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СписокОрганизаций.Добавить(Выборка.Организация);
				КонецЦикла;
				
				НовыйОтбор.ПравоеЗначение = СписокОрганизаций;
				НовыйОтбор.Использование = Истина;
			КонецЕсли;
			Если СтрокаТаблицы.ИмяРесурса = "ОборотОсновной" Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущий" 
				Или СтрокаТаблицы.ИмяРесурса = "ОборотОсновнойБезНДС"  Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийБезНДС"
				Или СтрокаТаблицы.ИмяРесурса = "ОборотОсновнойСНДС"  Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийСНДС"
				Или СтрокаТаблицы.ИмяРесурса = "НДСОсновной"  Или СтрокаТаблицы.ИмяРесурса = "НДСПредыдущий"
				Тогда
				Отчет.СальдоНаКонецДт = Ложь;
				Отчет.СальдоНаКонецКт = Ложь;
				Отчет.ОборотыЗаПериодДт = Истина;
				Отчет.ОборотыЗаПериодКт = Истина;
				Отчет.СальдоНаНачалоДт = Ложь;
				Отчет.СальдоНаНачалоКт = Ложь;
			ИначеЕсли СтрокаТаблицы.ИмяРесурса = "КонОстатокОсновной" Или СтрокаТаблицы.ИмяРесурса = "КонОстатокПредыдущий" или СтрокаТаблицы.ЭлементДанных.ИсточникДанных.Наименование = "КонечныеОстаткиДляДвухПериодов" Тогда // БИТ_YK Доработка #2084 12/15 (Перенос старых доработок)
				Отчет.СальдоНаКонецДт = Истина;
				Отчет.СальдоНаКонецКт = Истина;
				Отчет.ОборотыЗаПериодДт = Ложь;
				Отчет.ОборотыЗаПериодКт = Ложь;
				Отчет.СальдоНаНачалоДт = Ложь;
				Отчет.СальдоНаНачалоКт = Ложь;
			ИначеЕсли СтрокаТаблицы.ИмяРесурса = "НачОстатокОсновной" или СтрокаТаблицы.ЭлементДанных.ИсточникДанных.Наименование = "НачальныеОстаткиДляДвухПериодов" Тогда // БИТ_YK Доработка #2084 12/15 (Перенос старых доработок)
				Отчет.СальдоНаКонецДт = Ложь;
				Отчет.СальдоНаКонецКт = Ложь;
				Отчет.ОборотыЗаПериодДт = Ложь;
				Отчет.ОборотыЗаПериодКт = Ложь;
				Отчет.СальдоНаНачалоДт = Истина;
				Отчет.СальдоНаНачалоКт = Истина;
			КонецЕсли;
			Отчет.ОборотыСоСчетамиДт = Ложь;
			Отчет.ОборотыСоСчетамиКт = Ложь;
			
			// БИТ_YK_н Доработка #2084 12/15 (Перенос старых доработок)
			// +СБ Кузнецова С. 2017-05-24 Redmine 2537
			//Если  Отчет.СальдоНаКонецДт = Отчет.СальдоНаКонецКт = Отчет.ОборотыЗаПериодДт = Отчет.ОборотыЗаПериодКт = Отчет.СальдоНаНачалоДт = Отчет.СальдоНаНачалоКт и Отчет.СальдоНаНачалоКт = Ложь Тогда
			Если  (Отчет.СальдоНаКонецДт Или Отчет.СальдоНаКонецКт Или Отчет.ОборотыЗаПериодДт Или Отчет.ОборотыЗаПериодКт Или Отчет.СальдоНаНачалоДт Или Отчет.СальдоНаНачалоКт) = Ложь Тогда
			// -СБ Кузнецова С.
				Отчет.ОборотыЗаПериодДт = Истина;
				Отчет.ОборотыЗаПериодКт = Истина;
			КонецЕсли;
			Отчет.ПоказательСуммаУпр = Истина;
			// БИТ_YK_к
			
			Отчет.РежимРасшифровки = Истина;
			Если СтрокаТаблицы.ИмяРесурса = "НДСОсновной"  Или СтрокаТаблицы.ИмяРесурса = "НДСПредыдущий" Тогда
				ЭлементРасшифровки = "Прочие связанные стороны – Сумма сделки (НДС)";
			Иначе
				ЭлементРасшифровки = СтрокаТаблицы.ЭлементДанных.Наименование;
			КонецЕсли;
			Отчет.ПоСубсчетам = Истина;
			Отчет.ПоСубсчетамКорСчетов = Истина;
			
			Если СтрокаТаблицы.ИмяРесурса = "НДСОсновной"  Или СтрокаТаблицы.ИмяРесурса = "НДСПредыдущий" Тогда
				
				Запрос = Новый Запрос;
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	бит_му_Настройки.Значение
				|ИЗ
				|	РегистрСведений.бит_му_Настройки КАК бит_му_Настройки
				|ГДЕ
				|	бит_му_Настройки.Группа = ""Консолидированные отчеты МСФО""
				|	И бит_му_Настройки.ИмяНастройки = ""Счет учета НДС""";
				Запрос.Текст = ТекстЗапроса; 
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					СчетНДС = Выборка.Значение;
				Иначе
					СчетНДС = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
				КонецЕсли;
				
				Возврат СчетНДС;
				
				ЭлементыОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
				
				НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				НовыйОтбор.ПравоеЗначение = ПланыСчетов.бит_Дополнительный_2.Доходы;
				НовыйОтбор.Использование = Истина;
				
				НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорСчет");
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				НовыйОтбор.ПравоеЗначение = СчетНДС;
				НовыйОтбор.Использование = Истина;
				
				// отбор по регистраторам проводок и субконто 1
				Отчет.Периодичность = 2;
				
				Запрос = Новый Запрос;
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|	&НачалоПериода КАК НачалоПериода,
				|	&КонецПериодаДата КАК КонецПериода,
				|	бит_му_ПериметрыКонсолидации.Ссылка КАК ПериметрКонсолидации
				|ПОМЕСТИТЬ ВТ_ПустойПериод
				|ИЗ
				|	Справочник.бит_му_ПериметрыКонсолидации КАК бит_му_ПериметрыКонсолидации
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ПериметрКонсолидации
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	бит_му_СоставПериметровКонсолидации.Период КАК Период,
				|	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации
				|ПОМЕСТИТЬ ВТ_ИзменениеВРамкахПериодаОсн
				|ИЗ
				|	РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
				|ГДЕ
				|	бит_му_СоставПериметровКонсолидации.Период > &НачалоПериода
				|	И бит_му_СоставПериметровКонсолидации.Период < &КонецПериодаДата
				|
				|СГРУППИРОВАТЬ ПО
				|	бит_му_СоставПериметровКонсолидации.Период,
				|	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДОБАВИТЬКДАТЕ(бит_му_СоставПериметровКонсолидации.ДатаОкончания, ДЕНЬ, 1),
				|	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации
				|ИЗ
				|	РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
				|ГДЕ
				|	бит_му_СоставПериметровКонсолидации.ДатаОкончания > &НачалоПериода
				|	И бит_му_СоставПериметровКонсолидации.ДатаОкончания < &КонецПериодаДата
				|
				|СГРУППИРОВАТЬ ПО
				|	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации,
				|	ДОБАВИТЬКДАТЕ(бит_му_СоставПериметровКонсолидации.ДатаОкончания, ДЕНЬ, 1)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Период
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	&НачалоПериода КАК ПериодНач,
				|	МИНИМУМ(ЕСТЬNULL(ВТ_ИзменениеВРамкахПериодаОсн.Период, ДОБАВИТЬКДАТЕ(&КонецПериодаДата, СЕКУНДА, 1))) КАК ПериодКон,
				|	ЕСТЬNULL(ВТ_ИзменениеВРамкахПериодаОсн.ПериметрКонсолидации, ВТ_ПустойПериод.ПериметрКонсолидации) КАК ПериметрКонсолидации
				|ПОМЕСТИТЬ ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн
				|ИЗ
				|	ВТ_ПустойПериод КАК ВТ_ПустойПериод
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзменениеВРамкахПериодаОсн КАК ВТ_ИзменениеВРамкахПериодаОсн
				|		ПО ВТ_ПустойПериод.КонецПериода <> ВТ_ИзменениеВРамкахПериодаОсн.Период
				|			И ВТ_ПустойПериод.НачалоПериода <> ВТ_ИзменениеВРамкахПериодаОсн.Период
				|			И ВТ_ПустойПериод.ПериметрКонсолидации = ВТ_ИзменениеВРамкахПериодаОсн.ПериметрКонсолидации
				|
				|СГРУППИРОВАТЬ ПО
				|	ЕСТЬNULL(ВТ_ИзменениеВРамкахПериодаОсн.ПериметрКонсолидации, ВТ_ПустойПериод.ПериметрКонсолидации)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВТ_ИзменениеВРамкахПериодаНач.Период,
				|	МИНИМУМ(ВТ_ИзменениеВРамкахПериодаКон.Период),
				|	ВТ_ИзменениеВРамкахПериодаНач.ПериметрКонсолидации
				|ИЗ
				|	ВТ_ИзменениеВРамкахПериодаОсн КАК ВТ_ИзменениеВРамкахПериодаНач
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзменениеВРамкахПериодаОсн КАК ВТ_ИзменениеВРамкахПериодаКон
				|		ПО ВТ_ИзменениеВРамкахПериодаНач.Период < ВТ_ИзменениеВРамкахПериодаКон.Период
				|			И ВТ_ИзменениеВРамкахПериодаНач.ПериметрКонсолидации = ВТ_ИзменениеВРамкахПериодаКон.ПериметрКонсолидации
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_ИзменениеВРамкахПериодаНач.Период,
				|	ВТ_ИзменениеВРамкахПериодаНач.ПериметрКонсолидации
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	МАКСИМУМ(ВТ_ИзменениеВРамкахПериода.Период),
				|	ДОБАВИТЬКДАТЕ(&КонецПериодаДата, СЕКУНДА, 1),
				|	ВТ_ИзменениеВРамкахПериода.ПериметрКонсолидации
				|ИЗ
				|	ВТ_ИзменениеВРамкахПериодаОсн КАК ВТ_ИзменениеВРамкахПериода
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_ИзменениеВРамкахПериода.ПериметрКонсолидации
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ПериодНач,
				|	ПериметрКонсолидации
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодНач КАК ПериодНач,
				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодКон КАК ПериодКон,
				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериметрКонсолидации,
				|	бит_му_СоставПериметровКонсолидации.Организация КАК Организация
				|ПОМЕСТИТЬ ВТ_ПараметрыОборотовОсн
				|ИЗ
				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн КАК ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
				|		ПО ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодНач >= бит_му_СоставПериметровКонсолидации.Период
				|			И ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериметрКонсолидации = бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации
				|			И (бит_му_СоставПериметровКонсолидации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
				|				ИЛИ ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодКон <= ДОБАВИТЬКДАТЕ(бит_му_СоставПериметровКонсолидации.ДатаОкончания, ДЕНЬ, 1))
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериметрКонсолидации,
				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодНач,
				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодКон,
				|	бит_му_СоставПериметровКонсолидации.Организация
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ПериодНач,
				|	ПериодКон,
				|	Организация
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	бит_Дополнительный_2Обороты.Период,
				|	бит_Дополнительный_2Обороты.Регистратор,
				|	бит_Дополнительный_2Обороты.Счет,
				|	бит_Дополнительный_2Обороты.Субконто1,
				|	бит_Дополнительный_2Обороты.Субконто2,
				|	бит_Дополнительный_2Обороты.КорСчет,
				|	бит_Дополнительный_2Обороты.КорСубконто1,
				|	бит_Дополнительный_2Обороты.КорСубконто2,
				|	бит_Дополнительный_2Обороты.Организация,
				|	бит_Дополнительный_2Обороты.СуммаУпрОборот,
				|	бит_Дополнительный_2Обороты.СуммаУпрОборотДт,
				|	бит_Дополнительный_2Обороты.СуммаУпрОборотКт,
				|	ЕСТЬNULL(Контрагенты.ПериметрКонсолидации, КорКонтрагенты.ПериметрКонсолидации) КАК ПериметрКонсолидации
				|ПОМЕСТИТЬ ВТ_ОборотыКонтрагентовСПериметрамиОсн
				|ИЗ
				|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В ИЕРАРХИИ (&Счет), , КорСубконто1.бит_му_СвязаннаяСторона, , ) КАК бит_Дополнительный_2Обороты
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.СБ_ПериметрыКонсолидации КАК Контрагенты
				|		ПО бит_Дополнительный_2Обороты.Субконто1 = Контрагенты.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.СБ_ПериметрыКонсолидации КАК КорКонтрагенты
				|		ПО бит_Дополнительный_2Обороты.КорСубконто1 = КорКонтрагенты.Ссылка
				|ГДЕ
				|	ВЫБОР
				|			КОГДА бит_Дополнительный_2Обороты.Субконто1 ССЫЛКА Справочник.Контрагенты
				|				ТОГДА НЕ Контрагенты.ПериметрКонсолидации ЕСТЬ NULL 
				|			КОГДА бит_Дополнительный_2Обороты.КорСубконто1 ССЫЛКА Справочник.Контрагенты
				|				ТОГДА НЕ КорКонтрагенты.ПериметрКонсолидации ЕСТЬ NULL 
				|			ИНАЧЕ ИСТИНА
				|		КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВТ_ПараметрыОборотовОсн.ПериметрКонсолидации,
				|	ВТ_ПараметрыОборотовОсн.Организация,
				|	ВТ_ОборотыКонтрагентовСПериметрамиОсн.Регистратор,
				|	ВТ_ОборотыКонтрагентовСПериметрамиОсн.Субконто1
				|ПОМЕСТИТЬ ВТ_ИтоговыеДанные
				|ИЗ
				|	ВТ_ПараметрыОборотовОсн КАК ВТ_ПараметрыОборотовОсн
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОборотыКонтрагентовСПериметрамиОсн КАК ВТ_ОборотыКонтрагентовСПериметрамиОсн
				|		ПО ВТ_ПараметрыОборотовОсн.ПериодНач <= ВТ_ОборотыКонтрагентовСПериметрамиОсн.Период
				|			И ВТ_ПараметрыОборотовОсн.ПериодКон > ВТ_ОборотыКонтрагентовСПериметрамиОсн.Период
				|			И (ВЫБОР
				|				КОГДА &ПоПериметру
				|					ТОГДА ВТ_ПараметрыОборотовОсн.Организация = ВТ_ОборотыКонтрагентовСПериметрамиОсн.Организация
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ)
				|			И ВТ_ПараметрыОборотовОсн.ПериметрКонсолидации = ВТ_ОборотыКонтрагентовСПериметрамиОсн.ПериметрКонсолидации
				|ГДЕ
				|	ВТ_ПараметрыОборотовОсн.ПериметрКонсолидации = &Организация
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТ_ПараметрыОборотовОсн.ПериметрКонсолидации,
				|	ВТ_ПараметрыОборотовОсн.Организация,
				|	ВТ_ОборотыКонтрагентовСПериметрамиОсн.Регистратор,
				|	ВТ_ОборотыКонтрагентовСПериметрамиОсн.Субконто1
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	NULL,
				|	бит_Дополнительный_2Обороты.Организация,
				|	бит_Дополнительный_2Обороты.Регистратор,
				|	бит_Дополнительный_2Обороты.Субконто1
				|ИЗ
				|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
				|			&НачалоПериода,
				|			&КонецПериода,
				|			Регистратор,
				|			Счет В ИЕРАРХИИ (&Счет),
				|			,
				|			ВЫБОР
				|					КОГДА &ПоПериметру
				|						ТОГДА ЛОЖЬ
				|					ИНАЧЕ ИСТИНА
				|				КОНЕЦ
				|				И КорСубконто1.бит_му_СвязаннаяСторона,
				|			,
				|			) КАК бит_Дополнительный_2Обороты
				|ГДЕ
				|	бит_Дополнительный_2Обороты.Организация = &Организация
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТЧ.Регистратор,
				|	ТЧ.Субконто1
				|ИЗ
				|	ВТ_ИтоговыеДанные КАК ТЧ
				|ГДЕ
				|	НЕ ТЧ.Регистратор ССЫЛКА Документ.бит_ПереоценкаВалютныхДенежныхСтатей
				|
				|СГРУППИРОВАТЬ ПО
				|	ТЧ.Регистратор,
				|	ТЧ.Субконто1";
				Запрос.Текст = ТекстЗапроса; 
				Запрос.УстановитьПараметр("НачалоПериода", СтруктураПараметров.ДатаНачалаПред);
				Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтруктураПараметров.ДатаОкончанияПред), ВидГраницы.Включая));
				Запрос.УстановитьПараметр("КонецПериодаДата", КонецДня(СтруктураПараметров.ДатаОкончанияПред));
				Запрос.УстановитьПараметр("Счет", ПланыСчетов.бит_Дополнительный_2.Доходы);
				Запрос.УстановитьПараметр("ПоПериметру", ТипЗнч(СтруктураПараметров.Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации"));
				Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
				
				ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
				МассивРегистратор = ТаблицаЗапроса.ВыгрузитьКолонку("Регистратор");
				МассивСубконто = ТаблицаЗапроса.ВыгрузитьКолонку("Субконто1");
				
				//Реистратор
				СписокРегистраторов = Новый СписокЗначений;
				СписокРегистраторов.ЗагрузитьЗначения(МассивРегистратор);
				
				НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регистратор");
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйОтбор.ПравоеЗначение = СписокРегистраторов;
				НовыйОтбор.Использование = Истина;
				
				//Субконтко
				СписокСубконто = Новый СписокЗначений;
				СписокСубконто.ЗагрузитьЗначения(МассивСубконто);
				
				НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто1");
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				НовыйОтбор.ПравоеЗначение = СписокСубконто;
				НовыйОтбор.Использование = Истина;
				
			Иначе
				
				// отбор по периметрам консолидации контрагентов
				// // БИТ_YK_н Доработка #2084 01/16
				// Заблокируем, отбор по периметру неявно делается выше (по списку организаций из периметра)
				//Если ТипЗнч(СтруктураПараметров.Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") И ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
				//	Отбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				//	Если СтрокаТаблицы.ИмяРесурса = "ОборотОсновнойСНДС" Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийСНДС" 
				//		 Или СтрокаТаблицы.ИмяРесурса = "ОборотОсновнойБезНДС"  Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийБезНДС" Тогда
				//		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорПериметрКонсолидации");
				//	Иначе
				//		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериметрКонсолидации");
				//	КонецЕсли;	
				//	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				//	Отбор.ПравоеЗначение = СтруктураПараметров.Организация;
				//	Отбор.Использование = Истина;
				//КонецЕсли;
				// БИТ_YK_к
				
				// +СБ Кузнецова С. 2017-03-15 
				Если СтрокаТаблицы.ИмяРесурса = "ТекущаяСтоимость" Тогда
				// -СБ Кузнецова С.
				//+СБ Пискунова 19.07.2016 #2388
				Если СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
					ЗаполнитьСчет(СтрокаТаблицы.ЭлементДанных, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
				ИначеЕсли СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула Тогда
					Для Каждого СтрокаФормулы Из СтрокаТаблицы.ЭлементДанных.СтрокиРасчетаДляФормулы Цикл
						ЗаполнитьСчет(СтрокаФормулы.СтрокаРасчета, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
					КонецЦикла;
				КонецЕсли;
				ЗаполняемыеНастройки = Новый Структура("Показатели, ВыводимыеДанные, Группировка, Отбор, ДополнительныеПоля",
				Истина, Истина, Истина, Истина, Истина);
				ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
				// +СБ Кузнецова С. 2017-03-15 
				КонецЕсли;
				// -СБ Кузнецова С.
				
				Если ТипЗнч(СтруктураПараметров.Организация) = Тип("СправочникСсылка.Организации") Тогда
					Отчет.Организация        = СтруктураПараметров.Организация;
				ИначеЕсли ТипЗнч(СтруктураПараметров.Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") И ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
					Отчет.Организация = Справочники.Организации.ПустаяСсылка();
				КонецЕсли;
				//-СБ Пискунова 19.07.2016 #2388
				
				Если СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
					ЗаполнитьОтборОтчетаРасшифровки_ОборотыСчета(СтрокаТаблицы.ЭлементДанных, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
				ИначеЕсли СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула Тогда
					Для Каждого СтрокаФормулы Из СтрокаТаблицы.ЭлементДанных.СтрокиРасчетаДляФормулы Цикл
						ЗаполнитьОтборОтчетаРасшифровки_ОборотыСчета(СтрокаФормулы.СтрокаРасчета, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			// отбор по ненулевым значениям показателей
			МассивПоказателей = Новый Массив;
			Если СтрокаТаблицы.ИмяРесурса = "КонОстатокОсновной" Или  СтрокаТаблицы.ИмяРесурса = "КонОстатокПредыдущий" или СтрокаТаблицы.ЭлементДанных.ИсточникДанных.Наименование = "КонечныеОстаткиДляДвухПериодов" Тогда // БИТ_YK Доработка #2084 12/15 (Перенос старых доработок)
				МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокДт");
				МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокКт");
			ИначеЕсли СтрокаТаблицы.ИмяРесурса = "НачОстатокОсновной" или СтрокаТаблицы.ЭлементДанных.ИсточникДанных.Наименование = "НачальныеОстаткиДляДвухПериодов" Тогда // БИТ_YK Доработка #2084 12/15 (Перенос старых доработок)
				МассивПоказателей.Добавить("СальдоНаНачалоПериода.СуммаУпрНачальныйОстатокДт");
				МассивПоказателей.Добавить("СальдоНаНачалоПериода.СуммаУпрНачальныйОстатокКт");
			Иначе
				МассивПоказателей.Добавить("ОборотыЗаПериод.СуммаУпрОборотДт");
				МассивПоказателей.Добавить("ОборотыЗаПериод.СуммаУпрОборотКт");
			КонецЕсли;
			МассивПоказателейДляОтбора.ЗагрузитьЗначения(МассивПоказателей);
			
			// дополнительный отбор по заполненным показателям на верхнем уровне структуры
			ГруппаОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаОтбора.Использование = Истина;
			
			Для Каждого Элемент Из МассивПоказателей Цикл
				Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент);
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				Отбор.Использование = Истина;
			КонецЦикла;
			
		КонецЕсли; // в элементе данных заполнена настройка расшифровки отчетом
		
		// +СБ Кузнецова С. 2017-03-15 
		Если СтрокаТаблицы.ИмяРесурса = "ТекущаяСтоимость" Тогда
		// -СБ Кузнецова С.
		//+СБ Пискунова 19.07.2016 #2388
		ОбновитьТекстЗаголовка(ЭтаФорма); 
		Отчет.ОборотыСоСчетамиДт = Ложь;
		Отчет.ОборотыСоСчетамиКт = Ложь;
		Отчет.СальдоНаКонецДт = Истина;
		Отчет.СальдоНаКонецКт = Истина;
		Отчет.ОборотыЗаПериодДт = Ложь;
		Отчет.ОборотыЗаПериодКт = Ложь;
		Отчет.СальдоНаНачалоДт = Ложь;
		Отчет.СальдоНаНачалоКт = Ложь;
		Отчет.ПоказательСуммаУпр = Истина;
		//-СБ Пискунова 19.07.2016 #2388
		// +СБ Кузнецова С. 2017-03-15 
		КонецЕсли;
		// -СБ Кузнецова С.
		
	КонецЕсли; // Строка настроек найдена 
	
	КомпоновщикИнициализирован = Истина;
	
	//СкомпоноватьРезультат();
	СформироватьОтчетНаСервере();
	
КонецФункции // РасшифроватьПроизвольнымОтчетом()

//+СБ Пискунова 19.07.2016 #2388
&НаСервере
Процедура ЗаполнитьСчет(Элемент, ЭлементыОтбора)
	
	ХранилищеНастроек = Элемент.НастройкиПостроителя.Получить();
	Если ТипЗнч(ХранилищеНастроек) = Тип("Структура") И ХранилищеНастроек.Количество() <> 0 И ХранилищеНастроек.Свойство("Отбор") Тогда
		Для Каждого СтрокаОтбора Из ХранилищеНастроек.Отбор Цикл
			ОтборУстановлен = Ложь;
			ПутьКДанным = СтрокаОтбора.ПутьКДанным;			
			Если Не ОтборУстановлен Тогда
				Если ТипЗнч(СтрокаОтбора.Значение) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
					Отчет.Счет = СтрокаОтбора.Значение;
				ИначеЕсли ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений") Тогда
					Отчет.Счет = СтрокаОтбора.Значение[0].значение;
				КонецЕсли;   			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ИзменениеСхемыКомпоновкиДанныхНаСервере();
КонецПроцедуры		
//-СБ Пискунова 19.07.2016 #2388
&НаСервере
Процедура ЗаполнитьОтборОтчетаРасшифровки_ОборотыСчета(Элемент, ЭлементыОтбора)
	
	ХранилищеНастроек = Элемент.НастройкиПостроителя.Получить();
	Если ТипЗнч(ХранилищеНастроек) = Тип("Структура") И ХранилищеНастроек.Количество() <> 0 И ХранилищеНастроек.Свойство("Отбор") Тогда
		Для Каждого СтрокаОтбора Из ХранилищеНастроек.Отбор Цикл
			ОтборУстановлен = Ложь;
			//+СБ Пискунова 18.07.2016 #2388
			ПутьКДанным = СтрокаОтбора.ПутьКДанным;			
			ПутьКДанным = ?(ПутьКДанным = "Договор.бит_му_ТипКредитногоДоговора","Субконто2.бит_му_ТипКредитногоДоговора",ПутьКДанным);
			ПутьКДанным = ?(ПутьКДанным = "Контрагент","Субконто1",ПутьКДанным);
			//-СБ Пискунова 18.07.2016 #2388
			Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				//+СБ Пискунова 19.07.2016 #2388 
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
					//И ЭлементОтбора.Представление = "Контрагент"  
					//ОтборУстановлен = Истина;
				Иначе
				//-СБ Пискунова 19.07.2016 #2388

				Если СтрокаОтбора.ПутьКДанным = Строка(ЭлементОтбора.ЛевоеЗначение) Тогда
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
						ЗначенияОтбора = Новый СписокЗначений;
						ЗначенияОтбора.Добавить(ЭлементОтбора.ПравоеЗначение);
						Если ТипЗнч(СтрокаОтбора.Значение) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
							ЗначенияОтбора.Добавить(СтрокаОтбора.Значение);
							ОтборУстановлен = Истина;
							Прервать;
						ИначеЕсли ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений") Тогда
							Для Каждого ЗначОтбора Из СтрокаОтбора.Значение Цикл
								ЗначенияОтбора.Добавить(ЗначОтбора.Значение);
							КонецЦикла;
							ОтборУстановлен = Истина;
							Прервать;
						КонецЕсли;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
						ЗначенияОтбора = ЭлементОтбора.ПравоеЗначение;
						Если ТипЗнч(СтрокаОтбора.Значение) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
							ЗначенияОтбора.Добавить(СтрокаОтбора.Значение);
							ОтборУстановлен = Истина;
							Прервать;
						ИначеЕсли ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений") Тогда
							Для Каждого ЗначОтбора Из СтрокаОтбора.Значение Цикл
								ЗначенияОтбора.Добавить(ЗначОтбора.Значение);
							КонецЦикла;
							ОтборУстановлен = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Не ОтборУстановлен Тогда
				Если СтрокаОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					//-СБ Пискунова 18.07.2016 #2388
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
					Отбор1.Использование = Истина;
					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
					Отбор2.Использование = Истина;
					//+СБ Пискунова 19.07.2016 #2388
				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно 
					И ТипЗнч(СтрокаОтбора.Значение) = Тип("СправочникСсылка.Контрагенты")
					И СтрокаОтбора.ПутьКДанным = "Контрагент" тогда
					ГруппаОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
					//ГруппаОтбора.Представление = "Контрагент";
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ГруппаОтбора.Использование = Истина;
					
					Отбор1 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
					Отбор1.Использование = Истина;
					
					Отбор2 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
					Отбор2.ПравоеЗначение = СтрокаОтбора.Значение;
					Отбор2.Использование = Истина;
                   //-СБ Пискунова 19.07.2016 #2388    
				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					//-СБ Пискунова 18.07.2016 #2388  
					
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
					Отбор1.Использование = Истина;
					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным); 
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
					Отбор2.Использование = Истина;
				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);  
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					//-СБ Пискунова 18.07.2016 #2388
					
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
					Отбор1.Использование = Истина;
					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
					Отбор2.Использование = Истина;
				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					//-СБ Пискунова 18.07.2016 #2388
					
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
					Отбор1.Использование = Истина;
					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);  
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
					Отбор2.Использование = Истина;
				Иначе
					НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					//+СБ Пискунова 18.07.2016 #2388
					//НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
					НовыйОтбор.ЛевоеЗначение =Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии;
					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
					Иначе
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить(Строка(СтрокаОтбора.ВидСравнения), " ", "")];
					КонецЕсли;
					НовыйОтбор.ПравоеЗначение = СтрокаОтбора.Значение;
					НовыйОтбор.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры		
