#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Если Клиент Тогда
	
// Процедура обрабатывает изменение схемы компоновки данных.
// 
Процедура ИзменениеСпособаКомпоновки() Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаОтчета) Тогда	
		Возврат;                                    	
	КонецЕсли; 
	
	Если НастройкаОтчета.СхемаКомпоновкиДанных = Неопределено Тогда	
		 Возврат;                                                  	
	КонецЕсли; 
	
	Язык = НастройкаОтчета.Язык;
	
	ТекущаяСхема = НастройкаОтчета.СхемаКомпоновкиДанных.Получить();
	Если ТекущаяСхема <> Неопределено Тогда
		
		ЭтотОбъект.СхемаКомпоновкиДанных = ТекущаяСхема;
		// Установим настройку по умолчанию.
		ЭтотОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ТекущаяСхема.НастройкиПоУмолчанию);
		
	КонецЕсли; 
	
КонецПроцедуры // бит_ИзменениеСпособаКомпоновки()

#КонецЕсли

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
// Процедура преобразует заголовки.
// 
// Параметры:
//  ТекущаяСхема - СхемаКомпоновкиДанных.
// 
Процедура ИзменитьЗаголовкиПоПараметрам(ТекущаяСхема)
         	
	Если Не ЗначениеЗаполнено(Язык) Тогда
		Возврат; 
	КонецЕсли;
	
	ТчПараметры = НастройкаОтчета.Параметры;
	КодЯзыка    = Язык.КодЯзыка;
	
	
	// ----------------------------------------------------------------------
	// Заголовок.
	ЗаголовокОтчетаЯзык = НСтр(НастройкаОтчета.ЗаголовокОтчета, КодЯзыка);
	Если ЗначениеЗаполнено(ЗаголовокОтчетаЯзык) Тогда
		КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение = ЗаголовокОтчетаЯзык;
	КонецЕсли;
	
	
	// ----------------------------------------------------------------------
	// Обработка заголовков колонок - из табличной части "Параметры" справочника бит_НастройкиОтчетов.	
	Если ТчПараметры.Количество() = 0 Тогда
		Возврат; 
	КонецЕсли;
	
	
	// Колонки
	ПоляНабораДанных = ТекущаяСхема.НаборыДанных.мТаблицаРезультат.Поля;
	// Цикл по полям набора данных.
	Для каждого ПолеНабора Из ПоляНабораДанных Цикл   			 
		
		ИмяПоляНд 	   = СокрЛП(ПолеНабора.Поле);
		// Поиск параметра с заголовком в табличной части настройки.
	 	СтрТчПараметры = ТчПараметры.Найти(ИмяПоляНд, "Параметр");
		
		Если СтрТчПараметры <> Неопределено Тогда
			
			НовоеЗначение = СокрЛП(НСтр(СтрТчПараметры.Значение, КодЯзыка));
			Если ЗначениеЗаполнено(НовоеЗначение) Тогда
				ПолеНабора.Заголовок = НовоеЗначение;
			КонецЕсли;
			
		КонецЕсли;  
	КонецЦикла;
	
	
	// Макеты. 
	Для каждого МакетКд Из ТекущаяСхема.Макеты Цикл
		Для каждого СтрокаТаблицыОбластиКд Из МакетКд.Макет Цикл
			Для каждого ЯчейкаТаблицыОбластиКд Из СтрокаТаблицыОбластиКд.Ячейки Цикл
				Для каждого ПолеОбластиКд Из ЯчейкаТаблицыОбластиКд.Элементы Цикл
					
					// Значение поля области компоновки данных.     						
					ЗначениеПоля = ПолеОбластиКд.Значение;
					// Если тип значения = Строка, то нужно подставить заголовки.
					Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
						
						// Поиск вхождений параметров для замены: [ИмяПараметра].
						МассивСтрПарам = бит_СтрокиКлиентСервер.РазобратьСтрокуСРазделителями(ЗначениеПоля, "[");
						Для каждого СтрокаПоиска Из МассивСтрПарам Цикл
							ПозицияЗакрытия = Найти(СтрокаПоиска, "]");
							Если ПозицияЗакрытия = 0 Тогда
								Продолжить;
							Иначе	
								СтрокаПараметр = Лев(СтрокаПоиска, ПозицияЗакрытия-1);
								СтрТчПараметры = ТчПараметры.Найти(СтрокаПараметр, "Параметр");
								Если СтрТчПараметры <> Неопределено Тогда
									НовоеЗначение = СокрЛП(НСтр(СтрТчПараметры.Значение, КодЯзыка));
									// Если ЗначениеЗаполнено(НовоеЗначение) Тогда.
										СтрокаПараметр = "[" + СтрокаПараметр + "]";
										ПолеОбластиКд.Значение = СтрЗаменить(ПолеОбластиКд.Значение, 
																СтрокаПараметр, 
																НовоеЗначение);
									// КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;		
			КонецЦикла;			
		КонецЦикла; 		
	КонецЦикла;

КонецПроцедуры // ИзменитьЗаголовкиПоПараметрам()

// Процедура инициализирует СКД.
// 
// Параметры:
//  ТаблицаРезультат  				- ТаблицаЗначений (По умолчанию = Неопределено).
//  СтруктураТаблиц					- Структура.
//  ОбновлятьНастройкиПоУмолчанию 	- Булево (По умолчанию = Истина).
//  НастройкиКд 					- НастройкиКомпоновкиДанных (По умолчанию = Неопределено).
//  ПользовательскиеНастройкиКд     - ПользовательскиеНастройкиКомпоновщикаДанных (По умолчанию = Неопределено).
// 
Функция ИнициализироватьСКД(ТаблицаРезультат = Неопределено, СтруктураТаблиц, ОбновлятьНастройкиПоУмолчанию = Истина, НастройкиКд = Неопределено, ПользовательскиеНастройкиКд = Неопределено) Экспорт

	АдресХранилищаСКД = Неопределено;
	ТаблицаОтборов    = СтруктураТаблиц.ОтборВОтчете; 
		
	// Если не заполнен реквизит "ИсточникДанных", то ничего не делаем.
	Если ЗначениеЗаполнено(НастройкаОтчета) И ЗначениеЗаполнено(НастройкаОтчета.ИсточникДанных) Тогда
			
		ПолучитьДанныеПоИсточнику(СтруктураТаблиц.ТаблицаПараметры, ТаблицаОтборов, ТаблицаРезультат);
				
		Если ТаблицаРезультат <> Неопределено Тогда
		
			ТекущаяСхема  = НастройкаОтчета.СхемаКомпоновкиДанных.Получить();
			Если ТекущаяСхема <> Неопределено Тогда
				ВариантОтчета = НастройкаОтчета.ВариантОтчета.Получить();
				Если ТипЗнч(ВариантОтчета) = Тип("Строка") Тогда
					ВариантОтчета = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВариантОтчета);
				Иначе
					ВариантОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
				КонецЕсли; 

				СхемаКомпоновкиДанных = ТекущаяСхема;
				ПреобразоватьСКД(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ТекущаяСхема.НастройкиПоУмолчанию);
					            				
				АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
				Если ЗначениеЗаполнено(АдресХранилищаСКД) Тогда
										
					// Компоновщик настроек
					ИсточникНастроек 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД);
					КомпоновщикНастроек.Инициализировать(Неопределено);
					КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
					
					Если НастройкиКд <> Неопределено Тогда
						        						
						Если ПользовательскиеНастройкиКд = Неопределено Тогда
							// Загрузка старых вариантов
							ПреобразоватьСКД(НастройкиКд, СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
							КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКд);							
						Иначе	
							// Загрузка новых вариантов
							КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКд);
							КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКд);
						КонецЕсли;
												
					ИначеЕсли ПользовательскиеНастройкиКд <> Неопределено Тогда
						
						// Основные настройки по умолчанию + пользовательские настройки.
						КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
						КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКд);
							
					ИначеЕсли ОбновлятьНастройкиПоУмолчанию Тогда
						
						// Все настройки по умолчанию
						КомпоновщикНастроек.ЗагрузитьНастройки(ВариантОтчета);
					КонецЕсли;
					
					// Перезаполним выбранные поля компоновщика настроек.
					КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество();
					
					// Установка имен колонок и заголовка на текущем языке
					ИзменитьЗаголовкиПоПараметрам(СхемаКомпоновкиДанных);				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат АдресХранилищаСКД;
	
КонецФункции

Процедура ПолучитьДанныеПоИсточнику(ТаблицаПараметры, ТаблицаОтборов, ТаблицаРезультат)
		
	ИсточникДанных = НастройкаОтчета.ИсточникДанных;
	
	ГраницаНач = Период.ДатаНачала;
	ГраницаКон = Новый Граница(КонецДня(Период.ДатаОкончания), ВидГраницы.Включая);
	
	СтруктураПараметров = бит_МеханизмПолученияДанных.ЗаполнитьСтруктуруПараметровИзТаблицы(ТаблицаПараметры);
	
	Если ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_ИсточникиДанных") Тогда
		
		СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоИсточнику();
		СтрПар.Параметры    = СтруктураПараметров;
		СтрПар.ОтборВОтчете = ТаблицаОтборов;
		СтрПар.НастройкаПулаПодключений = НастройкаПулаПодключений;			
		
		ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточнику(ИсточникДанных, ГраницаНач, ГраницаКон, СтрПар);
		
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных") Тогда	
		
		СтруктураПараметров.Вставить("ВалютаОтчета", ВалютаДокумента);
		
		ПоказыватьИндикатор = Не бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("НеОтображатьИндикаторКомпоновкиИсточников",
									Пользователи.ТекущийПользователь());
		
		СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоСпособуКомпоновки();
		СтрПар.Параметры                = СтруктураПараметров;
		СтрПар.ОтборВОтчете             = ТаблицаОтборов;
		СтрПар.ПоказыватьИндикатор      = ПоказыватьИндикатор;
		СтрПар.НастройкаПулаПодключений = НастройкаПулаПодключений;
		
		ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточникам(ИсточникДанных, ГраницаНач, ГраницаКон, СтрПар);
		
		бит_МеханизмПолученияДанных.ДополнитьРезультатИВыполнитьРасчет(ИсточникДанных, ТаблицаРезультат);
		
	КонецЕсли;

КонецПроцедуры

// Процедура преобразует СКД.
// 
// Параметры:
//  ТекущаяНастройкаКД.
//  ИсточникНастройкиПоУмолчанию.
// 
Процедура ПреобразоватьСКД(ТекущаяНастройкаКД, ИсточникНастройкиПоУмолчанию)	
    						
	// Добавим в текущий вариант идентификаторы пользовательских настроек.
	ИдентификаторПн = ?(ЗначениеЗаполнено(ИсточникНастройкиПоУмолчанию.Выбор.ИдентификаторПользовательскойНастройки), ИсточникНастройкиПоУмолчанию.Выбор.ИдентификаторПользовательскойНастройки, Строка(Новый УникальныйИдентификатор));
	ТекущаяНастройкаКД.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПн;
	ИдентификаторПн = ?(ЗначениеЗаполнено(ИсточникНастройкиПоУмолчанию.Отбор.ИдентификаторПользовательскойНастройки), ИсточникНастройкиПоУмолчанию.Отбор.ИдентификаторПользовательскойНастройки, Строка(Новый УникальныйИдентификатор));
	ТекущаяНастройкаКД.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПн;
	ИдентификаторПн = ?(ЗначениеЗаполнено(ИсточникНастройкиПоУмолчанию.Порядок.ИдентификаторПользовательскойНастройки), ИсточникНастройкиПоУмолчанию.Порядок.ИдентификаторПользовательскойНастройки, Строка(Новый УникальныйИдентификатор));
	ТекущаяНастройкаКД.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПн;
	ИдентификаторПн = ?(ЗначениеЗаполнено(ИсточникНастройкиПоУмолчанию.УсловноеОформление.ИдентификаторПользовательскойНастройки), ИсточникНастройкиПоУмолчанию.УсловноеОформление.ИдентификаторПользовательскойНастройки, Строка(Новый УникальныйИдентификатор));
	ТекущаяНастройкаКД.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПн;
	ИдентификаторПн = ?(ЗначениеЗаполнено(ИсточникНастройкиПоУмолчанию.Структура.ИдентификаторПользовательскойНастройки), ИсточникНастройкиПоУмолчанию.Структура.ИдентификаторПользовательскойНастройки, Строка(Новый УникальныйИдентификатор));
	ТекущаяНастройкаКД.Структура.ИдентификаторПользовательскойНастройки = ИдентификаторПн;
						
КонецПроцедуры // ПреобразоватьСКД()
 
#КонецОбласти


#КонецЕсли
