#Область ОписаниеПеременных

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;
// Служит для передачи вида параметра между обработчиками.
&НаКлиенте
Перем мТекущийВидПараметра;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Отчет.НастройкаОтчета) Тогда
		ИзменениеНастройки();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Установка флага в Ложь для беспрепятственного закрытия формы.
	ВариантМодифицирован = Ложь;
	
КонецПроцедуры // ПередЗакрытием()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Отчет);
	
	фПолноеИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтотОбъект.ИмяФормы, Истина);
			
	// Вызов механизма защиты
	
	Если фОтказ Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	ЗаполнитьДополнительныеСписки();
	
	Если Параметры.Свойство("НастройкаОтчета") Тогда
		Отчет.НастройкаОтчета = Параметры.НастройкаОтчета;
	Иначе
		ОбновитьПанельСохраненныхНастроек();
	КонецЕсли;	  	
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура обновляет панель сохраненных настроек.
// 
// Параметры:
//  Очищать  - Булево (Необязательный, по умолчанию = Ложь).
//  ТекКлючНастройки  (Необязательный).
// 
&НаСервере
Процедура ОбновитьПанельСохраненныхНастроек()

	ГруппаПанели = Элементы.ГруппаПанельВыбораСохраненныхНастроек;
	КлючОбъекта = фПолноеИмяОтчета + "_СКД";
	
	СтруктураДоступности = бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(КлючОбъекта, Ложь);
	СтруктураСохраненныхНастроек = Неопределено;
	ИмяЭлементаВыбраннаяНастройка = "";
	бит_ОтчетыСервер.ОбновитьПанельСохраненныхНастроек(Элементы, 
													ГруппаПанели, 
													КлючОбъекта, 
													СтруктураСохраненныхНастроек,
													СтруктураДоступности,
													Ложь,
													ИмяЭлементаВыбраннаяНастройка);
	
	// Установка настройки, используемой при открытии, если такая указана в справочнике.
	ТекКлючНастройки = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(КлючОбъекта, Истина);
	
	Если ТекКлючНастройки <> Неопределено Тогда
		Результат.Очистить();
		УстановитьТекущиеПользовательскиеНастройки(ТекКлючНастройки);
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
														СтруктураСохраненныхНастроек, 
														ИмяЭлементаВыбраннаяНастройка,
														Ложь,
														ТекКлючНастройки);
		ТекНастройки = бит_ОтчетыСервер.ПолучитьНастройкиОтчета(СтруктураСохраненныхНастроек[ИмяЭлементаВыбраннаяНастройка]);
		ПрименитьНастройки(ТекНастройки);
	КонецЕсли;
		
КонецПроцедуры // ОбновитьПанельСохраненныхНастроек()

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	
	// Видимость структуры отчета
	Элементы.КомандаПоказатьСкрытьСтруктуру.Заголовок = ?(фОтображатьСтруктуру, "Скрыть структуру", "Показать структуру");
	Элементы.ГруппаКомпоновщикСтрукутра.Видимость     = фОтображатьСтруктуру;
	             	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаОтчетаПриИзменении(Элемент)
	
	ИзменениеНастройки();
		
КонецПроцедуры // НастройкаОтчетаПриИзменении()

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	СуммаОтчета = бит_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Результат);
	
КонецПроцедуры // РезультатПриАктивизацииОбласти()

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПриИзменении(Элемент)
	
	ИзменитьМодифицированностьВарианта(Истина);
	
КонецПроцедуры // КомпоновщикНастроекНастройкиПриИзменении()

									
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОбработкаРасшифровкиОтчета(Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры // РезультатОбработкаРасшифровки()
									
&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОбработкаРасшифровкиОтчета(Расшифровка, СтандартнаяОбработка, Истина);	
	
КонецПроцедуры // РезультатОбработкаДополнительнойРасшифровки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметры

&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение;   			
	КонецЕсли; 
	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	ОграничитьОписаниеТиповПараметра();
		
КонецПроцедуры // ТаблицаПараметрыПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		
		ОграничитьОписаниеТиповПараметра();
				
	КонецЕсли; 
			
КонецПроцедуры // ТаблицаПараметрыВидПараметраПриИзменении()

&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;

КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраНачалоВыбора()

&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
    	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = ТекущиеДанные.Значение = Неопределено;
		
КонецПроцедуры // ОтборВОтчетеПриНачалеРедактирования()

&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОтборВОтчетеПриОкончанииРедактирования()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения); 
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()
     
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ИзменениеВидаСравненияТаблицыОтборов(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ИзменениеЗначенияТаблицыОтборов(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры // ОтборВОтчетеЗначениеОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
		
	Если ЗначениеЗаполнено(Отчет.НастройкаОтчета) Тогда
		
		СформироватьОтчетСервер();
		
	Иначе
		
		ТекстСообщения = Нстр("ru = 'Не указана настройка отчета!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
		
		Результат.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Отчет);
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();
	
КонецПроцедуры // КомандаПанельНастроек()

&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()

&НаКлиенте
Процедура КомандаПоказатьСкрытьСтруктуру(Команда)
	
	фОтображатьСтруктуру = Не фОтображатьСтруктуру;
	
	// Видимость структуры отчета
	Элементы.КомандаПоказатьСкрытьСтруктуру.Заголовок = ?(фОтображатьСтруктуру, "Скрыть структуру варианта", "Показать структуру варианта");
	Элементы.ГруппаКомпоновщикСтрукутра.Видимость = фОтображатьСтруктуру;
	
	Если фОтображатьСтруктуру Тогда
		Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаКомпоновщик;
		ЭтотОбъект.ТекущийЭлемент = Элементы.КомпоновщикНастроекНастройки;
	КонецЕсли;
	
КонецПроцедуры // КомандаПоказатьСкрытьСтруктуру()

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процедура ограничивает описание типов в строке таблица параметров.
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда
			
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
		
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры // ОграничитьОписаниеТиповПараметра()

// Процедура выполняет обработку расшифровки отчета.
// 
// Параметры:
//  Расшифровка 		 - ИндентификаторРасшифровкиКомпоновкиДанных.
//  СтандартнаяОбработка - Булево.
//  ОткрыватьДопЗначение - Булево (По умолчанию = Ложь).
// 
&НаКлиенте
Процедура ОбработкаРасшифровкиОтчета(Расшифровка, СтандартнаяОбработка, ОткрыватьДопЗначение = Ложь)
	
	АдресХранилищаСКД = ПолучитьАдресСКД();
	
	бит_ОтчетыКлиент.ОбработкаРасшифровки(ЭтотОбъект
										, Расшифровка 
										, ДанныеРасшифровки 
										, фПолноеИмяОтчета 
										, АдресХранилищаСКД 
										, СтандартнаяОбработка
										,
										,
										, Истина
										, ОткрыватьДопЗначение);
		
КонецПроцедуры // ОбработкаРасшифровкиОтчета()

// Процедура заполняет кэш значений.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ИмяТипаОтчета", СтрЗаменить(фПолноеИмяОтчета, "Отчет.", "ОтчетОбъект."));

	фКэшЗначений.Вставить("МассивВидовСравнения",бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));

	фКэшЗначений.Вставить("ТипНастройки"	   , Перечисления.бит_ТипыСохраненныхНастроек.Отчеты);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", фПолноеИмяОтчета + "_Скд");
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока", ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	
	
	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса",ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления",КэшПеречисления);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура заполняет дополнительные списки.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьДополнительныеСписки()

	// Список имен параметров СКД, заполняемых пользователем через элементы формы.
	ИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтотОбъект.ИмяФормы, Ложь); 
	Отчеты[ИмяОтчета].ЗаполнитьДополнительныеСписки(фСписокПараметровНаФорме);
		
КонецПроцедуры // ЗаполнитьДополнительныеСписки()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура заполняет таблицу отборов.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьТаблицуОтборов()

	ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Отчет.НастройкаОтчета.ИсточникДанных, ТаблицаОтборов);
	ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);	

КонецПроцедуры // ЗаполнитьТаблицуОтборов()

// Процедура меняет модифицированность варианта.
// 
// Параметры:
//  Модифицирован  - Булево.
// 
&НаСервере
Процедура ИзменитьМодифицированностьВарианта(Модифицирован)

	ВариантМодифицирован = Модифицирован;
	
	Элементы.ГруппаКомпоновщикСтрукутра.Заголовок = ?(ВариантМодифицирован, "Струкутра отчета (не соответствует варианту по умолчанию)", "Структура отчета");

КонецПроцедуры // ИзменитьМодифицированностьВарианта()

// Процедура выполняет действия, неоходимые при настройки отчета.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ИзменениеНастройки()
	
	Если НЕ ЗначениеЗаполнено(Отчет.НастройкаОтчета) Тогда 
		Возврат;                                    	
	КонецЕсли;
	
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Отчет.НастройкаОтчета.ИсточникДанных, ТаблицаПараметры, Истина);	
	ЗаполнитьТаблицуОтборов();
	 	
	Отчет.Язык = Отчет.НастройкаОтчета.Язык;
	
	ИнициализироватьСКД();
	
	ИзменитьМодифицированностьВарианта(Ложь);
	
КонецПроцедуры // ИзменениеНастройки()
 
// Процедура выполняет действия, неоходимые при изменении вида параметра в таблице параметров.
// 
// Параметры:
//  ИД  				- Число.
//  ТекущийВидПараметра - ПеречислениеСсылка.бит_ВидыПараметровЗапроса.
// 
&НаСервере
Процедура ИзменитьВидПараметра(ИД, ТекущийВидПараметра)

	ТекущиеДанные = ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, ТекущийВидПараметра);

КонецПроцедуры // ИзменитьВидПараметра()

// Процедура выполняет действия, неоходимые при изменении вида сравнения в таблице отборов.
// 
// Параметры:
//  ИД  				- Число.
//  ТекущийВидСравнения - Системные перечисления.ВидСравнения.
// 
&НаСервере
Процедура ИзменениеВидаСравненияТаблицыОтборов(Ид, ТекущийВидСравнения)
		
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, ТекущийВидСравнения);	

КонецПроцедуры // ИзменениеВидаСравнения()

// Процедура выполняет действия, неоходимые при изменении значения в таблице отборов.
// 
// Параметры:
//  ИД  				- Число
// 
&НаСервере
Процедура ИзменениеЗначенияТаблицыОтборов(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры // ИзменениеЗначенияТаблицыОтборов()

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТА

// Функция получает адрес СКД отчета.
// 
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//   Строка.
// 
&НаСервере
Функция ПолучитьАдресСКД()

	ОтчетОбъект = ДанныеФормыВЗначение(Отчет, Тип(фКэшЗначений.ИмяТипаОтчета));
	СКД = ОтчетОбъект.СхемаКомпоновкиДанных;
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор); 

	Возврат АдресХранилищаСКД;
	
КонецФункции // ПолучитьАдресСКД()

// Процедура инициализирует СКД.
// 
// Параметры:
//  ТаблицаРезультат  				- ТаблицаЗначений (По умолчанию = Неопределено).
//  ОбновлятьНастройкиПоУмолчанию 	- Булево.
//  НастройкиКд 					- НастройкиКомпоновкиДанных (По умолчанию = Неопределено).
//  ПользовательскиеНастройкиКд     - ПользовательскиеНастройкиКомпоновщикаДанных (По умолчанию = Неопределено).
//
&НаСервере
Процедура ИнициализироватьСКД(ТаблицаРезультат = Неопределено, ОбновлятьНастройкиПоУмолчанию = Истина, 
	НастройкиКд = Неопределено, ПользовательскиеНастройкиКд = Неопределено)

	ОтчетОбъект = ДанныеФормыВЗначение(Отчет, Тип(фКэшЗначений.ИмяТипаОтчета));
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ОтборВОтчете"    , ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений")));
	СтруктураТаблиц.Вставить("ТаблицаПараметры", ТаблицаПараметры);
	
	АдресХранилищаСКД = ОтчетОбъект.ИнициализироватьСКД(ТаблицаРезультат, СтруктураТаблиц, ОбновлятьНастройкиПоУмолчанию, 
							НастройкиКд, ПользовательскиеНастройкиКд);
	
	ЗначениеВДанныеФормы(ОтчетОбъект, Отчет);
	
КонецПроцедуры

// Процедура формирует отчет.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура СформироватьОтчетСервер()
	
	СтрРегистрация = Новый Структура;
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);

	// Очистка табличного поля
	Результат.Очистить();
	
	// СинхронизироватьЗначения();
	
	ТаблицаРезультат = Неопределено;
	ИнициализироватьСКД(ТаблицаРезультат, Ложь);
		
	
	// --------------------------------------------------------------------------------
	// Вывод отчета
	
	СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);	
	
	// Временное сохранение расшифровки данных
	ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Формирование макета, с помощью компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	            	
	// Настройки по умолчанию
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
						
	// Передача схемы, настроек и данных расшифровки в макет компоновки.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки1);
	
	// Внешние наборы данных	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("мТаблицаРезультат", ТаблицаРезультат);
	
	// Выполнение компоновки с помощью процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки1, Истина);
                  
	// Вывод таблицы   	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьДокумент(Результат); 	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	// --------------------------------------------------------------------------------
	// Сохранение данных расшифровки в хранилище
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки1, УникальныйИдентификатор);
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);

КонецПроцедуры // СформироватьОтчетСервер()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С НАСТРОЙКАМИ.

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Период"					 , Отчет.Период);
	СтруктураНастроек.Вставить("НастройкаОтчета"		 , Отчет.НастройкаОтчета);
	СтруктураНастроек.Вставить("Язык"					 , Отчет.Язык);
	СтруктураНастроек.Вставить("НастройкаПулаПодключений", Отчет.НастройкаПулаПодключений);
	
	ТаблицаЗн = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	СтруктураНастроек.Вставить("ОтборВОтчете", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаЗн));
	ТаблицаЗн = ДанныеФормыВЗначение(ТаблицаПараметры, Тип("ТаблицаЗначений"));
	СтруктураНастроек.Вставить("ТаблицаПараметры", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаЗн));
	
	Если ВариантМодифицирован Тогда
		СтруктураНастроек.Вставить("НастройкиКомпоновщика", Отчет.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	НастройкиКд 				= Неопределено;
	ПользовательскиеНастройкиКд = Неопределено;
		
	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
	Если ТипЗнч(ВыбНастройка) = Тип("Структура") Тогда
		СтруктураНастроек = ВыбНастройка;
	Иначе
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Отчет.Период  = ?(СтруктураНастроек.Свойство("ДатаНачала") И СтруктураНастроек.Свойство("ДатаОкончания")
							, Новый СтандартныйПериод(СтруктураНастроек.ДатаНачала, СтруктураНастроек.ДатаОкончания)
							, СтруктураНастроек.Период);
		Отчет.НастройкаОтчета = СтруктураНастроек.НастройкаОтчета;
		Отчет.Язык = ?(СтруктураНастроек.Свойство("Язык"), СтруктураНастроек.Язык, СтруктураНастроек.НастройкаОтчета.Язык);
		СтруктураНастроек.Свойство("НастройкаПулаПодключений", Отчет.НастройкаПулаПодключений);
		 		
		// Таблицы значений на форме
		Если СтруктураНастроек.Свойство("ОтборВОтчете") Тогда
			ТаблицаОтборов = ?(ТипЗнч(СтруктураНастроек.ОтборВОтчете) = Тип("ТаблицаЗначений")
									, СтруктураНастроек.ОтборВОтчете
									, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ОтборВОтчете));
			ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ТаблицаПараметры") Тогда
			ТаблицаПараметров = ?(ТипЗнч(СтруктураНастроек.ТаблицаПараметры) = Тип("ТаблицаЗначений")
									, СтруктураНастроек.ТаблицаПараметры
									, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ТаблицаПараметры));
			ЗначениеВДанныеФормы(ТаблицаПараметров, ТаблицаПараметры);
 		КонецЕсли;
		
		СтруктураНастроек.Свойство("НастройкиКомпоновщика"	  , НастройкиКд);
		СтруктураНастроек.Свойство("ПользовательскиеНастройки", ПользовательскиеНастройкиКд);
		ИнициализироватьСКД(,, НастройкиКд, ПользовательскиеНастройкиКд);
		
		Если НастройкиКд <> Неопределено Тогда
			ИзменитьМодифицированностьВарианта(Истина);
		КонецЕсли;		
	
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Настройки не восстановлены.");
	КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить".
// 
&НаКлиенте
Процедура НастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",
											ПараметрыФормы,
											ЭтотОбъект);	
													
КонецПроцедуры // НастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить".
// 
&НаКлиенте
Процедура НастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтотОбъект, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // НастройкиВосстановить()

// Процедура обработчик оповещения "НастройкиВосстановитьЗавершение".
// 
// Параметры:
// Настройка - Структура.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(Настройка, ДополнительныеДанные) Экспорт
	
	Если ЗначениеЗаполнено(Настройка) Тогда		
		ПрименитьНастройки(Настройка);		
	КонецЕсли;
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиУстановитьСтандартныеНастройки".
// 
&НаКлиенте
Процедура НастройкиУстановитьСтандартныеНастройки(Команда)
	
	ИзменениеНастройки();
	
КонецПроцедуры

#КонецОбласти

