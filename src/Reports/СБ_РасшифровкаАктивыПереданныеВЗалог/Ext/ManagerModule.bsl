#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Расшифровка к отчету ""Активы, переданные в залог или использование которых ограничено"" на " + Формат(ПараметрыОтчета.ДатаОстатков, "ДФ=dd.MM.yyyy") + " г.";
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	//установка параметров	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СписокСчетовКредитовИЗаймов", ПараметрыОтчета.СписокСчетовКредитовИЗаймов);
	
	ГруппировкаСчетовПервоначальнаяСтоимость = Новый СписокЗначений;
	ГруппировкаСчетовПервоначальнаяСтоимость.Добавить(ПланыСчетов.бит_Дополнительный_2.Земля);
	ГруппировкаСчетовПервоначальнаяСтоимость.Добавить(ПланыСчетов.бит_Дополнительный_2.Здания);
	ГруппировкаСчетовПервоначальнаяСтоимость.Добавить(ПланыСчетов.бит_Дополнительный_2.ПервоначальнаяСтоимостьЗатрат);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ГруппировкаСчетовПервоначальнаяСтоимость", ГруппировкаСчетовПервоначальнаяСтоимость);
	
	ГруппировкаСчетовНакопленнаяАмортизация = Новый СписокЗначений;
	ГруппировкаСчетовНакопленнаяАмортизация.Добавить(ПланыСчетов.бит_Дополнительный_2.ЗданияНакопленнаяАмортизация);
	ГруппировкаСчетовНакопленнаяАмортизация.Добавить(ПланыСчетов.бит_Дополнительный_2.НакопленнаяАмортизация);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ГруппировкаСчетовНакопленнаяАмортизация", ГруппировкаСчетовНакопленнаяАмортизация);
	
	ГруппировкаСчетовУбытокОтОбесценения = Новый СписокЗначений;
	ГруппировкаСчетовУбытокОтОбесценения.Добавить(ПланыСчетов.бит_Дополнительный_2.ОбесценениеЗемли);
	ГруппировкаСчетовУбытокОтОбесценения.Добавить(ПланыСчетов.бит_Дополнительный_2.ОбесценениеЗданий);
	ГруппировкаСчетовУбытокОтОбесценения.Добавить(ПланыСчетов.бит_Дополнительный_2.НайтиПоКоду("17303"));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ГруппировкаСчетовУбытокОтОбесценения", ГруппировкаСчетовУбытокОтОбесценения);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ДатаОстатков) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ГраницаОстатков", Новый Граница(КонецДня(ПараметрыОтчета.ДатаОстатков)));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ГраницаОстатков", Новый Граница(Дата(3999,12,31,23,59,59)));
	КонецЕсли;  
	
	//вывод данных
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	сзВыводимыхПолей = Новый СписокЗначений;
	сзВыводимыхПолей.Добавить("СистемныеПоля.НомерПоПорядку","№ п/п");
	сзВыводимыхПолей.Добавить("Организация","Организация");
	сзВыводимыхПолей.Добавить("ОсновноеСредство","Основное средство");
	сзВыводимыхПолей.Добавить("Договор","Договор займа");
	сзВыводимыхПолей.Добавить("СуммаПервоначальнаяСтоимость","Первоначальная стоимость");
	сзВыводимыхПолей.Добавить("СуммаНакопленнаяАмортизация","Накопленная амортизация");
	сзВыводимыхПолей.Добавить("СуммаУбытокОтОбесценения","Убыток от обесценения");
	сзВыводимыхПолей.Добавить("ИтогоПоГоризонтали","Итого");
	
	Для каждого стр Из сзВыводимыхПолей цикл	
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;             
		ВыбранноеПоле.Заголовок = стр.Представление;
		ВыбранноеПоле.Поле =Новый ПолеКомпоновкиДанных(стр.Значение);
	КонецЦикла;
	
	// Группировка
	Если ПараметрыОтчета.Группировка.Количество() > 0 Тогда
		БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	КонецЕсли;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
		
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Отключить расшифровки для всех ячеек кроме ДокументОплаты, 
	// также по этой строке установить для всех ячеек расшифровку аналогичную полю ДокументОплаты.
	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
		Если Макет.Параметры.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаМакета Из Макет.Макет Цикл
			Для Каждого ЯчейкаМакета Из СтрокаМакета.Ячейки Цикл
				Если ЯчейкаМакета.Элементы.Количество() > 0 Тогда
					ЭтоПолеДокументОплаты = Ложь;
					ЗначениеПараметра = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ЯчейкаМакета.Оформление.Элементы, "Расшифровка");
					Если ЗначениеПараметра <> Неопределено И ЗначениеПараметра.Использование Тогда
						ПараметрРасшифровки = Макет.Параметры[Строка(ЗначениеПараметра.Значение)];
						Для Каждого ВыражениеПоля Из ПараметрРасшифровки.ВыраженияПолей Цикл
							Если ВыражениеПоля.Выражение = "ОсновнойНабор.ДокументОплаты" Тогда
								ЭтоПолеДокументОплаты = Истина;
								Для Каждого Параметр Из Макет.Параметры Цикл
									Если ТипЗнч(Параметр) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
										Параметр.ВыраженияПолей.Очистить();
										
										НовоеВыражениеПоля = Параметр.ВыраженияПолей.Добавить();
										НовоеВыражениеПоля.Выражение = "ОсновнойНабор.ДокументОплаты";
										НовоеВыражениеПоля.Поле      = "ДокументОплаты";
									КонецЕсли;
								КонецЦикла;
								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ЭтоПолеДокументОплаты Тогда
							ЗначениеПараметра.Использование = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СБ_РасшифровкаАктивыПереданныеВЗалог").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.ДенежныеСредства, "");
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	//НаборПоказателей.Добавить("СуммаУпр");

	Возврат НаборПоказателей;
	
КонецФункции

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление", "СБ_РасшифровкаАктивыПереданныеВЗалог", "Отчет-расшифровка к отчету ""Активы, переданные в залог"""));
	
	Возврат Массив;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#КонецЕсли