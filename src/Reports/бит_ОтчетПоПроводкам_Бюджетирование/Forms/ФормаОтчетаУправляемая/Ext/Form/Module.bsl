#Область ОписаниеПеременных

// Хранит соответствие результатов формирования отчета.
&НаКлиенте
Перем мСоответствиеРезультатов;

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравненияСценария;

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;

// Служит для передачи вида сравнения таблицы корреспонденции между обработчиками.
&НаКлиенте
Перем мТекущийВидСравненияКор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	мСоответствиеРезультатов     = Новый Соответствие;	
	мТекущийВидСравненияСценария = Отчет.СценарийВидСравнения;
			 	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Оповещение из хранилища настроек при сохранении.
	Если ИмяСобытия = ("СохраненаНастройка_" + фКлючОбъекта) Тогда
		
		ОбновитьПанельСохраненныхНастроек(Истина, Ложь, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	фПолноеИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Истина);
	фКлючОбъекта = фПолноеИмяОтчета + "_Построитель";
			
	// Вызов механизма защиты
	
	
	ЗаполнитьКэшЗначений();
	
	фТекстДопЗапроса = бит_БухгалтерскиеОтчетыСервер.СформироватьТекстДопЗапросаДляОтчетаПоПроводкам("бит_Бюджетирование");
	
	// Если это обработка расшифровки 
	Если Параметры.ЭтоОбработкаРасшифровки Тогда
		
        Если Параметры.Свойство("ОтчетМенеджер") Тогда
			бит_БухгалтерскиеОтчетыСервер.ЗаполнитьОтчетПоПроводкамПоПараметрамРасшифровки(Отчет, ЭтаФорма, Параметры.Расшифровка);
		Иначе
			бит_БухгалтерскиеОтчетыСервер.ЗаполнитьОтчетПоПараметрамРасшифровки(Отчет, ЭтаФорма, Параметры.Расшифровка);
		КонецЕсли;	
		
	Иначе
		
		ОбновитьПанельСохраненныхНастроек(, Истина);
	
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью();
	
	// Проверить ТЧ ТаблицаОтбор
	бит_БухгалтерскиеОтчетыСервер.ПроверитьТаблицаОтбор(ЭтаФорма);

	// Оформление таблицы отборов
	бит_МеханизмПолученияДанных.УстановитьОформлениеТаблицыОтбор(УсловноеОформление);
	// Оформление таблицы отборов корреспонденции.
	бит_МеханизмПолученияДанных.УстановитьОформлениеТаблицыОтбор(УсловноеОформление, "ТаблицаОтборКорреспонденции", "ОформлениеТаблицаОтборКор");
	
	// Формирование отчета при открытии, если требуется.
	Если Параметры.СформироватьПриОткрытии = Истина Тогда
		ОбновитьОтчет();
		Параметры.СформироватьПриОткрытии = Ложь;
	КонецЕсли;
	
	бит_БухгалтерскиеОтчетыСервер.ЗаполнитьСписокВыбораВидаСравненияДляСценария(Элементы.СценарийВидСравнения.СписокВыбора);
	
	// Изменение кода. Начало. 07.05.2014{{
	бит_БухгалтерскиеОтчетыСервер.ЗаполнитьСписокВыбораВидаСравненияДляОрганизации(Элементы.ОрганизацияВидСравнения.СписокВыбора);
	// Изменение кода. Конец. 07.05.2014}}

	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	
	// Видимость панели сохраненных настроек
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка 	 = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
		
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ДекорацияСохраненнойНастройкиНажатие(Элемент)
	
	// Сохраним результат
	Если ЗначениеЗаполнено(фИмяЭлемента_ВыбраннаяНастройка) 
		И фСтруктураСохраненныхНастроек.Свойство(фИмяЭлемента_ВыбраннаяНастройка) Тогда
		СтруктураСохр = Новый Структура("Результат, ДанныеРасшифровки", Результат, ДанныеРасшифровки);
		КлючНастройки = фСтруктураСохраненныхНастроек[фИмяЭлемента_ВыбраннаяНастройка].КлючНастройки;
		мСоответствиеРезультатов.Вставить(КлючНастройки, СтруктураСохр);
	КонецЕсли;
	
	// Обновление пользовательских настроек
	ИмяЭлемента = Элемент.Имя;
	НастройкиОбновлены = ОбновитьНастройки(ИмяЭлемента, мСоответствиеРезультатов);
	Если Не НастройкиОбновлены Тогда
		ТекстСообщения = Нстр("ru = 'Настройка не найдена. Обновите панель сохраненных настроек.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 	
	КонецЕсли;
	
	бит_ОтчетыКлиент.ОбработатьНажатиеНаПолеСохраненнойНастройки(Элементы, 
																Элемент, 
																фИмяЭлемента_ВыбраннаяНастройка);
																	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.Период.ДатаНачала, 
																				Отчет.Период.ДатаОкончания);
																				
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");	
	
КонецПроцедуры // ПериодДатаНачалаПриИзменении()

&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.Период.ДатаНачала, 
																				 Отчет.Период.ДатаОкончания);
																				 
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // ПериодДатаОкончанияПриИзменении()

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	Отчет.СценарийИспользование = Истина;
	УстановитьОтборПоСценарию(мТекущийВидСравненияСценария);
	
КонецПроцедуры // СценарийПриИзменении()

&НаКлиенте
Процедура СценарийИспользованиеПриИзменении(Элемент)
	
	УстановитьОтборПоСценарию(мТекущийВидСравненияСценария);
	
КонецПроцедуры // СценарийИспользованиеПриИзменении()

&НаКлиенте
Процедура СценарийВидСравненияПриИзменении(Элемент)
	
	Отчет.СценарийИспользование = Истина;
	УстановитьОтборПоСценарию(мТекущийВидСравненияСценария);
	
	мТекущийВидСравненияСценария = Отчет.СценарийВидСравнения;
	
КонецПроцедуры // СценарийВидСравненияПриИзменении()

&НаКлиенте
Процедура ОрганизацияИспользованиеПриИзменении(Элемент)
	
	УстановитьОтборПоОрганизации();
	
КонецПроцедуры // ОрганизацияИспользованиеПриИзменении()

&НаКлиенте
Процедура ОрганизацияВидСравненияПриИзменении(Элемент)
	
	Отчет.ОрганизацияИспользование = Истина;
	УстановитьОтборПоОрганизации();
	
КонецПроцедуры // ОрганизацияВидСравненияПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Отчет.ОрганизацияИспользование = Истина;
	УстановитьОтборПоОрганизации();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Отчет.ОтборПоВалюте = ЗначениеЗаполнено(Отчет.Валюта);
	
КонецПроцедуры // ВалютаПриИзменении()

&НаКлиенте
Процедура НомерЖурналаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПолучитьСписокНомеровЖурналаСервер();
	
КонецПроцедуры // НомерЖурналаНачалоВыбора()

&НаКлиенте
Процедура НомерЖурналаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ПолучитьСписокНомеровЖурналаСервер();
	
КонецПроцедуры // НомерЖурналаАвтоПодбор()

&НаКлиенте
Процедура НомерЖурналаПриИзменении(Элемент)
	
	Отчет.ПоНомеруЖурнала = ЗначениеЗаполнено(Отчет.НомерЖурнала);
	
КонецПроцедуры // НомерЖурналаПриИзменении()

&НаКлиенте
Процедура РегистраторПриИзменении(Элемент)
	
	Отчет.ПоРегистратору = ЗначениеЗаполнено(Отчет.Регистратор);
	
КонецПроцедуры // РегистраторПриИзменении()

// Процедура - обработчик события "ПриИзменении" полей воода - простых параметров на форме.
// 
&НаКлиенте
Процедура ПростойПараметрПриИзменении(Элемент)
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
															
КонецПроцедуры // ПростойПараметрПриИзменении()

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	СуммаОтчета = бит_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Результат);
	
КонецПроцедуры // РезультатПриАктивизацииОбласти()

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	бит_БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиПоРегистратору(Расшифровка, "бит_Бюджетирование");										
	
КонецПроцедуры // РезультатОбработкаРасшифровки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОтбор

&НаКлиенте
Процедура ТаблицаОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Имя = "Сценарий" Тогда
			Отказ = Истина;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборПередНачаломДобавления()

&НаКлиенте
Процедура ТаблицаОтборПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Имя = "Сценарий" Тогда
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборПередУдалением()

&НаКлиенте
Процедура ТаблицаОтборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И Не Копирование Тогда

		ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;		

		Если Копирование Тогда
			ТекущиеДанные.ПутьКДанным   = "";
			ТекущиеДанные.Представление = "";
		Иначе
			ТекущиеДанные.Использование  = Истина;  
			ТекущиеДанные.ВидСравнения   = фКэшЗначений.ВидСравненияРавно; 
		КонецЕсли; 	

		// СтрПар = Новый Структура("ТекстЗапроса", фТекстДопЗапроса);
		// бит_мпд_Клиент.ОткрытьФормуПолейПостроителя(ТекущиеДанные, "ТаблицаОтбор", "ПутьКДанным", "Отбор", "", СтрПар);
 		
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаОтборПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Имя = "Сценарий" Тогда
		Отчет.Сценарий     		    = ТекущиеДанные.Значение;	
		Отчет.СценарийВидСравнения  = ТекущиеДанные.ВидСравнения;
		Отчет.СценарийИспользование = ТекущиеДанные.Использование;	
	КонецЕсли;
	
	// Изменение кода. Начало. 07.05.2014{{
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Имя = "Организация" Тогда
		Отчет.Организация     		    = ТекущиеДанные.Значение;	
		Отчет.ОрганизацияВидСравнения   = ТекущиеДанные.ВидСравнения;
		Отчет.ОрганизацияИспользование  = ТекущиеДанные.Использование;	
	КонецЕсли;
    // Изменение кода. Конец. 07.05.2014}}

КонецПроцедуры // ТаблицаОтборПриОкончанииРедактирования()

&НаКлиенте
Процедура ТаблицаОтборПослеУдаления(Элемент)
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // ТаблицаОтборПослеУдаления()

&НаКлиенте
Процедура ТаблицаОтборПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	
	СтрПар = Новый Структура("ТекстЗапроса", фТекстДопЗапроса);
	бит_мпд_Клиент.ОткрытьФормуПолейПостроителя(ТекущиеДанные, "ТаблицаОтбор", "ПутьКДанным", "Отбор", "", СтрПар, Элемент);
	
КонецПроцедуры // ТаблицаОтборПредставлениеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор(), "ТаблицаОтбор");
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидов.ВыгрузитьЗначения());
		
КонецПроцедуры // ТаблицаОтборВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор(), "ТаблицаОтбор");
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидов.ВыгрузитьЗначения());
	
КонецПроцедуры // ТаблицаОтборВидСравненияАвтоПодбор()

&НаКлиенте
Процедура ТаблицаОтборВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	ИзменениеВидаСравненияСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения, "ТаблицаОтбор");
	
КонецПроцедуры // ТаблицаОтборВидСравненияПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;	
	бит_мпд_Клиент.ТаблицаОтборЗначениеНачалоВыбора(ЭтаФорма
												, ТекущиеДанные
												, Элемент
												, ДанныеВыбора
												, СтандартнаяОбработка);
                                               	
КонецПроцедуры // ТаблицаОтборЗначениеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		ТекущиеДанные.Использование = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборЗначениеПриИзменении()

// Процедура - обработчик события "ПриИзменении" 
// полей ввода "ТаблицаОтборЗначениеС" и "ТаблицаОтборЗначениеПо".
// 
&НаКлиенте
Процедура ТаблицаОтборИнтервалЗначенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗначениеС) И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеПо) Тогда
		ТекущиеДанные.Использование = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборЗначениеПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтбор.ТекущиеДанные;	
	бит_мпд_Клиент.ТаблицаОтборЗначениеОчистка(ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТаблицаОтборЗначениеОчистка()

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыКорреспонденции

&НаКлиенте
Процедура КорреспонденцииПриАктивизацииСтроки(Элемент)
	
	ОтключитьОбработчикОжидания("ОжиданиеАктивизацииСтрокиКорреспонденции");
	ПодключитьОбработчикОжидания("ОжиданиеАктивизацииСтрокиКорреспонденции", 0.1, Истина);
					
КонецПроцедуры // КорреспонденцииПриАктивизацииСтроки() 

&НаКлиенте
Процедура КорреспонденцииПослеУдаления(Элемент)
	
	Если Корреспонденции.Количество() = 0 Тогда 		
		ТаблицаОтборКорреспонденции.Очистить();		
	КонецЕсли;
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // КорреспонденцииПослеУдаления()
         
&НаКлиенте
Процедура КорреспонденцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // КорреспонденцииПриОкончанииРедактирования()

// ASubbotina Процедура - обработчик изменения полей "СчетДт" и "СчетКт" таблицы "Корреспонденции".
// 
&НаКлиенте
Процедура КорреспонденцииСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Корреспонденции.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетДт) Тогда
		
		ЗаполнитьТаблицуОтборовПоСчетамСтрокиКорреспонденции(ТекущиеДанные.ПолучитьИдентификатор());	
		
	Иначе
		
		ДтКт = Прав(Элемент.Имя, 2);
		бит_БухгалтерскиеОтчетыКлиент.ОчиститьТаблицуСубконтоПоСчету(ТекущиеДанные.Субконто, ДтКт);
		ОчиститьТаблицуОтборовПоИдСтрокиКорреспонденции(ТекущиеДанные.ПолучитьИдентификатор(), ДтКт);
		
	КонецЕсли;
	 	
КонецПроцедуры // КорреспонденцииСчетПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОтборКорреспонденции

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.Корреспонденции.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'Не найдена строка корреспонденции. Невозможно добавить отбор.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииПередНачаломДобавления()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанныеКорреспонденции = Элементы.Корреспонденции.ТекущиеДанные;
		Если ТекущиеДанныеКорреспонденции = Неопределено Тогда
			Возврат;		
		КонецЕсли;

		ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;		
		ТекущиеДанные.ИдСтрокиКорреспонденции = ТекущиеДанныеКорреспонденции.ПолучитьИдентификатор();

		Если Копирование Тогда
			ТекущиеДанные.ПутьКДанным   = "";
			ТекущиеДанные.Представление = "";
		Иначе
			ТекущиеДанные.Использование = Истина;  
			ТекущиеДанные.ВидСравнения  = фКэшЗначений.ВидСравненияРавно; 
		КонецЕсли; 	

		НачалоВыбораПредставленияСубконтоКорреспонденции(ТекущиеДанные, Элемент);
		
	КонецЕсли; 
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СинхронизироватьТаблицуСубконтоКорреспонденцииПоТаблицеОтборов();
				
КонецПроцедуры // ТаблицаОтборКорреспонденцииПриОкончанииРедактирования()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииПослеУдаления(Элемент)
	
	СинхронизироватьТаблицуСубконтоКорреспонденцииПоТаблицеОтборов();
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииПослеУдаления()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;
	
	НачалоВыбораПредставленияСубконтоКорреспонденции(ТекущиеДанные, Элемент);
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииПредставлениеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;
	мТекущийВидСравненияКор = ТекущиеДанные.ВидСравнения;
	
	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор(), "ТаблицаОтборКорреспонденции");
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидов.ВыгрузитьЗначения());
		
КонецПроцедуры // ТаблицаОтборКорреспонденцииВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;
	мТекущийВидСравненияКор = ТекущиеДанные.ВидСравнения;
	
	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор(), "ТаблицаОтборКорреспонденции");
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидов.ВыгрузитьЗначения());
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииВидСравненияАвтоПодбор()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;
	ИзменениеВидаСравненияСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравненияКор, "ТаблицаОтборКорреспонденции");
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииВидСравненияПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;	
	бит_мпд_Клиент.ТаблицаОтборЗначениеНачалоВыбора(ЭтаФорма
												, ТекущиеДанные
												, Элемент
												, ДанныеВыбора
												, СтандартнаяОбработка);
                                               	
КонецПроцедуры // ТаблицаОтборКорреспонденцииЗначениеНачалоВыбора()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		ТекущиеДанные.Использование = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииЗначениеПриИзменении()

// Процедура - обработчик события "ПриИзменении" 
// полей ввода "ТаблицаОтборКорреспонденцииЗначениеС" и "ТаблицаОтборКорреспонденцииЗначениеПо".
// 
&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииИнтервалЗначенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗначениеС) И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеПо) Тогда
		ТекущиеДанные.Использование = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииЗначениеПриИзменении()

&НаКлиенте
Процедура ТаблицаОтборКорреспонденцииЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОтборКорреспонденции.ТекущиеДанные;	
	бит_мпд_Клиент.ТаблицаОтборЗначениеОчистка(ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТаблицаОтборКорреспонденцииЗначениеОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	ОбновитьОтчет();
	
КонецПроцедуры // КомандаСформировать()

&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();
		
КонецПроцедуры // КомандаПанельНастроек()

&НаКлиенте
Процедура КомандаПанельСохраненныхНастроек(Команда)
	
	фСкрытьПанельСохраненныхНастроек = Не фСкрытьПанельСохраненныхНастроек;
	
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка   = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
КонецПроцедуры // КомандаПанельСохраненныхНастроек()

&НаКлиенте
Процедура КомандаОбновитьПанельСохраненныхНастроек(Команда)
	
	ОбновитьПанельСохраненныхНастроек(Истина);	
	
КонецПроцедуры // КомандаОбновитьПанельСохраненныхНастроек()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Отчет);
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура КомандаУстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиСервер();
		
КонецПроцедуры // КомандаУстановитьСтандартныеНастройки()
     
&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()

&НаКлиенте
Процедура ОтборУстановитьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтбор, "Использование", 1);
	
КонецПроцедуры // ОтборУстановитьВсе()

&НаКлиенте
Процедура ОтборСнятьВсе(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтбор, "Использование", 0);
	
КонецПроцедуры // ОтборСнятьВсе()

&НаКлиенте
Процедура ОтборИнвертировать(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтбор, "Использование", 2);
	
КонецПроцедуры // ОтборИнвертировать()

&НаКлиенте
Процедура ОтборУстановитьВсеКор(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтборКорреспонденции, "Использование", 1);
	
КонецПроцедуры // ОтборУстановитьВсеКор()

&НаКлиенте
Процедура ОтборСнятьВсеКор(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтборКорреспонденции, "Использование", 0);
	
КонецПроцедуры // ОтборСнятьВсеКор()

&НаКлиенте
Процедура ОтборИнвертироватьКор(Команда)
	
	бит_ОбщегоНазначенияКлиентСервер.ОбработатьФлаги(ТаблицаОтборКорреспонденции, "Использование", 2);
	
КонецПроцедуры // ОтборИнвертироватьКор()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обработчик-ожидания активизации строки таблицы корреспонденции.
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура ОжиданиеАктивизацииСтрокиКорреспонденции()
	
	ТекущиеДанные = Элементы.Корреспонденции.ТекущиеДанные;
	
	Ид = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьИдентификатор());
	Элементы.ТаблицаОтборКорреспонденции.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдСтрокиКорреспонденции", Ид);
	
	// ЗаполнитьМассивыСубконто(Ид);
	
КонецПроцедуры // ОжиданиеАктивизацииСтрокиКорреспонденции()

// Процедура синхронизирует данные таблицы корреспонденции с таблицей отборов.
// 
// Параметры:
//  ИдКор    - Число
// 
&НаКлиенте
Процедура СинхронизироватьТаблицуСубконтоКорреспонденцииПоТаблицеОтборов()

	ТекДанКорреспонденции = Элементы.Корреспонденции.ТекущиеДанные;
	Если ТекДанКорреспонденции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Ид = ТекДанКорреспонденции.ПолучитьИдентификатор();
		
	ТекДанКорреспонденции.Субконто.Очистить();
	
	МассивПроверкиДобавленных = Новый Массив;
	
	НайденныеСтроки = ТаблицаОтборКорреспонденции.НайтиСтроки(Новый Структура("ИдСтрокиКорреспонденции", Ид));
	Для каждого СтрокаОтбора Из НайденныеСтроки Цикл
		Если СтрокаОтбора.Использование И ЗначениеЗаполнено(СтрокаОтбора.ПутьКДанным) Тогда
			НоваяСтрокаСубконто = ТекДанКорреспонденции.Субконто.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСубконто, СтрокаОтбора);		
		КонецЕсли;
	КонецЦикла;
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // СинхронизироватьТаблицуСубконтоКорреспонденцииПоТаблицеОтборов()

// Процедура производит выбор представления субконто счетов корреспонденции в таблице отборов.
// 
// Параметры:
//  ЭтаФорма      - УправляемаяФорма.
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции.
// 
&НаКлиенте
Процедура НачалоВыбораПредставленияСубконтоКорреспонденции(ТекущиеДанные, Элемент) Экспорт
	
	ТекущиеДанныеКорреспонденции = Элементы.Корреспонденции.ТекущиеДанные;
	Если ТекущиеДанныеКорреспонденции = Неопределено Тогда
		Возврат;	
	КонецЕсли;  	
	
	ДтКт = Лев(Элементы.ТаблицаОтборКорреспонденции.ТекущийЭлемент.ТекстРедактирования, 2);
	Если ДтКт = "" Тогда
		
		СписокДтКт = Новый СписокЗначений;
		СписокДтКт.Добавить("Дт");
		СписокДтКт.Добавить("Кт");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		ДопПараметры.Вставить("Элемент", Элемент);
		ОбработчикВыбораИзСпискаДтКт = Новый ОписаниеОповещения("ВыборИзСпискаДтКтЗавершение", ЭтотОбъект, ДопПараметры); 
		ПоказатьВыборИзСписка(ОбработчикВыбораИзСпискаДтКт, СписокДтКт, Элемент);
				
	Иначе
	
		ВыбратьПолеДтКт(ТекущиеДанныеКорреспонденции, ТекущиеДанные, Элемент, ДтКт);
		
	КонецЕсли;

КонецПроцедуры // НачалоВыбораПредставленияСубконтоКорреспонденции()

// Процедура производит выбор поля ДтКт
// 
&НаКлиенте
Процедура ВыбратьПолеДтКт(ТекущиеДанныеКорреспонденции, ТекущиеДанные, Элемент, ДтКт)
	
		ЗаполнитьПараметрыПоСтрокеКорреспонденции(ТекущиеДанныеКорреспонденции["Счет"+ ДтКт], ДтКт);
		СтрПар = Новый Структура("ТекстЗапроса, МассивСубконто, ДтКт", фТекстЗапроса, фКэшЗначений.МассивСубконто, ДтКт);
		бит_мпд_Клиент.ОткрытьФормуПолейПостроителя(ТекущиеДанные
													, "ТаблицаОтборКорреспонденции"
													, "ПутьКДанным"
													, "Отбор"
													, ""
													, СтрПар
													, Элемент);

КонецПроцедуры // ВыбратьПолеДтКт()

// Процедура - завершщение выбора поля ДтКт
// 
&НаКлиенте
Процедура ВыборИзСпискаДтКтЗавершение(ЭлементДтКт, ДопПараметры) Экспорт
	
	Если ЭлементДтКт <> Неопределено Тогда
		
		ДтКт = ЭлементДтКт.Значение;
		
		ВыбратьПолеДтКт(Элементы.Корреспонденции.ТекущиеДанные, ДопПараметры.ТекущиеДанные, ДопПараметры.Элемент, ДтКт);
		
	КонецЕсли;    	

КонецПроцедуры // ВыборИзСпискаДтКтЗавершение()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	ИмяТипаОбъекта = СтрЗаменить(фПолноеИмяОтчета, "Отчет.", "ОтчетОбъект.");
	фКэшЗначений.Вставить("ИмяТипаОбъекта", ИмяТипаОбъекта);
	
	ОтчетОб = ДанныеФормыВЗначение(Отчет, Тип(ИмяТипаОбъекта));
	МетаданныеОбъекта = ОтчетОб.Метаданные();
	
	бит_БухгалтерскиеОтчетыСервер.ЗаполнитьПризнакиПоТипуОтчета(фКэшЗначений, ЭтаФорма, МетаданныеОбъекта);
	бит_БухгалтерскиеОтчетыСервер.ЗаполнитьПризнакиПоМетаданным(фКэшЗначений, МетаданныеОбъекта);
	бит_БухгалтерскиеОтчетыСервер.ЗаполнитьПризнакиПоДаннымФормы(фКэшЗначений, ЭтаФорма);
		                    		
	фКэшЗначений.Вставить("ТипНастройки"	   , Перечисления.бит_ТипыСохраненныхНастроек.Отчеты);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", фПолноеИмяОтчета + "_Построитель");
	
	фКэшЗначений.Вставить("ВидСравненияРавно", ВидСравнения.Равно);
		
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью и доступностью элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	// Установка видимости и доступности элементов формы в зависимости от типа отчета 
	// - обычный или расшифровка. 
	бит_ОтчетыСервер.УстановитьВидимостьДоступностьЭлементов(Элементы 
															, Параметры.КлючВарианта 
															, Параметры.ПредставлениеВарианта
															, Ложь);
															
	// Изменение кода. Начало. 07.05.2014{{
	Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
		Элементы.ГруппаОрганизация.Видимость = Истина;
	Иначе
		Элементы.ГруппаОрганизация.Видимость = Ложь;
	КонецЕсли;
	// Изменение кода. Конец. 07.05.2014}}
	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Функция обновляет настройки отчета.
// 
// Параметры:
//  ИмяЭлемента  		 	  - Строка.
//  СоответствиеРезультатов   - Соответствие.
//  ТекущийРегистрБухгалтерии - РегистрБухгалтерииСсылка.* (По умолчанию = Неопределено).
// 
// ВозращаемоеЗначение:
//  Булево - настройки обновлены.
// 
&НаСервере
Функция ОбновитьНастройки(ИмяЭлемента, СоответствиеРезультатов, ТекущийРегистрБухгалтерии = Неопределено)

	НастройкиОбновлены = бит_БухгалтерскиеОтчетыСервер.ОбновитьНастройки(Отчет
																		, ЭтаФорма
																		, ИмяЭлемента
																		, СоответствиеРезультатов
																		, ТекущийРегистрБухгалтерии);
	
																		
	мТекущийВидСравненияСценария = Отчет.СценарийВидСравнения;
	
	Возврат НастройкиОбновлены;

КонецФункции // ОбновитьНастройки()

// Процедура обновляет панель сохраненных настроек.
// 
// Параметры:
//  Очищать  		 		  - Булево (По умолчанию = Ложь).
//  ОчищатьНастройки 		  - Булево (По умолчанию = Ложь).
//  ТекКлючНастройки 		  - Строка (По умолчанию = Неопределено).
//  ТекущийРегистрБухгалтерии - РегистрБухгалтерииСсылка.* (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ОбновитьПанельСохраненныхНастроек(ОчищатьПанельНастроек = Ложь, ОчищатьНастройки = Ложь
											, ТекКлючНастройки = Неопределено, ТекущийРегистрБухгалтерии = Неопределено)

	бит_БухгалтерскиеОтчетыСервер.ОбновитьПанельСохраненныхНастроекОтчета(Отчет
											, ЭтаФорма
											, ОчищатьПанельНастроек
											, ОчищатьНастройки
											, ТекКлючНастройки
											, ТекущийРегистрБухгалтерии);
		
КонецПроцедуры // ОбновитьПанельСохраненныхНастроек()

// Процедура устанавливает стандартные настройки варианта 
// и обновляет по ним элементы формы.
// Заменяет типовую команду "СтандартныеНастройки".
// 
&НаСервере
Процедура УстановитьСтандартныеНастройкиСервер()
	
	бит_БухгалтерскиеОтчетыСервер.УстановитьЗначенияНастроекОтчетовПоУмолчанию(Отчет, ЭтаФорма, фКэшЗначений.ИмяТипаОбъекта);
		
	бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, фСтруктураСохраненныхНастроек, фИмяЭлемента_ВыбраннаяНастройка);
														
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // УстановитьСтандартныеНастройкиСервер()          

// Обновляет результат отчета.
// 
// Параметры:
// 	Нет
// 
&НаСервере
Процедура ОбновитьОтчет() Экспорт

	СтрРегистрация = Новый Структура;
    бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);

	ОтчетОб = ДанныеФормыВЗначение(Отчет, Тип(фКэшЗначений.ИмяТипаОбъекта));
	бит_БухгалтерскиеОтчетыСервер.СинхронизироватьДанныеОтчета(Отчет, ОтчетОб, ЭтаФорма);
		
	// Формирование результата	
	ОтчетСформирован = ОтчетОб.СформироватьОтчет(Результат, фПоказыватьЗаголовок, фВысотаЗаголовка);
	ЗначениеВДанныеФормы(ОтчетОб, Отчет);
	
	Если ОтчетСформирован Тогда
		бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат);
	КонецЕсли;
	
	Если фСкрыватьНастройкиПриФормированииОтчета Тогда
		ОбработкаКомандыПанелиНастроекСервер(Истина);	
	КонецЕсли;
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);

КонецПроцедуры // ОбновитьОтчет()


// Устанавливает отбор по сценарию в таблицу отборов.
// 
// Параметры:
// 	Нет
// 
&НаСервере
Процедура УстановитьОтборПоСценарию(СтарыйВидСравненияСценария)
	
	бит_БухгалтерскиеОтчетыСервер.УстановитьОтборПоСценарию(Отчет, ЭтаФорма, СтарыйВидСравненияСценария);
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.Результат, "НеАктуальностьОтчета");
		
КонецПроцедуры // УстановитьОтборПоСценарию()

// Устанавливает отбор по организации в таблицу отборов.
// 
// Параметры:
// 	Нет
// 
&НаСервере
Процедура УстановитьОтборПоОрганизации()
	
	бит_БухгалтерскиеОтчетыСервер.УстановитьОтборПоОрганизации(Отчет, ЭтаФорма);
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.Результат, "НеАктуальностьОтчета");
		
КонецПроцедуры // УстановитьОтборПоОрганизации()

// Функция возвращает список доступных видов сравнения в зависимости от типа значения в строке.
// 
// Параметры:
//  ИдСтроки   - Число.
//  ИмяТаблицы - Строка.
// 
&НаСервере
Функция СформироватьСписокВыбораВидаСравнения(ИдСтроки, ИмяТаблицы)
	
	ТекущиеДанные = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(ИдСтроки);
	СписокВидов = бит_МеханизмПолученияДанных.СписокВыбораВидаСравнения(ТекущиеДанные);
	
    Возврат СписокВидов;
	
КонецФункции // СформироватьСписокВыбораВидаСравнения()

// Процедура обрабатывает изменение вида сравнения.
// 
// Параметры:
//  ИдСтроки         - Строка.
//  ПредВидСравнения - ВидСравнения.
//  ИмяТаблицы		 - Строка.
// 
&НаСервере
Процедура ИзменениеВидаСравненияСервер(ИдСтроки, ПредВидСравнения, ИмяТаблицы)
	
	ТекущиеДанные = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(ИдСтроки); 	
	бит_МеханизмПолученияДанных.ИзменениеВидаСравнения(ТекущиеДанные, ПредВидСравнения);
		
КонецПроцедуры // ИзменениеВидаСравненияСервер()

// Процедура заполняет таблицу отборов по счетам в строке корреспонденции.
// 
// Параметры:
//  Ид - Число.
// 
&НаСервере
Процедура ЗаполнитьТаблицуОтборовПоСчетамСтрокиКорреспонденции(Ид)

	фИмяРегистраБухгалтерии = "бит_Бюджетирование";	
	бит_БухгалтерскиеОтчетыСервер.ЗаполнитьТаблицуОтборовПоСчетамСтрокиКорреспонденции(Отчет, ЭтаФорма, Ид);
	
КонецПроцедуры // ЗаполнитьТаблицуОтборовПоСчетамСтрокиКорреспонденции()

// Процедура очищает таблицу отборов по ид строки корреспонденции.
// 
// Параметры:
//  ЭтаФорма - УправляемаяФорма.
//  Ид  	 - Число.
//  ДтКт     - Строка (по умолчанию = Неопределено).
// 
&НаСервере
Процедура ОчиститьТаблицуОтборовПоИдСтрокиКорреспонденции(Ид, ДтКт = Неопределено) Экспорт

	бит_БухгалтерскиеОтчетыСервер.ОчиститьТаблицуОтборовПоИдСтрокиКорреспонденции(ЭтаФОрма, Ид, ДтКт);	

КонецПроцедуры // ОчиститьТаблицуОтборовПоИдСтрокиКорреспонденции()

// Функция создает структуру параметров по счету.
// 
// Параметры:
//  СчетДт  - ПланСчетовСсылка.*
//  СчетКт  - ПланСчетовСсылка.*
//  
// Возвращаемое значение:
//   Структура.
// 
&НаСервере
Процедура ЗаполнитьПараметрыПоСтрокеКорреспонденции(СчетДт, СчетКт)

	фИмяРегистраБухгалтерии = "бит_Бюджетирование";
	бит_БухгалтерскиеОтчетыСервер.ЗаполнитьПараметрыПоСтрокеКорреспонденции(ЭтаФорма, СчетДт, СчетКт);
	
КонецПроцедуры // ЗаполнитьПараметрыПоСтрокеКорреспонденции()

// Процедура получает список существующих номеров журналов.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ПолучитьСписокНомеровЖурналаСервер()
	
	бит_БухгалтерскиеОтчетыСервер.ПолучитьСписокНомеровЖурнала(Элементы.НомерЖурнала);
	
КонецПроцедуры // ПолучитьСписокНомеровЖурналаСервер()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С НАСТРОЙКАМИ.

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.УпаковатьНастройкиОтчетаВСтруктуру(Отчет, ЭтаФорма);
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  			  - СправочникСсылка.бит_СохраненныеНастройки.
//  ТекущийРегистрБухгалтерии - РегистрыБухгалтерииСсылка.*.
//  ВыделитьТекущуюНастройку  - Булево (По умолчанию = Ложь).
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка, ТекущийРегистрБухгалтерии = Неопределено, ВыделитьТекущуюНастройку = Ложь)
		
	бит_БухгалтерскиеОтчетыСервер.ПрименитьНастройкиОтчета(Отчет, ЭтаФорма, ВыбНастройка, ТекущийРегистрБухгалтерии);
	
	Если ВыделитьТекущуюНастройку Тогда 		
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															,
															ВыбНастройка.КлючНастройки);
	КонецЕсли;
		
КонецПроцедуры // ПрименитьНастройки()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",
											ПараметрыФормы,
											ЭтаФорма);	
													
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура - завершение обработчика события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(Настройка, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Настройка) Тогда		
		ПрименитьНастройки(Настройка, , Истина);		
	КонецЕсли;
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()

#КонецОбласти

