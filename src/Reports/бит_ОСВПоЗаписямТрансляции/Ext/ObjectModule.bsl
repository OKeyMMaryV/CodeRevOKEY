#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

    //----------------------------------------------------------------------
	// Изменение текста запроса.	
	СформироватьЗапрос();
    
    //----------------------------------------------------------------------
	// Параметры.	
	СписокПараметровНаФорме     = Новый СписокЗначений;
	СписокДополнительныхСвойств = Новый СписокЗначений;
	ИмяОтчета = ЭтотОбъект.Метаданные().Имя; 
	Отчеты[ИмяОтчета].ЗаполнитьДополнительныеСписки(СписокПараметровНаФорме, СписокДополнительныхСвойств); 	
	Для каждого ЭлементСписка Из СписокПараметровНаФорме Цикл  		
		ИмяПараметра = ЭлементСписка.Значение; 		
		бит_ОтчетыСервер.УстановитьЗначениеПараметраКомпоновщика(КомпоновщикНастроек, 
																 ЭтотОбъект[ИмяПараметра], 
																 ИмяПараметра);		
	КонецЦикла; 
	
	// Установка периода приемника.
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ПериодПриемника.ДатаНачала) 
		 И НЕ ЗначениеЗаполнено(ЭтотОбъект.ПериодПриемника.ДатаОкончания) Тогда
		
		бит_ОтчетыСервер.УстановитьЗначениеПараметраКомпоновщика(КомпоновщикНастроек, 
																 ЭтотОбъект.Период, 
																 "ПериодПриемника");		
		
	Иначе	
		
		
		бит_ОтчетыСервер.УстановитьЗначениеПараметраКомпоновщика(КомпоновщикНастроек, 
																 ЭтотОбъект.ПериодПриемника, 
																 "ПериодПриемника");		
		
		
		
	КонецЕсли; 
		
	// Определим название для группировки в которой отображаются обороты по регистру бухгалтерии.
	ПараметрыСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	
	// Периодичность может быть Период или Регистратор. Если в группировках отсутствует группировка по регистратору, то
	// периодичность выставляем Период, т.к. иначе в остатках выводятся некорректные данные.
	// Периодичность = ПолучитьПериодичностьВыводаДанных();
	
	Если ЕстьГруппировкаПоРегистратору() Тогда
		
		МассивПолей = Новый Массив;
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных("ОборотыРегл.СуммаРеглОборотДт"));
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных("ОборотыРегл.СуммаРеглОборотКт"));
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных("ОборотыУпр.СуммаУпрОборотДт"));
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных("ОборотыУпр.СуммаУпрОборотКт"));
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных("ОборотыМу.СуммаМуОборотДт"));
		МассивПолей.Добавить(Новый ПолеКомпоновкиДанных("ОборотыМу.СуммаМуОборотКт"));
		
		ИДВыбранныхПолей = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(КомпоновщикНастроек.Настройки.Выбор);
		
		ВыбранныеПоля = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИДВыбранныхПолей);
		
		ОбработатьВыбранныеПоля(ВыбранныеПоля.Элементы, МассивПолей);
		
	КонецЕсли;
	
	ПараметрыСКД.УстановитьЗначениеПараметра("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организация));
	ПараметрыСКД.УстановитьЗначениеПараметра("РегистрИсточник"	 , ПравилаЗаполненияПолей.Источник);
	ПараметрыСКД.УстановитьЗначениеПараметра("РегистрПриемник"	 , ПравилаЗаполненияПолей.Приемник);
	
КонецПроцедуры // ПриКомпоновкеРезультата()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
    
    // Текст запроса отличается в БП и SA.
	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ПравилаЗаполненияПолей", ПравилаЗаполненияПолей);
    Запрос.УстановитьПараметр("ВидОбъекта"            , Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	ПравилаЗаполнения.Ссылка КАК Ссылка,
    |	ОбъектыСистемы.ВидОбъекта
    |	
    |ИЗ
    |	Справочник.бит_ПравилаЗаполненияПолейПриТрансляции КАК ПравилаЗаполнения
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бит_ОбъектыСистемы КАК ОбъектыСистемы
    |		ПО (ПравилаЗаполнения.Источник = ОбъектыСистемы.Ссылка
    |				ИЛИ ПравилаЗаполнения.Приемник = ОбъектыСистемы.Ссылка)
    |   ГДЕ
    |   ПравилаЗаполнения.Ссылка = &ПравилаЗаполненияПолей
    |   И ОбъектыСистемы.ВидОбъекта <> &ВидОбъекта
    |";
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда    	
    	ТекстСообщения = НСтр("ru='Указано не корректное правило заполнения полей. "
    						+ "В отчете следует указать правило, в котором в качестве источника и приемника используется регистр бухгалтерии.'");
        бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения, , "ПравилаЗаполненияПолей", Отказ);
    КонецЕсли;
    	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьГруппировкаПоРегистратору()
	
	ЕстьГруппировка = Ложь; 
	
	СтруктураВывода = КомпоновщикНастроек.Настройки.Структура;
	
	ПолеРегистратор = Новый ПолеКомпоновкиДанных("Регистратор");
	
	Для Каждого ТекЭлемент Из СтруктураВывода Цикл
		
		ПоляГруппировки = ТекЭлемент.ПоляГруппировки.Элементы;		
		Для Каждого ТекПоле Из ПоляГруппировки Цикл
			
			Если ТекПоле.Поле = ПолеРегистратор Тогда
				ЕстьГруппировка = Истина;				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
	Возврат ЕстьГруппировка;
	
КонецФункции // ЕстьГруппировкаПоРегистратору ()

Процедура ОбработатьВыбранныеПоля(ВыбранныеПоля, МассивПолей)
	
	Для Каждого ТекПоле Из ВыбранныеПоля Цикл
		
		Если ТипЗнч(ТекПоле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			
			ОбработатьВыбранныеПоля(ТекПоле.Элементы, МассивПолей);
			
		Иначе
			
			НайденноеПоле = МассивПолей.Найти(ТекПоле.Поле);
			
			Если НайденноеПоле = Неопределено Тогда
				ТекПоле.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ФормированиеТекстаЗапроса

Функция СформироватьТекстЗапросаПоРегистру(МетаРегистра, ИмяРегистра, ЭтоИсточник)
	
	КолвоСубконтоРегистра = МетаРегистра.ПланСчетов.МаксКоличествоСубконто;	
		
	ТекстВыборСубконтоОстатки = "";
	ТекстВыборСубконтоОбороты = "";
    ТекстВыборРесурсыОстатки  = "";
    ТекстВыборРесурсыОбороты  = "";
    ТекстГруппировкаОбороты   = "";
    
    ОкончаниеПеренос = ",
    |";
		
	Для Ном = 1 по 4 Цикл
        
        Окончание = ?(Ном = 4, "", ОкончаниеПеренос);
        
		Если Ном > КолвоСубконтоРегистра Тогда
			ТекстВыборСубконтоОстатки = ТекстВыборСубконтоОстатки + 
			"	НЕОПРЕДЕЛЕНО КАК Субконто" + Ном + Окончание;
            ТекстВыборСубконтоОбороты = ТекстВыборСубконтоОбороты + 
			"	НЕОПРЕДЕЛЕНО КАК Субконто" + Ном + Окончание;
        Иначе
			ТекстВыборСубконтоОстатки = ТекстВыборСубконтоОстатки + 
			"	ЕСТЬNULL(%ИмяТаблицы%ОстаткиИОбороты.Субконто" + Ном + ", НЕОПРЕДЕЛЕНО) КАК Субконто" + Ном + Окончание;
			ТекстВыборСубконтоОбороты = ТекстВыборСубконтоОбороты + 
			"	ЕСТЬNULL(%ИмяТаблицы%Обороты.Субконто" + Ном + ", НЕОПРЕДЕЛЕНО) КАК Субконто" + Ном + Окончание;
            ТекстГруппировкаОбороты = ТекстГруппировкаОбороты +
            "   ЕСТЬNULL(%ИмяТаблицы%Обороты.Субконто" + Ном + ", НЕОПРЕДЕЛЕНО)" + Окончание;
		КонецЕсли;
				
    КонецЦикла;
    Если СокрЛП(Прав(ТекстГруппировкаОбороты, 2)) = "," Тогда
        ТекстГруппировкаОбороты = Лев(ТекстГруппировкаОбороты, СтрДлина(ТекстГруппировкаОбороты) - 2);   
    КонецЕсли;
	
	ИменаРесурсов = Новый СписокЗначений;
    Если ИмяРегистра = "Хозрасчетный" Тогда
        ИменаРесурсов.Добавить("Сумма"    , "СуммаРегл");
	Иначе	
        ИменаРесурсов.Добавить("СуммаРегл", "СуммаРегл");
    КонецЕсли;
	ИменаРесурсов.Добавить("СуммаУпр"     , "СуммаУпр");
	ИменаРесурсов.Добавить("СуммаМу"      , "СуммаМу");
    ИменаРесурсов.Добавить("СуммаСценарий", "СуммаСценарий", Истина);
	
	Для Каждого ЭлРесурс Из ИменаРесурсов Цикл
        
        ИмяРесурса     = ЭлРесурс.Значение;
        СинонимРесурса = ЭлРесурс.Представление; 
        
        Окончание = ?(ЭлРесурс.Пометка, "", ОкончаниеПеренос);
        
        НайденныйРесурс = МетаРегистра.Ресурсы.Найти(ИмяРесурса);
        
        Если НайденныйРесурс = Неопределено Тогда
            ТекстВыборРесурсыОстатки = ТекстВыборРесурсыОстатки + 
            "	0 КАК " + СинонимРесурса + "НачальныйОстатокДт,
            |   0 КАК " + СинонимРесурса + "НачальныйОстатокКт,
            |   0 КАК " + СинонимРесурса + "КонечныйОстатокДт,
            |   0 КАК " + СинонимРесурса + "КонечныйОстатокКт" + Окончание;
            ТекстВыборРесурсыОбороты = ТекстВыборРесурсыОбороты + 
            "	СУММА(0) КАК " + СинонимРесурса + "ОборотДт,
            |	СУММА(0) КАК " + СинонимРесурса + "ОборотКт" + Окончание;
        Иначе
            ТекстВыборРесурсыОстатки = ТекстВыборРесурсыОстатки + 
            "	ЕСТЬNULL(%ИмяТаблицы%ОстаткиИОбороты." + ИмяРесурса + "НачальныйОстатокДт, 0) КАК " + СинонимРесурса + "НачальныйОстатокДт,
            |   ЕСТЬNULL(%ИмяТаблицы%ОстаткиИОбороты." + ИмяРесурса + "НачальныйОстатокКт, 0) КАК " + СинонимРесурса + "НачальныйОстатокКт,
            |   ЕСТЬNULL(%ИмяТаблицы%ОстаткиИОбороты." + ИмяРесурса + "КонечныйОстатокДт, 0) КАК " + СинонимРесурса + "КонечныйОстатокДт,
            |   ЕСТЬNULL(%ИмяТаблицы%ОстаткиИОбороты." + ИмяРесурса + "КонечныйОстатокКт, 0) КАК " + СинонимРесурса + "КонечныйОстатокКт" + Окончание;
            ТекстВыборРесурсыОбороты = ТекстВыборРесурсыОбороты + 
            "	СУММА(ЕСТЬNULL(%ИмяТаблицы%Обороты." + ИмяРесурса + "ОборотДт, 0)) КАК " + СинонимРесурса + "ОборотДт,
            |	СУММА(ЕСТЬNULL(%ИмяТаблицы%Обороты." + ИмяРесурса + "ОборотКт, 0)) КАК " + СинонимРесурса + "ОборотКт" + Окончание;
        КонецЕсли;    
	    	
	КонецЦикла;
	
	ПараметрПериодНачало = ?(ЭтоИсточник, "&НачалоПериода", "&НачалоПериодаПриемника {(&НачалоПериодаПриемника)}");
	ПараметрПериодКонец  = ?(ЭтоИсточник, "&КонецПериода", "&КонецПериодаПриемника {(&КонецПериодаПриемника)}");
	
	ТекстЗапроса = 
	"// %ВРЕМТАБЛ_2или4% - %ИмяТаблицы%Остатки
    |ВЫБРАТЬ
    |   %ИмяТаблицы%ОстаткиИОбороты.Организация, 
    |   %ИмяТаблицы%ОстаткиИОбороты.Счет,
        |%ВыборСубконтоОстатки%,
        |%ВыборРесурсыОстатки%    
    |ПОМЕСТИТЬ %ИмяТаблицы%Остатки
    |ИЗ
    |	РегистрБухгалтерии.%ИмяРегистра%.ОстаткиИОбороты("+ПараметрПериодНачало+", 
    |													"+ПараметрПериодКонец+", 
    |													Период, 
    |													, , , 
    |													Организация В (ВЫБРАТЬ СО.Организация ИЗ СоставОрганизаций КАК СО)
    |													) КАК %ИмяТаблицы%ОстаткиИОбороты
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |// %ВРЕМТАБЛ_3или5% - %ИмяТаблицы%Обороты
    |ВЫБРАТЬ
    |	%ИмяТаблицы%Обороты.Организация,
    |	%ИмяТаблицы%Обороты.Регистратор КАК Регистратор,
    |	%ИмяТаблицы%Обороты.Счет,
        |%ВыборСубконтоОбороты%,
        |%ВыборРесурсыОбороты%   
    |ПОМЕСТИТЬ %ИмяТаблицы%Обороты
    |ИЗ
    |	РегистрБухгалтерии.%ИмяРегистра%.Обороты(
    |			"+ПараметрПериодНачало+",
    |			"+ПараметрПериодКонец+",
    |			Регистратор,
    |			,
    |			,
    |			Организация В
    |				(ВЫБРАТЬ
    |					СО.Организация
    |				ИЗ
    |					СоставОрганизаций КАК СО),
    |			,
    |			) КАК %ИмяТаблицы%Обороты
    |
    |СГРУППИРОВАТЬ ПО
    |	%ИмяТаблицы%Обороты.Организация,
    |	%ИмяТаблицы%Обороты.Регистратор,
    |	%ИмяТаблицы%Обороты.Счет,
    |	%ГруппировкаОбороты%
	|";    	          	    
       
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРегистра%", ИмяРегистра);
    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыборСубконтоОстатки%", ТекстВыборСубконтоОстатки);
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыборСубконтоОбороты%", ТекстВыборСубконтоОбороты);
    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыборРесурсыОстатки%", ТекстВыборРесурсыОстатки);
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыборРесурсыОбороты%", ТекстВыборРесурсыОбороты);
    
    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ГруппировкаОбороты%", ТекстГруппировкаОбороты);
    
    Если ЭтоИсточник Тогда
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВРЕМТАБЛ_2или4%", "ВРЕМТАБЛ_2");
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВРЕМТАБЛ_3или5%", "ВРЕМТАБЛ_3");
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", "РегистрИсточник");
    Иначе	
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВРЕМТАБЛ_2или4%", "ВРЕМТАБЛ_4");
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВРЕМТАБЛ_3или5%", "ВРЕМТАБЛ_5");
        ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", "РегистрПриемник");
    КонецЕсли;
    
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьЗапрос()
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1;
	ТекстЗапроса = НаборДанных.Запрос;
	
	ИмяИсточника = ПравилаЗаполненияПолей.Источник.ИмяОбъекта;
	ИмяПриемника = ПравилаЗаполненияПолей.Приемник.ИмяОбъекта;
	
	МетаИсточник = Метаданные.РегистрыБухгалтерии[ИмяИсточника];
	МетаПриемник = Метаданные.РегистрыБухгалтерии[ИмяПриемника];
	
	ТекстЗапросаПоИсточнику = СформироватьТекстЗапросаПоРегистру(МетаИсточник, ИмяИсточника, Истина);
	ТекстДляЗамены = ПолучитьТекстПоМаркерам(ТекстЗапроса, "// Начало.ЗапросПоИсточнику", "// Конец.ЗапросПоИсточнику");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗапросаПоИсточнику);
	
	ТекстЗапросаПоПриемнику = СформироватьТекстЗапросаПоРегистру(МетаПриемник, ИмяПриемника, Ложь);
	ТекстДляЗамены = ПолучитьТекстПоМаркерам(ТекстЗапроса, "// Начало.ЗапросПоПриемнику", "// Конец.ЗапросПоПриемнику");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗапросаПоПриемнику);
	
	//Если Не ОбщегоНазначенияБФ.ЕстьМСФО() Или  ИмяПриемника <> "Дополнительный_2" Тогда
	//	Стоп = Истина;
	//КонецЕсли;
	
	НаборДанных.Запрос = ТекстЗапроса;
	
КонецФункции // СформироватьЗапрос()

Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец)
	
	ПозицияМаркерНачало = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
	ПозицияМаркерКонец  = Найти(Текст, МаркерКонец);
	
	Возврат СокрЛП(Сред(Текст, ПозицияМаркерНачало, ПозицияМаркерКонец - ПозицияМаркерНачало - 1));
	
КонецФункции // ПолучитьТекстПоМаркерам()

#КонецОбласти

#КонецОбласти

#КонецЕсли
