
#Область ОписаниеПеременных

&НаКлиенте
Перем мСоответствиеРезультатов; // Хранит соответствие результатов формирования отчета.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, Отчет);	
	
	фПолноеИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтотОбъект.ИмяФормы, Истина);
		
	ЗаполнитьКэшЗначений();
	
	фЗагружатьНастройки   = Истина;
	
	РежимФормирования = бит_ОтчетыСервер.РежимыОтчетов(фПолноеИмяОтчета);
	
	УправлениеВидимостьюДоступностью();
	
	ОбновитьПанельСохраненныхНастроек();
	
	ЗаполнитьДополнительныеСписки();
	
	фСформироватьПриОткрытии = Параметры.СформироватьПриОткрытии;
	Параметры.СформироватьПриОткрытии = Ложь;		
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если фСформироватьПриОткрытии Тогда
		бит_ОтчетыКлиент.СформироватьОтчет(ЭтотОбъект, Элементы.ГруппаКоманднаяПанельОтчетаЛевая, РежимФормирования.Расшифровки);
	КонецЕсли;		
	
	мСоответствиеРезультатов = Новый Соответствие;
	 	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Оповещение из хранилища настроек при сохранении.
	Если ИмяСобытия = ("СохраненаНастройка_" + фПолноеИмяОтчета) Тогда
		
		ОбновитьПанельСохраненныхНастроек(Истина, Параметр);
		
	// Оповещение из формы настрек при закрытии
	ИначеЕсли ИмяСобытия = ("ИзмененыНастройки_" + фПолноеИмяОтчета) Тогда
		
		СтруктураПараметров = Параметр;
		
		Отчет.НастройкаПериода		 = СтруктураПараметров.НастройкаПериода;
		Отчет.НастройкаПериодаПриемника	= СтруктураПараметров.НастройкаПериодаПриемника;		
		
		Для каждого ЭлМассива Из фСписокПараметровНаФорме Цикл
			ИмяПараметра = ЭлМассива.Значение;
			Отчет[ИмяПараметра] = СтруктураПараметров[ИмяПараметра];
		КонецЦикла;
		ЗагрузитьНастройкиИзСтруктуры(СтруктураПараметров);
						
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек.
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	
	// Видимость панели сохраненных настроек.
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка 	 = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
	// Фильтр сохраненных настроек по варианту.
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	Если фКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		УстановитьТекущийВариант(КлючТекущегоВарианта); 		
	КонецЕсли;                                       
		
КонецПроцедуры // ПриСохраненииВариантаНаСервере()

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	фКлючТекущегоВарианта = КлючТекущегоВарианта;
		
	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
		
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту, Истина);
	
	Если фЗагружатьНастройки Тогда
		
		// Установка настройки, используемой при открытии, если такая указана в справочнике.
		КлючНастройкиПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(КлючОбъекта, Истина);
		
		Если ЗначениеЗаполнено(КлючНастройкиПоУмолчанию) Тогда
			УстановитьТекущиеПользовательскиеНастройки(КлючНастройкиПоУмолчанию);
		Иначе
			УстановитьСтандартныеНастройкиСервер(Истина);
			фИмяЭлемента_ВыбраннаяНастройка = "";
		КонецЕсли;
		
		Результат.Очистить();
	
	КонецЕсли;
			
КонецПроцедуры // ПриЗагрузкеВариантаНаСервере()

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	Для каждого ЭлементСписка Из фСписокПараметровНаФорме Цикл
		
		ИмяПараметра = ЭлементСписка.Значение;
		бит_ОтчетыСервер.УстановитьЗначениеПараметраКомпоновщика(Отчет.КомпоновщикНастроек, 
																 Отчет[ИмяПараметра], 
																 ИмяПараметра);
		
	КонецЦикла;
															 
	// Сохранение дополнительных свойств.
	бит_ОтчетыСервер.ЗаполнитьДополнительныеСвойстваДляНастройки(Отчет
									, Настройки.ДополнительныеСвойства
									, фСписокДополнительныхСвойств);														 
	
КонецПроцедуры // ПриСохраненииПользовательскихНастроекНаСервере()
 
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Настройки = Неопределено ИЛИ Не фЗагружатьНастройки Тогда 
		Возврат;
	КонецЕсли;
	          	
	бит_ОтчетыСервер.ЗаполнитьПараметрыНаФормеИзНастроек(Отчет, Настройки, фСписокПараметровНаФорме);
	бит_ОтчетыСервер.ЗагрузитьДополнительныеСвойства(Отчет, Настройки.ДополнительныеСвойства, фСписокДополнительныхСвойств);
	
	Если Параметры.Свойство("ПравилаЗаполненияПолей")
		И ЗначениеЗаполнено(Параметры.ПравилаЗаполненияПолей) Тогда
		
		Отчет.ПравилаЗаполненияПолей = Параметры.ПравилаЗаполненияПолей;
	КонецЕсли;
	
	Если Настройки.ДополнительныеСвойства.Свойство("КлючНастройки") Тогда
		ТекКлючНастройки = Настройки.ДополнительныеСвойства.КлючНастройки;
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);
	КонецЕсли;
		
КонецПроцедуры // ПриЗагрузкеПользовательскихНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "Нажатие" элемента формы "ДекорацияНастройки<№>".
// 
&НаКлиенте
Процедура Подключаемый_ДекорацияСохраненнойНастройкиНажатие(Элемент)
	
	// Сохраним результат.
	Если ЗначениеЗаполнено(фИмяЭлемента_ВыбраннаяНастройка) 
		И фСтруктураСохраненныхНастроек.Свойство(фИмяЭлемента_ВыбраннаяНастройка) Тогда
		СтруктураСохр = Новый Структура("Результат, ДанныеРасшифровки", Результат, ДанныеРасшифровки);
		КлючНастройки = фСтруктураСохраненныхНастроек[фИмяЭлемента_ВыбраннаяНастройка].КлючНастройки;
		мСоответствиеРезультатов.Вставить(КлючНастройки, СтруктураСохр);
	КонецЕсли;
	
	// Обновление пользовательских настроек.
	ИмяЭлемента = Элемент.Имя;
	НастройкиОбновлены = ОбновитьНастройки(ИмяЭлемента, мСоответствиеРезультатов);
	Если Не НастройкиОбновлены Тогда
		ТекстСообщения = Нстр("ru = 'Настройка не найдена. Обновите панель сохраненных настроек.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 	
	КонецЕсли;
	
	бит_ОтчетыКлиент.ОбработатьНажатиеНаПолеСохраненнойНастройки(Элементы, 
																Элемент, 
																фИмяЭлемента_ВыбраннаяНастройка);
																	     			
КонецПроцедуры

&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.Период.ДатаНачала, 
																				Отчет.Период.ДатаОкончания);
		
КонецПроцедуры // ПериодДатаНачалаПриИзменении()

&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.Период.ДатаНачала, 
																				 Отчет.Период.ДатаОкончания);
		
КонецПроцедуры // ПериодДатаОкончанияПриИзменении()

&НаКлиенте
Процедура ПериодПриемникаДатаНачалаПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.ПериодПриемника.ДатаНачала, 
																				Отчет.ПериодПриемника.ДатаОкончания);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриемникаДатаОкончанияПриИзменении(Элемент)
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.ПериодПриемника.ДатаНачала, 
																				 Отчет.ПериодПриемника.ДатаОкончания);
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	СуммаОтчета = бит_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Результат);
	
КонецПроцедуры // РезультатПриАктивизацииОбласти()

&НаКлиенте
Процедура ПравилаЗаполненияПолейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Источник", фКэшЗначений.СписокДоступныхОбъектов);
	СтруктураОтбора.Вставить("Приемник", фКэшЗначений.СписокДоступныхОбъектов);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.бит_ПравилаЗаполненияПолейПриТрансляции.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	бит_ОтчетыКлиент.СформироватьОтчет(ЭтотОбъект, Элементы.ГруппаКоманднаяПанельОтчетаЛевая, РежимФормирования.Отчеты);
	
КонецПроцедуры // КомандаСформировать()

&НаКлиенте
Процедура КомандаФильтроватьНастройкиПоВариантам(Команда)
	
	фФильтроватьНастройкиПоВарианту = Не фФильтроватьНастройкиПоВарианту;
	
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
КонецПроцедуры // КомандаФильтроватьНастройкиПоВариантам()

&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();	
	
КонецПроцедуры // КомандаПанельНастроек()

&НаКлиенте
Процедура КомандаПанельСохраненныхНастроек(Команда)
	
	фСкрытьПанельСохраненныхНастроек = Не фСкрытьПанельСохраненныхНастроек;
	
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка   = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
КонецПроцедуры // КомандаПанельСохраненныхНастроек()

&НаКлиенте
Процедура КомандаОбновитьПанельСохраненныхНастроек(Команда)
	
	ОбновитьПанельСохраненныхНастроек(Истина);	
	
КонецПроцедуры // КомандаОбновитьПанельСохраненныхНастроек()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Отчет);
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура КомандаНастроитьПериодПриемника(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Отчет, "ПериодПриемника");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриемникаВариантОчистка(Элемент, СтандартнаяОбработка)
	
	Отчет.ПериодПриемника.ДатаНачала    = Дата('0001.01.01');
	Отчет.ПериодПриемника.ДатаОкончания = Дата('0001.01.01');
	
КонецПроцедуры
													
&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	Для каждого ИдЭлемента Из Элемент.ВыделенныеСтроки Цикл
		
		НастройкаКд  = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдЭлемента);
		Если ТипЗнч(НастройкаКд) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			ИмяПараметра = Строка(НастройкаКд.Параметр);
			
			Если фСписокПараметровНаФорме.НайтиПоЗначению(ИмяПараметра) <> Неопределено Тогда
				
				Отчет[ИмяПараметра] = НастройкаКд.Значение;
				
				Если ИмяПараметра = "Период" Тогда
			 		ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.Период.ДатаНачала, Отчет.Период.ДатаОкончания);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // КомпоновщикНастроекПользовательскиеНастройкиПриИзменении()

&НаКлиенте
Процедура КомандаУстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиСервер();
	
КонецПроцедуры // КомандаУстановитьСтандартныеНастройки()
     
&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	МетаОбъект = ОтчетОбъект.Метаданные();
	
	СписокВыбораОрганизации = Новый СписокЗначений;
	СписокВыбораОрганизации.ЗагрузитьЗначения(МетаОбъект.Реквизиты.Организация.Тип.Типы());
	
	фКэшЗначений.Вставить("СписокВыбораОрганизации", СписокВыбораОрганизации);
	
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	
	фКэшЗначений.Вставить("СписокВидовОбъектов", СписокВидовОбъектов);
	
	СписокДоступныхОбъектов = бит_БухгалтерскиеОтчетыСервер.СформироватьСписокДоступныхРегистровБухгалтерииДляУправленческихОтчетов(Истина);
	
	ИмяХозрасчетный = "Хозрасчетный";	
	Если НЕ Метаданные.РегистрыБухгалтерии.Найти(ИмяХозрасчетный) = Неопределено Тогда
		
		ОбъектСистемы = бит_ПраваДоступа.ПолучитьОбъектДоступаПоМетаданным(Метаданные.РегистрыБухгалтерии[ИмяХозрасчетный]);
		Если ЗначениеЗаполнено(ОбъектСистемы) Тогда
			СписокДоступныхОбъектов.Добавить(ОбъектСистемы);
		КонецЕсли;
		
	КонецЕсли;
	
	фКэшЗначений.Вставить("СписокДоступныхОбъектов", СписокДоступныхОбъектов);
	
КонецПроцедуры

// Процедура заполняет дополнительные списки.
// 
&НаСервере
Процедура ЗаполнитьДополнительныеСписки()

	// Список имен параметров СКД, заполняемых пользователем через элементы формы.
	ИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтотОбъект.ИмяФормы, Ложь); 
	Отчеты[ИмяОтчета].ЗаполнитьДополнительныеСписки(фСписокПараметровНаФорме, фСписокДополнительныхСвойств);
		
КонецПроцедуры // ЗаполнитьДополнительныеСписки()

// Процедура управляет видимостью и доступностью элементов формы.
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	// Установка видимости и доступности элементов формы в зависимости от типа отчета 
	// - обычный или расшифровка. 
	бит_ОтчетыСервер.УстановитьВидимостьДоступностьЭлементов(Элементы, 
															Параметры.КлючВарианта, 
															Параметры.ПредставлениеВарианта);
		          	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура включает/отключает фильтр настроек по варианту.
// 
// Параметры:
//  Фильтровать  - Булево
// 
&НаСервере
Процедура ИзменитьФильтрНастроек(Фильтровать)

	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту);	

КонецПроцедуры // ИзменитьФильтрНастроек()

// Функция обновляет настройки отчета.
// 
// Параметры:
//  ИмяЭлемента  		 	- Строка.
//  СоответствиеРезультатов - Соответствие.
// 
// ВозращаемоеЗначение:
//  Булево - настройки обновлены.
// 
&НаСервере
Функция ОбновитьНастройки(ИмяЭлемента, СоответствиеРезультатов)

	НастройкиОбновлены = Ложь;
	
	Результат.Очистить();
	
	СтруктураНастроек = фСтруктураСохраненныхНастроек[ИмяЭлемента];
	
	Настройки = бит_ОтчетыСервер.ПолучитьНастройкиОтчета(СтруктураНастроек);
	
	Если Настройки <> Неопределено Тогда
			
		КлючНастройки = СтруктураНастроек.КлючНастройки;    	
		КлючОбъекта = СтрЗаменить(СтруктураНастроек.КлючОбъекта, фПолноеИмяОтчета + "/", "");
		
		Если КлючОбъекта <> КлючТекущегоВарианта Тогда
			фЗагружатьНастройки = Ложь;	
			УстановитьТекущийВариант(КлючОбъекта);
			фЗагружатьНастройки = Истина;
		КонецЕсли;
		
		УстановитьТекущиеПользовательскиеНастройки(КлючНастройки);
		НастройкиОбновлены = Истина;
		
	КонецЕсли;
	
	// Выведем результат, если он уже формировался для текущей настройки.
	Если НастройкиОбновлены Тогда		
		СтруктураРез = СоответствиеРезультатов.Получить(КлючНастройки);
		Если СтруктураРез <> Неопределено Тогда
			Результат.Вывести(СтруктураРез.Результат);
			ДанныеРасшифровки = СтруктураРез.ДанныеРасшифровки;
		КонецЕсли; 		
	КонецЕсли;
	       	
	Возврат НастройкиОбновлены;

КонецФункции // ОбновитьНастройки()

// Процедура обновляет панель сохраненных настроек.
// 
// Параметры:
//  Очищать  - Булево (Необязательный, по умолчанию = Ложь).
//  ТекКлючНастройки  (Необязательный).
// 
&НаСервере
Процедура ОбновитьПанельСохраненныхНастроек(Очищать = Ложь, ТекКлючНастройки = Неопределено)

	ГруппаПанели = Элементы.ГруппаПанельВыбораСохраненныхНастроек;
	
	СтруктураДоступности = бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(фПолноеИмяОтчета, Истина);
	лИспользуемыйПриОткрытииВариант   = СтруктураДоступности.ИспользуемыйПриОткрытииВариант;
		
	Если Очищать Тогда 	
		
		бит_РаботаСДиалогамиСервер.УдалитьЭлементыГруппыФормы(Элементы, ГруппаПанели); 			
		
	Иначе
		
		Если лИспользуемыйПриОткрытииВариант = Неопределено Тогда
			КлючТекущегоВарианта = "";
			Возврат;
		Иначе
			КлючТекущегоВарианта = лИспользуемыйПриОткрытииВариант;		
		КонецЕсли;
	
	КонецЕсли; 	
	
	КлючОбъекта = фПолноеИмяОтчета + "/" + КлючТекущегоВарианта;
				
	бит_ОтчетыСервер.ОбновитьПанельСохраненныхНастроек(Элементы, 
													ГруппаПанели, 
													КлючОбъекта, 
													фСтруктураСохраненныхНастроек,
													СтруктураДоступности,
													фФильтроватьНастройкиПоВарианту,
													фИмяЭлемента_ВыбраннаяНастройка);
	
	Если ТекКлючНастройки <> Неопределено Тогда
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);	
	Иначе
		фИмяЭлемента_ВыбраннаяНастройка = "";														
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПанельСохраненныхНастроек()

// Процедура устанавливает стандартные настройки варианта 
// и обновляет по ним элементы формы.
// Заменяет типовую команду "СтандартныеНастройки".
// 
&НаСервере
Процедура УстановитьСтандартныеНастройкиСервер(ВосстанавливатьНастройки = Ложь)
	
	бит_ОтчетыСервер.УстановитьСтандартныеНастройкиСервер(Отчет, ВосстанавливатьНастройки, фСписокПараметровНаФорме);
	
	бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
														фСтруктураСохраненныхНастроек, 
														фИмяЭлемента_ВыбраннаяНастройка,
														фФильтроватьНастройкиПоВарианту);
															
КонецПроцедуры // УстановитьСтандартныеНастройкиСервер()          

// Процедура загружает пользовательские настройки компоновщика.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
// 
&НаСервере
Процедура ЗагрузитьНастройкиИзСтруктуры(СтруктураПараметров)

	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СтруктураПараметров.ПользовательскиеНастройки);
		
КонецПроцедуры // ЗагрузитьНастройкиИзСтруктуры()

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтотОбъект
													   , Элемент
													   , Отчет
													   , Элемент.Имя
													   , фКэшЗначений.СписокВыбораОрганизации
													   , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если НЕ фСформироватьПриОткрытии Тогда
		
		ПроверитьВозможностьРасшифровки(Расшифровка, СтандартнаяОбработка);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если НЕ фСформироватьПриОткрытии Тогда
		
		ПроверитьВозможностьРасшифровки(Расшифровка, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет наличие необходимых для расшифровки полей. 
// 
&НаСервере
Процедура ПроверитьВозможностьРасшифровки(Расшифровка, СтандартнаяОбработка)

	// Проверим возможность расшифровки
	ДанныеРасшифр 		= ПолучитьИзВременногоХранилища(ДанныеРасшифровки);	
	МассивПолейРасшифровки = Новый Массив;
	ДобавитьРодителейПоляРасшифровки(ДанныеРасшифр.Элементы[Расшифровка], ДанныеРасшифр, МассивПолейРасшифровки);
	// МассивПолейРасшифровки = бит_ОтчетыСервер.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифр);

	Если МассивПолейРасшифровки.Найти("СчетИсточника") = Неопределено 
		ИЛИ МассивПолейРасшифровки.Найти("СчетПриемника") = Неопределено Тогда
		// Расшифровка возможна только если в данных расшифровки есть и СчетИсточника и СчетПриемника.
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьВозможностьРасшифровки()

// Функция формирует массив родителей текущего поля расшифровки.
//
&НаСервере
Процедура ДобавитьРодителейПоляРасшифровки(ЭлементРасшифровки, ДанныеРасшифровки, МассивПолейРасшифровки)

	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			
			МассивПолейРасшифровки.Добавить(Строка(Поле.Поле));
			
		КонецЦикла;   
		
	КонецЕсли;
	
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителейПоляРасшифровки(Родитель, ДанныеРасшифровки, МассивПолейРасшифровки);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьМассивПолейРасшифровки()

#КонецОбласти
