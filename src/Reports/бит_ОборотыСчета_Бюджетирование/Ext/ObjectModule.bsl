#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Текущий вариант отчета.
  
Перем мТекстРесурсыДляВывода; // Хранит список ресурсов для вывода.

Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

Перем ЕстьВалюта Экспорт; // Хранить признак наличия валюты.

Перем ЕстьКоличество Экспорт; // Хранить признак наличия количества.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Процедура выполняет сохранение настроек отчета.
// 
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина, , Истина);

КонецПроцедуры // ПрименитьНастройку()

// Процедура заполняет начальные настройки построителя отчета.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтарыеНастройки = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	ТекстПоля  = "";
	// Изменение кода. Начало. 12.05.2014{{
	ТекстОтбор = ", Валюта.*, ЦФО.*, Сценарий.*, Организация.*";
	// Изменение кода. Конец. 12.05.2014}}
	ТекстИтоги = "  ЦФО.*";
	Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
		ТекстИтоги = ТекстИтоги + ", Организация.*";	
	КонецЕсли;
		
	Сч = 0;
	МассивСубконто = Новый Массив;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч + 1;
		
		ТекстПоля  = ТекстПоля + ", Регистр.Субконто" + Сч + " КАК Субконто" + Сч;
		ТекстОтбор = ТекстОтбор + ", Субконто"+ Сч + ".*";
		ТекстИтоги = ТекстИтоги + ", Субконто"+ Сч + ".*";
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
        
	КонецЦикла;
	
	Для Сч = 1 По 4 Цикл
		ТекстПоля  = ТекстПоля + ", Регистр.КорСубконто" + Сч + " КАК КорСубконто" + Сч;
		ТекстИтоги = ТекстИтоги + ", КорСубконто"+ Сч + ".*";
	КонецЦикла;
	
	ТекстПоля  = Сред(ТекстПоля , 2);
	ТекстОтбор = Сред(ТекстОтбор, 2);
	ТекстИтоги = Сред(ТекстИтоги, 2);
    
    ТекстПолейРесурсов = "";
    ТекстИтогиРесурсов = "";
    МассивПоказателей  = СформироватьМассивПоказателей();
    
    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
        
        ТекстПолейРесурсов = ТекстПолейРесурсов + ", Регистр." + ТекПоказатель + "Оборот"
                             + " КАК " + ТекПоказатель + "Оборот";
        
        ТекстИтогиРесурсов = ТекстИтогиРесурсов + ", СУММА(" + ТекПоказатель + "Оборот)";
                             
    КонецЦикла;
    
    ТекстПолейРесурсов = Сред(ТекстПолейРесурсов, 2);
    ТекстИтогиРесурсов = Сред(ТекстИтогиРесурсов, 2);
    
	ПостроительОтчета.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ?(ПустаяСтрока(ТекстПолейРесурсов), " """" Как Поле", ТекстПолейРесурсов) + "
	|	" + ?(НЕ ПустаяСтрока(ТекстПоля), "{ВЫБРАТЬ " + ТекстПоля + "}", "") + "
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".Обороты(,,,Счет В Иерархии (&Счет),," + ?(НЕ ПустаяСтрока(ТекстОтбор), "{" + ТекстОтбор + "}", "") + ") КАК Регистр
	|
	|ИТОГИ " + ТекстИтогиРесурсов + " ПО ОБЩИЕ
	|	" + ?(НЕ ПустаяСтрока(ТекстИтоги), "{ИТОГИ ПО " + ТекстИтоги + "}", "");
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч + 1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто" + Сч);
		Поле.ТипЗначения   = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
	Для Сч = 1 По 4 Цикл
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("КорСубконто" + Сч);
		Если Поле <> Неопределено Тогда
			Поле.Представление = "Кор. Субконто " + Сч;
		КонецЕсли;	
	КонецЦикла; 
					
	бит_БухгалтерскиеОтчетыСервер.СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
	
	бит_БухгалтерскиеОтчетыСервер.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
	
	// Определим признаки учета субконто, которые могут быть использованы.
    СтруктураУчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьПризнакиУчетаСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии, МассивСубконто);
	ЕстьВалюта     = СтруктураУчета.ЕстьВалюта;
    ЕстьКоличество = СтруктураУчета.ЕстьКоличество;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек.
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

#КонецОбласти

#Область ЗаголовокОтчета

// Функция формирует заголовок отчета (синоним).
// 
// Возвращаемое значение:
//  Строка - заголовок отчета.
//
Функция ЗаголовокОтчета() Экспорт
	
	ПредставлениеРегистра = "бюджетирование";
	СтрокаПоСчету = ?(ЗначениеЗаполнено(Счет), Счет, Нстр("ru = ' не выбран счет'"));
	
	ТекстЗаголовка = Нстр("ru = 'Обороты счета %2% (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра, СтрокаПоСчету);
	
	Возврат ТекстЗаголовка;
    
КонецФункции // ЗаголовокОтчета()

// Процедура выводит шапку отчета.
// 
// Возвращаемое значение:
// 	ТабличныйДокумент - заголовок отчета.
//  
Функция СформироватьЗаголовок() Экспорт

    ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);
			
	Макет = ПолучитьМакет("Макет");
	
	бит_БухгалтерскиеОтчетыСервер.УдалитьОбластьИзМакетаПриНеобходимости(Макет, "СальдоНачДт", СальдоНачДт);
	бит_БухгалтерскиеОтчетыСервер.УдалитьОбластьИзМакетаПриНеобходимости(Макет, "СальдоНачКт", СальдоНачКт);
	бит_БухгалтерскиеОтчетыСервер.УдалитьОбластьИзМакетаПриНеобходимости(Макет, "СальдоКонДт", СальдоКонДт);
	бит_БухгалтерскиеОтчетыСервер.УдалитьОбластьИзМакетаПриНеобходимости(Макет, "СальдоКонКт", СальдоКонКт);
	
	бит_БухгалтерскиеОтчетыСервер.УдалитьОбластьИзМакетаПриНеобходимости(Макет, "ОборотДт", ОборотДт);
	бит_БухгалтерскиеОтчетыСервер.УдалитьОбластьИзМакетаПриНеобходимости(Макет, "ОборотКт", ОборотКт);
	бит_БухгалтерскиеОтчетыСервер.УдалитьОбластьИзМакетаПриНеобходимости(Макет, "ОборотДтКорСчет", ОборотДтКорСчета);
	бит_БухгалтерскиеОтчетыСервер.УдалитьОбластьИзМакетаПриНеобходимости(Макет, "ОборотКтКорСчет", ОборотКтКорСчета);
	
	ЗаголовокОтчета  = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок = Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам.
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы - 1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх + Сч, 2, ОбластьЗаголовок.Верх + Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх + Сч, 2, ОбластьЗаголовок.Верх + Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	ЗаголовокОтчета.Параметры.ОписаниеПериода = ОписаниеПериода;

	ТекстПроИтоги = "";
	Если ПоСубсчетам Или ПоСубсчетамКорСчетов Тогда
		ТекстПроИтоги = ТекстПроИтоги + Нстр("ru = ', субсчетам'");
	КонецЕсли;

	ДополнениеКИтогам = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОписанияИтоговПоИзмерениямПостроителя(ПостроительОтчета);
	
	Если НЕ ПустаяСтрока(ДополнениеКИтогам) Тогда
		ТекстПроИтоги = ТекстПроИтоги + ", " + ДополнениеКИтогам;
	КонецЕсли;
	ТекстПроИтоги = Сред(ТекстПроИтоги, 3);

	ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
    КонецЕсли;
    Если ВыводитьСуммуСценарий Тогда 
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (сценарий)'");
    КонецЕсли;
	Если ПоВалютам Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
    КонецЕсли;
    
	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстСписокПоказателей;
	
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = Нстр("ru = 'Детализация по '") + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();
	
	// Вывод списка фильтров:
	СтрОтбор = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

#КонецОбласти

#Область ФормированиеОтчета

// Процедура выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент - Табличный документ, формируемый отчетом.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина) - признак отображения заголовка.
//  ВысотаЗаголовка     - Число (По умолчанию = 0) - высота заголовка.
// 
// Возвращаемое значение:
//  Булево - отчет сформирован.
// 
Функция СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Очистка табличного поля
	ДокументРезультат.Очистить();
		
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;
		    
	    // Сформируем значение переменной "мТекстРесурсыДляВывода".
	    СформироватьЗначениеПеременной_мТекстРесурсыДляВывода();
	    
		МассивРесурсов    = СформироватьМассивПоказателей(); 		
		МассивГруппировок = СформироватьМассивГруппировок();
				
		ЗапросОбороты = Новый Запрос;
		ЗапросОстатки = Новый Запрос;
		
		УстановитьПараметрыЗапроса(ЗапросОбороты, Истина);
		УстановитьПараметрыЗапроса(ЗапросОстатки, Истина);
		СформироватьТекстЗапросов(МассивРесурсов, ЗапросОбороты, ЗапросОстатки);
		
		ОтборСубконто = Новый Соответствие;
		Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
			Если Элемент.Использование Тогда
				ОтборСубконто.Вставить(Элемент.ПутьКДанным, Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
		// Состояние("Выполнение запроса");
		
		Макет = ПолучитьМакет("Макет");

		// Вывод заголовка отчета
		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
		
		
	    РезультатОбороты = ЗапросОбороты.Выполнить();
		РезультатОстатки = ЗапросОстатки.Выполнить();
	    
		ФорматПериода = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуФорматаПериода(Периодичность);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
		СтруктураПараметров.Вставить("МассивГруппировок", МассивГруппировок);
		
		// Период
		СтруктураПараметров.Вставить("ОбластьСтрокаПериод", Макет.ПолучитьОбласть("Строка|Период"));
		СтруктураПараметров.ОбластьСтрокаПериод.Область(1, 2).Формат = ФорматПериода;
		
		// Нач сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачДт", Макет.ПолучитьОбласть("Строка|СальдоНачДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСальдоНачКт", Макет.ПолучитьОбласть("Строка|СальдоНачКт"));
		
		// Кон сальдо
		СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонДт", Макет.ПолучитьОбласть("Строка|СальдоКонДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаСальдоКонКт", Макет.ПолучитьОбласть("Строка|СальдоКонКт"));
		
		// Оборот 
		СтруктураПараметров.Вставить("ОбластьСтрокаОборотДт", Макет.ПолучитьОбласть("Строка|ОборотДт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаОборотКт", Макет.ПолучитьОбласть("Строка|ОборотКт"));
		СтруктураПараметров.Вставить("ОбластьСтрокаОборотДтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотДтКорСчет"));
		СтруктураПараметров.Вставить("ОбластьСтрокаОборотКтКорСчет", Макет.ПолучитьОбласть("Строка|ОборотКтКорСчет"));
		
		Если ПоВалютам Тогда
			
			// Валюта
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаПериод", Макет.ПолучитьОбласть("СтрокаВалюта|Период"));
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоНачКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонДт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаСальдоКонКт", Макет.ПолучитьОбласть("СтрокаВалюта|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКт", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаВалютаОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаВалюта|ОборотКтКорСчет"));
			
		КонецЕсли;
		
		Если МассивГруппировок.Количество() > 0 Тогда
			
			// Субконто
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоПериод", Макет.ПолучитьОбласть("СтрокаСубконто|Период"));
			
			// Нач сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоНачКт"));
			
			// Кон сальдо
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконто|СальдоКонКт"));
			
			// Оборот 
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКт"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотДтКорСчет"));
			СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконто|ОборотКтКорСчет"));
			
			Если ПоКоличеству Тогда
				
				// Субконто
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоПериод", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|Период"));
				
				// Нач сальдо
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоНачДт"));
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоНачКт"));
				
				// Кон сальдо
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоКонДт"));
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|СальдоКонКт"));
				
				// Оборот 
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотДт"));
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотКт"));
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотДтКорСчет"));
				СтруктураПараметров.Вставить("ОбластьСтрокаСубконтоКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаСубконтоКоличество|ОборотКтКорСчет"));
				
				
				// Период
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоПериод", Макет.ПолучитьОбласть("СтрокаКоличество|Период"));
				СтруктураПараметров.ОбластьСтрокаКоличествоПериод.Область(1, 2).Формат = ФорматПериода;
				
				// Нач сальдо
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачДт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоНачДт"));
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоНачКт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоНачКт"));
				
				// Кон сальдо
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонДт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоКонДт"));
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоСальдоКонКт", Макет.ПолучитьОбласть("СтрокаКоличество|СальдоКонКт"));
				
				// Оборот 
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДт", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотДт"));
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКт", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотКт"));
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотДтКорСчет", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотДтКорСчет"));
				СтруктураПараметров.Вставить("ОбластьСтрокаКоличествоОборотКтКорСчет", Макет.ПолучитьОбласть("СтрокаКоличество|ОборотКтКорСчет"));
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывод отчета
		ОбщийИтогОбороты = РезультатОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
		ОбщийИтогОстатки = РезультатОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
		ЕстьИтог = ОбщийИтогОстатки.Следующий();
		ОбщийИтогОбороты.Следующий();
		
		ДокументРезультат.НачатьАвтогруппировкуКолонок();
		
		НачалоЗаголовка = Макет.ПолучитьОбласть("ЗаголовокТаблицы|Период");
		
		Если МассивГруппировок.Количество() > 0 Тогда
			НачалоЗаголовка.Параметры.Заголовок = "Субконто";
		ИначеЕсли ЗначениеЗаполнено(Периодичность) Тогда
			НачалоЗаголовка.Параметры.Заголовок = "Период";
		КонецЕсли;
		
		ДокументРезультат.Вывести(НачалоЗаголовка,0);
		
		ШиринаТаблицы = НачалоЗаголовка.ШиринаТаблицы;
		
		СписокДт = Неопределено;
		СписокКт = Неопределено;
		Выборка  = Неопределено;
		бит_БухгалтерскиеОтчетыСервер.ВывестиПолныйЗаголовокОтчетаОборотовСчета(Выборка, ШиринаТаблицы, ЭтотОбъект, Макет, ДокументРезультат,
			РезультатОбороты, "ЗаголовокТаблицы", МассивРесурсов, СписокДт, СписокКт, 1);
			
		ДокументРезультат.ЗакончитьАвтогруппировкуКолонок();
		
		// Массивы хранят счета, по которым были обороты.
		СтруктураПараметров.Вставить("СписокДт", СписокДт);
		СтруктураПараметров.Вставить("СписокКт", СписокКт);
		
		СоответствиеСчетовПредков = бит_БухгалтерскиеОтчетыСервер.ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
		СтруктураПараметров.Вставить("СоответствиеСчетовПредков", СоответствиеСчетовПредков);
		
		// Вывод данных отчета
		ДокументРезультат.НачатьАвтогруппировкуСтрок();
		Если МассивГруппировок.Количество() > 0 Тогда
			
			ВыводСубконто(РезультатОбороты, РезультатОстатки, 0, СтруктураПараметров, ОтборСубконто, ПоКоличеству);
			
		ИначеЕсли ЗначениеЗаполнено(Периодичность) Тогда
			
			ВывестиПериоды(РезультатОбороты, РезультатОстатки, СтруктураПараметров, ОтборСубконто);
			
		КонецЕсли;
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("Итог|Период"));
		
		// Вывод заголовков нач.сальдо
		ТекШиринаТаблицы = 0;
		бит_БухгалтерскиеОтчетыСервер.ВывестиПолныйЗаголовокОтчетаОборотовСчета(Выборка, ТекШиринаТаблицы, ЭтотОбъект, Макет, ДокументРезультат,
			РезультатОбороты, "Итог", МассивРесурсов, СписокДт, СписокКт, 0, ОбщийИтогОстатки, ОбщийИтогОбороты);
			                      
		ЗаполнитьИПрисоединитьОбласть(СальдоКонДт, СтруктураПараметров.ДокументРезультат, Макет.ПолучитьОбласть("Итог|СальдоКонДт"), ОбщийИтогОстатки, , "КонДт");
		ЗаполнитьИПрисоединитьОбласть(СальдоКонКт, СтруктураПараметров.ДокументРезультат, Макет.ПолучитьОбласть("Итог|СальдоКонКт"), ОбщийИтогОстатки, , "КонКт");
				
		// Обведение таблицы отчета линией, как в области границы.
		ОбластьИтогПериод = Макет.ПолучитьОбласть("Итог|Период");
		
		ТолстаяЛиния = ОбластьИтогПериод.Область(1, 2).ГраницаСверху;
		
		ШиринаТаблицы = ШиринаТаблицы + СписокДт.Количество() + СписокКт.Количество();
		
		ДокументРезультат.Область(ВысотаЗаголовка + 2, 2, ДокументРезультат.ВысотаТаблицы, ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
		
		ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
	    
	    // Заполним общую расшифровку:
	    СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
	    СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

	    ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;

		// Зафиксируем заголовок отчета
		ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 2;

		// Первую колонку не печатаем
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы,ДокументРезультат.ШиринаТаблицы);
		
		// Присвоим имя для сохранения параметров печати табличного документа.
		ДокументРезультат.КлючПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;
		
		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
	
	КонецЕсли;
	
	Возврат ОтчетСформирован;

КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Возвращаемое значение:
//  Массив - массив показателей.
//
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
    
    Если ВыводитьСуммуСценарий Тогда
       	МассивПоказателей.Добавить("СуммаСценарий");
    КонецЕсли;
    
    Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;
    
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

// Процедура формирует значение переменной мТекстРесурсыДляВывода.
// 
Процедура СформироватьЗначениеПеременной_мТекстРесурсыДляВывода() Экспорт
    
    мТекстРесурсыДляВывода = "";
    
    Если ВыводитьСуммуРегл Тогда 
        мТекстРесурсыДляВывода = мТекстРесурсыДляВывода + "СуммаРегл";
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        мТекстРесурсыДляВывода = мТекстРесурсыДляВывода + ?(ПустаяСтрока(мТекстРесурсыДляВывода), "", ", ") + "СуммаУпр";
    КонецЕсли;  
    
    Если ВыводитьСуммуСценарий Тогда
		мТекстРесурсыДляВывода = мТекстРесурсыДляВывода + ?(ПустаяСтрока(мТекстРесурсыДляВывода), "", ", ") + "СуммаСценарий";
    КонецЕсли;
    
КонецПроцедуры // СформироватьЗначениеПеременной_мТекстРесурсыДляВывода()

// Функция возвращает общую структуру для расшифровки.
// 
// Возвращаемое значение:
//  Структура - общая струкутра расшифровки.
// 
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

    СтруктураНастроекОтчета.Вставить("Период"  		, Период);
	СтруктураНастроекОтчета.Вставить("Периодичность", Периодичность);
	
	СтруктураНастроекОтчета.Вставить("Сценарий"             , Сценарий);
	СтруктураНастроекОтчета.Вставить("СценарийВидСравнения" , СценарийВидСравнения);
	СтруктураНастроекОтчета.Вставить("СценарийИспользование", СценарийИспользование);
	
	// Изменение кода. Начало. 12.05.2014{{
	Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
		СтруктураНастроекОтчета.Вставить("Организация"             , Организация);
		СтруктураНастроекОтчета.Вставить("ОрганизацияВидСравнения" , ОрганизацияВидСравнения);
		СтруктураНастроекОтчета.Вставить("ОрганизацияИспользование", ОрганизацияИспользование);
	КонецЕсли;
	// Изменение кода. Конец. 12.05.2014}}
	
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуРегл"    , ВыводитьСуммуРегл);
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуУпр"     , ВыводитьСуммуУпр);
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуСценарий", ВыводитьСуммуСценарий);
    
	НастройкиОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", Новый ХранилищеЗначения(НастройкиОтбора));
				
	Возврат СтруктураНастроекОтчета;
	
КонецФункции // СформироватьОбщуюСтруктуруДляРасшифровки()

// Функция возвращает массив группировок для отчета.
// 
// Возвращаемое значение:
//  Массив - массив группировок
// 
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции // СформироватьМассивГруппировок()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

// Проверка корректности настроек отчета
//
// Возвращаемое значение:
//   Булево
// 
Функция ПараметрыОтчетаКорректны()

	РезультатПроверки = 
		бит_БухгалтерскиеОтчетыСервер.ПроверитьСчет(Счет)
		И бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Истина)
		И Не бит_БухгалтерскиеОтчетыСервер.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()

#КонецОбласти

#Область ФормированиеОтчета

// Формирование текста запроса.
// 
// Параметры:
//  МассивРесурсов   
//  ЗапросОбороты
//  ЗапросОстатки
// 
Процедура СформироватьТекстЗапросов(МассивРесурсов, ЗапросОбороты, ЗапросОстатки)

	ТекстСубконто          = "";
	ТекстСубконтоИзмерения = "";
	ТекстКорСубконто          = "";
	ТекстКорСубконтоИзмерения = "";
	ТекстСоединениеПо 	   = "";
	
	// Субконто отчета
	Для Инд = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1 Цикл
		
		Измерение    = ПостроительОтчета.ИзмеренияСтроки[Инд];
		ИмяИзмерения = Измерение.Имя;
		
		СтрокаТипаИзмерения = бит_БухгалтерскиеОтчетыСервер.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
		
		Если Найти(Измерение.Имя, "КорСубконто") = 0 Тогда
			ТекстСубконто = ТекстСубконто + "
			|	Таблица." + Измерение.ПутьКДанным + " КАК " + ИмяИзмерения + ",
			|	ПРЕДСТАВЛЕНИЕ( Таблица." + Измерение.ПутьКДанным + ") КАК " + ИмяИзмерения + "Представление,";			
			ТекстСубконтоИзмерения = ТекстСубконтоИзмерения + ",
			|	Таблица." + Измерение.ПутьКДанным + " " + СтрокаТипаИзмерения + " КАК " + ИмяИзмерения;
			ТекстСоединениеПо = ТекстСоединениеПо 
					+ Символы.ПС + " И ТаблицаОбороты." + ИмяИзмерения + " = Таблица." + ИмяИзмерения + "";
		Иначе	
		    ТекстКорСубконто = ТекстКорСубконто + "
			|	Таблица." + Измерение.ПутьКДанным + " КАК " + ИмяИзмерения + ",
			|	ПРЕДСТАВЛЕНИЕ( Таблица." + Измерение.ПутьКДанным + ") КАК " + ИмяИзмерения + "Представление,"; 			
			ТекстКорСубконтоИзмерения = ТекстКорСубконтоИзмерения + ",
			|	Таблица." + Измерение.ПутьКДанным + " " + СтрокаТипаИзмерения + " КАК " + ИмяИзмерения;
			//ТекстКорСубконтоОст = ТекстКорСубконтоОст + "
			//|	NULL" + " КАК " + ИмяИзмерения + ",
			//|	ПРЕДСТАВЛЕНИЕ( NULL" + ") КАК " + ИмяИзмерения + "Представление,"; 			
			//ТекстКорСубконтоИзмеренияОст = ТекстКорСубконтоИзмерения + ",
			//|	Таблица." + Измерение.ПутьКДанным + " " + СтрокаТипаИзмерения + " КАК " + ИмяИзмерения;
		КонецЕсли;   		
		
	КонецЦикла;
	
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(ЗапросОстатки);
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(ЗапросОбороты);
    
    ОграниченияПоПостроителюОтчета_ЗапросОстатки = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, ЗапросОстатки);
    ОграниченияПоПостроителюОтчета_ЗапросОбороты = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, ЗапросОбороты);
    
    Если Не ПустаяСтрока(ОграниченияПоРеквизитам) Тогда
        
		Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета_ЗапросОстатки) Тогда
    		ОграниченияПоПостроителюОтчета_ЗапросОстатки = " И " + ОграниченияПоПостроителюОтчета_ЗапросОстатки;
        КонецЕсли;
        
        Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета_ЗапросОбороты) Тогда
    		ОграниченияПоПостроителюОтчета_ЗапросОбороты = " И " + ОграниченияПоПостроителюОтчета_ЗапросОбороты;
        КонецЕсли;
        
	КонецЕсли;
    
	Если ПоСубсчетам Тогда
		
		ТекстСчет = 
		"	Таблица.Счет КАК Счет, 
		
		|	Таблица.Счет.Вид КАК ВидСчета, 
		|	Таблица.Счет.Порядок КАК СчетПорядок, 
		|	Таблица.Счет.Представление КАК СчетПредставление,";
		
	Иначе
		
		ТекстСчет = "";
		
	КонецЕсли;
		
	ТекстОбороты = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет + ТекстСубконто + ТекстКорСубконто + "
	|	Таблица.КорСчет.Ссылка КАК КорСчет, 
	|	Таблица.КорСчет.Порядок КАК КорСчетПорядок, 
	|	Таблица.КорСчет.Представление КАК КорСчетПредставление,";
	
	ТекстОстатки = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ТекстСчет +  ТекстСубконто + "";
	
	Если ПоВалютам Тогда
		
		ТекстПоВалютам = " Таблица.Валюта КАК Валюта, Таблица.Валюта.Представление КАК ВалютаПредставление  ";
		ТекстОбороты = ТекстОбороты + ТекстПоВалютам + ",";
		ТекстОстатки = ТекстОстатки + ТекстПоВалютам + ",";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Периодичность) Тогда
		
		ТекстПериод = ?(ВРЕГ(Периодичность)<>"РЕГИСТРАТОР",
					"
					|	Таблица.Период,",
					"
					|	Таблица.Регистратор КАК Период,
					|	ПРЕДСТАВЛЕНИЕ(Таблица.Регистратор) КАК РегистраторПредставление,
					|	Таблица.Регистратор.Дата КАК РегистраторДата,");
		ТекстОбороты = ТекстОбороты + ТекстПериод;
		ТекстОстатки = ТекстОстатки + ТекстПериод;
					
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
		ТекстОбороты = ТекстОбороты + "
		|	Таблица." + ИмяРесурса + "ОборотДт КАК " + ИмяРесурса + "ОборотДт,
		|	Таблица." + ИмяРесурса + "ОборотКт КАК " + ИмяРесурса + "ОборотКт,
		|	ВЫБОР КОГДА Таблица." + ИмяРесурса + "ОборотДт <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Есть" + ИмяРесурса + "ОборотДт,
		|	ВЫБОР КОГДА Таблица." + ИмяРесурса + "ОборотКт <> 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Есть" + ИмяРесурса + "ОборотКт,";
		
		ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "Развернутый", "");
		ТекстОстатки = ТекстОстатки + "
		|	Таблица." + ИмяРесурса + "Начальный" + ТекстРазвернутоеСальдо + "ОстатокДт КАК " + ИмяРесурса + "НачДт,
		|	Таблица." + ИмяРесурса + "Начальный" + ТекстРазвернутоеСальдо + "ОстатокКт КАК " + ИмяРесурса + "НачКт,
		|	Таблица." + ИмяРесурса + "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокДт КАК " + ИмяРесурса + "КонДт,
		|	Таблица." + ИмяРесурса + "Конечный"  + ТекстРазвернутоеСальдо + "ОстатокКт КАК " + ИмяРесурса + "КонКт,
		|	Таблица." + ИмяРесурса + "ОборотДт КАК " + ИмяРесурса + "ЕстьОборотДт,
		|	Таблица." + ИмяРесурса + "ОборотКт КАК " + ИмяРесурса + "ЕстьОборотКт,";
		
	КонецЦикла;
	
	ТекстОстатки = Лев(ТекстОстатки, СтрДлина(ТекстОстатки) - 1);
	ТекстОбороты = Лев(ТекстОбороты, СтрДлина(ТекстОбороты) - 1);
	
	ОтборПоВидамСубконто = бит_БухгалтерскиеОтчетыСервер.УстановитьОтборНаВидыСубконтоПоПостроителюОтчета(ПостроительОтчета, Счет, ЗапросОбороты);
	ОтборПоВидамСубконто = бит_БухгалтерскиеОтчетыСервер.УстановитьОтборНаВидыСубконтоПоПостроителюОтчета(ПостроительОтчета, Счет, ЗапросОстатки);
	
	// Изменение кода. Начало. 12.05.2014{{
    ТекстОтбор = "{ЦФО.*, Сценарий.*, Организация.*}";
	// Изменение кода. Конец. 12.05.2014}}
	
	ТекстУсловия = ОграниченияПоРеквизитам + ОграниченияПоПостроителюОтчета_ЗапросОбороты;
	ТекстУсловияОбороты = ТекстУсловия;
	
	ТекстКорСчет = "";
	бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСчету(ТекстКорСчет, КорСчет, КорСчетВидСравнения, КорСчетИспользование);
	бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСубконто(ТаблицаКорСубконто, ТекстУсловияОбороты);

	ТекстОборотыИЗ = "
	|ИЗ
    |	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".Обороты(&ДатаНач, &ДатаКон, " + Периодичность + 
        ", Счет В ИЕРАРХИИ (&Счет), " + ОтборПоВидамСубконто + " , " + ТекстУсловияОбороты + ТекстОтбор + " , " + ТекстКорСчет + ") КАК Таблица
	| ";  	
	
	ТекстОстаткиИЗ = "
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, " + Периодичность + 
	    ", ДвиженияИГраницыПериода, счет В ИЕРАРХИИ (&счет), " + ОтборПоВидамСубконто + " , " + ТекстУсловия + ТекстОтбор + ") КАК Таблица
	|";
	
	ЕстьОтборПоКорСубконто = Ложь;
	Для каждого СтрТаблКорСб Из ТаблицаКорСубконто Цикл
		Если СтрТаблКорСб.Использование Тогда
			ЕстьОтборПоКорСубконто = Истина;
			Прервать;		
		КонецЕсли;   
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КорСчет) ИЛИ ЕстьОтборПоКорСубконто Тогда
		ТекстОстаткиИЗ = СтрЗаменить(ТекстОборотыИЗ, "Таблица", "ТаблицаОбороты") + "
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстОстаткиИЗ + "
		|	ПО ТаблицаОбороты.Счет = Таблица.Счет " + ТекстСоединениеПо;
	Иначе	
		ТекстОстаткиИЗ = "
		|ИЗ 
		|" + ТекстОстаткиИЗ;
	КонецЕсли;
		
	ТекстОбороты = ТекстОбороты + ТекстОборотыИЗ;
	ТекстОстатки = ТекстОстатки + ТекстОстаткиИЗ;
	
	ТекстИтогиОбороты = "";
	ТекстИтогиОстатки = "";
	ТекстПорядок      = "";
	
	Если ПоСубсчетам Тогда
		ТекстПорядок = ТекстПорядок + ", СчетПорядок";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Периодичность) Тогда
		Если ВРег(Периодичность) <> "РЕГИСТРАТОР" Тогда
			ТекстПорядок = ТекстПорядок + ", Таблица.Период";
		Иначе
			ТекстПорядок = ТекстПорядок + ", РегистраторДата, Таблица.Регистратор";
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
		Если Найти(Измерение.Имя, "КорСубконто") = 0 Тогда
			ТекстПорядок = ТекстПорядок + ", Таблица." + Измерение.ПутьКДанным;
		КонецЕсли;
	КонецЦикла;
	
	ТекстОбороты = ТекстОбороты + "
	|УПОРЯДОЧИТЬ ПО " + Сред(ТекстПорядок + ", КорСчетПорядок", 2);
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
			
		ТекстОстатки = ТекстОстатки + "
		|УПОРЯДОЧИТЬ ПО " + Сред(ТекстПорядок, 2);
		
	КонецЕсли;
	
	Для каждого ИмяРесурса Из МассивРесурсов Цикл
	
		ТекстИтогиОбороты = ТекстИтогиОбороты + ",
		|	СУММА(" + ИмяРесурса + "ОборотДт),
		|	СУММА(" + ИмяРесурса + "ОборотКт),
		|	СУММА(Есть" + ИмяРесурса + "ОборотДт),
		|	СУММА(Есть" + ИмяРесурса + "ОборотКт)";
		
		ТекстИтогиОстатки = ТекстИтогиОстатки + ",
		|	СУММА(" + ИмяРесурса + "НачДт),
		|	СУММА(" + ИмяРесурса + "НачКт),
		|	СУММА(" + ИмяРесурса + "КонДт),
		|	СУММА(" + ИмяРесурса + "КонКт),
		|	СУММА(" + ИмяРесурса + "ЕстьОборотДт),
		|	СУММА(" + ИмяРесурса + "ЕстьОборотКт)";

	КонецЦикла; 
		
	ТекстОбороты = ТекстОбороты + "
	|ИТОГИ " + Сред(ТекстИтогиОбороты, 2)+ "
	|	ПО ОБЩИЕ";
	
	ТекстОстатки = ТекстОстатки + "
	|ИТОГИ " + Сред(ТекстИтогиОстатки, 2)+ "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		ТекстОбороты = ТекстОбороты +	",
		|	Таблица.Счет ИЕРАРХИЯ КАК Счет";
		ТекстОстатки = ТекстОстатки +	",
		|	Таблица.Счет ИЕРАРХИЯ КАК Счет";
	КонецЕсли;
	
	// Добавим итоги по субконто
	ТекстОбороты = ТекстОбороты + ТекстСубконтоИзмерения + ТекстКорСубконтоИзмерения;
	ТекстОстатки = ТекстОстатки + ТекстСубконтоИзмерения;
	
	Если ЗначениеЗаполнено(Периодичность) Тогда
		
		Текст = ", Таблица.Период ";
		Если ВсеПериоды и Врег(Периодичность) <> "РЕГИСТРАТОР" Тогда
			Текст = Текст + " ПЕРИОДАМИ(" + Периодичность + ",,)";
		КонецЕсли;
		Текст = Текст + " КАК Период";
		
		ТекстОбороты = ТекстОбороты + Текст;
		ТекстОстатки = ТекстОстатки + Текст;
		
	КонецЕсли;
	
	ТекстОбороты = ТекстОбороты + ", Таблица.КорСчет ИЕРАРХИЯ КАК КорСчет";
	
	Если ПоВалютам Тогда
		ТекстОбороты = ТекстОбороты + ", Таблица.Валюта КАК Валюта";
		ТекстОстатки = ТекстОстатки + ", Таблица.Валюта КАК Валюта";
	КонецЕсли;
	
	ТекстОбороты = ТекстОбороты + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстОстатки = ТекстОстатки + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ЗапросОбороты.Текст = ТекстОбороты;
	ЗапросОстатки.Текст = ТекстОстатки;

КонецПроцедуры // СформироватьТекстЗапросов()

// Функция возвращает ограничения для отчета.
// 
// Параметры:
//  Запрос - Запрос
// 
Функция ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос)
	
	ОграниченияПоПостроителюОтчета = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
	
	СтрокаОграниченийПоРеквизитам = "";
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Возврат СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета;
	
КонецФункции // ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю()

// Процедура устанавливает ограничения по запросу.
// 
// Параметры:
//  Запрос - Запрос
//  АвтоматическиРассчитатьКонечнуюДатуОтчета - Булево.
// 
Процедура УстановитьПараметрыЗапроса(Запрос, Знач АвтоматическиРассчитатьКонечнуюДатуОтчета = Ложь)
	
	Запрос.УстановитьПараметр("Счет", Счет); 
	
	Если КорСчетИспользование Тогда
		Запрос.УстановитьПараметр("КорСчет", КорСчет);	
	КонецЕсли;
	бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_КорСубконто(Запрос, ТаблицаКорСубконто);
	
	Запрос.УстановитьПараметр("ДатаНач", Период.ДатаНачала);
		
	КонечнаяДатаОтчета = Период.ДатаОкончания;			
	Если АвтоматическиРассчитатьКонечнуюДатуОтчета Тогда  			
		Если НЕ(Не ЗначениеЗаполнено(Периодичность)
			ИЛИ Врег(Периодичность) = "РЕГИСТРАТОР") Тогда  				
			ДатаПоследнегоОборота = ПолучитьДатуПоследнегоОборотаПоОтчету();
			КонечнаяДатаОтчета = ДатаПоследнегоОборота;				
		КонецЕсли;  				
	КонецЕсли;     	
	Если КонечнаяДатаОтчета <> '00010101000000' Тогда
		КонечнаяДатаОтчета = Новый Граница(КонецДня(КонечнаяДатаОтчета), ВидГраницы.Включая);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ДатаКон", КонечнаяДатаОтчета);
	
КонецПроцедуры // УстановитьПараметрыЗапроса()

// Функция возвращает дату последнего оборота по ограничениям.
// 
// Параметры:
//  Нет
// 
Функция ПолучитьДатуПоследнегоОборотаПоОтчету()
	
	Запрос = Новый Запрос;
	УстановитьПараметрыЗапроса(Запрос);
	
	ОграниченияПоРеквизитам = ПолучитьСтрокуОграниченийПоРеквизитамИПостроителю(Запрос);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Максимум (Период) КАК Период
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".Обороты(&ДатаНач, &ДатаКон, " + Периодичность + ", Счет В ИЕРАРХИИ (&Счет), , " + 
	ОграниченияПоРеквизитам + ") КАК БухОбороты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КонецГода(ТекущаяДата());
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	КонечнаяДатаПериода = бит_БухгалтерскиеОтчетыКлиентСервер.ПолучитьДатуОкончанияПериода(Выборка.Период, Периодичность);
	Возврат КонечнаяДатаПериода;
	
КонецФункции // ПолучитьДатуПоследнегоОборотаПоОтчету()

// Процедура заполняет и присоединяет область.
// 
// Параметры:
//  Присоединять
//  ДокументРезультат
//  Область
//  Выборка
//  Уровень
//  ОкончаниеПараметра
// 
Процедура ЗаполнитьИПрисоединитьОбласть(Присоединять, ДокументРезультат, Область, Выборка, Уровень = Неопределено, ОкончаниеПараметра = "")
	
	Если НЕ Присоединять Тогда
		Возврат;
	КонецЕсли;
    
    Если Выборка <> Неопределено Тогда
        
        Область.Параметры.Заполнить(Выборка);
        
        Если Не ПустаяСтрока(ОкончаниеПараметра) Тогда
            
            ТекстСумма      = "";
            СтуктураРесурсы = Новый Структура(мТекстРесурсыДляВывода);
            
            Для Каждого КлючЗначение Из СтуктураРесурсы Цикл
                
                ТекстСумма = ТекстСумма + ?(ПустаяСтрока(ТекстСумма), "", Символы.ПС) 
                             + Строка(Формат(Выборка[КлючЗначение.Ключ + ОкончаниеПараметра], "ЧЦ=15; ЧДЦ=2"));
                
            КонецЦикла;
            
            Область.Параметры["Сумма" + ОкончаниеПараметра] = ТекстСумма;
            
        КонецЕсли;
        
    Иначе     
		
		Для Индекс = 0 По Область.Параметры.Количество() - 1 Цикл
            Область.Параметры.Установить(Индекс, Неопределено);
        КонецЦикла;
		
	КонецЕсли;
    
    ДокументРезультат.Присоединить(Область, Уровень);
    
КонецПроцедуры // ЗаполнитьИПрисоединитьОбласть()

// Вывод субконто определенного номера.
// 
// Параметры:
//  ВыборкаОбороты
//  ВыборкаОстатки
//  Инд
//  СтруктураПараметров
//  ОтборДляРасшифровки
//  ВыводКоличества
// 
Процедура ВыводСубконто(Знач ВыборкаОбороты, Знач ВыборкаОстатки, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки, Знач ВыводКоличества)
	
	Если Инд > СтруктураПараметров.МассивГруппировок.Количество() - 1 Тогда
		
		Если ЗначениеЗаполнено(Периодичность) Тогда 			
			ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества);			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;	
		
	Измерение = СтруктураПараметров.МассивГруппировок[Инд];
	ЭтоГруппировкаПоКор = Найти(Измерение, "КорСубконто") <> 0; 
	
	ОборотИспользован  = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	Если ЭтоГруппировкаПоКор  Тогда
		ОстатокИспользован = Ложь;
	Иначе
		ОстатокИспользован = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	КонецЕсли;          	
		
	ОстатокПрочитан = Ложь;
	ОборотПрочитан  = Ложь;
    
    // Проверим наличие количественного учета у субконто плана счетов.
    ЕстьКоличественныйПризнакУСубконто = Метаданные.ПланыСчетов[ИмяРегистраБухгалтерии].ПризнакиУчетаСубконто.Найти("Количественный") <> Неопределено;
    
	ВыводКоличества = ПоКоличеству И бит_БухгалтерскиеОтчетыСервер.ОпределитьПоСубконтоИПостроителюВестиКоличественныйУчет(Счет, ПостроительОтчета, Измерение, ЕстьКоличественныйПризнакУСубконто);
		
	Пока Истина Цикл
			
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
			
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
			
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан
		   И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			   
			ОборотИспользован = Истина;
			ОстатокИспользован = Истина;
            
		ИначеЕсли ОборотПрочитан И бит_БухгалтерскиеОтчетыСервер.ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству, Новый Структура(мТекстРесурсыДляВывода)) Тогда
            
			ОборотИспользован = Истина;
				
		ИначеЕсли ОстатокПрочитан Тогда
			
			ОстатокИспользован = Истина;
			
		ИначеЕсли ЭтоГруппировкаПоКор И ОборотПрочитан Тогда
			
			ОборотИспользован = Истина;
			
		КонецЕсли;
			
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
			
		Выборка 			   = ?(ОстатокИспользован, ВыборкаОстатки , ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован ,  ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки , Неопределено);
			
		ТипЗаписи = Выборка.ТипЗаписи();
		
		// Счета более верхнего уровня выводить не надо.
		Если Измерение = "Счет"
			И ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии
			И СтруктураПараметров.СоответствиеСчетовПредков[Выборка.Счет] <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Уровень = Выборка.Уровень();
			
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ВыводитьКоличествоВТекущейСтроке = Ложь;
		Иначе
			ВыводитьКоличествоВТекущейСтроке = ВыводКоличества;
		КонецЕсли;
			
		Если ВыводитьКоличествоВТекущейСтроке Тогда
			ТекстКоличество = "Количество";
		Иначе
			ТекстКоличество = "";
		КонецЕсли;
		
		ОблНачало          = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "Период"];
		ОблСальдоНачДт     = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "СальдоНачДт"];
		ОблСальдоНачКт     = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "СальдоНачКт"];
		ОблОборотДт        = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "ОборотДт"];
		ОблОборотКт        = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "ОборотКт"];
		ОблОборотДтКорСчет = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "ОборотДтКорСчет"];
		ОблОборотКтКорСчет = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "ОборотКтКорСчет"];
		ОблСальдоКонДт     = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "СальдоКонДт"];
		ОблСальдоКонКт     = СтруктураПараметров["ОбластьСтрокаСубконто" + ТекстКоличество + "СальдоКонКт"];
			
		ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень;
			
		// Вывод нач сальдо
		ОблНачало.Параметры.СубконтоПредставление = Выборка[Измерение + "Представление"];
			
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ОблНачало, Выборка, СтруктураПараметров);
			
		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень);
			
		// В итогах по иерархии шрифт меняется на наклонный.
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			
			СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт = 
				Новый Шрифт(СтруктураПараметров.ДокументРезультат.Область(СтруктураПараметров.ДокументРезультат.ВысотаТаблицы, 2).Шрифт, , , , Истина);
			
		КонецЕсли;
		
		// На начало периода дебет
		ЗаполнитьИПрисоединитьОбласть(СальдоНачДт, СтруктураПараметров.ДокументРезультат, ОблСальдоНачДт, ВыборкаОстаткиПараметр, Уровень, "НачДт");
		ЗаполнитьИПрисоединитьОбласть(СальдоНачКт, СтруктураПараметров.ДокументРезультат, ОблСальдоНачКт, ВыборкаОстаткиПараметр, Уровень, "НачКт");
        
		Если ОборотИспользован И (ОборотДтКорСчета ИЛИ ОборотКтКорСчета) Тогда
			ВыборкаПоКорСчетам = ВыборкаОборотыПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет", "Все");
		Иначе
			ВыборкаПоКорСчетам = Неопределено;
		КонецЕсли;
		
		// ОБОРОТЫ
		// оборот Дт
		ЗаполнитьИПрисоединитьОбласть(ОборотДт, СтруктураПараметров.ДокументРезультат, ОблОборотДт, ВыборкаОборотыПараметр, Уровень, "ОборотДт");
			
		Если ОборотДтКорСчета Тогда
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаПоКорСчетам, СтруктураПараметров, "ДТ", мТекстРесурсыДляВывода + ?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), 
				ОблОборотДтКорСчет, ОтборДляРасшифровки, Выборка);
		КонецЕсли;
					
		// Оборот Кт
		ЗаполнитьИПрисоединитьОбласть(ОборотКт, СтруктураПараметров.ДокументРезультат, ОблОборотКт, ВыборкаОборотыПараметр, Уровень, "ОборотКт");
			
		Если ОборотКтКорСчета Тогда
			Если ОборотИспользован Тогда
				ВыборкаПоКорСчетам.Сбросить();
			КонецЕсли;
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаПоКорСчетам, СтруктураПараметров, "КТ", мТекстРесурсыДляВывода + ?(ВыводитьКоличествоВТекущейСтроке, ", Количество", ""), 
				ОблОборотКтКорСчет, ОтборДляРасшифровки, Выборка);
		КонецЕсли;
		
		ЗаполнитьИПрисоединитьОбласть(СальдоКонДт, СтруктураПараметров.ДокументРезультат, ОблСальдоКонДт, ВыборкаОстаткиПараметр, Уровень, "КонДт");
		ЗаполнитьИПрисоединитьОбласть(СальдоКонКт, СтруктураПараметров.ДокументРезультат, ОблСальдоКонКт, ВыборкаОстаткиПараметр, Уровень, "КонКт");		
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, ОтборДляРасшифровки);
		КонецЕсли;
			
		// Вывод вложенных итогов
		Если ТипЗаписи <> ТипЗаписиЗапроса.ИтогПоИерархии Тогда
				
			ВыводСубконто(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, Инд + 1, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества);
			
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // ВыводСубконто()

// Вывод периодов
// 
// Параметры:
//  ВыборкаОбороты
//  ВыборкаОстатки
//  СтруктураПараметров
//  ОтборДляРасшифровки
//  ВыводКоличества
// 
Процедура ВывестиПериоды(ВыборкаОбороты, ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки, ВыводКоличества = Ложь)
	
	Измерение = "Период";
		
	ОстатокПрочитан = Ложь;
	ОборотПрочитан = Ложь;
		
	Если ВсеПериоды Тогда
		ОборотИспользован  = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение, "Все");
		ОстатокИспользован = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение, "Все");
	Иначе
		ОборотИспользован  = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		ОстатокИспользован = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	КонецЕсли;
	
	Если ВыводКоличества Тогда
		ТекстКоличество = "Количество";
	Иначе
		ТекстКоличество = "";
	КонецЕсли;
		
	ОблНачало          = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "Период"];
	ОблСальдоНачДт     = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "СальдоНачДт"];
	ОблСальдоНачКт     = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "СальдоНачКт"];
	ОблОборотДт        = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "ОборотДт"];
	ОблОборотКт        = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "ОборотКт"];
	ОблОборотДтКорСчет = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "ОборотДтКорСчет"];
	ОблОборотКтКорСчет = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "ОборотКтКорСчет"];
	ОблСальдоКонДт     = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "СальдоКонДт"];
	ОблСальдоКонКт     = СтруктураПараметров["ОбластьСтрока" + ТекстКоличество + "СальдоКонКт"];
	
	Пока Истина Цикл
		
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
		
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
		
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан
			И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			
			ОборотИспользован = Истина;
			ОстатокИспользован = Истина;
            
        ИначеЕсли ОборотПрочитан И бит_БухгалтерскиеОтчетыСервер.ЭтоНулевойОборот(ВыборкаОбороты, ПоКоличеству, Новый Структура(мТекстРесурсыДляВывода)) Тогда
            
			ОборотИспользован = Истина;
			
		ИначеЕсли ОстатокПрочитан Тогда
			ОстатокИспользован = Истина;
		КонецЕсли;
		
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
		
		Если Не ОборотИспользован И Не ВсеПериоды Тогда
			Продолжить;
		КонецЕсли;
				
		Выборка 			   = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован , ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
		
		
		ДанныеПериода = ?(Врег(Периодичность)="РЕГИСТРАТОР", Выборка.РегистраторПредставление, Выборка.Период);
		
		Если ДанныеПериода = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Уровень = Выборка.Уровень();
		
		ОблНачало.Параметры.Период = ДанныеПериода;
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ОблНачало, Выборка, СтруктураПараметров);
		ОтборДляРасшифровки.Вставить("Период", Выборка.Период);
		
		ОблНачало.Область(1, 2, ОблНачало.ВысотаТаблицы, 2).Отступ = Уровень;

		СтруктураПараметров.ДокументРезультат.Вывести(ОблНачало, Уровень);
		
		ЗаполнитьИПрисоединитьОбласть(СальдоНачДт, СтруктураПараметров.ДокументРезультат, ОблСальдоНачДт, ВыборкаОстаткиПараметр, Уровень, "НачДт");
		ЗаполнитьИПрисоединитьОбласть(СальдоНачКт, СтруктураПараметров.ДокументРезультат, ОблСальдоНачКт, ВыборкаОстаткиПараметр, Уровень, "НачКт");
		
		// Одна выборку будем использовать для вывода дебетовых и кредитовых оборотов
		// ВыборкаОборотыПоКорСчетам = Неопределено;
		
		Если (ОборотДтКорСчета ИЛИ ОборотКтКорСчета) 
		   И ОборотИспользован Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаОборотыПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		Иначе
			ВыборкаОборотыПоКорСчетам = Неопределено;
		КонецЕсли;
		
		// Оборот Дт
		ЗаполнитьИПрисоединитьОбласть(ОборотДт, СтруктураПараметров.ДокументРезультат, ОблОборотДт, ВыборкаОборотыПараметр, Уровень, "ОборотДт");
		
		Если ОборотДтКорСчета Тогда
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", мТекстРесурсыДляВывода + ?(ВыводКоличества, ",Количество", ""), 
				ОблОборотДтКорСчет, ОтборДляРасшифровки, Выборка);
		КонецЕсли;
		
		// Оборот Кт
		ЗаполнитьИПрисоединитьОбласть(ОборотКт, СтруктураПараметров.ДокументРезультат, ОблОборотКт, ВыборкаОборотыПараметр, Уровень, "ОборотКт");
		
		Если ОборотКтКорСчета Тогда
			Если ОборотИспользован Тогда
				ВыборкаОборотыПоКорСчетам.Сбросить();
			КонецЕсли;
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", мТекстРесурсыДляВывода, 
				ОблОборотКтКорСчет, ОтборДляРасшифровки, Выборка);
		КонецЕсли;
		
		// Вывод конечного сальдо
		ЗаполнитьИПрисоединитьОбласть(СальдоКонДт, СтруктураПараметров.ДокументРезультат, ОблСальдоКонДт, ВыборкаОстаткиПараметр, Уровень, "КонДт");
		ЗаполнитьИПрисоединитьОбласть(СальдоКонКт, СтруктураПараметров.ДокументРезультат, ОблСальдоКонКт, ВыборкаОстаткиПараметр, Уровень, "КонКт");
		
		Если ПоВалютам Тогда
			ВывестиВалюты(ВыборкаОборотыПараметр, ВыборкаОстаткиПараметр, СтруктураПараметров, ОтборДляРасшифровки);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ВывестиПериоды()

// Вывод валют
// 
// Параметры:
//  ВыборкаОбороты
//  ВыборкаОстатки
//  СтруктураПараметров
//  ОтборДляРасшифровки
// 
Процедура ВывестиВалюты(Знач ВыборкаОбороты, Знач ВыборкаОстатки, СтруктураПараметров, ОтборДляРасшифровки)
	
	Измерение = "Валюта";
		
	ОстатокПрочитан = Ложь;
	ОборотПрочитан  = Ложь;
		
	ОборотИспользован  = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОбороты, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	ОстатокИспользован = бит_БухгалтерскиеОтчетыСервер.СформироватьВыборку(ВыборкаОстатки, ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
	Пока Истина Цикл
		
		Если ОстатокИспользован Тогда
			ОстатокПрочитан = ВыборкаОстатки.Следующий();
			ОстатокИспользован = Ложь;
		КонецЕсли;
		
		Если ОборотИспользован Тогда
			ОборотПрочитан = ВыборкаОбороты.Следующий();
			ОборотИспользован = Ложь;
		КонецЕсли;
		
		// Оборот сопоставляется с остатком
		Если ОборотПрочитан И ОстатокПрочитан
			И ВыборкаОстатки[Измерение] = ВыборкаОбороты[Измерение] Тогда
			
			ОборотИспользован = Истина;
			ОстатокИспользован = Истина;
            
		ИначеЕсли ОборотПрочитан И бит_БухгалтерскиеОтчетыСервер.ЭтоНулевойОборот(ВыборкаОбороты, Ложь, Новый Структура(мТекстРесурсыДляВывода)) Тогда
        
			ОборотИспользован = Истина;
			
		ИначеЕсли ОстатокПрочитан Тогда
			ОстатокИспользован = Истина;
		КонецЕсли;
		
		Если Не ОстатокИспользован И Не ОборотИспользован Тогда
			Прервать;
		КонецЕсли;
				
		Выборка 			   = ?(ОстатокИспользован, ВыборкаОстатки, ВыборкаОбороты);
		ВыборкаОборотыПараметр = ?(ОборотИспользован , ВыборкаОбороты, Неопределено);
		ВыборкаОстаткиПараметр = ?(ОстатокИспользован, ВыборкаОстатки, Неопределено);
		
		Уровень = Выборка.Уровень();
		
		// Расшифровка
		// ЗаполнитьПараметрыРасшифровки(ОблНачало, Выборка, СтруктураПараметров);
		ОтборДляРасшифровки.Вставить("ПоВалюте", Истина);
		ОтборДляРасшифровки.Вставить("Валюта"  , Выборка.Валюта);
		
		// Вывод начала строки
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалютаПериод;
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаОстатки);
		ВыводимаяОбласть.Параметры.ВалютаПредставление = "В валюте " + ВыводимаяОбласть.Параметры.ВалютаПредставление;
		Если Не ПустаяСтрока(мТекстРесурсыДляВывода) Тогда
			СтуктураРесурсы = Новый Структура(мТекстРесурсыДляВывода);
			ВыводимаяОбласть.Параметры.Показатель = "";
            Для Каждого КлючЗначение Из СтуктураРесурсы Цикл
                ВыводимаяОбласть.Параметры.Показатель = ВыводимаяОбласть.Параметры.Показатель 
										+ бит_БухгалтерскиеОтчетыСервер.ПолучитьПредставлениеПоказателя(КлючЗначение.Ключ) 
										+ Символы.ПС;
            КонецЦикла;	
		КонецЕсли;
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		
		ЗаполнитьИПрисоединитьОбласть(СальдоНачДт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачДт, ВыборкаОстаткиПараметр, Уровень, "НачДт");
		ЗаполнитьИПрисоединитьОбласть(СальдоНачКт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаСальдоНачКт, ВыборкаОстаткиПараметр, Уровень, "НачКт");
		
		Если (ОборотДтКорСчета ИЛИ ОборотКтКорСчета) 
		   И ОборотИспользован Тогда
			ВыборкаОборотыПоКорСчетам = ВыборкаОборотыПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "КорСчет");
		Иначе
			ВыборкаОборотыПоКорСчетам = Неопределено;
		КонецЕсли;
		
		// Оборот Дт
		ЗаполнитьИПрисоединитьОбласть(ОборотДт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаОборотДт, ВыборкаОборотыПараметр, Уровень, "ОборотДт");
		
        Если ОборотДтКорСчета Тогда
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "ДТ", мТекстРесурсыДляВывода + ?(ПустаяСтрока(мТекстРесурсыДляВывода), "", ", ") + "ВалютнаяСумма", 
				СтруктураПараметров.ОбластьСтрокаВалютаОборотДтКорСчет, ОтборДляРасшифровки, ВыборкаОбороты);
		КонецЕсли;
		
		// Оборот Кт
		ЗаполнитьИПрисоединитьОбласть(ОборотКт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаОборотКт, ВыборкаОборотыПараметр, Уровень, "ОборотКт");
		
		Если ОборотКтКорСчета Тогда
			Если ОборотИспользован Тогда
				ВыборкаОборотыПоКорСчетам.Сбросить();
            КонецЕсли;
			// Вывод вложенных итогов по кор счетам
			ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, "КТ", мТекстРесурсыДляВывода + ?(ПустаяСтрока(мТекстРесурсыДляВывода), "", ", ") + "ВалютнаяСумма", 
				СтруктураПараметров.ОбластьСтрокаВалютаОборотКтКорСчет, ОтборДляРасшифровки, ВыборкаОбороты);
		КонецЕсли;
		
		// Вывод конечного сальдо
		ЗаполнитьИПрисоединитьОбласть(СальдоКонДт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонДт, ВыборкаОстаткиПараметр, Уровень, "КонДт");
		ЗаполнитьИПрисоединитьОбласть(СальдоКонКт, СтруктураПараметров.ДокументРезультат, СтруктураПараметров.ОбластьСтрокаВалютаСальдоКонКт, ВыборкаОстаткиПараметр, Уровень, "КонКт");
		
	КонецЦикла;

КонецПроцедуры // ВывестиВалюты()

// Вывод кор счетов
// 
// Параметры:
//  ВыборкаОборотыПоКорСчетам
//  СтруктураПараметров
//  ВидОборота
//  Ресурсы
//  ВыводимаяОбласть
//  ОтборДляРасшифровки
//  ДанныеГруппировки
// 
Процедура ВывестиКорСчета(ВыборкаОборотыПоКорСчетам, СтруктураПараметров, ВидОборота, Ресурсы, ВыводимаяОбласть, 
						ОтборДляРасшифровки = Неопределено, ДанныеГруппировки)
							
	СтРесурсы = Новый Структура(Ресурсы);
	
	Если ВидОборота = "ДТ" Тогда 		
		ТипПоля = "ОборотДт";
		СписокСчетов = СтруктураПараметров.СписокДт; 		
	ИначеЕсли ВидОборота = "КТ" Тогда  		
		ТипПоля = "ОборотКт";
		СписокСчетов = СтруктураПараметров.СписокКт;  		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Создадим структуру соотвтетствиия кор счетов структуре ресурство.
	Соотв = Новый Соответствие;
	Для каждого Элемент Из СписокСчетов Цикл
		Соотв[Элемент.Значение] = Новый Структура(Ресурсы);
	КонецЦикла;
	
	ВерхнийУровень = 1000;
	
	// Обойдем выборку по счетам, получим все ненулевые значения ресурсов и поставим их в соответсвие счетам.
	Пока ВыборкаОборотыПоКорСчетам <> Неопределено И ВыборкаОборотыПоКорСчетам.Следующий() Цикл
		
		// Это итог по строке остатка
		Если ВыборкаОборотыПоКорСчетам.КорСчет = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		// В выборке присутствуют счета всех уровней, если не нужно выводить субсчета, пропускаем 
		// группировки следующего уровня.
		Если НЕ ПоСубсчетамКорСчетов Тогда
			
			// Выводим только верхний уровень
			Если ВерхнийУровень < ВыборкаОборотыПоКорСчетам.Уровень() Тогда
				Продолжить;
			Иначе
				ВерхнийУровень = ВыборкаОборотыПоКорСчетам.Уровень();
			КонецЕсли;
			
		КонецЕсли;
		
		СтЗначенияРесурсов = Новый Структура(Ресурсы);
		Вставлять = Ложь;
		
		Для каждого Элемент Из СтРесурсы Цикл
			
			Если НЕ бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(ВыборкаОборотыПоКорСчетам[Элемент.Ключ + ТипПоля]) = 0 Тогда
				СтЗначенияРесурсов.Вставить(Элемент.Ключ, ВыборкаОборотыПоКорСчетам[Элемент.Ключ + ТипПоля]);
				
				Вставлять = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Полученную структуру вставляем в соответствие счетов.
		Если Вставлять Тогда
			Соотв.Вставить(ВыборкаОборотыПоКорСчетам.КорСчет, СтЗначенияРесурсов);
		КонецЕсли;
		
	КонецЦикла;

	Если ВыборкаОборотыПоКорСчетам <> Неопределено Тогда
		ВыборкаОборотыПоКорСчетам.Сбросить();
		ВыборкаОборотыПоКорСчетам.Следующий();
	КонецЕсли;
    
    СтруктураРесурсов = Новый Структура(мТекстРесурсыДляВывода);
	
	// Получим префикс имени отчета расшифровки.
    Префикс = ?(Найти(ИмяРегистраБухгалтерии, "бит") = 0, "", "бит_");
    
    // Удалим из имени регистра бухгалтерии префикс "бит".
    ИмяРегистраБухгалтерииБезПрефикса = СтрЗаменить(ИмяРегистраБухгалтерии, "бит", "");
	
	// Вывод ресурсов
	Для каждого ЭлементСчет Из СписокСчетов Цикл
        
        ТекстСумма = "";
        
        Для Каждого КлючЗначение Из СтруктураРесурсов Цикл
            
            ТекстСумма = ТекстСумма + ?(ПустаяСтрока(ТекстСумма), "", Символы.ПС) 
                         + Строка(Формат(Соотв[ЭлементСчет.Значение][КлючЗначение.Ключ], "ЧЦ=15; ЧДЦ=2"));
            
        КонецЦикла;

        ВыводимаяОбласть.Параметры["Сумма" + ТипПоля] = ТекстСумма;
        
        Для каждого Элемент Из Соотв[ЭлементСчет.Значение] Цикл
            
            Если Найти(ВРег(Элемент.Ключ), "ВАЛЮТНАЯСУММА") <> 0
                Или Найти(ВРег(Элемент.Ключ), "КОЛИЧЕСТВО") <> 0 Тогда
                ВыводимаяОбласть.Параметры[Элемент.Ключ+ТипПоля] = Элемент.Значение;
            КонецЕсли;
            
        КонецЦикла;    
        
			Расшифровка              = Новый Структура;
			РасшифровкаОтборПоСчетам = Новый Структура;
			
			бит_БухгалтерскиеОтчетыСервер.ЗаменитьОбщиеОтборыНаОтборыДтКт(ОтборДляРасшифровки, РасшифровкаОтборПоСчетам, ВидОборота);
			
			Если НЕ ЗначениеЗаполнено(ДанныеГруппировки) Тогда
				Продолжить;
			КонецЕсли;
			КонечнаяСтрока = (ДанныеГруппировки.Группировка() = "" или ДанныеГруппировки.Группировка() = "Период");
			ПромежуточныеДопОтборы = бит_БухгалтерскиеОтчетыСервер.СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, 
				ДанныеГруппировки, СтруктураПараметров.МассивГруппировок, КонечнаяСтрока);
				
			ДополнительныеОтборы = Новый Структура;
			бит_БухгалтерскиеОтчетыСервер.ЗаменитьОбщиеОтборыНаОтборыДтКт(ПромежуточныеДопОтборы, ДополнительныеОтборы, ВидОборота);
			
			ВидКорОборота = ?(ВидОборота = "ДТ", "Кт", "Дт");
			Для каждого СтрКорСб Из ТаблицаКорСубконто Цикл
				НовСтрКорСб = ПромежуточныеДопОтборы.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрКорСб, СтрКорСб, , "Имя, Представление");
			    НовСтрКорСб.ПутьКДанным = СтрЗаменить(СтрКорСб.Имя, "КорСубконто", "Субконто" + ВидКорОборота);
				НовСтрКорСб.Имя 	    = НовСтрКорСб.ПутьКДанным;			
			КонецЦикла;
			
			Расшифровка.Вставить("ДополнительныеОтборы", Новый ХранилищеЗначения(ПромежуточныеДопОтборы));
						
			Расшифровка.Вставить("Отбор"     , РасшифровкаОтборПоСчетам);
			Расшифровка.Вставить("ИмяОбъекта", Префикс + "ОтчетПоПроводкам" + ИмяРегистраБухгалтерииБезПрефикса);
			
			Если Не ПоСубсчетам Тогда
				СчетДляОграничений = Счет;
			Иначе
				СчетДляОграничений = ДанныеГруппировки.Счет;
			КонецЕсли;
			
			Если ВыборкаОборотыПоКорСчетам <> Неопределено И Периодичность <> "" И ВыборкаОборотыПоКорСчетам.Период <> NULL Тогда
				Расшифровка.Вставить("ДатаНач", Период.ДатаНачала); 
				КонечнаяДатаОграничений = бит_БухгалтерскиеОтчетыКлиентСервер.ПолучитьДатуОкончанияПериода(ВыборкаОборотыПоКорСчетам.Период, Периодичность);
				Расшифровка.Вставить("ДатаКон", КонечнаяДатаОграничений);
				Расшифровка.Вставить("ОграничениеПоПериоду", ВыборкаОборотыПоКорСчетам.Период);
			КонецЕсли;
			
			Если ВидОборота = "ДТ" Тогда
				
				Расшифровка.Вставить("СчетДт", СчетДляОграничений);
				Расшифровка.Вставить("СчетКт", ЭлементСчет.Значение);
				ВыводимаяОбласть.Параметры.РасшифровкаДт = Расшифровка;
				
			Иначе
				
				Расшифровка.Вставить("СчетДт", ЭлементСчет.Значение);
				Расшифровка.Вставить("СчетКт", СчетДляОграничений);
				ВыводимаяОбласть.Параметры.РасшифровкаКт = Расшифровка;
				
			КонецЕсли;
			
		СтруктураПараметров.ДокументРезультат.Присоединить(ВыводимаяОбласть);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиКорСчета()

// Заполняет параметры расшифровки.
// 
// Параметры:
// 	Нет
// 
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, Знач СтруктураПараметров)

	// Получим префикс имени отчета расшифровки.
    Префикс = ?(Найти(ИмяРегистраБухгалтерии, "бит") = 0, "", "бит_");
    
    // Удалим из имени регистра бухгалтерии префикс "бит".
    ИмяРегистраБухгалтерииБезПрефикса = СтрЗаменить(ИмяРегистраБухгалтерии, "бит", "");
	
	Если Не ПоСубсчетам ИЛИ Выборка.Счет = Null Тогда
		СчетРасшифровки = Счет;
	Иначе
		СчетРасшифровки = Выборка.Счет;
	КонецЕсли;
	
	ПараметрыРасшифровки = Новый Структура;
	
	ПараметрыРасшифровки.Вставить("ИмяОбъекта", Префикс + "ОтчетПоПроводкам" + ИмяРегистраБухгалтерииБезПрефикса);

	ПараметрыРасшифровки.Вставить("Счет", Счет);
	
	ПараметрыРасшифровки.Вставить("ТаблицаКорСубконто", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаКорСубконто));

	Если Лев(Выборка.Группировка(), 8) = "Субконто" Или Лев(Выборка.Группировка(), 11) = "КорСубконто" 
		ИЛИ Лев(Выборка.Группировка(), 12) = "Организация" ИЛИ Лев(Выборка.Группировка(), 3) = "ЦФО" Тогда

		// Надо в структуру доп ограничений поместить все группировки более высокого уровня.
		ДополнительныеОтборы = бит_БухгалтерскиеОтчетыСервер.СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, Выборка, СтруктураПараметров.МассивГруппировок);
				
		ПараметрыРасшифровки.Вставить("ДополнительныеОтборы", Новый ХранилищеЗначения(ДополнительныеОтборы));
		
		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыРасшифровки, Нстр("ru = 'Журнал проводок '") + СчетРасшифровки);
				
	ИначеЕсли Выборка.Группировка() = "Период" Тогда
		
		ПараметрыРасшифровки.Вставить("ДатаНач", Период.ДатаНачала);
		КонечнаяДатаОграничений = бит_БухгалтерскиеОтчетыКлиентСервер.ПолучитьДатуОкончанияПериода(Выборка.Период, Периодичность);
		ПараметрыРасшифровки.Вставить("ДатаКон", КонечнаяДатаОграничений);
		
		ПараметрыРасшифровки.Вставить("ОграничениеПоПериоду", Выборка.Период);
		
		ДополнительныеОтборы = бит_БухгалтерскиеОтчетыСервер.СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, Выборка, СтруктураПараметров.МассивГруппировок, Истина);
				
		ПараметрыРасшифровки.Вставить("ДополнительныеОтборы", Новый ХранилищеЗначения(ДополнительныеОтборы));
					
		СписокРасшифровки = Новый СписокЗначений;
			
		СписокРасшифровки.Добавить(ПараметрыРасшифровки, Нстр("ru = 'Журнал проводок '") + СчетРасшифровки);
		
	Иначе
		СписокРасшифровки = Неопределено;
	КонецЕсли;
	
	Область.Параметры.Расшифровка = СписокРасшифровки;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

#КонецОбласти

#КонецОбласти

#Область Инициализация

ИмяРегистраБухгалтерии = "бит_Бюджетирование";

Периодичность = "МЕСЯЦ"; 

СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

#КонецОбласти

#КонецЕсли
