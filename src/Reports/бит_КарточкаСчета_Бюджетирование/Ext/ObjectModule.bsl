#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Текущий вариант отчета.

Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Процедура выполняет сохранение настроек отчета.
//
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина, , Истина);
	
КонецПроцедуры // ПрименитьНастройку()

// Процедура запоняет начальные настройки отчета.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	СтарыеНастройки = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
		
	бит_БухгалтерскиеОтчетыСервер.УстановитьЗапросИОтборПостроителяПоСубконтоДляДвижений(Счет, ИмяРегистраБухгалтерии, ПостроительОтчета,
			"Валюта.*, ЦФО.*, Сценарий.*, Организация.*");
        				
	бит_БухгалтерскиеОтчетыСервер.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
		
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек.
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

#КонецОбласти

#Область ЗаголовокОтчета

// Функция формирует заголовок отчета (синоним).
// 
// Возвращаемое значение:
//  Строка - заголовок отчета.
// 
Функция ЗаголовокОтчета() Экспорт
	
	ПредставлениеРегистра = "бюджетирование";
	СтрокаПоСчету 		  = ?(ЗначениеЗаполнено(Счет), Счет, Нстр("ru = ' не выбран счет'"));
	
	ТекстЗаголовка = Нстр("ru = 'Карточка счета %2% (%1%)'");  	
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра, СтрокаПоСчету);
  		
	Возврат ТекстЗаголовка;	
    
КонецФункции // ЗаголовокОтчета()

// Функция выводит шапку отчета.
// 
// Возвращаемое значение:
// 	ТабличныйДокумент - заголовок отчета.
// 
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);
		
	Макет = ПолучитьМакет("КарточкаСчета");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");
	ЗаголовокОтчета.Параметры.ОписаниеПериода  = ОписаниеПериода;
	ЗаголовокОтчета.Параметры.Заголовок        = ЗаголовокОтчета();

    ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
    КонецЕсли;
    Если ВыводитьСуммуСценарий Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (сценарий)'");
    КонецЕсли;
    
    ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'количество'");
    ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0
                                                        И Найти(ТекстСписокПоказателей, "количество") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
    
    ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстСписокПоказателей;
    
	// Вывод списка фильтров:
	СтрФильтры   = "";

	СтрФильтры = Сред(СтрФильтры + ", " + бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор), 3);

	ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");

	Если Не ПустаяСтрока(СтрФильтры) Тогда
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрФильтры;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

#КонецОбласти

#Область ФормированиеОтчета

// Процедура выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент - Табличный документ, формируемый отчетом.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина) - признак отображения заголовка.
//  ВысотаЗаголовка     - Число (По умолчанию = 0) - высота заголовка.
// 
// Возвращаемое значение:
//  Булево - отчет сформирован.
// 
Функция СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Очистка табличного поля
	ДокументРезультат.Очистить();
	   	
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
        
        ОтчетСформирован = Истина;
        
        СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
        
	    // Сформируем массив показателей.
	    МассивПоказателей = СформироватьМассивПоказателей();
	    
		// Выберем в соответствие все подчиненные счета (для определения принадлежности выводимого счета дебета, кредита):
		ПланСчетовРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов;
		ИмяПланаСчетов     = ПланСчетовРегистра.Имя;
	    
		СоответствиеПодчиненныеСчета = бит_БухгалтерскиеОтчетыСервер.ВернутьСоответвиеПодчиненныхСчетов(ИмяПланаСчетов, Счет, Истина);
		
		Для Каждого Элемент Из СоответствиеПодчиненныеСчета Цикл			
			СоответствиеПодчиненныеСчета[Элемент.Ключ] = -1; 			
		КонецЦикла;
		
		СоответствиеСчетовКэш = Новый Соответствие; 
				
		// Вывод заголовка отчета
		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	       	    
	    
		Макет = ПолучитьМакет("КарточкаСчета");

		ЗапросПоОстаткам = Новый Запрос();
		ЗапросПоОстаткам.УстановитьПараметр("СчетАнализа", Счет);
		ЗапросПоОстаткам.УстановитьПараметр("Период"     , ?(Не ЗначениеЗаполнено(Период.ДатаНачала), (Период.ДатаНачала + 1), НачалоДня(Период.ДатаНачала)));

		СтрокаОграниченийПоРеквизитам = "";
		
		ТекстФильтры 				  = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, ЗапросПоОстаткам);
		СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
	    
	    СтруктураСумм = Новый Структура;
	    
	    ТекстРесурсовОстатков   = "";
	    ТекстРесурсовВЛЗапроса  = "";
	    ТекстРесурсовПроводок   = "";
	    ТекстРесурсыПромежИтоги = "";
	    
	    // Сформирует текст выборки выбранных ресурсов (показателей).
	    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
	        
	        ТекстРесурсовОстатков = ТекстРесурсовОстатков + "
	                        |	СУММА(Выборка." + ТекПоказатель + "ОстатокДт) КАК " + ТекПоказатель + "ОстатокДт,
	                        |	СУММА(Выборка." + ТекПоказатель + "ОстатокКт) КАК " + ТекПоказатель + "ОстатокКт,
	                        |	СУММА(Выборка." + ТекПоказатель + "Остаток)   КАК " + ТекПоказатель + "Остаток,";
	                        
	        ТекстРесурсовВЛЗапроса = ТекстРесурсовВЛЗапроса + "
	                        |	" + ТекПоказатель + "ОстатокДт,
	                        |	" + ТекПоказатель + "ОстатокКт,
	                        |	" + ТекПоказатель + "Остаток,";
	                        
	        ТекстРесурсовПроводок = ТекстРесурсовПроводок + Символы.ПС + " 
	                        |	" + ТекПоказатель + " КАК " + ТекПоказатель + ",";
	                        
	        ТекстРесурсыПромежИтоги = ТекстРесурсыПромежИтоги + Символы.ПС + " 
	                        |	СУММА(" + ТекПоказатель + "),";
	         
	        // Вставим параметры которые необходимы будут нам
	        // для вывода отчета для текущего показателя.
	        СтруктураСумм.Вставить(ТекПоказатель + "ОборотДт"     , 0);
	        СтруктураСумм.Вставить(ТекПоказатель + "ОборотКт"     , 0);
	        СтруктураСумм.Вставить(ТекПоказатель + "ИтогоОборотДт", 0);
	        СтруктураСумм.Вставить(ТекПоказатель + "ИтогоОборотКт", 0);
	        
	    КонецЦикла;

		// Изменение кода. Начало. 07.05.2014{{
	    ТекстДопОтбор = "{ЦФО.*, Сценарий.*, Организация.*}";
		// Изменение кода. Конец. 07.05.2014}}
	    
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ТекстРесурсовОстатков + "
		|	СУММА(Выборка.КоличествоОстатокДт) КАК КоличествоОстатокДт,
		|	СУММА(Выборка.КоличествоОстатокКт) КАК КоличествоОстатокКт
		|ИЗ
		|(ВЫБРАТЬ
		|	Счет," + ТекстРесурсовВЛЗапроса + "
		|	КоличествоОстатокДт,
		|	КоличествоОстатокКт
		|ИЗ
		|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".Остатки(&Период, Счет В ИЕРАРХИИ (&СчетАнализа), ," 
		+ СтрокаОграниченийПоРеквизитам + ТекстДопОтбор + ") КАК ОсновнойОстатки 	
		|
		|) КАК Выборка";
		
		ЗапросПоОстаткам.Текст = ТекстЗапроса;
		
		// Нужно ли делать промежуточные итоги по периоду или нет.
		НужныПромежуточныеИтогиПоПериоду = (Не ПустаяСтрока(Периодичность)) И (Не ВРег(Периодичность) = "ПЕРИОД");

		ЗапросПоПроводкам = Новый Запрос();
		ЗапросПоПроводкам.УстановитьПараметр("СчетАнализа", Счет);
		Если КорСчетИспользование Тогда
			ЗапросПоПроводкам.УстановитьПараметр("КорСчет", КорСчет);	
		КонецЕсли;
		бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_КорСубконто(ЗапросПоПроводкам, ТаблицаКорСубконто);
		ЗапросПоПроводкам.УстановитьПараметр("НачПериода" , ?(Не ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, НачалоДня(Период.ДатаНачала)));
		ЗапросПоПроводкам.УстановитьПараметр("КонПериода" , ?(Не ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецДня(Период.ДатаОкончания)));
		ЗапросПоПроводкам.УстановитьПараметр("Дебет"      , ВидДвиженияБухгалтерии.Дебет);
		ЗапросПоПроводкам.УстановитьПараметр("Кредит"     , ВидДвиженияБухгалтерии.Кредит);
		ЗапросПоПроводкам.УстановитьПараметр("ПустойСчет" , ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка());

		Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Корреспонденция Тогда
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетДт,
			|	СчетКт,
			|	СчетДт.Представление КАК СчетДтПредставление,
			|	СчетКт.Представление КАК СчетКтПредставление,
			|	ВалютаДт,
			|	ВалютаКт,
			|	ПРЕДСТАВЛЕНИЕ(ВалютаДт) КАК ВалютаДтПредставление,
			|	ПРЕДСТАВЛЕНИЕ(ВалютаКт) КАК ВалютаКтПредставление,
			|	КоличествоДт     КАК КоличествоДт,
			|	КоличествоКт     КАК КоличествоКт,
			|	ВалютнаяСуммаДт  КАК ВалютнаяСуммаДт,
			|	ВалютнаяСуммаКт  КАК ВалютнаяСуммаКт,";

			Для Индекс = 1 По ПланСчетовРегистра.МаксКоличествоСубконто Цикл
				
				ТекстЗапроса = ТекстЗапроса + "
				|	СубконтоДт" + Строка(Индекс) + "," + Символы.ПС + "
				|	ПРЕДСТАВЛЕНИЕ(СубконтоДт" + Строка(Индекс) + ") КАК СубконтоДт" + Строка(Индекс) + "Представление, 
				|	СубконтоКт" + Строка(Индекс) + "," + Символы.ПС + " 
				|	ПРЕДСТАВЛЕНИЕ(СубконтоКт" + Строка(Индекс) + ") КАК СубконтоКт" + Строка(Индекс) + "Представление,";
				
			КонецЦикла;

		Иначе
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидДвижения,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетДт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетКт,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетДтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетКтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Валюта ИНАЧЕ NULL КОНЕЦ КАК ВалютаДт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Валюта ИНАЧЕ NULL КОНЕЦ КАК ВалютаКт,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Валюта.Представление ИНАЧЕ NULL КОНЕЦ КАК ВалютаДтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Валюта.Представление ИНАЧЕ NULL КОНЕЦ КАК ВалютаКтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоДт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоКт,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА ВалютнаяСумма ИНАЧЕ 0 КОНЕЦ КАК ВалютнаяСуммаДт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА ВалютнаяСумма ИНАЧЕ 0 КОНЕЦ КАК ВалютнаяСуммаКт,";

			Для Индекс = 1 По ПланСчетовРегистра.МаксКоличествоСубконто Цикл
				
				ТекстЗапроса = ТекстЗапроса + "
				|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Субконто" + Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт" + Строка(Индекс) + ",
				|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Субконто" + Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт" + Строка(Индекс); 
				
			КонецЦикла;

		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + ТекстРесурсовПроводок;
			
		Если НужныПромежуточныеИтогиПоПериоду Тогда
				
			ТекстЗапроса = ТекстЗапроса + "
				|	НАЧАЛОПЕРИОДА(Период, " + Периодичность + ") КАК Период,";
				
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса + "
		|	ПРЕДСТАВЛЕНИЕ(Регистратор)КАК ПредставлениеОперации,
		|	Регистратор      КАК ДокументОперации,
		|	Период           КАК ДатаОперации,
		|	Содержание       КАК Операция,
		|	НомерЖурнала,
		|	НомерСтроки,
	    |	ЦФО,
		|	Сценарий,  
		|   Организация
		|
		|ИЗ
		|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ДвиженияССубконто(
		|		&НачПериода,
		|		&КонПериода,
		|";
		
		
		СтрокаОграниченийПоРеквизитам = " (Активность = ИСТИНА) И (Счет В ИЕРАРХИИ (&СчетАнализа))";
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСчету(СтрокаОграниченийПоРеквизитам, КорСчет, КорСчетВидСравнения, КорСчетИспользование);
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСубконто(ТаблицаКорСубконто, СтрокаОграниченийПоРеквизитам);

		ТекстФильтры 				  = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, ЗапросПоПроводкам);
		СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
			
		
		ТекстЗапроса = ТекстЗапроса + СтрокаОграниченийПоРеквизитам + ТекстДопОтбор + "
		|	) КАК ОсновнойДвиженияССубконто
		|";
		
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО ДатаОперации, Регистратор ";
		
		Если НужныПромежуточныеИтогиПоПериоду Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ " + ТекстРесурсыПромежИтоги + "
				|	СУММА(КоличествоДт), 
				|	СУММА(ВалютнаяСуммаДт), 
				|	СУММА(КоличествоКт), 
				|	СУММА(ВалютнаяСуммаКт) 
				|
				|ПО
				|	Период";
				
		КонецЕсли;
			
		ЗапросПоПроводкам.Текст = ТекстЗапроса;
		Проводки = ЗапросПоПроводкам.Выполнить().Выбрать();

		ОбластьМакет = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ДокументРезультат.Вывести(ОбластьМакет);

		// На начало периода
		Если СвСч.Количественный Тогда
			ОбластьМакет = Макет.ПолучитьОбласть("СальдоКоличество");
		Иначе
			ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");
		КонецЕсли;

	    СтруктураПараметров = Новый Структура;
	    СтруктураПараметров.Вставить("МассивПоказателей", МассивПоказателей);
	    
	    ТекущееСальдоКолво = 0;
	    
		бит_БухгалтерскиеОтчетыСервер.ВывестиДанныеОстатковКарточкиСчетаВМакет(ЗапросПоОстаткам, ОбластьМакет, Счет, Истина, ,
			                                                             ТекущееСальдоКолво, СтруктураПараметров);
			
		ДокументРезультат.Вывести(ОбластьМакет);

		ОборотДт 		   = 0;
		ОборотКт 		   = 0;
		ИтогоОборотДт      = 0;
		ИтогоОборотКт      = 0;
		ИтогоОборотКолвоДт = 0;
		ИтогоОборотКолвоКт = 0;
		ОбластьОборота = Неопределено;

		Пока Проводки.Следующий() Цикл

			Если Проводки.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

				Если ОбластьОборота = Неопределено Тогда

					ОбластьОборота = Макет.ПолучитьОбласть("Обороты");
					ОбластьОборота.Параметры.ОписательПериода = "Обороты за " + бит_БухгалтерскиеОтчетыСервер.ПолучитьПериодДатСтрокой(Периодичность, Проводки.Период);
					
				Иначе
	                
	                СоотвИменПараметров = Новый Соответствие;
	                СоотвИменПараметров.Вставить("ОборотДт", "ОборотДт");
	                СоотвИменПараметров.Вставить("ОборотКт", "ОборотКт");
	                
	                // Заполним параметры области,
	                // вывели старые обороты. 
	                бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьОборота, СтруктураСумм, МассивПоказателей, 
	                                                                                            "ОборотДт, ОборотКт",, СоотвИменПараметров, Истина);
	                ДокументРезультат.Вывести(ОбластьОборота);                                                                            
	                                                                                            
	                // Сбросим старые обороты.
	                Для Каждого ТекПоказатель Из МассивПоказателей Цикл
						
						СтруктураСумм[ТекПоказатель + "ОборотДт"] = 0;
						СтруктураСумм[ТекПоказатель + "ОборотКт"] = 0;
						
					КонецЦикла;
					
					ОбластьОборота.Параметры.ОписательПериода = "Обороты за " + бит_БухгалтерскиеОтчетыСервер.ПолучитьПериодДатСтрокой(Периодичность, Проводки.Период);
					ОбластьОборота.Параметры.Заполнить(Проводки);

				КонецЕсли;

			Иначе
				
				// Это реальная строка оборотов
				НачалоСтроки = ДокументРезультат.ВысотаТаблицы + 1;

				// Детальные проводки 
				ОбластьМакет = Макет.ПолучитьОбласть("ЗаголовокПроводки");
				ОбластьМакет.Параметры.Заполнить(Проводки);

				Если СоответствиеПодчиненныеСчета[Проводки.СчетДт] <> Неопределено Тогда

					Если бит_БухгалтерскиеОтчетыСервер.ЗначениеПоляСоответствуетОтбору(Проводки, "Дт", ПостроительОтчета) Тогда
	                    
						ОбластьМакет.Параметры.СуммаДт = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстСуммыРесурсов(МассивПоказателей, Проводки, "");
	                    
	                    // Подсчитаем суммы показателей.
	                    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
	                        
	                        ТекСумма = Проводки[ТекПоказатель];
	                        
	                        СтруктураСумм[ТекПоказатель + "ОборотДт"] 	   = СтруктураСумм[ТекПоказатель + "ОборотДт"] 		+ ТекСумма;
	                        СтруктураСумм[ТекПоказатель + "ИтогоОборотДт"] = СтруктураСумм[ТекПоказатель + "ИтогоОборотДт"] + ТекСумма;
	                        
	                        СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"] = СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"] + ТекСумма;
	                        
	                    КонецЦикла;
	                    
						ИтогоОборотКолвоДт = ИтогоОборотКолвоДт + бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.КоличествоДт);
						ТекущееСальдоКолво = ТекущееСальдоКолво + бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.КоличествоДт);
						
					КонецЕсли;

				КонецЕсли;

				Если СоответствиеПодчиненныеСчета[Проводки.СчетКт] <> Неопределено Тогда

					Если бит_БухгалтерскиеОтчетыСервер.ЗначениеПоляСоответствуетОтбору(Проводки, "Кт", ПостроительОтчета) Тогда
	                    
	                    ОбластьМакет.Параметры.СуммаКт = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстСуммыРесурсов(МассивПоказателей, Проводки, "");
	                    
	                    // Подсчитаем суммы показателей.
	                    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
	                        
	                        ТекСумма = Проводки[ТекПоказатель];
	                        
	                        СтруктураСумм[ТекПоказатель + "ОборотКт"] 	   = СтруктураСумм[ТекПоказатель + "ОборотКт"] 		+ ТекСумма;
							СтруктураСумм[ТекПоказатель + "ИтогоОборотКт"] = СтруктураСумм[ТекПоказатель + "ИтогоОборотКт"] + ТекСумма;
							
							СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"] = СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"] - ТекСумма;
	                        
	                    КонецЦикла;
	                    
						ИтогоОборотКолвоКт = ИтогоОборотКолвоКт + бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.КоличествоКт);
						ТекущееСальдоКолво = ТекущееСальдоКолво - бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.КоличествоКт);
						
					КонецЕсли;

				КонецЕсли;

	            ТекстФлаг   = "";
	            ТекстСальдо = "";
	            
	            // Заполним текст для параметра "Флаг. Сальдо".
	            Для Каждого ТекПоказатель Из МассивПоказателей Цикл
	                
	                ТекущееСальдо = СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"];
	                
	                ТекФлаг   = ?(ТекущееСальдо = 0, "", ?(ТекущееСальдо < 0, "К", "Д"));
	                ТекСальдо = ?(ТекущееСальдо > 0, ТекущееСальдо, - ТекущееСальдо);
	                
	                ТекстФлаг    = ТекстФлаг  + ?(ПустаяСтрока(ТекстФлаг), "", Символы.ПС) + ТекФлаг;
	                ТекстСальдо = ТекстСальдо + ?(ПустаяСтрока(ТекстСальдо), "", Символы.ПС)
	                                          + Строка(Формат(ТекСальдо, "ЧЦ=15; ЧДЦ=2"));
	                
	            КонецЦикла;
	            
				ОбластьМакет.Параметры.Флаг   = ТекстФлаг;
				ОбластьМакет.Параметры.Сальдо = ТекстСальдо;
				ДокументРезультат.Вывести(ОбластьМакет);

				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Регистратор", Проводки.ДокументОперации);
				СтруктураРасшифровки.Вставить("НомерСтроки", Проводки.НомерСтроки);

				// Вывод Всех субконто операции
				ОбластьМакет = Макет.ПолучитьОбласть("СтрокаПроводки");

	            // Запомним высоту таблицы до вывода аналитики.
	            НачалоСтроки = ДокументРезультат.ВысотаТаблицы;
	            
				КоличествоСубконтоСчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(Проводки.СчетДт, СоответствиеСчетовКэш);
				бит_БухгалтерскиеОтчетыСервер.ВывестиПредставленияСубконтоТекущейСтрокиВМакет("СубконтоДт", Проводки, КоличествоСубконтоСчета, 
					ОбластьМакет, ДокументРезультат, СтруктураРасшифровки);
				
				
				КоличествоСубконтоСчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьДляСчетаПоСоответсвиеКоличествоСубконто(Проводки.СчетКт, СоответствиеСчетовКэш);
				бит_БухгалтерскиеОтчетыСервер.ВывестиПредставленияСубконтоТекущейСтрокиВМакет("СубконтоКт", Проводки, КоличествоСубконтоСчета, 
					ОбластьМакет, ДокументРезультат, СтруктураРасшифровки);
	                
	            // Запомним высоту таблицы после вывода аналитики.
	            КонецСтроки = ДокументРезультат.ВысотаТаблицы;
	    
	            // Запомним текст строк с аналитикой.
	            ТекстАналитики = "";
	            
	            Для Ном = НачалоСтроки По КонецСтроки Цикл
	                
	                Область      = ДокументРезультат.Область(Ном, 4, Ном, 4);
	                ТекстОбласти = Область.Текст;
	                
	                Если Не ПустаяСтрока(ТекстОбласти) Тогда
	                    ТекстАналитики = ТекстАналитики + ?(ПустаяСтрока(ТекстАналитики), "", Символы.ПС)
	                                                    + ТекстОбласти;
	                КонецЕсли;
	                
	            КонецЦикла;
	            
	            // Объединим области с аналитикой.
	            Область = ДокументРезультат.Область(НачалоСтроки, 4, КонецСтроки, 4);
	            Область.Объединить();
	            Область.Текст       	 = ТекстАналитики;
	            Область.Расшифровка 	 = СтруктураРасшифровки;
	            Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
							
				Если (Проводки.КоличествоДт <> NULL ) 
					ИЛИ (Проводки.КоличествоКт <> NULL) Тогда

					ОбластьМакет = Макет.ПолучитьОбласть("КоличествоПроводки");
					ОбластьМакет.Параметры.Заполнить(Проводки);
					ОбластьМакет.Параметры.СальдоКолво = ТекущееСальдоКолво;
					ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
					ДокументРезультат.Вывести(ОбластьМакет);

				КонецЕсли;

				Если (Проводки.ВалютнаяСуммаДт <> NULL )
					ИЛИ (Проводки.ВалютнаяСуммаКт <> NULL) Тогда

					ОбластьМакет = Макет.ПолучитьОбласть("ВалютнаяСуммаПроводки");
					ОбластьМакет.Параметры.Заполнить(Проводки);
					ОбластьМакет.Параметры.ОписательВалюты = "В валюте :";
					ОбластьМакет.Параметры.Расшифровка     = СтруктураРасшифровки;
					ДокументРезультат.Вывести(ОбластьМакет);

				КонецЕсли;

				КонецСтроки = ДокументРезультат.ВысотаТаблицы;

				Область = ДокументРезультат.Область(НачалоСтроки, 3, КонецСтроки, 3);
				Область.Объединить();
				Область.Текст       			 = Проводки.ПредставлениеОперации;
				Область.Расшифровка 			 = СтруктураРасшифровки;
				Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Строка;
				Область.РазмещениеТекста         = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

			КонецЕсли;

		КонецЦикла;

		// По периоду
		Если НужныПромежуточныеИтогиПоПериоду
			И Проводки.Количество() > 0 Тогда
	        
	        СоотвИменПараметров = Новый Соответствие;
	        СоотвИменПараметров.Вставить("ОборотДт", "ОборотДт");
	        СоотвИменПараметров.Вставить("ОборотКт", "ОборотКт");
	        
	        // Заполним параметры области,
	        // вывели старые обороты. 
	        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьОборота, СтруктураСумм, МассивПоказателей, 
	                                                                                    "ОборотДт, ОборотКт", , СоотвИменПараметров, Истина);
	        ДокументРезультат.Вывести(ОбластьОборота);
	        
		КонецЕсли;
		
		Если ИтогоОборотКолвоДт <> 0 
			Или ИтогоОборотКолвоКт <> 0 Тогда
			
			ОбластьМакет = Макет.ПолучитьОбласть("ОборотыКоличество");
			
			ОбластьМакет.Параметры.ОборотКоличествоДт = ИтогоОборотКолвоДт;
			ОбластьМакет.Параметры.ОборотКоличествоКт = ИтогоОборотКолвоКт;
					
		Иначе
			ОбластьМакет = Макет.ПолучитьОбласть("Обороты");
		КонецЕсли;
		
		ОбластьМакет.Параметры.ОписательПериода = "Обороты за период";
	    
	    СоотвИменПараметров = Новый Соответствие;
	    СоотвИменПараметров.Вставить("ИтогоОборотДт", "ОборотДт");
	    СоотвИменПараметров.Вставить("ИтогоОборотКт", "ОборотКт");
	    
	    // Заполним параметры области,
	    // вывели старые обороты. 
	    бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьМакет, СтруктураСумм, МассивПоказателей, 
	                                                                                "ИтогоОборотДт, ИтогоОборотКт", , СоотвИменПараметров, Истина);
		ДокументРезультат.Вывести(ОбластьМакет);

		// На конец периода
		Если СвСч.Количественный Тогда
			ОбластьМакет = Макет.ПолучитьОбласть("СальдоКоличество");
		Иначе
			ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");
		КонецЕсли;

		ЗапросПоОстаткам.УстановитьПараметр("Период", ?(Не ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, Новый Граница(КонецДня(Период.ДатаОкончания), ВидГраницы.Включая)));
		бит_БухгалтерскиеОтчетыСервер.ВывестиДанныеОстатковКарточкиСчетаВМакет(ЗапросПоОстаткам, ОбластьМакет, Счет, Ложь, , , СтруктураПараметров);
		ДокументРезультат.Вывести(ОбластьМакет);

		// Зафиксируем заголовок отчета
		ДокументРезультат.ФиксацияСверху 		   = ВысотаЗаголовка + 3;
		ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка + 2, , ВысотаЗаголовка + 3, );
		
		// Первую колонку не печатаем
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
		
		// Присвоим имя для сохранения параметров печати табличного документа.
		ДокументРезультат.КлючПараметровПечати = "КарточкаСчета " + ИмяРегистраБухгалтерии;

		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
		
	КонецЕсли;
	
	Возврат ОтчетСформирован;
	
КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Возвращаемое значение:
//  Массив - массив показателей.
//
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
    
    Если ВыводитьСуммуСценарий Тогда
        МассивПоказателей.Добавить("СуммаСценарий");
    КонецЕсли;
    
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

// Проверка корректности настроек отчета.
//
// Возвращаемое значение:
//   Булево
// 
Функция ПараметрыОтчетаКорректны()

	РезультатПроверки = 
		бит_БухгалтерскиеОтчетыСервер.ПроверитьСчет(Счет)
		И бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Истина);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()

#КонецОбласти

#КонецОбласти

#Область Инициализация

ИмяРегистраБухгалтерии = "бит_Бюджетирование";

СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

#КонецОбласти

#КонецЕсли
