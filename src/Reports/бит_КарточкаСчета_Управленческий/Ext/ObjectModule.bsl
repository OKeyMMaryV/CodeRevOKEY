#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Текущий вариант отчета.
 
Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

Перем мСписокРегистров Экспорт; // Хранит список регистров бухгалтерии управленческого учета.

Перем мПрограммноеОткрытие Экспорт; // Хранит значение программного открытия отчета.

Перем мЕстьРесурсСуммаМУ Экспорт; // Хранит подтверждение наличия ресурса "СуммаМУ".

// БИТ Тртилек 22.05.2012 Хранит подтверждение наличия измерения "ВидДвиженияМСФО".
Перем мЕстьИзмерениеВидДвиженияМСФО Экспорт;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Процедура выполняет сохранение настроек отчета.
// 
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина);
    
КонецПроцедуры // ПрименитьНастройку()

// Процедура запоняет начальные настройки отчета.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ИмяРегистраБухгалтерии = РегистрБухгалтерии.ИмяОбъекта;
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		СтарыеНастройки = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
		
	//ижтиси, шадрин, 02.09.2015(
	//бит_БухгалтерскиеОтчетыСервер.УстановитьЗапросИОтборПостроителяПоСубконтоДляДвижений(Счет
	//																			, ИмяРегистраБухгалтерии
	//																			, ПостроительОтчета
	//																			, "Валюта.*");
		//БИТ Тртилек 22.05.2012
		мЕстьИзмерениеВидДвиженияМСФО = бит_ОбщегоНазначения.ЕстьИзмерениеВидДвиженияМСФОРегистраБухгалтерии(ИмяРегистраБухгалтерии);
		///БИТ Тртилек
		//ижтиси, шадрин, 02.09.2015)
		//БИТ Тртилек 23.11.2012 установим дополнительные отборы в зависимости от РБ
		Если мЕстьИзмерениеВидДвиженияМСФО И ВыводитьВидДвижения Тогда
			бит_БухгалтерскиеОтчетыСервер.УстановитьЗапросИОтборПостроителяПоСубконтоДляДвижений(Счет
																				, ИмяРегистраБухгалтерии
																				, ПостроительОтчета
																				, "Валюта.*");
		Иначе
			бит_БухгалтерскиеОтчетыСервер.УстановитьЗапросИОтборПостроителяПоСубконтоДляДвижений(Счет
																				, ИмяРегистраБухгалтерии
																				, ПостроительОтчета
																				, "Валюта.*");
		КонецЕсли;
		///БИТ Тртилек
        				
		бит_БухгалтерскиеОтчетыСервер.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек.
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

#КонецОбласти

#Область ЗаголовокОтчета

// Функция формирует заголовок отчета (синоним).
// 
// Возвращаемое значение:
//  Строка - заголовок отчета.
//  
Функция ЗаголовокОтчета() Экспорт
	
	ПредставлениеРегистра = бит_ПраваДоступа.ПолучитьПредставлениеОбъектаСистемыИзСпискаЗначений(мСписокРегистров, РегистрБухгалтерии);
	СтрокаПоСчету = ?(ЗначениеЗаполнено(Счет), Счет, Нстр("ru = ' не выбран счет'"));
	
	ТекстЗаголовка = Нстр("ru = 'Карточка счета %2% (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра, СтрокаПоСчету);

	Возврат ТекстЗаголовка;	
    
КонецФункции // ЗаголовокОтчета()

// Функция выводит шапку отчета.
// 
// Возвращаемое значение:
// 	ТабличныйДокумент - заголовок отчета.
// 
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);
		
	// БИТ Тртилек 27.05.2013
	//Макет = ПолучитьМакет("КарточкаСчета");
	Макет = ПолучитьМакет("бит_КарточкаСчета");
	///БИТ Тртилек
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = бит_БухгалтерскиеОтчетыСервер.ПолучитьПолноеНазваниеОрганизации(Организация);
		
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ЗаголовокОтчета.Параметры.Заголовок 		  = ЗаголовокОтчета();
	ЗаголовокОтчета.Параметры.ОписаниеПериода  	  = ОписаниеПериода;

    ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
    КонецЕсли;
    Если мЕстьРесурсСуммаМУ И ВыводитьСуммуМУ Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (МСФО)'");
	КонецЕсли;
	
    ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'количество'");
    ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0
                                                        И Найти(ТекстСписокПоказателей, "количество") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
    
    ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстСписокПоказателей;
    
	// Вывод списка фильтров:
	СтрФильтры   = "";

	СтрФильтры = Сред(СтрФильтры + ", " + бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор), 3);

	ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");

	Если Не ПустаяСтрока(СтрФильтры) Тогда
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрФильтры;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

#КонецОбласти

#Область ФормированиеОтчета

// Процедура выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент - Табличный документ, формируемый отчетом.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина) - признак отображения заголовка.
//  ВысотаЗаголовка     - Число (По умолчанию = 0) - высота заголовка.
// 
// Возвращаемое значение:
//  Булево - отчет сформирован.
// 
Функция СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Очистка табличного поля
	ДокументРезультат.Очистить();
    	
	// Проверим наличие ресурса с именем "СуммаМУ".
	мЕстьРесурсСуммаМУ = бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	
	//БИТ Тртилек 23.11.2012
	мЕстьИзмерениеВидДвиженияМСФО = бит_ОбщегоНазначения.ЕстьИзмерениеВидДвиженияМСФОРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	///БИТ Тртилек
	   	
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;
		
		СвСч = бит_БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
        
		// Сформируем массив показателей.
		МассивПоказателей = СформироватьМассивПоказателей(); 	    
		
		//БИТ Тртилек 23.11.2012 создадим массив измерений для вывода в отчет
		МассивИзмерений = СформироватьМассивИзмерений();
		///БИТ Тртилек
	    
		// Выберем в соответствие все подчиненные счета (для определения принадлежности выводимого счета дебета, кредита).
		ПланСчетовРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов;
		ИмяПланаСчетов     = ПланСчетовРегистра.Имя;
	    
		СоответствиеПодчиненныеСчета = бит_БухгалтерскиеОтчетыСервер.СформироватьСоответвиеПодчиненныхСчетов(ИмяПланаСчетов, Счет, Истина);
		
		Для Каждого Элемент Из СоответствиеПодчиненныеСчета Цикл   			
			СоответствиеПодчиненныеСчета[Элемент.Ключ] = -1;			
		КонецЦикла;
		
		СоответствиеСчетовКэш = Новый Соответствие; 
		
		// Вывод заголовка отчета
		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	    
		// БИТ Тртилек 27.05.2013
		//Макет = ПолучитьМакет("КарточкаСчета");
		Макет = ПолучитьМакет("бит_КарточкаСчета");
		///БИТ Тртилек

		ЗапросПоОстаткам = Новый Запрос();
		ЗапросПоОстаткам.УстановитьПараметр("СчетАнализа", Счет);
		ЗапросПоОстаткам.УстановитьПараметр("Период"     , ?(Не ЗначениеЗаполнено(Период.ДатаНачала), (Период.ДатаНачала + 1), НачалоДня(Период.ДатаНачала)));
		
		//бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(ЗапросПоОстаткам, Организация, Период);
		бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(ЗапросПоОстаткам, Организация, Период, Истина);

		СтрокаОграниченийПоРеквизитам = "";
		
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоОрганизации(СтрокаОграниченийПоРеквизитам, Организация, ОрганизацияВидСравнения, ОрганизацияИспользование);
		
		ТекстФильтры = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, ЗапросПоОстаткам);
		СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
	    
	    СтруктураСумм = Новый Структура;
	    
	    ТекстРесурсовОстатков   = "";
	    ТекстРесурсовВЛЗапроса  = "";
	    ТекстРесурсовПроводок   = "";
	    ТекстРесурсыПромежИтоги = "";
		ТекстИтогиОстатков 		= "";
        ТекстУсловияПоРесурсам  = "
        |ГДЕ
        |	(ЕСТЬNULL(КоличествоДт, 0) +
        |	ЕСТЬNULL(КоличествоКт, 0) +
        |	ЕСТЬNULL(ВалютнаяСуммаДт, 0) +
        |	ЕСТЬNULL(ВалютнаяСуммаКт, 0) +";
			    
	    // Сформирует текст выборки выбранных ресурсов (показателей).
	    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
	        
	        ТекстРесурсовОстатков = ТекстРесурсовОстатков + "
							// |	СУММА(Выборка." + ТекПоказатель + "ОстатокДт) КАК " + ТекПоказатель + "ОстатокДт,
							// |	СУММА(Выборка." + ТекПоказатель + "ОстатокКт) КАК " + ТекПоказатель + "ОстатокКт,
							// |	СУММА(Выборка." + ТекПоказатель + "Остаток)   КАК " + ТекПоказатель + "Остаток,";
							|	Выборка." + ТекПоказатель + "ОстатокДт КАК " + ТекПоказатель + "ОстатокДт,
	                        |	Выборка." + ТекПоказатель + "ОстатокКт КАК " + ТекПоказатель + "ОстатокКт,
	                        |	Выборка." + ТекПоказатель + "Остаток   КАК " + ТекПоказатель + "Остаток,";
							
			ТекстИтогиОстатков = ТекстИтогиОстатков + "
	                        |	СУММА(" + ТекПоказатель + "ОстатокДт),
	                        |	СУММА(" + ТекПоказатель + "ОстатокКт),
	                        |	СУММА(" + ТекПоказатель + "Остаток),";
	                        
	        ТекстРесурсовВЛЗапроса = ТекстРесурсовВЛЗапроса + "
	                        |	ЕСТЬNULL(" + ТекПоказатель + "ОстатокДт, 0) КАК " + ТекПоказатель + "ОстатокДт,
	                        |	ЕСТЬNULL(" + ТекПоказатель + "ОстатокКт, 0) КАК " + ТекПоказатель + "ОстатокКт,
	                        |	ЕСТЬNULL(" + ТекПоказатель + "Остаток, 0) КАК " + ТекПоказатель + "Остаток,";
	                        
	        ТекстРесурсовПроводок = ТекстРесурсовПроводок + Символы.ПС + " 
	                        |	" + ТекПоказатель + " КАК " + ТекПоказатель + ",";
	                        
	        ТекстРесурсыПромежИтоги = ТекстРесурсыПромежИтоги + Символы.ПС + " 
	                        |	СУММА(" + ТекПоказатель + "),";
	         
	        // Вставим параметры которые необходимы будут нам
	        // для вывода отчета для текущего показателя.
	        СтруктураСумм.Вставить(ТекПоказатель + "ОборотДт"     , 0);
	        СтруктураСумм.Вставить(ТекПоказатель + "ОборотКт"     , 0);
	        СтруктураСумм.Вставить(ТекПоказатель + "ИтогоОборотДт", 0);
	        СтруктураСумм.Вставить(ТекПоказатель + "ИтогоОборотКт", 0);
            
            ТекстУсловияПоРесурсам = ТекстУсловияПоРесурсам + "
            |	ЕСТЬNULL(" + ТекПоказатель + ", 0) + ";
		КонецЦикла;
		
		//БИТ Тртилек 23.12.2012 сформируем текст выборки для выбранных ресурсов
		
		ТекстИзмеренийПроводок   = "";
		
		Для Каждого ТекИзмерение Из МассивИзмерений Цикл
			
			ТекстИзмеренийПроводок = ТекстИзмеренийПроводок + Символы.ПС + " 
			|	" + ТекИзмерение + " КАК " + ТекИзмерение + ",";
			
		КонецЦикла;
		///БИТ Тртилек
        
        ТекстУсловияПоРесурсам = Лев(ТекстУсловияПоРесурсам, СтрДлина(ТекстУсловияПоРесурсам) - 3) + ")<> 0";

	    ТекстДопОтбор = "";
	    
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ТекстРесурсовОстатков + "
		|	Выборка.КоличествоОстаток   КАК КоличествоОстаток,
		|	Выборка.КоличествоОстатокДт КАК КоличествоОстатокДт,
		|	Выборка.КоличествоОстатокКт КАК КоличествоОстатокКт,
		|	Выборка.Валюта,
		|	Выборка.ВалютнаяСуммаОстатокДт КАК ВалютнаяСуммаОстатокДт,
		|	Выборка.ВалютнаяСуммаОстатокКт КАК ВалютнаяСуммаОстатокКт,
		|	Выборка.ВалютнаяСуммаОстаток   КАК ВалютнаяСуммаОстаток
		|ИЗ
		|(ВЫБРАТЬ
		|	Счет," + ТекстРесурсовВЛЗапроса + "
		|	ЕСТЬNULL(КоличествоОстаток, 0)   КАК КоличествоОстаток,
		|	ЕСТЬNULL(КоличествоОстатокДт, 0) КАК КоличествоОстатокДт,
		|	ЕСТЬNULL(КоличествоОстатокКт, 0) КАК КоличествоОстатокКт,
		|	Валюта,
		|	ЕСТЬNULL(ВалютнаяСуммаОстатокДт, 0) КАК ВалютнаяСуммаОстатокДт,
		|	ЕСТЬNULL(ВалютнаяСуммаОстатокКт, 0) КАК ВалютнаяСуммаОстатокКт,
		|	ЕСТЬNULL(ВалютнаяСуммаОстаток, 0)   КАК ВалютнаяСуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии."+ ИмяРегистраБухгалтерии + ".Остатки(&Период, Счет В ИЕРАРХИИ (&СчетАнализа), , 
		|" + СтрокаОграниченийПоРеквизитам + ТекстДопОтбор + ") КАК ОсновнойОстатки 	
		// БИТ Avseenkov 22.05.2014 Доработка отчетов по периметру
		|";
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
			//Получаем организации выбывшие или вошедшии в периметр за период из отчета
			ТаблицаОрганизаций = бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиями(Организация,Период.ДатаНачала, Период.ДатаОкончания);  
		КонецЕсли;
		
		ЗапросДляСальдоКонец = Новый Запрос;
		ЗапросДляСальдоКонец = ЗапросПоОстаткам;
		
		//Изменение функционала по периметру
		Если (ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации")) И ЗначениеЗаполнено(Организация) Тогда
			
			Если ТаблицаОрганизаций.Количество()> 0 Тогда 
				Сч = 0 ;
				
				ТекстЗапросДляСальдоНачала = "";
				ТекстЗапросДляСальдоКонец = "";
				ТаблицаОрганизацийДляЗапросаСальдоКонец =  бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиямиДляОсновногоПараметра(Организация,Период.ДатаНачала, Период.ДатаОкончания);
				ТаблицаОрганизацийДляЗапросаСальдоНачало = бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиямиДляОсновногоПараметра(Организация,Период.ДатаНачала, Период.ДатаОкончания);
				Для Каждого Строка из ТаблицаОрганизаций цикл
					
					Сч = Сч + 1;
					
					Если Строка.Период >Период.ДатаНачала Тогда 
						
						СтрокаОрг = ТаблицаОрганизацийДляЗапросаСальдоКонец.Добавить();
						СтрокаОрг.Организация = Строка.Организация; 
					Иначе 
						СтрокаОрг = ТаблицаОрганизацийДляЗапросаСальдоНачало.Добавить();
						СтрокаОрг.Организация = Строка.Организация; 
						
					КонецЕсли; 
					ЗапросДляСальдоКонец.УстановитьПараметр("Организация", ТаблицаОрганизацийДляЗапросаСальдоКонец);
					ЗапросПоОстаткам.УстановитьПараметр("Организация", ТаблицаОрганизацийДляЗапросаСальдоНачало);
					
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		ТекстЗапроса1 = ТекстЗапроса;
		ТекстЗапроса = ТекстЗапроса +"
		/////////////////////////	
		|
		|) КАК Выборка
		|
		|ИТОГИ
		|" + ТекстИтогиОстатков + "
		|	СУММА(КоличествоОстаток),
		|	СУММА(КоличествоОстатокДт),
		|	СУММА(КоличествоОстатокДт)
		|ПО
		|	ОБЩИЕ
		|";
		ТекстЗапросаДляСальдоКонец =  ТекстЗапроса1+" 
		//}
		|
		|) КАК Выборка
        |
		|ИТОГИ
		|" + ТекстИтогиОстатков + "
		|	СУММА(КоличествоОстаток),
		|	СУММА(КоличествоОстатокДт),
		|	СУММА(КоличествоОстатокДт)
		|ПО
		|	ОБЩИЕ
		|";
		
		ЗапросПоОстаткам.Текст = ТекстЗапроса;
		ЗапросДляСальдоКонец.Текст = ТекстЗапросаДляСальдоКонец;
		
		// Нужно ли делать промежуточные итоги по периоду или нет.
		НужныПромежуточныеИтогиПоПериоду = (Не ПустаяСтрока(Периодичность)) И (Не ВРег(Периодичность) = "ПЕРИОД");

		ЗапросПоПроводкам = Новый Запрос();
		ЗапросПоПроводкам.УстановитьПараметр("СчетАнализа", Счет);
		Если КорСчетИспользование Тогда
			ЗапросПоПроводкам.УстановитьПараметр("КорСчет", КорСчет);	
		КонецЕсли;
		бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_КорСубконто(ЗапросПоПроводкам, ТаблицаКорСубконто);
		ЗапросПоПроводкам.УстановитьПараметр("НачПериода" , ?(Не ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, НачалоДня(Период.ДатаНачала)));
		ЗапросПоПроводкам.УстановитьПараметр("КонПериода" , ?(Не ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецДня(Период.ДатаОкончания)));
		
		//бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(ЗапросПоПроводкам, Организация, Период);
		бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(ЗапросПоПроводкам, Организация, Период, Истина);
		
		ЗапросПоПроводкам.УстановитьПараметр("Дебет"      , ВидДвиженияБухгалтерии.Дебет);
		ЗапросПоПроводкам.УстановитьПараметр("Кредит"     , ВидДвиженияБухгалтерии.Кредит);
		ЗапросПоПроводкам.УстановитьПараметр("ПустойСчет" , ПланыСчетов[ИмяПланаСчетов].ПустаяСсылка());

		Если Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Корреспонденция тогда
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетДт,
			|	СчетКт,
			|	СчетДт.Представление КАК СчетДтПредставление,
			|	СчетКт.Представление КАК СчетКтПредставление,
			|	ВалютаДт,
			|	ВалютаКт,
			|	ПРЕДСТАВЛЕНИЕ(ВалютаДт) КАК ВалютаДтПредставление,
			|	ПРЕДСТАВЛЕНИЕ(ВалютаКт) КАК ВалютаКтПредставление,
			|	КоличествоДт     КАК КоличествоДт,
			|	КоличествоКт     КАК КоличествоКт,
			|	ВалютнаяСуммаДт  КАК ВалютнаяСуммаДт,
			|	ВалютнаяСуммаКт  КАК ВалютнаяСуммаКт,
			|";

			Для Индекс = 1 По ПланСчетовРегистра.МаксКоличествоСубконто Цикл
				
				ТекстЗапроса = ТекстЗапроса + "
				|	СубконтоДт"+ Строка(Индекс) + "," + Символы.ПС + "
				|	ПРЕДСТАВЛЕНИЕ(СубконтоДт"+ Строка(Индекс) + ") КАК СубконтоДт" + Строка(Индекс) + "Представление, 
				|	СубконтоКт"+ Строка(Индекс) + "," + Символы.ПС + " 
				|	ПРЕДСТАВЛЕНИЕ(СубконтоКт"+ Строка(Индекс) + ") КАК СубконтоКт" + Строка(Индекс) + "Представление,
				|";
				
			КонецЦикла;
			
			//БИТ Тртилек 29.05.2013 напишем текст запроса для вытягивания списка будущих валют
			ТекстЗапросаПоВалютам = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВалютныеОбороты.Счет,
			|	ВалютныеОбороты.Валюта,
			|	ВалютныеОбороты.Регистратор,
			|	ВалютныеОбороты.НомерСтроки,
			|	ВалютныеОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалютнаяСуммаНачальныйОстатокДт,
			|	ВалютныеОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалютнаяСуммаНачальныйОстатокКт,
			|	ВалютныеОбороты.ВалютнаяСуммаОборотДт  КАК ВалютнаяСуммаОборотДт,
			|	ВалютныеОбороты.ВалютнаяСуммаОборотКт  КАК ВалютнаяСуммаОборотКт
			| ПОМЕСТИТЬ ВТОстаткиОборотыПоВалютам";
			///БИТ Тртилек

		Иначе
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидДвижения,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетДт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет ИНАЧЕ &ПустойСчет КОНЕЦ КАК СчетКт,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетДтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Счет.Представление ИНАЧЕ NULL КОНЕЦ КАК СчетКтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Валюта ИНАЧЕ NULL КОНЕЦ КАК ВалютаДт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Валюта ИНАЧЕ NULL КОНЕЦ КАК ВалютаКт,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Валюта.Представление ИНАЧЕ NULL КОНЕЦ КАК ВалютаДтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Валюта.Представление ИНАЧЕ NULL КОНЕЦ КАК ВалютаКтПредставление,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоДт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Количество ИНАЧЕ 0 КОНЕЦ КАК КоличествоКт,
			|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА ВалютнаяСумма ИНАЧЕ 0 КОНЕЦ КАК ВалютнаяСуммаДт,
			|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА ВалютнаяСумма ИНАЧЕ 0 КОНЕЦ КАК ВалютнаяСуммаКт,
			|";

			Для Индекс = 1 По ПланСчетовРегистра.МаксКоличествоСубконто Цикл
				
				ТекстЗапроса = ТекстЗапроса + "
				|	ВЫБОР КОГДА ВидДвижения = &Дебет  ТОГДА Субконто"+ Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоДт" + Строка(Индекс)+",
				|	ВЫБОР КОГДА ВидДвижения = &Кредит ТОГДА Субконто"+ Строка(Индекс) + " ИНАЧЕ NULL КОНЕЦ КАК СубконтоКт" + Строка(Индекс); 
				
			КонецЦикла;

		КонецЕсли;

		//БИТ Тртилек 23.11.2012 добавим дополнительные измерения
		//ТекстЗапроса = ТекстЗапроса + ТекстРесурсовПроводок;
		ТекстЗапроса = ТекстЗапроса + ТекстИзмеренийПроводок + ТекстРесурсовПроводок;
		///БИТ Тртилек
			
		ЕСЛИ НужныПромежуточныеИтогиПоПериоду ТОГДА
				
			ТекстЗапроса = ТекстЗапроса + "
				|	НАЧАЛОПЕРИОДА(Период, " + Периодичность + ") КАК Период,
				|";
				
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса + "
		|	ПРЕДСТАВЛЕНИЕ(Регистратор)КАК ПредставлениеОперации,
		|	Регистратор      КАК Регистратор,
		|	Период           КАК ДатаОперации,
		|	Содержание       КАК Операция,
		|	НомерЖурнала,
		|	НомерСтроки
		|
		|ИЗ
		|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ДвиженияССубконто(
		|		&НачПериода,
		|		&КонПериода,
        |";
		
		//БИТ Тртилек 29.05.2013 дорабатываем валютный запрос
		ТекстЗапросаПоВалютам = ТекстЗапросаПоВалютам + "
		|ИЗ
		//|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&НачПериода,&КонПериода, Запись, ,Счет В ИЕРАРХИИ (&СчетАнализа), , ";	
		|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&НачПериода,&КонПериода, Запись, ,";	
		///БИТ Тртилек
		
		СтрокаОграниченийПоРеквизитам = " (Активность = ИСТИНА) И (Счет В ИЕРАРХИИ (&СчетАнализа))";
		
		//БИТ Тртилек 30102013
		СтрокаОграниченийЗапросаПоВалюте = "(Счет В ИЕРАРХИИ (&СчетАнализа)), ,Организация = Организация";
		///БИТ Тртилек
		
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСчету(СтрокаОграниченийПоРеквизитам, КорСчет, КорСчетВидСравнения, КорСчетИспользование);
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСубконто(ТаблицаКорСубконто, СтрокаОграниченийПоРеквизитам);
		//БИТ Тртилек 30102013
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСчету(СтрокаОграниченийЗапросаПоВалюте, КорСчет, КорСчетВидСравнения, КорСчетИспользование);
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоСубконто(ТаблицаКорСубконто, СтрокаОграниченийЗапросаПоВалюте);
		///БИТ Тртилек
		
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоОрганизации(СтрокаОграниченийПоРеквизитам, Организация, ОрганизацияВидСравнения, ОрганизацияИспользование);
		//БИТ Тртилек 30102013
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоОрганизации(СтрокаОграниченийЗапросаПоВалюте, Организация, ОрганизацияВидСравнения, ОрганизацияИспользование);
		///БИТ Тртилек
		
		ТекстФильтры = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, ЗапросПоПроводкам);
		СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
			
		//БИТ Тртилек 29.05.2013 дорабатываем валютный запрос
		ТекстЗапросаПоВалютам = ТекстЗапросаПоВалютам + СтрокаОграниченийЗапросаПоВалюте + "
		|   ) КАК ВалютныеОбороты";
		///БИТ Тртилек
		
		ТекстЗапроса = ТекстЗапроса + СтрокаОграниченийПоРеквизитам + ТекстДопОтбор + "
		|	) КАК ОсновнойДвиженияССубконто
		|";
		
		// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
		
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
			//Получаем организации выбывшие или вошедшии в периметр за период из отчета
			ТаблицаОрганизаций = бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиями(Организация,Период.ДатаНачала, Период.ДатаОкончания);  
		КонецЕсли;
		
		
		//Изменение функционала по периметру
		Если (ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации")) И ЗначениеЗаполнено(Организация) Тогда
			
			Если ТаблицаОрганизаций.Количество()> 0 Тогда 
				Сч = 0 ;
				
				ТекстЗапросаДоп = ТекстЗапроса;
				ТекстЗапросаДопПоВалютам = ТекстЗапросаПоВалютам;
				СтрДляЗаменыНачало = "&НачПериода";
				СтрДляЗаменыКонец = "&КонПериода";
				
				Для Каждого Строка из ТаблицаОрганизаций цикл
					
					Сч = Сч + 1;
					
					ЗапросПоПроводкам.УстановитьПараметр("Организация"+Сч , Строка.Организация);
					
					
					Если Строка.ДатаОкончания > Период.ДатаНачала и
						Строка.ДатаОкончания < КонецДня(Период.ДатаОкончания) Тогда 
						ДатаКонец = "&ДатаКон"+Сч;
						ЗапросПоПроводкам.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
					Иначе 
						ДатаКонец = "&КонПериода";
					КонецЕсли;
					
					Если Строка.Период > Период.ДатаНачала Тогда 
						ДатаНачало = "&ДатаНач"+Сч;
						ЗапросПоПроводкам.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
					Иначе 
						ДатаНачало = "&НачПериода";
					КонецЕсли;
					
					
					
					ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"ВЫБРАТЬ РАЗРЕШЕННЫЕ","ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ");		
					
					
					ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"Организация В(&Организация )","Организация = &Организация"+Сч);
					Номер = Сч-1;
					ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"Организация = &Организация"+Номер,"Организация = &Организация"+Сч);
					ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,СтрДляЗаменыКонец,ДатаКонец);
					ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,СтрДляЗаменыНачало,ДатаНачало);
					ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДоп;
					СтрДляЗаменыКонец = ДатаКонец;
					СтрДляЗаменыНачало =ДатаНачало; 
				КонецЦикла;	
			КонецЕсли;
			
		КонецЕсли;
		//}
		
        ТекстЗапроса = ТекстЗапроса + ТекстУсловияПоРесурсам;
        
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО ДатаОперации, Регистратор ";
		
		ЕСЛИ НужныПромежуточныеИтогиПоПериоду ТОГДА
			
			ТекстЗапроса = ТекстЗапроса + "
				|ИТОГИ " + ТекстРесурсыПромежИтоги + "
				|	СУММА(КоличествоДт), 
				|	СУММА(ВалютнаяСуммаДт), 
				|	СУММА(КоличествоКт), 
				|	СУММА(ВалютнаяСуммаКт) 
				|
				|ПО
				|	Период";
				
		КонецЕсли;
			
		ЗапросПоПроводкам.Текст = ТекстЗапроса;
		Проводки = ЗапросПоПроводкам.Выполнить().Выбрать();

		//БИТ Тртилек 29.05.2013
		Если Счет.Валютный Тогда	
			
			ЗапросПоВалютнымОборотам = Новый Запрос;
			
			// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
			Если (ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации")) И ЗначениеЗаполнено(Организация) Тогда
				
				Если ТаблицаОрганизаций.Количество()> 0 Тогда 
					Сч = 0 ;
					
					ТекстЗапросаДоп = ТекстЗапросаПоВалютам;
					Для Каждого Строка из ТаблицаОрганизаций цикл
						
						Сч = Сч + 1;
						
						ЗапросПоВалютнымОборотам.УстановитьПараметр("Организация"+Сч , Строка.Организация);
						
						
						Если Строка.ДатаОкончания > Период.ДатаНачала и
							Строка.ДатаОкончания < КонецДня(Период.ДатаОкончания) Тогда 
							ДатаКонец = "&ДатаКон"+Сч;
							ЗапросПоВалютнымОборотам.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
						Иначе 
							ДатаКонец = "&КонПериода";
						КонецЕсли;
						
						Если Строка.Период > Период.ДатаНачала Тогда 
							ДатаНачало = "&ДатаНач"+Сч;
							ЗапросПоВалютнымОборотам.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
						Иначе 
							ДатаНачало = "&НачПериода";
						КонецЕсли;
						
						
						ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"ПОМЕСТИТЬ ВТОстаткиОборотыПоВалютам","");
						ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"ВЫБРАТЬ РАЗРЕШЕННЫЕ","ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ");		
						
						
						ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"Организация В(&Организация)","Организация = &Организация"+Сч);
						Номер = Сч-1;
						ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"Организация = &Организация"+Номер,"Организация = &Организация"+Сч);
						ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"&КонПериода",ДатаКонец);
						ТекстЗапросаДоп = СтрЗаменить(ТекстЗапросаДоп,"&НачПериода",ДатаНачало);
						ТекстЗапросаПоВалютам = ТекстЗапросаПоВалютам + ТекстЗапросаДоп;
					КонецЦикла;	
					
				КонецЕсли;
			КонецЕсли;
			//}
			
			ТекстЗапросаПоВалютам = ТекстЗапросаПоВалютам + "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕстьNULL(ВТОстаткиОборотыПоВалютам.Валюта,Значение(Справочник.Валюты.ПустаяСсылка)) КАК ОборотыПоВалютамВалюта,
			|	СУММА(ВТОстаткиОборотыПоВалютам.ВалютнаяСуммаОборотДт) КАК ВалютнаяСуммаОборотДт,
			|	СУММА(ВТОстаткиОборотыПоВалютам.ВалютнаяСуммаОборотКт) КАК ВалютнаяСуммаОборотКт,
			|	СУММА(ВТОстаткиОборотыПоВалютам.ВалютнаяСуммаНачальныйОстатокДт) КАК ВалютнаяСуммаНачальныйОстатокДт,
			|	СУММА(ВТОстаткиОборотыПоВалютам.ВалютнаяСуммаНачальныйОстатокКт) КАК ВалютнаяСуммаНачальныйОстатокКт
			|СГРУППИРОВАТЬ ПО
			|	ЕстьNULL(ВТОстаткиОборотыПоВалютам.Валюта, Значение(Справочник.Валюты.ПустаяСсылка))";
			
			ЗапросПоВалютнымОборотам.Текст = ТекстЗапросаПоВалютам;
			ЗапросПоВалютнымОборотам.УстановитьПараметр("СчетАнализа", Счет);
			ЗапросПоВалютнымОборотам.УстановитьПараметр("НачПериода" , ?(Не ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, НачалоДня(Период.ДатаНачала)));
			ЗапросПоВалютнымОборотам.УстановитьПараметр("КонПериода" , ?(Не ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецДня(Период.ДатаОкончания)));
			Если (ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации")) И ЗначениеЗаполнено(Организация) Тогда
				// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
				ЗапросПоВалютнымОборотам.УстановитьПараметр("Организация", бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиямиДляОсновногоПараметра(Организация,Период.ДатаНачала, Период.ДатаОкончания));
				//ЗапросПоВалютнымОборотам.УстановитьПараметр("Организация", бит_БухгалтерскиеОтчеты.ПолучитьСоставПериметраКонсолидации(Организация, ДатаКон));
				//}
			Иначе
				ЗапросПоВалютнымОборотам.УстановитьПараметр("Организация", Организация);
			КонецЕсли;
			
			ТаблицаВалют = ЗапросПоВалютнымОборотам.Выполнить().Выгрузить();
		КонецЕсли;
		///БИТ Тртилек
		
		//БИТ Тртилек 26.11.2012 отредактируем макет в зависимости от РБ
		Если НЕ (ВыводитьВидДвижения И мЕстьИзмерениеВидДвиженияМСФО) Тогда
			ОбластьВидДвижения = Макет.Область("R1C12:R44C12");
			Макет.УдалитьОбласть(ОбластьВидДвижения,);
		КонецЕсли;
		///БИТ Тртилек
		
		ОбластьМакет = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ДокументРезультат.Вывести(ОбластьМакет);

		// На конец периода
		Если СвСч.Количественный Тогда
			ОбластьМакет = Макет.ПолучитьОбласть("ОборотыСальдоКоличество");
		Иначе
			ОбластьМакет = Макет.ПолучитьОбласть("ОборотыСальдо");
		КонецЕсли;
		// // На начало периода
		// Если Счет.Количественный Тогда
		// 	ОбластьМакет = Макет.ПолучитьОбласть("СальдоКоличество");
		// Иначе
		// 	ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");
		// КонецЕсли;
		ОбластьВалютная = Макет.ПолучитьОбласть("СальдоВалютное");

		СоответствиеВалютное = Новый Соответствие;
		
	    СтруктураПараметров = Новый Структура;
	    СтруктураПараметров.Вставить("МассивПоказателей"   , МассивПоказателей);
		СтруктураПараметров.Вставить("СоответствиеВалютное", СоответствиеВалютное);
	    
	    ТекущееСальдоКолво    = 0;
				
		бит_БухгалтерскиеОтчетыСервер.ВывестиДанныеОстатковКарточкиСчетаСВалютойВМакет(ЗапросПоОстаткам, ОбластьМакет, ОбластьВалютная, Счет, Истина,,
			                                                             ТекущееСальдоКолво, СтруктураПараметров);			
		ДокументРезультат.Вывести(ОбластьМакет);
		Если СвСч.Валютный Тогда
			ДокументРезультат.Вывести(ОбластьВалютная);
			СоответствиеВалютное = СтруктураПараметров.СоответствиеВалютное;
			//ижтиси, шадрин, 03.09.2015(
			//ДокументРезультат.Вывести(ОбластьВалютная);
			//СоответствиеВалютное = СтруктураПараметров.СоответствиеВалютное;
			//ижтиси, шадрин, 03.09.2015)
			//БИТ Тртилек 27.05.2013 для валютных счетов будем выводить валютное сальдо начальное
			
			ТаблицаВалютныхОстатков = Новый ТаблицаЗначений;
			
			ОбластьМакет = Макет.ПолучитьОбласть("СальдоВалютнаяСумма");
			
			СтрокаОграниченийПоРеквизитамВалюта = "";
			
			Если (ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации")) И ЗначениеЗаполнено(Организация) Тогда
				бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитамВалюта, "Организация", Новый Массив(1));
			Иначе
				бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитамВалюта, "Организация", Организация);
			КонецЕсли;
			
			ЗапросПоВалюте = Новый Запрос;
			Если ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
				// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
				ЗапросПоВалюте.УстановитьПараметр("Организация", бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиямиДляОсновногоПараметра(Организация,Период.ДатаНачала, Период.ДатаОкончания));
				//ЗапросПоВалюте.УстановитьПараметр("Организация", бит_БухгалтерскиеОтчеты.ПолучитьСоставПериметраКонсолидации(Организация, ДатаКон));
				//}
			Иначе
				ЗапросПоВалюте.УстановитьПараметр("Организация", Организация);
			КонецЕсли;
			
			ЗапросПоВалюте.Текст 	= "ВЫБРАТЬ
			|	ВалютыТаблица.ОборотыПоВалютамВалюта КАК ОборотыПоВалютамВалюта
			|ПОМЕСТИТЬ ВТВалютыТаблица
			|ИЗ
			|	&ВалютыТаблица КАК ВалютыТаблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ЕСТЬNULL(Выборка.ВалютнаяСуммаОстатокДт, 0)) КАК ВалютнаяСуммаОстатокДт,
			|	СУММА(ЕСТЬNULL(Выборка.ВалютнаяСуммаОстатокКт, 0)) КАК ВалютнаяСуммаОстатокКт,
			|	ВТТаблица.ОборотыПоВалютамВалюта КАК Валюта
			|ИЗ
			|	ВТВалютыТаблица КАК ВТТаблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ОсновнойОстатки.Счет КАК Счет,
			|			ОсновнойОстатки.Валюта КАК Валюта,
			|			ОсновнойОстатки.ВалютнаяСуммаОстатокДт КАК ВалютнаяСуммаОстатокДт,
			|			ОсновнойОстатки.ВалютнаяСуммаОстатокКт КАК ВалютнаяСуммаОстатокКт
			|		ИЗ
			|	РегистрБухгалтерии."+ ИмяРегистраБухгалтерии + ".Остатки(&Период, Счет В ИЕРАРХИИ (&СчетАнализа), ," 
			+ СтрокаОграниченийПоРеквизитамВалюта + ТекстДопОтбор + ") КАК ОсновнойОстатки";
			
			// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
			
			Если (ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации")) И ЗначениеЗаполнено(Организация) Тогда
				
				Если ТаблицаОрганизаций.Количество()> 0 Тогда 
					Сч = 0 ;
					
					ТаблицаОрганизацийДляЗапросаСальдоНачало = бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиямиДляОсновногоПараметра(Организация,Период.ДатаНачала, Период.ДатаОкончания);
					Для Каждого Строка из ТаблицаОрганизаций цикл
						
						Сч = Сч + 1;
						
						Если Строка.Период < Период.ДатаНачала Тогда 
							
							СтрокаОрг = ТаблицаОрганизацийДляЗапросаСальдоНачало.Добавить();
							СтрокаОрг.Организация = Строка.Организация; 
							
						КонецЕсли; 
						
						ЗапросПоВалюте.УстановитьПараметр("Организация", ТаблицаОрганизацийДляЗапросаСальдоНачало);
						
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			//}					
			ЗапросПоВалюте.Текст = ЗапросПоВалюте.Текст+ "
			|
			|) КАК Выборка 
			|		ПО ВТТаблица.ОборотыПоВалютамВалюта = Выборка.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТТаблица.ОборотыПоВалютамВалюта";
			
			
			ЗапросПоВалюте.УстановитьПараметр("СчетАнализа", Счет);
			ЗапросПоВалюте.УстановитьПараметр("Период"     , ?(Не ЗначениеЗаполнено(Период.ДатаНачала), (Период.ДатаНачала+ 1), НачалоДня(Период.ДатаНачала)));
			ЗапросПоВалюте.УстановитьПараметр("ВалютыТаблица", ТаблицаВалют);
			
			
			ВалютныеОстатки = ЗапросПоВалюте.Выполнить().Выбрать();
			
			СтруктураВалютныеОбороты = Новый Структура;	
			
			Если ВалютныеОстатки.Количество() = 0 Тогда
				ОбластьМакет.Параметры.ВалютнаяСуммаСальдоДт   = 0;
				ОбластьМакет.Параметры.ВалютнаяСуммаСальдоКт   = 0;
				ОбластьМакет.Параметры.ОписательСальдо         = "Валютное сальдо на начало";
				ДокументРезультат.Вывести(ОбластьМакет);
			Иначе
				Сч=1;
				Пока ВалютныеОстатки.Следующий() Цикл
					
					Если НЕ ЗначениеЗаполнено(ВалютныеОстатки.Валюта) Тогда
						Продолжить;
					КонецЕсли;
					
					ВалютнаяСуммаОстатокДт = ПривестиКЧислу(ВалютныеОстатки.ВалютнаяСуммаОстатокДт);
					ВалютнаяСуммаОстатокКт = ПривестиКЧислу(ВалютныеОстатки.ВалютнаяСуммаОстатокКт);
					
					ТекущееВалютноеСальдо = ВалютнаяСуммаОстатокДт - ВалютнаяСуммаОстатокКт;
					
					// Запишем текущее сальдо по текущему показателю.
					//ОК Довбешка Т. 19.08.2013
					Если ЗначениеЗаполнено(ВалютныеОстатки.Валюта) Тогда
						Если Прав(СокрЛП(ВалютныеОстатки.Валюта.Наименование),1) = "*" Тогда
							ТекстВалютныеОстатки =  СтрЗаменить(ВалютныеОстатки.Валюта.Наименование,"*", "_");
						Иначе
							ТекстВалютныеОстатки =  ВалютныеОстатки.Валюта.Наименование;
						КонецЕсли;
					Иначе
						ТекстВалютныеОстатки = "";
					КонецЕсли;
					ТекстВалютныеОстатки = СтрЗаменить(ТекстВалютныеОстатки, ".", "");
					ТекстВалютныеОстатки = СтрЗаменить(ТекстВалютныеОстатки, "*", "_");
					СтруктураПараметров.Вставить("Валюта" + ТекстВалютныеОстатки, ТекущееВалютноеСальдо);
					СтруктураВалютныеОбороты.Вставить("ВалютаДт" + ТекстВалютныеОстатки, 0);
					СтруктураВалютныеОбороты.Вставить("ВалютаКт" + ТекстВалютныеОстатки, 0);
					//Довбешка	
					//СтруктураПараметров.Вставить("Валюта" + ?(ЗначениеЗаполнено(ВалютныеОстатки.Валюта), ВалютныеОстатки.Валюта.Наименование, ""), ТекущееВалютноеСальдо);
					//СтруктураВалютныеОбороты.Вставить("ВалютаДт" + ?(ЗначениеЗаполнено(ВалютныеОстатки.Валюта), ВалютныеОстатки.Валюта.Наименование, ""), 0);
					//СтруктураВалютныеОбороты.Вставить("ВалютаКт" + ?(ЗначениеЗаполнено(ВалютныеОстатки.Валюта), ВалютныеОстатки.Валюта.Наименование, ""), 0);
					
					
					Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
						
						Если ВалютнаяСуммаОстатокДт > ВалютнаяСуммаОстатокКт Тогда
							
							ОбластьМакет.Параметры.ВалютнаяСуммаСальдоДт   = ТекущееВалютноеСальдо;
							ОбластьМакет.Параметры.ВалютаПредставление     = ?(ЗначениеЗаполнено(ВалютныеОстатки.Валюта), ВалютныеОстатки.Валюта.Наименование, "");
							ОбластьМакет.Параметры.ВалютнаяСуммаСальдоКт   = 0;
							
						Иначе
							
							ОбластьМакет.Параметры.ВалютнаяСуммаСальдоДт   = 0;
							ОбластьМакет.Параметры.ВалютнаяСуммаСальдоКт   = -ТекущееВалютноеСальдо;
							ОбластьМакет.Параметры.ВалютаПредставление     = ?(ЗначениеЗаполнено(ВалютныеОстатки.Валюта), ВалютныеОстатки.Валюта.Наименование, ""); 
							
						КонецЕсли;
						
					Иначе
						
						ОбластьМакет.Параметры.ВалютнаяСуммаСальдоДт = ВалютнаяСуммаОстатокДт;
						ОбластьМакет.Параметры.ВалютнаяСуммаСальдоКт = ВалютнаяСуммаОстатокКт;
						ОбластьМакет.Параметры.ВалютаПредставление   = ?(ЗначениеЗаполнено(ВалютныеОстатки.Валюта), ВалютныеОстатки.Валюта.Наименование, "");
						
					КонецЕсли;
					
					Если Сч = 1 Тогда
						ОбластьМакет.Параметры.ОписательСальдо         = "Валютное сальдо на начало";
					Иначе
						ОбластьМакет.Параметры.ОписательСальдо         = "";
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьМакет);
					Сч = Сч + 1;
				КонецЦикла;
			КонецЕсли;
			
			///БИТ Тртилек
		КонецЕсли;                                                          		

		ОборотДт 			= 0;
		ОборотКт 			= 0;
		ИтогоОборотДт   	= 0;
		ИтогоОборотКт   	= 0;
		ИтогоОборотКолвоДт  = 0;
		ИтогоОборотКолвоКт  = 0;
		ОбластьОборота 		= Неопределено;

		Пока Проводки.Следующий() Цикл

			Если Проводки.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда

				Если ОбластьОборота = Неопределено Тогда

					ОбластьОборота = Макет.ПолучитьОбласть("Обороты");
					ОбластьОборота.Параметры.ОписательПериода = "Обороты за " + бит_БухгалтерскиеОтчетыСервер.ПолучитьПериодДатСтрокой(Периодичность, Проводки.Период);
					
				Иначе
	                
	                СоотвИменПараметров = Новый Соответствие;
	                СоотвИменПараметров.Вставить("ОборотДт", "ОборотДт");
	                СоотвИменПараметров.Вставить("ОборотКт", "ОборотКт");
	                
	                // Заполнение параметров области, Вывод старых оборотов. 
	                бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьОборота, СтруктураСумм, МассивПоказателей, 
	                                                                                            "ОборотДт, ОборотКт", , СоотвИменПараметров, Истина);
	                ДокументРезультат.Вывести(ОбластьОборота);                                                                            
	                                                                                            
	                // Сброс старых оборотов.
	                Для Каждого ТекПоказатель Из МассивПоказателей Цикл
						
						СтруктураСумм[ТекПоказатель + "ОборотДт"] = 0;
						СтруктураСумм[ТекПоказатель + "ОборотКт"] = 0;
						
					КонецЦикла;
					
					ОбластьОборота.Параметры.ОписательПериода = "Обороты за " + бит_БухгалтерскиеОтчетыСервер.ПолучитьПериодДатСтрокой(Периодичность, Проводки.Период);
					ОбластьОборота.Параметры.Заполнить(Проводки);

				КонецЕсли;

			Иначе
				
				// Это реальная строка оборотов
				НачалоСтроки = ДокументРезультат.ВысотаТаблицы + 1;

				// Детальные проводки 
				ОбластьМакет = Макет.ПолучитьОбласть("ЗаголовокПроводки");
				ОбластьМакет.Параметры.Заполнить(Проводки);

				Если СоответствиеПодчиненныеСчета[Проводки.СчетДт] <> Неопределено Тогда

					Если бит_БухгалтерскиеОтчетыСервер.ЗначениеПоляСоответствуетОтбору(Проводки, "Дт", ПостроительОтчета) Тогда
	                    
						ОбластьМакет.Параметры.СуммаДт = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстСуммыРесурсов(МассивПоказателей, Проводки, "");
	                    
	                    // Подсчитаем суммы показателей.
	                    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
	                        
	                        ТекСумма = Проводки[ТекПоказатель];
	                        
	                        СтруктураСумм[ТекПоказатель + "ОборотДт"] 	   = СтруктураСумм[ТекПоказатель + "ОборотДт"] 		+ ТекСумма;
	                        СтруктураСумм[ТекПоказатель + "ИтогоОборотДт"] = СтруктураСумм[ТекПоказатель + "ИтогоОборотДт"] + ТекСумма;
	                        
	                        СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"] = СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"] + ТекСумма;
	                        
	                    КонецЦикла;
	                    
						ИтогоОборотКолвоДт    = ИтогоОборотКолвоДт + бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.КоличествоДт);
						ТекущееСальдоКолво    = ТекущееСальдоКолво + бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.КоличествоДт);
						
						ТекущаяВалюта = Проводки.ВалютаДт;
						Если ЗначениеЗаполнено(ТекущаяВалюта) Тогда
							ТекущаяСуммаВалютная = бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.ВалютнаяСуммаДт);
							СтароеСальдоВалютное = СоответствиеВалютное.Получить(ТекущаяВалюта);
							Если СтароеСальдоВалютное = Неопределено Тогда
								СоответствиеВалютное.Вставить(ТекущаяВалюта, ТекущаяСуммаВалютная);
							Иначе
								СоответствиеВалютное.Вставить(ТекущаяВалюта, СтароеСальдоВалютное + ТекущаяСуммаВалютная);
							КонецЕсли;
						КонецЕсли;
												
					КонецЕсли;

				КонецЕсли;

				Если СоответствиеПодчиненныеСчета[Проводки.СчетКт] <> Неопределено Тогда

					Если бит_БухгалтерскиеОтчетыСервер.ЗначениеПоляСоответствуетОтбору(Проводки, "Кт", ПостроительОтчета) Тогда
	                    
	                    ОбластьМакет.Параметры.СуммаКт = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстСуммыРесурсов(МассивПоказателей, Проводки, "");
	                    
	                    // Подсчитаем суммы показателей.
	                    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
	                        
	                        ТекСумма = Проводки[ТекПоказатель];
	                        
	                        СтруктураСумм[ТекПоказатель + "ОборотКт"] 	   = СтруктураСумм[ТекПоказатель + "ОборотКт"] 		+ ТекСумма;
							СтруктураСумм[ТекПоказатель + "ИтогоОборотКт"] = СтруктураСумм[ТекПоказатель + "ИтогоОборотКт"] + ТекСумма;
							
							СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"] = СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"] - ТекСумма;
	                        
	                    КонецЦикла;
	                    
						ИтогоОборотКолвоКт = ИтогоОборотКолвоКт + бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.КоличествоКт);
						ТекущееСальдоКолво = ТекущееСальдоКолво - бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.КоличествоКт);
						
						ТекущаяВалюта = Проводки.ВалютаКт;
						Если ЗначениеЗаполнено(ТекущаяВалюта) Тогда							
							ТекущаяСуммаВалютная = бит_БухгалтерскиеОтчетыСервер.ПривестиКЧислу(Проводки.ВалютнаяСуммаКт);
							СтароеСальдоВалютное = СоответствиеВалютное.Получить(ТекущаяВалюта);
							Если СтароеСальдоВалютное = Неопределено Тогда
								СоответствиеВалютное.Вставить(ТекущаяВалюта, ТекущаяСуммаВалютная);
							Иначе
								СоответствиеВалютное.Вставить(ТекущаяВалюта, СтароеСальдоВалютное - ТекущаяСуммаВалютная);
							КонецЕсли;
						КонецЕсли;
												
					КонецЕсли;

				КонецЕсли;

	            ТекстФлаг   = "";
	            ТекстСальдо = "";
	            
	            // Заполним текст для параметра "Флаг. Сальдо".
	            Для Каждого ТекПоказатель Из МассивПоказателей Цикл
	                
	                ТекущееСальдо = СтруктураПараметров[ТекПоказатель + "ТекущееСальдо"];
	                
					// ТекФлаг   = ?(ТекущееСальдо = 0, "", ?(ТекущееСальдо < 0, "К", "Д"));
					ТекФлаг   = ?(ТекущееСальдо = 0, "", "Д");
					// ТекСальдо = ?(ТекущееСальдо > 0, ТекущееСальдо, - ТекущееСальдо);
					ТекСальдо = ТекущееСальдо;
	                
	                ТекстФлаг   = ТекстФлаг + ?(ПустаяСтрока(ТекстФлаг), "", Символы.ПС) + ТекФлаг;
	                ТекстСальдо = ТекстСальдо + ?(ПустаяСтрока(ТекстСальдо), "", Символы.ПС)
	                                          + Строка(Формат(ТекСальдо, "ЧЦ=15; ЧДЦ=2"));
	                
	            КонецЦикла;
	            
				ОбластьМакет.Параметры.Флаг   = ТекстФлаг;
				ОбластьМакет.Параметры.Сальдо = ТекстСальдо;
				ДокументРезультат.Вывести(ОбластьМакет);

				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Регистратор", Проводки.Регистратор);
				СтруктураРасшифровки.Вставить("НомерСтроки", Проводки.НомерСтроки);

				// Вывод Всех субконто операции
				ОбластьМакет = Макет.ПолучитьОбласть("СтрокаПроводки");

	            // Запомним высоту таблицы до вывода аналитики.
	            НачалоСтроки = ДокументРезультат.ВысотаТаблицы;
	            
				КоличествоСубконтоСчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьДляСчетаКоличествоСубконтоПоСоответствию(Проводки.СчетДт, СоответствиеСчетовКэш);
				бит_БухгалтерскиеОтчетыСервер.ВывестиПредставленияСубконтоТекущейСтрокиВМакет("СубконтоДт"
																			, Проводки
																			, КоличествоСубконтоСчета
																			, ОбластьМакет
																			, ДокументРезультат
																			, СтруктураРасшифровки);
				
				
				КоличествоСубконтоСчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьДляСчетаКоличествоСубконтоПоСоответствию(Проводки.СчетКт, СоответствиеСчетовКэш);
				бит_БухгалтерскиеОтчетыСервер.ВывестиПредставленияСубконтоТекущейСтрокиВМакет("СубконтоКт"
																							, Проводки
																							, КоличествоСубконтоСчета
																							, ОбластьМакет
																							, ДокументРезультат
																							, СтруктураРасшифровки);
	                
	            // Запомним высоту таблицы после вывода аналитики.
	            КонецСтроки = ДокументРезультат.ВысотаТаблицы;
	    
	            // Запомним текст строк с аналитикой.
	            ТекстАналитики = "";
	            
	            Для Ном = НачалоСтроки По КонецСтроки Цикл
	                
	                Область      = ДокументРезультат.Область(Ном, 4, Ном, 4);
	                ТекстОбласти = Область.Текст;
	                
	                ЕСЛИ НЕ ПустаяСтрока(ТекстОбласти) ТОГДА
	                    ТекстАналитики = ТекстАналитики + ?(ПустаяСтрока(ТекстАналитики), "", Символы.ПС)
	                                                    + ТекстОбласти;
	                КонецЕсли;
	                
	            КонецЦикла;
	            
	            // Объединим области с аналитикой.
	            Область = ДокументРезультат.Область(НачалоСтроки, 4, КонецСтроки, 5);
	            Область.Объединить();
	            Область.Текст       	 = ТекстАналитики;
	            Область.Расшифровка 	 = СтруктураРасшифровки;
	            Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
							
				ЕСЛИ (Проводки.КоличествоДт <> NULL ) 
					ИЛИ (Проводки.КоличествоКт <> NULL) ТОГДА

					ОбластьМакет = Макет.ПолучитьОбласть("КоличествоПроводки");
					ОбластьМакет.Параметры.Заполнить(Проводки);
					ОбластьМакет.Параметры.СальдоКолво = ТекущееСальдоКолво;
					ОбластьМакет.Параметры.Расшифровка = СтруктураРасшифровки;
					ДокументРезультат.Вывести(ОбластьМакет);

				КонецЕсли;
				
				ЕСЛИ (Проводки.ВалютнаяСуммаДт <> NULL )
					ИЛИ (Проводки.ВалютнаяСуммаКт <> NULL) ТОГДА

					ТекущаяВалюта = ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт, Проводки.ВалютаКт);
					
					ОбластьМакет = Макет.ПолучитьОбласть("ВалютнаяСуммаПроводки");
					ОбластьМакет.Параметры.Заполнить(Проводки);
					ОбластьМакет.Параметры.ОписательВалюты = "В валюте :";
					
					ТекущееСальдоВалютное = СоответствиеВалютное.Получить(ТекущаяВалюта);
					// Если ТекущееСальдоВалютное = Неопределено Или ТекущееСальдоВалютное = 0 Тогда
					// 	ОбластьМакет.Параметры.СальдоВалютное = Строка(Формат(0, "ЧЦ=15; ЧДЦ=2"));
					// ИначеЕсли ТекущееСальдоВалютное > 0	Тогда						
					// 	ОбластьМакет.Параметры.Флаг = "Д";
					// 	ОбластьМакет.Параметры.СальдоВалютное = Строка(Формат(ТекущееСальдоВалютное, "ЧЦ=15; ЧДЦ=2"));
					// ИначеЕсли ТекущееСальдоВалютное < 0	Тогда
					// 	ОбластьМакет.Параметры.Флаг = "К";
					// 	ОбластьМакет.Параметры.СальдоВалютное = Строка(Формат( - ТекущееСальдоВалютное, "ЧЦ=15; ЧДЦ=2"));
					// КонецЕсли;
					ОбластьМакет.Параметры.Флаг = ?(ТекущееСальдо = 0, "", "Д");
					ОбластьМакет.Параметры.СальдоВалютное = Строка(Формат(ТекущееСальдоВалютное, "ЧЦ=15; ЧДЦ=2"));
					
					ОбластьМакет.Параметры.Расшифровка 	   = СтруктураРасшифровки;
					//БИТ Тртилек 27.05.2013 заполним валютные сальдо	
					ТекстФлагВалюта   = "";
					ТекстСальдоВалюта = "";
					ТекущееСальдоПоВалюте = 0;
					ТекущиеОборотыПоВалютеДт = 0;
					ТекущиеОборотыПоВалютеКт = 0;
					Если ЗначениеЗаполнено(Проводки.ВалютнаяСуммаДт) И (Проводки.СчетДт = Счет ИЛИ Проводки.СчетДт.ПринадлежитЭлементу(Счет)) Тогда
						//ОК Довбешка Т. 19.08.2013
						Если Прав(СокрЛП(Проводки.ВалютаДт.Наименование),1) = "*" Тогда
							ТекстПроводкиВалютаДт =  СтрЗаменить(Проводки.ВалютаДт.Наименование, "*", "_");
						Иначе
							ТекстПроводкиВалютаДт =  Проводки.ВалютаДт.Наименование;
						КонецЕсли;
						ТекстПроводкиВалютаДт = СтрЗаменить(ТекстПроводкиВалютаДт, ".", "");
						СтруктураПараметров.Свойство("Валюта" + ТекстПроводкиВалютаДт, ТекущееСальдоПоВалюте);
						СтруктураВалютныеОбороты.Свойство("ВалютаДт" + ТекстПроводкиВалютаДт, ТекущиеОборотыПоВалютеДт);
						Если НЕ ТекущееСальдоПоВалюте = Неопределено Тогда
							СтруктураПараметров["Валюта" + ТекстПроводкиВалютаДт] = ТекущееСальдоПоВалюте + Проводки.ВалютнаяСуммаДт;
							СтруктураВалютныеОбороты["ВалютаДт" + ТекстПроводкиВалютаДт] = ТекущиеОборотыПоВалютеДт + Проводки.ВалютнаяСуммаДт;
						Иначе
							СтруктураПараметров.Вставить("Валюта" + ТекстПроводкиВалютаДт, Проводки.ВалютнаяСуммаДт);
						КонецЕсли;
						ТекФлагВалюта   = ?(СтруктураПараметров["Валюта" + ТекстПроводкиВалютаДт] = 0, "", ?(СтруктураПараметров["Валюта" + ТекстПроводкиВалютаДт] < 0, "К", "Д"));
						ТекСальдоВалюта = ?(СтруктураПараметров["Валюта" + ТекстПроводкиВалютаДт] > 0, СтруктураПараметров["Валюта" + ТекстПроводкиВалютаДт], - СтруктураПараметров["Валюта" + ТекстПроводкиВалютаДт]);
						//Довбешка	
						
						
						// Запишем текущее сальдо по текущему показателю.
						//	СтруктураПараметров.Свойство("Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, ""), ТекущееСальдоПоВалюте);
						//	СтруктураВалютныеОбороты.Свойство("ВалютаДт" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, ""), ТекущиеОборотыПоВалютеДт);
						//	Если НЕ ТекущееСальдоПоВалюте = Неопределено Тогда
						//		СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, "")] = ТекущееСальдоПоВалюте + Проводки.ВалютнаяСуммаДт;
						//		СтруктураВалютныеОбороты["ВалютаДт" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, "")] = ТекущиеОборотыПоВалютеДт + Проводки.ВалютнаяСуммаДт;
						//	Иначе
						//		СтруктураПараметров.Вставить("Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, ""), Проводки.ВалютнаяСуммаДт);
						//	КонецЕсли;
						//ТекФлагВалюта   = ?(СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, "")] = 0, "", ?(СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, "")] < 0, "К", "Д"));
						//ТекСальдоВалюта = ?(СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, "")] > 0, СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, "")], - СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаДт), Проводки.ВалютаДт.Наименование, "")]);
						ТекВалюта = Проводки.ВалютаДт;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Проводки.ВалютнаяСуммаКт) И (Проводки.СчетКт = Счет ИЛИ Проводки.СчетКт.ПринадлежитЭлементу(Счет)) Тогда
						//ОК Довбешка Т. 19.08.2013
						Если Прав(СокрЛП(Проводки.ВалютаКт.Наименование),1) = "*" Тогда
							ТекстПроводкиВалютаКт =  СтрЗаменить(Проводки.ВалютаКт.Наименование, "*", "_");
						Иначе
							ТекстПроводкиВалютаКт =  Проводки.ВалютаКт.Наименование;
						КонецЕсли;
						ТекстПроводкиВалютаКт = СтрЗаменить(ТекстПроводкиВалютаКт, ".", "");	
						СтруктураПараметров.Свойство("Валюта" + ТекстПроводкиВалютаКт, ТекущееСальдоПоВалюте);
						СтруктураВалютныеОбороты.Свойство("ВалютаКт" + ТекстПроводкиВалютаКт, ТекущиеОборотыПоВалютеКт);
						Если НЕ ТекущееСальдоПоВалюте = Неопределено Тогда
							СтруктураПараметров["Валюта" + ТекстПроводкиВалютаКт] = ТекущееСальдоПоВалюте - Проводки.ВалютнаяСуммаКт;
							СтруктураВалютныеОбороты["ВалютаКт" + ТекстПроводкиВалютаКт] = ТекущиеОборотыПоВалютеКт + Проводки.ВалютнаяСуммаКт;
						Иначе
							СтруктураПараметров.Вставить("Валюта" + ТекстПроводкиВалютаКт, Проводки.ВалютнаяСуммаКт);
						КонецЕсли;
						ТекФлагВалюта   = ?(СтруктураПараметров["Валюта" + ТекстПроводкиВалютаКт] = 0, "", ?(СтруктураПараметров["Валюта" + ТекстПроводкиВалютаКт] < 0, "К", "Д"));
						ТекСальдоВалюта = ?(СтруктураПараметров["Валюта" + ТекстПроводкиВалютаКт] > 0, СтруктураПараметров["Валюта" + ТекстПроводкиВалютаКт], - СтруктураПараметров["Валюта" + ТекстПроводкиВалютаКт]);
						//Довбешка	
						
						// Запишем текущее сальдо по текущему показателю.
						//	СтруктураПараметров.Свойство("Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, ""), ТекущееСальдоПоВалюте);
						//	СтруктураВалютныеОбороты.Свойство("ВалютаКт" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, ""), ТекущиеОборотыПоВалютеКт);
						//	Если НЕ ТекущееСальдоПоВалюте = Неопределено Тогда
						//		СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, "")] = ТекущееСальдоПоВалюте - Проводки.ВалютнаяСуммаКт;
						//		СтруктураВалютныеОбороты["ВалютаКт" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, "")] = ТекущиеОборотыПоВалютеКт + Проводки.ВалютнаяСуммаКт;
						//	Иначе
						//		СтруктураПараметров.Вставить("Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, ""), Проводки.ВалютнаяСуммаКт);
						//	КонецЕсли;
						//ТекФлагВалюта   = ?(СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, "")] = 0, "", ?(СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, "")] < 0, "К", "Д"));
						//ТекСальдоВалюта = ?(СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, "")] > 0, СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, "")], - СтруктураПараметров["Валюта" + ?(ЗначениеЗаполнено(Проводки.ВалютаКт), Проводки.ВалютаКт.Наименование, "")]);
						ТекВалюта = Проводки.ВалютаКт;
					КонецЕсли;
					
					ТекстФлагВалюта    = ТекстФлагВалюта  + ?(ПустаяСтрока(ТекстФлагВалюта),    "", Символы.ПС) + ТекФлагВалюта;
					ТекстСальдоВалюта = ТекстСальдоВалюта + ?(ПустаяСтрока(ТекстСальдоВалюта), "", Символы.ПС)
					+ Строка(Формат(ТекСальдоВалюта, "ЧЦ=15; ЧДЦ=2"));
					ОбластьМакет.Параметры.Флаг = ТекстФлагВалюта;
					ОбластьМакет.Параметры.СальдоВалютное = ТекстСальдоВалюта;										  
					///БИТ Тртилек
					ДокументРезультат.Вывести(ОбластьМакет);

				КонецЕсли;

				КонецСтроки = ДокументРезультат.ВысотаТаблицы;

				Область = ДокументРезультат.Область(НачалоСтроки, 3, КонецСтроки, 3);
				Область.Объединить();
				Область.Текст       			 = Проводки.ПредставлениеОперации;
				Область.Расшифровка 			 = СтруктураРасшифровки;
				Область.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Строка;
				Область.РазмещениеТекста         = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

			КонецЕсли;

		КонецЦикла;

		// По периоду
		Если НужныПромежуточныеИтогиПоПериоду
			И Проводки.Количество() > 0 Тогда
	        
	        СоотвИменПараметров = Новый Соответствие;
	        СоотвИменПараметров.Вставить("ОборотДт", "ОборотДт");
	        СоотвИменПараметров.Вставить("ОборотКт", "ОборотКт");
	        
	        // Заполним параметры области, Вывод старых оборотов. 
	        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьОборота, СтруктураСумм, МассивПоказателей, 
	                                                                                    "ОборотДт, ОборотКт", , СоотвИменПараметров, Истина);
	        ДокументРезультат.Вывести(ОбластьОборота);
			
			//БИТ Тртилек 31.05.2013 выведем итоговые валютные обороты
			Если Счет.Валютный Тогда
				Сч = 1;
				Для Каждого ВалютаИтог ИЗ ТаблицаВалют Цикл
					
					Если НЕ ЗначениеЗаполнено(ВалютаИтог.ОборотыПоВалютамВалюта) Тогда
						Продолжить;
					КонецЕсли;
					
					ОбластьМакет = Макет.ПолучитьОбласть("ОборотыВалюты");
					ВалютаНаименование = ВалютаИтог.ОборотыПоВалютамВалюта.Наименование;
					
					//ОК Довбешка Т. 19.08.2013
					Если Прав(СокрЛП(ВалютаНаименование),1) = "*" Тогда
						ВалютаНаименование = СтрЗаменить(ВалютаНаименование, "*", "_");
					Иначе
						ВалютаНаименование =  ВалютаНаименование;
					КонецЕсли;
					ВалютаНаименование = СтрЗаменить(ВалютаНаименование, ".", "");
					ОбластьМакет.Параметры.ОборотДт = СтруктураВалютныеОбороты["ВалютаДт" + ВалютаНаименование];
					ОбластьМакет.Параметры.ОборотКт = СтруктураВалютныеОбороты["ВалютаКт" + ВалютаНаименование];
					//Довбешка
					
					//ОбластьМакет.Параметры.ОборотДт = СтруктураВалютныеОбороты["ВалютаДт" + ВалютаИтог.ОборотыПоВалютамВалюта.Наименование];
					//ОбластьМакет.Параметры.ОборотКт = СтруктураВалютныеОбороты["ВалютаКт" + ВалютаИтог.ОборотыПоВалютамВалюта.Наименование];
					ОбластьМакет.Параметры.ВалютаПредставление = ВалютаИтог.ОборотыПоВалютамВалюта.Наименование;
					Если Сч = 1 Тогда
						ОбластьМакет.Параметры.ОписательПериода = "Валютные обороты за период";
					КонецЕсли;
					
					ДокументРезультат.Вывести(ОбластьМакет);
					Сч = Сч + 1;
				КонецЦикла;
			КонецЕсли;
			///БИТ Тртилек
	        
		КонецЕсли;
                      
		// На конец периода
		Если СвСч.Количественный Тогда
			ОбластьМакет = Макет.ПолучитьОбласть("ОборотыСальдоКоличество");
		Иначе
			ОбластьМакет = Макет.ПолучитьОбласть("ОборотыСальдо");
		КонецЕсли;
		// Если ИтогоОборотКолвоДт <> 0 
		// 	Или ИтогоОборотКолвоКт <> 0 Тогда
		// 	
		// 	ОбластьМакет = Макет.ПолучитьОбласть("ОборотыКоличество");
		// 	
		// 	ОбластьМакет.Параметры.ОборотКоличествоДт = ИтогоОборотКолвоДт;
		// 	ОбластьМакет.Параметры.ОборотКоличествоКт = ИтогоОборотКолвоКт;
		// 			
		// Иначе
		// 	
		// 	ОбластьМакет = Макет.ПолучитьОбласть("Обороты");
		// 	
		// КонецЕсли;
		
		ОбластьМакет.Параметры.ОписательПериода = "Обороты за период";
	    
	    СоотвИменПараметров = Новый Соответствие;
	    СоотвИменПараметров.Вставить("ИтогоОборотДт", "ОборотДт");
	    СоотвИменПараметров.Вставить("ИтогоОборотКт", "ОборотКт");
	    
	    // Заполним параметры области, вывели старые обороты. 
	    бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьМакет, СтруктураСумм, МассивПоказателей, 
	                                                                                "ИтогоОборотДт, ИтогоОборотКт", , СоотвИменПараметров, Истина);
		// ДокументРезультат.Вывести(ОбластьМакет);

		// // На конец периода
		// Если Счет.Количественный Тогда
		// 	ОбластьМакет = Макет.ПолучитьОбласть("СальдоКоличество");
		// Иначе
		// 	ОбластьМакет = Макет.ПолучитьОбласть("Сальдо");
		// КонецЕсли;

		// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
		//ЗапросПоОстаткам.УстановитьПараметр("Период", ?(Не ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, Новый Граница(КонецДня(Период.ДатаОкончания), ВидГраницы.Включая)));
		//бит_БухгалтерскиеОтчетыСервер.ВывестиДанныеОстатковКарточкиСчетаСВалютойВМакет(ЗапросПоОстаткам, ОбластьМакет, ОбластьВалютная, Счет, Ложь, , , СтруктураПараметров);
		ЗапросДляСальдоКонец.УстановитьПараметр("Период", ?(Не ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, Новый Граница(КонецДня(Период.ДатаОкончания), ВидГраницы.Включая)));
		бит_БухгалтерскиеОтчетыСервер.ВывестиДанныеОстатковКарточкиСчетаСВалютойВМакет(ЗапросДляСальдоКонец, ОбластьМакет, ОбластьВалютная, Счет, Ложь, , , СтруктураПараметров);
		//}
		бит_БухгалтерскиеОтчетыСервер.ВывестиДанныеОстатковКарточкиСчетаСВалютойВМакет(ЗапросПоОстаткам, ОбластьМакет, ОбластьВалютная, Счет, Ложь, , , СтруктураПараметров);
		ДокументРезультат.Вывести(ОбластьМакет);
		Если СвСч.Валютный Тогда
			//ижтиси, шадрин, 03.09.2015(
			//ДокументРезультат.Вывести(ОбластьВалютная);
			//ижтиси, шадрин, 03.09.2015)
			//БИТ Тртилек 30.05.2013 выведем конечные валютные сальдо
			Сч = 1;
			Для Каждого ПараметрВалюта Из СтруктураПараметров Цикл
				Если Сред(ПараметрВалюта.Ключ, 1, 6) = "Валюта" Тогда
					ОбластьМакет = Макет.ПолучитьОбласть("СальдоВалютнаяСумма");
					//ВалютаНаименование = Сред(ПараметрВалюта.Ключ, 7, 3);
					ВалютаНаименование = СтрЗаменить(Сред(ПараметрВалюта.Ключ, 7, 4), "_", "*");
					ОстатокВалюты = ПараметрВалюта.Значение;
					Если ОстатокВалюты >= 0 Тогда
						ОбластьМакет.Параметры.ВалютнаяСуммаСальдоДт = ОстатокВалюты;
					Иначе
						ОбластьМакет.Параметры.ВалютнаяСуммаСальдоКт = -ОстатокВалюты;
					КонецЕсли;
					ОбластьМакет.Параметры.ВалютаПредставление = ВалютаНаименование;			
					Если Сч = 1 Тогда
						ОбластьМакет.Параметры.ОписательСальдо = "Валютное сальдо на конец";	
					Иначе
						ОбластьМакет.Параметры.ОписательСальдо = "";
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьМакет);
					
					Сч = Сч + 1;
				КонецЕсли;
			КонецЦикла;
			///БИТ Тртилек
		КонецЕсли;
		

		// Фиксация заголовка отчета
		ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

		ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка + 2, ,ВысотаЗаголовка+3,);
		
		//БИТ Тртилек 22.05.2012
		ДокументРезультат.Автомасштаб = Истина;
		///БИТ Тртилек
		
		// Отмена печати первой колонки
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
		
		// Присвоим имя для сохранения параметров печати табличного документа.
		ДокументРезультат.КлючПараметровПечати = "КарточкаСчета " + ИмяРегистраБухгалтерии;

		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
		
	КонецЕсли;

	Возврат ОтчетСформирован;

КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Возвращаемое значение:
//  Массив - массив показателей.
//
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
	
	Если мЕстьРесурсСуммаМУ И ВыводитьСуммуМУ Тогда 
        МассивПоказателей.Добавить("СуммаМУ");
	КонецЕсли;
	
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

// Проверка корректности настроек отчета.
// 
// Возвращаемое значение:
//   Булево.
// 
Функция ПараметрыОтчетаКорректны()

	РезультатПроверки = 
		бит_БухгалтерскиеОтчетыСервер.ПроверитьСчет(Счет)
		И бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Ложь, мЕстьРесурсСуммаМУ);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()
 
#КонецОбласти

// Процедура выполняется при смене счета.
// 
// Параметры:
//  УстановитьСтарыеНастройки - Булево (По умолчанию = Истина).
// 
Процедура ОбработкаВыбораСчета(УстановитьСтарыеНастройки = Истина) Экспорт

    СтарыеНастройки = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
    
	ЗаполнитьНачальныеНастройки();
    	
    Если УстановитьСтарыеНастройки Тогда
        бит_БухгалтерскиеОтчетыСервер.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
    КонецЕсли;
    
КонецПроцедуры // ОбработкаВыбораСчета()

#КонецОбласти

//БИТ Тртилек 23.11.2012 функция возвращает массив дополнительных измерений регистра
Функция СформироватьМассивИзмерений() Экспорт
	
	МассивИзмерений = Новый Массив;
	
	Если мЕстьИзмерениеВидДвиженияМСФО И ВыводитьВидДвижения Тогда 
        МассивИзмерений.Добавить("ВидДвиженияМСФО");
	КонецЕсли;
	
	Возврат МассивИзмерений;
		
КонецФункции // СформироватьМассивПоказателей()

//БИТ Тртилек 27.05.2013
Функция ПривестиКЧислу(Значение) Экспорт
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции // ПривестиКЧислу()

#Область Инициализация
          
СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

ИмяРегистраБухгалтерии = ?(ЗначениеЗаполнено(РегистрБухгалтерии), РегистрБухгалтерии.ИмяОбъекта, "");

// Сформируем список выбора регистров бухгалтерии.
мСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии, "бит_Дополнительный");

мПрограммноеОткрытие = Ложь;
мЕстьРесурсСуммаМУ   = Ложь;

//БИТ Тртилек 22.05.2012
мЕстьИзмерениеВидДвиженияМСФО   = Ложь;
///БИТ Тртилек

#КонецОбласти

#КонецЕсли
