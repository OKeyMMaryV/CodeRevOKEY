
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	
	Форма = ПолучитьФорму("РегистрНакопления.бит_ГрафикиДоговоров.Форма.ФормаСпискаУправляемая");
	
	ЭлементыОтбора = Форма.Список.Отбор.Элементы;
	ЭлементыОтбора.Очистить();  
	
	
	//основные отборы
	СуществующийОтбор = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	ЗначениеСтруктура = РезультатОбработкаРасшифровкиНаСервере(Расшифровка);
	Для каждого ИмяПоляЗнач Из ЗначениеСтруктура Цикл
		ИмяПоля = ?(ТипЗнч(ИмяПоляЗнач.Значение) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), "ДоговорКонтрагента",
		?(ТипЗнч(ИмяПоляЗнач.Значение) = Тип("СправочникСсылка.Контрагенты"), "Контрагент", ""));
		Если ИмяПоля <> "" Тогда
			НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйОтбор.ПравоеЗначение = ИмяПоляЗнач.Значение;
		КонецЕсли;  		             		
	КонецЦикла;  
	
	
	// период
	НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЗначениеПараметра = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНач")).Значение;
	//Если ТипЗнч(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНач")).Значение) = Тип("Дата") Тогда
	НовыйОтбор.ПравоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНач")).Значение;
	//ИначеЕсли ТипЗнч(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНач")).Значение) = Тип("Граница") Тогда
	//	НовыйОтбор.ПравоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНач")).Значение.Значение;
	//Иначе
	//	НовыйОтбор.Использование = Ложь;
	//КонецЕсли;
	
	
	НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Период");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЗначениеПараметра = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаКон")).Значение;
	//Если ТипЗнч(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаКон")).Значение) = Тип("Дата") Тогда
	НовыйОтбор.ПравоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаКон")).Значение;
	//ИначеЕсли ТипЗнч(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаКон")).Значение) = Тип("Граница") Тогда
	//	НовыйОтбор.ПравоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаКон")).Значение.Значение;
	//Иначе
	//	НовыйОтбор.Использование = Ложь;
	//КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры



&НаСервере
Функция РезультатОбработкаРасшифровкиНаСервере(Расшифровка)
	
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки); 
	
	СтруктураГруппировок = Новый Структура;
	
	ТекущаяГруппировка = Данные.Элементы.Получить(Расшифровка);
	Пока Истина  Цикл
		
		
		
		Если ТипЗнч(ТекущаяГруппировка) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда  			
			ЗначениеПоля = ТекущаяГруппировка.ПолучитьПоля()[0].Значение;
			СтруктураГруппировок.Вставить(ТекущаяГруппировка.ПолучитьПоля()[0].Поле, ТекущаяГруппировка.ПолучитьПоля()[0].Значение);
		КонецЕсли;   		
		Родители = ТекущаяГруппировка.ПолучитьРодителей();
		Если Родители.Количество() = 0 Тогда
			Прервать;			
		КонецЕсли; 
		
		ТекущаяГруппировка = Родители[0]; 		
	КонецЦикла; 
	Возврат СтруктураГруппировок;
	
КонецФункции



Процедура ЗаполнитьОтборОтчетаРасшифровки(Элемент, ЭлементыОтбора)
	
	ХранилищеНастроек = Элемент.НастройкиПостроителя.Получить();
	Если ТипЗнч(ХранилищеНастроек) = Тип("Структура") И ХранилищеНастроек.Количество() <> 0 И ХранилищеНастроек.Свойство("Отбор") Тогда
		Для Каждого СтрокаОтбора Из ХранилищеНастроек.Отбор Цикл
			ОтборУстановлен = Ложь;
			ПутьКДанным = СтрокаОтбора.ПутьКДанным;			
			ПутьКДанным = ?(ПутьКДанным = "Договор.бит_му_ТипКредитногоДоговора","Субконто2.бит_му_ТипКредитногоДоговора",ПутьКДанным);
			ПутьКДанным = ?(ПутьКДанным = "Контрагент","Субконто1",ПутьКДанным);
			
			Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
					//И ЭлементОтбора.Представление = "Контрагент"  
					//ОтборУстановлен = Истина;
				Иначе
					Если ПутьКДанным = Строка(ЭлементОтбора.ЛевоеЗначение) Тогда
						Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
							ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
							ЗначенияОтбора = Новый СписокЗначений;
							ЗначенияОтбора.Добавить(ЭлементОтбора.ПравоеЗначение);
							Если ТипЗнч(СтрокаОтбора.Значение) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
								ЗначенияОтбора.Добавить(СтрокаОтбора.Значение);
								ОтборУстановлен = Истина;
								Прервать;
							ИначеЕсли ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений") Тогда
								Для Каждого ЗначОтбора Из СтрокаОтбора.Значение Цикл
									ЗначенияОтбора.Добавить(ЗначОтбора.Значение);
								КонецЦикла;
								ОтборУстановлен = Истина;
								Прервать;
							КонецЕсли;
						ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
							ЗначенияОтбора = ЭлементОтбора.ПравоеЗначение;
							Если ТипЗнч(СтрокаОтбора.Значение) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
								ЗначенияОтбора.Добавить(СтрокаОтбора.Значение);
								ОтборУстановлен = Истина;
								Прервать;
							ИначеЕсли ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений") Тогда
								Для Каждого ЗначОтбора Из СтрокаОтбора.Значение Цикл
									ЗначенияОтбора.Добавить(ЗначОтбора.Значение);
								КонецЦикла;
								ОтборУстановлен = Истина;
								Прервать;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Не ОтборУстановлен Тогда
				Если СтрокаОтбора.ВидСравнения = ВидСравнения.НеРавно 
					И ТипЗнч(СтрокаОтбора.Значение) = Тип("СправочникСсылка.Контрагенты")
					И СтрокаОтбора.ПутьКДанным = "Контрагент" тогда
					ГруппаОтбора = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
					//ГруппаОтбора.Представление = "Контрагент";
					ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
					ГруппаОтбора.Использование = Истина;
					
					Отбор1 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
					Отбор1.Использование = Истина;
					
					Отбор2 = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
					Отбор2.ПравоеЗначение = СтрокаОтбора.Значение;
					Отбор2.Использование = Истина;
					
				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
					Отбор1.Использование = Истина;
					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
					Отбор2.Использование = Истина;
				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
					Отбор1.Использование = Истина;
					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
					Отбор2.Использование = Истина;
				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
					Отбор1.Использование = Истина;
					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
					Отбор2.Использование = Истина;
				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
					Отбор1.Использование = Истина;
					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
					Отбор2.Использование = Истина;
				Иначе
					НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
					Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии;
					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
					Иначе
						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить(Строка(СтрокаОтбора.ВидСравнения), " ", "")];
					КонецЕсли;
					НовыйОтбор.ПравоеЗначение = СтрокаОтбора.Значение;
					НовыйОтбор.Использование = Истина;
				КонецЕсли; 				 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция бит_ПроизвольныйОтчетРасшифровкаЗаполнить(СтруктураПараметров) Экспорт
	
	
	СтрокаТаблицы = Справочники.бит_ПоказателиПроизвольныхОтчетов.НайтиПоКоду(СтруктураПараметров.ИмяОбласти,,,СтруктураПараметров.НастройкаОтчета);
	
	Если СтрокаТаблицы = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЭлементДанных) 
		ИЛИ СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула 
		
		Тогда
		
		ТекстСообщения = НСтр("ru = 'Для ячейки %1% расшифровка отчетом не предусмотрена.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтруктураПараметров.ИмяОбласти);
		Сообщить(ТекстСообщения,СтатусСообщения.Информация);
		Возврат Неопределено;
	КонецЕсли; 
	
	Если СтрокаТаблицы.ИмяРесурса <> "КонечноеСальдоНаДату6месяцев" И СтрокаТаблицы.ИмяРесурса <> "ТекущаяСтоимость" Тогда
		// отдельная расшифровка для показателей, формируемых на основании данных регистра накопления "Графики договоров"
		флЕстьРасшифровка = Истина;
		
		// создадим отчет-расшифровку
		//ОтчетРасшифровка = Отчеты.УдалитьИжтиси_СБ_РасшифровкаОтчетаРискЛиквидности.Создать();
		//ОтчетРасшифровка = ДанныеФормыВЗначение(Отчет, Тип("ОтчетОбъект.УдалитьИжтиси_СБ_РасшифровкаОтчетаРискЛиквидности"));
		// Параметры = ОтчетРасшифровка.КомпоновщикНастроек.Настройки.ПараметрыДанных;
		а = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		НастройкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		Если СтрокаТаблицы.ИмяРесурса = "ГрафикиПлатежейМенее6месяцев" Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНач", КонецДня(СтруктураПараметров.ДатаОкончания) + 1); 
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКон", Новый Граница(КонецМесяца(ДобавитьМесяц(СтруктураПараметров.ДатаОкончания,6)), ВидГраницы.Включая));
			НаименованиеПериода = "0-6 мес.";
		ИначеЕсли СтрокаТаблицы.ИмяРесурса = "ГрафикиПлатежей_6_12месяцев" Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНач", КонецДня(ДобавитьМесяц(СтруктураПараметров.ДатаОкончания,6)) + 1); 
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКон", Новый Граница(КонецМесяца(ДобавитьМесяц(СтруктураПараметров.ДатаОкончания,12)), ВидГраницы.Включая));
			НаименованиеПериода = "6-12 мес.";
		ИначеЕсли СтрокаТаблицы.ИмяРесурса = "ГрафикиПлатежейБолее12месяцев" Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНач", КонецМесяца(ДобавитьМесяц(СтруктураПараметров.ДатаОкончания,12))); 
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКон", '00010101');
			НаименованиеПериода = "1-5 лет";
		КонецЕсли;
		
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериодаДляСреза", Новый Граница(КонецДня(СтруктураПараметров.ДатаОкончания), ВидГраницы.Включая));
		НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериодаДляСрезаДата", КонецДня(СтруктураПараметров.ДатаОкончания));
		  ОТчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);

		ЭлементыОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
		
		
		ОтборОрганизация 		= ЭлементыОтбора[0];
		
		Если ТипЗнч(СтруктураПараметров.Организация) = Тип("СправочникСсылка.Организации") Тогда
			ОтборОрганизация.Использование	= Истина;
			ОтборОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборОрганизация.ПравоеЗначение = СтруктураПараметров.Организация;
		ИначеЕсли ТипЗнч(СтруктураПараметров.Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") И ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
			СписокОрганизаций = Новый СписокЗначений;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
			|ИЗ
			|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&КонецПериодаГраница, ПериметрКонсолидации = &Периметр) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
			|ГДЕ
			|	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &КонецПериодаДата
			
			|	ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
			|
			|СГРУППИРОВАТЬ ПО
			|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация";
			Запрос.УстановитьПараметр("КонецПериодаДата", КонецДня(СтруктураПараметров.ДатаОкончания));
			Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(СтруктураПараметров.ДатаОкончания),ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Периметр", СтруктураПараметров.Организация);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокОрганизаций.Добавить(Выборка.Организация);
			КонецЦикла; 
			ОтборОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборОрганизация.ПравоеЗначение = СписокОрганизаций;
			ОтборОрганизация.Использование = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
			ОтборОрганизация.Использование = Ложь;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
			ЗаполнитьОтборОтчетаРасшифровки(СтрокаТаблицы.ЭлементДанных, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
		ИначеЕсли СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула Тогда
			Для Каждого СтрокаФормулы Из СтрокаТаблицы.ЭлементДанных.СтрокиРасчетаДляФормулы Цикл
				ЗаполнитьОтборОтчетаРасшифровки(СтрокаФормулы.СтрокаРасчета, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
			КонецЦикла;
		КонецЕсли;
		
				
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок", СтрокаТаблицы.ЭлементДанных.Наименование + ": график платежей в период " + НаименованиеПериода);
		//ОТчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
		
		ТипРесурса = "Упр";
		
	КонецЕсли;
	
КонецФункции // РасшифроватьПроизвольнымОтчетом()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры
