#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
    
#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Текущий вариант отчета.   

Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

Перем ЕстьВалюта Экспорт; // Хранить признак наличия валюты.

Перем ЕстьКоличество Экспорт; // Хранить признак наличия количества.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Процедура выполняет сохранение настроек отчета.
// 
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина, , Истина);
		
КонецПроцедуры // ПрименитьНастройку()

// Процедура заполняет начальные настройки построителя отчета.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ИмяРегистраБухгалтерии = "бит_Бюджетирование";
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_БюджетированиеОстаткиИОбороты.Сценарий,
	               |	бит_БюджетированиеОстаткиИОбороты.ЦФО,
	               |	бит_БюджетированиеОстаткиИОбороты.Организация
	               |{ВЫБРАТЬ
	               |	Сценарий.*,
	               |	ЦФО.*,
	               |	Организация.*}
	               |ИЗ
	               |	РегистрБухгалтерии.бит_Бюджетирование.ОстаткиИОбороты КАК бит_БюджетированиеОстаткиИОбороты
	               |{ГДЕ
	               |	бит_БюджетированиеОстаткиИОбороты.Сценарий.*,
	               |	бит_БюджетированиеОстаткиИОбороты.ЦФО.*,
	               |	бит_БюджетированиеОстаткиИОбороты.Организация.*}";

	ПостроительОтчета.Текст = ТекстЗапроса;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек.
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	ЗаполнитьНачальныеНастройки();
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

#КонецОбласти

#Область ЗаголовокОтчета

// Функция формирует заголовок отчета (синоним).
// 
// Возвращаемое значение:
//  Строка - заголовок отчета.
//  
Функция ЗаголовокОтчета() Экспорт
    
	ПредставлениеРегистра = "бюджетирование";
	
	ТекстЗаголовка = Нстр("ru = 'Оборотно-сальдовая ведомость (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра);
	
	Возврат ТекстЗаголовка;
		
КонецФункции // ЗаголовокОтчета()

// Процедура выводит шапку отчета.
// 
// Возвращаемое значение:
// 	ТабличныйДокумент - заголовок отчета.
// 
Функция СформироватьЗаголовок() Экспорт

    ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);
	
	Макет = ПолучитьОбщийМакет("бит_ОборотноСальдоваяВедомость_Бюджетирование");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	ЗаголовокОтчета.Параметры.Заголовок        = ЗаголовокОтчета();
	ЗаголовокОтчета.Параметры.ОписаниеПериода  = ОписаниеПериода;

	ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
    КонецЕсли;
	Если ВыводитьСуммуСценарий Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (сценарий)'");
    КонецЕсли;
	Если ПоВалютам Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
	КонецЕсли;

    ЗаголовокОтчета.Параметры.СписокПоказателей = ТекстСписокПоказателей;

    // Вывод списка фильтров:
	СтрОтбор = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;
    
	Возврат ЗаголовокОтчета;
	
КонецФункции // СформироватьЗаголовок()

#КонецОбласти

#Область ФормированиеОтчета

// Процедура выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент - Табличный документ, формируемый отчетом.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина) - признак отображения заголовка.
//  ВысотаЗаголовка     - Число (По умолчанию = 0) - высота заголовка.
// 
// Возвращаемое значение:
//  Булево - отчет сформирован.
// 
Функция СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт
	
	// Очистка табличного поля
	ДокументРезультат.Очистить();
		
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;
		  
	    СтруктураВыводимыхРесурсов = Новый Структура;
	    СтруктураВыводимыхРесурсов.Вставить("ВыводитьСуммуСценарий", ВыводитьСуммуСценарий);
		СтруктураВыводимыхРесурсов.Вставить("ВыводитьСуммуРегл"    , ВыводитьСуммуРегл);
	    СтруктураВыводимыхРесурсов.Вставить("ВыводитьСуммуУпр"     , ВыводитьСуммуУпр);
	    	
		ПараметрСценарий = ?(СценарийИспользование, Сценарий, Неопределено);
		бит_БухгалтерскиеОтчетыСервер.СформироватьОтчетОборотноСальдовойВедомости(ЭтотОбъект 			// ОбъектОтчета
																				, ДокументРезультат 	// ДокументРезультат
																				, ПоказыватьЗаголовок 	// ПоказыватьЗаголовок
																				, ВысотаЗаголовка 		// ВысотаЗаголовка
																				, ПоВалютам 			// ПоВалютам
																				, Истина 				// ИспользоватьОграниченияПоЗабалансовымСчетам
																				, ПоЗабалансовымСчетам 	// ПоЗабалансовымСчетам
																				, Неопределено 			// ВидУчета
																				, Неопределено 			// Валюта
																				, Неопределено 			// ОтражениеВНУ
																				, ПараметрСценарий		// Сценарий
																				, Неопределено 			// ВВалютеСценария
																				);
		
	КонецЕсли;
	
	Возврат ОтчетСформирован;

КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Возвращаемое значение:
//  Массив - массив показателей.
//
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
    
	Если ВыводитьСуммуСценарий Тогда 
        МассивПоказателей.Добавить("СуммаСценарий");
    КонецЕсли;
    
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли;

	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

// Проверка корректности настроек отчета
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПараметрыОтчетаКорректны()

	РезультатПроверки = 
		бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Истина)
		И Не бит_БухгалтерскиеОтчетыСервер.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()

#КонецОбласти

#Область ФормированиеОтчета

// Формирует запрос по установленным условия, фильтрам и группировкам.
// 
// Параметры:
//  СтруктураПараметров - Структура, параметры необходимые для формирования текста запроса.
// 
// Возвращаемое значение:
//  Запрос
// 
Функция СформироватьЗапрос(СтруктураПараметров) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("НачПериода", НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Период.ДатаОкончания));
	Если СценарийИспользование Тогда
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
	КонецЕсли;
    // Изменение кода. Начало. 08.05.2014{{
	Если ОрганизацияИспользование Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	// Изменение кода. Конец. 08.05.2014}}
	
	ТекстЗапроса = "";
	ТекстИтогов  = "";
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Счет КАК Счет,
	|	Счет.Код КАК СчетКод,
	|	Счет.Наименование КАК СчетНаименование,
	|	Счет.Представление КАК СчетПредставление,
	|	Счет.Забалансовый КАК СчетЗабалансовый";

	Если ПоВалютам Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	Валюта КАК Валюта,
		|	Валюта.Представление КАК ВалютаПредставление ";
	КонецЕсли;
    
    ТекстЗапроса = ТекстЗапроса + бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Истина, Истина, Истина);
	
    ОчищатьИтогиПоСценарию = Ложь;
    
	ТекстИтогов = ТекстИтогов + бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Ложь, , , , ОчищатьИтогиПоСценарию);		
    
    СтруктураПолейОтбораПостроителя = Новый Структура;
    СтруктураПолейОтбораПостроителя.Вставить("ЦФО"     , "ЦФО");	
    СтруктураПолейОтбораПостроителя.Вставить("Сценарий", "Сценарий");
	// Изменение кода. Начало. 08.05.2014{{
	Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() и ОрганизацияИспользование Тогда
		СтруктураПолейОтбораПостроителя.Вставить("Организация", "Организация");
	КонецЕсли;	
	// Изменение кода. Конец. 08.05.2014}}
    
	СтрокаТекстаВыборкиИзТаблицы = бит_БухгалтерскиеОтчетыСервер.СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(
																	СтруктураПараметров
																	, 
																	, 
																	, Запрос
																	, ПостроительОтчета
																	, СтруктураПолейОтбораПостроителя);
																	
																	
	// ////Если СценарийИспользование Тогда
	//////	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	//////КонецЕсли;																	
	
	ТекстЗапроса = ТекстЗапроса + СтрокаТекстаВыборкиИзТаблицы;
	
	ТекстЗапроса = ТекстЗапроса + "
	|АВТОУПОРЯДОЧИВАНИЕ
	|ИТОГИ " + Сред(ТекстИтогов, 2) + "
	|ПО
	|	Счет ИЕРАРХИЯ";

	Если ПоВалютам Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	Валюта КАК Валюта ";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

    // Установим текст построителя отчета для
    // возможности установления отбора.
    ПостроительОтчета.Текст = ТекстЗапроса;
	
	Возврат Запрос;

КонецФункции // СформироватьЗапрос()

// Функция возвращает общую структуру для расшифровки.
// 
// Возвращаемое значение:
//  Структура
// 
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("Период" , Период);
	
	СтруктураНастроекОтчета.Вставить("Сценарий"             , Сценарий);
	СтруктураНастроекОтчета.Вставить("СценарийВидСравнения" , СценарийВидСравнения);
	СтруктураНастроекОтчета.Вставить("СценарийИспользование", СценарийИспользование);
	
	// Изменение кода. Начало. 08.05.2014{{
	Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
		СтруктураНастроекОтчета.Вставить("Организация"             , Организация);
	    СтруктураНастроекОтчета.Вставить("ОрганизацияВидСравнения" , ОрганизацияВидСравнения);
	    СтруктураНастроекОтчета.Вставить("ОрганизацияИспользование", ОрганизацияИспользование);
    КонецЕсли;
    // Изменение кода. Конец. 08.05.2014}}
	
	СтруктураНастроекОтчета.Вставить("ВыводитьСуммуРегл"    , ВыводитьСуммуРегл);
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуУпр"     , ВыводитьСуммуУпр);
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуСценарий", ВыводитьСуммуСценарий);
	
	СтруктураНастроекОтчета.Вставить("ПоВалютам"			, ПоВалютам);
	СтруктураНастроекОтчета.Вставить("ПоСубсчетамИСубконто"	, ПоСубсчетамИСубконто);
	СтруктураНастроекОтчета.Вставить("ПоСубсчетам"			, ПоСубсчетамИСубконто);
    
	НастройкиОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", Новый ХранилищеЗначения(НастройкиОтбора));
    
	Возврат СтруктураНастроекОтчета;
	
КонецФункции // СформироватьОбщуюСтруктуруДляРасшифровки()
	
#КонецОбласти

#КонецОбласти

#Область Инициализация

ИмяРегистраБухгалтерии = "бит_Бюджетирование";

СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

#КонецОбласти

#КонецЕсли
