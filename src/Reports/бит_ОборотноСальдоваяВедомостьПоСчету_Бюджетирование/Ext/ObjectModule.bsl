#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Текущий вариант отчета. 

Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

Перем ЕстьВалюта Экспорт; // Хранить признак наличия валюты.

Перем ЕстьКоличество Экспорт; // Хранить признак наличия количества.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Процедура выполняет сохранение настроек отчета.
// 
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина, , Истина);
	
КонецПроцедуры // ПрименитьНастройку()

// Процедура заполняет начальные настройки построителя отчета.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МассивТекущихПоказателей = СформироватьМассивПоказателей();
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Истина, 
		Истина, Истина, РазвернутоеСальдо);

			
	ТекстПоля    = "";
	ТекстОтбор   = "";
	ТекстИтоги = "  ЦФО.*";
	Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
		ТекстИтоги = ТекстИтоги + ", Организация.*";	
	КонецЕсли;
	ТекстПорядок = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч + 1;
		
		ТекстПоля = ТекстПоля + ", " + " ОстаткиИОбороты.Субконто" + Сч + " КАК Субконто" + Сч;
		ТекстПоля = ТекстПоля + ", " + " ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Субконто" + Сч + ") КАК Субконто" + Сч + "Представление";
	
		ТекстОтбор   = ТекстОтбор + ", Субконто" + Сч + ".*";
		ТекстИтоги   = ТекстИтоги + ", Субконто" + Сч + ".*";
		ТекстПорядок = ТекстПорядок + ", Субконто" + Сч + ".*";
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
		
	КонецЕсли;
	
	// Изменение кода. Начало. 12.05.2014{{
    ТекстОтбор = ТекстОтбор + ", Валюта.*, ЦФО.*, Сценарий.*, Организация.*";
	// Изменение кода. Конец. 12.05.2014}}
    
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстОтбор = "{" + Сред(ТекстОтбор, 2) + "}";
		
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	
	Текст = Текст + " 
	|
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ТекстОтбор + ") КАК ОстаткиИОбороты
    |
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		Текст = Текст + "
		|{УПОРЯДОЧИТЬ ПО
		|" + Сред(ТекстПорядок, 2) + "}";
		
	КонецЕсли;
    
    ОчищатьИтогиПоСценарию = Ложь;
    
	СтрокаИтогов = бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Ложь, , , РазвернутоеСальдо, ОчищатьИтогиПоСценарию);
	
	Текст = Текст + "
	|ИТОГИ " + Сред(СтрокаИтогов, 2); 
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
		
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч + 1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто" + Сч);
		Поле.ТипЗначения   = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
	
	// Определим признаки учета субконто, которые могут быть использованы.
    СтруктураУчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьПризнакиУчетаСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии, МассивСубконто);
	ЕстьВалюта     = СтруктураУчета.ЕстьВалюта;
    ЕстьКоличество = СтруктураУчета.ЕстьКоличество;
		
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек.
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

#КонецОбласти

#Область ЗаголовокОтчета

// Функция формирует заголовок отчета (синоним).
// 
// Возвращаемое значение:
//  Строка - заголовок отчета.
// 
Функция ЗаголовокОтчета() Экспорт
    
	ПредставлениеРегистра = "бюджетирование";
	СтрокаПоСчету = ?(ЗначениеЗаполнено(Счет), Счет, Нстр("ru = ' не выбран счет'"));
	
	ТекстЗаголовка = Нстр("ru = 'Оборотно-сальдовая ведомость по счету %2% (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра, СтрокаПоСчету);
	
	Возврат ТекстЗаголовка;
    
КонецФункции // ЗаголовокОтчета()

// Функция формирует табличный документа отчета
// и выполняет заполнение области "Заголовок".
// 
// Возвращаемое значение:
//  ТабличныйДокумент - заголовок отчета.
// 
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
    
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	ЗаголовокОтчета.Параметры.ОписаниеПериода  = ОписаниеПериода;

	ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
    КонецЕсли;
	Если ВыводитьСуммуСценарий Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (сценарий)'");
    КонецЕсли;
	Если ПоВалютам Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
	КонецЕсли; 
	Если ПоКоличеству Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'количество'");
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + Нстр("ru = 'субсчетам, '");
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги +  Нстр("ru = 'субконто: '") + бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги =  Нстр("ru = 'Детализация по '") + ТекстПроИтоги;
	КонецЕсли;

	ЗаголовокОтчета.Параметры.Заголовок = ЗаголовокОтчета();

	// Вывод списка фильтров:
	СтрОтбор = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

#КонецОбласти

#Область ФормированиеОтчета

// Процедура выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент - Табличный документ, формируемый отчетом.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина) - признак отображения заголовка.
//  ВысотаЗаголовка     - Число (По умолчанию = 0) - высота заголовка.
// 
// Возвращаемое значение:
//  Булево - отчет сформирован.
// 
Функция СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Очистка табличного поля
	ДокументРезультат.Очистить();
		
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;
	    
		Макет           = ПолучитьМакет("Макет");
		ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

		// Наклонный шрифт групп
		ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт, , , , Истина);

		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	    
	 		
		МассивГруппировок = СформироватьМассивГруппировок();
	    
		МассивПоказателей = СформироватьМассивПоказателей();
			
		// Формат показателей
		СтруктураФорматовПоказателей = бит_БухгалтерскиеОтчетыСервер.СформироватьСтруктуруФорматовПоказателей(МассивПоказателей, ИмяРегистраБухгалтерии);
			
		ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
		
		ДокументРезультат.Вывести(ЗаголовокОтчета, 1);

		ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "РазвернутоеСальдо", "");
		ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Числа");
		ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Числа");
		ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Счет");
		ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Счет");
		ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Счет");
		ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа");
		ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");
		ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");
		ОбластьСтрокаСчетВал       = Макет.ПолучитьОбласть("СтрокаВал|Счет");
		ОбластьСтрокаЧислаВал      = Макет.ПолучитьОбласть("СтрокаВал|Числа");
		ОбластьСтрокаПоказателяСчетВал  = Макет.ПолучитьОбласть("СтрокаПоказателяВал|Счет");
		ОбластьСтрокаПоказателяЧислаВал = Макет.ПолучитьОбласть("СтрокаПоказателяВал|Числа");

		СоответствиеСчетовПредков = бит_БухгалтерскиеОтчетыСервер.ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
		
		СтруктураПараметровОграничений = бит_БухгалтерскиеОтчетыСервер.СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, ПоВалютам);
		
		//Если ПоВалютам Тогда		
		//	МассивГруппировок.Вставить(1, "Валюта");	 		
		//КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОбластьСтрокаСчет"		   , ОбластьСтрокаСчет);
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет" , ОбластьСтрокаПоказателяСчет);
		СтруктураПараметров.Вставить("ДокументРезультат"		   , ДокументРезультат);
		СтруктураПараметров.Вставить("ШрифтГрупп"				   , ШрифтГрупп);
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
		СтруктураПараметров.Вставить("ОбластьСтрокаЧисла"		   , ОбластьСтрокаЧисла);
		СтруктураПараметров.Вставить("ФорматПоказателей"		   , СтруктураФорматовПоказателей);
		СтруктураПараметров.Вставить("НетЛинии"					   , Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
		СтруктураПараметров.Вставить("МассивПоказателей"		   , МассивПоказателей);
		СтруктураПараметров.Вставить("МассивГруппировок"		   , МассивГруппировок);
		СтруктураПараметров.Вставить("СоответствиеСчетовПредков"   , СоответствиеСчетовПредков);
		СтруктураПараметров.Вставить("СтруктураОграничений"		   , СтруктураПараметровОграничений);
		СтруктураПараметров.Вставить("ОбластьСтрокаСчетВал"		       , ОбластьСтрокаСчетВал);
		СтруктураПараметров.Вставить("ОбластьСтрокаЧислаВал"		   , ОбластьСтрокаЧислаВал);
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчетВал"  , ОбластьСтрокаПоказателяСчетВал);
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧислаВал" , ОбластьСтрокаПоказателяЧислаВал);
		
		// Формирование запроса
		Запрос = СформироватьЗапрос(СтруктураПараметров);
		РезультатЗапроса = Запрос.Выполнить();
		
		// Если ПоВалютам Тогда 		
		// 	ДокументРезультат.НачатьАвтогруппировкуСтрок();
		// 	бит_БухгалтерскиеОтчетыСервер.ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ЭтотОбъект
		// 													, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам
		// 													, "Валюта")
		// 													, 0
		// 													, СтруктураПараметров);     		
		// КонецЕсли;

		ДокументРезультат.НачатьАвтогруппировкуСтрок();
		Если МассивГруппировок.Количество() > 0 Тогда
			
			бит_БухгалтерскиеОтчетыСервер.ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ЭтотОбъект
															, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам
															, МассивГруппировок[0])
															, 0
															, СтруктураПараметров);
		КонецЕсли;
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
		// Если ПоВалютам Тогда		
		// 	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();	 		
		// КонецЕсли;

		ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

		// Выведем общие итоги
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		Выборка.Следующий();
		ВыводимаяОбласть = ОбластьИтогиСчет;
		ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
		
		бит_БухгалтерскиеОтчетыСервер.ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка
																					, ИмяРегистраБухгалтерии
																					, МассивПоказателей
																					, СтруктураФорматовПоказателей
																					, Счет
																					, ОбластьИтогиСтрокаЧисла
																					, ОбластьИтогиЧислаМакет
																					, ОбластьИтогиСтрокаСчет
																					, ДокументРезультат
																					, РазвернутоеСальдо);

		ДокументРезультат.Вывести(ИтогиПодвал, 1);
		
		// Заполним общую расшифровку:
		СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
		СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
		
	    ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;

		// Зафиксируем заголовок отчета
		ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

		// Первую колонку не печатаем
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
		
		// Присвоим имя для сохранения параметров печати табличного документа.
		ДокументРезультат.КлючПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;

		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
	
	КонецЕсли;
	
	Возврат ОтчетСформирован;

КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Возвращаемое значение:
//  Массив - массив показателей.
//
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
    
	Если ВыводитьСуммуСценарий Тогда 
        МассивПоказателей.Добавить("СуммаСценарий");
    КонецЕсли;
    
    Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;
    
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

// Формирует запрос по установленным условия, фильтрам и группировкам.
// 
// Параметры:
//  СтруктураПараметров - Структура, параметры необходимые для формирования текста запроса.
// 
// Возвращаемое значение:
//  Запрос - запрос, по которому формируется отчет.
// 
Функция СформироватьЗапрос(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.УстановитьПараметр("ДатаНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ?(Период.ДатаОкончания = '00010101000000'
										  , Период.ДатаОкончания
										  , Новый Граница(КонецДня(Период.ДатаОкончания), ВидГраницы.Включая)));

	Если ПоСубсчетам Тогда
		Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиИОбороты.Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	Иначе
	    Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(&Счет) КАК СчетПредставление";
	КонецЕсли;
		
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
		
	КонецЕсли;
	
	Текст = Текст + бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей
																										, Истина
																										, Истина
																										, Истина
																										, РазвернутоеСальдо);
		
    ТекстПоля    = "";
	ТекстИтоги   = "";
	ТекстПорядок = "";
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
	
		ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		
		ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + бит_БухгалтерскиеОтчетыСервер.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
	
	КонецЦикла;
	
	ОтборПоВидамСубконто 		   = "";
	ОграниченияПоПостроителюОтчета = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос, ОтборПоВидамСубконто);
			
	СтрокаОграниченийПоРеквизитам = "";
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Текст = Текст + 
			ТекстПоля + " 
	|
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет)," + ОтборПоВидамСубконто + " 
	|, " + СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета + ") КАК ОстаткиИОбороты
	|";
	
	Текст = Текст + "
					 |{ГДЕ
					 |	ОстаткиИОбороты.ЦФО.* КАК ЦФО,
					 |	ОстаткиИОбороты.Сценарий.* КАК Сценарий,
					 |  ОстаткиИОбороты.Организация.* КАК Организация}";

	
	ТекстИтогов = бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Ложь, , , РазвернутоеСальдо);
	
	Текст = Текст + Символы.ПС + "ИТОГИ" + Символы.ПС + Сред(ТекстИтогов, 2);
				
	Текст = Текст + "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	Валюта ";
		
	КонецЕсли;
	
	Текст = Текст + ТекстИтоги + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = Текст;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапрос()

// Функция возвращает общую структуру для расшифровки.
// 
// Возвращаемое значение:
//  Структура - общая структура расшифровки.
// 
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("Период" , Период);
	
	СтруктураНастроекОтчета.Вставить("Сценарий"             , Сценарий);
	СтруктураНастроекОтчета.Вставить("СценарийВидСравнения" , СценарийВидСравнения);
	СтруктураНастроекОтчета.Вставить("СценарийИспользование", СценарийИспользование);
	
	// Изменение кода. Начало. 12.05.2014{{
	Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
		СтруктураНастроекОтчета.Вставить("Организация"             , Организация);
		СтруктураНастроекОтчета.Вставить("ОрганизацияВидСравнения" , ОрганизацияВидСравнения);
		СтруктураНастроекОтчета.Вставить("ОрганизацияИспользование", ОрганизацияИспользование);
	КонецЕсли;
    // Изменение кода. Конец. 12.05.2014}}
		
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуРегл"    , ВыводитьСуммуРегл);
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуУпр"     , ВыводитьСуммуУпр);
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуСценарий", ВыводитьСуммуСценарий);
    
	НастройкиОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	СтруктураНастроекОтчета.Вставить("Отбор", Новый ХранилищеЗначения(НастройкиОтбора));
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции // СформироватьОбщуюСтруктуруДляРасшифровки()

// Функция возвращает массив группировок для отчета.
// 
// Параметры:
//  Массив - массив группировок.
// 
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции // СформироватьМассивГруппировок()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

// Проверка корректности настроек отчета
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПараметрыОтчетаКорректны()

	РезультатПроверки = 
		бит_БухгалтерскиеОтчетыСервер.ПроверитьСчет(Счет)
		И бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Истина)
		И Не бит_БухгалтерскиеОтчетыСервер.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()

#КонецОбласти

#КонецОбласти

#Область Инициализация

ИмяРегистраБухгалтерии = "бит_Бюджетирование";

СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

#КонецОбласти

#КонецЕсли
