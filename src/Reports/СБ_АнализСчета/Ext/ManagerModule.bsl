#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							//izhtc alena 26.08.2015(
							|ИспользоватьПриВыводеЗаголовка,
							//izhtc alena 26.08.2015)
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Анализ счета  (С корректировкой) " + ПараметрыОтчета.Счет + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
		
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"Счет", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПараметрыОтчета.Счет));
	БухгалтерскиеОтчеты.ИзменитьСхемуДляОтборовПоСубконтоСубсчетов(
		ПараметрыОтчета, КомпоновщикНастроек, Схема, "ОсновнойНаборДанных");

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", ПараметрыОтчета.Периодичность);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	// Проверяем наличие среди выбранных группировок оборотных субконто.
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОтчета.Счет);
	ЕстьВидСубконтоТолькоОбороты = Ложь;
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		
		ИмяФлагаВидаСубконто = "ВидСубконто" + НомерСубконто + "ТолькоОбороты";
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, ИмяФлагаВидаСубконто, СвойстваСчета[ИмяФлагаВидаСубконто]);
		
		Для каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл
			
			Если Не ПолеВыбраннойГруппировки.Использование
			 Или ЕстьВидСубконтоТолькоОбороты
			 Или Не СвойстваСчета[ИмяФлагаВидаСубконто]
			 Или Сред(ПолеВыбраннойГруппировки.Поле, 9, 1) <> Формат(НомерСубконто, "ЧГ=0") Тогда
				Продолжить;
			КонецЕсли;
			
			РазделительРеквизита = Сред(ПолеВыбраннойГруппировки.Поле, 10, 1);
			Если (ПустаяСтрока(РазделительРеквизита) Или РазделительРеквизита = ".")
			   И Лев(ПолеВыбраннойГруппировки.Поле, 8) = "Субконто" Тогда
				ЕстьВидСубконтоТолькоОбороты = Истина;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Если КоличествоПоказателей > 1 Тогда
		
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = БухгалтерскиеОтчеты.ЗаголовокГруппыПоказателей();
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Индекс = 1 По 3 Цикл
			Если Индекс = 1 Тогда
					ЗначениеПодстановки = "НачальныйОстаток";
				ИначеЕсли Индекс = 2 Тогда 
					ЗначениеПодстановки = "Оборот";
				Иначе
					ЗначениеПодстановки = "КонечныйОстаток";
				КонецЕсли;
			Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя + ЗначениеПодстановки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ГруппаДт = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаДт.Использование = Истина;
	ГруппаДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаКт = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаКт.Использование = Истина;
	ГруппаКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;	
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("ВР");
	МассивПоказателей.Добавить("Контроль");
	
	МассивПоказателейДоп = Новый Массив;
	МассивПоказателейДоп.Добавить("ВалютнаяСумма");
	МассивПоказателейДоп.Добавить("Количество");
	
	ВыводимыеПоля = Новый Массив;
	
	ВидОстатков = ?(ПараметрыОтчета.РазвернутоеСальдо, "Развернутый", "");
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатков + "ОстатокДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатков + "ОстатокКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатков + "ОстатокДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатков + "ОстатокКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода."  + ИмяПоказателя + "КонечныйОстатокДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода."  + ИмяПоказателя + "КонечныйОстатокКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	//izhtc alena 26.08.2015(
	//Начало изменений Широков Н. <SoftBalance> 16/10/13-13:02 
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ИсточникДанных", ПараметрыОтчета.ИсточникДанных);
	//Конец изменений Широков Н.
	//izhtc alena 26.08.2015)
	
	// Дополнительные данные.
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru = 'Уменьшенный автоотступ'") Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = НСтр("ru = 'Уменьшенный автоотступ'");
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец); 
	
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если Не ПараметрыОтчета.ПоСубсчетам Тогда
		
		ЗначениеОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		
	КонецЕсли;

	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
			
			Если ЕстьВидСубконтоТолькоОбороты Тогда
				// Если есть оборотное субконто, то могут возникать ненужные группировки с пустыми ресурсами.
				ДобавитьОтборПоВыводимымПолям(ВыводимыеПоля, Структура);
			КонецЕсли;
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
			
		КонецЕсли;
	КонецЦикла;
	
	// Период.
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура);
	Если ПараметрыОтчета.Периодичность > 0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
	КонецЕсли;
	
	Для каждого ЭлементГруппировки Из Структура.ПоляГруппировки.Элементы Цикл
		Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период")) Тогда
			Поле = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			Поле.Поле = ЭлементГруппировки.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Валюта.
	Если ПараметрыОтчета.ПоказательВалютнаяСумма И БухгалтерскиеОтчетыКлиентСервер.НайтиГруппировку(КомпоновщикНастроек.Настройки.Структура, "Валюта") = Неопределено Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
	КонецЕсли;
	
	// Кор счет.
	Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор"               , ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеПолейГруппировки", РасположениеПолейГруппировкиКомпоновкиДанных.ОтдельноИТолькоВИтогах); 
	
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
	
	Если Не ПараметрыОтчета.ПоСубсчетамКорСчетов Тогда
		// Установка отбора на выводимый уровень иерархии счета.
		ГруппаЭлементовОтбора = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", 1);
		СписокСчетовПоСубсчетам = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПоСубсчетам(ПараметрыОтчета.ГруппировкаКор);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "КорСчет", СписокСчетовПоСубсчетам, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, СписокСчетовПоСубсчетам.Количество() > 0);
	КонецЕсли;
	
	// КорСубконто.
	КоличествоКорГруппировок = 0;
	// Позиция подразделения: 0 - подразделение не нужно выводить, -1 - подразделение нужно выводить всегда 1-м в группировке.
	// остальные значения - выводить на указанной позиции.
	ПозицияПодразделения = 0; 
	КорСчетаСПодразделением = Новый Массив;
	Для Каждого СтрокаГруппировки Из ПараметрыОтчета.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			ИндексПодразделения = (СтрНайти(СтрокаГруппировки.ПоСубконто,"+0")+1)/2;
			Если ИндексПодразделения <> ПозицияПодразделения И ИндексПодразделения >= 1 Тогда
				// Если в таблице подразделения находятся на разных позициях - то подразделение всегда выводится первым.
				ПозицияПодразделения = ?(ПозицияПодразделения = 0, ИндексПодразделения, -1);
			КонецЕсли;
			
			Если ИндексПодразделения <> 0.5 Тогда
				КорСчетаСПодразделением.Добавить(СтрокаГруппировки.Счет);
			КонецЕсли;
			
			КоличествоКорСубконто = СтрЧислоВхождений(СтрокаГруппировки.ПоСубконто, "+") - СтрЧислоВхождений(СтрокаГруппировки.ПоСубконто, "+0");
			КоличествоКорГруппировок = Макс(КоличествоКорГруппировок, КоличествоКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Если ПозицияПодразделения = -1 Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорПодразделение");
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
	ИначеЕсли ПозицияПодразделения <> 0 Тогда
		КоличествоКорГруппировок = КоличествоКорГруппировок + 1;
	КонецЕсли;
	
	НомерСубконто = 0;
	Для Индекс = 1 По КоличествоКорГруппировок Цикл 
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		Если Индекс = ПозицияПодразделения Тогда
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорПодразделение");
		Иначе
			НомерСубконто = НомерСубконто + 1;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСубконто" + НомерСубконто);
		КонецЕсли;
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
	КонецЦикла;
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	Если ПозицияПодразделения <> 0 Тогда
		
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("КорПодразделение");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "КорСчет", СчетаВИерархии(КорСчетаСПодразделением), ВидСравненияКомпоновкиДанных.НеВСписке);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
		
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;
	
	// Пометить строки для удаления по счетам, на которых не ведется налоговый учет.
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ВР");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("Контроль");
	
	Для Каждого Показатель Из МассивПоказателей Цикл
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйРазвернутыйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода." + Показатель + "КонечныйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода." + Показатель + "КонечныйРазвернутыйОстатокДт");
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
	ДобавитьУсловиеПоВыбраннымРесурсам(ПараметрыОтчета, Схема);
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	КорСчетаВсе = Новый СписокЗначений;
	
	// Корректировка запроса для группировки по кор. счетам
	ИсходныйТекстЗапроса = МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Элементы.Обороты.Запрос;
	КонечныйТекстЗапроса = "";
	ЗавершающаяЧастьЗапроса = ") КАК ХозрасчетныйОбороты";
	//izhtc alena 28.08.2015(
	//ПозицияКорсчета = Найти(ИсходныйТекстЗапроса, ", " + ЗавершающаяЧастьЗапроса);
	ПозицияКорсчета = Найти(ИсходныйТекстЗапроса, ",
		|			) КАК ХозрасчетныйОбороты");
	//izhtc alena 28.08.2015)
		
	ПостояннаяЧастьЗапроса = Лев(ИсходныйТекстЗапроса, ПозицияКорСчета - 1);
	
	// Поиск условия по кор. счету
	Индекс = СтрДлина(ПостояннаяЧастьЗапроса);
	Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1); 
	УсловиеКорСчета = "";
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1);
		Если Символ = "," Тогда
			УсловиеКорСчета = Сред(ПостояннаяЧастьЗапроса, Индекс + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формируем запрос-объединение для детализации корсчетов
	Индекс = 1;
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.ГруппировкаКор Цикл 
		Если СтрокаТаблицы.Использование И ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			
			ИерархияКорСчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СтрокаТаблицы.Счет);
			Для Каждого КорСчет Из ИерархияКорСчета Цикл
				КорСчетаВсе.Добавить(КорСчет);
			КонецЦикла;
			
			Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
				ТекстУсловияКорСчета = " И КорСчет В (&КорСчет" + Индекс + ")";
			Иначе
				ТекстУсловияКорСчета = " КорСчет В (&КорСчет" + Индекс + ")";
			КонецЕсли;
			
			//Добавим значение корсчета
			НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
			НовоеЗначение.Имя      = "КорСчет" + Индекс;
			НовоеЗначение.Значение = ИерархияКорСчета;
			
			//Добавим значение корсубконто
			СписокКорСубконто = Новый СписокЗначений;
			
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
			СписокВидовСубконто = Новый СписокЗначений;
			КоличествоСубконто = СтрДлина(СтрокаТаблицы.ПоСубконто) / 2;
			Для НомерСубконто = 1 По КоличествоСубконто Цикл
				Если Сред(СтрокаТаблицы.ПоСубконто, НомерСубконто*2, 1)="0" Тогда
					Продолжить;
				КонецЕсли;
				Если  ?(Сред(СтрокаТаблицы.ПоСубконто, НомерСубконто * 2 - 1, 1) = "+", Истина, Ложь) Тогда
					СписокКорСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, НомерСубконто*2, 1)]); 
				КонецЕсли;
			КонецЦикла;
			
			НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
			НовоеЗначение.Имя = "КорСубконто" + Индекс;
			НовоеЗначение.Значение = СписокКорСубконто;
			
			Если СписокКорСубконто.Количество() = 0 Тогда 
				ТекстУсловияКорСубконто = "";
				НачальныйИндексКор = 0;
			Иначе
				ТекстУсловияКорСубконто = "&КорСубконто" + Индекс;
				НачальныйИндексКор = СписокКорСубконто.Количество();
			КонецЕсли;
			
			ПромежуточныйТекстЗапроса = ПостояннаяЧастьЗапроса;
			
			Для ИндексКор = НачальныйИндексКор + 1 По 3 Цикл
				НачалоСтроки = Найти(ПромежуточныйТекстЗапроса, "ХозрасчетныйОбороты.КорСубконто" + ИндексКор);
				Пока НачалоСтроки <> 0 Цикл
					ВременныйТекст = Сред(ПромежуточныйТекстЗапроса, НачалоСтроки);
					КонецСтроки = Найти(ВременныйТекст, " КАК ");
					СтрокаПоиска = Сред(ВременныйТекст, 1, КонецСтроки - 1) + " КАК "; 
					
					Если Найти(СтрокаПоиска, ") КАК ") <> 0 Тогда
						СтрокаЗамены = "NULL) КАК ";
					Иначе
						СтрокаЗамены = "NULL КАК ";
					КонецЕсли;
					
					ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, СтрокаПоиска, СтрокаЗамены);
					НачалоСтроки = Найти(ПромежуточныйТекстЗапроса, "ХозрасчетныйОбороты.КорСубконто" + ИндексКор);
				КонецЦикла;
			КонецЦикла;
			
			КонечныйТекстЗапроса = КонечныйТекстЗапроса + " " + ПромежуточныйТекстЗапроса + " " + ТекстУсловияКорСчета + ", " + ТекстУсловияКорСубконто + ЗавершающаяЧастьЗапроса;
			КонечныйТекстЗапроса = КонечныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
			
			
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Индекс > 1 Тогда 
		КонечныйТекстЗапроса = Сред(КонечныйТекстЗапроса, 0, СтрДлина(КонечныйТекстЗапроса) - 16);
	КонецЕсли;
	
	ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "ХозрасчетныйОбороты.ПодразделениеКор КАК", "NULL КАК");
	Для НомерСубконто = 1 По 3 Цикл
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "ХозрасчетныйОбороты.КорСубконто" + НомерСубконто + " КАК", "NULL КАК");
	КонецЦикла;
		
	Если Индекс > 1 Тогда
		Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
			ТекстУсловияКорСчета = " И КорСчет НЕ В (&КорСчетВсе)";
		Иначе
			ТекстУсловияКорСчета = " КорСчет НЕ В (&КорСчетВсе)";
		КонецЕсли;
		НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
		НовоеЗначение.Имя      = "КорСчетВсе";
		НовоеЗначение.Значение = КорСчетаВсе;
		
		ИсходныйТекстЗапроса = ПостояннаяЧастьЗапроса + ТекстУсловияКорСчета + ЗавершающаяЧастьЗапроса;
	КонецЕсли;
	
	//izhtc alena 28.08.2015(
	ДополнитьЗапросПоКорректировке = Ложь;
	//izhtc alena 28.08.2015)
	
	Если Не ПустаяСтрока(КонечныйТекстЗапроса) Тогда
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + КонечныйТекстЗапроса;
		//izhtc alena 28.08.2015(
		ДополнитьЗапросПоКорректировке = Истина;
		//izhtc alena 28.08.2015)
	Иначе
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса;
	КонецЕсли;
	
	КонечныйТекстЗапроса = СокрЛП(СтрЗаменить(КонечныйТекстЗапроса, "РАЗРЕШЕННЫЕ", ""));
	
	//Начало изменений Широков Н. <SoftBalance> 17/10/13-14:16 
	Если ДополнитьЗапросПоКорректировке Тогда
		
		ТекстЗапросаКорректировки = СтрЗаменить(КонечныйТекстЗапроса,"РегистрБухгалтерии.Хозрасчетный.", "РегистрБухгалтерии.СБ_КорректировкаРСБУ.");
		
		УсловиеОтбораИсточникДанныхРСБУ = 
		"ВЫБОР &ИсточникДанных
		|				КОГДА 0
		|					ТОГДА ИСТИНА
		|				КОГДА 1
		|					ТОГДА ЛОЖЬ
		|				КОГДА 2
		|					ТОГДА ИСТИНА
		|			КОНЕЦ";
		
		УсловиеОтбораИсточникДанныхКорректировка = 
		"ВЫБОР &ИсточникДанных
		|				КОГДА 0
		|					ТОГДА ИСТИНА
		|				КОГДА 1
		|					ТОГДА ИСТИНА
		|				КОГДА 2
		|					ТОГДА ЛОЖЬ
		|			КОНЕЦ";
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, УсловиеОтбораИсточникДанныхРСБУ, УсловиеОтбораИсточникДанныхКорректировка);
		
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, "ХозрасчетныйОбороты.СуммаНУОборотДт КАК НУОборотДт", "NULL");
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, "ХозрасчетныйОбороты.СуммаНУОборотКт КАК НУОборотКт", "NULL");
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, "ХозрасчетныйОбороты.СуммаПРОборотДт КАК ПРОборотДт", "NULL");
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, "ХозрасчетныйОбороты.СуммаПРОборотКт КАК ПРОборотКт", "NULL");
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, "ХозрасчетныйОбороты.СуммаВРОборотДт КАК ВРОборотДт", "NULL");
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, "ХозрасчетныйОбороты.СуммаВРОборотКт КАК ВРОборотКт", "NULL");
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, 
		"ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Счет.НалоговыйУчет
		|			ТОГДА ХозрасчетныйОбороты.СуммаОборотДт - ХозрасчетныйОбороты.СуммаНУОборотДт - ХозрасчетныйОбороты.СуммаВРОборотДт - ХозрасчетныйОбороты.СуммаПРОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КонтрольОборотДт", "NULL");
		ТекстЗапросаКорректировки = СтрЗаменить(ТекстЗапросаКорректировки, 
		"ВЫБОР
		|		КОГДА ХозрасчетныйОбороты.Счет.НалоговыйУчет
		|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаНУОборотКт - ХозрасчетныйОбороты.СуммаВРОборотКт - ХозрасчетныйОбороты.СуммаПРОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КонтрольОборотКт", "NULL");
		
		
		КонечныйТекстЗапроса = КонечныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапросаКорректировки;
		
	КонецЕсли; 
	//Конец изменений Широков Н. 
	КонечныйТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(КонечныйТекстЗапроса, 8); 
	
	МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Элементы.Обороты.Запрос = КонечныйТекстЗапроса;
	
	// Оставим уникальные строки со счетами.
	ГруппировкаКор = БухгалтерскиеОтчеты.УникальныеНастройкиОтчетаПоСчетам(ПараметрыОтчета.ГруппировкаКор);
	// Свернем счета-группы по одинаковым субконто и выделим у них субсчета с несовпадающими субконто.
	ГруппировкаКор = УникальныеНастройкиОтчетаПоСубконто(ГруппировкаКор);
	
	// Обработка макета компоновки для вывода.
	МакетШапкиОтчета = БухгалтерскиеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
		
	КолонкаКорСчета = 1;
	Для Каждого СтрокаМакета Из МакетШапкиОтчета.Макет Цикл
		КолонкаМакета = 0;
		Для Каждого Ячейка Из СтрокаМакета.Ячейки Цикл
			Если Ячейка.Элементы.Количество() = 1 Тогда
				Если ТипЗнч(Ячейка.Элементы[0].Значение) = Тип("Строка") 
					И ВРег(Строка(Ячейка.Элементы[0].Значение)) = "КОР. СЧЕТ" Тогда 
					КолонкаКорСчета = КолонкаМакета;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			КолонкаМакета = КолонкаМакета + 1;
		КонецЦикла;
	КонецЦикла;
	
	КоличествоГруппировок = 1 + ?(ПараметрыОтчета.Периодичность > 0, 1, 0);
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоОсновныхГруппировок = КоличествоГруппировок;
	
	КоличествоКорГруппировок = 0;
	ЕстьКорПодразделение = Ложь;
	Для Каждого СтрокаГруппировки Из ПараметрыОтчета.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорСубконто = СтрЧислоВхождений(СтрокаГруппировки.ПоСубконто, "+");
			
			Если СтрНайти(СтрокаГруппировки.ПоСубконто, "+0") > 0 Тогда
				КоличествоКорСубконто = КоличествоКорСубконто - 1;
				ЕстьКорПодразделение = Истина;
			КонецЕсли;
			
			КоличествоКорГруппировок = Макс(КоличествоКорГруппировок, КоличествоКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКорГруппировок = КоличествоКорГруппировок + ?(ЕстьКорПодразделение, 2, 1);
	
	КоличествоСтрокШапки = Макс(КоличествоГруппировок, КоличествоКорГруппировок);
	ПараметрыОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = КоличествоКолонок - 3 По КоличествоКолонок - 1 Цикл
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	КоличествоКолонок = МакетШапкиОтчета.Макет[0].Ячейки.Количество();
	МаксимальныйИндексКорКолонки = ?(КоличествоПоказателей > 1, КоличествоКолонок - 4, КоличествоКолонок - 3);
	Для ИндексКолонки = КолонкаКорСчета По МаксимальныйИндексКорКолонки Цикл
		Если КоличествоОсновныхГруппировок > 1 Тогда
			Для ИндексСтроки = 0 По КоличествоКорГруппировок - 1 Цикл
				ЯчейкаПриемник = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
				ЯчейкаИсточник = МакетШапкиОтчета.Макет[КоличествоОсновныхГруппировок + ИндексСтроки - 1].Ячейки[ИндексКолонки];
				
				ЯчейкаПриемник.Элементы.Очистить();
				Для Каждого Элемент Из ЯчейкаИсточник.Элементы Цикл
					НовыйЭлемент = ЯчейкаПриемник.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				КонецЦикла; 
				
				Для Каждого Элемент Из ЯчейкаИсточник.Оформление.Элементы Цикл
					Индекс = ЯчейкаИсточник.Оформление.Элементы.Индекс(Элемент);
					ЗаполнитьЗначенияСвойств(ЯчейкаПриемник.Оформление.Элементы[Индекс], Элемент);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексКолонки = КолонкаКорСчета По МаксимальныйИндексКорКолонки Цикл 
		ЯчейкаИсточник = МакетШапкиОтчета.Макет[КоличествоКорГруппировок - 1].Ячейки[ИндексКолонки];
		Для ИндексСтроки = КоличествоКорГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			Для Каждого Элемент Из ЯчейкаИсточник.Оформление.Элементы Цикл
				Индекс = ЯчейкаИсточник.Оформление.Элементы.Индекс(Элемент);
				ЗаполнитьЗначенияСвойств(Ячейка.Оформление.Элементы[Индекс], Элемент);
			КонецЦикла;
		КонецЦикла;
		Для ИндексСтроки = 0 По КоличествоКорГруппировок - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
		КонецЦикла;
		Для ИндексСтроки = КоличествоКорГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл 
		Для ИндексСтроки = КоличествоОсновныхГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	СписокГруппировок = Новый Массив;
	СписокГруппировок.Добавить("Счет");
	СписокГруппировок.Добавить("Субконто");
	СписокГруппировок.Добавить("Подразделение");
	СписокГруппировок.Добавить("Организация");
	СписокГруппировок.Добавить("Валюта");
	СписокГруппировок.Добавить("Период");
	МакетыЗаголовков = Новый Массив;
	ПараметрыПоиска = БухгалтерскиеОтчеты.ПараметрыПоискаВТелеМакетаКомпоновки();
	ПараметрыПоиска.МножественныйПодбор      = Истина;
	ПараметрыПоиска.СвойствоДляИдентификации = "ПолеГруппировки";
	ПараметрыПоиска.ВозвращаемыйТип          = "Макет";
	Для каждого Группировка Из СписокГруппировок Цикл
		
		МакетыГруппировки = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
								МакетКомпоновки, Группировка, ПараметрыПоиска);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МакетыЗаголовков, МакетыГруппировки);

	КонецЦикла; 
	
	МакетГруппировкиКорЗаголовок = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
									МакетКомпоновки, "Кор", ПараметрыПоиска);
	МакетГруппировкиСчетПодвал = Новый Массив;
	МакетыПодвалов = Новый Массив;
	ПараметрыПоиска.ТипМакета = "Подвал";
	Для каждого Группировка Из СписокГруппировок Цикл
		
		МакетыГруппировки = БухгалтерскиеОтчеты.ПодобратьЭлементыИзТелаМакета(
								МакетКомпоновки, Группировка, ПараметрыПоиска);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МакетыПодвалов, МакетыГруппировки);
		Если Группировка = "Счет" Тогда
			МакетГруппировкиСчетПодвал = МакетыГруппировки;
		КонецЕсли;

	КонецЦикла; 
	
	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;

	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл

		МассивДляУдаления.Очистить();
		Если МакетыЗаголовков.Найти(Макет) <> Неопределено Тогда

			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = КоличествоПоказателей По Макет.Макет.Количество() - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);
			КонецЦикла;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[КолонкаКорСчета];
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
			КонецЦикла;
			
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			Ячейка01 = Макет.Макет[0].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = Ячейка01.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = НСтр("ru = 'Начальное сальдо'");
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение); 
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);

		КонецЕсли;
		
		Если МакетыПодвалов.Найти(Макет) <> Неопределено Тогда

			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);
			КонецЦикла;
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			
			Если МакетГруппировкиСчетПодвал.Найти(Макет) <> Неопределено Тогда
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей  * 3 - 1 Цикл
					Для Каждого Ячейка Из Макет.Макет[ИндексСтроки].Ячейки Цикл
						// Выделим область итогов полужирным шрифтом.
						ШрифтИтога = Ячейка.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт"));
						Если ШрифтИтога <> Неопределено Тогда
							ШрифтНаЗамену = Новый Шрифт(ШрифтИтога.Значение,,, Истина);
							БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "Шрифт", ШрифтНаЗамену);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;

			// Область итога "Оборот".
			Для Каждого Ячейка Из Макет.Макет[КоличествоПоказателей].Ячейки Цикл
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			КонецЦикла;
			
			Для Каждого ПараметрМакета Из Макет.Параметры Цикл
				Если ТипЗнч(ПараметрМакета) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
					Для Каждого ВыражениеПоля Из ПараметрМакета.ВыраженияПолей Цикл
						Если ВыражениеПоля.Поле = "БухТипРесурса" Тогда
							ПараметрМакета.ВыраженияПолей.Удалить(ВыражениеПоля);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			ЯчейкаN1 = Макет.Макет[КоличествоПоказателей].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = ЯчейкаN1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = НСтр("ru = 'Оборот'");
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		
			Для Индекс = 0 По Макет.Макет.Количество() - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[КолонкаКорСчета];
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
			КонецЦикла;
			
			// Область итога "Конечное сальдо".
			Для Каждого Ячейка Из Макет.Макет[КоличествоПоказателей * 2].Ячейки Цикл
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);	
			КонецЦикла;
			
			Ячейка2N1 = Макет.Макет[КоличествоПоказателей * 2].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = Ячейка2N1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = НСтр("ru = 'Конечное сальдо'");
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);

			Для ИндексКолонки = 1 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей * 3 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Истина);
				КонецЦикла;
			КонецЦикла;
			Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
				Для ИндексСтроки = КоличествоПоказателей * 2 + 1 По КоличествоПоказателей * 3 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;
		
		Если МакетГруппировкиКорЗаголовок.Найти(Макет) <> Неопределено Тогда

			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			Для Индекс = КоличествоПоказателей * 2 По КоличествоПоказателей * 3 - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			
			КоличествоКолонок = Макет.Макет[0].Ячейки.Количество();
			МаксимальныйИндексКолонки = ?(КоличествоПоказателей > 1, КоличествоКолонок - 4, КоличествоКолонок - 3);
			Для ИндексКолонки = 0 По МаксимальныйИндексКолонки Цикл
				Ячейка = Макет.Макет[КоличествоПоказателей].Ячейки[ИндексКолонки];
				Ячейка01 = Макет.Макет[0].Ячейки[ИндексКолонки];
				Для Каждого Элемент Из Ячейка01.Элементы Цикл
					НовыйЭлемент = Ячейка.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				КонецЦикла; 
				
				Для Каждого Элемент Из Ячейка01.Оформление.Элементы Цикл
					Индекс = Ячейка01.Оформление.Элементы.Индекс(Элемент);
					Приемник = Ячейка.Оформление.Элементы[Индекс];
					ЗаполнитьЗначенияСвойств(Приемник, Элемент);
				КонецЦикла;
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			КонецЦикла;
			
			Для ИндексКолонки = 1 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Истина);
				КонецЦикла;
			КонецЦикла;
			Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;

		Для Каждого Элемент Из МассивДляУдаления Цикл
			Макет.Макет.Удалить(Элемент);
		КонецЦикла;

	КонецЦикла;
	
	Если Не ПараметрыОтчета.ПоСубсчетам Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			Если ТипЗнч(Макет.Макет) = Тип("МакетГруппировкиДиаграммыОбластиКомпоновкиДанных")
				ИЛИ ТипЗнч(Макет.Макет) = Тип("МакетРесурсаДиаграммыОбластиКомпоновкиДанных") Тогда
				Для Каждого Параметр Из Макет.Параметры Цикл
					Если ТипЗнч(Параметр) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
						ВыражениеПоля = Параметр.ВыраженияПолей.Добавить();
						ВыражениеПоля.Поле      = "Счет";
						ВыражениеПоля.Выражение = "&Счет";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Снимем флаг Игнорировать значение Null для реквизитов субконто.
	БухгалтерскиеОтчеты.ОтключитьИгнорированиеNull(МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Поля);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	ВыводитьКолонкуСчет = Ложь;
	
	КоличествоГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОтчета.ПоСубсчетам ИЛИ ПараметрыОтчета.ПоказательВалютнаяСумма ИЛИ ПараметрыОтчета.Периодичность > 0 ИЛИ КоличествоГруппировок > 0 Тогда 
		ВыводитьКолонкуСчет = Истина;
	КонецЕсли;
	
	Если Не ВыводитьКолонкуСчет Тогда
		Результат.УдалитьОбласть(Результат.Область("C1"), ТипСмещенияТабличногоДокумента.ПоВертикали);	
	КонецЕсли;
	
	Результат.ФиксацияСлева = 0;
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	НаборПоказателей.Добавить("Контроль");
	НаборПоказателей.Добавить("ВалютнаяСумма");
	НаборПоказателей.Добавить("Количество");
	
	Возврат НаборПоказателей;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//izhtc alena 26.08.2015(
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт 
	
	БухгалтерскиеОтчетыВызовСервера.ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
	
	//Начало изменений Широков Н. <SoftBalance> 21/10/13-16:55 
	СБ_МеханизмКонтроляТрансляцииСервер.ДополнитьЗаголовокОтчета(ПараметрыОтчета, Результат);	
	//Конец изменений Широков Н.
КонецПроцедуры
//izhtc alena 26.08.2015)

#Область РасшифровкаСтандартныхОтчетов

// Заполняет настройки расшифровки (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки) для переданного экземпляра отчета.
//
// Параметры:
//  Настройки				 - Структура								 - Настройки расшифровки отчета, которые нужно заполнить (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки).
//  Объект					 - ОтчетОбъект								 - Отчет из данных которого нудно собрать универсальные настройки.
//  ДанныеРасшифровки		 - ДанныеРасшифровкиКомпоновкиДанных		 - Данные расшифровки отчета.
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных  - Идентификатор расшифровки из ячейки для которой вызвана расшифровка.
//  РеквизитыРасшифровки	 - Структура								 - Реквизиты отчета полученные из контекста расшифровываемой ячейки.
//
Процедура ЗаполнитьНастройкиРасшифровки(Настройки, Объект, ДанныеРасшифровки, ИдентификаторРасшифровки, РеквизитыРасшифровки) Экспорт

	БухгалтерскиеОтчетыРасшифровка.ЗаполнитьНастройкиРасшифровкиПоДаннымСтандартногоОтчета(Настройки, ДанныеРасшифровки, ИдентификаторРасшифровки, Объект, РеквизитыРасшифровки);
	
КонецПроцедуры

// Адаптирует переданные настройки для данного вида отчетов.
// Перед применением настроек расшифровки может возникнуть необходимость учесть особенности этого вида отчетов.
//
// Параметры:
//  Настройки	 - Структура - Настройки которые нужно адаптировать (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки).
//
Процедура АдаптироватьНастройки(Настройки) Экспорт
	
	// Удалим отбор по счету из настроек, так как в шапке отчета отбор по счету уже задан явно.
	ОтборыДляУдаления = Новый Массив;
	ПолеСчет = Новый ПолеКомпоновкиДанных("Счет");
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
		   И ЭлементОтбора.ЛевоеЗначение = ПолеСчет Тогда
			ОтборыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из ОтборыДляУдаления Цикл
		Настройки.Отбор.Элементы.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает какими отчетами и при каких условиях может быть расшифрован этот вид отчетов.
//
// Параметры:
//  Правила - ТаблицаЗначений с правилами расшифровки этого отчета см. БухгалтерскиеОтчетыРасшифровка.НовыйПравилаРасшифровки.
//
Процедура ЗаполнитьПравилаРасшифровки(Правила) Экспорт

	Правило = Правила.Добавить();
	Правило.Отчет = "ОтчетПоПроводкам";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Счет", "Счет");
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "БухТипРесурса", "БухТипРесурса");
	Правило.ШаблонПредставления = НСтр("ru = 'Отчет по проводкам'");

	Правило = Правила.Добавить();
	Правило.Отчет = "КарточкаСчета";
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Счет", "Счет");
	БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "БухТипРесурса", "БухТипРесурса", "Неопределено");
	// БухТипРесурса (сторона проводки) принимает значения "Дт", "Кт" или может быть не заполнен.
	// Когда БухТипРесурса известен открывается отчет по проводкам который может дать более точную расшифровку используя эту информацию.
	// В остальных случаях будем открывать карточку счета, для этого у БухТипРесурса значение по умолчанию "Неопределено" и правилами наложен фильтр.
	Правило.Условия = Новый Структура("БухТипРесурса", "Неопределено");
	Правило.ШаблонПредставления = НСтр("ru = 'Карточка счета [Счет]'");
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьСхемуКомпоновкиДанных(ПараметрыОтчета, Схема) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Счет) Тогда
		Возврат;
	КонецЕсли;
		
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОтчета.Счет);
	
	КоличествоСубконто = СвойстваСчета.КоличествоСубконто;
	
	ПараметрыОС      = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыНМА     = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	ПараметрыФизЛица = Новый Структура("ИндексСубконто, ЗаголовокСубконто", 0, "");
	
	МассивНаборовДанных = Новый Массив;
	МассивНаборовДанных.Добавить("ОсновнойНаборДанных");
	МассивНаборовДанных.Добавить("Обороты");
	
	// Изменение представления и наложения ограничения типа значения.
	Для Индекс = 1 По КоличествоСубконто Цикл

		Для Каждого ЭлементМассива Из МассивНаборовДанных Цикл

			Набор = Схема.НаборыДанных.ОсновнойНаборДанных.Элементы[ЭлементМассива];
			Поле = Набор.Поля.Найти("Субконто" + Индекс);
			Если Поле <> Неопределено Тогда
				ТипЗначения = СвойстваСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				Поле.ТипЗначения = ТипЗначения;
				Поле.Заголовок   = СвойстваСчета["ВидСубконто" + Индекс + "Наименование"];
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств") 
				И Поле.ТипЗначения.СодержитТип(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипОсновныеСредства()) Тогда
				ПараметрыОС.ИндексСубконто    = Индекс;
				ПараметрыОС.ЗаголовокСубконто = Поле.Заголовок;
			ИначеЕсли ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА")
				И Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
				ПараметрыНМА.ИндексСубконто    = Индекс;
				ПараметрыНМА.ЗаголовокСубконто = Поле.Заголовок;
			ИначеЕсли Поле.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
				ПараметрыФизЛица.ИндексСубконто    = Индекс;
				ПараметрыФизЛица.ЗаголовокСубконто = Поле.Заголовок;
			КонецЕсли;

		КонецЦикла;
		
		Набор = Схема.НаборыДанных.ОсновнойНаборДанных;
		Поле = Набор.Поля.Найти("Субконто" + Индекс);
		Если Поле <> Неопределено Тогда
			ТипЗначения = СвойстваСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			Поле.ТипЗначения = ТипЗначения;
			Поле.Заголовок   = СвойстваСчета["ВидСубконто" + Индекс + "Наименование"];
		КонецЕсли;
		
	КонецЦикла;
	
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеОС"     , ПараметрыОС);
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеНМА"    , ПараметрыНМА);
	БухгалтерскиеОтчеты.ОбработатьНаборДанныхСвязаннойИнформации(Схема, "ДанныеФизЛица", ПараметрыФизЛица);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьУсловиеПоВыбраннымРесурсам(ПараметрыОтчета, Схема)
	
	ТекстУсловияДт = "";
	ТекстУсловияКт = "";
	
	Для Каждого ИмяПоказателя Из ПолучитьНаборПоказателей() Цикл
		
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
			
			Если ИмяПоказателя = "БУ" Тогда
				
				ИмяПоказателяДляПодстановки = "Сумма";
				
			ИначеЕсли ИмяПоказателя = "ВалютнаяСумма" ИЛИ ИмяПоказателя = "Количество" ИЛИ ИмяПоказателя = "Контроль" Тогда
				
				Продолжить;
				
			Иначе
				
				ИмяПоказателяДляПодстановки = "Сумма" + ИмяПоказателя;
				
			КонецЕсли;
			
			ТекстУсловияДт = ТекстУсловияДт +" ХозрасчетныйОстаткиИОбороты." + ИмяПоказателяДляПодстановки + "ОборотДт -";
			
			ТекстУсловияКт = ТекстУсловияКт +" ХозрасчетныйОстаткиИОбороты." + ИмяПоказателяДляПодстановки + "ОборотКт -";
			
		КонецЕсли;
		
	КонецЦикла;

	Если ТекстУсловияДт <> "" Тогда
		
		ТекстУсловияДляПодстановкиВЗапрос = 
		"ГДЕ
		|	ВЫБОР
		|			КОГДА " + Лев(ТекстУсловияДт, СтрДлина(ТекстУсловияДт) - 1) + " <> 0
		|					ИЛИ " + Лев(ТекстУсловияКт, СтрДлина(ТекстУсловияКт) - 1) + " <> 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";		
		ОсновнойНаборДанных = Схема.НаборыДанных.ОсновнойНаборДанных.Элементы.ОсновнойНаборДанных;
		ОсновнойНаборДанных.Запрос = СтрЗаменить(ОсновнойНаборДанных.Запрос, "//[Условие]", ТекстУсловияДляПодстановкиВЗапрос);

	КонецЕсли;

КонецПроцедуры

Функция СчетаВИерархии(СчетГруппа)
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

Процедура ДобавитьОтборПоВыводимымПолям(ВыводимыеПоля, Структура, ВыводитьОтбор = Ложь)
	
	// Добавим отбор на пустые строки (Если все выводимые поля для записи равны 0).
	Если НЕ ВыводитьОтбор Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	ОтборГруппировки = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборГруппировки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПропускатьКонтроль = СтрНайти(ВыводимыеПоля[0], ".Контроль") = 0;
	
	Для Каждого ВыбранноеПоле Из ВыводимыеПоля Цикл
		
		Если ПропускатьКонтроль И СтрНайти(ВыбранноеПоле, ".Контроль") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ВыбранноеПоле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
		
	КонецЦикла;
		
КонецПроцедуры

// Разбивает текст запроса на подзапросы в соответствии с настройками детализации по кор.счетам.
//
// Параметры:
//  ГруппировкаКор - ТаблицаЗначений - см. БухгалтерскиеОтчеты.УникальныеНастройкиОтчетаПоСчетам()
//  ЗначенияПараметровМакета - ЗначенияПараметровМакетаКомпоновкиДанных - для добавления параметров-списков корсчетов.
//  ИсходныйТекстЗапроса - Строка - текст отдельного запроса, не содержащего объединений подзапросов.
//
// Возвращаемое значение:
//   Строка      - текст запроса, разбитого на подзапросы по разным настройкам кор.счетов.
//
Функция ДополнитьТекстЗапросаОборотыПоКорсчетам(ГруппировкаКор, ЗначенияПараметровМакета, Знач ИсходныйТекстЗапроса)
	
	КонечныйТекстЗапроса = Новый Массив;

	ПозицияКорсчета = СтрНайти(ИсходныйТекстЗапроса, ", ) КАК ХозрасчетныйОбороты");
	ПостояннаяЧастьЗапроса = Лев(ИсходныйТекстЗапроса, ПозицияКорСчета - 1);
	ЗавершающаяЧастьЗапроса = Сред(ИсходныйТекстЗапроса, ПозицияКорсчета + 2);
	
	// Поиск условия по кор. счету.
	ПозицияКорсчета = СтрНайти(ПостояннаяЧастьЗапроса, ",", НаправлениеПоиска.СКонца);
	УсловиеКорСчета = Сред(ПостояннаяЧастьЗапроса, ПозицияКорсчета + 1);
	
	// Формируем запрос-объединение для детализации корсчетов.
	КорСчетаВсе = Новый СписокЗначений;
	Индекс = 1;
	Для Каждого СтрокаТаблицы Из ГруппировкаКор Цикл 
		
		// Добавим значение корсчета.
		Если ЗначенияПараметровМакета.Найти("КорСчет" + Индекс) = Неопределено Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчетаВсе, СтрокаТаблицы.Счета.ВыгрузитьЗначения(), Ложь);
			
			НовоеЗначение = ЗначенияПараметровМакета.Добавить();
			НовоеЗначение.Имя      = "КорСчет" + Индекс;
			НовоеЗначение.Значение = СтрокаТаблицы.Счета;
			
		КонецЕсли;
		
		// Добавим значение кор.субконто.
		СписокКорСубконто = СтрокаТаблицы.ВидыСубконто;
		ПараметрКорСубконто = ЗначенияПараметровМакета.Найти("КорСубконто" + Индекс);
		Если ПараметрКорСубконто = Неопределено Тогда
			
			НовоеЗначение = ЗначенияПараметровМакета.Добавить();
			НовоеЗначение.Имя = "КорСубконто" + Индекс;
			НовоеЗначение.Значение = СписокКорСубконто;

		КонецЕсли;
		
		// Предполагается, что исходный текст запроса содержит:
		// КорСубконто1 КАК КорСубконто1,
		// КорСубконто2 КАК КорСубконто2,
		// КорСубконто2.Реквизит КАК КорСубконто2Реквизит,
		// Требуется удалить поле выборки КорСубконто2, а псевдоним оставить тем же.
		
		// Удалим лишние кор.субконто.
		ПромежуточныйТекстЗапроса = ПостояннаяЧастьЗапроса;
		НачальныйИндексКор = СписокКорСубконто.Количество();
		Для ИндексКор = НачальныйИндексКор + 1 По 3 Цикл

			СтрокаПоиска = "ПРЕДСТАВЛЕНИЕССЫЛКИ(ХозрасчетныйОбороты.КорСубконто" + ИндексКор + ")";
			ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, СтрокаПоиска, """""");
			
			СтрокаПоиска = "ХозрасчетныйОбороты.КорСубконто" + ИндексКор;
			ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, СтрокаПоиска, "NULL");

		КонецЦикла;
		
		// Теперь текст запроса содержит:
		// КорСубконто1 КАК КорСубконто1,
		// NULL КАК КорСубконто2,
		// NULL.Реквизит КАК КорСубконто2Реквизит,
		// Требуется оставить среди полей выборки только КорСубконто1.
		
		// Очищаем строки с реквизитами для удаленных субконто.
		ПозицияРеквизита = СтрНайти(ПромежуточныйТекстЗапроса, "NULL.");
		Пока ПозицияРеквизита <> 0 Цикл
			
			ПозицияКонцаСтроки = СтрНайти(ПромежуточныйТекстЗапроса, ",", НаправлениеПоиска.СНачала, ПозицияРеквизита + 5);
			Если ПозицияКонцаСтроки = 0 Тогда
				ПозицияРеквизита = 0;
				Прервать;
			КонецЕсли;
			ПозицияНачалаСтроки = СтрНайти(ПромежуточныйТекстЗапроса, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияРеквизита);
			
			УдаляемаяСтрока = Сред(ПромежуточныйТекстЗапроса, ПозицияНачалаСтроки, ПозицияКонцаСтроки - ПозицияНачалаСтроки);
			ПозицияКАК = СтрНайти(УдаляемаяСтрока, " КАК ", НаправлениеПоиска.СКонца);
			
			ПромежуточныйТекстЗапроса = Лев(ПромежуточныйТекстЗапроса, ПозицияНачалаСтроки)
				+ "	NULL" + ?(ПозицияКАК <> 0, Сред(УдаляемаяСтрока, ПозицияКАК), "")
				+ Сред(ПромежуточныйТекстЗапроса, ПозицияКонцаСтроки);

			ПозицияРеквизита = СтрНайти(ПромежуточныйТекстЗапроса, "NULL.");
			
		КонецЦикла;
		
		// В конце текст запроса содержит:
		// КорСубконто1 КАК КорСубконто1,
		// NULL КАК КорСубконто2,
		// NULL КАК КорСубконто2Реквизит,
		
		// Удаляем лишние условия на кор.субконто (например, тот же самый "КорСубконто2.Реквизит", но в условии).
		ПозицияУсловия = СтрНайти(ПромежуточныйТекстЗапроса, "РегистрБухгалтерии.Хозрасчетный.Обороты");
		ПозицияУсловия = СтрНайти(ПромежуточныйТекстЗапроса, ",", НаправлениеПоиска.СНачала, ПозицияУсловия, 5);
		ПозицияКонцаУсловия = СтрНайти(ПромежуточныйТекстЗапроса, ",", НаправлениеПоиска.СНачала, ПозицияУсловия + 1);
		УсловиеЗапроса = Сред(ПромежуточныйТекстЗапроса, ПозицияУсловия + 1, ПозицияКонцаУсловия - ПозицияУсловия - 1);
		БылоУдаленоУсловиеНаКорСубконто = Ложь;
		Для ИндексКор = НачальныйИндексКор + 1 По 3 Цикл

			СтрокаПоиска = "КорСубконто" + ИндексКор;
			
			ПозицияНачалаСтроки = ПозицияУсловия;
			ПозицияКонцаСтроки = ПозицияКонцаУсловия;
			Пока ПозицияНачалаСтроки <> 0 И ПозицияКонцаСтроки <> 0 Цикл
				
				ПозицияНачалаСтроки = СтрНайти(УсловиеЗапроса, СтрокаПоиска);
				Если ПозицияНачалаСтроки = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПозицияКонцаСтроки = СтрНайти(УсловиеЗапроса, " ", НаправлениеПоиска.СНачала, ПозицияНачалаСтроки);
				Если ПозицияКонцаСтроки = 0 Тогда
					Продолжить;
				КонецЕсли;
				БылоУдаленоУсловиеНаКорСубконто = Истина;
				
				УсловиеЗапроса = ?(ПозицияНачалаСтроки = 1, "", Лев(УсловиеЗапроса, ПозицияНачалаСтроки - 1))
					+ "NULL" + Сред(УсловиеЗапроса, ПозицияКонцаСтроки);
				
			КонецЦикла;

		КонецЦикла;
		
		Если БылоУдаленоУсловиеНаКорСубконто Тогда
			
			КонечныйТекстЗапроса.Добавить(Лев(ПромежуточныйТекстЗапроса, ПозицияУсловия));
			КонечныйТекстЗапроса.Добавить(УсловиеЗапроса);
			КонечныйТекстЗапроса.Добавить(Сред(ПромежуточныйТекстЗапроса, ПозицияКонцаУсловия));
			
		Иначе
			
			КонечныйТекстЗапроса.Добавить(ПромежуточныйТекстЗапроса);
			
		КонецЕсли;
		Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
			КонечныйТекстЗапроса.Добавить(" И ");
		КонецЕсли;
		КонечныйТекстЗапроса.Добавить("КорСчет В (&КорСчет");
		КонечныйТекстЗапроса.Добавить(Строка(Индекс));
		КонечныйТекстЗапроса.Добавить("), ");
		Если НачальныйИндексКор <> 0 Тогда
			КонечныйТекстЗапроса.Добавить("&КорСубконто");
			КонечныйТекстЗапроса.Добавить(Строка(Индекс));
		КонецЕсли;
		КонечныйТекстЗапроса.Добавить(ЗавершающаяЧастьЗапроса);
		КонечныйТекстЗапроса.Добавить("
		|ОБЪЕДИНИТЬ ВСЕ
		|");

		Индекс = Индекс + 1;

	КонецЦикла;
	
	Для НомерСубконто = 1 По 3 Цикл
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "ХозрасчетныйОбороты.КорСубконто" + НомерСубконто + " КАК", "NULL КАК");
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "ПРЕДСТАВЛЕНИЕССЫЛКИ(ХозрасчетныйОбороты.КорСубконто" + НомерСубконто + ") КАК", """"" КАК");
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса,
			"ХозрасчетныйОбороты.КорСубконто" + НомерСубконто + "," + Символы.ПС, "NULL," + Символы.ПС);
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса,
			"ПРЕДСТАВЛЕНИЕССЫЛКИ(ХозрасчетныйОбороты.КорСубконто" + НомерСубконто + ")," + Символы.ПС, """""," + Символы.ПС);
	КонецЦикла;
		
	Если ЗначенияПараметровМакета.Найти("КорСчетВсе") = Неопределено Тогда
		
		НовоеЗначение = ЗначенияПараметровМакета.Добавить();
		НовоеЗначение.Имя      = "КорСчетВсе";
		НовоеЗначение.Значение = КорСчетаВсе;
		
	КонецЕсли;

	КонечныйТекстЗапроса.Добавить(ПостояннаяЧастьЗапроса);
	Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
		КонечныйТекстЗапроса.Добавить(" И ");
	КонецЕсли;
	КонечныйТекстЗапроса.Добавить("КорСчет НЕ В (&КорСчетВсе), ");
	КонечныйТекстЗапроса.Добавить(ЗавершающаяЧастьЗапроса);	

	Для Индекс = 1 По КонечныйТекстЗапроса.ВГраница() Цикл
	
		КонечныйТекстЗапроса[Индекс] = СтрЗаменить(КонечныйТекстЗапроса[Индекс], "РАЗРЕШЕННЫЕ", "");
	
	КонецЦикла;

	Возврат СтрСоединить(КонечныйТекстЗапроса);
	
КонецФункции

// Свернем счета-группы по одинаковым субконто и выделим у них субсчета с несовпадающими субконто.
//
// Параметры:
//  ГруппировкаКор - ТаблицаЗначений - см. БухгалтерскиеОтчеты.УникальныеНастройкиОтчетаПоСчетам() 
//
// Возвращаемое значение:
//   ТаблицаЗначений - списки счетов, содержащие одинаковые наборы субконто для вывода в отчет.
//                     Если вида субконто нет у счета-группы, то его нет и в данной таблице.
//                     * ВидыСубконто - СписокЗначений - набор видов субконто;
//                     * Счета - СписокЗначений - имеющие одинаковый набор видов субконто.
//
Функция УникальныеНастройкиОтчетаПоСубконто(ГруппировкаКор)
	
	ТребуемыеКорСубконто = Новый ТаблицаЗначений;
	ТребуемыеКорСубконто.Колонки.Добавить("ВидыСубконто", Новый ОписаниеТипов("СписокЗначений"));
	ТребуемыеКорСубконто.Колонки.Добавить("Счета", Новый ОписаниеТипов("СписокЗначений"));
	
	Если ГруппировкаКор.Количество() = 0 Тогда
		Возврат ТребуемыеКорСубконто;
	КонецЕсли;
	
	// Определяем, какие субконто для каких счетов нам нужны.
	ТипПорядковогоНомера = ГруппировкаКор.Колонки.НомерСтроки.ТипЗначения;
	ТипСчета = ГруппировкаКор.Колонки.Счет.ТипЗначения;
	ГруппировкаКорСубконто = Новый ТаблицаЗначений;
	ГруппировкаКорСубконто.Колонки.Добавить("СчетГруппа",           ТипСчета);
	ГруппировкаКорСубконто.Колонки.Добавить("СубСчет",              ТипСчета);
	ГруппировкаКорСубконто.Колонки.Добавить("НомерСубконто",        ТипПорядковогоНомера);
	ГруппировкаКорСубконто.Колонки.Добавить("НомерСубконтоВОтчете", ТипПорядковогоНомера);
	
	ВыводимыеВидыСубконто = Новый Массив;
	Для Каждого СтрокаТаблицы Из ГруппировкаКор Цикл

		КоличествоСубконто = СтрДлина(СтрокаТаблицы.ПоСубконто) / 2; // наборы по два символа {[+|-][номер субконто]}
		Для НомерСубконто = 1 По КоличествоСубконто Цикл

			НомерСубконтоСтрока = Сред(СтрокаТаблицы.ПоСубконто, НомерСубконто * 2 - 1, 2);
			Если Лев(НомерСубконтоСтрока, 1) = "+" И Прав(НомерСубконтоСтрока, 1) <> "0" Тогда
				// Разрез данных выводится и не является подразделением.
				ВыводимыеВидыСубконто.Добавить(Число(Прав(НомерСубконтоСтрока, 1)));
			КонецЕсли;

		КонецЦикла;
		
		Для каждого КорСчет Из СтрокаТаблицы.СчетаВИерархии Цикл
			
			НомерСубконтоВОтчете = 1;
			Для каждого НомерСубконто Из ВыводимыеВидыСубконто Цикл
			
				ТребуемоеСубконто = ГруппировкаКорСубконто.Добавить();
				ТребуемоеСубконто.СчетГруппа           = СтрокаТаблицы.Счет;
				ТребуемоеСубконто.СубСчет              = КорСчет;
				ТребуемоеСубконто.НомерСубконто        = НомерСубконто;
				ТребуемоеСубконто.НомерСубконтоВОтчете = НомерСубконтоВОтчете;
				НомерСубконтоВОтчете = НомерСубконтоВОтчете + 1;
			
			КонецЦикла;
		
		КонецЦикла;
		ВыводимыеВидыСубконто.Очистить();
		
	КонецЦикла;
	
	// Определяем, какие виды субконто соответствуют нужным нам номерам субконто счетов-групп.
	// Если у субсчета есть подходящий вид субконто, то берем его независимо от номера; если нет, пропускаем.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппировкаКорСубконто", ГруппировкаКорСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТребуемыеСубконто.СчетГруппа КАК СчетГруппа,
	|	ТребуемыеСубконто.СубСчет КАК СубСчет,
	|	ТребуемыеСубконто.НомерСубконто КАК НомерСубконто,
	|	ТребуемыеСубконто.НомерСубконтоВОтчете КАК НомерСубконтоВОтчете
	|ПОМЕСТИТЬ ТребуемыеСубконто
	|ИЗ
	|	&ГруппировкаКорСубконто КАК ТребуемыеСубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СубСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК СчетГруппа,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	МИНИМУМ(ТребуемыеСубконто.НомерСубконтоВОтчете) КАК НомерСубконтоВОтчете
	|ПОМЕСТИТЬ ВидыСубконтоНаСчетахГруппах
	|ИЗ
	|	ТребуемыеСубконто КАК ТребуемыеСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО ТребуемыеСубконто.СубСчет = ХозрасчетныйВидыСубконто.Ссылка
	|			И ТребуемыеСубконто.НомерСубконто = ХозрасчетныйВидыСубконто.НомерСтроки
	|ГДЕ
	|	ТребуемыеСубконто.СубСчет = ТребуемыеСубконто.СчетГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка,
	|	ХозрасчетныйВидыСубконто.ВидСубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТребуемыеСубконто.СчетГруппа КАК СчетГруппа,
	|	ТребуемыеСубконто.СубСчет КАК СубСчет,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ИмяПредопределенныхДанных КАК ВидСубконтоИмя,
	|	ВидыСубконтоНаСчетахГруппах.НомерСубконтоВОтчете КАК НомерСубконтоВОтчете
	|ИЗ
	|	ТребуемыеСубконто КАК ТребуемыеСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыСубконтоНаСчетахГруппах КАК ВидыСубконтоНаСчетахГруппах
	|		ПО ТребуемыеСубконто.СчетГруппа = ВидыСубконтоНаСчетахГруппах.СчетГруппа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО ТребуемыеСубконто.СубСчет = ХозрасчетныйВидыСубконто.Ссылка
	|			И (ВидыСубконтоНаСчетахГруппах.ВидСубконто = ХозрасчетныйВидыСубконто.ВидСубконто)
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	СубСчет,
	|	НомерСубконтоВОтчете";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Формируем кросс-таблицу со счетами в строках и видами субконто в колонках.
	ГруппировкаКорСубконто = Новый ТаблицаЗначений;
	ГруппировкаКорСубконто.Колонки.Добавить("Счет", ТипСчета);
	ГруппировкаКорСубконто.Колонки.Добавить("ИдентификаторНабора", ОбщегоНазначения.ОписаниеТипаСтрока(120));
	
	ПредыдущийСчет = Неопределено;
	ИдентификаторНабора = "";
	НаборСубконто = Новый СписокЗначений;
	НаборыСубконтоПоИдентификаторам = Новый Структура;
	Пока Выборка.Следующий() Цикл
		
		Если ПредыдущийСчет <> Выборка.СубСчет Тогда

			Если ПредыдущийСчет <> Неопределено И Не ПустаяСтрока(ИдентификаторНабора) Тогда
				// Фиксируем набор субконто по предыдущему счету и переходим к следующему.
				Если Не НаборыСубконтоПоИдентификаторам.Свойство(ИдентификаторНабора) Тогда
					НаборыСубконтоПоИдентификаторам.Вставить(ИдентификаторНабора, НаборСубконто);
				КонецЕсли;
				
				КорСчет.ИдентификаторНабора = ИдентификаторНабора;
				
			КонецЕсли;
			ИдентификаторНабора = "";
			НаборСубконто = Новый СписокЗначений;
			
			КорСчет = ГруппировкаКорСубконто.Добавить();
			КорСчет.Счет = Выборка.СубСчет;
			ПредыдущийСчет = Выборка.СубСчет;

		КонецЕсли;

		НаборСубконто.Добавить(Выборка.ВидСубконто);
		
		ВидСубконтоИмя = ?(ПустаяСтрока(Выборка.ВидСубконтоИмя),
			"Вид" + СтрЗаменить(Выборка.ВидСубконто.УникальныйИдентификатор(), "-", ""),
			Выборка.ВидСубконтоИмя);
		ИдентификаторНабора = ИдентификаторНабора + ВидСубконтоИмя;
		
	КонецЦикла;
	Если ПредыдущийСчет <> Неопределено И Не ПустаяСтрока(ИдентификаторНабора) Тогда
		// Фиксируем набор субконто по последнему из счетов.
		Если Не НаборыСубконтоПоИдентификаторам.Свойство(ИдентификаторНабора) Тогда
			НаборыСубконтоПоИдентификаторам.Вставить(ИдентификаторНабора, НаборСубконто);
		КонецЕсли;
		
		КорСчет.ИдентификаторНабора = ИдентификаторНабора;
		
	КонецЕсли;
	
	// От упорядочения по счетам переходим к упорядочению по наборам субконто. 
	ГруппировкаКорСубконто.Сортировать("ИдентификаторНабора");
	
	// Выделяем счета с одинаковыми наборами видов субконто.
	ТекущийНаборВидов = Неопределено;
	ПредыдущийКорСчет = Неопределено;
	Для каждого КорСчет Из ГруппировкаКорСубконто Цикл

		// У очередного корсчета набор видов субконто не такой как у предыдущих.
		Если ПредыдущийКорСчет = Неопределено
		 Или ПредыдущийКорСчет.ИдентификаторНабора <> КорСчет.ИдентификаторНабора Тогда
			
			ТребуемоеСубконто = ТребуемыеКорСубконто.Добавить();
			Если Не ПустаяСтрока(КорСчет.ИдентификаторНабора) Тогда
				НаборыСубконтоПоИдентификаторам.Свойство(КорСчет.ИдентификаторНабора, ТребуемоеСубконто.ВидыСубконто);
			КонецЕсли;
			
			ТекущийНаборВидов = ТребуемоеСубконто;
			
		КонецЕсли;
		
		ТекущийНаборВидов.Счета.Добавить(КорСчет.Счет);
		ПредыдущийКорСчет = КорСчет;
			
	КонецЦикла; 
	
	Возврат ТребуемыеКорСубконто;
	
КонецФункции

#КонецОбласти

#КонецЕсли