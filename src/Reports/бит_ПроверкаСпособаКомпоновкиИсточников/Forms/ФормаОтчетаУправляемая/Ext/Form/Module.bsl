#Область ОписаниеПеременных

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;

// Служит для передачи вида параметра между обработчиками.
&НаКлиенте
Перем мТекущийВидПараметра;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_ПроверкаСпособаКомпоновкиИсточников; 	
			
	ЗаполнитьКэшЗначений();
	
	// Заполнение реквизитов из параметров
	Отчет.СпособКомпоновки = Параметры.СпособКомпоновки;
	Отчет.Период 		   = ?(ЗначениеЗаполнено(Параметры.Период)
								, Параметры.Период
								, Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц));	
	Параметры.Свойство("ЭтоДанные", РБ_ЭтоДанные); // Данные или База (Для настроек распределения бюджета).
	
	Если Не ЗначениеЗаполнено(Отчет.Период) Тогда
		Отчет.Период.Вариант = ВариантСтандартногоПериода.Месяц;
	КонецЕсли;
			
	ИзменениеСпособаКомпоновки(Параметры.ТаблицаПараметры);
	
	ЗаполнитьТаблицуЭлементовДанных(Параметры.ЭлементДанных);
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
	бит_ОтчетыСервер.УправлениеВидомЭлементовТакси(Элементы);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособКомпоновкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Отчет.СпособКомпоновки) Тогда 		
		Элемент.ВыбиратьТип = Ложь;
		Возврат;     	
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;         
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных"));
	СписокТипов.Добавить(Тип("СправочникСсылка.бит_ИсточникиДанных"));
	СписокТипов.Добавить(Тип("СправочникСсылка.бит_НастройкиРаспределенияБюджета"));

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Элемент", Элемент);
	ОбработчикВыбораИзСпискаТипов = Новый ОписаниеОповещения("ВыборИзСпискаТиповЗавершение", ЭтотОбъект, ДопПараметры); 
	ПоказатьВыборИзСписка(ОбработчикВыбораИзСпискаТипов, СписокТипов);
		
КонецПроцедуры // СпособКомпоновкиНачалоВыбора()

// Процедура обработчик оповещения "ВыборИзСпискаТиповЗавершение".
// 
// Параметры:
// ВыбранныйТип - Произвольный
// ДопПараметры - Структура
// 
&НаКлиенте
Процедура ВыборИзСпискаТиповЗавершение(ВыбранныйТип, ДопПараметры) Экспорт
	
  	Если ВыбранныйТип <> Неопределено Тогда
		
		ИмяСпр = ПолучитьИмяСправочникаПоТипу(ВыбранныйТип.Значение);
		
		МассивТипов = Новый Массив;
	  	МассивТипов.Добавить(ВыбранныйТип.Значение);
	 	Описание = Новый ОписаниеТипов(МассивТипов);
		ДопПараметры.Элемент.ОграничениеТипа = Описание;

		ДопПараметры.Элемент.ВыбиратьТип = Ложь;
		ОткрытьФорму("Справочник." + ИмяСпр + ".ФормаВыбора",,ДопПараметры.Элемент);
							
	КонецЕсли;  	

КонецПроцедуры // ВыборИзСпискаТиповЗавершение()

&НаКлиенте
Процедура СпособКомпоновкиПриИзменении(Элемент)
	
	ИзменениеСпособаКомпоновки();
	
КонецПроцедуры // СпособКомпоновкиПриИзменении()

&НаКлиенте
Процедура РБ_РегистраторПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(РБ_Регистратор) Тогда
		
		ЗаполнитьПараметрыПоЗаполняемомуДокументу();
		
	КонецЕсли;
		
КонецПроцедуры // РБ_РегистраторПриИзменении()

&НаКлиенте
Процедура РБ_ЭтоДанныеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(РБ_Регистратор) Тогда
		
		ЗаполнитьПараметрыПоЗаполняемомуДокументу();
		
	КонецЕсли;
	
КонецПроцедуры // РБ_ЭтоДанныеПриИзменении()

&НаКлиенте
Процедура РБ_ДатаДокументаПриИзменении(Элемент)
	
	РасчитатьКурсКратность();
	
КонецПроцедуры // РБ_ДатаДокументаПриИзменении()

&НаКлиенте
Процедура РБ_ВалютаДокументаПриИзменении(Элемент)
	
	РасчитатьКурсКратность();
	
КонецПроцедуры // РБ_ВалютаДокументаПриИзменении()

&НаКлиенте
Процедура ТабДок_РазвернутоОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	бит_мпд_Клиент.РасшифроватьИзВнешнейБазы(Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры // ТабДок_РазвернутоОбработкаРасшифровки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные 		 = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВыбораДляОтборов); 
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные 		 = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВыбораДляОтборов);
	
КонецПроцедуры // ОтборВОтчетеВидСравненияАвтоПодбор()
     
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока        = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущаяСтрока.Значение = Неопределено Тогда
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
		
	Иначе	
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ "ТаблицаПараметры".

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицапараметры

&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение;   			
	КонецЕсли; 
	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	ОграничитьОписаниеТиповПараметра();
	 	
КонецПроцедуры // ТаблицаПараметрыПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		
		ОграничитьОписаниеТиповПараметра();
				
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыВидПараметраПриИзменении()

&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;

КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраНачалоВыбора()

&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	СформироватьОтчет();	
	
КонецПроцедуры // КомандаСформировать()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Отчет);
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();
	
КонецПроцедуры // КомандаПанельНастроек()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура ограничивает описание типов в строке таблица параметров.
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда
			
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
		
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры // ОграничитьОписаниеТиповПараметра()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	                    		
	фКэшЗначений.Вставить("ИмяТипаОбъекта", "ОтчетОбъект.бит_ПроверкаСпособаКомпоновкиИсточников");
	            
	фКэшЗначений.Вставить("МассивВыбораДляОтборов", бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока", ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	

	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса", ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()
            
// Процедура устанавливает видимость элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УстановитьВидимость()

	ЭтоОтчетПоКомпоновке = ТипЗнч(Отчет.СпособКомпоновки) = Тип("СправочникСсылка.бит_СпособыКомпоновкиИсточниковДанных");
    ЭтоОтчетПоРаспБюджет = ТипЗнч(Отчет.СпособКомпоновки) = Тип("СправочникСсылка.бит_НастройкиРаспределенияБюджета");
	
	Элементы.ГруппаПоГруппам.Видимость = ЭтоОтчетПоКомпоновке;
	Элементы.ГруппаНастройки.Видимость = ЭтоОтчетПоКомпоновке;
	
	Элементы.НастройкаПулаПодключений.Видимость = Не ЭтоОтчетПоРаспБюджет;
	Элементы.ГруппаОтборы.Видимость 			= Не ЭтоОтчетПоРаспБюджет;
	Элементы.ГруппаПараметры.Видимость 			= Не ЭтоОтчетПоРаспБюджет;	
	
	Элементы.ГруппаОсновныеНастройкиРаспределенияБюджетов.Видимость = ЭтоОтчетПоРаспБюджет;
	Элементы.ГруппаПараметрыРаспределенияБюджетов.Видимость 	    = ЭтоОтчетПоРаспБюджет;
		
	Если ЭтоОтчетПоКомпоновке Тогда
		Элементы.СпособКомпоновки.Заголовок = "Способ компоновки";
	ИначеЕсли ЭтоОтчетПоРаспБюджет Тогда
		Элементы.СпособКомпоновки.Заголовок = "Настройка распределения бюджетов";
	Иначе
		Элементы.СпособКомпоновки.Заголовок = "Источник данных";	
	КонецЕсли;
		
КонецПроцедуры // УстановитьВидимость()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура формирует отчет.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура СформироватьОтчет()
	
	СтрРегистрация = Новый Структура;
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);
		
	Если Не бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.Период.ДатаНачала, Отчет.Период.ДатаОкончания) Тогда
		Возврат;	
	КонецЕсли;
		
	ЭтоОтчетПоРаспБюджет = ТипЗнч(Отчет.СпособКомпоновки) = Тип("СправочникСсылка.бит_НастройкиРаспределенияБюджета");
    ОтчетОбъект = ДанныеФормыВЗначение(Отчет, Тип(фКэшЗначений.ИмяТипаОбъекта));
	
	Если ЭтоОтчетПоРаспБюджет Тогда
		ВызватьИсключение Нстр("ru = 'Больше этоот функционал не используется.'");
	Иначе
		ОтчетОбъект.ВыполнитьПроверку(ТабДок_Развернуто, ТабДок_ПоГруппам, ОтборВОтчете, ТаблицаПараметры);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ОтчетОбъект, Отчет);
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);

КонецПроцедуры // СформироватьОтчет()

// Процедура заполняет таблицу элементов данных.
// 
// Параметры:
//  ЭлементДанных - СправочникСсылка.бит_ЭлементыДанных.
// 
&НаСервере
Процедура ЗаполнитьТаблицуЭлементовДанных(ТекЭлементДанных)

	Если Не ЗначениеЗаполнено(ТекЭлементДанных) Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекЭлементДанных.ЭтоГруппа Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст =  "
		|ВЫБРАТЬ
		|	бит_ЭлементыДанных.Ссылка КАК ЭлементДанных
		|ИЗ
		|	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
		|ГДЕ
		|	бит_ЭлементыДанных.Владелец = &Владелец
		|	И бит_ЭлементыДанных.Ссылка В ИЕРАРХИИ(&Группа)
		|";
					 
		Запрос.УстановитьПараметр("Владелец", Отчет.СпособКомпоновки);
		Запрос.УстановитьПараметр("Группа"  , ТекЭлементДанных);
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			НоваяСтрока = Отчет.ЭлементыДанных.Добавить();
			НоваяСтрока.ЭлементДанных = Выборка.ЭлементДанных;

		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = Отчет.ЭлементыДанных.Добавить();
		НоваяСтрока.ЭлементДанных = ТекЭлементДанных;

	КонецЕсли;     	

КонецПроцедуры // ЗаполнитьТаблицуЭлементовДанных()

// Процедура выполняет действия, необходимые при изменении способа компоновки.
// 
// Параметры:
//  ТаблицаПараметровИзОбъекта - ДанныеФормыСтруктура.
// 
&НаСервере
Процедура ИзменениеСпособаКомпоновки(ТаблицаПараметровИзОбъекта = Неопределено)

	УстановитьВидимость();
	
	ЭтоОтчетПоРаспБюджет = ТипЗнч(Отчет.СпособКомпоновки) = Тип("СправочникСсылка.бит_НастройкиРаспределенияБюджета");

	Если Не ЭтоОтчетПоРаспБюджет Тогда
			
		ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
		бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Отчет.СпособКомпоновки, ТаблицаОтборов);
		ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);
		
		Если ТаблицаПараметровИзОбъекта = Неопределено Тогда		
			бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Отчет.СпособКомпоновки, ТаблицаПараметры, Истина);
		Иначе
			// Заполнение значений таблицы параметров переданных из объекта.
			ТаблицаПараметры.Загрузить(ТаблицаПараметровИзОбъекта.Выгрузить());	
		КонецЕсли;		
		
	КонецЕсли;  	

КонецПроцедуры // ИзменениеСпособаКомпоновки()

// Процедура расчитывает курс и кратность по валюте на дату документа.
// 
&НаСервере
Процедура РасчитатьКурсКратность() Экспорт
	
	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(РБ_ВалютаДокумента, РБ_ДатаДокумента);
	РБ_КурсДокумента    = СтрКурса.Курс;
	РБ_Кратность 		= СтрКурса.Кратность;
	
КонецПроцедуры // РасчитатьКурсКратность()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
		
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура выполняет действия, неоходимые при изменении вида параметра.
// 
// Параметры:
//  ИД  				 - Число.
//  мТекущийВидПараметра - ПеречислениеСсылка.бит_ВидыПараметровЗапроса.
// 
&НаСервере
Процедура ИзменитьВидПараметра(ИД, мТекущийВидПараметра)

	ТекущиеДанные = ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, мТекущийВидПараметра);

КонецПроцедуры // ИзменитьВидПараметра()

// Процедура заполняет параметры проверки настройки распределения бюджета 
// по указанному документу.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьПараметрыПоЗаполняемомуДокументу()

	РБ_ДатаДокумента 		= РБ_Регистратор.Дата;	
	РБ_ВалютаДокумента 		= РБ_Регистратор.ВалютаДокумента;
	РБ_КурсДокумента 		= РБ_Регистратор.КурсДокумента;
	РБ_Кратность  			= РБ_Регистратор.КратностьДокумента;
	
	Отчет.Период.ДатаНачала 	= ?(РБ_ЭтоДанные, РБ_Регистратор.Данные_ДатаНачала	 , РБ_Регистратор.База_ДатаНачала);
	Отчет.Период.ДатаОкончания 	= ?(РБ_ЭтоДанные, РБ_Регистратор.Данные_ДатаОкончания, РБ_Регистратор.База_ДатаОкончания);

КонецПроцедуры // ЗаполнитьПараметрыПоЗаполняемомуДокументу()

// Функцияполучаетимясправочникапотипу.
// 
&НаСервере
Функция ПолучитьИмяСправочникаПоТипу(ВыбранныйТипЗначение)
	
	МетаСпр = Метаданные.НайтиПоТипу(ВыбранныйТипЗначение);
	Возврат МетаСпр.Имя;
	
КонецФункции // ПолучитьИмяСправочникаПоТипу() 

#КонецОбласти

