#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет СКД и инициализирует настройки компоновщика.
// 
Функция СформироватьСКД(ТекущиеНастройкиКд, ТекущиеНастройкиПользователяКд, фСтруктураСохраненныхНастроек, ВосстановитьНастройки, фЭтоРасшифровка, ПараметрыКУстановке) Экспорт

	АдресХранилищаСКД = Неопределено;	
		
			
	// --------------------------------------------------------------------------------
	// Формирование СКД
	
	// СтрокаЭталон
	СтрОтбор = Новый Структура("Эталон" , Истина);  	
	МассивСтрок = СценарииСравнения.НайтиСтроки(СтрОтбор);
	Если МассивСтрок.Количество() <> 0 Тогда
		СтрокаЭталон = МассивСтрок[0];	
	КонецЕсли;
	
	// Структура параметров
	СтруктураПараметров = СформироватьСтруктуруПараметров();
		
	// Инициализация переменных, необходимых при работе процедуры.
	Таблицы               = Новый Структура;
	ПараметрыКУстановке   = Новый Структура;
	РесурсыКомпоновки     = Новый Массив;
	СценарииПредставление = Новый Соответствие;
	
	// Изменение кода для УТ. Начало. 14.06.2013{{
	ТекстПолей = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл	
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Сценарий" Тогда
			Продолжить;		
		КонецЕсли;		
		ТекстПолей = ТекстПолей + ", " + ИмяИзмерения;
	КонецЦикла;  	
	Измерения = Новый Структура("Период, Регистратор" + ТекстПолей);
	// Изменение кода. Конец. 14.06.2013}}
	
    //Ресурсы = Новый Структура("КоличествоОборот, СуммаРеглОборот, СуммаУпрОборот, СуммаСценарийОборот, СуммаОборот");
    Ресурсы = Новый СписокЗначений;
    Ресурсы.Добавить("КоличествоОборот"   , "Количество");
    Ресурсы.Добавить("СуммаРеглОборот"    , "Сумма регл");
    Ресурсы.Добавить("СуммаУпрОборот"     , "Сумма упр");
    Ресурсы.Добавить("СуммаСценарийОборот", "Сумма сценарий");
    Ресурсы.Добавить("СуммаОборот"        , "Сумма");
	
	Если ВидОтчета = "ПоБюджету" Тогда
		Измерения.Вставить("СтатьяБюджета");
	КонецЕсли;
	
	// Формирование текста запроса
	ТекстЗапроса = СформироватьТекстЗапроса(СтрокаЭталон, Таблицы, СценарииПредставление, Измерения, ПараметрыКУстановке);
		
	
	// --------------------------------------------------------------------------------
	// СКД
	СКД = Новый СхемаКомпоновкиДанных;
  
	
	// --------------------------------------------------------------------------------
	// Набор данных
	СформироватьНаборДанных(СКД, ТекстЗапроса, Ресурсы, Измерения, Таблицы);
	НаборДанных = СКД.НаборыДанных[0];	
	
	
	// Добавим поля
	ГруппыПолей = Новый Структура;
	
	ДобавитьГруппуВыбранныхПолей(СКД.НастройкиПоУмолчанию.Выбор.Элементы, "Количество"      , "Количество"	 , Ложь  , ГруппыПолей);
	ДобавитьГруппуВыбранныхПолей(СКД.НастройкиПоУмолчанию.Выбор.Элементы, "Сумма (упр.)"	, "СуммаУпр"  	 , Ложь  , ГруппыПолей);
	ДобавитьГруппуВыбранныхПолей(СКД.НастройкиПоУмолчанию.Выбор.Элементы, "Сумма (регл.)"  	, "СуммаРегл" 	 , Ложь  , ГруппыПолей);
	ДобавитьГруппуВыбранныхПолей(СКД.НастройкиПоУмолчанию.Выбор.Элементы, "Сумма (сценарий)", "СуммаСценарий", Истина, ГруппыПолей);
	ДобавитьГруппуВыбранныхПолей(СКД.НастройкиПоУмолчанию.Выбор.Элементы, "Сумма"           , "Сумма"     	 , Ложь  , ГруппыПолей);
	
	// Условное оформление
	ЭлементОформленияКоличество = ДобавитьЭлементОформленияФормат(СКД.НастройкиПоУмолчанию.УсловноеОформление.Элементы, "ЧЦ=15; ЧДЦ=3");
	ЭлементОформленияСумма      = ДобавитьЭлементОформленияФормат(СКД.НастройкиПоУмолчанию.УсловноеОформление.Элементы, "ЧЦ=15; ЧДЦ=2");
	ЭлементОформленияЭталон     = ДобавитьЭлементОформленияШрифт(СКД.НастройкиПоУмолчанию.УсловноеОформление.Элементы, Новый Шрифт(,,Истина));
	
	Для каждого ПолеНабора Из СКД.НаборыДанных[0].Поля Цикл
		
		// Изменение кода. Начало. 12.12.2016{{ BF-395
		Если Найти(ПолеНабора.Поле, ".") = 0 Тогда
			Если Измерения.Свойство(ПолеНабора.Поле) Тогда
				// Измерения в поля не добавляем
				 Продолжить; 		
			КонецЕсли;
		Иначе	
			// Не добавляем поля с точкой в имени ("Регистратор.Организация")
		    Продолжить;
		КонецЕсли;
		// Изменение кода. Конец. 12.12.2016}} 
		
		ВыбранноеПоле = Неопределено;
		
		// Попытка распределить поля по группам
		Для каждого КлючИЗначение Из ГруппыПолей Цикл
			
			ГруппаВыбранныхПолей = КлючИЗначение.Значение;
			
			Если Найти(ПолеНабора.ПутьКДанным,КлючИЗначение.Ключ) > 0 Тогда
				ВыбранноеПоле = ГруппаВыбранныхПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; // По группам полей 
		                          		
		Если ВыбранноеПоле = Неопределено Тогда
			ВыбранноеПоле = СКД.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		КонецЕсли; 
		
		ПолеКомпоновки = Новый  ПолеКомпоновкиДанных(ПолеНабора.ПутьКДанным);
		ВыбранноеПоле.Поле          = ПолеКомпоновки;
		ВыбранноеПоле.Использование = Истина;
		
		Если СравнениеДанныхРазличныхЛет Тогда
			НаименованиеСценария = Строка(СтрокаЭталон.Сценарий) + " (" + Формат(Год(СтрокаЭталон.Год),"ЧГ=0") + ")";
		Иначе
			НаименованиеСценария = Строка(СтрокаЭталон.Сценарий);
		КонецЕсли; 
		
		УстановитьЗаголовокВыбранногоПоля(ВыбранноеПоле, ПолеНабора.ПутьКДанным, СценарииПредставление, НаименованиеСценария);
		
		ДобавитьПолеВСписокОформляемыхПолей(ПолеНабора.ПутьКДанным
										   ,ПолеКомпоновки
										   ,ЭлементОформленияКоличество
										   ,ЭлементОформленияСумма
										   ,ЭлементОформленияЭталон);
		
	КонецЦикла;  // По полям набора данных
	
		
	// --------------------------------------------------------------------------------
	// Структура
	Если Не ВосстановитьНастройки Тогда
		ЗаполнитьПараметрыВывода(СКД.НастройкиПоУмолчанию.ПараметрыВывода.Элементы, ТекущиеНастройкиКд.ПараметрыВывода.Элементы);
		ЗаполнитьСтруктуруПоУмолчанию(СКД, ТекущиеНастройкиКд.Структура);		
	КонецЕсли;
	                  	
	
	// --------------------------------------------------------------------------------
	// Параметры
	ЗаполнитьПараметрыКомпоновки(СКД, СтруктураПараметров, ПараметрыКУстановке);
	
	
	// --------------------------------------------------------------------------------
	// Заголовки дополнительных измерений  	
	НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
	бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийВСКД(СКД, "Обороты", НастройкиИзмерений);
	
	
	// Адрес СКД
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	
	
	// --------------------------------------------------------------------------------
	// Компоновщик настроек
		
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД);
	ИдентификаторВыбор 				= Неопределено;
	ИдентификаторУсловноеОформление = Неопределено;
	
	КомпоновщикНастроек.Инициализировать(Неопределено);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	Если ВосстановитьНастройки Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ТекущиеНастройкиКд);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);	
	КонецЕсли;
		
	ДоработатьКомпоновщикПередВыводом(ПараметрыКУстановке);
	
	
	// --------------------------------------------------------------------------------
	// Отображение пользовательских настроек  	
	
	Для Каждого ЭлТаблица Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТипЗнч(ЭлТаблица) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если  Не ЗначениеЗаполнено(ЭлТаблица.Строки.ИдентификаторПользовательскойНастройки) Тогда
				ЭлТаблица.Строки.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;			
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВосстановитьНастройки Тогда
		// КомпоновщикНастроек.Настройки <- ТекущиеНастройкиКд.
		ПреобразоватьНастройкиКомпоновщика(КомпоновщикНастроек.Настройки, ТекущиеНастройкиКд);		
	КонецЕсли;		
	
	Если ТекущиеНастройкиПользователяКд <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ТекущиеНастройкиПользователяКд);		                                                                               	
		КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество();	
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить();
	
	// --------------------------------------------------------------------------------
	// Возвращается адрес СКД
	Возврат АдресХранилищаСКД;
		
КонецФункции // СформироватьСКД()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция инициализируем структуру параметров.
// 
// Параметры:
//  Таблица.
//  ПараметрНачалоПериода.
//  ПараметрОкончаниеПериода.
//  ПараметрСценарий.
// 
// Возвращаемое значение:
//  Структура.
// 
Функция КонструкторСтруктурыПараметров(Таблица = "", ПараметрНачалоПериода = "", ПараметрОкончаниеПериода = "", ПараметрСценарий = "")
	
	СтруктураПараметров = Новый Структура("Таблица, ПараметрНачалоПериода, ПараметрОкончаниеПериода, ПараметрСценарий");
	
	СтруктураПараметров.Таблица      			 = Таблица;
	СтруктураПараметров.ПараметрНачалоПериода    = ПараметрНачалоПериода;
	СтруктураПараметров.ПараметрОкончаниеПериода = ПараметрОкончаниеПериода;
	СтруктураПараметров.ПараметрСценарий         = ПараметрСценарий;
	
	Возврат СтруктураПараметров;
	
КонецФункции // КонструкторСтруктурыПараметров()

// Функция производит замены в тексте. Шаблон поиска является ключом структуры,
// строка замены значением структуры.
// 
// Параметры:
//  ТекстЗапроса  		- Строка.
//  СтруктураПараметров - Структура.
// 
// Возвращаемое значение:
//  РезТекст   - Строка.
// 
Функция ПодготовитьТекстЗапроса(ТекстЗапроса, СтруктураПараметров)

	РезТекст = ТекстЗапроса;
	
	Для каждого КлючИЗначение Из СтруктураПараметров Цикл
		ИмяПоля = КлючИЗначение.Ключ;
		РезТекст = СтрЗаменить(РезТекст, "%" + ИмяПоля + "%", КлючИЗначение.Значение);
	КонецЦикла; 
	
	Возврат РезТекст;
	
КонецФункции // ПодготовитьТекстЗапроса()

// Процедура формирует текст для выборки данных по сценарию.
// 
// Параметры:
//  ТекстЗапроса  		- Текст.
//  СтрокаТаблицы 		- СтрокаТабличнойЧасти.СценарииСравнения.
//  Постфикс      		- Строка.
//  ПараметрыКУстановке - Структура.
// 
Процедура ОбработатьСтрокуСценария(ТекстЗапроса, СтрокаТаблицы, Постфикс, ПараметрыКУстановке)

	// Изменение кода Для УТ. Начало. 14.06.2013{{
	ТекстПолей = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл	
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Сценарий" Тогда
			Продолжить;		
		КонецЕсли;		
		ТекстПолей = ТекстПолей + "%Таблица%." + ИмяИзмерения + "," + Символы.ПС;
	КонецЦикла;
	
	Если СравнениеДанныхРазличныхЛет Тогда   
		
		ТекстПериод  =
				"	ВЫБОР
				|		КОГДА &Периодичность = 6
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ДЕНЬ)
				|		КОГДА &Периодичность = 7
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, НЕДЕЛЯ)
				|		КОГДА &Периодичность = 8
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ДЕКАДА)
				|		КОГДА &Периодичность = 9
				|			ТОГДА Месяц(НАЧАЛОПЕРИОДА(%Таблица%.Период, МЕСЯЦ))
				|		КОГДА &Периодичность = 10                                                                 
				|			ТОГДА Квартал(НАЧАЛОПЕРИОДА(%Таблица%.Период, КВАРТАЛ))
				|		КОГДА &Периодичность = 11
				|			ТОГДА 
				|               Выбор КОгда Месяц(НАЧАЛОПЕРИОДА(%Таблица%.Период, Месяц)) > 6 
			    |           Тогда 
				|		        ""2-ое полугодие"" 
	            |           Иначе ""1-ое полугодие"" Конец
				|		КОГДА &Периодичность = 12
				|			ТОГДА ""Год""
				|		ИНАЧЕ %Таблица%.Период
				|	КОНЕЦ КАК Период" + Символы.ПС;
	Иначе     
				
		ТекстПериод  =
				"	ВЫБОР
				|		КОГДА &Периодичность = 6
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ДЕНЬ)
				|		КОГДА &Периодичность = 7
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, НЕДЕЛЯ)
				|		КОГДА &Периодичность = 8
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ДЕКАДА)
				|		КОГДА &Периодичность = 9
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, МЕСЯЦ)
				|		КОГДА &Периодичность = 10
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, КВАРТАЛ)
				|		КОГДА &Периодичность = 11
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ПОЛУГОДИЕ)
				|		КОГДА &Периодичность = 12
				|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ГОД)
				|		ИНАЧЕ %Таблица%.Период
				|	КОНЕЦ КАК Период" + Символы.ПС;
	КонецЕсли;
			
	// Изменение кода. Конец. 14.06.2013}}
	Если ВидОтчета = "ПоБюджету" Тогда
		
		ТекстЗапросаОбороты = "
		|////////////////////////////////////////////////////////////////////////////////	
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		// Изменение кода Для УТ. Начало. 14.06.2013{{
		|	%Таблица%.Регистратор,	
		|" + ТекстПолей + "
		// Изменение кода. Конец. 14.06.2013}}		
		|	ЕСТЬNULL(%Таблица%.КоличествоОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) КАК КоличествоОборот,
		|	ЕСТЬNULL(%Таблица%.СуммаОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) 	 КАК СуммаОборот,
		|	ЕСТЬNULL(%Таблица%.СуммаРеглОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0)  КАК СуммаРеглОборот,
		|	ЕСТЬNULL(%Таблица%.СуммаУпрОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) 	 КАК СуммаУпрОборот,
		|   ВЫБОР
		| 	 КОГДА %Таблица%.Сценарий.Валюта = Курсы_Эталон.Валюта
		|		ТОГДА ЕСТЬNULL(%Таблица%.СуммаСценарийОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0)
		|	 ИНАЧЕ ЕСТЬNULL(%Таблица%.СуммаРеглОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) * ЕСТЬNULL(Курсы_Эталон.Кратность, 0) / ЕСТЬNULL(Курсы_Эталон.Курс, 1)
		|   КОНЕЦ КАК СуммаСценарийОборот,
		|	бит_СтатьиБюджета.Ссылка КАК СтатьяБюджета," + Символы.ПС;
		ТекстЗапросаОбороты = ТекстЗапросаОбороты + ТекстПериод;
		//|	ВЫБОР
		//|		КОГДА &Периодичность = 6
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ДЕНЬ)
		//|		КОГДА &Периодичность = 7
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, НЕДЕЛЯ)
		//|		КОГДА &Периодичность = 8
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ДЕКАДА)
		//|		КОГДА &Периодичность = 9
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, МЕСЯЦ)
		//|		КОГДА &Периодичность = 10
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, КВАРТАЛ)
		//|		КОГДА &Периодичность = 11
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ПОЛУГОДИЕ)
		//|		КОГДА &Периодичность = 12
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ГОД)
		//|		ИНАЧЕ %Таблица%.Период
		//|	КОНЕЦ КАК Период
		ТекстЗапросаОбороты = ТекстЗапросаОбороты + "
		|ПОМЕСТИТЬ %Таблица%
		|ИЗ
		|	Справочник.бит_СтатьиБюджета КАК бит_СтатьиБюджета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(
		|				%ПараметрНачалоПериода% {(%ПараметрНачалоПериода%)}, 
		|				%ПараметрОкончаниеПериода% {(%ПараметрОкончаниеПериода%)}, 
		|				Регистратор,
		|				Сценарий = %ПараметрСценарий%
		|				И СтатьяОборотов В
		|						(ВЫБРАТЬ
		|							бит_СтатьиБюджета.СтатьяОборотов
		|						ИЗ
		|							Справочник.бит_СтатьиБюджета КАК бит_СтатьиБюджета
		|						ГДЕ
		|							(НЕ бит_СтатьиБюджета.НеОтображать)
		|							И бит_СтатьиБюджета.Владелец = &Бюджет)) КАК %Таблица%
		|		ПО (%Таблица%.СтатьяОборотов = бит_СтатьиБюджета.СтатьяОборотов),
		|   Курсы_Эталон КАК Курсы_Эталон
		|ГДЕ
		|	бит_СтатьиБюджета.Владелец = &Бюджет
		|	И ВЫБОР
		|			КОГДА &ОтображатьПустыеСтроки
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ЕСТЬNULL(%Таблица%.КоличествоОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) 
		|				  		  + ЕСТЬNULL(%Таблица%.СуммаОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) 
		|				  		  + ЕСТЬNULL(%Таблица%.СуммаРеглОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) 
		|				  		  + ЕСТЬNULL(%Таблица%.СуммаУпрОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) 
		|   			  		  + ВЫБОР
		| 	 							КОГДА %Таблица%.Сценарий.Валюта = Курсы_Эталон.Валюта
		|									ТОГДА ЕСТЬNULL(%Таблица%.СуммаСценарийОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0)
		|	 							ИНАЧЕ ЕСТЬNULL(%Таблица%.СуммаРеглОборот, 0) * ЕСТЬNULL(бит_СтатьиБюджета.Коэффициент, 0) * ЕСТЬNULL(Курсы_Эталон.Кратность, 0) / ЕСТЬNULL(Курсы_Эталон.Курс, 1)
		|   						КОНЕЦ
		|							<> 0
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОНЕЦ
		|	И (НЕ бит_СтатьиБюджета.НеОтображать)
		|;
		|";
		
	Иначе
		
		ТекстЗапросаОбороты = "
		|////////////////////////////////////////////////////////////////////////////////	
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		// Изменение кода Для УТ. Начало. 14.06.2013{{
		|	%Таблица%.Регистратор,	
		|" + ТекстПолей + "
		// Изменение кода. Конец. 14.06.2013}}		
		|	%Таблица%.КоличествоОборот 	КАК КоличествоОборот,
		|	%Таблица%.СуммаОборот 		КАК СуммаОборот,
		|	%Таблица%.СуммаРеглОборот 	КАК СуммаРеглОборот,
		|	%Таблица%.СуммаУпрОборот 	КАК СуммаУпрОборот,
		|   ВЫБОР
		| 	 КОГДА %Таблица%.Сценарий.Валюта = Курсы_Эталон.Валюта
		|		ТОГДА ЕСТЬNULL(%Таблица%.СуммаСценарийОборот, 0)
		|	 ИНАЧЕ ЕСТЬNULL(%Таблица%.СуммаРеглОборот, 0) * ЕСТЬNULL(Курсы_Эталон.Кратность, 0) / ЕСТЬNULL(Курсы_Эталон.Курс, 1)
		|   КОНЕЦ КАК СуммаСценарийОборот," + Символы.ПС;
		ТекстЗапросаОбороты = ТекстЗапросаОбороты + ТекстПериод;
		//|	ВЫБОР
		//|		КОГДА &Периодичность = 6
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ДЕНЬ)
		//|		КОГДА &Периодичность = 7
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, НЕДЕЛЯ)
		//|		КОГДА &Периодичность = 8
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ДЕКАДА)
		//|		КОГДА &Периодичность = 9
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, МЕСЯЦ)
		//|		КОГДА &Периодичность = 10
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, КВАРТАЛ)
		//|		КОГДА &Периодичность = 11
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ПОЛУГОДИЕ)
		//|		КОГДА &Периодичность = 12
		//|			ТОГДА НАЧАЛОПЕРИОДА(%Таблица%.Период, ГОД)
		//|		ИНАЧЕ %Таблица%.Период
		//|	КОНЕЦ КАК Период
		ТекстЗапросаОбороты = ТекстЗапросаОбороты + "
		|ПОМЕСТИТЬ %Таблица%
		|ИЗ
		|	РегистрНакопления.бит_ОборотыПоБюджетам.Обороты(%ПараметрНачалоПериода% {(%ПараметрНачалоПериода%)}, %ПараметрОкончаниеПериода% {(%ПараметрОкончаниеПериода%)}, Регистратор, Сценарий = %ПараметрСценарий%) КАК %Таблица%,
		|   Курсы_Эталон КАК Курсы_Эталон
		// Добавление кода. Начало. 12.12.2016{{ BF-395
		|{ГДЕ
		|	%Таблица%.Регистратор.Организация.*}
		// Добавление кода. Конец. 12.12.2016}}
		|;
		|";
		
	КонецЕсли;			   
	
	СтруктураПараметров = КонструкторСтруктурыПараметров("Обороты_" + Постфикс
														, "&НачалоПериода_" + Постфикс
														, "&ОкончаниеПериода_" + Постфикс
														, "&Сценарий_" + Постфикс);
	
	УстановитьПараметрыПоСтрокеСценария(Постфикс, СтрокаТаблицы, ПараметрыКУстановке);
	
	// Выборка по эталонному сценарию, помещение во временную таблицу.
	ТекстПодготовленный = ПодготовитьТекстЗапроса(ТекстЗапросаОбороты, СтруктураПараметров);	
	
	ТекстЗапроса = ТекстЗапроса + ТекстПодготовленный;

КонецПроцедуры // ОбработатьСтрокуСценария()

// Процедура добавляет к тексту запроса текст объединения таблиц данных сценариев.
// 
// Параметры:
//  ТекстЗапроса - Текст.
//  Измерения  	 - Структура.
//  Таблицы    	 - Структура.
// 
Процедура ДобавитьТекстЗапросаОбъединение(ТекстЗапроса, Измерения, Таблицы)
	
	ТекстРесурсы = " 
	|СУММА(ЕСТЬNULL(%Таблица%.КоличествоОборот, 0))     КАК КоличествоОборот_%Постфикс%,
	|СУММА(ЕСТЬNULL(%Таблица%.СуммаОборот, 0))          КАК СуммаОборот_%Постфикс%,
	|СУММА(ЕСТЬNULL(%Таблица%.СуммаРеглОборот, 0))      КАК СуммаРеглОборот_%Постфикс%,
	|СУММА(ЕСТЬNULL(%Таблица%.СуммаУпрОборот, 0))       КАК СуммаУпрОборот_%Постфикс%,
	|СУММА(ЕСТЬNULL(%Таблица%.СуммаСценарийОборот, 0))	КАК СуммаСценарийОборот_%Постфикс%
	|";
	
	ТекстРесурсыОтклонение = "
	|СУММА(ЕСТЬNULL(%ТаблицаЭталон%.КоличествоОборот, 0)-ЕСТЬNULL(%Таблица%.КоличествоОборот, 0))  		КАК КоличествоАбс_%Постфикс%,
	|СУММА(ЕСТЬNULL(%ТаблицаЭталон%.СуммаОборот, 0)-ЕСТЬNULL(%Таблица%.СуммаОборот, 0))                 КАК СуммаАбс_%Постфикс%,
	|СУММА(ЕСТЬNULL(%ТаблицаЭталон%.СуммаРеглОборот, 0)-ЕСТЬNULL(%Таблица%.СуммаРеглОборот, 0))         КАК СуммаРеглАбс_%Постфикс%,
	|СУММА(ЕСТЬNULL(%ТаблицаЭталон%.СуммаУпрОборот, 0)-ЕСТЬNULL(%Таблица%.СуммаУпрОборот, 0))          	КАК СуммаУпрАбс_%Постфикс%,
	|СУММА(ЕСТЬNULL(%ТаблицаЭталон%.СуммаСценарийОборот, 0)-ЕСТЬNULL(%Таблица%.СуммаСценарийОборот, 0))	КАК СуммаСценарийАбс_%Постфикс%,
	|
	|СУММА(0) КАК КоличествоОтн_%Постфикс%,
	|СУММА(0) КАК СуммаОтн_%Постфикс%,
	|СУММА(0) КАК СуммаРеглОтн_%Постфикс%,
	|СУММА(0) КАК СуммаУпрОтн_%Постфикс%,
	|СУММА(0) КАК СуммаСценарийОтн_%Постфикс%
	|";
	  	
	// Изменение кода Для УТ. Начало. 14.06.2013{{
	ТекстСоединения = "";
	Для каждого ТекИзмерение Из Метаданные.РегистрыНакопления.бит_ОборотыПоБюджетам.Измерения Цикл	
		ИмяИзмерения = ТекИзмерение.Имя;
		Если ИмяИзмерения = "Сценарий" Тогда
			Продолжить;		
		КонецЕсли;		
		ТекстСоединения = ТекстСоединения + "И %ТаблицаЭталон%." + ИмяИзмерения + "= %Таблица%." + ИмяИзмерения + Символы.ПС;
	КонецЦикла;
	
	Если ЭтотОбъект.СравнениеДанныхРазличныхЛет Тогда
		ТекстПолноеСоединение = "
		|		ПОЛНОЕ СОЕДИНЕНИЕ %Таблица% КАК %Таблица%
		|		ПО %ТаблицаЭталон%.Регистратор          = %Таблица%.Регистратор
		|			И %ТаблицаЭталон%.Период     = %Таблица%.Период		
		|			" + ТекстСоединения + "	
		|";
	Иначе 
		
		ТекстПолноеСоединение = "
		|		ПОЛНОЕ СОЕДИНЕНИЕ %Таблица% КАК %Таблица%
		|		ПО %ТаблицаЭталон%.Регистратор          = %Таблица%.Регистратор
		|			И %ТаблицаЭталон%.Период               = %Таблица%.Период		
		|			" + ТекстСоединения + "	
		|";
	КонецЕсли;
	
	// Изменение кода. Конец. 14.06.2013}}
	
	
	ИмяТаблицыЭталон = "Обороты_Эталон";
	
	ТекстЗапросаОбъединение = "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|";
	
	ТекстИзмерения 	   = "";
	ТекстСгруппировать = "";
	
	Для каждого КлючИзмерения Из Измерения Цикл
		
		Измерение = КлючИзмерения.Ключ;
		
		ТекстУсловие = ?(ПустаяСтрока(ТекстИзмерения), "", "," + Символы.ПС);
				
		ТекстУсловие = ТекстУсловие + "	ВЫБОР 
									  |		КОГДА НЕ " + ИмяТаблицыЭталон + "." + Измерение + " ЕСТЬ NULL 
									  |			ТОГДА " + ИмяТаблицыЭталон + "." + Измерение + "
									  |";
									  
		Для каждого КлючТаблицы Из Таблицы Цикл
			ИмяТаблицы = КлючТаблицы.Ключ;
			ТекстУсловие = ТекстУсловие + "КОГДА НЕ " + ИмяТаблицы + "." + Измерение + " ЕСТЬ NULL ТОГДА " + ИмяТаблицы + "." + Измерение + "
										|";			
		КонецЦикла;
		
		ТекстУсловие = ТекстУсловие + "ИНАЧЕ NULL КОНЕЦ";
		
		ТекстСгруппировать = ТекстСгруппировать + ТекстУсловие;
		
		ТекстУсловие = ТекстУсловие + " КАК " + Измерение;
		
		ТекстИзмерения = ТекстИзмерения + ТекстУсловие;
		
	КонецЦикла; // По измерениям
	
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение+ТекстИзмерения;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Таблица" , ИмяТаблицыЭталон);
	СтруктураПараметров.Вставить("Постфикс", "Эталон");
	
	ТекстПодготовленный = ПодготовитьТекстЗапроса(ТекстРесурсы, СтруктураПараметров);
	
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "," + Символы.ПС + ТекстПодготовленный;
	
	
	Для каждого КлючТаблицы Из Таблицы Цикл
		
		ИмяТаблицы = КлючТаблицы.Ключ;	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Таблица"       ,ИмяТаблицы);
		СтруктураПараметров.Вставить("ТаблицаЭталон" ,ИмяТаблицыЭталон);	
		СтруктураПараметров.Вставить("Постфикс"      ,КлючТаблицы.Значение);
		
		ТекстПодготовленный     = ПодготовитьТекстЗапроса(ТекстРесурсы, СтруктураПараметров);
		ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "," + ТекстПодготовленный;
		
		ТекстПодготовленный     = ПодготовитьТекстЗапроса(ТекстРесурсыОтклонение, СтруктураПараметров);
		ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "," + Символы.ПС + ТекстПодготовленный;
		                            		
	КонецЦикла; 
	
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
	|ИЗ
	|	" + ИмяТаблицыЭталон + " КАК " + ИмяТаблицыЭталон + "
	|";
	
	Для каждого КлючТаблицы Из Таблицы Цикл
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Таблица" 		,КлючТаблицы.Ключ);
		СтруктураПараметров.Вставить("ТаблицаЭталон",ИмяТаблицыЭталон);
		ТекстПодготовленный     = ПодготовитьТекстЗапроса(ТекстПолноеСоединение, СтруктураПараметров);
		ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + ТекстПодготовленный;	
		
	КонецЦикла; 
	
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
	|СГРУППИРОВАТЬ ПО
	|";
	
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + ТекстСгруппировать;
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
	|УПОРЯДОЧИТЬ ПО Период;
	|";
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаОбъединение;
	
КонецПроцедуры // ДобавитьТекстЗапросаОбъединение()

// Процедура добавляет к тексту запроса текст уничтожения временных таблиц.
// 
// Параметры:
//  ТекстЗапроса  - Строка.
//  Таблицы       - Структура.
// 
Процедура ДобавитьТекстЗапросаУничтожениеВременныхТаблиц(ТекстЗапроса, Таблицы)
	
	ТекстЗапросаУничтожить = "
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ %Таблица%
	|;
	|";
	      	
	СтруктураПараметров = КонструкторСтруктурыПараметров("Обороты_Эталон");
	ТекстПодготовленный = ПодготовитьТекстЗапроса(ТекстЗапросаУничтожить, СтруктураПараметров);	
	
	ТекстЗапроса = ТекстЗапроса + ТекстПодготовленный;
	
	Для каждого КлючТаблицы Из Таблицы Цикл
		
		СтруктураПараметров = КонструкторСтруктурыПараметров(КлючТаблицы.Ключ);
		ТекстПодготовленный = ПодготовитьТекстЗапроса(ТекстЗапросаУничтожить, СтруктураПараметров);	
		
		ТекстЗапроса = ТекстЗапроса + ТекстПодготовленный;
		
	КонецЦикла; // По таблицам
	
	СтруктураПараметров = КонструкторСтруктурыПараметров("Курсы_Эталон");
	ТекстПодготовленный = ПодготовитьТекстЗапроса(ТекстЗапросаУничтожить, СтруктураПараметров);	
	ТекстЗапроса = ТекстЗапроса + ТекстПодготовленный;	
	
КонецПроцедуры // ДобавитьТекстЗапросаУничтожениеВременныхТаблиц()

Функция СформироватьТекстЗапроса(СтрокаЭталон, Таблицы, СценарииПредставление, Измерения, ПараметрыКУстановке)
	
	// Получаем имя справочника Сценарии бюджетирования в зависимости от текущего решения.
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	
	// Формирование текста запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) 		КАК Курс,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) 	КАК Кратность,
	|	КурсыВалютСрезПоследних.Валюта 					КАК Валюта
	|ПОМЕСТИТЬ Курсы_Эталон
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&ОкончаниеПериода_Эталон {(&ОкончаниеПериода_Эталон)},
	|			Валюта В
	|				(ВЫБРАТЬ
	|					бит_СценарииБюджетирования.Валюта
	|				ИЗ
	|					Справочник." + ИмяСправочникаСценарии + " КАК бит_СценарииБюджетирования
	|				ГДЕ
	|					бит_СценарииБюджетирования.Ссылка = &Сценарий_Эталон)) КАК КурсыВалютСрезПоследних
	|;
	|";
	
	// Текст выборки по эталонному сценарию
	Постфикс = "Эталон";
	ОбработатьСтрокуСценария(ТекстЗапроса, СтрокаЭталон, Постфикс, ПараметрыКУстановке);
	
	// Текст выборки по остальным сценариям			
	Ном = 1;
	Для каждого СтрокаТаблицы Из СценарииСравнения Цикл
		
		Если НЕ СтрокаТаблицы.Эталон Тогда
			
			Постфикс = Строка(Ном);
			Если СравнениеДанныхРазличныхЛет Тогда
				НаименованиеСценария = Строка(СтрокаТаблицы.Сценарий) + " (" + Формат(Год(СтрокаТаблицы.Год),"ЧГ=0") + ")";
			Иначе
				НаименованиеСценария = Строка(СтрокаТаблицы.Сценарий);
			КонецЕсли; 
			СценарииПредставление.Вставить(Постфикс, НаименованиеСценария);
			Таблицы.Вставить("Обороты_" + Ном,Постфикс);
			
			ОбработатьСтрокуСценария(ТекстЗапроса, СтрокаТаблицы, Постфикс, ПараметрыКУстановке);
			
			Ном = Ном+1;
		КонецЕсли; // Это НЕ эталонный сценарий
		
	КонецЦикла; // По сценариям сравнения			   
   
	// Объединение данных из разных сценариев
	ДобавитьТекстЗапросаОбъединение(ТекстЗапроса, Измерения, Таблицы);

	// Уничтожение временных таблиц										
	ДобавитьТекстЗапросаУничтожениеВременныхТаблиц(ТекстЗапроса, Таблицы);	
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапроса()

// Функция добавляет элемент оформления в КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных. 
// Устанавливается формат.
// 
// Параметры:
//  КоллекцияЭлементовОформления  - КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных.
//  ФорматнаяСтрока               - Строка.
// 
// Возвращаемое значение:
//   ЭлементОформления   - ЭлементУсловногоОформленияКомпоновкиДанных. 
// 
Функция ДобавитьЭлементОформленияФормат(КоллекцияЭлементовОформления, ФорматнаяСтрока)
	
	ЭлементОформления = КоллекцияЭлементовОформления.Добавить();
	ЭлементОформления.Использование = Истина;
	Оформление                      = ЭлементОформления.Оформление.Элементы.Найти("Format");
	Оформление.Использование        = Истина;
	Оформление.Значение             = ФорматнаяСтрока;
	
	Возврат ЭлементОформления;
	
КонецФункции // ДобавитьЭлементОформления()

// Функция добавляет элемент оформления в КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных. 
// Устанавливается формат.
// 
// Параметры:
//  КоллекцияЭлементовОформления  - КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных.
//  Шрифт                         - Шрифт.
// 
// Возвращаемое значение:
//   ЭлементОформления   - ЭлементУсловногоОформленияКомпоновкиДанных. 
// 
Функция ДобавитьЭлементОформленияШрифт(КоллекцияЭлементовОформления, Шрифт)
	
	ЭлементОформления = КоллекцияЭлементовОформления.Добавить();
	ЭлементОформления.Использование = Истина;
	Оформление                      = ЭлементОформления.Оформление.Элементы.Найти("Font");
	Оформление.Использование        = Истина;
	Оформление.Значение             = Шрифт;
	
	Возврат ЭлементОформления;
	
КонецФункции // ДобавитьЭлементОформления()

// Процедура устанавливает заголовки выбранных полей.
// 
// Параметры:
//  ВыбранноеПоле  - ВыбранноеПолеКомпоновкиДанных.
//  ПутьКДанным    - Строка.
//  СценарииПредставление - Соответствие - ключ:Постфикс; значение:Представление сценария
//                 <продолжение описания параметра>.
// 
Процедура УстановитьЗаголовокВыбранногоПоля(ВыбранноеПоле, ПутьКДанным, СценарииПредставление, СценарийЭталон)

	Постфикс = Прав(ПутьКДанным,1); 
	НаименованиеСценария = СценарииПредставление[Постфикс];
	Если НЕ ЗначениеЗаполнено(НаименованиеСценария) Тогда  	
		НаименованиеСценария = Постфикс;       	
	КонецЕсли; 
	
	Если Найти(ПутьКДанным, "Эталон") > 0 Тогда
		ВыбранноеПоле.Заголовок = СценарийЭталон;
	ИначеЕсли Найти(ПутьКДанным, "Абс") > 0 Тогда	
		ВыбранноеПоле.Заголовок = "Отклонение абс. (" + НаименованиеСценария + ")";
	ИначеЕсли Найти(ПутьКДанным, "Отн") > 0 Тогда	
		ВыбранноеПоле.Заголовок = "Отклонение отн., % (" + НаименованиеСценария + ")";			 
	ИначеЕсли Найти(ПутьКДанным, "_") > 0 Тогда	
		ВыбранноеПоле.Заголовок = НаименованиеСценария;
	КонецЕсли; 

КонецПроцедуры // УстановитьЗаголовокВыбранногоПоля()

// Процедура добавляет поле компоновки в список оформляемых полей элементов оформления.
// 
// Параметры:
//  ПутьКДанным  				- Строка.
//  ПолеКомпоновки 				- ПолеКомпоновкиДанных.
//  ЭлементОформленияКоличество - ЭлементУсловногоОформленияКомпоновкиДанных.
//  ЭлементОформленияСумма 		- ЭлементУсловногоОформленияКомпоновкиДанных.
//  ЭлементОформленияЭталон 	- ЭлементУсловногоОформленияКомпоновкиДанных.
// 
Процедура ДобавитьПолеВСписокОформляемыхПолей(ПутьКДанным
											 ,ПолеКомпоновки
											 ,ЭлементОформленияКоличество
											 ,ЭлементОформленияСумма
											 ,ЭлементОформленияЭталон)

	Если Найти(ПутьКДанным, "Количество") > 0 И Найти(ПутьКДанным, "Отн") = 0 Тогда
		
		ОформляемоеПоле = ЭлементОформленияКоличество.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = ПолеКомпоновки;
		
	ИначеЕсли Найти(ПутьКДанным, "Сумма") > 0 ИЛИ Найти(ПутьКДанным, "Отн") > 0 Тогда
		
		ОформляемоеПоле = ЭлементОформленияСумма.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = ПолеКомпоновки;
		
	КонецЕсли; 
	
	Если Найти(ПутьКДанным, "Эталон") > 0  Тогда
		
		ОформляемоеПоле = ЭлементОформленияЭталон.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = ПолеКомпоновки;
		
	КонецЕсли;	

КонецПроцедуры // ДобавитьПолеВСписокОформляемыхПолей()

Функция СформироватьСтруктуруПараметров()

	СтруктураПараметров = Новый Структура;
	
	Если Периодичность <> Неопределено Тогда
		СтруктураПараметров.Вставить("Периодичность", Периодичность);
	КонецЕсли;
	
	Если ВидОтчета = "ПоБюджету" Тогда 
		
		Если Бюджет <> Неопределено Тогда
			СтруктураПараметров.Вставить("Бюджет", Бюджет);
		КонецЕсли;
		
		Если ОтображатьПустыеСтроки <> Неопределено Тогда
			СтруктураПараметров.Вставить("ОтображатьПустыеСтроки", ОтображатьПустыеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // СформироватьСтруктуруПараметров()

// Процедура добавляет поле  в набор данных компоновки данных.
// 
// Параметры:
//  НаборДанных   - НаборДанныхКомпоновкиДанных.
//  ИмяПоля       - Строка.
//  ПутьКДанным   - Строка.
//  Заголовок     - Строка.
//  ОписаниеТипов - Описание типов.
//  ЭтоРесурс 	  - Булево (По умолчанию = Истина).
//  ЭтоДопУсловие - Булево (По умолчанию = Ложь).
// 
Процедура ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, ИмяПоля, ПутьКДанным = "", Заголовок = "", ОписаниеТипов = Неопределено, ЭтоРесурс = Истина, ЭтоДопУсловие = Ложь)

	ПолеКомпоновки = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеКомпоновки.Поле        = ИмяПоля;	
	ПолеКомпоновки.Заголовок   = ?(НЕ ПустаяСтрока(Заголовок)  , Заголовок  , ИмяПоля);
	ПолеКомпоновки.ПутьКДанным = ?(НЕ ПустаяСтрока(ПутьКДанным), ПутьКДанным, ИмяПоля);
	
	Если ОписаниеТипов <> Неопределено Тогда
		ПолеКомпоновки.ТипЗначения = ОписаниеТипов;	
	КонецЕсли; 

	// Если это Период, тогда
	Если ВРег(ИмяПоля) = "ПЕРИОД" Тогда
		
		// Заполним выражение представления.
		Если СравнениеДанныхРазличныхЛет Тогда
			
			ПолеКомпоновки.ВыражениеПредставления =
			"ВЫБОР
			|	КОГДА Не Формат(Период, ""ДФ=dd.MM.yyyy"") = """"
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА &Периодичность = 6
			|					ТОГДА Формат(Период, ""ДФ=dd.MM.yyyy"")
			|				КОГДА &Периодичность = 7
			|					ТОГДА Формат(Период, ""ДФ=dd.MM.yyyy"") + "" (неделя)""
			|				КОГДА &Периодичность = 8
			|					ТОГДА Формат(Период, ""ДФ=dd.MM.yyyy"") + "" (декада)""
			|				КОГДА &Периодичность = 9
			|					ТОГДА 
			|                        Выбор
			|						    Когда Период = 1 Тогда ""Январь"" 
			|						    Когда Период = 2 Тогда ""Февраль"" 
			|						    Когда Период = 3 Тогда ""Март"" 
			|						    Когда Период = 4 Тогда ""Апрель"" 
			|						    Когда Период = 5 Тогда ""Май"" 
			|						    Когда Период = 6 Тогда ""Июнь"" 
			|						    Когда Период = 7 Тогда ""Июль"" 
			|						    Когда Период = 8 Тогда ""Август"" 
			|						    Когда Период = 9 Тогда ""Сентябрь"" 
			|						    Когда Период = 10 Тогда ""Октябрь"" 
			|						    Когда Период = 11 Тогда ""Ноябрь"" 
			|						    Когда Период = 12 Тогда ""Декадрь"" 
			|                        Конец    
			|				КОГДА &Периодичность = 10
			|					ТОГДА Формат(Период, ""ДФ=q"") + ""-й квартал ""
			|				ИНАЧЕ Формат(Период, ""ДФ=dd.MM.yyyy"")
			|			КОНЕЦ
			|	ИНАЧЕ """"
			|КОНЕЦ
			|";
			
		Иначе
			
			ПолеКомпоновки.ВыражениеПредставления =
			"ВЫБОР
			|	КОГДА Не Формат(Период, ""ДФ=dd.MM.yyyy"") = """"
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА &Периодичность = 6
			|					ТОГДА Формат(Период, ""ДФ=dd.MM.yyyy"")
			|				КОГДА &Периодичность = 7
			|					ТОГДА Формат(Период, ""ДФ=dd.MM.yyyy"") + "" (неделя)""
			|				КОГДА &Периодичность = 8
			|					ТОГДА Формат(Период, ""ДФ=dd.MM.yyyy"") + "" (декада)""
			|				КОГДА &Периодичность = 9
			|					ТОГДА Формат(Период, ""ДФ='MMMM yyyy'"")
			|				КОГДА &Периодичность = 10
			|					ТОГДА Формат(Период, ""ДФ=q"") + ""-й квартал "" + Формат(Период, ""ДФ=yyyy"") + "" г.""
			|				КОГДА &Периодичность = 11
			|					ТОГДА 
			|						ВЫБОР 
			|							КОГДА Формат(Период, ""ДФ=q"") = ""3"" ИЛИ Формат(Период, ""ДФ=q"") = ""4""
			|								ТОГДА ""2-ое полугодие "" + Формат(Период, ""ДФ=yyyy"") + "" г.""
			|							ИНАЧЕ ""1-ое полугодие "" + Формат(Период, ""ДФ=yyyy"") + "" г.""
			|						КОНЕЦ
			|				КОГДА &Периодичность = 12
			|					ТОГДА Формат(Период, ""ДФ=yyyy"") + "" г.""
			|				ИНАЧЕ Формат(Период, ""ДФ=dd.MM.yyyy"")
			|			КОНЕЦ
			|	ИНАЧЕ """"
			|КОНЕЦ
			|";
			
		КонецЕсли;
		
	ИначеЕсли Найти(ВРег(ИмяПоля), "КОЛИЧЕСТВО") <> 0 Тогда
		
		ПолеКомпоновки.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=3");
		
	ИначеЕсли Найти(ВРег(ИмяПоля), "СУММА") <> 0 Тогда
		
		ПолеКомпоновки.Оформление.УстановитьЗначениеПараметра("Формат", "ЧЦ=15; ЧДЦ=2");
		
	КонецЕсли;
	
	Если Найти(ВРег(ИмяПоля), "ЭТАЛОН") <> 0 Тогда
		
		ПолеКомпоновки.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
		
	КонецЕсли;
	
	Если ЭтоРесурс Тогда
	
		ПолеКомпоновки.ОграничениеИспользования.Группировка = Истина;	
	
	КонецЕсли;
	
	// Добавление кода. Начало. 12.12.2016{{ BF-395
	Если ЭтоДопУсловие Тогда
	
		ПолеКомпоновки.ОграничениеИспользования.Группировка = Истина;
		ПолеКомпоновки.ОграничениеИспользования.Поле	    = Истина;
		ПолеКомпоновки.ОграничениеИспользования.Порядок	    = Истина;
		ПолеКомпоновки.ОграничениеИспользованияРеквизитов.Группировка = Истина;
		ПолеКомпоновки.ОграничениеИспользованияРеквизитов.Поле	      = Истина;
		ПолеКомпоновки.ОграничениеИспользованияРеквизитов.Порядок	  = Истина;
	
	КонецЕсли;
	// Добавление кода. Конец. 12.12.2016}}
	
КонецПроцедуры // ДобавитьПолеНабораДанных()

// Процедура добавляет ресурс компоновки.
// 
// Параметры:
//  ПоляИтога  		 - ПоляИтогаСхемыКомпоновкиДанных.
//  Выражение  		 - Строка - формула по которой производится вычисление.
//  РесурсКомпоновки - Строка.
// 
Процедура ДобавитьПолеИтога(ПоляИтога, Выражение, РесурсКомпоновки)

	ПолеИтога = ПоляИтога.Добавить();
	ПолеИтога.Выражение   = Выражение;
	ПолеИтога.ПутьКДанным = РесурсКомпоновки;

КонецПроцедуры // ДобавитьПолеИтога()

Функция СформироватьТекстОтносительноеОтклонение()

	ТекстОтносительноеОтклонение = "
	|ВЫБОР
	|	КОГДА Сумма(%РесурсЭталон%) <> 0 
	|		ТОГДА 100*(Сумма(%РесурсЭталон%) - Сумма(%Ресурс%)) / Сумма(%РесурсЭталон%) 
	|	ИНАЧЕ 
	|  		ВЫБОР 
	|			КОГДА Сумма(%Ресурс%) <> 0 
	|				ТОГДА -100 
	|  			ИНАЧЕ 0 
	|  		КОНЕЦ 
	|КОНЕЦ
	|";	

	Возврат ТекстОтносительноеОтклонение;
	
КонецФункции // СформироватьТекстОтносительноеОтклонение()

Процедура СформироватьНаборДанных(СКД, ТекстЗапроса, Ресурсы, Измерения, Таблицы)

	ИД = СКД.ИсточникиДанных.Добавить();
	ИД.Имя                = "Обороты";
	ИД.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "Обороты";
	НаборДанных.ИсточникДанных = ИД.Имя;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;

	НаборДанных.Поля.Очистить();
	СКД.ПоляИтога.Очистить();
	
	ТекстОтносительноеОтклонение = СформироватьТекстОтносительноеОтклонение();
	
    //Для каждого КлючИЗначение Из Ресурсы Цикл
    Для каждого ЭлРесурса Из Ресурсы Цикл
	
		ИмяРесурса     = ЭлРесурса.Значение;
        СинонимРесурса = ЭлРесурса.Представление;
		
		// Эталонные ресурсы
		ИмяРесурсаКомпоновки = ИмяРесурса + "_Эталон";
		Выражение = "Сумма(" + ИмяРесурсаКомпоновки + ")";
        Заголовок = СинонимРесурса + " Эталон";
		ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, ИмяРесурсаКомпоновки, , Заголовок);
		ДобавитьПолеИтога(СКД.ПоляИтога, Выражение, ИмяРесурсаКомпоновки);
		            		
		Для каждого КлючТаблицы Из Таблицы Цикл
			
			// Ресурсы таблиц-сравнения
			Постфикс = КлючТаблицы.Значение;
			ИмяРесурсаКомпоновки = ИмяРесурса + "_" + Постфикс;
			Выражение = "Сумма(" + ИмяРесурсаКомпоновки + ")";
            Заголовок = СинонимРесурса + " (" + Постфикс + ")";
		    ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, ИмяРесурсаКомпоновки, , Заголовок);
		    ДобавитьПолеИтога(СКД.ПоляИтога, Выражение, ИмяРесурсаКомпоновки);
			
			// Абсолютное отклонение
		    ИмяРесурсаКомпоновки = ИмяРесурса + "_" + Постфикс;
			ИмяРесурсаКомпоновки = СтрЗаменить(ИмяРесурсаКомпоновки, "Оборот", "Абс");
			Выражение = "Сумма(" + ИмяРесурсаКомпоновки + ")";
            Заголовок = СинонимРесурса + " Отклонение абс.(" + Постфикс + ")";
		    ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, ИмяРесурсаКомпоновки, , Заголовок);	
		    ДобавитьПолеИтога(СКД.ПоляИтога, Выражение, ИмяРесурсаКомпоновки);			
			
			// Относительное отклонение
		    ИмяРесурсаКомпоновки = ИмяРесурса + "_" + Постфикс;
			ИмяРесурсаКомпоновки = СтрЗаменить(ИмяРесурсаКомпоновки, "Оборот", "Отн");
			Выражение = СтрЗаменить(ТекстОтносительноеОтклонение, "%Ресурс%", ИмяРесурса + "_" + Постфикс);
			Выражение = СтрЗаменить(Выражение, "%РесурсЭталон%", ИмяРесурса + "_Эталон");
            Заголовок = СинонимРесурса + " Отклонение отн.(" + Постфикс + ")";
		    ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, ИмяРесурсаКомпоновки, , Заголовок);	
		    ДобавитьПолеИтога(СКД.ПоляИтога, Выражение, ИмяРесурсаКомпоновки);			
			
		КонецЦикла;  // По таблицам
		
	КонецЦикла;  // По ресурсам
	
	
	Для каждого КлючИзмерение Из Измерения Цикл
		
		Измерение = КлючИзмерение.Ключ;
		ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, Измерение, , , , Ложь);			
		
	КонецЦикла;  // По измерениям
	
	// Добавление кода. Начало. 12.12.2016{{ BF-395
	ДобавитьПолеНабораДанныхКомпоновки(НаборДанных, "Регистратор.Организация", , , , Ложь, Истина);
	// Добавление кода. Конец. 12.12.2016}}

КонецПроцедуры // СформироватьНаборДанных()

// Процедура добавляет группу выбранных полей. 
// Заполняется структура ГруппыПолей для последующего распределения полей по группам.
// 
// Параметры:
//  КоллекцияВыбранныхПолей  - ВыбранныеПоляКомпоновкиДанных.
//  ИмяГруппы                - Строка.
//  КлючПоиска               - Строка.
//  Использование            - Булево.
//  ГруппыПолей              - Структура.
// 
Процедура ДобавитьГруппуВыбранныхПолей(КоллекцияВыбранныхПолей, ИмяГруппы, КлючПоиска, Использование, ГруппыПолей)

	ГруппаВыбранныхПолей = КоллекцияВыбранныхПолей.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаВыбранныхПолей.Заголовок     = ИмяГруппы;
	ГруппаВыбранныхПолей.Использование = Использование;
	
	ГруппыПолей.Вставить(КлючПоиска, ГруппаВыбранныхПолей);

КонецПроцедуры // ДобавитьГруппуВыбранныхПолей()
                    
// Процедура устанавливает параметры по строке табличной части СценарииСравнения.
// 
// Параметры:
//  Постфикс  			- Строка.
//  СтрокаТаблицы 		- СтрокаТабличнойЧасти.СценарииСравнения.
//  ПараметрыКУстановке - Структура.
// 
Процедура УстановитьПараметрыПоСтрокеСценария(Постфикс, СтрокаТаблицы, ПараметрыКУстановке)

	ПараметрыКУстановке.Вставить("Сценарий_"		 + Постфикс, СтрокаТаблицы.Сценарий);
	ПараметрыКУстановке.Вставить("НачалоПериода_"	 + Постфикс, СтрокаТаблицы.ДатаНачала);
	ПараметрыКУстановке.Вставить("ОкончаниеПериода_" + Постфикс, КонецДня(СтрокаТаблицы.ДатаОкончания));

КонецПроцедуры // УстановитьПараметрыПоСтрокеСценария()
 
// Процедура заполняет параметры схемы компоновки данных.
// 
// Параметры:
//  СКД					- Схема компоновки данных.
//  СтруктураПараметров - Структура.
//  ПараметрыКУстановке - Структура.
// 
Процедура ЗаполнитьПараметрыКомпоновки(СКД, СтруктураПараметров, ПараметрыКУстановке)

	// Параметр периодичность
	ЗначенияПараметра = Новый СписокЗначений;
	ЗначенияПараметра.Добавить(6,"День");
	ЗначенияПараметра.Добавить(7,"Неделя");
	ЗначенияПараметра.Добавить(8,"Декада");
	ЗначенияПараметра.Добавить(9,"Месяц");
	ЗначенияПараметра.Добавить(10,"Квартал");
	ЗначенияПараметра.Добавить(11,"Полугодие");
	ЗначенияПараметра.Добавить(12,"Год");
	
	Параметр = СКД.Параметры.Добавить();
	Параметр.Имя 	   = "Периодичность";
	Параметр.Заголовок = "Периодичность";
	Параметр.Значение  = ?(СтруктураПараметров.Свойство("Периодичность"), СтруктураПараметров.Периодичность, 9);
	Параметр.УстановитьДоступныеЗначения(ЗначенияПараметра);
	
	Если ВидОтчета = "ПоБюджету" Тогда
		
		Параметр = СКД.Параметры.Добавить();
		Параметр.Имя 	   = "Бюджет";
		Параметр.Заголовок = "Бюджет";
		Параметр.Значение  = ?(СтруктураПараметров.Свойство("Бюджет")
							  ,СтруктураПараметров.Бюджет
							  ,Справочники.бит_Бюджеты.ПустаяСсылка());
							  
		Параметр = СКД.Параметры.Добавить();
		Параметр.Имя 	   = "ОтображатьПустыеСтроки";
		Параметр.Заголовок = "Отображать пустые строки";
		Параметр.Значение  = ?(СтруктураПараметров.Свойство("ОтображатьПустыеСтроки")
							  ,СтруктураПараметров.ОтображатьПустыеСтроки
							  ,Ложь);
		
	КонецЕсли;
	
	// Остальные параметры - не доступны для ручного изменения.
	Если ТипЗнч(ПараметрыКУстановке) = Тип("Структура") Тогда
		Для каждого КлючИЗначение Из ПараметрыКУстановке Цикл
			ИмяПараметра = КлючИЗначение.Ключ;
			Параметр     = СКД.Параметры.Добавить();
			Параметр.Имя = ИмяПараметра;
			Параметр.ОграничениеИспользования = Истина;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьПараметрыКомпоновки()

// Процедура заполняет параметры вывода по старому варианту.
// 
// Параметры:
//  НовыеПараметрыВывода  - КоллекцияЗначенийПараметровКомпоновкиДанных.
//  СтарыеПараметрыВывода - КоллекцияЗначенийПараметровКомпоновкиДанных.
// 
Процедура ЗаполнитьПараметрыВывода(НовыеПараметрыВывода, СтарыеПараметрыВывода)

	Для каждого СтарыйПараметр Из СтарыеПараметрыВывода Цикл
		
		НовыйЭлемент = НовыеПараметрыВывода.Найти(СтарыйПараметр.Параметр);
		Если НовыйЭлемент <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтарыйПараметр);			
			ЗаполнитьПараметрыВывода(НовыйЭлемент.ЗначенияВложенныхПараметров, СтарыйПараметр.ЗначенияВложенныхПараметров);
			
		КонецЕсли;		
	
	КонецЦикла;  	

КонецПроцедуры // ЗаполнитьПараметрыВывода()

// Процедура заполняет выбранные поля по умолчанию.
// 
// Параметры:
//  НовыйЭлемент  - ТаблицаКомпоновкиДанных
// 					, ДиаграммаКомпоновкиДанных
// 					, ГруппировкаКомпоновкиДанных
// 					, ГруппировкаТаблицыКомпоновкиДанных
// 					, ГруппировкаДиаграммыКомпоновкиДанных.
//  СтарыйЭлемент - ТаблицаКомпоновкиДанных
// 					, ДиаграммаКомпоновкиДанных
// 					, ГруппировкаКомпоновкиДанных
// 					, ГруппировкаТаблицыКомпоновкиДанных
// 					, ГруппировкаДиаграммыКомпоновкиДанных.
// 
Процедура ЗаполнитьВыбранныеПоля(НовыйЭлемент, СтарыйЭлемент)

	НовоеПоле = НовыйЭлемент.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
КонецПроцедуры // ЗаполнитьВыбранныеПоля()

// Процедура заполняет поля группировок по старому варианту.
// 
// Параметры:
//  НовыйЭлемент  - ТаблицаКомпоновкиДанных
// 					, ДиаграммаКомпоновкиДанных
// 					, ГруппировкаКомпоновкиДанных
// 					, ГруппировкаТаблицыКомпоновкиДанных
// 					, ГруппировкаДиаграммыКомпоновкиДанных.
//  СтарыйЭлемент - ТаблицаКомпоновкиДанных
// 					, ДиаграммаКомпоновкиДанных
// 					, ГруппировкаКомпоновкиДанных
// 					, ГруппировкаТаблицыКомпоновкиДанных
// 					, ГруппировкаДиаграммыКомпоновкиДанных.
// 
Процедура ЗаполнитьПоляГруппировки(НовыйЭлемент, СтарыйЭлемент)

	Для каждого СтароеПоле Из СтарыйЭлемент.ПоляГруппировки.Элементы Цикл
		
		НовоеПоле = НовыйЭлемент.ПоляГруппировки.Элементы.Добавить(ТипЗнч(СтароеПоле));
		ЗаполнитьЗначенияСвойств(НовоеПоле, СтароеПоле);  		
	
	КонецЦикла;                                            	

КонецПроцедуры // ЗаполнитьПоляГруппировки()

// Процедура заполняет структуру отчета по старому варианту.
// 
// Параметры:
//  СтруктураНовая    - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных
// 						, КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
// 						, КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных.
//  ЭлементыСтруктуры - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных
// 						, КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных
// 						, КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных.
// 
Процедура ЗаполнитьСтруктуру(СтруктураНовая, ЭлементыСтруктуры)
      	
	Для каждого ЭлементСтарый Из ЭлементыСтруктуры Цикл
			
		Если ТипЗнч(ЭлементСтарый) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			Нов_Таблица = СтруктураНовая.Добавить(ТипЗнч(ЭлементСтарый));
			ЗаполнитьЗначенияСвойств(Нов_Таблица                         , ЭлементСтарый);
			ЗаполнитьВыбранныеПоля(Нов_Таблица                           , ЭлементСтарый);
			ЗаполнитьПараметрыВывода(Нов_Таблица.ПараметрыВывода.Элементы, ЭлементСтарый.ПараметрыВывода.Элементы);
			
			Для каждого ЭлементСтарый_Строка Из ЭлементСтарый.Строки Цикл					
				Нов_Строка = Нов_Таблица.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Нов_Строка    , ЭлементСтарый_Строка);
				ЗаполнитьВыбранныеПоля(Нов_Строка      , ЭлементСтарый_Строка);
				ЗаполнитьПоляГруппировки(Нов_Строка    , ЭлементСтарый_Строка);
				ЗаполнитьСтруктуру(Нов_Строка.Структура, ЭлементСтарый_Строка.Структура);
			КонецЦикла;
			                       
			Для каждого ЭлементСтарый_Колонка Из ЭлементСтарый.Колонки Цикл					
				Нов_Колонка = Нов_Таблица.Колонки.Добавить();
				ЗаполнитьЗначенияСвойств(Нов_Колонка    , ЭлементСтарый_Колонка);
				ЗаполнитьВыбранныеПоля(Нов_Колонка      , ЭлементСтарый_Колонка);
				ЗаполнитьПоляГруппировки(Нов_Колонка    , ЭлементСтарый_Колонка);
				ЗаполнитьСтруктуру(Нов_Колонка.Структура, ЭлементСтарый_Колонка.Структура);
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(ЭлементСтарый) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			
			Нов_Диаграмма = СтруктураНовая.Добавить(ТипЗнч(ЭлементСтарый));
			ЗаполнитьЗначенияСвойств(Нов_Диаграмма						   , ЭлементСтарый);
			ЗаполнитьВыбранныеПоля(Нов_Диаграмма  						   , ЭлементСтарый);
			ЗаполнитьПараметрыВывода(Нов_Диаграмма.ПараметрыВывода.Элементы, ЭлементСтарый.ПараметрыВывода.Элементы);
			
			Для каждого ЭлементСтарый_Серия Из ЭлементСтарый.Серии Цикл					
				Нов_Серия = Нов_Диаграмма.Серии.Добавить();
				ЗаполнитьЗначенияСвойств(Нов_Серия	  , ЭлементСтарый_Серия);
				ЗаполнитьВыбранныеПоля(Нов_Серия  	  , ЭлементСтарый_Серия);
				ЗаполнитьПоляГруппировки(Нов_Серия	  , ЭлементСтарый_Серия);
				ЗаполнитьСтруктуру(Нов_Серия.Структура, ЭлементСтарый_Серия.Структура);
			КонецЦикла;
			
			Для каждого ЭлементСтарый_Точка Из ЭлементСтарый.Точки Цикл					
				Нов_Точка = Нов_Диаграмма.Точки.Добавить();
				ЗаполнитьЗначенияСвойств(Нов_Точка	  , ЭлементСтарый_Точка);
				ЗаполнитьВыбранныеПоля(Нов_Точка  	  , ЭлементСтарый_Точка);
				ЗаполнитьПоляГруппировки(Нов_Точка	  , ЭлементСтарый_Точка);
				ЗаполнитьСтруктуру(Нов_Точка.Структура, ЭлементСтарый_Точка.Структура);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЭлементСтарый) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			ЭлементНовый = СтруктураНовая.Добавить(ТипЗнч(ЭлементСтарый));
			ЗаполнитьЗначенияСвойств(ЭлементНовый	 , ЭлементСтарый);
			ЗаполнитьВыбранныеПоля(ЭлементНовый  	 , ЭлементСтарый);
			ЗаполнитьПоляГруппировки(ЭлементНовый	 , ЭлементСтарый);
			ЗаполнитьСтруктуру(ЭлементНовый.Структура, ЭлементСтарый.Структура);
						
		ИначеЕсли ТипЗнч(ЭлементСтарый) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			Или ТипЗнч(ЭлементСтарый) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			
			ЭлементНовый = СтруктураНовая.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНовый	 , ЭлементСтарый);
			ЗаполнитьВыбранныеПоля(ЭлементНовый  	 , ЭлементСтарый);
			ЗаполнитьПоляГруппировки(ЭлементНовый	 , ЭлементСтарый);
			ЗаполнитьСтруктуру(ЭлементНовый.Структура, ЭлементСтарый.Структура);
						
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСтруктуру()

// Процедура заполняет структуру отчета.
// 
// Параметры:
//  СКД    			  - СхемаКомпоновкиДанных.
//  ЭлементыСтруктуры - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных.
// 
Процедура ЗаполнитьСтруктуруПоУмолчанию(СКД, СтруктураСтарая)

	Если СтруктураСтарая.Количество() = 0 Тогда
		
		ТаблицаКомпоновки = СКД.НастройкиПоУмолчанию.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		
		ГруппировкаКомпоновки_ЦФО = ТаблицаКомпоновки.Строки.Добавить();
		ВыбранноеПоле         		 = ГруппировкаКомпоновки_ЦФО.Выбор.Элементы.Добавить(Тип("АвтовыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование  = Истина; 	
		ЭлементПорядка        		 = ГруппировкаКомпоновки_ЦФО.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ПолеГруппировки 			   = ГруппировкаКомпоновки_ЦФО.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый  ПолеКомпоновкиДанных("ЦФО");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		ГруппировкаКомпоновки_Статьи = ГруппировкаКомпоновки_ЦФО.Структура.Добавить();
		ВыбранноеПоле         		 = ГруппировкаКомпоновки_Статьи.Выбор.Элементы.Добавить(Тип("АвтовыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование  = Истина; 	
		ЭлементПорядка        		 = ГруппировкаКомпоновки_Статьи.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ПолеГруппировки 			   = ГруппировкаКомпоновки_Статьи.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый  ПолеКомпоновкиДанных("СтатьяОборотов");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;	
		
		ГруппировкаКомпоновки_Период = ТаблицаКомпоновки.Колонки.Добавить();
		ВыбранноеПоле         		 = ГруппировкаКомпоновки_Период.Выбор.Элементы.Добавить(Тип("АвтовыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование  = Истина; 	
		ЭлементПорядка        		 = ГруппировкаКомпоновки_Период.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ПолеГруппировки 			   = ГруппировкаКомпоновки_Период.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый  ПолеКомпоновкиДанных("Период");
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
	Иначе
		
		ЗаполнитьСтруктуру(СКД.НастройкиПоУмолчанию.Структура, СтруктураСтарая);
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтруктуруПоУмолчанию()

// Процедура записывает новый идентификатор пользовательской настройки.
// 
// Параметры:
//  НоваяНастройка. 
//  ТекущаяНастройка.
// 
Процедура ЗаписатьНовыйИдПользовательскойНастройки(НоваяНастройка, ТекущаяНастройка)

	Если ЗначениеЗаполнено(ТекущаяНастройка.ИдентификаторПользовательскойНастройки) Тогда
		НоваяНастройка.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;	
	КонецЕсли;	

КонецПроцедуры // ЗаписатьНовыйИдПользовательскойНастройки()

// Процедура восстанавливает идентификатор пользовательской настройки.
// 
// Параметры:
//  НоваяНастройка. 
//  ТекущаяНастройка.
// 
Процедура ЗаписатьСтарыйИдПользовательскойНастройки(НоваяНастройка, ТекущаяНастройка)

	НоваяНастройка.ИдентификаторПользовательскойНастройки = ТекущаяНастройка.ИдентификаторПользовательскойНастройки;	
	
КонецПроцедуры // ЗаписатьСтарыйИдПользовательскойНастройки()

// Процедура преобразует основные настройки 
// (Выбор, Отбор, Порядок, Условное оформление, Параметры вывода).
// 
// Параметры:
//  НовыеНастройкиКД . 
//  ТекущиеНастройкиКд.  
//  ЕстьВсе 			- Булево (По умолчанию = Истина).
// 
Процедура ПреобразоватьОсновныеНастройкиКомпоновщика(НовыеНастройкиКД, ТекущиеНастройкиКд, ЕстьВсе = Истина)

	// Выбор
	ЗаписатьНовыйИдПользовательскойНастройки(НовыеНастройкиКД.Выбор, ТекущиеНастройкиКд.Выбор);
						
	// Параметры вывода
	НаборНовыхПараметров = НовыеНастройкиКД.ПараметрыВывода.Элементы;
	Для каждого ТекущийПараметр Из ТекущиеНастройкиКд.ПараметрыВывода.Элементы Цикл
		
		НовыйПараметр = НаборНовыхПараметров.Найти(ТекущийПараметр.Параметр);
		Если НовыйПараметр <> Неопределено Тогда
			// ЗаписатьСтарыйИдПользовательскойНастройки(НовыйПараметр, ТекущийПараметр);
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ТекущийПараметр, , "Значение");
		КонецЕсли; 		
	
	КонецЦикла;
	
	Если ЕстьВсе Тогда
		
		// Отбор
		ЗаписатьСтарыйИдПользовательскойНастройки(НовыеНастройкиКД.Отбор, ТекущиеНастройкиКд.Отбор);
		
		// Порядок
		ЗаписатьСтарыйИдПользовательскойНастройки(НовыеНастройкиКД.Порядок, ТекущиеНастройкиКд.Порядок);
								
	КонецЕсли;
					
	// Условное оформление
	ЗаписатьСтарыйИдПользовательскойНастройки(НовыеНастройкиКД.УсловноеОформление, ТекущиеНастройкиКд.УсловноеОформление);	
	
КонецПроцедуры // ПреобразоватьОсновныеНастройкиКомпоновщика()

// Процедура модифицирует настройки компоновщика для соответствия новой схеме работы.
// 
// Параметры:
//  НовыеНастройкиКД   - НастройкиКомпоновкиДанных.
//  ТекущиеНастройкиКд - НастройкиКомпоновкиДанных.
// 
Процедура ПреобразоватьНастройкиКомпоновщика(НовыеНастройкиКД, ТекущиеНастройкиКд) Экспорт

	// Выбор, Отбор, Порядок, Условное оформление, Параметры вывода.
	ПреобразоватьОсновныеНастройкиКомпоновщика(НовыеНастройкиКД, ТекущиеНастройкиКд, Истина);	
					
	// Параметры данных
	НаборНовыхПараметров = НовыеНастройкиКД.ПараметрыДанных.Элементы;
	Для каждого ТекущийПараметр Из ТекущиеНастройкиКд.ПараметрыДанных.Элементы Цикл
		
		НовыйПараметр = НаборНовыхПараметров.Найти(ТекущийПараметр.Параметр);
		Если НовыйПараметр <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ТекущийПараметр, , "Значение");
		КонецЕсли; 		
	
	КонецЦикла;			
					
	// Структура
	ЗаписатьСтарыйИдПользовательскойНастройки(НовыеНастройкиКД.Структура, ТекущиеНастройкиКд.Структура);
		
КонецПроцедуры // ПреобразоватьНастройкиКомпоновщика()

// Процедура выполняет настройку компоновщика перед выводом.
// 
// Параметры:
//  ПараметрыКУстановке - Структура.
// 
Процедура ДоработатьКомпоновщикПередВыводом(ПараметрыКУстановке) Экспорт
	
	НедоступныйРежим = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Если ТипЗнч(ПараметрыКУстановке) = Тип("Структура") Тогда
		
		Для каждого КлючИЗначение Из ПараметрыКУстановке Цикл
			
			ИмяПараметра = КлючИЗначение.Ключ;
			ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
			
			Если ЗначениеПараметра <> Неопределено  Тогда
				
				ЗначениеПараметра.Использование = Истина;
				ЗначениеПараметра.Значение = КлючИЗначение.Значение;
				// Добавление кода. Начало. 10.08.2011{{
				ЗначениеПараметра.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор());
				ЗначениеПараметра.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				// Добавление кода. Конец. 10.08.2011}}
			КонецЕсли; 
			
		КонецЦикла; 
			
	КонецЕсли; 
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
		ЗначениеПараметра.Значение = 9;
	КонецЕсли;
	ЗначениеПараметра.Использование = Истина;
	// Добавление кода. Начало. 10.08.2011{{
	ЗначениеПараметра.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор());
	ЗначениеПараметра.РежимОтображения = НедоступныйРежим;
	// Добавление кода. Конец. 10.08.2011}}
		
	Если ВидОтчета = "ПоБюджету" Тогда
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Бюджет"));
		Если ЗначениеПараметра = Неопределено Тогда
			Возврат;
		КонецЕсли;   		
		ЗначениеПараметра.Использование = Истина;
		// Добавление кода. Начало. 10.08.2011{{
		ЗначениеПараметра.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор());
		ЗначениеПараметра.РежимОтображения = НедоступныйРежим;
		// Добавление кода. Конец. 10.08.2011}}
		
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтображатьПустыеСтроки"));
		Если ЗначениеПараметра = Неопределено Тогда
			Возврат;
		КонецЕсли; 		
		ЗначениеПараметра.Использование = Истина;
		// Добавление кода. Начало. 10.08.2011{{
		ЗначениеПараметра.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор());
		ЗначениеПараметра.РежимОтображения = НедоступныйРежим;
		// Добавление кода. Конец. 10.08.2011}}
		
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()
 
#КонецОбласти

#КонецЕсли
