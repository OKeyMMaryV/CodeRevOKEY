#Область ОписаниеПеременных

// Хранит соответствие результатов формирования отчета.
&НаКлиенте
Перем мСоответствиеРезультатов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
			
	МетаданныеОбъекта = Метаданные.Отчеты.бит_ПланФактныйАнализУниверсальный;
	
	фПолноеИмяОтчета = МетаданныеОбъекта.ПолноеИмя();
		
	фЭтоРасшифровка = Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено;	
		
	фЗагружатьНастройки   = Истина;
	
	РежимФормирования = бит_ОтчетыСервер.РежимФормированияОтчетов(фПолноеИмяОтчета);
	
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка 	= Истина;
	Элементы.ФормаКомандаПанельНастроек.Пометка 			= Истина;
	
	// Значения по умолчанию
	Если Не ЗначениеЗаполнено(Отчет.ВидОтчета) Тогда
		Отчет.ВидОтчета = "ПоСтатьямОборотов";
	КонецЕсли;

	фСтруктураСохраненныхНастроек = Новый Структура;
	
	ЗаполнитьДополнительныеСписки(фЭтоРасшифровка);
		               		
	// Расшифровка
	Если фЭтоРасшифровка Тогда

		Если Параметры.Свойство("ВидОтчета") Тогда
			Отчет.ВидОтчета = Параметры.ВидОтчета;
		КонецЕсли;
		Если Параметры.Свойство("СценарииСравнения") Тогда
			ТаблицаСценариев = Параметры.СценарииСравнения.Выгрузить();
			Отчет.СценарииСравнения.Загрузить(ТаблицаСценариев);
		КонецЕсли;
		Если Параметры.Свойство("СравнениеДанныхРазличныхЛет") Тогда
			Отчет.СравнениеДанныхРазличныхЛет = Параметры.СравнениеДанныхРазличныхЛет;
		КонецЕсли;
		ДанныеРасшифр 	= ПолучитьИзВременногоХранилища(Параметры.Расшифровка.Данные);
		НастройкиКд 	= ДанныеРасшифр.Настройки;
		
		
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКд);		
		ПерезаполнитьСКД(Истина);
		Параметры.СформироватьПриОткрытии = Ложь;
		
	Иначе
		
		ОбновитьПанельСохраненныхНастроек();	
		
	КонецЕсли;
		
	УправлениеВидимостьюДоступностью();
	Элементы.СтраницаКомпоновщик.Видимость = Ложь; 
    ОбработатьСписокВыбораПериодичность();
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	мСоответствиеРезультатов = Новый Соответствие;
	 	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если фЭтоРасшифровка Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 	
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Оповещение из хранилища настроек при сохранении.
	Если ИмяСобытия = ("СохраненаНастройка_" + фПолноеИмяОтчета) Тогда
		
		ОбновитьПанельСохраненныхНастроек(Истина, Параметр);
		
	// Оповещение из формы настрек при закрытии
	ИначеЕсли ИмяСобытия = ("ИзмененыНастройки_" + фПолноеИмяОтчета) Тогда
		
		ЗагрузитьНастройкиПользователяИзСтруктуры(Параметр);
				
	ИначеЕсли ИмяСобытия = ("ИзмененВариант_" + фПолноеИмяОтчета) Тогда
		                        	 
		ЗагрузитьНастройкиВариантаИзСтруктуры(Параметр);				
				
	КонецЕсли;
		
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	
	// Видимость панели сохраненных настроек
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка 	 = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
	// Фильтр сохраненных настроек по варианту
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	// Сохранение дополнительных свойств
	бит_ОтчетыСервер.ЗаполнитьДополнительныеСвойстваДляНастройки(Отчет, Настройки.ДополнительныеСвойства, фСписокДополнительныхСвойств);
	
	Если фКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		УстановитьТекущийВариант(КлючТекущегоВарианта); 		
	КонецЕсли;
	
КонецПроцедуры // ПриСохраненииВариантаНаСервере()

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	фКлючТекущегоВарианта = КлючТекущегоВарианта;
	
	Если КлючТекущегоВарианта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
														фСтруктураСохраненныхНастроек, 
														фИмяЭлемента_ВыбраннаяНастройка,
														фФильтроватьНастройкиПоВарианту);		
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Удалить("КлючНастройки");
		КлючТекущихПользовательскихНастроек = Неопределено;  		
		Возврат;
	КонецЕсли;
	
	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
		
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту, Истина);
	
	// Загрузка дополнительных свойств варианта: вид отчета, сценарии планирования.
	Если Настройки.ДополнительныеСвойства.Количество() = 0 Тогда
		Отчет.ВидОтчета = "ПоСтатьямОборотов";
		Отчет.СценарииСравнения.Очистить();
	Иначе	
		бит_ОтчетыСервер.ЗагрузитьДополнительныеСвойства(Отчет, Настройки.ДополнительныеСвойства, фСписокДополнительныхСвойств);
	КонецЕсли;
	
	// Загрузка основных настроек	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
	
	// Загрузка пользовательской настройки, используемой при открытии, если такая указана в справочнике.
	Если фЗагружатьНастройки Тогда  		
		
		КлючНастройкиПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(КлючОбъекта, Истина);
																																									
		Если ЗначениеЗаполнено(КлючНастройкиПоУмолчанию) Тогда
			УстановитьТекущиеПользовательскиеНастройки(КлючНастройкиПоУмолчанию);
		Иначе
			УстановитьСтандартныеНастройкиСервер(Истина);
			фИмяЭлемента_ВыбраннаяНастройка = "";
			ПерезаполнитьСКД(Истина, Ложь);
		КонецЕсли;
		
		Результат.Очистить();
	
	КонецЕсли;
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
	Если бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ВключенРежимТакси") Тогда
		бит_ОтчетыСервер.УстановитьМелкийШрифтЭлементу(Элементы.СценарииСравнения);	
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеВариантаНаСервере()

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	Для каждого ЭлементСписка Из фСписокПараметровНаФорме Цикл
		
		ИмяПараметра = ЭлементСписка.Значение;
		бит_ОтчетыСервер.УстановитьЗначениеПараметраКомпоновщика(Отчет.КомпоновщикНастроек, 
																 Отчет[ИмяПараметра], 
																 ИмяПараметра);
		
	КонецЦикла; 
	
КонецПроцедуры // ПриСохраненииПользовательскихНастроекНаСервере()
 
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если ВариантМодифицирован Тогда
		УстановитьТекущийВариант(фКлючТекущегоВарианта);
	КонецЕсли;
	
	Если Не фЗагружатьНастройки Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено Тогда
		
		бит_ОтчетыСервер.ПолучитьНастройкиКомпоновщикаДляРасшифровки(Параметры.Расшифровка,
													Отчет.КомпоновщикНастроек);
													
		НастройкиПользователя = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		бит_ОтчетыСервер.ЗаполнитьПараметрыНаФормеИзНастроек(Отчет, НастройкиПользователя, фСписокПараметровНаФорме);
		
		// ПерезаполнитьСКД(Истина);
		СформироватьОтчет();
		
		Возврат;
		
	КонецЕсли;
	
	Если Настройки = Неопределено ИЛИ КлючТекущегоВарианта = Неопределено Тогда
		ЗаполнитьСКД();
		Возврат;
	КонецЕсли;  	
	
	бит_ОтчетыСервер.ЗаполнитьПараметрыНаФормеИзНастроек(Отчет, Настройки, фСписокПараметровНаФорме);
    Для каждого ЭлементСписка Из фСписокПараметровНаФорме Цикл // BF-897
        ИмяПараметра = ЭлементСписка.Значение;
        Если (ИмяПараметра = "Бюджет" ИЛИ ИмяПараметра = "ОтображатьПустыеСтроки") И Отчет.ВидОтчета <> "ПоБюджету" Тогда
            Продолжить;       
        КонецЕсли;		
		бит_ОтчетыСервер.УстановитьЗначениеПараметраКомпоновщика(Отчет.КомпоновщикНастроек, 
																 Отчет[ИмяПараметра], 
																 ИмяПараметра);		
	КонецЦикла;
									  		
	Если Настройки.ДополнительныеСвойства.Свойство("КлючНастройки") Тогда
		ТекКлючНастройки = Настройки.ДополнительныеСвойства.КлючНастройки;
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);
	КонецЕсли;
	
	
	Если Параметры.Свойство("СформироватьПриОткрытии") 
		И Параметры.СформироватьПриОткрытии = Истина Тогда
		СформироватьОтчет();
	Иначе
		// Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
		ТекущиеНастройкиКд = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
		ЗаполнитьСКД(ТекущиеНастройкиКд, Настройки, Истина);
	КонецЕсли;  
	
	УправлениеВидимостьюПоВидуОтчета();
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // ПриЗагрузкеПользовательскихНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ДекорацияСохраненнойНастройкиНажатие(Элемент)
	
	// Сохраним результат
	Если ЗначениеЗаполнено(фИмяЭлемента_ВыбраннаяНастройка) 
		И фСтруктураСохраненныхНастроек.Свойство(фИмяЭлемента_ВыбраннаяНастройка) Тогда
		СтруктураСохр = Новый Структура("Результат, ДанныеРасшифровки", Результат, ДанныеРасшифровки);
		КлючНастройки = фСтруктураСохраненныхНастроек[фИмяЭлемента_ВыбраннаяНастройка].КлючНастройки;
		мСоответствиеРезультатов.Вставить(КлючНастройки, СтруктураСохр);
	КонецЕсли;
	
	// Обновление пользовательских настроек
	ИмяЭлемента = Элемент.Имя;
	НастройкиОбновлены = ОбновитьНастройки(ИмяЭлемента, мСоответствиеРезультатов);
	Если Не НастройкиОбновлены Тогда
		ТекстСообщения = Нстр("ru = 'Настройка не найдена. Обновите панель сохраненных настроек.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 	
	КонецЕсли;
	
	бит_ОтчетыКлиент.ОбработатьНажатиеНаПолеСохраненнойНастройки(Элементы, 
																Элемент, 
																фИмяЭлемента_ВыбраннаяНастройка);
	УправлениеВидимостьюПоВидуОтчета();
		
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаОтчетаСервер();
				
КонецПроцедуры // ВидОтчетаПриИзменении()

&НаКлиенте
Процедура ВидОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
			
КонецПроцедуры // ВидОтчетаОчистка()

// Процедура - обработчик события "ПриИзменении" полей ввоода - простых параметров на форме.
// 
&НаКлиенте
Процедура ПростойПараметрПриИзменении(Элемент)
	
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ИмяПараметра = Элемент.Имя;
	бит_ОтчетыКлиент.УстановитьЗначениеПараметраКомпоновщика(Отчет.КомпоновщикНастроек, 
															Отчет[ИмяПараметра], 
															ИмяПараметра);
															
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // ПростойПараметрПриИзменении()

&НаКлиенте
Процедура СценарииСравненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.СценарииСравнения.ТекущиеДанные;

	Если Копирование Тогда // Копирование
									 		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;                                                                                                         
		Иначе
			
			НоваяСтрока = Отчет.СценарииСравнения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
			НоваяСтрока.Эталон = Ложь;	
								
		КонецЕсли;    		
		
	Иначе // Добавление		
				
		НоваяСтрока = Отчет.СценарииСравнения.Добавить();
		Если Отчет.СценарииСравнения.Количество() = 1 Тогда // Если первая
			
			НоваяСтрока.Эталон = Истина;
			
		Иначе
			
			СтрОтбор = Новый Структура("Эталон" , Истина);
			МассивСтрок = Отчет.СценарииСравнения.НайтиСтроки(СтрОтбор);
			Если МассивСтрок.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, МассивСтрок[0], "ДатаНачала, ДатаОкончания, Год");
			КонецЕсли;
					
		КонецЕсли;
									
	КонецЕсли; 
	
	Если Отчет.СравнениеДанныхРазличныхЛет Тогда
		
		// если дата поля ТЧ СценарииСравнения не заполнено, заполним
		Если Не ЗначениеЗаполнено(НоваяСтрока.Год) Тогда
			НоваяСтрока.Год = ТекущаяДата();
		КонецЕсли;
		
		НоваяСтрока.ДатаНачала = НачалоГода(ТекущаяДата());
		НоваяСтрока.ДатаОкончания = КонецГода(ТекущаяДата());

	КонецЕсли;
	
	// Установка текущей строки
	Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор(); 
	
	Если ЗначениеЗаполнено(НоваяСтрока.Сценарий) Тогда
		ПерезаполнитьСКД();
	КонецЕсли;             	
		
КонецПроцедуры // СценарииСравненияПередНачаломДобавления()
	  
&НаКлиенте
Процедура СценарииСравненияПослеУдаления(Элемент)
	
	Если Отчет.СценарииСравнения.Количество() > 0 Тогда
	
		СтрОтбор = Новый Структура("Эталон" , Истина);
		МассивСтрок = Отчет.СценарииСравнения.НайтиСтроки(СтрОтбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			// Установка флага эталон для текущей строки.
			Отчет.СценарииСравнения[0].Эталон = Истина;
			
		КонецЕсли; 
	
	КонецЕсли;
	
	ПерезаполнитьСКД();
		
КонецПроцедуры // СценарииСравненияПослеУдаления()

&НаКлиенте
Процедура СценарииСравненияСценарийПриИзменении(Элемент)
	
	ПерезаполнитьСКД();
	
КонецПроцедуры // СценарииСравненияСценарийПриИзменении()

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // КомпоновщикНастроекПользовательскиеНастройкиПриИзменении()

									
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОбработкаРасшифровкиОтчета(Расшифровка, СтандартнаяОбработка);
		
КонецПроцедуры // РезультатОбработкаРасшифровки()
									
&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	ОбработкаРасшифровкиОтчета(Расшифровка, СтандартнаяОбработка, Истина);
										
КонецПроцедуры // РезультатОбработкаДополнительнойРасшифровки()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаФильтроватьНастройкиПоВариантам(Команда)
	
	Пометка = Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка;
	фФильтроватьНастройкиПоВарианту = Не Пометка;
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
КонецПроцедуры // КомандаФильтроватьНастройкиПоВариантам()

&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();	
	
КонецПроцедуры // КомандаПанельНастроек()

&НаКлиенте
Процедура КомандаПанельСохраненныхНастроек(Команда)
	
	фСкрытьПанельСохраненныхНастроек = Не фСкрытьПанельСохраненныхНастроек;
	
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка   = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
КонецПроцедуры // КомандаПанельСохраненныхНастроек()

&НаКлиенте
Процедура КомандаОбновитьПанельСохраненныхНастроек(Команда)
	
	ОбновитьПанельСохраненныхНастроек(Истина);	
	
КонецПроцедуры // КомандаОбновитьПанельСохраненныхНастроек()

&НаКлиенте
Процедура ОткрытьВариантОтчета(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийОбъект"		  						  , Отчет);
	ПараметрыФормы.Вставить("ВариантМодифицирован"						  , ВариантМодифицирован);
	ПараметрыФормы.Вставить("ПредставлениеТекущегоВарианта"				  , ПредставлениеТекущегоВарианта);
	ПараметрыФормы.Вставить("ПредставлениеТекущихПользовательскихНастроек", ПредставлениеТекущихПользовательскихНастроек);
	// ПараметрыФормы.Вставить("фСписокПараметровВывода"		  			  , фСписокПараметровВывода);
	ПараметрыФормы.Вставить("фСтруктураСохраненныхНастроек" 			  , фСтруктураСохраненныхНастроек);
	ПараметрыФормы.Вставить("ПараметрыКУстановке"		  				  , ПараметрыКУстановке);
	// ПараметрыФормы.Вставить("фИдНастроекПоУмолчанию"		  			  , фИдНастроекПоУмолчанию);
		                                     		
	ОткрытьФорму("Отчет.бит_ПланФактныйАнализУниверсальный.ФормаВарианта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ОткрытьВариантОтчета()

&НаКлиенте
Процедура ОткрытьНастройкиОтчета(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийОбъект"				    , Отчет);
	// ПараметрыФормы.Вставить("фСписокПараметровВывода"		, фСписокПараметровВывода);
	// ПараметрыФормы.Вставить("фСтруктураСохраненныхНастроек" , фСтруктураСохраненныхНастроек);	
	// ПараметрыФормы.Вставить("ПараметрыКУстановке"		    , ПараметрыКУстановке);
	// ПараметрыФормы.Вставить("фИдНастроекПоУмолчанию"		, фИдНастроекПоУмолчанию);
	ПараметрыФормы.Вставить("фСписокПараметровНаФорме"		, фСписокПараметровНаФорме);
		
	ОткрытьФорму("Отчет.бит_ПланФактныйАнализУниверсальный.ФормаНастроек", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // ОткрытьНастройкиОтчета()

&НаКлиенте
Процедура КомандаУстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиСервер();
	
КонецПроцедуры // КомандаУстановитьСтандартныеНастройки()

&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()

&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	СтрРегистрация = Новый Структура;
    бит_ук_СлужебныйВызовСервера.РегистрацияНачалоСобытия(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);

	МожноФормировать = ПроверитьВозможностьФормирования();
	
	Если МожноФормировать Тогда 		
		СформироватьОтчет(СтрРегистрация);	
	КонецЕсли;    
        	
КонецПроцедуры // КомандаСформировать()

&НаКлиенте
Процедура СценарииЭталон(Команда)
	
	ТекущиеДанные = Элементы.СценарииСравнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Для каждого СтрокаСценария Из Отчет.СценарииСравнения Цикл
			СтрокаСценария.Эталон = Ложь; 	
		КонецЦикла;  	
			 	
		ТекущиеДанные.Эталон = Истина;	
		
	КонецЕсли;
	
	ПерезаполнитьСКД();
	
КонецПроцедуры // СценарииЭталон()

&НаКлиенте
Процедура СценарииНастроитьПериод(Команда)
	
	ТекущиеДанные = Элементы.СценарииСравнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериодаПоДатам(ТекущиеДанные);
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // СценарииНастроитьПериод()

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процедура проверяет возможность формировния отчета.
// 
&НаКлиенте
Функция ПроверитьВозможностьФормирования()

	МожноФормировать = Истина;
	
	Если Отчет.СценарииСравнения.Количество() = 0 Тогда
		
		МожноФормировать = Ложь;
		ТекстСообщения = Нстр("ru = 'Не указан эталонный сценарий.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
	Иначе
		
		СтрОтбор = Новый Структура("Эталон" , Истина);
		МассивСтрок = Отчет.СценарииСравнения.НайтиСтроки(СтрОтбор);
		Если МассивСтрок.Количество() = 0 Тогда
			МожноФормировать = Ложь;
			ТекстСообщения = Нстр("ru = 'Не указан эталонный сценарий.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		КонецЕсли;
		
		Для каждого СтрСценарий Из Отчет.СценарииСравнения Цикл
			Если Не ЗначениеЗаполнено(СтрСценарий.Сценарий) Тогда
				МожноФормировать = Ложь;
				ТекстСообщения = Нстр("ru = 'Строке №" + СтрСценарий.НомерСтроки 
						+ " табличной части ""Сценарии сравнения"": Не заполнено значение реквизита ""Сценарий"".'");
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 			
			КонецЕсли;	
		КонецЦикла; 
	
	КонецЕсли;   	
	
	Возврат МожноФормировать;
	
КонецФункции // ПроверитьВозможностьФормирования()

// Процедура выполняет обработку расшифровки отчета.
// 
// Параметры:
//  Расшифровка 		 - ИндентификаторРасшифровкиКомпоновкиДанных.
//  СтандартнаяОбработка - Булево.
//  ОткрыватьДопЗначение - Булево (По умолчанию = Ложь).
// 
&НаКлиенте
Процедура ОбработкаРасшифровкиОтчета(Расшифровка, СтандартнаяОбработка, ОткрыватьДопЗначение = Ложь)
	
	ДополнительныеПраметры = Новый Структура;
	ДополнительныеПраметры.Вставить("ВидОтчета"		   , Отчет.ВидОтчета);
	ДополнительныеПраметры.Вставить("СценарииСравнения", Отчет.СценарииСравнения);
	ДополнительныеПраметры.Вставить("СравнениеДанныхРазличныхЛет", Отчет.СравнениеДанныхРазличныхЛет);
	
	бит_ОтчетыКлиент.ОбработкаРасшифровки(ЭтаФорма
										, Расшифровка
										, ДанныеРасшифровки
										, фПолноеИмяОтчета 
										, АдресХранилищаСКД
										, СтандартнаяОбработка
										,
										, ДополнительныеПраметры
										, Истина
										, ОткрыватьДопЗначение);
		
КонецПроцедуры // ОбработкаРасшифровкиОтчета()

// Процедура заполняет дополнительные списки.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьДополнительныеСписки(ЭтоРасшифровка)

	// Список имен параметров СКД, заполняемых пользователем через элементы формы.
	ИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Ложь); 
	Отчеты[ИмяОтчета].ЗаполнитьДополнительныеСписки(фСписокПараметровНаФорме
													, фСписокДополнительныхСвойств
													// , фСписокПараметровВывода
													// , фИдНастроекПоУмолчанию
													, фЭтоРасшифровка);
		
КонецПроцедуры // ЗаполнитьДополнительныеСписки()

// Процедура управляет видимостью и доступностью элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	// Установка видимости и доступности элементов формы в зависимости от типа отчета 
	// - обычный или расшифровка.       
	ВозможенВыборВарианта = Истина;
	бит_ОтчетыСервер.УстановитьВидимостьДоступностьЭлементов(Элементы, 
															Параметры.КлючВарианта, 
															Параметры.ПредставлениеВарианта,
															ВозможенВыборВарианта);
															
	УправлениеВидимостьюПоВидуОтчета();
	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура управляет видимостью элементов формы в зависимоти от вида отчета.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УправлениеВидимостьюПоВидуОтчета()

	ЭтоОтчетПоБюджету = Отчет.ВидОтчета = "ПоБюджету";
	Элементы.ГруппаПараметрыПоБюджету.Видимость = ЭтоОтчетПоБюджету;	

КонецПроцедуры // УправлениеВидимостьюПоВидуОтчета()

// Процедура включает/отключает фильтр настроек по варианту.
// 
// Параметры:
//  Фильтровать  - Булево.
// 
&НаСервере
Процедура ИзменитьФильтрНастроек(Фильтровать)

	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту);	

КонецПроцедуры // ИзменитьФильтрНастроек()

// Функция обновляет настройки отчета.
// 
// Параметры:
//  ИмяЭлемента  		 	- Строка.
//  СоответствиеРезультатов - Соответствие.
// 
// ВозращаемоеЗначение:
//  Булево - настройки обновлены.
// 
&НаСервере
Функция ОбновитьНастройки(ИмяЭлемента, СоответствиеРезультатов)

	НастройкиОбновлены = Ложь;
	
	Результат.Очистить();
	
	СтруктураНастроек = фСтруктураСохраненныхНастроек[ИмяЭлемента];
	
	Настройки = бит_ОтчетыСервер.ПолучитьНастройкиОтчета(СтруктураНастроек);
	
	Если Настройки <> Неопределено Тогда
			
		КлючНастройки = СтруктураНастроек.КлючНастройки;    	
		КлючОбъекта = СтрЗаменить(СтруктураНастроек.КлючОбъекта, фПолноеИмяОтчета + "/", "");
		
		Если КлючОбъекта <> КлючТекущегоВарианта Тогда
			фЗагружатьНастройки = Ложь;	
			УстановитьТекущийВариант(КлючОбъекта);
			фЗагружатьНастройки = Истина;
		КонецЕсли;
		
		УстановитьТекущиеПользовательскиеНастройки(КлючНастройки);
				
		НастройкиОбновлены = Истина;
		
	КонецЕсли;
	
    // Выведем результат, если он уже формировался для текущей настройки.
    Если НастройкиОбновлены Тогда		
    	СтруктураРез = СоответствиеРезультатов.Получить(КлючНастройки);
    	Если СтруктураРез <> Неопределено Тогда
    		Результат.Вывести(СтруктураРез.Результат);
    		ДанныеРасшифровки = СтруктураРез.ДанныеРасшифровки;
    		бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат);
    	КонецЕсли; 		
    КонецЕсли;
		
	Возврат НастройкиОбновлены;
	
КонецФункции // ОбновитьНастройки()

// Процедура обновляет панель сохраненных настроек.
// 
// Параметры:
//  Очищать  - Булево (Необязательный, по умолчанию = Ложь).
//  ТекКлючНастройки  (Необязательный).
// 
&НаСервере
Процедура ОбновитьПанельСохраненныхНастроек(Очищать = Ложь, ТекКлючНастройки = Неопределено)

	ГруппаПанели = Элементы.ГруппаПанельВыбораСохраненныхНастроек;
	
	СтруктураДоступности = бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(фПолноеИмяОтчета, Истина);
	лИспользуемыйПриОткрытииВариант = СтруктураДоступности.ИспользуемыйПриОткрытииВариант;
		
	Если Очищать Тогда 	
		
		бит_РаботаСДиалогамиСервер.УдалитьЭлементыГруппыФормы(Элементы, ГруппаПанели); 			
		
	Иначе
		
		Если лИспользуемыйПриОткрытииВариант = Неопределено Тогда
			КлючТекущегоВарианта = "";
			Возврат;
		Иначе
			КлючТекущегоВарианта = лИспользуемыйПриОткрытииВариант;		
		КонецЕсли;
	
	КонецЕсли; 	
	
	КлючОбъекта = фПолноеИмяОтчета + "/" + КлючТекущегоВарианта;
				
	бит_ОтчетыСервер.ОбновитьПанельСохраненныхНастроек(Элементы, 
													ГруппаПанели, 
													КлючОбъекта, 
													фСтруктураСохраненныхНастроек,
													СтруктураДоступности,
													фФильтроватьНастройкиПоВарианту,
													фИмяЭлемента_ВыбраннаяНастройка);
	
	Если ТекКлючНастройки <> Неопределено Тогда
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);	
	Иначе
		фИмяЭлемента_ВыбраннаяНастройка = "";														
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПанельСохраненныхНастроек()

// Процедура устанавливает стандартные настройки варианта 
// и обновляет по ним элементы формы.
// Заменяет типовую команду "СтандартныеНастройки".
// 
&НаСервере
Процедура УстановитьСтандартныеНастройкиСервер(ВосстанавливатьНастройки = Ложь)
	
	бит_ОтчетыСервер.УстановитьСтандартныеНастройкиСервер(Отчет, ВосстанавливатьНастройки, фСписокПараметровНаФорме);
	
	бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
														фСтруктураСохраненныхНастроек, 
														фИмяЭлемента_ВыбраннаяНастройка,
														фФильтроватьНастройкиПоВарианту);
														
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // УстановитьСтандартныеНастройкиСервер()          

// Процедура загружает настройки варианта.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
// 
&НаСервере
Процедура ЗагрузитьНастройкиВариантаИзСтруктуры(СтруктураПараметров)

	ВариантМодифицирован = Истина;
	
	ПараметрыКУстановке = СтруктураПараметров.ПараметрыКУстановке; 
	
	Отчет.ВидОтчета = СтруктураПараметров.ВидОтчета;
	
	Отчет.СценарииСравнения.Загрузить(СтруктураПараметров.СценарииСравнения.Выгрузить());
		
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураПараметров.НастройкиКд);
	
	ПерезаполнитьСКД(Истина);
	
КонецПроцедуры // ЗагрузитьНастройкиВариантаИзСтруктуры()

// Процедура загружает настройки варианта.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
// 
&НаСервере
Процедура ЗагрузитьНастройкиПользователяИзСтруктуры(СтруктураПараметров)

	ПользовательскиеНастройкиМодифицированы = Истина;
	
	Для каждого ЭлМассива Из фСписокПараметровНаФорме Цикл
		ИмяПараметра = ЭлМассива.Значение;
		Отчет[ИмяПараметра] = СтруктураПараметров[ИмяПараметра];
	КонецЦикла;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СтруктураПараметров.ПользовательскиеНастройки);
	
	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // ЗагрузитьНастройкиПользователяИзСтруктуры()

// Процедура выполняет действия, необходимые при изменении вида отчета.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ПриИзмененииВидаОтчетаСервер()

	ВариантМодифицирован = Истина;
    
    Отчет.Бюджет = Справочники.бит_Бюджеты.ПустаяСсылка();
    
	ПерезаполнитьСКД();
	УправлениеВидимостьюПоВидуОтчета();	
	
	Результат.Очистить();
	
КонецПроцедуры // ПриИзмененииВидаОтчетаСервер()

// Процедура заполняет СКД и инициализирует настройки компоновщика.
// 
// Параметры:
//  СохрНастройкиПользователя - ПользовательскиеНастройкиКомпоновкиДанных (По умолчанию = Неопределено).
//  ВосстановитьНастройки 	  - Булево (По умолчанию = Ложь).
// 
&НаСервере
Процедура ЗаполнитьСКД(ТекущиеНастройкиКд = Неопределено, ТекущиеНастройкиПользователяКд = Неопределено, ВосстановитьНастройки = Ложь)
	
	// Проверка возможности формирования отчета
	Если Отчет.СценарииСравнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрОтбор = Новый Структура("Эталон" , Истина);
	МассивСтрок = Отчет.СценарииСравнения.НайтиСтроки(СтрОтбор);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем СКД
	ОтчетОбъект = ДанныеФормыВЗначение(Отчет, Тип("ОтчетОбъект.бит_ПланФактныйАнализУниверсальный"));
	АдресХранилищаСКД = ОтчетОбъект.СформироватьСКД(ТекущиеНастройкиКд, ТекущиеНастройкиПользователяКд, фСтруктураСохраненныхНастроек, ВосстановитьНастройки, фЭтоРасшифровка, ПараметрыКУстановке);
	ЗначениеВДанныеФормы(ОтчетОбъект, Отчет);
		
КонецПроцедуры // ЗаполнитьСКД()

// Процедура перезаполняетСКД по настройкам компоновщика.
// 
// Параметры:
//  ВосстановитьНастройки 	  - Булево (По умолчанию = Ложь).
// 
&НаСервере
Процедура ПерезаполнитьСКД(ВосстановитьНастройки = Ложь, Изменен = Истина)

	ВариантМодифицирован = Изменен;
	
	// Настройки по умолчанию
	ТекущиеНастройкиКд 			   = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ТекущиеНастройкиПользователяКд = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	// Заполнение СКД
	// ВосстановитьНастройки = Истина;
	ЗаполнитьСКД(ТекущиеНастройкиКд, ТекущиеНастройкиПользователяКд, ВосстановитьНастройки);	

	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальностьОтчета");
	
КонецПроцедуры // ПерезаполнитьСКД()

// Процедура формирует отчет
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура СформироватьОтчет(СтрРегистрация = Неопределено)
	
	Если СтрРегистрация  = Неопределено Тогда
	
		СтрРегистрация = Новый Структура;
		бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);	
	
	КонецЕсли;
	
	Результат.Очистить();
	
	// Настройки по умолчанию
	ТекущиеНастройкиКд 			   = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ТекущиеНастройкиПользователяКд = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	// Заполнение СКД
	ЗаполнитьСКД(ТекущиеНастройкиКд, ТекущиеНастройкиПользователяКд, Истина);
	
	ТекущиеНастройкиКд = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	// Помещаем в переменную данные о расшифровке данных.
	ДанныеРасшифровкиКД1 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Процессор компоновки данных
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;

	Если Не ЗначениеЗаполнено(АдресХранилищаСКД) Тогда
		Возврат;	
	КонецЕсли;
	СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);
	
	
	// Формируем макет, с помощью компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	 	
			
	// Передаем в макет компоновки схему, настройки и данные расшифровки.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, ТекущиеНастройкиКд, ДанныеРасшифровкиКД1);	
	
	// Выполним компоновку с помощью процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровкиКД1);
		
	
	// Подготовка к выводу таблицы 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
		
	// Вывод
	Попытка
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		// ПроцессорВывода.НачатьВывод();
		// ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		// Пока ЭлементРезультата <> Неопределено Цикл						
		// 	ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		// 	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();			
		// КонецЦикла;	
		// ПроцессорВывода.ЗакончитьВывод();
	Исключение 	
	КонецПопытки;
	
	
	// Данные расшифровки
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКД1, УникальныйИдентификатор);

	бит_ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат);
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);

КонецПроцедуры // СформироватьОтчет()

&НаКлиенте
Процедура СравнениеДанныхРазличныхЛетПриИзменении(Элемент)
	
	ПерезаполнитьСКД();
	
	ОбработатьСписокВыбораПериодичность();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСписокВыбораПериодичность()

	// список выбора реквизита периодичность
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(6);
	МассивЗначений.Добавить(7);
	МассивЗначений.Добавить(8);

	Если Отчет.СравнениеДанныхРазличныхЛет Тогда
		Элементы.СценарииСравненияДатаНачала.Видимость = Ложь;
		Элементы.СценарииСравненияДатаОкончания.Видимость = Ложь;
		Элементы.СценарииСравненияГод.Видимость = Истина;
		
		Инд = 0;
		Пока Инд  <  Элементы.Периодичность.СписокВыбора.Количество() Цикл
			
			Эл = Элементы.Периодичность.СписокВыбора[Инд];
			Если МассивЗначений.Найти(Эл.Значение) <> Неопределено Тогда
				Элементы.Периодичность.СписокВыбора.Удалить(Эл);
				Инд = Инд -1;
			КонецЕсли;
			
			Инд = Инд +1;
			
		КонецЦикла;
				
	Иначе
		
		Элементы.СценарииСравненияДатаНачала.Видимость = Истина;
		Элементы.СценарииСравненияДатаОкончания.Видимость = Истина;
		Элементы.СценарииСравненияГод.Видимость = Ложь;
		
		Элементы.Периодичность.СписокВыбора.Очистить();
		
		Элементы.Периодичность.СписокВыбора.Добавить(6, "День");
		Элементы.Периодичность.СписокВыбора.Добавить(7, "Неделя");
		Элементы.Периодичность.СписокВыбора.Добавить(8, "Декада");
		Элементы.Периодичность.СписокВыбора.Добавить(9, "Месяц");
		Элементы.Периодичность.СписокВыбора.Добавить(10, "Квартал");
		Элементы.Периодичность.СписокВыбора.Добавить(11, "Полугодие");
		Элементы.Периодичность.СписокВыбора.Добавить(12, "Год");

	КонецЕсли;
	
КонецПроцедуры // ОбработатьСписокВыбораПериодичность()

&НаКлиенте
Процедура СценарииСравненияГодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СценарииСравнения.ТекущиеДанные;
	
	ТекущиеДанные.ДатаНачала    = НачалоГода(ТекущиеДанные.Год); 
	ТекущиеДанные.ДатаОкончания = КонецГода(ТекущиеДанные.Год);
	
	ПерезаполнитьСКД();
	
КонецПроцедуры

#КонецОбласти
