#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фПолноеИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Истина);
	
	ЗаполнитьДополнительныеСписки();
	
	Для каждого ЭлементСписка Из фСписокПараметровНаФорме Цикл
		ИмяПараметра = ЭлементСписка.Значение;
		Отчет[ИмяПараметра] = Параметры[ИмяПараметра];
	КонецЦикла;
	
	Для каждого ЭлементСписка Из фСписокДополнительныхСвойств Цикл
		ИмяПараметра = ЭлементСписка.Значение;
		Если ИмяПараметра = "Сценарии" Тогда
			Отчет[ИмяПараметра].Загрузить(Параметры[ИмяПараметра].Выгрузить());
		Иначе
			Отчет[ИмяПараметра] = Параметры[ИмяПараметра];
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеПараметры = Параметры.Вариант.ПараметрыДанных;
	
	ПараметрВидОтчета = ТекущиеПараметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидОтчета"));
	
	Если ПараметрВидОтчета = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрВидОтчета.Значение) Тогда
		ВидОтчета = "ПоСтатьямОборотов";
	Иначе
		ВидОтчета = ПараметрВидОтчета.Значение;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" полей воода - простых параметров на форме.
// 
&НаКлиенте
Процедура ПростойПараметрПриИзменении(Элемент)
	
	ИмяПараметра = Элемент.Имя;
	бит_ОтчетыКлиент.УстановитьЗначениеПараметраКомпоновщика(Отчет.КомпоновщикНастроек, 
															Отчет[ИмяПараметра], 
															ИмяПараметра);
															
КонецПроцедуры // ПростойПараметрПриИзменении()

// Процедура - обработчик события "ПриИзменении" 
// поля "КомпоновщикНастроекПользовательскиеНастройки".
// 
&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	Для каждого ИдЭлемента Из Элемент.ВыделенныеСтроки Цикл
		
		НастройкаКд  = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдЭлемента);
		Если ТипЗнч(НастройкаКд) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			ИмяПараметра = Строка(НастройкаКд.Параметр);
			
			Если фСписокПараметровНаФорме.НайтиПоЗначению(ИмяПараметра) <> Неопределено Тогда
				
				Отчет[ИмяПараметра] = НастройкаКд.Значение;
				
				Если ИмяПараметра = "Период" Тогда
			 		ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.Период.ДатаНачала, Отчет.Период.ДатаОкончания);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // КомпоновщикНастроекПользовательскиеНастройкиПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "КомандаВыбратьПериодчерезФорму".
// 
&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	ТекущиеДанные = Элементы.Сценарии.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериодаПоДатам(ТекущиеДанные);
			
КонецПроцедуры // КомандаНастроитьПериод()

// Процедура - обработчик команды "КомандаЗавершитьРедактирование".
// 
&НаКлиенте
Процедура КомандаЗавершитьРедактирование(Команда)
	
	СтруктураПараметров = Новый Структура;
	
	Для каждого ЭлементСписка Из фСписокПараметровНаФорме Цикл
		ИмяПараметра = ЭлементСписка.Значение;
		СтруктураПараметров.Вставить(ИмяПараметра , Отчет[ИмяПараметра]);
	КонецЦикла;
	
	Для каждого ЭлементСписка Из фСписокДополнительныхСвойств Цикл
		ИмяПараметра = ЭлементСписка.Значение;
		СтруктураПараметров.Вставить(ИмяПараметра , Отчет[ИмяПараметра]);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ПользовательскиеНастройки" , Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	// Оповещение формы отчета
	Оповестить("ИзмененыНастройки_" + фПолноеИмяОтчета, СтруктураПараметров);
	
	Закрыть();
	
КонецПроцедуры // КомандаЗавершитьРедактирование()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	СкрытьБюджет = ВидОтчета = "ПоСтатьямОборотов";
	
	Элементы.Бюджет.Видимость 				  = НЕ СкрытьБюджет;														
	Элементы.ОтображатьПустыеСтроки.Видимость = НЕ СкрытьБюджет;
	
КонецПроцедуры

// Процедура заполняет дополнительные списки.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьДополнительныеСписки()

	// Список имен параметров СКД, заполняемых пользователем через элементы формы.
	фСписокПараметровНаФорме.Добавить("Периодичность");
	
	фСписокДополнительныхСвойств.Добавить("Сценарии");
	фСписокДополнительныхСвойств.Добавить("Бюджет");
	фСписокДополнительныхСвойств.Добавить("ОтображатьПустыеСтроки");
	
КонецПроцедуры // ЗаполнитьДополнительныеСписки()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаНачала" табличного поля "Сценарии".
// 
&НаКлиенте
Процедура СценарииДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сценарии.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(ТекущиеДанные.ДатаНачала, 
																				ТекущиеДанные.ДатаОкончания);
																				
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаОкончания" табличного поля "Сценарии".
// 
&НаКлиенте
Процедура СценарииДатаОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сценарии.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(ТекущиеДанные.ДатаНачала, 
																				 ТекущиеДанные.ДатаОкончания);
																				 
КонецПроцедуры

#КонецОбласти

