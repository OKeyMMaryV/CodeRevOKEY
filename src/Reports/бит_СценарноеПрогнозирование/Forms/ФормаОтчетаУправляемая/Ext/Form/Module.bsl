#Область ОписаниеПеременных

// Хранит соответствие результатов формирования отчета.
&НаКлиенте
Перем мСоответствиеРезультатов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	мСоответствиеРезультатов = Новый Соответствие;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы.
// 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Оповещение из хранилища настроек при сохранении.
	Если ИмяСобытия = ("СохраненаНастройка_" + фПолноеИмяОтчета) Тогда
		
		ОбновитьПанельСохраненныхНастроек(Истина, Параметр);
		
	// Оповещение из формы настрек при закрытии
	ИначеЕсли ИмяСобытия = ("ИзмененыНастройки_" + фПолноеИмяОтчета) Тогда
		
		СтруктураПараметров = Параметр;
		
		Для каждого ЭлМассива Из фСписокПараметровНаФорме Цикл
			ИмяПараметра = ЭлМассива.Значение;
			Отчет[ИмяПараметра] = СтруктураПараметров[ИмяПараметра];
		КонецЦикла;
		
		Для каждого ЭлМассива Из фСписокДополнительныхСвойств Цикл
			ИмяПараметра = ЭлМассива.Значение;
			Если ИмяПараметра = "Сценарии" Тогда
				
				Отчет[ИмяПараметра].Очистить();
				
				Для Каждого ТекущаяСтрока Из СтруктураПараметров[ИмяПараметра] Цикл
					НоваяСтрока = Отчет[ИмяПараметра].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				КонецЦикла;
			Иначе
				Отчет[ИмяПараметра] = СтруктураПараметров[ИмяПараметра];
			КонецЕсли;
		КонецЦикла;
		
		ЗагрузитьНастройкиИзСтруктуры(СтруктураПараметров);
						
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	фПолноеИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Истина);
			
	// Вызов механизма защиты
	
	
	фЗагружатьНастройки   = Истина;
	
	РежимФормирования = бит_ОтчетыСервер.РежимФормированияОтчетов(фПолноеИмяОтчета);
	
	ОбновитьПанельСохраненныхНастроек();
	
	ЗаполнитьДополнительныеСписки();
	
	УправлениеВидимостьюДоступностью(Истина);
	
	// Если это расшифровка
	Если ЭтаФорма.Параметры.ПредставлениеВарианта = "Расшифровка"
		И ЭтаФорма.Параметры.КлючВарианта = Неопределено Тогда
		
		фЭтоРасшифровка = Истина;
		
		Отчет.ЭтоРасшифровка = Истина;
		Отчет.ВидОтчета 	 = ЭтаФорма.Параметры.ВидОтчета;
		
		Отчет.Бюджет = ЭтаФорма.Параметры.Бюджет;
		Отчет.ОтображатьПустыеСтроки = ЭтаФорма.Параметры.ОтображатьПустыеСтроки;
		Отчет.Сценарии.Загрузить(ЭтаФорма.Параметры.Сценарии.Выгрузить());
		
	КонецЕсли;
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	
	// Видимость панели сохраненных настроек
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка 	 = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
	// Фильтр сохраненных настроек по варианту
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// Процедура - обработчик события "ПриСохраненииВариантаНаСервере" формы.
// 
&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	Если фКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		УстановитьТекущийВариант(КлючТекущегоВарианта); 		
	КонецЕсли;                                       
		
КонецПроцедуры // ПриСохраненииВариантаНаСервере()

// Процедура - обработчик события "ПриЗагрузкеВариантаНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	фКлючТекущегоВарианта = КлючТекущегоВарианта;
	
	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
		
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту, Истина);
	
	Если фЗагружатьНастройки Тогда
		
		// Установка настройки, используемой при открытии, если такая указана в справочнике.
		КлючНастройкиПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(КлючОбъекта, Истина);
		
		Если ЗначениеЗаполнено(КлючНастройкиПоУмолчанию) Тогда
			УстановитьТекущиеПользовательскиеНастройки(КлючНастройкиПоУмолчанию);
		Иначе
			УстановитьСтандартныеНастройкиСервер(Истина);
			фИмяЭлемента_ВыбраннаяНастройка = "";
		КонецЕсли;
		
		Результат.Очистить();
	
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью(Ложь);
	
КонецПроцедуры // ПриЗагрузкеВариантаНаСервере()

// Процедура - обработчик события "ПриСохраненииПользовательскихНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	бит_ОтчетыСервер.ЗаполнитьДополнительныеСвойстваДляНастройки(Отчет, Настройки.ДополнительныеСвойства, фСписокДополнительныхСвойств);
	
	Для каждого ЭлементСписка Из фСписокПараметровНаФорме Цикл
		
		ИмяПараметра = ЭлементСписка.Значение;
		бит_ОтчетыСервер.УстановитьЗначениеПараметраКомпоновщика(Отчет.КомпоновщикНастроек, 
																 Отчет[ИмяПараметра], 
																 ИмяПараметра);
		
	КонецЦикла; 
	
КонецПроцедуры // ПриСохраненииПользовательскихНастроекНаСервере()
 
// Процедура - обработчик события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Настройки = Неопределено ИЛИ Не фЗагружатьНастройки Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ фЭтоРасшифровка Тогда
		бит_ОтчетыСервер.ЗагрузитьДополнительныеСвойства(Отчет, Настройки.ДополнительныеСвойства, фСписокДополнительныхСвойств);
	КонецЕсли;
	
	бит_ОтчетыСервер.ЗаполнитьПараметрыНаФормеИзНастроек(Отчет, Настройки, фСписокПараметровНаФорме);
                                      		
	Если Настройки.ДополнительныеСвойства.Свойство("КлючНастройки") Тогда
		ТекКлючНастройки = Настройки.ДополнительныеСвойства.КлючНастройки;
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеПользовательскихНастроекНаСервере()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаНачала" табличного поля "Сценарии".
// 
&НаКлиенте
Процедура СценарииДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сценарии.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(ТекущиеДанные.ДатаНачала, 
																				ТекущиеДанные.ДатаОкончания);
																				
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаОкончания" табличного поля "Сценарии".
// 
&НаКлиенте
Процедура СценарииДатаОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сценарии.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(ТекущиеДанные.ДатаНачала, 
																				 ТекущиеДанные.ДатаОкончания);
																				 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "Нажатие" элемента формы "ДекорацияНастройки<№>".
// 
&НаКлиенте
Процедура Подключаемый_ДекорацияСохраненнойНастройкиНажатие(Элемент)
	
	// Сохраним результат
	Если ЗначениеЗаполнено(фИмяЭлемента_ВыбраннаяНастройка) 
		И фСтруктураСохраненныхНастроек.Свойство(фИмяЭлемента_ВыбраннаяНастройка) Тогда
		СтруктураСохр = Новый Структура("Результат, ДанныеРасшифровки", Результат, ДанныеРасшифровки);
		КлючНастройки = фСтруктураСохраненныхНастроек[фИмяЭлемента_ВыбраннаяНастройка].КлючНастройки;
		мСоответствиеРезультатов.Вставить(КлючНастройки, СтруктураСохр);
	КонецЕсли;
	
	// Обновление пользовательских настроек
	ИмяЭлемента = Элемент.Имя;
	НастройкиОбновлены = ОбновитьНастройки(ИмяЭлемента, мСоответствиеРезультатов);
	Если Не НастройкиОбновлены Тогда
		ТекстСообщения = Нстр("ru = 'Настройка не найдена. Обновите панель сохраненных настроек.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 	
	КонецЕсли;
	
	бит_ОтчетыКлиент.ОбработатьНажатиеНаПолеСохраненнойНастройки(Элементы, 
																Элемент, 
																фИмяЭлемента_ВыбраннаяНастройка);
																	     			
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииОбласти" поля табличного документа "Результат".
// 
&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	СуммаОтчета = бит_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Результат);
	
КонецПроцедуры // РезультатПриАктивизацииОбласти()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "Сформировать".
// Выполняется формирование отчета.
// 
&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	бит_ОтчетыКлиент.СформироватьОтчет(ЭтаФорма, Элементы.ГруппаКоманднаяПанельОтчетаЛевая, РежимФормирования);
	
КонецПроцедуры // КомандаСформировать()

// Процедура - обработчик команды "КомандаФильтроватьНастройкиПоВариантам".
// 
&НаКлиенте
Процедура КомандаФильтроватьНастройкиПоВариантам(Команда)
	
	фФильтроватьНастройкиПоВарианту = Не фФильтроватьНастройкиПоВарианту;
	
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
КонецПроцедуры // КомандаФильтроватьНастройкиПоВариантам()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();	
	
КонецПроцедуры // КомандаПанельНастроек()

// Процедура - обработчик команды "КомандаПанельСохраненныхНастроек".
// 
&НаКлиенте
Процедура КомандаПанельСохраненныхНастроек(Команда)
	
	фСкрытьПанельСохраненныхНастроек = Не фСкрытьПанельСохраненныхНастроек;
	
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка   = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
КонецПроцедуры // КомандаПанельСохраненныхНастроек()

// Процедура - обработчик команды "КомандаПанельСохраненныхНастроек".
// 
&НаКлиенте
Процедура КомандаОбновитьПанельСохраненныхНастроек(Команда)
	
	ОбновитьПанельСохраненныхНастроек(Истина);	
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры // КомандаОбновитьПанельСохраненныхНастроек()

// Процедура - обработчик команды "КомандаВыбратьПериодчерезФорму".
// 
&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	ТекущиеДанные = Элементы.Сценарии.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериодаПоДатам(ТекущиеДанные);
	
КонецПроцедуры // КомандаНастроитьПериод()

// Процедура - обработчик события "ПриИзменении" полей воода - простых параметров на форме.
// 
&НаКлиенте
Процедура ПростойПараметрПриИзменении(Элемент)
	
	ИмяПараметра = Элемент.Имя;
	бит_ОтчетыКлиент.УстановитьЗначениеПараметраКомпоновщика(Отчет.КомпоновщикНастроек, 
															Отчет[ИмяПараметра], 
															ИмяПараметра);
															
КонецПроцедуры // ПростойПараметрПриИзменении()
														
// Процедура - обработчик события "ПриИзменении" 
// поля "КомпоновщикНастроекПользовательскиеНастройки".
// 
&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	
	Для каждого ИдЭлемента Из Элемент.ВыделенныеСтроки Цикл
		
		НастройкаКд  = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдЭлемента);
		Если ТипЗнч(НастройкаКд) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			ИмяПараметра = Строка(НастройкаКд.Параметр);
			
			Если фСписокПараметровНаФорме.НайтиПоЗначению(ИмяПараметра) <> Неопределено Тогда
				
				Отчет[ИмяПараметра] = НастройкаКд.Значение;
				
				Если ИмяПараметра = "Период" Тогда
			 		ВремяКорректно = бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.Период.ДатаНачала, Отчет.Период.ДатаОкончания);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // КомпоновщикНастроекПользовательскиеНастройкиПриИзменении()

// Процедура - обработчик команды "КомандаУстановитьСтандартныеНастройки".
// 
&НаКлиенте
Процедура КомандаУстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиСервер();
	
КонецПроцедуры // КомандаУстановитьСтандартныеНастройки()
     
// Процедура - обработчик команды "Результат_ПоказатьВОтдельномОкне".
// 
&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()

// Процедура - действие команды "КомандаНастроитьПериодГрафически".
// 
&НаКлиенте
Процедура КомандаНастроитьПериодГрафически(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Периодичность", Отчет.Периодичность);
	
	СтруктураТочек = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из Отчет.Сценарии Цикл
		
		СтруктураЗначенийСерии = Новый Структура;
		СтруктураЗначенийСерии.Вставить("Сценарий"		, ТекущаяСтрока.Сценарий);
		СтруктураЗначенийСерии.Вставить("ДатаНачала"	, ТекущаяСтрока.ДатаНачала);
		СтруктураЗначенийСерии.Вставить("ДатаОкончания" , ТекущаяСтрока.ДатаОкончания);
		
		СтруктураТочек.Добавить(СтруктураЗначенийСерии);
		
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Сценарии", СтруктураТочек); 	
	ОбработчикНС = Новый ОписаниеОповещения("ОбработкаОповещенияНастройкиИнтервалаУпрЗавершение", ЭтотОбъект);
	ОткрытьФорму("Отчет.бит_СценарноеПрогнозирование.Форма.ФормаНастройкиИнтерваловУправляемая"
					, ПараметрыФормы, ЭтаФорма, , , , ОбработчикНС, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // КомандаНастроитьПериодГрафически()

// Процедура обработчик оповещения "ОбработкаОповещенияНастройкиИнтервалаУпрЗавершение".
// 
// Параметры:
// СтруктураНастроек - Структура.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура ОбработкаОповещенияНастройкиИнтервалаУпрЗавершение(СтруктураНастроек, ДополнительныеДанные) Экспорт
	
	Если СтруктураНастроек <> Неопределено Тогда
		
		Отчет.Сценарии.Очистить();
		
		Для Каждого ТекущийЭлементМассива Из СтруктураНастроек.Сценарии Цикл
			
			НоваяСтрока = Отчет.Сценарии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийЭлементМассива);
			
		КонецЦикла;
		
	КонецЕсли;  
		
КонецПроцедуры // ОбработкаОповещенияНастройкиИнтервалаУпрЗавершение()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет дополнительные списки.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьДополнительныеСписки()

	// Список имен параметров СКД, заполняемых пользователем через элементы формы.
	фСписокПараметровНаФорме.Добавить("Периодичность");
	// ФСписокПараметровНаФорме.Добавить("Бюджет");
	
	// Список дополнительных свойств
	фСписокДополнительныхСвойств.Добавить("Сценарии");
	фСписокДополнительныхСвойств.Добавить("Бюджет");
	фСписокДополнительныхСвойств.Добавить("ОтображатьПустыеСтроки");
	// Пример в отчете бит_ПланФактныйАнализУниверсальный.
	
КонецПроцедуры // ЗаполнитьДополнительныеСписки()

// Процедура управляет видимостью и доступностью элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью(ПоТипуОтчета=Истина)
	
	// Установка видимости и доступности элементов формы в зависимости от типа отчета 
	// - обычный или расшифровка.
	Если ПоТипуОтчета Тогда
		бит_ОтчетыСервер.УстановитьВидимостьДоступностьЭлементов(Элементы, 
															Параметры.КлючВарианта, 
															Параметры.ПредставлениеВарианта);
	КонецЕсли;
	
	ТекущиеПараметры = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	
	Если Отчет.ЭтоРасшифровка Тогда
		ЗначениеПараметраВидОтчета = Отчет.ВидОтчета;
	Иначе
		ПараметрВидОтчета = ТекущиеПараметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидОтчета"));
		ЗначениеПараметраВидОтчета = ?(ПараметрВидОтчета = Неопределено, "", ПараметрВидОтчета.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПараметраВидОтчета) Тогда
		СкрытьБюджет = Ложь;
	Иначе
		СкрытьБюджет = ЗначениеПараметраВидОтчета = "ПоСтатьямОборотов";
	КонецЕсли;
	
	Элементы.Бюджет.Видимость 				  = НЕ СкрытьБюджет;														
	Элементы.ОтображатьПустыеСтроки.Видимость = НЕ СкрытьБюджет;
	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура включает/отключает фильтр настроек по варианту.
// 
// Параметры:
//  Фильтровать  - Булево.
// 
&НаСервере
Процедура ИзменитьФильтрНастроек(Фильтровать)

	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту);	

КонецПроцедуры // ИзменитьФильтрНастроек()

// Функция обновляет настройки отчета.
// 
// Параметры:
//  ИмяЭлемента  		 	- Строка.
//  СоответствиеРезультатов - Соответствие.
// 
// ВозращаемоеЗначение:
//  Булево - настройки обновлены.
// 
&НаСервере
Функция ОбновитьНастройки(ИмяЭлемента, СоответствиеРезультатов)

	НастройкиОбновлены = Ложь;
	
	Результат.Очистить();
	
	СтруктураНастроек = фСтруктураСохраненныхНастроек[ИмяЭлемента];
	
	Настройки = бит_ОтчетыСервер.ПолучитьНастройкиОтчета(СтруктураНастроек);
	
	Если Настройки <> Неопределено Тогда
			
		КлючНастройки = СтруктураНастроек.КлючНастройки;    	
		КлючОбъекта = СтрЗаменить(СтруктураНастроек.КлючОбъекта, фПолноеИмяОтчета + "/", "");
		
		Если КлючОбъекта <> КлючТекущегоВарианта Тогда
			фЗагружатьНастройки = Ложь;	
			УстановитьТекущийВариант(КлючОбъекта);
			фЗагружатьНастройки = Истина;
		КонецЕсли;
		
		УстановитьТекущиеПользовательскиеНастройки(КлючНастройки);
		НастройкиОбновлены = Истина;
		
	КонецЕсли;
	
	// Выведем результат, если он уже формировался для текущей настройки.
	Если НастройкиОбновлены Тогда		
		СтруктураРез = СоответствиеРезультатов.Получить(КлючНастройки);
		Если СтруктураРез <> Неопределено Тогда
			Результат.Вывести(СтруктураРез.Результат);
			ДанныеРасшифровки = СтруктураРез.ДанныеРасшифровки;
		КонецЕсли; 		
	КонецЕсли;
	       	
	Возврат НастройкиОбновлены;

КонецФункции // ОбновитьНастройки()

// Процедура обновляет панель сохраненных настроек.
// 
// Параметры:
//  Очищать  - Булево (Необязательный, по умолчанию = Ложь).
//  ТекКлючНастройки  (Необязательный).
// 
&НаСервере
Процедура ОбновитьПанельСохраненныхНастроек(Очищать = Ложь, ТекКлючНастройки = Неопределено)

	ГруппаПанели = Элементы.ГруппаПанельВыбораСохраненныхНастроек;
	
	СтруктураДоступности = бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(фПолноеИмяОтчета, Истина);
	лИспользуемыйПриОткрытииВариант = СтруктураДоступности.ИспользуемыйПриОткрытииВариант;
		
	Если Очищать Тогда 	
		
		бит_РаботаСДиалогамиСервер.УдалитьЭлементыГруппыФормы(Элементы, ГруппаПанели); 			
		
	Иначе
		
		Если лИспользуемыйПриОткрытииВариант = Неопределено Тогда
			КлючТекущегоВарианта = "";
			Возврат;
		Иначе
			КлючТекущегоВарианта = лИспользуемыйПриОткрытииВариант;		
		КонецЕсли;
	
	КонецЕсли; 	
	
	КлючОбъекта = фПолноеИмяОтчета + "/" + КлючТекущегоВарианта;
				
	бит_ОтчетыСервер.ОбновитьПанельСохраненныхНастроек(Элементы, 
													ГруппаПанели, 
													КлючОбъекта, 
													фСтруктураСохраненныхНастроек,
													СтруктураДоступности,
													фФильтроватьНастройкиПоВарианту,
													фИмяЭлемента_ВыбраннаяНастройка);
	
	Если ТекКлючНастройки <> Неопределено Тогда
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);	
	Иначе
		фИмяЭлемента_ВыбраннаяНастройка = "";														
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПанельСохраненныхНастроек()

// Процедура устанавливает стандартные настройки варианта 
// и обновляет по ним элементы формы.
// Заменяет типовую команду "СтандартныеНастройки".
// 
&НаСервере
Процедура УстановитьСтандартныеНастройкиСервер(ВосстанавливатьНастройки = Ложь)
	
	бит_ОтчетыСервер.УстановитьСтандартныеНастройкиСервер(Отчет, ВосстанавливатьНастройки, фСписокПараметровНаФорме);
	
	бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
														фСтруктураСохраненныхНастроек, 
														фИмяЭлемента_ВыбраннаяНастройка,
														фФильтроватьНастройкиПоВарианту);
															
КонецПроцедуры // УстановитьСтандартныеНастройкиСервер()          

// Процедура загружает пользовательские настройки компоновщика.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
// 
&НаСервере
Процедура ЗагрузитьНастройкиИзСтруктуры(СтруктураПараметров)

	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СтруктураПараметров.ПользовательскиеНастройки);
		
КонецПроцедуры // ЗагрузитьНастройкиИзСтруктуры()

#КонецОбласти

