#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки",
							Истина, Истина, Истина, Истина);
							
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Межгрупповые поступления и выплаты";
	
КонецФункции

Процедура ДоработатьНастройкиКомпоновкиДляРасшифровки(КомпоновщикНастроек, МассивРасшифровки)
	Если ТипЗнч(МассивРасшифровки) = Тип("Строка") Тогда 
		МассивПолейРасшифровки = ПолучитьИзВременногоХранилища(МассивРасшифровки);
	КонецЕсли;
	Если Не (ТипЗнч(МассивПолейРасшифровки) = Тип("Массив")) ИЛИ (ТипЗнч(МассивПолейРасшифровки) = Тип("Массив") И МассивПолейРасшифровки.Количество() = 0) Тогда
		Возврат;	
	КонецЕсли; 
	
	УдалитьГруппировку(КомпоновщикНастроек);
	УдалитьВыбранноеПоле(КомпоновщикНастроек);
	
	ДобавитьГруппировку(КомпоновщикНастроек, "Статья");
	ДобавитьГруппировку(КомпоновщикНастроек, "Документ");
	
	
	//СтрокаГруппировки = ПараметрыОтчета.Группировка.Добавить();
	//СтрокаГруппировки.Использование = Истина;
	//СтрокаГруппировки.Поле = "Статья";
	//СтрокаГруппировки.Представление = "Статья";
	//СтрокаГруппировки = ПараметрыОтчета.Группировка.Добавить();
	//СтрокаГруппировки.Использование = Истина;
	//СтрокаГруппировки.Поле = "Документ";
	//СтрокаГруппировки.Представление = "Документ";
			
	//Для каждого ЭлементСтруктуры Из Настройки.Структура Цикл
	//
	//	Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
	//		Таблица = ЭлементСтруктуры;
	//		Прервать;
	//	КонецЕсли; 	
	//
	//КонецЦикла; 
	//
	//Если Таблица <> Неопределено Тогда
	//    Таблица.Строки.Очистить();
	//	СтрокаГруппировки = Таблица.Строки.Добавить();	
	//	СтрокаГруппировки.Использование = Истина;
	//	СтрокаГруппировки.Состояние =  СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
	//	ПолеГруппировки = СтрокаГруппировки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//	ПолеГруппировки.Использование = Истина;
	//	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Статья");
	//	
	//	СтрокаГруппировки1 = СтрокаГруппировки.Структура.Добавить();	
	//	СтрокаГруппировки1.Использование = Истина;
	//	СтрокаГруппировки1.Состояние =  СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
	//	ПолеГруппировки = СтрокаГруппировки1.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//	ПолеГруппировки.Использование = Истина;
	//	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Документ");
	//КонецЕсли;

	
	ИмяРесурса = МассивПолейРасшифровки[0].Поле;
		
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ИмяРесурса);
	
	Для каждого ЭлементРасшифровки Из МассивПолейРасшифровки Цикл
		
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;

		Поле 		= ЭлементРасшифровки.Поле;
		Значение 	= ЭлементРасшифровки.Значение;
			
		Если Поле = ИмяРесурса Тогда
			Продолжить;		
		КонецЕсли; 
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, Поле, Значение);
	
	КонецЦикла; 

КонецПроцедуры

Функция УдалитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если Поле = Неопределено Тогда
		ВыбранныеПоля.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ПолеУдалено = Ложь;
	Элементы = ПолучитьВыбранныеПоля(ВыбранныеПоля);
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.Использование И Элемент.Поле = Поле Тогда
			Элемент.Использование = Ложь;
			ПолеУдалено = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ПолеУдалено;
	
КонецФункции

Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	ДобавитьВыбранныеПоляВМассивДляПоказателей(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьВыбранныеПоляВМассивДляПоказателей(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь)
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			Если Элемент.Использование тогда
				ДобавитьВыбранныеПоляВМассивДляПоказателей(Элемент.Элементы, МассивПолей, ТолькоГруппы);
			КонецЕсли;
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина)
	
	ЭлементСтруктуры = Неопределено;
	
	Если ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
		Если ЭлементСтруктуры = Неопределено 
			ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
			И Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроек) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") 
		тогда
		Если ТипЗнч(КомпоновщикНастроек) = Тип("ТаблицаКомпоновкиДанных") тогда 
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Строки; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Колонки; 
			КонецЕсли;
		ИначеЕсли ТипЗнч(КомпоновщикНастроек) = Тип("ДиаграммаКомпоновкиДанных") тогда
			Если Строки тогда 
				ЭлементСтруктуры = КомпоновщикНастроек.Серии; 
			Иначе
				ЭлементСтруктуры = КомпоновщикНастроек.Точки; 
			КонецЕсли;
		Иначе
			ЭлементСтруктуры = КомпоновщикНастроек; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

Функция ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки = Истина) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции


Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
	
	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат ПоследнийЭлементСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция УдалитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Элемент = КомпоновщикНастроек.Настройки.Структура[0];
	Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Строки.Количество() > 0 Тогда
			Элемент = Элемент.Строки[0];
		ИначеЕсли Не Строки И Элемент.Колонки.Количество() > 0 Тогда
			Элемент = Элемент.Колонки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Серии.Количество() > 0 Тогда
			Элемент = Элемент.Серии[0];
		ИначеЕсли Не Строки И Элемент.Точки.Количество() > 0 Тогда
			Элемент = Элемент.Точки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Поле = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	Пока Истина Цикл
		Если Элемент.ПоляГруппировки.Элементы.Количество() > 0 
			И Элемент.ПоляГруппировки.Элементы[0].Поле = Поле Тогда
			Элемент.Родитель.Структура.Очистить();
			Прервать;
			Возврат Истина;
		ИначеЕсли Элемент.Структура.Количество() > 0 Тогда
			Элемент = Элемент.Структура[0];
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции


// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	//ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
		
	Настройки = КомпоновщикНастроек.Настройки;
	
	Если ПараметрыОтчета.Свойство("МассивПолейРасшифровки") И ПараметрыОтчета.МассивПолейРасшифровки <> Неопределено Тогда
		ДоработатьНастройкиКомпоновкиДляРасшифровки(КомпоновщикНастроек, ПараметрыОтчета.МассивПолейРасшифровки);	
	КонецЕсли;
	
	ПараметрыДанных = Настройки.ПараметрыДанных;
	
	ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий", 				СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("ОперативныйСценарийПланирования"));
	//ПараметрыДанных.УстановитьЗначениеПараметра("БанковскиеСчетаДепозит", 	СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("БанковскиеСчетаДепозит"));
	//ПараметрыДанных.УстановитьЗначениеПараметра("ВалютаРегл", 				Константы.ВалютаРегламентированногоУчета.Получить());
	
	ПараметрыДанных.УстановитьЗначениеПараметра("Пользователь_Подготовил", 	ПользователиКлиентСервер.ТекущийПользователь());
	ПараметрыДанных.УстановитьЗначениеПараметра("Пользователь_Утвердил", 	СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Отчеты_Пользователь_Утверждает"));
	
	//ВидОтчета 			= ПараметрыОтчета.ВидОтчета;//ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидОтчета")).Значение;
	ВариантГруппировки 	= ПараметрыОтчета.Группировка1;//ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Группировка")).Значение;
	ПериметрКонсолидации = ПараметрыОтчета.ПериметрКонсолидации;
	Период				= ПараметрыОтчета.Период;//ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")).Значение;
	Организация			= ПараметрыОтчета.Организация;//ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация")).Значение;
	
	//БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидОтчета", ВидОтчета);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Группировка1", ВариантГруппировки);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериметрКонсолидации", ПериметрКонсолидации);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", Период);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", Организация);
	
	//Если ВидОтчета = 0 Тогда
	//	//Это план ДДС
	//	ПроверитьРеестрыПлатежей(Период, Организация);
	//КонецЕсли; 
	
	//Вариант группировки - это глубина группировки
	// 0 - Валюта
	// 1 - Банк
	// 2 - Банковский счет
	Если ВариантГруппировки = 0 Тогда 
		ОтображаемаяГруппировка = "Валюта";
	ИначеЕсли ВариантГруппировки = 1 Тогда
		ОтображаемаяГруппировка = "Банк";
	Иначе
		ОтображаемаяГруппировка = "БанковскийСчет";
	КонецЕсли;
	
	Таблица = Неопределено;
	
	Для каждого ЭлементСтруктуры Из Настройки.Структура Цикл
	
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Таблица = ЭлементСтруктуры;
			Прервать;
		КонецЕсли; 	
	
	КонецЦикла; 
	
	Если Таблица <> Неопределено Тогда
	
		Для каждого ГруппировкаКолонки Из Таблица.Колонки Цикл
			
			Если ГруппировкаКолонки.Имя = "ОбщийИтог" Тогда
				Продолжить;	
			КонецЕсли; 
			
			Если ГруппировкаКолонки.Имя = ОтображаемаяГруппировка Тогда
				ГруппировкаКолонки.Использование = Истина;
			Иначе
				ГруппировкаКолонки.Использование = Ложь;
			КонецЕсли; 
			
		КонецЦикла; 
	
	КонецЕсли;
			
			
	// Группировка
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	

	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;

	Возврат НаборПоказателей;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
Функция ПрочитатьТаблицуПоказателей()
	
	Макет = ПолучитьМакет("Показатели");
	
	//1 - Заголовок	
	//2 - Идентификатор	
	//3 - Порядок	
	//4 - ИД_УО
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Заголовок");
	Показатели.Колонки.Добавить("Идентификатор");
	Показатели.Колонки.Добавить("Порядок");
	Показатели.Колонки.Добавить("ИД_УО");
	
	НомерСтроки = 2;
	
	Пока Истина Цикл
		
		Если Макет.Область(НомерСтроки, 3).Текст = "" Тогда
			Прервать;
		КонецЕсли; 
		
		ПоказательСтрока = Показатели.Добавить();
		ПоказательСтрока.Заголовок 		= Макет.Область(НомерСтроки, 1).Текст;
		ПоказательСтрока.Идентификатор 	= Макет.Область(НомерСтроки, 2).Текст;
		ПоказательСтрока.Порядок 		= Макет.Область(НомерСтроки, 3).Текст;
		ПоказательСтрока.ИД_УО 			= Макет.Область(НомерСтроки, 4).Текст;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла; 
	
	Возврат Показатели;

КонецФункции

Функция ПрочитатьАлгоритмыПоказателей(ПлановыеДанные)

	Макет = ПолучитьМакет("Алгоритмы");
	
	//1 - Идентификатор	
	//2 - ПЛАН_Статья/Алгоритм	
	//3 - ФАКТ_Статья/Алгоритм	
	//4 - Знак	
	//5 - Приоритет	
	//6 - Показатель
	//7 - УчитыватьЗнакСтатьи
	//8 - Важность
	//9 - Знак вывода
	
	Алгоритмы = Новый ТаблицаЗначений;
	Алгоритмы.Колонки.Добавить("Идентификатор");
	Алгоритмы.Колонки.Добавить("Алгоритм");
	Алгоритмы.Колонки.Добавить("Знак");
	Алгоритмы.Колонки.Добавить("УчитыватьЗнакСтатьи");
	Алгоритмы.Колонки.Добавить("Важность");
	Алгоритмы.Колонки.Добавить("ЗнакВывода");
	
	//Алгоритмы.Индексы.Добавить("Идентификатор");
	
	НомерКолонкиСАлгоритмом = ?(ПлановыеДанные, 2, 3);
	
	Для НомерПрохода = 0 По 4 Цикл
		
		ПриоритетВыборки = Формат(НомерПрохода, ""); 
		НомерСтроки 		= 1;
		
		Пока Истина Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если Макет.Область(НомерСтроки, 1).Текст = "" Тогда
				Прервать;
			КонецЕсли; 
			
			ТекущийПриоритет = Макет.Область(НомерСтроки, 5).Текст;
			Если ПриоритетВыборки <> ТекущийПриоритет Тогда
				Продолжить;			
			КонецЕсли; 
			
			Идентификатор 	= Макет.Область(НомерСтроки, 1).Текст;
			Алгоритм 		= Макет.Область(НомерСтроки, НомерКолонкиСАлгоритмом).Текст;
			Знак			= ?(Макет.Область(НомерСтроки, 4).Текст = "-", -1, 1);
			
						
			Если ПустаяСтрока(Алгоритм) И ТекущийПриоритет <> "" Тогда
				
				//Расчетный показатель
				
				Показатель = Макет.Область(НомерСтроки, 6).Текст;
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Идентификатор", Показатель);
				
				НайденныеАлгоритмы = Алгоритмы.НайтиСтроки(СтруктураПоиска);
				Для каждого АлгоритмПоказателяСтрока Из НайденныеАлгоритмы Цикл
					
					АлгоритмСтрока = Алгоритмы.Добавить();
					АлгоритмСтрока.Идентификатор 		= Идентификатор;
					АлгоритмСтрока.Алгоритм 			= АлгоритмПоказателяСтрока.Алгоритм;
					АлгоритмСтрока.Знак 				= АлгоритмПоказателяСтрока.Знак * Знак;
					АлгоритмСтрока.УчитыватьЗнакСтатьи 	= АлгоритмПоказателяСтрока.УчитыватьЗнакСтатьи;
					АлгоритмСтрока.Важность 			= АлгоритмПоказателяСтрока.Важность;
					АлгоритмСтрока.ЗнакВывода 			= АлгоритмПоказателяСтрока.ЗнакВывода;
				
				КонецЦикла; 
				
			Иначе
				
				АлгоритмСтрока = Алгоритмы.Добавить();
				АлгоритмСтрока.Идентификатор 		= Идентификатор;
				АлгоритмСтрока.Алгоритм 			= Алгоритм;
				АлгоритмСтрока.Знак 				= Знак;
				Если ПлановыеДанные Тогда
					АлгоритмСтрока.УчитыватьЗнакСтатьи 	= ?(Макет.Область(НомерСтроки, 7).Текст = "1", Истина, Ложь);
					АлгоритмСтрока.Важность 			= Макет.Область(НомерСтроки, 8).Текст;
					АлгоритмСтрока.ЗнакВывода 			= 1;
				Иначе
					АлгоритмСтрока.УчитыватьЗнакСтатьи 	= Ложь;
					АлгоритмСтрока.Важность 			= "";
					АлгоритмСтрока.ЗнакВывода 			= ?(Макет.Область(НомерСтроки, 9).Текст = "-", -1, 1);
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; 
	
	Возврат Алгоритмы;

КонецФункции // ()

Функция ПрочитатьОстаткиПоОвердафту(ОстаткиПоОвердрафту)

	Если ОстаткиПоОвердрафту.Количество() = 0 Тогда
		
		ТаблицаОстаткиПоОвердрафту = Новый ТаблицаЗначений;
		ТаблицаОстаткиПоОвердрафту.Колонки.Добавить("Банк");
		ТаблицаОстаткиПоОвердрафту.Колонки.Добавить("БанковскийСчет");
		ТаблицаОстаткиПоОвердрафту.Колонки.Добавить("Валюта");
		ТаблицаОстаткиПоОвердрафту.Колонки.Добавить("Сумма");
		ТаблицаОстаткиПоОвердрафту.Колонки.Добавить("Алгоритм");
		
		Возврат ТаблицаОстаткиПоОвердрафту;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧ.БанковскийСчет,
	|	ТЧ.ВалютнаяСумма
	|ПОМЕСТИТЬ ОстаткиПоОвердрафту
	|ИЗ
	|	&ОстаткиПоОвердрафту КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Банк,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК Валюта,
	|	ОстаткиПоОвердрафту.БанковскийСчет,
	|	ОстаткиПоОвердрафту.ВалютнаяСумма КАК Сумма,
	|	""Овердрафт"" КАК Алгоритм
	|ИЗ
	|	ОстаткиПоОвердрафту КАК ОстаткиПоОвердрафту
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ОстаткиПоОвердрафту.БанковскийСчет = БанковскиеСчета.Ссылка";
	
	Запрос.УстановитьПараметр("ОстаткиПоОвердрафту", ОстаткиПоОвердрафту);
		
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции // ()

Процедура ПроверитьРеестрыПлатежей(Период, Организация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бит_РеестрПлатежей.Ссылка,
	|	бит_РеестрПлатежей.Представление
	|ИЗ
	|	Документ.бит_РеестрПлатежей КАК бит_РеестрПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_УстановленныеВизы КАК бит_УстановленныеВизы
	|		ПО бит_УстановленныеВизы.Объект = бит_РеестрПлатежей.Ссылка
	|			И (бит_УстановленныеВизы.Виза = &ВизаБухгалтер)
	|			И (бит_УстановленныеВизы.Решение = &Решение_Согласовано)
	|ГДЕ
	|	бит_РеестрПлатежей.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И бит_РеестрПлатежей.Организация = &Организация
	|	И 	бит_РеестрПлатежей.СБ_ВидДокумента В (ЗНАЧЕНИЕ(Перечисление.СБ_ВидыРеестраПлатежа.Основной), ЗНАЧЕНИЕ(Перечисление.СБ_ВидыРеестраПлатежа.Обеспечивающий))
	|	И бит_УстановленныеВизы.Объект ЕСТЬ NULL ";

	Запрос.УстановитьПараметр("НачалоДня", 				НачалоДня(Период));
	Запрос.УстановитьПараметр("КонецДня", 				КонецДня(Период));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("ВизаБухгалтер",  		СБ_КазначействоПовтИсп.ПолучитьЗначениеКонстанты("Виза_БухгалтерБК"));
	Запрос.УстановитьПараметр("Решение_Согласовано",    Справочники.бит_ВидыРешенийСогласования.Согласовано);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Сообщить("Не согласован (ы) документ (ы):");
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Сообщить(" - " + Выборка.Представление);
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Показатели", 				ПрочитатьТаблицуПоказателей());
	ВнешниеНаборыДанных.Вставить("Алгоритмы", 				ПрочитатьАлгоритмыПоказателей(ПараметрыОтчета.ВидОтчета = 0));
	ВнешниеНаборыДанных.Вставить("ОстаткиПоОвердрафту", 	ПрочитатьОстаткиПоОвердафту(ПараметрыОтчета.ОстаткиПоОвердрафту));
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

//Процедура ОбъединитьЯчейкиПоЯкорю(ДокументРезультат)
//	
//	Якорь = "%@#";
//	
//	НачальнаяОбласть 	= Неопределено;
//	
//	Пока Истина Цикл
//		
//		НачальнаяОбласть 	= ДокументРезультат.НайтиТекст(Якорь,НачальнаяОбласть,,,);
//		Если НачальнаяОбласть = Неопределено Тогда
//			Прервать;
//		КонецЕсли; 
//		
//		ИскомыйТекст = НачальнаяОбласть.Текст;	
//		
//		ПерваяСтрока 		= НачальнаяОбласть.Верх;
//		ПерваяКолонка 		= НачальнаяОбласть.Лево;
//		
//		ПоследняяСтрока 	= ПерваяСтрока;
//		ПоследняяКолонка 	= ПерваяКолонка;
//		
//		Пока Истина Цикл
//			
//			ПоследняяКолонка = ПоследняяКолонка + 1;
//			
//			Если ДокументРезультат.Область(ПерваяСтрока, ПоследняяКолонка).Текст <> ИскомыйТекст Тогда
//				ПоследняяКолонка = ПоследняяКолонка - 1;
//				Прервать;		
//			КонецЕсли; 
//			
//		КонецЦикла; 
//		
//		Текст = СтрЗаменить(ИскомыйТекст, Якорь, "");
//		
//		ИскомаяОбласть = ДокументРезультат.Область(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);
//		ИскомаяОбласть.Объединить();
//		
//		ИскомаяОбласть.Текст = Текст;
//		
//	КонецЦикла; 
//	
//КонецПроцедуры

//Процедура УдалитьПустуюКолонку(ДокументРезультат)

//	ЗаголовокПустойКолонки = "?ПустойБанк?";
//	
//	НачальнаяОбласть 	= ДокументРезультат.НайтиТекст(ЗаголовокПустойКолонки,,,,);
//	Если НачальнаяОбласть = Неопределено Тогда
//		Возврат;
//	КонецЕсли; 
//	
//	ИскомаяОбласть = ДокументРезультат.Область(НачальнаяОбласть.Верх, НачальнаяОбласть.Лево, ДокументРезультат.ВысотаТаблицы, НачальнаяОбласть.Лево);	
//	ДокументРезультат.УдалитьОбласть(ИскомаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);

//КонецПроцедуры

#КонецЕсли