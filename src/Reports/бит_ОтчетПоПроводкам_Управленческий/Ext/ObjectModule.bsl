#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Текущий вариант отчета.
  
Перем МаксКоличествоСубконто Экспорт; // Хранит максимальное количество субконто плана счетов регистра бухгалтерии.

Перем ИмяПланаСчетов; // Хранит имя плана счетов.

Перем Линия; // Хранит тип линии.

Перем ЛинияЖирная; // Хранит тип жирной линии.

Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

Перем мСписокРегистров Экспорт; // Хранит список регистров бухгалтерии управленческого учета.

Перем мПрограммноеОткрытие Экспорт; // Хранит значение программного открытия отчета.

Перем мЕстьРесурсСуммаМУ Экспорт; // Хранит подтверждение наличия ресурса "СуммаМУ".

Перем ЕстьВалюта Экспорт; // Хранить признак наличия валюты.

Перем ЕстьКоличество Экспорт; // Хранить признак наличия количества.

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура выполняет сохранение настроек отчета.
// 
// Параметры:
//  Нет
// 
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("БезУчетаРегистра");
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
// Параметры:
//  Нет
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина);
	
	// Заполним переменные отчета значения которых зависят от выбранного регистра бухгалтерии.
	ЗаполнитьПеременныеОтчетаСвязанныеСРегистромБухгалтерии();
	
КонецПроцедуры // ПрименитьНастройку()

// Процедура заполняет настройки построителя отчетов.
// 
// Параметры:
//  ПеременныеЗаполнены - Булево (По умолчанию = Ложь).
// 
Процедура ЗаполнитьНачальныеНастройки(ПеременныеЗаполнены = Ложь) Экспорт
	
	ИмяРегистраБухгалтерии = РегистрБухгалтерии.ИмяОбъекта;
	
	Если Не ПеременныеЗаполнены Тогда
		// Заполним переменные отчета значения которых зависят от выбранного регистра бухгалтерии.
		ЗаполнитьПеременныеОтчетаСвязанныеСРегистромБухгалтерии();
	КонецЕсли;
	
    МассивПоказателей = СформироватьМассивПоказателей();
    
	ТекстЗапроса = ПолучитьТекстЗапроса(МассивПоказателей);
    
    // Установим текст построителя отчета для
    // возможности установления отбора.
    ПостроительОтчета.Текст = ТекстЗапроса;
    
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек.
// 
// Параметры:
//  Нет
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

// Функция формирует заголовок отчета (синоним).
// 
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//  Строка
// 
Функция ЗаголовокОтчета() Экспорт
	
	ПредставлениеРегистра = бит_ПраваДоступа.ПолучитьПредставлениеОбъектаСистемыИзСпискаЗначений(мСписокРегистров, РегистрБухгалтерии);
	
	ТекстЗаголовка = Нстр("ru = 'Отчет по проводкам (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра);
		
    Возврат ТекстЗаголовка;
    
КонецФункции // ЗаголовокОтчета()

// Выводит шапку отчета
// 
// Параметры:
// 	Нет
// 
// Возвращаемое значение:
//  ТабличныйДокумент
// 
Функция СформироватьЗаголовок() Экспорт

    ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);
	
	Макет = ПолучитьМакет("Макет");
	
	ЗаголовокОтчета  = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок = Макет.Область("Заголовок");
	
	// После удаления областей нужно установить свойства ПоВыделеннымКолонкам.
	Для Сч = 1 По ЗаголовокОтчета.ВысотаТаблицы - 1 Цикл
		
		Макет.Область(ОбластьЗаголовок.Верх + Сч, 2, ОбластьЗаголовок.Верх + Сч, 2).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Макет.Область(ОбластьЗаголовок.Верх + Сч, 2, ОбластьЗаголовок.Верх + Сч, ОбластьЗаголовок.Право).ПоВыделеннымКолонкам = Истина;
		
	КонецЦикла;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = бит_БухгалтерскиеОтчетыСервер.ПолучитьПолноеНазваниеОрганизации(Организация);
		
	ОписаниеНастроек = ПолучитьОписаниеНастроек();
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ЗаголовокОтчета.Параметры.Заголовок 		  = ЗаголовокОтчета();
	ЗаголовокОтчета.Параметры.ОписаниеПериода  	  = ОписаниеПериода;
	ЗаголовокОтчета.Параметры.ОписаниеНастроек    = ОписаниеНастроек;
    
    ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
	КонецЕсли;
	Если мЕстьРесурсСуммаМУ И ВыводитьСуммуМУ Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (МСФО)'");
	КонецЕсли;
    
    ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'количество, валютная сумма'");
    
    ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстСписокПоказателей;
	
	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()

// Функция выполняет формирование отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина).
//  ВысотаЗаголовка     - Число (По умолчанию = 0).
// 
// Возвращаемое значение:
//  Булево.
// 
Функция СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Очистка табличного поля
	ДокументРезультат.Очистить();
	
	// Проверим наличие ресурса с именем "СуммаМУ".
	мЕстьРесурсСуммаМУ = бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;
		
		// Вывод заголовка отчета
		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	    		
	    МассивПоказателей = СформироватьМассивПоказателей();
	    
		Запрос = Новый Запрос();
		//Запрос.Текст = ПолучитьТекстЗапроса(МассивПоказателей);
		Запрос.Текст = ПолучитьТекстЗапроса(МассивПоказателей,Запрос);
		
		УстановитьПараметрыЗапроса(Запрос);

		// Состояние("Выполнение запроса");
		Результат = Запрос.Выполнить();
		
		Макет = ПолучитьМакет("Макет");

		ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
		ДокументРезультат.Вывести(ОбластьШапки, 1);
		
		ОблСтрока           = Макет.ПолучитьОбласть("Строка");
		ОблСтрокаСубконто   = Макет.ПолучитьОбласть("СтрокаСубконто");
		ОблСтрокаКоличество = Макет.ПолучитьОбласть("СтрокаКоличество");
		ОблСтрокаВалюта     = Макет.ПолучитьОбласть("СтрокаВалюта");
		ОблИтого            = Макет.ПолучитьОбласть("Итого");
	    
	    // Сформируем структуру сумм для подсчета итогов.
	    СтруктураСумм = Новый Структура;
	    
	    Для Каждого ТекРесурс Из МассивПоказателей Цикл
	        СтруктураСумм.Вставить(ТекРесурс + "Итого", 0);
	    КонецЦикла;
	    
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			
			Если бит_БухгалтерскиеОтчетыСервер.ОпределитьНеобходимоПропуститьСтрокуПриВыводеДанных(Выборка, ПоПодстрокеСодержание, ПоПодстрокеСубконто,
				БезУчетаРегистра, Подстрока, МаксКоличествоСубконто) Тогда
				
				Продолжить;
				
			КонецЕсли;
				
			Расшифровка = Новый Структура;
			Расшифровка.Вставить("Регистратор", Выборка.Регистратор);
			Расшифровка.Вставить("НомерСтроки", Выборка.НомерСтроки);
				
			ОблСтрока.Параметры.Заполнить(Выборка);
	        
	        СоотвИменПараметров = Новый Соответствие;
	        СоотвИменПараметров.Вставить("ПустойКлюч", "Сумма");
	        
	        // Заполним параметры области,
	        // вывели старые обороты. 
	        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОблСтрока, Выборка, МассивПоказателей, 
	                                                                                    "ПустойКлюч", , СоотвИменПараметров);
	        
			ОблСтрока.Параметры.СубконтоДт = Выборка.СубконтоДт1;
			ОблСтрока.Параметры.СубконтоКт = Выборка.СубконтоКт1;
			ОблСтрока.Параметры.Расшифровка = Расшифровка;
			ДокументРезультат.Вывести(ОблСтрока, 1);
			
			УжеВыведено = 1;
	        
	        Для Каждого ТекРесурс Из МассивПоказателей Цикл
	            
	            ИмяКлюча = ТекРесурс + "Итого";
	            СтруктураСумм[ИмяКлюча] = СтруктураСумм[ИмяКлюча] + Выборка[ТекРесурс];
	            
	        КонецЦикла;
				
			НачалоСекции = ДокументРезультат.ВысотаТаблицы;
				
			КолвоСубконтоДт = ?(Выборка.КолвоСубконтоДт <> NULL, Выборка.КолвоСубконтоДт, 0);
			КолвоСубконтоКт = ?(Выборка.КолвоСубконтоКт <> NULL, Выборка.КолвоСубконтоКт, 0);
				
			КолвоСтрокСубконто = Макс(КолвоСубконтоДт, КолвоСубконтоКт);
				
			ЕстьВалюта = Выборка.ВалютныйДт       Или Выборка.ВалютныйКт;
			ЕстьКолво  = Выборка.КоличественныйДт Или Выборка.КоличественныйКт;
				
			КолвоСтрокПрочих = 1 + ?(ЕстьВалюта, 1, 0) + ?(ЕстьКолво, 1, 0);
				
			ВыводитьСтрокСубконто = КолвоСтрокСубконто - КолвоСтрокПрочих;
			ВсегоСтрок 			  = Макс(КолвоСтрокСубконто, КолвоСтрокПрочих);
				
			Если УжеВыведено < ВсегоСтрок Тогда
				ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, ,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
			КонецЕсли;
				
			Для н = 1 По ВыводитьСтрокСубконто Цикл
				
				ОблСтрокаСубконто.Параметры.СубконтоДт = Выборка["СубконтоДт" + Строка(1 + н)];
				ОблСтрокаСубконто.Параметры.СубконтоКт = Выборка["СубконтоКт" + Строка(1 + н)];
					
				ОблСтрокаСубконто.Параметры.Расшифровка = Расшифровка;
					
				ДокументРезультат.Вывести(ОблСтрокаСубконто, 1);
					
				УжеВыведено = УжеВыведено + 1;
					
				Если УжеВыведено < ВсегоСтрок Тогда
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы,,ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
				КонецЕсли;
					
			КонецЦикла;
				
			Если ЕстьКолво Тогда
					
				ОблСтрокаКоличество.Параметры.КоличествоДт = Выборка.КоличествоДт;
				ОблСтрокаКоличество.Параметры.КоличествоКт = Выборка.КоличествоКт;
				ОблСтрокаКоличество.Параметры.СубконтоДт  = Выборка["СубконтоДт" + Строка(УжеВыведено + 1)];
				ОблСтрокаКоличество.Параметры.СубконтоКт  = Выборка["СубконтоКт" + Строка(УжеВыведено + 1)];
					
				ОблСтрокаКоличество.Параметры.Расшифровка = Расшифровка;
					
				ДокументРезультат.Вывести(ОблСтрокаКоличество, 1);
					
				УжеВыведено = УжеВыведено + 1;
					
				Если УжеВыведено < ВсегоСтрок Тогда
					ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы, , ДокументРезультат.ВысотаТаблицы).ВместеСоСледующим = Истина;
				КонецЕсли;
					
			КонецЕсли;
				
			Если ЕстьВалюта Тогда
					
				ОблСтрокаВалюта.Параметры.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
				ОблСтрокаВалюта.Параметры.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
					
				ОблСтрокаВалюта.Параметры.ВалютаДт = Выборка.ВалютаДт;
				ОблСтрокаВалюта.Параметры.ВалютаКт = Выборка.ВалютаКт;
					
				ОблСтрокаВалюта.Параметры.СубконтоДт  = Выборка["СубконтоДт" + Строка(УжеВыведено + 1)];
				ОблСтрокаВалюта.Параметры.СубконтоКт  = Выборка["СубконтоКт" + Строка(УжеВыведено + 1)];
					
				ОблСтрокаВалюта.Параметры.Расшифровка = Расшифровка;
					
				ДокументРезультат.Вывести(ОблСтрокаВалюта, 1);
					
			КонецЕсли;
				
			бит_БухгалтерскиеОтчетыСервер.ОбвестиОбластиОтчета(ДокументРезультат, НачалоСекции, Линия, ЛинияЖирная);
			
		КонецЦикла;

	    ТекстСуммаИтого = "";
	    
	    Для Каждого ТекРесурс Из МассивПоказателей Цикл
	        
	        ТекСумма    	= СтруктураСумм[ТекРесурс + "Итого"];
	        СтрокаСумма 	= Формат(ТекСумма, "ЧЦ=15; ЧДЦ=2");
	        ТекстСуммаИтого = ТекстСуммаИтого + ?(ПустаяСтрока(ТекстСуммаИтого), "", Символы.ПС) + СтрокаСумма;
	        
	    КонецЦикла;
	    
		ОблИтого.Параметры.Сумма = ТекстСуммаИтого;
		ДокументРезультат.Вывести(ОблИтого);
		
		// Зафиксируем заголовок отчета
		ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 1;

		// Шапку таблицы печатаем на всех страницах
		ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка + 1, , ВысотаЗаголовка + 1);
		
		// Первую колонку не печатаем
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы + 1, ДокументРезультат.ШиринаТаблицы);
		
		// Печатать отчет будем ландшафтом
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		// Присвоим имя для сохранения параметров печати табличного документа.
		ДокументРезультат.КлючПараметровПечати = "ОтчетПоПроводкам " + ИмяРегистраБухгалтерии;

		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
	
	КонецЕсли;

	Возврат ОтчетСформирован;
	
КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//  Массив
// 
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
	
	Если мЕстьРесурсСуммаМУ И ВыводитьСуммуМУ Тогда 
        МассивПоказателей.Добавить("СуммаМУ");
    КонецЕсли;
	
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

// Процедура заполняет переменные отчета значения которых зависят
// от выбранного регистра бухгалтерии.
// 
// Параметры:
//  Нет
// 
Процедура ЗаполнитьПеременныеОтчетаСвязанныеСРегистромБухгалтерии() Экспорт
	
	ИмяПланаСчетов = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя;
	
	МаксКоличествоСубконто = Метаданные.ПланыСчетов[ИмяПланаСчетов].МаксКоличествоСубконто;
	
	// бит_БухгалтерскиеОтчетыСервер.СоздатьКолонкиОграниченийДляКорреспонденцииПланаСчетов(
	// 		Корреспонденции, ИмяПланаСчетов);
	
КонецПроцедуры // ЗаполнитьПеременныеОтчетаСвязанныеСРегистромБухгалтерии()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура Формирования текста запроса на основании настроек пользователя.
// 
// Параметры
//  МассивПоказателей - Массив.
// 
// Возвращаемое значение:
//   Текст - Текст запроса.
// 
//Функция ПолучитьТекстЗапроса(МассивПоказателей)
Функция ПолучитьТекстЗапроса(МассивПоказателей,Запрос=Неопределено)
    
    ТекстПолейРесурсов = "";
    
    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
        ТекстПолейРесурсов = ТекстПолейРесурсов + "
                             |	 Проводки." + ТекПоказатель + ",";
    КонецЦикла;
    
	ТекстЗапроса = "";
	
	ТекстПолей = 
	"
	|	Проводки.Период,
	|	Проводки.НомерСтроки,
	|	Проводки.Регистратор,
	|	Проводки.ВалютаДт,
	|	Проводки.ВалютаКт,
	|	" + ТекстПолейРесурсов + "
	|	Проводки.ВалютнаяСуммаДт,
	|	Проводки.ВалютнаяСуммаКт,
	|	Проводки.КоличествоДт,
	|	Проводки.КоличествоКт,
	|	Проводки.Содержание,
	|	Проводки.НомерЖурнала,
	|	Проводки.СчетДт,
	|	Проводки.СчетКт";
	
	СтрокаОграниченийПоРеквизитам = "Активность = ИСТИНА";
	
	бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоОрганизации(СтрокаОграниченийПоРеквизитам, Организация, ОрганизацияВидСравнения, ОрганизацияИспользование);
		
	Если ОтборПоВалюте Тогда
		СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "Валюта = &Валюта");
	КонецЕсли;
	
	Если ПоНомеруЖурнала Тогда
		СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "НомерЖурнала = &НомерЖурнала");
	КонецЕсли;
	
	Если ПоРегистратору Тогда
		СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "Регистратор = &Регистратор");
	КонецЕсли;
    
    ТекстФильтры = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Новый Запрос);
	СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
    
    ТекстДопОтбор = "";
	ТекстДопОтбор = ТекстДопОтбор + 
	"{(Счет).* КАК Счет, (КорСчет).* КАК КорСчет 
	|,(Субконто1).* КАК Субконто1, (Субконто2).* КАК Субконто2, (Субконто3).* КАК Субконто3, (Субконто4).* КАК Субконто4
	|,(КорСубконто1).* КАК КорСубконто1, (КорСубконто2).* КАК КорСубконто2, (КорСубконто3).* КАК КорСубконто3, (КорСубконто4).* КАК КорСубконто4 
	|,(ВидСубконто1) КАК ВидСубконто1, (ВидСубконто2) КАК ВидСубконто2, (ВидСубконто3) КАК ВидСубконто3, (ВидСубконто4) КАК ВидСубконто4 
	|,(ВидКорСубконто1) КАК ВидКорСубконто1, (ВидКорСубконто2) КАК ВидКорСубконто2, (ВидКорСубконто3) КАК ВидКорСубконто3, (ВидКорСубконто4) КАК ВидКорСубконто4
	|}";
    
	ТекстСубконто = "";
	
	Для н = 1 По МаксКоличествоСубконто Цикл
		ТекстСубконто = ТекстСубконто + "," + Символы.ПС + "	Проводки.СубконтоДт" + н + " КАК СубконтоДт" + н;
		ТекстСубконто = ТекстСубконто + "," + Символы.ПС + "	Проводки.СубконтоКт" + н + " КАК СубконтоКт" + н;
	КонецЦикла;
	
	Если Корреспонденции.Количество() > 0 Тогда
		
		// Цикл по таблице корреспонденций
		Для каждого СтрокаКорреспонденции Из Корреспонденции Цикл
			
			НомерСтроки = Корреспонденции.Индекс(СтрокаКорреспонденции) + 1;
			
			ТекстОтбораСчетов = "";
			Если ЗначениеЗаполнено(СтрокаКорреспонденции.СчетДт) Тогда
				ТекстОтбораСчетов = ТекстОтбораСчетов+" И СчетДт В ИЕРАРХИИ(&СчетДт" + НомерСтроки + ")";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаКорреспонденции.СчетКт) Тогда
				ТекстОтбораСчетов = ТекстОтбораСчетов+" И СчетКт В ИЕРАРХИИ(&СчетКт" + НомерСтроки + ")";
			КонецЕсли;
			
			// Отбор по субконто счетов корреспонденции
			ТекстОтбораСубконто = "";
			// Цикл по таблице "Субконто" - элемента строки корреспонденции.
			Для каждого СтрокаОтбораСубконто Из СтрокаКорреспонденции.Субконто Цикл
				
				НомерОтбора = "" + НомерСтроки + "_" + (СтрокаКорреспонденции.Субконто.Индекс(СтрокаОтбораСубконто) + 1);
				
				Если ЗначениеЗаполнено(СтрокаКорреспонденции.СчетДт) ИЛИ ЗначениеЗаполнено(СтрокаКорреспонденции.СчетКт) Тогда
					ИмяВидаСубконта     = Сред(СтрокаОтбораСубконто.ПутьКДанным, 0, Найти(СтрокаОтбораСубконто.ПутьКДанным, ".") - 1);
					ТекстОтбораСубконто = ТекстОтбораСубконто + " И Вид" + ИмяВидаСубконта + " = &Вид" + ИмяВидаСубконта + "_" + НомерСтроки; 
				КонецЕсли;
				
				ТекстОтбораСубконто = ТекстОтбораСубконто 
										+ " И " 
										+ бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(СтрокаОтбораСубконто.ВидСравнения
																							, "&Значение" + НомерОтбора
																							, СтрокаОтбораСубконто.ПутьКДанным
																							, "&ЗначениеС" + НомерОтбора
																							, "&ЗначениеПо" + НомерОтбора
																							, СтрокаОтбораСубконто.Значение
																							, СтрокаОтбораСубконто.ЗначениеС
																							, СтрокаОтбораСубконто.ЗначениеПо);
				
			КонецЦикла;
			
			ТекстИсточника = "РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ДвиженияССубконто(&ДатаНач, &ДатаКон, " 
																								+ СтрокаОграниченийПоРеквизитам 
																								+ ТекстОтбораСчетов 
																								+ ТекстОтбораСубконто 
																								+ ТекстДопОтбор + ") КАК Проводки";
			
			ТекстПодзапроса = 
			"ВЫБРАТЬ 
			|" + ТекстПолей + ТекстСубконто + "
			|ИЗ
			|	" + ТекстИсточника;
			
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "Проводки", "Проводки" + НомерСтроки);
			
			ТекстЗапроса = ТекстЗапроса
			+ ?(ПустаяСтрока(ТекстЗапроса), "", Символы.ПС + " ОБЪЕДИНИТЬ " + Символы.ПС)
			+ ТекстПодзапроса;
			
			// БИТ Avseenkov 22.05.2014 Доработка отчетов по периметру

			Если ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
				//Получаем организации выбывшие или вошедшии в периметр за период из отчета
				 ТаблицаОрганизаций = бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиями(Организация,Период.ДатаНачала, Период.ДатаОкончания);  
			КонецЕсли;
			
			Если   ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") и
				
				ТаблицаОрганизаций.Количество()> 0 тогда
				
				//Создаем пустой запрос для начальных настроек
				Если Запрос = Неопределено Тогда 
					Запрос = Новый Запрос;
				КонецЕсли;
				
				
				Сч = 0 ;
				Для Каждого Строка из ТаблицаОрганизаций цикл
					
					Сч = Сч + 1;
					
					Если Строка.ДатаОкончания > Период.ДатаНачала и
						Строка.ДатаОкончания < КонецДня(Период.ДатаОкончания) Тогда 
						ДатаКонец = "&ДатаКон"+Сч;
						
						Запрос.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
						
						
						
					Иначе 
						ДатаКонец = "&ДатаКон";
					КонецЕсли;
					
					Если Строка.Период > Период.ДатаНачала Тогда 
						ДатаНачало = "&ДатаНач"+Сч;
						Запрос.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
						
					Иначе 
						ДатаНачало = "&ДатаНач";
					КонецЕсли;
					Запрос.УстановитьПараметр("Организация"+Сч,Строка.Организация);
					
					СтрокаОграниченийПоРеквизитам = "Активность = ИСТИНА";
					
					бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоРеквизитамДоп(СтрокаОграниченийПоРеквизитам, "Организация", Строка.Организация,"Организация"+Сч);
				
				
					Если ОтборПоВалюте Тогда
						СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "Валюта = &Валюта");
					КонецЕсли;
					
					Если ПоНомеруЖурнала Тогда
						СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "НомерЖурнала = &НомерЖурнала");
					КонецЕсли;
					
					Если ПоРегистратору Тогда
						СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "Регистратор = &Регистратор");
					КонецЕсли;
					
					ТекстФильтры = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Новый Запрос);
					СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
					
					
					ТекстИсточника = "РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ДвиженияССубконто("+ДатаНачало+","+ДатаКонец+", "+СтрокаОграниченийПоРеквизитам+ТекстОтбораСчетов+ТекстОтбораСубконто+ТекстДопОтбор+") КАК Проводки";
					
									
					ТекстЗапроса = ТекстЗапроса +" 
					| ОБЪЕДИНИТЬ ВСЕ 
					| ВЫБРАТЬ
					|"+ТекстПолей+ТекстСубконто+"
					|ИЗ
					|	"+ТекстИсточника;
					
					
				КонецЦикла;
			КонецЕсли;
			
         //}
			
		КонецЦикла;
		
	Иначе
		
		ТекстИсточника = "РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ДвиженияССубконто(&ДатаНач, &ДатаКон, " 
									+ СтрокаОграниченийПоРеквизитам 
									+ ТекстДопОтбор + ") КАК Проводки";
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|" + ТекстПолей + ТекстСубконто + "
		|ИЗ
		|	" + ТекстИсточника;
		
		// БИТ Avseenkov 22.05.2014 Доработка отчетов по периметру
		
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
			//Получаем организации выбывшие или вошедшии в периметр за период из отчета
		  ТаблицаОрганизаций = бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиями(Организация,Период.ДатаНачала, Период.ДатаОкончания);
		КонецЕсли;
		
		Если   ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") и
			
			ТаблицаОрганизаций.Количество()> 0 тогда
			
			Сч = 0 ;
			Для Каждого Строка из ТаблицаОрганизаций цикл
				
				Сч = Сч + 1;
				
				Если Строка.ДатаОкончания > Период.ДатаНачала и
					Строка.ДатаОкончания < КонецДня(Период.ДатаОкончания) Тогда 
					ДатаКонец = "&ДатаКон"+Сч;
					// Ок Видяйкин 20180228 Задание в Омни AT-1648966 +
					//Запрос.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
					Попытка
						Запрос.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
					Исключение
					КонецПопытки;						
					// Ок Видяйкин 20180228 Задание в Омни AT-1648966 -
				Иначе 
					ДатаКонец = "&ДатаКон";
				КонецЕсли;
				
				Если Строка.Период > Период.ДатаНачала Тогда 
					ДатаНачало = "&ДатаНач"+Сч;
					
					// Ок Видяйкин 20180228 Задание в Омни AT-1648966 +
					//Запрос.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
					Попытка
						Запрос.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
					Исключение
					КонецПопытки;						
					// Ок Видяйкин 20180228 Задание в Омни AT-1648966 -

				Иначе 
					ДатаНачало = "&ДатаНач";
				КонецЕсли;
				
				// Ок Видяйкин 20180228 Задание в Омни AT-1648966 +
				//Запрос.УстановитьПараметр("Организация"+Сч,Строка.Организация);
				Попытка
					Запрос.УстановитьПараметр("Организация"+Сч,Строка.Организация);
				Исключение
				КонецПопытки;						
				// Ок Видяйкин 20180228 Задание в Омни AT-1648966 -

				СтрокаОграниченийПоРеквизитам = "Активность = ИСТИНА";
				
				бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоРеквизитамДоп(СтрокаОграниченийПоРеквизитам, "Организация", Строка.Организация,"Организация"+Сч);
				
				
				Если ОтборПоВалюте Тогда
					СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "Валюта = &Валюта");
				КонецЕсли;
				
				Если ПоНомеруЖурнала Тогда
					СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "НомерЖурнала = &НомерЖурнала");
				КонецЕсли;
				
				Если ПоРегистратору Тогда
					СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, "Регистратор = &Регистратор");
				КонецЕсли;
				
				ТекстФильтры = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Новый Запрос);
				СтрокаОграниченийПоРеквизитам = бит_БухгалтерскиеОтчетыСервер.ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, ТекстФильтры);
				
				
				ТекстИсточника = "РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ДвиженияССубконто("+ДатаНачало+","+ДатаКонец+", "+СтрокаОграниченийПоРеквизитам+ТекстДопОтбор+") КАК Проводки";
				
				
				ТекстЗапроса = ТекстЗапроса +" 
				| ОБЪЕДИНИТЬ ВСЕ 
				| ВЫБРАТЬ
				|"+ТекстПолей+ТекстСубконто+"
				|ИЗ
				|	"+ТекстИсточника;
				
				
			КонецЦикла;
		КонецЕсли;
		
		//}
	КонецЕсли;
	
	// Обернем наш запрос еще одним и добавим свойства счетов.
	ТекстПолейВнеш = 
	"
	|	Проводки.Период,
	|	Проводки.НомерСтроки,
	|	Проводки.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.Регистратор) КАК РегистраторПредставление,
	|	Проводки.ВалютаДт,
	|	Проводки.ВалютаКт,
	|	" + ТекстПолейРесурсов + "
	|	Проводки.ВалютнаяСуммаДт,
	|	Проводки.ВалютнаяСуммаКт,
	|	Проводки.КоличествоДт,
	|	Проводки.КоличествоКт,
	|	Проводки.Содержание,
	|	Проводки.НомерЖурнала,
	|	ЕСТЬNULL(СчетаДт.Количественный, Ложь) КАК КоличественныйДт,
	|	ЕСТЬNULL(СчетаКт.Количественный, Ложь) КАК КоличественныйКт,
	|	ЕСТЬNULL(СчетаДт.Валютный, Ложь) КАК ВалютныйДт,
	|	ЕСТЬNULL(СчетаКт.Валютный, Ложь) КАК ВалютныйКт,
	|	ЕСТЬNULL(СчетаДт.КолвоСубконто, 0) КАК КолвоСубконтоДт,
	|	ЕСТЬNULL(СчетаКт.КолвоСубконто, 0) КАК КолвоСубконтоКт,
	|	Проводки.СчетДт,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.СчетДт) КАК СчетДтПредставление,
	|	Проводки.СчетКт,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.СчетКт) КАК СчетКтПредставление";
	
	ТекстСубконтоВнеш = "";
	
	Для н = 1 По МаксКоличествоСубконто Цикл
		
		ТекстСубконтоВнеш = ТекстСубконтоВнеш + "," + Символы.ПС + "	ПРЕДСТАВЛЕНИЕ(Проводки.СубконтоДт" + н + ") КАК СубконтоДт" + н;
		ТекстСубконтоВнеш = ТекстСубконтоВнеш + "," + Символы.ПС + "	ПРЕДСТАВЛЕНИЕ(Проводки.СубконтоКт" + н + ") КАК СубконтоКт" + н;
		
	КонецЦикла;
	
	ТекстВыбораСчетов = 
	"	ВЫБРАТЬ
	|		Счета.Ссылка КАК ССЫЛКА,
	|		Счета.Количественный КАК Количественный,
	|		Счета.Валютный КАК Валютный,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Субконто.ВидСубконто) КАК КолвоСубконто
	|	ИЗ
	|		ПланСчетов." + ИмяПланаСчетов + " КАК Счета
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов." + ИмяПланаСчетов + ".ВидыСубконто КАК Субконто
	|			ПО Субконто.Ссылка = Счета.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Счета.Ссылка";
	
	ТекстЗапросаВнеш = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|" + ТекстПолейВнеш + ТекстСубконтоВнеш + "
	|ИЗ
	|	(" + ТекстЗапроса + ") КАК Проводки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|" + ТекстВыбораСчетов + "
	|) КАК СчетаДт
	|	ПО Проводки.СчетДт = СчетаДт.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|" + ТекстВыбораСчетов + "
	|) КАК СчетаКт
	|	ПО Проводки.СчетКт = СчетаКт.Ссылка
	|";
	
	
	ТекстЗапросаВнеш = ТекстЗапросаВнеш + "
	|УПОРЯДОЧИТЬ ПО Период, Регистратор";
	
	Возврат ТекстЗапросаВнеш;
	
КонецФункции // ПолучитьТекстЗапроса()

// Процедура устанавливает значения параметров запроса.
// 
// Параметры
//  Запрос - Запрос, в котором устанавливаются значения параметров.
// 
Процедура УстановитьПараметрыЗапроса(Запрос)
	
	Запрос.УстановитьПараметр("ДатаНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ?(Период.ДатаОкончания = '00010101'
												, Период.ДатаОкончания
												, КонецДня(Период.ДатаОкончания)));
	
	// БИТ Avseenkov 22.05.2014 Доработка отчетов по периметру
	//бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(Запрос, Организация, Период);
	бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(Запрос, Организация, Период, Истина);
	//}
	
	Запрос.УстановитьПараметр("Валюта"      , Валюта);
	Запрос.УстановитьПараметр("НомерЖурнала", НомерЖурнала);
	Запрос.УстановитьПараметр("Регистратор" , Регистратор);
	
	Для каждого СтрКорреспонденции Из Корреспонденции Цикл
		
		НомерСтроки = Корреспонденции.Индекс(СтрКорреспонденции) + 1;
		Номер = 0;
		
		СчетДт = СтрКорреспонденции.СчетДт;
		СчетКт = СтрКорреспонденции.СчетКт;
		
		Запрос.УстановитьПараметр("СчетДт" + НомерСтроки, СчетДт);
		Запрос.УстановитьПараметр("СчетКт" + НомерСтроки, СчетКт);
		
		Если ЗначениеЗаполнено(СчетДт) Тогда
			Для каждого Вид из СчетДт.ВидыСубконто Цикл
				Номер = Номер + 1;
				Запрос.УстановитьПараметр("ВидСубконтоДт" + Номер+ "_" + НомерСтроки, Вид.ВидСубконто);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетКт) Тогда
			Номер = 0;
			Для каждого Вид из СчетКт.ВидыСубконто Цикл
				Номер = Номер + 1;
				Запрос.УстановитьПараметр("ВидСубконтоКт" + Номер+ "_" + НомерСтроки, Вид.ВидСубконто);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Элемент Из СтрКорреспонденции.Субконто Цикл
			
			НомерОтбора = "" + НомерСтроки + "_" + (СтрКорреспонденции.Субконто.Индекс(Элемент) + 1);  			
			бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, Элемент, НомерОтбора);				
			
		КонецЦикла;
		
	КонецЦикла;
    
    // Установим параметры запроса по построителю.
    ОграниченияПоПостроителюОтчета = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос);
    
КонецПроцедуры // УстановитьПараметрыЗапроса()

// Функция возвращает строку описания настроек отборов.
// 
// Параметры
//  Нет
// 
// Возвращаемое значение:
//   Строка   - Строка описания настроек, выводимая в шапку отчета.
// 
Функция ПолучитьОписаниеНастроек()
	
	СтрокаОписания = бит_БухгалтерскиеОтчетыСервер.СформироватьОписаниеКорреспондеции(Корреспонденции);
	
	Если ПоПодстрокеСодержание Тогда
		СтрокаОписания = СтрокаОписания + ?(ПустаяСтрока(СтрокаОписания), "", "; ") + "Содержание содержит '" + Строка(Подстрока) + "'";
	КонецЕсли;
	Если ПоПодстрокеСубконто Тогда
		СтрокаОписания = СтрокаОписания + ?(ПустаяСтрока(СтрокаОписания), "", "; ") + "Субконто содержит '" + Строка(Подстрока) + "'";
	КонецЕсли;
	Если ОтборПоВалюте Тогда
		СтрокаОписания = СтрокаОписания + ?(ПустаяСтрока(СтрокаОписания), "", "; ") + "Валюта=" + Строка(Валюта);
	КонецЕсли;
	Если ПоНомеруЖурнала Тогда
		СтрокаОписания = СтрокаОписания + ?(ПустаяСтрока(СтрокаОписания), "", "; ") + "НомерЖурнала=" + Строка(НомерЖурнала);
	КонецЕсли;
	Если ПоРегистратору Тогда
		СтрокаОписания = СтрокаОписания + ?(ПустаяСтрока(СтрокаОписания), "", "; ") + "Регистратор=" + Строка(Регистратор);
	КонецЕсли;
	
	// Получаем список фильтров.
	СтрОтбор 	   = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);
	СтрокаОписания = СтрокаОписания + ?(ПустаяСтрока(СтрокаОписания), "", "; ") + СтрОтбор;
	
	СтрокаОписания = ?(ПустаяСтрока(СтрокаОписания), "фильтры не заданы", СтрокаОписания);
	
	Возврат СтрокаОписания;
	
КонецФункции // ПолучитьОписаниеНастроек()

// Проверка корректности настроек отчета
// 
// Параметры
//  Нет
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПараметрыОтчетаКорректны()
  	
	РезультатПроверки = 
		бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Ложь, мЕстьРесурсСуммаМУ)
		И Не бит_БухгалтерскиеОтчетыСервер.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()

#КонецОбласти

#Область Инициализация

Линия 		= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
ЛинияЖирная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);

СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

// Сформируем список выбора регистров бухгалтерии.
мСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии, "бит_Дополнительный");

мПрограммноеОткрытие = Ложь;
мЕстьРесурсСуммаМУ   = Ложь;

#КонецОбласти

#КонецЕсли
