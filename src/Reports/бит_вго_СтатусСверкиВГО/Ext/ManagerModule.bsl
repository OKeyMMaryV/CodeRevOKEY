#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция получает данные статуса сверки ВГО.
// 
// Параметры:
//  СтруктураПараметров  - Структура.
//  
// Возвращаемое значение:
//   Хранилище значений.
// 
Функция ПолучитьДанныеДляФормированияСтатусаСверки(СтруктураПараметров) Экспорт
	
	// ВыводитьСуммыВзм = СтруктураПараметров.ВыводитьСуммыВзм.
	ВыводитьТехнОпер = СтруктураПараметров.ВыводитьТехнОпер;

	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТипаЧисло = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеТипаБулево = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.бит_вго_ОперацииВГО"));
	ОписаниеТипаОперацияВГО = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Валюты"));
	ОписаниеТипаВалюта = Новый ОписаниеТипов(МассивТипов);

	
	// ---------------------------------------------------------------
	// Идентификация дерева данных сверки
	ДеревоДанныхСверки = Новый ДеревоЗначений;
	ДеревоДанныхСверки.Колонки.Добавить("Св_Орг1_СуммаУпр", ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("Св_Орг1_СуммаВзм", ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("Кр_Орг1_СуммаУпр", ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("Кр_Орг1_СуммаВзм", ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("Св_Орг2_СуммаУпр", ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("Св_Орг2_СуммаВзм", ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("Кр_Орг2_СуммаУпр", ОписаниеТипаЧисло);	
	ДеревоДанныхСверки.Колонки.Добавить("Кр_Орг2_СуммаВзм", ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("СуммаРасхождения"			 	, ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("СуммаАбсолютногоРасхождения"	, ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("СуммаРасхожденияВзм"			, ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("СуммаАбсолютногоРасхожденияВзм", ОписаниеТипаЧисло);
	ДеревоДанныхСверки.Колонки.Добавить("ОперацияВГО_1", ОписаниеТипаОперацияВГО);
	ДеревоДанныхСверки.Колонки.Добавить("ОперацияВГО_2", ОписаниеТипаОперацияВГО);
	ДеревоДанныхСверки.Колонки.Добавить("ЕстьСоответствие"		, ОписаниеТипаБулево);
	ДеревоДанныхСверки.Колонки.Добавить("ЭтоОбороты"			, ОписаниеТипаБулево);
	ДеревоДанныхСверки.Колонки.Добавить("СуммироватьРасхождение", ОписаниеТипаБулево);
	ДеревоДанныхСверки.Колонки.Добавить("ЭтоРасшифровкаПоОперациям"	, ОписаниеТипаБулево);
	ДеревоДанныхСверки.Колонки.Добавить("ЭтоРасшифровкаПоВалютам"	, ОписаниеТипаБулево);
	ДеревоДанныхСверки.Колонки.Добавить("Валюта", ОписаниеТипаВалюта);
	
	
	// ---------------------------------------------------------------
	// Идентификация таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений;
	ТаблицаИтогов.Колонки.Добавить("Св_Орг1_СуммаУпр", ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("Св_Орг2_СуммаУпр", ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("Кр_Орг1_СуммаУпр", ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("Кр_Орг2_СуммаУпр", ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("Св_Орг1_СуммаВзм", ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("Св_Орг2_СуммаВзм", ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("Кр_Орг1_СуммаВзм", ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("Кр_Орг2_СуммаВзм", ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("СуммаРасхождения"				, ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("СуммаАбсолютногоРасхождения"	, ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("СуммаРасхожденияВзм"			, ОписаниеТипаЧисло);
	ТаблицаИтогов.Колонки.Добавить("СуммаАбсолютногоРасхожденияВзм" , ОписаниеТипаЧисло);
	
	
	// ---------------------------------------------------------------
	// Входящее сальдо
	РезультатЗапросаПоВходящемуСальдо = ПолучитьРезультатПоВходящемуСальдо(СтруктураПараметров);
	СтрокаВходящегоСальдо = ТаблицаИтогов.Добавить();
	ДеревоПоВходящемуСальдо = РезультатЗапросаПоВходящемуСальдо.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 		   
	Если Не РезультатЗапросаПоВходящемуСальдо.Пустой() Тогда		
		КореньДерева = ДеревоПоВходящемуСальдо.Строки;
		СтрокаИтогов = КореньДерева[0];
		СтрокаИтогов.СуммаАбсолютногоРасхождения    = Макс(СтрокаИтогов.СуммаРасхождения, -СтрокаИтогов.СуммаРасхождения);
		СтрокаИтогов.СуммаАбсолютногоРасхожденияВзм = Макс(СтрокаИтогов.СуммаРасхожденияВзм, -СтрокаИтогов.СуммаРасхожденияВзм);
		ЗаполнитьЗначенияСвойств(СтрокаВходящегоСальдо, СтрокаИтогов);
	КонецЕсли;
	
	
	// ---------------------------------------------------------------
	// Данные по оборотам и движениям ДС
	ЗаполнитьДерево(ДеревоДанныхСверки, СтруктураПараметров);
	Для каждого СтрокаДереваИтоги Из ДеревоДанныхСверки.Строки Цикл 		
		НоваяСтрокаИтогов = ТаблицаИтогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаИтогов, СтрокаДереваИтоги); 		
	КонецЦикла;
	
	
	// ---------------------------------------------------------------
	// Технические операции
	Если ВыводитьТехнОпер Тогда   		
		РезультатЗапросаПоТехническимОперациям = ПолучитьРезультатПоТехническимОперациям(СтруктураПараметров);
		ДеревоПоТехническимОперациям = РезультатЗапросаПоТехническимОперациям.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией); 
		Если Не РезультатЗапросаПоТехническимОперациям.Пустой() Тогда
			КореньДерева = ДеревоПоТехническимОперациям.Строки;
			СтрокаИтогов = КореньДерева[0];
			СтрокаИтогов.СуммаАбсолютногоРасхождения    = Макс(СтрокаИтогов.СуммаРасхождения, -СтрокаИтогов.СуммаРасхождения);
			СтрокаИтогов.СуммаАбсолютногоРасхожденияВзм = Макс(СтрокаИтогов.СуммаРасхожденияВзм, -СтрокаИтогов.СуммаРасхожденияВзм);
		 	Для каждого СтрокаДерева Из СтрокаИтогов.Строки Цикл
				СтрокаДерева.СуммаАбсолютногоРасхождения    = Макс(СтрокаДерева.СуммаРасхождения, -СтрокаДерева.СуммаРасхождения);
				СтрокаДерева.СуммаАбсолютногоРасхожденияВзм = Макс(СтрокаДерева.СуммаРасхожденияВзм, -СтрокаДерева.СуммаРасхожденияВзм);
			КонецЦикла;	
			// Строка таблицы итогов
			НоваяСтрокаИтогов = ТаблицаИтогов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаИтогов, СтрокаИтогов); 					
		КонецЕсли;
	 КонецЕсли;
			
	
	// ---------------------------------------------------------------
	// Эффект от валютных пересчетов
	РезультатЗапросаПоЭффектуОтПересчета = ПолучитьРезультатПоЭффектуОтПересчета(СтруктураПараметров);
	Если РезультатЗапросаПоЭффектуОтПересчета.Пустой() Тогда
		Орг1_СуммаЭффектаОтПересчета = 0;
		Орг2_СуммаЭффектаОтПересчета = 0;
	Иначе	
		Выборка = РезультатЗапросаПоЭффектуОтПересчета.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Организация = СтруктураПараметров.Организация1 Тогда
				Орг1_СуммаЭффектаОтПересчета = Выборка.Сумма;
			Иначе	
				Орг2_СуммаЭффектаОтПересчета = Выборка.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// ---------------------------------------------------------------
	// Допустимые расхождения
	// ЭффектНулевой = Орг1_СуммаЭффектаОтПересчета = 0 И Орг2_СуммаЭффектаОтПересчета = 0;
	СтруктураРасхождений = ПолучитьДопустимыеРасхождения(СтруктураПараметров);
	
	
	// ---------------------------------------------------------------
	// Результат
	СтруктураДанныхСтатусаСверки = Новый Структура;
	СтруктураДанныхСтатусаСверки.Вставить("ТаблицаИтогов"		 		 			, ТаблицаИтогов);
	СтруктураДанныхСтатусаСверки.Вставить("ДеревоДанныхСверки"	 		 			, ДеревоДанныхСверки);
	СтруктураДанныхСтатусаСверки.Вставить("ДопустимоеРасхождение"		 	  		, СтруктураРасхождений.ДопустимоеРасхождение);
	СтруктураДанныхСтатусаСверки.Вставить("ДопустимоеРасхождениеВзм"				, СтруктураРасхождений.ДопустимоеРасхождениеВзаиморасчеты);
	СтруктураДанныхСтатусаСверки.Вставить("КонтролироватьДопустимоеРасхождение"		, СтруктураРасхождений.КонтролироватьДопустимоеРасхождение);
	СтруктураДанныхСтатусаСверки.Вставить("КонтролироватьДопустимоеРасхождениеВзм"	, СтруктураРасхождений.КонтролироватьДопустимоеРасхождениеВзаиморасчеты);
	СтруктураДанныхСтатусаСверки.Вставить("Орг1_СуммаЭффектаОтПересчета" 			, Орг1_СуммаЭффектаОтПересчета);
	СтруктураДанныхСтатусаСверки.Вставить("Орг2_СуммаЭффектаОтПересчета" 			, Орг2_СуммаЭффектаОтПересчета);	
	СтруктураДанныхСтатусаСверки.Вставить("ДеревоПоВходящемуСальдо"			, ДеревоПоВходящемуСальдо);
	СтруктураДанныхСтатусаСверки.Вставить("ДеревоПоТехническимОперациям"	, ДеревоПоТехническимОперациям);

	// Хранилище значений
	ХранилищеДанныхСтатусаСверки = Новый ХранилищеЗначения(СтруктураДанныхСтатусаСверки);
	
	Возврат ХранилищеДанныхСтатусаСверки;
	
КонецФункции // ПолучитьДанныеДляФормированияСтатусаСверки()

// Функция получает данные для проверки подтверждения сверки 
// (для документа бит_вго_ПодтверждениеСверкиВГО).
// 
// Параметры:
//  СтруктураПараметров   - Структура.
//  ДопустимоеРасхождение - Структура.
//  
// Возвращаемое значение:
//   Число.
// 
Функция ПолучитьДанныеДляПроверкиЗавершенияСверки(СтруктураПараметров, ДопустимоеРасхождение = 0) Экспорт

	СтруктураПараметров.Вставить("ВыводитьСуммыВзм", Истина);
	СтруктураПараметров.Вставить("ВыводитьТехнОпер", Истина);
	
	ХранилищеДанныхСтатусаСверки = ПолучитьДанныеДляФормированияСтатусаСверки(СтруктураПараметров);
	СтруктураДанныхСтатусаСверки = ХранилищеДанныхСтатусаСверки.Получить();
	ТаблицаИтогов 		  		 = СтруктураДанныхСтатусаСверки.ТаблицаИтогов;
	
	СтруктураДляПроверки = Новый Структура;
	
	СтруктураДляПроверки.Вставить("СуммаАбсолютногоРасхождения"    , ТаблицаИтогов.Итог("СуммаАбсолютногоРасхождения"));
	СтруктураДляПроверки.Вставить("СуммаАбсолютногоРасхожденияВзм" , ТаблицаИтогов.Итог("СуммаАбсолютногоРасхожденияВзм"));
	
	СтруктураДляПроверки.Вставить("ДопустимоеРасхождение"	, СтруктураДанныхСтатусаСверки.ДопустимоеРасхождение);
	СтруктураДляПроверки.Вставить("ДопустимоеРасхождениеВзм", СтруктураДанныхСтатусаСверки.ДопустимоеРасхождениеВзм);

	СтруктураДляПроверки.Вставить("КонтролироватьДопустимоеРасхождение"	 , СтруктураДанныхСтатусаСверки.КонтролироватьДопустимоеРасхождение);
	СтруктураДляПроверки.Вставить("КонтролироватьДопустимоеРасхождениеВзм", СтруктураДанныхСтатусаСверки.КонтролироватьДопустимоеРасхождениеВзм);
	

	Возврат СтруктураДляПроверки;
	
КонецФункции // ПолучитьДанныеДляПроверкиЗавершенияСверки()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеДанныхСтатусаСверкиВго

// Процедура заполняет дерево.
// 
// Параметры:
//  ВеткаДерева  - СтрокаДереваЗначений.
//  УзелВыборки  - Результат выполнения запроса или Выборка.
// 
Процедура ЗаполнитьДерево_ОбойтиУровеньИерархии(ВеткаДерева, УзелВыборки, ЭтоОбороты)
	
	Выборка = УзелВыборки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	Пока Выборка.Следующий() Цикл
		
		ЕстьСоответствие = ЗначениеЗаполнено(Выборка.ОперацияВГО_1) И ЗначениеЗаполнено(Выборка.ОперацияВГО_2);
		
		Если ЭтоОбороты = (Выборка.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности)  Тогда
		
			НоваяСтрокаДерева = ВеткаДерева.Добавить(); 		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Выборка); 		
			НоваяСтрокаДерева.ЕстьСоответствие = ЕстьСоответствие;	
			
			ЗаполнитьДерево_ОбойтиУровеньИерархии(НоваяСтрокаДерева.Строки, Выборка, ЭтоОбороты);	
		
		КонецЕсли;
				
	КонецЦикла; 	

КонецПроцедуры // ЗаполнитьДерево_ОбойтиУровеньИерархии()

// Процедура заполняет дерево.
// 
// Параметры:
//  ВеткаДерева  		 - СтрокаДереваЗначений.
//  ТаблицаОперацийВГО_2 - ТаблицаЗначений.
// 
Процедура ЗаполнитьДерево_ЗаполнитьОперацииВго2(ВеткаДерева, ТаблицаОперацийВГО_2)

	Для каждого СтрокаДерева Из ВеткаДерева Цикл
		
		НовыйУзел = СтрокаДерева.Строки;
		
		ТекОперацияВГО_2 = СтрокаДерева.ОперацияВГО_2;
		Если ЗначениеЗаполнено(ТекОперацияВГО_2) И ТекОперацияВГО_2.ЭтоГруппа Тогда
					
			НайденныеСтроки = ТаблицаОперацийВГО_2.НайтиСтроки(Новый Структура("Родитель", ТекОперацияВГО_2));
			КоличествоНайденных = НайденныеСтроки.Количество();
			Если КоличествоНайденных > 0 Тогда
				
				Счетчик = 0;
				
				Для каждого ПодСтрокаДерева Из НовыйУзел Цикл
					
					Если Счетчик < КоличествоНайденных
						И Не ЗначениеЗаполнено(ПодСтрокаДерева.ОперацияВГО_2) 
						И Не ПодСтрокаДерева.ОперацияВГО_1.ЭтоГруппа Тогда
						
						ТекСтрока = НайденныеСтроки[Счетчик];
						
						ПодСтрокаДерева.ОперацияВГО_2 = ТекСтрока.ОперацияВГО_1;
						Счетчик = Счетчик + 1;
							
					КонецЕсли;
			
				КонецЦикла;
				
				Для i = Счетчик По КоличествоНайденных - 1 Цикл
					
					ТекСтрока = НайденныеСтроки[i];
					
					НоваяСтрока = НовыйУзел.Добавить();
					НоваяСтрока.ОперацияВГО_2 = ТекСтрока.ОперацияВГО_1;								
										
				КонецЦикла;			
						
			КонецЕсли;
		
		КонецЕсли;
		
		ЗаполнитьДерево_ЗаполнитьОперацииВго2(НовыйУзел, ТаблицаОперацийВГО_2)
	
	КонецЦикла; 	

КонецПроцедуры // ЗаполнитьДерево_ЗаполнитьОперацииВго2()

// Процедура заполняет дерево по соответсвию операций ВГО.
// 
// Параметры:
//  КореньДерева 		  - КоллекцияСтрокДереваЗначений.
//  МассивВидовОпераций   - Массив.
// 
Процедура ЗаполнитьДерево_ПоСоответствиюОпераций(КореньДерева, МассивВидовОпераций)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВидовОпераций"  , МассивВидовОпераций);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СоответствиеОперацийВГО.ОперацияПоставщика КАК ОперацияВГО_1,
	|	СоответствиеОперацийВГО.ОперацияПокупателя КАК ОперацияВГО_2
	|ПОМЕСТИТЬ СоответствиеОпераций
	|ИЗ
	|	РегистрСведений.бит_вго_СоответствиеОперацийВГО КАК СоответствиеОперацийВГО
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	СоответствиеОперацийВГО.ОперацияПокупателя,
	|	СоответствиеОперацийВГО.ОперацияПоставщика
	|ИЗ
	|	РегистрСведений.бит_вго_СоответствиеОперацийВГО КАК СоответствиеОперацийВГО
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникОперацииВГО.Ссылка 		КАК ОперацияВГО_1,
	|	СоответствиеОпераций.ОперацияВГО_2 	КАК ОперацияВГО_2,
	|	СправочникОперацииВГО.ТипОперации 	КАК ТипОперации,
	|	СправочникОперацииВГО.Родитель 		КАК Родитель,
	|	СправочникОперацииВГО.ЭтоГруппа
	|ИЗ
	|	Справочник.бит_вго_ОперацииВГО КАК СправочникОперацииВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеОпераций КАК СоответствиеОпераций
	|		ПО СправочникОперацииВГО.Ссылка = СоответствиеОпераций.ОперацияВГО_1
	|ГДЕ
	|	СправочникОперацииВГО.ВидОперации В(&МассивВидовОпераций)
    |
	|УПОРЯДОЧИТЬ ПО
	|	ОперацияВГО_1 ИЕРАРХИЯ
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СоответствиеОпераций
	|
	|";
	РезультатЗапроса = Запрос.Выполнить();	

	НоваяСтрока_Обороты = КореньДерева.Добавить();
	НоваяСтрока_Обороты.ЭтоОбороты 		 		= Истина;
	НоваяСтрока_Обороты.ЕстьСоответствие 		= Истина;
	НоваяСтрока_Обороты.СуммироватьРасхождение 	= Истина;
	Ветка_Обороты = НоваяСтрока_Обороты.Строки;
		
	НоваяСтрока_ДвиженияДС = КореньДерева.Добавить();
	НоваяСтрока_ДвиженияДС.ЭтоОбороты 	    		= Ложь;
	НоваяСтрока_ДвиженияДС.ЕстьСоответствие 		= Истина;
	НоваяСтрока_ДвиженияДС.СуммироватьРасхождение 	= Истина;
	Ветка_ДвиженияДС = НоваяСтрока_ДвиженияДС.Строки;
	
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);		
	Пока Выборка.Следующий() Цикл
		
		ЕстьСоответствие = ЗначениеЗаполнено(Выборка.ОперацияВГО_1) И ЗначениеЗаполнено(Выборка.ОперацияВГО_2);
		
		Если Выборка.ЭтоГруппа Тогда
			
			Если Выборка.ТипОперации <> Перечисления.бит_вго_ТипыОперацийВГО.ПогашениеЗадолженности Тогда
				
				ВеткаДерева 		= Ветка_Обороты;
				НоваяСтрокаДерева 	= ВеткаДерева.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Выборка); 		
				НоваяСтрокаДерева.ЕстьСоответствие = ЕстьСоответствие;
						
				ЗаполнитьДерево_ОбойтиУровеньИерархии(НоваяСтрокаДерева.Строки, Выборка, Истина);
				
			КонецЕсли;
			Если Выборка.ТипОперации <> Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности Тогда
				
				ВеткаДерева 		= Ветка_ДвиженияДС;
				НоваяСтрокаДерева 	= ВеткаДерева.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Выборка); 		
				НоваяСтрокаДерева.ЕстьСоответствие = ЕстьСоответствие;
				
				ЗаполнитьДерево_ОбойтиУровеньИерархии(НоваяСтрокаДерева.Строки, Выборка, Ложь);
				
			КонецЕсли;
						
		Иначе	
			
			ЭтоОбороты = Выборка.ТипОперации = Перечисления.бит_вго_ТипыОперацийВГО.НачислениеЗадолженности;
			ВеткаДерева = ?(ЭтоОбороты, Ветка_Обороты, Ветка_ДвиженияДС);
			ЗаполнитьДерево_ОбойтиУровеньИерархии(ВеткаДерева, Выборка, ЭтоОбороты);
			
		КонецЕсли;
			
	КонецЦикла;
	
	// Добавление операций ВГО 2, для которых не настроено соответствие.
	ТаблицаОпераций = РезультатЗапроса.Выгрузить();
	НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(Новый Структура("ОперацияВГО_2", NULL));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТаблицаОпераций2 = ТаблицаОпераций.Скопировать(НайденныеСтроки); 	
		ЗаполнитьДерево_ЗаполнитьОперацииВго2(КореньДерева, ТаблицаОпераций2);	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДерево_ПоСоответствиюОпераций()

// Процедура пересчитывает итоги в дереве.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений.
// 
Процедура ЗаполнитьДерево_ПересчитатьИтогиПоДереву(СтрокаДерева)

	ВеткаДерева = СтрокаДерева.Строки;
	
	Если ВеткаДерева.Количество() = 0  Тогда
				
		СтрокаДерева.СуммаРасхождения     = СтрокаДерева.Св_Орг1_СуммаУпр + СтрокаДерева.Кр_Орг1_СуммаУпр + СтрокаДерева.Св_Орг2_СуммаУпр + СтрокаДерева.Кр_Орг2_СуммаУпр;
		СтрокаДерева.СуммаРасхожденияВзм  = СтрокаДерева.Св_Орг1_СуммаВзм + СтрокаДерева.Кр_Орг1_СуммаВзм + СтрокаДерева.Св_Орг2_СуммаВзм + СтрокаДерева.Кр_Орг2_СуммаВзм;
		
	ИначеЕсли СтрокаДерева.ЭтоРасшифровкаПоОперациям Тогда 
		
		СтрокаДерева.СуммаРасхождения     = СтрокаДерева.Св_Орг1_СуммаУпр + СтрокаДерева.Кр_Орг1_СуммаУпр + СтрокаДерева.Св_Орг2_СуммаУпр + СтрокаДерева.Кр_Орг2_СуммаУпр;
		СтрокаДерева.СуммаРасхожденияВзм  = СтрокаДерева.Св_Орг1_СуммаВзм + СтрокаДерева.Кр_Орг1_СуммаВзм + СтрокаДерева.Св_Орг2_СуммаВзм + СтрокаДерева.Кр_Орг2_СуммаВзм;
		
		Для каждого ПодСтрокаДерева Из ВеткаДерева Цикл
			ЗаполнитьДерево_ПересчитатьИтогиПоДереву(ПодСтрокаДерева);
		КонецЦикла;
				
	Иначе                       											
			
		Для каждого ПодСтрокаДерева Из ВеткаДерева Цикл
			
			ЗаполнитьДерево_ПересчитатьИтогиПоДереву(ПодСтрокаДерева); 		
			
			СтрокаДерева.Св_Орг1_СуммаУпр = СтрокаДерева.Св_Орг1_СуммаУпр  + ПодСтрокаДерева.Св_Орг1_СуммаУпр;
			СтрокаДерева.Св_Орг2_СуммаУпр = СтрокаДерева.Св_Орг2_СуммаУпр  + ПодСтрокаДерева.Св_Орг2_СуммаУпр;
			СтрокаДерева.Кр_Орг1_СуммаУпр = СтрокаДерева.Кр_Орг1_СуммаУпр  + ПодСтрокаДерева.Кр_Орг1_СуммаУпр;
			СтрокаДерева.Кр_Орг2_СуммаУпр = СтрокаДерева.Кр_Орг2_СуммаУпр  + ПодСтрокаДерева.Кр_Орг2_СуммаУпр;
			                             
			СтрокаДерева.Св_Орг1_СуммаВзм = СтрокаДерева.Св_Орг1_СуммаВзм  + ПодСтрокаДерева.Св_Орг1_СуммаВзм;
			СтрокаДерева.Св_Орг2_СуммаВзм = СтрокаДерева.Св_Орг2_СуммаВзм  + ПодСтрокаДерева.Св_Орг2_СуммаВзм;
			СтрокаДерева.Кр_Орг1_СуммаВзм = СтрокаДерева.Кр_Орг1_СуммаВзм  + ПодСтрокаДерева.Кр_Орг1_СуммаВзм;
			СтрокаДерева.Кр_Орг2_СуммаВзм = СтрокаДерева.Кр_Орг2_СуммаВзм  + ПодСтрокаДерева.Кр_Орг2_СуммаВзм;
			
			СтрокаДерева.СуммаРасхождения    = СтрокаДерева.СуммаРасхождения + ПодСтрокаДерева.СуммаРасхождения;
			СтрокаДерева.СуммаРасхожденияВзм = СтрокаДерева.СуммаРасхожденияВзм + ПодСтрокаДерева.СуммаРасхожденияВзм;
			
			Если СтрокаДерева.СуммироватьРасхождение Тогда
				СтрокаДерева.СуммаАбсолютногоРасхождения    = СтрокаДерева.СуммаАбсолютногоРасхождения + ПодСтрокаДерева.СуммаАбсолютногоРасхождения;
				СтрокаДерева.СуммаАбсолютногоРасхожденияВзм = СтрокаДерева.СуммаАбсолютногоРасхожденияВзм + ПодСтрокаДерева.СуммаАбсолютногоРасхожденияВзм;
			КонецЕсли;
												
		КонецЦикла;
		
		Если Не СтрокаДерева.СуммироватьРасхождение Тогда
			СтрокаДерева.СуммаАбсолютногоРасхождения    = Макс(СтрокаДерева.СуммаРасхождения, -СтрокаДерева.СуммаРасхождения);		
			СтрокаДерева.СуммаАбсолютногоРасхожденияВзм = Макс(СтрокаДерева.СуммаРасхожденияВзм, -СтрокаДерева.СуммаРасхожденияВзм);		
		КонецЕсли;
	    	
	КонецЕсли;
		
КонецПроцедуры // ПересчитатьИтогиПоДереву()

// Процедура заполняет вспомогательное дерево.
// 
// Параметры:
//  ДеревоДанныхСверки  - ДеревоЗначений.
//  СтруктураПараметров - Структура.
// 
Процедура ЗаполнитьДерево(ДеревоДанныхСверки, СтруктураПараметров)

	ВыводитьСуммыВзм = СтруктураПараметров.ВыводитьСуммыВзм;
	КореньДерева = ДеревоДанныхСверки.Строки;
	
	ВидыОперацийВГО = Перечисления.бит_вго_ВидыОперацийВГО;
	МассивВидовОпераций = Новый Массив;
	МассивВидовОпераций.Добавить(ВидыОперацийВГО.ОперацияПоставщика);
	МассивВидовОпераций.Добавить(ВидыОперацийВГО.ОперацияПокупателя);
	
	Организация1 = СтруктураПараметров.Организация1;
	Организация2 = СтруктураПараметров.Организация2;
	
	
	// ----------------------------------------------------------------------
	// Соответствие операций
	ЗаполнитьДерево_ПоСоответствиюОпераций(КореньДерева, МассивВидовОпераций);
   	
	
	// Обороты по организациям
	// ----------------------------------------------------------------------
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВидовОпераций"  , МассивВидовОпераций);
	Запрос.УстановитьПараметр("НачалоПериода"		 , СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода" 		 , КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("РегистрБухгалтерии"   , СтруктураПараметров.РегистрБухгалтерии);
	Запрос.УстановитьПараметр("Организация1" 		 , Организация1);
	Запрос.УстановитьПараметр("Организация2"		 , Организация2);
	Запрос.УстановитьПараметр("Контрагент1"  		 , СтруктураПараметров.Контрагент1);
	Запрос.УстановитьПараметр("Контрагент2" 		 , СтруктураПараметров.Контрагент2);
	Запрос.УстановитьПараметр("Сценарий" 	 		 , СтруктураПараметров.Сценарий);
	Запрос.УстановитьПараметр("Тип_СверкаВГО" 	 	 , Перечисления.бит_вго_ТипыДанныхКорректировок.СверкаВГО);
	Запрос.УстановитьПараметр("Тип_Корректировка" 	 , Перечисления.бит_вго_ТипыДанныхКорректировок.ПротоколРасхождения);
	
	ДопУсловие = ?(СтруктураПараметров.ИмяРегистраБухгалтерии = "бит_Бюджетирование", "И Сценарий = &Сценарий", "");
	
	Запрос.Текст = "
	// Операции ВГО
	|ВЫБРАТЬ
	|	СправочникОперацииВГО.Ссылка
	|ПОМЕСТИТЬ ТаблОперацийВГО 
	|ИЗ
	|	Справочник.бит_вго_ОперацииВГО КАК СправочникОперацииВГО
	|ГДЕ
	|	СправочникОперацииВГО.ЭтоГруппа = ЛОЖЬ 
	|	И СправочникОперацииВГО.ВидОперации В(&МассивВидовОпераций)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// Данные регистра накопления бит_вго_ДанныеКорректировок 
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДкОбороты.ОперацияВГО,	
	|	ДкОбороты.Организация,
	|	ДкОбороты.Контрагент, 	
	|	ДкОбороты.СуммаУпрДтОборот,
	|	ДкОбороты.СуммаУпрКтОборот,
	|" +?(ВыводитьСуммыВзм, "
	|	ДкОбороты.ВалютаДт,
	|	ДкОбороты.ВалютаКт,
	|	ДкОбороты.ВалютнаяСуммаДтОборот,
	|	ДкОбороты.ВалютнаяСуммаКтОборот,
	|", "") + "
	|	ДкОбороты.ТипДанныхКорректировок
	|ПОМЕСТИТЬ ДкОбороты
	|ИЗ
	|	РегистрНакопления.бит_вго_ДанныеКорректировок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			РегистрБухгалтерии = &РегистрБухгалтерии
	|			И ОперацияВГО.ВидОперации В(&МассивВидовОпераций)
	|			" + ДопУсловие + "
	|			И (Организация = &Организация1 И Контрагент = &Контрагент2
	|				ИЛИ Организация = &Организация2 И Контрагент = &Контрагент1)) КАК ДкОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблОперацийВГО.Ссылка 			КАК ОперацияВГО, 	
	|	СУММА(ЕСТЬNULL(СвДт_ДкОбороты.СуммаУпрДтОборот, 0)) 		КАК Св_СуммаУпрДт,	
	|	СУММА(ЕСТЬNULL(СвКт_ДкОбороты.СуммаУпрКтОборот, 0)) 		КАК Св_СуммаУпрКт,	
	|	СУММА(ЕСТЬNULL(КрДт_ДкОбороты.СуммаУпрДтОборот, 0)) 		КАК Кр_СуммаУпрДт,	
	|	СУММА(ЕСТЬNULL(КрКт_ДкОбороты.СуммаУпрКтОборот, 0)) 		КАК Кр_СуммаУпрКт,	
	|" +?(ВыводитьСуммыВзм, "
	|	СпрВалюты.Ссылка 				КАК Валюта,
	|	СУММА(ЕСТЬNULL(СвДт_ДкОбороты.ВалютнаяСуммаДтОборот, 0)) 	КАК Св_СуммаВзмДт,
	|	СУММА(ЕСТЬNULL(СвКт_ДкОбороты.ВалютнаяСуммаКтОборот, 0)) 	КАК Св_СуммаВзмКт,
	|	СУММА(ЕСТЬNULL(КрДт_ДкОбороты.ВалютнаяСуммаДтОборот, 0)) 	КАК Кр_СуммаВзмДт,
	|	СУММА(ЕСТЬNULL(КрКт_ДкОбороты.ВалютнаяСуммаКтОборот, 0)) 	КАК Кр_СуммаВзмКт,
	|", "") + "
	|	&Организация1 КАК Организация
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	ТаблОперацийВГО КАК ТаблОперацийВГО
	|" +?(ВыводитьСуммыВзм, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СпрВалюты
	|		ПО (СпрВалюты.ПометкаУдаления = ЛОЖЬ)
	|", "") + "
	// Сверка ВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвДт_ДкОбороты
	|		ПО (СвДт_ДкОбороты.Организация = &Организация1 И СвДт_ДкОбороты.Контрагент = &Контрагент2)
	|			И ТаблОперацийВГО.Ссылка = СвДт_ДкОбороты.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, "
	|			И СпрВалюты.Ссылка = СвДт_ДкОбороты.ВалютаДт
	|", "") + "
	|			И СвДт_ДкОбороты.ТипДанныхКорректировок = &Тип_СверкаВГО		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвКт_ДкОбороты
	|		ПО (СвКт_ДкОбороты.Организация = &Организация1 И СвКт_ДкОбороты.Контрагент = &Контрагент2)
	|			И ТаблОперацийВГО.Ссылка = СвКт_ДкОбороты.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, "
	|			И СпрВалюты.Ссылка = СвКт_ДкОбороты.ВалютаКт
	|", "") + "
	|			И СвКт_ДкОбороты.ТипДанныхКорректировок = &Тип_СверкаВГО
	// Корректировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК КрДт_ДкОбороты
	|		ПО (КрДт_ДкОбороты.Организация = &Организация1 И КрДт_ДкОбороты.Контрагент = &Контрагент2)
	|			И ТаблОперацийВГО.Ссылка = КрДт_ДкОбороты.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, "
	|			И СпрВалюты.Ссылка = КрДт_ДкОбороты.ВалютаДт
	|", "") + "
	|			И КрДт_ДкОбороты.ТипДанныхКорректировок = &Тип_Корректировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК КрКт_ДкОбороты
	|		ПО (КрКт_ДкОбороты.Организация = &Организация1 И КрКт_ДкОбороты.Контрагент = &Контрагент2)
	|			И ТаблОперацийВГО.Ссылка = КрКт_ДкОбороты.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, "
	|			И СпрВалюты.Ссылка = КрКт_ДкОбороты.ВалютаКт
	|", "") + "
	|			И КрКт_ДкОбороты.ТипДанныхКорректировок = &Тип_Корректировка
	|		
	|ГДЕ
	|	ЕСТЬNULL(СвДт_ДкОбороты.СуммаУпрДтОборот, 0) <> 0
	|	ИЛИ ЕСТЬNULL(СвКт_ДкОбороты.СуммаУпрКтОборот, 0) <> 0
	|	ИЛИ ЕСТЬNULL(КрДт_ДкОбороты.СуммаУпрДтОборот, 0) <> 0
	|	ИЛИ ЕСТЬNULL(КрКт_ДкОбороты.СуммаУпрКтОборот, 0) <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблОперацийВГО.Ссылка,
	|" +?(ВыводитьСуммыВзм, "
	|	СпрВалюты.Ссылка,
    |", "") + "
	|	&Организация1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ТаблОперацийВГО.Ссылка 			КАК ОперацияВГО, 	
	|	СУММА(ЕСТЬNULL(СвДт_ДкОбороты.СуммаУпрДтОборот, 0)) 		КАК Св_СуммаУпрДт,	
	|	СУММА(ЕСТЬNULL(СвКт_ДкОбороты.СуммаУпрКтОборот, 0)) 		КАК Св_СуммаУпрКт,	
	|	СУММА(ЕСТЬNULL(КрДт_ДкОбороты.СуммаУпрДтОборот, 0)) 		КАК Кр_СуммаУпрДт,	
	|	СУММА(ЕСТЬNULL(КрКт_ДкОбороты.СуммаУпрКтОборот, 0)) 		КАК Кр_СуммаУпрКт,	
	|" +?(ВыводитьСуммыВзм, "
	|	СпрВалюты.Ссылка 				КАК Валюта,
	|	СУММА(ЕСТЬNULL(СвДт_ДкОбороты.ВалютнаяСуммаДтОборот, 0)) 	КАК Св_СуммаВзмДт,
	|	СУММА(ЕСТЬNULL(СвКт_ДкОбороты.ВалютнаяСуммаКтОборот, 0)) 	КАК Св_СуммаВзмКт,
	|	СУММА(ЕСТЬNULL(КрДт_ДкОбороты.ВалютнаяСуммаДтОборот, 0)) 	КАК Кр_СуммаВзмДт,
	|	СУММА(ЕСТЬNULL(КрКт_ДкОбороты.ВалютнаяСуммаКтОборот, 0)) 	КАК Кр_СуммаВзмКт,
	|", "") + "
	|	&Организация2 КАК Организация
	|ИЗ
	|	ТаблОперацийВГО КАК ТаблОперацийВГО
	|" +?(ВыводитьСуммыВзм, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СпрВалюты
	|		ПО (СпрВалюты.ПометкаУдаления = ЛОЖЬ)
	|", "") + "
	// Сверка ВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвДт_ДкОбороты
	|		ПО (СвДт_ДкОбороты.Организация = &Организация2 И СвДт_ДкОбороты.Контрагент = &Контрагент1)
	|			И ТаблОперацийВГО.Ссылка = СвДт_ДкОбороты.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, "
	|			И СпрВалюты.Ссылка = СвДт_ДкОбороты.ВалютаДт
	|", "") + "
	|			И СвДт_ДкОбороты.ТипДанныхКорректировок = &Тип_СверкаВГО		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвКт_ДкОбороты
	|		ПО (СвКт_ДкОбороты.Организация = &Организация2 И СвКт_ДкОбороты.Контрагент = &Контрагент1)
	|			И ТаблОперацийВГО.Ссылка = СвКт_ДкОбороты.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, "
	|			И СпрВалюты.Ссылка = СвКт_ДкОбороты.ВалютаКт
	|", "") + "
	|			И СвКт_ДкОбороты.ТипДанныхКорректировок = &Тип_СверкаВГО
	// Корректировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК КрДт_ДкОбороты
	|		ПО (КрДт_ДкОбороты.Организация = &Организация2 И КрДт_ДкОбороты.Контрагент = &Контрагент1)
	|			И ТаблОперацийВГО.Ссылка = КрДт_ДкОбороты.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, "
	|			И СпрВалюты.Ссылка = КрДт_ДкОбороты.ВалютаДт
	|", "") + "
	|			И КрДт_ДкОбороты.ТипДанныхКорректировок = &Тип_Корректировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК КрКт_ДкОбороты
	|		ПО (КрКт_ДкОбороты.Организация = &Организация2 И КрКт_ДкОбороты.Контрагент = &Контрагент1)
	|			И ТаблОперацийВГО.Ссылка = КрКт_ДкОбороты.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, "
	|			И СпрВалюты.Ссылка = КрКт_ДкОбороты.ВалютаКт
	|", "") + "
	|			И КрКт_ДкОбороты.ТипДанныхКорректировок = &Тип_Корректировка
	|		
	|ГДЕ
	|	ЕСТЬNULL(СвДт_ДкОбороты.СуммаУпрДтОборот, 0) <> 0
	|	ИЛИ ЕСТЬNULL(СвКт_ДкОбороты.СуммаУпрКтОборот, 0) <> 0
	|	ИЛИ ЕСТЬNULL(КрДт_ДкОбороты.СуммаУпрДтОборот, 0) <> 0
	|	ИЛИ ЕСТЬNULL(КрКт_ДкОбороты.СуммаУпрКтОборот, 0) <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблОперацийВГО.Ссылка,
	|" +?(ВыводитьСуммыВзм, "
	|	СпрВалюты.Ссылка,
    |", "") + "
	|	&Организация2
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТабл.ОперацияВГО,
	|	СУММА(ВремТабл.Св_СуммаУпрДт - ВремТабл.Св_СуммаУпрКт) КАК Св_СуммаУпр,	
	|	СУММА(ВремТабл.Кр_СуммаУпрДт - ВремТабл.Кр_СуммаУпрКт) КАК Кр_СуммаУпр,
	|" +?(ВыводитьСуммыВзм, "
	|	ВремТабл.Валюта,
	|	СУММА(ВремТабл.Св_СуммаВзмДт - ВремТабл.Св_СуммаВзмКт) КАК Св_СуммаВзм,
	|	СУММА(ВремТабл.Кр_СуммаВзмДт - ВремТабл.Кр_СуммаВзмКт) КАК Кр_СуммаВзм,
    |", "") + "  	
	|	ВремТабл.Организация
	|ИЗ
	|	ВремТабл КАК ВремТабл
	|				
	|СГРУППИРОВАТЬ ПО
	|	ВремТабл.ОперацияВГО,
	|" +?(ВыводитьСуммыВзм, "
	|	ВремТабл.Валюта,
	|", "") + "
	|	ВремТабл.Организация
	|
	|ИТОГИ
	|" +?(ВыводитьСуммыВзм, "
	|	СУММА(Св_СуммаВзм),
	|	СУММА(Кр_СуммаВзм),
	|", "") + "
	|	СУММА(Св_СуммаУпр),	
	|	СУММА(Кр_СуммаУпр)	
	|ПО
	|	Организация,
	|	ОперацияВГО
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблОперацийВГО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДкОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТабл
	|
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Выборка по организациям
	Выборка_Оргнизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка_Оргнизация.Следующий() Цикл
			
		НомерОрг = ?(Выборка_Оргнизация.Организация = Организация1, "1", "2");
		ИмяКолонкиОперации = "ОперацияВГО_" + НомерОрг;
		ЧастьИмениСумм 	   = "Орг" + НомерОрг + "_";
					
		// Выборка по группам операций ВГО 
		Выборка_Опрерация = Выборка_Оргнизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка_Опрерация.Следующий() Цикл
			
			ТекОперацияВГО = Выборка_Опрерация.ОперацияВГО;
			СтрокаДерева = КореньДерева.Найти(ТекОперацияВГО, ИмяКолонкиОперации, Истина);
			Если СтрокаДерева <> Неопределено Тогда
				
				СтрокаДерева["Св_" + ЧастьИмениСумм + "СуммаУпр"] = Выборка_Опрерация.Св_СуммаУпр;				
				СтрокаДерева["Кр_" + ЧастьИмениСумм + "СуммаУпр"] = Выборка_Опрерация.Кр_СуммаУпр;				
				Если ВыводитьСуммыВзм Тогда
					СтрокаДерева["Св_" + ЧастьИмениСумм + "СуммаВзм"] = Выборка_Опрерация.Св_СуммаВзм;
					СтрокаДерева["Кр_" + ЧастьИмениСумм + "СуммаВзм"] = Выборка_Опрерация.Кр_СуммаВзм;
				КонецЕсли;
				
				СтрокаДерева.ЭтоРасшифровкаПоОперациям = Истина;
				ВеткаОперации = СтрокаДерева.Строки;
				
				
				// Выборка по группам операций ВГО для валютных сумм и валют.
				Если ВыводитьСуммыВзм Тогда 				 	
				
					Выборка_Валюта = Выборка_Опрерация.Выбрать();
					Пока Выборка_Валюта.Следующий() Цикл
						
						ТекВалюта = Выборка_Валюта.Валюта;
						
						СтрокаДерева = ВеткаОперации.Найти(ТекВалюта, "Валюта");
						Если СтрокаДерева = Неопределено Тогда
							СтрокаДерева = ВеткаОперации.Добавить();
						КонецЕсли; 					
						СтрокаДерева.Валюта 							  = Выборка_Валюта.Валюта;
						СтрокаДерева["Св_" + ЧастьИмениСумм + "СуммаВзм"] = Выборка_Валюта.Св_СуммаВзм;
						СтрокаДерева["Кр_" + ЧастьИмениСумм + "СуммаВзм"] = Выборка_Валюта.Кр_СуммаВзм;
						СтрокаДерева.ЭтоРасшифровкаПоВалютам = Истина;
											
					КонецЦикла; // Выборка_Валюта
					
				КонецЕсли; // Если ВыводитьСуммыВзм 
			
			КонецЕсли; // Если в дереве есть строка с соответствующей операцией ВГО.
		
		КонецЦикла; // Выборка_Опрерация
	
	КонецЦикла; // Выборка_Оргнизация 
	
		
	// ----------------------------------------------------------------------
	// Подсчет итогов
	Для каждого СтрокаДерева Из КореньДерева Цикл
		ЗаполнитьДерево_ПересчитатьИтогиПоДереву(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДерево()


// Процедура Заполняет данные по входящему сальдо в таблице итогов.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
Функция ПолучитьРезультатПоВходящемуСальдо(СтруктураПараметров)
	
	ВыводитьСуммыВзм = СтруктураПараметров.ВыводитьСуммыВзм;
	
	Операция_НачальноеСальдо = Справочники.бит_вго_ОперацииВГО.НачальноеСальдо;	
	Организация1  	 = СтруктураПараметров.Организация1;
	
	ДопУсловие = ?(СтруктураПараметров.ИмяРегистраБухгалтерии = "бит_Бюджетирование", "И Сценарий = &Сценарий", "");		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"		, СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода" 		, КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("ОперацияВГО"  	    , Операция_НачальноеСальдо);
	Запрос.УстановитьПараметр("РегистрБухгалтерии"  , СтруктураПараметров.РегистрБухгалтерии);
	Запрос.УстановитьПараметр("Организация1" 		, СтруктураПараметров.Организация1);
	Запрос.УстановитьПараметр("Организация2"		, СтруктураПараметров.Организация2);
	Запрос.УстановитьПараметр("Контрагент1" 	 	, СтруктураПараметров.Контрагент1);
	Запрос.УстановитьПараметр("Контрагент2" 		, СтруктураПараметров.Контрагент2);
	Запрос.УстановитьПараметр("Сценарий" 	 		, СтруктураПараметров.Сценарий);
		
	Запрос.Текст = "	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДкОбороты.Организация, 	
	|	ДкОбороты.СуммаУпрДтОборот,
	|	ДкОбороты.СуммаУпрКтОборот,
	|" +?(ВыводитьСуммыВзм, "
	|	ДкОбороты.ВалютаДт,
	|	ДкОбороты.ВалютаКт,
	|	ДкОбороты.ВалютнаяСуммаДтОборот,
	|	ДкОбороты.ВалютнаяСуммаКтОборот,
	|", "") + "
	|	ДкОбороты.Контрагент
	|ПОМЕСТИТЬ ДкОбороты
	|ИЗ
	|	РегистрНакопления.бит_вго_ДанныеКорректировок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			ОперацияВГО = &ОперацияВГО
	|				И РегистрБухгалтерии = &РегистрБухгалтерии
	// |				И Сценарий = &Сценарий
	|				И ((Организация = &Организация1 И Контрагент = &Контрагент2)
	|					ИЛИ (Организация = &Организация2 И Контрагент = &Контрагент1))
	|				" + ДопУсловие + "
	|				) КАК ДкОбороты
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " + ?(ВыводитьСуммыВзм, "", "ПЕРВЫЕ 1") + "
	|	СпрВалюты.Ссылка
	|ПОМЕСТИТЬ СпрВалюты
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СвДт_ДкОрг1.СуммаУпрДтОборот, 0) КАК СвДт_Орг1_СуммаУпр,
	|	ЕСТЬNULL(СвКт_ДкОрг1.СуммаУпрКтОборот, 0) КАК СвКт_Орг1_СуммаУпр,
	|	ЕСТЬNULL(СвДт_ДкОрг2.СуммаУпрДтОборот, 0) КАК СвДт_Орг2_СуммаУпр,
	|	ЕСТЬNULL(СвКт_ДкОрг2.СуммаУпрКтОборот, 0) КАК СвКт_Орг2_СуммаУпр,
	|" +?(ВыводитьСуммыВзм, "
	|	СпрВалюты.Ссылка КАК Валюта,
	|	ЕСТЬNULL(СвДт_ДкОрг1.ВалютнаяСуммаДтОборот, 0) КАК СвДт_Орг1_СуммаВзм,
	|	ЕСТЬNULL(СвКт_ДкОрг1.ВалютнаяСуммаКтОборот, 0) КАК СвКт_Орг1_СуммаВзм,
	|	ЕСТЬNULL(СвДт_ДкОрг2.ВалютнаяСуммаДтОборот, 0) КАК СвДт_Орг2_СуммаВзм,
	|	ЕСТЬNULL(СвКт_ДкОрг2.ВалютнаяСуммаКтОборот, 0) КАК СвКт_Орг2_СуммаВзм,
	|", "") + "
	|	ВЫБОР
	|		КОГДА (НЕ СвДт_ДкОрг1.Организация ЕСТЬ NULL )
	|			ТОГДА СвДт_ДкОрг1.Организация
	|		КОГДА (НЕ СвКт_ДкОрг1.Организация ЕСТЬ NULL )
	|			ТОГДА СвКт_ДкОрг1.Организация
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Организация1,
	|	ВЫБОР
	|		КОГДА (НЕ СвДт_ДкОрг2.Организация ЕСТЬ NULL )
	|			ТОГДА СвДт_ДкОрг2.Организация
	|		КОГДА (НЕ СвКт_ДкОрг2.Организация ЕСТЬ NULL )
	|			ТОГДА СвКт_ДкОрг2.Организация
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Организация2
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	СпрВалюты КАК СпрВалюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвДт_ДкОрг1
	|		ПО (СвДт_ДкОрг1.Организация = &Организация1)
	|			И (СвДт_ДкОрг1.Контрагент = &Контрагент2)
	|" +?(ВыводитьСуммыВзм, "
	|			И (СвДт_ДкОрг1.ВалютаДт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвКт_ДкОрг1
	|		ПО (СвКт_ДкОрг1.Организация = &Организация1)
	|			И (СвКт_ДкОрг1.Контрагент = &Контрагент2)
	|" +?(ВыводитьСуммыВзм, "
	|			И (СвКт_ДкОрг1.ВалютаКт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвДт_ДкОрг2
	|		ПО (СвДт_ДкОрг2.Организация = &Организация2)
	|			И (СвДт_ДкОрг2.Контрагент = &Контрагент1)
	|" +?(ВыводитьСуммыВзм, "
	|			И (СвДт_ДкОрг2.ВалютаДт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвКт_ДкОрг2
	|		ПО (СвКт_ДкОрг2.Организация = &Организация2)
	|			И (СвКт_ДкОрг2.Контрагент = &Контрагент1)
	|" +?(ВыводитьСуммыВзм, "
	|			И (СвКт_ДкОрг2.ВалютаКт = СпрВалюты.Ссылка)
	|", "") + "
	|ГДЕ
	|	(СвДт_ДкОрг1.СуммаУпрДтОборот <> 0
	|			ИЛИ СвКт_ДкОрг1.СуммаУпрКтОборот <> 0
	|			ИЛИ СвДт_ДкОрг2.СуммаУпрДтОборот <> 0
	|			ИЛИ СвКт_ДкОрг2.СуммаУпрКтОборот <> 0)
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТабл.СвДт_Орг1_СуммаУпр - ВремТабл.СвКт_Орг1_СуммаУпр КАК Св_Орг1_СуммаУпр,
	|	ВремТабл.СвДт_Орг2_СуммаУпр - ВремТабл.СвКт_Орг2_СуммаУпр КАК Св_Орг2_СуммаУпр,
	|	0 														  КАК Кр_Орг1_СуммаУпр,
	|	0  														  КАК Кр_Орг2_СуммаУпр,
	|	(ВремТабл.СвДт_Орг1_СуммаУпр - ВремТабл.СвКт_Орг1_СуммаУпр + ВремТабл.СвДт_Орг2_СуммаУпр - ВремТабл.СвКт_Орг2_СуммаУпр) КАК СуммаРасхождения,
	|	0 КАК СуммаАбсолютногоРасхождения,
	|" +?(ВыводитьСуммыВзм, "
	|	ВремТабл.Валюта,
	|	ВремТабл.СвДт_Орг1_СуммаВзм - ВремТабл.СвКт_Орг1_СуммаВзм КАК Св_Орг1_СуммаВзм,
	|	ВремТабл.СвДт_Орг2_СуммаВзм - ВремТабл.СвКт_Орг2_СуммаВзм КАК Св_Орг2_СуммаВзм,
	|	0 														  КАК Кр_Орг1_СуммаВзм,
	|	0  														  КАК Кр_Орг2_СуммаВзм,
	|   (ВремТабл.СвДт_Орг1_СуммаВзм - ВремТабл.СвКт_Орг1_СуммаВзм + ВремТабл.СвДт_Орг2_СуммаВзм - ВремТабл.СвКт_Орг2_СуммаВзм) КАК СуммаРасхожденияВзм,
	|", "
	|	0 КАК СуммаРасхожденияВзм, ") + "
	|	0 КАК СуммаАбсолютногоРасхожденияВзм,	
	|	ВремТабл.Организация1,
	|	ВремТабл.Организация2
	|ИЗ
	|	ВремТабл КАК ВремТабл
	|
	|ИТОГИ
	|	СУММА(Св_Орг1_СуммаУпр),
	|	СУММА(Св_Орг2_СуммаУпр),
	|	СУММА(Кр_Орг1_СуммаУпр),
	|	СУММА(Кр_Орг2_СуммаУпр),
	|	СУММА(СуммаРасхождения),
	|	СУММА(СуммаАбсолютногоРасхождения),
	|" +?(ВыводитьСуммыВзм, "
	|	СУММА(Св_Орг1_СуммаВзм),
	|	СУММА(Св_Орг2_СуммаВзм),	
	|	СУММА(Кр_Орг1_СуммаВзм),
	|	СУММА(Кр_Орг2_СуммаВзм),	 	
	|", "") + "
	|	СУММА(СуммаРасхожденияВзм),
	|	СУММА(СуммаАбсолютногоРасхожденияВзм)
	|ПО
	|	ОБЩИЕ
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДкОбороты
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СпрВалюты
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТабл
	|
	|";     	
	
	РезультатЗапроса = Запрос.Выполнить();
	                      
	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьРезультатПоВходящемуСальдо()

// Процедура выводи данные по техническим операциям.
// 
// Параметры:
//  СтруктураПараметров - Структура.
// 
Функция ПолучитьРезультатПоТехническимОперациям(СтруктураПараметров)
	
	ВыводитьСуммыВзм = СтруктураПараметров.ВыводитьСуммыВзм;
	
	ДопУсловие = ?(СтруктураПараметров.ИмяРегистраБухгалтерии = "бит_Бюджетирование", "И Сценарий = &Сценарий", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"		 , СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода" 		 , КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("ВидОперации"			 , Перечисления.бит_вго_ВидыОперацийВГО.Техническая);
	Запрос.УстановитьПараметр("РегистрБухгалтерии"   , СтруктураПараметров.РегистрБухгалтерии);
	Запрос.УстановитьПараметр("Организация1" 		 , СтруктураПараметров.Организация1);
	Запрос.УстановитьПараметр("Организация2"		 , СтруктураПараметров.Организация2);
	Запрос.УстановитьПараметр("Контрагент1"  		 , СтруктураПараметров.Контрагент1);
	Запрос.УстановитьПараметр("Контрагент2" 		 , СтруктураПараметров.Контрагент2);
	Запрос.УстановитьПараметр("Сценарий" 	 		 , СтруктураПараметров.Сценарий);
	Запрос.УстановитьПараметр("Тип_СверкаВГО" 	 	 , Перечисления.бит_вго_ТипыДанныхКорректировок.СверкаВГО);
	Запрос.УстановитьПараметр("Тип_Корректировка" 	 , Перечисления.бит_вго_ТипыДанныхКорректировок.ПротоколРасхождения);
		
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	бит_вго_ОперацииВГО.Ссылка КАК ОперацияВГО
	|ПОМЕСТИТЬ ТаблОпераций
	|ИЗ
	|	Справочник.бит_вго_ОперацииВГО КАК бит_вго_ОперацииВГО
	|ГДЕ
	|	бит_вго_ОперацииВГО.ВидОперации = &ВидОперации
	|	И бит_вго_ОперацииВГО.ЭтоГруппа = ЛОЖЬ
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДкОбороты.ОперацияВГО 									КАК ОперацияВГО,
	|	СУММА(ЕСТЬNULL(ДкОбороты.СуммаУпрДтОборот, 0)) 			КАК СуммаУпрДт,
	|	СУММА(ЕСТЬNULL(-ДкОбороты.СуммаУпрКтОборот, 0)) 		КАК СуммаУпрКт,
	|" +?(ВыводитьСуммыВзм, "
	|	ДкОбороты.ВалютаДт,
	|	ДкОбороты.ВалютаКт,
	|	СУММА(ЕСТЬNULL(ДкОбороты.ВалютнаяСуммаДтОборот, 0)) 	КАК СуммаВзмДт,
	|	СУММА(ЕСТЬNULL(-ДкОбороты.ВалютнаяСуммаКтОборот, 0)) 	КАК СуммаВзмКт,
	|", "") + "
	|	ДкОбороты.Организация,
	|	ДкОбороты.Контрагент, 
	|	ДкОбороты.ТипДанныхКорректировок 						КАК ТипДанныхКорректировок
	|ПОМЕСТИТЬ ДкОбороты
	|ИЗ
	|	РегистрНакопления.бит_вго_ДанныеКорректировок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			РегистрБухгалтерии = &РегистрБухгалтерии
	// |			И Сценарий = &Сценарий
	|			И ОперацияВГО.ВидОперации = &ВидОперации
	|			И (Организация = &Организация1 И Контрагент = &Контрагент2
	|				ИЛИ Организация = &Организация2 И Контрагент = &Контрагент1)
	|			" + ДопУсловие + ") КАК ДкОбороты
    |
	|СГРУППИРОВАТЬ ПО
	|	ДкОбороты.ОперацияВГО,
	|	ДкОбороты.Организация,
	|" +?(ВыводитьСуммыВзм, "
	|	ДкОбороты.ВалютаДт,
	|	ДкОбороты.ВалютаКт,
	|", "") + "
	|	ДкОбороты.Контрагент,
	|	ДкОбороты.ТипДанныхКорректировок
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблОпераций.ОперацияВГО КАК ОперацияВГО, 	
	|	СУММА(СвДт_ДкОрг1.СуммаУпрДт) КАК Св_Орг1_СуммаУпрДт,
	|	СУММА(СвКт_ДкОрг1.СуммаУпрКт) КАК Св_Орг1_СуммаУпрКт,
	|	СУММА(КрДт_ДкОрг1.СуммаУпрДт) КАК Кр_Орг1_СуммаУпрДт,
	|	СУММА(КрКт_ДкОрг1.СуммаУпрКт) КАК Кр_Орг1_СуммаУпрКт,
	|	СУММА(СвДт_ДкОрг2.СуммаУпрДт) КАК Св_Орг2_СуммаУпрДт,
	|	СУММА(СвКт_ДкОрг2.СуммаУпрКт) КАК Св_Орг2_СуммаУпрКт,
	|	СУММА(КрДт_ДкОрг2.СуммаУпрДт) КАК Кр_Орг2_СуммаУпрДт,
	|	СУММА(КрКт_ДкОрг2.СуммаУпрКт) КАК Кр_Орг2_СуммаУпрКт,
	|	СУММА(ЕСТЬNULL(СвДт_ДкОрг1.СуммаУпрДт + СвКт_ДкОрг1.СуммаУпрКт, 0)) КАК Св_Орг1_СуммаУпр,
	|	СУММА(ЕСТЬNULL(КрДт_ДкОрг1.СуммаУпрДт + КрКт_ДкОрг1.СуммаУпрКт, 0)) КАК Кр_Орг1_СуммаУпр,
	|	СУММА(ЕСТЬNULL(СвДт_ДкОрг2.СуммаУпрДт + СвКт_ДкОрг2.СуммаУпрКт, 0)) КАК Св_Орг2_СуммаУпр,
	|	СУММА(ЕСТЬNULL(КрДт_ДкОрг2.СуммаУпрДт + КрКт_ДкОрг2.СуммаУпрКт, 0)) КАК Кр_Орг2_СуммаУпр,
	|	СУММА(ЕСТЬNULL(СвДт_ДкОрг1.СуммаУпрДт, 0) + ЕСТЬNULL(СвКт_ДкОрг1.СуммаУпрКт, 0) + ЕСТЬNULL(КрДт_ДкОрг1.СуммаУпрДт, 0) + ЕСТЬNULL(КрКт_ДкОрг1.СуммаУпрКт, 0) - ЕСТЬNULL(СвДт_ДкОрг2.СуммаУпрДт, 0) - ЕСТЬNULL(СвКт_ДкОрг2.СуммаУпрКт, 0) - ЕСТЬNULL(КрДт_ДкОрг2.СуммаУпрДт, 0) - ЕСТЬNULL(КрКт_ДкОрг2.СуммаУпрКт, 0)) КАК СуммаРасхождения,
	|" +?(ВыводитьСуммыВзм, "
	|	СпрВалюты.Ссылка КАК Валюта,
	|	СУММА(СвДт_ДкОрг1.СуммаВзмДт) КАК Св_Орг1_СуммаВзмДт,
	|	СУММА(СвКт_ДкОрг1.СуммаВзмКт) КАК Св_Орг1_СуммаВзмКт,
	|	СУММА(КрДт_ДкОрг1.СуммаВзмДт) КАК Кр_Орг1_СуммаВзмДт,
	|	СУММА(КрКт_ДкОрг1.СуммаВзмКт) КАК Кр_Орг1_СуммаВзмКт,
	|	СУММА(СвДт_ДкОрг2.СуммаВзмДт) КАК Св_Орг2_СуммаВзмДт,
	|	СУММА(СвКт_ДкОрг2.СуммаВзмКт) КАК Св_Орг2_СуммаВзмКт,
	|	СУММА(КрДт_ДкОрг2.СуммаВзмДт) КАК Кр_Орг2_СуммаВзмДт,
	|	СУММА(КрКт_ДкОрг2.СуммаВзмКт) КАК Кр_Орг2_СуммаВзмКт, 	
	|	СУММА(ЕСТЬNULL(СвДт_ДкОрг1.СуммаВзмДт + СвКт_ДкОрг1.СуммаВзмКт, 0)) КАК Св_Орг1_СуммаВзм,
	|	СУММА(ЕСТЬNULL(КрДт_ДкОрг1.СуммаВзмДт + КрКт_ДкОрг1.СуммаВзмКт, 0)) КАК Кр_Орг1_СуммаВзм,
	|	СУММА(ЕСТЬNULL(СвДт_ДкОрг2.СуммаВзмДт + СвКт_ДкОрг2.СуммаВзмКт, 0)) КАК Св_Орг2_СуммаВзм,
	|	СУММА(ЕСТЬNULL(КрДт_ДкОрг2.СуммаВзмДт + КрКт_ДкОрг2.СуммаВзмКт, 0)) КАК Кр_Орг2_СуммаВзм,
	|	СУММА(ЕСТЬNULL(СвДт_ДкОрг1.СуммаВзмДт, 0) + ЕСТЬNULL(СвКт_ДкОрг1.СуммаВзмКт, 0) + ЕСТЬNULL(КрДт_ДкОрг1.СуммаВзмДт, 0) + ЕСТЬNULL(КрКт_ДкОрг1.СуммаВзмКт, 0) - ЕСТЬNULL(СвДт_ДкОрг2.СуммаВзмДт, 0) - ЕСТЬNULL(СвКт_ДкОрг2.СуммаВзмКт, 0) - ЕСТЬNULL(КрДт_ДкОрг2.СуммаВзмДт, 0) - ЕСТЬNULL(КрКт_ДкОрг2.СуммаВзмКт, 0)) КАК СуммаРасхожденияВзм,
	|", "") + "
	|	ИСТИНА КАК ЕстьСуммы
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	ТаблОпераций КАК ТаблОпераций
	|" +?(ВыводитьСуммыВзм, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СпрВалюты
	|		ПО (СпрВалюты.ПометкаУдаления = ЛОЖЬ)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвДт_ДкОрг1
	|		ПО ТаблОпераций.ОперацияВГО = СвДт_ДкОрг1.ОперацияВГО
	|			И (СвДт_ДкОрг1.Организация = &Организация1)
	|			И (СвДт_ДкОрг1.Контрагент = &Контрагент2)
	|			И (СвДт_ДкОрг1.ТипДанныхКорректировок = &Тип_СверкаВГО)
	|" +?(ВыводитьСуммыВзм, "
	|			И (СвДт_ДкОрг1.ВалютаДт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвКт_ДкОрг1
	|		ПО ТаблОпераций.ОперацияВГО = СвКт_ДкОрг1.ОперацияВГО
	|			И (СвКт_ДкОрг1.Организация = &Организация1)
	|			И (СвКт_ДкОрг1.Контрагент = &Контрагент2)
	|			И (СвКт_ДкОрг1.ТипДанныхКорректировок = &Тип_СверкаВГО)
	|" +?(ВыводитьСуммыВзм, "
	|			И (СвКт_ДкОрг1.ВалютаКт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвДт_ДкОрг2
	|		ПО ТаблОпераций.ОперацияВГО = СвДт_ДкОрг2.ОперацияВГО
	|			И (СвДт_ДкОрг2.Организация = &Организация2)
	|			И (СвДт_ДкОрг2.Контрагент = &Контрагент1)
	|			И (СвДт_ДкОрг2.ТипДанныхКорректировок = &Тип_СверкаВГО)
	|" +?(ВыводитьСуммыВзм, "
	|			И (СвДт_ДкОрг2.ВалютаДт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК СвКт_ДкОрг2
	|		ПО ТаблОпераций.ОперацияВГО = СвКт_ДкОрг2.ОперацияВГО
	|			И (СвКт_ДкОрг2.Организация = &Организация2)
	|			И (СвКт_ДкОрг2.Контрагент = &Контрагент1)
	|			И (СвКт_ДкОрг2.ТипДанныхКорректировок = &Тип_СверкаВГО)
	|" +?(ВыводитьСуммыВзм, "
	|			И (СвКт_ДкОрг2.ВалютаКт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК КрДт_ДкОрг1
	|		ПО ТаблОпераций.ОперацияВГО = КрДт_ДкОрг1.ОперацияВГО
	|			И (КрДт_ДкОрг1.Организация = &Организация1)
	|			И (КрДт_ДкОрг1.Контрагент = &Контрагент2)
	|			И (КрДт_ДкОрг1.ТипДанныхКорректировок = &Тип_Корректировка)
	|" +?(ВыводитьСуммыВзм, "
	|			И (КрДт_ДкОрг1.ВалютаДт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК КрКт_ДкОрг1
	|		ПО ТаблОпераций.ОперацияВГО = КрКт_ДкОрг1.ОперацияВГО
	|			И (КрКт_ДкОрг1.Организация = &Организация1)
	|			И (КрКт_ДкОрг1.Контрагент = &Контрагент2)
	|			И (КрКт_ДкОрг1.ТипДанныхКорректировок = &Тип_Корректировка)
	|" +?(ВыводитьСуммыВзм, "
	|			И (КрКт_ДкОрг1.ВалютаКт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК КрДт_ДкОрг2
	|		ПО ТаблОпераций.ОперацияВГО = КрДт_ДкОрг2.ОперацияВГО
	|			И (КрДт_ДкОрг2.Организация = &Организация2)
	|			И (КрДт_ДкОрг2.Контрагент = &Контрагент1)
	|			И (КрДт_ДкОрг2.ТипДанныхКорректировок = &Тип_Корректировка)
	|" +?(ВыводитьСуммыВзм, "
	|			И (КрДт_ДкОрг2.ВалютаДт = СпрВалюты.Ссылка)
	|", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДкОбороты КАК КрКт_ДкОрг2
	|		ПО ТаблОпераций.ОперацияВГО = КрКт_ДкОрг2.ОперацияВГО
	|			И (КрКт_ДкОрг2.Организация = &Организация2)
	|			И (КрКт_ДкОрг2.Контрагент = &Контрагент1)
	|			И (КрКт_ДкОрг2.ТипДанныхКорректировок = &Тип_Корректировка)
	|" +?(ВыводитьСуммыВзм, "
	|			И (КрКт_ДкОрг2.ВалютаКт = СпрВалюты.Ссылка)
	|", "") + "
	|ГДЕ
	|	(СвДт_ДкОрг1.СуммаУпрДт <> 0
	|			ИЛИ СвКт_ДкОрг1.СуммаУпрКт <> 0
	|			ИЛИ СвДт_ДкОрг2.СуммаУпрДт <> 0
	|			ИЛИ СвКт_ДкОрг2.СуммаУпрКт <> 0
	|			ИЛИ КрДт_ДкОрг1.СуммаУпрДт <> 0
	|			ИЛИ КрКт_ДкОрг1.СуммаУпрКт <> 0
	|			ИЛИ КрДт_ДкОрг2.СуммаУпрДт <> 0
	|			ИЛИ КрКт_ДкОрг2.СуммаУпрКт <> 0
	|" +?(ВыводитьСуммыВзм, "
	|			ИЛИ СвДт_ДкОрг1.СуммаВзмДт <> 0
	|			ИЛИ СвКт_ДкОрг1.СуммаВзмКт <> 0
	|			ИЛИ СвДт_ДкОрг2.СуммаВзмДт <> 0
	|			ИЛИ СвКт_ДкОрг2.СуммаВзмКт <> 0
	|			ИЛИ КрДт_ДкОрг1.СуммаВзмДт <> 0
	|			ИЛИ КрКт_ДкОрг1.СуммаВзмКт <> 0
	|			ИЛИ КрДт_ДкОрг2.СуммаВзмДт <> 0
	|			ИЛИ КрКт_ДкОрг2.СуммаВзмКт <> 0
	|", "") + ")
    |
	|СГРУППИРОВАТЬ ПО
	|	ТаблОпераций.ОперацияВГО
	|" +?(ВыводитьСуммыВзм, ",
	|	СпрВалюты.Ссылка
	|", "") + "
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблОпераций.ОперацияВГО КАК ОперацияВГО,	
	|	ЕСТЬNULL(ВремТабл.Св_Орг1_СуммаУпрДт, 0) КАК Св_Орг1_СуммаУпрДт,
	|	ЕСТЬNULL(ВремТабл.Св_Орг1_СуммаУпрКт, 0) КАК Св_Орг1_СуммаУпрКт,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг1_СуммаУпрДт, 0) КАК Кр_Орг1_СуммаУпрДт,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг1_СуммаУпрКт, 0) КАК Кр_Орг1_СуммаУпрКт,
	|	ЕСТЬNULL(ВремТабл.Св_Орг1_СуммаУпр, 0) КАК Св_Орг1_СуммаУпр,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг1_СуммаУпр, 0) КАК Кр_Орг1_СуммаУпр,
	|	ЕСТЬNULL(ВремТабл.Св_Орг2_СуммаУпрДт, 0) КАК Св_Орг2_СуммаУпрДт,
	|	ЕСТЬNULL(ВремТабл.Св_Орг2_СуммаУпрКт, 0) КАК Св_Орг2_СуммаУпрКт,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг2_СуммаУпрДт, 0) КАК Кр_Орг2_СуммаУпрДт,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг2_СуммаУпрКт, 0) КАК Кр_Орг2_СуммаУпрКт,
	|	ЕСТЬNULL(ВремТабл.Св_Орг2_СуммаУпр, 0) КАК Св_Орг2_СуммаУпр,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг2_СуммаУпр, 0) КАК Кр_Орг2_СуммаУпр,
	|	ЕСТЬNULL(ВремТабл.СуммаРасхождения, 0) КАК СуммаРасхождения,
	|	0 КАК СуммаАбсолютногоРасхождения,
	|" +?(ВыводитьСуммыВзм, "
	|	ВремТабл.Валюта,	
	|	ЕСТЬNULL(ВремТабл.Св_Орг1_СуммаВзмДт, 0) КАК Св_Орг1_СуммаВзмДт,
	|	ЕСТЬNULL(ВремТабл.Св_Орг1_СуммаВзмКт, 0) КАК Св_Орг1_СуммаВзмКт,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг1_СуммаВзмДт, 0) КАК Кр_Орг1_СуммаВзмДт,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг1_СуммаВзмКт, 0) КАК Кр_Орг1_СуммаВзмКт,
	|	ЕСТЬNULL(ВремТабл.Св_Орг1_СуммаВзм, 0) КАК Св_Орг1_СуммаВзм,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг1_СуммаВзм, 0) КАК Кр_Орг1_СуммаВзм,
	|	ЕСТЬNULL(ВремТабл.Св_Орг2_СуммаВзмДт, 0) КАК Св_Орг2_СуммаВзмДт,
	|	ЕСТЬNULL(ВремТабл.Св_Орг2_СуммаВзмКт, 0) КАК Св_Орг2_СуммаВзмКт,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг2_СуммаВзмДт, 0) КАК Кр_Орг2_СуммаВзмДт,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг2_СуммаВзмКт, 0) КАК Кр_Орг2_СуммаВзмКт,
	|	ЕСТЬNULL(ВремТабл.Св_Орг2_СуммаВзм, 0) КАК Св_Орг2_СуммаВзм,
	|	ЕСТЬNULL(ВремТабл.Кр_Орг2_СуммаВзм, 0) КАК Кр_Орг2_СуммаВзм, 	
	|	ЕСТЬNULL(ВремТабл.СуммаРасхожденияВзм, 0) КАК СуммаРасхожденияВзм, 		
	|", "
	|	0 КАК СуммаРасхожденияВзм, ") + "
	|	0 КАК СуммаАбсолютногоРасхожденияВзм,
	|	ЕСТЬNULL(ВремТабл.ЕстьСуммы, Ложь) КАК ЕстьСуммы 	
	|ИЗ
	|	ТаблОпераций КАК ТаблОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТабл КАК ВремТабл
	|		ПО ТаблОпераций.ОперацияВГО = ВремТабл.ОперацияВГО
    |
	|УПОРЯДОЧИТЬ ПО
	|	ТаблОпераций.ОперацияВГО
	|ИТОГИ
	|	СУММА(Св_Орг1_СуммаУпрДт),
	|	СУММА(Св_Орг1_СуммаУпрКт),
	|	СУММА(Кр_Орг1_СуммаУпрДт),
	|	СУММА(Кр_Орг1_СуммаУпрКт),
	|	СУММА(Св_Орг1_СуммаУпр),
	|	СУММА(Кр_Орг1_СуммаУпр),
	|	СУММА(Св_Орг2_СуммаУпрДт),
	|	СУММА(Св_Орг2_СуммаУпрКт),
	|	СУММА(Кр_Орг2_СуммаУпрДт),
	|	СУММА(Кр_Орг2_СуммаУпрКт),
	|	СУММА(Св_Орг2_СуммаУпр),
	|	СУММА(Кр_Орг2_СуммаУпр),
	|	СУММА(СуммаРасхождения),
	|	СУММА(СуммаАбсолютногоРасхождения),
	|" +?(ВыводитьСуммыВзм, "
	|	СУММА(Св_Орг1_СуммаВзмДт),
	|	СУММА(Св_Орг1_СуммаВзмКт),
	|	СУММА(Кр_Орг1_СуммаВзмДт),
	|	СУММА(Кр_Орг1_СуммаВзмКт),
	|	СУММА(Св_Орг1_СуммаВзм),
	|	СУММА(Кр_Орг1_СуммаВзм),
	|	СУММА(Св_Орг2_СуммаВзмДт),
	|	СУММА(Св_Орг2_СуммаВзмКт),
	|	СУММА(Кр_Орг2_СуммаВзмДт),
	|	СУММА(Кр_Орг2_СуммаВзмКт),
	|	СУММА(Св_Орг2_СуммаВзм),
	|	СУММА(Кр_Орг2_СуммаВзм),	
	|", "") + "
	|	СУММА(СуммаРасхожденияВзм), 	
	|	СУММА(СуммаАбсолютногоРасхожденияВзм),
	|   МАКСИМУМ(ЕстьСуммы)
	|ПО
	|	Общие,
	|	ТаблОпераций.ОперацияВГО
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДкОбороты
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблОпераций
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТабл
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьРезультатПоТехническимОперациям()

// Функция получает данные по эффекту от пересчета.
// 
// Параметры:
//  СтруктураПараметров - Структура.
//  
// Возвращаемое значение:
//   Результат запроса.
// 
Функция ПолучитьРезультатПоЭффектуОтПересчета(СтруктураПараметров)

	ДопУсловие = ?(СтруктураПараметров.ИмяРегистраБухгалтерии = "бит_Бюджетирование", "И Сценарий = &Сценарий", "");
	     	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода"		 , СтруктураПараметров.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода" 		 , КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("ОперацияВГО"			 , Справочники.бит_вго_ОперацииВГО.ЭффектОтПересчета);
	Запрос.УстановитьПараметр("РегистрБухгалтерии"   , СтруктураПараметров.РегистрБухгалтерии);
	Запрос.УстановитьПараметр("Организация1" 		 , СтруктураПараметров.Организация1);
	Запрос.УстановитьПараметр("Организация2"		 , СтруктураПараметров.Организация2);
	Запрос.УстановитьПараметр("Контрагент1"  		 , СтруктураПараметров.Контрагент1);
	Запрос.УстановитьПараметр("Контрагент2" 		 , СтруктураПараметров.Контрагент2);
	Запрос.УстановитьПараметр("Сценарий" 	 		 , СтруктураПараметров.Сценарий);
	Запрос.Текст = " 	
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДкОбороты.Организация,
	|	СУММА(ДкОбороты.СуммаУпрДтОборот - ДкОбороты.СуммаУпрКтОборот) КАК Сумма
	|ИЗ
	|	РегистрНакопления.бит_вго_ДанныеКорректировок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			ОперацияВГО = &ОперацияВГО
	|				И РегистрБухгалтерии = &РегистрБухгалтерии
	// |				И Сценарий = &Сценарий
	|				" + ДопУсловие + "
	|				И (Организация = &Организация1 И Контрагент = &Контрагент2)	
	|				)КАК ДкОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДкОбороты.Организация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ДкОбороты.Организация,
	|	СУММА(ДкОбороты.СуммаУпрДтОборот - ДкОбороты.СуммаУпрКтОборот)
	|ИЗ
	|	РегистрНакопления.бит_вго_ДанныеКорректировок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			ОперацияВГО = &ОперацияВГО
	|				И РегистрБухгалтерии = &РегистрБухгалтерии
	// |				И Сценарий = &Сценарий
	|				" + ДопУсловие + "
	|				И (Организация = &Организация2 И Контрагент = &Контрагент1) 
	|				)КАК ДкОбороты
    |
	|СГРУППИРОВАТЬ ПО
	|	ДкОбороты.Организация 
	|";
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьРезультатПоЭффектуОтПересчета()

// Функция получить допустимое расхождение.
// 
// Параметры:
//  СтруктураПараметров - Структура.
//  
// Возвращаемое значение:
//  Число.
// 
Функция ПолучитьДопустимыеРасхождения(СтруктураПараметров)

	СтруктураРезультата = Новый Структура("ДопустимоеРасхождение, 
										|ДопустимоеРасхождениеВзаиморасчеты,
										|КонтролироватьДопустимоеРасхождение, 
										|КонтролироватьДопустимоеРасхождениеВзаиморасчеты",
										0, 
										0, 
										Ложь, 
										Ложь);
	
	ПвхВидыНастроек = ПланыВидовХарактеристик.бит_вго_ВидыНастроекСверкиВГО;
	
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить(ПвхВидыНастроек.ДопустимоеРасхождение);
	МассивНастроек.Добавить(ПвхВидыНастроек.ДопустимоеРасхождениеВзаиморасчеты);
	МассивНастроек.Добавить(ПвхВидыНастроек.КонтролироватьДопустимоеРасхождение);
	МассивНастроек.Добавить(ПвхВидыНастроек.КонтролироватьДопустимоеРасхождениеВзаиморасчеты);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата"	 , КонецДня(СтруктураПараметров.ДатаОкончания));
	Запрос.УстановитьПараметр("МассивНастроек", МассивНастроек);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкиПроведенияСверкиВГО.Настройка,
	|	НастройкиПроведенияСверкиВГО.Значение
	|ИЗ
	|	РегистрСведений.бит_вго_НастройкиПроведенияСверкиВГО.СрезПоследних(&Дата
	|						, Настройка В(&МассивНастроек)) КАК НастройкиПроведенияСверкиВГО
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Настройка = ПвхВидыНастроек.ДопустимоеРасхождение Тогда
			СтруктураРезультата.Вставить("ДопустимоеРасхождение", Выборка.Значение);
			
		ИначеЕсли Выборка.Настройка = ПвхВидыНастроек.ДопустимоеРасхождениеВзаиморасчеты Тогда	
			СтруктураРезультата.Вставить("ДопустимоеРасхождениеВзаиморасчеты", Выборка.Значение)
			
		ИначеЕсли Выборка.Настройка = ПвхВидыНастроек.КонтролироватьДопустимоеРасхождение Тогда	
			СтруктураРезультата.Вставить("КонтролироватьДопустимоеРасхождение", Выборка.Значение)
			
		ИначеЕсли Выборка.Настройка = ПвхВидыНастроек.КонтролироватьДопустимоеРасхождениеВзаиморасчеты Тогда	
			СтруктураРезультата.Вставить("КонтролироватьДопустимоеРасхождениеВзаиморасчеты", Выборка.Значение)
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции // ПолучитьДопустимыеРасхождения()

#КонецОбласти

#КонецОбласти

#КонецЕсли
