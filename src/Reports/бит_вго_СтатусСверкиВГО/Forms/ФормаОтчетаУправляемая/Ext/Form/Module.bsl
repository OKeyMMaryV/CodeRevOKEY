	
#Область ОписаниеПеременных

&НаКлиенте 
Перем мКэшРеквизитовФормы; // Хранит текущие значения реквизитов формы. Клиент.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_вго_СтатусСверкиВГО;
	фИмяОтчета 		= МетаданныеОбъекта.Имя;
	ПолноеИмяОтчета = МетаданныеОбъекта.ПолноеИмя();
	
	// Вызов механизма защиты
	
	
	Если фОтказ Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКэшЗначений(ПолноеИмяОтчета);
	          			
	Если ЗначениеЗаполнено(Параметры.Организация1) Тогда
	 	Отчет.Организация1 		 = Параметры.Организация1;
		Отчет.Контрагент1  		 = Параметры.Контрагент1;
		Отчет.Организация2 		 = Параметры.Организация2;
		Отчет.Контрагент2  		 = Параметры.Контрагент2;
		Отчет.Период 	   		 = Параметры.Период;
		Отчет.РегистрБухгалтерии = Параметры.РегистрБухгалтерии;
		Отчет.Сценарий 			 = Параметры.Сценарий;
		фВыводитьТехническиеОперации 	= Истина;
		фВыводитьПараметрыДанных 		= Истина;
		ИмяРегистраБухгалтерии   = ?(ЗначениеЗаполнено(Отчет.РегистрБухгалтерии), Отчет.РегистрБухгалтерии.ИмяОбъекта, "");
		УправлениеВидимостьюДоступностью();
		фСформироватьПриОткрытии = Истина;
	Иначе		
		// Настройки по умолчанию
		УстановитьЗначенияПоУмолчанию();
	КонецЕсли;
	
	// Установка периода сверки 
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Отчет.Период.ДатаНачала, 
														Отчет.Период.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Отчет.ПредставлениеПериодаСверкиВГО);
	
	
	фцЦветОбычный 		= Новый Цвет(0,0,0);
	фцЦветНесоответсвия = фцЦветОбычный; 
	фцЦветОшибки 		= ЦветаСтиля.ЦветОтрицательногоЧисла;
	фцЦветВалютный 		= Новый Цвет(0,100,0);
	фцГраницаСплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	фцГраницаПустая   = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	СоздатьДействияУровней();
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	
	фцЦветНесоответсвия = ?(фВыделятьСтрокиБезСоответствий, Новый Цвет(120,110,110), фцЦветОбычный);	
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Зададим имена реквизитов, подлежащих кешированию.
	мКэшРеквизитовФормы = Новый Структура;
	мКэшРеквизитовФормы.Вставить("РегистрБухгалтерии");
	мКэшРеквизитовФормы.Вставить("Организация1");
	мКэшРеквизитовФормы.Вставить("Контрагент1");
	мКэшРеквизитовФормы.Вставить("Организация2");
	мКэшРеквизитовФормы.Вставить("Контрагент2");
	мКэшРеквизитовФормы.Вставить("ДатаНачала");
	мКэшРеквизитовФормы.Вставить("ДатаОкончания");
	мКэшРеквизитовФормы.Вставить("Сценарий");
		
	Если фСформироватьприОткрытии Тогда
		СформироватьОтчетКлиент();	
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодДатаНачалаПриИзменении(Элемент)
	
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Отчет.Период.ДатаНачала, 
														Отчет.Период.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Отчет.ПредставлениеПериодаСверкиВГО);
	
КонецПроцедуры // ПериодДатаНачалаПриИзменении()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораИзСпискаПредставленияПериода(Элемент, 
												ЭтаФорма, 
												СтандартнаяОбработка, 
												Отчет.Период.ДатаНачала, 
												ПериодичностьСверкиВГО, 
												Отчет.ПредставлениеПериодаСверкиВГО);
	
	бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Отчет.Период.ДатаНачала, 
														Отчет.Период.ДатаОкончания, 
														ПериодичностьСверкиВГО, 
														Отчет.ПредставлениеПериодаСверкиВГО);

КонецПроцедуры // ПредставлениеПериодаСверкиВГОНачалоВыбора()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГОРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Отчет.ПредставлениеПериодаСверкиВГО) Тогда
		
		Отчет.Период.ДатаНачала = бит_Бюджетирование.ПолучитьПериодПоСдвигу(Отчет.Период.ДатаНачала, Направление, ПериодичностьСверкиВГО);
		бит_РаботаСДиалогамиСервер.ЗаполнитьДанныеИнтервала(Отчет.Период.ДатаНачала, 
															Отчет.Период.ДатаОкончания, 
															ПериодичностьСверкиВГО, 
															Отчет.ПредставлениеПериодаСверкиВГО);
		
	КонецЕсли;	
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГОРегулирование()

&НаКлиенте
Процедура ПредставлениеПериодаСверкиВГООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПредставлениеПериодаСверкиВГООчистка()

// Процедура - обработчик события "НачалоВыбора" поля ввода "РегистрБухгалтерии".
// 
&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить(фКэшЗначений.ВидОбъектаРегистрБухгалтерии);	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокВидовОбъектов);
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Отчет.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("ДоступныеОбъектыСистемы", фКэшЗначений.СписокДоступныхРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);
	
КонецПроцедуры // РегистрБухгалтерииНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "РегистрБухгалтерии".
// 
&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	ИзменениеРегистраБухгалтерииСервер();
	
КонецПроцедуры // РегистрБухгалтерииПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация1".
// 
&НаКлиенте
Процедура Организация1ПриИзменении(Элемент)
	
	ТекущаяОрганизация = Отчет.Организация1;
	
	Если мКэшРеквизитовФормы.Организация1 <> ТекущаяОрганизация Тогда
		
		Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
			
			СобственныеКонтрагенты = бит_ОбщегоНазначения.ПолучитьСписокСобственныхКонтрагентовПоОрганизации(ТекущаяОрганизация);
			Если СобственныеКонтрагенты.Количество() = 1 Тогда
				Отчет.Контрагент1 = СобственныеКонтрагенты[0].Значение;			
			Иначе
				Отчет.Контрагент1 = фКэшЗначений.ПустойКонтрагент;
			КонецЕсли;

		Иначе
			
			Отчет.Контрагент1 = фКэшЗначений.ПустойКонтрагент;
			
		КонецЕсли;
		
		мКэшРеквизитовФормы.Организация1 = ТекущаяОрганизация;
		
	КонецЕсли;
	
КонецПроцедуры // Организация1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Организация2".
// 
&НаКлиенте
Процедура Организация2ПриИзменении(Элемент)
	
	ТекущаяОрганизация = Отчет.Организация2;
	
	Если мКэшРеквизитовФормы.Организация2 <> ТекущаяОрганизация Тогда
		
		Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
			
			СобственныеКонтрагенты = бит_ОбщегоНазначения.ПолучитьСписокСобственныхКонтрагентовПоОрганизации(ТекущаяОрганизация);
			Если СобственныеКонтрагенты.Количество() = 1 Тогда
				Отчет.Контрагент2 = СобственныеКонтрагенты[0].Значение;			
			Иначе
				Отчет.Контрагент2 = фКэшЗначений.ПустойКонтрагент;
			КонецЕсли;

		Иначе
			
			Отчет.Контрагент2 = фКэшЗначений.ПустойКонтрагент;
			
		КонецЕсли;
		
		мКэшРеквизитовФормы.Организация1 = ТекущаяОрганизация;
		
	КонецЕсли;
	
КонецПроцедуры // Организация2ПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Контрагент1".
// 
&НаКлиенте
Процедура Контрагент1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораКонтрагента(Отчет.Организация1, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // Контрагент1НачалоВыбора()
              
// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент1".
// 
&НаКлиенте
Процедура Контрагент1ПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Отчет.Организация1) Тогда
		
		ТекущийКонтрагент = Отчет.Контрагент1;
		
		Если мКэшРеквизитовФормы.Контрагент1 <> ТекущийКонтрагент Тогда
			Отчет.Организация1 = бит_ОбщегоНазначения.ПолучитьСобственнуюОрганизациюПоКонтрагенту(ТекущийКонтрагент);
			мКэшРеквизитовФормы.Контрагент1 = ТекущийКонтрагент;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Контрагент1ПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Контрагент2".
// 
&НаКлиенте
Процедура Контрагент2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораКонтрагента(Отчет.Организация2, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры // Контрагент2НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент2".
// 
&НаКлиенте
Процедура Контрагент2ПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Отчет.Организация2) Тогда
		
		ТекущийКонтрагент = Отчет.Контрагент2;
		
		Если мКэшРеквизитовФормы.Контрагент2 <> ТекущийКонтрагент Тогда
			Отчет.Организация2 = бит_ОбщегоНазначения.ПолучитьСобственнуюОрганизациюПоКонтрагенту(ТекущийКонтрагент);
			мКэшРеквизитовФормы.Контрагент2 = ТекущийКонтрагент;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Контрагент2ПриИзменении()
                          
// Процедура - обработчик события "ПриИзменении" поля ввода "ПериодДатаОкончания".
// 
&НаКлиенте
Процедура ПериодДатаОкончанияПриИзменении(Элемент)
	
	Если мКэшРеквизитовФормы.ДатаОкончания <> Отчет.Период.ДатаОкончания Тогда
		ПересчитатьКурсСверки();
		мКэшРеквизитовФормы.ДатаОкончания = Отчет.Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры // ПериодДатаОкончанияПриИзменении()

//// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаСверки".
////
// &НаКлиенте
// Процедура ВалютаСверкиПриИзменении(Элемент)
// 	
// 	Если мКэшРеквизитовФормы.ВалютаСверки <> Отчет.ВалютаСверки Тогда
// 		ПересчитатьКурсСверки();
// 		мКэшРеквизитовФормы.ВалютаСверки = Отчет.ВалютаСверки;
// 	КонецЕсли;
// 	
// КонецПроцедуры //  ВалютаСверкиПриИзменении()

// Процедура - обработчик события "ПриАктивизацииОбласти" поля табличного документа "ТабДокОтчет".
// 
&НаКлиенте
Процедура ТабДокОтчетПриАктивизацииОбласти(Элемент)
	
	СуммаОтчета = бит_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ТабДокОтчет);
	
КонецПроцедуры // РезультатПриАктивизацииОбласти()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "ОтчетСформировать".
// 
&НаКлиенте
Процедура ОтчетСформировать(Команда)
	
	СформироватьОтчетКлиент();
	
КонецПроцедуры // ОтчетСформировать()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();	
	
КонецПроцедуры // КомандаПанельНастроек()

// Процедура - обработчик команды "Результат_ПоказатьВОтдельномОкне".
// 
&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(ТабДокОтчет);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()

// Процедура - действие динамически создаваемых команд "ТабДокОтчетУровень_<й>". 
// Выполняется свертка/разворачивание табличного документа. 
// 
&НаКлиенте
Процедура ДействиеТабДокОтчетУровень(Команда)
	
	КнопкиУровней = Элементы.ТабДокОтчетГруппаУровни.ПодчиненныеЭлементы;
	
	НомПодчерк = Найти(Команда.Имя, "_");
	Если НомПодчерк > 0 Тогда
	
		 НомУровняСтр = Сред(Команда.Имя, НомПодчерк + 1);
		 Попытка 			 
			 НомУровня = Число(НомУровняСтр);  		 
		 Исключение  			 
			 НомУровня = -1;    			 
		 КонецПопытки; 
		 
		 Если НомУровня > 0 Тогда
			 
			ТабДокОтчет.ПоказатьУровеньГруппировокСтрок(НомУровня-1);
		    
		   	Сн = 1;
		  	Для каждого Кнопка Из КнопкиУровней Цикл 		   
		   	   	Кнопка.Пометка = Ложь;     			   
			   	Если Сн = НомУровня Тогда   			   
			   		Кнопка.Пометка = Истина;  			   
			   	КонецЕсли;    			   
			   	Сн = Сн + 1;
		   	КонецЦикла; 
		   
		 КонецЕсли; 
		 
		 фУровеньПросмотраТд = НомУровня;
		 
	 КонецЕсли;
	
КонецПроцедуры // ДействиеТабДокОтчетУровень()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииПоРаботеСНастройками

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Отчеты[фИмяОтчета].Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		СтруктураНастроек.Вставить(ИмяРеквизита, Отчет[ИмяРеквизита]);	
	КонецЦикла; 
		
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	ТабДокОтчет.Очистить();
	
	СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	ЗаполнитьЗначенияСвойств(Отчет, СтруктураНастроек);
		
	ИзменениеРегистраБухгалтерииСервер();
	
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда	
		ПрименитьНастройки(НастройкаПоУмолчанию);
	Иначе
		Отчет.Период.Вариант = ВариантСтандартногоПериода.ЭтотГод; 		
		фВыводитьПараметрыДанных 	 = Истина;
		ИмяРегистраБухгалтерии  = ?(ЗначениеЗаполнено(Отчет.РегистрБухгалтерии), Отчет.РегистрБухгалтерии.ИмяОбъекта, "");
		УправлениеВидимостьюДоступностью();
	КонецЕсли;
	
	фВыводитьТехническиеОперации = Истина;
	      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",
											ПараметрыФормы,
											ЭтаФорма);	
													
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура - завершение обработчика события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(Настройка, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Настройка) Тогда		
		ПрименитьНастройки(Настройка);		
	КонецЕсли;
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()

#КонецОбласти

// Процедура формирует отчет
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура СформироватьОтчет(СтрРегистрация)

	// Очистка табличного документа
	ТабДокОтчет.Очистить();
	
	
	// ---------------------------------------------------------------
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаНачала"		 	 , Отчет.Период.ДатаНачала);
	СтруктураПараметров.Вставить("ДатаОкончания" 		 , Отчет.Период.ДатаОкончания);
	СтруктураПараметров.Вставить("РегистрБухгалтерии"    , Отчет.РегистрБухгалтерии);
	СтруктураПараметров.Вставить("Организация1" 		 , Отчет.Организация1);
	СтруктураПараметров.Вставить("Организация2"		 	 , Отчет.Организация2);
	СтруктураПараметров.Вставить("Контрагент1"  		 , Отчет.Контрагент1);
	СтруктураПараметров.Вставить("Контрагент2" 		 	 , Отчет.Контрагент2);
	СтруктураПараметров.Вставить("Сценарий" 	 		 , Отчет.Сценарий);
	СтруктураПараметров.Вставить("ИмяРегистраБухгалтерии", ИмяРегистраБухгалтерии);
	СтруктураПараметров.Вставить("ВыводитьСуммыВзм", фВыводитьСуммыВзаиморасчетов);
	СтруктураПараметров.Вставить("ВыводитьТехнОпер", фВыводитьТехническиеОперации);
		    
	ХранилищеДанныхСтатусаСверки = Отчеты.бит_вго_СтатусСверкиВГО.ПолучитьДанныеДляФормированияСтатусаСверки(СтруктураПараметров);
	СтруктураДанныхСтатусаСверки = ХранилищеДанныхСтатусаСверки.Получить();
	
	ТаблицаИтогов 		 		 	= СтруктураДанныхСтатусаСверки.ТаблицаИтогов;
	ДеревоПоВходящемуСальдо			= СтруктураДанныхСтатусаСверки.ДеревоПоВходящемуСальдо;
	ДеревоДанныхОтчета	  		 	= СтруктураДанныхСтатусаСверки.ДеревоДанныхСверки;
	ДеревоПоТехническимОперациям    = СтруктураДанныхСтатусаСверки.ДеревоПоТехническимОперациям;
	
	ДопустимоеРасхождение 		 	= ?(СтруктураДанныхСтатусаСверки.КонтролироватьДопустимоеРасхождение, СтруктураДанныхСтатусаСверки.ДопустимоеРасхождение, Неопределено);
	ДопустимоеРасхождениеВзм		= ?(СтруктураДанныхСтатусаСверки.КонтролироватьДопустимоеРасхождениеВзм, СтруктураДанныхСтатусаСверки.ДопустимоеРасхождениеВзм, Неопределено);
		
	Орг1_СуммаЭффектаОтПересчета 	= СтруктураДанныхСтатусаСверки.Орг1_СуммаЭффектаОтПересчета;
	Орг2_СуммаЭффектаОтПересчета 	= СтруктураДанныхСтатусаСверки.Орг2_СуммаЭффектаОтПересчета;	
		
	
	// ---------------------------------------------------------------
	// Табличный документ
		
	Макет = Отчеты[фИмяОтчета].ПолучитьМакет("Макет");
	
	ЗаголовокРасхождениеОбычноеУпр    = "Расхождение" + Символы.ПС + "(упр)";
	ЗаголовокРасхождениеАбсолютноеУпр = "Абсолютное" + Символы.ПС + "расхождение (упр)";
	ЗаголовокРасхождениеОбычноеВзм    = "Расхождение" + Символы.ПС + "(взаиморасчеты)";
	ЗаголовокРасхождениеАбсолютноеВзм = "Абсолютное" + Символы.ПС + "расхождение (взм)";
		
	ЗаголовокГруппыСуммаУпр = "Суммы упр.";
	ЗаголовокГруппыСуммаВзм = "Суммы взаиморасчетов";
	
	// ----------------------------------------------------------------------
	// Пустая строка - разделитель
	ОбластьПропуск = Макет.ПолучитьОбласть("Пропуск");
	
	
	// ----------------------------------------------------------------------
	// Заголовок
	Если фВыводитьПараметрыДанных Тогда
		
		ОбластьЗаголовок   		  			  = Макет.ПолучитьОбласть("Заголовок");	
		
		ОбластьЗаголовок.Параметры.Организация1 = Отчет.Организация1;
		ОбластьЗаголовок.Параметры.Организация2 = Отчет.Организация2;
		ТабДокОтчет.Вывести(ОбластьЗаголовок);
		
	КонецЕсли;	
		
	
	// ----------------------------------------------------------------------
	// Шапка
	
	Область_Орг1    	= Макет.ПолучитьОбласть("Шапка | Организация_1");
	Область_Орг2  		= Макет.ПолучитьОбласть("Шапка | Организация_2");
	Область_Валюты 		= Макет.ПолучитьОбласть("Шапка | Валюты");
	Область_Ресурсы 	= Макет.ПолучитьОбласть("Шапка | Ресурсы");
	Область_Расхождение = Макет.ПолучитьОбласть("Шапка | Расхождение");
	
	Область_Орг1.Параметры.Организация1 = Отчет.Организация1;
	ТабДокОтчет.Вывести(Область_Орг1);
	Область_Ресурсы.Параметры.ЗаголовокГруппы = ЗаголовокГруппыСуммаУпр; 
	ТабДокОтчет.Присоединить(Область_Ресурсы);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		ТабДокОтчет.Присоединить(Область_Валюты);
		Область_Ресурсы.Параметры.ЗаголовокГруппы = ЗаголовокГруппыСуммаВзм;
		ТабДокОтчет.Присоединить(Область_Ресурсы);
	КонецЕсли;
	Область_Орг2.Параметры.Организация2 = Отчет.Организация2;
	ТабДокОтчет.Присоединить(Область_Орг2);
	Область_Ресурсы.Параметры.ЗаголовокГруппы = ЗаголовокГруппыСуммаУпр;
	ТабДокОтчет.Присоединить(Область_Ресурсы);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		ТабДокОтчет.Присоединить(Область_Валюты);
		Область_Ресурсы.Параметры.ЗаголовокГруппы = ЗаголовокГруппыСуммаВзм;
		ТабДокОтчет.Присоединить(Область_Ресурсы);
	КонецЕсли;
	
	Область_Расхождение.Параметры.ЗаголовокРасхождение = ЗаголовокРасхождениеОбычноеУпр;
	ТабДокОтчет.Присоединить(Область_Расхождение);
	Область_Расхождение.Параметры.ЗаголовокРасхождение = ЗаголовокРасхождениеАбсолютноеУпр;
	ТабДокОтчет.Присоединить(Область_Расхождение);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		Область_Расхождение.Параметры.ЗаголовокРасхождение = ЗаголовокРасхождениеОбычноеВзм;
		ТабДокОтчет.Присоединить(Область_Расхождение);
		Область_Расхождение.Параметры.ЗаголовокРасхождение = ЗаголовокРасхождениеАбсолютноеВзм;
		ТабДокОтчет.Присоединить(Область_Расхождение);
	КонецЕсли;

		
	// ----------------------------------------------------------------------
	// Входящее сальдо
	
	ТабДокОтчет.Вывести(ОбластьПропуск, 0);
	
	СтруктураОбластей = Новый Структура;
	СтруктураОбластей.Вставить("ОбластьГруппа_Орг1"		   , Макет.ПолучитьОбласть("ГруппаВходящееСальдо | Организация_1"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Орг2"		   , Макет.ПолучитьОбласть("ГруппаВходящееСальдо | Организация_2"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Валюты"	   , Макет.ПолучитьОбласть("ГруппаВходящееСальдо | Валюты"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Ресурсы"	   , Макет.ПолучитьОбласть("ГруппаВходящееСальдо | Ресурсы"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Расхождение" , Макет.ПолучитьОбласть("ГруппаВходящееСальдо | Расхождение"));
	                                                                	
	ВывестиБлокСальдо(ТаблицаИтогов, СтруктураОбластей);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		СтруктураОбластей.Вставить("ОбластьВал_Орг1"		, Макет.ПолучитьОбласть("СтрокаВалВходящееСальдо | Организация_1"));
		СтруктураОбластей.Вставить("ОбластьВал_Орг2"		, Макет.ПолучитьОбласть("СтрокаВалВходящееСальдо | Организация_2"));
		СтруктураОбластей.Вставить("ОбластьВал_Валюты"	    , Макет.ПолучитьОбласть("СтрокаВалВходящееСальдо | Валюты"));
		СтруктураОбластей.Вставить("ОбластьВал_Ресурсы"	    , Макет.ПолучитьОбласть("СтрокаВалВходящееСальдо | Ресурсы"));
		СтруктураОбластей.Вставить("ОбластьВал_Расхождение" , Макет.ПолучитьОбласть("СтрокаВалВходящееСальдо | Расхождение"));
    	ВывестиБлокВалНачальногоСальдо(ДеревоПоВходящемуСальдо.Строки, СтруктураОбластей);
	КонецЕсли;                                                     	
		
	// ----------------------------------------------------------------------
	// Обороты и движение ДС
	
	Область_Орг1_ГруппаОбороты    = Макет.ПолучитьОбласть("ГруппаОбороты | Организация_1");
	Область_Орг2_ГруппаОбороты    = Макет.ПолучитьОбласть("ГруппаОбороты | Организация_2");
	Область_Орг1_ГруппаДвиженияДс = Макет.ПолучитьОбласть("ГруппаДвижениеДС | Организация_1");
	Область_Орг2_ГруппаДвиженияДс = Макет.ПолучитьОбласть("ГруппаДвижениеДС | Организация_2");
	Область_Валюты_Группа		  = Макет.ПолучитьОбласть("ГруппаОбороты | Валюты");
	Область_Ресурсы_Группа 	      = Макет.ПолучитьОбласть("ГруппаОбороты | Ресурсы");
	Область_Расхождение_Группа    = Макет.ПолучитьОбласть("ГруппаОбороты | Расхождение");
	
	Область_Орг1    	= Макет.ПолучитьОбласть("Строка | Организация_1");
	Область_Орг2  		= Макет.ПолучитьОбласть("Строка | Организация_2");
	Область_Валюты 		= Макет.ПолучитьОбласть("Строка | Валюты");
	Область_Ресурсы 	= Макет.ПолучитьОбласть("Строка | Ресурсы");
	Область_Расхождение = Макет.ПолучитьОбласть("Строка | Расхождение");
		
	СтруктураОбластейСтрок = Новый Структура;
	ОбластьСоответствия_Орг1 	  	= Макет.ПолучитьОбласть("СтрокаСоответствия | Организация_1");
	ОбластьСоответствия_Орг2 	  	= Макет.ПолучитьОбласть("СтрокаСоответствия | Организация_2");
	ОбластьСоответствия_Валюты 		= Макет.ПолучитьОбласть("СтрокаСоответствия | Валюты");
	ОбластьСоответствия_Ресурсы 	= Макет.ПолучитьОбласть("СтрокаСоответствия | Ресурсы");	
	ОбластьСоответствия_Расхождение = Макет.ПолучитьОбласть("СтрокаСоответствия | Расхождение");	
	СтруктураОбластейСтрок.Вставить("ОбластьСоответствия_Орг1" 		 , ОбластьСоответствия_Орг1);
	СтруктураОбластейСтрок.Вставить("ОбластьСоответствия_Орг2" 		 , ОбластьСоответствия_Орг2);
	СтруктураОбластейСтрок.Вставить("ОбластьСоответствия_Валюты" 	 , ОбластьСоответствия_Валюты);
	СтруктураОбластейСтрок.Вставить("ОбластьСоответствия_Ресурсы" 	 , ОбластьСоответствия_Ресурсы);
	СтруктураОбластейСтрок.Вставить("ОбластьСоответствия_Расхождение", ОбластьСоответствия_Расхождение);
	СтруктураОбластейСтрок.Вставить("ОбластьСтрока_Орг1"	   
					, ?(фВыделятьСтрокиБезСоответствий, Макет.ПолучитьОбласть("Строка | Организация_1"), ОбластьСоответствия_Орг1));
	СтруктураОбластейСтрок.Вставить("ОбластьСтрока_Орг2"	   
					, ?(фВыделятьСтрокиБезСоответствий, Макет.ПолучитьОбласть("Строка | Организация_2"), ОбластьСоответствия_Орг2));
	СтруктураОбластейСтрок.Вставить("ОбластьСтрока_Валюты"	   
					, ?(фВыделятьСтрокиБезСоответствий, Макет.ПолучитьОбласть("Строка | Валюты"), ОбластьСоответствия_Валюты));
	СтруктураОбластейСтрок.Вставить("ОбластьСтрока_Ресурсы"	   
					, ?(фВыделятьСтрокиБезСоответствий, Макет.ПолучитьОбласть("Строка | Ресурсы"), ОбластьСоответствия_Ресурсы));
    СтруктураОбластейСтрок.Вставить("ОбластьСтрока_Расхождение"
					, ?(фВыделятьСтрокиБезСоответствий, Макет.ПолучитьОбласть("Строка | Расхождение"), ОбластьСоответствия_Расхождение));
	СтруктураОбластейСтрок.Вставить("ОбластьВал_Орг1" 		 , Макет.ПолучитьОбласть("СтрокаВал | Организация_1"));
	СтруктураОбластейСтрок.Вставить("ОбластьВал_Орг2" 		 , Макет.ПолучитьОбласть("СтрокаВал | Организация_2"));
	СтруктураОбластейСтрок.Вставить("ОбластьВал_Валюты" 	 , Макет.ПолучитьОбласть("СтрокаВал | Валюты"));
	СтруктураОбластейСтрок.Вставить("ОбластьВал_Ресурсы" 	 , Макет.ПолучитьОбласть("СтрокаВал | Ресурсы"));
	СтруктураОбластейСтрок.Вставить("ОбластьВал_Расхождение" , Макет.ПолучитьОбласть("СтрокаВал | Расхождение"));
	
	КореньДерева = ДеревоДанныхОтчета.Строки;
	фМаксимальныйУровеньДерева = 1;
	Для каждого СтрокаДереваИтоги Из КореньДерева Цикл
		
		ТабДокОтчет.Вывести(ОбластьПропуск, 0);
		
		// Вывод строк - группировок
		Если СтрокаДереваИтоги.ЭтоОбороты Тогда
			ВыводимаяОбласть_Орг1 	 = Область_Орг1_ГруппаОбороты;
			ВыводимаяОбласть_Орг2 	 = Область_Орг2_ГруппаОбороты;
		Иначе
			ВыводимаяОбласть_Орг1 	 = Область_Орг1_ГруппаДвиженияДс;
			ВыводимаяОбласть_Орг2 	 = Область_Орг2_ГруппаДвиженияДс;
		КонецЕсли;	
		
		// Строка - группировка
		СтруктураОбластей = Новый Структура;
		СтруктураОбластей.Вставить("ОбластьГруппа_Орг1"	 		, ВыводимаяОбласть_Орг1);
		СтруктураОбластей.Вставить("ОбластьГруппа_Орг2"	 		, ВыводимаяОбласть_Орг2);
		СтруктураОбластей.Вставить("ОбластьГруппа_Валюты"	 	, Область_Валюты_Группа);
		СтруктураОбластей.Вставить("ОбластьГруппа_Ресурсы"	 	, Область_Ресурсы_Группа);
		СтруктураОбластей.Вставить("ОбластьГруппа_Расхождение"  , Область_Расхождение_Группа);
		ВывестиБлокПоРесурсам(СтруктураОбластей, СтрокаДереваИтоги, 0);
		
		// Вывод данных по оборотам или движениям ДС.
		ТабДокОтчет.НачатьГруппуСтрок();
		ВывестиСтрокиТабличногоДокумента(СтрокаДереваИтоги.Строки, СтруктураОбластейСтрок, 1);
		ТабДокОтчет.ЗакончитьГруппуСтрок();
	
	КонецЦикла;	
	
	// ----------------------------------------------------------------------
	// Технические операции
	
	Если фВыводитьТехническиеОперации Тогда

		КореньДерева = ДеревоПоТехническимОперациям.Строки;
		Если КореньДерева.Количество() > 0 Тогда
		
			ТабДокОтчет.Вывести(ОбластьПропуск, 0);		
			ВывестиДанныеПоТехническимОперациям(КореньДерева, Макет); 		
		
		КонецЕсли;
	
	КонецЕсли;

	
	// ----------------------------------------------------------------------
	// Конечное сальдо
	
	ТабДокОтчет.Вывести(ОбластьПропуск, 0);
						
	СтруктураОбластей = Новый Структура;
	СтруктураОбластей.Вставить("ОбластьГруппа_Орг1"		  , Макет.ПолучитьОбласть("ГруппаКонечноеСальдо | Организация_1"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Орг2"		  , Макет.ПолучитьОбласть("ГруппаКонечноеСальдо | Организация_2"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Валюты"	  , Макет.ПолучитьОбласть("ГруппаКонечноеСальдо | Валюты"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Ресурсы"	  , Макет.ПолучитьОбласть("ГруппаКонечноеСальдо | Ресурсы"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Расхождение", Макет.ПолучитьОбласть("ГруппаКонечноеСальдо | Расхождение"));
	
	ВывестиБлокСальдо(ТаблицаИтогов, СтруктураОбластей, Истина, ДопустимоеРасхождение, ДопустимоеРасхождениеВзм);
	
	
	// ----------------------------------------------------------------------
	// Эффект от пересчета
	
	Область_Орг1    	= Макет.ПолучитьОбласть("ЭффектОтПересчета | Организация_1");
	Область_Орг2  		= Макет.ПолучитьОбласть("ЭффектОтПересчета | Организация_2");
	Область_Валюты 		= Макет.ПолучитьОбласть("ЭффектОтПересчета | Валюты");
	Область_Ресурсы 	= Макет.ПолучитьОбласть("ЭффектОтПересчета | Ресурсы");
	Область_Расхождение = Макет.ПолучитьОбласть("ЭффектОтПересчета | Расхождение");
	
	ТабДокОтчет.Вывести(Область_Орг1);
	Область_Ресурсы.Параметры.Сумма = Орг1_СуммаЭффектаОтПересчета;
	ТабДокОтчет.Присоединить(Область_Ресурсы);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		ТабДокОтчет.Присоединить(Область_Валюты);
		Область_Ресурсы.Параметры.Сумма = 0;
		ТабДокОтчет.Присоединить(Область_Ресурсы);		
	КонецЕсли;

	ТабДокОтчет.Присоединить(Область_Орг2);
	Область_Ресурсы.Параметры.Сумма = Орг2_СуммаЭффектаОтПересчета;
	ТабДокОтчет.Присоединить(Область_Ресурсы);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		ТабДокОтчет.Присоединить(Область_Валюты);
		Область_Ресурсы.Параметры.Сумма = 0;
		ТабДокОтчет.Присоединить(Область_Ресурсы);		
	КонецЕсли;
	
	ТабДокОтчет.Присоединить(Область_Расхождение);
	ТабДокОтчет.Присоединить(Область_Расхождение);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		ТабДокОтчет.Присоединить(Область_Расхождение);
		ТабДокОтчет.Присоединить(Область_Расхождение);		
	КонецЕсли;
	
	
	// ----------------------------------------------------------------------
	// Допустимые расхождения
	
	ТабДокОтчет.Вывести(ОбластьПропуск, 0);
	
	Область_ДопустимоеРасхождение = Макет.ПолучитьОбласть("ДопустимоеРасхождение");
	Область_ДопустимоеРасхождение.Параметры.СтрокаВалюта = "в валюте управленческого учета";
	Область_ДопустимоеРасхождение.Параметры.ДопустимоеРасхождение = ?(ДопустимоеРасхождение <> Неопределено, ДопустимоеРасхождение, "не учитывается");
	ТабДокОтчет.Вывести(Область_ДопустимоеРасхождение);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		Область_ДопустимоеРасхождение.Параметры.СтрокаВалюта = "в валютах взаиморасчетов";
		Область_ДопустимоеРасхождение.Параметры.ДопустимоеРасхождение = ?(ДопустимоеРасхождениеВзм <> Неопределено, ДопустимоеРасхождениеВзм, "не учитывается");
		ТабДокОтчет.Вывести(Область_ДопустимоеРасхождение);
    КонецЕсли;                   	
	
	// ----------------------------------------------------------------------
	// Параметры табличного документа
	ТабДокОтчет.ФиксацияСверху = ?(фВыводитьПараметрыДанных, 6, 3);
	СоздатьДействияУровней();
	ТабДокОтчет.ПоказатьУровеньГруппировокСтрок(фУровеньПросмотраТд-1);
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);
	
КонецПроцедуры // СформироватьОтчет()

// ----------------------------------------------------------------------
// Вывод данных в табличный документ

// Процедура присоединяет область в табличный документ (по остаткам).
// 
// Параметры:
//  ТаблицаИтогов			- ТаблицаЗначений.
//  Область_Расхождение 	- ТабличныйДокумент.
//  ВсеИтоги				- Булево (По умолчанию = Ложь).
//  ДопустимоеРасхождение 	- Число (По умолчанию = 0).
// 
&НаСервере
Процедура ПрисоединитьСальдоПоРасхождению(ТаблицаИтогов, Область_Расхождение, ВсеИтоги = Ложь, ДопустимоеРасхождение = 0, ДопустимоеРасхождениеВзм = 0)
	
	Если ТаблицаИтогов.Количество() > 0 Тогда
				
		ИмяРесурса1 = "СуммаРасхождения";
		ИмяРесурса2 = "СуммаАбсолютногоРасхождения";
										
		Если ВсеИтоги Тогда
			СуммаРасхождения 			= ТаблицаИтогов.Итог(ИмяРесурса1);
			СуммаАбсолютногоРасхождения = ТаблицаИтогов.Итог(ИмяРесурса2);
			СуммаРасхожденияВзм 		   = ТаблицаИтогов.Итог(ИмяРесурса1 + "Взм");
			СуммаАбсолютногоРасхожденияВзм = ТаблицаИтогов.Итог(ИмяРесурса2 + "Взм");
		Иначе
			СтрокаОстатков = ТаблицаИтогов[0];				
			СуммаРасхождения 			= СтрокаОстатков[ИмяРесурса1];
			СуммаАбсолютногоРасхождения = СтрокаОстатков[ИмяРесурса2];
			СуммаРасхожденияВзм 		   = СтрокаОстатков[ИмяРесурса1 + "Взм"];
			СуммаАбсолютногоРасхожденияВзм = СтрокаОстатков[ИмяРесурса2 + "Взм"];
		КонецЕсли;
			
	КонецЕсли;
	
	
	// Расхождение (упр)
	Область_Расхождение.Параметры.СуммаРасхождения = СуммаРасхождения;
	Область_Расхождение.ТекущаяОбласть.ЦветТекста  = фцЦветОбычный;
	ТабДокОтчет.Присоединить(Область_Расхождение);
	
	// Абсолютное расхождение (упр)
	Область_Расхождение.Параметры.СуммаРасхождения = СуммаАбсолютногоРасхождения;
	Если ВсеИтоги Тогда
		Область_Расхождение.ТекущаяОбласть.ЦветТекста = ?(ДопустимоеРасхождение = Неопределено 
															ИЛИ СуммаАбсолютногоРасхождения <= ДопустимоеРасхождение
															, фцЦветОбычный
															, фцЦветОшибки);
	КонецЕсли;
	ТабДокОтчет.Присоединить(Область_Расхождение);
	
	
	Если фВыводитьСуммыВзаиморасчетов Тогда
		
		// Расхождение (взаиморасчеты)
		Область_Расхождение.Параметры.СуммаРасхождения = СуммаРасхожденияВзм;
		Область_Расхождение.ТекущаяОбласть.ЦветТекста  = фцЦветОбычный;
		ТабДокОтчет.Присоединить(Область_Расхождение);
		
		// Абсолютное расхождение (взаиморасчеты)
		Область_Расхождение.Параметры.СуммаРасхождения = СуммаАбсолютногоРасхожденияВзм;
		Если ВсеИтоги Тогда
			Область_Расхождение.ТекущаяОбласть.ЦветТекста = ?(ДопустимоеРасхождениеВзм = Неопределено 
																ИЛИ СуммаАбсолютногоРасхожденияВзм <= ДопустимоеРасхождениеВзм
																, фцЦветОбычный
																, фцЦветОшибки);	
		КонецЕсли;
		ТабДокОтчет.Присоединить(Область_Расхождение);
		
	КонецЕсли;
	
КонецПроцедуры // ПрисоединитьСальдоПоРасхождению()

// Процедура присоединяет область в табличный документ (по остаткам).
// 
// Параметры:
//  ТаблицаИтогов	- ТаблицаЗначений.
//  Область_Ресурсы - ТабличныйДокумент.
//  ТипОрганизации  - Строка (По умолчанию = "").
//  ИмяСуммы		- Строка.
//  ВсеИтоги		- Булево (По умолчанию = Ложь).
// 
&НаСервере
Процедура ПрисоединитьСальдоПоРесурсам(ТаблицаИтогов, Область_Ресурсы, ТипОрганизации, ИмяСуммы, ВсеИтоги = Ложь)
	
	Если ТаблицаИтогов.Количество() > 0 Тогда
				
		ИмяРесурса = ТипОрганизации + ИмяСуммы;
								
		Если ВсеИтоги Тогда
			Область_Ресурсы.Параметры.СуммаСверки 		 = ТаблицаИтогов.Итог("Св_" + ИмяРесурса);
			Область_Ресурсы.Параметры.СуммаКорректировки = ТаблицаИтогов.Итог("Кр_" + ИмяРесурса);
		Иначе
			СтрокаОстатков = ТаблицаИтогов[0];				
			Область_Ресурсы.Параметры.СуммаСверки 		 = СтрокаОстатков["Св_" + ИмяРесурса];
			Область_Ресурсы.Параметры.СуммаКорректировки = СтрокаОстатков["Кр_" + ИмяРесурса];
		КонецЕсли;
				
	КонецЕсли;
	
	ТабДокОтчет.Присоединить(Область_Ресурсы);                                 		                             		

КонецПроцедуры // ПрисоединитьСальдоПоРесурсам()

// Процедура присоединяет область в табличный документ.
// 
// Параметры:
//  СтруктураОбластей 	- Структура.
//  ИсточникДанных  	- ДанныеФормыЭлементДерева ИЛИ ДанныеФормыЭлементКоллекции ИЛИ Неопределенно.
//  УровеньВывода   	- Число.
//  ТипОрг          	- Строка.
//  ЭтоВал				- Булево (По умолчанию = Ложь).
// 
&НаСервере
Процедура ПрисоединитьДанныеПоРесурсам(СтруктураОбластей, ИсточникДанных, УровеньВывода, ТипОрг, ЭтоВал = Ложь)
	
	Область_Валюты 	= СтруктураОбластей.Область_Валюты;
	Область_Ресурсы = СтруктураОбластей.Область_Ресурсы;
	
	Если ЭтоВал Тогда
		
		Область_Ресурсы.Параметры.СуммаСверки 		 = 0;
		Область_Ресурсы.Параметры.СуммаКорректировки = 0;
		
		Попытка
			Область_Валюты.Параметры.Валюта = ИсточникДанных.Валюта;		
		Исключение 		
		КонецПопытки;
		
		
	Иначе  		
		
		Область_Ресурсы.Параметры.СуммаСверки 		 = ИсточникДанных["Св_" + ТипОрг + "_СуммаУпр"];
		Область_Ресурсы.Параметры.СуммаКорректировки = ИсточникДанных["Кр_" + ТипОрг + "_СуммаУпр"];
		
	КонецЕсли;  	
	
	// Суммы по управленческому учету
	ТабДокОтчет.Присоединить(Область_Ресурсы, УровеньВывода);
	
	
	Если фВыводитьСуммыВзаиморасчетов Тогда
		
		// Валюта
		ТабДокОтчет.Присоединить(Область_Валюты, УровеньВывода);
		
		// Суммы по взаиморасчетам
		Область_Ресурсы.Параметры.СуммаСверки 		 = ИсточникДанных["Св_" + ТипОрг + "_СуммаВзм"];
		Область_Ресурсы.Параметры.СуммаКорректировки = ИсточникДанных["Кр_" + ТипОрг + "_СуммаВзм"];		
		ТабДокОтчет.Присоединить(Область_Ресурсы, УровеньВывода);
		
	КонецЕсли;                        		

КонецПроцедуры // ПрисоединитьДанныеПоРесурсам()

// Процедура присоединяет область в табличный документ по техническим операциям.
// 
// Параметры:
//  СтруктураОбластей - Структура.
//  ИсточникДанных    - ДанныеФормыЭлементКоллекции.
//  ТипОрг            - Строка.
// 
&НаСервере
Процедура ПрисоединитьДанныеПоРесурсамТо(СтруктураОбластей, ИсточникДанных, ТипОрг, Уровень, ЭтоВал)
	    		
	Если ЭтоВал Тогда
		
		Область_Валюты 	= СтруктураОбластей.ОбластьВал_Валюты;
		Область_Ресурсы = СтруктураОбластей.ОбластьВал_Ресурсы;
				
		Область_Ресурсы.Параметры.СуммаСверкиДт 	   = 0;	
		Область_Ресурсы.Параметры.СуммаСверкиКт 	   = 0;
		Область_Ресурсы.Параметры.СуммаКорректировкиДт = 0;
		Область_Ресурсы.Параметры.СуммаКорректировкиКт = 0; 
		
		Область_Валюты.Параметры.Валюта = ИсточникДанных.Валюта;
		
	Иначе	
		
		Область_Валюты 	= СтруктураОбластей.Область_Валюты;
		Область_Ресурсы = СтруктураОбластей.Область_Ресурсы;
	
		Область_Ресурсы.Параметры.СуммаСверкиДт 	   = ИсточникДанных["Св_" + ТипОрг + "_СуммаУпрДт"];
		Область_Ресурсы.Параметры.СуммаСверкиКт 	   = ИсточникДанных["Св_" + ТипОрг + "_СуммаУпрКт"];
		Область_Ресурсы.Параметры.СуммаКорректировкиДт = ИсточникДанных["Кр_" + ТипОрг + "_СуммаУпрДт"];
		Область_Ресурсы.Параметры.СуммаКорректировкиКт = ИсточникДанных["Кр_" + ТипОрг + "_СуммаУпрКт"];
		
	КонецЕсли;
	
	// Суммы по управленческому учету
	ТабДокОтчет.Присоединить(Область_Ресурсы, Уровень);
		
	Если фВыводитьСуммыВзаиморасчетов Тогда
		
		// Валюта
		ТабДокОтчет.Присоединить(Область_Валюты, Уровень);
		
		// Суммы по взаиморасчетам
		Область_Ресурсы.Параметры.СуммаСверкиДт 	   = ИсточникДанных["Св_" + ТипОрг + "_СуммаВзмДт"];
		Область_Ресурсы.Параметры.СуммаСверкиКт 	   = ИсточникДанных["Св_" + ТипОрг + "_СуммаВзмКт"];
		Область_Ресурсы.Параметры.СуммаКорректировкиДт = ИсточникДанных["Кр_" + ТипОрг + "_СуммаВзмДт"];
		Область_Ресурсы.Параметры.СуммаКорректировкиКт = ИсточникДанных["Кр_" + ТипОрг + "_СуммаВзмКт"];		
		ТабДокОтчет.Присоединить(Область_Ресурсы, Уровень);
		
	КонецЕсли;                              		

КонецПроцедуры // ПрисоединитьДанныеПоРесурсамТо()


// Процедура выводит блок областей по сальдо.
// 
// Параметры:
//  КореньДерева.
//  СтруктураОбластей  		 - Структура.
// 
&НаСервере
Процедура ВывестиБлокВалНачальногоСальдо(КореньДерева, СтруктураОбластей)
	
	Если КореньДерева.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Область_Орг1 		= СтруктураОбластей.ОбластьВал_Орг1;
	Область_Орг2 		= СтруктураОбластей.ОбластьВал_Орг2;
	Область_Расхождение = СтруктураОбластей.ОбластьВал_Расхождение;
	СтруктураОбл = Новый Структура;
	СтруктураОбл.Вставить("Область_Ресурсы", СтруктураОбластей.ОбластьВал_Ресурсы);
	СтруктураОбл.Вставить("Область_Валюты" , СтруктураОбластей.ОбластьВал_Валюты);
	
	ТабДокОтчет.НачатьГруппуСтрок();
	УровеньВывода = 1;
	ЭтоРасшифровкаПоВалютам = Истина;
	
	СтрокаИтоги = КореньДерева[0]; 
	Для каждого СтрокаДереваВал Из СтрокаИтоги.Строки Цикл
	
		ТабДокОтчет.Вывести(Область_Орг1);			
		ПрисоединитьДанныеПоРесурсам(СтруктураОбл, СтрокаДереваВал, УровеньВывода, "Орг1", ЭтоРасшифровкаПоВалютам);
			
		ТабДокОтчет.Присоединить(Область_Орг2);		
		ПрисоединитьДанныеПоРесурсам(СтруктураОбл, СтрокаДереваВал, УровеньВывода, "Орг2", ЭтоРасшифровкаПоВалютам);
		
		Область_Расхождение.Параметры.СуммаРасхождения = 0;
		ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
		ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
		
		Если фВыводитьСуммыВзаиморасчетов Тогда 
			
			Область_Расхождение.Параметры.СуммаРасхождения = СтрокаДереваВал.СуммаРасхожденияВзм;
			ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
			Область_Расхождение.Параметры.СуммаРасхождения = 0;
			ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДокОтчет.ЗакончитьГруппуСтрок();
	
КонецПроцедуры // ВывестиБлокВалНачальногоСальдо()

// Процедура выводит блок областей по сальдо.
// 
// Параметры:
//  ТаблицаИтогов			 - ТаблицаЗначений.
//  СтруктураОбластей  		 - Структура.
//  ВсеИтоги  			  	 - Булево.
//  ДопустимоеРасхождение 	 - Число.
//  ДопустимоеРасхождениеВзм - Число.
// 
&НаСервере
Процедура ВывестиБлокСальдо(ТаблицаИтогов, СтруктураОбластей, ВсеИтоги = Ложь, ДопустимоеРасхождение = 0, ДопустимоеРасхождениеВзм = 0)
	
	Область_Орг1 		= СтруктураОбластей.ОбластьГруппа_Орг1;
	Область_Орг2 		= СтруктураОбластей.ОбластьГруппа_Орг2;
	Область_Валюты 		= СтруктураОбластей.ОбластьГруппа_Валюты;
	Область_Ресурсы 	= СтруктураОбластей.ОбластьГруппа_Ресурсы;
	Область_Расхождение = СтруктураОбластей.ОбластьГруппа_Расхождение;
		
	ТабДокОтчет.Вывести(Область_Орг1);
	
	ПрисоединитьСальдоПоРесурсам(ТаблицаИтогов, Область_Ресурсы, "Орг1_", "СуммаУпр", ВсеИтоги);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		ТабДокОтчет.Присоединить(Область_Валюты);
	 	ПрисоединитьСальдоПоРесурсам(ТаблицаИтогов, Область_Ресурсы, "Орг1_", "СуммаВзм", ВсеИтоги); 	
	КонецЕсли;
		
	ТабДокОтчет.Присоединить(Область_Орг2);
	
	ПрисоединитьСальдоПоРесурсам(ТаблицаИтогов, Область_Ресурсы, "Орг2_", "СуммаУпр", ВсеИтоги);
	Если фВыводитьСуммыВзаиморасчетов Тогда
		ТабДокОтчет.Присоединить(Область_Валюты);
	 	ПрисоединитьСальдоПоРесурсам(ТаблицаИтогов, Область_Ресурсы, "Орг2_", "СуммаВзм", ВсеИтоги); 	
	КонецЕсли;
	
	ПрисоединитьСальдоПоРасхождению(ТаблицаИтогов, Область_Расхождение, ВсеИтоги, ДопустимоеРасхождение, ДопустимоеРасхождениеВзм);
 	 
КонецПроцедуры // ВывестиБлокСальдо()
              

// Процедура выводит блок областей по сальдо.
// 
// Параметры:
//  СтруктураОбластей  	- Структура.
//  ИсточникДанных  	- ДанныеФормыЭлементДерева ИЛИ ДанныеФормыЭлементКоллекции ИЛИ Неопределенно.
//  УровеньВывода		- Число.
// 
&НаСервере
Процедура ВывестиБлокПоРесурсам(СтруктураОбластей, ИсточникДанных, УровеньВывода)

	Попытка
		ЭтоРасшифровкаПоВалютам = ИсточникДанных.ЭтоРасшифровкаПоВалютам;
	Исключение
		ЭтоРасшифровкаПоВалютам = Ложь;
		// Сообщить("Нет поля ЭтоРасшифровкаПоВалютам");
	КонецПопытки;
	
	Если УровеньВывода = 0 Тогда
		ПрефОбласти = "ОбластьГруппа";
	ИначеЕсли фВыводитьСуммыВзаиморасчетов И ЭтоРасшифровкаПоВалютам Тогда
		ПрефОбласти = "ОбластьВал";
	ИначеЕсли ИсточникДанных.ЕстьСоответствие Тогда	
	    ПрефОбласти = "ОбластьСоответствия";
	Иначе
		ПрефОбласти = "ОбластьСтрока";
	КонецЕсли;
	
	СтруктураОбл = Новый Структура;
	Область_Орг1 		= СтруктураОбластей[ПрефОбласти + "_Орг1"];
	Область_Орг2 		= СтруктураОбластей[ПрефОбласти + "_Орг2"];
	Область_Расхождение = СтруктураОбластей[ПрефОбласти + "_Расхождение"];
	СтруктураОбл.Вставить("Область_Валюты" , СтруктураОбластей[ПрефОбласти + "_Валюты"]);
	СтруктураОбл.Вставить("Область_Ресурсы", СтруктураОбластей[ПрефОбласти + "_Ресурсы"]);
		     
	
	// Организация 1
	Область_Орг1.Параметры.Заполнить(ИсточникДанных); 		
	Область_Орг1.ТекущаяОбласть.Отступ = УровеньВывода * 2;
	ТабДокОтчет.Вывести(Область_Орг1, УровеньВывода); 	
	ПрисоединитьДанныеПоРесурсам(СтруктураОбл, ИсточникДанных, УровеньВывода, "Орг1", ЭтоРасшифровкаПоВалютам);
	
	// Организация 2
	Область_Орг2.Параметры.Заполнить(ИсточникДанных);
	ТабДокОтчет.Присоединить(Область_Орг2, УровеньВывода); 	
	ПрисоединитьДанныеПоРесурсам(СтруктураОбл, ИсточникДанных, УровеньВывода, "Орг2", ЭтоРасшифровкаПоВалютам);
	                                                         	
	Область_Расхождение.Параметры.СуммаРасхождения = ИсточникДанных["СуммаРасхождения"];
	ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
	
	Область_Расхождение.Параметры.СуммаРасхождения = ИсточникДанных["СуммаАбсолютногоРасхождения"];
	ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
	
	Если фВыводитьСуммыВзаиморасчетов Тогда
			
		Область_Расхождение.Параметры.СуммаРасхождения = ИсточникДанных["СуммаРасхожденияВзм"];
		ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
	
		Область_Расхождение.Параметры.СуммаРасхождения = ИсточникДанных["СуммаАбсолютногоРасхожденияВзм"];
		ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
		
	КонецЕсли;

КонецПроцедуры // ВывестиБлокПоРесурсам()

// Процедура выводит строки табличного документа по оборотам и движениям ДС.
// 
// Параметры:
//  ВеткаДерева  			- ДанныеФормыКоллекцияЭлементовДерева.
//  СтруктураОбластейСтрок  - Структура.
//  УровеньВывода 			- Число.
// 
&НаСервере
Процедура ВывестиСтрокиТабличногоДокумента(ВеткаДерева, СтруктураОбл, УровеньВывода)
	  	
	Для каждого СтрокаДерева Из ВеткаДерева Цикл
		
		ВывестиБлокПоРесурсам(СтруктураОбл, СтрокаДерева, УровеньВывода);
		
		// Следующий уровень иерархии
		ТабДокОтчет.НачатьГруппуСтрок();
		УровеньВывода = УровеньВывода + 1;
		ВывестиСтрокиТабличногоДокумента(СтрокаДерева.Строки, СтруктураОбл, УровеньВывода);
		УровеньВывода = УровеньВывода - 1;
		ТабДокОтчет.ЗакончитьГруппуСтрок();
		
		Если фМаксимальныйУровеньДерева < УровеньВывода + 1 Тогда
			фМаксимальныйУровеньДерева = УровеньВывода + 1; 			 		
		КонецЕсли;
		
	КонецЦикла;		

КонецПроцедуры // ВывестиСтрокиТабличногоДокумента()


// Процедура присоединяет область в табличный документ по техническим операциям.
// 
// Параметры:
//  СтруктураОбластей 		- Структура.
//  СтрокаДереваТо 			- ДанныеФормыЭлементКоллекции.
//  УровеньВывода 			- Число.
//  ЭтоРасшифровкаПоВалютам - Булево.
// 
&НаСервере
Процедура ВывестиБлокПоРесурсамТо(СтруктураОбластей, СтрокаДереваТо, УровеньВывода, ЭтоРасшифровкаПоВалютам)
	
	Если ЭтоРасшифровкаПоВалютам Тогда
		
		Область_Орг1 = СтруктураОбластей.ОбластьВал_Орг1;
		Область_Орг2 = СтруктураОбластей.ОбластьВал_Орг2;
		Область_Расхождение = СтруктураОбластей.ОбластьВал_Расхождение;
				
	Иначе
		
		Область_Орг1 = СтруктураОбластей.Область_Орг1;
		Область_Орг2 = СтруктураОбластей.Область_Орг2;
		Область_Расхождение = СтруктураОбластей.Область_Расхождение;
				
		Область_Орг1.Параметры.ОперацияВГО = СтрокаДереваТо.ОперацияВГО;
		Область_Орг2.Параметры.ОперацияВГО = СтрокаДереваТо.ОперацияВГО;
		
	КонецЕсли;
		
	// Организация 1
	ТабДокОтчет.Вывести(Область_Орг1, УровеньВывода); 	
	ПрисоединитьДанныеПоРесурсамТо(СтруктураОбластей, СтрокаДереваТо, "Орг1", УровеньВывода, ЭтоРасшифровкаПоВалютам);
	
	// Организация 2
	ТабДокОтчет.Присоединить(Область_Орг2, УровеньВывода); 	
	ПрисоединитьДанныеПоРесурсамТо(СтруктураОбластей, СтрокаДереваТо, "Орг2", УровеньВывода, ЭтоРасшифровкаПоВалютам);
	
	
	// Расхождение
	Область_Расхождение.Параметры.СуммаРасхождения = СтрокаДереваТо.СуммаРасхождения;
	ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
	Область_Расхождение.Параметры.СуммаРасхождения = СтрокаДереваТо.СуммаАбсолютногоРасхождения;
	ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);

	Если фВыводитьСуммыВзаиморасчетов Тогда	
		
		Область_Расхождение.Параметры.СуммаРасхождения = СтрокаДереваТо.СуммаРасхожденияВзм;
		ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
		Область_Расхождение.Параметры.СуммаРасхождения = СтрокаДереваТо.СуммаАбсолютногоРасхожденияВзм;
		ТабДокОтчет.Присоединить(Область_Расхождение, УровеньВывода);
		
	КонецЕсли;		
	
КонецПроцедуры // ВывестиБлокПоРесурсамТо()

// Процедура выводи данные по техническим операциям.
// 
// Параметры:
//  КореньДерева - КоллекцияСтрокДереваЗначений.
//  Макет  		 - ТабличныйДокумент.
// 
&НаСервере
Процедура ВывестиДанныеПоТехническимОперациям(КореньДерева, Макет)
	
	СтрокаИтог = КореньДерева[0];
	
	
	// ----------------------------------------------------------------------
	// Вывод основной группировки по техническим операциям ВГО
	
	СтруктураОбластей = Новый Структура;
	СтруктураОбластей.Вставить("ОбластьГруппа_Орг1"	 	  , Макет.ПолучитьОбласть("ГруппаТехническиеОперации | Организация_1"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Орг2"	 	  , Макет.ПолучитьОбласть("ГруппаТехническиеОперации | Организация_2"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Валюты"	  , Макет.ПолучитьОбласть("ГруппаТехническиеОперации | Валюты"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Ресурсы"	  , Макет.ПолучитьОбласть("ГруппаТехническиеОперации | Ресурсы"));
	СтруктураОбластей.Вставить("ОбластьГруппа_Расхождение", Макет.ПолучитьОбласть("ГруппаТехническиеОперации | Расхождение"));
	ВывестиБлокПоРесурсам(СтруктураОбластей, СтрокаИтог, 0);
	
	         
	// ----------------------------------------------------------------------
	// Вывод строк по техническим операциям ВГО
	
	ВеткаПоОперациям = СтрокаИтог.Строки;
	Если ВеткаПоОперациям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбластей = Новый Структура;
	СтруктураОбластей.Вставить("Область_Ресурсы"	, Макет.ПолучитьОбласть("СтрокаТехническаяОперация | Ресурсы"));
	СтруктураОбластей.Вставить("Область_Валюты"		, Макет.ПолучитьОбласть("СтрокаТехническаяОперация | Валюты"));
	СтруктураОбластей.Вставить("Область_Орг1"		, Макет.ПолучитьОбласть("СтрокаТехническаяОперация | Организация_1"));
	СтруктураОбластей.Вставить("Область_Орг2"		, Макет.ПолучитьОбласть("СтрокаТехническаяОперация | Организация_2"));
	Область_Расхождение = Макет.ПолучитьОбласть("СтрокаТехническаяОперация | Расхождение");
	СтруктураОбластей.Вставить("Область_Расхождение", Область_Расхождение);
	
	СтруктураОбластей.Вставить("ОбластьВал_Ресурсы"	    , Макет.ПолучитьОбласть("СтрокаТехническаяОперацияВал | Ресурсы"));
	СтруктураОбластей.Вставить("ОбластьВал_Валюты"		, Макет.ПолучитьОбласть("СтрокаТехническаяОперацияВал | Валюты"));
	СтруктураОбластей.Вставить("ОбластьВал_Орг1"		, Макет.ПолучитьОбласть("СтрокаТехническаяОперацияВал | Организация_1"));
	СтруктураОбластей.Вставить("ОбластьВал_Орг2"		, Макет.ПолучитьОбласть("СтрокаТехническаяОперацияВал | Организация_2"));
	СтруктураОбластей.Вставить("ОбластьВал_Расхождение" , Макет.ПолучитьОбласть("СтрокаТехническаяОперацияВал | Расхождение"));
	
	ТабДокОтчет.НачатьГруппуСтрок();
	ТабДокОтчет.НачатьАвтогруппировкуСтрок();
	
	Для каждого СтрокаДереваТо Из ВеткаПоОперациям Цикл
		
		ВывестиБлокПоРесурсамТо(СтруктураОбластей, СтрокаДереваТо, 1, Ложь);
				
		Если фВыводитьСуммыВзаиморасчетов Тогда
			
			Если СтрокаДереваТо.ЕстьСуммы Тогда
			
				ВеткаПоВалютам = СтрокаДереваТо.Строки;
				Для каждого СтрокаПоВалютам Из ВеткаПоВалютам Цикл
					
					ВывестиБлокПоРесурсамТо(СтруктураОбластей, СтрокаПоВалютам, 3, Истина);
								
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабДокОтчет.ЗакончитьАвтогруппировкуСтрок();
	ТабДокОтчет.ЗакончитьГруппуСтрок();
	
КонецПроцедуры // ВывестиДанныеПоТехническимОперациям()

// Процедура выполняет действие, необходимые перед выбором контрагента.
// 
&НаКлиенте
Процедура НачалоВыбораКонтрагента(ТекущаяОрганизация, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		
		СтандартнаяОбработка = Ложь;
		СобственныеКонтрагенты = бит_ОбщегоНазначения.ПолучитьСписокСобственныхКонтрагентовПоОрганизации(ТекущаяОрганизация);
		
		ДанныеВыбора = СобственныеКонтрагенты;
		
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораКонтрагента()

// Процедура формиурет отчет
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура СформироватьОтчетКлиент()

	ВсеЗначенияЗаполнены = Истина;
	
	СтрРегистрация = Новый Структура;
    бит_ук_СлужебныйВызовСервера.РегистрацияНачалоСобытия(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);

	Если Не ЗначениеЗаполнено(Отчет.РегистрБухгалтерии) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнено значение поля ""Регистр бухгалтерии""'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			
		ВсеЗначенияЗаполнены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отчет.Организация1) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнено значение поля ""Организация (поставщик)""'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			
		ВсеЗначенияЗаполнены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отчет.Организация2) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнено значение поля ""Организация (покупатель)""'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		ВсеЗначенияЗаполнены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отчет.Контрагент1) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнено значение поля ""Контрагент (поставщик)""'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);			
		ВсеЗначенияЗаполнены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отчет.Контрагент2) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнено значение поля ""Контрагент (покупатель)""'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		ВсеЗначенияЗаполнены = Ложь;
	КонецЕсли;
	
	Если ИмяРегистраБухгалтерии = "бит_Бюджетирование" И Не ЗначениеЗаполнено(Отчет.Сценарий) Тогда
		ТекстСообщения = Нстр("ru = 'Не заполнено значение поля ""Сценарий""'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		ВсеЗначенияЗаполнены = Ложь;
	КонецЕсли;
	
	Если ВсеЗначенияЗаполнены Тогда
		СформироватьОтчет(СтрРегистрация);
	КонецЕсли;	

КонецПроцедуры // СформироватьОтчетКлиент()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
// Параметры:
//  ПолноеИмяОтчета - Строка.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений(ПолноеИмяОтчета)

	фКэшЗначений = Новый Структура;
	                    		
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Отчеты);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", ПолноеИмяОтчета);
	
	фКэшЗначений.Вставить("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	ИмяСправочникаСценарии = бит_ОбщегоНазначения.ПолучитьИмяСправочникаСценарииБюджетирования();
	фКэшЗначений.Вставить("ПустойСценарий", Справочники[ИмяСправочникаСценарии].ПустаяСсылка());
                                                  	 	

	фКэшЗначений.Вставить("ВидОбъектаРегистрБухгалтерии" , Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	фКэшЗначений.Вставить("СписокДоступныхРегистров", бит_вго_Сервер.СформироватьСписокДоступныхРегистровБухгалтерииДляСверкиВГО());
 	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью и домтупностью элементов формы.
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	ЭтоРегБюдж = ИмяРегистраБухгалтерии = "бит_Бюджетирование";
	
	Элементы.Сценарий.Видимость = ЭтоРегБюдж;
	   	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек
														, СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()
													
// Процедура обрабатывает изменение регистра бухгалтерии.
// 
&НаСервере
Процедура ИзменениеРегистраБухгалтерииСервер()

	ИмяРегистраБухгалтерии = ?(ЗначениеЗаполнено(Отчет.РегистрБухгалтерии), Отчет.РегистрБухгалтерии.ИмяОбъекта, "");
	
	ЭтоРегБюдж = ИмяРегистраБухгалтерии = "бит_Бюджетирование";
	// ЭтоРегМСФО = ИмяРегистраБухгалтерии = "бит_Дополнительный_2";
	
	// ЭлементСумма = Отчет.СписокРесурсов.НайтиПоЗначению("СуммаСценарий");
	// Если ЭтоРегБюдж И ЭлементСумма = Неопределено Тогда
	// 	Отчет.СписокРесурсов.Добавить("СуммаСценарий", "Сумма сценария" , Истина);
	// ИначеЕсли Не ЭтоРегБюдж И ЭлементСумма <> Неопределено Тогда	
	// 	Отчет.СписокРесурсов.Удалить(ЭлементСумма);
	// КонецЕсли;
	// 
	// ЭлементСумма = Отчет.СписокРесурсов.НайтиПоЗначению("СуммаМУ");
	// Если ЭтоРегМСФО И ЭлементСумма = Неопределено Тогда
	// 	Отчет.СписокРесурсов.Добавить("СуммаМУ", "Сумма МСФО" , Истина);
	// ИначеЕсли Не ЭтоРегМСФО И ЭлементСумма <> Неопределено Тогда	
	// 	Отчет.СписокРесурсов.Удалить(ЭлементСумма);
	// КонецЕсли;
	
	Если Не ЭтоРегБюдж Тогда
		Отчет.Сценарий = фКэшЗначений.ПустойСценарий;	
	КонецЕсли;
	
	УправлениеВидимостьюДоступностью();

КонецПроцедуры // ИзменениеРегистраБухгалтерииСервер()

// Процедура обрабатывает изменение валюты документа.
// 
&НаСервере
Процедура ПересчитатьКурсСверки()
	
	Возврат;
	// СтруктураКурса = бит_КурсыВалют.ПолучитьСреднийКурсВалюты(
	// 	Отчет.ВалютаСверки, Отчет.Период.ДатаНачала, Отчет.Период.ДатаОкончания);
	// 
	// Отчет.КурсВалюты 	  = СтруктураКурса.Курс;
	// Отчет.КратностьВалюты = СтруктураКурса.Кратность;
	
КонецПроцедуры // ПересчитатьКурсСверки()

// Процедура создает кноки раскрытия/свертки уровней дерева счетов.
// 
&НаСервере
Процедура СоздатьДействияУровней()

	Если фУровеньПросмотраТд = 0 Тогда
		фУровеньПросмотраТд = фМаксимальныйУровеньДерева;	
	КонецЕсли;

	// Очищаем существующие кнопки подменю
	КоличествоЭлементов = Элементы.ТабДокОтчетГруппаУровни.ПодчиненныеЭлементы.Количество();
	Для Сн = 1 По КоличествоЭлементов Цикл
	
		Сй = КоличествоЭлементов - Сн;
		Кнопка = Элементы.ТабДокОтчетГруппаУровни.ПодчиненныеЭлементы[Сй];
		Элементы.Удалить(Кнопка);
	
	КонецЦикла; 
	
	// Создадим команды и кнопки в подменю
	Для Сй = 1 По фМаксимальныйУровеньДерева Цикл
		
		ИмяКоманды = "ТабДокОтчетУровень_" + Сй;
		
		КомандаУровня = Команды.Найти(ИмяКоманды);
		
		Если КомандаУровня = Неопределено Тогда
			
			КомандаУровня = Команды.Добавить(ИмяКоманды);
			КомандаУровня.Действие = "ДействиеТабДокОтчетУровень";
			
		КонецЕсли; 
		
		НоваяКнопка = Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элементы.ТабДокОтчетГруппаУровни);
		
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок = "Уровень " + Сй;
		
		Если Сй = фУровеньПросмотраТд Тогда
			НоваяКнопка.Пометка = Истина;		
		КонецЕсли;
			
	КонецЦикла;    	
	
КонецПроцедуры // СоздатьДействияУровней()

#КонецОбласти
