
#Область ОбработчикиСобытийФормы
            
// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
		
	УстановитьЗначенияПоУмолчанию();
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);	
	
	фПолноеИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Истина);
	
	// Вызов механизма защиты
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	УправлениеВидимостьюДоступностью();
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
		
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "ПравилаЗаполненияПолейПриТрансляции".
// 
&НаКлиенте
Процедура ПравилаЗаполненияПолейПриТрансляцииПриИзменении(Элемент)
	
	ЗаполнитьСКД();
	
КонецПроцедуры // ПравилаЗаполненияПолейПриТрансляцииПриИзменении()

// Процедура - обработчик события "ПриАктивизацииОбласти" поля табличного документа "Результат".
// 
&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	СуммаОтчета = бит_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Результат);
	
КонецПроцедуры // РезультатПриАктивизацииОбласти()

// Процедура - обработчик события "ОбработкаРасшифровки" поля табличного документа "Результат".
// 
&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Значение = ПолучитьЗначениеРасшифровки(Расшифровка);
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПоказатьЗначение( , Значение);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - действие команды "Сформировать".
// Выполняется формирование отчета.
// 
&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	СформироватьСервер();
	
КонецПроцедуры // КомандаСформировать()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();	
	
КонецПроцедуры // КомандаПанельНастроек()

// Процедура - обработчик события "Нажатие" кнопки "ГрупповаяТрансляция".
// 
&НаКлиенте
Процедура КомандаГрупповаяТрансляция(Команда)
	
	ПараметрыТрансляции = ПолучитьПараметрыТрансляции();	
	
	Если ТипЗнч(ПараметрыТрансляции) = Тип("Структура") 
		 И ПараметрыТрансляции.МассивДокументов.Количество()>0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивДокументов", ПараметрыТрансляции.МассивДокументов);
		ПараметрыФормы.Вставить("Источник", ПараметрыТрансляции.Источник);
		ПараметрыФормы.Вставить("Приемник", ПараметрыТрансляции.Приемник);
		
		ОткрытьФорму("Обработка.бит_ГрупповоеРедактированиеДополнительныхАналитик.Форма.Форма", ПараметрыФормы, ЭтаФорма, ПараметрыТрансляции.МассивДокументов.Количество());
		
	Иначе	
		
		ТекстСообщения = НСтр("ru = 'Нет документов для выполнения групповой трансляции.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик команды "Результат_ПоказатьВОтдельномОкне".
// 
&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);
			
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	                    		
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Отчеты);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Отчет.бит_СоответствиеЗаписейТрансляции");
	            	                                                  
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью и доступностью элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	// Установка видимости и доступности элементов формы в зависимости от типа отчета 
	// - обычный или расшифровка. 
	бит_ОтчетыСервер.УстановитьВидимостьДоступностьЭлементов(Элементы, 
															Неопределено, 
															Неопределено,
															Ложь);
		          	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура формирует отчет на сервере.
//
// Параметры:
// 	Нет.
// 
&НаСервере
Процедура СформироватьСервер()
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаСКД) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);

	// Из схемы возьмем настройки по умолчанию
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();

	ЗначениеПараметраПриемник = Настройки.ПараметрыДанных.Элементы.Найти("Приемник");
	Если ЗначениеПараметраПриемник <> Неопределено Тогда
		ЗначениеПараметраПриемник.Значение      = Отчет.ПравилаЗаполненияПолейПриТрансляции.Приемник;
		ЗначениеПараметраПриемник.Использование = Истина; 
	КонецЕсли;
	
	// Помещаем в переменную данные о расшифровке данных.
	ДанныеРасшифровки1 = Новый ДанныеРасшифровкиКомпоновкиДанных;

	// Формируем макет, с помощью компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	// Передаем в макет компоновки схему, настройки и данные расшифровки.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки1);

	// Выполним компоновку с помощью процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки1);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	АдресДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки1, УникальныйИдентификатор);
	
	Результат.Очистить();

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры // СформироватьСервер()

// Функция добавляет группу в выбранные поля компоновки данных.
//
// Параметры:
//  НаборДанных  	- НаборДанныхКомпоновкиДанных.
//  Имя      		- Строка.
// 	Расположение	- Строка.
//
// Возвращаемое значение:
//  Группа 			- ВыбранноеПолеКомпоновкиДанных. 
// 
&НаСервере
Функция ДобавитьГруппуВыбранныхПолей(НаборДанных, Имя, Расположение = "")
	
	Группа = НаборДанных.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Заголовок = Имя;
	
	Если Расположение <> "" Тогда
		Группа.Расположение = РасположениеПоляКомпоновкиДанных[Расположение];
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

// Функция добавляет поле в выбранные поля компоновки данных
// Параметры:
// 	ТабЗнач			- ТаблицаЗначений.
//  НаборДанных  	- НаборДанныхКомпоновкиДанных.
//  Имя      		- Строка.
//  ПутьКДанным		- Строка.
// 	Использование	- Булево.
// Возвращаемое значение:
//  Поле 			- ВыбранноеПолеКомпоновкиДанных.
// 
&НаСервере
Функция ДобавитьПолеВыбранныхПолей(ТабЗнач, НаборДанных, Имя, ПутьКДанным = "", Использование = Истина)
	
	Поле = НаборДанных.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Заголовок 	= Имя;
	Поле.Использование = Использование;
	
	Если ПутьКДанным = "" Тогда
		ПутьКДанным = Имя;
	КонецЕсли;
	
	Поле.Поле = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	
	НоваяСтрока = ТабЗнач.Добавить();
	НоваяСтрока.Имя 		= Имя;
	НоваяСтрока.ПутьКДанным = ПутьКДанным;
	
	Возврат Поле;
	
КонецФункции

// Функция добавляет группировку в настройках компоновки данных.
// 
// Параметры:
//  СтруктураРодитель  		- КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных.
//  ИмяГруппировки     		- Строка или Массив.
//  ТипГруппировки     		- ТипГруппировкиКомпоновкиДанных.
// 
// Возвращаемое значение:
//  ГруппировкаКомпоновки   - ГруппировкаКомпоновкиДанных.
// 
&НаСервере
Функция ДобавитьГруппировку(СтруктураРодитель, ИмяГруппировки, ТипГруппировки)

	ГруппировкаКомпоновки = СтруктураРодитель.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле         = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	
	ЭлементПорядка        = ГруппировкаКомпоновки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Использование = Истина;
	
	Если ТипЗнч(ИмяГруппировки) = Тип("Строка") Тогда
		МассивИмен = Новый Массив;
		МассивИмен.Добавить(ИмяГруппировки);
	ИначеЕсли ТипЗнч(ИмяГруппировки) = Тип("Массив") Тогда
		МассивИмен = ИмяГруппировки;
	КонецЕсли;
	
	Для каждого ТекСтр Из МассивИмен Цикл
	
		ПолеГруппировки = ГруппировкаКомпоновки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ТекСтр);
		ПолеГруппировки.ТипГруппировки = ТипГруппировки;
		ПолеГруппировки.ТипДополнения  = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
		
	КонецЦикла;
	
    Возврат ГруппировкаКомпоновки;
	
КонецФункции // ДобавитьГруппировку()

// Функция заполняет части текста запроса.
// 
// Параметры:
//  ОбъектСистемы 			- СправочникСсылка.бит_ОбъектыСистемы.
//  ТекстЗапроса_Поля 		- Строка.
//  ТекстЗапроса_Источники 	- Строка.
// 	ТекстЗапроса_Группировки- Строка.
//  Префикс 				- Строка.
// 	ТабЗнач					- ТаблицаЗначений.
//  НаборДанных  			- НаборДанныхКомпоновкиДанных.
// 
&НаСервере
Процедура СформироватьТекстЗапроса(ОбъектСистемы, ТекстЗапроса_Поля, ТекстЗапроса_Источники, ТекстЗапроса_Группировки, Префикс = "", ТабЗнач, НаборДанных)

	ВидыОбъектов = Перечисления.бит_ВидыОбъектовСистемы;
	
	Если ОбъектСистемы.ВидОбъекта = ВидыОбъектов.РегистрБухгалтерии Тогда
		
		Регистр = Метаданные.РегистрыБухгалтерии[ОбъектСистемы.ИмяОбъекта];
		
		Если Регистр.Корреспонденция Тогда
			ГруппаДт 	= ДобавитьГруппуВыбранныхПолей(НаборДанных.Элементы, "Дт");
			ГруппаКт 	= ДобавитьГруппуВыбранныхПолей(НаборДанных.Элементы, "Кт");
		Иначе
			Группа 		= ДобавитьГруппуВыбранныхПолей(НаборДанных.Элементы, "");
		КонецЕсли;
		
		// Добавим счета в поля текста запроса
		Если Регистр.Корреспонденция Тогда
			ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + ".СчетДт" + " КАК " + Префикс + "СчетДт,
									|	Таблица" + Префикс + ".СчетКт" + " КАК " + Префикс + "СчетКт,";
			ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + ".СчетДт,
									|	Таблица" + Префикс + ".СчетКт,";
			ДобавитьПолеВыбранныхПолей(ТабЗнач, ГруппаДт.Элементы, "Счет Дт", Префикс + "СчетДт");
			ДобавитьПолеВыбранныхПолей(ТабЗнач, ГруппаКт.Элементы, "Счет Кт", Префикс + "СчетКт");
		КонецЕсли;
		
		// Добавим измерения в поля текста запроса
		Для каждого ТекСтр Из Регистр.Измерения Цикл
			Если ТекСтр.Балансовый Тогда
				ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + " КАК " + Префикс + ТекСтр.Имя + ",";
				ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + ",";
				Если ТекСтр.Имя <> "Организация" Тогда
					ДобавитьПолеВыбранныхПолей(ТабЗнач, НаборДанных.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя);
				КонецЕсли;
			Иначе
				ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + "Дт" + " КАК " + Префикс + ТекСтр.Имя + "Дт" + ",
									|	Таблица" + Префикс + "." + ТекСтр.Имя + "Кт" + " КАК " + Префикс + ТекСтр.Имя + "Кт" + ",";
				ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + "Дт,
									|	Таблица" + Префикс + "." + ТекСтр.Имя + "Кт,";
				Если ТекСтр.Имя <> "Организация" Тогда
					ДобавитьПолеВыбранныхПолей(ТабЗнач, ГруппаДт.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя + "Дт", Ложь);
					ДобавитьПолеВыбранныхПолей(ТабЗнач, ГруппаКт.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя + "Кт", Ложь);
				КонецЕсли;
			КонецЕсли;							
		КонецЦикла;
		
		ГруппаРесурсы = ДобавитьГруппуВыбранныхПолей(НаборДанных.Элементы, "Показатели", "Вертикально");
		
		// Добавим ресурсы в поля текста запроса
		Для каждого ТекСтр Из Регистр.Ресурсы Цикл
			Если ТекСтр.Балансовый Тогда
				ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + " КАК " + Префикс + ТекСтр.Имя + ",";
				ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + ",";
				ДобавитьПолеВыбранныхПолей(ТабЗнач, ГруппаРесурсы.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя);
			Иначе
				ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + "Дт" + " КАК " + Префикс + ТекСтр.Имя + "Дт" + ",
									|	Таблица" + Префикс + "." + ТекСтр.Имя + "Кт" + " КАК " + Префикс + ТекСтр.Имя + "Кт" + ",";
				ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + "Дт,
									|	Таблица" + Префикс + "." + ТекСтр.Имя + "Кт,";
				ДобавитьПолеВыбранныхПолей(ТабЗнач, ГруппаДт.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя + "Дт", Ложь);
				ДобавитьПолеВыбранныхПолей(ТабЗнач, ГруппаКт.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя + "Кт", Ложь);
			КонецЕсли;							
		КонецЦикла;
		
		// Добавим реквизиты в поля текста запроса
		Для каждого ТекСтр Из Регистр.Реквизиты Цикл
			ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + " КАК " + Префикс + ТекСтр.Имя + ",";
			ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + ",";
			ДобавитьПолеВыбранныхПолей(ТабЗнач, НаборДанных.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя, Ложь);
		КонецЦикла;
										
		// Добавим стандартные реквизиты в поля текста запроса.
		ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + ".Период КАК " 	 + Префикс + "Период,
									|	Таблица" + Префикс + ".Регистратор КАК " + Префикс + "Регистратор,
									|	Таблица" + Префикс + ".Активность КАК "  + Префикс + "Активность,
									 // Изменение кода. Начало. 28.07.2014{{
									|	НАЧАЛОПЕРИОДА(Таблица" + Префикс + ".Период, ДЕНЬ) КАК " 	+ Префикс + "ПериодДень,
									|	НАЧАЛОПЕРИОДА(Таблица" + Префикс + ".Период, КВАРТАЛ) КАК " + Префикс + "ПериодКвартал,
									|	НАЧАЛОПЕРИОДА(Таблица" + Префикс + ".Период, МЕСЯЦ) КАК " 	+ Префикс + "ПериодМесяц,";
									 // Изменение кода. Конец. 28.07.2014}}
		ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + ".Период,
									|	Таблица" + Префикс + ".Регистратор,
									|	Таблица" + Префикс + ".Активность,
									 // Изменение кода. Начало. 28.07.2014{{
									|	НАЧАЛОПЕРИОДА(Таблица" + Префикс + ".Период, ДЕНЬ),
									|	НАЧАЛОПЕРИОДА(Таблица" + Префикс + ".Период, КВАРТАЛ),
									|	НАЧАЛОПЕРИОДА(Таблица" + Префикс + ".Период, МЕСЯЦ),";
									 // Изменение кода. Конец. 28.07.2014}}
									
									
		СубконтоДт = ДобавитьГруппуВыбранныхПолей(ГруппаДт.Элементы, "Субконто Дт", "Вертикально");
		СубконтоКт = ДобавитьГруппуВыбранныхПолей(ГруппаКт.Элементы, "Субконто Кт", "Вертикально");
									
		// Добавим реквизиты субконто в поля текста запроса.
		Для Н = 1 По Регистр.ПланСчетов.МаксКоличествоСубконто Цикл
			ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + ".СубконтоДт" + Н + " КАК " + Префикс + "СубконтоДт" + Н + ",
									|	Таблица" + Префикс + ".СубконтоКт" + Н + " КАК " + Префикс + "СубконтоКт" + Н + ",";
			ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + ".СубконтоДт" + Н + ",
									|	Таблица" + Префикс + ".СубконтоКт" + Н + ",";
			ДобавитьПолеВыбранныхПолей(ТабЗнач, СубконтоДт.Элементы, "Субконто Дт " + Н, Префикс + "СубконтоДт" + Н);
			ДобавитьПолеВыбранныхПолей(ТабЗнач, СубконтоКт.Элементы, "Субконто Кт " + Н, Префикс + "СубконтоКт" + Н);
									
			ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + ".ВидСубконтоДт" + Н + " КАК " + Префикс + "ВидСубконтоДт" + Н + ",
									|	Таблица" + Префикс + ".ВидСубконтоКт" + Н + " КАК " + Префикс + "ВидСубконтоКт" + Н + ",";
			ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + ".ВидСубконтоДт" + Н + ",
									|	Таблица" + Префикс + ".ВидСубконтоКт" + Н + ",";
		КонецЦикла;								
		
		// Добавим таблицу в источники запроса
		ТекстЗапроса_Источники = ТекстЗапроса_Источники + "РегистрБухгалтерии." + Регистр.Имя + ".ДвиженияССубконто(&НачалоПериода, &КонецПериода, , , ) КАК Таблица" + Префикс;
								
	ИначеЕсли ОбъектСистемы.ВидОбъекта = ВидыОбъектов.РегистрНакопления Тогда
		
		Регистр = Метаданные.РегистрыНакопления[ОбъектСистемы.ИмяОбъекта];
		
		// Добавим измерения в поля текста запроса
		Для каждого ТекСтр Из Регистр.Измерения Цикл
			ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + " КАК " + Префикс + ТекСтр.Имя + ",";
			ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + ",";
			Если ТекСтр.Имя <> "Организация" Тогда
				ДобавитьПолеВыбранныхПолей(ТабЗнач, НаборДанных.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя);
			КонецЕсли;
		КонецЦикла;
								
		// Добавим ресурсы в поля текста запроса
		Для каждого ТекСтр Из Регистр.Ресурсы Цикл
			ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + " КАК " + Префикс + ТекСтр.Имя + ",";
			ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + ",";
			ДобавитьПолеВыбранныхПолей(ТабЗнач, НаборДанных.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя);
		КонецЦикла;
		
		// Добавим реквизиты в поля текста запроса
		Для каждого ТекСтр Из Регистр.Реквизиты Цикл
			// Изменение кода. Начало. 12.12.2016{{ BF-371
			Если НЕ (ТекСтр.Тип = Новый ОписаниеТипов("Строка") И ТекСтр.Тип.КвалификаторыСтроки.Длина = 0) Тогда
				ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + " КАК " + Префикс + ТекСтр.Имя + ",";			
				ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + ",";  				
			Иначе
				// Если тип = строка неограниченной длины					
				ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	ВЫРАЗИТЬ(Таблица" + Префикс + "." + ТекСтр.Имя + " КАК СТРОКА(300)) КАК " + Префикс + ТекСтр.Имя + ",";			
				ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	ВЫРАЗИТЬ(Таблица" + Префикс + "." + ТекСтр.Имя + " КАК СТРОКА(300)),";					
			КонецЕсли;
			// Изменение кода. Конец. 12.12.2016}} 			
			ДобавитьПолеВыбранныхПолей(ТабЗнач, НаборДанных.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя, Ложь);
		КонецЦикла;
		
		// Добавим стандартные реквизиты в поля текста запроса.
		Для каждого ТекСтр Из Регистр.СтандартныеРеквизиты Цикл
			ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + " КАК " + Префикс + ТекСтр.Имя + ",";
			ТекстЗапроса_Группировки = ТекстЗапроса_Группировки + "
									|	Таблица" + Префикс + "." + ТекСтр.Имя + ",";
			ДобавитьПолеВыбранныхПолей(ТабЗнач, НаборДанных.Элементы, ТекСтр.Синоним, Префикс + ТекСтр.Имя, Ложь);
		КонецЦикла;
		
		// Добавим таблицу в источники запроса
		ТекстЗапроса_Источники = ТекстЗапроса_Источники + "РегистрНакопления." + Регистр.Имя + " КАК Таблица" + Префикс;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТекстЗапроса()

// Функция заполняет схему компоновки данных.
// 
// Параметры:
//  Нет.
// 
&НаСервере
Процедура ЗаполнитьСКД()
	
	// СКД = Новый СхемаКомпоновкиДанных;
	СКД = Отчеты.бит_СоответствиеЗаписейТрансляции.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	// СКД = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя 							= "НаборДанных1";
	НаборДанных.ИсточникДанных 					= "ИсточникДанных1";
	
	ТабЗначИсточник = Новый ТаблицаЗначений;
	ТабЗначИсточник.Колонки.Добавить("Имя");
	ТабЗначИсточник.Колонки.Добавить("ПутьКДанным");
	
	ТабЗначПриемник = Новый ТаблицаЗначений;
	ТабЗначПриемник.Колонки.Добавить("Имя");
	ТабЗначПриемник.Колонки.Добавить("ПутьКДанным");
    
    ЕстьРКФ = (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("бит_ФинансистПолныеПрава")) 
        И ПолучитьФункциональнуюОпцию("бит_ИспользоватьРучнуюКорректировкуФакта"); 
        	
	// Сформируем текст запроса
	ТекстЗапроса_Поля = "
				   |	ТаблицаИсточник.Регистратор КАК Регистратор,
				   |	ТаблицаИсточник.НомерСтроки КАК НомерСтроки,
				   |	ТИПЗНАЧЕНИЯ(ТаблицаИсточник.Регистратор) КАК ТипРегистратора,
				   |	ВЫБОР КОГДА бит_СоответствиеЗаписейТрансляции.НомерСтрокиИсточника ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ПроводкаОттранслирована,";
    Если ЕстьРКФ Тогда
        ТекстЗапроса_Поля = ТекстЗапроса_Поля + "
    	|    МАКСИМУМ(РучнаяКорректировкаФакта.Значение) КАК РучнаяКорректировкаФакта,";    
    КонецЕсли;
                   
				   
	ТекстЗапроса_Источники = "
	               |ИЗ
				   |	";
				   
	ТекстЗапроса_Группировки = "
				   |	ТаблицаИсточник.Регистратор,
				   |	ТаблицаИсточник.НомерСтроки,
				   |	ТИПЗНАЧЕНИЯ(ТаблицаИсточник.Регистратор),
				   |	ВЫБОР КОГДА бит_СоответствиеЗаписейТрансляции.НомерСтрокиИсточника ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ,";
				   
	Группа = ДобавитьГруппуВыбранныхПолей(СКД.НастройкиПоУмолчанию.Выбор.Элементы, "Источник");
	СформироватьТекстЗапроса(Отчет.ПравилаЗаполненияПолейПриТрансляции.Источник,
							 ТекстЗапроса_Поля,
							 ТекстЗапроса_Источники,
							 ТекстЗапроса_Группировки,
							 "Источник",
							 ТабЗначИсточник,
							 Группа);
	
	ТекстЗапроса_Источники = ТекстЗапроса_Источники + "
            |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеЗаписейТрансляции КАК бит_СоответствиеЗаписейТрансляции
            |	    ПО ТаблицаИсточник.Регистратор = бит_СоответствиеЗаписейТрансляции.Регистратор
            |		И ТаблицаИсточник.НомерСтроки = бит_СоответствиеЗаписейТрансляции.НомерСтрокиИсточника
            |        И бит_СоответствиеЗаписейТрансляции.Приемник = &Приемник				   
            |	ЛЕВОЕ СОЕДИНЕНИЕ ";
	
	Группа = ДобавитьГруппуВыбранныхПолей(СКД.НастройкиПоУмолчанию.Выбор.Элементы, "Приемник");
	СформироватьТекстЗапроса(Отчет.ПравилаЗаполненияПолейПриТрансляции.Приемник,
							 ТекстЗапроса_Поля,
							 ТекстЗапроса_Источники,
							 ТекстЗапроса_Группировки,
							 "Приемник",
							 ТабЗначПриемник,
							 Группа);
	
	ТекстЗапроса_Источники = ТекстЗапроса_Источники + "
            |	    ПО (бит_СоответствиеЗаписейТрансляции.Регистратор = ТаблицаПриемник.Регистратор)
            |		И (ТаблицаПриемник.НомерСтроки = бит_СоответствиеЗаписейТрансляции.НомерСтрокиПриемника)
            |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_СоответствиеЗаписейТрансляции КАК бит_СоответствиеЗаписейТрансляции2
            |	    ПО ТаблицаИсточник.Регистратор = бит_СоответствиеЗаписейТрансляции2.Регистратор
            |   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_РучнаяКорректировкаФакта КАК РучнаяКорректировкаФакта
            |       ПО ТаблицаИсточник.Регистратор = РучнаяКорректировкаФакта.Объект
            |ГДЕ
            |	ТаблицаИсточник.Период МЕЖДУ &НачалоПериода И &КонецПериода";
        				   
	// Изменение кода. Начало. 20.03.2017{{			   
	ТекстЗапроса_Поля = СтрЗаменить(ТекстЗапроса_Поля,"ТаблицаПриемник.Комментарий", "ВЫРАЗИТЬ(ТаблицаПриемник.Комментарий КАК СТРОКА(150))");
	ТекстЗапроса_Группировки = СтрЗаменить(ТекстЗапроса_Группировки, "ТаблицаПриемник.Комментарий", "ВЫРАЗИТЬ(ТаблицаПриемник.Комментарий КАК СТРОКА(150))");
	// Изменение кода. Конец. 20.03.2017}}
	
	Если Прав(ТекстЗапроса_Поля, 1) = "," Тогда
		ТекстЗапроса_Поля = Сред(ТекстЗапроса_Поля, 1, СтрДлина(ТекстЗапроса_Поля) - 1);
	КонецЕсли;
	
	Если Прав(ТекстЗапроса_Группировки, 1) = "," Тогда
		ТекстЗапроса_Группировки = Сред(ТекстЗапроса_Группировки, 1, СтрДлина(ТекстЗапроса_Группировки) - 1);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА бит_СоответствиеЗаписейТрансляции2.НомерСтрокиИсточника ЕСТЬ NULL 
	|						ТОГДА 0
	|					ИНАЧЕ 1
	|				КОНЕЦ) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Оттранслировано," + ТекстЗапроса_Поля + ТекстЗапроса_Источники + "
	|СГРУППИРОВАТЬ ПО
	|" + ТекстЗапроса_Группировки;
	
	// Добавим дополнительные свойства.
	ТекстЗапроса = ТекстЗапроса + 
	"{ХАРАКТЕРИСТИКИ
	|	ТИП(Документ)
	|	ВИДЫХАРАКТЕРИСТИК ПланВидовХарактеристик.бит_ВидыДополнительныхАналитик
	|	ПОЛЕКЛЮЧА Ссылка
	|	ПОЛЕИМЕНИ Наименование
	|	ПОЛЕТИПАЗНАЧЕНИЯ ТипЗначения
	|	ЗНАЧЕНИЯХАРАКТЕРИСТИК РегистрСведений.бит_ДополнительныеАналитики
	|	ПОЛЕОБЪЕКТА Объект
	|	ПОЛЕВИДА Аналитика
	|	ПОЛЕЗНАЧЕНИЯ ЗначениеАналитики }";
	
	// Заполним настройки СКД
	НаборДанных.Запрос 							= ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей 	= Истина;
	
	НаборДанных 		= СКД.НаборыДанных.НаборДанных1;
	НаборДанных.Запрос 	= ТекстЗапроса;
	
	// Изменение кода. Начало. 31.07.2014{{
	ДобавитьПредставлениеДляПолейГруппировок(СКД);
	// Изменение кода. Конец. 31.07.2014}}
	
	// Отбор
	// по организации
	Если Найти(ТекстЗапроса, " КАК ИсточникОрганизация,") > 0 Тогда
		ЭлементОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		ЭлементОтбора.Использование = Ложь;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсточникОрганизация");
	КонецЕсли;	
	
	// По типу регистратора
	ЭлементОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	ЭлементОтбора.Использование = Ложь;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипРегистратора");
	
	// По флагу Оттранслировано
	ЭлементОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	ЭлементОтбора.Использование = Ложь;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПроводкаОттранслирована");
	
	// ИсточникАктивность
	ЭлементОтбора = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсточникАктивность");	
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	// Группировки
	ГруппировкаКомпоновки = СКД.НастройкиПоУмолчанию;

	Если Найти(ТекстЗапроса, " КАК ИсточникОрганизация,") > 0 Тогда
		МассивИмен = Новый Массив;
		МассивИмен.Добавить("ИсточникОрганизация");	
		ГруппировкаКомпоновки = ДобавитьГруппировку(ГруппировкаКомпоновки.Структура, МассивИмен, ТипГруппировкиКомпоновкиДанных.Элементы);
	КонецЕсли;
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("Регистратор");	
	ГруппировкаКомпоновки = ДобавитьГруппировку(ГруппировкаКомпоновки.Структура, МассивИмен, ТипГруппировкиКомпоновкиДанных.Элементы);
	
	МассивИмен = Новый Массив;
	МассивИмен.Добавить("НомерСтроки");	
	ГруппировкаКомпоновки = ДобавитьГруппировку(ГруппировкаКомпоновки.Структура, МассивИмен, ТипГруппировкиКомпоновкиДанных.Элементы);
	
	МассивИмен = Новый Массив;
	ГруппировкаКомпоновки = ДобавитьГруппировку(ГруппировкаКомпоновки.Структура, МассивИмен, ТипГруппировкиКомпоновкиДанных.Элементы);
	
	// Настройка оформления
	
	// Источник
	НовыйЭлемент = СКД.НастройкиПоУмолчанию.УсловноеОформление.Элементы.Добавить();
	
	ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение 		= WebЦвета.СветлоЖелтыйЗолотистый;
	
	ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МаксимальнаяШирина"));
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение 		= 25;
	
	Для каждого ТекСтр Из ТабЗначИсточник Цикл
		НовоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекСтр.ПутьКДанным);
	КонецЦикла;
	
	// Приемник
	НовыйЭлемент = СКД.НастройкиПоУмолчанию.УсловноеОформление.Элементы.Добавить();
	
	ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение 		= WebЦвета.СинийСПороховымОттенком;
	
	ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МаксимальнаяШирина"));
	ЗначениеПараметра.Использование = Истина;
	ЗначениеПараметра.Значение 		= 25;
	
	Для каждого ТекСтр Из ТабЗначПриемник Цикл
		НовоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТекСтр.ПутьКДанным);
	КонецЦикла;
	
	// Загрузим созданные настройки
	АдресХранилищаСКД 	= ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	ИсточникНастроек 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД);

	Отчет.КомпоновщикНастроек.Инициализировать(Неопределено);
	Отчет.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	// Перезаполним выбранные поля компоновщика настроек, без этого поля не перезаполняются.
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество();
	
КонецПроцедуры // ЗаполнитьСКД()

// Функция получает массив документов для последующей передачи в обработку групповой трансляции.
// 
&НаСервере
Функция ПолучитьПараметрыТрансляции()
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаСКД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаСКД);

	// Из схемы возьмем настройки по умолчанию
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();

	ЗначениеПараметраПриемник = Настройки.ПараметрыДанных.Элементы.Найти("Приемник");
	Если ЗначениеПараметраПриемник <> Неопределено Тогда
		ЗначениеПараметраПриемник.Значение      = Отчет.ПравилаЗаполненияПолейПриТрансляции.Приемник;
		ЗначениеПараметраПриемник.Использование = Истина; 
	КонецЕсли;
	
	// Формируем макет, с помощью компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	// Передаем в макет компоновки схему, настройки и данные расшифровки.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	// Выполним компоновку с помощью процессора компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТабРезультат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТабРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТабРезультат.Колонки.Найти("Регистратор") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабРезультат.Свернуть("Регистратор");
	
	МассивДокументов = ТабРезультат.ВыгрузитьКолонку("Регистратор");
	
	РезСтр = Новый Структура;
	РезСтр.Вставить("МассивДокументов", МассивДокументов);
	РезСтр.Вставить("Источник", Отчет.ПравилаЗаполненияПолейПриТрансляции.Источник);
	РезСтр.Вставить("Приемник", Отчет.ПравилаЗаполненияПолейПриТрансляции.Приемник);
	
	Возврат РезСтр;

КонецФункции // ПолучитьПараметрыТрансляции()

// Процедура добавляет поля и представление для группировок по месяцу и кварталу.
// 
// Параметры:
//  СКД - СхемаКомпоновкиДанных.
// 
&НаСервере
Процедура ДобавитьПредставлениеДляПолейГруппировок(СКД)

	НаборДанных = СКД.НаборыДанных.НаборДанных1;
	
	МассивПолей = Новый Массив;
	
	// Квартал
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле        = "ИсточникПериодКвартал";
	НовоеПоле.Заголовок   = "Источник период квартал";
	НовоеПоле.ПутьКДанным = "ИсточникПериодКвартал";
	МассивПолей.Добавить(НовоеПоле.ПутьКДанным);
	НовоеПоле.ВыражениеПредставления = "Формат(ИсточникПериодКвартал, ""ДФ=q"") +""-й квартал ""+Формат(ИсточникПериодКвартал, ""ДФ=yyyy"") + "" г.""";
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле        = "ПриемникПериодКвартал";
	НовоеПоле.Заголовок   = "Приемник период квартал";
	НовоеПоле.ПутьКДанным = "ПриемникПериодКвартал";
	МассивПолей.Добавить(НовоеПоле.ПутьКДанным);
	НовоеПоле.ВыражениеПредставления = "Формат(ПриемникПериодКвартал, ""ДФ=q"") +""-й квартал ""+Формат(ПриемникПериодКвартал, ""ДФ=yyyy"") + "" г.""";
	
	// Месяц
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле        = "ИсточникПериодМесяц";
	НовоеПоле.Заголовок   = "Источник период месяц";
	НовоеПоле.ПутьКДанным = "ИсточникПериодМесяц";
	МассивПолей.Добавить(НовоеПоле.ПутьКДанным);
	НовоеПоле.ВыражениеПредставления = "Формат(ИсточникПериодМесяц, ""ДФ='MMMM yyyy'"")";
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле        = "ПриемникПериодМесяц";
	НовоеПоле.Заголовок   = "Приемник период месяц";
	НовоеПоле.ПутьКДанным = "ПриемникПериодМесяц";
	МассивПолей.Добавить(НовоеПоле.ПутьКДанным);
	НовоеПоле.ВыражениеПредставления = "Формат(ПриемникПериодМесяц, ""ДФ='MMMM yyyy'"")";
	
	Для каждого ПутьКДанным Из МассивПолей Цикл
	
		ВыбранноеПоле  = СКД.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки = Новый  ПолеКомпоновкиДанных(ПутьКДанным);
		ВыбранноеПоле.Поле          = ПолеКомпоновки;
		ВыбранноеПоле.Использование = Истина;
	
	КонецЦикла; 

КонецПроцедуры // ДобавитьПредставлениеДляПолейГруппировок()

// Функция возвращает значение расшифровки по идентификатору.
// 
// Параметры:
//  Расшифровка	- ИдентификаторРасшифровкиКомпоновкиДанных.
// 
// Возвращаемое значение:
//  Результат - Значение расшифровки.
// 
&НаСервере
Функция ПолучитьЗначениеРасшифровки(Расшифровка)

	ЗначениеРасшифровки = Неопределено;
	
	ДанныеРасшифровки1 = ПолучитьИзВременногоХранилища(АдресДанныеРасшифровки);
	
	Попытка
		Поля = ДанныеРасшифровки1.Элементы[Расшифровка].ПолучитьПоля();
	Исключение
		// ;
	КонецПопытки;
	
	Если Поля.Количество() > 0 Тогда
		ЗначениеРасшифровки = Поля[0].Значение;
	КонецЕсли;
	
	Возврат ЗначениеРасшифровки;
	
КонецФункции // ПолучитьЗначениеРасшифровки() 

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Отчеты.бит_СоответствиеЗаписейТрансляции.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		СтруктураНастроек.Вставить(ИмяРеквизита, Отчет[ИмяРеквизита]);	
	КонецЦикла;
	
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	// ВосстановленнаяНастройка - Найденное значение в структуре ЗначениеНастроек.
	Перем ВосстановленнаяНастройка;
	// ПользовательскиеНастройки используются для инициализации схемы компоновки данных.
	Перем ПользовательскиеНастройки;
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	Результат.Очистить(); 	
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
			
		ЗаполнитьЗначенияСвойств(Отчет, СтруктураНастроек);
		
		СтруктураНастроек.Свойство("ПользовательскиеНастройки", ВосстановленнаяНастройка);
		ПользовательскиеНастройки = ?(ВосстановленнаяНастройка = Неопределено, ПользовательскиеНастройки, ВосстановленнаяНастройка);
					
	КонецЕсли;
	
	// Инициализация СКД
	Если ЗначениеЗаполнено(Отчет.ПравилаЗаполненияПолейПриТрансляции) Тогда
		ЗаполнитьСКД();
	КонецЕсли;
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(ПользовательскиеНастройки);
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество();
	                   							
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда	
		ПрименитьНастройки(НастройкаПоУмолчанию);
	Иначе
		// Настройки по умолчанию
	КонецЕсли;
			      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",
											ПараметрыФормы,
											ЭтаФорма);	
													
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
		
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура обработчик оповещения "НастройкиВосстановитьЗавершение".
// 
// Параметры:
// Настройка - Произвольный
// Параметры - Структура
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(Настройка, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Настройка) Тогда		
		ПрименитьНастройки(Настройка);
	КонецЕсли;
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()
                    
#КонецОбласти
