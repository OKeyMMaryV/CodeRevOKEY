#Область ОписаниеПеременных

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;

// Служит для передачи вида параметра между обработчиками.
&НаКлиенте
Перем мТекущийВидПараметра;

// Хранит текущее значение типа вывода
&НаКлиенте
Перем мСохрТипВывода;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_РеестрПроектовДоговоров;
	
	// Вызов механизма защиты
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	УстановитьЗначенияПоУмолчанию();
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
		
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСформироватьОтчет(Команда)

	ТекстСообщения = "";
	СформироватьОтчет(ТекстСообщения); 	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры // КомандаСформироватьОтчет()

&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();
		
КонецПроцедуры // КомандаПанельНастроек()

&НаКлиенте
Процедура ОтчетПоказатьВОтдельномОкне(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	СформироватьТабДокДляВыводаВОтдельномОкне(ТабДок); 
	ТабДок.Показать();
	
КонецПроцедуры // ОтчетПоказатьВОтдельномОкне()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Отчет);
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура ОформлениеЗаполнитьТаблицуУровней(Команда)
	
	ЗаполнитьТаблицуУровней();
	
КонецПроцедуры // ОформлениеЗаполнитьТаблицуУровней()

&НаКлиенте
Процедура ОформлениеПоУмолчанию(Команда)
	
	ЗаполнитьТаблицуУровнейЦветамиПоУмолчанию(150, 140, 120);
	
КонецПроцедуры // ОформлениеПоУмолчанию()

&НаКлиенте
Процедура ФлажкиОформленияСнятьВсе(Команда)
	
	ОбработатьФлаги(0, ТаблицаОформленияУровней, "Включить");
	
КонецПроцедуры // ФлажкиОформленияСнятьВсе()

&НаКлиенте
Процедура ФлажкиОформленияУстановитьВсе(Команда)
	
	ОбработатьФлаги(1, ТаблицаОформленияУровней, "Включить");
	
КонецПроцедуры // ФлажкиОформленияУстановитьВсе()

&НаКлиенте
Процедура ФлажкиОформленияИнвертировать(Команда)
	
	ОбработатьФлаги(2, ТаблицаОформленияУровней, "Включить");
	
КонецПроцедуры // ФлажкиОформленияИнвертировать()
  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура определяет значение флага.
// 
// Параметры:
//  ТекущаяСтрока - ТекущаяСтрока.
//  ИмяФлага  	  - Строка.
//  ЗначениеФлага - Число.
//  
// 
&НаКлиенте
Процедура ОпределитьЗначениеФлага(ТекущаяСтрока, ИмяФлага, ЗначениеФлага)

	Если ЗначениеФлага = 0 Тогда
		ТекущаяСтрока[ИмяФлага] = Ложь;
	ИначеЕсли ЗначениеФлага = 1 Тогда
		ТекущаяСтрока[ИмяФлага] = Истина;
	ИначеЕсли ЗначениеФлага = 2 Тогда	
		ТекущаяСтрока[ИмяФлага] = НЕ ТекущаяСтрока[ИмяФлага];
	КонецЕсли; 	
	
КонецПроцедуры // ОпределитьЗначениеФлага()
        
// Процедура управляет флагами в дереве.
// 
// Парметры:
//  ЗначениеФлага - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
//
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага, ТаблицаДерево, ИмяФлага)
	
	Если ТипЗнч(ТаблицаДерево) = Тип("ДанныеФормыКоллекция") Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаДерево Цикл
				
			ПредыдущееЗначениеФлага = СтрокаТаблицы[ИмяФлага];
			ОпределитьЗначениеФлага(СтрокаТаблицы, ИмяФлага, ЗначениеФлага);
	
		КонецЦикла;       
			
	Иначе	
		
		КореньДерева = ТаблицаДерево.ПолучитьЭлементы();
		
		Для каждого ГруппаДанных Из КореньДерева Цикл
		
			Для каждого СтрокаДерева Из ГруппаДанных.ПолучитьЭлементы() Цикл
				
				ПредыдущееЗначениеФлага = СтрокаДерева[ИмяФлага];
				ОпределитьЗначениеФлага(СтрокаДерева, ИмяФлага, ЗначениеФлага);
		
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли; 	
	
КонецПроцедуры // ОбработатьФлаги()

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	                    		
	фКэшЗначений.Вставить("ТипНастройки"	   , Перечисления.бит_ТипыСохраненныхНастроек.Отчеты);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Отчет.бит_РеестрПроектовДоговоров");
	            	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек
														, СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()
													
// Процедура дополняет таблицу уровней недостающими строками.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьТаблицуУровней()

	КоличествоСтрок   = ТаблицаОформленияУровней.Количество();
	КоличествоУровней = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	
	Если КоличествоСтрок < КоличествоУровней+1 Тогда
		
		Для НомерУровня = КоличествоСтрок По КоличествоУровней Цикл
			НоваяСтрока = ТаблицаОформленияУровней.Добавить();
			НоваяСтрока.Уровень = НомерУровня;	
			НоваяСтрока.ЦветФона = Новый Цвет(255,255,255);
		КонецЦикла; 
		
	ИначеЕсли КоличествоСтрок > КоличествоУровней+1 Тогда
		                 
		Для НомерУровня = КоличествоУровней+1 По КоличествоСтрок Цикл
			НайденныеСтроки = ТаблицаОформленияУровней.НайтиСтроки(Новый Структура("Уровень", НомерУровня));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТаблицаОформленияУровней.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;       		

КонецПроцедуры // ЗаполнитьТаблицуУровней()

// Процедура заполняет таблицу уровней по умолчанию.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьТаблицуУровнейЦветамиПоУмолчанию(ЦветR, ЦветG, ЦветB)

	ТаблицаОформленияУровней.Очистить();
	КоличествоУровней = 5;
	
	Для НомерУровня = 0 По КоличествоУровней Цикл
	
		НоваяСтрока = ТаблицаОформленияУровней.Добавить();
		НоваяСтрока.Включить = Истина;
		НоваяСтрока.Уровень  = НомерУровня;	
		НоваяСтрока.ЦветФона = Новый Цвет(ЦветR,ЦветG,ЦветB);
		ЦветR = ?(ЦветR + 30 > 255, 255, ЦветR + 30);
		ЦветG = ?(ЦветG + 30 > 255, 255, ЦветG + 30);
		ЦветB = ?(ЦветB + 30 > 255, 255, ЦветB + 30); 			
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуУровней()

// Процедура формирует табличный документ для вывода в отдельном окне.
// 
&НаСервере
Процедура СформироватьТабДокДляВыводаВОтдельномОкне(ТабДок)
	
	ТабДок.Вывести(ТабличныйДокумент);
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.СохранятьСвойстваОтображения = Истина;
		
КонецПроцедуры // СформироватьТабДокДляВыводаВОтдельномОкне()

// Функция получает запрос схемы компановки данных.
// 
// Параметры:
//  Нет
// 
// Возращаемое значение:
//  Запрос
// 
&НаСервере
Функция ПолучитьЗапросСКД()
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);	

	// Выполняем компановку макета МакетСКД.
	// (настройки берутся из схемы компановки данных и из пользовательских настроек).
	НвКомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСКД = НвКомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	
	// Заполняем параметры макета компановки данных.
	МакетСКД.ЗначенияПараметров.ДатаНачала.Значение    = Отчет.Период.ДатаНачала;
	МакетСКД.ЗначенияПараметров.ДатаОкончания.Значение = Отчет.Период.ДатаОкончания;
	
	// Получаем запрос макета компановки данных.
	Запрос = Новый Запрос(МакетСКД.НаборыДанных.Документы.Запрос);

	// Устанавливаем параметры запроса.
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса из ОписаниеПараметровЗапроса Цикл
		ПараметрМакета = МакетСКД.ЗначенияПараметров.Найти(ОписаниеПараметраЗапроса.Имя);
		Если ПараметрМакета = Неопределено Тогда
			Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, СхемаКомпоновкиДанных.Параметры[ОписаниеПараметраЗапроса.Имя].Значение);
		Иначе
			Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, ПараметрМакета.Значение);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции // ПолучитьЗапросСКД()

// Процедура инициализирует схему компоновки данных.
// 
&НаСервере
Процедура ИнициализироватьСКД(СохрПользовательскиеНастройки = Неопределено)

	Если СохрПользовательскиеНастройки = Неопределено Тогда
		СохрПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;	
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Отчеты.бит_РеестрПроектовДоговоров.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Неопределено);
	Отчет.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если СохрПользовательскиеНастройки <> Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СохрПользовательскиеНастройки);	
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Количество();
	
КонецПроцедуры // ИнициализироватьСКД()

// Список реквизитов и дерево документов

&НаСервере
Процедура СформироватьСписокРеквизитов()

	СписокРеквизитов.Очистить();
		
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	ВыбранныеПоля = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0];
	ЭлементыВыбранныхПолей = ВыбранныеПоля.Элементы;
	ДоступныеПоля 		   = ВыбранныеПоля.ДоступныеПоляВыбора;
	
	Для каждого ВыбранноеПоле Из ЭлементыВыбранныхПолей Цикл
		
		Если ВыбранноеПоле.Использование Тогда
				
			ПолеКд       = ВыбранноеПоле.Поле;
			СтрокаПоляКд = Строка(ПолеКд);
			
			Если СтрокаПоляКд = "Документ" 
				ИЛИ СтрокаПоляКд = "Представление" 
				ИЛИ СтрокаПоляКд = "Проведен"
				ИЛИ СтрокаПоляКд = "ПометкаУдаления"
				Или СписокРеквизитов.НайтиПоЗначению(СтрокаПоляКд) <> Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			// Заголовок поля
			Если ЗначениеЗаполнено(ВыбранноеПоле.Заголовок) Тогда
				ЗаголовокПоля = ВыбранноеПоле.Заголовок;			
			Иначе
				ЗаголовокПоля = ДоступныеПоля.НайтиПоле(ПолеКд).Заголовок;
				Если СтрДлина(ЗаголовокПоля) > 20 Тогда
					Если СтрокаПоляКд = "НомерДоговора" Тогда
						ЗаголовокПоля = "    Договор №/
										|Доп. соглашение №"
				    ИначеЕсли СтрокаПоляКд = "ОсновнаяСтатьяОборотов" Тогда
						ЗаголовокПоля = "Основная статья 
										|оборотов (БДДС)"
					ИначеЕсли СтрокаПоляКд = "ОсновнаяСтатьяОборотовБДР" Тогда
						ЗаголовокПоля = "Основная статья  
										| оборотов (БДР)"
					ИначеЕсли СтрокаПоляКд = "БазовыйПериодИсчисленияПериода" Тогда
						ЗаголовокПоля = "  Базовый период 
										|исчисления периода";					
					ИначеЕсли СтрокаПоляКд = "ВключатьВРеестрДоговоров" Тогда
						ЗаголовокПоля = "Включать в реестр 
										|   договоров";					
					ИначеЕсли СтрокаПоляКд = "КураторДоговораСоСтороныКонтрагента" Тогда
						ЗаголовокПоля = "    Куратор договора 
										|со стороны контрагента";	
					ИначеЕсли СтрокаПоляКд = "ШтрафнойПроцентОтСуммыЗаПериод" Тогда
						ЗаголовокПоля = "Штрафной % от суммы 
										|     за период";	
					ИначеЕсли СтрокаПоляКд = "ШтрафнаяСуммаЗаПериод" Тогда
						ЗаголовокПоля = "Штрафная сумма
										|  за период";	
					ИначеЕсли СтрокаПоляКд = "СпособРасчетаФинПлатежей" Тогда
						ЗаголовокПоля = "Способ расчета 
										|фин. платежей";	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
			СписокРеквизитов.Добавить(Строка(ПолеКд), ЗаголовокПоля);
						
		КонецЕсли;
	
	КонецЦикла;
		
КонецПроцедуры // СформироватьСписокРеквизитов()

// Функция добавляет строку в дерев документов.
// 
// Параметры:
//  Параметр1  - Тип_описание
//  Параметр2  - Тип_описание
//  
// Возвращаемое значение:
//   Тип.Вид   - описание
// 
&НаСервере
Функция ДобавитьСтрокиДереваДокументов(ДеревоДокументов, ТаблицаДокументов, УзелДерева, Организация, СсылкаНаДокумент)

	СтруктураОтбора = Новый Структура("ОсновнойДоговор", СсылкаНаДокумент);
	Если Организация <> Неопределено Тогда
		СтруктураОтбора.Вставить("Организация", Организация);	
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(СтруктураОтбора);
	
	Для каждого НайдСтр Из НайденныеСтроки Цикл
		
		Если НайдСтр.Документ = Null Тогда
			Продолжить;		
		КонецЕсли;
		
		СтрокаДерева = УзелДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, НайдСтр);
		
		Если СписокРеквизитов.НайтиПоЗначению("ОсновнойДоговор") = Неопределено Тогда
			СтрокаЗамены = ?(ЗначениеЗаполнено(СтрокаДерева.Документ.ОсновнойДоговор), "Доп. соглашение", "Проект договора");
		Иначе	
			СтрокаЗамены = ?(ЗначениеЗаполнено(СтрокаДерева.ОсновнойДоговор), "Доп. соглашение", "Проект договора");
		КонецЕсли;
		СтрокаДерева.Представление = СтрЗаменить(Строка(СтрокаДерева.Документ)
													, СтрокаДерева.Документ.Метаданные().ПредставлениеОбъекта, СтрокаЗамены);
				
		НовУзелДерева = СтрокаДерева.Строки;
		ДобавитьСтрокиДереваДокументов(ДеревоДокументов, ТаблицаДокументов, НовУзелДерева, Организация, СтрокаДерева.Документ);
	
	КонецЦикла;   	

	Возврат ДеревоДокументов;
	
КонецФункции // СформироватьДеревоДокументов()

// Функция формирует дерево документов.
// 
// Параметры:
//  РезультатЗапроса - Результат запроса.
//  ВыводитьГрОрг    - Булево.
//  
// Возвращаемое значение:
//   Дерево значений.
// 
&НаСервере
Функция СформироватьДеревоДокументов(РезультатЗапроса, ВыводитьГрОрг)

	ТаблицаДокументов = РезультатЗапроса.Выгрузить();
	ПустойДокумент    = Документы.бит_ПроектДоговора.ПустаяСсылка();
	
	ДеревоДокументов = Новый ДеревоЗначений;
	ДеревоДокументов.Колонки.Добавить("Документ"); // Ссылка
	ДеревоДокументов.Колонки.Добавить("Представление");
	ДеревоДокументов.Колонки.Добавить("Проведен");
	ДеревоДокументов.Колонки.Добавить("ПометкаУдаления");
	
	Для каждого РеквизитДокумента Из СписокРеквизитов Цикл
		ДеревоДокументов.Колонки.Добавить(РеквизитДокумента.Значение);	
	КонецЦикла;
		
	КореньДерева = ДеревоДокументов.Строки;
	
	Если ВыводитьГрОрг Тогда
		
		МассивОрганизаций = бит_РаботаСКоллекциями.УдалитьПовторяющиесяЭлементыМассива(ТаблицаДокументов.ВыгрузитьКолонку("Организация"));
		Для каждого Организация Из МассивОрганизаций Цикл   	
			СтрокаДерева = КореньДерева.Добавить();
			СтрокаДерева.Организация = Организация;					
			ДобавитьСтрокиДереваДокументов(ДеревоДокументов, ТаблицаДокументов, СтрокаДерева.Строки, Организация, ПустойДокумент);  		
		КонецЦикла;
		
	Иначе
		
		ДобавитьСтрокиДереваДокументов(ДеревоДокументов, ТаблицаДокументов, КореньДерева, Неопределено, ПустойДокумент);
		
	КонецЕсли; 	       	
		
	Возврат ДеревоДокументов;
	
КонецФункции // СформироватьДеревоДокументов()

// Вывод в табличный документ

// Процедура выводит шапку в табличный документ.
// 
// Параметры:
//  Макет  		  - Тип_описание
//  ВыводитьГрОрг - Булево
// 
&НаСервере
Процедура ТабличныйДокумент_ВывестиШапку(Макет, ВыводитьГрОрг)

	Если ВыводитьГрОрг Тогда
		ОбластьШапГрп = Макет.ПолучитьОбласть("ШапкаОрганизация | КолонкаГруппировки");
		ОбластьШапЗнч = Макет.ПолучитьОбласть("ШапкаОрганизация | КолонкаЗначенияРеквизитов");
	Иначе
		ОбластьШапГрп = Макет.ПолучитьОбласть("Шапка | КолонкаГруппировки");
		ОбластьШапЗнч = Макет.ПолучитьОбласть("Шапка | КолонкаЗначенияРеквизитов");	
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапГрп);
	            
	Для каждого РеквизитДокумента Из СписокРеквизитов Цикл
		
		Если РеквизитДокумента.Значение = "Организация" Тогда
			Продолжить;		
		КонецЕсли;
		
		ОбластьШапЗнч.Параметры.ИмяКолонки = РеквизитДокумента.Представление;
		
		ТабличныйДокумент.Присоединить(ОбластьШапЗнч);
				
	КонецЦикла;	

КонецПроцедуры // ТабличныйДокумент_ВывестиШапку()

// Процедура выводит строку с данными в табличный документ.
// 
// Параметры:
//  Параметр1  - Тип_описание
//  Параметр2  - Тип_описание
// 
&НаСервере
Процедура ТабличныйДокумент_ВывестиГруппировкуПоОргнанизации(ОбластьСтрГрп, ОбластьСтрЗнч, Организация, Знач Уровень)

	// Группировка по организации
	ОбластьСтрГрп.Параметры.Организация = Организация;
	ТабличныйДокумент.Вывести(ОбластьСтрГрп, Уровень);
	
	Для каждого РеквизитДокумента Из СписокРеквизитов Цикл
		Если РеквизитДокумента.Значение = "Организация" Тогда
			Продолжить; 				
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьСтрЗнч, Уровень);
	КонецЦикла;		
		
КонецПроцедуры // ТабличныйДокумент_ВывестиГруппировкуПоОргнанизации()

// Процедура выводит строку с данными в табличный документ.
// 
// Параметры:
//  Параметр1  - Тип_описание
//  Параметр2  - Тип_описание
// 
&НаСервере
Процедура ТабличныйДокумент_ВывестиСтроку(ОбластьСтрГрп, ОбластьСтрЗнч, СтрокаДерева, Знач Уровень, ИтоговаяСумма, ЕстьПолеСумма)

	Если ЕстьПолеСумма Тогда 
		ИтоговаяСумма = ИтоговаяСумма + СтрокаДерева.СуммаВзаиморасчеты;
	КонецЕсли;
	
	// Группировка по документам
	ОбластьСтрГрп.Параметры.Документ 		 = СтрокаДерева.Представление;
	ОбластьСтрГрп.ТекущаяОбласть.Расшифровка = СтрокаДерева.Документ;
	ОбластьСтрГрп.ТекущаяОбласть.Отступ		 = Уровень;
	  	
	ТабличныйДокумент.Вывести(ОбластьСтрГрп, Уровень);	
	
	Для каждого РеквизитДокумента Из СписокРеквизитов Цикл
		
		Если РеквизитДокумента.Значение = "Организация" Тогда
			Продолжить; 				
		КонецЕсли;  	
		
		ТекущееЗначение = СтрокаДерева[РеквизитДокумента.Значение]; 
		ОбластьСтрЗнч.Параметры.Значение = ТекущееЗначение;
		Если ТипЗнч(ТекущееЗначение) = Тип("Число") Или ТипЗнч(ТекущееЗначение) = Тип("Дата") Тогда
		 	ОбластьСтрЗнч.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
		Иначе	
			ОбластьСтрЗнч.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьСтрЗнч, Уровень);
		
	КонецЦикла;   
		
	Для каждого СтрокаДереваЗнч Из СтрокаДерева.Строки Цикл
		
		ТемпУровень = Уровень;
		
		Уровень = Уровень + 1;
		ТабличныйДокумент_ВывестиСтроку(ОбластьСтрГрп, ОбластьСтрЗнч, СтрокаДереваЗнч, Уровень, ИтоговаяСумма, ЕстьПолеСумма);
		
		Уровень = ТемпУровень;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличныйДокумент_ВывестиСтроку()

// Основная процедура формирования отчета

// Процедура формирует отчет
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура СформироватьОтчет(ТекстСообщения)
	
	СтрРегистрация = Новый Структура;
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);

	// ----------------------------------------------------------------------
	// Очистка табличного документа
	ТабличныйДокумент.Очистить(); 
	
	// ----------------------------------------------------------------------
	// Формирование дерева данных
	
	Запрос = ПолучитьЗапросСКД();
	РезультатЗапроса = Запрос.Выполнить();
	
	СформироватьСписокРеквизитов();
	ВыводитьГрОрг = СписокРеквизитов.НайтиПоЗначению("Организация") <> Неопределено;
	
	// РезультатЗапроса = ПолучитьРезультатЗапроса();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	ДеревоДокументов = СформироватьДеревоДокументов(РезультатЗапроса, ВыводитьГрОрг);
	КореньДерева = ДеревоДокументов.Строки;
	
	// ----------------------------------------------------------------------
	// Формирование табличного документа
	Макет = Отчеты.бит_РеестрПроектовДоговоров.ПолучитьМакет("Макет");
	
	// Шапка
	ТабличныйДокумент_ВывестиШапку(Макет, ВыводитьГрОрг);
	
	// Вывод дерева
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	// Области группировки по документу
	ОбластьСтрДокГрп = Макет.ПолучитьОбласть("СтрокаДокумент    | КолонкаГруппировки");
	ОбластьСтрДокЗнч = Макет.ПолучитьОбласть("СтрокаДокумент    | КолонкаЗначенияРеквизитов");
	
	ЕстьПолеСумма = ?(ДеревоДокументов.Колонки.Найти("СуммаВзаиморасчеты") = Неопределено, Ложь, Истина);
	
	Если ВыводитьГрОрг Тогда
		
		// Области группировки по организации
		ОбластьСтрОргГрп = Макет.ПолучитьОбласть("СтрокаОрганизация | КолонкаГруппировки");
		ОбластьСтрОргЗнч = Макет.ПолучитьОбласть("СтрокаОрганизация | КолонкаЗначенияРеквизитов");
		
		Для каждого СтрокаДереваОрг Из КореньДерева Цикл
	
			ТабличныйДокумент_ВывестиГруппировкуПоОргнанизации(ОбластьСтрОргГрп, ОбластьСтрОргЗнч, СтрокаДереваОрг.Организация, 0);  							
			
			Для каждого СтрокаДереваДок Из СтрокаДереваОрг.Строки Цикл                                                               			
				ИтоговаяСумма = 0;
				ТабличныйДокумент_ВывестиСтроку(ОбластьСтрДокГрп, ОбластьСтрДокЗнч, СтрокаДереваДок, 1, ИтоговаяСумма, ЕстьПолеСумма);		
				
				Если СтрокаДереваДок.Строки.Количество()>0 Тогда
					ВывестиСтрокуСИтогами(Макет, ИтоговаяСумма, 2);
				КонецЕсли; 
			КонецЦикла;		
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаДереваДок Из КореньДерева Цикл                                                               			
			ИтоговаяСумма = 0;
			ТабличныйДокумент_ВывестиСтроку(ОбластьСтрДокГрп, ОбластьСтрДокЗнч, СтрокаДереваДок, 0, ИтоговаяСумма, ЕстьПолеСумма);
			
			Если СтрокаДереваДок.Строки.Количество()>0 И ЕстьПолеСумма Тогда
				ВывестиСтрокуСИтогами(Макет, ИтоговаяСумма, 1);
			КонецЕсли; 
		КонецЦикла;		
			
	КонецЕсли;
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	ТабличныйДокумент.ФиксацияСверху = 6;
	ТабличныйДокумент.ФиксацияСлева  = 1;
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);

КонецПроцедуры // СформироватьОтчет()

// Процедура выводит строку с итогами по строкам. 
//
&НаСервере
Процедура ВывестиСтрокуСИтогами(Макет, ИтоговаяСумма, Уровень)

	ОбластьДокумент = Макет.ПолучитьОбласть("СтрокаДокумент    | КолонкаГруппировки");
	
	ОбластьДокумент.Параметры.Документ 		= "Итого:";
	ОбластьДокумент.ТекущаяОбласть.Отступ 	= Уровень;
	
	ТабличныйДокумент.Вывести(ОбластьДокумент, Уровень);	
	
	ОбластьИтог = Макет.ПолучитьОбласть("СтрокаДокумент    | КолонкаЗначенияРеквизитов");
	
	Для каждого РеквизитДокумента Из СписокРеквизитов Цикл
		
		Если РеквизитДокумента.Значение = "Организация" Тогда
			Продолжить; 				
		КонецЕсли;  	
		
		Если РеквизитДокумента.Значение = "СуммаВзаиморасчеты" Тогда
		
			ОбластьИтог.Параметры.Значение = ИтоговаяСумма;
			ОбластьИтог.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
			ОбластьИтог.ТекущаяОбласть.Шрифт = Новый Шрифт(,,Истина);
			
		Иначе	
			ОбластьИтог.Параметры.Значение = "";
		КонецЕсли; 
		
		ТабличныйДокумент.Присоединить(ОбластьИтог, Уровень);
		
	КонецЦикла;   

КонецПроцедуры // ВывестиСтрокуСИтогами()

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Отчеты.бит_РеестрПроектовДоговоров.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		СтруктураНастроек.Вставить(ИмяРеквизита, Отчет[ИмяРеквизита]);	
	КонецЦикла;
	
	СтруктураНастроек.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
		
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	// ВосстановленнаяНастройка - Найденное значение в структуре ЗначениеНастроек.
	Перем ВосстановленнаяНастройка;
	// ПользовательскиеНастройки используются для инициализации схемы компоновки данных.
	Перем ПользовательскиеНастройки;
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ТабличныйДокумент.Очистить(); 
	
	
	Если ЗначениеЗаполнено(ВыбНастройка) Тогда
		
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
			
		ЗаполнитьЗначенияСвойств(Отчет, СтруктураНастроек);
		
		СтруктураНастроек.Свойство("ПользовательскиеНастройки", ВосстановленнаяНастройка);
		ПользовательскиеНастройки = ?(ВосстановленнаяНастройка = Неопределено, ПользовательскиеНастройки, ВосстановленнаяНастройка);
		
	Иначе
	
		Отчет.Период.Вариант = ВариантСтандартногоПериода.Месяц;
			
	КонецЕсли;
	
	// Инициализация СКД
	ИнициализироватьСКД(ПользовательскиеНастройки);
				
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
 	
	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	ПрименитьНастройки(НастройкаПоУмолчанию);
		      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",
											ПараметрыФормы,
											ЭтаФорма);	
													
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура обработчик оповещения "НастройкиВосстановитьЗавершение".
// 
// Параметры:
// Настройка - Структура.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(Настройка, ДополнительныеДанные) Экспорт
	
	Если ЗначениеЗаполнено(Настройка) Тогда		
		ПрименитьНастройки(Настройка);		
	КонецЕсли;
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()

#КонецОбласти
