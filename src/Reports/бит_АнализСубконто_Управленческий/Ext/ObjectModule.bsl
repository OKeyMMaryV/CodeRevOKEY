#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Текущий вариант отчета.  
	
Перем МаксКоличествоСубконто Экспорт; // Количество субконто у регистра бухгалтерии.

Перем ЕстьВалюта Экспорт; // Хранить признак наличия валюты.

Перем ЕстьКоличество Экспорт; // Хранить признак наличия количества.
        
Перем МассивШиринКолонок; // Хранить массив ширины колонок.
      
Перем ШиринаТаблицы; // Хранит ширину таблицы.
    
Перем ЗаголовокОтчета Экспорт; // Хранит заголовок отчета.

Перем кэшВидовСубконто; // Хранит соответствие видов субконто.

Перем ИмяРегистраБухгалтерии Экспорт; // Хранит имя регистра бухгалтерии.

Перем мСписокРегистров Экспорт; // Хранит список регистров бухгалтерии управленческого учета.

Перем мПрограммноеОткрытие Экспорт; // Хранит значение программного открытия отчета.

Перем мЕстьРесурсСуммаМУ Экспорт; // Хранит подтверждение наличия ресурса "СуммаМУ".

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Процедура выполняет сохранение настроек отчета.
// 
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина, Истина);
	
	// Заполним переменные отчета значения которых зависят от выбранного регистра бухгалтерии.
	ЗаполнитьПеременныеОтчетаСвязанныеСРегистромБухгалтерии();
	
КонецПроцедуры // ПрименитьНастройку()

// Процедура заполняет настройки построителя отчетов.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
    
    ТекстПолейРесурсов = "";
    ТекстИтогиРесурсов = "";
    МассивПоказателей  = СформироватьМассивПоказателей();
	
	ИмяРегистраБухгалтерии = РегистрБухгалтерии.ИмяОбъекта;
    
    Для Каждого ТекПоказатель Из МассивПоказателей Цикл
        
        ТекстПолейРесурсов = ТекстПолейРесурсов + ", ОстаткиИОбороты." + ТекПоказатель + "ОборотКт"
                             + " КАК " + ТекПоказатель + "ОборотКт";
        
        ТекстИтогиРесурсов = ТекстИтогиРесурсов + ", СУММА(" + ТекПоказатель + "ОборотКт)";
                             
    КонецЦикла;
    
    ТекстПолейРесурсов = Сред(ТекстПолейРесурсов, 2);
    ТекстИтогиРесурсов = Сред(ТекстИтогиРесурсов, 2);
    
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ?(ПустаяСтрока(ТекстПолейРесурсов), " """" Как Поле", ТекстПолейРесурсов);
	
	ТекстПоля    = "";
	ТекстОтбор   = "";
	ТекстИтоги = " Организация";
	ТекстПорядок = "";
	
	МассивСубконто = Субконто.ВыгрузитьКолонку("ВидСубконто");
	
	КолвоСубконто = МассивСубконто.Количество();
	Для н = 1 По КолвоСубконто Цикл
		Если Не ЗначениеЗаполнено(МассивСубконто[КолвоСубконто-н]) Тогда
			МассивСубконто.Удалить(КолвоСубконто-н);
		КонецЕсли;
	КонецЦикла;
	
	// Изменение кода. Начало. 22.07.2014{{
	Если ПоВалютам Тогда
		ТекстОтбор = ТекстОтбор + ", Валюта.*"; 	
	КонецЕсли;
	// Изменение кода. Конец. 22.07.2014}}
	
	Для каждого стр Из Субконто Цикл
	
		Сч = стр.НомерСтроки;
		
		ТекстПоля = ТекстПоля + ", ОстаткиИОбороты.Субконто" + Сч +" КАК Субконто" + Сч;
		ТекстОтбор = ТекстОтбор + ", Субконто" + Сч + ".*";
		ТекстИтоги = ТекстИтоги + ", Субконто" + Сч + ".*";
		ТекстПорядок = ТекстПорядок + ", ОстаткиИОбороты.Субконто" + Сч + ".*";
	
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда
		Текст = Текст +	"
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
		ТекстОтбор = "{" + Сред(ТекстОтбор, 2) + "}";
	КонецЕсли;
	
	Текст = Текст + "
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(, , ПЕРИОД, , {Счет.*} , &МассивСубконто, " + ТекстОтбор + ") КАК ОстаткиИОбороты
	|";
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		Текст = Текст + "
		|{УПОРЯДОЧИТЬ ПО 
		|" + Сред(ТекстПорядок, 2) + "}";
	КонецЕсли;
	
	Текст = Текст + "                           
	|ИТОГИ " + ТекстИтогиРесурсов + " ПО ОБЩИЕ";
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст + "
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("МассивСубконто", МассивСубконто);
	
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из МассивСубконто Цикл
		Сч = Сч + 1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения   = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
    
	// Определим признаки учета субконто, которые могут быть использованы.
    СтруктураУчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьПризнакиУчетаСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии, МассивСубконто);
    
    ЕстьВалюта     = СтруктураУчета.ЕстьВалюта;
    ЕстьКоличество = СтруктураУчета.ЕстьКоличество;
      
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура перезаполняет настройки построителя отчетов с сохранением пользовательских настроек.
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

#КонецОбласти

#Область ЗаголовокОтчета

// Функция формирует заголовок отчета (синоним).
// 
// Возвращаемое значение:
//  ЗаголовокОтчета - Строка.
// 
Функция ЗаголовокОтчета() Экспорт
	
	ПредставлениеРегистра = бит_ПраваДоступа.ПолучитьПредставлениеОбъектаСистемыИзСпискаЗначений(мСписокРегистров, РегистрБухгалтерии);
	
	ТекстЗаголовка = Нстр("ru = 'Анализ субконто (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра);
	
	Возврат ТекстЗаголовка;
	
КонецФункции // ЗаголовокОтчета()

// Процедура выводит шапку отчета.
// 
Функция СформироватьЗаголовок() Экспорт

    ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);

	Макет = ПолучитьМакет("Макет");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = бит_БухгалтерскиеОтчетыСервер.ПолучитьПолноеНазваниеОрганизации(Организация);
	
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ЗаголовокОтчета.Параметры.Заголовок 		  = ЗаголовокОтчета();
	ЗаголовокОтчета.Параметры.ОписаниеПериода  	  = ОписаниеПериода;

    ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
	КонецЕсли;
	Если мЕстьРесурсСуммаМУ И ВыводитьСуммуМУ Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (МСФО)'");
	КонецЕсли;
	Если ПоВалютам Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
	КонецЕсли; 
	Если ПоКоличеству Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'количество'");
	КонецЕсли;
    
	ТекстПроИтоги = "";
	Для каждого Строка Из Субконто Цикл
		
		ТекстПроИтоги = ТекстПроИтоги + ", " + Строка(Строка.ВидСубконто);
		
	КонецЦикла;
	
	ТекстПроИтоги = Нстр("ru = 'Виды субконто: '") + Сред(ТекстПроИтоги, 3);
	
	// Вывод списка фильтров:
	СтрОтбор = "";

	СтрОтбор = Сред(СтрОтбор + ", " + бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор), 3);

	ЗаголовокОтчета.Параметры.ТекстПроСписокРесурсов = ТекстСписокПоказателей;
	ЗаголовокОтчета.Параметры.ТекстПроИтоги          = ТекстПроИтоги;

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

	Возврат Новый ТабличныйДокумент;
    
КонецФункции // СформироватьЗаголовок()

#КонецОбласти

#Область ФормированиеОтчета

// Процедура выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент - Табличный документ, формируемый отчетом.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина) - признак отображения заголовка.
//  ВысотаЗаголовка     - Число (По умолчанию = 0) - высота заголовка.
// 
// Возвращаемое значение:
//  Булево - отчет сформирован.
// 
Функция СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

    // Очистка табличного поля.
	ДокументРезультат.Очистить();
	
	// Проверим наличие ресурса с именем "СуммаМУ".
	мЕстьРесурсСуммаМУ = бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	   	
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;

	    кэшВидовСубконто.Очистить();

		// Запоминание ширины колонки.
		Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

			МассивШиринКолонок.Очистить();

			// Запоминать следует, если документ не пустой.
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				
				Для Сч = 1 По ШиринаТаблицы Цикл
					МассивШиринКолонок.Добавить(ДокументРезультат.Область(1, Сч).ШиринаКолонки);
				КонецЦикла;
				
			КонецЕсли;

		КонецЕсли;
	    		
		// Проверим наличие ресурса с именем "СуммаМУ".
		мЕстьРесурсСуммаМУ = бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистраБухгалтерии);
		
		// Вывод заголовка отчета
		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
		
		
		ТекстОтбор         = "";
		ТекстСубконто      = "";
		ТекстСубконтоИтоги = "";
		
		СписокГруппировок = Новый СписокЗначений;
		
		Запрос = Новый Запрос;
		
		ВидыСубконто = Новый Массив;
		
		// Добавим измерения
		МассивСубконто = Новый Массив;
		
		Для каждого СтрСубконто Из Субконто Цикл
			
			ВидыСубконто.Добавить(СтрСубконто.ВидСубконто);
			// МассивСубконто.Добавить("Субконто" + СтрСубконто.НомерСтроки);
			
		// ТекстСубконто = ТекстСубконто + СтрЗаменить(",
		// 	|	Субконто{н} КАК Субконто{н},
		// 	|	ПРЕДСТАВЛЕНИЕ(Субконто{н}) КАК Субконто{н}Представление", "{н}", СтрСубконто.НомерСтроки);
		// 	
		// 	ТекстСубконтоИтоги = ТекстСубконтоИтоги + СтрЗаменить(",
		// 	|	Субконто{н} КАК Субконто{н}", "{н}", СтрСубконто.НомерСтроки);
			
		КонецЦикла;
		
		Для каждого Измерение Из ТаблицаГруппировки Цикл
			
			// ВидыСубконто.Добавить(СтрСубконто.ВидСубконто);
			МассивСубконто.Добавить(Измерение.Имя);
			
			ТекстСубконто = ТекстСубконто + ",
			|	" + Измерение.ПутьКДанным + " КАК " + Измерение.Имя + ",
			|	ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
			
			ТекстСубконтоИтоги = ТекстСубконтоИтоги + ",
			|	" + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
			
			СписокГруппировок.Добавить(Измерение.Имя, Измерение.Представление, Найти(Измерение.Имя, "Субконто") <> 0);
					
		КонецЦикла;

		
		бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоОрганизации(ТекстОтбор, Организация, ОрганизацияВидСравнения, ОрганизацияИспользование);
				
	    МассивРесурсов = СформироватьМассивПоказателей();
	    
		Запрос.УстановитьПараметр("Видысубконто", ВидыСубконто);
		
		// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
		//бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(Запрос, Организация, Период);
		бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(Запрос, Организация, Период, Истина);
		//}
		
		Запрос.УстановитьПараметр("ДатаНач", Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКон", ?(Период.ДатаОкончания = '00010101000000'
											  , Период.ДатаОкончания
											  , Новый Граница(КонецДня(Период.ДатаОкончания), ВидГраницы.Включая)));
		
		Сч = 0;
		ТекстОтборСчетов = "";
		Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
			
			Если НЕ Элемент.Использование ИЛИ ПустаяСтрока(Элемент.ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Врег(Лев(Элемент.ПутьКДанным, 4)) = "СЧЕТ" Тогда
				ТекстОтборСчетов = ТекстОтборСчетов + " И " + бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(Элемент.ВидСравнения, "&Значение" + Сч, Элемент.ПутьКДанным, "&ЗначениеС" + Сч, "&ЗначениеПо" + Сч, Элемент.Значение, Элемент.ЗначениеС, Элемент.ЗначениеПо);
				
			Иначе
				ТекстОтбор = ?(ПустаяСтрока(ТекстОтбор), " ", ТекстОтбор + " И ") + бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(Элемент.ВидСравнения, "&Значение" + Сч, Элемент.ПутьКДанным, "&ЗначениеС" + Сч, "&ЗначениеПо" + Сч, Элемент.Значение, Элемент.ЗначениеС, Элемент.ЗначениеПо);
			КонецЕсли;
			
			бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, Элемент, Строка(Сч));
			
			Сч = Сч + 1;
		
		КонецЦикла;
		
		СоответствиеКорСубконто = Новый Соответствие;
		
		Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БухОбороты.Счет КАК Счет, 
		|	БухОбороты.Счет.Количественный КАК СчетКоличественный, 
		|	БухОбороты.Счет.Вид КАК ВидСчета, 
		|	БухОбороты.Счет.Валютный КАК СчетВалютный, 
		|	БухОбороты.Счет.Порядок КАК СчетПорядок, 
		|	БухОбороты.Счет.Представление КАК СчетПредставление" + ТекстСубконто;
		
		Если ПоКоличеству Тогда
			Текст = Текст + ",
			|	ВЫБОР КОГДА БухОбороты.Счет.Количественный ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК ЕстьКоличественныеСчета ";
		Иначе
			Текст = Текст + ",
			|	Ложь КАК ЕстьКоличественныеСчета ";
		КонецЕсли;
		
		Если ПоВалютам Тогда
			Текст = Текст + ",
			|	БухОбороты.Валюта КАК Валюта, БухОбороты.Валюта.Представление КАК ВалютаПредставление  ";
		КонецЕсли;
		
		Для каждого ИмяРесурса Из МассивРесурсов Цикл
			
			Текст = Текст + ",
			|	" + ИмяРесурса + "ОборотДт КАК " + ИмяРесурса + "ОборотДт,
			|	" + ИмяРесурса + "ОборотКт КАК " + ИмяРесурса + "ОборотКт,
			|	" + ИмяРесурса + "НачальныйОстатокДт КАК " + ИмяРесурса + "НачДт,
			|	" + ИмяРесурса + "НачальныйОстатокКт КАК " + ИмяРесурса + "НачКт,
			|	" + ИмяРесурса + "КонечныйОстатокДт КАК " + ИмяРесурса + "КонДт,
			|	" + ИмяРесурса + "КонечныйОстатокКт КАК " + ИмяРесурса + "КонКт";
			
		КонецЦикла;
	    
	    ТекстДопОтбор = "";
		// Изменение кода. Начало. 22.07.2014{{
		Если ПоВалютам Тогда
			ТекстДопОтбор = ТекстДопОтбор + "{Валюта.*}"; 	
		КонецЕсли;
		// Изменение кода. Конец. 22.07.2014}}
	    
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , " + Сред(ТекстОтборСчетов, 3)+ ", &ВидыСубконто, " + ТекстОтбор + ТекстДопОтбор +  ") КАК БухОбороты
		| ";
		
		// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
		
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
			//Получаем организации выбывшие или вошедшии в периметр за период из отчета
			ТаблицаОрганизаций = бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиями(Организация,Период.ДатаНачала, Период.ДатаОкончания);  
		КонецЕсли;
		
		
		//Изменение функционала по периметру
		Если (ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации")) И ЗначениеЗаполнено(Организация) Тогда
			
			Если ТаблицаОрганизаций.Количество()> 0 Тогда 
				Сч = 0 ;
				Для Каждого Строка из ТаблицаОрганизаций цикл
					
					Сч = Сч + 1;
					
					
					
					// Ок Видяйкин 20180215 (Задание в Омни AT-1637484) +
					//ТекстОтбор = СтрЗаменить(ТекстОтбор," И Организация В (&Организация)"," И Организация = &Организация"+Сч);
					ТекстОтбор = СтрЗаменить(ТекстОтбор,"Организация В(&Организация )","Организация = &Организация"+Сч);
					// Ок Видяйкин 20180215 +
					Номер = Сч-1;
					ТекстОтбор = СтрЗаменить(ТекстОтбор," И Организация = &Организация"+Номер," И Организация = &Организация"+Сч);
					
					Запрос.УстановитьПараметр("Организация"+Сч , Строка.Организация);
					
					Текст = Текст+ " ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ 
					|	БухОбороты.Счет КАК Счет, 
					|	БухОбороты.Счет.Количественный КАК СчетКоличественный, 
					|	БухОбороты.Счет.Вид КАК ВидСчета, 
					|	БухОбороты.Счет.Валютный КАК СчетВалютный, 
					|	БухОбороты.Счет.Порядок КАК СчетПорядок, 
					|	БухОбороты.Счет.Представление КАК СчетПредставление"+ТекстСубконто;
					
					Если ПоКоличеству Тогда
						Текст = Текст + ",
						|	ВЫБОР КОГДА БухОбороты.Счет.Количественный ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК ЕстьКоличественныеСчета ";
					Иначе
						Текст = Текст + ",
						|	Ложь КАК ЕстьКоличественныеСчета ";
					КонецЕсли;
					
					Если ПоВалютам Тогда
						Текст = Текст + ",
						|	БухОбороты.Валюта КАК Валюта, БухОбороты.Валюта.Представление КАК ВалютаПредставление  ";
					КонецЕсли;
					
					Для каждого ИмяРесурса Из МассивРесурсов Цикл
						
						Если Строка.Период > Строка.НачалоПериод Тогда 
							
							ТекстНачало =  "
							|0 КАК"  +ИмяРесурса+ "НачДт,
							|0 КАК" +ИмяРесурса+ "НачКт,";
							
							
							ТекстКонец =   "
							|   " +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+"КонДт,
							|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "КонКт";
							
						Иначе 
							ТекстНачало = "
							|	" +ИмяРесурса+ "НачальныйОстатокДт КАК " +ИмяРесурса+ "НачДт,
							|	" +ИмяРесурса+ "НачальныйОстатокКт КАК " +ИмяРесурса+ "НачКт,";
							
							
							ТекстКонец =  " 
							|	" +ИмяРесурса+ "КонечныйОстатокДт КАК " +ИмяРесурса+ "КонДт,
							|	" +ИмяРесурса+ "КонечныйОстатокКт КАК " +ИмяРесурса+ "КонКт";
							
						КонецЕсли;	
						
						Текст = Текст + ",
						|	" +ИмяРесурса+ "ОборотДт КАК " +ИмяРесурса+ "ОборотДт,
						|	" +ИмяРесурса+ "ОборотКт КАК " +ИмяРесурса+ "ОборотКт,
						|"+ ТекстНачало +ТекстКонец; 
						
					КонецЦикла;
					
					ТекстДопОтбор = "";
					
					Если Строка.ДатаОкончания > Период.ДатаНачала и
						Строка.ДатаОкончания < КонецДня(Период.ДатаОкончания) Тогда 
						ДатаКонец = "&ДатаКон"+Сч;
						Запрос.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
					Иначе 
						ДатаКонец = "&ДатаКон";
					КонецЕсли;
					
					Если Строка.Период > Период.ДатаНачала Тогда 
						ДатаНачало = "&ДатаНач"+Сч;
						Запрос.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
					Иначе 
						ДатаНачало = "&ДатаНач";
					КонецЕсли;
					
					// ок Видяйкин В.И. 20170220 +
					//Текст = Текст + "
					//|ИЗ
					//|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты("+ДатаНачало+", "+ДатаКонец+", , , " + Сред(ТекстОтборСчетов, 3)+ ", &ВидыСубконто, " + Сред(ТекстОтбор, 3) + ТекстДопОтбор +  ") КАК БухОбороты
					//| ";
					Текст = Текст + "
					|ИЗ
					|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты("+ДатаНачало+", "+ДатаКонец+", , , " + Сред(ТекстОтборСчетов, 3)+ ", &ВидыСубконто, " + ?(Лев(ТекстОтбор, 3)=" И " , Сред(ТекстОтбор, 3), ТекстОтбор) + ТекстДопОтбор +  ") КАК БухОбороты
					| ";					
					// ок Видяйкин В.И. 20170220 -
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//}
		
		ТекстИтоги   = "";
		ТекстПорядок = "";
		
		Для каждого Элемент Из ПостроительОтчета.Порядок Цикл
		
			Если ПустаяСтрока(Элемент.ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстПорядок = ТекстПорядок + ", " + Элемент.ПутьКДанным + " "+ ?(Элемент.Направление = НаправлениеСортировки.Возр, "Возр", "Убыв");
			
		КонецЦикла;

		Если Не ПустаяСтрока(ТекстПорядок) Тогда
			
			Текст = Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	" + Сред(ТекстПорядок, 2);
			
		Иначе
			
			Текст = Текст + "
			|АВТОУПОРЯДОЧИВАНИЕ";
			
		КонецЕсли;
		
		Для каждого ИмяРесурса Из МассивРесурсов Цикл
		
			ТекстИтоги = ТекстИтоги + ",
			|	СУММА(" + ИмяРесурса + "ОборотДт),
			|	СУММА(" + ИмяРесурса + "ОборотКт),
			|	СУММА(" + ИмяРесурса + "НачДт),
			|	СУММА(" + ИмяРесурса + "НачКт)";
		
		КонецЦикла; 
		
		
		Текст = Текст + "
		|ИТОГИ " + Сред(ТекстИтоги, 2)+ ", МАКСИМУМ(ЕстьКоличественныеСчета)
		|	ПО ОБЩИЕ";
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет";
		
		// Добавим итоги по субконто.
		Текст = Текст + ТекстСубконтоИтоги;
		
		Если ПоВалютам Тогда
			Текст = Текст + ", Валюта КАК Валюта";
		КонецЕсли;
		
		Запрос.Текст = Текст;
		
		// Состояние("Выполнение запроса");
		Результат = Запрос.Выполнить();
		
		Макет = ПолучитьМакет("Макет");
		
		// ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		// ДокументРезультат.Вывести(ОбластьЗаголовкаТаблицы, 1);
		// Вывод шапки.
		ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокГруппировки = "";
		Для каждого ЭлГр Из СписокГруппировок Цикл
			ЗаголовокГруппировки = ЗаголовокГруппировки + СокрЛп(ЭлГр.Представление) + Символы.ПС;
		КонецЦикла;
		ЗаголовокГруппировки = ЗаголовокГруппировки + "Счет";
		ОбластьЗаголовкаТаблицы.Параметры.Группировки = ЗаголовокГруппировки;
		ДокументРезультат.Вывести(ОбластьЗаголовкаТаблицы, 1);
		
		ОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
		ЕстьИтог = ОбщийИтог.Следующий();
		
		// Валюта
		ОбластьСтрокаВалюта = Макет.ПолучитьОбласть("СтрокаВалюта");
		
		// Субконто
		
		ВыводКоличества = ПоКоличеству;
		Если ЕстьИтог Тогда
			ВыводКоличества = ПоКоличеству И ОбщийИтог.ЕстьКоличественныеСчета;
		КонецЕсли;
		
		ОбластьСтрокаСубконто  = Макет.ПолучитьОбласть("СтрокаСубконто");
		ОбластьИтогСубконто    = Макет.ПолучитьОбласть("ИтогСубконто");
		ОбластьИтогСубконтоКоличество = Макет.ПолучитьОбласть("ИтогСубконтоКоличество");
		
		// Счет
		ОбластьСтрокаСчет = Макет.ПолучитьОбласть("СтрокаСчет");
		ОбластьСтрокаСчетКоличество = Макет.ПолучитьОбласть("СтрокаСчетКоличество");

		// Сдвиг уровня выводимой группировки отчета относительно группировки запроса.
		СдвигУровня = 0;
		
		// Флаг сброса сдвига уровня при выводе группировки по счету.
		СброситьСдвигУровня = Истина;

		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("ОбластьСтрокаСчет"		  , ОбластьСтрокаСчет);
		СтруктураПараметров.Вставить("ОбластьСтрокаСчетКоличество", ОбластьСтрокаСчетКоличество);
		СтруктураПараметров.Вставить("ОбластьСтрокаВалюта"		  , ОбластьСтрокаВалюта);
		
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконто"		, ОбластьСтрокаСубконто);
		СтруктураПараметров.Вставить("ОбластьИтогСубконто"		    , ОбластьИтогСубконто);
		СтруктураПараметров.Вставить("ОбластьИтогСубконтоКоличество", ОбластьИтогСубконтоКоличество);
		
		СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
				
		СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
		
		СтруктураПараметров.Вставить("МассивСубконто", МассивСубконто);
		СтруктураПараметров.Вставить("СписокГруппировок", СписокГруппировок);
	    СтруктураПараметров.Вставить("МассивРесурсов", МассивРесурсов);
	    
	    НомерВалютнойСуммы = СтруктураПараметров.МассивРесурсов.Найти("ВалютнаяСумма");
	    Если Не НомерВалютнойСуммы = Неопределено Тогда
	        СтруктураПараметров.МассивРесурсов.Удалить(НомерВалютнойСуммы);
	    КонецЕсли;
	    
	    НомерКоличества = СтруктураПараметров.МассивРесурсов.Найти("Количество");
	    Если Не НомерКоличества = Неопределено Тогда
	        СтруктураПараметров.МассивРесурсов.Удалить(НомерКоличества);
	    КонецЕсли;
	    
		// Вывод отчета

		ДокументРезультат.НачатьАвтогруппировкуСтрок();

		// Вывод группировок
		Если СписокГруппировок.Количество() > 0 Тогда			
			ВыводГруппировки(Результат, СтруктураПараметров, 0, Новый Соответствие);
		КонецЕсли;
		
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
		// Итого по отчету
		
		ОбластьИтог = Макет.ПолучитьОбласть("ИтогОтчет");
		ОбластьИтог.Параметры.Заполнить(ОбщийИтог);
	    
	    // Заполним параметры области.
	    бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьИтог, ОбщийИтог, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
	    бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьИтог, ОбщийИтог, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
	    
	    Если ЕстьИтог Тогда
	        
	        ТекстСуммаКонДт = "";
	        ТекстСуммаКонКт = "";
	        
	        Для Каждого ТекРесурс Из СтруктураПараметров.МассивРесурсов Цикл
	            
	            СуммаКонДт = ОбщийИтог[ТекРесурс + "НачДт"] + ОбщийИтог[ТекРесурс + "ОборотДт"];
	            СуммаКонКт = ОбщийИтог[ТекРесурс + "НачКт"] + ОбщийИтог[ТекРесурс + "ОборотКт"];
	            
	            Если СуммаКонДт > СуммаКонКт Тогда
	                СуммаКонДт = СуммаКонДт - СуммаКонКт;
	                СуммаКонКт = 0;
	            Иначе
	                СуммаКонКт = СуммаКонКт - СуммаКонДт;
	                СуммаКонДт = 0;
	            КонецЕсли;
	            
	            ТекстСуммаКонДт = ТекстСуммаКонДт + ?(ПустаяСтрока(ТекстСуммаКонДт), "", Символы.ПС) 
	                              + Строка(Формат(СуммаКонДт, "ЧЦ=15; ЧДЦ=2"));
	            
	            ТекстСуммаКонКт = ТекстСуммаКонКт + ?(ПустаяСтрока(ТекстСуммаКонКт), "", Символы.ПС) 
	                              + Строка(Формат(СуммаКонКт, "ЧЦ=15; ЧДЦ=2"));
	        КонецЦикла;
	        
	        ОбластьИтог.Параметры.СуммаКонДт = ТекстСуммаКонДт;
			ОбластьИтог.Параметры.СуммаКонКт = ТекстСуммаКонКт;
	        
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьИтог);
		
		// Заполним общую расшифровку:
		СтруктураНастроекОтчета = Новый Структура;

		СтруктураНастроекОтчета.Вставить("Период", Период);
		
		СтруктураНастроекОтчета.Вставить("Организация"             , Организация);
		СтруктураНастроекОтчета.Вставить("ОрганизацияВидСравнения" , ОрганизацияВидСравнения);
		СтруктураНастроекОтчета.Вставить("ОрганизацияИспользование", ОрганизацияИспользование);
	    
	    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуРегл" , ВыводитьСуммуРегл);
	    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуУпр"  , ВыводитьСуммуУпр);
	    СтруктураНастроекОтчета.Вставить("РегистрБухгалтерии", РегистрБухгалтерии);
		
		Если мЕстьРесурсСуммаМУ Тогда
			СтруктураНастроекОтчета.Вставить("ВыводитьСуммуМУ", ВыводитьСуммуМУ);
		КонецЕсли;
		
		СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

		ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;
		
		// Обведение таблицы отчета линией, как в области границы.
		ТолстаяЛиния = ОбластьИтог.Область(ОбластьИтог.ВысотаТаблицы, 2).ГраницаСнизу;
		
		ДокументРезультат.Область(ВысотаЗаголовка + 2, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы).Обвести(ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния, ТолстаяЛиния);
		
		ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
		
		// Восстановление ширин колонок
		Если ТипЗнч(МассивШиринКолонок) = Тип("Массив") Тогда
			Если МассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
				Инд = 0;
				Для Каждого Элемент Из МассивШиринКолонок Цикл
					ДокументРезультат.Область(, 1 + Инд, , 1 + Инд).ШиринаКолонки = Элемент;
					Инд = Инд + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		// Зафиксируем заголовок отчета
		ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;
		
		// Шапка отчета должна быть на каждом листе
		ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка+1, , ВысотаЗаголовка + 3);
		
		// Первую колонку не печатаем
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
		
		// Присвоим имя для сохранения параметров печати табличного документа.
		ДокументРезультат.КлючПараметровПечати = "АнализСубконто" + ИмяРегистраБухгалтерии;
		
		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
		
	КонецЕсли;

	Возврат ОтчетСформирован;
	
КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
//
// Возвращаемое значение:
//  Массив - массив показателей.
// 
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
	
	Если мЕстьРесурсСуммаМУ И ВыводитьСуммуМУ Тогда 
        МассивПоказателей.Добавить("СуммаМУ");
    КонецЕсли;
	
    Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;
    
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

// Проверка корректности настроек отчета
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПараметрыОтчетаКорректны()
  	
	РезультатПроверки = 
		бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьКорректностьСубконто(Субконто)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Ложь, мЕстьРесурсСуммаМУ);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()

#КонецОбласти

#Область ФормированиеОтчета

// Заполняет параметры расшифровки
// 
// Параметры:
// 	Область.
//  Выборка.
//  ОтборСубконто.
// 
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено, Измерение = Неопределено)

	ТаблицаОтборовРасшифровки = бит_БухгалтерскиеОтчетыСервер.ИнициализироватьТаблицуОтборовДляРасшифровки();
	
	ПараметрыКарточкиСчета = Новый Структура;
    
    ИмяРегистраБухгалтерииБезПрефикса = "_Управленческий";
    
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта"	   , "бит_КарточкаСчета" + ИмяРегистраБухгалтерииБезПрефикса);
	ПараметрыКарточкиСчета.Вставить("Счет"			   , Выборка.Счет);
	ПараметрыКарточкиСчета.Вставить("СпособРасшифровки", "Отчет");

	ПараметрыКарточкиСубконто = Новый Структура;
	
	ПараметрыКарточкиСубконто.Вставить("ИмяОбъекта"		  , "бит_КарточкаСубконто" + ИмяРегистраБухгалтерииБезПрефикса);
	ПараметрыКарточкиСубконто.Вставить("СпособРасшифровки", "Отчет");
	
	ТекГруппировка = СокрЛп(Выборка.Группировка());
	
	Если ТекГруппировка = "Организация" Тогда
		
		Если ОтборСубконто = Неопределено Тогда
			ОтборСубконто = Новый Соответствие; // На самом деле это измерения, просто такое название.
		КонецЕсли;
		ОтборСубконто.Вставить(ТекГруппировка,  Выборка[ТекГруппировка]);
		
		ОтборРасшифровка = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
		
		ПараметрыКарточкиСубконто.Вставить("Отбор", ОтборРасшифровка);
		ПараметрыКарточкиСубконто.Вставить("ВидыСубконто", Субконто.ВыгрузитьКолонку("ВидСубконто"));
		
		бит_БухгалтерскиеОтчетыСервер.ДобавитьОтборПоОрганизацииВРасшифровку(ОтборСубконто, ПараметрыКарточкиСубконто);
		
		СписокРасшифровки = Новый СписокЗначений;
		
		СписокРасшифровки.Добавить(ПараметрыКарточкиСубконто, Нстр("ru = 'Карточка субконто '") + ТекГруппировка);
		
	ИначеЕсли Лев(ТекГруппировка, СтрДлина(ТекГруппировка) - 1) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(ТекГруппировка, Выборка[ТекГруппировка]);
						
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			Для каждого Элемент Из ПостроительОтчета.Отбор Цикл  			
				Если НЕ Элемент.Использование ИЛИ ПустаяСтрока(Элемент.ПутьКДанным) Тогда
					Продолжить;
				КонецЕсли;
				Если Найти(Элемент.ПутьКДанным, "Субконто") = 0 Тогда
					
					// ОтборРасшифровка.Вставить(Элемент.ПутьКДанным, Элемент.Значение);  					
					СтрТР = ТаблицаОтборовРасшифровки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрТР, Элемент);
					
				Иначе
					
					НайденноеСубконто = ОтборСубконто.Получить(Элемент.ПутьКДанным);
					Если НайденноеСубконто <> Неопределено Тогда
						СтрТР = ТаблицаОтборовРасшифровки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрТР, Элемент);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
					
			ПараметрыКарточкиСубконто.Вставить("Отбор"		 , ОтборРасшифровка);
			ПараметрыКарточкиСубконто.Вставить("ВидыСубконто", Субконто.ВыгрузитьКолонку("ВидСубконто"));

			ПараметрыКарточкиСубконто.Вставить("ТаблицаОтборовРасшифровки"
								, бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаОтборовРасшифровки));
								
			бит_БухгалтерскиеОтчетыСервер.ДобавитьОтборПоОрганизацииВРасшифровку(ОтборСубконто, ПараметрыКарточкиСубконто);
			
		КонецЕсли;        		
		
		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСубконто, Нстр("ru = 'Карточка субконто '") + ТекГруппировка);
		
	ИначеЕсли ТекГруппировка = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		Если ОтборСубконто <> Неопределено Тогда
			
			// Область должна содержать свою копию отбора по субконто.
			
			тзВидыСубконто = кэшВидовСубконто[Выборка.Счет];
			Если тзВидыСубконто = Неопределено Тогда
				
				тзВидыСубконто = Выборка.Счет.ВидыСубконто;
				кэшВидовСубконто.Вставить(Выборка.Счет, тзВидыСубконто);
				
			КонецЕсли;
			
			ОтборРасшифровка = Новый Соответствие; 			
			Для каждого Элемент Из ОтборСубконто Цикл
				
				Если Найти(Элемент.Ключ, "Субконто") = 0 Тогда
					ОтборРасшифровка.Вставить(Элемент.Ключ, Элемент.Значение);					
				Иначе  				
					НовыйПутьКСубконто = бит_БухгалтерскиеОтчетыСервер.ПолучитьНовыйПутьКСубконто(Элемент.Ключ, Субконто, Выборка.Счет, тзВидыСубконто);
					Если НовыйПутьКСубконто <> Неопределено Тогда   				
						ОтборРасшифровка.Вставить(НовыйПутьКСубконто, Элемент.Значение);  				
					КонецЕсли;
				КонецЕсли;
			
			КонецЦикла;
			
			Для каждого Элемент Из ПостроительОтчета.Отбор Цикл 			
				
				Если НЕ Элемент.Использование ИЛИ ПустаяСтрока(Элемент.ПутьКДанным) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Найти(Элемент.ПутьКДанным, "Субконто") = 0 Тогда
					
					// ОтборРасшифровка.Вставить(Элемент.ПутьКДанным, Элемент.Значение);
					
					СтрТР = ТаблицаОтборовРасшифровки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрТР, Элемент);
					
				Иначе
					
					НайденноеСубконто = ОтборСубконто.Получить(Элемент.ПутьКДанным);
					Если НайденноеСубконто <> Неопределено Тогда
						
						НовыйПутьКСубконто = бит_БухгалтерскиеОтчетыСервер.ПолучитьНовыйПутьКСубконто(Элемент.ПутьКДанным, Субконто, Выборка.Счет, тзВидыСубконто);
						Если НовыйПутьКСубконто <> Неопределено Тогда   				
							СтрТР = ТаблицаОтборовРасшифровки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрТР, Элемент, , "ПутьКДанным, Имя");
							СтрТР.ПутьКДанным = НовыйПутьКСубконто;
							СтрТР.Имя = СтрТР.ПутьКДанным;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;

			ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
			               
			ПараметрыКарточкиСчета.Вставить("ТаблицаОтборовРасшифровки"
								, бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаОтборовРасшифровки));
								
			бит_БухгалтерскиеОтчетыСервер.ДобавитьОтборПоОрганизацииВРасшифровку(ОтборСубконто, ПараметрыКарточкиСчета);
			
		КонецЕсли;
				
		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, Нстр("ru = 'Карточка счета '") + Выборка.Счет);
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Процедура выводит в отчет строки счетов.
// 
// Параметры:
//  Выборка 			- Результат запроса.
//  Инд 				- Число.
//  СтруктураПараметров - Структура
//  ОтборДляРасшифровки - Соответствие.
// 
Процедура ВывестиСчета(Выборка, СтруктураПараметров, ОтборДляРасшифровки = Неопределено)
	
	ВыборкаПоСчетам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
	
	Пока ВыборкаПоСчетам.Следующий() Цикл
		
		// Вывод нач сальдо
		Если ВыборкаПоСчетам.ЕстьКоличественныеСчета Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчетКоличество;
		Иначе
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
		КонецЕсли;
		
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаПоСчетам);
        
        // Заполним параметры области.
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСчетам, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСчетам, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСчетам, СтруктураПараметров.МассивРесурсов, "КонДт, КонКт");
        
		Уровень = ВыборкаПоСчетам.Уровень();
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСчетам, ОтборДляРасшифровки);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		// Вывод начального сальдо: конец
		
		// Вывод вложенных итогов
		
		// Вывод валют
		Если ПоВалютам И ВыборкаПоСчетам.СчетВалютный=Истина Тогда
			ВывестиВалюты(ВыборкаПоСчетам, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		КонецЕсли;
		
		// Если нужно выводить субсч ета, выберем следующий уровень счетов.
		Если ПоСубсчетам Тогда
			ВывестиСчета(ВыборкаПоСчетам, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		КонецЕсли;
		// Вывод вложенных итогов: конец
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиСчета()

// Процедура выводит в отчет строки валют.
// 
// Параметры:
//  Выборка 			- Результат запроса.
//  СтруктураПараметров - Структура.
//  ОтборДляРасшифровки - Соответствие.
// 
Процедура ВывестиВалюты(Выборка, СтруктураПараметров, ОтборДляРасшифровки)
	
	ВыборкаВалют = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");

	Пока ВыборкаВалют.Следующий() Цикл
		
		// Вывод нач сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалюта;
		
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаВалют);
        
        // Заполним параметры области.
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаВалют, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаВалют, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
        бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаВалют, СтруктураПараметров.МассивРесурсов, "КонДт, КонКт");
        
		Уровень = ВыборкаВалют.Уровень();
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаВалют);
		
		СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
		// Вывод начального сальдо: конец
				
	КонецЦикла;

КонецПроцедуры // ВывестиВалюты()

// Процедура выводит субконто определенного номера.
// 
// Параметры:
//  Выборка 			- Результат запроса.
//  Инд 				- Число.
//  СтруктураПараметров - Структура.
//  ОтборДляРасшифровки - Соответствие.
// 
Процедура ВыводСубконто(Выборка, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки)
	
	Если Инд <= СтруктураПараметров.МассивСубконто.Количество()-1 Тогда
		
		Измерение = СтруктураПараметров.МассивСубконто[Инд];
		
		Если Инд = 0 Тогда
			ОтборДляРасшифровки = Новый Соответствие;
		КонецЕсли;
		
		ВыборкаПоСубконто = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
		
		Пока ВыборкаПоСубконто.Следующий() Цикл
			
			// Вывод нач сальдо
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСубконто;
			
			ВыводимаяОбласть.Параметры.СубконтоПредставление = ВыборкаПоСубконто[Измерение + "Представление"];
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаПоСубконто);
			
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСубконто, ОтборДляРасшифровки);
			
			ВыводимаяОбласть.Область(1, 2).Отступ = Инд; // Уровень выделяется отступом
			
			Уровень = ВыборкаПоСубконто.Уровень();
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод начального сальдо: конец
			
			
			// Вывод вложенных итогов
			ВыводСубконто(ВыборкаПоСубконто, Инд + 1, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			// Вывод вложенных итогов: конец
			
			Если ВыборкаПоСубконто.ЕстьКоличественныеСчета Тогда
				ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСубконтоКоличество;
			Иначе
				ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСубконто;
			КонецЕсли;
			
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаПоСубконто);
            
            // Заполним параметры области.
            бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСубконто, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
            бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСубконто, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
            бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСубконто, СтруктураПараметров.МассивРесурсов, "КонДт, КонКт");
            
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСубконто, ОтборДляРасшифровки);
			
			ВыводимаяОбласть.Область(1, 2, ВыводимаяОбласть.ВысотаТаблицы, 2).Отступ = Инд; // Уровень выделяется отступом
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			// Вывод оборота и кон сальдо: конец
			
		КонецЦикла;
		
	Иначе
		
		ВывестиСчета(Выборка, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		
	КонецЕсли;
	
КонецПроцедуры // ВыводСубконто()

// Вывод группировки: организация, цфо, субконто...
// 
//  Выборка
//  СтруктураПараметров - Структура.
// 
Процедура ВыводГруппировки(ВыборкаРезультат, СтруктураПараметров, Инд, ОтборДляРасшифровки)
	
	СписокГруппировок = СтруктураПараметров.СписокГруппировок;
	
	Если Инд <= СписокГруппировок.Количество()-1 Тогда
		
		ТекущаяГруппировка = СписокГруппировок[Инд];
		Измерение = СписокГруппировок[Инд].Значение;
		ИзмерениеПредставление = ?(ТекущаяГруппировка.Пометка, Измерение + "Представление", Измерение);
				
		Выборка = ВыборкаРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);  
			
		Пока Выборка.Следующий() Цикл
			
			Если Инд = 0 Тогда
				ОтборДляРасшифровки = Новый Соответствие;
			КонецЕсли;
		
			Если Выборка.ЕстьКоличественныеСчета Тогда
				ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСубконтоКоличество;
			Иначе
				ВыводимаяОбласть = СтруктураПараметров.ОбластьИтогСубконто;
			КонецЕсли;
			
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[ИзмерениеПредставление];
			ВыводимаяОбласть.Параметры.Заполнить(Выборка);
			
			// Заполним параметры области.
			бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, Выборка, СтруктураПараметров.МассивРесурсов, "НачДт, НачКт");
			бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, Выборка, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
			бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, Выборка, СтруктураПараметров.МассивРесурсов, "КонДт, КонКт");
			
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, Выборка, ОтборДляРасшифровки, Измерение);
			
			ВыводимаяОбласть.Область(1, 2, ВыводимаяОбласть.ВысотаТаблицы, 2).Отступ = Инд; // Уровень выделяется отступом
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Выборка.Уровень());
	
			// --------------------------------------------------
			// Вывод следующей группировки
			// Инд = Инд + 1;
			ВыводГруппировки(Выборка, СтруктураПараметров, Инд + 1, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
			// Инд = Инд - 1;
			
		КонецЦикла;
		
	Иначе
		
		// ВыводСубконто(ВыборкаРезультат, 0, СтруктураПараметров, ОтборДляРасшифровки);
		ВывестиСчета(ВыборкаРезультат, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки));
		
	КонецЕсли;
	
КонецПроцедуры // ВыводГруппировки()

#КонецОбласти

// Процедура заполняет переменные отчета значения которых зависят
// от выбранного регистра бухгалтерии.
// 
// Параметры:
//  Нет
// 
Процедура ЗаполнитьПеременныеОтчетаСвязанныеСРегистромБухгалтерии() Экспорт
	
	МаксКоличествоСубконто = Метаданные.ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].МаксКоличествоСубконто;
	
КонецПроцедуры // ЗаполнитьПеременныеОтчетаСвязанныеСРегистромБухгалтерии()

#КонецОбласти

#Область Инициализация

ЕстьВалюта     = Ложь;
ЕстьКоличество = Ложь;

МассивШиринКолонок = Новый Массив;
ШиринаТаблицы      = 0;

кэшВидовСубконто = Новый Соответствие;

ИмяРегистраБухгалтерии = ?(ЗначениеЗаполнено(РегистрБухгалтерии), РегистрБухгалтерии.ИмяОбъекта, "");
 
СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();
                   
// Сформируем список выбора регистров бухгалтерии.
мСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии, "бит_Дополнительный");

мПрограммноеОткрытие = Ложь;
мЕстьРесурсСуммаМУ   = Ложь;

#КонецОбласти

#КонецЕсли
