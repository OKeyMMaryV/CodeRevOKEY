#Область ОписаниеПеременных

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;

// Служит для передачи вида параметра между обработчиками.
&НаКлиенте
Перем мТекущийВидПараметра;

// Хранит соответствие результатов формирования отчета.
&НаКлиенте
Перем мСоответствиеРезультатов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	фПолноеИмяОтчета = бит_ОбщегоНазначения.ПолучитьИмяОбъектаПоИмениФормы(ЭтаФорма.ИмяФормы, Истина);
			
	// Вызов механизма защиты
		
	Если Отказ Тогда	
		Возврат;	
	КонецЕсли; 
	
	Отчет.СтандартныйПериод.Вариант = ВариантСтандартногоПериода.ЭтотГод;
	
	ЗаполнитьКэшЗначений();
	
	Если Параметры.Свойство("НастройкаОтчета") Тогда
		
		Отчет.НастройкаОтчета = Параметры.НастройкаОтчета;
		Элементы.КомандаПанельСохраненныхНастроек.Видимость = Ложь;
		
		Параметры.Свойство("РежимРасшифровки", Отчет.РежимРасшифровки);
		Параметры.Свойство("ИмяОбласти"      , Отчет.ИмяОбластиРасшифровки);
		Параметры.Свойство("НастройкаОтчета" , Отчет.НастройкаОтчета);
		Параметры.Свойство("ДатаНачала"      , Отчет.ДатаНачала);
		Параметры.Свойство("ДатаОкончания"   , Отчет.ДатаОкончания);
		Если ЗначениеЗаполнено(Отчет.ДатаНачала) Тогда		
			Отчет.СтандартныйПериод.ДатаНачала    = Отчет.ДатаНачала;		
		КонецЕсли;
		Если ЗначениеЗаполнено(Отчет.ДатаОкончания) Тогда		
			Отчет.СтандартныйПериод.ДатаОкончания = Отчет.ДатаОкончания;		
		КонецЕсли; 
		Параметры.Свойство("ФорматЧисел"     , Отчет.ФорматЧисел);
		Параметры.Свойство("ВалютаДокумента" , Отчет.ВалютаДокумента);
		Параметры.Свойство("КурсДокумента"     , Отчет.КурсДокумента);
		Параметры.Свойство("КратностьДокумента", Отчет.КратностьДокумента);
		Параметры.Свойство("Организация"       , Отчет.Организация);
		Параметры.Свойство("Язык"              , Отчет.Язык);
	
	Иначе
		
		ОбновитьПанельСохраненныхНастроек(Ложь, Истина);	
		
	КонецЕсли;	
	
	Если Отчет.РежимРасшифровки Тогда
		
		ПриСозданииНаСервереВРежимеРасшифровки(Отказ);
		
	КонецЕсли; 
	
	УстановитьВидимость();
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	
	// Видимость панели сохраненных настроек
	Элементы.КомандаПанельСохраненныхНастроек.Пометка	 	 = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	мСоответствиеРезультатов = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Отчет.НастройкаОтчета) И НЕ ОтчетСформирован Тогда
		СформироватьОтчетПриОткрытии();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АктивизироватьОбласть" И Источник = УникальныйИдентификатор Тогда
		АктивизироватьОбласть(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	СуммаОтчета = бит_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Результат);
	
КонецПроцедуры // РезультатПриАктивизацииОбласти()

&НаКлиенте
Процедура РезультатПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.СодержитЗначение 
		 И ТипЗнч(Область.Значение) = Тип("Число") Тогда
		 
		ИзменениеСодержимогоОбласти(Область.Имя,Область.Значение);
			
	КонецЕсли;
	
КонецПроцедуры // РезультатПриИзмененииСодержимогоОбласти()

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ИзменениеВалютыСервер();
	
КонецПроцедуры // ВалютаПриИзменении()

&НаКлиенте
Процедура НастройкаОтчетаПриИзменении(Элемент)
	
	ИзменениеНастройки();
	
КонецПроцедуры // НастройкаОтчетаПриИзменении()

&НаКлиенте
Процедура ЯзыкПриИзменении(Элемент)
	
	ВывестиМакетОтчета();
	
КонецПроцедуры // ЯзыкПриИзменении()

&НаКлиенте
Процедура ФорматЧиселПриИзменении(Элемент)
	
	бит_МеханизмПолученияДанных.УстановитьФорматВывода(Отчет.НастройкаОтчета, Результат, Отчет.ФорматЧисел, Отчет.Язык);
	
КонецПроцедуры // ФорматЧиселПриИзменении()

&НаКлиенте
Процедура ФорматЧиселНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонструктовФормата = Новый КонструкторФорматнойСтроки(Отчет.ФорматЧисел);
	
	КонструктовФормата.ДоступныеТипы = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	
	ДопПараметры = Новый Структура("КонструктовФормата", КонструктовФормата);
	ОбработчикКФ = Новый ОписаниеОповещения("КонструктовФорматаОткрытьЗавершение", ЭтотОбъект, ДопПараметры);
	КонструктовФормата.Показать(ОбработчикКФ);
		
КонецПроцедуры // ФорматЧиселНачалоВыбора()

&НаКлиенте
Процедура ДатаОкончанияОднаДатаПриИзменении(Элемент)
	
	ОпределитьДатуНачалаДляМСФО();
																				  
КонецПроцедуры // ДатаОкончанияОднаДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьЗаголовокОрганизации();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
	                                                   ,Элемент
	                                                   ,Отчет
	                                                   ,"Организация"
													   ,фКэшЗначений.СписокТиповОрганизация
													   ,СтандартнаяОбработка);
													   
КонецПроцедуры // ОрганизацияНачалоВыбора()

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.ВыбиратьТип = Истина;
	
КонецПроцедуры // ОрганизацияОчистка()

// Процедура - обработчик события "Нажатие" элемента формы "ДекорацияНастройки<№>".
// 
&НаКлиенте
Процедура Подключаемый_ДекорацияСохраненнойНастройкиНажатие(Элемент)
	
	// Сохраним результат
	Если ЗначениеЗаполнено(фИмяЭлемента_ВыбраннаяНастройка) 
		И фСтруктураСохраненныхНастроек.Свойство(фИмяЭлемента_ВыбраннаяНастройка) Тогда
		
		СтруктураСохр = Новый Структура("Результат, ДанныеРасшифровки", Результат, ДанныеРасшифровки);
		КлючНастройки = фСтруктураСохраненныхНастроек[фИмяЭлемента_ВыбраннаяНастройка].КлючНастройки;
		мСоответствиеРезультатов.Вставить(КлючНастройки, СтруктураСохр);
		
	КонецЕсли;
	
	// Обновление пользовательских настроек
	ИмяЭлемента = Элемент.Имя;
	НастройкиОбновлены = ОбновитьНастройки(ИмяЭлемента, мСоответствиеРезультатов);
	Если Не НастройкиОбновлены Тогда
		ТекстСообщения = Нстр("ru = 'Настройка не найдена. Обновите панель сохраненных настроек.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 	
	КонецЕсли;
	
	бит_ОтчетыКлиент.ОбработатьНажатиеНаПолеСохраненнойНастройки(Элементы, 
																Элемент, 
																фИмяЭлемента_ВыбраннаяНастройка);
																
	УстановитьВидимость();																
																	     			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущаяСтрока.Значение = Неопределено Тогда
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
		
	Иначе	
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборВОтчетеПриНачалеРедактирования()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);
	
КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВидовСравнения);
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры // ОтборВОтчетеЗначениеОчистка()

&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметры

&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение;   			
	КонецЕсли; 
	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	ОграничитьОписаниеТиповПараметра();
	
КонецПроцедуры // ТаблицаПараметрыПриНачалеРедактирования()

&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		
		ОграничитьОписаниеТиповПараметра();
				
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыВидПараметраПриИзменении()

&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраНачалоВыбора()

&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	Если бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Отчет.СтандартныйПериод.ДатаНачала, Отчет.СтандартныйПериод.ДатаОкончания) Тогда
		
		ЗаполнитьДанные();
		
	КонецЕсли;
	
	// +СБ. Кузнецова С. 2015-01-28
	НазватьПериоды();	
	// -СБ. Кузнецова С.
	
КонецПроцедуры // КомандаСформировать()

&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();	
	
КонецПроцедуры // КомандаПанельНастроек()

&НаКлиенте
Процедура КомандаНастроитьПериод(Команда)
	
	бит_РаботаСДиалогамиКлиент.ОткрытьДиалогСтандартногоПериода(Отчет, "СтандартныйПериод");
	
КонецПроцедуры // КомандаНастроитьПериод()

&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()

&НаКлиенте
Процедура ЗаполнитьПараметры(Команда)
	
	Если Отчет.ТаблицаПараметры.Количество() > 0 Тогда
		
		ОбработкаВЗП = Новый ОписаниеОповещения("ОбработкаОтветаЗПЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Параметры будут перезаполнены. Продолжить?'");     		
		ПоказатьВопрос(ОбработкаВЗП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ОбновитьТаблицуПараметров();
		
	КонецЕсли; 
		
КонецПроцедуры // ЗаполнитьПараметры()

&НаКлиенте
Процедура УдалитьПримечания(Команда)
	
	Элементы.УдалитьПримечания.Пометка = НЕ Элементы.УдалитьПримечания.Пометка;
	Отчет.УдалитьПримечания = НЕ Отчет.УдалитьПримечания;
	
	Если Отчет.УдалитьПримечания Тогда
		
		ВыполнитьУдалениеПримечаний(Результат);
		
	Иначе	
		
		ВывестиМакетОтчета();
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьПримечания()

&НаКлиенте
Процедура СохранитьЭкземпляр(Команда)
	
	// Упакуем объект в структуру
	ПараметрыОтчета = ПолучитьСтруктуруПараметровОтчета(); 
	
	// Создадим параметры формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	ОткрытьФорму("Справочник.бит_ЭкземплярыОтчетов.ФормаОбъекта",ПараметрыФормы);
	
КонецПроцедуры // СохранитьЭкземпляр()

&НаКлиенте
Процедура КомандаПанельСохраненныхНастроек(Команда)
	
	фСкрытьПанельСохраненныхНастроек = Не фСкрытьПанельСохраненныхНастроек;
	
	Элементы.КомандаПанельСохраненныхНастроек.Пометка   	 = Не фСкрытьПанельСохраненныхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохраненныхНастроек;
	
КонецПроцедуры // КомандаПанельСохраненныхНастроек()

&НаКлиенте
Процедура КомандаОбновитьПанельСохраненныхНастроек(Команда)
	
	ОбновитьПанельСохраненныхНастроек(Истина, Истина);
	
КонецПроцедуры // КомандаОбновитьПанельСохраненныхНастроек()

&НаКлиенте
Процедура КомандаРасшифроватьЯчейку(Команда)
	
	ОткрытьФормуРасшифровки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьВсе(Команда)
	
	ОткрытьФормуРасшифровки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРасшифроватьОтчетом(Команда)
	
	РасшифроватьОтчетом();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьРасшифровки(Команда)
	
	бит_мпд_Клиент.ЗакрытьРасшифровки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет активизацию области табличного документа.
// 
// Параметры:
//  ИмяОбласти - Строка.
// 
&НаКлиенте
Процедура АктивизироватьОбласть(ИмяОбласти)

	Обл = Результат.Области.Найти(ИмяОбласти);
	
	Если НЕ Обл = Неопределено Тогда
		
		Элементы.Результат.ТекущаяОбласть = Обл;
			
	КонецЕсли; 

КонецПроцедуры

// Процедура ограничивает описание типов в строке таблица параметров.
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда
			
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
		
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры // ОграничитьОписаниеТиповПараметра()

// Процедура открывает форму расшифровки.
// 
// Параметры:
//  ОткрытьВсе - Булево
// 
&НаКлиенте
Процедура ОткрытьФормуРасшифровки(ОткрытьВсе = Ложь)
	
	ТекОбл = Элементы.Результат.ТекущаяОбласть;
	Если ТекОбл <> Неопределено И ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		СтрПар = Новый Структура;
		СтрПар.Вставить("ИмяОбласти"        ,ТекОбл.Имя);
		СтрПар.Вставить("НастройкаОтчета"   ,Отчет.НастройкаОтчета);
		СтрПар.Вставить("ДатаНачала"        ,Отчет.ДатаНачала);
		СтрПар.Вставить("ДатаОкончания"     ,Отчет.ДатаОкончания);
		СтрПар.Вставить("ФорматЧисел"       ,Отчет.ФорматЧисел);
		СтрПар.Вставить("ОткрытьВсе"        ,ОткрытьВсе);
		СтрПар.Вставить("ВалютаДокумента"   ,Отчет.ВалютаДокумента);
		СтрПар.Вставить("КурсДокумента"     ,Отчет.КурсДокумента);
		СтрПар.Вставить("КратностьДокумента",Отчет.КратностьДокумента);
		СтрПар.Вставить("Организация"       ,Отчет.Организация);
		СтрПар.Вставить("ИмяФормыВладельца" ,ЭтаФорма.ИмяФормы);
		СтрПар.Вставить("НастройкаПулаПодключений", Отчет.НастройкаПулаПодключений);		
		
		УпаковатьТаблицы(СтрПар);
		
		СтрКлюч = ?(ОткрытьВсе, Строка(Отчет.НастройкаОтчета), ТекОбл.Имя);
		ОткрытьФорму("Обработка.бит_РасшифровкаПроизвольногоОтчета.Форма.ФормаУправляемая", СтрПар, ЭтаФорма, СтрКлюч);
		
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуРасшифровки()

// Процедура открывает отчет-расшифровку.
// 
&НаКлиенте
Процедура РасшифроватьОтчетом()

	ТекОбл = Элементы.Результат.ТекущаяОбласть;
	флЕстьРасшифровка = Ложь;
	
	Если ТекОбл <> Неопределено И ТипЗнч(ТекОбл) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяОбласти"     ,ТекОбл.Имя);
		СтруктураПараметров.Вставить("НастройкаОтчета",Отчет.НастройкаОтчета);
		СтруктураПараметров.Вставить("ДатаНачала"     ,Отчет.ДатаНачала);
		СтруктураПараметров.Вставить("ДатаОкончания"  ,Отчет.ДатаОкончания);
		СтруктураПараметров.Вставить("ФорматЧисел"    ,Отчет.ФорматЧисел);
		СтруктураПараметров.Вставить("ВалютаДокумента",Отчет.ВалютаДокумента);
		СтруктураПараметров.Вставить("КурсДокумента"  ,Отчет.КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента",Отчет.КратностьДокумента);
		СтруктураПараметров.Вставить("Организация"       ,Отчет.Организация);
		СтруктураПараметров.Вставить("Язык"              ,Отчет.Язык);
		СтруктураПараметров.Вставить("РежимРасшифровки"  ,Истина);
		
		УпаковатьТаблицы(СтруктураПараметров);		
		
		ОткрытьФорму("Отчет.бит_ПроизвольныйОтчет.Форма.ФормаОтчетаУправляемая", СтруктураПараметров, ЭтаФорма, Строка(ТекОбл.Имя));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не выбрана ячейка для которой следует вывести расшифровку.'");		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; // Область
	

КонецПроцедуры // РасшифроватьОтчетом()

// Процедура обработчик оповещения "ОбработкаОтветаЗПЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога
// ДопПараметры - Структура
// 
&НаКлиенте
Процедура ОбработкаОтветаЗПЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда    		
		ОбновитьТаблицуПараметров();   		
	КонецЕсли;  
	
КонецПроцедуры // ОбработкаОтветаЗПЗавершение()

// Процедура обработчик оповещения "КонструктовФорматаОткрытьЗавершение".
// 
// Параметры:
// НастройкиФормата - Произвольный.
// ДопПараметры - Структура.
// 
&НаКлиенте
Процедура КонструктовФорматаОткрытьЗавершение(НастройкиФормата, ДопПараметры) Экспорт
	
	Если НастройкиФормата <> Неопределено Тогда
		Отчет.ФорматЧисел = ДопПараметры.КонструктовФормата.Текст;
		бит_МеханизмПолученияДанных.УстановитьФорматВывода(Отчет.НастройкаОтчета, Результат, Отчет.ФорматЧисел, Отчет.Язык);		
	КонецЕсли;
	
КонецПроцедуры // КонструктовФорматаОткрытьЗавершение()

&НаСервере
Процедура ПриСозданииНаСервереВРежимеРасшифровки(Отказ)
	
	// Режим расшифровки.
	// Заполняем параметры из разсшифровываемого отчета и сразу формируем при открытии отчет.
	
	ПоказательОтчета = Справочники.бит_ПоказателиПроизвольныхОтчетов.НайтиПоКоду(Отчет.ИмяОбластиРасшифровки,,,Отчет.НастройкаОтчета);
	флЕстьРасшифровка = Ложь;
	
	Если НЕ ПоказательОтчета = Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПоказательОтчета.ЭлементДанных.ОтчетРасшифровка) Тогда
			
			Отчет.НастройкаОтчета = ПоказательОтчета.ЭлементДанных.ОтчетРасшифровка;
			ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
			
			// Восстановим отбор из элемента данных.
			ОтборСохраненный = ПоказательОтчета.ЭлементДанных.ХранилищеОтборВОтчете.Получить();
			Если ТипЗнч(ОтборСохраненный) = Тип("ТаблицаЗначений") Тогда
				ОтчетОбъект.ОтборВОтчете = ОтборСохраненный.Скопировать();
			Иначе
				бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(ПоказательОтчета.ЭлементДанных.ОтчетРасшифровка.СпособКомпоновки,ОтчетОбъект.ОтборВОтчете); 
			КонецЕсли; 
			
			Если Параметры.Свойство("ОтборВОтчете") Тогда
				// Копируем отбор из отчета
				ОтборВОтчете = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(Параметры.ОтборВОтчете);
				Если ТипЗнч(ОтборВОтчете) = Тип("ТаблицаЗначений") Тогда
					
					Для каждого СтрокаТаблицы Из ОтборВОтчете Цикл
						// Настройка расшифровки имеет более высокий приоритет, чем переданные параметры.
						СтрокаОтбора = ОтчетОбъект.ОтборВОтчете.Найти(СтрокаТаблицы.Имя,"Имя");
						Если СтрокаОтбора <> Неопределено Тогда
							Если НЕ СтрокаОтбора.Использование Тогда
								ЗаполнитьЗначенияСвойств(СтрокаОтбора,СтрокаТаблицы);
							КонецЕсли; 
						Иначе	
							НоваяСтрока = ОтчетОбъект.ОтборВОтчете.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли; 
			
			Если Параметры.Свойство("ТаблицаПараметры") Тогда
				// Копируем параметры из отчета
				ТаблицаПараметры = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(Параметры.ТаблицаПараметры);
				Если ТипЗнч(ТаблицаПараметры) = Тип("ТаблицаЗначений") Тогда
					
					Для каждого СтрокаТаблицы Из ТаблицаПараметры Цикл
						
						НоваяСтрока = ОтчетОбъект.ТаблицаПараметры.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
						
					КонецЦикла; 
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			ЗначениеВДанныеФормы(ОтчетОбъект, Отчет);
			
			ЗаполнитьДанные();
			флЕстьРасшифровка = Истина;
			ОтчетСформирован  = Истина;
			
		КонецЕсли; // В элементе данных заполнена настройка расшифровки отчетом.
		
	КонецЕсли; // Строка настроек найдена 
	
	Если НЕ флЕстьРасшифровка Тогда
		
		ТекстСообщения = НСтр("ru = 'Для ячейки %1% расшифровка отчетом не предусмотрена.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Отчет.ИмяОбластиРасшифровки);
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры // ПриСозданииНаСервере()

// Процедура упаковывает таблицы формы.
// 
// Возвращаемое значение:
//  СтрТаблиц - Структура
// 
&НаСервере
Процедура УпаковатьТаблицы(СтрПар)
	
	ТабВрем = ДанныеФормыВЗначение(Отчет.ТаблицаДанныеОтчета, Тип("ТаблицаЗначений"));
	СтрПар.Вставить("ТаблицаДанныеОтчета", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
	ТабВрем = ДанныеФормыВЗначение(Отчет.ОтборВОтчете, Тип("ТаблицаЗначений"));
	СтрПар.Вставить("ОтборВОтчете", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
	ТабВрем = ДанныеФормыВЗначение(Отчет.ТаблицаПараметры, Тип("ТаблицаЗначений"));
	СтрПар.Вставить("ТаблицаПараметры", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТабВрем));
	
КонецПроцедуры	

// Процедура заполняет кэш значений, используемый при работе с формой.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()
	
	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ТипНастройки"	   , Перечисления.бит_ТипыСохраненныхНастроек.Отчеты);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", фПолноеИмяОтчета + "_Скд");
	
	СписокТиповОрганизация = Новый СписокЗначений;
	СписокТиповОрганизация.Добавить(Тип("СправочникСсылка.Организации"));
	Если Метаданные.Справочники.Найти("бит_му_ПериметрыКонсолидации") <> Неопределено Тогда
		СписокТиповОрганизация.Добавить(Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации"), "Периметры консолидации");	
	КонецЕсли;	
	фКэшЗначений.Вставить("СписокТиповОрганизация", СписокТиповОрганизация);
	
	// ФКэшЗначений.Вставить("КодСтраны"		   ,Справочники.бит_Языки.ПолучитьКодЯзыкСтрана(Объект.Язык));
	// фКэшЗначений.Вставить("НастройкиАналитик"
	// 	,Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьНастройкуАналитик(Объект.НастройкаОтчета));
	фКэшЗначений.Вставить("ЗначенияПоУмолчанию" , Новый Структура);	
	фКэшЗначений.Вставить("МассивВидовСравнения", бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока"		 , ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	

	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса", ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью/доступностью элементов формы.
// 
&НаСервере
Процедура УстановитьВидимость()

	ЭтоОтчетМСФО = ?(Отчет.НастройкаОтчета.ТипОтчета = Перечисления.бит_ТипыПроизвольныхОтчетов.ОтчетностьМСФО,Истина,Ложь);
	
	Элементы.ГруппаОрганизацияПериметр.Видимость = ЭтоОтчетМСФО;
	Элементы.ГруппаПериодНаДату.Видимость 		 = ЭтоОтчетМСФО;
	Элементы.ГруппаПериод.Видимость         	 = НЕ ЭтоОтчетМСФО;
	
	УстановитьЗаголовокОрганизации();

КонецПроцедуры // УстановитьВидимость()

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура устанавливает заголовок надписи организация в зависимости от того, 
// какое значение выбрано.
// 
&НаСервере
Процедура УстановитьЗаголовокОрганизации()

	Элементы.Организация.Заголовок = ?(Отчет.Организация = Неопределено Или ТипЗнч(Отчет.Организация) = Тип("СправочникСсылка.Организации")
										, "Организация:"
										, "Периметр:");
	
КонецПроцедуры // УстановитьЗаголовокОрганизации()

// Процедура формирует отчет при открытии.
// 
&НаСервере
Процедура СформироватьОтчетПриОткрытии()
	
	ИзменениеНастройки();
	ЗаполнитьДанные();
		
КонецПроцедуры // СформироватьОтчетПриОткрытии()

// Процедура обрабатывает изменение валюты. Выполняется получение курса/кратности.
// 
&НаСервере
Процедура ИзменениеВалютыСервер()

	СтрКурса = бит_КурсыВалют.ПолучитьКурсВалюты(Отчет.ВалютаДокумента,Отчет.ДатаОкончания);
	
	Отчет.КурсДокумента      = СтрКурса.Курс;
	Отчет.КратностьДокумента = СтрКурса.Кратность;

КонецПроцедуры // ИзменениеВалютыСервер()

&НаСервере
Процедура ИзменениеНастройки()
	
	тзОтборВОтчете = ДанныеФормыВЗначение(Отчет.ОтборВОтчете, Тип("ТаблицаЗначений"));
	
	Отчет.ТаблицаДанныеОтчета.Очистить();
	
	Отчет.ФорматЧисел = Отчет.НастройкаОтчета.ФорматЧисел;
	Отчет.Язык        = Отчет.НастройкаОтчета.Язык;
	
	бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Отчет.НастройкаОтчета.СпособКомпоновки,тзОтборВОтчете);
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Отчет.НастройкаОтчета.СпособКомпоновки,Отчет.ТаблицаПараметры,Истина);
	
	УстановитьВидимость();
	
	ВывестиМакетОтчета();
	
	ЗначениеВДанныеФормы(тзОтборВОтчете, Отчет.ОтборВОтчете);
	
КонецПроцедуры // ИзменениеНастройки()

// Процедура заполняет документ-результат макетом из настройки,
// что бы пользователь не смотрел на пустой лист и не вызывал ошибок, например, групповым форматированием.
// 
&НаСервере
Процедура ВывестиМакетОтчета()

	Результат.Очистить();
	
	Если ЗначениеЗаполнено(Отчет.НастройкаОтчета) Тогда
		
		МакетОтчета = Отчет.НастройкаОтчета.ХранилищеМакета.Получить();
		
		Если ТипЗнч(МакетОтчета) <> Тип("ТабличныйДокумент") Тогда
			ТекстПредупредения = НСтр("ru='Настройка отчета не содержит макет.'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстПредупредения);
			Отчет.НастройкаОтчета = Справочники.бит_НастройкиПроизвольныхОтчетов.ПустаяСсылка();
			Возврат;
		КонецЕсли;
		
		Результат.ФиксацияСверху = МакетОтчета.ФиксацияСверху;
		Результат.ФиксацияСлева  = МакетОтчета.ФиксацияСлева;
		Результат.Вывести(МакетОтчета);
		
		// Заполним значения ячеек макета, по уже полученным данным.
		Если Отчет.ТаблицаДанныеОтчета.Количество() > 0  Тогда
		
			ТабВрем = Отчет.ТаблицаДанныеОтчета.Выгрузить(,"ИмяОбласти,ЗначениеПоказателя");
			ТабВрем.Свернуть("ИмяОбласти","ЗначениеПоказателя");
			
			Для каждого СтрокаТаблицы Из ТабВрем Цикл
				
				бит_МеханизмПолученияДанных.УстановитьЗначениеВТабличныйДокумент(Результат,СтрокаТаблицы.ИмяОбласти,СтрокаТаблицы.ЗначениеПоказателя);
				
			КонецЦикла; 
		
		КонецЕсли; 
		
		бит_МеханизмПолученияДанных.УстановитьПараметрыВДокРезультат(Отчет, Результат, Отчет.ОтборВОтчете, Отчет.ТаблицаПараметры);
		// +СБ. Кузнецова С. 2015-01-28 
		НазватьПериоды();
		// -СБ. Кузнецова С.
		ВыполнитьУдалениеПримечаний(Результат);
	    бит_МеханизмПолученияДанных.УстановитьФорматВывода(Отчет.НастройкаОтчета, Результат, Отчет.ФорматЧисел, Отчет.Язык);
		
		
	КонецЕсли;

КонецПроцедуры // ВывестиМакетОтчета()

// Процедура выполняет удаление примечаний табличного документа.
// 
&НаСервере
Процедура ВыполнитьУдалениеПримечаний(ТабличныйДокумент) Экспорт
	
	// Удалим примечания, если необходимо
	Если Отчет.УдалитьПримечания Тогда
		Для каждого Область Из ТабличныйДокумент.Области Цикл
			Область.Примечание.Текст = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьУдалениеПримечаний()

&НаСервере
Процедура ОпределитьДатуНачалаДляМСФО()
	
	Отчет.СтандартныйПериод.ДатаНачала = бит_МеханизмПолученияДанных.ОпределитьДатуНачалаДляМСФО(Отчет.НастройкаОтчета.ТипОтчета
	                                                                              , Отчет.СтандартныйПериод.ДатаНачала
																				  , Отчет.СтандартныйПериод.ДатаОкончания);
	
КонецПроцедуры // ОпределитьДатуНачалаДляМСФО()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
		
	ТекущиеДанные = Отчет.ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = Отчет.ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура выполняет действия, неоходимые при изменении вида параметра.
// 
// Параметры:
//  ИД  				 - Число.
//  мТекущийВидПараметра - ПеречислениеСсылка.бит_ВидыПараметровЗапроса.
// 
&НаСервере
Процедура ИзменитьВидПараметра(ИД, мТекущийВидПараметра)

	ТекущиеДанные = Отчет.ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, мТекущийВидПараметра);

КонецПроцедуры // ИзменитьВидПараметра()

// Процедура обрабатывает изменение содержимого области табличного документа.
// 
// Параметры:
//  ИмяОбласти  - Строка
//  ТекЗначение - Число
// 
&НаСервере
Процедура ИзменениеСодержимогоОбласти(ИмяОбласти,ТекЗначение)
	
	СтрОтбор = Новый Структура("ИмяОбласти",ИмяОбласти); 
	
	МассивСтрок = Отчет.ТаблицаДанныеОтчета.НайтиСтроки(СтрОтбор);
	
	НовоеЗначение = ТекЗначение;
	
	// Есть строки данных, соответствующие на данной области.
	Если МассивСтрок.Количество()>0 Тогда
		
		Если ТекЗначение = 0 Тогда
			
			// Удаляем данные
			Для каждого Элемент Из МассивСтрок Цикл
				
				Отчет.ТаблицаДанныеОтчета.Удалить(Элемент);
				
			КонецЦикла; 
			
		Иначе	
			
			// Пропорционально изменяем данные
			ИтСумма = 0;
			
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				
				ИтСумма = ИтСумма+СтрокаТаблицы.ЗначениеПоказателя;
				
			КонецЦикла; 
			
			ИтСуммаНов = 0;
			
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				
				Коэфф = ?(ИтСумма<>0,СтрокаТаблицы.ЗначениеПоказателя/ИтСумма,0);
				
				СтрокаТаблицы.ЗначениеПоказателя = НовоеЗначение*Коэфф;
				СтрокаТаблицы.РучнаяКорректировка = Истина;				
				
				ИтСуммаНов = ИтСуммаНов+СтрокаТаблицы.ЗначениеПоказателя;
				
			КонецЦикла; 
			
			Дельта = НовоеЗначение-ИтСуммаНов;
			
			Если Дельта <> 0 Тогда
				
				СтрокаТаблицы.ЗначениеПоказателя  = СтрокаТаблицы.ЗначениеПоказателя+Дельта;
				СтрокаТаблицы.РучнаяКорректировка = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		
		// В таблице данных нет строк данных, соответствующих данной области.
		НоваяСтрока = Отчет.ТаблицаДанныеОтчета.Добавить();
		НоваяСтрока.ЗначениеПоказателя  = ТекЗначение;
		НоваяСтрока.РучнаяКорректировка = Истина;
		
		ЗаполнитьНовуюСтроку(НоваяСтрока.ПолучитьИдентификатор(),ИмяОбласти);
		
	КонецЕсли; 
	
	бит_МеханизмПолученияДанных.ВыполнитьРасчет(Отчет.НастройкаОтчета,Результат,Отчет.ТаблицаДанныеОтчета);
	
	
КонецПроцедуры // ИзменениеСодержимогоОбласти()

// Процедура заполняет реквизиты новой строки таблицы ТаблицаДанныеОтчета по-умолчанию.
// 
// Параметры:
//  ИдСтроки    - Число
//  ИмяОбласти  - Строка
// 
&НаСервере
Процедура ЗаполнитьНовуюСтроку(ИдСтроки,ИмяОбласти)
	
	ТекущаяСтрока = Отчет.ТаблицаДанныеОтчета.НайтиПоИдентификатору(ИдСтроки);
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		
		бит_МеханизмПолученияДанных.ЗаполнитьНовуюСтрокуТаблицыДанных(ТекущаяСтрока
		                                                                , ИмяОбласти
																		, Отчет.ТаблицаДанныеОтчета
																		, Отчет.НастройкаОтчета
																		, Отчет.ФорматЧисел
																		, Отчет.Язык);
		
		// Заполнение значений по-умолчанию
		Для каждого КиЗ Из фКэшЗначений.ЗначенияПоУмолчанию Цикл
			
			ИмяАналитики = КиЗ.Ключ;
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока[ИмяАналитики]) Тогда
			
				ТекущаяСтрока[ИмяАналитики] = КиЗ.Значение;
			
			КонецЕсли; 
		
		КонецЦикла; // Заполнение значений по-умолчанию
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьНовуюСтроку()

// Процедура обеспечивает получение данных по настройке произвольного отчета.
// 
&НаСервере
Процедура ЗаполнитьДанные()
	
	СтрРегистрация = Новый Структура;
	бит_ук_СлужебныйСервер.РегистрацияНачалоСобытияВФорме(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);
	
	ТаблицаДанныеОтчета = ДанныеФормыВЗначение(Отчет.ТаблицаДанныеОтчета, Тип("ТаблицаЗначений"));
	
	Отчет.ДатаНачала	= Отчет.СтандартныйПериод.ДатаНачала;
	Отчет.ДатаОкончания = Отчет.СтандартныйПериод.ДатаОкончания;
	
	бит_МеханизмПолученияДанных.СформироватьПроизвольныйОтчет(Отчет
															,Результат
															,Отчет.ОтборВОтчете
															,Отчет.ТаблицаПараметры
															,ТаблицаДанныеОтчета
															,Отчет.НастройкаПулаПодключений);
	
	ЗначениеВДанныеФормы(ТаблицаДанныеОтчета, Отчет.ТаблицаДанныеОтчета);
	
	УстановитьВидимость();
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);
	
КонецПроцедуры // ЗаполнитьДанные()

// Процедура выполняет обновление таблицы параметров.
// 
&НаСервере
Процедура ОбновитьТаблицуПараметров()
	
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Отчет.НастройкаОтчета.СпособКомпоновки, Отчет.ТаблицаПараметры, Ложь);
	
КонецПроцедуры // ОбновитьТаблицуПараметров()

&НаСервере
Функция ПолучитьСтруктуруПараметровОтчета()
	
	ПараметрыОтчета = Новый Структура;
	
	Для Каждого МетаРеквизит Из Метаданные.Отчеты.бит_ПроизвольныйОтчет.Реквизиты Цикл
	
		 ПараметрыОтчета.Вставить(МетаРеквизит.Имя,Отчет[МетаРеквизит.Имя]);
	
	КонецЦикла;
	
	// Для СтандартногоПериода необходимо передавать представление.
	ПараметрыОтчета.СтандартныйПериод = бит_ОбщегоНазначенияКлиентСервер.ИмяВариантаСтандартногоПериода(Отчет.СтандартныйПериод.Вариант);
	
	// Упакуем ТабличныйДокумент Результат
	ТД = Новый ТабличныйДокумент;
	ТД.ФиксацияСверху = Результат.ФиксацияСверху;
	ТД.ФиксацияСлева  = Результат.ФиксацияСлева;
	ТД.Вывести(Результат);
	
	ПараметрыОтчета.Вставить("ТабДокРезультат", ТД);
	
	Возврат ПараметрыОтчета;
	
КонецФункции // ПолучитьСтруктуруПараметровОтчета()

// Процедура обновляет панель сохраненных настроек.
// 
// Параметры:
//  Очищать  - Булево (Необязательный, по умолчанию = Ложь).
//  ТекКлючНастройки  (Необязательный).
// 
&НаСервере
Процедура ОбновитьПанельСохраненныхНастроек(Очищать = Ложь, ИскатьНастройкуПоУмолчанию = Ложь, ТекКлючНастройки = Неопределено)

	ГруппаПанели = Элементы.ГруппаПанельВыбораСохраненныхНастроек;
	
	КлючОбъекта = фПолноеИмяОтчета + "_СКД";
	
	СтруктураДоступности = бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(КлючОбъекта, Ложь);
		
	Если Очищать Тогда		
		бит_РаботаСДиалогамиСервер.УдалитьЭлементыГруппыФормы(Элементы, ГруппаПанели);		
	КонецЕсли; 	
			
	бит_ОтчетыСервер.ОбновитьПанельСохраненныхНастроек(Элементы, 
													ГруппаПанели, 
													КлючОбъекта, 
													фСтруктураСохраненныхНастроек,
													СтруктураДоступности,
													фФильтроватьНастройкиПоВарианту,
													фИмяЭлемента_ВыбраннаяНастройка);
													
	// Изменение кода. Начало. 16.05.2013{{
	Если ТекКлючНастройки <> Неопределено Тогда
		
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);		
	
	ИначеЕсли ИскатьНастройкуПоУмолчанию Тогда 
		
		// Установка настройки, используемой при открытии, если такая указана в справочнике.
		ТекКлючНастройки = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(КлючОбъекта, Истина);
		
		Если ТекКлючНастройки <> Неопределено Тогда
			Результат.Очистить();
			УстановитьТекущиеПользовательскиеНастройки(ТекКлючНастройки);
			бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);
			ТекНастройки = бит_ОтчетыСервер.ПолучитьНастройкиОтчета(фСтруктураСохраненныхНастроек[фИмяЭлемента_ВыбраннаяНастройка]);
			ПрименитьНастройки(ТекНастройки);
		КонецЕсли;
		
	Иначе
		
		фИмяЭлемента_ВыбраннаяНастройка = "";
		
	КонецЕсли;
	// Изменение кода. Конец. 16.05.2013}}
	
КонецПроцедуры // ОбновитьПанельСохраненныхНастроек()

// Функция обновляет настройки отчета.
// 
// Параметры:
//  ИмяЭлемента  		 	- Строка.
//  СоответствиеРезультатов - Соответствие.
// 
// ВозращаемоеЗначение:
//  Булево - настройки обновлены.
// 
&НаСервере
Функция ОбновитьНастройки(ИмяЭлемента, СоответствиеРезультатов)

	НастройкиОбновлены = Ложь;
	
	Результат.Очистить();
	
	СтруктураНастроек = фСтруктураСохраненныхНастроек[ИмяЭлемента];
	
	Настройки = бит_ОтчетыСервер.ПолучитьНастройкиОтчета(СтруктураНастроек);
	
	Если Настройки <> Неопределено Тогда
			
		КлючНастройки = СтруктураНастроек.КлючНастройки;    	
		
		ПрименитьНастройки(Настройки);
		
		НастройкиОбновлены = Истина;
		
	КонецЕсли;
	
	// Выведем результат, если он уже формировался для текущей настройки.
	Если НастройкиОбновлены Тогда		
		СтруктураРез = СоответствиеРезультатов.Получить(КлючНастройки);
		Если СтруктураРез <> Неопределено Тогда
			Результат.Вывести(СтруктураРез.Результат);
			ДанныеРасшифровки = СтруктураРез.ДанныеРасшифровки;
		Иначе
			ВывестиМакетОтчета();
		КонецЕсли; 		
	КонецЕсли;
	       	
	Возврат НастройкиОбновлены;

КонецФункции // ОбновитьНастройки()

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	
	ИсключаемыеРеквизиты = Новый Структура;
	ИсключаемыеРеквизиты.Вставить("ТаблицаДанныеОтчета");
	
	МетаОтчет = Метаданные.Отчеты.бит_ПроизвольныйОтчет;
	РеквизитыОбъекта = МетаОтчет.Реквизиты;
	
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		Если ИсключаемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураНастроек.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя])
	КонецЦикла;
	
	ТаблицаЗн = ДанныеФормыВЗначение(Отчет.ОтборВОтчете, Тип("ТаблицаЗначений"));
	СтруктураНастроек.Вставить("ОтборВОтчете", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаЗн));
	ТаблицаЗн = ДанныеФормыВЗначение(Отчет.ТаблицаПараметры, Тип("ТаблицаЗначений"));
	СтруктураНастроек.Вставить("ТаблицаПараметры", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаЗн));
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()
													
// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)

	Если Не ЗначениеЗаполнено(ВыбНастройка) Тогда	
		Возврат;     		
	КонецЕсли;
	
	Если ТипЗнч(ВыбНастройка) = Тип("Структура") Тогда
		СтруктураНастроек = ВыбНастройка;
	Иначе
		СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Для Каждого КлючЗначение Из СтруктураНастроек Цикл
			Если НЕ Отчет.Свойство(КлючЗначение.Ключ)
				ИЛИ ТипЗнч(КлючЗначение.Значение) = Тип("ТаблицаЗначений")
				ИЛИ ТипЗнч(КлючЗначение.Значение) = Тип("ХранилищеЗначения") Тогда
				Продолжить;
			КонецЕсли;
			
			Отчет[КлючЗначение.Ключ] = КлючЗначение.Значение;
		КонецЦикла;
		
		Отчет.Язык = ?(СтруктураНастроек.Свойство("Язык"), СтруктураНастроек.Язык, СтруктураНастроек.НастройкаОтчета.Язык);
		
		Если НЕ ЗначениеЗаполнено(СтруктураНастроек.СтандартныйПериод) Тогда
			Отчет.СтандартныйПериод = Новый СтандартныйПериод(СтруктураНастроек.ДатаНачала, СтруктураНастроек.ДатаОкончания);
		КонецЕсли;
		
		// Таблицы значений
		
		Если СтруктураНастроек.Свойство("ОтборВОтчете") Тогда
			Если ТипЗнч(СтруктураНастроек.ОтборВОтчете) = Тип("ТаблицаЗначений") Тогда
				ЗначениеВДанныеФормы(СтруктураНастроек.ОтборВОтчете, Отчет.ОтборВОтчете);
			Иначе
				ЗначениеВДанныеФормы(бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ОтборВОтчете), Отчет.ОтборВОтчете);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТаблицаПараметры") Тогда
			Если ТипЗнч(СтруктураНастроек.ОтборВОтчете) = Тип("ТаблицаЗначений") Тогда
				ЗначениеВДанныеФормы(СтруктураНастроек.ТаблицаПараметры, Отчет.ТаблицаПараметры);
			Иначе
				ЗначениеВДанныеФормы(бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ТаблицаПараметры), Отчет.ТаблицаПараметры);
			КонецЕсли;
		КонецЕсли;
		
		Отчет.ТаблицаДанныеОтчета.Очистить();
		
	Иначе
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение("Настройки не восстановлены.");
	КонецЕсли;  		
	
КонецПроцедуры // ПрименитьНастройки()

&НаСервере
Процедура НастройкиВосстановитьСервер(ВыбНастройка)
	
	Если ВыбНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрименитьНастройки(ВыбНастройка);
	
	бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ВыбНастройка.КлючНастройки);
															
	УстановитьВидимость();
	
	ВывестиМакетОтчета();
	
КонецПроцедуры // НастройкиВосстановитьСервер()

// Процедура обрабатывает сохранение настройки.
// 
// Параметры:
//  РезНастройка - Структура.
// 
&НаСервере
Процедура ОбработкаСохраненияНастройки(РезНастройка)

	// Добавление кода. Начало. 16.05.2013{{
	Если РезНастройка <> Неопределено Тогда
		УстановитьТекущиеПользовательскиеНастройки(РезНастройка.КлючНастройки);
		ОбновитьПанельСохраненныхНастроек(Истина, Ложь, РезНастройка.КлючНастройки);
	КонецЕсли;
	// Добавление кода. Конец. 16.05.2013}}	

КонецПроцедуры // ОбработкаСохраненияНастройки()

&НаКлиенте
Процедура НастройкиСохранить(Команда)
	
	ПараметрыФормы = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиСохранитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // НастройкиСохранить()

// Процедура обработчик оповещения "НастройкиСохранитьЗавершение".
// 
// Параметры:
// Ответ                - КодВозвратаДиалога.
// ДополнительныеДанные - Структура.
// 
&НаКлиенте
Процедура НастройкиСохранитьЗавершение(РезНастройка, ДопПараметры) Экспорт
	
	ОбработкаСохраненияНастройки(РезНастройка);
	
КонецПроцедуры // НастройкиСохранитьЗавершение()

&НаКлиенте
Процедура НастройкиВосстановить(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	 	
КонецПроцедуры // НастройкиВосстановить()

// Процедура обработчик оповещения "НастройкиВосстановитьЗавершение".
// 
// Параметры:
// РезНастройка - Произвольный
// ДопПараметры - Структура
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(РезНастройка, ДопПараметры) Экспорт
	
	НастройкиВосстановитьСервер(РезНастройка);
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()

#КонецОбласти

// +СБ. Кузнецова С. 2015-01-28 
Процедура НазватьПериоды() Экспорт
	//Тут надо иметь ввиду, что важен регистр в написании переменных ОписаниеПредыдущегоПериода и ОписаниеТекущегоПериода
	КодЯзыка = Справочники.бит_Языки.ПолучитьКодЯзыка(Отчет.Язык);	
	
	// подготовим структуру дополнительных параметров отчета
	СтрПараметры = Новый Структура;
	// рус. квартал
	Если Отчет.ДатаНачала = НачалоКвартала(Отчет.ДатаНачала) И КонецДня(Отчет.ДатаОкончания) = КонецКвартала(Отчет.ДатаНачала) И КодЯзыка = "ru" Тогда
		Если Месяц(Отчет.ДатаНачала) = 1 Тогда
			НомерКвартала = "1";
		ИначеЕсли Месяц(Отчет.ДатаНачала) = 4 Тогда
			НомерКвартала = "2";
		ИначеЕсли Месяц(Отчет.ДатаНачала) = 7 Тогда
			НомерКвартала = "3";
		Иначе                                                       
			НомерКвартала = "4";
		КонецЕсли;
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", НомерКвартала + " квартал " + СтрЗаменить(Строка(Год(Отчет.ДатаНачала)), Символы.НПП, "") + " г.");
	// рус. полугодие
	ИначеЕсли (День(Отчет.ДатаНачала) = 1 И Месяц(Отчет.ДатаНачала) = 1 И День(Отчет.ДатаОкончания) = 30 И Месяц(Отчет.ДатаОкончания) = 6 И Год(Отчет.ДатаНачала) = Год(Отчет.ДатаОкончания) Или
		День(Отчет.ДатаНачала) = 1 И Месяц(Отчет.ДатаНачала) = 7 И День(Отчет.ДатаОкончания) = 31 И Месяц(Отчет.ДатаОкончания) = 12 И Год(Отчет.ДатаНачала) = Год(Отчет.ДатаОкончания)) И КодЯзыка = "ru" Тогда
		Если Месяц(Отчет.ДатаНачала) = 1 Тогда
			НомерПолугодия = "1";
		Иначе
			НомерПолугодия = "2";
		КонецЕсли;
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", НомерПолугодия + " полугодие " + СтрЗаменить(Строка(Год(Отчет.ДатаНачала)), Символы.НПП, "") + " г.");
	// рус. 9 месяцев
	ИначеЕсли Отчет.ДатаНачала = НачалоГода(Отчет.ДатаНачала) И День(Отчет.ДатаОкончания) = 30 И Месяц(Отчет.ДатаОкончания) = 9 И Год(Отчет.ДатаОкончания) = Год(Отчет.ДатаНачала) И КодЯзыка = "ru" Тогда
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", "9 месяцев " + СтрЗаменить(Строка(Год(Отчет.ДатаНачала)), Символы.НПП, "") + " г.");
	// рус. год
	ИначеЕсли Отчет.ДатаНачала = НачалоГода(Отчет.ДатаНачала) И КонецДня(Отчет.ДатаОкончания) = КонецГода(Отчет.ДатаНачала) И КодЯзыка = "ru" Тогда
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", СтрЗаменить(Строка(Год(Отчет.ДатаНачала)), Символы.НПП, "") + " г.");
	// англ. квартал
	ИначеЕсли Отчет.ДатаНачала = НачалоКвартала(Отчет.ДатаНачала) И КонецДня(Отчет.ДатаОкончания) = КонецКвартала(Отчет.ДатаНачала) И КодЯзыка = "en" Тогда
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", "3 months ended " + Формат(Отчет.ДатаОкончания, "Л=en_GB; ДФ=dd.MM.yy"));
	// англ. полугодие
	ИначеЕсли (День(Отчет.ДатаНачала) = 1 И Месяц(Отчет.ДатаНачала) = 1 И День(Отчет.ДатаОкончания) = 30 И Месяц(Отчет.ДатаОкончания) = 6 И Год(Отчет.ДатаНачала) = Год(Отчет.ДатаОкончания) Или
		День(Отчет.ДатаНачала) = 1 И Месяц(Отчет.ДатаНачала) = 7 И День(Отчет.ДатаОкончания) = 31 И Месяц(Отчет.ДатаОкончания) = 12 И Год(Отчет.ДатаНачала) = Год(Отчет.ДатаОкончания)) И КодЯзыка = "en" Тогда
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", "6 months ended " + Формат(Отчет.ДатаОкончания, "Л=en_GB; ДФ=dd.MM.yy"));
	// англ. 9 месяцев
	ИначеЕсли Отчет.ДатаНачала = НачалоГода(Отчет.ДатаНачала) И День(Отчет.ДатаОкончания) = 30 И Месяц(Отчет.ДатаОкончания) = 9 И Год(Отчет.ДатаОкончания) = Год(Отчет.ДатаНачала) И КодЯзыка = "en" Тогда
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", "9 months ended " + Формат(Отчет.ДатаОкончания, "Л=en_GB; ДФ=dd.MM.yy"));
	// англ. год
	ИначеЕсли Отчет.ДатаНачала = НачалоГода(Отчет.ДатаНачала) И КонецДня(Отчет.ДатаОкончания) = КонецГода(Отчет.ДатаНачала) И КодЯзыка = "en" Тогда
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", "Year " + СтрЗаменить(Строка(Год(Отчет.ДатаНачала)), Символы.НПП, ""));
	// СофтБаланс Начало Кузнецова С. [02.06.2014] 
	// англ. месяц
	ИначеЕсли Отчет.ДатаНачала = НачалоМесяца(Отчет.ДатаНачала) И КонецДня(Отчет.ДатаОкончания) = КонецМесяца(Отчет.ДатаНачала) И КодЯзыка = "en" Тогда
		СтрПараметры.Вставить("ОписаниеТекущегоПериода", ПредставлениеПериода(НачалоДня(Отчет.ДатаНачала), КонецДня(Отчет.ДатаОкончания), "Л=en"));
	// СофтБаланс Окончание Кузнецова С. [02.06.2014]
	Иначе
		СтрПараметры.Вставить("ОписаниеТекущегоПериода",ПредставлениеПериода(НачалоДня(Отчет.ДатаНачала), КонецДня(Отчет.ДатаОкончания)));
	КонецЕсли;
	ПараметрНачало1 = Отчет.ТаблицаПараметры.Выгрузить().Найти("НачалоПериода1");
	ПараметрКонец1 = Отчет.ТаблицаПараметры.Выгрузить().Найти("КонецПериода1");
	Если ПараметрНачало1<>Неопределено и ПараметрКонец1<>Неопределено Тогда
		Если ПараметрКонец1.ЗначениеПараметра < ПараметрНачало1.ЗначениеПараметра Тогда
			СтрПараметры.Вставить("ОписаниеПредыдущегоПериода","");
		Иначе
			// рус. квартал
			Если Отчет.ДатаНачала = НачалоКвартала(ПараметрНачало1.ЗначениеПараметра) И КонецДня(ПараметрКонец1.ЗначениеПараметра) = КонецКвартала(ПараметрНачало1.ЗначениеПараметра) И КодЯзыка = "ru" Тогда
				Если Месяц(ПараметрНачало1.ЗначениеПараметра) = 1 Тогда
					НомерКвартала = "1";
				ИначеЕсли Месяц(ПараметрНачало1.ЗначениеПараметра) = 4 Тогда
					НомерКвартала = "2";
				ИначеЕсли Месяц(ПараметрНачало1.ЗначениеПараметра) = 7 Тогда
					НомерКвартала = "3";
				Иначе
					НомерКвартала = "4";
				КонецЕсли;
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", НомерКвартала + " квартал " + СтрЗаменить(Строка(Год(ПараметрНачало1.ЗначениеПараметра)), Символы.НПП, "") + " г.");
			// рус. полугодие
			ИначеЕсли (День(ПараметрНачало1.ЗначениеПараметра) = 1 И Месяц(ПараметрНачало1.ЗначениеПараметра) = 1 И День(ПараметрКонец1.ЗначениеПараметра) = 30 И Месяц(ПараметрКонец1.ЗначениеПараметра) = 6 И Год(ПараметрНачало1.ЗначениеПараметра) = Год(ПараметрКонец1.ЗначениеПараметра) Или
				День(ПараметрНачало1.ЗначениеПараметра) = 1 И Месяц(ПараметрНачало1.ЗначениеПараметра) = 7 И День(ПараметрКонец1.ЗначениеПараметра) = 31 И Месяц(ПараметрКонец1.ЗначениеПараметра) = 12 И Год(ПараметрНачало1.ЗначениеПараметра) = Год(ПараметрКонец1.ЗначениеПараметра)) И КодЯзыка = "ru" Тогда
				Если Месяц(ПараметрНачало1.ЗначениеПараметра) = 1 Тогда
					НомерПолугодия = "1";
				Иначе
					НомерПолугодия = "2";
				КонецЕсли;
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", НомерПолугодия + " полугодие " + СтрЗаменить(Строка(Год(ПараметрНачало1.ЗначениеПараметра)), Символы.НПП, "") + " г.");
			// рус. 9 месяцев
			ИначеЕсли ПараметрНачало1.ЗначениеПараметра = НачалоГода(ПараметрНачало1.ЗначениеПараметра) И День(ПараметрКонец1.ЗначениеПараметра) = 30 И Месяц(ПараметрКонец1.ЗначениеПараметра) = 9 И Год(ПараметрКонец1.ЗначениеПараметра) = Год(ПараметрНачало1.ЗначениеПараметра) И КодЯзыка = "ru" Тогда
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", "9 месяцев " + СтрЗаменить(Строка(Год(ПараметрНачало1.ЗначениеПараметра)), Символы.НПП, "") + " г.");
			// рус. год
			ИначеЕсли ПараметрНачало1.ЗначениеПараметра = НачалоГода(ПараметрНачало1.ЗначениеПараметра) И КонецДня(ПараметрКонец1.ЗначениеПараметра) = КонецГода(ПараметрНачало1.ЗначениеПараметра) И КодЯзыка = "ru" Тогда
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", СтрЗаменить(Строка(Год(ПараметрНачало1.ЗначениеПараметра)), Символы.НПП, "") + " г.");
			// англ. квартал
			ИначеЕсли ПараметрНачало1.ЗначениеПараметра = НачалоКвартала(ПараметрНачало1.ЗначениеПараметра) И КонецДня(ПараметрКонец1.ЗначениеПараметра) = КонецКвартала(ПараметрНачало1.ЗначениеПараметра) И КодЯзыка = "en" Тогда
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", "3 months ended " + Формат(ПараметрКонец1.ЗначениеПараметра, "Л=en_GB; ДФ=dd.MM.yy"));
			// англ. полугодие
			ИначеЕсли (День(ПараметрНачало1.ЗначениеПараметра) = 1 И Месяц(ПараметрНачало1.ЗначениеПараметра) = 1 И День(ПараметрКонец1.ЗначениеПараметра) = 30 И Месяц(ПараметрКонец1.ЗначениеПараметра) = 6 И Год(ПараметрНачало1.ЗначениеПараметра) = Год(ПараметрКонец1.ЗначениеПараметра) Или
				День(ПараметрНачало1.ЗначениеПараметра) = 1 И Месяц(ПараметрНачало1.ЗначениеПараметра) = 7 И День(ПараметрКонец1.ЗначениеПараметра) = 31 И Месяц(ПараметрКонец1.ЗначениеПараметра) = 12 И Год(ПараметрНачало1.ЗначениеПараметра) = Год(ПараметрКонец1.ЗначениеПараметра)) И КодЯзыка = "en" Тогда
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", "6 months ended " + Формат(ПараметрКонец1.ЗначениеПараметра, "Л=en_GB; ДФ=dd.MM.yy"));
			// англ. 9 месяцев
			ИначеЕсли ПараметрНачало1.ЗначениеПараметра = НачалоГода(ПараметрНачало1.ЗначениеПараметра) И День(ПараметрКонец1.ЗначениеПараметра) = 30 И Месяц(ПараметрКонец1.ЗначениеПараметра) = 9 И Год(ПараметрКонец1.ЗначениеПараметра) = Год(ПараметрНачало1.ЗначениеПараметра) И КодЯзыка = "en" Тогда
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", "9 months ended " + Формат(ПараметрКонец1.ЗначениеПараметра, "Л=en_GB; ДФ=dd.MM.yy"));
			// англ. год
			ИначеЕсли ПараметрНачало1.ЗначениеПараметра = НачалоГода(ПараметрНачало1.ЗначениеПараметра) И КонецДня(ПараметрКонец1.ЗначениеПараметра) = КонецГода(ПараметрНачало1.ЗначениеПараметра) И КодЯзыка = "en" Тогда
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", "Year " + СтрЗаменить(Строка(Год(ПараметрНачало1.ЗначениеПараметра)), Символы.НПП, ""));
			// СофтБаланс Начало Кузнецова С. [02.06.2014] 
			// англ. месяц
			ИначеЕсли ПараметрНачало1.ЗначениеПараметра = НачалоМесяца(ПараметрНачало1.ЗначениеПараметра) И КонецДня(ПараметрКонец1.ЗначениеПараметра) = КонецМесяца(ПараметрНачало1.ЗначениеПараметра) И КодЯзыка = "en" Тогда
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода", ПредставлениеПериода(НачалоДня(ПараметрНачало1.ЗначениеПараметра), КонецДня(ПараметрКонец1.ЗначениеПараметра), "Л=en"));
			// СофтБаланс Окончание Кузнецова С. [02.06.2014]
			Иначе
				СтрПараметры.Вставить("ОписаниеПредыдущегоПериода",ПредставлениеПериода(ПараметрНачало1.ЗначениеПараметра, ПараметрКонец1.ЗначениеПараметра));
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрПараметры.Вставить("ОписаниеПредыдущегоПериода","");
	КонецЕсли;
	
	// СофтБаланс Начало Кузнецова С. [14.04.2014] 
	// СофтБаланс Начало Кузнецова С. [13.05.2014] 
	//СтрПараметры.Вставить("ДатаНачалаПредФормат"      , Формат(ДатаОкончанияПред, 		"Л=" + КодЯзыка + "; ДФ='dd MMMM yyyy'"));
	СтрПараметры.Вставить("ДатаНачалаПредФормат"      , Формат(Отчет.ДатаНачала, 		"Л=" + КодЯзыка + "; ДФ='dd MMMM yyyy'"));
	// СофтБаланс Окончание Кузнецова С. [13.05.2014]
	СтрПараметры.Вставить("ДатаОкончанияПредФормат"   , Формат(Отчет.ДатаОкончания, 	"Л=" + КодЯзыка + "; ДФ='dd MMMM yyyy'"));
	// СофтБаланс Окончание Кузнецова С. [14.04.2014]
	
	Шаблоны = Справочники.бит_НастройкиПроизвольныхОтчетов.ПолучитьПоказателиВида(Отчет.НастройкаОтчета,"Шаблон");
	Для каждого СтрокаШаблон Из Шаблоны Цикл
		
		ИмяОбласти   = СтрокаШаблон.ИмяОбласти;
		ОблМакета    = бит_МеханизмПолученияДанных.ПолучитьОбластьЯчеек(Результат,ИмяОбласти,Истина);
		Если ОблМакета = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ТекстШаблона = ОблМакета.Текст;
		Если Найти(ТекстШаблона,"[ОписаниеТекущегоПериода]")>0 Тогда
			ОблМакета.Текст = СтрЗаменить(ТекстШаблона, "[ОписаниеТекущегоПериода]", СтрПараметры.ОписаниеТекущегоПериода);
		КонецЕсли;	
		Если Найти(ТекстШаблона,"[ОписаниеПредыдущегоПериода]")>0 Тогда
			ОблМакета.Текст = СтрЗаменить(ТекстШаблона, "[ОписаниеПредыдущегоПериода]", СтрПараметры.ОписаниеПредыдущегоПериода);
		КонецЕсли;	
		// СофтБаланс Начало Кузнецова С. [14.04.2014] 
		Если Найти(ТекстШаблона,"[ДатаНачалаПредФормат]")>0 Тогда
			ОблМакета.Текст = СтрЗаменить(ТекстШаблона, "[ДатаНачалаПредФормат]", СтрПараметры.ДатаНачалаПредФормат);
		КонецЕсли;	
		Если Найти(ТекстШаблона,"[ДатаОкончанияПредФормат]")>0 Тогда
			ОблМакета.Текст = СтрЗаменить(ТекстШаблона, "[ДатаОкончанияПредФормат]", СтрПараметры.ДатаОкончанияПредФормат);
		КонецЕсли;	
		// СофтБаланс Окончание Кузнецова С. [14.04.2014]
	
	КонецЦикла;
	
	//Для а = 1 по ЭлементыФормы.Результат.Защита = Ложь;
	Элементы.Результат.Защита = Ложь;
КонецПроцедуры	

//&НаСервере
//Функция РасшифроватьОтчетомМСФОСервер(СтруктураПараметров)
//	
//	//#Если ТолстыйКлиентУправляемоеПриложение Тогда
//		
//	ОтчетЗначение = РеквизитФормыВЗначение("Отчет");
//	ОтчетРасшифровка = ОтчетЗначение.РасшифроватьОтчетомМСФО(СтруктураПараметров);
//	ЗначениеВРеквизитФормы(ОтчетЗначение, "Отчет");
//	
//	Возврат ОтчетРасшифровка;
//	
//	//#КонецЕсли
//	
//	//Временный_Файл = ПолучитьИмяВременногоФайла();
//	//ЗначениеВФайл(Временный_Файл, ОтчетРасшифровка);
//	//Файл = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Временный_Файл));
//	//Возврат Файл;
//
//КонецФункции

// +СБ. Кузнецова С. 2015-01-21
&НаКлиенте
Процедура КомандаРасшифроватьОтчетомМСФО(Команда)
	
	ТекОбл = Результат.ТекущаяОбласть;
	
	флЕстьРасшифровка = Ложь;
	
	Если НЕ ТекОбл = Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ИмяОбласти"     ,ТекОбл.Имя);
		СтруктураПараметров.Вставить("ДатаНачала", Отчет.СтандартныйПериод.ДатаНачала);
		СтруктураПараметров.Вставить("ДатаОкончания", Отчет.СтандартныйПериод.ДатаОкончания);
		СтруктураПараметров.Вставить("Организация", Отчет.Организация);
		СтруктураПараметров.Вставить("НастройкаОтчета", Отчет.НастройкаОтчета);
		
		
		флЕстьРасшифровка = ПроверкаРасшифровки(СтруктураПараметров);
		
		Если флЕстьРасшифровка Тогда 
			Форма = ПолучитьФорму("Отчет.СБ_ОборотыСчетаМеждународный.Форма", , ЭтаФорма);
			Форма.бит_ПроизвольныйОтчетРасшифровкаЗаполнить(СтруктураПараметров);
			Форма.Открыть();
		Иначе
			ТекстСообщения = НСтр("ru = 'Для ячейки %1% расшифровка отчетом не предусмотрена.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтруктураПараметров.ИмяОбласти);
			Сообщить(ТекстСообщения,СтатусСообщения.Информация);
		КонецЕсли;	
		
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не выбрана ячейка для которой следует вывести расшифровку.'");		
		Сообщить(ТекстСообщения,СтатусСообщения.Информация);
		
	КонецЕсли; // область

КонецПроцедуры
// -СБ. Кузнецова С

&НаСервере
Функция ПроверкаРасшифровки(СтруктураПараметров)
	
	флЕстьРасшифровка = Ложь;
	
	СтрокаТаблицы = Справочники.бит_ПоказателиПроизвольныхОтчетов.НайтиПоКоду(СтруктураПараметров.ИмяОбласти,,,СтруктураПараметров.НастройкаОтчета);
	Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлементДанных) И СтрокаТаблицы.ЭлементДанных.ВидГруппы <> Перечисления.бит_ВидыГруппДанных.Формула Тогда
			флЕстьРасшифровка = Истина;
	КонецЕсли;
		
	Возврат флЕстьРасшифровка;
КонецФункции
