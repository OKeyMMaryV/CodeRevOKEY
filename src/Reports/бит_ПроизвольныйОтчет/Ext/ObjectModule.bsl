//// +СБ. Кузнецова С. 2015-01-21


//Функция РасшифроватьОтчетомМСФО(СтруктураПараметров) Экспорт

//	флЕстьРасшифровка = Ложь;
//	
//	СтрокаТаблицы = Справочники.бит_ПоказателиПроизвольныхОтчетов.НайтиПоКоду(СтруктураПараметров.ИмяОбласти,,,НастройкаОтчета);
//	
//	Если НЕ СтрокаТаблицы = Неопределено Тогда
//		
//		Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлементДанных) И СтрокаТаблицы.ЭлементДанных.ВидГруппы <> Перечисления.бит_ВидыГруппДанных.Формула Тогда
//			
//			флЕстьРасшифровка = Истина;
//			// создадим отчет-расшифровку
//			ОтчетРасшифровка = Отчеты.СБ_ОборотыСчетаМеждународный.Создать();
//			ОтчетРасшифровка.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
//			Если СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущий" Или СтрокаТаблицы.ИмяРесурса = "КонОстатокПредыдущий" 
//				 Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийБезНДС"  Или СтрокаТаблицы.ИмяРесурса = "НачОстатокПредыдущий" Тогда
//				НачалоПредПериода = ТаблицаПараметры.Найти("НачалоПериода1", "ИмяПараметра");
//				Если НачалоПредПериода <> Неопределено Тогда
//					ОтчетРасшифровка.НачалоПериода      = НачалоПредПериода.ЗначениеПараметра;
//				Иначе
//					ОтчетРасшифровка.НачалоПериода      = ДатаНачала;
//				КонецЕсли;
//				КонецПредПериода = ТаблицаПараметры.Найти("КонецПериода1", "ИмяПараметра");
//				Если КонецПредПериода <> Неопределено Тогда
//					ОтчетРасшифровка.КонецПериода      = КонецПредПериода.ЗначениеПараметра;
//				Иначе
//					ОтчетРасшифровка.КонецПериода      = ДатаОкончания;
//				КонецЕсли;
//			Иначе
//				ОтчетРасшифровка.НачалоПериода      = ДатаНачала;
//				ОтчетРасшифровка.КонецПериода   = ДатаОкончания;
//			КонецЕсли;
//			Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
//				ОтчетРасшифровка.Организация        = Организация;
//			ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") И ЗначениеЗаполнено(Организация) Тогда
//				НовыйОтбор = ОтчетРасшифровка.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
//				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//				СписокОрганизаций = Новый СписокЗначений;
//				Запрос = Новый Запрос;
//				Запрос.Текст = "ВЫБРАТЬ
//				|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
//				|ИЗ
//				|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Дата, ПериметрКонсолидации = &Периметр) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
//				|ГДЕ
//				|	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Дата
//				|	ИЛИ (КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) < &Дата И КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &ДатаНач)
//				|	ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация";
//				Если СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущий" Или СтрокаТаблицы.ИмяРесурса = "КонОстатокПредыдущий" Тогда
//					Запрос.УстановитьПараметр("Дата", КонецДня(КонецПредПериода.ЗначениеПараметра));
//					Запрос.УстановитьПараметр("ДатаНач", НачалоПредПериода.ЗначениеПараметра);
//				Иначе
//					Запрос.УстановитьПараметр("Дата", КонецДня(ДатаОкончания));
//					Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
//				КонецЕсли;
//				Запрос.УстановитьПараметр("Периметр", Организация);
//				
//				РезультатЗапроса = Запрос.Выполнить();
//				Выборка = РезультатЗапроса.Выбрать();
//				Пока Выборка.Следующий() Цикл
//					СписокОрганизаций.Добавить(Выборка.Организация);
//				КонецЦикла; 
//				НовыйОтбор.ПравоеЗначение = СписокОрганизаций;
//				НовыйОтбор.Использование = Истина;
//			КонецЕсли;
//			Если СтрокаТаблицы.ИмяРесурса = "ОборотОсновной" Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущий" 
//				 Или СтрокаТаблицы.ИмяРесурса = "ОборотОсновнойБезНДС"  Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийБезНДС"
//				 Или СтрокаТаблицы.ИмяРесурса = "ОборотОсновнойСНДС"  Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийСНДС"
//				 Или СтрокаТаблицы.ИмяРесурса = "НДСОсновной"  Или СтрокаТаблицы.ИмяРесурса = "НДСПредыдущий"
//				Тогда
//				ОтчетРасшифровка.СальдоНаКонецДт = Ложь;
//				ОтчетРасшифровка.СальдоНаКонецКт = Ложь;
//				ОтчетРасшифровка.ОборотыЗаПериодДт = Истина;
//				ОтчетРасшифровка.ОборотыЗаПериодКт = Истина;
//				ОтчетРасшифровка.СальдоНаНачалоДт = Ложь;
//				ОтчетРасшифровка.СальдоНаНачалоКт = Ложь;
//			ИначеЕсли СтрокаТаблицы.ИмяРесурса = "КонОстатокОсновной" Или СтрокаТаблицы.ИмяРесурса = "КонОстатокПредыдущий" Тогда
//				ОтчетРасшифровка.СальдоНаКонецДт = Истина;
//				ОтчетРасшифровка.СальдоНаКонецКт = Истина;
//				ОтчетРасшифровка.ОборотыЗаПериодДт = Ложь;
//				ОтчетРасшифровка.ОборотыЗаПериодКт = Ложь;
//				ОтчетРасшифровка.СальдоНаНачалоДт = Ложь;
//				ОтчетРасшифровка.СальдоНаНачалоКт = Ложь;
//			ИначеЕсли СтрокаТаблицы.ИмяРесурса = "НачОстатокОсновной" Тогда
//				ОтчетРасшифровка.СальдоНаКонецДт = Ложь;
//				ОтчетРасшифровка.СальдоНаКонецКт = Ложь;
//				ОтчетРасшифровка.ОборотыЗаПериодДт = Ложь;
//				ОтчетРасшифровка.ОборотыЗаПериодКт = Ложь;
//				ОтчетРасшифровка.СальдоНаНачалоДт = Истина;
//				ОтчетРасшифровка.СальдоНаНачалоКт = Истина;
//			КонецЕсли;
//			ОтчетРасшифровка.ОборотыСоСчетамиДт = Ложь;
//			ОтчетРасшифровка.ОборотыСоСчетамиКт = Ложь;
//			ОтчетРасшифровка.РежимРасшифровки = Истина;
//			Если СтрокаТаблицы.ИмяРесурса = "НДСОсновной"  Или СтрокаТаблицы.ИмяРесурса = "НДСПредыдущий" Тогда
//				//ОтчетРасшифровка.ЭлементРасшифровки = "Прочие связанные стороны – Сумма сделки (НДС)";
//			Иначе
//				//ОтчетРасшифровка.ЭлементРасшифровки = СтрокаТаблицы.ЭлементДанных.Наименование;
//			КонецЕсли;
//			ОтчетРасшифровка.ПоСубсчетам = Истина;
//			ОтчетРасшифровка.ПоСубсчетамКорСчетов = Истина;
//			
//			Если СтрокаТаблицы.ИмяРесурса = "НДСОсновной"  Или СтрокаТаблицы.ИмяРесурса = "НДСПредыдущий" Тогда
//				
//				Запрос = Новый Запрос;
//				ТекстЗапроса = 
//				"ВЫБРАТЬ
//				|	бит_му_Настройки.Значение
//				|ИЗ
//				|	РегистрСведений.бит_му_Настройки КАК бит_му_Настройки
//				|ГДЕ
//				|	бит_му_Настройки.Группа = ""Консолидированные отчеты МСФО""
//				|	И бит_му_Настройки.ИмяНастройки = ""Счет учета НДС""";
//				Запрос.Текст = ТекстЗапроса; 
//				Выборка = Запрос.Выполнить().Выбрать();
//				
//				Если Выборка.Следующий() Тогда
//					СчетНДС = Выборка.Значение;
//				Иначе
//					СчетНДС = ПланыСчетов.бит_Дополнительный_2.ПустаяСсылка();
//				КонецЕсли;
//				
//				ЭлементыОтбора = ОтчетРасшифровка.КомпоновщикНастроек.Настройки.Отбор.Элементы;
//				
//				НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
//				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
//				НовыйОтбор.ПравоеЗначение = ПланыСчетов.бит_Дополнительный_2.Доходы;
//				НовыйОтбор.Использование = Истина;
//				
//				НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорСчет");
//				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
//				НовыйОтбор.ПравоеЗначение = СчетНДС;
//				НовыйОтбор.Использование = Истина;
//				
//				// отбор по регистраторам проводок и субконто 1
//				ОтчетРасшифровка.Периодичность = 2;
//				
//				Запрос = Новый Запрос;
//				ТекстЗапроса = 
//				"ВЫБРАТЬ
//				|	&НачалоПериода КАК НачалоПериода,
//				|	&КонецПериодаДата КАК КонецПериода,
//				|	бит_му_ПериметрыКонсолидации.Ссылка КАК ПериметрКонсолидации
//				|ПОМЕСТИТЬ ВТ_ПустойПериод
//				|ИЗ
//				|	Справочник.бит_му_ПериметрыКонсолидации КАК бит_му_ПериметрыКонсолидации
//				|
//				|ИНДЕКСИРОВАТЬ ПО
//				|	ПериметрКонсолидации
//				|;
//				|
//				|////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	бит_му_СоставПериметровКонсолидации.Период КАК Период,
//				|	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации
//				|ПОМЕСТИТЬ ВТ_ИзменениеВРамкахПериодаОсн
//				|ИЗ
//				|	РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
//				|ГДЕ
//				|	бит_му_СоставПериметровКонсолидации.Период > &НачалоПериода
//				|	И бит_му_СоставПериметровКонсолидации.Период < &КонецПериодаДата
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	бит_му_СоставПериметровКонсолидации.Период,
//				|	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	ДОБАВИТЬКДАТЕ(бит_му_СоставПериметровКонсолидации.ДатаОкончания, ДЕНЬ, 1),
//				|	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации
//				|ИЗ
//				|	РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
//				|ГДЕ
//				|	бит_му_СоставПериметровКонсолидации.ДатаОкончания > &НачалоПериода
//				|	И бит_му_СоставПериметровКонсолидации.ДатаОкончания < &КонецПериодаДата
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации,
//				|	ДОБАВИТЬКДАТЕ(бит_му_СоставПериметровКонсолидации.ДатаОкончания, ДЕНЬ, 1)
//				|
//				|ИНДЕКСИРОВАТЬ ПО
//				|	Период
//				|;
//				|
//				|////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	&НачалоПериода КАК ПериодНач,
//				|	МИНИМУМ(ЕСТЬNULL(ВТ_ИзменениеВРамкахПериодаОсн.Период, ДОБАВИТЬКДАТЕ(&КонецПериодаДата, СЕКУНДА, 1))) КАК ПериодКон,
//				|	ЕСТЬNULL(ВТ_ИзменениеВРамкахПериодаОсн.ПериметрКонсолидации, ВТ_ПустойПериод.ПериметрКонсолидации) КАК ПериметрКонсолидации
//				|ПОМЕСТИТЬ ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн
//				|ИЗ
//				|	ВТ_ПустойПериод КАК ВТ_ПустойПериод
//				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИзменениеВРамкахПериодаОсн КАК ВТ_ИзменениеВРамкахПериодаОсн
//				|		ПО ВТ_ПустойПериод.КонецПериода <> ВТ_ИзменениеВРамкахПериодаОсн.Период
//				|			И ВТ_ПустойПериод.НачалоПериода <> ВТ_ИзменениеВРамкахПериодаОсн.Период
//				|			И ВТ_ПустойПериод.ПериметрКонсолидации = ВТ_ИзменениеВРамкахПериодаОсн.ПериметрКонсолидации
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ЕСТЬNULL(ВТ_ИзменениеВРамкахПериодаОсн.ПериметрКонсолидации, ВТ_ПустойПериод.ПериметрКонсолидации)
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	ВТ_ИзменениеВРамкахПериодаНач.Период,
//				|	МИНИМУМ(ВТ_ИзменениеВРамкахПериодаКон.Период),
//				|	ВТ_ИзменениеВРамкахПериодаНач.ПериметрКонсолидации
//				|ИЗ
//				|	ВТ_ИзменениеВРамкахПериодаОсн КАК ВТ_ИзменениеВРамкахПериодаНач
//				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИзменениеВРамкахПериодаОсн КАК ВТ_ИзменениеВРамкахПериодаКон
//				|		ПО ВТ_ИзменениеВРамкахПериодаНач.Период < ВТ_ИзменениеВРамкахПериодаКон.Период
//				|			И ВТ_ИзменениеВРамкахПериодаНач.ПериметрКонсолидации = ВТ_ИзменениеВРамкахПериодаКон.ПериметрКонсолидации
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ВТ_ИзменениеВРамкахПериодаНач.Период,
//				|	ВТ_ИзменениеВРамкахПериодаНач.ПериметрКонсолидации
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	МАКСИМУМ(ВТ_ИзменениеВРамкахПериода.Период),
//				|	ДОБАВИТЬКДАТЕ(&КонецПериодаДата, СЕКУНДА, 1),
//				|	ВТ_ИзменениеВРамкахПериода.ПериметрКонсолидации
//				|ИЗ
//				|	ВТ_ИзменениеВРамкахПериодаОсн КАК ВТ_ИзменениеВРамкахПериода
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ВТ_ИзменениеВРамкахПериода.ПериметрКонсолидации
//				|
//				|ИНДЕКСИРОВАТЬ ПО
//				|	ПериодНач,
//				|	ПериметрКонсолидации
//				|;
//				|
//				|////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодНач КАК ПериодНач,
//				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодКон КАК ПериодКон,
//				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериметрКонсолидации,
//				|	бит_му_СоставПериметровКонсолидации.Организация КАК Организация
//				|ПОМЕСТИТЬ ВТ_ПараметрыОборотовОсн
//				|ИЗ
//				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн КАК ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн
//				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
//				|		ПО ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодНач >= бит_му_СоставПериметровКонсолидации.Период
//				|			И ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериметрКонсолидации = бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации
//				|			И (бит_му_СоставПериметровКонсолидации.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
//				|				ИЛИ ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодКон <= ДОБАВИТЬКДАТЕ(бит_му_СоставПериметровКонсолидации.ДатаОкончания, ДЕНЬ, 1))
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериметрКонсолидации,
//				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодНач,
//				|	ВТ_ПериодыИзмененияСоставаПериметраКонсолидацииОсн.ПериодКон,
//				|	бит_му_СоставПериметровКонсолидации.Организация
//				|
//				|ИНДЕКСИРОВАТЬ ПО
//				|	ПериодНач,
//				|	ПериодКон,
//				|	Организация
//				|;
//				|
//				|////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ
//				|	бит_Дополнительный_2Обороты.Период,
//				|	бит_Дополнительный_2Обороты.Регистратор,
//				|	бит_Дополнительный_2Обороты.Счет,
//				|	бит_Дополнительный_2Обороты.Субконто1,
//				|	бит_Дополнительный_2Обороты.Субконто2,
//				|	бит_Дополнительный_2Обороты.КорСчет,
//				|	бит_Дополнительный_2Обороты.КорСубконто1,
//				|	бит_Дополнительный_2Обороты.КорСубконто2,
//				|	бит_Дополнительный_2Обороты.Организация,
//				|	бит_Дополнительный_2Обороты.СуммаУпрОборот,
//				|	бит_Дополнительный_2Обороты.СуммаУпрОборотДт,
//				|	бит_Дополнительный_2Обороты.СуммаУпрОборотКт,
//				|	ЕСТЬNULL(Контрагенты.ПериметрКонсолидации, КорКонтрагенты.ПериметрКонсолидации) КАК ПериметрКонсолидации
//				|ПОМЕСТИТЬ ВТ_ОборотыКонтрагентовСПериметрамиОсн
//				|ИЗ
//				|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Счет В ИЕРАРХИИ (&Счет), , КорСубконто1.бит_му_СвязаннаяСторона, , ) КАК бит_Дополнительный_2Обороты
//				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.СБ_ПериметрыКонсолидации КАК Контрагенты
//				|		ПО бит_Дополнительный_2Обороты.Субконто1 = Контрагенты.Ссылка
//				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.СБ_ПериметрыКонсолидации КАК КорКонтрагенты
//				|		ПО бит_Дополнительный_2Обороты.КорСубконто1 = КорКонтрагенты.Ссылка
//				|ГДЕ
//				|	ВЫБОР
//				|			КОГДА бит_Дополнительный_2Обороты.Субконто1 ССЫЛКА Справочник.Контрагенты
//				|				ТОГДА НЕ Контрагенты.ПериметрКонсолидации ЕСТЬ NULL 
//				|			КОГДА бит_Дополнительный_2Обороты.КорСубконто1 ССЫЛКА Справочник.Контрагенты
//				|				ТОГДА НЕ КорКонтрагенты.ПериметрКонсолидации ЕСТЬ NULL 
//				|			ИНАЧЕ ИСТИНА
//				|		КОНЕЦ
//				|;
//				|
//				|////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	ВТ_ПараметрыОборотовОсн.ПериметрКонсолидации,
//				|	ВТ_ПараметрыОборотовОсн.Организация,
//				|	ВТ_ОборотыКонтрагентовСПериметрамиОсн.Регистратор,
//				|	ВТ_ОборотыКонтрагентовСПериметрамиОсн.Субконто1
//				|ПОМЕСТИТЬ ВТ_ИтоговыеДанные
//				|ИЗ
//				|	ВТ_ПараметрыОборотовОсн КАК ВТ_ПараметрыОборотовОсн
//				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОборотыКонтрагентовСПериметрамиОсн КАК ВТ_ОборотыКонтрагентовСПериметрамиОсн
//				|		ПО ВТ_ПараметрыОборотовОсн.ПериодНач <= ВТ_ОборотыКонтрагентовСПериметрамиОсн.Период
//				|			И ВТ_ПараметрыОборотовОсн.ПериодКон > ВТ_ОборотыКонтрагентовСПериметрамиОсн.Период
//				|			И (ВЫБОР
//				|				КОГДА &ПоПериметру
//				|					ТОГДА ВТ_ПараметрыОборотовОсн.Организация = ВТ_ОборотыКонтрагентовСПериметрамиОсн.Организация
//				|				ИНАЧЕ ЛОЖЬ
//				|			КОНЕЦ)
//				|			И ВТ_ПараметрыОборотовОсн.ПериметрКонсолидации = ВТ_ОборотыКонтрагентовСПериметрамиОсн.ПериметрКонсолидации
//				|ГДЕ
//				|	ВТ_ПараметрыОборотовОсн.ПериметрКонсолидации = &Организация
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ВТ_ПараметрыОборотовОсн.ПериметрКонсолидации,
//				|	ВТ_ПараметрыОборотовОсн.Организация,
//				|	ВТ_ОборотыКонтрагентовСПериметрамиОсн.Регистратор,
//				|	ВТ_ОборотыКонтрагентовСПериметрамиОсн.Субконто1
//				|
//				|ОБЪЕДИНИТЬ ВСЕ
//				|
//				|ВЫБРАТЬ
//				|	NULL,
//				|	бит_Дополнительный_2Обороты.Организация,
//				|	бит_Дополнительный_2Обороты.Регистратор,
//				|	бит_Дополнительный_2Обороты.Субконто1
//				|ИЗ
//				|	РегистрБухгалтерии.бит_Дополнительный_2.Обороты(
//				|			&НачалоПериода,
//				|			&КонецПериода,
//				|			Регистратор,
//				|			Счет В ИЕРАРХИИ (&Счет),
//				|			,
//				|			ВЫБОР
//				|					КОГДА &ПоПериметру
//				|						ТОГДА ЛОЖЬ
//				|					ИНАЧЕ ИСТИНА
//				|				КОНЕЦ
//				|				И КорСубконто1.бит_му_СвязаннаяСторона,
//				|			,
//				|			) КАК бит_Дополнительный_2Обороты
//				|ГДЕ
//				|	бит_Дополнительный_2Обороты.Организация = &Организация
//				|;
//				|
//				|////////////////////////////////////////////////////////////////////////////////
//				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				|	ТЧ.Регистратор,
//				|	ТЧ.Субконто1
//				|ИЗ
//				|	ВТ_ИтоговыеДанные КАК ТЧ
//				|ГДЕ
//				|	НЕ ТЧ.Регистратор ССЫЛКА Документ.бит_ПереоценкаВалютныхДенежныхСтатей
//				|
//				|СГРУППИРОВАТЬ ПО
//				|	ТЧ.Регистратор,
//				|	ТЧ.Субконто1";
//				Запрос.Текст = ТекстЗапроса; 
//				Запрос.УстановитьПараметр("НачалоПериода", ОтчетРасшифровка.НачалоПериода);
//				Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(ОтчетРасшифровка.КонецПериода), ВидГраницы.Включая));
//				Запрос.УстановитьПараметр("КонецПериодаДата", КонецДня(ОтчетРасшифровка.КонецПериода));
//				Запрос.УстановитьПараметр("Счет", ПланыСчетов.бит_Дополнительный_2.Доходы);
//				Запрос.УстановитьПараметр("ПоПериметру", ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации"));
//				Запрос.УстановитьПараметр("Организация", Организация);
//				
//				ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
//				Массив = ТаблицаЗапроса.ВыгрузитьКолонку("Регистратор");
//				СписокРегистраторов = Новый СписокЗначений;
//				СписокРегистраторов.ЗагрузитьЗначения(Массив);
//				
//				НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регистратор");
//				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//				НовыйОтбор.ПравоеЗначение = СписокРегистраторов;
//				НовыйОтбор.Использование = Истина;
//				
//				Массив = ТаблицаЗапроса.ВыгрузитьКолонку("Субконто1");
//				СписокСубконто = Новый СписокЗначений;
//				СписокСубконто.ЗагрузитьЗначения(Массив);
//				
//				НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//				НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто1");
//				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//				НовыйОтбор.ПравоеЗначение = СписокСубконто;
//				НовыйОтбор.Использование = Истина;
//				
//			Иначе
//				
//				// отбор по периметрам консолидации контрагентов
//				Если ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") И ЗначениеЗаполнено(Организация) Тогда
//					Отбор = ОтчетРасшифровка.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Если СтрокаТаблицы.ИмяРесурса = "ОборотОсновнойСНДС" Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийСНДС" 
//						 Или СтрокаТаблицы.ИмяРесурса = "ОборотОсновнойБезНДС"  Или СтрокаТаблицы.ИмяРесурса = "ОборотПредыдущийБезНДС" Тогда
//						Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорПериметрКонсолидации");
//					Иначе
//						Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериметрКонсолидации");
//					КонецЕсли;	
//					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//					Отбор.ПравоеЗначение = Организация;
//					Отбор.Использование = Истина;
//				КонецЕсли;
//				
//				Если СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
//					ЗаполнитьОтборОтчетаРасшифровки_ОборотыСчета(СтрокаТаблицы.ЭлементДанных, ОтчетРасшифровка.КомпоновщикНастроек.Настройки.Отбор.Элементы);
//				ИначеЕсли СтрокаТаблицы.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула Тогда
//					Для Каждого СтрокаФормулы Из СтрокаТаблицы.ЭлементДанных.СтрокиРасчетаДляФормулы Цикл
//						ЗаполнитьОтборОтчетаРасшифровки_ОборотыСчета(СтрокаФормулы.СтрокаРасчета, ОтчетРасшифровка.КомпоновщикНастроек.Настройки.Отбор.Элементы);
//					КонецЦикла;
//				КонецЕсли;
//			КонецЕсли;
//			
//			// отбор по ненулевым значениям показателей
//			МассивПоказателей = Новый Массив;
//			Если СтрокаТаблицы.ИмяРесурса = "КонОстатокОсновной" Или  СтрокаТаблицы.ИмяРесурса = "КонОстатокПредыдущий" Тогда
//				МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокДт");
//				МассивПоказателей.Добавить("СальдоНаКонецПериода.СуммаУпрКонечныйОстатокКт");
//			ИначеЕсли СтрокаТаблицы.ИмяРесурса = "НачОстатокОсновной" Тогда 
//				МассивПоказателей.Добавить("СальдоНаНачалоПериода.СуммаУпрНачальныйОстатокДт");
//				МассивПоказателей.Добавить("СальдоНаНачалоПериода.СуммаУпрНачальныйОстатокКт");
//			Иначе
//				МассивПоказателей.Добавить("ОборотыЗаПериод.СуммаУпрОборотДт");
//				МассивПоказателей.Добавить("ОборотыЗаПериод.СуммаУпрОборотКт");
//			КонецЕсли;
//			//ОтчетРасшифровка.МассивПоказателейДляОтбора = МассивПоказателей;
//			
//			// дополнительный отбор по заполненным показателям на верхнем уровне структуры
//			ГруппаОтбора = ОтчетРасшифровка.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
//			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
//			ГруппаОтбора.Использование = Истина;
//			
//			Для Каждого Элемент Из МассивПоказателей Цикл
//				Отбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//				Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент);
//				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
//				Отбор.Использование = Истина;
//			КонецЦикла;
//			
//			Возврат ОтчетРасшифровка;
//			
//		КонецЕсли; // в элементе данных заполнена настройка расшифровки отчетом
//		
//	КонецЕсли; // Строка настроек найдена 
//	
//	Если НЕ флЕстьРасшифровка Тогда
//		
//		ТекстСообщения = НСтр("ru = 'Для ячейки %1% расшифровка отчетом не предусмотрена.'");
//		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,СтруктураПараметров.ИмяОбласти);
//		Сообщить(ТекстСообщения,СтатусСообщения.Информация);
//		Возврат Неопределено;
//		
//	КонецЕсли; 


//КонецФункции // РасшифроватьПроизвольнымОтчетом()

//Процедура ЗаполнитьОтборОтчетаРасшифровки_ОборотыСчета(Элемент, ЭлементыОтбора)
//	
//	ХранилищеНастроек = Элемент.НастройкиПостроителя.Получить();
//	Если ТипЗнч(ХранилищеНастроек) = Тип("Структура") И ХранилищеНастроек.Количество() <> 0 И ХранилищеНастроек.Свойство("Отбор") Тогда
//		Для Каждого СтрокаОтбора Из ХранилищеНастроек.Отбор Цикл
//			ОтборУстановлен = Ложь;
//			Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
//				Если СтрокаОтбора.ПутьКДанным = Строка(ЭлементОтбора.ЛевоеЗначение) Тогда
//					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
//						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
//						ЗначенияОтбора = Новый СписокЗначений;
//						ЗначенияОтбора.Добавить(ЭлементОтбора.ПравоеЗначение);
//						Если ТипЗнч(СтрокаОтбора.Значение) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
//							ЗначенияОтбора.Добавить(СтрокаОтбора.Значение);
//							ОтборУстановлен = Истина;
//							Прервать;
//						ИначеЕсли ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений") Тогда
//							Для Каждого ЗначОтбора Из СтрокаОтбора.Значение Цикл
//								ЗначенияОтбора.Добавить(ЗначОтбора.Значение);
//							КонецЦикла;
//							ОтборУстановлен = Истина;
//							Прервать;
//						КонецЕсли;
//					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
//						ЗначенияОтбора = ЭлементОтбора.ПравоеЗначение;
//						Если ТипЗнч(СтрокаОтбора.Значение) = Тип("ПланСчетовСсылка.бит_Дополнительный_2") Тогда
//							ЗначенияОтбора.Добавить(СтрокаОтбора.Значение);
//							ОтборУстановлен = Истина;
//							Прервать;
//						ИначеЕсли ТипЗнч(СтрокаОтбора.Значение) = Тип("СписокЗначений") Тогда
//							Для Каждого ЗначОтбора Из СтрокаОтбора.Значение Цикл
//								ЗначенияОтбора.Добавить(ЗначОтбора.Значение);
//							КонецЦикла;
//							ОтборУстановлен = Истина;
//							Прервать;
//						КонецЕсли;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЦикла;
//			Если Не ОтборУстановлен Тогда
//				Если СтрокаОтбора.ВидСравнения = ВидСравнения.Интервал Тогда
//					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
//					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
//					Отбор1.Использование = Истина;
//					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
//					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
//					Отбор2.Использование = Истина;
//				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
//					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
//					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
//					Отбор1.Использование = Истина;
//					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
//					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
//					Отбор2.Использование = Истина;
//				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
//					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
//					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
//					Отбор1.Использование = Истина;
//					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
//					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
//					Отбор2.Использование = Истина;
//				ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
//					Отбор1 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
//					Отбор1.ПравоеЗначение = СтрокаОтбора.ЗначениеС;
//					Отбор1.Использование = Истина;
//					Отбор2 = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
//					Отбор2.ПравоеЗначение = СтрокаОтбора.ЗначениеПо;
//					Отбор2.Использование = Истина;
//				Иначе
//					НовыйОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//					НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаОтбора.ПутьКДанным);
//					Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВИерархии Тогда
//						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
//					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
//						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
//					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВИерархии Тогда
//						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии;
//					ИначеЕсли СтрокаОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
//						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
//					Иначе
//						НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных[СтрЗаменить(Строка(СтрокаОтбора.ВидСравнения), " ", "")];
//					КонецЕсли;
//					НовыйОтбор.ПравоеЗначение = СтрокаОтбора.Значение;
//					НовыйОтбор.Использование = Истина;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры



////Функция ОпределитьТипРасшифровки(ИмяОбласти) Экспорт
////	
////	СтруктураПараметров = Новый Структура("РасшифроватьПроизвольнымОтчетом, ПредыдущийПериод", Ложь, Ложь);
////	
////	СтрокаТаблицы = Справочники.бит_ПоказателиПроизвольныхОтчетов.НайтиПоКоду(ИмяОбласти,,,НастройкаОтчета);
////	
////	Если НЕ СтрокаТаблицы = Неопределено Тогда
////		Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлементДанных) И СтрокаТаблицы.ЭлементДанных.ВидГруппы <> Перечисления.бит_ВидыГруппДанных.Формула Тогда
////			Если СтрокаТаблицы.ЭлементДанных.ИсточникДанных.Наименование = "ОборотыЗаДваПериодаБезНДС" Тогда
////				СтруктураПараметров.РасшифроватьПроизвольнымОтчетом = Истина;
////			КонецЕсли;
////		КонецЕсли;
////		СтруктураПараметров.ПредыдущийПериод = Найти(СтрокаТаблицы.ИмяРесурса, "Предыдущий") <> 0;
////	КонецЕсли;
////	
////	Возврат СтруктураПараметров;
////	
////КонецФункции
//// -СБ. Кузнецова С.