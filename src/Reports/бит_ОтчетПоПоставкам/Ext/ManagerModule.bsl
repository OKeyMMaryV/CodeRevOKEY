#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьТаблицуДанных() Экспорт
		
	СортировкаПодсистем = СортировкаПодсистем();
	
	ТипЧисло  = ОбщегоНазначения.ОписаниеТипаЧисло(1);
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(60);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	Таблица = Новый ТаблицаЗначений(); 
	Таблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Таблица.Колонки.Добавить("Представление", ТипСтрока); 
	Таблица.Колонки.Добавить("Подсистема", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных")); 
	Таблица.Колонки.Добавить("ПодсистемаПредставление", ТипСтрока); 
	Таблица.Колонки.Добавить("ПодсистемаРодитель", ТипСтрока); 
	Таблица.Колонки.Добавить("ПорядокПодсистемы", ТипЧисло); 
	Таблица.Колонки.Добавить("Стандарт", ТипБулево); 
	Таблица.Колонки.Добавить("УУ",       ТипБулево); 
	Таблица.Колонки.Добавить("МСФО",     ТипБулево); 
	Таблица.Колонки.Добавить("УХ",       ТипБулево); 
	Таблица.Колонки.Добавить("ПРОФ",     ТипБулево); 
	
	Классы = Новый Массив(); 
	Классы.Добавить(Метаданные.Справочники);
	Классы.Добавить(Метаданные.Документы);
	Классы.Добавить(Метаданные.Отчеты);
	Классы.Добавить(Метаданные.Обработки);
	Классы.Добавить(Метаданные.ПланыСчетов);
	Классы.Добавить(Метаданные.ПланыВидовХарактеристик);
	Классы.Добавить(Метаданные.РегистрыСведений);
	Классы.Добавить(Метаданные.РегистрыНакопления);
	Классы.Добавить(Метаданные.РегистрыБухгалтерии);
	Классы.Добавить(Метаданные.БизнесПроцессы);
	Классы.Добавить(Метаданные.Задачи);
	
	Для каждого Класс Из Классы Цикл
		Для каждого Элемент Из Класс Цикл
			Если ВывестиВОтчет(Элемент.Имя) Тогда 				
								
				Если Элемент = Метаданные.Обработки.бит_Служебный Тогда
					Продолжить;
				КонецЕсли;
				
				ВключенВСистему = Ложь;
				Для каждого ОписаниеПодсистемы Из СортировкаПодсистем Цикл
					Если ПодсистемаСодержитЭлемент(ОписаниеПодсистемы.Подсистема, Элемент) Тогда
						ДобавитьСтрокуТаблица(Таблица, Элемент, ОписаниеПодсистемы.ИдентифкаторОМД, 
							ОписаниеПодсистемы.Представление, ОписаниеПодсистемы.Порядок, ОписаниеПодсистемы.Представление);
						ВключенВСистему = Истина;
					КонецЕсли;
				КонецЦикла; 
				
				Если Не ВключенВСистему Тогда
					ДобавитьСтрокуТаблица(Таблица, Элемент, Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка(), 
						НСтр("ru = 'Общие объекты'"), 8, НСтр("ru = 'Технологические возможности'"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуДанных()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВывестиВОтчет(ИмяОбъекта)

	ВывестиВОтчет = (СтрНайти(ИмяОбъекта, "бит_")>0 
				ИЛИ ВРег(ИмяОбъекта) =  ВРег("Подразделения")
				ИЛИ ВРег(ИмяОбъекта) =  ВРег("ВидыЦФО") 
				ИЛИ ВРег(ИмяОбъекта) =  ВРег("СценарииПланирования")
				ИЛИ ВРег(ИмяОбъекта) =  ВРег("Проекты"));
				
	Если СтрЧислоВхождений(ИмяОбъекта, "удалить") > 0 Тогда
		ВывестиВОтчет = Ложь;
	КонецЕсли;
				
	Возврат ВывестиВОтчет;			

КонецФункции
 
Функция СортировкаПодсистем()

	СортировкаПодсистем = Новый ТаблицаЗначений(); 
	СортировкаПодсистем.Колонки.Добавить("Подсистема",  	Новый ОписаниеТипов("ОбъектМетаданных"));
	СортировкаПодсистем.Колонки.Добавить("ИдентифкаторОМД", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	СортировкаПодсистем.Колонки.Добавить("Порядок", 		ОбщегоНазначения.ОписаниеТипаЧисло(4));
	СортировкаПодсистем.Колонки.Добавить("Группировка", 	ОбщегоНазначения.ОписаниеТипаСтрока(100));
	СортировкаПодсистем.Колонки.Добавить("Представление", 	ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_Казначейство, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_Казначейство"), 1, НСтр("ru = 'Основные подсистемы'"));
		
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_Бюджетирование, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_Бюджетирование"), 2, НСтр("ru = 'Основные подсистемы'"));
				
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_МДМ, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_МДМ"), 4, 
		НСтр("ru = 'Основные подсистемы'"), НСтр("ru = 'Управление нормативно - справочной информацией (MDM)'"));
		
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_ПолучениеДанных, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_ПолучениеДанных"), 9, НСтр("ru = 'Технологические возможности'"));
		
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_ПреобразованиеДанных, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_ПреобразованиеДанных"), 10, НСтр("ru = 'Технологические возможности'"));
		
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_УправлениеДоговорамиЗатратами, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_УправлениеДоговорамиЗатратами"), 3, НСтр("ru = 'Основные подсистемы'"));
		
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_УправлениеПроцессами, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_УправлениеПроцессами"), 11, НСтр("ru = 'Технологические возможности'"));
		
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_УправленческийУчет, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_УправленческийУчет"), 7, НСтр("ru = 'Основные подсистемы'"));

	// ++ НЕ УТКА 
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_Консолидация, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_Консолидация"), 5, НСтр("ru = 'Основные подсистемы'"));
		
	ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Метаданные.Подсистемы.бит_КомИнт_МСФО, 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Подсистема.бит_КомИнт_МСФО"), 6, НСтр("ru = 'Основные подсистемы'"));
	// -- НЕ УТКА
	
	Возврат СортировкаПодсистем;
	
КонецФункции

Процедура ДобавитьВСортировкуПодсистем(СортировкаПодсистем, Подсистема, ИдентифкаторОМД, Порядок, Группировка, Представление = "")

	НоваяСтрока = СортировкаПодсистем.Добавить();
	НоваяСтрока.Подсистема 		= Подсистема;
	НоваяСтрока.ИдентифкаторОМД = ИдентифкаторОМД;
	НоваяСтрока.Порядок 		= Порядок;
	НоваяСтрока.Группировка 	= Группировка;
	
	Если ПустаяСтрока(Представление) Тогда
		НоваяСтрока.Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИдентифкаторОМД, "Синоним");
	Иначе	
		НоваяСтрока.Представление = Представление;
	КонецЕсли; 

КонецПроцедуры
 
Функция ПодсистемаСодержитЭлемент(Подсистема, ОбъектКонфигурации)
		
	Результат = Подсистема.Состав.Содержит(ОбъектКонфигурации);
	
	Если Не Результат Тогда	
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			Для Каждого ДочерняяПодсистема ИЗ Подсистема.Подсистемы Цикл
				Результат = ПодсистемаСодержитЭлемент(ДочерняяПодсистема, ОбъектКонфигурации); 
				Если Результат Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуТаблица(Таблица, Элемент, Подсистема, ПредставлениеПодсистемы, ПорядокПодсистемы, ПодсистемаРодитель = "")
	
	УУ 	     = Метаданные.ФункциональныеОпции.бит_УУ.Состав;
	МСФО 	 = Метаданные.ФункциональныеОпции.бит_ФинансМСФО.Состав;
	УХ	     = Метаданные.ФункциональныеОпции.бит_УХ.Состав;
	ПРОФ	 = Метаданные.ФункциональныеОпции.бит_ПРОФ.Состав;
	Стандарт = Метаданные.ФункциональныеОпции.бит_СТ.Состав;
	// ++ БП 
	Стандарт2= Метаданные.ФункциональныеОпции.бит_ТолькоСТ.Состав;
	// -- БП 

	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Ссылка        = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Элемент);
	НоваяСтрока.Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Ссылка, "Синоним");
	НоваяСтрока.Подсистема    = Подсистема;
	НоваяСтрока.ПодсистемаРодитель = ПодсистемаРодитель;
	НоваяСтрока.ПорядокПодсистемы = ПорядокПодсистемы;
	НоваяСтрока.ПодсистемаПредставление = ПредставлениеПодсистемы;
	
	НаборФункций = Новый Массив();
	НаборФункций.Добавить(УХ);
	НаборФункций.Добавить(УУ);
	НаборФункций.Добавить(ПРОФ);
	НаборФункций.Добавить(Стандарт);
	НоваяСтрока.УХ = ФункциональностьПоддерживается(НаборФункций, Элемент);
	
	НаборФункций = Новый Массив();
	НаборФункций.Добавить(УУ);
	НаборФункций.Добавить(ПРОФ);
	НаборФункций.Добавить(Стандарт);
	НоваяСтрока.УУ = ФункциональностьПоддерживается(НаборФункций, Элемент);
	
	НаборФункций = Новый Массив();
	НаборФункций.Добавить(ПРОФ);
	НаборФункций.Добавить(Стандарт);
	НоваяСтрока.ПРОФ = ФункциональностьПоддерживается(НаборФункций, Элемент);
						
	НоваяСтрока.МСФО = ФункциональностьПоддерживается(МСФО, Элемент);
	
	НаборФункций = Новый Массив();
	НаборФункций.Добавить(Стандарт);
	// ++ БП 
	НаборФункций.Добавить(Стандарт2);
	// -- БП 
	НоваяСтрока.Стандарт = ФункциональностьПоддерживается(НаборФункций, Элемент);
	
КонецПроцедуры

Функция ФункциональностьПоддерживается(Функциональность, Объект)

	Если ТипЗнч(Функциональность) = Тип("Массив") Тогда
		НаборФункций = Функциональность;
	Иначе
		НаборФункций = Новый Массив(); 
		НаборФункций.Добавить(Функциональность);
	КонецЕсли; 
	
	Успех = Ложь;
	Для каждого Элемент Из НаборФункций Цикл
		Успех = Элемент.Содержит(Объект);
		Если Успех Тогда
			Прервать;		
		КонецЕсли; 
	КонецЦикла; 

	Возврат Успех;
	
КонецФункции
 
// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
		
    НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Общий");
	НастройкиВарианта.Описание = НСтр("ru = 'Отчет по поставкам БИТ:Финанс (расширенный).'");
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ПоПодсистемам");
	НастройкиВарианта.Описание = НСтр("ru = 'Отчет по поставкам БИТ:Финанс (по подсистемам).'");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецЕсли