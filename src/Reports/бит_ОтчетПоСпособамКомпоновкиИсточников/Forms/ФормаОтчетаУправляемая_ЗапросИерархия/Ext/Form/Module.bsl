#Область ОписаниеПеременных

// Служит для передачи вида сравнения между обработчиками.
&НаКлиенте
Перем мТекущийВидСравнения;

// Служит для передачи вида параметра между обработчиками.
&НаКлиенте
Перем мТекущийВидПараметра;

// Хранит текущее значение типа вывода
&НаКлиенте
Перем мСохрТипВывода;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриОткрытии" формы.
// 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.СпособКомпоновки) Тогда
		бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоВыводимыхДанных, ДеревоВыводимыхДанных.ПолучитьЭлементы());
	КонецЕсли;	
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "СпособКомпоновкиИсточниковДанных".
// 
&НаКлиенте
Процедура СпособКомпоновкиИсточниковДанныхПриИзменении(Элемент)
	
	СпособКомпоновкиИсточниковДанныхПриИзмененииСервер();
	
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоВыводимыхДанных, ДеревоВыводимыхДанных.ПолучитьЭлементы());
		
КонецПроцедуры // СпособКомпоновкиИсточниковДанныхПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода "Иерархия".
// 
&НаКлиенте
Процедура ИерархияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИерархияОчистка()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФорматЧисел".
// 
&НаКлиенте
Процедура ФорматЧиселНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонструкторФормата = Новый КонструкторФорматнойСтроки(Отчет.ФорматЧисел);
	
	КонструкторФормата.ДоступныеТипы = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(16,3));
		
	ОбработчикФЧЗ = Новый ОписаниеОповещения("КонструкторФорматаЧиселЗавершение", ЭтотОбъект);
	КонструкторФормата.Показать(ОбработчикФЧЗ);

КонецПроцедуры // ФорматЧиселНачалоВыбора()

// Процедура - завершение обработчика события "НачалоВыбора" поля ввода "ФорматЧисел".
// 
&НаКлиенте
Процедура КонструкторФорматаЧиселЗавершение(РезультатФорматЧисел, Параметры) Экспорт
	
	Если РезультатФорматЧисел <> Неопределено Тогда
		Отчет.ФорматЧисел = РезультатФорматЧисел;
	КонецЕсли;	
	
КонецПроцедуры // КонструкторФорматаЧиселЗавершение()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФорматДаты".
// 
&НаКлиенте
Процедура ФорматДатыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонструкторФормата = Новый КонструкторФорматнойСтроки(Отчет.ФорматДаты);
	
	КонструкторФормата.ДоступныеТипы = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ОбработчикФДЗ = Новый ОписаниеОповещения("КонструкторФорматаДатыЗавершение", ЭтотОбъект);
	КонструкторФормата.Показать(ОбработчикФДЗ);
		
КонецПроцедуры // ФорматДатыНачалоВыбора()

// Процедура - завершение обработчика события "НачалоВыбора" поля ввода "ФорматДаты".
// 
&НаКлиенте
Процедура КонструкторФорматаДатыЗавершение(РезультатФорматДаты, Параметры) Экспорт
	
	Если РезультатФорматДаты <> Неопределено Тогда
		Отчет.ФорматДаты = РезультатФорматДаты;
	КонецЕсли;	
	
КонецПроцедуры // КонструкторФорматаДатыЗавершение()

// Процедура - обработчик события "Очистка" поля ввода "ВариантГруппировкиСтрок".
// 
&НаКлиенте
Процедура ВариантГруппировкиСтрокОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВариантГруппировкиСтрокОчистка()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоВыводимыхДанных

// Процедура - обработчик события "Очистка" поля ввода "ТипВывода" 
// табличного поля "ДеревоВыводимыхДанных".
// 
&НаКлиенте
Процедура ДеревоВыводимыхДанныхТипВыводаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДеревоВыводимыхДанныхТипВыводаОчистка()

// Процедура - обработчик события "ПриИзменении" поля ввода "ТипВывода" 
// табличного поля "ДеревоВыводимыхДанных".
// 
&НаКлиенте
Процедура ДеревоВыводимыхДанныхТипВыводаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные  = Элементы.ДеревоВыводимыхДанных.ТекущиеДанные;
	мСохрТипВывода = ТекущиеДанные.ТипВывода;
	
КонецПроцедуры // ДеревоВыводимыхДанныхТипВыводаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ТипВывода" 
// табличного поля "ДеревоВыводимыхДанных".
// 
&НаКлиенте
Процедура ДеревоВыводимыхДанныхТипВыводаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоВыводимыхДанных.ТекущиеДанные;
	
	ЭтоБылаГруппаКолонок = мСохрТипВывода = "Группировка колонок";
	ЭтоЕстьГруппаКолонок = ТекущиеДанные.ТипВывода = "Группировка колонок";
	
	ПолеИспользуетсяВРасчетах = ТекущиеДанные.ИспользоватьВРасчетах;
	
	Если Не ПолеИспользуетсяВРасчетах И ЭтоЕстьГруппаКолонок Тогда
	
		ТекстСообщения = Нстр("ru = 'Группировка по колонкам может быть назначена только для полей используемых в расчетах (настройка колонки в справочнике ""Способы компоновки данных"").'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);				 
		ТекущиеДанные.ТипВывода = мСохрТипВывода;	
	
	ИначеЕсли Не ЭтоБылаГруппаКолонок И ЭтоЕстьГруппаКолонок Тогда

		Если КоличествоГруппировокПоКолонкам = 0 Тогда
			
			КоличествоГруппировокПоКолонкам = КоличествоГруппировокПоКолонкам + 1;
			
		//Иначе
		//	
		//	ТекстСообщения = Нстр("ru = 'Группировка по колонкам может быть назначена только один раз.'");
		//	бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		//		 
		//	ТекущиеДанные.ТипВывода = мСохрТипВывода;
			
		КонецЕсли; 
		
	ИначеЕсли ЭтоБылаГруппаКолонок И Не ЭтоЕстьГруппаКолонок Тогда
		
		 КоличествоГруппировокПоКолонкам = КоличествоГруппировокПоКолонкам - 1;
		 
	КонецЕсли;	
	
КонецПроцедуры // ДеревоВыводимыхДанныхТипВыводаПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборВОтчете

// Процедура - обработчик события "НачалоВыбора" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные 		 = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВыбораДляОтборов); 
	
КонецПроцедуры // ОтборВОтчетеВидСравненияНачалоВыбора()

&НаКлиенте
Процедура ОтборВОтчетеВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные 		 = Элементы.ОтборВОтчете.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(фКэшЗначений.МассивВыбораДляОтборов);
	
КонецПроцедуры // ОтборВОтчетеВидСравненияАвтоПодбор()
     
// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеВидСравненияПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборВОтчете.ТекущиеДанные;
	ОтборВОтчетеЗначениеПриИзмененииСервер(ТекущиеДанные.ПолучитьИдентификатор());
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока        = Элементы.ОтборВОтчете.ТекущиеДанные;	
	
	Если ТекущаяСтрока.Значение = Неопределено Тогда
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
		
	Иначе	
		
		Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеОчистка" 
// табличного поля "ОтборВОтчете".
// 
&НаКлиенте
Процедура ОтборВОтчетеЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ОтборВОтчетеЗначение.ВыбиратьТип = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;	 	
	
	Если НоваяСтрока И НЕ Копирование Тогда  		
		ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение;   			
	КонецЕсли; 
	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	ОграничитьОписаниеТиповПараметра();
		
КонецПроцедуры // ТаблицаПараметрыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыВидПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИД = Элементы.ТаблицаПараметры.ТекущиеДанные.ПолучитьИдентификатор();
		ИзменитьВидПараметра(ИД, мТекущийВидПараметра);
		
		мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
		
		ОграничитьОписаниеТиповПараметра();
				
	КонецЕсли;
	
КонецПроцедуры // ТаблицаПараметрыВидПараметраПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные        = Элементы.ТаблицаПараметры.ТекущиеДанные;	
	мТекущийВидПараметра = ТекущиеДанные.ВидПараметра;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда  		
		СтандартнаяОбработка = Ложь;			
	КонецЕсли;	
	
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода "ЗначениеПараметра" 
// табличного поля "ТаблицаПараметры".
// 
&НаКлиенте
Процедура ТаблицаПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Значение Тогда		
		Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина;
	КонецЕсли;
		
КонецПроцедуры // ТаблицаПараметрыЗначениеПараметраОчистка()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "КомандаСформироватьОтчет".
// 
&НаКлиенте
Процедура КомандаСформироватьОтчет(Команда)

	СтрРегистрация = Новый Структура;
    бит_ук_СлужебныйВызовСервера.РегистрацияНачалоСобытия(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);

	ТекстСообщения = "";
	СформироватьОтчет(ТекстСообщения, СтрРегистрация); 	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	КонецЕсли; 
		
КонецПроцедуры // КомандаСформироватьОтчет()
												 
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();
		
КонецПроцедуры // КомандаПанельНастроек()

// Процедура - обработчик команды "ОтчетПоказатьВОтдельномОкне".
// 
&НаКлиенте
Процедура ОтчетПоказатьВОтдельномОкне(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	СформироватьТабДокДляВыводаВОтдельномОкне(ТабДок); 
	ТабДок.Показать();
	
КонецПроцедуры // ОтчетПоказатьВОтдельномОкне()

// Процедура - обработчик команды "КомандаВыборПериода".
// 
&НаКлиенте
Процедура КомандаВыборПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Отчет.Период;
	
	ОбработчикДР = Новый ОписаниеОповещения("ОбработкаРедактированияСтандартногоПериодаЗавершение", ЭтотОбъект);
	Диалог.Показать(ОбработчикДР);
	
КонецПроцедуры // КомандаВыборПериода()

// Процедура - завершение обработчика команды "КомандаВыборПериода".
// 
&НаКлиенте
Процедура ОбработкаРедактированияСтандартногоПериодаЗавершение(ДиалогПериод, Параметры) Экспорт
	
	Если ДиалогПериод <> Неопределено Тогда
		Отчет.Период = ДиалогПериод;	
	КонецЕсли;  	
	
КонецПроцедуры // ОбработкаРедактированияСтандартногоПериодаЗавершение()

// Процедура - обработчик команды "КомандаОбновитьДеревоВыводимыхДанных".
// 
&НаКлиенте
Процедура КомандаОбновитьДеревоВыводимыхДанных(Команда)
	
	ЗаполнитьДеревоВыводимыхДанных();
	бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоВыводимыхДанных, ДеревоВыводимыхДанных.ПолучитьЭлементы());
	  	
КонецПроцедуры // КомандаОбновитьДеревоВыводимыхДанных()

// Процедура - обработчик команды "ФлажкиСнятьВсе".
// 
&НаКлиенте
Процедура ФлажкиСнятьВсе(Команда)
	
	ОбработатьФлаги(0, ДеревоВыводимыхДанных, "Выводить");
	
КонецПроцедуры // ФлажкиСнятьВсе()

// Процедура - обработчик команды "ФлажкиУстановитьВсе".
// 
&НаКлиенте
Процедура ФлажкиУстановитьВсе(Команда)
	
	ОбработатьФлаги(1, ДеревоВыводимыхДанных, "Выводить");
	
КонецПроцедуры // ФлажкиУстановитьВсе()

// Процедура - обработчик команды "ФлажкиИнвертировать".
// 
&НаКлиенте
Процедура ФлажкиИнвертировать(Команда)
	
	ОбработатьФлаги(2, ДеревоВыводимыхДанных, "Выводить");
	
КонецПроцедуры // ФлажкиИнвертировать()

// Процедура - обработчик команды "ОтборыОбновить".
// 
&НаКлиенте
Процедура ОтборыОбновить(Команда)
	
	ЗаполнитьТаблицуОтборов();	
	
КонецПроцедуры // ОтборыОбновить()

// Процедура - обработчик команды "ПараметрыЗаполнить".
// 
&НаКлиенте
Процедура ПараметрыЗаполнить(Команда)
	      	
	Если ТаблицаПараметры.Количество() > 0 Тогда
	
		ОбработкаВП = Новый ОписаниеОповещения("ОбработкаОтветаПараметрыЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Параметры будут перезаполнены. Продолжить?'");     		
		ПоказатьВопрос(ОбработкаВП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Нет); 
	
	КонецЕсли; 
	
КонецПроцедуры // ПараметрыЗаполнить()

// Процедура - завершение обработчика команды "ПараметрыЗаполнить".
// 
&НаКлиенте
Процедура ОбработкаОтветаПараметрыЗаполнитьЗавершение(ОтветНаВопросЗаполненияПараметров, Параметры) Экспорт
	
	Если ОтветНаВопросЗаполненияПараметров = КодВозвратаДиалога.Да Тогда 		
		
		ОбновитьТаблицуПараметров(Истина);
	
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаОтветаПараметрыЗаполнитьЗавершение()

// Процедура - обработчик команды "ПараметрыОбновить".
// 
&НаКлиенте
Процедура ПараметрыОбновить(Команда)
	      	
	ОбновитьТаблицуПараметров(Ложь);
	
КонецПроцедуры // ПараметрыОбновить()

// Процедура - обработчик команды "ОформлениеЗаполнитьТаблицуУровней".
// 
&НаКлиенте
Процедура ОформлениеЗаполнитьТаблицуУровней(Команда)
	
	ЗаполнитьТаблицуУровней();
	
КонецПроцедуры // ОформлениеЗаполнитьТаблицуУровней()

// Процедура - обработчик команды "ОформлениеПоУмолчанию".
// 
&НаКлиенте
Процедура ОформлениеПоУмолчанию(Команда)
	
	ЗаполнитьТаблицуУровнейЦветамиПоУмолчанию(150, 140, 120);
	
КонецПроцедуры // ОформлениеПоУмолчанию()

// Процедура - обработчик команды "ФлажкиОформленияСнятьВсе".
// 
&НаКлиенте
Процедура ФлажкиОформленияСнятьВсе(Команда)
	
	ОбработатьФлаги(0, ТаблицаОформленияУровней, "Включить");
	
КонецПроцедуры // ФлажкиОформленияСнятьВсе()

// Процедура - обработчик команды "ФлажкиОформленияУстановитьВсе".
// 
&НаКлиенте
Процедура ФлажкиОформленияУстановитьВсе(Команда)
	
	ОбработатьФлаги(1, ТаблицаОформленияУровней, "Включить");
	
КонецПроцедуры // ФлажкиОформленияУстановитьВсе()

// Процедура - обработчик команды "ФлажкиОформленияИнвертировать".
// 
&НаКлиенте
Процедура ФлажкиОформленияИнвертировать(Команда)
	
	ОбработатьФлаги(2, ТаблицаОформленияУровней, "Включить");
	
КонецПроцедуры // ФлажкиОформленияИнвертировать()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура определяет значение флага.
// 
// Параметры:
//  ТекущаяСтрока - ТекущаяСтрока.
//  ИмяФлага  	  - Строка.
//  ЗначениеФлага - Число.
//  
// 
&НаКлиенте
Процедура ОпределитьЗначениеФлага(ТекущаяСтрока, ИмяФлага, ЗначениеФлага)

	Если ЗначениеФлага = 0 Тогда
		ТекущаяСтрока[ИмяФлага] = Ложь;
	ИначеЕсли ЗначениеФлага = 1 Тогда
		ТекущаяСтрока[ИмяФлага] = Истина;
	ИначеЕсли ЗначениеФлага = 2 Тогда	
		ТекущаяСтрока[ИмяФлага] = НЕ ТекущаяСтрока[ИмяФлага];
	КонецЕсли; 	
	
КонецПроцедуры // ОпределитьЗначениеФлага()
        
// Процедура управляет флагами в дереве.
// 
// Парметры:
//  ЗначениеФлага - Число (0 - снять флаги, 1 - установить истина, 2 - инвертировать).
//
&НаКлиенте
Процедура ОбработатьФлаги(ЗначениеФлага, ТаблицаДерево, ИмяФлага)
	
	Если ТипЗнч(ТаблицаДерево) = Тип("ДанныеФормыКоллекция") Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаДерево Цикл
				
			ПредыдущееЗначениеФлага = СтрокаТаблицы[ИмяФлага];
			ОпределитьЗначениеФлага(СтрокаТаблицы, ИмяФлага, ЗначениеФлага);
	
		КонецЦикла;       
			
	Иначе	
		
		КореньДерева = ТаблицаДерево.ПолучитьЭлементы();
		
		Для каждого ГруппаДанных Из КореньДерева Цикл
		
			Для каждого СтрокаДерева Из ГруппаДанных.ПолучитьЭлементы() Цикл
				
				ПредыдущееЗначениеФлага = СтрокаДерева[ИмяФлага];
				ОпределитьЗначениеФлага(СтрокаДерева, ИмяФлага, ЗначениеФлага);
		
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли; 	
	
КонецПроцедуры // ОбработатьФлаги()

// Процедура ограничивает описание типов в строке таблица параметров.
// 
// Параметры:
//  Нет
// 
&НаКлиенте
Процедура ОграничитьОписаниеТиповПараметра()

	ТекущиеДанные = Элементы.ТаблицаПараметры.ТекущиеДанные;
	
	Если мТекущийВидПараметра = фКэшЗначений.Перечисления.бит_ВидыПараметровЗапроса.Выражение Тогда
			
		ОписаниеОграничение = фКэшЗначений.ОписаниеТипаСтрока;
		
	Иначе
		
		Если ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда  		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Истина; 		
		Иначе	                                                        		
			Элементы.ТаблицаПараметрыЗначениеПараметра.ВыбиратьТип = Ложь;  		
		КонецЕсли; 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СписокЗначений"));
		Если ЗначениеЗаполнено(ТекущиеДанные.ДоступныеТипы) Тогда
			ОписаниеОграничение = Новый ОписаниеТипов(ТекущиеДанные.ДоступныеТипы, МассивТипов);
		Иначе		
			ОписаниеОграничение = Новый ОписаниеТипов(фКэшЗначений.ОписаниеПроизвольногоТипа, МассивТипов);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Ограничим тип значения
	Элементы.ТаблицаПараметрыЗначениеПараметра.ОграничениеТипа = ОписаниеОграничение;  

КонецПроцедуры // ОграничитьОписаниеТиповПараметра()

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_ОтчетПоСпособамКомпоновкиИсточников;
	
	ЗаполнитьКэшЗначений();
	УстановитьЗначенияПоУмолчанию();
	
	УправлениеВидимостьюДоступностью();
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
	Элементы.ГруппаИнформацииОбОтчете.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
	Элементы.ГруппаИнформацииОбОтчете.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	
КонецПроцедуры

// Процедура заполняет кэш значений, необходимый при работе на клиенте.
// 
&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	                    		
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Отчеты);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Отчет.бит_ОтчетПоСпособамКомпоновкиИсточников");
	            
	фКэшЗначений.Вставить("МассивВыбораДляОтборов", бит_МеханизмПолученияДанных.СформироватьСписокВыбораДляОтборовВОтчете("Массив"));
	               
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	КвСтроки = Новый КвалификаторыСтроки(500);
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТипов, , КвСтроки);
	фКэшЗначений.Вставить("ОписаниеТипаСтрока", ОписаниеТипаСтрока);
	фКэшЗначений.Вставить("ОписаниеПроизвольногоТипа", бит_ОбщегоНазначения.ОписаниеПроизвольногоТипа());
	
		
	// Перечисления
	КэшПеречисления = Новый Структура;
	
	ТекПеречисление = бит_ОбщегоНазначения.КэшироватьЗначенияПеречисления(Перечисления.бит_ВидыПараметровЗапроса);
	КэшПеречисления.Вставить("бит_ВидыПараметровЗапроса", ТекПеречисление);
	
	фКэшЗначений.Вставить("Перечисления", КэшПеречисления);
	
КонецПроцедуры // ЗаполнитьКэшЗначений()

// Процедура управляет видимостью и доступностью элементов формы.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	// Установка видимости и доступности элементов формы в зависимости от типа отчета 
	// - обычный или расшифровка. 
	бит_ОтчетыСервер.УстановитьВидимостьДоступностьЭлементов(Элементы, 
															Параметры.КлючВарианта, 
															Параметры.ПредставлениеВарианта);
		          	
КонецПроцедуры // УправлениеВидимостьюДоступностью()
														
// Процедура - обработчик команды "КомандаПанельНастроек".
// 
// Параметры: 
//  СкрытьПанельПриФормировании - Булево (По умолчанию = Ложь).
//
&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
													 
	Элементы.ГруппаИнформацииОбОтчете.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Процедура заполняет дерево выводимых данных.
// 
// Параметры:
//  ТаблицаВыводимыхДанных  - ТаблицаЗначений (необязательный).
// 
&НаСервере
Процедура ЗаполнитьДеревоВыводимыхДанных(ТаблицаВыводимыхДанных = Неопределено)

	КореньДерева = ДеревоВыводимыхДанных.ПолучитьЭлементы();
    КореньДерева.Очистить();
	Если Не ЗначениеЗаполнено(Отчет.СпособКомпоновки) Тогда
		Возврат;	
	КонецЕсли;
	
	// Обнуление переменной, хранящей количества группировок по колонкам.
	КоличествоГруппировокПоКолонкам = 0;
	
	// Заполнение дерева
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Отчет.СпособКомпоновки);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СпособыКомпоновкиКолонки.ВидКолонки КАК ВидКолонки,
	|	СпособыКомпоновкиКолонки.ИспользоватьВРасчетах,
	|	СпособыКомпоновкиКолонки.ИмяКолонки
	|ИЗ
	|	Справочник.бит_СпособыКомпоновкиИсточниковДанных.КолонкиТаблицы КАК СпособыКомпоновкиКолонки
	|ГДЕ
	|	СпособыКомпоновкиКолонки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпособыКомпоновкиКолонки.НомерСтроки
	|ИТОГИ ПО
	|	ВидКолонки
	|";
	Результат = Запрос.Выполнить();
	
	ВыборкаВерх = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаВерх.Следующий() Цикл
							
		ГруппаДанных = КореньДерева.Добавить();
		ГруппаДанных.Имя 		= ?(ВыборкаВерх.ВидКолонки = "Поле", "Поля", "Ресурсы");
		ГруппаДанных.Синоним    = ГруппаДанных.Имя;
		ГруппаДанных.ЭтоГруппа 	= Истина;
				
		ВеткаДерева = ГруппаДанных.ПолучитьЭлементы();
	
		Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока Выборка.Следующий() Цикл
		
			СтрокаДерева = ВеткаДерева.Добавить();
			СтрокаДерева.Имя 		= Выборка.ИмяКолонки;
			СтрокаДерева.Синоним	= Выборка.ИмяКолонки;
			СтрокаДерева.ВыбиратьТипВывода 	= ?(Выборка.ВидКолонки = "Ресурс", Ложь, Истина);
			СтрокаДерева.ИспользоватьВРасчетах = Выборка.ИспользоватьВРасчетах;
			
			Если ТаблицаВыводимыхДанных = Неопределено Тогда
				
				СтрокаДерева.Выводить 	= Истина;
				СтрокаДерева.ТипВывода = "Поле";
				
			Иначе
				
				Отбор = Новый Структура("ТипПоля, Имя", Выборка.ВидКолонки, Выборка.ИмяКолонки);
				НайденныеСтроки = ТаблицаВыводимыхДанных.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					СтрокаДерева.Выводить 	= Истина;
					СтрокаДерева.ТипВывода = "Поле";
				Иначе
					СтрокаТаблицы = НайденныеСтроки[0];
					СтрокаДерева.Выводить  = СтрокаТаблицы.Выводить;
					СтрокаДерева.ТипВывода = СтрокаТаблицы.ТипВывода;
					Попытка
						СтрокаДерева.Синоним   = СтрокаТаблицы.Синоним;				
					Исключение
						СтрокаДерева.Синоним   = СтрокаДерева.Имя;
					КонецПопытки;
					
				КонецЕсли;
				
				// Поиск групп колонок
				ОтборГруппКолонок = Новый Структура("ТипВывода", "Группировка колонок");
				НайденныеСтрокиГк = ТаблицаВыводимыхДанных.НайтиСтроки(ОтборГруппКолонок);
			    КоличествоГруппировокПоКолонкам = НайденныеСтрокиГк.Количество();
				
			КонецЕсли; 					
				  		
		КонецЦикла;	
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДеревоВыводимыхДанных()

// Процедура заполняет таблицу отборов.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьТаблицуОтборов()

	ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));
	бит_МеханизмПолученияДанных.ЗаполнитьОтборВОтчете(Отчет.СпособКомпоновки, ТаблицаОтборов);
	ЗначениеВДанныеФормы(ТаблицаОтборов, ОтборВОтчете);	

КонецПроцедуры // ЗаполнитьТаблицуОтборов()

// Функция формирует таблицу компоновки.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   ТаблицаЗначений.
// 
&НаСервере
Функция ПолучитьТаблицуКомпоновки()

	СпособКомпоновки = Отчет.СпособКомпоновки;
	
	ПоказыватьИндикатор = Не бит_УправлениеПользователямиСервер.ПолучитьЗначениеПоУмолчанию("НеОтображатьИндикаторКомпоновкиИсточников",
								бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь"));
	ТаблицаОтборов = ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений"));	
	
	ГраницаКон = Новый Граница(КонецДня(Отчет.Период.ДатаОкончания), ВидГраницы.Включая);
	
	// Параметры
	СтруктураПараметров = бит_МеханизмПолученияДанных.ЗаполнитьСтруктуруПараметровИзТаблицы(ТаблицаПараметры);
	СтруктураПоУмолчанию = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаОкончания"
											, Отчет.ВалютаДокумента, 1 , 1, Отчет.Период.ДатаОкончания);
	бит_МеханизмПолученияДанных.ДобавитьОбязательныеПараметрыПроизвольногоОтчета(СтруктураПоУмолчанию, СтруктураПараметров);
	  	
    СтрПар = бит_МеханизмПолученияДанных.КонструкторПараметры_ПолучитьДанныеПоСпособуКомпоновки();
	СтрПар.Параметры                = СтруктураПараметров;
	СтрПар.ОтборВОтчете             = ТаблицаОтборов;
	СтрПар.ПоказыватьИндикатор      = ПоказыватьИндикатор;
	СтрПар.НастройкаПулаПодключений = Отчет.НастройкаПулаПодключений;
	
	ТаблицаРезультат = бит_МеханизмПолученияДанных.ПолучитьДанныеПоИсточникам(СпособКомпоновки
																				,Отчет.Период.ДатаНачала
																				,ГраницаКон
																				,СтрПар);
																			
	бит_МеханизмПолученияДанных.ДополнитьРезультатИВыполнитьРасчет(СпособКомпоновки, ТаблицаРезультат);
	бит_МеханизмПолученияДанных.ДополнитьТаблицуКомпоновкиТекстовымиЭлементами(СпособКомпоновки, ТаблицаРезультат);
	
	ТаблицаРезультат.Сортировать("Кодификатор");
	
	Возврат ТаблицаРезультат;
	
КонецФункции // ПолучитьТаблицуКомпоновки()

// Процедура дополняет таблицу уровней недостающими строками.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьТаблицуУровней()

	КоличествоСтрок   = ТаблицаОформленияУровней.Количество();
	КоличествоУровней = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
	
	Если КоличествоСтрок < КоличествоУровней+1 Тогда
		
		Для НомерУровня = КоличествоСтрок По КоличествоУровней Цикл
			НоваяСтрока = ТаблицаОформленияУровней.Добавить();
			НоваяСтрока.Уровень = НомерУровня;	
			НоваяСтрока.ЦветФона = Новый Цвет(255,255,255);
		КонецЦикла; 
		
	ИначеЕсли КоличествоСтрок > КоличествоУровней+1 Тогда
		                 
		Для НомерУровня = КоличествоУровней+1 По КоличествоСтрок Цикл
			НайденныеСтроки = ТаблицаОформленияУровней.НайтиСтроки(Новый Структура("Уровень", НомерУровня));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ТаблицаОформленияУровней.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;       		

КонецПроцедуры // ЗаполнитьТаблицуУровней()

// Процедура заполняет таблицу уровней по умолчанию.
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура ЗаполнитьТаблицуУровнейЦветамиПоУмолчанию(ЦветR, ЦветG, ЦветB)

	ТаблицаОформленияУровней.Очистить();
	КоличествоУровней = 5;
	
	Для НомерУровня = 0 По КоличествоУровней Цикл
	
		НоваяСтрока = ТаблицаОформленияУровней.Добавить();
		НоваяСтрока.Включить = Истина;
		НоваяСтрока.Уровень  = НомерУровня;	
		НоваяСтрока.ЦветФона = Новый Цвет(ЦветR,ЦветG,ЦветB);
		ЦветR = ?(ЦветR + 30 > 255, 255, ЦветR + 30);
		ЦветG = ?(ЦветG + 30 > 255, 255, ЦветG + 30);
		ЦветB = ?(ЦветB + 30 > 255, 255, ЦветB + 30); 			
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуУровней()

// Процедура выполняет действия, необходимые при изменении реквизита "СпособКомпоновки".
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура СпособКомпоновкиИсточниковДанныхПриИзмененииСервер()

	ТабличныйДокумент.Очистить();
	
	ЗаполнитьТаблицуОтборов();
	
	ЯзыкЧисел = ?(ЗначениеЗаполнено(Отчет.Язык.ЯзыкСтрана), Отчет.Язык.ЯзыкСтрана, "ru");
	ФорматОбласти = "Л=" + ЯзыкЧисел + "; ЧЦ=16; ЧДЦ=3; ЧН=";
	Отчет.ФорматЧисел = ФорматОбласти;	
	
	ЗаполнитьДеревоВыводимыхДанных();
	
	ОбновитьТаблицуПараметров(Истина);

	ЗаполнитьТаблицуСортировки();
	
КонецПроцедуры // СпособКомпоновкиИсточниковДанныхПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидСравнения" табличного поля "ОтборВОтчете"
// табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеВидСравненияПриИзмененииСервер(Ид, мТекущийВидСравнения)
		
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеВидСравненияПриИзменении(ТекущиеДанные, мТекущийВидСравнения);	

КонецПроцедуры // ОтборВОтчетеВидСравненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Значение" табличного поля "ОтборВОтчете".
// 
&НаСервере
Процедура ОтборВОтчетеЗначениеПриИзмененииСервер(Ид)
	
	ТекущиеДанные = ОтборВОтчете.НайтиПоИдентификатору(Ид);
	бит_МеханизмПолученияДанных.ОтборВОтчетеЗначениеПриИзменении(ТекущиеДанные);
		
КонецПроцедуры // ОтборВОтчетеЗначениеПриИзменении()

// Процедура формирует табличный документ для вывода в отдельном окне.
// 
&НаСервере
Процедура СформироватьТабДокДляВыводаВОтдельномОкне(ТабДок)
	
	ТабДок.Вывести(ТабличныйДокумент);
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.СохранятьСвойстваОтображения = Истина;
		
КонецПроцедуры // СформироватьТабДокДляВыводаВОтдельномОкне()

// Процедура выполняет обновление таблицы параметров.
// 
&НаСервере
Процедура ОбновитьТаблицуПараметров(ЭтоЗаполнениеПоУмолчанию)
	
	бит_МеханизмПолученияДанных.ОбновитьТаблицуПараметров(Отчет.СпособКомпоновки, ТаблицаПараметры, ЭтоЗаполнениеПоУмолчанию);
	Если ЭтоЗаполнениеПоУмолчанию Тогда
		бит_МеханизмПолученияДанных.ЗаполнитьТаблицуПараметров(Отчет.СпособКомпоновки, ТаблицаПараметры);
	КонецЕсли;
		
КонецПроцедуры // ОбновитьТаблицуПараметров()

// Процедура выполняет действия, неоходимые при изменении вида параметра.
// 
// Параметры:
//  ИД  				 - Число.
//  мТекущийВидПараметра - ПеречислениеСсылка.бит_ВидыПараметровЗапроса.
// 
&НаСервере
Процедура ИзменитьВидПараметра(ИД, мТекущийВидПараметра)

	ТекущиеДанные = ТаблицаПараметры.НайтиПоИдентификатору(ИД);
	бит_МеханизмПолученияДанных.ИзменениеВидаПараметра(ТекущиеДанные, мТекущийВидПараметра);

КонецПроцедуры // ИзменитьВидПараметра()

// Функция получает наименование на языке отчета или наименование по умолчанию.
// 
// Параметры:
//  НаименованиеОбычное  	  - Строка.
//  НаименованиеМногоязычное  - Строка.
//  
// Возвращаемое значение:
//   Строка - Наименование.
// 
&НаСервере
Функция ПолучитьНаименование(СсылкаНаОбъект)

	ЕстьНаимПолное = СсылкаНаОбъект.Метаданные().Реквизиты.Найти("НаименованиеПолное") <> Неопределено;
	ИмяНаименованиеПолное = ?(ЕстьНаимПолное, "НаименованиеПолное", "Наименование");
	
	НаименованиеОбычное 	 = СсылкаНаОбъект[ИмяНаименованиеПолное];
	НаименованиеМногоязычное = СсылкаНаОбъект.НаименованиеМногоязычное;
	
	Если ЗначениеЗаполнено(Отчет.Язык) И ЗначениеЗаполнено(НаименованиеМногоязычное) Тогда
		
		Наименование = НСтр(НаименованиеМногоязычное, Отчет.Язык.КодЯзыка); 
		
		Если Не ЗначениеЗаполнено(Наименование) Тогда
		
			Наименование = НаименованиеОбычное; 
			    	
		КонецЕсли;
	
	Иначе
	
		Наименование = НаименованиеОбычное;

	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции // ПолучитьНаименование()

// Процедура приводит значение к формату.
// 
// Параметры:
//  ЗначениеПараметра.
// 
&НаСервере
Процедура ИзменитьЗначениеПоФормату(ЗначениеПараметра)

	Если ТипЗнч(ЗначениеПараметра) = Тип("Дата") Тогда
		ЗначениеПараметра = Формат(ЗначениеПараметра, СокрЛП(Отчет.ФорматДаты));
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеПоФормату()

// Функция формирует дополнительные массивы и строки по дереву выводимых данных.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//   Структура
// 
&НаСервере
Функция ПолучитьСтруктуруВыводимыхДанных()
	
	МассивПолей 			= Новый Массив;
	МассивРесурсов 			= Новый Массив;
	МассивГруппСтрок  		= Новый Массив;
	МассивГруппКолонок		= Новый Массив;
	СтрокаПолей  			= "";
	СтрокаПолейГруппСтрок  	= "";
	СтрокаРесурсов  		= "";
	
	ПредставленияРесурсов = Новый Соответствие;
	ПредставленияПолей    = Новый Соответствие;
	
	Для каждого СтрокаГруппа Из ДеревоВыводимыхДанных.ПолучитьЭлементы() Цикл
		
		Для каждого СтрокаДерева Из СтрокаГруппа.ПолучитьЭлементы() Цикл
			
			Если СтрокаДерева.Выводить Тогда
								
				Если СтрокаГруппа.Имя = "Поля" Тогда
					
					Если СтрокаДерева.ТипВывода = "Поле" Тогда
						МассивПолей.Добавить(СтрокаДерева.Имя);
						СтрокаПолей = СтрокаПолей + ", " + СтрокаДерева.Имя;
					ИначеЕсли СтрокаДерева.ТипВывода = "Группировка строк" Тогда					
						МассивГруппСтрок.Добавить(СтрокаДерева.Имя);
						СтрокаПолейГруппСтрок = СтрокаПолейГруппСтрок + ", " + СтрокаДерева.Имя;
					ИначеЕсли СтрокаДерева.ТипВывода = "Группировка колонок" Тогда					
						МассивГруппКолонок.Добавить(СтрокаДерева.Имя);
						СтрокаПолейГруппСтрок = СтрокаПолейГруппСтрок + ", " + СтрокаДерева.Имя;
					КонецЕсли;
					ПредставленияПолей.Вставить(СтрокаДерева.Имя, СтрокаДерева.Синоним);
					
				ИначеЕсли СтрокаГруппа.Имя = "Ресурсы" Тогда
					
					МассивРесурсов.Добавить(СтрокаДерева.Имя);
					СтрокаРесурсов = ?(СтрокаРесурсов = "", СтрокаРесурсов, СтрокаРесурсов + ", ") + СтрокаДерева.Имя;
					ПредставленияРесурсов.Вставить(СтрокаДерева.Имя, СтрокаДерева.Синоним);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	Результат = Новый Структура("МассивПолей, МассивРесурсов, МассивГруппСтрок, МассивГруппКолонок, 
								|СтрокаПолей, СтрокаПолейГруппСтрок, СтрокаРесурсов, 
								|ПредставленияРесурсов, ПредставленияПолей",
								 МассивПолей, МассивРесурсов, МассивГруппСтрок, МассивГруппКолонок, 
								 СтрокаПолей, СтрокаПолейГруппСтрок, СтрокаРесурсов, 
								 ПредставленияРесурсов, ПредставленияПолей);
	Возврат Результат;
	
КонецФункции // ПолучитьСтруктуруВыводимыхДанных()

// Процедура получает области макета.
// 
// Параметры:
//  Нет
// 
// Возвращаемое значение:
//   Структура
// 
&НаСервере
Функция ПолучитьОбластиМакета()

	Макет = Отчеты.бит_ОтчетПоСпособамКомпоновкиИсточников.ПолучитьМакет("Макет");
	
	ФорматОбласти = СокрЛП(Отчет.ФорматЧисел);
	
	ОбластьЗаголовок   = Макет.ПолучитьОбласть("Заголовок");	
	ОбластьТекст 	   = Макет.ПолучитьОбласть("Текст");
	
	ОбластьРамкаСправа = Макет.ПолучитьОбласть("Шапка | РамкаСправа");
		
	ОбластьШапКдфктр = Макет.ПолучитьОбласть("Шапка | КолонкаКодификатор");
	ОбластьШапЭлДннх = Макет.ПолучитьОбласть("Шапка | КолонкаЭлементДанных");
	ОбластьШапДанные = Макет.ПолучитьОбласть("Шапка | КолонкаЗначенияДанных");
	                   
	ОбластьШапГрРср1 = Макет.ПолучитьОбласть("Шапка | КолонкаГруппыРесурсов1");
	ОбластьШапГрРср2 = Макет.ПолучитьОбласть("Шапка | КолонкаГруппыРесурсов2");
	
	ОбластьРамкаСправа_ГрК = Макет.ПолучитьОбласть("ШапкаГруппа | РамкаСправа");
	
	ОбластьШапКдфктр_ГрК = Макет.ПолучитьОбласть("ШапкаГруппа | КолонкаКодификатор");
	ОбластьШапЭлДннх_ГрК = Макет.ПолучитьОбласть("ШапкаГруппа | КолонкаЭлементДанных");
	ОбластьШапДанные_ГрК = Макет.ПолучитьОбласть("ШапкаГруппа | КолонкаЗначенияДанных");
	
	ОбластьШапГрИмя1_ГрК = Макет.ПолучитьОбласть("ШапкаГруппа | КолонкаГруппыРесурсов1");
	ОбластьШапГрИмя2_ГрК = Макет.ПолучитьОбласть("ШапкаГруппа | КолонкаГруппыРесурсов2");
	   	
  	ОбластьСтрКдфктр = Макет.ПолучитьОбласть("Строка | КолонкаКодификатор");
	ОбластьСтрЭлДннх = Макет.ПолучитьОбласть("Строка | КолонкаЭлементДанных");
	ОбластьСтрДанные = Макет.ПолучитьОбласть("Строка | КолонкаЗначенияДанных");
		                                 	                                    	
	ОбластьСтрДанные.ВыделенныеОбласти[0].Формат = ФорматОбласти;
	
	Если Отчет.ШиринаКолонкиРесурсов > 0 Тогда
	
		ОбластьШапГрРср1.ТекущаяОбласть.ШиринаКолонки = Отчет.ШиринаКолонкиРесурсов;
		ОбластьШапГрРср2.ТекущаяОбласть.ШиринаКолонки = Отчет.ШиринаКолонкиРесурсов;
		ОбластьШапГрИмя1_ГрК.ТекущаяОбласть.ШиринаКолонки = Отчет.ШиринаКолонкиРесурсов;
		ОбластьШапГрИмя2_ГрК.ТекущаяОбласть.ШиринаКолонки = Отчет.ШиринаКолонкиРесурсов;
	
	КонецЕсли;
	
	СтруктураОбластей = Новый Структура("ОбластьЗаголовок, ОбластьТекст, ОбластьРамкаСправа, ОбластьРамкаСправа_ГрК, 
										|ОбластьШапКдфктр, ОбластьШапЭлДннх, ОбластьШапДанные,
										|ОбластьШапКдфктр_ГрК, ОбластьШапЭлДннх_ГрК, ОбластьШапДанные_ГрК, 
										|ОбластьШапГрРср1, ОбластьШапГрРср2, 
										|ОбластьШапГрИмя1_ГрК, ОбластьШапГрИмя2_ГрК,
										|ОбластьСтрКдфктр, ОбластьСтрЭлДннх, ОбластьСтрДанные", 
										 ОбластьЗаголовок, ОбластьТекст, ОбластьРамкаСправа, ОбластьРамкаСправа_ГрК,
										 ОбластьШапКдфктр, ОбластьШапЭлДннх, ОбластьШапДанные,
										 ОбластьШапКдфктр_ГрК, ОбластьШапЭлДннх_ГрК, ОбластьШапДанные_ГрК, 
										 ОбластьШапГрРср1, ОбластьШапГрРср2, 
										 ОбластьШапГрИмя1_ГрК, ОбластьШапГрИмя2_ГрК, 
										 ОбластьСтрКдфктр, ОбластьСтрЭлДннх, ОбластьСтрДанные);

	Возврат СтруктураОбластей;
	
КонецФункции // ПолучитьОбластиМакета()

// Функция формирует массив имен групп колонок.
// 
// Параметры:
//  СтруктураДанных - Структура.
//  
// Возвращаемое значение:
//   Результат выполнения запроса.
// 
&НаСервере
Функция ПолучитьСтруктуруМассивовИменГруппКолонок(ТаблицаКомпоновки, СтруктураДанных)
		
	СтруктураГруппКолонок = Новый Структура;
	
	МассивГруппКолонок 	= СтруктураДанных.МассивГруппКолонок;
	
	Если МассивГруппКолонок.Количество() <> 0 Тогда
		
		Для каждого ИмяГруппировки Из МассивГруппКолонок Цикл
			
			МассивИменГруппКолонок = Новый Массив;
			
			СтрокаВыбораПолей  = " 	ТабКомп." + ИмяГруппировки + " КАК ИмяГруппы,
			|	ТабКомп.ВидГруппы КАК ВидГруппы";
			
			ВидыГрупп = Новый Массив;
			ВидыГрупп.Добавить(Перечисления.бит_ВидыГруппДанных.Группировка);
			ВидыГрупп.Добавить(Перечисления.бит_ВидыГруппДанных.Текст);
						
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаКомпоновки", ТаблицаКомпоновки);
			Запрос.УстановитьПараметр("ВидыГрупп", ВидыГрупп);
			Запрос.Текст = "
			|ВЫБРАТЬ
			|" + СтрокаВыбораПолей + "
			|ПОМЕСТИТЬ ВремТаб
			|ИЗ 
			|	&ТаблицаКомпоновки КАК ТабКомп
			|;
		    |
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВремТаб.ИмяГруппы
			|ИЗ
			|	ВремТаб КАК ВремТаб
			|ГДЕ
			|	ВремТаб.ВидГруппы НЕ В(&ВидыГрупп)
			|
			|;
		    |
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВремТаб
			|
			|";
			Результат = Запрос.Выполнить();
		    Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ИмяГруппы = Выборка.ИмяГруппы;
				МассивИменГруппКолонок.Добавить(ИмяГруппы);
			КонецЦикла; 
			
			СтруктураГруппКолонок.Вставить(ИмяГруппировки, МассивИменГруппКолонок);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат СтруктураГруппКолонок;
	
КонецФункции // ПолучитьСтруктуруМассивовИменГруппКолонок()

// Процедура выводит левую часть шапки.
// 
// Параметры:
//  СтруктураДанных   - Структура.
//  СтруктураОбластей - Структура.
//  ТабличныйДокумент.
//  ВыводитьДанные    - Булево (По умолчанию - Истина).
// 
&НаСервере
Процедура ВывестиЛевуюЧастьШапки(СтруктураДанных, СтруктураОбластей, ТабличныйДокумент, ВыводитьДанные = Истина, ПредставлениеГруппы = "")

	ВыводГруппСтрокВОднойКолонке = Отчет.ВариантГруппировкиСтрок = "В одной колонке";
	
	МассивПолей 		   = СтруктураДанных.МассивПолей;
	МассивГруппСтрок 	   = СтруктураДанных.МассивГруппСтрок;
	ПредставленияПолей     = СтруктураДанных.ПредставленияПолей;
	
	КоличествоПолей 	 = МассивПолей.Количество();
	КоличествоГруппСтрок = МассивГруппСтрок.Количество();
	
	// Области
	Если ВыводитьДанные Тогда
		ОбластьШапКдфктр      = СтруктураОбластей.ОбластьШапКдфктр;  	
		ОбластьШапЭлДннх      = СтруктураОбластей.ОбластьШапЭлДннх;
		ОбластьШапДанные      = СтруктураОбластей.ОбластьШапДанные;
	Иначе
		ОбластьШапКдфктр      = СтруктураОбластей.ОбластьШапКдфктр_ГрК;  	
		ОбластьШапЭлДннх      = СтруктураОбластей.ОбластьШапЭлДннх_ГрК;
		ОбластьШапДанные      = СтруктураОбластей.ОбластьШапДанные_ГрК;
	КонецЕсли; 
	
	// Заполнение представления области элементов данных
	Если ВыводитьДанные Тогда	
		Если ВыводГруппСтрокВОднойКолонке Тогда
			ИменаГруппСтрок = "";
			Для каждого Элемент Из МассивГруппСтрок Цикл			
				ИменаГруппСтрок = ИменаГруппСтрок + "/ " + ПредставленияПолей[Элемент];
				ОбластьШапЭлДннх.Параметры.ИменаГруппСтрок = ИменаГруппСтрок;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если КоличествоПолей = 0 И (ВыводГруппСтрокВОднойКолонке ИЛИ КоличествоГруппСтрок = 0) Тогда
			// Вывод представления группировки колонок
			ОбластьШапЭлДннх.Параметры.ИмяГруппы = ПредставлениеГруппы;
		Иначе
			ОбластьШапЭлДннх.Параметры.ИмяГруппы = "";
		КонецЕсли;  		
	КонецЕсли;

	// Вывод кодификаторов и представления элементов данных
	Если Отчет.ВыводитьКодификаторы Тогда
		ТабличныйДокумент.Вывести(ОбластьШапКдфктр);
		ТабличныйДокумент.Присоединить(ОбластьШапЭлДннх);
	Иначе	
	    ТабличныйДокумент.Вывести(ОбластьШапЭлДннх);
	КонецЕсли;
	
	// Вывод шапки - колонки групп
	Сч = 1;
	Если НЕ ВыводГруппСтрокВОднойКолонке Тогда
		Для каждого Элемент Из МассивГруппСтрок Цикл
			Если ВыводитьДанные Тогда 					
				ОбластьШапДанные.Параметры.ИмяКолонки = ПредставленияПолей[Элемент];
			Иначе
				Если КоличествоПолей = 0 И Сч = КоличествоГруппСтрок Тогда
					// Вывод представления группировки колонок
					ОбластьШапДанные.Параметры.ИмяГруппы = ПредставлениеГруппы;
				Иначе
					ОбластьШапДанные.Параметры.ИмяГруппы = "";
				КонецЕсли;	
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьШапДанные);
			Сч = Сч + 1;
		КонецЦикла;		
	КонецЕсли;

	// Вывод шапки полей
	Сч = 1;
	Для каждого Элемент Из МассивПолей Цикл
		Если ВыводитьДанные Тогда
			ОбластьШапДанные.Параметры.ИмяКолонки = ПредставленияПолей[Элемент];
		Иначе
			Если Сч = КоличествоПолей Тогда
				// Вывод представления группировки колонок
				ОбластьШапДанные.Параметры.ИмяГруппы = ПредставлениеГруппы;
			Иначе
				ОбластьШапДанные.Параметры.ИмяГруппы = "";
			КонецЕсли;	
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьШапДанные);
		Сч = Сч + 1;
	КонецЦикла;

КонецПроцедуры // ВывестиЛевуюЧастьШапки()

// Процедура выводит заголовоки шапку в табличный документ.
// 
// Параметры:
//  МассивИменГруппКолонок 	- Массив.
//  СтруктураДанных  		- Структура.
//  СтруктураОбластей   	- Структура.
// 
&НаСервере
Процедура ВывестиЗаголовокШапку(СтруктураДанных, СтруктураОбластей)

	ОбластьЗаголовок      = СтруктураОбластей.ОбластьЗаголовок;
	ОбластьШапКдфктр      = СтруктураОбластей.ОбластьШапКдфктр;
	ОбластьШапЭлДннх      = СтруктураОбластей.ОбластьШапЭлДннх;
	ОбластьШапДанные      = СтруктураОбластей.ОбластьШапДанные;
	ОбластьШапГрРср1      = СтруктураОбластей.ОбластьШапГрРср1;
	ОбластьШапГрРср2      = СтруктураОбластей.ОбластьШапГрРср2;
	ОбластьРамкаСправа    = СтруктураОбластей.ОбластьРамкаСправа;
	
	МассивПолей 		   = СтруктураДанных.МассивПолей;
	МассивРесурсов  	   = СтруктураДанных.МассивРесурсов;
	МассивГруппСтрок 	   = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок 	   = СтруктураДанных.МассивГруппКолонок;
	СтруктураГруппКолонок  = СтруктураДанных.СтруктураГруппКолонок;
	ПредставленияРесурсов  = СтруктураДанных.ПредставленияРесурсов;
	ПредставленияПолей     = СтруктураДанных.ПредставленияПолей;
	
	// Количество группировок по колонкам
	КоличествоГруппКолонок = МассивГруппКолонок.Количество();
	
	// Вывод заголовка	 
	ОбластьЗаголовок.Параметры.Заголовок = ПолучитьНаименование(Отчет.СпособКомпоновки);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Если МассивГруппКолонок.Количество() = 0 Тогда
		
		ВывестиЛевуюЧастьШапки(СтруктураДанных, СтруктураОбластей, ТабличныйДокумент);
		Для каждого Элемент Из МассивРесурсов Цикл
			ОбластьШапДанные.Параметры.ИмяКолонки = ПредставленияРесурсов[Элемент];
			ТабличныйДокумент.Присоединить(ОбластьШапДанные);
		КонецЦикла;
		
	Иначе
		
		// Дерево - структура группировок по колонкам
		ДеревоКолонок = СоздатьДеревоКолонок(МассивГруппКолонок, СтруктураГруппКолонок);
		Сч = 0;		
		ВывестиЗаголовокШапку_ОбходГруппировокКолонок(СтруктураДанных, СтруктураОбластей, Сч);
		
	КонецЕсли;
	
	// Рамка завершающая
	ТабличныйДокумент.Присоединить(ОбластьРамкаСправа);

КонецПроцедуры // ВывестиЗаголовокШапку()

// Процедура выводит область заголовка по группам колонок.
// 
// Параметры:
//  СтруктураДанных      - Структура.
//  СтруктураОбластей    - Структура.
//  Сч 				     - Число.
//  ВыводитьСНовойСтроки - Булево (По умолчанию = Истина).
// 
&НаСервере
Процедура ВывестиЗаголовокШапку_ОбходГруппировокКолонок(СтруктураДанных, СтруктураОбластей, Сч, ВыводитьСНовойСтроки = Истина)

	МассивРесурсов  	   = СтруктураДанных.МассивРесурсов;
	МассивГруппСтрок 	   = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок 	   = СтруктураДанных.МассивГруппКолонок;
	СтруктураГруппКолонок  = СтруктураДанных.СтруктураГруппКолонок;
	ПредставленияРесурсов  = СтруктураДанных.ПредставленияРесурсов;
	ПредставленияПолей	   = СтруктураДанных.ПредставленияПолей;
	
	ЛинияПустая   = СтруктураДанных.ЛинияПустая;
	ЛинияСплошная = СтруктураДанных.ЛинияСплошная;
	
	ОбластьШапГрРср1 	   = СтруктураОбластей.ОбластьШапГрРср1;
	ОбластьШапГрРср2 	   = СтруктураОбластей.ОбластьШапГрРср2;
	ОбластьШапГрИмя1_ГрК   = СтруктураОбластей.ОбластьШапГрИмя1_ГрК;
	ОбластьШапГрИмя2_ГрК   = СтруктураОбластей.ОбластьШапГрИмя2_ГрК;
	ОбластьРамкаСправа_ГрК = СтруктураОбластей.ОбластьРамкаСправа_ГрК;
	
	Если МассивРесурсов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СчГК = 1;
	
	Для каждого ИмяГруппы Из МассивГруппКолонок Цикл	
		 	
		ВыводитьСНовойСтроки = Истина;
		
		КоличествоВерхнихГрупп = 1;
		Для j = 0 По СчГК - 2 Цикл
			МИГК = СтруктураГруппКолонок[МассивГруппКолонок[j]];
			КоличествоВерхнихГрупп = КоличествоВерхнихГрупп * МИГК.Количество();				
		КонецЦикла;
		
		Для СчВерхГр = 1 По КоличествоВерхнихГрупп Цикл
				
			МассивИменГруппКолонок = СтруктураГруппКолонок[ИмяГруппы];	
			Для каждого ЭлИмя Из МассивИменГруппКолонок Цикл
                
                Если ТипЗнч(ЭлИмя) = Тип("Дата") Тогда
                    ИмяКолонки = ЭлИмя;
                    ИзменитьЗначениеПоФормату(ИмяКолонки);
                Иначе	
                    ИмяКолонки = Строка(ЭлИмя);
                КонецЕсли;				
				
				ВыводитьГруппу = Истина;
						
				Если ВыводитьСНовойСтроки Тогда 
					// Вывод левой части шапки (кодификаторы, элементы данных...)
					ПредставлениеГруппы = ПредставленияПолей.Получить(ИмяГруппы) + ":";
					ВывестиЛевуюЧастьШапки(СтруктураДанных, СтруктураОбластей, ТабличныйДокумент, Ложь, ПредставлениеГруппы);
				    ВыводитьСНовойСтроки = Ложь;  					
				КонецЕсли;
					
				// Вывод верхних группировок
				ОбластьШапГрИмя1_ГрК.Параметры.ИмяГруппы = ИмяКолонки;
				ТабличныйДокумент.Присоединить(ОбластьШапГрИмя1_ГрК);
				
				// Вывод пустых колонок
				КоличествоПустых = МассивРесурсов.Количество();
				Для j = СчГК По МассивГруппКолонок.Количество() - 1 Цикл
					МИГК =  СтруктураГруппКолонок[МассивГруппКолонок[j]];
					КоличествоПустых = ?(КоличествоПустых = 0, МИГК.Количество(), КоличествоПустых * МИГК.Количество());				
				КонецЦикла;
				Если КоличествоПустых <> 0 Тогда
					Для j = 2 По КоличествоПустых Цикл
				    	ТабличныйДокумент.Присоединить(ОбластьШапГрИмя2_ГрК);				
					КонецЦикла;
				КонецЕсли;
								
			КонецЦикла;
			
			Если СчВерхГр = КоличествоВерхнихГрупп Тогда
				
				// Шапка над итогами для верхней группировки
				
				ОбластьШапГрИмя1_ГрК.ТекущаяОбласть.ГраницаСнизу  = ЛинияПустая;
				ОбластьШапГрИмя2_ГрК.ТекущаяОбласть.ГраницаСнизу  = ЛинияПустая; 				
				
				Если Отчет.ВыводитьИтогиПоГруппировкамКолонок Тогда
					КоличествоПустых = МассивРесурсов.Количество();
					Если КоличествоПустых > 0 Тогда 
						Если СчГК = 1 Тогда
							ОбластьШапГрИмя1_ГрК.Параметры.ИмяГруппы = "Итоги";
						Иначе	
							ОбластьШапГрИмя1_ГрК.ТекущаяОбласть.ГраницаСверху = ЛинияПустая;
							ОбластьШапГрИмя2_ГрК.ТекущаяОбласть.ГраницаСверху = ЛинияПустая;
						    ОбластьШапГрИмя1_ГрК.Параметры.ИмяГруппы = "";
						КонецЕсли;    				
						ТабличныйДокумент.Присоединить(ОбластьШапГрИмя1_ГрК);
						Для j = 1 По КоличествоПустых - 1 Цикл
					    	ТабличныйДокумент.Присоединить(ОбластьШапГрИмя2_ГрК);				
						КонецЦикла;
						ТабличныйДокумент.Присоединить(ОбластьРамкаСправа_ГрК);
					КонецЕсли;   				
				Иначе
					ТабличныйДокумент.Присоединить(ОбластьРамкаСправа_ГрК);	
				КонецЕсли; 	
				
				// Вернуть в исходное
				ОбластьШапГрИмя1_ГрК.ТекущаяОбласть.ГраницаСнизу  = ЛинияСплошная;
				ОбластьШапГрИмя2_ГрК.ТекущаяОбласть.ГраницаСнизу  = ЛинияСплошная;
				ОбластьШапГрИмя1_ГрК.ТекущаяОбласть.ГраницаСверху = ЛинияСплошная;
				ОбластьШапГрИмя2_ГрК.ТекущаяОбласть.ГраницаСверху = ЛинияСплошная;
				
			КонецЕсли;
						
		КонецЦикла;
		
		СчГК = СчГК + 1;
		
	КонецЦикла;
							
	// Вывод левой части шапки (кодификаторы, элементы данных...)
	ВывестиЛевуюЧастьШапки(СтруктураДанных, СтруктураОбластей, ТабличныйДокумент);
	
	ВыводитьСНовойСтроки = Истина;
			
	// Количество групп колонок
	КоличествоГрупп = 0;
	Для j = 0 По МассивГруппКолонок.Количество()-1 Цикл
		МИГК = СтруктураГруппКолонок[МассивГруппКолонок[j]];
		КоличествоГрупп = ?(КоличествоГрупп = 0, МИГК.Количество(), КоличествоГрупп * МИГК.Количество());				
	КонецЦикла;
	Если Отчет.ВыводитьИтогиПоГруппировкамКолонок Тогда
		КоличествоГрупп = КоличествоГрупп + 1;
	КонецЕсли;
		
	Для j = 1 По КоличествоГрупп Цикл 
		
		ВыводитьГруппу = Истина;
						
		Для каждого Элемент Из МассивРесурсов Цикл
			
			Если ВыводитьГруппу Тогда
				ОбластьШапГрРср1.Параметры.ИмяРесурса = ПредставленияРесурсов[Элемент];
				ТабличныйДокумент.Присоединить(ОбластьШапГрРср1);
				ВыводитьГруппу = Ложь;
			Иначе
				ОбластьШапГрРср2.Параметры.ИмяРесурса = ПредставленияРесурсов[Элемент];
				ТабличныйДокумент.Присоединить(ОбластьШапГрРср2);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиЗаголовокШапку_ОбходГруппировокКолонок()

// Функция формирует структуру с основными данными для формирования отчета.
// 
// Параметры:
//  ТаблицаКомпоновки - ТаблицаЗначений.
//  СтруктураДанных   - Структура.
//  
// Возвращаемое значение:
//   Тип.Вид   - описание.
// 
&НаСервере
Функция ПолучитьРезультатыЗапросов(ТаблицаКомпоновки, СтруктураДанных)

	СтруктураРезультат = Новый Структура("РезультатОсновногоЗапроса, РезультатИтоги");
	
	МассивПолей 		= СтруктураДанных.МассивПолей;
	МассивРесурсов  	= СтруктураДанных.МассивРесурсов;
	МассивГруппСтрок 	= СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок 	= СтруктураДанных.МассивГруппКолонок;
	
	ВспомогательнаяТаблица = СтруктураДанных.ВспомогательнаяТаблица;
	
	КоличествоГруппСтрок = МассивГруппСтрок.Количество();
	ЕстьГруппировки = КоличествоГруппСтрок <> 0;
	
	СтрокаВыбораПолей  = "";
	СтрокаГруппировки  = "";
	СтрокаСуммИтогов   = "";
	СтрокаПростыхПолей = "";
	СтрокаСгруппироватьПо = "";
	
	СтрокаВыбораПолей_ИГ  		  = "";
	СтрокаВыбораПолейИзВремТаб_ИГ = "";
	СтрокаСгруппироватьПо_ИГ  	  = "";

	
	//////////////////////////////////////////////////////////////
	// Строки для формирования запросов
	
	Для каждого Элемент Из МассивГруппСтрок Цикл
		СтрокаВыбораПолей = СтрокаВыбораПолей + Символы.ПС + " 	ТабКомп." + Элемент + " КАК " + Элемент + ",";
		СтрокаГруппировки = СтрокаГруппировки + "," + Символы.ПС + "	ВремТаб." + Элемент;
	КонецЦикла;
	
	СтрокаСгруппироватьПо = СтрокаСгруппироватьПо + СтрокаГруппировки;
	
	Для каждого Элемент Из МассивПолей Цикл
		СтрокаВыбораПолей = СтрокаВыбораПолей + Символы.ПС + " 	ТабКомп." + Элемент + " КАК " + Элемент + ",";
		СтрокаСгруппироватьПо = СтрокаСгруппироватьПо + "," + Символы.ПС + "	ВремТаб." + Элемент;
	КонецЦикла;
	
	Для каждого Элемент Из МассивГруппКолонок Цикл
		СтрокаВыбораПолей = СтрокаВыбораПолей + Символы.ПС + " 	ТабКомп." + Элемент + " КАК " + Элемент + ",";
		СтрокаСгруппироватьПо = СтрокаСгруппироватьПо + "," + Символы.ПС + "	ВремТаб." + Элемент;
		СтрокаГруппировки = СтрокаГруппировки + "," + Символы.ПС + "	ВремТаб." + Элемент;
		// Для запроса по итогам групп:
		СтрокаВыбораПолей_ИГ = СтрокаВыбораПолей_ИГ + Символы.ПС + " 	ТабКомп." + Элемент + " КАК " + Элемент + ",";
		СтрокаСгруппироватьПо_ИГ = СтрокаСгруппироватьПо_ИГ + "," + Символы.ПС + "	ВремТаб." + Элемент;
	КонецЦикла;
               	
	СтрокаВыбораПолейИзВремТаб = СтрЗаменить(СтрокаВыбораПолей, "ТабКомп", "ВремТаб");
	// Для запроса по итогам групп:
	СтрокаВыбораПолейИзВремТаб_ИГ = СтрЗаменить(СтрокаВыбораПолей_ИГ, "ТабКомп", "ВремТаб");
		
	Для каждого Элемент Из МассивРесурсов Цикл
		СтрокаВыбораПолей = СтрокаВыбораПолей  + Символы.ПС + "	ТабКомп." + Элемент + " КАК " + Элемент + ",";
		СтрокаВыбораПолейИзВремТаб = СтрокаВыбораПолейИзВремТаб  + Символы.ПС + "	СУММА(ВремТаб." + Элемент + ") КАК " + Элемент + ",";
		СтрокаСуммИтогов = СтрокаСуммИтогов + Символы.ПС + ", СУММА(" + Элемент + ") ";
		// Для запроса по итогам групп:
		СтрокаВыбораПолей_ИГ = СтрокаВыбораПолей_ИГ  + Символы.ПС + "	ТабКомп." + Элемент + " КАК " + Элемент + ",";
		СтрокаВыбораПолейИзВремТаб_ИГ = СтрокаВыбораПолейИзВремТаб_ИГ  + Символы.ПС + "	СУММА(ВремТаб." + Элемент + ") КАК " + Элемент + ",";
	КонецЦикла;

	Если ТаблицаСортировки.Количество() = 0 Тогда
		СтрокаУпорядочивания = "";
	Иначе
		СтрокаУпорядочивания = " УПОРЯДОЧИТЬ ПО ";
		Для каждого СтрТабл Из ТаблицаСортировки Цикл
			ИмяПоля = СтрТабл.Имя;
			СтрокаУпорядочивания = СтрокаУпорядочивания + "
								|	ВремТаб." + ИмяПоля + ",";								      
			Если ИмяПоля <> "Кодификатор" И МассивПолей.Найти(ИмяПоля) = Неопределено И МассивГруппСтрок.Найти(ИмяПоля) = Неопределено И МассивГруппКолонок.Найти(ИмяПоля) = Неопределено Тогда		
				СтрокаВыбораПолей = СтрокаВыбораПолей + Символы.ПС + " 	ТабКомп." + ИмяПоля + " КАК " + ИмяПоля + ",";
				СтрокаСгруппироватьПо = СтрокаСгруппироватьПо + "," + Символы.ПС + "	ВремТаб." + ИмяПоля;
			КонецЕсли;
		КонецЦикла;
		СтрокаУпорядочивания = Лев(СтрокаУпорядочивания, СтрДлина(СтрокаУпорядочивания)-1);
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////
	// Основной запрос
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКомпоновки", ТаблицаКомпоновки);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	" + СтрокаВыбораПолей + "
	|	ВЫРАЗИТЬ(ТабКомп.Кодификатор КАК СТРОКА(20)) КАК Кодификатор,
	|	ТабКомп.ВидГруппы,
	|	ТабКомп.ГруппаЭлементДанных,
	|	ТабКомп.ЭлементДанных
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ 
	|	&ТаблицаКомпоновки КАК ТабКомп
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	" + СтрокаВыбораПолейИзВремТаб + "
	|	ВремТаб.Кодификатор КАК Кодификатор,
	|	ВремТаб.ВидГруппы,
	|	ВремТаб.ГруппаЭлементДанных,
	|	ВремТаб.ЭлементДанных
	|ИЗ
	|	ВремТаб КАК ВремТаб
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремТаб.Кодификатор,
	|	ВремТаб.ГруппаЭлементДанных,
	|	ВремТаб.ЭлементДанных,
	|	ВремТаб.ВидГруппы
    |	" + СтрокаСгруппироватьПо + "
	|
	|   " + СтрокаУпорядочивания + "
	|
	|ИТОГИ
	|	МИНИМУМ(Кодификатор),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидГруппы)
	|	" + СтрокаСуммИтогов + "
	|ПО
	|	ЭлементДанных ИЕРАРХИЯ
	|	" + СтрокаГруппировки + "
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаб
	|
	|";
	РезультатОсновногоЗапроса = Запрос.Выполнить();

	
	//////////////////////////////////////////////////////////////
	// Запрос для получения итогов по группам элементов данных.
	РезультатИтоги = Неопределено;
	Если ЗначениеЗаполнено(Отчет.СпособКомпоновки) И МассивГруппКолонок.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", Отчет.СпособКомпоновки);
		Запрос.УстановитьПараметр("ВидГруппы", Перечисления.бит_ВидыГруппДанных.Группировка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бит_ЭлементыДанных.ВидГруппы
		|ИЗ
		|	Справочник.бит_ЭлементыДанных КАК бит_ЭлементыДанных
		|ГДЕ
		|	бит_ЭлементыДанных.Владелец = &Владелец
		|	И бит_ЭлементыДанных.ВидГруппы = &ВидГруппы
		|";
		РезультатПроверки = Запрос.Выполнить();
		
		Если Не РезультатПроверки.Пустой() Тогда
		
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТаблицаКомпоновки", ТаблицаКомпоновки);
			Запрос.УстановитьПараметр("ПустойЭлемент", Справочники.бит_ЭлементыДанных.ПустаяСсылка());			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	" + СтрокаВыбораПолей_ИГ + "
			|	ТабКомп.ВидГруппы,
			|	ТабКомп.ГруппаЭлементДанных,
			|	ТабКомп.ЭлементДанных
			|ПОМЕСТИТЬ ВремТаб
			|ИЗ 
			|	&ТаблицаКомпоновки КАК ТабКомп
			|;
		    |
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	" + СтрокаВыбораПолейИзВремТаб_ИГ + "
			|	ВремТаб.ВидГруппы,
			|	ВремТаб.ГруппаЭлементДанных,
			|	ВремТаб.ЭлементДанных
			|ИЗ
			|	ВремТаб КАК ВремТаб
			|
			|ГДЕ
			|	ВремТаб.ГруппаЭлементДанных <> &ПустойЭлемент
			|
			|СГРУППИРОВАТЬ ПО
			|	ВремТаб.ГруппаЭлементДанных,
			|	ВремТаб.ЭлементДанных,
			|	ВремТаб.ВидГруппы
		    |	" + СтрокаСгруппироватьПо_ИГ + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	ГруппаЭлементДанных ИЕРАРХИЯ
			|
			|;
		    |
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВремТаб
			|
			|";
			РезультатИтоги = Запрос.Выполнить();
			
			ТаблицаЗначенийПоКолонкам = ВспомогательнаяТаблица.Скопировать();
			ТаблицаЗначенийПоКолонкам.Колонки.Добавить("ГруппаЭлементДанных");
	
			//МассивВерхних = Новый Массив;
			ОбойтиУровеньВыборкиПоИтогам(СтруктураДанных, ТаблицаЗначенийПоКолонкам, РезультатИтоги);
			
			СчетчикКолонок = 0;
			ТаблицаЗначенийПоКолонкам.Свернуть("ГруппаЭлементДанных", СтрокаСуммирования);
						
			РезультатИтоги = ТаблицаЗначенийПоКолонкам;
						
		КонецЕсли;
			
	КонецЕсли;     
	
	//////////////////////////////////////////////////////////////
	// Возврат результатов

    СтруктураРезультат.Вставить("РезультатОсновногоЗапроса", РезультатОсновногоЗапроса);
	СтруктураРезультат.Вставить("РезультатИтоги", РезультатИтоги);
	
	Возврат СтруктураРезультат;
	
КонецФункции // ПолучитьРезультатыЗапросов()

// Процедура обходит результат запроса, формируя таблицу итогов по группам элементов данных.
// 
// Параметры:
//  МассивГруппКолонок 	  - Структура.
//  СтруктураГруппКолонок - Структура.
//  КоличествоРесурсовив  - Число.
//  ТаблицаПоКолонкам 	  - ТаблицаЗначений.
//  СтруктураВерхних	  - Структура.
//	СчетчикРесурсов    	  - Число.
//  Сч 					  - Число (По умолчанию = 0).
// 
&НаСервере
Процедура СформироватьТаблицуСоответсвияРесурсовКолонкам_ОбходПоГруппировкам(МассивГруппКолонок, СтруктураГруппКолонок, КоличествоРесурсов, ТаблицаПоКолонкам, СтруктураВерхних, СчетчикРесурсов, Сч = 0)

	ИмяГруппы = МассивГруппКолонок[Сч];		
	МассивИменГруппКолонок = СтруктураГруппКолонок[ИмяГруппы];
	
	Если Сч < МассивГруппКолонок.Количество()-1 Тогда
	 	 			
		Для каждого ЭлИмя Из МассивИменГруппКолонок Цикл
			
			СтруктураВерхних.Вставить(ИмяГруппы, ЭлИмя);
			
			СформироватьТаблицуСоответсвияРесурсовКолонкам_ОбходПоГруппировкам(МассивГруппКолонок, СтруктураГруппКолонок, КоличествоРесурсов, ТаблицаПоКолонкам, СтруктураВерхних, СчетчикРесурсов, Сч + 1);
				
		КонецЦикла;
	
	Иначе
		
		Для каждого ЭлИмя Из МассивИменГруппКолонок Цикл
			
			СчетчикРесурсов = ?(СчетчикРесурсов = 0, 1, СчетчикРесурсов + КоличествоРесурсов);
			
			НовСтр = ТаблицаПоКолонкам.Добавить();
			
			НовСтр.СчетчикРесурсов  = СчетчикРесурсов;
			
			НовСтр["ИмяТекКолонки_" + ИмяГруппы] = ЭлИмя; 			
			Для каждого КлЗнч Из СтруктураВерхних Цикл
				НовСтр["ИмяТекКолонки_" + КлЗнч.Ключ] = КлЗнч.Значение;
			КонецЦикла;	  		
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуСоответсвияРесурсовКолонкам()

// Процедура формирует таблицу колонок (+ СчетчикиРесурсов).
// 
// Параметры:
//  СтруктураДанных - Структура
// .
&НаСервере
Функция СформироватьТаблицуСоответсвияРесурсовКолонкам(СтруктураДанных)

	СтруктураГруппКолонок = СтруктураДанных.СтруктураГруппКолонок;
	МассивГруппКолонок    = СтруктураДанных.МассивГруппКолонок;
	МассивРесурсов 		  = СтруктураДанных.МассивРесурсов;
	КоличествоРесурсов 	  = МассивРесурсов.Количество();
	
	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеЧисло  = Новый ОписаниеТипов("Число");
	
	ТаблицаСоответсвияРесурсовКолонкам = Новый ТаблицаЗначений;
	Для каждого ЭлГр Из МассивГруппКолонок Цикл    	
		ТаблицаСоответсвияРесурсовКолонкам.Колонки.Добавить("ИмяТекКолонки_" + ЭлГр);	 	
	КонецЦикла;
	ТаблицаСоответсвияРесурсовКолонкам.Колонки.Добавить("СчетчикРесурсов", ОписаниеЧисло);
	
	СчетчикРесурсов = 0;
	
	СтруктураВерхних = Новый Структура;
	
	СформироватьТаблицуСоответсвияРесурсовКолонкам_ОбходПоГруппировкам(МассивГруппКолонок, СтруктураГруппКолонок, КоличествоРесурсов, ТаблицаСоответсвияРесурсовКолонкам, СтруктураВерхних, СчетчикРесурсов);
	
	Возврат ТаблицаСоответсвияРесурсовКолонкам;
	
КонецФункции // СформироватьТаблицуСоответсвияРесурсовКолонкам()

// Процедура обходит результат запроса, формируя таблицу итогов по группам элементов данных.
// 
// Параметры:
//  СтруктураДанных 		  - Структура.
//  ТаблицаЗначенийПоКолонкам - ТаблицаЗначений .
//  ВыборкаВерх  			  - Выборка из результата запроса или результат запроса.
//  МассивВерхних			  - Массив (По умолчанию = Неопределено).
// 
&НаСервере
Процедура ОбойтиУровеньВыборкиПоИтогам(СтруктураДанных, ТаблицаЗначенийПоКолонкам, ВыборкаВерх, МассивВерхних = Неопределено)

	Если МассивВерхних = Неопределено Тогда
		МассивВерхних = Новый Массив;
	КонецЕсли;
	
	СтруктураГруппКолонок = СтруктураДанных.СтруктураГруппКолонок;
	МассивГруппКолонок    = СтруктураДанных.МассивГруппКолонок;
	МассивРесурсов 		  = СтруктураДанных.МассивРесурсов;
	
	ТаблицаСоответсвияРесурсовКолонкам = СтруктураДанных.ТаблицаСоответсвияРесурсовКолонкам;

	// Заполнение ресурсов
	Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Группировка Тогда
			
			ТекущийЭл = Выборка.ГруппаЭлементДанных; 
			
			МассивВерхних.Добавить(ТекущийЭл);
            ОбойтиУровеньВыборкиПоИтогам(СтруктураДанных, ТаблицаЗначенийПоКолонкам, Выборка, МассивВерхних);
			Индекс = МассивВерхних.Найти(ТекущийЭл);
			МассивВерхних.Удалить(Индекс);
			
		Иначе  			
			
			//Если Выборка.ВидГруппы <> Перечисления.бит_ВидыГруппДанных.ВыборкаДанных Тогда
			//	Продолжить;
			//КонецЕсли; 		
			
			НоваяСтрока = ТаблицаЗначенийПоКолонкам.Добавить();
			
			//Если ТаблицаЗначенийПоКолонкам.Колонки.Найти("ГруппаЭлементДанных") <> Неопределено Тогда
			НоваяСтрока.ГруппаЭлементДанных = Выборка.ГруппаЭлементДанных;
			//КонецЕсли; 			
			
			СтруктураПоискаСчетчика = Новый Структура;
			Для i = 0 По МассивГруппКолонок.Количество() - 1 Цикл 
				ИмяГруппыi = МассивГруппКолонок[i];
				ИмяТекКолонки = "ИмяТекКолонки_" + ИмяГруппыi;
				НоваяСтрока[ИмяТекКолонки] = Выборка[ИмяГруппыi];
				СтруктураПоискаСчетчика.Вставить(ИмяТекКолонки, НоваяСтрока[ИмяТекКолонки]);
			КонецЦикла;   			
			НайденныеСтроки = ТаблицаСоответсвияРесурсовКолонкам.НайтиСтроки(СтруктураПоискаСчетчика);
			СчетчикРесурсов = НайденныеСтроки[0].СчетчикРесурсов;
			
			Для каждого ИмяРесурса Из МассивРесурсов Цикл			      					
				
				ИмяТекКолонки  = "Имя_" + СчетчикРесурсов;  						
				НоваяСтрока[ИмяТекКолонки] =  Выборка[ИмяРесурса];  					
				СчетчикРесурсов = СчетчикРесурсов + 1;
				
			КонецЦикла;
			
			Для каждого ЭлМассива Из МассивВерхних Цикл
						
				НоваяСтрокаВх = ТаблицаЗначенийПоКолонкам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВх, НоваяСтрока);
				//Если ТаблицаЗначенийПоКолонкам.Колонки.Найти("ГруппаЭлементДанных") <> Неопределено Тогда
				НоваяСтрока.ГруппаЭлементДанных = ЭлМассива;
				//КонецЕсли;
				
			КонецЦикла;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбойтиУровеньВыборкиПоИтогам()

// Функция получает уровень
// 
// Параметры:
//  ТекУровень  - Число.
//  Разница  	- Число.
//  
// Возвращаемое значение:
//   Число
// 
&НаСервере
Функция ИзменитьУровень(ИсточникУровень, Разница)

	Уровень = ?(Отчет.Иерархия = "Без иерархии", 0, ИсточникУровень + Разница);
	Возврат Уровень;
	
КонецФункции // ИзменитьУровень()

// Процедура оформляет строку макета.
// 
// Параметры:
//  СтрокаМакета  		 - ТабличныйДокумент.
//  СтруктураОформления  - Структура.
//  ЭтоСтруктура   		 - Булево.
//  ЭтоПерваяКолонка     - Истина.
// 
&НаСервере
Процедура ОформитьСтрокуМакета(СтрокаМакета, СтруктураОформления, Уровень, ЭтоПерваяКолонка = Ложь)

	ТекущаяОбласть = СтрокаМакета.ТекущаяОбласть;
	
	ТекущаяОбласть.Очистить(Ложь, Истина, Ложь);
	ТекущаяОбласть.Формат = Отчет.ФорматЧисел;
	ТекущаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	Если ТипЗнч(СтруктураОформления) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ТекущаяОбласть, СтруктураОформления, ,"Отступ");
		
		Если СтруктураОформления.Свойство("Формат") И ЗначениеЗаполнено(СтруктураОформления.Формат) Тогда
			ТекущаяОбласть.Формат = СтруктураОформления.Формат;
		Иначе	
		    ТекущаяОбласть.Формат = Отчет.ФорматЧисел;
		КонецЕсли;
		
		Если ЭтоПерваяКолонка И СтруктураОформления.Свойство("Формат") Тогда
			ТекущаяОбласть.Отступ		= СтруктураОформления.Отступ;		
		КонецЕсли;
				
	Иначе
		       
		ТекущаяОбласть.Отступ = 0;
		ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Авто;
		
	КонецЕсли;
	
	// Оформление из таблицы оформления уровней
	Если ТаблицаОформленияУровней.Количество() > 0 Тогда
		
		Отбор = Новый Структура("Уровень", Уровень);
		НайденныеСтроки = ТаблицаОформленияУровней.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаОформления = НайденныеСтроки[0];
			Если СтрокаОформления.Включить Тогда
			
				ТекущаяОбласть.ЦветФона = СтрокаОформления.ЦветФона;
				ТекущаяОбласть.Шрифт 	= СтрокаОформления.Шрифт;	
			
			КонецЕсли; 		
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОформитьСтрокуМакета()

// Процедура выводит фиксированные колонки.
// 
// Параметры:
//  Кодификатор            - Строка.
//  Наименование           - Строка.
//  ПоказатьДанныеИерархии - Булево.
// 
&НаСервере
Процедура ВывестиФиксированныеКолонки(ТипВывода, ОбластьСтрКдфктр, ОбластьСтрЭлДннх, Кодификатор, Наименование, Уровень, ПоказатьДанныеИерархии)

	Если ПоказатьДанныеИерархии Тогда
		ОбластьСтрЭлДннх.Параметры.ЭлементДанных = Наименование;
        ОбластьСтрКдфктр.Параметры.Кодификатор   = Кодификатор;	
	Иначе
		ОбластьСтрЭлДннх.Параметры.ЭлементДанных = "";
		ОбластьСтрКдфктр.Параметры.Кодификатор   = "";	
	КонецЕсли;
	
	Если Отчет.ВыводитьКодификаторы Тогда // И ВывестиВсе Тогда
		
		ТабличныйДокумент.Вывести(ОбластьСтрКдфктр, Уровень);
		
		Если Отчет.ВариантГруппировкиСтрок <> "В одной колонке" ИЛИ ТипВывода <> "ДляГруппыСтрок" Тогда
			ТабличныйДокумент.Присоединить(ОбластьСтрЭлДннх, Уровень);		
		КонецЕсли;      		
		
	Иначе
		
		Если Отчет.ВариантГруппировкиСтрок <> "В одной колонке" ИЛИ ТипВывода <> "ДляГруппыСтрок" Тогда
			ТабличныйДокумент.Вывести(ОбластьСтрЭлДннх, Уровень);		
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ВывестиФиксированныеКолонки()

// Процедура выводит в табличный документ строку.
// 
// Параметры:
//  ТекСтрока            - СтрокаТаблицыЗначений.
//  СтруктураДанных  	 - Структура.
//  СтруктураОбластей    - Структура. 
//  Уровень              - Число.
//  ДопСтруктура    	 - Структура. 
// 
&НаСервере
Процедура ВывестиСтрокуДанных(ТекСтрока, СтруктураДанных, СтруктураОбластей, Уровень, ДопСтруктура)
	                              	
	МассивПолей 		= СтруктураДанных.МассивПолей;
	МассивРесурсов  	= СтруктураДанных.МассивРесурсов;
	МассивГруппСтрок 	= СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок 	= СтруктураДанных.МассивГруппКолонок;
	//МассивИменГруппКолонок = СтруктураДанных.МассивИменГруппКолонок;
	СтруктураГруппКолонок = СтруктураДанных.СтруктураГруппКолонок;
	
	ЛинияПустая   = СтруктураДанных.ЛинияПустая;
	ЛинияСплошная = СтруктураДанных.ЛинияСплошная;
	
	ОбластьСтрКдфктр  = СтруктураОбластей.ОбластьСтрКдфктр;
	ОбластьСтрЭлДннх  = СтруктураОбластей.ОбластьСтрЭлДннх;
	ОбластьСтрДанные  = СтруктураОбластей.ОбластьСтрДанные;
	
	МассивНеотображаемыхПолей 	= ДопСтруктура.МассивНеотображаемыхПолей;
	ПоказатьДанныеИерархии 		= ДопСтруктура.ПоказатьДанныеИерархии;
	ВыводитьРесурсы 			= ДопСтруктура.ВыводитьРесурсы;
	Присоединить 				= ДопСтруктура.Присоединить;
	ТипВывода					= ДопСтруктура.ТипВывода;

	// Текущий элемент данных
	ТекЭлДх = ТекСтрока.ЭлементДанных;
	ЭтоТекст = ТекЭлДх.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Текст;
	ЭтоГруппировка = ТекЭлДх.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Группировка;
	Наименование = ПолучитьНаименование(ТекЭлДх);
	
	// Оформление строки
	СтруктураОформления = ТекЭлДх.Оформление.Получить();	
		
	Если Отчет.ВыводитьКодификаторы Тогда
		ОформитьСтрокуМакета(ОбластьСтрКдфктр, СтруктураОформления, Уровень, Истина);
		ОформитьСтрокуМакета(ОбластьСтрЭлДннх, СтруктураОформления, Уровень);
	Иначе	
	    ОформитьСтрокуМакета(ОбластьСтрЭлДннх, СтруктураОформления, Уровень, Истина);
	КонецЕсли;
	ОформитьСтрокуМакета(ОбластьСтрДанные, СтруктураОформления, Уровень);
	
	Если Не Присоединить Тогда
		// Вывод фиксированных колонок
		ВывестиФиксированныеКолонки(ТипВывода, ОбластьСтрКдфктр, ОбластьСтрЭлДннх, ТекСтрока.Кодификатор, Наименование, Уровень, ПоказатьДанныеИерархии);
	КонецЕсли;
	             		
	// Вывод колонок, формируемых динамически
	
	/////////////////////////////////////////////////////////////////////////
	// Обход группировок строк
	Если Отчет.ВариантГруппировкиСтрок <> "В одной колонке" ИЛИ ТипВывода = "ДляГруппыСтрок" Тогда
		
		Для каждого Элемент Из МассивГруппСтрок Цикл
			
			ЭтаГруппаСтрокВидима = Не ЭтоТекст И (МассивНеотображаемыхПолей = Неопределено ИЛИ МассивНеотображаемыхПолей.Найти(Элемент) = Неопределено);
			Если ЭтаГруппаСтрокВидима Тогда
				ЗначениеПараметра = ТекСтрока[Элемент];
			Иначе
				ЗначениеПараметра = "";
			КонецЕсли;	
			
			ИзменитьЗначениеПоФормату(ЗначениеПараметра);
			ОбластьСтрДанные.Параметры.Значение = ЗначениеПараметра;
			
			// Запись данных расшифровки для текущей области.
			ОбластьСтрДанные.ТекущаяОбласть.Расшифровка = ?(ЗначениеЗаполнено(ЗначениеПараметра), ЗначениеПараметра, Неопределено);
			
			Если Отчет.ВариантГруппировкиСтрок = "В одной колонке" Тогда
				Если ЭтаГруппаСтрокВидима Тогда
					Если Отчет.ВыводитьКодификаторы Тогда
						ТабличныйДокумент.Присоединить(ОбластьСтрДанные);
					Иначе	
						ТабличныйДокумент.Вывести(ОбластьСтрДанные, Уровень); 
					КонецЕсли;
					Прервать;
				КонецЕсли;
			Иначе
				ТабличныйДокумент.Присоединить(ОбластьСтрДанные);
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////
	// Обход массива полей
	Для каждого Элемент Из МассивПолей Цикл
		
		ЗначениеПараметра = ?(ЭтоТекст, "", ТекСтрока[Элемент]);
		ИзменитьЗначениеПоФормату(ЗначениеПараметра);
		ОбластьСтрДанные.Параметры.Значение = ЗначениеПараметра;
		
		// Запись данных расшифровки для текущей области.
		ОбластьСтрДанные.ТекущаяОбласть.Расшифровка = ?(ЗначениеЗаполнено(ЗначениеПараметра), ЗначениеПараметра, Неопределено);
		
		ТабличныйДокумент.Присоединить(ОбластьСтрДанные);
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод ресурсов
	Если МассивГруппКолонок.Количество() = 0 Тогда
		
		Для каждого Элемент Из МассивРесурсов Цикл
			
			ОбластьСтрДанные.Параметры.Значение = ?(ЭтоТекст, "", ТекСтрока[Элемент]);
			ОбластьСтрДанные.ТекущаяОбласть.Расшифровка = Неопределено;
			ТабличныйДокумент.Присоединить(ОбластьСтрДанные);
			
		КонецЦикла;
		
		ВывестиИтогиПоГруппировкамКолонок(МассивГруппКолонок, МассивРесурсов, ТабличныйДокумент, ОбластьСтрДанные, ТекСтрока, "*");
		
	ИначеЕсли ВыводитьРесурсы Тогда
		
		// Вывод ресурсов "полей", если есть группировка по колонкам
		
		КоличествоКолонок = МассивРесурсов.Количество();
		Для каждого КлЗнч Из СтруктураГруппКолонок Цикл
			МассивИменГруппКолонок = КлЗнч.Значение;
			КоличествоКолонок = КоличествоКолонок * МассивИменГруппКолонок.Количество();
		КонецЦикла;
		
		ТаблицаСоответсвияРесурсовКолонкам = СтруктураДанных.ТаблицаСоответсвияРесурсовКолонкам;

		СтруктураПоискаСчетчика = Новый Структура;
		Для i = 0 По МассивГруппКолонок.Количество() - 1 Цикл 
			ИмяГруппыi = МассивГруппКолонок[i];
			ИмяТекКолонки = "ИмяТекКолонки_" + ИмяГруппыi;
			СтруктураПоискаСчетчика.Вставить(ИмяТекКолонки, ТекСтрока[ИмяГруппыi]);
		КонецЦикла; 		
		НайденныеСтроки = ТаблицаСоответсвияРесурсовКолонкам.НайтиСтроки(СтруктураПоискаСчетчика);
		СчетчикРесурсов = НайденныеСтроки[0].СчетчикРесурсов;
		
		ОбластьСтрДанные.ТекущаяОбласть.Расшифровка = Неопределено;
		Для i = 1 По СчетчикРесурсов - 1 Цикл
			// Пустые
			ОбластьСтрДанные.Параметры.Значение = ?(ЭтоТекст, "", 0);
			ТабличныйДокумент.Присоединить(ОбластьСтрДанные);
		КонецЦикла;
		
		Для каждого ИмяРесурса Из МассивРесурсов Цикл 			
			ОбластьСтрДанные.Параметры.Значение = ?(ЭтоТекст, "", ТекСтрока[ИмяРесурса]);
	 		ТабличныйДокумент.Присоединить(ОбластьСтрДанные);
		КонецЦикла;
		
		Для i = СчетчикРесурсов + МассивРесурсов.Количество() По КоличествоКолонок Цикл
			// Пустые
			ОбластьСтрДанные.Параметры.Значение = ?(ЭтоТекст, "", 0);
			ТабличныйДокумент.Присоединить(ОбластьСтрДанные);
		КонецЦикла;
		
		Если Отчет.ВыводитьИтогиПоГруппировкамКолонок Тогда
		 	Для каждого ИмяРесурса Из МассивРесурсов Цикл 			
				ОбластьСтрДанные.Параметры.Значение = ?(ЭтоТекст, "", ТекСтрока[ИмяРесурса]);
	 			ТабличныйДокумент.Присоединить(ОбластьСтрДанные);
			КонецЦикла;
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры // ВывестиСтрокуДанных()
	
// Функция проверяет нужно ли выводить текущую строку выборки.
// 
// Параметры:
//  СтруктураДанных  - Струткруа.
//  ВыборкаГруппСтрок  - Выборка из результата запроса.
//  
// Возвращаемое значение:
//   Булево.
// 
&НаСервере
Функция НужноВывестиСтроку(СтруктураДанных, ВыборкаГруппСтрок)

	МассивГруппСтрок   = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок = СтруктураДанных.МассивГруппКолонок;
	
	ВыводитьСтроку = Истина;
	
	ЗаполненоЗначениеГруппы = Ложь;
	
	Для каждого ЭлМас Из МассивГруппСтрок Цикл
		
		Если ВыборкаГруппСтрок[ЭлМас] <> Неопределено И ВыборкаГруппСтрок[ЭлМас] <> NULL Тогда
			ЗаполненоЗначениеГруппы = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ЭлМас Из МассивГруппКолонок Цикл
		
		Если ВыборкаГруппСтрок[ЭлМас] <> Неопределено И ВыборкаГруппСтрок[ЭлМас] <> NULL Тогда
			ЗаполненоЗначениеГруппы = Истина;
			Прервать;
		КонецЕсли;  
		
	КонецЦикла;
	
	Если (ТипЗнч(ВыборкаГруппСтрок.ВидГруппы) = Тип("Число")
		ИЛИ ВыборкаГруппСтрок.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Группировка
		ИЛИ ВыборкаГруппСтрок.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Текст 
		)И Не ЗаполненоЗначениеГруппы Тогда
		
		ВыводитьСтроку = Ложь;
		
	КонецЕсли;

	Возврат ВыводитьСтроку;
	
КонецФункции // НужноВывестиСтроку()

// Функция проверяет нужно ли выводить текущую строку выборки.
// 
// Параметры:
//  МассивГруппКолонок    - Массив.
//  МассивРесурсов        - Массив.
//  ОбластьСтрДанные. 
//  ТекДанные		      - Выборка из результата запроса или данные строки ТЗ (По умолчанию = Неопределено).
//  ФиксированноеЗначение - Любое значение (По умолчанию = "").
//  
// Возвращаемое значение:
//   Булево.
// 
&НаСервере
Процедура ВывестиИтогиПоГруппировкамКолонок(МассивГруппКолонок, МассивРесурсов, ТабДок, ОбластьСтрДанные, ТекДанные = Неопределено, ФиксированноеЗначение = "");
			
	Если Отчет.ВыводитьИтогиПоГруппировкамКолонок И МассивГруппКолонок.Количество() > 0 Тогда
		
		Для каждого ИмяРесурса Из МассивРесурсов Цикл
			
			Если ТекДанные = Неопределено Тогда
			 	ЗначениеПоля = ФиксированноеЗначение;
			Иначе	
			    ЗначениеПоля = ТекДанные[ИмяРесурса];
				Если ФиксированноеЗначение <> "" Тогда
					ЗначениеПоля = ЗначениеПоля + ФиксированноеЗначение;
				КонецЕсли;
			КонецЕсли;
			
			ОбластьСтрДанные.Параметры.Значение = ЗначениеПоля;
			ТабДок.Присоединить(ОбластьСтрДанные);
			
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

// Процедура выводит группу колонок.
// 
// Параметры:
//  НомерЭл  				  - Число.
//  ВыборкаВерх  			  - Выборка из результата запроса.
//  СтруктураДанных   		  - Структура.
//  СтруктураОбластей    	  - Структура.
// 
&НаСервере
Процедура ВывестиГруппуКолонок(НомерЭл, ВыборкаВерх, СтруктураДанных, СтруктураОбластей)
	
	МассивПолей    = СтруктураДанных.МассивПолей;
	МассивРесурсов =  СтруктураДанных.МассивРесурсов;

	МассивГруппСтрок       = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок	   = СтруктураДанных.МассивГруппКолонок;
	СтруктураГруппКолонок  = СтруктураДанных.СтруктураГруппКолонок;
	
	ВспомогательнаяТаблица = СтруктураДанных.ВспомогательнаяТаблица;
	
	ТаблицаИтоги = СтруктураДанных.ТаблицаИтоги;
	
	МассивНеотображаемыхПолей = Новый Массив;
	
	ОбластьСтрДанные = СтруктураОбластей.ОбластьСтрДанные;
	
	ЭтоГруппировка = ВыборкаВерх.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Группировка;
	ЭтоТекст 	   = ВыборкаВерх.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Текст;
	ЭтоФормула	   = ВыборкаВерх.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула;
	
	Если ЭтоГруппировка Тогда
		
		Отбор = Новый Структура("ГруппаЭлементДанных", ВыборкаВерх.ЭлементДанных);
		НайденныеСтроки = ТаблицаИтоги.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
				
			СтрокаТаблицы = НайденныеСтроки[0];
			Для Каждого Колонка Из ТаблицаИтоги.Колонки Цикл
				Если Колонка.Имя = "ГруппаЭлементДанных" Тогда
					Продолжить;				
				КонецЕсли;     				
			 	ОбластьСтрДанные.Параметры.Значение = СтрокаТаблицы[Колонка.Имя];
				ТабличныйДокумент.Присоединить(ОбластьСтрДанные);	
			КонецЦикла;	
			
			ВывестиИтогиПоГруппировкамКолонок(МассивГруппКолонок, МассивРесурсов, ТабличныйДокумент, ОбластьСтрДанные, ВыборкаВерх);
			
		Иначе
			
			Для Каждого Колонка Из ТаблицаИтоги.Колонки Цикл
				Если Колонка.Имя = "ГруппаЭлементДанных" Тогда
					Продолжить;				
				КонецЕсли;     				
			 	ОбластьСтрДанные.Параметры.Значение = 0;
				ТабличныйДокумент.Присоединить(ОбластьСтрДанные);	
			КонецЦикла;
			
			ВывестиИтогиПоГруппировкамКолонок(МассивГруппКолонок, МассивРесурсов, ТабличныйДокумент, ОбластьСтрДанные, Неопределено, 0);
		
		КонецЕсли;
			
	Иначе	
		
		ТаблицаЗначенийПоКолонкам = ВспомогательнаяТаблица.Скопировать();
				
		Если Не ЭтоТекст Тогда			
			Сч = 0;
			ЗаполнитьТаблицуЗначенийПоКолонкам(СтруктураДанных, Сч, ТаблицаЗначенийПоКолонкам, ВыборкаВерх);
		КонецЕсли;
		
		СчетчикКолонок = 0; 		
		СтрокаГрупп = "ИмяТекКолонки";
		ТаблицаЗначенийПоКолонкам.Свернуть(СтрокаГрупп, СтрокаСуммирования);
		ТаблицаЗначенийПоКолонкам.Колонки.Удалить("ИмяТекКолонки");
				
		Если ТаблицаЗначенийПоКолонкам.Количество() > 0 Тогда
				
			СтрокаТаблицы = ТаблицаЗначенийПоКолонкам[0];
			Для Каждого Колонка Из ТаблицаЗначенийПоКолонкам.Колонки Цикл
			 	ОбластьСтрДанные.Параметры.Значение = СтрокаТаблицы[Колонка.Имя];
				ТабличныйДокумент.Присоединить(ОбластьСтрДанные);	
			КонецЦикла;			
			ТаблицаЗначенийПоКолонкам.Удалить(0);
			
			// Вывод общих итогов по колонкам
			ВывестиИтогиПоГруппировкамКолонок(МассивГруппКолонок, МассивРесурсов, ТабличныйДокумент, ОбластьСтрДанные, ВыборкаВерх);
			
		Иначе
			
			Для Каждого Колонка Из ТаблицаЗначенийПоКолонкам.Колонки Цикл
			 	ОбластьСтрДанные.Параметры.Значение = "";
				ТабличныйДокумент.Присоединить(ОбластьСтрДанные);	
			КонецЦикла;
			
			// Вывод общих итогов по колонкам
			ВывестиИтогиПоГруппировкамКолонок(МассивГруппКолонок, МассивРесурсов, ТабличныйДокумент, ОбластьСтрДанные, Неопределено, "");
			
		КонецЕсли;
	
	КонецЕсли;  		
	
	Если Отчет.Иерархия <> "Только иерархия" И Не ЭтоТекст И Не ЭтоГруппировка 
		И (Не ЭтоФормула Или Отчет.ВыводитьДетализациюДляФормулы) Тогда
		
		Если МассивГруппСтрок.Количество() > 0 Тогда
			                                
			ВывестиГруппуСтрокКолонок(0, ВыборкаВерх, СтруктураДанных, СтруктураОбластей, МассивНеотображаемыхПолей, ТаблицаЗначенийПоКолонкам);
				
		ИначеЕсли МассивПолей.Количество() > 0 И Не Отчет.НеВыводитьДетальныеЗаписи Тогда
			
			Выборка = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппКолонок[0]);
			
			Пока Выборка.Следующий() Цикл
				
				ВыборкаДетали = Выборка.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					
					Если Не НужноВывестиСтроку(СтруктураДанных, ВыборкаДетали) Тогда
						Продолжить;
					КонецЕсли;
					
					Уровень = ИзменитьУровень(ВыборкаДетали.Уровень(), 0);
					ДопСтруктура = Новый Структура("МассивНеотображаемыхПолей, ПоказатьДанныеИерархии, ВыводитьРесурсы, Присоединить, ТипВывода", 
										МассивНеотображаемыхПолей, Ложь, Истина, Ложь, "ДляДетальныхЗаписей");
					ВывестиСтрокуДанных(ВыборкаДетали, СтруктураДанных, СтруктураОбластей, Уровень, ДопСтруктура);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
				
КонецПроцедуры // ВывестиГруппуКолонок()

// Процедура заполняет таблицу значений по колонкам.
// 
// Параметры:
//  СтруктураДанных   		  - Структура.
//  Сч  			  		  - Число.
//  ТаблицаЗначенийПоКолонкам - ТаблицаЗначений.
//  ВыборкаВерх    	  		  - Выборка из результата запроса.
//  СчетчикКолонок  		  - Число (По умолчанию = 0).  
// 
&НаСервере
Процедура ЗаполнитьТаблицуЗначенийПоКолонкам(СтруктураДанных, Сч, ТаблицаЗначенийПоКолонкам, ВыборкаВерх, СчетчикКолонок = 0, МассивВерхних = Неопределено)
	
	МассивРесурсов  	   = СтруктураДанных.МассивРесурсов;
	МассивГруппСтрок 	   = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок 	   = СтруктураДанных.МассивГруппКолонок;
	СтруктураГруппКолонок  = СтруктураДанных.СтруктураГруппКолонок;
	ПредставленияРесурсов  = СтруктураДанных.ПредставленияРесурсов;
	
	ТаблицаСоответсвияРесурсовКолонкам = СтруктураДанных.ТаблицаСоответсвияРесурсовКолонкам;
	
	Если Сч = 0 Тогда 	
		ИмяКолонкиПоГруппе = "";
		МассивИменГрупп = Новый Массив;
		МассивВерхних = Новый Массив;
	КонецЕсли;
	
	Если Сч < МассивГруппКолонок.Количество() Тогда
	 	
		ИмяГруппы = МассивГруппКолонок[Сч];
		
		МассивЗаполненных = Новый Массив;
		
		ВыборкаГруппКолонок = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИмяГруппы);
		Пока ВыборкаГруппКолонок.Следующий() Цикл
		    	
			Если Сч < МассивГруппКолонок.Количество() - 1 Тогда
				
				ТекущееЗначениеГр = ВыборкаГруппКолонок[ИмяГруппы];
				МассивВерхних.Добавить(ТекущееЗначениеГр);
			
				ЗаполнитьТаблицуЗначенийПоКолонкам(СтруктураДанных, Сч + 1, ТаблицаЗначенийПоКолонкам, ВыборкаГруппКолонок, СчетчикКолонок, МассивВерхних);
				
				Индекс = МассивВерхних.Найти(ТекущееЗначениеГр);
				МассивВерхних.Удалить(Индекс);
			
			Иначе
					
				МассивИменГруппКолонок = СтруктураГруппКолонок[ИмяГруппы];
					
				ТекущееЗначениеГр = ВыборкаГруппКолонок[ИмяГруппы];
				
				НоваяСтрока = ТаблицаЗначенийПоКолонкам.Добавить();
			
				СтруктураПоискаСчетчика = Новый Структура;
				Для i = 0 По МассивГруппКолонок.Количество() - 1 Цикл 
					ИмяГруппыi = МассивГруппКолонок[i];
					ИмяТекКолонки = "ИмяТекКолонки_" + ИмяГруппыi;
					НоваяСтрока[ИмяТекКолонки] = ВыборкаГруппКолонок[ИмяГруппыi];
					СтруктураПоискаСчетчика.Вставить(ИмяТекКолонки, НоваяСтрока[ИмяТекКолонки]);
				КонецЦикла;   				
				НайденныеСтроки = ТаблицаСоответсвияРесурсовКолонкам.НайтиСтроки(СтруктураПоискаСчетчика);
				СчетчикРесурсов = НайденныеСтроки[0].СчетчикРесурсов;
				
				Для каждого ИмяРесурса Из МассивРесурсов Цикл			      					
					
					ИмяТекКолонки  = "Имя_" + СчетчикРесурсов;  						
					НоваяСтрока[ИмяТекКолонки] =  ВыборкаГруппКолонок[ИмяРесурса];  					
					СчетчикРесурсов = СчетчикРесурсов + 1;
					
				КонецЦикла;
				
				//Для каждого ЭлМассива Из МассивВерхних Цикл
				//			
				//	НоваяСтрокаВх = ТаблицаЗначенийПоКолонкам.Добавить();
				//	ЗаполнитьЗначенияСвойств(НоваяСтрокаВх, НоваяСтрока);
				//	НоваяСтрока.ГруппаЭлементДанных = ЭлМассива;
				//						
				//КонецЦикла;
					
				//Для каждого ИмяКолонки Из МассивИменГруппКолонок  Цикл									         		
				//	
				//	Если МассивЗаполненных.Найти(ИмяКолонки) <> Неопределено Тогда
				//		Продолжить;	
				//	КонецЕсли;
				//	
				//	Если ИмяКолонки = ТекущееЗначениеГр Тогда
				//		
				//		НоваяСтрока = ТаблицаЗначенийПоКолонкам.Добавить();
				//		Для i = 0 По МассивГруппКолонок.Количество() - 1 Цикл 
				//			ИмяГруппыi = МассивГруппКолонок[i];
				//			НоваяСтрока["ИмяТекКолонки_" + ИмяГруппыi] = ВыборкаГруппКолонок[ИмяГруппыi];
				//		КонецЦикла;
				//		
				//		Для каждого ИмяРесурса Из МассивРесурсов Цикл 								
				//			СчетчикКолонок = СчетчикКолонок+1;
				//			НоваяСтрока["Имя_" + СчетчикКолонок] =  ВыборкаГруппКолонок[ИмяРесурса]; 								
				//		КонецЦикла;
				//		
				//		МассивЗаполненных.Добавить(ИмяКолонки);
				//		Прервать;
				//		
				//	Иначе	
				//		
				//		Если МассивЗаполненных.Найти(ИмяКолонки) = Неопределено Тогда
				//			
				//			// Добавление строки с пустыми суммами
				//			НоваяСтрока = ТаблицаЗначенийПоКолонкам.Добавить();
				//			Для i = 0 По МассивГруппКолонок.Количество() - 2 Цикл 
				//				ИмяГруппыi = МассивГруппКолонок[i];
				//				НоваяСтрока["ИмяТекКолонки_" + ИмяГруппыi] = ВыборкаГруппКолонок[ИмяГруппыi];
				//			КонецЦикла;
				//			НоваяСтрока["ИмяТекКолонки_" + МассивГруппКолонок[i]] = ИмяКолонки;
				//			
				//			Для каждого ИмяРесурса Из МассивРесурсов Цикл 									
				//				СчетчикКолонок = СчетчикКолонок+1;
				//				НоваяСтрока["Имя_" + СчетчикКолонок] = 0;  									
				//			КонецЦикла;
				//			
				//			МассивЗаполненных.Добавить(ИмяКолонки);
				//			
				//		КонецЕсли;
				//		
				//	КонецЕсли;
				//	
				//КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
			   			
КонецПроцедуры // ЗаполнитьТаблицуЗначенийПоКолонкам()

// Процедура выводит группу строк для отчета с группировками колонок.
// 
// Параметры:
//  НомерЭл  				  - Число.
//  ВыборкаВерх  			  - Выборка из результата запроса.
//  СтруктураДанных   		  - Структура.
//  СтруктураОбластей    	  - Структура.
//  МассивНеотображаемыхПолей - Массив.
//  ТаблицаЗначенийПоКолонкам - ТаблицаЗначений.
// 
&НаСервере
Процедура ВывестиГруппуСтрокКолонок(НомерЭл, ВыборкаВерх, СтруктураДанных, СтруктураОбластей, МассивНеотображаемыхПолей, ТаблицаЗначенийПоКолонкам)
	
	МассивПолей = СтруктураДанных.МассивПолей;
	МассивРесурсов =  СтруктураДанных.МассивРесурсов;

	МассивГруппСтрок   = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок = СтруктураДанных.МассивГруппКолонок;
	МассивИменГруппКолонок = СтруктураДанных.МассивИменГруппКолонок;
		
	ОбластьСтрДанные = СтруктураОбластей.ОбластьСтрДанные;
	
	ЭлементГрСтр = МассивГруппСтрок[НомерЭл];	
	
	ВыборкаГруппСтрок = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ЭлементГрСтр);
	Пока ВыборкаГруппСтрок.Следующий() Цикл
			
		Уровень = ИзменитьУровень(ВыборкаГруппСтрок.Уровень(), 0);
		
		Если Не НужноВывестиСтроку(СтруктураДанных, ВыборкаГруппСтрок) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказатьДанныеИерархии = ?(МассивГруппКолонок.Количество() > 0, Истина, Ложь);
		ДопСтруктура = Новый Структура("МассивНеотображаемыхПолей, ПоказатьДанныеИерархии, ВыводитьРесурсы, Присоединить, ТипВывода", 
							МассивНеотображаемыхПолей, Ложь, Ложь, Ложь, "ДляГруппыСтрок");
		ВывестиСтрокуДанных(ВыборкаГруппСтрок, СтруктураДанных, СтруктураОбластей, Уровень, ДопСтруктура);

		Сч = 0;
		ТаблицаЗначенийПоКолонкам = СтруктураДанных.ВспомогательнаяТаблица.Скопировать();
		ЗаполнитьТаблицуЗначенийПоКолонкам(СтруктураДанных, Сч, ТаблицаЗначенийПоКолонкам, ВыборкаГруппСтрок);
		
		СчетчикКолонок = 0;
		ТаблицаЗначенийПоКолонкам.Свернуть("ИмяТекКолонки", СтрокаСуммирования);
		ТаблицаЗначенийПоКолонкам.Колонки.Удалить("ИмяТекКолонки");
		Если ТаблицаЗначенийПоКолонкам.Количество() > 0 Тогда
		
			СтрокаТаблицы = ТаблицаЗначенийПоКолонкам[0];
			Для Каждого Колонка Из ТаблицаЗначенийПоКолонкам.Колонки Цикл
			 	ОбластьСтрДанные.Параметры.Значение = СтрокаТаблицы[Колонка.Имя];
				ТабличныйДокумент.Присоединить(ОбластьСтрДанные);	
			КонецЦикла;	
			
			ТаблицаЗначенийПоКолонкам.Удалить(0);
		КонецЕсли;
		
		ВывестиИтогиПоГруппировкамКолонок(МассивГруппКолонок, МассивРесурсов, ТабличныйДокумент, ОбластьСтрДанные, ВыборкаГруппСтрок);
		
      	МассивНеотображаемыхПолей.Добавить(МассивГруппСтрок[НомерЭл]);
		
		Если МассивГруппСтрок.Количество() > НомерЭл+1 Тогда
			
			ВывестиГруппуСтрокКолонок(НомерЭл+1, ВыборкаГруппСтрок, СтруктураДанных, СтруктураОбластей, МассивНеотображаемыхПолей, ТаблицаЗначенийПоКолонкам);
					
		Иначе
			
			Если МассивПолей.Количество() > 0 И Не Отчет.НеВыводитьДетальныеЗаписи Тогда
		
				Выборка = ВыборкаГруппСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппКолонок[0]);
				
				Пока Выборка.Следующий() Цикл
					
					ВыборкаДетали = Выборка.Выбрать();
					Пока ВыборкаДетали.Следующий() Цикл
						Уровень = ИзменитьУровень(ВыборкаДетали.Уровень(), 0);
						ДопСтруктура = Новый Структура("МассивНеотображаемыхПолей, ПоказатьДанныеИерархии, ВыводитьРесурсы, Присоединить, ТипВывода", 
									МассивНеотображаемыхПолей, Ложь, Истина, Ложь, "ДляДетальныхЗаписей");
						ВывестиСтрокуДанных(ВыборкаДетали, СтруктураДанных, СтруктураОбластей, Уровень, ДопСтруктура);
					КонецЦикла;
					
				КонецЦикла;				
				
			КонецЕсли;
						
		КонецЕсли;
		
		МассивНеотображаемыхПолей.Удалить(МассивНеотображаемыхПолей.Количество()-1);
	 			
	КонецЦикла;
					
КонецПроцедуры // ВывестиГруппуСтрокКолонок()

// Процедура выводит группу строк.
// 
// Параметры:
//  НомерЭл  				  - Число.
//  ВыборкаВерх  			  - Выборка из результата запроса.
//  СтруктураДанных   		  - Структура.
//  СтруктураОбластей    	  - Структура.
//  МассивНеотображаемыхПолей - Массив.
// 
&НаСервере
Процедура ВывестиГруппуСтрок(НомерЭл, ВыборкаВерх, СтруктураДанных, СтруктураОбластей, МассивНеотображаемыхПолей)
	
	МассивГруппСтрок   = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок = СтруктураДанных.МассивГруппКолонок;
	            	
	ВыборкаГруппСтрок = ВыборкаВерх.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппСтрок[НомерЭл]);
	Пока ВыборкаГруппСтрок.Следующий() Цикл
		
		Уровень = ИзменитьУровень(ВыборкаГруппСтрок.Уровень(), 0);
		
		Если Не НужноВывестиСтроку(СтруктураДанных, ВыборкаГруппСтрок) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказатьДанныеИерархии = ?(МассивГруппКолонок.Количество() > 0, Истина, Ложь); 
		ДопСтруктура = Новый Структура("МассивНеотображаемыхПолей, ПоказатьДанныеИерархии, ВыводитьРесурсы, Присоединить, ТипВывода", 
								МассивНеотображаемыхПолей, ПоказатьДанныеИерархии, Истина, Ложь, "ДляГруппыСтрок");
		ВывестиСтрокуДанных(ВыборкаГруппСтрок, СтруктураДанных, СтруктураОбластей, Уровень, ДопСтруктура);
		
		МассивНеотображаемыхПолей.Добавить(МассивГруппСтрок[НомерЭл]);
		
		Если МассивГруппСтрок.Количество() > НомерЭл+1 Тогда
			ВывестиГруппуСтрок(НомерЭл+1, ВыборкаГруппСтрок, СтруктураДанных, СтруктураОбластей, МассивНеотображаемыхПолей)
		ИначеЕсли Не Отчет.НеВыводитьДетальныеЗаписи Тогда
			ВывестиДетальныеЗаписи(ВыборкаГруппСтрок, СтруктураДанных, СтруктураОбластей, МассивНеотображаемыхПолей);
		КонецЕсли;
		МассивНеотображаемыхПолей.Удалить(МассивНеотображаемыхПолей.Количество()-1);
	
	КонецЦикла;	
				
КонецПроцедуры // ВывестиГруппуСтрок()

// Процедура выводит детальные записи.
// 
// Параметры:
//  ВыборкаВерх  				- Тип_описание.
//  СтруктураДанных  			- Структура.
//  СтруктураОбластей  			- Структура.
//  МассивНеотображаемыхПолей 	- Массив.
//  Присоединить				- Булево.
// 
&НаСервере
Процедура ВывестиДетальныеЗаписи(ВыборкаВерх, СтруктураДанных, СтруктураОбластей, МассивНеотображаемыхПолей = Неопределено)

	МассивГруппСтрок   = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок = СтруктураДанных.МассивГруппКолонок;
	
	
	Выборка = ВыборкаВерх.Выбрать();
	Пока Выборка.Следующий() Цикл
		
	   	Уровень = ИзменитьУровень(Выборка.Уровень(), ?(ВыборкаВерх.ЭлементДанных = Выборка.ЭлементДанных, 1, 0));
				
		Если Не НужноВывестиСтроку(СтруктураДанных, Выборка) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказатьДанныеИерархии = ?(Уровень = Выборка.Уровень(), Истина, Ложь);
		ДопСтруктура = Новый Структура("МассивНеотображаемыхПолей, ПоказатьДанныеИерархии, ВыводитьРесурсы, Присоединить, ТипВывода", 
										МассивНеотображаемыхПолей, ПоказатьДанныеИерархии, Истина, Ложь, "ДляДетальныхЗаписей");
		ВывестиСтрокуДанных(Выборка, СтруктураДанных, СтруктураОбластей, Уровень, ДопСтруктура);
		
	КонецЦикла;	

КонецПроцедуры // ВывестиДетальныеЗаписи()    

// Процедура формирует ветку дерева структуры колонок.
// 
// Параметры:
//  МассивГруппКолонок    - Массив.
//  СтруктураГруппКолонок - Структура.
// 
&НаСервере
Процедура ЗаполнитьВеткуДерева(МассивГруппКолонок, СтруктураГруппКолонок, ВеткаДз, Сч)

	Если Сч < МассивГруппКолонок.Количество() Тогда
	 	
		ИмяГруппы = МассивГруппКолонок[Сч];
		
		МассивИменГруппКолонок = СтруктураГруппКолонок[ИмяГруппы];
			
		Для каждого ЭлИмя Из МассивИменГруппКолонок Цикл
			
			ИмяКолонки = Строка(ЭлИмя);
			
			НовСтр = ВеткаДз.Добавить();
			НовСтр.ИмяГруппы  = ИмяГруппы;
			НовСтр.ИмяКолонки = ИмяКолонки;
			
			НовВеткаДз = НовСтр.Строки;
			ЗаполнитьВеткуДерева(МассивГруппКолонок, СтруктураГруппКолонок, НовВеткаДз, Сч + 1);
				
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

// Функция формирует дерево значений - структуру группировок колонок
//
// Параметры:
//  МассивГруппКолонок    - Массив.
//  СтруктураГруппКолонок - Структура.
//
// Возвращаемое значение:
//   ДеревоЗначений.
//
&НаСервере
Функция СоздатьДеревоКолонок(МассивГруппКолонок, СтруктураГруппКолонок)

	ОписаниеСтрока = Новый ОписаниеТипов("Строка");
	
	ДеревоКолонок = Новый ДеревоЗначений;
	ДеревоКолонок.Колонки.Добавить("ИмяГруппы" , ОписаниеСтрока);
	ДеревоКолонок.Колонки.Добавить("ИмяКолонки", ОписаниеСтрока);
	
	КореньДз = ДеревоКолонок.Строки;
		
	Сч = 0;
		
	ЗаполнитьВеткуДерева(МассивГруппКолонок, СтруктураГруппКолонок, КореньДз, Сч);
	
	Возврат ДеревоКолонок;

КонецФункции // СоздатьДеревоКолонок()

// Процедура формирует отчет
// 
// Параметры:
//  Нет
// 
&НаСервере
Процедура СформироватьОтчет(ТекстСообщения, СтрРегистрация)
	
	ТабличныйДокумент.Очистить();
	Если Не ЗначениеЗаполнено(Отчет.СпособКомпоновки) Тогда
		ТекстСообщения = Нстр("ru = 'Отчет не сформирован. Заполните способ компоновки данных.'");
		Возврат;	
	КонецЕсли; 
		
	//////////////////////////////////////////////////////////////
	// Область определения переменных
	Попытка
		ТаблицаКомпоновки   = ПолучитьТаблицуКомпоновки();	
	Исключение
		ТекстСообщения = Нстр("ru = 'Отчет не сформирован. Проверьте источник данных.'");
		Возврат;
	КонецПопытки;
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);
	
	СтруктураДанных   = ПолучитьСтруктуруВыводимыхДанных();
	СтруктураОбластей = ПолучитьОбластиМакета();
	
	МассивПолей 	= СтруктураДанных.МассивПолей;
	МассивРесурсов  = СтруктураДанных.МассивРесурсов;
	МассивГруппСтрок   = СтруктураДанных.МассивГруппСтрок;
	МассивГруппКолонок = СтруктураДанных.МассивГруппКолонок;
	
	МассивНеотображаемыхПолей = Новый Массив;
		
	СтруктураГруппКолонок = ПолучитьСтруктуруМассивовИменГруппКолонок(ТаблицаКомпоновки, СтруктураДанных);
	СтруктураДанных.Вставить("СтруктураГруппКолонок", СтруктураГруппКолонок);
	Если МассивГруппКолонок.Количество() > 0 Тогда
		СтруктураДанных.Вставить("МассивИменГруппКолонок", СтруктураГруппКолонок[МассивГруппКолонок[0]]);
	Иначе
		СтруктураДанных.Вставить("МассивИменГруппКолонок", Новый Массив);
	КонецЕсли;
	
	СтруктураДанных.Вставить("ЛинияПустая", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии));
	СтруктураДанных.Вставить("ЛинияСплошная", Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1));
		
	ОбластьТекст = СтруктураОбластей.ОбластьТекст;
	
	ЗапомнитьСсылка = Неопределено;
	
	// Вспомогательная таблица
	СтрокаСуммирования = "";
	КоличествоГруппКолонок = МассивРесурсов.Количество();
	ВспомогательнаяТаблица = Новый ТаблицаЗначений;
	Для каждого КлЗнч Из СтруктураГруппКолонок Цикл
		МассивИменГруппКолонок = КлЗнч.Значение;
		КоличествоГруппКолонок = КоличествоГруппКолонок * МассивИменГруппКолонок.Количество();
	КонецЦикла;
	Для СчетчикКолонок = 1 По КоличествоГруппКолонок Цикл
		ИмяТекКолонки  = "Имя_" + СчетчикКолонок;
		СтрокаСуммирования = ?(СтрокаСуммирования = "", ИмяТекКолонки, СтрокаСуммирования + ", " + ИмяТекКолонки);
		ВспомогательнаяТаблица.Колонки.Добавить(ИмяТекКолонки);
	КонецЦикла;
	Если МассивГруппКолонок.Количество() = 0 Тогда
		ВспомогательнаяТаблица.Колонки.Добавить("ИмяТекКолонки");
	Иначе	
	    Для каждого ЭлГр  Из МассивГруппКолонок Цикл 		 
			ВспомогательнаяТаблица.Колонки.Добавить("ИмяТекКолонки" + "_" + ЭлГр);		 
		КонецЦикла;
		// Временно:
		ВспомогательнаяТаблица.Колонки.Добавить("ИмяТекКолонки");
	КонецЕсли;
	
	СтруктураДанных.Вставить("ВспомогательнаяТаблица", ВспомогательнаяТаблица);
	
	Если МассивГруппКолонок.Количество() > 0 Тогда
		ТаблицаСоответсвияРесурсовКолонкам = СформироватьТаблицуСоответсвияРесурсовКолонкам(СтруктураДанных);
		СтруктураДанных.Вставить("ТаблицаСоответсвияРесурсовКолонкам", ТаблицаСоответсвияРесурсовКолонкам);
	КонецЕсли;    	

	
	//////////////////////////////////////////////////////////////
	// Результат запросов для формирования отчета.
	СтруктураРезультат = ПолучитьРезультатыЗапросов(ТаблицаКомпоновки, СтруктураДанных);
    Результат 	 = СтруктураРезультат.РезультатОсновногоЗапроса; 
	ТаблицаИтоги = СтруктураРезультат.РезультатИтоги;
	СтруктураДанных.Вставить("ТаблицаИтоги", ТаблицаИтоги);
	
	
	//////////////////////////////////////////////////////////////
	// Вывод заголовка и шапки
	ВывестиЗаголовокШапку(СтруктураДанных, СтруктураОбластей);
	
	
	//////////////////////////////////////////////////////////////
	// Вывод дерева
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	// Верхняя выборка по группировке "Элемент данных".
	ВыборкаВерх	= Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ЭлементДанных");
	Пока ВыборкаВерх.Следующий() Цикл
		
		Если ВыборкаВерх.ВидГруппы = 1 Тогда

			Если ВыборкаВерх.ЭлементДанных.НеВыводитьВОтчет Тогда
				Продолжить;                                                               			
			КонецЕсли;
			
			Уровень = ИзменитьУровень(ВыборкаВерх.Уровень(), ?(ЗапомнитьСсылка = ВыборкаВерх.ЭлементДанных, -1, 0));
			
			ЭтоФормула = ВыборкаВерх.ЭлементДанных.ВидГруппы = Перечисления.бит_ВидыГруппДанных.Формула;
			
			ВыводитьРесурсы = МассивГруппКолонок.Количество() = 0;
			ДопСтруктура = Новый Структура("МассивНеотображаемыхПолей, ПоказатьДанныеИерархии, ВыводитьРесурсы, Присоединить, ТипВывода",
								МассивНеотображаемыхПолей, Истина, ВыводитьРесурсы, Ложь, "ДляИерархии");
			ВывестиСтрокуДанных(ВыборкаВерх, СтруктураДанных, СтруктураОбластей, Уровень, ДопСтруктура);
						
			Если МассивГруппКолонок.Количество() > 0 Тогда
				
				// Вывод группировок колонок
				ВывестиГруппуКолонок(0, ВыборкаВерх, СтруктураДанных, СтруктураОбластей);
				
			ИначеЕсли Отчет.Иерархия <> "Только иерархия" Тогда
				
				Если МассивГруппСтрок.Количество() > 0 
					И (Не ЭтоФормула Или Отчет.ВыводитьДетализациюДляФормулы) Тогда
				
					// Вывод группировок строк
					МассивНеотображаемыхПолей = Новый Массив;
					ВывестиГруппуСтрок(0, ВыборкаВерх, СтруктураДанных, СтруктураОбластей, МассивНеотображаемыхПолей);
					
				ИначеЕсли МассивПолей.Количество() > 0 
					И (Не ЭтоФормула Или Отчет.ВыводитьДетализациюДляФормулы) Тогда
					
					// Вывод детальных записей
					ВывестиДетальныеЗаписи(ВыборкаВерх, СтруктураДанных, СтруктураОбластей);
	
				КонецЕсли;
			
			КонецЕсли;
						
		Иначе
			
			ЗапомнитьСсылка = ВыборкаВерх.ЭлементДанных;
		
		КонецЕсли;

	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	//ТабличныйДокумент.ФиксацияСверху = 6;
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);

КонецПроцедуры // СформироватьОтчет()

// Функция формирует таблицу выводимых данных.
// 
// Параметры:
//  Нет
//  
// Возвращаемое значение:
//  ТаблицаЗначений.
// 
&НаСервере
Функция СформироватьТаблицуСохраненияНастроекВыводимыхДанных()

	ТаблицаВыводимыхДанных = Новый ТаблицаЗначений;
	ТаблицаВыводимыхДанных.Колонки.Добавить("ТипПоля");
	ТаблицаВыводимыхДанных.Колонки.Добавить("Имя");
	ТаблицаВыводимыхДанных.Колонки.Добавить("Синоним");
	ТаблицаВыводимыхДанных.Колонки.Добавить("Выводить");
	ТаблицаВыводимыхДанных.Колонки.Добавить("ТипВывода");
		
	КореньДерева = ДеревоВыводимыхДанных.ПолучитьЭлементы();
	Для каждого ВеткаДерева Из КореньДерева Цикл
		Для каждого СтрокаДерева Из ВеткаДерева.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТаблицаВыводимыхДанных.Добавить();
	    	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.ТипПоля = ?(ВеткаДерева.Имя = "Ресурсы", "Ресурс", "Поле");
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаВыводимыхДанных;
	
КонецФункции // СформироватьТаблицуСохраненияНастроекВыводимыхДанных()

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//   СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Отчеты.бит_ОтчетПоСпособамКомпоновкиИсточников.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		СтруктураНастроек.Вставить(ИмяРеквизита, Отчет[ИмяРеквизита]);	
	КонецЦикла; 
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ОтборВОтчете"				, ДанныеФормыВЗначение(ОтборВОтчете, Тип("ТаблицаЗначений")));	
	СтруктураТаблиц.Вставить("ТаблицаОформленияУровней" , ДанныеФормыВЗначение(ТаблицаОформленияУровней, Тип("ТаблицаЗначений")));
	СтруктураТаблиц.Вставить("ТаблицаВыводимыхДанных"	, СформироватьТаблицуСохраненияНастроекВыводимыхДанных());
	СтруктураТаблиц.Вставить("ТаблицаПараметры"			, ДанныеФормыВЗначение(ТаблицаПараметры, Тип("ТаблицаЗначений")));
	СтруктураТаблиц.Вставить("ТаблицаСортировки"		, ДанныеФормыВЗначение(ТаблицаСортировки, Тип("ТаблицаЗначений")));   
	
	ХранилищеТаблиц = Новый ХранилищеЗначения(СтруктураТаблиц);
	
	СтруктураНастроек.Вставить("СтруктураТаблиц", ХранилищеТаблиц);
		
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка  - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	ТабличныйДокумент.Очистить();
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	ЗаполнитьЗначенияСвойств(Отчет, СтруктураНастроек);
	
	Если СтруктураНастроек.Свойство("СтруктураТаблиц") Тогда
		
		Табл_ОтборВОтчете 				= Новый ТаблицаЗначений;
		Табл_ТаблицаВыводимыхДанных 	= Новый ТаблицаЗначений;
		Табл_ТаблицаОформленияУровней 	= Новый ТаблицаЗначений;
		Табл_ТаблицаПараметры 			= Новый ТаблицаЗначений;
		
		СтруктураТаблиц = СтруктураНастроек.СтруктураТаблиц.Получить();
		СтруктураТаблиц.Свойство("ОтборВОтчете"				, Табл_ОтборВОтчете);
		СтруктураТаблиц.Свойство("ТаблицаВыводимыхДанных"	, Табл_ТаблицаВыводимыхДанных);
		СтруктураТаблиц.Свойство("ТаблицаОформленияУровней"	, Табл_ТаблицаОформленияУровней);
		СтруктураТаблиц.Свойство("ТаблицаПараметры"			, Табл_ТаблицаПараметры);
		
		Если Табл_ОтборВОтчете <> Неопределено Тогда
			ЗначениеВДанныеФормы(Табл_ОтборВОтчете, ОтборВОтчете);
		КонецЕсли; 
		Если Табл_ТаблицаОформленияУровней <> Неопределено Тогда
			ЗначениеВДанныеФормы(Табл_ТаблицаОформленияУровней, ТаблицаОформленияУровней);
		КонецЕсли; 
		Если Табл_ТаблицаПараметры <> Неопределено Тогда
			ЗначениеВДанныеФормы(Табл_ТаблицаПараметры, ТаблицаПараметры);	
		КонецЕсли;   		
		
		Если ЗначениеЗаполнено(Отчет.СпособКомпоновки) Тогда
			ЗаполнитьДеревоВыводимыхДанных(Табл_ТаблицаВыводимыхДанных);
		КонецЕсли;
		
		Если СтруктураТаблиц.Свойство("ТаблицаСортировки") Тогда
			ЗначениеВДанныеФормы(СтруктураТаблиц.ТаблицаСортировки, ТаблицаСортировки);
			ЗаполнитьТаблицуСортировки(Ложь);
		Иначе
			ЗаполнитьТаблицуСортировки(); 		
		КонецЕсли;
	
	КонецЕсли;
				
КонецПроцедуры // ПрименитьНастройки()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда	
		ПрименитьНастройки(НастройкаПоУмолчанию);
	Иначе
		Отчет.Иерархия = Элементы.Иерархия.СписокВыбора[1].Значение;
		Отчет.Период.Вариант = ВариантСтандартногоПериода.Месяц;
		Отчет.ВыводитьКодификаторы 		= Истина;
		Отчет.ВариантГруппировкиСтрок = "В разных колонках";
		Отчет.ФорматДаты = "ДФ='МММ ггг'";
		ЗаполнитьТаблицуСортировки();
	КонецЕсли;
	      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура заполняет таблицу сортировки по умолчанию.
// 
&НаСервере
Процедура ЗаполнитьТаблицуСортировки(ОчищатьТаблицу = Истина)  	
		
	СписокПолейСортировки = Элементы.ТаблицаСортировкиИмя.СписокВыбора;
	СписокПолейСортировки.Очистить();
		
	// СоответствиеПолейСортировки = Новый Соответствие;
	         
	Если ОчищатьТаблицу Тогда
		ТаблицаСортировки.Очистить();
		СтрокаСортировки = ТаблицаСортировки.Добавить();
		СтрокаСортировки.Имя 		   = "Кодификатор";
		// СтрокаСортировки.Представление = "Кодификатор";
	КонецЕсли;
	СписокПолейСортировки.Добавить("Кодификатор");
	// СоответствиеПолейСортировки.Вставить("Кодификатор", "Кодификатор");
		
	Если ЗначениеЗаполнено(Отчет.СпособКомпоновки) Тогда
		Для каждого ВеткаДерева Из ДеревоВыводимыхДанных.ПолучитьЭлементы() Цикл
			Если ВеткаДерева.Имя = "Поля" Тогда
				Для каждого СтрокаПоле Из ВеткаДерева.ПолучитьЭлементы() Цикл
					СписокПолейСортировки.Добавить(СтрокаПоле.Имя);
					// СоответствиеПолейСортировки.Вставить(СтрокаПоле.Синоним, СтрокаПоле.Имя);
				КонецЦикла;
				Прервать;
			КонецЕсли;  		
		КонецЦикла;	
	КонецЕсли;
	
	// ФКэшЗначений.Вставить("СоответствиеПолейСортировки", СоответствиеПолейСортировки);
		      
КонецПроцедуры // ЗаполнитьТаблицуСортировки()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",
											ПараметрыФормы,
											ЭтаФорма);	
													
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
		
 	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура - завершение обработчика события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(Настройка, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Настройка) Тогда		
		ПрименитьНастройки(Настройка);
		бит_РаботаСДиалогамиКлиент.РазвернутьДеревоПолностью(Элементы.ДеревоВыводимыхДанных, ДеревоВыводимыхДанных.ПолучитьЭлементы());
	КонецЕсли;
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()

#КонецОбласти

