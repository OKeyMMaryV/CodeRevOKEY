////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
                                   
// Процедура выполняет заполнение макета отчета
//
&НаСервере
Процедура СформироватьОтчет()
	
	ТаблДок = Результат;
	ТаблДок.Очистить();
	Макет =РеквизитФормыВЗначение("Отчет").ПолучитьМакет("Макет");
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаОтчета");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьИтог = Макет.ПолучитьОбласть("Итог");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
	|ПОМЕСТИТЬ ОрганизацииПериметраТек
	|ИЗ
	|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&ДатаТек, ПериметрКонсолидации = &Организация) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
	|ПОМЕСТИТЬ ОрганизацииПериметраПред
	|ИЗ
	|	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&ДатаПред, ПериметрКонсолидации = &Организация) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.ТипПроцентнойСтавки)
	|				ТОГДА бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ТипПроцентнойСтавки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СБ_ВидПлавающейСтавки)
	|				ТОГДА бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ВидПлавающейСтавки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.ПроцентнаяСтавка)
	|				ТОГДА бит_ЗначенияПараметровФинансовыхДоговоров.ЗначениеПараметра
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ПроцентнаяСтавка
	|ПОМЕСТИТЬ ПараметрыДоговоров
	|ИЗ
	|	РегистрСведений.бит_ЗначенияПараметровФинансовыхДоговоров КАК бит_ЗначенияПараметровФинансовыхДоговоров
	|ГДЕ
	|	(бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.ТипПроцентнойСтавки)
	|			ИЛИ бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.СБ_ВидПлавающейСтавки)
	|			ИЛИ бит_ЗначенияПараметровФинансовыхДоговоров.Параметр = ЗНАЧЕНИЕ(ПланВидовХарактеристик.бит_ВидыПараметровФинансовыхДоговоров.ПроцентнаяСтавка))
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ЗначенияПараметровФинансовыхДоговоров.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_ТраншиПоФинансовымДоговорамОбороты.ДоговорКонтрагента,
	|	МИНИМУМ(бит_ТраншиПоФинансовымДоговорамОбороты.СБ_ПроцентнаяСтавкаПоТраншу) КАК МинСтавка,
	|	МАКСИМУМ(бит_ТраншиПоФинансовымДоговорамОбороты.СБ_ПроцентнаяСтавкаПоТраншу) КАК МаксСтавка
	|ПОМЕСТИТЬ Транши
	|ИЗ
	|	РегистрНакопления.бит_ТраншиПоФинансовымДоговорам.Обороты КАК бит_ТраншиПоФинансовымДоговорамОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	бит_ТраншиПоФинансовымДоговорамОбороты.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_му_НоминальныеСтавкиСрезПоследних.ДоговорКонтрагента,
	|	бит_му_НоминальныеСтавкиСрезПоследних.Ставка,
	|	бит_му_НоминальныеСтавкиСрезПоследних.ДополнительнаяСоставляющая
	|ПОМЕСТИТЬ НоминальныеСтавки
	|ИЗ
	|	РегистрСведений.бит_му_НоминальныеСтавки.СрезПоследних(&ДатаТек, ) КАК бит_му_НоминальныеСтавкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора КАК ТипДоговора,
	|	ВЫБОР
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов.Код = ""643""
	|			ТОГДА ""RUB""
	|		ИНАЧЕ бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов.Наименование
	|	КОНЕЦ КАК Валюта,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная)
	|				ТОГДА ЕСТЬNULL(Транши.МинСтавка, 0)
	|			КОГДА ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Плавающая)
	|				ТОГДА ЕСТЬNULL(НоминальныеСтавки.Ставка, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК МинСтавка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная)
	|				ТОГДА ЕСТЬNULL(Транши.МаксСтавка, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК МаксСтавка,
	|	ЕСТЬNULL(ПараметрыДоговоров.ПроцентнаяСтавка, 0) КАК ПроцентнаяСтавка,
	|	НАЧАЛОПЕРИОДА(бит_Дополнительный_2Остатки.Субконто2.СрокДействия, ГОД) КАК ГодПогашения,
	|	СУММА(ВЫБОР
	|			КОГДА бит_Дополнительный_2Остатки.Счет В (&ОсновныеСчета)
	|				ТОГДА бит_Дополнительный_2Остатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОсновнаяТек,
	|	СУММА(0) КАК СуммаОсновнаяПред,
	|	СУММА(ВЫБОР
	|			КОГДА бит_Дополнительный_2Остатки.Счет В (&СчетаОблигацииСправедливая)
	|				ТОГДА бит_Дополнительный_2Остатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОблигацииСправедливаяТек,
	|	СУММА(0) КАК СуммаОблигацииСправедливаяПред,
	|	СУММА(ВЫБОР
	|			КОГДА бит_Дополнительный_2Остатки.Счет В (&СчетаОблигацииТекущая)
	|				ТОГДА бит_Дополнительный_2Остатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОблигацииТекущаяТек,
	|	СУММА(0) КАК СуммаОблигацииТекущаяПред,
	|	ВЫБОР
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеОбеспеченные)
	|			ТОГДА 1
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ОблигационныеНеобеспеченные)
	|			ТОГДА 2
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеНеобеспеченные)
	|			ТОГДА 3
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.СвязанныхСторонНеобеспеченные)
	|			ТОГДА 4
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицНеобеспеченные)
	|			ТОГДА 5
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицОбеспеченные)
	|			ТОГДА 6
	|		ИНАЧЕ 7
	|	КОНЕЦ КАК Порядок,
	|	ЕСТЬNULL(ПараметрыДоговоров.ТипПроцентнойСтавки, НЕОПРЕДЕЛЕНО) КАК ТипПроцентнойСтавки,
	|	ЕСТЬNULL(ПараметрыДоговоров.ВидПлавающейСтавки, НЕОПРЕДЕЛЕНО) КАК ВидПлавающейСтавки,
	|	бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов КАК ВалютаСсылка,
	|	бит_Дополнительный_2Остатки.Субконто2 КАК Договор
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|			&ДатаТек,
	|			,
	|			&Субконто,
	|			Организация В
	|					(ВЫБРАТЬ
	|						ВТ.Организация
	|					ИЗ
	|						ОрганизацииПериметраТек КАК ВТ)
	|				И Субконто2.бит_му_ТипКредитногоДоговора <> ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ПустаяСсылка)) КАК бит_Дополнительный_2Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыДоговоров КАК ПараметрыДоговоров
	|			ЛЕВОЕ СОЕДИНЕНИЕ НоминальныеСтавки КАК НоминальныеСтавки
	|			ПО ПараметрыДоговоров.ВидПлавающейСтавки = НоминальныеСтавки.ДополнительнаяСоставляющая
	|				И (ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Плавающая))
	|				И (ПараметрыДоговоров.ДоговорКонтрагента = НоминальныеСтавки.ДоговорКонтрагента
	|					ИЛИ ПараметрыДоговоров.ДоговорКонтрагента.бит_ПроектДоговора = НоминальныеСтавки.ДоговорКонтрагента)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Транши КАК Транши
	|			ПО ПараметрыДоговоров.ДоговорКонтрагента = Транши.ДоговорКонтрагента
	|				И (ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная))
	|		ПО бит_Дополнительный_2Остатки.Субконто2 = ПараметрыДоговоров.ДоговорКонтрагента
	|ГДЕ
	|	бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора <> ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ПараметрыДоговоров.ПроцентнаяСтавка, 0),
	|	ЕСТЬNULL(ПараметрыДоговоров.ТипПроцентнойСтавки, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ПараметрыДоговоров.ВидПлавающейСтавки, НЕОПРЕДЕЛЕНО),
	|	бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора,
	|	ВЫБОР
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов.Код = ""643""
	|			ТОГДА ""RUB""
	|		ИНАЧЕ бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов.Наименование
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(бит_Дополнительный_2Остатки.Субконто2.СрокДействия, ГОД),
	|	ВЫБОР
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеОбеспеченные)
	|			ТОГДА 1
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ОблигационныеНеобеспеченные)
	|			ТОГДА 2
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеНеобеспеченные)
	|			ТОГДА 3
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.СвязанныхСторонНеобеспеченные)
	|			ТОГДА 4
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицНеобеспеченные)
	|			ТОГДА 5
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицОбеспеченные)
	|			ТОГДА 6
	|		ИНАЧЕ 7
	|	КОНЕЦ,
	|	бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов,
	|	бит_Дополнительный_2Остатки.Субконто2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора,
	|	ВЫБОР
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов.Код = ""643""
	|			ТОГДА ""RUB""
	|		ИНАЧЕ бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов.Наименование
	|	КОНЕЦ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная)
	|				ТОГДА ЕСТЬNULL(Транши.МинСтавка, 0)
	|			КОГДА ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Плавающая)
	|				ТОГДА ЕСТЬNULL(НоминальныеСтавки.Ставка, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная)
	|				ТОГДА ЕСТЬNULL(Транши.МаксСтавка, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	ЕСТЬNULL(ПараметрыДоговоров.ПроцентнаяСтавка, 0),
	|	НАЧАЛОПЕРИОДА(бит_Дополнительный_2Остатки.Субконто2.СрокДействия, ГОД),
	|	СУММА(0),
	|	СУММА(ВЫБОР
	|			КОГДА бит_Дополнительный_2Остатки.Счет В (&ОсновныеСчета)
	|				ТОГДА бит_Дополнительный_2Остатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(0),
	|	СУММА(ВЫБОР
	|			КОГДА бит_Дополнительный_2Остатки.Счет В (&СчетаОблигацииСправедливая)
	|				ТОГДА бит_Дополнительный_2Остатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(0),
	|	СУММА(ВЫБОР
	|			КОГДА бит_Дополнительный_2Остатки.Счет В (&СчетаОблигацииТекущая)
	|				ТОГДА бит_Дополнительный_2Остатки.СуммаУпрОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	ВЫБОР
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеОбеспеченные)
	|			ТОГДА 1
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ОблигационныеНеобеспеченные)
	|			ТОГДА 2
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеНеобеспеченные)
	|			ТОГДА 3
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.СвязанныхСторонНеобеспеченные)
	|			ТОГДА 4
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицНеобеспеченные)
	|			ТОГДА 5
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицОбеспеченные)
	|			ТОГДА 6
	|		ИНАЧЕ 7
	|	КОНЕЦ,
	|	ЕСТЬNULL(ПараметрыДоговоров.ТипПроцентнойСтавки, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ПараметрыДоговоров.ВидПлавающейСтавки, НЕОПРЕДЕЛЕНО),
	|	бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов,
	|	бит_Дополнительный_2Остатки.Субконто2
	|ИЗ
	|	РегистрБухгалтерии.бит_Дополнительный_2.Остатки(
	|			&ДатаПред,
	|			,
	|			&Субконто,
	|			Организация В
	|					(ВЫБРАТЬ
	|						ВТ.Организация
	|					ИЗ
	|						ОрганизацииПериметраПред КАК ВТ)
	|				И Субконто2.бит_му_ТипКредитногоДоговора <> ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ПустаяСсылка)) КАК бит_Дополнительный_2Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыДоговоров КАК ПараметрыДоговоров
	|			ЛЕВОЕ СОЕДИНЕНИЕ НоминальныеСтавки КАК НоминальныеСтавки
	|			ПО ПараметрыДоговоров.ВидПлавающейСтавки = НоминальныеСтавки.ДополнительнаяСоставляющая
	|				И (ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Плавающая))
	|				И (ПараметрыДоговоров.ДоговорКонтрагента = НоминальныеСтавки.ДоговорКонтрагента
	|					ИЛИ ПараметрыДоговоров.ДоговорКонтрагента.бит_ПроектДоговора = НоминальныеСтавки.ДоговорКонтрагента)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Транши КАК Транши
	|			ПО ПараметрыДоговоров.ДоговорКонтрагента = Транши.ДоговорКонтрагента
	|				И (ПараметрыДоговоров.ТипПроцентнойСтавки = ЗНАЧЕНИЕ(Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная))
	|		ПО бит_Дополнительный_2Остатки.Субконто2 = ПараметрыДоговоров.ДоговорКонтрагента
	|ГДЕ
	|	бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора <> ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ПараметрыДоговоров.ПроцентнаяСтавка, 0),
	|	ЕСТЬNULL(ПараметрыДоговоров.ТипПроцентнойСтавки, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ПараметрыДоговоров.ВидПлавающейСтавки, НЕОПРЕДЕЛЕНО),
	|	бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора,
	|	ВЫБОР
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов.Код = ""643""
	|			ТОГДА ""RUB""
	|		ИНАЧЕ бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов.Наименование
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(бит_Дополнительный_2Остатки.Субконто2.СрокДействия, ГОД),
	|	ВЫБОР
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеОбеспеченные)
	|			ТОГДА 1
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ОблигационныеНеобеспеченные)
	|			ТОГДА 2
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеНеобеспеченные)
	|			ТОГДА 3
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.СвязанныхСторонНеобеспеченные)
	|			ТОГДА 4
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицНеобеспеченные)
	|			ТОГДА 5
	|		КОГДА бит_Дополнительный_2Остатки.Субконто2.бит_му_ТипКредитногоДоговора = ЗНАЧЕНИЕ(Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицОбеспеченные)
	|			ТОГДА 6
	|		ИНАЧЕ 7
	|	КОНЕЦ,
	|	бит_Дополнительный_2Остатки.Субконто2.ВалютаВзаиморасчетов,
	|	бит_Дополнительный_2Остатки.Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.ТипДоговора КАК ТипДоговора,
	|	Данные.Договор,
	|	Данные.Валюта КАК Валюта,
	|	Данные.МинСтавка КАК МинСтавка,
	|	Данные.МаксСтавка КАК МаксСтавка,
	|	Данные.ПроцентнаяСтавка,
	|	Данные.ГодПогашения,
	|	СУММА(Данные.СуммаОсновнаяТек) КАК СуммаОсновнаяТек,
	|	СУММА(Данные.СуммаОсновнаяПред) КАК СуммаОсновнаяПред,
	|	СУММА(Данные.СуммаОблигацииСправедливаяТек) КАК СуммаОблигацииСправедливаяТек,
	|	СУММА(Данные.СуммаОблигацииСправедливаяПред) КАК СуммаОблигацииСправедливаяПред,
	|	СУММА(Данные.СуммаОблигацииТекущаяТек) КАК СуммаОблигацииТекущаяТек,
	|	СУММА(Данные.СуммаОблигацииТекущаяПред) КАК СуммаОблигацииТекущаяПред,
	|	Данные.Порядок КАК Порядок,
	|	Данные.ТипПроцентнойСтавки,
	|	Данные.ВидПлавающейСтавки,
	|	Данные.ВалютаСсылка
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	(Данные.СуммаОсновнаяТек <> 0
	|			ИЛИ Данные.СуммаОсновнаяПред <> 0
	|			ИЛИ Данные.СуммаОблигацииСправедливаяТек <> 0
	|			ИЛИ Данные.СуммаОблигацииСправедливаяПред <> 0
	|			ИЛИ Данные.СуммаОблигацииТекущаяТек <> 0
	|			ИЛИ Данные.СуммаОблигацииТекущаяПред <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ТипДоговора,
	|	Данные.Валюта,
	|	Данные.ТипПроцентнойСтавки,
	|	Данные.ВидПлавающейСтавки,
	|	Данные.ПроцентнаяСтавка,
	|	Данные.ГодПогашения,
	|	Данные.Порядок,
	|	Данные.ВалютаСсылка,
	|	Данные.Договор,
	|	Данные.МаксСтавка,
	|	Данные.МинСтавка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("ДатаПред", Новый Граница(КонецДня(Отчет.ДатаПред), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаТек", Новый Граница(КонецДня(Отчет.ДатаТек), ВидГраницы.Включая));
	Субконто = Новый СписокЗначений;
	Субконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Контрагенты);
	Субконто.Добавить(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ДоговорыКонтрагентов);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	ОсновныеСчета = Новый СписокЗначений;
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ДолгосрочныеКредитыИЗаймыОсновнаяСумма")); // 411
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ДолгосрочныеКредитыИЗаймыОсновнаяСуммаВал")); // 412
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ДолгосрочныеКредитыИЗаймыПроценты")); // 413
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ДолгосрочныеКредитыИЗаймыПроцентыВал")); // 414
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.КраткосрочныеКредитыЗаймыОсновнаяСумма")); // 511
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.КраткосрочныеКредитыЗаймыОсновнаяСуммаВал")); // 512
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.КраткосрочныеКредитыЗаймыПроценты")); // 513
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.КраткосрочныеКредитыЗаймыПроцентыВал")); // 514
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ТекущаяДоляДолгосрочныхОбязательств")); // 515
	ОсновныеСчета.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ТекущаяДоляДолгосрочныхОбязательствВал")); // 516
	Запрос.УстановитьПараметр("ОсновныеСчета",ОсновныеСчета);
	СчетаОблигацииСправедливая = Новый СписокЗначений;
	СчетаОблигацииСправедливая.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ДолгосрочныеОблигационныеЗаймыОсновнаяСумма")); // 415
	СчетаОблигацииСправедливая.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.КраткосрочныеОблигационныеЗаймыОсновнаяСумма")); // 517
	СчетаОблигацииСправедливая.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ОблигационныеЗаймыПроценты")); // 518
	СчетаОблигацииСправедливая.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ДолгосрочныеОблигационныеЗаймыРасходы")); // 416
	Запрос.УстановитьПараметр("СчетаОблигацииСправедливая", СчетаОблигацииСправедливая);
	СчетаОблигацииТекущая = Новый СписокЗначений;
	СчетаОблигацииТекущая.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ДолгосрочныеОблигационныеЗаймыОсновнаяСумма")); // 415
	СчетаОблигацииТекущая.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.КраткосрочныеОблигационныеЗаймыОсновнаяСумма")); // 517
	СчетаОблигацииТекущая.Добавить(ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ОблигационныеЗаймыПроценты")); // 518
	Запрос.УстановитьПараметр("СчетаОблигацииТекущая", СчетаОблигацииТекущая);
	Запрос.УстановитьПараметр("Организация", Отчет.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();                                       
	
	ОбластьШапка.Параметры.ЗаголовокОтчета = ?(Отчет.ЯзыкОтчета = "Русский", "Условия погашения долга и график платежей", "Terms and debt repayment schedule");
	ОбластьШапка.Параметры.РазрядностьОтчета = ?(Отчет.ЯзыкОтчета = "Русский", "’000 РУБ", "’000 RUB");
	ОбластьШапка.Параметры.Валюта = ?(Отчет.ЯзыкОтчета = "Русский", "Валюта", "Currency");
	ОбластьШапка.Параметры.Ставка = ?(Отчет.ЯзыкОтчета = "Русский", "Номинальная процентная ставка", "Nominal interest rate");
	ОбластьШапка.Параметры.ГодПогашения = ?(Отчет.ЯзыкОтчета = "Русский", "Год погашения", "Year of maturity");
	ОбластьШапка.Параметры.ПериодТек = ?(Отчет.ЯзыкОтчета = "Русский", Формат(Отчет.ДатаТек, "Л=ru; ДЛФ=DD"), Формат(Отчет.ДатаТек, "Л=en; ДФ='d MMMM yyyy'"));
	ОбластьШапка.Параметры.ПериодПред = ?(Отчет.ЯзыкОтчета = "Русский", Формат(Отчет.ДатаПред, "Л=ru; ДЛФ=DD"), Формат(Отчет.ДатаПред, "Л=en; ДФ='d MMMM yyyy'"));
	ОбластьШапка.Параметры.СправедливаяСтоимость = ?(Отчет.ЯзыкОтчета = "Русский", "Справедливая стоимость", "Face value");
	ОбластьШапка.Параметры.ТекущаяСтоимость = ?(Отчет.ЯзыкОтчета = "Русский", "Текущая стоимость", "Carrying amount");
	
	ТаблДок.Вывести(ОбластьШапка);
	
	ИтогСправедливаяТек = 0;
	ИтогСправедливаяПред = 0;
	ИтогТекущаяТек = 0;
	ИтогТекущаяПред = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеОбеспеченные") Тогда
			ОбластьСтрока.Параметры.ОсновнаяГруппировка = ?(Отчет.ЯзыкОтчета = "Русский", "Обеспеченный банковский кредит", "Secured bank loan");
		ИначеЕсли Выборка.ТипДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.ОблигационныеНеобеспеченные") Тогда
			ОбластьСтрока.Параметры.ОсновнаяГруппировка = ?(Отчет.ЯзыкОтчета = "Русский", "Необеспеченные облигации", "Unsecured bonds");
		ИначеЕсли Выборка.ТипДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.БанковскиеНеобеспеченные") Тогда
			ОбластьСтрока.Параметры.ОсновнаяГруппировка = ?(Отчет.ЯзыкОтчета = "Русский", "Необеспеченный банковский кредит", "Unsecured bank facility");
		ИначеЕсли Выборка.ТипДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.СвязанныхСторонНеобеспеченные") Тогда
			ОбластьСтрока.Параметры.ОсновнаяГруппировка = ?(Отчет.ЯзыкОтчета = "Русский", "Необеспеченный займ, полученный от связанных сторон", "Unsecured loans from related parties");
		ИначеЕсли Выборка.ТипДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицНеобеспеченные") Тогда
			ОбластьСтрока.Параметры.ОсновнаяГруппировка = ?(Отчет.ЯзыкОтчета = "Русский", "Необеспеченный займ, полученный от третьих лиц", "Unsecured loans from other companies");
		ИначеЕсли Выборка.ТипДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.ТретьихЛицОбеспеченные") Тогда
			ОбластьСтрока.Параметры.ОсновнаяГруппировка = ?(Отчет.ЯзыкОтчета = "Русский", "Обеспеченный займ, полученный от третьих лиц", "Secured loans from other companies");
		КонецЕсли;	
		
		ОбластьСтрока.Параметры.Валюта = Выборка.Валюта;
		Если Выборка.ТипПроцентнойСтавки = ПредопределенноеЗначение("Перечисление.бит_ТипыПроцентныхСтавокПоФинансовымДоговорам.Фиксированная") Тогда
			Если Выборка.МинСтавка = 0 И Выборка.МаксСтавка = 0 Тогда
				ОбластьСтрока.Параметры.Ставка = Строка(Выборка.ПроцентнаяСтавка) + "%";
			ИначеЕсли Выборка.МинСтавка = 0 Тогда
				ОбластьСтрока.Параметры.Ставка = Строка(Мин(Выборка.ПроцентнаяСтавка, Выборка.МаксСтавка)) + "-" + Строка(Макс(Выборка.ПроцентнаяСтавка, Выборка.МаксСтавка)) + "%";
			ИначеЕсли Выборка.МаксСтавка = 0 Тогда
				ОбластьСтрока.Параметры.Ставка = Строка(Мин(Выборка.ПроцентнаяСтавка, Выборка.МинСтавка)) + "-" + Строка(Макс(Выборка.ПроцентнаяСтавка, Выборка.МинСтавка)) + "%";	
			ИначеЕсли Выборка.МинСтавка = Выборка.МаксСтавка Тогда
				ОбластьСтрока.Параметры.Ставка = Строка(Выборка.МинСтавка) + "%";
			Иначе
				ОбластьСтрока.Параметры.Ставка = Строка(Выборка.МинСтавка) + "-" + Строка(Выборка.МаксСтавка) + "%";
			КонецЕсли;	
		Иначе // плавающая
			Если Выборка.ВидПлавающейСтавки = ПредопределенноеЗначение("Справочник.бит_му_ВидыДополнительныхСтавок.СБ_MosPrimeRateOneMonth") Тогда
				ОбластьСтрока.Параметры.Ставка = Строка(Выборка.МинСтавка) + "%+1mnt Mosprime";
			ИначеЕсли Выборка.ВидПлавающейСтавки = ПредопределенноеЗначение("Справочник.бит_му_ВидыДополнительныхСтавок.СБ_MosPrimeRateThreeMonths") Тогда
				ОбластьСтрока.Параметры.Ставка = Строка(Выборка.МинСтавка) + "%+3mnt Mosprime";
			Иначе
				ОбластьСтрока.Параметры.Ставка = Строка(Выборка.МинСтавка) + "%+" + Выборка.ВидПлавающейСтавки;
			КонецЕсли;
		КонецЕсли;
				
		ОбластьСтрока.Параметры.ГодПогашения = Формат(Выборка.ГодПогашения, "ДФ=гггг");
		
		Если Выборка.ТипДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.ОблигационныеНеобеспеченные") Тогда
			ОбластьСтрока.Параметры.СправедливаяСтоимостьТек = - Выборка.СуммаОблигацииСправедливаяТек;
			ОбластьСтрока.Параметры.ТекущаяСтоимостьТек = - Выборка.СуммаОблигацииТекущаяТек;
			ОбластьСтрока.Параметры.СправедливаяСтоимостьПред = - Выборка.СуммаОблигацииСправедливаяПред;
			ОбластьСтрока.Параметры.ТекущаяСтоимостьПред = - Выборка.СуммаОблигацииТекущаяПред;
		Иначе
			ОбластьСтрока.Параметры.СправедливаяСтоимостьТек = - Выборка.СуммаОсновнаяТек;
			ОбластьСтрока.Параметры.ТекущаяСтоимостьТек = - Выборка.СуммаОсновнаяТек;
			ОбластьСтрока.Параметры.СправедливаяСтоимостьПред = - Выборка.СуммаОсновнаяПред;
			ОбластьСтрока.Параметры.ТекущаяСтоимостьПред = - Выборка.СуммаОсновнаяПред;
		КонецЕсли;
		
		Если Выборка.ТипДоговора = ПредопределенноеЗначение("Перечисление.бит_му_ТипыКредитногоДоговора.ОблигационныеНеобеспеченные") Тогда
			
			СтруктураПараметров1 = Новый Структура;
			СтруктураПараметров1.Вставить("ТипДоговора"			, Выборка.ТипДоговора);
			СтруктураПараметров1.Вставить("Валюта"				, Выборка.ВалютаСсылка);
			СтруктураПараметров1.Вставить("ТипПроцентнойСтавки"	, Выборка.ТипПроцентнойСтавки);
			СтруктураПараметров1.Вставить("ВидПлавающейСтавки"	, Выборка.ВидПлавающейСтавки);
			СтруктураПараметров1.Вставить("ГодПогашения"		, Выборка.ГодПогашения);
			СтруктураПараметров1.Вставить("Дата"				, Отчет.ДатаТек);
			СтруктураПараметров1.Вставить("Счета"				, СчетаОблигацииСправедливая);
			СтруктураПараметров1.Вставить("МинСтавка"			, Выборка.МинСтавка);
			СтруктураПараметров1.Вставить("МаксСтавка"			, Выборка.МаксСтавка);
			СтруктураПараметров1.Вставить("ПроцентнаяСтавка"	, Выборка.ПроцентнаяСтавка);
			СтруктураПараметров1.Вставить("ТипСтоимости"		, "справедливая");
			ОбластьСтрока.Параметры.РасшифровкаСправТек = СтруктураПараметров1;
			
			СтруктураПараметров2 = Новый Структура;
			СтруктураПараметров2.Вставить("ТипДоговора"			, Выборка.ТипДоговора);
			СтруктураПараметров2.Вставить("Валюта"				, Выборка.ВалютаСсылка);
			СтруктураПараметров2.Вставить("ТипПроцентнойСтавки"	, Выборка.ТипПроцентнойСтавки);
			СтруктураПараметров2.Вставить("ВидПлавающейСтавки"	, Выборка.ВидПлавающейСтавки);
			СтруктураПараметров2.Вставить("ГодПогашения"		, Выборка.ГодПогашения);
			СтруктураПараметров2.Вставить("Дата"				, Отчет.ДатаТек);
			СтруктураПараметров2.Вставить("Счета"				, СчетаОблигацииТекущая);
			СтруктураПараметров2.Вставить("МинСтавка"			, Выборка.МинСтавка);
			СтруктураПараметров2.Вставить("МаксСтавка"			, Выборка.МаксСтавка);
			СтруктураПараметров2.Вставить("ПроцентнаяСтавка"	, Выборка.ПроцентнаяСтавка);
			СтруктураПараметров2.Вставить("ТипСтоимости"		, "текущая");
			ОбластьСтрока.Параметры.РасшифровкаТекТек = СтруктураПараметров2;
			
			СтруктураПараметров3 = Новый Структура;
			СтруктураПараметров3.Вставить("ТипДоговора"			, Выборка.ТипДоговора);
			СтруктураПараметров3.Вставить("Валюта"				, Выборка.ВалютаСсылка);
			СтруктураПараметров3.Вставить("ТипПроцентнойСтавки"	, Выборка.ТипПроцентнойСтавки);
			СтруктураПараметров3.Вставить("ВидПлавающейСтавки"	, Выборка.ВидПлавающейСтавки);
			СтруктураПараметров3.Вставить("ГодПогашения"		, Выборка.ГодПогашения);
			СтруктураПараметров3.Вставить("Дата"				, Отчет.ДатаПред);
			СтруктураПараметров3.Вставить("Счета"				, СчетаОблигацииСправедливая);
			СтруктураПараметров3.Вставить("МинСтавка"			, Выборка.МинСтавка);
			СтруктураПараметров3.Вставить("МаксСтавка"			, Выборка.МаксСтавка);
			СтруктураПараметров3.Вставить("ПроцентнаяСтавка"	, Выборка.ПроцентнаяСтавка);
			СтруктураПараметров3.Вставить("ТипСтоимости"		, "справедливая");
			ОбластьСтрока.Параметры.РасшифровкаСправПред = СтруктураПараметров3;
			
			СтруктураПараметров4 = Новый Структура;
			СтруктураПараметров4.Вставить("ТипДоговора"			, Выборка.ТипДоговора);
			СтруктураПараметров4.Вставить("Валюта"				, Выборка.ВалютаСсылка);
			СтруктураПараметров4.Вставить("ТипПроцентнойСтавки"	, Выборка.ТипПроцентнойСтавки);
			СтруктураПараметров4.Вставить("ВидПлавающейСтавки"	, Выборка.ВидПлавающейСтавки);
			СтруктураПараметров4.Вставить("ГодПогашения"		, Выборка.ГодПогашения);
			СтруктураПараметров4.Вставить("Дата"				, Отчет.ДатаПред);
			СтруктураПараметров4.Вставить("Счета"				, СчетаОблигацииТекущая);
			СтруктураПараметров4.Вставить("МинСтавка"			, Выборка.МинСтавка);
			СтруктураПараметров4.Вставить("МаксСтавка"			, Выборка.МаксСтавка);
			СтруктураПараметров4.Вставить("ПроцентнаяСтавка"	, Выборка.ПроцентнаяСтавка);
			СтруктураПараметров4.Вставить("ТипСтоимости"		, "текущая");
			ОбластьСтрока.Параметры.РасшифровкаТекПред = СтруктураПараметров4;
		Иначе
			СтруктураПараметров1 = Новый Структура;
			СтруктураПараметров1.Вставить("ТипДоговора"			, Выборка.ТипДоговора);
			СтруктураПараметров1.Вставить("Валюта"				, Выборка.ВалютаСсылка);
			СтруктураПараметров1.Вставить("ТипПроцентнойСтавки"	, Выборка.ТипПроцентнойСтавки);
			СтруктураПараметров1.Вставить("ВидПлавающейСтавки"	, Выборка.ВидПлавающейСтавки);
			СтруктураПараметров1.Вставить("ГодПогашения"		, Выборка.ГодПогашения);
			СтруктураПараметров1.Вставить("Дата"				, Отчет.ДатаТек);
			СтруктураПараметров1.Вставить("Счета"				, ОсновныеСчета);
			СтруктураПараметров1.Вставить("МинСтавка"			, Выборка.МинСтавка);
			СтруктураПараметров1.Вставить("МаксСтавка"			, Выборка.МаксСтавка);
			СтруктураПараметров1.Вставить("ПроцентнаяСтавка"	, Выборка.ПроцентнаяСтавка);
			СтруктураПараметров1.Вставить("ТипСтоимости"		, "справедливая");
			ОбластьСтрока.Параметры.РасшифровкаСправТек = СтруктураПараметров1;
			
			СтруктураПараметров2 = Новый Структура;
			СтруктураПараметров2.Вставить("ТипДоговора"			, Выборка.ТипДоговора);
			СтруктураПараметров2.Вставить("Валюта"				, Выборка.ВалютаСсылка);
			СтруктураПараметров2.Вставить("ТипПроцентнойСтавки"	, Выборка.ТипПроцентнойСтавки);
			СтруктураПараметров2.Вставить("ВидПлавающейСтавки"	, Выборка.ВидПлавающейСтавки);
			СтруктураПараметров2.Вставить("ГодПогашения"		, Выборка.ГодПогашения);
			СтруктураПараметров2.Вставить("Дата"				, Отчет.ДатаТек);
			СтруктураПараметров2.Вставить("Счета"				, ОсновныеСчета);
			СтруктураПараметров2.Вставить("МинСтавка"			, Выборка.МинСтавка);
			СтруктураПараметров2.Вставить("МаксСтавка"			, Выборка.МаксСтавка);
			СтруктураПараметров2.Вставить("ПроцентнаяСтавка"	, Выборка.ПроцентнаяСтавка);
			СтруктураПараметров2.Вставить("ТипСтоимости"		, "текущая");
			ОбластьСтрока.Параметры.РасшифровкаТекТек = СтруктураПараметров2;
			
			СтруктураПараметров3 = Новый Структура;
			СтруктураПараметров3.Вставить("ТипДоговора"			, Выборка.ТипДоговора);
			СтруктураПараметров3.Вставить("Валюта"				, Выборка.ВалютаСсылка);
			СтруктураПараметров3.Вставить("ТипПроцентнойСтавки"	, Выборка.ТипПроцентнойСтавки);
			СтруктураПараметров3.Вставить("ВидПлавающейСтавки"	, Выборка.ВидПлавающейСтавки);
			СтруктураПараметров3.Вставить("ГодПогашения"		, Выборка.ГодПогашения);
			СтруктураПараметров3.Вставить("Дата"				, Отчет.ДатаПред);
			СтруктураПараметров3.Вставить("Счета"				, ОсновныеСчета);
			СтруктураПараметров3.Вставить("МинСтавка"			, Выборка.МинСтавка);
			СтруктураПараметров3.Вставить("МаксСтавка"			, Выборка.МаксСтавка);
			СтруктураПараметров3.Вставить("ПроцентнаяСтавка"	, Выборка.ПроцентнаяСтавка);
			СтруктураПараметров3.Вставить("ТипСтоимости"		, "справедливая");
			ОбластьСтрока.Параметры.РасшифровкаСправПред = СтруктураПараметров3;
			
			СтруктураПараметров4 = Новый Структура;
			СтруктураПараметров4.Вставить("ТипДоговора"			, Выборка.ТипДоговора);
			СтруктураПараметров4.Вставить("Валюта"				, Выборка.ВалютаСсылка);
			СтруктураПараметров4.Вставить("ТипПроцентнойСтавки"	, Выборка.ТипПроцентнойСтавки);
			СтруктураПараметров4.Вставить("ВидПлавающейСтавки"	, Выборка.ВидПлавающейСтавки);
			СтруктураПараметров4.Вставить("ГодПогашения"		, Выборка.ГодПогашения);
			СтруктураПараметров4.Вставить("Дата"				, Отчет.ДатаПред);
			СтруктураПараметров4.Вставить("Счета"				, ОсновныеСчета);
			СтруктураПараметров4.Вставить("МинСтавка"			, Выборка.МинСтавка);
			СтруктураПараметров4.Вставить("МаксСтавка"			, Выборка.МаксСтавка);
			СтруктураПараметров4.Вставить("ПроцентнаяСтавка"	, Выборка.ПроцентнаяСтавка);
			СтруктураПараметров4.Вставить("ТипСтоимости"		, "текущая");
			ОбластьСтрока.Параметры.РасшифровкаТекПред = СтруктураПараметров4;
		КонецЕсли;
		
		ТаблДок.Вывести(ОбластьСтрока);
	
		ИтогСправедливаяТек = ИтогСправедливаяТек + ОбластьСтрока.Параметры.СправедливаяСтоимостьТек;
		ИтогСправедливаяПред = ИтогСправедливаяПред + ОбластьСтрока.Параметры.СправедливаяСтоимостьПред;
		ИтогТекущаяТек = ИтогТекущаяТек + ОбластьСтрока.Параметры.ТекущаяСтоимостьТек;
		ИтогТекущаяПред = ИтогТекущаяПред + ОбластьСтрока.Параметры.ТекущаяСтоимостьПред;
		
	КонецЦикла;
	
	ОбластьИтог.Параметры.СправедливаяСтоимостьТек = ИтогСправедливаяТек;
	ОбластьИтог.Параметры.ТекущаяСтоимостьТек = ИтогТекущаяТек;
	ОбластьИтог.Параметры.СправедливаяСтоимостьПред = ИтогСправедливаяПред;
	ОбластьИтог.Параметры.ТекущаяСтоимостьПред = ИтогТекущаяПред;
	
	ТаблДок.Вывести(ОбластьИтог);
			
КонецПроцедуры // СформироватьОтчет()

// Процедура устанавливает заголовок надписи организация в зависимости от того, 
// какое значение выбрано.
//
&НаКлиенте
Процедура УстановитьЗаголовокОрганизации()

	Если ТипЗнч(Отчет.Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
		
		Элементы.Организация.Заголовок = "Периметр:";
		
	Иначе
		
		Элементы.Организация.Заголовок = "Организация:";
	
	КонецЕсли; 

КонецПроцедуры // УстановитьЗаголовокОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура-обработчик события "ПриОткрытии" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СписокЯзыков = Новый СписокЗначений;
	СписокЯзыков.Добавить("Русский");
	СписокЯзыков.Добавить("Английский");
	Элементы.ЯзыкОтчета.СписокВыбора.Очистить();
	Для Каждого тек_Значение_уник Из СписокЯзыков Цикл		
		Элементы.ЯзыкОтчета.СписокВыбора.Добавить(тек_Значение_уник.Значение, тек_Значение_уник.Представление);
	КонецЦикла;
	Отчет.ЯзыкОтчета = "Русский";
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура-обработчик события "Нажатие" кнопки "Сформировать"
//
&НаКлиенте
Процедура ДействияФормыСформировать(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Отчет.ДатаТек) Тогда
		Сообщить("Не заполнена основная дата отчета!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отчет.ДатаПред) Тогда
		Сообщить("Не заполнена дата предыдущего периода!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Отчет.Организация) Тогда
		Сообщить("Не указана организация или периметр консолидации!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьОтчет();
	
КонецПроцедуры
// ДействияФормыСформировать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура-обработчик события "Нажатие" кнопки "Расшифровать"
//
&НаКлиенте
Процедура КнопкаРасшифроватьНажатие(Элемент)
	
	ПараметрыРасшифровки = Результат.ВыделенныеОбласти[0].Расшифровка;
	
	Если ПараметрыРасшифровки = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для данной ячейки расшифровка отчетом не предусмотрена.'");
		Сообщить(ТекстСообщения,СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;	
		
	// создадим отчет-расшифровку
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
	ПараметрыФормы.Вставить("СБ_УсловияПогашенияДолгаИГрафикПлатежей", Истина);
	ПараметрыФормы.Вставить("Организация", Отчет.Организация);
	ОткрытьФорму("Отчет.СБ_ОборотыСчетаМеждународный.Форма", ПараметрыФормы);
			
КонецПроцедуры
 // КнопкаРасшифроватьНажатие()
 
 &НаСервере
Функция ПолучитьСтруктуруПараметровОтчета()
	
	ПараметрыОтчета = Новый Структура("Организация");
	ПараметрыОтчета.Вставить("НастройкаОтчета", Справочники.бит_НастройкиПроизвольныхОтчетов.СБ_ОтчетСПрограммнойРеализацией);
	ПараметрыОтчета.Вставить("ДатаНачала", Отчет.ДатаПред);
	ПараметрыОтчета.Вставить("ДатаОкончания", Отчет.ДатаТек);
	ПараметрыОтчета.Вставить("ФорматЧисел", "ЧЦ=15; ЧДЦ=0; ЧС=3; ЧРГ=' '; ЧН=-; ЧО=0");
	ПараметрыОтчета.Вставить("РежимРасшифровки", Ложь);
	ПараметрыОтчета.Вставить("Язык", Справочники.бит_Языки.НайтиПоНаименованию(Отчет.ЯзыкОтчета));
	ПараметрыОтчета.Вставить("УдалитьПримечания", Ложь);
	ПараметрыОтчета.Вставить("ВалютаДокумента", Справочники.Валюты.НайтиПоКоду("643"));
	ПараметрыОтчета.Вставить("КурсДокумента", 1);
	ПараметрыОтчета.Вставить("КратностьДокумента", 1);
	ПараметрыОтчета.Вставить("НастройкаПулаПодключений", Справочники.бит_мпд_НастройкиПуловПодключений.ПустаяСсылка());
	СтандПериод = Новый СтандартныйПериод;
	СтандПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПараметрыОтчета.Вставить("СтандартныйПериод", СтандПериод);
	
	// упакуем ТабличныйДокумент Результат
	ТД = Новый ТабличныйДокумент;
	ТД.ФиксацияСверху = Результат.ФиксацияСверху;
	ТД.ФиксацияСлева  = Результат.ФиксацияСлева;
	ТД.Вывести(Результат);
	
	ПараметрыОтчета.Вставить("ТабДокРезультат", ТД);
	
	Возврат ПараметрыОтчета;
	
КонецФункции // ПолучитьСтруктуруПараметровОтчета()

// Процедура-обработчик события "Нажатие" кнопки "СохранитьЭкземпляр"
//
&НаКлиенте
Процедура КнопкаСохранитьЭкземплярНажатие(Элемент)
		
	// упакуем объект в структуру
	ПараметрыОтчета = ПолучитьСтруктуруПараметровОтчета(); 
	
	// создадим параметры формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	
	ОткрытьФорму("Справочник.бит_ЭкземплярыОтчетов.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры
 // КнопкаСохранитьЭкземплярНажатие()

// Процедура-обработчик события "НачалоВыбора" поля "Организация"
//
&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	бит_РаботаСДиалогамиКлиент.НачалоВыбораСоставного(ЭтаФорма
												,Элемент
												,Отчет
												,"Организация"
												,фМассивТипов
												,СтандартнаяОбработка);

КонецПроцедуры // ОрганизацияНачалоВыбора()

// Процедура-обработчик события "ПриИзменении" поля "Организация"
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьЗаголовокОрганизации();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура-обработчик события "ПриИзменении" поля "ДатаТек"
//
&НаКлиенте
Процедура ДатаТекПриИзменении(Элемент)
	
	Отчет.ДатаПред = ДобавитьМесяц(Отчет.ДатаТек, -12);
	
КонецПроцедуры // ДатаТекПриИзменении()

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	фМассивТипов = Новый СписокЗначений;
	РеквизитОрганизация = Метаданные.Отчеты.СБ_УсловияПогашенияДолгаИГрафикПлатежей.Реквизиты.Организация;
	фМассивТипов.ЗагрузитьЗначения(РеквизитОрганизация.Тип.Типы());
	
КонецПроцедуры
