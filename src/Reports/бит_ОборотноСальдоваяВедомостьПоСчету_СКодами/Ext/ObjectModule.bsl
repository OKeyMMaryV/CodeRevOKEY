
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Текущий вариант отчета
Перем СохраненнаяНастройка Экспорт;  

// Хранит имя регистра бухгалтерии.
Перем ИмяРегистраБухгалтерии Экспорт;

// Хранит список регистров бухгалтерии управленческого учета.
Перем мСписокРегистров Экспорт;

// Хранит значение программного открытия отчета.
Перем мПрограммноеОткрытие Экспорт;

// Хранит подтверждение наличия ресурса "СуммаМУ".
Перем мЕстьРесурсСуммаМУ Экспорт;

// Хранить признак наличия валюты
Перем ЕстьВалюта Экспорт;

// Хранить признак наличия количества
Перем ЕстьКоличество Экспорт;


////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ

// бит_DKravchenko Процедура выполняет сохранение настроек отчета.
//
// Параметры:
//  Нет
//
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
    ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// бит_DKravchenko Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
//
// Параметры:
//  Нет
//
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина);
	
КонецПроцедуры // ПрименитьНастройку()

// Процедура заполняет начальные настройки отчета.
//
// Параметры:
//  Нет
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ИмяРегистраБухгалтерии = РегистрБухгалтерии.ИмяОбъекта;
	
	МассивТекущихПоказателей = СформироватьМассивПоказателей();
	
	МассивСубконто = Новый Массив;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	
	Если ПоВалютам Тогда
		Текст = Текст +	",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
	КонецЕсли;
	
	Текст = Текст + бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Истина, 
							Истина, Истина, РазвернутоеСальдо);

			
	ТекстПоля    = "";
	ТекстОтбор   = "Валюта.*";
	ТекстИтоги   = "  Организация.*";
	ТекстПорядок = "";
	
	Сч = 0;
	Для Каждого ВидСубконто Из Счет.ВидыСубконто Цикл
		
		Сч = Сч + 1;
		
		ТекстПоля = ТекстПоля + ", " + " ОстаткиИОбороты.Субконто" + Сч + " КАК Субконто" + Сч;
		ТекстПоля = ТекстПоля + ", " + " ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Субконто" + Сч + ") КАК Субконто" + Сч + "Представление";
	
		ТекстОтбор   = ТекстОтбор   + ", Субконто" + Сч + ".*";
		ТекстИтоги   = ТекстИтоги   + ", Субконто" + Сч + ".*";
		ТекстПорядок = ТекстПорядок + ", Субконто" + Сч + ".*";
		
		МассивСубконто.Добавить(ВидСубконто.ВидСубконто);
		
	КонецЦикла;
	
	// BIT Amerkulov 26062014 ++
	Если ПоВалютам Тогда
		ТекстПоля = ТекстПоля + ", Валюта.* " ;
		ТекстОтбор = ТекстОтбор + ", Валюта " ;		
		ТекстИтоги = ТекстИтоги + ", Валюта " ;
	КонецЕсли;	
	// BIT --
	
	Если Не ПустаяСтрока(ТекстПоля) Тогда 		
		Текст = Текст + "
		|{ВЫБРАТЬ
		|" + Сред(ТекстПоля, 2) + "}"; 		
	КонецЕсли;
    
	Если НЕ ПустаяСтрока(ТекстОтбор) Тогда 		
		ТекстОтбор = "{" + ТекстОтбор + "}";  		
	КонецЕсли;
	
	СтрокаОграниченийПоРеквизитам = "";
	бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "Организация", Организация);
	
	Текст = Текст + " 
	|
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, " + СтрокаОграниченийПоРеквизитам + ТекстОтбор + ") КАК ОстаткиИОбороты
    |
	|УПОРЯДОЧИТЬ ПО Счет.Порядок ";
	
	Если Не ПустаяСтрока(ТекстПорядок) Тогда
		
		Текст = Текст + "
		|{УПОРЯДОЧИТЬ ПО
		|" + Сред(ТекстПорядок, 2) + "}";
		
	КонецЕсли;
    
	СтрокаИтогов = бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(МассивТекущихПоказателей, Ложь, , , РазвернутоеСальдо);
	
	Текст = Текст + "
	|ИТОГИ " + Сред(СтрокаИтогов, 2); 
	
	Текст = Текст +	"
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст +	",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст +	",
		|	Валюта ";
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстИтоги) Тогда
		Текст = Текст +	"
		|{ИТОГИ ПО
		|" + Сред(ТекстИтоги, 2) + "}";
	КонецЕсли;
	
	ПостроительОтчета.Параметры.Вставить("Счет", Счет);
		
	ПостроительОтчета.Текст = Текст;
	
	Сч = 0;
	Для каждого Элемент Из  МассивСубконто Цикл
		Сч = Сч + 1;
		Поле = ПостроительОтчета.ДоступныеПоля.Найти("Субконто"+Сч);
		Поле.ТипЗначения   = Элемент.ТипЗначения;
		Поле.Представление = Элемент.Наименование;
	КонецЦикла;
		
	// Определим признаки учета субконто, которые могут быть использованы.
    СтруктураУчета = бит_БухгалтерскиеОтчетыСервер.ОпределитьПризнакиУчетаСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии, МассивСубконто);
	ЕстьВалюта     = СтруктураУчета.ЕстьВалюта;
    ЕстьКоличество = СтруктураУчета.ЕстьКоличество;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Перезаполнение настроек построителя отчетов с сохранением пользовательских настроек
//
// Параметры:
//  Нет
//
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	Настройки = ПостроительОтчета.ПолучитьНастройки();
	
	ЗаполнитьНачальныеНастройки();
	
	ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()


////////////////////////////////////////////////////////////////////////////////
// ЗАГОЛОВОК ОТЧЕТА

// бит_DKravchenko Функция формирует заголовок отчета (синоним).
// 
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка
//
Функция ЗаголовокОтчета() Экспорт
	
	ПредставлениеРегистра = бит_ПраваДоступа.ПолучитьПредставлениеОбъектаСистемыИзСпискаЗначений(мСписокРегистров, РегистрБухгалтерии);
	СтрокаПоСчету = ?(ЗначениеЗаполнено(Счет), Счет, Нстр("ru = ' не выбран счет'"));
	
	ТекстЗаголовка = Нстр("ru = 'Оборотно-сальдовая ведомость по счету %2% (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра, СтрокаПоСчету);
	
	Возврат ТекстЗаголовка;	
    
КонецФункции // ЗаголовокОтчета()

// бит_DKravchenko Функция формирует табличный документа отчета и выполняет заполнение области "Заголовок".
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//  ТабличныйДокумент
//
Функция СформироватьЗаголовок() Экспорт

	ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);
	
	Макет = ПолучитьМакет("Макет");
	Итоги = Макет.ПолучитьОбласть("Итоги");
    
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = бит_БухгалтерскиеОтчетыСервер.ПолучитьПолноеНазваниеОрганизации(Организация);
		
	ЗаголовокОтчета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ЗаголовокОтчета.Параметры.Заголовок 		  = ЗаголовокОтчета();
	ЗаголовокОтчета.Параметры.ОписаниеПериода  	  = ОписаниеПериода;

	ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
	КонецЕсли;
	Если мЕстьРесурсСуммаМУ И ВыводитьСуммуМУ Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (МСФО)'");
	КонецЕсли;
	Если ПоВалютам Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
	КонецЕсли; 
	Если ПоКоличеству Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'количество'");
	КонецЕсли; 
	
	ТекстПроИтоги = "";
	Если ПоСубсчетам Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субсчетам, "
	КонецЕсли;

	Если ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Тогда
		ТекстПроИтоги = ТекстПроИтоги + "субконто: " + бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуИзмерений(ПостроительОтчета.ИзмеренияСтроки);
	КонецЕсли;

	ЗаголовокОтчета.Параметры.ТекстПроСписокПоказателей = ТекстСписокПоказателей;
	Если Не ПустаяСтрока(ТекстПроИтоги) Тогда
		ЗаголовокОтчета.Параметры.ТекстПроИтоги = Нстр("ru = 'Детализация по '") + ТекстПроИтоги;
	КонецЕсли;

	// Вывод списка фильтров:
	СтрОтбор = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуОтборов(ПостроительОтчета.Отбор);

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

КонецФункции // СформироватьЗаголовок()


////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКИ

// Проверка корректности настроек отчета
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Булево
//
Функция ПараметрыОтчетаКорректны()
  	
	РезультатПроверки = 
		бит_БухгалтерскиеОтчетыСервер.ПроверитьСчет(Счет)
		И бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Ложь, мЕстьРесурсСуммаМУ)
		И Не бит_БухгалтерскиеОтчетыСервер.ОпределитьНаличиеДублирующегосяПараметраВИзмерениях(ПостроительОтчета);
	
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()


////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТА

// бит_DKravchenko Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат   - Табличный документ, формируемый отчетом
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина)
//  ВысотаЗаголовка     - Число (По умолчанию = 0)
//
// Возвращаемое значение:
//  Булево
//
Функция СформироватьОтчет(ДокументРезультат,  ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0) Экспорт

	// Очистка табличного поля
	ДокументРезультат.Очистить();
	
	// Проверим наличие ресурса с именем "СуммаМУ".
	мЕстьРесурсСуммаМУ = бит_ОбщегоНазначения.ЕстьРесурсСуммаМУРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	   	
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;

		Макет           = ПолучитьМакет("Макет");
		ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

		// Наклонный шрифт групп
		ШрифтГрупп = Новый Шрифт(Макет.Область("СтрокаПоказателя|Счет").Шрифт, , , , Истина);

		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
		
		МассивГруппировок = СформироватьМассивГруппировок();
	    
		МассивПоказателей = СформироватьМассивПоказателей();
			
		// Формат показателей
		СтруктураФорматовПоказателей = бит_БухгалтерскиеОтчетыСервер.СформироватьСтруктуруФорматовПоказателей(МассивПоказателей, ИмяРегистраБухгалтерии);
			
		ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
		
		//ДокументРезультат.Вывести(ЗаголовокОтчета, 1);
        ВывестиЗаголовокОтчета(Макет, ДокументРезультат);
		
		ТекстРазвернутоеСальдо = ?(РазвернутоеСальдо, "РазвернутоеСальдо", "");
		ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Числа");
		
		ОбластьИтогиЧислаМакет  = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Числа");
		ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока" + ТекстРазвернутоеСальдо + "|Счет"); // не исп
		ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Счет");
		ОбластьИтогиКод 	    = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|КодСубконто");
		ОбластьСтрокаСчет       = Макет.ПолучитьОбласть("Строка|Счет");  // не исп
		ОбластьСтрокаЧисла      = Макет.ПолучитьОбласть("Строка|Числа"); // не исп
		ОбластьСтрокаПоказателяСчет  = Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");
		ОбластьСтрокаПоказателяСчет2  = Макет.ПолучитьОбласть("СтрокаПоказателя2|Счет");
		ОбластьСтрокаПоказателяЧисла = Макет.ПолучитьОбласть("СтрокаПоказателя|Числа");
		ОбластьСтрокаПоказателяКод   = Макет.ПолучитьОбласть("СтрокаПоказателя|КодСубконто");
		
		
		СоответствиеСчетовПредков = бит_БухгалтерскиеОтчетыСервер.ВернутьСоответвиеСчетовПредков(Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя, Счет);
		
		СтруктураПараметровОграничений = бит_БухгалтерскиеОтчетыСервер.СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, ПоВалютам);
		
		Если ПоВалютам Тогда		
			МассивГруппировок.Вставить(0, "Валюта");	 		
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ОбластьСтрокаСчет"		   , ОбластьСтрокаСчет);
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет" ,ОбластьСтрокаПоказателяСчет);
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяСчет2",ОбластьСтрокаПоказателяСчет2);
		СтруктураПараметров.Вставить("ДокументРезультат"		   , ДокументРезультат);
		СтруктураПараметров.Вставить("ШрифтГрупп"				   , ШрифтГрупп);
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяЧисла", ОбластьСтрокаПоказателяЧисла);
		СтруктураПараметров.Вставить("ОбластьСтрокаЧисла"		   , ОбластьСтрокаЧисла);
		СтруктураПараметров.Вставить("ОбластьСтрокаПоказателяКод", ОбластьСтрокаПоказателяКод);
		СтруктураПараметров.Вставить("ФорматПоказателей"		   , СтруктураФорматовПоказателей);
		СтруктураПараметров.Вставить("НетЛинии"					   , Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
		СтруктураПараметров.Вставить("МассивПоказателей"		   , МассивПоказателей);
		СтруктураПараметров.Вставить("МассивГруппировок"		   , МассивГруппировок);
		СтруктураПараметров.Вставить("СоответствиеСчетовПредков"   , СоответствиеСчетовПредков);
		СтруктураПараметров.Вставить("СтруктураОграничений"		   , СтруктураПараметровОграничений);
		
		//Формирование запроса
		Запрос = СформироватьЗапрос(СтруктураПараметров);
		РезультатЗапроса = Запрос.Выполнить();

		ДокументРезультат.НачатьАвтогруппировкуСтрок();

		Если МассивГруппировок.Количество() > 0 Тогда
			
			ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ЭтотОбъект, РезультатЗапроса.Выбрать(), //ОбходРезультатаЗапроса.ПоГруппировкам, МассивГруппировок[МассивГруппировок.Количество()-1]), 
							0, СтруктураПараметров);
		КонецЕсли;

		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

		ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");

		// Выведем общие итоги
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		Выборка.Следующий();
		//ВыводимаяОбласть = ОбластьИтогиСчет;
		//ДокументРезультат.Вывести(ВыводимаяОбласть, 1);
		ВывестиИтогиОтчета(Макет, ДокументРезультат);
		
		ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Выборка, ИмяРегистраБухгалтерии, МассивПоказателей, СтруктураФорматовПоказателей,
		Счет, ОбластьИтогиСтрокаЧисла, ОбластьИтогиЧислаМакет, ОбластьИтогиСтрокаСчет, ДокументРезультат, РазвернутоеСальдо);

		//ДокументРезультат.Вывести(ИтогиПодвал, 1);
		
		// Заполним общую расшифровку:
		СтруктураНастроекОтчета = СформироватьОбщуюСтруктуруДляРасшифровки();
		СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);
		
	    ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;

		// Зафиксируем заголовок отчета
		ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

		// Первую колонку не печатаем
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
		
		// Присвоим имя для сохранения параметров печати табличного документа
		ДокументРезультат.ИмяПараметровПечати = "ОборотноСальдоваяВедомостьПоСчету " + ИмяРегистраБухгалтерии;

		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
		
	КонецЕсли;

	Возврат ОтчетСформирован;
	
КонецФункции // СформироватьОтчет()

// бит_DKravchenko Функция возвращает массив показателей (ресурсов регистра) для отчета.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Массив
//
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
	
	Если ВыводитьСуммуРегл Тогда 
	    МассивПоказателей.Добавить("СуммаРегл");
	КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
	
	Если мЕстьРесурсСуммаМУ И ВыводитьСуммуМУ Тогда 
	    МассивПоказателей.Добавить("СуммаМУ");
	КонецЕсли;
	
	Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
	КонецЕсли;
   	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

// бит_DKravchenko Формирует запрос по установленным условия, фильтрам и группировкам.
//
// Параметры:
//  СтруктураПараметров - Структура, параметры необходимые для формирования текста запроса
//
// Возвращаемое значение:
//  Запрос
//
Функция СформироватьЗапрос(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.УстановитьПараметр("ДатаНач", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон", ?(Период.ДатаОкончания = '00010101000000'
										  , Период.ДатаОкончания
										  , Новый Граница(КонецДня(Период.ДатаОкончания), ВидГраницы.Включая)));



	// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
	бит_БухгалтерскиеОтчетыСервер.УстановитьПараметрЗапроса_Организация(Запрос, Организация, Период, Истина);
	ТаблицаОрганизаций = бит_БухгалтерскиеОтчетыСервер.ПолучитьСоставПериметраКонсолидацииСУсловиями(Организация,Период.ДатаНачала, Период.ДатаОкончания);
	//}
	
	Если ПоСубсчетам Тогда
		Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиИОбороты.Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
	Иначе
	    Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Счет КАК Счет,
		|	ПРЕДСТАВЛЕНИЕ(&Счет) КАК СчетПредставление";
	КонецЕсли;
		
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	ОстаткиИОбороты.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
		
	КонецЕсли;
	
	Текст = Текст + бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Истина, 
		Истина, Истина, РазвернутоеСальдо);
		
    ТекстПоля    = "";
	ТекстИтоги   = "";
	ТекстПорядок = "";
	
	Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
	
		ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
		ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
		//bit aau++ 20.11.2015
		Если Лев(Измерение.Имя,8) = "Субконто" И СтрДлина(Измерение.Имя) = 9 Тогда
			ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + ".Код КАК " + Измерение.Имя + "Код";
		КонецЕсли;
		//--
		ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + бит_БухгалтерскиеОтчетыСервер.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
	
	КонецЦикла;
	
	ОтборПоВидамСубконто = "";
	ОграниченияПоПостроителюОтчета = бит_БухгалтерскиеОтчетыСервер.ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос, ОтборПоВидамСубконто);
			
	СтрокаОграниченийПоРеквизитам = "";
	
	бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоОрганизации(СтрокаОграниченийПоРеквизитам, Организация, ОрганизацияВидСравнения, ОрганизацияИспользование);
	
	Если Не ПустаяСтрока(ОграниченияПоПостроителюОтчета)
		И Не ПустаяСтрока(СтрокаОграниченийПоРеквизитам) Тогда
		
		ОграниченияПоПостроителюОтчета = " И " + ОграниченияПоПостроителюОтчета;
		
	КонецЕсли;
	
	Текст = Текст + 
			ТекстПоля + " 
	|
	|ИЗ
	|	РегистрБухгалтерии." + ИмяРегистраБухгалтерии + ".ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет)," + ОтборПоВидамСубконто + " 
	|, " + СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета + ") КАК ОстаткиИОбороты
	|";
	
	// БИТ Avseenkov 20.05.2014 Доработка отчетов по периметру
	Если (ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации")) И ЗначениеЗаполнено(Организация) Тогда
		
		Если ТаблицаОрганизаций.Количество()> 0 Тогда 
			Сч = 0 ;
			Для Каждого Строка из ТаблицаОрганизаций цикл
				
				Сч = Сч + 1;
				Запрос.УстановитьПараметр("Организация"+Сч,Строка.Организация);
				СтрокаОграниченийПоРеквизитам = "";
				бит_БухгалтерскиеОтчетыСервер.ДополнитьСтрокуОграниченийПоРеквизитамДоп(СтрокаОграниченийПоРеквизитам, "Организация", Строка.Организация,"Организация"+Сч);
				
				
				Текст = Текст + " 
				| ОБЪЕДИНИТЬ ВСЕ";
				
				
				
				Если ПоСубсчетам Тогда
					Текст =  Текст + "
					|   ВЫБРАТЬ 
					|	ОстаткиИОбороты.Счет КАК Счет,
					|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Счет) КАК СчетПредставление";
				Иначе
					Текст = Текст + " 
					|   ВЫБРАТЬ 
					|	&Счет КАК Счет,
					|	ПРЕДСТАВЛЕНИЕ(&Счет) КАК СчетПредставление";
				КонецЕсли;
				
				Если ПоВалютам Тогда
					
					Текст = Текст + ",
					|	ОстаткиИОбороты.Валюта КАК Валюта,
					|	ПРЕДСТАВЛЕНИЕ(ОстаткиИОбороты.Валюта) КАК ВалютаПредставление";
					
				КонецЕсли;
				
				Текст = Текст +   бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомостьБИТ(СтруктураПараметров.МассивПоказателей, Истина, 
				Истина, Истина, РазвернутоеСальдо,,Строка);
				
				ТекстПоля    = "";
				
				Для каждого Измерение Из ПостроительОтчета.ИзмеренияСтроки Цикл
					
					ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + " КАК " + Измерение.Имя;
					ТекстПоля = ТекстПоля + ", ПРЕДСТАВЛЕНИЕ(" + Измерение.ПутьКДанным + ") КАК " + Измерение.Имя + "Представление";
					
					// Ок Видяйкин 20180209 (Задание в Омни AT-1639779) +
					// Ошибка была в случае формирования отчета по периметру консолидации МСФО, если в периметр входит организация, вошедшая в "периметр" в середине периода, 
					// за который формируется отчет 
					//bit aau++ 20.11.2015
					Если Лев(Измерение.Имя,8) = "Субконто" И СтрДлина(Измерение.Имя) = 9 Тогда
						ТекстПоля = ТекстПоля + ", " + Измерение.ПутьКДанным + ".Код КАК " + Измерение.Имя + "Код";
					КонецЕсли;
					//--
					// Ок Видяйкин 20180209 (Задание в Омни AT-1639779) - 
					
					//ТекстИтоги = ТекстИтоги + ", " + Измерение.Имя + бит_БухгалтерскиеОтчеты.ПолучитьПоТипуИзмеренияПостроителяОтчетаСтрокуЗапроса(Измерение.ТипИзмерения);
					
				КонецЦикла;
				
				Если Строка.ДатаОкончания > Период.ДатаНачала и
					Строка.ДатаОкончания < КонецДня(Период.ДатаОкончания) Тогда 
					ДатаКонец = "&ДатаКон"+Сч;
					Запрос.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
				Иначе 
					ДатаКонец = "&ДатаКон";
				КонецЕсли;
				
				Если Строка.Период > Период.ДатаНачала Тогда 
					ДатаНачало = "&ДатаНач"+Сч;
					Запрос.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
				Иначе 
					ДатаНачало = "&ДатаНач";
				КонецЕсли;
				
				
				Текст = Текст + ТекстПоля + "
				|
				|ИЗ
				|	РегистрБухгалтерии."+ИмяРегистраБухгалтерии+".ОстаткиИОбороты("+ ДатаНачало+","+ ДатаКонец+", , , Счет В ИЕРАРХИИ (&Счет),"+ОтборПоВидамСубконто+" 
				|, " + СтрокаОграниченийПоРеквизитам + ОграниченияПоПостроителюОтчета + ") КАК ОстаткиИОбороты
				|";
				
				
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	//}
	
	ТекстИтогов = бит_БухгалтерскиеОтчетыСервер.ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.МассивПоказателей, Ложь, , , РазвернутоеСальдо);
	
	Текст = Текст + Символы.ПС + "ИТОГИ" + Символы.ПС + Сред(ТекстИтогов, 2);
				
	Текст = Текст + "
	|	ПО ОБЩИЕ";
	
	Если ПоСубсчетам Тогда
		
		Текст = Текст + ",
		|	Счет ИЕРАРХИЯ КАК Счет ";
		
	КонецЕсли;
	
	Если ПоВалютам Тогда
		
		Текст = Текст + ",
		|	Валюта ";
		
	КонецЕсли;
	
	Текст = Текст + ТекстИтоги + "
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = Текст;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапрос()

// бит_DKravchenko Функция возвращает общую структуру для расшифровки.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Структура
//
Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;

	СтруктураНастроекОтчета.Вставить("Период", Период);
	
	СтруктураНастроекОтчета.Вставить("Организация"             , Организация);
	СтруктураНастроекОтчета.Вставить("ОрганизацияВидСравнения" , ОрганизацияВидСравнения);
	СтруктураНастроекОтчета.Вставить("ОрганизацияИспользование", ОрганизацияИспользование);
    
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуРегл" , ВыводитьСуммуРегл);
    СтруктураНастроекОтчета.Вставить("ВыводитьСуммуУпр"  , ВыводитьСуммуУпр);
	СтруктураНастроекОтчета.Вставить("РегистрБухгалтерии", РегистрБухгалтерии);
	
	Если мЕстьРесурсСуммаМУ Тогда
		СтруктураНастроекОтчета.Вставить("ВыводитьСуммуМУ", ВыводитьСуммуМУ);
	КонецЕсли;
	
	НастройкиОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	// BIT AMerkulov 26062014 ++
	
	Если Счет.Валютный Тогда
		СтрокаОтбораВалюты = НастройкиОтбора.Добавить();
		СтрокаОтбораВалюты.ВидСравнения = ВидСравнения.Равно;
		СтрокаОтбораВалюты.Имя = "Валюта";
		СтрокаОтбораВалюты.Представление = "Валюта";
		СтрокаОтбораВалюты.ПутьКДанным = "Валюта";
		СтрокаОтбораВалюты.Использование = Ложь;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Валюты"));
		Описание  = Новый ОписаниеТипов(Массив);
		
		СтрокаОтбораВалюты.ТипЗначения = Описание;
		
	КонецЕсли;
	
	
	// BIT AMerkulov 26062014 --
	
	СтруктураНастроекОтчета.Вставить("Отбор", Новый ХранилищеЗначения(НастройкиОтбора));
			
	Возврат СтруктураНастроекОтчета;
	
КонецФункции // СформироватьОбщуюСтруктуруДляРасшифровки()

// Функция возвращает массив группировок для отчета
//
// Параметры:
//  Нет
//
Функция СформироватьМассивГруппировок() Экспорт
	
	МассивГруппировок = Новый Массив;

	Если ПоСубСчетам Тогда
		МассивГруппировок.Добавить("Счет");
	КонецЕсли;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		МассивГруппировок.Добавить(ПостроительОтчета.ИзмеренияСтроки[Сч].Имя);
		
	КонецЦикла;

	Возврат МассивГруппировок;
		
КонецФункции // СформироватьМассивГруппировок()


//////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняется при смене счета
//
// Параметры:
//  УстановитьСтарыеНастройки - Булево (По умолчанию = Истина)
//
Процедура ОбработкаВыбораСчета(УстановитьСтарыеНастройки = Истина) Экспорт

	ПоВалютам    = Счет.Валютный; 
	ПоКоличеству = Счет.Количественный;
	ПоСубсчетам  = Истина;
	
	СтарыеНастройки = бит_БухгалтерскиеОтчетыСервер.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	
	ЗаполнитьНачальныеНастройки();
    
    бит_БухгалтерскиеОтчетыСервер.СформироватьПервоначальныйОтборПостроителяПоСубконто(ПостроительОтчета, Счет);
    
    Если УстановитьСтарыеНастройки Тогда
        бит_БухгалтерскиеОтчетыСервер.УстановитьОтборИзТаблицы(ПостроительОтчета.Отбор, СтарыеНастройки);
    КонецЕсли;
    
КонецПроцедуры // ОбработкаВыбораСчета()

Процедура ВывестиЗаголовокОтчета(Макет, ДокументРезультат)
	
	ОбластьЗаголовокСчет  = Макет.ПолучитьОбласть("ЗаголовокОтчета|Счет");
	ОбластьЗаголовокСчет2  = Макет.ПолучитьОбласть("ЗаголовокОтчета2|Счет");
	ОбластьЗаголовокЧисла = Макет.ПолучитьОбласть("ЗаголовокОтчета|Числа");
	ОбластьЗаголовокКод   = Макет.ПолучитьОбласть("ЗаголовокОтчета|КодСубконто");
	
	ПервыйПроход = Истина;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		
		ТекГруппировка = ПостроительОтчета.ИзмеренияСтроки[Сч];
		ОбластьЗаголовокСчет.Параметры.Субконто = ТекГруппировка.Представление;
		ОбластьЗаголовокСчет2.Параметры.Субконто = ТекГруппировка.Представление;
		
		Если ПервыйПроход Тогда
			ПервыйПроход = Ложь;
			ДокументРезультат.Вывести(ОбластьЗаголовокСчет,1);
		Иначе
			ДокументРезультат.Присоединить(ОбластьЗаголовокСчет2,1);
		КонецЕсли;
		
		Если Лев(ТекГруппировка.Имя,8) = "Субконто" И СтрДлина(ТекГруппировка.Имя) = 9 Тогда
			ОбластьЗаголовокКод.Параметры.Код = ТекГруппировка.Представление + " (код)";
			ДокументРезультат.Присоединить(ОбластьЗаголовокКод,1);
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйПроход Тогда
		ДокументРезультат.Вывести(ОбластьЗаголовокСчет,1);
	КонецЕсли;
	
	ДокументРезультат.Присоединить(ОбластьЗаголовокЧисла,1);
		
КонецПроцедуры
// Процедура выводит группировку при развороте счета по субсчетам и/или субконто 
// для оборотно сальдовой ведомости по счету.
// 
// Параметры:
//	ОбъектОтчета		 	 - ОбъектОтчета.
//	Выборка 			 	 - ВыборкаИзЗапроса.
//	ИндексТекущейГруппировки - Число.
//	СтруктураПараметров 	 - Структура.
//
Процедура ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету(ОбъектОтчета, Выборка, Знач ИндексТекущейГруппировки, СтруктураПараметров)

	Пока Выборка.Следующий() Цикл
		
		ИмяГруппировки = Выборка.Группировка();
		
		Если ИмяГруппировки <> "" Тогда
			Продолжить;
		КонецЕсли;
		ДокументРезультат = СтруктураПараметров.ДокументРезультат;
		ПервыйПроход = Истина;
		Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
			
			ВыводимаяОбласть = ?(ПервыйПроход, СтруктураПараметров.ОбластьСтрокаПоказателяСчет,СтруктураПараметров.ОбластьСтрокаПоказателяСчет2);
			ТекГруппировка = ПостроительОтчета.ИзмеренияСтроки[Сч];
			ВыводимаяОбласть.Параметры.СубконтоПредставление = Выборка[ТекГруппировка.Имя + "Представление"];
			
			Если ПервыйПроход Тогда
				ПервыйПроход = Ложь;
				ДокументРезультат.Вывести(ВыводимаяОбласть);
			Иначе
				ДокументРезультат.Присоединить(ВыводимаяОбласть);
			КонецЕсли;
			ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров, ТекГруппировка.Имя);

			
			Если Лев(ТекГруппировка.Имя,8) = "Субконто" И СтрДлина(ТекГруппировка.Имя) = 9 Тогда
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяКод;
				ВыводимаяОбласть.Параметры.СубконтоКод = Выборка[ТекГруппировка.Имя + "Код"];
				ДокументРезультат.Присоединить(ВыводимаяОбласть);
				ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОбъектОтчета, ВыводимаяОбласть, Выборка, СтруктураПараметров,ТекГруппировка.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если ПервыйПроход Тогда
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			ВыводимаяОбласть.Параметры.СубконтоПредставление = "";
			ДокументРезультат.Вывести(ВыводимаяОбласть);
		КонецЕсли;
		
		ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, ОбъектОтчета.Счет);
		
	КонецЦикла;

КонецПроцедуры // ВывестиГруппировкуОборотноСальдовойВедомостиПоСчету()

Процедура ВывестиИтогиОтчета(Макет, ДокументРезультат)
	
	ТекстРазвернутоеСальдо  = ?(РазвернутоеСальдо, "РазвернутоеСальдо", "");
	ОбластьИтогиСчет        = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|Счет");
	ОбластьИтогиКод 	    = Макет.ПолучитьОбласть("Итоги"       + ТекстРазвернутоеСальдо + "|КодСубконто");
	
	ПервыйПроход = Истина;
	
	Для Сч = 0 По ПостроительОтчета.ИзмеренияСтроки.Количество() - 1  Цикл
		ТекГруппировка = ПостроительОтчета.ИзмеренияСтроки[Сч];
		Если ПервыйПроход Тогда
			ПервыйПроход = Ложь;
			ДокументРезультат.Вывести(ОбластьИтогиСчет);
		Иначе
			ДокументРезультат.Присоединить(ОбластьИтогиКод);
		КонецЕсли;
		
		Если Лев(ТекГруппировка.Имя,8) = "Субконто" И СтрДлина(ТекГруппировка.Имя) = 9 Тогда
			ДокументРезультат.Присоединить(ОбластьИтогиКод);
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйПроход Тогда
		ДокументРезультат.Вывести(ОбластьИтогиСчет);
	КонецЕсли;
		
КонецПроцедуры


// Процедура выводит итоги отчета оборотно сальдовая ведомость по счету.
//
// Параметры:
//	Выборка					  - ВыборкаИзЗапроса.
//	ИмяРегистраБухгалтерии 	  - Строка.
//	МассивПоказателей 		  - Массив.
//  Счет 					  - ПланСчетовСсылка.
//  ОбластьИтогиСтрокаЧисла   - Область.
//  ОбластьИтогиЧислаМакет    - Область.
//  ОбластьИтогиСтрокаСчет    - Область.
//  ДокументРезультат 	      - ТабличныйДокумент.
//  ВыводитьРазвернутоеСальдо - Булево.
//
Процедура ВывестиИтогиОборотноСальдовойВедомостиПоСчету(Знач Выборка, Знач ИмяРегистраБухгалтерии, Знач МассивПоказателей, Знач ФорматПоказателей,
	Знач Счет, Знач ОбластьИтогиСтрокаЧисла, Знач ОбластьИтогиЧислаМакет, Знач ОбластьИтогиСтрокаСчет, Знач ДокументРезультат, ВыводитьРазвернутоеСальдо = Ложь) 
	
	ЭтоПерваяСтрока = Ложь;

	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл

		Если НЕ Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы[ИмяПоказателя].Балансовый Тогда
			Продолжить;
		КонецЕсли;

		Если ЭтоПерваяСтрока = Истина Тогда
			Область = ОбластьИтогиСтрокаЧисла;
		Иначе
			Область = ОбластьИтогиЧислаМакет;
		КонецЕсли;

		ФорматПоказателя = "";
		ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);

		НачальныйОстатокДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
		НачальныйОстатокКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
		ОборотДт           = Выборка[ИмяПоказателя + "ОборотДт"];
		ОборотКт           = Выборка[ИмяПоказателя + "ОборотКт"];
		КонечныйОстатокДт  = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
		КонечныйОстатокКт  = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];
		
		Если Счет.Вид = ВидСчета.Активный Тогда 
			
			Если НачальныйОстатокДт = 0 Тогда
				НачальныйОстатокДт = -НачальныйОстатокКт;
				НачальныйОстатокКт = 0;
			КонецЕсли;
			
			Если КонечныйОстатокДт = 0 Тогда
				КонечныйОстатокДт = -КонечныйОстатокКт;
				КонечныйОстатокКт = 0;
			КонецЕсли;
			
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			
			Если НачальныйОстатокКт = 0 Тогда
				НачальныйОстатокКт = -НачальныйОстатокДт;
				НачальныйОстатокДт = 0;
			КонецЕсли;
			
			Если КонечныйОстатокКт = 0 Тогда
				КонечныйОстатокКт = -КонечныйОстатокДт;
				КонечныйОстатокДт = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыводитьРазвернутоеСальдо И НачальныйОстатокДт <> Неопределено Тогда
			
			НачальныйОстаток = НачальныйОстатокДт - НачальныйОстатокКт;
			Если НачальныйОстаток > 0 Тогда
				НачальныйСвернутыйОстатокДт = НачальныйОстаток;
				НачальныйСвернутыйОстатокКт = 0;
			Иначе
				НачальныйСвернутыйОстатокДт = 0;
				НачальныйСвернутыйОстатокКт = - НачальныйОстаток;
			КонецЕсли;
			
			КонечныйОстаток = КонечныйОстатокДт - КонечныйОстатокКт;
			Если КонечныйОстаток > 0 Тогда
				КонечныйСвернутыйОстатокДт = КонечныйОстаток;
				КонечныйСвернутыйОстатокКт = 0;
			Иначе
				КонечныйСвернутыйОстатокДт = 0;
				КонечныйСвернутыйОстатокКт = - КонечныйОстаток;
			КонецЕсли;
			
			Область.Параметры.НачальныйРазвернутыйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйРазвернутыйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокДт = Формат(НачальныйСвернутыйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокКт = Формат(НачальныйСвернутыйОстатокКт, ФорматПоказателя);
			Область.Параметры.ОборотДт           = Формат(ОборотДт, ФорматПоказателя);
			Область.Параметры.ОборотКт           = Формат(ОборотКт, ФорматПоказателя);
			Область.Параметры.КонечныйРазвернутыйОстатокДт  = Формат(КонечныйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйРазвернутыйОстатокКт  = Формат(КонечныйОстатокКт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйСвернутыйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйСвернутыйОстатокКт, ФорматПоказателя);
            
		Иначе
			
			Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
			Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
			Область.Параметры.ОборотДт           = Формат(ОборотДт, ФорматПоказателя);
			Область.Параметры.ОборотКт           = Формат(ОборотКт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт, ФорматПоказателя);
			Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт, ФорматПоказателя);
			
		КонецЕсли;

		Если ЭтоПерваяСтрока = Истина Тогда
			ДокументРезультат.Вывести(ОбластьИтогиСтрокаСчет, 1);
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ЭтоПерваяСтрока = Истина;

	КонецЦикла;
	
КонецПроцедуры // ВывестиИтогиОборотноСальдовойВедомостиПоСчету()


// Процедура заполняет параметры расшифровки.
//
// Параметры:
//	ОбъектОтчета		- ОбъектОтчета.
//  Область				- Область.
//	Выборка 			- ВыборкаИзЗапроса.
//	СтруктураПараметров - Структура.
//
Процедура ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету(ОтчетОбъект, Область, Выборка, СтруктураПараметров, ТекущееИмяГруппировки) 

	// Если итоги по счету не анализируются, берем общий
	Если Выборка.Счет = NULL Тогда
		
		РасшифровываемыйСчет = ОтчетОбъект.Счет;
		РасшифровываемыйСчетПредставление = Строка(ОтчетОбъект.Счет);
		
	Иначе
		
		РасшифровываемыйСчет = Выборка.Счет;
		РасшифровываемыйСчетПредставление = Выборка.СчетПредставление;
		
	КонецЕсли;
	
	ЗаполнитьРасшифровкуДляСчета(ОтчетОбъект, Область, Выборка, СтруктураПараметров, ОтчетОбъект.ИмяРегистраБухгалтерии,
		РасшифровываемыйСчет, РасшифровываемыйСчетПредставление, ТекущееИмяГруппировки);
    
КонецПроцедуры // ЗаполнитьПараметрыРасшифровкиОбороткиПоСчету()


// Процедура выводит текущие показатели оборотно сальдовой ведомости по счету.
//
// Параметры:
//	Выборка 			 	  - ВыборкаИзЗапроса.
//	СтруктураПараметров 	  - Структура.
//	Счет 			 	      - ПланСчетовСсылка.
//	СтруктураЗамещающихДанных - Структура.
//
Процедура ВывестиПоказателиОборотноСальдовойВедомостиПоСчету(Выборка, СтруктураПараметров, Знач Счет, 
	Знач СтруктураЗамещающихДанных = Неопределено) 

	ВыведеноПоказателей = 0; // количество выведенных показателей
	Для Каждого ИмяПоказателя Из СтруктураПараметров.МассивПоказателей Цикл

		// Сумму в валюте выводим только по группировке Валюта
		Если ИмяПоказателя = "ВалютнаяСумма" Тогда
			Если Выборка.Группировка() <> "Валюта" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ВыведеноПоказателей > 0 Тогда
			Область = СтруктураПараметров.ОбластьСтрокаПоказателяЧисла;
		Иначе
			Область = СтруктураПараметров.ОбластьСтрокаЧисла;
		КонецЕсли;
		
		ФорматПоказателя = "";
		СтруктураПараметров.ФорматПоказателей.Свойство(ИмяПоказателя, ФорматПоказателя);
		
		Если СтруктураЗамещающихДанных = Неопределено Тогда
			
			СальдоНачДт = Выборка[ИмяПоказателя + "НачальныйОстатокДт"];
			СальдоНачКт = Выборка[ИмяПоказателя + "НачальныйОстатокКт"];
			СальдоКонДт = Выборка[ИмяПоказателя + "КонечныйОстатокДт"];
			СальдоКонКт = Выборка[ИмяПоказателя + "КонечныйОстатокКт"];
			ОборотДт = Выборка[ИмяПоказателя + "ОборотДт"];
			ОборотКт = Выборка[ИмяПоказателя + "ОборотКт"];
			
		Иначе
			
			СальдоНачДт = СтруктураЗамещающихДанных[ИмяПоказателя + "НачальныйОстатокДт"];
			СальдоНачКт = СтруктураЗамещающихДанных[ИмяПоказателя + "НачальныйОстатокКт"];
			СальдоКонДт = СтруктураЗамещающихДанных[ИмяПоказателя + "КонечныйОстатокДт"];
			СальдоКонКт = СтруктураЗамещающихДанных[ИмяПоказателя + "КонечныйОстатокКт"];
			ОборотДт = СтруктураЗамещающихДанных[ИмяПоказателя + "ОборотДт"];
			ОборотКт = СтруктураЗамещающихДанных[ИмяПоказателя + "ОборотКт"];			
			
	    КонецЕсли;
		
		// Сальдо по счетам нужно привести к традиционному виду, в зависимости от вида выбранного счета:
		// если группировки Счет еще не было, сальдо в выборке рассчитаны как для активно-пассивного счета.
		Если Счет.Вид = ВидСчета.Активный Тогда
			
			СальдоНачДт = СальдоНачДт - СальдоНачКт;
			СальдоНачКт = 0;
			
			СальдоКонДт = СальдоКонДт - СальдоКонКт;
			СальдоКонКт = 0;
			
		ИначеЕсли Счет.Вид = ВидСчета.Пассивный Тогда
			
			СальдоНачКт = СальдоНачКт - СальдоНачДт;
			СальдоНачДт = 0;
			
			СальдоКонКт = СальдоКонКт - СальдоКонДт;
			СальдоКонДт = 0;
			
		КонецЕсли;
		
		Область.Параметры.НачальныйОстатокДт = Формат(СальдоНачДт, ФорматПоказателя);
		Область.Параметры.НачальныйОстатокКт = Формат(СальдоНачКт, ФорматПоказателя);
		Область.Параметры.ОборотДт           = Формат(ОборотДт,    ФорматПоказателя);
		Область.Параметры.ОборотКт           = Формат(ОборотКт,    ФорматПоказателя);
		Область.Параметры.КонечныйОстатокДт  = Формат(СальдоКонДт, ФорматПоказателя);
		Область.Параметры.КонечныйОстатокКт  = Формат(СальдоКонКт, ФорматПоказателя);

		ДокументРезультат = СтруктураПараметров.ДокументРезультат;

		Если ВыведеноПоказателей > 0 Тогда
			
			ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаПоказателяСчет;
			
			Если ИмяПоказателя = "ВалютнаяСумма" Тогда
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "Валютная сумма";
			Иначе
				ВыводимаяОбласть.Параметры.СубконтоПредставление = "";
			КонецЕсли;

			// бит_DKravchenko добавление кода. Начало. 04.02.2011{{
			Если СтруктураПараметров.Свойство("РасшифровкаОбластиСчет") Тогда
				
				// Заполним параметры расшифровки для новой строки вывода значений текущего показателя.
				ВыводимаяОбласть.Параметры.Расшифровка = СтруктураПараметров.РасшифровкаОбластиСчет;
				
			КонецЕсли;
			// бит_DKravchenko добавление кода. Конец. 04.02.2011}}
			
			ВыведеннаяОбласть = ДокументРезультат.Вывести(ВыводимаяОбласть);

			ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметров.НетЛинии;
			
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		ВыведеноПоказателей = ВыведеноПоказателей+1;
				
	КонецЦикла;

КонецПроцедуры // ВывестиПоказателиОборотноСальдовойВедомостиПоСчету()


// Процедура заполняет параметры расшифровки для счета по отчету оборотно сальдовая ведомость по счету.
//
// Параметры:
//  ОтчетОбъект 					  - ОтчетОбъект.
//	Выборка 			 	  		  - ВыборкаИзЗапроса.
//	СтруктураПараметров 	  		  - Структура.
//	ИмяРегистраБухгалтерии 			  - Строка.
//	РасшифровываемыйСчет 			  - ПланСчетовСсылка.
//  РасшифровываемыйСчетПредставление - Строка.
//
Процедура ЗаполнитьРасшифровкуДляСчета(ОтчетОбъект, Область, Выборка, СтруктураПараметров, Знач ИмяРегистраБухгалтерии,
	Знач РасшифровываемыйСчет, Знач РасшифровываемыйСчетПредставление, ТекущееИмяГруппировки) 
    
   ИмяКарточкаСчета = Нстр("ru = 'Карточка счета '");
	
    // бит_DKravchenko 22.04.2009 Начало добавления... 
    // Получим префикс имени отчета расшифровки.
    Префикс = ?(Найти(ИмяРегистраБухгалтерии, "бит") = 0, "", "бит_");
    
    // Удалим из имени регистра бухгалтерии префикс "бит".
    ИмяРегистраБухгалтерии = СтрЗаменить(ИмяРегистраБухгалтерии, "бит", "");
    // ...бит_DKravchenko 22.04.2009 Конец добавления 
	
	// бит_DKravchenko 16.06.2009 Начало добавления... 
	// Если это расшифровка данных дополнительного регистра бухгалтерии, тогда
	Если Найти(ВРег(ИмяРегистраБухгалтерии), "ДОПОЛНИТЕЛЬНЫЙ") > 0 Тогда
		
		ИмяРегистраБухгалтерии = "_Управленческий";
		
	КонецЕсли;
	// ...бит_DKravchenko 16.06.2009 Конец добавления
	
	//ПараметрыКарточкиСчета = Новый Соответствие;
	ПараметрыКарточкиСчета = Новый Структура;
    
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта", Префикс + "КарточкаСчета" + ИмяРегистраБухгалтерии);

	ПараметрыКарточкиСчета.Вставить("Счет", РасшифровываемыйСчет);

	ИмяГруппировки = ТекущееИмяГруппировки;
	
	Если ИмяГруппировки = "Счет" Тогда

		СписокРасшифровки = Новый СписокЗначений;
        СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, ИмяКарточкаСчета + РасшифровываемыйСчетПредставление);
		
	ИначеЕсли Лев(ИмяГруппировки, 8) = "Субконто"  Тогда

		// Надо в структуру доп ограничений поместить все группировки более высокого уровня
		ДополнительныеОтборы = СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ОтчетОбъект, Выборка, СтруктураПараметров.МассивГруппировок, Истина,ТекущееИмяГруппировки);
				
		ПараметрыКарточкиСчета.Вставить("ДополнительныеОтборы", Новый ХранилищеЗначения(ДополнительныеОтборы));
		
		СписокРасшифровки = Новый СписокЗначений;
		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, ИмяКарточкаСчета + РасшифровываемыйСчетПредставление);
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;	

	
КонецПроцедуры // ЗаполнитьРасшифровкуДляСчета()


// Функция создает структуру дополнительных ограничений для расшифровки отчета.
//
// Параметры:
//  ОтчетОбъект 		   - ОтчетОбъект.
//	Выборка 			   - ВыборкаИзЗапроса.
//	МассивГруппировок 	   - Массив.
//	ВыводитьВсеГруппировки - Булево.
//
// Возвращаемое значение:
//  ДополнительныеОтборы - ТаблицаЗначений.
//
Функция СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету(ОтчетОбъект, Выборка, МассивГруппировок, 
	Знач ВыводитьВсеГруппировки = Ложь, ИмяГруппировки) 
	
	ДополнительныеОтборы = бит_БухгалтерскиеОтчетыСервер.СоздатьТаблицуДляХраненияОтбора(Истина);
	
	//ИмяГруппировки = ТекущееИмяГруппировки;
	Если ВыводитьВсеГруппировки Тогда
		НомерГруппировкиВМассиве = МассивГруппировок.Количество() - 1;
	Иначе	
		НомерГруппировкиВМассиве = бит_РаботаСКоллекциямиКлиентСервер.ВернутьИндексВМассиве(МассивГруппировок, ИмяГруппировки);
	КонецЕсли;
	
	Для Сч = 0 По НомерГруппировкиВМассиве Цикл 
		
		ТекущееИмяГруппировки = Врег(МассивГруппировок[Сч]);
		
		Если ТекущееИмяГруппировки = "СЧЕТ"
			ИЛИ ТекущееИмяГруппировки = "ОБЩИЕ" Тогда         
			
			Продолжить;
			
		КонецЕсли;
		
		Измерение = ОтчетОбъект.ПостроительОтчета.ИзмеренияСтроки.Найти(ТекущееИмяГруппировки);
		
		СтрокаОтбора = ДополнительныеОтборы.ДОбавить();
		СтрокаОтбора.Использование = Истина;
		//// бит_ASubbotina изменение кода. Начало. 20.02.2012{{
		////СтрокаОтбора.Использование = Истина;
		//СтрокаОтбора.Использование = ОтчетОбъект.ПостроительОтчета.Отбор[Измерение.Имя].Использование;
		//// бит_ASubbotina изменение кода. Конец. 20.02.2012}}
		СтрокаОтбора.Имя = Измерение.ПутьКДанным;
		
		// Надо тип отбора определить и по нему можно сказать вид сравнения
		ВидСравненияДанных = ПолучитьВидОтбораПоТипуЗначения(Выборка[ТекущееИмяГруппировки]);
		
		СтрокаОтбора.ВидСравнения = ВидСравненияДанных;
		СтрокаОтбора.Значение = Выборка[ТекущееИмяГруппировки];
				
		Если Измерение <> Неопределено Тогда
					
			СтрокаОтбора.Имя = Измерение.ПутьКДанным;
			СтрокаОтбора.ПутьКДанным = Измерение.ПутьКДанным;
			
		Иначе
						
			СтрокаОтбора.Имя = ТекущееИмяГруппировки;
			СтрокаОтбора.ПутьКДанным = ТекущееИмяГруппировки;
			
		КонецЕсли;
	
	КонецЦикла;

	Возврат ДополнительныеОтборы;
	
КонецФункции // СоздатьСтруктуруДопОграниченийДляОборотноСальдовойВедомостиПоСчету()


// Функция Определяет вид отбора по типу значения объекта.
//
// Параметры:
//  ЗначениеОтбора – Произвольный.
//
// Возвращаемое значение:
//   ВидСравненияОтчета – ВидСравнения.
//
Функция ПолучитьВидОтбораПоТипуЗначения(ЗначениеОтбора)
	
	ВидСравненияОтчета = ВидСравнения.Равно;
	
	Если (ЗначениеОтбора = NULL)	
		ИЛИ НЕ ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		Возврат ВидСравненияОтчета;
		
	КонецЕсли;
	
	// Нужно определить это ссылочный тип или нет
	Попытка
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора))
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора)) Тогда
			
			ВидСравненияОтчета = ВидСравнения.ВИерархии;
				                				
		КонецЕсли; 
		
	Исключение
	КонецПопытки;
			
	Возврат ВидСравненияОтчета;
	
КонецФункции // ПолучитьВидОтбораПоТипуЗначения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
	
СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

// Сформируем список выбора регистров бухгалтерии.
мСписокРегистров = бит_УправленческийУчет.СформироватьСписокОбъектовДляВыбора(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии, "бит_Дополнительный");

мПрограммноеОткрытие = Ложь;
мЕстьРесурсСуммаМУ   = Ложь;
