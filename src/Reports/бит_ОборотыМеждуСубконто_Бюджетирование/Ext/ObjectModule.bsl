#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СохраненнаяНастройка Экспорт; // Текущий вариант отчета.  

Перем ИмяРегистраБухгалтерии Экспорт; // Хранить имя регистра бухгалтерии .

Перем МаксКоличествоСубконто Экспорт; // Количество субконто у регистра бухгалтерии. 

Перем ЕстьВалюта Экспорт; // Хранить признак наличия валюты .            

Перем ЕстьКоличество Экспорт; // Хранить признак наличия количества .       

Перем МассивШиринКолонок; // Хранить массив ширины колонок.            

Перем ШиринаТаблицы; // Хранит ширину таблицы.                 

Перем ЗаголовокОтчета Экспорт; // Хранит заголовок отчета  .      

Перем кэшВидовСубконто; // Хранит соответствие видов субконто.               

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

// Процедура выполняет сохранение настроек отчета.
// 
Процедура СохранитьНастройку() Экспорт

    ИсключаемыеРеквизиты = Новый Структура;
	// ИсключаемыеРеквизиты.Вставить("ПостроительОтчета");
    
    // Сформируем структуру настроек для сохранения.
    СтруктураНастроек = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтруктуруПараметровДляСохранения(ЭтотОбъект, ИсключаемыеРеквизиты);
	бит_БухгалтерскиеОтчетыСервер.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
    
КонецПроцедуры // СохранитьНастройку()

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
// 
Процедура ПрименитьНастройку() Экспорт
    
    // Применим настройки отчета.
    бит_БухгалтерскиеОтчетыСервер.ПрименитьСохраненнуюНастройку(ЭтотОбъект, Истина, Истина, Истина);
		
КонецПроцедуры // ПрименитьНастройку()

// Процедура заполняет настройки построителя отчетов.
// 
Процедура ЗаполнитьНачальныеНастройки() Экспорт
                  
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура перезаполняет настройки построителя отчетов с сохранением пользовательских настроек.
// 
Процедура ПерезаполнитьНачальныеНастройки() Экспорт
	
	// Настройки = ПостроительОтчета.ПолучитьНастройки();
	// 
	// ЗаполнитьНачальныеНастройки();
	// 
	// ПостроительОтчета.УстановитьНастройки(Настройки);
    
КонецПроцедуры // ПерезаполнитьНачальныеНастройки()

#КонецОбласти

#Область ЗаголовокОтчета

// Функция формирует заголовок отчета (синоним).
// 
// Возвращаемое значение:
//  Строка - заголовок отчета.
// 
Функция ЗаголовокОтчета() Экспорт
	
	ПредставлениеРегистра = Нстр("ru = 'бюджетирование'");
	
	ТекстЗаголовка = Нстр("ru = 'Обороты между субконто (%1%)'");
	ТекстЗаголовка = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстЗаголовка, ПредставлениеРегистра);

    Возврат ТекстЗаголовка;
       
КонецФункции // ЗаголовокОтчета()

// Процедура выводит шапку отчета.
// 
// Возвращаемое значение:
// 	ТабличныйДокумент - заголовок отчета.
//  
Функция СформироватьЗаголовок() Экспорт

    ОписаниеПериода = бит_БухгалтерскиеОтчетыСервер.СформироватьСтрокуВыводаПараметровПоДатам(Период.ДатаНачала, Период.ДатаОкончания);

	Макет = ПолучитьМакет("Макет");
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	ЗаголовокОтчета.Параметры.ОписаниеПериода  = ОписаниеПериода;
	ЗаголовокОтчета.Параметры.Заголовок        = ЗаголовокОтчета();

    ТекстСписокПоказателей = Нстр("ru = 'Выводимые данные: '");
    
    Если ВыводитьСуммуРегл Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + Нстр("ru = 'сумма (регл.)'");
    КонецЕсли;
    Если ВыводитьСуммуУпр Тогда 
        ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (упр.)'");
    КонецЕсли;
    Если ВыводитьСуммуСценарий Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'сумма (сценарий)'");
    КонецЕсли;
	Если ПоВалютам Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'валютная сумма'");
	КонецЕсли; 
	Если ПоКоличеству Тогда
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(Найти(ТекстСписокПоказателей, "сумма") = 0, "", ", ") + Нстр("ru = 'количество'");
	КонецЕсли;
    
	ТекстПроИтоги = "";
	Для каждого Строка Из Субконто Цикл		
		ТекстПроИтоги = ТекстПроИтоги + ", " + Строка(Строка.ВидСубконто);		
	КонецЦикла;
	
	ТекстПроИтоги = Нстр("ru = 'Виды субконто: '") + Сред(ТекстПроИтоги, 3);
	
	// Вывод списка фильтров:
	СтрОтбор = "";

	ЗаголовокОтчета.Параметры.ТекстПроСписокРесурсов = ТекстСписокПоказателей;
	ЗаголовокОтчета.Параметры.ТекстПроИтоги          = ТекстПроИтоги;

	Если Не ПустаяСтрока(СтрОтбор) Тогда
		ОбластьОтбор = Макет.ПолучитьОбласть("СтрокаОтбор");
		ОбластьОтбор.Параметры.ТекстПроОтбор = Нстр("ru = 'Отбор: '") + СтрОтбор;
		ЗаголовокОтчета.Вывести(ОбластьОтбор);
	КонецЕсли;

	Возврат(ЗаголовокОтчета);

	Возврат Новый ТабличныйДокумент;
    
КонецФункции // СформироватьЗаголовок()

#КонецОбласти

#Область ФормированиеОтчета

// Процедура выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
// 
// Параметры:
//  ДокументРезультат   - ТабличныйДокумент - Табличный документ, формируемый отчетом.
//  ПоказыватьЗаголовок - Булево (По умолчанию = Истина) - признак отображения заголовка.
//  ВысотаЗаголовка     - Число (По умолчанию = 0) - высота заголовка.
//  фТекстЗапроса       - Строка - текст запроса.
//  ГруппировкиСубконто - ТаблицаЗначений - группировки по субконто.
// 
// Возвращаемое значение:
//  Булево - отчет сформирован.
//  
Функция СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, фТекстЗапроса, ГруппировкиСубконто) Экспорт

	// Очистка табличного поля
	ДокументРезультат.Очистить();
	   	
	Если Не ПараметрыОтчетаКорректны() Тогда
		
		ОтчетСформирован = Ложь;
		
	Иначе
		
		ОтчетСформирован = Истина;
	   	    
	    кэшВидовСубконто.Очистить();

		// Запоминание ширины колонки
		Если НЕ ДокументРезультат.ВысотаТаблицы = ВысотаЗаголовка Тогда

			МассивШиринКолонок.Очистить();

			// Запоминать следует, если документ не пустой.
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				
				Для Сч = 1 По ШиринаТаблицы Цикл
					МассивШиринКолонок.Добавить(ДокументРезультат.Область(1, Сч).ШиринаКолонки);
				КонецЦикла;
				
			КонецЕсли;

		КонецЕсли;
	   		
		// Вывод заголовка отчета
		бит_БухгалтерскиеОтчетыСервер.СформироватьИВывестиЗаголовокОтчета(ЭтотОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	    
		Схема = Новый СхемаЗапроса;
		
		Запрос = Новый Запрос;

		Пакет = Схема.ПакетЗапросов[0];
		Оператор = Пакет.Операторы[0];
		
		// Источник
		ИсточникОбороты = Оператор.Источники.Добавить(Схема.ПакетЗапросов[0].ДоступныеТаблицы.Найти("РегистрБухгалтерии.бит_Бюджетирование.Обороты"));
		ИсточникОбороты.Источник.Псевдоним = "БухОбороты";
		
		// Поля
		МассивПолей = Новый Массив;	
		МассивПолей.Добавить("Счет");
		
		Для Инд = 1 ПО Субконто.Количество() Цикл
			МассивПолей.Добавить("Субконто" + Инд);
		КонецЦикла;
		
		МассивПолей.Добавить("КорСчет");
		
		Для Инд = 1 По КорСубконто.Количество() Цикл
			МассивПолей.Добавить("КорСубконто" + Инд);
		КонецЦикла;

		МассивПолей.Добавить("Сценарий");
		МассивПолей.Добавить("ЦФО,");
		МассивПолей.Добавить("Валюта,");
		МассивПолей.Добавить("ВалютаКор,");
		МассивПолей.Добавить("Организация,");
		
		Если ВыводитьСуммуРегл Тогда
			МассивПолей.Добавить("СуммаРеглОборотДт");
			МассивПолей.Добавить("СуммаРеглОборотКт");
		КонецЕсли;
		
		Если ВыводитьСуммуУпр Тогда
			МассивПолей.Добавить("СуммаУпрОборотДт");
			МассивПолей.Добавить("СуммаУпрОборотКт");
		КонецЕсли;
		
		Если ВыводитьСуммуСценарий Тогда
			МассивПолей.Добавить("СуммаСценарийОборотДт");
			МассивПолей.Добавить("СуммаСценарийОборотКт");
		КонецЕсли;
		
		Если ПоКоличеству Тогда
			МассивПолей.Добавить("КоличествоОборотДт");
			МассивПолей.Добавить("КоличествоОборотКт");
			МассивПолей.Добавить("КоличествоКорОборотДт");
			МассивПолей.Добавить("КоличествоКорОборотКт")
		КонецЕсли;

		Если ПоВалютам Тогда
			МассивПолей.Добавить("ВалютнаяСуммаОборотДт");
			МассивПолей.Добавить("ВалютнаяСуммаОборотКт");
		КонецЕсли;
				
		Для каждого ДоступноеПоле Из ИсточникОбороты.Источник.ДоступныеПоля Цикл
		
			Если НЕ МассивПолей.Найти(ДоступноеПоле.Имя) = Неопределено  Тогда
			
				 Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		// Определяем если есть количественные счета.
		Если ПоКоличеству тогда
			ВыражениеВыбора = Новый ВыражениеСхемыЗапроса("ВЫБОР
															|	КОГДА БУХОБОРОТЫ.СЧЕТ.КОЛИЧЕСТВЕННЫЙ
															|			ИЛИ БУХОБОРОТЫ.КОРСЧЕТ.КОЛИЧЕСТВЕННЫЙ
															|		ТОГДА ИСТИНА
															|	ИНАЧЕ ЛОЖЬ
															|КОНЕЦ");
		Иначе	
			ВыражениеВыбора = Новый ВыражениеСхемыЗапроса("Ложь");
		КонецЕсли;
		
		ПолеВыбора = Оператор.ВыбираемыеПоля.Добавить(Строка(ВыражениеВыбора));
		
		// Теперь зададим псевдоним для оператора выбора.
		Для каждого Колонка Из Пакет.Колонки Цикл
			Если ВРег(Колонка.Поля[0]) = ВРег(ВыражениеВыбора) Тогда
				Колонка.Псевдоним = "ЕстьКоличественныеСчета";
				Прервать;
			КонецЕсли;
		КонецЦикла;

		// Определяем если есть валютные счета
		Если ПоКоличеству тогда
			ВыражениеВыбора = Новый ВыражениеСхемыЗапроса("ВЫБОР
															|	КОГДА БУХОБОРОТЫ.СЧЕТ.ВАЛЮТНЫЙ
															|			ИЛИ БУХОБОРОТЫ.КОРСЧЕТ.ВАЛЮТНЫЙ
															|		ТОГДА ИСТИНА
															|	ИНАЧЕ ЛОЖЬ
															|КОНЕЦ");
		Иначе	
			ВыражениеВыбора = Новый ВыражениеСхемыЗапроса("Ложь");
		КонецЕсли;
		
		ПолеВыбора = Оператор.ВыбираемыеПоля.Добавить(Строка(ВыражениеВыбора));
		
		// Теперь зададим псевдоним для оператора выбора.
		Для каждого Колонка Из Пакет.Колонки Цикл
			Если ВРег(Колонка.Поля[0]) = ВРег(ВыражениеВыбора) И Колонка.Псевдоним <> "ЕстьКоличественныеСчета" Тогда
				Колонка.Псевдоним = "ЕстьВалютныеСчета";
				Прервать;
			КонецЕсли;
		КонецЦикла;

		// Для Инд = 1 По Субконто.Количество() Цикл
		// 	Для Каждого Колонка Из Пакет.Колонки Цикл
		// 		Если ВРег(Колонка.Псевдоним) = ВРег("Субконто" + Инд) Тогда
		// 			Колонка.Псевдоним = Строка(Субконто[Инд -1].ВидСубконто.ИмяПредопределенныхДанных);
		// 		КонецЕсли;
		// 	КонецЦикла;
		// КонецЦикла;

		// Для Инд = 1 По КорСубконто.Количество() Цикл
		// 	Для Каждого Колонка Из Пакет.Колонки Цикл
		// 		Если ВРег(Колонка.Псевдоним) = ВРег("КорСубконто" + Инд) Тогда
		// 			Колонка.Псевдоним = Строка(КорСубконто[Инд -1].ВидСубконто.ИмяПредопределенныхДанных);
		// 		КонецЕсли;
		// 	КонецЦикла;
		// КонецЦикла;

		Если ЗначениеЗаполнено(Период.ДатаНачала) Тогда
			ИсточникОбороты.Источник.Параметры[0].Выражение = Новый ВыражениеСхемыЗапроса("&ДатаНач");
			Запрос.УстановитьПараметр("ДатаНач", Период.ДатаНачала);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			ИсточникОбороты.Источник.Параметры[1].Выражение = Новый ВыражениеСхемыЗапроса("&ДатаКон");
			Запрос.УстановитьПараметр("ДатаКон", Период.ДатаОкончания);
		КонецЕсли;
				
		ТекстОтбора = "";
		КоличествоЭлементовОтбора = 1;
		
		Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			ОкончаниеУсловия = ?(КоличествоЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество(), "", " И ");
			
			Если ЭлементОтбора.Использование Тогда
				
				ЭтоЭлементСубконто = Ложь;
				Для Инд = 1 По Субконто.Количество()  Цикл
					Для Каждого Колонка Из Пакет.Колонки Цикл                                             
						
						Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Субконто" + Инд Тогда
							
							СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбораКомповнокиДанных(ЭлементОтбора.ВидСравнения, Строка("&" + Субконто[Инд -1].ВидСубконто.ИмяПредопределенныхДанных), Строка(ЭлементОтбора.ЛевоеЗначение));
							ТекстОтбора = ТекстОтбора + СтрокаОтбора + ОкончаниеУсловия;
							Запрос.УстановитьПараметр(Субконто[Инд -1].ВидСубконто.ИмяПредопределенныхДанных, ЭлементОтбора.ПравоеЗначение);
							ЭтоЭлементСубконто = Истина;
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Для Инд = 1 По КорСубконто.Количество() Цикл
					Для Каждого Колонка Из Пакет.Колонки Цикл
						
						Если Строка(ЭлементОтбора.ЛевоеЗначение) = "КорСубконто" + Инд Тогда
							СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбораКомповнокиДанных(ЭлементОтбора.ВидСравнения, Строка("&" + КорСубконто[Инд -1].ВидСубконто.ИмяПредопределенныхДанных), Строка(ЭлементОтбора.ЛевоеЗначение));
							ТекстОтбора = ТекстОтбора + СтрокаОтбора + ОкончаниеУсловия;
							Запрос.УстановитьПараметр(КорСубконто[Инд -1].ВидСубконто.ИмяПредопределенныхДанных, ЭлементОтбора.ПравоеЗначение);
							ЭтоЭлементСубконто = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;

				Если Не ЭтоЭлементСубконто Тогда
					
					Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Счет" Тогда
						
						СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбораКомповнокиДанных(ЭлементОтбора.ВидСравнения, "&Счет", "Счет");
						ИсточникОбороты.Источник.Параметры[3].Выражение = Новый ВыражениеСхемыЗапроса(СтрокаОтбора);
						
					ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "КорСчет" Тогда
						
						СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбораКомповнокиДанных(ЭлементОтбора.ВидСравнения, "&КорСчет", "КорСчет");
						ИсточникОбороты.Источник.Параметры[6].Выражение = Новый ВыражениеСхемыЗапроса("КорСчет = &КорСчет");
						
					Иначе
						
						СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбораКомповнокиДанных(ЭлементОтбора.ВидСравнения, "&" + Строка(ЭлементОтбора.ЛевоеЗначение), Строка(ЭлементОтбора.ЛевоеЗначение));
						ТекстОтбора = ТекстОтбора + СтрокаОтбора + ОкончаниеУсловия;
						
					КонецЕсли;
					
					Запрос.УстановитьПараметр(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
				КонецЕсли;
				
			КонецЕсли;	
			
			КоличествоЭлементовОтбора = КоличествоЭлементовОтбора + 1;
			
		КонецЦикла;
		
		// Отбор по организации
		Если ОрганизацияИспользование Тогда
			
			СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(ОрганизацияВидСравнения, "&Организация", "Организация");

			Если ТекстОтбора <> "" Тогда
				ТекстОтбора = ТекстОтбора + " И " + СтрокаОтбора;
			Иначе
				ТекстОтбора = СтрокаОтбора;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Организация", Организация);
			
		КонецЕсли;
		
		// Отбор по сценарию
		Если СценарийИспользование Тогда
			
			СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(СценарийВидСравнения, "&Сценарий", "Сценарий");

			Если ТекстОтбора <> "" Тогда
				ТекстОтбора = ТекстОтбора + " И " + СтрокаОтбора;
			Иначе
				ТекстОтбора = СтрокаОтбора;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Сценарий", Сценарий);
			
		КонецЕсли;

		// Устанавливаем отбор в запросе
		Если ТекстОтбора <> "" Тогда
			ИсточникОбороты.Источник.Параметры[5].Выражение = Новый ВыражениеСхемыЗапроса(ТекстОтбора);
		КонецЕсли;
		
		ИсточникОбороты.Источник.Параметры[4].Выражение = Новый ВыражениеСхемыЗапроса("&СписокВидовСубконто");
	    ИсточникОбороты.Источник.Параметры[7].Выражение = Новый ВыражениеСхемыЗапроса("&СписокКорВидовСубконто");
		
		// Устанавливаем текст запроса для сохранения настройки.
		фТекстЗапроса = Схема.ПолучитьТекстЗапроса();
		
		// Зададим контрольные точки итоги
		Пакет.ОбщиеИтоги = Истина;

		Для Инд = 1 По Субконто.Количество() Цикл
			Пакет.КонтрольныеТочкиИтогов.Добавить("Субконто" + Инд);
		КонецЦикла;
		
		Для Инд = 1 По КорСубконто.Количество() Цикл
			Пакет.КонтрольныеТочкиИтогов.Добавить("КорСубконто" + Инд);
		КонецЦикла;
		
		// Установим агрегатные функции для итогов
		Для каждого КолонкаСхемы Из Пакет.Колонки Цикл
			Если Найти(КолонкаСхемы.Псевдоним, "Сумма") > 0 ИЛИ КолонкаСхемы.Псевдоним = "ЕстьКоличественныеСчета"
				ИЛИ КолонкаСхемы.Псевдоним = "ЕстьВалютныеСчета"
				ИЛИ Найти(КолонкаСхемы.Псевдоним, "Количество") > 0 Тогда
				Пакет.ВыраженияИтогов.Добавить(КолонкаСхемы);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ВыражениеИтога Из Пакет.ВыраженияИтогов Цикл
			Если Найти(ВыражениеИтога.Поле.Псевдоним, "Сумма") > 0 ИЛИ Найти(КолонкаСхемы.Псевдоним, "Количество") > 0 Тогда
				ВыражениеИтога.Выражение = Новый ВыражениеСхемыЗапроса("Сумма(" + ВыражениеИтога.Поле.Псевдоним + ")");
			КонецЕсли;
			Если ВыражениеИтога.Поле.Псевдоним = "ЕстьКоличественныеСчета" Тогда
				ВыражениеИтога.Выражение = Новый ВыражениеСхемыЗапроса("Максимум(" + ВыражениеИтога.Поле.Псевдоним + ")");
			КонецЕсли;
			Если ВыражениеИтога.Поле.Псевдоним = "ЕстьВалютныеСчета" Тогда
				ВыражениеИтога.Выражение = Новый ВыражениеСхемыЗапроса("Максимум(" + ВыражениеИтога.Поле.Псевдоним + ")");
			КонецЕсли;
		КонецЦикла;
				
		Запрос.Текст = Схема.ПолучитьТекстЗапроса();
		
		Запрос.УстановитьПараметр("СписокВидовСубконто", Субконто.ВыгрузитьКолонку("ВидСубконто"));
		Запрос.УстановитьПараметр("СписокКорВидовСубконто", КорСубконто.ВыгрузитьКолонку("ВидСубконто"));

		
		// Состояние("Выполнение запроса");
		Результат = Запрос.Выполнить();
				
		ОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Общие");
		ЕстьИтог  = ОбщийИтог.Следующий();

		Макет = ПолучитьМакет("ОборотыМеждуСубконто");
		
		ВысотаЗаголовка = 4;
		
		Если ГруппировкиСубконто.Найти(Истина, "Использовать") = Неопределено Тогда
			
			ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыСчета");
			ДокументРезультат.Вывести(ОбластьЗаголовкаТаблицы, 1);
			
			МассивСубконто = Новый Массив;

			// Вывод субконто
			Для Инд = 0 По Субконто.Количество()-1 Цикл
				МассивСубконто.Добавить("Субконто"+ Строка(Инд+1));
			КонецЦикла;
			
			// Вывод кор. субконто
			Для Инд = 0 По КорСубконто.Количество()-1 Цикл
				МассивСубконто.Добавить("КорСубконто"+ Строка(Инд+1));
			КонецЦикла;

		Иначе
			
			ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
					
			ОбластьПродолжениеТаблицы = Макет.ПолучитьОбласть("ТаблицаПродолжение");
			МассивСубконто = Новый Массив;
			
			ЗаголовокТаблицыВыведен = Ложь;
			
			// Вывод субконто
			Для Инд = 0 По Субконто.Количество()-1 Цикл
				
				СтрГруппировкиСубконто = ГруппировкиСубконто.Найти(Субконто[Инд].ВидСубконто, "Субконто");

				Если Не ЗаголовокТаблицыВыведен Тогда
					Если СтрГруппировкиСубконто.Использовать Тогда
						ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
						ОбластьЗаголовкаТаблицы.Параметры.Субконто = Субконто[Инд].ВидСубконто;
						ДокументРезультат.Вывести(ОбластьЗаголовкаТаблицы, 1);
						ЗаголовокТаблицыВыведен = Истина;
					КонецЕсли;
				Иначе
					Если СтрГруппировкиСубконто.Использовать Тогда
						
						ОбластьПродолжениеТаблицы.Параметры.СубконтоДалее = Субконто[Инд].ВидСубконто;
						ДокументРезультат.Вывести(ОбластьПродолжениеТаблицы);
						ВысотаЗаголовка = ВысотаЗаголовка +1;

					КонецЕсли;
					
				КонецЕсли;
							
				МассивСубконто.Добавить("Субконто"+ Строка(Инд+1));
				
				ВысотаЗаголовка = ВысотаЗаголовка +1;
				
			КонецЦикла;
			
			// Вывод кор. субконто
			Для Инд = 0 По КорСубконто.Количество()-1 Цикл
				
				СтрГруппировкиСубконто = ГруппировкиСубконто.Найти(КорСубконто[Инд].ВидСубконто, "Субконто");

				Если Не ЗаголовокТаблицыВыведен Тогда
					Если СтрГруппировкиСубконто.Использовать Тогда
						ОбластьЗаголовкаТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
						ОбластьЗаголовкаТаблицы.Параметры.Субконто = "Кор. " + КорСубконто[Инд].ВидСубконто;
						ДокументРезультат.Вывести(ОбластьЗаголовкаТаблицы, 1);
						ЗаголовокТаблицыВыведен = Истина;
					КонецЕсли;
				Иначе
					Если СтрГруппировкиСубконто.Использовать Тогда
						
						ОбластьПродолжениеТаблицы.Параметры.СубконтоДалее = "Кор. " + КорСубконто[Инд].ВидСубконто;
						ДокументРезультат.Вывести(ОбластьПродолжениеТаблицы);
						ВысотаЗаголовка = ВысотаЗаголовка +1;
						
					КонецЕсли;
				КонецЕсли;
				
				МассивСубконто.Добавить("КорСубконто"+ Строка(Инд+1));
				
			КонецЦикла;
			
			ОбластьТаблицаПодвал = Макет.ПолучитьОбласть("ТаблицаПодвал");
			ДокументРезультат.Вывести(ОбластьТаблицаПодвал);

		КонецЕсли;
		
		МассивРесурсов = СформироватьМассивПоказателей();
		
		ОбластьСтрокаСубконто  		  = Макет.ПолучитьОбласть("СтрокаСубконто");
		// ОбластьИтогСубконто    		 = Макет.ПолучитьОбласть("ИтогСубконто");
		// ОбластьИтогСубконтоКоличество = Макет.ПолучитьОбласть("ИтогСубконтоКоличество");
		
		// Счет
		ОбластьСтрокаСчет 		    = Макет.ПолучитьОбласть("СтрокаСчет");
		ОбластьСтрокаСчетКоличество = Макет.ПолучитьОбласть("СтрокаСчетКоличество");

		// Валюты
		ОбластьСтрокаВалюта 		= Макет.ПолучитьОбласть("СтрокаВалюта");
		
		// Сдвиг уровня выводимой группировки отчета относительно группировки запроса.
		СдвигУровня = 0;
		
		// Флаг сброса сдвига уровня при выводе группировки по счету.
		СброситьСдвигУровня = Истина;

		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("ОбластьСтрокаСчет"		  , ОбластьСтрокаСчет);
		СтруктураПараметров.Вставить("ОбластьСтрокаСчетКоличество", ОбластьСтрокаСчетКоличество);
		СтруктураПараметров.Вставить("ОбластьСтрокаВалюта"		  , ОбластьСтрокаВалюта);
		
		СтруктураПараметров.Вставить("ОбластьСтрокаСубконто"		, ОбластьСтрокаСубконто);
		// СтруктураПараметров.Вставить("ОбластьИтогСубконто"		, ОбластьИтогСубконто);
		// СтруктураПараметров.Вставить("ОбластьИтогСубконтоКоличество", ОбластьИтогСубконтоКоличество);
		// 
		СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
		
		СтруктураПараметров.Вставить("МассивСубконто"   , МассивСубконто);
		
		СтруктураПараметров.Вставить("ДокументРезультат", ДокументРезультат);
	    
	    СтруктураПараметров.Вставить("МассивРесурсов"   , МассивРесурсов);
	    
	    НомерВалютнойСуммы = СтруктураПараметров.МассивРесурсов.Найти("ВалютнаяСумма");
	    Если Не НомерВалютнойСуммы = Неопределено Тогда
	        СтруктураПараметров.МассивРесурсов.Удалить(НомерВалютнойСуммы);
	    КонецЕсли;
	    
	    НомерКоличества = СтруктураПараметров.МассивРесурсов.Найти("Количество");
	    Если Не НомерКоличества = Неопределено Тогда
	        СтруктураПараметров.МассивРесурсов.Удалить(НомерКоличества);
	    КонецЕсли;
		
		НомерКоличестваКор = СтруктураПараметров.МассивРесурсов.Найти("КоличествоКор");
	    Если Не НомерКоличества = Неопределено Тогда
	        СтруктураПараметров.МассивРесурсов.Удалить(НомерКоличества);
		КонецЕсли;
		
		// Вывод отчета
		ДокументРезультат.НачатьАвтогруппировкуСтрок();

		ВывестиСубконто(Результат, СтруктураПараметров, ГруппировкиСубконто);
		
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

		// Итого по отчету
		ОбластьИтог = Макет.ПолучитьОбласть("ИтогОтчет");
		ОбластьИтог.Параметры.Заполнить(ОбщийИтог);
		
		// Заполним параметры области.
		бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ОбластьИтог, ОбщийИтог, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
	    
		Если ЕстьИтог Тогда
		    
		    ТекстСуммаОборотДт = "";
		    ТекстСуммаОборотКт = "";
		    
		    Для Каждого ТекРесурс Из СтруктураПараметров.МассивРесурсов Цикл
		        
		        СуммаОборотДт = ОбщийИтог[ТекРесурс + "ОборотДт"];
		        СуммаОборотКт = ОбщийИтог[ТекРесурс + "ОборотКт"];
		        ТекстСуммаОборотДт = ТекстСуммаОборотДт + ?(ПустаяСтрока(ТекстСуммаОборотДт), "", Символы.ПС) 
		                          + Строка(Формат(СуммаОборотДт, "ЧЦ=15; ЧДЦ=2"));
		        
		        ТекстСуммаОборотКт = ТекстСуммаОборотКт + ?(ПустаяСтрока(ТекстСуммаОборотКт), "", Символы.ПС) 
		                          + Строка(Формат(СуммаОборотКт, "ЧЦ=15; ЧДЦ=2"));
		    КонецЦикла;
		    
		    ОбластьИтог.Параметры.СуммаОборотДт = ТекстСуммаОборотДт;
			ОбластьИтог.Параметры.СуммаОборотКт = ТекстСуммаОборотКт;
		    
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьИтог);
		
		// Заполним общую расшифровку:
		СтруктураНастроекОтчета = Новый Структура;

		СтруктураНастроекОтчета.Вставить("Период"   , Период);
		
		СтруктураНастроекОтчета.Вставить("Сценарий"             , Сценарий);
		СтруктураНастроекОтчета.Вставить("СценарийВидСравнения" , СценарийВидСравнения);
		СтруктураНастроекОтчета.Вставить("СценарийИспользование", СценарийИспользование);
		
		// Изменение кода. Начало. 12.05.2014{{
		Если бит_МеханизмДопИзмерений.ЕстьДопИзмерениеОрганизация() Тогда
			СтруктураНастроекОтчета.Вставить("Организация"             , Организация);
		    СтруктураНастроекОтчета.Вставить("ОрганизацияВидСравнения" , ОрганизацияВидСравнения);
		    СтруктураНастроекОтчета.Вставить("ОрганизацияИспользование", ОрганизацияИспользование);
		КонецЕсли;
		// Изменение кода. Конец. 12.05.2014}}
		
		СтруктураНастроекОтчета.Вставить("ВыводитьСуммуРегл"    , ВыводитьСуммуРегл);
		СтруктураНастроекОтчета.Вставить("ВыводитьСуммуУпр"     , ВыводитьСуммуУпр);
		СтруктураНастроекОтчета.Вставить("ВыводитьСуммуСценарий", ВыводитьСуммуСценарий);
		// 
		СтруктураНастроекОтчета.Вставить("ПоказыватьЗаголовок", ПоказыватьЗаголовок);

		ДокументРезультат.Область(1, 1).Расшифровка = СтруктураНастроекОтчета;
				
		ШиринаТаблицы = ДокументРезультат.ШиринаТаблицы;
		
		// Восстановление ширин колонок
		Если ТипЗнч(МассивШиринКолонок) = Тип("Массив") Тогда
			Если МассивШиринКолонок.Количество() = ШиринаТаблицы Тогда
				Инд = 0;
				Для Каждого Элемент Из МассивШиринКолонок Цикл
					ДокументРезультат.Область(, 1 + Инд, , 1 + Инд).ШиринаКолонки = Элемент;
					Инд = Инд + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		// Зафиксируем заголовок отчета
		ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;
		
		// Шапка отчета должна быть на каждом листе
		ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка + 1, , ВысотаЗаголовка + 3);
		
		// Первую колонку не печатаем
		ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
		
		// Присвоим имя для сохранения параметров печати табличного документа.
		ДокументРезультат.КлючПараметровПечати = "ОборотыМеждуСубконто" + ИмяРегистраБухгалтерии;
		
		бит_БухгалтерскиеОтчетыСервер.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь")));
	КонецЕсли;
		
	Возврат ОтчетСформирован;
	
КонецФункции // СформироватьОтчет()

// Функция возвращает массив показателей (ресурсов регистра) для отчета.
// 
// Возвращаемое значение:
//  Массив - массив показателей.
// 
Функция СформироватьМассивПоказателей() Экспорт
	
	МассивПоказателей = Новый Массив;
    
    Если ВыводитьСуммуРегл Тогда 
        МассивПоказателей.Добавить("СуммаРегл");
    КонецЕсли;
    
    Если ВыводитьСуммуУпр Тогда 
        МассивПоказателей.Добавить("СуммаУпр");
    КонецЕсли;  
    
    Если ВыводитьСуммуСценарий Тогда
        МассивПоказателей.Добавить("СуммаСценарий");
    КонецЕсли;
    
    Если ПоВалютам Тогда
		МассивПоказателей.Добавить("ВалютнаяСумма");
	КонецЕсли; 
	
	Если ПоКоличеству Тогда
		МассивПоказателей.Добавить("Количество");
		МассивПоказателей.Добавить("КоличествоКор");
	КонецЕсли;
    
	Возврат МассивПоказателей;
		
КонецФункции // СформироватьМассивПоказателей()

#КонецОбласти

// Процедура добавляет отбор по сценарию в таблицу отборов.
// 
// Параметры:
// 	ЭтаФорм      - Управляемая форма.
//  СтрокаОтбора - ДанныеФормыЭлементКоллекции.
// 
Процедура ДобавитьОтборПоОрганизации(ЭтаФорма, СтрокаОтбора = Неопределено) Экспорт 
	
	СтрокаОтбора = ЭтаФорма.ТаблицаОтбор.Добавить();
		
	СтрокаОтбора.ПутьКДанным   = "Организация";
	СтрокаОтбора.Имя 		   = "Организация";
	СтрокаОтбора.Представление = "Организация";
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТекущегоТипа = Новый ОписаниеТипов(МассивТипов);
	ПривестиЗначенияЭлементаОтбора(СтрокаОтбора, ОписаниеТекущегоТипа);
		
КонецПроцедуры // ДобавитьОтборПоСценарию()

// Процедура приводит значения строки отборов к нужному типу.
// 
// Параметры:
// 	СтрокаОтбора 		 - ДанныеФормыЭлементКоллекции.
//  ОписаниеТекущегоТипа - ОписаниеТипов.
// 
Процедура ПривестиЗначенияЭлементаОтбора(СтрокаОтбора, ОписаниеТекущегоТипа) Экспорт 
	
	СтрокаОтбора.ТипЗначения = ОписаниеТекущегоТипа;
	
	СтрокаОтбора.Значение   = ОписаниеТекущегоТипа.ПривестиЗначение(СтрокаОтбора.Значение);
	СтрокаОтбора.ЗначениеС  = ОписаниеТекущегоТипа.ПривестиЗначение(СтрокаОтбора.ЗначениеС);
	СтрокаОтбора.ЗначениеПо = ОписаниеТекущегоТипа.ПривестиЗначение(СтрокаОтбора.ЗначениеПо);
		
КонецПроцедуры // ПривестиЗначенияЭлементаОтбора()

// Процедура устанавливает настройки по умолчанию.
// 
// Параметры:
//  Отчет     	   - ДанныеФормыСтруктура.
//  ЭтаФорма 	   - УправляемаяФорма.
//  ИмяТипаОбъекта - Строка.
// 
Процедура УстановитьЗначенияНастроекОтчетаПоУмолчанию(Отчет, ЭтаФорма, ИмяТипаОбъекта) Экспорт

	// Показатели
	Отчет.ВыводитьСуммуРегл 	= Истина;
	Отчет.ВыводитьСуммуУпр 		= Истина;
	Отчет.ВыводитьСуммуСценарий = Истина;
		
	// Параметры
	Отчет.Период = Новый СтандартныйПериод();
	Если ЭтаФорма.фКэшЗначений.ЕстьРкПериодичность Тогда
		Отчет.Периодичность = "";
	КонецЕсли;
	
	// Виды субконто
	Если ЭтаФорма.фКэшЗначений.ЕстьТчСубконто Тогда
		Отчет.Субконто.Очистить();		
	КонецЕсли;
		
	// Таблица отборов
	Если ЭтаФорма.фКэшЗначений.ЕстьТаблицаОтборов Тогда
		
		// Очистка отборов
		ЭтаФорма.ТаблицаОтбор.Очистить();
	              	
		ДобавитьОтборПоОрганизации(ЭтаФорма);
		
		ДобавитьОтборыПоУмолчанию(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьТекстЗапросаПоУмолчанию(ЭтаФорма);
	
	// Текст запроса
	// ТекстЗапроса = СформироватьТекстЗапроса(ЭтаФорма);
	// ЭтаФорма.фТекстЗапроса = ТекстЗапроса;
	
	// Показывать заголовок
	ЭтаФорма.фПоказыватьЗаголовок = Истина;
	      		      
КонецПроцедуры // УстановитьЗначенияНастроекОтчетовБюджетированияПоУмолчанию()

// Функция создает схему компоновки данных по тексту запроса.
// 
// Параметры:
//  ТекстЗапроса    - Строка.
//  ИмяНабораДанных - Строка.
// 
// Возвращаемое значение:
//  СКД - СхемаКомпоновкиДанных.
// 
Функция СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса, ИмяНабораДанных = "НаборДанныхОсновной") Экспорт
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя 				  = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя 						 = ИмяНабораДанных; 
	НаборДанных.ИсточникДанных 				 = "ИсточникДанных";
	НаборДанных.Запрос 						 = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст = ТекстЗапроса;
	Построитель.ЗаполнитьНастройки();
	
	Для каждого ПолеПостроителя Из Построитель.ДоступныеПоля Цикл
		
		ПолеКомпоновки = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеКомпоновки.Поле = ПолеПостроителя.Имя;
		ПолеКомпоновки.ПутьКДанным = ПолеПостроителя.ПутьКДанным;
		ПолеКомпоновки.ОграничениеИспользованияРеквизитов.Порядок = Истина;
		ПолеКомпоновки.Заголовок = ?(ПолеПостроителя.Представление = "Ссылка", "Измерение", ПолеПостроителя.Представление);
		ПолеКомпоновки.Роль.Обязательное = Истина;

		Если ПолеПостроителя.Отбор Тогда
			
			ВыбранноеПоле = СКД.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеПостроителя.Имя);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ГруппировкаКомпоновки = СКД.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле         = ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтовыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	
	Возврат СКД
	
КонецФункции // СоздатьСхемуКомпоновкиПоЗапросу()

// Процедура инициализирует компоновщик, используемый для фильтрации структуры дерева.
// 
// Параметры:
//  вхТекстЗапроса.
//  ЭтаФорма.
// 
Процедура ИнициализироватьКомпоновщик(вхТекстЗапроса, ЭтаФорма) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	ЗагрузитьНастройкиПоУмолчанию = Истина;
	Компоновщик = КомпоновщикНастроек;
	АдресКомпоновки = "";
	ТекстЗапроса = бит_МеханизмПолученияДанных.АдаптироватьТекстПостроителяДляКомпоновки(вхТекстЗапроса);
	
	ПредОтбор = Компоновщик.Настройки.Отбор.Элементы;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		// Создаем СКД по запросу
		// СКД = бит_МеханизмПолученияДанных.СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса);
		СКД = СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса);
		
		// АдресКомпоновки = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);		
		
		// Если Найти(ТекстЗапроса, "&Бюджет") > 0 Тогда.
		// 	
		// 	//  параметр Бюджет не должен быть доступен в настройках СКД
		// 	ПараметрСКД = СКД.Параметры.Добавить();
		// 	ПараметрСКД.Имя                      = "Бюджет";
		// 	ПараметрСКД.Заголовок                = "Бюджет";
		// 	ПараметрСКД.ТипЗначения              = Новый ОписаниеТипов("СправочникСсылка.бит_Бюджеты");
		// 	ПараметрСКД.ВключатьВДоступныеПоля   = Ложь;
		// 	ПараметрСКД.ОграничениеИспользования = Истина;
		// 	ПараметрСКД.Значение                 = Бюджет;
		// 
		// КонецЕсли; 
		
        АдресКомпоновки = ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
		
		// Инициализируем компоновщик
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресКомпоновки);
		Попытка
			
			Компоновщик.Инициализировать(ИсточникНастроек);
			
		Исключение
			
			ТекстСообщения =  НСтр("ru = 'Не удалось инициализировать компоновщик для отбора! Попробуйте обновить текст запроса. Описание ошибки: %1%.'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, ОписаниеОшибки());
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецПопытки;
		
		Если ЗагрузитьНастройкиПоУмолчанию Тогда
			
			Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
			
			Если ПредОтбор.Количество() > 0 Тогда
			
				Для каждого Эл Из ПредОтбор Цикл
				
					НовЭл = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип(Эл));
					ЗаполнитьЗначенияСвойств(НовЭл, Эл);
				
				КонецЦикла; 
				
				Компоновщик.Восстановить();
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		НастройкиИзмерений = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("бит_НастройкиДополнительныхИзмерений");
		бит_МеханизмДопИзмерений.СформироватьЗаголовкиПолейДополнительныхИзмеренийНастройкиФормыВвода(СКД 
																						,"НаборДанныхОсновной" 
																						,НастройкиИзмерений);	
		
		
	КонецЕсли; 
	
	
	ЭтаФорма.СхемаКомпоновкиДанных = АдресКомпоновки;
	// Возврат АдресКомпоновки;
	
КонецПроцедуры // ИнициализироватьКомпоновщик()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

// Проверка корректности настроек отчета
// 
// Возвращаемое значение:
//   Булево
// 
Функция ПараметрыОтчетаКорректны()
  	
	РезультатПроверки = 
		бит_ОбщегоНазначенияКлиентСервер.ВременнойИнтервалКорректный(Период.ДатаНачала, Период.ДатаОкончания)
		// И бит_БухгалтерскиеОтчетыСервер.ПроверитьЗаполнениеРегистраБухгалтерии(РегистрБухгалтерии).
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьКорректностьСубконто(Субконто)
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьКорректностьСубконто(КорСубконто, "кор. ")
		И бит_БухгалтерскиеОтчетыСервер.ПроверитьНаличиеВыбранногоПоказателя(ЭтотОбъект, Истина);	
		
	Возврат РезультатПроверки;
	
КонецФункции // ПараметрыОтчетаКорректны()

#КонецОбласти

#Область ФормированиеОтчета

// Заполняет параметры расшифровки
// 
// Параметры:
// 	Область
//  Выборка
//  ОтборСубконто
// 
Процедура ЗаполнитьПараметрыРасшифровки(Область, Выборка, ОтборСубконто = Неопределено)
	
	Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "КорСубконто" И Прав(Выборка.Группировка(),1) = "1" Тогда
		ОтборСубконто = Новый Соответствие;
	КонецЕсли;

	ПараметрыКарточкиСчета = Новый Структура;
    
    ИмяРегистраБухгалтерииБезПрефикса = СтрЗаменить(ИмяРегистраБухгалтерии, "бит", "");
    
	ПараметрыКарточкиСчета.Вставить("ИмяОбъекта"	   , "бит_ОтчетПоПроводкам" + ИмяРегистраБухгалтерииБезПрефикса);
	ПараметрыКарточкиСчета.Вставить("СчетДт"		   , Выборка.Счет); 
	ПараметрыКарточкиСчета.Вставить("СчетКт"		   , Выборка.КорСчет);
	ПараметрыКарточкиСчета.Вставить("СпособРасшифровки", "Отчет");

	ПараметрыКарточкиСубконто = Новый Структура;
	
	ПараметрыКарточкиСубконто.Вставить("ИмяОбъекта"		  , "бит_КарточкаСубконто" + ИмяРегистраБухгалтерииБезПрефикса);
	ПараметрыКарточкиСубконто.Вставить("СпособРасшифровки", "Отчет");
	
	Если Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "Субконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда                                                   
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			ПараметрыКарточкиСубконто.Вставить("Отбор"		 , ОтборРасшифровка);
			ПараметрыКарточкиСубконто.Вставить("ВидыСубконто", Субконто.ВыгрузитьКолонку("ВидСубконто"));
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСубконто, Нстр("ru = 'Карточка субконто '") + Выборка.Группировка());
		
	ИначеЕсли Лев(Выборка.Группировка(), СтрДлина(Выборка.Группировка()) - 1) = "КорСубконто" Тогда

		Если ОтборСубконто <> Неопределено Тогда
			
			ОтборСубконто.Вставить(Выборка.Группировка(), Выборка[Выборка.Группировка()]);
			
			// Область должна содержать свою копию отбора по субконто.
			ОтборРасшифровка = бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборСубконто);
			
			ПараметрыКарточкиСубконто.Вставить("Отбор"		 , ОтборРасшифровка);
			ПараметрыКарточкиСубконто.Вставить("ВидыСубконто", КорСубконто.ВыгрузитьКолонку("ВидСубконто"));
			
		КонецЕсли;

		СписокРасшифровки = Новый СписокЗначений;

		СписокРасшифровки.Добавить(ПараметрыКарточкиСубконто, Нстр("ru = 'Карточка субконто '") + Выборка.Группировка());

	ИначеЕсли Выборка.Группировка() = "" Тогда

		СписокРасшифровки = Новый СписокЗначений;
		
		ОтборРасшифровка = Новый Соответствие;

		Для Индекс = 1 По Субконто.Количество() Цикл
			ОтборРасшифровка.Вставить("СубконтоДт" + Индекс, Выборка["Субконто"+Индекс]);
		КонецЦикла;
		
        Для Индекс = 1 По КорСубконто.Количество() Цикл
			ОтборРасшифровка.Вставить("СубконтоКт" + Индекс, Выборка["КорСубконто"+Индекс]);
		КонецЦикла;
	
		ПараметрыКарточкиСчета.Вставить("Отбор", ОтборРасшифровка);
		
		СписокРасшифровки.Добавить(ПараметрыКарточкиСчета, Нстр("ru = 'Отчет по проводкам'"));
		
	Иначе
		
		СписокРасшифровки = Неопределено;
		
	КонецЕсли;

	Область.Параметры.Расшифровка = СписокРасшифровки;

КонецПроцедуры // ЗаполнитьПараметрыРасшифровки()

// Процедура выводит в отчет строки счетов.
// 
// Параметры:
//  Выборка
//  СтруктураПараметров - Структура.
//  ОтборДляРасшифровки.
// 
Процедура ВывестиСчета(Выборка, СтруктураПараметров, ОтборДляРасшифровки = Неопределено, Отступ)
	
	ВыборкаПоСчетам = Выборка.Выбрать();
	
	Пока ВыборкаПоСчетам.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоСчетам.Счет) Тогда
			// Вывод нач сальдо
			Если ВыборкаПоСчетам.ЕстьКоличественныеСчета Тогда
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчетКоличество;
			Иначе
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСчет;
			КонецЕсли;
			
			ВыводимаяОбласть.Параметры.Заполнить(ВыборкаПоСчетам);
			
			// Заполним параметры области.
			бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСчетам, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");

			Уровень = ВыборкаПоСчетам.Уровень();

			ВыводимаяОбласть.Область(1, 2).Отступ = Отступ+1; // Уровень выделяется отступом

		    			
			// Расшифровка
			ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСчетам, ОтборДляРасшифровки);
			
			СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);

			Если ПоВалютам И ВыборкаПоСчетам.ЕстьВалютныеСчета Тогда

				// Вывод нач сальдо
				ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаВалюта;
				
				ВыводимаяОбласть.Параметры.Заполнить(ВыборкаПоСчетам);
		        
		        // Заполним параметры области.
			    бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСчетам, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
				
				Уровень = ВыборкаПоСчетам.Уровень();
				ВыводимаяОбласть.Область(1, 2).Отступ = Отступ+2; // Уровень выделяется отступом

				// Расшифровка
				ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСчетам);
				
				СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
				// Вывод начального сальдо: конец
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиСчета()

// Вывод субконто: общая процедура.
// 
//  Выборка
//  СтруктураПараметров - Структура.
// 
Процедура ВывестиСубконто(Выборка, СтруктураПараметров, ГруппировкиСубконто)
	
	ВыводСубконто(Выборка, 0, СтруктураПараметров, Новый Соответствие, ГруппировкиСубконто);
	
КонецПроцедуры // ВыводСубконто()

// Процедура выводит субконто определенного номера.
// 
//  Выборка
//  Инд
//  СтруктураПараметров - Структура.
//  ОтборДляРасшифровки.
// 
Процедура ВыводСубконто(Выборка, Знач Инд, СтруктураПараметров, ОтборДляРасшифровки, ГруппировкиСубконто)
		
	Измерение = СтруктураПараметров.МассивСубконто[Инд];
	
	Если Инд = 0 Тогда
		ОтборДляРасшифровки = Новый Соответствие;
	КонецЕсли;
	
	ВыборкаПоСубконто = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Измерение);
	
	Пока ВыборкаПоСубконто.Следующий() Цикл
					
		// Вывод нач сальдо
		ВыводимаяОбласть = СтруктураПараметров.ОбластьСтрокаСубконто;
		
		ВыводимаяОбласть.Параметры.СубконтоПредставление = ВыборкаПоСубконто[Измерение];
		ВыводимаяОбласть.Параметры.Заполнить(ВыборкаПоСубконто);
		
		// Расшифровка
		ЗаполнитьПараметрыРасшифровки(ВыводимаяОбласть, ВыборкаПоСубконто, ОтборДляРасшифровки);
		
		ВыводимаяОбласть.Область(1, 2).Отступ = Инд; // Уровень выделяется отступом
		Отступ = Инд;
		
		Уровень = ВыборкаПоСубконто.Уровень();
		
		бит_БухгалтерскиеОтчетыСервер.ЗаполнитьЗначениеПараметровОбластиПоМассивуРесурсов(ВыводимаяОбласть, ВыборкаПоСубконто, СтруктураПараметров.МассивРесурсов, "ОборотДт, ОборотКт");
		
		// Проверяем возможность вывода текущей группировки субконто.
		НайденнаяСтрока = ГруппировкиСубконто.Найти(ВыборкаПоСубконто.Группировка(), "ИмяСубконто");
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			Если НайденнаяСтрока.Использовать Тогда
				СтруктураПараметров.ДокументРезультат.Вывести(ВыводимаяОбласть, Уровень);
			КонецЕсли;
			
		КонецЕсли;
		
		// Вывод начального сальдо: конец
		
		Если Инд+1 <= СтруктураПараметров.МассивСубконто.Количество()-1 Тогда
			// Вывод вложенных итогов			
			ВыводСубконто(ВыборкаПоСубконто, Инд + 1, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки), ГруппировкиСубконто);
			// Вывод вложенных итогов: конец
		Иначе
			ВывестиСчета(ВыборкаПоСубконто, СтруктураПараметров, бит_РаботаСКоллекциями.СоздатьКопиюСоответствияСтруктуры(ОтборДляРасшифровки), Отступ);
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // ВыводСубконто()

#КонецОбласти

// Устанавливаем текст запроса по умолчанию.
// 
// Параметры:
//  ЭтаФорма.
// 
Процедура УстановитьТекстЗапросаПоУмолчанию(ЭтаФорма)
	
	 // Текст запроса
	ТекстЗапроса = СформироватьТекстЗапроса(ЭтаФорма);
	ЭтаФорма.фТекстЗапроса = ТекстЗапроса;

КонецПроцедуры // УстановитьТекстЗапросаПоУмолчанию()

// Процедура добавляет отборы по умолчанию.
// 
// Параметры:
//  ЭтаФорма.
// 
Процедура ДобавитьОтборыПоУмолчанию(ЭтаФорма)

	// Счет
	СтрокаОтбора = ЭтаФорма.ТаблицаОтбор.Добавить();
		
	СтрокаОтбора.ПутьКДанным   = "Счет";
	СтрокаОтбора.Имя 		   = "Счет";
	СтрокаОтбора.Представление = "Счет";
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланСчетовСсылка.бит_Бюджетирование"));
	ОписаниеТекущегоТипа = Новый ОписаниеТипов(МассивТипов);
	ПривестиЗначенияЭлементаОтбора(СтрокаОтбора, ОписаниеТекущегоТипа);

	// Корсчет
	СтрокаОтбора = ЭтаФорма.ТаблицаОтбор.Добавить();
		
	СтрокаОтбора.ПутьКДанным   = "КорСчет";
	СтрокаОтбора.Имя 		   = "КорСчет";
	СтрокаОтбора.Представление = "КорСчет";
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланСчетовСсылка.бит_Бюджетирование"));
	ОписаниеТекущегоТипа = Новый ОписаниеТипов(МассивТипов);
	ПривестиЗначенияЭлементаОтбора(СтрокаОтбора, ОписаниеТекущегоТипа);
	
	// Сценарий
	СтрокаОтбора = ЭтаФорма.ТаблицаОтбор.Добавить();
		
	СтрокаОтбора.ПутьКДанным   = "Сценарий";
	СтрокаОтбора.Имя 		   = "Сценарий";
	СтрокаОтбора.Представление = "Сценарий";
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СценарииПланирования"));
	ОписаниеТекущегоТипа = Новый ОписаниеТипов(МассивТипов);
	ПривестиЗначенияЭлементаОтбора(СтрокаОтбора, ОписаниеТекущегоТипа);
	
	// ЦФО
	СтрокаОтбора = ЭтаФорма.ТаблицаОтбор.Добавить();
		
	СтрокаОтбора.ПутьКДанным   = "ЦФО";
	СтрокаОтбора.Имя 		   = "ЦФО";
	СтрокаОтбора.Представление = "ЦФО";
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));
	ОписаниеТекущегоТипа = Новый ОписаниеТипов(МассивТипов);
	ПривестиЗначенияЭлементаОтбора(СтрокаОтбора, ОписаниеТекущегоТипа);
		
КонецПроцедуры // ДобавитьОтборыПоУмолчанию()

// Процедура формирует текст запроса.
// 
// Параметры:
//  ЭтаФорма.
// 
Функция СформироватьТекстЗапроса(ЭтаФорма)
	
	КоличествоСубконто = ЭтаФорма.фКэшЗначений.МаксКоличествоСубконто;
	
	ТекстЗапроса = "";
	
	Схема = Новый СхемаЗапроса;
	
	Пакет = Схема.ПакетЗапросов[0];
	Оператор = Пакет.Операторы[0];
	
	// Источник
	ИсточникОбороты = Оператор.Источники.Добавить(Схема.ПакетЗапросов[0].ДоступныеТаблицы.Найти("РегистрБухгалтерии.бит_Бюджетирование.Обороты"));
	ИсточникОбороты.Источник.Псевдоним = "БухОбороты";
	
	// Поля
	МассивПолей = Новый Массив;	
	МассивПолей.Добавить("Счет");
	
	Для Инд = 1 ПО КоличествоСубконто Цикл
		МассивПолей.Добавить("Субконто" + Инд);
		МассивПолей.Добавить("КорСубконто" + Инд);
	КонецЦикла;
	
	МассивПолей.Добавить("КорСчет");
	МассивПолей.Добавить("Сценарий");
	МассивПолей.Добавить("ЦФО,");
	МассивПолей.Добавить("Валюта,");
	МассивПолей.Добавить("ВалютаКор,");
	МассивПолей.Добавить("Организация,");
	
	Если ВыводитьСуммуРегл Тогда
		МассивПолей.Добавить("СуммаРеглОборотДт");
		МассивПолей.Добавить("СуммаРеглОборотКт");
	КонецЕсли;
	
	Если ВыводитьСуммуУпр Тогда
		МассивПолей.Добавить("СуммаУпрОборотДт");
		МассивПолей.Добавить("СуммаУпрОборотКт");
	КонецЕсли;
	
	Если ВыводитьСуммуСценарий Тогда
		МассивПолей.Добавить("СуммаСценарийОборотДт");
		МассивПолей.Добавить("СуммаСценарийОборотКт");
	КонецЕсли;
	
	Если ПоКоличеству Тогда
		МассивПолей.Добавить("КоличествоОборотДт");
		МассивПолей.Добавить("КоличествоОборотКт");
		МассивПолей.Добавить("КоличествоКорОборотДт");
		МассивПолей.Добавить("КоличествоКорОборотКт")
	КонецЕсли;

	Если ПоВалютам Тогда
		МассивПолей.Добавить("ВалютнаяСуммаОборотДт");
		МассивПолей.Добавить("ВалютнаяСуммаОборотКт");
	КонецЕсли;
			
	Для каждого ДоступноеПоле Из ИсточникОбороты.Источник.ДоступныеПоля Цикл
	
		Если НЕ МассивПолей.Найти(ДоступноеПоле.Имя) = Неопределено  Тогда
		
			 Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если ПоКоличеству тогда
		ВыражениеВыбора = Новый ВыражениеСхемыЗапроса("ВЫБОР
														|	КОГДА БУХОБОРОТЫ.СЧЕТ.КОЛИЧЕСТВЕННЫЙ
														|			ИЛИ БУХОБОРОТЫ.КОРСЧЕТ.КОЛИЧЕСТВЕННЫЙ
														|		ТОГДА ИСТИНА
														|	ИНАЧЕ ЛОЖЬ
														|КОНЕЦ");
	Иначе	
		ВыражениеВыбора = Новый ВыражениеСхемыЗапроса("Ложь");
	КонецЕсли;
	
	ПолеВыбора = Оператор.ВыбираемыеПоля.Добавить(Строка(ВыражениеВыбора));
	
	// Теперь зададим псевдоним для оператора выбора.
	Для каждого Колонка Из Пакет.Колонки Цикл
		Если ВРег(Колонка.Поля[0]) = ВРег(ВыражениеВыбора) Тогда
			Колонка.Псевдоним = "ЕстьКоличественныеСчета";
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// ИсточникОбороты.Источник.Параметры[0].Выражение = Новый ВыражениеСхемыЗапроса("&ДатаНач");
	// ИсточникОбороты.Источник.Параметры[1].Выражение = Новый ВыражениеСхемыЗапроса("&ДатаКон");
	ИсточникОбороты.Источник.Параметры[4].Выражение = Новый ВыражениеСхемыЗапроса("&СписокВидовСубконто");
	// ИсточникОбороты.Источник.Параметры[5].Выражение = Новый ВыражениеСхемыЗапроса("Организация = &Организация");
    ИсточникОбороты.Источник.Параметры[7].Выражение = Новый ВыражениеСхемыЗапроса("&СписокКорВидовСубконто");
	
	// Отбор
	Оператор.Отбор.Добавить("Не Счет ЕСТЬ NULL и НЕ КорСЧет Есть NULL");
	
	// Зададим контрольные точки итоги
	// Пакет.ОбщиеИтоги = Истина;

	Для Инд = 1 По Субконто.Количество() Цикл
		Пакет.КонтрольныеТочкиИтогов.Добавить("Субконто" + Инд);
	КонецЦикла;
	
	Для Инд = 1 По КорСубконто.Количество() Цикл
		Пакет.КонтрольныеТочкиИтогов.Добавить("КорСубконто" + Инд);
	КонецЦикла;
	
	// Установим агрегатные функции для итогов
	// Для каждого КолонкаСхемы Из Пакет.Колонки Цикл
	// 	Если Найти(КолонкаСхемы.Псевдоним, "Сумма") > 0 ИЛИ КолонкаСхемы.Псевдоним = "ЕстьКоличественныеСчета"
	// 		ИЛИ Найти(КолонкаСхемы.Псевдоним, "Количество") > 0 Тогда
	// 		Пакет.ВыраженияИтогов.Добавить(КолонкаСхемы);
	// 	КонецЕсли;
	// КонецЦикла;
	// 
	// Для каждого ВыражениеИтога Из Пакет.ВыраженияИтогов Цикл
	// 	Если Найти(ВыражениеИтога.Поле.Псевдоним, "Сумма") > 0 ИЛИ Найти(КолонкаСхемы.Псевдоним, "Количество") > 0 Тогда
	// 		ВыражениеИтога.Выражение = Новый ВыражениеСхемыЗапроса("Сумма(" + ВыражениеИтога.Поле.Псевдоним + ")");
	// 	КонецЕсли;
	// 	Если ВыражениеИтога.Поле.Псевдоним = "ЕстьКоличественныеСчета" Тогда
	// 		ВыражениеИтога.Выражение = Новый ВыражениеСхемыЗапроса("Максимум(" + ВыражениеИтога.Поле.Псевдоним + ")");
	// 	КонецЕсли;
	// КонецЦикла;
	            
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();

	// КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.
	ИнициализироватьКомпоновщик(ТекстЗапроса, ЭтаФорма);
	
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапроса() 

#КонецОбласти

#Область Инициализация

ИмяРегистраБухгалтерии = "бит_Бюджетирование";

МаксКоличествоСубконто = Метаданные.ПланыСчетов[Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].ПланСчетов.Имя].МаксКоличествоСубконто;

ЕстьВалюта     = Ложь;
ЕстьКоличество = Ложь;

МассивШиринКолонок = Новый Массив;
ШиринаТаблицы      = 0;

кэшВидовСубконто = Новый Соответствие;
СохраненнаяНастройка = Справочники.бит_СохраненныеНастройки.ПустаяСсылка();

#КонецОбласти

#КонецЕсли
