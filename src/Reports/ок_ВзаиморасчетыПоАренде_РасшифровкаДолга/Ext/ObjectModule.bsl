Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Взаиморасчеты по аренде (расшифровка долга)");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.30");
	
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	
	РегистрационныеДанные.Вставить("Информация", "Взаиморасчеты по аренде (расшифровка долга)");
	
	///////////// команды /////////////////////////
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");
	
	строкаКоманды = тзКоманд.Добавить();
	строкаКоманды.Идентификатор = "1";
	строкаКоманды.Представление = "Взаиморасчеты по аренде (расшифровка долга)";
	строкаКоманды.ПоказыватьОповещение = Истина;
	строкаКоманды.Использование = "ОткрытиеФормы";
	
	РегистрационныеДанные.Вставить("Команды", тзКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - Настройки общей формы отчета (для изменения).
//       См. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().  
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
		
КонецПроцедуры

Функция ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
		
	ВидАП = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда", "ВидАП", Неопределено);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "ВидАП", ВидАП);
	
КонецФункции // ПриЗагрузкеПользовательскихНастроекНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ - ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА.

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
		   			
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПередКомпоновкойМакета();
	НастройкиКН = КомпоновщикНастроек.ПолучитьНастройки();
	
	ДополнитьДанныеРасшифровки(НастройкиКН);
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКН, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.АвтоМасштаб = Истина;
	
	ОбновитьПараметризуемыеЗаголовкиПолей(ДокументРезультат, НастройкиКН);
	
КонецПроцедуры

Процедура ДополнитьДанныеРасшифровки(НастройкиКомпоновкиДанных)
	
	Если НастройкиКомпоновкиДанных <> Неопределено
		И НастройкиКомпоновкиДанных.Структура.Количество() > 0 Тогда
		
		ПерваяГруппировка = НастройкиКомпоновкиДанных.Структура[0];
		
		Если ТипЗнч(ПерваяГруппировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			Если ПерваяГруппировка.Строки.Количество() > 0 Тогда
				
				ВтораяГруппировка = ПерваяГруппировка.Строки[0];
				Если ТипЗнч(ВтораяГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
					И ВтораяГруппировка.Имя = "Расшифровка" Тогда
					
					ПолеКомпоновкиДанных_Документ = Новый ПолеКомпоновкиДанных("Документ");
					
					Если ВтораяГруппировка.ПоляГруппировки.Элементы.Количество() = 1
						И ВтораяГруппировка.ПоляГруппировки.Элементы[0].Поле = ПолеКомпоновкиДанных_Документ Тогда
						
						ПолеГруппировкиКомпоновкиДанных = ВтораяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеГруппировкиКомпоновкиДанных.Использование = Истина;
						ПолеГруппировкиКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Контрагент");
						
						ПолеГруппировкиКомпоновкиДанных = ВтораяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеГруппировкиКомпоновкиДанных.Использование = Истина;
						ПолеГруппировкиКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Договор");
					
					КонецЕсли; 
					
				КонецЕсли;
				
			
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаКомпоновкиДанных") 
			И ПерваяГруппировка.Имя = "Расшифровка" Тогда
				
			ПолеКомпоновкиДанных_Документ = Новый ПолеКомпоновкиДанных("Документ");
			
			Если ПерваяГруппировка.ПоляГруппировки.Элементы.Количество() = 1
				И ПерваяГруппировка.ПоляГруппировки.Элементы[0].Поле = ПолеКомпоновкиДанных_Документ Тогда
				
				ПолеГруппировкиКомпоновкиДанных = ПерваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировкиКомпоновкиДанных.Использование = Истина;
				ПолеГруппировкиКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Контрагент");
				
				ПолеГруппировкиКомпоновкиДанных = ПерваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировкиКомпоновкиДанных.Использование = Истина;
				ПолеГруппировкиКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Договор");
				
				ВыбранноеПолеКомпоновкиДанных = ПерваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
				ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Контрагент");
				
				ВыбранноеПолеКомпоновкиДанных = ПерваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
				ВыбранноеПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных("Договор");

			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПередКомпоновкойМакета()
	
	СчетаУчетаРасчетов = БухгалтерскиеОтчеты.СчетаУчетаРасчетовПокупателей();
	
	ПредопределенныеСчетаАвансов = Новый Массив;
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);    // 62.02
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	ПредопределенныеСчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);  // 62.32
	СчетаАвансов = БухгалтерскийУчет.СформироватьМассивСубсчетов(ПредопределенныеСчетаАвансов);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаАвансов", 				СчетаАвансов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаСДокументомРасчетов", 	СчетаУчетаРасчетов.СчетаСДокументомРасчетов);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СчетаБезДокументаРасчетов", 	СчетаУчетаРасчетов.СчетаБезДокументаРасчетов);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидыДоговоров", БухгалтерскиеОтчеты.ВидыДоговоровПокупателей());
		
	ОсновнаяСтатьяОборотовПоАренде 	= ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда", "ОсновнаяСтатьяОборотовПоАренде", ПредопределенноеЗначение("Справочник.бит_СтатьиОборотов.ПустаяСсылка"));
	ВидАП 							= ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда", "ВидАП", 	Неопределено);
	ПериодАП 						= ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Аренда", "ПериодАП", 	Неопределено);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОсновнаяСтатьяОборотовПоАренде", 	ОсновнаяСтатьяОборотовПоАренде);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидАП", 							ВидАП);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодАП", 						ПериодАП);
	
КонецПроцедуры

Процедура ОбновитьПараметризуемыеЗаголовкиПолей(ДокументРезультат, НастройкиКН)
	
	СтруктураПараметров = Новый Структура;
	Для каждого ТекущийПараметр Из НастройкиКН.ПараметрыДанных.Элементы Цикл
		
		СтруктураПараметров.Вставить(Строка(ТекущийПараметр.Параметр), ТекущийПараметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли