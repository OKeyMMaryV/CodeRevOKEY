

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	ПроверитьЗаполнение();
	
	ПараметрОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ОрганизацияЗаказчик");
	ПараметрОрганизация.Значение = ОрганизацияЗаказчик;
	
	ПараметрОрганизацияПодрядчик = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ОрганизацияПодрядчик");
	ПараметрОрганизацияПодрядчик.Значение = ОрганизацияПодрядчик;
	
	ПараметрДатаНач = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаНач");
	ПараметрДатаНач.Значение = ДатаНачала;

	ПараметрДатаКон = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаКон");
	ПараметрДатаКон.Значение = КонецДня(ДатаОкончания);
	
	Контрагенты = ПолучитьСобственныхКонтрагентов(ОрганизацияПодрядчик);
	
	Если Контрагенты = ЛОЖЬ Тогда
		Возврат
	КонецЕсли;
		
	ПараметрКонтрагенты = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Контрагенты");
	ПараметрКонтрагенты.Значение = Контрагенты;
	
	ПараметрСчетГруппы111 = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СчетГруппы111");
	ПараметрСчетГруппы111.Значение = ПланыСчетов.бит_Дополнительный_2.ОС;
	ПараметрСчетГруппы113 = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СчетГруппы113");
	ПараметрСчетГруппы113.Значение = ПланыСчетов.бит_Дополнительный_2.ИнвестиционнаяСобственность;
	
	ПараметрВнутриГрупповыеЗатраты = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрВнутригрупповыеЗатраты");
	ПараметрВнутриГрупповыеЗатраты.Значение = ПланыВидовХарактеристик.бит_му_ВидыПараметровВНА.ВнутригрупповыеЗатраты_ОС;
	
	ПараметрСчетГруппы12 = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СчетГруппы12");
	ПараметрСчетГруппы12.Значение = ПланыСчетов.бит_Дополнительный_2.НезавершенноеСтроительство;
	
	Для Каждого мПараметр ИЗ КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Если Строка(мПараметр.Параметр) <> "НачалоПериода" И Строка(мПараметр.Параметр) <> "КонецПериода" Тогда
			мПараметр.Использование = Истина;	
		КонецЕсли;
	КонецЦикла;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
КонецПроцедуры

//БИТ Тртилек в функции получается массив собственных контрагентов
Функция ПолучитьСобственныхКонтрагентов(Организация)
	
	//Найдем встречные контрагенты
	ЗапросВстречныхКонтрагентов = Новый Запрос;
	ЗапросВстречныхКонтрагентов.Текст = "ВЫБРАТЬ
	                                    |	бит_СобственныеКонтрагенты.Контрагент
	                                    |ИЗ
	                                    |	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты
	                                    |ГДЕ
	                                    |	бит_СобственныеКонтрагенты.Объект = &Организация
	                                    |	И бит_СобственныеКонтрагенты.ВидСвязи = &ВидСвязи";
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("Организация", Организация);
	ЗапросВстречныхКонтрагентов.УстановитьПараметр("ВидСвязи", Перечисления.бит_ВидыСобственныхКонтрагентов.Организация);
	
	РезультатЗапросаВстерчныхКонтрагентов = ЗапросВстречныхКонтрагентов.Выполнить();
	
	Если Не РезультатЗапросаВстерчныхКонтрагентов.Пустой() Тогда
		СписокКонтрагентов = Новый СписокЗначений;
		СписокКонтрагентов.ЗагрузитьЗначения(РезультатЗапросаВстерчныхКонтрагентов.Выгрузить().ВыгрузитьКолонку("Контрагент"));
		Возврат СписокКонтрагентов;
	Иначе
		Сообщить("Для организации: " + Организация.Наименование + " не найдены контрагенты в регистре ""Собственные контрагенты"". Подбор не возможен", СтатусСообщения.Важное);
		Возврат ЛОЖЬ
	КонецЕсли;
	
КонецФункции


Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ (ЗначениеЗаполнено(ОрганизацияЗаказчик) И ЗначениеЗаполнено(ОрганизацияПодрядчик)) Тогда
		Отказ = Истина;
		Сообщить("Требуется заполнить организации", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

