
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит соответствие результатов формирования отчёта
&НаКлиенте
Перем мСоответствиеРезультатов;

////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
            
// бит_ASubbotina Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мСоответствиеРезультатов = Новый Соответствие;
	 	
КонецПроцедуры // ПриОткрытии()

// бит_ASubbotina Процедура - обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ("СохраненаНастройка_" + фПолноеИмяОтчета) Тогда
		
		ОбновитьПанельСохраненныхНастроек(Истина, Параметр);
				
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()


////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// бит_ASubbotina Процедура - обработчик команды "КомандаФильтроватьНастройкиПоВариантам"
//
&НаКлиенте
Процедура КомандаФильтроватьНастройкиПоВариантам(Команда)
	
	фФильтроватьНастройкиПоВарианту = Не фФильтроватьНастройкиПоВарианту;
	
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
КонецПроцедуры // КомандаФильтроватьНастройкиПоВариантам()

// бит_ASubbotina Процедура - обработчик команды "КомандаПанельНастроек"
//
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	фСкрытьПанельНастроек = Не фСкрытьПанельНастроек;
	
	Элементы.ФормаКомандаПанельНастроек.Пометка = Не фСкрытьПанельНастроек;
	Элементы.ГруппаПанельНастроек.Видимость     = Не фСкрытьПанельНастроек;	
	
КонецПроцедуры // КомандаПанельНастроек()

// бит_ASubbotina Процедура - обработчик команды "КомандаПанельСохраненныхНастроек"
//
&НаКлиенте
Процедура КомандаПанельСохраненныхНастроек(Команда)
	
	фСкрытьПанельСохранённыхНастроек = Не фСкрытьПанельСохранённыхНастроек;
	
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка   = Не фСкрытьПанельСохранённыхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохранённыхНастроек;
	
КонецПроцедуры // КомандаПанельСохраненныхНастроек()

// бит_ASubbotina Процедура - обработчик команды "КомандаПанельСохраненныхНастроек"
//
&НаКлиенте
Процедура КомандаОбновитьПанельСохраненныхНастроек(Команда)
	
	ОбновитьПанельСохраненныхНастроек(Истина);	
	
КонецПроцедуры // КомандаОбновитьПанельСохраненныхНастроек()


// бит_ASubbotina Процедура - обработчик команды "Результат_ПоказатьВОтдельномОкне"
//
&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()


////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// бит_ASubbotina Процедура - обработчик события "Нажатие" элемента формы "ДекорацияНастройки<№>".
//
&НаКлиенте
Процедура ДекорацияСохраненнойНастройкиНажатие(Элемент)
	
	// Сохраним результат
	Если ЗначениеЗаполнено(фИмяЭлемента_ВыбраннаяНастройка) 
		И фСтруктураСохраненныхНастроек.Свойство(фИмяЭлемента_ВыбраннаяНастройка) Тогда
		СтруктураСохр = Новый Структура("Результат, ДанныеРасшифровки", Результат, ДанныеРасшифровки);
		КлючНастройки = фСтруктураСохраненныхНастроек[фИмяЭлемента_ВыбраннаяНастройка].КлючНастройки;
		мСоответствиеРезультатов.Вставить(КлючНастройки, СтруктураСохр);
	КонецЕсли;
	
	// Обновление пользовательских настроек
	ИмяЭлемента = Элемент.Имя;
	НастройкиОбновлены = ОбновитьНастройки(ИмяЭлемента, мСоответствиеРезультатов);
	Если Не НастройкиОбновлены Тогда
		ТекстСообщения = Нстр("ru = 'Настройка не найдена. Обновите панель сохраненных настроек.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 	
	КонецЕсли;
	
	бит_ОтчетыКлиент.ОбработатьНажатиеНаПолеСохраненнойНастройки(Элементы, 
																Элемент, 
																фИмяЭлемента_ВыбраннаяНастройка);
																	     			
КонецПроцедуры // ДекорацияСохраненнойНастройкиНажатие()


////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// бит_ASubbotina Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_ПроверочныйОтчетНРПВНА_Шаг8;
	
	// Вызов механизма защиты
	фПолноеИмяОтчета = МетаданныеОбъекта.ПолноеИмя();
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Отчеты.бит_ПроверочныйОтчетНРПВНА_Шаг8.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"), Истина);
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма, фПолноеИмяОтчета, фОтказ);
	
	фЗагружатьНастройки   = Истина;
	
	УправлениеВидимостьюДоступностью();
	
	ОбновитьПанельСохраненныхНастроек();
	ЗаполнитьДополнительныеСписки();
		
КонецПроцедуры // ПриСозданииНаСервере()

// бит_ASubbotina Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	фСкрытьПанельНастроек 			 = Настройки.Получить("фСкрытьПанельНастроек");
	фСкрытьПанельСохранённыхНастроек = Настройки.Получить("фСкрытьПанельСохранённыхНастроек");
	фФильтроватьНастройкиПоВарианту  = Настройки.Получить("фФильтроватьНастройкиПоВарианту");
	
	// Видимость панели настроек
	Элементы.ФормаКомандаПанельНастроек.Пометка = Не фСкрытьПанельНастроек;	
	Элементы.ГруппаПанельНастроек.Видимость     = Не фСкрытьПанельНастроек;
	
	// Видимость панели сохранённых настроек
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка 	 = Не фСкрытьПанельСохранённыхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохранённыхНастроек;
	
	// Фильтр сохранённых настроек по варианту
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// бит_ASubbotina Процедура - обработчик события "ПриСохраненииВариантаНаСервере" формы.
//
&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	Если фКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		УстановитьТекущийВариант(КлючТекущегоВарианта); 		
	КонецЕсли;
	
КонецПроцедуры // ПриСохраненииВариантаНаСервере()

// бит_ASubbotina Процедура - обработчик события "ПриЗагрузкеВариантаНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	фКлючТекущегоВарианта = КлючТекущегоВарианта;
		
	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
		
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту, Истина);
	
	Если фЗагружатьНастройки Тогда
		
		// Установка настройки, используемой при открытии, если такая указана в справочнике
		КлючНастройкиПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(КлючОбъекта, Истина);
		
		Если ЗначениеЗаполнено(КлючНастройкиПоУмолчанию) Тогда
			УстановитьТекущиеПользовательскиеНастройки(КлючНастройкиПоУмолчанию);
		Иначе
			УстановитьСтандартныеНастройкиСервер();
			фИмяЭлемента_ВыбраннаяНастройка = "";
		КонецЕсли;
		
		Результат.Очистить();
	
	КонецЕсли;
		
КонецПроцедуры // ПриЗагрузкеВариантаНаСервере()
 
// бит_ASubbotina Процедура - обработчик события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Настройки = Неопределено ИЛИ Не фЗагружатьНастройки Тогда 
		Возврат;
	КонецЕсли;
	
	Если Настройки.ДополнительныеСвойства.Свойство("КлючНастройки") Тогда
		ТекКлючНастройки = Настройки.ДополнительныеСвойства.КлючНастройки;
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);
	КонецЕсли;
			
КонецПроцедуры // ПриЗагрузкеПользовательскихНастроекНаСервере()


////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// бит_ASubbotina Процедура управляет видимостью и доступностью элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	// Установка видимости и доступности элементов формы в зависимости от типа отчёта 
	// - обычный или расшифровка 
	бит_ОтчетыСервер.УстановитьВидимостьДоступностьЭлементов(Элементы, 
															Параметры.КлючВарианта, 
															Параметры.ПредставлениеВарианта);
		          	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// бит_ASubbotina Процедура включает/отключает фильтр настроек по варианту
//
// Параметры:
//  Фильтровать  - Булево
//
&НаСервере
Процедура ИзменитьФильтрНастроек(Фильтровать)

	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту);	

КонецПроцедуры // ИзменитьФильтрНастроек()

// бит_ASubbotina Функция обновляет настройки отчета
//
// Параметры:
//  ИмяЭлемента  		 	- Строка
//  СоответствиеРезультатов - Соответствие
//
// ВозращаемоеЗначение:
//  Булево - настройки обновлены
//
&НаСервере
Функция ОбновитьНастройки(ИмяЭлемента, СоответствиеРезультатов)

	НастройкиОбновлены = Ложь;
	
	Результат.Очистить();
	
	СтруктураНастроек = фСтруктураСохраненныхНастроек[ИмяЭлемента];
	
	Настройки = бит_ОтчетыСервер.ПолучитьНастройкиОтчета(СтруктураНастроек);
	
	Если Настройки <> Неопределено Тогда
			
		КлючНастройки = СтруктураНастроек.КлючНастройки;    	
		КлючОбъекта = СтрЗаменить(СтруктураНастроек.КлючОбъекта, фПолноеИмяОтчета + "/", "");
		
		Если КлючОбъекта <> КлючТекущегоВарианта Тогда
			фЗагружатьНастройки = Ложь;	
			УстановитьТекущийВариант(КлючОбъекта);
			фЗагружатьНастройки = Истина;
		КонецЕсли;
		
		УстановитьТекущиеПользовательскиеНастройки(КлючНастройки);
		НастройкиОбновлены = Истина;
		
	КонецЕсли;
	
	// Выведем результат, если он уже формировался для текущей настройки
	Если НастройкиОбновлены Тогда		
		СтруктураРез = СоответствиеРезультатов.Получить(КлючНастройки);
		Если СтруктураРез <> Неопределено Тогда
			Результат.Вывести(СтруктураРез.Результат);
			ДанныеРасшифровки = СтруктураРез.ДанныеРасшифровки;
		КонецЕсли; 		
	КонецЕсли;
	       	
	Возврат НастройкиОбновлены;

КонецФункции // ОбновитьНастройки()

// бит_ASubbotina Процедура обновляет панель сохраненных настроек
//
// Параметры:
//  Очищать  - Булево (Необязательный, по умолчанию = Ложь)
//  ТекКлючНастройки  (Необязательный)
//
&НаСервере
Процедура ОбновитьПанельСохраненныхНастроек(Очищать = Ложь, ТекКлючНастройки = Неопределено)

	ГруппаПанели = Элементы.ГруппаПанельВыбораСохраненныхНастроек;
	
	СтруктураДоступности = бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(фПолноеИмяОтчета, Истина);
	фСписокНеДоступныхВариантов = СтруктураДоступности.СписокНеДоступныхВариантов;
	фСписокНеДоступныхНастроек  = СтруктураДоступности.СписокНеДоступныхНастроек;
	лИспользуемыйПриОткрытииВариант = СтруктураДоступности.ИспользуемыйПриОткрытииВариант;
	
	Если Очищать Тогда 	
		
		бит_РаботаСДиалогамиСервер.УдалитьЭлементыГруппыФормы(Элементы, ГруппаПанели); 			
		
	Иначе
		
		Если лИспользуемыйПриОткрытииВариант = Неопределено Тогда
			КлючТекущегоВарианта = "";
			Возврат;
		Иначе
			КлючТекущегоВарианта = лИспользуемыйПриОткрытииВариант;		
		КонецЕсли;
	
	КонецЕсли; 	
	
	КлючОбъекта = фПолноеИмяОтчета + "/" + КлючТекущегоВарианта;
				
	бит_ОтчетыСервер.ОбновитьПанельСохраненныхНастроек(Элементы, 
													ГруппаПанели, 
													КлючОбъекта, 
													фСтруктураСохраненныхНастроек,
													СтруктураДоступности,
													фФильтроватьНастройкиПоВарианту,
													фИмяЭлемента_ВыбраннаяНастройка);
	
	Если ТекКлючНастройки <> Неопределено Тогда
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);	
	Иначе
		фИмяЭлемента_ВыбраннаяНастройка = "";														
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПанельСохраненныхНастроек()

// бит_ASubbotina Процедура устанавливает стандартные настройки варианта 
// и обновляет по ним элементы формы.
// Заменяет типовую команду "СтандартныеНастройки".
//
&НаСервере
Процедура УстановитьСтандартныеНастройкиСервер()
	
	бит_ОтчетыСервер.УстановитьСтандартныеНастройкиСервер(Отчет, Истина, фСписокПараметровНаФорме);
		
	бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
														фСтруктураСохраненныхНастроек, 
														фИмяЭлемента_ВыбраннаяНастройка,
														фФильтроватьНастройкиПоВарианту);
															
КонецПроцедуры // УстановитьСтандартныеНастройкиСервер()

// бит_DFedotov Процедура заполняет дополнительные списки
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ЗаполнитьДополнительныеСписки()

	// Список имён параметров СКД, заполняемых пользователем через элементы формы
	фСписокПараметровНаФорме.Добавить("ОрганизацияЗаказчик");
	фСписокПараметровНаФорме.Добавить("ОрганизацияПодрядчик");
	фСписокПараметровНаФорме.Добавить("ДатаНачала");
	фСписокПараметровНаФорме.Добавить("ДатаОкончания");
	// Список дополнительных свойств
	//фСписокДополнительныхСвойств.Добавить("Комментарий");
	// Пример в отчёте бит_ПланФактныйАнализУниверсальный
	
КонецПроцедуры // ЗаполнитьДополнительныеСписки()

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Перем ВыполненноеДействие;
	СтандартнаяОбработка=Ложь;
	
	ОбработкаРасшифровки=Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	ДополнительныеДействия=Новый СписокЗначений;
	
	//МассивПолейРасшифровкиПроверка = Новый Массив;
	//
	//Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	//	И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ТекущийОтчет = мДанныеРасшифровки;
	//	
	//// Добавим поля родительских группировок
	//ДобавитьРодителей(мДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровкиПроверка,ЛОЖЬ);
	//
	//МассивПолейДляПроверки = Новый Массив;
	//МассивПолейДляПроверки.Добавить("Объект");
	//МассивПолейДляПроверки.Добавить("СчетУчетаАктива");
	//МассивПолейДляПроверки.Добавить("ДокументПоступления");
	//
	//Для Каждого ПолеРасшифровкиПроверка Из МассивПолейРасшифровкиПроверка Цикл
	//	Если МассивПолейДляПроверки.Найти(ПолеРасшифровкиПроверка.Поле) = Неопределено Тогда
	//		Возврат;	
	//	КонецЕсли;
	//КонецЦикла;
	
	ДополнитьДополнительныеДествияНаСервере(ДополнительныеДействия, Расшифровка);
	
	СтандартныеДействия = Новый Массив;
	СтандартныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДополнительныеПараметры = Новый Структура("Расшифровка, ДанныеРасшифровки", Расшифровка, ДанныеРасшифровки);
	ОписаниеОповещения = Новый ОписаниеОповещения("РезультатОбработкаРасшифровкиПослеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, СтандартныеДействия, ДополнительныеДействия);
	
КонецПроцедуры

&НаСервере
Функция ДополнитьДополнительныеДествияНаСервере(ДополнительныеДействия, Расшифровка)
	
	мДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Если мДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле = "СуммаНРПВНА"
		ИЛИ мДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле = "СуммаНРПВНА_11"
		ИЛИ мДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле = "Дельта" Тогда                                                                               
		ДополнительныеДействия.Добавить("ОткрытьНРПВНА", "НРП ВНА");  // добавляем свое действие
	КонецЕсли;
	
	Если мДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле = "СуммаДоп2" 
		ИЛИ мДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле = "СуммаДоп2_11"
		ИЛИ мДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Поле = "Дельта" Тогда	
		ДополнительныеДействия.Добавить("ОткрытьМСФО", "Международный");  // добавляем свое действие
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровкиПослеВыбора(Результат, Значение, ДополнительныеПараметры) Экспорт
	
	Если Значение <> Неопределено Тогда
		ОткрытьЗначение(Значение);
	Иначе
		Если Результат = "ОткрытьНРПВНА" Тогда
			ВыполнитьДействие1(ДополнительныеПараметры.Расшифровка, ДополнительныеПараметры.ДанныеРасшифровки);       // процедура выполняемая при выборе пункта меню "Дополнительное действие 1"
		ИначеЕсли Результат = "ОткрытьМСФО" Тогда
			ВыполнитьДействие2(ДополнительныеПараметры.Расшифровка, ДополнительныеПараметры.ДанныеРасшифровки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив, по которому следует расшифровать отчет
&НаСервере
Функция ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	МассивПолейРасшифровки = Новый СписокЗначений;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
		И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	мДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчетСервер = мДанныеРасшифровки;
	Иначе
		ТекущийОтчетСервер = ТекущийОтчет;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(мДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчетСервер, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Представление = МассивПолейРасшифровки[ИндексВнутри].Представление Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

&НаСервере
Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)  Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если ДоступноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ВключатьРесурсы И ДоступноеПоле.Ресурс Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле.Значение, Поле.Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции


// Возвращает доступное поле по полю компоновки
&НаСервере
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска)
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействие1(Расшифровка, ДанныеРасшифровки)
	
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки);
	
	ФормаРегистра = ПолучитьФорму("РегистрСведений.бит_му_НРП_ВНА.ФормаСписка");
	
	СчетУчетаАктива  = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка");
	Объект           = ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка");
	ОсновноеСредство = ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка");
	ДокументПоступления = Неопределено;
	
	Для Каждого ЭлементМассива ИЗ МассивПолейРасшифровки Цикл
		Если ЭлементМассива.Представление = "СчетУчетаАктива" Тогда
			СчетУчетаАктива = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Представление = "Объект" Тогда
			Объект = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Представление = "ОС" Тогда
			ОсновноеСредство = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Представление = "ДокументПоступления" Тогда
			ДокументПоступления = ЭлементМассива.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СчетУчетаАктива) Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "СчетУчетаАктива", СчетУчетаАктива, Истина, ВидСравненияКомпоновкиДанных.Равно);
		Если ЗначениеЗаполнено(Объект) Тогда
			КлассСчета = "Счет учета актива";
			НазваниеДляСубконто = СтрЗаменить(СтрЗаменить(КлассСчета, "Счет ", ""), " ", "");
			Если ЗначениеЗаполнено(Объект) Тогда
				УстановитьОтборПоОбъекту(ФормаРегистра, НазваниеДляСубконто, СчетУчетаАктива, Объект);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "Субконто1СчетаУчетаАктива", ОсновноеСредство, Истина, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		Если ПринадлежитЭлементу(СчетУчетаАктива, ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.НезавершенноеСтроительство")) Тогда
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "ПриходРасход", ПредопределенноеЗначение("Перечисление.бит_ВидДвиженияНакопления.Приход"), Истина, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "ДокументПоступления", ДокументПоступления, Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "Период", Отчет.ДатаНачала, Истина, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФормаРегистра.Список.КомпоновщикНастроек.Настройки.Отбор, "Период", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
								КонецДня(Отчет.ДатаОкончания), "Период", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	ФормаРегистра.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПринадлежитЭлементу(Элемент, ПроверяемоеЗначение)
	
	Возврат Элемент.ПринадлежитЭлементу(ПроверяемоеЗначение);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействие2(Расшифровка, ДанныеРасшифровки)
	
	МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки);
	
	СчетУчетаАктива  = ПредопределенноеЗначение("ПланСчетов.бит_Дополнительный_2.ПустаяСсылка");
	Объект           = ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка");
	ОсновноеСредство = ПредопределенноеЗначение("Справочник.ОсновныеСредства.ПустаяСсылка");
	ДокументПоступления = Неопределено;
	
	Для Каждого ЭлементМассива ИЗ МассивПолейРасшифровки Цикл
		Если ЭлементМассива.Представление = "СчетУчетаАктива" Тогда
			СчетУчетаАктива = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Представление = "Объект" Тогда
			Объект = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Представление = "ОС" Тогда
			ОсновноеСредство = ЭлементМассива.Значение;
		КонецЕсли;
		Если ЭлементМассива.Представление = "ДокументПоступления" Тогда
			ДокументПоступления = ЭлементМассива.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ФормаРегистра = ПолучитьФорму("РегистрБухгалтерии.бит_Дополнительный_2.ФормаСписка");
	Если ЗначениеЗаполнено(СчетУчетаАктива) Тогда
		ФормаРегистра.ОтборСчет = СчетУчетаАктива;
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "Счет", СчетУчетаАктива, Истина, ВидСравненияКомпоновкиДанных.Равно);
		Если ЗначениеЗаполнено(Объект) Тогда
			Если ЗначениеЗаполнено(Объект) Тогда
				УстановитьОтборМСФОПоОбъекту(ФормаРегистра, СчетУчетаАктива, Объект);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
			УстановитьОтборМСФОПоОбъекту(ФормаРегистра, СчетУчетаАктива, ОсновноеСредство);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		ФормаРегистра.ОтборРегистратор = ДокументПоступления;
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "Регистратор", ДокументПоступления, Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "Период", Отчет.ДатаНачала, Истина, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ФормаРегистра.Список.КомпоновщикНастроек.Настройки.Отбор, "Период", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
								КонецДня(Отчет.ДатаОкончания), "Период", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	ФормаРегистра.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьОтборПоОбъекту(ФормаРегистра, НазваниеДляСубконто, Счет, Объект)
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат
	КонецЕсли;
		
	НомерСтрокиОбъекта = ПолучитьНомерСтрокиОбъекта(Счет);
	Если НомерСтрокиОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "Субконто" + НомерСтрокиОбъекта + "Счета" + НазваниеДляСубконто, Объект, Истина, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерСтрокиОбъекта(Счет)
	
	ВидыСубконто = Счет.ВидыСубконто;
	СубконтоОбъект = ВидыСубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект);
	
	Возврат ?(СубконтоОбъект = Неопределено, Неопределено, СубконтоОбъект.НомерСтроки);
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборМСФОПоОбъекту(ФормаРегистра, Счет, ОбъектОС)
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат
	КонецЕсли;
	
	НомерСтрокиОбъекта = ПолучитьНомерСтрокиОбъектаОС(Счет, ОбъектОС);
	Если НомерСтрокиОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(ФормаРегистра.Список, "Субконто" + НомерСтрокиОбъекта, ОбъектОС, Истина, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерСтрокиОбъектаОС(Счет, ОбъектОС)
	
	ВидыСубконто = Счет.ВидыСубконто;
	Если ТипЗнч(ОбъектОС) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		Субконто = ВидыСубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.Объект);
	ИначеЕсли ТипЗнч(ОбъектОС) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
		Субконто = ВидыСубконто.Найти(ПланыВидовХарактеристик.бит_ВидыСубконтоДополнительные_2.ОсновныеСредства);
	КонецЕсли;
	
	Возврат ?(Субконто = Неопределено, Неопределено, Субконто.НомерСтроки);
	
КонецФункции