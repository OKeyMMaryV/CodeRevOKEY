	
#Область ОписаниеПеременных

&НаКлиенте
Перем мТекущийВидСравнения; // Служит для передачи вида сравнения между обработчиками.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Стандартные действия при создании на сервере.
	бит_РаботаСДиалогамиСервер.ФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтаФорма, Отчет);
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_осв_ИнтерактивнаяОборотноСальдоваяВедомость;
	
	// Вызов механизма защиты.
	
	
	Если фОтказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.РФ_РегистрБухгалтерии) Тогда
		РФ_РегистрБухгалтерии = Параметры.РФ_РегистрБухгалтерии;	
	КонецЕсли;
	
	// Закомментировано для НУНВ
	// 1. Заполним список регистров бухгалтерии
	// СписокВыбораРегистров = Элементы.РегистрБухгалтерии.СписокВыбора;
	// ЗаполнитьСписокРегистровБухгалтерииНаСервере(СписокВыбораРегистров);
	// 
	// Если не ЗначениеЗаполнено(Отчет.РегистрБухгалтерии) И СписокВыбораРегистров.Количество() > 0 Тогда
	// 	Отчет.РегистрБухгалтерии = СписокВыбораРегистров.Получить(0).Значение;
	// КонецЕсли;
	
	// 2. После того как выбран РБ, необходимо заполнить данные формы его параметрами
	// ЗаполнитьПараметрыРегистраБухгалтерииНаСервере(Отчет.РегистрБухгалтерии);
	
	// НУНВ...
	ЗаполнитьПараметрыРегистраБухгалтерииНаСервере(Отчет.РегистрБухгалтерии.ИмяОбъекта);
	// Получим доступные виды объектов и объекты системы.
	СписокДоступныхРегистров.Добавить(Перечисления.бит_ВидыОбъектовСистемы.РегистрБухгалтерии);
	// ...НУВН
	
	// Параметры.СформироватьПриОткрытии = Истина;
	
	ЗаполнитьКэшЗначений();
	УстановитьЗначенияПоУмолчанию();
	
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроекПоУмолчаниюТакси(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
														
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.УстановитьВидимостьПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
														, Элементы.ГруппаПанельНастроек
														, фСкрытьПанельНастроек
														, фТаксиОткрытьПанельНастроек);
		
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()
													
&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	РегистрИзНастроек = Настройки.Получить("Отчет.РегистрБухгалтерии");
	
	// Изменение кода. Начало. 09.02.2016{{
	Если НЕ бит_рлс_Основной.СсылкаДоступна(РегистрИзНастроек) Тогда
	
		 РегистрИзНастроек = Неопределено;
		 Отчет.РегистрБухгалтерии = Неопределено;
	
	КонецЕсли; 
	// Изменение кода. Конец. 09.02.2016}}
	
	// Если РегистрИзНастроек <> Неопределено Тогда.
	Если РегистрИзНастроек <> Неопределено и ТипЗнч(РегистрИзНастроек) = Тип("СправочникСсылка.бит_ОбъектыСистемы") И ЗначениеЗаполнено(РегистрИзНастроек) Тогда
		// ВидимостьОрганизацииНаСервере(РегистрИзНастроек);
		// НУНВ...
		ВидимостьОрганизацииНаСервере(РегистрИзНастроек.ИмяОбъекта);
		// ...НУНВ
	КонецЕсли;
	
КонецПроцедуры													
												 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Добавление кода. Начало. 26.01.2011{{
	Если ЗначениеЗаполнено(РФ_РегистрБухгалтерии) Тогда
		Отчет.РегистрБухгалтерии = РФ_РегистрБухгалтерии;
		ЗаполнитьПараметрыРегистраБухгалтерииНаСервере(Отчет.РегистрБухгалтерии);
	КонецЕсли;
	// Добавление кода. Конец. 26.01.2011}}
	
	ВидимостьИнформацииВалютнаяСумма();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик "При изменении" значения элемента "Регистр бухгалтерии".
// 
&НаКлиенте
Процедура РегистрБухгалтерииПриИзменении(Элемент)
	
	// ЗаполнитьПараметрыРегистраБухгалтерииНаСервере(Отчет.РегистрБухгалтерии);
	// НУНВ...
	ЗаполнитьПараметрыРегистраБухгалтерииНаСервере(Отчет.РегистрБухгалтерии);
	// ...НУНВ
	ИзмененыНастройкиОтчета();
	
КонецПроцедуры

// Обработчик "При изменении" пометки списка показателей.
// 
&НаКлиенте
Процедура ПоказателиПометкаПриИзменении(Элемент)
	
	ИДСписка 		= Элементы.Показатели.ТекущаяСтрока;
	ТекущийСписка 	= Показатели.НайтиПоИдентификатору(ИДСписка);
	
	Если ТекущийСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОтмеченные = Ложь;
	                 
	Для Каждого СтрокаСписка Из Показатели Цикл
		ЕстьОтмеченные = СтрокаСписка.Пометка;
		Если ЕстьОтмеченные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если не ТекущийСписка.Пометка и не ЕстьОтмеченные Тогда
		ТекущийСписка.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "При изменении" организации.
// 
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ИзмененыНастройкиОтчета();
КонецПроцедуры

// Обработчик "При изменении" периода.
// 
&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	ИзмененыНастройкиОтчета();
КонецПроцедуры

// Обработчик "При изменении" периода.
// 
&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	ИзмененыНастройкиОтчета();
КонецПроцедуры

// Обработчик "При изменении" настроек отбора по измерениям.
// 
&НаКлиенте
Процедура ОтборПоИзмерениямПриИзменении(Элемент)
	
	ИзмененыНастройкиОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИзмерениямЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборПоИзмерениям.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		ТекущиеДанные.Использование = Истина;	
	КонецЕсли;
	
КонецПроцедуры // ОтборПоИзмерениямЗначениеПриИзменении()

&НаКлиенте
Процедура ПоказателиПриИзменении(Элемент)
	
	ВидимостьИнформацииВалютнаяСумма();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДокументРезультатПриАктивизацииОбласти(Элемент)
	
	СуммаОтчета = бит_ОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ДокументРезультат);
	
КонецПроцедуры // ДокументРезультатПриАктивизацииОбласти()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "КомандаПанельНастроек".
// 
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	ОбработкаКомандыПанелиНастроекСервер();	
	
КонецПроцедуры // КомандаПанельНастроек()

// Обработчик команды "Сформировать отчет".
// 
&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СтрРегистрация = Новый Структура;
    бит_ук_СлужебныйВызовСервера.РегистрацияНачалоСобытия(Ложь, СтрРегистрация, ЭтотОбъект.ИмяФормы);

	Если не ЗначениеЗаполнено(Отчет.РегистрБухгалтерии) Тогда
		Возврат;
	КонецЕсли;
	
	ОграничениеПоДатамКорректно = ПроверитьКорректностьОграниченийПоДатам(Отчет.СтандартныйПериод.ДатаНачала, Отчет.СтандартныйПериод.ДатаОкончания);
	
	Если НЕ ОграничениеПоДатамКорректно Тогда
        Возврат;
	КонецЕсли;
	
	ИзмененыНастройкиОтчета(Ложь);
	
	СформироватьОтчетНаСервере(СтрРегистрация);
	
	ОтчетСформирован = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииРаботыСоСпискомРазворотов

// Заполняет список предопределенными (служебными) разворотами.
// 
&НаСервереБезКонтекста
Процедура ЗаполнитьПредопределенныеРазвороты(СписокРазворотов, МножественныйРазворот = Ложь, СтрокаОСВ = Неопределено)
	
	Если МножественныйРазворот Тогда
		Возврат;
	КонецЕсли;
	
	СписокРазворотов.Добавить("ОткрытьЭлемент", "Открыть",, БиблиотекаКартинок.Лупа);
	
	Если СтрокаОСВ <> Неопределено Тогда
		
		Если ТипЗнч(СтрокаОСВ.Расшифровка) = Тип("ТаблицаЗначений") Тогда
			
			// Добавим возможность уничтожить группировку.
			СписокРазворотов.Добавить("СвернутьГруппировку"	, "Свернуть"	,, БиблиотекаКартинок.Очистить);
			СписокРазворотов.Добавить("Сортировка"			, "Сортировка"	,, БиблиотекаКартинок.СортироватьСписок);
						
		КонецЕсли;
		
		Если СтрокаОСВ.ИмяМакета = "Счет" Тогда
			
			СписокРазворотов.Добавить("ПоСубсчетам"	, "По субсчетам...");
			СписокРазворотов.Добавить("РазвернутоеСальдо", ?(не СтрокаОСВ.РазвернутоеСальдо, "Показать ", "Скрыть ") + "развернутое сальдо");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует список всех возможных разворотов актуальные для данного контекста расшифровки.
// 
&НаСервере
Функция ПолучитьСписокВозможныхРазворотов(ИмяРегистраБухгалтерии_, Знач Расшифровка, МножественныйРазворот = Ложь)
	
	// НУНВ
	ИмяРегистраБухгалтерии = ИмяРегистраБухгалтерии_.ИмяОбъекта;
	// ИмяРегистраБухгалтерии = ИмяРегистраБухгалтерии_;
	
	// Получим строку таблицы ОСВ
	ТаблицаОСВ 	= ПолучитьИзВременногоХранилища(мАдресГлобальногоПредставления);
	СтрокаОСВ	= ПолучитьСтрокуПоИндексу(ТаблицаОСВ, Расшифровка.ИндексСтроки);
	
	Если МножественныйРазворот Тогда
		
		Если ТипЗнч(СтрокаОСВ.Расшифровка) <> Тип("ТаблицаЗначений") или СтрокаОСВ.Расшифровка.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЧистаяРасшифровка = СтрокаОСВ.Расшифровка.Получить(0);
		
	Иначе
		
		ЧистаяРасшифровка = СтрокаОСВ;
		
	КонецЕсли;
	
	ОснованияРазворотовПоРеквизитам.Очистить();
	
	СписокРазворотов 	= Новый СписокЗначений;
	РегистрБухгалтерии 	= ИмяРегистраБухгалтерии;
	
	// Получим счет из отбора
	Отбор 	= ЧистаяРасшифровка.Отбор;
	Счет 	= Отбор.Счет;
	
	ИмяМакета 		= ЧистаяРасшифровка.ИмяМакета;
	ИсключитьПериод = ЕстьПериод(Отбор);
	
	ИмяМакета = СтрЗаменить(ИмяМакета, ".", "");
	
	// На предмет периода
	Если ЕстьПериодВИмени(ИмяМакета) Тогда
		ИмяМакета = "Период";
	КонецЕсли;

	Если ИмяМакета = "СубСчет" Тогда
		ИмяМакета = "Счет";
	КонецЕсли;
						
	// Получим значение текущего разворота
	ЗначениеРазворота = ЧистаяРасшифровка[ИмяМакета];
	
	// Заполним предопределенные обязательные развороты.
	ЗаполнитьПредопределенныеРазвороты(СписокРазворотов, МножественныйРазворот, СтрокаОСВ);
	
	Если не МножественныйРазворот и ТипЗнч(СтрокаОСВ.Расшифровка) = Тип("ТаблицаЗначений") Тогда
		// Добавим разворот "Множественный разворот".
		Если ВозможнаИерархия(СтрокаОСВ) Тогда
			СписокРазворотов.Добавить("ИерархияЭлементов", "Иерархия элементов...");
		КонецЕсли;
		
		СписокРазворотов.Добавить("МножественныйРазворот"	, "Множественный разворот...");
	КонецЕсли;
	
	Если не ИмяМакета = "ПоПроводкам" Тогда
		
		// Добавим необходимые развороты
		ДобавитьРазворотыПоСубконтоСчета(СписокРазворотов, Счет,, БиблиотекаКартинок.НоваяГруппировкаКомпоновкиДанных);
		// Добавим развороты по аналитическим разрезам.
		ДобавитьРазворотыПоИзмерениямРегистраБухгалтерии(СписокРазворотов, РегистрБухгалтерии, БиблиотекаКартинок.ПланВидовРасчетаОбъект);
		// Добавим разворот по корсчету
		СписокРазворотов.Добавить("КорСчет", "Кор. счет");
		
		Если ИмяМакета <> "Счет" Тогда
			// Добавим разворот по субсчетам
			СписокРазворотов.Добавить("СубСчет", "По субсчетам");
		КонецЕсли;
		
		// Добавим развороты по корреспондирующим аналитическим разрезам.
		ДобавитьРазворотыПоИзмерениямРегистраБухгалтерии(СписокРазворотов, РегистрБухгалтерии, БиблиотекаКартинок.ПланВидовРасчетаОбъект, Истина);
		
		// Добавим необходимые развороты по кор. субконто.
		ДобавитьРазворотыПоКорСубконто(СписокРазворотов, Отбор);
		Если не ИсключитьПериод Тогда
			// По периодам
			ДобавитьРазворотыПоПериодам(СписокРазворотов, БиблиотекаКартинок.УстановитьВремя);
		КонецЕсли;	
		
		Если не ИмяМакета = "Регистратор" Тогда
			// Добавим разворот документам
			СписокРазворотов.Добавить("Регистратор", "По документам",, БиблиотекаКартинок.ДокументОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяМакета = "Регистратор" Тогда // Для регистратора возможна расшифровка по проводкам
		// Добавим разворот по проводкам
		СписокРазворотов.Добавить("ПоПроводкам", "По проводкам",, БиблиотекаКартинок.ДебетКредит);
	КонецЕсли;
	
	// Необходимо исключить расшифровку, которая уже присутствует в отборе.
	ИсключитьВхождениеРасшифровок(СписокРазворотов, Отбор);
	
	// По реквизитам...
	Если ЭтоСсылочноеЗначение(ЗначениеРазворота) Тогда
		СписокРазворотов.Добавить("ПоРеквизитам", "По реквизитам...");
	КонецЕсли;
	
	Возврат СписокРазворотов;
	
КонецФункции

// В зависимости от текущего отбора расшифровки, исключает из списка неактуальные развороты.
// 
&НаСервере
Процедура ИсключитьВхождениеРасшифровок(СписокРазворотов, Отбор)
	
	ОснованиеРазворотов = ДанныеФормыВЗначение(ОснованияРазворотовПоРеквизитам, Тип("ТаблицаЗначений"));
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		// Проверим вхождение отбора в список расшифровок.
		ЭлементСписка = СписокРазворотов.НайтиПоЗначению(ЭлементОтбора.Ключ);
		
		Если ЭлементСписка <> Неопределено и ЭлементОтбора.Ключ <> "Счет" Тогда
			// Удалим разворот
			СписокРазворотов.Удалить(ЭлементСписка);
		КонецЕсли;	
		
		ЭлементОснования = ОснованиеРазворотов.Найти(ЭлементОтбора.Ключ, "Измерение");
		
		Если ЭлементОснования <> Неопределено Тогда
			// Удалим разворот
			 ОснованиеРазворотов.Удалить(ЭлементОснования);
		КонецЕсли;
		
	КонецЦикла;     
		
КонецПроцедуры

// Добавляет в список разворотов развороты по измерениям регистра бухгалтерии.
// 
&НаСервере
Процедура ДобавитьРазворотыПоИзмерениямРегистраБухгалтерии(СписокРазворотов, РегистрБухгалтерии, Картинка = Неопределено, ДобавитьКор = Ложь)
	
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии];
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
	    БалансовоеИзмерение = Измерение.Балансовый;
				
		Если НЕ БалансовоеИзмерение И ДобавитьКор Тогда
			СписокРазворотов.Добавить(Измерение.Имя + "Кор", Измерение.Синоним + " (кор.)",, ПолучитьКартинку(Картинка));
		ИначеЕсли НЕ ДобавитьКор Тогда
			СписокРазворотов.Добавить(Измерение.Имя, Измерение.Синоним,, ПолучитьКартинку(Картинка));
		КонецЕсли;
		Значение = Измерение.Тип.ПривестиЗначение();
		
		Если ЭтоСсылочноеЗначение(Значение) Тогда
			Если НЕ БалансовоеИзмерение И ДобавитьКор Тогда
				НовыйЭлементОснованияРазворотов(Измерение.Имя + "Кор", Измерение.Тип.ПривестиЗначение());
			ИначеЕсли НЕ ДобавитьКор Тогда
				НовыйЭлементОснованияРазворотов(Измерение.Имя, Измерение.Тип.ПривестиЗначение());
			КонецЕсли;
		Иначе
			Если НЕ БалансовоеИзмерение И ДобавитьКор Тогда
				НовыйЭлементОснованияРазворотов(Измерение.Имя + "Кор", Неопределено);
			ИначеЕсли НЕ ДобавитьКор Тогда
				НовыйЭлементОснованияРазворотов(Измерение.Имя, Неопределено);
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в список разворотов развороты по периодам.
// 
&НаСервереБезКонтекста
Процедура ДобавитьРазворотыПоПериодам(СписокРазворотов, Картинка = Неопределено)
	
	СписокРазворотов.Добавить("ПериодГод"		, "Год"			,, ПолучитьКартинку(Картинка));
	СписокРазворотов.Добавить("ПериодКвартал"	, "Квартал"		,, ПолучитьКартинку(Картинка));
	СписокРазворотов.Добавить("ПериодМесяц"		, "Месяц"		,, ПолучитьКартинку(Картинка));
	СписокРазворотов.Добавить("ПериодНеделя"	, "Неделя"		,, ПолучитьКартинку(Картинка));
	СписокРазворотов.Добавить("ПериодДень"		, "День"		,, ПолучитьКартинку(Картинка));
     	
КонецПроцедуры

// Добавляет в список разворотов развороты по субконто переданного счета.
// 
&НаСервере
Процедура ДобавитьРазворотыПоСубконтоСчета(СписокРазворотов, Счет, Префикс = "", Картинка = Неопределено)
	
	ВидыСубконто = Счет.ВидыСубконто;
	
	Для Каждого Субконто Из ВидыСубконто Цикл
		СписокРазворотов.Добавить(Префикс + "Субконто" + Строка(Субконто.НомерСтроки), "По " + Префикс + "Субконто " + Субконто.НомерСтроки + ": " + Субконто.ВидСубконто.Наименование,, ПолучитьКартинку(Картинка));
		Если Субконто.ВидСубконто.ТипЗначения.Типы().Количество() = 1 Тогда
			НовыйЭлементОснованияРазворотов(Префикс + "Субконто" + Субконто.НомерСтроки,  Субконто.ВидСубконто.ТипЗначения.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в список разворотов развороты по кор. субконто.
// 
&НаСервереБезКонтекста
Процедура ДобавитьРазворотыПоКорСубконто(СписокРазворотов, СтруктураСКорСчетом, Картинка = Неопределено)
	
	КорСчет = Неопределено;
	
	СтруктураСКорСчетом.Свойство("КорСчет", КорСчет);
	
	Если КорСчет = Неопределено Тогда
		
		СписокРазворотов.Добавить("КорСубконто1", "Кор. субконто1",, ПолучитьКартинку(Картинка));
		СписокРазворотов.Добавить("КорСубконто2", "Кор. субконто2",, ПолучитьКартинку(Картинка));
		СписокРазворотов.Добавить("КорСубконто3", "Кор. субконто3",, ПолучитьКартинку(Картинка));
		
	Иначе
		
		ВидыСубконто = КорСчет.ВидыСубконто;
		
		Для Каждого Субконто Из ВидыСубконто Цикл
			СписокРазворотов.Добавить("КорСубконто" + Строка(Субконто.НомерСтроки), "По Кор. субконто " + Субконто.НомерСтроки + ": " + Субконто.ВидСубконто.Наименование,, ПолучитьКартинку(Картинка));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//// Возвращает имя выбранного пользователем разворота
////
// &НаКлиенте
// Функция ПолучитьИмяРазворота(ИмяРегистраБухгалтерии, Расшифровка, МножественныйРазворот = Ложь)
// 	
// 	СписокРазворотов = ПолучитьСписокВозможныхРазворотов(ИмяРегистраБухгалтерии, Расшифровка, МножественныйРазворот);
// 	
// 	Если СписокРазворотов = Неопределено Тогда
// 		Возврат Неопределено;
// 	КонецЕсли;
// 	
// 	ИмяРазворота = ВыбратьИзМеню(СписокРазворотов);
// 	
// 	Возврат ИмяРазворота;
// 					   						 
// КонецФункции

// Добавляет новый элемент в структуру разворотов, для определения возможных реквизитов разворота.
// 
&НаСервере
Процедура НовыйЭлементОснованияРазворотов(Измерение, МетаданныеИзмерения)
	
	НовСтрокаОснование = ОснованияРазворотовПоРеквизитам.Добавить();
		
	НовСтрокаОснование.Измерение 	= Измерение;
	НовСтрокаОснование.Метаданные 	= МетаданныеИзмерения;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияИФорматированияТабличногоДокументаДокументрезультат

// Формирует и возвращает структуру параметров вывода оборотно-сальдовой ведомости.
// 
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровВыводаОСВ(СтруктураПараметров, Макет, Знач ПоЗабалансовымСчетам)
	
	СтруктураФорматовПоказателей 	= СформироватьСтруктуруФорматовПоказателей(СтруктураПараметров.СписокПоказателей, СтруктураПараметров.ИмяРегистраБухгалтерии);
	СтруктураПараметровОграничений 	= СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомости(СтруктураПараметров, ПоЗабалансовымСчетам);

	// В этой структуре будут храниться постоянные значения, передаваемые в другие процедуры.
	СтруктураПараметровОСВ = Новый Структура;
		
	// Переменная, содержащая имена показателей отчета (ресурсов) в виде массива.
	СтруктураПараметровОСВ.Вставить("СписокПоказателей"				, СтруктураПараметров.СписокПоказателей);
	СтруктураПараметровОСВ.Вставить("ОбластьСтрокаПоказателяЧисла"	, Макет.ПолучитьОбласть("СтрокаПоказателя|Числа"));
	СтруктураПараметровОСВ.Вставить("ОбластьСтрокаЧисла"			, Макет.ПолучитьОбласть("Строка|Числа"));
	
	СтруктураПараметровОСВ.Вставить("ОбластьСтрокаПоказателяЧислаРазвернутый"	, Макет.ПолучитьОбласть("СтрокаПоказателяРазвернутый|Числа"));
	СтруктураПараметровОСВ.Вставить("ОбластьСтрокаЧислаРазвернутый"				, Макет.ПолучитьОбласть("СтрокаРазвернутый|Числа"));
	СтруктураПараметровОСВ.Вставить("ОбластьСтрокаПоказателяСчетРазвернутый"	, Макет.ПолучитьОбласть("СтрокаПоказателяРазвернутый|Счет"));
	
	СтруктураПараметровОСВ.Вставить("ОбластьСтрокаПоказателяСчет"	, Макет.ПолучитьОбласть("СтрокаПоказателя|Счет"));
	СтруктураПараметровОСВ.Вставить("НетЛинии"						, Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1));
    СтруктураПараметровОСВ.Вставить("ФорматПоказателей"				, СтруктураФорматовПоказателей);
	СтруктураПараметровОСВ.Вставить("СтруктураОграничений"			, СтруктураПараметровОграничений);
	
	Возврат СтруктураПараметровОСВ;
	
КонецФункции

// Функция возвращает структуру форматов показателей по массиву показателей.
// 
&НаСервереБезКонтекста
Функция СформироватьСтруктуруФорматовПоказателей(Знач СписокПоказателей, Знач ИмяРегистраБухгалтерии) Экспорт
	
	ФорматПоказателей = Новый Структура();
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		Ресурс = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Ресурсы.Найти(ТекПоказатель.Значение);
		Если Ресурс <> Неопределено Тогда
			
			ФорматПоказателей.Вставить(ТекПоказатель.Значение,"ЧЦ = " + Ресурс.Тип.КвалификаторыЧисла.Разрядность
			+ " ; ЧДЦ = " + Ресурс.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			
		Иначе // По умолчанию - сумма
			ФорматПоказателей.Вставить(ТекПоказатель.Значение ,"ЧЦ = 15 ; ЧДЦ = 2");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФорматПоказателей;
	
КонецФункции

// Функция формирует структуру параметров ограничений для оборотно-сальдовой ведомости.
// 
&НаСервереБезКонтекста
Функция СформироватьСтруктуруОграниченийДляОборотноСальдовойВедомости(СтруктураПараметров, Знач ПоЗабалансовымСчетам)
	
	Структура = Новый Структура();
	Структура.Вставить("ИспользоватьОграниченияПоЗабалансовымСчетам", не ПоЗабалансовымСчетам);
	Структура.Вставить("ПоЗабалансовымСчетам", ПоЗабалансовымСчетам);
	Возврат Структура; 
	
КонецФункции

// Инициализирует структуру в которой хранятся итоговые суммы документа.
// 
&НаСервереБезКонтекста
Процедура ИнициализироватьСтруктуруХраненияИтоговОборотка(Знач СписокПоказателей, СтруктураОбщийИтог)
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		СтруктураОбщийИтог.Вставить(ТекПоказатель.Значение + "НачальныйОстатокДт", 0);
		СтруктураОбщийИтог.Вставить(ТекПоказатель.Значение + "НачальныйОстатокКт", 0);
		СтруктураОбщийИтог.Вставить(ТекПоказатель.Значение + "КонечныйОстатокДт", 0);
		СтруктураОбщийИтог.Вставить(ТекПоказатель.Значение + "КонечныйОстатокКт", 0);
		СтруктураОбщийИтог.Вставить(ТекПоказатель.Значение + "ОборотДт", 0);
		СтруктураОбщийИтог.Вставить(ТекПоказатель.Значение + "ОборотКт", 0);
						
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры расшифровки переданной области перед выводом в отчет.
// 
&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыРасшифровкиОборотноСальдовойВедомости(Область, Выборка, Расшифровка = Неопределено, ВыведенныйСчет = Неопределено)
	
	// Заполение значений для расшифровки
	СчетДляРасшифровки = ?(Выборка.Счет <> NULL, Выборка.Счет, ВыведенныйСчет);
	
	Если Расшифровка = Неопределено Тогда
		Область.Параметры.Расшифровка = СчетДляРасшифровки;
	Иначе
		
		Область.Параметры.Расшифровка = Расшифровка;
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в итоговое хранилище сумм текущие данных.
// 
&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруХраненияИтоговОборотка(Знач ИмяПоказателя, СтруктураОбщийИтог,
	Знач НачальныйОстатокДт, Знач НачальныйОстатокКт, Знач КонечныйОстатокДт, Знач КонечныйОстатокКт,
	Знач ОборотДт, Знач ОборотКт)
	
	СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"] = СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокДт"] + НачальныйОстатокДт;
	СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"] = СтруктураОбщийИтог[ИмяПоказателя + "НачальныйОстатокКт"] + НачальныйОстатокКт;
	СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт"] =  СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокДт" ] + КонечныйОстатокДт;
	СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт"] =  СтруктураОбщийИтог[ИмяПоказателя + "КонечныйОстатокКт" ] + КонечныйОстатокКт;
	СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"] =           СтруктураОбщийИтог[ИмяПоказателя + "ОборотДт"]           + ОборотДт;
	СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"] =           СтруктураОбщийИтог[ИмяПоказателя + "ОборотКт"]           + ОборотКт;
	
КонецПроцедуры

// Процедура выводит текущие данные оборотки в область вывода.
// 
&НаСервереБезКонтекста
Процедура ЗаполнитьДаннымиОбластьВыводаОборотка(Область, Знач ФорматПоказателя, 
	Знач НачальныйОстатокДт, Знач НачальныйОстатокКт, 
	Знач КонечныйОстатокДт, Знач КонечныйОстатокКт, 
	Знач ОборотДт, Знач ОборотКт, ТекПоказатель = Неопределено)
	
	Если ТекПоказатель <> Неопределено Тогда
		Область.Параметры.ИмяПоказателя	= ТекПоказатель.Представление;
	КонецЕсли;
	
	Область.Параметры.НачальныйОстатокДт = Формат(НачальныйОстатокДт, ФорматПоказателя);
	Область.Параметры.НачальныйОстатокКт = Формат(НачальныйОстатокКт, ФорматПоказателя);
	Область.Параметры.КонечныйОстатокДт  = Формат(КонечныйОстатокДт,  ФорматПоказателя);
	Область.Параметры.КонечныйОстатокКт  = Формат(КонечныйОстатокКт,  ФорматПоказателя);
	Область.Параметры.ОборотДт           = Формат(ОборотДт,           ФорматПоказателя);
	Область.Параметры.ОборотКт           = Формат(ОборотКт,           ФорматПоказателя);
	
КонецПроцедуры

// Выводит показатели в оборотно-сальдовую ведомость.
// 
&НаСервереБезКонтекста
Процедура ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, Счет, СтруктураОбщийИтог, СтруктураПараметров, СтруктураПараметровОСВ, Уровень = 0, СтруктураКолонок = Неопределено, ВыводитьРазвернутоеСальдо = Ложь, ВключитьВИтог = Истина, ОбластьРазвернутогоСальдо = Неопределено)

	ВыведеноПоказателей = 0;	
	
	// ИмяГруппировки = Выборка.Группировка();
	ИмяГруппировки = "Счет";
	
	ВыводитьРазвернутыйОстаток 	= Ложь;
	ПоСубсчетам					= Истина;
	
	Если Выборка.РазвернутоеСальдо И ВыводитьРазвернутоеСальдо Тогда
		
		Если ТипЗнч(Выборка.Расшифровка) = Тип("ТаблицаЗначений") И Выборка.Расшифровка.Количество() > 0 Тогда
			
			ОбразецРасшифровки 	= Выборка.Расшифровка[0]; 
			ИмяРазворота 		= ОбразецРасшифровки.ИмяМакета;
			
			// AKuznetsov - начало изменения 29.08.11
			ЭтоИзмерениеРегистраКор = Ложь;
			ЭтоИзмерениеРегистра = ЭтоИзмерениеРегистра(СтруктураПараметров.ИмяРегистраБухгалтерии, ИмяРазворота, ЭтоИзмерениеРегистраКор);
			Если (ИмяРазворота = "Счет"
				  ИЛИ Лев(ИмяРазворота, 8) = "Субконто"
				  ИЛИ ЭтоИзмерениеРегистра)
			   И НЕ (ОтборИсключаетОстатки(ОбразецРасшифровки.Отбор, СтруктураПараметров.ИмяРегистраБухгалтерии)
			   		 ИЛИ (ЭтоИзмерениеРегистра И ЭтоИзмерениеРегистраКор)) Тогда
				
				// Можно выводить развернутое сальдо. Оно равно сумме дебетового сальдо и кредитового по расшифровке.
				ВремСтрокаИмяРазворота = ИмяРазворота;
				Если ЭтоИзмерениеРегистра Тогда
					ВремСтрокаИмяРазворота = Метаданные.РегистрыБухгалтерии[СтруктураПараметров.ИмяРегистраБухгалтерии].Измерения[ИмяРазворота].Представление();
				КонецЕсли;
				ОбластьРазвернутогоСальдо.Параметры.ТекстРазвернутогоСальдо = "Развернутое сальдо по: """ + ВремСтрокаИмяРазворота + """";
				ДокументРезультат.Вывести(ОбластьРазвернутогоСальдо, Уровень, "Для данной строки отчета расшифровки не предусмотрены");
				
				ВыводитьРазвернутыйОстаток 	= Истина;
				ПоСубсчетам					= Ложь;
				
			Иначе
				
				ВыводитьРазвернутыйОстаток = Ложь;
				Возврат;
				
			КонецЕсли;
			// AKuznetsov - конец изменения
			
		Иначе
			
			ОбластьРазвернутогоСальдо.Параметры.ТекстРазвернутогоСальдо = "Развернутое сальдо по: ""Субсчета""";
			ДокументРезультат.Вывести(ОбластьРазвернутогоСальдо, Уровень, "Для данной строки отчета расшифровки не предусмотрены");
			
			ВыводитьРазвернутыйОстаток = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ВыводитьРазвернутыйОстаток = Ложь;
		
	КонецЕсли;
	
	Для Каждого ТекПоказатель Из СтруктураПараметров.СписокПоказателей Цикл

		// Проверим, есть ли колонка показателя в выборке.
		Если СтруктураКолонок <> Неопределено И СтруктураКолонок.Найти(ТекПоказатель.Значение + "НачальныйОстатокДт") = Неопределено Тогда
			// Не выводим показатель
			Продолжить;
		КонецЕсли;
		
		// Сумму в валюте выводим только по группировке Валюта.
		Если ТекПоказатель.Значение = "ВалютнаяСумма" И ИмяГруппировки <> "Валюта" Тогда
			Продолжить;			
		КонецЕсли;
		
		Если ТекПоказатель.Значение = "НДС" И Счет.НДС = Ложь Тогда
			Продолжить;
		КонецЕсли;

		ФорматПоказателя = "";
		СтруктураПараметровОСВ.ФорматПоказателей.Свойство(ТекПоказатель.Значение, ФорматПоказателя);

		ВыведеноПоказателей = ВыведеноПоказателей + 1;
		
		Если ВыводитьРазвернутыйОстаток Тогда
			
			Если ВыведеноПоказателей > 1 Тогда
				// Без подчеркивания вверху
				Область = СтруктураПараметровОСВ.ОбластьСтрокаПоказателяЧислаРазвернутый;
			Иначе
				// Есть подчеркивание вверху
				Область = СтруктураПараметровОСВ.ОбластьСтрокаЧислаРазвернутый;
			КонецЕсли;
			
		Иначе	
			
			Если ВыведеноПоказателей > 1 Тогда
				// Без подчеркивания вверху
				Область = СтруктураПараметровОСВ.ОбластьСтрокаПоказателяЧисла;
			Иначе
				// Есть подчеркивание вверху
				Область = СтруктураПараметровОСВ.ОбластьСтрокаЧисла;
			КонецЕсли;
			
		КонецЕсли;
		
		ОборотДт = Выборка[ТекПоказатель.Значение + "ОборотДт"];
		ОборотКт = Выборка[ТекПоказатель.Значение + "ОборотКт"];

		СуффиксОстатка = ?(Выборка.РазвернутоеСальдо И ВыводитьРазвернутыйОстаток, "Развернутый", "");
		
		// Если СтрокаРазвернутогоСальдо = Неопределено Тогда.

		Если ВыводитьРазвернутыйОстаток Тогда
			
			Если ПоСубсчетам Тогда
				
				НачальныйОстатокДт = Выборка[ТекПоказатель.Значение + "Начальный" 	+ СуффиксОстатка + "ОстатокДт"];
				НачальныйОстатокКт = Выборка[ТекПоказатель.Значение + "Начальный" 	+ СуффиксОстатка + "ОстатокКт"];
				КонечныйОстатокДт  = Выборка[ТекПоказатель.Значение + "Конечный" 	+ СуффиксОстатка + "ОстатокДт"];
				КонечныйОстатокКт  = Выборка[ТекПоказатель.Значение + "Конечный" 	+ СуффиксОстатка + "ОстатокКт"];
				
			Иначе
				
				НачальныйОстатокДт = Выборка.Расшифровка.Итог(ТекПоказатель.Значение + "НачальныйОстатокДт");
				НачальныйОстатокКт = Выборка.Расшифровка.Итог(ТекПоказатель.Значение + "НачальныйОстатокКт");
				КонечныйОстатокДт  = Выборка.Расшифровка.Итог(ТекПоказатель.Значение + "КонечныйОстатокДт");
				КонечныйОстатокКт  = Выборка.Расшифровка.Итог(ТекПоказатель.Значение + "КонечныйОстатокКт");
							
			КонецЕсли;
			
		Иначе
			
			НачальныйОстатокДт = Выборка[ТекПоказатель.Значение + "Начальный" 	+ СуффиксОстатка + "ОстатокДт"];
			НачальныйОстатокКт = Выборка[ТекПоказатель.Значение + "Начальный" 	+ СуффиксОстатка + "ОстатокКт"];
			КонечныйОстатокДт  = Выборка[ТекПоказатель.Значение + "Конечный" 	+ СуффиксОстатка + "ОстатокДт"];
			КонечныйОстатокКт  = Выборка[ТекПоказатель.Значение + "Конечный" 	+ СуффиксОстатка + "ОстатокКт"];
			
		КонецЕсли;
			
		
		// бит_Алексеев ЕСЛИ НЕ ПОНРАВИТСЯ ИТОГ!!!!
		
		// Накопление итогов по счетам
		// Группировки
		НужноДополнятьИтоги = (ИмяГруппировки = "Счет") И (Уровень = 0) И ВключитьВИтог;
		// НужноДополнятьИтоги = (ИмяГруппировки = "Счет");
		Если СтруктураПараметровОСВ.СтруктураОграничений.ИспользоватьОграниченияПоЗабалансовымСчетам = Истина Тогда 			
			
			НужноДополнятьИтоги = НужноДополнятьИтоги И	НЕ Выборка.СчетЗабалансовый;
			
		КонецЕсли;
			
		Если НужноДополнятьИтоги Тогда

			ДополнитьСтруктуруХраненияИтоговОборотка(ТекПоказатель.Значение, СтруктураОбщийИтог,
				НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт, КонечныйОстатокКт,
				ОборотДт, ОборотКт);
				
		КонецЕсли;

		// Заполняет данными область вывода
		ЗаполнитьДаннымиОбластьВыводаОборотка(Область, ФорматПоказателя, 
			НачальныйОстатокДт, НачальныйОстатокКт, КонечныйОстатокДт,
			КонечныйОстатокКт, ОборотДт, ОборотКт);
			
		Если ВыведеноПоказателей > 1 Тогда

			Если ВыводитьРазвернутыйОстаток Тогда
				ОбластьСтрокаПоказателяСчет = СтруктураПараметровОСВ.ОбластьСтрокаПоказателяСчетРазвернутый;			
			Иначе
				ОбластьСтрокаПоказателяСчет = СтруктураПараметровОСВ.ОбластьСтрокаПоказателяСчет;
			КонецЕсли;
			
			ОбластьСтрокаПоказателяСчет.Параметры.СубконтоПредставление = ТекПоказатель.Представление;
			ОбластьСтрокаПоказателяСчет.Область(1,7).ЦветТекста = Новый Цвет(166, 67, 0);
			ОбластьСтрокаПоказателяСчет.Область(1,7).Шрифт = Новый Шрифт(, 8, , Истина);
			ОбластьСтрокаПоказателяСчет.Область(1,7).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				
            ВыведеннаяОбласть = ДокументРезультат.Вывести(ОбластьСтрокаПоказателяСчет);
			
			ВыведеннаяОбласть.ГраницаСверху = СтруктураПараметровОСВ.НетЛинии;
			
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
				
	КонецЦикла;

КонецПроцедуры

// Применяет оформление области-источника к области-приемнику.
// 
&НаСервере
Процедура ОформитьОбластьПоПодобию(ОбластьПриемник, ОбластьИсточник, СтартЯчейка, ФинишЯчейка, НомерСтроки, Группа = Ложь)
	
	ОбластьПрототип 	= ОбластьИсточник.ТекущаяОбласть;             
	ОбластьПолучатель 	= ОбластьПриемник.Область(НомерСтроки, СтартЯчейка, НомерСтроки, ФинишЯчейка);
	
	// ОбластьПолучатель.ЦветТекста 	= ОбластьПрототип.ЦветТекста;
	ОбластьПолучатель.ЦветФона 		= ОбластьПрототип.ЦветФона;
	
	Если Группа Тогда
		ОбластьПолучатель.Шрифт = Новый Шрифт(,, Истина, );
		ОбластьПолучатель.ЦветТекста = Новый Цвет(137, 132, 119);
	КонецЕсли;	
	
КонецПроцедуры

// Применяет оформление к области, в зависимости от отступа этой области.
// 
&НаСервере
Процедура ФорматироватьОбластьПоОтступу(Область, Отступ, ДопОтступ, ИмяМакета, ИмяВыводимойОбласти, Группа = Ложь, МакетОбщий)
	
	// Если макет - счет, а уровень ненулевой - рассматриваем как нулевой.
	Если ИмяМакета = "Счет" Тогда
		Отступ = 1;
	КонецЕсли;
	
	Отступ_ = Отступ + ДопОтступ;
	
	ОбластьДляОбъединения = Область.Область(1,2 + Отступ_,1, 14);
	ОбластьДляОбъединения.Объединить();
	
	ОбластьДляЗаполнения = Область.Область(1,2,1, 1 + Отступ_);
	ОбластьДляЗаполнения.Заполнение 		= ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьДляЗаполнения.Текст				= "";
	ГраницаБезЛиний							= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ОбластьДляЗаполнения.ГраницаСверху    	= ГраницаБезЛиний;
	ОбластьДляЗаполнения.ГраницаСнизу    	= ГраницаБезЛиний;
	
	// Оформим область
	ИмяОбластиПодобия 	= "ОформлениеУровень" + Строка(Отступ_ - ДопОтступ);
	МакетОформление     = МакетОбщий.ПолучитьОбласть(ИмяОбластиПодобия);
	ОформитьОбластьПоПодобию(Область, МакетОформление, 2 + Отступ_, 20, 1, Группа);
	
	Если Найти(ИмяВыводимойОбласти, "_Количество") > 0 или Найти(ИмяВыводимойОбласти, "_Вал") > 0 Тогда
		
		ОбластьДляФорматирования = Область.Область(1, 2 + Отступ_, 1, 20);
		ОбластьДляФорматирования.ГраницаСнизу		= ГраницаБезЛиний;
		
		ОбластьДляОбъединения = Область.Область(2,2 + Отступ_,2, 14);
		ОбластьДляОбъединения.Объединить();
	
		ОбластьДляЗаполнения = Область.Область(2,2,2, 1 + Отступ_);
		ОбластьДляЗаполнения.Заполнение 		= ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьДляЗаполнения.Текст				= "";
		ГраницаБезЛиний							= Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбластьДляЗаполнения.ГраницаСверху    	= ГраницаБезЛиний;
		ОбластьДляЗаполнения.ГраницаСнизу    	= ГраницаБезЛиний;
		
		ОбластьДляФорматирования = Область.Область(2, 2 + Отступ_, 2, 20);
		ОбластьДляФорматирования.ГраницаСверху		= ГраницаБезЛиний;
		
		ОформитьОбластьПоПодобию(Область, МакетОформление, 2 + Отступ_, 20, 2);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует заголовок отчета.
// 
&НаСервере
Процедура СформироватьИВывестиЗаголовокОтчета(СтруктураПараметров, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт
	
	ОбластьЗаголовка 	= СформироватьЗаголовок(СтруктураПараметров);
	ВысотаЗаголовка 	= ОбластьЗаголовка.ВысотаТаблицы;
	
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
	Если РекомендацияПользователю Тогда
		
		ОбластьПредупреждения = ДокументРезультат.Область("R4C2:R4C20");
		
		Текст = "";
		Текст = Текст + "Внимание! Изменены ключевые настройки отчета. Рекомендуется нажать на кнопку ""Сформировать""";
		ОбластьПредупреждения.Текст 		= Текст;
		ОбластьПредупреждения.ЦветТекста 	= Новый Цвет(255, 0, 0);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует табличный документ с заголовком отчета.
// 
&НаСервереБезКонтекста
Функция СформироватьЗаголовок(СтруктураПараметров) Экспорт

	ОписаниеПериода = СформироватьСтрокуВыводаПараметровПоДатам(СтруктураПараметров.НачалоПериода, СтруктураПараметров.ОкончаниеПериода);
	          
	Макет = СтруктураПараметров.ОтчетОбъектМакет;
	
	ЗаголовокОтчета = Макет.ПолучитьОбласть("Заголовок");

	НазваниеОрганизации = "";
	
	Для Каждого СтрокаОрганизация Из СтруктураПараметров.МассивОрганизаций Цикл
		
		// BIT AMerkulov 10072014 ++ 			
		//Если ЗначениеЗаполнено(СтрокаОрганизация) Тогда
		//	НазваниеОрганизации_ = СтрокаОрганизация.НаименованиеПолное;
		//КонецЕсли;
		//
		//Если ПустаяСтрока(НазваниеОрганизации) Тогда
		//	НазваниеОрганизации_ = СтрокаОрганизация;
		//КонецЕсли;
			
			Если ТипЗнч(СтрокаОрганизация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
				
				ТаблицаОрганизацийПоПериметру 	= бит_му_Общий.ПолучитьСоставПериметраКонсолидацииСУсловиямиДляОсновногоПараметра(СтрокаОрганизация, СтруктураПараметров.НачалоПериода, СтруктураПараметров.ОкончаниеПериода);
				СписокОрганизацийПоПериметру	= ТаблицаОрганизацийПоПериметру.ВыгрузитьКолонку("Организация");
				
				Для Каждого Организация Из СписокОрганизацийПоПериметру Цикл
					
					Если ЗначениеЗаполнено(Организация) Тогда
						НазваниеОрганизации_ = Организация.НаименованиеПолное;
					КонецЕсли;
					
					Если ПустаяСтрока(Организация) Тогда
						НазваниеОрганизации_ = Организация;
					КонецЕсли;
					
				КонецЦикла;
					
			Иначе
				
				
				Если ЗначениеЗаполнено(СтрокаОрганизация) Тогда
					НазваниеОрганизации_ = СтрокаОрганизация.НаименованиеПолное;
				КонецЕсли;
				
				Если ПустаяСтрока(НазваниеОрганизации) Тогда
					НазваниеОрганизации_ = СтрокаОрганизация;
				КонецЕсли;
				
			КонецЕсли;
		
	// BIT AMerkulov 10072014 --
		
		НазваниеОрганизации = НазваниеОрганизации + " " + НазваниеОрганизации_ + ";";
		
	КонецЦикла;
	
	ЗаголовокОтчета.Параметры.НазваниеОрганизации 	= НазваниеОрганизации;
	ЗаголовокОтчета.Параметры.Заголовок 			= "Оборотно-сальдовая ведомость";
    ЗаголовокОтчета.Параметры.ОписаниеПериода 		= ОписаниеПериода;

	ТекстСписокПоказателей = "";
	
	Для Каждого ТекПоказатель Из СтруктураПараметров.ПредставлениеПоказателей Цикл
		
		ТекстСписокПоказателей = ТекстСписокПоказателей + ?(ТекстСписокПоказателей = "", "", ", ") + ТекПоказатель;
		
	КонецЦикла;
	
	ТекстСписокПоказателей = "Выводимые данные: " + ТекстСписокПоказателей;

	ЗаголовокОтчета.Параметры.СписокПоказателей = ТекстСписокПоказателей;

	Возврат ЗаголовокОтчета;
	
КонецФункции

// Формирует строку ограничений по датам отчета для показа в заголовке формы.
// 
&НаСервереБезКонтекста
Функция СформироватьСтрокуВыводаПараметровПоДатам(Знач ДатаНач, Знач ДатаКон) Экспорт

	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период: без ограничения.";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "Период: " + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""без ограничения""");

		Иначе

			ОписаниеПериода = "Период: " + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");

		КонецЕсли;

	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

// Выводит в табличный документ подчиненные расшифровки ОСВ.
// 
&НаСервере
Процедура ВывестиПодчиненнуюРасшифровку(ДокументРезультат, СтрокаСРасшифровкой, СтруктураСтроки, Уровень = 1, Макет, СписокПоказателей) Экспорт
	
	ПодчиненнаяТЗ = СтрокаСРасшифровкой.Расшифровка;
	
	Если Уровень > 10 Тогда // А то есть любители...
		Уровень = 10;
	КонецЕсли;
	
	ЕстьИерархия = Ложь;
	
	Для Каждого СтрокаПодчиненной Из ПодчиненнаяТЗ Цикл
		
		ДопУровень = ?(ПодчиненнаяТЗ.Колонки.Найти("Уровень_") <> Неопределено, СтрокаПодчиненной.Уровень_, 0);
		
		// Получим необходимый макет
		ИмяМакетаОбласти 	= СтрокаПодчиненной.ИмяМакета;
		ИмяМакетаОбласти 	= ПолучитьИмяРазворотаДляОтбора(ИмяМакетаОбласти);
		
		ИмяОбласти			= "";
		
		ЭтоГруппаВТаблице = ?(ПодчиненнаяТЗ.Колонки.Найти("ЭтоГруппа_") <> Неопределено, СтрокаПодчиненной.ЭтоГруппа_, Ложь);
		
		Если ЭтоГруппаВТаблице Тогда
			
			Если не ЗначениеЗаполнено(СтрокаПодчиненной[СтрЗаменить(ИмяМакетаОбласти, ".", "")]) Тогда
				ЕстьИерархия = Ложь;
				Продолжить;
			КонецЕсли;
			ЕстьИерархия = Истина;
		КонецЕсли;

		ИмяОбласти = "Субконто1";
		
		ПерваяСтрока = Истина;
		
		ВыборкаСтруктура = СтокаТЧВСтруктуруНаСервере(СтрокаПодчиненной, ПодчиненнаяТЗ.Колонки, ПодчиненнаяТЗ.Индекс(СтрокаПодчиненной), СтруктураСтроки);
		
		Если ИмяМакетаОбласти <> "ПоПроводкам" Тогда
		
			Для Каждого ТекПоказатель Из СписокПоказателей Цикл
				
				// Проверим, есть ли колонка показателя в выборке.
				Если не ВыборкаСтруктура.Свойство(ТекПоказатель.Значение + "НачальныйОстатокДт") Тогда
					// Не выводим показатель
					Продолжить;
				КонецЕсли;
				
				Область = Макет.ПолучитьОбласть(ИмяОбласти + ?(ПерваяСтрока, "", "_ДопСумма"));
				
				// Получим необходимый отступ по ячейкам
				Отступ = Уровень;
				
				Если ПерваяСтрока Тогда
					ФорматироватьОбластьПоОтступу(Область, Отступ, ?(ЕстьИерархия, ДопУровень, 0), СтрокаСРасшифровкой.ИмяМакета, ИмяОбласти, ЭтоГруппаВТаблице, Макет);
				Иначе
					ФорматироватьОбластьПоОтступу(Область, Отступ, ?(ЕстьИерархия, ДопУровень, 0), СтрокаСРасшифровкой.ИмяМакета, ИмяОбласти, ЭтоГруппаВТаблице, Макет);
				КонецЕсли;
				
				Уровень = Отступ;
				
				Область.Параметры.Заполнить(СтрокаПодчиненной);
				Область.Параметры.НачальныйОстатокДт = СтрокаПодчиненной[ТекПоказатель.Значение + "НачальныйОстатокДт"];
				Область.Параметры.НачальныйОстатокКт = СтрокаПодчиненной[ТекПоказатель.Значение + "НачальныйОстатокКт"];
				Область.Параметры.ОборотДт = СтрокаПодчиненной[ТекПоказатель.Значение + "ОборотДт"];
				Область.Параметры.ОборотКт = СтрокаПодчиненной[ТекПоказатель.Значение + "ОборотКт"];
				Область.Параметры.КонечныйОстатокДт = СтрокаПодчиненной[ТекПоказатель.Значение + "КонечныйОстатокДт"];
				Область.Параметры.КонечныйОстатокКт = СтрокаПодчиненной[ТекПоказатель.Значение + "КонечныйОстатокКт"];
				
				
				
				Если ПерваяСтрока Тогда
					Область.Параметры.Субконто1 = СтрокаПодчиненной[СтрЗаменить(ИмяМакетаОбласти, ".", "")];
				Иначе
					Область.Параметры.Ресурс = ТекПоказатель.Представление;
				КонецЕсли;
				
				Область.Параметры.Расшифровка = ВыборкаСтруктура;
				
				ДокументРезультат.Вывести(Область, Уровень, "Счет", Истина);
				
				ПерваяСтрока = Ложь;
				
			КонецЦикла;
		
		Иначе
			
			Область = Макет.ПолучитьОбласть("СтрокаПоПроводкам");
			
			// Получим необходимый отступ по ячейкам
			Отступ = Уровень;
			
			ФорматироватьОбластьПоОтступу(Область, Отступ, 0, СтрокаСРасшифровкой.ИмяМакета, ИмяОбласти, ЭтоГруппаВТаблице, Макет);
			
			Уровень = Отступ;
			
			Область.Параметры.Заполнить(СтрокаПодчиненной);
		
			ДокументРезультат.Вывести(Область, Уровень, "Счет", Истина);
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПодчиненной.Расшифровка) = Тип("ТаблицаЗначений") Тогда
			ВывестиПодчиненнуюРасшифровку(ДокументРезультат, СтрокаПодчиненной, ВыборкаСтруктура, Уровень + 1, Макет, СписокПоказателей);
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФормированияИсходныхЗапросовОсвИРазворотов

// Процедура формирует строку ограничений для выборки из таблицы оборотов и остатков регистров бухгалтерии.
// 
&НаСервереБезКонтекста
Процедура ДополнитьСтрокуОграниченийПоРеквизитамВСписке(СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " В(&" + ИмяОграниченияПоРеквизиту + ") ";
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

// Процедура формирует строку ограничений для выборки из таблицы оборотов и остатков регистров бухгалтерии.
// 
&НаСервереБезКонтекста
Процедура ДополнитьСтрокуОграниченийПоРеквизитам(Запрос, СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту, ВидСравнения) Экспорт
	
	// Если НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) Тогда
	// 	Возврат;
	// КонецЕсли;
	
	Запрос.УстановитьПараметр(ИмяОграниченияПоРеквизиту, ОграничениеПоРеквизиту);
	
	СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(ВидСравнения, "&"+ИмяОграниченияПоРеквизиту, ИмяОграниченияПоРеквизиту);
	// СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " = &" + ИмяОграниченияПоРеквизиту + " ";
	СтрокаНовогоОграничения = СтрокаОтбора + " ";
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

// Функция формирует текст строки запроса для выборки данных оборотов и остатков регистра бухгалтерии.
// 
&НаСервереБезКонтекста
Функция СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(Запрос, СтруктураПараметров, СтруктураПараметровОСВ, 
	Знач ИмяАлиасаТаблицы = "ОстаткиИОбороты", Знач ДопОграничениеПоСчету = "" ) Экспорт
	
	СтрокаОграниченийПоРеквизитам = "";
	
	Если ЕстьОрганизация(СтруктураПараметров.ИмяРегистраБухгалтерии) Тогда
		ДополнитьСтрокуОграниченийПоРеквизитамВСписке(СтрокаОграниченийПоРеквизитам, "Организация", СтруктураПараметров.МассивОрганизаций);
	КонецЕсли;
	
	// BIT Amerkulov 16072014 /Использование периметров ++			
	Если ЕстьОрганизация(СтруктураПараметров.ИмяРегистраБухгалтерии) И СтруктураПараметров.ПоПериметру Тогда
		СтрокаНовогоОграничения =   "ОРГАНИЗАЦИЯ В(&Организация) ";
		СтрокаОграниченийПоРеквизитам = ОбъединитьОграничения(СтрокаОграниченийПоРеквизитам, СтрокаНовогоОграничения);
	КонецЕсли;	
	// BIT Amerkulov 16072014 /Использование периметров --
	
	// ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам
	// 								, "ВидУчета"
	// 								, СтруктураПараметровОСВ.СтруктураОграничений.ВидУчета);
	
	Для Каждого ОграничениеИзмерение Из СтруктураПараметров.ТаблицаОтбора Цикл
		
		Если ОграничениеИзмерение.Использование Тогда
			
			// BIT Amerkulov 13062014 /Использование вида сравнения ++		
			//ДополнитьСтрокуОграниченийПоРеквизитам(Запрос, СтрокаОграниченийПоРеквизитам, ОграничениеИзмерение.Измерение, ОграничениеИзмерение.Значение, ОграничениеИзмерение.ВидСравнения);
			битДополнитьСтрокуОграниченийПоРеквизитам(Запрос, СтрокаОграниченийПоРеквизитам, ОграничениеИзмерение.Измерение, ОграничениеИзмерение.Значение, ОграничениеИзмерение.ВидСравнения);
			// BIT Amerkulov 13062014 /Использование вида сравнения --
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвязкиДопОграниченияПоСчету = ?(ПустаяСтрока(ДопОграничениеПоСчету), "", " И ");
	
	СтрокаЧастиЗапроса = "
			|ИЗ
			|	РегистрБухгалтерии." + СтруктураПараметров.ИмяРегистраБухгалтерии + ".ОстаткиИОбороты( "
			+ ?(СтруктураПараметров.НачалоПериода = '00010101000000', "", "&НачПериода") + ", "
			+ ?(СтруктураПараметров.ОкончаниеПериода = '00010101000000', "", "&КонПериода") 
			+ ", , , " + ДопОграничениеПоСчету  
			+ ?(СтруктураПараметровОСВ.СтруктураОграничений.ИспользоватьОграниченияПоЗабалансовымСчетам = Ложь 
				ИЛИ СтруктураПараметровОСВ.СтруктураОграничений.ПоЗабалансовымСчетам = Истина, "", СтрокаСвязкиДопОграниченияПоСчету + " НЕ Счет.Забалансовый ") + ", "
			+ ", "
			+ СтрокаОграниченийПоРеквизитам + ") КАК " + ИмяАлиасаТаблицы;
			
	Возврат СтрокаЧастиЗапроса;		
	
КонецФункции

// Функция дополняет текст часть сформированного запроса по определенным полям.
// 
&НаСервереБезКонтекста
Функция ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СписокПоказателей, Знач ПоляДляВыборки = Истина, 
		Знач ИспользоватьАлиасыПолей = Ложь, Знач ИспользоватьВКачествеПрефиксаАлиасаИмяПоказателя = Ложь, ПолучатьРазвернутыйОстаток = Ложь) Экспорт
		
	СтрокаЗапроса = "";	
	// РазвернутыйОстаток = ?(ПолучатьРазвернутыйОстаток, "Развернутый", "");
			
	Если ПоляДляВыборки Тогда
		
		МассивСуффиксов = Новый Массив;
		МассивСуффиксов.Добавить("");
		МассивСуффиксов.Добавить("Развернутый");
		
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			
			Для Каждого РазвернутыйОстаток Из МассивСуффиксов Цикл
				
				СтрокаЗапроса =  СтрокаЗапроса + ",
				|	" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
				|	" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
				|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
				|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт";
				
			КонецЦикла;
			
			СтрокаЗапроса = СтрокаЗапроса + ",
			|	" + ТекПоказатель.Значение + "ОборотДт,
			|	" + ТекПоказатель.Значение + "ОборотКт";
			
		КонецЦикла;
		
	Иначе
		
		МассивСуффиксов = Новый Массив;
		МассивСуффиксов.Добавить("");
		МассивСуффиксов.Добавить("Развернутый");
		
		// Выборка для суммирования
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			
			Для Каждого РазвернутыйОстаток Из МассивСуффиксов Цикл
				
				СтрокаЗапроса = СтрокаЗапроса + ",
				|	СУММА(" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт),
				|	СУММА(" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт),
				|	СУММА(" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт),
				|	СУММА(" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт)";
				
			КонецЦикла;
			
			СтрокаЗапроса = СтрокаЗапроса + ",
			|	СУММА(" + ТекПоказатель.Значение + "ОборотДт),
			|	СУММА(" + ТекПоказатель.Значение + "ОборотКт)";
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаЗапроса;
	
КонецФункции

// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-15 (#2981)
// Формирует и возвращает строку дополнительных условий выборки из регистра бухгалтерии.
// 
// &НаСервереБезКонтекста
// Функция СформироватьСтрокуДопУсловий(Запрос, Доппараметры)
// 	
// 	СтрокаДопПараметры = "";
// 	
// 	СчетчикУсловий = 0;
// 	
// 	СтрокаДопПараметры = Символы.ПС + " ГДЕ Истина ";
// 	
// 	Для Каждого ДопПараметр Из ДопПараметры Цикл
// 		// Сформируем условие по доппараметрам
// 		СчетчикУсловий = СчетчикУсловий + 1;
// 		СтрокаДопПараметры = СтрокаДопПараметры + " И " 
// 						+ "ОстаткиИОбороты." + ДопПараметр.Ключ 
// 						+ " = &ПараметрУсловие" + Строка(СчетчикУсловий);
// 		Запрос.УстановитьПараметр("ПараметрУсловие" 
// 						+ Строка(СчетчикУсловий), ДопПараметр.Значение);
// 	КонецЦикла;
// 	
// 	Возврат СтрокаДопПараметры;
// 		
// КонецФункции
//
// Формирует запрос по установленным условия, фильтрам и группировкам.
// 
//&НаСервере
//Функция СформироватьЗапрос(СтруктураПараметров, СтруктураПараметровОСВ) Экспорт
//
//	Запрос = Новый Запрос;
//	
//    ГраницаКонецДня = Новый Граница(КонецДня(СтруктураПараметров.ОкончаниеПериода), ВидГраницы.Включая);
//	
//	Запрос.УстановитьПараметр("НачПериода"	,  НачалоДня(СтруктураПараметров.НачалоПериода));
//	Запрос.УстановитьПараметр("КонПериода"	,  ГраницаКонецДня);
//	Запрос.УстановитьПараметр("Организация"	,  СтруктураПараметров.МассивОрганизаций);
//
//	ТекстЗапроса = "";
//	ТекстИтогов  = "";
//	ТекстЗапроса = ТекстЗапроса + 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Счет КАК Счет,
//	|	Счет.Код КАК СчетКод,
//	|	Счет.Наименование КАК СчетНаименование,
//	|	Счет.Представление КАК СчетПредставление,
//	|	Счет.Забалансовый КАК СчетЗабалансовый,
//	|	ЛОЖЬ КАК ПоСубсчетам,
//	|   ЛОЖЬ КАК РазвернутоеСальдо";
//
//	// Добавим в текст запроса все выбранные ресурсы.
//	ТекстЗапроса = ТекстЗапроса + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.СписокПоказателей, Истина, 
//			Истина, Истина);
//			
//	ТекстИтогов = ТекстИтогов + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.СписокПоказателей, Ложь);		
//				
//	СтрокаТекстаВыборкиИзТаблицы = СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(Запрос, СтруктураПараметров, СтруктураПараметровОСВ);
//	
//	// СтрокаДопУсловий = СформироватьСтрокуДопУсловий(Запрос, СтруктураПараметров.ТаблицаОтбора);
//	
//	ТекстЗапроса = ТекстЗапроса + СтрокаТекстаВыборкиИзТаблицы;
//	
//	ТекстЗапроса = ТекстЗапроса + "
//	|АВТОУПОРЯДОЧИВАНИЕ
//	|ИТОГИ " + Сред(ТекстИтогов, 2) + "
//	|ПО
//	|	Счет ИЕРАРХИЯ";
//
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Хозрасчетный", СтруктураПараметров.ИмяРегистраБухгалтерии);
//	
//	Запрос.Текст = ТекстЗапроса;
//
//	Возврат Запрос;
//
//КонецФункции // СформироватьЗапрос()
&НаСервере
Функция ПолучитьТаблицуПериметра(ПериметрКонсолидации, НачалоПериода, КонецПериода) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_СоставПериметровКонсолидации.Период КАК Период,
	               |	КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидации.ДатаОкончания, ДЕНЬ) КАК ДатаОкончания,
	               |	бит_му_СоставПериметровКонсолидации.Организация КАК Организация
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации КАК бит_му_СоставПериметровКонсолидации
	               |ГДЕ
	               |	бит_му_СоставПериметровКонсолидации.ПериметрКонсолидации = &ПериметрКонсолидации
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Период";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачалоПериода", 			НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецПериода);
	Запрос.УстановитьПараметр("ПериметрКонсолидации", 	ПериметрКонсолидации);
		
	ТаблицаПериодовПериметра = Запрос.Выполнить().Выгрузить();
	МассивУдаляемыхСтрок = Новый Массив;
	
	//Подготовим данные в таблице
	
	Для Каждого Строка из ТаблицаПериодовПериметра Цикл	
		Если Строка.Период < НачалоПериода Тогда
			Строка.Период = НачалоПериода
		КонецЕсли;
		
		Если Строка.ДатаОкончания > КонецПериода Тогда
			Строка.ДатаОкончания = КонецПериода
		КонецЕсли;
	
		Если Строка.ДатаОкончания = '00010101235959' Тогда
			Если ТаблицаПериодовПериметра.Количество() - 1 <> ТаблицаПериодовПериметра.Индекс(Строка) Тогда 
			
				СледующаяСтрока = ТаблицаПериодовПериметра.Получить(ТаблицаПериодовПериметра.Индекс(Строка) + 1);
				
				Если СледующаяСтрока.Организация = Строка.Организация Тогда
					МассивУдаляемыхСтрок.Добавить(Строка);
					СледующаяСтрока.Период = Строка.Период;	
				Иначе
					Строка.ДатаОкончания = КонецПериода;
				КонецЕсли;	
				
			Иначе
				Строка.ДатаОкончания = КонецПериода;
			КонецЕсли;			
		КонецЕсли;
		
		Если Строка.ДатаОкончания < Строка.Период И МассивУдаляемыхСтрок.Найти(Строка) = Неопределено Тогда 
			МассивУдаляемыхСтрок.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка из МассивУдаляемыхСтрок Цикл
		ТаблицаПериодовПериметра.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТаблицаПериодовПериметра;
		
КонецФункции
Функция СформироватьЗапрос(СтруктураПараметров, СтруктураПараметровОСВ) Экспорт
	
	Запрос = Новый Запрос;
	
	ГраницаКонецДня = Новый Граница(КонецДня(СтруктураПараметров.ОкончаниеПериода), ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("НачПериода"	,  НачалоДня(СтруктураПараметров.НачалоПериода));
	Запрос.УстановитьПараметр("КонПериода"	,  ГраницаКонецДня);
	ТекстРазрешенные = "РАЗРЕШЕННЫЕ";
	ТекстКакВложенныйЗапрос = "";
	
	ТекстЗапроса = ""; // ок Видяйкин В.И. 20170208
	
	Если СтруктураПараметров.ПоПериметру Тогда
		
		 
		//Получим таблицу активных организаций периметра по периодам
		
		
		
		Если СтруктураПараметров.ТаблицаОрганизаций.Количество() Тогда 
			
			
						
			
			ТекстЗапроса = ТекстЗапроса +		
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Счет КАК Счет,
			|	ВложенныйЗапрос.Счет.Код КАК СчетКод,
			|	ВложенныйЗапрос.Счет.Наименование КАК СчетНаименование,
			|	ВложенныйЗапрос.Счет.Представление КАК СчетПредставление,
			|	ВложенныйЗапрос.Счет.Забалансовый КАК СчетЗабалансовый";
			
			Если СтруктураПараметров.ПоВалютам Тогда
				ТекстЗапроса = ТекстЗапроса + 
				"	ВложенныйЗапрос.Валюта КАК Валюта,
				|	ВложенныйЗапрос.Валюта.Представление КАК ВалютаПредставление ";
				
			КонецЕсли;
			ТекстРазрешенные = "";
			ТекстЗапроса = ТекстЗапроса + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомостьБИТ(СтруктураПараметров.СписокПоказателей, Истина, Истина, Истина,,,,"ВложенныйЗапрос.");
			ТекстЗапроса = ТекстЗапроса + "
			| ИЗ
			| (";
			ТекстКакВложенныйЗапрос = ") как ВложенныйЗапрос";
			
		КонецЕсли;
		
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-06-12 (#2981)
		//Запрос.УстановитьПараметр("Организация"	,  Новый Массив());
		Запрос.УстановитьПараметр("Организация"	,  СтруктураПараметров.МассивОрганизацийВПериоде);
		Запрос.УстановитьПараметр("Организация99999"	,  СтруктураПараметров.МассивОрганизацийВПериоде);
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-06-12 (#2981)
	Иначе
		Запрос.УстановитьПараметр("Организация"	,  СтруктураПараметров.МассивОрганизаций);
	КонецЕсли;
	   
	
	ПостроенПоПериметру = Ложь;
	
	Если СтруктураПараметров.ПоПериметру Тогда
		
		Если СтруктураПараметров.ТаблицаОрганизаций.Количество() Тогда 
			
			Сч = 0 ;
			
			Для Каждого Строка из СтруктураПараметров.ТаблицаОрганизаций цикл
								
				Сч = Сч + 1;
				
				ИндексНач = СтруктураПараметров.МассивОрганизацийИтогиНач.Найти(Строка.Организация);
				ИндексКон = СтруктураПараметров.МассивОрганизацийИтогиКон.Найти(Строка.Организация);
				
				Если ИндексНач <> Неопределено И Строка.Период = СтруктураПараметров.НачалоПериода Тогда
					СтруктураПараметров.МассивОрганизацийИтогиНач.Удалить(ИндексНач);
					ПостроитьНачИтог = Истина;
				Иначе
					ПостроитьНачИтог = Ложь;
				КонецЕсли;
				
				Если ИндексКон <> Неопределено Тогда
					СтруктураПараметров.МассивОрганизацийИтогиКон.Удалить(ИндексКон);
					ПостроитьКонИтог = Истина;
				Иначе
					ПостроитьКонИтог = Ложь;
				КонецЕсли;
				// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-06-12 (#2981)
				Если ПостроитьКонИтог Или ПостроитьНачИтог Тогда
					
					Если Сч <> 1 Тогда			
						ТекстЗапроса = ТекстЗапроса + " 
						| ОБЪЕДИНИТЬ ВСЕ
						|   ВЫБРАТЬ
						|	Счет КАК Счет,
						|	Счет.Код КАК СчетКод,
						|	Счет.Наименование КАК СчетНаименование,
						|	Счет.Представление КАК СчетПредставление,
						|	Счет.Забалансовый КАК СчетЗабалансовый,
						|	Ложь КАК ПоСубсчетам,
						|   Ложь КАК РазвернутоеСальдо";	
					Иначе
						ТекстЗапроса = ТекстЗапроса + " 
						|   ВЫБРАТЬ
						|	Счет КАК Счет,
						|	Счет.Код КАК СчетКод,
						|	Счет.Наименование КАК СчетНаименование,
						|	Счет.Представление КАК СчетПредставление,
						|	Счет.Забалансовый КАК СчетЗабалансовый,
						|	Ложь КАК ПоСубсчетам,
						|   Ложь КАК РазвернутоеСальдо";
					КонецЕсли;
					
					Если СтруктураПараметров.ПоВалютам Тогда
						ТекстЗапроса = ТекстЗапроса + ",
						|	Валюта КАК Валюта,
						|	Валюта.Представление КАК ВалютаПредставление ";
					КонецЕсли;
					
					
					
					ТекстЗапроса = ТекстЗапроса + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомостьБИТОбъединение(СтруктураПараметров.СписокПоказателей, Истина, Истина, Истина,,, Строка,, ПостроитьНачИтог, ПостроитьКонИтог);
					СтрокаТекстаВыборкиИзТаблицы = СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерииБИТ(Запрос, СтруктураПараметров, СтруктураПараметровОСВ,,Сч,Строка);
					
					ТекстЗапроса  = ТекстЗапроса  + СтрокаТекстаВыборкиИзТаблицы;	
					
				ИначеЕсли НЕ ПостроенПоПериметру Тогда
					
					Если Сч <> 1 Тогда			
						ТекстЗапроса = ТекстЗапроса + " 
						| ОБЪЕДИНИТЬ ВСЕ
						|   ВЫБРАТЬ
						|	Счет КАК Счет,
						|	Счет.Код КАК СчетКод,
						|	Счет.Наименование КАК СчетНаименование,
						|	Счет.Представление КАК СчетПредставление,
						|	Счет.Забалансовый КАК СчетЗабалансовый,
						|	Ложь КАК ПоСубсчетам,
						|   Ложь КАК РазвернутоеСальдо";	
					Иначе
						ТекстЗапроса = ТекстЗапроса + " 
						|   ВЫБРАТЬ
						|	Счет КАК Счет,
						|	Счет.Код КАК СчетКод,
						|	Счет.Наименование КАК СчетНаименование,
						|	Счет.Представление КАК СчетПредставление,
						|	Счет.Забалансовый КАК СчетЗабалансовый,
						|	Ложь КАК ПоСубсчетам,
						|   Ложь КАК РазвернутоеСальдо";
					КонецЕсли;
					
					Если СтруктураПараметров.ПоВалютам Тогда
						ТекстЗапроса = ТекстЗапроса + ",
						|	Валюта КАК Валюта,
						|	Валюта.Представление КАК ВалютаПредставление ";
					КонецЕсли;
					
					
					
					ТекстЗапроса = ТекстЗапроса + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомостьБИТОбъединение(СтруктураПараметров.СписокПоказателей, Истина, Истина, Истина,,, Строка,, Истина, Истина);
					СтрокаТекстаВыборкиИзТаблицы = СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерииБИТ(Запрос, СтруктураПараметров, СтруктураПараметровОСВ,,99999,Строка);
					
					ТекстЗапроса  = ТекстЗапроса  + СтрокаТекстаВыборкиИзТаблицы;
					
					ПостроенПоПериметру = Истина;
					
				КонецЕсли;
				// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-06-12 (#2981)
			КонецЦикла;
		КонецЕсли;	
		
	Иначе
				
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ   "+ТекстРазрешенные+"
		|	Счет КАК Счет,
		|	Счет.Код КАК СчетКод,
		|	Счет.Наименование КАК СчетНаименование,
		|	Счет.Представление КАК СчетПредставление,
		|	Счет.Забалансовый КАК СчетЗабалансовый,
		|	Ложь КАК ПоСубсчетам,
		|   Ложь КАК РазвернутоеСальдо";

		// Добавим в текст запроса все выбранные ресурсы 
		ТекстЗапроса = ТекстЗапроса + ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.СписокПоказателей, Истина, 
		Истина, Истина);
			
		СтрокаТекстаВыборкиИзТаблицы = СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерии(Запрос, СтруктураПараметров, СтруктураПараметровОСВ);
		
		
		ТекстЗапроса = ТекстЗапроса + СтрокаТекстаВыборкиИзТаблицы;
	
		
	КонецЕсли; 	
	
	ТекстЗапроса = ТекстЗапроса + ТекстКакВложенныйЗапрос;
	
	ТекстИтогов = ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость(СтруктураПараметров.СписокПоказателей, Ложь);
	
	ТекстЗапроса = ТекстЗапроса + "
	|АВТОУПОРЯДОЧИВАНИЕ
	|ИТОГИ " + Сред(ТекстИтогов, 2) + "
	|ПО
	|	Счет ИЕРАРХИЯ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Хозрасчетный", СтруктураПараметров.ИмяРегистраБухгалтерии);
	
	Запрос.Текст = ТекстЗапроса;
		
	Возврат Запрос;

КонецФункции // СформироватьЗапрос()
 // ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-15 (#2981)

// Формирует таблицу остатков и оборотов для расшифровки из временных таблиц остатков и оборотов.
//
&НаСервере
Функция ПолучитьОстаткиИОборотыДляПоляПоОтбору(Знач ИмяРазворота, Отбор, ИерархияЭлементов = Ложь, РазвернутоеСальдо = Ложь) Экспорт
	
	Если ИмяРазворота = "СубСчет" Тогда
		ИмяРазворота = "Счет";
	КонецЕсли;
	
	ПодготовитьСтруктуруПараметровФормированияОтчетаНаСервере();
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(мАдресСтруктурыПараметров);
	
	// Подготовим менеджер временных таблиц и поместим остатки и обороты во временные таблицы.
	Запрос 							= Новый Запрос;
	МенеджерТаблиц 					= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерТаблиц;
	СписокПоказателей 				= СтруктураПараметров.СписокПоказателей;
	
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
	//РезультатОстатковПоОтбору(Запрос, ИмяРазворота, Отбор, СтруктураПараметров, РазвернутоеСальдо);
	//РезультатОборотовПоОтбору(Запрос, ИмяРазворота, Отбор, СтруктураПараметров);
	
	РезультатОстатковПоОтбору(Запрос, ИмяРазворота, Отбор, СтруктураПараметров, РазвернутоеСальдо, 
		СтруктураПараметров.ТаблицаОрганизаций,СтруктураПараметров.МассивОрганизацийИтогиНач,СтруктураПараметров.МассивОрганизацийИтогиКон,СтруктураПараметров.МассивОрганизацийВПериоде);
	РезультатОборотовПоОтбору(Запрос, ИмяРазворота, Отбор, СтруктураПараметров, 
		СтруктураПараметров.ТаблицаОрганизаций,СтруктураПараметров.МассивОрганизацийИтогиНач,СтруктураПараметров.МассивОрганизацийИтогиКон,СтруктураПараметров.МассивОрганизацийВПериоде);
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
	
	ИмяРазворота_ = ИмяРазворота;
	
	Если ЕстьПериодВИмени(ИмяРазворота)  Тогда
		ИмяРазворота_ 	= "Период";
	КонецЕсли;
	
	ПсевдонимРазворота = СтрЗаменить(ИмяРазворота_, ".", "");
	
	// Необходимо объединить данные из временных таблиц.
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   1 КАК Уровень_,
	|   ЛОЖЬ КАК ЭтоГруппа_,	
	|	Обороты.Счет"; // , Обороты.Наименование
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		Запрос.Текст = Запрос.Текст + ",
		|	Обороты." + ТекПоказатель.Значение + "ОборотДт КАК " + ТекПоказатель.Значение + "ОборотДт,
		|	Обороты." + ТекПоказатель.Значение + "ОборотКт КАК " + ТекПоказатель.Значение + "ОборотКт,
		|	0 КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт,
		|	0 КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт,
		|	0 КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт,
		|	0 КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт";
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Обороты КАК Обороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	1 КАК Уровень_,
	|   ЛОЖЬ КАК ЭтоГруппа_,	
	|	Остатки.Счет";
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		Запрос.Текст = Запрос.Текст + ",
		|	0 КАК " + ТекПоказатель.Значение + "ОборотДт,
		|	0 КАК " + ТекПоказатель.Значение + "ОборотКт,
		|	Остатки." + ТекПоказатель.Значение + "НачальныйОстатокДт КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт,
		|	Остатки." + ТекПоказатель.Значение + "НачальныйОстатокКт КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт,
		|	Остатки." + ТекПоказатель.Значение + "КонечныйОстатокДт КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт,
		|	Остатки." + ТекПоказатель.Значение + "КонечныйОстатокКт КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт";
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Остатки КАК Остатки";
	
	Если ИерархияЭлементов Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ
		|	0 КАК Уровень_,
		|   ИСТИНА КАК ЭтоГруппа_";
		
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			Запрос.Текст = Запрос.Текст + ",
			|	СУММА(" + ТекПоказатель.Значение + "ОборотДт),
			|	СУММА(" + ТекПоказатель.Значение + "ОборотКт),
			|	СУММА(" + ТекПоказатель.Значение + "НачальныйОстатокДт),
			|	СУММА(" + ТекПоказатель.Значение + "НачальныйОстатокКт),
			|	СУММА(" + ТекПоказатель.Значение + "КонечныйОстатокДт),
			|	СУММА(" + ТекПоказатель.Значение + "КонечныйОстатокКт)";
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|ПО
		|	Счет Только ИЕРАРХИЯ";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счет", ПсевдонимРазворота);
    
    Если ИмяРазворота = "Регистратор" Тогда		
		Запрос.Текст = Запрос.Текст + "          
        |УПОРЯДОЧИТЬ ПО
        |    Регистратор
        |АВТОУПОРЯДОЧИВАНИЕ";   
    КонецЕсли;
    
	Результат = Запрос.Выполнить().Выгрузить();
	// Получим сводную таблицу остатков и оборотов в разрезе разворота.
	
	СтрокаРесурсов = "";
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		СтрокаРесурсов = СтрокаРесурсов + ?(ПустаяСтрока(СтрокаРесурсов), "", ",") +
						 ТекПоказатель.Значение + "ОборотДт," +
						 ТекПоказатель.Значение + "ОборотКт," +
						 ТекПоказатель.Значение + "НачальныйОстатокДт," +
						 ТекПоказатель.Значение + "НачальныйОстатокКт," +
						 ТекПоказатель.Значение + "КонечныйОстатокДт," +
						 ТекПоказатель.Значение + "КонечныйОстатокКт";
	КонецЦикла;
					 
	Результат.Свернуть(ПсевдонимРазворота + ", Уровень_, ЭтоГруппа_ ", СтрокаРесурсов);

	Результат.Колонки.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

// Получает обороты для поля по отбору.
// 
&НаСервереБезКонтекста 
// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
//Процедура РезультатОборотовПоОтбору(Запрос, Знач ИмяРазворота, Расшифровка, СтруктураПараметров)
Процедура РезультатОборотовПоОтбору(Запрос, Знач ИмяРазворота, Расшифровка, СтруктураПараметров,
	ТаблицаОрганизаций, МассивОрганизацийИтогиНач, МассивОрганизацийИтогиКон, МассивОрганизацийВПериоде)
// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
	
	РегистрБухгалтерии 	= СтруктураПараметров.ИмяРегистраБухгалтерии;
	ИмяРегистра 		= РегистрБухгалтерии;
	
	ТекстВыборкиПолейЗапроса 	= "";
	ТекстУсловияЗапроса 		= "";
	ТекстПодвалаЗапроса			= "";
	
	Отбор 						= Расшифровка.Отбор; 
	ИмяРазворота_ 				= ИмяРазворота;
	Периодичность 				= ""; 
	Периодичность				= ПолучитьПериодичностьОтбора(Отбор);
	
	ОтборПоИзмерениям			= СтруктураПараметров.ТаблицаОтбора;
	СписокПоказателей			= СтруктураПараметров.СписокПоказателей;
	
	Если ЕстьПериодВИмени(ИмяРазворота)  Тогда
		
		Периодичность	= СтрЗаменить(ИмяРазворота, "Период", "");
		ИмяРазворота_ 	= "Период";
		
	КонецЕсли;
	
	Если ИмяРазворота = "Регистратор" Тогда
		
		Периодичность = ИмяРазворота;
		
	КонецЕсли;

	// Заполним текст выбора полей запроса.
	// Проверим, нужна ли сортировка.
	Если ВозможноНаименование(ИмяРазворота_) Тогда
		ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ХозрасчетныйОбороты.Счет КАК Счет";
	Иначе
		ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ХозрасчетныйОбороты.Счет КАК Счет";
	КонецЕсли;
    	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + ",
		|ХозрасчетныйОбороты." + ТекПоказатель.Значение + "ОборотДт,
		|ХозрасчетныйОбороты." + ТекПоказатель.Значение + "ОборотКт";
		
	КонецЦикла;
	
	//Заполним текст условий запроса
	
	ВОтбореДопРеквизит 		= Ложь;
	УсловиеДляПодвалаДопов 	= "";
	ТекстПодвалаЗапросаДоп	= "";
	СчетчикУсловий 			= 0;
	СчетчикДопов			= 0;
	


	ТекстУсловияЗапроса = ТекстУсловияЗапроса + " ГДЕ ";
	
	ЕстьУсловияОтбора = Ложь;
	
	Если Отбор.Количество() > 1 Тогда //Счет всегда присутствует в отборах и указываем его в параметрах вирт. таблицы
		
		Для Каждого СтрокаОтбора Из Отбор Цикл
			
			СчетчикУсловий = СчетчикУсловий + 1;
			
			Если СтрокаОтбора.Ключ = "Счет" или ЕстьПериодВИмени(СтрокаОтбора.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			//ДОПРЕКВИЗИТЫ
			Если Найти(СтрокаОтбора.Ключ, "ПоДопРеквизитам") <> 0 Тогда
				
				СчетчикДопов = СчетчикДопов + 1;
				
				ЕстьУсловияОтбора = Истина;
				
				Если СтрокаОтбора.Значение.Значение = NULL Тогда
					
					ТекстУсловияЗапроса = ТекстУсловияЗапроса +
					" ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Значение Есть NULL";
					
				Иначе	
					
					ТекстУсловияЗапроса = ТекстУсловияЗапроса +
					" ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Значение = &ПараметрУсловие" + Строка(СчетчикУсловий);
					
					//сразу - параметр
					Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), СтрокаОтбора.Значение.Значение);
					
				КонецЕсли;
			
				ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				
				//УсловиеДляПодвалаДопов =  УсловиеДляПодвалаДопов + ?(ВОтбореДопРеквизит, "", "") + "
				//|(ХозрасчетныйОбороты." + СтрокаОтбора.Значение.Измерение + " 
				//			= ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Объект
				//|			И ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ" + Строка(СчетчикУсловий) + ")";
				
				ТекстПодвалаЗапросаДоп = ТекстПодвалаЗапросаДоп + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + " 
				|		ПО (ХозрасчетныйОбороты." + СтрокаОтбора.Значение.Измерение + " = ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Объект
				|			И ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Свойство = &СсылкаПВХ" + Строка(СчетчикУсловий) + ")";
				
				//сразу - параметр
				Запрос.УстановитьПараметр("СсылкаПВХ" + Строка(СчетчикУсловий), СтрокаОтбора.Значение.СсылкаПВХ);
				
				ВОтбореДопРеквизит = Истина;
				
			Иначе
				
				ЕстьУсловияОтбора = Истина;
				
				ТекстУсловияЗапроса = ТекстУсловияЗапроса + " ХозрасчетныйОбороты." + ПолучитьИмяРазворотаДляОтбора(СтрокаОтбора.Ключ) + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
				
				//сразу - параметр
				Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), СтрокаОтбора.Значение);
				
				//Если СчетчикУсловий <> Отбор.Количество() Тогда
				ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				//КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		 		
	КонецЕсли;
	
	Если Отбор.Количество() > 1 и ЕстьУсловияОтбора Тогда
		//ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
	КонецЕсли;
	
	// BIT AMerkulov 08042015 ++	
	
	//Если СтруктураПараметров.МассивОрганизаций.Количество() > 0 Тогда
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
	//Если СтруктураПараметров.МассивОрганизаций.Количество() > 0  ИЛИ СтруктураПараметров.ПоПериметру = Истина Тогда
	//// BIT AMerkulov 08042015 ++
	//	ТекстУсловияЗапроса = ТекстУсловияЗапроса + "Организация В(&СписокОрганизаций) ";
	//	//сразу - параметр
	//	Запрос.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.МассивОрганизаций);
	//Иначе
	//	ТекстУсловияЗапроса = ТекстУсловияЗапроса + "Истина ";
	//КонецЕсли;
	Если СтруктураПараметров.МассивОрганизаций.Количество() > 0  ИЛИ СтруктураПараметров.ПоПериметру = Истина Тогда
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + "Организация В(&СписокОрганизаций) ";
		//сразу - параметр
		Если СтруктураПараметров.ПоПериметру Тогда
			// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)

			//Запрос.УстановитьПараметр("СписокОрганизаций", Новый Массив);
			Запрос.УстановитьПараметр("СписокОрганизаций"	,  СтруктураПараметров.МассивОрганизацийВПериоде);
			// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)

		Иначе
			Запрос.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.МассивОрганизаций);
		КонецЕсли;
	Иначе
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + "Истина ";
	КонецЕсли;

	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
	//Если есть доппараметры - установим их
	СтрокаДопПараметры = "";
	
	Для Каждого ДопПараметр Из ОтборПоИзмерениям Цикл
		
		//Сформируем условие по доппараметрам
		
		Если ДопПараметр.Использование Тогда
			СчетчикУсловий = СчетчикУсловий + 1;
			СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(ДопПараметр.ВидСравнения, "&"+ДопПараметр.Измерение, ДопПараметр.Измерение);

			//СтрокаДопПараметры = СтрокаДопПараметры + " И " + ДопПараметр.Измерение + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
			СтрокаДопПараметры = СтрокаДопПараметры + " И " + СтрокаОтбора;
			
			Запрос.УстановитьПараметр(ДопПараметр.Измерение, ДопПараметр.Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстУсловияЗапроса = ТекстУсловияЗапроса + СтрокаДопПараметры;
	
	КонецПериодаНужен = СтруктураПараметров.ОкончаниеПериода <> Дата("00010101000000");
	
	//Заполним подвал запроса
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "ИЗ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, " + ?(КонецПериодаНужен, "&ДатаКон, ", ", ") + Периодичность;
	
	ГраницаКонецДня = Новый Граница(КонецДня(СтруктураПараметров.ОкончаниеПериода), ВидГраницы.Включая);
	
	//Нужно ограничить период по первому верхнему в отборе
	ДатаНачПсевдо = СтруктураПараметров.НачалоПериода;
	ДатаКонПсевдо = ГраницаКонецДня;
	
	ЗаполнитьПсевдоПериод(Отбор, ДатаНачПсевдо, ДатаКонПсевдо);
	
	//сразу - параметр
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачПсевдо);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонПсевдо);
	
	СчетДляОтбора 		= Неопределено;
	
	Если Отбор.Свойство("Счет", СчетДляОтбора) Тогда
		
		Если СчетДляОтбора <> Неопределено Тогда
			ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ", Счет В Иерархии (&Счет)";
			//сразу - параметр
			Запрос.УстановитьПараметр("Счет", СчетДляОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ") КАК ХозрасчетныйОбороты";
	
	//Если ВОтбореДопРеквизит Тогда
	//	
	//	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//	|		ПО " + УсловиеДляПодвалаДопов;
	//	
	//КонецЕсли;
	
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ТекстПодвалаЗапросаДоп;
	
	//Необходимо выбрать в качестве разреза переданное в качестве параметра поле
	ТекстВыборкиПолейЗапроса = СтрЗаменить(ТекстВыборкиПолейЗапроса, "Счет КАК Счет", ИмяРазворота_);
	ТекстВыборкиПолейЗапроса = СтрЗаменить(ТекстВыборкиПолейЗапроса, ".Счет.", "." + ИмяРазворота_ + ".");
		
	ТекстЗапроса 	= ТекстВыборкиПолейЗапроса + Символы.ПС + "ПОМЕСТИТЬ Обороты" + Символы.ПС + ТекстПодвалаЗапроса + Символы.ПС + ТекстУсловияЗапроса;
	
		// BIT AMerkulov 10072014 ++
		Если СтруктураПараметров.ПоПериметру Тогда 
			
			Если ТаблицаОрганизаций.Количество()> 0 Тогда 
				Сч = 0 ;
				СтруктураДанных = Новый Структура("ДатаНач,ДатаКон,Номер",СтруктураПараметров.НачалоПериода, СтруктураПараметров.ОкончаниеПериода);
				Для Каждого Строка из ТаблицаОрганизаций цикл
					// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)			
					Если МассивОрганизацийВПериоде.Найти(Строка.Организация) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
					ДатаКонец = "&ДатаНач";
					ДатаНачало = "&ДатаКон";
					
					Если Строка <> неопределено Тогда 
						
						Если Строка.ДатаОкончания > СтруктураПараметров.НачалоПериода и
							Строка.ДатаОкончания < КонецДня(СтруктураПараметров.ОкончаниеПериода) Тогда 
							ДатаКонец = "&ДатаКон"+Сч;
							Запрос.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
						Иначе 
							ДатаКонец = "&ДатаКон";
						КонецЕсли;
						
						Если Строка.Период > СтруктураПараметров.НачалоПериода Тогда 
							ДатаНачало = "&ДатаНач"+ Сч;
							Запрос.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
						Иначе 
							ДатаНачало = "&ДатаНач";
						КонецЕсли;
					КонецЕсли;
					
					
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ " + СтрЗаменить(ТекстВыборкиПолейЗапроса	, "РАЗРЕШЕННЫЕ", "")  + Символы.ПС;
					ТекстПодвалаОбъединение =  ТекстПодвалаЗапроса;
					ТекстПодвалаОбъединение =  СтрЗаменить(ТекстПодвалаОбъединение, "&ДатаНач", ДатаНачало);
					ТекстПодвалаОбъединение =  СтрЗаменить(ТекстПодвалаОбъединение, "&ДатаКон", ДатаКонец);
					ТекстЗапроса 	= ТекстЗапроса + ТекстПодвалаОбъединение + Символы.ПС ;
					
					ТекстУсловияОбъединение = ТекстУсловияЗапроса;
					ТекстУсловияОбъединение = СтрЗаменить(ТекстУсловияОбъединение, "Организация В(&СписокОрганизаций)", "Организация =&СписокОрганизаций"+Сч);
					ТекстЗапроса = ТекстЗапроса + ТекстУсловияОбъединение;
					
					Запрос.УстановитьПараметр("СписокОрганизаций"+Сч,Строка.Организация);
					
					
					Сч =  Сч + 1;	
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	
	
	
	// BIT AMerkulov 10072014 --
	
	//Укажем реальный регистр бухгалтерии
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса, "Хозрасчетный", СтруктураПараметров.ИмяРегистраБухгалтерии);
	
	Запрос.Текст 	= ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Получает остатки для поля по отбору.
// 
&НаСервереБезКонтекста
// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
//Процедура РезультатОстатковПоОтбору(Запрос, Знач ИмяРазворота, Расшифровка, СтруктураПараметров, РазвернутоеСальдо = Ложь)
Процедура РезультатОстатковПоОтбору(Запрос, Знач ИмяРазворота, Расшифровка, СтруктураПараметров, РазвернутоеСальдо = Ложь,
	ТаблицаОрганизаций, МассивОрганизацийИтогиНач, МассивОрганизацийИтогиКон, МассивОрганизацийВПериоде)
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
	
	ТекстВыборкиПолейЗапроса 	= "";
	ТекстУсловияЗапроса 		= "";
	ТекстПодвалаЗапроса			= "";
	
	Отбор 						= Расшифровка.Отбор; 
	
	ИмяРазворота_ 				= ИмяРазворота;
	Периодичность 				= ""; 
	Периодичность				= ПолучитьПериодичностьОтбора(Отбор);
	
	СписокПоказателей			= СтруктураПараметров.СписокПоказателей;
	ОтборПоИзмерениям			= СтруктураПараметров.ТаблицаОтбора;
	ИмяРегистраБухгалтерии 		= СтруктураПараметров.ИмяРегистраБухгалтерии;
	РазвернутыйСуффикс 			= ?(РазвернутоеСальдо, "Развернутый", "");	
	//РазвернутыйСуффикс 			= ?(Истина, "Развернутый", "");	
	
	// Нужно определить счет-родитель разворота.
	Счет = Расшифровка.Отбор.Счет;
    	
	НачДт = "Начальный" + РазвернутыйСуффикс + "ОстатокДт";
	КонДт = "Конечный" 	+ РазвернутыйСуффикс + "ОстатокДт";
	НачКт = "Начальный" + РазвернутыйСуффикс + "ОстатокКт";
	КонКт = "Конечный" 	+ РазвернутыйСуффикс + "ОстатокКт";
	
	// Разворот по периодам может быть разный, в зависимости от периодичности разворота.
	// Необходимо выделить периодичность из наименования разворота.
	Если ЕстьПериодВИмени(ИмяРазворота)  Тогда
		
		Периодичность	= СтрЗаменить(ИмяРазворота, "Период", "");
		ИмяРазворота_ 	= "Период";
		
	КонецЕсли;
	
	//Если выполняется разворот по регистратору, то периодичность разворота также
	//должна быть "по позиции регистратора". 
	Если ИмяРазворота = "Регистратор" Тогда
		Периодичность = ИмяРазворота;
	КонецЕсли;
	
	ЭтоИзмерениеРегистраКор = Ложь;
	ЭтоИзмерениеРегистра = ЭтоИзмерениеРегистра(ИмяРегистраБухгалтерии, ИмяРазворота, ЭтоИзмерениеРегистраКор);
	
	Если (ИмяРазворота_ <> "Счет" И Лев(ИмяРазворота, 8) <> "Субконто"
	   И НЕ ЭтоИзмерениеРегистра)
	   ИЛИ ОтборИсключаетОстатки(Отбор, ИмяРегистраБухгалтерии)
	   ИЛИ (ЭтоИзмерениеРегистра И ЭтоИзмерениеРегистраКор) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	NULL КАК Счет, NULL КАК Наименование";
		
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			
			Запрос.Текст = Запрос.Текст + ",
			|	0 КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт,
			|	0 КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт,
			|	0 КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт,
			|	0 КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт";
			
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ Остатки
		|ГДЕ
		|	ИСТИНА = ЛОЖЬ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счет", СтрЗаменить(ИмяРазворота_, ".", ""));
			
		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;
	
	//Заполним текст выбора полей запроса
	Если ВозможноНаименование(ИмяРазворота_) Тогда
		ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ХозрасчетныйОстаткиИОбороты.Счет КАК Счет";
	Иначе
		ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ХозрасчетныйОстаткиИОбороты.Счет КАК Счет";
	КонецЕсли;
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + ",
		|ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачДт + " КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт,
		|ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачКт + " КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт,
		|ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + КонДт + " КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт,
		|ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + КонКт + " КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт";
		
	КонецЦикла;
	
	//Заполним текст условий запроса
	СчетчикУсловий = 0;
	
	//Если будет в отборе допреквизит - все меняется в корне
	ВОтбореДопРеквизит 		= Ложь;
	УсловиеДляПодвалаДопов 	= "";
	ТекстПодвалаЗапросаДоп	= "";
	СчетчикДопов			= 0;
	
	ТекстУсловияЗапроса 	= ТекстУсловияЗапроса + " ГДЕ ";
		
	Если Отбор.Количество() > 1 Тогда //Счет всегда присутствует в отборах и указываем его в параметрах вирт. таблицы
		
		Для Каждого СтрокаОтбора Из Отбор Цикл
			
			СчетчикУсловий = СчетчикУсловий + 1;
			
			Если СтрокаОтбора.Ключ = "Счет" Тогда
				Продолжить;
			КонецЕсли;
            			
			//ДОПРЕКВИЗИТЫ
			Если Найти(СтрокаОтбора.Ключ, "ПоДопРеквизитам") <> 0 Тогда
				
				СчетчикДопов = СчетчикДопов + 1;
				
				ЕстьУсловияОтбора = Истина;
				
				Если СтрокаОтбора.Значение.Значение = NULL Тогда
					
					ТекстУсловияЗапроса = ТекстУсловияЗапроса +
					" ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Значение Есть NULL";
					
				Иначе	
					
					ТекстУсловияЗапроса = ТекстУсловияЗапроса +
					" ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Значение = &ПараметрУсловие" + Строка(СчетчикУсловий);
					
					//сразу - параметр
					Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), СтрокаОтбора.Значение.Значение);
					
				КонецЕсли;
			
				//ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				
				Если СчетчикУсловий <> Отбор.Количество() Тогда
					ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				КонецЕсли;
				
				//УсловиеДляПодвалаДопов =  УсловиеДляПодвалаДопов + ?(ВОтбореДопРеквизит, "", "") + "
				//|(ХозрасчетныйОбороты." + СтрокаОтбора.Значение.Измерение + " 
				//			= ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Объект
				//|			И ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ" + Строка(СчетчикУсловий) + ")";
				
				ТекстПодвалаЗапросаДоп = ТекстПодвалаЗапросаДоп + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + " 
				|		ПО (ХозрасчетныйОстаткиИОбороты." + СтрокаОтбора.Значение.Измерение + " = ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Объект
				|			И ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Свойство = &СсылкаПВХ" + Строка(СчетчикУсловий) + ")";
				
				//сразу - параметр
				Запрос.УстановитьПараметр("СсылкаПВХ" + Строка(СчетчикУсловий), СтрокаОтбора.Значение.СсылкаПВХ);
				
				ВОтбореДопРеквизит = Истина;
				
			Иначе	
				
				ВремИмяРазворотаДляОтбора = ПолучитьИмяРазворотаДляОтбора(СтрокаОтбора.Ключ);
				ТекстУсловияЗапроса = ТекстУсловияЗапроса +
				" ХозрасчетныйОстаткиИОбороты." + ВремИмяРазворотаДляОтбора + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
				
				//сразу - параметр
				Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), СтрокаОтбора.Значение);
				
				Если СчетчикУсловий <> Отбор.Количество() Тогда
					ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
					
	КонецЕсли;
	
	Если Отбор.Количество() > 1 Тогда
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
	КонецЕсли;
	
	ТекстУсловияЗапроса = ТекстУсловияЗапроса + "Истина ";
	
	ТекстВиртПараметры = "";
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
	//Если СтруктураПараметров.МассивОрганизаций.Количество() > 0 Тогда
	//	ТекстВиртПараметры = ТекстВиртПараметры + "Организация В(&СписокОрганизаций) И ";
	//	//сразу - параметр
	//	Запрос.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.МассивОрганизаций);
	//КонецЕсли;
	
	Если СтруктураПараметров.МассивОрганизаций.Количество() Тогда
		ТекстВиртПараметры = ТекстВиртПараметры + "Организация В(&СписокОрганизаций) И ";
		//сразу - параметр
		Если СтруктураПараметров.ПоПериметру Тогда
			//Запрос.УстановитьПараметр("СписокОрганизаций", Новый Массив());
			Запрос.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.МассивОрганизацийВПериоде);
		Иначе
			Запрос.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.МассивОрганизаций);
		КонецЕсли;
	КонецЕсли;
// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
	
	//Если есть доппараметры - установим их
	СтрокаДопПараметры = "";
	
	Для Каждого ДопПараметр Из ОтборПоИзмерениям Цикл
		
		Если ДопПараметр.Использование Тогда
			//Сформируем условие по доппараметрам
			СчетчикУсловий = СчетчикУсловий + 1;
			
			СтрокаОтбора = бит_БухгалтерскиеОтчетыСервер.ПолучитьСтрокуОтбора(ДопПараметр.ВидСравнения, "&"+ДопПараметр.Измерение, ДопПараметр.Измерение);

			//СтрокаДопПараметры = СтрокаДопПараметры + " И " + ДопПараметр.Измерение + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
			СтрокаДопПараметры = СтрокаДопПараметры + " И " + СтрокаОтбора;
			
			Запрос.УстановитьПараметр(ДопПараметр.Измерение, ДопПараметр.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДопПараметры <> "" Тогда
		ТекстВиртПараметры = ТекстВиртПараметры + " Истина " + СтрокаДопПараметры;
	Иначе
		ТекстВиртПараметры = ТекстВиртПараметры + "Истина";
	КонецЕсли;	
			
	КонецПериодаНужен = СтруктураПараметров.ОкончаниеПериода <> Дата("00010101000000");
	
	//Заполним подвал запроса
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "ИЗ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, " + ?(КонецПериодаНужен, "&ДатаКон, ", ", ") + Периодичность;

	ГраницаКонецДня = Новый Граница(КонецДня(СтруктураПараметров.ОкончаниеПериода), ВидГраницы.Включая);
	
	ДатаНачПсевдо = СтруктураПараметров.НачалоПериода;
	ДатаКонПсевдо = ГраницаКонецДня;
	
	ЗаполнитьПсевдоПериод(Отбор, ДатаНачПсевдо, ДатаКонПсевдо);
	
	//сразу - параметр
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачПсевдо);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонПсевдо);
	
	СчетДляОтбора = Неопределено;
	
	Если Отбор.Свойство("Счет", СчетДляОтбора) Тогда
		Если СчетДляОтбора <> Неопределено Тогда
			ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ",, Счет В Иерархии (&Счет)";
			//сразу - параметр
			Запрос.УстановитьПараметр("Счет", СчетДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ", ," + ТекстВиртПараметры + ") КАК ХозрасчетныйОстаткиИОбороты";
	
	//Если ВОтбореДопРеквизит Тогда
	//	
	//	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	//	|		ПО " + УсловиеДляПодвалаДопов;
	//	
	//КонецЕсли;
	
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ТекстПодвалаЗапросаДоп;
	
	//Необходимо выбрать в качестве разреза переданное в качестве параметра поле
	ТекстВыборкиПолейЗапроса = СтрЗаменить(ТекстВыборкиПолейЗапроса, "Счет КАК Счет", ИмяРазворота_);
	ТекстВыборкиПолейЗапроса = СтрЗаменить(ТекстВыборкиПолейЗапроса, ".Счет.", "." + ИмяРазворота_ + ".");
	
	                                                           //ПОМЕСТИТЬ Остатки
	ТекстЗапроса 	= ТекстВыборкиПолейЗапроса + Символы.ПС + "ПОМЕСТИТЬ Остатки" + Символы.ПС + ТекстПодвалаЗапроса + Символы.ПС + ТекстУсловияЗапроса;
	
	// BIT AMerkulov 10072014 ++
	Если СтруктураПараметров.ПоПериметру Тогда
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
			
		Если ТаблицаОрганизаций.Количество()> 0 Тогда 
			Сч = 0 ;
			СтруктураДанных = Новый Структура("ДатаНач,ДатаКон,Номер",СтруктураПараметров.НачалоПериода, СтруктураПараметров.ОкончаниеПериода);
			Для Каждого Строка из ТаблицаОрганизаций цикл
				
				ИндексНач = МассивОрганизацийИтогиНач.Найти(Строка.Организация);
				ИндексКон = МассивОрганизацийИтогиКон.Найти(Строка.Организация);
				
				Если ИндексНач <> Неопределено И Строка.Период = СтруктураПараметров.НачалоПериода Тогда
					МассивОрганизацийИтогиНач.Удалить(ИндексНач);
					ПостроитьНачИтог = Истина;
				Иначе
					ПостроитьНачИтог = Ложь;
				КонецЕсли;
				
				Если ИндексКон <> Неопределено Тогда
					МассивОрганизацийИтогиКон.Удалить(ИндексКон);
					ПостроитьКонИтог = Истина;
				Иначе
					ПостроитьКонИтог = Ложь;
				КонецЕсли;
				
				
				Если НЕ ПостроитьКонИтог И НЕ ПостроитьНачИтог Тогда 
					Продолжить;
				КонецЕсли;
				
				
				ДатаКонец = "&ДатаКон";
				ДатаНачало = "&ДатаНач";
				
				Если Строка <> неопределено Тогда 
					
					Если Строка.ДатаОкончания > СтруктураПараметров.НачалоПериода И
						Строка.ДатаОкончания < КонецДня(СтруктураПараметров.ОкончаниеПериода) Тогда 
						ДатаКонец = "&ДатаКон"+Сч;
						Запрос.УстановитьПараметр("ДатаКон"+Сч, КонецДня(Строка.ДатаОкончания));
					Иначе 
						ДатаКонец = "&ДатаКон";
					КонецЕсли;
					
					Если Строка.Период > СтруктураПараметров.НачалоПериода Тогда 
						ДатаНачало = "&ДатаНач"+ Сч;
						Запрос.УстановитьПараметр("ДатаНач"+Сч,Строка.Период);
					Иначе 
						ДатаНачало = "&ДатаНач";
					КонецЕсли;
				КонецЕсли;
				
				
				ТекстВыборкиПолейОбъединение = ТекстВыборкиПолейЗапроса; 
				
				Если НЕ ПостроитьНачИтог Тогда
					Для Каждого ТекПоказатель Из СписокПоказателей Цикл
						
						ТекстВыборкиПолейОбъединение = СтрЗаменить(ТекстВыборкиПолейОбъединение,"ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачДт + " КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт", "0");
						ТекстВыборкиПолейОбъединение = СтрЗаменить(ТекстВыборкиПолейОбъединение,"ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачКт + " КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт", "0");
						
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ ПостроитьКонИтог Тогда
					Для Каждого ТекПоказатель Из СписокПоказателей Цикл
						
						ТекстВыборкиПолейОбъединение = СтрЗаменить(ТекстВыборкиПолейОбъединение,"ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачДт + " КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт", "0");
						ТекстВыборкиПолейОбъединение = СтрЗаменить(ТекстВыборкиПолейОбъединение,"ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачКт + " КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт", "0");
						
					КонецЦикла;
				КонецЕсли;

				// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
					
				Если Строка.Период > СтруктураПараметров.НачалоПериода Тогда
					Для Каждого ТекПоказатель Из СписокПоказателей Цикл
						
						ТекстВыборкиПолейОбъединение = СтрЗаменить(ТекстВыборкиПолейОбъединение,"ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачДт + " КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт", "0");
						ТекстВыборкиПолейОбъединение = СтрЗаменить(ТекстВыборкиПолейОбъединение,"ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачКт + " КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт", "0");
						
					КонецЦикла;
				КонецЕсли;
				
				
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ " + СтрЗаменить(ТекстВыборкиПолейОбъединение	, "РАЗРЕШЕННЫЕ", "")  + Символы.ПС;
				ТекстПодвалаОбъединение =  ТекстПодвалаЗапроса;
				ТекстПодвалаОбъединение =  СтрЗаменить(ТекстПодвалаОбъединение, "&ДатаНач", ДатаНачало);
				ТекстПодвалаОбъединение =  СтрЗаменить(ТекстПодвалаОбъединение, "&ДатаКон", ДатаКонец);
				ТекстПодвалаОбъединение =  СтрЗаменить(ТекстПодвалаОбъединение, "Организация В(&СписокОрганизаций)", "Организация =&СписокОрганизаций"+Сч);
				
				ТекстЗапроса 	= ТекстЗапроса + ТекстПодвалаОбъединение + Символы.ПС ;
				
				ТекстУсловияОбъединение = ТекстУсловияЗапроса;
				ТекстЗапроса = ТекстЗапроса + ТекстУсловияОбъединение;
				
				Запрос.УстановитьПараметр("СписокОрганизаций"+Сч,Строка.Организация);
				
				
				Сч =  Сч + 1;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	// BIT AMerkulov 10072014 --
	
	//Укажем реальный регистр бухгалтерии
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса, "Хозрасчетный", ИмяРегистраБухгалтерии);
	
	Запрос.Текст 	= ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует таблицу остатков и оборотов для расшифровки из временных таблиц остатков и оборотов.
//
&НаСервере
Функция ПолучитьОстаткиИОборотыДляПоляПоОтборуДопРеквизиты(Знач ИмяРазворота, Отбор, ИерархияЭлементов = Ложь, РазвернутоеСальдо = Ложь, ДопИмяРазворота) Экспорт
	
	Если ИмяРазворота = "СубСчет" Тогда
		ИмяРазворота = "Счет";
	КонецЕсли;
	
	ПодготовитьСтруктуруПараметровФормированияОтчетаНаСервере();
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(мАдресСтруктурыПараметров);
	
	// Подготовим менеджер временных таблиц и поместим остатки и обороты во временные таблицы.
	Запрос 							= Новый Запрос;
	МенеджерТаблиц 					= Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерТаблиц;
	СписокПоказателей 				= СтруктураПараметров.СписокПоказателей;
	СчетчикДопУсловий 				= 0;
	
	Для Каждого СтрокаОтбора Из Отбор.Отбор Цикл
		Если Найти(СтрокаОтбора.Ключ, "ПоДопРеквизитам") Тогда
			СчетчикДопУсловий = СчетчикДопУсловий + 1;
		КонецЕсли;
	КонецЦикла;
	
	ПсевдонимРазворота = "ПоДопРеквизитам" + Строка(СчетчикДопУсловий);

	
	ДопИмяРазворота = ПсевдонимРазворота;
	
	РезультатОстатковПоОтборуДопРеквизиты(Запрос, ИмяРазворота, Отбор, СтруктураПараметров, РазвернутоеСальдо, ПсевдонимРазворота);
	РезультатОборотовПоОтборуДопРеквизиты(Запрос, ИмяРазворота, Отбор, СтруктураПараметров, ПсевдонимРазворота);
		
	// Необходимо объединить данные из временных таблиц.
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   1 КАК Уровень_,
	|   ЛОЖЬ КАК ЭтоГруппа_,	
	|	Обороты.Счет"; // , Обороты.Наименование
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		Запрос.Текст = Запрос.Текст + ",
		|	Обороты." + ТекПоказатель.Значение + "ОборотДт КАК " + ТекПоказатель.Значение + "ОборотДт,
		|	Обороты." + ТекПоказатель.Значение + "ОборотКт КАК " + ТекПоказатель.Значение + "ОборотКт,
		|	0 КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт,
		|	0 КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт,
		|	0 КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт,
		|	0 КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт";
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Обороты КАК Обороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	1 КАК Уровень_,
	|   ЛОЖЬ КАК ЭтоГруппа_,	
	|	Остатки.Счет";
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		Запрос.Текст = Запрос.Текст + ",
		|	0 КАК " + ТекПоказатель.Значение + "ОборотДт,
		|	0 КАК " + ТекПоказатель.Значение + "ОборотКт,
		|	Остатки." + ТекПоказатель.Значение + "НачальныйОстатокДт КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт,
		|	Остатки." + ТекПоказатель.Значение + "НачальныйОстатокКт КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт,
		|	Остатки." + ТекПоказатель.Значение + "КонечныйОстатокДт КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт,
		|	Остатки." + ТекПоказатель.Значение + "КонечныйОстатокКт КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт";
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Остатки КАК Остатки";
	
	Если ИерархияЭлементов Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ
		|	0 КАК Уровень_,
		|   ИСТИНА КАК ЭтоГруппа_";
		
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			Запрос.Текст = Запрос.Текст + ",
			|	СУММА(" + ТекПоказатель.Значение + "ОборотДт),
			|	СУММА(" + ТекПоказатель.Значение + "ОборотКт),
			|	СУММА(" + ТекПоказатель.Значение + "НачальныйОстатокДт),
			|	СУММА(" + ТекПоказатель.Значение + "НачальныйОстатокКт),
			|	СУММА(" + ТекПоказатель.Значение + "КонечныйОстатокДт),
			|	СУММА(" + ТекПоказатель.Значение + "КонечныйОстатокКт)";
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|ПО
		|	Счет Только ИЕРАРХИЯ";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счет", ПсевдонимРазворота);
	
	Результат = Запрос.Выполнить().Выгрузить();
	// Получим сводную таблицу остатков и оборотов в разрезе разворота.
	
	СтрокаРесурсов = "";
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		СтрокаРесурсов = СтрокаРесурсов + ?(ПустаяСтрока(СтрокаРесурсов), "", ",") +
						 ТекПоказатель.Значение + "ОборотДт," +
						 ТекПоказатель.Значение + "ОборотКт," +
						 ТекПоказатель.Значение + "НачальныйОстатокДт," +
						 ТекПоказатель.Значение + "НачальныйОстатокКт," +
						 ТекПоказатель.Значение + "КонечныйОстатокДт," +
						 ТекПоказатель.Значение + "КонечныйОстатокКт";
	КонецЦикла;
					 
	Результат.Свернуть(ПсевдонимРазворота + ", Уровень_, ЭтоГруппа_ ", СтрокаРесурсов);

	Результат.Колонки.Добавить("Код");
	// Результат.Колонки.Добавить("ПоДопРеквизитам");
	
	Возврат Результат;
	
КонецФункции

// Получает обороты для поля по отбору.
// 
&НаСервереБезКонтекста 
Процедура РезультатОборотовПоОтборуДопРеквизиты(Запрос, Знач ИмяРазворота, Расшифровка, СтруктураПараметров, ПсевдонимРазворота)
	
	РегистрБухгалтерии 	= СтруктураПараметров.ИмяРегистраБухгалтерии;
	ИмяРегистра 		= РегистрБухгалтерии;
	
	ТекстВыборкиПолейЗапроса 	= "";
	ТекстУсловияЗапроса 		= "";
	ТекстПодвалаЗапроса			= "";
	
	Отбор 						= Расшифровка.Отбор; 
	ИмяРазворота_ 				= ИмяРазворота;
	Периодичность 				= ""; 
	Периодичность				= ПолучитьПериодичностьОтбора(Отбор);
	
	ОтборПоИзмерениям			= СтруктураПараметров.ТаблицаОтбора;
	СписокПоказателей			= СтруктураПараметров.СписокПоказателей;
	
	Измерение					= ИмяРазворота.Измерение;
	
	// "ВЫБРАТЬ
	// |	ЗначенияСвойствОбъектов.Значение
	// |ИЗ
	// |	РегистрБухгалтерии.Хозрасчетный.Обороты КАК ХозрасчетныйОбороты
	// |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	// |		ПО ХозрасчетныйОбороты.Субконто1 = ЗначенияСвойствОбъектов.Объект
	// |			И (ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ)"
	
	ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗначенияСвойствОбъектов.Значение КАК " + ПсевдонимРазворота;
    	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + ",
		|ХозрасчетныйОбороты." + ТекПоказатель.Значение + "ОборотДт,
		|ХозрасчетныйОбороты." + ТекПоказатель.Значение + "ОборотКт";
		
	КонецЦикла;
	
	// Заполним текст условий запроса
	
	ВОтбореДопРеквизит 		= Ложь;
	УсловиеДляПодвалаДопов 	= "";
	
	СчетчикУсловий 	= 0;
	СчетчикДопов	= 0;
	
	ТекстУсловияЗапроса 	= ТекстУсловияЗапроса + " ГДЕ ";
	ТекстПодвалаЗапросаДоп 	= "";
	
	ЕстьУсловияОтбора = Ложь;
	
	Если Отбор.Количество() > 1 Тогда // Счет всегда присутствует в отборах и указываем его в параметрах вирт. таблицы.
		
		Для Каждого СтрокаОтбора Из Отбор Цикл
			
			СчетчикУсловий 	= СчетчикУсловий + 1;
			
			Если СтрокаОтбора.Ключ = "Счет" или ЕстьПериодВИмени(СтрокаОтбора.Ключ) Тогда
				Продолжить;
			КонецЕсли;
						
			// ДОПРЕКВИЗИТЫ
			Если Найти(СтрокаОтбора.Ключ, "ПоДопРеквизитам") <> 0 Тогда
				
				СчетчикДопов = СчетчикДопов + 1;
				
				ЕстьУсловияОтбора = Истина;
				
				Если СтрокаОтбора.Значение.Значение = NULL Тогда
					
					ТекстУсловияЗапроса = ТекстУсловияЗапроса +
					" ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Значение Есть NULL";
					
				Иначе	
					
					ТекстУсловияЗапроса = ТекстУсловияЗапроса +
					" ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Значение = &ПараметрУсловие" + Строка(СчетчикУсловий);
					
					// Сразу - параметр
					Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), СтрокаОтбора.Значение.Значение);
					
				КонецЕсли;
			
				ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				
				// УсловиеДляПодвалаДопов =  УсловиеДляПодвалаДопов + ?(ВОтбореДопРеквизит, "", "") + "
				// |(ХозрасчетныйОбороты." + СтрокаОтбора.Значение.Измерение + " 
				// 				= ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Объект
				// |			И ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ" + Строка(СчетчикУсловий) + ")";
				
				ТекстПодвалаЗапросаДоп = ТекстПодвалаЗапросаДоп + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + " 
				|		ПО (ХозрасчетныйОбороты." + СтрокаОтбора.Значение.Измерение + " = ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Объект
				|			И ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Свойство = &СсылкаПВХ" + Строка(СчетчикУсловий) + ")";
				
				// Сразу - параметр
				Запрос.УстановитьПараметр("СсылкаПВХ" + Строка(СчетчикУсловий), СтрокаОтбора.Значение.СсылкаПВХ);
				
				ВОтбореДопРеквизит = Истина;
				
			Иначе
				
				ЕстьУсловияОтбора = Истина;
				ТекстУсловияЗапроса = ТекстУсловияЗапроса + " ХозрасчетныйОбороты." + ПолучитьИмяРазворотаДляОтбора(СтрокаОтбора.Ключ) + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
				
				// Сразу - параметр
				Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), СтрокаОтбора.Значение);
				
				// Если СчетчикУсловий <> Отбор.Количество() Тогда.
				ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				// КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		 		
	КонецЕсли;
	
	Если Отбор.Количество() > 1 и ЕстьУсловияОтбора Тогда
		// ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
	КонецЕсли;
	
	Если СтруктураПараметров.МассивОрганизаций.Количество() > 0 Тогда
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + "Организация В(&СписокОрганизаций) ";
		// Сразу - параметр
		Запрос.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.МассивОрганизаций);
	Иначе
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + "Истина ";
	КонецЕсли;
	
	// Если есть доппараметры - установим их
	СтрокаДопПараметры = "";
	
	Для Каждого ДопПараметр Из ОтборПоИзмерениям Цикл
		
		// Сформируем условие по доппараметрам
		
		СчетчикУсловий = СчетчикУсловий + 1;
		// BIT Amerkulov 13062014 /Использование вида сравнения ++
		//СтрокаДопПараметры = СтрокаДопПараметры + " И " + ДопПараметр.Измерение + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
		Если ДопПараметр.бит_ВидСравнения = "В списке" Тогда
			СтрокаДопПараметры = СтрокаДопПараметры + " И " + ДопПараметр.Измерение  + " В (&ПараметрУсловие" + Строка(СчетчикУсловий) + ")";	
		Иначе		
			СтрокаДопПараметры = СтрокаДопПараметры + " И " + ДопПараметр.Измерение + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
		КонецЕсли;
		// BIT Amerkulov 13062014 /Использование вида сравнения --
		Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), ДопПараметр.Значение);
		
	КонецЦикла;
	
	ТекстУсловияЗапроса = ТекстУсловияЗапроса + СтрокаДопПараметры;
	
	КонецПериодаНужен = СтруктураПараметров.ОкончаниеПериода <> Дата("00010101000000");
	
	// Заполним подвал запроса
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "ИЗ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, " + ?(КонецПериодаНужен, "&ДатаКон, ", ", ") + Периодичность;
	
	ГраницаКонецДня = Новый Граница(КонецДня(СтруктураПараметров.ОкончаниеПериода), ВидГраницы.Включая);
	
	// Нужно ограничить период по первому верхнему в отборе.
	ДатаНачПсевдо = СтруктураПараметров.НачалоПериода;
	ДатаКонПсевдо = ГраницаКонецДня;
	
	ЗаполнитьПсевдоПериод(Отбор, ДатаНачПсевдо, ДатаКонПсевдо);
	
	// Сразу - параметр
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачПсевдо);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонПсевдо);
	
	СчетДляОтбора 		= Неопределено;
	
	Если Отбор.Свойство("Счет", СчетДляОтбора) Тогда
		
		Если СчетДляОтбора <> Неопределено Тогда
			ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ", Счет В Иерархии (&Счет)";
			// Сразу - параметр
			Запрос.УстановитьПараметр("Счет", СчетДляОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ") КАК ХозрасчетныйОбороты";
	
	// Если ВОтбореДопРеквизит Тогда
	// 	
	// 	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "
	// 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	// 	|		ПО " + УсловиеДляПодвалаДопов + " ИЛИ (ХозрасчетныйОбороты." + Измерение + " = ЗначенияСвойствОбъектов.Объект
	// 	|			И ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ)";
	// 	
	// Иначе
		
		ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
 		|		ПО ХозрасчетныйОбороты." + Измерение + " = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ)";
		
		ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ТекстПодвалаЗапросаДоп;
		
	// КонецЕсли;
		
	Запрос.УстановитьПараметр("СсылкаПВХ", ИмяРазворота.СсылкаПВХ);
	
	ТекстЗапроса 	= ТекстВыборкиПолейЗапроса + Символы.ПС + "ПОМЕСТИТЬ Обороты" + Символы.ПС + ТекстПодвалаЗапроса + Символы.ПС + ТекстУсловияЗапроса;
	
	// Укажем реальный регистр бухгалтерии
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса, "Хозрасчетный", СтруктураПараметров.ИмяРегистраБухгалтерии);
	
	Запрос.Текст 	= ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Получает остатки для поля по отбору.
// 
&НаСервереБезКонтекста
Процедура РезультатОстатковПоОтборуДопРеквизиты(Запрос, Знач ИмяРазворота, Расшифровка, СтруктураПараметров, РазвернутоеСальдо = Ложь, ПсевдонимРазворота)
	
	ТекстВыборкиПолейЗапроса 	= "";
	ТекстУсловияЗапроса 		= "";
	ТекстПодвалаЗапроса			= "";
	
	Отбор 						= Расшифровка.Отбор; 
	
	ИмяРазворота_ 				= ИмяРазворота;
	Периодичность 				= ""; 
	Периодичность				= ПолучитьПериодичностьОтбора(Отбор);
	
	СписокПоказателей			= СтруктураПараметров.СписокПоказателей;
	ОтборПоИзмерениям			= СтруктураПараметров.ТаблицаОтбора;
	ИмяРегистраБухгалтерии 		= СтруктураПараметров.ИмяРегистраБухгалтерии;
	РазвернутыйСуффикс 			= ?(РазвернутоеСальдо, "Развернутый", "");	
	// РазвернутыйСуффикс 			= ?(Истина, "Развернутый", "");	
	Измерение					= ИмяРазворота.Измерение;
	
	// Нужно определить счет-родитель разворота.
	Счет = Расшифровка.Отбор.Счет;
    	
	НачДт = "Начальный" + РазвернутыйСуффикс + "ОстатокДт";
	КонДт = "Конечный" 	+ РазвернутыйСуффикс + "ОстатокДт";
	НачКт = "Начальный" + РазвернутыйСуффикс + "ОстатокКт";
	КонКт = "Конечный" 	+ РазвернутыйСуффикс + "ОстатокКт";
	
	// Разворот по периодам может быть разный, в зависимости от периодичности разворота.
	// Необходимо выделить периодичность из наименования разворота.
	Если ЕстьПериодВИмени(ИмяРазворота)  Тогда
		
		Периодичность	= СтрЗаменить(ИмяРазворота, "Период", "");
		ИмяРазворота_ 	= "Период";
		
	КонецЕсли;
	
	// Если выполняется разворот по регистратору, то периодичность разворота также
	// должна быть "по позиции регистратора". 
	Если ИмяРазворота = "Регистратор" Тогда
		Периодичность = ИмяРазворота;
	КонецЕсли;
	
	ЭтоИзмерениеРегистраКор = Ложь;
	ЭтоИзмерениеРегистра = ЭтоИзмерениеРегистра(ИмяРегистраБухгалтерии, ИмяРазворота.Измерение, ЭтоИзмерениеРегистраКор);
	
	Если (ИмяРазворота_ <> "Счет" И Лев(Измерение, 8) <> "Субконто"
	   И НЕ ЭтоИзмерениеРегистра)
	   ИЛИ ОтборИсключаетОстатки(Отбор, ИмяРегистраБухгалтерии)
	   ИЛИ (ЭтоИзмерениеРегистра И ЭтоИзмерениеРегистраКор) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	NULL КАК Счет, NULL КАК " + ПсевдонимРазворота;
		
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			
			Запрос.Текст = Запрос.Текст + ",
			|	0 КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт,
			|	0 КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт,
			|	0 КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт,
			|	0 КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт";
			
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ Остатки
		|ГДЕ
		|	ИСТИНА = ЛОЖЬ";
		
		// Запрос.Текст = СтрЗаменить(Запрос.Текст, "Счет", СтрЗаменить(ИмяРазворота_, ".", ""));
			
		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;
	
	// Заполним текст выбора полей запроса
	ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗначенияСвойствОбъектов.Значение КАК " + ПсевдонимРазворота;
	
	Для Каждого ТекПоказатель Из СписокПоказателей Цикл
		
		ТекстВыборкиПолейЗапроса = ТекстВыборкиПолейЗапроса + ",
		|ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачДт + " КАК " + ТекПоказатель.Значение + "НачальныйОстатокДт,
		|ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + НачКт + " КАК " + ТекПоказатель.Значение + "НачальныйОстатокКт,
		|ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + КонДт + " КАК " + ТекПоказатель.Значение + "КонечныйОстатокДт,
		|ХозрасчетныйОстаткиИОбороты." + ТекПоказатель.Значение + КонКт + " КАК " + ТекПоказатель.Значение + "КонечныйОстатокКт";
		
	КонецЦикла;
	
	// Заполним текст условий запроса
	СчетчикУсловий 	= 0;
	СчетчикДопов	= 0;
	
	// Если будет в отборе допреквизит - все меняется в корне.
	ВОтбореДопРеквизит 		= Ложь;
	УсловиеДляПодвалаДопов 	= "";
	
	ТекстУсловияЗапроса = ТекстУсловияЗапроса + " ГДЕ ";
	ТекстПодвалаЗапросаДоп = "";
	
	Если Отбор.Количество() > 1 Тогда // Счет всегда присутствует в отборах и указываем его в параметрах вирт. таблицы.
		
		Для Каждого СтрокаОтбора Из Отбор Цикл
			
			СчетчикУсловий = СчетчикУсловий + 1;
			
			Если СтрокаОтбора.Ключ = "Счет" Тогда
				Продолжить;
			КонецЕсли;
			
			// ДОПРЕКВИЗИТЫ
			Если Найти(СтрокаОтбора.Ключ, "ПоДопРеквизитам") <> 0 Тогда
				
				СчетчикДопов = СчетчикДопов + 1;
				
				ЕстьУсловияОтбора = Истина;
				
				Если СтрокаОтбора.Значение.Значение = NULL Тогда
					
					ТекстУсловияЗапроса = ТекстУсловияЗапроса +
					" ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Значение Есть NULL";
					
				Иначе	
					
					ТекстУсловияЗапроса = ТекстУсловияЗапроса +
					" ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Значение = &ПараметрУсловие" + Строка(СчетчикУсловий);
					
					// Сразу - параметр
					Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), СтрокаОтбора.Значение.Значение);
					
				КонецЕсли;
			
				// ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				
				Если СчетчикУсловий <> Отбор.Количество() Тогда
					ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				КонецЕсли;
				
				// УсловиеДляПодвалаДопов =  УсловиеДляПодвалаДопов + ?(ВОтбореДопРеквизит, "", "") + "
				// |(ХозрасчетныйОбороты." + СтрокаОтбора.Значение.Измерение + " 
				// 					= ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Объект
				// |			И ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ" + Строка(СчетчикУсловий) + ")";
				
				ТекстПодвалаЗапросаДоп = ТекстПодвалаЗапросаДоп + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + " 
				|		ПО (ХозрасчетныйОстаткиИОбороты." + СтрокаОтбора.Значение.Измерение + " = ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Объект
				|			И ЗначенияСвойствОбъектов" + Строка(СчетчикДопов) + ".Свойство = &СсылкаПВХ" + Строка(СчетчикУсловий) + ")";
				
				// Сразу - параметр
				Запрос.УстановитьПараметр("СсылкаПВХ" + Строка(СчетчикУсловий), СтрокаОтбора.Значение.СсылкаПВХ);
				
				ВОтбореДопРеквизит = Истина;
				
			Иначе
				
				ВремИмяРазворотаДляОтбора = ПолучитьИмяРазворотаДляОтбора(СтрокаОтбора.Ключ);
				ТекстУсловияЗапроса = ТекстУсловияЗапроса +
				" ХозрасчетныйОстаткиИОбороты." + ВремИмяРазворотаДляОтбора + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
				
				// Сразу - параметр
				Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), СтрокаОтбора.Значение);
				
				Если СчетчикУсловий <> Отбор.Количество() Тогда
					ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
					
	КонецЕсли;
	
	Если Отбор.Количество() > 1 Тогда
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + " И ";
	КонецЕсли;
	
	ТекстУсловияЗапроса = ТекстУсловияЗапроса + "Истина ";
	
	ТекстВиртПараметры = "";
	
	Если СтруктураПараметров.МассивОрганизаций.Количество() > 0 Тогда
		ТекстВиртПараметры = ТекстВиртПараметры + "Организация В(&СписокОрганизаций) И ";
		// Сразу - параметр
		Запрос.УстановитьПараметр("СписокОрганизаций", СтруктураПараметров.МассивОрганизаций);
	КонецЕсли;
	
	// Если есть доппараметры - установим их
	СтрокаДопПараметры = "";
	
	Для Каждого ДопПараметр Из ОтборПоИзмерениям Цикл
		// Сформируем условие по доппараметрам
		
		СчетчикУсловий = СчетчикУсловий + 1;
		// BIT Amerkulov 13062014 /Использование вида сравнения ++
		//СтрокаДопПараметры = СтрокаДопПараметры + " И " + ДопПараметр.Измерение + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
		Если ДопПараметр.бит_ВидСравнения = "В списке" Тогда
			СтрокаДопПараметры = СтрокаДопПараметры + " И " + ДопПараметр.Измерение + " В (&ПараметрУсловие" + Строка(СчетчикУсловий) + ")";	
		Иначе		
			СтрокаДопПараметры = СтрокаДопПараметры + " И " + ДопПараметр.Измерение + " = &ПараметрУсловие" + Строка(СчетчикУсловий);
		КонецЕсли;
		// BIT Amerkulov 13062014 /Использование вида сравнения --
		
		Запрос.УстановитьПараметр("ПараметрУсловие" + Строка(СчетчикУсловий), ДопПараметр.Значение);
	КонецЦикла;
	
	Если СтрокаДопПараметры <> "" Тогда
		ТекстВиртПараметры = ТекстВиртПараметры + " Истина " + СтрокаДопПараметры;
	Иначе
		ТекстВиртПараметры = ТекстВиртПараметры + "Истина";
	КонецЕсли;	
			
	КонецПериодаНужен = СтруктураПараметров.ОкончаниеПериода <> Дата("00010101000000");
	
	// Заполним подвал запроса
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "ИЗ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, " + ?(КонецПериодаНужен, "&ДатаКон, ", ", ") + Периодичность;

	ГраницаКонецДня = Новый Граница(КонецДня(СтруктураПараметров.ОкончаниеПериода), ВидГраницы.Включая);
	
	ДатаНачПсевдо = СтруктураПараметров.НачалоПериода;
	ДатаКонПсевдо = ГраницаКонецДня;
	
	ЗаполнитьПсевдоПериод(Отбор, ДатаНачПсевдо, ДатаКонПсевдо);
	
	// Сразу - параметр
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачПсевдо);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонПсевдо);
	
	СчетДляОтбора = Неопределено;
	
	Если Отбор.Свойство("Счет", СчетДляОтбора) Тогда
		Если СчетДляОтбора <> Неопределено Тогда
			ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ",, Счет В Иерархии (&Счет)";
			// Сразу - параметр
			Запрос.УстановитьПараметр("Счет", СчетДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ", ," + ТекстВиртПараметры + ") КАК ХозрасчетныйОстаткиИОбороты";
	
	// Если ВОтбореДопРеквизит Тогда
	// 	
	// 	ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "
	// 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	// 	|		ПО " + УсловиеДляПодвалаДопов + " ИЛИ (ХозрасчетныйОстаткиИОбороты." 
	// 					+ Измерение + " = ЗначенияСвойствОбъектов.Объект
	// 	|			И ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ)";
	// 	
	// Иначе
		
		ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ХозрасчетныйОстаткиИОбороты." + Измерение + " = ЗначенияСвойствОбъектов.Объект
		|			И (ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ)";
		
		ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + ТекстПодвалаЗапросаДоп;
		
	// КонецЕсли;
	
	Запрос.УстановитьПараметр("СсылкаПВХ", ИмяРазворота.СсылкаПВХ);
	
	// Необходимо выбрать в качестве разреза переданное в качестве параметра поле
	// ТекстВыборкиПолейЗапроса = СтрЗаменить(ТекстВыборкиПолейЗапроса, "Счет КАК Счет", ИмяРазворота_);
	// ТекстВыборкиПолейЗапроса = СтрЗаменить(ТекстВыборкиПолейЗапроса, ".Счет.", "." + ИмяРазворота_ + ".");
		
	// ТекстПодвалаЗапроса = ТекстПодвалаЗапроса + "
	// |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	// |		ПО ХозрасчетныйОстаткиИОбороты." + Измерение + " = ЗначенияСвойствОбъектов.Объект
	// |			И (ЗначенияСвойствОбъектов.Свойство = &СсылкаПВХ)";
	// 
	// Запрос.УстановитьПараметр("СсылкаПВХ", ИмяРазворота.СсылкаПВХ);
	
	                                                           // ПОМЕСТИТЬ Остатки
	ТекстЗапроса 	= ТекстВыборкиПолейЗапроса + Символы.ПС + "ПОМЕСТИТЬ Остатки" + Символы.ПС + ТекстПодвалаЗапроса + Символы.ПС + ТекстУсловияЗапроса;
	
	// Укажем реальный регистр бухгалтерии
	ТекстЗапроса 	= СтрЗаменить(ТекстЗапроса, "Хозрасчетный", ИмяРегистраБухгалтерии);
	
	Запрос.Текст 	= ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Открывает форму параметров сортировки и сортирует таблицу, в соответствии с
// выбранными параметрами.
// 
&НаКлиенте
Процедура СортироватьТаблицу(АдресВХранилище, Расшифровка, ИмяРазворота, МножественныйРазворот)
	
	ПараметрыФормы 	= Новый Структура("ТаблицаСортировки", АдресВХранилище);
	// Изменение кода. Начало. 18.11.2014{{
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Расшифровка", Расшифровка);
	ДополнительныеПараметры.Вставить("ИмяРазворота", ИмяРазворота);
	ДополнительныеПараметры.Вставить("МножественныйРазворот", МножественныйРазворот);
	Оповещение = Новый ОписаниеОповещения("СортировкаТаблицыЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	
	ОткрытьФорму("Отчет.бит_осв_ИнтерактивнаяОборотноСальдоваяВедомость.Форма.ФормаСортировки"
					, ПараметрыФормы, ЭтаФорма, , , ,Оповещение , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
					
	// Изменение кода. Конец. 18.11.2014}}				
	 
КонецПроцедуры

// Обработчик оповещения завершения сортировки таблицы.
// 
&НаКлиенте 
Процедура СортировкаТаблицыЗавершение(АдресОтсортированнойТаблицы, ДополнительныеДанные) Экспорт

	Если ЭтоАдресВременногоХранилища(АдресОтсортированнойТаблицы) Тогда
		
		АдресВХранилище = ПерепаковатьТаблицу(АдресОтсортированнойТаблицы);
		ОбработатьВыбраннуюРасшифровку(ДополнительныеДанные.Расшифровка, ДополнительныеДанные.ИмяРазворота, ДополнительныеДанные.МножественныйРазворот, АдресВХранилище);  
		
	КонецЕсли; 				
	
КонецПроцедуры	// СортировкаТаблицыЗавершение

// Функция повторно упаковывает таблицу во временное хранилище. 
// Необходимо для предотвращения "исчезания" таблицы из временного хранилища.
// 
// Параметры:
//  АдресОтсортированнойТаблицы - Строка.
// 
// Возвращаемое значение:
//  АдресВХранилище - Строка.
// 
&НаСервере
Функция ПерепаковатьТаблицу(АдресОтсортированнойТаблицы)
	
	ТаблицаСортировки = ПолучитьИзВременногоХранилища(АдресОтсортированнойТаблицы);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаСортировки, УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции // ПерепаковатьТаблицу()

// Формирует таблицу проводок для документа, чьи проводки пользователь хочет увидеть.
// 
&НаСервере
Функция ПолучитьТаблицуПоПроводкам(Расшифровка, ИмяРазворота)
	
	ПодготовитьСтруктуруПараметровФормированияОтчетаНаСервере();
	СтруктураПараметров = ПолучитьИзВременногоХранилища(мАдресСтруктурыПараметров);
	ИмяРегистра			= СтруктураПараметров.ИмяРегистраБухгалтерии;
	
	Документ = Расшифровка.Регистратор;
	
	ТекстПоПоказателям 	= "";
	ТекстПоСубконто		= "";
	КоличествоСубконто 	= Метаданные.РегистрыБухгалтерии[ИмяРегистра].ПланСчетов.МаксКоличествоСубконто;
	
	Для Жи = 1 По КоличествоСубконто Цикл
		
		ТекстПоСубконто = ТекстПоСубконто + ",
		|" + ИмяРегистра + "ДвиженияССубконто.СубконтоДт" + Строка(Жи) + " КАК СубконтоДт" + Строка(Жи);
		ТекстПоСубконто = ТекстПоСубконто + ",
		|" + ИмяРегистра + "ДвиженияССубконто.СубконтоКт" + Строка(Жи) + " КАК СубконтоКт" + Строка(Жи);
		
	КонецЦикла;
	
	Для Каждого Показатель Из СтруктураПараметров.СписокПоказателей Цикл
		
		Если БалансовыйПоказатель(Показатель, ИмяРегистра) Тогда
			ТекстПоПоказателям = ТекстПоПоказателям + ",
			|" + ИмяРегистра + "ДвиженияССубконто." + Показатель.Значение + " КАК " + Показатель.Значение + "ОборотДт";
		Иначе
			ТекстПоПоказателям = ТекстПоПоказателям + ",
			|" + ИмяРегистра + "ДвиженияССубконто." + Показатель.Значение + "Дт КАК " + Показатель.Значение + "ОборотДт";
			ТекстПоПоказателям = ТекстПоПоказателям + ",
			|" + ИмяРегистра + "ДвиженияССубконто." + Показатель.Значение + "Кт КАК " + Показатель.Значение + "ОборотКт";
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим таблицу движений по заданному регистру.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание,
	|	1 КАК Уровень_ " + ТекстПоПоказателям + ТекстПоСубконто + "
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор) КАК ХозрасчетныйДвиженияССубконто");
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Запрос.Текст 	= СтрЗаменить(Запрос.Текст, "Хозрасчетный", ИмяРегистра);
	Результат 		= Запрос.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("ПоПроводкам");
	
	Для Каждого Проводка Из Результат Цикл
		Проводка.ПоПроводкам = "Дт " + Проводка.СчетДт + " Кт " + Проводка.СчетКт + Символы.ПС + СокрЛП(Проводка.Содержание);
	КонецЦикла;
	
	РезультатПоПроводкам = Новый ТаблицаЗначений;
	РезультатПоПроводкам.Колонки.Добавить("ПоПроводкам");
	РезультатПоПроводкам.Колонки.Добавить("Содержание");
	РезультатПоПроводкам.Колонки.Добавить("СчетДт");
	РезультатПоПроводкам.Колонки.Добавить("СубконтоДт");
	РезультатПоПроводкам.Колонки.Добавить("ПоказателиДт");
	РезультатПоПроводкам.Колонки.Добавить("СчетКт");
	РезультатПоПроводкам.Колонки.Добавить("СубконтоКт");
	РезультатПоПроводкам.Колонки.Добавить("ПоказателиКт");
	
	Для Каждого Элемент Из Результат Цикл
		
		// Выведем счета и субконто
		НовРезультатПоПроводкам = РезультатПоПроводкам.Добавить();
		НовРезультатПоПроводкам.СчетДт = Элемент.СчетДт;
		НовРезультатПоПроводкам.СчетКт = Элемент.СчетКт;
		
		СубконтоДт = "";
		СубконтоКт = "";
		
		Для Жи = 1 По КоличествоСубконто Цикл
			СубконтоДт = СубконтоДт + Строка(Элемент["СубконтоДт" + Строка(Жи)]) + "
			|";
			СубконтоКт = СубконтоКт + Строка(Элемент["СубконтоКт" + Строка(Жи)]) + "
			|";
		КонецЦикла;
		
		ПоказателиДт = "";
		ПоказателиКт = "";
		
		Для Каждого Показатель Из СтруктураПараметров.СписокПоказателей Цикл
			
			Если БалансовыйПоказатель(Показатель, ИмяРегистра) Тогда
				ЗначениеКт = Элемент[Показатель.Значение + "ОборотДт"];
				ПоказателиДт = ПоказателиДт + "" + "
				|";
				ПоказателиКт = ПоказателиКт + Строка(?(ЗначениеКт = 0, "", ЗначениеКт)) + "
				|";
            Иначе
				ЗначениеДт = Элемент[Показатель.Значение + "ОборотДт"];
				ЗначениеКт = Элемент[Показатель.Значение + "ОборотКт"];
				ПоказателиДт = ПоказателиДт + Строка(?(ЗначениеДт = 0, "", ЗначениеДт)) + "
				|";
				ПоказателиКт = ПоказателиКт + Строка(?(ЗначениеКт = 0, "", ЗначениеКт)) + "
				|";
			КонецЕсли;
			
		КонецЦикла;
		
		НовРезультатПоПроводкам.СубконтоДт 		= СубконтоДт;
		НовРезультатПоПроводкам.СубконтоКт 		= СубконтоКт;
		НовРезультатПоПроводкам.ПоказателиДт 	= ПоказателиДт;
		НовРезультатПоПроводкам.ПоказателиКт 	= ПоказателиКт;
		НовРезультатПоПроводкам.Содержание = Элемент.Содержание;
		
	КонецЦикла;
	
	Возврат РезультатПоПроводкам;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОсновные

// Обработка расшифровки поля табличного документа "ДокументРезультат".
// 
&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		ПоказатьЗначение( , Расшифровка);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка 	= Ложь;
	МножественныйРазворот	= Ложь;
	   
	// НУНВ...
	// ЗапросРасшифровки 		= ПолучитьИмяРазворота(Отчет.РегистрБухгалтерии, Расшифровка, МножественныйРазворот);
	СписокРазворотов = ПолучитьСписокВозможныхРазворотов(Отчет.РегистрБухгалтерии, Расшифровка, МножественныйРазворот);	
	Если СписокРазворотов = Неопределено Тогда
		ИмяРазворота = Неопределено;
	Иначе
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Расшифровка"			 , Расшифровка);
		ДопПараметры.Вставить("МножественныйРазворот", МножественныйРазворот);
		ОбработчикВСР1 = Новый ОписаниеОповещения("ОбработкаВыбораИзМеню1", ЭтаФорма, ДопПараметры);
		ПоказатьВыборИзМеню(ОбработчикВСР1, СписокРазворотов);	
	КонецЕсли;  
	// ...НУНВ
					
КонецПроцедуры // ДокументРезультатОбработкаРасшифровки()

// Процедура - завершение выбора из меню расшифровки 1.
// 
&НаКлиенте
Процедура ОбработкаВыбораИзМеню1(ЗапросРасшифровки, ДопПараметры) Экспорт
	
	АдресВХранилище	= Неопределено;
	Расшифровка 		  = ДопПараметры.Расшифровка;
	МножественныйРазворот = ДопПараметры.МножественныйРазворот;
		
	Если ЗапросРасшифровки = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	ИмяРазворота = ЗапросРасшифровки.Значение;
	
	Если ИмяРазворота = "МножественныйРазворот" Тогда
		
		МножественныйРазворот = Истина;
		
		// НУНВ...
		// ЗапросРасшифровки = ПолучитьИмяРазворота(Отчет.РегистрБухгалтерии, Расшифровка, МножественныйРазворот);
		СписокРазворотов = ПолучитьСписокВозможныхРазворотов(Отчет.РегистрБухгалтерии, Расшифровка, МножественныйРазворот);	
		Если СписокРазворотов = Неопределено Тогда
			ИмяРазворота = Неопределено;
		Иначе
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Расшифровка"			 , Расшифровка);
			ДопПараметры.Вставить("МножественныйРазворот", МножественныйРазворот);
			ОбработчикВСР2 = Новый ОписаниеОповещения("ОбработкаВыбораИзМеню2", ЭтаФорма, ДопПараметры);
			ПоказатьВыборИзМеню(ОбработчикВСР2, СписокРазворотов);	
		КонецЕсли;  

		// ...НУНВ
				
	Иначе
		
		ЗавершениеОбработкиРасшифровки(Расшифровка, ИмяРазворота, МножественныйРазворот, АдресВХранилище);
		
	КонецЕсли;
	 	
КонецПроцедуры // ОбработкаВыбораИзМеню1()

// Процедура - завершение выбора из меню расшифровки 2.
// 
&НаКлиенте
Процедура ОбработкаВыбораИзМеню2(ЗапросРасшифровки, ДопПараметры) Экспорт
	
	АдресВХранилище	= Неопределено;
	Расшифровка 		  = ДопПараметры.Расшифровка;
	МножественныйРазворот = ДопПараметры.МножественныйРазворот;
	
	Если ЗапросРасшифровки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяРазворота = ЗапросРасшифровки.Значение;
	
	ЗавершениеОбработкиРасшифровки(Расшифровка, ИмяРазворота, МножественныйРазворот, АдресВХранилище);
		
КонецПроцедуры // ОбработкаВыбораИзМеню2()

&НаКлиенте
Процедура ЗавершениеОбработкиРасшифровки(Расшифровка, ИмяРазворота, МножественныйРазворот, АдресВХранилище) 
	
	Если ИмяРазворота = "ПоРеквизитам" Тогда
		
		// Функция ПолучитьИмяРазворотаПоРеквизитам
		ПараметрыФормы = Новый Структура("ОснованиеРазворотов", ОснованияРазворотовПоРеквизитам); 		
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("Расшифровка"			 , Расшифровка);
		ДопПараметры.Вставить("МножественныйРазворот", МножественныйРазворот); 		
		ОбработчикИР = Новый ОписаниеОповещения("ОбработчикПолученияИмяРеквизитаЗавершение", ЭтотОбъект, ДопПараметры);		
		ОткрытьФорму("Отчет.бит_осв_ИнтерактивнаяОборотноСальдоваяВедомость.Форма.ФормаВыбораРеквизита"
					, ПараметрыФормы, ЭтаФорма, , , , ОбработчикИР, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		
		Если ИмяРазворота = "ОткрытьЭлемент" Тогда
			ОткрытьРасшифровку(Расшифровка);
			Возврат;
		КонецЕсли;
		
		// Изменение кода. Начало. 18.11.2014{{
		Если ИмяРазворота = "Сортировка" Тогда 			
			// Подготовим таблицу для сортировки
			АдресВХранилище = ПодготовитьТаблицуДляСортировки(Расшифровка);
			// Откроем диалоговое окно сортировки
			СортироватьТаблицу(АдресВХранилище, Расшифровка, ИмяРазворота, МножественныйРазворот);
			
		Иначе
			
			ОбработатьВыбраннуюРасшифровку(Расшифровка, ИмяРазворота, МножественныйРазворот, АдресВХранилище);
			
		КонецЕсли;
		// Изменение кода. Конец. 18.11.2014}}

	
	КонецЕсли;
		
КонецПроцедуры // ЗавершениеОбработкиРасшифровки()

&НаКлиенте
Процедура ОбработчикПолученияИмяРеквизитаЗавершение(ИмяРазворота, ДопПараметры) Экспорт
	
	Если ИмяРазворота = "ОткрытьЭлемент" Тогда
		ОткрытьРасшифровку(ДопПараметры.Расшифровка);
		Возврат;
	КонецЕсли;
	
	АдресВХранилище	= Неопределено;
	
	// Изменение кода. Начало. 18.11.2014{{
	Если ИмяРазворота = "Сортировка" Тогда 		
		// Подготовим таблицу для сортировки
		АдресВХранилище = ПодготовитьТаблицуДляСортировки(ДопПараметры.Расшифровка);
		// Откроем диалоговое окно сортировки
		СортироватьТаблицу(АдресВХранилище, ДопПараметры.Расшифровка, ИмяРазворота, ДопПараметры.МножественныйРазворот);
	Иначе	
		
		ОбработатьВыбраннуюРасшифровку(ДопПараметры.Расшифровка, ИмяРазворота, ДопПараметры.МножественныйРазворот, АдресВХранилище);  
		
	КонецЕсли;
    // Изменение кода. Конец. 18.11.2014}}
	
	
КонецПроцедуры // ОбработчикПолученияИмяРеквизитаЗавершение()

// Формирует отчет "Оборотно-сальдовая ведомость" и выводит результат в "ДокументРезультат".
// 
&НаСервере
Процедура СформироватьОборотноСальдовуюВедомостьНаСервере(ДокументРезультат
														  , ПоказыватьЗаголовок = Истина
														  , ВысотаЗаголовка = 0
														  , Знач ПоЗабалансовымСчетам = Ложь)
														  
	СтруктураПараметров 	= ПолучитьИзВременногоХранилища(мАдресСтруктурыПараметров);
	СтруктураПараметровОСВ 	= ПолучитьСтруктуруПараметровВыводаОСВ(СтруктураПараметров, СтруктураПараметров.ОтчетОбъектМакет, СтруктураПараметров.ПоЗабалансовымСчетам);
	
	Если мАдресГлобальногоПредставления = Неопределено Тогда
		// Необходимо подготовить глобальное представление ОСВ (начальное).
		ПодготовитьГлобальноеПредставлениеОСВ(СтруктураПараметров, СтруктураПараметровОСВ);
	Иначе
		
		// Скопируем глобальное представление отчета.
		КопияГлобальногоПредставления = ПолучитьИзВременногоХранилища(мАдресГлобальногоПредставления).Скопировать();
		// Необходимо сформировать новое глобальное представление в соответствии с имеющимися расшифровками.
		ПодготовитьГлобальноеПредставлениеОСВ(СтруктураПараметров, СтруктураПараметровОСВ);
		// В цикле пройдем по копии глобального представления, и, находя расшифровки, выведем их в
		// новом глобальном представлении.
		ПривестиГлобальноеПредставлениеКСтруктуреКопии(ПолучитьИзВременногоХранилища(мАдресГлобальногоПредставления), КопияГлобальногоПредставления);
				
	КонецЕсли;
	
	// Сформируем отчет по глобальному представлению.
	СформироватьОСВПоГлобальномуПредставлениюНаСервере(ДокументРезультат, СтруктураПараметров, СтруктураПараметровОСВ,,);
			
КонецПроцедуры

// Инициализация структуры глобального представления ОСВ.
// 
&НаСервере
Процедура ИнициализацияГлобальногоПредставления(мГлобальнаяТаблицаОСВ, СписокПоказателей)
	
	Если мГлобальнаяТаблицаОСВ <> Неопределено и мГлобальнаяТаблицаОСВ.Колонки.Количество() > 0 Тогда
		мГлобальнаяТаблицаОСВ.Очистить();
	Иначе
		
		мГлобальнаяТаблицаОСВ = Новый ТаблицаЗначений;
		
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("Валюта");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("ВалютаПредставление");
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "КонечныйОстатокДт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "КонечныйОстатокКт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "НачальныйОстатокДт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "НачальныйОстатокКт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "КонечныйРазвернутыйОстатокДт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "КонечныйРазвернутыйОстатокКт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "НачальныйРазвернутыйОстатокДт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "НачальныйРазвернутыйОстатокКт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "ОборотДт");
			мГлобальнаяТаблицаОСВ.Колонки.Добавить(ТекПоказатель.Значение + "ОборотКт");
		КонецЦикла;
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("Счет");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("СчетЗабалансовый");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("СчетКод");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("СчетНаименование");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("СчетПредставление");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("ИмяМакета");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("Уровень");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("Расшифровка");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("Отбор");
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("ПоСубсчетам"		, Новый ОписаниеТипов("Булево"));
		мГлобальнаяТаблицаОСВ.Колонки.Добавить("РазвернутоеСальдо"	, Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет стартовое формирование глобального представления ОСВ.
// 
&НаСервере
Процедура ПодготовитьГлобальноеПредставлениеОСВ(СтруктураПараметров, СтруктураПараметровОСВ)
	
	ТаблицаОСВ 	= Неопределено;
	ТаблицаОСВ 	= Новый ТаблицаЗначений;
	Запрос 		= СформироватьЗапрос(СтруктураПараметров, СтруктураПараметровОСВ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Счет");
	
	Пока Выборка.Следующий() Цикл
		
		Уровень 	= Выборка.Уровень();
		Расшифровка = ДобавитьВГлобальноеПредставление(ТаблицаОСВ, Выборка, "Счет", , СтруктураПараметров.СписокПоказателей);
		
	КонецЦикла;	
	
	// МАдресГлобальногоПредставления = ПоместитьВоВременноеХранилище(ТаблицаОСВ, Новый УникальныйИдентификатор);
	
	Если мАдресГлобальногоПредставления <> Неопределено Тогда
		УдалитьИзВременногоХранилища(мАдресГлобальногоПредставления);
	КонецЕсли;
	
	мАдресГлобальногоПредставления = ПоместитьВоВременноеХранилище(ТаблицаОСВ, УникальныйИдентификатор);
	
КонецПроцедуры

// Формирует отчет "Оборотно-сальдовая ведомость" и выводит результат в "ДокументРезультат".
// 
&НаСервере
Процедура СформироватьОСВПоГлобальномуПредставлениюНаСервере(ДокументРезультат
														  , СтруктураПараметров
														  , СтруктураПараметровОСВ
														  , ПоказыватьЗаголовок = Истина
														  , ВысотаЗаголовка = 0)
	
	ДокументРезультат.Очистить(); 
	
	ГлобальнаяТаблицаОСВ = ПолучитьИзВременногоХранилища(мАдресГлобальногоПредставления);
	
	СформироватьИВывестиЗаголовокОтчета(СтруктураПараметров, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок);
	
	Макет = СтруктураПараметров.ОтчетОбъектМакет;
		
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	
	ДокументРезультат.Вывести(ЗаголовокОтчета, 1);
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	// Используемые области макета.
	ОбластьСтрокаСчет           	= Макет.ПолучитьОбласть("Строка|Счет");
	ОбластьСтрокаСчетРазвернутый  	= Макет.ПолучитьОбласть("СтрокаРазвернутый|Счет");
	ОбластьСтрокаПоказателяСчет 	= Макет.ПолучитьОбласть("СтрокаПоказателя|Счет");

    СтруктураОбщийИтог = Новый Структура;
	ИнициализироватьСтруктуруХраненияИтоговОборотка(СтруктураПараметров.СписокПоказателей, СтруктураОбщийИтог);
		
	СоотвПодчСчета 				= Новый Соответствие;
	ТаблицаРазворотаСчетов 		= Новый ТаблицаЗначений;
	ТаблицаРазвернутогоСальдо   = Новый ТаблицаЗначений;
	
	ПравилаВыводаИтогов 		= Новый Массив;
	
	КопияГлавногоПредставления 	= ГлобальнаяТаблицаОСВ.Скопировать();
	
	РезультатЗапроса = ГлобальнаяТаблицаОСВ;

	КопияРезультата = РезультатЗапроса.Скопировать();
 	КопияРезультата.Очистить();
	СтруктураКолонок = КопияРезультата.Колонки;
	
	Для Каждого Выборка Из РезультатЗапроса Цикл
		
		Уровень = Выборка.Уровень;
		
		Если (НЕ СтруктураПараметров.ПоСубсчетамИСубконто И не Выборка.ПоСубсчетам)
			И Уровень > 0 Тогда
						
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаСтруктура = СтокаТЧВСтруктуруНаСервере(Выборка, КопияРезультата.Колонки, РезультатЗапроса.Индекс(Выборка));
		
		ОбластьСтрокаСчет.Параметры.Заполнить(Выборка);
		
		// Заполнение параметров расшифровки.
		ЗаполнитьПараметрыРасшифровкиОборотноСальдовойВедомости(ОбластьСтрокаСчет, Выборка, ВыборкаСтруктура);
		
		// Выводим текущую строку отчета.
		ДокументРезультат.Вывести(ОбластьСтрокаСчет, Уровень, "Счет");
		
		ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, Выборка.Счет, СтруктураОбщийИтог, СтруктураПараметров, СтруктураПараметровОСВ, Уровень, СтруктураКолонок, Ложь, не (Отчет.ВключатьРазвернутоеСальдоВИтоги И Выборка.РазвернутоеСальдо));
		
		Если Выборка.РазвернутоеСальдо Тогда
			
			ОбластьСтрокаСчетРазвернутый.Параметры.Заполнить(Выборка);
			// Выводим текущую строку отчета.
			ВывестиПоказателиОборотноСальдовойВедомости(ДокументРезультат, Выборка, Выборка.Счет, СтруктураОбщийИтог, СтруктураПараметров, СтруктураПараметровОСВ, Уровень, СтруктураКолонок, Истина, Отчет.ВключатьРазвернутоеСальдоВИтоги, ОбластьСтрокаСчетРазвернутый);
			
		КонецЕсли;
		
		Если ТипЗнч(Выборка.Расшифровка) = Тип("ТаблицаЗначений") Тогда
			ВывестиПодчиненнуюРасшифровку(ДокументРезультат, Выборка, ВыборкаСтруктура, Уровень + 1, Макет, СтруктураПараметров.СписокПоказателей);
		КонецЕсли;
		
	КонецЦикла;

	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();

	// Выведем итоговую строку.
	ОбластьИтогиСчет = Макет.ПолучитьОбласть("ИТОГИ|Счет");
	
	Если СтруктураПараметров.СписокПоказателей.Количество() > 0 Тогда
		ОбластьИтогиСчет.Параметры.ИмяПоказателя = СтруктураПараметров.СписокПоказателей[0].Представление;
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьИтогиСчет, 0);
	
	ОбластьИтогиСтрокаЧисла = Макет.ПолучитьОбласть("ИтогиСтрока|Числа");
	ОбластьИтогиЧисла       = Макет.ПолучитьОбласть("ИТОГИ|Числа");
	ОбластьИтогиСтрокаСчет  = Макет.ПолучитьОбласть("ИтогиСтрока|Счет");
	
	НомерТекущейСтрокиИтога = 0;	
	Для Каждого ТекПоказатель Из СтруктураПараметров.СписокПоказателей Цикл

		Если НомерТекущейСтрокиИтога > 0 Тогда
			Область 	= ОбластьИтогиСтрокаЧисла;
			ОбластьСчет = ОбластьИтогиСтрокаСчет;
		Иначе
			Область 	= ОбластьИтогиЧисла;
			ОбластьСчет = ОбластьИтогиСчет;
		КонецЕсли;

		ОбластьСчет.Параметры.ИмяПоказателя = ТекПоказатель.Представление;
		
		ФорматПоказателя = "";
		СтруктураПараметровОСВ.ФорматПоказателей.Свойство(ТекПоказатель.Значение, ФорматПоказателя);

		ЗаполнитьДаннымиОбластьВыводаОборотка(Область, ФорматПоказателя, 
			СтруктураОбщийИтог[ТекПоказатель.Значение + "НачальныйОстатокДт"], СтруктураОбщийИтог[ТекПоказатель.Значение + "НачальныйОстатокКт"], 
			СтруктураОбщийИтог[ТекПоказатель.Значение + "КонечныйОстатокДт"], СтруктураОбщийИтог[ТекПоказатель.Значение + "КонечныйОстатокКт"], 
			СтруктураОбщийИтог[ТекПоказатель.Значение + "ОборотДт"], СтруктураОбщийИтог[ТекПоказатель.Значение + "ОборотКт"]);
		
		Если НомерТекущейСтрокиИтога > 0 Тогда
			ДокументРезультат.Вывести(ОбластьСчет);	
			// ДокументРезультат.Присоединить(ОбластьИтогиСтрокаСчет);
		КонецЕсли;

		ДокументРезультат.Присоединить(Область);
		
		НомерТекущейСтрокиИтога = НомерТекущейСтрокиИтога + 1;

	КонецЦикла;

	ИтогиПодвал = Макет.ПолучитьОбласть("ИтогиПодвал");
   	ДокументРезультат.Вывести(ИтогиПодвал, 0);
	
	// Зафиксируем заголовок отчета.
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 3;

	// Первую колонку не печатаем.
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	// Выводится по ширине листа.
	ДокументРезультат.Автомасштаб   = Истина;
    	
КонецПроцедуры

// При формировании отчета, повторяет развороты, присутствующие в предудущей версии отчета.
// 
&НаСервере
Процедура ПривестиГлобальноеПредставлениеКСтруктуреКопии(ГлобальноеПредставление, Знач КопияПредставления, Знач ТекущаяСтрокаГлавнойТаблицы = Неопределено)
	
	Для Каждого СтрокаКопии Из КопияПредставления Цикл
		
		Если КопияПредставления.Колонки.Найти("ПоСубсчетам") <> Неопределено И СтрокаКопии.ПоСубсчетам Тогда
			
			Счет 	= СтрокаКопии.Счет;
			Отбор 	= Новый Структура("Счет", Счет);
			Строки 	= ГлобальноеПредставление.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из Строки Цикл
				Строка.РазвернутоеСальдо = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		Если КопияПредставления.Колонки.Найти("РазвернутоеСальдо") <> Неопределено и ГлобальноеПредставление.Колонки.Найти("РазвернутоеСальдо") <> Неопределено И СтрокаКопии.РазвернутоеСальдо Тогда
			
			Счет 	= СтрокаКопии.Счет;
			Отбор 	= Новый Структура("Счет", Счет);
			Строки 	= ГлобальноеПредставление.НайтиСтроки(Отбор);
			
			Для Каждого Строка Из Строки Цикл
				Строка.РазвернутоеСальдо = Истина;
			КонецЦикла;
			
		КонецЕсли;
        		
		Если ТипЗнч(СтрокаКопии.Расшифровка) <> Тип("ТаблицаЗначений") Тогда
			Продолжить; // Не расшифрованные строки неинтересны
		КонецЕсли;
		
		Если СтрокаКопии.Расшифровка.Количество() = 0 Тогда
			Продолжить; // Пустые расшифровки неинтересны
		КонецЕсли;
				
		ПредставительРазворота = СтрокаКопии.Расшифровка[0];
		
		ИмяРазворота 	= ПредставительРазворота.ИмяМакета;
        Отбор			= СтрокаКопии.Отбор;
		
		Если ИмяРазворота = "Период" Тогда
			ИмяРазворота = ПолучитьИмяРазворотаИзОтбора(Отбор);
		КонецЕсли;
		
		НовТекущаяСтрокаГлавнойТаблицы 	= ПолучитьСтрокуГлавнойТаблицыПоОтборам(ТекущаяСтрокаГлавнойТаблицы, Отбор, ГлобальноеПредставление);
		Расшифровка 					= НовТекущаяСтрокаГлавнойТаблицы;
		
		Если Расшифровка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(ИмяРазворота, "ПоДопРеквизитам") <> 0 Тогда
			ОбработатьВыбраннуюРасшифровку(Расшифровка, ПредставительРазворота.Отбор[ИмяРазворота], Ложь, Неопределено, Ложь, ГлобальноеПредставление);
		Иначе	
			ОбработатьВыбраннуюРасшифровку(Расшифровка, ИмяРазворота, Ложь, Неопределено, Ложь, ГлобальноеПредставление);
		КонецЕсли;
		
		ПривестиГлобальноеПредставлениеКСтруктуреКопии(ГлобальноеПредставление, СтрокаКопии.Расшифровка, Расшифровка);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку главной таблицы представления ОСВ по указанному отбору.
// 
&НаСервере
Функция ПолучитьСтрокуГлавнойТаблицыПоОтборам(ТекущаяСтрока, Отбор, ГлобальноеПредставление)
	
	Для Каждого ПоследнееОтбораКИ Из Отбор Цикл
	КонецЦикла;
    
    СтрокаГлавнойТаблицы = Неопределено;
    
	ПоследнееОтбора = ПоследнееОтбораКИ.Значение;
	
	КолонкаОтбора = ПоследнееОтбораКИ.Ключ;
	
	Если ЕстьПериодВИмени(КолонкаОтбора) Тогда
		КолонкаОтбора = "Период";
	КонецЕсли;
	
	Если КолонкаОтбора = "СубСчет" Тогда
		КолонкаОтбора = "Счет";
	КонецЕсли;
	
	Если ТипЗнч(ПоследнееОтбораКИ.Значение) = Тип("Структура") Тогда
		
        Если ТекущаяСтрока <> Неопределено Тогда
            СтрокаГлавнойТаблицы = ТекущаяСтрока.Расшифровка.Найти(ПоследнееОтбораКИ.Значение.Значение, СтрЗаменить(КолонкаОтбора, "_0_", ""));
        ИначеЕсли ГлобальноеПредставление.Количество() > 0 Тогда       
			СтрокаГлавнойТаблицы = ГлобальноеПредставление.Найти(ПоследнееОтбораКИ.Значение.Значение, СтрЗаменить(КолонкаОтбора, "_0_", ""));
		КонецЕсли;
		
	Иначе
		
        Если ТекущаяСтрока <> Неопределено Тогда
            СтрокаГлавнойТаблицы = ТекущаяСтрока.Расшифровка.Найти(ПоследнееОтбораКИ.Значение, СтрЗаменить(КолонкаОтбора, "_0_", ""));
        ИначеЕсли ГлобальноеПредставление.Количество() > 0 Тогда
			СтрокаГлавнойТаблицы = ГлобальноеПредставление.Найти(ПоследнееОтбораКИ.Значение, СтрЗаменить(КолонкаОтбора, "_0_", ""));
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтрокаГлавнойТаблицы;
	
КонецФункции

// Добавляет строку ОСВ в существующее глобальное представление.
// 
&НаСервере
Функция ДобавитьВГлобальноеПредставление(мГлобальнаяТаблицаОСВ, СтрокаВыборка, ИмяМакета = "Счет", Расшифровка = "Счет", СписокПоказателей)
	
	гл_ТЗ = мГлобальнаяТаблицаОСВ;
	
	Если гл_ТЗ = Неопределено или гл_ТЗ.Колонки.Количество() = 0 Тогда
		ИнициализацияГлобальногоПредставления(мГлобальнаяТаблицаОСВ, СписокПоказателей);
		гл_ТЗ = мГлобальнаяТаблицаОСВ;
	КонецЕсли;
	
	НовСтрока = гл_ТЗ.Добавить();
	
	Для Каждого Колонка Из гл_ТЗ.Колонки Цикл
		Если Колонка.Имя <> "Уровень" и Колонка.Имя <> "ИмяМакета" и Колонка.Имя <> "Расшифровка" и Колонка.Имя <> "Отбор" Тогда
			Попытка
				НовСтрока[Колонка.Имя] = СтрокаВыборка[Колонка.Имя];
			Исключение
				НовСтрока[Колонка.Имя] = Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	НовСтрока.ИмяМакета 	= ИмяМакета;
	НовСтрока.Уровень		= СтрокаВыборка.Уровень();
	НовСтрока.Расшифровка 	= Расшифровка;
	
	Отбор = Новый Структура("Счет");
	Отбор.Счет = СтрокаВыборка.Счет;
	
	НовСтрока.Отбор 		= Отбор;
	
	Возврат НовСтрока;
	
КонецФункции

// Помещает во временное хранилище таблицу для последующей сортировки.
// 
&НаСервере
Функция ПодготовитьТаблицуДляСортировки(Расшифровка)
	
	ТаблицаОСВ 				= ПолучитьИзВременногоХранилища(мАдресГлобальногоПредставления);
	СтрокаОСВ 				= ПолучитьСтрокуПоИндексу(ТаблицаОСВ, Расшифровка.ИндексСтроки);
	ТаблицаОстаткиИОбороты 	= СтрокаОСВ.Расшифровка;
	
	// Возврат ПоместитьВоВременноеХранилище(ТаблицаОстаткиИОбороты, Новый УникальныйИдентификатор);
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОстаткиИОбороты, УникальныйИдентификатор);
	
	
КонецФункции

// Основной обработчик выбранных расшифровок. Определяет, что необходимо сделать в случае выбора
// того или иного разворота.
// 
&НаСервере
Процедура ОбработатьВыбраннуюРасшифровку(Расшифровка, Знач ИмяРазворота, МножественныйРазворот = Ложь, АдресХранилища = Неопределено, ФормироватьОтчет = Истина, ТаблицаОСВ_ = Неопределено, ИнтерактивнаяРабота = Истина)
	
	РасшифровкаВОСВ = Ложь;
	Иерархия 		= Ложь;
	
	Если ТаблицаОСВ_ = Неопределено Тогда
		
		ТаблицаОСВ = ПолучитьИзВременногоХранилища(мАдресГлобальногоПредставления);
		
	Иначе
		
		ТаблицаОСВ 		= ТаблицаОСВ_;
		РасшифровкаВОСВ = Истина;
		
	КонецЕсли;	
	
	ДопИмяРазворота = ИмяРазворота;
	
	Если не МножественныйРазворот Тогда
		
		Если ИмяРазворота = "СвернутьГруппировку" Тогда // Удаление группировки
			
			СтрокаОСВ = ПолучитьСтрокуПоИндексу(ТаблицаОСВ, Расшифровка.ИндексСтроки);
			СтрокаОСВ.Расшифровка = Неопределено;
						
		ИначеЕсли ИмяРазворота = "Сортировка" Тогда // Сортировка таблицы разворота
			
			СтрокаОСВ = ПолучитьСтрокуПоИндексу(ТаблицаОСВ, Расшифровка.ИндексСтроки);
			
			Если АдресХранилища <> Неопределено Тогда
				ТаблицаОстаткиИОбороты = ПолучитьИзВременногоХранилища(АдресХранилища);
				УдалитьИзВременногоХранилища(АдресХранилища)
			КонецЕсли;
			
			Если ТипЗнч(ТаблицаОстаткиИОбороты) = Тип("ТаблицаЗначений") Тогда
				СтрокаОСВ.Расшифровка = ТаблицаОстаткиИОбороты;
			КонецЕсли;
						
		ИначеЕсли ИмяРазворота = "ПоПроводкам" Тогда
			ТаблицаОстаткиИОбороты = ПолучитьТаблицуПоПроводкам(Расшифровка, ИмяРазворота);	
		ИначеЕсли ИмяРазворота = "ИерархияЭлементов" Тогда
			
			СтрокаОСВ 		= ПолучитьСтрокуПоИндексу(ТаблицаОСВ, Расшифровка.ИндексСтроки);
			ИмяРазворота 	= СтрокаОСВ.Расшифровка[0].ИмяМакета;
			Иерархия 		= Истина;
			
			Если Найти(ИмяРазворота, "ПоДопРеквизитам") <> 0 Тогда
				
				ИмяРазворота = СтрокаОСВ.Расшифровка[0].Отбор[СтрокаОСВ.Расшифровка[0].ИмяМакета];
				
			КонецЕсли;
			
		ИначеЕсли ИмяРазворота = "ПоСубсчетам" Тогда
			
			// Получим список субсчетов
			Счет 			= Расшифровка.Счет;
			// МассивСубсчетов = ПолучитьСубсчетаСчета(Счет, Отчет.РегистрБухгалтерии);
			// НУНВ...
			МассивСубсчетов = ПолучитьСубсчетаСчета(Счет, Отчет.РегистрБухгалтерии.ИмяОбъекта);
			// ...НУНВ
			МассивСубсчетов.Добавить("Счет");
			
			Для Каждого Субсчет Из МассивСубсчетов Цикл
				
				Отбор 	= Новый Структура("Счет", Субсчет);
				Строки 	= ТаблицаОСВ.НайтиСтроки(Отбор);
				
				Для Каждого СтрокаСуб Из Строки Цикл
					СтрокаСуб.ПоСубсчетам = не СтрокаСуб.ПоСубсчетам;
					Если не СтрокаСуб.ПоСубсчетам и СтрокаСуб.Счет <> Счет Тогда
						СтрокаСуб.Расшифровка = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли Найти(ИмяРазворота, "отч_") > 0 Тогда
			// ОткрытьТиповойОтчет(ИмяРазворота, Расшифровка);
		ИначеЕсли ИмяРазворота = "РазвернутоеСальдо" Тогда
			
			Разворот 					= ПолучитьСтрокуПоИндексу(ТаблицаОСВ, Расшифровка.ИндексСтроки);
			
			Если ИнтерактивнаяРабота Тогда
				Разворот.РазвернутоеСальдо 	= не Разворот.РазвернутоеСальдо;
			КонецЕсли;
		
			ФормироватьОтчет 			= Истина;
			
		ИначеЕсли ТипЗнч(ИмяРазворота) = Тип("Структура") Тогда
			
			// Это разворот по доп.реквизиту
			
		КонецЕсли;
				
		Если не ЗначениеЗаполнено(ИмяРазворота) Тогда
			Возврат;
		КонецЕсли;
		
		
		
		Если ИмяРазворота <> "СвернутьГруппировку" и ИмяРазворота <> "РазвернутоеСальдо" и ИмяРазворота <> "Диаграмма" и ИмяРазворота <> "Сортировка" и Найти(ИмяРазворота, "отч_") = 0 и ИмяРазворота <> "ПоСубсчетам" Тогда
			
			Если ТипЗнч(ИмяРазворота) = Тип("Структура") Тогда
				
				// Это разворот по доп.реквизиту
				ТаблицаОстаткиИОбороты = ПолучитьОстаткиИОборотыДляПоляПоОтборуДопРеквизиты(ИмяРазворота, Расшифровка, Иерархия, Ложь, ДопИмяРазворота);
				
			ИначеЕсли не ИмяРазворота = "ПоПроводкам" Тогда
				
				ТаблицаОстаткиИОбороты = ПолучитьОстаткиИОборотыДляПоляПоОтбору(ИмяРазворота, Расшифровка, Иерархия);
				
			КонецЕсли;
			
			// ДополнитьТаблицуСлужебнойИнформацией(Отчет.РегистрБухгалтерии
			// 		, ТаблицаОстаткиИОбороты, ИмяРазворота, Расшифровка, Ложь, ДопИмяРазворота);
			// НУНВ...
			ДополнитьТаблицуСлужебнойИнформацией(Отчет.РегистрБухгалтерии.ИмяОбъекта, ТаблицаОстаткиИОбороты, ИмяРазворота, Расшифровка, Ложь, ДопИмяРазворота);
			// ...НУНВ
						
			Если не РасшифровкаВОСВ Тогда
				
				СтрокаОСВ = ПолучитьСтрокуПоИндексу(ТаблицаОСВ, Расшифровка.ИндексСтроки);
				СтрокаОСВ.Расшифровка = ТаблицаОстаткиИОбороты;
				
			Иначе
				
				СтрокаОСВ = Расшифровка;
				СтрокаОСВ.Расшифровка = ТаблицаОстаткиИОбороты;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если не ЗначениеЗаполнено(ИмяРазворота) Тогда
			Возврат;
		КонецЕсли;

		СтрокаОСВ = ПолучитьСтрокуПоИндексу(ТаблицаОСВ, Расшифровка.ИндексСтроки);
		
		Для Каждого СтрокаРасшифровкиОСВ Из СтрокаОСВ.Расшифровка Цикл
		
			Если ИмяРазворота = "ПоПроводкам" Тогда
				
				ТаблицаОстаткиИОбороты = ПолучитьТаблицуПоПроводкам(СтрокаРасшифровкиОСВ, ИмяРазворота);
				
			ИначеЕсли ТипЗнч(ИмяРазворота) = Тип("Структура") Тогда
				
				// Это разворот по доп.реквизиту
				ТаблицаОстаткиИОбороты = ПолучитьОстаткиИОборотыДляПоляПоОтборуДопРеквизиты(ИмяРазворота, СтрокаРасшифровкиОСВ, Ложь, Ложь, ДопИмяРазворота);	
				
			Иначе
				
				ТаблицаОстаткиИОбороты 	= ПолучитьОстаткиИОборотыДляПоляПоОтбору(ИмяРазворота, СтрокаРасшифровкиОСВ);
				
			КонецЕсли;
			
			// ДополнитьТаблицуСлужебнойИнформацией(Отчет.РегистрБухгалтерии
			// 	, ТаблицаОстаткиИОбороты, ИмяРазворота, СтрокаРасшифровкиОСВ, Ложь, ДопИмяРазворота);
			// НУНВ...
			ДополнитьТаблицуСлужебнойИнформацией(Отчет.РегистрБухгалтерии.ИмяОбъекта, ТаблицаОстаткиИОбороты, ИмяРазворота, СтрокаРасшифровкиОСВ, Ложь, ДопИмяРазворота);
			// ...НУНВ
			
			СтрокаОСВ 				= СтрокаРасшифровкиОСВ;
			СтрокаОСВ.Расшифровка 	= ТаблицаОстаткиИОбороты;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПараметров 	= ПолучитьИзВременногоХранилища(мАдресСтруктурыПараметров);
	СтруктураПараметровОСВ 	= ПолучитьСтруктуруПараметровВыводаОСВ(СтруктураПараметров
																   , СтруктураПараметров.ОтчетОбъектМакет
																   , СтруктураПараметров.ПоЗабалансовымСчетам);

   	Если ФормироватьОтчет Тогда
		
		УдалитьИзВременногоХранилища(мАдресГлобальногоПредставления);
		
		мАдресГлобальногоПредставления = ПоместитьВоВременноеХранилище(ТаблицаОСВ, УникальныйИдентификатор);
		
		СформироватьОСВПоГлобальномуПредставлениюНаСервере(ДокументРезультат
	   														, СтруктураПараметров
	   														, СтруктураПараметровОСВ);
	   
   	КонецЕсли;
													  
КонецПроцедуры

// Дополняет любую таблицу-подчиненную расшифровку служебной информацией, необходимой
// для формирования отчета.
// 
&НаСервере
Процедура ДополнитьТаблицуСлужебнойИнформацией(ИмяРегистраБухгалтерии, ТаблицаОстаткиИОбороты, Знач ИмяРазворота2, Расшифровка, РазвернутоеСальдо = Ложь, ДопИмяРазворота) Экспорт
	
	// Необходимо к таблице добавить служебные колонки:
	// "ИмяМакета", "Уровень", "Расшифровка", "Отбор".
	
	Отбор = Расшифровка.Отбор;
	ИспользованиеОтбора = Ложь;
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда // Отбор заполнен
		ИспользованиеОтбора = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ИмяРазворота2) = Тип("Структура") Тогда
		
		ИмяРазворота = ДопИмяРазворота;
		
		Если не ИмяРазворота2.Свойство("Значение") Тогда
			ИмяРазворота2.Вставить("Значение");
		КонецЕсли;
		
	Иначе
		
		ИмяРазворота = ИмяРазворота2;
		
	КонецЕсли;
	
	ИмяРазворота_ 		= ИмяРазворота;
	ИмяРазворотаОтбор   = ПолучитьИмяРазворотаДляОтбора(ИмяРазворота);
	
	Если ЕстьПериодВИмени(ИмяРазворота) Тогда
		ИмяРазворота_ 	= "Период";
	КонецЕсли;
	
	Если ИмяРазворота = "СубСчет" Тогда
		ИмяРазворота_	= "Счет";
	КонецЕсли;
	
	ТаблицаОстаткиИОбороты.Колонки.Добавить("ИмяМакета");
	ТаблицаОстаткиИОбороты.Колонки.Добавить("Уровень");
	ТаблицаОстаткиИОбороты.Колонки.Добавить("Расшифровка");
	ТаблицаОстаткиИОбороты.Колонки.Добавить("Отбор");
	ТаблицаОстаткиИОбороты.Колонки.Добавить("РазвернутоеСальдо");
	
	НовыйОтбор = Новый Структура;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстаткиИОбороты Цикл
		
		Если ИспользованиеОтбора Тогда
			
			НовыйОтбор = Новый Структура;
			НовыйОтбор.Очистить();
			
			СчетчикДопОтборов = 0;
			
			Для Каждого СтрокаСтарогоОтбора Из Отбор Цикл
				Если Найти(СтрокаСтарогоОтбора.Ключ, "ПоДопРеквизитам") <> 0 Тогда
					СчетчикДопОтборов = СчетчикДопОтборов + 1;
				КонецЕсли;	
				НовыйОтбор.Вставить(СтрокаСтарогоОтбора.Ключ, СтрокаСтарогоОтбора.Значение);
			КонецЦикла;
			
			Если ТипЗнч(ИмяРазворота2) = Тип("Структура") Тогда
								
				НовыйИмяРазворота = Новый Структура("Значение, Измерение, Свойство, СсылкаПВХ", ИмяРазворота2.Значение, ИмяРазворота2.Измерение, ИмяРазворота2.Свойство, ИмяРазворота2.СсылкаПВХ);
				
				НовыйИмяРазворота.Значение = СтрокаТаблицы[СтрЗаменить(ИмяРазворота_, ".", "")];
				// Дополним отбор очередным измерением
				НовыйОтбор.Вставить(СтрЗаменить(ИмяРазворота, ".", "_0_"), НовыйИмяРазворота);
				
				ИмяРазворота_ = СтрЗаменить(ИмяРазворота, ".", "_0_");
				
			Иначе
				
				// Дополним отбор очередным измерением
				НовыйОтбор.Вставить(СтрЗаменить(ИмяРазворота, ".", "_0_"), СтрокаТаблицы[СтрЗаменить(ИмяРазворота_, ".", "")]);
			
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.Отбор = НовыйОтбор;
		
	КонецЦикла;
	
	ТаблицаОстаткиИОбороты.ЗаполнитьЗначения(?(ИмяРазворота = "СубСчет", ИмяРазворота, ИмяРазворота_), "ИмяМакета");
	ТаблицаОстаткиИОбороты.ЗаполнитьЗначения(Расшифровка.Уровень + 1	, "Уровень");
	ТаблицаОстаткиИОбороты.ЗаполнитьЗначения(РазвернутоеСальдо			, "РазвернутоеСальдо");
	
КонецПроцедуры

// Удаляет все текущие расшифровки и дает команду заново сформировать оборотно-сальдовую ведомость.
// 
&НаКлиенте
Процедура ОчиститьРасшифровки(Команда)
	
	мАдресГлобальногоПредставления 	= Неопределено;
	мАдресСтруктурыПараметров		= Неопределено;
	
	СформироватьОтчет(Неопределено);
	
КонецПроцедуры

// Обработчик "Начала выбора" списка значений "Отбор по измерениям".
// 
// &НаКлиенте
// Процедура ОтборПоИзмерениямЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
// 		
// КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыОтчетаКакРасшифровки

// &НаКлиенте
// Процедура СформироватьОтчетСРасшифровками(СтруктураРазворотов)
// 	
// 	// Предполагаем, что все реквизиты заполнены
// 	
// 	ОграничениеПоДатамКорректно = ПроверитьКорректностьОграниченийПоДатам(Отчет.НачалоПериода, Отчет.ОкончаниеПериода);
// 	
// 	Если НЕ ОграничениеПоДатамКорректно Тогда
// 		Возврат;
// 	КонецЕсли;
// 	
// 	ИзмененыНастройкиОтчета(Ложь);
// 	
// 	СформироватьОтчетСРасшифровкамиНаСервере(СтруктураРазворотов);
// 	
// 	ОтчетСформирован = Истина;

// КонецПроцедуры

// &НаСервере
// Процедура СформироватьОтчетСРасшифровкамиНаСервере(СтруктураРазворотов)
// 	
// КонецПроцедуры

// бит_VAlekseev Обработчик "Начала выбора" регистра бухгалтерии (НУВН).
// 
&НаКлиенте
Процедура РегистрБухгалтерииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
				
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийОбъектСистемы"   , Отчет.РегистрБухгалтерии);
	ПараметрыФормы.Вставить("ВидыОбъектов"           , СписокДоступныхРегистров);
	
	ОткрытьФорму("ОбщаяФорма.бит_ФормаВыбораОбъектовСистемыУправляемая", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйПериодПриИзменении(Элемент)
	
	ИзмененыНастройкиОтчета();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПоРаботеСНастройками

// Процедура обрабатывает изменение вида сравнения.
// 
// Параметры:
//  ИдСтроки         - Строка.
//  ПредВидСравнения - ВидСравнения.
// 
&НаСервере
Процедура ИзменениеВидаСравненияСервер(ИдСтроки, ПредВидСравнения)
	
	ТекущиеДанные = ОтборПоИзмерениям.НайтиПоИдентификатору(ИдСтроки); 	
	бит_МеханизмПолученияДанных.ИзменениеВидаСравнения(ТекущиеДанные, ПредВидСравнения);
		
КонецПроцедуры // ИзменениеВидаСравненияСервер()

// Процедура формирует список доступных видов сравнения в зависимости от типа значения в строке.
// 
// Параметры:
//  ИдСтроки - Число
// 
&НаСервере
Функция СформироватьСписокВыбораВидаСравнения(ИдСтроки)
	
	ТекущиеДанные = ОтборПоИзмерениям.НайтиПоИдентификатору(ИдСтроки);
	СписокВидов = бит_МеханизмПолученияДанных.СписокВыбораВидаСравнения(ТекущиеДанные);

	Возврат СписокВидов;
	
КонецФункции // СформироватьСписокВыбораВидаСравнения()

// Функция создает структуру, хранящую настройки.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура.
// 
&НаСервере
Функция УпаковатьНастройкиВСтруктуру()

	СтруктураНастроек = Новый Структура;
	Для каждого Реквизит Из Метаданные.Отчеты.бит_осв_ИнтерактивнаяОборотноСальдоваяВедомость.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		СтруктураНастроек.Вставить(ИмяРеквизита, Отчет[ИмяРеквизита]);	
	КонецЦикла; 
	
	СтруктураНастроек.Вставить("Организация", Организация);
	СтруктураНастроек.Вставить("Показатели" , Показатели);
	
	ТаблицаОтборовПоИзмерениям = ДанныеФормыВЗначение(ОтборПоИзмерениям, Тип("ТаблицаЗначений")); 	
	СтруктураНастроек.Вставить("ОтборПоИзмерениям", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаОтборовПоИзмерениям));
	
	ТаблицаОСВ = ПолучитьИзВременногоХранилища(мАдресГлобальногоПредставления);
	СтруктураНастроек.Вставить("ТаблицаОСВ", бит_ОбщегоНазначения.УпаковатьТаблицуЗначений(ТаблицаОСВ));
	
	Возврат СтруктураНастроек;
	
КонецФункции // УпаковатьНастройкиВСтруктуру()

// Процедура применяет сохраненну настройки.
// 
// Параметры:
//  ВыбНастройка - СправочникСсылка.бит_СохраненныеНастройки.
// 
&НаСервере
Процедура ПрименитьНастройки(ВыбНастройка)
	
	// Очистка отчета
	ДокументРезультат.Очистить();
	
    СтруктураНастроек = ВыбНастройка.ХранилищеНастроек.Получить();
	
	ЗаполнитьЗначенияСвойств(Отчет, СтруктураНастроек);  
	
	// BIT Amerkulov 29032015 ++
	//МассивОрганизаций = СтруктураНастроек.Организация.ВыгрузитьЗначения();
	//Организация.ЗагрузитьЗначения(МассивОрганизаций);
	Если ТипЗнч(СтруктураНастроек.Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") ИЛИ ТипЗнч(СтруктураНастроек.Организация) = Тип("СправочникСсылка.Организации") Тогда
		Организация = СтруктураНастроек.Организация;
	Иначе
		МассивОрганизаций = СтруктураНастроек.Организация.ВыгрузитьЗначения();
		Организация = Новый СписокЗначений;
		Организация.ЗагрузитьЗначения(МассивОрганизаций);
		Организация.Очистить();
		Организация = СтруктураНастроек.Организация.Скопировать();		
	КонецЕсли;
	
	Показатели.Очистить();
	Показатели = СтруктураНастроек.Показатели.Скопировать();
	
	Организация.Очистить();
	Организация = СтруктураНастроек.Организация.Скопировать();

	ТаблицаОтборовПоИзмерениям = ?(ТипЗнч(СтруктураНастроек.ОтборПоИзмерениям) = Тип("ТаблицаЗначений")
									, СтруктураНастроек.ОтборПоИзмерениям
									, бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ОтборПоИзмерениям));
									
									
	СконвертируемТаблицуОтборов(ТаблицаОтборовПоИзмерениям);
	
	Попытка
	ЗначениеВДанныеФормы(ТаблицаОтборовПоИзмерениям, ОтборПоИзмерениям);
	Исключение
	КонецПопытки;
	// BIT Amerkulov 29032015 --
	
	// Расшифровки
	мАдресГлобальногоПредставления = Неопределено;
	Если СтруктураНастроек.Свойство("ТаблицаОСВ") Тогда
		ТаблицаОСВ = бит_ОбщегоНазначения.РаспаковатьТаблицуЗначений(СтруктураНастроек.ТаблицаОСВ);
		Если ТаблицаОСВ <> Неопределено Тогда
			мАдресГлобальногоПредставления = ПоместитьВоВременноеХранилище(ТаблицаОСВ, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	// Структура параметров
	мАдресСтруктурыПараметров = Неопределено;
	ПодготовитьСтруктуруПараметровФормированияОтчетаНаСервере();
		
КонецПроцедуры // ПрименитьНастройки()

// Конвертирует таблицу отбора если это необходимо.
// 
// Параметры:
//  Таблица - ТаблицаЗначений.
// 
&НаСервере
Процедура СконвертируемТаблицуОтборов(Таблица)

	Если Таблица.Колонки.Количество() < 6 Тогда
		
		Если Таблица.Колонки.Найти("Использование") = Неопределено Тогда
			Таблица.Колонки.Добавить("Использование");
		КонецЕсли;
		
		Если Таблица.Колонки.Найти("ВидСравнения") = Неопределено Тогда			
			Таблица.Колонки.Добавить("ВидСравнения");
		КонецЕсли;
		
		Если Таблица.Колонки.Найти("ТипЗначения") = Неопределено Тогда
			Таблица.Колонки.Добавить("ТипЗначения");
		КонецЕсли;
		
		Для Каждого Стр Из Таблица Цикл
			
			Стр.Использование = Истина;
			Стр.ВидСравнения = ВидСравнения.Равно;
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Стр.Значение));
			
			Стр.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
						
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СконвертируемТаблицуОтборов()

// Процедура открывает форму восстановления настроек.
// 
// 
&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()

	// Получим настройку по умолчанию
	НастройкаПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(фКэшЗначений.НастраиваемыйОбъект);
	
	// Установим настройку
	//Если ЗначениеЗаполнено(НастройкаПоУмолчанию) Тогда	
	//	ПрименитьНастройки(НастройкаПоУмолчанию);
	//КонецЕсли;
		
	// Если настройки нет - заполним значения по умолчанию.
	      
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиСохранить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиСохранить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	СтруктураНастройки = УпаковатьНастройкиВСтруктуру();
	ПараметрыФормы.Вставить("СтруктураНастройки" , СтруктураНастройки);
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаСохранения",
											ПараметрыФормы,
											ЭтаФорма);	
													
КонецПроцедуры // ДействияФормыНастройкиСохранить()

// Процедура - обработчик события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура ДействияФормыНастройкиВосстановить(Кнопка)
	
	ПараметрыФормы     = Новый Структура;
	ПараметрыФормы.Вставить("ТипНастройки"		 , фКэшЗначений.ТипНастройки);
	ПараметрыФормы.Вставить("НастраиваемыйОбъект", фКэшЗначений.НастраиваемыйОбъект);
	
	Обработчик = Новый ОписаниеОповещения("НастройкиВосстановитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.бит_ХранилищеНастроек.ФормаЗагрузки"
					, ПараметрыФормы, ЭтаФорма, , , , Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ДействияФормыНастройкиВосстановить()

// Процедура - завершение обработчика события "Нажатие" кнопки "НастройкиВосстановить" 
// коммандной панели "ДействияФормы".
// 
&НаКлиенте
Процедура НастройкиВосстановитьЗавершение(Настройка, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Настройка) Тогда		
		ПрименитьНастройки(Настройка);		
	КонецЕсли;
	
КонецПроцедуры // НастройкиВосстановитьЗавершение()

&НаКлиенте
Процедура ОтборПоИзмерениямВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтборПоИзмерениям.ТекущиеДанные;  	
	ИзменениеВидаСравненияСервер(ТекущиеДанные.ПолучитьИдентификатор(), мТекущийВидСравнения);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИзмерениямВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборПоИзмерениям.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.Очистить();
	
	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор());
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидов.ВыгрузитьЗначения());

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИзмерениямВидСравненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОтборПоИзмерениям.ТекущиеДанные;
	мТекущийВидСравнения = ТекущиеДанные.ВидСравнения;
	
	Элемент.СписокВыбора.Очистить();

	СписокВидов = СформироватьСписокВыбораВидаСравнения(ТекущиеДанные.ПолучитьИдентификатор());
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокВидов.ВыгрузитьЗначения());

КонецПроцедуры

#КонецОбласти     

// Функция управляет видимостью информационной надписи, о необходимости измерения Валюта,
// для вывода данных по валютным суммам.
// 
&НаКлиенте
Процедура ВидимостьИнформацииВалютнаяСумма()
	
	флУстановленаВалютаяСумма = Ложь;
	
	НайденныйЭлемент = Показатели.НайтиПоЗначению("ВалютнаяСумма");
	
	Если НЕ НайденныйЭлемент = Неопределено Тогда
		
		флУстановленаВалютаяСумма = НайденныйЭлемент.Пометка;
		
	КонецЕсли; 
	
	Если НЕ  Элементы.ГруппаПоказателиИнфо.Видимость = флУстановленаВалютаяСумма Тогда
		
		Элементы.ГруппаПоказателиИнфо.Видимость = флУстановленаВалютаяСумма;
		
	КонецЕсли; 
	
КонецПроцедуры // ВидимостьИнформацииВалютнаяСумма()

// Проверяет корректность периода.
// 
&НаКлиенте
Функция ПроверитьКорректностьОграниченийПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ВыдаватьПредупреждение = Истина)

	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Если ВыдаватьПредупреждение Тогда 
			бит_ОбщегоНазначения.СообщитьОбОшибке("Дата начала периода не может быть больше даты конца периода");
		КонецЕсли;
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Заполняет список регистров бухгалтерии конфигурации.
// 
// &НаСервере
// Процедура ЗаполнитьСписокРегистровБухгалтерииНаСервере(СписокВыбора)
// 	
// 	// Заполним список регистрами бухгалтерии
// 	РегистрыБУ = Метаданные.РегистрыБухгалтерии;
// 	
// 	Если СписокВыбора = Неопределено Тогда
// 		СписокВыбора = Новый СписокЗначений;
// 	КонецЕсли;	
// 	
// 	Для Каждого РБУ Из РегистрыБУ Цикл
// 		СписокВыбора.Добавить(РБУ.Имя, РБУ.Синоним);
// 	КонецЦикла;
// 	
// КонецПроцедуры // ЗаполнитьСписокРегистровБухгалтерии()
 
// Заполняет параметры регистра бухгалтерии.
// 
&НаСервере
Процедура ЗаполнитьПараметрыРегистраБухгалтерииНаСервере(РегистрБухгалтерии)
	
	Если ПустаяСтрока(РегистрБухгалтерии) Тогда
		ОчиститьПараметрыРегистраБухгалтерииНаСервере();
		Возврат;
	КонецЕсли;
	
	// 1. Измерения
	ЗаполнитьИзмеренияРегистраБухгалтерииНаСервере(РегистрБухгалтерии);
	// 2. Показатели
	ЗаполнитьПоказателиРегистраБухгалтерииНаСервере(РегистрБухгалтерии);

КонецПроцедуры

// Заполняет параметры регистра бухгалтерии.
// 
&НаСервере
Процедура ЗаполнитьИзмеренияРегистраБухгалтерииНаСервере(РегистрБухгалтерии)
	
	ИмяРегистра 		= РегистрБухгалтерии.ИмяОбъекта;
	
	МетаданныеРегистра	= Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	ИзмеренияРегистра 	= ОтборПоИзмерениям;
	
	// Очистим предыдущие измерения
	ИзмеренияРегистра.Очистить();
	
	ЕстьОрганизации = НЕ (Метаданные.Справочники.Найти("Организации") = Неопределено);
	ЕстьОрганизация = Ложь;
	
	// Показателями являются измерения регистра
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		// Если показатель - "организация", не выводим его.
		
		Если Измерение.Имя = "Организация" И ЕстьОрганизации Тогда
			
			ЕстьОрганизация = Истина;
			Продолжить;
			
		КонецЕсли;
		
		НовИзмерение = ИзмеренияРегистра.Добавить();
		
		НовИзмерение.Измерение 				= Измерение.Имя;
		НовИзмерение.ПредставлениеИзмерения = Измерение.Синоним;
		НовИзмерение.Значение               = Измерение.Тип.ПривестиЗначение();
		// Изменение кода. Начало. 17.09.2014{{
		НовИзмерение.ТипЗначения            = Измерение.Тип;
		// Изменение кода. Конец. 17.09.2014}}
		
	КонецЦикла;
	
	Элементы.Организация.Доступность = ЕстьОрганизация;
		
КонецПроцедуры

// Управляет видимостью поля "Организация".
// 
&НаСервере
Процедура ВидимостьОрганизацииНаСервере(ИмяРегистра)
	
	МетаданныеРегистра	= Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	ИзмеренияРегистра 	= ОтборПоИзмерениям;
	
	ЕстьОрганизации = НЕ (Метаданные.Справочники.Найти("Организации") = Неопределено);
	ЕстьОрганизация = Ложь;
	
	// Показателями являются измерения регистра
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		// Если показатель - "организация", не выводим его.
		
		Если Измерение.Имя = "Организация" И ЕстьОрганизации Тогда
			
			ЕстьОрганизация = Истина;
			Продолжить;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Элементы.Организация.Доступность = ЕстьОрганизация;
	
КонецПроцедуры

// Заполняет параметры регистра бухгалтерии.
// 
&НаСервере
Процедура ЗаполнитьПоказателиРегистраБухгалтерииНаСервере(РегистрБухгалтерии)
	
	ИмяРегистра 		= РегистрБухгалтерии.ИмяОбъекта;
	МетаданныеРегистра	= Метаданные.РегистрыБухгалтерии[ИмяРегистра];
	
	ПоказателиРегистра  = Показатели;
	
	// Очистим предыдущие показатели
	ПоказателиРегистра.Очистить();
	
	// Показателями являются ресурсы регистра
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ПоказателиРегистра.Добавить(Ресурс.Имя, Ресурс.Представление(), ?(ПоказателиРегистра.Количество() = 0, Истина, Ложь));
	КонецЦикла;
    	
КонецПроцедуры

// Очищает заполненные параметры регистра бухгалтерии.
// 
&НаСервере
Процедура ОчиститьПараметрыРегистраБухгалтерииНаСервере()
	
	Показатели.Очистить();
	ОтборПоИзмерениям.Очистить();
	    	
КонецПроцедуры

// Заполняет структуру параметров формирования ОСВ.
// 
&НаСервере
Функция ПодготовитьСтруктуруПараметровФормированияОтчетаНаСервере()
	
	СтруктураПараметров =  Новый Структура;
	
	Если не ЕстьОрганизация(Отчет.РегистрБухгалтерии.ИмяОбъекта) Тогда
		Организация.Очистить();
	КонецЕсли;
	
	//BIT Amerkulov 08042015 { 
	// Организация
	//СтруктураПараметров.Вставить("МассивОрганизаций", Организация.ВыгрузитьЗначения());
	МассивОрганизаций = Новый Массив;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.бит_му_ПериметрыКонсолидации") Тогда
		
		СтруктураПараметров.Вставить("ПоПериметру"				, Истина);
		СтруктураПараметров.Вставить("Периметр"					, Организация);
							
	ИначеЕсли  ТипЗнч(Организация) = Тип("СписокЗначений") Тогда
		
		СтруктураПараметров.Вставить("ПоПериметру"				, Ложь);
		СтруктураПараметров.Вставить("Периметр"					, Неопределено);
		
		Для Каждого Стр Из Организация Цикл
			МассивОрганизаций.Добавить(Стр.Значение);
		КонецЦикла;
		
		
	Иначе
		
		МассивОрганизаций.Добавить(Организация);
		СтруктураПараметров.Вставить("ПоПериметру"				, Ложь);
		СтруктураПараметров.Вставить("Периметр"					, Неопределено);
		
	КонецЕсли;
		
	//}

	// Отбор по измерениям
	ТаблицаОтбораИзмерения = ДанныеФормыВЗначение(ОтборПоИзмерениям, Тип("ТаблицаЗначений"));
	// ТаблицаОтбораИзмерения.Колонки.Добавить("ВидСравнения");
	// ок Видяйкин В.И. 20170208 Исправление ошибки формирования отчета по периметру консолидации (если есть организация, включенная (хронологически) в периметр в пределах периода формирования отчета).
	ТаблицаОтбораИзмерения.Колонки.Добавить("бит_ВидСравнения");// Ок видяйкин В.И. 20170208
	ТаблицаОтбораИзмерения.Очистить();
		
	Для Каждого ОтборИзмерение Из ОтборПоИзмерениям Цикл
		
		// Если ЗначениеЗаполнено(ОтборИзмерение.Значение) Тогда.
			
			НоваяСтрокаТаблицыОтбора = ТаблицаОтбораИзмерения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОтбора, ОтборИзмерение);
			// НоваяСтрокаТаблицыОтбора.ВидСравнения = " = ";
			НоваяСтрокаТаблицыОтбора.бит_ВидСравнения = " = "; // Ок видяйкин В.И. 20170208
			
		// КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ТаблицаОтбора", ТаблицаОтбораИзмерения);
	
	// Ресурсы (показатели) отчета
	МассивПоказателей 				= Новый Массив;
	МассивПредставленийПоказателей 	= Новый Массив;
	СписокПоказателей				= Новый СписокЗначений;
	
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Пометка Тогда
			МассивПоказателей.Добавить(Показатель.Значение);
			МассивПредставленийПоказателей.Добавить(Показатель.Представление);
			СписокПоказателей.Добавить(Показатель.Значение, Показатель.Представление);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивПоказателей"		, МассивПоказателей);
	СтруктураПараметров.Вставить("ПредставлениеПоказателей"	, МассивПредставленийПоказателей);
	СтруктураПараметров.Вставить("СписокПоказателей"		, СписокПоказателей);
	СтруктураПараметров.Вставить("НачалоПериода"			, Отчет.СтандартныйПериод.ДатаНачала);
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
	//СтруктураПараметров.Вставить("ОкончаниеПериода"			, Отчет.СтандартныйПериод.ДатаОкончания);
	Если НЕ СтруктураПараметров.ПоПериметру Тогда 
		СтруктураПараметров.Вставить("ОкончаниеПериода"			, Отчет.СтандартныйПериод.ДатаОкончания);
		СтруктураПараметров.Вставить("ТаблицаОрганизаций", Новый ТаблицаЗначений);
		СтруктураПараметров.Вставить("МассивОрганизацийИтогиНач", Новый Массив);
		СтруктураПараметров.Вставить("МассивОрганизацийИтогиКон", Новый Массив);
		СтруктураПараметров.Вставить("МассивОрганизацийВПериоде", Новый Массив);
	Иначе
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-06-12 (#2981)
	
		СтруктураПараметров.Вставить("ОкончаниеПериода"			, ?(ЗначениеЗаполнено(Отчет.СтандартныйПериод.ДатаОкончания),КонецДня(Отчет.СтандартныйПериод.ДатаОкончания),'22000101235959'));
		ТЗОрганизаций = ПолучитьТаблицуПериметра(СтруктураПараметров.Периметр, СтруктураПараметров.НачалоПериода, СтруктураПараметров.ОкончаниеПериода);
		ТЗОрганизаций.Свернуть("Организация");
		МассивОрганизаций 	= ТЗОрганизаций.ВыгрузитьКолонку("Организация");
		
		ТаблицаОрганизаций = ПолучитьТаблицуПериметра(СтруктураПараметров.Периметр, СтруктураПараметров.НачалоПериода, СтруктураПараметров.ОкончаниеПериода);
		
		МассивОрганизацийИтогиНач = Новый Массив;
		МассивОрганизацийИтогиКон = Новый Массив;
		МассивОрганизацийВПериоде = Новый Массив;
			
		Для Каждого Строка Из ТаблицаОрганизаций Цикл
			
			Если Строка.Период = СтруктураПараметров.НачалоПериода И Строка.ДатаОкончания = СтруктураПараметров.ОкончаниеПериода 
				И МассивОрганизацийВПериоде.Найти(Строка.Организация) = Неопределено Тогда
				МассивОрганизацийВПериоде.Добавить(Строка.Организация);
			КонецЕсли;	
			
			Если Строка.Период = СтруктураПараметров.НачалоПериода И МассивОрганизацийИтогиНач.Найти(Строка.Организация) = Неопределено
				И МассивОрганизацийВПериоде.Найти(Строка.Организация) = Неопределено Тогда
				МассивОрганизацийИтогиНач.Добавить(Строка.Организация);
			КонецЕсли;
			Если МассивОрганизацийИтогиКон.Найти(Строка.Организация) = Неопределено
				И МассивОрганизацийВПериоде.Найти(Строка.Организация) = Неопределено Тогда
				МассивОрганизацийИтогиКон.Добавить(Строка.Организация);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПараметров.Вставить("ТаблицаОрганизаций", ТаблицаОрганизаций);
		СтруктураПараметров.Вставить("МассивОрганизацийИтогиНач", МассивОрганизацийИтогиНач);
		СтруктураПараметров.Вставить("МассивОрганизацийИтогиКон", МассивОрганизацийИтогиКон);
		СтруктураПараметров.Вставить("МассивОрганизацийВПериоде", МассивОрганизацийВПериоде);
		
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-06-12 (#2981)
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("МассивОрганизаций", МассивОрганизаций);	
	
	// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
	СтруктураПараметров.Вставить("ПоВалютам"				, Отчет.ПоВалютам);
	СтруктураПараметров.Вставить("ПоЗабалансовымСчетам"		, Отчет.ПоЗабалансовымСчетам);
	СтруктураПараметров.Вставить("ПоСубсчетамИСубконто"		, Отчет.ПоСубсчетамИСубконто);
	СтруктураПараметров.Вставить("ОтчетОбъектМакет"			, РеквизитФормыВЗначение("Отчет").ПолучитьМакет("ОборотноСальдоваяВедомость"));
	// СтруктураПараметров.Вставить("ИмяРегистраБухгалтерии"	, Отчет.РегистрБухгалтерии);
	// НУНВ...
	СтруктураПараметров.Вставить("ИмяРегистраБухгалтерии"	, Отчет.РегистрБухгалтерии.ИмяОбъекта);
	// ...НУНВ
	
	// Если мАдресСтруктурыПараметров = Неопределено Тогда
		// Поместим структуру параметров во временное хранилище
		// мАдресСтруктурыПараметров = ПоместитьВоВременноеХранилище(СтруктураПараметров, УникальныйИдентификатор);
		// мАдресСтруктурыПараметров = ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
		Если мАдресСтруктурыПараметров <> Неопределено Тогда
			УдалитьИзВременногоХранилища(мАдресСтруктурыПараметров);
		КонецЕсли;
		
		мАдресСтруктурыПараметров = ПоместитьВоВременноеХранилище(СтруктураПараметров, УникальныйИдентификатор);
	// Иначе
	// 	мАдресСтруктурыПараметров = ПоместитьВоВременноеХранилище(СтруктураПараметров, мАдресСтруктурыПараметров);
	// КонецЕсли;
	
КонецФункции

// Включает/отключает предупреждение о необходимости переформировать отчет.
// 
&НаКлиенте
Процедура ИзмененыНастройкиОтчета(ВывестиПредупреждение = Истина)
	
	Если не ОтчетСформирован Тогда
		Возврат;
	КонецЕсли;
	
	РекомендацияПользователю 	= ВывестиПредупреждение;
	ОбластьПредупреждения 		= ДокументРезультат.Область("R4C2:R4C20");
	
	Если ВывестиПредупреждение Тогда
		// Элементы.НадписьИнформацияПользователю.Заголовок = "Изменены настройки отчета!";
		Текст = "";
		Текст = Текст + "Внимание! Изменены ключевые настройки отчета. Рекомендуется нажать на кнопку ""Сформировать""";
		ОбластьПредупреждения.Текст 		= Текст;
		ОбластьПредупреждения.ЦветТекста 	= Новый Цвет(255, 0, 0);
	Иначе
		// Элементы.НадписьИнформацияПользователю.Заголовок = ""; 
		Текст = "";
		ОбластьПредупреждения.Текст 		= Текст;
		ОбластьПредупреждения.ЦветТекста 	= Новый Цвет(0, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Сформировать отчет".
// 
&НаСервере
Процедура СформироватьОтчетНаСервере(СтрРегистрация)
	
	ПодготовитьСтруктуруПараметровФормированияОтчетаНаСервере();
	
	СформироватьОборотноСальдовуюВедомостьНаСервере(ДокументРезультат);
	
	бит_ук_СлужебныйСервер.РегистрацияФормированиеОтчета(Ложь, СтрРегистрация);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ТипНастройки", Перечисления.бит_ТипыСохраненныхНастроек.Обработки);
	фКэшЗначений.Вставить("НастраиваемыйОбъект", "Отчет.бит_осв_ИнтерактивнаяОборотноСальдоваяВедомость");

	фКэшЗначений.Вставить("ВидСравненияРавно", ВидСравнения.Равно);

КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура ОбработкаКомандыПанелиНастроекСервер(СкрытьПанельПриФормировании = Ложь)
	
	// Видимость панели настроек
	бит_ОтчетыСервер.ОбработкаКомандыПанелиНастроек(Элементы.ФормаКомандаПанельНастроек
													 , Элементы.ГруппаПанельНастроек
													 , фСкрытьПанельНастроек
													 , фТаксиОткрытьПанельНастроек
													 , СкрытьПанельПриФормировании);
	
КонецПроцедуры // ОбработкаКомандыПанелиНастроекСервер()

// Возвращает имя текущего разворота по указанному отбору.
// 
&НаСервере
Функция ПолучитьИмяРазворотаИзОтбора(Отбор)
	
	Для Каждого СтрокаОтбора Из Отбор Цикл
		
		Если ЕстьПериодВИмени(СтрокаОтбора.Ключ) Тогда
			Возврат СтрокаОтбора.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "ПериодДень";
	
КонецФункции

// Функция Объединяет ограничения.
// 
&НаСервереБезКонтекста
Функция ОбъединитьОграничения(Знач Ограничение1, Знач Ограничение2, Знач СтрокаОбъединенияОграничений = "И") Экспорт
	
	Если ПустаяСтрока(Ограничение1) Тогда
		Возврат Ограничение2;
	КонецЕсли;
	
	Если ПустаяСтрока(Ограничение2) Тогда
		Возврат Ограничение1;
	КонецЕсли;
	
	СтрокаОграничения = Ограничение1 + " " + СтрокаОбъединенияОграничений + " " + Ограничение2;
	
	Возврат СтрокаОграничения;
	
КонецФункции

// Проверяет, есть ли у регистра бухгалтерии измерение "Организация".
// 
&НаСервереБезКонтекста
Функция ЕстьОрганизация(РегистрБухгалтерии)
	
	Возврат Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии].Измерения.Найти("Организация") <> Неопределено;
	
КонецФункции

// Возвращает массив субсчетов переданного, в качестве параметра счета.
// 
&НаСервере
Функция ПолучитьСубсчетаСчета(Счет, РегистрБухгалтерии)
	
	ПланСчетовИмя = Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии].ПланСчетов.Имя;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетРодитель)");
	
	Запрос.УстановитьПараметр("СчетРодитель", Счет);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный", ПланСчетовИмя);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Проверяет разворот на разворот по периодам.
// 
&НаСервереБезКонтекста
Функция ЕстьПериодВИмени(ИмяРазворота) Экспорт
	Возврат Лев(ИмяРазворота, 6) = "Период" и Найти(ИмяРазворота, "ПериодРегистрации") = 0 и Найти(ИмяРазворота, ".") = 0;
КонецФункции

// Проверяет присутствие в отборе разворота по периодам.
// 
&НаСервереБезКонтекста
Функция ЕстьПериод(Отбор)
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Ключ = "Регистратор" или ЕстьПериодВИмени(ЭлементОтбора.Ключ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, возможен ли для данного контекста (расшифровки) разворот по иерархии элементов.
// 
&НаСервере
Функция ВозможнаИерархия(Расшифровка)
	
	ТаблицаРасшифровки = Расшифровка.Расшифровка;
	
	Если ТаблицаРасшифровки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбразецРасшифровки 	= ТаблицаРасшифровки.Получить(0);
	ОбразецЗначения		= ОбразецРасшифровки[СтрЗаменить(ПолучитьИмяРазворотаДляОтбора(ОбразецРасшифровки.ИмяМакета), ".", "")];
	
	Если ЭтоСсылочноеЗначение(ОбразецЗначения) Тогда
		
		Мета = ОбразецЗначения.Метаданные();
		
		Если Метаданные.Справочники.Содержит(Мета) Тогда
			
			Возврат Мета.Иерархический;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Служит для возврата пустых картинок, в случае, если нужной картинки нет в библиотеке картинок.
// 
&НаСервереБезКонтекста
Функция ПолучитьКартинку(Картинка)
	
	Если Картинка = Неопределено Тогда
		Возврат Новый Картинка;
	Иначе
		Возврат Картинка;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что значение имеет ссылочный тип.
// 
&НаСервереБезКонтекста
Функция ЭтоСсылочноеЗначение(Значение) Экспорт
	
	Попытка
		МетаданныеЗначения = Значение.Метаданные();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если Метаданные.Справочники.Содержит(МетаданныеЗначения) или
		 Метаданные.Документы.Содержит(МетаданныеЗначения) или
		 Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения) или
		 Метаданные.ПланыОбмена.Содержит(МетаданныеЗначения) или
		 Метаданные.ПланыВидовРасчета.Содержит(МетаданныеЗначения) или
		 Метаданные.Перечисления.Содержит(МетаданныеЗначения) или
		 Метаданные.ПланыСчетов.Содержит(МетаданныеЗначения) Тогда
		 
		 Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Переводит строку табличной части в соотвествующую структуру, для передачи на Клиент.
// 
&НаСервере
Функция СтокаТЧВСтруктуруНаСервере(СтрокаТЧ, Колонки, ИндексСтроки, СтруктураРодителя = Неопределено)
	
	СтруктураСтроки = Новый Структура;
              
	Для Каждого Колонка Из Колонки Цикл
		
		Если Колонка.Имя = "Расшифровка" Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки.Вставить(Колонка.Имя, СтрокаТЧ[Колонка.Имя]);
		
	КонецЦикла;
	
	МассивИндексСтроки = Новый Массив;
	
	Если СтруктураРодителя <> Неопределено Тогда
		Для Каждого ИндексРодителя Из СтруктураРодителя.ИндексСтроки Цикл
			МассивИндексСтроки.Добавить(ИндексРодителя);
		КонецЦикла;
	КонецЕсли;
	
	МассивИндексСтроки.Добавить(ИндексСтроки);
	
	СтруктураСтроки.Вставить("ИндексСтроки", МассивИндексСтроки);
		
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает строку подчиненной/главной ТЗ по массиву индексов строки.
// 
&НаСервере
Функция ПолучитьСтрокуПоИндексу(Табличка, ИндексСтроки, НомерИндекса = 0)
	
	Если НомерИндекса = ИндексСтроки.Количество() - 1 Тогда
		Возврат Табличка[ИндексСтроки[НомерИндекса]];
	Иначе	
		Возврат ПолучитьСтрокуПоИндексу(Табличка[ИндексСтроки[НомерИндекса]].Расшифровка, ИндексСтроки, НомерИндекса + 1);
	КонецЕсли;
	
КонецФункции

// Получает имя разворота с учетом особенностей именования разворотов по периодам.
// 
&НаСервереБезКонтекста
Функция ПолучитьИмяРазворотаДляОтбора(ИмяРазворота)
	
	ИмяРазворота_				= ИмяРазворота;
	
	Если ЕстьПериодВИмени(ИмяРазворота) Тогда
		ИмяРазворота_ 	= "Период";
	КонецЕсли;
	
	Если ИмяРазворота = "СубСчет" Тогда
		ИмяРазворота_ = "Счет";
	КонецЕсли;
	
	ИмяРазворота_ = СтрЗаменить(ИмяРазворота_, "_0_", ".");
	
	Возврат ИмяРазворота_;
	
КонецФункции

// Проверяет, возможно ли присутствие у разворота свойства "Наименование".
// 
&НаСервереБезКонтекста
Функция ВозможноНаименование(ИмяРазворота)
	
	Если (Найти(ИмяРазворота, "Субконто") > 0 или 
		Найти(ИмяРазворота, "Счет") > 0 или 
		Найти(ИмяРазворота, "Организация") > 0 или
		Найти(ИмяРазворота, "Валюта") > 0) и не Найти(ИмяРазворота, ".") > 0 Тогда
		
		Возврат Истина;
		
	КонецЕсли;	
		
	Возврат Ложь;
	
КонецФункции

// Проверяет отбор на предмет присутствия разворотов, противоречащих получению таблицы остатков.
// 
&НаСервереБезКонтекста
Функция ОтборИсключаетОстатки(Отбор, ИмяРегистраБухгалтерии)
	
	МассивИсключающихОстатки = Новый Массив;
	МассивИсключающихОстатки.Добавить("КорСчет");
	МассивИсключающихОстатки.Добавить("КорСубконто1");
	МассивИсключающихОстатки.Добавить("КорСубконто2");
	МассивИсключающихОстатки.Добавить("КорСубконто3");
	МассивИсключающихОстатки.Добавить("КорСубконто4");
	МассивИсключающихОстатки.Добавить("КорСубконто5");
	МассивИсключающихОстатки.Добавить("Регистратор");
	
	Для Каждого ТекИзмерение Из Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].Измерения Цикл
		Если ТекИзмерение.Балансовый Тогда
			Продолжить;
		КонецЕсли;
		МассивИсключающихОстатки.Добавить(ТекИзмерение.Имя + "Кор");
	КонецЦикла;
		
	Для Каждого Исключающий Из МассивИсключающихОстатки Цикл
		Если Отбор.Свойство(Исключающий) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;          
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, является ли разворот разворотом по измерению регистра бухгалтерии.
// 
&НаСервереБезКонтекста
Функция ЭтоИзмерениеРегистра(ИмяРегистраБухгалтерии, ИмяРазворота, ЭтоИзмерениеКор = Ложь)
	
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	
	// Если ИмяРазворота содержит точку - нужно проверить первое до точки слово.
	Точка = Найти(ИмяРазворота, ".");
	
	ИмяРазворотаПроверка = ИмяРазворота;
	
	Если Точка <> 0 Тогда
		ИмяРазворотаПроверка = Лев(ИмяРазворота, Точка - 1);
	КонецЕсли;
	
	ЭтоИзмерениеКор = Ложь;
	Если Прав(ИмяРазворотаПроверка, 3) = "Кор" И МетаданныеРегистра.Измерения.Найти(ИмяРазворотаПроверка) = Неопределено Тогда
		ИмяРазворотаПроверка = Сред(ИмяРазворотаПроверка, 1, СтрДлина(ИмяРазворотаПроверка) - 3);
		ЭтоИзмерениеКор = Истина;
	КонецЕсли;
	
	Возврат МетаданныеРегистра.Измерения.Найти(ИмяРазворотаПроверка) <> Неопределено;
	
КонецФункции

// По имени периода в отборе получает периодичность общего разворота расшифровки
// для указания его в параметрах виртуальной таблицы при выборке оборотов.
// 
&НаСервереБезКонтекста
Функция ПолучитьПериодичностьОтбора(Отбор)
	
	Периодичность = "";
	
	Для Каждого СтрокаОтбора Из Отбор Цикл
		
		Если ЕстьПериодВИмени(СтрокаОтбора.Ключ) Тогда
			Периодичность = СтрЗаменить(СтрокаОтбора.Ключ, "Период", "");
		КонецЕсли;
		
		Если СтрокаОтбора.Ключ = "Регистратор" Тогда
			Периодичность = "Регистратор";
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Периодичность;
	
КонецФункции

// В соотвествии с указанным периодом формирует его начало и окончание в соотвествии с настройками отчета.
// 
&НаСервереБезКонтекста
Процедура ЗаполнитьПсевдоПериод(Отбор, ДатаНачПсевдо, ДатаКонПсевдо)
	
	Для Каждого СтрокаОтбора Из Отбор Цикл
		Если ЕстьПериодВИмени(СтрокаОтбора.Ключ) Тогда
			
			// Установим новый псевдопериод
			СтрокаПериодичность = СтрЗаменить(СтрокаОтбора.Ключ, "Период", "");
			
			Если СтрокаПериодичность = "Год" Тогда
				
				ДатаНачПсевдо = НачалоГода(СтрокаОтбора.Значение);
				ДатаКонПсевдо = КонецГода(СтрокаОтбора.Значение);
				
        	ИначеЕсли СтрокаПериодичность = "Квартал" Тогда

				ДатаНачПсевдо = НачалоКвартала(СтрокаОтбора.Значение);
				ДатаКонПсевдо = КонецКвартала(СтрокаОтбора.Значение);
				
			ИначеЕсли СтрокаПериодичность = "Месяц" Тогда
				
				ДатаНачПсевдо = НачалоМесяца(СтрокаОтбора.Значение);
				ДатаКонПсевдо = КонецМесяца(СтрокаОтбора.Значение);
				
			ИначеЕсли СтрокаПериодичность = "Неделя" Тогда
				
				ДатаНачПсевдо = НачалоНедели(СтрокаОтбора.Значение);
				ДатаКонПсевдо = КонецНедели(СтрокаОтбора.Значение);
				
			ИначеЕсли СтрокаПериодичность = "День" Тогда
				
				ДатаНачПсевдо = НачалоДня(СтрокаОтбора.Значение);
				ДатаКонПсевдо = КонецДня(СтрокаОтбора.Значение);
				
			КонецЕсли;	
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, является ли выбранный показатель балансовым для указанного регистра бухгалтерии.
// 
&НаСервере
Функция БалансовыйПоказатель(Показатель, ИмяРегистра)
	
	Возврат Метаданные.РегистрыБухгалтерии[ИмяРегистра].Ресурсы[Показатель.Значение].Балансовый;
	
КонецФункции

// Открывает значение выбранной расшифровки.
// 
&НаКлиенте
Процедура ОткрытьРасшифровку(Расшифровка)
	
	ИмяМакета = Расшифровка.ИмяМакета;
	
	Если ИмяМакета = "СубСчет" Тогда
		ИмяМакета = "Счет";
	КонецЕсли;
	
	ПутьКЗначению = СтрЗаменить(ИмяМакета, ".", "");
	Значение 	  = Расшифровка[ПутьКЗначению];
	ПоказатьЗначение( , Значение);
		
КонецПроцедуры // ОткрытьРасшифровку()

// BIT Amerkulov 13062014 /Использование вида сравнения ++
&НаКлиенте
Процедура ОтборПоИзмерениямЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Массив = Новый Массив;
	Массив.Добавить(ТипЗнч(Элементы.ОтборПоИзмерениям.ТекущиеДанные.бит_ТипЗначения));				
	ОписаниеТиповСсылка = Новый ОписаниеТипов(Массив);	
	
	Если Элементы.ОтборПоИзмерениям.ТекущиеДанные.бит_ВидСравнения = "В списке" Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СписокЗначений"));				
		ОписаниеТипов = Новый ОписаниеТипов(Массив);		
		Элемент.ОграничениеТипа = ОписаниеТипов;

		Если Элементы.ОтборПоИзмерениям.ТекущиеДанные.Значение = Неопределено Тогда
			Элементы.ОтборПоИзмерениям.ТекущиеДанные.Значение = Новый СписокЗначений;
		КонецЕсли;
		
		Элементы.ОтборПоИзмерениям.ТекущиеДанные.Значение.ТипЗначения = ОписаниеТиповСсылка;		
	Иначе		

		Элемент.ОграничениеТипа = ОписаниеТиповСсылка;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИзмерениямбит_ВидСравненияПриИзменении(Элемент)
	Элементы.ОтборПоИзмерениям.ТекущиеДанные.Значение = Неопределено;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура битДополнитьСтрокуОграниченийПоРеквизитам(Запрос, СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту, ВидСравненияЗапроса) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр(ИмяОграниченияПоРеквизиту, ОграничениеПоРеквизиту);
	
	Если ВидСравненияЗапроса = "В списке" Тогда
		СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " В (&" + ИмяОграниченияПоРеквизиту + ") ";		
	Иначе		
		СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " = &" + ИмяОграниченияПоРеквизиту + " ";
	КонецЕсли;
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

&НаСервере
Функция ПолучитьСоставПериметраКонсолидации(ПериметрКонсолидации, Период) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&Период, ПериметрКонсолидации = &ПериметрКонсолидации) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |ГДЕ
	               |	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &Период
	               |			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = &ПустаяДата)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", 				Период);
	Запрос.УстановитьПараметр("ПустаяДата",				Дата('00010101'));
	Запрос.УстановитьПараметр("ПериметрКонсолидации", 	ПериметрКонсолидации);
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции // ПолучитьСоставПериметраКонсолидации()

// BIT Amerkulov 13062014 /Использование вида сравнения --

// BIT Amerkulov 13072014 /Использование периметров ++
&НаСервере
Функция ПолучитьСоставПериметраКонсолидацииСУсловиями(ПериметрКонсолидации, ПериодНачало, ПериодКонец) Экспорт

	ТекстЗапроса = "ВЫБРАТЬ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация,
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Период,
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания
	               |ПОМЕСТИТЬ ВР_Итог
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(
	               |			&ПериодКонец,
	               |			ПериметрКонсолидации = &ПериметрКонсолидации
	               |				И НЕ Организация В
	               |						(ВЫБРАТЬ
	               |							бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
	               |						ИЗ
	               |							РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&НачалоПериод, ПериметрКонсолидации = &ПериметрКонсолидации) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |						ГДЕ
	               |							(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &ПериодКонец
	               |								ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = &ПустаяДата))) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |ГДЕ
	               |	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &НачалоПериод
	               |			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = &ПустаяДата)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания,
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация,
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Период
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация,
	               |	&ПустаяДата,
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания
	               |ИЗ
	               |	РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(
	               |			&ПериодКонец,
	               |			ПериметрКонсолидации = &ПериметрКонсолидации
	               |				И НЕ Организация В
	               |						(ВЫБРАТЬ
	               |							бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация
	               |						ИЗ
	               |							РегистрСведений.бит_му_СоставПериметровКонсолидации.СрезПоследних(&ПериодКонец, ПериметрКонсолидации = &ПериметрКонсолидации) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |						ГДЕ
	               |							(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &ПериодКонец
	               |								ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = &ПустаяДата))) КАК бит_му_СоставПериметровКонсолидацииСрезПоследних
	               |ГДЕ
	               |	(КОНЕЦПЕРИОДА(бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания, ДЕНЬ) >= &НачалоПериод
	               |			ИЛИ бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания = &ПустаяДата)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.Организация,
	               |	бит_му_СоставПериметровКонсолидацииСрезПоследних.ДатаОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВР_Итог.Организация,
	               |	МАКСИМУМ(ВР_Итог.Период) КАК Период,
	               |	МАКСИМУМ(ВР_Итог.ДатаОкончания) КАК ДатаОкончания,
	               |	&НачалоПериод,
	               |	&ПериодКонец
	               |ИЗ
	               |	ВР_Итог КАК ВР_Итог
	               |ГДЕ
	               |	КОНЕЦПЕРИОДА(ВР_Итог.Период, ДЕНЬ) >= &НачалоПериод
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВР_Итог.Организация";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачалоПериод", 			ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКонец", 	ПериодКонец);
	Запрос.УстановитьПараметр("ПустаяДата",				Дата('00010101'));
	Запрос.УстановитьПараметр("ПериметрКонсолидации", 	ПериметрКонсолидации);

	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомостьБИТ(СписокПоказателей, Знач ПоляДляВыборки = Истина, 
		Знач ИспользоватьАлиасыПолей = Ложь, Знач ИспользоватьВКачествеПрефиксаАлиасаИмяПоказателя = Ложь, ПолучатьРазвернутыйОстаток = Ложь,
        ОчищатьИтоги = Ложь,ДанныеПоОрганизации =неопределено,ТекстВложенный =  "") Экспорт
		
	СтрокаЗапроса = "";	
	//РазвернутыйОстаток = ?(ПолучатьРазвернутыйОстаток, "Развернутый", "");
			
	Если ПоляДляВыборки Тогда
		
		МассивСуффиксов = Новый Массив;
		МассивСуффиксов.Добавить("");
		МассивСуффиксов.Добавить("Развернутый");
		
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			
			Для Каждого РазвернутыйОстаток Из МассивСуффиксов Цикл
				
				СтрокаЗапроса =  СтрокаЗапроса + ",
				|	" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
				|	" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
				|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
				|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт";
				
			КонецЦикла;
			
			СтрокаЗапроса = СтрокаЗапроса + ",
			|	" + ТекПоказатель.Значение + "ОборотДт,
			|	" + ТекПоказатель.Значение + "ОборотКт";
			
		КонецЦикла;
		
	Иначе
		
		МассивСуффиксов = Новый Массив;
		МассивСуффиксов.Добавить("");
		МассивСуффиксов.Добавить("Развернутый");
		
		// выборка для суммирования
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			
			Для Каждого РазвернутыйОстаток Из МассивСуффиксов Цикл
				
				СтрокаЗапроса = СтрокаЗапроса + ",
				|	СУММА(" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт),
				|	СУММА(" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт),
				|	СУММА(" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт),
				|	СУММА(" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт)";
				
			КонецЦикла;
			
			СтрокаЗапроса = СтрокаЗапроса + ",
			|	СУММА(" + ТекПоказатель.Значение + "ОборотДт),
			|	СУММА(" + ТекПоказатель.Значение + "ОборотКт)";
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаЗапроса;
	
КонецФункции // ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость()

// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
//Функция ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомостьБИТОбъединение(СписокПоказателей, Знач ПоляДляВыборки = Истина, 
//		Знач ИспользоватьАлиасыПолей = Ложь, Знач ИспользоватьВКачествеПрефиксаАлиасаИмяПоказателя = Ложь, ПолучатьРазвернутыйОстаток = Ложь,
//        ОчищатьИтоги = Ложь,ДанныеПоОрганизации =неопределено,ТекстВложенный =  "") Экспорт
//		
//	СтрокаЗапроса = "";	
//	//РазвернутыйОстаток = ?(ПолучатьРазвернутыйОстаток, "Развернутый", "");
//			
//	Если ПоляДляВыборки Тогда
//		
//		МассивСуффиксов = Новый Массив;
//		МассивСуффиксов.Добавить("");
//		МассивСуффиксов.Добавить("Развернутый");
//		
//		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
//			
//			Для Каждого РазвернутыйОстаток Из МассивСуффиксов Цикл
//				
//				СтрокаЗапроса =  СтрокаЗапроса + ",
//				|	0 КАК " + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
//				|	0 КАК " + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
//				|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
//				|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт";
//				
//			КонецЦикла;
//			
//			СтрокаЗапроса = СтрокаЗапроса + ",
//			|	" + ТекПоказатель.Значение + "ОборотДт,
//			|	" + ТекПоказатель.Значение + "ОборотКт";
//			
//		КонецЦикла;
//		
//	Иначе
//		
//		МассивСуффиксов = Новый Массив;
//		МассивСуффиксов.Добавить("");
//		МассивСуффиксов.Добавить("Развернутый");
//		
//		// выборка для суммирования
//		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
//			
//			Для Каждого РазвернутыйОстаток Из МассивСуффиксов Цикл
//				
//				СтрокаЗапроса = СтрокаЗапроса + ",
//				|	СУММА(" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт),
//				|	СУММА(" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт),
//				|	СУММА(" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт),
//				|	СУММА(" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт)";
//				
//			КонецЦикла;
//			
//			СтрокаЗапроса = СтрокаЗапроса + ",
//			|	СУММА(" + ТекПоказатель.Значение + "ОборотДт),
//			|	СУММА(" + ТекПоказатель.Значение + "ОборотКт)";
//			
//		КонецЦикла;
//		
//	КонецЕсли;
//	
//	Возврат СтрокаЗапроса;
//	
//КонецФункции // ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость()

Функция ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомостьБИТОбъединение(СписокПоказателей, Знач ПоляДляВыборки = Истина, 
		Знач ИспользоватьАлиасыПолей = Ложь, Знач ИспользоватьВКачествеПрефиксаАлиасаИмяПоказателя = Ложь, ПолучатьРазвернутыйОстаток = Ложь,
        ОчищатьИтоги = Ложь,ДанныеПоОрганизации =неопределено,ТекстВложенный =  "", ПостроитьНачИтог = Ложь, ПостроитьКонИтог = Ложь) Экспорт
		
		
	СтрокаЗапроса = "";	
	//РазвернутыйОстаток = ?(ПолучатьРазвернутыйОстаток, "Развернутый", "");
			
	Если ПоляДляВыборки Тогда
		
		МассивСуффиксов = Новый Массив;
		МассивСуффиксов.Добавить("");
		МассивСуффиксов.Добавить("Развернутый");
		
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			
			Для Каждого РазвернутыйОстаток Из МассивСуффиксов Цикл
				
				Если ПостроитьНачИтог И ПостроитьКонИтог Тогда
					
					СтрокаЗапроса =  СтрокаЗапроса + ",
					|	" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
					|	" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
					|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
					|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт";

				ИначеЕсли ПостроитьНачИтог И НЕ ПостроитьКонИтог Тогда
					
					СтрокаЗапроса =  СтрокаЗапроса + ",
					|	" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
					|	" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
					|	0 КАК " + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
					|	0 КАК " + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт";

				ИначеЕсли НЕ ПостроитьНачИтог И ПостроитьКонИтог Тогда
					
					СтрокаЗапроса =  СтрокаЗапроса + ",
					|	0 КАК " + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
					|	0 КАК " + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
					|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
					|	" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт";

				Иначе
					
					СтрокаЗапроса =  СтрокаЗапроса + ",
					|	0 КАК " + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт,
					|	0 КАК " + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт,
					|	0 КАК " + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт,
					|	0 КАК " + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт";
					
				КонецЕсли;
			КонецЦикла;
			
			СтрокаЗапроса = СтрокаЗапроса + ",
			|	" + ТекПоказатель.Значение + "ОборотДт,
			|	" + ТекПоказатель.Значение + "ОборотКт";
			
		КонецЦикла;
		
	Иначе
		
		МассивСуффиксов = Новый Массив;
		МассивСуффиксов.Добавить("");
		МассивСуффиксов.Добавить("Развернутый");
		
		// выборка для суммирования
		Для Каждого ТекПоказатель Из СписокПоказателей Цикл
			
			Для Каждого РазвернутыйОстаток Из МассивСуффиксов Цикл
				
				СтрокаЗапроса = СтрокаЗапроса + ",
				|	СУММА(" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокДт),
				|	СУММА(" + ТекПоказатель.Значение + "Начальный" + РазвернутыйОстаток + "ОстатокКт),
				|	СУММА(" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокДт),
				|	СУММА(" + ТекПоказатель.Значение + "Конечный" + РазвернутыйОстаток + "ОстатокКт)";
				
			КонецЦикла;
			
			СтрокаЗапроса = СтрокаЗапроса + ",
			|	СУММА(" + ТекПоказатель.Значение + "ОборотДт),
			|	СУММА(" + ТекПоказатель.Значение + "ОборотКт)";
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаЗапроса;
	
КонецФункции // ВернутьЧастьЗапросаПоВыборкеПолейОборотноСальдоваяВедомость()
// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
&НаСервереБезКонтекста
Функция СформироватьТекстВыборкиИзТаблицыОборотовИОстатковРегистраБухгалтерииБИТ(Запрос, СтруктураПараметров, СтруктураПараметровОСВ, 
	Знач ИмяАлиасаТаблицы = "ОстаткиИОбороты", Индекс, Строка, Знач ДопОграничениеПоСчету = "" ) Экспорт
	
	СтрокаОграниченийПоРеквизитам = "";
	
	Если ЕстьОрганизация(СтруктураПараметров.ИмяРегистраБухгалтерии) Тогда
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-06-12 (#2981)
		Если Индекс <> 99999 Тогда
			СтрокаОграниченийПоРеквизитам	= "Организация = &Организация"+Формат(Индекс,"ЧГ=");                                                
			Запрос.УстановитьПараметр("Организация"+Индекс, Строка.Организация);
		Иначе
			СтрокаОграниченийПоРеквизитам	= "Организация В (&Организация"+Формат(Индекс,"ЧГ=")+")";
		КонецЕсли;
		// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-06-12 (#2981)
	КонецЕсли;
		
	
	//ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграниченийПоРеквизитам, "ВидУчета", СтруктураПараметровОСВ.СтруктураОграничений.ВидУчета);
	
	Для Каждого ОграничениеИзмерение Из СтруктураПараметров.ТаблицаОтбора Цикл
		
		// BIT Amerkulov 13062014 /Использование вида сравнения ++		
		битДополнитьСтрокуОграниченийПоРеквизитам(Запрос, СтрокаОграниченийПоРеквизитам, ОграничениеИзмерение.Измерение, ОграничениеИзмерение.Значение, ОграничениеИзмерение.бит_ВидСравнения);
		//ДополнитьСтрокуОграниченийПоРеквизитам(Запрос, СтрокаОграниченийПоРеквизитам, ОграничениеИзмерение.Измерение, ОграничениеИзмерение.Значение);
		// BIT Amerkulov 13062014 /Использование вида сравнения --
		
				
	КонецЦикла;
	
	СтрокаСвязкиДопОграниченияПоСчету = ?(ПустаяСтрока(ДопОграничениеПоСчету), "", " И ");
	
	

	ДатаКонец = "&КонПериода";
    ДатаНачало = "&НачПериода";

    Если Строка <> неопределено Тогда 
	
	Если Строка.ДатаОкончания > СтруктураПараметров.НачалоПериода и
					Строка.ДатаОкончания < КонецДня(СтруктураПараметров.ОкончаниеПериода) Тогда 
					ДатаКонец = "&ДатаКон"+Индекс;
					Запрос.УстановитьПараметр("ДатаКон"+Индекс, КонецДня(Строка.ДатаОкончания));
				Иначе 
					ДатаКонец = "&КонПериода";
				КонецЕсли;
				
				Если Строка.Период > СтруктураПараметров.НачалоПериода Тогда 
					ДатаНачало = "&ДатаНач"+ Индекс;
					Запрос.УстановитьПараметр("ДатаНач"+Индекс,Строка.Период);
				Иначе 
					ДатаНачало = "&НачПериода";
				КонецЕсли;
			КонецЕсли;
			
	СтрокаЧастиЗапроса = "
			|ИЗ
			|	РегистрБухгалтерии." + СтруктураПараметров.ИмяРегистраБухгалтерии + ".ОстаткиИОбороты( "
			+ ?(СтруктураПараметров.НачалоПериода = '00010101000000', "", ДатаНачало) + ", "		
			// ОКЕЙ Чернов И.Е.(СофтЛаб) Начало 2018-02-16 (#2981)
			//+ ?(СтруктураПараметров.ОкончаниеПериода = '00010101000000', "", ДатаКонец)
			+ ?(СтруктураПараметров.ОкончаниеПериода = '00010101000000' ИЛИ Строка.ДатаОкончания = '22000101', "", ДатаКонец)
			// ОКЕЙ Чернов И.Е.(СофтЛаб) Конец 2018-02-16 (#2981)
			+ ", , , " + ДопОграничениеПоСчету  
			+ ?(СтруктураПараметровОСВ.СтруктураОграничений.ИспользоватьОграниченияПоЗабалансовымСчетам = Ложь 
				ИЛИ СтруктураПараметровОСВ.СтруктураОграничений.ПоЗабалансовымСчетам = Истина, "", СтрокаСвязкиДопОграниченияПоСчету + " НЕ Счет.Забалансовый ") + ", "
			+ ", "
			+ СтрокаОграниченийПоРеквизитам + ") КАК " + ИмяАлиасаТаблицы;
			
	Возврат СтрокаЧастиЗапроса;		
	
КонецФункции

#КонецОбласти
