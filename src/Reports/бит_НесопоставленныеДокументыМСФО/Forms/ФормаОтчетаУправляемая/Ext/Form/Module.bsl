
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит соответствие результатов формирования отчёта
&НаКлиенте
Перем мСоответствиеРезультатов;


////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
            
// бит_ASubbotina Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если фОтказ Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мСоответствиеРезультатов = Новый Соответствие;
	 	
КонецПроцедуры // ПриОткрытии()

// бит_ASubbotina Процедура - обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ("СохраненаНастройка_" + фПолноеИмяОтчета) Тогда
		
		ОбновитьПанельСохраненныхНастроек(Истина, Параметр);
				
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()


////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// бит_ASubbotina Процедура - обработчик команды "КомандаФильтроватьНастройкиПоВариантам"
//
&НаКлиенте
Процедура КомандаФильтроватьНастройкиПоВариантам(Команда)
	
	фФильтроватьНастройкиПоВарианту = Не фФильтроватьНастройкиПоВарианту;
	
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
КонецПроцедуры // КомандаФильтроватьНастройкиПоВариантам()

// бит_ASubbotina Процедура - обработчик команды "КомандаПанельНастроек"
//
&НаКлиенте
Процедура КомандаПанельНастроек(Команда)
	
	фСкрытьПанельНастроек = Не фСкрытьПанельНастроек;
	
	Элементы.ФормаКомандаПанельНастроек.Пометка = Не фСкрытьПанельНастроек;
	Элементы.ГруппаПанельНастроек.Видимость     = Не фСкрытьПанельНастроек;	
	
КонецПроцедуры // КомандаПанельНастроек()

// бит_ASubbotina Процедура - обработчик команды "КомандаПанельСохраненныхНастроек"
//
&НаКлиенте
Процедура КомандаПанельСохраненныхНастроек(Команда)
	
	фСкрытьПанельСохранённыхНастроек = Не фСкрытьПанельСохранённыхНастроек;
	
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка   = Не фСкрытьПанельСохранённыхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохранённыхНастроек;
	
КонецПроцедуры // КомандаПанельСохраненныхНастроек()

// бит_ASubbotina Процедура - обработчик команды "КомандаПанельСохраненныхНастроек"
//
&НаКлиенте
Процедура КомандаОбновитьПанельСохраненныхНастроек(Команда)
	
	ОбновитьПанельСохраненныхНастроек(Истина);	
	
КонецПроцедуры // КомандаОбновитьПанельСохраненныхНастроек()


// бит_ASubbotina Процедура - обработчик команды "Результат_ПоказатьВОтдельномОкне"
//
&НаКлиенте
Процедура Результат_ПоказатьВОтдельномОкне(Команда)
	
	бит_ОтчетыКлиент.ПоказатьКопиюРезультата(Результат);	
		
КонецПроцедуры // Результат_ПоказатьВОтдельномОкне()


////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// бит_ASubbotina Процедура - обработчик события "Нажатие" элемента формы "ДекорацияНастройки<№>".
//
&НаКлиенте
Процедура ДекорацияСохраненнойНастройкиНажатие(Элемент)
	
	// Сохраним результат
	Если ЗначениеЗаполнено(фИмяЭлемента_ВыбраннаяНастройка) 
		И фСтруктураСохраненныхНастроек.Свойство(фИмяЭлемента_ВыбраннаяНастройка) Тогда
		СтруктураСохр = Новый Структура("Результат, ДанныеРасшифровки", Результат, ДанныеРасшифровки);
		КлючНастройки = фСтруктураСохраненныхНастроек[фИмяЭлемента_ВыбраннаяНастройка].КлючНастройки;
		мСоответствиеРезультатов.Вставить(КлючНастройки, СтруктураСохр);
	КонецЕсли;
	
	// Обновление пользовательских настроек
	ИмяЭлемента = Элемент.Имя;
	НастройкиОбновлены = ОбновитьНастройки(ИмяЭлемента, мСоответствиеРезультатов);
	Если Не НастройкиОбновлены Тогда
		ТекстСообщения = Нстр("ru = 'Настройка не найдена. Обновите панель сохраненных настроек.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения); 	
	КонецЕсли;
	
	бит_ОтчетыКлиент.ОбработатьНажатиеНаПолеСохраненнойНастройки(Элементы, 
																Элемент, 
																фИмяЭлемента_ВыбраннаяНастройка);
																	     			
КонецПроцедуры // ДекорацияСохраненнойНастройкиНажатие()


////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// бит_ASubbotina Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Метаданные.Отчеты.бит_УстановленныеВизы;
	
	// Вызов механизма защиты
	фПолноеИмяОтчета = МетаданныеОбъекта.ПолноеИмя();
	бит_ЛицензированиеБФCервер.ПроверитьВозможностьРаботы(ЭтаФорма, фПолноеИмяОтчета, фОтказ);
	
	фЗагружатьНастройки   = Истина;
	
	УправлениеВидимостьюДоступностью();
	
	ОбновитьПанельСохраненныхНастроек();
		
КонецПроцедуры // ПриСозданииНаСервере()

// бит_ASubbotina Процедура - обработчик события "ПриЗагрузкеДанныхИзНастроекНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	фСкрытьПанельНастроек 			 = Настройки.Получить("фСкрытьПанельНастроек");
	фСкрытьПанельСохранённыхНастроек = Настройки.Получить("фСкрытьПанельСохранённыхНастроек");
	фФильтроватьНастройкиПоВарианту  = Настройки.Получить("фФильтроватьНастройкиПоВарианту");
	
	// Видимость панели настроек
	Элементы.ФормаКомандаПанельНастроек.Пометка = Не фСкрытьПанельНастроек;	
	Элементы.ГруппаПанельНастроек.Видимость     = Не фСкрытьПанельНастроек;
	
	// Видимость панели сохранённых настроек
	Элементы.ФормаКомандаПанельСохраненныхНастроек.Пометка 	 = Не фСкрытьПанельСохранённыхНастроек;
	Элементы.ГруппаПанельВыбораСохраненныхНастроек.Видимость = Не фСкрытьПанельСохранённыхНастроек;
	
	// Фильтр сохранённых настроек по варианту
	Элементы.КомандаФильтроватьНастройкиПоВариантам.Пометка = фФильтроватьНастройкиПоВарианту;
	ИзменитьФильтрНастроек(фФильтроватьНастройкиПоВарианту);
	
	УправлениеВидимостьюДоступностью();
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

// бит_ASubbotina Процедура - обработчик события "ПриСохраненииВариантаНаСервере" формы.
//
&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	Если фКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		УстановитьТекущийВариант(КлючТекущегоВарианта); 		
	КонецЕсли;
	
КонецПроцедуры // ПриСохраненииВариантаНаСервере()

// бит_ASubbotina Процедура - обработчик события "ПриЗагрузкеВариантаНаСервере" формы.
//
&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
	
	фКлючТекущегоВарианта = КлючТекущегоВарианта;

	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
		
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту);
	
	Если фЗагружатьНастройки Тогда
		
		// Установка настройки, используемой при открытии, если такая указана в справочнике
		//КлючНастройкиПоУмолчанию = бит_ОтчетыСервер.ПолучитьКлючНастройкиИспользуемойПриОткрытии(фПолноеИмяОтчета, 
		//																						фСписокНеДоступныхНастроек,
		//																						КлючТекущегоВарианта);
		КлючНастройкиПоУмолчанию = бит_ОтчетыСервер.НайтиНастройкуПоУмолчаниюДляОбъекта(КлючОбъекта, Истина);
		
		Если ЗначениеЗаполнено(КлючНастройкиПоУмолчанию) Тогда
			УстановитьТекущиеПользовательскиеНастройки(КлючНастройкиПоУмолчанию);
		Иначе
			УстановитьСтандартныеНастройкиСервер(Истина);
			фИмяЭлемента_ВыбраннаяНастройка = "";
		КонецЕсли;
		
		Результат.Очистить();
		
	КонецЕсли;
		
КонецПроцедуры // ПриЗагрузкеВариантаНаСервере()
 
// бит_ASubbotina Процедура - обработчик события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы.
// 
&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Настройки = Неопределено ИЛИ Не фЗагружатьНастройки Тогда 
		Возврат;
	КонецЕсли;
	
	Если Настройки.ДополнительныеСвойства.Свойство("КлючНастройки") Тогда
		ТекКлючНастройки = Настройки.ДополнительныеСвойства.КлючНастройки;
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);
	КонецЕсли;
			
КонецПроцедуры // ПриЗагрузкеПользовательскихНастроекНаСервере()


////////////////////////////////////////////////////////////////////////////
// СЕРВЕРНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// бит_ASubbotina Процедура управляет видимостью и доступностью элементов формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура УправлениеВидимостьюДоступностью()
	
	// Установка видимости и доступности элементов формы в зависимости от типа отчёта 
	// - обычный или расшифровка 
	бит_ОтчетыСервер.УстановитьВидимостьДоступностьЭлементов(Элементы, 
															Параметры.КлючВарианта, 
															Параметры.ПредставлениеВарианта);
		          	
КонецПроцедуры // УправлениеВидимостьюДоступностью()

// бит_ASubbotina Процедура включает/отключает фильтр настроек по варианту
//
// Параметры:
//  Фильтровать  - Булево
//
&НаСервере
Процедура ИзменитьФильтрНастроек(Фильтровать)

	КлючОбъекта = ?(ЗначениеЗаполнено(КлючТекущегоВарианта), 
					фПолноеИмяОтчета + "/" + КлючТекущегоВарианта, 
					фПолноеИмяОтчета);
	бит_ОтчетыСервер.ИзменитьВидимостьСохраненныхНастроек(Элементы, фСтруктураСохраненныхНастроек, КлючОбъекта, фФильтроватьНастройкиПоВарианту);	

КонецПроцедуры // ИзменитьФильтрНастроек()

// бит_ASubbotina Функция обновляет настройки отчета
//
// Параметры:
//  ИмяЭлемента  		 	- Строка
//  СоответствиеРезультатов - Соответствие
//
// ВозращаемоеЗначение:
//  Булево - настройки обновлены
//
&НаСервере
Функция ОбновитьНастройки(ИмяЭлемента, СоответствиеРезультатов)

	НастройкиОбновлены = Ложь;
	
	Результат.Очистить();
	
	СтруктураНастроек = фСтруктураСохраненныхНастроек[ИмяЭлемента];
	
	Настройки = бит_ОтчетыСервер.ПолучитьНастройкиОтчета(СтруктураНастроек);
	
	Если Настройки <> Неопределено Тогда
			
		КлючНастройки = СтруктураНастроек.КлючНастройки;    	
		КлючОбъекта = СтрЗаменить(СтруктураНастроек.КлючОбъекта, фПолноеИмяОтчета + "/", "");
		
		Если КлючОбъекта <> КлючТекущегоВарианта Тогда
			фЗагружатьНастройки = Ложь;	
			УстановитьТекущийВариант(КлючОбъекта);
			фЗагружатьНастройки = Истина;
		КонецЕсли;
		
		УстановитьТекущиеПользовательскиеНастройки(КлючНастройки);
		НастройкиОбновлены = Истина;
		
	КонецЕсли;
	
	// Выведем результат, если он уже формировался для текущей настройки
	Если НастройкиОбновлены Тогда		
		СтруктураРез = СоответствиеРезультатов.Получить(КлючНастройки);
		Если СтруктураРез <> Неопределено Тогда
			Результат.Вывести(СтруктураРез.Результат);
			ДанныеРасшифровки = СтруктураРез.ДанныеРасшифровки;
		КонецЕсли; 		
	КонецЕсли;
	       	
	Возврат НастройкиОбновлены;

КонецФункции // ОбновитьНастройки()

// бит_ASubbotina Процедура обновляет панель сохраненных настроек
//
// Параметры:
//  Очищать  - Булево (Необязательный, по умолчанию = Ложь)
//  ТекКлючНастройки  (Необязательный)
//
&НаСервере
Процедура ОбновитьПанельСохраненныхНастроек(Очищать = Ложь, ТекКлючНастройки = Неопределено)

	ГруппаПанели = Элементы.ГруппаПанельВыбораСохраненныхНастроек;
	
	СтруктураДоступности = бит_ОтчетыСервер.ПроверитьДоступностьВариантовНастроек(фПолноеИмяОтчета, Истина);
	//фСписокНеДоступныхВариантов = СтруктураДоступности.СписокНеДоступныхВариантов;
	//фСписокНеДоступныхНастроек  = СтруктураДоступности.СписокНеДоступныхНастроек;

	//
	//Если Очищать Тогда 	
	//	
	//	бит_РаботаСДиалогамиСервер.УдалитьЭлементыГруппыФормы(Элементы, ГруппаПанели); 			
	//	
	//Иначе
	//	
	//	КлючТекущегоВариантаИзСправочника = бит_ОтчетыСервер.ПолучитьКлючВариантаИспользуемогоПриОткрытии(фПолноеИмяОтчета, фСписокНеДоступныхВариантов, фОтказ);
	//	Если КлючТекущегоВариантаИзСправочника = Неопределено Тогда
	//		КлючТекущегоВарианта = "";
	//		Возврат;
	//	Иначе
	//		КлючТекущегоВарианта = КлючТекущегоВариантаИзСправочника;
	//	КонецЕсли;
	//
	//КонецЕсли;
	//
	//////////////////////////////////////////////////////////////////
	лИспользуемыйПриОткрытииВариант = СтруктураДоступности.ИспользуемыйПриОткрытииВариант;
	
	Если Очищать Тогда 	
		
		бит_РаботаСДиалогамиСервер.УдалитьЭлементыГруппыФормы(Элементы, ГруппаПанели); 			
		
	Иначе
		
		Если лИспользуемыйПриОткрытииВариант = Неопределено Тогда
			КлючТекущегоВарианта = "";
			Возврат;
		Иначе
			КлючТекущегоВарианта = лИспользуемыйПриОткрытииВариант;		
		КонецЕсли;
	
	КонецЕсли; 
	
	//////////////////////////////////////////////////////////////////////
	
	КлючОбъекта = 	фПолноеИмяОтчета + "/" + КлючТекущегоВарианта;
		
	бит_ОтчетыСервер.ОбновитьПанельСохраненныхНастроек(Элементы, 
													ГруппаПанели, 
													КлючОбъекта, 
													фСтруктураСохраненныхНастроек,
													СтруктураДоступности,
													фФильтроватьНастройкиПоВарианту,
													фИмяЭлемента_ВыбраннаяНастройка);
	
	Если ТекКлючНастройки <> Неопределено Тогда
		
		бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
															фСтруктураСохраненныхНастроек, 
															фИмяЭлемента_ВыбраннаяНастройка,
															фФильтроватьНастройкиПоВарианту,
															ТекКлючНастройки);	
		
	Иначе
		фИмяЭлемента_ВыбраннаяНастройка = "";														
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПанельСохраненныхНастроек()

// бит_ASubbotina Процедура устанавливает стандартные настройки варианта 
// и обновляет по ним элементы формы.
// Заменяет типовую команду "СтандартныеНастройки".
//
&НаСервере
Процедура УстановитьСтандартныеНастройкиСервер(ВосстанавливатьНастройки = Ложь)
	
	бит_ОтчетыСервер.УстановитьСтандартныеНастройкиСервер(Отчет, ВосстанавливатьНастройки);
		
	бит_ОтчетыСервер.ВыделитьТекущуюСохраненнуюНастройку(Элементы, 
														фСтруктураСохраненныхНастроек, 
														фИмяЭлемента_ВыбраннаяНастройка,
														фФильтроватьНастройкиПоВарианту);
															
КонецПроцедуры // УстановитьСтандартныеНастройкиСервер()

&НаКлиенте
Процедура ОрганизацияЗаказчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолучитьФормуНаСервере();
КонецПроцедуры

 &НаСервере
 Процедура ПолучитьФормуНаСервере()
	 
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	бит_СобственныеКонтрагенты.Контрагент
	//	|ИЗ
	//	|	РегистрСведений.бит_СобственныеКонтрагенты КАК бит_СобственныеКонтрагенты";

	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();

	//Отбор = Новый Структура();
	//Пока Выборка.Следующий() Цикл
	//	
	//КонецЦикла;



	// 
	// ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", Отбор);
	//
КонецПроцедуры



&НаКлиенте
Процедура ПолеСВыпадающимСпискомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
Список = Новый СписокЗначений;
Список.Добавить("По дате документа");
Список.Добавить("По дате проводок");

РеквизитСВыпадающимСписком=ВыбратьИзСписка(Список, Элементы.ПолеСВыпадающимСписком);
УстановитьПарметрНаСервере(РеквизитСВыпадающимСписком);
КонецПроцедуры

  &НаСервере
Процедура УстановитьПарметрНаСервере(Значение)
	Обработка = РеквизитФормыВЗначение("Отчет");
    Обработка.УстановитьПараметры(Значение);
КонецПроцедуры
  


