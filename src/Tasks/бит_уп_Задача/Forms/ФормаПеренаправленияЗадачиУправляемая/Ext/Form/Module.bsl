
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ЗадачаОснование", ТекущаяЗадача);
	Параметры.Свойство("Режим", Режим);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана задача для перенаправления!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
	
		СрокИсполнения = ТекущаяЗадача.СрокИсполнения;
		МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();
		НастройкиАдресации = Справочники.бит_РолиИсполнителей.НастройкиОбъектовАдресации(РольИсполнителя);	
		
		УстановитьВидимость();
		 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "РольИсполнителя".
// 
&НаКлиенте
Процедура РольИсполнителяПриИзменении(Элемент)
	
	ИзменениеРолиИсполнителя();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СпособАдресации".
// 
&НаКлиенте
Процедура СпособАдресацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ОбъектАдресации_1".
// 
&НаКлиенте
Процедура ОбъектАдресации_1Очистка(Элемент, СтандартнаяОбработка)
	
	ОчисткаОбъектаАдресации("ОбъектАдресации_1");
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ОбъектАдресации_2".
// 
&НаКлиенте
Процедура ОбъектАдресации_2Очистка(Элемент, СтандартнаяОбработка)
	
	ОчисткаОбъектаАдресации("ОбъектАдресации_2");
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ОбъектАдресации_3".
// 
&НаКлиенте
Процедура ОбъектАдресации_3Очистка(Элемент, СтандартнаяОбработка)
	
	ОчисткаОбъектаАдресации("ОбъектАдресации_3");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПеренаправить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		
		Если Режим = "ИзСписка" Тогда
			
			ДействиеВыполнено = ПеренаправитьЗадачу();
			Если ДействиеВыполнено Тогда
				ОповеститьОбИзменении(Тип("ЗадачаСсылка.бит_уп_Задача"));
				Закрыть();
			КонецЕсли; 
			
		ИначеЕсли Режим = "ИзФормы" Тогда	
			
			СтруктураПараметров = СформироватьСтруктуруПараметров();
			Закрыть(СтруктураПараметров);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - обработчик события "ОбработкаПроверкиЗаполненияНаСервере" формы.
// 
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если СпособАдресации = 0 Тогда
		
		// Адресация по исполнителю - РольИсполнителя не обязательна.
		Сч =  ПроверяемыеРеквизиты.Найти("РольИсполнителя");
		
		Если ТипЗнч(Сч) = Тип("Число") Тогда
		
			ПроверяемыеРеквизиты.Удалить(Сч);
		
		КонецЕсли; 
		
	ИначеЕсли СпособАдресации = 1 Тогда	
		
		// Адресация по роли - Исполнитель не обязательный.
		Сч =  ПроверяемыеРеквизиты.Найти("Исполнитель");
		
		Если ТипЗнч(Сч) = Тип("Число") Тогда
		
			ПроверяемыеРеквизиты.Удалить(Сч);
		
		КонецЕсли; 
		
		Для Сч = 1 По МаксКоличествоОбъектов Цикл
		
			ИмяРеквизита = "ОбъектАдресации_"+Сч;
			
			ТекНастройка = Неопределено;
			НастройкиАдресации.Свойство(ИмяРеквизита, ТекНастройка);
			
			Если НЕ ТекНастройка = Неопределено И ТекНастройка.Обязательный Тогда
			
				ПроверяемыеРеквизиты.Добавить(ИмяРеквизита);
			
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция перенаправляет задачу другому исполнителю.
// 
// Возвращаемое значение:
//  флДействиеВыполнено - Булево.
// 
&НаСервере
Функция ПеренаправитьЗадачу()

	ДействиеВыполнено = Ложь;
	
	СтруктураПараметров = СформироватьСтруктуруПараметров();
	ДействиеВыполнено = Задачи.бит_уп_Задача.ПеренаправитьЗадачу(СтруктураПараметров, МаксКоличествоОбъектов);

	Возврат ДействиеВыполнено;
	
КонецФункции // ПеренаправитьЗадачу()

// Функция формирует структуру параметров для перенаправления задачи.
// 
// Возвращаемое значение:
//  СтрПар - Структура.
// 
&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗадачаОснование",ТекущаяЗадача);
	СтруктураПараметров.Вставить("СрокИсполнения" ,СрокИсполнения);
	СтруктураПараметров.Вставить("Комментарий"    ,Комментарий);
	СтруктураПараметров.Вставить("СпособАдресации",СпособАдресации);
	СтруктураПараметров.Вставить("Исполнитель"    ,Исполнитель);
	СтруктураПараметров.Вставить("РольИсполнителя",РольИсполнителя);
	
	Для Индекс = 1 По МаксКоличествоОбъектов Цикл
		ИмяРеквизита = "ОбъектАдресации_"+Индекс;
		СтруктураПараметров.Вставить(ИмяРеквизита, ЭтотОбъект[ИмяРеквизита]);
	КонецЦикла; 
	
	Возврат СтруктураПараметров;
	
КонецФункции // СформироватьСтруктуруПараметров()

// Процедура управляет видимостью элементов формы. 
// 
&НаСервере
Процедура УстановитьВидимость()
	
	флЭтоАдресацияИсполнителю = ?(СпособАдресации = 0,Истина,Ложь);
	флЭтоАдресацияРоли        = ?(СпособАдресации = 1,Истина,Ложь);
	
	Элементы.Исполнитель.Видимость         = флЭтоАдресацияИсполнителю;
	Элементы.ГруппаАдресацияРоли.Видимость = флЭтоАдресацияРоли;
	
	бит_уп_Сервер.НастроитьПоляОбъектовАдресации(Элементы, НастройкиАдресации, МаксКоличествоОбъектов);
	
КонецПроцедуры // УстановитьВидимость()

// Процедура обрабатывает изменение роли исполнителя. 
// 
&НаСервере
Процедура ИзменениеРолиИсполнителя()

	НастройкиАдресации = Справочники.бит_РолиИсполнителей.НастройкиОбъектовАдресации(РольИсполнителя);

	бит_уп_Сервер.НазначитьТипыОбъектовАдресации(ЭтотОбъект, НастройкиАдресации, МаксКоличествоОбъектов);
	
	УстановитьВидимость();

КонецПроцедуры // ИзменениеРолиИсполнителя()

// Процедура осуществляет очистку объекта адресации. 
// 
// Параметры:
//  Имя - Строка.
// 
&НаКлиенте
Процедура ОчисткаОбъектаАдресации(Имя)
	
	ТекНастройка = Неопределено;
	НастройкиАдресации.Свойство(Имя, ТекНастройка);
	
	Если НЕ ТекНастройка = Неопределено Тогда
		ЭтотОбъект[Имя] = ТекНастройка.Тип.ПривестиЗначение(ЭтотОбъект[Имя]);
	Иначе
		ЭтотОбъект[Имя] = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ОчисткаОбъектаАдресации()

#КонецОбласти

