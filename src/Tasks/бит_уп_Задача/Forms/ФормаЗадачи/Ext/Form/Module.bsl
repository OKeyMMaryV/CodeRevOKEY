
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Вызов механизма защиты
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 	
	
	ТабВрем = Задачи.бит_уп_Задача.КонструкторТаблицаДоступныхДействий();
	
	Для каждого СтрокаТаблицы Из ТабВрем Цикл
		
		НоваяСтрока = ТаблицаДоступныеДействия.Добавить();
		НоваяСтрока.Состояние  = Справочники.бит_СтатусыОбъектов[СтрокаТаблицы.Состояние];
		НоваяСтрока.РольЗадачи = СтрокаТаблицы.РольЗадачи;
		НоваяСтрока.Действие   = Перечисления.бит_уп_ДействияЗадач[СтрокаТаблицы.Действие];
		
	КонецЦикла; 
	
	МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();
	
	Если ЗначениеЗаполнено(Объект.АлгоритмПодчиненный) Тогда
	
		ПроцессПодчиненный = Задачи.бит_уп_Задача.НайтиПодчиненныйПроцесс(Объект.Ссылка);
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
	
		Элементы.СсылкаПредмет.Заголовок = Строка(Объект.Предмет);
	
	КонецЕсли; 
	
	//СофтЛаб Начало 2019-09-19 #3423
	Если СтрНайти(ВРег(Объект.Описание), "<HTML>") <> 0 Тогда
	
		Элементы.Описание.Видимость = Ложь;
		Элементы.ОписаниеHTML.Видимость = Истина;
		
	Иначе
		
		Элементы.Описание.Видимость = Истина;
		Элементы.ОписаниеHTML.Видимость = Ложь;
		
	КонецЕсли; 
	//СофтЛаб Конец 2019-09-19 #3423	
	
	ОбновитьКолонкиТаблицыНаПроверку();
	
    УстановитьВидимостьКоманд();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущееДействие = Перечисления.бит_уп_ДействияЗадач.Принять Тогда
		
		Если Задачи.бит_уп_Задача.РазрешеноПринятьКИсполнению(ТекущийОбъект) Тогда
			
			ТекущийОбъект.ПринятьКИсполнению();
			
		КонецЕсли; 
		
	ИначеЕсли ТекущееДействие = Перечисления.бит_уп_ДействияЗадач.Выполнить Тогда
		
		Если Задачи.бит_уп_Задача.РазрешеноОтметитьВыполнение(ТекущийОбъект) Тогда
		
			ТекущийОбъект.ОтметитьВыполнение();
		
		КонецЕсли; 
		
	ИначеЕсли ТекущееДействие = Перечисления.бит_уп_ДействияЗадач.Отменить Тогда
		
		Если Задачи.бит_уп_Задача.РазрешеноОтменить(ТекущийОбъект) Тогда
			
			ТекущийОбъект.ОтменитьЗадачу();
			
		КонецЕсли; 
		
	ИначеЕсли ТекущееДействие = Перечисления.бит_уп_ДействияЗадач.Возобновить Тогда
		
		ТекущийОбъект.ВозобновитьЗадачу();
		
	ИначеЕсли ТекущееДействие = Перечисления.бит_уп_ДействияЗадач.Вернуться Тогда
		
		Если Задачи.бит_уп_Задача.РазрешеноВернуться(ТекущийОбъект) Тогда
			
			ТекущийОбъект.Вернуться();
			
		КонецЕсли; 
		
	ИначеЕсли ТекущееДействие = Перечисления.бит_уп_ДействияЗадач.Перенаправить Тогда
		
		Задачи.бит_уп_Задача.ПеренаправитьЗадачу(ПараметрыПеренаправления, МаксКоличествоОбъектов, Ложь);		
		ТекущийОбъект.ОтметитьВыполнение(, Истина);
		
	КонецЕсли; 
	
	ТекущееДействие = Перечисления.бит_уп_ДействияЗадач.ПустаяСсылка();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьКолонкиТаблицыНаПроверку();
	
	УстановитьВидимостьКоманд();
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СсылкаПредметНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
	
		 ПоказатьЗначение(,Объект.Предмет);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкаАвтоНадписьНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.бит_уп_ПротоколВыполненияАвтоДействийПроцесса.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаПроверку

&НаКлиенте
Процедура НаПроверкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "НаПроверкуНаДоработку" Тогда
		
		 МассивИД = Новый Массив;
		 МассивИД.Добавить(ВыбраннаяСтрока);
		 ОтправитьНаДоработку(МассивИД);
		 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПринять(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренаправить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ФормаПеренаправленияОткрытиеЗавершение", ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗадачаОснование", Объект.Ссылка);
	ПараметрыФормы.Вставить("Режим", "ИзФормы");
	ОткрытьФорму("Задача.бит_уп_Задача.Форма.ФормаПеренаправленияЗадачиУправляемая",ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОкна);
	
КонецПроцедуры

// Процедура обработчик оповещения "ФормаПеренаправленияОткрытиеЗавершение".
// 
// Параметры:
// РезДанные - Структура
// ДополнительныеДанные - Структура.
// 
&НаКлиенте 
Процедура ФормаПеренаправленияОткрытиеЗавершение(РезДанные, ДополнительныеДанные) Экспорт

	ПараметрыПеренаправления = РезДанные;
	Если ТипЗнч(ПараметрыПеренаправления) = Тип("Структура") Тогда
		
		ВыполнитьКоманду(ДополнительныеДанные.ИмяКоманды);
		
	КонецЕсли; 
	
КонецПроцедуры	// ФормаПеренаправленияОткрытиеЗавершение

&НаКлиенте
Процедура КомандаОтменить(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВозобновить(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВернуться(Команда)
	
	ВыполнитьКоманду(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗадачаНаОсновании(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		РежимОкна  = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗадачаОснование", Объект.Ссылка);
		ОткрытьФорму("Задача.бит_уп_Задача.Форма.ФормаСозданияЗадачиУправляемая",ПараметрыФормы, ЭтаФорма,,,,, РежимОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИсториюСостояний(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.Форма.ФормаИсторияСостоянийЗадач",ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтартоватьПодчиненный(Команда)
	
	СтартоватьПодчиненныйПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПринятьЗадачи(Команда)
	
	МассивВыделенных = Элементы.НаПроверку.ВыделенныеСтроки;
	
	ПринятьЗадачи(МассивВыделенных);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНаДоработку(Команда)
	
	МассивВыделенных = Элементы.НаПроверку.ВыделенныеСтроки;
	
	ОтправитьНаДоработку(МассивВыделенных);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьНаПроверку(Команда)
	
	ОбновитьКолонкиТаблицыНаПроверку();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет команду задачи.
// 
// Параметры:
//  ИмяКоманды - Строка.
// 
&НаСервере
Процедура ВыполнитьКоманду(ИмяКоманды)

  ИмяДействия    = СтрЗаменить(ИмяКоманды, "Команда", "");	
  ТекущееДействие = Перечисления.бит_уп_ДействияЗадач[ИмяДействия];	
  
  Если ДоступныеДействия.НайтиПоЗначению(ТекущееДействие) = Неопределено Тогда
	  
	  // Действие не доступно
	  
  Иначе	
	  
	  // Выполняем действие
	  Записать();
	  
  КонецЕсли; 

КонецПроцедуры // ВыполнитьКоманду()

// Процедура устанавливает видимость элементов формы. 
// 
&НаСервере
Процедура УстановитьВидимость()
	
	флЕстьНевыполненныеАвтоДействия = Задачи.бит_уп_Задача.ЕстьНевыполненныеАвтоДействия(Объект.Ссылка);
	
	флВидимостьПредмета = ЗначениеЗаполнено(Объект.Предмет);
	Элементы.ДекорацияНадписьПредмет.Видимость = флВидимостьПредмета;
	Элементы.СсылкаПредмет.Видимость = флВидимостьПредмета;
	
	Элементы.ЗадачаОснование.Видимость = ?(ЗначениеЗаполнено(Объект.ЗадачаОснование),Истина,Ложь);

	Элементы.ГруппаПроцессОбщая.Видимость                    = ?(ЗначениеЗаполнено(Объект.ТочкаАлгоритма), Истина, Ложь);
	
	Элементы.ГруппаПроцессАлгоритмПодчиненный.Видимость = ?(ЗначениеЗаполнено(Объект.АлгоритмПодчиненный), Истина, Ложь);
	Элементы.КомандаСтартоватьПодчиненный.Видимость     = ?(НЕ ПроцессПодчиненный.Стартован, Истина, Ложь);
	
	Элементы.ГруппаНаПроверку.Видимость = Объект.ЭтоПроверочнаяЗадача;
	
	Элементы.НаПроверку.Доступность = НЕ Объект.Выполнена;
	
	Элементы.Виза.Видимость = ЗначениеЗаполнено(Объект.Виза);
	
	Элементы.ГруппаОшибкаАвтоДействий.Видимость = флЕстьНевыполненныеАвтоДействия;
	
КонецПроцедуры // УстановитьВидимость() 

// Процедура заполняет список доступных действий.
// 
&НаСервере
Процедура ОпределитьДоступныеДействия()
	
	ДоступныеДействия.Очистить();
	
	РолиВЗадаче = Задачи.бит_уп_Задача.РольВЗадаче(Объект);
	
	Для каждого киз Из РолиВЗадаче Цикл
		
		СтрОтбор = Новый Структура;
		СтрОтбор.Вставить("Состояние", Объект.Состояние);		
		
		Если КиЗ.Значение = Истина Тогда
			
			СтрОтбор.Вставить("РольЗадачи", КиЗ.Ключ);
			
		Иначе	
			
			Продолжить;
			
		КонецЕсли; 
		
		НайденныеСтроки = ТаблицаДоступныеДействия.НайтиСтроки(СтрОтбор);
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			Если ДоступныеДействия.НайтиПоЗначению(СтрокаТаблицы.Действие) = Неопределено Тогда
				
				ДоступныеДействия.Добавить(СтрокаТаблицы.Действие);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		
	КонецЦикла; 	
	
КонецПроцедуры // ОпределитьДоступныеДействия()

// Процедура устанавливает видимость команд задачи.
// 
&НаСервере
Процедура УстановитьВидимостьКоманд()

	ОпределитьДоступныеДействия();
	
    Для каждого ЗнПеречисления Из Перечисления.бит_уп_ДействияЗадач Цикл
	
		флВидимость = ?(ДоступныеДействия.НайтиПоЗначению(ЗнПеречисления) = Неопределено, Ложь, Истина);
		
		ИмяПеречисления = бит_ОбщегоНазначения.ПолучитьИмяЗначенияПеречисления(Перечисления.бит_уп_ДействияЗадач, ЗнПеречисления);
		ИмяКнопки       = "Команда"+ИмяПеречисления;
		Элементы[ИмяКнопки].Видимость = флВидимость;
	
	КонецЦикла; 

	Элементы.ГруппаДействияЗадачи.Видимость = ?(НЕ ЗначениеЗаполнено(Объект.АлгоритмПодчиненный), Истина, Ложь);
		
КонецПроцедуры // УстановитьВидимостьКоманд()

// Процедура выполняет старт подчиненного бизнес-процесса. 
// 
&НаСервере
Процедура СтартоватьПодчиненныйПроцесс()

	Если НЕ ЗначениеЗаполнено(ПроцессПодчиненный) Тогда
		
		ПроцессОбъект      = Задачи.бит_уп_Задача.СоздатьПодчиненныйБизнесПроцесс(Объект.Ссылка, Истина, "Все");
		ПроцессПодчиненный = ПроцессОбъект.Ссылка;
		
	ИначеЕсли НЕ ПроцессПодчиненный.Стартован Тогда
		
		ПроцессОбъект = ПроцессПодчиненный.ПолучитьОбъект();
		бит_ОбщегоНазначения.СтартоватьБизнесПроцесс(ПроцессОбъект, "Все");
		
	КонецЕсли; 
	
КонецПроцедуры // СтартоватьПодчиненныйПроцесс()

// Процедура обновляет динамические поля таблицы НаПроверку.
// 
&НаСервере
Процедура ОбновитьКолонкиТаблицыНаПроверку()
	
	Для каждого СтрокаТаблицы Из Объект.НаПроверку Цикл
		
		СтрокаТаблицы.НаДоработку = "На доработку";
		СтрокаТаблицы.Состояние = СтрокаТаблицы.Задача.Состояние;
		
	КонецЦикла; 
	
КонецПроцедуры // ОбновитьКолонкиТаблицыНаПроверку()

// Процедура возвращает задачи, подлежащие проверке, на доработку. 
// 
// Параметры:
//  МассивИД - Массив
// 
&НаСервере
Процедура ОтправитьНаДоработку(МассивИД)
	
	МассивНаДоработку = Новый Массив;	
	
	Для каждого ТекИД Из МассивИД Цикл
		
		ТекущаяСтрока = Объект.НаПроверку.НайтиПоИдентификатору(ТекИД);
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ТекущаяСтрока.Принято = Ложь;
			
			СтрПар = Новый Структура("Задача, Комментарий", ТекущаяСтрока.Задача, ТекущаяСтрока.Комментарий);
			
			МассивНаДоработку.Добавить(СтрПар);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Записать();
	
	Задачи.бит_уп_Задача.НаДоработку(МассивНаДоработку);
	
	Для каждого ТекИД Из МассивИД Цикл
		
		ТекущаяСтрока = Объект.НаПроверку.НайтиПоИдентификатору(ТекИД);
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ТекущаяСтрока.Состояние = ТекущаяСтрока.Задача.Состояние;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	// Задача была изменена из другой задачи при возврате на доработку - обновим данные формы.
	ЭтаФорма.Прочитать();
	УстановитьВидимость();
	УстановитьВидимостьКоманд();
	ОбновитьКолонкиТаблицыНаПроверку();	
	
КонецПроцедуры // ОтправитьНаДоработку()

// Процедура принимает задачи, предназначенные на проверку.
// 
// Параметры:
//  МассивИД - Массив.
// 
&НаСервере
Процедура ПринятьЗадачи(МассивИД)
	
	Для каждого ТекИД Из МассивИД Цикл
		
		ТекущаяСтрока = Объект.НаПроверку.НайтиПоИдентификатору(ТекИД);
		
		Если НЕ ТекущаяСтрока = Неопределено Тогда
			
			ТекущаяСтрока.Принято   = Истина;
			ТекущаяСтрока.Состояние = ТекущаяСтрока.Задача.Состояние;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // ПринятьЗадачи()

#КонецОбласти
