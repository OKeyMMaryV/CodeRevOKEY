#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда 
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма       = Метаданные.Задачи.бит_уп_Задача.Формы.ФормаСозданияЗадачиУправляемая;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СозданиеЗадач

// Конструктор структуры задачи.
// 
// Возвращаемое значение:
//  РезСтруктура - Структура.
// 
Функция СтруктураЗадачи() Экспорт

	РезСтруктура = Новый Структура("Важность
	                                |, Наименование
									|, Описание
									|, СпособАдресации
									|, СрокИсполнения
									|, Исполнитель
									|, РольИсполнителя
									|, Предмет
									|, Виза
									|, ЗадачаОснование
									|, БизнесПроцесс
									|, ТочкаМаршрута
									|, Алгоритм
									|, АлгоритмПодчиненный
									|, ТочкаАлгоритма
									|, ЭтоПроверочнаяЗадача
									|, МассивНаПроверку");
									
	МаксКоличествоОбъектов = бит_уп_Сервер.МаксимальноеКоличествоОбъектовАдресации();
	
	Для н = 1 По МаксКоличествоОбъектов Цикл
	
		РезСтруктура.Вставить("ОбъектАдресации_"+н);
	
	КонецЦикла; 

	РезСтруктура.Вставить("ПараметрыПроцесса", Новый Структура);
	РезСтруктура.ЭтоПроверочнаяЗадача = Ложь;
	РезСтруктура.МассивНаПроверку     = Новый Массив;
	
	Возврат РезСтруктура;
	
КонецФункции // СтруктураЗадачи()

// Функция заполняет вновь созданную задачу.
// 
// Параметры:
//  СтруктураЗадачи - Структура
//  МаксКоличествоОбъектов - Число.
// 
// Возвращаемое значение:
//  нз - ЗадачаОбъект.бит_уп_Задача.
// 
Функция ЗаполнитьОбъектЗадачи(СтруктураЗадачи, МаксКоличествоОбъектов) Экспорт

	нз = Задачи.бит_уп_Задача.СоздатьЗадачу();
	нз.Автор = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	нз.Важность = СтруктураЗадачи.Важность;
	нз.СрокИсполнения = СтруктураЗадачи.СрокИсполнения;
	нз.Наименование   = СтруктураЗадачи.Наименование;
	нз.Описание       = СтруктураЗадачи.Описание;
	нз.Дата           = ТекущаяДата();
	нз.УстановитьНовыйНомер();
	
	Если СтруктураЗадачи.СпособАдресации = 0 Тогда
		
		нз.Исполнитель = СтруктураЗадачи.Исполнитель;
		
	ИначеЕсли СтруктураЗадачи.СпособАдресации = 1 Тогда	
		
		нз.РольИсполнителя = СтруктураЗадачи.РольИсполнителя;
		
		Для н = 1 По МаксКоличествоОбъектов Цикл
		
			ИмяРеквизита = "ОбъектАдресации_"+н;
			
			ВремСтрукт       = Новый Структура("Значение", СтруктураЗадачи[ИмяРеквизита]);
			ОбъектАдресации  = БизнесПроцессы.бит_уп_Процесс.ПолучитьЗначениеПараметраПроцесса(ВремСтрукт, СтруктураЗадачи.ПараметрыПроцесса);
			нз[ИмяРеквизита] = ОбъектАдресации;
			
		КонецЦикла; 
		
	КонецЕсли; 

	СтруктураЗадачи.Свойство("Состояние",нз.Состояние);
	
	Если НЕ ЗначениеЗаполнено(нз.Состояние) Тогда
	
		нз.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Создана;
	
	КонецЕсли; 
	
	нз.Предмет         = СтруктураЗадачи.Предмет;
	нз.Виза			   = СтруктураЗадачи.Виза;
	нз.ЗадачаОснование = СтруктураЗадачи.ЗадачаОснование;
	нз.БизнесПроцесс   = СтруктураЗадачи.БизнесПроцесс;
	нз.ТочкаМаршрута   = СтруктураЗадачи.ТочкаМаршрута;
	нз.Алгоритм        = СтруктураЗадачи.Алгоритм;
	нз.АлгоритмПодчиненный = СтруктураЗадачи.АлгоритмПодчиненный;
	нз.ТочкаАлгоритма      = СтруктураЗадачи.ТочкаАлгоритма;

	нз.ЭтоПроверочнаяЗадача = СтруктураЗадачи.ЭтоПроверочнаяЗадача;
	
	Если СтруктураЗадачи.ЭтоПроверочнаяЗадача 
		 И ТипЗнч(СтруктураЗадачи.МассивНаПроверку) = Тип("Массив") Тогда
	
		Для каждого Элемент Из СтруктураЗадачи.МассивНаПроверку Цикл
		
			 НоваяСтрока = нз.НаПроверку.Добавить();
			 НоваяСтрока.Задача = Элемент;
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Возврат нз;
	
КонецФункции // ЗаполнитьОбъектЗадачи()

// Функция создает и записывает новую задачу.
// 
// Параметры:
//  СтруктураЗадачи - Структура
//  МаксКоличествоОбъектов - Число
//  РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флДействиеВыполнено - Булево.
// 
Функция СоздатьНовуюЗадачу(СтруктураЗадачи, МаксКоличествоОбъектов, РежимСообщений = "Ошибки") Экспорт
	
	нз = ЗаполнитьОбъектЗадачи(СтруктураЗадачи, МаксКоличествоОбъектов);
	флДействиеВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(нз, РежимСообщений);
	
	Возврат ?(флДействиеВыполнено, нз.ссылка, Задачи.бит_уп_Задача.ПустаяСсылка());
	
КонецФункции // СоздатьНовуюЗадачу()

#КонецОбласти

#Область ДействияСЗадачами

// Функция перенаправляет задачу другому исполнителю/исполнителям.
// 
// Параметры:
//  СтрПар - Структура
//  МаксКоличествоОбъектов - Число
//  ОтмечатьВыполнениеОснования - Булево
//  РежимСообщений - Строка.
// 
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ПеренаправитьЗадачу(СтрПар, МаксКоличествоОбъектов, ОтмечатьВыполнениеОснования = Истина, РежимСообщений = "Ошибки") Экспорт

	флВыполнено = Ложь;
	
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	РежимыВывода    = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	СтрЗадачи = СтруктураЗадачи();
	СтрЗадачи.Важность = СтрПар.ЗадачаОснование.Важность;
	СтрЗадачи.СрокИсполнения = СтрПар.СрокИсполнения;
	СтрЗадачи.Наименование   = СтрПар.ЗадачаОснование.Наименование;
	СтрЗадачи.Описание       = СтрПар.ЗадачаОснование.Описание;
	Если ЗначениеЗаполнено(СтрПар.Комментарий) Тогда
	
		СтрЗадачи.Описание = СтрЗадачи.Описание
		                     +?(ПустаяСтрока(СтрЗадачи.Описание),"",Символы.ПС+"------------------------"+Символы.ПС)
							 +Строка(ТекПользователь)
							 +" "
							 +ТекущаяДата()
							 +":"
							 +Символы.ПС
							 +СтрПар.Комментарий;
	
	КонецЕсли; 

	СтрЗадачи.Предмет = СтрПар.ЗадачаОснование.Предмет;
	СтрЗадачи.СпособАдресации = СтрПар.СпособАдресации;
	СтрЗадачи.Исполнитель     = СтрПар.Исполнитель;
	СтрЗадачи.РольИсполнителя = СтрПар.РольИсполнителя;
	СтрЗадачи.ЗадачаОснование = СтрПар.ЗадачаОснование;
	СтрЗадачи.Виза			  = СтрПар.ЗадачаОснование.Виза;
	
	Для н = 1 По МаксКоличествоОбъектов Цикл
		
		ИмяРеквизита = "ОбъектАдресации_"+н;
		СтрЗадачи[ИмяРеквизита] = СтрПар[ИмяРеквизита];
		
	КонецЦикла; 
	
	СтрЗадачи.БизнесПроцесс = СтрПар.ЗадачаОснование.БизнесПроцесс;
	СтрЗадачи.ТочкаМаршрута = СтрПар.ЗадачаОснование.ТочкаМаршрута;
	СтрЗадачи.Алгоритм      = СтрПар.ЗадачаОснование.Алгоритм;
	СтрЗадачи.ТочкаАлгоритма= СтрПар.ЗадачаОснование.ТочкаАлгоритма;
	
	СтрЗадачи.ЭтоПроверочнаяЗадача = СтрПар.ЗадачаОснование.ЭтоПроверочнаяЗадача;
	СтрЗадачи.МассивНаПроверку     = СтрПар.ЗадачаОснование.НаПроверку.ВыгрузитьКолонку("Задача");
	
	НачатьТранзакцию();
	
	ЗадачаСсылка = СоздатьНовуюЗадачу(СтрЗадачи, МаксКоличествоОбъектов, РежимСообщений);
	флВыполнено = ?(ЗначениеЗаполнено(ЗадачаСсылка), Истина, Ложь);
	
	Если флВыполнено Тогда
		
		Если ОтмечатьВыполнениеОснования Тогда
			ОтметитьВыполнение(СтрПар.ЗадачаОснование, Истина,  РежимСообщений);
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЗафиксироватьТранзакцию();
	
	Если флВыполнено Тогда
	
		ТекстСообщения = НСтр("ru = 'Задача ""%1%"" перенаправлена.'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(СтрПар.ЗадачаОснование.Наименование));
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
	
	КонецЕсли; 
	
	Возврат флВыполнено;
	
КонецФункции // ПеренаправитьЗадачу()

// Функция принимает задачи к исполнению.
// 
// Параметры:
//   ВхЗадачи - Массив/ЗадачаСсылка.бит_уп_Задачи
//   РежимСообщений - Строка
//   СтрПар - Структура.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ПринятьЗадачу(ВхЗадачи, РежимСообщений = "Ошибки", СтрПар = Неопределено) Экспорт
	
	флВыполнено = Ложь;
	
	МассивЗадачи = МассивВходящихЗадач(ВхЗадачи);
	
	Для каждого ЗадачаСсылка Из МассивЗадачи Цикл
		
		Если РазрешеноПринятьКИсполнению(ЗадачаСсылка) Тогда
			
			ЗадачаОбъект   = ЗадачаСсылка.ПолучитьОбъект();
			ЗадачаОбъект.ПринятьКИсполнению();
			флВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(ЗадачаОбъект, РежимСообщений);
			
			флЗаблокировано = бит_ОбщегоНазначения.ЗаблокироватьОбъект(ЗадачаОбъект);
			
			Если флЗаблокировано Тогда
				
				ЗадачаОбъект.ПринятьКИсполнению();
				Если ТипЗнч(СтрПар) = Тип("Структура") И СтрПар.Свойство("РезультатВыполнения") Тогда
					
					ЗадачаОбъект.РезультатВыполнения = СтрПар.РезультатВыполнения;
					
				КонецЕсли; 							
				флВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(ЗадачаОбъект, РежимСообщений);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат флВыполнено;
	
КонецФункции // ПринятьЗадачу()

// Функция отменяет выполнение задач.
// 
// Параметры:
//   ВхЗадачи - Массив/ЗадачаСсылка.бит_уп_Задачи
//   ЭтоПеренаправление - Булево
//   РежимСообщений - Строка
//   СтрПар - Структура.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ОтметитьВыполнение(ВхЗадачи, ЭтоПеренаправление = Ложь, РежимСообщений = "Ошибки", СтрПар = Неопределено) Экспорт
	
	флВыполнено = Ложь;
	
	МассивЗадачи = МассивВходящихЗадач(ВхЗадачи);
	
	Для каждого ЗадачаСсылка Из МассивЗадачи Цикл
		
		Если РазрешеноОтметитьВыполнение(ЗадачаСсылка, ЭтоПеренаправление) Тогда
			
			ЗадачаОбъект   = ЗадачаСсылка.ПолучитьОбъект();
			флЗаблокировано = бит_ОбщегоНазначения.ЗаблокироватьОбъект(ЗадачаОбъект);
			
			Если флЗаблокировано Тогда
				
				ЗадачаОбъект.ОтметитьВыполнение(Истина, ЭтоПеренаправление);
				Если ТипЗнч(СтрПар) = Тип("Структура") И СтрПар.Свойство("РезультатВыполнения") Тогда
					
					ЗадачаОбъект.РезультатВыполнения = СтрПар.РезультатВыполнения;
					
				КонецЕсли; 				
				флВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(ЗадачаОбъект, РежимСообщений);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат флВыполнено;
	
КонецФункции // ОтметитьВыполнение()

// Функция останавливает задачи.
// 
// Параметры:
//   ВхЗадачи - Массив/ЗадачаСсылка.бит_уп_Задачи
//   ВыполнятьБезусловно - Булево
//   РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция Остановить(ВхЗадачи, ВыполнятьБезусловно = Ложь, РежимСообщений = "Ошибки")  Экспорт
	
	флВыполнено  = Ложь;
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	МассивЗадачи = МассивВходящихЗадач(ВхЗадачи);
	
	Для каждого ЗадачаСсылка Из МассивЗадачи Цикл
		
		Если ВыполнятьБезусловно ИЛИ РазрешеноОстановить(ЗадачаСсылка, РежимыВывода.ВыводитьОшибки) Тогда
			
			ЗадачаОбъект    = ЗадачаСсылка.ПолучитьОбъект();
			
			ЗадачаОбъект.Остановить();
			флВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(ЗадачаОбъект, РежимСообщений);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат флВыполнено;
	
КонецФункции // Остановить()

// Функция отменяет задачи.
// 
// Параметры:
//   ВхЗадачи - Массив/ЗадачаСсылка.бит_уп_Задачи
//   ВыполнятьБезусловно - Булево
//   РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция Отменить(ВхЗадачи, ВыполнятьБезусловно = Ложь, РежимСообщений = "Ошибки")  Экспорт
	
	флВыполнено  = Ложь;
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	МассивЗадачи = МассивВходящихЗадач(ВхЗадачи);
	
	Для каждого ЗадачаСсылка Из МассивЗадачи Цикл
		
		Если ВыполнятьБезусловно ИЛИ РазрешеноОтменить(ЗадачаСсылка, РежимыВывода.ВыводитьОшибки) Тогда
			
			ЗадачаОбъект    = ЗадачаСсылка.ПолучитьОбъект();
			
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Создана;

			флВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(ЗадачаОбъект, РежимСообщений);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат флВыполнено;
	
КонецФункции // Отменить()

// Функция возобновляет выполнение остановленных задач.
// 
// Параметры:
//   ВхЗадачи - Массив/ЗадачаСсылка.бит_уп_Задачи
//   ВыполнятьБезусловно - Булево
//   РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция ПродолжитьВыполнение(ВхЗадачи, ВыполнятьБезусловно = Ложь, РежимСообщений = "Ошибки")  Экспорт
	
	флВыполнено  = Ложь;
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	МассивЗадачи = МассивВходящихЗадач(ВхЗадачи);
	
	Для каждого ЗадачаСсылка Из МассивЗадачи Цикл
		
		Если ВыполнятьБезусловно ИЛИ РазрешеноПродолжитьВыполнение(ЗадачаСсылка, РежимыВывода.ВыводитьОшибки) Тогда
			
			ЗадачаОбъект    = ЗадачаСсылка.ПолучитьОбъект();
			флЗаблокировано = бит_ОбщегоНазначения.ЗаблокироватьОбъект(ЗадачаОбъект);
			
			Если флЗаблокировано Тогда
				
				ЗадачаОбъект.ПродолжитьВыполнение();
				флВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(ЗадачаОбъект, РежимСообщений);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат флВыполнено;
	
КонецФункции // ПродолжитьВыполнение()

// Функция отправляет задачи на доработку.
// 
// Параметры:
//  МассивНаДоработку - Массив
// 
// Возвращаемое значение:
//  флВыполнено - Булево.
// 
Функция НаДоработку(МассивНаДоработку, РежимСообщений = "Ошибки")  Экспорт
	
	флВыполнено  = Ложь;
	РежимыВывода = бит_ОбщегоНазначения.ОпределитьРежимыВывода(РежимСообщений);
	
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");	
	
	Для каждого СтрПар Из МассивНаДоработку Цикл
		
		ЗадачаСсылка = СтрПар.Задача;
		
		Если РазрешеноОтменить(ЗадачаСсылка) Тогда
		
			ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Создана;
			
			ЗадачаОбъект.Описание = ЗадачаОбъект.Описание
			                     +?(ПустаяСтрока(ЗадачаОбъект.Описание),"",Символы.ПС+"------------------------"+Символы.ПС)
								 +НСтр("ru = 'Задача возвращена на доработку '")
								 +Строка(ТекПользователь)
								 +" "
								 +ТекущаяДата();
								 
			Если НЕ ПустаяСтрока(СтрПар.Комментарий) Тогда
			
				ЗадачаОбъект.Описание = ЗадачаОбъект.Описание
											 +":"
											 +Символы.ПС
											 +СтрПар.Комментарий;
				
			
			КонецЕсли; 					 
			
			флВыполнено = бит_ОбщегоНазначения.ЗаписатьЗадачу(ЗадачаОбъект, РежимСообщений);
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат флВыполнено;
	
КонецФункции // ПродолжитьВыполнение()

#КонецОбласти

#Область ПроверочныеФункции

// Функция определяет можно ли данную задачу принимать к исполнению.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  флРазрешено - Булево.
// 
Функция РазрешеноПринятьКИсполнению(ЗадачаОбъект) Экспорт

	Разрешено = Ложь;
	
	Если ЗадачаОбъект.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Создана Тогда
		Разрешено = Истина;
	Иначе	
		ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1"". К исполнению может быть принята задача в состоянии ""Создана""!'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,Строка(ЗадачаОбъект.Ссылка));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗадачаОбъект.Ссылка);
	КонецЕсли; 

	ТекПользователь = Пользователи.ТекущийПользователь();
	Исполнитель     = ЗадачаОбъект.Исполнитель;
	Если ЗначениеЗаполнено(Исполнитель) 
		И Исполнитель <> ТекПользователь
		И Не ПользовательЗаместительИсполнителя(Исполнитель, ТекПользователь) Тогда
		
		ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1"". Задача может быть принята к исполнению только пользователем ""%2""!'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,Строка(ЗадачаОбъект), Исполнитель);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗадачаОбъект.Ссылка);

		Разрешено = Ложь;
		
	КонецЕсли; 
	
	Возврат Разрешено;
	
КонецФункции // РазрешеноПринятьКИсполнению()

// Функция определяет можно ли данную задачу остановить.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  флРазрешено - Булево.
// 
Функция РазрешеноОстановить(ЗадачаСсылка, ВыводитьСообщения = Истина) Экспорт
	
	флРазрешено = Ложь;
	
	Если ЗадачаСсылка.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Создана 
		ИЛИ ЗадачаСсылка.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Принята Тогда
		
		флРазрешено = Истина;
		
	Иначе	
		
		Если ВыводитьСообщения Тогда
			
			ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1%"". Остановлена может быть задача в состоянии ""Создана"" или ""Принята к исполнению""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(ЗадачаСсылка));		
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат флРазрешено;
	
КонецФункции // РазрешеноОстановить()

// Функция определяет можно ли данную задачу отметить как выполненную.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  флРазрешено - Булево.
// 
Функция РазрешеноОтметитьВыполнение(ЗадачаСсылка, ЭтоПеренаправление = Ложь) Экспорт

	флРазрешено = Ложь;
	
	Если ЗадачаСсылка.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Создана 
		 ИЛИ ЗадачаСсылка.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Принята Тогда
	
		флРазрешено = Истина;
		
	Иначе	
		
		ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1%"". Выполнена может быть задача в состоянии ""Создана"" или ""Принята к исполнению""!'");
		ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(ЗадачаСсылка));		
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		
	КонецЕсли; 

	Если НЕ ЭтоПеренаправление Тогда
		
		ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("ТекущийПользователь");
		Если ЗначениеЗаполнено(ЗадачаСсылка.Исполнитель) 
			И ЗадачаСсылка.Исполнитель <> ТекПользователь Тогда
			
			ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1%"". Задача может быть выполнена только пользователем ""%2%""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(ЗадачаСсылка), ЗадачаСсылка.Исполнитель);
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			флРазрешено = Ложь;
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
	Если ЗадачаСсылка.ЭтоПроверочнаяЗадача Тогда
	
		флВсеПриняты = Истина;
		
		Для каждого СтрокаТаблицы Из ЗадачаСсылка.НаПроверку Цикл
		
			Если НЕ СтрокаТаблицы.Принято Тогда
			
				флВсеПриняты = Ложь;
			    Прервать
			КонецЕсли; 
		
		КонецЦикла; 
		
		Если НЕ флВсеПриняты Тогда
			
			флРазрешено = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1%"". Проверочная задача может быть выполнена только после того, как приняты все задачи, подлежащие проверке!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения,Строка(ЗадачаСсылка));		
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат флРазрешено;
	
КонецФункции // РазрешеноОтметитьВыполнение()

// Функция определяет можно ли данную задачу возобновить.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  флРазрешено - Булево.
// 
Функция РазрешеноПродолжитьВыполнение(ЗадачаСсылка, ВыводитьСообщения = Истина) Экспорт

	флРазрешено = Ложь;
	
	Если ЗадачаСсылка.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Остановлена  Тогда
	
		флРазрешено = Истина;
		
	Иначе	
		
		Если ВыводитьСообщения Тогда
			
			ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1%"". Продолжить выполнение разрешено для задача в состоянии ""%2%""!'");
			ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения
			                                                                              ,Строка(ЗадачаСсылка)
																						  ,Строка(Справочники.бит_СтатусыОбъектов.Задача_Остановлена));	
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат флРазрешено;
	
КонецФункции // РазрешеноПродолжитьВыполнение()

// Функция определяет разрешено ли для данной задачи возвращаться из текущего состояния в предыдущее.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  флРазрешено - Булево.
// 
Функция РазрешеноВернуться(ЗадачаСсылка, ВыводитьСообщения = Истина) Экспорт
	
	флРазрешено = Истина;
	
	Если ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс) Тогда
		
		флЗаполненыНижние = ВыполненыНижестоящиеЗадачи(ЗадачаСсылка);
		
		Если флЗаполненыНижние  Тогда
			
			флРазрешено = Ложь;
			
			Если ВыводитьСообщения Тогда
				
				ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1%"". В процессе ""%2%"" обнаружены выполненные нижестоящие задачи. Команда ""Вернуться"" недоступна.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(ЗадачаСсылка),Строка(ЗадачаСсылка.БизнесПроцесс));	
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат флРазрешено;
	
КонецФункции // РазрешеноВернуться()

// Функция определяет разрешено ли для данной задачи выполнение команды Отменить.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  флРазрешено - Булево.
// 
Функция РазрешеноОтменить(ЗадачаСсылка, ВыводитьСообщения = Истина) Экспорт
	
	флРазрешено = Истина;
	
	Если ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс) Тогда
		
		флЗаполненыНижние = ВыполненыНижестоящиеЗадачи(ЗадачаСсылка);
				
		Если флЗаполненыНижние  Тогда
			
			флРазрешено = Ложь;
			
			Если ВыводитьСообщения Тогда
				
				ТекстСообщения = НСтр("ru = 'Обработка задачи ""%1%"". В процессе ""%2%"" обнаружены выполненные нижестоящие задачи.'");
				ТекстСообщения = бит_ОбщегоНазначенияКлиентСервер.ПодставитьПараметрыСтроки(ТекстСообщения, Строка(ЗадачаСсылка),Строка(ЗадачаСсылка.БизнесПроцесс));	
				бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат флРазрешено;
	
КонецФункции // РазрешеноОтменить()

#КонецОбласти

// Функция считывает из макета таблицу доступных действий.
// 
// Возвращаемое значение:
//  РезСтруктура.Данные - ТаблицаЗначений.
// 
Функция КонструкторТаблицаДоступныхДействий() Экспорт
	
	Макет = Задачи.бит_уп_Задача.ПолучитьМакет("ДоступныеДействия");
	РезСтруктура = бит_ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст());
	
	Возврат РезСтруктура.Данные;
	
КонецФункции // КонструкторТаблицаДоступныхДействий()

// Функция определяет какие роли для данной задачи выполняет пользователь.
// 
// Параметры:
//  вхЗадача - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  СтрРоли - Структура {Автор - Булево, Исполнитель - Булево}.
// 
Функция РольВЗадаче(СтрПар) Экспорт

	СтрРоли = Новый Структура("Автор, Исполнитель, Заместитель", Ложь, Ложь, Ложь);
	ТекПользователь = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
	
	Если ТекПользователь = СтрПар.Автор Тогда
	
		СтрРоли.Автор = Истина;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исполнитель", ТекПользователь);
	Запрос.УстановитьПараметр("Задача", СтрПар.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачиИсполнителя.Ссылка КАК Ссылка
	               |ИЗ
	               |	Задача.бит_уп_Задача.ЗадачиПоИсполнителю(&Исполнитель, Ссылка = &Задача) КАК ЗадачиИсполнителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИСТИНА КАК УсловиеВыполнено
	               |ИЗ
	               |	Задача.бит_уп_Задача КАК Задача
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бит_ЗаместителиПоЗадачам КАК ЗаместителиПоЗадачам
	               |		ПО Задача.Исполнитель = ЗаместителиПоЗадачам.Пользователь
	               |ГДЕ
	               |	ЗаместителиПоЗадачам.Заместитель = &Исполнитель
	               |	И Задача.Ссылка = &Задача";
				   
	Результат = Запрос.ВыполнитьПакет();
	
	СтрРоли.Исполнитель = НЕ Результат[0].Пустой();
    СтрРоли.Заместитель = НЕ Результат[1].Пустой();
	
	Возврат СтрРоли;
	
КонецФункции // РольВЗадаче()

// Функция определяет выполнены ли нижестоящие задачи по процессу.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  флЗаполненыНижние - Булево.
// 
Функция ВыполненыНижестоящиеЗадачи(ЗадачаСсылка) Экспорт
	
	флЗаполненыНижние = Ложь;
	
	ТаблицаЗадач = БизнесПроцессы.бит_уп_Процесс.ПолучитьЗадачиПроцесса(ЗадачаСсылка.БизнесПроцесс);		
	ТаблицаТочек = бит_уп_Сервер.ПолучитьТаблицуТочек(ЗадачаСсылка.Алгоритм,,,ТаблицаЗадач);
	
	бит_уп_Сервер.ПроверитьНижестоящиеТочки(ТаблицаТочек, ЗадачаСсылка.ТочкаАлгоритма, флЗаполненыНижние, "ЗадачиВыполнены", 0);
	
	Возврат флЗаполненыНижние;
	
КонецФункции // ВыполненыНижестоящиеЗадачи()

// Функция возвращает нижестоящие задачи в процессе по отношение к текущей задаче.
// 
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  МассивЗадача - Массив.
// 
Функция НижестоящиеЗадачи(ЗадачаСсылка, Режим) Экспорт
	
	МассивЗадач = Новый Массив;
	
	ТаблицаЗадач = БизнесПроцессы.бит_уп_Процесс.ПолучитьЗадачиПроцесса(ЗадачаСсылка.БизнесПроцесс);		
	ТаблицаТочек = бит_уп_Сервер.ПолучитьТаблицуТочек(ЗадачаСсылка.Алгоритм,,,ТаблицаЗадач);
	ОбойтиНижестоящиеЗадачи(ТаблицаТочек, ЗадачаСсылка.ТочкаАлгоритма, МассивЗадач, Режим, 0);
	
	Возврат МассивЗадач;
	
КонецФункции // НижестоящиеЗадачи()

// Процедура обходит нижестоящие задачи в процессе и заполняет массив задач.
// 
// Параметры:
//  ТаблицаТочек    - ТаблицаЗначений
//  ТочкаНачальная  - СправочникСсылка.бит_уп_ТочкиАлгоритмов
//  МассивЗадач     - Массив
//  Режим - Строка
//  УровеньРекурсии - Число.
// 
Процедура ОбойтиНижестоящиеЗадачи(ТаблицаТочек ,ТочкаНачальная, МассивЗадач, Режим, УровеньРекурсии)  Экспорт
	
	Если УровеньРекурсии > 1000 Тогда
		
		ТекстСообщения = НСтр("ru = 'Превышен уровень рекурсии при проверке заполнения нижестоящих точек алгоритма!'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Возврат;
		
	КонецЕсли;	
	
	СтрокаТаблицыНачальная = ТаблицаТочек.Найти(ТочкаНачальная,"Точка");
	Если СтрокаТаблицыНачальная = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	ИсходящиеТочки      = СтрокаТаблицыНачальная.ИсходящиеТочки;
	ВидТочкиДействие   = Перечисления.бит_уп_ВидыТочекАлгоритмов.Действие;
	
	флЕстьНеЗаполненныеРешения = Ложь;
	КолТочДействия       = 0;
	КолТочДействияБезВиз = 0;
	
	Для Каждого СтрокаИсходящие ИЗ ИсходящиеТочки Цикл
		
		Если СтрокаИсходящие.ВидТочки = ВидТочкиДействие Тогда
			
			// Проверим принято решение в данной точке или нет.
			СтрокаТаблицы = ТаблицаТочек.Найти(СтрокаИсходящие.Точка,"Точка");
			Если НЕ СтрокаТаблицы = Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Задача) Тогда
				
				Если Режим = "Активные" Тогда
				
					Если ЗначениеЗаполнено(СтрокаТаблицы.Задача) И 
						 НЕ СтрокаТаблицы.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Остановлена Тогда
						
						МассивЗадач.Добавить(СтрокаТаблицы.Задача);
						
					КонецЕсли; 
					
				ИначеЕсли Режим = "Остановленные" Тогда	
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.Задача) 
						 И СтрокаТаблицы.Состояние = Справочники.бит_СтатусыОбъектов.Задача_Остановлена Тогда
						
						МассивЗадач.Добавить(СтрокаТаблицы.Задача);
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли;	  
			
		Иначе
			
			Если Режим = "Остановленные" Тогда
				
				ОбойтиНижестоящиеЗадачи(ТаблицаТочек, СтрокаИсходящие.Точка, МассивЗадач, Режим, УровеньРекурсии);
				
			КонецЕсли; 
			
		КонецЕсли;	// Точка действия
		
		Если Режим = "Активные" Тогда
			
			ОбойтиНижестоящиеЗадачи(ТаблицаТочек, СтрокаИсходящие.Точка, МассивЗадач, Режим, УровеньРекурсии);
			
		КонецЕсли; 
		
	КонецЦикла;	// По входящим точкам
	
КонецПроцедуры	// ОбойтиНижестоящиеЗадачи

// Функция выполняет поиск подчиненного задаче бизнес процесса.
// 
// Параметры:
//  ТекущаяЗадача - ЗадачаСсылка.бит_уп_Задача.
// 
// Возвращаемое значение:
//  ПодчиненныйПроцесс - БизнесПроцессСсылка.бит_уп_Процесс.
// 
Функция НайтиПодчиненныйПроцесс(ТекущаяЗадача) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВедущаяЗадача", ТекущаяЗадача);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_уп_Процесс.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.бит_уп_Процесс КАК бит_уп_Процесс
	               |ГДЕ
	               |	бит_уп_Процесс.ВедущаяЗадача = &ВедущаяЗадача";
	

	Результат = Запрос.Выполнить();
	
	ПодчиненныйПроцесс = БизнесПроцессы.бит_уп_Процесс.ПустаяСсылка();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		 ПодчиненныйПроцесс = Выборка.Ссылка;
	
	КонецЕсли; 
				   
	Возврат ПодчиненныйПроцесс;
	
КонецФункции // НайтиПодчиненныйПроцесс()

// Функция создает бизнес-процесс, подчиненный задаче. 
// При необходимости выполняется старт бизнес процесса.
// 
// Параметры:
//   ТекущаяЗадача  - ЗадачаСсылка.бит_уп_Задачи
//   Стартовать     - Булево
//   РежимСообщений - Строка.
// 
// Возвращаемое значение:
//  НовыйПроцесс - БизнесПроцессОбъект.бит_уп_Процесс.
// 
Функция СоздатьПодчиненныйБизнесПроцесс(ТекущаяЗадача, Стартовать, РежимСообщений = "Все") Экспорт
	
	НовыйПроцесс = Неопределено;
	
	Если ЗначениеЗаполнено(ТекущаяЗадача.АлгоритмПодчиненный) Тогда
		
		ПараметрыПроцессаВнеш = БизнесПроцессы.бит_уп_Процесс.ПолучитьПараметрыПроцесса(ТекущаяЗадача.БизнесПроцесс);
		
		НовыйПроцесс = БизнесПроцессы.бит_уп_Процесс.СоздатьБизнесПроцесс();
		
		// Заполнение реквизитов процесса
		НовыйПроцесс.Алгоритм = ТекущаяЗадача.АлгоритмПодчиненный;
		НовыйПроцесс.Автор    = бит_ОбщиеПеременныеСервер.ЗначениеПеременной("глТекущийПользователь");
		НовыйПроцесс.Наименование = ТекущаяЗадача.Наименование;
		НовыйПроцесс.Описание     = ТекущаяЗадача.Описание;
		НовыйПроцесс.ВедущаяЗадача= ТекущаяЗадача;
		НовыйПроцесс.Дата = ТекущаяДата();
		НовыйПроцесс.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);		
		НовыйПроцесс.УстановитьНовыйНомер();
		
		// Установка параметров процесса
		Для каждого СтрокаТаблицы Из ТекущаяЗадача.ТочкаАлгоритма.ПользовательскоеДействие.ДополнительныеПараметры Цикл
		
			НоваяСтрока = НовыйПроцесс.ПараметрыПроцесса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			ТекЗначение = БизнесПроцессы.бит_уп_Процесс.ПолучитьЗначениеПараметраПроцесса(СтрокаТаблицы, ПараметрыПроцессаВнеш);
			НоваяСтрока.Значение = ТекЗначение;
		
		КонецЦикла; 
		
		// Установка динамических параметров из точки действия
		Для каждого СтрокаТаблицы ИЗ ТекущаяЗадача.ТочкаАлгоритма.ПараметрыПроцесса Цикл
			
			СтрОтбор = Новый Структура("Имя", СтрокаТаблицы.Имя);
			
			НайденныеСтроки = НовыйПроцесс.ПараметрыПроцесса.НайтиСтроки(СтрОтбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаПараметр = НайденныеСтроки[0];
				СтрокаПараметр.Значение = СтрокаТаблицы.Значение;
				СтрокаПараметр.СтрТип = СтрокаТаблицы.СтрТип;
				
			КонецЕсли;	
			
		КонецЦикла;	// по параметрам точки действия
		
		флВыполнено = бит_ОбщегоНазначения.ЗаписатьБизнесПроцесс(НовыйПроцесс, РежимСообщений);
		
		Если флВыполнено И Стартовать Тогда
			
			флВыполнено = бит_ОбщегоНазначения.СтартоватьБизнесПроцесс(НовыйПроцесс, РежимСообщений);
			
		КонецЕсли; // Нужно стартовать
		
	КонецЕсли; // ЗначениеЗаполнено(ТекущаяЗадача.Алгоритм).
	
	Возврат НовыйПроцесс;
	
КонецФункции // СтартоватьПодчиненныйПроцесс()

// Функция определяет является ли данная задача ведущей или нет.
// 
// Параметры:
//  Задача - ЗадачаСсылка.бит_уп_Задача, ЗадачаОбъект.бит_уп_Задача.
// 
// Возвращаемое значение:
//  флВедущая - Булево.
// 
Функция ЭтоВедущаяЗадача(Задача) Экспорт
	
	флВедущая = ЗначениеЗаполнено(Задача.АлгоритмПодчиненный);
	
	Возврат флВедущая;
	
КонецФункции // ЭтоВедущаяЗадача()

// Функция определяет наличие невыполненных автоматических действий по или по процессу.
//
// Параметры:
//  Задача - ЗадачаСсылка.бит_уп_Задача, БизнесПроцессСсылка.бит_уп_Процесс.
//
// Возвращаемое значение:
//  флЕсть - Булево.
//
Функция ЕстьНевыполненныеАвтоДействия(Задача) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Таб.ИД
	               |ИЗ
	               |	РегистрСведений.бит_уп_ПротоколВыполненияАвтоДействийПроцесса КАК Таб
	               |ГДЕ
	               |	НЕ Таб.Выполнено";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.бит_уп_Задача") Тогда
		
		Отбор = "Таб.Задача = &Задача";
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(Отбор);
		
	ИначеЕсли ТипЗнч(Задача) = Тип("БизнесПроцессСсылка.бит_уп_Процесс") Тогда	
		
		Отбор = "Таб.Процесс = &Задача";
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(Отбор);
		
	КонецЕсли; 			   
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Результат = Запрос.Выполнить();
	
	флЕсть = НЕ Результат.Пустой();
				   
	Возврат флЕсть;
	
КонецФункции // ЕстьНевыполненныеАвтоДействия()

// Функция возвращает состояние задачи в указанной точке алгоритма.
// 
// Параметры:
//  Точка - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
// 
// Возвращаемое значение:
//  РезСостояние - СправочникСсылка.бит_СтатусыОбъектов.
// 
Функция СостояниеЗадачиВТочке(Точка, Процесс) Экспорт

	РезСостояние = Справочники.бит_СтатусыОбъектов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТочкаАлгоритма", Точка);
	Запрос.УстановитьПараметр("БизнесПроцесс" , Процесс);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	бит_уп_Задача.Состояние
	               |ИЗ
	               |	Задача.бит_уп_Задача КАК бит_уп_Задача
	               |ГДЕ
	               |	бит_уп_Задача.ТочкаАлгоритма = &ТочкаАлгоритма
	               |	И бит_уп_Задача.Алгоритм <> ЗНАЧЕНИЕ(Справочник.бит_уп_Алгоритмы.ПустаяСсылка)
	               |	И бит_уп_Задача.БизнесПроцесс = &БизнесПроцесс";
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РезСостояние = Выборка.Состояние;
	
	КонецЕсли; 

	Возврат РезСостояние;
	
КонецФункции // СостояниеЗадачиВТочке()

// Функция получает массив задач для проверки.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.бит_уп_процессы
//  Точки   - Массив.
// 
// Возвращаемое значение:
//  НаПроверку - Массив.
// 
Функция ПолучитьЗадачиНаПроверку(Процесс, Точки) Экспорт
	
	НаПроверку = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", Процесс);
	Запрос.УстановитьПараметр("Точки", Точки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_уп_Задача.Ссылка КАК Задача
	               |ИЗ
	               |	Задача.бит_уп_Задача КАК бит_уп_Задача
	               |ГДЕ
	               |	бит_уп_Задача.БизнесПроцесс = &БизнесПроцесс
	               |	И бит_уп_Задача.ТочкаАлгоритма В(&Точки)";
				   
				   
	Результат = Запрос.Выполнить();	
	
	НаПроверку = Результат.Выгрузить().ВыгрузитьКолонку("Задача");
	
	Возврат НаПроверку;
	
КонецФункции // ПолучитьЗадачиНаПроверку()

// Функция выполняет поиск задачи по точке алгоритма.
// 
// Параметры:
//   Процесс - БизнесПроцессСсылка.бит_уп_Процесс
//   Точка   - СправочникСсылка.бит_уп_ТочкиАлгоритмов.
// 
// Возвращаемое значение:
//  РезЗадача - ЗадачаСсылка.бит_уп_Задача.
// 
Функция НайтиЗадачу(Процесс, Точка) Экспорт
	
	РезЗадача = Задачи.бит_уп_Задача.ПустаяСсылка();
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("Точка"  , Точка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	бит_уп_Задача.Ссылка
	               |ИЗ
	               |	Задача.бит_уп_Задача КАК бит_уп_Задача
	               |ГДЕ
	               |	бит_уп_Задача.БизнесПроцесс = &Процесс
	               |	И бит_уп_Задача.ТочкаАлгоритма = &Точка";
				   
				   
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		РезЗадача = Выборка.Ссылка;
	
	КонецЕсли; 
				   
	
	Возврат РезЗадача;
	
КонецФункции // НайтиЗадачу()

Процедура УдалитьОшибочныеСсылкиПриПереходеНаНовуюВерсию() Экспорт

	ТипыПредметов = ТипыПредметовЗадач();
	Для каждого ТипПредмета Из ТипыПредметов Цикл
		Запрос = ЗапросДляПолученияЗадачСОшибкойВПредмете(ТипПредмета);
		Если Запрос <> Неопределено Тогда
			УдалитьОшибочныеСсылки(Запрос);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПользовательЗаместительИсполнителя(Пользователь, Заместитель)
	
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заместитель",  Заместитель);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Состояние",    Перечисления.бит_СостоянияЗаместителей.Назначен);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаместителиПоЗадачам.Заместитель КАК Заместитель
		|ИЗ
		|	РегистрСведений.бит_ЗаместителиПоЗадачам КАК ЗаместителиПоЗадачам
		|ГДЕ
		|	ЗаместителиПоЗадачам.Пользователь = &Пользователь
		|	И ЗаместителиПоЗадачам.Заместитель = &Заместитель
		|	И ЗаместителиПоЗадачам.Состояние = &Состояние";
			
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = Истина;
	КонецЕсли; 

	Возврат Результат;

КонецФункции 

// Функция возвращает массив задач в зависимости от типа входящего значения.
// 
// Параметры:
//  ВхЗадачи - Массив/ЗадачаСсылка.бит_уп_Задачи.
// 
// Возвращаемое значение:
//  Результат - Массив.
// 
Функция МассивВходящихЗадач(ВхЗадачи) 
	
	МассивЗадачи = Новый Массив;
	Если ТипЗнч(ВхЗадачи) = Тип("ЗадачаСсылка.бит_уп_Задача") Тогда
		
		МассивЗадачи.Добавить(ВхЗадачи);
		
	Иначе	
		
		МассивЗадачи = ВхЗадачи;
		
	КонецЕсли; 
	
	Возврат МассивЗадачи;
	
КонецФункции // МассивВходящихЗадач()

Функция ТипыПредметовЗадач()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(бит_уп_Задача.Предмет) КАК ТипПредмета
	|ИЗ
	|	Задача.бит_уп_Задача КАК бит_уп_Задача";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТипыПредметов = Новый Массив; 
	Пока Выборка.Следующий() Цикл
		ТипыПредметов.Добавить(Выборка.ТипПредмета);
	КонецЦикла;

	Возврат ТипыПредметов;
	
КонецФункции
 
Процедура УдалитьОшибочныеСсылки(Запрос)
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект(); 
		ТекущийОбъект.Предмет = Неопределено;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
	КонецЦикла;

	ЗафиксироватьТранзакцию();
	
	УдалитьОшибочныеСсылки(Запрос);

КонецПроцедуры
  
Функция ЗапросДляПолученияЗадачСОшибкойВПредмете(ТипПредмета)

	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПредмета);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	бит_уп_Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.бит_уп_Задача КАК бит_уп_Задача
	|ГДЕ
	|	(ВЫБОР КОГДА Выразить(Предмет КАК #Таблица).ПометкаУдаления ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) И Предмет Ссылка #Таблица";
	
	ЧтоЗаменить   = "#Таблица";
	НаЧтоЗаменить = ОбъектМетаданных.ПолноеИмя();
	ТекстЗапроса  = СтрЗаменить(ТекстЗапроса, ЧтоЗаменить, НаЧтоЗаменить);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос;
	
КонецФункции
 
#КонецОбласти

#КонецЕсли
