#Область ОписаниеПеременных

// Хранит текущее имя измерения
&НаКлиенте
Перем мИмяИзмерения;

// Хранит текущую аналитику
&НаКлиенте
Перем мТекущаяАналитика;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
// 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Вызов механизма защиты
    	
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	ЗаполнитьКэшЗначений();
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Тип значений по умолчанию
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		КвЧисла = Новый КвалификаторыЧисла(15, 2);
		Объект.ТипЗначения = Новый ОписаниеТипов(МассивТипов, КвЧисла);			
	
	КонецЕсли;
	
	фМаксимальноДоступноеКоличество = бит_МеханизмДопИзмерений.ПолучитьМаксимальноеКоличествоИзмеренийПроизвольныхПараметров();
	СформироватьСписокВыбораИмяИзмерения();
	
	ОбновитьКоличествоТиповАналитик();
	
	УстановитьВидимость();
	УправлениеДоступностью();
		
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПередЗаписью" формы.
// 
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = Ложь;
		
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписиНаСервере" формы.
// 
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьКоличествоТиповАналитик();
	УправлениеДоступностью();
	
КонецПроцедуры // ПослеЗаписиНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ПриИзменении" поля ввода "ТипЗначения".
// 
&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ТипЗначенияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЕдиницаИзмерения".
// 
&НаКлиенте
Процедура ЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	                             	
	Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
	
		Элемент.ВыбиратьТип  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЕдиницаИзмеренияНачалоВыбора()

&НаКлиенте
Процедура ЕдиницаИзмеренияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ЕдиницаИзмерения = Неопределено;
	
	Элемент.ВыбиратьТип = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" поля ввода "ИспользованиеАналитики".
// 
&НаКлиенте
Процедура ИспользованиеАналитикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	КоличествоАналитик = Объект.ИспользованиеАналитики.Количество();
	Если КоличествоАналитик < фМаксимальноДоступноеКоличество 
		И Не Копирование Тогда
		
		НоваяСтрока = Объект.ИспользованиеАналитики.Добавить();
		НоваяСтрока.ИмяИзмерения = "Аналитика_" + Строка(КоличествоАналитик + 1);
		Элементы.ИспользованиеАналитики.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Если фОгрниченоИзменениеСтруктурыПараметров Тогда
			НоваяСтрока.ЭтоНоваяСтрока = Истина;		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИспользованиеАналитикиПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" поля ввода "ИспользованиеАналитики".
// 
&НаКлиенте
Процедура ИспользованиеАналитикиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИспользованиеАналитики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если фОгрниченоИзменениеСтруктурыПараметров И Не ТекущиеДанные.ЭтоНоваяСтрока Тогда
		Отказ = Истина;	
	КонецЕсли;
	
	Если ТекущиеДанные.НомерСтроки < Объект.ИспользованиеАналитики.Количество() Тогда
		ТекстСообщения = Нстр("ru = 'Удалить можно только последнюю строку таблицы.'");
		бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ИспользованиеАналитикиПередУдалением()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИмяИзмерения"
// таблицы "ИспользованиеАналитики".
// 
&НаКлиенте
Процедура ИспользованиеАналитикиИмяИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИспользованиеАналитики.ТекущиеДанные;
    мИмяИзмерения = ТекущиеДанные.ИмяИзмерения;
	
КонецПроцедуры // ИспользованиеАналитикиИмяИзмеренияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ИмяИзмерения"
// таблицы "ИспользованиеАналитики".
// 
&НаКлиенте
Процедура ИспользованиеАналитикиИмяИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИспользованиеАналитики.ТекущиеДанные;
	
	Для каждого СтрокаАналитика Из Объект.ИспользованиеАналитики Цикл
		Если СтрокаАналитика.ПолучитьИдентификатор() <> ТекущиеДанные.ПолучитьИдентификатор() 
			И СтрокаАналитика.ИмяИзмерения = ТекущиеДанные.ИмяИзмерения Тогда

			ТекстСообщения = Нстр("ru = 'Имя измерения " + СтрокаАналитика.ИмяИзмерения 
							+ " уже выбрано в строке № " + СтрокаАналитика.НомерСтроки + ".'");
			бит_ОбщегоНазначенияКлиентСервер.ВывестиСообщение(ТекстСообщения);
			
			ТекущиеДанные.ИмяИзмерения = мИмяИзмерения;
			
		КонецЕсли;		
	
	КонецЦикла;
	
КонецПроцедуры // ИспользованиеАналитикиИмяИзмеренияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Аналитика"
// таблицы "ИспользованиеАналитики".
// 
&НаКлиенте
Процедура ИспользованиеАналитикиАналитикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные 	  = Элементы.ИспользованиеАналитики.ТекущиеДанные;
	мТекущаяАналитика = ТекущиеДанные.Аналитика;	
	
КонецПроцедуры // ИспользованиеАналитикиАналитикаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Аналитика"
// таблицы "ИспользованиеАналитики".
// 
&НаКлиенте
Процедура ИспользованиеАналитикиАналитикаПриИзменении(Элемент)
	
	ТекущиеДанные 	 = Элементы.ИспользованиеАналитики.ТекущиеДанные;
	ТекущаяАналитика = ТекущиеДанные.Аналитика;
	           	
	Если ЕстьПримитивныйТип(ТекущаяАналитика) Тогда
		Элементы.ИспользованиеАналитики.ТекущиеДанные.Аналитика = мТекущаяАналитика;	
	КонецЕсли;   	
	                          	
	ТекущиеДанные.КоличествоТипов = ПолучитьКоличествоТиповАналитики(ТекущаяАналитика);
	
	мТекущаяАналитика = ТекущаяАналитика;
	
КонецПроцедуры // ИспользованиеАналитикиАналитикаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИмяТипаПоУмолчанию"
// таблицы "ИспользованиеАналитики".
// 
&НаКлиенте
Процедура ИспользованиеАналитикиИмяТипаПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИспользованиеАналитики.ТекущиеДанные;
	ТекущаяАналитика = ТекущиеДанные.Аналитика;
	                          	
	Если ЗначениеЗаполнено(ТекущаяАналитика) Тогда
		
		СписокИменТипов = ПолучитьСписокВыбораИмениТипаАналитики(ТекущаяАналитика);
		
		Оповещение = Новый ОписаниеОповещения("ИспользованиеАналитикиИмяТипаПоУмолчаниюНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
		ПоказатьВыборИзСписка(Оповещение, СписокИменТипов, Элемент);
		
	КонецЕсли;
		
КонецПроцедуры // ИспользованиеАналитикиИмяТипаПоУмолчаниюНачалоВыбора()

// Процедура обработчик оповещения "ИспользованиеАналитикиИмяТипаПоУмолчаниюНачалоВыбораЗавершение".
// 
// Параметры:
// ВыбранноеИмяТипа - Строка.
// ТекущиеДанные - ДанныеФормы.
// 
&НаКлиенте
Процедура ИспользованиеАналитикиИмяТипаПоУмолчаниюНачалоВыбораЗавершение(ВыбранноеИмяТипа, ТекущиеДанные) Экспорт
	
	Если ВыбранноеИмяТипа <> Неопределено Тогда
		
		ТекущиеДанные.ИмяТипаПоУмолчанию = ВыбранноеИмяТипа;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЕстьПримитивныйТип(ТекущаяАналитика)

	ЕстьПримитивныйТип = Ложь;
	
	СтрТипы = НайтиПримитивныеТипы(ТекущаяАналитика);
	
	Если Не ПустаяСтрока(СтрТипы) Тогда
		
		ЕстьПримитивныйТип = Истина;
		
	    ТекстСообщения = "В составе типов аналитики """
		                 +Строка(ТекущаяАналитика)
						 +""" обнаружены примитивные типы: "
		                 +СтрТипы
						 +". Использование примитивных типов запрещено!";				
		бит_ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
	
	КонецЕсли; 
 
	Возврат ЕстьПримитивныйТип;
	
КонецФункции // ЕстьПримитивныйТип()

&НаСервере
Процедура ЗаполнитьКэшЗначений()

	фКэшЗначений = Новый Структура;
	
	фКэшЗначений.Вставить("ИмяСправочникаЕдИзм", бит_ОбщегоНазначения.ПолучитьИмяСправочникаЕдиницыИзмерения());
		
КонецПроцедуры // ЗаполнитьКэшЗначений()

&НаСервере
Процедура УстановитьВидимость()

	ЭтоЧисло = Объект.ТипЗначения.СодержитТип(Тип("Число"));
	
	Элементы.ЕдиницаИзмерения.Видимость = ЭтоЧисло;

КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура УправлениеДоступностью()

	фОгрниченоИзменениеСтруктурыПараметров = Ложь;
	
	Если Не Параметры.Ключ.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Параметр", Объект.Ссылка);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ";
		
		Для i = 1 По фМаксимальноДоступноеКоличество Цикл
			
			ИмяИзмерения = "Аналитика_" + Строка(i);
			
			ТекстЗапроса = ТекстЗапроса + " 
			|	МАКСИМУМ(бит_ЗначенияПараметров." + ИмяИзмерения + ") КАК " + ИмяИзмерения;	
			
			ТекстЗапроса = ТекстЗапроса + ?(i = фМаксимальноДоступноеКоличество, " ", ", ");
			
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.бит_ЗначенияПроизвольныхПараметровРегистратор КАК бит_ЗначенияПараметров
		|ГДЕ
		|	бит_ЗначенияПараметров.Параметр = &Параметр
		|
		|СГРУППИРОВАТЬ ПО
		|	бит_ЗначенияПараметров.Параметр
		|
		|";
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			фОгрниченоИзменениеСтруктурыПараметров = Истина;
			
			Элементы.ТипЗначения.ТолькоПросмотр       = Истина;
			Элементы.ЕдиницаИзмерения.ТолькоПросмотр  = Истина;
			
			Для каждого СтрокаТч Из Объект.ИспользованиеАналитики Цикл
				ЕстьЗаписьРегситра = ЗначениеЗаполнено(Выборка[СтрокаТч.ИмяИзмерения]);
				СтрокаТч.ЭтоНоваяСтрока = Не ЕстьЗаписьРегситра;			
			КонецЦикла;
		
		КонецЕсли;
				
	КонецЕсли;

	Элементы.ГруппаВнимание.Видимость = фОгрниченоИзменениеСтруктурыПараметров;
	
КонецПроцедуры // УправлениеДоступностью()
                         	
&НаСервере
Процедура СформироватьСписокВыбораИмяИзмерения()
	
	Для i = 1 По фМаксимальноДоступноеКоличество Цикл
		
		Элементы.ИспользованиеАналитикиИмяИзмерения.СписокВыбора.Добавить("Аналитика_" + Строка(i));	
	
	КонецЦикла;	

КонецПроцедуры // СформироватьСписокВыбораИмяИзмерения()

&НаСервере
Функция ПолучитьСписокВыбораИмениТипаАналитики(ТекущаяАналитика)

	МассивТипов = ТекущаяАналитика.ТипЗначения.Типы();
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого ТекущийТип Из МассивТипов Цикл
			
		МассивДляОписания = Новый Массив;
		МассивДляОписания.Добавить(ТекущийТип);
		
		Описание = Новый ОписаниеТипов(МассивДляОписания); 		
		ПустоеЗначение = Описание.ПривестиЗначение();		
		ИмяТипа 	   = ПустоеЗначение.Метаданные().ПолноеИмя();
		
		СписокВыбора.Добавить(ИмяТипа);
						
	КонецЦикла; 
	
	Возврат СписокВыбора;

КонецФункции // ПолучитьСписокВыбораИмениТипаАналитики()
 
&НаСервере
Функция ПолучитьКоличествоТиповАналитики(ТекущаяАналитика)

	Результат = ?(ЗначениеЗаполнено(ТекущаяАналитика),
					ТекущаяАналитика.ТипЗначения.Типы().Количество(),
					0);
	Возврат Результат;
	
КонецФункции // ПолучитьКоличествоТиповАналитики()

&НаСервере
Процедура ОбновитьКоличествоТиповАналитик()

	Для каждого СтрокаТаблицы Из Объект.ИспользованиеАналитики Цикл
	 	СтрокаТаблицы.КоличествоТипов = ПолучитьКоличествоТиповАналитики(СтрокаТаблицы.Аналитика);	
	КонецЦикла;

КонецПроцедуры // ОбновитьКоличествоТиповАналитик()

&НаСервере
Функция НайтиПримитивныеТипы(ТекущаяАналитика)

	МассивТипов  = ТекущаяАналитика.ТипЗначения.Типы();
			
	СтрТипы        = "";
	Для каждого ТекущийТип Из МассивТипов Цикл
		
		МассивДляОписания = Новый Массив;
		МассивДляОписания.Добавить(ТекущийТип);
		Описание = Новый ОписаниеТипов(МассивДляОписания);
		Если бит_ОбщегоНазначения.ЭтоПримитивныйТип(Описание.ПривестиЗначение()) Тогда
			СтрТипы = бит_СтрокиКлиентСервер.ДобавитьСтрокуСРазделителем(СтрТипы,Строка(ТекущийТип),", ");
		КонецЕсли; 
		
	КонецЦикла; // По типам 
	
	Возврат СтрТипы;
	
КонецФункции // НайтиПримитивныеТипы()

#КонецОбласти

