#Область ПрограммныйИнтерфейс

#Область Интеграции

// Функция сравнивает две таблицы значений
//
// Параметры:
//  ТаблицаЗначений1 - ТаблицаЗначений	 - Первая таблица значений
//  ТаблицаЗначений2 - ТаблицаЗначений	 - Вторая таблица значений
// 
// Возвращаемое значение:
//  Булево - Таблицы значений равны
//
Функция ТаблицыЗначенийРавны(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

    Если Не ТипЗнч(ТаблицаЗначений1) = Тип("ТаблицаЗначений") ИЛИ Не ТипЗнч(ТаблицаЗначений2) = Тип("ТаблицаЗначений") Тогда
        Возврат Ложь;
    КонецЕсли; 
    
    Если Не ТаблицаЗначений1.Количество() = ТаблицаЗначений2.Количество() Тогда
        Возврат Ложь;
    КонецЕсли; 

    Если Не ТаблицаЗначений1.Колонки.Количество() = ТаблицаЗначений2.Колонки.Количество() Тогда
        Возврат Ложь;
    КонецЕсли;
    
   // Проверим поля.
    Для Каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
        Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла; 
    Для Каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
        Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла; 
    
   // Сформируем строку индекса для оптимизации поиска по таблице значений.
    СтрокаИндекса = "";
    Для Каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
        Если СтрокаИндекса = "" Тогда
            СтрокаИндекса = Колонка.Имя;
        Иначе
            СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
        КонецЕсли;
	КонецЦикла;
	
   // Добавим индекс.
    ТаблицаЗначений2.Индексы.Добавить(СтрокаИндекса);
    
   // Проверим записи.
    Для Каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
        СтруктураПоиска = Новый Структура;
        Для Каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
        СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
        Если Не СтрокиТаблицы2.Количество() = 1 Тогда
            Возврат Ложь;
        КонецЕсли; 
    КонецЦикла;
    
   // Сформируем строку индекса для оптимизации поиска по таблице значений.
    СтрокаИндекса = "";
    Для Каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
        Если СтрокаИндекса = "" Тогда
            СтрокаИндекса = Колонка.Имя;
        Иначе
            СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
        КонецЕсли;
	КонецЦикла;
	
   // Добавим индекс.
    ТаблицаЗначений1.Индексы.Добавить(СтрокаИндекса);
    
    Для Каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
        СтруктураПоиска = Новый Структура;
        Для Каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
        СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
        Если Не СтрокиТаблицы1.Количество() = 1 Тогда
            Возврат Ложь;
        КонецЕсли; 
    КонецЦикла;
    
    Возврат Истина;
    
КонецФункции// СравнитьТаблицыЗначений()

// Функция получает имя настройки организации ОКЕЙ
// 
// Возвращаемое значение:
//  Строка - Имя настройки
//
Функция ПолучитьИмяНастройкиОрганизацияОКЕЙ() Экспорт
	Возврат "Организация ОКЕЙ";	
КонецФункции

// Функция получает имя группы настроек параметров загрузки Аксапты 12
// 
// Возвращаемое значение:
//  Строка - Имя группы настроек
//
Функция ПолучитьИмяГруппыНастроекПараметрыЗагрузкиАксапты12() Экспорт
	Возврат "ПараметрыЗагрузкиАксапты12";
КонецФункции

// Функция получает организацию по имени настройки
//
// Параметры:
//  ИмяНастройки - Строка	 - Имя настройки
// 
// Возвращаемое значение:
//  СправочникСсылка.Организации - Организация
//
Функция ПолучитьОрганизацию(ИмяНастройки) Экспорт
	
	Возврат бит_БК_Общий.ПолучитьЗначениеНастройкиМеханизмаИмпортаДанных("Организации", ИмяНастройки);
	
	//Организация	=	Справочники.Организации.ПустаяСсылка();
	//
	//Запрос	=	Новый Запрос;
	//Запрос.УстановитьПараметр("Группа",			"Организации");
	//Запрос.УстановитьПараметр("ИмяНастройки",	ИмяНастройки);
	//Запрос.Текст	=
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение КАК Значение
	//|ИЗ
	//|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	//|ГДЕ
	//|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа
	//|	И бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки = &ИмяНастройки";
	//Результат	=	Запрос.Выполнить();
	//
	//Если Не Результат.Пустой() Тогда
	//	Выборка	=	Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Организация	=	Выборка.Значение;		
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат Организация;
	
КонецФункции

// Функция получает отбор по объекту в интегрируемой системе 
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.ОбъектыСтроительства - Объект
// 
// Возвращаемое значение:
//  Строка - Строковое представление объекта в интегрируемой системе
//
Функция ПолучитьОтборПоОбъекту(ОбъектСсылка, Источник) Экспорт
	
	ИмяНастройкиОрганизация	=	ПолучитьИмяНастройкиОрганизацияОКЕЙ();
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("Источник",		Источник);
	Запрос.УстановитьПараметр("Организация",	ПолучитьОрганизацию(ИмяНастройкиОрганизация));
	Запрос.УстановитьПараметр("Объект",			ОбъектСсылка);
	Запрос.Текст	=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ок_СопоставлениеАналитикиДляИнтеграций.АналитикаИсточника КАК АналитикаИсточника
	|ИЗ
	|	РегистрСведений.ок_СопоставлениеАналитикиДляИнтеграций КАК ок_СопоставлениеАналитикиДляИнтеграций
	|ГДЕ
	|	ок_СопоставлениеАналитикиДляИнтеграций.Источник = &Источник
	|	И ок_СопоставлениеАналитикиДляИнтеграций.Организация = &Организация
	|	И ок_СопоставлениеАналитикиДляИнтеграций.Аналитика1С = &Объект
	|	И ок_СопоставлениеАналитикиДляИнтеграций.Тип1С.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.бит_ВидыОбъектовСистемы.Справочник)
	|	И ок_СопоставлениеАналитикиДляИнтеграций.Тип1С.ИмяОбъекта = ""ОбъектыСтроительства""
	|	И НЕ ок_СопоставлениеАналитикиДляИнтеграций.Тип1С.ПометкаУдаления";
	
	Результат	=	Запрос.Выполнить();
	
	ОбъектСтрока	=	"";
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;	
	Иначе
		Выборка	=	Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ОбъектСтрока	=	Выборка.АналитикаИсточника;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ОбъектСтрока;
	
КонецФункции

// Функция выгружает помеченные значения списка в массив
//
// Параметры:
//  СписокЗначений	 - СписокЗначений	 - Список значений
// 
// Возвращаемое значение:
//  Массив - Массив помеченных значений
//
Функция ВыгрузитьПомеченныеЗначенияСписка(СписокЗначений) Экспорт
	
	Массив	=	Новый Массив;
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		Если ЭлементСписка.Пометка Тогда
			Массив.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив; 
	
КонецФункции

// Функция получает параметры регламентных заданий для интеграций
// 
// Возвращаемое значение:
//  Структура - Параметры регламентного задания
//
Функция ПолучитьПараметрыРегламентногоЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала		=	Неопределено;
	ДатаОкончания	=	Неопределено;
	
	ИмяНастройки	=	Новый Массив;
	ИмяНастройки.Добавить("Начало Периода");
	ИмяНастройки.Добавить("Конец Периода");
	
	Запрос	=	Новый Запрос;
	Запрос.УстановитьПараметр("Группа", 		ок_ОбщегоНазначенияФинансы21.ПолучитьИмяГруппыНастроекПараметрыЗагрузкиАксапты12());
	Запрос.УстановитьПараметр("ИмяНастройки", 	ИмяНастройки);
	Запрос.Текст	=
	"ВЫБРАТЬ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Значение КАК Значение,
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки КАК ИмяНастройки
	|ИЗ
	|	РегистрСведений.бит_ок_НастройкиМеханизмаИмпортаДанных КАК бит_ок_НастройкиМеханизмаИмпортаДанных
	|ГДЕ
	|	бит_ок_НастройкиМеханизмаИмпортаДанных.Группа = &Группа
	|	И бит_ок_НастройкиМеханизмаИмпортаДанных.ИмяНастройки В(&ИмяНастройки)";
	Результат	=	Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка	=	Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ИмяНастройки = "Начало Периода" Тогда
				ДатаНачала		=	Выборка.Значение;
			КонецЕсли;
			Если Выборка.ИмяНастройки = "Конец Периода" Тогда
				ДатаОкончания	=	Выборка.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Параметры	=	Новый Структура;
	Параметры.Вставить("ДатаНачала", 	ДатаНачала);
	Параметры.Вставить("ДатаОкончания",	ДатаОкончания);
	
	Возврат Параметры;
	
КонецФункции

// Преобразует число формата ГГГГММЧЧ в дату в запросе.
//
// Параметры:
//  Поле - Строка	 - Наименование таблицы и поля таблицы. Например, "Таблица.ДатаЧисло"
// 
// Возвращаемое значение:
//  Строка - Преобразование числа в строку.
//
Функция ПреобразованиеЧислаВДатуДляЗапроса(Поле) Экспорт
	
	// Может вернуть 1, а может 1753. Зависит от настроек сервера.
	СмещениеДат					=	"ГОД(ДАТАВРЕМЯ(1, 1, 1))";
	
	Строка	=	"ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, 
				|(ВЫРАЗИТЬ(Таблица.Дата / 10000 КАК ЧИСЛО(4, 0))) - " + СмещениеДат + "), МЕСЯЦ, 
				|(ВЫРАЗИТЬ((Таблица.Дата - 10000 * (ВЫРАЗИТЬ(Таблица.Дата / 10000 КАК ЧИСЛО(4, 0)))) / 100 КАК ЧИСЛО(2, 0))) - 1), ДЕНЬ, 
				|Таблица.Дата - 100 * (ВЫРАЗИТЬ(Таблица.Дата / 100 КАК ЧИСЛО(6, 0))) - 1)";
	
	Возврат Строка;
	
КонецФункции

#КонецОбласти

#Область ПечатьТиповыхФорм

//ОКЕЙ Балыков А.Г. (ПервыйБИТ) Начало 2021-09-22 (#ТП_БП10_ФР14)

// Функция возвращает сформированную печатную форму в виде табличного документа для ТИПОВЫХ объектов конфигурации
//
// Параметры:
// 	ВходныеДанные - Структура:
//		ПечатнаяФорма - Строка/Справочник.ДополнительныеОтчетыИОбработки
//		ОбъектОтправки - ДокументСсылка
//
// Возвращаемое значение:
//  ТабДок - Табличный документ - Печатная форма
//
Функция ок_СформироватьТиповуюПечатнуюФорму(ВходныеДанные, ИдентификаторКоманды = "") Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ЭтоПервыйДокумент = Истина;
		
	ИмяМакета = "";
	Если ТипЗнч(ВходныеДанные.ПечатнаяФорма) = Тип("Строка")
		И ЗначениеЗаполнено(ВходныеДанные.ПечатнаяФорма) Тогда
			
		СтрокаПоиска = ".";
		ИндексПоиска = СтрНайти(ВходныеДанные.ПечатнаяФорма, СтрокаПоиска, НаправлениеПоиска.СКонца);
		ИмяМакета = Сред(ВходныеДанные.ПечатнаяФорма, ИндексПоиска+1, СтрДлина(ВходныеДанные.ПечатнаяФорма));																		 
															 
	ИначеЕсли ТипЗнч(ВходныеДанные.ПечатнаяФорма) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		
		Для Каждого СтрокаТЧ Из ВходныеДанные.ПечатнаяФорма.Команды Цикл
			ИмяМакета = СтрокаТЧ.Идентификатор; 
			Прервать;	
		КонецЦикла;			
		
	КонецЕсли;
	
	ИдентификаторКоманды = ?(ЗначениеЗаполнено(ИдентификаторКоманды), ИдентификаторКоманды, ИмяМакета); 
		
	КоллекцияПечатныхФорм 	= ок_НоваяКоллекцияПечатныхФорм(ИдентификаторКоманды);
	ПараметрыПечати 		= Новый Структура;
	МассивОбъектов 			= Новый Массив(1);
	МассивОбъектов[0]		= ВходныеДанные.ОбъектОтправки;
		
	Параметры = Новый Структура;
	Параметры.Вставить("ПараметрыИсточника", Новый Структура("ИдентификаторКоманды, ОбъектыНазначения", ИдентификаторКоманды, МассивОбъектов));
	Если ТипЗнч(ВходныеДанные.ПечатнаяФорма) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда 
		УправлениеПечатью.ПечатьПоВнешнемуИсточнику(
				ВходныеДанные.ПечатнаяФорма,
				Параметры.ПараметрыИсточника,
				КоллекцияПечатныхФорм,
				МассивОбъектов,
				ПараметрыПечати);
	Иначе
				
		ИмяМенеджераПечати = Лев(ВходныеДанные.ПечатнаяФорма, ИндексПоиска);
		ДополнительныеПараметры = Новый Структура;
		ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(ИмяМенеджераПечати, ИмяМакета,
						МассивОбъектов, ДополнительныеПараметры);
		КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
		
	КонецЕсли;
	
	Если НЕ ЭтоПервыйДокумент Тогда
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	Для каждого ПечатнаяФорма из КоллекцияПечатныхФорм цикл
		ТабДок.Вывести(ПечатнаяФорма.ТабличныйДокумент);
		ЭтоПервыйДокумент = Ложь;
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

// Конструктор параметра КоллекцияПечатныхФорм для процедур и функций этого модуля.
// См. ПечатьДокументов()
// См. ОписаниеПечатнойФормы().
//
// Параметры:
//  Идентификаторы - Строка - идентификаторы печатных форм.
//
// Возвращаемое значение:
//  Массив - коллекция описаний печатных форм. Коллекция предназначена для использования в качестве
//           параметра КоллекцияПечатныхФорм в других процедурах клиентского программного интерфейса подсистемы.
//           Для обращения к элементам коллекции необходимо использовать функцию ОписаниеПечатнойФормы.
//
Функция ок_НоваяКоллекцияПечатныхФорм(Знач Идентификаторы)
	
	Если ТипЗнч(Идентификаторы) = Тип("Строка") Тогда
		Идентификаторы = СтрРазделить(Идентификаторы, ",");
	КонецЕсли;
	
	Поля = УправлениеПечатьюКлиентСервер.ИменаПолейКоллекцииПечатныхФорм();
	ДобавленныеПечатныеФормы = Новый Соответствие;
	Результат = Новый Массив;
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ПечатнаяФорма = ДобавленныеПечатныеФормы[Идентификатор];
		Если ПечатнаяФорма = Неопределено Тогда
			ПечатнаяФорма = Новый Структура(СтрСоединить(Поля, ","));
			ПечатнаяФорма.ИмяМакета = Идентификатор;
			ПечатнаяФорма.ИмяВРЕГ = ВРег(Идентификатор);
			ПечатнаяФорма.Экземпляров = 1;
			ДобавленныеПечатныеФормы.Вставить(Идентификатор, ПечатнаяФорма);
			Результат.Добавить(ПечатнаяФорма);
		Иначе
			ПечатнаяФорма.Экземпляров = ПечатнаяФорма.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//ОКЕЙ Балыков А.Г. (ПервыйБИТ) Конец 2021-09-22 (#ТП_БП11_ФР14)

#КонецОбласти


#Область РассылкаПоПочте

//ОКЕЙ Балыков А.Г. (ПервыйБИТ) Начало 2021-09-22 (#ТП_БП10_ФР14)

Функция ок_ОтправитьПочтовоеСообщение(ВходныеДанные, УчетнаяЗапись) Экспорт
	ПараметрыПисьма = ок_СформироватьПараметрыПисьма(ВходныеДанные, УчетнаяЗапись);
	Если ПараметрыПисьма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
	РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
	//ДобавитьПолучателейВИсторию(ПараметрыПисьма.Кому);
	Возврат Истина;
КонецФункции

Функция ок_СформироватьПараметрыПисьма(ВходныеДанные, УчетнаяЗапись)
	
	ПараметрыПисьма = Новый Структура;
	Кому = Новый Массив;
	Копии = Новый Массив;
	СкрытыеКопии = Новый Массив;
	
	ТемаПисьма	= ВходныеДанные.ТемаПисьма;
	ТелоПисьма	= ВходныеДанные.ТекстСообщения;
	АдресОтвета = ок_ПолучитьПочтовыйАдресПоУчетнойЗаписи(УчетнаяЗапись);
	
	ПочтовыеАдресаПолучателей = СтрРазделить(ВходныеДанные.ЭлектронныйАдресКА, ",");
	
	Для каждого Получатель Из ПочтовыеАдресаПолучателей Цикл
		ПочтаПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Получатель);
		Для каждого ПочтаПолучателя Из ПочтаПолучателей Цикл
			Кому.Добавить(Новый Структура("Адрес, Представление", ПочтаПолучателя.Адрес, ПочтаПолучателя.Псевдоним));
		КонецЦикла;
	КонецЦикла;
	
	Если Кому.Количество() > 0 Тогда
		ПараметрыПисьма.Вставить("Кому", Кому);
	КонецЕсли;
		
	СписокПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(АдресОтвета);
	Кому = Новый Массив;
	Для Каждого Получатель Из СписокПолучателей Цикл
		Если Не ПустаяСтрока(Получатель.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Получатель.ОписаниеОшибки, , "АдресОтвета");
			Возврат Неопределено;
		КонецЕсли;
		Кому.Добавить(Новый Структура("Адрес, Представление", Получатель.Адрес, Получатель.Псевдоним));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресОтвета) Тогда
		ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТемаПисьма) Тогда
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	КонецЕсли;
		
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("Вложения", ВходныеДанные.Вложения);
	
	Возврат ПараметрыПисьма;
	
КонецФункции

Функция ок_ПолучитьПочтовыйАдресПоУчетнойЗаписи(Знач УчетнаяЗапись)
	
	Возврат СокрЛП(УчетнаяЗапись.ИмяПользователя)
			+ ? (ПустаяСтрока(СокрЛП(УчетнаяЗапись.ИмяПользователя)),
					УчетнаяЗапись.АдресЭлектроннойПочты,
					" <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">");
	
КонецФункции

Функция ок_СоздатьВложение(ТабДок, НаименованиеСРасширением, ФорматСохранения = Неопределено) Экспорт
	
	Если ФорматСохранения = Неопределено Тогда
		ФорматСохранения = ТипФайлаТабличногоДокумента.DOCX;			
	КонецЕсли;
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + НаименованиеСРасширением;
		
	ТабДок.Записать(ИмяВременногоФайла, ФорматСохранения);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ИнтеграцияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	Вложение = Новый Структура;
	Вложение.Вставить("Представление", 				НаименованиеСРасширением);
	Вложение.Вставить("АдресВоВременномХранилище", 	АдресВХранилище);
	Вложение.Вставить("Кодировка", 					"utf-8");
	Вложение.Вставить("Идентификатор", 				"");	
	
	Возврат Вложение;
	
КонецФункции

//ОКЕЙ Балыков А.Г. (ПервыйБИТ) Конец 2021-09-22 (#ТП_БП11_ФР14)

#КонецОбласти

#КонецОбласти