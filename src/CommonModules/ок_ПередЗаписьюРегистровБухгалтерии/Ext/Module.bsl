/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Общий модуль выполняет обработку события "ПередЗаписью" 
// Для объектов включенных в подписку "ок_ПередЗаписьюРегистровБухгалтерии"
//
// Для расширения функциональности, необходимо:
// 1. Включить "НаборДанных" в подписку "ок_ПередЗаписьюРегистровБухгалтерии"
// 2. В процедуре "ок_ПередЗаписьюРегистровБухгалтерииПередЗаписью" добавить ветку условия с проверкой на тип источника
// 3. Создать область по шаблону "Регистр_ИмяРегистра"
// 4. Создать процедуру внутри области по шаблону "ПередЗаписьюРегистра_ИмяРегистра"
// 5. Вызвать созданную процедуру из ветки условия в процедуре "ок_ПередЗаписьюРегистровБухгалтерииПередЗаписью"
// 6. Необходимые служебные процедуры и функции размещать в области модуля "СлужебныеПроцедурыИФункции"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//Процедура вызываемая подпиской на событие "ок_ПередЗаписьюРегистровБухгалтерии"
// Параметры:
// Источник - Документ, Тип - РегистрБухгалтерииНаборЗаписей
// Отказ - Флаг отказа, Тип - Булево
// РежимЗаписи - флаг записи, Тип - Булево
Процедура ок_ПередЗаписьюРегистровБухгалтерииПередЗаписью(Источник, Отказ, РежимЗаписи) Экспорт
	
	Если ТипЗнч(Источник) = Тип("РегистрБухгалтерииНаборЗаписей.Хозрасчетный") Тогда
		ПередЗаписьюРегистра_Хозрасчетный(Источник, Отказ, РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Регистр_Хозрасчетный

Процедура ПередЗаписьюРегистра_Хозрасчетный(Источник, Отказ, РежимЗаписи)
		
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстанавливаемаяАналитика = Новый Структура;
	
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-12 (#4267)
	ДополнитьПараметрамиОчисткиПодразделения(Источник, Отказ, РежимЗаписи, УстанавливаемаяАналитика);
	// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-12 (#4267)
	
	Если УстанавливаемаяАналитика.Количество() > 0 Тогда
		ЗаполнитьЗначенияАналитик(Источник, УстанавливаемаяАналитика, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// ОКЕЙ Смирнов М.В. (СофтЛаб) Начало 2021-07-12 (#4267)
Процедура ДополнитьПараметрамиОчисткиПодразделения(Источник, Отказ, РежимЗаписи, УстанавливаемаяАналитика)
	
	ОбъектыСистемы = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Очищать подразделение в РСБУ", "Список документов");
	
	Если ТипЗнч(ОбъектыСистемы) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	МассивСчетовОтбор = ОК_ОбщегоНазначения.ПолучитьЗначениеУниверсальнойНастройки("Очищать подразделение в РСБУ", "Список счетов");
	
	Если ТипЗнч(МассивСчетовОтбор) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	
	Для каждого ОбъектСистемы Из ОбъектыСистемы Цикл
		МассивТипов.Добавить(ОбъектСистемы.ТипЗначенияОбъекта.Получить());
	КонецЦикла;
	
	ТипРегистратора = ТипЗнч(Источник.Отбор.Регистратор.Значение);
	
	Если МассивТипов.Найти(ТипРегистратора) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУстановкиПодразделения = Новый Структура;
	ПараметрыУстановкиПодразделения.Вставить("Счет", МассивСчетовОтбор);
	ПараметрыУстановкиПодразделения.Вставить("ЗначениеАналитики", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	
	УстанавливаемаяАналитика.Вставить("Подразделение", ПараметрыУстановкиПодразделения);
	
КонецПроцедуры
// ОКЕЙ Смирнов М.В. (СофтЛаб) Конец 2021-07-12 (#4267)

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает аналитику в наборе записей по переданной структуре. 
//
// Параметры:
//   НаборЗаписей       - РегистрБухгалтерииНаборЗаписей.Хозрасчетный - Хозрасчетный.
//   СтруктураУстанавливаемыхАналитик - Структура - Структура из структур содержащая параметры установки аналитик.
//   * Ключ             - Строка    - Имя измерения или субконто.
//   * Значение         - Структура - Имя Параметры установки аналитики.
//   ** Ключ            - Строка    - Имя параметра, обязательные параметры, "Счет" и "ЗначениеАналитики", опциональный "Субконто" - для установки значения в субконто
//   ** Значение        - ПроизвольноеЗначение - Устанавливаемое значение аналитики.
//   Отказ              - Булево   - Флаг отказа от записи
Процедура ЗаполнитьЗначенияАналитик(НаборЗаписей, СтруктураУстанавливаемыхАналитик, Отказ = Ложь) Экспорт
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		Для каждого КлючЗначениеАналитика Из СтруктураУстанавливаемыхАналитик Цикл
			
			Если ТипЗнч(КлючЗначениеАналитика.Значение) = Тип("Структура") Тогда
				
				Если Не КлючЗначениеАналитика.Значение.Свойство("Счет") Тогда
					
					ТекстСообщения = НСтр("ru = 'Отсутствует обязательный параметр ""Счет"" для аналитики '") + КлючЗначениеАналитика.Ключ;
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					
					ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыБухгалтерии.Хозрасчетный,, ТекстСообщения);
					
				КонецЕсли;
				
				Если Не КлючЗначениеАналитика.Значение.Свойство("ЗначениеАналитики") Тогда
					
					ТекстСообщения = НСтр("ru = 'Отсутствует обязательный параметр ""ЗначениеАналитики"" для аналитики '") + КлючЗначениеАналитика.Ключ;
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					
					ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыБухгалтерии.Хозрасчетный,, ТекстСообщения);
					
				КонецЕсли;
				
				Если ТипЗнч(КлючЗначениеАналитика.Значение.Счет) = Тип("Массив") Тогда
					МассивСчетов = КлючЗначениеАналитика.Значение.Счет
				Иначе
					МассивСчетов = Новый Массив;
					МассивСчетов.Добавить(КлючЗначениеАналитика.Значение.Счет);
				КонецЕсли;
				
				Если КлючЗначениеАналитика.Значение.Свойство("Субконто") Тогда // опционально
					
					БухгалтерскийУчет.УстановитьСубконто(ЗаписьНабора.СчетДт, ЗаписьНабора.СубконтоДт, КлючЗначениеАналитика.Ключ, КлючЗначениеАналитика.Значение.ЗначениеАналитики);
					БухгалтерскийУчет.УстановитьСубконто(ЗаписьНабора.СчетКт, ЗаписьНабора.СубконтоКт, КлючЗначениеАналитика.Ключ, КлючЗначениеАналитика.Значение.ЗначениеАналитики);
					
				Иначе
					
					Измерение = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Измерения.Найти(КлючЗначениеАналитика.Ключ);
					
					Если Измерение = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Отсутствует измерение с именем '") + КлючЗначениеАналитика.Ключ;
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
						
						ЗаписьЖурналаРегистрации("Данные.Изменение", УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыБухгалтерии.Хозрасчетный,, ТекстСообщения);
					КонецЕсли;
					
					ИмяПризнакаУчета = "";
					ЕстьПризнакУчета = Ложь;
					
					Если Измерение.ПризнакУчета <> Неопределено Тогда
						ИмяПризнакаУчета = Измерение.ПризнакУчета.Имя;
						ЕстьПризнакУчета = Истина;
					КонецЕсли;
					
					Если МассивСчетов.Найти(ЗаписьНабора.СчетДт) <> Неопределено Тогда
						
						Если ЕстьПризнакУчета И ЗаписьНабора.СчетДт[ИмяПризнакаУчета] Тогда
							ЗаписьНабора[КлючЗначениеАналитика.Ключ + "Дт"] = КлючЗначениеАналитика.Значение.ЗначениеАналитики;
						КонецЕсли;
						
					КонецЕсли;
					
					Если МассивСчетов.Найти(ЗаписьНабора.СчетКт) <> Неопределено Тогда
						
						Если ЕстьПризнакУчета И ЗаписьНабора.СчетКт[ИмяПризнакаУчета] Тогда
							ЗаписьНабора[КлючЗначениеАналитика.Ключ + "Кт"] = КлючЗначениеАналитика.Значение.ЗначениеАналитики;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти