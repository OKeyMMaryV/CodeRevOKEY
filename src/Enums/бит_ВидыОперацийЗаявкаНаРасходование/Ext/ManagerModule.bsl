#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДоступныеЗначения(
		Параметры.Отбор, Параметры.СтрокаПоиска).ДоступныеЗначения;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Отбор") Тогда
		Параметры.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	
	Если Параметры.Свойство("ФормаОплаты") И ЗначениеЗаполнено(Параметры.ФормаОплаты) Тогда
		Параметры.Отбор.Вставить("ФормаОплаты", Параметры.ФормаОплаты);
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьДоступныеЗначения(
		Параметры.Отбор, Неопределено).ДоступныеЗначения;
	
	Параметры.Отбор.Очистить();
	Параметры.Отбор.Вставить("Ссылка", ДанныеВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция выполняет заполнение списка значений 
// данных выбора с учетом настроек параметров учета.
// Поддерживается параметр отбора.
// Обрабатывается также строка поиска.
//
Функция ПолучитьДоступныеЗначения(Отбор, СтрокаПоиска = "") Экспорт
	
	ФормаОплаты = Неопределено;
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Если Отбор.Свойство("ФормаОплаты") И ЗначениеЗаполнено(Отбор.ФормаОплаты) Тогда
			ФормаОплаты = Отбор.ФормаОплаты;
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеЗначения = Новый СписокЗначений;
	ЕстьНедоступные   = Ложь;
	ЗначенияПоФормеОплаты = Новый СписокЗначений(); 
	
	Если ЗначениеЗаполнено(ФормаОплаты) Тогда
		Если ФормаОплаты = Перечисления.бит_ВидыДенежныхСредств.Безналичные Тогда
			ЗначенияПоФормеОплаты = ВидыОперацийСписаниеБезналичных();
		Иначе	
			ЗначенияПоФормеОплаты = ВидыОперацийВыдачаНаличных();
		КонецЕсли;
	КонецЕсли;
		
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.бит_ВидыОперацийЗаявкаНаРасходование.ЗначенияПеречисления Цикл
		
		Если ТипЗнч(СтрокаПоиска) = Тип("Строка")
			И НЕ ПустаяСтрока(СтрокаПоиска)
			И СтрНайти(НРег(ЗначениеПеречисления.Синоним), НРег(СтрокаПоиска)) <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Ссылка = Перечисления.бит_ВидыОперацийЗаявкаНаРасходование[ЗначениеПеречисления.Имя];
		Если ТипЗнч(Отбор) = Тип("ПеречислениеСсылка.бит_ВидыОперацийЗаявкаНаРасходование")
			И Отбор <> Ссылка Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ФиксированныйМассив")
			И Отбор.Найти(Ссылка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначенияПоФормеОплаты.Количество() <> 0 И ЗначенияПоФормеОплаты.НайтиПоЗначению(Ссылка) = Неопределено Тогда
			ЕстьНедоступные = Истина;
			Продолжить;
		КонецЕсли;
		ДоступныеЗначения.Добавить(Ссылка, ЗначениеПеречисления.Синоним);
		
	КонецЦикла;
	
	Возврат Новый Структура("ДоступныеЗначения,ЕстьНедоступные", ДоступныеЗначения, ЕстьНедоступные);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВидыОперацийВыдачаНаличных()

 	СоответствиеКонтроль = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("РасходныйКассовыйОрдер");	
	Возврат ЗначенияПоФормеОплаты(СоответствиеКонтроль);
	
КонецФункции

Функция ВидыОперацийСписаниеБезналичных()

	СоответствиеКонтроль = бит_КазначействоКлиентСервер.ВидыОперацийЗаявкиВидыОперацийРегл("СписаниеСРасчетногоСчета");	
	Возврат ЗначенияПоФормеОплаты(СоответствиеКонтроль);
	
КонецФункции

Функция ЗначенияПоФормеОплаты(СоответствиеКонтроль)

	ДоступныеЭлементы = Новый СписокЗначений(); 
	Для каждого КлючЗначение Из СоответствиеКонтроль Цикл
		ДоступныеЭлементы.Добавить(КлючЗначение.Ключ);
	КонецЦикла;

	Возврат ДоступныеЭлементы;
	
КонецФункции 
 
#КонецОбласти

#КонецЕсли